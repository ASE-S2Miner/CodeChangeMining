[{"original_method":"@Test\n  public void testGetServiceResources() throws Exception{\n    Resource.Type type = Resource.Type.Service;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n\n    Set<ServiceResponse> allResponse = new HashSet<ServiceResponse>();\n    allResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service100\", null, \"HDP-0.1\", \"DEPLOYED\"));\n    allResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service101\", null, \"HDP-0.1\", \"DEPLOYED\"));\n    allResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service102\", null, \"HDP-0.1\", \"DEPLOYED\"));\n    allResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service103\", null, \"HDP-0.1\", \"DEPLOYED\"));\n    allResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service104\", null, \"HDP-0.1\", \"DEPLOYED\"));\n\n    Set<ServiceResponse> nameResponse = new HashSet<ServiceResponse>();\n    nameResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service102\", null, \"HDP-0.1\", \"DEPLOYED\"));\n\n    Set<ServiceResponse> stateResponse = new HashSet<ServiceResponse>();\n    stateResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service100\", null, \"HDP-0.1\", \"DEPLOYED\"));\n    stateResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service102\", null, \"HDP-0.1\", \"DEPLOYED\"));\n    stateResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service104\", null, \"HDP-0.1\", \"DEPLOYED\"));\n\n    // set expectations\n    expect(managementController.getServices(anyObject(Set.class))).andReturn(allResponse).once();\n    expect(managementController.getServices(anyObject(Set.class))).andReturn(nameResponse).once();\n    expect(managementController.getServices(anyObject(Set.class))).andReturn(stateResponse).once();\n\n    // replay\n    replay(managementController);\n\n    ResourceProvider provider = AbstractResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    Set<String> propertyIds = new HashSet<String>();\n\n    propertyIds.add(ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID);\n    propertyIds.add(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID);\n\n    // create the request\n    Request request = PropertyHelper.getReadRequest(propertyIds);\n    // get all ... no predicate\n    Set<Resource> resources = provider.getResources(request, null);\n\n    Assert.assertEquals(5, resources.size());\n    Set<String> names = new HashSet<String>();\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID);\n      Assert.assertEquals(\"Cluster100\", clusterName);\n      names.add((String) resource.getPropertyValue(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID));\n    }\n    // Make sure that all of the response objects got moved into resources\n    for (ServiceResponse serviceResponse : allResponse ) {\n      Assert.assertTrue(names.contains(serviceResponse.getServiceName()));\n    }\n\n    // get service named Service102\n    Predicate  predicate = new PredicateBuilder().property(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(\"Service102\").toPredicate();\n    request = PropertyHelper.getReadRequest(\"ServiceInfo\");\n    resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(1, resources.size());\n    Assert.assertEquals(\"Service102\", resources.iterator().next().getPropertyValue(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID));\n\n    // get services where state == \"DEPLOYED\"\n    predicate = new PredicateBuilder().property(ServiceResourceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID).equals(\"DEPLOYED\").toPredicate();\n    request = PropertyHelper.getReadRequest(propertyIds);\n    resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(3, resources.size());\n    names = new HashSet<String>();\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID);\n      Assert.assertEquals(\"Cluster100\", clusterName);\n      names.add((String) resource.getPropertyValue(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID));\n    }\n    // Make sure that all of the response objects got moved into resources\n    for (ServiceResponse serviceResponse : stateResponse ) {\n      Assert.assertTrue(names.contains(serviceResponse.getServiceName()));\n    }\n\n    // verify\n    verify(managementController);\n  }","id":105000,"modified_method":"@Test\n  public void testGetServiceResources() throws Exception{\n    Resource.Type type = Resource.Type.Service;\n\n    AmbariManagementController managementController = createMock(AmbariManagementController.class);\n\n    Set<ServiceResponse> allResponse = new HashSet<ServiceResponse>();\n    allResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service100\", null, \"HDP-0.1\", \"DEPLOYED\"));\n    allResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service101\", null, \"HDP-0.1\", \"DEPLOYED\"));\n    allResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service102\", null, \"HDP-0.1\", \"DEPLOYED\"));\n    allResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service103\", null, \"HDP-0.1\", \"DEPLOYED\"));\n    allResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service104\", null, \"HDP-0.1\", \"DEPLOYED\"));\n\n    Set<ServiceResponse> nameResponse = new HashSet<ServiceResponse>();\n    nameResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service102\", null, \"HDP-0.1\", \"DEPLOYED\"));\n\n    Set<ServiceResponse> stateResponse = new HashSet<ServiceResponse>();\n    stateResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service100\", null, \"HDP-0.1\", \"DEPLOYED\"));\n    stateResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service102\", null, \"HDP-0.1\", \"DEPLOYED\"));\n    stateResponse.add(new ServiceResponse(100L, \"Cluster100\", \"Service104\", null, \"HDP-0.1\", \"DEPLOYED\"));\n\n    // set expectations\n    expect(managementController.getServices(EasyMock.<Set<ServiceRequest>>anyObject())).andReturn(allResponse).once();\n    expect(managementController.getServices(EasyMock.<Set<ServiceRequest>>anyObject())).andReturn(nameResponse).once();\n    expect(managementController.getServices(EasyMock.<Set<ServiceRequest>>anyObject())).andReturn(stateResponse).once();\n\n    // replay\n    replay(managementController);\n\n    ResourceProvider provider = AbstractResourceProvider.getResourceProvider(\n        type,\n        PropertyHelper.getPropertyIds(type),\n        PropertyHelper.getKeyPropertyIds(type),\n        managementController);\n\n    Set<String> propertyIds = new HashSet<String>();\n\n    propertyIds.add(ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID);\n    propertyIds.add(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID);\n\n    // create the request\n    Request request = PropertyHelper.getReadRequest(propertyIds);\n    // get all ... no predicate\n    Set<Resource> resources = provider.getResources(request, null);\n\n    Assert.assertEquals(5, resources.size());\n    Set<String> names = new HashSet<String>();\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID);\n      Assert.assertEquals(\"Cluster100\", clusterName);\n      names.add((String) resource.getPropertyValue(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID));\n    }\n    // Make sure that all of the response objects got moved into resources\n    for (ServiceResponse serviceResponse : allResponse ) {\n      Assert.assertTrue(names.contains(serviceResponse.getServiceName()));\n    }\n\n    // get service named Service102\n    Predicate  predicate = new PredicateBuilder().property(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID).equals(\"Service102\").toPredicate();\n    request = PropertyHelper.getReadRequest(\"ServiceInfo\");\n    resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(1, resources.size());\n    Assert.assertEquals(\"Service102\", resources.iterator().next().getPropertyValue(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID));\n\n    // get services where state == \"DEPLOYED\"\n    predicate = new PredicateBuilder().property(ServiceResourceProvider.SERVICE_SERVICE_STATE_PROPERTY_ID).equals(\"DEPLOYED\").toPredicate();\n    request = PropertyHelper.getReadRequest(propertyIds);\n    resources = provider.getResources(request, predicate);\n\n    Assert.assertEquals(3, resources.size());\n    names = new HashSet<String>();\n    for (Resource resource : resources) {\n      String clusterName = (String) resource.getPropertyValue(ServiceResourceProvider.SERVICE_CLUSTER_NAME_PROPERTY_ID);\n      Assert.assertEquals(\"Cluster100\", clusterName);\n      names.add((String) resource.getPropertyValue(ServiceResourceProvider.SERVICE_SERVICE_NAME_PROPERTY_ID));\n    }\n    // Make sure that all of the response objects got moved into resources\n    for (ServiceResponse serviceResponse : stateResponse ) {\n      Assert.assertTrue(names.contains(serviceResponse.getServiceName()));\n    }\n\n    // verify\n    verify(managementController);\n  }","commit_id":"7170887107944909d737528b42ac8696a29e7c1d","url":"https://github.com/apache/ambari"},{"original_method":"public static ServiceRequest serviceRequest(String clusterName, String serviceName, Map<String, String> configVersions, String desiredState)\n    {\n      EasyMock.reportMatcher(new ServiceRequestMatcher(clusterName, serviceName, configVersions, desiredState));\n      return null;\n    }","id":105001,"modified_method":"public static Set<ServiceRequest> serviceRequestSet(String clusterName, String serviceName, Map<String, String> configVersions, String desiredState)\n    {\n      EasyMock.reportMatcher(new ServiceRequestSetMatcher(clusterName, serviceName, configVersions, desiredState));\n      return null;\n    }","commit_id":"7170887107944909d737528b42ac8696a29e7c1d","url":"https://github.com/apache/ambari"},{"original_method":"private ActionRequest getRequest(Map<String, Object> properties) {\n    Map<String, String> params = new HashMap<String, String>();\n    for (Entry<String, Object> entry : properties.entrySet()) {\n      String propertyid = entry.getKey();\n      if (PropertyHelper.getPropertyCategory(propertyid).equals(\"parameters\")\n          && null != entry.getValue()) {\n        params.put(PropertyHelper.getPropertyName(propertyid), entry.getValue().toString());\n      }\n    }\n    return new ActionRequest(\n        (String)  properties.get(ACTION_CLUSTER_NAME_PROPERTY_ID),\n        (String)  properties.get(ACTION_SERVICE_NAME_PROPERTY_ID),\n        (String)  properties.get(ACTION_ACTION_NAME_PROPERTY_ID),\n        params);\n  }","id":105002,"modified_method":"private ActionRequest getRequest(Map<String, Object> properties) {\n    Map<String, String> params = new HashMap<String, String>();\n    for (Entry<String, Object> entry : properties.entrySet()) {\n      String propertyid = entry.getKey();\n\n      String propertyCategory = PropertyHelper.getPropertyCategory(propertyid);\n      if (propertyCategory != null &&\n          propertyCategory.equals(\"parameters\") &&\n          null != entry.getValue()) {\n        params.put(PropertyHelper.getPropertyName(propertyid), entry.getValue().toString());\n      }\n    }\n    return new ActionRequest(\n        (String)  properties.get(ACTION_CLUSTER_NAME_PROPERTY_ID),\n        (String)  properties.get(ACTION_SERVICE_NAME_PROPERTY_ID),\n        (String)  properties.get(ACTION_ACTION_NAME_PROPERTY_ID),\n        params);\n  }","commit_id":"7170887107944909d737528b42ac8696a29e7c1d","url":"https://github.com/apache/ambari"},{"original_method":"@Override\n  public RequestStatus updateResources(Request request, Predicate predicate)\n      throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {\n\n    final Set<ServiceComponentRequest> requests = new HashSet<ServiceComponentRequest>();\n    for (Map<String, Object> propertyMap : getPropertyMaps(request.getProperties().iterator().next(), predicate)) {\n      ServiceComponentRequest compRequest = getRequest(propertyMap);\n      Map<String, String>     configMap   = new HashMap<String,String>();\n\n      for (Map.Entry<String,Object> entry : propertyMap.entrySet()) {\n        if (PropertyHelper.getPropertyCategory(entry.getKey()).equals(\"config\")) {\n          configMap.put(PropertyHelper.getPropertyName(entry.getKey()), (String) entry.getValue());\n        }\n      }\n\n      if (0 != configMap.size())\n        compRequest.setConfigVersions(configMap);\n\n      requests.add(compRequest);\n    }\n\n    RequestStatusResponse response = modifyResources(new Command<RequestStatusResponse>() {\n      @Override\n      public RequestStatusResponse invoke() throws AmbariException {\n        return getManagementController().updateComponents(requests);\n      }\n    });\n\n    notifyUpdate(Resource.Type.Component, request, predicate);\n\n    return getRequestStatus(response);\n  }","id":105003,"modified_method":"@Override\n  public RequestStatus updateResources(Request request, Predicate predicate)\n      throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {\n\n    final Set<ServiceComponentRequest> requests = new HashSet<ServiceComponentRequest>();\n    for (Map<String, Object> propertyMap : getPropertyMaps(request.getProperties().iterator().next(), predicate)) {\n      ServiceComponentRequest compRequest = getRequest(propertyMap);\n      Map<String, String>     configMap   = new HashMap<String,String>();\n\n      for (Map.Entry<String,Object> entry : propertyMap.entrySet()) {\n        String propertyCategory = PropertyHelper.getPropertyCategory(entry.getKey());\n        if (propertyCategory != null && propertyCategory.equals(\"config\")) {\n          configMap.put(PropertyHelper.getPropertyName(entry.getKey()), (String) entry.getValue());\n        }\n      }\n\n      if (0 != configMap.size())\n        compRequest.setConfigVersions(configMap);\n\n      requests.add(compRequest);\n    }\n\n    RequestStatusResponse response = modifyResources(new Command<RequestStatusResponse>() {\n      @Override\n      public RequestStatusResponse invoke() throws AmbariException {\n        return getManagementController().updateComponents(requests);\n      }\n    });\n\n    notifyUpdate(Resource.Type.Component, request, predicate);\n\n    return getRequestStatus(response);\n  }","commit_id":"7170887107944909d737528b42ac8696a29e7c1d","url":"https://github.com/apache/ambari"},{"original_method":"@Override\n  public RequestStatus createResources(Request request)\n      throws SystemException,\n             UnsupportedPropertyException,\n             ResourceAlreadyExistsException,\n             NoSuchParentResourceException {\n\n    for (Map<String, Object> map : request.getProperties()) {\n\n      String cluster = (String) map.get(CONFIGURATION_CLUSTER_NAME_PROPERTY_ID);\n      // TODO : why not CONFIGURATION_CONFIG_TYPE_PROPERTY_ID?\n      String type = (String) map.get(PropertyHelper.getPropertyId(\"\", \"type\"));\n      // TODO : why not CONFIGURATION_CONFIG_TAG_PROPERTY_ID?\n      String tag = (String) map.get(PropertyHelper.getPropertyId(\"\", \"tag\"));\n\n      Map<String, String> configMap = new HashMap<String, String>();\n\n      for (Entry<String, Object> entry : map.entrySet()) {\n        if (PropertyHelper.getPropertyCategory(entry.getKey()).equals(\"properties\") && null != entry.getValue()) {\n          configMap.put(PropertyHelper.getPropertyName(entry.getKey()), entry.getValue().toString());\n        }\n      }\n\n      final ConfigurationRequest configRequest = new ConfigurationRequest(cluster, type, tag, configMap);\n\n      createResources(new Command<Void>() {\n        @Override\n        public Void invoke() throws AmbariException {\n          getManagementController().createConfiguration(configRequest);\n          return null;\n        }\n      });\n\n    }\n    return getRequestStatus(null);\n  }","id":105004,"modified_method":"@Override\n  public RequestStatus createResources(Request request)\n      throws SystemException,\n             UnsupportedPropertyException,\n             ResourceAlreadyExistsException,\n             NoSuchParentResourceException {\n\n    for (Map<String, Object> map : request.getProperties()) {\n\n      String cluster = (String) map.get(CONFIGURATION_CLUSTER_NAME_PROPERTY_ID);\n      String type = (String) map.get(CONFIGURATION_CONFIG_TYPE_PROPERTY_ID);\n      String tag  = (String) map.get(CONFIGURATION_CONFIG_TAG_PROPERTY_ID);\n\n      Map<String, String> configMap = new HashMap<String, String>();\n\n      for (Entry<String, Object> entry : map.entrySet()) {\n        String propertyCategory = PropertyHelper.getPropertyCategory(entry.getKey());\n        if (propertyCategory != null && propertyCategory.equals(\"properties\") && null != entry.getValue()) {\n          configMap.put(PropertyHelper.getPropertyName(entry.getKey()), entry.getValue().toString());\n        }\n      }\n\n      final ConfigurationRequest configRequest = new ConfigurationRequest(cluster, type, tag, configMap);\n\n      createResources(new Command<Void>() {\n        @Override\n        public Void invoke() throws AmbariException {\n          getManagementController().createConfiguration(configRequest);\n          return null;\n        }\n      });\n\n    }\n    return getRequestStatus(null);\n  }","commit_id":"7170887107944909d737528b42ac8696a29e7c1d","url":"https://github.com/apache/ambari"},{"original_method":"ConfigurationResourceProvider(Set<String> propertyIds,\n                                Map<Resource.Type, String> keyPropertyIds,\n                                AmbariManagementController managementController) {\n\n    super(propertyIds, keyPropertyIds, managementController);\n\n  }","id":105005,"modified_method":"/**\n   * Constructor\n   *\n   * @param propertyIds           the property ids supported by this provider\n   * @param keyPropertyIds        the key properties for this provider\n   * @param managementController  the associated management controller\n   */\n  ConfigurationResourceProvider(Set<String> propertyIds,\n                                Map<Resource.Type, String> keyPropertyIds,\n                                AmbariManagementController managementController) {\n\n    super(propertyIds, keyPropertyIds, managementController);\n  }","commit_id":"7170887107944909d737528b42ac8696a29e7c1d","url":"https://github.com/apache/ambari"},{"original_method":"private ConfigurationRequest getRequest(Map<String, Object> properties) {\n    String type = (String) properties.get(CONFIGURATION_CONFIG_TYPE_PROPERTY_ID);\n\n    String tag = (String) properties.get(CONFIGURATION_CONFIG_TAG_PROPERTY_ID);\n\n    return new ConfigurationRequest(\n        (String) properties.get(CONFIGURATION_CLUSTER_NAME_PROPERTY_ID),\n        type, tag, new HashMap<String, String>());\n  }","id":105006,"modified_method":"/**\n   * Get a configuration request object from the given map of properties.\n   *\n   * @param properties  the map of properties\n   *\n   * @return a configuration request\n   */\n  private ConfigurationRequest getRequest(Map<String, Object> properties) {\n    String type = (String) properties.get(CONFIGURATION_CONFIG_TYPE_PROPERTY_ID);\n    String tag  = (String) properties.get(CONFIGURATION_CONFIG_TAG_PROPERTY_ID);\n\n    return new ConfigurationRequest(\n        (String) properties.get(CONFIGURATION_CLUSTER_NAME_PROPERTY_ID),\n        type, tag, new HashMap<String, String>());\n  }","commit_id":"7170887107944909d737528b42ac8696a29e7c1d","url":"https://github.com/apache/ambari"},{"original_method":"public static Map<String, String> getConfigPropertyValues(Map<String, Object> propertyMap) {\n    Map<String, String> configMap = new HashMap<String, String>();\n\n    for (Map.Entry<String,Object> entry : propertyMap.entrySet()) {\n      String propertyId = entry.getKey();\n      if (PropertyHelper.getPropertyCategory(propertyId).equals(\"config\")) {\n        configMap.put(PropertyHelper.getPropertyName(propertyId), (String) entry.getValue());\n      }\n    }\n    return configMap;\n  }","id":105007,"modified_method":"/**\n   * Get the config related property ids from the given map of property ids.\n   *\n   * @param propertyIdMap  the map of property ids\n   *\n   * @return  a subset of the given map containing olny the property ids that have a\n   *          category of \"config\"\n   */\n  public static Map<String, String> getConfigPropertyValues(Map<String, Object> propertyIdMap) {\n    Map<String, String> configMap = new HashMap<String, String>();\n\n    for (Map.Entry<String,Object> entry : propertyIdMap.entrySet()) {\n      String propertyId = entry.getKey();\n      if (PropertyHelper.getPropertyCategory(propertyId).equals(\"config\")) {\n        configMap.put(PropertyHelper.getPropertyName(propertyId), (String) entry.getValue());\n      }\n    }\n    return configMap;\n  }","commit_id":"7170887107944909d737528b42ac8696a29e7c1d","url":"https://github.com/apache/ambari"},{"original_method":"@Override\n  public Set<String> checkPropertyIds(Set<String> propertyIds) {\n    propertyIds = super.checkPropertyIds(propertyIds);\n\n    if (propertyIds.isEmpty()) {\n      return propertyIds;\n    }\n    Set<String> unsupportedProperties = new HashSet<String>();\n\n    for (String propertyId : propertyIds) {\n\n      // TODO : hack to allow for inconsistent property names\n      // for example, the tag property can come here as Config/tag, /tag or tag\n      if (!propertyId.equals(\"tag\") && !propertyId.equals(\"type\") &&\n          !propertyId.equals(\"/tag\") && !propertyId.equals(\"/type\")) {\n\n        String propertyCategory = PropertyHelper.getPropertyCategory(propertyId);\n\n        if (propertyCategory == null || !propertyCategory.equals(\"properties\")) {\n          unsupportedProperties.add(propertyId);\n        }\n      }\n    }\n    return unsupportedProperties;\n  }","id":105008,"modified_method":"@Override\n  public Set<String> checkPropertyIds(Set<String> propertyIds) {\n    propertyIds = super.checkPropertyIds(propertyIds);\n\n    if (propertyIds.isEmpty()) {\n      return propertyIds;\n    }\n    Set<String> unsupportedProperties = new HashSet<String>();\n\n    for (String propertyId : propertyIds) {\n\n      // TODO : hack to allow for inconsistent property names\n      // for example, the tag property can come here as Config/tag, /tag or tag\n      if (!propertyId.equals(\"tag\") && !propertyId.equals(\"type\") &&\n          !propertyId.equals(\"/tag\") && !propertyId.equals(\"/type\") &&\n          !propertyId.equals(\"properties\")) {\n\n        String propertyCategory = PropertyHelper.getPropertyCategory(propertyId);\n\n        if (propertyCategory == null || !propertyCategory.equals(\"properties\")) {\n          unsupportedProperties.add(propertyId);\n        }\n      }\n    }\n    return unsupportedProperties;\n  }","commit_id":"7170887107944909d737528b42ac8696a29e7c1d","url":"https://github.com/apache/ambari"},{"original_method":"@Override\n  public Set<String> checkPropertyIds(Set<String> propertyIds) {\n    propertyIds = super.checkPropertyIds(propertyIds);\n\n    if (propertyIds.isEmpty()) {\n      return propertyIds;\n    }\n    Set<String> unsupportedProperties = new HashSet<String>();\n\n    for (String propertyId : propertyIds) {\n      String propertyCategory = PropertyHelper.getPropertyCategory(propertyId);\n      if (propertyCategory == null || !propertyCategory.equals(\"config\")) {\n        unsupportedProperties.add(propertyId);\n      }\n    }\n    return unsupportedProperties;\n  }","id":105009,"modified_method":"@Override\n  public Set<String> checkPropertyIds(Set<String> propertyIds) {\n    propertyIds = super.checkPropertyIds(propertyIds);\n\n    if (propertyIds.isEmpty()) {\n      return propertyIds;\n    }\n    Set<String> unsupportedProperties = new HashSet<String>();\n\n    for (String propertyId : propertyIds) {\n      if (!propertyId.equals(\"config\")) {\n        String propertyCategory = PropertyHelper.getPropertyCategory(propertyId);\n        if (propertyCategory == null || !propertyCategory.equals(\"config\")) {\n          unsupportedProperties.add(propertyId);\n        }\n      }\n    }\n    return unsupportedProperties;\n  }","commit_id":"7170887107944909d737528b42ac8696a29e7c1d","url":"https://github.com/apache/ambari"},{"original_method":"@Override\n  public Set<String> checkPropertyIds(Set<String> propertyIds) {\n    propertyIds = super.checkPropertyIds(propertyIds);\n\n    if (propertyIds.isEmpty()) {\n      return propertyIds;\n    }\n    Set<String> unsupportedProperties = new HashSet<String>();\n\n    for (String propertyId : propertyIds) {\n      String propertyCategory = PropertyHelper.getPropertyCategory(propertyId);\n      if (propertyCategory == null || !propertyCategory.equals(\"config\")) {\n        unsupportedProperties.add(propertyId);\n      }\n    }\n    return unsupportedProperties;\n  }","id":105010,"modified_method":"@Override\n  public Set<String> checkPropertyIds(Set<String> propertyIds) {\n    propertyIds = super.checkPropertyIds(propertyIds);\n\n    if (propertyIds.isEmpty()) {\n      return propertyIds;\n    }\n    Set<String> unsupportedProperties = new HashSet<String>();\n\n    for (String propertyId : propertyIds) {\n      if (!propertyId.equals(\"config\")) {\n        String propertyCategory = PropertyHelper.getPropertyCategory(propertyId);\n        if (propertyCategory == null || !propertyCategory.equals(\"config\")) {\n          unsupportedProperties.add(propertyId);\n        }\n      }\n    }\n    return unsupportedProperties;\n  }","commit_id":"7170887107944909d737528b42ac8696a29e7c1d","url":"https://github.com/apache/ambari"},{"original_method":"private void displayRelationships( NodeOrRelationship thing,\n        Output out, boolean verbose, Direction direction, String prefixString,\n        String postfixString, String filter, boolean caseSensitiveFilters,\n        boolean exactFilterMatch ) throws ShellException, RemoteException\n    {\n        Pattern typeFilter = newPattern( filter, caseSensitiveFilters );\n        for ( Relationship rel : thing.getRelationships( direction ) )\n        {\n            String type = rel.getType().name();\n            if ( !matches( typeFilter, type, caseSensitiveFilters,\n                exactFilterMatch ) )\n            {\n                continue;\n            }\n            StringBuffer buf = new StringBuffer(\n                getDisplayNameForCurrentNode() );\n            buf.append( \" \" + prefixString ).append( rel.getType().name() );\n            if ( verbose )\n            {\n                buf.append( \", \" ).append( rel.getId() );\n            }\n            buf.append( postfixString + \" \" );\n            buf.append( getDisplayNameForNode( rel.getEndNode() ) );\n            out.println( buf );\n        }\n    }","id":105011,"modified_method":"private void displayRelationships( NodeOrRelationship thing,\n        Output out, boolean verbose, Direction direction, String prefixString,\n        String postfixString, String filter, boolean caseSensitiveFilters,\n        boolean exactFilterMatch ) throws ShellException, RemoteException\n    {\n        Pattern typeFilter = newPattern( filter, caseSensitiveFilters );\n        for ( Relationship rel : thing.getRelationships( direction ) )\n        {\n            String type = rel.getType().name();\n            if ( !matches( typeFilter, type, caseSensitiveFilters,\n                exactFilterMatch ) )\n            {\n                continue;\n            }\n            StringBuffer buf = new StringBuffer(\n                getDisplayNameForCurrentNode() );\n            buf.append( \" \" + prefixString ).append( rel.getType().name() );\n            if ( verbose )\n            {\n                buf.append( \", \" ).append( rel.getId() );\n            }\n            buf.append( postfixString + \" \" );\n            buf.append( getDisplayNameForNode( direction == Direction.OUTGOING ?\n                rel.getEndNode() : rel.getStartNode() ) );\n            out.println( buf );\n        }\n    }","commit_id":"f379e84cb0cdfba2993ec7899c7d36a6b1e07253","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void displayRelationships( NodeOrRelationship thing,\n        Output out, boolean verbose, Direction direction, String prefixString,\n        String postfixString, String filter, boolean caseSensitiveFilters,\n        boolean exactFilterMatch ) throws ShellException, RemoteException\n    {\n        Pattern typeFilter = newPattern( filter, caseSensitiveFilters );\n        for ( Relationship rel : thing.getRelationships( direction ) )\n        {\n            String type = rel.getType().name();\n            if ( !matches( typeFilter, type, caseSensitiveFilters,\n                exactFilterMatch ) )\n            {\n                continue;\n            }\n            StringBuffer buf = new StringBuffer(\n                getDisplayNameForCurrentNode() );\n            buf.append( \" \" + prefixString ).append( rel.getType().name() );\n            if ( verbose )\n            {\n                buf.append( \", \" ).append( rel.getId() );\n            }\n            buf.append( postfixString + \" \" );\n            buf.append( getDisplayNameForNode( rel.getEndNode() ) );\n            out.println( buf );\n        }\n    }","id":105012,"modified_method":"private void displayRelationships( NodeOrRelationship thing,\n        Output out, boolean verbose, Direction direction, String prefixString,\n        String postfixString, String filter, boolean caseSensitiveFilters,\n        boolean exactFilterMatch ) throws ShellException, RemoteException\n    {\n        Pattern typeFilter = newPattern( filter, caseSensitiveFilters );\n        for ( Relationship rel : thing.getRelationships( direction ) )\n        {\n            String type = rel.getType().name();\n            if ( !matches( typeFilter, type, caseSensitiveFilters,\n                exactFilterMatch ) )\n            {\n                continue;\n            }\n            StringBuffer buf = new StringBuffer(\n                getDisplayNameForCurrentNode() );\n            buf.append( \" \" + prefixString ).append( rel.getType().name() );\n            if ( verbose )\n            {\n                buf.append( \", \" ).append( rel.getId() );\n            }\n            buf.append( postfixString + \" \" );\n            buf.append( getDisplayNameForNode( direction == Direction.OUTGOING ?\n                rel.getEndNode() : rel.getStartNode() ) );\n            out.println( buf );\n        }\n    }","commit_id":"0b925136eaa3b4c2729a24e5de6390bef084dbac","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void displayRelationships( NodeOrRelationship thing,\n        Output out, boolean verbose, Direction direction, String prefixString,\n        String postfixString, String filter, boolean caseSensitiveFilters,\n        boolean exactFilterMatch ) throws ShellException, RemoteException\n    {\n        Pattern typeFilter = newPattern( filter, caseSensitiveFilters );\n        for ( Relationship rel : thing.getRelationships( direction ) )\n        {\n            String type = rel.getType().name();\n            if ( !matches( typeFilter, type, caseSensitiveFilters,\n                exactFilterMatch ) )\n            {\n                continue;\n            }\n            StringBuffer buf = new StringBuffer(\n                getDisplayNameForCurrentNode() );\n            buf.append( \" \" + prefixString ).append( rel.getType().name() );\n            if ( verbose )\n            {\n                buf.append( \", \" ).append( rel.getId() );\n            }\n            buf.append( postfixString + \" \" );\n            buf.append( getDisplayNameForNode( rel.getEndNode() ) );\n            out.println( buf );\n        }\n    }","id":105013,"modified_method":"private void displayRelationships( NodeOrRelationship thing,\n        Output out, boolean verbose, Direction direction, String prefixString,\n        String postfixString, String filter, boolean caseSensitiveFilters,\n        boolean exactFilterMatch ) throws ShellException, RemoteException\n    {\n        Pattern typeFilter = newPattern( filter, caseSensitiveFilters );\n        for ( Relationship rel : thing.getRelationships( direction ) )\n        {\n            String type = rel.getType().name();\n            if ( !matches( typeFilter, type, caseSensitiveFilters,\n                exactFilterMatch ) )\n            {\n                continue;\n            }\n            StringBuffer buf = new StringBuffer(\n                getDisplayNameForCurrentNode() );\n            buf.append( \" \" + prefixString ).append( rel.getType().name() );\n            if ( verbose )\n            {\n                buf.append( \", \" ).append( rel.getId() );\n            }\n            buf.append( postfixString + \" \" );\n            buf.append( getDisplayNameForNode( direction == Direction.OUTGOING ?\n                rel.getEndNode() : rel.getStartNode() ) );\n            out.println( buf );\n        }\n    }","commit_id":"c64d5670cd0b650cb63898bab65f20b274763c37","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void test_changeMethodParametersForStatement() throws Exception {\n      this.addNodeById(\"1230052406554\");\n      this.addNodeById(\"1230052406581\");\n      {\n        SNode c_ref = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.LocalVariableReference\", null);\n        SLinkOperations.setTarget(c_ref, \"variableDeclaration\", SNodeOperations.cast(this.getNodeById(\"1230052406612\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\"), false);\n        SNodeOperations.replaceWithAnother(SNodeOperations.cast(this.getNodeById(\"1230052406630\"), \"jetbrains.mps.baseLanguage.structure.ClassifierClassExpression\"), c_ref);\n        ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406572\"), \"jetbrains.mps.baseLanguage.structure.ReturnStatement\")));\n        ListSequence.fromList(params.getParameters()).getElement(0).setSelected(false);\n        MethodParameter p2 = ListSequence.fromList(params.getParameters()).getElement(1);\n        MethodParameter p1 = ListSequence.fromList(params.getParameters()).getElement(2);\n        ListSequence.fromList(params.getParameters()).setElement(1, p1);\n        ListSequence.fromList(params.getParameters()).setElement(2, p2);\n        p1.setName(\"p1\");\n        p2.setName(\"p2\");\n        params.setName(\"foo\");\n        ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n        ref.doRefactor();\n        Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406555\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406582\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n      }\n    }","id":105014,"modified_method":"public void test_changeMethodParametersForStatement() throws Exception {\n      this.addNodeById(\"1230052406554\");\n      this.addNodeById(\"1230052406581\");\n      {\n        SNode c_ref = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.LocalVariableReference\", null);\n        SLinkOperations.setTarget(c_ref, \"variableDeclaration\", SNodeOperations.cast(this.getNodeById(\"1230052406612\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\"), false);\n        SNodeOperations.replaceWithAnother(SNodeOperations.cast(this.getNodeById(\"1230052406630\"), \"jetbrains.mps.baseLanguage.structure.ClassifierClassExpression\"), c_ref);\n        ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406572\"), \"jetbrains.mps.baseLanguage.structure.ReturnStatement\")));\n        ListSequence.fromList(params.getParameters()).getElement(0).setSelected(false);\n        MethodParameter p2 = ListSequence.fromList(params.getParameters()).getElement(1);\n        MethodParameter p1 = ListSequence.fromList(params.getParameters()).getElement(2);\n        ListSequence.fromList(params.getParameters()).setElement(1, p1);\n        ListSequence.fromList(params.getParameters()).setElement(2, p2);\n        p1.setName(\"p1\");\n        p2.setName(\"p2\");\n        params.setName(\"foo\");\n        ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n        ref.doRefactor();\n        Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406555\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406582\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n      }\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_conceptMethod() throws Exception {\n      this.addNodeById(\"1230052406798\");\n      this.addNodeById(\"1230052406829\");\n      SLinkOperations.setTarget(SNodeOperations.cast(this.getNodeById(\"1230052406839\"), \"jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall\"), \"baseMethodDeclaration\", SNodeOperations.cast(this.getNodeById(\"1230052406844\"), \"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration\"), false);\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406805\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      this.fff(ref);\n      params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406818\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\")));\n      params.setName(\"bar\");\n      ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406799\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406830\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\"))));\n    }","id":105015,"modified_method":"public void test_conceptMethod() throws Exception {\n      this.addNodeById(\"1230052406798\");\n      this.addNodeById(\"1230052406829\");\n      SLinkOperations.setTarget(SNodeOperations.cast(this.getNodeById(\"1230052406839\"), \"jetbrains.mps.lang.smodel.structure.Node_ConceptMethodCall\"), \"baseMethodDeclaration\", SNodeOperations.cast(this.getNodeById(\"1230052406844\"), \"jetbrains.mps.lang.behavior.structure.ConceptMethodDeclaration\"), false);\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406805\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      this.fff(ref);\n      params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406818\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\")));\n      params.setName(\"bar\");\n      ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406799\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406830\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_ExtractBreak() throws Exception {\n      this.addNodeById(\"1230052480333\");\n      this.addNodeById(\"1230052480361\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052480342\"), \"jetbrains.mps.baseLanguage.structure.IfStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      Assert.assertTrue(ref instanceof ExtractMethodWithExitPoints);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052480334\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052480362\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105016,"modified_method":"public void test_ExtractBreak() throws Exception {\n      this.addNodeById(\"1230052480333\");\n      this.addNodeById(\"1230052480361\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052480342\"), \"jetbrains.mps.baseLanguage.structure.IfStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      Assert.assertTrue(ref instanceof ExtractMethodWithExitPoints);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052480334\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052480362\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_ExtractContinue() throws Exception {\n      this.addNodeById(\"1230052480439\");\n      this.addNodeById(\"1230052480459\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052480448\"), \"jetbrains.mps.baseLanguage.structure.IfStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      Assert.assertTrue(ref instanceof ExtractMethodWithExitPoints);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052480440\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052480460\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105017,"modified_method":"public void test_ExtractContinue() throws Exception {\n      this.addNodeById(\"1230052480439\");\n      this.addNodeById(\"1230052480459\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052480448\"), \"jetbrains.mps.baseLanguage.structure.IfStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      Assert.assertTrue(ref instanceof ExtractMethodWithExitPoints);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052480440\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052480460\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_extractFromExecute() throws Exception {\n      this.addNodeById(\"1230052509259\");\n      this.addNodeById(\"1230052509277\");\n      this.addNodeById(\"1230052509301\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052509271\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"boo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052509260\"), \"jetbrains.mps.lang.plugin.structure.ActionDeclaration\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052509302\"), \"jetbrains.mps.lang.plugin.structure.ActionDeclaration\"))));\n    }","id":105018,"modified_method":"public void test_extractFromExecute() throws Exception {\n      this.addNodeById(\"1230052509259\");\n      this.addNodeById(\"1230052509277\");\n      this.addNodeById(\"1230052509301\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052509271\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"boo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052509260\"), \"jetbrains.mps.lang.plugin.structure.ActionDeclaration\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052509302\"), \"jetbrains.mps.lang.plugin.structure.ActionDeclaration\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_extractFromMethod() throws Exception {\n      this.addNodeById(\"1230052509259\");\n      this.addNodeById(\"1230052509277\");\n      this.addNodeById(\"1230052509301\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052509264\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\")));\n      params.setName(\"bar\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052509260\"), \"jetbrains.mps.lang.plugin.structure.ActionDeclaration\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052509278\"), \"jetbrains.mps.lang.plugin.structure.ActionDeclaration\"))));\n    }","id":105019,"modified_method":"public void test_extractFromMethod() throws Exception {\n      this.addNodeById(\"1230052509259\");\n      this.addNodeById(\"1230052509277\");\n      this.addNodeById(\"1230052509301\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052509264\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\")));\n      params.setName(\"bar\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052509260\"), \"jetbrains.mps.lang.plugin.structure.ActionDeclaration\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052509278\"), \"jetbrains.mps.lang.plugin.structure.ActionDeclaration\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_extractDifferentReturns() throws Exception {\n      this.addNodeById(\"1230052641812\");\n      this.addNodeById(\"1230052641841\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052641823\"), \"jetbrains.mps.baseLanguage.structure.IfStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      Assert.assertTrue(ref instanceof ExtractMethodWithReturn);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052641813\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052641842\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105020,"modified_method":"public void test_extractDifferentReturns() throws Exception {\n      this.addNodeById(\"1230052641812\");\n      this.addNodeById(\"1230052641841\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052641823\"), \"jetbrains.mps.baseLanguage.structure.IfStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      Assert.assertTrue(ref instanceof ExtractMethodWithReturn);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052641813\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052641842\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_ExtractFromAnonymous() throws Exception {\n      this.addNodeById(\"1230052406963\");\n      this.addNodeById(\"1230052406990\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406982\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406964\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406991\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105021,"modified_method":"public void test_ExtractFromAnonymous() throws Exception {\n      this.addNodeById(\"1230052406963\");\n      this.addNodeById(\"1230052406990\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406982\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406964\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052406991\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_extractFromExpressionWithoutReturn() throws Exception {\n      this.addNodeById(\"1230052552061\");\n      this.addNodeById(\"1230052552076\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052552068\"), \"jetbrains.mps.baseLanguage.structure.DotExpression\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052552062\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052552077\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105022,"modified_method":"public void test_extractFromExpressionWithoutReturn() throws Exception {\n      this.addNodeById(\"1230052552061\");\n      this.addNodeById(\"1230052552076\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052552068\"), \"jetbrains.mps.baseLanguage.structure.DotExpression\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052552062\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052552077\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_extractFromExpression() throws Exception {\n      this.addNodeById(\"1230052551971\");\n      this.addNodeById(\"1230052551996\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052551990\"), \"jetbrains.mps.baseLanguage.structure.MulExpression\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052551972\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052551997\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105023,"modified_method":"public void test_extractFromExpression() throws Exception {\n      this.addNodeById(\"1230052551971\");\n      this.addNodeById(\"1230052551996\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052551990\"), \"jetbrains.mps.baseLanguage.structure.MulExpression\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052551972\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052551997\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_extractExpression() throws Exception {\n      this.addNodeById(\"1230052684510\");\n      this.addNodeById(\"1230052684520\");\n      this.addNodeById(\"1230052684528\");\n      this.addNodeById(\"1230052684538\");\n      SLinkOperations.setTarget(SNodeOperations.cast(this.getNodeById(\"1230052684533\"), \"jetbrains.mps.baseLanguage.structure.StaticMethodCall\"), \"classConcept\", SNodeOperations.cast(this.getNodeById(\"1230052684539\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"), false);\n      SLinkOperations.setTarget(SNodeOperations.cast(this.getNodeById(\"1230052684533\"), \"jetbrains.mps.baseLanguage.structure.StaticMethodCall\"), \"baseMethodDeclaration\", SNodeOperations.cast(this.getNodeById(\"1230052684540\"), \"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\"), false);\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684515\"), \"jetbrains.mps.baseLanguage.structure.StringLiteral\")));\n      params.setName(\"foo\");\n      params.setVisibilityLevel(VisibilityLevel.PUBLIC);\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.setStaticContainer(SNodeOperations.cast(this.getNodeById(\"1230052684521\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"));\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684511\"), \"jetbrains.mps.lang.intentions.structure.IntentionDeclaration\"), SNodeOperations.cast(this.getNodeById(\"1230052684521\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684529\"), \"jetbrains.mps.lang.intentions.structure.IntentionDeclaration\"), SNodeOperations.cast(this.getNodeById(\"1230052684539\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105024,"modified_method":"public void test_extractExpression() throws Exception {\n      this.addNodeById(\"1230052684510\");\n      this.addNodeById(\"1230052684520\");\n      this.addNodeById(\"1230052684528\");\n      this.addNodeById(\"1230052684538\");\n      SLinkOperations.setTarget(SNodeOperations.cast(this.getNodeById(\"1230052684533\"), \"jetbrains.mps.baseLanguage.structure.StaticMethodCall\"), \"classConcept\", SNodeOperations.cast(this.getNodeById(\"1230052684539\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"), false);\n      SLinkOperations.setTarget(SNodeOperations.cast(this.getNodeById(\"1230052684533\"), \"jetbrains.mps.baseLanguage.structure.StaticMethodCall\"), \"baseMethodDeclaration\", SNodeOperations.cast(this.getNodeById(\"1230052684540\"), \"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\"), false);\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684515\"), \"jetbrains.mps.baseLanguage.structure.StringLiteral\")));\n      params.setName(\"foo\");\n      params.setVisibilityLevel(VisibilityLevel.PUBLIC);\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.setStaticContainer(SNodeOperations.cast(this.getNodeById(\"1230052684521\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"));\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684511\"), \"jetbrains.mps.lang.intentions.structure.IntentionDeclaration\"), SNodeOperations.cast(this.getNodeById(\"1230052684521\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684529\"), \"jetbrains.mps.lang.intentions.structure.IntentionDeclaration\"), SNodeOperations.cast(this.getNodeById(\"1230052684539\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_extractFromStatementWithReturnValue() throws Exception {\n      this.addNodeById(\"1230052641914\");\n      this.addNodeById(\"1230052641949\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052641922\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\"), SNodeOperations.cast(this.getNodeById(\"1230052641927\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\"), SNodeOperations.cast(this.getNodeById(\"1230052641934\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052641915\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052641966\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105025,"modified_method":"public void test_extractFromStatementWithReturnValue() throws Exception {\n      this.addNodeById(\"1230052641914\");\n      this.addNodeById(\"1230052641949\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052641922\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\"), SNodeOperations.cast(this.getNodeById(\"1230052641927\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\"), SNodeOperations.cast(this.getNodeById(\"1230052641934\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052641915\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052641966\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_extractFromStatementsEndsWithReturn() throws Exception {\n      this.addNodeById(\"1230052642040\");\n      this.addNodeById(\"1230052642053\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642046\"), \"jetbrains.mps.baseLanguage.structure.ReturnStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642041\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642054\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105026,"modified_method":"public void test_extractFromStatementsEndsWithReturn() throws Exception {\n      this.addNodeById(\"1230052642040\");\n      this.addNodeById(\"1230052642053\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642046\"), \"jetbrains.mps.baseLanguage.structure.ReturnStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642041\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642054\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_extractFromStatements() throws Exception {\n      this.addNodeById(\"1230052407025\");\n      this.addNodeById(\"1230052407060\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052407036\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\"), SNodeOperations.cast(this.getNodeById(\"1230052407043\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\"), SNodeOperations.cast(this.getNodeById(\"1230052407050\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052407026\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052407061\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105027,"modified_method":"public void test_extractFromStatements() throws Exception {\n      this.addNodeById(\"1230052407025\");\n      this.addNodeById(\"1230052407060\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052407036\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\"), SNodeOperations.cast(this.getNodeById(\"1230052407043\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\"), SNodeOperations.cast(this.getNodeById(\"1230052407050\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052407026\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052407061\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_ExtractMethodFromConstructor() throws Exception {\n      this.addNodeById(\"1230052407135\");\n      this.addNodeById(\"1230052407146\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052407141\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052407136\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052407147\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105028,"modified_method":"public void test_ExtractMethodFromConstructor() throws Exception {\n      this.addNodeById(\"1230052407135\");\n      this.addNodeById(\"1230052407146\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052407141\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052407136\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052407147\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_ExtractMethodWithOutputVaryableFromStatementTest() throws Exception {\n      this.addNodeById(\"8155843501976328682\");\n      this.addNodeById(\"8155843501976328705\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8155843501976328688\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8155843501976328683\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8155843501976328733\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105029,"modified_method":"public void test_ExtractMethodWithOutputVaryableFromStatementTest() throws Exception {\n      this.addNodeById(\"8155843501976328682\");\n      this.addNodeById(\"8155843501976328705\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8155843501976328688\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8155843501976328683\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8155843501976328733\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_checkReturnWithoutReturn() throws Exception {\n      this.addNodeById(\"1230052642101\");\n      this.addNodeById(\"1230052642118\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642110\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642102\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642119\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105030,"modified_method":"public void test_checkReturnWithoutReturn() throws Exception {\n      this.addNodeById(\"1230052642101\");\n      this.addNodeById(\"1230052642118\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642110\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642102\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642119\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_oneReturnTransformation() throws Exception {\n      this.addNodeById(\"1230052642256\");\n      this.addNodeById(\"1230052642278\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642262\"), \"jetbrains.mps.baseLanguage.structure.IfStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642257\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642279\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105031,"modified_method":"public void test_oneReturnTransformation() throws Exception {\n      this.addNodeById(\"1230052642256\");\n      this.addNodeById(\"1230052642278\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642262\"), \"jetbrains.mps.baseLanguage.structure.IfStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642257\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052642279\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_ReplaceOutputVaryableTest() throws Exception {\n      this.addNodeById(\"8155843501977551480\");\n      this.addNodeById(\"8155843501977560834\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8155843501977560799\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      SNode res = ref.doRefactor();\n      for (MethodMatch match : ListSequence.fromList(ref.getMatches())) {\n        ExtractMethodRefactoring matchRef = ExtractMethodFactory.createRefactoring(new ExtractMethodRefactoringParameters(match.getNodes()));\n        matchRef.replaceMatch(match, res);\n      }\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8155843501977560794\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8155843501977560874\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105032,"modified_method":"public void test_ReplaceOutputVaryableTest() throws Exception {\n      this.addNodeById(\"8155843501977551480\");\n      this.addNodeById(\"8155843501977560834\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8155843501977560799\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      SNode res = ref.doRefactor();\n      for (MethodMatch match : ListSequence.fromList(ref.getMatches())) {\n        ExtractMethodRefactoring matchRef = ExtractMethodFactory.createRefactoring(ExtractMethodFactory.createParameters(match.getNodes()));\n        matchRef.replaceMatch(match, res);\n      }\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8155843501977560794\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8155843501977560874\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_SimpleFindForExtractFromExpressionTest() throws Exception {\n      this.addNodeById(\"8556882668095192253\");\n      this.addNodeById(\"8556882668095202132\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8556882668095192263\"), \"jetbrains.mps.baseLanguage.structure.DotExpression\")));\n      params.setName(\"print\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      SNode res = ref.doRefactor();\n      for (MethodMatch match : ListSequence.fromList(ref.getMatches())) {\n        ExtractMethodRefactoring matchRef = ExtractMethodFactory.createRefactoring(new ExtractMethodRefactoringParameters(match.getNodes()));\n        matchRef.replaceMatch(match, res);\n      }\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8556882668095192257\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8556882668095202133\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105033,"modified_method":"public void test_SimpleFindForExtractFromExpressionTest() throws Exception {\n      this.addNodeById(\"8556882668095192253\");\n      this.addNodeById(\"8556882668095202132\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8556882668095192263\"), \"jetbrains.mps.baseLanguage.structure.DotExpression\")));\n      params.setName(\"print\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      SNode res = ref.doRefactor();\n      for (MethodMatch match : ListSequence.fromList(ref.getMatches())) {\n        ExtractMethodRefactoring matchRef = ExtractMethodFactory.createRefactoring(ExtractMethodFactory.createParameters(match.getNodes()));\n        matchRef.replaceMatch(match, res);\n      }\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8556882668095192257\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8556882668095202133\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_SimpleFindForExtractFromManyStatementsTest() throws Exception {\n      this.addNodeById(\"7793057097608406464\");\n      this.addNodeById(\"7793057097608416301\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"7793057097608406470\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\"), SNodeOperations.cast(this.getNodeById(\"7793057097608406474\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"printTwo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      SNode res = ref.doRefactor();\n      for (MethodMatch match : ListSequence.fromList(ref.getMatches())) {\n        ExtractMethodRefactoring matchRef = ExtractMethodFactory.createRefactoring(new ExtractMethodRefactoringParameters(match.getNodes()));\n        matchRef.replaceMatch(match, res);\n      }\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"7793057097608406465\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"7793057097608416325\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105034,"modified_method":"public void test_SimpleFindForExtractFromManyStatementsTest() throws Exception {\n      this.addNodeById(\"7793057097608406464\");\n      this.addNodeById(\"7793057097608416301\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"7793057097608406470\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\"), SNodeOperations.cast(this.getNodeById(\"7793057097608406474\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"printTwo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      SNode res = ref.doRefactor();\n      for (MethodMatch match : ListSequence.fromList(ref.getMatches())) {\n        ExtractMethodRefactoring matchRef = ExtractMethodFactory.createRefactoring(ExtractMethodFactory.createParameters(match.getNodes()));\n        matchRef.replaceMatch(match, res);\n      }\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"7793057097608406465\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"7793057097608416325\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_SimpleFindForExtractFromStatementTest() throws Exception {\n      this.addNodeById(\"8556882668095222065\");\n      this.addNodeById(\"8556882668095222149\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8556882668095222071\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"print\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      SNode res = ref.doRefactor();\n      for (MethodMatch match : ListSequence.fromList(ref.getMatches())) {\n        ExtractMethodRefactoring matchRef = ExtractMethodFactory.createRefactoring(new ExtractMethodRefactoringParameters(match.getNodes()));\n        matchRef.replaceMatch(match, res);\n      }\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8556882668095222066\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8556882668095222150\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105035,"modified_method":"public void test_SimpleFindForExtractFromStatementTest() throws Exception {\n      this.addNodeById(\"8556882668095222065\");\n      this.addNodeById(\"8556882668095222149\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8556882668095222071\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"print\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      SNode res = ref.doRefactor();\n      for (MethodMatch match : ListSequence.fromList(ref.getMatches())) {\n        ExtractMethodRefactoring matchRef = ExtractMethodFactory.createRefactoring(ExtractMethodFactory.createParameters(match.getNodes()));\n        matchRef.replaceMatch(match, res);\n      }\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8556882668095222066\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"8556882668095222150\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_SimpleFindForExtractWithReturnTest() throws Exception {\n      this.addNodeById(\"1998477585418805538\");\n      this.addNodeById(\"1998477585418805601\");\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1998477585418805553\"), \"jetbrains.mps.baseLanguage.structure.IfStatement\")));\n      params.setName(\"ret\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      SNode res = ref.doRefactor();\n      for (MethodMatch match : ListSequence.fromList(ref.getMatches())) {\n        ExtractMethodRefactoring matchRef = ExtractMethodFactory.createRefactoring(new ExtractMethodRefactoringParameters(match.getNodes()));\n        matchRef.replaceMatch(match, res);\n      }\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1998477585418805539\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1998477585418805637\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105036,"modified_method":"public void test_SimpleFindForExtractWithReturnTest() throws Exception {\n      this.addNodeById(\"1998477585418805538\");\n      this.addNodeById(\"1998477585418805601\");\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1998477585418805553\"), \"jetbrains.mps.baseLanguage.structure.IfStatement\")));\n      params.setName(\"ret\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      SNode res = ref.doRefactor();\n      for (MethodMatch match : ListSequence.fromList(ref.getMatches())) {\n        ExtractMethodRefactoring matchRef = ExtractMethodFactory.createRefactoring(ExtractMethodFactory.createParameters(match.getNodes()));\n        matchRef.replaceMatch(match, res);\n      }\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1998477585418805539\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1998477585418805637\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_staticContainerBehaviorTest() throws Exception {\n      this.addNodeById(\"1230052684554\");\n      this.addNodeById(\"1230052684570\");\n      this.addNodeById(\"1230052684583\");\n      this.addNodeById(\"1230052684588\");\n      SNode call = SConceptOperations.createNewNode(\"jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall\", null);\n      SLinkOperations.setTarget(call, \"baseMethodDeclaration\", SNodeOperations.cast(this.getNodeById(\"1230052684590\"), \"jetbrains.mps.lang.behavior.structure.StaticConceptMethodDeclaration\"), false);\n      SNode var = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.LocalVariableReference\", null);\n      SLinkOperations.setTarget(var, \"variableDeclaration\", SNodeOperations.cast(this.getNodeById(\"1230052684575\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\"), false);\n      ListSequence.fromList(SLinkOperations.getTargets(call, \"actualArgument\", true)).addElement(var);\n      SLinkOperations.setTarget(call, \"concept\", SLinkOperations.getTarget(SNodeOperations.cast(this.getNodeById(\"1230052684589\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\"), \"concept\", false), false);\n      SNodeOperations.replaceWithAnother(SNodeOperations.cast(this.getNodeById(\"1230052684580\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableReference\"), call);\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684562\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.setStaticContainer(SNodeOperations.cast(this.getNodeById(\"1230052684584\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\"));\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684555\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\"), SNodeOperations.cast(this.getNodeById(\"1230052684584\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684571\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\"), SNodeOperations.cast(this.getNodeById(\"1230052684589\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\"))));\n    }","id":105037,"modified_method":"public void test_staticContainerBehaviorTest() throws Exception {\n      this.addNodeById(\"1230052684554\");\n      this.addNodeById(\"1230052684570\");\n      this.addNodeById(\"1230052684583\");\n      this.addNodeById(\"1230052684588\");\n      SNode call = SConceptOperations.createNewNode(\"jetbrains.mps.lang.smodel.structure.StaticConceptMethodCall\", null);\n      SLinkOperations.setTarget(call, \"baseMethodDeclaration\", SNodeOperations.cast(this.getNodeById(\"1230052684590\"), \"jetbrains.mps.lang.behavior.structure.StaticConceptMethodDeclaration\"), false);\n      SNode var = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.LocalVariableReference\", null);\n      SLinkOperations.setTarget(var, \"variableDeclaration\", SNodeOperations.cast(this.getNodeById(\"1230052684575\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\"), false);\n      ListSequence.fromList(SLinkOperations.getTargets(call, \"actualArgument\", true)).addElement(var);\n      SLinkOperations.setTarget(call, \"concept\", SLinkOperations.getTarget(SNodeOperations.cast(this.getNodeById(\"1230052684589\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\"), \"concept\", false), false);\n      SNodeOperations.replaceWithAnother(SNodeOperations.cast(this.getNodeById(\"1230052684580\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableReference\"), call);\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684562\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.setStaticContainer(SNodeOperations.cast(this.getNodeById(\"1230052684584\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\"));\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684555\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\"), SNodeOperations.cast(this.getNodeById(\"1230052684584\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684571\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\"), SNodeOperations.cast(this.getNodeById(\"1230052684589\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_staticContainerClassTest() throws Exception {\n      this.addNodeById(\"1230052684687\");\n      this.addNodeById(\"1230052684697\");\n      this.addNodeById(\"1230052684705\");\n      this.addNodeById(\"1230052684709\");\n      SNode call = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null);\n      SLinkOperations.setTarget(call, \"baseMethodDeclaration\", SNodeOperations.cast(this.getNodeById(\"1230052684711\"), \"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\"), false);\n      SLinkOperations.setTarget(call, \"classConcept\", SNodeOperations.cast(this.getNodeById(\"1230052684710\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"), false);\n      SNodeOperations.replaceWithAnother(SNodeOperations.cast(this.getNodeById(\"1230052684702\"), \"jetbrains.mps.baseLanguage.structure.IntegerConstant\"), call);\n      ExtractMethodRefactoringParameters params = new ExtractMethodRefactoringParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684691\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.setStaticContainer(SNodeOperations.cast(this.getNodeById(\"1230052684706\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"));\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684688\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\"), SNodeOperations.cast(this.getNodeById(\"1230052684706\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684698\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\"), SNodeOperations.cast(this.getNodeById(\"1230052684710\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","id":105038,"modified_method":"public void test_staticContainerClassTest() throws Exception {\n      this.addNodeById(\"1230052684687\");\n      this.addNodeById(\"1230052684697\");\n      this.addNodeById(\"1230052684705\");\n      this.addNodeById(\"1230052684709\");\n      SNode call = SConceptOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null);\n      SLinkOperations.setTarget(call, \"baseMethodDeclaration\", SNodeOperations.cast(this.getNodeById(\"1230052684711\"), \"jetbrains.mps.baseLanguage.structure.StaticMethodDeclaration\"), false);\n      SLinkOperations.setTarget(call, \"classConcept\", SNodeOperations.cast(this.getNodeById(\"1230052684710\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"), false);\n      SNodeOperations.replaceWithAnother(SNodeOperations.cast(this.getNodeById(\"1230052684702\"), \"jetbrains.mps.baseLanguage.structure.IntegerConstant\"), call);\n      ExtractMethodRefactoringParameters params = ExtractMethodFactory.createParameters(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684691\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclarationStatement\")));\n      params.setName(\"foo\");\n      ExtractMethodRefactoring ref = ExtractMethodFactory.createRefactoring(params);\n      ref.setStaticContainer(SNodeOperations.cast(this.getNodeById(\"1230052684706\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"));\n      ref.doRefactor();\n      Assert.assertEquals(null, NodesMatcher.matchNodes(ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684688\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\"), SNodeOperations.cast(this.getNodeById(\"1230052684706\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\")), ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"1230052684698\"), \"jetbrains.mps.lang.behavior.structure.ConceptBehavior\"), SNodeOperations.cast(this.getNodeById(\"1230052684710\"), \"jetbrains.mps.baseLanguage.structure.ClassConcept\"))));\n    }","commit_id":"3da8b24e39dec548fe9a866c1f875dffa5dfbab0","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public void removeSystemProperties() {\n        final ModelNode removeDestinationOp = new ModelNode();\n        removeDestinationOp.get(ClientConstants.OP).set(\"remove\");\n        removeDestinationOp.get(ClientConstants.OP_ADDR).add(\"system-property\", \"destination\");\n        final ModelNode removeResourceAdapterOp = new ModelNode();\n        removeResourceAdapterOp.get(ClientConstants.OP).set(\"remove\");\n        removeResourceAdapterOp.get(ClientConstants.OP_ADDR).add(\"system-property\", \"resource.adapter\");\n\n        final ModelNode disableSubstitutionOp = new ModelNode();\n        disableSubstitutionOp.get(OP_ADDR).set(SUBSYSTEM, \"ee\");\n        disableSubstitutionOp.get(OP).set(WRITE_ATTRIBUTE_OPERATION);\n        disableSubstitutionOp.get(NAME).set(\"ejb-annotationr-property-replacement\");\n        disableSubstitutionOp.get(VALUE).set(false);\n\n        try {\n            applyUpdate(removeDestinationOp);\n            applyUpdate(removeResourceAdapterOp);\n            applyUpdate(disableSubstitutionOp);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }","id":105039,"modified_method":"@Override\n    public void removeSystemProperties() {\n        final ModelNode removeDestinationOp = new ModelNode();\n        removeDestinationOp.get(ClientConstants.OP).set(\"remove\");\n        removeDestinationOp.get(ClientConstants.OP_ADDR).add(\"system-property\", \"destination\");\n        final ModelNode removeResourceAdapterOp = new ModelNode();\n        removeResourceAdapterOp.get(ClientConstants.OP).set(\"remove\");\n        removeResourceAdapterOp.get(ClientConstants.OP_ADDR).add(\"system-property\", \"resource.adapter\");\n\n        final ModelNode disableSubstitutionOp = new ModelNode();\n        disableSubstitutionOp.get(OP_ADDR).set(SUBSYSTEM, \"ee\");\n        disableSubstitutionOp.get(OP).set(WRITE_ATTRIBUTE_OPERATION);\n        disableSubstitutionOp.get(NAME).set(\"ejb-annotation-property-replacement\");\n        disableSubstitutionOp.get(VALUE).set(false);\n\n        try {\n            applyUpdate(removeDestinationOp);\n            applyUpdate(removeResourceAdapterOp);\n            applyUpdate(disableSubstitutionOp);\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }","commit_id":"cc320f7a13a0397eca532a0cc844874798bce7fe","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Check the deployment annotation index for all classes with the @ManagedBean annotation.  For each class with the\n     * annotation, collect all the required information to create a managed bean instance, and attach it to the context.\n     *\n     * @param phaseContext the deployment unit context\n     * @throws DeploymentUnitProcessingException\n     *\n     */\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final EEResourceReferenceProcessorRegistry registry = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.RESOURCE_REFERENCE_PROCESSOR_REGISTRY);\n        final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION);\n        final CompositeIndex compositeIndex = deploymentUnit.getAttachment(Attachments.COMPOSITE_ANNOTATION_INDEX);\n        if(compositeIndex == null) {\n            return;\n        }\n        final List<AnnotationInstance> instances = compositeIndex.getAnnotations(MANAGED_BEAN_ANNOTATION_NAME);\n        if (instances == null || instances.isEmpty()) {\n            return;\n        }\n\n        for (AnnotationInstance instance : instances) {\n            AnnotationTarget target = instance.target();\n            if (!(target instanceof ClassInfo)) {\n                throw MESSAGES.classOnlyAnnotation(\"@ManagedBean\", target);\n            }\n            final ClassInfo classInfo = (ClassInfo) target;\n            // skip if it's not a valid managed bean class\n            if (!assertManagedBeanClassValidity(classInfo)) {\n                continue;\n            }\n            final String beanClassName = classInfo.name().toString();\n\n            // Get the managed bean name from the annotation\n            final AnnotationValue nameValue = instance.value();\n            final String beanName = nameValue == null || nameValue.asString().isEmpty() ? beanClassName : nameValue.asString();\n            final ManagedBeanComponentDescription componentDescription = new ManagedBeanComponentDescription(beanName, beanClassName, moduleDescription, deploymentUnit.getServiceName());\n\n            // Add the view\n            ViewDescription viewDescription = new ViewDescription(componentDescription, beanClassName);\n            viewDescription.getConfigurators().addFirst(new ViewConfigurator() {\n                public void configure(final DeploymentPhaseContext context, final ComponentConfiguration componentConfiguration, final ViewDescription description, final ViewConfiguration configuration) throws DeploymentUnitProcessingException {\n                    // Add MB association interceptors\n                    configuration.addClientPostConstructInterceptor(ManagedBeanCreateInterceptor.FACTORY, InterceptorOrder.ClientPostConstruct.INSTANCE_CREATE);\n                    final ClassLoader classLoader = componentConfiguration.getModuleClassLoader();\n                    configuration.addViewInterceptor(PrivilegedWithCombinerInterceptor.getFactory(), InterceptorOrder.View.PRIVILEGED_INTERCEPTOR);\n                    configuration.addViewInterceptor(AccessCheckingInterceptor.getFactory(), InterceptorOrder.View.CHECKING_INTERCEPTOR);\n                    configuration.addViewInterceptor(new ImmediateInterceptorFactory(new ContextClassLoaderInterceptor(classLoader)), InterceptorOrder.View.TCCL_INTERCEPTOR);\n                }\n            });\n            viewDescription.getBindingNames().addAll(Arrays.asList(\"java:module/\" + beanName, \"java:app/\" + moduleDescription.getModuleName() + \"/\" + beanName));\n            componentDescription.getViews().add(viewDescription);\n            moduleDescription.addComponent(componentDescription);\n\n            // register a EEResourceReferenceProcessor which can process @Resource references to this managed bean.\n            registry.registerResourceReferenceProcessor(new ManagedBeanResourceReferenceProcessor(beanClassName));\n        }\n    }","id":105040,"modified_method":"/**\n     * Check the deployment annotation index for all classes with the @ManagedBean annotation.  For each class with the\n     * annotation, collect all the required information to create a managed bean instance, and attach it to the context.\n     *\n     * @param phaseContext the deployment unit context\n     * @throws DeploymentUnitProcessingException\n     *\n     */\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final EEResourceReferenceProcessorRegistry registry = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.RESOURCE_REFERENCE_PROCESSOR_REGISTRY);\n        final EEModuleDescription moduleDescription = deploymentUnit.getAttachment(org.jboss.as.ee.component.Attachments.EE_MODULE_DESCRIPTION);\n        final CompositeIndex compositeIndex = deploymentUnit.getAttachment(Attachments.COMPOSITE_ANNOTATION_INDEX);\n        final boolean replacement = deploymentUnit.getAttachment(org.jboss.as.ee.structure.Attachments.EJB_ANNOTATION_PROPERTY_REPLACEMENT);\n        final PropertyReplacer replacer = EJBAnnotationPropertyReplacement.propertyReplacer(deploymentUnit);\n        if(compositeIndex == null) {\n            return;\n        }\n        final List<AnnotationInstance> instances = compositeIndex.getAnnotations(MANAGED_BEAN_ANNOTATION_NAME);\n        if (instances == null || instances.isEmpty()) {\n            return;\n        }\n\n        for (AnnotationInstance instance : instances) {\n            AnnotationTarget target = instance.target();\n            if (!(target instanceof ClassInfo)) {\n                throw MESSAGES.classOnlyAnnotation(\"@ManagedBean\", target);\n            }\n            final ClassInfo classInfo = (ClassInfo) target;\n            // skip if it's not a valid managed bean class\n            if (!assertManagedBeanClassValidity(classInfo)) {\n                continue;\n            }\n            final String beanClassName = classInfo.name().toString();\n\n            // Get the managed bean name from the annotation\n            final AnnotationValue nameValue = instance.value();\n            final String beanName = nameValue == null || nameValue.asString().isEmpty() ? beanClassName : (replacement ? replacer.replaceProperties(nameValue.asString()) : nameValue.asString());\n            final ManagedBeanComponentDescription componentDescription = new ManagedBeanComponentDescription(beanName, beanClassName, moduleDescription, deploymentUnit.getServiceName());\n\n            // Add the view\n            ViewDescription viewDescription = new ViewDescription(componentDescription, beanClassName);\n            viewDescription.getConfigurators().addFirst(new ViewConfigurator() {\n                public void configure(final DeploymentPhaseContext context, final ComponentConfiguration componentConfiguration, final ViewDescription description, final ViewConfiguration configuration) throws DeploymentUnitProcessingException {\n                    // Add MB association interceptors\n                    configuration.addClientPostConstructInterceptor(ManagedBeanCreateInterceptor.FACTORY, InterceptorOrder.ClientPostConstruct.INSTANCE_CREATE);\n                    final ClassLoader classLoader = componentConfiguration.getModuleClassLoader();\n                    configuration.addViewInterceptor(PrivilegedWithCombinerInterceptor.getFactory(), InterceptorOrder.View.PRIVILEGED_INTERCEPTOR);\n                    configuration.addViewInterceptor(AccessCheckingInterceptor.getFactory(), InterceptorOrder.View.CHECKING_INTERCEPTOR);\n                    configuration.addViewInterceptor(new ImmediateInterceptorFactory(new ContextClassLoaderInterceptor(classLoader)), InterceptorOrder.View.TCCL_INTERCEPTOR);\n                }\n            });\n            viewDescription.getBindingNames().addAll(Arrays.asList(\"java:module/\" + beanName, \"java:app/\" + moduleDescription.getModuleName() + \"/\" + beanName));\n            componentDescription.getViews().add(viewDescription);\n            moduleDescription.addComponent(componentDescription);\n\n            // register a EEResourceReferenceProcessor which can process @Resource references to this managed bean.\n            registry.registerResourceReferenceProcessor(new ManagedBeanResourceReferenceProcessor(beanClassName));\n        }\n    }","commit_id":"cc320f7a13a0397eca532a0cc844874798bce7fe","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void processClassResource(final DeploymentPhaseContext phaseContext, final String name, final String type, final EEModuleClassDescription classDescription, final AnnotationInstance annotation, final EEModuleDescription eeModuleDescription, final Module module, final EEApplicationClasses applicationClasses) throws DeploymentUnitProcessingException {\n        if (isEmpty(name)) {\n            throw MESSAGES.annotationAttributeMissing(\"@Resource\", \"name\");\n        }\n        final String realType;\n        if (isEmpty(type)) {\n            realType = Object.class.getName();\n        } else {\n            realType = type;\n        }\n        process(phaseContext, classDescription, annotation, realType, name, null, eeModuleDescription, module, applicationClasses);\n    }","id":105041,"modified_method":"protected void processClassResource(final DeploymentPhaseContext phaseContext, final String name, final String type, final EEModuleClassDescription classDescription, final AnnotationInstance annotation, final EEModuleDescription eeModuleDescription, final Module module, final EEApplicationClasses applicationClasses, final boolean replacement, final PropertyReplacer replacer) throws DeploymentUnitProcessingException {\n        if (isEmpty(name)) {\n            throw MESSAGES.annotationAttributeMissing(\"@Resource\", \"name\");\n        }\n        final String realType;\n        if (isEmpty(type)) {\n            realType = Object.class.getName();\n        } else {\n            realType = type;\n        }\n        process(phaseContext, classDescription, annotation, realType, name, null, eeModuleDescription, module, applicationClasses, replacement, replacer);\n    }","commit_id":"cc320f7a13a0397eca532a0cc844874798bce7fe","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void process(final DeploymentPhaseContext phaseContext, final EEModuleClassDescription classDescription, final AnnotationInstance annotation, final String injectionType, final String localContextName, final InjectionTarget targetDescription, final EEModuleDescription eeModuleDescription, final Module module, final EEApplicationClasses applicationClasses) throws DeploymentUnitProcessingException {\n        final EEResourceReferenceProcessorRegistry registry = phaseContext.getDeploymentUnit().getAttachment(Attachments.RESOURCE_REFERENCE_PROCESSOR_REGISTRY);\n        final AnnotationValue lookupAnnotation = annotation.value(\"lookup\");\n        String lookup = lookupAnnotation == null ? null : lookupAnnotation.asString();\n        // if \"lookup\" hasn't been specified then fallback on \"mappedName\" which we treat the same as \"lookup\"\n        if (isEmpty(lookup)) {\n            final AnnotationValue mappedNameAnnotationValue = annotation.value(\"mappedName\");\n            lookup = mappedNameAnnotationValue == null ? null : mappedNameAnnotationValue.asString();\n        }\n\n        if (isEmpty(lookup) && FIXED_LOCATIONS.containsKey(injectionType)) {\n            lookup = FIXED_LOCATIONS.get(injectionType);\n        }\n        InjectionSource valueSource = null;\n        final boolean isEnvEntryType = this.isEnvEntryType(injectionType, module);\n        if (!isEmpty(lookup)) {\n            valueSource = InjectionUtils.getInjectionSource(lookup,injectionType);\n        } else if (isEnvEntryType) {\n            // if it's a env-entry type then we do *not* create a BindingConfiguration to bind to the ENC\n            // since the binding (value) for env-entry is always driven from a deployment descriptor.\n            // The deployment descriptor processing and subsequent binding in the ENC is taken care off by a\n            // different Deployment unit processor. If the value isn't specified in the deployment descriptor,\n            // then there will be no binding the ENC and that's what is expected by the Java EE 6 spec. Furthermore,\n            // if the @Resource is a env-entry binding then the injection target will be optional since in the absence of\n            // a env-entry-value, there won't be a binding and effectively no injection. This again is as expected by spec.\n        } else {\n            //otherwise we just try and handle it\n            //if we don't have a value source we will try and inject from a lookup\n            //and the user has to configure the value in a deployment descriptor\n            final EEResourceReferenceProcessor resourceReferenceProcessor = registry.getResourceReferenceProcessor(injectionType);\n            if (resourceReferenceProcessor != null) {\n                valueSource = resourceReferenceProcessor.getResourceReferenceBindingSource();\n            }\n        }\n\n        // EE.5.2.4\n        // Each injection of an object corresponds to a JNDI lookup. Whether a new\n        // instance of the requested object is injected, or whether a shared instance is\n        // injected, is determined by the rules described above.\n\n        // Because of performance we allow any type of InjectionSource.\n\n        if (valueSource == null) {\n            // the ResourceInjectionConfiguration is created by LazyResourceInjection\n            if (targetDescription != null) {\n                OptionalLookupInjectionSource optionalInjection = new OptionalLookupInjectionSource(localContextName);\n                final ResourceInjectionConfiguration injectionConfiguration = new ResourceInjectionConfiguration(targetDescription, optionalInjection, true);\n                classDescription.addResourceInjection(injectionConfiguration);\n            }\n        } else {\n            // our injection comes from the local lookup, no matter what.\n            final InjectionSource injectionSource = new LookupInjectionSource(localContextName);\n            final ResourceInjectionConfiguration injectionConfiguration = targetDescription != null ?\n                    new ResourceInjectionConfiguration(targetDescription, injectionSource) : null;\n\n            final BindingConfiguration bindingConfiguration = new BindingConfiguration(localContextName, valueSource);\n            classDescription.getBindingConfigurations().add(bindingConfiguration);\n\n            if (injectionConfiguration != null) {\n                classDescription.addResourceInjection(injectionConfiguration);\n            }\n        }\n    }","id":105042,"modified_method":"protected void process(final DeploymentPhaseContext phaseContext, final EEModuleClassDescription classDescription, final AnnotationInstance annotation, final String injectionType, final String localContextName, final InjectionTarget targetDescription, final EEModuleDescription eeModuleDescription, final Module module, final EEApplicationClasses applicationClasses, final boolean replacement, final PropertyReplacer replacer) throws DeploymentUnitProcessingException {\n        final EEResourceReferenceProcessorRegistry registry = phaseContext.getDeploymentUnit().getAttachment(Attachments.RESOURCE_REFERENCE_PROCESSOR_REGISTRY);\n        final AnnotationValue lookupAnnotation = annotation.value(\"lookup\");\n        String lookup = lookupAnnotation == null ? null : (replacement ? replacer.replaceProperties(lookupAnnotation.asString()) : lookupAnnotation.asString());\n        // if \"lookup\" hasn't been specified then fallback on \"mappedName\" which we treat the same as \"lookup\"\n        if (isEmpty(lookup)) {\n            final AnnotationValue mappedNameAnnotationValue = annotation.value(\"mappedName\");\n            lookup = mappedNameAnnotationValue == null ? null : (replacement ? replacer.replaceProperties(mappedNameAnnotationValue.asString()) : mappedNameAnnotationValue.asString());\n        }\n\n        if (isEmpty(lookup) && FIXED_LOCATIONS.containsKey(injectionType)) {\n            lookup = FIXED_LOCATIONS.get(injectionType);\n        }\n        InjectionSource valueSource = null;\n        final boolean isEnvEntryType = this.isEnvEntryType(injectionType, module);\n        if (!isEmpty(lookup)) {\n            valueSource = InjectionUtils.getInjectionSource(lookup,injectionType);\n        } else if (isEnvEntryType) {\n            // if it's a env-entry type then we do *not* create a BindingConfiguration to bind to the ENC\n            // since the binding (value) for env-entry is always driven from a deployment descriptor.\n            // The deployment descriptor processing and subsequent binding in the ENC is taken care off by a\n            // different Deployment unit processor. If the value isn't specified in the deployment descriptor,\n            // then there will be no binding the ENC and that's what is expected by the Java EE 6 spec. Furthermore,\n            // if the @Resource is a env-entry binding then the injection target will be optional since in the absence of\n            // a env-entry-value, there won't be a binding and effectively no injection. This again is as expected by spec.\n        } else {\n            //otherwise we just try and handle it\n            //if we don't have a value source we will try and inject from a lookup\n            //and the user has to configure the value in a deployment descriptor\n            final EEResourceReferenceProcessor resourceReferenceProcessor = registry.getResourceReferenceProcessor(injectionType);\n            if (resourceReferenceProcessor != null) {\n                valueSource = resourceReferenceProcessor.getResourceReferenceBindingSource();\n            }\n        }\n\n        // EE.5.2.4\n        // Each injection of an object corresponds to a JNDI lookup. Whether a new\n        // instance of the requested object is injected, or whether a shared instance is\n        // injected, is determined by the rules described above.\n\n        // Because of performance we allow any type of InjectionSource.\n\n        if (valueSource == null) {\n            // the ResourceInjectionConfiguration is created by LazyResourceInjection\n            if (targetDescription != null) {\n                OptionalLookupInjectionSource optionalInjection = new OptionalLookupInjectionSource(localContextName);\n                final ResourceInjectionConfiguration injectionConfiguration = new ResourceInjectionConfiguration(targetDescription, optionalInjection, true);\n                classDescription.addResourceInjection(injectionConfiguration);\n            }\n        } else {\n            // our injection comes from the local lookup, no matter what.\n            final InjectionSource injectionSource = new LookupInjectionSource(localContextName);\n            final ResourceInjectionConfiguration injectionConfiguration = targetDescription != null ?\n                    new ResourceInjectionConfiguration(targetDescription, injectionSource) : null;\n\n            final BindingConfiguration bindingConfiguration = new BindingConfiguration(localContextName, valueSource);\n            classDescription.getBindingConfigurations().add(bindingConfiguration);\n\n            if (injectionConfiguration != null) {\n                classDescription.addResourceInjection(injectionConfiguration);\n            }\n        }\n    }","commit_id":"cc320f7a13a0397eca532a0cc844874798bce7fe","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void processMethodResource(final DeploymentPhaseContext phaseContext, final MethodInfo methodInfo, final String name, final String type, final EEModuleClassDescription classDescription, final AnnotationInstance annotation, final EEModuleDescription eeModuleDescription, final Module module, final EEApplicationClasses applicationClasses) throws DeploymentUnitProcessingException {\n        final String methodName = methodInfo.name();\n        if (!methodName.startsWith(\"set\") || methodInfo.args().length != 1) {\n            throw MESSAGES.setterMethodOnly(\"@Resource\", methodInfo);\n        }\n\n        final String contextNameSuffix = methodName.substring(3, 4).toLowerCase(Locale.ENGLISH) + methodName.substring(4);\n        final String localContextName = isEmpty(name) ? methodInfo.declaringClass().name().toString() + \"/\" + contextNameSuffix : name;\n\n        final String injectionType = isEmpty(type) || type.equals(Object.class.getName()) ? methodInfo.args()[0].name().toString() : type;\n        final InjectionTarget targetDescription = new MethodInjectionTarget(methodInfo.declaringClass().name().toString(), methodName, methodInfo.args()[0].name().toString());\n        process(phaseContext, classDescription, annotation, injectionType, localContextName, targetDescription, eeModuleDescription, module, applicationClasses);\n    }","id":105043,"modified_method":"protected void processMethodResource(final DeploymentPhaseContext phaseContext, final MethodInfo methodInfo, final String name, final String type, final EEModuleClassDescription classDescription, final AnnotationInstance annotation, final EEModuleDescription eeModuleDescription, final Module module, final EEApplicationClasses applicationClasses, final boolean replacement, final PropertyReplacer replacer) throws DeploymentUnitProcessingException {\n        final String methodName = methodInfo.name();\n        if (!methodName.startsWith(\"set\") || methodInfo.args().length != 1) {\n            throw MESSAGES.setterMethodOnly(\"@Resource\", methodInfo);\n        }\n\n        final String contextNameSuffix = methodName.substring(3, 4).toLowerCase(Locale.ENGLISH) + methodName.substring(4);\n        final String localContextName = isEmpty(name) ? methodInfo.declaringClass().name().toString() + \"/\" + contextNameSuffix : name;\n\n        final String injectionType = isEmpty(type) || type.equals(Object.class.getName()) ? methodInfo.args()[0].name().toString() : type;\n        final InjectionTarget targetDescription = new MethodInjectionTarget(methodInfo.declaringClass().name().toString(), methodName, methodInfo.args()[0].name().toString());\n        process(phaseContext, classDescription, annotation, injectionType, localContextName, targetDescription, eeModuleDescription, module, applicationClasses, replacement, replacer);\n    }","commit_id":"cc320f7a13a0397eca532a0cc844874798bce7fe","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void processFieldResource(final DeploymentPhaseContext phaseContext, final FieldInfo fieldInfo, final String name, final String type, final EEModuleClassDescription classDescription, final AnnotationInstance annotation, final EEModuleDescription eeModuleDescription, final Module module, final EEApplicationClasses applicationClasses) throws DeploymentUnitProcessingException {\n        final String fieldName = fieldInfo.name();\n        final String injectionType = isEmpty(type) || type.equals(Object.class.getName()) ? fieldInfo.type().name().toString() : type;\n        final String localContextName = isEmpty(name) ? fieldInfo.declaringClass().name().toString() + \"/\" + fieldName : name;\n        final InjectionTarget targetDescription = new FieldInjectionTarget(fieldInfo.declaringClass().name().toString(), fieldName, fieldInfo.type().name().toString());\n        process(phaseContext, classDescription, annotation, injectionType, localContextName, targetDescription, eeModuleDescription, module, applicationClasses);\n    }","id":105044,"modified_method":"protected void processFieldResource(final DeploymentPhaseContext phaseContext, final FieldInfo fieldInfo, final String name, final String type, final EEModuleClassDescription classDescription, final AnnotationInstance annotation, final EEModuleDescription eeModuleDescription, final Module module, final EEApplicationClasses applicationClasses, final boolean replacement, final PropertyReplacer replacer) throws DeploymentUnitProcessingException {\n        final String fieldName = fieldInfo.name();\n        final String injectionType = isEmpty(type) || type.equals(Object.class.getName()) ? fieldInfo.type().name().toString() : type;\n        final String localContextName = isEmpty(name) ? fieldInfo.declaringClass().name().toString() + \"/\" + fieldName : name;\n        final InjectionTarget targetDescription = new FieldInjectionTarget(fieldInfo.declaringClass().name().toString(), fieldName, fieldInfo.type().name().toString());\n        process(phaseContext, classDescription, annotation, injectionType, localContextName, targetDescription, eeModuleDescription, module, applicationClasses, replacement, replacer);\n    }","commit_id":"cc320f7a13a0397eca532a0cc844874798bce7fe","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final EEModuleDescription eeModuleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);\n        final CompositeIndex index = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.COMPOSITE_ANNOTATION_INDEX);\n        final EEApplicationClasses applicationClasses = deploymentUnit.getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION);\n        final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);\n        if (module == null) {\n            return;\n        }\n        final List<AnnotationInstance> resourceAnnotations = index.getAnnotations(RESOURCE_ANNOTATION_NAME);\n        for (AnnotationInstance annotation : resourceAnnotations) {\n            final AnnotationTarget annotationTarget = annotation.target();\n            final AnnotationValue nameValue = annotation.value(\"name\");\n            final String name = nameValue != null ? nameValue.asString() : null;\n            final AnnotationValue typeValue = annotation.value(\"type\");\n            final String type = typeValue != null ? typeValue.asClass().name().toString() : null;\n            if (annotationTarget instanceof FieldInfo) {\n                final FieldInfo fieldInfo = (FieldInfo) annotationTarget;\n                final ClassInfo classInfo = fieldInfo.declaringClass();\n                EEModuleClassDescription classDescription = eeModuleDescription.addOrGetLocalClassDescription(classInfo.name().toString());\n                processFieldResource(phaseContext, fieldInfo, name, type, classDescription, annotation, eeModuleDescription, module, applicationClasses);\n            } else if (annotationTarget instanceof MethodInfo) {\n                final MethodInfo methodInfo = (MethodInfo) annotationTarget;\n                ClassInfo classInfo = methodInfo.declaringClass();\n                EEModuleClassDescription classDescription = eeModuleDescription.addOrGetLocalClassDescription(classInfo.name().toString());\n                processMethodResource(phaseContext, methodInfo, name, type, classDescription, annotation, eeModuleDescription, module, applicationClasses);\n            } else if (annotationTarget instanceof ClassInfo) {\n                final ClassInfo classInfo = (ClassInfo) annotationTarget;\n                EEModuleClassDescription classDescription = eeModuleDescription.addOrGetLocalClassDescription(classInfo.name().toString());\n                processClassResource(phaseContext, name, type, classDescription, annotation, eeModuleDescription, module, applicationClasses);\n            }\n        }\n        final List<AnnotationInstance> resourcesAnnotations = index.getAnnotations(RESOURCES_ANNOTATION_NAME);\n        for (AnnotationInstance outerAnnotation : resourcesAnnotations) {\n            final AnnotationTarget annotationTarget = outerAnnotation.target();\n            if (annotationTarget instanceof ClassInfo) {\n                final ClassInfo classInfo = (ClassInfo) annotationTarget;\n                final AnnotationInstance[] values = outerAnnotation.value(\"value\").asNestedArray();\n                for (AnnotationInstance annotation : values) {\n                    final AnnotationValue nameValue = annotation.value(\"name\");\n                    final String name = nameValue != null ? nameValue.asString() : null;\n                    final AnnotationValue typeValue = annotation.value(\"type\");\n                    final String type = typeValue != null ? typeValue.asClass().name().toString() : null;\n                    EEModuleClassDescription classDescription = eeModuleDescription.addOrGetLocalClassDescription(classInfo.name().toString());\n                    processClassResource(phaseContext, name, type, classDescription, annotation, eeModuleDescription, module, applicationClasses);\n                }\n            }\n        }\n    }","id":105045,"modified_method":"public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final EEModuleDescription eeModuleDescription = deploymentUnit.getAttachment(Attachments.EE_MODULE_DESCRIPTION);\n        final CompositeIndex index = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.COMPOSITE_ANNOTATION_INDEX);\n        final EEApplicationClasses applicationClasses = deploymentUnit.getAttachment(Attachments.EE_APPLICATION_CLASSES_DESCRIPTION);\n        final Module module = deploymentUnit.getAttachment(org.jboss.as.server.deployment.Attachments.MODULE);\n        final boolean replacement = deploymentUnit.getAttachment(org.jboss.as.ee.structure.Attachments.EJB_ANNOTATION_PROPERTY_REPLACEMENT);\n        final PropertyReplacer replacer = EJBAnnotationPropertyReplacement.propertyReplacer(deploymentUnit);\n        if (module == null) {\n            return;\n        }\n        final List<AnnotationInstance> resourceAnnotations = index.getAnnotations(RESOURCE_ANNOTATION_NAME);\n        for (AnnotationInstance annotation : resourceAnnotations) {\n            final AnnotationTarget annotationTarget = annotation.target();\n            final AnnotationValue nameValue = annotation.value(\"name\");\n            final String name = nameValue != null ? (replacement ? replacer.replaceProperties(nameValue.asString()) : nameValue.asString()) : null;\n            final AnnotationValue typeValue = annotation.value(\"type\");\n            final String type = typeValue != null ? typeValue.asClass().name().toString() : null;\n            if (annotationTarget instanceof FieldInfo) {\n                final FieldInfo fieldInfo = (FieldInfo) annotationTarget;\n                final ClassInfo classInfo = fieldInfo.declaringClass();\n                EEModuleClassDescription classDescription = eeModuleDescription.addOrGetLocalClassDescription(classInfo.name().toString());\n                processFieldResource(phaseContext, fieldInfo, name, type, classDescription, annotation, eeModuleDescription, module, applicationClasses, replacement, replacer);\n            } else if (annotationTarget instanceof MethodInfo) {\n                final MethodInfo methodInfo = (MethodInfo) annotationTarget;\n                ClassInfo classInfo = methodInfo.declaringClass();\n                EEModuleClassDescription classDescription = eeModuleDescription.addOrGetLocalClassDescription(classInfo.name().toString());\n                processMethodResource(phaseContext, methodInfo, name, type, classDescription, annotation, eeModuleDescription, module, applicationClasses, replacement, replacer);\n            } else if (annotationTarget instanceof ClassInfo) {\n                final ClassInfo classInfo = (ClassInfo) annotationTarget;\n                EEModuleClassDescription classDescription = eeModuleDescription.addOrGetLocalClassDescription(classInfo.name().toString());\n                processClassResource(phaseContext, name, type, classDescription, annotation, eeModuleDescription, module, applicationClasses, replacement, replacer);\n            }\n        }\n        final List<AnnotationInstance> resourcesAnnotations = index.getAnnotations(RESOURCES_ANNOTATION_NAME);\n        for (AnnotationInstance outerAnnotation : resourcesAnnotations) {\n            final AnnotationTarget annotationTarget = outerAnnotation.target();\n            if (annotationTarget instanceof ClassInfo) {\n                final ClassInfo classInfo = (ClassInfo) annotationTarget;\n                final AnnotationInstance[] values = outerAnnotation.value(\"value\").asNestedArray();\n                for (AnnotationInstance annotation : values) {\n                    final AnnotationValue nameValue = annotation.value(\"name\");\n                    final String name = nameValue != null ? (replacement ? replacer.replaceProperties(nameValue.asString()) : nameValue.asString()) : null;\n                    final AnnotationValue typeValue = annotation.value(\"type\");\n                    final String type = typeValue != null ? typeValue.asClass().name().toString() : null;\n                    EEModuleClassDescription classDescription = eeModuleDescription.addOrGetLocalClassDescription(classInfo.name().toString());\n                    processClassResource(phaseContext, name, type, classDescription, annotation, eeModuleDescription, module, applicationClasses, replacement, replacer);\n                }\n            }\n        }\n    }","commit_id":"cc320f7a13a0397eca532a0cc844874798bce7fe","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jLabel2 = new javax.swing.JLabel();\n        jLabel4 = new javax.swing.JLabel();\n        jLabel6 = new javax.swing.JLabel();\n        jButton3 = new javax.swing.JButton();\n        ingestWarningLabel = new javax.swing.JLabel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        hashSetTable = new HashSetTable();\n        deleteDatabaseButton = new javax.swing.JButton();\n        importDatabaseButton = new javax.swing.JButton();\n        hashDatabasesLabel = new javax.swing.JLabel();\n        nameLabel = new javax.swing.JLabel();\n        hashDbNameLabel = new javax.swing.JLabel();\n        hashDbLocationLabel = new javax.swing.JLabel();\n        locationLabel = new javax.swing.JLabel();\n        typeLabel = new javax.swing.JLabel();\n        hashDbTypeLabel = new javax.swing.JLabel();\n        hashDbIndexStatusLabel = new javax.swing.JLabel();\n        indexLabel = new javax.swing.JLabel();\n        indexButton = new javax.swing.JButton();\n        sendIngestMessagesCheckBox = new javax.swing.JCheckBox();\n        informationLabel = new javax.swing.JLabel();\n        optionsLabel = new javax.swing.JLabel();\n        informationSeparator = new javax.swing.JSeparator();\n        optionsSeparator = new javax.swing.JSeparator();\n        createDatabaseButton = new javax.swing.JButton();\n        indexPathLabelLabel = new javax.swing.JLabel();\n        indexPathLabel = new javax.swing.JLabel();\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.jLabel2.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.jLabel4.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.jLabel6.text\")); // NOI18N\n\n        jButton3.setFont(new java.awt.Font(jButton3.getFont().getName(), Font.PLAIN, 14));\n        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.jButton3.text\")); // NOI18N\n\n        setMinimumSize(new java.awt.Dimension(700, 500));\n        setPreferredSize(new java.awt.Dimension(700, 500));\n\n        ingestWarningLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/hashdatabase/warning16.png\"))); // NOI18N NON-NLS\n        org.openide.awt.Mnemonics.setLocalizedText(ingestWarningLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.ingestWarningLabel.text\")); // NOI18N\n\n        hashSetTable.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n\n            }\n        ));\n        hashSetTable.setShowHorizontalLines(false);\n        hashSetTable.setShowVerticalLines(false);\n        hashSetTable.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyPressed(java.awt.event.KeyEvent evt) {\n                hashSetTableKeyPressed(evt);\n            }\n        });\n        jScrollPane1.setViewportView(hashSetTable);\n\n        deleteDatabaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/hashdatabase/delete16.png\"))); // NOI18N NON-NLS\n        org.openide.awt.Mnemonics.setLocalizedText(deleteDatabaseButton, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.deleteDatabaseButton.text\")); // NOI18N\n        deleteDatabaseButton.setMaximumSize(new java.awt.Dimension(140, 25));\n        deleteDatabaseButton.setMinimumSize(new java.awt.Dimension(140, 25));\n        deleteDatabaseButton.setPreferredSize(new java.awt.Dimension(140, 25));\n        deleteDatabaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                deleteDatabaseButtonActionPerformed(evt);\n            }\n        });\n\n        importDatabaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/hashdatabase/import16.png\"))); // NOI18N NON-NLS\n        org.openide.awt.Mnemonics.setLocalizedText(importDatabaseButton, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.importDatabaseButton.text\")); // NOI18N\n        importDatabaseButton.setMaximumSize(new java.awt.Dimension(140, 25));\n        importDatabaseButton.setMinimumSize(new java.awt.Dimension(140, 25));\n        importDatabaseButton.setPreferredSize(new java.awt.Dimension(140, 25));\n        importDatabaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                importDatabaseButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDatabasesLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDatabasesLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.nameLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDbNameLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDbNameLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDbLocationLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDbLocationLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(locationLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.locationLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(typeLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.typeLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDbTypeLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDbTypeLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDbIndexStatusLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDbIndexStatusLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(indexLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.indexLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(indexButton, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.indexButton.text\")); // NOI18N\n        indexButton.setEnabled(false);\n        indexButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                indexButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(sendIngestMessagesCheckBox, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.sendIngestMessagesCheckBox.text\")); // NOI18N\n        sendIngestMessagesCheckBox.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                sendIngestMessagesCheckBoxActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(informationLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.informationLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(optionsLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.optionsLabel.text\")); // NOI18N\n\n        createDatabaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/hashdatabase/new16.png\"))); // NOI18N NON-NLS\n        org.openide.awt.Mnemonics.setLocalizedText(createDatabaseButton, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.createDatabaseButton.text\")); // NOI18N\n        createDatabaseButton.setMaximumSize(new java.awt.Dimension(140, 25));\n        createDatabaseButton.setMinimumSize(new java.awt.Dimension(140, 25));\n        createDatabaseButton.setPreferredSize(new java.awt.Dimension(140, 25));\n        createDatabaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                createDatabaseButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(indexPathLabelLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.indexPathLabelLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(indexPathLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.indexPathLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(layout.createSequentialGroup()\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addGroup(layout.createSequentialGroup()\n                                        .addComponent(informationLabel)\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                        .addComponent(informationSeparator))\n                                    .addComponent(ingestWarningLabel)\n                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                                        .addGap(10, 10, 10)\n                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                            .addGroup(layout.createSequentialGroup()\n                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                                    .addComponent(locationLabel)\n                                                    .addComponent(indexButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                                    .addComponent(typeLabel)\n                                                    .addComponent(indexLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                                    .addComponent(indexPathLabelLabel))\n                                                .addGap(10, 10, 10)\n                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                                    .addComponent(hashDbTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)\n                                                    .addComponent(hashDbLocationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                                    .addComponent(indexPathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                                    .addComponent(hashDbIndexStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))\n                                            .addGroup(layout.createSequentialGroup()\n                                                .addComponent(nameLabel)\n                                                .addGap(53, 53, 53)\n                                                .addComponent(hashDbNameLabel)\n                                                .addGap(0, 0, Short.MAX_VALUE))))\n                                    .addGroup(layout.createSequentialGroup()\n                                        .addComponent(optionsLabel)\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                        .addComponent(optionsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))))\n                            .addGroup(layout.createSequentialGroup()\n                                .addGap(23, 23, 23)\n                                .addComponent(sendIngestMessagesCheckBox)\n                                .addGap(0, 0, Short.MAX_VALUE))))\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(hashDatabasesLabel)\n                            .addGroup(layout.createSequentialGroup()\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                                    .addComponent(deleteDatabaseButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n                                    .addComponent(createDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                .addComponent(importDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                        .addGap(0, 0, Short.MAX_VALUE)))\n                .addGap(24, 24, 24))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(hashDatabasesLabel)\n                .addGap(6, 6, 6)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(informationLabel)\n                            .addGroup(layout.createSequentialGroup()\n                                .addGap(7, 7, 7)\n                                .addComponent(informationSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                        .addGap(7, 7, 7)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(nameLabel)\n                            .addComponent(hashDbNameLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(typeLabel)\n                            .addComponent(hashDbTypeLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(locationLabel)\n                            .addComponent(hashDbLocationLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(indexPathLabelLabel)\n                            .addComponent(indexPathLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(indexLabel)\n                            .addComponent(hashDbIndexStatusLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(indexButton)\n                        .addGap(18, 18, 18)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(optionsLabel)\n                            .addComponent(optionsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addGap(18, 18, 18)\n                        .addComponent(sendIngestMessagesCheckBox)\n                        .addGap(18, 18, 18)\n                        .addComponent(ingestWarningLabel)\n                        .addGap(0, 0, Short.MAX_VALUE))\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(importDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(createDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(deleteDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n        );\n    }","id":105046,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jLabel2 = new javax.swing.JLabel();\n        jLabel4 = new javax.swing.JLabel();\n        jLabel6 = new javax.swing.JLabel();\n        jButton3 = new javax.swing.JButton();\n        ingestWarningLabel = new javax.swing.JLabel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        hashSetTable = new HashSetTable();\n        deleteDatabaseButton = new javax.swing.JButton();\n        importDatabaseButton = new javax.swing.JButton();\n        hashDatabasesLabel = new javax.swing.JLabel();\n        nameLabel = new javax.swing.JLabel();\n        hashDbNameLabel = new javax.swing.JLabel();\n        hashDbLocationLabel = new javax.swing.JLabel();\n        locationLabel = new javax.swing.JLabel();\n        typeLabel = new javax.swing.JLabel();\n        hashDbTypeLabel = new javax.swing.JLabel();\n        hashDbIndexStatusLabel = new javax.swing.JLabel();\n        indexLabel = new javax.swing.JLabel();\n        indexButton = new javax.swing.JButton();\n        sendIngestMessagesCheckBox = new javax.swing.JCheckBox();\n        informationLabel = new javax.swing.JLabel();\n        optionsLabel = new javax.swing.JLabel();\n        informationSeparator = new javax.swing.JSeparator();\n        optionsSeparator = new javax.swing.JSeparator();\n        createDatabaseButton = new javax.swing.JButton();\n        indexPathLabelLabel = new javax.swing.JLabel();\n        indexPathLabel = new javax.swing.JLabel();\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.jLabel2.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel4, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.jLabel4.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel6, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.jLabel6.text\")); // NOI18N\n\n        jButton3.setFont(jButton3.getFont().deriveFont(Font.PLAIN, 14));\n        org.openide.awt.Mnemonics.setLocalizedText(jButton3, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.jButton3.text\")); // NOI18N\n\n        setMinimumSize(new java.awt.Dimension(700, 500));\n        setPreferredSize(new java.awt.Dimension(700, 500));\n\n        ingestWarningLabel.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/hashdatabase/warning16.png\"))); // NOI18N NON-NLS\n        org.openide.awt.Mnemonics.setLocalizedText(ingestWarningLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.ingestWarningLabel.text\")); // NOI18N\n\n        hashSetTable.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n\n            }\n        ));\n        hashSetTable.setShowHorizontalLines(false);\n        hashSetTable.setShowVerticalLines(false);\n        hashSetTable.addKeyListener(new java.awt.event.KeyAdapter() {\n            public void keyPressed(java.awt.event.KeyEvent evt) {\n                hashSetTableKeyPressed(evt);\n            }\n        });\n        jScrollPane1.setViewportView(hashSetTable);\n\n        deleteDatabaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/hashdatabase/delete16.png\"))); // NOI18N NON-NLS\n        org.openide.awt.Mnemonics.setLocalizedText(deleteDatabaseButton, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.deleteDatabaseButton.text\")); // NOI18N\n        deleteDatabaseButton.setMaximumSize(new java.awt.Dimension(140, 25));\n        deleteDatabaseButton.setMinimumSize(new java.awt.Dimension(140, 25));\n        deleteDatabaseButton.setPreferredSize(new java.awt.Dimension(140, 25));\n        deleteDatabaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                deleteDatabaseButtonActionPerformed(evt);\n            }\n        });\n\n        importDatabaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/hashdatabase/import16.png\"))); // NOI18N NON-NLS\n        org.openide.awt.Mnemonics.setLocalizedText(importDatabaseButton, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.importDatabaseButton.text\")); // NOI18N\n        importDatabaseButton.setMaximumSize(new java.awt.Dimension(140, 25));\n        importDatabaseButton.setMinimumSize(new java.awt.Dimension(140, 25));\n        importDatabaseButton.setPreferredSize(new java.awt.Dimension(140, 25));\n        importDatabaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                importDatabaseButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDatabasesLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDatabasesLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(nameLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.nameLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDbNameLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDbNameLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDbLocationLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDbLocationLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(locationLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.locationLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(typeLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.typeLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDbTypeLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDbTypeLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(hashDbIndexStatusLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.hashDbIndexStatusLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(indexLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.indexLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(indexButton, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.indexButton.text\")); // NOI18N\n        indexButton.setEnabled(false);\n        indexButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                indexButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(sendIngestMessagesCheckBox, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.sendIngestMessagesCheckBox.text\")); // NOI18N\n        sendIngestMessagesCheckBox.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                sendIngestMessagesCheckBoxActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(informationLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.informationLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(optionsLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.optionsLabel.text\")); // NOI18N\n\n        createDatabaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/modules/hashdatabase/new16.png\"))); // NOI18N NON-NLS\n        org.openide.awt.Mnemonics.setLocalizedText(createDatabaseButton, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.createDatabaseButton.text\")); // NOI18N\n        createDatabaseButton.setMaximumSize(new java.awt.Dimension(140, 25));\n        createDatabaseButton.setMinimumSize(new java.awt.Dimension(140, 25));\n        createDatabaseButton.setPreferredSize(new java.awt.Dimension(140, 25));\n        createDatabaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                createDatabaseButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(indexPathLabelLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.indexPathLabelLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(indexPathLabel, org.openide.util.NbBundle.getMessage(HashLookupSettingsPanel.class, \"HashLookupSettingsPanel.indexPathLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 275, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(layout.createSequentialGroup()\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addGroup(layout.createSequentialGroup()\n                                        .addComponent(informationLabel)\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                        .addComponent(informationSeparator))\n                                    .addComponent(ingestWarningLabel)\n                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                                        .addGap(10, 10, 10)\n                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                            .addGroup(layout.createSequentialGroup()\n                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                                    .addComponent(locationLabel)\n                                                    .addComponent(indexButton, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                                    .addComponent(typeLabel)\n                                                    .addComponent(indexLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)\n                                                    .addComponent(indexPathLabelLabel))\n                                                .addGap(10, 10, 10)\n                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                                    .addComponent(hashDbTypeLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 241, Short.MAX_VALUE)\n                                                    .addComponent(hashDbLocationLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                                    .addComponent(indexPathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                                    .addComponent(hashDbIndexStatusLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))\n                                            .addGroup(layout.createSequentialGroup()\n                                                .addComponent(nameLabel)\n                                                .addGap(53, 53, 53)\n                                                .addComponent(hashDbNameLabel)\n                                                .addGap(0, 0, Short.MAX_VALUE))))\n                                    .addGroup(layout.createSequentialGroup()\n                                        .addComponent(optionsLabel)\n                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                        .addComponent(optionsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 324, javax.swing.GroupLayout.PREFERRED_SIZE))))\n                            .addGroup(layout.createSequentialGroup()\n                                .addGap(23, 23, 23)\n                                .addComponent(sendIngestMessagesCheckBox)\n                                .addGap(0, 0, Short.MAX_VALUE))))\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(hashDatabasesLabel)\n                            .addGroup(layout.createSequentialGroup()\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                                    .addComponent(deleteDatabaseButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n                                    .addComponent(createDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE))\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                .addComponent(importDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                        .addGap(0, 0, Short.MAX_VALUE)))\n                .addGap(24, 24, 24))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(hashDatabasesLabel)\n                .addGap(6, 6, 6)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(informationLabel)\n                            .addGroup(layout.createSequentialGroup()\n                                .addGap(7, 7, 7)\n                                .addComponent(informationSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                        .addGap(7, 7, 7)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(nameLabel)\n                            .addComponent(hashDbNameLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(typeLabel)\n                            .addComponent(hashDbTypeLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(locationLabel)\n                            .addComponent(hashDbLocationLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(indexPathLabelLabel)\n                            .addComponent(indexPathLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(indexLabel)\n                            .addComponent(hashDbIndexStatusLabel))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(indexButton)\n                        .addGap(18, 18, 18)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addComponent(optionsLabel)\n                            .addComponent(optionsSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 6, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addGap(18, 18, 18)\n                        .addComponent(sendIngestMessagesCheckBox)\n                        .addGap(18, 18, 18)\n                        .addComponent(ingestWarningLabel)\n                        .addGap(0, 0, Short.MAX_VALUE))\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 391, Short.MAX_VALUE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(importDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(createDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(deleteDatabaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n        );\n    }","commit_id":"42f62b585a2c446ed196720654c0f9303f2c6571","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        INDEXING_PROGBAR = new javax.swing.JProgressBar();\n        GO_GET_COFFEE_LABEL = new javax.swing.JLabel();\n        CURRENTLYON_LABEL = new javax.swing.JLabel();\n        CURRENTDB_LABEL = new javax.swing.JLabel();\n        CANCEL_BUTTON = new javax.swing.JButton();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n        setMinimumSize(new java.awt.Dimension(519, 130));\n        setModal(true);\n        setResizable(false);\n\n        GO_GET_COFFEE_LABEL.setDisplayedMnemonic('H');\n        org.openide.awt.Mnemonics.setLocalizedText(GO_GET_COFFEE_LABEL, org.openide.util.NbBundle.getMessage(ModalNoButtons.class, \"ModalNoButtons.GO_GET_COFFEE_LABEL.text\")); // NOI18N\n\n        CURRENTLYON_LABEL.setFont(new java.awt.Font(CURRENTLYON_LABEL.getFont().getName(), Font.PLAIN, 14));\n        org.openide.awt.Mnemonics.setLocalizedText(CURRENTLYON_LABEL, org.openide.util.NbBundle.getMessage(ModalNoButtons.class, \"ModalNoButtons.CURRENTLYON_LABEL.text\")); // NOI18N\n\n        CURRENTDB_LABEL.setFont(new java.awt.Font(CURRENTDB_LABEL.getFont().getName(), Font.PLAIN, 14));\n        org.openide.awt.Mnemonics.setLocalizedText(CURRENTDB_LABEL, org.openide.util.NbBundle.getMessage(ModalNoButtons.class, \"ModalNoButtons.CURRENTDB_LABEL.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(CANCEL_BUTTON, org.openide.util.NbBundle.getMessage(ModalNoButtons.class, \"ModalNoButtons.CANCEL_BUTTON.text\")); // NOI18N\n        CANCEL_BUTTON.addMouseListener(new java.awt.event.MouseAdapter() {\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                CANCEL_BUTTONMouseClicked(evt);\n            }\n        });\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(INDEXING_PROGBAR, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(GO_GET_COFFEE_LABEL)\n                            .addGroup(layout.createSequentialGroup()\n                                .addComponent(CURRENTLYON_LABEL)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                .addComponent(CURRENTDB_LABEL)))\n                        .addGap(0, 161, Short.MAX_VALUE))\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                        .addGap(0, 0, Short.MAX_VALUE)\n                        .addComponent(CANCEL_BUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(GO_GET_COFFEE_LABEL)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(CURRENTLYON_LABEL)\n                    .addComponent(CURRENTDB_LABEL))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(INDEXING_PROGBAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(CANCEL_BUTTON)\n                .addGap(36, 36, 36))\n        );\n\n        pack();\n    }","id":105047,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        INDEXING_PROGBAR = new javax.swing.JProgressBar();\n        GO_GET_COFFEE_LABEL = new javax.swing.JLabel();\n        CURRENTLYON_LABEL = new javax.swing.JLabel();\n        CURRENTDB_LABEL = new javax.swing.JLabel();\n        CANCEL_BUTTON = new javax.swing.JButton();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n        setMinimumSize(new java.awt.Dimension(519, 130));\n        setModal(true);\n        setResizable(false);\n\n        GO_GET_COFFEE_LABEL.setDisplayedMnemonic('H');\n        org.openide.awt.Mnemonics.setLocalizedText(GO_GET_COFFEE_LABEL, org.openide.util.NbBundle.getMessage(ModalNoButtons.class, \"ModalNoButtons.GO_GET_COFFEE_LABEL.text\")); // NOI18N\n\n        CURRENTLYON_LABEL.setFont(CURRENTLYON_LABEL.getFont().deriveFont(Font.PLAIN, 14));\n        org.openide.awt.Mnemonics.setLocalizedText(CURRENTLYON_LABEL, org.openide.util.NbBundle.getMessage(ModalNoButtons.class, \"ModalNoButtons.CURRENTLYON_LABEL.text\")); // NOI18N\n\n        CURRENTDB_LABEL.setFont(CURRENTDB_LABEL.getFont().deriveFont(Font.PLAIN, 14));\n        org.openide.awt.Mnemonics.setLocalizedText(CURRENTDB_LABEL, org.openide.util.NbBundle.getMessage(ModalNoButtons.class, \"ModalNoButtons.CURRENTDB_LABEL.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(CANCEL_BUTTON, org.openide.util.NbBundle.getMessage(ModalNoButtons.class, \"ModalNoButtons.CANCEL_BUTTON.text\")); // NOI18N\n        CANCEL_BUTTON.addMouseListener(new java.awt.event.MouseAdapter() {\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                CANCEL_BUTTONMouseClicked(evt);\n            }\n        });\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(INDEXING_PROGBAR, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(GO_GET_COFFEE_LABEL)\n                            .addGroup(layout.createSequentialGroup()\n                                .addComponent(CURRENTLYON_LABEL)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                                .addComponent(CURRENTDB_LABEL)))\n                        .addGap(0, 161, Short.MAX_VALUE))\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                        .addGap(0, 0, Short.MAX_VALUE)\n                        .addComponent(CANCEL_BUTTON, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(GO_GET_COFFEE_LABEL)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(CURRENTLYON_LABEL)\n                    .addComponent(CURRENTDB_LABEL))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(INDEXING_PROGBAR, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(CANCEL_BUTTON)\n                .addGap(36, 36, 36))\n        );\n\n        pack();\n    }","commit_id":"42f62b585a2c446ed196720654c0f9303f2c6571","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jSplitPane1 = new javax.swing.JSplitPane();\n        leftPane = new javax.swing.JScrollPane();\n        listsTable = new javax.swing.JTable();\n        rightPane = new javax.swing.JScrollPane();\n        keywordsTable = new javax.swing.JTable();\n        manageListsButton = new javax.swing.JButton();\n        searchAddButton = new javax.swing.JButton();\n        ingestIndexLabel = new javax.swing.JLabel();\n\n        leftPane.setMinimumSize(new java.awt.Dimension(150, 23));\n\n        listsTable.setBackground(new java.awt.Color(240, 240, 240));\n        listsTable.setModel(listsTableModel);\n        listsTable.setShowHorizontalLines(false);\n        listsTable.setShowVerticalLines(false);\n        listsTable.getTableHeader().setReorderingAllowed(false);\n        leftPane.setViewportView(listsTable);\n\n        jSplitPane1.setLeftComponent(leftPane);\n\n        keywordsTable.setBackground(new java.awt.Color(240, 240, 240));\n        keywordsTable.setModel(keywordsTableModel);\n        keywordsTable.setShowHorizontalLines(false);\n        keywordsTable.setShowVerticalLines(false);\n        rightPane.setViewportView(keywordsTable);\n\n        jSplitPane1.setRightComponent(rightPane);\n\n        manageListsButton.setText(org.openide.util.NbBundle.getMessage(DropdownListSearchPanel.class, \"KeywordSearchListsViewerPanel.manageListsButton.text\")); // NOI18N\n        manageListsButton.setToolTipText(org.openide.util.NbBundle.getMessage(DropdownListSearchPanel.class, \"KeywordSearchListsViewerPanel.manageListsButton.toolTipText\")); // NOI18N\n        manageListsButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                manageListsButtonActionPerformed(evt);\n            }\n        });\n\n        searchAddButton.setText(org.openide.util.NbBundle.getMessage(DropdownListSearchPanel.class, \"KeywordSearchListsViewerPanel.searchAddButton.text\")); // NOI18N\n        searchAddButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                searchAddButtonActionPerformed(evt);\n            }\n        });\n\n        ingestIndexLabel.setFont(new java.awt.Font(ingestIndexLabel.getFont().getName(), Font.PLAIN, 10));\n        ingestIndexLabel.setText(org.openide.util.NbBundle.getMessage(DropdownListSearchPanel.class, \"KeywordSearchListsViewerPanel.ingestIndexLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                        .addComponent(searchAddButton)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 220, Short.MAX_VALUE)\n                        .addComponent(manageListsButton))\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(ingestIndexLabel)\n                        .addGap(0, 317, Short.MAX_VALUE)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)\n                .addComponent(ingestIndexLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(manageListsButton)\n                    .addComponent(searchAddButton))\n                .addContainerGap())\n        );\n    }","id":105048,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jSplitPane1 = new javax.swing.JSplitPane();\n        leftPane = new javax.swing.JScrollPane();\n        listsTable = new javax.swing.JTable();\n        rightPane = new javax.swing.JScrollPane();\n        keywordsTable = new javax.swing.JTable();\n        manageListsButton = new javax.swing.JButton();\n        searchAddButton = new javax.swing.JButton();\n        ingestIndexLabel = new javax.swing.JLabel();\n\n        leftPane.setMinimumSize(new java.awt.Dimension(150, 23));\n\n        listsTable.setBackground(new java.awt.Color(240, 240, 240));\n        listsTable.setModel(listsTableModel);\n        listsTable.setShowHorizontalLines(false);\n        listsTable.setShowVerticalLines(false);\n        listsTable.getTableHeader().setReorderingAllowed(false);\n        leftPane.setViewportView(listsTable);\n\n        jSplitPane1.setLeftComponent(leftPane);\n\n        keywordsTable.setBackground(new java.awt.Color(240, 240, 240));\n        keywordsTable.setModel(keywordsTableModel);\n        keywordsTable.setShowHorizontalLines(false);\n        keywordsTable.setShowVerticalLines(false);\n        rightPane.setViewportView(keywordsTable);\n\n        jSplitPane1.setRightComponent(rightPane);\n\n        manageListsButton.setText(org.openide.util.NbBundle.getMessage(DropdownListSearchPanel.class, \"KeywordSearchListsViewerPanel.manageListsButton.text\")); // NOI18N\n        manageListsButton.setToolTipText(org.openide.util.NbBundle.getMessage(DropdownListSearchPanel.class, \"KeywordSearchListsViewerPanel.manageListsButton.toolTipText\")); // NOI18N\n        manageListsButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                manageListsButtonActionPerformed(evt);\n            }\n        });\n\n        searchAddButton.setText(org.openide.util.NbBundle.getMessage(DropdownListSearchPanel.class, \"KeywordSearchListsViewerPanel.searchAddButton.text\")); // NOI18N\n        searchAddButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                searchAddButtonActionPerformed(evt);\n            }\n        });\n\n        ingestIndexLabel.setFont(ingestIndexLabel.getFont().deriveFont(Font.PLAIN, 10));\n        ingestIndexLabel.setText(org.openide.util.NbBundle.getMessage(DropdownListSearchPanel.class, \"KeywordSearchListsViewerPanel.ingestIndexLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jSplitPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 400, Short.MAX_VALUE)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                        .addComponent(searchAddButton)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 220, Short.MAX_VALUE)\n                        .addComponent(manageListsButton))\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(ingestIndexLabel)\n                        .addGap(0, 317, Short.MAX_VALUE)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 268, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 7, Short.MAX_VALUE)\n                .addComponent(ingestIndexLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(manageListsButton)\n                    .addComponent(searchAddButton))\n                .addContainerGap())\n        );\n    }","commit_id":"b1675044bd1a1da98be24513ca81c20ec0675eaf","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        queryTypeButtonGroup = new javax.swing.ButtonGroup();\n        rightClickMenu = new javax.swing.JPopupMenu();\n        cutMenuItem = new javax.swing.JMenuItem();\n        copyMenuItem = new javax.swing.JMenuItem();\n        pasteMenuItem = new javax.swing.JMenuItem();\n        selectAllMenuItem = new javax.swing.JMenuItem();\n        keywordTextField = new javax.swing.JTextField();\n        searchButton = new javax.swing.JButton();\n        exactRadioButton = new javax.swing.JRadioButton();\n        substringRadioButton = new javax.swing.JRadioButton();\n        regexRadioButton = new javax.swing.JRadioButton();\n\n        org.openide.awt.Mnemonics.setLocalizedText(cutMenuItem, org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.cutMenuItem.text\")); // NOI18N\n        rightClickMenu.add(cutMenuItem);\n\n        org.openide.awt.Mnemonics.setLocalizedText(copyMenuItem, org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.copyMenuItem.text\")); // NOI18N\n        rightClickMenu.add(copyMenuItem);\n\n        org.openide.awt.Mnemonics.setLocalizedText(pasteMenuItem, org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.pasteMenuItem.text\")); // NOI18N\n        rightClickMenu.add(pasteMenuItem);\n\n        org.openide.awt.Mnemonics.setLocalizedText(selectAllMenuItem, org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.selectAllMenuItem.text\")); // NOI18N\n        rightClickMenu.add(selectAllMenuItem);\n\n        keywordTextField.setFont(new java.awt.Font(keywordTextField.getFont().getName(), Font.PLAIN, 14));\n        keywordTextField.setText(org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.keywordTextField.text\")); // NOI18N\n        keywordTextField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(192, 192, 192), 1, true));\n        keywordTextField.setMinimumSize(new java.awt.Dimension(2, 25));\n        keywordTextField.setPreferredSize(new java.awt.Dimension(2, 25));\n        keywordTextField.addMouseListener(new java.awt.event.MouseAdapter() {\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                keywordTextFieldMouseClicked(evt);\n            }\n        });\n        keywordTextField.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                keywordTextFieldActionPerformed(evt);\n            }\n        });\n\n        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/keywordsearch/search-icon.png\"))); // NOI18N NON-NLS\n        org.openide.awt.Mnemonics.setLocalizedText(searchButton, org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.searchButton.text\")); // NOI18N\n        searchButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                searchButtonActionPerformed(evt);\n            }\n        });\n\n        queryTypeButtonGroup.add(exactRadioButton);\n        org.openide.awt.Mnemonics.setLocalizedText(exactRadioButton, org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.exactRadioButton.text\")); // NOI18N\n\n        queryTypeButtonGroup.add(substringRadioButton);\n        substringRadioButton.setSelected(true);\n        org.openide.awt.Mnemonics.setLocalizedText(substringRadioButton, org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.substringRadioButton.text\")); // NOI18N\n\n        queryTypeButtonGroup.add(regexRadioButton);\n        org.openide.awt.Mnemonics.setLocalizedText(regexRadioButton, org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.regexRadioButton.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(5, 5, 5)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(keywordTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(searchButton))\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(exactRadioButton)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(substringRadioButton)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(regexRadioButton)\n                        .addGap(0, 27, Short.MAX_VALUE)))\n                .addGap(5, 5, 5))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(keywordTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(exactRadioButton)\n                    .addComponent(substringRadioButton)\n                    .addComponent(regexRadioButton))\n                .addContainerGap())\n        );\n    }","id":105049,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        queryTypeButtonGroup = new javax.swing.ButtonGroup();\n        rightClickMenu = new javax.swing.JPopupMenu();\n        cutMenuItem = new javax.swing.JMenuItem();\n        copyMenuItem = new javax.swing.JMenuItem();\n        pasteMenuItem = new javax.swing.JMenuItem();\n        selectAllMenuItem = new javax.swing.JMenuItem();\n        keywordTextField = new javax.swing.JTextField();\n        searchButton = new javax.swing.JButton();\n        exactRadioButton = new javax.swing.JRadioButton();\n        substringRadioButton = new javax.swing.JRadioButton();\n        regexRadioButton = new javax.swing.JRadioButton();\n\n        org.openide.awt.Mnemonics.setLocalizedText(cutMenuItem, org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.cutMenuItem.text\")); // NOI18N\n        rightClickMenu.add(cutMenuItem);\n\n        org.openide.awt.Mnemonics.setLocalizedText(copyMenuItem, org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.copyMenuItem.text\")); // NOI18N\n        rightClickMenu.add(copyMenuItem);\n\n        org.openide.awt.Mnemonics.setLocalizedText(pasteMenuItem, org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.pasteMenuItem.text\")); // NOI18N\n        rightClickMenu.add(pasteMenuItem);\n\n        org.openide.awt.Mnemonics.setLocalizedText(selectAllMenuItem, org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.selectAllMenuItem.text\")); // NOI18N\n        rightClickMenu.add(selectAllMenuItem);\n\n        keywordTextField.setFont(keywordTextField.getFont().deriveFont(Font.PLAIN, 14));\n        keywordTextField.setText(org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.keywordTextField.text\")); // NOI18N\n        keywordTextField.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(192, 192, 192), 1, true));\n        keywordTextField.setMinimumSize(new java.awt.Dimension(2, 25));\n        keywordTextField.setPreferredSize(new java.awt.Dimension(2, 25));\n        keywordTextField.addMouseListener(new java.awt.event.MouseAdapter() {\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                keywordTextFieldMouseClicked(evt);\n            }\n        });\n        keywordTextField.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                keywordTextFieldActionPerformed(evt);\n            }\n        });\n\n        searchButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/keywordsearch/search-icon.png\"))); // NOI18N NON-NLS\n        org.openide.awt.Mnemonics.setLocalizedText(searchButton, org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.searchButton.text\")); // NOI18N\n        searchButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                searchButtonActionPerformed(evt);\n            }\n        });\n\n        queryTypeButtonGroup.add(exactRadioButton);\n        org.openide.awt.Mnemonics.setLocalizedText(exactRadioButton, org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.exactRadioButton.text\")); // NOI18N\n\n        queryTypeButtonGroup.add(substringRadioButton);\n        substringRadioButton.setSelected(true);\n        org.openide.awt.Mnemonics.setLocalizedText(substringRadioButton, org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.substringRadioButton.text\")); // NOI18N\n\n        queryTypeButtonGroup.add(regexRadioButton);\n        org.openide.awt.Mnemonics.setLocalizedText(regexRadioButton, org.openide.util.NbBundle.getMessage(DropdownSingleTermSearchPanel.class, \"DropdownSearchPanel.regexRadioButton.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(5, 5, 5)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(keywordTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(searchButton))\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(exactRadioButton)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(substringRadioButton)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(regexRadioButton)\n                        .addGap(0, 27, Short.MAX_VALUE)))\n                .addGap(5, 5, 5))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(keywordTextField, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(searchButton, javax.swing.GroupLayout.DEFAULT_SIZE, 26, Short.MAX_VALUE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(exactRadioButton)\n                    .addComponent(substringRadioButton)\n                    .addComponent(regexRadioButton))\n                .addContainerGap())\n        );\n    }","commit_id":"b1675044bd1a1da98be24513ca81c20ec0675eaf","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n        public void actionPerformed(ActionEvent e) {\n            final JFrame frame = new JFrame(title);\n            final JDialog popUpWindow = new JDialog(frame, title, true); // to make the popUp Window to be modal\n\n            Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();\n\n            // set the popUp window / JFrame\n            popUpWindow.setSize(800, 400);\n\n            int w = popUpWindow.getSize().width;\n            int h = popUpWindow.getSize().height;\n\n            // set the location of the popUp Window on the center of the screen\n            popUpWindow.setLocation((screenDimension.width - w) / 2, (screenDimension.height - h) / 2);\n\n            VolumeDetailsPanel volumeDetailPanel = new VolumeDetailsPanel();\n            Boolean counter = false;\n\n            volumeDetailPanel.setVolumeIDValue(Long.toString(vol.getAddr()));\n            volumeDetailPanel.setStartValue(Long.toString(vol.getStart()));\n            volumeDetailPanel.setLengthValue(Long.toString(vol.getLength()));\n            volumeDetailPanel.setDescValue(vol.getDescription());\n            volumeDetailPanel.setFlagsValue(vol.getFlagsAsString());\n            counter = true;\n\n            if (counter) {\n                // add the volume detail panel to the popUp window\n                popUpWindow.add(volumeDetailPanel);\n            } else {\n                // error handler if no volume matches\n                JLabel error = new JLabel(\n                        NbBundle.getMessage(this.getClass(), \"ExplorerNodeActionVisitor.volDetail.noVolMatchErr\"));\n                error.setFont(new Font(error.getFont().getName(), Font.BOLD, 24));\n                popUpWindow.add(error);\n            }\n\n            // add the command to close the window to the button on the Volume Detail Panel\n            volumeDetailPanel.setOKButtonActionListener(new ActionListener() {\n                @Override\n                public void actionPerformed(ActionEvent e) {\n                    popUpWindow.dispose();\n                }\n            });\n            popUpWindow.pack();\n            popUpWindow.setResizable(false);\n            popUpWindow.setVisible(true);\n\n        }","id":105050,"modified_method":"@Override\n        public void actionPerformed(ActionEvent e) {\n            final JFrame frame = new JFrame(title);\n            final JDialog popUpWindow = new JDialog(frame, title, true); // to make the popUp Window to be modal\n\n            Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();\n\n            // set the popUp window / JFrame\n            popUpWindow.setSize(800, 400);\n\n            int w = popUpWindow.getSize().width;\n            int h = popUpWindow.getSize().height;\n\n            // set the location of the popUp Window on the center of the screen\n            popUpWindow.setLocation((screenDimension.width - w) / 2, (screenDimension.height - h) / 2);\n\n            VolumeDetailsPanel volumeDetailPanel = new VolumeDetailsPanel();\n            Boolean counter = false;\n\n            volumeDetailPanel.setVolumeIDValue(Long.toString(vol.getAddr()));\n            volumeDetailPanel.setStartValue(Long.toString(vol.getStart()));\n            volumeDetailPanel.setLengthValue(Long.toString(vol.getLength()));\n            volumeDetailPanel.setDescValue(vol.getDescription());\n            volumeDetailPanel.setFlagsValue(vol.getFlagsAsString());\n            counter = true;\n\n            if (counter) {\n                // add the volume detail panel to the popUp window\n                popUpWindow.add(volumeDetailPanel);\n            } else {\n                // error handler if no volume matches\n                JLabel error = new JLabel(\n                        NbBundle.getMessage(this.getClass(), \"ExplorerNodeActionVisitor.volDetail.noVolMatchErr\"));\n                error.setFont(error.getFont().deriveFont(Font.BOLD, 24));\n                popUpWindow.add(error);\n            }\n\n            // add the command to close the window to the button on the Volume Detail Panel\n            volumeDetailPanel.setOKButtonActionListener(new ActionListener() {\n                @Override\n                public void actionPerformed(ActionEvent e) {\n                    popUpWindow.dispose();\n                }\n            });\n            popUpWindow.pack();\n            popUpWindow.setResizable(false);\n            popUpWindow.setVisible(true);\n\n        }","commit_id":"42074d766c7fec7f2a053c5f94444365dbcd7b64","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n        public void actionPerformed(ActionEvent e) {\n            final JFrame frame = new JFrame(title);\n            final JDialog popUpWindow = new JDialog(frame, title, true); // to make the popUp Window to be modal\n            // if we select the Image Details menu\n\n            Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();\n\n            // set the popUp window / JFrame\n            popUpWindow.setSize(750, 400);\n\n            int w = popUpWindow.getSize().width;\n            int h = popUpWindow.getSize().height;\n\n            // set the location of the popUp Window on the center of the screen\n            popUpWindow.setLocation((screenDimension.width - w) / 2, (screenDimension.height - h) / 2);\n\n            ImageDetailsPanel imgDetailPanel = new ImageDetailsPanel();\n            Boolean counter = false;\n\n            imgDetailPanel.setImgNameValue(img.getName());\n            imgDetailPanel.setImgTypeValue(img.getType().getName());\n            imgDetailPanel.setImgSectorSizeValue(Long.toString(img.getSsize()));\n            imgDetailPanel.setImgTotalSizeValue(Long.toString(img.getSize()));\n            String hash=img.getMd5();\n            // don't show the hash if there isn't one\n            imgDetailPanel.setVisibleHashInfo(hash != null);\n            imgDetailPanel.setImgHashValue(hash);\n            \n            \n            counter = true;\n\n            if (counter) {\n                // add the volume detail panel to the popUp window\n                popUpWindow.add(imgDetailPanel);\n            } else {\n                // error handler if no volume matches\n                JLabel error = new JLabel(\n                        NbBundle.getMessage(this.getClass(), \"ExplorerNodeActionVisitor.imgDetail.noVolMatchesErr\"));\n                error.setFont(new Font(error.getFont().getName(), Font.BOLD, 24));\n                popUpWindow.add(error);\n            }\n\n            // add the command to close the window to the button on the Volume Detail Panel\n            imgDetailPanel.setOKButtonActionListener(new ActionListener() {\n                @Override\n                public void actionPerformed(ActionEvent e) {\n                    popUpWindow.dispose();\n                }\n            });\n\n\n            popUpWindow.pack();\n            popUpWindow.setResizable(false);\n            popUpWindow.setVisible(true);\n        }","id":105051,"modified_method":"@Override\n        public void actionPerformed(ActionEvent e) {\n            final JFrame frame = new JFrame(title);\n            final JDialog popUpWindow = new JDialog(frame, title, true); // to make the popUp Window to be modal\n            // if we select the Image Details menu\n\n            Dimension screenDimension = Toolkit.getDefaultToolkit().getScreenSize();\n\n            // set the popUp window / JFrame\n            popUpWindow.setSize(750, 400);\n\n            int w = popUpWindow.getSize().width;\n            int h = popUpWindow.getSize().height;\n\n            // set the location of the popUp Window on the center of the screen\n            popUpWindow.setLocation((screenDimension.width - w) / 2, (screenDimension.height - h) / 2);\n\n            ImageDetailsPanel imgDetailPanel = new ImageDetailsPanel();\n            Boolean counter = false;\n\n            imgDetailPanel.setImgNameValue(img.getName());\n            imgDetailPanel.setImgTypeValue(img.getType().getName());\n            imgDetailPanel.setImgSectorSizeValue(Long.toString(img.getSsize()));\n            imgDetailPanel.setImgTotalSizeValue(Long.toString(img.getSize()));\n            String hash=img.getMd5();\n            // don't show the hash if there isn't one\n            imgDetailPanel.setVisibleHashInfo(hash != null);\n            imgDetailPanel.setImgHashValue(hash);\n            \n            \n            counter = true;\n\n            if (counter) {\n                // add the volume detail panel to the popUp window\n                popUpWindow.add(imgDetailPanel);\n            } else {\n                // error handler if no volume matches\n                JLabel error = new JLabel(\n                        NbBundle.getMessage(this.getClass(), \"ExplorerNodeActionVisitor.imgDetail.noVolMatchesErr\"));\n                error.setFont(error.getFont().deriveFont(Font.BOLD, 24));\n                popUpWindow.add(error);\n            }\n\n            // add the command to close the window to the button on the Volume Detail Panel\n            imgDetailPanel.setOKButtonActionListener(new ActionListener() {\n                @Override\n                public void actionPerformed(ActionEvent e) {\n                    popUpWindow.dispose();\n                }\n            });\n\n\n            popUpWindow.pack();\n            popUpWindow.setResizable(false);\n            popUpWindow.setVisible(true);\n        }","commit_id":"42074d766c7fec7f2a053c5f94444365dbcd7b64","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/** \n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        OKButton = new javax.swing.JButton();\n        jSplitPane1 = new javax.swing.JSplitPane();\n        genInfoPanel = new javax.swing.JPanel();\n        fsTypeLabel = new javax.swing.JLabel();\n        imgOffsetLabel = new javax.swing.JLabel();\n        volumeIDLabel = new javax.swing.JLabel();\n        blockSizeLabel = new javax.swing.JLabel();\n        blockCountLabel = new javax.swing.JLabel();\n        rootInumLabel = new javax.swing.JLabel();\n        firstInumLabel = new javax.swing.JLabel();\n        lastInumLabel = new javax.swing.JLabel();\n        fsTypeValue = new javax.swing.JLabel();\n        imgOffsetValue = new javax.swing.JLabel();\n        volumeIDValue = new javax.swing.JLabel();\n        blockSizeValue = new javax.swing.JLabel();\n        blockCountValue = new javax.swing.JLabel();\n        rootInumValue = new javax.swing.JLabel();\n        firstInumValue = new javax.swing.JLabel();\n        lastInumValue = new javax.swing.JLabel();\n        genInfoLabel = new javax.swing.JLabel();\n        jSeparator1 = new javax.swing.JSeparator();\n        jLabel2 = new javax.swing.JLabel();\n        jLabel3 = new javax.swing.JLabel();\n        detailInfoPanel = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n\n        OKButton.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.OKButton.text\")); // NOI18N\n\n        jSplitPane1.setDividerLocation(180);\n        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);\n\n        genInfoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n        genInfoPanel.setPreferredSize(new java.awt.Dimension(815, 170));\n\n        fsTypeLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.fsTypeLabel.text\")); // NOI18N\n\n        imgOffsetLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.imgOffsetLabel.text\")); // NOI18N\n\n        volumeIDLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.volumeIDLabel.text\")); // NOI18N\n\n        blockSizeLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.blockSizeLabel.text\")); // NOI18N\n\n        blockCountLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.blockCountLabel.text\")); // NOI18N\n\n        rootInumLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.rootInumLabel.text\")); // NOI18N\n\n        firstInumLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.firstInumLabel.text\")); // NOI18N\n\n        lastInumLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.lastInumLabel.text\")); // NOI18N\n\n        fsTypeValue.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.fsTypeValue.text\")); // NOI18N\n\n        imgOffsetValue.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.imgOffsetValue.text\")); // NOI18N\n\n        volumeIDValue.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.volumeIDValue.text\")); // NOI18N\n\n        blockSizeValue.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.blockSizeValue.text\")); // NOI18N\n\n        blockCountValue.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.blockCountValue.text\")); // NOI18N\n\n        rootInumValue.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.rootInumValue.text\")); // NOI18N\n\n        firstInumValue.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.firstInumValue.text\")); // NOI18N\n\n        lastInumValue.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.lastInumValue.text\")); // NOI18N\n\n        genInfoLabel.setFont(new java.awt.Font(genInfoLabel.getFont().getName(), Font.BOLD, 18));\n        genInfoLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.genInfoLabel.text\")); // NOI18N\n\n        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);\n\n        jLabel2.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.jLabel2.text\")); // NOI18N\n\n        jLabel3.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.jLabel3.text\")); // NOI18N\n\n        javax.swing.GroupLayout genInfoPanelLayout = new javax.swing.GroupLayout(genInfoPanel);\n        genInfoPanel.setLayout(genInfoPanelLayout);\n        genInfoPanelLayout.setHorizontalGroup(\n            genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(genInfoPanelLayout.createSequentialGroup()\n                .addGap(95, 95, 95)\n                .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(fsTypeLabel)\n                    .addComponent(imgOffsetLabel)\n                    .addComponent(volumeIDLabel)\n                    .addComponent(blockSizeLabel))\n                .addGap(108, 108, 108)\n                .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(genInfoLabel)\n                    .addGroup(genInfoPanelLayout.createSequentialGroup()\n                        .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(blockSizeValue)\n                            .addComponent(volumeIDValue)\n                            .addComponent(imgOffsetValue)\n                            .addComponent(fsTypeValue))\n                        .addGap(31, 31, 31)\n                        .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel2)\n                            .addComponent(jLabel3))\n                        .addGap(33, 33, 33)\n                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGap(31, 31, 31)\n                        .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(blockCountLabel)\n                            .addComponent(rootInumLabel)\n                            .addComponent(firstInumLabel)\n                            .addComponent(lastInumLabel))\n                        .addGap(111, 111, 111)\n                        .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(lastInumValue)\n                            .addComponent(firstInumValue)\n                            .addComponent(rootInumValue)\n                            .addComponent(blockCountValue))))\n                .addGap(245, 245, 245))\n        );\n        genInfoPanelLayout.setVerticalGroup(\n            genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, genInfoPanelLayout.createSequentialGroup()\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(genInfoLabel)\n                .addGap(18, 18, 18)\n                .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                        .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(genInfoPanelLayout.createSequentialGroup()\n                                .addComponent(fsTypeLabel)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addComponent(imgOffsetLabel)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addComponent(volumeIDLabel)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addComponent(blockSizeLabel))\n                            .addGroup(genInfoPanelLayout.createSequentialGroup()\n                                .addComponent(fsTypeValue)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                    .addComponent(imgOffsetValue)\n                                    .addComponent(jLabel2))\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addComponent(volumeIDValue)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                    .addComponent(blockSizeValue)\n                                    .addComponent(jLabel3))))\n                        .addGroup(genInfoPanelLayout.createSequentialGroup()\n                            .addComponent(blockCountValue)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(rootInumValue)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(firstInumValue)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(lastInumValue))\n                        .addGroup(genInfoPanelLayout.createSequentialGroup()\n                            .addComponent(blockCountLabel)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(rootInumLabel)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(firstInumLabel)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(lastInumLabel)))\n                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n\n        jSplitPane1.setTopComponent(genInfoPanel);\n\n        detailInfoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n        detailInfoPanel.setPreferredSize(new java.awt.Dimension(516, 293));\n\n        jLabel1.setFont(new java.awt.Font(jLabel1.getFont().getName(), Font.BOLD, 18));\n        jLabel1.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.jLabel1.text\")); // NOI18N\n\n        javax.swing.GroupLayout detailInfoPanelLayout = new javax.swing.GroupLayout(detailInfoPanel);\n        detailInfoPanel.setLayout(detailInfoPanelLayout);\n        detailInfoPanelLayout.setHorizontalGroup(\n            detailInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailInfoPanelLayout.createSequentialGroup()\n                .addContainerGap(278, Short.MAX_VALUE)\n                .addComponent(jLabel1)\n                .addGap(276, 276, 276))\n        );\n        detailInfoPanelLayout.setVerticalGroup(\n            detailInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(detailInfoPanelLayout.createSequentialGroup()\n                .addGap(23, 23, 23)\n                .addComponent(jLabel1)\n                .addContainerGap(259, Short.MAX_VALUE))\n        );\n\n        jSplitPane1.setRightComponent(detailInfoPanel);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(367, 367, 367)\n                        .addComponent(OKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addGroup(layout.createSequentialGroup()\n                        .addContainerGap()\n                        .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 786, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(18, 18, 18)\n                .addComponent(OKButton)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n    }","id":105052,"modified_method":"/** \n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        OKButton = new javax.swing.JButton();\n        jSplitPane1 = new javax.swing.JSplitPane();\n        genInfoPanel = new javax.swing.JPanel();\n        fsTypeLabel = new javax.swing.JLabel();\n        imgOffsetLabel = new javax.swing.JLabel();\n        volumeIDLabel = new javax.swing.JLabel();\n        blockSizeLabel = new javax.swing.JLabel();\n        blockCountLabel = new javax.swing.JLabel();\n        rootInumLabel = new javax.swing.JLabel();\n        firstInumLabel = new javax.swing.JLabel();\n        lastInumLabel = new javax.swing.JLabel();\n        fsTypeValue = new javax.swing.JLabel();\n        imgOffsetValue = new javax.swing.JLabel();\n        volumeIDValue = new javax.swing.JLabel();\n        blockSizeValue = new javax.swing.JLabel();\n        blockCountValue = new javax.swing.JLabel();\n        rootInumValue = new javax.swing.JLabel();\n        firstInumValue = new javax.swing.JLabel();\n        lastInumValue = new javax.swing.JLabel();\n        genInfoLabel = new javax.swing.JLabel();\n        jSeparator1 = new javax.swing.JSeparator();\n        jLabel2 = new javax.swing.JLabel();\n        jLabel3 = new javax.swing.JLabel();\n        detailInfoPanel = new javax.swing.JPanel();\n        jLabel1 = new javax.swing.JLabel();\n\n        OKButton.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.OKButton.text\")); // NOI18N\n\n        jSplitPane1.setDividerLocation(180);\n        jSplitPane1.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);\n\n        genInfoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n        genInfoPanel.setPreferredSize(new java.awt.Dimension(815, 170));\n\n        fsTypeLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.fsTypeLabel.text\")); // NOI18N\n\n        imgOffsetLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.imgOffsetLabel.text\")); // NOI18N\n\n        volumeIDLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.volumeIDLabel.text\")); // NOI18N\n\n        blockSizeLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.blockSizeLabel.text\")); // NOI18N\n\n        blockCountLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.blockCountLabel.text\")); // NOI18N\n\n        rootInumLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.rootInumLabel.text\")); // NOI18N\n\n        firstInumLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.firstInumLabel.text\")); // NOI18N\n\n        lastInumLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.lastInumLabel.text\")); // NOI18N\n\n        fsTypeValue.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.fsTypeValue.text\")); // NOI18N\n\n        imgOffsetValue.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.imgOffsetValue.text\")); // NOI18N\n\n        volumeIDValue.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.volumeIDValue.text\")); // NOI18N\n\n        blockSizeValue.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.blockSizeValue.text\")); // NOI18N\n\n        blockCountValue.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.blockCountValue.text\")); // NOI18N\n\n        rootInumValue.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.rootInumValue.text\")); // NOI18N\n\n        firstInumValue.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.firstInumValue.text\")); // NOI18N\n\n        lastInumValue.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.lastInumValue.text\")); // NOI18N\n\n        genInfoLabel.setFont(genInfoLabel.getFont().deriveFont(Font.BOLD, 18));\n        genInfoLabel.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.genInfoLabel.text\")); // NOI18N\n\n        jSeparator1.setOrientation(javax.swing.SwingConstants.VERTICAL);\n\n        jLabel2.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.jLabel2.text\")); // NOI18N\n\n        jLabel3.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.jLabel3.text\")); // NOI18N\n\n        javax.swing.GroupLayout genInfoPanelLayout = new javax.swing.GroupLayout(genInfoPanel);\n        genInfoPanel.setLayout(genInfoPanelLayout);\n        genInfoPanelLayout.setHorizontalGroup(\n            genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(genInfoPanelLayout.createSequentialGroup()\n                .addGap(95, 95, 95)\n                .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(fsTypeLabel)\n                    .addComponent(imgOffsetLabel)\n                    .addComponent(volumeIDLabel)\n                    .addComponent(blockSizeLabel))\n                .addGap(108, 108, 108)\n                .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(genInfoLabel)\n                    .addGroup(genInfoPanelLayout.createSequentialGroup()\n                        .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(blockSizeValue)\n                            .addComponent(volumeIDValue)\n                            .addComponent(imgOffsetValue)\n                            .addComponent(fsTypeValue))\n                        .addGap(31, 31, 31)\n                        .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(jLabel2)\n                            .addComponent(jLabel3))\n                        .addGap(33, 33, 33)\n                        .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGap(31, 31, 31)\n                        .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(blockCountLabel)\n                            .addComponent(rootInumLabel)\n                            .addComponent(firstInumLabel)\n                            .addComponent(lastInumLabel))\n                        .addGap(111, 111, 111)\n                        .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(lastInumValue)\n                            .addComponent(firstInumValue)\n                            .addComponent(rootInumValue)\n                            .addComponent(blockCountValue))))\n                .addGap(245, 245, 245))\n        );\n        genInfoPanelLayout.setVerticalGroup(\n            genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, genInfoPanelLayout.createSequentialGroup()\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(genInfoLabel)\n                .addGap(18, 18, 18)\n                .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                        .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(genInfoPanelLayout.createSequentialGroup()\n                                .addComponent(fsTypeLabel)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addComponent(imgOffsetLabel)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addComponent(volumeIDLabel)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addComponent(blockSizeLabel))\n                            .addGroup(genInfoPanelLayout.createSequentialGroup()\n                                .addComponent(fsTypeValue)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                    .addComponent(imgOffsetValue)\n                                    .addComponent(jLabel2))\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addComponent(volumeIDValue)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addGroup(genInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                                    .addComponent(blockSizeValue)\n                                    .addComponent(jLabel3))))\n                        .addGroup(genInfoPanelLayout.createSequentialGroup()\n                            .addComponent(blockCountValue)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(rootInumValue)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(firstInumValue)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(lastInumValue))\n                        .addGroup(genInfoPanelLayout.createSequentialGroup()\n                            .addComponent(blockCountLabel)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(rootInumLabel)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(firstInumLabel)\n                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                            .addComponent(lastInumLabel)))\n                    .addComponent(jSeparator1, javax.swing.GroupLayout.DEFAULT_SIZE, 89, Short.MAX_VALUE))\n                .addContainerGap())\n        );\n\n        jSplitPane1.setTopComponent(genInfoPanel);\n\n        detailInfoPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());\n        detailInfoPanel.setPreferredSize(new java.awt.Dimension(516, 293));\n\n        jLabel1.setFont(jLabel1.getFont().deriveFont(Font.BOLD, 18));\n        jLabel1.setText(org.openide.util.NbBundle.getMessage(FileSystemDetailsPanel.class, \"FileSystemDetailsPanel.jLabel1.text\")); // NOI18N\n\n        javax.swing.GroupLayout detailInfoPanelLayout = new javax.swing.GroupLayout(detailInfoPanel);\n        detailInfoPanel.setLayout(detailInfoPanelLayout);\n        detailInfoPanelLayout.setHorizontalGroup(\n            detailInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, detailInfoPanelLayout.createSequentialGroup()\n                .addContainerGap(278, Short.MAX_VALUE)\n                .addComponent(jLabel1)\n                .addGap(276, 276, 276))\n        );\n        detailInfoPanelLayout.setVerticalGroup(\n            detailInfoPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(detailInfoPanelLayout.createSequentialGroup()\n                .addGap(23, 23, 23)\n                .addComponent(jLabel1)\n                .addContainerGap(259, Short.MAX_VALUE))\n        );\n\n        jSplitPane1.setRightComponent(detailInfoPanel);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(367, 367, 367)\n                        .addComponent(OKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addGroup(layout.createSequentialGroup()\n                        .addContainerGap()\n                        .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 786, javax.swing.GroupLayout.PREFERRED_SIZE)))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jSplitPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(18, 18, 18)\n                .addComponent(OKButton)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n    }","commit_id":"42074d766c7fec7f2a053c5f94444365dbcd7b64","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        imageInfoLabel = new javax.swing.JLabel();\n        imgNameLabel = new javax.swing.JLabel();\n        imgTypeLabel = new javax.swing.JLabel();\n        imgSectorSizeLabel = new javax.swing.JLabel();\n        imgNameValue = new javax.swing.JLabel();\n        imgTypeValue = new javax.swing.JLabel();\n        imgSectorSizeValue = new javax.swing.JLabel();\n        OKButton = new javax.swing.JButton();\n        imgTotalSizeLabel = new javax.swing.JLabel();\n        imgTotalSizeValue = new javax.swing.JLabel();\n        imgHashLabel = new javax.swing.JLabel();\n        imgHashValue = new javax.swing.JLabel();\n\n        imageInfoLabel.setFont(new java.awt.Font(imageInfoLabel.getFont().getName(), Font.BOLD, 18));\n        imageInfoLabel.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imageInfoLabel.text\")); // NOI18N\n\n        imgNameLabel.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgNameLabel.text\")); // NOI18N\n\n        imgTypeLabel.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgTypeLabel.text\")); // NOI18N\n\n        imgSectorSizeLabel.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgSectorSizeLabel.text\")); // NOI18N\n\n        imgNameValue.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgNameValue.text\")); // NOI18N\n\n        imgTypeValue.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgTypeValue.text\")); // NOI18N\n\n        imgSectorSizeValue.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgSectorSizeValue.text\")); // NOI18N\n\n        OKButton.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.OKButton.text\")); // NOI18N\n\n        imgTotalSizeLabel.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgTotalSizeLabel.text\")); // NOI18N\n\n        imgTotalSizeValue.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgTotalSizeValue.text\")); // NOI18N\n\n        imgHashLabel.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgHashLabel.text\")); // NOI18N\n\n        imgHashValue.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgHashValue.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(0, 68, Short.MAX_VALUE)\n                .addComponent(imageInfoLabel)\n                .addContainerGap(78, Short.MAX_VALUE))\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(imgNameLabel)\n                    .addComponent(imgTypeLabel)\n                    .addComponent(imgSectorSizeLabel)\n                    .addComponent(imgTotalSizeLabel)\n                    .addComponent(imgHashLabel))\n                .addGap(18, 18, 18)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(imgNameValue)\n                    .addComponent(imgTypeValue)\n                    .addComponent(imgSectorSizeValue)\n                    .addComponent(imgTotalSizeValue)\n                    .addComponent(imgHashValue))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(OKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(38, 38, 38)\n                .addComponent(imageInfoLabel)\n                .addGap(18, 18, 18)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(imgNameValue)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(imgTypeValue)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(imgSectorSizeValue)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(imgTotalSizeValue)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(imgHashValue))\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addGroup(layout.createSequentialGroup()\n                                .addComponent(imgNameLabel)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addComponent(imgTypeLabel)\n                                .addGap(25, 25, 25))\n                            .addGroup(layout.createSequentialGroup()\n                                .addGap(50, 50, 50)\n                                .addComponent(imgSectorSizeLabel)))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(imgTotalSizeLabel)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(imgHashLabel)))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)\n                .addComponent(OKButton)\n                .addContainerGap())\n        );\n    }","id":105053,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        imageInfoLabel = new javax.swing.JLabel();\n        imgNameLabel = new javax.swing.JLabel();\n        imgTypeLabel = new javax.swing.JLabel();\n        imgSectorSizeLabel = new javax.swing.JLabel();\n        imgNameValue = new javax.swing.JLabel();\n        imgTypeValue = new javax.swing.JLabel();\n        imgSectorSizeValue = new javax.swing.JLabel();\n        OKButton = new javax.swing.JButton();\n        imgTotalSizeLabel = new javax.swing.JLabel();\n        imgTotalSizeValue = new javax.swing.JLabel();\n        imgHashLabel = new javax.swing.JLabel();\n        imgHashValue = new javax.swing.JLabel();\n\n        imageInfoLabel.setFont(imageInfoLabel.getFont().deriveFont(Font.BOLD, 18));\n        imageInfoLabel.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imageInfoLabel.text\")); // NOI18N\n\n        imgNameLabel.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgNameLabel.text\")); // NOI18N\n\n        imgTypeLabel.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgTypeLabel.text\")); // NOI18N\n\n        imgSectorSizeLabel.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgSectorSizeLabel.text\")); // NOI18N\n\n        imgNameValue.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgNameValue.text\")); // NOI18N\n\n        imgTypeValue.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgTypeValue.text\")); // NOI18N\n\n        imgSectorSizeValue.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgSectorSizeValue.text\")); // NOI18N\n\n        OKButton.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.OKButton.text\")); // NOI18N\n\n        imgTotalSizeLabel.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgTotalSizeLabel.text\")); // NOI18N\n\n        imgTotalSizeValue.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgTotalSizeValue.text\")); // NOI18N\n\n        imgHashLabel.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgHashLabel.text\")); // NOI18N\n\n        imgHashValue.setText(org.openide.util.NbBundle.getMessage(ImageDetailsPanel.class, \"ImageDetailsPanel.imgHashValue.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(0, 68, Short.MAX_VALUE)\n                .addComponent(imageInfoLabel)\n                .addContainerGap(78, Short.MAX_VALUE))\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(imgNameLabel)\n                    .addComponent(imgTypeLabel)\n                    .addComponent(imgSectorSizeLabel)\n                    .addComponent(imgTotalSizeLabel)\n                    .addComponent(imgHashLabel))\n                .addGap(18, 18, 18)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(imgNameValue)\n                    .addComponent(imgTypeValue)\n                    .addComponent(imgSectorSizeValue)\n                    .addComponent(imgTotalSizeValue)\n                    .addComponent(imgHashValue))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(OKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(38, 38, 38)\n                .addComponent(imageInfoLabel)\n                .addGap(18, 18, 18)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(imgNameValue)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(imgTypeValue)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(imgSectorSizeValue)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(imgTotalSizeValue)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(imgHashValue))\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addGroup(layout.createSequentialGroup()\n                                .addComponent(imgNameLabel)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addComponent(imgTypeLabel)\n                                .addGap(25, 25, 25))\n                            .addGroup(layout.createSequentialGroup()\n                                .addGap(50, 50, 50)\n                                .addComponent(imgSectorSizeLabel)))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(imgTotalSizeLabel)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(imgHashLabel)))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 64, Short.MAX_VALUE)\n                .addComponent(OKButton)\n                .addContainerGap())\n        );\n    }","commit_id":"42074d766c7fec7f2a053c5f94444365dbcd7b64","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/** \n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always \n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jPanel1 = new javax.swing.JPanel();\n        flagsValue = new javax.swing.JLabel();\n        descValue = new javax.swing.JLabel();\n        lengthValue = new javax.swing.JLabel();\n        startValue = new javax.swing.JLabel();\n        startLabel = new javax.swing.JLabel();\n        lengthLabel = new javax.swing.JLabel();\n        jLabel1 = new javax.swing.JLabel();\n        volumeIDLabel = new javax.swing.JLabel();\n        volumeIDValue = new javax.swing.JLabel();\n        descLabel = new javax.swing.JLabel();\n        flagsLabel = new javax.swing.JLabel();\n        OKButton = new javax.swing.JButton();\n\n        flagsValue.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.flagsValue.text\")); // NOI18N\n\n        descValue.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.descValue.text\")); // NOI18N\n\n        lengthValue.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.lengthValue.text\")); // NOI18N\n\n        startValue.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.startValue.text\")); // NOI18N\n\n        startLabel.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.startLabel.text\")); // NOI18N\n\n        lengthLabel.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.lengthLabel.text\")); // NOI18N\n\n        jLabel1.setFont(new java.awt.Font(jLabel1.getFont().getName(), Font.BOLD, 18));\n        jLabel1.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.jLabel1.text\")); // NOI18N\n\n        volumeIDLabel.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.volumeIDLabel.text\")); // NOI18N\n\n        volumeIDValue.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.volumeIDValue.text\")); // NOI18N\n\n        descLabel.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.descLabel.text\")); // NOI18N\n\n        flagsLabel.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.flagsLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGap(112, 112, 112)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(startLabel)\n                            .addComponent(volumeIDLabel)\n                            .addComponent(lengthLabel)\n                            .addComponent(descLabel)\n                            .addComponent(flagsLabel))\n                        .addGap(18, 18, 18)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(flagsValue)\n                            .addComponent(descValue)\n                            .addComponent(lengthValue)\n                            .addComponent(startValue)\n                            .addComponent(volumeIDValue)))\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGap(59, 59, 59)\n                        .addComponent(jLabel1)))\n                .addContainerGap(58, Short.MAX_VALUE))\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(11, 11, 11)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(volumeIDLabel)\n                    .addComponent(volumeIDValue))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(startLabel)\n                    .addComponent(startValue))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(lengthLabel)\n                    .addComponent(lengthValue))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addComponent(descLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(flagsLabel)\n                            .addComponent(flagsValue)))\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addComponent(descValue)\n                        .addGap(25, 25, 25)))\n                .addContainerGap(15, Short.MAX_VALUE))\n        );\n\n        OKButton.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.OKButton.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addContainerGap())\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                        .addComponent(OKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGap(145, 145, 145))))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addGap(18, 18, 18)\n                .addComponent(OKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n        );\n    }","id":105054,"modified_method":"/** \n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always \n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jPanel1 = new javax.swing.JPanel();\n        flagsValue = new javax.swing.JLabel();\n        descValue = new javax.swing.JLabel();\n        lengthValue = new javax.swing.JLabel();\n        startValue = new javax.swing.JLabel();\n        startLabel = new javax.swing.JLabel();\n        lengthLabel = new javax.swing.JLabel();\n        jLabel1 = new javax.swing.JLabel();\n        volumeIDLabel = new javax.swing.JLabel();\n        volumeIDValue = new javax.swing.JLabel();\n        descLabel = new javax.swing.JLabel();\n        flagsLabel = new javax.swing.JLabel();\n        OKButton = new javax.swing.JButton();\n\n        flagsValue.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.flagsValue.text\")); // NOI18N\n\n        descValue.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.descValue.text\")); // NOI18N\n\n        lengthValue.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.lengthValue.text\")); // NOI18N\n\n        startValue.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.startValue.text\")); // NOI18N\n\n        startLabel.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.startLabel.text\")); // NOI18N\n\n        lengthLabel.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.lengthLabel.text\")); // NOI18N\n\n        jLabel1.setFont(jLabel1.getFont().deriveFont(Font.BOLD, 18));\n        jLabel1.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.jLabel1.text\")); // NOI18N\n\n        volumeIDLabel.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.volumeIDLabel.text\")); // NOI18N\n\n        volumeIDValue.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.volumeIDValue.text\")); // NOI18N\n\n        descLabel.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.descLabel.text\")); // NOI18N\n\n        flagsLabel.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.flagsLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGap(112, 112, 112)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(startLabel)\n                            .addComponent(volumeIDLabel)\n                            .addComponent(lengthLabel)\n                            .addComponent(descLabel)\n                            .addComponent(flagsLabel))\n                        .addGap(18, 18, 18)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(flagsValue)\n                            .addComponent(descValue)\n                            .addComponent(lengthValue)\n                            .addComponent(startValue)\n                            .addComponent(volumeIDValue)))\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addGap(59, 59, 59)\n                        .addComponent(jLabel1)))\n                .addContainerGap(58, Short.MAX_VALUE))\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(11, 11, 11)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(volumeIDLabel)\n                    .addComponent(volumeIDValue))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(startLabel)\n                    .addComponent(startValue))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(lengthLabel)\n                    .addComponent(lengthValue))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addComponent(descLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(flagsLabel)\n                            .addComponent(flagsValue)))\n                    .addGroup(jPanel1Layout.createSequentialGroup()\n                        .addComponent(descValue)\n                        .addGap(25, 25, 25)))\n                .addContainerGap(15, Short.MAX_VALUE))\n        );\n\n        OKButton.setText(org.openide.util.NbBundle.getMessage(VolumeDetailsPanel.class, \"VolumeDetailsPanel.OKButton.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addContainerGap())\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                        .addComponent(OKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGap(145, 145, 145))))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addGap(18, 18, 18)\n                .addComponent(OKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap())\n        );\n    }","commit_id":"42074d766c7fec7f2a053c5f94444365dbcd7b64","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        rightClickMenu = new javax.swing.JPopupMenu();\n        copyMenuItem = new javax.swing.JMenuItem();\n        selectAllMenuItem = new javax.swing.JMenuItem();\n        jPanel1 = new javax.swing.JPanel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        outputViewPane = new JTextPane(){\n            public boolean getScrollableTracksViewportWidth() {\n                return (getSize().width < 400);\n            }};\n            totalPageLabel = new javax.swing.JLabel();\n            ofLabel = new javax.swing.JLabel();\n            currentPageLabel = new javax.swing.JLabel();\n            pageLabel = new javax.swing.JLabel();\n            nextPageButton = new javax.swing.JButton();\n            pageLabel2 = new javax.swing.JLabel();\n            prevPageButton = new javax.swing.JButton();\n\n            copyMenuItem.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.copyMenuItem.text\")); // NOI18N\n            rightClickMenu.add(copyMenuItem);\n\n            selectAllMenuItem.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.selectAllMenuItem.text\")); // NOI18N\n            rightClickMenu.add(selectAllMenuItem);\n\n            setPreferredSize(new java.awt.Dimension(622, 424));\n\n            jPanel1.setPreferredSize(new java.awt.Dimension(622, 424));\n\n            outputViewPane.setEditable(false);\n            outputViewPane.setFont(new java.awt.Font(outputViewPane.getFont().getName(), Font.PLAIN, 11));\n            outputViewPane.setPreferredSize(new java.awt.Dimension(700, 400));\n            jScrollPane1.setViewportView(outputViewPane);\n\n            totalPageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.totalPageLabel.text\")); // NOI18N\n\n            ofLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.ofLabel.text\")); // NOI18N\n\n            currentPageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.currentPageLabel.text\")); // NOI18N\n            currentPageLabel.setMaximumSize(new java.awt.Dimension(18, 14));\n            currentPageLabel.setMinimumSize(new java.awt.Dimension(18, 14));\n            currentPageLabel.setPreferredSize(new java.awt.Dimension(18, 14));\n\n            pageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.pageLabel.text\")); // NOI18N\n            pageLabel.setMaximumSize(new java.awt.Dimension(33, 14));\n            pageLabel.setMinimumSize(new java.awt.Dimension(33, 14));\n            pageLabel.setPreferredSize(new java.awt.Dimension(33, 14));\n\n            nextPageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward.png\"))); // NOI18N NON-NLS\n            nextPageButton.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.nextPageButton.text\")); // NOI18N\n            nextPageButton.setBorderPainted(false);\n            nextPageButton.setContentAreaFilled(false);\n            nextPageButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward_disabled.png\"))); // NOI18N NON-NLS\n            nextPageButton.setMargin(new java.awt.Insets(2, 0, 2, 0));\n            nextPageButton.setPreferredSize(new java.awt.Dimension(23, 23));\n            nextPageButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward_hover.png\"))); // NOI18N NON-NLS\n            nextPageButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                    nextPageButtonActionPerformed(evt);\n                }\n            });\n\n            pageLabel2.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.pageLabel2.text\")); // NOI18N\n            pageLabel2.setMaximumSize(new java.awt.Dimension(29, 14));\n            pageLabel2.setMinimumSize(new java.awt.Dimension(29, 14));\n            pageLabel2.setPreferredSize(new java.awt.Dimension(29, 14));\n\n            prevPageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back.png\"))); // NOI18N NON-NLS\n            prevPageButton.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.prevPageButton.text\")); // NOI18N\n            prevPageButton.setBorderPainted(false);\n            prevPageButton.setContentAreaFilled(false);\n            prevPageButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back_disabled.png\"))); // NOI18N NON-NLS\n            prevPageButton.setMargin(new java.awt.Insets(2, 0, 2, 0));\n            prevPageButton.setPreferredSize(new java.awt.Dimension(23, 23));\n            prevPageButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back_hover.png\"))); // NOI18N NON-NLS\n            prevPageButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                    prevPageButtonActionPerformed(evt);\n                }\n            });\n\n            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n            jPanel1.setLayout(jPanel1Layout);\n            jPanel1Layout.setHorizontalGroup(\n                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(jPanel1Layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(pageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(currentPageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(ofLabel)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(totalPageLabel)\n                    .addGap(41, 41, 41)\n                    .addComponent(pageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(prevPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGap(0, 0, 0)\n                    .addComponent(nextPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addContainerGap(366, Short.MAX_VALUE))\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)\n            );\n            jPanel1Layout.setVerticalGroup(\n                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(jPanel1Layout.createSequentialGroup()\n                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(pageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(currentPageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(ofLabel)\n                            .addComponent(totalPageLabel))\n                        .addComponent(nextPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(prevPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(pageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addGap(0, 0, 0)\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE))\n            );\n\n            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n            this.setLayout(layout);\n            layout.setHorizontalGroup(\n                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            );\n            layout.setVerticalGroup(\n                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            );\n        }","id":105055,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        rightClickMenu = new javax.swing.JPopupMenu();\n        copyMenuItem = new javax.swing.JMenuItem();\n        selectAllMenuItem = new javax.swing.JMenuItem();\n        jPanel1 = new javax.swing.JPanel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        outputViewPane = new JTextPane(){\n            public boolean getScrollableTracksViewportWidth() {\n                return (getSize().width < 400);\n            }};\n            totalPageLabel = new javax.swing.JLabel();\n            ofLabel = new javax.swing.JLabel();\n            currentPageLabel = new javax.swing.JLabel();\n            pageLabel = new javax.swing.JLabel();\n            nextPageButton = new javax.swing.JButton();\n            pageLabel2 = new javax.swing.JLabel();\n            prevPageButton = new javax.swing.JButton();\n\n            copyMenuItem.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.copyMenuItem.text\")); // NOI18N\n            rightClickMenu.add(copyMenuItem);\n\n            selectAllMenuItem.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.selectAllMenuItem.text\")); // NOI18N\n            rightClickMenu.add(selectAllMenuItem);\n\n            setPreferredSize(new java.awt.Dimension(622, 424));\n\n            jPanel1.setPreferredSize(new java.awt.Dimension(622, 424));\n\n            outputViewPane.setEditable(false);\n            outputViewPane.setFont(outputViewPane.getFont().deriveFont(Font.PLAIN, 11));\n            outputViewPane.setPreferredSize(new java.awt.Dimension(700, 400));\n            jScrollPane1.setViewportView(outputViewPane);\n\n            totalPageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.totalPageLabel.text\")); // NOI18N\n\n            ofLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.ofLabel.text\")); // NOI18N\n\n            currentPageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.currentPageLabel.text\")); // NOI18N\n            currentPageLabel.setMaximumSize(new java.awt.Dimension(18, 14));\n            currentPageLabel.setMinimumSize(new java.awt.Dimension(18, 14));\n            currentPageLabel.setPreferredSize(new java.awt.Dimension(18, 14));\n\n            pageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.pageLabel.text\")); // NOI18N\n            pageLabel.setMaximumSize(new java.awt.Dimension(33, 14));\n            pageLabel.setMinimumSize(new java.awt.Dimension(33, 14));\n            pageLabel.setPreferredSize(new java.awt.Dimension(33, 14));\n\n            nextPageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward.png\"))); // NOI18N NON-NLS\n            nextPageButton.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.nextPageButton.text\")); // NOI18N\n            nextPageButton.setBorderPainted(false);\n            nextPageButton.setContentAreaFilled(false);\n            nextPageButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward_disabled.png\"))); // NOI18N NON-NLS\n            nextPageButton.setMargin(new java.awt.Insets(2, 0, 2, 0));\n            nextPageButton.setPreferredSize(new java.awt.Dimension(23, 23));\n            nextPageButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward_hover.png\"))); // NOI18N NON-NLS\n            nextPageButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                    nextPageButtonActionPerformed(evt);\n                }\n            });\n\n            pageLabel2.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.pageLabel2.text\")); // NOI18N\n            pageLabel2.setMaximumSize(new java.awt.Dimension(29, 14));\n            pageLabel2.setMinimumSize(new java.awt.Dimension(29, 14));\n            pageLabel2.setPreferredSize(new java.awt.Dimension(29, 14));\n\n            prevPageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back.png\"))); // NOI18N NON-NLS\n            prevPageButton.setText(org.openide.util.NbBundle.getMessage(DataContentViewerArtifact.class, \"DataContentViewerArtifact.prevPageButton.text\")); // NOI18N\n            prevPageButton.setBorderPainted(false);\n            prevPageButton.setContentAreaFilled(false);\n            prevPageButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back_disabled.png\"))); // NOI18N NON-NLS\n            prevPageButton.setMargin(new java.awt.Insets(2, 0, 2, 0));\n            prevPageButton.setPreferredSize(new java.awt.Dimension(23, 23));\n            prevPageButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back_hover.png\"))); // NOI18N NON-NLS\n            prevPageButton.addActionListener(new java.awt.event.ActionListener() {\n                public void actionPerformed(java.awt.event.ActionEvent evt) {\n                    prevPageButtonActionPerformed(evt);\n                }\n            });\n\n            javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n            jPanel1.setLayout(jPanel1Layout);\n            jPanel1Layout.setHorizontalGroup(\n                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(jPanel1Layout.createSequentialGroup()\n                    .addContainerGap()\n                    .addComponent(pageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 45, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(currentPageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(ofLabel)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                    .addComponent(totalPageLabel)\n                    .addGap(41, 41, 41)\n                    .addComponent(pageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                    .addComponent(prevPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGap(0, 0, 0)\n                    .addComponent(nextPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addContainerGap(366, Short.MAX_VALUE))\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)\n            );\n            jPanel1Layout.setVerticalGroup(\n                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(jPanel1Layout.createSequentialGroup()\n                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                            .addComponent(pageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(currentPageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                            .addComponent(ofLabel)\n                            .addComponent(totalPageLabel))\n                        .addComponent(nextPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(prevPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(pageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addGap(0, 0, 0)\n                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE))\n            );\n\n            javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n            this.setLayout(layout);\n            layout.setHorizontalGroup(\n                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            );\n            layout.setVerticalGroup(\n                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            );\n        }","commit_id":"b6bfa0be917db2e843211b895a2cee66bf09677c","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        rightClickMenu = new javax.swing.JPopupMenu();\n        copyMenuItem = new javax.swing.JMenuItem();\n        selectAllMenuItem = new javax.swing.JMenuItem();\n        hexViewerPanel = new javax.swing.JPanel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        outputViewPane = new JTextPane(){\n     public boolean getScrollableTracksViewportWidth() {\n     return (getSize().width < 400);\n }};\n        this.outputViewPane.setBackground(new java.awt.Color(255, 255, 255)); // to make sure the background color is white\n        totalPageLabel = new javax.swing.JLabel();\n        ofLabel = new javax.swing.JLabel();\n        currentPageLabel = new javax.swing.JLabel();\n        pageLabel = new javax.swing.JLabel();\n        prevPageButton = new javax.swing.JButton();\n        nextPageButton = new javax.swing.JButton();\n        pageLabel2 = new javax.swing.JLabel();\n        goToPageTextField = new javax.swing.JTextField();\n        goToPageLabel = new javax.swing.JLabel();\n\n        copyMenuItem.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.copyMenuItem.text\")); // NOI18N\n        rightClickMenu.add(copyMenuItem);\n\n        selectAllMenuItem.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.selectAllMenuItem.text\")); // NOI18N\n        rightClickMenu.add(selectAllMenuItem);\n\n        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));\n\n        outputViewPane.setEditable(false);\n        outputViewPane.setFont(new java.awt.Font(outputViewPane.getFont().getName(), Font.PLAIN, 11));\n        outputViewPane.setMinimumSize(new java.awt.Dimension(700, 20));\n        outputViewPane.setPreferredSize(new java.awt.Dimension(700, 400));\n        jScrollPane1.setViewportView(outputViewPane);\n\n        totalPageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.totalPageLabel.text_1\")); // NOI18N\n\n        ofLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.ofLabel.text_1\")); // NOI18N\n\n        currentPageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.currentPageLabel.text_1\")); // NOI18N\n        currentPageLabel.setMaximumSize(new java.awt.Dimension(18, 14));\n        currentPageLabel.setMinimumSize(new java.awt.Dimension(18, 14));\n        currentPageLabel.setPreferredSize(new java.awt.Dimension(18, 14));\n\n        pageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.pageLabel.text_1\")); // NOI18N\n        pageLabel.setMaximumSize(new java.awt.Dimension(33, 14));\n        pageLabel.setMinimumSize(new java.awt.Dimension(33, 14));\n        pageLabel.setPreferredSize(new java.awt.Dimension(33, 14));\n\n        prevPageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back.png\"))); // NOI18N NON-NLS\n        prevPageButton.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.prevPageButton.text\")); // NOI18N\n        prevPageButton.setBorderPainted(false);\n        prevPageButton.setContentAreaFilled(false);\n        prevPageButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back_disabled.png\"))); // NOI18N NON-NLS\n        prevPageButton.setMargin(new java.awt.Insets(2, 0, 2, 0));\n        prevPageButton.setPreferredSize(new java.awt.Dimension(23, 23));\n        prevPageButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back_hover.png\"))); // NOI18N NON-NLS\n        prevPageButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                prevPageButtonActionPerformed(evt);\n            }\n        });\n\n        nextPageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward.png\"))); // NOI18N NON-NLS\n        nextPageButton.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.nextPageButton.text\")); // NOI18N\n        nextPageButton.setBorderPainted(false);\n        nextPageButton.setContentAreaFilled(false);\n        nextPageButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward_disabled.png\"))); // NOI18N NON-NLS\n        nextPageButton.setMargin(new java.awt.Insets(2, 0, 2, 0));\n        nextPageButton.setPreferredSize(new java.awt.Dimension(23, 23));\n        nextPageButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward_hover.png\"))); // NOI18N NON-NLS\n        nextPageButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                nextPageButtonActionPerformed(evt);\n            }\n        });\n\n        pageLabel2.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.pageLabel2.text\")); // NOI18N\n        pageLabel2.setMaximumSize(new java.awt.Dimension(29, 14));\n        pageLabel2.setMinimumSize(new java.awt.Dimension(29, 14));\n        pageLabel2.setPreferredSize(new java.awt.Dimension(29, 14));\n\n        goToPageTextField.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.goToPageTextField.text\")); // NOI18N\n        goToPageTextField.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                goToPageTextFieldActionPerformed(evt);\n            }\n        });\n\n        goToPageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.goToPageLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout hexViewerPanelLayout = new javax.swing.GroupLayout(hexViewerPanel);\n        hexViewerPanel.setLayout(hexViewerPanelLayout);\n        hexViewerPanelLayout.setHorizontalGroup(\n            hexViewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(hexViewerPanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(pageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(18, 18, 18)\n                .addComponent(currentPageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(ofLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(totalPageLabel)\n                .addGap(50, 50, 50)\n                .addComponent(pageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(prevPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(0, 0, 0)\n                .addComponent(nextPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(18, 18, 18)\n                .addComponent(goToPageLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(goToPageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(205, Short.MAX_VALUE))\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)\n        );\n        hexViewerPanelLayout.setVerticalGroup(\n            hexViewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(hexViewerPanelLayout.createSequentialGroup()\n                .addGroup(hexViewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(pageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGroup(hexViewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(currentPageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(ofLabel)\n                        .addComponent(totalPageLabel))\n                    .addComponent(pageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(nextPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(prevPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(goToPageLabel)\n                    .addComponent(goToPageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(0, 0, 0)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))\n        );\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 622, Short.MAX_VALUE)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(layout.createSequentialGroup()\n                    .addGap(0, 0, 0)\n                    .addComponent(hexViewerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGap(0, 0, 0)))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 411, Short.MAX_VALUE)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(layout.createSequentialGroup()\n                    .addGap(0, 0, 0)\n                    .addComponent(hexViewerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGap(0, 0, 0)))\n        );\n    }","id":105056,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        rightClickMenu = new javax.swing.JPopupMenu();\n        copyMenuItem = new javax.swing.JMenuItem();\n        selectAllMenuItem = new javax.swing.JMenuItem();\n        hexViewerPanel = new javax.swing.JPanel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        outputViewPane = new JTextPane(){\n     public boolean getScrollableTracksViewportWidth() {\n     return (getSize().width < 400);\n }};\n        this.outputViewPane.setBackground(new java.awt.Color(255, 255, 255)); // to make sure the background color is white\n        totalPageLabel = new javax.swing.JLabel();\n        ofLabel = new javax.swing.JLabel();\n        currentPageLabel = new javax.swing.JLabel();\n        pageLabel = new javax.swing.JLabel();\n        prevPageButton = new javax.swing.JButton();\n        nextPageButton = new javax.swing.JButton();\n        pageLabel2 = new javax.swing.JLabel();\n        goToPageTextField = new javax.swing.JTextField();\n        goToPageLabel = new javax.swing.JLabel();\n\n        copyMenuItem.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.copyMenuItem.text\")); // NOI18N\n        rightClickMenu.add(copyMenuItem);\n\n        selectAllMenuItem.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.selectAllMenuItem.text\")); // NOI18N\n        rightClickMenu.add(selectAllMenuItem);\n\n        jScrollPane1.setBackground(new java.awt.Color(255, 255, 255));\n\n        outputViewPane.setEditable(false);\n        outputViewPane.setFont(outputViewPane.getFont().deriveFont(Font.PLAIN, 11));\n        outputViewPane.setMinimumSize(new java.awt.Dimension(700, 20));\n        outputViewPane.setPreferredSize(new java.awt.Dimension(700, 400));\n        jScrollPane1.setViewportView(outputViewPane);\n\n        totalPageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.totalPageLabel.text_1\")); // NOI18N\n\n        ofLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.ofLabel.text_1\")); // NOI18N\n\n        currentPageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.currentPageLabel.text_1\")); // NOI18N\n        currentPageLabel.setMaximumSize(new java.awt.Dimension(18, 14));\n        currentPageLabel.setMinimumSize(new java.awt.Dimension(18, 14));\n        currentPageLabel.setPreferredSize(new java.awt.Dimension(18, 14));\n\n        pageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.pageLabel.text_1\")); // NOI18N\n        pageLabel.setMaximumSize(new java.awt.Dimension(33, 14));\n        pageLabel.setMinimumSize(new java.awt.Dimension(33, 14));\n        pageLabel.setPreferredSize(new java.awt.Dimension(33, 14));\n\n        prevPageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back.png\"))); // NOI18N NON-NLS\n        prevPageButton.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.prevPageButton.text\")); // NOI18N\n        prevPageButton.setBorderPainted(false);\n        prevPageButton.setContentAreaFilled(false);\n        prevPageButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back_disabled.png\"))); // NOI18N NON-NLS\n        prevPageButton.setMargin(new java.awt.Insets(2, 0, 2, 0));\n        prevPageButton.setPreferredSize(new java.awt.Dimension(23, 23));\n        prevPageButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back_hover.png\"))); // NOI18N NON-NLS\n        prevPageButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                prevPageButtonActionPerformed(evt);\n            }\n        });\n\n        nextPageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward.png\"))); // NOI18N NON-NLS\n        nextPageButton.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.nextPageButton.text\")); // NOI18N\n        nextPageButton.setBorderPainted(false);\n        nextPageButton.setContentAreaFilled(false);\n        nextPageButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward_disabled.png\"))); // NOI18N NON-NLS\n        nextPageButton.setMargin(new java.awt.Insets(2, 0, 2, 0));\n        nextPageButton.setPreferredSize(new java.awt.Dimension(23, 23));\n        nextPageButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward_hover.png\"))); // NOI18N NON-NLS\n        nextPageButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                nextPageButtonActionPerformed(evt);\n            }\n        });\n\n        pageLabel2.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.pageLabel2.text\")); // NOI18N\n        pageLabel2.setMaximumSize(new java.awt.Dimension(29, 14));\n        pageLabel2.setMinimumSize(new java.awt.Dimension(29, 14));\n        pageLabel2.setPreferredSize(new java.awt.Dimension(29, 14));\n\n        goToPageTextField.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.goToPageTextField.text\")); // NOI18N\n        goToPageTextField.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                goToPageTextFieldActionPerformed(evt);\n            }\n        });\n\n        goToPageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerHex.class, \"DataContentViewerHex.goToPageLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout hexViewerPanelLayout = new javax.swing.GroupLayout(hexViewerPanel);\n        hexViewerPanel.setLayout(hexViewerPanelLayout);\n        hexViewerPanelLayout.setHorizontalGroup(\n            hexViewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(hexViewerPanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(pageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(18, 18, 18)\n                .addComponent(currentPageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(ofLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(totalPageLabel)\n                .addGap(50, 50, 50)\n                .addComponent(pageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(prevPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(0, 0, 0)\n                .addComponent(nextPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(18, 18, 18)\n                .addComponent(goToPageLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(goToPageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(205, Short.MAX_VALUE))\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 622, Short.MAX_VALUE)\n        );\n        hexViewerPanelLayout.setVerticalGroup(\n            hexViewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(hexViewerPanelLayout.createSequentialGroup()\n                .addGroup(hexViewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(pageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGroup(hexViewerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(currentPageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(ofLabel)\n                        .addComponent(totalPageLabel))\n                    .addComponent(pageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(nextPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(prevPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(goToPageLabel)\n                    .addComponent(goToPageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(0, 0, 0)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 388, Short.MAX_VALUE))\n        );\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 622, Short.MAX_VALUE)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(layout.createSequentialGroup()\n                    .addGap(0, 0, 0)\n                    .addComponent(hexViewerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGap(0, 0, 0)))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 411, Short.MAX_VALUE)\n            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                .addGroup(layout.createSequentialGroup()\n                    .addGap(0, 0, 0)\n                    .addComponent(hexViewerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGap(0, 0, 0)))\n        );\n    }","commit_id":"b6bfa0be917db2e843211b895a2cee66bf09677c","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        rightClickMenu = new javax.swing.JPopupMenu();\n        copyMenuItem = new javax.swing.JMenuItem();\n        selectAllMenuItem = new javax.swing.JMenuItem();\n        jPanel1 = new javax.swing.JPanel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        outputViewPane = new JTextPane(){\n     public boolean getScrollableTracksViewportWidth() {\n     return (getSize().width < 400);\n }};\n        totalPageLabel = new javax.swing.JLabel();\n        ofLabel = new javax.swing.JLabel();\n        currentPageLabel = new javax.swing.JLabel();\n        pageLabel = new javax.swing.JLabel();\n        nextPageButton = new javax.swing.JButton();\n        pageLabel2 = new javax.swing.JLabel();\n        prevPageButton = new javax.swing.JButton();\n        goToPageLabel = new javax.swing.JLabel();\n        goToPageTextField = new javax.swing.JTextField();\n        languageCombo = new javax.swing.JComboBox<>();\n        languageLabel = new javax.swing.JLabel();\n\n        copyMenuItem.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.copyMenuItem.text\")); // NOI18N\n        rightClickMenu.add(copyMenuItem);\n\n        selectAllMenuItem.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.selectAllMenuItem.text\")); // NOI18N\n        rightClickMenu.add(selectAllMenuItem);\n\n        setMinimumSize(new java.awt.Dimension(5, 5));\n\n        jPanel1.setPreferredSize(new java.awt.Dimension(502, 424));\n\n        outputViewPane.setEditable(false);\n        outputViewPane.setFont(new java.awt.Font(outputViewPane.getFont().getName(), Font.PLAIN, 11));\n        outputViewPane.setPreferredSize(new java.awt.Dimension(700, 400));\n        jScrollPane1.setViewportView(outputViewPane);\n\n        totalPageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.totalPageLabel.text_1\")); // NOI18N\n\n        ofLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.ofLabel.text_1\")); // NOI18N\n\n        currentPageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.currentPageLabel.text_1\")); // NOI18N\n        currentPageLabel.setMaximumSize(new java.awt.Dimension(18, 14));\n        currentPageLabel.setMinimumSize(new java.awt.Dimension(18, 14));\n        currentPageLabel.setPreferredSize(new java.awt.Dimension(18, 14));\n\n        pageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.pageLabel.text_1\")); // NOI18N\n        pageLabel.setMaximumSize(new java.awt.Dimension(33, 14));\n        pageLabel.setMinimumSize(new java.awt.Dimension(33, 14));\n        pageLabel.setPreferredSize(new java.awt.Dimension(33, 14));\n\n        nextPageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward.png\"))); // NOI18N NON-NLS\n        nextPageButton.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.nextPageButton.text\")); // NOI18N\n        nextPageButton.setBorderPainted(false);\n        nextPageButton.setContentAreaFilled(false);\n        nextPageButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward_disabled.png\"))); // NOI18N NON-NLS\n        nextPageButton.setMargin(new java.awt.Insets(2, 0, 2, 0));\n        nextPageButton.setPreferredSize(new java.awt.Dimension(55, 23));\n        nextPageButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward_hover.png\"))); // NOI18N NON-NLS\n        nextPageButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                nextPageButtonActionPerformed(evt);\n            }\n        });\n\n        pageLabel2.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.pageLabel2.text\")); // NOI18N\n        pageLabel2.setMaximumSize(new java.awt.Dimension(29, 14));\n        pageLabel2.setMinimumSize(new java.awt.Dimension(29, 14));\n        pageLabel2.setPreferredSize(new java.awt.Dimension(29, 14));\n\n        prevPageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back.png\"))); // NOI18N NON-NLS\n        prevPageButton.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.prevPageButton.text\")); // NOI18N\n        prevPageButton.setBorderPainted(false);\n        prevPageButton.setContentAreaFilled(false);\n        prevPageButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back_disabled.png\"))); // NOI18N NON-NLS\n        prevPageButton.setMargin(new java.awt.Insets(2, 0, 2, 0));\n        prevPageButton.setPreferredSize(new java.awt.Dimension(55, 23));\n        prevPageButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back_hover.png\"))); // NOI18N NON-NLS\n        prevPageButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                prevPageButtonActionPerformed(evt);\n            }\n        });\n\n        goToPageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.goToPageLabel.text\")); // NOI18N\n\n        goToPageTextField.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.goToPageTextField.text\")); // NOI18N\n        goToPageTextField.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                goToPageTextFieldActionPerformed(evt);\n            }\n        });\n\n        languageCombo.setToolTipText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.languageCombo.toolTipText\")); // NOI18N\n        languageCombo.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                languageComboActionPerformed(evt);\n            }\n        });\n\n        languageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.languageLabel.text\")); // NOI18N\n        languageLabel.setToolTipText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.languageLabel.toolTipText\")); // NOI18N\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(pageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(18, 18, 18)\n                .addComponent(currentPageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(ofLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(totalPageLabel)\n                .addGap(50, 50, 50)\n                .addComponent(pageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(prevPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(0, 0, 0)\n                .addComponent(nextPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(18, 18, 18)\n                .addComponent(goToPageLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(goToPageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(33, 33, 33)\n                .addComponent(languageLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(languageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(pageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(currentPageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(ofLabel)\n                        .addComponent(totalPageLabel))\n                    .addComponent(pageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(nextPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(prevPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(goToPageLabel)\n                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(goToPageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(languageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(languageLabel)))\n                .addGap(0, 0, 0)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE))\n        );\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n        );\n    }","id":105057,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        rightClickMenu = new javax.swing.JPopupMenu();\n        copyMenuItem = new javax.swing.JMenuItem();\n        selectAllMenuItem = new javax.swing.JMenuItem();\n        jPanel1 = new javax.swing.JPanel();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        outputViewPane = new JTextPane(){\n     public boolean getScrollableTracksViewportWidth() {\n     return (getSize().width < 400);\n }};\n        totalPageLabel = new javax.swing.JLabel();\n        ofLabel = new javax.swing.JLabel();\n        currentPageLabel = new javax.swing.JLabel();\n        pageLabel = new javax.swing.JLabel();\n        nextPageButton = new javax.swing.JButton();\n        pageLabel2 = new javax.swing.JLabel();\n        prevPageButton = new javax.swing.JButton();\n        goToPageLabel = new javax.swing.JLabel();\n        goToPageTextField = new javax.swing.JTextField();\n        languageCombo = new javax.swing.JComboBox<>();\n        languageLabel = new javax.swing.JLabel();\n\n        copyMenuItem.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.copyMenuItem.text\")); // NOI18N\n        rightClickMenu.add(copyMenuItem);\n\n        selectAllMenuItem.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.selectAllMenuItem.text\")); // NOI18N\n        rightClickMenu.add(selectAllMenuItem);\n\n        setMinimumSize(new java.awt.Dimension(5, 5));\n\n        jPanel1.setPreferredSize(new java.awt.Dimension(502, 424));\n\n        outputViewPane.setEditable(false);\n        outputViewPane.setFont(outputViewPane.getFont().deriveFont(Font.PLAIN, 11));\n        outputViewPane.setPreferredSize(new java.awt.Dimension(700, 400));\n        jScrollPane1.setViewportView(outputViewPane);\n\n        totalPageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.totalPageLabel.text_1\")); // NOI18N\n\n        ofLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.ofLabel.text_1\")); // NOI18N\n\n        currentPageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.currentPageLabel.text_1\")); // NOI18N\n        currentPageLabel.setMaximumSize(new java.awt.Dimension(18, 14));\n        currentPageLabel.setMinimumSize(new java.awt.Dimension(18, 14));\n        currentPageLabel.setPreferredSize(new java.awt.Dimension(18, 14));\n\n        pageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.pageLabel.text_1\")); // NOI18N\n        pageLabel.setMaximumSize(new java.awt.Dimension(33, 14));\n        pageLabel.setMinimumSize(new java.awt.Dimension(33, 14));\n        pageLabel.setPreferredSize(new java.awt.Dimension(33, 14));\n\n        nextPageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward.png\"))); // NOI18N NON-NLS\n        nextPageButton.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.nextPageButton.text\")); // NOI18N\n        nextPageButton.setBorderPainted(false);\n        nextPageButton.setContentAreaFilled(false);\n        nextPageButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward_disabled.png\"))); // NOI18N NON-NLS\n        nextPageButton.setMargin(new java.awt.Insets(2, 0, 2, 0));\n        nextPageButton.setPreferredSize(new java.awt.Dimension(55, 23));\n        nextPageButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_forward_hover.png\"))); // NOI18N NON-NLS\n        nextPageButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                nextPageButtonActionPerformed(evt);\n            }\n        });\n\n        pageLabel2.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.pageLabel2.text\")); // NOI18N\n        pageLabel2.setMaximumSize(new java.awt.Dimension(29, 14));\n        pageLabel2.setMinimumSize(new java.awt.Dimension(29, 14));\n        pageLabel2.setPreferredSize(new java.awt.Dimension(29, 14));\n\n        prevPageButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back.png\"))); // NOI18N NON-NLS\n        prevPageButton.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.prevPageButton.text\")); // NOI18N\n        prevPageButton.setBorderPainted(false);\n        prevPageButton.setContentAreaFilled(false);\n        prevPageButton.setDisabledIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back_disabled.png\"))); // NOI18N NON-NLS\n        prevPageButton.setMargin(new java.awt.Insets(2, 0, 2, 0));\n        prevPageButton.setPreferredSize(new java.awt.Dimension(55, 23));\n        prevPageButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/corecomponents/btn_step_back_hover.png\"))); // NOI18N NON-NLS\n        prevPageButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                prevPageButtonActionPerformed(evt);\n            }\n        });\n\n        goToPageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.goToPageLabel.text\")); // NOI18N\n\n        goToPageTextField.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.goToPageTextField.text\")); // NOI18N\n        goToPageTextField.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                goToPageTextFieldActionPerformed(evt);\n            }\n        });\n\n        languageCombo.setToolTipText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.languageCombo.toolTipText\")); // NOI18N\n        languageCombo.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                languageComboActionPerformed(evt);\n            }\n        });\n\n        languageLabel.setText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.languageLabel.text\")); // NOI18N\n        languageLabel.setToolTipText(org.openide.util.NbBundle.getMessage(DataContentViewerString.class, \"DataContentViewerString.languageLabel.toolTipText\")); // NOI18N\n\n        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);\n        jPanel1.setLayout(jPanel1Layout);\n        jPanel1Layout.setHorizontalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(pageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(18, 18, 18)\n                .addComponent(currentPageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(ofLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(totalPageLabel)\n                .addGap(50, 50, 50)\n                .addComponent(pageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(prevPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(0, 0, 0)\n                .addComponent(nextPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(18, 18, 18)\n                .addComponent(goToPageLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(goToPageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(33, 33, 33)\n                .addComponent(languageLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(languageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE))\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)\n        );\n        jPanel1Layout.setVerticalGroup(\n            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(jPanel1Layout.createSequentialGroup()\n                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(pageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(currentPageLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(ofLabel)\n                        .addComponent(totalPageLabel))\n                    .addComponent(pageLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(nextPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(prevPageButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(goToPageLabel)\n                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                        .addComponent(goToPageTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(languageCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addComponent(languageLabel)))\n                .addGap(0, 0, 0)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 401, Short.MAX_VALUE))\n        );\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 640, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n        );\n    }","commit_id":"b6bfa0be917db2e843211b895a2cee66bf09677c","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        rightClickMenu = new javax.swing.JPopupMenu();\n        copyMenuItem = new javax.swing.JMenuItem();\n        selectAllMenuItem = new javax.swing.JMenuItem();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        messageDetailsPane = new javax.swing.JTextPane();\n        jToolBar1 = new javax.swing.JToolBar();\n        backButton = new javax.swing.JButton();\n        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));\n        viewArtifactButton = new javax.swing.JButton();\n        viewContentButton = new javax.swing.JButton();\n\n        copyMenuItem.setText(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class, \"IngestMessageDetailsPanel.copyMenuItem.text\")); // NOI18N\n        rightClickMenu.add(copyMenuItem);\n\n        selectAllMenuItem.setText(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class, \"IngestMessageDetailsPanel.selectAllMenuItem.text\")); // NOI18N\n        rightClickMenu.add(selectAllMenuItem);\n\n        messageDetailsPane.setEditable(false);\n        messageDetailsPane.setBackground(new java.awt.Color(221, 221, 235));\n        messageDetailsPane.setBorder(null);\n        messageDetailsPane.setContentType(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class,\n                                                                               \"IngestMessageDetailsPanel.messageDetailsPane.contentType\")); // NOI18N\n        messageDetailsPane.setFont(new java.awt.Font(messageDetailsPane.getFont().getName(), Font.PLAIN, 10));\n        messageDetailsPane.setToolTipText(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class,\n                                                                               \"IngestMessageDetailsPanel.messageDetailsPane.toolTipText\")); // NOI18N\n        jScrollPane1.setViewportView(messageDetailsPane);\n\n        jToolBar1.setFloatable(false);\n        jToolBar1.setRollover(true);\n\n        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/ingest/btn_step_back.png\"))); // NOI18N NON-NLS\n        backButton.setText(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class, \"IngestMessageDetailsPanel.backButton.text\")); // NOI18N\n        backButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);\n        backButton.setMargin(new java.awt.Insets(2, 2, 2, 2));\n        backButton.setMaximumSize(new java.awt.Dimension(23, 23));\n        backButton.setMinimumSize(new java.awt.Dimension(23, 23));\n        backButton.setPreferredSize(new java.awt.Dimension(23, 23));\n        backButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/ingest/btn_step_back_hover.png\"))); // NOI18N NON-NLS\n        backButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/ingest/btn_step_back_hover.png\"))); // NOI18N NON-NLS\n        backButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                backButtonActionPerformed(evt);\n            }\n        });\n        jToolBar1.add(backButton);\n        jToolBar1.add(filler1);\n\n        viewArtifactButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/ingest/goto_res.png\"))); // NOI18N NON-NLS\n        viewArtifactButton.setText(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class, \"IngestMessageDetailsPanel.viewArtifactButton.text\")); // NOI18N\n        viewArtifactButton.setIconTextGap(2);\n        viewArtifactButton.setPreferredSize(new java.awt.Dimension(93, 23));\n        viewArtifactButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                viewArtifactButtonActionPerformed(evt);\n            }\n        });\n        jToolBar1.add(viewArtifactButton);\n\n        viewContentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/ingest/goto_dir.png\"))); // NOI18N NON-NLS\n        viewContentButton.setText(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class, \"IngestMessageDetailsPanel.viewContentButton.text\")); // NOI18N\n        viewContentButton.setIconTextGap(2);\n        viewContentButton.setPreferredSize(new java.awt.Dimension(111, 23));\n        viewContentButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                viewContentButtonActionPerformed(evt);\n            }\n        });\n        jToolBar1.add(viewContentButton);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(0, 0, 0)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE))\n        );\n    }","id":105058,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        rightClickMenu = new javax.swing.JPopupMenu();\n        copyMenuItem = new javax.swing.JMenuItem();\n        selectAllMenuItem = new javax.swing.JMenuItem();\n        jScrollPane1 = new javax.swing.JScrollPane();\n        messageDetailsPane = new javax.swing.JTextPane();\n        jToolBar1 = new javax.swing.JToolBar();\n        backButton = new javax.swing.JButton();\n        filler1 = new javax.swing.Box.Filler(new java.awt.Dimension(0, 0), new java.awt.Dimension(0, 0), new java.awt.Dimension(32767, 0));\n        viewArtifactButton = new javax.swing.JButton();\n        viewContentButton = new javax.swing.JButton();\n\n        copyMenuItem.setText(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class, \"IngestMessageDetailsPanel.copyMenuItem.text\")); // NOI18N\n        rightClickMenu.add(copyMenuItem);\n\n        selectAllMenuItem.setText(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class, \"IngestMessageDetailsPanel.selectAllMenuItem.text\")); // NOI18N\n        rightClickMenu.add(selectAllMenuItem);\n\n        messageDetailsPane.setEditable(false);\n        messageDetailsPane.setBackground(new java.awt.Color(221, 221, 235));\n        messageDetailsPane.setBorder(null);\n        messageDetailsPane.setContentType(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class,\n                                                                               \"IngestMessageDetailsPanel.messageDetailsPane.contentType\")); // NOI18N\n        messageDetailsPane.setFont(messageDetailsPane.getFont().deriveFont(Font.PLAIN, 10));\n        messageDetailsPane.setToolTipText(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class,\n                                                                               \"IngestMessageDetailsPanel.messageDetailsPane.toolTipText\")); // NOI18N\n        jScrollPane1.setViewportView(messageDetailsPane);\n\n        jToolBar1.setFloatable(false);\n        jToolBar1.setRollover(true);\n\n        backButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/ingest/btn_step_back.png\"))); // NOI18N NON-NLS\n        backButton.setText(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class, \"IngestMessageDetailsPanel.backButton.text\")); // NOI18N\n        backButton.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);\n        backButton.setMargin(new java.awt.Insets(2, 2, 2, 2));\n        backButton.setMaximumSize(new java.awt.Dimension(23, 23));\n        backButton.setMinimumSize(new java.awt.Dimension(23, 23));\n        backButton.setPreferredSize(new java.awt.Dimension(23, 23));\n        backButton.setPressedIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/ingest/btn_step_back_hover.png\"))); // NOI18N NON-NLS\n        backButton.setRolloverIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/ingest/btn_step_back_hover.png\"))); // NOI18N NON-NLS\n        backButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                backButtonActionPerformed(evt);\n            }\n        });\n        jToolBar1.add(backButton);\n        jToolBar1.add(filler1);\n\n        viewArtifactButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/ingest/goto_res.png\"))); // NOI18N NON-NLS\n        viewArtifactButton.setText(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class, \"IngestMessageDetailsPanel.viewArtifactButton.text\")); // NOI18N\n        viewArtifactButton.setIconTextGap(2);\n        viewArtifactButton.setPreferredSize(new java.awt.Dimension(93, 23));\n        viewArtifactButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                viewArtifactButtonActionPerformed(evt);\n            }\n        });\n        jToolBar1.add(viewArtifactButton);\n\n        viewContentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/ingest/goto_dir.png\"))); // NOI18N NON-NLS\n        viewContentButton.setText(org.openide.util.NbBundle.getMessage(IngestMessageDetailsPanel.class, \"IngestMessageDetailsPanel.viewContentButton.text\")); // NOI18N\n        viewContentButton.setIconTextGap(2);\n        viewContentButton.setPreferredSize(new java.awt.Dimension(111, 23));\n        viewContentButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                viewContentButtonActionPerformed(evt);\n            }\n        });\n        jToolBar1.add(viewContentButton);\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 429, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(jToolBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(0, 0, 0)\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 267, Short.MAX_VALUE))\n        );\n    }","commit_id":"3fe0ea7bfb84c033199b50367573e06511398404","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n            \n            super.setForeground(table.getSelectionForeground());\n            super.setBackground(table.getSelectionBackground());\n            \n            boolean boolVal;\n            if (value instanceof Boolean) {\n                boolVal = ((Boolean)value).booleanValue();\n            } else {\n                throw new RuntimeException(NbBundle.getMessage(this.getClass(),\n                                                               \"IngestMessagePanel.BooleanRenderer.exception.nonBoolVal.msg\"));\n            }\n            \n            String aValue = boolVal ? bulletChar : \"\";\n            \n            JLabel cell = (JLabel)super.getTableCellRendererComponent(table, aValue, isSelected, hasFocus, row, column);\n            \n            // center the bullet in the JLabel\n            cell.setHorizontalAlignment(SwingConstants.CENTER);\n            \n            // increase the font size\n            cell.setFont(new Font(cell.getFont().getName(), Font.PLAIN, 16));\n            \n            final IngestMessageGroup messageGroup = tableModel.getMessageGroup(row);\n            if (messageGroup != null) {\n                MessageType mt = messageGroup.getMessageType();\n                if (mt == MessageType.ERROR) {\n                    cell.setBackground(ERROR_COLOR);\n                } else if (mt == MessageType.WARNING) {\n                    cell.setBackground(Color.orange);\n                } else {\n                    //cell.setBackground(table.getBackground());\n                    cell.setBackground(messageGroup.getColor());\n                }\n            }\n            return cell;\n        }","id":105059,"modified_method":"@Override\n        public Component getTableCellRendererComponent(JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {\n            \n            super.setForeground(table.getSelectionForeground());\n            super.setBackground(table.getSelectionBackground());\n            \n            boolean boolVal;\n            if (value instanceof Boolean) {\n                boolVal = ((Boolean)value).booleanValue();\n            } else {\n                throw new RuntimeException(NbBundle.getMessage(this.getClass(),\n                                                               \"IngestMessagePanel.BooleanRenderer.exception.nonBoolVal.msg\"));\n            }\n            \n            String aValue = boolVal ? bulletChar : \"\";\n            \n            JLabel cell = (JLabel)super.getTableCellRendererComponent(table, aValue, isSelected, hasFocus, row, column);\n            \n            // center the bullet in the JLabel\n            cell.setHorizontalAlignment(SwingConstants.CENTER);\n            \n            // increase the font size\n            cell.setFont(cell.getFont().deriveFont(Font.PLAIN, 16));\n            \n            final IngestMessageGroup messageGroup = tableModel.getMessageGroup(row);\n            if (messageGroup != null) {\n                MessageType mt = messageGroup.getMessageType();\n                if (mt == MessageType.ERROR) {\n                    cell.setBackground(ERROR_COLOR);\n                } else if (mt == MessageType.WARNING) {\n                    cell.setBackground(Color.orange);\n                } else {\n                    //cell.setBackground(table.getBackground());\n                    cell.setBackground(messageGroup.getColor());\n                }\n            }\n            return cell;\n        }","commit_id":"3fe0ea7bfb84c033199b50367573e06511398404","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        messageTable = new javax.swing.JTable();\n        controlPanel = new javax.swing.JPanel();\n        sortByLabel = new javax.swing.JLabel();\n        sortByComboBox = new javax.swing.JComboBox<String>();\n        totalMessagesNameLabel = new javax.swing.JLabel();\n        totalMessagesNameVal = new javax.swing.JLabel();\n        totalUniqueMessagesNameLabel = new javax.swing.JLabel();\n        totalUniqueMessagesNameVal = new javax.swing.JLabel();\n\n        setOpaque(false);\n\n        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));\n        jScrollPane1.setOpaque(false);\n        jScrollPane1.setPreferredSize(new java.awt.Dimension(32767, 32767));\n\n        messageTable.setBackground(new java.awt.Color(221, 221, 235));\n        messageTable.setFont(new java.awt.Font(messageTable.getFont().getName(), Font.PLAIN, 12));\n        messageTable.setModel(tableModel);\n        messageTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);\n        messageTable.setAutoscrolls(false);\n        messageTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));\n        messageTable.setGridColor(new java.awt.Color(204, 204, 204));\n        messageTable.setOpaque(false);\n        messageTable.setSelectionForeground(new java.awt.Color(0, 0, 0));\n        messageTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);\n        messageTable.setShowHorizontalLines(false);\n        messageTable.setShowVerticalLines(false);\n        messageTable.getTableHeader().setReorderingAllowed(false);\n        jScrollPane1.setViewportView(messageTable);\n\n        sortByLabel.setText(org.openide.util.NbBundle.getMessage(IngestMessagePanel.class, \"IngestMessagePanel.sortByLabel.text\")); // NOI18N\n\n        sortByComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] {\n                NbBundle.getMessage(this.getClass(), \"IngestMessagePanel.sortByComboBox.model.time\"),\n                NbBundle.getMessage(this.getClass(), \"IngestMessagePanel.sortByComboBox.model.priority\") })); // NOI18N\n        sortByComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(IngestMessagePanel.class, \"IngestMessagePanel.sortByComboBox.toolTipText\")); // NOI18N\n        sortByComboBox.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                sortByComboBoxActionPerformed(evt);\n            }\n        });\n\n        totalMessagesNameLabel.setText(org.openide.util.NbBundle.getMessage(IngestMessagePanel.class, \"IngestMessagePanel.totalMessagesNameLabel.text\")); // NOI18N\n\n        totalMessagesNameVal.setText(org.openide.util.NbBundle.getMessage(IngestMessagePanel.class, \"IngestMessagePanel.totalMessagesNameVal.text\")); // NOI18N\n\n        totalUniqueMessagesNameLabel.setText(org.openide.util.NbBundle.getMessage(IngestMessagePanel.class, \"IngestMessagePanel.totalUniqueMessagesNameLabel.text\")); // NOI18N\n\n        totalUniqueMessagesNameVal.setText(org.openide.util.NbBundle.getMessage(IngestMessagePanel.class, \"IngestMessagePanel.totalUniqueMessagesNameVal.text\")); // NOI18N\n\n        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);\n        controlPanel.setLayout(controlPanelLayout);\n        controlPanelLayout.setHorizontalGroup(\n            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(controlPanelLayout.createSequentialGroup()\n                .addGap(10, 10, 10)\n                .addComponent(sortByLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(sortByComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(101, 101, 101)\n                .addComponent(totalMessagesNameLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(totalMessagesNameVal, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)\n                .addGap(22, 22, 22)\n                .addComponent(totalUniqueMessagesNameLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(totalUniqueMessagesNameVal, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)\n                .addGap(22, 22, 22))\n        );\n        controlPanelLayout.setVerticalGroup(\n            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(sortByComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(sortByLabel)\n                .addComponent(totalUniqueMessagesNameLabel)\n                .addComponent(totalUniqueMessagesNameVal)\n                .addComponent(totalMessagesNameLabel)\n                .addComponent(totalMessagesNameVal))\n        );\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)\n                .addGap(0, 0, 0)\n                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n        );\n    }","id":105060,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        messageTable = new javax.swing.JTable();\n        controlPanel = new javax.swing.JPanel();\n        sortByLabel = new javax.swing.JLabel();\n        sortByComboBox = new javax.swing.JComboBox<String>();\n        totalMessagesNameLabel = new javax.swing.JLabel();\n        totalMessagesNameVal = new javax.swing.JLabel();\n        totalUniqueMessagesNameLabel = new javax.swing.JLabel();\n        totalUniqueMessagesNameVal = new javax.swing.JLabel();\n\n        setOpaque(false);\n\n        jScrollPane1.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));\n        jScrollPane1.setOpaque(false);\n        jScrollPane1.setPreferredSize(new java.awt.Dimension(32767, 32767));\n\n        messageTable.setBackground(new java.awt.Color(221, 221, 235));\n        messageTable.setFont(messageTable.getFont().deriveFont(Font.PLAIN, 12));\n        messageTable.setModel(tableModel);\n        messageTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);\n        messageTable.setAutoscrolls(false);\n        messageTable.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));\n        messageTable.setGridColor(new java.awt.Color(204, 204, 204));\n        messageTable.setOpaque(false);\n        messageTable.setSelectionForeground(new java.awt.Color(0, 0, 0));\n        messageTable.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);\n        messageTable.setShowHorizontalLines(false);\n        messageTable.setShowVerticalLines(false);\n        messageTable.getTableHeader().setReorderingAllowed(false);\n        jScrollPane1.setViewportView(messageTable);\n\n        sortByLabel.setText(org.openide.util.NbBundle.getMessage(IngestMessagePanel.class, \"IngestMessagePanel.sortByLabel.text\")); // NOI18N\n\n        sortByComboBox.setModel(new javax.swing.DefaultComboBoxModel<String>(new String[] {\n                NbBundle.getMessage(this.getClass(), \"IngestMessagePanel.sortByComboBox.model.time\"),\n                NbBundle.getMessage(this.getClass(), \"IngestMessagePanel.sortByComboBox.model.priority\") })); // NOI18N\n        sortByComboBox.setToolTipText(org.openide.util.NbBundle.getMessage(IngestMessagePanel.class, \"IngestMessagePanel.sortByComboBox.toolTipText\")); // NOI18N\n        sortByComboBox.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                sortByComboBoxActionPerformed(evt);\n            }\n        });\n\n        totalMessagesNameLabel.setText(org.openide.util.NbBundle.getMessage(IngestMessagePanel.class, \"IngestMessagePanel.totalMessagesNameLabel.text\")); // NOI18N\n\n        totalMessagesNameVal.setText(org.openide.util.NbBundle.getMessage(IngestMessagePanel.class, \"IngestMessagePanel.totalMessagesNameVal.text\")); // NOI18N\n\n        totalUniqueMessagesNameLabel.setText(org.openide.util.NbBundle.getMessage(IngestMessagePanel.class, \"IngestMessagePanel.totalUniqueMessagesNameLabel.text\")); // NOI18N\n\n        totalUniqueMessagesNameVal.setText(org.openide.util.NbBundle.getMessage(IngestMessagePanel.class, \"IngestMessagePanel.totalUniqueMessagesNameVal.text\")); // NOI18N\n\n        javax.swing.GroupLayout controlPanelLayout = new javax.swing.GroupLayout(controlPanel);\n        controlPanel.setLayout(controlPanelLayout);\n        controlPanelLayout.setHorizontalGroup(\n            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(controlPanelLayout.createSequentialGroup()\n                .addGap(10, 10, 10)\n                .addComponent(sortByLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(sortByComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(101, 101, 101)\n                .addComponent(totalMessagesNameLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(totalMessagesNameVal, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)\n                .addGap(22, 22, 22)\n                .addComponent(totalUniqueMessagesNameLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(totalUniqueMessagesNameVal, javax.swing.GroupLayout.DEFAULT_SIZE, 24, Short.MAX_VALUE)\n                .addGap(22, 22, 22))\n        );\n        controlPanelLayout.setVerticalGroup(\n            controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(controlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                .addComponent(sortByComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addComponent(sortByLabel)\n                .addComponent(totalUniqueMessagesNameLabel)\n                .addComponent(totalUniqueMessagesNameVal)\n                .addComponent(totalMessagesNameLabel)\n                .addComponent(totalMessagesNameVal))\n        );\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(controlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 357, Short.MAX_VALUE)\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 201, Short.MAX_VALUE)\n                .addGap(0, 0, 0)\n                .addComponent(controlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n        );\n    }","commit_id":"3fe0ea7bfb84c033199b50367573e06511398404","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n        public Component getTableCellRendererComponent(\n                JTable table, Object value,\n                boolean isSelected, boolean hasFocus,\n                int row, int column) {\n            \n            Component cell = super.getTableCellRendererComponent(\n                    table, value, false, false, row, column);\n\n            Font visitedFont = new Font(cell.getFont().getName(), Font.PLAIN, 12);\n            Font notVisitedFont = new Font(cell.getFont().getName(), Font.BOLD, 12);\n            \n            if (column == 3) {\n                String subject = (String)value;\n                setToolTipText(subject);\n                if (tableModel.isVisited(row)) {\n                    cell.setFont(visitedFont);\n                } else {\n                    cell.setFont(notVisitedFont);\n                }\n            }\n\n            final IngestMessageGroup messageGroup = tableModel.getMessageGroup(row);\n            if (messageGroup != null) {\n                MessageType mt = messageGroup.getMessageType();\n                if (mt == MessageType.ERROR) {\n                    cell.setBackground(ERROR_COLOR);\n                } else if (mt == MessageType.WARNING) {\n                    cell.setBackground(Color.orange);\n                } else {\n                    //cell.setBackground(table.getBackground());\n                    cell.setBackground(messageGroup.getColor());\n                }\n            }\n            return cell;\n        }","id":105061,"modified_method":"@Override\n        public Component getTableCellRendererComponent(\n                JTable table, Object value,\n                boolean isSelected, boolean hasFocus,\n                int row, int column) {\n            \n            Component cell = super.getTableCellRendererComponent(\n                    table, value, false, false, row, column);\n\n            Font visitedFont = cell.getFont().deriveFont(Font.PLAIN, 12);\n            Font notVisitedFont = cell.getFont().deriveFont(Font.BOLD, 12);\n            \n            if (column == 3) {\n                String subject = (String)value;\n                setToolTipText(subject);\n                if (tableModel.isVisited(row)) {\n                    cell.setFont(visitedFont);\n                } else {\n                    cell.setFont(notVisitedFont);\n                }\n            }\n\n            final IngestMessageGroup messageGroup = tableModel.getMessageGroup(row);\n            if (messageGroup != null) {\n                MessageType mt = messageGroup.getMessageType();\n                if (mt == MessageType.ERROR) {\n                    cell.setBackground(ERROR_COLOR);\n                } else if (mt == MessageType.WARNING) {\n                    cell.setBackground(Color.orange);\n                } else {\n                    //cell.setBackground(table.getBackground());\n                    cell.setBackground(messageGroup.getColor());\n                }\n            }\n            return cell;\n        }","commit_id":"3fe0ea7bfb84c033199b50367573e06511398404","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n        public void paint(Graphics g) {\n            super.paint(g);\n\n            if (messages == 0) {\n                return;\n            }\n            //paint text\n            Font messagesFont = new java.awt.Font(g.getFont().getName(), Font.PLAIN, fontSize);\n            String messageStr = Integer.toString(messages);\n            final int len = messageStr.length();\n            g.setFont(messagesFont);\n\n            int dx = len * 5 + 5;\n            int x = getSize().width - dx;\n            if (x < 0) {\n                x = 0;\n            }\n            g.setColor(Color.GRAY);\n            //g.fillRect(x, 1, dx, fontSize);\n            g.fillRoundRect(x, 1, dx, fontSize, 2, 2);\n            g.setColor(Color.WHITE);\n            g.drawString(messageStr, x + 2, fontSize);\n        }","id":105062,"modified_method":"@Override\n        public void paint(Graphics g) {\n            super.paint(g);\n\n            if (messages == 0) {\n                return;\n            }\n            //paint text\n            Font messagesFont = g.getFont().deriveFont(Font.PLAIN, fontSize);\n            String messageStr = Integer.toString(messages);\n            final int len = messageStr.length();\n            g.setFont(messagesFont);\n\n            int dx = len * 5 + 5;\n            int x = getSize().width - dx;\n            if (x < 0) {\n                x = 0;\n            }\n            g.setColor(Color.GRAY);\n            //g.fillRect(x, 1, dx, fontSize);\n            g.fillRoundRect(x, 1, dx, fontSize, 2, 2);\n            g.setColor(Color.WHITE);\n            g.drawString(messageStr, x + 2, fontSize);\n        }","commit_id":"3fe0ea7bfb84c033199b50367573e06511398404","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        infoLabel = new javax.swing.JLabel();\n\n        infoLabel.setFont(new java.awt.Font(infoLabel.getFont().getName(), Font.ITALIC, 11));\n        org.openide.awt.Mnemonics.setLocalizedText(infoLabel, org.openide.util.NbBundle.getMessage(DefaultReportConfigurationPanel.class, \"DefaultReportConfigurationPanel.infoLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(infoLabel)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(infoLabel)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n    }","id":105063,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        infoLabel = new javax.swing.JLabel();\n\n        infoLabel.setFont(infoLabel.getFont().deriveFont(Font.ITALIC, 11));\n        org.openide.awt.Mnemonics.setLocalizedText(infoLabel, org.openide.util.NbBundle.getMessage(DefaultReportConfigurationPanel.class, \"DefaultReportConfigurationPanel.infoLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(infoLabel)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(infoLabel)\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n    }","commit_id":"c2964a370f5f35db39635b3df6306417cf997fff","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        closeButton = new javax.swing.JButton();\n        cancelAllButton = new javax.swing.JButton();\n        reportScrollPane = new javax.swing.JScrollPane();\n        reportPanel = new javax.swing.JPanel();\n        titleLabel = new javax.swing.JLabel();\n        titleSeparator = new javax.swing.JSeparator();\n        optionSeparator = new javax.swing.JSeparator();\n\n        setPreferredSize(new java.awt.Dimension(700, 400));\n\n        org.openide.awt.Mnemonics.setLocalizedText(closeButton, org.openide.util.NbBundle.getMessage(ReportGenerationPanel.class, \"ReportGenerationPanel.closeButton.text\")); // NOI18N\n        closeButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                closeButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(cancelAllButton, org.openide.util.NbBundle.getMessage(ReportGenerationPanel.class, \"ReportGenerationPanel.cancelAllButton.text\")); // NOI18N\n        cancelAllButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cancelAllButtonActionPerformed(evt);\n            }\n        });\n\n        reportScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.activeCaptionBorder));\n        reportScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);\n\n        reportPanel.setPreferredSize(new java.awt.Dimension(600, 400));\n\n        javax.swing.GroupLayout reportPanelLayout = new javax.swing.GroupLayout(reportPanel);\n        reportPanel.setLayout(reportPanelLayout);\n        reportPanelLayout.setHorizontalGroup(\n            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 661, Short.MAX_VALUE)\n        );\n        reportPanelLayout.setVerticalGroup(\n            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 400, Short.MAX_VALUE)\n        );\n\n        reportScrollPane.setViewportView(reportPanel);\n\n        titleLabel.setFont(new java.awt.Font(titleLabel.getFont().getName(), Font.BOLD, 11));\n        org.openide.awt.Mnemonics.setLocalizedText(titleLabel, org.openide.util.NbBundle.getMessage(ReportGenerationPanel.class, \"ReportGenerationPanel.titleLabel.text\")); // NOI18N\n\n        titleSeparator.setForeground(new java.awt.Color(0, 0, 0));\n\n        optionSeparator.setForeground(new java.awt.Color(0, 0, 0));\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(optionSeparator)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(reportScrollPane)\n                    .addComponent(titleSeparator, javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                        .addComponent(titleLabel)\n                        .addGap(0, 522, Short.MAX_VALUE))\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(0, 380, Short.MAX_VALUE)\n                        .addComponent(cancelAllButton)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(closeButton)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(titleLabel)\n                .addGap(0, 0, 0)\n                .addComponent(titleSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(18, 18, 18)\n                .addComponent(reportScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)\n                .addGap(18, 18, 18)\n                .addComponent(optionSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(closeButton)\n                    .addComponent(cancelAllButton))\n                .addContainerGap())\n        );\n    }","id":105064,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        closeButton = new javax.swing.JButton();\n        cancelAllButton = new javax.swing.JButton();\n        reportScrollPane = new javax.swing.JScrollPane();\n        reportPanel = new javax.swing.JPanel();\n        titleLabel = new javax.swing.JLabel();\n        titleSeparator = new javax.swing.JSeparator();\n        optionSeparator = new javax.swing.JSeparator();\n\n        setPreferredSize(new java.awt.Dimension(700, 400));\n\n        org.openide.awt.Mnemonics.setLocalizedText(closeButton, org.openide.util.NbBundle.getMessage(ReportGenerationPanel.class, \"ReportGenerationPanel.closeButton.text\")); // NOI18N\n        closeButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                closeButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(cancelAllButton, org.openide.util.NbBundle.getMessage(ReportGenerationPanel.class, \"ReportGenerationPanel.cancelAllButton.text\")); // NOI18N\n        cancelAllButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cancelAllButtonActionPerformed(evt);\n            }\n        });\n\n        reportScrollPane.setBorder(javax.swing.BorderFactory.createLineBorder(java.awt.SystemColor.activeCaptionBorder));\n        reportScrollPane.setVerticalScrollBarPolicy(javax.swing.ScrollPaneConstants.VERTICAL_SCROLLBAR_ALWAYS);\n\n        reportPanel.setPreferredSize(new java.awt.Dimension(600, 400));\n\n        javax.swing.GroupLayout reportPanelLayout = new javax.swing.GroupLayout(reportPanel);\n        reportPanel.setLayout(reportPanelLayout);\n        reportPanelLayout.setHorizontalGroup(\n            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 661, Short.MAX_VALUE)\n        );\n        reportPanelLayout.setVerticalGroup(\n            reportPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGap(0, 400, Short.MAX_VALUE)\n        );\n\n        reportScrollPane.setViewportView(reportPanel);\n\n        titleLabel.setFont(titleLabel.getFont().deriveFont(Font.BOLD, 11));\n        org.openide.awt.Mnemonics.setLocalizedText(titleLabel, org.openide.util.NbBundle.getMessage(ReportGenerationPanel.class, \"ReportGenerationPanel.titleLabel.text\")); // NOI18N\n\n        titleSeparator.setForeground(new java.awt.Color(0, 0, 0));\n\n        optionSeparator.setForeground(new java.awt.Color(0, 0, 0));\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(optionSeparator)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(reportScrollPane)\n                    .addComponent(titleSeparator, javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                        .addComponent(titleLabel)\n                        .addGap(0, 522, Short.MAX_VALUE))\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(0, 380, Short.MAX_VALUE)\n                        .addComponent(cancelAllButton)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(closeButton)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(titleLabel)\n                .addGap(0, 0, 0)\n                .addComponent(titleSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(18, 18, 18)\n                .addComponent(reportScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 290, Short.MAX_VALUE)\n                .addGap(18, 18, 18)\n                .addComponent(optionSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(closeButton)\n                    .addComponent(cancelAllButton))\n                .addContainerGap())\n        );\n    }","commit_id":"c2964a370f5f35db39635b3df6306417cf997fff","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        reportProgressBar = new javax.swing.JProgressBar();\n        cancelButton = new javax.swing.JButton();\n        reportLabel = new javax.swing.JLabel();\n        pathLabel = new javax.swing.JLabel();\n        processingLabel = new javax.swing.JLabel();\n        separationLabel = new javax.swing.JLabel();\n\n        setMinimumSize(new java.awt.Dimension(486, 68));\n\n        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/report/images/report_loading.png\"))); // NOI18N NON-NLS\n        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(ReportProgressPanel.class, \"ReportProgressPanel.cancelButton.text\")); // NOI18N\n        cancelButton.setToolTipText(org.openide.util.NbBundle.getMessage(ReportProgressPanel.class, \"ReportProgressPanel.cancelButton.toolTipText\")); // NOI18N\n        cancelButton.setBorder(null);\n        cancelButton.setBorderPainted(false);\n        cancelButton.setContentAreaFilled(false);\n        cancelButton.setFocusPainted(false);\n        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {\n            public void mouseEntered(java.awt.event.MouseEvent evt) {\n                cancelButtonMouseEntered(evt);\n            }\n            public void mouseExited(java.awt.event.MouseEvent evt) {\n                cancelButtonMouseExited(evt);\n            }\n        });\n        cancelButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cancelButtonActionPerformed(evt);\n            }\n        });\n\n        reportLabel.setFont(new java.awt.Font(reportLabel.getFont().getName(), Font.BOLD, 11));\n        org.openide.awt.Mnemonics.setLocalizedText(reportLabel, org.openide.util.NbBundle.getMessage(ReportProgressPanel.class, \"ReportProgressPanel.reportLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(pathLabel, org.openide.util.NbBundle.getMessage(ReportProgressPanel.class, \"ReportProgressPanel.pathLabel.text\")); // NOI18N\n\n        processingLabel.setFont(new java.awt.Font(processingLabel.getFont().getName(), Font.ITALIC, 10));\n        org.openide.awt.Mnemonics.setLocalizedText(processingLabel, org.openide.util.NbBundle.getMessage(ReportProgressPanel.class, \"ReportProgressPanel.processingLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(separationLabel, org.openide.util.NbBundle.getMessage(ReportProgressPanel.class, \"ReportProgressPanel.separationLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(processingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(reportProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(cancelButton))\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(reportLabel)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(separationLabel)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(pathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(reportProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(reportLabel)\n                    .addComponent(pathLabel)\n                    .addComponent(separationLabel))\n                .addGap(0, 0, 0)\n                .addComponent(processingLabel)\n                .addContainerGap(20, Short.MAX_VALUE))\n        );\n    }","id":105065,"modified_method":"/**\n     * This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        reportProgressBar = new javax.swing.JProgressBar();\n        cancelButton = new javax.swing.JButton();\n        reportLabel = new javax.swing.JLabel();\n        pathLabel = new javax.swing.JLabel();\n        processingLabel = new javax.swing.JLabel();\n        separationLabel = new javax.swing.JLabel();\n\n        setMinimumSize(new java.awt.Dimension(486, 68));\n\n        cancelButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/report/images/report_loading.png\"))); // NOI18N NON-NLS\n        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(ReportProgressPanel.class, \"ReportProgressPanel.cancelButton.text\")); // NOI18N\n        cancelButton.setToolTipText(org.openide.util.NbBundle.getMessage(ReportProgressPanel.class, \"ReportProgressPanel.cancelButton.toolTipText\")); // NOI18N\n        cancelButton.setBorder(null);\n        cancelButton.setBorderPainted(false);\n        cancelButton.setContentAreaFilled(false);\n        cancelButton.setFocusPainted(false);\n        cancelButton.addMouseListener(new java.awt.event.MouseAdapter() {\n            public void mouseEntered(java.awt.event.MouseEvent evt) {\n                cancelButtonMouseEntered(evt);\n            }\n            public void mouseExited(java.awt.event.MouseEvent evt) {\n                cancelButtonMouseExited(evt);\n            }\n        });\n        cancelButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cancelButtonActionPerformed(evt);\n            }\n        });\n\n        reportLabel.setFont(reportLabel.getFont().deriveFont(Font.BOLD, 11));\n        org.openide.awt.Mnemonics.setLocalizedText(reportLabel, org.openide.util.NbBundle.getMessage(ReportProgressPanel.class, \"ReportProgressPanel.reportLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(pathLabel, org.openide.util.NbBundle.getMessage(ReportProgressPanel.class, \"ReportProgressPanel.pathLabel.text\")); // NOI18N\n\n        processingLabel.setFont(processingLabel.getFont().deriveFont(Font.ITALIC, 10));\n        org.openide.awt.Mnemonics.setLocalizedText(processingLabel, org.openide.util.NbBundle.getMessage(ReportProgressPanel.class, \"ReportProgressPanel.processingLabel.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(separationLabel, org.openide.util.NbBundle.getMessage(ReportProgressPanel.class, \"ReportProgressPanel.separationLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(processingLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(reportProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(cancelButton))\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(reportLabel)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(separationLabel)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(pathLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 548, Short.MAX_VALUE)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                    .addComponent(cancelButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addComponent(reportProgressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(reportLabel)\n                    .addComponent(pathLabel)\n                    .addComponent(separationLabel))\n                .addGap(0, 0, 0)\n                .addComponent(processingLabel)\n                .addContainerGap(20, Short.MAX_VALUE))\n        );\n    }","commit_id":"c2964a370f5f35db39635b3df6306417cf997fff","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/** This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jTextArea1 = new javax.swing.JTextArea();\n        casePropLabel = new javax.swing.JLabel();\n        caseNameLabel = new javax.swing.JLabel();\n        crDateLabel = new javax.swing.JLabel();\n        caseDirLabel = new javax.swing.JLabel();\n        crDateTextField = new javax.swing.JTextField();\n        caseNameTextField = new javax.swing.JTextField();\n        updateCaseNameButton = new javax.swing.JButton();\n        genInfoLabel = new javax.swing.JLabel();\n        imgInfoLabel = new javax.swing.JLabel();\n        OKButton = new javax.swing.JButton();\n        imagesTableScrollPane = new javax.swing.JScrollPane();\n        imagesTable = new javax.swing.JTable();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        caseDirTextArea = new javax.swing.JTextArea();\n        deleteCaseButton = new javax.swing.JButton();\n        caseNumberLabel = new javax.swing.JLabel();\n        examinerLabel = new javax.swing.JLabel();\n        caseNumberTextField = new javax.swing.JTextField();\n        examinerTextField = new javax.swing.JTextField();\n\n        jTextArea1.setColumns(20);\n        jTextArea1.setRows(5);\n        jScrollPane1.setViewportView(jTextArea1);\n\n        casePropLabel.setFont(new Font(casePropLabel.getFont().getName(), Font.BOLD, 24));\n        casePropLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n        casePropLabel.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.casePropLabel.text\")); // NOI18N\n\n        caseNameLabel.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.caseNameLabel.text\")); // NOI18N\n\n        crDateLabel.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.crDateLabel.text\")); // NOI18N\n\n        caseDirLabel.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.caseDirLabel.text\")); // NOI18N\n\n        crDateTextField.setEditable(false);\n        crDateTextField.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.crDateTextField.text\")); // NOI18N\n\n        caseNameTextField.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.caseNameTextField.text\")); // NOI18N\n\n        updateCaseNameButton.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.updateCaseNameButton.text\")); // NOI18N\n        updateCaseNameButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                updateCaseNameButtonActionPerformed(evt);\n            }\n        });\n\n        genInfoLabel.setFont(new java.awt.Font(genInfoLabel.getFont().getName(), Font.BOLD, 14));\n        genInfoLabel.setText(\n                org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.genInfoLabel.text\")); // NOI18N\n\n        imgInfoLabel.setFont(new java.awt.Font(imgInfoLabel.getFont().getName(), Font.BOLD, 14));\n        imgInfoLabel.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.imgInfoLabel.text\")); // NOI18N\n\n        OKButton.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.OKButton.text\")); // NOI18N\n\n        imagesTable.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n                \"Path\", \"Remove\" //NON-NLS\n            }\n        ) {\n            boolean[] canEdit = new boolean [] {\n                false, true\n            };\n\n            public boolean isCellEditable(int rowIndex, int columnIndex) {\n                return canEdit [columnIndex];\n            }\n        });\n        imagesTable.setShowHorizontalLines(false);\n        imagesTable.setShowVerticalLines(false);\n        imagesTable.getTableHeader().setReorderingAllowed(false);\n        imagesTable.setUpdateSelectionOnSort(false);\n        imagesTableScrollPane.setViewportView(imagesTable);\n\n        caseDirTextArea.setBackground(new java.awt.Color(240, 240, 240));\n        caseDirTextArea.setColumns(20);\n        caseDirTextArea.setEditable(false);\n        caseDirTextArea.setRows(1);\n        caseDirTextArea.setRequestFocusEnabled(false);\n        jScrollPane2.setViewportView(caseDirTextArea);\n\n        deleteCaseButton.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.deleteCaseButton.text\")); // NOI18N\n        deleteCaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                deleteCaseButtonActionPerformed(evt);\n            }\n        });\n\n        caseNumberLabel.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.caseNumberLabel.text\")); // NOI18N\n\n        examinerLabel.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.examinerLabel.text\")); // NOI18N\n\n        caseNumberTextField.setEditable(false);\n        caseNumberTextField.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.caseNumberTextField.text\")); // NOI18N\n\n        examinerTextField.setEditable(false);\n        examinerTextField.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.examinerTextField.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(casePropLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)\n                    .addComponent(genInfoLabel)\n                    .addComponent(imgInfoLabel)\n                    .addComponent(imagesTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(181, 181, 181)\n                        .addComponent(OKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addGroup(layout.createSequentialGroup()\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addComponent(caseNameLabel)\n                                    .addComponent(caseNumberLabel))\n                                .addGap(25, 25, 25)\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addComponent(caseNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)\n                                    .addComponent(caseNumberTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)))\n                            .addGroup(layout.createSequentialGroup()\n                                .addComponent(examinerLabel)\n                                .addGap(45, 45, 45)\n                                .addComponent(examinerTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))\n                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addComponent(caseDirLabel)\n                                    .addComponent(crDateLabel))\n                                .addGap(18, 18, 18)\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)\n                                    .addComponent(crDateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(updateCaseNameButton)\n                            .addComponent(deleteCaseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(casePropLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(18, 18, 18)\n                .addComponent(genInfoLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(caseNameLabel)\n                    .addComponent(caseNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(updateCaseNameButton))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(caseNumberLabel)\n                    .addComponent(caseNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(18, 18, 18)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(examinerLabel)\n                    .addComponent(examinerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(crDateLabel)\n                    .addComponent(crDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(caseDirLabel)\n                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addGap(39, 39, 39)\n                        .addComponent(imgInfoLabel))\n                    .addComponent(deleteCaseButton))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(imagesTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(OKButton)\n                .addContainerGap())\n        );\n    }","id":105066,"modified_method":"/** This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jScrollPane1 = new javax.swing.JScrollPane();\n        jTextArea1 = new javax.swing.JTextArea();\n        casePropLabel = new javax.swing.JLabel();\n        caseNameLabel = new javax.swing.JLabel();\n        crDateLabel = new javax.swing.JLabel();\n        caseDirLabel = new javax.swing.JLabel();\n        crDateTextField = new javax.swing.JTextField();\n        caseNameTextField = new javax.swing.JTextField();\n        updateCaseNameButton = new javax.swing.JButton();\n        genInfoLabel = new javax.swing.JLabel();\n        imgInfoLabel = new javax.swing.JLabel();\n        OKButton = new javax.swing.JButton();\n        imagesTableScrollPane = new javax.swing.JScrollPane();\n        imagesTable = new javax.swing.JTable();\n        jScrollPane2 = new javax.swing.JScrollPane();\n        caseDirTextArea = new javax.swing.JTextArea();\n        deleteCaseButton = new javax.swing.JButton();\n        caseNumberLabel = new javax.swing.JLabel();\n        examinerLabel = new javax.swing.JLabel();\n        caseNumberTextField = new javax.swing.JTextField();\n        examinerTextField = new javax.swing.JTextField();\n\n        jTextArea1.setColumns(20);\n        jTextArea1.setRows(5);\n        jScrollPane1.setViewportView(jTextArea1);\n\n        casePropLabel.setFont(casePropLabel.getFont().deriveFont(Font.BOLD, 24));\n        casePropLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);\n        casePropLabel.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.casePropLabel.text\")); // NOI18N\n\n        caseNameLabel.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.caseNameLabel.text\")); // NOI18N\n\n        crDateLabel.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.crDateLabel.text\")); // NOI18N\n\n        caseDirLabel.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.caseDirLabel.text\")); // NOI18N\n\n        crDateTextField.setEditable(false);\n        crDateTextField.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.crDateTextField.text\")); // NOI18N\n\n        caseNameTextField.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.caseNameTextField.text\")); // NOI18N\n\n        updateCaseNameButton.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.updateCaseNameButton.text\")); // NOI18N\n        updateCaseNameButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                updateCaseNameButtonActionPerformed(evt);\n            }\n        });\n\n        genInfoLabel.setFont(genInfoLabel.getFont().deriveFont(Font.BOLD, 14));\n        genInfoLabel.setText(\n                org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.genInfoLabel.text\")); // NOI18N\n\n        imgInfoLabel.setFont(imgInfoLabel.getFont().deriveFont(Font.BOLD, 14));\n        imgInfoLabel.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.imgInfoLabel.text\")); // NOI18N\n\n        OKButton.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.OKButton.text\")); // NOI18N\n\n        imagesTable.setModel(new javax.swing.table.DefaultTableModel(\n            new Object [][] {\n\n            },\n            new String [] {\n                \"Path\", \"Remove\" //NON-NLS\n            }\n        ) {\n            boolean[] canEdit = new boolean [] {\n                false, true\n            };\n\n            public boolean isCellEditable(int rowIndex, int columnIndex) {\n                return canEdit [columnIndex];\n            }\n        });\n        imagesTable.setShowHorizontalLines(false);\n        imagesTable.setShowVerticalLines(false);\n        imagesTable.getTableHeader().setReorderingAllowed(false);\n        imagesTable.setUpdateSelectionOnSort(false);\n        imagesTableScrollPane.setViewportView(imagesTable);\n\n        caseDirTextArea.setBackground(new java.awt.Color(240, 240, 240));\n        caseDirTextArea.setColumns(20);\n        caseDirTextArea.setEditable(false);\n        caseDirTextArea.setRows(1);\n        caseDirTextArea.setRequestFocusEnabled(false);\n        jScrollPane2.setViewportView(caseDirTextArea);\n\n        deleteCaseButton.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.deleteCaseButton.text\")); // NOI18N\n        deleteCaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                deleteCaseButtonActionPerformed(evt);\n            }\n        });\n\n        caseNumberLabel.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.caseNumberLabel.text\")); // NOI18N\n\n        examinerLabel.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.examinerLabel.text\")); // NOI18N\n\n        caseNumberTextField.setEditable(false);\n        caseNumberTextField.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.caseNumberTextField.text\")); // NOI18N\n\n        examinerTextField.setEditable(false);\n        examinerTextField.setText(org.openide.util.NbBundle.getMessage(CasePropertiesForm.class, \"CasePropertiesForm.examinerTextField.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(casePropLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)\n                    .addComponent(genInfoLabel)\n                    .addComponent(imgInfoLabel)\n                    .addComponent(imagesTableScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 440, Short.MAX_VALUE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(181, 181, 181)\n                        .addComponent(OKButton, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                            .addGroup(layout.createSequentialGroup()\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addComponent(caseNameLabel)\n                                    .addComponent(caseNumberLabel))\n                                .addGap(25, 25, 25)\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addComponent(caseNameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)\n                                    .addComponent(caseNumberTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)))\n                            .addGroup(layout.createSequentialGroup()\n                                .addComponent(examinerLabel)\n                                .addGap(45, 45, 45)\n                                .addComponent(examinerTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))\n                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addComponent(caseDirLabel)\n                                    .addComponent(crDateLabel))\n                                .addGap(18, 18, 18)\n                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)\n                                    .addComponent(crDateTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(updateCaseNameButton)\n                            .addComponent(deleteCaseButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(casePropLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addGap(18, 18, 18)\n                .addComponent(genInfoLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(caseNameLabel)\n                    .addComponent(caseNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(updateCaseNameButton))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(caseNumberLabel)\n                    .addComponent(caseNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(18, 18, 18)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(examinerLabel)\n                    .addComponent(examinerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(crDateLabel)\n                    .addComponent(crDateTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                            .addComponent(caseDirLabel)\n                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addGap(39, 39, 39)\n                        .addComponent(imgInfoLabel))\n                    .addComponent(deleteCaseButton))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(imagesTableScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 170, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(OKButton)\n                .addContainerGap())\n        );\n    }","commit_id":"3e8b8e15ce709c594912cc6bb18ccd8205681cff","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        closeButton = new javax.swing.JButton();\n        editorPanel = new javax.swing.JPanel();\n        newCaseButton = new javax.swing.JButton();\n        openRecentButton = new javax.swing.JButton();\n        createNewLabel = new javax.swing.JLabel();\n        openRecentLabel = new javax.swing.JLabel();\n        openCaseButton = new javax.swing.JButton();\n        openLabel = new javax.swing.JLabel();\n        autopsyLogo = new javax.swing.JLabel();\n        this.autopsyLogo.setText(\"\");\n\n        closeButton.setText(org.openide.util.NbBundle.getMessage(CueBannerPanel.class, \"CueBannerPanel.closeButton.text\")); // NOI18N\n\n        newCaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/casemodule/btn_icon_create_new_case.png\"))); // NOI18N NON-NLS\n        newCaseButton.setText(org.openide.util.NbBundle.getMessage(CueBannerPanel.class, \"CueBannerPanel.newCaseButton.text\")); // NOI18N\n        newCaseButton.setBorder(null);\n        newCaseButton.setBorderPainted(false);\n        newCaseButton.setContentAreaFilled(false);\n        newCaseButton.setPreferredSize(new java.awt.Dimension(70, 70));\n        newCaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                newCaseButtonActionPerformed(evt);\n            }\n        });\n\n        openRecentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/casemodule/btn_icon_open_recent.png\"))); // NOI18N NON-NLS\n        openRecentButton.setText(org.openide.util.NbBundle.getMessage(CueBannerPanel.class, \"CueBannerPanel.openRecentButton.text\")); // NOI18N\n        openRecentButton.setBorder(null);\n        openRecentButton.setBorderPainted(false);\n        openRecentButton.setContentAreaFilled(false);\n        openRecentButton.setPreferredSize(new java.awt.Dimension(70, 70));\n        openRecentButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                openRecentButtonActionPerformed(evt);\n            }\n        });\n\n        createNewLabel.setFont(new java.awt.Font(createNewLabel.getFont().getName(), Font.PLAIN, 13));\n        createNewLabel.setText(org.openide.util.NbBundle.getMessage(CueBannerPanel.class, \"CueBannerPanel.createNewLabel.text\")); // NOI18N\n\n        openRecentLabel.setFont(new java.awt.Font(openRecentLabel.getFont().getName(), Font.PLAIN, 13));\n        openRecentLabel.setText(org.openide.util.NbBundle.getMessage(CueBannerPanel.class, \"CueBannerPanel.openRecentLabel.text\")); // NOI18N\n\n        openCaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/casemodule/btn_icon_open_existing.png\"))); // NOI18N NON-NLS\n        openCaseButton.setText(org.openide.util.NbBundle.getMessage(CueBannerPanel.class, \"CueBannerPanel.openCaseButton.text\")); // NOI18N\n        openCaseButton.setBorder(null);\n        openCaseButton.setBorderPainted(false);\n        openCaseButton.setContentAreaFilled(false);\n        openCaseButton.setMargin(new java.awt.Insets(1, 1, 1, 1));\n        openCaseButton.setPreferredSize(new java.awt.Dimension(70, 70));\n        openCaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                openCaseButtonActionPerformed(evt);\n            }\n        });\n\n        openLabel.setFont(new java.awt.Font(openLabel.getFont().getName(), Font.PLAIN, 13));\n        openLabel.setText(org.openide.util.NbBundle.getMessage(CueBannerPanel.class, \"CueBannerPanel.openLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout editorPanelLayout = new javax.swing.GroupLayout(editorPanel);\n        editorPanel.setLayout(editorPanelLayout);\n        editorPanelLayout.setHorizontalGroup(\n            editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(editorPanelLayout.createSequentialGroup()\n                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(editorPanelLayout.createSequentialGroup()\n                        .addComponent(newCaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(createNewLabel))\n                    .addGroup(editorPanelLayout.createSequentialGroup()\n                        .addComponent(openRecentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(openRecentLabel))\n                    .addGroup(editorPanelLayout.createSequentialGroup()\n                        .addComponent(openCaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(openLabel)))\n                .addContainerGap(60, Short.MAX_VALUE))\n        );\n        editorPanelLayout.setVerticalGroup(\n            editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(editorPanelLayout.createSequentialGroup()\n                .addGap(32, 32, 32)\n                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)\n                    .addComponent(createNewLabel)\n                    .addComponent(newCaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)\n                    .addComponent(openRecentLabel)\n                    .addComponent(openRecentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(0, 0, Short.MAX_VALUE)\n                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)\n                    .addComponent(openLabel)\n                    .addComponent(openCaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addContainerGap(25, Short.MAX_VALUE))\n        );\n\n        autopsyLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/casemodule/welcome_logo.png\"))); // NOI18N NON-NLS\n        autopsyLogo.setText(org.openide.util.NbBundle.getMessage(CueBannerPanel.class, \"CueBannerPanel.autopsyLogo.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(autopsyLogo)\n                .addGap(29, 29, 29)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(editorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(autopsyLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(editorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGap(18, 18, 18)\n                        .addComponent(closeButton)))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n    }","id":105067,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        closeButton = new javax.swing.JButton();\n        editorPanel = new javax.swing.JPanel();\n        newCaseButton = new javax.swing.JButton();\n        openRecentButton = new javax.swing.JButton();\n        createNewLabel = new javax.swing.JLabel();\n        openRecentLabel = new javax.swing.JLabel();\n        openCaseButton = new javax.swing.JButton();\n        openLabel = new javax.swing.JLabel();\n        autopsyLogo = new javax.swing.JLabel();\n        this.autopsyLogo.setText(\"\");\n\n        closeButton.setText(org.openide.util.NbBundle.getMessage(CueBannerPanel.class, \"CueBannerPanel.closeButton.text\")); // NOI18N\n\n        newCaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/casemodule/btn_icon_create_new_case.png\"))); // NOI18N NON-NLS\n        newCaseButton.setText(org.openide.util.NbBundle.getMessage(CueBannerPanel.class, \"CueBannerPanel.newCaseButton.text\")); // NOI18N\n        newCaseButton.setBorder(null);\n        newCaseButton.setBorderPainted(false);\n        newCaseButton.setContentAreaFilled(false);\n        newCaseButton.setPreferredSize(new java.awt.Dimension(70, 70));\n        newCaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                newCaseButtonActionPerformed(evt);\n            }\n        });\n\n        openRecentButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/casemodule/btn_icon_open_recent.png\"))); // NOI18N NON-NLS\n        openRecentButton.setText(org.openide.util.NbBundle.getMessage(CueBannerPanel.class, \"CueBannerPanel.openRecentButton.text\")); // NOI18N\n        openRecentButton.setBorder(null);\n        openRecentButton.setBorderPainted(false);\n        openRecentButton.setContentAreaFilled(false);\n        openRecentButton.setPreferredSize(new java.awt.Dimension(70, 70));\n        openRecentButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                openRecentButtonActionPerformed(evt);\n            }\n        });\n\n        createNewLabel.setFont(createNewLabel.getFont().deriveFont(Font.PLAIN, 13));\n        createNewLabel.setText(org.openide.util.NbBundle.getMessage(CueBannerPanel.class, \"CueBannerPanel.createNewLabel.text\")); // NOI18N\n\n        openRecentLabel.setFont(openRecentLabel.getFont().deriveFont(Font.PLAIN, 13));\n        openRecentLabel.setText(org.openide.util.NbBundle.getMessage(CueBannerPanel.class, \"CueBannerPanel.openRecentLabel.text\")); // NOI18N\n\n        openCaseButton.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/casemodule/btn_icon_open_existing.png\"))); // NOI18N NON-NLS\n        openCaseButton.setText(org.openide.util.NbBundle.getMessage(CueBannerPanel.class, \"CueBannerPanel.openCaseButton.text\")); // NOI18N\n        openCaseButton.setBorder(null);\n        openCaseButton.setBorderPainted(false);\n        openCaseButton.setContentAreaFilled(false);\n        openCaseButton.setMargin(new java.awt.Insets(1, 1, 1, 1));\n        openCaseButton.setPreferredSize(new java.awt.Dimension(70, 70));\n        openCaseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                openCaseButtonActionPerformed(evt);\n            }\n        });\n\n        openLabel.setFont(openLabel.getFont().deriveFont(Font.PLAIN, 13));\n        openLabel.setText(org.openide.util.NbBundle.getMessage(CueBannerPanel.class, \"CueBannerPanel.openLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout editorPanelLayout = new javax.swing.GroupLayout(editorPanel);\n        editorPanel.setLayout(editorPanelLayout);\n        editorPanelLayout.setHorizontalGroup(\n            editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(editorPanelLayout.createSequentialGroup()\n                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addGroup(editorPanelLayout.createSequentialGroup()\n                        .addComponent(newCaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(createNewLabel))\n                    .addGroup(editorPanelLayout.createSequentialGroup()\n                        .addComponent(openRecentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(openRecentLabel))\n                    .addGroup(editorPanelLayout.createSequentialGroup()\n                        .addComponent(openCaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(openLabel)))\n                .addContainerGap(60, Short.MAX_VALUE))\n        );\n        editorPanelLayout.setVerticalGroup(\n            editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(editorPanelLayout.createSequentialGroup()\n                .addGap(32, 32, 32)\n                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)\n                    .addComponent(createNewLabel)\n                    .addComponent(newCaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)\n                    .addComponent(openRecentLabel)\n                    .addComponent(openRecentButton, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(0, 0, Short.MAX_VALUE)\n                .addGroup(editorPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)\n                    .addComponent(openLabel)\n                    .addComponent(openCaseButton, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addContainerGap(25, Short.MAX_VALUE))\n        );\n\n        autopsyLogo.setIcon(new javax.swing.ImageIcon(getClass().getResource(\"/org/sleuthkit/autopsy/casemodule/welcome_logo.png\"))); // NOI18N NON-NLS\n        autopsyLogo.setText(org.openide.util.NbBundle.getMessage(CueBannerPanel.class, \"CueBannerPanel.autopsyLogo.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(autopsyLogo)\n                .addGap(29, 29, 29)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(editorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(autopsyLogo, javax.swing.GroupLayout.PREFERRED_SIZE, 257, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(editorPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addGap(18, 18, 18)\n                        .addComponent(closeButton)))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n    }","commit_id":"3e8b8e15ce709c594912cc6bb18ccd8205681cff","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\n            JPanel panel = new JPanel(new BorderLayout());\n            JLabel label = new JLabel();\n            if(index == physical.size() - 1) {\n                panel.add(new JSeparator(JSeparator.HORIZONTAL), BorderLayout.SOUTH);\n            }\n            \n            if (isSelected) {\n                label.setBackground(list.getSelectionBackground());\n                label.setForeground(list.getSelectionForeground());\n            } else {\n                label.setBackground(list.getBackground());\n                label.setForeground(list.getForeground());\n            }\n            \n            String localDiskString = value.toString();\n            if(localDiskString.equals(LOADING)) {\n                Font font = new Font(label.getFont().getName(), Font.ITALIC, label.getFont().getSize()); \n                label.setText(LOADING);\n                label.setFont(font);\n                label.setBackground(Color.GRAY);\n            } else {\n                label.setText(value.toString());\n            }\n            label.setOpaque(true);\n            label.setBorder(new EmptyBorder(2, 2, 2, 2));\n            \n            panel.add(label, BorderLayout.CENTER);\n            return panel;\n        }","id":105068,"modified_method":"@Override\n        public Component getListCellRendererComponent(JList list, Object value, int index, boolean isSelected, boolean cellHasFocus) {\n            JPanel panel = new JPanel(new BorderLayout());\n            JLabel label = new JLabel();\n            if(index == physical.size() - 1) {\n                panel.add(new JSeparator(JSeparator.HORIZONTAL), BorderLayout.SOUTH);\n            }\n            \n            if (isSelected) {\n                label.setBackground(list.getSelectionBackground());\n                label.setForeground(list.getSelectionForeground());\n            } else {\n                label.setBackground(list.getBackground());\n                label.setForeground(list.getForeground());\n            }\n            \n            String localDiskString = value.toString();\n            if(localDiskString.equals(LOADING)) {\n                label.setText(LOADING);\n                label.setFont(label.getFont().deriveFont(Font.ITALIC));\n                label.setBackground(Color.GRAY);\n            } else {\n                label.setText(value.toString());\n            }\n            label.setOpaque(true);\n            label.setBorder(new EmptyBorder(2, 2, 2, 2));\n            \n            panel.add(label, BorderLayout.CENTER);\n            return panel;\n        }","commit_id":"3e8b8e15ce709c594912cc6bb18ccd8205681cff","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        buttonPanel = new javax.swing.JPanel();\n        selectButton = new javax.swing.JButton();\n        cancelButton = new javax.swing.JButton();\n        containerPanel = new javax.swing.JPanel();\n        pathNameTextField = new javax.swing.JTextField();\n        browseButton = new javax.swing.JButton();\n        titleLabel = new javax.swing.JLabel();\n        titleSeparator = new javax.swing.JSeparator();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n\n        org.openide.awt.Mnemonics.setLocalizedText(selectButton, org.openide.util.NbBundle.getMessage(MissingImageDialog.class, \"MissingImageDialog.selectButton.text\")); // NOI18N\n        selectButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                selectButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(MissingImageDialog.class, \"MissingImageDialog.cancelButton.text\")); // NOI18N\n        cancelButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cancelButtonActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);\n        buttonPanel.setLayout(buttonPanelLayout);\n        buttonPanelLayout.setHorizontalGroup(\n            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(selectButton)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(cancelButton)\n                .addContainerGap())\n        );\n        buttonPanelLayout.setVerticalGroup(\n            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(buttonPanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(selectButton)\n                    .addComponent(cancelButton))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        pathNameTextField.setText(org.openide.util.NbBundle.getMessage(MissingImageDialog.class, \"MissingImageDialog.pathNameTextField.text\")); // NOI18N\n        pathNameTextField.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                pathNameTextFieldActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(MissingImageDialog.class, \"MissingImageDialog.browseButton.text\")); // NOI18N\n        browseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                browseButtonActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout containerPanelLayout = new javax.swing.GroupLayout(containerPanel);\n        containerPanel.setLayout(containerPanelLayout);\n        containerPanelLayout.setHorizontalGroup(\n            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(containerPanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(pathNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(browseButton)\n                .addContainerGap(83, Short.MAX_VALUE))\n        );\n        containerPanelLayout.setVerticalGroup(\n            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(containerPanelLayout.createSequentialGroup()\n                .addGap(18, 18, 18)\n                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(pathNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(browseButton))\n                .addContainerGap(62, Short.MAX_VALUE))\n        );\n\n        titleLabel.setFont(new java.awt.Font(titleLabel.getFont().getName(), Font.BOLD, 12));\n        org.openide.awt.Mnemonics.setLocalizedText(titleLabel, org.openide.util.NbBundle\n                .getMessage(MissingImageDialog.class, \"MissingImageDialog.titleLabel.text\")); // NOI18N\n\n        titleSeparator.setForeground(new java.awt.Color(102, 102, 102));\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(titleLabel)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(titleSeparator)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(titleLabel)\n                    .addComponent(titleSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(containerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n        );\n\n        pack();\n    }","id":105069,"modified_method":"@SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        buttonPanel = new javax.swing.JPanel();\n        selectButton = new javax.swing.JButton();\n        cancelButton = new javax.swing.JButton();\n        containerPanel = new javax.swing.JPanel();\n        pathNameTextField = new javax.swing.JTextField();\n        browseButton = new javax.swing.JButton();\n        titleLabel = new javax.swing.JLabel();\n        titleSeparator = new javax.swing.JSeparator();\n\n        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);\n\n        org.openide.awt.Mnemonics.setLocalizedText(selectButton, org.openide.util.NbBundle.getMessage(MissingImageDialog.class, \"MissingImageDialog.selectButton.text\")); // NOI18N\n        selectButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                selectButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(cancelButton, org.openide.util.NbBundle.getMessage(MissingImageDialog.class, \"MissingImageDialog.cancelButton.text\")); // NOI18N\n        cancelButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                cancelButtonActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout buttonPanelLayout = new javax.swing.GroupLayout(buttonPanel);\n        buttonPanel.setLayout(buttonPanelLayout);\n        buttonPanelLayout.setHorizontalGroup(\n            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, buttonPanelLayout.createSequentialGroup()\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                .addComponent(selectButton)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(cancelButton)\n                .addContainerGap())\n        );\n        buttonPanelLayout.setVerticalGroup(\n            buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(buttonPanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(buttonPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(selectButton)\n                    .addComponent(cancelButton))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n\n        pathNameTextField.setText(org.openide.util.NbBundle.getMessage(MissingImageDialog.class, \"MissingImageDialog.pathNameTextField.text\")); // NOI18N\n        pathNameTextField.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                pathNameTextFieldActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(browseButton, org.openide.util.NbBundle.getMessage(MissingImageDialog.class, \"MissingImageDialog.browseButton.text\")); // NOI18N\n        browseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                browseButtonActionPerformed(evt);\n            }\n        });\n\n        javax.swing.GroupLayout containerPanelLayout = new javax.swing.GroupLayout(containerPanel);\n        containerPanel.setLayout(containerPanelLayout);\n        containerPanelLayout.setHorizontalGroup(\n            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(containerPanelLayout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(pathNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 285, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(browseButton)\n                .addContainerGap(83, Short.MAX_VALUE))\n        );\n        containerPanelLayout.setVerticalGroup(\n            containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(containerPanelLayout.createSequentialGroup()\n                .addGap(18, 18, 18)\n                .addGroup(containerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(pathNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(browseButton))\n                .addContainerGap(62, Short.MAX_VALUE))\n        );\n\n        titleLabel.setFont(titleLabel.getFont().deriveFont(Font.BOLD, 12));\n        org.openide.awt.Mnemonics.setLocalizedText(titleLabel, org.openide.util.NbBundle\n                .getMessage(MissingImageDialog.class, \"MissingImageDialog.titleLabel.text\")); // NOI18N\n\n        titleSeparator.setForeground(new java.awt.Color(102, 102, 102));\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());\n        getContentPane().setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addComponent(buttonPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(containerPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                    .addGroup(layout.createSequentialGroup()\n                        .addComponent(titleLabel)\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(titleSeparator)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)\n                    .addComponent(titleLabel)\n                    .addComponent(titleSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 7, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addComponent(containerPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(buttonPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n        );\n\n        pack();\n    }","commit_id":"3e8b8e15ce709c594912cc6bb18ccd8205681cff","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/** This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jLabel1 = new javax.swing.JLabel();\n        caseNameLabel = new javax.swing.JLabel();\n        caseDirLabel = new javax.swing.JLabel();\n        caseNameTextField = new javax.swing.JTextField();\n        caseParentDirTextField = new javax.swing.JTextField();\n        caseDirBrowseButton = new javax.swing.JButton();\n        jLabel2 = new javax.swing.JLabel();\n        caseDirTextField = new javax.swing.JTextField();\n\n        jLabel1.setFont(new java.awt.Font(jLabel1.getFont().getName(), Font.BOLD, 14));\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle\n                .getMessage(NewCaseVisualPanel1.class, \"NewCaseVisualPanel1.jLabel1.text_1\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(caseNameLabel, org.openide.util.NbBundle.getMessage(NewCaseVisualPanel1.class, \"NewCaseVisualPanel1.caseNameLabel.text_1\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(caseDirLabel, org.openide.util.NbBundle.getMessage(NewCaseVisualPanel1.class, \"NewCaseVisualPanel1.caseDirLabel.text\")); // NOI18N\n\n        caseNameTextField.setText(org.openide.util.NbBundle.getMessage(NewCaseVisualPanel1.class, \"NewCaseVisualPanel1.caseNameTextField.text_1\")); // NOI18N\n\n        caseParentDirTextField.setText(org.openide.util.NbBundle.getMessage(NewCaseVisualPanel1.class, \"NewCaseVisualPanel1.caseParentDirTextField.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(caseDirBrowseButton, org.openide.util.NbBundle.getMessage(NewCaseVisualPanel1.class, \"NewCaseVisualPanel1.caseDirBrowseButton.text\")); // NOI18N\n        caseDirBrowseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                caseDirBrowseButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(NewCaseVisualPanel1.class, \"NewCaseVisualPanel1.jLabel2.text_1\")); // NOI18N\n\n        caseDirTextField.setEditable(false);\n        caseDirTextField.setText(org.openide.util.NbBundle.getMessage(NewCaseVisualPanel1.class, \"NewCaseVisualPanel1.caseDirTextField.text_1\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jLabel2)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                                .addComponent(caseDirLabel)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addComponent(caseParentDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))\n                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                                .addComponent(caseNameLabel)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                .addComponent(caseNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))\n                            .addComponent(caseDirTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(caseDirBrowseButton)))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(31, 31, 31)\n                .addComponent(jLabel1)\n                .addGap(18, 18, 18)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(caseNameLabel)\n                    .addComponent(caseNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(caseDirLabel)\n                    .addComponent(caseParentDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(caseDirBrowseButton))\n                .addGap(18, 18, 18)\n                .addComponent(jLabel2)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(caseDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(32, Short.MAX_VALUE))\n        );\n    }","id":105070,"modified_method":"/** This method is called from within the constructor to initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is always\n     * regenerated by the Form Editor.\n     */\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        jLabel1 = new javax.swing.JLabel();\n        caseNameLabel = new javax.swing.JLabel();\n        caseDirLabel = new javax.swing.JLabel();\n        caseNameTextField = new javax.swing.JTextField();\n        caseParentDirTextField = new javax.swing.JTextField();\n        caseDirBrowseButton = new javax.swing.JButton();\n        jLabel2 = new javax.swing.JLabel();\n        caseDirTextField = new javax.swing.JTextField();\n\n        jLabel1.setFont(jLabel1.getFont().deriveFont(Font.BOLD, 14));\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel1, org.openide.util.NbBundle\n                .getMessage(NewCaseVisualPanel1.class, \"NewCaseVisualPanel1.jLabel1.text_1\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(caseNameLabel, org.openide.util.NbBundle.getMessage(NewCaseVisualPanel1.class, \"NewCaseVisualPanel1.caseNameLabel.text_1\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(caseDirLabel, org.openide.util.NbBundle.getMessage(NewCaseVisualPanel1.class, \"NewCaseVisualPanel1.caseDirLabel.text\")); // NOI18N\n\n        caseNameTextField.setText(org.openide.util.NbBundle.getMessage(NewCaseVisualPanel1.class, \"NewCaseVisualPanel1.caseNameTextField.text_1\")); // NOI18N\n\n        caseParentDirTextField.setText(org.openide.util.NbBundle.getMessage(NewCaseVisualPanel1.class, \"NewCaseVisualPanel1.caseParentDirTextField.text\")); // NOI18N\n\n        org.openide.awt.Mnemonics.setLocalizedText(caseDirBrowseButton, org.openide.util.NbBundle.getMessage(NewCaseVisualPanel1.class, \"NewCaseVisualPanel1.caseDirBrowseButton.text\")); // NOI18N\n        caseDirBrowseButton.addActionListener(new java.awt.event.ActionListener() {\n            public void actionPerformed(java.awt.event.ActionEvent evt) {\n                caseDirBrowseButtonActionPerformed(evt);\n            }\n        });\n\n        org.openide.awt.Mnemonics.setLocalizedText(jLabel2, org.openide.util.NbBundle.getMessage(NewCaseVisualPanel1.class, \"NewCaseVisualPanel1.jLabel2.text_1\")); // NOI18N\n\n        caseDirTextField.setEditable(false);\n        caseDirTextField.setText(org.openide.util.NbBundle.getMessage(NewCaseVisualPanel1.class, \"NewCaseVisualPanel1.caseDirTextField.text_1\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(jLabel2)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)\n                            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.LEADING)\n                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                                .addComponent(caseDirLabel)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                                .addComponent(caseParentDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))\n                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()\n                                .addComponent(caseNameLabel)\n                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)\n                                .addComponent(caseNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 296, javax.swing.GroupLayout.PREFERRED_SIZE))\n                            .addComponent(caseDirTextField, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                        .addComponent(caseDirBrowseButton)))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGap(31, 31, 31)\n                .addComponent(jLabel1)\n                .addGap(18, 18, 18)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(caseNameLabel)\n                    .addComponent(caseNameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(caseDirLabel)\n                    .addComponent(caseParentDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                    .addComponent(caseDirBrowseButton))\n                .addGap(18, 18, 18)\n                .addComponent(jLabel2)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(caseDirTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                .addContainerGap(32, Short.MAX_VALUE))\n        );\n    }","commit_id":"3e8b8e15ce709c594912cc6bb18ccd8205681cff","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        caseNumberTextField = new javax.swing.JTextField();\n        examinerTextField = new javax.swing.JTextField();\n        caseNumberLabel = new javax.swing.JLabel();\n        examinerLabel = new javax.swing.JLabel();\n        optionalLabel = new javax.swing.JLabel();\n\n        caseNumberTextField.setText(org.openide.util.NbBundle.getMessage(NewCaseVisualPanel2.class, \"NewCaseVisualPanel2.caseNumberTextField.text\")); // NOI18N\n\n        examinerTextField.setText(org.openide.util.NbBundle.getMessage(NewCaseVisualPanel2.class, \"NewCaseVisualPanel2.examinerTextField.text\")); // NOI18N\n\n        caseNumberLabel.setText(org.openide.util.NbBundle.getMessage(NewCaseVisualPanel2.class, \"NewCaseVisualPanel2.caseNumberLabel.text\")); // NOI18N\n\n        examinerLabel.setText(org.openide.util.NbBundle.getMessage(NewCaseVisualPanel2.class, \"NewCaseVisualPanel2.examinerLabel.text\")); // NOI18N\n\n        optionalLabel.setFont(new java.awt.Font(optionalLabel.getFont().getName(), Font.BOLD, 14));\n        optionalLabel.setText(org.openide.util.NbBundle.getMessage(NewCaseVisualPanel2.class, \"NewCaseVisualPanel2.optionalLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(optionalLabel)\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                        .addComponent(caseNumberLabel)\n                        .addGap(25, 25, 25)\n                        .addComponent(caseNumberTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                        .addComponent(examinerLabel)\n                        .addGap(45, 45, 45)\n                        .addComponent(examinerTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(optionalLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(caseNumberLabel)\n                    .addComponent(caseNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(18, 18, 18)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(examinerLabel)\n                    .addComponent(examinerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n    }","id":105071,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        caseNumberTextField = new javax.swing.JTextField();\n        examinerTextField = new javax.swing.JTextField();\n        caseNumberLabel = new javax.swing.JLabel();\n        examinerLabel = new javax.swing.JLabel();\n        optionalLabel = new javax.swing.JLabel();\n\n        caseNumberTextField.setText(org.openide.util.NbBundle.getMessage(NewCaseVisualPanel2.class, \"NewCaseVisualPanel2.caseNumberTextField.text\")); // NOI18N\n\n        examinerTextField.setText(org.openide.util.NbBundle.getMessage(NewCaseVisualPanel2.class, \"NewCaseVisualPanel2.examinerTextField.text\")); // NOI18N\n\n        caseNumberLabel.setText(org.openide.util.NbBundle.getMessage(NewCaseVisualPanel2.class, \"NewCaseVisualPanel2.caseNumberLabel.text\")); // NOI18N\n\n        examinerLabel.setText(org.openide.util.NbBundle.getMessage(NewCaseVisualPanel2.class, \"NewCaseVisualPanel2.examinerLabel.text\")); // NOI18N\n\n        optionalLabel.setFont(optionalLabel.getFont().deriveFont(Font.BOLD, 14));\n        optionalLabel.setText(org.openide.util.NbBundle.getMessage(NewCaseVisualPanel2.class, \"NewCaseVisualPanel2.optionalLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n                    .addComponent(optionalLabel)\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                        .addComponent(caseNumberLabel)\n                        .addGap(25, 25, 25)\n                        .addComponent(caseNumberTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE))\n                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()\n                        .addComponent(examinerLabel)\n                        .addGap(45, 45, 45)\n                        .addComponent(examinerTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 246, Short.MAX_VALUE)))\n                .addContainerGap())\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addContainerGap()\n                .addComponent(optionalLabel)\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(caseNumberLabel)\n                    .addComponent(caseNumberTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addGap(18, 18, 18)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(examinerLabel)\n                    .addComponent(examinerTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))\n        );\n    }","commit_id":"3e8b8e15ce709c594912cc6bb18ccd8205681cff","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        rightClickMenu = new javax.swing.JPopupMenu();\n        cutMenuItem = new javax.swing.JMenuItem();\n        copyMenuItem = new javax.swing.JMenuItem();\n        pasteMenuItem = new javax.swing.JMenuItem();\n        selectAllMenuItem = new javax.swing.JMenuItem();\n        nameCheckBox = new javax.swing.JCheckBox();\n        searchTextField = new javax.swing.JTextField();\n        noteNameLabel = new javax.swing.JLabel();\n\n        cutMenuItem.setText(org.openide.util.NbBundle.getMessage(NameSearchPanel.class, \"NameSearchPanel.cutMenuItem.text\")); // NOI18N\n        rightClickMenu.add(cutMenuItem);\n\n        copyMenuItem.setText(org.openide.util.NbBundle.getMessage(NameSearchPanel.class, \"NameSearchPanel.copyMenuItem.text\")); // NOI18N\n        rightClickMenu.add(copyMenuItem);\n\n        pasteMenuItem.setText(org.openide.util.NbBundle.getMessage(NameSearchPanel.class, \"NameSearchPanel.pasteMenuItem.text\")); // NOI18N\n        rightClickMenu.add(pasteMenuItem);\n\n        selectAllMenuItem.setText(org.openide.util.NbBundle.getMessage(NameSearchPanel.class, \"NameSearchPanel.selectAllMenuItem.text\")); // NOI18N\n        rightClickMenu.add(selectAllMenuItem);\n\n        nameCheckBox.setText(org.openide.util.NbBundle.getMessage(NameSearchPanel.class, \"NameSearchPanel.nameCheckBox.text\")); // NOI18N\n\n        searchTextField.setText(org.openide.util.NbBundle.getMessage(NameSearchPanel.class, \"NameSearchPanel.searchTextField.text\")); // NOI18N\n        searchTextField.addMouseListener(new java.awt.event.MouseAdapter() {\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                searchTextFieldMouseClicked(evt);\n            }\n        });\n\n        noteNameLabel.setFont(new java.awt.Font(noteNameLabel.getFont().getName(), Font.PLAIN, 10));\n        noteNameLabel.setText(org.openide.util.NbBundle.getMessage(NameSearchPanel.class, \"NameSearchPanel.noteNameLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(nameCheckBox)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(12, 12, 12)\n                        .addComponent(noteNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addContainerGap())\n                    .addGroup(layout.createSequentialGroup()\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(searchTextField))))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(nameCheckBox)\n                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(noteNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n        );\n    }","id":105072,"modified_method":"/** This method is called from within the constructor to\n     * initialize the form.\n     * WARNING: Do NOT modify this code. The content of this method is\n     * always regenerated by the Form Editor.\n     */\n    @SuppressWarnings(\"unchecked\")\n    // <editor-fold defaultstate=\"collapsed\" desc=\"Generated Code\">//GEN-BEGIN:initComponents\n    private void initComponents() {\n\n        rightClickMenu = new javax.swing.JPopupMenu();\n        cutMenuItem = new javax.swing.JMenuItem();\n        copyMenuItem = new javax.swing.JMenuItem();\n        pasteMenuItem = new javax.swing.JMenuItem();\n        selectAllMenuItem = new javax.swing.JMenuItem();\n        nameCheckBox = new javax.swing.JCheckBox();\n        searchTextField = new javax.swing.JTextField();\n        noteNameLabel = new javax.swing.JLabel();\n\n        cutMenuItem.setText(org.openide.util.NbBundle.getMessage(NameSearchPanel.class, \"NameSearchPanel.cutMenuItem.text\")); // NOI18N\n        rightClickMenu.add(cutMenuItem);\n\n        copyMenuItem.setText(org.openide.util.NbBundle.getMessage(NameSearchPanel.class, \"NameSearchPanel.copyMenuItem.text\")); // NOI18N\n        rightClickMenu.add(copyMenuItem);\n\n        pasteMenuItem.setText(org.openide.util.NbBundle.getMessage(NameSearchPanel.class, \"NameSearchPanel.pasteMenuItem.text\")); // NOI18N\n        rightClickMenu.add(pasteMenuItem);\n\n        selectAllMenuItem.setText(org.openide.util.NbBundle.getMessage(NameSearchPanel.class, \"NameSearchPanel.selectAllMenuItem.text\")); // NOI18N\n        rightClickMenu.add(selectAllMenuItem);\n\n        nameCheckBox.setText(org.openide.util.NbBundle.getMessage(NameSearchPanel.class, \"NameSearchPanel.nameCheckBox.text\")); // NOI18N\n\n        searchTextField.setText(org.openide.util.NbBundle.getMessage(NameSearchPanel.class, \"NameSearchPanel.searchTextField.text\")); // NOI18N\n        searchTextField.addMouseListener(new java.awt.event.MouseAdapter() {\n            public void mouseClicked(java.awt.event.MouseEvent evt) {\n                searchTextFieldMouseClicked(evt);\n            }\n        });\n\n        noteNameLabel.setFont(noteNameLabel.getFont().deriveFont(Font.PLAIN, 10));\n        noteNameLabel.setText(org.openide.util.NbBundle.getMessage(NameSearchPanel.class, \"NameSearchPanel.noteNameLabel.text\")); // NOI18N\n\n        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);\n        this.setLayout(layout);\n        layout.setHorizontalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addComponent(nameCheckBox)\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)\n                    .addGroup(layout.createSequentialGroup()\n                        .addGap(12, 12, 12)\n                        .addComponent(noteNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)\n                        .addContainerGap())\n                    .addGroup(layout.createSequentialGroup()\n                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                        .addComponent(searchTextField))))\n        );\n        layout.setVerticalGroup(\n            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)\n            .addGroup(layout.createSequentialGroup()\n                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)\n                    .addComponent(nameCheckBox)\n                    .addComponent(searchTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)\n                .addComponent(noteNameLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))\n        );\n    }","commit_id":"857871fcb266ba18c3540ea0a452ed3471c5a664","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"public static void doSetup() throws Exception {\n        tearDown();\n        testModule = createTestModule(\"module-accessibility\", \"test-module.xml\", BuiltInBeanWithPackagePrivateConstructor.class);\n    }","id":105073,"modified_method":"public static void doSetup() throws Exception {\n        tearDown();\n\n        URL url = BuiltInBeanWithPackagePrivateConstructor.class.getResource(\"test-module.xml\");\n        File moduleXmlFile = new File(url.toURI());\n        testModule = new TempTestModule(\"test.module-accessibility\", moduleXmlFile);\n        JavaArchive jar = testModule.addResource(\"module-accessibility.jar\");\n        jar.addClass(BuiltInBeanWithPackagePrivateConstructor.class);\n        jar.addAsManifestResource(EmptyAsset.INSTANCE, \"beans.xml\");\n        testModule.create(true);\n\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Deployment\n    public static Archive<?> getDeployment() throws Exception {\n        doSetup();\n        WebArchive war = ShrinkWrap.create(WebArchive.class)\n                .addClass(CrossModuleAccessibilityTestCase.class)\n                .addClass(TestModule.class)\n                .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\")\n                .addAsManifestResource(new StringAsset(\"Dependencies: test.alpha meta-inf, test.bravo meta-inf, test.charlie meta-inf, test.delta meta-inf\\n\"), \"MANIFEST.MF\");\n        return ShrinkWrap.create(EnterpriseArchive.class).addAsModule(war);\n    }","id":105074,"modified_method":"@Deployment\n    public static Archive<?> getDeployment() throws Exception {\n        doSetup();\n        WebArchive war = ShrinkWrap.create(WebArchive.class)\n                .addClass(CrossModuleAccessibilityTestCase.class)\n                .addClass(TempTestModule.class)\n                .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\")\n                .addAsManifestResource(new StringAsset(\"Dependencies: test.alpha meta-inf, test.bravo meta-inf, test.charlie meta-inf, test.delta meta-inf\\n\"), \"MANIFEST.MF\");\n        return ShrinkWrap.create(EnterpriseArchive.class).addAsModule(war);\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"@AfterClass\n    public static void tearDown() throws Exception {\n        for (TestModule testModule : testModules) {\n            testModule.remove();\n        }\n    }","id":105075,"modified_method":"@AfterClass\n    public static void tearDown() throws Exception {\n        for (TempTestModule testModule : testModules) {\n            testModule.remove();\n        }\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"private static void addModule(String moduleName, String moduleXml, Class beanType, Class lookupType) throws IOException {\n        testModules.add(createTestModule(moduleName, moduleXml, beanType, lookupType));\n    }","id":105076,"modified_method":"private static void addModule(String moduleName, String moduleXml, Class<?> beanType, Class<?> lookupType) throws Exception {\n        URL url = beanType.getResource(moduleXml);\n        File moduleXmlFile = new File(url.toURI());\n        TempTestModule testModule = new TempTestModule(\"test.\" + moduleName, moduleXmlFile);\n        JavaArchive jar = testModule.addResource(moduleName + \".jar\");\n        jar.addClass(beanType);\n        jar.addClass(lookupType);\n        jar.addAsManifestResource(EmptyAsset.INSTANCE, \"beans.xml\");\n        testModules.add(testModule);\n        testModule.create(true);\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Deployment\n    public static WebArchive createDeployment() {\n        return ShrinkWrap\n                   .create(WebArchive.class, \"test.war\")\n                   .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\")\n                   .addAsManifestResource(new StringAsset(\"Dependencies: org.picketlink.idm.api meta-inf,test.picketlink-emf-module-test meta-inf,org.jboss.dmr meta-inf,org.jboss.as.controller meta-inf\\n\"), \"MANIFEST.MF\")\n                   .addClass(CustomCredentialHandlerTestCase.class)\n                   .addClass(TestModule.class)\n                   .addClass(AbstractIdentityManagementServerSetupTask.class)\n                   .addClass(AbstractBasicIdentityManagementTestCase.class);\n    }","id":105077,"modified_method":"@Deployment\n    public static WebArchive createDeployment() {\n        return ShrinkWrap\n                   .create(WebArchive.class, \"test.war\")\n                   .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\")\n                   .addAsManifestResource(new StringAsset(\"Dependencies: org.picketlink.idm.api meta-inf,test.picketlink-emf-module-test meta-inf,org.jboss.dmr meta-inf,org.jboss.as.controller meta-inf\\n\"), \"MANIFEST.MF\")\n                   .addClass(CustomCredentialHandlerTestCase.class)\n                   .addClass(TempTestModule.class)\n                   .addClass(AbstractIdentityManagementServerSetupTask.class)\n                   .addClass(AbstractBasicIdentityManagementTestCase.class);\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"private TestModule createModule() throws IOException {\n            File moduleXml = new File(JPAEMFFromModuleBasedPartitionManagerTestCase.class\n                .getResource(JPAEMFFromModuleBasedPartitionManagerTestCase.class\n                    .getSimpleName() + \"-module.xml\").getFile());\n\n            TestModule module = new TestModule(\"test.picketlink-emf-module-test\", moduleXml);\n\n            module.addResource(\"picketlink-emf-module-test.jar\")\n                .addClass(CustomCredential.class)\n                .addClass(CustomCredentialHandler.class)\n                .addClass(AbstractCredentialTypeEntity.class)\n                .addClass(AttributedTypeEntity.class)\n                .addClass(AttributeTypeEntity.class)\n                .addClass(GroupTypeEntity.class)\n                .addClass(IdentityTypeEntity.class)\n                .addClass(PartitionTypeEntity.class)\n                .addClass(PasswordCredentialTypeEntity.class)\n                .addClass(RelationshipIdentityTypeEntity.class)\n                .addClass(RelationshipIdentityTypeReferenceEntity.class)\n                .addClass(RelationshipTypeEntity.class)\n                .addClass(RoleTypeEntity.class)\n                .addClass(AccountEntity.class)\n                .addAsManifestResource(new File(JPAEMFFromModuleBasedPartitionManagerTestCase.class\n                    .getResource(JPAEMFFromModuleBasedPartitionManagerTestCase.class.getSimpleName() + \"-persistence.xml\")\n                    .getFile()), \"persistence.xml\");\n\n            module.create();\n\n            return module;\n        }","id":105078,"modified_method":"private TempTestModule createModule() throws IOException {\n            File moduleXml = new File(JPAEMFFromModuleBasedPartitionManagerTestCase.class\n                .getResource(JPAEMFFromModuleBasedPartitionManagerTestCase.class\n                    .getSimpleName() + \"-module.xml\").getFile());\n\n            TempTestModule module = new TempTestModule(\"test.picketlink-emf-module-test\", moduleXml);\n\n            module.addResource(\"picketlink-emf-module-test.jar\")\n                .addClass(CustomCredential.class)\n                .addClass(CustomCredentialHandler.class)\n                .addClass(AbstractCredentialTypeEntity.class)\n                .addClass(AttributedTypeEntity.class)\n                .addClass(AttributeTypeEntity.class)\n                .addClass(GroupTypeEntity.class)\n                .addClass(IdentityTypeEntity.class)\n                .addClass(PartitionTypeEntity.class)\n                .addClass(PasswordCredentialTypeEntity.class)\n                .addClass(RelationshipIdentityTypeEntity.class)\n                .addClass(RelationshipIdentityTypeReferenceEntity.class)\n                .addClass(RelationshipTypeEntity.class)\n                .addClass(RoleTypeEntity.class)\n                .addClass(AccountEntity.class)\n                .addAsManifestResource(new File(JPAEMFFromModuleBasedPartitionManagerTestCase.class\n                    .getResource(JPAEMFFromModuleBasedPartitionManagerTestCase.class.getSimpleName() + \"-persistence.xml\")\n                    .getFile()), \"persistence.xml\");\n\n            module.create();\n\n            return module;\n        }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void createCustomVaultModule() throws IOException {\n\n        String moduleXML = \"<module xmlns=\\\"urn:jboss:module:1.1\\\" name=\\\"\"+ MODULE_NAME +\"\\\">\" + \n                               \"<resources> <resource-root path=\\\"\"+ JAR_NAME +\"\\\"/>  <\/resources>\" + \n                               \"<dependencies> <module name=\\\"org.picketbox\\\"/> <\/dependencies> \"+\n                           \"<\/module>\";\n\n        FileUtils.write(MODULE_FILE, moduleXML);\n\n        customVaultModule = new TestModule(MODULE_NAME, MODULE_FILE);\n        customVaultModule.addResource(JAR_NAME).addClass(CustomDummyVault.class);\n        customVaultModule.create(true);\n        \n    }","id":105079,"modified_method":"private void createCustomVaultModule() throws IOException {\n\n        String moduleXML = \"<module xmlns=\\\"urn:jboss:module:1.1\\\" name=\\\"\"+ MODULE_NAME +\"\\\">\" +\n                               \"<resources> <resource-root path=\\\"\"+ JAR_NAME +\"\\\"/>  <\/resources>\" +\n                               \"<dependencies> <module name=\\\"org.picketbox\\\"/> <\/dependencies> \"+\n                           \"<\/module>\";\n\n        FileUtils.write(MODULE_FILE, moduleXML);\n\n        customVaultModule = new TempTestModule(MODULE_NAME, MODULE_FILE);\n        customVaultModule.addResource(JAR_NAME).addClass(CustomDummyVault.class);\n        customVaultModule.create(true);\n\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void createTestModule() throws Exception {\n        File moduleXml = new File(CustomSecurityVault.class.getResource(CustomVaultInModuleTestCase.class.getSimpleName() + \"-module.xml\").toURI());\n        testModule = new TestModule(MODULE_NAME, moduleXml);\n\n        JavaArchive archive = testModule.addResource(\"test-custom-vault-in-module.jar\")\n        \t.addClass(CustomSecurityVault.class)\n            .addClass(TestVaultExtension.class)\n            .addClass(TestVaultParser.class)\n        \t.addClass(TestVaultRemoveHandler.class)\n        \t.addClass(TestVaultResolveExpressionHandler.class)\n        \t.addClass(TestVaultSubsystemResourceDescription.class);\n\n        ArchivePath path = ArchivePaths.create(\"/\");\n        path = ArchivePaths.create(path, \"services\");\n        path = ArchivePaths.create(path, Extension.class.getName());\n        archive.addAsManifestResource(CustomSecurityVault.class.getPackage(), Extension.class.getName(), path);\n\n        testModule.create(true);\n    }","id":105080,"modified_method":"private void createTestModule() throws Exception {\n        File moduleXml = new File(CustomSecurityVault.class.getResource(CustomVaultInModuleTestCase.class.getSimpleName() + \"-module.xml\").toURI());\n        testModule = new TempTestModule(MODULE_NAME, moduleXml);\n\n        JavaArchive archive = testModule.addResource(\"test-custom-vault-in-module.jar\")\n        \t.addClass(CustomSecurityVault.class)\n            .addClass(TestVaultExtension.class)\n            .addClass(TestVaultParser.class)\n        \t.addClass(TestVaultRemoveHandler.class)\n        \t.addClass(TestVaultResolveExpressionHandler.class)\n        \t.addClass(TestVaultSubsystemResourceDescription.class);\n\n        ArchivePath path = ArchivePaths.create(\"/\");\n        path = ArchivePaths.create(path, \"services\");\n        path = ArchivePaths.create(path, Extension.class.getName());\n        archive.addAsManifestResource(CustomSecurityVault.class.getPackage(), Extension.class.getName(), path);\n\n        testModule.create(true);\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static void doSetup() throws Exception {\n        tearDown();\n        JavaArchive jar = ShrinkWrap.create(JavaArchive.class);\n        jar.addClass(ExternalTag.class);\n        jar.addAsManifestResource(ExternalTagLibTestCase.class.getPackage(), \"external.tld\", \"external.tld\");\n        ModuleUtils.createSimpleTestModule(MODULE_NAME, jar);\n    }","id":105081,"modified_method":"public static void doSetup() throws Exception {\n        testModule = ModuleUtils.createTestModuleWithEEDependencies(MODULE_NAME);\n        JavaArchive jar = testModule.addResource(\"module.jar\");\n        jar.addClass(ExternalTag.class);\n        jar.addAsManifestResource(ExternalTagLibTestCase.class.getPackage(), \"external.tld\", \"external.tld\");\n        testModule.create(true);\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"@AfterClass\n    public static void tearDown() throws Exception {\n        ModuleUtils.deleteRecursively(new File(ModuleUtils.getModulePath(), \"test\"));\n    }","id":105082,"modified_method":"@AfterClass\n    public static void tearDown() throws Exception {\n        testModule.remove();\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Deployment\n    public static WebArchive createDeployment() {\n        return ShrinkWrap\n            .create(WebArchive.class, \"test.war\")\n            .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\")\n            .addAsManifestResource(new StringAsset(\"Dependencies: org.picketlink.idm.api meta-inf,org.jboss.dmr meta-inf,org.jboss.as.controller\\n\"), \"MANIFEST.MF\")\n            .addClass(JPAEMFFromModuleBasedPartitionManagerTestCase.class)\n            .addClass(TestModule.class)\n            .addClass(AbstractBasicIdentityManagementTestCase.class)\n            .addClass(AbstractIdentityManagementServerSetupTask.class);\n    }","id":105083,"modified_method":"@Deployment\n    public static WebArchive createDeployment() {\n        return ShrinkWrap\n            .create(WebArchive.class, \"test.war\")\n            .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\")\n            .addAsManifestResource(new StringAsset(\"Dependencies: org.picketlink.idm.api meta-inf,org.jboss.dmr meta-inf,org.jboss.as.controller\\n\"), \"MANIFEST.MF\")\n            .addClass(JPAEMFFromModuleBasedPartitionManagerTestCase.class)\n            .addClass(TempTestModule.class)\n            .addClass(AbstractBasicIdentityManagementTestCase.class)\n            .addClass(AbstractIdentityManagementServerSetupTask.class);\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"private TestModule createModule() throws IOException {\n            File moduleXml = new File(JPAEMFFromModuleBasedPartitionManagerTestCase.class\n                .getResource(JPAEMFFromModuleBasedPartitionManagerTestCase.class\n                    .getSimpleName() + \"-module.xml\").getFile());\n\n            TestModule module = new TestModule(\"test.picketlink-emf-module-test\", moduleXml);\n\n            module.addResource(\"picketlink-emf-module-test.jar\")\n                .addClass(AbstractCredentialTypeEntity.class)\n                .addClass(AttributedTypeEntity.class)\n                .addClass(AttributeTypeEntity.class)\n                .addClass(GroupTypeEntity.class)\n                .addClass(IdentityTypeEntity.class)\n                .addClass(PartitionTypeEntity.class)\n                .addClass(PasswordCredentialTypeEntity.class)\n                .addClass(RelationshipIdentityTypeEntity.class)\n                .addClass(RelationshipIdentityTypeReferenceEntity.class)\n                .addClass(RelationshipTypeEntity.class)\n                .addClass(RoleTypeEntity.class)\n                .addClass(AccountEntity.class)\n                .addAsManifestResource(new File(JPAEMFFromModuleBasedPartitionManagerTestCase.class\n                    .getResource(JPAEMFFromModuleBasedPartitionManagerTestCase.class.getSimpleName() + \"-persistence.xml\")\n                    .getFile()), \"persistence.xml\");\n\n            module.create();\n\n            return module;\n        }","id":105084,"modified_method":"private TempTestModule createModule() throws IOException {\n            File moduleXml = new File(JPAEMFFromModuleBasedPartitionManagerTestCase.class\n                .getResource(JPAEMFFromModuleBasedPartitionManagerTestCase.class\n                    .getSimpleName() + \"-module.xml\").getFile());\n\n            TempTestModule module = new TempTestModule(\"test.picketlink-emf-module-test\", moduleXml);\n\n            module.addResource(\"picketlink-emf-module-test.jar\")\n                .addClass(AbstractCredentialTypeEntity.class)\n                .addClass(AttributedTypeEntity.class)\n                .addClass(AttributeTypeEntity.class)\n                .addClass(GroupTypeEntity.class)\n                .addClass(IdentityTypeEntity.class)\n                .addClass(PartitionTypeEntity.class)\n                .addClass(PasswordCredentialTypeEntity.class)\n                .addClass(RelationshipIdentityTypeEntity.class)\n                .addClass(RelationshipIdentityTypeReferenceEntity.class)\n                .addClass(RelationshipTypeEntity.class)\n                .addClass(RoleTypeEntity.class)\n                .addClass(AccountEntity.class)\n                .addAsManifestResource(new File(JPAEMFFromModuleBasedPartitionManagerTestCase.class\n                    .getResource(JPAEMFFromModuleBasedPartitionManagerTestCase.class.getSimpleName() + \"-persistence.xml\")\n                    .getFile()), \"persistence.xml\");\n\n            module.create();\n\n            return module;\n        }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static void doSetup() throws Exception {\n        testModule = createTestModule(MODULE_NAME, MODULE_NAME + \"-module.xml\", PortableExtension.class, PortableExtensionLookup.class,\n                PortableExtensionModuleLookup.class);\n    }","id":105085,"modified_method":"public static void doSetup() throws Exception {\n        URL url = PortableExtension.class.getResource(MODULE_NAME + \"-module.xml\");\n        File moduleXmlFile = new File(url.toURI());\n        testModule = new TempTestModule(\"test.\" + MODULE_NAME, moduleXmlFile);\n        testModule.addResource(\"portable-extension.jar\")\n            .addClasses(PortableExtension.class, PortableExtensionLookup.class, PortableExtensionModuleLookup.class)\n            .addAsManifestResource(EmptyAsset.INSTANCE, \"beans.xml\");\n        testModule.addClassCallback(ModuleUtils.ENTERPRISE_INJECT);\n        testModule.create();\n\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Deployment\n    public static EnterpriseArchive getDeployment() throws Exception {\n        doSetup();\n\n        JavaArchive library = ShrinkWrap.create(JavaArchive.class, \"library.jar\")\n                .addClasses(PortableExtensionLibraryLookup.class)\n                .addAsManifestResource(newBeans11Descriptor(\"annotated\"), \"beans.xml\");\n\n        JavaArchive ejbSubdeployment = ShrinkWrap.create(JavaArchive.class, \"ejb-subdeployment.jar\")\n                .addClass(PortableExtensionSubdeploymentLookup.class)\n                // the CDI injection does not work neither with empty nor with 'all'!\n                .addAsManifestResource(newBeans11Descriptor(\"all\"), \"beans.xml\");\n        log.info(ejbSubdeployment.toString(true));\n\n        WebArchive webSubdeployment = ShrinkWrap.create(WebArchive.class, \"web-subdeployment.war\")\n                .addClass(PortableExtensionInExternalModuleTestCase.class)\n                .addClass(TestModule.class)\n                .addAsWebInfResource(newBeans11Descriptor(\"annotated\"), \"beans.xml\");\n\n        return ShrinkWrap.create(EnterpriseArchive.class, \"test.ear\").addAsLibrary(library).addAsModule(ejbSubdeployment)\n                .addAsModule(webSubdeployment)\n                // add EAR-wide dependency on external module\n                .addAsManifestResource(getModuleDependencies(), MANIFEST);\n        // Adding the deployment structure does not work: the interface PortableExtensionLookup is not on application class-path\n        // .addAsApplicationResource(getDeploymentStructure(), \"jboss-deployment-structure.xml\");\n\n    }","id":105086,"modified_method":"@Deployment\n    public static EnterpriseArchive getDeployment() throws Exception {\n        doSetup();\n\n        JavaArchive library = ShrinkWrap.create(JavaArchive.class, \"library.jar\")\n                .addClasses(PortableExtensionLibraryLookup.class)\n                .addAsManifestResource(newBeans11Descriptor(\"annotated\"), \"beans.xml\");\n\n        JavaArchive ejbSubdeployment = ShrinkWrap.create(JavaArchive.class, \"ejb-subdeployment.jar\")\n                .addClass(PortableExtensionSubdeploymentLookup.class)\n                // the CDI injection does not work neither with empty nor with 'all'!\n                .addAsManifestResource(newBeans11Descriptor(\"all\"), \"beans.xml\");\n        log.info(ejbSubdeployment.toString(true));\n\n        WebArchive webSubdeployment = ShrinkWrap.create(WebArchive.class, \"web-subdeployment.war\")\n                .addClass(PortableExtensionInExternalModuleTestCase.class)\n                .addClass(TempTestModule.class)\n                .addAsWebInfResource(newBeans11Descriptor(\"annotated\"), \"beans.xml\");\n\n        return ShrinkWrap.create(EnterpriseArchive.class, \"test.ear\").addAsLibrary(library).addAsModule(ejbSubdeployment)\n                .addAsModule(webSubdeployment)\n                // add EAR-wide dependency on external module\n                .addAsManifestResource(getModuleDependencies(), MANIFEST);\n        // Adding the deployment structure does not work: the interface PortableExtensionLookup is not on application class-path\n        // .addAsApplicationResource(getDeploymentStructure(), \"jboss-deployment-structure.xml\");\n\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void tearDown(ManagementClient arg0, String arg1) throws Exception {\n        this.testModule.remove();\n    }","id":105087,"modified_method":"@Override\n    public void tearDown(ManagementClient arg0, String arg1) throws Exception {\n        if (testModule != null) {\n            testModule.remove();\n        }\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void setup(ManagementClient arg0, String arg1) throws Exception {\n        this.testModule = ModuleUtils.createSimpleTestModule(Constants.TEST_MODULE_NAME, CallCounterInterface.class);\n    }","id":105088,"modified_method":"@Override\n    public void setup(ManagementClient arg0, String arg1) throws Exception {\n        testModule = ModuleUtils.createTestModuleWithEEDependencies(Constants.TEST_MODULE_NAME);\n        testModule.addResource(\"module.jar\").addClass(CallCounterInterface.class);\n        testModule.create();\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void tearDown(ManagementClient arg0, String arg1) throws Exception {\n        this.testModule.remove();\n    }","id":105089,"modified_method":"@Override\n    public void tearDown(ManagementClient arg0, String arg1) throws Exception {\n        if (testModule != null) {\n            testModule.remove();\n        }\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void setup(ManagementClient arg0, String arg1) throws Exception {\n        this.testModule = ModuleUtils.createSimpleTestModule(SessionConstants.TEST_MODULE_NAME, CallCounterInterface.class,Trigger.class);\n    }","id":105090,"modified_method":"@Override\n    public void setup(ManagementClient arg0, String arg1) throws Exception {\n        testModule = ModuleUtils.createTestModuleWithEEDependencies(SessionConstants.TEST_MODULE_NAME);\n        testModule.addResource(\"module.jar\").addClasses(CallCounterInterface.class, Trigger.class);\n        testModule.create();\n\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static void doSetup() throws Exception {\n        testModule = ModuleUtils.createSimpleTestModule(MODULE_NAME, ModuleBean.class, Foo.class);\n    }","id":105091,"modified_method":"public static void doSetup() throws Exception {\n        testModule = ModuleUtils.createTestModuleWithEEDependencies(MODULE_NAME);\n        testModule.addResource(\"test-module.jar\")\n            .addClasses(ModuleBean.class, Foo.class)\n            .addAsManifestResource(EmptyAsset.INSTANCE, \"beans.xml\");\n        testModule.create();\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Deployment\n    public static Archive<?> getDeployment() throws Exception {\n        doSetup();\n        WebArchive war1 = ShrinkWrap.create(WebArchive.class)\n                .addClasses(StaticModuleToDeploymentVisibilityEarTest.class, FooImpl1.class, TestModule.class)\n                .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\");\n        WebArchive war2 = ShrinkWrap.create(WebArchive.class)\n                .addClasses(FooImpl2.class)\n                .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\");\n        JavaArchive library = ShrinkWrap.create(JavaArchive.class)\n                .addClass(FooImpl3.class)\n                .addAsManifestResource(EmptyAsset.INSTANCE, \"beans.xml\");\n        return ShrinkWrap.create(EnterpriseArchive.class)\n                .addAsModules(war1, war2)\n                .addAsLibrary(library)\n                .addAsManifestResource(new StringAsset(\"Dependencies: test.\" + MODULE_NAME + \" meta-inf\\n\"), \"MANIFEST.MF\");\n    }","id":105092,"modified_method":"@Deployment\n    public static Archive<?> getDeployment() throws Exception {\n        doSetup();\n        WebArchive war1 = ShrinkWrap.create(WebArchive.class)\n                .addClasses(StaticModuleToDeploymentVisibilityEarTest.class, FooImpl1.class, TempTestModule.class)\n                .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\");\n        WebArchive war2 = ShrinkWrap.create(WebArchive.class)\n                .addClasses(FooImpl2.class)\n                .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\");\n        JavaArchive library = ShrinkWrap.create(JavaArchive.class)\n                .addClass(FooImpl3.class)\n                .addAsManifestResource(EmptyAsset.INSTANCE, \"beans.xml\");\n        return ShrinkWrap.create(EnterpriseArchive.class)\n                .addAsModules(war1, war2)\n                .addAsLibrary(library)\n                .addAsManifestResource(new StringAsset(\"Dependencies: test.\" + MODULE_NAME + \" meta-inf\\n\"), \"MANIFEST.MF\");\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static void doSetup() throws Exception {\n        testModule = ModuleUtils.createSimpleTestModule(MODULE_NAME, ModuleBean.class, Foo.class);\n    }","id":105093,"modified_method":"public static void doSetup() throws Exception {\n        testModule = ModuleUtils.createTestModuleWithEEDependencies(MODULE_NAME);\n        testModule.addResource(\"test-module.jar\")\n            .addClasses(ModuleBean.class, Foo.class)\n            .addAsManifestResource(EmptyAsset.INSTANCE, \"beans.xml\");\n        testModule.create();\n\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Deployment\n    public static Archive<?> getDeployment() throws Exception {\n        doSetup();\n        return ShrinkWrap.create(WebArchive.class)\n                .addClasses(StaticModuleToDeploymentVisibilityWarTest.class, FooImpl1.class, TestModule.class)\n                .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\")\n                .addAsManifestResource(new StringAsset(\"Dependencies: test.\" + MODULE_NAME + \" meta-inf\\n\"), \"MANIFEST.MF\");\n    }","id":105094,"modified_method":"@Deployment\n    public static Archive<?> getDeployment() throws Exception {\n        doSetup();\n        return ShrinkWrap.create(WebArchive.class)\n                .addClasses(StaticModuleToDeploymentVisibilityWarTest.class, FooImpl1.class, TempTestModule.class)\n                .addAsWebInfResource(EmptyAsset.INSTANCE, \"beans.xml\")\n                .addAsManifestResource(new StringAsset(\"Dependencies: test.\" + MODULE_NAME + \" meta-inf\\n\"), \"MANIFEST.MF\");\n    }","commit_id":"952008bc2af002a754a2022d9fb3507e796fa368","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static boolean parse(PsiBuilder builder, String className) {\n\n    if (ConstructorDefinition.parse(builder, className)) return true;\n\n    //declaration\n    PsiBuilder.Marker declMarker = builder.mark();\n    if (Declaration.parse(builder, true)) {\n      declMarker.drop();\n      return true;\n    } else {\n      declMarker.rollbackTo();\n    }\n\n    //type definition\n    PsiBuilder.Marker typeDeclStartMarker = builder.mark();\n    if (TypeDeclarationStart.parse(builder)) {\n      typeDeclStartMarker.rollbackTo();\n\n      IElementType typeDef = TypeDefinition.parse(builder);\n      if (WRONGWAY.equals(typeDef)) {\n        builder.error(GroovyBundle.message(\"type.definition.expected\"));\n        return false;\n      }\n      return true;\n    }\n    typeDeclStartMarker.rollbackTo();\n\n    //static compound statement\n    PsiBuilder.Marker initMarker = builder.mark();\n    if (kSTATIC == builder.getTokenType()) {\n      PsiBuilder.Marker modMarker = builder.mark();\n      ParserUtils.getToken(builder, kSTATIC);\n      modMarker.done(MODIFIERS);\n      if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {\n        initMarker.done(CLASS_INITIALIZER);\n        return true;\n      } else {\n        initMarker.rollbackTo();\n        ParserUtils.getToken(builder, kSTATIC);\n        builder.error(GroovyBundle.message(\"compound.statemenet.expected\"));\n        return false;\n      }\n    }\n\n    builder.mark().done(MODIFIERS);\n    if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {\n      initMarker.done(CLASS_INITIALIZER);\n      return true;\n    }\n\n    initMarker.rollbackTo();\n\n    return false;\n  }","id":105095,"modified_method":"public static boolean parse(PsiBuilder builder, String className) {\n\n    if (ConstructorDefinition.parse(builder, className)) return true;\n\n    //declaration\n    PsiBuilder.Marker declMarker = builder.mark();\n    if (Declaration.parse(builder, true)) {\n      declMarker.drop();\n      return true;\n    } else {\n      declMarker.rollbackTo();\n    }\n\n    //type definition\n    PsiBuilder.Marker typeDeclStartMarker = builder.mark();\n    if (TypeDeclarationStart.parse(builder)) {\n      typeDeclStartMarker.rollbackTo();\n\n      IElementType typeDef = TypeDefinition.parse(builder);\n      if (WRONGWAY.equals(typeDef)) {\n        builder.error(GroovyBundle.message(\"type.definition.expected\"));\n        return false;\n      }\n      return true;\n    }\n    typeDeclStartMarker.rollbackTo();\n\n    //static compound statement\n    PsiBuilder.Marker initMarker = builder.mark();\n    if (kSTATIC == builder.getTokenType()) {\n      PsiBuilder.Marker modMarker = builder.mark();\n      ParserUtils.getToken(builder, kSTATIC);\n      modMarker.done(MODIFIERS);\n      if (OpenOrClosableBlock.parseOpenBlock(builder)) {\n        initMarker.done(CLASS_INITIALIZER);\n        return true;\n      } else {\n        initMarker.rollbackTo();\n        ParserUtils.getToken(builder, kSTATIC);\n        builder.error(GroovyBundle.message(\"compound.statemenet.expected\"));\n        return false;\n      }\n    }\n\n    builder.mark().done(MODIFIERS);\n    if (OpenOrClosableBlock.parseOpenBlock(builder)) {\n      initMarker.done(CLASS_INITIALIZER);\n      return true;\n    }\n\n    initMarker.rollbackTo();\n\n    return false;\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static GroovyElementType tradForClauseParse(PsiBuilder builder) {\n\n    PsiBuilder.Marker marker = builder.mark();\n\n    if (ParserUtils.getToken(builder, mSEMI) ||\n            (Declaration.parse(builder, false) &&\n                    ParserUtils.getToken(builder, mSEMI))) {\n      StrictContextExpression.parse(builder);\n      ParserUtils.getToken(builder, mSEMI, GroovyBundle.message(\"semi.expected\"));\n      ParserUtils.getToken(builder, mNLS);\n      if (!mRPAREN.equals(builder.getTokenType())) {\n        controlExpressionListParse(builder);\n      }\n    } else {\n      marker.rollbackTo();\n      marker = builder.mark();\n      controlExpressionListParse(builder);\n      ParserUtils.getToken(builder, mSEMI, GroovyBundle.message(\"semi.expected\"));\n      StrictContextExpression.parse(builder);\n      ParserUtils.getToken(builder, mSEMI, GroovyBundle.message(\"semi.expected\"));\n      ParserUtils.getToken(builder, mNLS);\n      if (!mRPAREN.equals(builder.getTokenType())) {\n        controlExpressionListParse(builder);\n      }\n    }\n\n    marker.done(FOR_TRADITIONAL_CLAUSE);\n    return FOR_TRADITIONAL_CLAUSE;\n  }","id":105096,"modified_method":"private static boolean tradForClauseParse(PsiBuilder builder) {\n\n    PsiBuilder.Marker marker = builder.mark();\n\n    if (ParserUtils.getToken(builder, mSEMI) ||\n            (Declaration.parse(builder, false) &&\n                    ParserUtils.getToken(builder, mSEMI))) {\n      StrictContextExpression.parse(builder);\n      ParserUtils.getToken(builder, mSEMI, GroovyBundle.message(\"semi.expected\"));\n      ParserUtils.getToken(builder, mNLS);\n      if (!mRPAREN.equals(builder.getTokenType())) {\n        controlExpressionListParse(builder);\n      }\n    } else {\n      marker.rollbackTo();\n      marker = builder.mark();\n      controlExpressionListParse(builder);\n      ParserUtils.getToken(builder, mSEMI, GroovyBundle.message(\"semi.expected\"));\n      StrictContextExpression.parse(builder);\n      ParserUtils.getToken(builder, mSEMI, GroovyBundle.message(\"semi.expected\"));\n      ParserUtils.getToken(builder, mNLS);\n      if (!mRPAREN.equals(builder.getTokenType())) {\n        controlExpressionListParse(builder);\n      }\n    }\n\n    marker.done(FOR_TRADITIONAL_CLAUSE);\n    return true;\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static GroovyElementType forClauseParse(PsiBuilder builder) {\n    ParserUtils.getToken(builder, mNLS);\n    GroovyElementType result = forInClauseParse(builder);\n    if (!WRONGWAY.equals(result)) {\n      return result;\n    } else {\n      return tradForClauseParse(builder);\n    }\n  }","id":105097,"modified_method":"private static boolean forClauseParse(PsiBuilder builder) {\n    ParserUtils.getToken(builder, mNLS);\n    return forInClauseParse(builder) || tradForClauseParse(builder);\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Parses Groovy-style 'in' clause\n   */\n  private static GroovyElementType forInClauseParse(PsiBuilder builder) {\n\n    PsiBuilder.Marker marker = builder.mark();\n\n    PsiBuilder.Marker declMarker = builder.mark();\n\n    if (ParserUtils.lookAhead(builder, mIDENT, kIN)) {\n      ParserUtils.eatElement(builder, PARAMETER);\n      declMarker.drop();\n      ParserUtils.getToken(builder, kIN);\n      if (!ShiftExpression.parse(builder)) {\n        builder.error(GroovyBundle.message(\"expression.expected\"));\n      }\n      marker.done(FOR_IN_CLAUSE);\n      return FOR_IN_CLAUSE;\n    }\n\n    if (DeclarationStart.parse(builder)) {\n      if (Modifiers.parse(builder)) {\n        TypeSpec.parse(builder);\n        return singleDeclNoInitParse(builder, marker, declMarker);\n      }\n    }\n\n    if (TypeSpec.parse(builder)) {\n      return singleDeclNoInitParse(builder, marker, declMarker);\n    }\n\n    declMarker.drop();\n    marker.drop();\n    return WRONGWAY;\n  }","id":105098,"modified_method":"private static boolean forInClauseParse(PsiBuilder builder) {\n\n    PsiBuilder.Marker marker = builder.mark();\n\n    PsiBuilder.Marker declMarker = builder.mark();\n\n    if (ParserUtils.lookAhead(builder, mIDENT, kIN)) {\n      ParserUtils.eatElement(builder, PARAMETER);\n      declMarker.drop();\n      ParserUtils.getToken(builder, kIN);\n      if (!ShiftExpression.parse(builder)) {\n        builder.error(GroovyBundle.message(\"expression.expected\"));\n      }\n      marker.done(FOR_IN_CLAUSE);\n      return true;\n    }\n\n    if (DeclarationStart.parse(builder)) {\n      if (Modifiers.parse(builder)) {\n        TypeSpec.parse(builder);\n        return singleDeclNoInitParse(builder, marker, declMarker);\n      }\n    }\n\n    if (TypeSpec.parse(builder)) {\n      return singleDeclNoInitParse(builder, marker, declMarker);\n    }\n\n    declMarker.drop();\n    marker.drop();\n    return false;\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static GroovyElementType singleDeclNoInitParse(PsiBuilder builder,\n                                                         PsiBuilder.Marker marker,\n                                                         PsiBuilder.Marker declMarker) {\n    if (ParserUtils.getToken(builder, mIDENT)) {\n      if (kIN.equals(builder.getTokenType()) || mCOLON.equals(builder.getTokenType())) {\n        declMarker.done(PARAMETER);\n        builder.advanceLexer();\n        if (!ShiftExpression.parse(builder)) {\n          builder.error(GroovyBundle.message(\"expression.expected\"));\n        }\n        marker.done(FOR_IN_CLAUSE);\n        return FOR_IN_CLAUSE;\n      } else {\n        marker.rollbackTo();\n        return WRONGWAY;\n      }\n    } else {\n      declMarker.drop();\n      marker.rollbackTo();\n      return WRONGWAY;\n    }\n  }","id":105099,"modified_method":"private static boolean singleDeclNoInitParse(PsiBuilder builder,\n                                                         PsiBuilder.Marker marker,\n                                                         PsiBuilder.Marker declMarker) {\n    if (ParserUtils.getToken(builder, mIDENT)) {\n      if (kIN.equals(builder.getTokenType()) || mCOLON.equals(builder.getTokenType())) {\n        declMarker.done(PARAMETER);\n        builder.advanceLexer();\n        if (!ShiftExpression.parse(builder)) {\n          builder.error(GroovyBundle.message(\"expression.expected\"));\n        }\n        marker.done(FOR_IN_CLAUSE);\n        return true;\n      } else {\n        marker.rollbackTo();\n        return false;\n      }\n    } else {\n      declMarker.drop();\n      marker.rollbackTo();\n      return false;\n    }\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Parses list of control expression in for condition\n   */\n  private static void controlExpressionListParse(PsiBuilder builder) {\n\n    if (!StrictContextExpression.parse(builder)) return;\n\n    while (mCOMMA.equals(builder.getTokenType())) {\n\n      if (ParserUtils.lookAhead(builder, mCOMMA, mNLS, mRPAREN) ||\n              ParserUtils.lookAhead(builder, mCOMMA, mRPAREN)) {\n        ParserUtils.getToken(builder, mCOMMA);\n        builder.error(GroovyBundle.message(\"expression.expected\"));\n      } else {\n        ParserUtils.getToken(builder, mCOMMA);\n      }\n      ParserUtils.getToken(builder, mNLS);\n      if (!StrictContextExpression.parse(builder)) {\n        ParserUtils.getToken(builder, mNLS);\n        if (!mRPAREN.equals(builder.getTokenType()) &&\n                !mSEMI.equals(builder.getTokenType())) {\n          builder.error(GroovyBundle.message(\"expression.expected\"));\n        }\n        if (!mRPAREN.equals(builder.getTokenType()) &&\n                !mSEMI.equals(builder.getTokenType()) &&\n                !mCOMMA.equals(builder.getTokenType()) &&\n                !mNLS.equals(builder.getTokenType())) {\n          builder.advanceLexer();\n        }\n      }\n    }\n  }","id":105100,"modified_method":"private static void controlExpressionListParse(PsiBuilder builder) {\n\n    if (!StrictContextExpression.parse(builder)) return;\n\n    while (mCOMMA.equals(builder.getTokenType())) {\n\n      if (ParserUtils.lookAhead(builder, mCOMMA, mNLS, mRPAREN) ||\n              ParserUtils.lookAhead(builder, mCOMMA, mRPAREN)) {\n        ParserUtils.getToken(builder, mCOMMA);\n        builder.error(GroovyBundle.message(\"expression.expected\"));\n      } else {\n        ParserUtils.getToken(builder, mCOMMA);\n      }\n      ParserUtils.getToken(builder, mNLS);\n      if (!StrictContextExpression.parse(builder)) {\n        ParserUtils.getToken(builder, mNLS);\n        if (!mRPAREN.equals(builder.getTokenType()) &&\n                !mSEMI.equals(builder.getTokenType())) {\n          builder.error(GroovyBundle.message(\"expression.expected\"));\n        }\n        if (!mRPAREN.equals(builder.getTokenType()) &&\n                !mSEMI.equals(builder.getTokenType()) &&\n                !mCOMMA.equals(builder.getTokenType()) &&\n                !mNLS.equals(builder.getTokenType())) {\n          builder.advanceLexer();\n        }\n      }\n    }\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder) {\n    PsiBuilder.Marker marker = builder.mark();\n\n    ParserUtils.getToken(builder, kFOR);\n    if (!ParserUtils.getToken(builder, mLPAREN, GroovyBundle.message(\"lparen.expected\"))) {\n      marker.done(FOR_STATEMENT);\n      return FOR_STATEMENT;\n    }\n    if (WRONGWAY.equals(forClauseParse(builder))) {\n      builder.error(GroovyBundle.message(\"for.clause.expected\"));\n      marker.done(FOR_STATEMENT);\n      return FOR_STATEMENT;\n    }\n\n    ParserUtils.getToken(builder, mNLS);\n    \n    if (!ParserUtils.getToken(builder, mRPAREN, GroovyBundle.message(\"rparen.expected\"))) {\n      while (!builder.eof() && !mNLS.equals(builder.getTokenType()) && !mRPAREN.equals(builder.getTokenType())){\n        builder.advanceLexer();\n      }\n      marker.done(FOR_STATEMENT);\n      return FOR_STATEMENT;\n    }\n\n    PsiBuilder.Marker warn = builder.mark();\n    if (builder.getTokenType() == mNLS) {\n      ParserUtils.getToken(builder, mNLS);\n    }\n\n    if (GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {\n      warn.rollbackTo();\n      marker.done(FOR_STATEMENT);\n      return FOR_STATEMENT;\n    }\n\n    GroovyElementType result;\n    if (mLCURLY.equals(builder.getTokenType())) {\n      result = OpenOrClosableBlock.parseBlockStatement(builder);\n    } else {\n      result = Statement.parse(builder);\n    }\n    if (result.equals(WRONGWAY) || result.equals(IMPORT_STATEMENT)) {\n      warn.rollbackTo();\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n      marker.done(FOR_STATEMENT);\n      return FOR_STATEMENT;\n    } else {\n      warn.drop();\n      marker.done(FOR_STATEMENT);\n      return FOR_STATEMENT;\n    }\n  }","id":105101,"modified_method":"public static boolean parse(PsiBuilder builder) {\n    PsiBuilder.Marker marker = builder.mark();\n\n    ParserUtils.getToken(builder, kFOR);\n    if (!ParserUtils.getToken(builder, mLPAREN, GroovyBundle.message(\"lparen.expected\"))) {\n      marker.done(FOR_STATEMENT);\n      return true;\n    }\n    if (!forClauseParse(builder)) {\n      builder.error(GroovyBundle.message(\"for.clause.expected\"));\n      marker.done(FOR_STATEMENT);\n      return true;\n    }\n\n    ParserUtils.getToken(builder, mNLS);\n    \n    if (!ParserUtils.getToken(builder, mRPAREN, GroovyBundle.message(\"rparen.expected\"))) {\n      while (!builder.eof() && !mNLS.equals(builder.getTokenType()) && !mRPAREN.equals(builder.getTokenType())){\n        builder.advanceLexer();\n      }\n      marker.done(FOR_STATEMENT);\n      return true;\n    }\n\n    PsiBuilder.Marker warn = builder.mark();\n    if (builder.getTokenType() == mNLS) {\n      ParserUtils.getToken(builder, mNLS);\n    }\n\n    if (GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {\n      warn.rollbackTo();\n      marker.done(FOR_STATEMENT);\n      return true;\n    }\n\n    if (!Statement.parse(builder, true)) {\n      warn.rollbackTo();\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n      marker.done(FOR_STATEMENT);\n      return true;\n    } else {\n      warn.drop();\n      marker.done(FOR_STATEMENT);\n      return true;\n    }\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder) {\n\n    Marker impMarker = builder.mark();\n\n    ParserUtils.getToken(builder, kIMPORT, GroovyBundle.message(\"import.keyword.expected\"));\n    ParserUtils.getToken(builder, kSTATIC);\n    if (!ImportReference.parse(builder)) {\n      builder.error(GroovyBundle.message(\"import.identifier.expected\"));\n    }\n\n    impMarker.done(IMPORT_STATEMENT);\n\n    return IMPORT_STATEMENT;\n  }","id":105102,"modified_method":"public static boolean parse(PsiBuilder builder) {\n\n    Marker impMarker = builder.mark();\n\n    ParserUtils.getToken(builder, kIMPORT, GroovyBundle.message(\"import.keyword.expected\"));\n    ParserUtils.getToken(builder, kSTATIC);\n    if (!ImportReference.parse(builder)) {\n      builder.error(GroovyBundle.message(\"import.identifier.expected\"));\n    }\n\n    impMarker.done(IMPORT_STATEMENT);\n\n    return true;\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean parse(PsiBuilder builder, String interfaceName) {\n    //constructor\n    if (ConstructorDefinition.parse(builder, interfaceName)) return true;\n\n    //declaration\n    PsiBuilder.Marker declMarker = builder.mark();\n    if (Declaration.parse(builder, true)) {\n      declMarker.drop();\n      return true;\n    } else {\n      declMarker.rollbackTo();\n    }\n\n    //declaration\n//    PsiBuilder.Marker declMarker = builder.mark();\n//    if (DeclarationStart.parse(builder)) {\n//      declMarker.rollbackTo();\n//      return Declaration.parse(builder);\n//    }\n//    declMarker.rollbackTo();\n\n    //type definition\n    PsiBuilder.Marker typeDeclStartMarker = builder.mark();\n    if (TypeDeclarationStart.parse(builder)) {\n      typeDeclStartMarker.rollbackTo();\n\n      IElementType typeDef = TypeDefinition.parse(builder);\n      return !WRONGWAY.equals(typeDef);\n    }\n    typeDeclStartMarker.rollbackTo();\n\n    // static class initializer\n    if (ParserUtils.getToken(builder, kSTATIC)) {\n      if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {\n        builder.error(GroovyBundle.message(\"interface.must.has.no.static.compound.statemenet\"));\n        return true;\n      } else {\n        builder.error(GroovyBundle.message(\"compound.statemenet.expected\"));\n        return false;\n      }\n    }\n\n    // class initializer\n    if (!WRONGWAY.equals(OpenOrClosableBlock.parseOpenBlock(builder))) {\n      builder.error(GroovyBundle.message(\"interface.must.has.no.compound.statemenet\"));\n      return true;\n    }\n\n    return false;\n  }","id":105103,"modified_method":"public static boolean parse(PsiBuilder builder, String interfaceName) {\n    //constructor\n    if (ConstructorDefinition.parse(builder, interfaceName)) return true;\n\n    //declaration\n    PsiBuilder.Marker declMarker = builder.mark();\n    if (Declaration.parse(builder, true)) {\n      declMarker.drop();\n      return true;\n    } else {\n      declMarker.rollbackTo();\n    }\n\n    //declaration\n//    PsiBuilder.Marker declMarker = builder.mark();\n//    if (DeclarationStart.parse(builder)) {\n//      declMarker.rollbackTo();\n//      return Declaration.parse(builder);\n//    }\n//    declMarker.rollbackTo();\n\n    //type definition\n    PsiBuilder.Marker typeDeclStartMarker = builder.mark();\n    if (TypeDeclarationStart.parse(builder)) {\n      typeDeclStartMarker.rollbackTo();\n\n      IElementType typeDef = TypeDefinition.parse(builder);\n      return !WRONGWAY.equals(typeDef);\n    }\n    typeDeclStartMarker.rollbackTo();\n\n    // static class initializer\n    if (ParserUtils.getToken(builder, kSTATIC)) {\n      if (OpenOrClosableBlock.parseOpenBlock(builder)) {\n        builder.error(GroovyBundle.message(\"interface.must.has.no.static.compound.statemenet\"));\n        return true;\n      } else {\n        builder.error(GroovyBundle.message(\"compound.statemenet.expected\"));\n        return false;\n      }\n    }\n\n    // class initializer\n    if (OpenOrClosableBlock.parseOpenBlock(builder)) {\n      builder.error(GroovyBundle.message(\"interface.must.has.no.compound.statemenet\"));\n      return true;\n    }\n\n    return false;\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Parses open block as a usual statement in role of loop or fork statement body\n   *\n   * @param builder\n   * @return\n   */\n  public static GroovyElementType parseBlockStatement(PsiBuilder builder) {\n    return parseOpenBlockInDifferentContext(builder, true);\n  }","id":105104,"modified_method":"/**\n   * Parses open block as a usual statement in role of loop or fork statement body\n   *\n   * @param builder\n   * @return\n   */\n  public static boolean parseBlockStatement(PsiBuilder builder) {\n    return parseOpenBlockInDifferentContext(builder, true);\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Parses only OPEN blocks\n   *\n   * @param builder\n   * @return\n   */\n  public static GroovyElementType parseOpenBlockInDifferentContext(PsiBuilder builder, boolean isBlockStatement) {\n    PsiBuilder.Marker blockStatementMarker = builder.mark();\n    PsiBuilder.Marker marker = builder.mark();\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      marker.drop();\n      blockStatementMarker.drop();\n      return WRONGWAY;\n    }\n    ParserUtils.getToken(builder, mNLS);\n    parseBlockBody(builder);\n    while (!builder.eof() &&\n        !mRCURLY.equals(builder.getTokenType())) {\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n      builder.advanceLexer();\n    }\n    ParserUtils.getToken(builder, mRCURLY, GroovyBundle.message(\"rcurly.expected\"));\n    marker.done(OPEN_BLOCK);\n    if (isBlockStatement) {\n      blockStatementMarker.done(BLOCK_STATEMENT);\n    } else {\n      blockStatementMarker.drop();\n    }\n    return OPEN_BLOCK;\n  }","id":105105,"modified_method":"/**\n   * Parses only OPEN blocks\n   *\n   * @param builder\n   * @return\n   */\n  public static boolean parseOpenBlockInDifferentContext(PsiBuilder builder, boolean isBlockStatement) {\n    PsiBuilder.Marker blockStatementMarker = builder.mark();\n    PsiBuilder.Marker marker = builder.mark();\n    if (!ParserUtils.getToken(builder, mLCURLY)) {\n      marker.drop();\n      blockStatementMarker.drop();\n      return false;\n    }\n    ParserUtils.getToken(builder, mNLS);\n    parseBlockBody(builder);\n    while (!builder.eof() &&\n        !mRCURLY.equals(builder.getTokenType())) {\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n      builder.advanceLexer();\n    }\n    ParserUtils.getToken(builder, mRCURLY, GroovyBundle.message(\"rcurly.expected\"));\n    marker.done(OPEN_BLOCK);\n    if (isBlockStatement) {\n      blockStatementMarker.done(BLOCK_STATEMENT);\n    } else {\n      blockStatementMarker.drop();\n    }\n    return true;\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void parseBlockBody(PsiBuilder builder) {\n\n\n    GspTemplateStmtParsing.parseGspTemplateStmt(builder);\n    if (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) {\n      Separators.parse(builder);\n    }\n    while (GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {\n      Separators.parse(builder);\n    }\n\n    GroovyElementType result = Statement.parse(builder);\n\n    while (!result.equals(WRONGWAY) &&\n        (mSEMI.equals(builder.getTokenType()) ||\n            mNLS.equals(builder.getTokenType()) ||\n            GspTemplateStmtParsing.parseGspTemplateStmt(builder))) {\n      Separators.parse(builder);\n      while (GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {\n        Separators.parse(builder);\n      }\n      result = Statement.parse(builder);\n      if (!GspTokenTypesEx.GSP_GROOVY_SEPARATORS.contains(builder.getTokenType())) {\n        cleanAfterError(builder);\n      }\n    }\n    cleanAfterError(builder);\n    Separators.parse(builder);\n    while (GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {\n      Separators.parse(builder);\n    }\n\n  }","id":105106,"modified_method":"public static void parseBlockBody(PsiBuilder builder) {\n\n\n    GspTemplateStmtParsing.parseGspTemplateStmt(builder);\n    if (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) {\n      Separators.parse(builder);\n    }\n    while (GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {\n      Separators.parse(builder);\n    }\n\n    boolean result = Statement.parse(builder, false);\n\n    while (result &&\n        (mSEMI.equals(builder.getTokenType()) ||\n            mNLS.equals(builder.getTokenType()) ||\n            GspTemplateStmtParsing.parseGspTemplateStmt(builder))) {\n      Separators.parse(builder);\n      while (GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {\n        Separators.parse(builder);\n      }\n      result = Statement.parse(builder, false);\n      if (!GspTokenTypesEx.GSP_GROOVY_SEPARATORS.contains(builder.getTokenType())) {\n        cleanAfterError(builder);\n      }\n    }\n    cleanAfterError(builder);\n    Separators.parse(builder);\n    while (GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {\n      Separators.parse(builder);\n    }\n\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Parses open block as block, not as statement\n   *\n   * @param builder\n   * @return\n   */\n  public static GroovyElementType parseOpenBlock(PsiBuilder builder) {\n    return parseOpenBlockInDifferentContext(builder, false);\n  }","id":105107,"modified_method":"/**\n   * Parses open block as block, not as statement\n   *\n   * @param builder\n   * @return\n   */\n  public static boolean parseOpenBlock(PsiBuilder builder) {\n    return parseOpenBlockInDifferentContext(builder, false);\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Parses list of statements after case label(s)\n   *\n   * @param builder\n   */\n  private static void parseCaseList(PsiBuilder builder) {\n\n    if (kCASE.equals(builder.getTokenType()) ||\n        kDEFAULT.equals(builder.getTokenType()) ||\n        mRCURLY.equals(builder.getTokenType())) {\n      return;\n    }\n    GroovyElementType result = Statement.parse(builder);\n    if (result.equals(WRONGWAY) && !GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {\n      builder.error(GroovyBundle.message(\"wrong.statement\"));\n      return;\n    }\n\n    while (GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {\n      if (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) {\n        Separators.parse(builder);\n      }\n    }\n    if (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) {\n      Separators.parse(builder);\n    }\n\n    if (kCASE.equals(builder.getTokenType()) ||\n        kDEFAULT.equals(builder.getTokenType()) ||\n        mRCURLY.equals(builder.getTokenType())) {\n      return;\n    }\n    result = Statement.parse(builder);\n    while (!result.equals(WRONGWAY) && (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) ||\n        GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {\n\n      if (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) {\n        Separators.parse(builder);\n      }\n      while (GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {\n        if (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) {\n          Separators.parse(builder);\n        }\n      }\n      if (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) {\n        Separators.parse(builder);\n      }\n\n      if (kCASE.equals(builder.getTokenType()) ||\n          kDEFAULT.equals(builder.getTokenType()) ||\n          mRCURLY.equals(builder.getTokenType())) {\n        break;\n      }\n\n      result = Statement.parse(builder);\n      if (!GspTokenTypesEx.GSP_GROOVY_SEPARATORS.contains(builder.getTokenType())) {\n        OpenOrClosableBlock.cleanAfterError(builder);\n      }\n    }\n    Separators.parse(builder);\n  }","id":105108,"modified_method":"/**\n   * Parses list of statements after case label(s)\n   *\n   * @param builder\n   */\n  private static void parseCaseList(PsiBuilder builder) {\n\n    if (kCASE.equals(builder.getTokenType()) ||\n        kDEFAULT.equals(builder.getTokenType()) ||\n        mRCURLY.equals(builder.getTokenType())) {\n      return;\n    }\n\n    if (!Statement.parse(builder, false) && !GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {\n      builder.error(GroovyBundle.message(\"wrong.statement\"));\n      return;\n    }\n\n    while (GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {\n      if (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) {\n        Separators.parse(builder);\n      }\n    }\n    if (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) {\n      Separators.parse(builder);\n    }\n\n    if (kCASE.equals(builder.getTokenType()) ||\n        kDEFAULT.equals(builder.getTokenType()) ||\n        mRCURLY.equals(builder.getTokenType())) {\n      return;\n    }\n    boolean result = Statement.parse(builder, false);\n    while (result && (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) ||\n        GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {\n\n      if (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) {\n        Separators.parse(builder);\n      }\n      while (GspTemplateStmtParsing.parseGspTemplateStmt(builder)) {\n        if (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) {\n          Separators.parse(builder);\n        }\n      }\n      if (mSEMI.equals(builder.getTokenType()) || mNLS.equals(builder.getTokenType())) {\n        Separators.parse(builder);\n      }\n\n      if (kCASE.equals(builder.getTokenType()) ||\n          kDEFAULT.equals(builder.getTokenType()) ||\n          mRCURLY.equals(builder.getTokenType())) {\n        break;\n      }\n\n      result = Statement.parse(builder, false);\n      if (!GspTokenTypesEx.GSP_GROOVY_SEPARATORS.contains(builder.getTokenType())) {\n        OpenOrClosableBlock.cleanAfterError(builder);\n      }\n    }\n    Separators.parse(builder);\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder) {\n    PsiBuilder.Marker marker = builder.mark();\n    ParserUtils.getToken(builder, kSWITCH);\n\n    if (!ParserUtils.getToken(builder, mLPAREN, GroovyBundle.message(\"lparen.expected\"))) {\n      marker.done(SWITCH_STATEMENT);\n      return SWITCH_STATEMENT;\n    }\n    if (!StrictContextExpression.parse(builder)) {\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n    }\n    ParserUtils.getToken(builder, mNLS);\n\n    if (!ParserUtils.getToken(builder, mRPAREN, GroovyBundle.message(\"rparen.expected\"))) {\n      while (!builder.eof() && !mNLS.equals(builder.getTokenType()) && !mRPAREN.equals(builder.getTokenType())) {\n        builder.error(GroovyBundle.message(\"rparen.expected\"));\n        builder.advanceLexer();\n      }\n      if (!ParserUtils.getToken(builder, mRPAREN)) {\n        marker.done(SWITCH_STATEMENT);\n        return SWITCH_STATEMENT;\n      }\n    }\n    PsiBuilder.Marker warn = builder.mark();\n    ParserUtils.getToken(builder, mNLS);\n\n    if (!mLCURLY.equals(builder.getTokenType())) {\n      warn.rollbackTo();\n      builder.error(GroovyBundle.message(\"case.block.expected\"));\n      marker.done(SWITCH_STATEMENT);\n      return SWITCH_STATEMENT;\n    }\n    warn.drop();\n    parseCaseBlock(builder);\n    marker.done(SWITCH_STATEMENT);\n    return SWITCH_STATEMENT;\n\n  }","id":105109,"modified_method":"public static boolean parse(PsiBuilder builder) {\n    PsiBuilder.Marker marker = builder.mark();\n    ParserUtils.getToken(builder, kSWITCH);\n\n    if (!ParserUtils.getToken(builder, mLPAREN, GroovyBundle.message(\"lparen.expected\"))) {\n      marker.done(SWITCH_STATEMENT);\n      return true;\n    }\n    if (!StrictContextExpression.parse(builder)) {\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n    }\n    ParserUtils.getToken(builder, mNLS);\n\n    if (!ParserUtils.getToken(builder, mRPAREN, GroovyBundle.message(\"rparen.expected\"))) {\n      while (!builder.eof() && !mNLS.equals(builder.getTokenType()) && !mRPAREN.equals(builder.getTokenType())) {\n        builder.error(GroovyBundle.message(\"rparen.expected\"));\n        builder.advanceLexer();\n      }\n      if (!ParserUtils.getToken(builder, mRPAREN)) {\n        marker.done(SWITCH_STATEMENT);\n        return true;\n      }\n    }\n    PsiBuilder.Marker warn = builder.mark();\n    ParserUtils.getToken(builder, mNLS);\n\n    if (!mLCURLY.equals(builder.getTokenType())) {\n      warn.rollbackTo();\n      builder.error(GroovyBundle.message(\"case.block.expected\"));\n      marker.done(SWITCH_STATEMENT);\n      return true;\n    }\n    warn.drop();\n    parseCaseBlock(builder);\n    marker.done(SWITCH_STATEMENT);\n    return true;\n\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder) {\n\n    PsiBuilder.Marker marker = builder.mark();\n\n    ParserUtils.getToken(builder, kSYNCHRONIZED);\n\n    if (!ParserUtils.getToken(builder, mLPAREN, GroovyBundle.message(\"lparen.expected\"))) {\n      marker.drop();\n      return WRONGWAY;\n    }\n\n    if (!StrictContextExpression.parse(builder)) {\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n    }\n\n    ParserUtils.getToken(builder, mNLS);\n    if (!ParserUtils.getToken(builder, mRPAREN, GroovyBundle.message(\"rparen.expected\"))) {\n      while (!builder.eof() && !mNLS.equals(builder.getTokenType()) && !mRPAREN.equals(builder.getTokenType())) {\n        builder.advanceLexer();\n        builder.error(GroovyBundle.message(\"rparen.expected\"));\n      }\n      if (!ParserUtils.getToken(builder, mRPAREN)) {\n        marker.done(SYNCHRONIZED_STATEMENT);\n        return SYNCHRONIZED_STATEMENT;\n      }\n    }\n\n    PsiBuilder.Marker warn = builder.mark();\n    if (builder.getTokenType() == mNLS) {\n      ParserUtils.getToken(builder, mNLS);\n    }\n\n    GroovyElementType result = WRONGWAY;\n    if (mLCURLY.equals(builder.getTokenType())) {\n      result = OpenOrClosableBlock.parseOpenBlock(builder);\n    }\n    if (result.equals(WRONGWAY) || result.equals(IMPORT_STATEMENT)) {\n      warn.rollbackTo();\n      builder.error(GroovyBundle.message(\"block.expression.expected\"));\n      marker.done(SYNCHRONIZED_STATEMENT);\n      return SYNCHRONIZED_STATEMENT;\n    } else {\n      warn.drop();\n      marker.done(SYNCHRONIZED_STATEMENT);\n      return SYNCHRONIZED_STATEMENT;\n    }\n\n  }","id":105110,"modified_method":"public static boolean parse(PsiBuilder builder) {\n\n    PsiBuilder.Marker marker = builder.mark();\n\n    ParserUtils.getToken(builder, kSYNCHRONIZED);\n\n    if (!ParserUtils.getToken(builder, mLPAREN, GroovyBundle.message(\"lparen.expected\"))) {\n      marker.drop();\n      return false;\n    }\n\n    if (!StrictContextExpression.parse(builder)) {\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n    }\n\n    ParserUtils.getToken(builder, mNLS);\n    if (!ParserUtils.getToken(builder, mRPAREN, GroovyBundle.message(\"rparen.expected\"))) {\n      while (!builder.eof() && !mNLS.equals(builder.getTokenType()) && !mRPAREN.equals(builder.getTokenType())) {\n        builder.advanceLexer();\n        builder.error(GroovyBundle.message(\"rparen.expected\"));\n      }\n      if (!ParserUtils.getToken(builder, mRPAREN)) {\n        marker.done(SYNCHRONIZED_STATEMENT);\n        return true;\n      }\n    }\n\n    PsiBuilder.Marker warn = builder.mark();\n    if (builder.getTokenType() == mNLS) {\n      ParserUtils.getToken(builder, mNLS);\n    }\n\n    if (mLCURLY.equals(builder.getTokenType())) {\n      if (!OpenOrClosableBlock.parseOpenBlock(builder)) {\n        warn.rollbackTo();\n        builder.error(GroovyBundle.message(\"block.expression.expected\"));\n        marker.done(SYNCHRONIZED_STATEMENT);\n      } else {\n        warn.drop();\n        marker.done(SYNCHRONIZED_STATEMENT);\n      }\n    }\n\n    return true;\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parse(PsiBuilder builder) {\n    PsiBuilder.Marker marker = builder.mark();\n    ParserUtils.getToken(builder, kTRY);\n    PsiBuilder.Marker warn = builder.mark();\n    ParserUtils.getToken(builder, mNLS);\n    GroovyElementType result = WRONGWAY;\n    if (mLCURLY.equals(builder.getTokenType())) {\n      result = OpenOrClosableBlock.parseOpenBlock(builder);\n    }\n    if (result.equals(WRONGWAY)) {\n      warn.rollbackTo();\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n      marker.done(TRY_BLOCK_STATEMENT);\n      return TRY_BLOCK_STATEMENT;\n    }\n    warn.drop();\n\n    ParserUtils.getToken(builder, mNLS);\n    if (!(builder.getTokenType() == kCATCH) &&\n        !(builder.getTokenType() == kFINALLY)) {\n      builder.error(GroovyBundle.message(\"catch.or.finally.expected\"));\n      marker.done(TRY_BLOCK_STATEMENT);\n      return TRY_BLOCK_STATEMENT;\n    }\n\n    if (kCATCH.equals(builder.getTokenType())) {\n      parseHandlers(builder);\n    }\n\n    if (kFINALLY.equals(builder.getTokenType()) |\n        ParserUtils.lookAhead(builder,mNLS, kFINALLY)) {\n      ParserUtils.getToken(builder, mNLS);\n      PsiBuilder.Marker finallyMarker = builder.mark();\n      warn = builder.mark();\n      ParserUtils.getToken(builder, kFINALLY);\n      ParserUtils.getToken(builder, mNLS);\n      result = WRONGWAY;\n      if (mLCURLY.equals(builder.getTokenType())) {\n        result = OpenOrClosableBlock.parseOpenBlock(builder);\n      }\n      if (result.equals(WRONGWAY)) {\n        finallyMarker.drop();\n        warn.rollbackTo();\n        builder.error(GroovyBundle.message(\"expression.expected\"));\n      } else {\n        warn.drop();\n        finallyMarker.done(FINALLY_CLAUSE);\n      }\n    }\n    marker.done(TRY_BLOCK_STATEMENT);\n    return TRY_BLOCK_STATEMENT;\n  }","id":105111,"modified_method":"public static boolean parse(PsiBuilder builder) {\n    PsiBuilder.Marker marker = builder.mark();\n    ParserUtils.getToken(builder, kTRY);\n    PsiBuilder.Marker warn = builder.mark();\n    ParserUtils.getToken(builder, mNLS);\n    if (!mLCURLY.equals(builder.getTokenType()) || !OpenOrClosableBlock.parseOpenBlock(builder)) {\n      warn.rollbackTo();\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n      marker.done(TRY_BLOCK_STATEMENT);\n      return true;\n    }\n    warn.drop();\n\n    ParserUtils.getToken(builder, mNLS);\n    if (!(builder.getTokenType() == kCATCH) &&\n        !(builder.getTokenType() == kFINALLY)) {\n      builder.error(GroovyBundle.message(\"catch.or.finally.expected\"));\n      marker.done(TRY_BLOCK_STATEMENT);\n      return true;\n    }\n\n    if (kCATCH.equals(builder.getTokenType())) {\n      parseHandlers(builder);\n    }\n\n    if (kFINALLY.equals(builder.getTokenType()) |\n        ParserUtils.lookAhead(builder,mNLS, kFINALLY)) {\n      ParserUtils.getToken(builder, mNLS);\n      PsiBuilder.Marker finallyMarker = builder.mark();\n      warn = builder.mark();\n      ParserUtils.getToken(builder, kFINALLY);\n      ParserUtils.getToken(builder, mNLS);\n\n      if (!mLCURLY.equals(builder.getTokenType()) || !OpenOrClosableBlock.parseOpenBlock(builder)) {\n        finallyMarker.drop();\n        warn.rollbackTo();\n        builder.error(GroovyBundle.message(\"expression.expected\"));\n      } else {\n        warn.drop();\n        finallyMarker.done(FINALLY_CLAUSE);\n      }\n    }\n    marker.done(TRY_BLOCK_STATEMENT);\n    return true;\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Parse exception handlers\n   *\n   * @param builder\n   */\n  private static void parseHandlers(PsiBuilder builder) {\n    PsiBuilder.Marker catchMarker = builder.mark();\n    ParserUtils.getToken(builder, kCATCH);\n    if (!ParserUtils.getToken(builder, mLPAREN, GroovyBundle.message(\"lparen.expected\"))) {\n      catchMarker.drop();\n      return;\n    }\n\n    if (!ParameterDeclaration.parse(builder, mRPAREN)) {\n      builder.error(GroovyBundle.message(\"param.expected\"));\n//      catchMarker.drop();\n//      return;\n    }\n\n    ParserUtils.getToken(builder, mNLS);\n\n    if (!ParserUtils.getToken(builder, mRPAREN, GroovyBundle.message(\"rparen.expected\"))) {\n      catchMarker.done(CATCH_CLAUSE);\n      return;\n    }\n\n    PsiBuilder.Marker warn = builder.mark();\n    ParserUtils.getToken(builder, mNLS);\n    GroovyElementType result = WRONGWAY;\n    if (mLCURLY.equals(builder.getTokenType())) {\n      result = OpenOrClosableBlock.parseOpenBlock(builder);\n    }\n    if (result.equals(WRONGWAY)) {\n      warn.rollbackTo();\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n    } else {\n      warn.drop();\n    }\n\n    catchMarker.done(CATCH_CLAUSE);\n\n    if (builder.getTokenType() == kCATCH ||\n        ParserUtils.lookAhead(builder, mNLS, kCATCH)) {\n      ParserUtils.getToken(builder, mNLS);\n      parseHandlers(builder);\n    }\n  }","id":105112,"modified_method":"/**\n   * Parse exception handlers\n   *\n   * @param builder\n   */\n  private static void parseHandlers(PsiBuilder builder) {\n    PsiBuilder.Marker catchMarker = builder.mark();\n    ParserUtils.getToken(builder, kCATCH);\n    if (!ParserUtils.getToken(builder, mLPAREN, GroovyBundle.message(\"lparen.expected\"))) {\n      catchMarker.drop();\n      return;\n    }\n\n    if (!ParameterDeclaration.parse(builder, mRPAREN)) {\n      builder.error(GroovyBundle.message(\"param.expected\"));\n//      catchMarker.drop();\n//      return;\n    }\n\n    ParserUtils.getToken(builder, mNLS);\n\n    if (!ParserUtils.getToken(builder, mRPAREN, GroovyBundle.message(\"rparen.expected\"))) {\n      catchMarker.done(CATCH_CLAUSE);\n      return;\n    }\n\n    PsiBuilder.Marker warn = builder.mark();\n    ParserUtils.getToken(builder, mNLS);\n    if (!mLCURLY.equals(builder.getTokenType()) || !OpenOrClosableBlock.parseOpenBlock(builder)) {\n      warn.rollbackTo();\n      builder.error(GroovyBundle.message(\"expression.expected\"));\n    } else {\n      warn.drop();\n    }\n\n    catchMarker.done(CATCH_CLAUSE);\n\n    if (builder.getTokenType() == kCATCH ||\n        ParserUtils.lookAhead(builder, mNLS, kCATCH)) {\n      ParserUtils.getToken(builder, mNLS);\n      parseHandlers(builder);\n    }\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static GroovyElementType parseDefinitions(PsiBuilder builder,\n                                                   boolean isInClass,\n                                                   boolean isEnumConstantMember,\n                                                   boolean isAnnotationMember,\n                                                   boolean mustBeMethod) {\n    if (!(builder.getTokenType() == mIDENT || builder.getTokenType() == mSTRING_LITERAL || builder.getTokenType() == mGSTRING_LITERAL)) {\n      builder.error(GroovyBundle.message(\"indentifier.or.string.literal.expected\"));\n      return WRONGWAY;\n    }\n\n    PsiBuilder.Marker varMarker = builder.mark();\n    boolean isStringName = builder.getTokenType() == mSTRING_LITERAL || builder.getTokenType() == mGSTRING_LITERAL;\n\n    if (isAnnotationMember && isStringName) {\n      builder.error(GroovyBundle.message(\"string.name.unexpected\"));\n    }\n\n    //eaten one of these tokens\n    boolean eaten = ParserUtils.getToken(builder, mIDENT) || ParserUtils.getToken(builder, mSTRING_LITERAL) || ParserUtils.getToken(builder, mGSTRING_LITERAL);\n\n    if (!eaten) return WRONGWAY;\n\n    if (mustBeMethod && mLPAREN != builder.getTokenType()) {\n      varMarker.drop();\n      return WRONGWAY;\n    }\n\n    if (ParserUtils.getToken(builder, mLPAREN)) {\n      ParameterList.parse(builder, mRPAREN);\n\n//      if (!ParserUtils.getToken(builder, mRPAREN)) {\n//        builder.error(GroovyBundle.message(\"rparen.expected\"));\n//        varMarker.drop();\n//        return WRONGWAY;\n\n      if (isEnumConstantMember && !isStringName) {\n        builder.error(GroovyBundle.message(\"string.name.unexpected\"));\n      }\n\n      ParserUtils.getToken(builder, mNLS);\n      if (!ParserUtils.getToken(builder, mRPAREN)) {\n        builder.error(GroovyBundle.message(\"rparen.expected\"));\n        varMarker.drop();\n        return METHOD_DEFINITION;\n      }\n\n      if (ParserUtils.lookAhead(builder, GroovyTokenTypes.kDEFAULT)) {\n\n        ParserUtils.getToken(builder, GroovyTokenTypes.kDEFAULT);\n        ParserUtils.getToken(builder, GroovyTokenTypes.mNLS);\n\n        boolean b = AnnotationArguments.parseAnnotationMemberValueInitializer(builder);\n        if (b) {\n          varMarker.done(DEFAULT_ANNOTATION_VALUE);\n          return DEFAULT_ANNOTATION_MEMBER;\n        } else {\n          varMarker.rollbackTo();\n          return WRONGWAY;\n        }\n      }\n\n      ThrowClause.parse(builder);\n\n      GroovyElementType openBlock = null;\n      if (builder.getTokenType() == mLCURLY || ParserUtils.lookAhead(builder, mNLS, mLCURLY)) {\n        ParserUtils.getToken(builder, mNLS);\n        openBlock = OpenOrClosableBlock.parseOpenBlock(builder);\n      }\n\n//      if (isAnnotationMember && !NONE.equals(paramDeclList) && OPEN_BLOCK.equals(openBlock)) {\n//        builder.error(GroovyBundle.message(\"empty.parameter.list.expected\"));\n//      }\n\n      varMarker.drop();\n      return METHOD_DEFINITION;\n    } else {\n      varMarker.rollbackTo();\n\n      // a = b, c = d\n      PsiBuilder.Marker varAssMarker = builder.mark();\n      if (ParserUtils.getToken(builder, mIDENT)) {\n\n        if (parseAssignment(builder)) { // a = b, c = d\n          if (isInClass) {\n            varAssMarker.done(FIELD);\n          } else {\n            varAssMarker.done(VARIABLE);\n          }\n\n          while (ParserUtils.getToken(builder, mCOMMA)) {\n            ParserUtils.getToken(builder, mNLS);\n\n            if (WRONGWAY.equals(parseVariableDeclarator(builder, isInClass)))\n              return VARIABLE_DEFINITION_ERROR; //parse b = d\n          }\n          return VARIABLE_DEFINITION;\n        } else {\n          if (isInClass) {\n            varAssMarker.done(FIELD);\n          } else {\n            varAssMarker.done(VARIABLE);\n          }\n//          varAssMarker.drop();\n          boolean isManyDef = false;\n          while (ParserUtils.getToken(builder, mCOMMA)) {// a, b = d, c = d\n            ParserUtils.getToken(builder, mNLS);\n\n            if (WRONGWAY.equals(parseVariableDeclarator(builder, isInClass))) return VARIABLE_DEFINITION_ERROR;\n            isManyDef = true;\n          }\n\n          return VARIABLE_DEFINITION;\n        }\n      } else {\n        varAssMarker.drop();\n        builder.error(GroovyBundle.message(\"identifier.expected\"));\n        return VARIABLE_DEFINITION_ERROR;\n      }\n\n    }\n  }","id":105113,"modified_method":"public static GroovyElementType parseDefinitions(PsiBuilder builder,\n                                                   boolean isInClass,\n                                                   boolean isEnumConstantMember,\n                                                   boolean isAnnotationMember,\n                                                   boolean mustBeMethod) {\n    if (!(builder.getTokenType() == mIDENT || builder.getTokenType() == mSTRING_LITERAL || builder.getTokenType() == mGSTRING_LITERAL)) {\n      builder.error(GroovyBundle.message(\"indentifier.or.string.literal.expected\"));\n      return WRONGWAY;\n    }\n\n    PsiBuilder.Marker varMarker = builder.mark();\n    boolean isStringName = builder.getTokenType() == mSTRING_LITERAL || builder.getTokenType() == mGSTRING_LITERAL;\n\n    if (isAnnotationMember && isStringName) {\n      builder.error(GroovyBundle.message(\"string.name.unexpected\"));\n    }\n\n    //eaten one of these tokens\n    boolean eaten = ParserUtils.getToken(builder, mIDENT) || ParserUtils.getToken(builder, mSTRING_LITERAL) || ParserUtils.getToken(builder, mGSTRING_LITERAL);\n\n    if (!eaten) return WRONGWAY;\n\n    if (mustBeMethod && mLPAREN != builder.getTokenType()) {\n      varMarker.drop();\n      return WRONGWAY;\n    }\n\n    if (ParserUtils.getToken(builder, mLPAREN)) {\n      ParameterList.parse(builder, mRPAREN);\n\n//      if (!ParserUtils.getToken(builder, mRPAREN)) {\n//        builder.error(GroovyBundle.message(\"rparen.expected\"));\n//        varMarker.drop();\n//        return WRONGWAY;\n\n      if (isEnumConstantMember && !isStringName) {\n        builder.error(GroovyBundle.message(\"string.name.unexpected\"));\n      }\n\n      ParserUtils.getToken(builder, mNLS);\n      if (!ParserUtils.getToken(builder, mRPAREN)) {\n        builder.error(GroovyBundle.message(\"rparen.expected\"));\n        varMarker.drop();\n        return METHOD_DEFINITION;\n      }\n\n      if (ParserUtils.lookAhead(builder, GroovyTokenTypes.kDEFAULT)) {\n\n        ParserUtils.getToken(builder, GroovyTokenTypes.kDEFAULT);\n        ParserUtils.getToken(builder, GroovyTokenTypes.mNLS);\n\n        boolean b = AnnotationArguments.parseAnnotationMemberValueInitializer(builder);\n        if (b) {\n          varMarker.done(DEFAULT_ANNOTATION_VALUE);\n          return DEFAULT_ANNOTATION_MEMBER;\n        } else {\n          varMarker.rollbackTo();\n          return WRONGWAY;\n        }\n      }\n\n      ThrowClause.parse(builder);\n\n      if (builder.getTokenType() == mLCURLY || ParserUtils.lookAhead(builder, mNLS, mLCURLY)) {\n        ParserUtils.getToken(builder, mNLS);\n        OpenOrClosableBlock.parseOpenBlock(builder);\n      }\n\n//      if (isAnnotationMember && !NONE.equals(paramDeclList) && OPEN_BLOCK.equals(openBlock)) {\n//        builder.error(GroovyBundle.message(\"empty.parameter.list.expected\"));\n//      }\n\n      varMarker.drop();\n      return METHOD_DEFINITION;\n    } else {\n      varMarker.rollbackTo();\n\n      // a = b, c = d\n      PsiBuilder.Marker varAssMarker = builder.mark();\n      if (ParserUtils.getToken(builder, mIDENT)) {\n\n        if (parseAssignment(builder)) { // a = b, c = d\n          if (isInClass) {\n            varAssMarker.done(FIELD);\n          } else {\n            varAssMarker.done(VARIABLE);\n          }\n\n          while (ParserUtils.getToken(builder, mCOMMA)) {\n            ParserUtils.getToken(builder, mNLS);\n\n            if (WRONGWAY.equals(parseVariableDeclarator(builder, isInClass)))\n              return VARIABLE_DEFINITION_ERROR; //parse b = d\n          }\n          return VARIABLE_DEFINITION;\n        } else {\n          if (isInClass) {\n            varAssMarker.done(FIELD);\n          } else {\n            varAssMarker.done(VARIABLE);\n          }\n//          varAssMarker.drop();\n          boolean isManyDef = false;\n          while (ParserUtils.getToken(builder, mCOMMA)) {// a, b = d, c = d\n            ParserUtils.getToken(builder, mNLS);\n\n            if (WRONGWAY.equals(parseVariableDeclarator(builder, isInClass))) return VARIABLE_DEFINITION_ERROR;\n            isManyDef = true;\n          }\n\n          return VARIABLE_DEFINITION;\n        }\n      } else {\n        varAssMarker.drop();\n        builder.error(GroovyBundle.message(\"identifier.expected\"));\n        return VARIABLE_DEFINITION_ERROR;\n      }\n\n    }\n  }","commit_id":"5764f2cea6841e639217da2913f8cfc34aad93df","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void build(final IOperationContext operationContext, final DataFlowBuilderContext _context) {\n    SNode loopStatement = BreakStatement_Behavior.call_getLoop_1213877377001(_context.getNode());\n    SNode switchStatement = BreakStatement_Behavior.call_getSwitch_1213877377021(_context.getNode());\n    if ((loopStatement != null)) {\n      _context.getBuilder().emitJump(_context.getBuilder().after(loopStatement));\n    } else\n    if ((switchStatement != null)) {\n      _context.getBuilder().emitJump(_context.getBuilder().after(switchStatement));\n    } else {\n      _context.getBuilder().emitNop();\n    }\n  }","id":105114,"modified_method":"public void build(final IOperationContext operationContext, final DataFlowBuilderContext _context) {\n    SNode statement = BreakStatement_Behavior.call_getLoopOrSwitch_1213877377041(_context.getNode());\n    if ((statement != null) && SNodeOperations.getAncestor(statement, \"jetbrains.mps.baseLanguage.structure.IStatementListContainer\", false, false) == SNodeOperations.getAncestor(_context.getNode(), \"jetbrains.mps.baseLanguage.structure.IStatementListContainer\", false, false)) {\n      _context.getBuilder().emitJump(_context.getBuilder().after(statement));\n    } else {\n      _context.getBuilder().emitNop();\n    }\n  }","commit_id":"ce3401cdb1a2b942c7111a8a333a9eed181e9cf4","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n  public ApplicationSpecification configure() {\n    return ApplicationSpecification.builder()\n      .setApplicationName(\"TwitterApp\")\n      .addFlow(TwitterFlow.class)\n      .create();\n  }","id":105115,"modified_method":"@Override\n  public ApplicationSpecification configure() {\n    return ApplicationSpecification.builder()\n      .setApplicationName(\"TwitterApp\")\n      .addFlow(TwitterFlow.class)\n      .addQuery(TwitterQuery.class)\n      .addDataSet(new SortedCounterTable(TwitterFlow.topUsers, new SortedCounterTable.SortedCounterConfig()))\n      .addDataSet(new SortedCounterTable(TwitterFlow.topHashTags, new SortedCounterTable.SortedCounterConfig()))\n      .addDataSet(new CounterTable(TwitterFlow.wordCounts))\n      .addDataSet(new CounterTable(TwitterFlow.hashTagWordAssocs))\n      .create();\n  }","commit_id":"c0c467e781ced532684d4867fd0585dea97ebab4","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void configure(FlowSpecifier flowSpecifier) {\n\n    // Set up some meta data\n    flowSpecifier.name(\"TwitterScanner\");\n    flowSpecifier.email(\"dev@continuuity.com\");\n    flowSpecifier.application(\"Twitter Demo\");\n\n    // Now wire up the Flow for real\n    flowSpecifier.flowlet(\"StreamReader\", TwitterGenerator.class, 1);\n    flowSpecifier.flowlet(\"Processor\", TwitterProcessor.class, 1);\n    flowSpecifier.flowlet(\"WordIndexer\", TwitterWordIndexer.class, 1);\n    flowSpecifier.flowlet(\"HashTagIndexer\", TwitterHashTagIndexer.class, 1);\n\n    // Connect to the next Flowlet\n    flowSpecifier.connection(\"StreamReader\", \"Processor\");\n    flowSpecifier.connection(\"Processor\", \"WordIndexer\");\n    flowSpecifier.connection(\"Processor\", \"HashTagIndexer\");\n\n  }","id":105116,"modified_method":"@Override\n  public void configure(FlowSpecifier flowSpecifier) {\n\n    // Set up some meta data\n    flowSpecifier.name(\"TwitterScanner\");\n    flowSpecifier.email(\"dev@continuuity.com\");\n    flowSpecifier.application(\"Twitter Demo\");\n\n    // add the sorted counters data set\n    flowSpecifier.dataset(topHashTags);\n    flowSpecifier.dataset(topUsers);\n    flowSpecifier.dataset(wordCounts);\n    flowSpecifier.dataset(hashTagWordAssocs);\n\n    // Now wire up the Flow for real\n    flowSpecifier.flowlet(\"StreamReader\", TwitterGenerator.class, 1);\n    flowSpecifier.flowlet(\"Processor\", TwitterProcessor.class, 1);\n    flowSpecifier.flowlet(\"WordIndexer\", TwitterWordIndexer.class, 1);\n    flowSpecifier.flowlet(\"HashTagIndexer\", TwitterHashTagIndexer.class, 1);\n\n    // Connect to the next Flowlet\n    flowSpecifier.connection(\"StreamReader\", \"Processor\");\n    flowSpecifier.connection(\"Processor\", \"WordIndexer\");\n    flowSpecifier.connection(\"Processor\", \"HashTagIndexer\");\n\n  }","commit_id":"c0c467e781ced532684d4867fd0585dea97ebab4","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void initialize() {\n    this.topHashTags = (SortedCounterTable)\n        getFlowletContext().getDataSetRegistry().registerDataSet(\n            new SortedCounterTable(\"topHashTags\",\n            new SortedCounterTable.SortedCounterConfig()));\n  }","id":105117,"modified_method":"@Override\n  public void initialize() {\n    this.topHashTags = getFlowletContext().getDataSet(TwitterFlow.topHashTags);\n  }","commit_id":"c0c467e781ced532684d4867fd0585dea97ebab4","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void process(Tuple tuple, TupleContext context,\n      OutputCollector collector) {\n\n    Tweet tweet = tuple.get(\"tweet\");\n    \n    String [] words = tweet.getText().split(\"\\\\s+\");\n    \n    List<String> goodWords = new ArrayList<String>(words.length);\n    for (String word : words) {\n      if (word.length() < 3) continue;\n      if (!word.equals(new String(word.getBytes()))) continue;\n      goodWords.add(word.toLowerCase());\n    }\n    // Split tweet into individual words\n    for (String word : goodWords) {\n      if (word.startsWith(\"#\")) {\n        // Track top hash tags\n        Increment increment = topHashTags.generatePrimaryCounterIncrement(\n            TwitterFlow.HASHTAG_SET, Bytes.toBytes(word), 1L);\n        Tuple outTuple = new TupleBuilder()\n            .set(\"name\", word)\n            .set(\"value\", increment)\n            .create();\n        collector.add(outTuple);\n        // And for every hash tag, track word associations\n        for (String corWord : goodWords) {\n          if (corWord.startsWith(\"#\")) continue;\n//          System.out.println(\"Correlating (\" + word + \") with (\" + corWord + \")\");\n          try {\n            hashTagWordAssocs.incrementCounterSet(word, corWord, 1L);\n          } catch (OperationException e) {\n            // This doesn't seem to work any way I try :(\n            e.printStackTrace();\n          }\n        }\n      } else {\n        // Track word counts\n        Increment increment = wordCounts.generateCounterSetIncrement(\n            TwitterFlow.WORD_SET, Bytes.toBytes(word), 1L);\n        collector.add(increment);\n      }\n    }\n\n    // Track top users\n    Increment increment = topUsers.generatePrimaryCounterIncrement(\n        TwitterFlow.USER_SET, Bytes.toBytes(tweet.getUser()), 1L);\n    Tuple outTuple = new TupleBuilder()\n        .set(\"name\", tweet.getUser())\n        .set(\"value\", increment)\n        .create();\n    \n    collector.add(outTuple);\n  }","id":105118,"modified_method":"@Override\n  public void process(Tuple tuple, TupleContext context,\n      OutputCollector collector) {\n\n    Tweet tweet = tuple.get(\"tweet\");\n    \n    String [] words = tweet.getText().split(\"\\\\s+\");\n    \n    List<String> goodWords = new ArrayList<String>(words.length);\n    for (String word : words) {\n      if (word.length() < 3) continue;\n      if (!word.equals(new String(word.getBytes()))) continue;\n      goodWords.add(word.toLowerCase());\n    }\n    // Split tweet into individual words\n    for (String word : goodWords) {\n      if (word.startsWith(\"#\")) {\n        // Track top hash tags\n        Closure closure = topHashTags.generatePrimaryCounterIncrement(\n            TwitterFlow.HASHTAG_SET, Bytes.toBytes(word), 1L);\n        Tuple outTuple = new TupleBuilder()\n            .set(\"name\", word)\n            .set(\"value\", closure)\n            .create();\n        collector.add(outTuple);\n        // And for every hash tag, track word associations\n        for (String corWord : goodWords) {\n          if (corWord.startsWith(\"#\")) continue;\n//          System.out.println(\"Correlating (\" + word + \") with (\" + corWord + \")\");\n          try {\n            hashTagWordAssocs.incrementCounterSet(word, corWord, 1L);\n          } catch (OperationException e) {\n            // This doesn't seem to work any way I try :(\n            e.printStackTrace();\n          }\n        }\n      } else {\n        // Track word counts\n        wordCounts.incrementCounterSet(TwitterFlow.WORD_SET, Bytes.toBytes(word), 1L);\n      }\n    }\n\n    // Track top users\n    Closure closure = topUsers.generatePrimaryCounterIncrement(\n        TwitterFlow.USER_SET, Bytes.toBytes(tweet.getUser()), 1L);\n    Tuple outTuple = new TupleBuilder()\n        .set(\"name\", tweet.getUser())\n        .set(\"value\", closure)\n        .create();\n    \n    collector.add(outTuple);\n  }","commit_id":"c0c467e781ced532684d4867fd0585dea97ebab4","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void initialize() {\n    this.wordCounts = (CounterTable)\n        getFlowletContext().getDataSetRegistry().registerDataSet(\n            new CounterTable(\"wordCounts\"));\n    this.topHashTags = (SortedCounterTable)\n        getFlowletContext().getDataSetRegistry().registerDataSet(\n            new SortedCounterTable(\"topHashTags\",\n            new SortedCounterTable.SortedCounterConfig()));\n    this.topUsers = (SortedCounterTable)\n        getFlowletContext().getDataSetRegistry().registerDataSet(\n            new SortedCounterTable(\"topUsers\",\n            new SortedCounterTable.SortedCounterConfig()));\n    this.hashTagWordAssocs = (CounterTable)\n        getFlowletContext().getDataSetRegistry().registerDataSet(\n            new CounterTable(\"hashTagWordAssocs\"));\n  }","id":105119,"modified_method":"@Override\n  public void initialize() {\n    this.topHashTags = getFlowletContext().getDataSet(TwitterFlow.topHashTags);\n    this.topUsers = getFlowletContext().getDataSet(TwitterFlow.topUsers);\n\n    this.wordCounts = getFlowletContext().getDataSet(TwitterFlow.wordCounts);\n    this.hashTagWordAssocs = getFlowletContext().getDataSet(TwitterFlow.hashTagWordAssocs);\n  }","commit_id":"c0c467e781ced532684d4867fd0585dea97ebab4","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void configure(QuerySpecifier specifier) {\n    specifier.service(\"twitter\");\n    specifier.timeout(20000);\n    specifier.type(QueryProviderContentType.JSON);\n    specifier.provider(TwitterQuery.class);\n  }","id":105120,"modified_method":"@Override\n  public void configure(QuerySpecifier specifier) {\n    specifier.service(\"twitter\");\n    specifier.timeout(20000);\n    specifier.dataset(TwitterFlow.topHashTags);\n    specifier.dataset(TwitterFlow.wordCounts);\n    specifier.dataset(TwitterFlow.hashTagWordAssocs);\n    specifier.type(QueryProviderContentType.JSON);\n    specifier.provider(TwitterQuery.class);\n  }","commit_id":"c0c467e781ced532684d4867fd0585dea97ebab4","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void initialize() {\n    this.wordCounts = (CounterTable)\n        getQueryProviderContext().getDataSetRegistry().registerDataSet(\n            new CounterTable(\"wordCounts\"));\n    this.topHashTags = (SortedCounterTable)\n        getQueryProviderContext().getDataSetRegistry().registerDataSet(\n            new SortedCounterTable(\"topHashTags\",\n            new SortedCounterTable.SortedCounterConfig()));\n    this.topUsers = (SortedCounterTable)\n        getQueryProviderContext().getDataSetRegistry().registerDataSet(\n            new SortedCounterTable(\"topUsers\",\n            new SortedCounterTable.SortedCounterConfig()));\n    this.hashTagWordAssocs = (CounterTable)\n        getQueryProviderContext().getDataSetRegistry().registerDataSet(\n            new CounterTable(\"hashTagWordAssocs\"));\n  }","id":105121,"modified_method":"@Override\n  public void initialize() {\n    this.topHashTags = getQueryProviderContext().getDataSet(TwitterFlow.topHashTags);\n    this.wordCounts = getQueryProviderContext().getDataSet(TwitterFlow.wordCounts);\n    this.hashTagWordAssocs = getQueryProviderContext().getDataSet(TwitterFlow.hashTagWordAssocs);\n  }","commit_id":"c0c467e781ced532684d4867fd0585dea97ebab4","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void initialize() {\n    this.topUsers = (SortedCounterTable)\n        getFlowletContext().getDataSetRegistry().registerDataSet(\n            new SortedCounterTable(\"topUsers\",\n            new SortedCounterTable.SortedCounterConfig()));\n  }","id":105122,"modified_method":"@Override\n  public void initialize() {\n    this.topUsers = getFlowletContext().getDataSet(TwitterFlow.topUsers);\n  }","commit_id":"c0c467e781ced532684d4867fd0585dea97ebab4","url":"https://github.com/caskdata/cdap"},{"original_method":"void send(int[] siteIds, int mailboxId, final VoltMessage message)\n            throws MessagingException {\n\n        assert(m_initialized);\n        assert(message != null);\n        assert(siteIds != null);\n        final HashSet<ForeignHost> foreignHosts = new HashSet<ForeignHost>(32);\n        for (int siteId : siteIds) {\n            ForeignHost  host = presend(siteId, mailboxId, message);\n            if (host != null) {\n                foreignHosts.add(host);\n            }\n        }\n\n        if (foreignHosts.size() == 0) return;\n\n        /*\n         * Defer the serialization of the message to a FutureTask\n         * that can be invoked later in the DeferredSerialization.\n         * Safe to invoke multiple times and the computation is only\n         * done once.\n         */\n        final FutureTask<ByteBuffer> buildMessageTask = new FutureTask<ByteBuffer>(\n                new Callable<ByteBuffer>() {\n                    public final ByteBuffer call() {\n                        return message.getBufferForMessaging(heapPool).b;\n                    }\n                });\n\n        for (ForeignHost host : foreignHosts) {\n                host.send(mailboxId, siteIds, siteIds.length,\n                        new DeferredSerialization() {\n                    @Override\n                    public final BBContainer serialize(DBBPool pool) throws IOException {\n                        ByteBuffer messageBytes = null;\n                        /*\n                         * FutureTask will ensure that the task is only run once.\n                         */\n                        try {\n                            buildMessageTask.run();\n                            messageBytes = buildMessageTask.get();\n                        } catch (InterruptedException e) {\n                            m_logger.fatal(\"Should not be interrupted while serializing messages\", e);\n                            throw new IOException(e);\n                        } catch (ExecutionException e) {\n                            if (e.getCause() instanceof IOException) {\n                                throw (IOException)e.getCause();\n                            } else {\n                                m_logger.fatal(\"Error while serializing message\", e);\n                                throw new IOException(e);\n                            }\n                        }\n                        /*\n                         * Since messageBytes is shared a duplicate view must be made before manipulating the\n                         * position, limit, etc. It would be good to only do this copy once and then reference count,\n                         * but this isn't the fast path anyways.\n                         */\n                        ByteBuffer view = messageBytes.duplicate();\n                        view.position(0);\n                        BBContainer stupidCopy = pool.acquire(view.remaining());\n                        stupidCopy.b.put(view);\n                        stupidCopy.b.flip();\n                        return stupidCopy;\n                    }\n\n                    @Override\n                    public final void cancel() {\n\n                    }\n                });\n        }\n        foreignHosts.clear();\n    }","id":105123,"modified_method":"void send(int[] siteIds, int mailboxId, final VoltMessage message)\n            throws MessagingException {\n\n        assert(m_initialized);\n        assert(message != null);\n        assert(siteIds != null);\n        final HashMap<ForeignHost, ForeignHostBundle> foreignHosts =\n            new HashMap<ForeignHost, ForeignHostBundle>(32);\n        for (int siteId : siteIds) {\n            ForeignHost host = presend(siteId, mailboxId, message);\n            if (host == null) continue;\n            ForeignHostBundle bundle = foreignHosts.get(host);\n            if (bundle == null) {\n                bundle = new ForeignHostBundle();\n                foreignHosts.put(host, bundle);\n            }\n            bundle.add(siteId);\n        }\n\n        if (foreignHosts.size() == 0) return;\n\n        /*\n         * Defer the serialization of the message to a FutureTask\n         * that can be invoked later in the DeferredSerialization.\n         * Safe to invoke multiple times and the computation is only\n         * done once.\n         */\n        final FutureTask<ByteBuffer> buildMessageTask = new FutureTask<ByteBuffer>(\n                new Callable<ByteBuffer>() {\n                    public final ByteBuffer call() {\n                        return message.getBufferForMessaging(heapPool).b;\n                    }\n                });\n\n        for (Entry<ForeignHost, ForeignHostBundle> e : foreignHosts.entrySet()) {\n                e.getKey().send(mailboxId, e.getValue().siteIds, e.getValue().count,\n                        new DeferredSerialization() {\n                    @Override\n                    public final BBContainer serialize(DBBPool pool) throws IOException {\n                        ByteBuffer messageBytes = null;\n                        /*\n                         * FutureTask will ensure that the task is only run once.\n                         */\n                        try {\n                            buildMessageTask.run();\n                            messageBytes = buildMessageTask.get();\n                        } catch (InterruptedException e) {\n                            m_logger.fatal(\"Should not be interrupted while serializing messages\", e);\n                            throw new IOException(e);\n                        } catch (ExecutionException e) {\n                            if (e.getCause() instanceof IOException) {\n                                throw (IOException)e.getCause();\n                            } else {\n                                m_logger.fatal(\"Error while serializing message\", e);\n                                throw new IOException(e);\n                            }\n                        }\n                        /*\n                         * Since messageBytes is shared a duplicate view must be made before manipulating the\n                         * position, limit, etc. It would be good to only do this copy once and then reference count,\n                         * but this isn't the fast path anyways.\n                         */\n                        ByteBuffer view = messageBytes.duplicate();\n                        view.position(0);\n                        BBContainer stupidCopy = pool.acquire(view.remaining());\n                        stupidCopy.b.put(view);\n                        stupidCopy.b.flip();\n                        return stupidCopy;\n                    }\n\n                    @Override\n                    public final void cancel() {\n\n                    }\n                });\n        }\n        foreignHosts.clear();\n    }","commit_id":"c76e12724c5e24159aafb3566932a11609e26c5b","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public Iterable<SNode> getUnsatisfiedDependencies(SNode module) {\n    if (visible == null) {\n      buildVisible();\n    }\n    if (SNodeOperations.isInstanceOf(module, \"jetbrains.mps.build.mps.structure.BuildMps_Module\")) {\n      MPSModulesClosure runtimeDependencies = new MPSModulesClosure(null, SNodeOperations.cast(module, \"jetbrains.mps.build.mps.structure.BuildMps_Module\")).closure().runtimeDependencies();\n      Iterable<SNode> seq = Sequence.fromIterable(runtimeDependencies.getModules()).concat(Sequence.fromIterable(runtimeDependencies.getLanguagesWithRuntime())).where(new IWhereFilter<SNode>() {\n        public boolean accept(SNode it) {\n          return !(visible.contains(it));\n        }\n      });\n      return seq;\n    }\n    return Sequence.fromIterable(Collections.<SNode>emptyList());\n  }","id":105124,"modified_method":"public Iterable<SNode> getUnsatisfiedDependencies(SNode module) {\n    if (visible == null) {\n      buildVisible();\n    }\n    if (SNodeOperations.isInstanceOf(module, \"jetbrains.mps.build.mps.structure.BuildMps_Module\")) {\n      MPSModulesClosure runtimeDependencies = new MPSModulesClosure(null, SNodeOperations.cast(module, \"jetbrains.mps.build.mps.structure.BuildMps_Module\")).runtimeClosure();\n      Iterable<SNode> seq = Sequence.fromIterable(runtimeDependencies.getModules()).concat(Sequence.fromIterable(runtimeDependencies.getLanguagesWithRuntime())).where(new IWhereFilter<SNode>() {\n        public boolean accept(SNode it) {\n          return !(visible.contains(it));\n        }\n      });\n      return seq;\n    }\n    return Sequence.fromIterable(Collections.<SNode>emptyList());\n  }","commit_id":"501118e245eb11004b808cd6ceac0faa5a87068e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void printUnsatisfiedDependencies(StringBuilder sb, SNode module, boolean includeModuleName) {\n    for (SNode uns : getUnsatisfiedDependencies(module)) {\n      if (includeModuleName) {\n        sb.append(\"unsatisfied dependency: module \" + SPropertyOperations.getString(module, \"name\") + \" requires \" + SPropertyOperations.getString(uns, \"name\"));\n        sb.append('\\n');\n      } else {\n        sb.append(\"unsatisfied dependency on \" + SPropertyOperations.getString(uns, \"name\"));\n      }\n    }\n  }","id":105125,"modified_method":"public void printUnsatisfiedDependencies(StringBuilder sb, SNode module, boolean includeModuleName) {\n    for (SNode uns : getUnsatisfiedDependencies(module)) {\n      if (includeModuleName) {\n        sb.append(\"unsatisfied dependency: module \" + SPropertyOperations.getString(module, \"name\") + \" requires \" + SPropertyOperations.getString(uns, \"name\"));\n      } else {\n        sb.append(\"unsatisfied dependency on \" + SPropertyOperations.getString(uns, \"name\"));\n      }\n      sb.append('\\n');\n    }\n  }","commit_id":"501118e245eb11004b808cd6ceac0faa5a87068e","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void collectAllCompileTimeDependencies(SNode module, boolean reexportOnly) {\n    // copy of ModuleDependenciesManager.collectAllCompileTimeDependencies (ignoring \"core\" language) \n    modules.add(module);\n    for (SNode m : getDependencies(module, reexportOnly)) {\n      if (!(modules.contains(m))) {\n        collectAllCompileTimeDependencies(m, true);\n      }\n    }\n\n    if (reexportOnly) {\n      return;\n    }\n\n    // NOTE: generator dependencies are imported into language in ModuleLoader.collectDependencies() \n\n    for (SNode language : getUsedLanguages(module)) {\n      boolean hasRuntime = false;\n      for (SNode rdep : SLinkOperations.getTargets(language, \"runtime\", true)) {\n        if (!(SNodeOperations.isInstanceOf(rdep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime\"))) {\n          hasRuntime = true;\n          continue;\n        }\n        SNode runtimeSolution = SNodeOperations.as(toOriginal(SLinkOperations.getTarget(SNodeOperations.cast(rdep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime\"), \"solution\", false)), \"jetbrains.mps.build.mps.structure.BuildMps_Solution\");\n        if (!(modules.contains(runtimeSolution))) {\n          collectAllCompileTimeDependencies(runtimeSolution, true);\n        }\n\n      }\n      if (hasRuntime) {\n        languagesWithRuntime.add(language);\n      }\n    }\n  }","id":105126,"modified_method":"private void collectAllDependencies(SNode module, boolean reexportOnly, boolean compileTimeOnly) {\n    // copy of ModuleDependenciesManager.collectAllCompileTimeDependencies (ignoring \"core\" language) \n    modules.add(module);\n    for (SNode m : getDependencies(module, reexportOnly)) {\n      if (!(modules.contains(m))) {\n        collectAllDependencies(m, compileTimeOnly, compileTimeOnly);\n      }\n    }\n\n    if (reexportOnly) {\n      return;\n    }\n\n    // NOTE: generator dependencies are imported into language in ModuleLoader.collectDependencies() \n\n    for (SNode language : getUsedLanguages(module)) {\n      boolean hasRuntime = false;\n      for (SNode rdep : SLinkOperations.getTargets(language, \"runtime\", true)) {\n        if (!(SNodeOperations.isInstanceOf(rdep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime\"))) {\n          hasRuntime = true;\n          continue;\n        }\n        SNode runtimeSolution = SNodeOperations.as(toOriginal(SLinkOperations.getTarget(SNodeOperations.cast(rdep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleSolutionRuntime\"), \"solution\", false)), \"jetbrains.mps.build.mps.structure.BuildMps_Solution\");\n        if (!(modules.contains(runtimeSolution))) {\n          collectAllDependencies(runtimeSolution, compileTimeOnly, compileTimeOnly);\n        }\n\n      }\n      if (hasRuntime) {\n        languagesWithRuntime.add(language);\n      }\n    }\n  }","commit_id":"501118e245eb11004b808cd6ceac0faa5a87068e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public MPSModulesClosure closure() {\n    collectAllCompileTimeDependencies(initial, false);\n    modules.remove(initial);\n    return this;\n  }","id":105127,"modified_method":"public MPSModulesClosure closure() {\n    collectAllDependencies(initial, false, true);\n    modules.remove(initial);\n    return this;\n  }","commit_id":"501118e245eb11004b808cd6ceac0faa5a87068e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void importRequired() {\n    loadFile();\n    if (myModuleDescriptor != null) {\n      SPropertyOperations.set(myModule, \"uuid\", myModuleDescriptor.getModuleReference().getModuleId().toString());\n      SPropertyOperations.set(myModule, \"name\", myModuleDescriptor.getModuleReference().getModuleFqName());\n\n      if (SNodeOperations.isInstanceOf(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\")) {\n        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\"), \"dependencies\", true)).removeWhere(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return SNodeOperations.isInstanceOf(it, \"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\");\n          }\n        });\n\n        importDependencies();\n        collectSources(true, true);\n        if (SNodeOperations.isInstanceOf(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Language\") && myModuleDescriptor instanceof LanguageDescriptor) {\n          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Language\"), \"runtime\", true)).clear();\n          importRuntime();\n          importLanguageDeps();\n        }\n      }\n\n      if (SNodeOperations.isInstanceOf(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_DevKit\")) {\n        importDevkit();\n      }\n    }\n  }","id":105128,"modified_method":"public void importRequired() {\n    loadFile();\n    if (myModuleDescriptor != null) {\n      SPropertyOperations.set(myModule, \"uuid\", myModuleDescriptor.getModuleReference().getModuleId().toString());\n      SPropertyOperations.set(myModule, \"name\", myModuleDescriptor.getModuleReference().getModuleFqName());\n\n      if (SNodeOperations.isInstanceOf(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\")) {\n        Iterable<SNode> toRemove = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\"), \"dependencies\", true)).where(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return SNodeOperations.isInstanceOf(it, \"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\");\n          }\n        });\n        Iterable<SNode> removed = Sequence.fromIterable(toRemove).select(new ISelector<SNode, SNode>() {\n          public SNode select(SNode it) {\n            return SLinkOperations.getTarget(SNodeOperations.cast(it, \"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\"), \"dependency\", true);\n          }\n        });\n\n        ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\"), \"dependencies\", true)).removeSequence(Sequence.fromIterable(toRemove));\n        importDependencies(removed);\n        collectSources(true, true);\n        if (SNodeOperations.isInstanceOf(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Language\") && myModuleDescriptor instanceof LanguageDescriptor) {\n          ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Language\"), \"runtime\", true)).clear();\n          importRuntime();\n          importLanguageDeps();\n        }\n      }\n\n      if (SNodeOperations.isInstanceOf(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_DevKit\")) {\n        importDevkit();\n      }\n    }\n  }","commit_id":"501118e245eb11004b808cd6ceac0faa5a87068e","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void importDependencies() {\n    SNode module = SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n\n    Iterable<Dependency> dependencies = myModuleDescriptor.getDependencies();\n    if (myModuleDescriptor instanceof LanguageDescriptor) {\n      // see j.m.p.dependency.ModuleDependenciesManager#collectAllCompileTimeDependencies \n      Iterable<GeneratorDescriptor> generators = ((LanguageDescriptor) myModuleDescriptor).getGenerators();\n      dependencies = Sequence.fromIterable(dependencies).union(Sequence.fromIterable(generators).translate(new ITranslator2<GeneratorDescriptor, Dependency>() {\n        public Iterable<Dependency> translate(GeneratorDescriptor it) {\n          return it.getDependencies();\n        }\n      }));\n    }\n\n    Set<SNode> seen = new HashSet<SNode>();\n    for (Dependency dep : dependencies) {\n      boolean reexport = dep.isReexport();\n      if (!(reexport)) {\n        continue;\n      }\n\n      ModuleReference moduleRef = dep.getModuleRef();\n      SNode resolved;\n      String targetName = moduleRef.getModuleFqName();\n      int sharpIndex = targetName.indexOf(\"#\");\n      if (sharpIndex >= 0) {\n        resolved = SNodeOperations.as(visible.resolve(targetName.substring(0, sharpIndex), null), \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n        if (resolved == null) {\n          report(\"cannot resolve reference on generator's containing language by module name: \" + targetName, myOriginalModule);\n          continue;\n        }\n      } else {\n        resolved = SNodeOperations.as(visible.resolve(targetName, moduleRef.getModuleId().toString()), \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n        if (resolved == null) {\n          report(\"unsatisfied dependency: \" + dep.getModuleRef().toString(), myOriginalModule);\n          continue;\n        }\n      }\n\n      if (!(seen.add(resolved))) {\n        continue;\n      }\n\n      SNode res = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\", null);\n      SLinkOperations.setTarget(res, \"module\", resolved, false);\n      SPropertyOperations.set(res, \"reexport\", \"\" + reexport);\n      SNode extr = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\", null);\n      SLinkOperations.setTarget(extr, \"dependency\", res, true);\n      ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).addElement(extr);\n    }\n\n    // java stubs: jars \n    for (ModelRoot entry : myModuleDescriptor.getStubModelEntries()) {\n      if (!(LanguageID.JAVA_MANAGER.equals(entry.getManager()))) {\n        continue;\n      }\n\n      String path = entry.getPath();\n      SNode p = ListSequence.fromList(convertPath(path, myOriginalModule)).first();\n      if (p == null) {\n        continue;\n      }\n\n      if (path.endsWith(\".jar\")) {\n        SNode jar = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar\", null);\n        SLinkOperations.setTarget(jar, \"path\", p, true);\n        SNode extr = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\", null);\n        SLinkOperations.setTarget(extr, \"dependency\", jar, true);\n        ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).addElement(extr);\n      } else {\n        report(\"only jar stub libraries are supported, found: \" + path, myOriginalModule);\n      }\n    }\n  }","id":105129,"modified_method":"private void importDependencies(Iterable<SNode> previous) {\n    SNode module = SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n\n    Iterable<Dependency> dependencies = myModuleDescriptor.getDependencies();\n    if (myModuleDescriptor instanceof LanguageDescriptor) {\n      // see j.m.p.dependency.ModuleDependenciesManager#collectAllCompileTimeDependencies \n      Iterable<GeneratorDescriptor> generators = ((LanguageDescriptor) myModuleDescriptor).getGenerators();\n      dependencies = Sequence.fromIterable(dependencies).union(Sequence.fromIterable(generators).translate(new ITranslator2<GeneratorDescriptor, Dependency>() {\n        public Iterable<Dependency> translate(GeneratorDescriptor it) {\n          return it.getDependencies();\n        }\n      }));\n    }\n\n    Map<SNode, SNode> seen = new HashMap<SNode, SNode>();\n    for (Dependency dep : dependencies) {\n      boolean reexport = dep.isReexport();\n\n      ModuleReference moduleRef = dep.getModuleRef();\n      SNode resolved;\n      String targetName = moduleRef.getModuleFqName();\n      int sharpIndex = targetName.indexOf(\"#\");\n      if (sharpIndex >= 0) {\n        resolved = SNodeOperations.as(visible.resolve(targetName.substring(0, sharpIndex), null), \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n        if (resolved == null) {\n          report(\"cannot resolve reference on generator's containing language by module name: \" + targetName, myOriginalModule);\n          continue;\n        }\n      } else {\n        resolved = SNodeOperations.as(visible.resolve(targetName, moduleRef.getModuleId().toString()), \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n        if (resolved == null) {\n          report(\"unsatisfied dependency: \" + dep.getModuleRef().toString(), myOriginalModule);\n          continue;\n        }\n      }\n\n      SNode prev = seen.get(resolved);\n      if (prev != null) {\n        if (reexport) {\n          SPropertyOperations.set(prev, \"reexport\", \"\" + (true));\n        }\n        continue;\n      }\n\n      SNode res = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\", null);\n      seen.put(resolved, res);\n      SLinkOperations.setTarget(res, \"module\", resolved, false);\n      SPropertyOperations.set(res, \"reexport\", \"\" + (reexport));\n      SNode extr = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\", null);\n      SLinkOperations.setTarget(extr, \"dependency\", res, true);\n      ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).addElement(extr);\n    }\n\n    // java stubs: jars \n    for (ModelRoot entry : myModuleDescriptor.getStubModelEntries()) {\n      if (!(LanguageID.JAVA_MANAGER.equals(entry.getManager()))) {\n        continue;\n      }\n\n      String path = entry.getPath();\n      final SNode p = ListSequence.fromList(convertPath(path, myOriginalModule)).first();\n      if (p == null) {\n        continue;\n      }\n\n      if (path.endsWith(\".jar\")) {\n        SNode jar = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar\", null);\n        SLinkOperations.setTarget(jar, \"path\", p, true);\n        SNode oldJarRef = Sequence.fromIterable(previous).where(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return SNodeOperations.isInstanceOf(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar\") && eq_a6ewnz_a0a0a0a0a0a0a0c0g0j0r(BuildSourcePath_Behavior.call_getRelativePath_5481553824944787371(SLinkOperations.getTarget(SNodeOperations.cast(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar\"), \"path\", true)), BuildSourcePath_Behavior.call_getRelativePath_5481553824944787371(p));\n          }\n        }).select(new ISelector<SNode, SNode>() {\n          public SNode select(SNode it) {\n            return SLinkOperations.getTarget(SNodeOperations.cast(it, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar\"), \"customLocation\", true);\n          }\n        }).first();\n        if (oldJarRef != null) {\n          SLinkOperations.setTarget(jar, \"customLocation\", SConceptOperations.createNewNode(\"jetbrains.mps.build.structure.BuildSource_JavaExternalJarRef\", null), true);\n          SLinkOperations.setTarget(SLinkOperations.getTarget(jar, \"customLocation\", true), \"jar\", SLinkOperations.getTarget(oldJarRef, \"jar\", false), false);\n        }\n        SNode extr = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\", null);\n        SLinkOperations.setTarget(extr, \"dependency\", jar, true);\n        ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).addElement(extr);\n      } else {\n        report(\"only jar stub libraries are supported, found: \" + path, myOriginalModule);\n      }\n    }\n  }","commit_id":"501118e245eb11004b808cd6ceac0faa5a87068e","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void collectDependencies(boolean checkOnly) {\n    SNode module = SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n    Map<String, Boolean> usedModuleIds = new HashMap<String, Boolean>();\n    Set<String> extractedModules = new HashSet<String>();\n    for (SNode dep : SLinkOperations.getTargets(module, \"dependencies\", true)) {\n      boolean extracted = false;\n      if (SNodeOperations.isInstanceOf(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\")) {\n        dep = SLinkOperations.getTarget(SNodeOperations.cast(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\"), \"dependency\", true);\n        extracted = true;\n      }\n      if (SNodeOperations.isInstanceOf(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\")) {\n        SNode onModule = SNodeOperations.cast(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\");\n        boolean existing = (usedModuleIds.containsKey(SPropertyOperations.getString(SLinkOperations.getTarget(onModule, \"module\", false), \"uuid\")) ?\n          usedModuleIds.get(SPropertyOperations.getString(SLinkOperations.getTarget(onModule, \"module\", false), \"uuid\")) :\n          false\n        );\n        usedModuleIds.put(SPropertyOperations.getString(SLinkOperations.getTarget(onModule, \"module\", false), \"uuid\"), SPropertyOperations.getBoolean(onModule, \"reexport\") || existing);\n        if (extracted) {\n          extractedModules.add(SPropertyOperations.getString(SLinkOperations.getTarget(onModule, \"module\", false), \"uuid\"));\n        }\n      }\n    }\n\n    Iterable<Dependency> dependencies = myModuleDescriptor.getDependencies();\n    for (Dependency dependency : dependencies) {\n      ModuleReference moduleRef = dependency.getModuleRef();\n      if (moduleRef.getModuleFqName().contains(\"#\")) {\n        report(\"module cannot depend on generator: `\" + moduleRef.getModuleFqName() + \"'\", myOriginalModule);\n      }\n    }\n    if (myModuleDescriptor instanceof LanguageDescriptor) {\n      // see j.m.p.dependency.ModuleDependenciesManager#collectAllCompileTimeDependencies \n      Iterable<GeneratorDescriptor> generators = ((LanguageDescriptor) myModuleDescriptor).getGenerators();\n      dependencies = Sequence.fromIterable(dependencies).union(Sequence.fromIterable(generators).translate(new ITranslator2<GeneratorDescriptor, Dependency>() {\n        public Iterable<Dependency> translate(GeneratorDescriptor it) {\n          return it.getDependencies();\n        }\n      }));\n    }\n\n    // resolve all dependencies \n    Map<SNode, Boolean> depsToReexport = new LinkedHashMap<SNode, Boolean>();\n    for (Dependency dep : dependencies) {\n      boolean reexport = dep.isReexport();\n      ModuleReference moduleRef = dep.getModuleRef();\n      SNode resolved;\n      String targetName = moduleRef.getModuleFqName();\n      int sharpIndex = targetName.indexOf(\"#\");\n      if (sharpIndex >= 0) {\n        resolved = SNodeOperations.as(visible.resolve(targetName.substring(0, sharpIndex), null), \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n        if (resolved == null) {\n          report(\"cannot resolve reference on generator's containing language by module name: \" + targetName, myOriginalModule);\n          continue;\n        }\n      } else {\n        resolved = SNodeOperations.as(visible.resolve(targetName, moduleRef.getModuleId().toString()), \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n        if (resolved == null) {\n          report(\"unsatisfied dependency: \" + dep.getModuleRef().toString(), myOriginalModule);\n          continue;\n        }\n      }\n\n      Boolean alreadyReexport = depsToReexport.get(resolved);\n      if (alreadyReexport != null && alreadyReexport.booleanValue()) {\n        continue;\n      }\n      depsToReexport.put(resolved, reexport);\n    }\n\n    // check & create \n    for (Map.Entry<SNode, Boolean> entry : depsToReexport.entrySet()) {\n      SNode resolved = entry.getKey();\n      boolean reexport = entry.getValue().booleanValue();\n\n      boolean found = false;\n      if (usedModuleIds.containsKey(SPropertyOperations.getString(resolved, \"uuid\"))) {\n        found = true;\n        boolean foundReexport = usedModuleIds.get(SPropertyOperations.getString(resolved, \"uuid\"));\n        if (foundReexport != reexport && extractedModules.contains(SPropertyOperations.getString(resolved, \"uuid\"))) {\n          report(\"wrong reexport status for dependency in build script for: \" + SPropertyOperations.getString(resolved, \"name\"), myOriginalModule);\n        }\n      }\n\n      if (reexport && !(extractedModules.contains(SPropertyOperations.getString(resolved, \"uuid\")))) {\n        report(\"reexport dependency should be extracted into build script: \" + SPropertyOperations.getString(resolved, \"name\"), myOriginalModule);\n      }\n      if (!(found)) {\n        if (checkOnly) {\n          continue;\n        }\n\n        SNode res = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\", null);\n        SLinkOperations.setTarget(res, \"module\", resolved, false);\n        SPropertyOperations.set(res, \"reexport\", \"\" + reexport);\n        ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).addElement(res);\n      }\n    }\n\n    // java stubs: jars \n    for (ModelRoot entry : myModuleDescriptor.getStubModelEntries()) {\n      if (!(LanguageID.JAVA_MANAGER.equals(entry.getManager()))) {\n        continue;\n      }\n\n      String path = entry.getPath();\n      SNode p = ListSequence.fromList(convertPath(path, myOriginalModule)).first();\n      if (p == null) {\n        continue;\n      }\n\n      if (path.endsWith(\".jar\")) {\n        final String relPath = BuildSourcePath_Behavior.call_getRelativePath_5481553824944787371(p);\n        if (!(ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).any(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            SNode dep = (SNodeOperations.isInstanceOf(it, \"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\") ?\n              SLinkOperations.getTarget(SNodeOperations.cast(it, \"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\"), \"dependency\", true) :\n              it\n            );\n            return SNodeOperations.isInstanceOf(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar\") && eq_a6ewnz_a0a1a0a0a0a0b0g0r0q(BuildSourcePath_Behavior.call_getRelativePath_5481553824944787371(SLinkOperations.getTarget(SNodeOperations.cast(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar\"), \"path\", true)), relPath);\n          }\n        }))) {\n          report(\"jar stub library should be extracted into build script: \" + relPath, myOriginalModule);\n        }\n      } else {\n        report(\"only jar stub libraries are supported, found: \" + path, myOriginalModule);\n      }\n    }\n\n  }","id":105130,"modified_method":"private void collectDependencies(boolean checkOnly) {\n    SNode module = SNodeOperations.cast(myModule, \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n    Map<String, Boolean> usedModuleIds = new HashMap<String, Boolean>();\n    Set<String> extractedModules = new HashSet<String>();\n    for (SNode dep : SLinkOperations.getTargets(module, \"dependencies\", true)) {\n      boolean extracted = false;\n      if (SNodeOperations.isInstanceOf(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\")) {\n        dep = SLinkOperations.getTarget(SNodeOperations.cast(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\"), \"dependency\", true);\n        extracted = true;\n      }\n      if (SNodeOperations.isInstanceOf(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\")) {\n        SNode onModule = SNodeOperations.cast(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\");\n        boolean existing = (usedModuleIds.containsKey(SPropertyOperations.getString(SLinkOperations.getTarget(onModule, \"module\", false), \"uuid\")) ?\n          usedModuleIds.get(SPropertyOperations.getString(SLinkOperations.getTarget(onModule, \"module\", false), \"uuid\")) :\n          false\n        );\n        usedModuleIds.put(SPropertyOperations.getString(SLinkOperations.getTarget(onModule, \"module\", false), \"uuid\"), SPropertyOperations.getBoolean(onModule, \"reexport\") || existing);\n        if (extracted) {\n          extractedModules.add(SPropertyOperations.getString(SLinkOperations.getTarget(onModule, \"module\", false), \"uuid\"));\n        }\n      }\n    }\n\n    Iterable<Dependency> dependencies = myModuleDescriptor.getDependencies();\n    for (Dependency dependency : dependencies) {\n      ModuleReference moduleRef = dependency.getModuleRef();\n      if (moduleRef.getModuleFqName().contains(\"#\")) {\n        report(\"module cannot depend on generator: `\" + moduleRef.getModuleFqName() + \"'\", myOriginalModule);\n      }\n    }\n    if (myModuleDescriptor instanceof LanguageDescriptor) {\n      // see j.m.p.dependency.ModuleDependenciesManager#collectAllCompileTimeDependencies \n      Iterable<GeneratorDescriptor> generators = ((LanguageDescriptor) myModuleDescriptor).getGenerators();\n      dependencies = Sequence.fromIterable(dependencies).union(Sequence.fromIterable(generators).translate(new ITranslator2<GeneratorDescriptor, Dependency>() {\n        public Iterable<Dependency> translate(GeneratorDescriptor it) {\n          return it.getDependencies();\n        }\n      }));\n    }\n\n    // resolve all dependencies \n    Map<SNode, Boolean> depsToReexport = new LinkedHashMap<SNode, Boolean>();\n    for (Dependency dep : dependencies) {\n      boolean reexport = dep.isReexport();\n      ModuleReference moduleRef = dep.getModuleRef();\n      SNode resolved;\n      String targetName = moduleRef.getModuleFqName();\n      int sharpIndex = targetName.indexOf(\"#\");\n      if (sharpIndex >= 0) {\n        resolved = SNodeOperations.as(visible.resolve(targetName.substring(0, sharpIndex), null), \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n        if (resolved == null) {\n          report(\"cannot resolve reference on generator's containing language by module name: \" + targetName, myOriginalModule);\n          continue;\n        }\n      } else {\n        resolved = SNodeOperations.as(visible.resolve(targetName, moduleRef.getModuleId().toString()), \"jetbrains.mps.build.mps.structure.BuildMps_Module\");\n        if (resolved == null) {\n          report(\"unsatisfied dependency: \" + dep.getModuleRef().toString(), myOriginalModule);\n          continue;\n        }\n      }\n\n      Boolean alreadyReexport = depsToReexport.get(resolved);\n      if (alreadyReexport != null && alreadyReexport.booleanValue()) {\n        continue;\n      }\n      depsToReexport.put(resolved, reexport);\n    }\n\n    // check & create \n    for (Map.Entry<SNode, Boolean> entry : depsToReexport.entrySet()) {\n      SNode resolved = entry.getKey();\n      boolean reexport = entry.getValue().booleanValue();\n\n      boolean found = false;\n      if (usedModuleIds.containsKey(SPropertyOperations.getString(resolved, \"uuid\"))) {\n        found = true;\n        boolean foundReexport = usedModuleIds.get(SPropertyOperations.getString(resolved, \"uuid\"));\n        if (foundReexport != reexport && extractedModules.contains(SPropertyOperations.getString(resolved, \"uuid\"))) {\n          report(\"wrong reexport status for dependency in build script for: \" + SPropertyOperations.getString(resolved, \"name\"), myOriginalModule);\n        }\n      }\n\n      if (!(extractedModules.contains(SPropertyOperations.getString(resolved, \"uuid\")))) {\n        report(\"dependencies should be extracted into build script: \" + SPropertyOperations.getString(resolved, \"name\"), myOriginalModule);\n      }\n      if (!(found)) {\n        if (checkOnly) {\n          continue;\n        }\n\n        SNode res = SConceptOperations.createNewNode(\"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyOnModule\", null);\n        SLinkOperations.setTarget(res, \"module\", resolved, false);\n        SPropertyOperations.set(res, \"reexport\", \"\" + (reexport));\n        ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).addElement(res);\n      }\n    }\n\n    // java stubs: jars \n    for (ModelRoot entry : myModuleDescriptor.getStubModelEntries()) {\n      if (!(LanguageID.JAVA_MANAGER.equals(entry.getManager()))) {\n        continue;\n      }\n\n      String path = entry.getPath();\n      SNode p = ListSequence.fromList(convertPath(path, myOriginalModule)).first();\n      if (p == null) {\n        continue;\n      }\n\n      if (path.endsWith(\".jar\")) {\n        final String relPath = BuildSourcePath_Behavior.call_getRelativePath_5481553824944787371(p);\n        if (!(ListSequence.fromList(SLinkOperations.getTargets(module, \"dependencies\", true)).any(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            SNode dep = (SNodeOperations.isInstanceOf(it, \"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\") ?\n              SLinkOperations.getTarget(SNodeOperations.cast(it, \"jetbrains.mps.build.mps.structure.BuildMps_ExtractedModuleDependency\"), \"dependency\", true) :\n              it\n            );\n            return SNodeOperations.isInstanceOf(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar\") && eq_a6ewnz_a0a1a0a0a0a0b0g0r0q(BuildSourcePath_Behavior.call_getRelativePath_5481553824944787371(SLinkOperations.getTarget(SNodeOperations.cast(dep, \"jetbrains.mps.build.mps.structure.BuildMps_ModuleDependencyJar\"), \"path\", true)), relPath);\n          }\n        }))) {\n          report(\"jar stub library should be extracted into build script: \" + relPath, myOriginalModule);\n        }\n      } else {\n        report(\"only jar stub libraries are supported, found: \" + path, myOriginalModule);\n      }\n    }\n\n  }","commit_id":"501118e245eb11004b808cd6ceac0faa5a87068e","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void analyzeMethod() throws CheckedAnalysisException {\n\t\t\tif (DEBUG) {\n\t\t\t\tSystem.out.println(\"*** Analyzing method \" + methodDescriptor);\n\t\t\t}\n\n\t\t\tif (DEBUG_METHOD != null && !methodDescriptor.getName().equals(DEBUG_METHOD)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tanalysisCache = Global.getAnalysisCache();\n\n\t\t\t// Execute the obligation dataflow analysis\n\t\t\ttry {\n\t\t\t\tdataflow = analysisCache.getMethodAnalysis(ObligationDataflow.class, methodDescriptor);\n\t\t\t} catch (ObligationAcquiredOrReleasedInLoopException e) {\n\t\t\t\t// It is not possible to analyze this method.\n\t\t\t\tif (DEBUG) {\n\t\t\t\t\tSystem.out.println(\"FindUnsatisifedObligation: \" + methodDescriptor + \": \" + e.getMessage());\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// We need these to apply the false-positive\n\t\t\t// suppression heuristics.\n\t\t\tcpg = analysisCache.getClassAnalysis(ConstantPoolGen.class, methodDescriptor.getClassDescriptor());\n\t\t\tinvDataflow = analysisCache.getMethodAnalysis(IsNullValueDataflow.class, methodDescriptor);\n\t\t\ttypeDataflow = analysisCache.getMethodAnalysis(TypeDataflow.class, methodDescriptor);\n\t\t\tsubtypes2 = Global.getAnalysisCache().getDatabase(Subtypes2.class);\n\n\t\t\t//\n\t\t\t// Main loop: looking at the StateSet at the exit block of the CFG,\n\t\t\t// see if there are any states with nonempty obligation sets.\n\t\t\t//\n\t\t\tStateSet factAtExit = dataflow.getStartFact(cfg.getExit());\n\t\t\tSet<Obligation> leakedObligations = new HashSet<Obligation>();\n\t\t\tfor (Iterator<State> i = factAtExit.stateIterator(); i.hasNext();) {\n\t\t\t\tState state = i.next();\n\t\t\t\tfor (int id = 0; id < database.getFactory().getMaxObligationTypes(); ++id) {\n\t\t\t\t\t// If the raw count produced by the analysis\n\t\t\t\t\t// for this obligation type is 0,\n\t\t\t\t\t// assume everything is ok on this state's path.\n\t\t\t\t\tint rawLeakCount = state.getObligationSet().getCount(id);\n\t\t\t\t\tif (rawLeakCount == 0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Apply the false-positive suppression heuristics\n\t\t\t\t\tint leakCount;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tleakCount = getAdjustedLeakCount(state, id);\n\t\t\t\t\t} catch (DataflowAnalysisException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (leakCount > 0) {\n\t\t\t\t\t\tObligation obligation = database.getFactory().getObligationById(id);\n\t\t\t\t\t\tleakedObligations.add(obligation);\n\t\t\t\t\t}\n\t\t\t\t\t// TODO: if the leak count is less than 0, then a nonexistent resource was closed\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tfor (Obligation obligation : leakedObligations) {\n\t\t\t\tbugReporter.reportBug(\n\t\t\t\t\tnew BugInstance(FindUnsatisfiedObligation.this, \"OBL_UNSATISFIED_OBLIGATION\", NORMAL_PRIORITY).addClassAndMethod(methodDescriptor).addClass(obligation.getClassName()).describe(\"CLASS_REFTYPE\"));\n\t\t\t}\n\t\t\t// TODO: closing of nonexistent resources\n\n\t\t}","id":105131,"modified_method":"public void analyzeMethod() throws CheckedAnalysisException {\n\t\t\tif (DEBUG) {\n\t\t\t\tSystem.out.println(\"*** Analyzing method \" + methodDescriptor);\n\t\t\t}\n\n\t\t\tif (DEBUG_METHOD != null && !methodDescriptor.getName().equals(DEBUG_METHOD)) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tanalysisCache = Global.getAnalysisCache();\n\n\t\t\t// Execute the obligation dataflow analysis\n\t\t\ttry {\n\t\t\t\tdataflow = analysisCache.getMethodAnalysis(ObligationDataflow.class, methodDescriptor);\n\t\t\t} catch (ObligationAcquiredOrReleasedInLoopException e) {\n\t\t\t\t// It is not possible to analyze this method.\n\t\t\t\tif (DEBUG) {\n\t\t\t\t\tSystem.out.println(\"FindUnsatisifedObligation: \" + methodDescriptor + \": \" + e.getMessage());\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// We need these to apply the false-positive\n\t\t\t// suppression heuristics.\n\t\t\tcpg = analysisCache.getClassAnalysis(ConstantPoolGen.class, methodDescriptor.getClassDescriptor());\n\t\t\tinvDataflow = analysisCache.getMethodAnalysis(IsNullValueDataflow.class, methodDescriptor);\n\t\t\ttypeDataflow = analysisCache.getMethodAnalysis(TypeDataflow.class, methodDescriptor);\n\t\t\tsubtypes2 = Global.getAnalysisCache().getDatabase(Subtypes2.class);\n\n\t\t\t//Set<Obligation> leakedObligations = new HashSet<Obligation>();\n\t\t\tMap<Obligation, List<State>> leakedObligations = new HashMap<Obligation, List<State>>();\n\n\t\t\t//\n\t\t\t// Main loop: looking at the StateSet at the exit block of the CFG,\n\t\t\t// see if there are any states with nonempty obligation sets.\n\t\t\t//\n\t\t\tStateSet factAtExit = dataflow.getStartFact(cfg.getExit());\n\t\t\tfor (Iterator<State> i = factAtExit.stateIterator(); i.hasNext();) {\n\t\t\t\tState state = i.next();\n\n\t\t\t\tfor (int id = 0; id < database.getFactory().getMaxObligationTypes(); ++id) {\n\t\t\t\t\tObligation obligation = database.getFactory().getObligationById(id);\n\t\t\t\t\t// If the raw count produced by the analysis\n\t\t\t\t\t// for this obligation type is 0,\n\t\t\t\t\t// assume everything is ok on this state's path.\n\t\t\t\t\tint rawLeakCount = state.getObligationSet().getCount(id);\n\t\t\t\t\tif (rawLeakCount == 0) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Apply the false-positive suppression heuristics\n\t\t\t\t\tint leakCount;\n\t\t\t\t\ttry {\n\t\t\t\t\t\tleakCount = getAdjustedLeakCount(state, id);\n\t\t\t\t\t} catch (DataflowAnalysisException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\tif (leakCount > 0) {\n\t\t\t\t\t\t//leakedObligations.add(obligation);\n\t\t\t\t\t\tList<State> leakingStateList = leakedObligations.get(obligation);\n\t\t\t\t\t\tif (leakingStateList == null) {\n\t\t\t\t\t\t\tleakingStateList = new LinkedList<State>();\n\t\t\t\t\t\t\tleakedObligations.put(obligation, leakingStateList);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tleakingStateList.add(state);\n\t\t\t\t\t}\n\t\t\t\t\t// TODO: if the leak count is less than 0, then a nonexistent resource was closed\n\t\t\t\t}\n\t\t\t}\n\n//\t\t\tfor (Obligation obligation : leakedObligations) {\n//\t\t\t\tbugReporter.reportBug(\n//\t\t\t\t\tnew BugInstance(FindUnsatisfiedObligation.this, \"OBL_UNSATISFIED_OBLIGATION\", NORMAL_PRIORITY).addClassAndMethod(methodDescriptor).addClass(obligation.getClassName()).describe(\"CLASS_REFTYPE\"));\n//\t\t\t}\n\t\t\tfor (Map.Entry<Obligation, List<State>> entry : leakedObligations.entrySet()) {\n\t\t\t\tObligation obligation = entry.getKey();\n\t\t\t\tList<State> stateList = entry.getValue();\n\t\t\t\t\n\t\t\t\tBugInstance bugInstance =\n\t\t\t\t\tnew BugInstance(FindUnsatisfiedObligation.this, \"OBL_UNSATISFIED_OBLIGATION\", NORMAL_PRIORITY).addClassAndMethod(methodDescriptor)\n\t\t\t\t\t.addClass(obligation.getClassName())\n\t\t\t\t\t.describe(\"CLASS_REFTYPE\");\n\t\t\t\t\n\t\t\t\t// FIXME:\n\t\t\t\t// For now, just report the first resource creation point\n\t\t\t\t// along each path where a leak was detected.\n\t\t\t\t// In the future, might want to try to convey some path information.\n\t\t\t\tfor (State state : stateList) {\n\t\t\t\t\tint blockId = state.getObligationSet().getWhereCreated(obligation);\n\t\t\t\t\tif (blockId > 0) {\n\t\t\t\t\t\tBasicBlock creationBlock = cfg.lookupBlockByLabel(blockId);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// Figure out which instruction actually creates\n\t\t\t\t\t\t// the obligation\n\t\t\t\t\t\tfor (Iterator<InstructionHandle> i = creationBlock.instructionIterator(); i.hasNext();) {\n\t\t\t\t\t\t\tInstructionHandle handle = i.next();\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tObligation created = database.addsObligation(handle, cpg);\n\t\t\t\t\t\t\t\tif (created != null && created.equals(obligation)) {\n\t\t\t\t\t\t\t\t\tbugInstance\n\t\t\t\t\t\t\t\t\t\t.addSourceLine(methodDescriptor, new Location(handle, creationBlock))\n\t\t\t\t\t\t\t\t\t\t.describe(SourceLineAnnotation.ROLE_OBLIGATION_CREATED);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (ClassNotFoundException e) {\n\t\t\t\t\t\t\t\tbugReporter.reportMissingClass(e);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tbugReporter.reportBug(bugInstance);\n\t\t\t}\n\t\t\t// TODO: closing of nonexistent resources\n\n\t\t}","commit_id":"b5d221861780fbc381a09ce68dda15df5769a80d","url":"https://github.com/findbugsproject/findbugs"},{"original_method":"protected void addLayout(\n\t\t\tboolean privateLayout, long parentLayoutId,\n\t\t\tJSONObject layoutJSONObject)\n\t\tthrows Exception {\n\n\t\tif (targetClassName.equals(LayoutSetPrototype.class.getName())) {\n\t\t\tprivateLayout = true;\n\t\t}\n\n\t\tMap<Locale, String> nameMap = getMap(layoutJSONObject, \"name\");\n\t\tMap<Locale, String> titleMap = getMap(layoutJSONObject, \"title\");\n\n\t\tString type = layoutJSONObject.getString(\"type\");\n\n\t\tif (Validator.isNull(type)) {\n\t\t\ttype = LayoutConstants.TYPE_PORTLET;\n\t\t}\n\n\t\tString typeSettings = layoutJSONObject.getString(\"typeSettings\");\n\n\t\tboolean hidden = layoutJSONObject.getBoolean(\"hidden\");\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<>();\n\n\t\tString friendlyURL = layoutJSONObject.getString(\"friendlyURL\");\n\n\t\tif (Validator.isNotNull(friendlyURL) &&\n\t\t\t!friendlyURL.startsWith(StringPool.SLASH)) {\n\n\t\t\tfriendlyURL = StringPool.SLASH + friendlyURL;\n\t\t}\n\n\t\tfriendlyURLMap.put(LocaleUtil.getDefault(), friendlyURL);\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setCompanyId(companyId);\n\t\tserviceContext.setScopeGroupId(groupId);\n\t\tserviceContext.setUserId(userId);\n\n\t\tServiceContextThreadLocal.pushServiceContext(serviceContext);\n\n\t\ttry {\n\t\t\tString layoutPrototypeName = layoutJSONObject.getString(\n\t\t\t\t\"layoutPrototypeName\");\n\n\t\t\tString layoutPrototypeUuid = null;\n\n\t\t\tif (Validator.isNotNull(layoutPrototypeName)) {\n\t\t\t\tLayoutPrototype layoutPrototype = getLayoutPrototype(\n\t\t\t\t\tcompanyId, layoutPrototypeName);\n\n\t\t\t\tlayoutPrototypeUuid = layoutPrototype.getUuid();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlayoutPrototypeUuid = layoutJSONObject.getString(\n\t\t\t\t\t\"layoutPrototypeUuid\");\n\t\t\t}\n\n\t\t\tif (Validator.isNotNull(layoutPrototypeUuid)) {\n\t\t\t\tboolean layoutPrototypeLinkEnabled = GetterUtil.getBoolean(\n\t\t\t\t\tlayoutJSONObject.getString(\"layoutPrototypeLinkEnabled\"),\n\t\t\t\t\tfalse);\n\n\t\t\t\tserviceContext.setAttribute(\n\t\t\t\t\t\"layoutPrototypeLinkEnabled\", layoutPrototypeLinkEnabled);\n\n\t\t\t\tserviceContext.setAttribute(\n\t\t\t\t\t\"layoutPrototypeUuid\", layoutPrototypeUuid);\n\t\t\t}\n\n\t\t\tLayout layout = LayoutLocalServiceUtil.addLayout(\n\t\t\t\tuserId, groupId, privateLayout, parentLayoutId, nameMap,\n\t\t\t\ttitleMap, null, null, null, type, typeSettings, hidden,\n\t\t\t\tfriendlyURLMap, serviceContext);\n\n\t\t\tLayoutTypePortlet layoutTypePortlet =\n\t\t\t\t(LayoutTypePortlet)layout.getLayoutType();\n\n\t\t\tString layoutTemplateId = layoutJSONObject.getString(\n\t\t\t\t\"layoutTemplateId\", _defaultLayoutTemplateId);\n\n\t\t\tif (Validator.isNotNull(layoutTemplateId)) {\n\t\t\t\tlayoutTypePortlet.setLayoutTemplateId(\n\t\t\t\t\tuserId, layoutTemplateId, false);\n\t\t\t}\n\n\t\t\tJSONArray columnsJSONArray = layoutJSONObject.getJSONArray(\n\t\t\t\t\"columns\");\n\n\t\t\taddLayoutColumns(\n\t\t\t\tlayout, LayoutTypePortletConstants.COLUMN_PREFIX,\n\t\t\t\tcolumnsJSONArray);\n\n\t\t\tLayoutLocalServiceUtil.updateLayout(\n\t\t\t\tgroupId, layout.isPrivateLayout(), layout.getLayoutId(),\n\t\t\t\tlayout.getTypeSettings());\n\n\t\t\tJSONArray layoutsJSONArray = layoutJSONObject.getJSONArray(\n\t\t\t\t\"layouts\");\n\n\t\t\taddLayouts(privateLayout, layout.getLayoutId(), layoutsJSONArray);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\"Unable to import layout \" + layoutJSONObject, e);\n\t\t\t}\n\n\t\t\tthrow e;\n\t\t}\n\t\tfinally {\n\t\t\tServiceContextThreadLocal.popServiceContext();\n\t\t}\n\t}","id":105132,"modified_method":"protected void addLayout(\n\t\t\tboolean privateLayout, long parentLayoutId,\n\t\t\tJSONObject layoutJSONObject)\n\t\tthrows Exception {\n\n\t\tif (targetClassName.equals(LayoutSetPrototype.class.getName())) {\n\t\t\tprivateLayout = true;\n\t\t}\n\n\t\tMap<Locale, String> nameMap = getMap(layoutJSONObject, \"name\");\n\t\tMap<Locale, String> titleMap = getMap(layoutJSONObject, \"title\");\n\n\t\tString type = layoutJSONObject.getString(\"type\");\n\n\t\tif (Validator.isNull(type)) {\n\t\t\ttype = LayoutConstants.TYPE_PORTLET;\n\t\t}\n\n\t\tString typeSettings = layoutJSONObject.getString(\"typeSettings\");\n\n\t\tboolean hidden = layoutJSONObject.getBoolean(\"hidden\");\n\n\t\tMap<Locale, String> friendlyURLMap = new HashMap<>();\n\n\t\tString friendlyURL = layoutJSONObject.getString(\"friendlyURL\");\n\n\t\tif (Validator.isNotNull(friendlyURL) &&\n\t\t\t!friendlyURL.startsWith(StringPool.SLASH)) {\n\n\t\t\tfriendlyURL = StringPool.SLASH + friendlyURL;\n\t\t}\n\n\t\tfriendlyURLMap.put(LocaleUtil.getDefault(), friendlyURL);\n\n\t\tServiceContext serviceContext = new ServiceContext();\n\n\t\tserviceContext.setCompanyId(companyId);\n\t\tserviceContext.setScopeGroupId(groupId);\n\t\tserviceContext.setUserId(userId);\n\n\t\tServiceContextThreadLocal.pushServiceContext(serviceContext);\n\n\t\ttry {\n\t\t\tString layoutPrototypeName = layoutJSONObject.getString(\n\t\t\t\t\"layoutPrototypeName\");\n\n\t\t\tString layoutPrototypeUuid = null;\n\n\t\t\tif (Validator.isNotNull(layoutPrototypeName)) {\n\t\t\t\tLayoutPrototype layoutPrototype = getLayoutPrototype(\n\t\t\t\t\tcompanyId, layoutPrototypeName);\n\n\t\t\t\tlayoutPrototypeUuid = layoutPrototype.getUuid();\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlayoutPrototypeUuid = layoutJSONObject.getString(\n\t\t\t\t\t\"layoutPrototypeUuid\");\n\t\t\t}\n\n\t\t\tif (Validator.isNotNull(layoutPrototypeUuid)) {\n\t\t\t\tboolean layoutPrototypeLinkEnabled = GetterUtil.getBoolean(\n\t\t\t\t\tlayoutJSONObject.getString(\"layoutPrototypeLinkEnabled\"),\n\t\t\t\t\tfalse);\n\n\t\t\t\tserviceContext.setAttribute(\n\t\t\t\t\t\"layoutPrototypeLinkEnabled\", layoutPrototypeLinkEnabled);\n\n\t\t\t\tserviceContext.setAttribute(\n\t\t\t\t\t\"layoutPrototypeUuid\", layoutPrototypeUuid);\n\t\t\t}\n\n\t\t\tLayout layout = LayoutLocalServiceUtil.fetchLayoutByFriendlyURL(\n\t\t\t\tgroupId, privateLayout, friendlyURL);\n\n\t\t\tif (layout != null) {\n\t\t\t\tif (!developerModeEnabled) {\n\t\t\t\t\tif (_log.isInfoEnabled()) {\n\t\t\t\t\t\t_log.info(\n\t\t\t\t\t\t\t\"Layout with friendlyURL \" + friendlyURL +\n\t\t\t\t\t\t\t\t\" already exists\");\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (!updateModeEnabled) {\n\t\t\t\t\tLayoutLocalServiceUtil.deleteLayout(layout);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!updateModeEnabled || (layout == null)) {\n\t\t\t\tlayout = LayoutLocalServiceUtil.addLayout(\n\t\t\t\t\tuserId, groupId, privateLayout, parentLayoutId, nameMap,\n\t\t\t\t\ttitleMap, null, null, null, type, typeSettings, hidden,\n\t\t\t\t\tfriendlyURLMap, serviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlayout = LayoutLocalServiceUtil.updateLayout(layout);\n\t\t\t}\n\n\t\t\tLayoutTypePortlet layoutTypePortlet =\n\t\t\t\t(LayoutTypePortlet)layout.getLayoutType();\n\n\t\t\tString layoutTemplateId = layoutJSONObject.getString(\n\t\t\t\t\"layoutTemplateId\", _defaultLayoutTemplateId);\n\n\t\t\tif (Validator.isNotNull(layoutTemplateId)) {\n\t\t\t\tlayoutTypePortlet.setLayoutTemplateId(\n\t\t\t\t\tuserId, layoutTemplateId, false);\n\t\t\t}\n\n\t\t\tJSONArray columnsJSONArray = layoutJSONObject.getJSONArray(\n\t\t\t\t\"columns\");\n\n\t\t\taddLayoutColumns(\n\t\t\t\tlayout, LayoutTypePortletConstants.COLUMN_PREFIX,\n\t\t\t\tcolumnsJSONArray);\n\n\t\t\tLayoutLocalServiceUtil.updateLayout(\n\t\t\t\tgroupId, layout.isPrivateLayout(), layout.getLayoutId(),\n\t\t\t\tlayout.getTypeSettings());\n\n\t\t\tJSONArray layoutsJSONArray = layoutJSONObject.getJSONArray(\n\t\t\t\t\"layouts\");\n\n\t\t\taddLayouts(privateLayout, layout.getLayoutId(), layoutsJSONArray);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\"Unable to import layout \" + layoutJSONObject, e);\n\t\t\t}\n\n\t\t\tthrow e;\n\t\t}\n\t\tfinally {\n\t\t\tServiceContextThreadLocal.popServiceContext();\n\t\t}\n\t}","commit_id":"3dd90b6df7a02350e82e5bcd839ee45cf3ddc7b0","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void updateLayout(\n\t\t\tActionRequest actionRequest, ActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tUploadPortletRequest uploadRequest = PortalUtil.getUploadPortletRequest(\n\t\t\tactionRequest);\n\n\t\tString cmd = ParamUtil.getString(uploadRequest, Constants.CMD);\n\n\t\tlong groupId = ParamUtil.getLong(actionRequest, \"groupId\");\n\t\tboolean privateLayout = ParamUtil.getBoolean(\n\t\t\tactionRequest, \"privateLayout\");\n\t\tlong layoutId = ParamUtil.getLong(actionRequest, \"layoutId\");\n\t\tlong parentLayoutId = ParamUtil.getLong(\n\t\t\tuploadRequest, \"parentLayoutId\");\n\t\tString description = ParamUtil.getString(uploadRequest, \"description\");\n\t\tString type = ParamUtil.getString(uploadRequest, \"type\");\n\t\tboolean hidden = ParamUtil.getBoolean(uploadRequest, \"hidden\");\n\t\tString friendlyURL = ParamUtil.getString(uploadRequest, \"friendlyURL\");\n\t\tboolean iconImage = ParamUtil.getBoolean(uploadRequest, \"iconImage\");\n\t\tbyte[] iconBytes = FileUtil.getBytes(\n\t\t\tuploadRequest.getFile(\"iconFileName\"));\n\t\tlong layoutPrototypeId = ParamUtil.getLong(\n\t\t\tuploadRequest, \"layoutPrototypeId\");\n\n\t\tboolean inheritFromParentLayoutId = ParamUtil.getBoolean(\n\t\t\tuploadRequest, \"inheritFromParentLayoutId\");\n\n\t\tlong copyLayoutId = ParamUtil.getLong(uploadRequest, \"copyLayoutId\");\n\n\t\tMap<Locale, String> localeNamesMap =\n\t\t\tLocalizationUtil.getLocalizationMap(actionRequest, \"name\");\n\t\tMap<Locale, String> localeTitlesMap =\n\t\t\tLocalizationUtil.getLocalizationMap(actionRequest, \"title\");\n\n\t\tif (cmd.equals(Constants.ADD)) {\n\n\t\t\t// Add layout\n\n\t\t\tif (inheritFromParentLayoutId && (parentLayoutId > 0)) {\n\t\t\t\tLayout parentLayout = LayoutLocalServiceUtil.getLayout(\n\t\t\t\t\tgroupId, privateLayout, parentLayoutId);\n\n\t\t\t\tLayout layout = LayoutServiceUtil.addLayout(\n\t\t\t\t\tgroupId, privateLayout, parentLayoutId, localeNamesMap,\n\t\t\t\t\tlocaleTitlesMap, description, parentLayout.getType(),\n\t\t\t\t\tparentLayout.isHidden(), friendlyURL);\n\n\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\tlayout.getGroupId(), layout.isPrivateLayout(),\n\t\t\t\t\tlayout.getLayoutId(), parentLayout.getTypeSettings());\n\n\t\t\t\tif (parentLayout.getType().equals(\n\t\t\t\t\t\tLayoutConstants.TYPE_PORTLET)) {\n\n\t\t\t\t\tcopyPreferences(actionRequest, layout, parentLayout);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (layoutPrototypeId > 0) {\n\t\t\t\tLayoutPrototype layoutPrototype =\n\t\t\t\t\tLayoutPrototypeServiceUtil.getLayoutPrototype(\n\t\t\t\t\t\tlayoutPrototypeId);\n\n\t\t\t\tLayout layoutPrototypeLayout = layoutPrototype.getLayout();\n\n\t\t\t\tLayout layout = LayoutServiceUtil.addLayout(\n\t\t\t\t\tgroupId, privateLayout, parentLayoutId, localeNamesMap,\n\t\t\t\t\tlocaleTitlesMap, description, LayoutConstants.TYPE_PORTLET,\n\t\t\t\t\tfalse, friendlyURL);\n\n\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\tlayout.getGroupId(), layout.isPrivateLayout(),\n\t\t\t\t\tlayout.getLayoutId(),\n\t\t\t\t\tlayoutPrototypeLayout.getTypeSettings());\n\n\t\t\t\tcopyPreferences(\n\t\t\t\t\tactionRequest, layout, layoutPrototypeLayout);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tLayoutServiceUtil.addLayout(\n\t\t\t\t\tgroupId, privateLayout, parentLayoutId, localeNamesMap,\n\t\t\t\t\tlocaleTitlesMap, description, type, hidden, friendlyURL);\n\t\t\t}\n\t\t}\n\t\telse {\n\n\t\t\t// Update layout\n\n\t\t\tLayout layout = LayoutLocalServiceUtil.getLayout(\n\t\t\t\tgroupId, privateLayout, layoutId);\n\n\t\t\tlayout = LayoutServiceUtil.updateLayout(\n\t\t\t\tgroupId, privateLayout, layoutId, layout.getParentLayoutId(),\n\t\t\t\tlocaleNamesMap, localeTitlesMap, description, type, hidden,\n\t\t\t\tfriendlyURL, Boolean.valueOf(iconImage), iconBytes);\n\n\t\t\tUnicodeProperties formTypeSettingsProperties =\n\t\t\t\tgetTypeSettingsProperties(actionRequest);\n\n\t\t\tif (type.equals(LayoutConstants.TYPE_PORTLET)) {\n\t\t\t\tif ((copyLayoutId > 0) &&\n\t\t\t\t\t(copyLayoutId != layout.getLayoutId())) {\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tLayout copyLayout = LayoutLocalServiceUtil.getLayout(\n\t\t\t\t\t\t\tgroupId, privateLayout, copyLayoutId);\n\n\t\t\t\t\t\tif (copyLayout.getType().equals(\n\t\t\t\t\t\t\t\tLayoutConstants.TYPE_PORTLET)) {\n\n\t\t\t\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\t\t\t\tgroupId, privateLayout, layoutId,\n\t\t\t\t\t\t\t\tcopyLayout.getTypeSettings());\n\n\t\t\t\t\t\t\tcopyPreferences(actionRequest, layout, copyLayout);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NoSuchLayoutException nsle) {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tUnicodeProperties layoutTypeSettingsProperties =\n\t\t\t\t\t\tlayout.getTypeSettingsProperties();\n\n\t\t\t\t\tfor (String property: formTypeSettingsProperties.keySet()) {\n\t\t\t\t\t\tlayoutTypeSettingsProperties.setProperty(\n\t\t\t\t\t\t\tproperty,\n\t\t\t\t\t\t\tformTypeSettingsProperties.getProperty(property));\n\t\t\t\t\t}\n\n\t\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\t\tgroupId, privateLayout, layoutId,\n\t\t\t\t\t\tlayout.getTypeSettings());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlayout.setTypeSettingsProperties(formTypeSettingsProperties);\n\n\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\tgroupId, privateLayout, layoutId, layout.getTypeSettings());\n\t\t\t}\n\n\t\t\tHttpServletResponse response = PortalUtil.getHttpServletResponse(\n\t\t\t\tactionResponse);\n\n\t\t\tString[] eventClasses = StringUtil.split(\n\t\t\t\tPropsUtil.get(\n\t\t\t\t\tPropsKeys.LAYOUT_CONFIGURATION_ACTION_UPDATE,\n\t\t\t\t\tnew Filter(type)));\n\n\t\t\tEventsProcessorUtil.process(\n\t\t\t\tPropsKeys.LAYOUT_CONFIGURATION_ACTION_UPDATE, eventClasses,\n\t\t\t\tuploadRequest, response);\n\t\t}\n\t}","id":105133,"modified_method":"protected void updateLayout(\n\t\t\tActionRequest actionRequest, ActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tUploadPortletRequest uploadRequest = PortalUtil.getUploadPortletRequest(\n\t\t\tactionRequest);\n\n\t\tString cmd = ParamUtil.getString(uploadRequest, Constants.CMD);\n\n\t\tlong groupId = ParamUtil.getLong(actionRequest, \"groupId\");\n\t\tboolean privateLayout = ParamUtil.getBoolean(\n\t\t\tactionRequest, \"privateLayout\");\n\t\tlong layoutId = ParamUtil.getLong(actionRequest, \"layoutId\");\n\t\tlong parentLayoutId = ParamUtil.getLong(\n\t\t\tuploadRequest, \"parentLayoutId\");\n\t\tString description = ParamUtil.getString(uploadRequest, \"description\");\n\t\tString type = ParamUtil.getString(uploadRequest, \"type\");\n\t\tboolean hidden = ParamUtil.getBoolean(uploadRequest, \"hidden\");\n\t\tString friendlyURL = ParamUtil.getString(uploadRequest, \"friendlyURL\");\n\t\tboolean iconImage = ParamUtil.getBoolean(uploadRequest, \"iconImage\");\n\t\tbyte[] iconBytes = FileUtil.getBytes(\n\t\t\tuploadRequest.getFile(\"iconFileName\"));\n\t\tlong layoutPrototypeId = ParamUtil.getLong(\n\t\t\tuploadRequest, \"layoutPrototypeId\");\n\n\t\tboolean inheritFromParentLayoutId = ParamUtil.getBoolean(\n\t\t\tuploadRequest, \"inheritFromParentLayoutId\");\n\n\t\tlong copyLayoutId = ParamUtil.getLong(uploadRequest, \"copyLayoutId\");\n\n\t\tMap<Locale, String> localeNamesMap =\n\t\t\tLocalizationUtil.getLocalizationMap(actionRequest, \"name\");\n\t\tMap<Locale, String> localeTitlesMap =\n\t\t\tLocalizationUtil.getLocalizationMap(actionRequest, \"title\");\n\n\t\tif (cmd.equals(Constants.ADD)) {\n\n\t\t\t// Add layout\n\n\t\t\tif (inheritFromParentLayoutId && (parentLayoutId > 0)) {\n\t\t\t\tLayout parentLayout = LayoutLocalServiceUtil.getLayout(\n\t\t\t\t\tgroupId, privateLayout, parentLayoutId);\n\n\t\t\t\tLayout layout = LayoutServiceUtil.addLayout(\n\t\t\t\t\tgroupId, privateLayout, parentLayoutId, localeNamesMap,\n\t\t\t\t\tlocaleTitlesMap, description, parentLayout.getType(),\n\t\t\t\t\tparentLayout.isHidden(), friendlyURL);\n\n\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\tlayout.getGroupId(), layout.isPrivateLayout(),\n\t\t\t\t\tlayout.getLayoutId(), parentLayout.getTypeSettings());\n\n\t\t\t\tif (parentLayout.getType().equals(\n\t\t\t\t\t\tLayoutConstants.TYPE_PORTLET)) {\n\n\t\t\t\t\tActionUtil.copyPreferences(\n\t\t\t\t\t\tactionRequest, layout, parentLayout);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (layoutPrototypeId > 0) {\n\t\t\t\tLayoutPrototype layoutPrototype =\n\t\t\t\t\tLayoutPrototypeServiceUtil.getLayoutPrototype(\n\t\t\t\t\t\tlayoutPrototypeId);\n\n\t\t\t\tLayout layoutPrototypeLayout = layoutPrototype.getLayout();\n\n\t\t\t\tLayout layout = LayoutServiceUtil.addLayout(\n\t\t\t\t\tgroupId, privateLayout, parentLayoutId, localeNamesMap,\n\t\t\t\t\tlocaleTitlesMap, description, LayoutConstants.TYPE_PORTLET,\n\t\t\t\t\tfalse, friendlyURL);\n\n\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\tlayout.getGroupId(), layout.isPrivateLayout(),\n\t\t\t\t\tlayout.getLayoutId(),\n\t\t\t\t\tlayoutPrototypeLayout.getTypeSettings());\n\n\t\t\t\tActionUtil.copyPreferences(\n\t\t\t\t\tactionRequest, layout, layoutPrototypeLayout);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tLayoutServiceUtil.addLayout(\n\t\t\t\t\tgroupId, privateLayout, parentLayoutId, localeNamesMap,\n\t\t\t\t\tlocaleTitlesMap, description, type, hidden, friendlyURL);\n\t\t\t}\n\t\t}\n\t\telse {\n\n\t\t\t// Update layout\n\n\t\t\tLayout layout = LayoutLocalServiceUtil.getLayout(\n\t\t\t\tgroupId, privateLayout, layoutId);\n\n\t\t\tlayout = LayoutServiceUtil.updateLayout(\n\t\t\t\tgroupId, privateLayout, layoutId, layout.getParentLayoutId(),\n\t\t\t\tlocaleNamesMap, localeTitlesMap, description, type, hidden,\n\t\t\t\tfriendlyURL, Boolean.valueOf(iconImage), iconBytes);\n\n\t\t\tUnicodeProperties formTypeSettingsProperties =\n\t\t\t\tgetTypeSettingsProperties(actionRequest);\n\n\t\t\tif (type.equals(LayoutConstants.TYPE_PORTLET)) {\n\t\t\t\tif ((copyLayoutId > 0) &&\n\t\t\t\t\t(copyLayoutId != layout.getLayoutId())) {\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tLayout copyLayout = LayoutLocalServiceUtil.getLayout(\n\t\t\t\t\t\t\tgroupId, privateLayout, copyLayoutId);\n\n\t\t\t\t\t\tif (copyLayout.getType().equals(\n\t\t\t\t\t\t\t\tLayoutConstants.TYPE_PORTLET)) {\n\n\t\t\t\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\t\t\t\tgroupId, privateLayout, layoutId,\n\t\t\t\t\t\t\t\tcopyLayout.getTypeSettings());\n\n\t\t\t\t\t\t\tActionUtil.copyPreferences(\n\t\t\t\t\t\t\t\tactionRequest, layout, copyLayout);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NoSuchLayoutException nsle) {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tUnicodeProperties layoutTypeSettingsProperties =\n\t\t\t\t\t\tlayout.getTypeSettingsProperties();\n\n\t\t\t\t\tfor (String property: formTypeSettingsProperties.keySet()) {\n\t\t\t\t\t\tlayoutTypeSettingsProperties.setProperty(\n\t\t\t\t\t\t\tproperty,\n\t\t\t\t\t\t\tformTypeSettingsProperties.getProperty(property));\n\t\t\t\t\t}\n\n\t\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\t\tgroupId, privateLayout, layoutId,\n\t\t\t\t\t\tlayout.getTypeSettings());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlayout.setTypeSettingsProperties(formTypeSettingsProperties);\n\n\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\tgroupId, privateLayout, layoutId, layout.getTypeSettings());\n\t\t\t}\n\n\t\t\tHttpServletResponse response = PortalUtil.getHttpServletResponse(\n\t\t\t\tactionResponse);\n\n\t\t\tString[] eventClasses = StringUtil.split(\n\t\t\t\tPropsUtil.get(\n\t\t\t\t\tPropsKeys.LAYOUT_CONFIGURATION_ACTION_UPDATE,\n\t\t\t\t\tnew Filter(type)));\n\n\t\t\tEventsProcessorUtil.process(\n\t\t\t\tPropsKeys.LAYOUT_CONFIGURATION_ACTION_UPDATE, eventClasses,\n\t\t\t\tuploadRequest, response);\n\t\t}\n\t}","commit_id":"34cbe9c388eaa1c9242179377472c5751cd182b9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected String[] addPage(\n\t\t\tThemeDisplay themeDisplay, HttpServletRequest request,\n\t\t\tHttpServletResponse response)\n\t\tthrows Exception {\n\n\t\tString doAsUserId = ParamUtil.getString(request, \"doAsUserId\");\n\t\tString doAsUserLanguageId = ParamUtil.getString(\n\t\t\trequest, \"doAsUserLanguageId\");\n\n\t\tlong groupId = ParamUtil.getLong(request, \"groupId\");\n\t\tboolean privateLayout = ParamUtil.getBoolean(request, \"privateLayout\");\n\t\tlong parentLayoutId = ParamUtil.getLong(request, \"parentLayoutId\");\n\t\tString name = ParamUtil.getString(request, \"name\", \"New Page\");\n\t\tString title = StringPool.BLANK;\n\t\tString description = StringPool.BLANK;\n\t\tString type = LayoutConstants.TYPE_PORTLET;\n\t\tboolean hidden = false;\n\t\tString friendlyURL = StringPool.BLANK;\n\n\t\tLayout layout = LayoutServiceUtil.addLayout(\n\t\t\tgroupId, privateLayout, parentLayoutId, name, title, description,\n\t\t\ttype, hidden, friendlyURL);\n\n\t\tString[] eventClasses = StringUtil.split(\n\t\t\tPropsUtil.get(\n\t\t\t\tPropsKeys.LAYOUT_CONFIGURATION_ACTION_UPDATE,\n\t\t\t\tnew Filter(layout.getType())));\n\n\t\tEventsProcessorUtil.process(\n\t\t\tPropsKeys.LAYOUT_CONFIGURATION_ACTION_UPDATE, eventClasses, request,\n\t\t\tresponse);\n\n\t\tString layoutURL = PortalUtil.getLayoutURL(layout, themeDisplay);\n\n\t\tif (Validator.isNotNull(doAsUserId)) {\n\t\t\tlayoutURL = HttpUtil.addParameter(\n\t\t\t\tlayoutURL, \"doAsUserId\", themeDisplay.getDoAsUserId());\n\t\t}\n\n\t\tif (Validator.isNotNull(doAsUserLanguageId)) {\n\t\t\tlayoutURL = HttpUtil.addParameter(\n\t\t\t\tlayoutURL, \"doAsUserLanguageId\",\n\t\t\t\tthemeDisplay.getDoAsUserLanguageId());\n\t\t}\n\n\t\treturn new String[] {String.valueOf(layout.getLayoutId()), layoutURL};\n\t}","id":105134,"modified_method":"protected String[] addPage(\n\t\t\tThemeDisplay themeDisplay, HttpServletRequest request,\n\t\t\tHttpServletResponse response)\n\t\tthrows Exception {\n\n\t\tlong layoutPrototypeId = ParamUtil.getLong(\n\t\t\trequest, \"layoutPrototypeId\");\n\n\t\tString doAsUserId = ParamUtil.getString(request, \"doAsUserId\");\n\t\tString doAsUserLanguageId = ParamUtil.getString(\n\t\t\trequest, \"doAsUserLanguageId\");\n\n\t\tlong groupId = ParamUtil.getLong(request, \"groupId\");\n\t\tboolean privateLayout = ParamUtil.getBoolean(request, \"privateLayout\");\n\t\tlong parentLayoutId = ParamUtil.getLong(request, \"parentLayoutId\");\n\t\tString name = ParamUtil.getString(request, \"name\", \"New Page\");\n\t\tString title = StringPool.BLANK;\n\t\tString description = StringPool.BLANK;\n\t\tString type = LayoutConstants.TYPE_PORTLET;\n\t\tboolean hidden = false;\n\t\tString friendlyURL = StringPool.BLANK;\n\n\t\tLayout layout;\n\n\t\tif (layoutPrototypeId > 0) {\n\t\t\tLayoutPrototype layoutPrototype =\n\t\t\t\tLayoutPrototypeServiceUtil.getLayoutPrototype(\n\t\t\t\t\tlayoutPrototypeId);\n\n\t\t\tLayout layoutPrototypeLayout = layoutPrototype.getLayout();\n\n\t\t\tlayout = LayoutServiceUtil.addLayout(\n\t\t\t\tgroupId, privateLayout, parentLayoutId, name, title,\n\t\t\t\tdescription, LayoutConstants.TYPE_PORTLET, false, friendlyURL);\n\n\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\tlayout.getGroupId(), layout.isPrivateLayout(),\n\t\t\t\tlayout.getLayoutId(), layoutPrototypeLayout.getTypeSettings());\n\n\t\t\tActionUtil.copyPreferences(request, layout, layoutPrototypeLayout);\n\t\t}\n\t\telse {\n\t\t\tlayout = LayoutServiceUtil.addLayout(\n\t\t\t\tgroupId, privateLayout, parentLayoutId, name, title,\n\t\t\t\tdescription, type, hidden, friendlyURL);\n\t\t}\n\n\t\tString[] eventClasses = StringUtil.split(\n\t\t\tPropsUtil.get(\n\t\t\t\tPropsKeys.LAYOUT_CONFIGURATION_ACTION_UPDATE,\n\t\t\t\tnew Filter(layout.getType())));\n\n\t\tEventsProcessorUtil.process(\n\t\t\tPropsKeys.LAYOUT_CONFIGURATION_ACTION_UPDATE, eventClasses, request,\n\t\t\tresponse);\n\n\t\tString layoutURL = PortalUtil.getLayoutURL(layout, themeDisplay);\n\n\t\tif (Validator.isNotNull(doAsUserId)) {\n\t\t\tlayoutURL = HttpUtil.addParameter(\n\t\t\t\tlayoutURL, \"doAsUserId\", themeDisplay.getDoAsUserId());\n\t\t}\n\n\t\tif (Validator.isNotNull(doAsUserLanguageId)) {\n\t\t\tlayoutURL = HttpUtil.addParameter(\n\t\t\t\tlayoutURL, \"doAsUserLanguageId\",\n\t\t\t\tthemeDisplay.getDoAsUserLanguageId());\n\t\t}\n\n\t\treturn new String[] {String.valueOf(layout.getLayoutId()), layoutURL};\n\t}","commit_id":"34cbe9c388eaa1c9242179377472c5751cd182b9","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void updateLayout(PageForm pageForm, ActionRequest req)\n\t\tthrows Exception {\n\n\t\tUploadPortletRequest uploadReq =\n\t\t\tPortalUtil.getUploadPortletRequest(req);\n\n\t\tString cmd = ParamUtil.getString(uploadReq, Constants.CMD);\n\n\t\tlong groupId = ParamUtil.getLong(req, \"groupId\");\n\t\tboolean privateLayout = ParamUtil.getBoolean(req, \"privateLayout\");\n\t\tlong layoutId = ParamUtil.getLong(req, \"layoutId\");\n\t\tlong parentLayoutId = ParamUtil.getLong(uploadReq, \"parentLayoutId\");\n\t\tString name = ParamUtil.getString(uploadReq, \"name\");\n\t\tString title = ParamUtil.getString(uploadReq, \"title\");\n\t\tString languageId = ParamUtil.getString(uploadReq, \"curLanguageId\");\n\t\tString type = ParamUtil.getString(uploadReq, \"type\");\n\t\tboolean hidden = ParamUtil.getBoolean(uploadReq, \"hidden\");\n\t\tString friendlyURL = ParamUtil.getString(uploadReq, \"friendlyURL\");\n\t\tboolean iconImage = ParamUtil.getBoolean(uploadReq, \"iconImage\");\n\t\tbyte[] iconBytes = FileUtil.getBytes(\n\t\t\tuploadReq.getFile(\"iconFileName\"));\n\n\t\tlong copyLayoutId = ParamUtil.getLong(uploadReq, \"copyLayoutId\");\n\n\t\tif (cmd.equals(Constants.ADD)) {\n\n\t\t\t// Add layout\n\n\t\t\tLayout layout = LayoutServiceUtil.addLayout(\n\t\t\t\tgroupId, privateLayout, parentLayoutId, name, title, type,\n\t\t\t\thidden, friendlyURL);\n\n\t\t\tif (type.equals(LayoutImpl.TYPE_PORTLET)) {\n\t\t\t\tLayoutTypePortlet layoutTypePortlet =\n\t\t\t\t\t(LayoutTypePortlet)layout.getLayoutType();\n\n\t\t\t\tlayoutTypePortlet.setLayoutTemplateId(\n\t\t\t\t\t0, PropsUtil.get(PropsUtil.LAYOUT_DEFAULT_TEMPLATE_ID),\n\t\t\t\t\tfalse);\n\n\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\tlayout.getGroupId(), layout.isPrivateLayout(),\n\t\t\t\t\tlayout.getLayoutId(), layout.getTypeSettings());\n\t\t\t}\n\t\t}\n\t\telse {\n\n\t\t\t// Update layout\n\n\t\t\tLayout layout = LayoutLocalServiceUtil.getLayout(\n\t\t\t\tgroupId, privateLayout, layoutId);\n\n\t\t\tlayout = LayoutServiceUtil.updateLayout(\n\t\t\t\tgroupId, privateLayout, layoutId, layout.getParentLayoutId(),\n\t\t\t\tname, title, languageId, type, hidden, friendlyURL,\n\t\t\t\tnew Boolean(iconImage), iconBytes);\n\n\t\t\tif (type.equals(LayoutImpl.TYPE_PORTLET)) {\n\t\t\t\tif ((copyLayoutId > 0) &&\n\t\t\t\t\t(copyLayoutId != layout.getLayoutId())) {\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tLayout copyLayout = LayoutLocalServiceUtil.getLayout(\n\t\t\t\t\t\t\tgroupId, privateLayout, copyLayoutId);\n\n\t\t\t\t\t\tif (copyLayout.getType().equals(\n\t\t\t\t\t\t\t\tLayoutImpl.TYPE_PORTLET)) {\n\n\t\t\t\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\t\t\t\tgroupId, privateLayout, layoutId,\n\t\t\t\t\t\t\t\tcopyLayout.getTypeSettings());\n\n\t\t\t\t\t\t\tcopyPreferences(req, layout, copyLayout);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NoSuchLayoutException nsle) {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tProperties formProperties =\n\t\t\t\t\t\tpageForm.getTypeSettingsProperties();\n\n\t\t\t\t\tProperties layoutProperties =\n\t\t\t\t\t\tlayout.getTypeSettingsProperties();\n\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"meta-robots\",\n\t\t\t\t\t\tformProperties.getProperty(\"meta-robots\"));\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"meta-description\",\n\t\t\t\t\t\tformProperties.getProperty(\"meta-description\"));\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"meta-keywords\",\n\t\t\t\t\t\tformProperties.getProperty(\"meta-keywords\"));\n\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"javascript-1\",\n\t\t\t\t\t\tformProperties.getProperty(\"javascript-1\"));\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"javascript-2\",\n\t\t\t\t\t\tformProperties.getProperty(\"javascript-2\"));\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"javascript-3\",\n\t\t\t\t\t\tformProperties.getProperty(\"javascript-3\"));\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"sitemap-include\",\n\t\t\t\t\t\tformProperties.getProperty(\"sitemap-include\"));\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"sitemap-priority\",\n\t\t\t\t\t\tformProperties.getProperty(\"sitemap-priority\"));\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"sitemap-changefreq\",\n\t\t\t\t\t\tformProperties.getProperty(\"sitemap-changefreq\"));\n\n\t\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\t\tgroupId, privateLayout, layoutId,\n\t\t\t\t\t\tlayout.getTypeSettings());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlayout.setTypeSettingsProperties(\n\t\t\t\t\tpageForm.getTypeSettingsProperties());\n\n\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\tgroupId, privateLayout, layoutId, layout.getTypeSettings());\n\t\t\t}\n\t\t}\n\t}","id":105135,"modified_method":"protected void updateLayout(PageForm pageForm, ActionRequest req)\n\t\tthrows Exception {\n\n\t\tUploadPortletRequest uploadReq =\n\t\t\tPortalUtil.getUploadPortletRequest(req);\n\n\t\tString cmd = ParamUtil.getString(uploadReq, Constants.CMD);\n\n\t\tlong groupId = ParamUtil.getLong(req, \"groupId\");\n\t\tboolean privateLayout = ParamUtil.getBoolean(req, \"privateLayout\");\n\t\tlong layoutId = ParamUtil.getLong(req, \"layoutId\");\n\t\tlong parentLayoutId = ParamUtil.getLong(uploadReq, \"parentLayoutId\");\n\t\tString name = ParamUtil.getString(uploadReq, \"name\");\n\t\tString title = ParamUtil.getString(uploadReq, \"title\");\n\t\tString languageId = ParamUtil.getString(uploadReq, \"curLanguageId\");\n\t\tString type = ParamUtil.getString(uploadReq, \"type\");\n\t\tboolean hidden = ParamUtil.getBoolean(uploadReq, \"hidden\");\n\t\tString friendlyURL = ParamUtil.getString(uploadReq, \"friendlyURL\");\n\t\tboolean iconImage = ParamUtil.getBoolean(uploadReq, \"iconImage\");\n\t\tbyte[] iconBytes = FileUtil.getBytes(\n\t\t\tuploadReq.getFile(\"iconFileName\"));\n\n\t\tlong copyLayoutId = ParamUtil.getLong(uploadReq, \"copyLayoutId\");\n\n\t\tboolean inheritFromParent = ParamUtil.getBoolean(uploadReq, \"inheritFromParent\");\n\n\t\tif (cmd.equals(Constants.ADD)) {\n\n\t\t\t// Add layout\n\t\t\tLayout layout = null;\n\t\t\tLayout parentLayout = null;\n\t\t\t\n\t\t\tif (inheritFromParent && parentLayoutId > 0) {\n\t\t\t\tparentLayout = LayoutLocalServiceUtil.getLayout(\n\t\t\t\t\t\tgroupId, privateLayout, parentLayoutId);\n\n\t\t\t\tlayout = LayoutServiceUtil.addLayout(\n\t\t\t\t\t\tgroupId, privateLayout, parentLayoutId, name, title, \n\t\t\t\t\t\tparentLayout.getType(), parentLayout.isHidden(), friendlyURL);\n\t\t\t\t\n\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\t\tlayout.getGroupId(), layout.isPrivateLayout(),\n\t\t\t\t\t\tlayout.getLayoutId(), parentLayout.getTypeSettings());\t\t\t\t\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlayout = LayoutServiceUtil.addLayout(\n\t\t\t\t\t\tgroupId, privateLayout, parentLayoutId, name, title, type,\n\t\t\t\t\t\thidden, friendlyURL);\n\n\t\t\t\tif (type.equals(LayoutImpl.TYPE_PORTLET)) {\n\t\t\t\t\tLayoutTypePortlet layoutTypePortlet =\n\t\t\t\t\t\t(LayoutTypePortlet)layout.getLayoutType();\n\n\t\t\t\t\tlayoutTypePortlet.setLayoutTemplateId(\n\t\t\t\t\t\t0, PropsUtil.get(PropsUtil.LAYOUT_DEFAULT_TEMPLATE_ID),\n\t\t\t\t\t\tfalse);\n\n\t\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\t\tlayout.getGroupId(), layout.isPrivateLayout(),\n\t\t\t\t\t\tlayout.getLayoutId(), layout.getTypeSettings());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\n\t\t\t// Update layout\n\n\t\t\tLayout layout = LayoutLocalServiceUtil.getLayout(\n\t\t\t\tgroupId, privateLayout, layoutId);\n\n\t\t\tlayout = LayoutServiceUtil.updateLayout(\n\t\t\t\tgroupId, privateLayout, layoutId, layout.getParentLayoutId(),\n\t\t\t\tname, title, languageId, type, hidden, friendlyURL,\n\t\t\t\tnew Boolean(iconImage), iconBytes);\n\n\t\t\tif (type.equals(LayoutImpl.TYPE_PORTLET)) {\n\t\t\t\tif ((copyLayoutId > 0) &&\n\t\t\t\t\t(copyLayoutId != layout.getLayoutId())) {\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tLayout copyLayout = LayoutLocalServiceUtil.getLayout(\n\t\t\t\t\t\t\tgroupId, privateLayout, copyLayoutId);\n\n\t\t\t\t\t\tif (copyLayout.getType().equals(\n\t\t\t\t\t\t\t\tLayoutImpl.TYPE_PORTLET)) {\n\n\t\t\t\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\t\t\t\tgroupId, privateLayout, layoutId,\n\t\t\t\t\t\t\t\tcopyLayout.getTypeSettings());\n\n\t\t\t\t\t\t\tcopyPreferences(req, layout, copyLayout);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NoSuchLayoutException nsle) {\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tProperties formProperties =\n\t\t\t\t\t\tpageForm.getTypeSettingsProperties();\n\n\t\t\t\t\tProperties layoutProperties =\n\t\t\t\t\t\tlayout.getTypeSettingsProperties();\n\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"meta-robots\",\n\t\t\t\t\t\tformProperties.getProperty(\"meta-robots\"));\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"meta-description\",\n\t\t\t\t\t\tformProperties.getProperty(\"meta-description\"));\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"meta-keywords\",\n\t\t\t\t\t\tformProperties.getProperty(\"meta-keywords\"));\n\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"javascript-1\",\n\t\t\t\t\t\tformProperties.getProperty(\"javascript-1\"));\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"javascript-2\",\n\t\t\t\t\t\tformProperties.getProperty(\"javascript-2\"));\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"javascript-3\",\n\t\t\t\t\t\tformProperties.getProperty(\"javascript-3\"));\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"sitemap-include\",\n\t\t\t\t\t\tformProperties.getProperty(\"sitemap-include\"));\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"sitemap-priority\",\n\t\t\t\t\t\tformProperties.getProperty(\"sitemap-priority\"));\n\t\t\t\t\tlayoutProperties.setProperty(\n\t\t\t\t\t\t\"sitemap-changefreq\",\n\t\t\t\t\t\tformProperties.getProperty(\"sitemap-changefreq\"));\n\n\t\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\t\tgroupId, privateLayout, layoutId,\n\t\t\t\t\t\tlayout.getTypeSettings());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlayout.setTypeSettingsProperties(\n\t\t\t\t\tpageForm.getTypeSettingsProperties());\n\n\t\t\t\tLayoutServiceUtil.updateLayout(\n\t\t\t\t\tgroupId, privateLayout, layoutId, layout.getTypeSettings());\n\t\t\t}\n\t\t}\n\t}","commit_id":"2366e73702c767e434afaec9b637bacf9e013e11","url":"https://github.com/liferay/liferay-portal"},{"original_method":"static public void verifyProcFails(Client client, String expectedMsg, String storedProc, Object... args) throws IOException {\n\n        String what;\n        if (storedProc.compareTo(\"@AdHoc\") == 0) {\n            what = \"the statement \\\"\" + args[0] + \"\\\"\";\n        }\n        else {\n            what = \"the stored procedure \\\"\" + storedProc + \"\\\"\";\n        }\n\n        try {\n            client.callProcedure(storedProc, args);\n        }\n        catch (ProcCallException pce) {\n            String msg = pce.getMessage();\n            String diagnostic = \"Expected \" + what + \" to throw an exception containing the message \\\"\" +\n                    expectedMsg + \"\\\", but instead it threw an exception containing \\\"\" + msg + \"\\\".\";\n            assertTrue(diagnostic, msg.contains(expectedMsg));\n            return;\n        }\n\n        String diagnostic = \"Expected \" + what + \" to throw an exception containing the message \\\"\" +\n                expectedMsg + \"\\\", but instead it threw nothing.\";\n        fail(diagnostic);\n    }","id":105136,"modified_method":"static public void verifyProcFails(Client client, String expectedPattern, String storedProc, Object... args) throws IOException {\n\n        String what;\n        if (storedProc.compareTo(\"@AdHoc\") == 0) {\n            what = \"the statement \\\"\" + args[0] + \"\\\"\";\n        }\n        else {\n            what = \"the stored procedure \\\"\" + storedProc + \"\\\"\";\n        }\n\n        try {\n            client.callProcedure(storedProc, args);\n        }\n        catch (ProcCallException pce) {\n            String msg = pce.getMessage();\n            String diagnostic = \"Expected \" + what + \" to throw an exception matching the pattern \\\"\" +\n                    expectedPattern + \"\\\", but instead it threw an exception containing \\\"\" + msg + \"\\\".\";\n            Pattern pattern = Pattern.compile(expectedPattern, Pattern.MULTILINE);\n            assertTrue(diagnostic, pattern.matcher(msg).find());\n            return;\n        }\n\n        String diagnostic = \"Expected \" + what + \" to throw an exception matching the pattern \\\"\" +\n                expectedPattern + \"\\\", but instead it threw nothing.\";\n        fail(diagnostic);\n    }","commit_id":"87803f777ee76c7be97c6e9f341a778daec066a8","url":"https://github.com/VoltDB/voltdb"},{"original_method":"static public void verifyStmtFails(Client client, String stmt, String expectedMsg) throws IOException {\n        verifyProcFails(client, expectedMsg, \"@AdHoc\", stmt);\n    }","id":105137,"modified_method":"static public void verifyStmtFails(Client client, String stmt, String expectedPattern) throws IOException {\n        verifyProcFails(client, expectedPattern, \"@AdHoc\", stmt);\n    }","commit_id":"87803f777ee76c7be97c6e9f341a778daec066a8","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void validateTableOfLongs(VoltTable vt, long[][] expected) {\n        assertNotNull(expected);\n        assertEquals(expected.length, vt.getRowCount());\n        int len = expected.length;\n        for (int i=0; i < len; i++) {\n            validateRowOfLongs(vt, expected[i]);\n        }\n    }","id":105138,"modified_method":"public void validateTableOfLongs(VoltTable vt, long[][] expected) {\n        assertNotNull(expected);\n        assertEquals(\"Wrong number of rows in table.  \",\n                        expected.length, vt.getRowCount());\n        int len = expected.length;\n        for (int i=0; i < len; i++) {\n            validateRowOfLongs(vt, expected[i]);\n        }\n    }","commit_id":"87803f777ee76c7be97c6e9f341a778daec066a8","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testTableLimitAndPercentage() throws Exception {\n        System.out.println(\"STARTING TABLE LIMIT AND PERCENTAGE FULL TEST......\");\n        Client client = getClient();\n        VoltTable vt = null;\n        Exception e = null;\n        if(isHSQL()) {\n            return;\n        }\n\n        // When table limit feature is fully supported, there needs to be more test cases.\n        // generalize this test within a loop, maybe.\n        // Test max row 0\n        vt = client.callProcedure(\"@AdHoc\", \"select count(*) from CAPPED0\").getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {0});\n\n        e = null;\n        try {\n            vt = client.callProcedure(\"CAPPED0.insert\", 0, 0, 0).getResults()[0];\n        } catch (ProcCallException ex) {\n            e = ex;\n            assertTrue(ex.getMessage().contains(\"CONSTRAINT VIOLATION\"));\n            assertTrue(ex.getMessage().contains(\"Table CAPPED0 exceeds table maximum row count 0\"));\n        } finally {\n            assertNotNull(e);\n        }\n        vt = client.callProcedure(\"@AdHoc\", \"select count(*) from CAPPED0\").getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {0});\n\n        // Test @Statistics TABLE\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED0\", 0, 0);\n\n        // Test max row 2\n        vt = client.callProcedure(\"CAPPED2.insert\", 0, 0, 0).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED2\", 2, 50);\n        vt = client.callProcedure(\"CAPPED2.insert\", 1, 1, 1).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED2\", 2, 100);\n\n        e = null;\n        try {\n            vt = client.callProcedure(\"CAPPED2.insert\", 2, 2, 2).getResults()[0];\n        } catch (ProcCallException ex) {\n            e = ex;\n            assertTrue(ex.getMessage().contains(\"CONSTRAINT VIOLATION\"));\n            assertTrue(ex.getMessage().contains(\"Table CAPPED2 exceeds table maximum row count 2\"));\n        } finally {\n            assertNotNull(e);\n        }\n        vt = client.callProcedure(\"@AdHoc\", \"select count(*) from CAPPED2\").getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {2});\n\n        // Test @Statistics TABLE\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED2\", 2, 100);\n\n        // Test @Statistics TABLE for normal table\n        vt = client.callProcedure(\"NOCAPPED.insert\", 0, 0, 0).getResults()[0];\n        // Test @Statistics TABLE\n        validStatisticsForTableLimitAndPercentage(client, \"NOCAPPED\", VoltType.NULL_INTEGER, 0);\n\n\n        // Test percentage with round up\n        vt = client.callProcedure(\"CAPPED3.insert\", 0, 0, 0).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED3\", 3, 34);\n        vt = client.callProcedure(\"CAPPED3.insert\", 1, 1, 1).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED3\", 3, 67);\n        vt = client.callProcedure(\"CAPPED3.insert\", 2, 2, 2).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED3\", 3, 100);\n\n        e = null;\n        try {\n            vt = client.callProcedure(\"CAPPED3.insert\", 3, 3, 3).getResults()[0];\n        } catch (ProcCallException ex) {\n            e = ex;\n            assertTrue(ex.getMessage().contains(\"CONSTRAINT VIOLATION\"));\n            assertTrue(ex.getMessage().contains(\"Table CAPPED3 exceeds table maximum row count 3\"));\n        } finally {\n            assertNotNull(e);\n        }\n        vt = client.callProcedure(\"@AdHoc\", \"select count(*) from CAPPED3\").getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {3});\n\n    }","id":105139,"modified_method":"public void testTableLimitAndPercentage() throws Exception {\n        System.out.println(\"STARTING TABLE LIMIT AND PERCENTAGE FULL TEST......\");\n        Client client = getClient();\n        VoltTable vt = null;\n        if(isHSQL()) {\n            return;\n        }\n\n        // When table limit feature is fully supported, there needs to be more test cases.\n        // generalize this test within a loop, maybe.\n        // Test max row 0\n        vt = client.callProcedure(\"@AdHoc\", \"select count(*) from CAPPED0\").getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {0});\n\n        verifyProcFails(client, \"CONSTRAINT VIOLATION\\\\s*Table CAPPED0 exceeds table maximum row count 0\",\n                \"CAPPED0.insert\", 0, 0, 0);\n\n        vt = client.callProcedure(\"@AdHoc\", \"select count(*) from CAPPED0\").getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {0});\n\n        // Test @Statistics TABLE\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED0\", 0, 0);\n\n        // Test max row 2\n        vt = client.callProcedure(\"CAPPED2.insert\", 0, 0, 0).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED2\", 2, 50);\n        vt = client.callProcedure(\"CAPPED2.insert\", 1, 1, 1).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED2\", 2, 100);\n\n        verifyProcFails(client, \"CONSTRAINT VIOLATION\\\\s*Table CAPPED2 exceeds table maximum row count 2\",\n                \"CAPPED2.insert\", 2, 2, 2);\n\n        vt = client.callProcedure(\"@AdHoc\", \"select count(*) from CAPPED2\").getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {2});\n\n        // Test @Statistics TABLE\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED2\", 2, 100);\n\n        // Test @Statistics TABLE for normal table\n        vt = client.callProcedure(\"NOCAPPED.insert\", 0, 0, 0).getResults()[0];\n        // Test @Statistics TABLE\n        validStatisticsForTableLimitAndPercentage(client, \"NOCAPPED\", VoltType.NULL_INTEGER, 0);\n\n\n        // Test percentage with round up\n        vt = client.callProcedure(\"CAPPED3.insert\", 0, 0, 0).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED3\", 3, 34);\n        vt = client.callProcedure(\"CAPPED3.insert\", 1, 1, 1).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED3\", 3, 67);\n        vt = client.callProcedure(\"CAPPED3.insert\", 2, 2, 2).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED3\", 3, 100);\n\n        verifyProcFails(client, \"CONSTRAINT VIOLATION\\\\s*Table CAPPED3 exceeds table maximum row count 3\",\n                \"CAPPED3.insert\", 3, 3, 3);\n\n        // This should also fail if attempting to insert a row via INSERT INTO ... SELECT.\n        verifyStmtFails(client, \"insert into capped3 select * from capped2\",\n                \"CONSTRAINT VIOLATION\\\\s*Table CAPPED3 exceeds table maximum row count 3\");\n\n        vt = client.callProcedure(\"@AdHoc\", \"select count(*) from CAPPED3\").getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {3});\n\n    }","commit_id":"87803f777ee76c7be97c6e9f341a778daec066a8","url":"https://github.com/VoltDB/voltdb"},{"original_method":"static public void verifyProcFails(Client client, String expectedMsg, String storedProc, Object... args) throws IOException {\n\n        String what;\n        if (storedProc.compareTo(\"@AdHoc\") == 0) {\n            what = \"the statement \\\"\" + args[0] + \"\\\"\";\n        }\n        else {\n            what = \"the stored procedure \\\"\" + storedProc + \"\\\"\";\n        }\n\n        try {\n            client.callProcedure(storedProc, args);\n        }\n        catch (ProcCallException pce) {\n            String msg = pce.getMessage();\n            String diagnostic = \"Expected \" + what + \" to throw an exception containing the message \\\"\" +\n                    expectedMsg + \"\\\", but instead it threw an exception containing \\\"\" + msg + \"\\\".\";\n            assertTrue(diagnostic, msg.contains(expectedMsg));\n            return;\n        }\n\n        String diagnostic = \"Expected \" + what + \" to throw an exception containing the message \\\"\" +\n                expectedMsg + \"\\\", but instead it threw nothing.\";\n        fail(diagnostic);\n    }","id":105140,"modified_method":"static public void verifyProcFails(Client client, String expectedPattern, String storedProc, Object... args) throws IOException {\n\n        String what;\n        if (storedProc.compareTo(\"@AdHoc\") == 0) {\n            what = \"the statement \\\"\" + args[0] + \"\\\"\";\n        }\n        else {\n            what = \"the stored procedure \\\"\" + storedProc + \"\\\"\";\n        }\n\n        try {\n            client.callProcedure(storedProc, args);\n        }\n        catch (ProcCallException pce) {\n            String msg = pce.getMessage();\n            String diagnostic = \"Expected \" + what + \" to throw an exception matching the pattern \\\"\" +\n                    expectedPattern + \"\\\", but instead it threw an exception containing \\\"\" + msg + \"\\\".\";\n            Pattern pattern = Pattern.compile(expectedPattern, Pattern.MULTILINE);\n            assertTrue(diagnostic, pattern.matcher(msg).find());\n            return;\n        }\n\n        String diagnostic = \"Expected \" + what + \" to throw an exception matching the pattern \\\"\" +\n                expectedPattern + \"\\\", but instead it threw nothing.\";\n        fail(diagnostic);\n    }","commit_id":"ffba985e06b7d320c2b808e0a814f2dab1e91b33","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void validateTableOfLongs(VoltTable vt, long[][] expected) {\n        assertNotNull(expected);\n        assertEquals(expected.length, vt.getRowCount());\n        int len = expected.length;\n        for (int i=0; i < len; i++) {\n            validateRowOfLongs(vt, expected[i]);\n        }\n    }","id":105141,"modified_method":"public void validateTableOfLongs(VoltTable vt, long[][] expected) {\n        assertNotNull(expected);\n        assertEquals(\"Wrong number of rows in table.  \",\n                        expected.length, vt.getRowCount());\n        int len = expected.length;\n        for (int i=0; i < len; i++) {\n            validateRowOfLongs(vt, expected[i]);\n        }\n    }","commit_id":"ffba985e06b7d320c2b808e0a814f2dab1e91b33","url":"https://github.com/VoltDB/voltdb"},{"original_method":"static public void verifyStmtFails(Client client, String stmt, String expectedMsg) throws IOException {\n        verifyProcFails(client, expectedMsg, \"@AdHoc\", stmt);\n    }","id":105142,"modified_method":"static public void verifyStmtFails(Client client, String stmt, String expectedPattern) throws IOException {\n        verifyProcFails(client, expectedPattern, \"@AdHoc\", stmt);\n    }","commit_id":"ffba985e06b7d320c2b808e0a814f2dab1e91b33","url":"https://github.com/VoltDB/voltdb"},{"original_method":"public void testTableLimitAndPercentage() throws Exception {\n        System.out.println(\"STARTING TABLE LIMIT AND PERCENTAGE FULL TEST......\");\n        Client client = getClient();\n        VoltTable vt = null;\n        Exception e = null;\n        if(isHSQL()) {\n            return;\n        }\n\n        // When table limit feature is fully supported, there needs to be more test cases.\n        // generalize this test within a loop, maybe.\n        // Test max row 0\n        vt = client.callProcedure(\"@AdHoc\", \"select count(*) from CAPPED0\").getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {0});\n\n        e = null;\n        try {\n            vt = client.callProcedure(\"CAPPED0.insert\", 0, 0, 0).getResults()[0];\n        } catch (ProcCallException ex) {\n            e = ex;\n            assertTrue(ex.getMessage().contains(\"CONSTRAINT VIOLATION\"));\n            assertTrue(ex.getMessage().contains(\"Table CAPPED0 exceeds table maximum row count 0\"));\n        } finally {\n            assertNotNull(e);\n        }\n        vt = client.callProcedure(\"@AdHoc\", \"select count(*) from CAPPED0\").getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {0});\n\n        // Test @Statistics TABLE\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED0\", 0, 0);\n\n        // Test max row 2\n        vt = client.callProcedure(\"CAPPED2.insert\", 0, 0, 0).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED2\", 2, 50);\n        vt = client.callProcedure(\"CAPPED2.insert\", 1, 1, 1).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED2\", 2, 100);\n\n        e = null;\n        try {\n            vt = client.callProcedure(\"CAPPED2.insert\", 2, 2, 2).getResults()[0];\n        } catch (ProcCallException ex) {\n            e = ex;\n            assertTrue(ex.getMessage().contains(\"CONSTRAINT VIOLATION\"));\n            assertTrue(ex.getMessage().contains(\"Table CAPPED2 exceeds table maximum row count 2\"));\n        } finally {\n            assertNotNull(e);\n        }\n        vt = client.callProcedure(\"@AdHoc\", \"select count(*) from CAPPED2\").getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {2});\n\n        // Test @Statistics TABLE\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED2\", 2, 100);\n\n        // Test @Statistics TABLE for normal table\n        vt = client.callProcedure(\"NOCAPPED.insert\", 0, 0, 0).getResults()[0];\n        // Test @Statistics TABLE\n        validStatisticsForTableLimitAndPercentage(client, \"NOCAPPED\", VoltType.NULL_INTEGER, 0);\n\n\n        // Test percentage with round up\n        vt = client.callProcedure(\"CAPPED3.insert\", 0, 0, 0).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED3\", 3, 34);\n        vt = client.callProcedure(\"CAPPED3.insert\", 1, 1, 1).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED3\", 3, 67);\n        vt = client.callProcedure(\"CAPPED3.insert\", 2, 2, 2).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED3\", 3, 100);\n\n        e = null;\n        try {\n            vt = client.callProcedure(\"CAPPED3.insert\", 3, 3, 3).getResults()[0];\n        } catch (ProcCallException ex) {\n            e = ex;\n            assertTrue(ex.getMessage().contains(\"CONSTRAINT VIOLATION\"));\n            assertTrue(ex.getMessage().contains(\"Table CAPPED3 exceeds table maximum row count 3\"));\n        } finally {\n            assertNotNull(e);\n        }\n        vt = client.callProcedure(\"@AdHoc\", \"select count(*) from CAPPED3\").getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {3});\n\n    }","id":105143,"modified_method":"public void testTableLimitAndPercentage() throws Exception {\n        System.out.println(\"STARTING TABLE LIMIT AND PERCENTAGE FULL TEST......\");\n        Client client = getClient();\n        VoltTable vt = null;\n        if(isHSQL()) {\n            return;\n        }\n\n        // When table limit feature is fully supported, there needs to be more test cases.\n        // generalize this test within a loop, maybe.\n        // Test max row 0\n        vt = client.callProcedure(\"@AdHoc\", \"select count(*) from CAPPED0\").getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {0});\n\n        verifyProcFails(client, \"CONSTRAINT VIOLATION\\\\s*Table CAPPED0 exceeds table maximum row count 0\",\n                \"CAPPED0.insert\", 0, 0, 0);\n\n        vt = client.callProcedure(\"@AdHoc\", \"select count(*) from CAPPED0\").getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {0});\n\n        // Test @Statistics TABLE\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED0\", 0, 0);\n\n        // Test max row 2\n        vt = client.callProcedure(\"CAPPED2.insert\", 0, 0, 0).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED2\", 2, 50);\n        vt = client.callProcedure(\"CAPPED2.insert\", 1, 1, 1).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED2\", 2, 100);\n\n        verifyProcFails(client, \"CONSTRAINT VIOLATION\\\\s*Table CAPPED2 exceeds table maximum row count 2\",\n                \"CAPPED2.insert\", 2, 2, 2);\n\n        vt = client.callProcedure(\"@AdHoc\", \"select count(*) from CAPPED2\").getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {2});\n\n        // Test @Statistics TABLE\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED2\", 2, 100);\n\n        // Test @Statistics TABLE for normal table\n        vt = client.callProcedure(\"NOCAPPED.insert\", 0, 0, 0).getResults()[0];\n        // Test @Statistics TABLE\n        validStatisticsForTableLimitAndPercentage(client, \"NOCAPPED\", VoltType.NULL_INTEGER, 0);\n\n\n        // Test percentage with round up\n        vt = client.callProcedure(\"CAPPED3.insert\", 0, 0, 0).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED3\", 3, 34);\n        vt = client.callProcedure(\"CAPPED3.insert\", 1, 1, 1).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED3\", 3, 67);\n        vt = client.callProcedure(\"CAPPED3.insert\", 2, 2, 2).getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {1});\n        validStatisticsForTableLimitAndPercentage(client, \"CAPPED3\", 3, 100);\n\n        verifyProcFails(client, \"CONSTRAINT VIOLATION\\\\s*Table CAPPED3 exceeds table maximum row count 3\",\n                \"CAPPED3.insert\", 3, 3, 3);\n\n        // This should also fail if attempting to insert a row via INSERT INTO ... SELECT.\n        verifyStmtFails(client, \"insert into capped3 select * from capped2\",\n                \"CONSTRAINT VIOLATION\\\\s*Table CAPPED3 exceeds table maximum row count 3\");\n\n        vt = client.callProcedure(\"@AdHoc\", \"select count(*) from CAPPED3\").getResults()[0];\n        validateTableOfScalarLongs(vt, new long[] {3});\n\n    }","commit_id":"ffba985e06b7d320c2b808e0a814f2dab1e91b33","url":"https://github.com/VoltDB/voltdb"},{"original_method":"protected void init() {\n\t\tif (logger.isDebugEnabled()) logger.debug(\"loadData assignment=\" + assignment + \", previousAssignment=\" + previousAssignment + \", nextAssignment=\" + nextAssignment);\n\t\tif (logger.isDebugEnabled()) logger.debug(\"    assignmentId=\" + assignmentId + \", previousId=\" + previousId + \", nextId=\" + nextId);\n\n\t\t// Clear view state.\n        external = false;\n\t\tpreviousId = null;\n\t\tnextId = null;\n\t\tscoreRows = new ArrayList();\n\t\tscores = new HashMap();\n\n\t\tif (assignmentId != null) {\n\t\t\tassignment = assignment = (Assignment)getGradableObjectManager().getGradableObjectWithStats(assignmentId);\n\t\t\tif (assignment != null) {\n                // Populate the serializable assignment properties in this bean\n                name = assignment.getName();\n                points = assignment.getPointsForDisplay();\n                dueDate = assignment.getDateForDisplay();\n                Double formattedMean = assignment.getFormattedMean();\n                if(formattedMean != null) {\n                \tmean = new Double(formattedMean.doubleValue() / 100);\n                } else {\n                    mean = null;\n                }\n\n                // Get the list of assignments.  If we are sorting by mean, we\n                // need to fetch the assignment statistics as well.\n\t\t\t\tList assignments;\n                if(Assignment.SORT_BY_MEAN.equals(getAssignmentSortColumn())) {\n                    assignments = getGradableObjectManager().getAssignmentsWithStats(getGradebookId(),\n                            getAssignmentSortColumn(), isAssignmentSortAscending());\n                } else {\n                    assignments = getGradableObjectManager().getAssignments(getGradebookId(),\n                            getAssignmentSortColumn(), isAssignmentSortAscending());\n                }\n\n                // Set up next and previous links, if any.\n                int thisIndex = assignments.indexOf(assignment);\n\t\t\t\tif (thisIndex > 0) {\n\t\t\t\t\tpreviousAssignment = (Assignment)assignments.get(thisIndex - 1);\n\t\t\t\t\tpreviousId = previousAssignment.getId();\n\t\t\t\t}\n\t\t\t\tif (thisIndex < (assignments.size() - 1)) {\n\t\t\t\t\tnextAssignment = (Assignment)assignments.get(thisIndex + 1);\n\t\t\t\t\tnextId = nextAssignment.getId();\n\t\t\t\t}\n\n                external = assignment.isExternallyMaintained();\n                externalLink = assignment.getExternalInstructorLink();\n                externalAppName = assignment.getExternalAppName();\n\n\t\t\t\t// Set up score rows.\n\t\t\t\tMap enrollmentMap = getOrderedEnrollmentMap();\n\n\t\t\t\tList gradeRecords;\n\n\t\t\t\tif (isFilteredSearch() || isEnrollmentSort()) {\n\t\t\t\t\tgradeRecords = getGradeManager().getPointsEarnedSortedGradeRecords(assignment, enrollmentMap.keySet());\n\t\t\t\t} else {\n\t\t\t\t\tgradeRecords = getGradeManager().getPointsEarnedSortedGradeRecords(assignment);\n\t\t\t\t}\n\n\t\t\t\tList workingEnrollments = new ArrayList(enrollmentMap.values());\n\n\t\t\t\tif (!isEnrollmentSort()) {\n\t\t\t\t\t// Need to sort and page based on a scores column.\n\t\t\t\t\tList scoreSortedEnrollments = new ArrayList();\n\t\t\t\t\tfor(Iterator iter = gradeRecords.iterator(); iter.hasNext();) {\n\t\t\t\t\t\tAbstractGradeRecord agr = (AbstractGradeRecord)iter.next();\n\t\t\t\t\t\tscoreSortedEnrollments.add(enrollmentMap.get(agr.getStudentId()));\n\t\t\t\t\t}\n\n\t\t\t\t\t// Put enrollments with no scores at the beginning of the final list.\n\t\t\t\t\tworkingEnrollments.removeAll(scoreSortedEnrollments);\n\n\t\t\t\t\t// Add all sorted enrollments with scores into the final list\n\t\t\t\t\tworkingEnrollments.addAll(scoreSortedEnrollments);\n\n\t\t\t\t\tworkingEnrollments = finalizeSortingAndPaging(workingEnrollments);\n\t\t\t\t}\n\n                // Get all of the grading events for these enrollments on this assignment\n                GradingEvents allEvents = getGradeManager().getGradingEvents(assignment, workingEnrollments);\n                \n                for (Iterator iter = gradeRecords.iterator(); iter.hasNext(); ) {\n\t\t\t\t\tAssignmentGradeRecord gradeRecord = (AssignmentGradeRecord)iter.next();\n\t\t\t\t\tscores.put(gradeRecord.getStudentId(), gradeRecord.getPointsEarned());\n\t\t\t\t}\n\t\t\t\tfor (Iterator iter = workingEnrollments.iterator(); iter.hasNext(); ) {\n\t\t\t\t\tEnrollment enrollment = (Enrollment)iter.next();\n\t\t\t\t\tscoreRows.add(new ScoreRow(enrollment, allEvents.getEvents(enrollment.getUser().getUserUid())));\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t// The assignment might have been removed since this link was set up.\n\t\t\t\tif (logger.isWarnEnabled()) logger.warn(\"No assignmentId=\" + assignmentId + \" in gradebookUid \" + getGradebookUid());\n                FacesUtil.addErrorMessage(getLocalizedString(\"assignment_details_assignment_removed\"));\n\t\t\t}\n\t\t}\n\t}","id":105144,"modified_method":"protected void init() {\n\t\tif (logger.isDebugEnabled()) logger.debug(\"loadData assignment=\" + assignment + \", previousAssignment=\" + previousAssignment + \", nextAssignment=\" + nextAssignment);\n\n\t\t// Clear view state.\n        previousAssignment = null;\n        nextAssignment = null;\n\t\tscoreRows = new ArrayList();\n\n\t\tif (assignmentId != null) {\n\t\t\tassignment = (Assignment)getGradableObjectManager().getGradableObjectWithStats(assignmentId);\n\t\t\tif (assignment != null) {\n                scores = new GradeRecordSet(assignment);\n\n                // Get the list of assignments.  If we are sorting by mean, we\n                // need to fetch the assignment statistics as well.\n\t\t\t\tList assignments;\n                if(Assignment.SORT_BY_MEAN.equals(getAssignmentSortColumn())) {\n                    assignments = getGradableObjectManager().getAssignmentsWithStats(getGradebookId(),\n                            getAssignmentSortColumn(), isAssignmentSortAscending());\n                } else {\n                    assignments = getGradableObjectManager().getAssignments(getGradebookId(),\n                            getAssignmentSortColumn(), isAssignmentSortAscending());\n                }\n\n                // Set up next and previous links, if any.\n                int thisIndex = assignments.indexOf(assignment);\n\t\t\t\tif (thisIndex > 0) {\n\t\t\t\t\tpreviousAssignment = (Assignment)assignments.get(thisIndex - 1);\n\t\t\t\t}\n\t\t\t\tif (thisIndex < (assignments.size() - 1)) {\n\t\t\t\t\tnextAssignment = (Assignment)assignments.get(thisIndex + 1);\n\t\t\t\t}\n\n\t\t\t\t// Set up score rows.\n\t\t\t\tMap enrollmentMap = getOrderedEnrollmentMap();\n\n\t\t\t\tList gradeRecords;\n\n\t\t\t\tif (isFilteredSearch() || isEnrollmentSort()) {\n\t\t\t\t\tgradeRecords = getGradeManager().getPointsEarnedSortedGradeRecords(assignment, enrollmentMap.keySet());\n\t\t\t\t} else {\n\t\t\t\t\tgradeRecords = getGradeManager().getPointsEarnedSortedGradeRecords(assignment);\n\t\t\t\t}\n\n\t\t\t\tList workingEnrollments = new ArrayList(enrollmentMap.values());\n\n\t\t\t\tif (!isEnrollmentSort()) {\n\t\t\t\t\t// Need to sort and page based on a scores column.\n\t\t\t\t\tList scoreSortedEnrollments = new ArrayList();\n\t\t\t\t\tfor(Iterator iter = gradeRecords.iterator(); iter.hasNext();) {\n\t\t\t\t\t\tAbstractGradeRecord agr = (AbstractGradeRecord)iter.next();\n\t\t\t\t\t\tscoreSortedEnrollments.add(enrollmentMap.get(agr.getStudentId()));\n\t\t\t\t\t}\n\n\t\t\t\t\t// Put enrollments with no scores at the beginning of the final list.\n\t\t\t\t\tworkingEnrollments.removeAll(scoreSortedEnrollments);\n\n\t\t\t\t\t// Add all sorted enrollments with scores into the final list\n\t\t\t\t\tworkingEnrollments.addAll(scoreSortedEnrollments);\n\n\t\t\t\t\tworkingEnrollments = finalizeSortingAndPaging(workingEnrollments);\n\t\t\t\t}\n\n                // Get all of the grading events for these enrollments on this assignment\n                GradingEvents allEvents = getGradeManager().getGradingEvents(assignment, workingEnrollments);\n                \n                for (Iterator iter = gradeRecords.iterator(); iter.hasNext(); ) {\n\t\t\t\t\tAssignmentGradeRecord gradeRecord = (AssignmentGradeRecord)iter.next();\n\t\t\t\t\tscores.addGradeRecord(gradeRecord);\n\t\t\t\t}\n\t\t\t\tfor (Iterator iter = workingEnrollments.iterator(); iter.hasNext(); ) {\n\t\t\t\t\tEnrollment enrollment = (Enrollment)iter.next();\n                    AssignmentGradeRecord gradeRecord = (AssignmentGradeRecord)scores.getGradeRecord(enrollment.getUser().getUserUid());\n\t\t\t\t\tscoreRows.add(new ScoreRow(enrollment, gradeRecord, allEvents.getEvents(enrollment.getUser().getUserUid())));\n\t\t\t\t}\n\n\t\t\t} else {\n\t\t\t\t// The assignment might have been removed since this link was set up.\n\t\t\t\tif (logger.isWarnEnabled()) logger.warn(\"No assignmentId=\" + assignmentId + \" in gradebookUid \" + getGradebookUid());\n                FacesUtil.addErrorMessage(getLocalizedString(\"assignment_details_assignment_removed\"));\n\t\t\t}\n\t\t}\n\t}","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public boolean isLast() {\n\t\treturn (nextId == null);\n\t}","id":105145,"modified_method":"public boolean isLast() {\n\t\treturn (nextAssignment == null);\n\t}","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public ScoreRow(Enrollment enrollment, List gradingEvents) {\n\t\t\tstudentUid = enrollment.getUser().getUserUid();\n\t\t\tsortName = enrollment.getUser().getSortName();\n\t\t\tdisplayUid = enrollment.getUser().getDisplayUid();\n            \n            events = new ArrayList();\n            for(Iterator iter = gradingEvents.iterator(); iter.hasNext();) {\n                GradingEvent gradingEvent = (GradingEvent)iter.next();\n                String graderName;\n                try {\n                    graderName = getCourseManagementService().getUser(gradingEvent.getGraderId()).getDisplayName();\n                } catch (UnknownUserException e) {\n                    logger.warn(\"Unable to find user with uid=\" + gradingEvent.getGraderId());\n                    graderName = gradingEvent.getGraderId();\n                }\n                Event event = new Event(gradingEvent.getDateGraded(), gradingEvent.getGrade(),graderName);\n                events.add(event);\n            }\n            Collections.sort(events);\n\t\t}","id":105146,"modified_method":"public ScoreRow(Enrollment enrollment, AssignmentGradeRecord gradeRecord, List gradingEvents) {\n            this.enrollment = enrollment;\n            if(gradeRecord == null) {\n                this.gradeRecord = new AssignmentGradeRecord(assignment, enrollment.getUser().getUserUid(), null, null);\n                scores.addGradeRecord(this.gradeRecord);\n            } else {\n                this.gradeRecord = gradeRecord;\n            }\n            \n            events = new ArrayList();\n            for(Iterator iter = gradingEvents.iterator(); iter.hasNext();) {\n                GradingEvent gradingEvent = (GradingEvent)iter.next();\n                String graderName;\n                try {\n                    graderName = getCourseManagementService().getUser(gradingEvent.getGraderId()).getDisplayName();\n                } catch (UnknownUserException e) {\n                    logger.warn(\"Unable to find user with uid=\" + gradingEvent.getGraderId());\n                    graderName = gradingEvent.getGraderId();\n                }\n                Event event = new Event(gradingEvent.getDateGraded(), gradingEvent.getGrade(),graderName);\n                events.add(event);\n            }\n            Collections.sort(events);\n\t\t}","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public Long getPreviousId() {\n\t\treturn previousId;\n\t}","id":105147,"modified_method":"public Assignment getPreviousAssignment() {\n        return previousAssignment;\n    }","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private void saveScores() throws StaleObjectModificationException {\n\t\tif (logger.isInfoEnabled()) logger.info(\"saveScores \" + assignmentId);\n\t\tSet excessiveScores = getGradeManager().updateAssignmentGradeRecords(assignmentId, scores);\n\n\t\tString messageKey = (excessiveScores.size() > 0) ?\n\t\t\t\"assignment_details_scores_saved_excessive\" :\n\t\t\t\"assignment_details_scores_saved\";\n\n        // Let the user know.\n        FacesUtil.addMessage(getLocalizedString(messageKey));\n\t}","id":105148,"modified_method":"private void saveScores() throws StaleObjectModificationException {\n\t\tif (logger.isInfoEnabled()) logger.info(\"saveScores \" + assignmentId);\n\t\tSet excessiveScores = getGradeManager().updateAssignmentGradeRecords(scores);\n\n\t\tString messageKey = (excessiveScores.size() > 0) ?\n\t\t\t\"assignment_details_scores_saved_excessive\" :\n\t\t\t\"assignment_details_scores_saved\";\n\n        // Let the user know.\n        FacesUtil.addMessage(getLocalizedString(messageKey));\n\t}","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public Double getScore() {\n\t\t\treturn (Double)scores.get(studentUid);\n\t\t}","id":105149,"modified_method":"public Double getScore() {\n\t\t\treturn gradeRecord.getPointsEarned();\n\t\t}","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void setScore(Double score) {\n\t\t\tscores.put(studentUid, score);\n\t\t}","id":105150,"modified_method":"public void setScore(Double score) {\n            gradeRecord.setPointsEarned(score);\n\t\t}","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public String getScoreColumnAlignment() {\n    \tif (isExternal()) {\n    \t\treturn \"right\";\n    \t} else {\n    \t\treturn \"left\";\n    \t}\n    }","id":105151,"modified_method":"public String getScoreColumnAlignment() {\n    \tif (assignment.isExternallyMaintained()) {\n    \t\treturn \"right\";\n    \t} else {\n    \t\treturn \"left\";\n    \t}\n    }","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public boolean isFirst() {\n\t\treturn (previousId == null);\n\t}","id":105152,"modified_method":"public boolean isFirst() {\n\t\treturn (previousAssignment == null);\n\t}","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public ScoreRow(Enrollment enrollment) {\n\t\t\tstudentUid = enrollment.getUser().getUserUid();\n\t\t\tsortName = enrollment.getUser().getSortName();\n\t\t\tdisplayUid = enrollment.getUser().getDisplayUid();\n\t\t\tCourseGradeRecord gradeRecord = (CourseGradeRecord)scores.get(studentUid);\n            if(gradeRecord == null) {\n                List availableGrades = getGradebook().getSelectedGradeMapping().getGrades();\n                calculatedGrade = (String)availableGrades.get(availableGrades.size()-1); // Get the last/lowest grade\n            } else {\n                score = (Double)gradeRecord.getPointsEarned();\n                enteredGrade = gradeRecord.getEnteredGrade();\n                calculatedGrade = gradeRecord.getDisplayGrade();\n            }\n\n            if (enteredGrade == null) {\n\t\t\t\tenteredGrade = \"\";\n\t\t\t}\n\t\t}","id":105153,"modified_method":"public ScoreRow(Enrollment enrollment) {\n            this.enrollment = enrollment;\n\t\t\tcourseGradeRecord = (CourseGradeRecord)gradeRecordSet.getGradeRecord(enrollment.getUser().getUserUid());\n            if(courseGradeRecord == null) {\n                courseGradeRecord = new CourseGradeRecord(courseGrade, enrollment.getUser().getUserUid(), null, null);\n                List availableGrades = getGradebook().getSelectedGradeMapping().getGrades();\n            }\n\t\t}","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public Double getCalculatedPercentGrade() {\n            if(score == null) {\n                return new Double(0);\n            }\n            return new Double(score.doubleValue() / totalPoints * 100);\n        }","id":105154,"modified_method":"public Double getCalculatedPercentGrade() {\n            if(courseGradeRecord == null) {\n                return new Double(0);\n            }\n            return new Double(courseGradeRecord.getAutoCalculatedGrade().doubleValue() / totalPoints * 100);\n        }","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private void saveGrades() throws StaleObjectModificationException {\n\t\tif (logger.isInfoEnabled()) logger.info(\"saveGrades for gradebook=\" + getGradebookUid() + \", user=\" + getUserUid() + \", changing \" + changedGrades.size() + \" grades\");\n\n\t\t// Only save changed grades.\n\t\tgetGradeManager().updateCourseGradeRecords(getGradebookId(), changedGrades);\n\n\t\t// Clear the work-in-progress indicator so that the user can\n\t\t// start fresh.\n\t\tworkInProgress = false;\n\n\t\t// Let the user know.\n\t\tFacesUtil.addMessage(getLocalizedString(\"course_grade_details_grades_saved\"));\n\t}","id":105155,"modified_method":"private void saveGrades() throws StaleObjectModificationException {\n\t\tgetGradeManager().updateCourseGradeRecords(gradeRecordSet);\n\n\t\t// Clear the work-in-progress indicator so that the user can\n\t\t// start fresh.\n//\t\tworkInProgress = false;\n\n\t\t// Let the user know.\n\t\tFacesUtil.addMessage(getLocalizedString(\"course_grade_details_grades_saved\"));\n\t}","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public String getCalculatedLetterGrade() {\n            if(score == null) {\n                return gradeMapping.getGrade(new Double(0));\n            }\n            Double val = new Double(score.doubleValue() / totalPoints * 100);\n            return gradeMapping.getGrade(val);\n        }","id":105156,"modified_method":"public String getCalculatedLetterGrade() {\n            if(courseGradeRecord == null) {\n                return gradeMapping.getGrade(new Double(0));\n            }\n            Double val = new Double(courseGradeRecord.getPointsEarned().doubleValue() / totalPoints * 100);\n            return gradeMapping.getGrade(val);\n        }","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void init() {\n\t\t// We save the \"changedGrades\" map across the request thread to deal with\n\t\t// the following scenario:\n\t\t//\n\t\t//   1) The instructor enters several grades, one of which is invalid,\n\t\t//      and saves.\n\t\t//   2) The component model is updated with the request values. Validation\n\t\t//      fails for the invalid grade. Value change listeners are called for\n\t\t//      the valid grades. The save action is not reached.\n\t\t//   3) The instructor is reshown the form with its inputs, with an error\n\t\t//      message. After fixing the error, the instructor saves.\n\t\t//   4) JSF only calls value change listeners for the fixed grades, not for\n\t\t//      the previously entered (but unsaved) valid grades.\n\t\tif (!workInProgress) {\n\t\t\tchangedGrades = new HashMap();\n\t\t}\n\n\t\t// Clear view state.\n\t\tscoreRows = new ArrayList();\n\n\t\tcourseGrade = getGradableObjectManager().getCourseGradeWithStats(getGradebookId());\n\n        gradeMapping = getGradebook().getSelectedGradeMapping();\n        totalPoints = getGradableObjectManager().getTotalPoints(getGradebookId());\n\n        // Set up searching and paging\n        String defaultSearchString = getLocalizedString(\"search_default_student_search_string\");\n        if(StringUtils.trimToNull(searchString) == null) {\n            searchString = defaultSearchString;\n        }\n\n\t\t// Set up score rows.\n\t\tMap enrollmentMap = getOrderedEnrollmentMap();\n\n\t\tList gradeRecords;\n\t\tif (isFilteredSearch() || isEnrollmentSort()) {\n\t\t\tgradeRecords = getGradeManager().getPointsEarnedSortedGradeRecords(courseGrade, enrollmentMap.keySet());\n\t\t} else {\n\t\t\tgradeRecords = getGradeManager().getPointsEarnedSortedGradeRecords(courseGrade);\n\t\t}\n\n\t\tList workingEnrollments = new ArrayList(enrollmentMap.values());\n\n\t\tif (!isEnrollmentSort()) {\n\t\t\t// Need to sort and page based on a scores column.\n\t\t\tString sortColumn = getSortColumn();\n\t\t\tComparator comparator = null;\n\t\t\tif (sortColumn.equals(CourseGrade.SORT_BY_CALCULATED_GRADE) ||\n                sortColumn.equals(CourseGrade.SORT_BY_POINTS_EARNED)) {\n                comparator = CourseGradeRecord.calcComparator;\n            } else if (sortColumn.equals(CourseGrade.SORT_BY_OVERRIDE_GRADE)) {\n            \tcomparator = CourseGradeRecord.getOverrideComparator(courseGrade.getGradebook().getSelectedGradeMapping());\n            }\n            if (comparator != null) {\n\t            Collections.sort(gradeRecords, comparator);\n\t        }\n\n\t\t\tList scoreSortedEnrollments = new ArrayList();\n\t\t\tfor(Iterator iter = gradeRecords.iterator(); iter.hasNext();) {\n\t\t\t\tCourseGradeRecord cgr = (CourseGradeRecord)iter.next();\n\t\t\t\tscoreSortedEnrollments.add(enrollmentMap.get(cgr.getStudentId()));\n\t\t\t}\n\n\t\t\t// Put enrollments with no scores at the beginning of the final list.\n\t\t\tworkingEnrollments.removeAll(scoreSortedEnrollments);\n\n\t\t\t// Add all sorted enrollments with scores into the final list\n\t\t\tworkingEnrollments.addAll(scoreSortedEnrollments);\n\n\t\t\tworkingEnrollments = finalizeSortingAndPaging(workingEnrollments);\n\t\t}\n\n\t\tscores = new HashMap();\n\t\tfor (Iterator iter = gradeRecords.iterator(); iter.hasNext(); ) {\n\t\t\tCourseGradeRecord gradeRecord = (CourseGradeRecord)iter.next();\n\t\t\tscores.put(gradeRecord.getStudentId(), gradeRecord);\n\t\t}\n\t\tfor (Iterator iter = workingEnrollments.iterator(); iter.hasNext(); ) {\n\t\t\tEnrollment enrollment = (Enrollment)iter.next();\n            scoreRows.add(new ScoreRow(enrollment));\n\t\t}\n\n\t\tworkInProgress = true;\n\t}","id":105157,"modified_method":"protected void init() {\n\t\t// We save the \"changedGrades\" map across the request thread to deal with\n\t\t// the following scenario:\n\t\t//\n\t\t//   1) The instructor enters several grades, one of which is invalid,\n\t\t//      and saves.\n\t\t//   2) The component model is updated with the request values. Validation\n\t\t//      fails for the invalid grade. Value change listeners are called for\n\t\t//      the valid grades. The save action is not reached.\n\t\t//   3) The instructor is reshown the form with its inputs, with an error\n\t\t//      message. After fixing the error, the instructor saves.\n\t\t//   4) JSF only calls value change listeners for the fixed grades, not for\n\t\t//      the previously entered (but unsaved) valid grades.\n//\t\tif (!workInProgress) {\n//\t\t\tchangedGrades = new HashMap();\n//\t\t}\n\n\t\t// Clear view state.\n\t\tscoreRows = new ArrayList();\n\n\t\tcourseGrade = getGradableObjectManager().getCourseGradeWithStats(getGradebookId());\n\n        gradeMapping = getGradebook().getSelectedGradeMapping();\n        totalPoints = getGradableObjectManager().getTotalPoints(getGradebookId());\n\n        // Set up searching and paging\n        String defaultSearchString = getLocalizedString(\"search_default_student_search_string\");\n        if(StringUtils.trimToNull(searchString) == null) {\n            searchString = defaultSearchString;\n        }\n\n\t\t// Set up score rows.\n\t\tMap enrollmentMap = getOrderedEnrollmentMap();\n\n\t\tList gradeRecords;\n\t\tif (isFilteredSearch() || isEnrollmentSort()) {\n\t\t\tgradeRecords = getGradeManager().getPointsEarnedSortedGradeRecords(courseGrade, enrollmentMap.keySet());\n\t\t} else {\n\t\t\tgradeRecords = getGradeManager().getPointsEarnedSortedGradeRecords(courseGrade);\n\t\t}\n\n\t\tList workingEnrollments = new ArrayList(enrollmentMap.values());\n\n\t\tif (!isEnrollmentSort()) {\n\t\t\t// Need to sort and page based on a scores column.\n\t\t\tString sortColumn = getSortColumn();\n\t\t\tComparator comparator = null;\n\t\t\tif (sortColumn.equals(CourseGrade.SORT_BY_CALCULATED_GRADE) ||\n                sortColumn.equals(CourseGrade.SORT_BY_POINTS_EARNED)) {\n                comparator = CourseGradeRecord.calcComparator;\n            } else if (sortColumn.equals(CourseGrade.SORT_BY_OVERRIDE_GRADE)) {\n            \tcomparator = CourseGradeRecord.getOverrideComparator(courseGrade.getGradebook().getSelectedGradeMapping());\n            }\n            if (comparator != null) {\n\t            Collections.sort(gradeRecords, comparator);\n\t        }\n\n\t\t\tList scoreSortedEnrollments = new ArrayList();\n\t\t\tfor(Iterator iter = gradeRecords.iterator(); iter.hasNext();) {\n\t\t\t\tCourseGradeRecord cgr = (CourseGradeRecord)iter.next();\n\t\t\t\tscoreSortedEnrollments.add(enrollmentMap.get(cgr.getStudentId()));\n\t\t\t}\n\n\t\t\t// Put enrollments with no scores at the beginning of the final list.\n\t\t\tworkingEnrollments.removeAll(scoreSortedEnrollments);\n\n\t\t\t// Add all sorted enrollments with scores into the final list\n\t\t\tworkingEnrollments.addAll(scoreSortedEnrollments);\n\n\t\t\tworkingEnrollments = finalizeSortingAndPaging(workingEnrollments);\n\t\t}\n\t\t    gradeRecordSet = new GradeRecordSet(courseGrade);\n\t\tfor (Iterator iter = gradeRecords.iterator(); iter.hasNext(); ) {\n\t\t\tCourseGradeRecord gradeRecord = (CourseGradeRecord)iter.next();\n\t\t\tgradeRecordSet.addGradeRecord(gradeRecord);\n\t\t}\n\t\tfor (Iterator iter = workingEnrollments.iterator(); iter.hasNext(); ) {\n\t\t\tEnrollment enrollment = (Enrollment)iter.next();\n            scoreRows.add(new ScoreRow(enrollment));\n\t\t}\n\n//\t\tworkInProgress = true;\n\t}","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public Double getPoints() {\n\t\treturn courseGrade.getPointsForDisplay();\n\t}","id":105158,"modified_method":"public double getTotalPoints() {\n        return totalPoints;\n    }","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n     */\n    public void updateCourseGradeRecords(final Long gradebookId, final Map studentsToGrades)\n        throws StaleObjectModificationException {\n\t\tgetHibernateTemplate().execute(new HibernateCallback() {\n\t\t\tpublic Object doInHibernate(Session session) throws HibernateException {\n\t\t\t\tCourseGrade courseGrade = (CourseGrade)session.find(\"from CourseGrade as cg where cg.gradebook.id=?\",\n\t\t\t\t\tgradebookId, Hibernate.LONG).get(0);\n\t\t\t\tDate now = new Date();\n\t\t\t\tGradebook gb = courseGrade.getGradebook();\n\t\t\t\tString graderId = FacadeUtils.getUserUid(authn);\n\n\t\t\t\t// Find the number of points possible in this gradebook\n\t\t\t\tdouble totalPointsPossibleInGradebook = gradableObjectManager.getTotalPoints(gb.getId());\n\n                // Find the records for this gradable object\n                String hql = \"from CourseGradeRecord as gr where gr.gradableObject=?\";\n                List allGradeRecords = session.find(hql, courseGrade, Hibernate.entity(CourseGrade.class));\n\n                for(Iterator mapIter = studentsToGrades.keySet().iterator(); mapIter.hasNext();) {\n                    // Get the student's userUid and grade from the studentsToGrades map\n                    String studentId = (String)mapIter.next();\n                    String grade = StringUtils.trimToNull((String)studentsToGrades.get(studentId));\n\n                    // Find this student's grade record\n                    CourseGradeRecord gradeRecord = (CourseGradeRecord)findStudentGradeRecord(studentId, allGradeRecords);\n\n                    if(gradeRecord != null) {\n                        // Update the existing record\n\n\t\t\t\t\t\t// If the entered grade hasn't changed, just move on\n\t\t\t\t\t\tif(gradeRecord.getEnteredGrade() == null && grade == null) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif(gradeRecord.getEnteredGrade() != null && grade != null && gradeRecord.getEnteredGrade().equals(grade)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Update the entered grade\n\t\t\t\t\t\tgradeRecord.setEnteredGrade(grade);\n\n\t\t\t\t\t\t// Update the sort grade\n\t\t\t\t\t\tif(grade == null) {\n\t\t\t\t\t\t\tgradeRecord.setSortGrade(gradeRecord.calculatePercent(totalPointsPossibleInGradebook));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tgradeRecord.setSortGrade(gb.getSelectedGradeMapping().getValue(grade));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tgradeRecord.setGraderId(graderId);\n\t\t\t\t\t\tgradeRecord.setDateRecorded(now);\n                        if(logger.isDebugEnabled()) logger.debug(graderId + \" is updating grade record \" + gradeRecord);\n                        session.update(gradeRecord);\n                    } else {\n                        if (grade == null) {\n                            continue; // If there is no existing grade record, and there is no new grade, don't do anything\n                        } else {\n                            // Save the new course grade record\n                            gradeRecord = new CourseGradeRecord(courseGrade, studentId, graderId, grade);\n\n\t\t\t\t\t\t\t// Set the sort grade\n\t\t\t\t\t\t\tgradeRecord.setSortGrade(gb.getSelectedGradeMapping().getValue(grade));\n\n                            if(logger.isDebugEnabled()) logger.debug(graderId + \" is saving grade record \" + gradeRecord);\n                            session.save(gradeRecord);\n                        }\n                    }\n                    // Log the grading event\n                    session.save(new GradingEvent(courseGrade, graderId, studentId, grade));\n                }\n\n                return null;\n            }\n        });\n    }","id":105159,"modified_method":"/**\n     */\n    public void updateCourseGradeRecords(final GradeRecordSet gradeRecordSet)\n        throws StaleObjectModificationException {\n        \n        if(gradeRecordSet.getAllGradeRecords().size() == 0) {\n            log.debug(\"updateCourseGradeRecords called with zero grade records to update\");\n            return;\n        }\n\n        getHibernateTemplate().execute(new HibernateCallback() {\n\t\t\tpublic Object doInHibernate(Session session) throws HibernateException {\n                for(Iterator iter = gradeRecordSet.getAllGradeRecords().iterator(); iter.hasNext();) {\n                    session.evict(iter.next());\n                }\n                \n\t\t\t\tCourseGrade courseGrade = (CourseGrade)gradeRecordSet.getGradableObject();\n\t\t\t\tDate now = new Date();\n\t\t\t\tGradebook gb = courseGrade.getGradebook();\n\t\t\t\tString graderId = FacadeUtils.getUserUid(authn);\n\n\t\t\t\t// Find the number of points possible in this gradebook\n\t\t\t\tdouble totalPointsPossibleInGradebook = gradableObjectManager.getTotalPoints(gb.getId());\n\n                // Find the grade records for these students on this gradable object\n                String hql = \"select gr.studentId, gr.enteredGrade from CourseGradeRecord as gr where gr.gradableObject=:go and gr.studentId in (:studentIds)\";\n                Query q = session.createQuery(hql);\n                q.setParameter(\"go\", courseGrade);\n                q.setParameterList(\"studentIds\", gradeRecordSet.getAllStudentIds());\n                List persistentGradeRecords = q.list();\n\n                // Construct a map of student id to persistent grade record scores\n                Map scoreMap = new HashMap();\n                for(Iterator iter = persistentGradeRecords.iterator(); iter.hasNext();) {\n                    Object[] oa = (Object[])iter.next();\n                    scoreMap.put(oa[0], oa[1]);\n                }\n                \n                for(Iterator iter = gradeRecordSet.getAllGradeRecords().iterator(); iter.hasNext();) {\n                    // The possibly modified course grade record\n                    CourseGradeRecord gradeRecordFromCall = (CourseGradeRecord)iter.next();\n                    \n                    // The entered grade in the db for this grade record\n                    String grade = (String)scoreMap.get(gradeRecordFromCall.getStudentId());\n\n                    // Update the existing record\n\n\t\t\t\t\t// If the entered grade hasn't changed, just move on\n\t\t\t\t\tif(gradeRecordFromCall.getEnteredGrade() == null && grade == null) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t\tif(gradeRecordFromCall.getEnteredGrade() != null && grade != null && gradeRecordFromCall.getEnteredGrade().equals(grade)) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Update the sort grade\n\t\t\t\t\tif(gradeRecordFromCall.getEnteredGrade() == null) {\n\t\t\t\t\t\tgradeRecordFromCall.setSortGrade(gradeRecordFromCall.calculatePercent(totalPointsPossibleInGradebook));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tgradeRecordFromCall.setSortGrade(gb.getSelectedGradeMapping().getValue(gradeRecordFromCall.getEnteredGrade()));\n\t\t\t\t\t}\n\n\t\t\t\t\tgradeRecordFromCall.setGraderId(graderId);\n\t\t\t\t\tgradeRecordFromCall.setDateRecorded(now);\n                    session.saveOrUpdate(gradeRecordFromCall);\n\n                    // Log the grading event\n                    session.save(new GradingEvent(courseGrade, graderId, gradeRecordFromCall.getStudentId(), gradeRecordFromCall.getEnteredGrade()));\n                }\n\n                return null;\n            }\n        });\n    }","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n     * @return Returns set of student UIDs who were given scores higher than the assignment's value.\n     */\n    public Set updateAssignmentGradeRecords(final Long assignmentId, final Map studentsToGrades)\n        throws StaleObjectModificationException {\n\t\treturn (Set)getHibernateTemplate().execute(new HibernateCallback() {\n\t\t\tpublic Object doInHibernate(Session session) throws HibernateException {\n\t\t\t\tAssignment assignment = (Assignment)session.load(Assignment.class, assignmentId);\n\t\t\t\tDate now = new Date();\n\t\t\t\tGradebook gb = assignment.getGradebook();\n\t\t\t\tString graderId = FacadeUtils.getUserUid(authn);\n\t\t\t\tSet studentsWithUpdatedAssignmentGradeRecords = new HashSet();\n\n\t\t\t\tSet studentsWithExcessiveScores = new HashSet();\n\n\t\t\t\t// Find the records for this gradable object\n\t\t\t\tString hql = \"from AssignmentGradeRecord as gr where gr.gradableObject=?\";\n\t\t\t\tList allGradeRecords = session.find(hql, assignment, Hibernate.entity(Assignment.class));\n\n                for(Iterator mapIter = studentsToGrades.keySet().iterator(); mapIter.hasNext();) {\n                    // Get the student's userUid and grade from the studentsToGrades map\n                    String studentId = (String)mapIter.next();\n                    Number gradeNumber = (Number)studentsToGrades.get(studentId);\n                    Double grade = (gradeNumber != null) ? new Double(gradeNumber.doubleValue()) : null;\n\n                    AssignmentGradeRecord gradeRecord = (AssignmentGradeRecord)findStudentGradeRecord(studentId, allGradeRecords);\n\n                    if (gradeRecord != null) {\n\t\t\t\t\t\t // If the grade hasn't changed, just move on\n\t\t\t\t\t\t if (gradeRecord.getPointsEarned() == null && grade == null) {\n\t\t\t\t\t\t\t continue;\n\t\t\t\t\t\t }\n\t\t\t\t\t\t if (gradeRecord.getPointsEarned() != null && grade != null && gradeRecord.getPointsEarned().equals(grade)) {\n\t\t\t\t\t\t\t continue;\n\t\t\t\t\t\t }\n\n\t\t\t\t\t\t // Since we are updating a student's grade in an assignment,\n\t\t\t\t\t\t // keep track of the student so we can update his/her course grade record\n\t\t\t\t\t\t studentsWithUpdatedAssignmentGradeRecords.add(studentId);\n\n\t\t\t\t\t\t gradeRecord.setPointsEarned(grade);\n                         gradeRecord.setGraderId(graderId);\n                         gradeRecord.setDateRecorded(now);\n                         if(logger.isDebugEnabled()) logger.debug(graderId + \" is updating grade record \" + gradeRecord);\n                         session.update(gradeRecord);\n                    } else if (grade == null) {\n                         continue; // If there is no existing grade record, and there is no new grade, don't do anything\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// We are adding an assignment grade record, so keep track of this student so we can update the course grade record\n\t\t\t\t\t\tstudentsWithUpdatedAssignmentGradeRecords.add(studentId);\n\n\t\t\t\t\t\tgradeRecord = new AssignmentGradeRecord(assignment, studentId, graderId, grade);\n\t\t\t\t\t\tif(logger.isDebugEnabled()) logger.debug(graderId + \" is saving grade record \" + gradeRecord);\n\t\t\t\t\t\tsession.save(gradeRecord);\n                    }\n\n                    // Check for excessive (AKA extra credit) scoring.\n                    if ((grade != null) && (grade.compareTo(assignment.getPointsPossible()) > 0)) {\n                    \tstudentsWithExcessiveScores.add(studentId);\n                    }\n\n                    // Log the grading event\n                    session.save(new GradingEvent(assignment, graderId, studentId, grade));\n                }\n\n                // Update the course grade records for students with assignment grade record changes\n            \trecalculateCourseGradeRecords(gb, studentsWithUpdatedAssignmentGradeRecords);\n\n                return studentsWithExcessiveScores;\n\t\t\t}\n\t\t});\n    }","id":105160,"modified_method":"/**\n     * @return Returns set of student UIDs who were given scores higher than the assignment's value.\n     */\n    public Set updateAssignmentGradeRecords(final GradeRecordSet gradeRecordSet)\n        throws StaleObjectModificationException {\n\n        final Collection gradeRecordsFromCall = gradeRecordSet.getAllGradeRecords();\n        final Set studentIds = gradeRecordSet.getAllStudentIds();\n        \n        // If no grade records are sent, don't bother doing anything with the db\n        if(gradeRecordsFromCall.size() == 0) {\n            log.debug(\"updateAssignmentGradeRecords called for zero grade records\");\n            return new HashSet();\n        }\n        \n        return (Set)getHibernateTemplate().execute(new HibernateCallback() {\n\t\t\tpublic Object doInHibernate(Session session) throws HibernateException {\n                // Evict the grade records from the session so we can check for point changes\n                for(Iterator iter = gradeRecordsFromCall.iterator(); iter.hasNext();) {\n                    session.evict(iter.next());\n                }\n                \n                Assignment assignment = (Assignment)session.load(Assignment.class, gradeRecordSet.getGradableObject().getId());\n\t\t\t\tDate now = new Date();\n\t\t\t\tGradebook gb = assignment.getGradebook();\n\t\t\t\tString graderId = FacadeUtils.getUserUid(authn);\n\n                Set studentsWithUpdatedAssignmentGradeRecords = new HashSet();\n\t\t\t\tSet studentsWithExcessiveScores = new HashSet();\n\n\t\t\t\tString hql = \"select gr.studentId, gr.pointsEarned from AssignmentGradeRecord as gr where gr.gradableObject=:go and gr.studentId in (:studentIds)\";\n                Query q = session.createQuery(hql);\n                q.setParameter(\"go\", assignment);\n                q.setParameterList(\"studentIds\", studentIds);\n\t\t\t\tList persistentGradeRecords = q.list();\n                \n\t\t\t\t// Construct a map of student id to persistent grade record scores\n                Map scoreMap = new HashMap();\n                for(Iterator iter = persistentGradeRecords.iterator(); iter.hasNext();) {\n                    Object[] oa = (Object[])iter.next();\n                    scoreMap.put(oa[0], oa[1]);\n                }\n\n                for(Iterator iter = gradeRecordsFromCall.iterator(); iter.hasNext();) {\n                    // Keep track of whether this grade record needs to be updated\n                    boolean performUpdate = false;\n\n                    AssignmentGradeRecord gradeRecordFromCall = (AssignmentGradeRecord)iter.next();\n                    if(scoreMap.containsKey(gradeRecordFromCall.getStudentId())) {\n                        // The student already has a grade record, only perform an update if the grade has changed\n                        Double pointsInDb = (Double)scoreMap.get(gradeRecordFromCall.getStudentId());\n                        \n                        if( (pointsInDb != null && !pointsInDb.equals(gradeRecordFromCall.getPointsEarned())) ||\n                                (pointsInDb == null && gradeRecordFromCall.getPointsEarned() != null)) {\n                            // The grade record's value has changed\n                            gradeRecordFromCall.setGraderId(graderId);\n                            gradeRecordFromCall.setDateRecorded(now);\n                            session.update(gradeRecordFromCall);\n                            performUpdate = true;\n                        }\n                    } else {\n                        // This is a new grade record\n                        if(gradeRecordFromCall.getPointsEarned() != null) {\n                            gradeRecordFromCall.setGraderId(graderId);\n                            gradeRecordFromCall.setDateRecorded(now);\n                            session.save(gradeRecordFromCall);\n                            performUpdate = true;\n                        }\n                    }\n\n                    // Check for excessive (AKA extra credit) scoring.\n                    if (performUpdate &&\n                            gradeRecordFromCall.getPointsEarned() != null &&\n                            gradeRecordFromCall.getPointsEarned().compareTo(assignment.getPointsPossible()) > 0) {\n                    \tstudentsWithExcessiveScores.add(gradeRecordFromCall.getStudentId());\n                    }\n\n                    // Log the grading event, and keep track of the students with saved/updated grades\n                    if(performUpdate) {\n                        session.save(new GradingEvent(assignment, graderId, gradeRecordFromCall.getStudentId(), gradeRecordFromCall.getPointsEarned()));\n                        studentsWithUpdatedAssignmentGradeRecords.add(gradeRecordFromCall.getStudentId());\n                    }\n                }\n\n                // Update the course grade records for students with assignment grade record changes\n            \trecalculateCourseGradeRecords(gb, studentsWithUpdatedAssignmentGradeRecords);\n\n                return studentsWithExcessiveScores;\n\t\t\t}\n\t\t});\n    }","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void testExcessiveScores() throws Exception {\n        Gradebook gradebook = gradebookManager.getGradebook(this.getClass().getName());\n        Long asgId = gradableObjectManager.createAssignment(gradebook.getId(), \"Excessive Test\", new Double(10), new Date());\n\n        Set enrollments = new HashSet();\n        enrollments.add(new EnrollmentStandalone(new UserStandalone(\"normalStudent\", null, null, null), gradebook));\n        enrollments.add(new EnrollmentStandalone(new UserStandalone(\"goodStudent\", null, null, null), gradebook));\n        enrollments.add(new EnrollmentStandalone(new UserStandalone(\"excessiveStudent\", null, null, null), gradebook));\n\n        // Create a map of studentUserUids to grades\n        Map map = new HashMap();\n        map.put(\"normalStudent\", new Double(9));\n        map.put(\"goodStudent\", new Double(10));\n        map.put(\"excessiveStudent\", new Double(11));\n\n        Set excessives = gradeManager.updateAssignmentGradeRecords(asgId, map);\n        Assert.assertTrue(excessives.size() == 1);\n        Assert.assertTrue(excessives.contains(\"excessiveStudent\"));\n\n        map = new HashMap();\n        map.put(\"goodStudent\", new Double(11));\n        map.put(\"excessiveStudent\", new Double(11));\n\n        // Only updates should be reported.\n        excessives = gradeManager.updateAssignmentGradeRecords(asgId, map);\n        Assert.assertTrue(excessives.size() == 1);\n        Assert.assertTrue(excessives.contains(\"goodStudent\"));\n    }","id":105161,"modified_method":"public void testNewExcessiveScores() throws Exception {\n        Gradebook gradebook = gradebookManager.getGradebook(this.getClass().getName());\n        Long asgId = gradableObjectManager.createAssignment(gradebook.getId(), \"Excessive Test\", new Double(10), new Date());\n        Assignment asn = (Assignment)gradableObjectManager.getAssignmentsWithStats(gradebook.getId()).get(0);\n\n        // Create a grade record set\n        GradeRecordSet gradeRecordSet = new GradeRecordSet(asn);\n        gradeRecordSet.addGradeRecord(new AssignmentGradeRecord(asn, \"normalStudent\", \"testId\", new Double(9)));\n        gradeRecordSet.addGradeRecord(new AssignmentGradeRecord(asn, \"goodStudent\", \"testId\", new Double(10)));\n        gradeRecordSet.addGradeRecord(new AssignmentGradeRecord(asn, \"excessiveStudent\", \"testId\", new Double(11)));\n\n        Set excessives = gradeManager.updateAssignmentGradeRecords(gradeRecordSet);\n        Assert.assertTrue(excessives.size() == 1);\n        Assert.assertTrue(excessives.contains(\"excessiveStudent\"));\n\n        \n        \n        \n        \n        // We need to operate on whatever grade records already exist in the db\n        Set studentIds = new HashSet();\n        studentIds.add(\"normalStudent\");\n        studentIds.add(\"goodStudent\");\n        studentIds.add(\"excessiveStudent\");\n        \n        List persistentGradeRecords = gradeManager.getPointsEarnedSortedGradeRecords(asn, studentIds);\n        gradeRecordSet = new GradeRecordSet(asn);\n\n        for(Iterator iter = persistentGradeRecords.iterator(); iter.hasNext();) {\n            AssignmentGradeRecord gradeRecord = (AssignmentGradeRecord)iter.next();\n            if(gradeRecord.getStudentId().equals(\"goodStudent\")) {\n                gradeRecord.setPointsEarned(new Double(12));\n            }\n            // Always add the grade record to ensure that records that have not changed are not updated in the db\n            gradeRecordSet.addGradeRecord(gradeRecord);\n        }\n\n        // Only updates should be reported.\n        excessives = gradeManager.updateAssignmentGradeRecords(gradeRecordSet);\n        \n        Assert.assertTrue(excessives.contains(\"goodStudent\"));\n        Assert.assertEquals(1, excessives.size());\n    }","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void testAssignmentScoresEntered() throws Exception {\n        Gradebook gradebook = gradebookManager.getGradebook(this.getClass().getName());\n        Long asgId = gradableObjectManager.createAssignment(gradebook.getId(), \"Scores Entered Test\", new Double(10), new Date());\n\n        Set enrollments = new HashSet();\n        enrollments.add(new EnrollmentStandalone(new UserStandalone(\"entered1\", null, null, null), gradebook));\n\n        Assert.assertTrue(!gradeManager.isEnteredAssignmentScores(asgId));\n\n        // Create a map of studentUserUids to grades\n        Map map = new HashMap();\n        map.put(\"entered1\", new Double(9));\n\n        gradeManager.updateAssignmentGradeRecords(asgId, map);\n        Assert.assertTrue(gradeManager.isEnteredAssignmentScores(asgId));\n\n        map = new HashMap();\n        map.put(\"entered1\", null);\n\n        gradeManager.updateAssignmentGradeRecords(asgId, map);\n        Assert.assertTrue(!gradeManager.isEnteredAssignmentScores(asgId));\n    }","id":105162,"modified_method":"public void testAssignmentScoresEntered() throws Exception {\n        Gradebook gradebook = gradebookManager.getGradebook(this.getClass().getName());\n        Long asgId = gradableObjectManager.createAssignment(gradebook.getId(), \"Scores Entered Test\", new Double(10), new Date());\n        Assignment asn = (Assignment)gradableObjectManager.getAssignmentsWithStats(gradebook.getId()).get(0);\n\n        Set enrollments = new HashSet();\n        enrollments.add(new EnrollmentStandalone(new UserStandalone(\"entered1\", null, null, null), gradebook));\n\n        Assert.assertTrue(!gradeManager.isEnteredAssignmentScores(asgId));\n\n        GradeRecordSet gradeRecordSet = new GradeRecordSet(asn);\n        gradeRecordSet.addGradeRecord(new AssignmentGradeRecord(asn, \"entered1\", \"testId\", new Double(9)));\n\n        gradeManager.updateAssignmentGradeRecords(gradeRecordSet);\n        Assert.assertTrue(gradeManager.isEnteredAssignmentScores(asgId));\n\n        Set students = new HashSet();\n        students.add(\"entered1\");\n\n        List persistentGradeRecords = gradeManager.getPointsEarnedSortedGradeRecords(asn, students);\n        \n        gradeRecordSet = new GradeRecordSet(asn);\n        AssignmentGradeRecord gradeRecord = (AssignmentGradeRecord)persistentGradeRecords.get(0);\n        gradeRecord.setPointsEarned(null);\n        gradeRecordSet.addGradeRecord(gradeRecord);\n\n        gradeManager.updateAssignmentGradeRecords(gradeRecordSet);\n        Assert.assertTrue(!gradeManager.isEnteredAssignmentScores(asgId));\n    }","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void testGradeManager() throws Exception {\n        Gradebook gradebook = gradebookManager.getGradebook(this.getClass().getName());\n\n        // Get a gradebook and an assignment\n        Gradebook persistentGradebook = gradebookManager.getGradebook(this.getClass().getName());\n        gradableObjectManager.createAssignment(persistentGradebook.getId(), \"Assignment #1\", new Double(20), new Date());\n        Assignment persistentAssignment = (Assignment)gradableObjectManager.\n            getAssignmentsWithStats(persistentGradebook.getId()).get(0);\n\n        // Create a map of studentUserUids to grades\n        Map map = new HashMap();\n        map.put(\"testStudentUserUid1\", new Double(18));\n        map.put(\"testStudentUserUid2\", new Double(19));\n        map.put(\"testStudentUserUid3\", new Double(20));\n\n        gradeManager.updateAssignmentGradeRecords(persistentAssignment.getId(), map);\n\n        // Fetch the grade records\n        List records = gradeManager.getPointsEarnedSortedGradeRecords(persistentAssignment);\n\n        // Ensure that each of the students in the map have a grade record, and\n        // that their grade is correct\n        Set students = map.keySet();\n        for(Iterator iter = records.iterator(); iter.hasNext();) {\n            AssignmentGradeRecord agr = (AssignmentGradeRecord)iter.next();\n            double tmpScore = ((Double)map.get(agr.getStudentId())).doubleValue();\n            double persistentScore = agr.getPointsEarned().doubleValue();\n            Assert.assertTrue(tmpScore == persistentScore);\n        }\n\n        // Add overrides to the course grades\n        map.clear();\n        map.put(\"testStudentUserUid1\", \"C-\");\n        map.put(\"testStudentUserUid2\", \"D+\");\n        map.put(\"testStudentUserUid3\", \"F\");\n\n        CourseGrade courseGrade = gradableObjectManager.getCourseGradeWithStats(persistentGradebook.getId());\n        gradeManager.updateCourseGradeRecords(persistentGradebook.getId(), map);\n\n        GradeMapping gradeMapping = persistentGradebook.getSelectedGradeMapping();\n\n        // Ensure that the sort grades have been updated to reflect the overridden grades\n        List courseGradeRecords = gradeManager.getPointsEarnedSortedGradeRecords(courseGrade);\n        for(Iterator iter = courseGradeRecords.iterator(); iter.hasNext();) {\n            CourseGradeRecord cgr = (CourseGradeRecord)iter.next();\n            Double sortGrade = cgr.getSortGrade();\n            String studentId = cgr.getStudentId();\n            String tmpGrade = (String)map.get(cgr.getStudentId());\n            Assert.assertTrue(sortGrade.equals(gradeMapping.getValue(tmpGrade)));\n            Assert.assertTrue(gradeMapping.getGrade(cgr.getSortGrade()).equals(tmpGrade));\n        }\n\n        // Remove the overrides\n        map.clear();\n        map.put(\"testStudentUserUid1\", null);\n        map.put(\"testStudentUserUid2\", null);\n        map.put(\"testStudentUserUid3\", null);\n        gradeManager.updateCourseGradeRecords(persistentGradebook.getId(), map);\n\n        // Ensure that the sort grades have been updated\n        courseGradeRecords = gradeManager.getPointsEarnedSortedGradeRecords(courseGrade);\n        double totalPoints = gradableObjectManager.getTotalPoints(persistentGradebook.getId());\n\n        for(Iterator iter = courseGradeRecords.iterator(); iter.hasNext();) {\n            CourseGradeRecord cgr = (CourseGradeRecord)iter.next();\n            Double percent = cgr.calculatePercent(totalPoints);\n            Double sortGrade = cgr.getSortGrade();\n            String studentId = cgr.getStudentId();\n            Assert.assertTrue(sortGrade.doubleValue() - percent.doubleValue() < .001);\n        }\n\n        List allGradeRecords = gradeManager.getPointsEarnedSortedAllGradeRecords(persistentGradebook.getId());\n        // There should be six grade records for these students\n        Assert.assertTrue(allGradeRecords.size() == 6);\n\n        // Create a new, smaller set of enrollments and ensure the smaller set of grade records are selected correctly\n        Set filteredEnrollments = new HashSet();\n        filteredEnrollments.add(new EnrollmentStandalone(new UserStandalone(\"testStudentUserUid1\", null, null, null), persistentGradebook));\n        filteredEnrollments.add(new EnrollmentStandalone(new UserStandalone(\"testStudentUserUid2\", null, null, null), persistentGradebook));\n        List filteredGradeRecords = gradeManager.getPointsEarnedSortedAllGradeRecords(persistentGradebook.getId(), FacadeUtils.getStudentUids(filteredEnrollments));\n\n        // There should be four grade records for these students\n        Assert.assertTrue(filteredGradeRecords.size() == 4);\n\n        // There should be two grade records for these students and for this assignment\n        filteredGradeRecords = gradeManager.getPointsEarnedSortedGradeRecords(persistentAssignment, FacadeUtils.getStudentUids(filteredEnrollments));\n        Assert.assertTrue(filteredGradeRecords.size() == 2);\n    }","id":105163,"modified_method":"public void testGradeManager() throws Exception {\n        Gradebook gradebook = gradebookManager.getGradebook(this.getClass().getName());\n\n        // Get a gradebook and an assignment\n        Gradebook persistentGradebook = gradebookManager.getGradebook(this.getClass().getName());\n        gradableObjectManager.createAssignment(persistentGradebook.getId(), \"Assignment #1\", new Double(20), new Date());\n        Assignment persistentAssignment = (Assignment)gradableObjectManager.\n            getAssignmentsWithStats(persistentGradebook.getId()).get(0);\n\n        GradeRecordSet gradeRecordSet = new GradeRecordSet(persistentAssignment);\n        gradeRecordSet.addGradeRecord(new AssignmentGradeRecord(persistentAssignment, \"testStudentUserUid1\", \"teacher1\", new Double(18)));\n        gradeRecordSet.addGradeRecord(new AssignmentGradeRecord(persistentAssignment, \"testStudentUserUid2\", \"teacher1\", new Double(19)));\n        gradeRecordSet.addGradeRecord(new AssignmentGradeRecord(persistentAssignment, \"testStudentUserUid3\", \"teacher1\", new Double(20)));\n\n        gradeManager.updateAssignmentGradeRecords(gradeRecordSet);\n\n        // Fetch the grade records\n        List records = gradeManager.getPointsEarnedSortedGradeRecords(persistentAssignment);\n\n        // Ensure that each of the students in the map have a grade record, and\n        // that their grade is correct\n        Set students = gradeRecordSet.getAllStudentIds();\n        for(Iterator iter = records.iterator(); iter.hasNext();) {\n            AssignmentGradeRecord agr = (AssignmentGradeRecord)iter.next();\n            double tmpScore = gradeRecordSet.getGradeRecord(agr.getStudentId()).getPointsEarned().doubleValue();\n            double persistentScore = agr.getPointsEarned().doubleValue();\n            Assert.assertTrue(tmpScore == persistentScore);\n        }\n\n        // Add overrides to the course grades\n        CourseGrade courseGrade = gradableObjectManager.getCourseGradeWithStats(persistentGradebook.getId());\n        records = gradeManager.getPointsEarnedSortedGradeRecords(courseGrade);\n\n        gradeRecordSet = new GradeRecordSet(courseGrade);\n        for(Iterator iter = records.iterator(); iter.hasNext();) {\n            CourseGradeRecord record = (CourseGradeRecord)iter.next();\n            if(record.getStudentId().equals(\"testStudentUserUid1\")) {\n                record.setEnteredGrade(\"C-\");\n            } else if(record.getStudentId().equals(\"testStudentUserUid2\")) {\n                record.setEnteredGrade(\"D+\");\n            } else if(record.getStudentId().equals(\"testStudentUserUid3\")) {\n                record.setEnteredGrade(\"F\");\n            }\n            gradeRecordSet.addGradeRecord(record);\n        }\n\n        \n        gradeManager.updateCourseGradeRecords(gradeRecordSet);\n\n        GradeMapping gradeMapping = persistentGradebook.getSelectedGradeMapping();\n\n        // Ensure that the sort grades have been updated to reflect the overridden grades\n        List courseGradeRecords = gradeManager.getPointsEarnedSortedGradeRecords(courseGrade);\n        for(Iterator iter = courseGradeRecords.iterator(); iter.hasNext();) {\n            CourseGradeRecord cgr = (CourseGradeRecord)iter.next();\n            Double sortGrade = cgr.getSortGrade();\n            String studentId = cgr.getStudentId();\n            String tmpGrade = ((CourseGradeRecord)gradeRecordSet.getGradeRecord(studentId)).getEnteredGrade();\n            Assert.assertTrue(sortGrade.equals(gradeMapping.getValue(tmpGrade)));\n            Assert.assertTrue(gradeMapping.getGrade(cgr.getSortGrade()).equals(tmpGrade));\n        }\n\n        // Remove the overrides\n        gradeRecordSet = new GradeRecordSet(courseGrade);\n        for(Iterator iter = records.iterator(); iter.hasNext();) {\n            CourseGradeRecord record = (CourseGradeRecord)iter.next();\n            record.setEnteredGrade(null);\n            gradeRecordSet.addGradeRecord(record);\n        }\n\n        gradeManager.updateCourseGradeRecords(gradeRecordSet);\n\n        // Ensure that the sort grades have been updated\n        courseGradeRecords = gradeManager.getPointsEarnedSortedGradeRecords(courseGrade);\n        double totalPoints = gradableObjectManager.getTotalPoints(persistentGradebook.getId());\n\n        for(Iterator iter = courseGradeRecords.iterator(); iter.hasNext();) {\n            CourseGradeRecord cgr = (CourseGradeRecord)iter.next();\n            Double percent = cgr.calculatePercent(totalPoints);\n            Double sortGrade = cgr.getSortGrade();\n            String studentId = cgr.getStudentId();\n            Assert.assertTrue(sortGrade.doubleValue() - percent.doubleValue() < .001);\n        }\n\n        List allGradeRecords = gradeManager.getPointsEarnedSortedAllGradeRecords(persistentGradebook.getId());\n        // There should be six grade records for these students\n        Assert.assertTrue(allGradeRecords.size() == 6);\n\n        // Create a new, smaller set of enrollments and ensure the smaller set of grade records are selected correctly\n        Set filteredEnrollments = new HashSet();\n        filteredEnrollments.add(new EnrollmentStandalone(new UserStandalone(\"testStudentUserUid1\", null, null, null), persistentGradebook));\n        filteredEnrollments.add(new EnrollmentStandalone(new UserStandalone(\"testStudentUserUid2\", null, null, null), persistentGradebook));\n        List filteredGradeRecords = gradeManager.getPointsEarnedSortedAllGradeRecords(persistentGradebook.getId(), FacadeUtils.getStudentUids(filteredEnrollments));\n\n        // There should be four grade records for these students\n        Assert.assertTrue(filteredGradeRecords.size() == 4);\n\n        // There should be two grade records for these students and for this assignment\n        filteredGradeRecords = gradeManager.getPointsEarnedSortedGradeRecords(persistentAssignment, FacadeUtils.getStudentUids(filteredEnrollments));\n        Assert.assertTrue(filteredGradeRecords.size() == 2);\n    }","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void testGradeEvents() throws Exception {\n        Gradebook gradebook = gradebookManager.getGradebook(this.getClass().getName());\n        Long asgId = gradableObjectManager.createAssignment(gradebook.getId(), \"GradingEvent Test\", new Double(10), new Date());\n        Assignment assignment = (Assignment)gradableObjectManager.getAssignments(gradebook.getId()).get(0);\n\n        String studentId = \"student1\";\n        Set enrollments = new HashSet();\n        enrollments.add(new EnrollmentStandalone(new UserStandalone(studentId, null, null, null), gradebook));\n\n        // Create a map of studentUserUids to grades\n        Map map = new HashMap();\n        map.put(studentId, new Double(9));\n\n        // Saven the grades\n        gradeManager.updateAssignmentGradeRecords(asgId, map);\n\n        // Update the grades\n        map.put(studentId, new Double(10));\n        gradeManager.updateAssignmentGradeRecords(asgId, map);\n\n        // Ensure that there are two grading events for this student\n        GradingEvents events = gradeManager.getGradingEvents(assignment, enrollments);\n        Assert.assertEquals(events.getEvents(studentId).size(), 2);\n    }","id":105164,"modified_method":"public void testGradeEvents() throws Exception {\n        Gradebook gradebook = gradebookManager.getGradebook(this.getClass().getName());\n        Long asgId = gradableObjectManager.createAssignment(gradebook.getId(), \"GradingEvent Test\", new Double(10), new Date());\n        Assignment assignment = (Assignment)gradableObjectManager.getAssignments(gradebook.getId()).get(0);\n\n        String studentId = \"student1\";\n        Set enrollments = new HashSet();\n        enrollments.add(new EnrollmentStandalone(new UserStandalone(studentId, null, null, null), gradebook));\n\n        // Create a map of studentUserUids to grades\n        GradeRecordSet gradeRecordSet = new GradeRecordSet(assignment);\n        gradeRecordSet.addGradeRecord(new AssignmentGradeRecord(assignment, studentId, \"teacherId\", new Double(9)));\n\n        // Save the grades\n        gradeManager.updateAssignmentGradeRecords(gradeRecordSet);\n\n        // Update the grades (make sure we grab them from the db, first)\n        Set students = new HashSet();\n        students.add(studentId);\n        List persistentGradeRecords = gradeManager.getPointsEarnedSortedGradeRecords(assignment, students);\n        \n        gradeRecordSet = new GradeRecordSet(assignment);\n        AssignmentGradeRecord gradeRecord = (AssignmentGradeRecord)persistentGradeRecords.get(0);\n        gradeRecord.setPointsEarned(new Double(10));\n        gradeRecordSet.addGradeRecord(gradeRecord);\n\n        gradeManager.updateAssignmentGradeRecords(gradeRecordSet);\n\n        \n\n        // Ensure that there are two grading events for this student\n        GradingEvents events = gradeManager.getGradingEvents(assignment, enrollments);\n        Assert.assertEquals(events.getEvents(studentId).size(), 2);\n    }","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n     * @see org.springframework.test.AbstractTransactionalSpringContextTests#onSetUpInTransaction()\n     */\n    protected void onSetUpInTransaction() throws Exception {\n        super.onSetUpInTransaction();\n\n        // Use this test class name as the ID for the gradebook\n        String className = this.getClass().getName();\n        gradebookService.addGradebook(className, className);\n        \n        // Add an internal assignment\n        Long gbId = gradebookManager.getGradebook(className).getId();\n        gradableObjectManager.createAssignment(gbId, ASN_1, new Double(10), null);\n\n        // Add a score for the internal assignment\n        List assignments = gradableObjectManager.getAssignments(gbId);\n        Assignment asn = null;\n        for(Iterator iter = assignments.iterator(); iter.hasNext();) {\n            Assignment tmp = (Assignment)iter.next();\n            if(tmp.getName().equals(ASN_1)) {\n                asn = tmp;\n                break;\n            }\n        }\n        Map map = new HashMap();\n        map.put(\"student1\", new Double(10));\n        gradeManager.updateAssignmentGradeRecords(asn.getId(), map);\n    }","id":105165,"modified_method":"/**\n     * @see org.springframework.test.AbstractTransactionalSpringContextTests#onSetUpInTransaction()\n     */\n    protected void onSetUpInTransaction() throws Exception {\n        super.onSetUpInTransaction();\n    }","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void testPopulate() throws Exception {\n        List gradebooks = new ArrayList();\n\n\n        // Fetch the first gradebook.\n        Gradebook gb = gradebookManager.getGradebook(TestGradebookLoader.GRADEBOOK_WITH_GRADES);\n\n\t\tSet enrollments = courseManagement.getEnrollments(gb.getUid());\n\t\tList assignments = gradableObjectManager.getAssignments(gb.getId());\n\n\t\tfor(Iterator asnIter = assignments.iterator(); asnIter.hasNext();) {\n\t\t\tAssignment asn = (Assignment)asnIter.next();\n\n\t\t\t// Don't add grades for at least one assignment.\n\t\t\tif (asn.getName().equals(TestGradebookLoader.ASN_NO_DUE_DATE_NAME)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tMap map = new HashMap(); // Stores studentId->grade\n\t\t\tfor(Iterator enrIter = enrollments.iterator(); enrIter.hasNext();) {\n\t\t\t\tEnrollment enr = (Enrollment)enrIter.next();\n                // Don't add grades for those no good lazy students\n                if(!enr.getUser().getUserUid().equals(UserLoader.AUTHID_WITHOUT_GRADES_1) &&\n                        !enr.getUser().getUserUid().equals(UserLoader.AUTHID_WITHOUT_GRADES_2)) {\n                    Double grade = new Double(Math.ceil(asn.getPointsPossible().doubleValue() * Math.random()));\n                    if(asn.isExternallyMaintained()) {\n                        gradebookService.updateExternalAssessmentScore(gb.getUid(), asn.getExternalId(), enr.getUser().getUserUid(), grade);\n                    } else {\n                        map.put(enr.getUser().getUserUid(), grade);\n                    }\n                }\n\t\t\t}\n\n            // Save the internal assignment scores\n            if(!asn.isExternallyMaintained()) {\n            \tgradeManager.updateAssignmentGradeRecords(asn.getId(), map);\n            }\n\t\t}\n        // Ensure that this is actually saved to the database\n        setComplete();\n\t}","id":105166,"modified_method":"public void testPopulate() throws Exception {\n        List gradebooks = new ArrayList();\n\n\n        // Fetch the first gradebook.\n        Gradebook gb = gradebookManager.getGradebook(TestGradebookLoader.GRADEBOOK_WITH_GRADES);\n\n\t\tSet enrollments = courseManagement.getEnrollments(gb.getUid());\n\t\tList assignments = gradableObjectManager.getAssignments(gb.getId());\n\n\t\tfor(Iterator asnIter = assignments.iterator(); asnIter.hasNext();) {\n\t\t\tAssignment asn = (Assignment)asnIter.next();\n\n\t\t\t// Don't add grades for at least one assignment.\n\t\t\tif (asn.getName().equals(TestGradebookLoader.ASN_NO_DUE_DATE_NAME)) {\n\t\t\t\tcontinue;\n\t\t\t}\n            \n            GradeRecordSet gradeRecordSet = new GradeRecordSet(asn);\n\t\t\tfor(Iterator enrIter = enrollments.iterator(); enrIter.hasNext();) {\n\t\t\t\tEnrollment enr = (Enrollment)enrIter.next();\n                // Don't add grades for those no good lazy students\n                if(!enr.getUser().getUserUid().equals(UserLoader.AUTHID_WITHOUT_GRADES_1) &&\n                        !enr.getUser().getUserUid().equals(UserLoader.AUTHID_WITHOUT_GRADES_2)) {\n                    Double grade = new Double(Math.ceil(asn.getPointsPossible().doubleValue() * Math.random()));\n                    if(asn.isExternallyMaintained()) {\n                        gradebookService.updateExternalAssessmentScore(gb.getUid(), asn.getExternalId(), enr.getUser().getUserUid(), grade);\n                    } else {\n                        gradeRecordSet.addGradeRecord(new AssignmentGradeRecord(asn, enr.getUser().getUserUid(), \"testId\", grade));\n                    }\n                }\n\t\t\t}\n\n            // Save the internal assignment scores\n            if(!asn.isExternallyMaintained()) {\n            \tgradeManager.updateAssignmentGradeRecords(gradeRecordSet);\n            }\n\t\t}\n        // Ensure that this is actually saved to the database\n        setComplete();\n\t}","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * @see org.sakaiproject.tool.gradebook.facades.User#getSortName()\n\t */\n\tpublic String getSortName() {\n        return sakaiUser.getSortName();\n\t}","id":105167,"modified_method":"/**\n\t * @see org.sakaiproject.tool.gradebook.facades.User#getSortName()\n\t */\n\tpublic String getSortName() {\n        return sortName;\n\t}","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * @see org.sakaiproject.tool.gradebook.facades.User#getDisplayUid()\n\t */\n\tpublic String getDisplayUid() {\n        return sakaiUser.getEmail();\n\t}","id":105168,"modified_method":"/**\n\t * @see org.sakaiproject.tool.gradebook.facades.User#getDisplayUid()\n\t */\n\tpublic String getDisplayUid() {\n        return displayUid;\n\t}","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * @see org.sakaiproject.tool.gradebook.facades.User#getUserUid()\n\t */\n\tpublic String getUserUid() {\n\t\treturn sakaiUser.getId();\n\t}","id":105169,"modified_method":"/**\n\t * @see org.sakaiproject.tool.gradebook.facades.User#getUserUid()\n\t */\n\tpublic String getUserUid() {\n\t\treturn userUid;\n\t}","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * @see org.sakaiproject.tool.gradebook.facades.User#getDisplayName()\n\t */\n\tpublic String getDisplayName() {\n        return sakaiUser.getDisplayName();\n\t}","id":105170,"modified_method":"/**\n\t * @see org.sakaiproject.tool.gradebook.facades.User#getDisplayName()\n\t */\n\tpublic String getDisplayName() {\n        return displayName;\n\t}","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n     * Create a UserSakai2Impl for consumption in the gradebook based on sakai's\n     * User object.\n     *  \n     * @param sakaiUser\n     */\n    public UserSakai2Impl(org.sakaiproject.service.legacy.user.User sakaiUser) {\n        this.sakaiUser = sakaiUser;\n    }","id":105171,"modified_method":"/**\n     * Create a UserSakai2Impl for consumption in the gradebook based on sakai's\n     * User object.\n     *  \n     * @param sakaiUser\n     */\n    public UserSakai2Impl(org.sakaiproject.service.legacy.user.User sakaiUser) {\n        this.userUid = sakaiUser.getId();\n        this.sortName = sakaiUser.getSortName();\n        this.displayName = sakaiUser.getDisplayName();\n        this.displayUid = sakaiUser.getEmail();\n    }","commit_id":"0530d976772d0b8b64cb917013bdb5fe42e8eca0","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void setIncludesubfolders(boolean includesubfolders) \r\n\t{\n\t\tthis.includesubfolders = includesubfolders;\n\t}","id":105172,"modified_method":"public void setIncludeSubfolders(boolean includeSubfolders) \r\n\t{\n\t\tthis.includeSubfolders = includeSubfolders;\n\t}","commit_id":"d268ebc0825f2ed3a2e2e82ac999e0b2ac3bdcfb","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public boolean isIgnoreErreurs() {\n\t\treturn ignoreerreurs;\n\t}","id":105173,"modified_method":"public boolean isIgnoreErrors() {\n\t\treturn ignoreErrors;\n\t}","commit_id":"d268ebc0825f2ed3a2e2e82ac999e0b2ac3bdcfb","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public Result execute(Result result, int nr, Repository rep, Job parentJob)\n\t{\n\t\tLogWriter log = LogWriter.getInstance();\n\n\t\tList rows = result.getRows();\n\t\tRow resultRow = null;\r\n\r\n\t\tboolean resultat=true ;\t\n\t\tboolean execResultat;\n\t\t\n\r\n\t\tString args[] = arguments;\n\t\tString fmasks[] = filemasks;\n\t\tresult.setResult( true );\n\n\t\t\n\t\tresultat=true;\n\t\t\n\t\tif (argFromPrevious)\n\t\t{\n\t\t\tlog.logDetailed(toString(), \"Found \"+(rows!=null?rows.size():0)+\" previous result rows\");\n\t\t}\n\n\t\t\t\r\n\t\t\tif (argFromPrevious && rows!=null) // Copy the input row to the (command line) arguments\r\n\t\t\t{\r\n\t\t\t\t\r\n\t\t\t\tfor (int iteration=0;iteration<rows.size();iteration++) \r\n\t\t\t\t{\r\n\t\t\t\t\tresultRow = (Row) rows.get(iteration);\r\n\t\t\t\t\targs = new String[resultRow.size()];\r\n\t\t\t\t\tfmasks = new String[resultRow.size()];\r\n\r\n\t\t\t\t\t//for (int i=0;i<resultRow.size();i++)\r\n\t\t\t\t\t//{\r\n\t\t\t\t\targs[iteration] = resultRow.getValue(0).getString();\r\n\t\t\t\t\tfmasks[iteration] = resultRow.getValue(1).getString();\r\n\r\n\t\t\t\t\tif(resultat)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// ok we can process this file/folder\r\n\t\r\n\t\t\t\t\t\tlog.logDetailed(toString(), \"Processing row [\"  + args[iteration] + \"]..wildcard [\"+ fmasks[iteration]+\"] ?\");\r\n\r\n\t\t\t\t\t\tif(! ProcessFile(args[iteration],fmasks[iteration]))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tresultat=false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlog.logDetailed(toString(), \"Ignoring row [\"  + args[iteration] + \"]..wildcard [\"+ fmasks[iteration]+\"] ?\");\r\n\t\t\t\t\t}\r\n\t\t\t\t\t\r\n\t\t\t\t\t//}\r\n\r\n\t\t\t\t}\r\n\t\t\r\n\t\t\t}\r\n\t\t\telse if (arguments!=null)\n\t\t\t{\n\t\t\t\t\r\n\t\t\t\tfor (int i=0;i<arguments.length;i++)\r\n\t\t\t\t{\r\n\t\t\t\t\tif(resultat)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// ok we can process this file/folder\r\n\t\t\t\t\t\tlog.logDetailed(toString(), \"Processing argument [\"  + arguments[i] + \"].. wildcard [\"+ filemasks[i]+\"] ?\");\r\n\t\t\t\t\t\tif(!ProcessFile(arguments[i],filemasks[i]))\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tresultat=false;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\telse\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tlog.logDetailed(toString(), \"Ignoring argument [\"  + arguments[i] + \"].. wildcard [\"+ filemasks[i]+\"] ?\");\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t}\n\n\t\t\t}\r\n\t\t\r\n\t\tif(!resultat && ignoreerreurs)\r\n\t\t{\r\n\t\t\tresult.setResult( false );\r\n\t\t\tresult.setNrErrors(1);\r\n\t\t}\r\n\t\t\r\n\n\n\t\tresult.setResult( resultat );\n\n\t\t\n\t\treturn result;\n\t}","id":105174,"modified_method":"public Result execute(Result result, int nr, Repository rep, Job parentJob)\n\t{\n\t\tLogWriter log = LogWriter.getInstance();\n\n\t\tList rows = result.getRows();\n\t\tRow resultRow = null;\r\n\r\n\t\tboolean rcode=true ;\t\n\r\n\t\tString args[] = arguments;\n\t\tString fmasks[] = filemasks;\n\t\tresult.setResult( true );\n\t\t\n\t\trcode=true;\n\t\t\n\t\tif (argFromPrevious)\n\t\t{\n\t\t    log.logDetailed(toString(), \"Found \"+(rows!=null?rows.size():0)+\" previous result rows\");\n\t\t}\n\n\t\tif (argFromPrevious && rows!=null) // Copy the input row to the (command line) arguments\r\n\t\t{\r\n\t\t\tfor (int iteration=0;iteration<rows.size();iteration++) \r\n\t\t\t{\r\n\t\t\t\tresultRow = (Row) rows.get(iteration);\r\n\t\t\t\targs = new String[resultRow.size()];\r\n\t\t\t\tfmasks = new String[resultRow.size()];\r\n\r\n\t\t\t\targs[iteration] = resultRow.getValue(0).getString();\r\n\t\t\t\tfmasks[iteration] = resultRow.getValue(1).getString();\r\n\r\n\t\t\t\tif(rcode)\r\n\t\t\t\t{\r\n\t\t\t\t\t// ok we can process this file/folder\r\n\t\t\t\t\tlog.logDetailed(toString(), \"Processing row [\"  + args[iteration] + \"]..wildcard [\"+ fmasks[iteration]+\"] ?\");\r\n\r\n\t\t\t\t\tif(! ProcessFile(args[iteration],fmasks[iteration]))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trcode=false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tlog.logDetailed(toString(), \"Ignoring row [\"  + args[iteration] + \"]..wildcard [\"+ fmasks[iteration]+\"] ?\");\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\telse if (arguments!=null)\n\t\t{\r\n\t\t\tfor (int i=0;i<arguments.length;i++)\r\n\t\t\t{\r\n\t\t\t\tif(rcode)\r\n\t\t\t\t{\r\n\t\t\t\t\t// ok we can process this file/folder\r\n\t\t\t\t\tlog.logDetailed(toString(), \"Processing argument [\"  + arguments[i] + \"].. wildcard [\"+ filemasks[i]+\"] ?\");\r\n\t\t\t\t\tif(!ProcessFile(arguments[i],filemasks[i]))\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\trcode=false;\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\telse\r\n\t\t\t\t{\r\n\t\t\t\t\tlog.logDetailed(toString(), \"Ignoring argument [\"  + arguments[i] + \"].. wildcard [\"+ filemasks[i]+\"] ?\");\r\n\t\t\t\t}\r\n\r\n\t\t\t}\n\t\t}\t\t\r\n\t\tif(!rcode && ignoreErrors)\r\n\t\t{\r\n\t\t\tresult.setResult( false );\r\n\t\t\tresult.setNrErrors(1);\r\n\t\t}\r\n\n\t\tresult.setResult( rcode );\n\t\t\n\t\treturn result;\n\t}","commit_id":"d268ebc0825f2ed3a2e2e82ac999e0b2ac3bdcfb","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public boolean traverseDescendents(FileSelectInfo info) \r\n\t\t{\n\t\t\treturn includesubfolders;\n\t\t}","id":105175,"modified_method":"public boolean traverseDescendents(FileSelectInfo info) \r\n\t\t{\n\t\t\treturn includeSubfolders;\n\t\t}","commit_id":"d268ebc0825f2ed3a2e2e82ac999e0b2ac3bdcfb","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public boolean includeFile(FileSelectInfo info) \r\n\t\t{\n\t\t\tboolean retour=false;\n\t\t\ttry\n\t\t\t{\n\t\t\t\t\n\t\t\t\tString extension=info.getFile().getName().getExtension();\n\t\t\t\tif (extension.equals(fileExtension) ||  Const.isEmpty(fileExtension))\n\t\t\t\t{\n\t\t\t\t\tif (info.getFile().getType() == FileType.FOLDER)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (deletefolder && includesubfolders)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tretour= true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tretour= false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tretour= true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tretour= false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) \r\n\t\t\t{\n\t\t\t\tlog.logError(toString(), \"Error, exception: \" + e.getMessage());\n\t\t\t\t\t\n\t\t\t}\n\t\t\treturn retour;\n\n\t\t}","id":105176,"modified_method":"public boolean includeFile(FileSelectInfo info) \r\n\t\t{\n\t\t\tboolean rcode=false;\n\t\t\ttry\n\t\t\t{\n\t\t\t\tString extension=info.getFile().getName().getExtension();\n\t\t\t\tif (extension.equals(fileExtension) ||  Const.isEmpty(fileExtension))\n\t\t\t\t{\n\t\t\t\t\tif (info.getFile().getType() == FileType.FOLDER)\n\t\t\t\t\t{\n\t\t\t\t\t\tif (deleteFolder && includeSubfolders)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trcode= true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\trcode= false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\trcode= true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\trcode= false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) \r\n\t\t\t{\n\t\t\t\tlog.logError(toString(), \"Error exception: \" + e.getMessage());\t\t\t\t\n\t\t\t}\n\t\t\treturn rcode;\n\t\t}","commit_id":"d268ebc0825f2ed3a2e2e82ac999e0b2ac3bdcfb","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void loadXML(Node entrynode, ArrayList databases, Repository rep)\n\t\tthrows KettleXMLException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.loadXML(entrynode, databases);\n\t\t\tignoreerreurs = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"ignoreerreurs\"));\n\t\t\targFromPrevious = \"Y\".equalsIgnoreCase( XMLHandler.getTagValue(entrynode, \"arg_from_previous\") );\r\n\t\t\tdeletefolder = \"Y\".equalsIgnoreCase( XMLHandler.getTagValue(entrynode, \"deletefolder\") );\r\n\t\t\tincludesubfolders = \"Y\".equalsIgnoreCase( XMLHandler.getTagValue(entrynode, \"includesubfolders\") );\r\n\t\n\t\t\t// How many arguments?\r\n\t\t\tint argnr = 0;\r\n\t\t\twhile ( XMLHandler.getTagValue(entrynode, \"name\"+argnr)!=null) \targnr++;\r\n\t\t\targuments = new String[argnr];\r\n\t\t\tfilemasks = new String[argnr];\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// Read them all...\r\n\t\t\tfor (int a=0;a<argnr;a++) \n\t\t\t{\n\t\t\t\targuments[a]=XMLHandler.getTagValue(entrynode, \"name\"+a);\n\t\t\t\tfilemasks[a]=XMLHandler.getTagValue(entrynode, \"Filemask\"+a);\n\n\t\t\t}\n\n\n\t\t}\n\t\tcatch(KettleXMLException xe)\n\t\t{\n\t\t\tthrow new KettleXMLException(\"Unable to load job entry of type 'delete file' from XML node\", xe);\n\t\t}\n\t}","id":105177,"modified_method":"public void loadXML(Node entrynode, ArrayList databases, Repository rep)\n\t\tthrows KettleXMLException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.loadXML(entrynode, databases);\n\t\t\tignoreErrors = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode,       \"ignore_errors\"));\n\t\t\targFromPrevious = \"Y\".equalsIgnoreCase( XMLHandler.getTagValue(entrynode,   \"arg_from_previous\") );\r\n\t\t\tdeleteFolder = \"Y\".equalsIgnoreCase( XMLHandler.getTagValue(entrynode,      \"delete_folder\") );\r\n\t\t\tincludeSubfolders = \"Y\".equalsIgnoreCase( XMLHandler.getTagValue(entrynode, \"include_subfolders\") );\r\n\t\n\t\t\t// How many arguments?\r\n\t\t\tint argnr = 0;\r\n\t\t\twhile ( XMLHandler.getTagValue(entrynode, \"name\"+argnr)!=null) \targnr++;\r\n\t\t\targuments = new String[argnr];\r\n\t\t\tfilemasks = new String[argnr];\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t// Read them all...\r\n\t\t\tfor (int a=0;a<argnr;a++) \n\t\t\t{\n\t\t\t\targuments[a]=XMLHandler.getTagValue(entrynode, \"name\"+a);\n\t\t\t\tfilemasks[a]=XMLHandler.getTagValue(entrynode, \"filemask\"+a);\n\n\t\t\t}\n\t\t}\n\t\tcatch(KettleXMLException xe)\n\t\t{\n\t\t\tthrow new KettleXMLException(\"Unable to load job entry of type 'delete files' from XML node\", xe);\n\t\t}\n\t}","commit_id":"d268ebc0825f2ed3a2e2e82ac999e0b2ac3bdcfb","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String getXML()\n\t{\n        StringBuffer retval = new StringBuffer(50);\n\t\t\n\t\tretval.append(super.getXML());\t\t\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"ignoreerreurs\", ignoreerreurs));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"arg_from_previous\", argFromPrevious));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"deletefolder\", deletefolder));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"includesubfolders\", includesubfolders));\r\n\t\t\r\n\n\t\tif (arguments!=null)\r\n\t\t\tfor (int i=0;i<arguments.length;i++)\r\n\t\t\t{\r\n\t\t\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"name\"+i, arguments[i]));\r\n\t\t\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"Filemask\"+i, filemasks[i]));\r\n\t\t\t}\r\n\r\n\r\n\r\n\t\t\n\t\treturn retval.toString();\n\t}","id":105178,"modified_method":"public String getXML()\n\t{\n        StringBuffer retval = new StringBuffer(300);\n\t\t\n\t\tretval.append(super.getXML());\t\t\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"ignore_errors\",      ignoreErrors));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"arg_from_previous\",  argFromPrevious));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"delete_folder\",      deleteFolder));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"include_subfolders\", includeSubfolders));\r\n\t\t\r\n\n\t\tif (arguments!=null)\n\t\t{\r\n\t\t\tfor (int i=0;i<arguments.length;i++)\r\n\t\t\t{\r\n\t\t\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"name\"+i,     arguments[i]));\r\n\t\t\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"filemask\"+i, filemasks[i]));\r\n\t\t\t}\n\t\t}\r\n\t\t\n\t\treturn retval.toString();\n\t}","commit_id":"d268ebc0825f2ed3a2e2e82ac999e0b2ac3bdcfb","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void setDeleteFolder(boolean deletefolder) \r\n\t{\n\t\tthis.deletefolder = deletefolder;\n\t}","id":105179,"modified_method":"public void setDeleteFolder(boolean deleteFolder) \r\n\t{\n\t\tthis.deleteFolder = deleteFolder;\n\t}","commit_id":"d268ebc0825f2ed3a2e2e82ac999e0b2ac3bdcfb","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public JobEntryDeleteFiles(String n)\n\t{\n\t\tsuper(n, \"\");\n\t\tfilename=null;\n\t\tignoreerreurs=false;\n\t\targFromPrevious=false;\n\t\targuments=null;\n\t\tdeletefolder=false;\n\t\tincludesubfolders=false;\t\n\t\tsetID(-1L);\n\t\tsetType(JobEntryInterface.TYPE_JOBENTRY_DELETE_FILES);\n\t}","id":105180,"modified_method":"public JobEntryDeleteFiles(String n)\n\t{\n\t\tsuper(n, \"\");\n\t\tignoreErrors=false;\n\t\targFromPrevious=false;\n\t\targuments=null;\n\t\tdeleteFolder=false;\n\t\tincludeSubfolders=false;\t\n\t\tsetID(-1L);\n\t\tsetType(JobEntryInterface.TYPE_JOBENTRY_DELETE_FILES);\n\t}","commit_id":"d268ebc0825f2ed3a2e2e82ac999e0b2ac3bdcfb","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void saveRep(Repository rep, long id_job)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.saveRep(rep, id_job);\n\t\t\t\n            rep.saveJobEntryAttribute(id_job, getID(), \"ignoreerreurs\", ignoreerreurs);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"arg_from_previous\", argFromPrevious);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"deletefolder\", deletefolder);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"includesubfolders\", includesubfolders);\r\n\t\t\t\r\n\t\n\t\t\t// save the arguments...\r\n\t\t\tif (arguments!=null)\r\n\t\t\t{\r\n\t\t\t\tfor (int i=0;i<arguments.length;i++) \r\n\t\t\t\t{\r\n\t\t\t\t\trep.saveJobEntryAttribute(id_job, getID(), i, \"argument\", arguments[i]);\r\n\t\t\t\t\trep.saveJobEntryAttribute(id_job, getID(), i, \"filemask\", filemasks[i]);\r\n\t\t\t\t}\r\n\t\t\t}\n\t\t}\n\t\tcatch(KettleDatabaseException dbe)\n\t\t{\n\t\t\tthrow new KettleException(\"Unable to save job entry of type 'delete file' to the repository for id_job=\"+id_job, dbe);\n\t\t}\n\t}","id":105181,"modified_method":"public void saveRep(Repository rep, long id_job)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.saveRep(rep, id_job);\n\t\t\t\n            rep.saveJobEntryAttribute(id_job, getID(), \"ignore_errors\",      ignoreErrors);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"arg_from_previous\",  argFromPrevious);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"delete_folder\",      deleteFolder);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"include_subfolders\", includeSubfolders);\r\n\t\t\t\r\n\t\t\t// save the arguments...\r\n\t\t\tif (arguments!=null)\r\n\t\t\t{\r\n\t\t\t\tfor (int i=0;i<arguments.length;i++) \r\n\t\t\t\t{\r\n\t\t\t\t\trep.saveJobEntryAttribute(id_job, getID(), i, \"argument\", arguments[i]);\r\n\t\t\t\t\trep.saveJobEntryAttribute(id_job, getID(), i, \"filemask\", filemasks[i]);\r\n\t\t\t\t}\r\n\t\t\t}\n\t\t}\n\t\tcatch(KettleDatabaseException dbe)\n\t\t{\n\t\t\tthrow new KettleException(\"Unable to save job entry of type 'delete files' to the repository for id_job=\"+id_job, dbe);\n\t\t}\n\t}","commit_id":"d268ebc0825f2ed3a2e2e82ac999e0b2ac3bdcfb","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private boolean ProcessFile(String filename,String wildcard)\n\t{\n\t\tLogWriter log = LogWriter.getInstance();\n\n\t\tboolean resultatex= false ;\n\t\tFileObject filefolder = null;\n\t\tString realFilefoldername = StringUtil.environmentSubstitute(filename);\n\t\tString realwilcard = StringUtil.environmentSubstitute(wildcard);\n\n\t\ttry\n\t\t{\n\t\t\tfilefolder = KettleVFS.getFileObject(realFilefoldername);\n\n\t\t\tif ( filefolder.exists() )\n\t\t\t{\n\t\t\t\t// the file or folder exists\n\t\t\t\tif (filefolder.getType() == FileType.FOLDER)\n\t\t\t\t{\n\t\t\t\t\t// it's a folder\n\t\t\t\t\tlog.logDetailed(toString(), \"Processing folder [\"+realFilefoldername+\"]\");\n\t\t\t\t\t// Delete Files\n\t\t\t\t\tint Nr=filefolder.delete(new TextFileSelector(realwilcard));\n\t\t\t\t\tlog.logDetailed(toString(), \"Total deleted subfolders/files = \"+Nr);\n\n\t\t\t\t\tresultatex=true;\n\t\t\t\t\t\t\t\n\t\t\n\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// It's a file\n\t\t\t\t\tlog.logDetailed(toString(), \"Processing file [\"+realFilefoldername+\"]\");\t\n\t\t\t\t\tboolean deleted = filefolder.delete();\n\t\t\t\t\tif ( !deleted )\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.logError(toString(), \"Could not delete file [\"+realFilefoldername+\"].\");\n\n\t\t\t\t\t\t\t\t\t\t\t    \t\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.logBasic(toString(), \"File [\"+filename+\"] deleted!\");\n\t\t\t\t\t\tresultatex=true;\n\t\t\t\t\t}\n\n\n\t\t\t\t}\n\t\t\t\t\n\n\t\t\t}\n\n\t\t\telse\n\t\t\t{\n\n\t\t\t\t// File already deleted, no reason to try to delete it\n\t\t\t\tlog.logBasic(toString(), \"File or folder [\"+realFilefoldername+\"] already deleted.\");\n\n\t\t\t\t\tresultatex=true;\n\t\t\t\t\n\n\t\t\t}\n\t\t\t\t\n\n\t\t}\n\t\t\n\t\tcatch (IOException e) \r\n\t\t{\n\t\t\tlog.logError(toString(), \"Could not process [\"+realFilefoldername+\"], exception: \" + e.getMessage());\n\t\t\t\t\t\n\t\t}\n\t\tfinally \r\n\t\t{\n\t\t\tif ( filefolder != null )\n\t\t\t{\n\t\t\t\ttry  \r\n\t\t\t\t{\n\t\t\t\t\tfilefolder.close();\n\t\t\t\t}\n\t\t\t\tcatch ( IOException ex ) {};\n\t\t\t}\n\t\t\t\n\t\t}\n\t\r\n\t\t\r\n\t\t\r\n            \n\treturn resultatex;\n\t\t\n\t\n\t}","id":105182,"modified_method":"private boolean ProcessFile(String filename,String wildcard)\n\t{\n\t\tLogWriter log = LogWriter.getInstance();\n\n\t\tboolean rcode = false ;\n\t\tFileObject filefolder = null;\n\t\tString realFilefoldername = StringUtil.environmentSubstitute(filename);\n\t\tString realwilcard = StringUtil.environmentSubstitute(wildcard);\n\n\t\ttry\n\t\t{\n\t\t\tfilefolder = KettleVFS.getFileObject(realFilefoldername);\n\n\t\t\tif ( filefolder.exists() )\n\t\t\t{\n\t\t\t\t// the file or folder exists\n\t\t\t\tif (filefolder.getType() == FileType.FOLDER)\n\t\t\t\t{\n\t\t\t\t\t// It's a folder\n\t\t\t\t\tif ( log.isDetailed())\n\t\t\t\t\t    log.logDetailed(toString(), \"Processing folder [\"+realFilefoldername+\"]\");\n\t\t\t\t\t// Delete Files\n\t\t\t\t\tint Nr=filefolder.delete(new TextFileSelector(realwilcard));\n\t\t\t\t\t\n\t\t\t\t\tif ( log.isDetailed())\n\t\t\t\t\t    log.logDetailed(toString(), \"Total deleted subfolders/files = \"+Nr);\n\t\t\t\t\trcode=true;\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// It's a file\n\t\t\t\t\tlog.logDetailed(toString(), \"Processing file [\"+realFilefoldername+\"]\");\t\n\t\t\t\t\tboolean deleted = filefolder.delete();\n\t\t\t\t\tif ( !deleted )\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.logError(toString(), \"Could not delete file [\"+realFilefoldername+\"].\");\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.logBasic(toString(), \"File [\"+filename+\"] deleted!\");\n\t\t\t\t\t\trcode=true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// File already deleted, no reason to try to delete it\n\t\t\t\tlog.logBasic(toString(), \"File or folder [\"+realFilefoldername+\"] already deleted.\");\n\t\t\t\trcode=true;\n\t\t\t}\n\t\t}\t\t\n\t\tcatch (IOException e) \r\n\t\t{\n\t\t\tlog.logError(toString(), \"Could not process [\"+realFilefoldername+\"], exception: \" + e.getMessage());\t\t\t\t\t\n\t\t}\n\t\tfinally \r\n\t\t{\n\t\t\tif ( filefolder != null )\n\t\t\t{\n\t\t\t\ttry  \r\n\t\t\t\t{\n\t\t\t\t\tfilefolder.close();\n\t\t\t\t}\n\t\t\t\tcatch ( IOException ex ) {};\n\t\t\t}\n\t\t}\n\n\t    return rcode;\n\t}","commit_id":"d268ebc0825f2ed3a2e2e82ac999e0b2ac3bdcfb","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void loadRep(Repository rep, long id_jobentry, ArrayList databases)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.loadRep(rep, id_jobentry, databases);\n\t\t\tignoreerreurs = rep.getJobEntryAttributeBoolean(id_jobentry, \"ignoreerreurs\");\n\t\t\targFromPrevious = rep.getJobEntryAttributeBoolean(id_jobentry, \"arg_from_previous\");\r\n\t\t\tdeletefolder = rep.getJobEntryAttributeBoolean(id_jobentry, \"deletefolder\");\r\n\t\t\tincludesubfolders = rep.getJobEntryAttributeBoolean(id_jobentry, \"includesubfolders\");\r\n\t\n\t\t\t// How many arguments?\r\n\t\t\tint argnr = rep.countNrJobEntryAttributes(id_jobentry, \"name\");\r\n\t\t\targuments = new String[argnr];\r\n\t\t\tfilemasks = new String[argnr];\r\n\t\t\t\r\n\t\t\t// Read them all...\r\n\t\t\tfor (int a=0;a<argnr;a++) \r\n\t\t\t{\r\n\t\t\t\targuments[a]= rep.getJobEntryAttributeString(id_jobentry, a, \"name\");\r\n\t\t\t\tfilemasks[a]= rep.getJobEntryAttributeString(id_jobentry, a, \"filemask\");\r\n\t\t\t}\n\t\t}\n\t\tcatch(KettleException dbe)\n\t\t{\n\t\t\tthrow new KettleException(\"Unable to load job entry of type 'delete file' from the repository for id_jobentry=\"+id_jobentry, dbe);\n\t\t}\n\t}","id":105183,"modified_method":"public void loadRep(Repository rep, long id_jobentry, ArrayList databases)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.loadRep(rep, id_jobentry, databases);\n\t\t\tignoreErrors = rep.getJobEntryAttributeBoolean(id_jobentry,      \"ignore_errors\");\n\t\t\targFromPrevious = rep.getJobEntryAttributeBoolean(id_jobentry,   \"arg_from_previous\");\r\n\t\t\tdeleteFolder = rep.getJobEntryAttributeBoolean(id_jobentry,      \"delete_folder\");\r\n\t\t\tincludeSubfolders = rep.getJobEntryAttributeBoolean(id_jobentry, \"include_subfolders\");\r\n\t\n\t\t\t// How many arguments?\r\n\t\t\tint argnr = rep.countNrJobEntryAttributes(id_jobentry, \"name\");\r\n\t\t\targuments = new String[argnr];\r\n\t\t\tfilemasks = new String[argnr];\r\n\t\t\t\r\n\t\t\t// Read them all...\r\n\t\t\tfor (int a=0;a<argnr;a++) \r\n\t\t\t{\r\n\t\t\t\targuments[a]= rep.getJobEntryAttributeString(id_jobentry, a, \"name\");\r\n\t\t\t\tfilemasks[a]= rep.getJobEntryAttributeString(id_jobentry, a, \"filemask\");\r\n\t\t\t}\n\t\t}\n\t\tcatch(KettleException dbe)\n\t\t{\n\t\t\tthrow new KettleException(\"Unable to load job entry of type 'delete files' from the repository for id_jobentry=\"+id_jobentry, dbe);\n\t\t}\n\t}","commit_id":"d268ebc0825f2ed3a2e2e82ac999e0b2ac3bdcfb","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void setIgnoreErreurs(boolean failIfFileExists) {\n\t\tthis.ignoreerreurs = failIfFileExists;\n\t}","id":105184,"modified_method":"public void setIgnoreErrors(boolean ignoreErrors) {\n\t\tthis.ignoreErrors = ignoreErrors;\n\t}","commit_id":"d268ebc0825f2ed3a2e2e82ac999e0b2ac3bdcfb","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\n\t * Copy information from the meta-data input to the dialog fields.\n\t */\n\tpublic void getData()\n\t{\n\t\tif (jobEntry.getName()    != null) wName.setText( jobEntry.getName() );\n\t\twName.selectAll();\n\t\twIgnoreErreurs.setSelection(jobEntry.isIgnoreErreurs());\n\t\t\n\t\tif (jobEntry.arguments != null)\n\t\t{\n\t\t\tfor (int i = 0; i < jobEntry.arguments.length; i++)\n\t\t\t{\n\t\t\t\tTableItem ti = wFields.table.getItem(i);\n\t\t\t\tif (jobEntry.arguments[i] != null)\n\t\t\t\t\tti.setText(1, jobEntry.arguments[i]);\n\t\t\t\t\tif (jobEntry.filemasks[i] != null)\n\t\t\t\t\t\tti.setText(2, jobEntry.filemasks[i]);\n\n\t\t\t}\n\t\t\twFields.setRowNums();\n\t\t\twFields.optWidth(true);\n\t\t}\n\t\twPrevious.setSelection(jobEntry.argFromPrevious);\n\t\twDeleteFolder.setSelection(jobEntry.deletefolder);\n\t\twIncludeSubfolders.setSelection(jobEntry.includesubfolders);\n\n\t}","id":105185,"modified_method":"/**\n\t * Copy information from the meta-data input to the dialog fields.\n\t */\n\tpublic void getData()\n\t{\n\t\tif (jobEntry.getName()    != null) wName.setText( jobEntry.getName() );\n\t\twName.selectAll();\n\t\twIgnoreErrors.setSelection(jobEntry.isIgnoreErrors());\n\t\t\n\t\tif (jobEntry.arguments != null)\n\t\t{\n\t\t\tfor (int i = 0; i < jobEntry.arguments.length; i++)\n\t\t\t{\n\t\t\t\tTableItem ti = wFields.table.getItem(i);\n\t\t\t\tif (jobEntry.arguments[i] != null)\n\t\t\t\t\tti.setText(1, jobEntry.arguments[i]);\n\t\t\t\t\tif (jobEntry.filemasks[i] != null)\n\t\t\t\t\t\tti.setText(2, jobEntry.filemasks[i]);\n\t\t\t}\n\t\t\twFields.setRowNums();\n\t\t\twFields.optWidth(true);\n\t\t}\n\t\twPrevious.setSelection(jobEntry.argFromPrevious);\n\t\twDeleteFolder.setSelection(jobEntry.deleteFolder);\n\t\twIncludeSubfolders.setSelection(jobEntry.includeSubfolders);\n\n\t}","commit_id":"d268ebc0825f2ed3a2e2e82ac999e0b2ac3bdcfb","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public JobEntryInterface open()\n\t{\n\t\tShell parent = getParent();\n\t\tDisplay display = parent.getDisplay();\n\n        shell = new Shell(parent, props.getJobsDialogStyle());\n        props.setLook(shell);\n        JobDialog.setShellImage(shell, jobEntry);\n\t\t\n\t\tModifyListener lsMod = new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t};\n\t\tchanged = jobEntry.hasChanged();\n\n\t\tFormLayout formLayout = new FormLayout ();\n\t\tformLayout.marginWidth  = Const.FORM_MARGIN;\n\t\tformLayout.marginHeight = Const.FORM_MARGIN;\n\n\t\tshell.setLayout(formLayout);\n\t\tshell.setText(Messages.getString(\"JobDeleteFiles.Title\"));\n\n\t\tint middle = props.getMiddlePct();\n\t\tint margin = Const.MARGIN;\n\n\t\t// Filename line\n\t\twlName=new Label(shell, SWT.RIGHT);\n\t\twlName.setText(Messages.getString(\"JobDeleteFiles.Name.Label\"));\n \t\tprops.setLook(wlName);\n\t\tfdlName=new FormData();\n\t\tfdlName.left = new FormAttachment(0, 0);\n\t\tfdlName.right= new FormAttachment(middle, -margin);\n\t\tfdlName.top  = new FormAttachment(0, margin);\n\t\twlName.setLayoutData(fdlName);\n\t\twName=new Text(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n \t\tprops.setLook(wName);\n\t\twName.addModifyListener(lsMod);\n\t\tfdName=new FormData();\n\t\tfdName.left = new FormAttachment(middle, 0);\n\t\tfdName.top  = new FormAttachment(0, margin);\n\t\tfdName.right= new FormAttachment(100, 0);\n\t\twName.setLayoutData(fdName);\n\n\t\t// SETTINGS grouping?\n\t\t// ////////////////////////\n\t\t// START OF SETTINGS GROUP///\n\t\t// /\n\n\t\twSettings = new Group(shell, SWT.SHADOW_NONE);\n\t\tprops.setLook(wSettings);\n\t\twSettings.setText(Messages.getString(\"JobDeleteFiles.Settings.Label\"));\n\n\t\tFormLayout groupLayout = new FormLayout();\n\t\tgroupLayout.marginWidth = 10;\n\t\tgroupLayout.marginHeight = 10;\n\n\t\twSettings.setLayout(groupLayout);\n\n\n\n\n\t\twlIncludeSubfolders = new Label(wSettings, SWT.RIGHT);\r\n\t\twlIncludeSubfolders.setText(Messages.getString(\"JobDeleteFiles.IncludeSubfolders.Label\"));\r\n\t\tprops.setLook(wlIncludeSubfolders);\r\n\t\tfdlIncludeSubfolders = new FormData();\r\n\t\tfdlIncludeSubfolders.left = new FormAttachment(0, 0);\r\n\t\tfdlIncludeSubfolders.top = new FormAttachment(wName, margin);\r\n\t\tfdlIncludeSubfolders.right = new FormAttachment(middle, -margin);\r\n\t\twlIncludeSubfolders.setLayoutData(fdlIncludeSubfolders);\r\n\t\twIncludeSubfolders = new Button(wSettings, SWT.CHECK);\r\n\t\tprops.setLook(wIncludeSubfolders);\r\n\t\twIncludeSubfolders.setToolTipText(Messages.getString(\"JobDeleteFiles.IncludeSubfolders.Tooltip\"));\r\n\t\tfdIncludeSubfolders = new FormData();\r\n\t\tfdIncludeSubfolders.left = new FormAttachment(middle, 0);\r\n\t\tfdIncludeSubfolders.top = new FormAttachment(wName, margin);\r\n\t\tfdIncludeSubfolders.right = new FormAttachment(100, 0);\r\n\t\twIncludeSubfolders.setLayoutData(fdIncludeSubfolders);\r\n\t\twIncludeSubfolders.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t\tUseSubFolder();\r\n\t\t\t}\r\n\t\t});\r\n\n\t\t\n\t\t// DeleteFolder Option : If selected, files won't be deleted\n\t\twlDeleteFolder = new Label(wSettings, SWT.RIGHT);\r\n\t\twlDeleteFolder.setText(Messages.getString(\"JobDeleteFiles.DeleteFolder.Label\"));\r\n\t\tprops.setLook(wlDeleteFolder);\r\n\t\tfdlDeleteFolder = new FormData();\r\n\t\tfdlDeleteFolder.left = new FormAttachment(0, 0);\r\n\t\tfdlDeleteFolder.top = new FormAttachment(wIncludeSubfolders, margin);\r\n\t\tfdlDeleteFolder.right = new FormAttachment(middle, -margin);\r\n\t\twlDeleteFolder.setLayoutData(fdlDeleteFolder);\r\n\t\twDeleteFolder = new Button(wSettings, SWT.CHECK);\r\n\t\tprops.setLook(wDeleteFolder);\r\n\t\twDeleteFolder.setToolTipText(Messages.getString(\"JobDeleteFiles.DeleteFolder.Tooltip\"));\r\n\t\tfdDeleteFolder = new FormData();\r\n\t\tfdDeleteFolder.left = new FormAttachment(middle, 0);\r\n\t\tfdDeleteFolder.top = new FormAttachment(wIncludeSubfolders, margin);\r\n\t\tfdDeleteFolder.right = new FormAttachment(100, 0);\r\n\t\twDeleteFolder.setLayoutData(fdDeleteFolder);\r\n\t\twDeleteFolder.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t}\r\n\t\t});\n\n\n\n\t\twlIgnoreErreurs = new Label(wSettings, SWT.RIGHT);\n\t\twlIgnoreErreurs.setText(Messages.getString(\"JobDeleteFiles.IgnoreErreurs.Label\"));\n\t\tprops.setLook(wlIgnoreErreurs);\n\t\tfdlIgnoreErreurs = new FormData();\n\t\tfdlIgnoreErreurs.left = new FormAttachment(0, 0);\n\t\tfdlIgnoreErreurs.top = new FormAttachment(wDeleteFolder, margin);\n\t\tfdlIgnoreErreurs.right = new FormAttachment(middle, -margin);\n\t\twlIgnoreErreurs.setLayoutData(fdlIgnoreErreurs);\n\t\twIgnoreErreurs = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wIgnoreErreurs);\n\t\twIgnoreErreurs.setToolTipText(Messages.getString(\"JobDeleteFiles.IgnoreErreurs.Tooltip\"));\n\t\tfdIgnoreErreurs = new FormData();\n\t\tfdIgnoreErreurs.left = new FormAttachment(middle, 0);\n\t\tfdIgnoreErreurs.top = new FormAttachment(wDeleteFolder, margin);\n\t\tfdIgnoreErreurs.right = new FormAttachment(100, 0);\n\t\twIgnoreErreurs.setLayoutData(fdIgnoreErreurs);\n\t\twIgnoreErreurs.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\n\n\n\t\n\t\twlPrevious = new Label(wSettings, SWT.RIGHT);\n\t\twlPrevious.setText(Messages.getString(\"JobDeleteFiles.Previous.Label\"));\n\t\tprops.setLook(wlPrevious);\n\t\tfdlPrevious = new FormData();\n\t\tfdlPrevious.left = new FormAttachment(0, 0);\n\t\tfdlPrevious.top = new FormAttachment(wIgnoreErreurs, margin );\n\t\tfdlPrevious.right = new FormAttachment(middle, -margin);\n\t\twlPrevious.setLayoutData(fdlPrevious);\n\t\twPrevious = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wPrevious);\n\t\twPrevious.setSelection(jobEntry.argFromPrevious);\n\t\twPrevious.setToolTipText(Messages.getString(\"JobDeleteFiles.Previous.Tooltip\"));\n\t\tfdPrevious = new FormData();\n\t\tfdPrevious.left = new FormAttachment(middle, 0);\n\t\tfdPrevious.top = new FormAttachment(wIgnoreErreurs, margin );\n\t\tfdPrevious.right = new FormAttachment(100, 0);\n\t\twPrevious.setLayoutData(fdPrevious);\n\t\twPrevious.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.argFromPrevious = !jobEntry.argFromPrevious;\n\t\t\t\tjobEntry.setChanged();\n\t\t\t\twlFields.setEnabled(!jobEntry.argFromPrevious);\n\t\t\t\twFields.setEnabled(!jobEntry.argFromPrevious);\n\t\t\t}\n\t\t});\n\t\tfdSettings = new FormData();\n\t\tfdSettings.left = new FormAttachment(0, margin);\n\t\tfdSettings.top = new FormAttachment(wName, margin);\n\t\tfdSettings.right = new FormAttachment(100, -margin);\n\t\twSettings.setLayoutData(fdSettings);\n\t\t\n\t\t// ///////////////////////////////////////////////////////////\n\t\t// / END OF SETTINGS GROUP\n\t\t// ///////////////////////////////////////////////////////////\n\n\t\t// Filename line\n\t\twlFilename=new Label(shell, SWT.RIGHT);\n\t\twlFilename.setText(Messages.getString(\"JobDeleteFiles.Filename.Label\"));\n\t\tprops.setLook(wlFilename);\n\t\tfdlFilename=new FormData();\n\t\tfdlFilename.left = new FormAttachment(0, 0);\n\t\tfdlFilename.top  = new FormAttachment(wSettings, 2*margin);\n\t\tfdlFilename.right= new FormAttachment(middle, -margin);\n\t\twlFilename.setLayoutData(fdlFilename);\n\n\t\twbFilename=new Button(shell, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbFilename);\n\t\twbFilename.setText(Messages.getString(\"System.Button.Browse\"));\n\t\tfdbFilename=new FormData();\n\t\tfdbFilename.right= new FormAttachment(100, 0);\n\t\tfdbFilename.top  = new FormAttachment(wSettings, margin);\n\t\twbFilename.setLayoutData(fdbFilename);\n\n\n\t\twbaFilename=new Button(shell, SWT.PUSH| SWT.CENTER);\r\n\t\tprops.setLook(wbaFilename);\r\n\t\twbaFilename.setText(Messages.getString(\"JobDeleteFiles.FilenameAdd.Button\"));\r\n\t\tfdbaFilename=new FormData();\r\n\t\tfdbaFilename.right= new FormAttachment(wbFilename, -margin);\r\n\t\tfdbaFilename.top  = new FormAttachment(wSettings, margin);\r\n\t\twbaFilename.setLayoutData(fdbaFilename);\n\n\n\n\t\twFilename=new TextVar(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wFilename);\n\t\twFilename.addModifyListener(lsMod);\n\t\tfdFilename=new FormData();\n\t\tfdFilename.left = new FormAttachment(middle, 0);\n\t\tfdFilename.top  = new FormAttachment(wSettings, 2*margin);\n\t\tfdFilename.right= new FormAttachment(wbFilename, -55);\n\t\twFilename.setLayoutData(fdFilename);\n\n\t\t// Whenever something changes, set the tooltip to the expanded version:\n\t\twFilename.addModifyListener(new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\twFilename.setToolTipText(StringUtil.environmentSubstitute( wFilename.getText() ) );\n\t\t\t}\n\t\t}\n\t\t\t);\n\n\t\twbFilename.addSelectionListener\n\t\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.OPEN);\n\t\t\t\tdialog.setFilterExtensions(new String[] {\"*\"});\n\t\t\t\tif (wFilename.getText()!=null)\n\t\t\t\t{\n\t\t\t\t\tdialog.setFileName(StringUtil.environmentSubstitute(wFilename.getText()) );\n\t\t\t\t}\n\t\t\t\tdialog.setFilterNames(FILETYPES);\n\t\t\t\tif (dialog.open()!=null)\n\t\t\t\t{\n\t\t\t\t\twFilename.setText(dialog.getFilterPath()+Const.FILE_SEPARATOR+dialog.getFileName());\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\t);\n\n\t\t\n\t\t// Filemask\n\t\twlFilemask = new Label(shell, SWT.RIGHT);\n\t\twlFilemask.setText(Messages.getString(\"JobDeleteFiles.Wildcard.Label\"));\n\t\tprops.setLook(wlFilemask);\n\t\tfdlFilemask = new FormData();\n\t\tfdlFilemask.left = new FormAttachment(0, 0);\n\t\tfdlFilemask.top = new FormAttachment(wFilename, margin);\n\t\tfdlFilemask.right = new FormAttachment(middle, -margin);\n\t\twlFilemask.setLayoutData(fdlFilemask);\n\t\twFilemask = new TextVar(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER, Messages\n\t\t\t.getString(\"JobDeleteFile.Wildcard.Tooltip\"));\n\t\tprops.setLook(wFilemask);\n\t\twFilemask.addModifyListener(lsMod);\n\t\tfdFilemask = new FormData();\n\t\tfdFilemask.left = new FormAttachment(middle, 0);\n\t\tfdFilemask.top = new FormAttachment(wFilename, margin);\n\t\tfdFilemask.right= new FormAttachment(wbFilename, -55);\n\t\twFilemask.setLayoutData(fdFilemask);\n\n\t\t// Buttons to the right of the screen...\r\n\t\twbdFilename=new Button(shell, SWT.PUSH| SWT.CENTER);\r\n\t\tprops.setLook(wbdFilename);\r\n\t\twbdFilename.setText(Messages.getString(\"JobDeleteFiles.FilenameDelete.Button\"));\r\n\t\twbdFilename.setToolTipText(Messages.getString(\"JobDeleteFiles.FilenameDelete.Tooltip\"));\r\n\t\tfdbdFilename=new FormData();\r\n\t\tfdbdFilename.right = new FormAttachment(100, 0);\r\n\t\tfdbdFilename.top  = new FormAttachment (wFilemask, 40);\r\n\t\twbdFilename.setLayoutData(fdbdFilename);\r\n\r\n\t\twbeFilename=new Button(shell, SWT.PUSH| SWT.CENTER);\r\n\t\tprops.setLook(wbeFilename);\r\n\t\twbeFilename.setText(Messages.getString(\"JobDeleteFiles.FilenameEdit.Button\"));\r\n\t\twbeFilename.setToolTipText(Messages.getString(\"JobDeleteFiles.FilenameEdit.Tooltip\"));\r\n\t\tfdbeFilename=new FormData();\r\n\t\tfdbeFilename.right = new FormAttachment(100, 0);\r\n\t\tfdbeFilename.left = new FormAttachment(wbdFilename, 0, SWT.LEFT);\r\n\t\tfdbeFilename.top  = new FormAttachment (wbdFilename, margin);\r\n\t\twbeFilename.setLayoutData(fdbeFilename);\r\n\n\n\t\twlFields = new Label(shell, SWT.NONE);\n\t\twlFields.setText(Messages.getString(\"JobDeleteFiles.Fields.Label\"));\n\t\tprops.setLook(wlFields);\n\t\tfdlFields = new FormData();\n\t\tfdlFields.left = new FormAttachment(0, 0);\n\t\tfdlFields.right= new FormAttachment(middle, -margin);\n\t\tfdlFields.top = new FormAttachment(wFilemask,margin);\n\t\twlFields.setLayoutData(fdlFields);\n\n\t\tfinal int FieldsCols = 1;\n\t\tint rows = jobEntry.arguments == null\n\t\t\t? 1\n\t\t\t: (jobEntry.arguments.length == 0\n\t\t\t? 0\n\t\t\t: jobEntry.arguments.length);\n\t\tfinal int FieldsRows = rows;\n\n\t\t//ColumnInfo[] colinf = new ColumnInfo[FieldsCols];\n\t\t//colinf[0] = new ColumnInfo(Messages.getString(\"JobDeleteFiles.Fields.Argument.Label\"),\n\t\t//\tColumnInfo.COLUMN_TYPE_TEXT, false);\n\t\t\n\n\t\tColumnInfo[] colinf=new ColumnInfo[]\r\n\t\t\t{\r\n\t\t\t\tnew ColumnInfo(Messages.getString(\"JobDeleteFiles.Fields.Argument.Label\"),  ColumnInfo.COLUMN_TYPE_TEXT,    false),\r\n\t\t\t\tnew ColumnInfo(Messages.getString(\"JobDeleteFiles.Fields.Wildcard.Label\"), ColumnInfo.COLUMN_TYPE_TEXT,    false ),\r\n\t\t\t};\n\n\t\tcolinf[0].setUsingVariables(true);\r\n\t\tcolinf[0].setToolTip(Messages.getString(\"JobDeleteFiles.Fields.Column\"));\n\t\tcolinf[1].setUsingVariables(true);\n\t\tcolinf[1].setToolTip(Messages.getString(\"JobDeleteFiles.Wildcard.Column\"));\n\n\n\t\twFields = new TableView(shell, SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI, colinf,\n\t\t\tFieldsRows, lsMod, props);\n\n\n\n\n\n\t\tfdFields = new FormData();\n\t\tfdFields.left = new FormAttachment(0, 0);\n\t\tfdFields.top = new FormAttachment(wlFields, margin);\n\t\tfdFields.right = new FormAttachment(100, -75);\n\t\tfdFields.bottom = new FormAttachment(100, -50);\n\t\twFields.setLayoutData(fdFields);\n\n\t\twlFields.setEnabled(!jobEntry.argFromPrevious);\n\t\twFields.setEnabled(!jobEntry.argFromPrevious);\n\n\t\t// Add the file to the list of files...\r\n\t\tSelectionAdapter selA = new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\r\n\t\t\t{\r\n\t\t\t\twFields.add(new String[] { wFilename.getText(), wFilemask.getText() } );\r\n\t\t\t\twFilename.setText(\"\");\r\n\t\t\t\twFilemask.setText(\"\");\r\n\t\t\t\twFields.removeEmptyRows();\r\n\t\t\t\twFields.setRowNums();\r\n\t\t\t\twFields.optWidth(true);\r\n\r\n\t\t\t}\r\n\t\t};\r\n\t\twbaFilename.addSelectionListener(selA);\r\n\t\twFilename.addSelectionListener(selA);\n\n\n\t\t// Delete files from the list of files...\r\n\t\twbdFilename.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\r\n\t\t\t{\r\n\t\t\t\tint idx[] = wFields.getSelectionIndices();\r\n\t\t\t\twFields.remove(idx);\r\n\t\t\t\twFields.removeEmptyRows();\r\n\t\t\t\twFields.setRowNums();\r\n\t\t\t}\r\n\t\t});\n\t\t\n\r\n\n\t\t// Edit the selected file & remove from the list...\r\n\t\twbeFilename.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\r\n\t\t\t{\r\n\t\t\t\tint idx = wFields.getSelectionIndex();\r\n\t\t\t\tif (idx>=0)\r\n\t\t\t\t{\r\n\t\t\t\t\tString string[] = wFields.getItem(idx);\r\n\t\t\t\t\twFilename.setText(string[0]);\r\n\t\t\t\t\twFilemask.setText(string[1]);\r\n\t\t\t\t\twFields.remove(idx);\r\n\t\t\t\t}\r\n\t\t\t\twFields.removeEmptyRows();\r\n\t\t\t\twFields.setRowNums();\r\n\t\t\t}\r\n\t\t});\n\n\n        wOK = new Button(shell, SWT.PUSH);\n        wOK.setText(Messages.getString(\"System.Button.OK\"));\n        wCancel = new Button(shell, SWT.PUSH);\n        wCancel.setText(Messages.getString(\"System.Button.Cancel\"));\n\n\t\tBaseStepDialog.positionBottomButtons(shell, new Button[] { wOK, wCancel }, margin, wFields);\n\n\t\t// Add listeners\n\t\tlsCancel   = new Listener() { public void handleEvent(Event e) { cancel(); } };\n\t\tlsOK       = new Listener() { public void handleEvent(Event e) { ok();     } };\n\n\t\twCancel.addListener(SWT.Selection, lsCancel);\n\t\twOK.addListener    (SWT.Selection, lsOK    );\n\n\t\tlsDef=new SelectionAdapter() { public void widgetDefaultSelected(SelectionEvent e) { ok(); } };\n\n\t\twName.addSelectionListener( lsDef );\n\t\twFilename.addSelectionListener( lsDef );\n\n\t\t// Detect X or ALT-F4 or something that kills this window...\n\t\tshell.addShellListener(\tnew ShellAdapter() { public void shellClosed(ShellEvent e) { cancel(); } } );\n\n\t\tgetData();\n\t\tUseSubFolder();\n\n\t\tBaseStepDialog.setSize(shell);\n\n\t\tshell.open();\n\t\twhile (!shell.isDisposed())\n\t\t{\n\t\t\t\tif (!display.readAndDispatch()) display.sleep();\n\t\t}\n\t\treturn jobEntry;\n\t}","id":105186,"modified_method":"public JobEntryInterface open()\n\t{\n\t\tShell parent = getParent();\n\t\tDisplay display = parent.getDisplay();\n\n        shell = new Shell(parent, props.getJobsDialogStyle());\n        props.setLook(shell);\n        JobDialog.setShellImage(shell, jobEntry);\n\t\t\n\t\tModifyListener lsMod = new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t};\n\t\tchanged = jobEntry.hasChanged();\n\n\t\tFormLayout formLayout = new FormLayout ();\n\t\tformLayout.marginWidth  = Const.FORM_MARGIN;\n\t\tformLayout.marginHeight = Const.FORM_MARGIN;\n\n\t\tshell.setLayout(formLayout);\n\t\tshell.setText(Messages.getString(\"JobDeleteFiles.Title\"));\n\n\t\tint middle = props.getMiddlePct();\n\t\tint margin = Const.MARGIN;\n\n\t\t// Filename line\n\t\twlName=new Label(shell, SWT.RIGHT);\n\t\twlName.setText(Messages.getString(\"JobDeleteFiles.Name.Label\"));\n \t\tprops.setLook(wlName);\n\t\tfdlName=new FormData();\n\t\tfdlName.left = new FormAttachment(0, 0);\n\t\tfdlName.right= new FormAttachment(middle, -margin);\n\t\tfdlName.top  = new FormAttachment(0, margin);\n\t\twlName.setLayoutData(fdlName);\n\t\twName=new Text(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n \t\tprops.setLook(wName);\n\t\twName.addModifyListener(lsMod);\n\t\tfdName=new FormData();\n\t\tfdName.left = new FormAttachment(middle, 0);\n\t\tfdName.top  = new FormAttachment(0, margin);\n\t\tfdName.right= new FormAttachment(100, 0);\n\t\twName.setLayoutData(fdName);\n\n\t\t// SETTINGS grouping?\n\t\t// ////////////////////////\n\t\t// START OF SETTINGS GROUP\n\t\t// \n\n\t\twSettings = new Group(shell, SWT.SHADOW_NONE);\n\t\tprops.setLook(wSettings);\n\t\twSettings.setText(Messages.getString(\"JobDeleteFiles.Settings.Label\"));\n\n\t\tFormLayout groupLayout = new FormLayout();\n\t\tgroupLayout.marginWidth = 10;\n\t\tgroupLayout.marginHeight = 10;\n\t\twSettings.setLayout(groupLayout);\n\n\t\twlIncludeSubfolders = new Label(wSettings, SWT.RIGHT);\r\n\t\twlIncludeSubfolders.setText(Messages.getString(\"JobDeleteFiles.IncludeSubfolders.Label\"));\r\n\t\tprops.setLook(wlIncludeSubfolders);\r\n\t\tfdlIncludeSubfolders = new FormData();\r\n\t\tfdlIncludeSubfolders.left = new FormAttachment(0, 0);\r\n\t\tfdlIncludeSubfolders.top = new FormAttachment(wName, margin);\r\n\t\tfdlIncludeSubfolders.right = new FormAttachment(middle, -margin);\r\n\t\twlIncludeSubfolders.setLayoutData(fdlIncludeSubfolders);\r\n\t\twIncludeSubfolders = new Button(wSettings, SWT.CHECK);\r\n\t\tprops.setLook(wIncludeSubfolders);\r\n\t\twIncludeSubfolders.setToolTipText(Messages.getString(\"JobDeleteFiles.IncludeSubfolders.Tooltip\"));\r\n\t\tfdIncludeSubfolders = new FormData();\r\n\t\tfdIncludeSubfolders.left = new FormAttachment(middle, 0);\r\n\t\tfdIncludeSubfolders.top = new FormAttachment(wName, margin);\r\n\t\tfdIncludeSubfolders.right = new FormAttachment(100, 0);\r\n\t\twIncludeSubfolders.setLayoutData(fdIncludeSubfolders);\r\n\t\twIncludeSubfolders.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t\tUseSubFolder();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\n\t\t// DeleteFolder Option : If selected, files won't be deleted\n\t\twlDeleteFolder = new Label(wSettings, SWT.RIGHT);\r\n\t\twlDeleteFolder.setText(Messages.getString(\"JobDeleteFiles.DeleteFolder.Label\"));\r\n\t\tprops.setLook(wlDeleteFolder);\r\n\t\tfdlDeleteFolder = new FormData();\r\n\t\tfdlDeleteFolder.left = new FormAttachment(0, 0);\r\n\t\tfdlDeleteFolder.top = new FormAttachment(wIncludeSubfolders, margin);\r\n\t\tfdlDeleteFolder.right = new FormAttachment(middle, -margin);\r\n\t\twlDeleteFolder.setLayoutData(fdlDeleteFolder);\r\n\t\twDeleteFolder = new Button(wSettings, SWT.CHECK);\r\n\t\tprops.setLook(wDeleteFolder);\r\n\t\twDeleteFolder.setToolTipText(Messages.getString(\"JobDeleteFiles.DeleteFolder.Tooltip\"));\r\n\t\tfdDeleteFolder = new FormData();\r\n\t\tfdDeleteFolder.left = new FormAttachment(middle, 0);\r\n\t\tfdDeleteFolder.top = new FormAttachment(wIncludeSubfolders, margin);\r\n\t\tfdDeleteFolder.right = new FormAttachment(100, 0);\r\n\t\twDeleteFolder.setLayoutData(fdDeleteFolder);\r\n\t\twDeleteFolder.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t}\r\n\t\t});\n\n\t\twlIgnoreErrors = new Label(wSettings, SWT.RIGHT);\n\t\twlIgnoreErrors.setText(Messages.getString(\"JobDeleteFiles.IgnoreErrors.Label\"));\n\t\tprops.setLook(wlIgnoreErrors);\n\t\tfdlIgnoreErrors = new FormData();\n\t\tfdlIgnoreErrors.left = new FormAttachment(0, 0);\n\t\tfdlIgnoreErrors.top = new FormAttachment(wDeleteFolder, margin);\n\t\tfdlIgnoreErrors.right = new FormAttachment(middle, -margin);\n\t\twlIgnoreErrors.setLayoutData(fdlIgnoreErrors);\n\t\twIgnoreErrors = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wIgnoreErrors);\n\t\twIgnoreErrors.setToolTipText(Messages.getString(\"JobDeleteFiles.IgnoreErrors.Tooltip\"));\n\t\tfdIgnoreErrors = new FormData();\n\t\tfdIgnoreErrors.left = new FormAttachment(middle, 0);\n\t\tfdIgnoreErrors.top = new FormAttachment(wDeleteFolder, margin);\n\t\tfdIgnoreErrors.right = new FormAttachment(100, 0);\n\t\twIgnoreErrors.setLayoutData(fdIgnoreErrors);\n\t\twIgnoreErrors.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t\n\t\twlPrevious = new Label(wSettings, SWT.RIGHT);\n\t\twlPrevious.setText(Messages.getString(\"JobDeleteFiles.Previous.Label\"));\n\t\tprops.setLook(wlPrevious);\n\t\tfdlPrevious = new FormData();\n\t\tfdlPrevious.left = new FormAttachment(0, 0);\n\t\tfdlPrevious.top = new FormAttachment(wIgnoreErrors, margin );\n\t\tfdlPrevious.right = new FormAttachment(middle, -margin);\n\t\twlPrevious.setLayoutData(fdlPrevious);\n\t\twPrevious = new Button(wSettings, SWT.CHECK);\n\t\tprops.setLook(wPrevious);\n\t\twPrevious.setSelection(jobEntry.argFromPrevious);\n\t\twPrevious.setToolTipText(Messages.getString(\"JobDeleteFiles.Previous.Tooltip\"));\n\t\tfdPrevious = new FormData();\n\t\tfdPrevious.left = new FormAttachment(middle, 0);\n\t\tfdPrevious.top = new FormAttachment(wIgnoreErrors, margin );\n\t\tfdPrevious.right = new FormAttachment(100, 0);\n\t\twPrevious.setLayoutData(fdPrevious);\n\t\twPrevious.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.argFromPrevious = !jobEntry.argFromPrevious;\n\t\t\t\tjobEntry.setChanged();\n\t\t\t\twlFields.setEnabled(!jobEntry.argFromPrevious);\n\t\t\t\twFields.setEnabled(!jobEntry.argFromPrevious);\n\t\t\t}\n\t\t});\n\t\tfdSettings = new FormData();\n\t\tfdSettings.left = new FormAttachment(0, margin);\n\t\tfdSettings.top = new FormAttachment(wName, margin);\n\t\tfdSettings.right = new FormAttachment(100, -margin);\n\t\twSettings.setLayoutData(fdSettings);\n\t\t\n\t\t// ///////////////////////////////////////////////////////////\n\t\t// / END OF SETTINGS GROUP\n\t\t// ///////////////////////////////////////////////////////////\n\n\t\t// Filename line\n\t\twlFilename=new Label(shell, SWT.RIGHT);\n\t\twlFilename.setText(Messages.getString(\"JobDeleteFiles.Filename.Label\"));\n\t\tprops.setLook(wlFilename);\n\t\tfdlFilename=new FormData();\n\t\tfdlFilename.left = new FormAttachment(0, 0);\n\t\tfdlFilename.top  = new FormAttachment(wSettings, 2*margin);\n\t\tfdlFilename.right= new FormAttachment(middle, -margin);\n\t\twlFilename.setLayoutData(fdlFilename);\n\n\t\twbFilename=new Button(shell, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbFilename);\n\t\twbFilename.setText(Messages.getString(\"System.Button.Browse\"));\n\t\tfdbFilename=new FormData();\n\t\tfdbFilename.right= new FormAttachment(100, 0);\n\t\tfdbFilename.top  = new FormAttachment(wSettings, margin);\n\t\twbFilename.setLayoutData(fdbFilename);\n\n\t\twbaFilename=new Button(shell, SWT.PUSH| SWT.CENTER);\r\n\t\tprops.setLook(wbaFilename);\r\n\t\twbaFilename.setText(Messages.getString(\"JobDeleteFiles.FilenameAdd.Button\"));\r\n\t\tfdbaFilename=new FormData();\r\n\t\tfdbaFilename.right= new FormAttachment(wbFilename, -margin);\r\n\t\tfdbaFilename.top  = new FormAttachment(wSettings, margin);\r\n\t\twbaFilename.setLayoutData(fdbaFilename);\n\n\t\twFilename=new TextVar(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wFilename);\n\t\twFilename.addModifyListener(lsMod);\n\t\tfdFilename=new FormData();\n\t\tfdFilename.left = new FormAttachment(middle, 0);\n\t\tfdFilename.top  = new FormAttachment(wSettings, 2*margin);\n\t\tfdFilename.right= new FormAttachment(wbFilename, -55);\n\t\twFilename.setLayoutData(fdFilename);\n\n\t\t// Whenever something changes, set the tooltip to the expanded version:\n\t\twFilename.addModifyListener(new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\twFilename.setToolTipText(StringUtil.environmentSubstitute( wFilename.getText() ) );\n\t\t\t}\n\t\t}\n\t\t);\n\n\t\twbFilename.addSelectionListener\n\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t\t{\n\t\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t\t{\n\t\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.OPEN);\n\t\t\t\t\tdialog.setFilterExtensions(new String[] {\"*\"});\n\t\t\t\t\tif (wFilename.getText()!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\tdialog.setFileName(StringUtil.environmentSubstitute(wFilename.getText()) );\n\t\t\t\t\t}\n\t\t\t\t\tdialog.setFilterNames(FILETYPES);\n\t\t\t\t\tif (dialog.open()!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\twFilename.setText(dialog.getFilterPath()+Const.FILE_SEPARATOR+dialog.getFileName());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\t\n\t\t// Filemask\n\t\twlFilemask = new Label(shell, SWT.RIGHT);\n\t\twlFilemask.setText(Messages.getString(\"JobDeleteFiles.Wildcard.Label\"));\n\t\tprops.setLook(wlFilemask);\n\t\tfdlFilemask = new FormData();\n\t\tfdlFilemask.left = new FormAttachment(0, 0);\n\t\tfdlFilemask.top = new FormAttachment(wFilename, margin);\n\t\tfdlFilemask.right = new FormAttachment(middle, -margin);\n\t\twlFilemask.setLayoutData(fdlFilemask);\n\t\twFilemask = new TextVar(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER, \n\t\t\t\t                Messages.getString(\"JobDeleteFile.Wildcard.Tooltip\"));\n\t\tprops.setLook(wFilemask);\n\t\twFilemask.addModifyListener(lsMod);\n\t\tfdFilemask = new FormData();\n\t\tfdFilemask.left = new FormAttachment(middle, 0);\n\t\tfdFilemask.top = new FormAttachment(wFilename, margin);\n\t\tfdFilemask.right= new FormAttachment(wbFilename, -55);\n\t\twFilemask.setLayoutData(fdFilemask);\n\n\t\t// Buttons to the right of the screen...\r\n\t\twbdFilename=new Button(shell, SWT.PUSH| SWT.CENTER);\r\n\t\tprops.setLook(wbdFilename);\r\n\t\twbdFilename.setText(Messages.getString(\"JobDeleteFiles.FilenameDelete.Button\"));\r\n\t\twbdFilename.setToolTipText(Messages.getString(\"JobDeleteFiles.FilenameDelete.Tooltip\"));\r\n\t\tfdbdFilename=new FormData();\r\n\t\tfdbdFilename.right = new FormAttachment(100, 0);\r\n\t\tfdbdFilename.top  = new FormAttachment (wFilemask, 40);\r\n\t\twbdFilename.setLayoutData(fdbdFilename);\r\n\r\n\t\twbeFilename=new Button(shell, SWT.PUSH| SWT.CENTER);\r\n\t\tprops.setLook(wbeFilename);\r\n\t\twbeFilename.setText(Messages.getString(\"JobDeleteFiles.FilenameEdit.Button\"));\r\n\t\twbeFilename.setToolTipText(Messages.getString(\"JobDeleteFiles.FilenameEdit.Tooltip\"));\r\n\t\tfdbeFilename=new FormData();\r\n\t\tfdbeFilename.right = new FormAttachment(100, 0);\r\n\t\tfdbeFilename.left = new FormAttachment(wbdFilename, 0, SWT.LEFT);\r\n\t\tfdbeFilename.top  = new FormAttachment (wbdFilename, margin);\r\n\t\twbeFilename.setLayoutData(fdbeFilename);\r\n\n\t\twlFields = new Label(shell, SWT.NONE);\n\t\twlFields.setText(Messages.getString(\"JobDeleteFiles.Fields.Label\"));\n\t\tprops.setLook(wlFields);\n\t\tfdlFields = new FormData();\n\t\tfdlFields.left = new FormAttachment(0, 0);\n\t\tfdlFields.right= new FormAttachment(middle, -margin);\n\t\tfdlFields.top = new FormAttachment(wFilemask,margin);\n\t\twlFields.setLayoutData(fdlFields);\n\n\t\tint rows = jobEntry.arguments == null\n\t\t\t? 1\n\t\t\t: (jobEntry.arguments.length == 0\n\t\t\t? 0\n\t\t\t: jobEntry.arguments.length);\n\t\tfinal int FieldsRows = rows;\n\n\t\tColumnInfo[] colinf=new ColumnInfo[]\r\n\t\t\t{\r\n\t\t\t\tnew ColumnInfo(Messages.getString(\"JobDeleteFiles.Fields.Argument.Label\"),  ColumnInfo.COLUMN_TYPE_TEXT,    false),\r\n\t\t\t\tnew ColumnInfo(Messages.getString(\"JobDeleteFiles.Fields.Wildcard.Label\"), ColumnInfo.COLUMN_TYPE_TEXT,    false ),\r\n\t\t\t};\n\n\t\tcolinf[0].setUsingVariables(true);\r\n\t\tcolinf[0].setToolTip(Messages.getString(\"JobDeleteFiles.Fields.Column\"));\n\t\tcolinf[1].setUsingVariables(true);\n\t\tcolinf[1].setToolTip(Messages.getString(\"JobDeleteFiles.Wildcard.Column\"));\n\n\t\twFields = new TableView(shell, SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI, colinf,\n\t\t\tFieldsRows, lsMod, props);\n\n\t\tfdFields = new FormData();\n\t\tfdFields.left = new FormAttachment(0, 0);\n\t\tfdFields.top = new FormAttachment(wlFields, margin);\n\t\tfdFields.right = new FormAttachment(100, -75);\n\t\tfdFields.bottom = new FormAttachment(100, -50);\n\t\twFields.setLayoutData(fdFields);\n\n\t\twlFields.setEnabled(!jobEntry.argFromPrevious);\n\t\twFields.setEnabled(!jobEntry.argFromPrevious);\n\n\t\t// Add the file to the list of files...\r\n\t\tSelectionAdapter selA = new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\r\n\t\t\t{\r\n\t\t\t\twFields.add(new String[] { wFilename.getText(), wFilemask.getText() } );\r\n\t\t\t\twFilename.setText(\"\");\r\n\t\t\t\twFilemask.setText(\"\");\r\n\t\t\t\twFields.removeEmptyRows();\r\n\t\t\t\twFields.setRowNums();\r\n\t\t\t\twFields.optWidth(true);\r\n\t\t\t}\r\n\t\t};\r\n\t\twbaFilename.addSelectionListener(selA);\r\n\t\twFilename.addSelectionListener(selA);\n\n\t\t// Delete files from the list of files...\r\n\t\twbdFilename.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\r\n\t\t\t{\r\n\t\t\t\tint idx[] = wFields.getSelectionIndices();\r\n\t\t\t\twFields.remove(idx);\r\n\t\t\t\twFields.removeEmptyRows();\r\n\t\t\t\twFields.setRowNums();\r\n\t\t\t}\r\n\t\t});\n\n\t\t// Edit the selected file & remove from the list...\r\n\t\twbeFilename.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\r\n\t\t\t{\r\n\t\t\t\tint idx = wFields.getSelectionIndex();\r\n\t\t\t\tif (idx>=0)\r\n\t\t\t\t{\r\n\t\t\t\t\tString string[] = wFields.getItem(idx);\r\n\t\t\t\t\twFilename.setText(string[0]);\r\n\t\t\t\t\twFilemask.setText(string[1]);\r\n\t\t\t\t\twFields.remove(idx);\r\n\t\t\t\t}\r\n\t\t\t\twFields.removeEmptyRows();\r\n\t\t\t\twFields.setRowNums();\r\n\t\t\t}\r\n\t\t});\n\n        wOK = new Button(shell, SWT.PUSH);\n        wOK.setText(Messages.getString(\"System.Button.OK\"));\n        wCancel = new Button(shell, SWT.PUSH);\n        wCancel.setText(Messages.getString(\"System.Button.Cancel\"));\n\n\t\tBaseStepDialog.positionBottomButtons(shell, new Button[] { wOK, wCancel }, margin, wFields);\n\n\t\t// Add listeners\n\t\tlsCancel   = new Listener() { public void handleEvent(Event e) { cancel(); } };\n\t\tlsOK       = new Listener() { public void handleEvent(Event e) { ok();     } };\n\n\t\twCancel.addListener(SWT.Selection, lsCancel);\n\t\twOK.addListener    (SWT.Selection, lsOK    );\n\n\t\tlsDef=new SelectionAdapter() { public void widgetDefaultSelected(SelectionEvent e) { ok(); } };\n\n\t\twName.addSelectionListener( lsDef );\n\t\twFilename.addSelectionListener( lsDef );\n\n\t\t// Detect X or ALT-F4 or something that kills this window...\n\t\tshell.addShellListener(\tnew ShellAdapter() { public void shellClosed(ShellEvent e) { cancel(); } } );\n\n\t\tgetData();\n\t\tUseSubFolder();\n\n\t\tBaseStepDialog.setSize(shell);\n\n\t\tshell.open();\n\t\twhile (!shell.isDisposed())\n\t\t{\n\t\t\t\tif (!display.readAndDispatch()) display.sleep();\n\t\t}\n\t\treturn jobEntry;\n\t}","commit_id":"d268ebc0825f2ed3a2e2e82ac999e0b2ac3bdcfb","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void ok()\n\t{\n\t\tjobEntry.setName(wName.getText());\n\t\tjobEntry.setIgnoreErreurs(wIgnoreErreurs.getSelection());\n\t\tjobEntry.setDeleteFolder(wDeleteFolder.getSelection());\n\t\tjobEntry.setIncludesubfolders(wIncludeSubfolders.getSelection());\n\t\n\n\t\tint nritems = wFields.nrNonEmpty();\n\t\tint nr = 0;\n\t\tfor (int i = 0; i < nritems; i++)\n\t\t{\n\t\t\tString arg = wFields.getNonEmpty(i).getText(1);\n\t\t\tif (arg != null && arg.length() != 0)\n\t\t\t\tnr++;\n\t\t}\n\t\tjobEntry.arguments = new String[nr];\n\t\tjobEntry.filemasks = new String[nr];\n\t\tnr = 0;\n\t\tfor (int i = 0; i < nritems; i++)\n\t\t{\n\t\t\tString arg = wFields.getNonEmpty(i).getText(1);\n\t\t\tString wild = wFields.getNonEmpty(i).getText(2);\n\t\t\tif (arg != null && arg.length() != 0)\n\t\t\t{\n\t\t\t\tjobEntry.arguments[nr] = arg;\n\t\t\t\tjobEntry.filemasks[nr] = wild;\n\t\t\t\tnr++;\n\t\t\t}\n\t\t}\n\n\n\t\tdispose();\n\t}","id":105187,"modified_method":"private void ok()\n\t{\n\t\tjobEntry.setName(wName.getText());\n\t\tjobEntry.setIgnoreErrors(wIgnoreErrors.getSelection());\n\t\tjobEntry.setDeleteFolder(wDeleteFolder.getSelection());\n\t\tjobEntry.setIncludeSubfolders(wIncludeSubfolders.getSelection());\n\n\t\tint nritems = wFields.nrNonEmpty();\n\t\tint nr = 0;\n\t\tfor (int i = 0; i < nritems; i++)\n\t\t{\n\t\t\tString arg = wFields.getNonEmpty(i).getText(1);\n\t\t\tif (arg != null && arg.length() != 0)\n\t\t\t\tnr++;\n\t\t}\n\t\tjobEntry.arguments = new String[nr];\n\t\tjobEntry.filemasks = new String[nr];\n\t\tnr = 0;\n\t\tfor (int i = 0; i < nritems; i++)\n\t\t{\n\t\t\tString arg = wFields.getNonEmpty(i).getText(1);\n\t\t\tString wild = wFields.getNonEmpty(i).getText(2);\n\t\t\tif (arg != null && arg.length() != 0)\n\t\t\t{\n\t\t\t\tjobEntry.arguments[nr] = arg;\n\t\t\t\tjobEntry.filemasks[nr] = wild;\n\t\t\t\tnr++;\n\t\t\t}\n\t\t}\n\t\tdispose();\n\t}","commit_id":"d268ebc0825f2ed3a2e2e82ac999e0b2ac3bdcfb","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void loadXML(Node entrynode, ArrayList databases, Repository rep)\n\t\tthrows KettleXMLException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.loadXML(entrynode, databases);\n\t\t\tmaximumTimeout = XMLHandler.getTagValue(entrynode, \"maximumTimeout\");\n\t\t\tscaletime     = Integer.parseInt(XMLHandler.getTagValue(entrynode, \"scaletime\"));\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tthrow new KettleXMLException(\"Unable to load job entry of type 'evaluation' from XML node\", e);\n\t\t}\n\t}","id":105188,"modified_method":"public void loadXML(Node entrynode, ArrayList databases, Repository rep)\n\t\tthrows KettleXMLException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.loadXML(entrynode, databases);\n\t\t\tmaximumTimeout = XMLHandler.getTagValue(entrynode, \"maximumTimeout\");\n\t\t\tscaletime      = Integer.parseInt(XMLHandler.getTagValue(entrynode, \"scaletime\"));\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tthrow new KettleXMLException(\"Unable to load job entry of type 'delay' from XML node\", e);\n\t\t}\n\t}","commit_id":"26cea55c5294ae113e15af6d15a40b9a1e4c1923","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String getXML()\n\t{\n        StringBuffer retval = new StringBuffer();\n\t\n\t\tretval.append(super.getXML());\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"maximumTimeout\",      maximumTimeout));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"scaletime\",  scaletime));\n\n\t\treturn retval.toString();\n\t}","id":105189,"modified_method":"public String getXML()\n\t{\n        StringBuffer retval = new StringBuffer(200);\n\t\n\t\tretval.append(super.getXML());\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"maximumTimeout\",  maximumTimeout));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"scaletime\",       scaletime));\n\n\t\treturn retval.toString();\n\t}","commit_id":"26cea55c5294ae113e15af6d15a40b9a1e4c1923","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\n\t * Execute this job entry and return the result.\n\t * In this case it means, just set the result boolean in the Result class.\n\t * @param previousResult The result of the previous execution\n\t * @return The Result of the execution.\n\t */\n\tpublic Result execute(Result previousResult, int nr, Repository rep, Job parentJob)\n\t{\n\t\tLogWriter log = LogWriter.getInstance();\n\t\tResult result = previousResult;\n\t\tresult.setResult( false );\n\t\tint Multiple;\n\t\tString Waitscale;\n\n\n\t\t// Scale time\r\n\t\tif (scaletime == 0)\r\n\t\t{\r\n\t\t\t//Second\r\n\t\t\tMultiple = 1000;\r\n\t\t\tWaitscale = Messages.getString(\"JobEval.SScaleTime.Label\");\r\n\r\n\t\t}\r\n\t\telse if (scaletime == 1)\r\n\t\t{\r\n\t\t\t//Minute\r\n\t\t\tMultiple = 60000;\r\n\t\t\tWaitscale = Messages.getString(\"JobEval.MnScaleTime.Label\");\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t//Hour\r\n\t\t\tMultiple=3600000;\r\n\t\t\tWaitscale = Messages.getString(\"JobEval.HrScaleTime.Label\");\r\n\t\t}\r\n\n\t\ttry\n\t\t{\n\t\t\n\t\t\t\n\t\t// starttime (in seconds ,Minutes or Hours)\n\t\tlong timeStart = System.currentTimeMillis() / Multiple;\n\n\t\tlong iMaximumTimeout = Const.toInt(getMaximumTimeout(),Const.toInt(DEFAULT_MAXIMUM_TIMEOUT, 0));\n\n\t\tlog.logDetailed(toString(), Messages.getString(\"JobEval.LetsWaitFor.Label\") + iMaximumTimeout + \" \" + Waitscale + \"...\");\n\n\t\tboolean continueLoop = true;\n\t\t//\n\t\t// Sanity check on some values, and complain on insanity\n\t\t//\n\t\tif ( iMaximumTimeout < 0 )\n\t\t{\n\t\t\tiMaximumTimeout = Const.toInt(DEFAULT_MAXIMUM_TIMEOUT, 0);\n\t\t\tlog.logBasic(toString(), Messages.getString(\"JobEval.MaximunTimeReseted.Label\") + iMaximumTimeout+ \" \" + Waitscale);\n\t\t}\n\t\n\n\t\n\t\twhile ( continueLoop && !parentJob.isStopped() )\n\t\t{\n\t\t\t// Update Time value\n\t\t\tlong now = System.currentTimeMillis()/ Multiple;\n\n\t\t\t// Let's check the limit time\n\t\t\tif ( (iMaximumTimeout > 0) && (now >= (timeStart + iMaximumTimeout)))\n\t\t\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t// We have reached the time limit\n\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobEval.WaitTimeIsElapsed.Label\"));\n\n\t\t\t\tcontinueLoop = false;\n\t\t\t\tresult.setResult( true );\n\t\t\t\n\n\t\t\t}\n\t\t}\n\t\t\t\n\t\t\t\r\n\t\t\t\t\n\n\t\t}\n\t \r\n\t\tcatch(Exception e)\n\t\t{\n\t\t\t// We get an exception\n\t\t\tresult.setResult( false );\n\t\t\tlog.logError(toString(), \"Error  : \"+e.getMessage());\n\t\t}\n\t\n\t\treturn result;\n\t}","id":105190,"modified_method":"/**\n\t * Execute this job entry and return the result.\n\t * In this case it means, just set the result boolean in the Result class.\n\t * @param previousResult The result of the previous execution\n\t * @return The Result of the execution.\n\t */\n\tpublic Result execute(Result previousResult, int nr, Repository rep, Job parentJob)\n\t{\n\t\tLogWriter log = LogWriter.getInstance();\n\t\tResult result = previousResult;\n\t\tresult.setResult( false );\n\t\tint Multiple;\n\t\tString Waitscale;\n\n\t\t// Scale time\r\n\t\tif (scaletime == 0)\r\n\t\t{\r\n\t\t\t// Second\r\n\t\t\tMultiple = 1000;\r\n\t\t\tWaitscale = Messages.getString(\"JobEval.SScaleTime.Label\");\r\n\r\n\t\t}\r\n\t\telse if (scaletime == 1)\r\n\t\t{\r\n\t\t\t// Minute\r\n\t\t\tMultiple = 60000;\r\n\t\t\tWaitscale = Messages.getString(\"JobEval.MnScaleTime.Label\");\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\t// Hour\r\n\t\t\tMultiple=3600000;\r\n\t\t\tWaitscale = Messages.getString(\"JobEval.HrScaleTime.Label\");\r\n\t\t}\n\t\ttry\n\t\t{\n\t\t\t// starttime (in seconds ,Minutes or Hours)\n\t\t\tlong timeStart = System.currentTimeMillis() / Multiple;\n\n\t\t\tlong iMaximumTimeout = Const.toInt(getMaximumTimeout(),Const.toInt(DEFAULT_MAXIMUM_TIMEOUT, 0));\n\n\t\t\tif ( log.isDetailed() )\n\t\t\t{\n\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobEval.LetsWaitFor.Label\") + iMaximumTimeout + \" \" + Waitscale + \"...\");\n\t\t\t}\n\n\t\t\tboolean continueLoop = true;\n\t\t\t//\n\t\t\t// Sanity check on some values, and complain on insanity\n\t\t\t//\n\t\t\tif ( iMaximumTimeout < 0 )\n\t\t\t{\n\t\t\t\tiMaximumTimeout = Const.toInt(DEFAULT_MAXIMUM_TIMEOUT, 0);\n\t\t\t\tlog.logBasic(toString(), Messages.getString(\"JobEval.MaximunTimeReseted.Label\") + iMaximumTimeout+ \" \" + Waitscale);\n\t\t\t}\n\n\t\t\t// TODO don't contineously loop, but sleeping would be better.\n\t\t\twhile ( continueLoop && !parentJob.isStopped() )\n\t\t\t{\n\t\t\t\t// Update Time value\n\t\t\t\tlong now = System.currentTimeMillis()/ Multiple;\n\n\t\t\t\t// Let's check the limit time\n\t\t\t\tif ( (iMaximumTimeout > 0) && (now >= (timeStart + iMaximumTimeout)))\n\t\t\t\t{\t\t\t\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t// We have reached the time limit\n\t\t\t\t\tif ( log.isDetailed() )\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobEval.WaitTimeIsElapsed.Label\"));\n\t\t\t\t\t}\n\t\t\t\t\tcontinueLoop = false;\n\t\t\t\t\tresult.setResult( true );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\t// We get an exception\n\t\t\tresult.setResult( false );\n\t\t\tlog.logError(toString(), \"Error  : \"+e.getMessage());\n\t\t}\n\t\n\t\treturn result;\n\t}","commit_id":"26cea55c5294ae113e15af6d15a40b9a1e4c1923","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void loadRep(Repository rep, long id_jobentry, ArrayList databases)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.loadRep(rep, id_jobentry, databases);\n\n\t\t\tmaximumTimeout = rep.getJobEntryAttributeString(id_jobentry, \"maximumTimeout\");\n\t\t\tscaletime=(int) rep.getJobEntryAttributeInteger(id_jobentry, \"scaletime\");\n\t\t}\n\t\tcatch(KettleDatabaseException dbe)\n\t\t{\n\t\t\tthrow new KettleException(\"Unable to load job entry of type 'evaluation' from the repository with id_jobentry=\"+id_jobentry, dbe);\n\t\t}\n\t}","id":105191,"modified_method":"public void loadRep(Repository rep, long id_jobentry, ArrayList databases)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.loadRep(rep, id_jobentry, databases);\n\n\t\t\tmaximumTimeout =      rep.getJobEntryAttributeString(id_jobentry,  \"maximumTimeout\");\n\t\t\tscaletime      = (int)rep.getJobEntryAttributeInteger(id_jobentry, \"scaletime\");\n\t\t}\n\t\tcatch(KettleDatabaseException dbe)\n\t\t{\n\t\t\tthrow new KettleException(\"Unable to load job entry of type 'delay' from the repository with id_jobentry=\"+id_jobentry, dbe);\n\t\t}\n\t}","commit_id":"26cea55c5294ae113e15af6d15a40b9a1e4c1923","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void saveRep(Repository rep, long id_job)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.saveRep(rep, id_job);\n\t\t\t\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"maximumTimeout\", maximumTimeout);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"scaletime\", scaletime);\n\t\t}\n\t\tcatch(KettleDatabaseException dbe)\n\t\t{\n\t\t\tthrow new KettleException(\"Unable to save job entry of type 'evaluation' to the repository for id_job=\"+id_job, dbe);\n\t\t}\n\t}","id":105192,"modified_method":"public void saveRep(Repository rep, long id_job)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.saveRep(rep, id_job);\n\t\t\t\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"maximumTimeout\", maximumTimeout);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"scaletime\",      scaletime);\n\t\t}\n\t\tcatch(KettleDatabaseException dbe)\n\t\t{\n\t\t\tthrow new KettleException(\"Unable to save job entry of type 'delay' to the repository for id_job=\"+id_job, dbe);\n\t\t}\n\t}","commit_id":"26cea55c5294ae113e15af6d15a40b9a1e4c1923","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\n     * @return Immutable map with all superimposing resource providers currently registered\n     */\n    public Map<String, SuperimposingResourceProvider> getRegisteredProviders() {\n        Map<String, SuperimposingResourceProvider> mapcopy = new HashMap<String, SuperimposingResourceProvider>(superimposingProviders);\n        return Collections.unmodifiableMap(mapcopy);\n    }","id":105193,"modified_method":"/**\n     * @return Iterator with all superimposing resource providers currently registered.\n     *   Iterator is backed by a {@link java.util.concurrent.ConcurrentHashMap} and is safe to access\n     *   even if superimposing resource providers are registered or unregistered at the same time.\n     */\n    @SuppressWarnings(\"unchecked\")\n    public Iterator<SuperimposingResourceProvider> getRegisteredProviders() {\n        return IteratorUtils.unmodifiableIterator(superimposingProviders.values().iterator());\n    }","commit_id":"b644be12fc9af35321855a27a9de8a0c31185661","url":"https://github.com/apache/sling"},{"original_method":"@Test\n    public void testFindAllSuperimposings() throws InterruptedException, LoginException, RepositoryException {\n        // prepare a query that returns one existing superimposed resource\n        when(componentContextProperties.get(SuperimposingManagerImpl.FINDALLQUERIES_PROPERTY)).thenReturn(\"syntax|query\");\n        when(resourceResolver.findResources(\"query\", \"syntax\")).then(new Answer<Iterator<Resource>>() {\n            public Iterator<Resource> answer(InvocationOnMock invocation) {\n                return Arrays.asList(new Resource[] {\n                        prepareSuperimposingResource(SUPERIMPOSED_PATH, ORIGINAL_PATH, false, false)\n                }).iterator();\n            }\n        });\n        initialize(true);\n\n        // ensure the superimposed resource is detected and registered\n        Map<String, SuperimposingResourceProvider> providers = underTest.getRegisteredProviders();\n        assertEquals(1, providers.size());\n        SuperimposingResourceProvider provider = providers.values().iterator().next();\n        assertEquals(SUPERIMPOSED_PATH, provider.getRootPath());\n        assertEquals(ORIGINAL_PATH, provider.getSourcePath());\n        assertFalse(provider.isOverlayable());\n        verify(bundleContext).registerService(anyString(), same(provider), any(Dictionary.class));\n    }","id":105194,"modified_method":"@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testFindAllSuperimposings() throws InterruptedException, LoginException, RepositoryException {\n        // prepare a query that returns one existing superimposed resource\n        when(componentContextProperties.get(SuperimposingManagerImpl.FINDALLQUERIES_PROPERTY)).thenReturn(\"syntax|query\");\n        when(resourceResolver.findResources(\"query\", \"syntax\")).then(new Answer<Iterator<Resource>>() {\n            public Iterator<Resource> answer(InvocationOnMock invocation) {\n                return Arrays.asList(new Resource[] {\n                        prepareSuperimposingResource(SUPERIMPOSED_PATH, ORIGINAL_PATH, false, false)\n                }).iterator();\n            }\n        });\n        initialize(true);\n\n        // ensure the superimposed resource is detected and registered\n        List<SuperimposingResourceProvider> providers = IteratorUtils.toList(underTest.getRegisteredProviders());\n        assertEquals(1, providers.size());\n        SuperimposingResourceProvider provider = providers.iterator().next();\n        assertEquals(SUPERIMPOSED_PATH, provider.getRootPath());\n        assertEquals(ORIGINAL_PATH, provider.getSourcePath());\n        assertFalse(provider.isOverlayable());\n        verify(bundleContext).registerService(anyString(), same(provider), any(Dictionary.class));\n    }","commit_id":"b644be12fc9af35321855a27a9de8a0c31185661","url":"https://github.com/apache/sling"},{"original_method":"@Test\n    public void testSuperimposedResourceCreateMove() throws InterruptedException, LoginException, RepositoryException {\n        when(componentContextProperties.get(SuperimposingManagerImpl.FINDALLQUERIES_PROPERTY)).thenReturn(\"syntax|query\");\n        initialize(true);\n\n        // simulate node create event\n        final Resource superimposedResource = prepareSuperimposingResource(SUPERIMPOSED_PATH, ORIGINAL_PATH, false, false);\n        underTest.onEvent(prepareNodeCreateEvent(superimposedResource));\n\n        // simulate a node move event\n        String oldPath = superimposedResource.getPath();\n        moveSuperimposedResource(superimposedResource, \"/new/path\");\n\n        // prepare a query that returns the moved superimposed resource\n        when(resourceResolver.findResources(\"query\", \"syntax\")).then(new Answer<Iterator<Resource>>() {\n            public Iterator<Resource> answer(InvocationOnMock invocation) {\n                return Arrays.asList(new Resource[] {\n                        superimposedResource\n                }).iterator();\n            }\n        });\n\n        underTest.onEvent(prepareNodeMoveEvent(superimposedResource, oldPath));\n\n        // ensure the superimposed resource update is detected and a new provider instance is registered\n        Map<String, SuperimposingResourceProvider> providers = underTest.getRegisteredProviders();\n        assertEquals(1, providers.size());\n        SuperimposingResourceProvider provider = providers.values().iterator().next();\n        assertEquals(\"/new/path\", provider.getRootPath());\n        assertEquals(ORIGINAL_PATH, provider.getSourcePath());\n        assertFalse(provider.isOverlayable());\n        verify(bundleContext).registerService(anyString(), same(provider), any(Dictionary.class));\n    }","id":105195,"modified_method":"@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSuperimposedResourceCreateMove() throws InterruptedException, LoginException, RepositoryException {\n        when(componentContextProperties.get(SuperimposingManagerImpl.FINDALLQUERIES_PROPERTY)).thenReturn(\"syntax|query\");\n        initialize(true);\n\n        // simulate node create event\n        final Resource superimposedResource = prepareSuperimposingResource(SUPERIMPOSED_PATH, ORIGINAL_PATH, false, false);\n        underTest.onEvent(prepareNodeCreateEvent(superimposedResource));\n\n        // simulate a node move event\n        String oldPath = superimposedResource.getPath();\n        moveSuperimposedResource(superimposedResource, \"/new/path\");\n\n        // prepare a query that returns the moved superimposed resource\n        when(resourceResolver.findResources(\"query\", \"syntax\")).then(new Answer<Iterator<Resource>>() {\n            public Iterator<Resource> answer(InvocationOnMock invocation) {\n                return Arrays.asList(new Resource[] {\n                        superimposedResource\n                }).iterator();\n            }\n        });\n\n        underTest.onEvent(prepareNodeMoveEvent(superimposedResource, oldPath));\n\n        // ensure the superimposed resource update is detected and a new provider instance is registered\n        List<SuperimposingResourceProvider> providers = IteratorUtils.toList(underTest.getRegisteredProviders());\n        assertEquals(1, providers.size());\n        SuperimposingResourceProvider provider = providers.iterator().next();\n        assertEquals(\"/new/path\", provider.getRootPath());\n        assertEquals(ORIGINAL_PATH, provider.getSourcePath());\n        assertFalse(provider.isOverlayable());\n        verify(bundleContext).registerService(anyString(), same(provider), any(Dictionary.class));\n    }","commit_id":"b644be12fc9af35321855a27a9de8a0c31185661","url":"https://github.com/apache/sling"},{"original_method":"@Test\n    public void testSuperimposedResourceCreateUpdateRemove() throws InterruptedException, LoginException, RepositoryException {\n        initialize(true);\n\n        // simulate node create event\n        Resource superimposedResource = prepareSuperimposingResource(SUPERIMPOSED_PATH, ORIGINAL_PATH, false, false);\n        underTest.onEvent(prepareNodeCreateEvent(superimposedResource));\n\n        // ensure the superimposed resource is detected and registered\n        Map<String, SuperimposingResourceProvider> providers = underTest.getRegisteredProviders();\n        assertEquals(1, providers.size());\n        SuperimposingResourceProvider provider = providers.values().iterator().next();\n        assertEquals(SUPERIMPOSED_PATH, provider.getRootPath());\n        assertEquals(ORIGINAL_PATH, provider.getSourcePath());\n        assertFalse(provider.isOverlayable());\n        verify(bundleContext).registerService(anyString(), same(provider), any(Dictionary.class));\n\n        // simulate a change in the original path\n        superimposedResource.adaptTo(ValueMap.class).put(PROP_SUPERIMPOSE_SOURCE_PATH, \"/other/path\");\n        underTest.onEvent(prepareNodeChangeEvent(superimposedResource));\n\n        // ensure the superimposed resource update is detected and a new provider instance is registered\n        providers = underTest.getRegisteredProviders();\n        assertEquals(1, providers.size());\n        SuperimposingResourceProvider provider2 = providers.values().iterator().next();\n        assertEquals(SUPERIMPOSED_PATH, provider2.getRootPath());\n        assertEquals(\"/other/path\", provider2.getSourcePath());\n        assertFalse(provider2.isOverlayable());\n        verify(bundleContext).registerService(anyString(), same(provider2), any(Dictionary.class));\n\n        // simulate node removal\n        underTest.onEvent(prepareNodeRemoveEvent(superimposedResource));\n\n        // ensure provider is removed\n        providers = underTest.getRegisteredProviders();\n        assertEquals(0, providers.size());\n    }","id":105196,"modified_method":"@SuppressWarnings(\"unchecked\")\n    @Test\n    public void testSuperimposedResourceCreateUpdateRemove() throws InterruptedException, LoginException, RepositoryException {\n        initialize(true);\n\n        // simulate node create event\n        Resource superimposedResource = prepareSuperimposingResource(SUPERIMPOSED_PATH, ORIGINAL_PATH, false, false);\n        underTest.onEvent(prepareNodeCreateEvent(superimposedResource));\n\n        // ensure the superimposed resource is detected and registered\n        List<SuperimposingResourceProvider> providers = IteratorUtils.toList(underTest.getRegisteredProviders());\n        assertEquals(1, providers.size());\n        SuperimposingResourceProvider provider = providers.iterator().next();\n        assertEquals(SUPERIMPOSED_PATH, provider.getRootPath());\n        assertEquals(ORIGINAL_PATH, provider.getSourcePath());\n        assertFalse(provider.isOverlayable());\n        verify(bundleContext).registerService(anyString(), same(provider), any(Dictionary.class));\n\n        // simulate a change in the original path\n        superimposedResource.adaptTo(ValueMap.class).put(PROP_SUPERIMPOSE_SOURCE_PATH, \"/other/path\");\n        underTest.onEvent(prepareNodeChangeEvent(superimposedResource));\n\n        // ensure the superimposed resource update is detected and a new provider instance is registered\n        providers = IteratorUtils.toList(underTest.getRegisteredProviders());\n        assertEquals(1, providers.size());\n        SuperimposingResourceProvider provider2 = providers.iterator().next();\n        assertEquals(SUPERIMPOSED_PATH, provider2.getRootPath());\n        assertEquals(\"/other/path\", provider2.getSourcePath());\n        assertFalse(provider2.isOverlayable());\n        verify(bundleContext).registerService(anyString(), same(provider2), any(Dictionary.class));\n\n        // simulate node removal\n        underTest.onEvent(prepareNodeRemoveEvent(superimposedResource));\n\n        // ensure provider is removed\n        providers = IteratorUtils.toList(underTest.getRegisteredProviders());\n        assertEquals(0, providers.size());\n    }","commit_id":"b644be12fc9af35321855a27a9de8a0c31185661","url":"https://github.com/apache/sling"},{"original_method":"public static void main(String[] args) {\n        final boolean waitForRequest = true;\n        final boolean spawn = true;\n        final ByteSizeValue payloadSize = new ByteSizeValue(100, ByteSizeUnit.BYTES);\n        final int NUMBER_OF_CLIENTS = 1;\n        final int NUMBER_OF_ITERATIONS = 100000;\n        final byte[] payload = new byte[(int) payloadSize.bytes()];\n        final AtomicLong idGenerator = new AtomicLong();\n\n        Settings settings = ImmutableSettings.settingsBuilder()\n                .put(\"network.server\", false)\n                .build();\n\n        final ThreadPool threadPool = new CachedThreadPool(settings);\n//        final ThreadPool threadPool = new ScalingThreadPool(settings);\n        final TimerService timerService = new TimerService(settings, threadPool);\n        final TransportService transportService = new TransportService(new NettyTransport(settings, threadPool), threadPool, timerService).start();\n\n        final DiscoveryNode node = new DiscoveryNode(\"server\", new InetSocketTransportAddress(\"localhost\", 9999));\n\n        transportService.connectToNode(node);\n\n        for (int i = 0; i < 10000; i++) {\n            BenchmarkMessage message = new BenchmarkMessage(1, payload);\n            transportService.submitRequest(node, \"benchmark\", message, new BaseTransportResponseHandler<BenchmarkMessage>() {\n                @Override public BenchmarkMessage newInstance() {\n                    return new BenchmarkMessage();\n                }\n\n                @Override public void handleResponse(BenchmarkMessage response) {\n                }\n\n                @Override public void handleException(RemoteTransportException exp) {\n                    exp.printStackTrace();\n                }\n            }).txGet();\n        }\n\n\n        Thread[] clients = new Thread[NUMBER_OF_CLIENTS];\n        final CountDownLatch latch = new CountDownLatch(NUMBER_OF_CLIENTS * NUMBER_OF_ITERATIONS);\n        for (int i = 0; i < NUMBER_OF_CLIENTS; i++) {\n            clients[i] = new Thread(new Runnable() {\n                @Override public void run() {\n                    for (int j = 0; j < NUMBER_OF_ITERATIONS; j++) {\n                        final long id = idGenerator.incrementAndGet();\n                        BenchmarkMessage message = new BenchmarkMessage(id, payload);\n                        BaseTransportResponseHandler<BenchmarkMessage> handler = new BaseTransportResponseHandler<BenchmarkMessage>() {\n                            @Override public BenchmarkMessage newInstance() {\n                                return new BenchmarkMessage();\n                            }\n\n                            @Override public void handleResponse(BenchmarkMessage response) {\n                                if (response.id != id) {\n                                    System.out.println(\"NO ID MATCH [\" + response.id + \"] and [\" + id + \"]\");\n                                }\n                                latch.countDown();\n                            }\n\n                            @Override public void handleException(RemoteTransportException exp) {\n                                exp.printStackTrace();\n                                latch.countDown();\n                            }\n\n                            @Override public boolean spawn() {\n                                return spawn;\n                            }\n                        };\n\n                        if (waitForRequest) {\n                            transportService.submitRequest(node, \"benchmark\", message, handler).txGet();\n                        } else {\n                            transportService.sendRequest(node, \"benchmark\", message, handler);\n                        }\n                    }\n                }\n            });\n        }\n\n        StopWatch stopWatch = new StopWatch().start();\n        for (int i = 0; i < NUMBER_OF_CLIENTS; i++) {\n            clients[i].start();\n        }\n\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        stopWatch.stop();\n\n        System.out.println(\"Ran [\" + NUMBER_OF_CLIENTS + \"], each with [\" + NUMBER_OF_ITERATIONS + \"] iterations, payload [\" + payloadSize + \"]: took [\" + stopWatch.totalTime() + \"], TPS: \" + (NUMBER_OF_CLIENTS * NUMBER_OF_ITERATIONS) / stopWatch.totalTime().secondsFrac());\n\n        transportService.close();\n        threadPool.shutdownNow();\n    }","id":105197,"modified_method":"public static void main(String[] args) {\n        final boolean waitForRequest = true;\n        final boolean spawn = true;\n        final ByteSizeValue payloadSize = new ByteSizeValue(100, ByteSizeUnit.BYTES);\n        final int NUMBER_OF_CLIENTS = 1;\n        final int NUMBER_OF_ITERATIONS = 100000;\n        final byte[] payload = new byte[(int) payloadSize.bytes()];\n        final AtomicLong idGenerator = new AtomicLong();\n\n        Settings settings = ImmutableSettings.settingsBuilder()\n                .put(\"network.server\", false)\n                .put(\"network.tcp.blocking\", false)\n                .build();\n\n        final ThreadPool threadPool = new CachedThreadPool(settings);\n//        final ThreadPool threadPool = new ScalingThreadPool(settings);\n        final TimerService timerService = new TimerService(settings, threadPool);\n        final TransportService transportService = new TransportService(new NettyTransport(settings, threadPool), threadPool, timerService).start();\n\n        final DiscoveryNode node = new DiscoveryNode(\"server\", new InetSocketTransportAddress(\"localhost\", 9999));\n\n        transportService.connectToNode(node);\n\n        for (int i = 0; i < 10000; i++) {\n            BenchmarkMessage message = new BenchmarkMessage(1, payload);\n            transportService.submitRequest(node, \"benchmark\", message, new BaseTransportResponseHandler<BenchmarkMessage>() {\n                @Override public BenchmarkMessage newInstance() {\n                    return new BenchmarkMessage();\n                }\n\n                @Override public void handleResponse(BenchmarkMessage response) {\n                }\n\n                @Override public void handleException(RemoteTransportException exp) {\n                    exp.printStackTrace();\n                }\n            }).txGet();\n        }\n\n\n        Thread[] clients = new Thread[NUMBER_OF_CLIENTS];\n        final CountDownLatch latch = new CountDownLatch(NUMBER_OF_CLIENTS * NUMBER_OF_ITERATIONS);\n        for (int i = 0; i < NUMBER_OF_CLIENTS; i++) {\n            clients[i] = new Thread(new Runnable() {\n                @Override public void run() {\n                    for (int j = 0; j < NUMBER_OF_ITERATIONS; j++) {\n                        final long id = idGenerator.incrementAndGet();\n                        BenchmarkMessage message = new BenchmarkMessage(id, payload);\n                        BaseTransportResponseHandler<BenchmarkMessage> handler = new BaseTransportResponseHandler<BenchmarkMessage>() {\n                            @Override public BenchmarkMessage newInstance() {\n                                return new BenchmarkMessage();\n                            }\n\n                            @Override public void handleResponse(BenchmarkMessage response) {\n                                if (response.id != id) {\n                                    System.out.println(\"NO ID MATCH [\" + response.id + \"] and [\" + id + \"]\");\n                                }\n                                latch.countDown();\n                            }\n\n                            @Override public void handleException(RemoteTransportException exp) {\n                                exp.printStackTrace();\n                                latch.countDown();\n                            }\n\n                            @Override public boolean spawn() {\n                                return spawn;\n                            }\n                        };\n\n                        if (waitForRequest) {\n                            transportService.submitRequest(node, \"benchmark\", message, handler).txGet();\n                        } else {\n                            transportService.sendRequest(node, \"benchmark\", message, handler);\n                        }\n                    }\n                }\n            });\n        }\n\n        StopWatch stopWatch = new StopWatch().start();\n        for (int i = 0; i < NUMBER_OF_CLIENTS; i++) {\n            clients[i].start();\n        }\n\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        stopWatch.stop();\n\n        System.out.println(\"Ran [\" + NUMBER_OF_CLIENTS + \"], each with [\" + NUMBER_OF_ITERATIONS + \"] iterations, payload [\" + payloadSize + \"]: took [\" + stopWatch.totalTime() + \"], TPS: \" + (NUMBER_OF_CLIENTS * NUMBER_OF_ITERATIONS) / stopWatch.totalTime().secondsFrac());\n\n        transportService.close();\n        threadPool.shutdownNow();\n    }","commit_id":"3f6cd467362761195353164484ba3551c23d6cd5","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public static void main(String[] args) {\n        final ByteSizeValue payloadSize = new ByteSizeValue(100, ByteSizeUnit.BYTES);\n        final int NUMBER_OF_CLIENTS = 3;\n        final int NUMBER_OF_ITERATIONS = 100000;\n        final byte[] payload = new byte[(int) payloadSize.bytes()];\n        final AtomicLong idGenerator = new AtomicLong();\n\n        final BenchmarkTransportResponseHandler responseHandler = new BenchmarkTransportResponseHandler();\n\n        Settings settings = ImmutableSettings.settingsBuilder()\n                .put(\"network.server\", false)\n                .build();\n\n        final ThreadPool threadPool = new CachedThreadPool(settings);\n//        final ThreadPool threadPool = new ScalingThreadPool(settings);\n        final TimerService timerService = new TimerService(settings, threadPool);\n        final TransportService transportService = new TransportService(new NettyTransport(settings, threadPool), threadPool, timerService).start();\n\n        final DiscoveryNode node = new DiscoveryNode(\"server\", new InetSocketTransportAddress(\"localhost\", 9999));\n\n        transportService.connectToNode(node);\n\n        // warm things up\n        for (int i = 0; i < 10000; i++) {\n            BenchmarkMessage message = new BenchmarkMessage(1, payload);\n            transportService.submitRequest(node, \"benchmark\", message, responseHandler).txGet();\n        }\n\n\n        Thread[] clients = new Thread[NUMBER_OF_CLIENTS];\n        final CountDownLatch latch = new CountDownLatch(NUMBER_OF_CLIENTS);\n        for (int i = 0; i < NUMBER_OF_CLIENTS; i++) {\n            clients[i] = new Thread(new Runnable() {\n                @Override public void run() {\n                    for (int j = 0; j < NUMBER_OF_ITERATIONS; j++) {\n                        final long id = idGenerator.incrementAndGet();\n                        BenchmarkMessage message = new BenchmarkMessage(id, payload);\n                        transportService.submitRequest(node, \"benchmark\", message, responseHandler).txGet();\n                    }\n                    latch.countDown();\n                }\n            });\n        }\n\n        StopWatch stopWatch = new StopWatch().start();\n        for (int i = 0; i < NUMBER_OF_CLIENTS; i++) {\n            clients[i].start();\n        }\n\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        stopWatch.stop();\n\n        System.out.println(\"Ran [\" + NUMBER_OF_CLIENTS + \"], each with [\" + NUMBER_OF_ITERATIONS + \"] iterations, payload [\" + payloadSize + \"]: took [\" + stopWatch.totalTime() + \"], TPS: \" + (NUMBER_OF_CLIENTS * NUMBER_OF_ITERATIONS) / stopWatch.totalTime().secondsFrac());\n\n        transportService.close();\n        threadPool.shutdownNow();\n    }","id":105198,"modified_method":"public static void main(String[] args) {\n        final ByteSizeValue payloadSize = new ByteSizeValue(100, ByteSizeUnit.BYTES);\n        final int NUMBER_OF_CLIENTS = 3;\n        final int NUMBER_OF_ITERATIONS = 100000;\n        final byte[] payload = new byte[(int) payloadSize.bytes()];\n        final AtomicLong idGenerator = new AtomicLong();\n\n        final BenchmarkTransportResponseHandler responseHandler = new BenchmarkTransportResponseHandler();\n\n        Settings settings = ImmutableSettings.settingsBuilder()\n                .put(\"network.server\", false)\n                .put(\"network.tcp.blocking\", false)\n                .build();\n\n        final ThreadPool threadPool = new CachedThreadPool(settings);\n//        final ThreadPool threadPool = new ScalingThreadPool(settings);\n        final TimerService timerService = new TimerService(settings, threadPool);\n        final TransportService transportService = new TransportService(new NettyTransport(settings, threadPool), threadPool, timerService).start();\n\n        final DiscoveryNode node = new DiscoveryNode(\"server\", new InetSocketTransportAddress(\"localhost\", 9999));\n\n        transportService.connectToNode(node);\n\n        // warm things up\n        for (int i = 0; i < 10000; i++) {\n            BenchmarkMessage message = new BenchmarkMessage(1, payload);\n            transportService.submitRequest(node, \"benchmark\", message, responseHandler).txGet();\n        }\n\n\n        Thread[] clients = new Thread[NUMBER_OF_CLIENTS];\n        final CountDownLatch latch = new CountDownLatch(NUMBER_OF_CLIENTS);\n        for (int i = 0; i < NUMBER_OF_CLIENTS; i++) {\n            clients[i] = new Thread(new Runnable() {\n                @Override public void run() {\n                    for (int j = 0; j < NUMBER_OF_ITERATIONS; j++) {\n                        final long id = idGenerator.incrementAndGet();\n                        BenchmarkMessage message = new BenchmarkMessage(id, payload);\n                        transportService.submitRequest(node, \"benchmark\", message, responseHandler).txGet();\n                    }\n                    latch.countDown();\n                }\n            });\n        }\n\n        StopWatch stopWatch = new StopWatch().start();\n        for (int i = 0; i < NUMBER_OF_CLIENTS; i++) {\n            clients[i].start();\n        }\n\n        try {\n            latch.await();\n        } catch (InterruptedException e) {\n            e.printStackTrace();\n        }\n        stopWatch.stop();\n\n        System.out.println(\"Ran [\" + NUMBER_OF_CLIENTS + \"], each with [\" + NUMBER_OF_ITERATIONS + \"] iterations, payload [\" + payloadSize + \"]: took [\" + stopWatch.totalTime() + \"], TPS: \" + (NUMBER_OF_CLIENTS * NUMBER_OF_ITERATIONS) / stopWatch.totalTime().secondsFrac());\n\n        transportService.close();\n        threadPool.shutdownNow();\n    }","commit_id":"3f6cd467362761195353164484ba3551c23d6cd5","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public static void main(String[] args) {\n        final boolean spawn = true;\n\n        Settings settings = ImmutableSettings.settingsBuilder()\n                .put(\"transport.netty.port\", 9999)\n                .build();\n\n        final ThreadPool threadPool = new CachedThreadPool(settings);\n//        final ThreadPool threadPool = new ScalingThreadPool(settings);\n        final TimerService timerService = new TimerService(settings, threadPool);\n        final TransportService transportService = new TransportService(new NettyTransport(settings, threadPool), threadPool, timerService).start();\n\n        transportService.registerHandler(\"benchmark\", new BaseTransportRequestHandler<BenchmarkMessage>() {\n            @Override public BenchmarkMessage newInstance() {\n                return new BenchmarkMessage();\n            }\n\n            @Override public void messageReceived(BenchmarkMessage request, TransportChannel channel) throws Exception {\n                channel.sendResponse(request);\n            }\n\n            @Override public boolean spawn() {\n                return spawn;\n            }\n        });\n\n        final Object mutex = new Object();\n\n        Runtime.getRuntime().addShutdownHook(new Thread() {\n            @Override public void run() {\n                transportService.close();\n                threadPool.shutdownNow();\n                synchronized (mutex) {\n                    mutex.notifyAll();\n                }\n            }\n        });\n\n        synchronized (mutex) {\n            try {\n                mutex.wait();\n            } catch (InterruptedException e) {\n                // ok?\n            }\n        }\n    }","id":105199,"modified_method":"public static void main(String[] args) {\n        final boolean spawn = true;\n\n        Settings settings = ImmutableSettings.settingsBuilder()\n                .put(\"transport.netty.port\", 9999)\n                .put(\"network.tcp.blocking\", false)\n                .build();\n\n        final ThreadPool threadPool = new CachedThreadPool(settings);\n//        final ThreadPool threadPool = new ScalingThreadPool(settings);\n        final TimerService timerService = new TimerService(settings, threadPool);\n        final TransportService transportService = new TransportService(new NettyTransport(settings, threadPool), threadPool, timerService).start();\n\n        transportService.registerHandler(\"benchmark\", new BaseTransportRequestHandler<BenchmarkMessage>() {\n            @Override public BenchmarkMessage newInstance() {\n                return new BenchmarkMessage();\n            }\n\n            @Override public void messageReceived(BenchmarkMessage request, TransportChannel channel) throws Exception {\n                channel.sendResponse(request);\n            }\n\n            @Override public boolean spawn() {\n                return spawn;\n            }\n        });\n\n        final Object mutex = new Object();\n\n        Runtime.getRuntime().addShutdownHook(new Thread() {\n            @Override public void run() {\n                transportService.close();\n                threadPool.shutdownNow();\n                synchronized (mutex) {\n                    mutex.notifyAll();\n                }\n            }\n        });\n\n        synchronized (mutex) {\n            try {\n                mutex.wait();\n            } catch (InterruptedException e) {\n                // ok?\n            }\n        }\n    }","commit_id":"3f6cd467362761195353164484ba3551c23d6cd5","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override protected void doStart() throws ElasticSearchException {\n        this.serverOpenChannels = new OpenChannelsHandler();\n\n        serverBootstrap = new ServerBootstrap(new NioServerSocketChannelFactory(\n                Executors.newCachedThreadPool(daemonThreadFactory(settings, \"httpBoss\")),\n                Executors.newCachedThreadPool(daemonThreadFactory(settings, \"httpIoWorker\")),\n                workerCount));\n\n        final HttpRequestHandler requestHandler = new HttpRequestHandler(this);\n\n        ChannelPipelineFactory pipelineFactory = new ChannelPipelineFactory() {\n            @Override public ChannelPipeline getPipeline() throws Exception {\n                ChannelPipeline pipeline = Channels.pipeline();\n                pipeline.addLast(\"openChannels\", serverOpenChannels);\n                pipeline.addLast(\"decoder\", new HttpRequestDecoder());\n                pipeline.addLast(\"aggregator\", new HttpChunkAggregator((int) maxContentLength.bytes()));\n                pipeline.addLast(\"encoder\", new HttpResponseEncoder());\n                pipeline.addLast(\"handler\", requestHandler);\n                return pipeline;\n            }\n        };\n\n        serverBootstrap.setPipelineFactory(pipelineFactory);\n\n        if (tcpNoDelay != null) {\n            serverBootstrap.setOption(\"child.tcpNoDelay\", tcpNoDelay);\n        }\n        if (tcpKeepAlive != null) {\n            serverBootstrap.setOption(\"child.keepAlive\", tcpKeepAlive);\n        }\n        if (tcpSendBufferSize != null) {\n            serverBootstrap.setOption(\"child.sendBufferSize\", tcpSendBufferSize.bytes());\n        }\n        if (tcpReceiveBufferSize != null) {\n            serverBootstrap.setOption(\"child.receiveBufferSize\", tcpReceiveBufferSize.bytes());\n        }\n        if (reuseAddress != null) {\n            serverBootstrap.setOption(\"reuseAddress\", reuseAddress);\n            serverBootstrap.setOption(\"child.reuseAddress\", reuseAddress);\n        }\n\n        // Bind and start to accept incoming connections.\n        InetAddress hostAddressX;\n        try {\n            hostAddressX = networkService.resolveBindHostAddress(bindHost);\n        } catch (IOException e) {\n            throw new BindHttpException(\"Failed to resolve host [\" + bindHost + \"]\", e);\n        }\n        final InetAddress hostAddress = hostAddressX;\n\n        PortsRange portsRange = new PortsRange(port);\n        final AtomicReference<Exception> lastException = new AtomicReference<Exception>();\n        boolean success = portsRange.iterate(new PortsRange.PortCallback() {\n            @Override public boolean onPortNumber(int portNumber) {\n                try {\n                    serverChannel = serverBootstrap.bind(new InetSocketAddress(hostAddress, portNumber));\n                } catch (Exception e) {\n                    lastException.set(e);\n                    return false;\n                }\n                return true;\n            }\n        });\n        if (!success) {\n            throw new BindHttpException(\"Failed to bind to [\" + port + \"]\", lastException.get());\n        }\n\n        InetSocketAddress boundAddress = (InetSocketAddress) serverChannel.getLocalAddress();\n        InetSocketAddress publishAddress;\n        try {\n            publishAddress = new InetSocketAddress(networkService.resolvePublishHostAddress(publishHost), boundAddress.getPort());\n        } catch (Exception e) {\n            throw new BindTransportException(\"Failed to resolve publish address\", e);\n        }\n        this.boundAddress = new BoundTransportAddress(new InetSocketTransportAddress(boundAddress), new InetSocketTransportAddress(publishAddress));\n    }","id":105200,"modified_method":"@Override protected void doStart() throws ElasticSearchException {\n        this.serverOpenChannels = new OpenChannelsHandler();\n\n        if (blockingServer) {\n            serverBootstrap = new ServerBootstrap(new OioServerSocketChannelFactory(\n                    Executors.newCachedThreadPool(daemonThreadFactory(settings, \"http_server_boss\")),\n                    Executors.newCachedThreadPool(daemonThreadFactory(settings, \"http_server_worker\"))\n            ));\n        } else {\n            serverBootstrap = new ServerBootstrap(new NioServerSocketChannelFactory(\n                    Executors.newCachedThreadPool(daemonThreadFactory(settings, \"http_server_boss\")),\n                    Executors.newCachedThreadPool(daemonThreadFactory(settings, \"http_server_worker\")),\n                    workerCount));\n        }\n\n        final HttpRequestHandler requestHandler = new HttpRequestHandler(this);\n\n        ChannelPipelineFactory pipelineFactory = new ChannelPipelineFactory() {\n            @Override public ChannelPipeline getPipeline() throws Exception {\n                ChannelPipeline pipeline = Channels.pipeline();\n                pipeline.addLast(\"openChannels\", serverOpenChannels);\n                pipeline.addLast(\"decoder\", new HttpRequestDecoder());\n                pipeline.addLast(\"aggregator\", new HttpChunkAggregator((int) maxContentLength.bytes()));\n                pipeline.addLast(\"encoder\", new HttpResponseEncoder());\n                pipeline.addLast(\"handler\", requestHandler);\n                return pipeline;\n            }\n        };\n\n        serverBootstrap.setPipelineFactory(pipelineFactory);\n\n        if (tcpNoDelay != null) {\n            serverBootstrap.setOption(\"child.tcpNoDelay\", tcpNoDelay);\n        }\n        if (tcpKeepAlive != null) {\n            serverBootstrap.setOption(\"child.keepAlive\", tcpKeepAlive);\n        }\n        if (tcpSendBufferSize != null) {\n            serverBootstrap.setOption(\"child.sendBufferSize\", tcpSendBufferSize.bytes());\n        }\n        if (tcpReceiveBufferSize != null) {\n            serverBootstrap.setOption(\"child.receiveBufferSize\", tcpReceiveBufferSize.bytes());\n        }\n        if (reuseAddress != null) {\n            serverBootstrap.setOption(\"reuseAddress\", reuseAddress);\n            serverBootstrap.setOption(\"child.reuseAddress\", reuseAddress);\n        }\n\n        // Bind and start to accept incoming connections.\n        InetAddress hostAddressX;\n        try {\n            hostAddressX = networkService.resolveBindHostAddress(bindHost);\n        } catch (IOException e) {\n            throw new BindHttpException(\"Failed to resolve host [\" + bindHost + \"]\", e);\n        }\n        final InetAddress hostAddress = hostAddressX;\n\n        PortsRange portsRange = new PortsRange(port);\n        final AtomicReference<Exception> lastException = new AtomicReference<Exception>();\n        boolean success = portsRange.iterate(new PortsRange.PortCallback() {\n            @Override public boolean onPortNumber(int portNumber) {\n                try {\n                    serverChannel = serverBootstrap.bind(new InetSocketAddress(hostAddress, portNumber));\n                } catch (Exception e) {\n                    lastException.set(e);\n                    return false;\n                }\n                return true;\n            }\n        });\n        if (!success) {\n            throw new BindHttpException(\"Failed to bind to [\" + port + \"]\", lastException.get());\n        }\n\n        InetSocketAddress boundAddress = (InetSocketAddress) serverChannel.getLocalAddress();\n        InetSocketAddress publishAddress;\n        try {\n            publishAddress = new InetSocketAddress(networkService.resolvePublishHostAddress(publishHost), boundAddress.getPort());\n        } catch (Exception e) {\n            throw new BindTransportException(\"Failed to resolve publish address\", e);\n        }\n        this.boundAddress = new BoundTransportAddress(new InetSocketTransportAddress(boundAddress), new InetSocketTransportAddress(publishAddress));\n    }","commit_id":"3f6cd467362761195353164484ba3551c23d6cd5","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Inject public NettyHttpServerTransport(Settings settings, NetworkService networkService) {\n        super(settings);\n        this.networkService = networkService;\n        ByteSizeValue maxContentLength = componentSettings.getAsBytesSize(\"max_content_length\", settings.getAsBytesSize(\"http.max_content_length\", new ByteSizeValue(100, ByteSizeUnit.MB)));\n        this.workerCount = componentSettings.getAsInt(\"worker_count\", Runtime.getRuntime().availableProcessors());\n        this.port = componentSettings.get(\"port\", settings.get(\"http.port\", \"9200-9300\"));\n        this.bindHost = componentSettings.get(\"bind_host\");\n        this.publishHost = componentSettings.get(\"publish_host\");\n        this.tcpNoDelay = componentSettings.getAsBoolean(\"tcp_no_delay\", settings.getAsBoolean(TCP_NO_DELAY, true));\n        this.tcpKeepAlive = componentSettings.getAsBoolean(\"tcp_keep_alive\", settings.getAsBoolean(TCP_KEEP_ALIVE, null));\n        this.reuseAddress = componentSettings.getAsBoolean(\"reuse_address\", settings.getAsBoolean(TCP_REUSE_ADDRESS, NetworkUtils.defaultReuseAddress()));\n        this.tcpSendBufferSize = componentSettings.getAsBytesSize(\"tcp_send_buffer_size\", settings.getAsBytesSize(TCP_SEND_BUFFER_SIZE, null));\n        this.tcpReceiveBufferSize = componentSettings.getAsBytesSize(\"tcp_receive_buffer_size\", settings.getAsBytesSize(TCP_RECEIVE_BUFFER_SIZE, null));\n\n        // validate max content length\n        if (maxContentLength.bytes() > Integer.MAX_VALUE) {\n            logger.warn(\"maxContentLength[\" + maxContentLength + \"] set to high value, resetting it to [100mb]\");\n            maxContentLength = new ByteSizeValue(100, ByteSizeUnit.MB);\n        }\n        this.maxContentLength = maxContentLength;\n    }","id":105201,"modified_method":"@Inject public NettyHttpServerTransport(Settings settings, NetworkService networkService) {\n        super(settings);\n        this.networkService = networkService;\n        ByteSizeValue maxContentLength = componentSettings.getAsBytesSize(\"max_content_length\", settings.getAsBytesSize(\"http.max_content_length\", new ByteSizeValue(100, ByteSizeUnit.MB)));\n        this.workerCount = componentSettings.getAsInt(\"worker_count\", Runtime.getRuntime().availableProcessors());\n        this.blockingServer = componentSettings.getAsBoolean(\"http.blocking_server\", componentSettings.getAsBoolean(TCP_BLOCKING_SERVER, componentSettings.getAsBoolean(TCP_BLOCKING, false)));\n        this.port = componentSettings.get(\"port\", settings.get(\"http.port\", \"9200-9300\"));\n        this.bindHost = componentSettings.get(\"bind_host\");\n        this.publishHost = componentSettings.get(\"publish_host\");\n        this.tcpNoDelay = componentSettings.getAsBoolean(\"tcp_no_delay\", settings.getAsBoolean(TCP_NO_DELAY, true));\n        this.tcpKeepAlive = componentSettings.getAsBoolean(\"tcp_keep_alive\", settings.getAsBoolean(TCP_KEEP_ALIVE, null));\n        this.reuseAddress = componentSettings.getAsBoolean(\"reuse_address\", settings.getAsBoolean(TCP_REUSE_ADDRESS, NetworkUtils.defaultReuseAddress()));\n        this.tcpSendBufferSize = componentSettings.getAsBytesSize(\"tcp_send_buffer_size\", settings.getAsBytesSize(TCP_SEND_BUFFER_SIZE, null));\n        this.tcpReceiveBufferSize = componentSettings.getAsBytesSize(\"tcp_receive_buffer_size\", settings.getAsBytesSize(TCP_RECEIVE_BUFFER_SIZE, null));\n\n        // validate max content length\n        if (maxContentLength.bytes() > Integer.MAX_VALUE) {\n            logger.warn(\"maxContentLength[\" + maxContentLength + \"] set to high value, resetting it to [100mb]\");\n            maxContentLength = new ByteSizeValue(100, ByteSizeUnit.MB);\n        }\n        this.maxContentLength = maxContentLength;\n    }","commit_id":"3f6cd467362761195353164484ba3551c23d6cd5","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override protected void doStart() throws ElasticSearchException {\n        this.serverOpenChannels = new OpenChannelsHandler();\n\n        serverBootstrap = new ServerBootstrap(new NioServerSocketChannelFactory(\n                Executors.newCachedThreadPool(daemonThreadFactory(settings, \"memcachedBoss\")),\n                Executors.newCachedThreadPool(daemonThreadFactory(settings, \"memcachedIoWorker\")),\n                workerCount));\n\n        ChannelPipelineFactory pipelineFactory = new ChannelPipelineFactory() {\n            @Override public ChannelPipeline getPipeline() throws Exception {\n                ChannelPipeline pipeline = Channels.pipeline();\n                pipeline.addLast(\"openChannels\", serverOpenChannels);\n                pipeline.addLast(\"decoder\", new MemcachedDecoder());\n                pipeline.addLast(\"dispatcher\", new MemcachedDispatcher(restController));\n                return pipeline;\n            }\n        };\n\n        serverBootstrap.setPipelineFactory(pipelineFactory);\n\n        if (tcpNoDelay != null) {\n            serverBootstrap.setOption(\"child.tcpNoDelay\", tcpNoDelay);\n        }\n        if (tcpKeepAlive != null) {\n            serverBootstrap.setOption(\"child.keepAlive\", tcpKeepAlive);\n        }\n        if (tcpSendBufferSize != null) {\n            serverBootstrap.setOption(\"child.sendBufferSize\", tcpSendBufferSize.bytes());\n        }\n        if (tcpReceiveBufferSize != null) {\n            serverBootstrap.setOption(\"child.receiveBufferSize\", tcpReceiveBufferSize.bytes());\n        }\n        if (reuseAddress != null) {\n            serverBootstrap.setOption(\"reuseAddress\", reuseAddress);\n            serverBootstrap.setOption(\"child.reuseAddress\", reuseAddress);\n        }\n\n        // Bind and start to accept incoming connections.\n        InetAddress hostAddressX;\n        try {\n            hostAddressX = networkService.resolveBindHostAddress(bindHost);\n        } catch (IOException e) {\n            throw new BindHttpException(\"Failed to resolve host [\" + bindHost + \"]\", e);\n        }\n        final InetAddress hostAddress = hostAddressX;\n\n        PortsRange portsRange = new PortsRange(port);\n        final AtomicReference<Exception> lastException = new AtomicReference<Exception>();\n        boolean success = portsRange.iterate(new PortsRange.PortCallback() {\n            @Override public boolean onPortNumber(int portNumber) {\n                try {\n                    serverChannel = serverBootstrap.bind(new InetSocketAddress(hostAddress, portNumber));\n                } catch (Exception e) {\n                    lastException.set(e);\n                    return false;\n                }\n                return true;\n            }\n        });\n        if (!success) {\n            throw new BindHttpException(\"Failed to bind to [\" + port + \"]\", lastException.get());\n        }\n\n        InetSocketAddress boundAddress = (InetSocketAddress) serverChannel.getLocalAddress();\n        InetSocketAddress publishAddress;\n        try {\n            publishAddress = new InetSocketAddress(networkService.resolvePublishHostAddress(publishHost), boundAddress.getPort());\n        } catch (Exception e) {\n            throw new BindTransportException(\"Failed to resolve publish address\", e);\n        }\n        this.boundAddress = new BoundTransportAddress(new InetSocketTransportAddress(boundAddress), new InetSocketTransportAddress(publishAddress));\n    }","id":105202,"modified_method":"@Override protected void doStart() throws ElasticSearchException {\n        this.serverOpenChannels = new OpenChannelsHandler();\n\n        if (blockingServer) {\n            serverBootstrap = new ServerBootstrap(new OioServerSocketChannelFactory(\n                    Executors.newCachedThreadPool(daemonThreadFactory(settings, \"memcached_server_boss\")),\n                    Executors.newCachedThreadPool(daemonThreadFactory(settings, \"memcached_server_worker\"))\n            ));\n        } else {\n            serverBootstrap = new ServerBootstrap(new NioServerSocketChannelFactory(\n                    Executors.newCachedThreadPool(daemonThreadFactory(settings, \"memcached_server_boss\")),\n                    Executors.newCachedThreadPool(daemonThreadFactory(settings, \"memcached_server_worker\")),\n                    workerCount));\n        }\n\n        ChannelPipelineFactory pipelineFactory = new ChannelPipelineFactory() {\n            @Override public ChannelPipeline getPipeline() throws Exception {\n                ChannelPipeline pipeline = Channels.pipeline();\n                pipeline.addLast(\"openChannels\", serverOpenChannels);\n                pipeline.addLast(\"decoder\", new MemcachedDecoder());\n                pipeline.addLast(\"dispatcher\", new MemcachedDispatcher(restController));\n                return pipeline;\n            }\n        };\n\n        serverBootstrap.setPipelineFactory(pipelineFactory);\n\n        if (tcpNoDelay != null) {\n            serverBootstrap.setOption(\"child.tcpNoDelay\", tcpNoDelay);\n        }\n        if (tcpKeepAlive != null) {\n            serverBootstrap.setOption(\"child.keepAlive\", tcpKeepAlive);\n        }\n        if (tcpSendBufferSize != null) {\n            serverBootstrap.setOption(\"child.sendBufferSize\", tcpSendBufferSize.bytes());\n        }\n        if (tcpReceiveBufferSize != null) {\n            serverBootstrap.setOption(\"child.receiveBufferSize\", tcpReceiveBufferSize.bytes());\n        }\n        if (reuseAddress != null) {\n            serverBootstrap.setOption(\"reuseAddress\", reuseAddress);\n            serverBootstrap.setOption(\"child.reuseAddress\", reuseAddress);\n        }\n\n        // Bind and start to accept incoming connections.\n        InetAddress hostAddressX;\n        try {\n            hostAddressX = networkService.resolveBindHostAddress(bindHost);\n        } catch (IOException e) {\n            throw new BindHttpException(\"Failed to resolve host [\" + bindHost + \"]\", e);\n        }\n        final InetAddress hostAddress = hostAddressX;\n\n        PortsRange portsRange = new PortsRange(port);\n        final AtomicReference<Exception> lastException = new AtomicReference<Exception>();\n        boolean success = portsRange.iterate(new PortsRange.PortCallback() {\n            @Override public boolean onPortNumber(int portNumber) {\n                try {\n                    serverChannel = serverBootstrap.bind(new InetSocketAddress(hostAddress, portNumber));\n                } catch (Exception e) {\n                    lastException.set(e);\n                    return false;\n                }\n                return true;\n            }\n        });\n        if (!success) {\n            throw new BindHttpException(\"Failed to bind to [\" + port + \"]\", lastException.get());\n        }\n\n        InetSocketAddress boundAddress = (InetSocketAddress) serverChannel.getLocalAddress();\n        InetSocketAddress publishAddress;\n        try {\n            publishAddress = new InetSocketAddress(networkService.resolvePublishHostAddress(publishHost), boundAddress.getPort());\n        } catch (Exception e) {\n            throw new BindTransportException(\"Failed to resolve publish address\", e);\n        }\n        this.boundAddress = new BoundTransportAddress(new InetSocketTransportAddress(boundAddress), new InetSocketTransportAddress(publishAddress));\n    }","commit_id":"3f6cd467362761195353164484ba3551c23d6cd5","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Inject public NettyMemcachedServerTransport(Settings settings, RestController restController, NetworkService networkService) {\n        super(settings);\n        this.restController = restController;\n        this.networkService = networkService;\n\n        this.workerCount = componentSettings.getAsInt(\"worker_count\", Runtime.getRuntime().availableProcessors());\n        this.port = componentSettings.get(\"port\", settings.get(\"memcached.port\", \"11211-11311\"));\n        this.bindHost = componentSettings.get(\"bind_host\");\n        this.publishHost = componentSettings.get(\"publish_host\");\n        this.tcpNoDelay = componentSettings.getAsBoolean(\"tcp_no_delay\", settings.getAsBoolean(TCP_NO_DELAY, true));\n        this.tcpKeepAlive = componentSettings.getAsBoolean(\"tcp_keep_alive\", settings.getAsBoolean(TCP_KEEP_ALIVE, null));\n        this.reuseAddress = componentSettings.getAsBoolean(\"reuse_address\", settings.getAsBoolean(TCP_REUSE_ADDRESS, NetworkUtils.defaultReuseAddress()));\n        this.tcpSendBufferSize = componentSettings.getAsBytesSize(\"tcp_send_buffer_size\", settings.getAsBytesSize(TCP_SEND_BUFFER_SIZE, null));\n        this.tcpReceiveBufferSize = componentSettings.getAsBytesSize(\"tcp_receive_buffer_size\", settings.getAsBytesSize(TCP_RECEIVE_BUFFER_SIZE, null));\n    }","id":105203,"modified_method":"@Inject public NettyMemcachedServerTransport(Settings settings, RestController restController, NetworkService networkService) {\n        super(settings);\n        this.restController = restController;\n        this.networkService = networkService;\n\n        this.workerCount = componentSettings.getAsInt(\"worker_count\", Runtime.getRuntime().availableProcessors());\n        this.blockingServer = componentSettings.getAsBoolean(\"memcached.blocking_server\", componentSettings.getAsBoolean(TCP_BLOCKING_SERVER, componentSettings.getAsBoolean(TCP_BLOCKING, false)));\n        this.port = componentSettings.get(\"port\", settings.get(\"memcached.port\", \"11211-11311\"));\n        this.bindHost = componentSettings.get(\"bind_host\");\n        this.publishHost = componentSettings.get(\"publish_host\");\n        this.tcpNoDelay = componentSettings.getAsBoolean(\"tcp_no_delay\", settings.getAsBoolean(TCP_NO_DELAY, true));\n        this.tcpKeepAlive = componentSettings.getAsBoolean(\"tcp_keep_alive\", settings.getAsBoolean(TCP_KEEP_ALIVE, null));\n        this.reuseAddress = componentSettings.getAsBoolean(\"reuse_address\", settings.getAsBoolean(TCP_REUSE_ADDRESS, NetworkUtils.defaultReuseAddress()));\n        this.tcpSendBufferSize = componentSettings.getAsBytesSize(\"tcp_send_buffer_size\", settings.getAsBytesSize(TCP_SEND_BUFFER_SIZE, null));\n        this.tcpReceiveBufferSize = componentSettings.getAsBytesSize(\"tcp_receive_buffer_size\", settings.getAsBytesSize(TCP_RECEIVE_BUFFER_SIZE, null));\n    }","commit_id":"3f6cd467362761195353164484ba3551c23d6cd5","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Inject public NettyTransport(Settings settings, ThreadPool threadPool, NetworkService networkService) {\n        super(settings);\n        this.threadPool = threadPool;\n        this.networkService = networkService;\n\n        this.workerCount = componentSettings.getAsInt(\"worker_count\", Runtime.getRuntime().availableProcessors());\n        this.port = componentSettings.get(\"port\", settings.get(\"transport.tcp.port\", \"9300-9400\"));\n        this.bindHost = componentSettings.get(\"bind_host\");\n        this.publishHost = componentSettings.get(\"publish_host\");\n        this.connectTimeout = componentSettings.getAsTime(\"connect_timeout\", settings.getAsTime(\"transport.tcp.connect_timeout\", timeValueSeconds(1)));\n        this.tcpNoDelay = componentSettings.getAsBoolean(\"tcp_no_delay\", settings.getAsBoolean(TCP_NO_DELAY, true));\n        this.tcpKeepAlive = componentSettings.getAsBoolean(\"tcp_keep_alive\", settings.getAsBoolean(TCP_KEEP_ALIVE, null));\n        this.reuseAddress = componentSettings.getAsBoolean(\"reuse_address\", settings.getAsBoolean(TCP_REUSE_ADDRESS, NetworkUtils.defaultReuseAddress()));\n        this.tcpSendBufferSize = componentSettings.getAsBytesSize(\"tcp_send_buffer_size\", settings.getAsBytesSize(TCP_SEND_BUFFER_SIZE, null));\n        this.tcpReceiveBufferSize = componentSettings.getAsBytesSize(\"tcp_receive_buffer_size\", settings.getAsBytesSize(TCP_RECEIVE_BUFFER_SIZE, null));\n    }","id":105204,"modified_method":"@Inject public NettyTransport(Settings settings, ThreadPool threadPool, NetworkService networkService) {\n        super(settings);\n        this.threadPool = threadPool;\n        this.networkService = networkService;\n\n        this.workerCount = componentSettings.getAsInt(\"worker_count\", Runtime.getRuntime().availableProcessors());\n        this.blockingServer = componentSettings.getAsBoolean(\"transport.tcp.blocking_server\", componentSettings.getAsBoolean(TCP_BLOCKING_SERVER, componentSettings.getAsBoolean(TCP_BLOCKING, false)));\n        this.blockingClient = componentSettings.getAsBoolean(\"transport.tcp.blocking_client\", componentSettings.getAsBoolean(TCP_BLOCKING_CLIENT, componentSettings.getAsBoolean(TCP_BLOCKING, false)));\n        this.port = componentSettings.get(\"port\", settings.get(\"transport.tcp.port\", \"9300-9400\"));\n        this.bindHost = componentSettings.get(\"bind_host\");\n        this.publishHost = componentSettings.get(\"publish_host\");\n        this.connectTimeout = componentSettings.getAsTime(\"connect_timeout\", settings.getAsTime(\"transport.tcp.connect_timeout\", timeValueSeconds(1)));\n        this.tcpNoDelay = componentSettings.getAsBoolean(\"tcp_no_delay\", settings.getAsBoolean(TCP_NO_DELAY, true));\n        this.tcpKeepAlive = componentSettings.getAsBoolean(\"tcp_keep_alive\", settings.getAsBoolean(TCP_KEEP_ALIVE, null));\n        this.reuseAddress = componentSettings.getAsBoolean(\"reuse_address\", settings.getAsBoolean(TCP_REUSE_ADDRESS, NetworkUtils.defaultReuseAddress()));\n        this.tcpSendBufferSize = componentSettings.getAsBytesSize(\"tcp_send_buffer_size\", settings.getAsBytesSize(TCP_SEND_BUFFER_SIZE, null));\n        this.tcpReceiveBufferSize = componentSettings.getAsBytesSize(\"tcp_receive_buffer_size\", settings.getAsBytesSize(TCP_RECEIVE_BUFFER_SIZE, null));\n    }","commit_id":"3f6cd467362761195353164484ba3551c23d6cd5","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override protected void doStart() throws ElasticSearchException {\n        clientBootstrap = new ClientBootstrap(new NioClientSocketChannelFactory(\n                Executors.newCachedThreadPool(daemonThreadFactory(settings, \"transportClientBoss\")),\n                Executors.newCachedThreadPool(daemonThreadFactory(settings, \"transportClientIoWorker\")),\n                workerCount));\n        ChannelPipelineFactory clientPipelineFactory = new ChannelPipelineFactory() {\n            @Override public ChannelPipeline getPipeline() throws Exception {\n                ChannelPipeline pipeline = Channels.pipeline();\n                pipeline.addLast(\"decoder\", new SizeHeaderFrameDecoder());\n                pipeline.addLast(\"dispatcher\", new MessageChannelHandler(NettyTransport.this, logger));\n                return pipeline;\n            }\n        };\n        clientBootstrap.setPipelineFactory(clientPipelineFactory);\n        clientBootstrap.setOption(\"connectTimeoutMillis\", connectTimeout.millis());\n        if (tcpNoDelay != null) {\n            clientBootstrap.setOption(\"tcpNoDelay\", tcpNoDelay);\n        }\n        if (tcpKeepAlive != null) {\n            clientBootstrap.setOption(\"keepAlive\", tcpKeepAlive);\n        }\n        if (tcpSendBufferSize != null) {\n            clientBootstrap.setOption(\"sendBufferSize\", tcpSendBufferSize.bytes());\n        }\n        if (tcpReceiveBufferSize != null) {\n            clientBootstrap.setOption(\"receiveBufferSize\", tcpReceiveBufferSize.bytes());\n        }\n        if (reuseAddress != null) {\n            clientBootstrap.setOption(\"reuseAddress\", reuseAddress);\n        }\n\n        if (!settings.getAsBoolean(\"network.server\", true)) {\n            return;\n        }\n\n        serverOpenChannels = new OpenChannelsHandler();\n        serverBootstrap = new ServerBootstrap(new NioServerSocketChannelFactory(\n                Executors.newCachedThreadPool(daemonThreadFactory(settings, \"transportServerBoss\")),\n                Executors.newCachedThreadPool(daemonThreadFactory(settings, \"transportServerIoWorker\")),\n                workerCount));\n        ChannelPipelineFactory serverPipelineFactory = new ChannelPipelineFactory() {\n            @Override public ChannelPipeline getPipeline() throws Exception {\n                ChannelPipeline pipeline = Channels.pipeline();\n                pipeline.addLast(\"openChannels\", serverOpenChannels);\n                pipeline.addLast(\"decoder\", new SizeHeaderFrameDecoder());\n                pipeline.addLast(\"dispatcher\", new MessageChannelHandler(NettyTransport.this, logger));\n                return pipeline;\n            }\n        };\n        serverBootstrap.setPipelineFactory(serverPipelineFactory);\n        if (tcpNoDelay != null) {\n            serverBootstrap.setOption(\"child.tcpNoDelay\", tcpNoDelay);\n        }\n        if (tcpKeepAlive != null) {\n            serverBootstrap.setOption(\"child.keepAlive\", tcpKeepAlive);\n        }\n        if (tcpSendBufferSize != null) {\n            serverBootstrap.setOption(\"child.sendBufferSize\", tcpSendBufferSize.bytes());\n        }\n        if (tcpReceiveBufferSize != null) {\n            serverBootstrap.setOption(\"child.receiveBufferSize\", tcpReceiveBufferSize.bytes());\n        }\n        if (reuseAddress != null) {\n            serverBootstrap.setOption(\"reuseAddress\", reuseAddress);\n            serverBootstrap.setOption(\"child.reuseAddress\", reuseAddress);\n        }\n\n        // Bind and start to accept incoming connections.\n        InetAddress hostAddressX;\n        try {\n            hostAddressX = networkService.resolveBindHostAddress(bindHost);\n        } catch (IOException e) {\n            throw new BindTransportException(\"Failed to resolve host [\" + bindHost + \"]\", e);\n        }\n        final InetAddress hostAddress = hostAddressX;\n\n        PortsRange portsRange = new PortsRange(port);\n        final AtomicReference<Exception> lastException = new AtomicReference<Exception>();\n        boolean success = portsRange.iterate(new PortsRange.PortCallback() {\n            @Override public boolean onPortNumber(int portNumber) {\n                try {\n                    serverChannel = serverBootstrap.bind(new InetSocketAddress(hostAddress, portNumber));\n                } catch (Exception e) {\n                    lastException.set(e);\n                    return false;\n                }\n                return true;\n            }\n        });\n        if (!success) {\n            throw new BindTransportException(\"Failed to bind to [\" + port + \"]\", lastException.get());\n        }\n\n        logger.debug(\"Bound to address [{}]\", serverChannel.getLocalAddress());\n\n        InetSocketAddress boundAddress = (InetSocketAddress) serverChannel.getLocalAddress();\n        InetSocketAddress publishAddress;\n        try {\n            publishAddress = new InetSocketAddress(networkService.resolvePublishHostAddress(publishHost), boundAddress.getPort());\n        } catch (Exception e) {\n            throw new BindTransportException(\"Failed to resolve publish address\", e);\n        }\n        this.boundAddress = new BoundTransportAddress(new InetSocketTransportAddress(boundAddress), new InetSocketTransportAddress(publishAddress));\n    }","id":105205,"modified_method":"@Override protected void doStart() throws ElasticSearchException {\n        if (blockingClient) {\n            clientBootstrap = new ClientBootstrap(new OioClientSocketChannelFactory(Executors.newCachedThreadPool(daemonThreadFactory(settings, \"transport_client_worker\"))));\n        } else {\n            clientBootstrap = new ClientBootstrap(new NioClientSocketChannelFactory(\n                    Executors.newCachedThreadPool(daemonThreadFactory(settings, \"transport_client_boss\")),\n                    Executors.newCachedThreadPool(daemonThreadFactory(settings, \"transport_client_worker\")),\n                    workerCount));\n        }\n        ChannelPipelineFactory clientPipelineFactory = new ChannelPipelineFactory() {\n            @Override public ChannelPipeline getPipeline() throws Exception {\n                ChannelPipeline pipeline = Channels.pipeline();\n                pipeline.addLast(\"decoder\", new SizeHeaderFrameDecoder());\n                pipeline.addLast(\"dispatcher\", new MessageChannelHandler(NettyTransport.this, logger));\n                return pipeline;\n            }\n        };\n        clientBootstrap.setPipelineFactory(clientPipelineFactory);\n        clientBootstrap.setOption(\"connectTimeoutMillis\", connectTimeout.millis());\n        if (tcpNoDelay != null) {\n            clientBootstrap.setOption(\"tcpNoDelay\", tcpNoDelay);\n        }\n        if (tcpKeepAlive != null) {\n            clientBootstrap.setOption(\"keepAlive\", tcpKeepAlive);\n        }\n        if (tcpSendBufferSize != null) {\n            clientBootstrap.setOption(\"sendBufferSize\", tcpSendBufferSize.bytes());\n        }\n        if (tcpReceiveBufferSize != null) {\n            clientBootstrap.setOption(\"receiveBufferSize\", tcpReceiveBufferSize.bytes());\n        }\n        if (reuseAddress != null) {\n            clientBootstrap.setOption(\"reuseAddress\", reuseAddress);\n        }\n\n        if (!settings.getAsBoolean(\"network.server\", true)) {\n            return;\n        }\n\n        serverOpenChannels = new OpenChannelsHandler();\n        if (blockingServer) {\n            serverBootstrap = new ServerBootstrap(new OioServerSocketChannelFactory(\n                    Executors.newCachedThreadPool(daemonThreadFactory(settings, \"transport_server_boss\")),\n                    Executors.newCachedThreadPool(daemonThreadFactory(settings, \"transport_server_worker\"))\n            ));\n        } else {\n            serverBootstrap = new ServerBootstrap(new NioServerSocketChannelFactory(\n                    Executors.newCachedThreadPool(daemonThreadFactory(settings, \"transport_server_boss\")),\n                    Executors.newCachedThreadPool(daemonThreadFactory(settings, \"transport_server_worker\")),\n                    workerCount));\n        }\n        ChannelPipelineFactory serverPipelineFactory = new ChannelPipelineFactory() {\n            @Override public ChannelPipeline getPipeline() throws Exception {\n                ChannelPipeline pipeline = Channels.pipeline();\n                pipeline.addLast(\"openChannels\", serverOpenChannels);\n                pipeline.addLast(\"decoder\", new SizeHeaderFrameDecoder());\n                pipeline.addLast(\"dispatcher\", new MessageChannelHandler(NettyTransport.this, logger));\n                return pipeline;\n            }\n        };\n        serverBootstrap.setPipelineFactory(serverPipelineFactory);\n        if (tcpNoDelay != null) {\n            serverBootstrap.setOption(\"child.tcpNoDelay\", tcpNoDelay);\n        }\n        if (tcpKeepAlive != null) {\n            serverBootstrap.setOption(\"child.keepAlive\", tcpKeepAlive);\n        }\n        if (tcpSendBufferSize != null) {\n            serverBootstrap.setOption(\"child.sendBufferSize\", tcpSendBufferSize.bytes());\n        }\n        if (tcpReceiveBufferSize != null) {\n            serverBootstrap.setOption(\"child.receiveBufferSize\", tcpReceiveBufferSize.bytes());\n        }\n        if (reuseAddress != null) {\n            serverBootstrap.setOption(\"reuseAddress\", reuseAddress);\n            serverBootstrap.setOption(\"child.reuseAddress\", reuseAddress);\n        }\n\n        // Bind and start to accept incoming connections.\n        InetAddress hostAddressX;\n        try {\n            hostAddressX = networkService.resolveBindHostAddress(bindHost);\n        } catch (IOException e) {\n            throw new BindTransportException(\"Failed to resolve host [\" + bindHost + \"]\", e);\n        }\n        final InetAddress hostAddress = hostAddressX;\n\n        PortsRange portsRange = new PortsRange(port);\n        final AtomicReference<Exception> lastException = new AtomicReference<Exception>();\n        boolean success = portsRange.iterate(new PortsRange.PortCallback() {\n            @Override public boolean onPortNumber(int portNumber) {\n                try {\n                    serverChannel = serverBootstrap.bind(new InetSocketAddress(hostAddress, portNumber));\n                } catch (Exception e) {\n                    lastException.set(e);\n                    return false;\n                }\n                return true;\n            }\n        });\n        if (!success) {\n            throw new BindTransportException(\"Failed to bind to [\" + port + \"]\", lastException.get());\n        }\n\n        logger.debug(\"Bound to address [{}]\", serverChannel.getLocalAddress());\n\n        InetSocketAddress boundAddress = (InetSocketAddress) serverChannel.getLocalAddress();\n        InetSocketAddress publishAddress;\n        try {\n            publishAddress = new InetSocketAddress(networkService.resolvePublishHostAddress(publishHost), boundAddress.getPort());\n        } catch (Exception e) {\n            throw new BindTransportException(\"Failed to resolve publish address\", e);\n        }\n        this.boundAddress = new BoundTransportAddress(new InetSocketTransportAddress(boundAddress), new InetSocketTransportAddress(publishAddress));\n    }","commit_id":"3f6cd467362761195353164484ba3551c23d6cd5","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected void onSetUpInTransactionIfEnabled() throws Exception {\n        Properties p = new Properties();\n        p.setProperty(\"log4j.logger.org.snmp4j.Snmp\", \"FATAL\");\n        p.setProperty(\"log4j.logger.org.opennms.netmgt.snmp.SnmpWalker\", \"FATAL\");\n        MockLogAppender.setupLogging(p);\n\n        m_populator.populateDatabase();\n        setComplete();\n        endTransaction();\n        startNewTransaction();\n        \n        m_agent = MockSnmpAgent.createAgentAndRun(new ClassPathResource(\"org/opennms/netmgt/snmp/snmpTestData1.properties\"), \"127.0.0.1/1691\");\n\n        SnmpPeerFactory.init();\n\n        super.onSetUpInTransactionIfEnabled();\n    }","id":105206,"modified_method":"@Override\n    protected void onSetUpInTransactionIfEnabled() throws Exception {\n        Properties p = new Properties();\n        p.setProperty(\"log4j.logger.org.snmp4j.Snmp\", \"FATAL\");\n        p.setProperty(\"log4j.logger.org.opennms.netmgt.snmp.SnmpWalker\", \"FATAL\");\n        MockLogAppender.setupLogging(p);\n\n        m_populator.populateDatabase();\n        setComplete();\n        endTransaction();\n        startNewTransaction();\n        \n        m_agent = MockSnmpAgent.createAgentAndRun(new ClassPathResource(\"org/opennms/netmgt/snmp/snmpTestData1.properties\"), \"127.0.0.1/1691\");\n\n        SnmpPeerFactory spf = new SnmpPeerFactory(new StringReader(\"<?xml version=\\\"1.0\\\"?>\\n\" + \n        \t\t\"<snmp-config port=\\\"1691\\\" retry=\\\"3\\\" timeout=\\\"800\\\"\\n\" + \n        \t\t\"             read-community=\\\"public\\\" \\n\" + \n        \t\t\"             version=\\\"v1\\\" \\n\" + \n        \t\t\"             max-vars-per-pdu=\\\"10\\\" proxy-host=\\\"127.0.0.1\\\">\\n\" + \n        \t\t\"\\n\" + \n        \t\t\"<\/snmp-config>\\n\" + \n        \t\t\"\\n\" + \n        \t\t\"\"));\n        SnmpPeerFactory.setInstance(spf);\n\n        super.onSetUpInTransactionIfEnabled();\n    }","commit_id":"5074b0941d2a5f6e17f143e4bb2b6d184eaea426","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transient\n    public CollectionType getCollectionType() {\n        CollectionType maxCollType = CollectionType.NO_COLLECT;\n        for (Iterator<OnmsIpInterface> it = getIpInterfaces().iterator(); it.hasNext();) {\n            OnmsIpInterface ipIface = it.next();\n            if (ipIface.getIsSnmpPrimary() != null) {\n                maxCollType = maxCollType.max(ipIface.getIsSnmpPrimary());\n            }\n        }\n        return maxCollType;\n    }","id":105207,"modified_method":"@Transient\n    public CollectionType getCollectionType() {\n        CollectionType maxCollType = CollectionType.NO_COLLECT;\n        for (OnmsIpInterface ipIface : getIpInterfaces()) {\n            if (ipIface.getIsSnmpPrimary() != null) {\n                maxCollType = maxCollType.max(ipIface.getIsSnmpPrimary());\n            }\n        }\n        return maxCollType;\n    }","commit_id":"5074b0941d2a5f6e17f143e4bb2b6d184eaea426","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void visit(EntityVisitor visitor) {\n\t\tvisitor.visitNode(this);\n\t\t\n\t\tfor (Iterator<OnmsIpInterface> it = getIpInterfaces().iterator(); it.hasNext();) {\n\t\t\tOnmsIpInterface iface = it.next();\n\t\t\tiface.visit(visitor);\n\t\t}\n\t\t\n\t\tfor (Iterator<OnmsSnmpInterface> it = getSnmpInterfaces().iterator(); it.hasNext();) {\n\t\t\tOnmsSnmpInterface snmpIface = it.next();\n\t\t\tsnmpIface.visit(visitor);\n\t\t}\n\t\t\n\t\tvisitor.visitNodeComplete(this);\n\t}","id":105208,"modified_method":"public void visit(EntityVisitor visitor) {\n\t\tvisitor.visitNode(this);\n\t\t\n\t\tfor (OnmsIpInterface iface : getIpInterfaces()) {\n\t\t\tiface.visit(visitor);\n\t\t}\n\t\t\n\t\tfor (OnmsSnmpInterface snmpIface : getSnmpInterfaces()) {\n\t\t\tsnmpIface.visit(visitor);\n\t\t}\n\t\t\n\t\tvisitor.visitNodeComplete(this);\n\t}","commit_id":"5b3a76b9f21f1b409a8d07b3a9de78160b288544","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void mergeNode(OnmsNode scannedNode, EventForwarder eventForwarder) {\n        \n        mergeNodeAttributes(scannedNode);\n    \n    \tmergeSnmpInterfaces(scannedNode);\n        \n        mergeIpInterfaces(scannedNode, eventForwarder);\n        \n    \tmergeCategories(scannedNode);\n    }","id":105209,"modified_method":"public void mergeNode(OnmsNode scannedNode, EventForwarder eventForwarder) {\n        \n        mergeNodeAttributes(scannedNode);\n    \n    \tmergeSnmpInterfaces(scannedNode);\n        \n        mergeIpInterfaces(scannedNode, eventForwarder);\n        \n    \tmergeCategories(scannedNode);\n    \t\n    \tmergeAssets(scannedNode);\n    }","commit_id":"5b3a76b9f21f1b409a8d07b3a9de78160b288544","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transient\n    public boolean isDown() {\n        boolean down = true;\n        for (Iterator<OnmsIpInterface> it = m_ipInterfaces.iterator(); it.hasNext();) {\n            OnmsIpInterface ipIf = it.next();\n            if (!ipIf.isDown()) {\n                return !down;\n            }\n        }\n        return down;\n    }","id":105210,"modified_method":"@Transient\n    public boolean isDown() {\n        boolean down = true;\n        for (OnmsIpInterface ipIf : m_ipInterfaces) {\n            if (!ipIf.isDown()) {\n                return !down;\n            }\n        }\n        return down;\n    }","commit_id":"5b3a76b9f21f1b409a8d07b3a9de78160b288544","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void mergeNode(OnmsNode scannedNode, EventForwarder eventForwarder) {\n        \n        mergeNodeAttributes(scannedNode);\n    \n    \tmergeSnmpInterfaces(scannedNode);\n        \n        mergeIpInterfaces(scannedNode, eventForwarder);\n        \n    \tmergeCategories(scannedNode);\n    }","id":105211,"modified_method":"public void mergeNode(OnmsNode scannedNode, EventForwarder eventForwarder) {\n        \n        mergeNodeAttributes(scannedNode);\n    \n    \tmergeSnmpInterfaces(scannedNode);\n        \n        mergeIpInterfaces(scannedNode, eventForwarder);\n        \n    \tmergeCategories(scannedNode);\n    \t\n    \tmergeAssets(scannedNode);\n    }","commit_id":"5548b5b3da86ca88f79d3e67755e98f0ec5f327e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transient\n    public boolean isDown() {\n        boolean down = true;\n        for (Iterator<OnmsIpInterface> it = m_ipInterfaces.iterator(); it.hasNext();) {\n            OnmsIpInterface ipIf = it.next();\n            if (!ipIf.isDown()) {\n                return !down;\n            }\n        }\n        return down;\n    }","id":105212,"modified_method":"@Transient\n    public boolean isDown() {\n        boolean down = true;\n        for (OnmsIpInterface ipIf : m_ipInterfaces) {\n            if (!ipIf.isDown()) {\n                return !down;\n            }\n        }\n        return down;\n    }","commit_id":"5548b5b3da86ca88f79d3e67755e98f0ec5f327e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void visit(EntityVisitor visitor) {\n\t\tvisitor.visitNode(this);\n\t\t\n\t\tfor (Iterator<OnmsIpInterface> it = getIpInterfaces().iterator(); it.hasNext();) {\n\t\t\tOnmsIpInterface iface = it.next();\n\t\t\tiface.visit(visitor);\n\t\t}\n\t\t\n\t\tfor (Iterator<OnmsSnmpInterface> it = getSnmpInterfaces().iterator(); it.hasNext();) {\n\t\t\tOnmsSnmpInterface snmpIface = it.next();\n\t\t\tsnmpIface.visit(visitor);\n\t\t}\n\t\t\n\t\tvisitor.visitNodeComplete(this);\n\t}","id":105213,"modified_method":"public void visit(EntityVisitor visitor) {\n\t\tvisitor.visitNode(this);\n\t\t\n\t\tfor (OnmsIpInterface iface : getIpInterfaces()) {\n\t\t\tiface.visit(visitor);\n\t\t}\n\t\t\n\t\tfor (OnmsSnmpInterface snmpIface : getSnmpInterfaces()) {\n\t\t\tsnmpIface.visit(visitor);\n\t\t}\n\t\t\n\t\tvisitor.visitNodeComplete(this);\n\t}","commit_id":"5548b5b3da86ca88f79d3e67755e98f0ec5f327e","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void mergeNode(OnmsNode scannedNode, EventForwarder eventForwarder) {\n        \n        mergeNodeAttributes(scannedNode);\n    \n    \tmergeSnmpInterfaces(scannedNode);\n        \n        mergeIpInterfaces(scannedNode, eventForwarder);\n        \n    \tmergeCategories(scannedNode);\n    }","id":105214,"modified_method":"public void mergeNode(OnmsNode scannedNode, EventForwarder eventForwarder) {\n        \n        mergeNodeAttributes(scannedNode);\n    \n    \tmergeSnmpInterfaces(scannedNode);\n        \n        mergeIpInterfaces(scannedNode, eventForwarder);\n        \n    \tmergeCategories(scannedNode);\n    \t\n    \tmergeAssets(scannedNode);\n    }","commit_id":"7701387bf837d316f588956d0f985205241c9143","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void visit(EntityVisitor visitor) {\n\t\tvisitor.visitNode(this);\n\t\t\n\t\tfor (Iterator<OnmsIpInterface> it = getIpInterfaces().iterator(); it.hasNext();) {\n\t\t\tOnmsIpInterface iface = it.next();\n\t\t\tiface.visit(visitor);\n\t\t}\n\t\t\n\t\tfor (Iterator<OnmsSnmpInterface> it = getSnmpInterfaces().iterator(); it.hasNext();) {\n\t\t\tOnmsSnmpInterface snmpIface = it.next();\n\t\t\tsnmpIface.visit(visitor);\n\t\t}\n\t\t\n\t\tvisitor.visitNodeComplete(this);\n\t}","id":105215,"modified_method":"public void visit(EntityVisitor visitor) {\n\t\tvisitor.visitNode(this);\n\t\t\n\t\tfor (OnmsIpInterface iface : getIpInterfaces()) {\n\t\t\tiface.visit(visitor);\n\t\t}\n\t\t\n\t\tfor (OnmsSnmpInterface snmpIface : getSnmpInterfaces()) {\n\t\t\tsnmpIface.visit(visitor);\n\t\t}\n\t\t\n\t\tvisitor.visitNodeComplete(this);\n\t}","commit_id":"7701387bf837d316f588956d0f985205241c9143","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transient\n    public boolean isDown() {\n        boolean down = true;\n        for (Iterator<OnmsIpInterface> it = m_ipInterfaces.iterator(); it.hasNext();) {\n            OnmsIpInterface ipIf = it.next();\n            if (!ipIf.isDown()) {\n                return !down;\n            }\n        }\n        return down;\n    }","id":105216,"modified_method":"@Transient\n    public boolean isDown() {\n        boolean down = true;\n        for (OnmsIpInterface ipIf : m_ipInterfaces) {\n            if (!ipIf.isDown()) {\n                return !down;\n            }\n        }\n        return down;\n    }","commit_id":"7701387bf837d316f588956d0f985205241c9143","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected void onSetUpInTransactionIfEnabled() throws Exception {\n        Properties p = new Properties();\n        p.setProperty(\"log4j.logger.org.snmp4j.Snmp\", \"FATAL\");\n        p.setProperty(\"log4j.logger.org.opennms.netmgt.snmp.SnmpWalker\", \"FATAL\");\n        MockLogAppender.setupLogging(p);\n\n        m_populator.populateDatabase();\n        setComplete();\n        endTransaction();\n        startNewTransaction();\n        \n        m_agent = MockSnmpAgent.createAgentAndRun(new ClassPathResource(\"org/opennms/netmgt/snmp/snmpTestData1.properties\"), \"127.0.0.1/1691\");\n\n        SnmpPeerFactory.init();\n\n        super.onSetUpInTransactionIfEnabled();\n    }","id":105217,"modified_method":"@Override\n    protected void onSetUpInTransactionIfEnabled() throws Exception {\n        Properties p = new Properties();\n        p.setProperty(\"log4j.logger.org.snmp4j.Snmp\", \"FATAL\");\n        p.setProperty(\"log4j.logger.org.opennms.netmgt.snmp.SnmpWalker\", \"FATAL\");\n        MockLogAppender.setupLogging(p);\n\n        m_populator.populateDatabase();\n        setComplete();\n        endTransaction();\n        startNewTransaction();\n        \n        m_agent = MockSnmpAgent.createAgentAndRun(new ClassPathResource(\"org/opennms/netmgt/snmp/snmpTestData1.properties\"), \"127.0.0.1/1691\");\n\n        SnmpPeerFactory spf = new SnmpPeerFactory(new StringReader(\"<?xml version=\\\"1.0\\\"?>\\n\" + \n        \t\t\"<snmp-config port=\\\"1691\\\" retry=\\\"3\\\" timeout=\\\"800\\\"\\n\" + \n        \t\t\"             read-community=\\\"public\\\" \\n\" + \n        \t\t\"             version=\\\"v1\\\" \\n\" + \n        \t\t\"             max-vars-per-pdu=\\\"10\\\" proxy-host=\\\"127.0.0.1\\\">\\n\" + \n        \t\t\"\\n\" + \n        \t\t\"<\/snmp-config>\\n\" + \n        \t\t\"\\n\" + \n        \t\t\"\"));\n        SnmpPeerFactory.setInstance(spf);\n\n        super.onSetUpInTransactionIfEnabled();\n    }","commit_id":"387f1cedc86c8d6fe2bfab704d8a64cc5c18b544","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transient\n    public CollectionType getCollectionType() {\n        CollectionType maxCollType = CollectionType.NO_COLLECT;\n        for (Iterator<OnmsIpInterface> it = getIpInterfaces().iterator(); it.hasNext();) {\n            OnmsIpInterface ipIface = it.next();\n            if (ipIface.getIsSnmpPrimary() != null) {\n                maxCollType = maxCollType.max(ipIface.getIsSnmpPrimary());\n            }\n        }\n        return maxCollType;\n    }","id":105218,"modified_method":"@Transient\n    public CollectionType getCollectionType() {\n        CollectionType maxCollType = CollectionType.NO_COLLECT;\n        for (OnmsIpInterface ipIface : getIpInterfaces()) {\n            if (ipIface.getIsSnmpPrimary() != null) {\n                maxCollType = maxCollType.max(ipIface.getIsSnmpPrimary());\n            }\n        }\n        return maxCollType;\n    }","commit_id":"387f1cedc86c8d6fe2bfab704d8a64cc5c18b544","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    protected void onSetUpInTransactionIfEnabled() throws Exception {\n        Properties p = new Properties();\n        p.setProperty(\"log4j.logger.org.snmp4j.Snmp\", \"FATAL\");\n        p.setProperty(\"log4j.logger.org.opennms.netmgt.snmp.SnmpWalker\", \"FATAL\");\n        MockLogAppender.setupLogging(p);\n\n        m_populator.populateDatabase();\n        setComplete();\n        endTransaction();\n        startNewTransaction();\n        \n        m_agent = MockSnmpAgent.createAgentAndRun(new ClassPathResource(\"org/opennms/netmgt/snmp/snmpTestData1.properties\"), \"127.0.0.1/1691\");\n\n        SnmpPeerFactory.init();\n\n        super.onSetUpInTransactionIfEnabled();\n    }","id":105219,"modified_method":"@Override\n    protected void onSetUpInTransactionIfEnabled() throws Exception {\n        Properties p = new Properties();\n        p.setProperty(\"log4j.logger.org.snmp4j.Snmp\", \"FATAL\");\n        p.setProperty(\"log4j.logger.org.opennms.netmgt.snmp.SnmpWalker\", \"FATAL\");\n        MockLogAppender.setupLogging(p);\n\n        m_populator.populateDatabase();\n        setComplete();\n        endTransaction();\n        startNewTransaction();\n        \n        m_agent = MockSnmpAgent.createAgentAndRun(new ClassPathResource(\"org/opennms/netmgt/snmp/snmpTestData1.properties\"), \"127.0.0.1/1691\");\n\n        SnmpPeerFactory spf = new SnmpPeerFactory(new StringReader(\"<?xml version=\\\"1.0\\\"?>\\n\" + \n        \t\t\"<snmp-config port=\\\"1691\\\" retry=\\\"3\\\" timeout=\\\"800\\\"\\n\" + \n        \t\t\"             read-community=\\\"public\\\" \\n\" + \n        \t\t\"             version=\\\"v1\\\" \\n\" + \n        \t\t\"             max-vars-per-pdu=\\\"10\\\" proxy-host=\\\"127.0.0.1\\\">\\n\" + \n        \t\t\"\\n\" + \n        \t\t\"<\/snmp-config>\\n\" + \n        \t\t\"\\n\" + \n        \t\t\"\"));\n        SnmpPeerFactory.setInstance(spf);\n\n        super.onSetUpInTransactionIfEnabled();\n    }","commit_id":"c3fe1cadc831977fe0344844eaddaa771bdb215d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Transient\n    public CollectionType getCollectionType() {\n        CollectionType maxCollType = CollectionType.NO_COLLECT;\n        for (Iterator<OnmsIpInterface> it = getIpInterfaces().iterator(); it.hasNext();) {\n            OnmsIpInterface ipIface = it.next();\n            if (ipIface.getIsSnmpPrimary() != null) {\n                maxCollType = maxCollType.max(ipIface.getIsSnmpPrimary());\n            }\n        }\n        return maxCollType;\n    }","id":105220,"modified_method":"@Transient\n    public CollectionType getCollectionType() {\n        CollectionType maxCollType = CollectionType.NO_COLLECT;\n        for (OnmsIpInterface ipIface : getIpInterfaces()) {\n            if (ipIface.getIsSnmpPrimary() != null) {\n                maxCollType = maxCollType.max(ipIface.getIsSnmpPrimary());\n            }\n        }\n        return maxCollType;\n    }","commit_id":"c3fe1cadc831977fe0344844eaddaa771bdb215d","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public LldpLink get(Integer lldpRemLocalPortNum) {\n\t\tSnmpObjId instance = SnmpObjId.get(lldpRemLocalPortNum.toString());\n\t\tSnmpObjId[] oids = new SnmpObjId[]\n\t\t\t\t{SnmpObjId.get(LLDP_LOC_PORTID_SUBTYPE, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_PORTID, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_DESCR,instance)};\n\t\t\n\t\tSnmpValue[] val = SnmpUtils.get(m_agentConfig, oids);\n\t\tif (val == null || val.length != 3 || val[0] == null || val[1] == null || !val[0].isNumeric())\n\t\t\treturn null;\n\t\tLldpLink lldplink = new LldpLink();\n\t\tlldplink.setLldpLocalPortNum(lldpRemLocalPortNum);\n\t\tlldplink.setLldpPortId(LldpHelper.decodeLldpPortId(val[0].toInt(),val[1]));\n\t\tlldplink.setLldpPortIdSubType(LldpPortIdSubType.get(val[0].toInt()));\n\t\tif (val[2] != null)\n\t\t\tlldplink.setLldpPortDescr((val[2].toDisplayString()));\n\t\telse\n\t\t\tlldplink.setLldpPortDescr(\"\");\n\t\tif (val[0].toInt() == LldpPortIdSubType.LLDP_PORTID_SUBTYPE_LOCAL.getValue().intValue()) {\n\t\t\ttry {\n\t\t\t\tlldplink.setLldpPortIfindex((val[1].toInt()));\n\t\t\t} catch (Exception e) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\treturn lldplink;\n\t}","id":105221,"modified_method":"public LldpLink get(Integer lldpRemLocalPortNum) {\n\t\tSnmpObjId instance = SnmpObjId.get(lldpRemLocalPortNum.toString());\n\t\tSnmpObjId[] oids = new SnmpObjId[]\n\t\t\t\t{SnmpObjId.get(LLDP_LOC_PORTID_SUBTYPE, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_PORTID, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_DESCR,instance)};\n\t\t\n\t\tSnmpValue[] val = SnmpUtils.get(m_agentConfig, oids);\n\t\tif (val == null || val.length != 3 || val[0] == null || val[1] == null || !val[0].isNumeric())\n\t\t\treturn null;\n\t\tLldpLink lldplink = new LldpLink();\n\t\tlldplink.setLldpLocalPortNum(lldpRemLocalPortNum);\n\t\tlldplink.setLldpPortId(LldpRemTableTracker.decodeLldpPortId(val[0].toInt(),val[1]));\n\t\tlldplink.setLldpPortIdSubType(LldpPortIdSubType.get(val[0].toInt()));\n\t\tif (val[2] != null)\n\t\t\tlldplink.setLldpPortDescr((val[2].toDisplayString()));\n\t\telse\n\t\t\tlldplink.setLldpPortDescr(\"\");\n\t\tif (val[0].toInt() == LldpPortIdSubType.LLDP_PORTID_SUBTYPE_LOCAL.getValue().intValue()) {\n\t\t\ttry {\n\t\t\t\tlldplink.setLldpPortIfindex((val[1].toInt()));\n\t\t\t} catch (Exception e) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\treturn lldplink;\n\t}","commit_id":"72a2ca05358911acd2613db2e8f3d04133f78cc1","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public LldpElement getLldpElement() {\n\t\tLldpElement lldpElement = new LldpElement();\n\t\tlldpElement.setLldpChassisId(LldpHelper.decodeLldpChassisId(getLldpLocChassisid(), getLldpLocChassisidSubType()));\n\t\tlldpElement.setLldpChassisIdSubType(LldpChassisIdSubType.get(getLldpLocChassisidSubType()));\n\t\tlldpElement.setLldpSysname(getLldpLocSysname());\n\t\treturn lldpElement;\n\t}","id":105222,"modified_method":"public LldpElement getLldpElement() {\n\t\tLldpElement lldpElement = new LldpElement();\n\t\tlldpElement.setLldpChassisId(getLldpLocChassisid());\n\t\tlldpElement.setLldpChassisIdSubType(LldpChassisIdSubType.get(getLldpLocChassisidSubType()));\n\t\tlldpElement.setLldpSysname(getLldpLocSysname());\n\t\treturn lldpElement;\n    }","commit_id":"72a2ca05358911acd2613db2e8f3d04133f78cc1","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SnmpValue getLldpLocChassisid() {\n    \treturn m_store.getValue(LLDP_LOC_CHASSISID_ALIAS);\n    }","id":105223,"modified_method":"public String getLldpLocChassisid() {\n    \treturn decodeLldpChassisId(m_store.getValue(LLDP_LOC_CHASSISID_ALIAS),getLldpLocChassisidSubType());\n    }","commit_id":"72a2ca05358911acd2613db2e8f3d04133f78cc1","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public LldpLink getLldpLink(LldpLocPortGetter lldpLocPort) {\n            LOG.info( \"getLldpLink: row count: {}\", getColumnCount());\n            LOG.info( \"getLldpLink: row local port num: {}\",  getLldpRemLocalPortNum());\n\n            LldpLink lldpLink = lldpLocPort.get(getLldpRemLocalPortNum());\n\n            LOG.info( \"getLldpLink: row local port id: {}\", lldpLink.getLldpPortId());\n            LOG.info( \"getLldpLink: row local port subtype: {}\", LldpPortIdSubType.getTypeString(lldpLink.getLldpPortIdSubType().getValue()));\n    \t\n            lldpLink.setLldpRemChassisId(LldpHelper.decodeLldpChassisId(getLldpRemChassisId(), getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp identifier: {}\", lldpLink.getLldpRemChassisId());\n            \n            lldpLink.setLldpRemChassisIdSubType(LldpChassisIdSubType.get(getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp chassis id subtype: {}\", LldpChassisIdSubType.getTypeString(getLldpRemChassisidSubtype()));\n    \t\n            lldpLink.setLldpRemSysname(getLldpRemSysname());\n            LOG.info( \"getLldpLink: row rem lldp sysname: {}\", lldpLink.getLldpRemSysname());\n\n            lldpLink.setLldpRemPortId(LldpHelper.decodeLldpPortId(getLldpRemPortidSubtype(), getLldpRemPortid()));\n            LOG.info( \"getLldpLink: row rem lldp port id: {}\", lldpLink.getLldpRemPortId());\n\n            lldpLink.setLldpRemPortIdSubType(LldpPortIdSubType.get(getLldpRemPortidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp port id subtype: {}\", LldpPortIdSubType.getTypeString(getLldpRemPortidSubtype()));\n \n            lldpLink.setLldpRemPortDescr(getLldpRemPortDescr());\n            \n    \t\treturn lldpLink;\n\t    }","id":105224,"modified_method":"public LldpLink getLldpLink(LldpLocPortGetter lldpLocPort) {\n            LOG.info( \"getLldpLink: row count: {}\", getColumnCount());\n            LOG.info( \"getLldpLink: row local port num: {}\",  getLldpRemLocalPortNum());\n\n            LldpLink lldpLink = lldpLocPort.get(getLldpRemLocalPortNum());\n\n            LOG.info( \"getLldpLink: row local port id: {}\", lldpLink.getLldpPortId());\n            LOG.info( \"getLldpLink: row local port subtype: {}\", LldpPortIdSubType.getTypeString(lldpLink.getLldpPortIdSubType().getValue()));\n    \t\n            lldpLink.setLldpRemChassisId(getLldpRemChassisId());\n            LOG.info( \"getLldpLink: row rem lldp identifier: {}\", lldpLink.getLldpRemChassisId());\n            \n            lldpLink.setLldpRemChassisIdSubType(LldpChassisIdSubType.get(getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp chassis id subtype: {}\", LldpChassisIdSubType.getTypeString(getLldpRemChassisidSubtype()));\n    \t\n            lldpLink.setLldpRemSysname(getLldpRemSysname());\n            LOG.info( \"getLldpLink: row rem lldp sysname: {}\", lldpLink.getLldpRemSysname());\n\n            lldpLink.setLldpRemPortId(getLldpRemPortid());\n            LOG.info( \"getLldpLink: row rem lldp port id: {}\", lldpLink.getLldpRemPortId());\n\n            lldpLink.setLldpRemPortIdSubType(LldpPortIdSubType.get(getLldpRemPortidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp port id subtype: {}\", LldpPortIdSubType.getTypeString(getLldpRemPortidSubtype()));\n \n            lldpLink.setLldpRemPortDescr(getLldpRemPortDescr());\n            \n    \t\treturn lldpLink;\n\t    }","commit_id":"72a2ca05358911acd2613db2e8f3d04133f78cc1","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SnmpValue getLldpRemChassisId() {\n\t    \treturn getValue(LLDP_REM_CHASSIS_ID);\n\t    }","id":105225,"modified_method":"public String getLldpRemChassisId() {\n\t    \treturn LldpLocalGroupTracker.decodeLldpChassisId(getValue(LLDP_REM_CHASSIS_ID), getLldpRemChassisidSubtype());\n\t    }","commit_id":"72a2ca05358911acd2613db2e8f3d04133f78cc1","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SnmpValue getLldpRemPortid() {\n\t    \treturn getValue(LLDP_REM_PORT_ID);\n\t    }","id":105226,"modified_method":"public String getLldpRemPortid() {\n\t    \treturn decodeLldpPortId(getLldpRemPortidSubtype(), getValue(LLDP_REM_PORT_ID));\n\t    }","commit_id":"72a2ca05358911acd2613db2e8f3d04133f78cc1","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void runCollection() {\n\n    \tfinal Date now = new Date(); \n\n    \tString trackerName = \"lldpLocalGroup\";\n        final LldpLocalGroupTracker lldpLocalGroup = new LldpLocalGroupTracker();\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        SnmpWalker walker =  SnmpUtils.createWalker(getPeer(), trackerName, lldpLocalGroup);\n        walker.start();\n\n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent timed out while scanning the {} table\", trackerName);\n            \treturn;\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            \treturn;\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: Lldp Linkd node collection interrupted, exiting\", e);\n            return;\n        }\n        \n        if (lldpLocalGroup.getLldpLocChassisid() == null ) {\n            LOG.info( \"lldp mib not supported on: {}\", str(getPeer().getAddress()));\n            return;\n        } else {\n            LOG.info( \"found lldp identifier : {}\", lldpLocalGroup.getLldpElement());\n        }\n        \n        m_linkd.getQueryManager().store(getNodeId(), lldpLocalGroup.getLldpElement());\n\n        final LldpLocPortGetter lldpLocPort = new LldpLocPortGetter(getPeer());\n        trackerName = \"lldpRemTable\";\n        LldpRemTableTracker lldpRemTable = new LldpRemTableTracker() {\n\n        \tpublic void processLldpRemRow(final LldpRemRow row) {\n        \t\tm_linkd.getQueryManager().store(getNodeId(),row.getLldpLink(lldpLocPort));\n        \t}\n        };\n\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        walker = SnmpUtils.createWalker(getPeer(), trackerName, lldpRemTable);\n        walker.start();\n        \n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent timed out while scanning the {} table\", trackerName);\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: collection interrupted, exiting\",e);\n            return;\n        }\n        m_linkd.getQueryManager().reconcileLldp(getNodeId(),now);\n    }","id":105227,"modified_method":"protected void runCollection() {\n\n    \tfinal Date now = new Date(); \n\n    \tString trackerName = \"lldpLocalGroup\";\n        final LldpLocalGroupTracker lldpLocalGroup = new LldpLocalGroupTracker();\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        SnmpWalker walker =  SnmpUtils.createWalker(getPeer(), trackerName, lldpLocalGroup);\n        walker.start();\n\n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent timed out while scanning the {} table\", trackerName);\n            \treturn;\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            \treturn;\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: Lldp Linkd node collection interrupted, exiting\", e);\n            return;\n        }\n        \n        if (lldpLocalGroup.getLldpLocChassisid() == null ) {\n            LOG.info( \"lldp mib not supported on: {}\", str(getPeer().getAddress()));\n            return;\n        } else {\n            LOG.info( \"found lldp identifier : {}\", lldpLocalGroup.getLldpElement());\n        }\n        \n        m_linkd.getQueryManager().store(getNodeId(), lldpLocalGroup.getLldpElement());\n\n        final LldpLocPortGetter lldpLocPort = new LldpLocPortGetter(getPeer());\n        trackerName = \"lldpRemTable\";\n        LldpRemTableTracker lldpRemTable = new LldpRemTableTracker() {\n\n        \tpublic void processLldpRemRow(final LldpRemRow row) {\n        \t    // Fix for DragonWave, we avoid to store if target has the same chassis id then the source\n        \t    if (lldpLocalGroup.getLldpLocChassisid().equals(row.getLldpRemChassisId())\n\t                && lldpLocalGroup.getLldpLocChassisidSubType().intValue() == row.getLldpRemChassisidSubtype().intValue())\n        \t        return;\n        \t    m_linkd.getQueryManager().store(getNodeId(),row.getLldpLink(lldpLocPort));\n        \t}\n        };\n\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        walker = SnmpUtils.createWalker(getPeer(), trackerName, lldpRemTable);\n        walker.start();\n        \n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent timed out while scanning the {} table\", trackerName);\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: collection interrupted, exiting\",e);\n            return;\n        }\n        m_linkd.getQueryManager().reconcileLldp(getNodeId(),now);\n    }","commit_id":"72a2ca05358911acd2613db2e8f3d04133f78cc1","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public LldpLink get(Integer lldpRemLocalPortNum) {\n\t\tSnmpObjId instance = SnmpObjId.get(lldpRemLocalPortNum.toString());\n\t\tSnmpObjId[] oids = new SnmpObjId[]\n\t\t\t\t{SnmpObjId.get(LLDP_LOC_PORTID_SUBTYPE, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_PORTID, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_DESCR,instance)};\n\t\t\n\t\tSnmpValue[] val = SnmpUtils.get(m_agentConfig, oids);\n\t\tif (val == null || val.length != 3 || val[0] == null || val[1] == null || !val[0].isNumeric())\n\t\t\treturn null;\n\t\tLldpLink lldplink = new LldpLink();\n\t\tlldplink.setLldpLocalPortNum(lldpRemLocalPortNum);\n\t\tlldplink.setLldpPortId(LldpHelper.decodeLldpPortId(val[0].toInt(),val[1]));\n\t\tlldplink.setLldpPortIdSubType(LldpPortIdSubType.get(val[0].toInt()));\n\t\tif (val[2] != null)\n\t\t\tlldplink.setLldpPortDescr((val[2].toDisplayString()));\n\t\telse\n\t\t\tlldplink.setLldpPortDescr(\"\");\n\t\tif (val[0].toInt() == LldpPortIdSubType.LLDP_PORTID_SUBTYPE_LOCAL.getValue().intValue()) {\n\t\t\ttry {\n\t\t\t\tlldplink.setLldpPortIfindex((val[1].toInt()));\n\t\t\t} catch (Exception e) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\treturn lldplink;\n\t}","id":105228,"modified_method":"public LldpLink get(Integer lldpRemLocalPortNum) {\n\t\tSnmpObjId instance = SnmpObjId.get(lldpRemLocalPortNum.toString());\n\t\tSnmpObjId[] oids = new SnmpObjId[]\n\t\t\t\t{SnmpObjId.get(LLDP_LOC_PORTID_SUBTYPE, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_PORTID, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_DESCR,instance)};\n\t\t\n\t\tSnmpValue[] val = SnmpUtils.get(m_agentConfig, oids);\n\t\tif (val == null || val.length != 3 || val[0] == null || val[1] == null || !val[0].isNumeric())\n\t\t\treturn null;\n\t\tLldpLink lldplink = new LldpLink();\n\t\tlldplink.setLldpLocalPortNum(lldpRemLocalPortNum);\n\t\tlldplink.setLldpPortId(LldpRemTableTracker.decodeLldpPortId(val[0].toInt(),val[1]));\n\t\tlldplink.setLldpPortIdSubType(LldpPortIdSubType.get(val[0].toInt()));\n\t\tif (val[2] != null)\n\t\t\tlldplink.setLldpPortDescr((val[2].toDisplayString()));\n\t\telse\n\t\t\tlldplink.setLldpPortDescr(\"\");\n\t\tif (val[0].toInt() == LldpPortIdSubType.LLDP_PORTID_SUBTYPE_LOCAL.getValue().intValue()) {\n\t\t\ttry {\n\t\t\t\tlldplink.setLldpPortIfindex((val[1].toInt()));\n\t\t\t} catch (Exception e) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\treturn lldplink;\n\t}","commit_id":"a77ae913afc119d96b2c535ad05ba14c1ba38fe6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public LldpElement getLldpElement() {\n\t\tLldpElement lldpElement = new LldpElement();\n\t\tlldpElement.setLldpChassisId(LldpHelper.decodeLldpChassisId(getLldpLocChassisid(), getLldpLocChassisidSubType()));\n\t\tlldpElement.setLldpChassisIdSubType(LldpChassisIdSubType.get(getLldpLocChassisidSubType()));\n\t\tlldpElement.setLldpSysname(getLldpLocSysname());\n\t\treturn lldpElement;\n\t}","id":105229,"modified_method":"public LldpElement getLldpElement() {\n\t\tLldpElement lldpElement = new LldpElement();\n\t\tlldpElement.setLldpChassisId(getLldpLocChassisid());\n\t\tlldpElement.setLldpChassisIdSubType(LldpChassisIdSubType.get(getLldpLocChassisidSubType()));\n\t\tlldpElement.setLldpSysname(getLldpLocSysname());\n\t\treturn lldpElement;\n    }","commit_id":"a77ae913afc119d96b2c535ad05ba14c1ba38fe6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SnmpValue getLldpLocChassisid() {\n    \treturn m_store.getValue(LLDP_LOC_CHASSISID_ALIAS);\n    }","id":105230,"modified_method":"public String getLldpLocChassisid() {\n    \treturn decodeLldpChassisId(m_store.getValue(LLDP_LOC_CHASSISID_ALIAS),getLldpLocChassisidSubType());\n    }","commit_id":"a77ae913afc119d96b2c535ad05ba14c1ba38fe6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public LldpLink getLldpLink(LldpLocPortGetter lldpLocPort) {\n            LOG.info( \"getLldpLink: row count: {}\", getColumnCount());\n            LOG.info( \"getLldpLink: row local port num: {}\",  getLldpRemLocalPortNum());\n\n            LldpLink lldpLink = lldpLocPort.get(getLldpRemLocalPortNum());\n\n            LOG.info( \"getLldpLink: row local port id: {}\", lldpLink.getLldpPortId());\n            LOG.info( \"getLldpLink: row local port subtype: {}\", LldpPortIdSubType.getTypeString(lldpLink.getLldpPortIdSubType().getValue()));\n    \t\n            lldpLink.setLldpRemChassisId(LldpHelper.decodeLldpChassisId(getLldpRemChassisId(), getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp identifier: {}\", lldpLink.getLldpRemChassisId());\n            \n            lldpLink.setLldpRemChassisIdSubType(LldpChassisIdSubType.get(getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp chassis id subtype: {}\", LldpChassisIdSubType.getTypeString(getLldpRemChassisidSubtype()));\n    \t\n            lldpLink.setLldpRemSysname(getLldpRemSysname());\n            LOG.info( \"getLldpLink: row rem lldp sysname: {}\", lldpLink.getLldpRemSysname());\n\n            lldpLink.setLldpRemPortId(LldpHelper.decodeLldpPortId(getLldpRemPortidSubtype(), getLldpRemPortid()));\n            LOG.info( \"getLldpLink: row rem lldp port id: {}\", lldpLink.getLldpRemPortId());\n\n            lldpLink.setLldpRemPortIdSubType(LldpPortIdSubType.get(getLldpRemPortidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp port id subtype: {}\", LldpPortIdSubType.getTypeString(getLldpRemPortidSubtype()));\n \n            lldpLink.setLldpRemPortDescr(getLldpRemPortDescr());\n            \n    \t\treturn lldpLink;\n\t    }","id":105231,"modified_method":"public LldpLink getLldpLink(LldpLocPortGetter lldpLocPort) {\n            LOG.info( \"getLldpLink: row count: {}\", getColumnCount());\n            LOG.info( \"getLldpLink: row local port num: {}\",  getLldpRemLocalPortNum());\n\n            LldpLink lldpLink = lldpLocPort.get(getLldpRemLocalPortNum());\n\n            LOG.info( \"getLldpLink: row local port id: {}\", lldpLink.getLldpPortId());\n            LOG.info( \"getLldpLink: row local port subtype: {}\", LldpPortIdSubType.getTypeString(lldpLink.getLldpPortIdSubType().getValue()));\n    \t\n            lldpLink.setLldpRemChassisId(getLldpRemChassisId());\n            LOG.info( \"getLldpLink: row rem lldp identifier: {}\", lldpLink.getLldpRemChassisId());\n            \n            lldpLink.setLldpRemChassisIdSubType(LldpChassisIdSubType.get(getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp chassis id subtype: {}\", LldpChassisIdSubType.getTypeString(getLldpRemChassisidSubtype()));\n    \t\n            lldpLink.setLldpRemSysname(getLldpRemSysname());\n            LOG.info( \"getLldpLink: row rem lldp sysname: {}\", lldpLink.getLldpRemSysname());\n\n            lldpLink.setLldpRemPortId(getLldpRemPortid());\n            LOG.info( \"getLldpLink: row rem lldp port id: {}\", lldpLink.getLldpRemPortId());\n\n            lldpLink.setLldpRemPortIdSubType(LldpPortIdSubType.get(getLldpRemPortidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp port id subtype: {}\", LldpPortIdSubType.getTypeString(getLldpRemPortidSubtype()));\n \n            lldpLink.setLldpRemPortDescr(getLldpRemPortDescr());\n            \n    \t\treturn lldpLink;\n\t    }","commit_id":"a77ae913afc119d96b2c535ad05ba14c1ba38fe6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SnmpValue getLldpRemPortid() {\n\t    \treturn getValue(LLDP_REM_PORT_ID);\n\t    }","id":105232,"modified_method":"public String getLldpRemPortid() {\n\t    \treturn decodeLldpPortId(getLldpRemPortidSubtype(), getValue(LLDP_REM_PORT_ID));\n\t    }","commit_id":"a77ae913afc119d96b2c535ad05ba14c1ba38fe6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SnmpValue getLldpRemChassisId() {\n\t    \treturn getValue(LLDP_REM_CHASSIS_ID);\n\t    }","id":105233,"modified_method":"public String getLldpRemChassisId() {\n\t    \treturn LldpLocalGroupTracker.decodeLldpChassisId(getValue(LLDP_REM_CHASSIS_ID), getLldpRemChassisidSubtype());\n\t    }","commit_id":"a77ae913afc119d96b2c535ad05ba14c1ba38fe6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void runCollection() {\n\n    \tfinal Date now = new Date(); \n\n    \tString trackerName = \"lldpLocalGroup\";\n        final LldpLocalGroupTracker lldpLocalGroup = new LldpLocalGroupTracker();\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        SnmpWalker walker =  SnmpUtils.createWalker(getPeer(), trackerName, lldpLocalGroup);\n        walker.start();\n\n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent timed out while scanning the {} table\", trackerName);\n            \treturn;\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            \treturn;\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: Lldp Linkd node collection interrupted, exiting\", e);\n            return;\n        }\n        \n        if (lldpLocalGroup.getLldpLocChassisid() == null ) {\n            LOG.info( \"lldp mib not supported on: {}\", str(getPeer().getAddress()));\n            return;\n        } else {\n            LOG.info( \"found lldp identifier : {}\", lldpLocalGroup.getLldpElement());\n        }\n        \n        m_linkd.getQueryManager().store(getNodeId(), lldpLocalGroup.getLldpElement());\n\n        final LldpLocPortGetter lldpLocPort = new LldpLocPortGetter(getPeer());\n        trackerName = \"lldpRemTable\";\n        LldpRemTableTracker lldpRemTable = new LldpRemTableTracker() {\n\n        \tpublic void processLldpRemRow(final LldpRemRow row) {\n        \t\tm_linkd.getQueryManager().store(getNodeId(),row.getLldpLink(lldpLocPort));\n        \t}\n        };\n\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        walker = SnmpUtils.createWalker(getPeer(), trackerName, lldpRemTable);\n        walker.start();\n        \n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent timed out while scanning the {} table\", trackerName);\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: collection interrupted, exiting\",e);\n            return;\n        }\n        m_linkd.getQueryManager().reconcileLldp(getNodeId(),now);\n    }","id":105234,"modified_method":"protected void runCollection() {\n\n    \tfinal Date now = new Date(); \n\n    \tString trackerName = \"lldpLocalGroup\";\n        final LldpLocalGroupTracker lldpLocalGroup = new LldpLocalGroupTracker();\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        SnmpWalker walker =  SnmpUtils.createWalker(getPeer(), trackerName, lldpLocalGroup);\n        walker.start();\n\n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent timed out while scanning the {} table\", trackerName);\n            \treturn;\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            \treturn;\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: Lldp Linkd node collection interrupted, exiting\", e);\n            return;\n        }\n        \n        if (lldpLocalGroup.getLldpLocChassisid() == null ) {\n            LOG.info( \"lldp mib not supported on: {}\", str(getPeer().getAddress()));\n            return;\n        } else {\n            LOG.info( \"found lldp identifier : {}\", lldpLocalGroup.getLldpElement());\n        }\n        \n        m_linkd.getQueryManager().store(getNodeId(), lldpLocalGroup.getLldpElement());\n\n        final LldpLocPortGetter lldpLocPort = new LldpLocPortGetter(getPeer());\n        trackerName = \"lldpRemTable\";\n        LldpRemTableTracker lldpRemTable = new LldpRemTableTracker() {\n\n        \tpublic void processLldpRemRow(final LldpRemRow row) {\n        \t    // Fix for DragonWave, we avoid to store if target has the same chassis id then the source\n        \t    if (lldpLocalGroup.getLldpLocChassisid().equals(row.getLldpRemChassisId())\n\t                && lldpLocalGroup.getLldpLocChassisidSubType().intValue() == row.getLldpRemChassisidSubtype().intValue())\n        \t        return;\n        \t    m_linkd.getQueryManager().store(getNodeId(),row.getLldpLink(lldpLocPort));\n        \t}\n        };\n\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        walker = SnmpUtils.createWalker(getPeer(), trackerName, lldpRemTable);\n        walker.start();\n        \n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent timed out while scanning the {} table\", trackerName);\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: collection interrupted, exiting\",e);\n            return;\n        }\n        m_linkd.getQueryManager().reconcileLldp(getNodeId(),now);\n    }","commit_id":"a77ae913afc119d96b2c535ad05ba14c1ba38fe6","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public LldpLink get(Integer lldpRemLocalPortNum) {\n\t\tSnmpObjId instance = SnmpObjId.get(lldpRemLocalPortNum.toString());\n\t\tSnmpObjId[] oids = new SnmpObjId[]\n\t\t\t\t{SnmpObjId.get(LLDP_LOC_PORTID_SUBTYPE, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_PORTID, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_DESCR,instance)};\n\t\t\n\t\tSnmpValue[] val = SnmpUtils.get(m_agentConfig, oids);\n\t\tif (val == null || val.length != 3 || val[0] == null || val[1] == null || !val[0].isNumeric())\n\t\t\treturn null;\n\t\tLldpLink lldplink = new LldpLink();\n\t\tlldplink.setLldpLocalPortNum(lldpRemLocalPortNum);\n\t\tlldplink.setLldpPortId(LldpHelper.decodeLldpPortId(val[0].toInt(),val[1]));\n\t\tlldplink.setLldpPortIdSubType(LldpPortIdSubType.get(val[0].toInt()));\n\t\tif (val[2] != null)\n\t\t\tlldplink.setLldpPortDescr((val[2].toDisplayString()));\n\t\telse\n\t\t\tlldplink.setLldpPortDescr(\"\");\n\t\tif (val[0].toInt() == LldpPortIdSubType.LLDP_PORTID_SUBTYPE_LOCAL.getValue().intValue()) {\n\t\t\ttry {\n\t\t\t\tlldplink.setLldpPortIfindex((val[1].toInt()));\n\t\t\t} catch (Exception e) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\treturn lldplink;\n\t}","id":105235,"modified_method":"public LldpLink get(Integer lldpRemLocalPortNum) {\n\t\tSnmpObjId instance = SnmpObjId.get(lldpRemLocalPortNum.toString());\n\t\tSnmpObjId[] oids = new SnmpObjId[]\n\t\t\t\t{SnmpObjId.get(LLDP_LOC_PORTID_SUBTYPE, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_PORTID, instance),\n\t\t\t\t\tSnmpObjId.get(LLDP_LOC_DESCR,instance)};\n\t\t\n\t\tSnmpValue[] val = SnmpUtils.get(m_agentConfig, oids);\n\t\tif (val == null || val.length != 3 || val[0] == null || val[1] == null || !val[0].isNumeric())\n\t\t\treturn null;\n\t\tLldpLink lldplink = new LldpLink();\n\t\tlldplink.setLldpLocalPortNum(lldpRemLocalPortNum);\n\t\tlldplink.setLldpPortId(LldpRemTableTracker.decodeLldpPortId(val[0].toInt(),val[1]));\n\t\tlldplink.setLldpPortIdSubType(LldpPortIdSubType.get(val[0].toInt()));\n\t\tif (val[2] != null)\n\t\t\tlldplink.setLldpPortDescr((val[2].toDisplayString()));\n\t\telse\n\t\t\tlldplink.setLldpPortDescr(\"\");\n\t\tif (val[0].toInt() == LldpPortIdSubType.LLDP_PORTID_SUBTYPE_LOCAL.getValue().intValue()) {\n\t\t\ttry {\n\t\t\t\tlldplink.setLldpPortIfindex((val[1].toInt()));\n\t\t\t} catch (Exception e) {\n\t\t\t\t\n\t\t\t}\n\t\t}\n\n\t\treturn lldplink;\n\t}","commit_id":"89e849ebec9f55545e46eba1b16a180e988fa3c9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public LldpElement getLldpElement() {\n\t\tLldpElement lldpElement = new LldpElement();\n\t\tlldpElement.setLldpChassisId(LldpHelper.decodeLldpChassisId(getLldpLocChassisid(), getLldpLocChassisidSubType()));\n\t\tlldpElement.setLldpChassisIdSubType(LldpChassisIdSubType.get(getLldpLocChassisidSubType()));\n\t\tlldpElement.setLldpSysname(getLldpLocSysname());\n\t\treturn lldpElement;\n\t}","id":105236,"modified_method":"public LldpElement getLldpElement() {\n\t\tLldpElement lldpElement = new LldpElement();\n\t\tlldpElement.setLldpChassisId(getLldpLocChassisid());\n\t\tlldpElement.setLldpChassisIdSubType(LldpChassisIdSubType.get(getLldpLocChassisidSubType()));\n\t\tlldpElement.setLldpSysname(getLldpLocSysname());\n\t\treturn lldpElement;\n    }","commit_id":"89e849ebec9f55545e46eba1b16a180e988fa3c9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SnmpValue getLldpLocChassisid() {\n    \treturn m_store.getValue(LLDP_LOC_CHASSISID_ALIAS);\n    }","id":105237,"modified_method":"public String getLldpLocChassisid() {\n    \treturn decodeLldpChassisId(m_store.getValue(LLDP_LOC_CHASSISID_ALIAS),getLldpLocChassisidSubType());\n    }","commit_id":"89e849ebec9f55545e46eba1b16a180e988fa3c9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SnmpValue getLldpRemPortid() {\n\t    \treturn getValue(LLDP_REM_PORT_ID);\n\t    }","id":105238,"modified_method":"public String getLldpRemPortid() {\n\t    \treturn decodeLldpPortId(getLldpRemPortidSubtype(), getValue(LLDP_REM_PORT_ID));\n\t    }","commit_id":"89e849ebec9f55545e46eba1b16a180e988fa3c9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public LldpLink getLldpLink(LldpLocPortGetter lldpLocPort) {\n            LOG.info( \"getLldpLink: row count: {}\", getColumnCount());\n            LOG.info( \"getLldpLink: row local port num: {}\",  getLldpRemLocalPortNum());\n\n            LldpLink lldpLink = lldpLocPort.get(getLldpRemLocalPortNum());\n\n            LOG.info( \"getLldpLink: row local port id: {}\", lldpLink.getLldpPortId());\n            LOG.info( \"getLldpLink: row local port subtype: {}\", LldpPortIdSubType.getTypeString(lldpLink.getLldpPortIdSubType().getValue()));\n    \t\n            lldpLink.setLldpRemChassisId(LldpHelper.decodeLldpChassisId(getLldpRemChassisId(), getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp identifier: {}\", lldpLink.getLldpRemChassisId());\n            \n            lldpLink.setLldpRemChassisIdSubType(LldpChassisIdSubType.get(getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp chassis id subtype: {}\", LldpChassisIdSubType.getTypeString(getLldpRemChassisidSubtype()));\n    \t\n            lldpLink.setLldpRemSysname(getLldpRemSysname());\n            LOG.info( \"getLldpLink: row rem lldp sysname: {}\", lldpLink.getLldpRemSysname());\n\n            lldpLink.setLldpRemPortId(LldpHelper.decodeLldpPortId(getLldpRemPortidSubtype(), getLldpRemPortid()));\n            LOG.info( \"getLldpLink: row rem lldp port id: {}\", lldpLink.getLldpRemPortId());\n\n            lldpLink.setLldpRemPortIdSubType(LldpPortIdSubType.get(getLldpRemPortidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp port id subtype: {}\", LldpPortIdSubType.getTypeString(getLldpRemPortidSubtype()));\n \n            lldpLink.setLldpRemPortDescr(getLldpRemPortDescr());\n            \n    \t\treturn lldpLink;\n\t    }","id":105239,"modified_method":"public LldpLink getLldpLink(LldpLocPortGetter lldpLocPort) {\n            LOG.info( \"getLldpLink: row count: {}\", getColumnCount());\n            LOG.info( \"getLldpLink: row local port num: {}\",  getLldpRemLocalPortNum());\n\n            LldpLink lldpLink = lldpLocPort.get(getLldpRemLocalPortNum());\n\n            LOG.info( \"getLldpLink: row local port id: {}\", lldpLink.getLldpPortId());\n            LOG.info( \"getLldpLink: row local port subtype: {}\", LldpPortIdSubType.getTypeString(lldpLink.getLldpPortIdSubType().getValue()));\n    \t\n            lldpLink.setLldpRemChassisId(getLldpRemChassisId());\n            LOG.info( \"getLldpLink: row rem lldp identifier: {}\", lldpLink.getLldpRemChassisId());\n            \n            lldpLink.setLldpRemChassisIdSubType(LldpChassisIdSubType.get(getLldpRemChassisidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp chassis id subtype: {}\", LldpChassisIdSubType.getTypeString(getLldpRemChassisidSubtype()));\n    \t\n            lldpLink.setLldpRemSysname(getLldpRemSysname());\n            LOG.info( \"getLldpLink: row rem lldp sysname: {}\", lldpLink.getLldpRemSysname());\n\n            lldpLink.setLldpRemPortId(getLldpRemPortid());\n            LOG.info( \"getLldpLink: row rem lldp port id: {}\", lldpLink.getLldpRemPortId());\n\n            lldpLink.setLldpRemPortIdSubType(LldpPortIdSubType.get(getLldpRemPortidSubtype()));\n            LOG.info( \"getLldpLink: row rem lldp port id subtype: {}\", LldpPortIdSubType.getTypeString(getLldpRemPortidSubtype()));\n \n            lldpLink.setLldpRemPortDescr(getLldpRemPortDescr());\n            \n    \t\treturn lldpLink;\n\t    }","commit_id":"89e849ebec9f55545e46eba1b16a180e988fa3c9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public SnmpValue getLldpRemChassisId() {\n\t    \treturn getValue(LLDP_REM_CHASSIS_ID);\n\t    }","id":105240,"modified_method":"public String getLldpRemChassisId() {\n\t    \treturn LldpLocalGroupTracker.decodeLldpChassisId(getValue(LLDP_REM_CHASSIS_ID), getLldpRemChassisidSubtype());\n\t    }","commit_id":"89e849ebec9f55545e46eba1b16a180e988fa3c9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void runCollection() {\n\n    \tfinal Date now = new Date(); \n\n    \tString trackerName = \"lldpLocalGroup\";\n        final LldpLocalGroupTracker lldpLocalGroup = new LldpLocalGroupTracker();\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        SnmpWalker walker =  SnmpUtils.createWalker(getPeer(), trackerName, lldpLocalGroup);\n        walker.start();\n\n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent timed out while scanning the {} table\", trackerName);\n            \treturn;\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            \treturn;\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: Lldp Linkd node collection interrupted, exiting\", e);\n            return;\n        }\n        \n        if (lldpLocalGroup.getLldpLocChassisid() == null ) {\n            LOG.info( \"lldp mib not supported on: {}\", str(getPeer().getAddress()));\n            return;\n        } else {\n            LOG.info( \"found lldp identifier : {}\", lldpLocalGroup.getLldpElement());\n        }\n        \n        m_linkd.getQueryManager().store(getNodeId(), lldpLocalGroup.getLldpElement());\n\n        final LldpLocPortGetter lldpLocPort = new LldpLocPortGetter(getPeer());\n        trackerName = \"lldpRemTable\";\n        LldpRemTableTracker lldpRemTable = new LldpRemTableTracker() {\n\n        \tpublic void processLldpRemRow(final LldpRemRow row) {\n        \t\tm_linkd.getQueryManager().store(getNodeId(),row.getLldpLink(lldpLocPort));\n        \t}\n        };\n\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        walker = SnmpUtils.createWalker(getPeer(), trackerName, lldpRemTable);\n        walker.start();\n        \n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent timed out while scanning the {} table\", trackerName);\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: collection interrupted, exiting\",e);\n            return;\n        }\n        m_linkd.getQueryManager().reconcileLldp(getNodeId(),now);\n    }","id":105241,"modified_method":"protected void runCollection() {\n\n    \tfinal Date now = new Date(); \n\n    \tString trackerName = \"lldpLocalGroup\";\n        final LldpLocalGroupTracker lldpLocalGroup = new LldpLocalGroupTracker();\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        SnmpWalker walker =  SnmpUtils.createWalker(getPeer(), trackerName, lldpLocalGroup);\n        walker.start();\n\n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent timed out while scanning the {} table\", trackerName);\n            \treturn;\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting Lldp Linkd node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            \treturn;\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: Lldp Linkd node collection interrupted, exiting\", e);\n            return;\n        }\n        \n        if (lldpLocalGroup.getLldpLocChassisid() == null ) {\n            LOG.info( \"lldp mib not supported on: {}\", str(getPeer().getAddress()));\n            return;\n        } else {\n            LOG.info( \"found lldp identifier : {}\", lldpLocalGroup.getLldpElement());\n        }\n        \n        m_linkd.getQueryManager().store(getNodeId(), lldpLocalGroup.getLldpElement());\n\n        final LldpLocPortGetter lldpLocPort = new LldpLocPortGetter(getPeer());\n        trackerName = \"lldpRemTable\";\n        LldpRemTableTracker lldpRemTable = new LldpRemTableTracker() {\n\n        \tpublic void processLldpRemRow(final LldpRemRow row) {\n        \t    // Fix for DragonWave, we avoid to store if target has the same chassis id then the source\n        \t    if (lldpLocalGroup.getLldpLocChassisid().equals(row.getLldpRemChassisId())\n\t                && lldpLocalGroup.getLldpLocChassisidSubType().intValue() == row.getLldpRemChassisidSubtype().intValue())\n        \t        return;\n        \t    m_linkd.getQueryManager().store(getNodeId(),row.getLldpLink(lldpLocPort));\n        \t}\n        };\n\n\t\tLOG.info( \"run: collecting {} on: {}\",trackerName, str(getTarget()));\n        walker = SnmpUtils.createWalker(getPeer(), trackerName, lldpRemTable);\n        walker.start();\n        \n        try {\n            walker.waitFor();\n            if (walker.timedOut()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent timed out while scanning the {} table\", trackerName);\n            }  else if (walker.failed()) {\n            \tLOG.info(\n                        \"run:Aborting node scan : Agent failed while scanning the {} table: {}\", trackerName,walker.getErrorMessage());\n            }\n        } catch (final InterruptedException e) {\n            LOG.error(\"run: collection interrupted, exiting\",e);\n            return;\n        }\n        m_linkd.getQueryManager().reconcileLldp(getNodeId(),now);\n    }","commit_id":"89e849ebec9f55545e46eba1b16a180e988fa3c9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"void populateServicesForStack(StackInfo stackInfo) throws\n          ParserConfigurationException, SAXException,\n          XPathExpressionException, IOException, JAXBException {\n    List<ServiceInfo> services = new ArrayList<ServiceInfo>();\n    File servicesFolder = new File(stackRoot.getAbsolutePath() + File\n      .separator + stackInfo.getName() + File.separator + stackInfo.getVersion()\n      + File.separator + AmbariMetaInfo.SERVICES_FOLDER_NAME);\n    if (!servicesFolder.exists()) {\n      LOG.info(\"No services defined for stack: \" + stackInfo.getName() +\n      \"-\" + stackInfo.getVersion());\n    } else {\n      try {\n        File[] servicesFolders = servicesFolder.listFiles(AmbariMetaInfo\n          .FILENAME_FILTER);\n        if (servicesFolders == null) {\n          String message = String.format(\"No service folders found at %s\",\n                  servicesFolder.getAbsolutePath());\n          throw new AmbariException(message);\n        }\n        // Iterate over service folders\n        for (File serviceFolder : servicesFolders) {\n          if (!serviceFolder.isDirectory())\n            continue;\n          // Get metainfo schema format version\n          File metainfoFile = new File(serviceFolder.getAbsolutePath()\n                  + File.separator + AmbariMetaInfo.SERVICE_METAINFO_FILE_NAME);\n          // get metrics file, if it exists\n          File metricsJson = new File(serviceFolder.getAbsolutePath()\n            + File.separator + AmbariMetaInfo.SERVICE_METRIC_FILE_NAME);\n          \n          File alertsJson = new File(serviceFolder.getAbsolutePath() +\n              File.separator + AmbariMetaInfo.SERVICE_ALERT_FILE_NAME);\n\n          //Reading v2 service metainfo (may contain multiple services)\n          // Get services from metadata\n          ServiceMetainfoXml smiv2x =\n                  unmarshal(ServiceMetainfoXml.class, metainfoFile);\n          List<ServiceInfo> serviceInfos = smiv2x.getServices();\n          for (ServiceInfo serviceInfo : serviceInfos) {\n            serviceInfo.setSchemaVersion(AmbariMetaInfo.SCHEMA_VERSION_2);\n            populateConfigTypesFromDependencies(serviceInfo);\n\n            // Find service package folder\n            String servicePackageDir = resolveServicePackageFolder(\n                    stackRoot.getAbsolutePath(), stackInfo,\n                    serviceFolder.getName(), serviceInfo.getName());\n            serviceInfo.setServicePackageFolder(servicePackageDir);\n\n            // process metrics.json\n            if (metricsJson.exists())\n              serviceInfo.setMetricsFile(metricsJson);\n            if (alertsJson.exists())\n              serviceInfo.setAlertsFile(alertsJson);\n\n            // Get all properties from all \"configs/*-site.xml\" files\n            setPropertiesFromConfigs(serviceFolder, serviceInfo);\n\n            // Add now to be removed while iterating extension graph\n            services.add(serviceInfo);\n          }\n        }\n      } catch (Exception e) {\n        LOG.error(\"Error while parsing metainfo.xml for a service\", e);\n      }\n    }\n\n    stackInfo.getServices().addAll(services);\n  }","id":105242,"modified_method":"void populateServicesForStack(StackInfo stackInfo) throws\n          ParserConfigurationException, SAXException,\n          XPathExpressionException, IOException, JAXBException {\n    List<ServiceInfo> services = new ArrayList<ServiceInfo>();\n    File servicesFolder = new File(stackRoot.getAbsolutePath() + File\n      .separator + stackInfo.getName() + File.separator + stackInfo.getVersion()\n      + File.separator + AmbariMetaInfo.SERVICES_FOLDER_NAME);\n    if (!servicesFolder.exists()) {\n      LOG.info(\"No services defined for stack: \" + stackInfo.getName() +\n      \"-\" + stackInfo.getVersion());\n    } else {\n      try {\n        File[] servicesFolders = servicesFolder.listFiles(AmbariMetaInfo\n          .FILENAME_FILTER);\n        if (servicesFolders == null) {\n          String message = String.format(\"No service folders found at %s\",\n                  servicesFolder.getAbsolutePath());\n          throw new AmbariException(message);\n        }\n        // Iterate over service folders\n        for (File serviceFolder : servicesFolders) {\n          if (!serviceFolder.isDirectory())\n            continue;\n          // Get metainfo schema format version\n          File metainfoFile = new File(serviceFolder.getAbsolutePath()\n                  + File.separator + AmbariMetaInfo.SERVICE_METAINFO_FILE_NAME);\n          // get metrics file, if it exists\n          File metricsJson = new File(serviceFolder.getAbsolutePath()\n            + File.separator + AmbariMetaInfo.SERVICE_METRIC_FILE_NAME);\n          \n          File alertsJson = new File(serviceFolder.getAbsolutePath() +\n              File.separator + AmbariMetaInfo.SERVICE_ALERT_FILE_NAME);\n\n          //Reading v2 service metainfo (may contain multiple services)\n          // Get services from metadata\n          ServiceMetainfoXml smiv2x =\n                  unmarshal(ServiceMetainfoXml.class, metainfoFile);\n          List<ServiceInfo> serviceInfos = smiv2x.getServices();\n          for (ServiceInfo serviceInfo : serviceInfos) {\n            serviceInfo.setSchemaVersion(AmbariMetaInfo.SCHEMA_VERSION_2);\n\n            // Find service package folder\n            String servicePackageDir = resolveServicePackageFolder(\n                    stackRoot.getAbsolutePath(), stackInfo,\n                    serviceFolder.getName(), serviceInfo.getName());\n            serviceInfo.setServicePackageFolder(servicePackageDir);\n\n            // process metrics.json\n            if (metricsJson.exists())\n              serviceInfo.setMetricsFile(metricsJson);\n            if (alertsJson.exists())\n              serviceInfo.setAlertsFile(alertsJson);\n\n            // Get all properties from all \"configs/*-site.xml\" files\n            setPropertiesFromConfigs(serviceFolder, serviceInfo);\n\n            // Add now to be removed while iterating extension graph\n            services.add(serviceInfo);\n          }\n        }\n      } catch (Exception e) {\n        LOG.error(\"Error while parsing metainfo.xml for a service\", e);\n      }\n    }\n\n    stackInfo.getServices().addAll(services);\n  }","commit_id":"f2d91b20fd61777b594311cbcf20343ee14b074e","url":"https://github.com/apache/ambari"},{"original_method":"ServiceInfo mergeServices(ServiceInfo parentService,\n                                    ServiceInfo childService) {\n    ServiceInfo mergedServiceInfo = new ServiceInfo();\n    mergedServiceInfo.setSchemaVersion(childService.getSchemaVersion());\n    mergedServiceInfo.setName(childService.getName());\n    mergedServiceInfo.setComment(childService.getComment());\n    mergedServiceInfo.setVersion(childService.getVersion());\n    mergedServiceInfo.setConfigDependencies(\n        childService.getConfigDependencies() != null ?\n            childService.getConfigDependencies() :\n            parentService.getConfigDependencies() != null ?\n                parentService.getConfigDependencies() :\n                Collections.<String>emptyList());\n    mergedServiceInfo.setConfigTypes(\n        childService.getConfigTypes() != null ?\n            childService.getConfigTypes() :\n            parentService.getConfigTypes() != null ?\n                parentService.getConfigTypes() :\n                Collections.<String, Map<String, Map<String, String>>>emptyMap());\n    mergedServiceInfo.setExcludedConfigTypes(\n      childService.getExcludedConfigTypes() != null ?\n        childService.getExcludedConfigTypes() :\n        parentService.getExcludedConfigTypes() != null ?\n          parentService.getExcludedConfigTypes() :\n          Collections.<String>emptySet()\n    );\n    mergedServiceInfo.setRequiredServices(\n        childService.getRequiredServices() != null ?\n          childService.getRequiredServices() :\n          parentService.getRequiredServices() != null ?\n            parentService.getRequiredServices() :\n            Collections.<String>emptyList()\n      );\n    \n    mergedServiceInfo.setRestartRequiredAfterChange(\n            (childService.isRestartRequiredAfterChange() != null) \n                    ? childService.isRestartRequiredAfterChange()\n                    : parentService.isRestartRequiredAfterChange());\n    mergedServiceInfo.setMonitoringService(\n            (childService.isMonitoringService() != null)\n                    ? childService.isMonitoringService()\n                    : parentService.isMonitoringService());\n\n    Map<String, ServiceOsSpecific> osSpecific = childService.getOsSpecifics();\n    if (! osSpecific.isEmpty()) {\n      mergedServiceInfo.setOsSpecifics(childService.getOsSpecifics());\n    } else {\n      mergedServiceInfo.setOsSpecifics(parentService.getOsSpecifics());\n    }\n\n    CommandScriptDefinition commandScript = childService.getCommandScript();\n    if (commandScript != null) {\n       mergedServiceInfo.setCommandScript(childService.getCommandScript());\n    } else {\n      mergedServiceInfo.setCommandScript(parentService.getCommandScript());\n    }\n    \n    String servicePackageFolder = childService.getServicePackageFolder();\n    if (servicePackageFolder != null) {\n      mergedServiceInfo.setServicePackageFolder(servicePackageFolder);\n    } else {\n      mergedServiceInfo.setServicePackageFolder(\n              parentService.getServicePackageFolder());\n    }\n\n    // Merge custom command definitions for service\n    List<CustomCommandDefinition> mergedCustomCommands =\n            mergeCustomCommandLists(parentService.getCustomCommands(),\n                    childService.getCustomCommands());\n    mergedServiceInfo.setCustomCommands(mergedCustomCommands);\n    \n    // metrics\n    if (null == childService.getMetricsFile() && null != parentService.getMetricsFile())\n      mergedServiceInfo.setMetricsFile(parentService.getMetricsFile());\n    \n    // alerts\n    if (null == childService.getAlertsFile() && null != parentService.getAlertsFile())\n      mergedServiceInfo.setAlertsFile(parentService.getAlertsFile());    \n\n    populateComponents(mergedServiceInfo, parentService, childService);\n\n    // Add child properties not deleted\n    Map<String, Set<String>> deleteMap = new HashMap<String, Set<String>>();\n    Map<String, Set<String>> appendMap = new HashMap<String, Set<String>>();\n    for (PropertyInfo propertyInfo : childService.getProperties()) {\n      if (!propertyInfo.isDeleted()) {\n        mergedServiceInfo.getProperties().add(propertyInfo);\n        if (appendMap.containsKey(propertyInfo.getName())) {\n          appendMap.get(propertyInfo.getName()).add(propertyInfo.getFilename());\n        } else {\n          Set<String> filenames = new HashSet<String>();\n          filenames.add(propertyInfo.getFilename());\n          appendMap.put(propertyInfo.getName(), filenames);\n        }\n      } else {\n        if (deleteMap.containsKey(propertyInfo.getName())) {\n          deleteMap.get(propertyInfo.getName()).add(propertyInfo.getFilename());\n        } else {\n          Set<String> filenames = new HashSet<String>();\n          filenames.add(propertyInfo.getFilename());\n          deleteMap.put(propertyInfo.getName(), filenames);\n        }\n      }\n    }\n    // Add all parent properties\n    for (PropertyInfo parentPropertyInfo : parentService.getProperties()) {\n      if (!deleteMap.containsKey(parentPropertyInfo.getName()) && !(appendMap\n          .containsKey(parentPropertyInfo.getName())\n        && appendMap.get(parentPropertyInfo.getName())\n          .contains(parentPropertyInfo.getFilename()))) {\n        mergedServiceInfo.getProperties().add(parentPropertyInfo);\n      }\n    }\n    // Add all parent config dependencies\n    if (parentService.getConfigDependencies() != null && !parentService\n        .getConfigDependencies().isEmpty()) {\n      for (String configDep : parentService.getConfigDependencies()) {\n        if (!mergedServiceInfo.getConfigDependencies().contains(configDep)) {\n          mergedServiceInfo.getConfigDependencies().add(configDep);\n        }\n      }\n    }\n    return mergedServiceInfo;\n  }","id":105243,"modified_method":"ServiceInfo mergeServices(ServiceInfo parentService,\n                                    ServiceInfo childService) {\n    ServiceInfo mergedServiceInfo = new ServiceInfo();\n    mergedServiceInfo.setSchemaVersion(childService.getSchemaVersion());\n    mergedServiceInfo.setName(childService.getName());\n    mergedServiceInfo.setComment(childService.getComment());\n    mergedServiceInfo.setVersion(childService.getVersion());\n    mergedServiceInfo.setConfigDependencies(\n        childService.getConfigDependencies() != null ?\n            childService.getConfigDependencies() :\n            parentService.getConfigDependencies() != null ?\n                parentService.getConfigDependencies() :\n                Collections.<String>emptyList());\n    mergedServiceInfo.setExcludedConfigTypes(\n      childService.getExcludedConfigTypes() != null ?\n        childService.getExcludedConfigTypes() :\n        parentService.getExcludedConfigTypes() != null ?\n          parentService.getExcludedConfigTypes() :\n          Collections.<String>emptySet()\n    );\n    mergedServiceInfo.setRequiredServices(\n        childService.getRequiredServices() != null ?\n          childService.getRequiredServices() :\n          parentService.getRequiredServices() != null ?\n            parentService.getRequiredServices() :\n            Collections.<String>emptyList()\n      );\n    \n    mergedServiceInfo.setRestartRequiredAfterChange(\n            (childService.isRestartRequiredAfterChange() != null) \n                    ? childService.isRestartRequiredAfterChange()\n                    : parentService.isRestartRequiredAfterChange());\n    mergedServiceInfo.setMonitoringService(\n            (childService.isMonitoringService() != null)\n                    ? childService.isMonitoringService()\n                    : parentService.isMonitoringService());\n\n    Map<String, ServiceOsSpecific> osSpecific = childService.getOsSpecifics();\n    if (! osSpecific.isEmpty()) {\n      mergedServiceInfo.setOsSpecifics(childService.getOsSpecifics());\n    } else {\n      mergedServiceInfo.setOsSpecifics(parentService.getOsSpecifics());\n    }\n    \n    mergedServiceInfo.setConfigTypes(new HashMap<String, Map<String, Map<String, String>>>());\n    if(childService.getConfigTypes() != null) {\n      mergedServiceInfo.getConfigTypes().putAll(childService.getConfigTypes());\n    }\n    if(parentService.getConfigTypes() != null) {\n      mergedServiceInfo.getConfigTypes().putAll(parentService.getConfigTypes());\n    }\n    \n    CommandScriptDefinition commandScript = childService.getCommandScript();\n    if (commandScript != null) {\n       mergedServiceInfo.setCommandScript(childService.getCommandScript());\n    } else {\n      mergedServiceInfo.setCommandScript(parentService.getCommandScript());\n    }\n    \n    String servicePackageFolder = childService.getServicePackageFolder();\n    if (servicePackageFolder != null) {\n      mergedServiceInfo.setServicePackageFolder(servicePackageFolder);\n    } else {\n      mergedServiceInfo.setServicePackageFolder(\n              parentService.getServicePackageFolder());\n    }\n\n    // Merge custom command definitions for service\n    List<CustomCommandDefinition> mergedCustomCommands =\n            mergeCustomCommandLists(parentService.getCustomCommands(),\n                    childService.getCustomCommands());\n    mergedServiceInfo.setCustomCommands(mergedCustomCommands);\n    \n    // metrics\n    if (null == childService.getMetricsFile() && null != parentService.getMetricsFile())\n      mergedServiceInfo.setMetricsFile(parentService.getMetricsFile());\n    \n    // alerts\n    if (null == childService.getAlertsFile() && null != parentService.getAlertsFile())\n      mergedServiceInfo.setAlertsFile(parentService.getAlertsFile());    \n\n    populateComponents(mergedServiceInfo, parentService, childService);\n\n    // Add child properties not deleted\n    Map<String, Set<String>> deleteMap = new HashMap<String, Set<String>>();\n    Map<String, Set<String>> appendMap = new HashMap<String, Set<String>>();\n    for (PropertyInfo propertyInfo : childService.getProperties()) {\n      if (!propertyInfo.isDeleted()) {\n        mergedServiceInfo.getProperties().add(propertyInfo);\n        if (appendMap.containsKey(propertyInfo.getName())) {\n          appendMap.get(propertyInfo.getName()).add(propertyInfo.getFilename());\n        } else {\n          Set<String> filenames = new HashSet<String>();\n          filenames.add(propertyInfo.getFilename());\n          appendMap.put(propertyInfo.getName(), filenames);\n        }\n      } else {\n        if (deleteMap.containsKey(propertyInfo.getName())) {\n          deleteMap.get(propertyInfo.getName()).add(propertyInfo.getFilename());\n        } else {\n          Set<String> filenames = new HashSet<String>();\n          filenames.add(propertyInfo.getFilename());\n          deleteMap.put(propertyInfo.getName(), filenames);\n        }\n      }\n    }\n    // Add all parent properties\n    for (PropertyInfo parentPropertyInfo : parentService.getProperties()) {\n      if (!deleteMap.containsKey(parentPropertyInfo.getName()) && !(appendMap\n          .containsKey(parentPropertyInfo.getName())\n        && appendMap.get(parentPropertyInfo.getName())\n          .contains(parentPropertyInfo.getFilename()))) {\n        mergedServiceInfo.getProperties().add(parentPropertyInfo);\n      }\n    }\n    // Add all parent config dependencies\n    if (parentService.getConfigDependencies() != null && !parentService\n        .getConfigDependencies().isEmpty()) {\n      for (String configDep : parentService.getConfigDependencies()) {\n        if (!mergedServiceInfo.getConfigDependencies().contains(configDep)) {\n          mergedServiceInfo.getConfigDependencies().add(configDep);\n        }\n      }\n    }\n    return mergedServiceInfo;\n  }","commit_id":"f2d91b20fd61777b594311cbcf20343ee14b074e","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Populate ServiceInfo#configTypes with default entries based on ServiceInfo#configDependencies property\n   */\n  void populateConfigTypesFromDependencies(ServiceInfo serviceInfo) {\n    List<String> configDependencies = serviceInfo.getConfigDependenciesWithComponents();\n    if (configDependencies != null) {\n      Map<String, Map<String, Map<String, String>>> configTypes = new HashMap<String, Map<String, Map<String, String>>>();\n      for (String configDependency : configDependencies) {\n        if (!configTypes.containsKey(configDependency)) {\n          Map<String, Map<String, String>> properties = new HashMap<String, Map<String, String>>();\n          Map<String, String> supportsProperties = new HashMap<String, String>();\n          for (Supports supportsProperty : Supports.values()) {\n            supportsProperties.put(supportsProperty.getPropertyName(), supportsProperty.getDefaultValue());\n          }\n          properties.put(Supports.KEYWORD, supportsProperties);\n          configTypes.put(configDependency, properties);\n        }\n      }\n      serviceInfo.setConfigTypes(configTypes);\n    }\n  }","id":105244,"modified_method":"/**\n   * Populate ServiceInfo#configTypes with default entries based on ServiceInfo#configDependencies property\n   */\n  void populateConfigTypesFromDependencies(ServiceInfo serviceInfo) {\n    List<PropertyInfo> configurations = serviceInfo.getProperties();\n    if (configurations != null) {\n      Map<String, Map<String, Map<String, String>>> configTypes = new HashMap<String, Map<String, Map<String, String>>>();\n      for (PropertyInfo configuration : configurations) {\n        int extIndex = configuration.getFilename().indexOf(AmbariMetaInfo.SERVICE_CONFIG_FILE_NAME_POSTFIX);\n        String configType = configuration.getFilename().substring(0, extIndex);\n        \n        if (!configTypes.containsKey(configType)) {\n          Map<String, Map<String, String>> properties = new HashMap<String, Map<String, String>>();\n          Map<String, String> supportsProperties = new HashMap<String, String>();\n          for (Supports supportsProperty : Supports.values()) {\n            supportsProperties.put(supportsProperty.getPropertyName(), supportsProperty.getDefaultValue());\n          }\n          properties.put(Supports.KEYWORD, supportsProperties);\n          configTypes.put(configType, properties);\n        }\n      }\n      serviceInfo.setConfigTypes(configTypes);\n    }\n  }","commit_id":"f2d91b20fd61777b594311cbcf20343ee14b074e","url":"https://github.com/apache/ambari"},{"original_method":"public List<ServiceInfo> getAllApplicableServices(StackInfo stackInfo) {\n    LinkedList<StackInfo> parents = (LinkedList<StackInfo>)\n      stackParentsMap.get(stackInfo.getVersion());\n\n    if (parents == null || parents.isEmpty()) {\n      return stackInfo.getServices();\n    }\n    // Add child to the end of extension list\n    parents.addFirst(stackInfo);\n    ListIterator<StackInfo> lt = parents.listIterator(parents.size());\n    // Map services with unique names\n    Map<String, ServiceInfo> serviceInfoMap = new HashMap<String,\n      ServiceInfo>();\n    // Iterate with oldest parent first - all stacks are populated\n    while(lt.hasPrevious()) {\n      StackInfo parentStack = lt.previous();\n      List<ServiceInfo> serviceInfoList = parentStack.getServices();\n      for (ServiceInfo service : serviceInfoList) {\n        ServiceInfo existingService = serviceInfoMap.get(service.getName());\n        if (service.isDeleted()) {\n          serviceInfoMap.remove(service.getName());\n          continue;\n        }\n\n        if (existingService == null) {\n          serviceInfoMap.put(service.getName(), service);\n        } else {\n          // Redefined service - merge with parent\n          ServiceInfo newServiceInfo = mergeServices(existingService, service);\n          serviceInfoMap.put(service.getName(), newServiceInfo);\n        }\n        \n        // add action for service check\n        ServiceInfo serviceInfo = serviceInfoMap.get(service.getName());\n        if(serviceInfo.getCommandScript() != null) {\n          actionMetadata.addServiceCheckAction(serviceInfo.getName());\n        }\n        \n      }\n    }\n    return new ArrayList<ServiceInfo>(serviceInfoMap.values());\n  }","id":105245,"modified_method":"public List<ServiceInfo> getAllApplicableServices(StackInfo stackInfo) {\n    LinkedList<StackInfo> parents = (LinkedList<StackInfo>)\n      stackParentsMap.get(stackInfo.getVersion());\n\n    if (parents == null || parents.isEmpty()) {\n      return stackInfo.getServices();\n    }\n    // Add child to the end of extension list\n    parents.addFirst(stackInfo);\n    ListIterator<StackInfo> lt = parents.listIterator(parents.size());\n    // Map services with unique names\n    Map<String, ServiceInfo> serviceInfoMap = new HashMap<String,\n      ServiceInfo>();\n    // Iterate with oldest parent first - all stacks are populated\n    while(lt.hasPrevious()) {\n      StackInfo parentStack = lt.previous();\n      List<ServiceInfo> serviceInfoList = parentStack.getServices();\n      for (ServiceInfo service : serviceInfoList) {\n        ServiceInfo existingService = serviceInfoMap.get(service.getName());\n        if (service.isDeleted()) {\n          serviceInfoMap.remove(service.getName());\n          continue;\n        }\n\n        if (existingService == null) {\n          serviceInfoMap.put(service.getName(), service);\n        } else {\n          // Redefined service - merge with parent\n          ServiceInfo newServiceInfo = mergeServices(existingService, service);\n          serviceInfoMap.put(service.getName(), newServiceInfo);\n        }\n        \n        // remove 'excluded-config-types' from configTypes\n        ServiceInfo serviceInfo = serviceInfoMap.get(service.getName());\n        if(serviceInfo.getExcludedConfigTypes() != null) { \n          Iterator<Map.Entry<String,Map<String,Map<String,String>>>> configTypesItetator = serviceInfo.getConfigTypes().entrySet().iterator();\n          \n          while(configTypesItetator.hasNext()) {\n            Map.Entry<String,Map<String,Map<String,String>>> configTypeMap = configTypesItetator.next();\n            \n            if(serviceInfo.getExcludedConfigTypes().contains(configTypeMap.getKey())) {\n              configTypesItetator.remove();\n            }\n          }\n        }\n        \n        // add action for service check\n        if(serviceInfo.getCommandScript() != null) {\n          actionMetadata.addServiceCheckAction(serviceInfo.getName());\n        }\n        \n      }\n    }\n    return new ArrayList<ServiceInfo>(serviceInfoMap.values());\n  }","commit_id":"f2d91b20fd61777b594311cbcf20343ee14b074e","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Add properties and config type's properties from configuration file\n   */\n  void populateServiceProperties(File configFile, ServiceInfo serviceInfo) throws JAXBException {\n    ConfigurationXml configuration = unmarshal(ConfigurationXml.class, configFile);\n    String fileName = configFile.getName();\n    serviceInfo.getProperties().addAll(getProperties(configuration, fileName));\n    int extIndex = fileName.indexOf(AmbariMetaInfo.SERVICE_CONFIG_FILE_NAME_POSTFIX);\n    String configType = fileName.substring(0, extIndex);\n    for (Map.Entry<QName, String> attribute : configuration.getAttributes().entrySet()) {\n      for (Supports supportsProperty : Supports.values()) {\n        String attributeName = attribute.getKey().getLocalPart();\n        String attributeValue = attribute.getValue();\n        if (attributeName.equals(supportsProperty.getXmlAttributeName())) {\n          addConfigTypeProperty(serviceInfo, configType, Supports.KEYWORD,\n              supportsProperty.getPropertyName(), Boolean.valueOf(attributeValue).toString());\n        }\n      }\n    }\n  }","id":105246,"modified_method":"/**\n   * Add properties and config type's properties from configuration file\n   */\n  void populateServiceProperties(File configFile, ServiceInfo serviceInfo) throws JAXBException {\n    ConfigurationXml configuration = unmarshal(ConfigurationXml.class, configFile);\n    String fileName = configFile.getName();\n    serviceInfo.getProperties().addAll(getProperties(configuration, fileName));\n    int extIndex = fileName.indexOf(AmbariMetaInfo.SERVICE_CONFIG_FILE_NAME_POSTFIX);\n    String configType = fileName.substring(0, extIndex);\n   \n    addConfigType(serviceInfo, configType);\n    setConfigTypeAttributes(serviceInfo, configuration, configType);\n  }","commit_id":"f2d91b20fd61777b594311cbcf20343ee14b074e","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateServiceProperties_supportsFinalWrongType() throws Exception {\n    // init\n    File stackRoot = new File(stackRootStr);\n    StackExtensionHelper helper = createMockBuilder(StackExtensionHelper.class).addMockedMethod(\"addConfigTypeProperty\")\n        .withConstructor(injector, stackRoot).createMock();\n    File config = new File(\"./src/test/resources/bad-stacks/HDP/0.1/services/YARN/configuration/yarn-site.xml\"\n        .replaceAll(\"/\", File.separator));\n    ServiceInfo serviceInfo = createNiceMock(ServiceInfo.class);\n    List<PropertyInfo> properties = createNiceMock(List.class);\n\n    // expectations\n    expect(serviceInfo.getProperties()).andReturn(properties).times(1);\n    expect(properties.addAll((Collection) anyObject())).andReturn(true).times(1);\n    helper.addConfigTypeProperty(serviceInfo, \"yarn-site\", StackExtensionHelper.Supports.KEYWORD,\n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    replay(properties);\n    replay(serviceInfo);\n    replay(helper);\n\n    // eval\n    helper.populateServiceProperties(config, serviceInfo);\n\n    // verification\n    verify(properties, serviceInfo, helper);\n  }","id":105247,"modified_method":"@Test\n  public void testPopulateServiceProperties_supportsFinalWrongType() throws Exception {\n    // init\n    File stackRoot = new File(stackRootStr);\n    StackExtensionHelper helper = createMockBuilder(StackExtensionHelper.class).addMockedMethod(\"addConfigTypeProperty\")\n        .withConstructor(injector, stackRoot).createMock();\n    File config = new File(\"./src/test/resources/bad-stacks/HDP/0.1/services/YARN/configuration/yarn-site.xml\"\n        .replaceAll(\"/\", File.separator));\n    ServiceInfo serviceInfo = createNiceMock(ServiceInfo.class);\n    List<PropertyInfo> properties = createNiceMock(List.class);\n\n    // expectations\n    expect(serviceInfo.getConfigTypes()).andReturn(new HashMap<String, Map<String, Map<String, String>>>()).times(2);\n    expect(serviceInfo.getProperties()).andReturn(properties).times(1);\n    expect(properties.addAll((Collection) anyObject())).andReturn(true).times(1);\n    helper.addConfigTypeProperty(serviceInfo, \"yarn-site\", StackExtensionHelper.Supports.KEYWORD,\n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    replay(properties);\n    replay(serviceInfo);\n    replay(helper);\n\n    // eval\n    helper.populateServiceProperties(config, serviceInfo);\n\n    // verification\n    verify(properties, serviceInfo, helper);\n  }","commit_id":"f2d91b20fd61777b594311cbcf20343ee14b074e","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testConfigDependenciesInheritance() throws Exception{\n    File stackRoot = new File(stackRootStr);\n    StackInfo stackInfo = new StackInfo();\n    stackInfo.setName(\"HDP\");\n    stackInfo.setVersion(\"2.0.6\");\n    StackExtensionHelper helper = new StackExtensionHelper(injector, stackRoot);\n    helper.populateServicesForStack(stackInfo);\n    helper.fillInfo();\n    List<ServiceInfo> allServices = helper.getAllApplicableServices(stackInfo);\n    for (ServiceInfo serviceInfo : allServices) {\n      if (serviceInfo.getName().equals(\"HDFS\")) {\n        assertEquals(5, serviceInfo.getConfigDependencies().size());\n        assertEquals(5, serviceInfo.getConfigTypes().size());\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"core-site\"));\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"global\"));\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"hdfs-site\"));\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"hdfs-log4j\"));\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"hadoop-policy\"));\n        assertTrue(Boolean.valueOf(serviceInfo.getConfigTypes().get(\"core-site\").get(\"supports\").get(\"final\")));\n        assertFalse(Boolean.valueOf(serviceInfo.getConfigTypes().get(\"global\").get(\"supports\").get(\"final\")));\n      } else if (serviceInfo.getName().equals(\"WEBHCAT\")) {\n        assertEquals(1, serviceInfo.getConfigDependencies().size());\n        assertEquals(1, serviceInfo.getConfigTypes().size());\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"webhcat-site\"));\n        assertTrue(Boolean.valueOf(serviceInfo.getConfigTypes().get(\"webhcat-site\").get(\"supports\").get(\"final\")));\n      }\n    }\n  }","id":105248,"modified_method":"@Test\n  public void testConfigDependenciesInheritance() throws Exception{\n    File stackRoot = new File(stackRootStr);\n    StackInfo stackInfo = new StackInfo();\n    stackInfo.setName(\"HDP\");\n    stackInfo.setVersion(\"2.0.6\");\n    StackExtensionHelper helper = new StackExtensionHelper(injector, stackRoot);\n    helper.populateServicesForStack(stackInfo);\n    helper.fillInfo();\n    List<ServiceInfo> allServices = helper.getAllApplicableServices(stackInfo);\n    for (ServiceInfo serviceInfo : allServices) {\n      if (serviceInfo.getName().equals(\"HDFS\")) {\n        assertEquals(5, serviceInfo.getConfigDependencies().size());\n        assertEquals(4, serviceInfo.getConfigTypes().size());\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"core-site\"));\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"global\"));\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"hdfs-site\"));\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"hdfs-log4j\"));\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"hadoop-policy\"));\n        assertTrue(Boolean.valueOf(serviceInfo.getConfigTypes().get(\"core-site\").get(\"supports\").get(\"final\")));\n        assertFalse(Boolean.valueOf(serviceInfo.getConfigTypes().get(\"global\").get(\"supports\").get(\"final\")));\n      } else if (serviceInfo.getName().equals(\"WEBHCAT\")) {\n        assertEquals(1, serviceInfo.getConfigDependencies().size());\n        assertEquals(1, serviceInfo.getConfigTypes().size());\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"webhcat-site\"));\n        assertTrue(Boolean.valueOf(serviceInfo.getConfigTypes().get(\"webhcat-site\").get(\"supports\").get(\"final\")));\n      }\n    }\n  }","commit_id":"f2d91b20fd61777b594311cbcf20343ee14b074e","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateConfigTypes() {\n    File stackRoot = new File(stackRootStr);\n    StackExtensionHelper helper = new StackExtensionHelper(injector, stackRoot);\n    List<String> configDependencies = Arrays.asList(\"dep1\", \"dep2\");\n    ServiceInfo serviceInfo = new ServiceInfo();\n    serviceInfo.setConfigDependencies(configDependencies);\n    helper.populateConfigTypesFromDependencies(serviceInfo);\n\n    Map<String, Map<String, Map<String, String>>> configTypes = serviceInfo.getConfigTypes();\n    assertEquals(2, configTypes.size());\n    assertTrue(configTypes.containsKey(\"dep1\"));\n    assertTrue(configTypes.containsKey(\"dep2\"));\n    Map<String, Map<String, String>> properties;\n    properties= configTypes.get(\"dep1\");\n    assertEquals(1, properties.size());\n    assertTrue(properties.containsKey(\"supports\"));\n    assertEquals(1, properties.get(\"supports\").size());\n    assertTrue(properties.get(\"supports\").containsKey(\"final\"));\n    assertEquals(\"false\", properties.get(\"supports\").get(\"final\"));\n    properties= configTypes.get(\"dep2\");\n    assertEquals(1, properties.size());\n    assertTrue(properties.containsKey(\"supports\"));\n    assertEquals(1, properties.get(\"supports\").size());\n    assertTrue(properties.get(\"supports\").containsKey(\"final\"));\n    assertEquals(\"false\", properties.get(\"supports\").get(\"final\"));\n  }","id":105249,"modified_method":"@Test\n  public void testPopulateConfigTypes() throws XPathExpressionException, ParserConfigurationException, SAXException, IOException, JAXBException {\n    StackExtensionHelper helper = getStackExtensionHelper();\n    ServiceInfo serviceInfo = getServiceFromStack(helper, \"HDP\", \"2.0.7\", \"HDFS\");\n    String expectedConfigTypes = \n        \"{global={supports={final=true}}, hdfs-site={supports={final=false}}, hadoop-policy={supports={final=false}}, core-site={supports={final=false}}}\";\n\n    Map<String, Map<String, Map<String, String>>> configTypes = serviceInfo.getConfigTypes();\n    assertEquals(4, configTypes.size());\n    assertEquals(expectedConfigTypes, configTypes.toString());\n  }","commit_id":"f2d91b20fd61777b594311cbcf20343ee14b074e","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateServiceProperties_noSupportsFinalFlag() throws Exception {\n    // init\n    File stackRoot = new File(stackRootStr);\n    StackExtensionHelper helper = createMockBuilder(StackExtensionHelper.class).addMockedMethod(\"addConfigTypeProperty\")\n        .withConstructor(injector, stackRoot).createMock();\n    File config = new File(stackRootStr\n        + \"HDP/2.0.7/services/YARN/configuration/yarn-site.xml\".replaceAll(\"/\", File.separator));\n    ServiceInfo serviceInfo = createNiceMock(ServiceInfo.class);\n    List<PropertyInfo> properties = createNiceMock(List.class);\n\n    // expectations\n    expect(serviceInfo.getProperties()).andReturn(properties).times(1);\n    expect(properties.addAll((Collection) anyObject())).andReturn(true).times(1);\n    replay(properties);\n    replay(serviceInfo);\n    replay(helper);\n\n    // eval\n    helper.populateServiceProperties(config, serviceInfo);\n\n    // verification\n    verify(properties, serviceInfo, helper);\n  }","id":105250,"modified_method":"@Test\n  public void testPopulateServiceProperties_noSupportsFinalFlag() throws Exception {\n    StackExtensionHelper helper = getStackExtensionHelper();\n    ServiceInfo serviceInfo = getServiceFromStack(helper, \"HDP\", \"2.0.7\", \"YARN\");\n    \n    File configFile = new File(stackRootStr\n        + \"HDP/2.0.7/services/YARN/configuration/yarn-site.xml\".replaceAll(\"/\", File.separator));\n    \n    helper.populateServiceProperties(configFile, serviceInfo);\n    \n    assertEquals(\"{yarn-site={supports={final=false}}}\", serviceInfo.getConfigTypes().toString());\n  }","commit_id":"f2d91b20fd61777b594311cbcf20343ee14b074e","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateServiceProperties_configTypesIsNull() throws Exception {\n    // init\n    File stackRoot = new File(stackRootStr);\n    StackExtensionHelper helper = new StackExtensionHelper(injector, stackRoot);\n    File config = new File(stackRootStr\n        + \"HDP/2.1.1/services/PIG/configuration/pig-properties.xml\".replaceAll(\"/\", File.separator));\n    ServiceInfo serviceInfo = createMock(ServiceInfo.class);\n    List<PropertyInfo> properties = createNiceMock(List.class);\n\n    // expectations\n    expect(serviceInfo.getProperties()).andReturn(properties).times(1);\n    expect(properties.addAll((Collection) anyObject())).andReturn(true).times(1);\n    expect(serviceInfo.getConfigTypes()).andReturn(null).times(1);\n    replay(properties);\n    replay(serviceInfo);\n\n    // eval\n    helper.populateServiceProperties(config, serviceInfo);\n\n    // verification\n    verify(properties, serviceInfo);\n  }","id":105251,"modified_method":"@Test\n  public void testPopulateServiceProperties_configTypesIsNull() throws Exception {\n    // init\n    File stackRoot = new File(stackRootStr);\n    StackExtensionHelper helper = new StackExtensionHelper(injector, stackRoot);\n    File config = new File(stackRootStr\n        + \"HDP/2.1.1/services/PIG/configuration/pig-properties.xml\".replaceAll(\"/\", File.separator));\n    ServiceInfo serviceInfo = createMock(ServiceInfo.class);\n    List<PropertyInfo> properties = createNiceMock(List.class);\n\n    // expectations\n    expect(serviceInfo.getConfigTypes()).andReturn(new HashMap<String, Map<String, Map<String, String>>>()).times(2);\n    expect(serviceInfo.getProperties()).andReturn(properties).times(1);\n    expect(properties.addAll((Collection) anyObject())).andReturn(true).times(1);\n    expect(serviceInfo.getConfigTypes()).andReturn(null).times(1);\n    replay(properties);\n    replay(serviceInfo);\n\n    // eval\n    helper.populateServiceProperties(config, serviceInfo);\n\n    // verification\n    verify(properties, serviceInfo);\n  }","commit_id":"f2d91b20fd61777b594311cbcf20343ee14b074e","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateServiceProperties_supportsFinalTrue() throws Exception {\n    // init\n    File stackRoot = new File(stackRootStr);\n    StackExtensionHelper helper = createMockBuilder(StackExtensionHelper.class).addMockedMethod(\"addConfigTypeProperty\")\n        .withConstructor(injector, stackRoot).createMock();\n    File config = new File(stackRootStr\n        + \"HDP/2.0.7/services/HDFS/configuration/global.xml\".replaceAll(\"/\", File.separator));\n    ServiceInfo serviceInfo = createNiceMock(ServiceInfo.class);\n    List<PropertyInfo> properties = createNiceMock(List.class);\n\n    // expectations\n    expect(serviceInfo.getProperties()).andReturn(properties).times(1);\n    expect(properties.addAll((Collection) anyObject())).andReturn(true).times(1);\n    helper.addConfigTypeProperty(serviceInfo, \"global\", StackExtensionHelper.Supports.KEYWORD,\n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"true\");\n    replay(properties);\n    replay(serviceInfo);\n    replay(helper);\n\n    // eval\n    helper.populateServiceProperties(config, serviceInfo);\n\n    // verification\n    verify(properties, serviceInfo, helper);\n  }","id":105252,"modified_method":"@Test\n  public void testPopulateServiceProperties_supportsFinalTrue() throws Exception {\n    StackExtensionHelper helper = getStackExtensionHelper();\n    ServiceInfo serviceInfo = getServiceFromStack(helper, \"HDP\", \"2.0.7\", \"HDFS\");\n    \n    File configFile = new File(stackRootStr\n        + \"HDP/2.0.7/services/HDFS/configuration/global.xml\".replaceAll(\"/\", File.separator));\n    helper.populateServiceProperties(configFile, serviceInfo);\n    \n    assertEquals(\"{global={supports={final=true}}, hdfs-site={supports={final=false}}, hadoop-policy={supports={final=false}}, core-site={supports={final=false}}}\", serviceInfo.getConfigTypes().toString());\n  }","commit_id":"f2d91b20fd61777b594311cbcf20343ee14b074e","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateServiceProperties_supportsFinalFalse() throws Exception {\n    // init\n    File stackRoot = new File(stackRootStr);\n    StackExtensionHelper helper = createMockBuilder(StackExtensionHelper.class).addMockedMethod(\"addConfigTypeProperty\")\n        .withConstructor(injector, stackRoot).createMock();\n    File config = new File(stackRootStr\n        + \"HDP/2.0.7/services/HDFS/configuration/core-site.xml\".replaceAll(\"/\", File.separator));\n    ServiceInfo serviceInfo = createNiceMock(ServiceInfo.class);\n    List<PropertyInfo> properties = createNiceMock(List.class);\n\n    // expectations\n    expect(serviceInfo.getProperties()).andReturn(properties).times(1);\n    expect(properties.addAll((Collection) anyObject())).andReturn(true).times(1);\n    helper.addConfigTypeProperty(serviceInfo, \"core-site\", StackExtensionHelper.Supports.KEYWORD,\n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    replay(properties);\n    replay(serviceInfo);\n    replay(helper);\n\n    // eval\n    helper.populateServiceProperties(config, serviceInfo);\n\n    // verification\n    verify(properties, serviceInfo, helper);\n  }","id":105253,"modified_method":"@Test\n  public void testPopulateServiceProperties_supportsFinalFalse() throws Exception {\n    StackExtensionHelper helper = getStackExtensionHelper();\n    ServiceInfo serviceInfo = getServiceFromStack(helper, \"HDP\", \"2.0.7\", \"HDFS\");\n    File configFile = new File(stackRootStr\n        + \"HDP/2.0.7/services/YARN/configuration/yarn-site.xml\".replaceAll(\"/\", File.separator));\n    helper.populateServiceProperties(configFile, serviceInfo);\n    \n    assertEquals(\"{global={supports={final=true}}, hdfs-site={supports={final=false}}, yarn-site={supports={final=false}}, hadoop-policy={supports={final=false}}, core-site={supports={final=false}}}\", serviceInfo.getConfigTypes().toString());\n  }","commit_id":"f2d91b20fd61777b594311cbcf20343ee14b074e","url":"https://github.com/apache/ambari"},{"original_method":"public List<ServiceInfo> getAllApplicableServices(StackInfo stackInfo) {\n    LinkedList<StackInfo> parents = (LinkedList<StackInfo>)\n      stackParentsMap.get(stackInfo.getVersion());\n\n    if (parents == null || parents.isEmpty()) {\n      return stackInfo.getServices();\n    }\n    // Add child to the end of extension list\n    parents.addFirst(stackInfo);\n    ListIterator<StackInfo> lt = parents.listIterator(parents.size());\n    // Map services with unique names\n    Map<String, ServiceInfo> serviceInfoMap = new HashMap<String,\n      ServiceInfo>();\n    // Iterate with oldest parent first - all stacks are populated\n    while(lt.hasPrevious()) {\n      StackInfo parentStack = lt.previous();\n      List<ServiceInfo> serviceInfoList = parentStack.getServices();\n      for (ServiceInfo service : serviceInfoList) {\n        ServiceInfo existingService = serviceInfoMap.get(service.getName());\n        if (service.isDeleted()) {\n          serviceInfoMap.remove(service.getName());\n          continue;\n        }\n\n        if (existingService == null) {\n          serviceInfoMap.put(service.getName(), service);\n        } else {\n          // Redefined service - merge with parent\n          ServiceInfo newServiceInfo = mergeServices(existingService, service);\n          serviceInfoMap.put(service.getName(), newServiceInfo);\n        }\n        \n        // add action for service check\n        ServiceInfo serviceInfo = serviceInfoMap.get(service.getName());\n        if(serviceInfo.getCommandScript() != null) {\n          actionMetadata.addServiceCheckAction(serviceInfo.getName());\n        }\n        \n      }\n    }\n    return new ArrayList<ServiceInfo>(serviceInfoMap.values());\n  }","id":105254,"modified_method":"public List<ServiceInfo> getAllApplicableServices(StackInfo stackInfo) {\n    LinkedList<StackInfo> parents = (LinkedList<StackInfo>)\n      stackParentsMap.get(stackInfo.getVersion());\n\n    if (parents == null || parents.isEmpty()) {\n      return stackInfo.getServices();\n    }\n    // Add child to the end of extension list\n    parents.addFirst(stackInfo);\n    ListIterator<StackInfo> lt = parents.listIterator(parents.size());\n    // Map services with unique names\n    Map<String, ServiceInfo> serviceInfoMap = new HashMap<String,\n      ServiceInfo>();\n    // Iterate with oldest parent first - all stacks are populated\n    while(lt.hasPrevious()) {\n      StackInfo parentStack = lt.previous();\n      List<ServiceInfo> serviceInfoList = parentStack.getServices();\n      for (ServiceInfo service : serviceInfoList) {\n        ServiceInfo existingService = serviceInfoMap.get(service.getName());\n        if (service.isDeleted()) {\n          serviceInfoMap.remove(service.getName());\n          continue;\n        }\n\n        if (existingService == null) {\n          serviceInfoMap.put(service.getName(), service);\n        } else {\n          // Redefined service - merge with parent\n          ServiceInfo newServiceInfo = mergeServices(existingService, service);\n          serviceInfoMap.put(service.getName(), newServiceInfo);\n        }\n        \n        // remove 'excluded-config-types' from configTypes\n        ServiceInfo serviceInfo = serviceInfoMap.get(service.getName());\n        if(serviceInfo.getExcludedConfigTypes() != null) { \n          Iterator<Map.Entry<String,Map<String,Map<String,String>>>> configTypesItetator = serviceInfo.getConfigTypes().entrySet().iterator();\n          \n          while(configTypesItetator.hasNext()) {\n            Map.Entry<String,Map<String,Map<String,String>>> configTypeMap = configTypesItetator.next();\n            \n            if(serviceInfo.getExcludedConfigTypes().contains(configTypeMap.getKey())) {\n              configTypesItetator.remove();\n            }\n          }\n        }\n        \n        // add action for service check\n        if(serviceInfo.getCommandScript() != null) {\n          actionMetadata.addServiceCheckAction(serviceInfo.getName());\n        }\n        \n      }\n    }\n    return new ArrayList<ServiceInfo>(serviceInfoMap.values());\n  }","commit_id":"a6febc087c530e822de3ab8f4ccd7f2aad79e1d4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Add properties and config type's properties from configuration file\n   */\n  void populateServiceProperties(File configFile, ServiceInfo serviceInfo) throws JAXBException {\n    ConfigurationXml configuration = unmarshal(ConfigurationXml.class, configFile);\n    String fileName = configFile.getName();\n    serviceInfo.getProperties().addAll(getProperties(configuration, fileName));\n    int extIndex = fileName.indexOf(AmbariMetaInfo.SERVICE_CONFIG_FILE_NAME_POSTFIX);\n    String configType = fileName.substring(0, extIndex);\n    for (Map.Entry<QName, String> attribute : configuration.getAttributes().entrySet()) {\n      for (Supports supportsProperty : Supports.values()) {\n        String attributeName = attribute.getKey().getLocalPart();\n        String attributeValue = attribute.getValue();\n        if (attributeName.equals(supportsProperty.getXmlAttributeName())) {\n          addConfigTypeProperty(serviceInfo, configType, Supports.KEYWORD,\n              supportsProperty.getPropertyName(), Boolean.valueOf(attributeValue).toString());\n        }\n      }\n    }\n  }","id":105255,"modified_method":"/**\n   * Add properties and config type's properties from configuration file\n   */\n  void populateServiceProperties(File configFile, ServiceInfo serviceInfo) throws JAXBException {\n    ConfigurationXml configuration = unmarshal(ConfigurationXml.class, configFile);\n    String fileName = configFile.getName();\n    serviceInfo.getProperties().addAll(getProperties(configuration, fileName));\n    int extIndex = fileName.indexOf(AmbariMetaInfo.SERVICE_CONFIG_FILE_NAME_POSTFIX);\n    String configType = fileName.substring(0, extIndex);\n   \n    addConfigType(serviceInfo, configType);\n    setConfigTypeAttributes(serviceInfo, configuration, configType);\n  }","commit_id":"a6febc087c530e822de3ab8f4ccd7f2aad79e1d4","url":"https://github.com/apache/ambari"},{"original_method":"void populateServicesForStack(StackInfo stackInfo) throws\n          ParserConfigurationException, SAXException,\n          XPathExpressionException, IOException, JAXBException {\n    List<ServiceInfo> services = new ArrayList<ServiceInfo>();\n    File servicesFolder = new File(stackRoot.getAbsolutePath() + File\n      .separator + stackInfo.getName() + File.separator + stackInfo.getVersion()\n      + File.separator + AmbariMetaInfo.SERVICES_FOLDER_NAME);\n    if (!servicesFolder.exists()) {\n      LOG.info(\"No services defined for stack: \" + stackInfo.getName() +\n      \"-\" + stackInfo.getVersion());\n    } else {\n      try {\n        File[] servicesFolders = servicesFolder.listFiles(AmbariMetaInfo\n          .FILENAME_FILTER);\n        if (servicesFolders == null) {\n          String message = String.format(\"No service folders found at %s\",\n                  servicesFolder.getAbsolutePath());\n          throw new AmbariException(message);\n        }\n        // Iterate over service folders\n        for (File serviceFolder : servicesFolders) {\n          if (!serviceFolder.isDirectory())\n            continue;\n          // Get metainfo schema format version\n          File metainfoFile = new File(serviceFolder.getAbsolutePath()\n                  + File.separator + AmbariMetaInfo.SERVICE_METAINFO_FILE_NAME);\n          // get metrics file, if it exists\n          File metricsJson = new File(serviceFolder.getAbsolutePath()\n            + File.separator + AmbariMetaInfo.SERVICE_METRIC_FILE_NAME);\n          \n          File alertsJson = new File(serviceFolder.getAbsolutePath() +\n              File.separator + AmbariMetaInfo.SERVICE_ALERT_FILE_NAME);\n\n          //Reading v2 service metainfo (may contain multiple services)\n          // Get services from metadata\n          ServiceMetainfoXml smiv2x =\n                  unmarshal(ServiceMetainfoXml.class, metainfoFile);\n          List<ServiceInfo> serviceInfos = smiv2x.getServices();\n          for (ServiceInfo serviceInfo : serviceInfos) {\n            serviceInfo.setSchemaVersion(AmbariMetaInfo.SCHEMA_VERSION_2);\n            populateConfigTypesFromDependencies(serviceInfo);\n\n            // Find service package folder\n            String servicePackageDir = resolveServicePackageFolder(\n                    stackRoot.getAbsolutePath(), stackInfo,\n                    serviceFolder.getName(), serviceInfo.getName());\n            serviceInfo.setServicePackageFolder(servicePackageDir);\n\n            // process metrics.json\n            if (metricsJson.exists())\n              serviceInfo.setMetricsFile(metricsJson);\n            if (alertsJson.exists())\n              serviceInfo.setAlertsFile(alertsJson);\n\n            // Get all properties from all \"configs/*-site.xml\" files\n            setPropertiesFromConfigs(serviceFolder, serviceInfo);\n\n            // Add now to be removed while iterating extension graph\n            services.add(serviceInfo);\n          }\n        }\n      } catch (Exception e) {\n        LOG.error(\"Error while parsing metainfo.xml for a service\", e);\n      }\n    }\n\n    stackInfo.getServices().addAll(services);\n  }","id":105256,"modified_method":"void populateServicesForStack(StackInfo stackInfo) throws\n          ParserConfigurationException, SAXException,\n          XPathExpressionException, IOException, JAXBException {\n    List<ServiceInfo> services = new ArrayList<ServiceInfo>();\n    File servicesFolder = new File(stackRoot.getAbsolutePath() + File\n      .separator + stackInfo.getName() + File.separator + stackInfo.getVersion()\n      + File.separator + AmbariMetaInfo.SERVICES_FOLDER_NAME);\n    if (!servicesFolder.exists()) {\n      LOG.info(\"No services defined for stack: \" + stackInfo.getName() +\n      \"-\" + stackInfo.getVersion());\n    } else {\n      try {\n        File[] servicesFolders = servicesFolder.listFiles(AmbariMetaInfo\n          .FILENAME_FILTER);\n        if (servicesFolders == null) {\n          String message = String.format(\"No service folders found at %s\",\n                  servicesFolder.getAbsolutePath());\n          throw new AmbariException(message);\n        }\n        // Iterate over service folders\n        for (File serviceFolder : servicesFolders) {\n          if (!serviceFolder.isDirectory())\n            continue;\n          // Get metainfo schema format version\n          File metainfoFile = new File(serviceFolder.getAbsolutePath()\n                  + File.separator + AmbariMetaInfo.SERVICE_METAINFO_FILE_NAME);\n          // get metrics file, if it exists\n          File metricsJson = new File(serviceFolder.getAbsolutePath()\n            + File.separator + AmbariMetaInfo.SERVICE_METRIC_FILE_NAME);\n          \n          File alertsJson = new File(serviceFolder.getAbsolutePath() +\n              File.separator + AmbariMetaInfo.SERVICE_ALERT_FILE_NAME);\n\n          //Reading v2 service metainfo (may contain multiple services)\n          // Get services from metadata\n          ServiceMetainfoXml smiv2x =\n                  unmarshal(ServiceMetainfoXml.class, metainfoFile);\n          List<ServiceInfo> serviceInfos = smiv2x.getServices();\n          for (ServiceInfo serviceInfo : serviceInfos) {\n            serviceInfo.setSchemaVersion(AmbariMetaInfo.SCHEMA_VERSION_2);\n\n            // Find service package folder\n            String servicePackageDir = resolveServicePackageFolder(\n                    stackRoot.getAbsolutePath(), stackInfo,\n                    serviceFolder.getName(), serviceInfo.getName());\n            serviceInfo.setServicePackageFolder(servicePackageDir);\n\n            // process metrics.json\n            if (metricsJson.exists())\n              serviceInfo.setMetricsFile(metricsJson);\n            if (alertsJson.exists())\n              serviceInfo.setAlertsFile(alertsJson);\n\n            // Get all properties from all \"configs/*-site.xml\" files\n            setPropertiesFromConfigs(serviceFolder, serviceInfo);\n\n            // Add now to be removed while iterating extension graph\n            services.add(serviceInfo);\n          }\n        }\n      } catch (Exception e) {\n        LOG.error(\"Error while parsing metainfo.xml for a service\", e);\n      }\n    }\n\n    stackInfo.getServices().addAll(services);\n  }","commit_id":"a6febc087c530e822de3ab8f4ccd7f2aad79e1d4","url":"https://github.com/apache/ambari"},{"original_method":"ServiceInfo mergeServices(ServiceInfo parentService,\n                                    ServiceInfo childService) {\n    ServiceInfo mergedServiceInfo = new ServiceInfo();\n    mergedServiceInfo.setSchemaVersion(childService.getSchemaVersion());\n    mergedServiceInfo.setName(childService.getName());\n    mergedServiceInfo.setComment(childService.getComment());\n    mergedServiceInfo.setVersion(childService.getVersion());\n    mergedServiceInfo.setConfigDependencies(\n        childService.getConfigDependencies() != null ?\n            childService.getConfigDependencies() :\n            parentService.getConfigDependencies() != null ?\n                parentService.getConfigDependencies() :\n                Collections.<String>emptyList());\n    mergedServiceInfo.setConfigTypes(\n        childService.getConfigTypes() != null ?\n            childService.getConfigTypes() :\n            parentService.getConfigTypes() != null ?\n                parentService.getConfigTypes() :\n                Collections.<String, Map<String, Map<String, String>>>emptyMap());\n    mergedServiceInfo.setExcludedConfigTypes(\n      childService.getExcludedConfigTypes() != null ?\n        childService.getExcludedConfigTypes() :\n        parentService.getExcludedConfigTypes() != null ?\n          parentService.getExcludedConfigTypes() :\n          Collections.<String>emptySet()\n    );\n    mergedServiceInfo.setRequiredServices(\n        childService.getRequiredServices() != null ?\n          childService.getRequiredServices() :\n          parentService.getRequiredServices() != null ?\n            parentService.getRequiredServices() :\n            Collections.<String>emptyList()\n      );\n    \n    mergedServiceInfo.setRestartRequiredAfterChange(\n            (childService.isRestartRequiredAfterChange() != null) \n                    ? childService.isRestartRequiredAfterChange()\n                    : parentService.isRestartRequiredAfterChange());\n    mergedServiceInfo.setMonitoringService(\n            (childService.isMonitoringService() != null)\n                    ? childService.isMonitoringService()\n                    : parentService.isMonitoringService());\n\n    Map<String, ServiceOsSpecific> osSpecific = childService.getOsSpecifics();\n    if (! osSpecific.isEmpty()) {\n      mergedServiceInfo.setOsSpecifics(childService.getOsSpecifics());\n    } else {\n      mergedServiceInfo.setOsSpecifics(parentService.getOsSpecifics());\n    }\n\n    CommandScriptDefinition commandScript = childService.getCommandScript();\n    if (commandScript != null) {\n       mergedServiceInfo.setCommandScript(childService.getCommandScript());\n    } else {\n      mergedServiceInfo.setCommandScript(parentService.getCommandScript());\n    }\n    \n    String servicePackageFolder = childService.getServicePackageFolder();\n    if (servicePackageFolder != null) {\n      mergedServiceInfo.setServicePackageFolder(servicePackageFolder);\n    } else {\n      mergedServiceInfo.setServicePackageFolder(\n              parentService.getServicePackageFolder());\n    }\n\n    // Merge custom command definitions for service\n    List<CustomCommandDefinition> mergedCustomCommands =\n            mergeCustomCommandLists(parentService.getCustomCommands(),\n                    childService.getCustomCommands());\n    mergedServiceInfo.setCustomCommands(mergedCustomCommands);\n    \n    // metrics\n    if (null == childService.getMetricsFile() && null != parentService.getMetricsFile())\n      mergedServiceInfo.setMetricsFile(parentService.getMetricsFile());\n    \n    // alerts\n    if (null == childService.getAlertsFile() && null != parentService.getAlertsFile())\n      mergedServiceInfo.setAlertsFile(parentService.getAlertsFile());    \n\n    populateComponents(mergedServiceInfo, parentService, childService);\n\n    // Add child properties not deleted\n    Map<String, Set<String>> deleteMap = new HashMap<String, Set<String>>();\n    Map<String, Set<String>> appendMap = new HashMap<String, Set<String>>();\n    for (PropertyInfo propertyInfo : childService.getProperties()) {\n      if (!propertyInfo.isDeleted()) {\n        mergedServiceInfo.getProperties().add(propertyInfo);\n        if (appendMap.containsKey(propertyInfo.getName())) {\n          appendMap.get(propertyInfo.getName()).add(propertyInfo.getFilename());\n        } else {\n          Set<String> filenames = new HashSet<String>();\n          filenames.add(propertyInfo.getFilename());\n          appendMap.put(propertyInfo.getName(), filenames);\n        }\n      } else {\n        if (deleteMap.containsKey(propertyInfo.getName())) {\n          deleteMap.get(propertyInfo.getName()).add(propertyInfo.getFilename());\n        } else {\n          Set<String> filenames = new HashSet<String>();\n          filenames.add(propertyInfo.getFilename());\n          deleteMap.put(propertyInfo.getName(), filenames);\n        }\n      }\n    }\n    // Add all parent properties\n    for (PropertyInfo parentPropertyInfo : parentService.getProperties()) {\n      if (!deleteMap.containsKey(parentPropertyInfo.getName()) && !(appendMap\n          .containsKey(parentPropertyInfo.getName())\n        && appendMap.get(parentPropertyInfo.getName())\n          .contains(parentPropertyInfo.getFilename()))) {\n        mergedServiceInfo.getProperties().add(parentPropertyInfo);\n      }\n    }\n    // Add all parent config dependencies\n    if (parentService.getConfigDependencies() != null && !parentService\n        .getConfigDependencies().isEmpty()) {\n      for (String configDep : parentService.getConfigDependencies()) {\n        if (!mergedServiceInfo.getConfigDependencies().contains(configDep)) {\n          mergedServiceInfo.getConfigDependencies().add(configDep);\n        }\n      }\n    }\n    return mergedServiceInfo;\n  }","id":105257,"modified_method":"ServiceInfo mergeServices(ServiceInfo parentService,\n                                    ServiceInfo childService) {\n    ServiceInfo mergedServiceInfo = new ServiceInfo();\n    mergedServiceInfo.setSchemaVersion(childService.getSchemaVersion());\n    mergedServiceInfo.setName(childService.getName());\n    mergedServiceInfo.setComment(childService.getComment());\n    mergedServiceInfo.setVersion(childService.getVersion());\n    mergedServiceInfo.setConfigDependencies(\n        childService.getConfigDependencies() != null ?\n            childService.getConfigDependencies() :\n            parentService.getConfigDependencies() != null ?\n                parentService.getConfigDependencies() :\n                Collections.<String>emptyList());\n    mergedServiceInfo.setExcludedConfigTypes(\n      childService.getExcludedConfigTypes() != null ?\n        childService.getExcludedConfigTypes() :\n        parentService.getExcludedConfigTypes() != null ?\n          parentService.getExcludedConfigTypes() :\n          Collections.<String>emptySet()\n    );\n    mergedServiceInfo.setRequiredServices(\n        childService.getRequiredServices() != null ?\n          childService.getRequiredServices() :\n          parentService.getRequiredServices() != null ?\n            parentService.getRequiredServices() :\n            Collections.<String>emptyList()\n      );\n    \n    mergedServiceInfo.setRestartRequiredAfterChange(\n            (childService.isRestartRequiredAfterChange() != null) \n                    ? childService.isRestartRequiredAfterChange()\n                    : parentService.isRestartRequiredAfterChange());\n    mergedServiceInfo.setMonitoringService(\n            (childService.isMonitoringService() != null)\n                    ? childService.isMonitoringService()\n                    : parentService.isMonitoringService());\n\n    Map<String, ServiceOsSpecific> osSpecific = childService.getOsSpecifics();\n    if (! osSpecific.isEmpty()) {\n      mergedServiceInfo.setOsSpecifics(childService.getOsSpecifics());\n    } else {\n      mergedServiceInfo.setOsSpecifics(parentService.getOsSpecifics());\n    }\n    \n    mergedServiceInfo.setConfigTypes(new HashMap<String, Map<String, Map<String, String>>>());\n    if(childService.getConfigTypes() != null) {\n      mergedServiceInfo.getConfigTypes().putAll(childService.getConfigTypes());\n    }\n    if(parentService.getConfigTypes() != null) {\n      mergedServiceInfo.getConfigTypes().putAll(parentService.getConfigTypes());\n    }\n    \n    CommandScriptDefinition commandScript = childService.getCommandScript();\n    if (commandScript != null) {\n       mergedServiceInfo.setCommandScript(childService.getCommandScript());\n    } else {\n      mergedServiceInfo.setCommandScript(parentService.getCommandScript());\n    }\n    \n    String servicePackageFolder = childService.getServicePackageFolder();\n    if (servicePackageFolder != null) {\n      mergedServiceInfo.setServicePackageFolder(servicePackageFolder);\n    } else {\n      mergedServiceInfo.setServicePackageFolder(\n              parentService.getServicePackageFolder());\n    }\n\n    // Merge custom command definitions for service\n    List<CustomCommandDefinition> mergedCustomCommands =\n            mergeCustomCommandLists(parentService.getCustomCommands(),\n                    childService.getCustomCommands());\n    mergedServiceInfo.setCustomCommands(mergedCustomCommands);\n    \n    // metrics\n    if (null == childService.getMetricsFile() && null != parentService.getMetricsFile())\n      mergedServiceInfo.setMetricsFile(parentService.getMetricsFile());\n    \n    // alerts\n    if (null == childService.getAlertsFile() && null != parentService.getAlertsFile())\n      mergedServiceInfo.setAlertsFile(parentService.getAlertsFile());    \n\n    populateComponents(mergedServiceInfo, parentService, childService);\n\n    // Add child properties not deleted\n    Map<String, Set<String>> deleteMap = new HashMap<String, Set<String>>();\n    Map<String, Set<String>> appendMap = new HashMap<String, Set<String>>();\n    for (PropertyInfo propertyInfo : childService.getProperties()) {\n      if (!propertyInfo.isDeleted()) {\n        mergedServiceInfo.getProperties().add(propertyInfo);\n        if (appendMap.containsKey(propertyInfo.getName())) {\n          appendMap.get(propertyInfo.getName()).add(propertyInfo.getFilename());\n        } else {\n          Set<String> filenames = new HashSet<String>();\n          filenames.add(propertyInfo.getFilename());\n          appendMap.put(propertyInfo.getName(), filenames);\n        }\n      } else {\n        if (deleteMap.containsKey(propertyInfo.getName())) {\n          deleteMap.get(propertyInfo.getName()).add(propertyInfo.getFilename());\n        } else {\n          Set<String> filenames = new HashSet<String>();\n          filenames.add(propertyInfo.getFilename());\n          deleteMap.put(propertyInfo.getName(), filenames);\n        }\n      }\n    }\n    // Add all parent properties\n    for (PropertyInfo parentPropertyInfo : parentService.getProperties()) {\n      if (!deleteMap.containsKey(parentPropertyInfo.getName()) && !(appendMap\n          .containsKey(parentPropertyInfo.getName())\n        && appendMap.get(parentPropertyInfo.getName())\n          .contains(parentPropertyInfo.getFilename()))) {\n        mergedServiceInfo.getProperties().add(parentPropertyInfo);\n      }\n    }\n    // Add all parent config dependencies\n    if (parentService.getConfigDependencies() != null && !parentService\n        .getConfigDependencies().isEmpty()) {\n      for (String configDep : parentService.getConfigDependencies()) {\n        if (!mergedServiceInfo.getConfigDependencies().contains(configDep)) {\n          mergedServiceInfo.getConfigDependencies().add(configDep);\n        }\n      }\n    }\n    return mergedServiceInfo;\n  }","commit_id":"a6febc087c530e822de3ab8f4ccd7f2aad79e1d4","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * Populate ServiceInfo#configTypes with default entries based on ServiceInfo#configDependencies property\n   */\n  void populateConfigTypesFromDependencies(ServiceInfo serviceInfo) {\n    List<String> configDependencies = serviceInfo.getConfigDependenciesWithComponents();\n    if (configDependencies != null) {\n      Map<String, Map<String, Map<String, String>>> configTypes = new HashMap<String, Map<String, Map<String, String>>>();\n      for (String configDependency : configDependencies) {\n        if (!configTypes.containsKey(configDependency)) {\n          Map<String, Map<String, String>> properties = new HashMap<String, Map<String, String>>();\n          Map<String, String> supportsProperties = new HashMap<String, String>();\n          for (Supports supportsProperty : Supports.values()) {\n            supportsProperties.put(supportsProperty.getPropertyName(), supportsProperty.getDefaultValue());\n          }\n          properties.put(Supports.KEYWORD, supportsProperties);\n          configTypes.put(configDependency, properties);\n        }\n      }\n      serviceInfo.setConfigTypes(configTypes);\n    }\n  }","id":105258,"modified_method":"/**\n   * Populate ServiceInfo#configTypes with default entries based on ServiceInfo#configDependencies property\n   */\n  void populateConfigTypesFromDependencies(ServiceInfo serviceInfo) {\n    List<PropertyInfo> configurations = serviceInfo.getProperties();\n    if (configurations != null) {\n      Map<String, Map<String, Map<String, String>>> configTypes = new HashMap<String, Map<String, Map<String, String>>>();\n      for (PropertyInfo configuration : configurations) {\n        int extIndex = configuration.getFilename().indexOf(AmbariMetaInfo.SERVICE_CONFIG_FILE_NAME_POSTFIX);\n        String configType = configuration.getFilename().substring(0, extIndex);\n        \n        if (!configTypes.containsKey(configType)) {\n          Map<String, Map<String, String>> properties = new HashMap<String, Map<String, String>>();\n          Map<String, String> supportsProperties = new HashMap<String, String>();\n          for (Supports supportsProperty : Supports.values()) {\n            supportsProperties.put(supportsProperty.getPropertyName(), supportsProperty.getDefaultValue());\n          }\n          properties.put(Supports.KEYWORD, supportsProperties);\n          configTypes.put(configType, properties);\n        }\n      }\n      serviceInfo.setConfigTypes(configTypes);\n    }\n  }","commit_id":"a6febc087c530e822de3ab8f4ccd7f2aad79e1d4","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateConfigTypes() {\n    File stackRoot = new File(stackRootStr);\n    StackExtensionHelper helper = new StackExtensionHelper(injector, stackRoot);\n    List<String> configDependencies = Arrays.asList(\"dep1\", \"dep2\");\n    ServiceInfo serviceInfo = new ServiceInfo();\n    serviceInfo.setConfigDependencies(configDependencies);\n    helper.populateConfigTypesFromDependencies(serviceInfo);\n\n    Map<String, Map<String, Map<String, String>>> configTypes = serviceInfo.getConfigTypes();\n    assertEquals(2, configTypes.size());\n    assertTrue(configTypes.containsKey(\"dep1\"));\n    assertTrue(configTypes.containsKey(\"dep2\"));\n    Map<String, Map<String, String>> properties;\n    properties= configTypes.get(\"dep1\");\n    assertEquals(1, properties.size());\n    assertTrue(properties.containsKey(\"supports\"));\n    assertEquals(1, properties.get(\"supports\").size());\n    assertTrue(properties.get(\"supports\").containsKey(\"final\"));\n    assertEquals(\"false\", properties.get(\"supports\").get(\"final\"));\n    properties= configTypes.get(\"dep2\");\n    assertEquals(1, properties.size());\n    assertTrue(properties.containsKey(\"supports\"));\n    assertEquals(1, properties.get(\"supports\").size());\n    assertTrue(properties.get(\"supports\").containsKey(\"final\"));\n    assertEquals(\"false\", properties.get(\"supports\").get(\"final\"));\n  }","id":105259,"modified_method":"@Test\n  public void testPopulateConfigTypes() throws XPathExpressionException, ParserConfigurationException, SAXException, IOException, JAXBException {\n    StackExtensionHelper helper = getStackExtensionHelper();\n    ServiceInfo serviceInfo = getServiceFromStack(helper, \"HDP\", \"2.0.7\", \"HDFS\");\n    \n    \n    Map<String, Map<String, Map<String, String>>> expectedConfigTypes = new HashMap<String, Map<String, Map<String, String>>>();\n    addToPropertyMap(expectedConfigTypes, \"global\", StackExtensionHelper.Supports.KEYWORD, \n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"true\");\n    addToPropertyMap(expectedConfigTypes, \"hdfs-site\", StackExtensionHelper.Supports.KEYWORD, \n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    addToPropertyMap(expectedConfigTypes, \"hadoop-policy\", StackExtensionHelper.Supports.KEYWORD, \n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    addToPropertyMap(expectedConfigTypes, \"core-site\", StackExtensionHelper.Supports.KEYWORD, \n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    \n    Map<String, Map<String, Map<String, String>>> configTypes = serviceInfo.getConfigTypes();\n    assertEquals(4, configTypes.size());\n    assertEquals(expectedConfigTypes, configTypes);\n  }","commit_id":"a6febc087c530e822de3ab8f4ccd7f2aad79e1d4","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateServiceProperties_configTypesIsNull() throws Exception {\n    // init\n    File stackRoot = new File(stackRootStr);\n    StackExtensionHelper helper = new StackExtensionHelper(injector, stackRoot);\n    File config = new File(stackRootStr\n        + \"HDP/2.1.1/services/PIG/configuration/pig-properties.xml\".replaceAll(\"/\", File.separator));\n    ServiceInfo serviceInfo = createMock(ServiceInfo.class);\n    List<PropertyInfo> properties = createNiceMock(List.class);\n\n    // expectations\n    expect(serviceInfo.getProperties()).andReturn(properties).times(1);\n    expect(properties.addAll((Collection) anyObject())).andReturn(true).times(1);\n    expect(serviceInfo.getConfigTypes()).andReturn(null).times(1);\n    replay(properties);\n    replay(serviceInfo);\n\n    // eval\n    helper.populateServiceProperties(config, serviceInfo);\n\n    // verification\n    verify(properties, serviceInfo);\n  }","id":105260,"modified_method":"@Test\n  public void testPopulateServiceProperties_configTypesIsNull() throws Exception {\n    // init\n    File stackRoot = new File(stackRootStr);\n    StackExtensionHelper helper = new StackExtensionHelper(injector, stackRoot);\n    File config = new File(stackRootStr\n        + \"HDP/2.1.1/services/PIG/configuration/pig-properties.xml\".replaceAll(\"/\", File.separator));\n    ServiceInfo serviceInfo = createMock(ServiceInfo.class);\n    List<PropertyInfo> properties = createNiceMock(List.class);\n\n    // expectations\n    expect(serviceInfo.getConfigTypes()).andReturn(new HashMap<String, Map<String, Map<String, String>>>()).times(2);\n    expect(serviceInfo.getProperties()).andReturn(properties).times(1);\n    expect(properties.addAll((Collection) anyObject())).andReturn(true).times(1);\n    expect(serviceInfo.getConfigTypes()).andReturn(null).times(1);\n    replay(properties);\n    replay(serviceInfo);\n\n    // eval\n    helper.populateServiceProperties(config, serviceInfo);\n\n    // verification\n    verify(properties, serviceInfo);\n  }","commit_id":"a6febc087c530e822de3ab8f4ccd7f2aad79e1d4","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateServiceProperties_supportsFinalTrue() throws Exception {\n    // init\n    File stackRoot = new File(stackRootStr);\n    StackExtensionHelper helper = createMockBuilder(StackExtensionHelper.class).addMockedMethod(\"addConfigTypeProperty\")\n        .withConstructor(injector, stackRoot).createMock();\n    File config = new File(stackRootStr\n        + \"HDP/2.0.7/services/HDFS/configuration/global.xml\".replaceAll(\"/\", File.separator));\n    ServiceInfo serviceInfo = createNiceMock(ServiceInfo.class);\n    List<PropertyInfo> properties = createNiceMock(List.class);\n\n    // expectations\n    expect(serviceInfo.getProperties()).andReturn(properties).times(1);\n    expect(properties.addAll((Collection) anyObject())).andReturn(true).times(1);\n    helper.addConfigTypeProperty(serviceInfo, \"global\", StackExtensionHelper.Supports.KEYWORD,\n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"true\");\n    replay(properties);\n    replay(serviceInfo);\n    replay(helper);\n\n    // eval\n    helper.populateServiceProperties(config, serviceInfo);\n\n    // verification\n    verify(properties, serviceInfo, helper);\n  }","id":105261,"modified_method":"@Test\n  public void testPopulateServiceProperties_supportsFinalTrue() throws Exception {\n    StackExtensionHelper helper = getStackExtensionHelper();\n    ServiceInfo serviceInfo = getServiceFromStack(helper, \"HDP\", \"2.0.7\", \"HDFS\");\n    \n    File configFile = new File(stackRootStr\n        + \"HDP/2.0.7/services/HDFS/configuration/global.xml\".replaceAll(\"/\", File.separator));\n    helper.populateServiceProperties(configFile, serviceInfo);\n    \n    Map<String, Map<String, Map<String, String>>> expectedConfigTypes = new HashMap<String, Map<String, Map<String, String>>>();\n    addToPropertyMap(expectedConfigTypes, \"global\", StackExtensionHelper.Supports.KEYWORD, \n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"true\");\n    addToPropertyMap(expectedConfigTypes, \"hdfs-site\", StackExtensionHelper.Supports.KEYWORD, \n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    addToPropertyMap(expectedConfigTypes, \"hadoop-policy\", StackExtensionHelper.Supports.KEYWORD, \n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    addToPropertyMap(expectedConfigTypes, \"core-site\", StackExtensionHelper.Supports.KEYWORD, \n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    \n    assertEquals(expectedConfigTypes, serviceInfo.getConfigTypes());\n  }","commit_id":"a6febc087c530e822de3ab8f4ccd7f2aad79e1d4","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateServiceProperties_supportsFinalWrongType() throws Exception {\n    // init\n    File stackRoot = new File(stackRootStr);\n    StackExtensionHelper helper = createMockBuilder(StackExtensionHelper.class).addMockedMethod(\"addConfigTypeProperty\")\n        .withConstructor(injector, stackRoot).createMock();\n    File config = new File(\"./src/test/resources/bad-stacks/HDP/0.1/services/YARN/configuration/yarn-site.xml\"\n        .replaceAll(\"/\", File.separator));\n    ServiceInfo serviceInfo = createNiceMock(ServiceInfo.class);\n    List<PropertyInfo> properties = createNiceMock(List.class);\n\n    // expectations\n    expect(serviceInfo.getProperties()).andReturn(properties).times(1);\n    expect(properties.addAll((Collection) anyObject())).andReturn(true).times(1);\n    helper.addConfigTypeProperty(serviceInfo, \"yarn-site\", StackExtensionHelper.Supports.KEYWORD,\n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    replay(properties);\n    replay(serviceInfo);\n    replay(helper);\n\n    // eval\n    helper.populateServiceProperties(config, serviceInfo);\n\n    // verification\n    verify(properties, serviceInfo, helper);\n  }","id":105262,"modified_method":"@Test\n  public void testPopulateServiceProperties_supportsFinalWrongType() throws Exception {\n    // init\n    File stackRoot = new File(stackRootStr);\n    StackExtensionHelper helper = createMockBuilder(StackExtensionHelper.class).addMockedMethod(\"addConfigTypeProperty\")\n        .withConstructor(injector, stackRoot).createMock();\n    File config = new File(\"./src/test/resources/bad-stacks/HDP/0.1/services/YARN/configuration/yarn-site.xml\"\n        .replaceAll(\"/\", File.separator));\n    ServiceInfo serviceInfo = createNiceMock(ServiceInfo.class);\n    List<PropertyInfo> properties = createNiceMock(List.class);\n\n    // expectations\n    expect(serviceInfo.getConfigTypes()).andReturn(new HashMap<String, Map<String, Map<String, String>>>()).times(2);\n    expect(serviceInfo.getProperties()).andReturn(properties).times(1);\n    expect(properties.addAll((Collection) anyObject())).andReturn(true).times(1);\n    helper.addConfigTypeProperty(serviceInfo, \"yarn-site\", StackExtensionHelper.Supports.KEYWORD,\n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    replay(properties);\n    replay(serviceInfo);\n    replay(helper);\n\n    // eval\n    helper.populateServiceProperties(config, serviceInfo);\n\n    // verification\n    verify(properties, serviceInfo, helper);\n  }","commit_id":"a6febc087c530e822de3ab8f4ccd7f2aad79e1d4","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testConfigDependenciesInheritance() throws Exception{\n    File stackRoot = new File(stackRootStr);\n    StackInfo stackInfo = new StackInfo();\n    stackInfo.setName(\"HDP\");\n    stackInfo.setVersion(\"2.0.6\");\n    StackExtensionHelper helper = new StackExtensionHelper(injector, stackRoot);\n    helper.populateServicesForStack(stackInfo);\n    helper.fillInfo();\n    List<ServiceInfo> allServices = helper.getAllApplicableServices(stackInfo);\n    for (ServiceInfo serviceInfo : allServices) {\n      if (serviceInfo.getName().equals(\"HDFS\")) {\n        assertEquals(5, serviceInfo.getConfigDependencies().size());\n        assertEquals(5, serviceInfo.getConfigTypes().size());\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"core-site\"));\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"global\"));\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"hdfs-site\"));\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"hdfs-log4j\"));\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"hadoop-policy\"));\n        assertTrue(Boolean.valueOf(serviceInfo.getConfigTypes().get(\"core-site\").get(\"supports\").get(\"final\")));\n        assertFalse(Boolean.valueOf(serviceInfo.getConfigTypes().get(\"global\").get(\"supports\").get(\"final\")));\n      } else if (serviceInfo.getName().equals(\"WEBHCAT\")) {\n        assertEquals(1, serviceInfo.getConfigDependencies().size());\n        assertEquals(1, serviceInfo.getConfigTypes().size());\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"webhcat-site\"));\n        assertTrue(Boolean.valueOf(serviceInfo.getConfigTypes().get(\"webhcat-site\").get(\"supports\").get(\"final\")));\n      }\n    }\n  }","id":105263,"modified_method":"@Test\n  public void testConfigDependenciesInheritance() throws Exception{\n    File stackRoot = new File(stackRootStr);\n    StackInfo stackInfo = new StackInfo();\n    stackInfo.setName(\"HDP\");\n    stackInfo.setVersion(\"2.0.6\");\n    StackExtensionHelper helper = new StackExtensionHelper(injector, stackRoot);\n    helper.populateServicesForStack(stackInfo);\n    helper.fillInfo();\n    List<ServiceInfo> allServices = helper.getAllApplicableServices(stackInfo);\n    for (ServiceInfo serviceInfo : allServices) {\n      if (serviceInfo.getName().equals(\"HDFS\")) {\n        assertEquals(5, serviceInfo.getConfigDependencies().size());\n        assertEquals(4, serviceInfo.getConfigTypes().size());\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"core-site\"));\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"global\"));\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"hdfs-site\"));\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"hdfs-log4j\"));\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"hadoop-policy\"));\n        assertTrue(Boolean.valueOf(serviceInfo.getConfigTypes().get(\"core-site\").get(\"supports\").get(\"final\")));\n        assertFalse(Boolean.valueOf(serviceInfo.getConfigTypes().get(\"global\").get(\"supports\").get(\"final\")));\n      } else if (serviceInfo.getName().equals(\"WEBHCAT\")) {\n        assertEquals(1, serviceInfo.getConfigDependencies().size());\n        assertEquals(1, serviceInfo.getConfigTypes().size());\n        assertTrue(serviceInfo.getConfigDependencies().contains(\"webhcat-site\"));\n        assertTrue(Boolean.valueOf(serviceInfo.getConfigTypes().get(\"webhcat-site\").get(\"supports\").get(\"final\")));\n      }\n    }\n  }","commit_id":"a6febc087c530e822de3ab8f4ccd7f2aad79e1d4","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateServiceProperties_noSupportsFinalFlag() throws Exception {\n    // init\n    File stackRoot = new File(stackRootStr);\n    StackExtensionHelper helper = createMockBuilder(StackExtensionHelper.class).addMockedMethod(\"addConfigTypeProperty\")\n        .withConstructor(injector, stackRoot).createMock();\n    File config = new File(stackRootStr\n        + \"HDP/2.0.7/services/YARN/configuration/yarn-site.xml\".replaceAll(\"/\", File.separator));\n    ServiceInfo serviceInfo = createNiceMock(ServiceInfo.class);\n    List<PropertyInfo> properties = createNiceMock(List.class);\n\n    // expectations\n    expect(serviceInfo.getProperties()).andReturn(properties).times(1);\n    expect(properties.addAll((Collection) anyObject())).andReturn(true).times(1);\n    replay(properties);\n    replay(serviceInfo);\n    replay(helper);\n\n    // eval\n    helper.populateServiceProperties(config, serviceInfo);\n\n    // verification\n    verify(properties, serviceInfo, helper);\n  }","id":105264,"modified_method":"@Test\n  public void testPopulateServiceProperties_noSupportsFinalFlag() throws Exception {\n    StackExtensionHelper helper = getStackExtensionHelper();\n    ServiceInfo serviceInfo = getServiceFromStack(helper, \"HDP\", \"2.0.7\", \"YARN\");\n    \n    File configFile = new File(stackRootStr\n        + \"HDP/2.0.7/services/YARN/configuration/yarn-site.xml\".replaceAll(\"/\", File.separator));\n    \n    helper.populateServiceProperties(configFile, serviceInfo);\n    \n    Map<String, Map<String, Map<String, String>>> expectedConfigTypes = new HashMap<String, Map<String, Map<String, String>>>();\n    addToPropertyMap(expectedConfigTypes, \"yarn-site\", StackExtensionHelper.Supports.KEYWORD, \n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    \n    assertEquals(expectedConfigTypes, serviceInfo.getConfigTypes());\n  }","commit_id":"a6febc087c530e822de3ab8f4ccd7f2aad79e1d4","url":"https://github.com/apache/ambari"},{"original_method":"@Test\n  public void testPopulateServiceProperties_supportsFinalFalse() throws Exception {\n    // init\n    File stackRoot = new File(stackRootStr);\n    StackExtensionHelper helper = createMockBuilder(StackExtensionHelper.class).addMockedMethod(\"addConfigTypeProperty\")\n        .withConstructor(injector, stackRoot).createMock();\n    File config = new File(stackRootStr\n        + \"HDP/2.0.7/services/HDFS/configuration/core-site.xml\".replaceAll(\"/\", File.separator));\n    ServiceInfo serviceInfo = createNiceMock(ServiceInfo.class);\n    List<PropertyInfo> properties = createNiceMock(List.class);\n\n    // expectations\n    expect(serviceInfo.getProperties()).andReturn(properties).times(1);\n    expect(properties.addAll((Collection) anyObject())).andReturn(true).times(1);\n    helper.addConfigTypeProperty(serviceInfo, \"core-site\", StackExtensionHelper.Supports.KEYWORD,\n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    replay(properties);\n    replay(serviceInfo);\n    replay(helper);\n\n    // eval\n    helper.populateServiceProperties(config, serviceInfo);\n\n    // verification\n    verify(properties, serviceInfo, helper);\n  }","id":105265,"modified_method":"@Test\n  public void testPopulateServiceProperties_supportsFinalFalse() throws Exception {\n    StackExtensionHelper helper = getStackExtensionHelper();\n    ServiceInfo serviceInfo = getServiceFromStack(helper, \"HDP\", \"2.0.7\", \"HDFS\");\n    File configFile = new File(stackRootStr\n        + \"HDP/2.0.7/services/YARN/configuration/yarn-site.xml\".replaceAll(\"/\", File.separator));\n    helper.populateServiceProperties(configFile, serviceInfo);\n    \n    Map<String, Map<String, Map<String, String>>> expectedConfigTypes = new HashMap<String, Map<String, Map<String, String>>>();\n    addToPropertyMap(expectedConfigTypes, \"global\", StackExtensionHelper.Supports.KEYWORD, \n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"true\");\n    addToPropertyMap(expectedConfigTypes, \"hdfs-site\", StackExtensionHelper.Supports.KEYWORD, \n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    addToPropertyMap(expectedConfigTypes, \"yarn-site\", StackExtensionHelper.Supports.KEYWORD, \n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    addToPropertyMap(expectedConfigTypes, \"hadoop-policy\", StackExtensionHelper.Supports.KEYWORD, \n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    addToPropertyMap(expectedConfigTypes, \"core-site\", StackExtensionHelper.Supports.KEYWORD, \n        StackExtensionHelper.Supports.FINAL.getPropertyName(), \"false\");\n    \n    assertEquals(expectedConfigTypes, serviceInfo.getConfigTypes());\n  }","commit_id":"a6febc087c530e822de3ab8f4ccd7f2aad79e1d4","url":"https://github.com/apache/ambari"},{"original_method":"private static void processHighlighting(Iterator<BatchReport.SyntaxHighlighting> syntaxHighlightingIterator, StringBuilder highlighting,\n    DbFileSources.Line.Builder lineBuilder) {\n    BatchReport.SyntaxHighlighting syntaxHighlighting = syntaxHighlightingIterator.next();\n    int line = lineBuilder.getLine();\n    BatchReport.TextRange range = syntaxHighlighting.getRange();\n    if (range.getStartLine() <= line) {\n      String offsets = offsetToString(syntaxHighlighting.getRange(), line, lineBuilder.getSource().length());\n      if (!offsets.isEmpty()) {\n        if (highlighting.length() > 0) {\n          highlighting.append(SYMBOLS_SEPARATOR);\n        }\n        highlighting.append(offsets)\n          .append(OFFSET_SEPARATOR)\n          .append(getCssClass(syntaxHighlighting.getType()));\n        if (range.getEndLine() == line) {\n          syntaxHighlightingIterator.remove();\n        }\n      } else {\n        syntaxHighlightingIterator.remove();\n      }\n    }\n  }","id":105266,"modified_method":"private void processHighlighting(Iterator<BatchReport.SyntaxHighlighting> syntaxHighlightingIterator, StringBuilder highlighting,\n    DbFileSources.Line.Builder lineBuilder) {\n    BatchReport.SyntaxHighlighting syntaxHighlighting = syntaxHighlightingIterator.next();\n    int line = lineBuilder.getLine();\n    BatchReport.TextRange range = syntaxHighlighting.getRange();\n    if (range.getStartLine() <= line) {\n      String offsets = rangeOffsetConverter.offsetToString(syntaxHighlighting.getRange(), line, lineBuilder.getSource().length());\n      if (offsets.isEmpty()) {\n        syntaxHighlightingIterator.remove();\n      } else {\n        if (highlighting.length() > 0) {\n          highlighting.append(SYMBOLS_SEPARATOR);\n        }\n        highlighting.append(offsets)\n          .append(OFFSET_SEPARATOR)\n          .append(getCssClass(syntaxHighlighting.getType()));\n        if (range.getEndLine() == line) {\n          syntaxHighlightingIterator.remove();\n        }\n      }\n    }\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public HighlightingLineReader(Iterator<BatchReport.SyntaxHighlighting> lineHighlightingIterator) {\n    this.lineHighlightingIterator = lineHighlightingIterator;\n    this.highlightingList = newArrayList();\n  }","id":105267,"modified_method":"public HighlightingLineReader(Iterator<BatchReport.SyntaxHighlighting> lineHighlightingIterator, RangeOffsetConverter rangeOffsetConverter) {\n    this.lineHighlightingIterator = lineHighlightingIterator;\n    this.rangeOffsetConverter = rangeOffsetConverter;\n    this.highlightingList = newArrayList();\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public void read(DbFileSources.Line.Builder lineBuilder) {\n    int line = lineBuilder.getLine();\n    StringBuilder highlighting = new StringBuilder();\n\n    incrementHighlightingListMatchingLine(line);\n    for (Iterator<BatchReport.SyntaxHighlighting> syntaxHighlightingIterator = highlightingList.iterator(); syntaxHighlightingIterator.hasNext();) {\n      processHighlighting(syntaxHighlightingIterator, highlighting, lineBuilder);\n    }\n    if (highlighting.length() > 0) {\n      lineBuilder.setHighlighting(highlighting.toString());\n    }\n  }","id":105268,"modified_method":"@Override\n  public void read(DbFileSources.Line.Builder lineBuilder) {\n    if (!isHighlightingValid) {\n      return;\n    }\n    try {\n      processHighlightings(lineBuilder);\n    } catch (RangeOffsetConverterException e) {\n      isHighlightingValid = false;\n      LOG.warn(\"Inconsistency detected in Highlighting data. Highlighting will be ignored\", e);\n    }\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_many_syntax_highlighting_on_same_line() {\n    HighlightingLineReader highlightingLineReader = new HighlightingLineReader(newArrayList(\n      BatchReport.SyntaxHighlighting.newBuilder()\n        .setRange(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(1)\n          .setStartOffset(2).setEndOffset(3)\n          .build())\n        .setType(Constants.HighlightingType.ANNOTATION)\n        .build(),\n      BatchReport.SyntaxHighlighting.newBuilder()\n        .setRange(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(1)\n          .setStartOffset(4).setEndOffset(5)\n          .build())\n        .setType(Constants.HighlightingType.COMMENT)\n        .build()).iterator());\n\n    highlightingLineReader.read(line1);\n\n    assertThat(line1.getHighlighting()).isEqualTo(\"2,3,a;4,5,cd\");\n  }","id":105269,"modified_method":"@Test\n  public void read_many_syntax_highlighting_on_same_line() {\n    HighlightingLineReader highlightingLineReader = newReader(of(\n      newSingleLineTextRangeWithExpectingLabel(LINE_1, RANGE_LABEL_1), ANNOTATION,\n      newSingleLineTextRangeWithExpectingLabel(LINE_1, RANGE_LABEL_2), COMMENT\n      ));\n\n    highlightingLineReader.read(line1);\n\n    assertThat(line1.getHighlighting()).isEqualTo(RANGE_LABEL_1 + \",a;\" + RANGE_LABEL_2 + \",cd\");\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_many_syntax_highlighting_on_many_lines() {\n    HighlightingLineReader highlightingLineReader = new HighlightingLineReader(newArrayList(\n      BatchReport.SyntaxHighlighting.newBuilder()\n        .setRange(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(3)\n          .setStartOffset(3).setEndOffset(2)\n          .build())\n        .setType(Constants.HighlightingType.ANNOTATION)\n        .build(),\n      BatchReport.SyntaxHighlighting.newBuilder()\n        .setRange(BatchReport.TextRange.newBuilder()\n          .setStartLine(2).setEndLine(4)\n          .setStartOffset(0).setEndOffset(3)\n          .build())\n        .setType(Constants.HighlightingType.HIGHLIGHTING_STRING)\n        .build(),\n      BatchReport.SyntaxHighlighting.newBuilder()\n        .setRange(BatchReport.TextRange.newBuilder()\n          .setStartLine(2).setEndLine(2)\n          .setStartOffset(1).setEndOffset(2)\n          .build())\n        .setType(Constants.HighlightingType.COMMENT)\n        .build()).iterator());\n\n    highlightingLineReader.read(line1);\n    highlightingLineReader.read(line2);\n    highlightingLineReader.read(line3);\n    highlightingLineReader.read(line4);\n\n    assertThat(line1.getHighlighting()).isEqualTo(\"3,5,a\");\n    assertThat(line2.getHighlighting()).isEqualTo(\"0,5,a;0,5,s;1,2,cd\");\n    assertThat(line3.getHighlighting()).isEqualTo(\"0,2,a;0,5,s\");\n    assertThat(line4.getHighlighting()).isEqualTo(\"0,3,s\");\n  }","id":105270,"modified_method":"@Test\n  public void read_many_syntax_highlighting_on_many_lines() {\n    TextRange textRange1 = newTextRange(LINE_1, LINE_3);\n    when(rangeOffsetConverter.offsetToString(textRange1, LINE_1, DEFAULT_LINE_LENGTH)).thenReturn(RANGE_LABEL_1);\n    when(rangeOffsetConverter.offsetToString(textRange1, LINE_2, DEFAULT_LINE_LENGTH)).thenReturn(RANGE_LABEL_2);\n    when(rangeOffsetConverter.offsetToString(textRange1, LINE_3, DEFAULT_LINE_LENGTH)).thenReturn(RANGE_LABEL_3);\n\n    TextRange textRange2 = newTextRange(LINE_2, LINE_4);\n    when(rangeOffsetConverter.offsetToString(textRange2, LINE_2, DEFAULT_LINE_LENGTH)).thenReturn(RANGE_LABEL_2);\n    when(rangeOffsetConverter.offsetToString(textRange2, LINE_3, DEFAULT_LINE_LENGTH)).thenReturn(RANGE_LABEL_2);\n    when(rangeOffsetConverter.offsetToString(textRange2, LINE_4, DEFAULT_LINE_LENGTH)).thenReturn(RANGE_LABEL_4);\n\n    TextRange textRange3 = newTextRange(LINE_2, LINE_2);\n    when(rangeOffsetConverter.offsetToString(textRange3, LINE_2, DEFAULT_LINE_LENGTH)).thenReturn(RANGE_LABEL_5);\n\n    HighlightingLineReader highlightingLineReader = newReader(of(\n      textRange1, ANNOTATION,\n      textRange2, HIGHLIGHTING_STRING,\n      textRange3, COMMENT\n      ));\n\n    highlightingLineReader.read(line1);\n    highlightingLineReader.read(line2);\n    highlightingLineReader.read(line3);\n    highlightingLineReader.read(line4);\n\n    assertThat(line1.getHighlighting()).isEqualTo(RANGE_LABEL_1 + \",a\");\n    assertThat(line2.getHighlighting()).isEqualTo(RANGE_LABEL_2 + \",a;\" + RANGE_LABEL_2 + \",s;\" + RANGE_LABEL_5 + \",cd\");\n    assertThat(line3.getHighlighting()).isEqualTo(RANGE_LABEL_3 + \",a;\" + RANGE_LABEL_2 + \",s\");\n    assertThat(line4.getHighlighting()).isEqualTo(RANGE_LABEL_4 + \",s\");\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_many_lines() {\n    HighlightingLineReader highlightingLineReader = new HighlightingLineReader(newArrayList(\n      BatchReport.SyntaxHighlighting.newBuilder()\n        .setRange(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(1)\n          .setStartOffset(0).setEndOffset(4)\n          .build())\n        .setType(Constants.HighlightingType.ANNOTATION)\n        .build(),\n      BatchReport.SyntaxHighlighting.newBuilder()\n        .setRange(BatchReport.TextRange.newBuilder()\n          .setStartLine(2).setEndLine(2)\n          .setStartOffset(0).setEndOffset(1)\n          .build())\n        .setType(Constants.HighlightingType.COMMENT)\n        .build(),\n      BatchReport.SyntaxHighlighting.newBuilder()\n        .setRange(BatchReport.TextRange.newBuilder()\n          .setStartLine(4).setEndLine(4)\n          .setStartOffset(1).setEndOffset(2)\n          .build())\n        .setType(Constants.HighlightingType.CONSTANT)\n        .build()).iterator());\n\n    highlightingLineReader.read(line1);\n    highlightingLineReader.read(line2);\n    highlightingLineReader.read(line3);\n    highlightingLineReader.read(line4);\n\n    assertThat(line1.getHighlighting()).isEqualTo(\"0,4,a\");\n    assertThat(line2.getHighlighting()).isEqualTo(\"0,1,cd\");\n    assertThat(line4.getHighlighting()).isEqualTo(\"1,2,c\");\n  }","id":105271,"modified_method":"@Test\n  public void read_many_lines() {\n    HighlightingLineReader highlightingLineReader = newReader(of(\n      newSingleLineTextRangeWithExpectingLabel(LINE_1, RANGE_LABEL_1), ANNOTATION,\n      newSingleLineTextRangeWithExpectingLabel(LINE_2, RANGE_LABEL_2), COMMENT,\n      newSingleLineTextRangeWithExpectingLabel(LINE_4, RANGE_LABEL_3), CONSTANT\n      ));\n\n    highlightingLineReader.read(line1);\n    highlightingLineReader.read(line2);\n    highlightingLineReader.read(line3);\n    highlightingLineReader.read(line4);\n\n    assertThat(line1.getHighlighting()).isEqualTo(RANGE_LABEL_1 + \",a\");\n    assertThat(line2.getHighlighting()).isEqualTo(RANGE_LABEL_2 + \",cd\");\n    assertThat(line4.getHighlighting()).isEqualTo(RANGE_LABEL_3 + \",c\");\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_one_syntax_highlighting_on_many_lines() {\n    HighlightingLineReader highlightingLineReader = new HighlightingLineReader(newArrayList(\n      // This highlighting begin on line 1 and finish on line 3\n      BatchReport.SyntaxHighlighting.newBuilder()\n        .setRange(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(3)\n          .setStartOffset(3).setEndOffset(2)\n          .build())\n        .setType(Constants.HighlightingType.ANNOTATION)\n        .build()).iterator());\n\n    highlightingLineReader.read(line1);\n    DbFileSources.Line.Builder line2 = sourceData.addLinesBuilder().setSource(\"line 2\").setLine(2);\n    highlightingLineReader.read(line2);\n    highlightingLineReader.read(line3);\n\n    assertThat(line1.getHighlighting()).isEqualTo(\"3,5,a\");\n    assertThat(line2.getHighlighting()).isEqualTo(\"0,6,a\");\n    assertThat(line3.getHighlighting()).isEqualTo(\"0,2,a\");\n  }","id":105272,"modified_method":"@Test\n  public void read_one_syntax_highlighting_on_many_lines() {\n    // This highlighting begin on line 1 and finish on line 3\n    TextRange textRange = newTextRange(LINE_1, LINE_3);\n    when(rangeOffsetConverter.offsetToString(textRange, LINE_1, DEFAULT_LINE_LENGTH)).thenReturn(RANGE_LABEL_1);\n    when(rangeOffsetConverter.offsetToString(textRange, LINE_2, 6)).thenReturn(RANGE_LABEL_2);\n    when(rangeOffsetConverter.offsetToString(textRange, LINE_3, DEFAULT_LINE_LENGTH)).thenReturn(RANGE_LABEL_3);\n\n    HighlightingLineReader highlightingLineReader = newReader(of(textRange, ANNOTATION));\n\n    highlightingLineReader.read(line1);\n    DbFileSources.Line.Builder line2 = sourceData.addLinesBuilder().setSource(\"line 2\").setLine(2);\n    highlightingLineReader.read(line2);\n    highlightingLineReader.read(line3);\n\n    assertThat(line1.getHighlighting()).isEqualTo(RANGE_LABEL_1 + \",a\");\n    assertThat(line2.getHighlighting()).isEqualTo(RANGE_LABEL_2 + \",a\");\n    assertThat(line3.getHighlighting()).isEqualTo(RANGE_LABEL_3 + \",a\");\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_one_line() {\n    HighlightingLineReader highlightingLineReader = new HighlightingLineReader(newArrayList(\n      BatchReport.SyntaxHighlighting.newBuilder()\n        .setRange(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(1)\n          .setStartOffset(2).setEndOffset(4)\n          .build())\n        .setType(Constants.HighlightingType.ANNOTATION)\n        .build()).iterator());\n\n    highlightingLineReader.read(line1);\n\n    assertThat(line1.getHighlighting()).isEqualTo(\"2,4,a\");\n  }","id":105273,"modified_method":"@Test\n  public void read_one_line() {\n    HighlightingLineReader highlightingLineReader = newReader(of(\n      newSingleLineTextRangeWithExpectingLabel(LINE_1, RANGE_LABEL_1),\n      ANNOTATION));\n\n    highlightingLineReader.read(line1);\n\n    assertThat(line1.getHighlighting()).isEqualTo(RANGE_LABEL_1 + \",a\");\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void nothing_to_read() {\n    HighlightingLineReader highlightingLineReader = new HighlightingLineReader(Collections.<BatchReport.SyntaxHighlighting>emptyList().iterator());\n\n    DbFileSources.Line.Builder lineBuilder = newBuilder().addLinesBuilder().setLine(1);\n    highlightingLineReader.read(lineBuilder);\n\n    assertThat(lineBuilder.hasHighlighting()).isFalse();\n  }","id":105274,"modified_method":"@Test\n  public void nothing_to_read() {\n    HighlightingLineReader highlightingLineReader = newReader(Collections.<TextRange, Constants.HighlightingType>emptyMap());\n\n    DbFileSources.Line.Builder lineBuilder = newBuilder().addLinesBuilder().setLine(1);\n    highlightingLineReader.read(lineBuilder);\n\n    assertThat(lineBuilder.hasHighlighting()).isFalse();\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_highlighting_declared_on_a_whole_line() {\n    HighlightingLineReader highlightingLineReader = new HighlightingLineReader(newArrayList(\n      BatchReport.SyntaxHighlighting.newBuilder()\n        .setRange(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(2)\n          .setStartOffset(0).setEndOffset(0)\n          .build())\n        .setType(Constants.HighlightingType.ANNOTATION)\n        .build()).iterator());\n\n    highlightingLineReader.read(line1);\n    highlightingLineReader.read(line2);\n    highlightingLineReader.read(line3);\n\n    assertThat(line1.getHighlighting()).isEqualTo(\"0,5,a\");\n    // Nothing should be set on line 2\n    assertThat(line2.getHighlighting()).isEmpty();\n    assertThat(line3.getHighlighting()).isEmpty();\n  }","id":105275,"modified_method":"@Test\n  public void read_highlighting_declared_on_a_whole_line() {\n    TextRange textRange = newTextRange(LINE_1, LINE_2);\n    when(rangeOffsetConverter.offsetToString(textRange, LINE_1, DEFAULT_LINE_LENGTH)).thenReturn(RANGE_LABEL_1);\n    when(rangeOffsetConverter.offsetToString(textRange, LINE_2, DEFAULT_LINE_LENGTH)).thenReturn(\"\");\n\n    HighlightingLineReader highlightingLineReader = newReader(of(textRange, ANNOTATION));\n\n    highlightingLineReader.read(line1);\n    highlightingLineReader.read(line2);\n    highlightingLineReader.read(line3);\n\n    assertThat(line1.getHighlighting()).isEqualTo(RANGE_LABEL_1 + \",a\");\n    // Nothing should be set on line 2\n    assertThat(line2.getHighlighting()).isEmpty();\n    assertThat(line3.getHighlighting()).isEmpty();\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"LineReaders(BatchReportReader reportReader, ScmInfoRepository scmInfoRepository, Component component) {\n      int componentRef = component.getReportAttributes().getRef();\n      CloseableIterator<BatchReport.Coverage> coverageIt = reportReader.readComponentCoverage(componentRef);\n      closeables.add(coverageIt);\n      readers.add(new CoverageLineReader(coverageIt));\n\n      Optional<ScmInfo> scmInfoOptional = scmInfoRepository.getScmInfo(component);\n      if (scmInfoOptional.isPresent()) {\n        this.scmLineReader = new ScmLineReader(scmInfoOptional.get());\n        readers.add(scmLineReader);\n      } else {\n        this.scmLineReader = null;\n      }\n\n      CloseableIterator<BatchReport.SyntaxHighlighting> highlightingIt = reportReader.readComponentSyntaxHighlighting(componentRef);\n      closeables.add(highlightingIt);\n      readers.add(new HighlightingLineReader(highlightingIt));\n\n      CloseableIterator<BatchReport.Symbol> symbolsIt = reportReader.readComponentSymbols(componentRef);\n      closeables.add(symbolsIt);\n      readers.add(new SymbolsLineReader(symbolsIt));\n\n      CloseableIterator<BatchReport.Duplication> duplicationsIt = reportReader.readComponentDuplications(componentRef);\n      closeables.add(duplicationsIt);\n      readers.add(new DuplicationLineReader(duplicationsIt));\n    }","id":105276,"modified_method":"LineReaders(BatchReportReader reportReader, ScmInfoRepository scmInfoRepository, Component component) {\n      int componentRef = component.getReportAttributes().getRef();\n      CloseableIterator<BatchReport.Coverage> coverageIt = reportReader.readComponentCoverage(componentRef);\n      closeables.add(coverageIt);\n      readers.add(new CoverageLineReader(coverageIt));\n\n      Optional<ScmInfo> scmInfoOptional = scmInfoRepository.getScmInfo(component);\n      if (scmInfoOptional.isPresent()) {\n        this.scmLineReader = new ScmLineReader(scmInfoOptional.get());\n        readers.add(scmLineReader);\n      } else {\n        this.scmLineReader = null;\n      }\n\n      RangeOffsetConverter rangeOffsetConverter = new RangeOffsetConverter();\n      CloseableIterator<BatchReport.SyntaxHighlighting> highlightingIt = reportReader.readComponentSyntaxHighlighting(componentRef);\n      closeables.add(highlightingIt);\n      readers.add(new HighlightingLineReader(highlightingIt, rangeOffsetConverter));\n\n      CloseableIterator<BatchReport.Symbol> symbolsIt = reportReader.readComponentSymbols(componentRef);\n      closeables.add(symbolsIt);\n      readers.add(new SymbolsLineReader(symbolsIt, rangeOffsetConverter));\n\n      CloseableIterator<BatchReport.Duplication> duplicationsIt = reportReader.readComponentDuplications(componentRef);\n      closeables.add(duplicationsIt);\n      readers.add(new DuplicationLineReader(duplicationsIt));\n    }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private static void validateStartOffsetNotGreaterThanLineLength(BatchReport.TextRange range, int lineLength, int line) {\n    if (range.getStartLine() == line && range.getStartOffset() > lineLength) {\n      throw new IllegalArgumentException(format(\"Start offset %s is defined outside the length (%s) of the line %s\", range.getStartOffset(), lineLength, line));\n    }\n  }","id":105277,"modified_method":"private static void validateStartOffsetNotGreaterThanLineLength(BatchReport.TextRange range, int lineLength, int line) {\n    checkExpression(range.getStartLine() != line || range.getStartOffset() <= lineLength,\n      \"Start offset %s is defined outside the length (%s) of the line %s\", range.getStartOffset(), lineLength, line);\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private static void validateOffsetOrder(BatchReport.TextRange range, int line) {\n    if (range.getStartLine() == range.getEndLine() && range.getStartOffset() > range.getEndOffset()) {\n      throw new IllegalArgumentException(format(\"End offset %s cannot be defined before start offset %s on line %s\", range.getEndOffset(), range.getStartOffset(), line));\n    }\n  }","id":105278,"modified_method":"private static void validateOffsetOrder(BatchReport.TextRange range, int line) {\n    checkExpression(range.getStartLine() != range.getEndLine() || range.getStartOffset() <= range.getEndOffset(),\n      \"End offset %s cannot be defined before start offset %s on line %s\", range.getEndOffset(), range.getStartOffset(), line);\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private static void validateEndOffsetNotGreaterThanLineLength(BatchReport.TextRange range, int lineLength, int line) {\n    if (range.getEndLine() == line && range.getEndOffset() > lineLength) {\n      throw new IllegalArgumentException(format(\"End offset %s is defined outside the length (%s) of the line %s\", range.getEndOffset(), lineLength, line));\n    }\n  }","id":105279,"modified_method":"private static void validateEndOffsetNotGreaterThanLineLength(BatchReport.TextRange range, int lineLength, int line) {\n    checkExpression(range.getEndLine() != line || range.getEndOffset() <= lineLength,\n      \"End offset %s is defined outside the length (%s) of the line %s\", range.getEndOffset(), lineLength, line);\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public static String offsetToString(BatchReport.TextRange range, int lineIndex, int lineLength) {\n    StringBuilder element = new StringBuilder();\n\n    validateOffsetOrder(range, lineIndex);\n    validateStartOffsetNotGreaterThanLineLength(range, lineLength, lineIndex);\n    validateEndOffsetNotGreaterThanLineLength(range, lineLength, lineIndex);\n\n    int startOffset = range.getStartLine() == lineIndex ? range.getStartOffset() : 0;\n    int endOffset = range.getEndLine() == lineIndex ? range.getEndOffset() : lineLength;\n\n    if (startOffset < endOffset) {\n      element.append(startOffset).append(OFFSET_SEPARATOR);\n      element.append(endOffset);\n    }\n\n    return element.toString();\n  }","id":105280,"modified_method":"public String offsetToString(BatchReport.TextRange range, int lineIndex, int lineLength) {\n    StringBuilder element = new StringBuilder();\n\n    validateOffsetOrder(range, lineIndex);\n    validateStartOffsetNotGreaterThanLineLength(range, lineLength, lineIndex);\n    validateEndOffsetNotGreaterThanLineLength(range, lineLength, lineIndex);\n\n    int startOffset = range.getStartLine() == lineIndex ? range.getStartOffset() : 0;\n    int endOffset = range.getEndLine() == lineIndex ? range.getEndOffset() : lineLength;\n\n    if (startOffset < endOffset) {\n      element.append(startOffset).append(OFFSET_SEPARATOR);\n      element.append(endOffset);\n    }\n\n    return element.toString();\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void fail_when_end_offset_is_before_start_offset() {\n    thrown.expect(IllegalArgumentException.class);\n    thrown.expectMessage(\"End offset 2 cannot be defined before start offset 4 on line 1\");\n\n    offsetToString(BatchReport.TextRange.newBuilder()\n      .setStartLine(1).setEndLine(1)\n      .setStartOffset(4).setEndOffset(2)\n      .build(),\n      1, 5);\n  }","id":105281,"modified_method":"@Test\n  public void fail_when_end_offset_is_before_start_offset() {\n    thrown.expect(RangeOffsetConverterException.class);\n    thrown.expectMessage(\"End offset 2 cannot be defined before start offset 4 on line 1\");\n\n    underTest.offsetToString(createTextRange(LINE_1, LINE_1, OFFSET_4, OFFSET_2),\n      LINE_1, DEFAULT_LINE_LENGTH);\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void append_range_not_finishing_in_current_line() {\n    assertThat(offsetToString(BatchReport.TextRange.newBuilder()\n      .setStartLine(1).setEndLine(3)\n      .setStartOffset(2).setEndOffset(3)\n      .build(), 1, 5)).isEqualTo(\"2,5\");\n  }","id":105282,"modified_method":"@Test\n  public void return_range_not_finishing_in_current_line() {\n    assertThat(underTest.offsetToString(createTextRange(LINE_1, LINE_3, OFFSET_2, OFFSET_3),\n      LINE_1, DEFAULT_LINE_LENGTH))\n      .isEqualTo(OFFSET_2 + \",\" + DEFAULT_LINE_LENGTH);\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void fail_when_end_offset_is_higher_than_line_length() {\n    thrown.expect(IllegalArgumentException.class);\n    thrown.expectMessage(\"End offset 10 is defined outside the length (5) of the line 1\");\n\n    offsetToString(BatchReport.TextRange.newBuilder()\n      .setStartLine(1).setEndLine(1)\n      .setStartOffset(4).setEndOffset(10)\n      .build(),\n      1, 5);\n  }","id":105283,"modified_method":"@Test\n  public void fail_when_end_offset_is_higher_than_line_length() {\n    thrown.expect(RangeOffsetConverterException.class);\n    thrown.expectMessage(\"End offset 10 is defined outside the length (5) of the line 1\");\n\n    underTest.offsetToString(createTextRange(LINE_1, LINE_1, OFFSET_4, BIG_OFFSET),\n      LINE_1, DEFAULT_LINE_LENGTH);\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void append_range_that_began_in_previous_line_and_not_finishing_in_current_line() {\n    assertThat(offsetToString(BatchReport.TextRange.newBuilder()\n      .setStartLine(1).setEndLine(3)\n      .setStartOffset(2).setEndOffset(3)\n      .build(), 2, 5)).isEqualTo(\"0,5\");\n  }","id":105284,"modified_method":"@Test\n  public void return_range_that_began_in_previous_line_and_not_finishing_in_current_line() {\n    assertThat(underTest.offsetToString(createTextRange(LINE_1, LINE_1, OFFSET_2, OFFSET_3),\n      LINE_2, DEFAULT_LINE_LENGTH))\n      .isEqualTo(OFFSET_0 + \",\" + DEFAULT_LINE_LENGTH);\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void do_nothing_if_offset_is_empty() {\n    assertThat(offsetToString(BatchReport.TextRange.newBuilder()\n      .setStartLine(1).setEndLine(1)\n      .setStartOffset(0).setEndOffset(0)\n      .build(), 1, 5)).isEmpty();\n  }","id":105285,"modified_method":"@Test\n  public void return_empty_string_when_offset_is_empty() {\n    assertThat(underTest.offsetToString(createTextRange(LINE_1, LINE_1, OFFSET_0, OFFSET_0),\n      LINE_1, DEFAULT_LINE_LENGTH))\n      .isEmpty();\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void fail_when_start_offset_is_higher_than_line_length() {\n    thrown.expect(IllegalArgumentException.class);\n    thrown.expectMessage(\"Start offset 10 is defined outside the length (5) of the line 1\");\n\n    offsetToString(BatchReport.TextRange.newBuilder()\n      .setStartLine(1).setEndLine(1)\n      .setStartOffset(10).setEndOffset(11)\n      .build(),\n      1, 5);\n  }","id":105286,"modified_method":"@Test\n  public void fail_when_start_offset_is_higher_than_line_length() {\n    thrown.expect(RangeOffsetConverterException.class);\n    thrown.expectMessage(\"Start offset 10 is defined outside the length (5) of the line 1\");\n\n    underTest.offsetToString(createTextRange(LINE_1, LINE_1, BIG_OFFSET, BIG_OFFSET + 1),\n      LINE_1, DEFAULT_LINE_LENGTH);\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void append_range_that_began_in_previous_line_and_finish_in_current_line() {\n    assertThat(offsetToString(BatchReport.TextRange.newBuilder()\n      .setStartLine(1).setEndLine(3)\n      .setStartOffset(2).setEndOffset(3)\n      .build(), 3, 5)).isEqualTo(\"0,3\");\n  }","id":105287,"modified_method":"@Test\n  public void return_range_that_began_in_previous_line_and_finish_in_current_line() {\n    assertThat(underTest.offsetToString(createTextRange(LINE_1, LINE_3, OFFSET_2, OFFSET_3),\n      LINE_3, DEFAULT_LINE_LENGTH))\n      .isEqualTo(OFFSET_0 + \",\" + OFFSET_3);\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private static void appendSymbol(StringBuilder lineSymbol, BatchReport.TextRange range, int line, int symbolId, String sourceLine) {\n    if (matchLine(range, line)) {\n      String offsets = offsetToString(range, line, sourceLine.length());\n      if (!offsets.isEmpty()) {\n        if (lineSymbol.length() > 0) {\n          lineSymbol.append(SYMBOLS_SEPARATOR);\n        }\n        lineSymbol.append(offsets)\n          .append(OFFSET_SEPARATOR)\n          .append(symbolId);\n      }\n    }\n  }","id":105288,"modified_method":"private void appendSymbol(StringBuilder lineSymbol, BatchReport.TextRange range, int line, int symbolId, String sourceLine) {\n    if (matchLine(range, line)) {\n      String offsets = rangeOffsetConverter.offsetToString(range, line, sourceLine.length());\n      if (!offsets.isEmpty()) {\n        if (lineSymbol.length() > 0) {\n          lineSymbol.append(SYMBOLS_SEPARATOR);\n        }\n        lineSymbol.append(offsets)\n          .append(OFFSET_SEPARATOR)\n          .append(symbolId);\n      }\n    }\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public void read(DbFileSources.Line.Builder lineBuilder) {\n    int line = lineBuilder.getLine();\n    List<BatchReport.Symbol> lineSymbols = findSymbolsMatchingLine(line);\n    for (BatchReport.Symbol lineSymbol : lineSymbols) {\n      int symbolId = idsBySymbol.get(lineSymbol);\n      StringBuilder symbolString = new StringBuilder(lineBuilder.getSymbols());\n\n      appendSymbol(symbolString, lineSymbol.getDeclaration(), line, symbolId, lineBuilder.getSource());\n      for (BatchReport.TextRange range : lineSymbol.getReferenceList()) {\n        appendSymbol(symbolString, range, line, symbolId, lineBuilder.getSource());\n      }\n\n      if (symbolString.length() > 0) {\n        lineBuilder.setSymbols(symbolString.toString());\n      }\n    }\n  }","id":105289,"modified_method":"@Override\n  public void read(DbFileSources.Line.Builder lineBuilder) {\n    if (!areSymbolsValid) {\n      return;\n    }\n    try {\n      processSymbols(lineBuilder);\n    } catch (RangeOffsetConverter.RangeOffsetConverterException e) {\n      areSymbolsValid = false;\n      LOG.warn(\"Inconsistency detected in Symbols data. Symbols will be ignored\", e);\n    }\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public SymbolsLineReader(Iterator<BatchReport.Symbol> symbols) {\n    this.symbols = Lists.newArrayList(symbols);\n    // Sort symbols to have deterministic results and avoid false variation that would lead to an unnecessary update of the source files\n    // data\n    Collections.sort(this.symbols, new SymbolsComparator());\n\n    this.idsBySymbol = createIdsBySymbolMap(this.symbols);\n  }","id":105290,"modified_method":"public SymbolsLineReader(Iterator<BatchReport.Symbol> symbols, RangeOffsetConverter rangeOffsetConverter) {\n    this.rangeOffsetConverter = rangeOffsetConverter;\n    this.symbols = Lists.newArrayList(symbols);\n    // Sort symbols to have deterministic results and avoid false variation that would lead to an unnecessary update of the source files\n    // data\n    Collections.sort(this.symbols, new SymbolsComparator());\n\n    this.idsBySymbol = createIdsBySymbolMap(this.symbols);\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_symbols() {\n    List<BatchReport.Symbol> symbols = newArrayList(\n      BatchReport.Symbol.newBuilder()\n        .setDeclaration(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(1).setStartOffset(2).setEndOffset(4)\n          .build())\n        .addReference(BatchReport.TextRange.newBuilder()\n          .setStartLine(3).setEndLine(3).setStartOffset(1).setEndOffset(3)\n          .build())\n        .build());\n\n    SymbolsLineReader symbolsLineReader = new SymbolsLineReader(symbols.iterator());\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n    symbolsLineReader.read(line3);\n\n    assertThat(line1.getSymbols()).isEqualTo(\"2,4,1\");\n    assertThat(line2.getSymbols()).isEmpty();\n    assertThat(line3.getSymbols()).isEqualTo(\"1,3,1\");\n  }","id":105291,"modified_method":"@Test\n  public void read_symbols() {\n    SymbolsLineReader symbolsLineReader = newReader(newSymbol(\n      newSingleLineTextRangeWithExpectedLabel(LINE_1, OFFSET_2, OFFSET_4, RANGE_LABEL_1),\n      newSingleLineTextRangeWithExpectedLabel(LINE_3, OFFSET_1, OFFSET_3, RANGE_LABEL_2)\n      ));\n\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n    symbolsLineReader.read(line3);\n\n    assertThat(line1.getSymbols()).isEqualTo(RANGE_LABEL_1 + \",1\");\n    assertThat(line2.getSymbols()).isEmpty();\n    assertThat(line3.getSymbols()).isEqualTo(RANGE_LABEL_2 + \",1\");\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_symbols_when_reference_line_is_before_declaration_line() {\n    List<BatchReport.Symbol> symbols = newArrayList(\n      BatchReport.Symbol.newBuilder()\n        .setDeclaration(BatchReport.TextRange.newBuilder()\n          .setStartLine(2).setEndLine(2).setStartOffset(3).setEndOffset(4)\n          .build())\n        .addReference(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(1).setStartOffset(1).setEndOffset(2)\n          .build())\n        .build());\n\n    SymbolsLineReader symbolsLineReader = new SymbolsLineReader(symbols.iterator());\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n\n    assertThat(line1.getSymbols()).isEqualTo(\"1,2,1\");\n    assertThat(line2.getSymbols()).isEqualTo(\"3,4,1\");\n  }","id":105292,"modified_method":"@Test\n  public void read_symbols_when_reference_line_is_before_declaration_line() {\n    SymbolsLineReader symbolsLineReader = newReader(newSymbol(\n      newSingleLineTextRangeWithExpectedLabel(LINE_2, OFFSET_3, OFFSET_4, RANGE_LABEL_1),\n      newSingleLineTextRangeWithExpectedLabel(LINE_1, OFFSET_1, OFFSET_2, RANGE_LABEL_2)\n      ));\n\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n\n    assertThat(line1.getSymbols()).isEqualTo(RANGE_LABEL_2 + \",1\");\n    assertThat(line2.getSymbols()).isEqualTo(RANGE_LABEL_1 + \",1\");\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void symbol_declaration_should_be_sorted_by_offset() {\n    List<BatchReport.Symbol> symbols = newArrayList(\n      BatchReport.Symbol.newBuilder()\n        .setDeclaration(BatchReport.TextRange.newBuilder()\n          // This symbol begins after the second symbol, it should appear in second place\n          .setStartLine(1).setEndLine(1).setStartOffset(2).setEndOffset(3)\n          .build())\n        .addReference(BatchReport.TextRange.newBuilder()\n          .setStartLine(3).setEndLine(3).setStartOffset(2).setEndOffset(3)\n          .build())\n        .build(),\n      BatchReport.Symbol.newBuilder()\n        .setDeclaration(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(1).setStartOffset(0).setEndOffset(1)\n          .build())\n        .addReference(BatchReport.TextRange.newBuilder()\n          .setStartLine(3).setEndLine(3).setStartOffset(0).setEndOffset(1)\n          .build())\n        .build());\n\n    SymbolsLineReader symbolsLineReader = new SymbolsLineReader(symbols.iterator());\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n    symbolsLineReader.read(line3);\n\n    assertThat(line1.getSymbols()).isEqualTo(\"0,1,1;2,3,2\");\n    assertThat(line2.getSymbols()).isEmpty();\n    assertThat(line3.getSymbols()).isEqualTo(\"0,1,1;2,3,2\");\n  }","id":105293,"modified_method":"@Test\n  public void symbol_declaration_should_be_sorted_by_offset() {\n    SymbolsLineReader symbolsLineReader = newReader(\n      newSymbol(\n        // This symbol begins after the second symbol, it should appear in second place\n        newSingleLineTextRangeWithExpectedLabel(LINE_1, OFFSET_2, OFFSET_3, RANGE_LABEL_1),\n        newSingleLineTextRangeWithExpectedLabel(LINE_3, OFFSET_2, OFFSET_3, RANGE_LABEL_1)),\n      newSymbol(\n        newSingleLineTextRangeWithExpectedLabel(LINE_1, OFFSET_0, OFFSET_1, RANGE_LABEL_2),\n        newSingleLineTextRangeWithExpectedLabel(LINE_3, OFFSET_0, OFFSET_1, RANGE_LABEL_2)\n      ));\n\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n    symbolsLineReader.read(line3);\n\n    assertThat(line1.getSymbols()).isEqualTo(RANGE_LABEL_2 + \",1;\" + RANGE_LABEL_1 + \",2\");\n    assertThat(line2.getSymbols()).isEmpty();\n    assertThat(line3.getSymbols()).isEqualTo(RANGE_LABEL_2 + \",1;\" + RANGE_LABEL_1 + \",2\");\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_symbols_with_two_references() {\n    List<BatchReport.Symbol> symbols = newArrayList(\n      BatchReport.Symbol.newBuilder()\n        .setDeclaration(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(1).setStartOffset(2).setEndOffset(4)\n          .build())\n        .addReference(BatchReport.TextRange.newBuilder()\n          .setStartLine(3).setEndLine(3).setStartOffset(1).setEndOffset(3)\n          .build())\n        .addReference(BatchReport.TextRange.newBuilder()\n          .setStartLine(2).setEndLine(2).setStartOffset(0).setEndOffset(2)\n          .build())\n        .build());\n\n    SymbolsLineReader symbolsLineReader = new SymbolsLineReader(symbols.iterator());\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n    symbolsLineReader.read(line3);\n\n    assertThat(line1.getSymbols()).isEqualTo(\"2,4,1\");\n    assertThat(line2.getSymbols()).isEqualTo(\"0,2,1\");\n    assertThat(line3.getSymbols()).isEqualTo(\"1,3,1\");\n  }","id":105294,"modified_method":"@Test\n  public void read_symbols_with_two_references() {\n    SymbolsLineReader symbolsLineReader = newReader(newSymbol(\n      newSingleLineTextRangeWithExpectedLabel(LINE_1, OFFSET_2, OFFSET_4, RANGE_LABEL_1),\n      newSingleLineTextRangeWithExpectedLabel(LINE_3, OFFSET_1, OFFSET_3, RANGE_LABEL_2),\n      newSingleLineTextRangeWithExpectedLabel(LINE_2, OFFSET_0, OFFSET_2, RANGE_LABEL_3)\n      ));\n\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n    symbolsLineReader.read(line3);\n\n    assertThat(line1.getSymbols()).isEqualTo(RANGE_LABEL_1 + \",1\");\n    assertThat(line2.getSymbols()).isEqualTo(RANGE_LABEL_3 + \",1\");\n    assertThat(line3.getSymbols()).isEqualTo(RANGE_LABEL_2 + \",1\");\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_symbols_declared_on_a_whole_line() {\n    List<BatchReport.Symbol> symbols = newArrayList(\n      BatchReport.Symbol.newBuilder()\n        .setDeclaration(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(2).setStartOffset(0).setEndOffset(0)\n          .build())\n        .addReference(BatchReport.TextRange.newBuilder()\n          .setStartLine(3).setEndLine(3).setStartOffset(1).setEndOffset(3)\n          .build())\n        .build());\n\n    SymbolsLineReader symbolsLineReader = new SymbolsLineReader(symbols.iterator());\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n    symbolsLineReader.read(line3);\n    symbolsLineReader.read(line4);\n\n    assertThat(line1.getSymbols()).isEqualTo(\"0,5,1\");\n    assertThat(line2.getSymbols()).isEmpty();\n    assertThat(line3.getSymbols()).isEqualTo(\"1,3,1\");\n    assertThat(line4.getSymbols()).isEmpty();\n  }","id":105295,"modified_method":"@Test\n  public void read_symbols_declared_on_a_whole_line() {\n    TextRange declaration = newTextRange(LINE_1, LINE_2, OFFSET_0, OFFSET_0);\n    when(rangeOffsetConverter.offsetToString(declaration, LINE_1, DEFAULT_LINE_LENGTH)).thenReturn(RANGE_LABEL_1);\n    when(rangeOffsetConverter.offsetToString(declaration, LINE_2, DEFAULT_LINE_LENGTH)).thenReturn(\"\");\n    TextRange reference = newSingleLineTextRangeWithExpectedLabel(LINE_3, OFFSET_1, OFFSET_3, RANGE_LABEL_2);\n\n    SymbolsLineReader symbolsLineReader = newReader(newSymbol(declaration, reference));\n\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n    symbolsLineReader.read(line3);\n    symbolsLineReader.read(line4);\n\n    assertThat(line1.getSymbols()).isEqualTo(RANGE_LABEL_1 + \",1\");\n    assertThat(line2.getSymbols()).isEmpty();\n    assertThat(line3.getSymbols()).isEqualTo(RANGE_LABEL_2 + \",1\");\n    assertThat(line4.getSymbols()).isEmpty();\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_symbols_with_reference_on_same_line() {\n    List<BatchReport.Symbol> symbols = newArrayList(\n      BatchReport.Symbol.newBuilder()\n        .setDeclaration(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(1).setStartOffset(0).setEndOffset(1)\n          .build())\n        .addReference(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(1).setStartOffset(2).setEndOffset(3)\n          .build())\n        .build());\n\n    SymbolsLineReader symbolsLineReader = new SymbolsLineReader(symbols.iterator());\n    symbolsLineReader.read(line1);\n\n    assertThat(line1.getSymbols()).isEqualTo(\"0,1,1;2,3,1\");\n  }","id":105296,"modified_method":"@Test\n  public void read_symbols_with_reference_on_same_line() {\n    SymbolsLineReader symbolsLineReader = newReader(newSymbol(\n      newSingleLineTextRangeWithExpectedLabel(LINE_1, OFFSET_0, OFFSET_1, RANGE_LABEL_1),\n      newSingleLineTextRangeWithExpectedLabel(LINE_1, OFFSET_2, OFFSET_3, RANGE_LABEL_2)\n      ));\n\n    symbolsLineReader.read(line1);\n\n    assertThat(line1.getSymbols()).isEqualTo(RANGE_LABEL_1 + \",1;\" + RANGE_LABEL_2 + \",1\");\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_many_symbols_on_lines() {\n    List<BatchReport.Symbol> symbols = newArrayList(\n      BatchReport.Symbol.newBuilder()\n        .setDeclaration(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(1).setStartOffset(1).setEndOffset(2)\n          .build())\n        .addReference(BatchReport.TextRange.newBuilder()\n          .setStartLine(3).setEndLine(3).setStartOffset(2).setEndOffset(3)\n          .build())\n        .build(),\n      BatchReport.Symbol.newBuilder()\n        .setDeclaration(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(1).setStartOffset(3).setEndOffset(4)\n          .build())\n        .addReference(BatchReport.TextRange.newBuilder()\n          .setStartLine(3).setEndLine(3).setStartOffset(0).setEndOffset(1)\n          .build())\n        .build());\n\n    SymbolsLineReader symbolsLineReader = new SymbolsLineReader(symbols.iterator());\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n    symbolsLineReader.read(line3);\n\n    assertThat(line1.getSymbols()).isEqualTo(\"1,2,1;3,4,2\");\n    assertThat(line2.getSymbols()).isEmpty();\n    assertThat(line3.getSymbols()).isEqualTo(\"2,3,1;0,1,2\");\n  }","id":105297,"modified_method":"@Test\n  public void read_many_symbols_on_lines() {\n    SymbolsLineReader symbolsLineReader = newReader(\n      newSymbol(\n        newSingleLineTextRangeWithExpectedLabel(LINE_1, OFFSET_1, OFFSET_2, RANGE_LABEL_1),\n        newSingleLineTextRangeWithExpectedLabel(LINE_3, OFFSET_2, OFFSET_3, RANGE_LABEL_2)),\n      newSymbol(\n        newSingleLineTextRangeWithExpectedLabel(LINE_1, OFFSET_3, OFFSET_4, RANGE_LABEL_3),\n        newSingleLineTextRangeWithExpectedLabel(LINE_3, OFFSET_0, OFFSET_1, RANGE_LABEL_4)\n      ));\n\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n    symbolsLineReader.read(line3);\n\n    assertThat(line1.getSymbols()).isEqualTo(RANGE_LABEL_1 + \",1;\" + RANGE_LABEL_3 + \",2\");\n    assertThat(line2.getSymbols()).isEmpty();\n    assertThat(line3.getSymbols()).isEqualTo(RANGE_LABEL_2 + \",1;\" + RANGE_LABEL_4 + \",2\");\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_nothing() {\n    SymbolsLineReader symbolsLineReader = new SymbolsLineReader(CloseableIterator.<BatchReport.Symbol>emptyCloseableIterator());\n\n    symbolsLineReader.read(line1);\n\n    assertThat(line1.getSymbols()).isEmpty();\n  }","id":105298,"modified_method":"@Test\n  public void read_nothing() {\n    SymbolsLineReader symbolsLineReader = newReader();\n\n    symbolsLineReader.read(line1);\n\n    assertThat(line1.getSymbols()).isEmpty();\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void symbol_declaration_should_be_sorted_by_line() {\n    List<BatchReport.Symbol> symbols = newArrayList(\n      BatchReport.Symbol.newBuilder()\n        .setDeclaration(BatchReport.TextRange.newBuilder()\n          // This symbol begins after the second symbol, it should appear in second place\n          .setStartLine(2).setEndLine(2).setStartOffset(0).setEndOffset(1)\n          .build())\n        .addReference(BatchReport.TextRange.newBuilder()\n          .setStartLine(3).setEndLine(3).setStartOffset(2).setEndOffset(3)\n          .build())\n        .build(),\n      BatchReport.Symbol.newBuilder()\n        .setDeclaration(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(1).setStartOffset(0).setEndOffset(1)\n          .build())\n        .addReference(BatchReport.TextRange.newBuilder()\n          .setStartLine(3).setEndLine(3).setStartOffset(0).setEndOffset(1)\n          .build())\n        .build());\n\n    SymbolsLineReader symbolsLineReader = new SymbolsLineReader(symbols.iterator());\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n    symbolsLineReader.read(line3);\n\n    assertThat(line1.getSymbols()).isEqualTo(\"0,1,1\");\n    assertThat(line2.getSymbols()).isEqualTo(\"0,1,2\");\n    assertThat(line3.getSymbols()).isEqualTo(\"0,1,1;2,3,2\");\n  }","id":105299,"modified_method":"@Test\n  public void symbol_declaration_should_be_sorted_by_line() {\n    SymbolsLineReader symbolsLineReader = newReader(\n      newSymbol(\n        newSingleLineTextRangeWithExpectedLabel(LINE_2, OFFSET_0, OFFSET_1, RANGE_LABEL_1),\n        newSingleLineTextRangeWithExpectedLabel(LINE_3, OFFSET_2, OFFSET_3, RANGE_LABEL_2)),\n      newSymbol(\n        newSingleLineTextRangeWithExpectedLabel(LINE_1, OFFSET_0, OFFSET_1, RANGE_LABEL_1),\n        newSingleLineTextRangeWithExpectedLabel(LINE_3, OFFSET_0, OFFSET_1, RANGE_LABEL_1)\n      ));\n\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n    symbolsLineReader.read(line3);\n\n    assertThat(line1.getSymbols()).isEqualTo(RANGE_LABEL_1 + \",1\");\n    assertThat(line2.getSymbols()).isEqualTo(RANGE_LABEL_1 + \",2\");\n    assertThat(line3.getSymbols()).isEqualTo(RANGE_LABEL_1 + \",1;\" + RANGE_LABEL_2 + \",2\");\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_symbols_defined_on_many_lines() {\n    List<BatchReport.Symbol> symbols = newArrayList(\n      BatchReport.Symbol.newBuilder()\n        .setDeclaration(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(2).setStartOffset(1).setEndOffset(3)\n          .build())\n        .addReference(BatchReport.TextRange.newBuilder()\n          .setStartLine(3).setEndLine(4).setStartOffset(1).setEndOffset(3)\n          .build())\n        .build());\n\n    SymbolsLineReader symbolsLineReader = new SymbolsLineReader(symbols.iterator());\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n    symbolsLineReader.read(line3);\n    symbolsLineReader.read(line4);\n\n    assertThat(line1.getSymbols()).isEqualTo(\"1,5,1\");\n    assertThat(line2.getSymbols()).isEqualTo(\"0,3,1\");\n    assertThat(line3.getSymbols()).isEqualTo(\"1,5,1\");\n    assertThat(line4.getSymbols()).isEqualTo(\"0,3,1\");\n  }","id":105300,"modified_method":"@Test\n  public void read_symbols_defined_on_many_lines() {\n    TextRange declaration = newTextRange(LINE_1, LINE_2, OFFSET_1, OFFSET_3);\n    when(rangeOffsetConverter.offsetToString(declaration, LINE_1, DEFAULT_LINE_LENGTH)).thenReturn(RANGE_LABEL_1);\n    when(rangeOffsetConverter.offsetToString(declaration, LINE_2, DEFAULT_LINE_LENGTH)).thenReturn(RANGE_LABEL_2);\n\n    TextRange reference = newTextRange(LINE_3, LINE_4, OFFSET_1, OFFSET_3);\n    when(rangeOffsetConverter.offsetToString(reference, LINE_3, DEFAULT_LINE_LENGTH)).thenReturn(RANGE_LABEL_1);\n    when(rangeOffsetConverter.offsetToString(reference, LINE_4, DEFAULT_LINE_LENGTH)).thenReturn(RANGE_LABEL_2);\n\n    SymbolsLineReader symbolsLineReader = newReader(newSymbol(declaration, reference));\n\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n    symbolsLineReader.read(line3);\n    symbolsLineReader.read(line4);\n\n    assertThat(line1.getSymbols()).isEqualTo(RANGE_LABEL_1 + \",1\");\n    assertThat(line2.getSymbols()).isEqualTo(RANGE_LABEL_2 + \",1\");\n    assertThat(line3.getSymbols()).isEqualTo(RANGE_LABEL_1 + \",1\");\n    assertThat(line4.getSymbols()).isEqualTo(RANGE_LABEL_2 + \",1\");\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void read_symbols_with_two_references_on_the_same_line() {\n    List<BatchReport.Symbol> symbols = newArrayList(\n      BatchReport.Symbol.newBuilder()\n        .setDeclaration(BatchReport.TextRange.newBuilder()\n          .setStartLine(1).setEndLine(1).setStartOffset(2).setEndOffset(3)\n          .build())\n        .addReference(BatchReport.TextRange.newBuilder()\n          .setStartLine(2).setEndLine(2).setStartOffset(0).setEndOffset(1)\n          .build())\n        .addReference(BatchReport.TextRange.newBuilder()\n          .setStartLine(2).setEndLine(2).setStartOffset(2).setEndOffset(3)\n          .build())\n        .build());\n\n    SymbolsLineReader symbolsLineReader = new SymbolsLineReader(symbols.iterator());\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n\n    assertThat(line1.getSymbols()).isEqualTo(\"2,3,1\");\n    assertThat(line2.getSymbols()).isEqualTo(\"0,1,1;2,3,1\");\n  }","id":105301,"modified_method":"@Test\n  public void read_symbols_with_two_references_on_the_same_line() {\n    SymbolsLineReader symbolsLineReader = newReader(newSymbol(\n      newSingleLineTextRangeWithExpectedLabel(LINE_1, OFFSET_2, OFFSET_3, RANGE_LABEL_1),\n      newSingleLineTextRangeWithExpectedLabel(LINE_2, OFFSET_0, OFFSET_1, RANGE_LABEL_2),\n      newSingleLineTextRangeWithExpectedLabel(LINE_2, OFFSET_2, OFFSET_3, RANGE_LABEL_3)\n      ));\n\n    symbolsLineReader.read(line1);\n    symbolsLineReader.read(line2);\n\n    assertThat(line1.getSymbols()).isEqualTo(RANGE_LABEL_1 + \",1\");\n    assertThat(line2.getSymbols()).isEqualTo(RANGE_LABEL_2 + \",1;\" + RANGE_LABEL_3 + \",1\");\n  }","commit_id":"c69b3c6c5c3cfe819dd2f3eb4b3c23254647c2f8","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public static Object referenceMacro_GetReferent_2584857295430340569(final IOperationContext operationContext, final ReferenceMacroContext _context) {\n    return SNodeOperations.cast(_context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(_context.getNode(), \"variable\", false), \"parameterFromVar\"), \"jetbrains.mps.baseLanguage.structure.ParameterDeclaration\");\n  }","id":105302,"modified_method":"public static Object referenceMacro_GetReferent_2584857295430340569(final IOperationContext operationContext, final ReferenceMacroContext _context) {\n    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), \"variable\", false), \"name\");\n  }","commit_id":"d58a086ceeb856106767fa0f35f4a26115f9728d","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Object referenceMacro_GetReferent_2584857295430340722(final IOperationContext operationContext, final ReferenceMacroContext _context) {\n    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(_context.getNode(), \"variable\", false)), \"jetbrains.mps.samples.lambdaCalculus.structure.LetExpression\"), \"parameterLetExpr\");\n  }","id":105303,"modified_method":"public static Object referenceMacro_GetReferent_2584857295430340722(final IOperationContext operationContext, final ReferenceMacroContext _context) {\n    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), \"variable\", false), \"name\");\n  }","commit_id":"d58a086ceeb856106767fa0f35f4a26115f9728d","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Object referenceMacro_GetReferent_5142899583592522507(final IOperationContext operationContext, final ReferenceMacroContext _context) {\n    return _context.getOutputNodeByInputNodeAndMappingLabel(SNodeOperations.cast(SNodeOperations.getParent(SLinkOperations.getTarget(_context.getNode(), \"variable\", false)), \"jetbrains.mps.samples.lambdaCalculus.structure.LetExpression\"), \"parameterLetExpr\");\n  }","id":105304,"modified_method":"public static Object referenceMacro_GetReferent_5142899583592522507(final IOperationContext operationContext, final ReferenceMacroContext _context) {\n    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), \"variable\", false), \"name\");\n  }","commit_id":"d58a086ceeb856106767fa0f35f4a26115f9728d","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Object referenceMacro_GetReferent_2167053794906731184(final IOperationContext operationContext, final ReferenceMacroContext _context) {\n    return SNodeOperations.cast(_context.getOutputNodeByInputNodeAndMappingLabel(_context.getNode(), \"parameterFromVar\"), \"jetbrains.mps.baseLanguage.structure.ParameterDeclaration\");\n  }","id":105305,"modified_method":"public static Object referenceMacro_GetReferent_2167053794906731184(final IOperationContext operationContext, final ReferenceMacroContext _context) {\n    return SPropertyOperations.getString(_context.getNode(), \"name\");\n  }","commit_id":"d58a086ceeb856106767fa0f35f4a26115f9728d","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Object referenceMacro_GetReferent_2584857295430340546(final IOperationContext operationContext, final ReferenceMacroContext _context) {\n    return SNodeOperations.cast(_context.getOutputNodeByInputNodeAndMappingLabel(SLinkOperations.getTarget(_context.getNode(), \"variable\", false), \"parameterFromVar\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\");\n  }","id":105306,"modified_method":"public static Object referenceMacro_GetReferent_2584857295430340546(final IOperationContext operationContext, final ReferenceMacroContext _context) {\n    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), \"variable\", false), \"name\");\n  }","commit_id":"d58a086ceeb856106767fa0f35f4a26115f9728d","url":"https://github.com/JetBrains/MPS"},{"original_method":"public CCGoogleMap(String aName, NSDictionary someAssociations,\n\t\t\tWOElement template) {\n\t\tsuper(aName, someAssociations, template);\n\t\t\n\t\t_elementId = (WOAssociation) someAssociations.objectForKey(\"id\");\n\t\t_elementStyle = (WOAssociation) someAssociations.objectForKey(\"style\");\n\t\t_elementClass = (WOAssociation) someAssociations.objectForKey(\"class\");\n\t\t\n\t\t_zoom = (WOAssociation) someAssociations.objectForKey(\"zoom\");\n\t\t_type = (WOAssociation) someAssociations.objectForKey(\"type\");\n\t\t_lat = (WOAssociation) someAssociations.objectForKey(\"lat\");\n\t\t_lng = (WOAssociation) someAssociations.objectForKey(\"lng\");\n\t\t\n\t\tif( (_lat == null )||( _lng == null ) ) {\n\t\t\tthrow new WODynamicElementCreationException(\"Unable to create CCGoogleMap, missing coordinates\");\n\t\t}\n\t\t\n\t}","id":105307,"modified_method":"public CCGoogleMap(String aName, NSDictionary someAssociations,\n\t\t\tWOElement template) {\n\t\tsuper(aName, someAssociations, template);\n\t\t\n\t\t_elementId = (WOAssociation) someAssociations.objectForKey(\"id\");\n\t\t_elementStyle = (WOAssociation) someAssociations.objectForKey(\"style\");\n\t\t_elementClass = (WOAssociation) someAssociations.objectForKey(\"class\");\n\t\t\n\t\t_zoom = (WOAssociation) someAssociations.objectForKey(\"zoom\");\n\t\t_type = (WOAssociation) someAssociations.objectForKey(\"type\");\n\t\t_address = (WOAssociation) someAssociations.objectForKey(\"address\");\n\t\t_lat = (WOAssociation) someAssociations.objectForKey(\"lat\");\n\t\t_lng = (WOAssociation) someAssociations.objectForKey(\"lng\");\n\t\t\n\t\tif( ((_lat == null )||( _lng == null )) && (_address == null)) {\n\t\t\tthrow new WODynamicElementCreationException(\"Unable to create CCGoogleMap, missing coordinates or address\");\n\t\t}\n\t\t\n\t}","commit_id":"3399ecd80754b60503630f83bec730be8c3992b6","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n    public void appendToResponse(WOResponse response, WOContext context) {\n\t\tsuper.appendToResponse(response, context);\n    \tAjaxUtils.addScriptCodeInHead(response, context, \"var in_googleApiKey=\\\"\" +\n    \t\t\tERXProperties.stringForKey(\"ajax.google.maps.V3.apiKey\") + \"\\\"\");\n    \t\n    \tresponse.appendContentString(\"<div \");\n    \t\n    \tif(_elementId != null) {\n    \t\tresponse.appendContentString(\"id=\\\"\" + _elementId.valueInComponent(context.component()) + \"\\\" \");\n    \t}\n    \t\n    \tString classValue = \"in_GoogleMap \";\n    \tif(_elementClass != null) {\n    \t\tclassValue = classValue + (String)_elementClass.valueInComponent(context.component());\n    \t}\n    \tresponse.appendContentString(\"class=\\\"\" + classValue + \"\\\" \");\n    \t\n    \tif(_elementStyle != null) {\n    \t\tresponse.appendContentString(\"style=\\\"\" + _elementStyle.valueInComponent(context.component()) + \"\\\" \");\n    \t}\n    \t\n    \tString zoomValue = \"14\";\n    \tif(_zoom!=null) {\n    \t\tzoomValue = (String) _zoom.valueInComponent(context.component());\n    \t}\n    \tresponse.appendContentString(\"data-zoom=\\\"\" + zoomValue + \"\\\" \");\n    \t\n    \tString mapType = \"ROADMAP\";\n    \tif(_type!=null) {\n    \t\tmapType = (String) _type.valueInComponent(context.component());\n    \t}\n    \t\n    \tresponse.appendContentString(\"data-type=\\\"\" + mapType + \"\\\" \");\n    \tresponse.appendContentString(\"data-lng=\\\"\" + _lng.valueInComponent(context.component()) + \"\\\" \");\n    \tresponse.appendContentString(\"data-lat=\\\"\" + _lat.valueInComponent(context.component()) + \"\\\"\");\n    \t\n    \tresponse.appendContentString(\"><\/div>\");\n    }","id":105308,"modified_method":"@Override\n    public void appendToResponse(WOResponse response, WOContext context) {\n\t\tsuper.appendToResponse(response, context);\n    \tAjaxUtils.addScriptCodeInHead(response, context, \"var in_googleApiKey=\\\"\" +\n    \t\t\tERXProperties.stringForKey(\"ajax.google.maps.V3.apiKey\") + \"\\\"\");\n    \t\n    \tresponse.appendContentString(\"<div \");\n    \t\n    \tif(_elementId != null) {\n    \t\tresponse.appendContentString(\"id=\\\"\" + _elementId.valueInComponent(context.component()) + \"\\\" \");\n    \t}\n    \t\n    \tString classValue = \"in_GoogleMap \";\n    \tif(_elementClass != null) {\n    \t\tclassValue = classValue + (String)_elementClass.valueInComponent(context.component());\n    \t}\n    \tresponse.appendContentString(\"class=\\\"\" + classValue + \"\\\" \");\n    \t\n    \tif(_elementStyle != null) {\n    \t\tresponse.appendContentString(\"style=\\\"\" + _elementStyle.valueInComponent(context.component()) + \"\\\" \");\n    \t}\n    \t\n    \tString zoomValue = \"14\";\n    \tif(_zoom!=null) {\n    \t\tzoomValue = (String) _zoom.valueInComponent(context.component());\n    \t}\n    \tresponse.appendContentString(\"data-zoom=\\\"\" + zoomValue + \"\\\" \");\n    \t\n    \tString mapType = \"ROADMAP\";\n    \tif(_type!=null) {\n    \t\tmapType = (String) _type.valueInComponent(context.component());\n    \t}\n    \t\n    \tresponse.appendContentString(\"data-type=\\\"\" + mapType + \"\\\" \");\n    \t\n    \tif(_address!=null) {\n    \t\tresponse.appendContentString(\"data-address=\\\"\" + _address.valueInComponent(context.component()) + \"\\\" \");\n    \t}\n    \t\n    \tif((_lng!=null) && (_lng!=null)) {\n    \t\tresponse.appendContentString(\"data-lng=\\\"\" + _lng.valueInComponent(context.component()) + \"\\\" \");\n    \t\tresponse.appendContentString(\"data-lat=\\\"\" + _lat.valueInComponent(context.component()) + \"\\\"\");\n    \t}\n    \t\n    \tresponse.appendContentString(\"><\/div>\");\n    }","commit_id":"3399ecd80754b60503630f83bec730be8c3992b6","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Override\n\tpublic void appendToResponse(WOResponse response, WOContext context) {\n\t\t// We need to call these otherwise the method \"addRequiredWebResources\" would not be called\n\t\tsuper.appendToResponse(response, context);\n\t\t\n\t\tresponse.appendContentString(\"<address \");\n    \t\n    \tif(_elementId != null) {\n    \t\tresponse.appendContentString(\"id=\\\"\" + _elementId.valueInComponent(context.component()) + \"\\\" \");\n    \t}\n    \t\n    \tString classValue = \"in_GoogleMapMarker \";\n    \tif(_elementClass != null) {\n    \t\tclassValue = classValue + (String)_elementClass.valueInComponent(context.component());\n    \t}\n    \tresponse.appendContentString(\"class=\\\"\" + classValue + \"\\\" \");\n    \t\n    \tif(_elementStyle != null) {\n    \t\tresponse.appendContentString(\"style=\\\"\" + _elementStyle.valueInComponent(context.component()) + \"\\\" \");\n    \t}\n\n    \tresponse.appendContentString(\"data-in_GoogleMap-id=\\\"\" + _googleMapId.valueInComponent(context.component()) + \"\\\" \");\n    \t\n    \tString draggable = \"false\";\n    \tif(_draggable!=null) {\n    \t\tdraggable = (String) _draggable.valueInComponent(context.component());\n    \t}\n    \t\n    \tresponse.appendContentString(\"data-draggable=\\\"\" + draggable + \"\\\" \");\n    \t\n    \tresponse.appendContentString(\"data-lng=\\\"\" + _lng.valueInComponent(context.component()) + \"\\\" \");\n    \tresponse.appendContentString(\"data-lat=\\\"\" + _lat.valueInComponent(context.component()) + \"\\\"\");\n    \t\n    \tresponse.appendContentString(\">\");\n    \t\n    \t_children.appendToResponse(response, context);\n    \t\n    \tresponse.appendContentString(\"<\/address>\");\n\t\t\n\t}","id":105309,"modified_method":"@Override\n\tpublic void appendToResponse(WOResponse response, WOContext context) {\n\t\t// We need to call these otherwise the method \"addRequiredWebResources\" would not be called\n\t\tsuper.appendToResponse(response, context);\n\t\t\n\t\tresponse.appendContentString(\"<address \");\n    \t\n    \tif(_elementId != null) {\n    \t\tresponse.appendContentString(\"id=\\\"\" + _elementId.valueInComponent(context.component()) + \"\\\" \");\n    \t}\n    \t\n    \tString classValue = \"in_GoogleMapMarker \";\n    \tif(_elementClass != null) {\n    \t\tclassValue = classValue + (String)_elementClass.valueInComponent(context.component());\n    \t}\n    \tresponse.appendContentString(\"class=\\\"\" + classValue + \"\\\" \");\n    \t\n    \tif(_elementStyle != null) {\n    \t\tresponse.appendContentString(\"style=\\\"\" + _elementStyle.valueInComponent(context.component()) + \"\\\" \");\n    \t}\n\n    \tresponse.appendContentString(\"data-in_GoogleMap-id=\\\"\" + _googleMapId.valueInComponent(context.component()) + \"\\\" \");\n    \t\n    \tString draggable = \"false\";\n    \tif(_draggable!=null) {\n    \t\tdraggable = (String) _draggable.valueInComponent(context.component());\n    \t}\n    \t\n    \tresponse.appendContentString(\"data-draggable=\\\"\" + draggable + \"\\\" \");\n    \t\n    \tif (_address!=null) {\n\t\t\tresponse.appendContentString(\"data-address=\\\"\"\n\t\t\t\t\t+ _address.valueInComponent(context.component()) + \"\\\" \");\n\t\t}\n    \t\n    \tif((_lng!=null) && (_lng!=null)) {\n    \t\tresponse.appendContentString(\"data-lng=\\\"\" + _lng.valueInComponent(context.component()) + \"\\\" \");\n    \t\tresponse.appendContentString(\"data-lat=\\\"\" + _lat.valueInComponent(context.component()) + \"\\\"\");\n    \t}\n    \t\n    \tresponse.appendContentString(\">\");\n    \t\n    \tif(_children!=null) {\n    \t\t_children.appendToResponse(response, context);\n    \t}\n    \t\n    \tresponse.appendContentString(\"<\/address>\");\n\t\t\n\t}","commit_id":"3399ecd80754b60503630f83bec730be8c3992b6","url":"https://github.com/wocommunity/wonder"},{"original_method":"public CCGoogleMapMarker(String name,\n\t\t\tNSDictionary<String, WOAssociation> someAssociations, WOElement children) {\n\t\tsuper(name, someAssociations, children);\n\t\t\n\t\t_elementId = (WOAssociation) someAssociations.objectForKey(\"id\");\n\t\t_elementStyle = (WOAssociation) someAssociations.objectForKey(\"style\");\n\t\t_elementClass = (WOAssociation) someAssociations.objectForKey(\"class\");\n\t\t\n\t\t_googleMapId = (WOAssociation) someAssociations.objectForKey(\"googleMapId\");\n\t\t_draggable = (WOAssociation) someAssociations.objectForKey(\"draggable\");\n\t\t_lat = (WOAssociation) someAssociations.objectForKey(\"lat\");\n\t\t_lng = (WOAssociation) someAssociations.objectForKey(\"lng\");\n\t\t\n\t\t_children = children;\n\t}","id":105310,"modified_method":"public CCGoogleMapMarker(String name,\n\t\t\tNSDictionary<String, WOAssociation> someAssociations, WOElement children) {\n\t\tsuper(name, someAssociations, children);\n\t\t\n\t\t_elementId = (WOAssociation) someAssociations.objectForKey(\"id\");\n\t\t_elementStyle = (WOAssociation) someAssociations.objectForKey(\"style\");\n\t\t_elementClass = (WOAssociation) someAssociations.objectForKey(\"class\");\n\t\t\n\t\t_googleMapId = (WOAssociation) someAssociations.objectForKey(\"googleMapId\");\n\t\t_draggable = (WOAssociation) someAssociations.objectForKey(\"draggable\");\n\t\t_address = (WOAssociation) someAssociations.objectForKey(\"address\");\n\t\t_lat = (WOAssociation) someAssociations.objectForKey(\"lat\");\n\t\t_lng = (WOAssociation) someAssociations.objectForKey(\"lng\");\n\t\t\n\t\t_children = children;\n\t}","commit_id":"3399ecd80754b60503630f83bec730be8c3992b6","url":"https://github.com/wocommunity/wonder"},{"original_method":"public void appendToResponse(WOResponse response, WOContext context) {\n      WOComponent component = context.component();\n\n      boolean disabled = booleanValueForBinding(\"disabled\", false, component);\n      String elementName = (String)valueForBinding(\"elementName\", \"a\", component);\n      boolean isATag = \"a\".equalsIgnoreCase(elementName);\n      boolean renderTags = (!disabled || !isATag);\n      if (renderTags) {\n\t      response.appendContentString(\"<\");\n\t      response.appendContentString(elementName);\n\t      response.appendContentString(\" \");\n\t      if (isATag) {\n\t        appendTagAttributeToResponse(response, \"href\", \"javascript:void(0)\");\n\t      }\n\t      appendTagAttributeToResponse(response, \"title\", valueForBinding(\"title\", component ));\n\t      appendTagAttributeToResponse(response, \"value\", valueForBinding(\"value\", component ));\n\t      appendTagAttributeToResponse(response, \"class\", valueForBinding(\"class\", component ));\n\t      appendTagAttributeToResponse(response, \"style\", valueForBinding(\"style\", component ));\n\t      appendTagAttributeToResponse(response, \"id\", valueForBinding(\"id\", component ));\n\t      if (!disabled) {\n\t    \t  appendTagAttributeToResponse(response, \"onclick\", onClick(context));\n\t      }\n\t      response.appendContentString(\">\");\n      }\n      appendChildrenToResponse(response, context);\n      if (renderTags) {\n\t      response.appendContentString(\"<\/\");\n\t      response.appendContentString(elementName);\n\t      response.appendContentString(\">\");\n      }\n      super.appendToResponse(response, context);\n  }","id":105311,"modified_method":"public void appendToResponse(WOResponse response, WOContext context) {\n      WOComponent component = context.component();\n\n      boolean disabled = booleanValueForBinding(\"disabled\", false, component);\n      String elementName = (String)valueForBinding(\"elementName\", \"a\", component);\n      String functionName = (String)valueForBinding(\"functionName\", null, component);\n      boolean isATag = \"a\".equalsIgnoreCase(elementName);\n      boolean renderTags = ((!disabled || !isATag) && functionName == null);\n      if (renderTags) {\n\t      response.appendContentString(\"<\");\n\t      response.appendContentString(elementName);\n\t      response.appendContentString(\" \");\n\t      if (isATag) {\n\t        appendTagAttributeToResponse(response, \"href\", \"javascript:void(0)\");\n\t      }\n\t      appendTagAttributeToResponse(response, \"title\", valueForBinding(\"title\", component ));\n\t      appendTagAttributeToResponse(response, \"value\", valueForBinding(\"value\", component ));\n\t      appendTagAttributeToResponse(response, \"class\", valueForBinding(\"class\", component ));\n\t      appendTagAttributeToResponse(response, \"style\", valueForBinding(\"style\", component ));\n\t      appendTagAttributeToResponse(response, \"id\", valueForBinding(\"id\", component ));\n\t      if (!disabled) {\n\t    \t  appendTagAttributeToResponse(response, \"onclick\", onClick(context));\n\t      }\n\t      response.appendContentString(\">\");\n      }\n      if (functionName != null) {\n      \tAjaxUtils.appendScriptHeader(response);\n    \tresponse.appendContentString(functionName + \" = function() { \" + onClick(context) + \" }\\n\");\n    \tAjaxUtils.appendScriptFooter(response);\n      }\n      appendChildrenToResponse(response, context);\n      if (renderTags) {\n\t      response.appendContentString(\"<\/\");\n\t      response.appendContentString(elementName);\n\t      response.appendContentString(\">\");\n      }\n      super.appendToResponse(response, context);\n  }","commit_id":"570cba716b5a162e817f390ced0a9905e11dbb55","url":"https://github.com/wocommunity/wonder"},{"original_method":"public void appendToResponse(WOResponse response, WOContext context) {\n    WOComponent component = context.component();\n\n    boolean showButton = booleanValueForBinding(\"button\", true, component);\n    String formName = (String)valueForBinding(\"formName\", component);\n    String formReference;\n    if (!showButton) {\n      formName = ERXWOForm.formName(context, null);\n      if (formName == null) {\n        throw new WODynamicElementCreationException(\"If button = false, the containing form must have an explicit name.\");\n      }\n    }\n    if (formName == null) {\n      formReference = \"this.form\";\n    }\n    else {\n      formReference = \"document.\" + formName;\n    }\n    if (showButton) {\n      response.appendContentString(\"<input \");\n      appendTagAttributeToResponse(response, \"type\", \"button\");\n      String name = nameInContext(context, component);\n      appendTagAttributeToResponse(response, \"name\", name);\n      appendTagAttributeToResponse(response, \"value\", valueForBinding(\"value\", component));\n    }\n    else {\n      response.appendContentString(\"<a href = \\\"javascript:void(0)\\\" \");\n    }\n    appendTagAttributeToResponse(response, \"class\", valueForBinding(\"class\", component));\n    appendTagAttributeToResponse(response, \"style\", valueForBinding(\"style\", component));\n    appendTagAttributeToResponse(response, \"id\", valueForBinding(\"id\", component));\n    if (disabledInComponent(component)) {\n      appendTagAttributeToResponse(response, \"disabled\", \"disabled\");\n    }\n    StringBuffer sb = new StringBuffer();\n    sb.append(\"new Ajax.Request(\" + formReference + \".action,\");\n    NSDictionary options = createAjaxOptions(component, formReference);\n    AjaxOptions.appendToBuffer(options, sb, context);\n    sb.append(\")\");\n    String onClick = (String) valueForBinding(\"onClick\", component);\n    if (onClick != null) {\n      sb.append(\";\");\n      sb.append(onClick);\n    }\n    appendTagAttributeToResponse(response, \"onclick\", sb.toString());\n    if (showButton) {\n      response.appendContentString(\" />\");\n    }\n    else {\n      response.appendContentString(\">\");\n      if (hasChildrenElements()) {\n        appendChildrenToResponse(response, context);\n      }\n      response.appendContentString(\"<\/a>\");\n    }\n    super.appendToResponse(response, context);\n  }","id":105312,"modified_method":"public void appendToResponse(WOResponse response, WOContext context) {\n    WOComponent component = context.component();\n\n    String functionName = (String)valueForBinding(\"functionName\", null, component);\n    String formName = (String)valueForBinding(\"formName\", component);\n    boolean showUI = (functionName == null);\n    boolean showButton = showUI && booleanValueForBinding(\"button\", true, component);\n    String formReference;\n    if (!showButton) {\n      formName = ERXWOForm.formName(context, null);\n      if (formName == null) {\n        throw new WODynamicElementCreationException(\"If button = false, the containing form must have an explicit name.\");\n      }\n    }\n    if (formName == null) {\n      formReference = \"this.form\";\n    }\n    else {\n      formReference = \"document.\" + formName;\n    }\n    if (showUI) {\n\t    if (showButton) {\n\t      response.appendContentString(\"<input \");\n\t      appendTagAttributeToResponse(response, \"type\", \"button\");\n\t      String name = nameInContext(context, component);\n\t      appendTagAttributeToResponse(response, \"name\", name);\n\t      appendTagAttributeToResponse(response, \"value\", valueForBinding(\"value\", component));\n\t    }\n\t    else {\n\t      response.appendContentString(\"<a href = \\\"javascript:void(0)\\\" \");\n\t    }\n\t    appendTagAttributeToResponse(response, \"class\", valueForBinding(\"class\", component));\n\t    appendTagAttributeToResponse(response, \"style\", valueForBinding(\"style\", component));\n\t    appendTagAttributeToResponse(response, \"id\", valueForBinding(\"id\", component));\n\t    if (disabledInComponent(component)) {\n\t      appendTagAttributeToResponse(response, \"disabled\", \"disabled\");\n\t    }\n    }\n    StringBuffer onClickBuffer = new StringBuffer();\n    onClickBuffer.append(\"new Ajax.Request(\" + formReference + \".action,\");\n    NSDictionary options = createAjaxOptions(component, formReference);\n    AjaxOptions.appendToBuffer(options, onClickBuffer, context);\n    onClickBuffer.append(\")\");\n    String onClick = (String) valueForBinding(\"onClick\", component);\n    if (onClick != null) {\n      onClickBuffer.append(\";\");\n      onClickBuffer.append(onClick);\n    }\n    if (showUI) {\n\t    appendTagAttributeToResponse(response, \"onclick\", onClickBuffer.toString());\n\t    if (showButton) {\n\t      response.appendContentString(\" />\");\n\t    }\n\t    else {\n\t      response.appendContentString(\">\");\n\t      if (hasChildrenElements()) {\n\t        appendChildrenToResponse(response, context);\n\t      }\n\t      response.appendContentString(\"<\/a>\");\n\t    }\n    }\n    if (!showUI) {\n      \tAjaxUtils.appendScriptHeader(response);\n    \tresponse.appendContentString(functionName + \" = function() { \" + onClickBuffer + \" }\\n\");\n    \tAjaxUtils.appendScriptFooter(response);\n    }\n\n    super.appendToResponse(response, context);\n  }","commit_id":"570cba716b5a162e817f390ced0a9905e11dbb55","url":"https://github.com/wocommunity/wonder"},{"original_method":"public void appendToResponse(WOResponse response, WOContext context) {\n    WOComponent component = context.component();\n    boolean disabled = booleanValueForBinding(\"disabled\", false, component);\n    Object stringValue = valueForBinding(\"string\", component);\n    String elementName = (String)valueForBinding(\"elementName\", \"a\", component);\n    boolean isATag = \"a\".equalsIgnoreCase(elementName);\n    boolean renderTags = (!disabled || !isATag);\n    if (renderTags) {\n      response.appendContentString(\"<\");\n      response.appendContentString(elementName);\n      response.appendContentString(\" \");\n      if (isATag) {\n    \t  appendTagAttributeToResponse(response, \"href\", \"javascript:void(0);\");\n      }\n      appendTagAttributeToResponse(response, \"onclick\", onClick(context));\n      appendTagAttributeToResponse(response, \"title\", valueForBinding(\"title\", component));\n      appendTagAttributeToResponse(response, \"value\", valueForBinding(\"value\", component));\n      appendTagAttributeToResponse(response, \"class\", valueForBinding(\"class\", component));\n      appendTagAttributeToResponse(response, \"style\", valueForBinding(\"style\", component));\n      appendTagAttributeToResponse(response, \"id\", valueForBinding(\"id\", component));\n      // appendTagAttributeToResponse(response, \"onclick\", onClick(context));\n      response.appendContentString(\">\");\n    }\n    if (stringValue != null) {\n      response.appendContentHTMLString(stringValue.toString());\n    }\n    appendChildrenToResponse(response, context);\n    if (renderTags) {\n      response.appendContentString(\"<\/\");\n      response.appendContentString(elementName);\n      response.appendContentString(\">\");\n    }\n    super.appendToResponse(response, context);\n  }","id":105313,"modified_method":"public void appendToResponse(WOResponse response, WOContext context) {\n    WOComponent component = context.component();\n    boolean disabled = booleanValueForBinding(\"disabled\", false, component);\n    Object stringValue = valueForBinding(\"string\", component);\n    String functionName = (String)valueForBinding(\"functionName\", component);\n    if (functionName == null) {\n\t    String elementName = (String)valueForBinding(\"elementName\", \"a\", component);\n\t    boolean isATag = \"a\".equalsIgnoreCase(elementName);\n\t    boolean renderTags = (!disabled || !isATag);\n\t    if (renderTags) {\n\t      response.appendContentString(\"<\");\n\t      response.appendContentString(elementName);\n\t      response.appendContentString(\" \");\n\t      if (isATag) {\n\t    \t  appendTagAttributeToResponse(response, \"href\", \"javascript:void(0);\");\n\t      }\n\t      appendTagAttributeToResponse(response, \"onclick\", onClick(context));\n\t      appendTagAttributeToResponse(response, \"title\", valueForBinding(\"title\", component));\n\t      appendTagAttributeToResponse(response, \"value\", valueForBinding(\"value\", component));\n\t      appendTagAttributeToResponse(response, \"class\", valueForBinding(\"class\", component));\n\t      appendTagAttributeToResponse(response, \"style\", valueForBinding(\"style\", component));\n\t      appendTagAttributeToResponse(response, \"id\", valueForBinding(\"id\", component));\n\t      // appendTagAttributeToResponse(response, \"onclick\", onClick(context));\n\t      response.appendContentString(\">\");\n\t    }\n\t    if (stringValue != null) {\n\t      response.appendContentHTMLString(stringValue.toString());\n\t    }\n\t    appendChildrenToResponse(response, context);\n\t    if (renderTags) {\n\t      response.appendContentString(\"<\/\");\n\t      response.appendContentString(elementName);\n\t      response.appendContentString(\">\");\n\t    }\n    }\n    else {\n    \tAjaxUtils.appendScriptHeader(response);\n    \tresponse.appendContentString(functionName + \" = function() { \" + onClick(context) + \" }\\n\");\n    \tAjaxUtils.appendScriptFooter(response);\n    }\n    super.appendToResponse(response, context);\n  }","commit_id":"570cba716b5a162e817f390ced0a9905e11dbb55","url":"https://github.com/wocommunity/wonder"},{"original_method":"public FilterCard(FilterCard filter) {\n        super(filter);\n        this.extraPredicates = new ArrayList<ObjectPlayerPredicate<ObjectPlayer<Permanent>>>(filter.extraPredicates);\n    }","id":105314,"modified_method":"public FilterCard(FilterCard filter) {\n        super(filter);\n        this.extraPredicates = new ArrayList<ObjectPlayerPredicate<ObjectPlayer<Card>>>(filter.extraPredicates);\n    }","commit_id":"6c546220a3f9cd72844195f235554433683abdaf","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean canTarget(UUID id, Ability source, Game game) {\n        Card card = game.getCard(id);\n        if (card != null && game.getState().getZone(card.getId()) == Zone.GRAVEYARD) {\n            if (game.getPlayer(source.getControllerId()).getGraveyard().contains(id)) {\n                return filter.match(card, game);\n            }\n        }\n        return false;\n    }","id":105315,"modified_method":"@Override\n    public boolean canTarget(UUID id, Ability source, Game game) {\n        Card card = game.getCard(id);\n        if (card != null && game.getState().getZone(card.getId()) == Zone.GRAVEYARD) {\n            if (game.getPlayer(source.getControllerId()).getGraveyard().contains(id)) {\n                return filter.match(card, source.getSourceId(), source.getControllerId(), game);\n            }\n        }\n        return false;\n    }","commit_id":"6c546220a3f9cd72844195f235554433683abdaf","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean canChoose(UUID sourceId, UUID sourceControllerId, Game game) {\n        return canChoose(sourceControllerId, game);\n    }","id":105316,"modified_method":"@Override\n    public boolean canChoose(UUID sourceId, UUID sourceControllerId, Game game) {\n        if (game.getPlayer(sourceControllerId).getGraveyard().count(filter, sourceId, sourceControllerId, game) >= this.minNumberOfTargets) {\n            return true;\n        }\n        return false;\n    }","commit_id":"6c546220a3f9cd72844195f235554433683abdaf","url":"https://github.com/magefree/mage"},{"original_method":"@NotNull\n  public final synchronized Dimension computePreferredSize(final boolean mainTextOnly) {\n    // Calculate width\n    int width = myIpad.left;\n\n    if (myIcon != null) {\n      width += myIcon.getIconWidth() + myIconTextGap;\n    }\n\n    final Insets borderInsets = myBorder != null ? myBorder.getBorderInsets(this) : new Insets(0,0,0,0);\n    width += borderInsets.left;\n\n    Font font = getFont();\n    if (font == null) {\n      font = UIUtil.getLabelFont();\n    }\n\n    LOG.assertTrue(font != null);\n\n    width += computeTextWidth(font, mainTextOnly);\n    width += myIpad.right + borderInsets.right;\n\n    // Calculate height\n    int height = myIpad.top + myIpad.bottom;\n\n    final FontMetrics metrics = getFontMetrics(font);\n    int textHeight = metrics.getHeight();\n    textHeight += borderInsets.top + borderInsets.bottom;\n\n    if (myIcon != null) {\n      height += Math.max(myIcon.getIconHeight(), textHeight);\n    }\n    else {\n      height += textHeight;\n    }\n\n    // Take into account that the component itself can have a border\n    final Insets insets = getInsets();\n    if (insets != null) {\n      width += insets.left + insets.right;\n      height += insets.top + insets.bottom;\n    }\n\n    if (isOracleRetina) {\n      width++; //todo[kb] remove when IDEA-108760 will be fixed\n    }\n\n    return new Dimension(width, height);\n  }","id":105317,"modified_method":"@NotNull\n  public final synchronized Dimension computePreferredSize(final boolean mainTextOnly) {\n    // Calculate width\n    int width = myIpad.left;\n\n    if (myIcon != null) {\n      width += myIcon.getIconWidth() + myIconTextGap;\n    }\n\n    final Insets borderInsets = myBorder != null ? myBorder.getBorderInsets(this) : new Insets(0,0,0,0);\n    width += borderInsets.left;\n\n    Font font = getFont();\n    if (font == null) {\n      font = UIUtil.getLabelFont();\n    }\n\n    LOG.assertTrue(font != null);\n\n    width += computeTextWidth(font, mainTextOnly);\n    width += myIpad.right + borderInsets.right;\n\n    // Calculate height\n    int height = myIpad.top + myIpad.bottom;\n\n    final FontMetrics metrics = getFontMetrics(font);\n    int textHeight = metrics.getHeight();\n    textHeight += borderInsets.top + borderInsets.bottom;\n\n    if (myIcon != null) {\n      height += Math.max(myIcon.getIconHeight(), textHeight);\n    }\n    else {\n      height += textHeight;\n    }\n\n    // Take into account that the component itself can have a border\n    final Insets insets = getInsets();\n    if (insets != null) {\n      width += insets.left + insets.right;\n      height += insets.top + insets.bottom;\n    }\n\n    return new Dimension(width, height);\n  }","commit_id":"ecdba0ece0901953586b32316f6e433462e4b247","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private int computeTextWidth(@NotNull Font font, final boolean mainTextOnly) {\n    int result = 0;\n    int baseSize = font.getSize();\n    boolean wasSmaller = false;\n    for (int i = 0; i < myAttributes.size(); i++) {\n      SimpleTextAttributes attributes = myAttributes.get(i);\n      boolean isSmaller = attributes.isSmaller();\n      if (font.getStyle() != attributes.getFontStyle() || isSmaller != wasSmaller) { // derive font only if it is necessary\n        font = font.deriveFont(attributes.getFontStyle(), isSmaller ? UIUtil.getFontSize(UIUtil.FontSize.SMALL) : baseSize);\n      }\n      wasSmaller = isSmaller;\n      final String text = myFragments.get(i);\n      result += isOracleRetina ? GraphicsUtil.stringWidth(text, font) : getFontMetrics(font).stringWidth(text);\n\n      final int fixedWidth = myFixedWidths.get(i);\n      if (fixedWidth > 0 && result < fixedWidth) {\n        result = fixedWidth;\n      }\n      if (mainTextOnly && myMainTextLastIndex >= 0 && i == myMainTextLastIndex) break;\n    }\n    return result;\n  }","id":105318,"modified_method":"private int computeTextWidth(@NotNull Font font, final boolean mainTextOnly) {\n    int result = 0;\n    int baseSize = font.getSize();\n    boolean wasSmaller = false;\n    for (int i = 0; i < myAttributes.size(); i++) {\n      SimpleTextAttributes attributes = myAttributes.get(i);\n      boolean isSmaller = attributes.isSmaller();\n      if (font.getStyle() != attributes.getFontStyle() || isSmaller != wasSmaller) { // derive font only if it is necessary\n        font = font.deriveFont(attributes.getFontStyle(), isSmaller ? UIUtil.getFontSize(UIUtil.FontSize.SMALL) : baseSize);\n      }\n      wasSmaller = isSmaller;\n      final String text = myFragments.get(i);\n      result += getFontMetrics(font).stringWidth(text);\n\n      final int fixedWidth = myFixedWidths.get(i);\n      if (fixedWidth > 0 && result < fixedWidth) {\n        result = fixedWidth;\n      }\n      if (mainTextOnly && myMainTextLastIndex >= 0 && i == myMainTextLastIndex) break;\n    }\n    return result;\n  }","commit_id":"ecdba0ece0901953586b32316f6e433462e4b247","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) {\n    // If there is no icon, then we have to add left internal padding\n    if (offset == 0) {\n      offset = myIpad.left;\n    }\n\n    int textStart = offset;\n    if (myBorder != null) {\n      offset += myBorder.getBorderInsets(this).left;\n    }\n\n    final List<Object[]> searchMatches = new ArrayList<Object[]>();\n\n    UIUtil.applyRenderingHints(g);\n    applyAdditionalHints(g);\n    final Font ownFont = getFont();\n    if (ownFont != null) {\n      offset += computeTextAlignShift(ownFont);\n    }\n    int baseSize = ownFont != null ? ownFont.getSize() : g.getFont().getSize();\n    boolean wasSmaller = false;\n    for (int i = 0; i < myFragments.size(); i++) {\n      final SimpleTextAttributes attributes = myAttributes.get(i);\n\n      Font font = g.getFont();\n      boolean isSmaller = attributes.isSmaller();\n      if (font.getStyle() != attributes.getFontStyle() || isSmaller != wasSmaller) { // derive font only if it is necessary\n        font = font.deriveFont(attributes.getFontStyle(), isSmaller ? UIUtil.getFontSize(UIUtil.FontSize.SMALL) : baseSize);\n      }\n      wasSmaller = isSmaller;\n\n      g.setFont(font);\n      final FontMetrics metrics = g.getFontMetrics(font);\n\n      final String fragment = myFragments.get(i);\n      final int fragmentWidth = isOracleRetina ? GraphicsUtil.stringWidth(fragment, font) : metrics.stringWidth(fragment);\n\n      final Color bgColor = attributes.isSearchMatch() ? null : attributes.getBgColor();\n      if ((attributes.isOpaque() || isOpaque()) && bgColor != null) {\n        g.setColor(bgColor);\n        g.fillRect(offset, 0, fragmentWidth, getHeight());\n      }\n\n      Color color = attributes.getFgColor();\n      if (color == null) { // in case if color is not defined we have to get foreground color from Swing hierarchy\n        color = getForeground();\n      }\n      if (!isEnabled()) {\n        color = UIUtil.getInactiveTextColor();\n      }\n      g.setColor(color);\n\n      final int textBaseline = getTextBaseLine(metrics, getHeight());\n\n      if (!attributes.isSearchMatch()) {\n        if (shouldDrawMacShadow()) {\n          g.setColor(SHADOW_COLOR);\n          g.drawString(fragment, offset, textBaseline + 1);\n        }\n\n        if (shouldDrawDimmed()) {\n          color = ColorUtil.dimmer(color);\n        }\n\n        g.setColor(color);\n        g.drawString(fragment, offset, textBaseline);\n      }\n\n      // 1. Strikeout effect\n      if (attributes.isStrikeout()) {\n        final int strikeOutAt = textBaseline + (metrics.getDescent() - metrics.getAscent()) / 2;\n        UIUtil.drawLine(g, offset, strikeOutAt, offset + fragmentWidth, strikeOutAt);\n      }\n      // 2. Waved effect\n      if (attributes.isWaved()) {\n        if (attributes.getWaveColor() != null) {\n          g.setColor(attributes.getWaveColor());\n        }\n        final int wavedAt = textBaseline + 1;\n        for (int x = offset; x <= offset + fragmentWidth; x += 4) {\n          UIUtil.drawLine(g, x, wavedAt, x + 2, wavedAt + 2);\n          UIUtil.drawLine(g, x + 3, wavedAt + 1, x + 4, wavedAt);\n        }\n      }\n      // 3. Underline\n      if (attributes.isUnderline()) {\n        final int underlineAt = textBaseline + 1;\n        UIUtil.drawLine(g, offset, underlineAt, offset + fragmentWidth, underlineAt);\n      }\n      // 4. Bold Dotted Line\n      if (attributes.isBoldDottedLine()) {\n        final int dottedAt = SystemInfo.isMac ? textBaseline : textBaseline + 1;\n        final Color lineColor = attributes.getWaveColor();\n        UIUtil.drawBoldDottedLine(g, offset, offset + fragmentWidth, dottedAt, bgColor, lineColor, isOpaque());\n      }\n\n      if (attributes.isSearchMatch()) {\n        searchMatches.add(new Object[] {offset, offset + fragmentWidth, textBaseline, fragment, g.getFont()});\n      }\n\n      final int fixedWidth = myFixedWidths.get(i);\n      if (fixedWidth > 0 && fragmentWidth < fixedWidth) {\n        offset = fixedWidth;\n      } else {\n        offset += fragmentWidth;\n      }\n    }\n\n    // Paint focus border around the text and icon (if necessary)\n    if (myPaintFocusBorder && myBorder != null) {\n      if (focusAroundIcon) {\n        myBorder.paintBorder(this, g, 0, 0, getWidth(), getHeight());\n      } else {\n        myBorder.paintBorder(this, g, textStart, 0, getWidth() - textStart, getHeight());\n      }\n    }\n\n    // draw search matches after all\n    for (final Object[] info: searchMatches) {\n      UIUtil.drawSearchMatch(g, (Integer) info[0], (Integer) info[1], getHeight());\n      g.setFont((Font) info[4]);\n\n      if (shouldDrawMacShadow()) {\n        g.setColor(SHADOW_COLOR);\n        g.drawString((String) info[3], (Integer) info[0], (Integer) info[2] + 1);\n      }\n\n      g.setColor(new JBColor(Gray._50, Gray._0));\n      g.drawString((String) info[3], (Integer) info[0], (Integer) info[2]);\n    }\n    return offset;\n  }","id":105319,"modified_method":"protected int doPaintText(Graphics2D g, int offset, boolean focusAroundIcon) {\n    // If there is no icon, then we have to add left internal padding\n    if (offset == 0) {\n      offset = myIpad.left;\n    }\n\n    int textStart = offset;\n    if (myBorder != null) {\n      offset += myBorder.getBorderInsets(this).left;\n    }\n\n    final List<Object[]> searchMatches = new ArrayList<Object[]>();\n\n    UIUtil.applyRenderingHints(g);\n    applyAdditionalHints(g);\n    final Font ownFont = getFont();\n    if (ownFont != null) {\n      offset += computeTextAlignShift(ownFont);\n    }\n    int baseSize = ownFont != null ? ownFont.getSize() : g.getFont().getSize();\n    boolean wasSmaller = false;\n    for (int i = 0; i < myFragments.size(); i++) {\n      final SimpleTextAttributes attributes = myAttributes.get(i);\n\n      Font font = g.getFont();\n      boolean isSmaller = attributes.isSmaller();\n      if (font.getStyle() != attributes.getFontStyle() || isSmaller != wasSmaller) { // derive font only if it is necessary\n        font = font.deriveFont(attributes.getFontStyle(), isSmaller ? UIUtil.getFontSize(UIUtil.FontSize.SMALL) : baseSize);\n      }\n      wasSmaller = isSmaller;\n\n      g.setFont(font);\n      final FontMetrics metrics = g.getFontMetrics(font);\n\n      final String fragment = myFragments.get(i);\n      final int fragmentWidth = metrics.stringWidth(fragment);\n\n      final Color bgColor = attributes.isSearchMatch() ? null : attributes.getBgColor();\n      if ((attributes.isOpaque() || isOpaque()) && bgColor != null) {\n        g.setColor(bgColor);\n        g.fillRect(offset, 0, fragmentWidth, getHeight());\n      }\n\n      Color color = attributes.getFgColor();\n      if (color == null) { // in case if color is not defined we have to get foreground color from Swing hierarchy\n        color = getForeground();\n      }\n      if (!isEnabled()) {\n        color = UIUtil.getInactiveTextColor();\n      }\n      g.setColor(color);\n\n      final int textBaseline = getTextBaseLine(metrics, getHeight());\n\n      if (!attributes.isSearchMatch()) {\n        if (shouldDrawMacShadow()) {\n          g.setColor(SHADOW_COLOR);\n          g.drawString(fragment, offset, textBaseline + 1);\n        }\n\n        if (shouldDrawDimmed()) {\n          color = ColorUtil.dimmer(color);\n        }\n\n        g.setColor(color);\n        g.drawString(fragment, offset, textBaseline);\n      }\n\n      // 1. Strikeout effect\n      if (attributes.isStrikeout()) {\n        final int strikeOutAt = textBaseline + (metrics.getDescent() - metrics.getAscent()) / 2;\n        UIUtil.drawLine(g, offset, strikeOutAt, offset + fragmentWidth, strikeOutAt);\n      }\n      // 2. Waved effect\n      if (attributes.isWaved()) {\n        if (attributes.getWaveColor() != null) {\n          g.setColor(attributes.getWaveColor());\n        }\n        final int wavedAt = textBaseline + 1;\n        for (int x = offset; x <= offset + fragmentWidth; x += 4) {\n          UIUtil.drawLine(g, x, wavedAt, x + 2, wavedAt + 2);\n          UIUtil.drawLine(g, x + 3, wavedAt + 1, x + 4, wavedAt);\n        }\n      }\n      // 3. Underline\n      if (attributes.isUnderline()) {\n        final int underlineAt = textBaseline + 1;\n        UIUtil.drawLine(g, offset, underlineAt, offset + fragmentWidth, underlineAt);\n      }\n      // 4. Bold Dotted Line\n      if (attributes.isBoldDottedLine()) {\n        final int dottedAt = SystemInfo.isMac ? textBaseline : textBaseline + 1;\n        final Color lineColor = attributes.getWaveColor();\n        UIUtil.drawBoldDottedLine(g, offset, offset + fragmentWidth, dottedAt, bgColor, lineColor, isOpaque());\n      }\n\n      if (attributes.isSearchMatch()) {\n        searchMatches.add(new Object[] {offset, offset + fragmentWidth, textBaseline, fragment, g.getFont()});\n      }\n\n      final int fixedWidth = myFixedWidths.get(i);\n      if (fixedWidth > 0 && fragmentWidth < fixedWidth) {\n        offset = fixedWidth;\n      } else {\n        offset += fragmentWidth;\n      }\n    }\n\n    // Paint focus border around the text and icon (if necessary)\n    if (myPaintFocusBorder && myBorder != null) {\n      if (focusAroundIcon) {\n        myBorder.paintBorder(this, g, 0, 0, getWidth(), getHeight());\n      } else {\n        myBorder.paintBorder(this, g, textStart, 0, getWidth() - textStart, getHeight());\n      }\n    }\n\n    // draw search matches after all\n    for (final Object[] info: searchMatches) {\n      UIUtil.drawSearchMatch(g, (Integer) info[0], (Integer) info[1], getHeight());\n      g.setFont((Font) info[4]);\n\n      if (shouldDrawMacShadow()) {\n        g.setColor(SHADOW_COLOR);\n        g.drawString((String) info[3], (Integer) info[0], (Integer) info[2] + 1);\n      }\n\n      g.setColor(new JBColor(Gray._50, Gray._0));\n      g.drawString((String) info[3], (Integer) info[0], (Integer) info[2]);\n    }\n    return offset;\n  }","commit_id":"ecdba0ece0901953586b32316f6e433462e4b247","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Returns the index of text fragment at the specified X offset.\n   *\n   * @param x the offset\n   * @return the index of the fragment, {@link #FRAGMENT_ICON} if the icon is at the offset, or -1 if nothing is there.\n   */\n  public int findFragmentAt(int x) {\n    int curX = myIpad.left;\n    if (myIcon != null && !myIconOnTheRight) {\n      final int iconRight = myIcon.getIconWidth() + myIconTextGap;\n      if (x < iconRight) {\n        return FRAGMENT_ICON;\n      }\n      curX += iconRight;\n    }\n\n    Font font = getFont();\n    if (font == null) {\n      font = UIUtil.getLabelFont();\n    }\n\n    int baseSize = font.getSize();\n    boolean wasSmaller = false;\n    for (int i = 0; i < myAttributes.size(); i++) {\n      SimpleTextAttributes attributes = myAttributes.get(i);\n      boolean isSmaller = attributes.isSmaller();\n      if (font.getStyle() != attributes.getFontStyle() || isSmaller != wasSmaller) { // derive font only if it is necessary\n        font = font.deriveFont(attributes.getFontStyle(), isSmaller ? UIUtil.getFontSize(UIUtil.FontSize.SMALL) : baseSize);\n      }\n      wasSmaller = isSmaller;\n\n      final String text = myFragments.get(i);\n      final int curWidth = isOracleRetina ? GraphicsUtil.stringWidth(text, font) : getFontMetrics(font).stringWidth(text);\n      if (x >= curX && x < curX + curWidth) {\n        return i;\n      }\n      curX += curWidth;\n      final int fixedWidth = myFixedWidths.get(i);\n      if (fixedWidth > 0 && curX < fixedWidth) {\n        curX = fixedWidth;\n      }\n    }\n\n    if (myIcon != null && myIconOnTheRight) {\n      curX += myIconTextGap;\n      if (x >= curX && x < curX + myIcon.getIconWidth()) {\n        return FRAGMENT_ICON;\n      }\n    }\n    return -1;\n  }","id":105320,"modified_method":"/**\n   * Returns the index of text fragment at the specified X offset.\n   *\n   * @param x the offset\n   * @return the index of the fragment, {@link #FRAGMENT_ICON} if the icon is at the offset, or -1 if nothing is there.\n   */\n  public int findFragmentAt(int x) {\n    int curX = myIpad.left;\n    if (myIcon != null && !myIconOnTheRight) {\n      final int iconRight = myIcon.getIconWidth() + myIconTextGap;\n      if (x < iconRight) {\n        return FRAGMENT_ICON;\n      }\n      curX += iconRight;\n    }\n\n    Font font = getFont();\n    if (font == null) {\n      font = UIUtil.getLabelFont();\n    }\n\n    int baseSize = font.getSize();\n    boolean wasSmaller = false;\n    for (int i = 0; i < myAttributes.size(); i++) {\n      SimpleTextAttributes attributes = myAttributes.get(i);\n      boolean isSmaller = attributes.isSmaller();\n      if (font.getStyle() != attributes.getFontStyle() || isSmaller != wasSmaller) { // derive font only if it is necessary\n        font = font.deriveFont(attributes.getFontStyle(), isSmaller ? UIUtil.getFontSize(UIUtil.FontSize.SMALL) : baseSize);\n      }\n      wasSmaller = isSmaller;\n\n      final String text = myFragments.get(i);\n      final int curWidth = getFontMetrics(font).stringWidth(text);\n      if (x >= curX && x < curX + curWidth) {\n        return i;\n      }\n      curX += curWidth;\n      final int fixedWidth = myFixedWidths.get(i);\n      if (fixedWidth > 0 && curX < fixedWidth) {\n        curX = fixedWidth;\n      }\n    }\n\n    if (myIcon != null && myIconOnTheRight) {\n      curX += myIconTextGap;\n      if (x >= curX && x < curX + myIcon.getIconWidth()) {\n        return FRAGMENT_ICON;\n      }\n    }\n    return -1;\n  }","commit_id":"ecdba0ece0901953586b32316f6e433462e4b247","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final GeoPointFieldData fieldData = (GeoPointFieldData) fieldDataCache.cache(GeoPointFieldDataType.TYPE, reader, fieldName);\n\n        //checks to see if bounding box crosses 180 degrees\n        if (topLeft.lon > bottomRight.lon) {\n            return new GetDocSet(reader.maxDoc()) {\n\n                @Override public boolean isCacheable() {\n                    // not cacheable for several reasons:\n                    // 1. It is only relevant when _cache is set to true, and then, we really want to create in mem bitset\n                    // 2. Its already fast without in mem bitset, since it works with field data\n                    return false;\n                }\n\n                @Override public boolean get(int doc) throws IOException {\n                    if (!fieldData.hasValue(doc)) {\n                        return false;\n                    }\n\n                    if (fieldData.multiValued()) {\n                        double[] lats = fieldData.latValues(doc);\n                        double[] lons = fieldData.lonValues(doc);\n                        for (int i = 0; i < lats.length; i++) {\n                            double lat = lats[i];\n                            double lon = lons[i];\n                            if (((topLeft.lon <= lon && 180 >= lon) || (-180 <= lon && bottomRight.lon >= lon)) &&\n                                    (topLeft.lat >= lat && bottomRight.lat <= lat)) {\n                                return true;\n                            }\n                        }\n                    } else {\n                        double lat = fieldData.latValue(doc);\n                        double lon = fieldData.lonValue(doc);\n\n                        if (((topLeft.lon <= lon && 180 >= lon) || (-180 <= lon && bottomRight.lon >= lon)) &&\n                                (topLeft.lat >= lat && bottomRight.lat <= lat)) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n            };\n        } else {\n            return new GetDocSet(reader.maxDoc()) {\n\n                @Override public boolean isCacheable() {\n                    // not cacheable for several reasons:\n                    // 1. It is only relevant when _cache is set to true, and then, we really want to create in mem bitset\n                    // 2. Its already fast without in mem bitset, since it works with field data\n                    return false;\n                }\n\n                @Override public boolean get(int doc) throws IOException {\n                    if (!fieldData.hasValue(doc)) {\n                        return false;\n                    }\n\n                    if (fieldData.multiValued()) {\n                        double[] lats = fieldData.latValues(doc);\n                        double[] lons = fieldData.lonValues(doc);\n                        for (int i = 0; i < lats.length; i++) {\n                            if (topLeft.lon <= lons[i] && bottomRight.lon >= lons[i]\n                                    && topLeft.lat >= lats[i] && bottomRight.lat <= lats[i]) {\n                                return true;\n                            }\n                        }\n                    } else {\n                        double lat = fieldData.latValue(doc);\n                        double lon = fieldData.lonValue(doc);\n\n                        if (topLeft.lon <= lon && bottomRight.lon >= lon\n                                && topLeft.lat >= lat && bottomRight.lat <= lat) {\n                            return true;\n                        }\n                    }\n                    return false;\n                }\n            };\n        }\n    }","id":105321,"modified_method":"@Override public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final GeoPointFieldData fieldData = (GeoPointFieldData) fieldDataCache.cache(GeoPointFieldDataType.TYPE, reader, fieldName);\n\n        //checks to see if bounding box crosses 180 degrees\n        if (topLeft.lon > bottomRight.lon) {\n            return new LeftGeoBoundingBoxDocSet(reader.maxDoc(), fieldData, topLeft, bottomRight);\n        } else {\n            return new RightGeoBoundingBoxDocSet(reader.maxDoc(), fieldData, topLeft, bottomRight);\n        }\n    }","commit_id":"55f62eca8a3dd27cd63ac90724eded57d7c201d3","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final GeoPointFieldData fieldData = (GeoPointFieldData) fieldDataCache.cache(GeoPointFieldDataType.TYPE, reader, fieldName);\n        return new GetDocSet(reader.maxDoc()) {\n\n            @Override public boolean isCacheable() {\n                // not cacheable for several reasons:\n                // 1. It is only relevant when _cache is set to true, and then, we really want to create in mem bitset\n                // 2. Its already fast without in mem bitset, since it works with field data\n                return false;\n            }\n\n            @Override public boolean get(int doc) throws IOException {\n                if (!fieldData.hasValue(doc)) {\n                    return false;\n                }\n\n                if (fieldData.multiValued()) {\n                    double[] lats = fieldData.latValues(doc);\n                    double[] lons = fieldData.lonValues(doc);\n                    for (int i = 0; i < lats.length; i++) {\n                        double d = geoDistance.calculate(lat, lon, lats[i], lons[i], DistanceUnit.MILES);\n                        if (d < distance) {\n                            return true;\n                        }\n                    }\n                    return false;\n                } else {\n                    double d = geoDistance.calculate(lat, lon, fieldData.latValue(doc), fieldData.lonValue(doc), DistanceUnit.MILES);\n                    return d < distance;\n                }\n            }\n        };\n    }","id":105322,"modified_method":"@Override public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final GeoPointFieldData fieldData = (GeoPointFieldData) fieldDataCache.cache(GeoPointFieldDataType.TYPE, reader, fieldName);\n        return new GeoDistanceDocSet(reader.maxDoc(), geoDistance, fieldData, lat, lon, distance);\n    }","commit_id":"55f62eca8a3dd27cd63ac90724eded57d7c201d3","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final GeoPointFieldData fieldData = (GeoPointFieldData) fieldDataCache.cache(GeoPointFieldDataType.TYPE, reader, fieldName);\n        return new GetDocSet(reader.maxDoc()) {\n\n            @Override public boolean isCacheable() {\n                // not cacheable for several reasons:\n                // 1. It is only relevant when _cache is set to true, and then, we really want to create in mem bitset\n                // 2. Its already fast without in mem bitset, since it works with field data\n                return false;\n            }\n\n            @Override public boolean get(int doc) throws IOException {\n                if (!fieldData.hasValue(doc)) {\n                    return false;\n                }\n\n                if (fieldData.multiValued()) {\n                    double[] lats = fieldData.latValues(doc);\n                    double[] lons = fieldData.lonValues(doc);\n                    for (int i = 0; i < lats.length; i++) {\n                        double d = geoDistance.calculate(lat, lon, lats[i], lons[i], DistanceUnit.MILES);\n                        if (d >= inclusiveLowerPoint && d <= inclusiveUpperPoint) {\n                            return true;\n                        }\n                    }\n                    return false;\n                } else {\n                    double d = geoDistance.calculate(lat, lon, fieldData.latValue(doc), fieldData.lonValue(doc), DistanceUnit.MILES);\n                    if (d >= inclusiveLowerPoint && d <= inclusiveUpperPoint) {\n                        return true;\n                    }\n                    return false;\n                }\n            }\n        };\n    }","id":105323,"modified_method":"@Override public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final GeoPointFieldData fieldData = (GeoPointFieldData) fieldDataCache.cache(GeoPointFieldDataType.TYPE, reader, fieldName);\n        return new GeoDistanceRangeDocSet(reader.maxDoc(), fieldData, geoDistance, lat, lon, inclusiveLowerPoint, inclusiveUpperPoint);\n    }","commit_id":"55f62eca8a3dd27cd63ac90724eded57d7c201d3","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final GeoPointFieldData fieldData = (GeoPointFieldData) fieldDataCache.cache(GeoPointFieldDataType.TYPE, reader, fieldName);\n\n        return new GetDocSet(reader.maxDoc()) {\n\n            @Override public boolean isCacheable() {\n                // not cacheable for several reasons:\n                // 1. It is only relevant when _cache is set to true, and then, we really want to create in mem bitset\n                // 2. Its already fast without in mem bitset, since it works with field data\n                return false;\n            }\n\n            @Override public boolean get(int doc) throws IOException {\n                if (!fieldData.hasValue(doc)) {\n                    return false;\n                }\n\n                if (fieldData.multiValued()) {\n                    double[] lats = fieldData.latValues(doc);\n                    double[] lons = fieldData.lonValues(doc);\n                    for (int i = 0; i < lats.length; i++) {\n                        if (pointInPolygon(points, lats[i], lons[i])) {\n                            return true;\n                        }\n                    }\n                } else {\n                    double lat = fieldData.latValue(doc);\n                    double lon = fieldData.lonValue(doc);\n                    return pointInPolygon(points, lat, lon);\n                }\n                return false;\n            }\n        };\n    }","id":105324,"modified_method":"@Override public DocIdSet getDocIdSet(IndexReader reader) throws IOException {\n        final GeoPointFieldData fieldData = (GeoPointFieldData) fieldDataCache.cache(GeoPointFieldDataType.TYPE, reader, fieldName);\n        return new GeoPolygonDocSet(reader.maxDoc(), fieldData, points);\n    }","commit_id":"55f62eca8a3dd27cd63ac90724eded57d7c201d3","url":"https://github.com/elastic/elasticsearch"},{"original_method":"protected OnmsSnmpInterface getIfAlias(int nodeid, String ipaddr) {\n\n        setCriteria(\"nodeid = \" + nodeid + \" AND ipaddr = '\" + ipaddr +\"'\");\n        BeanFactoryReference bf = BeanUtils.getBeanFactory(\"daoContext\");\n        final SnmpInterfaceDao snmpInterfaceDao = BeanUtils.getBean(bf,\"snmpInterfaceDao\", SnmpInterfaceDao.class);\n        TransactionTemplate transTemplate = BeanUtils.getBean(bf, \"transactionTemplate\",TransactionTemplate.class);\n        List<OnmsSnmpInterface> iface = (List<OnmsSnmpInterface>) transTemplate.execute(\n                   new TransactionCallback() {\n                        public Object doInTransaction(final TransactionStatus status) {\n                            final OnmsCriteria onmsCriteria = new OnmsCriteria(OnmsSnmpInterface.class);\n                            onmsCriteria.add(Restrictions.sqlRestriction(getCriteria()));\n                            return snmpInterfaceDao.findMatching(onmsCriteria);\n                        }\n                   }\n        );\n        log.debug(\"interfacce trovate: \" + iface.size());\n        \n        return iface.get(0);\n    }","id":105325,"modified_method":"@SuppressWarnings(\"unchecked\")\n    protected OnmsSnmpInterface getIfAlias(int nodeid, String ipaddr) {\n\n        log.debug(\"getting ifalias for nodeid: \" +nodeid + \" and ipaddress: \" + ipaddr);\n        setCriteria(\"nodeid = \" + nodeid + \" AND ipaddr = '\" + ipaddr +\"'\");\n        BeanFactoryReference bf = BeanUtils.getBeanFactory(\"daoContext\");\n        final SnmpInterfaceDao snmpInterfaceDao = BeanUtils.getBean(bf,\"snmpInterfaceDao\", SnmpInterfaceDao.class);\n        TransactionTemplate transTemplate = BeanUtils.getBean(bf, \"transactionTemplate\",TransactionTemplate.class);\n        List<OnmsSnmpInterface> iface = (List<OnmsSnmpInterface>) transTemplate.execute(\n                   new TransactionCallback() {\n                        public Object doInTransaction(final TransactionStatus status) {\n                            final OnmsCriteria onmsCriteria = new OnmsCriteria(OnmsSnmpInterface.class);\n                            onmsCriteria.add(Restrictions.sqlRestriction(getCriteria()));\n                            return snmpInterfaceDao.findMatching(onmsCriteria);\n                        }\n                   }\n        );\n        log.debug(\"interfaces found: \" + iface.size());\n\n        String ifAlias = iface.get(0).getIfAlias();\n        log.debug(\"ifalias found: \" + ifAlias);\n        \n        return iface.get(0);\n    }","commit_id":"5d3e32cf3bcf2c7015651a91d6f7d328c32c3779","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected String getIfAlias(int nodeid, int ifindex) {\n\n        setCriteria(\"nodeid = \" + nodeid + \" AND snmpifindex = \" + ifindex);\n        BeanFactoryReference bf = BeanUtils.getBeanFactory(\"daoContext\");\n        final SnmpInterfaceDao snmpInterfaceDao = BeanUtils.getBean(bf,\"snmpInterfaceDao\", SnmpInterfaceDao.class);\n        TransactionTemplate transTemplate = BeanUtils.getBean(bf, \"transactionTemplate\",TransactionTemplate.class);\n        List<OnmsSnmpInterface> iface = (List<OnmsSnmpInterface>) transTemplate.execute(\n                   new TransactionCallback() {\n                        public Object doInTransaction(final TransactionStatus status) {\n                            final OnmsCriteria onmsCriteria = new OnmsCriteria(OnmsSnmpInterface.class);\n                            onmsCriteria.add(Restrictions.sqlRestriction(getCriteria()));\n                            return snmpInterfaceDao.findMatching(onmsCriteria);\n                        }\n                   }\n        );\n        log.debug(\"interfacce trovate: \" + iface.size());\n        \n        return iface.get(0).getIfAlias();\n    }","id":105326,"modified_method":"@SuppressWarnings(\"unchecked\")\n    protected String getIfAlias(int nodeid, int ifindex) {\n\n        log.debug(\"getting ifalias for nodeid: \" +nodeid + \" and ifindex: \" + ifindex);\n\n        setCriteria(\"nodeid = \" + nodeid + \" AND snmpifindex = \" + ifindex);\n        BeanFactoryReference bf = BeanUtils.getBeanFactory(\"daoContext\");\n        final SnmpInterfaceDao snmpInterfaceDao = BeanUtils.getBean(bf,\"snmpInterfaceDao\", SnmpInterfaceDao.class);\n        TransactionTemplate transTemplate = BeanUtils.getBean(bf, \"transactionTemplate\",TransactionTemplate.class);\n        List<OnmsSnmpInterface> iface = (List<OnmsSnmpInterface>) transTemplate.execute(\n                   new TransactionCallback() {\n                        public Object doInTransaction(final TransactionStatus status) {\n                            final OnmsCriteria onmsCriteria = new OnmsCriteria(OnmsSnmpInterface.class);\n                            onmsCriteria.add(Restrictions.sqlRestriction(getCriteria()));\n                            return snmpInterfaceDao.findMatching(onmsCriteria);\n                        }\n                   }\n        );\n        log.debug(\"interfaces found: \" + iface.size());\n\n        String ifAlias = iface.get(0).getIfAlias();\n        log.debug(\"ifalias found: \" + ifAlias);\n        \n        return ifAlias;\n    }","commit_id":"5d3e32cf3bcf2c7015651a91d6f7d328c32c3779","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setCriteriaRestriction(String criteriaRestriction) {\n\t\tthis.criteriaRestriction = criteriaRestriction;\n\t}","id":105327,"modified_method":"public void setCriteriaRestriction(String criteriaRestriction) {\n\t    getLog().debug(\"Setting the criteria restriction for active alarm list: \" + criteriaRestriction);\n\t\tthis.criteriaRestriction = criteriaRestriction;\n\t}","commit_id":"5d3e32cf3bcf2c7015651a91d6f7d328c32c3779","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public InsAbstractSession() {\n        super();\n        ThreadCategory.setPrefix(\"OpenNMS.InsProxy\");\n        log=ThreadCategory.getInstance(this.getClass());\n    }","id":105328,"modified_method":"public InsAbstractSession() {\n        super();\n        ThreadCategory.setPrefix(\"OpenNMS.InsProxy\");\n        log=ThreadCategory.getInstance(this.getClass());\n        log.debug(\"InsAbstract Session Constructor: loaded\");\n    }","commit_id":"5d3e32cf3bcf2c7015651a91d6f7d328c32c3779","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static void main(String[] args) {\n\t\tInsServerListener isl = new InsServerListener();\n\t\tisl.setListeningPort(8155);\n\t\t//optional (if not setted, no authentication is required)\n\t\t//isl.setSharedASCIIString(\"1234567890\");\n\t\t\n\t\t//required properties\n\t\t\n\t\tisl.start();\n\n\t}","id":105329,"modified_method":"public static void main(String[] args) {\n\t\tInsServerListener isl = new InsServerListener();\n\t\tisl.setListeningPort(8155);\n\t\t//optional (if not setted, no authentication is required)\n\t\tisl.setSharedASCIIString(\"1234567890\");\n\t\t\n\t\t//required properties\n\t\t\n\t\tisl.start();\n\n\t}","commit_id":"5d3e32cf3bcf2c7015651a91d6f7d328c32c3779","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n\t/**\n\t * Stops the listener\n\t */\n\tpublic void interrupt() {\n        Category log = getLog();\n\t\tlog.info(\"InsServerListener Interrupted!\");\n\t\ttry {\n\t\t\tlistener.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tsuper.interrupt();\n\t}","id":105330,"modified_method":"@Override\n\t/**\n\t * Stops the listener\n\t */\n\tpublic void interrupt() {\n        Category log = getLog();\n\t\ttry {\n\t\t\tlistener.close();\n\t\t} catch (IOException e) {\n\t\t    log.error(\"Gor Error closing listener: \" + e.getLocalizedMessage());\n\t\t}\n\t\tsuper.interrupt();\n        log.info(\"InsServerListener Interrupted!\");\n\t}","commit_id":"5d3e32cf3bcf2c7015651a91d6f7d328c32c3779","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected OnmsSnmpInterface getIfAlias(int nodeid, String ipaddr) {\n\n        setCriteria(\"nodeid = \" + nodeid + \" AND ipaddr = '\" + ipaddr +\"'\");\n        BeanFactoryReference bf = BeanUtils.getBeanFactory(\"daoContext\");\n        final SnmpInterfaceDao snmpInterfaceDao = BeanUtils.getBean(bf,\"snmpInterfaceDao\", SnmpInterfaceDao.class);\n        TransactionTemplate transTemplate = BeanUtils.getBean(bf, \"transactionTemplate\",TransactionTemplate.class);\n        List<OnmsSnmpInterface> iface = (List<OnmsSnmpInterface>) transTemplate.execute(\n                   new TransactionCallback() {\n                        public Object doInTransaction(final TransactionStatus status) {\n                            final OnmsCriteria onmsCriteria = new OnmsCriteria(OnmsSnmpInterface.class);\n                            onmsCriteria.add(Restrictions.sqlRestriction(getCriteria()));\n                            return snmpInterfaceDao.findMatching(onmsCriteria);\n                        }\n                   }\n        );\n        log.debug(\"interfacce trovate: \" + iface.size());\n        \n        return iface.get(0);\n    }","id":105331,"modified_method":"@SuppressWarnings(\"unchecked\")\n    protected OnmsSnmpInterface getIfAlias(int nodeid, String ipaddr) {\n\n        log.debug(\"getting ifalias for nodeid: \" +nodeid + \" and ipaddress: \" + ipaddr);\n        setCriteria(\"nodeid = \" + nodeid + \" AND ipaddr = '\" + ipaddr +\"'\");\n        BeanFactoryReference bf = BeanUtils.getBeanFactory(\"daoContext\");\n        final SnmpInterfaceDao snmpInterfaceDao = BeanUtils.getBean(bf,\"snmpInterfaceDao\", SnmpInterfaceDao.class);\n        TransactionTemplate transTemplate = BeanUtils.getBean(bf, \"transactionTemplate\",TransactionTemplate.class);\n        List<OnmsSnmpInterface> iface = (List<OnmsSnmpInterface>) transTemplate.execute(\n                   new TransactionCallback() {\n                        public Object doInTransaction(final TransactionStatus status) {\n                            final OnmsCriteria onmsCriteria = new OnmsCriteria(OnmsSnmpInterface.class);\n                            onmsCriteria.add(Restrictions.sqlRestriction(getCriteria()));\n                            return snmpInterfaceDao.findMatching(onmsCriteria);\n                        }\n                   }\n        );\n        log.debug(\"interfaces found: \" + iface.size());\n\n        String ifAlias = iface.get(0).getIfAlias();\n        log.debug(\"ifalias found: \" + ifAlias);\n        \n        return iface.get(0);\n    }","commit_id":"771331ad46473e5d156131a57be2231f9cae4cf3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setCriteriaRestriction(String criteriaRestriction) {\n\t\tthis.criteriaRestriction = criteriaRestriction;\n\t}","id":105332,"modified_method":"public void setCriteriaRestriction(String criteriaRestriction) {\n\t    getLog().debug(\"Setting the criteria restriction for active alarm list: \" + criteriaRestriction);\n\t\tthis.criteriaRestriction = criteriaRestriction;\n\t}","commit_id":"771331ad46473e5d156131a57be2231f9cae4cf3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected String getIfAlias(int nodeid, int ifindex) {\n\n        setCriteria(\"nodeid = \" + nodeid + \" AND snmpifindex = \" + ifindex);\n        BeanFactoryReference bf = BeanUtils.getBeanFactory(\"daoContext\");\n        final SnmpInterfaceDao snmpInterfaceDao = BeanUtils.getBean(bf,\"snmpInterfaceDao\", SnmpInterfaceDao.class);\n        TransactionTemplate transTemplate = BeanUtils.getBean(bf, \"transactionTemplate\",TransactionTemplate.class);\n        List<OnmsSnmpInterface> iface = (List<OnmsSnmpInterface>) transTemplate.execute(\n                   new TransactionCallback() {\n                        public Object doInTransaction(final TransactionStatus status) {\n                            final OnmsCriteria onmsCriteria = new OnmsCriteria(OnmsSnmpInterface.class);\n                            onmsCriteria.add(Restrictions.sqlRestriction(getCriteria()));\n                            return snmpInterfaceDao.findMatching(onmsCriteria);\n                        }\n                   }\n        );\n        log.debug(\"interfacce trovate: \" + iface.size());\n        \n        return iface.get(0).getIfAlias();\n    }","id":105333,"modified_method":"@SuppressWarnings(\"unchecked\")\n    protected String getIfAlias(int nodeid, int ifindex) {\n\n        log.debug(\"getting ifalias for nodeid: \" +nodeid + \" and ifindex: \" + ifindex);\n\n        setCriteria(\"nodeid = \" + nodeid + \" AND snmpifindex = \" + ifindex);\n        BeanFactoryReference bf = BeanUtils.getBeanFactory(\"daoContext\");\n        final SnmpInterfaceDao snmpInterfaceDao = BeanUtils.getBean(bf,\"snmpInterfaceDao\", SnmpInterfaceDao.class);\n        TransactionTemplate transTemplate = BeanUtils.getBean(bf, \"transactionTemplate\",TransactionTemplate.class);\n        List<OnmsSnmpInterface> iface = (List<OnmsSnmpInterface>) transTemplate.execute(\n                   new TransactionCallback() {\n                        public Object doInTransaction(final TransactionStatus status) {\n                            final OnmsCriteria onmsCriteria = new OnmsCriteria(OnmsSnmpInterface.class);\n                            onmsCriteria.add(Restrictions.sqlRestriction(getCriteria()));\n                            return snmpInterfaceDao.findMatching(onmsCriteria);\n                        }\n                   }\n        );\n        log.debug(\"interfaces found: \" + iface.size());\n\n        String ifAlias = iface.get(0).getIfAlias();\n        log.debug(\"ifalias found: \" + ifAlias);\n        \n        return ifAlias;\n    }","commit_id":"771331ad46473e5d156131a57be2231f9cae4cf3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public InsAbstractSession() {\n        super();\n        ThreadCategory.setPrefix(\"OpenNMS.InsProxy\");\n        log=ThreadCategory.getInstance(this.getClass());\n    }","id":105334,"modified_method":"public InsAbstractSession() {\n        super();\n        ThreadCategory.setPrefix(\"OpenNMS.InsProxy\");\n        log=ThreadCategory.getInstance(this.getClass());\n        log.debug(\"InsAbstract Session Constructor: loaded\");\n    }","commit_id":"771331ad46473e5d156131a57be2231f9cae4cf3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static void main(String[] args) {\n\t\tInsServerListener isl = new InsServerListener();\n\t\tisl.setListeningPort(8155);\n\t\t//optional (if not setted, no authentication is required)\n\t\t//isl.setSharedASCIIString(\"1234567890\");\n\t\t\n\t\t//required properties\n\t\t\n\t\tisl.start();\n\n\t}","id":105335,"modified_method":"public static void main(String[] args) {\n\t\tInsServerListener isl = new InsServerListener();\n\t\tisl.setListeningPort(8155);\n\t\t//optional (if not setted, no authentication is required)\n\t\tisl.setSharedASCIIString(\"1234567890\");\n\t\t\n\t\t//required properties\n\t\t\n\t\tisl.start();\n\n\t}","commit_id":"771331ad46473e5d156131a57be2231f9cae4cf3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n\t/**\n\t * Stops the listener\n\t */\n\tpublic void interrupt() {\n        Category log = getLog();\n\t\tlog.info(\"InsServerListener Interrupted!\");\n\t\ttry {\n\t\t\tlistener.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tsuper.interrupt();\n\t}","id":105336,"modified_method":"@Override\n\t/**\n\t * Stops the listener\n\t */\n\tpublic void interrupt() {\n        Category log = getLog();\n\t\ttry {\n\t\t\tlistener.close();\n\t\t} catch (IOException e) {\n\t\t    log.error(\"Gor Error closing listener: \" + e.getLocalizedMessage());\n\t\t}\n\t\tsuper.interrupt();\n        log.info(\"InsServerListener Interrupted!\");\n\t}","commit_id":"771331ad46473e5d156131a57be2231f9cae4cf3","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected OnmsSnmpInterface getIfAlias(int nodeid, String ipaddr) {\n\n        setCriteria(\"nodeid = \" + nodeid + \" AND ipaddr = '\" + ipaddr +\"'\");\n        BeanFactoryReference bf = BeanUtils.getBeanFactory(\"daoContext\");\n        final SnmpInterfaceDao snmpInterfaceDao = BeanUtils.getBean(bf,\"snmpInterfaceDao\", SnmpInterfaceDao.class);\n        TransactionTemplate transTemplate = BeanUtils.getBean(bf, \"transactionTemplate\",TransactionTemplate.class);\n        List<OnmsSnmpInterface> iface = (List<OnmsSnmpInterface>) transTemplate.execute(\n                   new TransactionCallback() {\n                        public Object doInTransaction(final TransactionStatus status) {\n                            final OnmsCriteria onmsCriteria = new OnmsCriteria(OnmsSnmpInterface.class);\n                            onmsCriteria.add(Restrictions.sqlRestriction(getCriteria()));\n                            return snmpInterfaceDao.findMatching(onmsCriteria);\n                        }\n                   }\n        );\n        log.debug(\"interfacce trovate: \" + iface.size());\n        \n        return iface.get(0);\n    }","id":105337,"modified_method":"@SuppressWarnings(\"unchecked\")\n    protected OnmsSnmpInterface getIfAlias(int nodeid, String ipaddr) {\n\n        log.debug(\"getting ifalias for nodeid: \" +nodeid + \" and ipaddress: \" + ipaddr);\n        setCriteria(\"nodeid = \" + nodeid + \" AND ipaddr = '\" + ipaddr +\"'\");\n        BeanFactoryReference bf = BeanUtils.getBeanFactory(\"daoContext\");\n        final SnmpInterfaceDao snmpInterfaceDao = BeanUtils.getBean(bf,\"snmpInterfaceDao\", SnmpInterfaceDao.class);\n        TransactionTemplate transTemplate = BeanUtils.getBean(bf, \"transactionTemplate\",TransactionTemplate.class);\n        List<OnmsSnmpInterface> iface = (List<OnmsSnmpInterface>) transTemplate.execute(\n                   new TransactionCallback() {\n                        public Object doInTransaction(final TransactionStatus status) {\n                            final OnmsCriteria onmsCriteria = new OnmsCriteria(OnmsSnmpInterface.class);\n                            onmsCriteria.add(Restrictions.sqlRestriction(getCriteria()));\n                            return snmpInterfaceDao.findMatching(onmsCriteria);\n                        }\n                   }\n        );\n        log.debug(\"interfaces found: \" + iface.size());\n\n        String ifAlias = iface.get(0).getIfAlias();\n        log.debug(\"ifalias found: \" + ifAlias);\n        \n        return iface.get(0);\n    }","commit_id":"833d59b2fca6f57ee383a71f2ee4f9a4f70f8bab","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void setCriteriaRestriction(String criteriaRestriction) {\n\t\tthis.criteriaRestriction = criteriaRestriction;\n\t}","id":105338,"modified_method":"public void setCriteriaRestriction(String criteriaRestriction) {\n\t    getLog().debug(\"Setting the criteria restriction for active alarm list: \" + criteriaRestriction);\n\t\tthis.criteriaRestriction = criteriaRestriction;\n\t}","commit_id":"833d59b2fca6f57ee383a71f2ee4f9a4f70f8bab","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected String getIfAlias(int nodeid, int ifindex) {\n\n        setCriteria(\"nodeid = \" + nodeid + \" AND snmpifindex = \" + ifindex);\n        BeanFactoryReference bf = BeanUtils.getBeanFactory(\"daoContext\");\n        final SnmpInterfaceDao snmpInterfaceDao = BeanUtils.getBean(bf,\"snmpInterfaceDao\", SnmpInterfaceDao.class);\n        TransactionTemplate transTemplate = BeanUtils.getBean(bf, \"transactionTemplate\",TransactionTemplate.class);\n        List<OnmsSnmpInterface> iface = (List<OnmsSnmpInterface>) transTemplate.execute(\n                   new TransactionCallback() {\n                        public Object doInTransaction(final TransactionStatus status) {\n                            final OnmsCriteria onmsCriteria = new OnmsCriteria(OnmsSnmpInterface.class);\n                            onmsCriteria.add(Restrictions.sqlRestriction(getCriteria()));\n                            return snmpInterfaceDao.findMatching(onmsCriteria);\n                        }\n                   }\n        );\n        log.debug(\"interfacce trovate: \" + iface.size());\n        \n        return iface.get(0).getIfAlias();\n    }","id":105339,"modified_method":"@SuppressWarnings(\"unchecked\")\n    protected String getIfAlias(int nodeid, int ifindex) {\n\n        log.debug(\"getting ifalias for nodeid: \" +nodeid + \" and ifindex: \" + ifindex);\n\n        setCriteria(\"nodeid = \" + nodeid + \" AND snmpifindex = \" + ifindex);\n        BeanFactoryReference bf = BeanUtils.getBeanFactory(\"daoContext\");\n        final SnmpInterfaceDao snmpInterfaceDao = BeanUtils.getBean(bf,\"snmpInterfaceDao\", SnmpInterfaceDao.class);\n        TransactionTemplate transTemplate = BeanUtils.getBean(bf, \"transactionTemplate\",TransactionTemplate.class);\n        List<OnmsSnmpInterface> iface = (List<OnmsSnmpInterface>) transTemplate.execute(\n                   new TransactionCallback() {\n                        public Object doInTransaction(final TransactionStatus status) {\n                            final OnmsCriteria onmsCriteria = new OnmsCriteria(OnmsSnmpInterface.class);\n                            onmsCriteria.add(Restrictions.sqlRestriction(getCriteria()));\n                            return snmpInterfaceDao.findMatching(onmsCriteria);\n                        }\n                   }\n        );\n        log.debug(\"interfaces found: \" + iface.size());\n\n        String ifAlias = iface.get(0).getIfAlias();\n        log.debug(\"ifalias found: \" + ifAlias);\n        \n        return ifAlias;\n    }","commit_id":"833d59b2fca6f57ee383a71f2ee4f9a4f70f8bab","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public InsAbstractSession() {\n        super();\n        ThreadCategory.setPrefix(\"OpenNMS.InsProxy\");\n        log=ThreadCategory.getInstance(this.getClass());\n    }","id":105340,"modified_method":"public InsAbstractSession() {\n        super();\n        ThreadCategory.setPrefix(\"OpenNMS.InsProxy\");\n        log=ThreadCategory.getInstance(this.getClass());\n        log.debug(\"InsAbstract Session Constructor: loaded\");\n    }","commit_id":"833d59b2fca6f57ee383a71f2ee4f9a4f70f8bab","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n\t/**\n\t * Stops the listener\n\t */\n\tpublic void interrupt() {\n        Category log = getLog();\n\t\tlog.info(\"InsServerListener Interrupted!\");\n\t\ttry {\n\t\t\tlistener.close();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\tsuper.interrupt();\n\t}","id":105341,"modified_method":"@Override\n\t/**\n\t * Stops the listener\n\t */\n\tpublic void interrupt() {\n        Category log = getLog();\n\t\ttry {\n\t\t\tlistener.close();\n\t\t} catch (IOException e) {\n\t\t    log.error(\"Gor Error closing listener: \" + e.getLocalizedMessage());\n\t\t}\n\t\tsuper.interrupt();\n        log.info(\"InsServerListener Interrupted!\");\n\t}","commit_id":"833d59b2fca6f57ee383a71f2ee4f9a4f70f8bab","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public static void main(String[] args) {\n\t\tInsServerListener isl = new InsServerListener();\n\t\tisl.setListeningPort(8155);\n\t\t//optional (if not setted, no authentication is required)\n\t\t//isl.setSharedASCIIString(\"1234567890\");\n\t\t\n\t\t//required properties\n\t\t\n\t\tisl.start();\n\n\t}","id":105342,"modified_method":"public static void main(String[] args) {\n\t\tInsServerListener isl = new InsServerListener();\n\t\tisl.setListeningPort(8155);\n\t\t//optional (if not setted, no authentication is required)\n\t\tisl.setSharedASCIIString(\"1234567890\");\n\t\t\n\t\t//required properties\n\t\t\n\t\tisl.start();\n\n\t}","commit_id":"833d59b2fca6f57ee383a71f2ee4f9a4f70f8bab","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Nullable\n  public static PsiField getFieldOfSetter(PsiMethod method) {\n    if (method == null) {\n      return null;\n    }\n    final PsiParameterList parameterList = method.getParameterList();\n    if (parameterList.getParametersCount() != 1) {\n      return null;\n    }\n    @NonNls final String name = method.getName();\n    if (!name.startsWith(\"set\")) {\n      return null;\n    }\n    if (method.hasModifierProperty(PsiModifier.SYNCHRONIZED)) {\n      return null;\n    }\n    final PsiCodeBlock body = method.getBody();\n    if (body == null) {\n      return null;\n    }\n    final PsiStatement[] statements = body.getStatements();\n    if (statements.length != 1) {\n      return null;\n    }\n    final PsiStatement statement = statements[0];\n    if (!(statement instanceof PsiExpressionStatement)) {\n      return null;\n    }\n    final PsiExpressionStatement possibleAssignmentStatement = (PsiExpressionStatement)statement;\n    final PsiExpression possibleAssignment = possibleAssignmentStatement.getExpression();\n    if (!(possibleAssignment instanceof PsiAssignmentExpression)) {\n      return null;\n    }\n    final PsiAssignmentExpression assignment = (PsiAssignmentExpression)possibleAssignment;\n    if (!JavaTokenType.EQ.equals(assignment.getOperationTokenType())) {\n      return null;\n    }\n    final PsiExpression lhs = assignment.getLExpression();\n    if (!(lhs instanceof PsiReferenceExpression)) {\n      return null;\n    }\n    final PsiReferenceExpression reference = (PsiReferenceExpression)lhs;\n    final PsiExpression qualifier = reference.getQualifierExpression();\n    if (qualifier instanceof PsiReferenceExpression) {\n      final PsiReferenceExpression referenceExpression = (PsiReferenceExpression)qualifier;\n      final PsiElement target = referenceExpression.resolve();\n      if (!(target instanceof PsiClass)) {\n        return null;\n      }\n    }\n    else if (qualifier != null && !(qualifier instanceof PsiThisExpression) && !(qualifier instanceof PsiSuperExpression)) {\n      return null;\n    }\n    final PsiElement referent = reference.resolve();\n    if (referent == null) {\n      return null;\n    }\n    if (!(referent instanceof PsiField)) {\n      return null;\n    }\n    final PsiField field = (PsiField)referent;\n    final PsiClass fieldContainingClass = field.getContainingClass();\n    final PsiClass methodContainingClass = method.getContainingClass();\n    if (!InheritanceUtil.isInheritorOrSelf(methodContainingClass, fieldContainingClass, true)) {\n      return null;\n    }\n    final PsiExpression rhs = assignment.getRExpression();\n    if (!(rhs instanceof PsiReferenceExpression)) {\n      return null;\n    }\n    final PsiReferenceExpression rReference = (PsiReferenceExpression)rhs;\n    final PsiExpression rQualifier = rReference.getQualifierExpression();\n    if (rQualifier != null) {\n      return null;\n    }\n    final PsiElement rReferent = rReference.resolve();\n    if (rReferent == null) {\n      return null;\n    }\n    if (!(rReferent instanceof PsiParameter)) {\n      return null;\n    }\n    final PsiType fieldType = field.getType();\n    final PsiType parameterType = ((PsiVariable)rReferent).getType();\n    if (fieldType.equalsToText(parameterType.getCanonicalText())) {\n      return field;\n    }\n    else {\n      return null;\n    }\n  }","id":105343,"modified_method":"@Nullable\n  public static PsiField getFieldOfSetter(PsiMethod method) {\n    if (method == null) {\n      return null;\n    }\n    final PsiParameterList parameterList = method.getParameterList();\n    if (parameterList.getParametersCount() != 1) {\n      return null;\n    }\n    @NonNls final String name = method.getName();\n    if (!name.startsWith(\"set\")) {\n      return null;\n    }\n    if (method.hasModifierProperty(PsiModifier.SYNCHRONIZED)) {\n      return null;\n    }\n    final PsiCodeBlock body = method.getBody();\n    if (body == null) {\n      return null;\n    }\n    final PsiStatement[] statements = body.getStatements();\n    if (statements.length != 1) {\n      return null;\n    }\n    final PsiStatement statement = statements[0];\n    if (!(statement instanceof PsiExpressionStatement)) {\n      return null;\n    }\n    final PsiExpressionStatement possibleAssignmentStatement = (PsiExpressionStatement)statement;\n    final PsiExpression possibleAssignment = possibleAssignmentStatement.getExpression();\n    if (!(possibleAssignment instanceof PsiAssignmentExpression)) {\n      return null;\n    }\n    final PsiAssignmentExpression assignment = (PsiAssignmentExpression)possibleAssignment;\n    if (!JavaTokenType.EQ.equals(assignment.getOperationTokenType())) {\n      return null;\n    }\n    final PsiExpression lhs = assignment.getLExpression();\n    if (!(lhs instanceof PsiReferenceExpression)) {\n      return null;\n    }\n    final PsiReferenceExpression reference = (PsiReferenceExpression)lhs;\n    final PsiExpression qualifier = reference.getQualifierExpression();\n    if (qualifier instanceof PsiReferenceExpression) {\n      final PsiReferenceExpression referenceExpression = (PsiReferenceExpression)qualifier;\n      final PsiElement target = referenceExpression.resolve();\n      if (!(target instanceof PsiClass)) {\n        return null;\n      }\n    }\n    else if (qualifier != null && !(qualifier instanceof PsiThisExpression) && !(qualifier instanceof PsiSuperExpression)) {\n      return null;\n    }\n    final PsiElement referent = reference.resolve();\n    if (referent == null) {\n      return null;\n    }\n    if (!(referent instanceof PsiField)) {\n      return null;\n    }\n    final PsiField field = (PsiField)referent;\n    final PsiClass fieldContainingClass = field.getContainingClass();\n    final PsiClass methodContainingClass = method.getContainingClass();\n    if (!InheritanceUtil.isInheritorOrSelf(methodContainingClass, fieldContainingClass, true)) {\n      return null;\n    }\n    final PsiExpression rhs = assignment.getRExpression();\n    if (!(rhs instanceof PsiReferenceExpression)) {\n      return null;\n    }\n    final PsiReferenceExpression rReference = (PsiReferenceExpression)rhs;\n    final PsiExpression rQualifier = rReference.getQualifierExpression();\n    if (rQualifier != null) {\n      return null;\n    }\n    final PsiElement rReferent = rReference.resolve();\n    if (rReferent == null) {\n      return null;\n    }\n    if (!(rReferent instanceof PsiParameter)) {\n      return null;\n    }\n    final PsiType fieldType = field.getType();\n    final PsiType parameterType = ((PsiVariable)rReferent).getType();\n    if (fieldType.equalsToText(parameterType.getCanonicalText())) {\n      return field;\n    }\n    return null;\n  }","commit_id":"5411bec17b74ad3bebff2eeecdcb51ec18bb93db","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static PsiIdentifier getPropertyNameIdentifier(final PsiMember member) {\n    if (member instanceof PsiField) {\n      return ((PsiField)member).getNameIdentifier();\n    }\n    else if (member instanceof PsiMethod) {\n      return ((PsiMethod)member).getNameIdentifier();\n    }\n    return null;\n  }","id":105344,"modified_method":"@Nullable\n  public static PsiIdentifier getPropertyNameIdentifier(final PsiMember member) {\n    if (member instanceof PsiField) {\n      return ((PsiField)member).getNameIdentifier();\n    }\n    if (member instanceof PsiMethod) {\n      return ((PsiMethod)member).getNameIdentifier();\n    }\n    return null;\n  }","commit_id":"5411bec17b74ad3bebff2eeecdcb51ec18bb93db","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static PsiMethod findPropertyGetter(PsiClass aClass,\n                                             String propertyName,\n                                             boolean isStatic,\n                                             boolean checkSuperClasses) {\n    if (aClass == null) return null;\n    PsiMethod[] methods;\n    if (checkSuperClasses) {\n      methods = aClass.getAllMethods();\n    }\n    else {\n      methods = aClass.getMethods();\n    }\n\n    for (PsiMethod method : methods) {\n      if (method.hasModifierProperty(PsiModifier.STATIC) != isStatic) continue;\n\n      if (isSimplePropertyGetter(method)) {\n        if (getPropertyNameByGetter(method).equals(propertyName)) {\n          return method;\n        }\n      }\n    }\n\n    return null;\n  }","id":105345,"modified_method":"@Nullable\n  public static PsiMethod findPropertyGetter(PsiClass aClass,\n                                             String propertyName,\n                                             boolean isStatic,\n                                             boolean checkSuperClasses) {\n    if (aClass == null) return null;\n    PsiMethod[] methods = checkSuperClasses ? aClass.getAllMethods() : aClass.getMethods();\n\n    for (PsiMethod method : methods) {\n      if (method.hasModifierProperty(PsiModifier.STATIC) != isStatic) continue;\n\n      if (isSimplePropertyGetter(method)) {\n        if (getPropertyNameByGetter(method).equals(propertyName)) {\n          return method;\n        }\n      }\n    }\n\n    return null;\n  }","commit_id":"5411bec17b74ad3bebff2eeecdcb51ec18bb93db","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static String getPropertyName(@NotNull PsiMethod method) {\n    if (isSimplePropertyGetter(method)) {\n      return getPropertyNameByGetter(method);\n    }\n    else if (isSimplePropertySetter(method)) {\n      return getPropertyNameBySetter(method);\n    }\n    else {\n      return null;\n    }\n  }","id":105346,"modified_method":"@Nullable\n  public static String getPropertyName(@NotNull PsiMethod method) {\n    if (isSimplePropertyGetter(method)) {\n      return getPropertyNameByGetter(method);\n    }\n    if (isSimplePropertySetter(method)) {\n      return getPropertyNameBySetter(method);\n    }\n    return null;\n  }","commit_id":"5411bec17b74ad3bebff2eeecdcb51ec18bb93db","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static PsiField findPropertyFieldByMember(final PsiMember psiMember) {\n    if (psiMember instanceof PsiField) {\n      return (PsiField)psiMember;\n    }\n    else if (psiMember instanceof PsiMethod) {\n      final PsiMethod psiMethod = (PsiMethod)psiMember;\n      final PsiType returnType = psiMethod.getReturnType();\n      if (returnType == null) return null;\n      final PsiCodeBlock body = psiMethod.getBody();\n      final PsiStatement[] statements = body == null ? null : body.getStatements();\n      final PsiStatement statement = statements == null || statements.length != 1 ? null : statements[0];\n      final PsiElement target;\n      if (PsiType.VOID.equals(returnType)) {\n        final PsiExpression expression =\n          statement instanceof PsiExpressionStatement ? ((PsiExpressionStatement)statement).getExpression() : null;\n        target = expression instanceof PsiAssignmentExpression ? ((PsiAssignmentExpression)expression).getLExpression() : null;\n      }\n      else {\n        target = statement instanceof PsiReturnStatement ? ((PsiReturnStatement)statement).getReturnValue() : null;\n      }\n      final PsiElement resolved = target instanceof PsiReferenceExpression ? ((PsiReferenceExpression)target).resolve() : null;\n      if (resolved instanceof PsiField) {\n        final PsiField field = (PsiField)resolved;\n        if (psiMember.getContainingClass() == field.getContainingClass() ||\n            psiMember.getContainingClass().isInheritor(field.getContainingClass(), true)) {\n          return field;\n        }\n      }\n    }\n    return null;\n  }","id":105347,"modified_method":"@Nullable\n  public static PsiField findPropertyFieldByMember(final PsiMember psiMember) {\n    if (psiMember instanceof PsiField) {\n      return (PsiField)psiMember;\n    }\n    if (psiMember instanceof PsiMethod) {\n      final PsiMethod psiMethod = (PsiMethod)psiMember;\n      final PsiType returnType = psiMethod.getReturnType();\n      if (returnType == null) return null;\n      final PsiCodeBlock body = psiMethod.getBody();\n      final PsiStatement[] statements = body == null ? null : body.getStatements();\n      final PsiStatement statement = statements == null || statements.length != 1 ? null : statements[0];\n      final PsiElement target;\n      if (PsiType.VOID.equals(returnType)) {\n        final PsiExpression expression =\n          statement instanceof PsiExpressionStatement ? ((PsiExpressionStatement)statement).getExpression() : null;\n        target = expression instanceof PsiAssignmentExpression ? ((PsiAssignmentExpression)expression).getLExpression() : null;\n      }\n      else {\n        target = statement instanceof PsiReturnStatement ? ((PsiReturnStatement)statement).getReturnValue() : null;\n      }\n      final PsiElement resolved = target instanceof PsiReferenceExpression ? ((PsiReferenceExpression)target).resolve() : null;\n      if (resolved instanceof PsiField) {\n        final PsiField field = (PsiField)resolved;\n        if (psiMember.getContainingClass() == field.getContainingClass() ||\n            psiMember.getContainingClass().isInheritor(field.getContainingClass(), true)) {\n          return field;\n        }\n      }\n    }\n    return null;\n  }","commit_id":"5411bec17b74ad3bebff2eeecdcb51ec18bb93db","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static String getPropertyName(final PsiMember member) {\n    if (member instanceof PsiMethod) {\n      return getPropertyName((PsiMethod)member);\n    }\n    else if (member instanceof PsiField) {\n      return member.getName();\n    }\n    else {\n      return null;\n    }\n  }","id":105348,"modified_method":"@Nullable\n  public static String getPropertyName(final PsiMember member) {\n    if (member instanceof PsiMethod) {\n      return getPropertyName((PsiMethod)member);\n    }\n    if (member instanceof PsiField) {\n      return member.getName();\n    }\n    return null;\n  }","commit_id":"5411bec17b74ad3bebff2eeecdcb51ec18bb93db","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static String[] getWritableProperties(PsiClass aClass, boolean includeSuperClass) {\n    List<String> result = new ArrayList<String>();\n\n    PsiMethod[] methods;\n\n    if (includeSuperClass) {\n      methods = aClass.getAllMethods();\n    }\n    else {\n      methods = aClass.getMethods();\n    }\n\n    for (PsiMethod method : methods) {\n      if (CommonClassNames.JAVA_LANG_OBJECT.equals(method.getContainingClass().getQualifiedName())) continue;\n\n      if (isSimplePropertySetter(method)) {\n        result.add(getPropertyName(method));\n      }\n    }\n\n    return ArrayUtil.toStringArray(result);\n  }","id":105349,"modified_method":"public static String[] getWritableProperties(PsiClass aClass, boolean includeSuperClass) {\n    List<String> result = new ArrayList<String>();\n\n    PsiMethod[] methods = includeSuperClass ? aClass.getAllMethods() : aClass.getMethods();\n\n    for (PsiMethod method : methods) {\n      if (CommonClassNames.JAVA_LANG_OBJECT.equals(method.getContainingClass().getQualifiedName())) continue;\n\n      if (isSimplePropertySetter(method)) {\n        result.add(getPropertyName(method));\n      }\n    }\n\n    return ArrayUtil.toStringArray(result);\n  }","commit_id":"5411bec17b74ad3bebff2eeecdcb51ec18bb93db","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static PsiMethod findPropertyMethod(@NotNull PsiClass aClass,\n                                              @NotNull String prefix,\n                                              @NotNull String propertyName,\n                                              @NotNull PsiField field1) {\n    final PsiMethod[] methods = aClass.findMethodsByName(prefix + propertyName, true);\n    for (PsiMethod method : methods) {\n      final PsiField field2;\n      if (prefix.equals(\"set\")) {\n        field2 = getFieldOfSetter(method);\n      }\n      else {\n        field2 = getFieldOfGetter(method);\n      }\n      if (field1.equals(field2)) {\n        return method;\n      }\n    }\n    return null;\n  }","id":105350,"modified_method":"private static PsiMethod findPropertyMethod(@NotNull PsiClass aClass,\n                                              @NotNull String prefix,\n                                              @NotNull String propertyName,\n                                              @NotNull PsiField field1) {\n    final PsiMethod[] methods = aClass.findMethodsByName(prefix + propertyName, true);\n    for (PsiMethod method : methods) {\n      final PsiField field2 = prefix.equals(\"set\") ? getFieldOfSetter(method) : getFieldOfGetter(method);\n      if (field1.equals(field2)) {\n        return method;\n      }\n    }\n    return null;\n  }","commit_id":"5411bec17b74ad3bebff2eeecdcb51ec18bb93db","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static PsiMethod getReversePropertyMethod(PsiMethod propertyMethod) {\n    if (propertyMethod == null) {\n      return null;\n    }\n    final PsiClass aClass = propertyMethod.getContainingClass();\n    if (aClass == null) {\n      return null;\n    }\n    final String methodName = propertyMethod.getName();\n    final String prefix;\n    if (methodName.startsWith(\"get\")) {\n      prefix = \"get\";\n    }\n    else if (methodName.startsWith(IS_PREFIX)) {\n      prefix = IS_PREFIX;\n    }\n    else if (methodName.startsWith(\"set\")) {\n      prefix = \"set\";\n    }\n    else {\n      return null;\n    }\n    final String name = methodName.substring(prefix.length());\n    final PsiField field;\n    if (prefix.equals(\"set\")) {\n      field = getFieldOfSetter(propertyMethod);\n    }\n    else {\n      field = getFieldOfGetter(propertyMethod);\n    }\n    if (field == null) {\n      return null;\n    }\n    if (prefix.equals(\"set\")) {\n      final PsiMethod result = findPropertyMethod(aClass, \"get\", name, field);\n      if (result != null) {\n        return result;\n      }\n      return findPropertyMethod(aClass, IS_PREFIX, name, field);\n    }\n    else {\n      return findPropertyMethod(aClass, \"set\", name, field);\n    }\n  }","id":105351,"modified_method":"@Nullable\n  public static PsiMethod getReversePropertyMethod(PsiMethod propertyMethod) {\n    if (propertyMethod == null) {\n      return null;\n    }\n    final PsiClass aClass = propertyMethod.getContainingClass();\n    if (aClass == null) {\n      return null;\n    }\n    final String methodName = propertyMethod.getName();\n    final String prefix;\n    if (methodName.startsWith(\"get\")) {\n      prefix = \"get\";\n    }\n    else if (methodName.startsWith(IS_PREFIX)) {\n      prefix = IS_PREFIX;\n    }\n    else if (methodName.startsWith(\"set\")) {\n      prefix = \"set\";\n    }\n    else {\n      return null;\n    }\n    final String name = methodName.substring(prefix.length());\n    final PsiField field = prefix.equals(\"set\") ? getFieldOfSetter(propertyMethod) : getFieldOfGetter(propertyMethod);\n    if (field == null) {\n      return null;\n    }\n    if (prefix.equals(\"set\")) {\n      final PsiMethod result = findPropertyMethod(aClass, \"get\", name, field);\n      if (result != null) {\n        return result;\n      }\n      return findPropertyMethod(aClass, IS_PREFIX, name, field);\n    }\n    else {\n      return findPropertyMethod(aClass, \"set\", name, field);\n    }\n  }","commit_id":"5411bec17b74ad3bebff2eeecdcb51ec18bb93db","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static PsiType getPropertyType(final PsiMember member) {\n    if (member instanceof PsiField) {\n      return ((PsiField)member).getType();\n    }\n    else if (member instanceof PsiMethod) {\n      final PsiMethod psiMethod = (PsiMethod)member;\n      if (isSimplePropertyGetter(psiMethod)) {\n        return psiMethod.getReturnType();\n      }\n      else if (isSimplePropertySetter(psiMethod)) {\n        return psiMethod.getParameterList().getParameters()[0].getType();\n      }\n    }\n    return null;\n  }","id":105352,"modified_method":"@Nullable\n  public static PsiType getPropertyType(final PsiMember member) {\n    if (member instanceof PsiField) {\n      return ((PsiField)member).getType();\n    }\n    if (member instanceof PsiMethod) {\n      final PsiMethod psiMethod = (PsiMethod)member;\n      if (isSimplePropertyGetter(psiMethod)) {\n        return psiMethod.getReturnType();\n      }\n      else if (isSimplePropertySetter(psiMethod)) {\n        return psiMethod.getParameterList().getParameters()[0].getType();\n      }\n    }\n    return null;\n  }","commit_id":"5411bec17b74ad3bebff2eeecdcb51ec18bb93db","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static PsiMethod findPropertySetter(PsiClass aClass,\n                                             String propertyName,\n                                             boolean isStatic,\n                                             boolean checkSuperClasses) {\n    if (aClass == null) return null;\n    PsiMethod[] methods;\n    if (checkSuperClasses) {\n      methods = aClass.getAllMethods();\n    }\n    else {\n      methods = aClass.getMethods();\n    }\n\n    for (PsiMethod method : methods) {\n      if (method.hasModifierProperty(PsiModifier.STATIC) != isStatic) continue;\n\n      if (isSimplePropertySetter(method)) {\n        if (getPropertyNameBySetter(method).equals(propertyName)) {\n          return method;\n        }\n      }\n    }\n\n    return null;\n  }","id":105353,"modified_method":"@Nullable\n  public static PsiMethod findPropertySetter(PsiClass aClass,\n                                             String propertyName,\n                                             boolean isStatic,\n                                             boolean checkSuperClasses) {\n    if (aClass == null) return null;\n    PsiMethod[] methods = checkSuperClasses ? aClass.getAllMethods() : aClass.getMethods();\n\n    for (PsiMethod method : methods) {\n      if (method.hasModifierProperty(PsiModifier.STATIC) != isStatic) continue;\n\n      if (isSimplePropertySetter(method)) {\n        if (getPropertyNameBySetter(method).equals(propertyName)) {\n          return method;\n        }\n      }\n    }\n\n    return null;\n  }","commit_id":"5411bec17b74ad3bebff2eeecdcb51ec18bb93db","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean filterMethods(final PsiMethod method) {\n    if (method.hasModifierProperty(PsiModifier.STATIC) || !method.hasModifierProperty(PsiModifier.PUBLIC)) return true;\n\n    PsiClass psiClass = method.getContainingClass();\n    if (psiClass == null) return false;\n    final String className = psiClass.getQualifiedName();\n    return className != null && className.equals(CommonClassNames.JAVA_LANG_OBJECT);\n  }","id":105354,"modified_method":"private static boolean filterMethods(final PsiMethod method) {\n    if (method.hasModifierProperty(PsiModifier.STATIC) || !method.hasModifierProperty(PsiModifier.PUBLIC)) return true;\n\n    PsiClass psiClass = method.getContainingClass();\n    if (psiClass == null) return false;\n    final String className = psiClass.getQualifiedName();\n    return CommonClassNames.JAVA_LANG_OBJECT.equals(className);\n  }","commit_id":"5411bec17b74ad3bebff2eeecdcb51ec18bb93db","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static String[] getReadableProperties(PsiClass aClass, boolean includeSuperClass) {\n    List<String> result = new ArrayList<String>();\n\n    PsiMethod[] methods;\n    if (includeSuperClass) {\n      methods = aClass.getAllMethods();\n    }\n    else {\n      methods = aClass.getMethods();\n    }\n\n    for (PsiMethod method : methods) {\n      if (CommonClassNames.JAVA_LANG_OBJECT.equals(method.getContainingClass().getQualifiedName())) continue;\n\n      if (isSimplePropertyGetter(method)) {\n        result.add(getPropertyName(method));\n      }\n    }\n\n    return ArrayUtil.toStringArray(result);\n  }","id":105355,"modified_method":"public static String[] getReadableProperties(PsiClass aClass, boolean includeSuperClass) {\n    List<String> result = new ArrayList<String>();\n\n    PsiMethod[] methods = includeSuperClass ? aClass.getAllMethods() : aClass.getMethods();\n\n    for (PsiMethod method : methods) {\n      if (CommonClassNames.JAVA_LANG_OBJECT.equals(method.getContainingClass().getQualifiedName())) continue;\n\n      if (isSimplePropertyGetter(method)) {\n        result.add(getPropertyName(method));\n      }\n    }\n\n    return ArrayUtil.toStringArray(result);\n  }","commit_id":"5411bec17b74ad3bebff2eeecdcb51ec18bb93db","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static PsiTypeElement getPropertyTypeElement(final PsiMember member) {\n    if (member instanceof PsiField) {\n      return ((PsiField)member).getTypeElement();\n    }\n    else if (member instanceof PsiMethod) {\n      final PsiMethod psiMethod = (PsiMethod)member;\n      if (isSimplePropertyGetter(psiMethod)) {\n        return psiMethod.getReturnTypeElement();\n      }\n      else if (isSimplePropertySetter(psiMethod)) {\n        return psiMethod.getParameterList().getParameters()[0].getTypeElement();\n      }\n    }\n    return null;\n  }","id":105356,"modified_method":"@Nullable\n  public static PsiTypeElement getPropertyTypeElement(final PsiMember member) {\n    if (member instanceof PsiField) {\n      return ((PsiField)member).getTypeElement();\n    }\n    if (member instanceof PsiMethod) {\n      final PsiMethod psiMethod = (PsiMethod)member;\n      if (isSimplePropertyGetter(psiMethod)) {\n        return psiMethod.getReturnTypeElement();\n      }\n      else if (isSimplePropertySetter(psiMethod)) {\n        return psiMethod.getParameterList().getParameters()[0].getTypeElement();\n      }\n    }\n    return null;\n  }","commit_id":"5411bec17b74ad3bebff2eeecdcb51ec18bb93db","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void applyCodeStyleSettings(final List<OutPair> outPairs, final CodeStyleSettings codeStyleSettings,\n                                             final VirtualFile file) {\n    // Apply indent options\n    final String indentSize = Utils.configValueForKey(outPairs, indentSizeKey);\n    final String tabWidth = Utils.configValueForKey(outPairs, tabWidthKey);\n    final String indentStyle = Utils.configValueForKey(outPairs, indentStyleKey);\n    final FileType fileType = file.getFileType();\n    final Language language = fileType instanceof LanguageFileType ? ((LanguageFileType)fileType).getLanguage() :\n                              PlainTextLanguage.INSTANCE;\n    final CommonCodeStyleSettings commonSettings = codeStyleSettings.getCommonSettings(language);\n    final CommonCodeStyleSettings.IndentOptions indentOptions = commonSettings.getIndentOptions();\n    applyIndentOptions(indentOptions, indentSize, tabWidth, indentStyle, file.getCanonicalPath());\n  }","id":105357,"modified_method":"private void applyCodeStyleSettings(final List<OutPair> outPairs, final CodeStyleSettings codeStyleSettings,\n                                             final VirtualFile file) {\n    // Apply indent options\n    final String indentSize = Utils.configValueForKey(outPairs, indentSizeKey);\n    final String tabWidth = Utils.configValueForKey(outPairs, tabWidthKey);\n    final String indentStyle = Utils.configValueForKey(outPairs, indentStyleKey);\n    final FileType fileType = file.getFileType();\n    final Language language = fileType instanceof LanguageFileType ? ((LanguageFileType)fileType).getLanguage() :\n                              PlainTextLanguage.INSTANCE;\n    final CommonCodeStyleSettings commonSettings = codeStyleSettings.getCommonSettings(language);\n    final CommonCodeStyleSettings.IndentOptions indentOptions = commonSettings.getIndentOptions();\n    applyIndentOptions(indentOptions, indentSize, tabWidth, indentStyle, file.getCanonicalPath());\n  }","commit_id":"c0941781b84ce98467a26c32b9b736f8f17675b7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void applyIndentOptions(CommonCodeStyleSettings.IndentOptions indentOptions,\n                                         String indentSize, String tabWidth, String indentStyle, String filePath) {\n    final String calculatedIndentSize = calculateIndentSize(tabWidth, indentSize);\n    final String calculatedTabWidth = calculateTabWidth(tabWidth, indentSize);\n    if (!calculatedIndentSize.isEmpty()) {\n      if (applyIndentSize(indentOptions, calculatedIndentSize)) {\n        LOG.debug(Utils.appliedConfigMessage(calculatedIndentSize, indentSizeKey, filePath));\n      }\n      else {\n        LOG.warn(Utils.invalidConfigMessage(calculatedIndentSize, indentSizeKey, filePath));\n      }\n    }\n    if (!calculatedTabWidth.isEmpty()) {\n      if (applyTabWidth(indentOptions, calculatedTabWidth)) {\n        LOG.debug(Utils.appliedConfigMessage(calculatedTabWidth, tabWidthKey, filePath));\n      }\n      else {\n        LOG.warn(Utils.invalidConfigMessage(calculatedTabWidth, tabWidthKey, filePath));\n      }\n    }\n    if (!indentStyle.isEmpty()) {\n      if (applyIndentStyle(indentOptions, indentStyle)) {\n        LOG.debug(Utils.appliedConfigMessage(indentStyle, indentStyleKey, filePath));\n      }\n      else {\n        LOG.warn(Utils.invalidConfigMessage(indentStyle, indentStyleKey, filePath));\n      }\n    }\n  }","id":105358,"modified_method":"private void applyIndentOptions(CommonCodeStyleSettings.IndentOptions indentOptions,\n                                         String indentSize, String tabWidth, String indentStyle, String filePath) {\n    final String calculatedIndentSize = calculateIndentSize(tabWidth, indentSize);\n    final String calculatedTabWidth = calculateTabWidth(tabWidth, indentSize);\n    if (!calculatedIndentSize.isEmpty()) {\n      if (applyIndentSize(indentOptions, calculatedIndentSize)) {\n        Utils.appliedConfigMessage(myProject, calculatedIndentSize, indentSizeKey, filePath);\n      }\n      else {\n        Utils.invalidConfigMessage(myProject, calculatedIndentSize, indentSizeKey, filePath);\n      }\n    }\n    if (!calculatedTabWidth.isEmpty()) {\n      if (applyTabWidth(indentOptions, calculatedTabWidth)) {\n        Utils.appliedConfigMessage(myProject, calculatedTabWidth, tabWidthKey, filePath);\n      }\n      else {\n        Utils.invalidConfigMessage(myProject, calculatedTabWidth, tabWidthKey, filePath);\n      }\n    }\n    if (!indentStyle.isEmpty()) {\n      if (applyIndentStyle(indentOptions, indentStyle)) {\n        Utils.appliedConfigMessage(myProject, indentStyle, indentStyleKey, filePath);\n      }\n      else {\n        Utils.invalidConfigMessage(myProject, indentStyle, indentStyleKey, filePath);\n      }\n    }\n  }","commit_id":"c0941781b84ce98467a26c32b9b736f8f17675b7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void applySettings(final VirtualFile file) {\n    if (file != null && file.isInLocalFileSystem()) {\n      // Always drop any current temporary settings so that the defaults will be applied if\n      // this is a non-editorconfig-managed file\n      codeStyleSettingsManager.dropTemporarySettings();\n      // Prepare a new settings object, which will maintain the standard settings if no\n      // editorconfig settings apply\n      final CodeStyleSettings currentSettings = codeStyleSettingsManager.getCurrentSettings();\n      final CodeStyleSettings newSettings = new CodeStyleSettings();\n      newSettings.copyFrom(currentSettings);\n      // Get editorconfig settings\n      final String filePath = file.getCanonicalPath();\n      final SettingsProviderComponent settingsProvider = SettingsProviderComponent.getInstance();\n      final List<OutPair> outPairs = settingsProvider.getOutPairs(filePath);\n      // Apply editorconfig settings for the current editor\n      applyCodeStyleSettings(outPairs, newSettings, file);\n      codeStyleSettingsManager.setTemporarySettings(newSettings);\n      final EditorEx currentEditor = (EditorEx)FileEditorManager.getInstance(project).getSelectedTextEditor();\n      if (currentEditor != null) {\n        currentEditor.reinitSettings();\n      }\n    }\n  }","id":105359,"modified_method":"private void applySettings(final VirtualFile file) {\n    if (file != null && file.isInLocalFileSystem()) {\n      // Always drop any current temporary settings so that the defaults will be applied if\n      // this is a non-editorconfig-managed file\n      codeStyleSettingsManager.dropTemporarySettings();\n      // Prepare a new settings object, which will maintain the standard settings if no\n      // editorconfig settings apply\n      final CodeStyleSettings currentSettings = codeStyleSettingsManager.getCurrentSettings();\n      final CodeStyleSettings newSettings = new CodeStyleSettings();\n      newSettings.copyFrom(currentSettings);\n      // Get editorconfig settings\n      final String filePath = file.getCanonicalPath();\n      final SettingsProviderComponent settingsProvider = SettingsProviderComponent.getInstance();\n      final List<OutPair> outPairs = settingsProvider.getOutPairs(filePath);\n      // Apply editorconfig settings for the current editor\n      applyCodeStyleSettings(outPairs, newSettings, file);\n      codeStyleSettingsManager.setTemporarySettings(newSettings);\n      final EditorEx currentEditor = (EditorEx)FileEditorManager.getInstance(myProject).getSelectedTextEditor();\n      if (currentEditor != null) {\n        currentEditor.reinitSettings();\n      }\n    }\n  }","commit_id":"c0941781b84ce98467a26c32b9b736f8f17675b7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public CodeStyleManager(Project project) {\n    codeStyleSettingsManager = CodeStyleSettingsManager.getInstance(project);\n    this.project = project;\n  }","id":105360,"modified_method":"public CodeStyleManager(Project project) {\n    codeStyleSettingsManager = CodeStyleSettingsManager.getInstance(project);\n    myProject = project;\n  }","commit_id":"c0941781b84ce98467a26c32b9b736f8f17675b7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void windowGainedFocus(WindowEvent e) {\n    final Editor currentEditor = FileEditorManager.getInstance(project).getSelectedTextEditor();\n    if (currentEditor != null) {\n      final Document currentDocument = currentEditor.getDocument();\n      final VirtualFile currentFile = FileDocumentManager.getInstance().getFile(currentDocument);\n      applySettings(currentFile);\n    }\n  }","id":105361,"modified_method":"@Override\n  public void windowGainedFocus(WindowEvent e) {\n    final Editor currentEditor = FileEditorManager.getInstance(myProject).getSelectedTextEditor();\n    if (currentEditor != null) {\n      final Document currentDocument = currentEditor.getDocument();\n      final VirtualFile currentFile = FileDocumentManager.getInstance().getFile(currentDocument);\n      applySettings(currentFile);\n    }\n  }","commit_id":"c0941781b84ce98467a26c32b9b736f8f17675b7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public ConfigProjectComponent(Project project) {\n    this.project = project;\n\n    // Register project-level config managers\n    MessageBus bus = project.getMessageBus();\n    codeStyleManager = new CodeStyleManager(project);\n    EditorSettingsManager editorSettingsManager = new EditorSettingsManager();\n    EncodingManager encodingManager = new EncodingManager(project);\n    LineEndingsManager lineEndingsManager = new LineEndingsManager(project);\n    bus.connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, codeStyleManager);\n    bus.connect().subscribe(AppTopics.FILE_DOCUMENT_SYNC, encodingManager);\n    bus.connect().subscribe(AppTopics.FILE_DOCUMENT_SYNC, editorSettingsManager);\n    bus.connect().subscribe(AppTopics.FILE_DOCUMENT_SYNC, lineEndingsManager);\n  }","id":105362,"modified_method":"public ConfigProjectComponent(Project project) {\n    this.project = project;\n\n    // Register project-level config managers\n    MessageBus bus = project.getMessageBus();\n    codeStyleManager = new CodeStyleManager(project);\n    EditorSettingsManager editorSettingsManager = new EditorSettingsManager(project);\n    EncodingManager encodingManager = new EncodingManager(project);\n    LineEndingsManager lineEndingsManager = new LineEndingsManager(project);\n    bus.connect().subscribe(FileEditorManagerListener.FILE_EDITOR_MANAGER, codeStyleManager);\n    bus.connect().subscribe(AppTopics.FILE_DOCUMENT_SYNC, encodingManager);\n    bus.connect().subscribe(AppTopics.FILE_DOCUMENT_SYNC, editorSettingsManager);\n    bus.connect().subscribe(AppTopics.FILE_DOCUMENT_SYNC, lineEndingsManager);\n  }","commit_id":"c0941781b84ce98467a26c32b9b736f8f17675b7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void applySettings(VirtualFile file) {\n    if (file == null || !file.isInLocalFileSystem()) return;\n    // Get editorconfig settings\n    final String filePath = file.getCanonicalPath();\n    final SettingsProviderComponent settingsProvider = SettingsProviderComponent.getInstance();\n    final List<EditorConfig.OutPair> outPairs = settingsProvider.getOutPairs(filePath);\n    // Apply trailing spaces setting\n    final String trimTrailingWhitespace = Utils.configValueForKey(outPairs, trimTrailingWhitespaceKey);\n    applyConfigValueToUserData(file, TrailingSpacesStripper.OVERRIDE_STRIP_TRAILING_SPACES_KEY,\n                               trimTrailingWhitespaceKey, trimTrailingWhitespace, trimMap);\n    // Apply final newline setting\n    final String insertFinalNewline = Utils.configValueForKey(outPairs, insertFinalNewlineKey);\n    applyConfigValueToUserData(file, TrailingSpacesStripper.OVERRIDE_ENSURE_NEWLINE_KEY,\n                               insertFinalNewlineKey, insertFinalNewline, newlineMap);\n  }","id":105363,"modified_method":"private void applySettings(VirtualFile file) {\n    if (file == null || !file.isInLocalFileSystem()) return;\n    // Get editorconfig settings\n    final String filePath = file.getCanonicalPath();\n    final SettingsProviderComponent settingsProvider = SettingsProviderComponent.getInstance();\n    final List<EditorConfig.OutPair> outPairs = settingsProvider.getOutPairs(filePath);\n    // Apply trailing spaces setting\n    final String trimTrailingWhitespace = Utils.configValueForKey(outPairs, trimTrailingWhitespaceKey);\n    applyConfigValueToUserData(file, TrailingSpacesStripper.OVERRIDE_STRIP_TRAILING_SPACES_KEY,\n                               trimTrailingWhitespaceKey, trimTrailingWhitespace, trimMap);\n    // Apply final newline setting\n    final String insertFinalNewline = Utils.configValueForKey(outPairs, insertFinalNewlineKey);\n    applyConfigValueToUserData(file, TrailingSpacesStripper.OVERRIDE_ENSURE_NEWLINE_KEY,\n                               insertFinalNewlineKey, insertFinalNewline, newlineMap);\n  }","commit_id":"c0941781b84ce98467a26c32b9b736f8f17675b7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static <T> void applyConfigValueToUserData(VirtualFile file, Key<T> userDataKey, String editorConfigKey,\n                                                     String configValue, Map<String, T> configMap) {\n    if (configValue.isEmpty()) {\n      file.putUserData(userDataKey, null);\n    }\n    else {\n      final T data = configMap.get(configValue);\n      if (data == null) {\n        LOG.warn(Utils.invalidConfigMessage(configValue, editorConfigKey, file.getCanonicalPath()));\n      }\n      else {\n        file.putUserData(userDataKey, data);\n        LOG.debug(\"Applied \" + editorConfigKey + \" settings for: \" + file.getCanonicalPath());\n      }\n    }\n  }","id":105364,"modified_method":"private <T> void applyConfigValueToUserData(VirtualFile file, Key<T> userDataKey, String editorConfigKey,\n                                              String configValue, Map<String, T> configMap) {\n    if (configValue.isEmpty()) {\n      file.putUserData(userDataKey, null);\n    }\n    else {\n      final T data = configMap.get(configValue);\n      if (data == null) {\n        Utils.invalidConfigMessage(myProject, configValue, editorConfigKey, file.getCanonicalPath());\n      }\n      else {\n        file.putUserData(userDataKey, data);\n        Utils.appliedConfigMessage(myProject, configValue, editorConfigKey, file.getCanonicalPath());\n      }\n    }\n  }","commit_id":"c0941781b84ce98467a26c32b9b736f8f17675b7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void applySettings(VirtualFile file) {\n    if (file == null || !file.isInLocalFileSystem()) return;\n    // Prevent \"setEncoding\" calling \"saveAll\" from causing an endless loop\n    isApplyingSettings = true;\n    final String filePath = file.getCanonicalPath();\n    final List<OutPair> outPairs = SettingsProviderComponent.getInstance().getOutPairs(filePath);\n    final EncodingProjectManager encodingProjectManager = EncodingProjectManager.getInstance(project);\n    final String charset = Utils.configValueForKey(outPairs, charsetKey);\n    if (!charset.isEmpty()) {\n      if (encodingMap.containsKey(charset)) {\n        encodingProjectManager.setEncoding(file, encodingMap.get(charset));\n        LOG.debug(Utils.appliedConfigMessage(charset, charsetKey, filePath));\n      }\n      else {\n        LOG.warn(Utils.invalidConfigMessage(charset, charsetKey, filePath));\n      }\n    }\n    isApplyingSettings = false;\n  }","id":105365,"modified_method":"private void applySettings(VirtualFile file) {\n    if (file == null || !file.isInLocalFileSystem()) return;\n    // Prevent \"setEncoding\" calling \"saveAll\" from causing an endless loop\n    isApplyingSettings = true;\n    final String filePath = file.getCanonicalPath();\n    final List<OutPair> outPairs = SettingsProviderComponent.getInstance().getOutPairs(filePath);\n    final EncodingProjectManager encodingProjectManager = EncodingProjectManager.getInstance(myProject);\n    final String charset = Utils.configValueForKey(outPairs, charsetKey);\n    if (!charset.isEmpty()) {\n      if (encodingMap.containsKey(charset)) {\n        encodingProjectManager.setEncoding(file, encodingMap.get(charset));\n        Utils.appliedConfigMessage(myProject, charset, charsetKey, filePath);\n      }\n      else {\n        Utils.invalidConfigMessage(myProject, charset, charsetKey, filePath);\n      }\n    }\n    isApplyingSettings = false;\n  }","commit_id":"c0941781b84ce98467a26c32b9b736f8f17675b7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public EncodingManager(Project project) {\n    this.project = project;\n    isApplyingSettings = false;\n  }","id":105366,"modified_method":"public EncodingManager(Project project) {\n    this.myProject = project;\n    isApplyingSettings = false;\n  }","commit_id":"c0941781b84ce98467a26c32b9b736f8f17675b7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void applySettings(VirtualFile file) {\n    if (file == null || !file.isInLocalFileSystem()) return;\n\n    final String filePath = file.getCanonicalPath();\n    final List<EditorConfig.OutPair> outPairs = SettingsProviderComponent.getInstance().getOutPairs(filePath);\n    final String lineEndings = Utils.configValueForKey(outPairs, lineEndingsKey);\n    if (!lineEndings.isEmpty()) {\n      try {\n        LineSeparator separator = LineSeparator.valueOf(lineEndings.toUpperCase(Locale.US));\n        String oldSeparator = file.getDetectedLineSeparator();\n        String newSeparator = separator.getSeparatorString();\n        if (!StringUtil.equals(oldSeparator, newSeparator)) {\n          file.setDetectedLineSeparator(newSeparator);\n          if (!statusBarUpdated) {\n            statusBarUpdated = true;\n            updateStatusBar();\n          }\n          LOG.debug(Utils.appliedConfigMessage(lineEndings, lineEndingsKey, filePath));\n        }\n      }\n      catch (IllegalArgumentException e) {\n        LOG.warn(Utils.invalidConfigMessage(lineEndings, lineEndingsKey, filePath));\n      }\n    }\n  }","id":105367,"modified_method":"private void applySettings(VirtualFile file) {\n    if (file == null || !file.isInLocalFileSystem()) return;\n\n    final String filePath = file.getCanonicalPath();\n    final List<EditorConfig.OutPair> outPairs = SettingsProviderComponent.getInstance().getOutPairs(filePath);\n    final String lineEndings = Utils.configValueForKey(outPairs, lineEndingsKey);\n    if (!lineEndings.isEmpty()) {\n      try {\n        LineSeparator separator = LineSeparator.valueOf(lineEndings.toUpperCase(Locale.US));\n        String oldSeparator = file.getDetectedLineSeparator();\n        String newSeparator = separator.getSeparatorString();\n        if (!StringUtil.equals(oldSeparator, newSeparator)) {\n          file.setDetectedLineSeparator(newSeparator);\n          if (!statusBarUpdated) {\n            statusBarUpdated = true;\n            updateStatusBar();\n          }\n          Utils.appliedConfigMessage(myProject, lineEndings, lineEndingsKey, filePath);\n        }\n      }\n      catch (IllegalArgumentException e) {\n        Utils.invalidConfigMessage(myProject, lineEndings, lineEndingsKey, filePath);\n      }\n    }\n  }","commit_id":"c0941781b84ce98467a26c32b9b736f8f17675b7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void updateStatusBar() {\n    ApplicationManager.getApplication().invokeLater(new Runnable() {\n      @Override\n      public void run() {\n        IdeFrame frame = WindowManager.getInstance().getIdeFrame(project);\n        StatusBar statusBar = frame.getStatusBar();\n        StatusBarWidget widget = statusBar != null ? statusBar.getWidget(\"LineSeparator\") : null;\n\n        if (widget instanceof LineSeparatorPanel) {\n          FileEditorManagerEvent event = new FileEditorManagerEvent(FileEditorManager.getInstance(project),\n                                                                    null, null, null, null);\n          ((LineSeparatorPanel)widget).selectionChanged(event);\n        }\n      }\n    });\n  }","id":105368,"modified_method":"private void updateStatusBar() {\n    ApplicationManager.getApplication().invokeLater(new Runnable() {\n      @Override\n      public void run() {\n        IdeFrame frame = WindowManager.getInstance().getIdeFrame(myProject);\n        StatusBar statusBar = frame.getStatusBar();\n        StatusBarWidget widget = statusBar != null ? statusBar.getWidget(\"LineSeparator\") : null;\n\n        if (widget instanceof LineSeparatorPanel) {\n          FileEditorManagerEvent event = new FileEditorManagerEvent(FileEditorManager.getInstance(myProject),\n                                                                    null, null, null, null);\n          ((LineSeparatorPanel)widget).selectionChanged(event);\n        }\n      }\n    });\n  }","commit_id":"c0941781b84ce98467a26c32b9b736f8f17675b7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public LineEndingsManager(Project project) {\n    this.project = project;\n  }","id":105369,"modified_method":"public LineEndingsManager(Project project) {\n    this.myProject = project;\n  }","commit_id":"c0941781b84ce98467a26c32b9b736f8f17675b7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static String appliedConfigMessage(String configValue, String configKey, String filePath) {\n    return \"Applied \\\"\" + configValue + \"\\\" as \" + configKey + \" for file \" + filePath;\n  }","id":105370,"modified_method":"public static void appliedConfigMessage(Project project, String configValue, String configKey, String filePath) {\n    EditorConfigNotifier.getInstance().info(project, \"Applied .editorconfig settings\");\n  }","commit_id":"c0941781b84ce98467a26c32b9b736f8f17675b7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static String invalidConfigMessage(String configValue, String configKey, String filePath) {\n    return \"\\\"\" + configValue + \"\\\" is not a valid value for \" + configKey + \" for file \" + filePath;\n  }","id":105371,"modified_method":"public static void invalidConfigMessage(Project project, String configValue, String configKey, String filePath) {\n    EditorConfigNotifier.getInstance().error(project, configValue, \"\\\"\" + configValue + \"\\\" is not a valid value for \" + configKey + \" for file \" + filePath);\n  }","commit_id":"c0941781b84ce98467a26c32b9b736f8f17675b7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void run(DatasetContext context) throws Exception {\n    BatchPhaseSpec phaseSpec = GSON.fromJson(sec.getSpecification().getProperty(Constants.PIPELINEID),\n                                             BatchPhaseSpec.class);\n\n    try (InputStream is = new FileInputStream(sec.getLocalizationContext().getLocalFile(\"ETLSpark.config\"))) {\n      sourceFactory = SparkBatchSourceFactory.deserialize(is);\n      sinkFactory = SparkBatchSinkFactory.deserialize(is);\n      stagePartitions = GSON.fromJson(new DataInputStream(is).readUTF(), MAP_TYPE);\n    }\n    datasetContext = context;\n    runPipeline(phaseSpec.getPhase(), BatchSource.PLUGIN_TYPE, sec);\n  }","id":105372,"modified_method":"@Override\n  public void run(DatasetContext context) throws Exception {\n    BatchPhaseSpec phaseSpec = GSON.fromJson(sec.getSpecification().getProperty(Constants.PIPELINEID),\n                                             BatchPhaseSpec.class);\n\n    try (InputStream is = new FileInputStream(sec.getLocalizationContext().getLocalFile(\"ETLSpark.config\"))) {\n      sourceFactory = SparkBatchSourceFactory.deserialize(is);\n      sinkFactory = SparkBatchSinkFactory.deserialize(is);\n      DataInputStream dataInputStream = new DataInputStream(is);\n      stagePartitions = GSON.fromJson(dataInputStream.readUTF(), MAP_TYPE);\n    }\n    datasetContext = context;\n    runPipeline(phaseSpec.getPhase(), BatchSource.PLUGIN_TYPE, sec);\n  }","commit_id":"5ae2c7cbc66aa187b063b89535ccbe0fdded4673","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testInnerJoin() throws Exception {\n    Schema inputSchema1 = Schema.recordOf(\n      \"customerRecord\",\n      Schema.Field.of(\"customer_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"customer_name\", Schema.of(Schema.Type.STRING))\n    );\n\n    Schema inputSchema2 = Schema.recordOf(\n      \"itemRecord\",\n      Schema.Field.of(\"item_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"item_price\", Schema.of(Schema.Type.LONG)),\n      Schema.Field.of(\"cust_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"cust_name\", Schema.of(Schema.Type.STRING))\n    );\n\n    Schema inputSchema3 = Schema.recordOf(\n      \"transactionRecord\",\n      Schema.Field.of(\"t_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"c_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"c_name\", Schema.of(Schema.Type.STRING))\n    );\n\n    ETLBatchConfig etlConfig = ETLBatchConfig.builder(\"* * * * *\")\n      .addStage(new ETLStage(\"source1\", MockSource.getPlugin(\"source1InnerJoinInput\")))\n      .addStage(new ETLStage(\"source2\", MockSource.getPlugin(\"source2InnerJoinInput\")))\n      .addStage(new ETLStage(\"source3\", MockSource.getPlugin(\"source3InnerJoinInput\")))\n      .addStage(new ETLStage(\"t1\", FieldsPrefixTransform.getPlugin(\"\", inputSchema1.toString())))\n      .addStage(new ETLStage(\"t2\", FieldsPrefixTransform.getPlugin(\"\", inputSchema2.toString())))\n      .addStage(new ETLStage(\"t3\", FieldsPrefixTransform.getPlugin(\"\", inputSchema3.toString())))\n      .addStage(new ETLStage(\"testJoiner\", MockJoiner.getPlugin(\"t1.customer_id=t2.cust_id=t3.c_id&\" +\n                                                                  \"t1.customer_name=t2.cust_name=t3.c_name\",\n                                                                \"t1,t2,t3\", \"\")))\n      .addStage(new ETLStage(\"sink1\", MockSink.getPlugin(\"innerJoinOutput\")))\n      .addConnection(\"source1\", \"t1\")\n      .addConnection(\"source2\", \"t2\")\n      .addConnection(\"source3\", \"t3\")\n      .addConnection(\"t1\", \"testJoiner\")\n      .addConnection(\"t2\", \"testJoiner\")\n      .addConnection(\"t3\", \"testJoiner\")\n      .addConnection(\"testJoiner\", \"sink1\")\n      .setEngine(Engine.MAPREDUCE)\n      .build();\n\n    AppRequest<ETLBatchConfig> appRequest = new AppRequest<>(APP_ARTIFACT, etlConfig);\n    Id.Application appId = Id.Application.from(Id.Namespace.DEFAULT, \"JoinerApp\");\n    ApplicationManager appManager = deployApplication(appId, appRequest);\n\n    Schema outSchema = Schema.recordOf(\n      \"join.output\",\n      Schema.Field.of(\"customer_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"customer_name\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"item_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"item_price\", Schema.of(Schema.Type.LONG)),\n      Schema.Field.of(\"cust_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"cust_name\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"t_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"c_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"c_name\", Schema.of(Schema.Type.STRING))\n    );\n\n    StructuredRecord recordSamuel = StructuredRecord.builder(inputSchema1).set(\"customer_id\", \"1\")\n      .set(\"customer_name\", \"samuel\").build();\n    StructuredRecord recordBob = StructuredRecord.builder(inputSchema1).set(\"customer_id\", \"2\")\n      .set(\"customer_name\", \"bob\").build();\n    StructuredRecord recordJane = StructuredRecord.builder(inputSchema1).set(\"customer_id\", \"3\")\n      .set(\"customer_name\", \"jane\").build();\n\n    StructuredRecord recordCar = StructuredRecord.builder(inputSchema2).set(\"item_id\", \"11\").set(\"item_price\", 10000L)\n      .set(\"cust_id\", \"1\").set(\"cust_name\", \"samuel\").build();\n    StructuredRecord recordBike = StructuredRecord.builder(inputSchema2).set(\"item_id\", \"22\").set(\"item_price\", 100L)\n      .set(\"cust_id\", \"3\").set(\"cust_name\", \"jane\").build();\n\n    StructuredRecord recordTrasCar = StructuredRecord.builder(inputSchema3).set(\"t_id\", \"1\").set(\"c_id\", \"1\")\n      .set(\"c_name\", \"samuel\").build();\n    StructuredRecord recordTrasBike = StructuredRecord.builder(inputSchema3).set(\"t_id\", \"2\").set(\"c_id\", \"3\")\n      .set(\"c_name\", \"jane\").build();\n\n    // write one record to each source\n    DataSetManager<Table> inputManager = getDataset(Id.Namespace.DEFAULT, \"source1InnerJoinInput\");\n    MockSource.writeInput(inputManager, ImmutableList.of(recordSamuel, recordBob, recordJane));\n    inputManager = getDataset(Id.Namespace.DEFAULT, \"source2InnerJoinInput\");\n    MockSource.writeInput(inputManager, ImmutableList.of(recordCar, recordBike));\n    inputManager = getDataset(Id.Namespace.DEFAULT, \"source3InnerJoinInput\");\n    MockSource.writeInput(inputManager, ImmutableList.of(recordTrasCar, recordTrasBike));\n\n    WorkflowManager workflowManager = appManager.getWorkflowManager(SmartWorkflow.NAME);\n    workflowManager.start();\n    workflowManager.waitForFinish(5, TimeUnit.MINUTES);\n\n\n    StructuredRecord joinRecordSamuel = StructuredRecord.builder(outSchema)\n      .set(\"customer_id\", \"1\").set(\"customer_name\", \"samuel\")\n      .set(\"item_id\", \"11\").set(\"item_price\", 10000L).set(\"cust_id\", \"1\").set(\"cust_name\", \"samuel\")\n      .set(\"t_id\", \"1\").set(\"c_id\", \"1\").set(\"c_name\", \"samuel\").build();\n\n    StructuredRecord joinRecordJane = StructuredRecord.builder(outSchema)\n      .set(\"customer_id\", \"3\").set(\"customer_name\", \"jane\")\n      .set(\"item_id\", \"22\").set(\"item_price\", 100L).set(\"cust_id\", \"3\").set(\"cust_name\", \"jane\")\n      .set(\"t_id\", \"2\").set(\"c_id\", \"3\").set(\"c_name\", \"jane\").build();\n\n    DataSetManager<Table> sinkManager = getDataset(\"innerJoinOutput\");\n    Set<StructuredRecord> expected = ImmutableSet.of(joinRecordSamuel, joinRecordJane);\n    Set<StructuredRecord> actual = Sets.newHashSet(MockSink.readOutput(sinkManager));\n    Assert.assertEquals(expected, actual);\n\n    validateMetric(2, appId, \"testJoiner.records.out\");\n    validateMetric(2, appId, \"sink1.records.in\");\n  }","id":105373,"modified_method":"@Test\n  public void testInnerJoinMR() throws Exception {\n    testInnerJoin(Engine.MAPREDUCE);\n  }","commit_id":"5ae2c7cbc66aa187b063b89535ccbe0fdded4673","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testOuterJoin() throws Exception {\n    Schema inputSchema1 = Schema.recordOf(\n      \"customerRecord\",\n      Schema.Field.of(\"customer_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"customer_name\", Schema.of(Schema.Type.STRING))\n    );\n\n    Schema inputSchema2 = Schema.recordOf(\n      \"itemRecord\",\n      Schema.Field.of(\"item_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"item_price\", Schema.of(Schema.Type.LONG)),\n      Schema.Field.of(\"cust_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"cust_name\", Schema.of(Schema.Type.STRING))\n    );\n\n    Schema inputSchema3 = Schema.recordOf(\n      \"transactionRecord\",\n      Schema.Field.of(\"t_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"c_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"c_name\", Schema.of(Schema.Type.STRING))\n    );\n\n    ETLBatchConfig etlConfig = ETLBatchConfig.builder(\"* * * * *\")\n      .addStage(new ETLStage(\"source1\", MockSource.getPlugin(\"source1OuterJoinInput\")))\n      .addStage(new ETLStage(\"source2\", MockSource.getPlugin(\"source2OuterJoinInput\")))\n      .addStage(new ETLStage(\"source3\", MockSource.getPlugin(\"source3OuterJoinInput\")))\n      .addStage(new ETLStage(\"t1\", FieldsPrefixTransform.getPlugin(\"\", inputSchema1.toString())))\n      .addStage(new ETLStage(\"t2\", FieldsPrefixTransform.getPlugin(\"\", inputSchema2.toString())))\n      .addStage(new ETLStage(\"t3\", FieldsPrefixTransform.getPlugin(\"\", inputSchema3.toString())))\n      .addStage(new ETLStage(\"testJoiner\", MockJoiner.getPlugin(\"t1.customer_id=t2.cust_id=t3.c_id&\" +\n                                                                  \"t1.customer_name=t2.cust_name=t3.c_name\", \"t1\", \"\")))\n      .addStage(new ETLStage(\"sink1\", MockSink.getPlugin(\"outerJoinOutput\")))\n      .addConnection(\"source1\", \"t1\")\n      .addConnection(\"source2\", \"t2\")\n      .addConnection(\"source3\", \"t3\")\n      .addConnection(\"t1\", \"testJoiner\")\n      .addConnection(\"t2\", \"testJoiner\")\n      .addConnection(\"t3\", \"testJoiner\")\n      .addConnection(\"testJoiner\", \"sink1\")\n      .setEngine(Engine.MAPREDUCE)\n      .build();\n\n    AppRequest<ETLBatchConfig> appRequest = new AppRequest<>(APP_ARTIFACT, etlConfig);\n    Id.Application appId = Id.Application.from(Id.Namespace.DEFAULT, \"JoinerApp\");\n    ApplicationManager appManager = deployApplication(appId, appRequest);\n\n    Schema outSchema = Schema.recordOf(\n      \"join.output\",\n      Schema.Field.of(\"customer_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"customer_name\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"item_id\", Schema.nullableOf(Schema.of(Schema.Type.STRING))),\n      Schema.Field.of(\"item_price\", Schema.nullableOf(Schema.of(Schema.Type.LONG))),\n      Schema.Field.of(\"cust_id\", Schema.nullableOf(Schema.of(Schema.Type.STRING))),\n      Schema.Field.of(\"cust_name\", Schema.nullableOf(Schema.of(Schema.Type.STRING))),\n      Schema.Field.of(\"t_id\", Schema.nullableOf(Schema.of(Schema.Type.STRING))),\n      Schema.Field.of(\"c_id\", Schema.nullableOf(Schema.of(Schema.Type.STRING))),\n      Schema.Field.of(\"c_name\", Schema.nullableOf(Schema.of(Schema.Type.STRING))));\n\n    StructuredRecord recordSamuel = StructuredRecord.builder(inputSchema1).set(\"customer_id\", \"1\")\n      .set(\"customer_name\", \"samuel\").build();\n    StructuredRecord recordBob = StructuredRecord.builder(inputSchema1).set(\"customer_id\", \"2\")\n      .set(\"customer_name\", \"bob\").build();\n    StructuredRecord recordJane = StructuredRecord.builder(inputSchema1).set(\"customer_id\", \"3\")\n      .set(\"customer_name\", \"jane\").build();\n    StructuredRecord recordMartha = StructuredRecord.builder(inputSchema1).set(\"customer_id\", \"4\")\n      .set(\"customer_name\", \"martha\").build();\n\n    StructuredRecord recordCar = StructuredRecord.builder(inputSchema2).set(\"item_id\", \"11\").set(\"item_price\", 10000L)\n      .set(\"cust_id\", \"1\").set(\"cust_name\", \"samuel\").build();\n    StructuredRecord recordBike = StructuredRecord.builder(inputSchema2).set(\"item_id\", \"22\").set(\"item_price\", 100L)\n      .set(\"cust_id\", \"3\").set(\"cust_name\", \"jane\").build();\n\n    StructuredRecord recordTrasCar = StructuredRecord.builder(inputSchema3).set(\"t_id\", \"1\").set(\"c_id\", \"1\")\n      .set(\"c_name\", \"samuel\").build();\n    StructuredRecord recordTrasPlane = StructuredRecord.builder(inputSchema3).set(\"t_id\", \"2\").set(\"c_id\", \"2\")\n      .set(\"c_name\", \"bob\").build();\n    StructuredRecord recordTrasBike = StructuredRecord.builder(inputSchema3).set(\"t_id\", \"3\").set(\"c_id\", \"3\")\n      .set(\"c_name\", \"jane\").build();\n\n    // write one record to each source\n    DataSetManager<Table> inputManager = getDataset(Id.Namespace.DEFAULT, \"source1OuterJoinInput\");\n    MockSource.writeInput(inputManager, ImmutableList.of(recordSamuel, recordBob, recordJane, recordMartha));\n    inputManager = getDataset(Id.Namespace.DEFAULT, \"source2OuterJoinInput\");\n    MockSource.writeInput(inputManager, ImmutableList.of(recordCar, recordBike));\n    inputManager = getDataset(Id.Namespace.DEFAULT, \"source3OuterJoinInput\");\n    MockSource.writeInput(inputManager, ImmutableList.of(recordTrasCar, recordTrasPlane, recordTrasBike));\n\n    WorkflowManager workflowManager = appManager.getWorkflowManager(SmartWorkflow.NAME);\n    workflowManager.start();\n    workflowManager.waitForFinish(5, TimeUnit.MINUTES);\n\n\n    StructuredRecord joinRecordSamuel = StructuredRecord.builder(outSchema)\n      .set(\"customer_id\", \"1\").set(\"customer_name\", \"samuel\")\n      .set(\"item_id\", \"11\").set(\"item_price\", 10000L).set(\"cust_id\", \"1\").set(\"cust_name\", \"samuel\")\n      .set(\"t_id\", \"1\").set(\"c_id\", \"1\").set(\"c_name\", \"samuel\").build();\n\n    StructuredRecord joinRecordBob = StructuredRecord.builder(outSchema)\n      .set(\"customer_id\", \"2\").set(\"customer_name\", \"bob\").set(\"t_id\", \"2\")\n      .set(\"c_id\", \"2\").set(\"c_name\", \"bob\").build();\n\n    StructuredRecord joinRecordJane = StructuredRecord.builder(outSchema)\n      .set(\"customer_id\", \"3\").set(\"customer_name\", \"jane\")\n      .set(\"item_id\", \"22\").set(\"item_price\", 100L).set(\"cust_id\", \"3\").set(\"cust_name\", \"jane\")\n      .set(\"t_id\", \"3\").set(\"c_id\", \"3\").set(\"c_name\", \"jane\").build();\n\n    StructuredRecord joinRecordMartha = StructuredRecord.builder(outSchema)\n      .set(\"customer_id\", \"4\").set(\"customer_name\", \"martha\").build();\n\n    DataSetManager<Table> sinkManager = getDataset(\"outerJoinOutput\");\n    Set<StructuredRecord> expected = ImmutableSet.of(joinRecordSamuel, joinRecordJane, joinRecordBob, joinRecordMartha);\n    Set<StructuredRecord> actual = Sets.newHashSet(MockSink.readOutput(sinkManager));\n    Assert.assertEquals(expected, actual);\n\n    validateMetric(4, appId, \"testJoiner.records.out\");\n    validateMetric(4, appId, \"sink1.records.in\");\n  }","id":105374,"modified_method":"@Test\n  public void testOuterJoinMR() throws Exception {\n    testOuterJoin(Engine.MAPREDUCE);\n  }","commit_id":"5ae2c7cbc66aa187b063b89535ccbe0fdded4673","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testMultiPhaseJoiner() throws Exception {\n    /*\n     * source1 ----> t1 ------\n     *                        | --> innerjoin ----> t4 ------\n     * source2 ----> t2 ------                                 |\n     *                                                         | ---> outerjoin --> sink1\n     *                                                         |\n     * source3 -------------------- t3 ------------------------\n     */\n\n    Schema inputSchema1 = Schema.recordOf(\n      \"customerRecord\",\n      Schema.Field.of(\"customer_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"customer_name\", Schema.of(Schema.Type.STRING))\n    );\n\n    Schema inputSchema2 = Schema.recordOf(\n      \"itemRecord\",\n      Schema.Field.of(\"item_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"item_price\", Schema.of(Schema.Type.LONG)),\n      Schema.Field.of(\"cust_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"cust_name\", Schema.of(Schema.Type.STRING))\n    );\n\n    Schema inputSchema3 = Schema.recordOf(\n      \"transactionRecord\",\n      Schema.Field.of(\"t_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"c_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"i_id\", Schema.of(Schema.Type.STRING))\n    );\n\n    Schema outSchema1 = Schema.recordOf(\n      \"join.output\",\n      Schema.Field.of(\"customer_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"customer_name\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"item_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"item_price\", Schema.of(Schema.Type.LONG)),\n      Schema.Field.of(\"cust_id\", Schema.of(Schema.Type.STRING)),\n      Schema.Field.of(\"cust_name\", Schema.of(Schema.Type.STRING))\n    );\n\n    Schema outSchema2 = Schema.recordOf(\n      \"join.output\",\n      Schema.Field.of(\"t_id\", Schema.nullableOf(Schema.of(Schema.Type.STRING))),\n      Schema.Field.of(\"c_id\", Schema.nullableOf(Schema.of(Schema.Type.STRING))),\n      Schema.Field.of(\"i_id\", Schema.nullableOf(Schema.of(Schema.Type.STRING))),\n      Schema.Field.of(\"customer_id\", Schema.nullableOf(Schema.of(Schema.Type.STRING))),\n      Schema.Field.of(\"customer_name\", Schema.nullableOf(Schema.of(Schema.Type.STRING))),\n      Schema.Field.of(\"item_id\", Schema.nullableOf(Schema.of(Schema.Type.STRING))),\n      Schema.Field.of(\"item_price\", Schema.nullableOf(Schema.of(Schema.Type.LONG))),\n      Schema.Field.of(\"cust_id\", Schema.nullableOf(Schema.of(Schema.Type.STRING))),\n      Schema.Field.of(\"cust_name\", Schema.nullableOf(Schema.of(Schema.Type.STRING)))\n    );\n\n    String source1MulitJoinInput = \"source1\";\n    String source2MultiJoinInput = \"source2\";\n    String source3MultiJoinInput = \"source3\";\n\n    ETLBatchConfig etlConfig = ETLBatchConfig.builder(\"* * * * *\")\n      .addStage(new ETLStage(\"source1\", MockSource.getPlugin(source1MulitJoinInput)))\n      .addStage(new ETLStage(\"source2\", MockSource.getPlugin(source2MultiJoinInput)))\n      .addStage(new ETLStage(\"source3\", MockSource.getPlugin(source3MultiJoinInput)))\n      .addStage(new ETLStage(\"t1\", FieldsPrefixTransform.getPlugin(\"\", inputSchema1.toString())))\n      .addStage(new ETLStage(\"t2\", FieldsPrefixTransform.getPlugin(\"\", inputSchema2.toString())))\n      .addStage(new ETLStage(\"t3\", FieldsPrefixTransform.getPlugin(\"\", inputSchema3.toString())))\n      .addStage(new ETLStage(\"t4\", FieldsPrefixTransform.getPlugin(\"\", outSchema1.toString())))\n      .addStage(new ETLStage(\"innerjoin\", MockJoiner.getPlugin(\"t1.customer_id=t2.cust_id\",\n                                                               \"t1,t2\", \"\")))\n      .addStage(new ETLStage(\"outerjoin\", MockJoiner.getPlugin(\"t4.item_id=t3.i_id\",\n                                                               \"\", \"\")))\n      .addStage(new ETLStage(\"sink1\", MockSink.getPlugin(\"multiJoinOutput\")))\n      .addConnection(\"source1\", \"t1\")\n      .addConnection(\"source2\", \"t2\")\n      .addConnection(\"source3\", \"t3\")\n      .addConnection(\"t1\", \"innerjoin\")\n      .addConnection(\"t2\", \"innerjoin\")\n      .addConnection(\"innerjoin\", \"t4\")\n      .addConnection(\"t3\", \"outerjoin\")\n      .addConnection(\"t4\", \"outerjoin\")\n      .addConnection(\"outerjoin\", \"sink1\")\n      .setEngine(Engine.MAPREDUCE)\n      .build();\n\n    AppRequest<ETLBatchConfig> appRequest = new AppRequest<>(APP_ARTIFACT, etlConfig);\n    Id.Application appId = Id.Application.from(Id.Namespace.DEFAULT, \"JoinerApp\");\n    ApplicationManager appManager = deployApplication(appId, appRequest);\n\n    StructuredRecord recordSamuel = StructuredRecord.builder(inputSchema1).set(\"customer_id\", \"1\")\n      .set(\"customer_name\", \"samuel\").build();\n    StructuredRecord recordBob = StructuredRecord.builder(inputSchema1).set(\"customer_id\", \"2\")\n      .set(\"customer_name\", \"bob\").build();\n    StructuredRecord recordJane = StructuredRecord.builder(inputSchema1).set(\"customer_id\", \"3\")\n      .set(\"customer_name\", \"jane\").build();\n\n    StructuredRecord recordCar = StructuredRecord.builder(inputSchema2).set(\"item_id\", \"11\").set(\"item_price\", 10000L)\n      .set(\"cust_id\", \"1\").set(\"cust_name\", \"samuel\").build();\n    StructuredRecord recordBike = StructuredRecord.builder(inputSchema2).set(\"item_id\", \"22\").set(\"item_price\", 100L)\n      .set(\"cust_id\", \"3\").set(\"cust_name\", \"jane\").build();\n\n    StructuredRecord recordTrasCar = StructuredRecord.builder(inputSchema3).set(\"t_id\", \"1\").set(\"c_id\", \"1\")\n      .set(\"i_id\", \"11\").build();\n    StructuredRecord recordTrasBike = StructuredRecord.builder(inputSchema3).set(\"t_id\", \"2\").set(\"c_id\", \"3\")\n      .set(\"i_id\", \"22\").build();\n    StructuredRecord recordTrasPlane = StructuredRecord.builder(inputSchema3).set(\"t_id\", \"3\").set(\"c_id\", \"4\")\n      .set(\"i_id\", \"33\").build();\n\n    // write one record to each source\n    DataSetManager<Table> inputManager = getDataset(Id.Namespace.DEFAULT, source1MulitJoinInput);\n    MockSource.writeInput(inputManager, ImmutableList.of(recordSamuel, recordBob, recordJane));\n    inputManager = getDataset(Id.Namespace.DEFAULT, source2MultiJoinInput);\n    MockSource.writeInput(inputManager, ImmutableList.of(recordCar, recordBike));\n    inputManager = getDataset(Id.Namespace.DEFAULT, source3MultiJoinInput);\n    MockSource.writeInput(inputManager, ImmutableList.of(recordTrasCar, recordTrasBike, recordTrasPlane));\n\n    WorkflowManager workflowManager = appManager.getWorkflowManager(SmartWorkflow.NAME);\n    workflowManager.start();\n    workflowManager.waitForFinish(5, TimeUnit.MINUTES);\n\n\n    StructuredRecord joinRecordSamuel = StructuredRecord.builder(outSchema2)\n      .set(\"customer_id\", \"1\").set(\"customer_name\", \"samuel\")\n      .set(\"item_id\", \"11\").set(\"item_price\", 10000L).set(\"cust_id\", \"1\").set(\"cust_name\", \"samuel\")\n      .set(\"t_id\", \"1\").set(\"c_id\", \"1\").set(\"i_id\", \"11\").build();\n\n    StructuredRecord joinRecordJane = StructuredRecord.builder(outSchema2)\n      .set(\"customer_id\", \"3\").set(\"customer_name\", \"jane\")\n      .set(\"item_id\", \"22\").set(\"item_price\", 100L).set(\"cust_id\", \"3\").set(\"cust_name\", \"jane\")\n      .set(\"t_id\", \"2\").set(\"c_id\", \"3\").set(\"i_id\", \"22\").build();\n\n    StructuredRecord joinRecordPlane = StructuredRecord.builder(outSchema2)\n      .set(\"t_id\", \"3\").set(\"c_id\", \"4\").set(\"i_id\", \"33\").build();\n\n    DataSetManager<Table> sinkManager = getDataset(\"multiJoinOutput\");\n    Set<StructuredRecord> expected = ImmutableSet.of(joinRecordSamuel, joinRecordJane, joinRecordPlane);\n    Set<StructuredRecord> actual = Sets.newHashSet(MockSink.readOutput(sinkManager));\n    Assert.assertEquals(expected, actual);\n\n    validateMetric(3, appId, \"outerjoin.records.out\");\n    validateMetric(3, appId, \"sink1.records.in\");\n\n  }","id":105375,"modified_method":"@Test\n  public void testMultiPhaseJoinerMR() throws Exception {\n    testMultipleJoiner(Engine.MAPREDUCE);\n  }","commit_id":"5ae2c7cbc66aa187b063b89535ccbe0fdded4673","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  @Nullable\n  public String lookup(String property) {\n    // try workflow token\n    Preconditions.checkNotNull(workflowToken, \"Workflow token is null, you may not be running a workflow.\");\n    Value tokenValue = workflowToken.get(property);\n    if (tokenValue != null) {\n      return tokenValue.toString();\n    }\n\n    // try runtime arguments\n    String runtimeArgumentMacro = runtimeArguments.get(property);\n    if (runtimeArgumentMacro == null) {\n      throw new InvalidMacroException(String.format(\"Macro '%s' not defined.\", property));\n    }\n    return runtimeArgumentMacro;\n  }","id":105376,"modified_method":"@Override\n  @Nullable\n  public String lookup(String property) {\n    String val = resolvedArguments.get(property);\n    if (val == null) {\n      throw new InvalidMacroException(String.format(\"Argument '%s' is not defined.\", property));\n    }\n    return val;\n  }","commit_id":"5ae2c7cbc66aa187b063b89535ccbe0fdded4673","url":"https://github.com/caskdata/cdap"},{"original_method":"public DefaultMacroEvaluator(WorkflowToken workflowToken, Map<String, String> runtimeArguments,\n                               long logicalStartTime) {\n    this.workflowToken = workflowToken;\n    this.runtimeArguments = runtimeArguments;\n    this.logicalStartTime = logicalStartTime;\n    this.logicalStartTimeMacro = new LogicalStartTimeMacro();\n  }","id":105377,"modified_method":"public DefaultMacroEvaluator(@Nullable WorkflowToken workflowToken, Map<String, String> runtimeArguments,\n                               long logicalStartTime) {\n    Map<String, String> resolvedArguments = new HashMap<>();\n    resolvedArguments.putAll(runtimeArguments);\n    // not expected, but can happen if user runs just the program and not the workflow\n    if (workflowToken != null) {\n      for (String tokenKey : workflowToken.getAll(WorkflowToken.Scope.USER).keySet()) {\n        resolvedArguments.put(tokenKey, workflowToken.get(tokenKey, WorkflowToken.Scope.USER).toString());\n      }\n    }\n    this.resolvedArguments = resolvedArguments;\n    this.logicalStartTime = logicalStartTime;\n    this.logicalStartTimeMacro = new LogicalStartTimeMacro();\n  }","commit_id":"5ae2c7cbc66aa187b063b89535ccbe0fdded4673","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void beforeSubmit(SparkClientContext context) throws Exception {\n    cleanupFiles = new ArrayList<>();\n    CompositeFinisher.Builder finishers = CompositeFinisher.builder();\n\n    SparkConf sparkConf = new SparkConf();\n    sparkConf.set(\"spark.driver.extraJavaOptions\", \"-XX:MaxPermSize=256m\");\n    sparkConf.set(\"spark.executor.extraJavaOptions\", \"-XX:MaxPermSize=256m\");\n    context.setSparkConf(sparkConf);\n\n    Map<String, String> properties = context.getSpecification().getProperties();\n    BatchPhaseSpec phaseSpec = GSON.fromJson(properties.get(Constants.PIPELINEID), BatchPhaseSpec.class);\n    DatasetContextLookupProvider lookProvider = new DatasetContextLookupProvider(context);\n    MacroEvaluator evaluator = new DefaultMacroEvaluator(context.getWorkflowToken(), context.getRuntimeArguments(),\n                                                         context.getLogicalStartTime());\n    SparkBatchSourceFactory sourceFactory = new SparkBatchSourceFactory();\n    SparkBatchSinkFactory sinkFactory = new SparkBatchSinkFactory();\n    Map<String, Integer> stagePartitions = new HashMap<>();\n\n    for (StageInfo stageInfo : phaseSpec.getPhase()) {\n      String stageName = stageInfo.getName();\n      String pluginType = stageInfo.getPluginType();\n\n      if (BatchSource.PLUGIN_TYPE.equals(pluginType)) {\n        BatchConfigurable<BatchSourceContext> batchSource = context.newPluginInstance(stageName, evaluator);\n        BatchSourceContext sourceContext = new SparkBatchSourceContext(sourceFactory, context, lookProvider, stageName);\n        batchSource.prepareRun(sourceContext);\n        finishers.add(batchSource, sourceContext);\n      } else if (BatchSink.PLUGIN_TYPE.equals(pluginType)) {\n        BatchConfigurable<BatchSinkContext> batchSink = context.newPluginInstance(stageName, evaluator);\n        BatchSinkContext sinkContext = new SparkBatchSinkContext(sinkFactory, context, null, stageName);\n        batchSink.prepareRun(sinkContext);\n        finishers.add(batchSink, sinkContext);\n      } else if (SparkSink.PLUGIN_TYPE.equals(pluginType)) {\n        BatchConfigurable<SparkPluginContext> sparkSink = context.newPluginInstance(stageName, evaluator);\n        SparkPluginContext sparkPluginContext = new BasicSparkPluginContext(context, lookProvider, stageName);\n        sparkSink.prepareRun(sparkPluginContext);\n        finishers.add(sparkSink, sparkPluginContext);\n      } else if (BatchAggregator.PLUGIN_TYPE.equals(pluginType)) {\n        BatchAggregator aggregator = context.newPluginInstance(stageName, evaluator);\n        AbstractAggregatorContext aggregatorContext =\n          new SparkAggregatorContext(context, new DatasetContextLookupProvider(context), stageName);\n        aggregator.prepareRun(aggregatorContext);\n        finishers.add(aggregator, aggregatorContext);\n        stagePartitions.put(stageName, aggregatorContext.getNumPartitions());\n      }\n    }\n\n    File configFile = File.createTempFile(\"ETLSpark\", \".config\");\n    cleanupFiles.add(configFile);\n    try (OutputStream os = new FileOutputStream(configFile)) {\n      sourceFactory.serialize(os);\n      sinkFactory.serialize(os);\n      DataOutput dataOutput = new DataOutputStream(os);\n      dataOutput.writeUTF(GSON.toJson(stagePartitions));\n    }\n\n    finisher = finishers.build();\n    context.localize(\"ETLSpark.config\", configFile.toURI());\n  }","id":105378,"modified_method":"@Override\n  public void beforeSubmit(SparkClientContext context) throws Exception {\n    cleanupFiles = new ArrayList<>();\n    CompositeFinisher.Builder finishers = CompositeFinisher.builder();\n\n    SparkConf sparkConf = new SparkConf();\n    sparkConf.set(\"spark.driver.extraJavaOptions\", \"-XX:MaxPermSize=256m\");\n    sparkConf.set(\"spark.executor.extraJavaOptions\", \"-XX:MaxPermSize=256m\");\n    context.setSparkConf(sparkConf);\n\n    Map<String, String> properties = context.getSpecification().getProperties();\n    BatchPhaseSpec phaseSpec = GSON.fromJson(properties.get(Constants.PIPELINEID), BatchPhaseSpec.class);\n    DatasetContextLookupProvider lookProvider = new DatasetContextLookupProvider(context);\n    MacroEvaluator evaluator = new DefaultMacroEvaluator(context.getWorkflowToken(), context.getRuntimeArguments(),\n                                                         context.getLogicalStartTime());\n    SparkBatchSourceFactory sourceFactory = new SparkBatchSourceFactory();\n    SparkBatchSinkFactory sinkFactory = new SparkBatchSinkFactory();\n    Map<String, Integer> stagePartitions = new HashMap<>();\n\n    for (StageInfo stageInfo : phaseSpec.getPhase()) {\n      String stageName = stageInfo.getName();\n      String pluginType = stageInfo.getPluginType();\n\n      if (BatchSource.PLUGIN_TYPE.equals(pluginType)) {\n        BatchConfigurable<BatchSourceContext> batchSource = context.newPluginInstance(stageName, evaluator);\n        BatchSourceContext sourceContext = new SparkBatchSourceContext(sourceFactory, context, lookProvider, stageName);\n        batchSource.prepareRun(sourceContext);\n        finishers.add(batchSource, sourceContext);\n      } else if (BatchSink.PLUGIN_TYPE.equals(pluginType)) {\n        BatchConfigurable<BatchSinkContext> batchSink = context.newPluginInstance(stageName, evaluator);\n        BatchSinkContext sinkContext = new SparkBatchSinkContext(sinkFactory, context, null, stageName);\n        batchSink.prepareRun(sinkContext);\n        finishers.add(batchSink, sinkContext);\n      } else if (SparkSink.PLUGIN_TYPE.equals(pluginType)) {\n        BatchConfigurable<SparkPluginContext> sparkSink = context.newPluginInstance(stageName, evaluator);\n        SparkPluginContext sparkPluginContext = new BasicSparkPluginContext(context, lookProvider, stageName);\n        sparkSink.prepareRun(sparkPluginContext);\n        finishers.add(sparkSink, sparkPluginContext);\n      } else if (BatchAggregator.PLUGIN_TYPE.equals(pluginType)) {\n        BatchAggregator aggregator = context.newPluginInstance(stageName, evaluator);\n        AbstractAggregatorContext aggregatorContext =\n          new SparkAggregatorContext(context, new DatasetContextLookupProvider(context), stageName);\n        aggregator.prepareRun(aggregatorContext);\n        finishers.add(aggregator, aggregatorContext);\n        stagePartitions.put(stageName, aggregatorContext.getNumPartitions());\n      } else if (BatchJoiner.PLUGIN_TYPE.equals(pluginType)) {\n        BatchJoiner joiner = context.newPluginInstance(stageName, evaluator);\n        SparkJoinerContext sparkJoinerContext = new SparkJoinerContext(stageName, context);\n        joiner.prepareRun(sparkJoinerContext);\n        finishers.add(joiner, sparkJoinerContext);\n        stagePartitions.put(stageName, sparkJoinerContext.getNumPartitions());\n      }\n    }\n\n    File configFile = File.createTempFile(\"ETLSpark\", \".config\");\n    cleanupFiles.add(configFile);\n    try (OutputStream os = new FileOutputStream(configFile)) {\n      sourceFactory.serialize(os);\n      sinkFactory.serialize(os);\n      DataOutput dataOutput = new DataOutputStream(os);\n      dataOutput.writeUTF(GSON.toJson(stagePartitions));\n    }\n\n    finisher = finishers.build();\n    context.localize(\"ETLSpark.config\", configFile.toURI());\n  }","commit_id":"5ae2c7cbc66aa187b063b89535ccbe0fdded4673","url":"https://github.com/caskdata/cdap"},{"original_method":"public <T> T createPlugin() throws Exception {\n    return pluginContext.newPluginInstance(stageName);\n  }","id":105379,"modified_method":"public <T> T createPlugin() throws Exception {\n    MacroEvaluator macroEvaluator = new DefaultMacroEvaluator(arguments, logicalStartTime);\n    return pluginContext.newPluginInstance(stageName, macroEvaluator);\n  }","commit_id":"5ae2c7cbc66aa187b063b89535ccbe0fdded4673","url":"https://github.com/caskdata/cdap"},{"original_method":"public PluginFunctionContext(String stageName, JavaSparkExecutionContext sec) {\n    this.stageName = stageName;\n    this.pluginContext = sec.getPluginContext();\n    this.metrics = sec.getMetrics();\n    this.logicalStartTime = sec.getLogicalStartTime();\n    this.runtimeArgs = sec.getRuntimeArguments();\n  }","id":105380,"modified_method":"public PluginFunctionContext(String stageName, JavaSparkExecutionContext sec, PipelinePhase pipelinePhase) {\n    this.stageName = stageName;\n    this.pluginContext = sec.getPluginContext();\n    this.metrics = sec.getMetrics();\n    this.logicalStartTime = sec.getLogicalStartTime();\n    Map<String, String> arguments = new HashMap<>();\n    arguments.putAll(sec.getRuntimeArguments());\n    WorkflowToken token = sec.getWorkflowToken();\n    for (String tokenKey : token.getAll(WorkflowToken.Scope.USER).keySet()) {\n      arguments.put(tokenKey, token.get(tokenKey, WorkflowToken.Scope.USER).toString());\n    }\n    this.arguments = arguments;\n    this.pipelineStr = GSON.toJson(pipelinePhase);\n  }","commit_id":"5ae2c7cbc66aa187b063b89535ccbe0fdded4673","url":"https://github.com/caskdata/cdap"},{"original_method":"public BatchRuntimeContext createBatchRuntimeContext() {\n    return new SparkBatchRuntimeContext(pluginContext, metrics, logicalStartTime, runtimeArgs, stageName);\n  }","id":105381,"modified_method":"public BatchRuntimeContext createBatchRuntimeContext() {\n    return new SparkBatchRuntimeContext(pluginContext, metrics, logicalStartTime, arguments, stageName);\n  }","commit_id":"5ae2c7cbc66aa187b063b89535ccbe0fdded4673","url":"https://github.com/caskdata/cdap"},{"original_method":"public void runPipeline(PipelinePhase pipelinePhase, String sourcePluginType,\n                          JavaSparkExecutionContext sec) throws Exception {\n\n    Map<String, T> stageDataCollections = new HashMap<>();\n    for (String stageName : pipelinePhase.getDag().getTopologicalOrder()) {\n      StageInfo stageInfo = pipelinePhase.getStage(stageName);\n      String pluginType = stageInfo.getPluginType();\n\n      T stageData = null;\n\n      List<T> inputDataCollections = new ArrayList<>();\n      for (String inputStageName : stageInfo.getInputs()) {\n        inputDataCollections.add(stageDataCollections.get(inputStageName));\n      }\n\n      // if this stage has multiple inputs, and is not a joiner plugin,\n      // initialize the stageRDD as the union of all input RDDs.\n      if (!inputDataCollections.isEmpty()) {\n        Iterator<T> inputRDDIter = inputDataCollections.iterator();\n        stageData = inputRDDIter.next();\n        while (inputRDDIter.hasNext()) {\n          stageData = union(stageData, inputRDDIter.next());\n        }\n      }\n\n      PluginFunctionContext pluginFunctionContext = new PluginFunctionContext(stageName, sec);\n      if (stageData == null) {\n        // this if-else is nested inside the stageRDD null check to avoid warnings about stageRDD possibly being\n        // null in the other else-if conditions\n        if (sourcePluginType.equals(pluginType)) {\n          stageData = getSource(stageName, pluginFunctionContext);\n        } else {\n          throw new IllegalStateException(String.format(\"Stage '%s' has no input and is not a source.\", stageName));\n        }\n      } else if (BatchSink.PLUGIN_TYPE.equals(pluginType)) {\n        handleBatchSink(stageName, stageData, new BatchSinkFunction(pluginFunctionContext));\n      } else if (Transform.PLUGIN_TYPE.equals(pluginType)) {\n        stageData = handleTransform(stageName, stageData, new TransformFunction(pluginFunctionContext));\n      } else if (SparkCompute.PLUGIN_TYPE.equals(pluginType)) {\n        SparkCompute<Object, Object> sparkCompute = sec.getPluginContext().newPluginInstance(stageName);\n        stageData = handleSparkCompute(stageName, stageData, sparkCompute);\n      } else if (SparkSink.PLUGIN_TYPE.equals(pluginType)) {\n        SparkSink<Object> sparkSink = sec.getPluginContext().newPluginInstance(stageName);\n        handleSparkSink(stageName, stageData, sparkSink);\n      } else if (BatchAggregator.PLUGIN_TYPE.equals(pluginType)) {\n        stageData = handleAggregator(stageName, stageData,\n                                     new AggregatorGroupByFunction(pluginFunctionContext),\n                                     new AggregatorAggregateFunction(pluginFunctionContext));\n      } else if (BatchJoiner.PLUGIN_TYPE.equals(pluginType)) {\n        // CDAP-6196 implement joins\n      } else {\n        throw new IllegalStateException(String.format(\"Stage %s is of unsupported plugin type %s.\",\n                                                      stageName, pluginType));\n      }\n\n      if (shouldCache(pipelinePhase, stageInfo)) {\n        cache(stageData);\n      }\n      stageDataCollections.put(stageName, stageData);\n    }\n  }","id":105382,"modified_method":"public void runPipeline(PipelinePhase pipelinePhase, String sourcePluginType,\n                          JavaSparkExecutionContext sec) throws Exception {\n\n    MacroEvaluator macroEvaluator =\n      new DefaultMacroEvaluator(sec.getWorkflowToken(), sec.getRuntimeArguments(), sec.getLogicalStartTime());\n    Map<String, T> stageDataCollections = new HashMap<>();\n    for (String stageName : pipelinePhase.getDag().getTopologicalOrder()) {\n      StageInfo stageInfo = pipelinePhase.getStage(stageName);\n      String pluginType = stageInfo.getPluginType();\n\n      T stageData = null;\n\n      Map<String, T> inputDataCollections = new HashMap<>();\n      for (String inputStageName : stageInfo.getInputs()) {\n        inputDataCollections.put(inputStageName, stageDataCollections.get(inputStageName));\n      }\n\n      // if this stage has multiple inputs, and is not a joiner plugin,\n      // initialize the stageRDD as the union of all input RDDs.\n      if (!inputDataCollections.isEmpty()) {\n        Iterator<T> inputRDDIter = inputDataCollections.values().iterator();\n        stageData = inputRDDIter.next();\n        // don't union if we're joining\n        while (!BatchJoiner.PLUGIN_TYPE.equals(pluginType) && inputRDDIter.hasNext()) {\n          stageData = union(stageData, inputRDDIter.next());\n        }\n      }\n\n      PluginFunctionContext pluginFunctionContext = new PluginFunctionContext(stageName, sec, pipelinePhase);\n      if (stageData == null) {\n        // this if-else is nested inside the stageRDD null check to avoid warnings about stageRDD possibly being\n        // null in the other else-if conditions\n        if (sourcePluginType.equals(pluginType)) {\n          stageData = getSource(stageName, pluginFunctionContext);\n        } else {\n          throw new IllegalStateException(String.format(\"Stage '%s' has no input and is not a source.\", stageName));\n        }\n      } else if (BatchSink.PLUGIN_TYPE.equals(pluginType)) {\n        handleBatchSink(stageName, stageData, new BatchSinkFunction(pluginFunctionContext));\n      } else if (Transform.PLUGIN_TYPE.equals(pluginType)) {\n        stageData = handleTransform(stageName, stageData, new TransformFunction(pluginFunctionContext));\n      } else if (SparkCompute.PLUGIN_TYPE.equals(pluginType)) {\n        SparkCompute<Object, Object> sparkCompute =\n          sec.getPluginContext().newPluginInstance(stageName, macroEvaluator);\n        stageData = handleSparkCompute(stageName, stageData, sparkCompute);\n      } else if (SparkSink.PLUGIN_TYPE.equals(pluginType)) {\n        SparkSink<Object> sparkSink = sec.getPluginContext().newPluginInstance(stageName, macroEvaluator);\n        handleSparkSink(stageName, stageData, sparkSink);\n      } else if (BatchAggregator.PLUGIN_TYPE.equals(pluginType)) {\n        stageData = handleAggregator(stageName, stageData,\n                                     new AggregatorGroupByFunction(pluginFunctionContext),\n                                     new AggregatorAggregateFunction(pluginFunctionContext));\n      } else if (BatchJoiner.PLUGIN_TYPE.equals(pluginType)) {\n        BatchJoiner<Object, Object, Object> joiner =\n          sec.getPluginContext().newPluginInstance(stageName, macroEvaluator);\n        BatchJoinerRuntimeContext joinerRuntimeContext = pluginFunctionContext.createJoinerRuntimeContext();\n        joiner.initialize(joinerRuntimeContext);\n        stageData = handleJoin(stageName, joiner, inputDataCollections, pluginFunctionContext);\n      } else {\n        throw new IllegalStateException(String.format(\"Stage %s is of unsupported plugin type %s.\",\n                                                      stageName, pluginType));\n      }\n\n      if (shouldCache(pipelinePhase, stageInfo)) {\n        cache(stageData);\n      }\n      stageDataCollections.put(stageName, stageData);\n    }\n  }","commit_id":"5ae2c7cbc66aa187b063b89535ccbe0fdded4673","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n     * Create the SSLContext object and start the lifecycle\n     * @see org.eclipse.jetty.util.component.AbstractLifeCycle#doStart()\n     */\n    @Override\n    protected void doStart() throws Exception\n    {\n        super.doStart();\n\n        _aliases.clear();\n        if (_factory._keyStore!=null)\n        {\n            loop: for (String alias : Collections.list(_factory._keyStore.aliases()))\n            {\n                Certificate certificate = _factory._keyStore.getCertificate(alias);\n                if (\"X.509\".equals(certificate.getType()))\n                {\n                    X509Certificate x509 = (X509Certificate)certificate;\n                    \n                    // Exclude certificates with special uses\n                    if (x509.getKeyUsage()!=null)\n                    {\n                        boolean[] b=x509.getKeyUsage();\n                        if (b[5]/* keyCertSign */)\n                            continue loop;\n                    }\n                    \n                    // Look for alternative name extensions\n                    boolean named=false;\n                    Collection<List<?>> altNames = x509.getSubjectAlternativeNames();\n                    if (altNames!=null)\n                    {\n                        for (List<?> list : altNames)\n                        {\n                            if (((Number)list.get(0)).intValue() == 2 )\n                            {\n                                String cn = list.get(1).toString();\n                                LOG.info(\"Certificate san alias={} cn={} in {}\",alias,cn,_factory);\n                                if (cn!=null)\n                                {\n                                    named=true;\n                                    _aliases.put(cn,alias);\n                                }\n                            }\n                        }\n                    }\n                    \n                    // If no names found, look up the cn from the subject\n                    if (!named)\n                    {\n                        LdapName name=new LdapName(x509.getSubjectX500Principal().getName(X500Principal.RFC2253));\n                        for (Rdn rdn : name.getRdns())\n                        {\n                            if (rdn.getType().equalsIgnoreCase(\"cn\"))\n                            {\n                                String cn = rdn.getValue().toString();\n                                LOG.info(\"Certificate cn alias={} cn={} in {}\",alias,cn,_factory);\n                                if (cn!=null)\n                                    _aliases.put(cn,alias);\n                            }\n                        }\n                    }\n                }                    \n            }\n        }\n        \n        // find wild aliases\n        _wild.clear();\n        for (String name : _aliases.keySet())\n            if (name.startsWith(\"*.\"))\n                _wild.put(name.substring(1),_aliases.get(name));\n        \n        LOG.info(\"aliases={} for {}\",_aliases,this);\n    }","id":105383,"modified_method":"/**\n     * Create the SSLContext object and start the lifecycle\n     * @see org.eclipse.jetty.util.component.AbstractLifeCycle#doStart()\n     */\n    @Override\n    protected void doStart() throws Exception\n    {\n        super.doStart();\n\n        _aliases.clear();\n        if (_factory._keyStore!=null)\n        {\n            loop: for (String alias : Collections.list(_factory._keyStore.aliases()))\n            {\n                Certificate certificate = _factory._keyStore.getCertificate(alias);\n                if (\"X.509\".equals(certificate.getType()))\n                {\n                    X509Certificate x509 = (X509Certificate)certificate;\n                    \n                    // Exclude certificates with special uses\n                    if (x509.getKeyUsage()!=null)\n                    {\n                        boolean[] b=x509.getKeyUsage();\n                        if (b[5]/* keyCertSign */)\n                            continue loop;\n                    }\n                    \n                    // Look for alternative name extensions\n                    boolean named=false;\n                    Collection<List<?>> altNames = x509.getSubjectAlternativeNames();\n                    if (altNames!=null)\n                    {\n                        for (List<?> list : altNames)\n                        {\n                            if (((Number)list.get(0)).intValue() == 2 )\n                            {\n                                String cn = list.get(1).toString();\n                                if (LOG.isDebugEnabled())\n                                    LOG.debug(\"Certificate san alias={} cn={} in {}\",alias,cn,_factory);\n                                if (cn!=null)\n                                {\n                                    named=true;\n                                    _aliases.put(cn,alias);\n                                }\n                            }\n                        }\n                    }\n                    \n                    // If no names found, look up the cn from the subject\n                    if (!named)\n                    {\n                        LdapName name=new LdapName(x509.getSubjectX500Principal().getName(X500Principal.RFC2253));\n                        for (Rdn rdn : name.getRdns())\n                        {\n                            if (rdn.getType().equalsIgnoreCase(\"cn\"))\n                            {\n                                String cn = rdn.getValue().toString();\n                                if (LOG.isDebugEnabled())\n                                    LOG.debug(\"Certificate cn alias={} cn={} in {}\",alias,cn,_factory);\n                                if (cn!=null)\n                                    _aliases.put(cn,alias);\n                            }\n                        }\n                    }\n                }                    \n            }\n        }\n        \n        // find wild aliases\n        _wild.clear();\n        for (String name : _aliases.keySet())\n            if (name.startsWith(\"*.\"))\n                _wild.put(name.substring(1),_aliases.get(name));\n        \n        LOG.info(\"x509={} for {}\",_aliases,this);\n    }","commit_id":"7afede170ebb16a8a7b9c791fe61a09730b054c8","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\n     * @param request\n     */\n    private String adjustPath(HttpServletRequest request) throws ServletException {\n        String path = request.getPathInfo();\n\n        if (path == null) {\n            return \"\";\n        }\n\nLOG.info(\" In: \" + path);\n        // path contains both required and superficial escapes,\n        // as different user agents use different conventions;\n        // for the sake of interoperability, remove any unnecessary escapes\n        try {\n            // URI.create undoes _all_ escaping, so protect slashes first\n            URI u = URI.create(\"file://\" + path.replaceAll(\"%2F\", \"%252F\"));\n            // URI four-argument constructor recreates all the necessary ones\n            URI v = new URI(\"http\", \"host\", u.getPath(), null).normalize();\n            // unprotect slashes in now normalized path\n            path = v.getRawPath().replaceAll(\"%252F\", \"%2F\");\n        } catch (final URISyntaxException e) {\n            throw new ServletException(e.getMessage(), e);\n        }\n        // eat trailing slashes, else collections might not be found\n        while(path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        // path now is in proper canonical encoded form\nLOG.info(\"Out: \" + path);\n\n        return path;\n    }","id":105384,"modified_method":"/**\n     * @param request\n     */\n    private String adjustPath(HttpServletRequest request) throws ServletException {\n        String path = request.getPathInfo();\n\n        if (path == null) {\n            return \"\";\n        }\n\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\" In: \" + path);\n        }\n\n        // path contains both required and superficial escapes,\n        // as different user agents use different conventions;\n        // for the sake of interoperability, remove any unnecessary escapes\n        try {\n            // URI.create undoes _all_ escaping, so protect slashes first\n            URI u = URI.create(\"file://\" + path.replaceAll(\"%2F\", \"%252F\"));\n            // URI four-argument constructor recreates all the necessary ones\n            URI v = new URI(\"http\", \"host\", u.getPath(), null).normalize();\n            // unprotect slashes in now normalized path\n            path = v.getRawPath().replaceAll(\"%252F\", \"%2F\");\n        } catch (final URISyntaxException e) {\n            throw new ServletException(e.getMessage(), e);\n        }\n        // eat trailing slashes, else collections might not be found\n        while(path.endsWith(\"/\")) {\n            path = path.substring(0, path.length() - 1);\n        }\n        // path now is in proper canonical encoded form\n        \n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Out: \" + path);\n        }\n\n        return path;\n    }","commit_id":"e5e532d6041a25922f7c18c54e36aab49869ad9f","url":"https://github.com/eXist-db/exist"},{"original_method":"private void saslReadAndProcess(byte[] saslToken) throws IOException,\n        InterruptedException {\n      if (!saslContextEstablished) {\n        byte[] replyToken = null;\n        try {\n          if (saslServer == null) {\n            switch (authMethod) {\n            case DIGEST:\n              if (secretManager == null) {\n                throw new AccessControlException(\n                    \"Server is not configured to do DIGEST authentication.\");\n              }\n              saslServer = Sasl.createSaslServer(AuthMethod.DIGEST\n                  .getMechanismName(), null, SaslRpcServer.SASL_DEFAULT_REALM,\n                  SaslRpcServer.SASL_PROPS, new SaslDigestCallbackHandler(\n                      secretManager, this));\n              break;\n            default:\n              UserGroupInformation current = UserGroupInformation\n                  .getCurrentUser();\n              String fullName = current.getUserName();\n              if (LOG.isDebugEnabled())\n                LOG.debug(\"Kerberos principal name is \" + fullName);\n              final String names[] = SaslRpcServer.splitKerberosName(fullName);\n              if (names.length != 3) {\n                throw new AccessControlException(\n                    \"Kerberos principal name does NOT have the expected \"\n                        + \"hostname part: \" + fullName);\n              }\n              current.doAs(new PrivilegedExceptionAction<Object>() {\n                @Override\n                public Object run() throws SaslException {\n                  saslServer = Sasl.createSaslServer(AuthMethod.KERBEROS\n                      .getMechanismName(), names[0], names[1],\n                      SaslRpcServer.SASL_PROPS, new SaslGssCallbackHandler());\n                  return null;\n                }\n              });\n            }\n            if (saslServer == null)\n              throw new AccessControlException(\n                  \"Unable to find SASL server implementation for \"\n                      + authMethod.getMechanismName());\n            if (LOG.isDebugEnabled())\n              LOG.debug(\"Created SASL server with mechanism = \"\n                  + authMethod.getMechanismName());\n          }\n          if (LOG.isDebugEnabled())\n            LOG.debug(\"Have read input token of size \" + saslToken.length\n                + \" for processing by saslServer.evaluateResponse()\");\n          replyToken = saslServer.evaluateResponse(saslToken);\n        } catch (IOException e) {\n          IOException sendToClient = e;\n          Throwable cause = e;\n          while (cause != null) {\n            if (cause instanceof InvalidToken) {\n              sendToClient = (InvalidToken) cause;\n              break;\n            }\n            cause = cause.getCause();\n          }\n          doSaslReply(SaslStatus.ERROR, null, sendToClient.getClass().getName(), \n              sendToClient.getLocalizedMessage());\n          rpcMetrics.authenticationFailures.inc();\n          String clientIP = this.toString();\n          // attempting user could be null\n          AUDITLOG.warn(AUTH_FAILED_FOR + clientIP + \":\" + attemptingUser);\n          throw e;\n        }\n        if (replyToken != null) {\n          if (LOG.isDebugEnabled())\n            LOG.debug(\"Will send token of size \" + replyToken.length\n                + \" from saslServer.\");\n          doSaslReply(SaslStatus.SUCCESS, new BytesWritable(replyToken), null,\n              null);\n        }\n        if (saslServer.isComplete()) {\n          LOG.info(\"SASL server context established. Negotiated QoP is \"\n              + saslServer.getNegotiatedProperty(Sasl.QOP));\n          String qop = (String) saslServer.getNegotiatedProperty(Sasl.QOP);\n          useWrap = qop != null && !\"auth\".equalsIgnoreCase(qop);\n          user = getAuthorizedUgi(saslServer.getAuthorizationID());\n          LOG.info(\"SASL server successfully authenticated client: \" + user);\n          rpcMetrics.authenticationSuccesses.inc();\n          AUDITLOG.info(AUTH_SUCCESSFULL_FOR + user);\n          saslContextEstablished = true;\n        }\n      } else {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"Have read input token of size \" + saslToken.length\n              + \" for processing by saslServer.unwrap()\");\n        \n        if (!useWrap) {\n          processOneRpc(saslToken);\n        } else {\n          byte[] plaintextData = saslServer.unwrap(saslToken, 0,\n              saslToken.length);\n          processUnwrappedData(plaintextData);\n        }\n      }\n    }","id":105385,"modified_method":"private void saslReadAndProcess(byte[] saslToken) throws IOException,\n        InterruptedException {\n      if (!saslContextEstablished) {\n        byte[] replyToken = null;\n        try {\n          if (saslServer == null) {\n            switch (authMethod) {\n            case DIGEST:\n              if (secretManager == null) {\n                throw new AccessControlException(\n                    \"Server is not configured to do DIGEST authentication.\");\n              }\n              saslServer = Sasl.createSaslServer(AuthMethod.DIGEST\n                  .getMechanismName(), null, SaslRpcServer.SASL_DEFAULT_REALM,\n                  SaslRpcServer.SASL_PROPS, new SaslDigestCallbackHandler(\n                      secretManager, this));\n              break;\n            default:\n              UserGroupInformation current = UserGroupInformation\n                  .getCurrentUser();\n              String fullName = current.getUserName();\n              if (LOG.isDebugEnabled())\n                LOG.debug(\"Kerberos principal name is \" + fullName);\n              final String names[] = SaslRpcServer.splitKerberosName(fullName);\n              if (names.length != 3) {\n                throw new AccessControlException(\n                    \"Kerberos principal name does NOT have the expected \"\n                        + \"hostname part: \" + fullName);\n              }\n              current.doAs(new PrivilegedExceptionAction<Object>() {\n                @Override\n                public Object run() throws SaslException {\n                  saslServer = Sasl.createSaslServer(AuthMethod.KERBEROS\n                      .getMechanismName(), names[0], names[1],\n                      SaslRpcServer.SASL_PROPS, new SaslGssCallbackHandler());\n                  return null;\n                }\n              });\n            }\n            if (saslServer == null)\n              throw new AccessControlException(\n                  \"Unable to find SASL server implementation for \"\n                      + authMethod.getMechanismName());\n            if (LOG.isDebugEnabled())\n              LOG.debug(\"Created SASL server with mechanism = \"\n                  + authMethod.getMechanismName());\n          }\n          if (LOG.isDebugEnabled())\n            LOG.debug(\"Have read input token of size \" + saslToken.length\n                + \" for processing by saslServer.evaluateResponse()\");\n          replyToken = saslServer.evaluateResponse(saslToken);\n        } catch (IOException e) {\n          IOException sendToClient = e;\n          Throwable cause = e;\n          while (cause != null) {\n            if (cause instanceof InvalidToken) {\n              sendToClient = (InvalidToken) cause;\n              break;\n            }\n            cause = cause.getCause();\n          }\n          doSaslReply(SaslStatus.ERROR, null, sendToClient.getClass().getName(), \n              sendToClient.getLocalizedMessage());\n          rpcMetrics.authenticationFailures.inc();\n          String clientIP = this.toString();\n          // attempting user could be null\n          AUDITLOG.warn(AUTH_FAILED_FOR + clientIP + \":\" + attemptingUser);\n          throw e;\n        }\n        if (replyToken != null) {\n          if (LOG.isDebugEnabled())\n            LOG.debug(\"Will send token of size \" + replyToken.length\n                + \" from saslServer.\");\n          doSaslReply(SaslStatus.SUCCESS, new BytesWritable(replyToken), null,\n              null);\n        }\n        if (saslServer.isComplete()) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"SASL server context established. Negotiated QoP is \"\n                + saslServer.getNegotiatedProperty(Sasl.QOP));\n          }\n          String qop = (String) saslServer.getNegotiatedProperty(Sasl.QOP);\n          useWrap = qop != null && !\"auth\".equalsIgnoreCase(qop);\n          user = getAuthorizedUgi(saslServer.getAuthorizationID());\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(\"SASL server successfully authenticated client: \" + user);\n          }\n          rpcMetrics.authenticationSuccesses.inc();\n          AUDITLOG.info(AUTH_SUCCESSFULL_FOR + user);\n          saslContextEstablished = true;\n        }\n      } else {\n        if (LOG.isDebugEnabled())\n          LOG.debug(\"Have read input token of size \" + saslToken.length\n              + \" for processing by saslServer.unwrap()\");\n        \n        if (!useWrap) {\n          processOneRpc(saslToken);\n        } else {\n          byte[] plaintextData = saslServer.unwrap(saslToken, 0,\n              saslToken.length);\n          processUnwrappedData(plaintextData);\n        }\n      }\n    }","commit_id":"c0d70530b173beb2d53a4175236520df8e3967c8","url":"https://github.com/apache/hadoop"},{"original_method":"private static Node coreResolve(String hostName) {\n    List <String> tmpList = new ArrayList<String>(1);\n    tmpList.add(hostName);\n    List <String> rNameList = dnsToSwitchMapping.resolve(tmpList);\n    String rName = null;\n    if (rNameList == null || rNameList.get(0) == null) {\n      rName = NetworkTopology.DEFAULT_RACK;\n      LOG.info(\"Couldn't resolve \" + hostName + \". Falling back to \"\n          + NetworkTopology.DEFAULT_RACK);\n    } else {\n      rName = rNameList.get(0);\n      LOG.info(\"Resolved \" + hostName + \" to \" + rName);\n    }\n    return new NodeBase(hostName, rName);\n  }","id":105386,"modified_method":"private static Node coreResolve(String hostName) {\n    List <String> tmpList = new ArrayList<String>(1);\n    tmpList.add(hostName);\n    List <String> rNameList = dnsToSwitchMapping.resolve(tmpList);\n    String rName = null;\n    if (rNameList == null || rNameList.get(0) == null) {\n      rName = NetworkTopology.DEFAULT_RACK;\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Couldn't resolve \" + hostName + \". Falling back to \"\n            + NetworkTopology.DEFAULT_RACK);\n      }\n    } else {\n      rName = rNameList.get(0);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Resolved \" + hostName + \" to \" + rName);\n      }\n    }\n    return new NodeBase(hostName, rName);\n  }","commit_id":"7f1e2f996995e1883d9336f720c27621cf1b73b6","url":"https://github.com/apache/hadoop"},{"original_method":"public void addIfAbsentConnectionFactory(ConnectionFactory factory)\n    {\n        synchronized (_factories)\n        {\n            String key=StringUtil.asciiToLowerCase(factory.getProtocol());\n            if (_factories.containsKey(key))\n                LOG.info(\"{} addIfAbsent ignored {}\",this,factory);\n            else\n            {\n                _factories.put(key, factory);\n                addBean(factory);\n                if (_defaultProtocol==null)\n                    _defaultProtocol=factory.getProtocol();\n                LOG.info(\"{} addIfAbsent added {}\",this,factory);\n            }\n        }\n    }","id":105387,"modified_method":"public void addIfAbsentConnectionFactory(ConnectionFactory factory)\n    {\n        synchronized (_factories)\n        {\n            String key=StringUtil.asciiToLowerCase(factory.getProtocol());\n            if (_factories.containsKey(key))\n            {\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"{} addIfAbsent ignored {}\", this, factory);\n            }\n            else\n            {\n                _factories.put(key, factory);\n                addBean(factory);\n                if (_defaultProtocol==null)\n                    _defaultProtocol=factory.getProtocol();\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"{} addIfAbsent added {}\", this, factory);\n            }\n        }\n    }","commit_id":"14dc4fade0745899b06994ec2c934a9bf38e7d2e","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void addConnectionFactory(ConnectionFactory factory)\n    {\n        synchronized (_factories)\n        {\n            String key=StringUtil.asciiToLowerCase(factory.getProtocol());\n            ConnectionFactory old=_factories.remove(key);\n            if (old!=null)\n            {\n                if (old.getProtocol().equals(_defaultProtocol))\n                    _defaultProtocol=null;\n                removeBean(old);\n                LOG.info(\"{} removed {}\",this,old);\n            }\n            _factories.put(key, factory);\n            addBean(factory);\n            if (_defaultProtocol==null)\n                _defaultProtocol=factory.getProtocol();\n            LOG.info(\"{} added {}\",this,factory);\n        }\n    }","id":105388,"modified_method":"public void addConnectionFactory(ConnectionFactory factory)\n    {\n        synchronized (_factories)\n        {\n            String key=StringUtil.asciiToLowerCase(factory.getProtocol());\n            ConnectionFactory old=_factories.remove(key);\n            if (old!=null)\n            {\n                if (old.getProtocol().equals(_defaultProtocol))\n                    _defaultProtocol=null;\n                removeBean(old);\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"{} removed {}\", this, old);\n            }\n            _factories.put(key, factory);\n            addBean(factory);\n            if (_defaultProtocol==null)\n                _defaultProtocol=factory.getProtocol();\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"{} added {}\", this, factory);\n        }\n    }","commit_id":"14dc4fade0745899b06994ec2c934a9bf38e7d2e","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Override\n  protected void reduce(K row, Iterable<Put> vals, Context context)\n      throws IOException, InterruptedException {\n    // Using HeapSize to create an upper bound on the memory size of\n    // the puts and flush some portion of the content while looping. This\n    // flush could result in multiple Puts for a single rowkey. That is\n    // acceptable because Combiner is run as an optimization and it's not\n    // critical that all Puts are grouped perfectly.\n    long threshold = context.getConfiguration().getLong(\n        \"putcombiner.row.threshold\", 1L * (1<<30));\n    int cnt = 0;\n    long curSize = 0;\n    Put put = null;\n    Map<byte[], List<Cell>> familyMap = null;\n    for (Put p : vals) {\n      cnt++;\n      if (put == null) {\n        put = p;\n        familyMap = put.getFamilyCellMap();\n      } else {\n        for (Entry<byte[], List<Cell>> entry : p.getFamilyCellMap()\n            .entrySet()) {\n          List<Cell> cells = familyMap.get(entry.getKey());\n          List<Cell> kvs = (cells != null) ? (List<Cell>) cells : null;\n          for (Cell cell : entry.getValue()) {\n            KeyValue kv = KeyValueUtil.ensureKeyValue(cell);\n            curSize += kv.heapSize();\n            if (kvs != null) {\n              kvs.add(kv);\n            }\n          }\n          if (cells == null) {\n            familyMap.put(entry.getKey(), entry.getValue());\n          }\n        }\n        if (cnt % 10 == 0) context.setStatus(\"Combine \" + cnt);\n        if (curSize > threshold) {\n          LOG.info(String.format(\"Combined %d Put(s) into %d.\", cnt, 1));\n          context.write(row, put);\n          put = null;\n          cnt = 0;\n        }\n      }\n    }\n    if (put != null) {\n      LOG.info(String.format(\"Combined %d Put(s) into %d.\", cnt, 1));\n      context.write(row, put);\n    }\n  }","id":105389,"modified_method":"@Override\n  protected void reduce(K row, Iterable<Put> vals, Context context)\n      throws IOException, InterruptedException {\n    // Using HeapSize to create an upper bound on the memory size of\n    // the puts and flush some portion of the content while looping. This\n    // flush could result in multiple Puts for a single rowkey. That is\n    // acceptable because Combiner is run as an optimization and it's not\n    // critical that all Puts are grouped perfectly.\n    long threshold = context.getConfiguration().getLong(\n        \"putcombiner.row.threshold\", 1L * (1<<30));\n    int cnt = 0;\n    long curSize = 0;\n    Put put = null;\n    Map<byte[], List<Cell>> familyMap = null;\n    for (Put p : vals) {\n      cnt++;\n      if (put == null) {\n        put = p;\n        familyMap = put.getFamilyCellMap();\n      } else {\n        for (Entry<byte[], List<Cell>> entry : p.getFamilyCellMap()\n            .entrySet()) {\n          List<Cell> cells = familyMap.get(entry.getKey());\n          List<Cell> kvs = (cells != null) ? (List<Cell>) cells : null;\n          for (Cell cell : entry.getValue()) {\n            KeyValue kv = KeyValueUtil.ensureKeyValue(cell);\n            curSize += kv.heapSize();\n            if (kvs != null) {\n              kvs.add(kv);\n            }\n          }\n          if (cells == null) {\n            familyMap.put(entry.getKey(), entry.getValue());\n          }\n        }\n        if (cnt % 10 == 0) context.setStatus(\"Combine \" + cnt);\n        if (curSize > threshold) {\n          if (LOG.isDebugEnabled()) {\n            LOG.debug(String.format(\"Combined %d Put(s) into %d.\", cnt, 1));\n          }\n          context.write(row, put);\n          put = null;\n          curSize = 0;\n          cnt = 0;\n        }\n      }\n    }\n    if (put != null) {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(String.format(\"Combined %d Put(s) into %d.\", cnt, 1));\n      }\n      context.write(row, put);\n    }\n  }","commit_id":"2c28ea06dcfbc58e22170172356dd5542d220f8e","url":"https://github.com/apache/hbase"},{"original_method":"@Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            public void configure() {\n                from(\"cache://TestCache1\").filter(header(\"CACHE_KEY\").isEqualTo(\"greeting\"))\n                    .process(new CacheBasedMessageBodyReplacer(\"cache://TestCache1\", \"farewell\"))\n                    .to(\"direct:next\");\n\n                from(\"direct:next\").process(new Processor() {\n                    public void process(Exchange exchange) throws Exception {\n                        String key = (String)exchange.getIn().getHeader(\"CACHE_KEY\");\n                        Object body = exchange.getIn().getBody();\n                        String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);\n\n                        LOG.info(\"------- Payload Replacement Results ---------\");\n                        LOG.info(\"The following Payload was replaced from Cache: TestCache1\");\n                        LOG.info(\"key = \" + key);\n                        LOG.info(\"Before value = Hello World\");\n                        LOG.info(\"After value = \" + data);\n                        LOG.info(\"------ End  ------\");\n                    }\n                }).to(\"mock:result\");\n\n                from(\"direct:start\").to(\"cache://TestCache1\");\n\n            }\n        };\n    }","id":105390,"modified_method":"@Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            public void configure() {\n                from(\"cache://TestCache1\").filter(header(\"CACHE_KEY\").isEqualTo(\"greeting\"))\n                    .process(new CacheBasedMessageBodyReplacer(\"cache://TestCache1\", \"farewell\"))\n                    .to(\"direct:next\");\n\n                from(\"direct:next\").process(new Processor() {\n                    public void process(Exchange exchange) throws Exception {\n                        String key = (String)exchange.getIn().getHeader(\"CACHE_KEY\");\n                        Object body = exchange.getIn().getBody();\n                        String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);\n\n                        if (LOG.isDebugEnabled()) {\n                            LOG.debug(\"------- Payload Replacement Results ---------\");\n                            LOG.debug(\"The following Payload was replaced from Cache: TestCache1\");\n                            LOG.debug(\"key = \" + key);\n                            LOG.debug(\"Before value = Hello World\");\n                            LOG.debug(\"After value = \" + data);\n                            LOG.debug(\"------ End  ------\");\n                        }\n                    }\n                }).to(\"mock:result\");\n\n                from(\"direct:start\").to(\"cache://TestCache1\");\n\n            }\n        };\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testCacheBasedBodyReplacer() throws Exception {\n        LOG.info(\"Beginning Test ---> testCacheBasedBodyReplacer()\");\n\n        resultEndpoint.expectedMessageCount(1);\n\n        List<String> keys = new ArrayList<String>();\n        keys.add(\"farewell\");\n        keys.add(\"greeting\");\n        for (final String key : keys) {\n            producerTemplate.send(new Processor() {\n                public void process(Exchange exchange) throws Exception {\n                    exchange.setProperty(Exchange.CHARSET_NAME, \"UTF-8\");\n                    Message in = exchange.getIn();\n                    in.setHeader(\"CACHE_OPERATION\", \"ADD\");\n                    in.setHeader(\"CACHE_KEY\", key);\n                    if (key.equalsIgnoreCase(\"greeting\")) {\n                        in.setBody(\"Hello World\");\n                    } else {\n                        in.setBody(\"Bye World\");\n                    }\n                }\n            });\n        }\n\n        resultEndpoint.assertIsSatisfied();\n        LOG.info(\"Completed Test ---> testCacheBasedBodyReplacer()\");\n\n    }","id":105391,"modified_method":"@Test\n    public void testCacheBasedBodyReplacer() throws Exception {\n        LOG.debug(\"Beginning Test ---> testCacheBasedBodyReplacer()\");\n\n        resultEndpoint.expectedMessageCount(1);\n\n        List<String> keys = new ArrayList<String>();\n        keys.add(\"farewell\");\n        keys.add(\"greeting\");\n        for (final String key : keys) {\n            producerTemplate.send(new Processor() {\n                public void process(Exchange exchange) throws Exception {\n                    exchange.setProperty(Exchange.CHARSET_NAME, \"UTF-8\");\n                    Message in = exchange.getIn();\n                    in.setHeader(\"CACHE_OPERATION\", \"ADD\");\n                    in.setHeader(\"CACHE_KEY\", key);\n                    if (key.equalsIgnoreCase(\"greeting\")) {\n                        in.setBody(\"Hello World\");\n                    } else {\n                        in.setBody(\"Bye World\");\n                    }\n                }\n            });\n        }\n\n        resultEndpoint.assertIsSatisfied();\n        LOG.debug(\"Completed Test ---> testCacheBasedBodyReplacer()\");\n\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"public void process(Exchange exchange) throws Exception {\n        // Cache the buffer to the specified Cache against the specified key\n        cacheManager = new CacheManagerFactory().instantiateCacheManager();\n\n        if (isValid(cacheManager, cacheName, key)) {\n            cache = cacheManager.getCache(cacheName);\n            LOG.info(\"Replacing Message Body from CacheName \" + cacheName + \" for key \" + key);\n            exchange.getIn().setHeader(\"CACHE_KEY\", key);\n            exchange.getIn().setBody(cache.get(key).getObjectValue());\n        }\n\n    }","id":105392,"modified_method":"public void process(Exchange exchange) throws Exception {\n        // Cache the buffer to the specified Cache against the specified key\n        cacheManager = new CacheManagerFactory().instantiateCacheManager();\n\n        if (isValid(cacheManager, cacheName, key)) {\n            cache = cacheManager.getCache(cacheName);\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Replacing Message Body from CacheName \" + cacheName + \" for key \" + key);\n            }\n            exchange.getIn().setHeader(\"CACHE_KEY\", key);\n            exchange.getIn().setBody(cache.get(key).getObjectValue());\n        }\n\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"public void process(Exchange exchange) throws Exception {\n        // Cache the buffer to the specified Cache against the specified key\n        cacheManager = new CacheManagerFactory().instantiateCacheManager();\n\n        if (isValid(cacheManager, cacheName, key)) {\n            cache = cacheManager.getCache(cacheName);\n            LOG.info(\"Replacing Token \" + replacementToken + \"in Message with value stored against key \"\n                     + key + \" in CacheName \" + cacheName);\n            exchange.getIn().setHeader(\"CACHE_KEY\", key);\n            Object body = exchange.getIn().getBody();\n            InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, body);\n\n            byte[] buffer = IOConverter.toBytes(is);\n            is.close();\n\n            // Note: The value in the cache must be a String\n            String cacheValue = exchange.getContext().getTypeConverter().convertTo(\n                                                                                   String.class,\n                                                                                   cache.get(key)\n                                                                                       .getObjectValue());\n            String replacedTokenString = new String(buffer).replaceAll(replacementToken, cacheValue);\n            LOG.debug(\"replacedTokenString = \" + replacedTokenString);\n            exchange.getIn().setBody(replacedTokenString.getBytes());\n        }\n    }","id":105393,"modified_method":"public void process(Exchange exchange) throws Exception {\n        // Cache the buffer to the specified Cache against the specified key\n        cacheManager = new CacheManagerFactory().instantiateCacheManager();\n\n        if (isValid(cacheManager, cacheName, key)) {\n            cache = cacheManager.getCache(cacheName);\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Replacing Token \" + replacementToken + \"in Message with value stored against key \"\n                         + key + \" in CacheName \" + cacheName);\n            }\n            exchange.getIn().setHeader(\"CACHE_KEY\", key);\n            Object body = exchange.getIn().getBody();\n            InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, body);\n\n            byte[] buffer = IOConverter.toBytes(is);\n            is.close();\n\n            // Note: The value in the cache must be a String\n            String cacheValue = exchange.getContext().getTypeConverter().convertTo(\n                                                                                   String.class,\n                                                                                   cache.get(key)\n                                                                                       .getObjectValue());\n            String replacedTokenString = new String(buffer).replaceAll(replacementToken, cacheValue);\n            LOG.debug(\"replacedTokenString = \" + replacedTokenString);\n            exchange.getIn().setBody(replacedTokenString.getBytes());\n        }\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            public void configure() {\n                from(\"cache://TestCache1\").filter(header(\"CACHE_KEY\").isEqualTo(\"quote\"))\n                    .process(new CacheBasedTokenReplacer(\"cache://TestCache1\", \"novel\", \"#novel#\"))\n                    .process(new CacheBasedTokenReplacer(\"cache://TestCache1\", \"author\", \"#author#\"))\n                    .process(new CacheBasedTokenReplacer(\"cache://TestCache1\", \"number\", \"#number#\"))\n                    .to(\"direct:next\");\n\n                from(\"direct:next\").process(new Processor() {\n                    public void process(Exchange exchange) throws Exception {\n                        String key = (String)exchange.getIn().getHeader(\"CACHE_KEY\");\n                        Object body = exchange.getIn().getBody();\n                        String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);\n\n                        LOG.info(\"------- Payload Replacement Results ---------\");\n                        LOG.info(\"The following Payload was replaced from Cache: TestCache1\");\n                        LOG.info(\"key = \" + key);\n                        LOG.info(\"Before Value = \" + quote);\n                        LOG.info(\"After value = \" + data);\n                        LOG.info(\"------ End  ------\");\n                    }\n                }).to(\"mock:result\");\n\n                from(\"direct:loadcache\").to(\"cache://TestCache1\");\n\n            }\n        };\n    }","id":105394,"modified_method":"@Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            public void configure() {\n                from(\"cache://TestCache1\").filter(header(\"CACHE_KEY\").isEqualTo(\"quote\"))\n                    .process(new CacheBasedTokenReplacer(\"cache://TestCache1\", \"novel\", \"#novel#\"))\n                    .process(new CacheBasedTokenReplacer(\"cache://TestCache1\", \"author\", \"#author#\"))\n                    .process(new CacheBasedTokenReplacer(\"cache://TestCache1\", \"number\", \"#number#\"))\n                    .to(\"direct:next\");\n\n                from(\"direct:next\").process(new Processor() {\n                    public void process(Exchange exchange) throws Exception {\n                        String key = (String)exchange.getIn().getHeader(\"CACHE_KEY\");\n                        Object body = exchange.getIn().getBody();\n                        String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);\n\n                        if (LOG.isDebugEnabled()) {\n                            LOG.debug(\"------- Payload Replacement Results ---------\");\n                            LOG.debug(\"The following Payload was replaced from Cache: TestCache1\");\n                            LOG.debug(\"key = \" + key);\n                            LOG.debug(\"Before Value = \" + quote);\n                            LOG.debug(\"After value = \" + data);\n                            LOG.debug(\"------ End  ------\");\n                        }\n                    }\n                }).to(\"mock:result\");\n\n                from(\"direct:loadcache\").to(\"cache://TestCache1\");\n\n            }\n        };\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testCacheBasedTokenReplacer() throws Exception {\n        LOG.info(\"Beginning Test ---> testCacheBasedTokenReplacer()\");\n\n        resultEndpoint.expectedMessageCount(1);\n\n        List<String> keys = new ArrayList<String>();\n        keys.add(\"novel\");\n        keys.add(\"author\");\n        keys.add(\"number\");\n        keys.add(\"quote\");\n        for (final String key : keys) {\n            producerTemplate.send(new Processor() {\n                public void process(Exchange exchange) throws Exception {\n                    exchange.setProperty(Exchange.CHARSET_NAME, \"UTF-8\");\n                    Message in = exchange.getIn();\n                    in.setHeader(\"CACHE_OPERATION\", \"ADD\");\n                    in.setHeader(\"CACHE_KEY\", key);\n                    if (key.equalsIgnoreCase(\"novel\")) {\n                        in.setBody(\"Rubaiyat\");\n                    } else if (key.equalsIgnoreCase(\"author\")) {\n                        in.setBody(\"Omar Khayyam\");\n                    } else if (key.equalsIgnoreCase(\"number\")) {\n                        in.setBody(\"one\");\n                    } else {\n                        in.setBody(quote);\n                    }\n                }\n            });\n        }\n\n        resultEndpoint.assertIsSatisfied();\n        LOG.info(\"Completed Test ---> testCacheBasedTokenReplacer()\");\n\n    }","id":105395,"modified_method":"@Test\n    public void testCacheBasedTokenReplacer() throws Exception {\n        LOG.debug(\"Beginning Test ---> testCacheBasedTokenReplacer()\");\n\n        resultEndpoint.expectedMessageCount(1);\n\n        List<String> keys = new ArrayList<String>();\n        keys.add(\"novel\");\n        keys.add(\"author\");\n        keys.add(\"number\");\n        keys.add(\"quote\");\n        for (final String key : keys) {\n            producerTemplate.send(new Processor() {\n                public void process(Exchange exchange) throws Exception {\n                    exchange.setProperty(Exchange.CHARSET_NAME, \"UTF-8\");\n                    Message in = exchange.getIn();\n                    in.setHeader(\"CACHE_OPERATION\", \"ADD\");\n                    in.setHeader(\"CACHE_KEY\", key);\n                    if (key.equalsIgnoreCase(\"novel\")) {\n                        in.setBody(\"Rubaiyat\");\n                    } else if (key.equalsIgnoreCase(\"author\")) {\n                        in.setBody(\"Omar Khayyam\");\n                    } else if (key.equalsIgnoreCase(\"number\")) {\n                        in.setBody(\"one\");\n                    } else {\n                        in.setBody(quote);\n                    }\n                }\n            });\n        }\n\n        resultEndpoint.assertIsSatisfied();\n        LOG.debug(\"Completed Test ---> testCacheBasedTokenReplacer()\");\n\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            public void configure() {\n                from(\"cache://TestCache1\").filter(header(\"CACHE_KEY\").isEqualTo(\"XML_FRAGMENT\"))\n                    .process(new CacheBasedXPathReplacer(\"cache://TestCache1\", \"book1\", \"/books/book1\"))\n                    .process(new CacheBasedXPathReplacer(\"cache://TestCache1\", \"book2\", \"/books/book2\"))\n                    .to(\"direct:next\");\n\n                from(\"direct:next\").process(new Processor() {\n                    public void process(Exchange exchange) throws Exception {\n                        String key = (String)exchange.getIn().getHeader(\"CACHE_KEY\");\n                        Object body = exchange.getIn().getBody();\n                        String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);\n\n                        LOG.info(\"------- Payload Replacement Results ---------\");\n                        LOG.info(\"The following Payload was replaced from Cache: TestCache1\");\n                        LOG.info(\"key = \" + key);\n                        LOG.info(\"Before Value = \" + xmlFragment);\n                        LOG.info(\"After value = \" + data);\n                        LOG.info(\"------ End  ------\");\n                    }\n                }).to(\"mock:result\");\n\n                from(\"direct:loadcache\").to(\"cache://TestCache1\");\n\n            }\n        };\n    }","id":105396,"modified_method":"@Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            public void configure() {\n                from(\"cache://TestCache1\").filter(header(\"CACHE_KEY\").isEqualTo(\"XML_FRAGMENT\"))\n                    .process(new CacheBasedXPathReplacer(\"cache://TestCache1\", \"book1\", \"/books/book1\"))\n                    .process(new CacheBasedXPathReplacer(\"cache://TestCache1\", \"book2\", \"/books/book2\"))\n                    .to(\"direct:next\");\n\n                from(\"direct:next\").process(new Processor() {\n                    public void process(Exchange exchange) throws Exception {\n                        String key = (String)exchange.getIn().getHeader(\"CACHE_KEY\");\n                        Object body = exchange.getIn().getBody();\n                        String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);\n\n                        if (LOG.isDebugEnabled()) {\n                            LOG.debug(\"------- Payload Replacement Results ---------\");\n                            LOG.debug(\"The following Payload was replaced from Cache: TestCache1\");\n                            LOG.debug(\"key = \" + key);\n                            LOG.debug(\"Before Value = \" + xmlFragment);\n                            LOG.debug(\"After value = \" + data);\n                            LOG.debug(\"------ End  ------\");\n                        }\n                    }\n                }).to(\"mock:result\");\n\n                from(\"direct:loadcache\").to(\"cache://TestCache1\");\n\n            }\n        };\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testCacheBasedXPathElementReplacer() throws Exception {\n        LOG.info(\"Beginning Test ---> testCacheBasedXPathElementReplacer()\");\n\n        resultEndpoint.expectedMessageCount(1);\n\n        List<String> keys = new ArrayList<String>();\n        keys.add(\"book1\");\n        keys.add(\"book2\");\n        keys.add(\"XML_FRAGMENT\");\n        for (final String key : keys) {\n            producerTemplate.send(new Processor() {\n                public void process(Exchange exchange) throws Exception {\n                    exchange.setProperty(Exchange.CHARSET_NAME, \"UTF-8\");\n                    Message in = exchange.getIn();\n                    in.setHeader(\"CACHE_OPERATION\", \"ADD\");\n                    in.setHeader(\"CACHE_KEY\", key);\n                    if (key.equalsIgnoreCase(\"book1\")) {\n                        in.setBody(book1);\n                    } else if (key.equalsIgnoreCase(\"book2\")) {\n                        in.setBody(book2);\n                    } else {\n                        in.setBody(xmlFragment);\n                    }\n                }\n            });\n        }\n\n        resultEndpoint.assertIsSatisfied();\n        LOG.info(\"Completed Test ---> testCacheBasedXPathElementReplacer()\");\n\n    }","id":105397,"modified_method":"@Test\n    public void testCacheBasedXPathElementReplacer() throws Exception {\n        LOG.debug(\"Beginning Test ---> testCacheBasedXPathElementReplacer()\");\n\n        resultEndpoint.expectedMessageCount(1);\n\n        List<String> keys = new ArrayList<String>();\n        keys.add(\"book1\");\n        keys.add(\"book2\");\n        keys.add(\"XML_FRAGMENT\");\n        for (final String key : keys) {\n            producerTemplate.send(new Processor() {\n                public void process(Exchange exchange) throws Exception {\n                    exchange.setProperty(Exchange.CHARSET_NAME, \"UTF-8\");\n                    Message in = exchange.getIn();\n                    in.setHeader(\"CACHE_OPERATION\", \"ADD\");\n                    in.setHeader(\"CACHE_KEY\", key);\n                    if (key.equalsIgnoreCase(\"book1\")) {\n                        in.setBody(book1);\n                    } else if (key.equalsIgnoreCase(\"book2\")) {\n                        in.setBody(book2);\n                    } else {\n                        in.setBody(xmlFragment);\n                    }\n                }\n            });\n        }\n\n        resultEndpoint.assertIsSatisfied();\n        LOG.debug(\"Completed Test ---> testCacheBasedXPathElementReplacer()\");\n\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"public void process(Exchange exchange) throws Exception {\n        // Cache the buffer to the specified Cache against the specified key\n        cacheManager = new CacheManagerFactory().instantiateCacheManager();\n\n        if (isValid(cacheManager, cacheName, key)) {\n            cache = cacheManager.getCache(cacheName);\n            LOG.info(\"Replacing XPath value \" + xpath + \"in Message with value stored against key \" + key\n                     + \" in CacheName \" + cacheName);\n            exchange.getIn().setHeader(\"CACHE_KEY\", key);\n            Object body = exchange.getIn().getBody();\n            InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, body);\n            try {\n                document = exchange.getContext().getTypeConverter().convertTo(Document.class, exchange, is);\n            } finally {\n                is.close();\n            }\n\n            InputStream cis = exchange.getContext().getTypeConverter().convertTo(\n                                                                                 InputStream.class,\n                                                                                 cache.get(key)\n                                                                                     .getObjectValue());\n            try {\n                Document cacheValueDocument = exchange.getContext().getTypeConverter()\n                    .convertTo(Document.class, exchange, cis);\n\n                // Create/setup the Transformer\n                XmlConverter xmlConverter = new XmlConverter();\n                String xslString = IOConverter.toString(new File(\"./src/main/resources/xpathreplacer.xsl\"));\n                xslString = xslString.replace(\"##match_token##\", xpath);\n                Source xslSource = xmlConverter.toStreamSource(new StringReader(xslString));\n                TransformerFactory transformerFactory = xmlConverter.createTransformerFactory();\n                Transformer transformer = transformerFactory.newTransformer(xslSource);\n                source = xmlConverter.toSource(document);\n                result = new DOMResult();\n\n                transformer.setParameter(\"cacheValue\", cacheValueDocument);\n                transformer.transform(source, result);\n            } finally {\n                cis.close();\n            }\n        }\n\n        exchange.getIn().setBody(\n                                 IOConverter.toBytes(IOConverter\n                                     .toInputStrean(new DOMSource(result.getNode()))));\n    }","id":105398,"modified_method":"public void process(Exchange exchange) throws Exception {\n        // Cache the buffer to the specified Cache against the specified key\n        cacheManager = new CacheManagerFactory().instantiateCacheManager();\n\n        if (isValid(cacheManager, cacheName, key)) {\n            cache = cacheManager.getCache(cacheName);\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Replacing XPath value \" + xpath + \"in Message with value stored against key \" + key\n                        + \" in CacheName \" + cacheName);\n            }\n            exchange.getIn().setHeader(\"CACHE_KEY\", key);\n            Object body = exchange.getIn().getBody();\n            InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, body);\n            try {\n                document = exchange.getContext().getTypeConverter().convertTo(Document.class, exchange, is);\n            } finally {\n                is.close();\n            }\n\n            InputStream cis = exchange.getContext().getTypeConverter().convertTo(\n                                                                                 InputStream.class,\n                                                                                 cache.get(key)\n                                                                                     .getObjectValue());\n            try {\n                Document cacheValueDocument = exchange.getContext().getTypeConverter()\n                    .convertTo(Document.class, exchange, cis);\n\n                // Create/setup the Transformer\n                XmlConverter xmlConverter = new XmlConverter();\n                String xslString = IOConverter.toString(new File(\"./src/main/resources/xpathreplacer.xsl\"));\n                xslString = xslString.replace(\"##match_token##\", xpath);\n                Source xslSource = xmlConverter.toStreamSource(new StringReader(xslString));\n                TransformerFactory transformerFactory = xmlConverter.createTransformerFactory();\n                Transformer transformer = transformerFactory.newTransformer(xslSource);\n                source = xmlConverter.toSource(document);\n                result = new DOMResult();\n\n                transformer.setParameter(\"cacheValue\", cacheValueDocument);\n                transformer.transform(source, result);\n            } finally {\n                cis.close();\n            }\n        }\n\n        exchange.getIn().setBody(\n                                 IOConverter.toBytes(IOConverter\n                                     .toInputStrean(new DOMSource(result.getNode()))));\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"private void createConsumerCacheConnection() {\n        cacheManager = new CacheManagerFactory().instantiateCacheManager();\n        CacheEventListener cacheEventListener = new CacheEventListenerFactory().createCacheEventListener(null);\n        cacheEventListener.setCacheConsumer(this);\n\n        if (cacheManager.cacheExists(config.getCacheName())) {\n            cache = cacheManager.getCache(config.getCacheName());\n            cache.getCacheEventNotificationService().registerListener(cacheEventListener);\n        } else {\n            cache = new Cache(config.getCacheName(), \n                    config.getMaxElementsInMemory(),\n                    config.getMemoryStoreEvictionPolicy(), \n                    config.isOverflowToDisk(), \n                    config.getDiskStorePath(), \n                    config.isEternal(), \n                    config.getTimeToLiveSeconds(), \n                    config.getTimeToIdleSeconds(), \n                    config.isDiskPersistent(), \n                    config.getDiskExpiryThreadIntervalSeconds(), \n                    null);\n            cache.getCacheEventNotificationService().registerListener(cacheEventListener);\n            cacheManager.addCache(cache);\n            LOG.info(\"Added a new cache: \" + cache.getName());  \n        }\n    }","id":105399,"modified_method":"private void createConsumerCacheConnection() {\n        cacheManager = new CacheManagerFactory().instantiateCacheManager();\n        CacheEventListener cacheEventListener = new CacheEventListenerFactory().createCacheEventListener(null);\n        cacheEventListener.setCacheConsumer(this);\n\n        if (cacheManager.cacheExists(config.getCacheName())) {\n            cache = cacheManager.getCache(config.getCacheName());\n            cache.getCacheEventNotificationService().registerListener(cacheEventListener);\n        } else {\n            cache = new Cache(config.getCacheName(), \n                    config.getMaxElementsInMemory(),\n                    config.getMemoryStoreEvictionPolicy(), \n                    config.isOverflowToDisk(), \n                    config.getDiskStorePath(), \n                    config.isEternal(), \n                    config.getTimeToLiveSeconds(), \n                    config.getTimeToIdleSeconds(), \n                    config.isDiskPersistent(), \n                    config.getDiskExpiryThreadIntervalSeconds(), \n                    null);\n            cache.getCacheEventNotificationService().registerListener(cacheEventListener);\n            cacheManager.addCache(cache);\n            LOG.debug(\"Added a new cache: \" + cache.getName());  \n        }\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testReceivingFileFromCache() throws Exception {\n        LOG.info(\"Beginning Test ---> testReceivingFileFromCache()\");\n\n        resultEndpoint.expectedMessageCount(3);\n\n        List<String> operations = new ArrayList<String>();\n        operations.add(\"ADD\");\n        operations.add(\"UPDATE\");\n        operations.add(\"DELETE\");\n        for (final String operation : operations) {\n            producerTemplate.send(new Processor() {\n                public void process(Exchange exchange) throws Exception {\n                    exchange.setProperty(Exchange.CHARSET_NAME, \"UTF-8\");\n                    Message in = exchange.getIn();\n                    in.setHeader(\"CACHE_OPERATION\", operation);\n                    in.setHeader(\"CACHE_KEY\", \"greeting\");\n                    in.setBody(\"Hello World\");\n                }\n            });\n        }\n\n        resultEndpoint.assertIsSatisfied();\n        LOG.info(\"Completed Test ---> testReceivingFileFromCache()\");\n    }","id":105400,"modified_method":"@Test\n    public void testReceivingFileFromCache() throws Exception {\n        LOG.debug(\"Beginning Test ---> testReceivingFileFromCache()\");\n\n        resultEndpoint.expectedMessageCount(3);\n\n        List<String> operations = new ArrayList<String>();\n        operations.add(\"ADD\");\n        operations.add(\"UPDATE\");\n        operations.add(\"DELETE\");\n        for (final String operation : operations) {\n            producerTemplate.send(new Processor() {\n                public void process(Exchange exchange) throws Exception {\n                    exchange.setProperty(Exchange.CHARSET_NAME, \"UTF-8\");\n                    Message in = exchange.getIn();\n                    in.setHeader(\"CACHE_OPERATION\", operation);\n                    in.setHeader(\"CACHE_KEY\", \"greeting\");\n                    in.setBody(\"Hello World\");\n                }\n            });\n        }\n\n        resultEndpoint.assertIsSatisfied();\n        LOG.debug(\"Completed Test ---> testReceivingFileFromCache()\");\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            public void configure() {\n                from(\"cache://TestCache1\").process(new Processor() {\n                    public void process(Exchange exchange) throws Exception {\n                        String operation = (String)exchange.getIn().getHeader(\"CACHE_OPERATION\");\n                        String key = (String)exchange.getIn().getHeader(\"CACHE_KEY\");\n                        Object body = exchange.getIn().getBody();\n                        String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);\n\n                        LOG.info(\"------- Cache Event Notification ---------\");\n                        LOG.info(\"Received notification for the following activity in cache TestCache1:\");\n                        LOG.info(\"Operation = \" + operation);\n                        LOG.info(\"key = \" + key);\n                        LOG.info(\"value = \" + data);\n                        LOG.info(\"------ End Cache Event Notification ------\");\n                    }\n\n                }).to(\"mock:result\");\n\n                from(\"direct:start\").to(\"cache://TestCache1\");\n            }\n        };\n    }","id":105401,"modified_method":"@Override\n    protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            public void configure() {\n                from(\"cache://TestCache1\").process(new Processor() {\n                    public void process(Exchange exchange) throws Exception {\n                        String operation = (String)exchange.getIn().getHeader(\"CACHE_OPERATION\");\n                        String key = (String)exchange.getIn().getHeader(\"CACHE_KEY\");\n                        Object body = exchange.getIn().getBody();\n                        String data = exchange.getContext().getTypeConverter().convertTo(String.class, body);\n\n                        if (LOG.isDebugEnabled()) {\n                            LOG.debug(\"------- Cache Event Notification ---------\");\n                            LOG.debug(\"Received notification for the following activity in cache TestCache1:\");\n                            LOG.debug(\"Operation = \" + operation);\n                            LOG.debug(\"key = \" + key);\n                            LOG.debug(\"value = \" + data);\n                            LOG.debug(\"------ End Cache Event Notification ------\");\n                        }\n                    }\n\n                }).to(\"mock:result\");\n\n                from(\"direct:start\").to(\"cache://TestCache1\");\n            }\n        };\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"public void notifyElementExpired(Ehcache cache, Element element) {\n        LOG.info(\"Element\" + element.toString() + \" has expired in cache \" + cache.getName());        \n    }","id":105402,"modified_method":"public void notifyElementExpired(Ehcache cache, Element element) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Element\" + element.toString() + \" has expired in cache \" + cache.getName());       \n        }\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"public void notifyRemoveAll(Ehcache cache) {\n        LOG.info(\"Cache \" + cache.getName() + \" is being emptied and all elements removed\");\n        dispatchExchange(cache, null, \"DELETEALL\");\n        \n    }","id":105403,"modified_method":"public void notifyRemoveAll(Ehcache cache) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Cache \" + cache.getName() + \" is being emptied and all elements removed\");\n        }\n        dispatchExchange(cache, null, \"DELETEALL\");\n        \n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"public void notifyElementPut(Ehcache cache, Element element)\n        throws CacheException {\n        LOG.info(\"Element\" + element.toString() + \" has just been added/put in cache \" + cache.getName());\n        dispatchExchange(cache, element, \"ADD\");\n    }","id":105404,"modified_method":"public void notifyElementPut(Ehcache cache, Element element)\n        throws CacheException {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Element\" + element.toString() + \" has just been added/put in cache \" + cache.getName());\n        }\n        dispatchExchange(cache, element, \"ADD\");\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"public void notifyElementUpdated(Ehcache cache, Element element)\n        throws CacheException {\n        LOG.info(\"Element\" + element.toString() + \" has just been updated in cache \" + cache.getName());\n        dispatchExchange(cache, element, \"UPDATE\");            \n    }","id":105405,"modified_method":"public void notifyElementUpdated(Ehcache cache, Element element)\n        throws CacheException {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Element\" + element.toString() + \" has just been updated in cache \" + cache.getName());\n        }\n        dispatchExchange(cache, element, \"UPDATE\");            \n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"public void notifyElementRemoved(Ehcache cache, Element element)\n        throws CacheException {\n        LOG.info(\"Element\" + element.toString() + \" has just been removed from cache \" + cache.getName());\n        dispatchExchange(cache, element, \"DELETE\");        \n    }","id":105406,"modified_method":"public void notifyElementRemoved(Ehcache cache, Element element)\n        throws CacheException {\n        \n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Element\" + element.toString() + \" has just been removed from cache \" + cache.getName());\n        }\n        dispatchExchange(cache, element, \"DELETE\");        \n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"public void notifyElementEvicted(Ehcache cache, Element element) {\n        LOG.info(\"Element\" + element.toString() + \" is being evicted from cache \" + cache.getName());\n        \n    }","id":105407,"modified_method":"public void notifyElementEvicted(Ehcache cache, Element element) {\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Element\" + element.toString() + \" is being evicted from cache \" + cache.getName());\n        }\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"private void dispatchExchange(Ehcache cache, Element element, String operation) {\n        Exchange exchange;\n        \n        LOG.info(\"Consumer Dispatching the Exchange containing the Element \" + element.toString() + \" in cache \" + cache.getName());\n        if (element == null) {\n            exchange = cacheConsumer.getEndpoint().createCacheExchange(operation, \"\", \"\");\n        } else {\n            exchange = cacheConsumer.getEndpoint().createCacheExchange(operation, (String) element.getObjectKey(), element.getObjectValue());\n        }\n        try {\n            cacheConsumer.getProcessor().process(exchange);\n        } catch (Exception e) {\n            throw new CacheException(\"Error in consumer while dispatching exchange containing Key \" + (String) element.getObjectKey() + \" for further processing  \", e);\n        }\n    }","id":105408,"modified_method":"private void dispatchExchange(Ehcache cache, Element element, String operation) {\n        Exchange exchange;\n        \n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Consumer Dispatching the Exchange containing the Element \" + element.toString() + \" in cache \" + cache.getName());\n        }\n        if (element == null) {\n            exchange = cacheConsumer.getEndpoint().createCacheExchange(operation, \"\", \"\");\n        } else {\n            exchange = cacheConsumer.getEndpoint().createCacheExchange(operation, (String) element.getObjectKey(), element.getObjectValue());\n        }\n        try {\n            cacheConsumer.getProcessor().process(exchange);\n        } catch (Exception e) {\n            throw new CacheException(\"Error in consumer while dispatching exchange containing Key \" + (String) element.getObjectKey() + \" for further processing  \", e);\n        }\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"public void process(Exchange exchange) throws Exception {\n        LOG.info(\"In CacheProducer.process()\");\n        Object body = exchange.getIn().getBody();\n        InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, body);\n        \n        // Read InputStream into a byte[] buffer\n        byte[] buffer = new byte[is.available()];\n        int n = is.available();\n        for (int j = 0; j < n; j++) {\n            buffer[j] = (byte)is.read();\n        }        \n        \n        // Cache the buffer to the specified Cache against the specified key \n        cacheManager = new CacheManagerFactory().instantiateCacheManager();\n        \n        LOG.info(\"Cache Name: \" + config.getCacheName());\n        if (cacheManager.cacheExists(config.getCacheName())) {\n            LOG.info(\"Found an existing cache: \" + config.getCacheName());\n            LOG.info(\"Cache \" + config.getCacheName() + \" currently contains \" + cacheManager.getCache(config.getCacheName()).getSize() + \" elements\");\n            cache = cacheManager.getCache(config.getCacheName());\n        } else {\n            cache = new Cache(config.getCacheName(), \n                    config.getMaxElementsInMemory(),\n                    config.getMemoryStoreEvictionPolicy(), \n                    config.isOverflowToDisk(), \n                    config.getDiskStorePath(), \n                    config.isEternal(), \n                    config.getTimeToLiveSeconds(), \n                    config.getTimeToIdleSeconds(), \n                    config.isDiskPersistent(), \n                    config.getDiskExpiryThreadIntervalSeconds(), \n                    null);\n            cacheManager.addCache(cache);\n            LOG.info(\"Added a new cache: \" + cache.getName());            \n        }\n       \n        \n        String key = (String) exchange.getIn().getHeader(\"CACHE_KEY\");\n        String operation = (String) exchange.getIn().getHeader(\"CACHE_OPERATION\");\n        if (operation == null) {\n            throw new CacheException(\"Operation property is not specified in the incoming exchange header.\"\n                + \"A valid Operation property must be set to ADD, UPDATE, DELETE, DELETEALL\");\n        }\n        if ((key == null) && (!operation.equalsIgnoreCase(\"DELETEALL\"))) {\n            throw new CacheException(\"Cache Key is not specified in exchange either header or URL. Unable to add objects to the cache without a Key\");\n        }\n        \n        performCacheOperation(operation, key, buffer);\n    }","id":105409,"modified_method":"public void process(Exchange exchange) throws Exception {\n        Object body = exchange.getIn().getBody();\n        InputStream is = exchange.getContext().getTypeConverter().convertTo(InputStream.class, body);\n        \n        // Read InputStream into a byte[] buffer\n        byte[] buffer = new byte[is.available()];\n        int n = is.available();\n        for (int j = 0; j < n; j++) {\n            buffer[j] = (byte)is.read();\n        }        \n        \n        // Cache the buffer to the specified Cache against the specified key \n        cacheManager = new CacheManagerFactory().instantiateCacheManager();\n        \n        LOG.debug(\"Cache Name: \" + config.getCacheName());\n        if (cacheManager.cacheExists(config.getCacheName())) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Found an existing cache: \" + config.getCacheName());\n                LOG.debug(\"Cache \" + config.getCacheName() + \" currently contains \" + cacheManager.getCache(config.getCacheName()).getSize() + \" elements\");\n            }\n            cache = cacheManager.getCache(config.getCacheName());\n        } else {\n            cache = new Cache(config.getCacheName(), \n                    config.getMaxElementsInMemory(),\n                    config.getMemoryStoreEvictionPolicy(), \n                    config.isOverflowToDisk(), \n                    config.getDiskStorePath(), \n                    config.isEternal(), \n                    config.getTimeToLiveSeconds(), \n                    config.getTimeToIdleSeconds(), \n                    config.isDiskPersistent(), \n                    config.getDiskExpiryThreadIntervalSeconds(), \n                    null);\n            cacheManager.addCache(cache);\n            LOG.debug(\"Added a new cache: \" + cache.getName());            \n        }\n       \n        \n        String key = (String) exchange.getIn().getHeader(\"CACHE_KEY\");\n        String operation = (String) exchange.getIn().getHeader(\"CACHE_OPERATION\");\n        if (operation == null) {\n            throw new CacheException(\"Operation property is not specified in the incoming exchange header.\"\n                + \"A valid Operation property must be set to ADD, UPDATE, DELETE, DELETEALL\");\n        }\n        if ((key == null) && (!operation.equalsIgnoreCase(\"DELETEALL\"))) {\n            throw new CacheException(\"Cache Key is not specified in exchange either header or URL. Unable to add objects to the cache without a Key\");\n        }\n        \n        performCacheOperation(operation, key, buffer);\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    protected void doStart() throws Exception {\n        LOG.info(\"In CacheProducer.start()\");\n        super.doStart();\n    }","id":105410,"modified_method":"@Override\n    protected void doStart() throws Exception {\n        super.doStart();\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    protected void doStop() throws Exception {\n        LOG.info(\"In CacheProducer.stop()\");\n        super.doStop();\n    }","id":105411,"modified_method":"@Override\n    protected void doStop() throws Exception {\n        super.doStop();\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"private void performCacheOperation(String operation, String key, byte[] buffer) {\n        if (operation.equalsIgnoreCase(\"DELETEALL\")) {\n            LOG.info(\"Deleting All elements from the Cache\");\n            cache.removeAll();\n        } else if (operation.equalsIgnoreCase(\"ADD\")) {\n            LOG.info(\"Adding an element with key \" + key + \" into the Cache\");\n            cache.put(new Element(key, buffer), true);\n        } else if (operation.equalsIgnoreCase(\"UPDATE\")) {\n            LOG.info(\"Updating an element with key \" + key + \" into the Cache\");\n            cache.put(new Element(key, buffer), true);\n        } else if (operation.equalsIgnoreCase(\"DELETE\")) {\n            LOG.info(\"Deleting an element with key \" + key + \" into the Cache\");\n            cache.remove(key, true);\n        }\n    }","id":105412,"modified_method":"private void performCacheOperation(String operation, String key, byte[] buffer) {\n        if (operation.equalsIgnoreCase(\"DELETEALL\")) {\n            LOG.debug(\"Deleting All elements from the Cache\");\n            cache.removeAll();\n        } else if (operation.equalsIgnoreCase(\"ADD\")) {\n            LOG.debug(\"Adding an element with key \" + key + \" into the Cache\");\n            cache.put(new Element(key, buffer), true);\n        } else if (operation.equalsIgnoreCase(\"UPDATE\")) {\n            LOG.debug(\"Updating an element with key \" + key + \" into the Cache\");\n            cache.put(new Element(key, buffer), true);\n        } else if (operation.equalsIgnoreCase(\"DELETE\")) {\n            LOG.debug(\"Deleting an element with key \" + key + \" into the Cache\");\n            cache.remove(key, true);\n        }\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testUpdatingDataInCache() throws Exception {\n        context.addRoutes(new RouteBuilder() {\n            public void configure() {\n                from(\"direct:start\").\n                    setHeader(\"CACHE_OPERATION\", constant(\"UPDATE\")).\n                    setHeader(\"CACHE_KEY\", constant(\"Ralph_Waldo_Emerson\")).\n                    to(\"cache://TestCache1\");\n            }\n        });\n        context.start();\n        LOG.info(\"------------Beginning CacheProducer Update Test---------------\");\n        sendUpdatedFile();\n    }","id":105413,"modified_method":"@Test\n    public void testUpdatingDataInCache() throws Exception {\n        context.addRoutes(new RouteBuilder() {\n            public void configure() {\n                from(\"direct:start\").\n                    setHeader(\"CACHE_OPERATION\", constant(\"UPDATE\")).\n                    setHeader(\"CACHE_KEY\", constant(\"Ralph_Waldo_Emerson\")).\n                    to(\"cache://TestCache1\");\n            }\n        });\n        context.start();\n        LOG.debug(\"------------Beginning CacheProducer Update Test---------------\");\n        sendUpdatedFile();\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testDeletingAllDataFromCache() throws Exception {\n        context.addRoutes(new RouteBuilder() {\n            public void configure() {\n                from(\"direct:start\").\n                    setHeader(\"CACHE_OPERATION\", constant(\"ADD\")).\n                    setHeader(\"CACHE_KEY\", constant(\"Ralph_Waldo_Emerson\")).\n                    to(\"cache://TestCache1\");\n                from(\"direct:start\").\n                    setHeader(\"CACHE_OPERATION\", constant(\"ADD\")).\n                    setHeader(\"CACHE_KEY\", constant(\"Ralph_Waldo_Emerson2\")).\n                    to(\"cache://TestCache1\");\n                from(\"direct:start\").\n                    setHeader(\"CACHE_OPERATION\", constant(\"DELETEALL\")).\n                    to(\"cache://TestCache1\");\n            }\n        });\n        context.start();\n        LOG.info(\"------------Beginning CacheProducer Delete All Elements Test---------------\");\n        sendUpdatedFile();\n    }","id":105414,"modified_method":"@Test\n    public void testDeletingAllDataFromCache() throws Exception {\n        context.addRoutes(new RouteBuilder() {\n            public void configure() {\n                from(\"direct:start\").\n                    setHeader(\"CACHE_OPERATION\", constant(\"ADD\")).\n                    setHeader(\"CACHE_KEY\", constant(\"Ralph_Waldo_Emerson\")).\n                    to(\"cache://TestCache1\");\n                from(\"direct:start\").\n                    setHeader(\"CACHE_OPERATION\", constant(\"ADD\")).\n                    setHeader(\"CACHE_KEY\", constant(\"Ralph_Waldo_Emerson2\")).\n                    to(\"cache://TestCache1\");\n                from(\"direct:start\").\n                    setHeader(\"CACHE_OPERATION\", constant(\"DELETEALL\")).\n                    to(\"cache://TestCache1\");\n            }\n        });\n        context.start();\n        LOG.debug(\"------------Beginning CacheProducer Delete All Elements Test---------------\");\n        sendUpdatedFile();\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testDeletingDataFromCache() throws Exception {\n        context.addRoutes(new RouteBuilder() {\n            public void configure() {\n                from(\"direct:start\").\n                    setHeader(\"CACHE_OPERATION\", constant(\"DELETE\")).\n                    setHeader(\"CACHE_KEY\", constant(\"Ralph_Waldo_Emerson\")).\n                    to(\"cache://TestCache1\");\n            }\n        });\n        context.start();\n        LOG.info(\"------------Beginning CacheProducer Delete Test---------------\");\n        sendUpdatedFile();\n    }","id":105415,"modified_method":"@Test\n    public void testDeletingDataFromCache() throws Exception {\n        context.addRoutes(new RouteBuilder() {\n            public void configure() {\n                from(\"direct:start\").\n                    setHeader(\"CACHE_OPERATION\", constant(\"DELETE\")).\n                    setHeader(\"CACHE_KEY\", constant(\"Ralph_Waldo_Emerson\")).\n                    to(\"cache://TestCache1\");\n            }\n        });\n        context.start();\n        LOG.debug(\"------------Beginning CacheProducer Delete Test---------------\");\n        sendUpdatedFile();\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testAddingDataToCache() throws Exception {\n        context.addRoutes(new RouteBuilder() {\n            public void configure() {\n                from(\"direct:start\").\n                    setHeader(\"CACHE_OPERATION\", constant(\"ADD\")).\n                    setHeader(\"CACHE_KEY\", constant(\"Ralph_Waldo_Emerson\")).\n                    to(\"cache://TestCache1\");\n            }\n        });\n        context.start();\n        LOG.info(\"------------Beginning CacheProducer Add Test---------------\");\n        sendFile();\n    }","id":105416,"modified_method":"@Test\n    public void testAddingDataToCache() throws Exception {\n        context.addRoutes(new RouteBuilder() {\n            public void configure() {\n                from(\"direct:start\").\n                    setHeader(\"CACHE_OPERATION\", constant(\"ADD\")).\n                    setHeader(\"CACHE_KEY\", constant(\"Ralph_Waldo_Emerson\")).\n                    to(\"cache://TestCache1\");\n            }\n        });\n        context.start();\n        LOG.debug(\"------------Beginning CacheProducer Add Test---------------\");\n        sendFile();\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"public boolean isValid(CacheManager cacheManager, String cacheName, String key) {\n        LOG.info(\"Cache Name: \" + cacheName);\n        if (!cacheManager.cacheExists(cacheName)) {\n            LOG\n                .info(\"No existing Cache found with name: \"\n                      + cacheName\n                      + \". Please ensure a cache is first instantiated using a Cache Consumer or Cache Producer\");\n            LOG.info(\"Replacement will not be performed since the cache \" + cacheName\n                     + \"does not presently exist\");\n            return false;\n        }\n\n        LOG.info(\"Found an existing cache: \" + cacheName);\n        LOG.info(\"Cache \" + cacheName + \" currently contains \" + cacheManager.getCache(cacheName).getSize()\n                 + \" elements\");\n        Ehcache cache = cacheManager.getCache(cacheName);\n        if (!cache.isKeyInCache(key)) {\n            LOG\n                .info(\"No Key with name: \"\n                      + key\n                      + \"presently exists in the cache. It is also possible that the key may have expired in the cache\");\n            LOG\n                .info(\"Replacement will not be performed until an appropriate key/value pair is added to (or) found in the cache.\");\n            return false;\n\n        }\n\n        return true;\n    }","id":105417,"modified_method":"public boolean isValid(CacheManager cacheManager, String cacheName, String key) {\n        LOG.debug(\"Cache Name: \" + cacheName);\n        if (!cacheManager.cacheExists(cacheName)) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"No existing Cache found with name: \"\n                      + cacheName\n                      + \". Please ensure a cache is first instantiated using a Cache Consumer or Cache Producer\");\n                LOG.debug(\"Replacement will not be performed since the cache \" + cacheName\n                     + \"does not presently exist\");\n            }\n            return false;\n        }\n\n        LOG.debug(\"Found an existing cache: \" + cacheName);\n        LOG.debug(\"Cache \" + cacheName + \" currently contains \" + cacheManager.getCache(cacheName).getSize()\n                 + \" elements\");\n        Ehcache cache = cacheManager.getCache(cacheName);\n        if (!cache.isKeyInCache(key)) {\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"No Key with name: \"\n                      + key\n                      + \"presently exists in the cache. It is also possible that the key may have expired in the cache\");\n                LOG.debug(\"Replacement will not be performed until an appropriate key/value pair is added to (or) found in the cache.\");\n            }\n            return false;\n\n        }\n\n        return true;\n    }","commit_id":"9f9aab40dee805b436d1e442cc8298002bc47ff1","url":"https://github.com/apache/camel"},{"original_method":"/**\n   * Re-Login a user in from a keytab file. Loads a user identity from a keytab\n   * file and logs them in. They become the currently logged-in user. This\n   * method assumes that {@link #loginUserFromKeytab(String, String)} had \n   * happened already.\n   * The Subject field of this UserGroupInformation object is updated to have\n   * the new credentials.\n   * @throws IOException on a failure\n   */\n  @InterfaceAudience.Public\n  @InterfaceStability.Evolving\n  public synchronized void reloginFromKeytab()\n  throws IOException {\n    if (!isSecurityEnabled() ||\n         user.getAuthenticationMethod() != AuthenticationMethod.KERBEROS ||\n         !isKeytab)\n      return;\n    \n    long now = Time.now();\n    if (!hasSufficientTimeElapsed(now)) {\n      return;\n    }\n\n    KerberosTicket tgt = getTGT();\n    //Return if TGT is valid and is not going to expire soon.\n    if (tgt != null && now < getRefreshTime(tgt)) {\n      return;\n    }\n    \n    LoginContext login = getLogin();\n    if (login == null || keytabFile == null) {\n      throw new IOException(\"loginUserFromKeyTab must be done first\");\n    }\n    \n    long start = 0;\n    // register most recent relogin attempt\n    user.setLastLogin(now);\n    try {\n      LOG.info(\"Initiating logout for \" + getUserName());\n      synchronized (UserGroupInformation.class) {\n        // clear up the kerberos state. But the tokens are not cleared! As per\n        // the Java kerberos login module code, only the kerberos credentials\n        // are cleared\n        login.logout();\n        // login and also update the subject field of this instance to\n        // have the new credentials (pass it to the LoginContext constructor)\n        login = newLoginContext(\n            HadoopConfiguration.KEYTAB_KERBEROS_CONFIG_NAME, getSubject(),\n            new HadoopConfiguration());\n        LOG.info(\"Initiating re-login for \" + keytabPrincipal);\n        start = Time.now();\n        login.login();\n        metrics.loginSuccess.add(Time.now() - start);\n        setLogin(login);\n      }\n    } catch (LoginException le) {\n      if (start > 0) {\n        metrics.loginFailure.add(Time.now() - start);\n      }\n      throw new IOException(\"Login failure for \" + keytabPrincipal + \n          \" from keytab \" + keytabFile, le);\n    } \n  }","id":105418,"modified_method":"/**\n   * Re-Login a user in from a keytab file. Loads a user identity from a keytab\n   * file and logs them in. They become the currently logged-in user. This\n   * method assumes that {@link #loginUserFromKeytab(String, String)} had \n   * happened already.\n   * The Subject field of this UserGroupInformation object is updated to have\n   * the new credentials.\n   * @throws IOException on a failure\n   */\n  @InterfaceAudience.Public\n  @InterfaceStability.Evolving\n  public synchronized void reloginFromKeytab()\n  throws IOException {\n    if (!isSecurityEnabled() ||\n         user.getAuthenticationMethod() != AuthenticationMethod.KERBEROS ||\n         !isKeytab)\n      return;\n    \n    long now = Time.now();\n    if (!hasSufficientTimeElapsed(now)) {\n      return;\n    }\n\n    KerberosTicket tgt = getTGT();\n    //Return if TGT is valid and is not going to expire soon.\n    if (tgt != null && now < getRefreshTime(tgt)) {\n      return;\n    }\n    \n    LoginContext login = getLogin();\n    if (login == null || keytabFile == null) {\n      throw new IOException(\"loginUserFromKeyTab must be done first\");\n    }\n    \n    long start = 0;\n    // register most recent relogin attempt\n    user.setLastLogin(now);\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Initiating logout for \" + getUserName());\n      }\n      synchronized (UserGroupInformation.class) {\n        // clear up the kerberos state. But the tokens are not cleared! As per\n        // the Java kerberos login module code, only the kerberos credentials\n        // are cleared\n        login.logout();\n        // login and also update the subject field of this instance to\n        // have the new credentials (pass it to the LoginContext constructor)\n        login = newLoginContext(\n            HadoopConfiguration.KEYTAB_KERBEROS_CONFIG_NAME, getSubject(),\n            new HadoopConfiguration());\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"Initiating re-login for \" + keytabPrincipal);\n        }\n        start = Time.now();\n        login.login();\n        metrics.loginSuccess.add(Time.now() - start);\n        setLogin(login);\n      }\n    } catch (LoginException le) {\n      if (start > 0) {\n        metrics.loginFailure.add(Time.now() - start);\n      }\n      throw new IOException(\"Login failure for \" + keytabPrincipal + \n          \" from keytab \" + keytabFile, le);\n    } \n  }","commit_id":"aea35d93e3b2349098134f285c00d9d529d3496b","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Re-Login a user in from the ticket cache.  This\n   * method assumes that login had happened already.\n   * The Subject field of this UserGroupInformation object is updated to have\n   * the new credentials.\n   * @throws IOException on a failure\n   */\n  @InterfaceAudience.Public\n  @InterfaceStability.Evolving\n  public synchronized void reloginFromTicketCache()\n  throws IOException {\n    if (!isSecurityEnabled() || \n        user.getAuthenticationMethod() != AuthenticationMethod.KERBEROS ||\n        !isKrbTkt)\n      return;\n    LoginContext login = getLogin();\n    if (login == null) {\n      throw new IOException(\"login must be done first\");\n    }\n    long now = Time.now();\n    if (!hasSufficientTimeElapsed(now)) {\n      return;\n    }\n    // register most recent relogin attempt\n    user.setLastLogin(now);\n    try {\n      LOG.info(\"Initiating logout for \" + getUserName());\n      //clear up the kerberos state. But the tokens are not cleared! As per \n      //the Java kerberos login module code, only the kerberos credentials\n      //are cleared\n      login.logout();\n      //login and also update the subject field of this instance to \n      //have the new credentials (pass it to the LoginContext constructor)\n      login = \n        newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, \n            getSubject(), new HadoopConfiguration());\n      LOG.info(\"Initiating re-login for \" + getUserName());\n      login.login();\n      setLogin(login);\n    } catch (LoginException le) {\n      throw new IOException(\"Login failure for \" + getUserName(), le);\n    } \n  }","id":105419,"modified_method":"/**\n   * Re-Login a user in from the ticket cache.  This\n   * method assumes that login had happened already.\n   * The Subject field of this UserGroupInformation object is updated to have\n   * the new credentials.\n   * @throws IOException on a failure\n   */\n  @InterfaceAudience.Public\n  @InterfaceStability.Evolving\n  public synchronized void reloginFromTicketCache()\n  throws IOException {\n    if (!isSecurityEnabled() || \n        user.getAuthenticationMethod() != AuthenticationMethod.KERBEROS ||\n        !isKrbTkt)\n      return;\n    LoginContext login = getLogin();\n    if (login == null) {\n      throw new IOException(\"login must be done first\");\n    }\n    long now = Time.now();\n    if (!hasSufficientTimeElapsed(now)) {\n      return;\n    }\n    // register most recent relogin attempt\n    user.setLastLogin(now);\n    try {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Initiating logout for \" + getUserName());\n      }\n      //clear up the kerberos state. But the tokens are not cleared! As per \n      //the Java kerberos login module code, only the kerberos credentials\n      //are cleared\n      login.logout();\n      //login and also update the subject field of this instance to \n      //have the new credentials (pass it to the LoginContext constructor)\n      login = \n        newLoginContext(HadoopConfiguration.USER_KERBEROS_CONFIG_NAME, \n            getSubject(), new HadoopConfiguration());\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Initiating re-login for \" + getUserName());\n      }\n      login.login();\n      setLogin(login);\n    } catch (LoginException le) {\n      throw new IOException(\"Login failure for \" + getUserName(), le);\n    } \n  }","commit_id":"aea35d93e3b2349098134f285c00d9d529d3496b","url":"https://github.com/apache/hadoop"},{"original_method":"@VisibleForTesting\n  void flushInMemory() throws IOException {\n    // Phase I: Update the pipeline\n    getRegionServices().blockUpdates();\n    try {\n      MutableSegment active = getActive();\n      LOG.info(\"IN-MEMORY FLUSH: Pushing active segment into compaction pipeline, \" +\n          \"and initiating compaction.\");\n      pushActiveToPipeline(active);\n    } finally {\n      getRegionServices().unblockUpdates();\n    }\n    // Phase II: Compact the pipeline\n    try {\n      if (allowCompaction.get() && inMemoryFlushInProgress.compareAndSet(false, true)) {\n        // setting the inMemoryFlushInProgress flag again for the case this method is invoked\n        // directly (only in tests) in the common path setting from true to true is idempotent\n        // Speculative compaction execution, may be interrupted if flush is forced while\n        // compaction is in progress\n        compactor.startCompaction();\n      }\n    } catch (IOException e) {\n      LOG.warn(\"Unable to run memstore compaction. region \"\n          + getRegionServices().getRegionInfo().getRegionNameAsString()\n          + \"store: \"+ getFamilyName(), e);\n    }\n  }","id":105420,"modified_method":"@VisibleForTesting\n  void flushInMemory() throws IOException {\n    // Phase I: Update the pipeline\n    getRegionServices().blockUpdates();\n    try {\n      MutableSegment active = getActive();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"IN-MEMORY FLUSH: Pushing active segment into compaction pipeline, \"\n            + \"and initiating compaction.\");\n      }\n      pushActiveToPipeline(active);\n    } finally {\n      getRegionServices().unblockUpdates();\n    }\n    // Phase II: Compact the pipeline\n    try {\n      if (allowCompaction.get() && inMemoryFlushInProgress.compareAndSet(false, true)) {\n        // setting the inMemoryFlushInProgress flag again for the case this method is invoked\n        // directly (only in tests) in the common path setting from true to true is idempotent\n        // Speculative compaction execution, may be interrupted if flush is forced while\n        // compaction is in progress\n        compactor.startCompaction();\n      }\n    } catch (IOException e) {\n      LOG.warn(\"Unable to run memstore compaction. region \"\n          + getRegionServices().getRegionInfo().getRegionNameAsString()\n          + \"store: \"+ getFamilyName(), e);\n    }\n  }","commit_id":"139f0ed53cdf5e5310b034d5ccdb69c610c53c60","url":"https://github.com/apache/hbase"},{"original_method":"private void initInmemoryFlushSize(Configuration conf) {\n    long memstoreFlushSize = getRegionServices().getMemstoreFlushSize();\n    int numStores = getRegionServices().getNumStores();\n    if (numStores <= 1) {\n      // Family number might also be zero in some of our unit test case\n      numStores = 1;\n    }\n    inmemoryFlushSize = memstoreFlushSize / numStores;\n    // multiply by a factor\n    double factor =  conf.getDouble(IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY,\n        IN_MEMORY_FLUSH_THRESHOLD_FACTOR_DEFAULT);\n    inmemoryFlushSize *= factor;\n    LOG.debug(\"Setting in-memory flush size threshold to \" + inmemoryFlushSize);\n  }","id":105421,"modified_method":"private void initInmemoryFlushSize(Configuration conf) {\n    long memstoreFlushSize = getRegionServices().getMemstoreFlushSize();\n    int numStores = getRegionServices().getNumStores();\n    if (numStores <= 1) {\n      // Family number might also be zero in some of our unit test case\n      numStores = 1;\n    }\n    inmemoryFlushSize = memstoreFlushSize / numStores;\n    // multiply by a factor\n    double factor =  conf.getDouble(IN_MEMORY_FLUSH_THRESHOLD_FACTOR_KEY,\n        IN_MEMORY_FLUSH_THRESHOLD_FACTOR_DEFAULT);\n    inmemoryFlushSize *= factor;\n    LOG.info(\"Setting in-memory flush size threshold to \" + inmemoryFlushSize);\n  }","commit_id":"139f0ed53cdf5e5310b034d5ccdb69c610c53c60","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * Push the current active memstore segment into the pipeline\n   * and create a snapshot of the tail of current compaction pipeline\n   * Snapshot must be cleared by call to {@link #clearSnapshot}.\n   * {@link #clearSnapshot(long)}.\n   * @return {@link MemStoreSnapshot}\n   */\n  @Override\n  public MemStoreSnapshot snapshot() {\n    MutableSegment active = getActive();\n    // If snapshot currently has entries, then flusher failed or didn't call\n    // cleanup.  Log a warning.\n    if (!getSnapshot().isEmpty()) {\n      LOG.warn(\"Snapshot called again without clearing previous. \" +\n          \"Doing nothing. Another ongoing flush or did we fail last attempt?\");\n    } else {\n      LOG.info(\"FLUSHING TO DISK: region \"+ getRegionServices().getRegionInfo()\n          .getRegionNameAsString() + \"store: \"+ getFamilyName());\n      stopCompaction();\n      pushActiveToPipeline(active);\n      snapshotId = EnvironmentEdgeManager.currentTime();\n      pushTailToSnapshot();\n    }\n    return new MemStoreSnapshot(snapshotId, getSnapshot());\n  }","id":105422,"modified_method":"/**\n   * Push the current active memstore segment into the pipeline\n   * and create a snapshot of the tail of current compaction pipeline\n   * Snapshot must be cleared by call to {@link #clearSnapshot}.\n   * {@link #clearSnapshot(long)}.\n   * @return {@link MemStoreSnapshot}\n   */\n  @Override\n  public MemStoreSnapshot snapshot() {\n    MutableSegment active = getActive();\n    // If snapshot currently has entries, then flusher failed or didn't call\n    // cleanup.  Log a warning.\n    if (!getSnapshot().isEmpty()) {\n      LOG.warn(\"Snapshot called again without clearing previous. \" +\n          \"Doing nothing. Another ongoing flush or did we fail last attempt?\");\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"FLUSHING TO DISK: region \"\n            + getRegionServices().getRegionInfo().getRegionNameAsString() + \"store: \"\n            + getFamilyName());\n      }\n      stopCompaction();\n      pushActiveToPipeline(active);\n      snapshotId = EnvironmentEdgeManager.currentTime();\n      pushTailToSnapshot();\n    }\n    return new MemStoreSnapshot(snapshotId, getSnapshot());\n  }","commit_id":"139f0ed53cdf5e5310b034d5ccdb69c610c53c60","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * Swaps the versioned list at the tail of the pipeline with the new compacted segment.\n   * Swapping only if there were no changes to the suffix of the list while it was compacted.\n   * @param versionedList tail of the pipeline that was compacted\n   * @param segment new compacted segment\n   * @return true iff swapped tail with new compacted segment\n   */\n  public boolean swap(VersionedSegmentsList versionedList, ImmutableSegment segment) {\n    if(versionedList.getVersion() != version) {\n      return false;\n    }\n    LinkedList<ImmutableSegment> suffix;\n    synchronized (pipeline){\n      if(versionedList.getVersion() != version) {\n        return false;\n      }\n      suffix = versionedList.getStoreSegments();\n      LOG.info(\"Swapping pipeline suffix with compacted item. \"\n          +\"Just before the swap the number of segments in pipeline is:\"\n          +versionedList.getStoreSegments().size()\n          +\", and the number of cells in new segment is:\"+segment.getCellsCount());\n      swapSuffix(suffix,segment);\n    }\n    if(region != null) {\n      // update the global memstore size counter\n      long suffixSize = CompactingMemStore.getSegmentsSize(suffix);\n      long newSize = CompactingMemStore.getSegmentSize(segment);\n      long delta = suffixSize - newSize;\n      long globalMemstoreSize = region.addAndGetGlobalMemstoreSize(-delta);\n      LOG.info(\"Suffix size: \"+ suffixSize+\" compacted item size: \"+newSize+\n          \" globalMemstoreSize: \"+globalMemstoreSize);\n    }\n    return true;\n  }","id":105423,"modified_method":"/**\n   * Swaps the versioned list at the tail of the pipeline with the new compacted segment.\n   * Swapping only if there were no changes to the suffix of the list while it was compacted.\n   * @param versionedList tail of the pipeline that was compacted\n   * @param segment new compacted segment\n   * @return true iff swapped tail with new compacted segment\n   */\n  public boolean swap(VersionedSegmentsList versionedList, ImmutableSegment segment) {\n    if(versionedList.getVersion() != version) {\n      return false;\n    }\n    LinkedList<ImmutableSegment> suffix;\n    synchronized (pipeline){\n      if(versionedList.getVersion() != version) {\n        return false;\n      }\n      suffix = versionedList.getStoreSegments();\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Swapping pipeline suffix with compacted item. \"\n            + \"Just before the swap the number of segments in pipeline is:\"\n            + versionedList.getStoreSegments().size()\n            + \", and the number of cells in new segment is:\" + segment.getCellsCount());\n      }\n      swapSuffix(suffix,segment);\n    }\n    if(region != null) {\n      // update the global memstore size counter\n      long suffixSize = CompactingMemStore.getSegmentsSize(suffix);\n      long newSize = CompactingMemStore.getSegmentSize(segment);\n      long delta = suffixSize - newSize;\n      long globalMemstoreSize = region.addAndGetGlobalMemstoreSize(-delta);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Suffix size: \" + suffixSize + \" compacted item size: \" + newSize\n            + \" globalMemstoreSize: \" + globalMemstoreSize);\n      }\n    }\n    return true;\n  }","commit_id":"139f0ed53cdf5e5310b034d5ccdb69c610c53c60","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * The request to dispatch the compaction asynchronous task.\n   * The method returns true if compaction was successfully dispatched, or false if there\n   * is already an ongoing compaction or nothing to compact.\n   */\n  public boolean startCompaction() throws IOException {\n    if (!compactingMemStore.hasCompactibleSegments()) return false;  // no compaction on empty\n\n    List<KeyValueScanner> scanners = new ArrayList<KeyValueScanner>();\n    // get the list of segments from the pipeline\n    versionedList = compactingMemStore.getCompactibleSegments();\n    // the list is marked with specific version\n\n    // create the list of scanners with maximally possible read point, meaning that\n    // all KVs are going to be returned by the pipeline traversing\n    for (Segment segment : versionedList.getStoreSegments()) {\n      scanners.add(segment.getSegmentScanner(Long.MAX_VALUE));\n    }\n    scanner =\n        new MemStoreScanner(compactingMemStore, scanners, Long.MAX_VALUE,\n            MemStoreScanner.Type.COMPACT_FORWARD);\n\n    smallestReadPoint = compactingMemStore.getSmallestReadPoint();\n    compactingScanner = createScanner(compactingMemStore.getStore());\n\n    LOG.info(\"Starting the MemStore in-memory compaction for store \" +\n        compactingMemStore.getStore().getColumnFamilyName());\n\n    doCompaction();\n    return true;\n  }","id":105424,"modified_method":"/**\n   * The request to dispatch the compaction asynchronous task.\n   * The method returns true if compaction was successfully dispatched, or false if there\n   * is already an ongoing compaction or nothing to compact.\n   */\n  public boolean startCompaction() throws IOException {\n    if (!compactingMemStore.hasCompactibleSegments()) return false;  // no compaction on empty\n\n    List<KeyValueScanner> scanners = new ArrayList<KeyValueScanner>();\n    // get the list of segments from the pipeline\n    versionedList = compactingMemStore.getCompactibleSegments();\n    // the list is marked with specific version\n\n    // create the list of scanners with maximally possible read point, meaning that\n    // all KVs are going to be returned by the pipeline traversing\n    for (Segment segment : versionedList.getStoreSegments()) {\n      scanners.add(segment.getSegmentScanner(Long.MAX_VALUE));\n    }\n    scanner =\n        new MemStoreScanner(compactingMemStore, scanners, Long.MAX_VALUE,\n            MemStoreScanner.Type.COMPACT_FORWARD);\n\n    smallestReadPoint = compactingMemStore.getSmallestReadPoint();\n    compactingScanner = createScanner(compactingMemStore.getStore());\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Starting the MemStore in-memory compaction for store \"\n          + compactingMemStore.getStore().getColumnFamilyName());\n    }\n\n    doCompaction();\n    return true;\n  }","commit_id":"139f0ed53cdf5e5310b034d5ccdb69c610c53c60","url":"https://github.com/apache/hbase"},{"original_method":"@Override\n  protected Object invokeMethod(Method method, Object[] args) throws Throwable {\n    Object result = super.invokeMethod(method, args);\n    int retryCount = RetryCount.get();\n    if (retryCount < this.numToDrop) {\n      RetryCount.set(++retryCount);\n      LOG.info(\"Drop the response. Current retryCount == \" + retryCount);\n      throw new RetriableException(\"Fake Exception\");\n    } else {\n      LOG.info(\"retryCount == \" + retryCount\n          + \". It's time to normally process the response\");\n      return result;\n    }\n  }","id":105425,"modified_method":"@Override\n  protected Object invokeMethod(Method method, Object[] args) throws Throwable {\n    Object result = super.invokeMethod(method, args);\n    int retryCount = RetryCount.get();\n    if (retryCount < this.numToDrop) {\n      RetryCount.set(++retryCount);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Drop the response. Current retryCount == \" + retryCount);\n      }\n      throw new RetriableException(\"Fake Exception\");\n    } else {\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"retryCount == \" + retryCount\n          + \". It's time to normally process the response\");\n      }\n      return result;\n    }\n  }","commit_id":"2417ca71d5115f16bd13a737087dab5edd04fb99","url":"https://github.com/apache/hadoop"},{"original_method":"public int setOption(String[] args, int argIndex) {\n    if (args[argIndex].equalsIgnoreCase(\"-seed\")) {\n      randomSeed = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-wordVectors\")) {\n      wordVectors = args[argIndex + 1];\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-unkWord\")) {\n      unkWord = args[argIndex] + 1;\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numHid\")) {\n      numHid = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numClasses\")) {\n      numClasses = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-lowercaseWordVectors\")) {\n      lowercaseWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nolowercaseWordVectors\")) {\n      lowercaseWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-randomWordVectors\")) {\n      randomWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-norandomWordVectors\")) {\n      randomWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-simplifiedModel\")) {\n      simplifiedModel = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nosimplifiedModel\")) {\n      simplifiedModel = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-useTensors\")) {\n      useTensors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nouseTensors\")) {\n      useTensors = false;\n      return argIndex + 1;\n    } else {\n      return trainOptions.setOption(args, argIndex);\n    }\n  }","id":105426,"modified_method":"public int setOption(String[] args, int argIndex) {\n    if (args[argIndex].equalsIgnoreCase(\"-seed\")) {\n      randomSeed = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-wordVectors\")) {\n      wordVectors = args[argIndex + 1];\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-unkWord\")) {\n      unkWord = args[argIndex] + 1;\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numHid\")) {\n      numHid = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numClasses\")) {\n      numClasses = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-lowercaseWordVectors\")) {\n      lowercaseWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nolowercaseWordVectors\")) {\n      lowercaseWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-randomWordVectors\")) {\n      randomWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-norandomWordVectors\")) {\n      randomWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-simplifiedModel\")) {\n      simplifiedModel = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nosimplifiedModel\")) {\n      simplifiedModel = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-useTensors\")) {\n      useTensors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nouseTensors\")) {\n      useTensors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-classWeights\")) {\n      String classWeightString = args[argIndex + 1];\n      String[] pieces = classWeightString.split(\",\");\n      classWeights = new double[pieces.length];\n      for (int i = 0; i < pieces.length; ++i) {\n        classWeights[i] = Double.valueOf(pieces[i]);\n      }\n      return argIndex + 2;\n    } else {\n      return trainOptions.setOption(args, argIndex);\n    }\n  }","commit_id":"f21ab10a7a978c1a470e674a3d16cd460a91a356","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private void backpropDerivativesAndError(Tree tree, \n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryTD,\n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryCD,\n                                           TwoDimensionalMap<String, String, SimpleTensor> binaryTensorTD,\n                                           Map<String, SimpleMatrix> unaryCD,\n                                           Map<String, SimpleMatrix> wordVectorD,\n                                           SimpleMatrix deltaUp) {\n    if (tree.isLeaf()) {\n      return;\n    }\n\n    SimpleMatrix currentVector = RNNCoreAnnotations.getNodeVector(tree);\n    String category = tree.label().value();\n    category = model.basicCategory(category);\n\n    // TODO: factor this out somewhere?\n    SimpleMatrix goldLabel = new SimpleMatrix(model.numClasses, 1);\n    goldLabel.set(RNNCoreAnnotations.getGoldClass(tree), 1.0);\n\n    SimpleMatrix predictions = RNNCoreAnnotations.getPredictions(tree);\n\n    SimpleMatrix deltaClass = predictions.minus(goldLabel);\n    SimpleMatrix localCD = deltaClass.mult(RNNUtils.concatenateWithBias(currentVector).transpose());\n\n    double error = -(RNNUtils.elementwiseApplyLog(predictions).elementMult(goldLabel).elementSum());\n    RNNCoreAnnotations.setPredictionError(tree, error);\n\n    if (tree.isPreTerminal()) { // below us is a word vector\n      unaryCD.put(category, unaryCD.get(category).plus(localCD));\n\n      String word = tree.children()[0].label().value();\n      word = model.getVocabWord(word);\n\n      //SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      //SimpleMatrix deltaFromClass = model.getUnaryClassification(category).transpose().mult(deltaClass);\n      //SimpleMatrix deltaFull = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).plus(deltaUp);\n      //SimpleMatrix wordDerivative = deltaFull.elementMult(currentVectorDerivative);\n      //wordVectorD.put(word, wordVectorD.get(word).plus(wordDerivative));\n\n      SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      SimpleMatrix deltaFromClass = model.getUnaryClassification(category).transpose().mult(deltaClass);\n      deltaFromClass = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).elementMult(currentVectorDerivative);\n      SimpleMatrix deltaFull = deltaFromClass.plus(deltaUp);\n      wordVectorD.put(word, wordVectorD.get(word).plus(deltaFull));\n    } else {\n      // Otherwise, this must be a binary node\n      String leftCategory = model.basicCategory(tree.children()[0].label().value());\n      String rightCategory = model.basicCategory(tree.children()[1].label().value());\n      binaryCD.put(leftCategory, rightCategory, binaryCD.get(leftCategory, rightCategory).plus(localCD));\n      \n      SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      SimpleMatrix deltaFromClass = model.getBinaryClassification(leftCategory, rightCategory).transpose().mult(deltaClass);\n      deltaFromClass = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).elementMult(currentVectorDerivative);\n      SimpleMatrix deltaFull = deltaFromClass.plus(deltaUp);\n      \n      SimpleMatrix leftVector = RNNCoreAnnotations.getNodeVector(tree.children()[0]);\n      SimpleMatrix rightVector = RNNCoreAnnotations.getNodeVector(tree.children()[1]);\n      SimpleMatrix childrenVector = RNNUtils.concatenateWithBias(leftVector, rightVector);\n      SimpleMatrix W_df = deltaFull.mult(childrenVector.transpose());\n      binaryTD.put(leftCategory, rightCategory, binaryTD.get(leftCategory, rightCategory).plus(W_df));\n      SimpleMatrix deltaDown;\n      if (model.op.useTensors) {\n        SimpleTensor Wt_df = getTensorGradient(deltaFull, leftVector, rightVector);\n        binaryTensorTD.put(leftCategory, rightCategory, binaryTensorTD.get(leftCategory, rightCategory).plus(Wt_df));\n        deltaDown = computeTensorDeltaDown(deltaFull, leftVector, rightVector, model.getBinaryTransform(leftCategory, rightCategory), model.getBinaryTensor(leftCategory, rightCategory));\n      } else {\n        deltaDown = model.getBinaryTransform(leftCategory, rightCategory).transpose().mult(deltaFull);\n      }\n\n      SimpleMatrix leftDerivative = RNNUtils.elementwiseApplyTanhDerivative(leftVector);\n      SimpleMatrix rightDerivative = RNNUtils.elementwiseApplyTanhDerivative(rightVector);\n      SimpleMatrix leftDeltaDown = deltaDown.extractMatrix(0, deltaFull.numRows(), 0, 1);\n      SimpleMatrix rightDeltaDown = deltaDown.extractMatrix(deltaFull.numRows(), deltaFull.numRows() * 2, 0, 1);\n      backpropDerivativesAndError(tree.children()[0], binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, leftDerivative.elementMult(leftDeltaDown));\n      backpropDerivativesAndError(tree.children()[1], binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, rightDerivative.elementMult(rightDeltaDown));\n    }\n  }","id":105427,"modified_method":"private void backpropDerivativesAndError(Tree tree, \n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryTD,\n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryCD,\n                                           TwoDimensionalMap<String, String, SimpleTensor> binaryTensorTD,\n                                           Map<String, SimpleMatrix> unaryCD,\n                                           Map<String, SimpleMatrix> wordVectorD,\n                                           SimpleMatrix deltaUp) {\n    if (tree.isLeaf()) {\n      return;\n    }\n\n    SimpleMatrix currentVector = RNNCoreAnnotations.getNodeVector(tree);\n    String category = tree.label().value();\n    category = model.basicCategory(category);\n\n    // Build a vector that looks like 0,0,1,0,0 with an indicator for the correct class\n    SimpleMatrix goldLabel = new SimpleMatrix(model.numClasses, 1);\n    int goldClass = RNNCoreAnnotations.getGoldClass(tree);\n    goldLabel.set(goldClass, 1.0);\n\n    double nodeWeight = model.op.getClassWeight(goldClass);\n\n    SimpleMatrix predictions = RNNCoreAnnotations.getPredictions(tree);\n\n    SimpleMatrix deltaClass = predictions.minus(goldLabel).scale(nodeWeight);\n    SimpleMatrix localCD = deltaClass.mult(RNNUtils.concatenateWithBias(currentVector).transpose());\n\n    double error = -(RNNUtils.elementwiseApplyLog(predictions).elementMult(goldLabel).elementSum());\n    error = error * nodeWeight;\n    RNNCoreAnnotations.setPredictionError(tree, error);\n\n    if (tree.isPreTerminal()) { // below us is a word vector\n      unaryCD.put(category, unaryCD.get(category).plus(localCD));\n\n      String word = tree.children()[0].label().value();\n      word = model.getVocabWord(word);\n\n      //SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      //SimpleMatrix deltaFromClass = model.getUnaryClassification(category).transpose().mult(deltaClass);\n      //SimpleMatrix deltaFull = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).plus(deltaUp);\n      //SimpleMatrix wordDerivative = deltaFull.elementMult(currentVectorDerivative);\n      //wordVectorD.put(word, wordVectorD.get(word).plus(wordDerivative));\n\n      SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      SimpleMatrix deltaFromClass = model.getUnaryClassification(category).transpose().mult(deltaClass);\n      deltaFromClass = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).elementMult(currentVectorDerivative);\n      SimpleMatrix deltaFull = deltaFromClass.plus(deltaUp);\n      wordVectorD.put(word, wordVectorD.get(word).plus(deltaFull));\n    } else {\n      // Otherwise, this must be a binary node\n      String leftCategory = model.basicCategory(tree.children()[0].label().value());\n      String rightCategory = model.basicCategory(tree.children()[1].label().value());\n      binaryCD.put(leftCategory, rightCategory, binaryCD.get(leftCategory, rightCategory).plus(localCD));\n      \n      SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      SimpleMatrix deltaFromClass = model.getBinaryClassification(leftCategory, rightCategory).transpose().mult(deltaClass);\n      deltaFromClass = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).elementMult(currentVectorDerivative);\n      SimpleMatrix deltaFull = deltaFromClass.plus(deltaUp);\n      \n      SimpleMatrix leftVector = RNNCoreAnnotations.getNodeVector(tree.children()[0]);\n      SimpleMatrix rightVector = RNNCoreAnnotations.getNodeVector(tree.children()[1]);\n      SimpleMatrix childrenVector = RNNUtils.concatenateWithBias(leftVector, rightVector);\n      SimpleMatrix W_df = deltaFull.mult(childrenVector.transpose());\n      binaryTD.put(leftCategory, rightCategory, binaryTD.get(leftCategory, rightCategory).plus(W_df));\n      SimpleMatrix deltaDown;\n      if (model.op.useTensors) {\n        SimpleTensor Wt_df = getTensorGradient(deltaFull, leftVector, rightVector);\n        binaryTensorTD.put(leftCategory, rightCategory, binaryTensorTD.get(leftCategory, rightCategory).plus(Wt_df));\n        deltaDown = computeTensorDeltaDown(deltaFull, leftVector, rightVector, model.getBinaryTransform(leftCategory, rightCategory), model.getBinaryTensor(leftCategory, rightCategory));\n      } else {\n        deltaDown = model.getBinaryTransform(leftCategory, rightCategory).transpose().mult(deltaFull);\n      }\n\n      SimpleMatrix leftDerivative = RNNUtils.elementwiseApplyTanhDerivative(leftVector);\n      SimpleMatrix rightDerivative = RNNUtils.elementwiseApplyTanhDerivative(rightVector);\n      SimpleMatrix leftDeltaDown = deltaDown.extractMatrix(0, deltaFull.numRows(), 0, 1);\n      SimpleMatrix rightDeltaDown = deltaDown.extractMatrix(deltaFull.numRows(), deltaFull.numRows() * 2, 0, 1);\n      backpropDerivativesAndError(tree.children()[0], binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, leftDerivative.elementMult(leftDeltaDown));\n      backpropDerivativesAndError(tree.children()[1], binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, rightDerivative.elementMult(rightDeltaDown));\n    }\n  }","commit_id":"f21ab10a7a978c1a470e674a3d16cd460a91a356","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public int setOption(String[] args, int argIndex) {\n    if (args[argIndex].equalsIgnoreCase(\"-seed\")) {\n      randomSeed = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-wordVectors\")) {\n      wordVectors = args[argIndex + 1];\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-unkWord\")) {\n      unkWord = args[argIndex] + 1;\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numHid\")) {\n      numHid = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numClasses\")) {\n      numClasses = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-lowercaseWordVectors\")) {\n      lowercaseWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nolowercaseWordVectors\")) {\n      lowercaseWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-randomWordVectors\")) {\n      randomWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-norandomWordVectors\")) {\n      randomWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-simplifiedModel\")) {\n      simplifiedModel = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nosimplifiedModel\")) {\n      simplifiedModel = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-useTensors\")) {\n      useTensors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nouseTensors\")) {\n      useTensors = false;\n      return argIndex + 1;\n    } else {\n      return trainOptions.setOption(args, argIndex);\n    }\n  }","id":105428,"modified_method":"public int setOption(String[] args, int argIndex) {\n    if (args[argIndex].equalsIgnoreCase(\"-seed\")) {\n      randomSeed = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-wordVectors\")) {\n      wordVectors = args[argIndex + 1];\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-unkWord\")) {\n      unkWord = args[argIndex] + 1;\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numHid\")) {\n      numHid = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numClasses\")) {\n      numClasses = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-lowercaseWordVectors\")) {\n      lowercaseWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nolowercaseWordVectors\")) {\n      lowercaseWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-randomWordVectors\")) {\n      randomWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-norandomWordVectors\")) {\n      randomWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-simplifiedModel\")) {\n      simplifiedModel = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nosimplifiedModel\")) {\n      simplifiedModel = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-useTensors\")) {\n      useTensors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nouseTensors\")) {\n      useTensors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-classWeights\")) {\n      String classWeightString = args[argIndex + 1];\n      String[] pieces = classWeightString.split(\",\");\n      classWeights = new double[pieces.length];\n      for (int i = 0; i < pieces.length; ++i) {\n        classWeights[i] = Double.valueOf(pieces[i]);\n      }\n      return argIndex + 2;\n    } else {\n      return trainOptions.setOption(args, argIndex);\n    }\n  }","commit_id":"3661c2c01dc674dcef0a7f27ae6b2e5d3b2e51fb","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private void backpropDerivativesAndError(Tree tree, \n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryTD,\n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryCD,\n                                           TwoDimensionalMap<String, String, SimpleTensor> binaryTensorTD,\n                                           Map<String, SimpleMatrix> unaryCD,\n                                           Map<String, SimpleMatrix> wordVectorD,\n                                           SimpleMatrix deltaUp) {\n    if (tree.isLeaf()) {\n      return;\n    }\n\n    SimpleMatrix currentVector = RNNCoreAnnotations.getNodeVector(tree);\n    String category = tree.label().value();\n    category = model.basicCategory(category);\n\n    // TODO: factor this out somewhere?\n    SimpleMatrix goldLabel = new SimpleMatrix(model.numClasses, 1);\n    goldLabel.set(RNNCoreAnnotations.getGoldClass(tree), 1.0);\n\n    SimpleMatrix predictions = RNNCoreAnnotations.getPredictions(tree);\n\n    SimpleMatrix deltaClass = predictions.minus(goldLabel);\n    SimpleMatrix localCD = deltaClass.mult(RNNUtils.concatenateWithBias(currentVector).transpose());\n\n    double error = -(RNNUtils.elementwiseApplyLog(predictions).elementMult(goldLabel).elementSum());\n    RNNCoreAnnotations.setPredictionError(tree, error);\n\n    if (tree.isPreTerminal()) { // below us is a word vector\n      unaryCD.put(category, unaryCD.get(category).plus(localCD));\n\n      String word = tree.children()[0].label().value();\n      word = model.getVocabWord(word);\n\n      //SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      //SimpleMatrix deltaFromClass = model.getUnaryClassification(category).transpose().mult(deltaClass);\n      //SimpleMatrix deltaFull = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).plus(deltaUp);\n      //SimpleMatrix wordDerivative = deltaFull.elementMult(currentVectorDerivative);\n      //wordVectorD.put(word, wordVectorD.get(word).plus(wordDerivative));\n\n      SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      SimpleMatrix deltaFromClass = model.getUnaryClassification(category).transpose().mult(deltaClass);\n      deltaFromClass = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).elementMult(currentVectorDerivative);\n      SimpleMatrix deltaFull = deltaFromClass.plus(deltaUp);\n      wordVectorD.put(word, wordVectorD.get(word).plus(deltaFull));\n    } else {\n      // Otherwise, this must be a binary node\n      String leftCategory = model.basicCategory(tree.children()[0].label().value());\n      String rightCategory = model.basicCategory(tree.children()[1].label().value());\n      binaryCD.put(leftCategory, rightCategory, binaryCD.get(leftCategory, rightCategory).plus(localCD));\n      \n      SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      SimpleMatrix deltaFromClass = model.getBinaryClassification(leftCategory, rightCategory).transpose().mult(deltaClass);\n      deltaFromClass = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).elementMult(currentVectorDerivative);\n      SimpleMatrix deltaFull = deltaFromClass.plus(deltaUp);\n      \n      SimpleMatrix leftVector = RNNCoreAnnotations.getNodeVector(tree.children()[0]);\n      SimpleMatrix rightVector = RNNCoreAnnotations.getNodeVector(tree.children()[1]);\n      SimpleMatrix childrenVector = RNNUtils.concatenateWithBias(leftVector, rightVector);\n      SimpleMatrix W_df = deltaFull.mult(childrenVector.transpose());\n      binaryTD.put(leftCategory, rightCategory, binaryTD.get(leftCategory, rightCategory).plus(W_df));\n      SimpleMatrix deltaDown;\n      if (model.op.useTensors) {\n        SimpleTensor Wt_df = getTensorGradient(deltaFull, leftVector, rightVector);\n        binaryTensorTD.put(leftCategory, rightCategory, binaryTensorTD.get(leftCategory, rightCategory).plus(Wt_df));\n        deltaDown = computeTensorDeltaDown(deltaFull, leftVector, rightVector, model.getBinaryTransform(leftCategory, rightCategory), model.getBinaryTensor(leftCategory, rightCategory));\n      } else {\n        deltaDown = model.getBinaryTransform(leftCategory, rightCategory).transpose().mult(deltaFull);\n      }\n\n      SimpleMatrix leftDerivative = RNNUtils.elementwiseApplyTanhDerivative(leftVector);\n      SimpleMatrix rightDerivative = RNNUtils.elementwiseApplyTanhDerivative(rightVector);\n      SimpleMatrix leftDeltaDown = deltaDown.extractMatrix(0, deltaFull.numRows(), 0, 1);\n      SimpleMatrix rightDeltaDown = deltaDown.extractMatrix(deltaFull.numRows(), deltaFull.numRows() * 2, 0, 1);\n      backpropDerivativesAndError(tree.children()[0], binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, leftDerivative.elementMult(leftDeltaDown));\n      backpropDerivativesAndError(tree.children()[1], binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, rightDerivative.elementMult(rightDeltaDown));\n    }\n  }","id":105429,"modified_method":"private void backpropDerivativesAndError(Tree tree, \n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryTD,\n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryCD,\n                                           TwoDimensionalMap<String, String, SimpleTensor> binaryTensorTD,\n                                           Map<String, SimpleMatrix> unaryCD,\n                                           Map<String, SimpleMatrix> wordVectorD,\n                                           SimpleMatrix deltaUp) {\n    if (tree.isLeaf()) {\n      return;\n    }\n\n    SimpleMatrix currentVector = RNNCoreAnnotations.getNodeVector(tree);\n    String category = tree.label().value();\n    category = model.basicCategory(category);\n\n    // Build a vector that looks like 0,0,1,0,0 with an indicator for the correct class\n    SimpleMatrix goldLabel = new SimpleMatrix(model.numClasses, 1);\n    int goldClass = RNNCoreAnnotations.getGoldClass(tree);\n    goldLabel.set(goldClass, 1.0);\n\n    double nodeWeight = model.op.getClassWeight(goldClass);\n\n    SimpleMatrix predictions = RNNCoreAnnotations.getPredictions(tree);\n\n    SimpleMatrix deltaClass = predictions.minus(goldLabel).scale(nodeWeight);\n    SimpleMatrix localCD = deltaClass.mult(RNNUtils.concatenateWithBias(currentVector).transpose());\n\n    double error = -(RNNUtils.elementwiseApplyLog(predictions).elementMult(goldLabel).elementSum());\n    error = error * nodeWeight;\n    RNNCoreAnnotations.setPredictionError(tree, error);\n\n    if (tree.isPreTerminal()) { // below us is a word vector\n      unaryCD.put(category, unaryCD.get(category).plus(localCD));\n\n      String word = tree.children()[0].label().value();\n      word = model.getVocabWord(word);\n\n      //SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      //SimpleMatrix deltaFromClass = model.getUnaryClassification(category).transpose().mult(deltaClass);\n      //SimpleMatrix deltaFull = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).plus(deltaUp);\n      //SimpleMatrix wordDerivative = deltaFull.elementMult(currentVectorDerivative);\n      //wordVectorD.put(word, wordVectorD.get(word).plus(wordDerivative));\n\n      SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      SimpleMatrix deltaFromClass = model.getUnaryClassification(category).transpose().mult(deltaClass);\n      deltaFromClass = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).elementMult(currentVectorDerivative);\n      SimpleMatrix deltaFull = deltaFromClass.plus(deltaUp);\n      wordVectorD.put(word, wordVectorD.get(word).plus(deltaFull));\n    } else {\n      // Otherwise, this must be a binary node\n      String leftCategory = model.basicCategory(tree.children()[0].label().value());\n      String rightCategory = model.basicCategory(tree.children()[1].label().value());\n      binaryCD.put(leftCategory, rightCategory, binaryCD.get(leftCategory, rightCategory).plus(localCD));\n      \n      SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      SimpleMatrix deltaFromClass = model.getBinaryClassification(leftCategory, rightCategory).transpose().mult(deltaClass);\n      deltaFromClass = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).elementMult(currentVectorDerivative);\n      SimpleMatrix deltaFull = deltaFromClass.plus(deltaUp);\n      \n      SimpleMatrix leftVector = RNNCoreAnnotations.getNodeVector(tree.children()[0]);\n      SimpleMatrix rightVector = RNNCoreAnnotations.getNodeVector(tree.children()[1]);\n      SimpleMatrix childrenVector = RNNUtils.concatenateWithBias(leftVector, rightVector);\n      SimpleMatrix W_df = deltaFull.mult(childrenVector.transpose());\n      binaryTD.put(leftCategory, rightCategory, binaryTD.get(leftCategory, rightCategory).plus(W_df));\n      SimpleMatrix deltaDown;\n      if (model.op.useTensors) {\n        SimpleTensor Wt_df = getTensorGradient(deltaFull, leftVector, rightVector);\n        binaryTensorTD.put(leftCategory, rightCategory, binaryTensorTD.get(leftCategory, rightCategory).plus(Wt_df));\n        deltaDown = computeTensorDeltaDown(deltaFull, leftVector, rightVector, model.getBinaryTransform(leftCategory, rightCategory), model.getBinaryTensor(leftCategory, rightCategory));\n      } else {\n        deltaDown = model.getBinaryTransform(leftCategory, rightCategory).transpose().mult(deltaFull);\n      }\n\n      SimpleMatrix leftDerivative = RNNUtils.elementwiseApplyTanhDerivative(leftVector);\n      SimpleMatrix rightDerivative = RNNUtils.elementwiseApplyTanhDerivative(rightVector);\n      SimpleMatrix leftDeltaDown = deltaDown.extractMatrix(0, deltaFull.numRows(), 0, 1);\n      SimpleMatrix rightDeltaDown = deltaDown.extractMatrix(deltaFull.numRows(), deltaFull.numRows() * 2, 0, 1);\n      backpropDerivativesAndError(tree.children()[0], binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, leftDerivative.elementMult(leftDeltaDown));\n      backpropDerivativesAndError(tree.children()[1], binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, rightDerivative.elementMult(rightDeltaDown));\n    }\n  }","commit_id":"3661c2c01dc674dcef0a7f27ae6b2e5d3b2e51fb","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"public int setOption(String[] args, int argIndex) {\n    if (args[argIndex].equalsIgnoreCase(\"-seed\")) {\n      randomSeed = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-wordVectors\")) {\n      wordVectors = args[argIndex + 1];\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-unkWord\")) {\n      unkWord = args[argIndex] + 1;\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numHid\")) {\n      numHid = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numClasses\")) {\n      numClasses = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-lowercaseWordVectors\")) {\n      lowercaseWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nolowercaseWordVectors\")) {\n      lowercaseWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-randomWordVectors\")) {\n      randomWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-norandomWordVectors\")) {\n      randomWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-simplifiedModel\")) {\n      simplifiedModel = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nosimplifiedModel\")) {\n      simplifiedModel = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-useTensors\")) {\n      useTensors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nouseTensors\")) {\n      useTensors = false;\n      return argIndex + 1;\n    } else {\n      return trainOptions.setOption(args, argIndex);\n    }\n  }","id":105430,"modified_method":"public int setOption(String[] args, int argIndex) {\n    if (args[argIndex].equalsIgnoreCase(\"-seed\")) {\n      randomSeed = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-wordVectors\")) {\n      wordVectors = args[argIndex + 1];\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-unkWord\")) {\n      unkWord = args[argIndex] + 1;\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numHid\")) {\n      numHid = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-numClasses\")) {\n      numClasses = Integer.valueOf(args[argIndex + 1]);\n      return argIndex + 2;\n    } else if (args[argIndex].equalsIgnoreCase(\"-lowercaseWordVectors\")) {\n      lowercaseWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nolowercaseWordVectors\")) {\n      lowercaseWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-randomWordVectors\")) {\n      randomWordVectors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-norandomWordVectors\")) {\n      randomWordVectors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-simplifiedModel\")) {\n      simplifiedModel = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nosimplifiedModel\")) {\n      simplifiedModel = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-useTensors\")) {\n      useTensors = true;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-nouseTensors\")) {\n      useTensors = false;\n      return argIndex + 1;\n    } else if (args[argIndex].equalsIgnoreCase(\"-classWeights\")) {\n      String classWeightString = args[argIndex + 1];\n      String[] pieces = classWeightString.split(\",\");\n      classWeights = new double[pieces.length];\n      for (int i = 0; i < pieces.length; ++i) {\n        classWeights[i] = Double.valueOf(pieces[i]);\n      }\n      return argIndex + 2;\n    } else {\n      return trainOptions.setOption(args, argIndex);\n    }\n  }","commit_id":"ba7509c1eaba73bfd098105773566034cfb84ce6","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"private void backpropDerivativesAndError(Tree tree, \n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryTD,\n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryCD,\n                                           TwoDimensionalMap<String, String, SimpleTensor> binaryTensorTD,\n                                           Map<String, SimpleMatrix> unaryCD,\n                                           Map<String, SimpleMatrix> wordVectorD,\n                                           SimpleMatrix deltaUp) {\n    if (tree.isLeaf()) {\n      return;\n    }\n\n    SimpleMatrix currentVector = RNNCoreAnnotations.getNodeVector(tree);\n    String category = tree.label().value();\n    category = model.basicCategory(category);\n\n    // TODO: factor this out somewhere?\n    SimpleMatrix goldLabel = new SimpleMatrix(model.numClasses, 1);\n    goldLabel.set(RNNCoreAnnotations.getGoldClass(tree), 1.0);\n\n    SimpleMatrix predictions = RNNCoreAnnotations.getPredictions(tree);\n\n    SimpleMatrix deltaClass = predictions.minus(goldLabel);\n    SimpleMatrix localCD = deltaClass.mult(RNNUtils.concatenateWithBias(currentVector).transpose());\n\n    double error = -(RNNUtils.elementwiseApplyLog(predictions).elementMult(goldLabel).elementSum());\n    RNNCoreAnnotations.setPredictionError(tree, error);\n\n    if (tree.isPreTerminal()) { // below us is a word vector\n      unaryCD.put(category, unaryCD.get(category).plus(localCD));\n\n      String word = tree.children()[0].label().value();\n      word = model.getVocabWord(word);\n\n      //SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      //SimpleMatrix deltaFromClass = model.getUnaryClassification(category).transpose().mult(deltaClass);\n      //SimpleMatrix deltaFull = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).plus(deltaUp);\n      //SimpleMatrix wordDerivative = deltaFull.elementMult(currentVectorDerivative);\n      //wordVectorD.put(word, wordVectorD.get(word).plus(wordDerivative));\n\n      SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      SimpleMatrix deltaFromClass = model.getUnaryClassification(category).transpose().mult(deltaClass);\n      deltaFromClass = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).elementMult(currentVectorDerivative);\n      SimpleMatrix deltaFull = deltaFromClass.plus(deltaUp);\n      wordVectorD.put(word, wordVectorD.get(word).plus(deltaFull));\n    } else {\n      // Otherwise, this must be a binary node\n      String leftCategory = model.basicCategory(tree.children()[0].label().value());\n      String rightCategory = model.basicCategory(tree.children()[1].label().value());\n      binaryCD.put(leftCategory, rightCategory, binaryCD.get(leftCategory, rightCategory).plus(localCD));\n      \n      SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      SimpleMatrix deltaFromClass = model.getBinaryClassification(leftCategory, rightCategory).transpose().mult(deltaClass);\n      deltaFromClass = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).elementMult(currentVectorDerivative);\n      SimpleMatrix deltaFull = deltaFromClass.plus(deltaUp);\n      \n      SimpleMatrix leftVector = RNNCoreAnnotations.getNodeVector(tree.children()[0]);\n      SimpleMatrix rightVector = RNNCoreAnnotations.getNodeVector(tree.children()[1]);\n      SimpleMatrix childrenVector = RNNUtils.concatenateWithBias(leftVector, rightVector);\n      SimpleMatrix W_df = deltaFull.mult(childrenVector.transpose());\n      binaryTD.put(leftCategory, rightCategory, binaryTD.get(leftCategory, rightCategory).plus(W_df));\n      SimpleMatrix deltaDown;\n      if (model.op.useTensors) {\n        SimpleTensor Wt_df = getTensorGradient(deltaFull, leftVector, rightVector);\n        binaryTensorTD.put(leftCategory, rightCategory, binaryTensorTD.get(leftCategory, rightCategory).plus(Wt_df));\n        deltaDown = computeTensorDeltaDown(deltaFull, leftVector, rightVector, model.getBinaryTransform(leftCategory, rightCategory), model.getBinaryTensor(leftCategory, rightCategory));\n      } else {\n        deltaDown = model.getBinaryTransform(leftCategory, rightCategory).transpose().mult(deltaFull);\n      }\n\n      SimpleMatrix leftDerivative = RNNUtils.elementwiseApplyTanhDerivative(leftVector);\n      SimpleMatrix rightDerivative = RNNUtils.elementwiseApplyTanhDerivative(rightVector);\n      SimpleMatrix leftDeltaDown = deltaDown.extractMatrix(0, deltaFull.numRows(), 0, 1);\n      SimpleMatrix rightDeltaDown = deltaDown.extractMatrix(deltaFull.numRows(), deltaFull.numRows() * 2, 0, 1);\n      backpropDerivativesAndError(tree.children()[0], binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, leftDerivative.elementMult(leftDeltaDown));\n      backpropDerivativesAndError(tree.children()[1], binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, rightDerivative.elementMult(rightDeltaDown));\n    }\n  }","id":105431,"modified_method":"private void backpropDerivativesAndError(Tree tree, \n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryTD,\n                                           TwoDimensionalMap<String, String, SimpleMatrix> binaryCD,\n                                           TwoDimensionalMap<String, String, SimpleTensor> binaryTensorTD,\n                                           Map<String, SimpleMatrix> unaryCD,\n                                           Map<String, SimpleMatrix> wordVectorD,\n                                           SimpleMatrix deltaUp) {\n    if (tree.isLeaf()) {\n      return;\n    }\n\n    SimpleMatrix currentVector = RNNCoreAnnotations.getNodeVector(tree);\n    String category = tree.label().value();\n    category = model.basicCategory(category);\n\n    // Build a vector that looks like 0,0,1,0,0 with an indicator for the correct class\n    SimpleMatrix goldLabel = new SimpleMatrix(model.numClasses, 1);\n    int goldClass = RNNCoreAnnotations.getGoldClass(tree);\n    goldLabel.set(goldClass, 1.0);\n\n    double nodeWeight = model.op.getClassWeight(goldClass);\n\n    SimpleMatrix predictions = RNNCoreAnnotations.getPredictions(tree);\n\n    SimpleMatrix deltaClass = predictions.minus(goldLabel).scale(nodeWeight);\n    SimpleMatrix localCD = deltaClass.mult(RNNUtils.concatenateWithBias(currentVector).transpose());\n\n    double error = -(RNNUtils.elementwiseApplyLog(predictions).elementMult(goldLabel).elementSum());\n    error = error * nodeWeight;\n    RNNCoreAnnotations.setPredictionError(tree, error);\n\n    if (tree.isPreTerminal()) { // below us is a word vector\n      unaryCD.put(category, unaryCD.get(category).plus(localCD));\n\n      String word = tree.children()[0].label().value();\n      word = model.getVocabWord(word);\n\n      //SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      //SimpleMatrix deltaFromClass = model.getUnaryClassification(category).transpose().mult(deltaClass);\n      //SimpleMatrix deltaFull = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).plus(deltaUp);\n      //SimpleMatrix wordDerivative = deltaFull.elementMult(currentVectorDerivative);\n      //wordVectorD.put(word, wordVectorD.get(word).plus(wordDerivative));\n\n      SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      SimpleMatrix deltaFromClass = model.getUnaryClassification(category).transpose().mult(deltaClass);\n      deltaFromClass = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).elementMult(currentVectorDerivative);\n      SimpleMatrix deltaFull = deltaFromClass.plus(deltaUp);\n      wordVectorD.put(word, wordVectorD.get(word).plus(deltaFull));\n    } else {\n      // Otherwise, this must be a binary node\n      String leftCategory = model.basicCategory(tree.children()[0].label().value());\n      String rightCategory = model.basicCategory(tree.children()[1].label().value());\n      binaryCD.put(leftCategory, rightCategory, binaryCD.get(leftCategory, rightCategory).plus(localCD));\n      \n      SimpleMatrix currentVectorDerivative = RNNUtils.elementwiseApplyTanhDerivative(currentVector);\n      SimpleMatrix deltaFromClass = model.getBinaryClassification(leftCategory, rightCategory).transpose().mult(deltaClass);\n      deltaFromClass = deltaFromClass.extractMatrix(0, model.op.numHid, 0, 1).elementMult(currentVectorDerivative);\n      SimpleMatrix deltaFull = deltaFromClass.plus(deltaUp);\n      \n      SimpleMatrix leftVector = RNNCoreAnnotations.getNodeVector(tree.children()[0]);\n      SimpleMatrix rightVector = RNNCoreAnnotations.getNodeVector(tree.children()[1]);\n      SimpleMatrix childrenVector = RNNUtils.concatenateWithBias(leftVector, rightVector);\n      SimpleMatrix W_df = deltaFull.mult(childrenVector.transpose());\n      binaryTD.put(leftCategory, rightCategory, binaryTD.get(leftCategory, rightCategory).plus(W_df));\n      SimpleMatrix deltaDown;\n      if (model.op.useTensors) {\n        SimpleTensor Wt_df = getTensorGradient(deltaFull, leftVector, rightVector);\n        binaryTensorTD.put(leftCategory, rightCategory, binaryTensorTD.get(leftCategory, rightCategory).plus(Wt_df));\n        deltaDown = computeTensorDeltaDown(deltaFull, leftVector, rightVector, model.getBinaryTransform(leftCategory, rightCategory), model.getBinaryTensor(leftCategory, rightCategory));\n      } else {\n        deltaDown = model.getBinaryTransform(leftCategory, rightCategory).transpose().mult(deltaFull);\n      }\n\n      SimpleMatrix leftDerivative = RNNUtils.elementwiseApplyTanhDerivative(leftVector);\n      SimpleMatrix rightDerivative = RNNUtils.elementwiseApplyTanhDerivative(rightVector);\n      SimpleMatrix leftDeltaDown = deltaDown.extractMatrix(0, deltaFull.numRows(), 0, 1);\n      SimpleMatrix rightDeltaDown = deltaDown.extractMatrix(deltaFull.numRows(), deltaFull.numRows() * 2, 0, 1);\n      backpropDerivativesAndError(tree.children()[0], binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, leftDerivative.elementMult(leftDeltaDown));\n      backpropDerivativesAndError(tree.children()[1], binaryTD, binaryCD, binaryTensorTD, unaryCD, wordVectorD, rightDerivative.elementMult(rightDeltaDown));\n    }\n  }","commit_id":"ba7509c1eaba73bfd098105773566034cfb84ce6","url":"https://github.com/stanfordnlp/CoreNLP"},{"original_method":"@Override\n  public void update(final AnActionEvent e) {\n    Presentation p = e.getPresentation();\n    p.setText(ActionsBundle.message(\"action.Runner.RestoreView.text\", myContent.getDisplayName()));\n    p.setDescription(ActionsBundle.message(\"action.Runner.RestoreView.description\"));\n    p.setIcon(myContent.getIcon());\n  }","id":105432,"modified_method":"@Override\n  public void update(final AnActionEvent e) {\n    Presentation p = e.getPresentation();\n    p.setText(ActionsBundle.message(\"action.Runner.RestoreView.text\", myContent.getDisplayName()));\n    p.setDescription(ActionsBundle.message(\"action.Runner.RestoreView.description\"));\n    Icon icon = myContent.getIcon();\n    p.setIcon(icon == null ? AllIcons.Debugger.RestoreLayout : icon);\n  }","commit_id":"4113b3e9c159920ace0b75b2f9be906b11eef00e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void setTabIcon(String tabName, JLabel jLabel) {\n    for (Pair<String, JComponent> nextTabWithName : myContent.getTabs()) {\n      if (nextTabWithName.getFirst().equals(ContentUtilEx.getTabNameWithoutPrefix(myContent, tabName))) {\n        JComponent tab = nextTabWithName.getSecond();\n        if (tab instanceof Iconable) {\n          jLabel.setIcon(((Iconable)tab).getIcon(Iconable.ICON_FLAG_VISIBILITY));\n        }\n      }\n    }\n  }","id":105433,"modified_method":"private void setTabIcon(String tabName, JLabel jLabel) {\n    for (Pair<String, JComponent> nextTabWithName : myContent.getTabs()) {\n      if (nextTabWithName.getFirst().equals(ContentUtilEx.getTabNameWithoutPrefix(myContent, tabName))) {\n        JComponent tab = nextTabWithName.getSecond();\n        if (tab instanceof Iconable) {\n          Icon baseIcon = ((Iconable)tab).getIcon(Iconable.ICON_FLAG_VISIBILITY);\n          jLabel.setIcon(isSelected() || baseIcon == null ? baseIcon : new WatermarkIcon(baseIcon, .5f));\n        }\n      }\n    }\n  }","commit_id":"ee546dd7c6d959d247faf0cc51f8b54f7452d043","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void update(AnActionEvent event){\n    Presentation presentation = event.getPresentation();\n    Project project = event.getData(PlatformDataKeys.PROJECT);\n    if (project == null) {\n      presentation.setEnabled(false);\n      presentation.setVisible(false);\n      return;\n    }\n    ToolWindow toolWindow=ToolWindowManager.getInstance(project).getToolWindow(myToolWindowId);\n    presentation.setEnabled(toolWindow!=null&&toolWindow.isAvailable());\n    presentation.setVisible(toolWindow!=null);\n    if (toolWindow != null) {\n      presentation.setIcon(toolWindow.getIcon());\n    }\n  }","id":105434,"modified_method":"public void update(AnActionEvent event){\n    Presentation presentation = event.getPresentation();\n    Project project = event.getData(PlatformDataKeys.PROJECT);\n    if (project == null) {\n      presentation.setEnabled(false);\n      presentation.setVisible(false);\n      return;\n    }\n    ToolWindow toolWindow=ToolWindowManager.getInstance(project).getToolWindow(myToolWindowId);\n    presentation.setEnabled(toolWindow!=null&&toolWindow.isAvailable());\n    presentation.setVisible(toolWindow!=null);\n    if (toolWindow != null) {\n      Icon icon = toolWindow.getIcon();\n      presentation.setIcon(icon == null ? null : new SizedIcon(icon, icon.getIconHeight(), icon.getIconHeight()));\n    }\n  }","commit_id":"c168bd8c98dd3a159e8636e781591f2db75b4932","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void logChunks(final List<Chunk<Module>> chunks) {\n    for (Iterator it = chunks.iterator(); it.hasNext();) {\n      final Chunk<Module> chunk = (Chunk<Module>)it.next();\n      System.out.println(chunk);\n    }\n    System.out.println(\"---\");\n  }","id":105435,"modified_method":"private static void logChunks(final List<Chunk<Module>> chunks) {\n    for (final Chunk<Module> chunk : chunks) {\n      System.out.println(chunk);\n    }\n    System.out.println(\"---\");\n  }","commit_id":"703544ed5c20c766d8176b00a6d4a4384a680700","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static List<Chunk<Module>> getSortedModuleChunks(Module[] modules, Graph<Module> moduleGraph) {\n    final Graph<Chunk<Module>> graph = toChunkGraph(moduleGraph);\n    final List<Chunk<Module>> chunks = new ArrayList<Chunk<Module>>(moduleGraph.getNodes().size());\n    for (Iterator<Chunk<Module>> it = graph.getNodes().iterator(); it.hasNext();) {\n      chunks.add(it.next());\n    }\n    DFSTBuilder<Chunk<Module>> builder = new DFSTBuilder<Chunk<Module>>(graph);\n    if (!builder.isAcyclic()) {\n      LOG.error(\"Acyclic graph expected\");\n      return null;\n    }\n\n    Collections.sort(chunks, builder.comparator());\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"---Sorted module chunks:\");\n      logChunks(chunks);\n    }\n\n    final Set<Module> modulesSet = new HashSet<Module>(Arrays.asList(modules));\n    // leave only those chunks that contain at least one module from modules\n    for (Iterator<Chunk<Module>> it = chunks.iterator(); it.hasNext();) {\n      final Chunk<Module> chunk = it.next();\n      if (!intersects(chunk.getNodes(), modulesSet)) {\n        it.remove();\n      }\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"---Chunks to be processed:\");\n      logChunks(chunks);\n    }\n    return chunks;\n  }","id":105436,"modified_method":"public static List<Chunk<Module>> getSortedModuleChunks(Module[] modules, Graph<Module> moduleGraph) {\n    final Graph<Chunk<Module>> graph = toChunkGraph(moduleGraph);\n    final List<Chunk<Module>> chunks = new ArrayList<Chunk<Module>>(moduleGraph.getNodes().size());\n    for (final Chunk<Module> chunk : graph.getNodes()) {\n      chunks.add(chunk);\n    }\n    DFSTBuilder<Chunk<Module>> builder = new DFSTBuilder<Chunk<Module>>(graph);\n    if (!builder.isAcyclic()) {\n      LOG.error(\"Acyclic graph expected\");\n      return null;\n    }\n\n    Collections.sort(chunks, builder.comparator());\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"---Sorted module chunks:\");\n      logChunks(chunks);\n    }\n\n    final Set<Module> modulesSet = new HashSet<Module>(Arrays.asList(modules));\n    // leave only those chunks that contain at least one module from modules\n    for (Iterator<Chunk<Module>> it = chunks.iterator(); it.hasNext();) {\n      final Chunk<Module> chunk = it.next();\n      if (!intersects(chunk.getNodes(), modulesSet)) {\n        it.remove();\n      }\n    }\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"---Chunks to be processed:\");\n      logChunks(chunks);\n    }\n    return chunks;\n  }","commit_id":"703544ed5c20c766d8176b00a6d4a4384a680700","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static <Node> void addAllReachable(Graph<Node> graph, final Set<Node> reachableSet, final Node node, final boolean fromTheNode) {\n    final Set<Node> toProcess = new HashSet<Node>();\n    final Set<Node> alreadyProcessed = new HashSet<Node>();\n    toProcess.add(node);\n    while (!toProcess.isEmpty()) {\n      alreadyProcessed.addAll(toProcess);\n      final List<Node> nodes = new ArrayList<Node>(toProcess);\n      toProcess.clear();\n      for (Iterator<Node> nodesToProcessIterator = nodes.iterator(); nodesToProcessIterator.hasNext();) {\n        final Node n = nodesToProcessIterator.next();\n        for (Iterator<Node> it = graph.getNodes().iterator(); it.hasNext();) {\n          final Node n1 = it.next();\n          if (fromTheNode? hasArc(graph, n, n1) : hasArc(graph, n1, n)) {\n            reachableSet.add(n1);\n            if (!alreadyProcessed.contains(n1)) {\n              toProcess.add(n1);\n            }\n          }\n        }\n      }\n    }\n  }","id":105437,"modified_method":"private static <Node> void addAllReachable(Graph<Node> graph, final Set<Node> reachableSet, final Node node, final boolean fromTheNode) {\n    final Set<Node> toProcess = new HashSet<Node>();\n    final Set<Node> alreadyProcessed = new HashSet<Node>();\n    toProcess.add(node);\n    while (!toProcess.isEmpty()) {\n      alreadyProcessed.addAll(toProcess);\n      final List<Node> nodes = new ArrayList<Node>(toProcess);\n      toProcess.clear();\n      for (final Node n : nodes) {\n        for (final Node n1 : graph.getNodes()) {\n          if (fromTheNode ? hasArc(graph, n, n1) : hasArc(graph, n1, n)) {\n            reachableSet.add(n1);\n            if (!alreadyProcessed.contains(n1)) {\n              toProcess.add(n1);\n            }\n          }\n        }\n      }\n    }\n  }","commit_id":"703544ed5c20c766d8176b00a6d4a4384a680700","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static <Node> Graph<Chunk<Node>> toChunkGraph(final Graph<Node> graph) {\n    final Set<Chunk<Node>> chunks = new HashSet<Chunk<Node>>();\n\n    final Map<Node, Chunk<Node>> nodeToChunkMap = new HashMap<Node, Chunk<Node>>();\n    for (Iterator<Node> it = graph.getNodes().iterator(); it.hasNext();) {\n      final Chunk<Node> chunk = buildChunk(graph, it.next());\n      chunks.add(chunk);\n      for (Iterator<Node> nodeIterator = chunk.getNodes().iterator(); nodeIterator.hasNext();) {\n        nodeToChunkMap.put(nodeIterator.next(), chunk);\n      }\n    }\n\n    return GraphGenerator.create(CachingSemiGraph.create(new GraphGenerator.SemiGraph<Chunk<Node>>() {\n      public Collection<Chunk<Node>> getNodes() {\n        return chunks;\n      }\n\n      public Iterator<Chunk<Node>> getIn(Chunk<Node> chunk) {\n        final Set<Node> chunkNodes = chunk.getNodes();\n        final Set<Chunk<Node>> ins = new HashSet<Chunk<Node>>();\n        for (Iterator<Node> chunkNodesIterator = chunkNodes.iterator(); chunkNodesIterator.hasNext();) {\n          final Node node = chunkNodesIterator.next();\n          for (Iterator<Node> nodeIns = graph.getIn(node); nodeIns.hasNext();) {\n            final Node in = nodeIns.next();\n            if (!chunk.containsNode(in)) {\n              ins.add(nodeToChunkMap.get(in));\n            }\n          }\n        }\n        return ins.iterator();\n      }\n    }));\n\n  }","id":105438,"modified_method":"public static <Node> Graph<Chunk<Node>> toChunkGraph(final Graph<Node> graph) {\n    final Set<Chunk<Node>> chunks = new HashSet<Chunk<Node>>();\n\n    final Map<Node, Chunk<Node>> nodeToChunkMap = new HashMap<Node, Chunk<Node>>();\n    for (final Node node : graph.getNodes()) {\n      final Chunk<Node> chunk = buildChunk(graph, node);\n      chunks.add(chunk);\n      for (final Node node1 : chunk.getNodes()) {\n        nodeToChunkMap.put(node1, chunk);\n      }\n    }\n\n    return GraphGenerator.create(CachingSemiGraph.create(new GraphGenerator.SemiGraph<Chunk<Node>>() {\n      public Collection<Chunk<Node>> getNodes() {\n        return chunks;\n      }\n\n      public Iterator<Chunk<Node>> getIn(Chunk<Node> chunk) {\n        final Set<Node> chunkNodes = chunk.getNodes();\n        final Set<Chunk<Node>> ins = new HashSet<Chunk<Node>>();\n        for (Iterator<Node> chunkNodesIterator = chunkNodes.iterator(); chunkNodesIterator.hasNext();) {\n          final Node node = chunkNodesIterator.next();\n          for (Iterator<Node> nodeIns = graph.getIn(node); nodeIns.hasNext();) {\n            final Node in = nodeIns.next();\n            if (!chunk.containsNode(in)) {\n              ins.add(nodeToChunkMap.get(in));\n            }\n          }\n        }\n        return ins.iterator();\n      }\n    }));\n\n  }","commit_id":"703544ed5c20c766d8176b00a6d4a4384a680700","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean intersects(Set set1, Set set2) {\n    for (Iterator it = set1.iterator(); it.hasNext();) {\n      if (set2.contains(it.next())) {\n        return true;\n      }\n    }\n    return false;\n  }","id":105439,"modified_method":"private static boolean intersects(Set set1, Set set2) {\n    for (final Object item : set1) {\n      if (set2.contains(item)) {\n        return true;\n      }\n    }\n    return false;\n  }","commit_id":"703544ed5c20c766d8176b00a6d4a4384a680700","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean dependsOn(Module dependant, Module dependee) {\n    if (dependant.equals(dependee)) return true;\n    final Module[] dependencies = ModuleRootManager.getInstance(dependant).getDependencies();\n    for (int i = 0; i < dependencies.length; i++) {\n      final Module dependency = dependencies[i];\n      if (dependsOn(dependency, dependee)) return true;\n    }\n    return false;\n  }","id":105440,"modified_method":"private static boolean dependsOn(Module dependant, Module dependee) {\n    if (dependant.equals(dependee)) return true;\n    final Module[] dependencies = ModuleRootManager.getInstance(dependant).getDependencies();\n    for (final Module dependency : dependencies) {\n      if (dependsOn(dependency, dependee)) {\n        return true;\n      }\n    }\n    return false;\n  }","commit_id":"703544ed5c20c766d8176b00a6d4a4384a680700","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void runTest(RepositoryFixture fixture, Repository repository, List<Integer> concurrencyLevels) throws Exception {\n\n        setUp(repository, CREDENTIALS);\n        try {\n            \n            // Run a few iterations to warm up the system\n            long warmupEnd = System.currentTimeMillis() + WARMUP;\n            boolean stop = false;\n            while (System.currentTimeMillis() < warmupEnd && !stop) {\n                if (!stop) {\n                    // we want to execute this at lease once. after that we consider the\n                    // `haltRequested` flag.\n                    stop = haltRequested;\n                }\n                execute();\n            }\n\n            if (concurrencyLevels == null || concurrencyLevels.isEmpty()) {\n                concurrencyLevels = Arrays.asList(1);\n            }\n\n            for (Integer concurrency: concurrencyLevels) {\n                // Run the test\n                DescriptiveStatistics statistics = runTest(concurrency);\n                if (statistics.getN() > 0) {\n                    System.out.format(\n                            \"%-28.28s  %6d  %6.0f  %6.0f  %6.0f  %6.0f  %6.0f  %6d%n\",\n                            fixture.toString(),\n                            concurrency,\n                            statistics.getMin(),\n                            statistics.getPercentile(10.0),\n                            statistics.getPercentile(50.0),\n                            statistics.getPercentile(90.0),\n                            statistics.getMax(),\n                            statistics.getN());\n                    if (out != null) {\n                        out.format(\n                                \"%-28.28s, %6d, %6.0f, %6.0f, %6.0f, %6.0f, %6.0f, %6d%n\",\n                                fixture.toString(),\n                                concurrency,\n                                statistics.getMin(),\n                                statistics.getPercentile(10.0),\n                                statistics.getPercentile(50.0),\n                                statistics.getPercentile(90.0),\n                                statistics.getMax(),\n                                statistics.getN());\n                    }\n                }\n\n            }\n        } finally {\n            tearDown();\n        }\n    }","id":105441,"modified_method":"private void runTest(RepositoryFixture fixture, Repository repository, List<Integer> concurrencyLevels) throws Exception {\n\n        setUp(repository, CREDENTIALS);\n        try {\n            \n            // Run a few iterations to warm up the system\n            long warmupEnd = System.currentTimeMillis() + WARMUP;\n            boolean stop = false;\n            while (System.currentTimeMillis() < warmupEnd && !stop) {\n                if (!stop) {\n                    // we want to execute this at lease once. after that we consider the\n                    // `haltRequested` flag.\n                    stop = haltRequested;\n                }\n                execute();\n            }\n\n            if (concurrencyLevels == null || concurrencyLevels.isEmpty()) {\n                concurrencyLevels = Arrays.asList(1);\n            }\n\n            for (Integer concurrency: concurrencyLevels) {\n                // Run the test\n                DescriptiveStatistics statistics = runTest(concurrency);\n                Object[] defaultStats = new Object[] {\n                    fixture.toString(),\n                    concurrency,\n                    statistics.getMin(),\n                    statistics.getPercentile(10.0),\n                    statistics.getPercentile(50.0),\n                    statistics.getPercentile(90.0),\n                    statistics.getMax(),\n                    statistics.getN()\n                };\n\n                Object[] statsArg =  ArrayUtils.addAll(defaultStats, statsValues());\n                String comment = comment();\n                if (comment != null) {\n                    statsArg = ArrayUtils.add(statsArg, comment);\n                }\n                if (statistics.getN() > 0) {\n                    System.out.format(\n                            \"%-28.28s  %6d  %6.0f  %6.0f  %6.0f  %6.0f  %6.0f  %6d\"+statsFormatsJoined(false)+\"%n\",\n                            statsArg);\n                    if (out != null) {\n                        out.format(\n                                \"%-28.28s, %6d, %6.0f, %6.0f, %6.0f, %6.0f, %6.0f, %6d\"+statsFormatsJoined(false)+\"%n\",\n                                statsArg);\n                    }\n                }\n\n            }\n        } finally {\n            tearDown();\n        }\n    }","commit_id":"0313f2a3f14e803fe11a8069e9b494d400b6f54b","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public void run(Iterable<RepositoryFixture> fixtures, List<Integer> concurrencyLevels) {\n        System.out.format(\n                \"# %-26.26s       C     min     10%%     50%%     90%%     max       N%n\",\n                toString());\n        if (out != null) {\n            out.format(\n                    \"# %-26.26s,      C,    min,    10%%,    50%%,    90%%,    max,      N%n\",\n                    toString());\n        }\n        for (RepositoryFixture fixture : fixtures) {\n            try {\n                Repository[] cluster = createRepository(fixture);\n                try {\n                    runTest(fixture, cluster[0], concurrencyLevels);\n                } finally {\n                    fixture.tearDownCluster();\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }","id":105442,"modified_method":"@Override\n    public void run(Iterable<RepositoryFixture> fixtures, List<Integer> concurrencyLevels) {\n        System.out.format(\n                \"# %-26.26s       C     min     10%%     50%%     90%%     max       N%s%n\",\n                toString(), statsNamesJoined(false));\n        if (out != null) {\n            out.format(\n                    \"# %-26.26s,      C,    min,    10%%,    50%%,    90%%,    max,      N%s%n\",\n                    toString(), statsNamesJoined(true));\n        }\n        for (RepositoryFixture fixture : fixtures) {\n            try {\n                Repository[] cluster = createRepository(fixture);\n                try {\n                    runTest(fixture, cluster[0], concurrencyLevels);\n                } finally {\n                    fixture.tearDownCluster();\n                }\n            } catch (Exception e) {\n                e.printStackTrace();\n            }\n        }\n    }","commit_id":"0313f2a3f14e803fe11a8069e9b494d400b6f54b","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private void writeIssueComments(Issue issue, JsonWriter json) {\n    if (!issue.comments().isEmpty()) {\n      json.name(\"comments\").beginArray();\n      for (IssueComment comment : issue.comments()) {\n        json.beginObject()\n          .prop(\"key\", comment.key())\n          .prop(\"login\", comment.userLogin())\n          .prop(\"htmlText\", Markdown.convertToHtml(comment.markdownText()))\n          .prop(\"createdAt\", DateUtils.formatDateTime(comment.createdAt()))\n          .endObject();\n      }\n      json.endArray();\n    }\n  }","id":105443,"modified_method":"private void writeIssueComments(IssueQueryResult queryResult, Issue issue, JsonWriter json) {\n    if (!issue.comments().isEmpty()) {\n      json.name(\"comments\").beginArray();\n      String login = UserSession.get().login();\n      for (IssueComment comment : issue.comments()) {\n        String userLogin = comment.userLogin();\n        User user = userLogin != null ? queryResult.user(userLogin) : null;\n        json.beginObject()\n          .prop(\"key\", comment.key())\n          .prop(\"login\", comment.userLogin())\n          .prop(\"userName\", user != null ? user.name() : null)\n          .prop(\"htmlText\", Markdown.convertToHtml(comment.markdownText()))\n          .prop(\"markdown\", comment.markdownText())\n          .prop(\"updatable\", login != null && login.equals(userLogin))\n          .prop(\"createdAt\", DateUtils.formatDateTime(comment.createdAt()))\n          .endObject();\n      }\n      json.endArray();\n    }\n  }","commit_id":"1c2fbb8af7561f726c282638641256185868ba69","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void writeIssues(IssueQueryResult result, @Nullable List<String> extraFields, JsonWriter json) {\n    json.name(\"issues\").beginArray();\n\n    for (Issue i : result.issues()) {\n      json.beginObject();\n\n      DefaultIssue issue = (DefaultIssue) i;\n      String actionPlanKey = issue.actionPlanKey();\n      Duration debt = issue.debt();\n      Date updateDate = issue.updateDate();\n\n      json\n        .prop(\"key\", issue.key())\n        .prop(\"component\", issue.componentKey())\n        .prop(\"componentId\", issue.componentId())\n        .prop(\"project\", issue.projectKey())\n        .prop(\"rule\", issue.ruleKey().toString())\n        .prop(\"status\", issue.status())\n        .prop(\"resolution\", issue.resolution())\n        .prop(\"severity\", issue.severity())\n        .prop(\"message\", issue.message())\n        .prop(\"line\", issue.line())\n        .prop(\"debt\", debt != null ? durations.encode(debt) : null)\n        .prop(\"reporter\", issue.reporter())\n        .prop(\"assignee\", issue.assignee())\n        .prop(\"author\", issue.authorLogin())\n        .prop(\"actionPlan\", actionPlanKey)\n        .prop(\"creationDate\", isoDate(issue.creationDate()))\n        .prop(\"updateDate\", isoDate(updateDate))\n        .prop(\"fUpdateAge\", formatAgeDate(updateDate))\n        .prop(\"closeDate\", isoDate(issue.closeDate()));\n\n      writeIssueComments(issue, json);\n      writeIssueAttributes(issue, json);\n      writeIssueExtraFields(result, issue, extraFields, json);\n      json.endObject();\n    }\n\n    json.endArray();\n  }","id":105444,"modified_method":"private void writeIssues(IssueQueryResult result, @Nullable List<String> extraFields, JsonWriter json) {\n    json.name(\"issues\").beginArray();\n\n    for (Issue i : result.issues()) {\n      json.beginObject();\n\n      DefaultIssue issue = (DefaultIssue) i;\n      String actionPlanKey = issue.actionPlanKey();\n      Duration debt = issue.debt();\n      Date updateDate = issue.updateDate();\n\n      json\n        .prop(\"key\", issue.key())\n        .prop(\"component\", issue.componentKey())\n        .prop(\"componentId\", issue.componentId())\n        .prop(\"project\", issue.projectKey())\n        .prop(\"rule\", issue.ruleKey().toString())\n        .prop(\"status\", issue.status())\n        .prop(\"resolution\", issue.resolution())\n        .prop(\"severity\", issue.severity())\n        .prop(\"message\", issue.message())\n        .prop(\"line\", issue.line())\n        .prop(\"debt\", debt != null ? durations.encode(debt) : null)\n        .prop(\"reporter\", issue.reporter())\n        .prop(\"assignee\", issue.assignee())\n        .prop(\"author\", issue.authorLogin())\n        .prop(\"actionPlan\", actionPlanKey)\n        .prop(\"creationDate\", isoDate(issue.creationDate()))\n        .prop(\"updateDate\", isoDate(updateDate))\n        .prop(\"fUpdateAge\", formatAgeDate(updateDate))\n        .prop(\"closeDate\", isoDate(issue.closeDate()));\n\n      writeIssueComments(result, issue, json);\n      writeIssueAttributes(issue, json);\n      writeIssueExtraFields(result, issue, extraFields, json);\n      json.endObject();\n    }\n\n    json.endArray();\n  }","commit_id":"1c2fbb8af7561f726c282638641256185868ba69","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void issues_with_comments() throws Exception {\n    Issue issue = createIssue()\n      .addComment(\n        new DefaultIssueComment()\n          .setKey(\"COMMENT-ABCD\")\n          .setMarkdownText(\"*My comment*\")\n          .setUserLogin(\"john\")\n          .setCreatedAt(DateUtils.parseDateTime(\"2014-02-23T19:10:03+0100\"))\n      )\n      .addComment(\n        new DefaultIssueComment()\n          .setKey(\"COMMENT-ABCE\")\n          .setMarkdownText(\"Another comment\")\n          .setUserLogin(\"arthur\")\n          .setCreatedAt(DateUtils.parseDateTime(\"2014-02-23T19:10:03+0100\"))\n      );\n    issues.add(issue);\n\n    WsTester.TestRequest request = tester.newGetRequest(\"api/issues\", \"search\");\n    request.execute().assertJson(getClass(), \"issues_with_comments.json\");\n  }","id":105445,"modified_method":"@Test\n  public void issues_with_comments() throws Exception {\n    Issue issue = createIssue()\n      .addComment(\n        new DefaultIssueComment()\n          .setKey(\"COMMENT-ABCD\")\n          .setMarkdownText(\"*My comment*\")\n          .setUserLogin(\"john\")\n          .setCreatedAt(DateUtils.parseDateTime(\"2014-02-23T19:10:03+0100\"))\n      )\n      .addComment(\n        new DefaultIssueComment()\n          .setKey(\"COMMENT-ABCE\")\n          .setMarkdownText(\"Another comment\")\n          .setUserLogin(\"arthur\")\n          .setCreatedAt(DateUtils.parseDateTime(\"2014-02-23T19:10:03+0100\"))\n      );\n    issues.add(issue);\n\n    MockUserSession.set().setLogin(\"john\");\n    result.addUsers(Lists.<User>newArrayList(\n      new DefaultUser().setName(\"John Smith\").setLogin(\"john\"),\n      new DefaultUser().setName(\"Arthur McEnroy\").setLogin(\"arthur\")\n    ));\n\n    WsTester.TestRequest request = tester.newGetRequest(\"api/issues\", \"search\");\n    request.execute().assertJson(getClass(), \"issues_with_comments.json\");\n  }","commit_id":"1c2fbb8af7561f726c282638641256185868ba69","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void writeSource(List<SourceLineDoc> lines, int from, JsonWriter json) {\n    json.name(\"sources\").beginArray();\n    for (SourceLineDoc line: lines) {\n      json.beginObject()\n        .prop(\"line\", line.line())\n        .prop(\"code\", htmlSourceDecorator.getDecoratedSourceAsHtml(line.source(), line.highlighting(), line.symbols()))\n        .prop(\"scmAuthor\", line.scmAuthor())\n        .prop(\"scmRevision\", line.scmRevision());\n      Date scmDate = line.scmDate();\n      json.prop(\"scmDate\", scmDate == null ? null : DateUtils.formatDateTime(scmDate));\n      json.prop(\"lineHits\", line.overallLineHits())\n        .prop(\"conditions\", line.overallConditions())\n        .prop(\"coveredConditions\", line.overallCoveredConditions());\n      if (! line.duplications().isEmpty()) {\n        json.prop(\"duplicated\", true);\n      }\n      json.endObject();\n    }\n    json.endArray();\n  }","id":105446,"modified_method":"private void writeSource(List<SourceLineDoc> lines, int from, JsonWriter json) {\n    json.name(\"sources\").beginArray();\n    for (SourceLineDoc line: lines) {\n      json.beginObject()\n        .prop(\"line\", line.line())\n        .prop(\"code\", htmlSourceDecorator.getDecoratedSourceAsHtml(line.source(), line.highlighting(), line.symbols()))\n        .prop(\"scmAuthor\", line.scmAuthor())\n        .prop(\"scmRevision\", line.scmRevision());\n      Date scmDate = line.scmDate();\n      json.prop(\"scmDate\", scmDate == null ? null : DateUtils.formatDateTime(scmDate));\n      json.prop(\"lineHits\", line.utLineHits())\n        .prop(\"conditions\", line.utConditions())\n        .prop(\"coveredConditions\", line.utCoveredConditions())\n        .prop(\"itLineHits\", line.itLineHits())\n        .prop(\"itConditions\", line.itConditions())\n        .prop(\"itCoveredConditions\", line.itCoveredConditions());\n      if (! line.duplications().isEmpty()) {\n        json.prop(\"duplicated\", true);\n      }\n      json.endObject();\n    }\n    json.endArray();\n  }","commit_id":"f4026e9557e44004305a9a0389dd5fe6fe14c305","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"void define(WebService.NewController controller) {\n    WebService.NewAction action = controller.createAction(\"lines\")\n      .setDescription(\"Show source code with line oriented info. Require See Source Code permission on file's project<br/>\" +\n        \"Each element of the result array is an object which contains:\" +\n        \"<ol>\" +\n        \"<li>Line number<\/li>\" +\n        \"<li>Content of the line<\/li>\" +\n        \"<li>Author of the line (from SCM information)<\/li>\" +\n        \"<li>Revision of the line (from SCM information)<\/li>\" +\n        \"<li>Last commit date of the line (from SCM information)<\/li>\" +\n        \"<\/ol>\")\n      .setSince(\"5.0\")\n      .setInternal(true)\n      .setResponseExample(Resources.getResource(getClass(), \"example-lines.json\"))\n      .setHandler(this);\n\n    action\n      .createParam(\"uuid\")\n      .setRequired(true)\n      .setDescription(\"File uuid\")\n      .setExampleValue(\"f333aab4-7e3a-4d70-87e1-f4c491f05e5c\");\n\n    action\n      .createParam(\"from\")\n      .setDescription(\"First line to return. Starts at 1\")\n      .setExampleValue(\"10\")\n      .setDefaultValue(\"1\");\n\n    action\n      .createParam(\"to\")\n      .setDescription(\"Last line to return (inclusive)\")\n      .setExampleValue(\"20\");\n  }","id":105447,"modified_method":"void define(WebService.NewController controller) {\n    WebService.NewAction action = controller.createAction(\"lines\")\n      .setDescription(\"Show source code with line oriented info. Require See Source Code permission on file's project<br/>\" +\n        \"Each element of the result array is an object which contains:\" +\n        \"<ol>\" +\n        \"<li>Line number<\/li>\" +\n        \"<li>Content of the line<\/li>\" +\n        \"<li>Author of the line (from SCM information)<\/li>\" +\n        \"<li>Revision of the line (from SCM information)<\/li>\" +\n        \"<li>Last commit date of the line (from SCM information)<\/li>\" +\n        \"<li>Line hits from unit test coverage<\/li>\" +\n        \"<li>Number of conditions to cover in unit tests<\/li>\" +\n        \"<li>Number of conditions covered by unit tests<\/li>\" +\n        \"<li>Line hits from integration test coverage<\/li>\" +\n        \"<li>Number of conditions to cover in integration tests<\/li>\" +\n        \"<li>Number of conditions covered by integration tests<\/li>\" +\n        \"<\/ol>\")\n      .setSince(\"5.0\")\n      .setInternal(true)\n      .setResponseExample(Resources.getResource(getClass(), \"example-lines.json\"))\n      .setHandler(this);\n\n    action\n      .createParam(\"uuid\")\n      .setRequired(true)\n      .setDescription(\"File uuid\")\n      .setExampleValue(\"f333aab4-7e3a-4d70-87e1-f4c491f05e5c\");\n\n    action\n      .createParam(\"from\")\n      .setDescription(\"First line to return. Starts at 1\")\n      .setExampleValue(\"10\")\n      .setDefaultValue(\"1\");\n\n    action\n      .createParam(\"to\")\n      .setDescription(\"Last line to return (inclusive)\")\n      .setExampleValue(\"20\");\n  }","commit_id":"f4026e9557e44004305a9a0389dd5fe6fe14c305","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void show_source_with_from_and_to_params() throws Exception {\n    String fileUuid = \"efgh\";\n    Map<String, Object> fieldMap = Maps.newHashMap();\n    fieldMap.put(SourceLineIndexDefinition.FIELD_PROJECT_UUID, \"abcd\");\n    fieldMap.put(SourceLineIndexDefinition.FIELD_FILE_UUID, \"efgh\");\n    fieldMap.put(SourceLineIndexDefinition.FIELD_LINE, 3);\n    fieldMap.put(SourceLineIndexDefinition.FIELD_SCM_REVISION, \"cafebabe\");\n    fieldMap.put(SourceLineIndexDefinition.FIELD_SCM_DATE, null);\n    fieldMap.put(SourceLineIndexDefinition.FIELD_SCM_AUTHOR, \"polop\");\n    fieldMap.put(SourceLineIndexDefinition.FIELD_SOURCE, \"}\");\n    fieldMap.put(SourceLineIndexDefinition.FIELD_HIGHLIGHTING, \"\");\n    fieldMap.put(SourceLineIndexDefinition.FIELD_SYMBOLS, \"\");\n    fieldMap.put(SourceLineIndexDefinition.FIELD_OVERALL_LINE_HITS, null);\n    fieldMap.put(SourceLineIndexDefinition.FIELD_OVERALL_CONDITIONS, null);\n    fieldMap.put(SourceLineIndexDefinition.FIELD_OVERALL_COVERED_CONDITIONS, null);\n    fieldMap.put(SourceLineIndexDefinition.FIELD_DUPLICATIONS, null);\n    fieldMap.put(BaseNormalizer.UPDATED_AT_FIELD, new Date());\n\n    String componentKey = \"componentKey\";\n    when(componentService.getByUuid(fileUuid)).thenReturn(new ComponentDto().setKey(componentKey));\n    MockUserSession.set().setLogin(\"login\").addComponentPermission(UserRole.CODEVIEWER, \"polop\", componentKey);\n\n    when(sourceLineIndex.getLines(fileUuid, 3, 3)).thenReturn(newArrayList(\n      new SourceLineDoc(fieldMap)\n    ));\n    WsTester.TestRequest request = tester\n      .newGetRequest(\"api/sources\", \"lines\")\n      .setParam(\"uuid\", fileUuid)\n      .setParam(\"from\", \"3\")\n      .setParam(\"to\", \"3\");\n    request.execute().assertJson(getClass(), \"show_source_with_params_from_and_to.json\");\n  }","id":105448,"modified_method":"@Test\n  public void show_source_with_from_and_to_params() throws Exception {\n    String fileUuid = \"efgh\";\n    Map<String, Object> fieldMap = Maps.newHashMap();\n    fieldMap.put(SourceLineIndexDefinition.FIELD_PROJECT_UUID, \"abcd\");\n    fieldMap.put(SourceLineIndexDefinition.FIELD_FILE_UUID, \"efgh\");\n    fieldMap.put(SourceLineIndexDefinition.FIELD_LINE, 3);\n    fieldMap.put(SourceLineIndexDefinition.FIELD_SCM_REVISION, \"cafebabe\");\n    fieldMap.put(SourceLineIndexDefinition.FIELD_SCM_DATE, null);\n    fieldMap.put(SourceLineIndexDefinition.FIELD_SCM_AUTHOR, \"polop\");\n    fieldMap.put(SourceLineIndexDefinition.FIELD_SOURCE, \"}\");\n    fieldMap.put(SourceLineIndexDefinition.FIELD_HIGHLIGHTING, \"\");\n    fieldMap.put(SourceLineIndexDefinition.FIELD_SYMBOLS, \"\");\n    fieldMap.put(SourceLineIndexDefinition.FIELD_UT_LINE_HITS, null);\n    fieldMap.put(SourceLineIndexDefinition.FIELD_UT_CONDITIONS, null);\n    fieldMap.put(SourceLineIndexDefinition.FIELD_UT_COVERED_CONDITIONS, null);\n    fieldMap.put(SourceLineIndexDefinition.FIELD_IT_LINE_HITS, null);\n    fieldMap.put(SourceLineIndexDefinition.FIELD_IT_CONDITIONS, null);\n    fieldMap.put(SourceLineIndexDefinition.FIELD_IT_COVERED_CONDITIONS, null);\n    fieldMap.put(SourceLineIndexDefinition.FIELD_DUPLICATIONS, null);\n    fieldMap.put(BaseNormalizer.UPDATED_AT_FIELD, new Date());\n\n    String componentKey = \"componentKey\";\n    when(componentService.getByUuid(fileUuid)).thenReturn(new ComponentDto().setKey(componentKey));\n    MockUserSession.set().setLogin(\"login\").addComponentPermission(UserRole.CODEVIEWER, \"polop\", componentKey);\n\n    when(sourceLineIndex.getLines(fileUuid, 3, 3)).thenReturn(newArrayList(\n      new SourceLineDoc(fieldMap)\n    ));\n    WsTester.TestRequest request = tester\n      .newGetRequest(\"api/sources\", \"lines\")\n      .setParam(\"uuid\", fileUuid)\n      .setParam(\"from\", \"3\")\n      .setParam(\"to\", \"3\");\n    request.execute().assertJson(getClass(), \"show_source_with_params_from_and_to.json\");\n  }","commit_id":"f4026e9557e44004305a9a0389dd5fe6fe14c305","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void show_source() throws Exception {\n    String componentUuid = \"efgh\";\n    Date updatedAt = new Date();\n    String scmDate = \"2014-01-01T12:34:56.789Z\";\n    SourceLineDoc line1 = new SourceLineDoc(ImmutableMap.<String, Object>builder()\n      .put(SourceLineIndexDefinition.FIELD_PROJECT_UUID, \"abcd\")\n      .put(SourceLineIndexDefinition.FIELD_FILE_UUID, \"efgh\")\n      .put(SourceLineIndexDefinition.FIELD_LINE, 1)\n      .put(SourceLineIndexDefinition.FIELD_SCM_REVISION, \"cafebabe\")\n      .put(SourceLineIndexDefinition.FIELD_SCM_DATE, scmDate)\n      .put(SourceLineIndexDefinition.FIELD_SCM_AUTHOR, \"polop\")\n      .put(SourceLineIndexDefinition.FIELD_SOURCE, \"class Polop {\")\n      .put(SourceLineIndexDefinition.FIELD_HIGHLIGHTING, \"h1\")\n      .put(SourceLineIndexDefinition.FIELD_SYMBOLS, \"palap\")\n      .put(SourceLineIndexDefinition.FIELD_OVERALL_LINE_HITS, 3)\n      .put(SourceLineIndexDefinition.FIELD_OVERALL_CONDITIONS, 2)\n      .put(SourceLineIndexDefinition.FIELD_OVERALL_COVERED_CONDITIONS, 1)\n      .put(SourceLineIndexDefinition.FIELD_DUPLICATIONS, ImmutableList.of())\n      .put(BaseNormalizer.UPDATED_AT_FIELD, updatedAt)\n      .build());\n    SourceLineDoc line2 = new SourceLineDoc(ImmutableMap.<String, Object>builder()\n      .put(SourceLineIndexDefinition.FIELD_PROJECT_UUID, \"abcd\")\n      .put(SourceLineIndexDefinition.FIELD_FILE_UUID, \"efgh\")\n      .put(SourceLineIndexDefinition.FIELD_LINE, 2)\n      .put(SourceLineIndexDefinition.FIELD_SCM_REVISION, \"cafebabe\")\n      .put(SourceLineIndexDefinition.FIELD_SCM_DATE, scmDate)\n      .put(SourceLineIndexDefinition.FIELD_SCM_AUTHOR, \"polop\")\n      .put(SourceLineIndexDefinition.FIELD_SOURCE, \"  // Empty\")\n      .put(SourceLineIndexDefinition.FIELD_HIGHLIGHTING, \"h2\")\n      .put(SourceLineIndexDefinition.FIELD_SYMBOLS, \"pulup\")\n      .put(SourceLineIndexDefinition.FIELD_OVERALL_LINE_HITS, 3)\n      .put(SourceLineIndexDefinition.FIELD_OVERALL_CONDITIONS, 2)\n      .put(SourceLineIndexDefinition.FIELD_OVERALL_COVERED_CONDITIONS, 1)\n      .put(SourceLineIndexDefinition.FIELD_DUPLICATIONS, ImmutableList.of(1))\n      .put(BaseNormalizer.UPDATED_AT_FIELD, updatedAt)\n      .build());\n    SourceLineDoc line3 = new SourceLineDoc(ImmutableMap.<String, Object>builder()\n      .put(SourceLineIndexDefinition.FIELD_PROJECT_UUID, \"abcd\")\n      .put(SourceLineIndexDefinition.FIELD_FILE_UUID, \"efgh\")\n      .put(SourceLineIndexDefinition.FIELD_LINE, 3)\n      .put(SourceLineIndexDefinition.FIELD_SCM_REVISION, \"cafebabe\")\n      .put(SourceLineIndexDefinition.FIELD_SCM_DATE, scmDate)\n      .put(SourceLineIndexDefinition.FIELD_SCM_AUTHOR, \"polop\")\n      .put(SourceLineIndexDefinition.FIELD_SOURCE, \"}\")\n      .put(SourceLineIndexDefinition.FIELD_HIGHLIGHTING, \"h3\")\n      .put(SourceLineIndexDefinition.FIELD_SYMBOLS, \"pylyp\")\n      .put(SourceLineIndexDefinition.FIELD_OVERALL_LINE_HITS, 3)\n      .put(SourceLineIndexDefinition.FIELD_OVERALL_CONDITIONS, 2)\n      .put(SourceLineIndexDefinition.FIELD_OVERALL_COVERED_CONDITIONS, 1)\n      .put(SourceLineIndexDefinition.FIELD_DUPLICATIONS, ImmutableList.of())\n      .put(BaseNormalizer.UPDATED_AT_FIELD, updatedAt)\n      .build());\n    when(sourceLineIndex.getLines(eq(componentUuid), anyInt(), anyInt())).thenReturn(newArrayList(\n      line1,\n      line2,\n      line3\n    ));\n\n    String componentKey = \"componentKey\";\n    when(componentService.getByUuid(componentUuid)).thenReturn(new ComponentDto().setKey(componentKey));\n    MockUserSession.set().setLogin(\"login\").addComponentPermission(UserRole.CODEVIEWER, \"polop\", componentKey);\n\n    WsTester.TestRequest request = tester.newGetRequest(\"api/sources\", \"lines\").setParam(\"uuid\", componentUuid);\n    // Using non-strict match b/c of dates\n    request.execute().assertJson(getClass(), \"show_source.json\", false);\n  }","id":105449,"modified_method":"@Test\n  public void show_source() throws Exception {\n    String componentUuid = \"efgh\";\n    Date updatedAt = new Date();\n    String scmDate = \"2014-01-01T12:34:56.789Z\";\n    Map<String, Object> map1 = Maps.newHashMap();\n    map1.put(SourceLineIndexDefinition.FIELD_PROJECT_UUID, \"abcd\");\n    map1.put(SourceLineIndexDefinition.FIELD_FILE_UUID, \"efgh\");\n    map1.put(SourceLineIndexDefinition.FIELD_LINE, 1);\n    map1.put(SourceLineIndexDefinition.FIELD_SCM_REVISION, \"cafebabe\");\n    map1.put(SourceLineIndexDefinition.FIELD_SCM_DATE, scmDate);\n    map1.put(SourceLineIndexDefinition.FIELD_SCM_AUTHOR, \"polop\");\n    map1.put(SourceLineIndexDefinition.FIELD_SOURCE, \"class Polop {\");\n    map1.put(SourceLineIndexDefinition.FIELD_HIGHLIGHTING, \"h1\");\n    map1.put(SourceLineIndexDefinition.FIELD_SYMBOLS, \"palap\");\n    map1.put(SourceLineIndexDefinition.FIELD_UT_LINE_HITS, 3);\n    map1.put(SourceLineIndexDefinition.FIELD_UT_CONDITIONS, 2);\n    map1.put(SourceLineIndexDefinition.FIELD_UT_COVERED_CONDITIONS, 1);\n    map1.put(SourceLineIndexDefinition.FIELD_IT_LINE_HITS, 3);\n    map1.put(SourceLineIndexDefinition.FIELD_IT_CONDITIONS, 2);\n    map1.put(SourceLineIndexDefinition.FIELD_IT_COVERED_CONDITIONS, 1);\n    map1.put(SourceLineIndexDefinition.FIELD_DUPLICATIONS, ImmutableList.of());\n    map1.put(BaseNormalizer.UPDATED_AT_FIELD, updatedAt);\n    SourceLineDoc line1 = new SourceLineDoc(map1);\n    Map<String, Object> map2 = Maps.newHashMap();\n    map2.put(SourceLineIndexDefinition.FIELD_PROJECT_UUID, \"abcd\");\n    map2.put(SourceLineIndexDefinition.FIELD_FILE_UUID, \"efgh\");\n    map2.put(SourceLineIndexDefinition.FIELD_LINE, 2);\n    map2.put(SourceLineIndexDefinition.FIELD_SCM_REVISION, \"cafebabe\");\n    map2.put(SourceLineIndexDefinition.FIELD_SCM_DATE, scmDate);\n    map2.put(SourceLineIndexDefinition.FIELD_SCM_AUTHOR, \"polop\");\n    map2.put(SourceLineIndexDefinition.FIELD_SOURCE, \"  // Empty\");\n    map2.put(SourceLineIndexDefinition.FIELD_HIGHLIGHTING, \"h2\");\n    map2.put(SourceLineIndexDefinition.FIELD_SYMBOLS, \"pulup\");\n    map2.put(SourceLineIndexDefinition.FIELD_UT_LINE_HITS, 3);\n    map2.put(SourceLineIndexDefinition.FIELD_UT_CONDITIONS, 2);\n    map2.put(SourceLineIndexDefinition.FIELD_UT_COVERED_CONDITIONS, 1);\n    map2.put(SourceLineIndexDefinition.FIELD_IT_LINE_HITS, null);\n    map2.put(SourceLineIndexDefinition.FIELD_IT_CONDITIONS, null);\n    map2.put(SourceLineIndexDefinition.FIELD_IT_COVERED_CONDITIONS, null);\n    map2.put(SourceLineIndexDefinition.FIELD_DUPLICATIONS, ImmutableList.of(1));\n    map2.put(BaseNormalizer.UPDATED_AT_FIELD, updatedAt);\n    SourceLineDoc line2 = new SourceLineDoc(map2);\n    Map<String, Object> map3 = Maps.newHashMap();\n    map3.put(SourceLineIndexDefinition.FIELD_PROJECT_UUID, \"abcd\");\n    map3.put(SourceLineIndexDefinition.FIELD_FILE_UUID, \"efgh\");\n    map3.put(SourceLineIndexDefinition.FIELD_LINE, 3);\n    map3.put(SourceLineIndexDefinition.FIELD_SCM_REVISION, \"cafebabe\");\n    map3.put(SourceLineIndexDefinition.FIELD_SCM_DATE, scmDate);\n    map3.put(SourceLineIndexDefinition.FIELD_SCM_AUTHOR, \"polop\");\n    map3.put(SourceLineIndexDefinition.FIELD_SOURCE, \"}\");\n    map3.put(SourceLineIndexDefinition.FIELD_HIGHLIGHTING, \"h3\");\n    map3.put(SourceLineIndexDefinition.FIELD_SYMBOLS, \"pylyp\");\n    map3.put(SourceLineIndexDefinition.FIELD_UT_LINE_HITS, null);\n    map3.put(SourceLineIndexDefinition.FIELD_UT_CONDITIONS, null);\n    map3.put(SourceLineIndexDefinition.FIELD_UT_COVERED_CONDITIONS, null);\n    map3.put(SourceLineIndexDefinition.FIELD_IT_LINE_HITS, 3);\n    map3.put(SourceLineIndexDefinition.FIELD_IT_CONDITIONS, 2);\n    map3.put(SourceLineIndexDefinition.FIELD_IT_COVERED_CONDITIONS, 1);\n    map3.put(SourceLineIndexDefinition.FIELD_DUPLICATIONS, ImmutableList.of());\n    map3.put(BaseNormalizer.UPDATED_AT_FIELD, updatedAt);\n    SourceLineDoc line3 = new SourceLineDoc(map3);\n    when(sourceLineIndex.getLines(eq(componentUuid), anyInt(), anyInt())).thenReturn(newArrayList(\n      line1,\n      line2,\n      line3\n    ));\n\n    String componentKey = \"componentKey\";\n    when(componentService.getByUuid(componentUuid)).thenReturn(new ComponentDto().setKey(componentKey));\n    MockUserSession.set().setLogin(\"login\").addComponentPermission(UserRole.CODEVIEWER, \"polop\", componentKey);\n\n    WsTester.TestRequest request = tester.newGetRequest(\"api/sources\", \"lines\").setParam(\"uuid\", componentUuid);\n    // Using non-strict match b/c of dates\n    request.execute().assertJson(getClass(), \"show_source.json\", false);\n  }","commit_id":"f4026e9557e44004305a9a0389dd5fe6fe14c305","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void writeJsonIssues(JsonWriter json, Set<RuleKey> ruleKeys, Set<String> logins) throws IOException {\n    json.name(\"issues\").beginArray();\n    for (DefaultIssue issue : getIssues()) {\n      if (issue.resolution() == null && componentSelector.register(issue)) {\n        json\n          .beginObject()\n          .prop(\"key\", issue.key())\n          .prop(\"component\", issue.componentKey())\n          .prop(\"line\", issue.line())\n          .prop(\"message\", issue.message())\n          .prop(\"severity\", issue.severity())\n          .prop(\"rule\", issue.ruleKey().toString())\n          .prop(\"status\", issue.status())\n          .prop(\"resolution\", issue.resolution())\n          .prop(\"isNew\", issue.isNew())\n          .prop(\"reporter\", issue.reporter())\n          .prop(\"assignee\", issue.assignee())\n          .prop(\"effortToFix\", issue.effortToFix())\n          .propDateTime(\"creationDate\", issue.creationDate())\n          .propDateTime(\"updateDate\", issue.updateDate())\n          .propDateTime(\"closeDate\", issue.closeDate());\n        if (issue.reporter() != null) {\n          logins.add(issue.reporter());\n        }\n        if (issue.assignee() != null) {\n          logins.add(issue.assignee());\n        }\n        json.endObject();\n        ruleKeys.add(issue.ruleKey());\n      }\n    }\n    json.endArray();\n  }","id":105450,"modified_method":"private void writeJsonIssues(JsonWriter json, Set<RuleKey> ruleKeys, Set<String> logins) throws IOException {\n    json.name(\"issues\").beginArray();\n    for (DefaultIssue issue : getIssues()) {\n      if (issue.resolution() == null) {\n        json\n          .beginObject()\n          .prop(\"key\", issue.key())\n          .prop(\"component\", issue.componentKey())\n          .prop(\"line\", issue.line())\n          .prop(\"message\", issue.message())\n          .prop(\"severity\", issue.severity())\n          .prop(\"rule\", issue.ruleKey().toString())\n          .prop(\"status\", issue.status())\n          .prop(\"resolution\", issue.resolution())\n          .prop(\"isNew\", issue.isNew())\n          .prop(\"reporter\", issue.reporter())\n          .prop(\"assignee\", issue.assignee())\n          .prop(\"effortToFix\", issue.effortToFix())\n          .propDateTime(\"creationDate\", issue.creationDate())\n          .propDateTime(\"updateDate\", issue.updateDate())\n          .propDateTime(\"closeDate\", issue.closeDate());\n        if (issue.reporter() != null) {\n          logins.add(issue.reporter());\n        }\n        if (issue.assignee() != null) {\n          logins.add(issue.assignee());\n        }\n        json.endObject();\n        ruleKeys.add(issue.ruleKey());\n      }\n    }\n    json.endArray();\n  }","commit_id":"c5dddfa9b31597b24a969df675b04f9f748239e6","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@VisibleForTesting\n  JsonReport(Settings settings, ModuleFileSystem fileSystem, Server server, RuleFinder ruleFinder, IssueCache issueCache,\n             EventBus eventBus, ComponentSelector componentSelector, AnalysisMode analysisMode, UserFinder userFinder) {\n    this.settings = settings;\n    this.fileSystem = fileSystem;\n    this.server = server;\n    this.ruleFinder = ruleFinder;\n    this.issueCache = issueCache;\n    this.eventBus = eventBus;\n    this.componentSelector = componentSelector;\n    this.analysisMode = analysisMode;\n    this.userFinder = userFinder;\n  }","id":105451,"modified_method":"public JsonReport(Settings settings, ModuleFileSystem fileSystem, Server server, RuleFinder ruleFinder, IssueCache issueCache,\n    EventBus eventBus, AnalysisMode analysisMode, UserFinder userFinder, Project rootModule, InputFileCache fileCache) {\n    this.settings = settings;\n    this.fileSystem = fileSystem;\n    this.server = server;\n    this.ruleFinder = ruleFinder;\n    this.issueCache = issueCache;\n    this.eventBus = eventBus;\n    this.analysisMode = analysisMode;\n    this.userFinder = userFinder;\n    this.rootModule = rootModule;\n    this.fileCache = fileCache;\n  }","commit_id":"c5dddfa9b31597b24a969df675b04f9f748239e6","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void writeJsonComponents(JsonWriter json) throws IOException {\n    json.name(\"components\").beginArray();\n    for (String componentKey : componentSelector.componentKeys()) {\n      json\n        .beginObject()\n        .prop(\"key\", componentKey)\n        .endObject();\n    }\n    json.endArray();\n  }","id":105452,"modified_method":"private void writeJsonComponents(JsonWriter json) throws IOException {\n    json.name(\"components\").beginArray();\n    // Dump modules\n    writeJsonModuleComponents(json, rootModule);\n    // TODO we need to dump directories\n    for (InputFile inputFile : fileCache.all()) {\n      json\n        .beginObject()\n        .prop(\"key\", inputFile.attribute(DefaultInputFile.ATTRIBUTE_COMPONENT_KEY))\n        .prop(\"path\", inputFile.path())\n        .prop(\"moduleKey\", StringUtils.substringBeforeLast(inputFile.attribute(DefaultInputFile.ATTRIBUTE_COMPONENT_KEY), \":\"))\n        .prop(\"status\", inputFile.attribute(InputFile.ATTRIBUTE_STATUS))\n        .endObject();\n    }\n    json.endArray();\n  }","commit_id":"c5dddfa9b31597b24a969df675b04f9f748239e6","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@VisibleForTesting\n  void writeJson(Writer writer) {\n    try {\n      JsonWriter json = JsonWriter.of(writer);\n      json.beginObject();\n      json.prop(\"version\", server.getVersion());\n\n      Set<RuleKey> ruleKeys = newHashSet();\n      Set<String> userLogins = newHashSet();\n      componentSelector.init();\n      writeJsonIssues(json, ruleKeys, userLogins);\n      writeJsonComponents(json);\n      writeJsonRules(json, ruleKeys);\n      List<User> users = userFinder.findByLogins(new ArrayList<String>(userLogins));\n      writeUsers(json, users);\n      json.endObject().close();\n\n    } catch (IOException e) {\n      throw new SonarException(\"Unable to write JSON report\", e);\n    }\n  }","id":105453,"modified_method":"@VisibleForTesting\n  void writeJson(Writer writer) {\n    try {\n      JsonWriter json = JsonWriter.of(writer);\n      json.beginObject();\n      json.prop(\"version\", server.getVersion());\n\n      Set<RuleKey> ruleKeys = newHashSet();\n      Set<String> userLogins = newHashSet();\n      writeJsonIssues(json, ruleKeys, userLogins);\n      writeJsonComponents(json);\n      writeJsonRules(json, ruleKeys);\n      List<User> users = userFinder.findByLogins(new ArrayList<String>(userLogins));\n      writeUsers(json, users);\n      json.endObject().close();\n\n    } catch (IOException e) {\n      throw new SonarException(\"Unable to write JSON report\", e);\n    }\n  }","commit_id":"c5dddfa9b31597b24a969df675b04f9f748239e6","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_write_json() throws Exception {\n    DefaultIssue issue = new DefaultIssue()\n      .setKey(\"200\")\n      .setComponentKey(\"struts:/src/main/java/org/apache/struts/Action.java\")\n      .setRuleKey(RuleKey.of(\"squid\", \"AvoidCycles\"))\n      .setMessage(\"There are 2 cycles\")\n      .setSeverity(\"MINOR\")\n      .setStatus(Issue.STATUS_OPEN)\n      .setResolution(null)\n      .setLine(1)\n      .setEffortToFix(3.14)\n      .setReporter(\"julien\")\n      .setAssignee(\"simon\")\n      .setCreationDate(SIMPLE_DATE_FORMAT.parse(\"2013-04-24\"))\n      .setUpdateDate(SIMPLE_DATE_FORMAT.parse(\"2013-04-25\"))\n      .setNew(false);\n    when(ruleFinder.findByKey(RuleKey.of(\"squid\", \"AvoidCycles\"))).thenReturn(new Rule().setName(\"Avoid Cycles\"));\n    when(jsonReport.getIssues()).thenReturn(Lists.<DefaultIssue>newArrayList(issue));\n    DefaultUser user1 = new DefaultUser().setLogin(\"julien\").setName(\"Julien\");\n    DefaultUser user2 = new DefaultUser().setLogin(\"simon\").setName(\"Simon\");\n    when(userFinder.findByLogins(eq(Arrays.asList(\"julien\", \"simon\")))).thenReturn(Lists.<User>newArrayList(user1, user2));\n\n    StringWriter writer = new StringWriter();\n    jsonReport.writeJson(writer);\n\n    JSONAssert.assertEquals(TestUtils.getResourceContent(\"/org/sonar/batch/scan/report/JsonReportTest/report.json\"),\n      writer.toString(), false);\n  }","id":105454,"modified_method":"@Test\n  public void should_write_json() throws Exception {\n    DefaultIssue issue = new DefaultIssue()\n      .setKey(\"200\")\n      .setComponentKey(\"struts:src/main/java/org/apache/struts/Action.java\")\n      .setRuleKey(RuleKey.of(\"squid\", \"AvoidCycles\"))\n      .setMessage(\"There are 2 cycles\")\n      .setSeverity(\"MINOR\")\n      .setStatus(Issue.STATUS_OPEN)\n      .setResolution(null)\n      .setLine(1)\n      .setEffortToFix(3.14)\n      .setReporter(\"julien\")\n      .setAssignee(\"simon\")\n      .setCreationDate(SIMPLE_DATE_FORMAT.parse(\"2013-04-24\"))\n      .setUpdateDate(SIMPLE_DATE_FORMAT.parse(\"2013-04-25\"))\n      .setNew(false);\n    when(ruleFinder.findByKey(RuleKey.of(\"squid\", \"AvoidCycles\"))).thenReturn(new Rule().setName(\"Avoid Cycles\"));\n    when(jsonReport.getIssues()).thenReturn(Lists.<DefaultIssue>newArrayList(issue));\n    DefaultUser user1 = new DefaultUser().setLogin(\"julien\").setName(\"Julien\");\n    DefaultUser user2 = new DefaultUser().setLogin(\"simon\").setName(\"Simon\");\n    when(userFinder.findByLogins(eq(Arrays.asList(\"julien\", \"simon\")))).thenReturn(Lists.<User>newArrayList(user1, user2));\n\n    StringWriter writer = new StringWriter();\n    jsonReport.writeJson(writer);\n\n    JSONAssert.assertEquals(TestUtils.getResourceContent(\"/org/sonar/batch/scan/report/JsonReportTest/report.json\"),\n      writer.toString(), false);\n  }","commit_id":"c5dddfa9b31597b24a969df675b04f9f748239e6","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_exclude_resolved_issues() throws Exception {\n    RuleKey ruleKey = RuleKey.of(\"squid\", \"AvoidCycles\");\n    DefaultIssue issue = new DefaultIssue()\n      .setKey(\"200\")\n      .setComponentKey(\"struts:/src/main/java/org/apache/struts/Action.java\")\n      .setRuleKey(ruleKey)\n      .setStatus(Issue.STATUS_CLOSED)\n      .setResolution(Issue.RESOLUTION_FIXED)\n      .setCreationDate(SIMPLE_DATE_FORMAT.parse(\"2013-04-24\"))\n      .setUpdateDate(SIMPLE_DATE_FORMAT.parse(\"2013-04-25\"))\n      .setCloseDate(SIMPLE_DATE_FORMAT.parse(\"2013-04-26\"))\n      .setNew(false);\n    when(ruleFinder.findByKey(ruleKey)).thenReturn(Rule.create(ruleKey.repository(), ruleKey.rule()).setName(\"Avoid Cycles\"));\n    when(jsonReport.getIssues()).thenReturn(Lists.<DefaultIssue>newArrayList(issue));\n\n    StringWriter writer = new StringWriter();\n    jsonReport.writeJson(writer);\n\n    JSONAssert.assertEquals(TestUtils.getResourceContent(\"/org/sonar/batch/scan/report/JsonReportTest/report-without-resolved-issues.json\"),\n      writer.toString(), false);\n  }","id":105455,"modified_method":"@Test\n  public void should_exclude_resolved_issues() throws Exception {\n    RuleKey ruleKey = RuleKey.of(\"squid\", \"AvoidCycles\");\n    DefaultIssue issue = new DefaultIssue()\n      .setKey(\"200\")\n      .setComponentKey(\"struts:src/main/java/org/apache/struts/Action.java\")\n      .setRuleKey(ruleKey)\n      .setStatus(Issue.STATUS_CLOSED)\n      .setResolution(Issue.RESOLUTION_FIXED)\n      .setCreationDate(SIMPLE_DATE_FORMAT.parse(\"2013-04-24\"))\n      .setUpdateDate(SIMPLE_DATE_FORMAT.parse(\"2013-04-25\"))\n      .setCloseDate(SIMPLE_DATE_FORMAT.parse(\"2013-04-26\"))\n      .setNew(false);\n    when(ruleFinder.findByKey(ruleKey)).thenReturn(Rule.create(ruleKey.repository(), ruleKey.rule()).setName(\"Avoid Cycles\"));\n    when(jsonReport.getIssues()).thenReturn(Lists.<DefaultIssue>newArrayList(issue));\n\n    StringWriter writer = new StringWriter();\n    jsonReport.writeJson(writer);\n\n    JSONAssert.assertEquals(TestUtils.getResourceContent(\"/org/sonar/batch/scan/report/JsonReportTest/report-without-resolved-issues.json\"),\n      writer.toString(), false);\n  }","commit_id":"c5dddfa9b31597b24a969df675b04f9f748239e6","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void setUp() {\n    SIMPLE_DATE_FORMAT.setTimeZone(TimeZone.getTimeZone(\"GMT+02:00\"));\n    when(resource.getEffectiveKey()).thenReturn(\"Action.java\");\n    when(server.getVersion()).thenReturn(\"3.6\");\n\n    settings = new Settings();\n    mode = mock(AnalysisMode.class);\n    when(mode.isPreview()).thenReturn(true);\n    userFinder = mock(UserFinder.class);\n    jsonReport = new JsonReport(settings, fileSystem, server, ruleFinder, issueCache, mock(EventBus.class), new DefaultComponentSelector(), mode, userFinder);\n  }","id":105456,"modified_method":"@Before\n  public void setUp() {\n    SIMPLE_DATE_FORMAT.setTimeZone(TimeZone.getTimeZone(\"GMT+02:00\"));\n    when(resource.getEffectiveKey()).thenReturn(\"Action.java\");\n    when(server.getVersion()).thenReturn(\"3.6\");\n\n    settings = new Settings();\n    mode = mock(AnalysisMode.class);\n    when(mode.isPreview()).thenReturn(true);\n    userFinder = mock(UserFinder.class);\n    InputFile inputFile = mock(InputFile.class);\n    when(inputFile.path()).thenReturn(\"src/main/java/org/apache/struts/Action.java\");\n    when(inputFile.attribute(DefaultInputFile.ATTRIBUTE_COMPONENT_KEY)).thenReturn(\"struts:src/main/java/org/apache/struts/Action.java\");\n    when(inputFile.attribute(InputFile.ATTRIBUTE_STATUS)).thenReturn(InputFile.STATUS_CHANGED);\n    InputFileCache fileCache = mock(InputFileCache.class);\n    when(fileCache.all()).thenReturn(Arrays.asList(inputFile));\n    Project rootModule = new Project(\"struts\");\n    Project moduleA = new Project(\"struts-core\");\n    moduleA.setParent(rootModule).setPath(\"core\");\n    Project moduleB = new Project(\"struts-ui\");\n    moduleB.setParent(rootModule).setPath(\"ui\");\n    jsonReport = new JsonReport(settings, fileSystem, server, ruleFinder, issueCache, mock(EventBus.class),\n      mode, userFinder, rootModule, fileCache);\n  }","commit_id":"c5dddfa9b31597b24a969df675b04f9f748239e6","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void addCoreComponents() {\n    ProjectDefinition moduleDefinition = getComponentByType(ProjectTree.class).getProjectDefinition(module);\n    add(\n      moduleDefinition,\n      module.getConfiguration(),\n      module,\n      ModuleSettings.class);\n\n    // hack to initialize commons-configuration before ExtensionProviders\n    getComponentByType(ModuleSettings.class);\n\n    add(\n      EventBus.class,\n      PhaseExecutor.class,\n      PhasesTimeProfiler.class,\n      UnsupportedProperties.class,\n      PhaseExecutor.getPhaseClasses(),\n      moduleDefinition.getContainerExtensions(),\n\n      // file system\n      FileExclusions.class,\n      ExclusionFilters.class,\n      DeprecatedFileFilters.class,\n      InputFileBuilderFactory.class,\n      StatusDetectionFactory.class,\n      LanguageDetectionFactory.class,\n      PreviousFileHashLoader.class,\n      FileIndex.class,\n      ComponentIndexer.class,\n      DefaultModuleLanguages.class,\n      FileSystemLogger.class,\n      DefaultProjectClasspath.class,\n      DefaultModuleFileSystem.class,\n      ModuleFileSystemInitializer.class,\n      ProjectFileSystemAdapter.class,\n\n      // the Snapshot component will be removed when asynchronous measures are improved (required for AsynchronousMeasureSensor)\n      getComponentByType(ResourcePersister.class).getSnapshot(module),\n\n      TimeMachineConfiguration.class,\n      DefaultSensorContext.class,\n      BatchExtensionDictionnary.class,\n      DefaultTimeMachine.class,\n      ViolationFilters.class,\n      IssueFilters.class,\n      MeasurementFilters.class,\n      ResourceFilters.class,\n\n      // rules\n      ModuleQProfiles.class,\n      new ActiveRulesProvider(),\n      new RulesProfileProvider(),\n      QProfileSensor.class,\n      CheckFactory.class,\n\n      // report\n      JsonReport.class,\n      ComponentSelectorFactory.class,\n\n      // issues\n      IssuableFactory.class,\n      ModuleIssues.class,\n\n      ScanPerspectives.class);\n  }","id":105457,"modified_method":"private void addCoreComponents() {\n    ProjectDefinition moduleDefinition = getComponentByType(ProjectTree.class).getProjectDefinition(module);\n    add(\n      moduleDefinition,\n      module.getConfiguration(),\n      module,\n      ModuleSettings.class);\n\n    // hack to initialize commons-configuration before ExtensionProviders\n    getComponentByType(ModuleSettings.class);\n\n    add(\n      EventBus.class,\n      PhaseExecutor.class,\n      PhasesTimeProfiler.class,\n      UnsupportedProperties.class,\n      PhaseExecutor.getPhaseClasses(),\n      moduleDefinition.getContainerExtensions(),\n\n      // file system\n      FileExclusions.class,\n      ExclusionFilters.class,\n      DeprecatedFileFilters.class,\n      InputFileBuilderFactory.class,\n      StatusDetectionFactory.class,\n      LanguageDetectionFactory.class,\n      PreviousFileHashLoader.class,\n      FileIndex.class,\n      ComponentIndexer.class,\n      DefaultModuleLanguages.class,\n      FileSystemLogger.class,\n      DefaultProjectClasspath.class,\n      DefaultModuleFileSystem.class,\n      ModuleFileSystemInitializer.class,\n      ProjectFileSystemAdapter.class,\n\n      // the Snapshot component will be removed when asynchronous measures are improved (required for AsynchronousMeasureSensor)\n      getComponentByType(ResourcePersister.class).getSnapshot(module),\n\n      TimeMachineConfiguration.class,\n      DefaultSensorContext.class,\n      BatchExtensionDictionnary.class,\n      DefaultTimeMachine.class,\n      ViolationFilters.class,\n      IssueFilters.class,\n      MeasurementFilters.class,\n      ResourceFilters.class,\n\n      // rules\n      ModuleQProfiles.class,\n      new ActiveRulesProvider(),\n      new RulesProfileProvider(),\n      QProfileSensor.class,\n      CheckFactory.class,\n\n      // report\n      JsonReport.class,\n\n      // issues\n      IssuableFactory.class,\n      ModuleIssues.class,\n\n      ScanPerspectives.class);\n  }","commit_id":"c5dddfa9b31597b24a969df675b04f9f748239e6","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n     * Send the sucker\n     */\n    public OutboundClientMessageOneShotJob(RouterContext ctx, ClientMessage msg) {\n        super(ctx);\n        _log = ctx.logManager().getLog(OutboundClientMessageOneShotJob.class);\n        \n        ctx.statManager().createFrequencyStat(\"client.sendMessageFailFrequency\", \"How often does a client fail to send a message?\", \"ClientMessages\", new long[] { 60*1000l, 60*60*1000l, 24*60*60*1000l });\n        ctx.statManager().createRateStat(\"client.sendMessageSize\", \"How large are messages sent by the client?\", \"ClientMessages\", new long[] { 60*1000l, 60*60*1000l, 24*60*60*1000l });\n        ctx.statManager().createRateStat(\"client.sendAckTime\", \"Message round trip time\", \"ClientMessages\", new long[] { 60*1000l, 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n        ctx.statManager().createRateStat(\"client.timeoutCongestionTunnel\", \"How lagged our tunnels are when a send times out?\", \"ClientMessages\", new long[] { 60*1000l, 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n        ctx.statManager().createRateStat(\"client.timeoutCongestionMessage\", \"How fast we process messages locally when a send times out?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n        ctx.statManager().createRateStat(\"client.timeoutCongestionInbound\", \"How much faster we are receiving data than our average bps when a send times out?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n        ctx.statManager().createRateStat(\"client.leaseSetFoundLocally\", \"How often we tried to look for a leaseSet and found it locally?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n        ctx.statManager().createRateStat(\"client.leaseSetFoundRemoteTime\", \"How long we tried to look for a remote leaseSet (when we succeeded)?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n        ctx.statManager().createRateStat(\"client.leaseSetFailedRemoteTime\", \"How long we tried to look for a remote leaseSet (when we failed)?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n        ctx.statManager().createRateStat(\"client.dispatchPrepareTime\", \"How long until we've queued up the dispatch job (since we started)?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n        ctx.statManager().createRateStat(\"client.dispatchTime\", \"How long until we've dispatched the message (since we started)?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n        ctx.statManager().createRateStat(\"client.dispatchSendTime\", \"How long the actual dispatching takes?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n        ctx.statManager().createRateStat(\"client.dispatchNoTunnels\", \"How long after start do we run out of tunnels to send/receive with?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n        ctx.statManager().createRateStat(\"client.dispatchNoACK\", \"Repeated message sends to a peer (no ack required)\", \"ClientMessages\", new long[] { 60*1000l, 5*60*1000l, 60*60*1000l });\n        long timeoutMs = OVERALL_TIMEOUT_MS_DEFAULT;\n        _clientMessage = msg;\n        _clientMessageId = msg.getMessageId();\n        _clientMessageSize = msg.getPayload().getSize();\n        _from = msg.getFromDestination();\n        _to = msg.getDestination();\n        _toString = _to.calculateHash().toBase64().substring(0,4);\n        _leaseSetLookupBegin = -1;\n        _start = getContext().clock().now();\n        \n        // use expiration requested by client if available, otherwise session config,\n        // otherwise router config, otherwise default\n        _overallExpiration = msg.getExpiration();\n        if (_overallExpiration > 0) {\n           _overallExpiration = Math.max(_overallExpiration, _start + OVERALL_TIMEOUT_MS_MIN);\n           _overallExpiration = Math.min(_overallExpiration, _start + OVERALL_TIMEOUT_MS_DEFAULT);\n           if (_log.shouldLog(Log.WARN))\n               _log.warn(\"Message Expiration (ms): \" + (_overallExpiration - _start));\n        } else {\n            String param = msg.getSenderConfig().getOptions().getProperty(OVERALL_TIMEOUT_MS_PARAM);\n            if (param == null)\n                param = ctx.router().getConfigSetting(OVERALL_TIMEOUT_MS_PARAM);\n            if (param != null) {\n                try {\n                    timeoutMs = Long.parseLong(param);\n                } catch (NumberFormatException nfe) {\n                    if (_log.shouldLog(Log.WARN))\n                        _log.warn(\"Invalid client message timeout specified [\" + param \n                                  + \"], defaulting to \" + OVERALL_TIMEOUT_MS_DEFAULT, nfe);\n                    timeoutMs = OVERALL_TIMEOUT_MS_DEFAULT;\n                }\n            }\n            _overallExpiration = timeoutMs + _start;\n           if (_log.shouldLog(Log.WARN))\n               _log.warn(\"Default Expiration (ms): \" + timeoutMs);\n        }\n        _finished = false;\n    }","id":105458,"modified_method":"/**\n     * Send the sucker\n     */\n    public OutboundClientMessageOneShotJob(RouterContext ctx, ClientMessage msg) {\n        super(ctx);\n        _log = ctx.logManager().getLog(OutboundClientMessageOneShotJob.class);\n        \n        synchronized (_initializeLock) {\n            if (!_initialized) {\n                SimpleScheduler.getInstance().addPeriodicEvent(new OCMOSJCacheCleaner(ctx), CLEAN_INTERVAL, CLEAN_INTERVAL);\n                ctx.statManager().createFrequencyStat(\"client.sendMessageFailFrequency\", \"How often does a client fail to send a message?\", \"ClientMessages\", new long[] { 60*1000l, 60*60*1000l, 24*60*60*1000l });\n                ctx.statManager().createRateStat(\"client.sendMessageSize\", \"How large are messages sent by the client?\", \"ClientMessages\", new long[] { 60*1000l, 60*60*1000l, 24*60*60*1000l });\n                ctx.statManager().createRateStat(\"client.sendAckTime\", \"Message round trip time\", \"ClientMessages\", new long[] { 60*1000l, 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n                ctx.statManager().createRateStat(\"client.timeoutCongestionTunnel\", \"How lagged our tunnels are when a send times out?\", \"ClientMessages\", new long[] { 60*1000l, 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n                ctx.statManager().createRateStat(\"client.timeoutCongestionMessage\", \"How fast we process messages locally when a send times out?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n                ctx.statManager().createRateStat(\"client.timeoutCongestionInbound\", \"How much faster we are receiving data than our average bps when a send times out?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n                ctx.statManager().createRateStat(\"client.leaseSetFoundLocally\", \"How often we tried to look for a leaseSet and found it locally?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n                ctx.statManager().createRateStat(\"client.leaseSetFoundRemoteTime\", \"How long we tried to look for a remote leaseSet (when we succeeded)?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n                ctx.statManager().createRateStat(\"client.leaseSetFailedRemoteTime\", \"How long we tried to look for a remote leaseSet (when we failed)?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n                ctx.statManager().createRateStat(\"client.dispatchPrepareTime\", \"How long until we've queued up the dispatch job (since we started)?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n                ctx.statManager().createRateStat(\"client.dispatchTime\", \"How long until we've dispatched the message (since we started)?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n                ctx.statManager().createRateStat(\"client.dispatchSendTime\", \"How long the actual dispatching takes?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n                ctx.statManager().createRateStat(\"client.dispatchNoTunnels\", \"How long after start do we run out of tunnels to send/receive with?\", \"ClientMessages\", new long[] { 5*60*1000l, 60*60*1000l, 24*60*60*1000l });\n                ctx.statManager().createRateStat(\"client.dispatchNoACK\", \"Repeated message sends to a peer (no ack required)\", \"ClientMessages\", new long[] { 60*1000l, 5*60*1000l, 60*60*1000l });\n                _initialized = true;\n            }\n        }\n        long timeoutMs = OVERALL_TIMEOUT_MS_DEFAULT;\n        _clientMessage = msg;\n        _clientMessageId = msg.getMessageId();\n        _clientMessageSize = msg.getPayload().getSize();\n        _from = msg.getFromDestination();\n        _to = msg.getDestination();\n        _toString = _to.calculateHash().toBase64().substring(0,4);\n        _leaseSetLookupBegin = -1;\n        _start = getContext().clock().now();\n        \n        // use expiration requested by client if available, otherwise session config,\n        // otherwise router config, otherwise default\n        _overallExpiration = msg.getExpiration();\n        if (_overallExpiration > 0) {\n           _overallExpiration = Math.max(_overallExpiration, _start + OVERALL_TIMEOUT_MS_MIN);\n           _overallExpiration = Math.min(_overallExpiration, _start + OVERALL_TIMEOUT_MS_DEFAULT);\n           if (_log.shouldLog(Log.WARN))\n               _log.warn(\"Message Expiration (ms): \" + (_overallExpiration - _start));\n        } else {\n            String param = msg.getSenderConfig().getOptions().getProperty(OVERALL_TIMEOUT_MS_PARAM);\n            if (param == null)\n                param = ctx.router().getConfigSetting(OVERALL_TIMEOUT_MS_PARAM);\n            if (param != null) {\n                try {\n                    timeoutMs = Long.parseLong(param);\n                } catch (NumberFormatException nfe) {\n                    if (_log.shouldLog(Log.WARN))\n                        _log.warn(\"Invalid client message timeout specified [\" + param \n                                  + \"], defaulting to \" + OVERALL_TIMEOUT_MS_DEFAULT, nfe);\n                    timeoutMs = OVERALL_TIMEOUT_MS_DEFAULT;\n                }\n            }\n            _overallExpiration = timeoutMs + _start;\n           if (_log.shouldLog(Log.WARN))\n               _log.warn(\"Default Expiration (ms): \" + timeoutMs);\n        }\n        _finished = false;\n    }","commit_id":"559653f0ab532352503b527f38b326745f176940","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"private TunnelInfo selectOutboundTunnel(Destination to) {\n        TunnelInfo tunnel;\n        long now = getContext().clock().now();\n        synchronized (_tunnelCache) {\n            if (now - _cleanTime > 5*60*1000) {  // clean out periodically\n                cleanTunnelCache(_tunnelCache);\n                cleanTunnelCache(_backloggedTunnelCache);\n                _cleanTime = now;\n            }\n            /**\n             * If old tunnel is valid and no longer backlogged, use it.\n             * This prevents an active anonymity attack, where a peer could tell\n             * if you were the originator by backlogging the tunnel, then removing the\n             * backlog and seeing if traffic came back or not.\n             */\n            tunnel = (TunnelInfo) _backloggedTunnelCache.get(hashPair());\n            if (tunnel != null) {\n                if (getContext().tunnelManager().isValidTunnel(_from.calculateHash(), tunnel)) {\n                    if (!getContext().commSystem().isBacklogged(tunnel.getPeer(1))) {\n                        if (_log.shouldLog(Log.WARN))\n                            _log.warn(\"Switching back to tunnel \" + tunnel + \" for \" + _toString); \n                        _backloggedTunnelCache.remove(hashPair());\n                        _tunnelCache.put(hashPair(), tunnel);\n                        _wantACK = true;\n                        return tunnel;\n                    }  // else still backlogged\n                } else // no longer valid\n                    _backloggedTunnelCache.remove(hashPair());\n            }\n            // Use the same tunnel unless backlogged\n            tunnel = (TunnelInfo) _tunnelCache.get(hashPair());\n            if (tunnel != null) {\n                if (getContext().tunnelManager().isValidTunnel(_from.calculateHash(), tunnel)) {\n                    if (tunnel.getLength() <= 1 || !getContext().commSystem().isBacklogged(tunnel.getPeer(1)))\n                        return tunnel;\n                    // backlogged\n                    if (_log.shouldLog(Log.WARN))\n                        _log.warn(\"Switching from backlogged \" + tunnel + \" for \" + _toString); \n                    _backloggedTunnelCache.put(hashPair(), tunnel);\n                } // else no longer valid\n                _tunnelCache.remove(hashPair());\n            }\n            // Pick a new tunnel\n            tunnel = selectOutboundTunnel();\n            if (tunnel != null)\n                _tunnelCache.put(hashPair(), tunnel);\n            _wantACK = true;\n        }\n        return tunnel;\n    }","id":105459,"modified_method":"private TunnelInfo selectOutboundTunnel(Destination to) {\n        TunnelInfo tunnel;\n        long now = getContext().clock().now();\n        synchronized (_tunnelCache) {\n            /**\n             * If old tunnel is valid and no longer backlogged, use it.\n             * This prevents an active anonymity attack, where a peer could tell\n             * if you were the originator by backlogging the tunnel, then removing the\n             * backlog and seeing if traffic came back or not.\n             */\n            tunnel = (TunnelInfo) _backloggedTunnelCache.get(hashPair());\n            if (tunnel != null) {\n                if (getContext().tunnelManager().isValidTunnel(_from.calculateHash(), tunnel)) {\n                    if (!getContext().commSystem().isBacklogged(tunnel.getPeer(1))) {\n                        if (_log.shouldLog(Log.WARN))\n                            _log.warn(\"Switching back to tunnel \" + tunnel + \" for \" + _toString); \n                        _backloggedTunnelCache.remove(hashPair());\n                        _tunnelCache.put(hashPair(), tunnel);\n                        _wantACK = true;\n                        return tunnel;\n                    }  // else still backlogged\n                } else // no longer valid\n                    _backloggedTunnelCache.remove(hashPair());\n            }\n            // Use the same tunnel unless backlogged\n            tunnel = (TunnelInfo) _tunnelCache.get(hashPair());\n            if (tunnel != null) {\n                if (getContext().tunnelManager().isValidTunnel(_from.calculateHash(), tunnel)) {\n                    if (tunnel.getLength() <= 1 || !getContext().commSystem().isBacklogged(tunnel.getPeer(1)))\n                        return tunnel;\n                    // backlogged\n                    if (_log.shouldLog(Log.WARN))\n                        _log.warn(\"Switching from backlogged \" + tunnel + \" for \" + _toString); \n                    _backloggedTunnelCache.put(hashPair(), tunnel);\n                } // else no longer valid\n                _tunnelCache.remove(hashPair());\n            }\n            // Pick a new tunnel\n            tunnel = selectOutboundTunnel();\n            if (tunnel != null)\n                _tunnelCache.put(hashPair(), tunnel);\n            _wantACK = true;\n        }\n        return tunnel;\n    }","commit_id":"559653f0ab532352503b527f38b326745f176940","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"private boolean getNextLease() {\n        _leaseSet = getContext().netDb().lookupLeaseSetLocally(_to.calculateHash());\n        if (_leaseSet == null) {\n            if (_log.shouldLog(Log.WARN))\n                _log.warn(getJobId() + \": Lookup locally didn't find the leaseSet for \" + _toString);\n            return false;\n        } \n        long now = getContext().clock().now();\n\n        // Use the same lease if it's still good\n        // Even if _leaseSet changed, _leaseSet.getEncryptionKey() didn't...\n        synchronized (_leaseCache) {\n            if (now - _lcleanTime > 5*60*1000) {  // clean out periodically\n                cleanLeaseCache(_leaseCache);\n                _lcleanTime = now;\n            }\n            _lease = (Lease) _leaseCache.get(hashPair());\n            if (_lease != null) {\n                // if outbound tunnel length == 0 && lease.firsthop.isBacklogged() don't use it ??\n                if (!_lease.isExpired(Router.CLOCK_FUDGE_FACTOR)) {\n                    // see if the current leaseSet contains the old lease, so that if the dest removes\n                    // it (due to failure for example) we won't continue to use it.\n                    for (int i = 0; i < _leaseSet.getLeaseCount(); i++) {\n                        Lease lease = _leaseSet.getLease(i);\n                        if (_lease.equals(lease)) {\n                            if (_log.shouldLog(Log.INFO))\n                                _log.info(\"Found in cache - lease for \" + _toString); \n                            return true;\n                        }\n                    }\n                }\n                if (_log.shouldLog(Log.INFO))\n                    _log.info(\"Expired from cache - lease for \" + _toString); \n                _leaseCache.remove(_to);\n            }\n        }\n\n        // get the possible leases\n        List leases = new ArrayList(_leaseSet.getLeaseCount());\n        for (int i = 0; i < _leaseSet.getLeaseCount(); i++) {\n            Lease lease = _leaseSet.getLease(i);\n            if (lease.isExpired(Router.CLOCK_FUDGE_FACTOR)) {\n                if (_log.shouldLog(Log.INFO))\n                    _log.info(getJobId() + \": getNextLease() - expired lease! - \" + lease + \" for \" + _toString);\n                continue;\n            } else {\n                leases.add(lease);\n            }\n        }\n        \n        if (leases.size() <= 0) {\n            if (_log.shouldLog(Log.INFO))\n                _log.info(getJobId() + \": No leases found from: \" + _leaseSet);\n            return false;\n        }\n        \n        // randomize the ordering (so leases with equal # of failures per next \n        // sort are randomly ordered)\n        Collections.shuffle(leases);\n        \n/****\n        if (false) {\n            // ordered by lease number of failures\n            TreeMap orderedLeases = new TreeMap();\n            for (Iterator iter = leases.iterator(); iter.hasNext(); ) {\n                Lease lease = (Lease)iter.next();\n                long id = lease.getNumFailure();\n                while (orderedLeases.containsKey(new Long(id)))\n                    id++;\n                orderedLeases.put(new Long(id), lease);\n                if (_log.shouldLog(Log.DEBUG))\n                    _log.debug(getJobId() + \": ranking lease we havent sent it down as \" + id);\n            }\n            \n            _lease = (Lease)orderedLeases.get(orderedLeases.firstKey());\n        } else {\n****/\n\n\n        // Avoid a lease on a gateway we think is unreachable, if possible\n        for (int i = 0; i < leases.size(); i++) {\n            Lease l = (Lease) leases.get(i);\n/***\n ***  Anonymity concerns with this, as the dest could act unreachable just to us, then\n ***  look at our lease selection.\n ***  Let's just look at whether the gw thinks it is unreachable instead -\n ***  unfortunately the \"U\" is rarely seen.\n            if (!getContext().commSystem().wasUnreachable(l.getGateway())) {\n***/\n            RouterInfo ri = getContext().netDb().lookupRouterInfoLocally(l.getGateway());\n            if (ri == null || ri.getCapabilities().indexOf(Router.CAPABILITY_UNREACHABLE) < 0) {\n                _lease = l;\n                break;\n            }\n            if (_log.shouldLog(Log.WARN))\n                _log.warn(getJobId() + \": Skipping unreachable gateway \" + l.getGateway() + \" for \" + _toString); \n        }\n        if (_lease == null) {\n            _lease = (Lease)leases.get(0);\n            if (_log.shouldLog(Log.WARN))\n                _log.warn(getJobId() + \": All leases are unreachable for \" + _toString); \n        }\n        synchronized (_leaseCache) {\n            _leaseCache.put(hashPair(), _lease);\n        }\n        if (_log.shouldLog(Log.INFO))\n            _log.info(\"Added to cache - lease for \" + _toString); \n        _wantACK = true;\n        return true;\n    }","id":105460,"modified_method":"private boolean getNextLease() {\n        _leaseSet = getContext().netDb().lookupLeaseSetLocally(_to.calculateHash());\n        if (_leaseSet == null) {\n            if (_log.shouldLog(Log.WARN))\n                _log.warn(getJobId() + \": Lookup locally didn't find the leaseSet for \" + _toString);\n            return false;\n        } \n        long now = getContext().clock().now();\n\n        // Use the same lease if it's still good\n        // Even if _leaseSet changed, _leaseSet.getEncryptionKey() didn't...\n        synchronized (_leaseCache) {\n            _lease = (Lease) _leaseCache.get(hashPair());\n            if (_lease != null) {\n                // if outbound tunnel length == 0 && lease.firsthop.isBacklogged() don't use it ??\n                if (!_lease.isExpired(Router.CLOCK_FUDGE_FACTOR)) {\n                    // see if the current leaseSet contains the old lease, so that if the dest removes\n                    // it (due to failure for example) we won't continue to use it.\n                    for (int i = 0; i < _leaseSet.getLeaseCount(); i++) {\n                        Lease lease = _leaseSet.getLease(i);\n                        if (_lease.equals(lease)) {\n                            if (_log.shouldLog(Log.INFO))\n                                _log.info(\"Found in cache - lease for \" + _toString); \n                            return true;\n                        }\n                    }\n                }\n                if (_log.shouldLog(Log.INFO))\n                    _log.info(\"Expired from cache - lease for \" + _toString); \n                _leaseCache.remove(_to);\n            }\n        }\n\n        // get the possible leases\n        List leases = new ArrayList(_leaseSet.getLeaseCount());\n        for (int i = 0; i < _leaseSet.getLeaseCount(); i++) {\n            Lease lease = _leaseSet.getLease(i);\n            if (lease.isExpired(Router.CLOCK_FUDGE_FACTOR)) {\n                if (_log.shouldLog(Log.INFO))\n                    _log.info(getJobId() + \": getNextLease() - expired lease! - \" + lease + \" for \" + _toString);\n                continue;\n            } else {\n                leases.add(lease);\n            }\n        }\n        \n        if (leases.size() <= 0) {\n            if (_log.shouldLog(Log.INFO))\n                _log.info(getJobId() + \": No leases found from: \" + _leaseSet);\n            return false;\n        }\n        \n        // randomize the ordering (so leases with equal # of failures per next \n        // sort are randomly ordered)\n        Collections.shuffle(leases);\n        \n/****\n        if (false) {\n            // ordered by lease number of failures\n            TreeMap orderedLeases = new TreeMap();\n            for (Iterator iter = leases.iterator(); iter.hasNext(); ) {\n                Lease lease = (Lease)iter.next();\n                long id = lease.getNumFailure();\n                while (orderedLeases.containsKey(new Long(id)))\n                    id++;\n                orderedLeases.put(new Long(id), lease);\n                if (_log.shouldLog(Log.DEBUG))\n                    _log.debug(getJobId() + \": ranking lease we havent sent it down as \" + id);\n            }\n            \n            _lease = (Lease)orderedLeases.get(orderedLeases.firstKey());\n        } else {\n****/\n\n\n        // Avoid a lease on a gateway we think is unreachable, if possible\n        for (int i = 0; i < leases.size(); i++) {\n            Lease l = (Lease) leases.get(i);\n/***\n ***  Anonymity concerns with this, as the dest could act unreachable just to us, then\n ***  look at our lease selection.\n ***  Let's just look at whether the gw thinks it is unreachable instead -\n ***  unfortunately the \"U\" is rarely seen.\n            if (!getContext().commSystem().wasUnreachable(l.getGateway())) {\n***/\n            RouterInfo ri = getContext().netDb().lookupRouterInfoLocally(l.getGateway());\n            if (ri == null || ri.getCapabilities().indexOf(Router.CAPABILITY_UNREACHABLE) < 0) {\n                _lease = l;\n                break;\n            }\n            if (_log.shouldLog(Log.WARN))\n                _log.warn(getJobId() + \": Skipping unreachable gateway \" + l.getGateway() + \" for \" + _toString); \n        }\n        if (_lease == null) {\n            _lease = (Lease)leases.get(0);\n            if (_log.shouldLog(Log.WARN))\n                _log.warn(getJobId() + \": All leases are unreachable for \" + _toString); \n        }\n        synchronized (_leaseCache) {\n            _leaseCache.put(hashPair(), _lease);\n        }\n        if (_log.shouldLog(Log.INFO))\n            _log.info(\"Added to cache - lease for \" + _toString); \n        _wantACK = true;\n        return true;\n    }","commit_id":"559653f0ab532352503b527f38b326745f176940","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     * Clean out old leaseSets from a set.\n     * Caller must synchronize on tc.\n     */\n    private void cleanLeaseSetCache(HashMap tc) {\n        long now = getContext().clock().now();\n        List deleteList = new ArrayList();\n        for (Iterator iter = tc.entrySet().iterator(); iter.hasNext(); ) {\n            Map.Entry entry = (Map.Entry)iter.next();\n            String k = (String) entry.getKey();\n            LeaseSet l = (LeaseSet) entry.getValue();\n            if (l.getEarliestLeaseDate() < now)\n                deleteList.add(k);\n        }\n        for (Iterator iter = deleteList.iterator(); iter.hasNext(); ) {\n            String k = (String) iter.next();\n            tc.remove(k);\n        }\n    }","id":105461,"modified_method":"/**\n     * Clean out old leaseSets from a set.\n     * Caller must synchronize on tc.\n     */\n    private static void cleanLeaseSetCache(RouterContext ctx, HashMap tc) {\n        long now = ctx.clock().now();\n        List deleteList = new ArrayList();\n        for (Iterator iter = tc.entrySet().iterator(); iter.hasNext(); ) {\n            Map.Entry entry = (Map.Entry)iter.next();\n            String k = (String) entry.getKey();\n            LeaseSet l = (LeaseSet) entry.getValue();\n            if (l.getEarliestLeaseDate() < now)\n                deleteList.add(k);\n        }\n        for (Iterator iter = deleteList.iterator(); iter.hasNext(); ) {\n            String k = (String) iter.next();\n            tc.remove(k);\n        }\n    }","commit_id":"559653f0ab532352503b527f38b326745f176940","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"private LeaseSet getReplyLeaseSet(boolean force) {\n        LeaseSet newLS = getContext().netDb().lookupLeaseSetLocally(_from.calculateHash());\n        if (newLS == null)\n            return null;   // punt\n\n        if (!force) {\n            // Don't send it every time unless configured to; default=false\n            Properties opts = _clientMessage.getSenderConfig().getOptions();\n            String wantBundle = opts.getProperty(BUNDLE_REPLY_LEASESET, \"false\");\n            if (\"true\".equals(wantBundle)) {\n                int probability = BUNDLE_PROBABILITY_DEFAULT;\n                String str = opts.getProperty(BUNDLE_PROBABILITY);\n                try { \n                    if (str != null) \n                        probability = Integer.parseInt(str);\n                } catch (NumberFormatException nfe) {\n                    if (_log.shouldLog(Log.WARN))\n                        _log.warn(getJobId() + \": Bundle leaseSet probability overridden incorrectly [\" \n                                  + str + \"]\", nfe);\n                }\n                if (probability >= 100)\n                    return newLS;  // do this every time so don't worry about cache\n                if (_log.shouldLog(Log.INFO))\n                    _log.info(getJobId() + \": Bundle leaseSet probability is \" + probability);\n                if (probability >= getContext().random().nextInt(100))\n                    force = true;  // just add newLS to cache below and return\n                // fall through to cache check and add\n            }\n        }\n\n        // If the last leaseSet we sent him is still good, don't bother sending again\n        long now = getContext().clock().now();\n        synchronized (_leaseSetCache) {\n            if (now - _lscleanTime > 5*60*1000) {  // clean out periodically\n                cleanLeaseSetCache(_leaseSetCache);\n                _lscleanTime = now;\n            }\n            if (!force) {\n                LeaseSet ls = (LeaseSet) _leaseSetCache.get(hashPair());\n                if (ls != null) {\n                    if (ls.equals(newLS)) {\n                        // still good, send it 10% of the time\n                        // sendACK does 5% random which forces us, good enough\n                        //if (10 >= getContext().random().nextInt(100)) {\n                        //    if (_log.shouldLog(Log.INFO))\n                        //        _log.info(\"Found in cache - including reply leaseset for \" + _toString); \n                        //    return ls;\n                        //} else {\n                            if (_log.shouldLog(Log.INFO))\n                                _log.info(\"Found in cache - NOT including reply leaseset for \" + _toString); \n                            return null;\n                        //}\n                    } else {\n                        if (_log.shouldLog(Log.INFO))\n                            _log.info(\"Expired from cache - reply leaseset for \" + _toString); \n                        // will get overwritten below\n                        // _leaseSetCache.remove(hashPair());\n                    }\n                }\n            }\n            _leaseSetCache.put(hashPair(), newLS);\n        }\n        if (_log.shouldLog(Log.INFO))\n            _log.info(\"Added to cache - reply leaseset for \" + _toString); \n        return newLS;\n    }","id":105462,"modified_method":"private LeaseSet getReplyLeaseSet(boolean force) {\n        LeaseSet newLS = getContext().netDb().lookupLeaseSetLocally(_from.calculateHash());\n        if (newLS == null)\n            return null;   // punt\n\n        if (!force) {\n            // Don't send it every time unless configured to; default=false\n            Properties opts = _clientMessage.getSenderConfig().getOptions();\n            String wantBundle = opts.getProperty(BUNDLE_REPLY_LEASESET, \"false\");\n            if (\"true\".equals(wantBundle)) {\n                int probability = BUNDLE_PROBABILITY_DEFAULT;\n                String str = opts.getProperty(BUNDLE_PROBABILITY);\n                try { \n                    if (str != null) \n                        probability = Integer.parseInt(str);\n                } catch (NumberFormatException nfe) {\n                    if (_log.shouldLog(Log.WARN))\n                        _log.warn(getJobId() + \": Bundle leaseSet probability overridden incorrectly [\" \n                                  + str + \"]\", nfe);\n                }\n                if (probability >= 100)\n                    return newLS;  // do this every time so don't worry about cache\n                if (_log.shouldLog(Log.INFO))\n                    _log.info(getJobId() + \": Bundle leaseSet probability is \" + probability);\n                if (probability >= getContext().random().nextInt(100))\n                    force = true;  // just add newLS to cache below and return\n                // fall through to cache check and add\n            }\n        }\n\n        // If the last leaseSet we sent him is still good, don't bother sending again\n        long now = getContext().clock().now();\n        synchronized (_leaseSetCache) {\n            if (!force) {\n                LeaseSet ls = (LeaseSet) _leaseSetCache.get(hashPair());\n                if (ls != null) {\n                    if (ls.equals(newLS)) {\n                        // still good, send it 10% of the time\n                        // sendACK does 5% random which forces us, good enough\n                        //if (10 >= getContext().random().nextInt(100)) {\n                        //    if (_log.shouldLog(Log.INFO))\n                        //        _log.info(\"Found in cache - including reply leaseset for \" + _toString); \n                        //    return ls;\n                        //} else {\n                            if (_log.shouldLog(Log.INFO))\n                                _log.info(\"Found in cache - NOT including reply leaseset for \" + _toString); \n                            return null;\n                        //}\n                    } else {\n                        if (_log.shouldLog(Log.INFO))\n                            _log.info(\"Expired from cache - reply leaseset for \" + _toString); \n                        // will get overwritten below\n                        // _leaseSetCache.remove(hashPair());\n                    }\n                }\n            }\n            _leaseSetCache.put(hashPair(), newLS);\n        }\n        if (_log.shouldLog(Log.INFO))\n            _log.info(\"Added to cache - reply leaseset for \" + _toString); \n        return newLS;\n    }","commit_id":"559653f0ab532352503b527f38b326745f176940","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     * Clean out old tunnels from a set.\n     * Caller must synchronize on tc.\n     */\n    private void cleanTunnelCache(HashMap tc) {\n        List deleteList = new ArrayList();\n        for (Iterator iter = tc.entrySet().iterator(); iter.hasNext(); ) {\n            Map.Entry entry = (Map.Entry)iter.next();\n            String k = (String) entry.getKey();\n            TunnelInfo tunnel = (TunnelInfo) entry.getValue();\n            if (!getContext().tunnelManager().isValidTunnel(sourceFromHashPair(k), tunnel))\n                deleteList.add(k);\n        }\n        for (Iterator iter = deleteList.iterator(); iter.hasNext(); ) {\n            String k = (String) iter.next();\n            tc.remove(k);\n        }\n    }","id":105463,"modified_method":"/**\n     * Clean out old tunnels from a set.\n     * Caller must synchronize on tc.\n     */\n    private static void cleanTunnelCache(RouterContext ctx, HashMap tc) {\n        List deleteList = new ArrayList();\n        for (Iterator iter = tc.entrySet().iterator(); iter.hasNext(); ) {\n            Map.Entry entry = (Map.Entry)iter.next();\n            String k = (String) entry.getKey();\n            TunnelInfo tunnel = (TunnelInfo) entry.getValue();\n            if (!ctx.tunnelManager().isValidTunnel(sourceFromHashPair(k), tunnel))\n                deleteList.add(k);\n        }\n        for (Iterator iter = deleteList.iterator(); iter.hasNext(); ) {\n            String k = (String) iter.next();\n            tc.remove(k);\n        }\n    }","commit_id":"559653f0ab532352503b527f38b326745f176940","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"@Override\n        protected void doFix(Project project, ProblemDescriptor descriptor)\n                throws IncorrectOperationException {\n            final PsiBinaryExpression expression =\n                    (PsiBinaryExpression)descriptor.getPsiElement();\n            final PsiExpression lhs = expression.getLOperand();\n            final PsiExpression rhs = expression.getROperand();\n            final PsiJavaToken sign = expression.getOperationSign();\n            final String newExpressionText;\n            if (lhs instanceof PsiMethodCallExpression) {\n                final PsiMethodCallExpression callExpression =\n                        (PsiMethodCallExpression)lhs;\n                newExpressionText =\n                        createContainsExpressionText(callExpression, sign,\n                                false);\n            } else {\n                final PsiMethodCallExpression callExpression =\n                        (PsiMethodCallExpression)rhs;\n                assert callExpression != null;\n                newExpressionText =\n                        createContainsExpressionText(callExpression, sign, true);\n            }\n            replaceExpression(expression, newExpressionText);\n        }","id":105464,"modified_method":"@Override\n        protected void doFix(Project project, ProblemDescriptor descriptor)\n                throws IncorrectOperationException {\n            final PsiElement element = descriptor.getPsiElement();\n            if (!(element instanceof PsiBinaryExpression)) {\n                return;\n            }\n            final PsiBinaryExpression expression =\n                    (PsiBinaryExpression) element;\n            final PsiExpression lhs = expression.getLOperand();\n            final PsiExpression rhs = expression.getROperand();\n            final PsiJavaToken sign = expression.getOperationSign();\n            final String newExpressionText;\n            if (lhs instanceof PsiMethodCallExpression) {\n                final PsiMethodCallExpression callExpression =\n                        (PsiMethodCallExpression)lhs;\n                newExpressionText =\n                        createContainsExpressionText(callExpression, sign,\n                                false);\n            } else if (rhs instanceof PsiMethodCallExpression) {\n                final PsiMethodCallExpression callExpression =\n                        (PsiMethodCallExpression)rhs;\n                newExpressionText =\n                        createContainsExpressionText(callExpression, sign, true);\n            } else {\n                return;\n            }\n            replaceExpression(expression, newExpressionText);\n        }","commit_id":"4f657f120c6b43965159da1615c370daf165524b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) {\n      final PsiReferenceParameterList typeArgumentList = (PsiReferenceParameterList)descriptor.getPsiElement();\n      if (!FileModificationService.getInstance().preparePsiElementForWrite(typeArgumentList)) return;\n      try {\n        final PsiMethodCallExpression expr =\n          (PsiMethodCallExpression)JavaPsiFacade.getInstance(project).getElementFactory().createExpressionFromText(\"foo()\", null);\n        typeArgumentList.replace(expr.getTypeArgumentList());\n      }\n      catch (IncorrectOperationException e) {\n        LOG.error(e);\n      }\n    }","id":105465,"modified_method":"@Override\n    public void applyFix(@NotNull Project project, @NotNull ProblemDescriptor descriptor) {\n      final PsiElement element = descriptor.getPsiElement();\n      if (!(element instanceof PsiReferenceParameterList)) return;\n      final PsiReferenceParameterList typeArgumentList = (PsiReferenceParameterList)element;\n      if (!FileModificationService.getInstance().preparePsiElementForWrite(typeArgumentList)) return;\n      try {\n        final PsiMethodCallExpression expr =\n          (PsiMethodCallExpression)JavaPsiFacade.getInstance(project).getElementFactory().createExpressionFromText(\"foo()\", null);\n        typeArgumentList.replace(expr.getTypeArgumentList());\n      }\n      catch (IncorrectOperationException e) {\n        LOG.error(e);\n      }\n    }","commit_id":"76c9bfd8c9cbd06d644f8ab3f295c1bc0be84c58","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean isAcceptable(Object element, PsiElement context) {\n    PsiElement previous = PsiImplUtil.realPrevious(context.getParent().getPrevSibling());\n    if (previous != null &&\n        GroovyTokenTypes.mAT.equals(previous.getNode().getElementType())) {\n      return false;\n    }\n    if (GroovyCompletionUtil.asSimpleVariable(context) ||\n        GroovyCompletionUtil.asTypedMethod(context) ||\n        GroovyCompletionUtil.asVariableInBlock(context)) {\n      return true;\n    }\n    if ((context.getParent() instanceof GrParameter &&\n        ((GrParameter) context.getParent()).getTypeElementGroovy() == null) ||\n        context.getParent() instanceof GrReferenceElement &&\n            !(context.getParent().getParent() instanceof GrImportStatement) &&\n            !(context.getParent().getParent() instanceof GrPackageDefinition) &&\n            !(context.getParent().getParent() instanceof GrArgumentList)) {\n      PsiElement prevSibling = context.getPrevSibling();\n      if (context.getParent() instanceof GrReferenceElement && prevSibling != null && prevSibling.getNode() != null) {\n        ASTNode node = prevSibling.getNode();\n        return !GroovyTokenTypes.DOTS.contains(node.getElementType());\n      } else {\n        return true;\n      }\n    }\n    if (PsiImplUtil.realPrevious(context.getParent().getPrevSibling()) instanceof GrModifierList) {\n      return true;\n    }\n    if (PsiImplUtil.realPrevious(context.getPrevSibling()) instanceof GrModifierList) {\n      return true;\n    }\n    return context.getParent() instanceof GrExpression &&\n        context.getParent().getParent() instanceof GroovyFile &&\n        GroovyCompletionUtil.isNewStatement(context, false);\n  }","id":105466,"modified_method":"public boolean isAcceptable(Object element, PsiElement context) {\n    final PsiElement parent = context.getParent();\n    if (parent == null) return false;\n    PsiElement previous = PsiImplUtil.realPrevious(parent.getPrevSibling());\n    if (previous != null && GroovyTokenTypes.mAT.equals(previous.getNode().getElementType())) {\n      return false;\n    }\n    if (GroovyCompletionUtil.asSimpleVariable(context) ||\n        GroovyCompletionUtil.asTypedMethod(context) ||\n        GroovyCompletionUtil.asVariableInBlock(context)) {\n      return true;\n    }\n    if ((parent instanceof GrParameter &&\n         ((GrParameter)parent).getTypeElementGroovy() == null) ||\n        parent instanceof GrReferenceElement &&\n        !(parent.getParent() instanceof GrImportStatement) &&\n        !(parent.getParent() instanceof GrPackageDefinition) &&\n        !(parent.getParent() instanceof GrArgumentList)) {\n      PsiElement prevSibling = context.getPrevSibling();\n      if (parent instanceof GrReferenceElement && prevSibling != null && prevSibling.getNode() != null) {\n        ASTNode node = prevSibling.getNode();\n        return !GroovyTokenTypes.DOTS.contains(node.getElementType());\n      } else {\n        return true;\n      }\n    }\n    if (PsiImplUtil.realPrevious(parent.getPrevSibling()) instanceof GrModifierList) {\n      return true;\n    }\n    if (PsiImplUtil.realPrevious(context.getPrevSibling()) instanceof GrModifierList) {\n      return true;\n    }\n    return parent instanceof GrExpression &&\n           parent.getParent() instanceof GroovyFile &&\n           GroovyCompletionUtil.isNewStatement(context, false);\n  }","commit_id":"992736c2f05f615c1e912141884065cdade5b1f3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void doFix(Project project, ProblemDescriptor descriptor)\n        throws IncorrectOperationException {\n      final GrConditionalExpression expression = (GrConditionalExpression) descriptor.getPsiElement();\n      final GrExpression thenBranch = expression.getThenBranch();\n      replaceExpression(expression, thenBranch.getText());\n    }","id":105467,"modified_method":"public void doFix(Project project, ProblemDescriptor descriptor) throws IncorrectOperationException {\n      final PsiElement element = descriptor.getPsiElement();\n      if (!(element instanceof GrConditionalExpression)) return;\n      final GrConditionalExpression expression = (GrConditionalExpression)element;\n      final GrExpression thenBranch = expression.getThenBranch();\n      replaceExpression(expression, thenBranch.getText());\n    }","commit_id":"992736c2f05f615c1e912141884065cdade5b1f3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public GrMethod createMethodFromText(@NotNull String methodText) {\n    GroovyFileBase file = createDummyFile(methodText);\n    GrTopLevelDefintion defintion = file.getTopLevelDefinitions()[0];\n    assert defintion != null && defintion instanceof GrMethod;\n    return ((GrMethod) defintion);\n  }","id":105468,"modified_method":"public GrMethod createMethodFromText(@NotNull String methodText) {\n    GroovyFileBase file = createDummyFile(methodText);\n    try {\n      GrTopLevelDefintion defintion = file.getTopLevelDefinitions()[0];\n      assert defintion != null && defintion instanceof GrMethod;\n      return ((GrMethod)defintion);\n    }\n    catch (Error error) {\n      throw new IncorrectOperationException(\"Can't create method from text: '\" + file.getText() + \"'\");\n    }\n  }","commit_id":"992736c2f05f615c1e912141884065cdade5b1f3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected TextRange surroundExpression(GrExpression expression) {\n    GrParenthesizedExpression parenthesized = (GrParenthesizedExpression) GroovyPsiElementFactory.getInstance(expression.getProject()).createTopElementFromText(\"((Type)a)\");\n    parenthesized = (GrParenthesizedExpression) expression.replaceWithExpression(parenthesized, true);\n    GrTypeCastExpression typeCast = (GrTypeCastExpression) parenthesized.getOperand();\n    replaceToOldExpression(typeCast.getOperand(), expression);\n    GrTypeElement typeElement = typeCast.getCastTypeElement();\n    int endOffset = typeElement.getTextRange().getStartOffset();\n\n    typeCast.getNode().removeChild(typeElement.getNode());\n    return new TextRange(endOffset, endOffset);\n  }","id":105469,"modified_method":"protected TextRange surroundExpression(GrExpression expression) {\n    GrParenthesizedExpression parenthesized = (GrParenthesizedExpression) GroovyPsiElementFactory.getInstance(expression.getProject()).createTopElementFromText(\"((Type)a)\");\n    parenthesized = (GrParenthesizedExpression) expression.replaceWithExpression(parenthesized, false);\n    GrTypeCastExpression typeCast = (GrTypeCastExpression) parenthesized.getOperand();\n    replaceToOldExpression(typeCast.getOperand(), expression);\n    GrTypeElement typeElement = typeCast.getCastTypeElement();\n    int endOffset = typeElement.getTextRange().getStartOffset();\n\n    typeCast.getNode().removeChild(typeElement.getNode());\n    return new TextRange(endOffset, endOffset);\n  }","commit_id":"992736c2f05f615c1e912141884065cdade5b1f3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Finds the {@link DatasetTypeMeta} for the specified dataset type name.\n   * Search order - first in the specified namespace, then in the 'system' namespace from defaultModules\n   *\n   * @param namespaceId {@link NamespaceId} for the specified namespace\n   * @param typeName the name of the dataset type to search\n   * @return {@link DatasetTypeMeta} for the type if found in either the specified namespace or in the system namespace,\n   * null otherwise.\n   * TODO: This may need to move to a util class eventually\n   */\n  @Nullable\n  private DatasetTypeMeta getTypeInfo(NamespaceId namespaceId, String typeName) throws Exception {\n    DatasetTypeId datasetTypeId = ConversionHelpers.toDatasetTypeId(namespaceId, typeName);\n    try {\n      return typeService.getType(datasetTypeId);\n    } catch (DatasetTypeNotFoundException e) {\n      // Type not found in the instance's namespace. Now try finding it in the system namespace\n      DatasetTypeId systemDatasetTypeId = ConversionHelpers.toDatasetTypeId(NamespaceId.SYSTEM, typeName);\n      return typeService.getType(systemDatasetTypeId);\n    }\n  }","id":105470,"modified_method":"/**\n   * Finds the {@link DatasetTypeMeta} for the specified dataset type name.\n   * Search order - first in the specified namespace, then in the 'system' namespace from defaultModules\n   *\n   * @param namespaceId {@link NamespaceId} for the specified namespace\n   * @param typeName the name of the dataset type to search\n   * @return {@link DatasetTypeMeta} for the type if found in either the specified namespace or in the system namespace,\n   * null otherwise.\n   * TODO: This may need to move to a util class eventually\n   */\n  @Nullable\n  private DatasetTypeMeta getTypeInfo(NamespaceId namespaceId, String typeName) throws Exception {\n    DatasetTypeId datasetTypeId = ConversionHelpers.toDatasetTypeId(namespaceId, typeName);\n    try {\n      return typeService.getType(datasetTypeId);\n    } catch (DatasetTypeNotFoundException e) {\n      try {\n        // Type not found in the instance's namespace. Now try finding it in the system namespace\n        DatasetTypeId systemDatasetTypeId = ConversionHelpers.toDatasetTypeId(NamespaceId.SYSTEM, typeName);\n        return typeService.getType(systemDatasetTypeId);\n      } catch (DatasetTypeNotFoundException exnWithSystemNS) {\n        // if it's not found in system namespace, throw the original exception with the correct namespace\n        throw e;\n      }\n    }\n  }","commit_id":"9e6cdd97778569d3b8d8063791c33cf45c71c40b","url":"https://github.com/caskdata/cdap"},{"original_method":"private void disableExplore(DatasetId datasetInstance) {\n    // Disable ad-hoc exploration of dataset\n    // Note: today explore enable is not transactional with dataset create - CDAP-8\n    try {\n      exploreFacade.disableExploreDataset(datasetInstance.toId());\n    } catch (Exception e) {\n      String msg = String.format(\"Cannot disable exploration of dataset instance %s: %s\",\n                                 datasetInstance, e.getMessage());\n      LOG.error(msg, e);\n      // TODO: at this time we want to still allow using dataset even if it cannot be used for exploration\n      //responder.sendString(HttpResponseStatus.INTERNAL_SERVER_ERROR, msg);\n      //return;\n    }\n  }","id":105471,"modified_method":"private void disableExplore(DatasetId datasetInstance) {\n    // Disable ad-hoc exploration of dataset\n    // Note: today explore enable is not transactional with dataset create - CDAP-8\n    try {\n      exploreFacade.disableExploreDataset(datasetInstance.toId());\n    } catch (Exception e) {\n      LOG.error(\"Cannot disable explore for dataset instance {}\", datasetInstance, e);\n      // TODO: at this time we want to still allow using dataset even if it cannot be used for exploration\n    }\n  }","commit_id":"9e6cdd97778569d3b8d8063791c33cf45c71c40b","url":"https://github.com/caskdata/cdap"},{"original_method":"private void updateExplore(DatasetId datasetInstance, DatasetInstanceConfiguration creationProperties,\n                             DatasetSpecification oldSpec, DatasetSpecification newSpec) {\n    // Enable ad-hoc exploration of dataset\n    // Note: today explore enable is not transactional with dataset create - CDAP-8\n    try {\n      exploreFacade.updateExploreDataset(datasetInstance.toId(), oldSpec, newSpec);\n    } catch (Exception e) {\n      String msg = String.format(\"Cannot enable exploration of dataset instance %s of type %s: %s\",\n                                 datasetInstance, creationProperties.getProperties(), e.getMessage());\n      LOG.error(msg, e);\n      // TODO: at this time we want to still allow using dataset even if it cannot be used for exploration\n      //responder.sendString(HttpResponseStatus.INTERNAL_SERVER_ERROR, msg);\n      //return;\n    }\n  }","id":105472,"modified_method":"private void updateExplore(DatasetId datasetInstance, DatasetInstanceConfiguration creationProperties,\n                             DatasetSpecification oldSpec, DatasetSpecification newSpec) {\n    // Enable ad-hoc exploration of dataset\n    // Note: today explore enable is not transactional with dataset create - CDAP-8\n    try {\n      exploreFacade.updateExploreDataset(datasetInstance.toId(), oldSpec, newSpec);\n    } catch (Exception e) {\n      LOG.error(\"Cannot update explore for dataset instance {} with old properties {} and new properties {}\",\n                datasetInstance, oldSpec.getOriginalProperties(), creationProperties.getProperties(), e);\n      // TODO: at this time we want to still allow using dataset even if it cannot be used for exploration\n    }\n  }","commit_id":"9e6cdd97778569d3b8d8063791c33cf45c71c40b","url":"https://github.com/caskdata/cdap"},{"original_method":"private void enableExplore(DatasetId datasetInstance, DatasetSpecification spec,\n                             DatasetInstanceConfiguration creationProperties) {\n    // Enable ad-hoc exploration of dataset\n    // Note: today explore enable is not transactional with dataset create - CDAP-8\n    try {\n      exploreFacade.enableExploreDataset(datasetInstance.toId(), spec);\n    } catch (Exception e) {\n      String msg = String.format(\"Cannot enable exploration of dataset instance %s of type %s: %s\",\n                                 datasetInstance, creationProperties.getProperties(), e.getMessage());\n      LOG.error(msg, e);\n      // TODO: at this time we want to still allow using dataset even if it cannot be used for exploration\n      //responder.sendString(HttpResponseStatus.INTERNAL_SERVER_ERROR, msg);\n      //return;\n    }\n  }","id":105473,"modified_method":"private void enableExplore(DatasetId datasetInstance, DatasetSpecification spec,\n                             DatasetInstanceConfiguration creationProperties) {\n    // Enable ad-hoc exploration of dataset\n    // Note: today explore enable is not transactional with dataset create - CDAP-8\n    try {\n      exploreFacade.enableExploreDataset(datasetInstance.toId(), spec);\n    } catch (Exception e) {\n      LOG.error(\"Cannot enable explore for dataset instance {} of type {} with properties {}\",\n                datasetInstance, creationProperties.getTypeName(), creationProperties.getProperties(), e);\n      // TODO: at this time we want to still allow using dataset even if it cannot be used for exploration\n    }\n  }","commit_id":"9e6cdd97778569d3b8d8063791c33cf45c71c40b","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void run()\n    {\n        try\n        {\n            // streaming connections are per-session and have a fixed version.\n            // we can't do anything with a wrong-version stream connection, so drop it.\n            if (version != StreamMessage.CURRENT_VERSION)\n                throw new IOException(String.format(\"Received stream using protocol version %d (my version %d). Terminating connection\", version, StreamMessage.CURRENT_VERSION));\n\n            DataInput input = new DataInputStream(socket.getInputStream());\n            StreamInitMessage init = StreamInitMessage.serializer.deserialize(input, version);\n\n            //Set SO_TIMEOUT on follower side\n            if (!init.isForOutgoing)\n                socket.setSoTimeout(DatabaseDescriptor.getStreamingSocketTimeout());\n\n            // The initiator makes two connections, one for incoming and one for outgoing.\n            // The receiving side distinguish two connections by looking at StreamInitMessage#isForOutgoing.\n            // Note: we cannot use the same socket for incoming and outgoing streams because we want to\n            // parallelize said streams and the socket is blocking, so we might deadlock.\n            StreamResultFuture.initReceivingSide(init.sessionIndex, init.planId, init.description, init.from, this, init.isForOutgoing, version, init.keepSSTableLevel, init.isIncremental);\n        }\n        catch (IOException e)\n        {\n            logger.error(String.format(\"IOException while reading from socket from %s, closing: %s\",\n                                       socket.getRemoteSocketAddress(), e));\n            close();\n        }\n    }","id":105474,"modified_method":"@Override\n    public void run()\n    {\n        try\n        {\n            // streaming connections are per-session and have a fixed version.\n            // we can't do anything with a wrong-version stream connection, so drop it.\n            if (version != StreamMessage.CURRENT_VERSION)\n                throw new IOException(String.format(\"Received stream using protocol version %d (my version %d). Terminating connection\", version, StreamMessage.CURRENT_VERSION));\n\n            DataInput input = new DataInputStream(socket.getInputStream());\n            StreamInitMessage init = StreamInitMessage.serializer.deserialize(input, version);\n\n            //Set SO_TIMEOUT on follower side\n            if (!init.isForOutgoing)\n                socket.setSoTimeout(DatabaseDescriptor.getStreamingSocketTimeout());\n\n            // The initiator makes two connections, one for incoming and one for outgoing.\n            // The receiving side distinguish two connections by looking at StreamInitMessage#isForOutgoing.\n            // Note: we cannot use the same socket for incoming and outgoing streams because we want to\n            // parallelize said streams and the socket is blocking, so we might deadlock.\n            StreamResultFuture.initReceivingSide(init.sessionIndex, init.planId, init.description, init.from, this, init.isForOutgoing, version, init.keepSSTableLevel, init.isIncremental);\n        }\n        catch (Throwable t)\n        {\n            logger.error(\"Error while reading from socket from {}.\", socket.getRemoteSocketAddress(), t);\n            close();\n        }\n    }","commit_id":"77924b37c9bd28af8bfdc77edc9c7d6717c8085d","url":"https://github.com/apache/cassandra"},{"original_method":"@SuppressWarnings(\"resource\")\n        public void run()\n        {\n            while (!server.isClosed())\n            {\n                Socket socket = null;\n                try\n                {\n                    socket = server.accept();\n                    if (!authenticate(socket))\n                    {\n                        logger.trace(\"remote failed to authenticate\");\n                        socket.close();\n                        continue;\n                    }\n\n                    socket.setKeepAlive(true);\n                    socket.setSoTimeout(2 * OutboundTcpConnection.WAIT_FOR_VERSION_MAX_TIME);\n                    // determine the connection type to decide whether to buffer\n                    DataInputStream in = new DataInputStream(socket.getInputStream());\n                    MessagingService.validateMagic(in.readInt());\n                    int header = in.readInt();\n                    boolean isStream = MessagingService.getBits(header, 3, 1) == 1;\n                    int version = MessagingService.getBits(header, 15, 8);\n                    logger.trace(\"Connection version {} from {}\", version, socket.getInetAddress());\n                    socket.setSoTimeout(0);\n\n                    Thread thread = isStream\n                                  ? new IncomingStreamingConnection(version, socket, connections)\n                                  : new IncomingTcpConnection(version, MessagingService.getBits(header, 2, 1) == 1, socket, connections);\n                    thread.start();\n                    connections.add((Closeable) thread);\n                }\n                catch (AsynchronousCloseException e)\n                {\n                    // this happens when another thread calls close().\n                    logger.trace(\"Asynchronous close seen by server thread\");\n                    break;\n                }\n                catch (ClosedChannelException e)\n                {\n                    logger.trace(\"MessagingService server thread already closed\");\n                    break;\n                }\n                catch (SSLHandshakeException e)\n                {\n                    logger.error(\"SSL handshake error for inbound connection from \" + socket, e);\n                    FileUtils.closeQuietly(socket);\n                }\n                catch (IOException e)\n                {\n                    logger.trace(\"Error reading the socket \" + socket, e);\n                    FileUtils.closeQuietly(socket);\n                }\n            }\n            logger.info(\"MessagingService has terminated the accept() thread\");\n        }","id":105475,"modified_method":"@SuppressWarnings(\"resource\")\n        public void run()\n        {\n            while (!server.isClosed())\n            {\n                Socket socket = null;\n                try\n                {\n                    socket = server.accept();\n                    if (!authenticate(socket))\n                    {\n                        logger.trace(\"remote failed to authenticate\");\n                        socket.close();\n                        continue;\n                    }\n\n                    socket.setKeepAlive(true);\n                    socket.setSoTimeout(2 * OutboundTcpConnection.WAIT_FOR_VERSION_MAX_TIME);\n                    // determine the connection type to decide whether to buffer\n                    DataInputStream in = new DataInputStream(socket.getInputStream());\n                    MessagingService.validateMagic(in.readInt());\n                    int header = in.readInt();\n                    boolean isStream = MessagingService.getBits(header, 3, 1) == 1;\n                    int version = MessagingService.getBits(header, 15, 8);\n                    logger.trace(\"Connection version {} from {}\", version, socket.getInetAddress());\n                    socket.setSoTimeout(0);\n\n                    Thread thread = isStream\n                                  ? new IncomingStreamingConnection(version, socket, connections)\n                                  : new IncomingTcpConnection(version, MessagingService.getBits(header, 2, 1) == 1, socket, connections);\n                    thread.start();\n                    connections.add((Closeable) thread);\n                }\n                catch (AsynchronousCloseException e)\n                {\n                    // this happens when another thread calls close().\n                    logger.trace(\"Asynchronous close seen by server thread\");\n                    break;\n                }\n                catch (ClosedChannelException e)\n                {\n                    logger.trace(\"MessagingService server thread already closed\");\n                    break;\n                }\n                catch (SSLHandshakeException e)\n                {\n                    logger.error(\"SSL handshake error for inbound connection from \" + socket, e);\n                    FileUtils.closeQuietly(socket);\n                }\n                catch (Throwable t)\n                {\n                    logger.trace(\"Error reading the socket {}\", socket, t);\n                    FileUtils.closeQuietly(socket);\n                }\n            }\n            logger.info(\"MessagingService has terminated the accept() thread\");\n        }","commit_id":"77924b37c9bd28af8bfdc77edc9c7d6717c8085d","url":"https://github.com/apache/cassandra"},{"original_method":"private void saveContent(FileProcessor.FileAndContent fileAndContent) {\n    myFilesAndContents.add(fileAndContent);\n  }","id":105476,"modified_method":"private boolean saveContent(FileProcessor.FileAndContent fileAndContent) {\n    myFilesAndContents.add(fileAndContent);\n    return !(fileAndContent.myContent.isUnchanged(fileAndContent.myFile));\n  }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void saveToFile(IFile file) {\n      if (file.exists() && isUnchanged(file)) {\n        return;\n      }\n\n      OutputStream stream = null;\n      try {\n        stream = file.openOutputStream();\n        stream.write(myContent);\n      } catch (IOException e) {\n        FileProcessor.LOG.error(e);\n      } finally {\n        if (stream != null) {\n          try {\n            stream.close();\n          } catch (IOException ignored) {\n          }\n        }\n      }\n    }","id":105477,"modified_method":"public void saveToFile(IFile file) {\n      OutputStream stream = null;\n      try {\n        stream = file.openOutputStream();\n        stream.write(myContent);\n      } catch (IOException e) {\n        FileProcessor.LOG.error(e);\n      } finally {\n        if (stream != null) {\n          try {\n            stream.close();\n          } catch (IOException ignored) {\n          }\n        }\n      }\n    }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"private boolean isUnchanged(IFile file) {\n      BufferedReader reader = null;\n      StringBuilder res = new StringBuilder();\n      try {\n        reader = new BufferedReader(new InputStreamReader(file.openInputStream(), FileUtil.DEFAULT_CHARSET));\n        String line;\n        while ((line = reader.readLine()) != null) {\n          res.append(line).append('\\n');\n        }\n        return res.toString().equals(myContent);\n      } catch (IOException ex) {\n        return false;\n      } finally {\n        try {\n          if (reader != null) {\n            reader.close();\n          }\n        } catch (IOException ex) {\n          return false;\n        }\n      }\n    }","id":105478,"modified_method":"public boolean isUnchanged(IFile file) {\n      if (!(file.exists())) {\n        return false;\n      }\n      BufferedReader reader = null;\n      StringBuilder res = new StringBuilder();\n      try {\n        reader = new BufferedReader(new InputStreamReader(file.openInputStream(), FileUtil.DEFAULT_CHARSET));\n        String line;\n        while ((line = reader.readLine()) != null) {\n          res.append(line).append('\\n');\n        }\n        return res.toString().equals(myContent);\n      } catch (IOException ex) {\n        return false;\n      } finally {\n        try {\n          if (reader != null) {\n            reader.close();\n          }\n        } catch (IOException ex) {\n          return false;\n        }\n      }\n    }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void saveContent(IFile file, Element content) {\n    saveContent(new FileProcessor.FileAndContent(file, new FileProcessor.XMLFileContent(content)));\n  }","id":105479,"modified_method":"public boolean saveContent(IFile file, Element content) {\n    return saveContent(new FileProcessor.FileAndContent(file, new FileProcessor.XMLFileContent(content)));\n  }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void saveToFile(IFile file) {\n      if (file.exists() && isUnchanged(file)) {\n        return;\n      }\n\n      OutputStreamWriter writer = null;\n      try {\n        writer = new OutputStreamWriter(new BufferedOutputStream(file.openOutputStream()), FileUtil.DEFAULT_CHARSET);\n        writer.write(myContent);\n      } catch (IOException e) {\n        FileProcessor.LOG.error(e);\n      } finally {\n        if (writer != null) {\n          try {\n            writer.close();\n          } catch (IOException ignored) {\n          }\n        }\n      }\n    }","id":105480,"modified_method":"public void saveToFile(IFile file) {\n      OutputStreamWriter writer = null;\n      try {\n        writer = new OutputStreamWriter(new BufferedOutputStream(file.openOutputStream()), FileUtil.DEFAULT_CHARSET);\n        writer.write(myContent);\n      } catch (IOException e) {\n        FileProcessor.LOG.error(e);\n      } finally {\n        if (writer != null) {\n          try {\n            writer.close();\n          } catch (IOException ignored) {\n          }\n        }\n      }\n    }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"private boolean isUnchanged(IFile file) {\n      long len = file.length();\n      if (len != myContent.length) {\n        return false;\n      }\n\n      byte[] res = new byte[myContent.length];\n      InputStream stream = null;\n      try {\n        stream = file.openInputStream();\n        if (stream.read(res) != len) {\n          return false;\n        }\n        return Arrays.equals(res, myContent);\n      } catch (IOException ex) {\n        return false;\n      } finally {\n        if (stream != null) {\n          try {\n            stream.close();\n          } catch (IOException ex) {\n            return false;\n          }\n        }\n      }\n    }","id":105481,"modified_method":"public boolean isUnchanged(IFile file) {\n      if (!(file.exists())) {\n        return false;\n      }\n      long len = file.length();\n      if (len != myContent.length) {\n        return false;\n      }\n\n      byte[] res = new byte[myContent.length];\n      InputStream stream = null;\n      try {\n        stream = file.openInputStream();\n        if (stream.read(res) != len) {\n          return false;\n        }\n        return Arrays.equals(res, myContent);\n      } catch (IOException ex) {\n        return false;\n      } finally {\n        if (stream != null) {\n          try {\n            stream.close();\n          } catch (IOException ex) {\n            return false;\n          }\n        }\n      }\n    }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void saveContent(IFile file, byte[] content) {\n    saveContent(new FileProcessor.FileAndContent(file, new FileProcessor.BinaryFileContent(content)));\n  }","id":105482,"modified_method":"public boolean saveContent(IFile file, byte[] content) {\n    return saveContent(new FileProcessor.FileAndContent(file, new FileProcessor.BinaryFileContent(content)));\n  }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void saveContent(IFile file, String content) {\n    saveContent(new FileProcessor.FileAndContent(file, new FileProcessor.StringFileContent(content)));\n  }","id":105483,"modified_method":"public boolean saveContent(IFile file, String content) {\n    return saveContent(new FileProcessor.FileAndContent(file, new FileProcessor.StringFileContent(content)));\n  }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void saveStream(String name, Element content, boolean isCache) {\n    IFile file = getFile(name, isCache);\n    myProcessor.saveContent(file, content);\n    mySavedFiles.add(file);\n    getDelta(isCache).written(file);\n  }","id":105484,"modified_method":"public void saveStream(String name, Element content, boolean isCache) {\n    IFile file = getFile(name, isCache);\n    mySavedFiles.add(file);\n    if (myProcessor.saveContent(file, content)) {\n      getDelta(isCache).written(file);\n    } else {\n      getDelta(isCache).kept(file);\n    }\n  }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void saveStream(String name, String content, boolean isCache) {\n    IFile file = getFile(name, isCache);\n    myProcessor.saveContent(file, content);\n    mySavedFiles.add(file);\n    getDelta(isCache).written(file);\n  }","id":105485,"modified_method":"public void saveStream(String name, String content, boolean isCache) {\n    IFile file = getFile(name, isCache);\n    mySavedFiles.add(file);\n    if (myProcessor.saveContent(file, content)) {\n      getDelta(isCache).written(file);\n    } else {\n      getDelta(isCache).kept(file);\n    }\n  }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void saveStream(String name, byte[] content, boolean isCache) {\n    IFile file = getFile(name, isCache);\n    myProcessor.saveContent(file, content);\n    mySavedFiles.add(file);\n    getDelta(isCache).written(file);\n  }","id":105486,"modified_method":"public void saveStream(String name, byte[] content, boolean isCache) {\n    IFile file = getFile(name, isCache);\n    mySavedFiles.add(file);\n    if (myProcessor.saveContent(file, content)) {\n      getDelta(isCache).written(file);\n    } else {\n      getDelta(isCache).kept(file);\n    }\n  }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public IScriptController configureFacets() {\n    return configureFacets(this.fileHashes, this.writtenFiles, this.deletedFiles);\n  }","id":105487,"modified_method":"public IScriptController configureFacets() {\n    IModifiableGenerationSettings settings = GenerationSettingsProvider.getInstance().getGenerationSettings();\n    settings.setIncremental(true);\n    settings.setIncrementalUseCache(false);\n    final GenerationOptions.OptionsBuilder optBuilder = GenerationOptions.fromSettings(settings);\n\n    return new IScriptController.Stub(cmon, jmon) {\n      @Override\n      public void setup(IPropertiesPool pp, Iterable<ITarget> toExecute, Iterable<? extends IResource> input) {\n        super.setup(pp, toExecute, input);\n\n        Tuples._3<Project, IOperationContext, Boolean> vars = (Tuples._3<Project, IOperationContext, Boolean>) pp.properties(new ITarget.Name(\"jetbrains.mps.lang.core.Generate.checkParameters\"), Object.class);\n        // don't do rebuild all \n        vars._2(rebuild);\n\n        Tuples._2<Boolean, GenerationOptions.OptionsBuilder> params = (Tuples._2<Boolean, GenerationOptions.OptionsBuilder>) pp.properties(new ITarget.Name(\"jetbrains.mps.lang.core.Generate.configure\"), Object.class);\n        params._1(optBuilder);\n\n        Tuples._1<Boolean> skipCopyTraceinfo = (Tuples._1<Boolean>) pp.properties(new ITarget.Name(\"jetbrains.mps.lang.traceable.CopyTraceInfo.copyTraceInfo\"), Object.class);\n        if (skipCopyTraceinfo != null) {\n          skipCopyTraceinfo._0(true);\n        }\n\n        Tuples._2<Boolean, Boolean> compileProps = (Tuples._2<Boolean, Boolean>) pp.properties(new ITarget.Name(\"jetbrains.mps.baseLanguage.JavaCompile.compile\"), Object.class);\n        if (compileProps != null) {\n          compileProps._1(true);\n        }\n\n        Tuples._4<List<String>, List<String>, List<String>, Map<String, SModelDescriptor>> report = (Tuples._4<List<String>, List<String>, List<String>, Map<String, SModelDescriptor>>) pp.properties(new ITarget.Name(\"jetbrains.mps.build.reduced.ReportFiles.report\"), Object.class);\n        report._0(writtenFiles);\n        report._1(deletedFiles);\n        report._2(keptFiles);\n        report._3(sources);\n\n        Tuples._1<Map<String, String>> hashes = (Tuples._1<Map<String, String>>) pp.properties(new ITarget.Name(\"jetbrains.mps.build.reduced.CollectHashes.collect\"), Object.class);\n        hashes._0(fileHashes);\n\n        Tuples._1<Boolean> skipReconcile = (Tuples._1<Boolean>) pp.properties(new ITarget.Name(\"jetbrains.mps.lang.core.Make.reconcile\"), Object.class);\n        skipReconcile._0(true);\n\n        // override solution's output path \n        Tuples._1<_FunctionTypes._return_P1_E0<? extends IFile, ? super String>> pathToFile = (Tuples._1<_FunctionTypes._return_P1_E0<? extends IFile, ? super String>>) pp.properties(new ITarget.Name(\"jetbrains.mps.lang.core.Make.make\"), Object.class);\n        pathToFile._0(new _FunctionTypes._return_P1_E0<IFile, String>() {\n          public IFile invoke(String path) {\n            return outputPathRedirects.getRedirect(path);\n          }\n        });\n      }\n    };\n  }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public Parameters(List<String> writtenFiles, List<String> deletedFiles) {\n        super(writtenFiles, deletedFiles);\n      }","id":105488,"modified_method":"public Parameters(List<String> writtenFiles, List<String> deletedFiles, List<String> keptFiles, Map<String, SModelDescriptor> sourceModels) {\n        super(writtenFiles, deletedFiles, keptFiles, sourceModels);\n      }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void storeValues(Map<String, String> store, IPropertiesPool properties) {\n      {\n        ITarget.Name name = new ITarget.Name(\"jetbrains.mps.build.reduced.ReportFiles.report\");\n        if (properties.hasProperties(name)) {\n          ReportFiles_Facet.Target_report.Parameters props = properties.properties(name, ReportFiles_Facet.Target_report.Parameters.class);\n          MapSequence.fromMap(store).put(\"jetbrains.mps.build.reduced.ReportFiles.report.writtenFiles\", null);\n          MapSequence.fromMap(store).put(\"jetbrains.mps.build.reduced.ReportFiles.report.deletedFiles\", null);\n        }\n      }\n    }","id":105489,"modified_method":"public void storeValues(Map<String, String> store, IPropertiesPool properties) {\n      {\n        ITarget.Name name = new ITarget.Name(\"jetbrains.mps.build.reduced.ReportFiles.report\");\n        if (properties.hasProperties(name)) {\n          ReportFiles_Facet.Target_report.Parameters props = properties.properties(name, ReportFiles_Facet.Target_report.Parameters.class);\n          MapSequence.fromMap(store).put(\"jetbrains.mps.build.reduced.ReportFiles.report.writtenFiles\", null);\n          MapSequence.fromMap(store).put(\"jetbrains.mps.build.reduced.ReportFiles.report.deletedFiles\", null);\n          MapSequence.fromMap(store).put(\"jetbrains.mps.build.reduced.ReportFiles.report.keptFiles\", null);\n          MapSequence.fromMap(store).put(\"jetbrains.mps.build.reduced.ReportFiles.report.sourceModels\", null);\n        }\n      }\n    }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public IJob createJob() {\n      return new IJob.Stub() {\n        public IResult execute(final Iterable<IResource> input, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {\n          Iterable<IResource> _output_bk4wqp_a0a = null;\n          switch (0) {\n            case 0:\n              ModelAccess.instance().requireWrite(new Runnable() {\n                public void run() {\n                  new DeltaReconciler(Sequence.fromIterable(input).translate(new ITranslator2<IResource, IDelta>() {\n                    public Iterable<IDelta> translate(IResource res) {\n                      return ((IDeltaResource) res).delta();\n                    }\n                  }).where(new IWhereFilter<IDelta>() {\n                    public boolean accept(IDelta d) {\n                      return !(d instanceof IInternalDelta);\n                    }\n                  })).visitAll(new FilesDelta.Visitor() {\n                    @Override\n                    public boolean acceptWritten(IFile file) {\n                      ListSequence.fromList(pa.global().properties(Target_report.this.getName(), ReportFiles_Facet.Target_report.Parameters.class).writtenFiles()).addElement(file.getPath());\n                      return true;\n                    }\n\n                    @Override\n                    public boolean acceptDeleted(IFile file) {\n                      ListSequence.fromList(pa.global().properties(Target_report.this.getName(), ReportFiles_Facet.Target_report.Parameters.class).deletedFiles()).addElement(file.getPath());\n                      return true;\n                    }\n                  });\n                }\n              });\n              _output_bk4wqp_a0a = Sequence.fromIterable(_output_bk4wqp_a0a).concat(Sequence.fromIterable(input));\n            default:\n              return new IResult.SUCCESS(_output_bk4wqp_a0a);\n          }\n        }\n      };\n    }","id":105490,"modified_method":"public IJob createJob() {\n      return new IJob.Stub() {\n        public IResult execute(final Iterable<IResource> input, final IJobMonitor monitor, final IPropertiesAccessor pa, @NotNull final ProgressMonitor progressMonitor) {\n          Iterable<IResource> _output_bk4wqp_a0a = null;\n          switch (0) {\n            case 0:\n              ModelAccess.instance().requireWrite(new Runnable() {\n                public void run() {\n                  for (Object resource : input) {\n                    ITResource itr = (ITResource) resource;\n                    final SModelDescriptor md = itr.modelDescriptor();\n                    new DeltaReconciler(itr.delta()).visitAll(new FilesDelta.Visitor() {\n                      @Override\n                      public boolean acceptWritten(IFile file) {\n                        ListSequence.fromList(pa.global().properties(Target_report.this.getName(), ReportFiles_Facet.Target_report.Parameters.class).writtenFiles()).addElement(file.getPath());\n                        MapSequence.fromMap(pa.global().properties(Target_report.this.getName(), ReportFiles_Facet.Target_report.Parameters.class).sourceModels()).put(file.getPath(), md);\n                        return true;\n                      }\n\n                      @Override\n                      public boolean acceptKept(IFile file) {\n                        ListSequence.fromList(pa.global().properties(Target_report.this.getName(), ReportFiles_Facet.Target_report.Parameters.class).keptFiles()).addElement(file.getPath());\n                        MapSequence.fromMap(pa.global().properties(Target_report.this.getName(), ReportFiles_Facet.Target_report.Parameters.class).sourceModels()).put(file.getPath(), md);\n                        return true;\n                      }\n\n                      @Override\n                      public boolean acceptDeleted(IFile file) {\n                        ListSequence.fromList(pa.global().properties(Target_report.this.getName(), ReportFiles_Facet.Target_report.Parameters.class).deletedFiles()).addElement(file.getPath());\n                        MapSequence.fromMap(pa.global().properties(Target_report.this.getName(), ReportFiles_Facet.Target_report.Parameters.class).sourceModels()).put(file.getPath(), md);\n                        return true;\n                      }\n                    });\n                  }\n                }\n              });\n              _output_bk4wqp_a0a = Sequence.fromIterable(_output_bk4wqp_a0a).concat(Sequence.fromIterable(input));\n            default:\n              return new IResult.SUCCESS(_output_bk4wqp_a0a);\n          }\n        }\n      };\n    }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void loadValues(Map<String, String> store, IPropertiesPool properties) {\n      try {\n        {\n          ITarget.Name name = new ITarget.Name(\"jetbrains.mps.build.reduced.ReportFiles.report\");\n          ReportFiles_Facet.Target_report.Parameters props = properties.properties(name, ReportFiles_Facet.Target_report.Parameters.class);\n          if (MapSequence.fromMap(store).containsKey(\"jetbrains.mps.build.reduced.ReportFiles.report.writtenFiles\")) {\n            props.writtenFiles(null);\n          }\n          if (MapSequence.fromMap(store).containsKey(\"jetbrains.mps.build.reduced.ReportFiles.report.deletedFiles\")) {\n            props.deletedFiles(null);\n          }\n        }\n      } catch (RuntimeException re) {\n      }\n    }","id":105491,"modified_method":"public void loadValues(Map<String, String> store, IPropertiesPool properties) {\n      try {\n        {\n          ITarget.Name name = new ITarget.Name(\"jetbrains.mps.build.reduced.ReportFiles.report\");\n          ReportFiles_Facet.Target_report.Parameters props = properties.properties(name, ReportFiles_Facet.Target_report.Parameters.class);\n          if (MapSequence.fromMap(store).containsKey(\"jetbrains.mps.build.reduced.ReportFiles.report.writtenFiles\")) {\n            props.writtenFiles(null);\n          }\n          if (MapSequence.fromMap(store).containsKey(\"jetbrains.mps.build.reduced.ReportFiles.report.deletedFiles\")) {\n            props.deletedFiles(null);\n          }\n          if (MapSequence.fromMap(store).containsKey(\"jetbrains.mps.build.reduced.ReportFiles.report.keptFiles\")) {\n            props.keptFiles(null);\n          }\n          if (MapSequence.fromMap(store).containsKey(\"jetbrains.mps.build.reduced.ReportFiles.report.sourceModels\")) {\n            props.sourceModels(null);\n          }\n        }\n      } catch (RuntimeException re) {\n      }\n    }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"public <T> T createParameters(Class<T> cls, T copyFrom) {\n      T t = createParameters(cls);\n      if (t != null) {\n        ((Tuples._2) t).assign((Tuples._2) copyFrom);\n      }\n      return t;\n    }","id":105492,"modified_method":"public <T> T createParameters(Class<T> cls, T copyFrom) {\n      T t = createParameters(cls);\n      if (t != null) {\n        ((Tuples._4) t).assign((Tuples._4) copyFrom);\n      }\n      return t;\n    }","commit_id":"361b2b925283ea1f450bcf55a0ba4f29866299f1","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n   * Performs the query once the URL has been validated and the inputs have been\n   * parsed.  Further validation of arguments required per-method is performed\n   * within this method.\n   * <p>\n   * This currently supports two methods, <i>readactivity<\/i> and\n   * <i>readpopular<\/i>.\n   * <p>\n   * <b><i>readactivity<\/i><\/b> performs an ActivityFeed read and has required\n   * arguments of <i>clusterid<\/i> and <i>limit<\/i>.  Optionally, can also\n   * specify a <i>maxts<\/i> and <i>mints<\/i> for maximum and minimum timestamps.\n   * <p>\n   * <b><i>readpopular<\/i><\/b> performs a PopularFeed read and has required\n   * arguments of <i>clusterid<\/i>, <i>numhours<\/i>, and <i>limit<\/i>.\n   * Optionally, can also specify an <i>offset<\/i>. \n   * @param methodName method being performed\n   * @param args arguments of method\n   * @return string result\n   */\n  @Override\n  public QueryProviderResponse process(String methodName,\n      Map<String, String> args) {\n    if (this.reader == null) {\n      this.reader = new ClusterFeedReader(\n          getQueryProviderContext().getDataFabric());\n    }\n    String str = \"Received method \" + methodName + \" with args \" +\n        toString(args);\n    LOG.info(str);\n    System.out.println(str);\n    \n    // Determine if the methodName type and args are valid\n    // If they are valid, call specific method to perform query\n    // Currently only supported methods are 'readactivity' and 'readpopular'\n    \n    if (methodName.equals(\"readactivity\")) {\n      \n      // Requires clusterid and limit\n      if (!args.containsKey(\"clusterid\") ||\n          !args.containsKey(\"limit\")) {\n        String msg = \"Received 'readactivity' query but without a required \" +\n            \"argument (args=\" + toString(args) + \")\";\n        LOG.warn(msg);\n        return new QueryProviderResponse(Status.FAILED, msg, msg);\n      }\n      String clusteridStr = args.get(\"clusterid\");\n      String limitStr = args.get(\"limit\");\n      Integer clusterid = null;\n      Integer limit = null;\n      try {\n        clusterid = Integer.valueOf(clusteridStr);\n        limit = Integer.valueOf(limitStr);\n      } catch (NumberFormatException nfe) {\n        String msg =\"Numeric argument was not in an acceptable format \" +\n          \"(args=\" + toString(args) + \")\";\n        LOG.warn(msg, nfe);\n        return new QueryProviderResponse(Status.FAILED, msg, msg);\n      }\n      \n      // Check for additional arguments (first setting default values)\n      Long maxts = Long.MAX_VALUE;\n      Long mints = 0L;\n      try {\n        if (args.containsKey(\"maxts\")) {\n          maxts = Long.valueOf(args.get(\"maxts\"));\n        }\n        if (args.containsKey(\"mints\")) {\n          mints = Long.valueOf(args.get(\"mints\"));\n        }\n      } catch (NumberFormatException nfe) {\n        String msg = \"Numeric argument was not in an acceptable format \" +\n            \"(args=\" + toString(args) + \")\";\n        LOG.warn(msg, nfe);\n        return new QueryProviderResponse(Status.FAILED, msg, msg);\n      }\n      \n      // All arguments parsed and verified.  Call activity feed read method.\n      return new QueryProviderResponse(\n          executeActivityFeedRead(clusterid, limit, maxts, mints));\n      \n    } else if (methodName.equals(\"readpopular\")) {\n\n      // Requires clusterid, numhours, and limit\n      if (!args.containsKey(\"clusterid\") ||\n          !args.containsKey(\"numhours\") ||\n          !args.containsKey(\"limit\")) {\n        String msg = \"Received 'readpopular' query but without a required \" +\n          \"argument (args=\" + toString(args) + \")\";\n        LOG.warn(msg);\n        return new QueryProviderResponse(Status.FAILED, msg, msg);\n      }\n      String clusteridStr = args.get(\"clusterid\");\n      String numhoursStr = args.get(\"numhours\");\n      String limitStr = args.get(\"limit\");\n      Integer clusterid = null;\n      Integer numhours = null;\n      Integer limit = null;\n      try {\n        clusterid = Integer.valueOf(clusteridStr);\n        numhours = Integer.valueOf(numhoursStr);\n        limit = Integer.valueOf(limitStr);\n      } catch (NumberFormatException nfe) {\n        String msg = \"Numeric argument was not in an acceptable format \" +\n          \"(args=\" + toString(args) + \")\";\n        LOG.warn(msg, nfe);\n        return new QueryProviderResponse(Status.FAILED, msg, msg);\n      }\n      \n      // Check for additional arguments (first setting default values)\n      Integer offset = 0;\n      try {\n        if (args.containsKey(\"offset\")) {\n          offset = Integer.valueOf(args.get(\"offset\"));\n        }\n      } catch (NumberFormatException nfe) {\n        String msg = \"Numeric argument was not in an acceptable format \" +\n            \"(args=\" + toString(args) + \")\";\n        LOG.warn(msg, nfe);\n        return new QueryProviderResponse(Status.FAILED, msg, msg);\n      }\n      \n      // All arguments parsed and verified.  Call popular feed read method.\n      return new QueryProviderResponse(\n          executePopularFeedRead(clusterid, numhours, limit, offset));\n      \n    } else {\n      \n      // Invalid method\n      LOG.warn(\"Invalid read method.  method=\" + methodName + \", args=\" +\n          toString(args));\n      return null;\n    }\n  }","id":105493,"modified_method":"/**\n   * Performs the query once the URL has been validated and the inputs have been\n   * parsed.  Further validation of arguments required per-method is performed\n   * within this method.\n   * <p>\n   * This currently supports two methods, <i>readactivity<\/i> and\n   * <i>readpopular<\/i>.\n   * <p>\n   * <b><i>readactivity<\/i><\/b> performs an ActivityFeed read and has required\n   * arguments of <i>clusterid<\/i> and <i>limit<\/i>.  Optionally, can also\n   * specify a <i>maxts<\/i> and <i>mints<\/i> for maximum and minimum timestamps.\n   * <p>\n   * <b><i>readpopular<\/i><\/b> performs a PopularFeed read and has required\n   * arguments of <i>clusterid<\/i>, <i>numhours<\/i>, and <i>limit<\/i>.\n   * Optionally, can also specify an <i>offset<\/i> and <i>starttime<\/i>, which\n   * is treated as the start time for doing popular queries.\n   * @param methodName method being performed\n   * @param args arguments of method\n   * @return string result\n   */\n  @Override\n  public QueryProviderResponse process(String methodName,\n      Map<String, String> args) {\n    if (this.reader == null) {\n      this.reader = new ClusterFeedReader(this.clusterTable, this.topScoreTable,\n          getQueryProviderContext().getDataFabric());\n    }\n    if (args == null || args.isEmpty()) {\n      LOG.warn(\"Received request for method '\" + methodName + \"' but \" +\n          \"contained no arguments (args=\" + args + \")\");\n    }\n    String str = \"Received method \" + methodName + \" with args \" +\n        toString(args);\n    LOG.info(str);\n    \n    // Determine if the methodName type and args are valid\n    // If they are valid, call specific method to perform query\n    // Currently only supported methods are 'readactivity' and 'readpopular'\n    \n    if (methodName.equals(\"readactivity\")) {\n      \n      // Requires clusterid and limit\n      if (!args.containsKey(\"clusterid\") ||\n          !args.containsKey(\"limit\")) {\n        String msg = \"Received 'readactivity' query but without a required \" +\n            \"argument (args=\" + toString(args) + \")\";\n        LOG.warn(msg);\n        return new QueryProviderResponse(Status.FAILED, msg, msg);\n      }\n      String clusteridStr = args.get(\"clusterid\");\n      String limitStr = args.get(\"limit\");\n      Integer clusterid = null;\n      Integer limit = null;\n      try {\n        clusterid = Integer.valueOf(clusteridStr);\n        limit = Integer.valueOf(limitStr);\n      } catch (NumberFormatException nfe) {\n        String msg =\"Numeric argument was not in an acceptable format \" +\n          \"(args=\" + toString(args) + \")\";\n        LOG.warn(msg, nfe);\n        return new QueryProviderResponse(Status.FAILED, msg, msg);\n      }\n      \n      // Check for additional arguments (first setting default values)\n      Long maxts = Long.MAX_VALUE;\n      Long mints = 0L;\n      try {\n        if (args.containsKey(\"maxts\")) {\n          maxts = Long.valueOf(args.get(\"maxts\"));\n        }\n        if (args.containsKey(\"mints\")) {\n          mints = Long.valueOf(args.get(\"mints\"));\n        }\n      } catch (NumberFormatException nfe) {\n        String msg = \"Numeric argument was not in an acceptable format \" +\n            \"(args=\" + toString(args) + \")\";\n        LOG.warn(msg, nfe);\n        return new QueryProviderResponse(Status.FAILED, msg, msg);\n      }\n      \n      // All arguments parsed and verified.  Call activity feed read method.\n      return executeActivityFeedRead(clusterid, limit, maxts, mints);\n      \n    } else if (methodName.equals(\"readpopular\")) {\n\n      // Requires clusterid, numhours, and limit\n      if (!args.containsKey(\"clusterid\") ||\n          !args.containsKey(\"numhours\") ||\n          !args.containsKey(\"limit\")) {\n        String msg = \"Received 'readpopular' query but without a required \" +\n          \"argument (args=\" + toString(args) + \")\";\n        LOG.warn(msg);\n        return new QueryProviderResponse(Status.FAILED, msg, msg);\n      }\n      String clusteridStr = args.get(\"clusterid\");\n      String numhoursStr = args.get(\"numhours\");\n      String limitStr = args.get(\"limit\");\n      Integer clusterid = null;\n      Integer numhours = null;\n      Integer limit = null;\n      try {\n        clusterid = Integer.valueOf(clusteridStr);\n        numhours = Integer.valueOf(numhoursStr);\n        limit = Integer.valueOf(limitStr);\n      } catch (NumberFormatException nfe) {\n        String msg = \"Numeric argument was not in an acceptable format \" +\n          \"(args=\" + toString(args) + \")\";\n        LOG.warn(msg, nfe);\n        return new QueryProviderResponse(Status.FAILED, msg, msg);\n      }\n      \n      // Check for additional arguments (first setting default values)\n      Integer offset = 0;\n      Long starttime = System.currentTimeMillis();\n      try {\n        if (args.containsKey(\"offset\")) {\n          offset = Integer.valueOf(args.get(\"offset\"));\n        }\n        if (args.containsKey(\"starttime\")) {\n          starttime = Long.valueOf(args.get(\"starttime\"));\n        }\n      } catch (NumberFormatException nfe) {\n        String msg = \"Numeric argument was not in an acceptable format \" +\n            \"(args=\" + toString(args) + \")\";\n        LOG.warn(msg, nfe);\n        return new QueryProviderResponse(Status.FAILED, msg, msg);\n      }\n      \n      // All arguments parsed and verified.  Call popular feed read method.\n      return executePopularFeedRead(clusterid, starttime, numhours, limit,\n          offset);\n      \n    } else {\n      \n      // Invalid method\n      String msg = \"Invalid read method.  method=\" + methodName + \", args=\" +\n          toString(args);\n      LOG.error(msg);\n      return new QueryProviderResponse(Status.FAILED, msg, msg);\n    }\n  }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"private String executeActivityFeedRead(Integer clusterid, Integer limit,\n      Long maxts, Long mints) {\n    try {\n      ActivityFeed feed =\n          reader.getActivityFeed(clusterid, limit, maxts, mints);\n      return ActivityFeed.toJson(feed);\n    } catch (OperationException e) {\n      LOG.warn(\"Exception reading activity feed (clusterid= \" + clusterid +\n          \", limit=\" + limit + \", maxts=\" + maxts + \", mints=\" + mints + \")\",\n          e);\n      return null;\n    }\n  }","id":105494,"modified_method":"private QueryProviderResponse executeActivityFeedRead(Integer clusterid,\n      Integer limit, Long maxts, Long mints) {\n    try {\n      ActivityFeed feed =\n          reader.getActivityFeed(clusterid, limit, maxts, mints);\n      return new QueryProviderResponse(ActivityFeed.toJson(feed));\n    } catch (OperationException e) {\n      String msg = \"Exception reading activity feed (clusterid= \" + clusterid +\n          \", limit=\" + limit + \", maxts=\" + maxts + \", mints=\" + mints + \")\";\n      LOG.warn(msg, e);\n      return new QueryProviderResponse(Status.FAILED, msg, msg);\n    }\n  }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"private String executePopularFeedRead(Integer clusterid, Integer numhours,\n      Integer limit, Integer offset) {\n    try {\n      PopularFeed feed =\n          reader.getPopularFeed(clusterid, numhours, limit, offset);\n      List<PopularFeedEntry> entries = feed.getFeed(limit + offset);\n      String jsonResult = null;\n      if (offset == 0) {\n        jsonResult = PopularFeed.toJson(entries);\n      } else if (offset >= entries.size()) {\n        entries.clear();\n        jsonResult = PopularFeed.toJson(entries);\n      } else {\n        entries = entries.subList(offset, entries.size());\n        jsonResult = PopularFeed.toJson(entries);\n      }\n      return jsonResult;\n    } catch (OperationException e) {\n      LOG.warn(\"Exception reading popular feed (clusterid= \" + clusterid +\n          \", limit=\" + limit + \", numhours=\" + numhours + \", offset=\" + offset,\n          e);\n      return null;\n    }\n  }","id":105495,"modified_method":"private QueryProviderResponse executePopularFeedRead(Integer clusterid,\n      Long starttime, Integer numhours, Integer limit, Integer offset) {\n    try {\n      PopularFeed feed = reader.getPopularFeed(clusterid,\n          Helpers.hour(starttime), numhours, limit, offset);\n      List<PopularFeedEntry> entries = feed.getFeed(limit + offset);\n      String jsonResult = null;\n      if (offset == 0) {\n        jsonResult = PopularFeed.toJson(entries);\n      } else if (offset >= entries.size()) {\n        entries.clear();\n        jsonResult = PopularFeed.toJson(entries);\n      } else {\n        entries = entries.subList(offset, entries.size());\n        jsonResult = PopularFeed.toJson(entries);\n      }\n      return new QueryProviderResponse(jsonResult);\n    } catch (OperationException e) {\n      String msg = \"Exception reading popular feed (clusterid= \" + clusterid +\n          \", limit=\" + limit + \", numhours=\" + numhours + \", offset=\" + offset;\n      LOG.warn(msg, e);\n      return new QueryProviderResponse(Status.FAILED, msg, msg);\n    }\n  }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"private String toString(Map<String, String> args) {\n    String str = \"\";\n    for (Map.Entry<String, String> arg : args.entrySet()) {\n      str += arg.getKey() + \"=\" + arg.getValue() + \" \";\n    }\n    return str.substring(0, str.length() - 1);\n  }","id":105496,"modified_method":"private String toString(Map<String, String> args) {\n    String str = \"(\";\n    for (Map.Entry<String, String> arg : args.entrySet()) {\n      str += arg.getKey() + \"=\" + arg.getValue() + \" \";\n    }\n    str += \")\";\n    return str.substring(0, str.length() - 1);\n  }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"public ClusterFeedReader(DataFabric fabric) {\n    this.fabric = fabric;\n    this.clusterTable = new ClusterTable(fabric, null);\n    this.topScoreTable = new SortedCounterTable(\"topScores\", fabric, null,\n        new SortedCounterTable.SortedCounterConfig());\n  }","id":105497,"modified_method":"public ClusterFeedReader(ClusterTable clusterTable,\n      SortedCounterTable topScoreTable, DataFabric fabric) {\n    this.clusterTable = clusterTable;\n    this.topScoreTable = topScoreTable;\n    this.fabric = fabric;\n  }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Writes the specified cluster information for the specified cluster id.\n   * <p>\n   * This operation is asynchronous and will be performed as part of the flowlet\n   * process batch.\n   * @param clusterId id of cluster\n   * @param clusterInfo map of category name to weight in cluster\n   */\n  public void writeCluster(int clusterId, Map<String,Double> clusterInfo) {\n    int len = clusterInfo.size();\n    List<byte[]> strings = new ArrayList<byte[]>(len);\n    List<byte[]> doubles = new ArrayList<byte[]>(len);\n    for (Map.Entry<String,Double> info : clusterInfo.entrySet()) {\n      strings.add(Bytes.toBytes(info.getKey()));\n      doubles.add(Bytes.toBytes(info.getValue().doubleValue()));\n    }\n    this.collector.add(new Write(makeRow(clusterId),\n        strings.toArray(new byte[len][]), doubles.toArray(new byte[len][])));\n  }","id":105498,"modified_method":"/**\n   * Writes the specified cluster information for the specified cluster id.\n   * <p>\n   * This operation is asynchronous and will be performed as part of the flowlet\n   * process batch.\n   * @param clusterId id of cluster\n   * @param clusterInfo map of category name to weight in cluster\n   */\n  public void writeCluster(int clusterId, Map<String,Double> clusterInfo) {\n    int len = clusterInfo.size();\n    List<byte[]> strings = new ArrayList<byte[]>(len);\n    List<byte[]> doubles = new ArrayList<byte[]>(len);\n    for (Map.Entry<String,Double> info : clusterInfo.entrySet()) {\n      strings.add(Bytes.toBytes(info.getKey()));\n      doubles.add(Bytes.toBytes(info.getValue().doubleValue()));\n    }\n    getCollector().add(new Write(getDataSetId(), makeRow(clusterId),\n        strings.toArray(new byte[len][]), doubles.toArray(new byte[len][])));\n  }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"public void resetClusters(int maxClusterNumber) {\n    for (int i=1;i<=maxClusterNumber;i++) {\n      this.collector.add(new Delete(makeRow(i)));\n    }\n  }","id":105499,"modified_method":"public void resetClusters(int maxClusterNumber) {\n    for (int i=1;i<=maxClusterNumber;i++) {\n      getCollector().add(new Delete(makeRow(i)));\n    }\n  }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Reads the cluster information for the specified cluster id.  Returns null\n   * if no cluster information found.\n   * <p>\n   * This operation is synchronous.\n   * @param clusterId\n   * @return cluster info containing map from classification/category to weight\n   * @throws OperationException\n   */\n  public Map<String,Double> readCluster(int clusterId)\n      throws OperationException {\n    OperationResult<Map<byte[],byte[]>> result =\n        this.fabric.read(new ReadColumnRange(makeRow(clusterId), null));\n    if (result.isEmpty()) return null;\n    Map<byte[],byte[]> map = result.getValue();\n    Map<String,Double> ret = new TreeMap<String,Double>();\n    for (Map.Entry<byte[],byte[]> entry : map.entrySet()) {\n      ret.put(Bytes.toString(entry.getKey()), Bytes.toDouble(entry.getValue()));\n    }\n    return ret;\n  }","id":105500,"modified_method":"/**\n   * Reads the cluster information for the specified cluster id.  Returns null\n   * if no cluster information found.\n   * <p>\n   * This operation is synchronous.\n   * @param clusterId\n   * @return cluster info containing map from classification/category to weight\n   * @throws OperationException\n   */\n  public Map<String,Double> readCluster(int clusterId)\n      throws OperationException {\n    OperationResult<Map<byte[],byte[]>> result =\n        getDataFabric().read(new ReadColumnRange(getDataSetId(),\n            makeRow(clusterId), null));\n    if (result.isEmpty()) return null;\n    Map<byte[],byte[]> map = result.getValue();\n    Map<String,Double> ret = new TreeMap<String,Double>();\n    for (Map.Entry<byte[],byte[]> entry : map.entrySet()) {\n      ret.put(Bytes.toString(entry.getKey()), Bytes.toDouble(entry.getValue()));\n    }\n    return ret;\n  }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Writes the specified category and weight into the specified cluster.\n   * <p>\n   * Updates any existing weight for this category and cluster.\n   * <p>\n   * This operation is asynchronous and will be performed as part of the flowlet\n   * process batch.\n   * @param clusterId\n   * @param category\n   * @param weight\n   */\n  public void writeCluster(int clusterId, String category, Double weight) {\n    this.collector.add(new Write(makeRow(clusterId), Bytes.toBytes(category),\n        Bytes.toBytes(weight)));\n  }","id":105501,"modified_method":"/**\n   * Writes the specified category and weight into the specified cluster.\n   * <p>\n   * Updates any existing weight for this category and cluster.\n   * <p>\n   * This operation is asynchronous and will be performed as part of the flowlet\n   * process batch.\n   * @param clusterId\n   * @param category\n   * @param weight\n   */\n  public void writeCluster(int clusterId, String category, Double weight) {\n    getCollector().add(new Write(getDataSetId(), makeRow(clusterId),\n        Bytes.toBytes(category), Bytes.toBytes(weight)));\n  }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void process(Tuple tuple, TupleContext context,\n        OutputCollector collector) {\n      Integer maxClusterId = tuple.get(\"maxClusterId\");\n      String msg = tuple.get(\"msg\");\n      System.out.println(\"Cluster Reset.  Message: \" + msg);\n      this.clusterTable.resetClusters(maxClusterId);\n    }","id":105502,"modified_method":"@Override\n    public void process(Tuple tuple, TupleContext context,\n        OutputCollector collector) {\n      Integer maxClusterId = tuple.get(\"maxClusterId\");\n      this.clusterTable.resetClusters(maxClusterId);\n    }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void initialize() {\n      this.clusterTable = new ClusterTable(getFlowletContext().getDataFabric(),\n          getFlowletContext());\n    }","id":105503,"modified_method":"@Override\n    public void initialize() {\n      this.clusterTable = new ClusterTable();\n      getFlowletContext().getDataSetRegistry().registerDataSet(\n          this.clusterTable);\n    }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void process(Tuple tuple, TupleContext context,\n        OutputCollector collector) {\n\n      // Grab CSV string from event-stream tuple\n      String csvEventString = new String((byte[])tuple.get(\"body\"));\n\n      // Parse as CSV\n      String [] parsed = null;\n      try {\n        parsed = this.parser.parseLine(csvEventString);\n        if (parsed.length != 3) throw new IOException();\n      } catch (IOException e) {\n        throw new RuntimeException(\"Invalid input string: \" + csvEventString);\n      }\n\n      // Check if special flag to reset clusters exists\n      if (parsed[0].equals(Constants.CLUSTER_RESET_FLAG)) {\n        // CSV = reset_clusters,max_cluster_id,\"msg\"\n        Tuple resetTuple = new TupleBuilder()\n            .set(\"maxClusterId\", Integer.valueOf(parsed[1]))\n            .set(\"msg\", parsed[2])\n            .create();\n        collector.add(\"reset_output\", resetTuple);\n        return;\n      }\n\n      // Format of CSV string is: clusterid,category,weight\n      Tuple clusterTuple = new TupleBuilder()\n          .set(\"clusterId\", Integer.valueOf(parsed[0]))\n          .set(\"category\", parsed[1])\n          .set(\"weight\", Double.valueOf(parsed[2]))\n          .create();\n      System.out.println(\"Generated tuple: \" + clusterTuple.toString());\n      collector.add(\"writer_output\", clusterTuple);\n    }","id":105504,"modified_method":"@Override\n    public void process(Tuple tuple, TupleContext context,\n        OutputCollector collector) {\n\n      // Grab CSV string from event-stream tuple\n      String csvEventString = new String((byte[])tuple.get(\"body\"));\n\n      // Parse as CSV\n      String [] parsed = null;\n      try {\n        parsed = this.parser.parseLine(csvEventString);\n        if (parsed.length != 3) throw new IOException();\n      } catch (IOException e) {\n        throw new RuntimeException(\"Invalid input string: \" + csvEventString);\n      }\n\n      // Check if special flag to reset clusters exists\n      if (parsed[0].equals(Constants.CLUSTER_RESET_FLAG)) {\n        // CSV = reset_clusters,max_cluster_id,\"msg\"\n        Tuple resetTuple = new TupleBuilder()\n            .set(\"maxClusterId\", Integer.valueOf(parsed[1]))\n            .set(\"msg\", parsed[2])\n            .create();\n        collector.add(\"reset_output\", resetTuple);\n        return;\n      }\n\n      // Format of CSV string is: clusterid,category,weight\n      Tuple clusterTuple = new TupleBuilder()\n          .set(\"clusterId\", Integer.valueOf(parsed[0]))\n          .set(\"category\", parsed[1])\n          .set(\"weight\", Double.valueOf(parsed[2]))\n          .create();\n      collector.add(\"writer_output\", clusterTuple);\n    }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void initialize() {\n      this.clusterTable = new ClusterTable(getFlowletContext().getDataFabric(),\n          getFlowletContext());\n    }","id":105505,"modified_method":"@Override\n    public void initialize() {\n      this.clusterTable = new ClusterTable();\n      getFlowletContext().getDataSetRegistry().registerDataSet(\n          this.clusterTable);\n    }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void initialize() {\n      this.topScoreTable = new SortedCounterTable(\"topScores\",\n          getFlowletContext().getDataFabric(), getFlowletContext(),\n          new SortedCounterTable.SortedCounterConfig());\n    }","id":105506,"modified_method":"@Override\n    public void initialize() {\n      this.topScoreTable = new SortedCounterTable(\"topScores\",\n          new SortedCounterTable.SortedCounterConfig());\n      getFlowletContext().getDataSetRegistry().registerDataSet(\n          this.topScoreTable);\n    }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void initialize() {\n      this.productTable = new ProductTable(getFlowletContext().getDataFabric(),\n          getFlowletContext());\n      this.productUpdateCountTable = new CounterTable(\"productUpdates\",\n          getFlowletContext().getDataFabric(), getFlowletContext());\n      this.allTimeScoreTable = new CounterTable(\"allTimeScores\",\n          getFlowletContext().getDataFabric(), getFlowletContext());\n      this.topScoreTable = new SortedCounterTable(\"topScores\",\n          getFlowletContext().getDataFabric(), getFlowletContext(),\n          new SortedCounterTable.SortedCounterConfig());\n    }","id":105507,"modified_method":"@Override\n    public void initialize() {\n      this.productTable = new ProductTable();\n      getFlowletContext().getDataSetRegistry().registerDataSet(\n          this.productTable);\n      this.productUpdateCountTable = new CounterTable(\"productUpdates\");\n      getFlowletContext().getDataSetRegistry().registerDataSet(\n          this.productUpdateCountTable);\n      this.allTimeScoreTable = new CounterTable(\"allTimeScores\");\n      getFlowletContext().getDataSetRegistry().registerDataSet(\n          this.allTimeScoreTable);\n      this.topScoreTable = new SortedCounterTable(\"topScores\",\n          new SortedCounterTable.SortedCounterConfig());\n      getFlowletContext().getDataSetRegistry().registerDataSet(\n          this.topScoreTable);\n    }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void initialize() {\n      this.topScoreTable = new SortedCounterTable(\"topScores\",\n          getFlowletContext().getDataFabric(), getFlowletContext(),\n          new SortedCounterTable.SortedCounterConfig());\n    }","id":105508,"modified_method":"@Override\n    public void initialize() {\n      this.topScoreTable = new SortedCounterTable(\"topScores\",\n          new SortedCounterTable.SortedCounterConfig());\n      getFlowletContext().getDataSetRegistry().registerDataSet(\n          this.topScoreTable);\n    }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public void initialize() {\n      this.productActionCountTable = new CounterTable(\"productActions\",\n          getFlowletContext().getDataFabric(), getFlowletContext());\n      this.allTimeScoreTable = new CounterTable(\"allTimeScores\",\n          getFlowletContext().getDataFabric(), getFlowletContext());\n      this.topScoreTable = new SortedCounterTable(\"topScores\",\n          getFlowletContext().getDataFabric(), getFlowletContext(),\n          new SortedCounterTable.SortedCounterConfig());\n    }","id":105509,"modified_method":"@Override\n    public void initialize() {\n      this.productActionCountTable = new CounterTable(\"productActions\");\n      getFlowletContext().getDataSetRegistry().registerDataSet(\n          this.productActionCountTable);\n      this.allTimeScoreTable = new CounterTable(\"allTimeScores\");\n      getFlowletContext().getDataSetRegistry().registerDataSet(\n          this.allTimeScoreTable);\n      this.topScoreTable = new SortedCounterTable(\"topScores\",\n          new SortedCounterTable.SortedCounterConfig());\n      getFlowletContext().getDataSetRegistry().registerDataSet(\n          this.topScoreTable);\n    }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testStreamsFlowsQueries() throws Exception {\n\n    // Start the cluster writer flow\n    ClusterWriterFlow clusterWriterFlow = new ClusterWriterFlow();\n    TestFlowHandle clusterWriterFlowHandle = startFlow(clusterWriterFlow);\n    assertTrue(clusterWriterFlowHandle.isSuccess());\n    \n    // Start the social action flow\n    SocialActionFlow socialActionFlow = new SocialActionFlow();\n    TestFlowHandle socialActionFlowHandle = startFlow(socialActionFlow);\n    assertTrue(socialActionFlowHandle.isSuccess());\n    \n    // Write sample-clusters.csv to stream for clusters\n    int numClusterEntries = writeFileToStream(\"sample-clusters.csv\",\n        ClusterWriterFlow.inputStream, 1000);\n    \n    // Wait for number of cluster entries to be written\n    while (ClusterWriterFlow.ClusterWriter.numProcessed < numClusterEntries) {\n      System.out.println(\"Waiting for cluster writer flowlet...\");\n      Thread.sleep(500);\n    }\n    \n    // Write sample-actions.json to stream for social actions\n    int numActions = writeFileToStream(\"sample-actions.json\",\n        SocialActionFlow.inputStream, 1000);\n    \n    // Wait for number of actions to be written to both final flowlets\n    while (SocialActionFlow.PopularFeedUpdaterFlowlet.numProcessed <\n        numActions) {\n      System.out.println(\n          \"Waiting for social action popular updater flowlet...\");\n      Thread.sleep(500);\n    }\n    while (SocialActionFlow.ActivityFeedUpdaterFlowlet.numProcessed <\n        numActions) {\n      System.out.println(\n          \"Waiting for social action activity updater flowlet...\");\n      Thread.sleep(500);\n    }\n    \n    // Verify flow processing results using feed reader queries\n    ClusterFeedReader feedReader = new ClusterFeedReader(getDataFabric());\n\n    // FIRST HOUR\n    Long firstHour = 1349125200000L;\n    Long secondHour = 1349128800000L;\n    Long thirdHour = 1349132400000L;\n    \n    // Read first hour.  Should have pop entries all the same score\n    // and activity feed in descending product_id order for clusters 1 and 3.\n    \n    // Cluster 1 and 3 pop\n    PopularFeed popFeed = feedReader.getPopularFeed(1, firstHour, 1, 15, 0);\n    List<PopularFeedEntry> popEntries = popFeed.getFeed(15);\n    assertEquals(10, popEntries.size());\n    assertDescendingScore(popEntries);\n    Long expectedScore = SocialAction.SocialActionType.YAY.getScore();\n    for (PopularFeedEntry entry : popEntries) {\n      assertEquals(expectedScore, entry.score);\n    }\n    popFeed = feedReader.getPopularFeed(3, firstHour, 1, 5, 0);\n    popEntries = popFeed.getFeed(5);\n    assertDescendingScore(popEntries);\n    assertEquals(5, popEntries.size());\n    for (PopularFeedEntry entry : popEntries) {\n      assertEquals(expectedScore, entry.score);\n    }\n    \n    // Cluster 1 and 3 activity\n    ActivityFeed activityFeed =\n        feedReader.getActivityFeed(1, 15, secondHour, firstHour);\n    List<ActivityFeedEntry> activityEntries = activityFeed.getEntireFeed();\n    assertEquals(10, activityEntries.size());\n    assertDescendingTime(activityEntries);\n    activityFeed =\n        feedReader.getActivityFeed(3, 5, secondHour, firstHour);\n    activityEntries = activityFeed.getEntireFeed();\n    assertEquals(5, activityEntries.size());\n    assertDescendingTime(activityEntries);\n    System.out.println(ActivityFeed.toJson(activityFeed));\n    \n    // Cluster 2 should be empty for pop and activity\n    popFeed = feedReader.getPopularFeed(2, firstHour, 1, 15, 0);\n    popEntries = popFeed.getFeed(15);\n    assertEquals(0, popEntries.size());\n    activityFeed = feedReader.getActivityFeed(2, 15, secondHour, firstHour);\n    activityEntries = activityFeed.getEntireFeed();\n    assertEquals(0, activityEntries.size());\n    \n    // Read first and second hour.\n    // Every product has been liked N times where N is id.\n    \n    Long likeScore = SocialAction.SocialActionType.LIKE.getScore();\n    popFeed = feedReader.getPopularFeed(1, secondHour, 2, 15, 0);\n    popEntries = popFeed.getFeed(15);\n    assertEquals(10, popEntries.size());\n    Long product_id = 10L;\n    for (PopularFeedEntry entry : popEntries) {\n      assertEquals(product_id, entry.product_id);\n      Long score = expectedScore + (product_id * likeScore);\n      assertEquals(\"For product_id \" + product_id + \", expected score \" + score\n          + \" but found score \" + entry.score, score, entry.score);\n      product_id--;\n    }\n    popFeed = feedReader.getPopularFeed(3, secondHour, 2, 15, 0);\n    popEntries = popFeed.getFeed(15);\n    assertEquals(10, popEntries.size());\n    product_id = 10L;\n    for (PopularFeedEntry entry : popEntries) {\n      assertEquals(product_id, entry.product_id);\n      Long score = expectedScore + (product_id * likeScore);\n      assertEquals(score, entry.score);\n      product_id--;\n    }\n    \n    // Cluster 1 and 3 activity\n    activityFeed =\n        feedReader.getActivityFeed(1, 15, thirdHour, firstHour);\n    activityEntries = activityFeed.getEntireFeed();\n    assertEquals(10, activityEntries.size());\n    assertDescendingTime(activityEntries);\n    activityFeed =\n        feedReader.getActivityFeed(3, 5, thirdHour, firstHour);\n    activityEntries = activityFeed.getEntireFeed();\n    assertEquals(5, activityEntries.size());\n    assertDescendingTime(activityEntries);\n    \n    // Cluster 2 should still be empty\n    popFeed = feedReader.getPopularFeed(2, secondHour, 2, 15, 0);\n    popEntries = popFeed.getFeed(15);\n    assertEquals(0, popEntries.size());\n    activityFeed = feedReader.getActivityFeed(2, 15, thirdHour, firstHour);\n    activityEntries = activityFeed.getEntireFeed();\n    assertEquals(0, activityEntries.size());\n    \n    // Read all three hours now.\n    // Cluster 1 should not change at all, cluster 2 and 3 will have full checks\n    \n    // Verify cluster 1 is the same\n    popFeed = feedReader.getPopularFeed(1, thirdHour, 3, 15, 0);\n    popEntries = popFeed.getFeed(15);\n    assertEquals(10, popEntries.size());\n    product_id = 10L;\n    for (PopularFeedEntry entry : popEntries) {\n      assertEquals(product_id, entry.product_id);\n      Long score = expectedScore + (product_id * likeScore);\n      assertEquals(score, entry.score);\n      product_id--;\n    }\n    \n    // Cluster 2 is made up of only the third hour of activity categories\n    // Explicitly verify cluster 2 activity feed\n    activityFeed =\n        feedReader.getActivityFeed(2, 10, Long.MAX_VALUE, firstHour);\n    activityEntries = activityFeed.getEntireFeed();\n    assertEquals(2, activityEntries.size());\n    assertDescendingTime(activityEntries);\n    assertTrue(activityEntries.get(0).equals(\n        new ActivityFeedEntry(1349132435000L, 230L, 30L, likeScore)\n            .addEntry(31L, 12 * likeScore)));\n    assertTrue(activityEntries.get(1).equals(\n        new ActivityFeedEntry(1349132432000L, 220L, 20L, likeScore)\n            .addEntry(21L, 12 * likeScore)));\n    \n    // Cluster 2 pop has four products, check explicitly\n    popFeed = feedReader.getPopularFeed(2, thirdHour, 3, 15, 0);\n    popEntries = popFeed.getFeed(15);\n    assertEquals(4, popEntries.size());\n    assertTrue(popEntries.get(0).equals(\n        new PopularFeedEntry(31L, likeScore * 12)));\n    assertTrue(popEntries.get(1).equals(\n        new PopularFeedEntry(21L, likeScore * 12)));\n    assertTrue(popEntries.get(2).equals(\n        new PopularFeedEntry(30L, likeScore)));\n    assertTrue(popEntries.get(3).equals(\n        new PopularFeedEntry(20L, likeScore)));\n    \n    // Verify count and properties on cluster 3\n    \n    // Pop cluster 3\n    popFeed = feedReader.getPopularFeed(3, thirdHour, 3, 15, 0);\n    popEntries = popFeed.getFeed(15);\n    assertEquals(14, popEntries.size());\n    assertDescendingScore(popEntries);\n    // Cluster 3 activity\n    activityFeed =\n        feedReader.getActivityFeed(3, 15, Long.MAX_VALUE, firstHour);\n    activityEntries = activityFeed.getEntireFeed();\n    assertEquals(12, activityEntries.size());\n    assertDescendingTime(activityEntries);\n  }","id":105510,"modified_method":"@Test\n  public void testStreamsFlowsQueries() throws Exception {\n\n    // Start the cluster writer flow\n    ClusterWriterFlow clusterWriterFlow = new ClusterWriterFlow();\n    TestFlowHandle clusterWriterFlowHandle = startFlow(clusterWriterFlow);\n    assertTrue(clusterWriterFlowHandle.isSuccess());\n    \n    // Start the social action flow\n    SocialActionFlow socialActionFlow = new SocialActionFlow();\n    TestFlowHandle socialActionFlowHandle = startFlow(socialActionFlow);\n    assertTrue(socialActionFlowHandle.isSuccess());\n    \n    // Write sample-clusters.csv to stream for clusters\n    int numClusterEntries = writeFileToStream(\"sample-clusters.csv\",\n        ClusterWriterFlow.inputStream, 1000);\n    \n    // Wait for number of cluster entries to be written\n    while (ClusterWriterFlow.ClusterWriter.numProcessed < numClusterEntries) {\n      System.out.println(\"Waiting for cluster writer flowlet...\");\n      Thread.sleep(500);\n    }\n    \n    // Write sample-actions.json to stream for social actions\n    int numActions = writeFileToStream(\"sample-actions.json\",\n        SocialActionFlow.inputStream, 1000);\n    \n    // Wait for number of actions to be written to both final flowlets\n    while (SocialActionFlow.PopularFeedUpdaterFlowlet.numProcessed <\n        numActions) {\n      System.out.println(\n          \"Waiting for social action popular updater flowlet...\");\n      Thread.sleep(500);\n    }\n    while (SocialActionFlow.ActivityFeedUpdaterFlowlet.numProcessed <\n        numActions) {\n      System.out.println(\n          \"Waiting for social action activity updater flowlet...\");\n      Thread.sleep(500);\n    }\n    \n    // Verify flow processing results using feed reader queries\n    ClusterTable clusterTable = new ClusterTable();\n    getDataSetRegistry().registerDataSet(clusterTable);\n    SortedCounterTable topScoreTable = new SortedCounterTable(\"topScores\",\n        new SortedCounterTable.SortedCounterConfig());\n    getDataSetRegistry().registerDataSet(topScoreTable);\n    ClusterFeedReader feedReader = new ClusterFeedReader(clusterTable,\n        topScoreTable, getDataFabric());\n\n    // FIRST HOUR\n    Long firstHour = 1349125200000L;\n    Long secondHour = 1349128800000L;\n    Long thirdHour = 1349132400000L;\n    \n    // Read first hour.  Should have pop entries all the same score\n    // and activity feed in descending product_id order for clusters 1 and 3.\n    \n    // Cluster 1 and 3 pop\n    PopularFeed popFeed = feedReader.getPopularFeed(1, firstHour, 1, 15, 0);\n    List<PopularFeedEntry> popEntries = popFeed.getFeed(15);\n    assertEquals(10, popEntries.size());\n    assertDescendingScore(popEntries);\n    Long expectedScore = SocialAction.SocialActionType.YAY.getScore();\n    for (PopularFeedEntry entry : popEntries) {\n      assertEquals(expectedScore, entry.score);\n    }\n    popFeed = feedReader.getPopularFeed(3, firstHour, 1, 5, 0);\n    popEntries = popFeed.getFeed(5);\n    assertDescendingScore(popEntries);\n    assertEquals(5, popEntries.size());\n    for (PopularFeedEntry entry : popEntries) {\n      assertEquals(expectedScore, entry.score);\n    }\n    \n    // Cluster 1 and 3 activity\n    ActivityFeed activityFeed =\n        feedReader.getActivityFeed(1, 15, secondHour, firstHour);\n    List<ActivityFeedEntry> activityEntries = activityFeed.getEntireFeed();\n    assertEquals(10, activityEntries.size());\n    assertDescendingTime(activityEntries);\n    activityFeed =\n        feedReader.getActivityFeed(3, 5, secondHour, firstHour);\n    activityEntries = activityFeed.getEntireFeed();\n    assertEquals(5, activityEntries.size());\n    assertDescendingTime(activityEntries);\n    System.out.println(ActivityFeed.toJson(activityFeed));\n    \n    // Cluster 2 should be empty for pop and activity\n    popFeed = feedReader.getPopularFeed(2, firstHour, 1, 15, 0);\n    popEntries = popFeed.getFeed(15);\n    assertEquals(0, popEntries.size());\n    activityFeed = feedReader.getActivityFeed(2, 15, secondHour, firstHour);\n    activityEntries = activityFeed.getEntireFeed();\n    assertEquals(0, activityEntries.size());\n    \n    // Read first and second hour.\n    // Every product has been liked N times where N is id.\n    \n    Long likeScore = SocialAction.SocialActionType.LIKE.getScore();\n    popFeed = feedReader.getPopularFeed(1, secondHour, 2, 15, 0);\n    popEntries = popFeed.getFeed(15);\n    assertEquals(10, popEntries.size());\n    Long product_id = 10L;\n    for (PopularFeedEntry entry : popEntries) {\n      assertEquals(product_id, entry.product_id);\n      Long score = expectedScore + (product_id * likeScore);\n      assertEquals(\"For product_id \" + product_id + \", expected score \" + score\n          + \" but found score \" + entry.score, score, entry.score);\n      product_id--;\n    }\n    popFeed = feedReader.getPopularFeed(3, secondHour, 2, 15, 0);\n    popEntries = popFeed.getFeed(15);\n    assertEquals(10, popEntries.size());\n    product_id = 10L;\n    for (PopularFeedEntry entry : popEntries) {\n      assertEquals(product_id, entry.product_id);\n      Long score = expectedScore + (product_id * likeScore);\n      assertEquals(score, entry.score);\n      product_id--;\n    }\n    \n    // Cluster 1 and 3 activity\n    activityFeed =\n        feedReader.getActivityFeed(1, 15, thirdHour, firstHour);\n    activityEntries = activityFeed.getEntireFeed();\n    assertEquals(10, activityEntries.size());\n    assertDescendingTime(activityEntries);\n    activityFeed =\n        feedReader.getActivityFeed(3, 5, thirdHour, firstHour);\n    activityEntries = activityFeed.getEntireFeed();\n    assertEquals(5, activityEntries.size());\n    assertDescendingTime(activityEntries);\n    \n    // Cluster 2 should still be empty\n    popFeed = feedReader.getPopularFeed(2, secondHour, 2, 15, 0);\n    popEntries = popFeed.getFeed(15);\n    assertEquals(0, popEntries.size());\n    activityFeed = feedReader.getActivityFeed(2, 15, thirdHour, firstHour);\n    activityEntries = activityFeed.getEntireFeed();\n    assertEquals(0, activityEntries.size());\n    \n    // Read all three hours now.\n    // Cluster 1 should not change at all, cluster 2 and 3 will have full checks\n    \n    // Verify cluster 1 is the same\n    popFeed = feedReader.getPopularFeed(1, thirdHour, 3, 15, 0);\n    popEntries = popFeed.getFeed(15);\n    assertEquals(10, popEntries.size());\n    product_id = 10L;\n    for (PopularFeedEntry entry : popEntries) {\n      assertEquals(product_id, entry.product_id);\n      Long score = expectedScore + (product_id * likeScore);\n      assertEquals(score, entry.score);\n      product_id--;\n    }\n    \n    // Cluster 2 is made up of only the third hour of activity categories\n    // Explicitly verify cluster 2 activity feed\n    activityFeed =\n        feedReader.getActivityFeed(2, 10, Long.MAX_VALUE, firstHour);\n    activityEntries = activityFeed.getEntireFeed();\n    assertEquals(2, activityEntries.size());\n    assertDescendingTime(activityEntries);\n    assertTrue(activityEntries.get(0).equals(\n        new ActivityFeedEntry(1349132435000L, 230L, 30L, likeScore)\n            .addEntry(31L, 12 * likeScore)));\n    assertTrue(activityEntries.get(1).equals(\n        new ActivityFeedEntry(1349132432000L, 220L, 20L, likeScore)\n            .addEntry(21L, 12 * likeScore)));\n    \n    // Cluster 2 pop has four products, check explicitly\n    popFeed = feedReader.getPopularFeed(2, thirdHour, 3, 15, 0);\n    popEntries = popFeed.getFeed(15);\n    assertEquals(4, popEntries.size());\n    assertTrue(popEntries.get(0).equals(\n        new PopularFeedEntry(31L, likeScore * 12)));\n    assertTrue(popEntries.get(1).equals(\n        new PopularFeedEntry(21L, likeScore * 12)));\n    assertTrue(popEntries.get(2).equals(\n        new PopularFeedEntry(30L, likeScore)));\n    assertTrue(popEntries.get(3).equals(\n        new PopularFeedEntry(20L, likeScore)));\n    \n    // Verify count and properties on cluster 3\n    \n    // Pop cluster 3\n    popFeed = feedReader.getPopularFeed(3, thirdHour, 3, 15, 0);\n    popEntries = popFeed.getFeed(15);\n    assertEquals(14, popEntries.size());\n    assertDescendingScore(popEntries);\n    // Cluster 3 activity\n    activityFeed =\n        feedReader.getActivityFeed(3, 15, Long.MAX_VALUE, firstHour);\n    activityEntries = activityFeed.getEntireFeed();\n    assertEquals(12, activityEntries.size());\n    assertDescendingTime(activityEntries);\n  }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test(timeout = 20000)\n  public void testClusterWriterFlow() throws Exception {\n    // Get references to tables\n    ClusterTable clusterTable =\n        new ClusterTable(getDataFabric(), getRegistry());\n\n    // Instantiate cluster writer feed flow\n    ClusterWriterFlow clusterWriterFlow = new ClusterWriterFlow();\n\n    // Start the flow\n    TestFlowHandle flowHandle = startFlow(clusterWriterFlow);\n    assertTrue(flowHandle.isSuccess());\n\n    // Generate a clear event and wait for it to be processed\n    int numParsed = ClusterWriterFlow.ClusterSourceParser.numProcessed;\n    int numReset = ClusterWriterFlow.ClusterReset.numProcessed;\n    int numWritten = ClusterWriterFlow.ClusterWriter.numProcessed;\n    writeToStream(ClusterWriterFlow.inputStream, CLEAR_CSV.getBytes());\n    numParsed++;\n    numReset++;\n    while (ClusterWriterFlow.ClusterSourceParser.numProcessed < numParsed) {\n      System.out.println(\"Waiting for parsing flowlet to process tuple\");\n      Thread.sleep(500);\n    }\n    while (ClusterWriterFlow.ClusterReset.numProcessed < numReset) {\n      System.out.println(\"Waiting for reset flowlet to process tuple\");\n      Thread.sleep(500);\n    }\n    \n    // Writer flowlet should not have received anything\n    assertEquals(numWritten, ClusterWriterFlow.ClusterWriter.numProcessed);\n    \n    // Ensure no clusters in table\n    for (int i=0; i<10; i++) {\n      assertNull(clusterTable.readCluster(i));\n    }\n    \n    // Generate and insert some clusters\n    writeCluster(1, \"Sports\", 0.0001);\n    writeCluster(1, \"Kitchen Appliances\", 0.321);\n    writeCluster(1, \"Televisions\", 0.199);\n    writeCluster(2, \"Housewares\", 0.011);\n    writeCluster(2, \"Pottery\", 0.0144);\n    writeCluster(3, \"Cutlery\", 0.011);\n    writeCluster(3, \"Knives\", 0.0331);\n    writeCluster(3, \"Hatchets\", 0.041);\n    writeCluster(4, \"Swimwear\", 0.011);\n    writeCluster(4, \"Goggles\", 0.41);\n    writeCluster(4, \"Surfing Gear\", 0.221);\n    writeCluster(4, \"Sports\", 0.82);\n    numParsed += 12;\n    numWritten += 12;\n    \n    // Wait for them to be written\n    while (ClusterWriterFlow.ClusterWriter.numProcessed < numWritten) {\n      System.out.println(\"Waiting for writer flowlet to process tuples\");\n      Thread.sleep(500);\n    }\n    \n    // Verify clusters in table\n    \n    // Cluster 1\n    Map<String,Double> cluster = clusterTable.readCluster(1);\n    assertNotNull(cluster);\n    assertEquals(3, cluster.size());\n    assertTrue(cluster.containsKey(\"Sports\"));\n    assertTrue(cluster.containsKey(\"Kitchen Appliances\"));\n    assertTrue(cluster.containsKey(\"Televisions\"));\n    \n    // Cluster 2\n    cluster = clusterTable.readCluster(2);\n    assertNotNull(cluster);\n    assertEquals(2, cluster.size());\n    assertTrue(cluster.containsKey(\"Housewares\"));\n    assertTrue(cluster.containsKey(\"Pottery\"));\n    \n    // Cluster 3\n    cluster = clusterTable.readCluster(3);\n    assertNotNull(cluster);\n    assertEquals(3, cluster.size());\n    assertTrue(cluster.containsKey(\"Cutlery\"));\n    assertTrue(cluster.containsKey(\"Knives\"));\n    assertTrue(cluster.containsKey(\"Hatchets\"));\n    \n    // Cluster 4\n    cluster = clusterTable.readCluster(4);\n    assertNotNull(cluster);\n    assertEquals(4, cluster.size());\n    assertTrue(cluster.containsKey(\"Swimwear\"));\n    assertTrue(cluster.containsKey(\"Goggles\"));\n    assertTrue(cluster.containsKey(\"Surfing Gear\"));\n    assertTrue(cluster.containsKey(\"Sports\"));\n\n    // Cluster 5 should not exist\n    assertNull(clusterTable.readCluster(5));\n    \n    // Generate a clear event, ensure no clusters in table\n    writeToStream(ClusterWriterFlow.inputStream, CLEAR_CSV.getBytes());\n    numParsed++;\n    numReset++;\n    while (ClusterWriterFlow.ClusterSourceParser.numProcessed < numParsed) {\n      System.out.println(\"Waiting for parsing flowlet to process tuple\");\n      Thread.sleep(500);\n    }\n    while (ClusterWriterFlow.ClusterReset.numProcessed < numReset) {\n      System.out.println(\"Waiting for reset flowlet to process tuple\");\n      Thread.sleep(500);\n    }\n    \n    // Stop flow\n    assertTrue(FlowTestHelper.stopFlow(flowHandle));\n  }","id":105511,"modified_method":"@Test(timeout = 20000)\n  public void testClusterWriterFlow() throws Exception {\n    // Get references to tables\n    ClusterTable clusterTable = new ClusterTable();\n    getDataSetRegistry().registerDataSet(clusterTable);\n\n    // Instantiate cluster writer feed flow\n    ClusterWriterFlow clusterWriterFlow = new ClusterWriterFlow();\n\n    // Start the flow\n    TestFlowHandle flowHandle = startFlow(clusterWriterFlow);\n    assertTrue(flowHandle.isSuccess());\n\n    // Generate a clear event and wait for it to be processed\n    int numParsed = ClusterWriterFlow.ClusterSourceParser.numProcessed;\n    int numReset = ClusterWriterFlow.ClusterReset.numProcessed;\n    int numWritten = ClusterWriterFlow.ClusterWriter.numProcessed;\n    writeToStream(ClusterWriterFlow.inputStream, CLEAR_CSV.getBytes());\n    numParsed++;\n    numReset++;\n    while (ClusterWriterFlow.ClusterSourceParser.numProcessed < numParsed) {\n      System.out.println(\"Waiting for parsing flowlet to process tuple\");\n      Thread.sleep(500);\n    }\n    while (ClusterWriterFlow.ClusterReset.numProcessed < numReset) {\n      System.out.println(\"Waiting for reset flowlet to process tuple\");\n      Thread.sleep(500);\n    }\n    \n    // Writer flowlet should not have received anything\n    assertEquals(numWritten, ClusterWriterFlow.ClusterWriter.numProcessed);\n    \n    // Ensure no clusters in table\n    for (int i=0; i<10; i++) {\n      assertNull(clusterTable.readCluster(i));\n    }\n    \n    // Generate and insert some clusters\n    writeCluster(1, \"Sports\", 0.0001);\n    writeCluster(1, \"Kitchen Appliances\", 0.321);\n    writeCluster(1, \"Televisions\", 0.199);\n    writeCluster(2, \"Housewares\", 0.011);\n    writeCluster(2, \"Pottery\", 0.0144);\n    writeCluster(3, \"Cutlery\", 0.011);\n    writeCluster(3, \"Knives\", 0.0331);\n    writeCluster(3, \"Hatchets\", 0.041);\n    writeCluster(4, \"Swimwear\", 0.011);\n    writeCluster(4, \"Goggles\", 0.41);\n    writeCluster(4, \"Surfing Gear\", 0.221);\n    writeCluster(4, \"Sports\", 0.82);\n    numParsed += 12;\n    numWritten += 12;\n    \n    // Wait for them to be written\n    while (ClusterWriterFlow.ClusterWriter.numProcessed < numWritten) {\n      System.out.println(\"Waiting for writer flowlet to process tuples\");\n      Thread.sleep(500);\n    }\n    \n    // Verify clusters in table\n    \n    // Cluster 1\n    Map<String,Double> cluster = clusterTable.readCluster(1);\n    assertNotNull(cluster);\n    assertEquals(3, cluster.size());\n    assertTrue(cluster.containsKey(\"Sports\"));\n    assertTrue(cluster.containsKey(\"Kitchen Appliances\"));\n    assertTrue(cluster.containsKey(\"Televisions\"));\n    \n    // Cluster 2\n    cluster = clusterTable.readCluster(2);\n    assertNotNull(cluster);\n    assertEquals(2, cluster.size());\n    assertTrue(cluster.containsKey(\"Housewares\"));\n    assertTrue(cluster.containsKey(\"Pottery\"));\n    \n    // Cluster 3\n    cluster = clusterTable.readCluster(3);\n    assertNotNull(cluster);\n    assertEquals(3, cluster.size());\n    assertTrue(cluster.containsKey(\"Cutlery\"));\n    assertTrue(cluster.containsKey(\"Knives\"));\n    assertTrue(cluster.containsKey(\"Hatchets\"));\n    \n    // Cluster 4\n    cluster = clusterTable.readCluster(4);\n    assertNotNull(cluster);\n    assertEquals(4, cluster.size());\n    assertTrue(cluster.containsKey(\"Swimwear\"));\n    assertTrue(cluster.containsKey(\"Goggles\"));\n    assertTrue(cluster.containsKey(\"Surfing Gear\"));\n    assertTrue(cluster.containsKey(\"Sports\"));\n\n    // Cluster 5 should not exist\n    assertNull(clusterTable.readCluster(5));\n    \n    // Generate a clear event, ensure no clusters in table\n    writeToStream(ClusterWriterFlow.inputStream, CLEAR_CSV.getBytes());\n    numParsed++;\n    numReset++;\n    while (ClusterWriterFlow.ClusterSourceParser.numProcessed < numParsed) {\n      System.out.println(\"Waiting for parsing flowlet to process tuple\");\n      Thread.sleep(500);\n    }\n    while (ClusterWriterFlow.ClusterReset.numProcessed < numReset) {\n      System.out.println(\"Waiting for reset flowlet to process tuple\");\n      Thread.sleep(500);\n    }\n    \n    // Stop flow\n    assertTrue(FlowTestHelper.stopFlow(flowHandle));\n  }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test(timeout = 20000)\n  public void testProductFeedFlow() throws Exception {\n    // Get references to tables\n    ProductTable productTable = new ProductTable(getDataFabric(),\n        getRegistry());\n    CounterTable productUpdateCountTable = new CounterTable(\"productUpdates\",\n        getDataFabric(), getRegistry());\n    CounterTable allTimeScoreTable = new CounterTable(\"allTimeScores\",\n        getDataFabric(), getRegistry());\n    SortedCounterTable topScoreTable = new SortedCounterTable(\"topScores\",\n        getDataFabric(), getRegistry(),\n        new SortedCounterTable.SortedCounterConfig());\n\n    // Instantiate product feed flow\n    ProductFeedFlow productFeedFlow = new ProductFeedFlow();\n\n    // Start the flow\n    TestFlowHandle flowHandle = startFlow(productFeedFlow);\n    assertTrue(flowHandle.isSuccess());\n\n    // Generate a single product event\n    Long now = System.currentTimeMillis();\n    Long product_id = 1L;\n    Long store_id = 2L;\n    String category = \"Housewares\";\n    String name = \"Green Widget\";\n    ProductFeedEntry productMeta =\n        new ProductFeedEntry(product_id, store_id, now, category, name, 3.5);\n    String productMetaJson = productMeta.toJson();\n\n    // Write json to input stream\n    writeToStream(ProductFeedFlow.inputStream, Bytes.toBytes(productMetaJson));\n\n    // Wait for parsing flowlet to process the tuple\n    while (ProductFeedParserFlowlet.numProcessed < 1) {\n      System.out.println(\"Waiting for parsing flowlet to process tuple\");\n      Thread.sleep(1000);\n    }\n\n    // Wait for processor flowlet to process the tuple\n    while (ProductFeedFlow.ProductProcessorFlowlet.numProcessed < 1) {\n      System.out.println(\"Waiting for processor flowlet to process tuple\");\n      Thread.sleep(10);\n    }\n\n    // Wait for processor flowlet to process the tuple\n    while (ProductFeedFlow.ProductActivityFeedUpdaterFlowlet.numProcessed < 1) {\n      System.out.println(\"Waiting for updater flowlet to process tuple\");\n      Thread.sleep(10);\n    }\n\n    System.out.println(\"Tuple processed to the end!\");\n\n    // If we are here, flow ran successfully!\n    assertTrue(FlowTestHelper.stopFlow(flowHandle));\n\n    // Verify the product is stored\n    ProductFeedEntry readProductMeta = productTable.readObject(\n        Bytes.toBytes(product_id));\n    assertEqual(productMeta, readProductMeta);\n\n    // Verify the product update count has been incremented\n    assertEquals(new Long(1),\n        productUpdateCountTable.readSingleKey(Bytes.toBytes(product_id)));\n\n    // Verify the product total score has increased to 1\n    assertEquals(new Long(1),\n        allTimeScoreTable.readSingleKey(\n            Bytes.add(Constants.PRODUCT_ALL_TIME_PREFIX,\n                Bytes.toBytes(product_id))));\n\n    // Verify the hourly score has been incremented to type score increase\n    List<Counter> counters = topScoreTable.readTopCounters(\n        Bytes.add(Bytes.toBytes(Helpers.hour(now)),\n            Bytes.toBytes(productMeta.category)), 10);\n    assertEquals(1, counters.size());\n    assertEquals(new Long(1), counters.get(0).getCount());\n\n    // Verify a new entry has been made in activity feed\n    ReadColumnRange read = new ReadColumnRange(Constants.ACTIVITY_FEED_TABLE,\n        ActivityFeed.makeActivityFeedRow(category), null, null);\n    OperationResult<Map<byte[],byte[]>> result =\n        getDataFabric().read(read);\n    assertFalse(result.isEmpty());\n    Map<byte[], byte[]> map = result.getValue();\n    assertEquals(1, map.size());\n    byte [] column = map.keySet().iterator().next();\n    byte [] value = map.values().iterator().next();\n    ActivityFeedEntry feedEntry = new ActivityFeedEntry(column, value);\n    assertEquals(now, feedEntry.timestamp);\n    assertEquals(store_id, feedEntry.store_id);\n    assertEquals(1, feedEntry.products.size());\n    assertEquals(product_id, feedEntry.products.get(0).product_id);\n    assertEquals(new Long(1), feedEntry.products.get(0).score);\n  }","id":105512,"modified_method":"@Test(timeout = 20000)\n  public void testProductFeedFlow() throws Exception {\n    // Get references to tables\n    ProductTable productTable = new ProductTable();\n    getDataSetRegistry().registerDataSet(productTable);\n    CounterTable productUpdateCountTable = new CounterTable(\"productUpdates\");\n    getDataSetRegistry().registerDataSet(productUpdateCountTable);\n    CounterTable allTimeScoreTable = new CounterTable(\"allTimeScores\");\n    getDataSetRegistry().registerDataSet(allTimeScoreTable);\n    SortedCounterTable topScoreTable = new SortedCounterTable(\"topScores\",\n        new SortedCounterTable.SortedCounterConfig());\n    getDataSetRegistry().registerDataSet(topScoreTable);\n\n    // Instantiate product feed flow\n    ProductFeedFlow productFeedFlow = new ProductFeedFlow();\n\n    // Start the flow\n    TestFlowHandle flowHandle = startFlow(productFeedFlow);\n    assertTrue(flowHandle.isSuccess());\n\n    // Generate a single product event\n    Long now = System.currentTimeMillis();\n    Long product_id = 1L;\n    Long store_id = 2L;\n    String category = \"Housewares\";\n    String name = \"Green Widget\";\n    ProductFeedEntry productMeta =\n        new ProductFeedEntry(product_id, store_id, now, category, name, 3.5);\n    String productMetaJson = productMeta.toJson();\n\n    // Write json to input stream\n    writeToStream(ProductFeedFlow.inputStream, Bytes.toBytes(productMetaJson));\n\n    // Wait for parsing flowlet to process the tuple\n    while (ProductFeedParserFlowlet.numProcessed < 1) {\n      System.out.println(\"Waiting for parsing flowlet to process tuple\");\n      Thread.sleep(1000);\n    }\n\n    // Wait for processor flowlet to process the tuple\n    while (ProductFeedFlow.ProductProcessorFlowlet.numProcessed < 1) {\n      System.out.println(\"Waiting for processor flowlet to process tuple\");\n      Thread.sleep(10);\n    }\n\n    // Wait for processor flowlet to process the tuple\n    while (ProductFeedFlow.ProductActivityFeedUpdaterFlowlet.numProcessed < 1) {\n      System.out.println(\"Waiting for updater flowlet to process tuple\");\n      Thread.sleep(10);\n    }\n\n    System.out.println(\"Tuple processed to the end!\");\n\n    // If we are here, flow ran successfully!\n    assertTrue(FlowTestHelper.stopFlow(flowHandle));\n\n    // Verify the product is stored\n    ProductFeedEntry readProductMeta = productTable.readObject(\n        Bytes.toBytes(product_id));\n    assertEqual(productMeta, readProductMeta);\n\n    // Verify the product update count has been incremented\n    assertEquals(new Long(1),\n        productUpdateCountTable.readSingleKey(Bytes.toBytes(product_id)));\n\n    // Verify the product total score has increased to 1\n    assertEquals(new Long(1),\n        allTimeScoreTable.readSingleKey(\n            Bytes.add(Constants.PRODUCT_ALL_TIME_PREFIX,\n                Bytes.toBytes(product_id))));\n\n    // Verify the hourly score has been incremented to type score increase\n    List<Counter> counters = topScoreTable.readTopCounters(\n        Bytes.add(Bytes.toBytes(Helpers.hour(now)),\n            Bytes.toBytes(productMeta.category)), 10);\n    assertEquals(1, counters.size());\n    assertEquals(new Long(1), counters.get(0).getCount());\n\n    // Verify a new entry has been made in activity feed\n    ReadColumnRange read = new ReadColumnRange(Constants.ACTIVITY_FEED_TABLE,\n        ActivityFeed.makeActivityFeedRow(category), null, null);\n    OperationResult<Map<byte[],byte[]>> result =\n        getDataFabric().read(read);\n    assertFalse(result.isEmpty());\n    Map<byte[], byte[]> map = result.getValue();\n    assertEquals(1, map.size());\n    byte [] column = map.keySet().iterator().next();\n    byte [] value = map.values().iterator().next();\n    ActivityFeedEntry feedEntry = new ActivityFeedEntry(column, value);\n    assertEquals(now, feedEntry.timestamp);\n    assertEquals(store_id, feedEntry.store_id);\n    assertEquals(1, feedEntry.products.size());\n    assertEquals(product_id, feedEntry.products.get(0).product_id);\n    assertEquals(new Long(1), feedEntry.products.get(0).score);\n  }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test(timeout = 20000)\n  public void testSocialActionFlow() throws Exception {\n    // Get references to tables\n    CounterTable productActionCountTable = new CounterTable(\"productActions\",\n        getDataFabric(), getRegistry());\n    CounterTable allTimeScoreTable = new CounterTable(\"allTimeScores\",\n        getDataFabric(), getRegistry());\n    SortedCounterTable topScoreTable = new SortedCounterTable(\"topScores\",\n        getDataFabric(), getRegistry(),\n        new SortedCounterTable.SortedCounterConfig());\n    \n    // Instantiate product feed flow\n    SocialActionFlow socialActionFlow = new SocialActionFlow();\n    \n    // Start the flow\n    TestFlowHandle flowHandle = startFlow(socialActionFlow);\n    assertTrue(flowHandle.isSuccess());\n    \n    // Generate a single social action event\n    Long now = System.currentTimeMillis();\n    Long event_id = 1L;\n    Long product_id = 2L;\n    Long user_id = 3L;\n    Long store_id = 4L;\n    String type = \"yay-exp-action\";\n    String category = \"Sports\";\n    Long typeScoreIncrease = SocialActionType.fromString(type).getScore();\n    SocialAction socialAction = new SocialAction(event_id, now, type,\n        product_id, store_id, category, user_id);\n    String socialActionJson = socialAction.toJson();\n    \n    // Write json to input stream\n    writeToStream(SocialActionFlow.inputStream, Bytes.toBytes(socialActionJson));\n    \n    // Wait for parsing flowlet to process the tuple\n    while (SocialActionParserFlowlet.numProcessed < 1) {\n      System.out.println(\"Waiting for parsing flowlet to process tuple\");\n      Thread.sleep(1000);\n    }\n    \n    // Wait for processor flowlet to process the tuple\n    while (SocialActionFlow.SocialActionProcessorFlowlet.numProcessed < 1) {\n      System.out.println(\"Waiting for processor flowlet to process tuple\");\n      Thread.sleep(100);\n    }\n    \n    // Wait for processor flowlet to process the tuple\n    while (SocialActionFlow.ActivityFeedUpdaterFlowlet.numProcessed < 1) {\n      System.out.println(\"Waiting for updater flowlet to process tuple\");\n      Thread.sleep(100);\n    }\n    \n    // Wait for processor flowlet to process the tuple\n    while (SocialActionFlow.PopularFeedUpdaterFlowlet.numProcessed < 1) {\n      System.out.println(\"Waiting for updater flowlet to process tuple\");\n      Thread.sleep(100);\n    }\n    \n    System.out.println(\"Tuple processed to the end!\");\n\n    // If we are here, flow ran successfully!\n    assertTrue(FlowTestHelper.stopFlow(flowHandle));\n    \n    // Verify the product action count has been incremented\n    assertEquals(new Long(1),\n        productActionCountTable.readCounterSet(Bytes.toBytes(product_id),\n        Bytes.toBytes(type)));\n    \n    // Verify the product total score has increased to type score increase\n    assertEquals(typeScoreIncrease,\n        allTimeScoreTable.readSingleKey(\n            Bytes.add(Constants.PRODUCT_ALL_TIME_PREFIX,\n                Bytes.toBytes(product_id))));\n    \n    // Verify the hourly score has been incremented to type score increase\n    List<Counter> counters = topScoreTable.readTopCounters(\n        Bytes.add(Bytes.toBytes(Helpers.hour(now)),\n            Bytes.toBytes(category)), 10);\n    assertEquals(1, counters.size());\n    assertEquals(typeScoreIncrease, counters.get(0).getCount());\n    \n    // Verify a new entry has been made in activity feed\n    ReadColumnRange read = new ReadColumnRange(Constants.ACTIVITY_FEED_TABLE,\n        ActivityFeed.makeActivityFeedRow(category), null, null);\n    OperationResult<Map<byte[],byte[]>> result =\n        getDataFabric().read(read);\n    assertFalse(result.isEmpty());\n    Map<byte[], byte[]> map = result.getValue();\n    assertEquals(1, map.size());\n    byte [] column = map.keySet().iterator().next();\n    byte [] value = map.values().iterator().next();\n    ActivityFeedEntry feedEntry = new ActivityFeedEntry(column, value);\n    assertEquals(now, feedEntry.timestamp);\n    assertEquals(store_id, feedEntry.store_id);\n    assertEquals(1, feedEntry.products.size());\n    assertEquals(product_id, feedEntry.products.get(0).product_id);\n    assertEquals(typeScoreIncrease, feedEntry.products.get(0).score);\n  }","id":105513,"modified_method":"@Test(timeout = 20000)\n  public void testSocialActionFlow() throws Exception {\n    // Get references to tables\n    ProductTable productTable = new ProductTable();\n    getDataSetRegistry().registerDataSet(productTable);\n    CounterTable productActionCountTable = new CounterTable(\"productActions\");\n    getDataSetRegistry().registerDataSet(productActionCountTable);\n    CounterTable allTimeScoreTable = new CounterTable(\"allTimeScores\");\n    getDataSetRegistry().registerDataSet(allTimeScoreTable);\n    SortedCounterTable topScoreTable = new SortedCounterTable(\"topScores\",\n        new SortedCounterTable.SortedCounterConfig());\n    getDataSetRegistry().registerDataSet(topScoreTable);\n    \n    // Instantiate product feed flow\n    SocialActionFlow socialActionFlow = new SocialActionFlow();\n    \n    // Start the flow\n    TestFlowHandle flowHandle = startFlow(socialActionFlow);\n    assertTrue(flowHandle.isSuccess());\n    \n    // Generate a single social action event\n    Long now = System.currentTimeMillis();\n    Long event_id = 1L;\n    Long product_id = 2L;\n    Long user_id = 3L;\n    Long store_id = 4L;\n    String type = \"yay-exp-action\";\n    String category = \"Sports\";\n    Long typeScoreIncrease = SocialActionType.fromString(type).getScore();\n    SocialAction socialAction = new SocialAction(event_id, now, type,\n        product_id, store_id, category, user_id);\n    String socialActionJson = socialAction.toJson();\n    \n    // Write json to input stream\n    writeToStream(SocialActionFlow.inputStream, Bytes.toBytes(socialActionJson));\n    \n    // Wait for parsing flowlet to process the tuple\n    while (SocialActionParserFlowlet.numProcessed < 1) {\n      System.out.println(\"Waiting for parsing flowlet to process tuple\");\n      Thread.sleep(1000);\n    }\n    \n    // Wait for processor flowlet to process the tuple\n    while (SocialActionFlow.SocialActionProcessorFlowlet.numProcessed < 1) {\n      System.out.println(\"Waiting for processor flowlet to process tuple\");\n      Thread.sleep(100);\n    }\n    \n    // Wait for processor flowlet to process the tuple\n    while (SocialActionFlow.ActivityFeedUpdaterFlowlet.numProcessed < 1) {\n      System.out.println(\"Waiting for updater flowlet to process tuple\");\n      Thread.sleep(100);\n    }\n    \n    // Wait for processor flowlet to process the tuple\n    while (SocialActionFlow.PopularFeedUpdaterFlowlet.numProcessed < 1) {\n      System.out.println(\"Waiting for updater flowlet to process tuple\");\n      Thread.sleep(100);\n    }\n    \n    System.out.println(\"Tuple processed to the end!\");\n\n    // If we are here, flow ran successfully!\n    assertTrue(FlowTestHelper.stopFlow(flowHandle));\n    \n    // Verify the product action count has been incremented\n    assertEquals(new Long(1),\n        productActionCountTable.readCounterSet(Bytes.toBytes(product_id),\n        Bytes.toBytes(type)));\n    \n    // Verify the product total score has increased to type score increase\n    assertEquals(typeScoreIncrease,\n        allTimeScoreTable.readSingleKey(\n            Bytes.add(Constants.PRODUCT_ALL_TIME_PREFIX,\n                Bytes.toBytes(product_id))));\n    \n    // Verify the hourly score has been incremented to type score increase\n    List<Counter> counters = topScoreTable.readTopCounters(\n        Bytes.add(Bytes.toBytes(Helpers.hour(now)),\n            Bytes.toBytes(category)), 10);\n    assertEquals(1, counters.size());\n    assertEquals(typeScoreIncrease, counters.get(0).getCount());\n    \n    // Verify a new entry has been made in activity feed\n    ReadColumnRange read = new ReadColumnRange(Constants.ACTIVITY_FEED_TABLE,\n        ActivityFeed.makeActivityFeedRow(category), null, null);\n    OperationResult<Map<byte[],byte[]>> result =\n        getDataFabric().read(read);\n    assertFalse(result.isEmpty());\n    Map<byte[], byte[]> map = result.getValue();\n    assertEquals(1, map.size());\n    byte [] column = map.keySet().iterator().next();\n    byte [] value = map.values().iterator().next();\n    ActivityFeedEntry feedEntry = new ActivityFeedEntry(column, value);\n    assertEquals(now, feedEntry.timestamp);\n    assertEquals(store_id, feedEntry.store_id);\n    assertEquals(1, feedEntry.products.size());\n    assertEquals(product_id, feedEntry.products.get(0).product_id);\n    assertEquals(typeScoreIncrease, feedEntry.products.get(0).score);\n  }","commit_id":"b6dc7b26a5446f1fb1d83b4f9584896dce0ee726","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    protected JndiRegistry createRegistry() throws Exception {\n        JndiRegistry registry = new JndiRegistry(createJndiContext());\n        registry.bind(\"std\", new File(\"target/stdindexDir\"));\n        registry.bind(\"load_dir\", new File(\"src/test/resources/sources\"));\n        registry.bind(\"stdAnalyzer\", new StandardAnalyzer(Version.LUCENE_30));\n        registry.bind(\"simple\", new File(\"target/simpleindexDir\"));\n        registry.bind(\"simpleAnalyzer\", new SimpleAnalyzer());\n        registry.bind(\"whitespace\", new File(\"target/whitespaceindexDir\"));\n        registry.bind(\"whitespaceAnalyzer\", new WhitespaceAnalyzer());\n        return registry;\n    }","id":105514,"modified_method":"@Override\n    protected JndiRegistry createRegistry() throws Exception {\n        JndiRegistry registry = new JndiRegistry(createJndiContext());\n        registry.bind(\"std\", new File(\"target/stdindexDir\"));\n        registry.bind(\"load_dir\", new File(\"src/test/resources/sources\"));\n        registry.bind(\"stdAnalyzer\", new StandardAnalyzer(Version.LUCENE_35));\n        registry.bind(\"simple\", new File(\"target/simpleindexDir\"));\n        registry.bind(\"simpleAnalyzer\", new SimpleAnalyzer(Version.LUCENE_35));\n        registry.bind(\"whitespace\", new File(\"target/whitespaceindexDir\"));\n        registry.bind(\"whitespaceAnalyzer\", new WhitespaceAnalyzer(Version.LUCENE_35));\n        return registry;\n    }","commit_id":"a2136b5b6e0d0dee51f7e6d99aff64d86dc05b64","url":"https://github.com/apache/camel"},{"original_method":"private void openIndexWriter() throws IOException {\n        if (!indexCreated) {\n            indexWriter = new IndexWriter(niofsDirectory, getAnalyzer(), true, IndexWriter.MaxFieldLength.UNLIMITED);\n            indexCreated = true;\n            return;\n        }\n        indexWriter = new IndexWriter(niofsDirectory, getAnalyzer(), false, IndexWriter.MaxFieldLength.UNLIMITED);\n    }","id":105515,"modified_method":"private void openIndexWriter() throws IOException {\n        IndexWriterConfig indexWriterConfig;\n        if (!indexCreated) {\n            indexWriterConfig = new IndexWriterConfig(Version.LUCENE_35, getAnalyzer()).setOpenMode(OpenMode.CREATE);            \n            indexWriter = new IndexWriter(niofsDirectory, indexWriterConfig);\n            indexCreated = true;\n            return;\n        }\n        indexWriterConfig = new IndexWriterConfig(Version.LUCENE_35, getAnalyzer()).setOpenMode(OpenMode.APPEND);            \n        indexWriter = new IndexWriter(niofsDirectory, indexWriterConfig);\n    }","commit_id":"a2136b5b6e0d0dee51f7e6d99aff64d86dc05b64","url":"https://github.com/apache/camel"},{"original_method":"private void closeIndexWriter() throws IOException {\n        indexWriter.optimize();\n        indexWriter.commit();\n        indexWriter.close();\n    }","id":105516,"modified_method":"private void closeIndexWriter() throws IOException {\n        indexWriter.commit();\n        indexWriter.close();\n    }","commit_id":"a2136b5b6e0d0dee51f7e6d99aff64d86dc05b64","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testWildcardSearcher() throws Exception {\n        final SimpleAnalyzer analyzer = new SimpleAnalyzer();\n        MockEndpoint mockSearchEndpoint = getMockEndpoint(\"mock:searchResult\");\n        \n        context.stop();\n        context.addRoutes(new RouteBuilder() {\n            public void configure() {\n                \n                try {\n                    from(\"direct:start\").\n                        setHeader(\"QUERY\", constant(\"Carl*\")).\n                        process(new LuceneQueryProcessor(\"target/simpleindexDir\", analyzer, null, 20)).\n                        to(\"direct:next\");\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                \n                from(\"direct:next\").process(new Processor() {\n                    public void process(Exchange exchange) throws Exception {\n                        Hits hits = exchange.getIn().getBody(Hits.class);\n                        printResults(hits);\n                    }\n\n                    private void printResults(Hits hits) {\n                        LOG.debug(\"Number of hits: \" + hits.getNumberOfHits());\n                        for (int i = 0; i < hits.getNumberOfHits(); i++) {\n                            LOG.debug(\"Hit \" + i + \" Index Location:\" + hits.getHit().get(i).getHitLocation());\n                            LOG.debug(\"Hit \" + i + \" Score:\" + hits.getHit().get(i).getScore());\n                            LOG.debug(\"Hit \" + i + \" Data:\" + hits.getHit().get(i).getData());\n                        }\n                    }\n                }).to(\"mock:searchResult\");\n            }\n            \n        });\n        context.start();\n        LOG.debug(\"------------Beginning Wildcard + Simple Analyzer Phrase Searcher Test---------------\");\n        \n        sendRequest();\n        mockSearchEndpoint.assertIsSatisfied();\n        LOG.debug(\"------------Completed Wildcard + Simple Analyzer Phrase Searcher Test---------------\");\n        context.stop();\n    }","id":105517,"modified_method":"@Test\n    public void testWildcardSearcher() throws Exception {\n        final SimpleAnalyzer analyzer = new SimpleAnalyzer(Version.LUCENE_35);\n        MockEndpoint mockSearchEndpoint = getMockEndpoint(\"mock:searchResult\");\n        \n        context.stop();\n        context.addRoutes(new RouteBuilder() {\n            public void configure() {\n                \n                try {\n                    from(\"direct:start\").\n                        setHeader(\"QUERY\", constant(\"Carl*\")).\n                        process(new LuceneQueryProcessor(\"target/simpleindexDir\", analyzer, null, 20)).\n                        to(\"direct:next\");\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                \n                from(\"direct:next\").process(new Processor() {\n                    public void process(Exchange exchange) throws Exception {\n                        Hits hits = exchange.getIn().getBody(Hits.class);\n                        printResults(hits);\n                    }\n\n                    private void printResults(Hits hits) {\n                        LOG.debug(\"Number of hits: \" + hits.getNumberOfHits());\n                        for (int i = 0; i < hits.getNumberOfHits(); i++) {\n                            LOG.debug(\"Hit \" + i + \" Index Location:\" + hits.getHit().get(i).getHitLocation());\n                            LOG.debug(\"Hit \" + i + \" Score:\" + hits.getHit().get(i).getScore());\n                            LOG.debug(\"Hit \" + i + \" Data:\" + hits.getHit().get(i).getData());\n                        }\n                    }\n                }).to(\"mock:searchResult\");\n            }\n            \n        });\n        context.start();\n        LOG.debug(\"------------Beginning Wildcard + Simple Analyzer Phrase Searcher Test---------------\");\n        \n        sendRequest();\n        mockSearchEndpoint.assertIsSatisfied();\n        LOG.debug(\"------------Completed Wildcard + Simple Analyzer Phrase Searcher Test---------------\");\n        context.stop();\n    }","commit_id":"a2136b5b6e0d0dee51f7e6d99aff64d86dc05b64","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testPhraseSearcher() throws Exception {\n        final StandardAnalyzer analyzer = new StandardAnalyzer(Version.LUCENE_30);\n        MockEndpoint mockSearchEndpoint = getMockEndpoint(\"mock:searchResult\");\n        \n        context.stop();\n        context.addRoutes(new RouteBuilder() {\n            public void configure() {\n                \n                try {\n                    from(\"direct:start\").\n                        setHeader(\"QUERY\", constant(\"Rodney Dangerfield\")).\n                        process(new LuceneQueryProcessor(\"target/stdindexDir\", analyzer, null, 20)).\n                        to(\"direct:next\");\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                \n                from(\"direct:next\").process(new Processor() {\n                    public void process(Exchange exchange) throws Exception {\n                        Hits hits = exchange.getIn().getBody(Hits.class);\n                        printResults(hits);\n                    }\n                    \n                    private void printResults(Hits hits) {\n                        LOG.debug(\"Number of hits: \" + hits.getNumberOfHits());\n                        for (int i = 0; i < hits.getNumberOfHits(); i++) {\n                            LOG.debug(\"Hit \" + i + \" Index Location:\" + hits.getHit().get(i).getHitLocation());\n                            LOG.debug(\"Hit \" + i + \" Score:\" + hits.getHit().get(i).getScore());\n                            LOG.debug(\"Hit \" + i + \" Data:\" + hits.getHit().get(i).getData());\n                        }\n                    }\n                }).to(\"mock:searchResult\");\n            }\n        });\n        context.start();\n        LOG.debug(\"------------Beginning Phrase + Standard Analyzer Search Test---------------\");\n        \n        sendRequest();\n        mockSearchEndpoint.assertIsSatisfied();\n        LOG.debug(\"------------Completed Phrase + Standard Analyzer Search Test---------------\");\n        context.stop();\n    }","id":105518,"modified_method":"@Test\n    public void testPhraseSearcher() throws Exception {\n        final StandardAnalyzer analyzer = new StandardAnalyzer(Version.LUCENE_35);\n        MockEndpoint mockSearchEndpoint = getMockEndpoint(\"mock:searchResult\");\n        \n        context.stop();\n        context.addRoutes(new RouteBuilder() {\n            public void configure() {\n                \n                try {\n                    from(\"direct:start\").\n                        setHeader(\"QUERY\", constant(\"Rodney Dangerfield\")).\n                        process(new LuceneQueryProcessor(\"target/stdindexDir\", analyzer, null, 20)).\n                        to(\"direct:next\");\n                } catch (Exception e) {\n                    e.printStackTrace();\n                }\n                \n                from(\"direct:next\").process(new Processor() {\n                    public void process(Exchange exchange) throws Exception {\n                        Hits hits = exchange.getIn().getBody(Hits.class);\n                        printResults(hits);\n                    }\n                    \n                    private void printResults(Hits hits) {\n                        LOG.debug(\"Number of hits: \" + hits.getNumberOfHits());\n                        for (int i = 0; i < hits.getNumberOfHits(); i++) {\n                            LOG.debug(\"Hit \" + i + \" Index Location:\" + hits.getHit().get(i).getHitLocation());\n                            LOG.debug(\"Hit \" + i + \" Score:\" + hits.getHit().get(i).getScore());\n                            LOG.debug(\"Hit \" + i + \" Data:\" + hits.getHit().get(i).getData());\n                        }\n                    }\n                }).to(\"mock:searchResult\");\n            }\n        });\n        context.start();\n        LOG.debug(\"------------Beginning Phrase + Standard Analyzer Search Test---------------\");\n        \n        sendRequest();\n        mockSearchEndpoint.assertIsSatisfied();\n        LOG.debug(\"------------Completed Phrase + Standard Analyzer Search Test---------------\");\n        context.stop();\n    }","commit_id":"a2136b5b6e0d0dee51f7e6d99aff64d86dc05b64","url":"https://github.com/apache/camel"},{"original_method":"public void open(File indexDirectory, Analyzer analyzer) throws IOException {\n        if (indexDirectory != null) {\n            indexSearcher = new IndexSearcher(new NIOFSDirectory(indexDirectory), true);   \n        } else {\n            indexSearcher = new IndexSearcher(new NIOFSDirectory(new File(\"./indexDirectory\")), true); \n        }\n        this.analyzer = analyzer;\n    }","id":105519,"modified_method":"public void open(File indexDirectory, Analyzer analyzer) throws IOException {\n        if (indexDirectory != null) {\n            indexSearcher = new IndexSearcher(IndexReader.open(new NIOFSDirectory(indexDirectory), true));\n        } else {\n            indexSearcher = new IndexSearcher(IndexReader.open(new NIOFSDirectory(new File(\"./indexDirectory\")), true));\n        }\n        this.analyzer = analyzer;\n    }","commit_id":"a2136b5b6e0d0dee51f7e6d99aff64d86dc05b64","url":"https://github.com/apache/camel"},{"original_method":"public Hits search(String searchPhrase, int maxNumberOfHits) throws Exception {\n        return search(searchPhrase, maxNumberOfHits, Version.LUCENE_30);\n    }","id":105520,"modified_method":"public Hits search(String searchPhrase, int maxNumberOfHits) throws Exception {\n        return search(searchPhrase, maxNumberOfHits, Version.LUCENE_35);\n    }","commit_id":"a2136b5b6e0d0dee51f7e6d99aff64d86dc05b64","url":"https://github.com/apache/camel"},{"original_method":"static IndexWriterConfig getIndexWriterConfig(IndexDefinition definition, boolean remoteDir) {\n        // FIXME: Hack needed to make Lucene work in an OSGi environment\n        Thread thread = Thread.currentThread();\n        ClassLoader loader = thread.getContextClassLoader();\n        thread.setContextClassLoader(IndexWriterConfig.class.getClassLoader());\n        try {\n            IndexWriterConfig config = new IndexWriterConfig(VERSION, definition.getAnalyzer());\n            if (remoteDir) {\n                config.setMergeScheduler(new SerialMergeScheduler());\n            }\n            if (definition.getCodec() != null) {\n                config.setCodec(definition.getCodec());\n            }\n            return config;\n        } finally {\n            thread.setContextClassLoader(loader);\n        }\n    }","id":105521,"modified_method":"static IndexWriterConfig getIndexWriterConfig(IndexDefinition definition, boolean remoteDir) {\n        // FIXME: Hack needed to make Lucene work in an OSGi environment\n        Thread thread = Thread.currentThread();\n        ClassLoader loader = thread.getContextClassLoader();\n        thread.setContextClassLoader(IndexWriterConfig.class.getClassLoader());\n        try {\n            Analyzer definitionAnalyzer = definition.getAnalyzer();\n            Map<String, Analyzer> analyzers = new HashMap<String, Analyzer>();\n            analyzers.put(FieldNames.SPELLCHECK, new ShingleAnalyzerWrapper(LuceneIndexConstants.ANALYZER, 3));\n            Analyzer analyzer = new PerFieldAnalyzerWrapper(definitionAnalyzer, analyzers);\n            IndexWriterConfig config = new IndexWriterConfig(VERSION, analyzer);\n            if (remoteDir) {\n                config.setMergeScheduler(new SerialMergeScheduler());\n            }\n            if (definition.getCodec() != null) {\n                config.setCodec(definition.getCodec());\n            }\n            return config;\n        } finally {\n            thread.setContextClassLoader(loader);\n        }\n    }","commit_id":"94c941e0a6c86ea01e6728fbf551a0a594823580","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    public NavigationResult next(UINavigationContext context) throws Exception {\n        Map<Object, Object> attributeMap = context.getUIContext().getAttributeMap();\n        attributeMap.put(\"componentName\", componentName.getValue());\n        attributeMap.put(\"instanceName\", instanceName.getValue());\n        attributeMap.put(\"routeBuilder\", routeBuilder.getValue());\n        attributeMap.put(\"mode\", \"add\");\n        attributeMap.put(\"kind\", \"java\");\n\n        // we need to figure out how many options there is so we can as many steps we need\n        String camelComponentName = componentName.getValue();\n\n        CamelCatalog catalog = new DefaultCamelCatalog();\n        String json = catalog.componentJSonSchema(camelComponentName);\n        if (json == null) {\n            throw new IllegalArgumentException(\"Could not find catalog entry for component name: \" + camelComponentName);\n        }\n\n        // TODO: sort the options by label, so we can group per label of 10.\n\n        List<Map<String, String>> data = JSonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n\n        // TODO: not all data becomes an UIInput (camel-yammer 27 vs 25)\n        List<InputComponent> allInputs = createUIInputsForCamelComponent(camelComponentName, null, componentFactory, converterFactory);\n        int size = allInputs.size();\n\n        NavigationResultBuilder builder = Results.navigationBuilder();\n        int pages = size / 10 + 1;\n        for (int i = 0; i < pages; i++) {\n            int from = i * 10;\n            int delta = Math.min(10, size - from);\n            int to = from + delta;\n            boolean last = i == pages -1;\n            List<InputComponent> inputs = allInputs.subList(from, to);\n            ConfigureEndpointPropertiesStep step = new ConfigureEndpointPropertiesStep(projectFactory, dependencyInstaller,\n                    allInputs, inputs, last);\n            builder.add(step);\n        }\n\n        return builder.build();\n    }","id":105522,"modified_method":"@Override\n    public NavigationResult next(UINavigationContext context) throws Exception {\n        Map<Object, Object> attributeMap = context.getUIContext().getAttributeMap();\n\n        NavigationResult navigationResult = (NavigationResult) attributeMap.get(\"navigationResult\");\n        if (navigationResult != null) {\n            return navigationResult;\n        }\n\n        attributeMap.put(\"componentName\", componentName.getValue());\n        attributeMap.put(\"instanceName\", instanceName.getValue());\n        attributeMap.put(\"routeBuilder\", routeBuilder.getValue());\n        attributeMap.put(\"mode\", \"add\");\n        attributeMap.put(\"kind\", \"java\");\n\n        // we need to figure out how many options there is so we can as many steps we need\n        String camelComponentName = componentName.getValue();\n\n        CamelCatalog catalog = new DefaultCamelCatalog();\n        String json = catalog.componentJSonSchema(camelComponentName);\n        if (json == null) {\n            throw new IllegalArgumentException(\"Could not find catalog entry for component name: \" + camelComponentName);\n        }\n\n        // TODO: sort the options by label, so we can group per label of 10.\n\n        List<Map<String, String>> data = JSonSchemaHelper.parseJsonSchema(\"properties\", json, true);\n\n        // TODO: not all data becomes an UIInput (camel-yammer 27 vs 25)\n        List<InputComponent> allInputs = createUIInputsForCamelComponent(camelComponentName, null, componentFactory, converterFactory);\n        int size = allInputs.size();\n\n        NavigationResultBuilder builder = Results.navigationBuilder();\n        int pages = size / 10 + 1;\n        for (int i = 0; i < pages; i++) {\n            int from = i * 10;\n            int delta = Math.min(10, size - from);\n            int to = from + delta;\n            boolean last = i == pages -1;\n            List<InputComponent> inputs = allInputs.subList(from, to);\n            ConfigureEndpointPropertiesStep step = new ConfigureEndpointPropertiesStep(projectFactory, dependencyInstaller,\n                    allInputs, inputs, last);\n            builder.add(step);\n        }\n\n        navigationResult = builder.build();\n        attributeMap.put(\"navigationResult\", navigationResult);\n        return navigationResult;\n    }","commit_id":"d0fdc47cf95a58eb1da0a6f6f9f5246419d4eb1c","url":"https://github.com/fabric8io/fabric8"},{"original_method":"@Override\n    public Result execute(UIExecutionContext context) throws Exception {\n        Map<Object, Object> attributeMap = context.getUIContext().getAttributeMap();\n\n        if (!last) {\n            // TODO: carry over options to the next page (yikes we need to store this state ourselves)\n        }\n\n        // only if last\n        if (last) {\n            String kind = mandatoryAttributeValue(attributeMap, \"kind\");\n            if (\"xml\".equals(kind)) {\n                return executeXml(context, attributeMap);\n            } else {\n                return executeJava(context, attributeMap);\n            }\n        } else {\n            return null;\n        }\n    }","id":105523,"modified_method":"@Override\n    public Result execute(UIExecutionContext context) throws Exception {\n        Map<Object, Object> attributeMap = context.getUIContext().getAttributeMap();\n\n        // only execute if we are last\n        if (last) {\n            String kind = mandatoryAttributeValue(attributeMap, \"kind\");\n            if (\"xml\".equals(kind)) {\n                return executeXml(context, attributeMap);\n            } else {\n                return executeJava(context, attributeMap);\n            }\n        } else {\n            return null;\n        }\n    }","commit_id":"d0fdc47cf95a58eb1da0a6f6f9f5246419d4eb1c","url":"https://github.com/fabric8io/fabric8"},{"original_method":"protected Result executeJava(UIExecutionContext context, Map<Object, Object> attributeMap) throws Exception {\n        String camelComponentName = mandatoryAttributeValue(attributeMap, \"componentName\");\n        String endpointInstanceName = mandatoryAttributeValue(attributeMap, \"instanceName\");\n        String routeBuilder = mandatoryAttributeValue(attributeMap, \"routeBuilder\");\n\n        Project project = getSelectedProject(context);\n        JavaSourceFacet facet = project.getFacet(JavaSourceFacet.class);\n\n        // does the project already have camel?\n        Dependency core = CamelProjectHelper.findCamelCoreDependency(project);\n        if (core == null) {\n            return Results.fail(\"The project does not include camel-core\");\n        }\n\n        // lets find the camel component class\n        CamelComponentDetails details = new CamelComponentDetails();\n        Result result = loadCamelComponentDetails(camelComponentName, details);\n        if (result != null) {\n            return result;\n        }\n        // and make sure its dependency is added\n        result = ensureCamelArtifactIdAdded(project, details, dependencyInstaller);\n        if (result != null) {\n            return result;\n        }\n\n        // collect all the options that was set\n        Map<String, String> options = new HashMap<String, String>();\n        for (InputComponent input : inputs) {\n            String key = input.getName();\n            // only use the value if a value was set (and the value is not the same as the default value)\n            if (input.hasValue()) {\n                String value = input.getValue().toString();\n                if (value != null) {\n                    // do not add the value if it match the default value\n                    boolean matchDefault = isDefaultValue(camelComponentName, key, value);\n                    if (!matchDefault) {\n                        options.put(key, value);\n                    }\n                }\n            } else if (input.isRequired() && input.hasDefaultValue()) {\n                // if its required then we need to grab the value\n                String value = input.getValue().toString();\n                if (value != null) {\n                    options.put(key, value);\n                }\n            }\n        }\n\n        CamelCatalog catalog = new DefaultCamelCatalog();\n        String uri = catalog.asEndpointUri(camelComponentName, options);\n        if (uri == null) {\n            return Results.fail(\"Cannot create endpoint uri\");\n        }\n        // TODO: Remove this when upgrading to Camel 2.16.1\n        // we do not want to use %23 for # syntax\n        uri = uri.replaceAll(\"\\\\=\\\\%23\", \"=#\");\n\n        JavaResource existing = facet.getJavaResource(routeBuilder);\n        if (existing == null || !existing.exists()) {\n            return Results.fail(\"RouteBuilder \" + routeBuilder + \" does not exist\");\n        }\n\n        JavaClassSource clazz = existing.getJavaType();\n\n        // add the endpoint as a field\n        // special for CDI as we use different set of annotations\n        boolean updated = true;\n        boolean cdi = findCamelArtifactDependency(project, \"camel-cdi\") != null;\n\n        FieldSource field = clazz.getField(endpointInstanceName);\n        AnnotationSource annotation;\n        if (field == null) {\n            field = clazz.addField();\n            field.setName(endpointInstanceName);\n            field.setType(\"org.apache.camel.Endpoint\");\n            field.setPrivate();\n            updated = false;\n        }\n        if (cdi) {\n            annotation = field.getAnnotation(\"org.apache.camel.cdi.Uri\");\n            if (annotation == null) {\n                if (!field.hasAnnotation(\"javax.inject.Inject\")) {\n                    field.addAnnotation(\"javax.inject.Inject\");\n                }\n                annotation = field.addAnnotation(\"org.apache.camel.cdi.Uri\");\n            }\n        } else {\n            annotation = field.getAnnotation(\"org.apache.camel.EndpointInject\");\n        }\n        annotation.removeAllValues();\n        annotation.setStringValue(uri);\n\n        // make sure to import what we use\n        clazz.addImport(\"org.apache.camel.Endpoint\");\n        if (cdi) {\n            clazz.addImport(\"javax.inject.Inject\");\n            clazz.addImport(\"org.apache.camel.cdi.Uri\");\n        } else {\n            clazz.addImport(\"org.apache.camel.EndpointInject\");\n        }\n\n        facet.saveJavaSource(clazz);\n\n        if (updated) {\n            return Results.success(\"Updated endpoint \" + endpointInstanceName + \" in \" + routeBuilder);\n        } else {\n            return Results.success(\"Added endpoint \" + endpointInstanceName + \" in \" + routeBuilder);\n        }\n    }","id":105524,"modified_method":"protected Result executeJava(UIExecutionContext context, Map<Object, Object> attributeMap) throws Exception {\n        String camelComponentName = mandatoryAttributeValue(attributeMap, \"componentName\");\n        String endpointInstanceName = mandatoryAttributeValue(attributeMap, \"instanceName\");\n        String routeBuilder = mandatoryAttributeValue(attributeMap, \"routeBuilder\");\n\n        Project project = getSelectedProject(context);\n        JavaSourceFacet facet = project.getFacet(JavaSourceFacet.class);\n\n        // does the project already have camel?\n        Dependency core = CamelProjectHelper.findCamelCoreDependency(project);\n        if (core == null) {\n            return Results.fail(\"The project does not include camel-core\");\n        }\n\n        // lets find the camel component class\n        CamelComponentDetails details = new CamelComponentDetails();\n        Result result = loadCamelComponentDetails(camelComponentName, details);\n        if (result != null) {\n            return result;\n        }\n        // and make sure its dependency is added\n        result = ensureCamelArtifactIdAdded(project, details, dependencyInstaller);\n        if (result != null) {\n            return result;\n        }\n\n        // collect all the options that was set\n        Map<String, String> options = new HashMap<String, String>();\n        for (InputComponent input : allInputs) {\n            String key = input.getName();\n            // only use the value if a value was set (and the value is not the same as the default value)\n            if (input.hasValue()) {\n                String value = input.getValue().toString();\n                if (value != null) {\n                    // do not add the value if it match the default value\n                    boolean matchDefault = isDefaultValue(camelComponentName, key, value);\n                    if (!matchDefault) {\n                        options.put(key, value);\n                    }\n                }\n            } else if (input.isRequired() && input.hasDefaultValue()) {\n                // if its required then we need to grab the value\n                String value = input.getValue().toString();\n                if (value != null) {\n                    options.put(key, value);\n                }\n            }\n        }\n\n        CamelCatalog catalog = new DefaultCamelCatalog();\n        String uri = catalog.asEndpointUri(camelComponentName, options);\n        if (uri == null) {\n            return Results.fail(\"Cannot create endpoint uri\");\n        }\n        // TODO: Remove this when upgrading to Camel 2.16.1\n        // we do not want to use %23 for # syntax\n        uri = uri.replaceAll(\"\\\\=\\\\%23\", \"=#\");\n\n        JavaResource existing = facet.getJavaResource(routeBuilder);\n        if (existing == null || !existing.exists()) {\n            return Results.fail(\"RouteBuilder \" + routeBuilder + \" does not exist\");\n        }\n\n        JavaClassSource clazz = existing.getJavaType();\n\n        // add the endpoint as a field\n        // special for CDI as we use different set of annotations\n        boolean updated = true;\n        boolean cdi = findCamelArtifactDependency(project, \"camel-cdi\") != null;\n\n        FieldSource field = clazz.getField(endpointInstanceName);\n        AnnotationSource annotation;\n        if (field == null) {\n            field = clazz.addField();\n            field.setName(endpointInstanceName);\n            field.setType(\"org.apache.camel.Endpoint\");\n            field.setPrivate();\n            updated = false;\n        }\n        if (cdi) {\n            annotation = field.getAnnotation(\"org.apache.camel.cdi.Uri\");\n            if (annotation == null) {\n                if (!field.hasAnnotation(\"javax.inject.Inject\")) {\n                    field.addAnnotation(\"javax.inject.Inject\");\n                }\n                annotation = field.addAnnotation(\"org.apache.camel.cdi.Uri\");\n            }\n        } else {\n            annotation = field.getAnnotation(\"org.apache.camel.EndpointInject\");\n        }\n        annotation.removeAllValues();\n        annotation.setStringValue(uri);\n\n        // make sure to import what we use\n        clazz.addImport(\"org.apache.camel.Endpoint\");\n        if (cdi) {\n            clazz.addImport(\"javax.inject.Inject\");\n            clazz.addImport(\"org.apache.camel.cdi.Uri\");\n        } else {\n            clazz.addImport(\"org.apache.camel.EndpointInject\");\n        }\n\n        facet.saveJavaSource(clazz);\n\n        if (updated) {\n            return Results.success(\"Updated endpoint \" + endpointInstanceName + \" in \" + routeBuilder);\n        } else {\n            return Results.success(\"Added endpoint \" + endpointInstanceName + \" in \" + routeBuilder);\n        }\n    }","commit_id":"d0fdc47cf95a58eb1da0a6f6f9f5246419d4eb1c","url":"https://github.com/fabric8io/fabric8"},{"original_method":"protected static GoogleCredential getGoogleCredential() throws Exception {\n\t\tGoogleCredential.Builder builder = new GoogleCredential.Builder();\n\n\t\tbuilder.setJsonFactory(new JacksonFactory());\n\t\tbuilder.setServiceAccountId(PortletPropsValues.SERVICE_ACCOUNT_ID);\n\n\t\tFile file = new File(\n\t\t\tPropsUtil.get(PropsKeys.LIFERAY_HOME) +\n\t\t\t\tPortletPropsValues.SERVICE_ACCOUNT_PRIVATE_KEY_P12_FILE);\n\n\t\tbuilder.setServiceAccountPrivateKeyFromP12File(file);\n\n\t\tbuilder.setServiceAccountScopes(_SCOPES_DIRECTORY);\n\t\tbuilder.setServiceAccountUser(PortletPropsValues.SERVICE_ACCOUNT_USER);\n\t\tbuilder.setTransport(new NetHttpTransport());\n\n\t\treturn builder.build();\n\t}","id":105525,"modified_method":"protected static GoogleCredential getGoogleCredential() throws Exception {\n\t\tif (_googleCredential != null) {\n\t\t\treturn _googleCredential;\n\t\t}\n\n\t\tGoogleCredential.Builder builder = new GoogleCredential.Builder();\n\n\t\tbuilder.setJsonFactory(new JacksonFactory());\n\t\tbuilder.setServiceAccountId(PortletPropsValues.SERVICE_ACCOUNT_ID);\n\n\t\tFile file = new File(\n\t\t\tPropsUtil.get(PropsKeys.LIFERAY_HOME) +\n\t\t\t\tPortletPropsValues.SERVICE_ACCOUNT_PRIVATE_KEY_P12_FILE);\n\n\t\tbuilder.setServiceAccountPrivateKeyFromP12File(file);\n\n\t\tbuilder.setServiceAccountScopes(_SCOPES_DIRECTORY);\n\t\tbuilder.setServiceAccountUser(PortletPropsValues.SERVICE_ACCOUNT_USER);\n\t\tbuilder.setTransport(new NetHttpTransport());\n\n\t\t_googleCredential = builder.build();\n\t\t\n\t\treturn _googleCredential;\n\t}","commit_id":"ec1e85e3ebf03e83aee40717a8cd0d9e6ac814d4","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public static Directory getDirectory() throws Exception {\n\t\tGoogleCredential googleCredential = getGoogleCredential();\n\n\t\tDirectory.Builder builder = new Directory.Builder(\n\t\t\tgoogleCredential.getTransport(), googleCredential.getJsonFactory(),\n\t\t\tgoogleCredential);\n\n\t\treturn builder.build();\n\t}","id":105526,"modified_method":"public static Directory getDirectory() throws Exception {\n\t\tif (_directory != null) {\n\t\t\treturn _directory;\n\t\t}\n\n\t\tGoogleCredential googleCredential = getGoogleCredential();\n\n\t\tDirectory.Builder builder = new Directory.Builder(\n\t\t\tgoogleCredential.getTransport(), googleCredential.getJsonFactory(),\n\t\t\tgoogleCredential);\n\n\t\t_directory = builder.build();\n\t\t\n\t\treturn _directory;\n\t}","commit_id":"ec1e85e3ebf03e83aee40717a8cd0d9e6ac814d4","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player target = game.getPlayer(source.getFirstTarget());\r\n        if (target != null) {\r\n            for (Permanent p : game.getBattlefield().getAllActivePermanents(new FilterCreaturePermanent(), target.getId(), game)) {\r\n                p.addCounters(CounterType.M1M1.createInstance(), game);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":105527,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player targetPlayer = game.getPlayer(getTargetPointer().getFirst(game, source));\r\n        if (targetPlayer != null) {\r\n            for (Permanent creature : game.getBattlefield().getAllActivePermanents(new FilterCreaturePermanent(), targetPlayer.getId(), game)) {\r\n                creature.addCounters(CounterType.M1M1.createInstance(), game);\r\n            }\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"66cf6909680d4ab6546e53edda74134cdeb6d233","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Permanent input, Game game) {\r\n        return input.getCounters().containsKey(counter);\r\n    }","id":105528,"modified_method":"@Override\r\n    public boolean apply(Permanent input, Game game) {\r\n        if (counter == null) {\r\n            return !input.getCounters().keySet().isEmpty();\r\n        } else {\r\n            return input.getCounters().containsKey(counter);\r\n        }\r\n    }","commit_id":"66cf6909680d4ab6546e53edda74134cdeb6d233","url":"https://github.com/magefree/mage"},{"original_method":"public CounterPredicate(CounterType counter) {\r\n        this.counter = counter;\r\n    }","id":105529,"modified_method":"/**\r\n     *\r\n     * @param counter if null any counter selects the permanent\r\n     */\r\n    public CounterPredicate(CounterType counter) {\r\n        this.counter = counter;\r\n    }","commit_id":"66cf6909680d4ab6546e53edda74134cdeb6d233","url":"https://github.com/magefree/mage"},{"original_method":"public ProliferateEffect() {\n        super(Outcome.Benefit);\n        staticText = \"Proliferate. (You choose any number of permanents and/or players with counters on them, then give each another counter of a kind already there.)\";\n    }","id":105530,"modified_method":"public ProliferateEffect() {\n        super(Outcome.Benefit);\n        staticText = \"Proliferate. <i>(You choose any number of permanents and/or players with counters on them, then give each another counter of a kind already there.)<\/i>\";\n    }","commit_id":"66cf6909680d4ab6546e53edda74134cdeb6d233","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Player controller = game.getPlayer(source.getControllerId());\n        Target target = new TargetPermanentOrPlayerWithCounter(0, Integer.MAX_VALUE, true);\n\n        //A spell or ability could have removed the only legal target this player\n        //had, if thats the case this ability should fizzle.\n        if (target.canChoose(controller.getId(), game)) {\n            boolean abilityApplied = false;\n            Map<String, Serializable> options = new HashMap<>();\n            options.put(\"UI.right.btn.text\", \"Done\");\n            while (target.canChoose(controller.getId(), game)) {\n                if (controller.choose(Outcome.Benefit, target, source.getSourceId(), game, options)) {\n                    break;\n                }\n            }\n\n            for (int idx = 0; idx < target.getTargets().size(); idx++) {\n                UUID chosen = (UUID) target.getTargets().get(idx);\n                Permanent permanent = game.getPermanent(chosen);\n                if (permanent != null) {\n                    if (permanent.getCounters().size() > 0) {\n                        if (permanent.getCounters().size() == 1) {\n                            for (Counter counter : permanent.getCounters().values()) {\n                                permanent.addCounters(counter.getName(), 1, game);\n                            }\n                        } else {\n                            Choice choice = new ChoiceImpl(true);\n                            Set<String> choices = new HashSet<>();\n                            for (Counter counter : permanent.getCounters().values()) {\n                                choices.add(counter.getName());\n                            }\n                            choice.setChoices(choices);\n                            choice.setMessage(\"Choose a counter to proliferate (\" + permanent.getName() + \")\");\n                            controller.choose(Outcome.Benefit, choice, game);\n                            for (Counter counter : permanent.getCounters().values()) {\n                                if (counter.getName().equals(choice.getChoice())) {\n                                    permanent.addCounters(counter.getName(), 1, game);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                } else {\n                    Player player = game.getPlayer(chosen);\n                    if (player != null) {\n                        if (player.getCounters().size() > 0) {\n                            if (player.getCounters().size() == 1) {\n                                for (Counter counter : player.getCounters().values()) {\n                                    Counter newCounter = new Counter(counter.getName());\n                                    player.addCounters(newCounter, game);\n                                }\n                            } else {\n                                Choice choice = new ChoiceImpl(true);\n                                Set<String> choices = new HashSet<>();\n                                for (Counter counter : player.getCounters().values()) {\n                                    choices.add(counter.getName());\n                                }\n                                choice.setChoices(choices);\n                                choice.setMessage(\"Choose a counter to proliferate (\" + player.getName() + \")\");\n                                controller.choose(Outcome.Benefit, choice, game);\n                                for (Counter counter : player.getCounters().values()) {\n                                    if (counter.getName().equals(choice.getChoice())) {\n                                        Counter newCounter = new Counter(counter.getName());\n                                        player.addCounters(newCounter, game);\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n\n            }\n\n            return abilityApplied;\n        }\n        return false;\n    }","id":105531,"modified_method":"@Override\n    public boolean apply(Game game, Ability source) {\n        Player controller = game.getPlayer(source.getControllerId());\n        if (controller == null) {\n            return false;\n        }\n        Target target = new TargetPermanentOrPlayerWithCounter(0, Integer.MAX_VALUE, true);\n        Map<String, Serializable> options = new HashMap<>();\n        options.put(\"UI.right.btn.text\", \"Done\");\n        controller.choose(Outcome.Benefit, target, source.getSourceId(), game, options);\n\n        for (int idx = 0; idx < target.getTargets().size(); idx++) {\n            UUID chosen = (UUID) target.getTargets().get(idx);\n            Permanent permanent = game.getPermanent(chosen);\n            if (permanent != null) {\n                if (permanent.getCounters().size() > 0) {\n                    if (permanent.getCounters().size() == 1) {\n                        for (Counter counter : permanent.getCounters().values()) {\n                            permanent.addCounters(counter.getName(), 1, game);\n                        }\n                    } else {\n                        Choice choice = new ChoiceImpl(true);\n                        Set<String> choices = new HashSet<>();\n                        for (Counter counter : permanent.getCounters().values()) {\n                            choices.add(counter.getName());\n                        }\n                        choice.setChoices(choices);\n                        choice.setMessage(\"Choose a counter to proliferate (\" + permanent.getName() + \")\");\n                        controller.choose(Outcome.Benefit, choice, game);\n                        for (Counter counter : permanent.getCounters().values()) {\n                            if (counter.getName().equals(choice.getChoice())) {\n                                permanent.addCounters(counter.getName(), 1, game);\n                                break;\n                            }\n                        }\n                    }\n                }\n            } else {\n                Player player = game.getPlayer(chosen);\n                if (player != null) {\n                    if (player.getCounters().size() > 0) {\n                        if (player.getCounters().size() == 1) {\n                            for (Counter counter : player.getCounters().values()) {\n                                Counter newCounter = new Counter(counter.getName());\n                                player.addCounters(newCounter, game);\n                            }\n                        } else {\n                            Choice choice = new ChoiceImpl(true);\n                            Set<String> choices = new HashSet<>();\n                            for (Counter counter : player.getCounters().values()) {\n                                choices.add(counter.getName());\n                            }\n                            choice.setChoices(choices);\n                            choice.setMessage(\"Choose a counter to proliferate (\" + player.getName() + \")\");\n                            controller.choose(Outcome.Benefit, choice, game);\n                            for (Counter counter : player.getCounters().values()) {\n                                if (counter.getName().equals(choice.getChoice())) {\n                                    Counter newCounter = new Counter(counter.getName());\n                                    player.addCounters(newCounter, game);\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return true;\n    }","commit_id":"66cf6909680d4ab6546e53edda74134cdeb6d233","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean canTarget(UUID id, Ability source, Game game) {\n        Permanent permanent = game.getPermanent(id);\n        Player player = game.getPlayer(id);\n\n        if (source != null) {\n            MageObject targetSource = game.getObject(source.getSourceId());\n            if (permanent != null) {\n                return permanent.canBeTargetedBy(targetSource, source.getControllerId(), game) && filter.match(permanent, source.getSourceId(), source.getControllerId(), game);\n            }\n            if (player != null) {\n                return player.canBeTargetedBy(targetSource, game) && filter.match(player, game);\n            }\n        }\n\n        if (permanent != null) {\n            return filter.match(permanent, game);\n        }\n        if (player != null) {\n            return filter.match(player, game);\n        }\n        return false;\n    }","id":105532,"modified_method":"@Override\n    public boolean canTarget(UUID id, Ability source, Game game) {\n        Permanent permanent = game.getPermanent(id);\n        Player player = game.getPlayer(id);\n\n        if (source != null) {\n            MageObject targetSource = game.getObject(source.getSourceId());\n            if (permanent != null) {\n                if (!isNotTarget()) {\n                    if (!permanent.canBeTargetedBy(game.getObject(source.getId()), source.getControllerId(), game) ||\n                        !permanent.canBeTargetedBy(game.getObject(source.getSourceId()), source.getControllerId(), game)) {\n                        return false;\n                    }\n                }\n                return filter.match(permanent, source.getSourceId(), source.getControllerId(), game);\n            }\n            if (player != null) {\n                if (!isNotTarget()) {\n                    if (!player.canBeTargetedBy(targetSource, game)) {\n                        return false;\n                    }\n                }\n                return filter.match(player, game);\n            }\n        }\n\n        if (permanent != null) {\n            return filter.match(permanent, game);\n        }\n        if (player != null) {\n            return filter.match(player, game);\n        }\n        return false;\n    }","commit_id":"66cf6909680d4ab6546e53edda74134cdeb6d233","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {\n        Set<UUID> possibleTargets = new HashSet<>();\n        MageObject targetSource = game.getObject(sourceId);\n        for (UUID playerId: game.getPlayer(sourceControllerId).getInRange()) {\n            Player player = game.getPlayer(playerId);\n            if (player != null && player.canBeTargetedBy(targetSource, game) && filter.match(player, game)) {\n                possibleTargets.add(playerId);\n            }\n        }\n        for (Permanent permanent: game.getBattlefield().getActivePermanents(new FilterPermanent(), sourceControllerId, game)) {\n            if (permanent.canBeTargetedBy(targetSource, sourceControllerId, game) && filter.match(permanent, sourceId, sourceControllerId, game)) {\n                possibleTargets.add(permanent.getId());\n            }\n        }\n        return possibleTargets;\n    }","id":105533,"modified_method":"@Override\n    public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {\n        Set<UUID> possibleTargets = new HashSet<>();\n        MageObject targetSource = game.getObject(sourceId);\n        for (UUID playerId: game.getPlayer(sourceControllerId).getInRange()) {\n            Player player = game.getPlayer(playerId);\n            if (player != null && (notTarget || player.canBeTargetedBy(targetSource, game)) && filter.match(player, game)) {\n                possibleTargets.add(playerId);\n            }\n        }\n        for (Permanent permanent: game.getBattlefield().getActivePermanents(new FilterPermanent(), sourceControllerId, game)) {\n            if ((notTarget || permanent.canBeTargetedBy(targetSource, sourceControllerId, game)) && filter.match(permanent, sourceId, sourceControllerId, game)) {\n                possibleTargets.add(permanent.getId());\n            }\n        }\n        return possibleTargets;\n    }","commit_id":"66cf6909680d4ab6546e53edda74134cdeb6d233","url":"https://github.com/magefree/mage"},{"original_method":"public TargetPermanentOrPlayerWithCounter(int minNumTargets, int maxNumTargets) {\n        super(minNumTargets, maxNumTargets);\n        this.filter = new FilterPermanentOrPlayerWithCounter();\n        this.targetName = filter.getMessage();\n        super.setFilter(this.filter);\n    }","id":105534,"modified_method":"public TargetPermanentOrPlayerWithCounter(int minNumTargets, int maxNumTargets) {\n        this(minNumTargets, maxNumTargets, false);\n    }","commit_id":"66cf6909680d4ab6546e53edda74134cdeb6d233","url":"https://github.com/magefree/mage"},{"original_method":"public TargetPermanentOrPlayerWithCounter(int minNumTargets, int maxNumTargets, boolean notTarget) {\n        this(minNumTargets, maxNumTargets);\n        this.notTarget = notTarget;\n    }","id":105535,"modified_method":"public TargetPermanentOrPlayerWithCounter(int minNumTargets, int maxNumTargets, boolean notTarget) {\n        super(minNumTargets, maxNumTargets, notTarget);\n        this.filter = new FilterPermanentOrPlayerWithCounter();\n        this.filterPermanent = new FilterPermanent();\n        this.filterPermanent.add(new CounterPredicate(null));\n        this.targetName = filter.getMessage();\n    }","commit_id":"66cf6909680d4ab6546e53edda74134cdeb6d233","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean choose(Outcome outcome, Target target, UUID sourceId, Game game, Map<String, Serializable> options) {\n        if (!choices.isEmpty()) {\n            if (target instanceof TargetPermanent) {\n                for (Permanent permanent : game.getBattlefield().getAllActivePermanents((FilterPermanent)target.getFilter(), game)) {\n                    for (String choose2: choices) {\n                        if (permanent.getName().equals(choose2)) {\n                            if (((TargetPermanent)target).canTarget(playerId, permanent.getId(), null, game) && !target.getTargets().contains(permanent.getId())) {\n                                target.add(permanent.getId(), game);\n                                choices.remove(choose2);\n                                return true;\n                            }\n                        } else if ((permanent.getName()+\"-\"+permanent.getExpansionSetCode()).equals(choose2)) {\n                            if (((TargetPermanent)target).canTarget(playerId, permanent.getId(), null, game) && !target.getTargets().contains(permanent.getId())) {\n                                target.add(permanent.getId(), game);\n                                choices.remove(choose2);\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n            if (target instanceof TargetPlayer) {\n                for (Player player :game.getPlayers().values()) {\n                    for (String choose2: choices) {\n                        if (player.getName().equals(choose2)) {\n                            if (((TargetPlayer)target).canTarget(playerId, player.getId(), null, game) && !target.getTargets().contains(player.getId())) {\n                                target.add(player.getId(), game);\n                                choices.remove(choose2);\n                                return true;                                \n                            }\n                        }\n                    }\n                }\n            }\n            if (target instanceof TargetSource) {\n                Set<UUID> possibleTargets;\n                TargetSource t = ((TargetSource) target);\n                possibleTargets = t.possibleTargets(sourceId, playerId, game);\n                for (UUID targetId : possibleTargets) {\n                    MageObject targetObject = game.getObject(targetId);\n                    if (targetObject != null) {\n                        for (String choose2: choices) {\n                            if (targetObject.getName().equals(choose2)) {\n                                List<UUID> alreadyTargetted = target.getTargets();\n                                if (t.canTarget(targetObject.getId(), game)) {\n                                    if (alreadyTargetted != null && !alreadyTargetted.contains(targetObject.getId())) {\n                                        target.add(targetObject.getId(), game);\n                                        choices.remove(choose2);\n                                        return true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return super.choose(outcome, target, sourceId, game, options);\n    }","id":105536,"modified_method":"@Override\n    public boolean choose(Outcome outcome, Target target, UUID sourceId, Game game, Map<String, Serializable> options) {\n        if (!choices.isEmpty()) {\n            if ((target instanceof TargetPermanent) || (target instanceof TargetPermanentOrPlayer)) { // player target not implemted yet\n                FilterPermanent filterPermanent;\n                if (target instanceof TargetPermanentOrPlayer) {\n                    filterPermanent = ((TargetPermanentOrPlayer) target).getFilterPermanent();\n                } else {\n                    filterPermanent = ((TargetPermanent) target).getFilter();\n                }\n                for (String choose2: choices) {\n                    String[] targetList = choose2.split(\"\\\\^\");\n                    boolean targetFound = false;\n                    for (String targetName: targetList) {\n                        for (Permanent permanent : game.getBattlefield().getAllActivePermanents(filterPermanent, game)) {\n                            if (target.getTargets().contains(permanent.getId())) {\n                                continue;\n                            }\n                            if (permanent.getName().equals(targetName)) {\n                                if (target.isNotTarget() || ((TargetPermanent)target).canTarget(playerId, permanent.getId(), null, game)) {\n                                    target.add(permanent.getId(), game);\n                                    targetFound = true;\n                                    break;\n                                }\n                            } else if ((permanent.getName()+\"-\"+permanent.getExpansionSetCode()).equals(targetName)) {\n                                if (target.isNotTarget() || ((TargetPermanent)target).canTarget(playerId, permanent.getId(), null, game)) {\n                                    target.add(permanent.getId(), game);\n                                    targetFound = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (targetFound) {\n                        choices.remove(choose2);\n                        return true;\n                    }\n                }\n            }\n            if (target instanceof TargetPlayer) {\n                for (Player player :game.getPlayers().values()) {\n                    for (String choose2: choices) {\n                        if (player.getName().equals(choose2)) {\n                            if (((TargetPlayer)target).canTarget(playerId, player.getId(), null, game) && !target.getTargets().contains(player.getId())) {\n                                target.add(player.getId(), game);\n                                choices.remove(choose2);\n                                return true;                                \n                            }\n                        }\n                    }\n                }\n            }\n            if (target instanceof TargetSource) {\n                Set<UUID> possibleTargets;\n                TargetSource t = ((TargetSource) target);\n                possibleTargets = t.possibleTargets(sourceId, playerId, game);\n                for (UUID targetId : possibleTargets) {\n                    MageObject targetObject = game.getObject(targetId);\n                    if (targetObject != null) {\n                        for (String choose2: choices) {\n                            if (targetObject.getName().equals(choose2)) {\n                                List<UUID> alreadyTargetted = target.getTargets();\n                                if (t.canTarget(targetObject.getId(), game)) {\n                                    if (alreadyTargetted != null && !alreadyTargetted.contains(targetObject.getId())) {\n                                        target.add(targetObject.getId(), game);\n                                        choices.remove(choose2);\n                                        return true;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return super.choose(outcome, target, sourceId, game, options);\n    }","commit_id":"66cf6909680d4ab6546e53edda74134cdeb6d233","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean chooseTarget(Outcome outcome, Target target, Ability source, Game game) {\n        if (!targets.isEmpty()) {\n            if (target instanceof TargetPermanent) {\n                for (String targetDefinition: targets) {\n                    String[] targetList = targetDefinition.split(\"\\\\^\");\n                    boolean targetFound = false;\n                    for (String targetName: targetList) {\n                        boolean allowCopy = true;\n                        if (targetName.endsWith(\"[no copy]\")) {\n                            allowCopy = false;\n                            targetName = targetName.substring(0, targetName.length()-9);\n                        }\n                        for (Permanent permanent : game.getBattlefield().getAllActivePermanents((FilterPermanent)target.getFilter(), game)) {\n                            if (permanent.getName().equals(targetName) || (permanent.getName()+\"-\"+permanent.getExpansionSetCode()).equals(targetName)) {\n                                if (((TargetPermanent)target).canTarget(source == null ? this.getId(): source.getControllerId(), permanent.getId(), source, game) && !target.getTargets().contains(permanent.getId())) {\n                                    if (!permanent.isCopy() || allowCopy) {\n                                        target.add(permanent.getId(), game);\n                                        targetFound = true;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (targetFound) {\n                        targets.remove(targetDefinition);\n                        return true;\n                    }\n                }\n            }\n            if (target instanceof TargetPlayer) {\n                for (String targetDefinition: targets) {\n                    if (targetDefinition.startsWith(\"targetPlayer=\")) {\n                        String playerName = targetDefinition.substring(targetDefinition.indexOf(\"targetPlayer=\") + 13);\n                        for (Player player: game.getPlayers().values()) {\n                            if (player.getName().equals(playerName)\n                                    && ((TargetPlayer) target).canTarget(playerId, player.getId(), source, game)) {\n                                target.add(player.getId(), game);\n                                return true;\n                            }\n                        }\n                    }\n                }\n                \n            }\n            if (target instanceof TargetCardInHand) {\n                for (String targetDefinition: targets) {\n                    String[] targetList = targetDefinition.split(\"\\\\^\");\n                    boolean targetFound = false;\n                    for (String targetName: targetList) {\n                        for (Card card: this.getHand().getCards(((TargetCardInHand)target).getFilter(), game)) {\n                            if (card.getName().equals(targetName) || (card.getName()+\"-\"+card.getExpansionSetCode()).equals(targetName)) {\n                                if (((TargetCardInHand)target).canTarget(source.getControllerId(), card.getId(), source, game) && !target.getTargets().contains(card.getId())) {\n                                    target.add(card.getId(), game);\n                                    targetFound = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (targetFound) {\n                        targets.remove(targetDefinition);\n                        return true;\n                    }\n                }\n\n            }\n\n        }\n        return super.chooseTarget(outcome, target, source, game);\n    }","id":105537,"modified_method":"@Override\n    public boolean chooseTarget(Outcome outcome, Target target, Ability source, Game game) {\n        if (!targets.isEmpty()) {\n            if ((target instanceof TargetPermanent) || (target instanceof TargetPermanentOrPlayer)) {\n                for (String targetDefinition: targets) {\n                    String[] targetList = targetDefinition.split(\"\\\\^\");\n                    boolean targetFound = false;\n                    for (String targetName: targetList) {\n                        boolean allowCopy = true;\n                        if (targetName.endsWith(\"[no copy]\")) {\n                            allowCopy = false;\n                            targetName = targetName.substring(0, targetName.length()-9);\n                        }\n                        for (Permanent permanent : game.getBattlefield().getAllActivePermanents((FilterPermanent)target.getFilter(), game)) {\n                            if (permanent.getName().equals(targetName) || (permanent.getName()+\"-\"+permanent.getExpansionSetCode()).equals(targetName)) {\n                                if (((TargetPermanent)target).canTarget(source == null ? this.getId(): source.getControllerId(), permanent.getId(), source, game) && !target.getTargets().contains(permanent.getId())) {\n                                    if (!permanent.isCopy() || allowCopy) {\n                                        target.add(permanent.getId(), game);\n                                        targetFound = true;\n                                        break;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                    if (targetFound) {\n                        targets.remove(targetDefinition);\n                        return true;\n                    }\n                }\n            }\n            if (target instanceof TargetPlayer) {\n                for (String targetDefinition: targets) {\n                    if (targetDefinition.startsWith(\"targetPlayer=\")) {\n                        String playerName = targetDefinition.substring(targetDefinition.indexOf(\"targetPlayer=\") + 13);\n                        for (Player player: game.getPlayers().values()) {\n                            if (player.getName().equals(playerName)\n                                    && ((TargetPlayer) target).canTarget(playerId, player.getId(), source, game)) {\n                                target.add(player.getId(), game);\n                                return true;\n                            }\n                        }\n                    }\n                }\n                \n            }\n            if (target instanceof TargetCardInHand) {\n                for (String targetDefinition: targets) {\n                    String[] targetList = targetDefinition.split(\"\\\\^\");\n                    boolean targetFound = false;\n                    for (String targetName: targetList) {\n                        for (Card card: this.getHand().getCards(((TargetCardInHand)target).getFilter(), game)) {\n                            if (card.getName().equals(targetName) || (card.getName()+\"-\"+card.getExpansionSetCode()).equals(targetName)) {\n                                if (((TargetCardInHand)target).canTarget(source.getControllerId(), card.getId(), source, game) && !target.getTargets().contains(card.getId())) {\n                                    target.add(card.getId(), game);\n                                    targetFound = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (targetFound) {\n                        targets.remove(targetDefinition);\n                        return true;\n                    }\n                }\n\n            }\n\n        }\n        return super.chooseTarget(outcome, target, source, game);\n    }","commit_id":"66cf6909680d4ab6546e53edda74134cdeb6d233","url":"https://github.com/magefree/mage"},{"original_method":"public void addTarget(TestPlayer player, String target) {\n        player.addTarget(target);\n    }","id":105538,"modified_method":"/**\n     * Set target Permanents\n     *\n     * @param player\n     * @param target you can add multiple targets by seperating them by the \"^\" character\n     *               e.g.    \"creatureName1^creatureName2\"\n     *               you can qualify the target additional by setcode\n     *               e.g. \"creatureName-M15\"\n     */\n    public void addTarget(TestPlayer player, String target) {\n        player.addTarget(target);\n    }","commit_id":"429e114f69b69a9812e6be5c613eea39bfd23011","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {\n        Permanent permanent = game.getPermanent(id);\n        if (permanent != null) {\n            if (source != null) {\n                //1. TODO: check for replacement effects\n                //2. We need to check both source.getId() and source.getSourceId()\n                // first for protection from spells or abilities (e.g. protection from colored spells, r1753)\n                // second for protection from sources (e.g. protection from artifacts + equip ability)\n                return permanent.canBeTargetedBy(game.getObject(source.getId()), controllerId, game)\n                        && permanent.canBeTargetedBy(game.getObject(source.getSourceId()), controllerId, game)\n                        && filter.match(permanent, source.getSourceId(), controllerId, game);\n            } else {\n                return filter.match(permanent, null, controllerId, game);\n            }\n        }\n        return false;\n    }","id":105539,"modified_method":"@Override\n    public boolean canTarget(UUID controllerId, UUID id, Ability source, Game game) {\n        Permanent permanent = game.getPermanent(id);\n        if (permanent != null) {\n            if (source != null) {\n                //1. TODO: check for replacement effects\n                //2. We need to check both source.getId() and source.getSourceId()\n                // first for protection from spells or abilities (e.g. protection from colored spells, r1753)\n                // second for protection from sources (e.g. protection from artifacts + equip ability)\n                if (!isNotTarget()) {\n                    if (!permanent.canBeTargetedBy(game.getObject(source.getId()), controllerId, game) || \n                            !permanent.canBeTargetedBy(game.getObject(source.getSourceId()), controllerId, game)) { \n                        return false;\n                    }\n                }\n                return filter.match(permanent, source.getSourceId(), controllerId, game);\n            } else {\n                return filter.match(permanent, null, controllerId, game);\n            }\n        }\n        return false;\n    }","commit_id":"429e114f69b69a9812e6be5c613eea39bfd23011","url":"https://github.com/magefree/mage"},{"original_method":"@Override\n    public boolean chooseTarget(Outcome outcome, Target target, Ability source, Game game) {\n        if (!targets.isEmpty()) {\n            if (target instanceof TargetPermanent) {\n                for (Permanent permanent : game.getBattlefield().getAllActivePermanents((FilterPermanent)target.getFilter(), game)) {\n                    for (String _target: targets) {\n                        if (permanent.getName().equals(_target)) {\n                            if (((TargetPermanent)target).canTarget(playerId, permanent.getId(), null, game) && !target.getTargets().contains(permanent.getId())) {\n                                target.add(permanent.getId(), game);\n                                targets.remove(_target);\n                                return true;\n                            }\n                        } else if ((permanent.getName()+\"-\"+permanent.getExpansionSetCode()).equals(_target)) {\n                            if (((TargetPermanent)target).canTarget(playerId, permanent.getId(), null, game) && !target.getTargets().contains(permanent.getId())) {\n                                target.add(permanent.getId(), game);\n                                targets.remove(_target);\n                                return true;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        return super.chooseTarget(outcome, target, source, game);\n    }","id":105540,"modified_method":"@Override\n    public boolean chooseTarget(Outcome outcome, Target target, Ability source, Game game) {\n        if (!targets.isEmpty()) {\n            if (target instanceof TargetPermanent) {\n                for (String targetDefinition: targets) {\n                    String[] targetList = targetDefinition.split(\"\\\\^\");\n                    boolean targetFound = false;\n                    for (String targetName: targetList) {\n                        for (Permanent permanent : game.getBattlefield().getAllActivePermanents((FilterPermanent)target.getFilter(), game)) {\n                            if (permanent.getName().equals(targetName) || (permanent.getName()+\"-\"+permanent.getExpansionSetCode()).equals(targetName)) {\n                                if (((TargetPermanent)target).canTarget(source.getControllerId(), permanent.getId(), source, game) && !target.getTargets().contains(permanent.getId())) {\n                                    target.add(permanent.getId(), game);\n                                    targetFound = true;\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    if (targetFound) {\n                        targets.remove(targetDefinition);\n                        return true;\n                    }\n                }\n            }\n        }\n        return super.chooseTarget(outcome, target, source, game);\n    }","commit_id":"429e114f69b69a9812e6be5c613eea39bfd23011","url":"https://github.com/magefree/mage"},{"original_method":"@Nullable\n  private static PsiElement getSelectedPsiElement(final DataContext dataContext, final Project project) {\n    PsiElement element = null;\n    final Editor editor = PlatformDataKeys.EDITOR.getData(dataContext);\n    if (editor != null){\n      final PsiFile psiFile = PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());\n      if (psiFile != null) {\n        element = psiFile.findElementAt(editor.getCaretModel().getOffset());\n      }\n    }\n    if (element == null) {\n      element = LangDataKeys.PSI_ELEMENT.getData(dataContext);\n    }\n    if (element == null) {\n      final VirtualFile file = PlatformDataKeys.VIRTUAL_FILE.getData(dataContext);\n      if (file != null) {\n        element = PsiManager.getInstance(project).findFile(file);\n      }\n    }\n    return element;\n  }","id":105541,"modified_method":"@Nullable\n  private static PsiElement getSelectedPsiElement(final DataContext dataContext, final Project project) {\n    PsiElement element = null;\n    final Editor editor = PlatformDataKeys.EDITOR.getData(dataContext);\n    if (editor != null){\n      final PsiFile psiFile = PsiDocumentManager.getInstance(project).getPsiFile(editor.getDocument());\n      if (psiFile != null) {\n        final int offset = editor.getCaretModel().getOffset();\n        element = psiFile.findElementAt(offset);\n        if (element == null && offset > 0 && offset == psiFile.getTextLength()) {\n          element = psiFile.findElementAt(offset-1);\n        }\n      }\n    }\n    if (element == null) {\n      element = LangDataKeys.PSI_ELEMENT.getData(dataContext);\n    }\n    if (element == null) {\n      final VirtualFile file = PlatformDataKeys.VIRTUAL_FILE.getData(dataContext);\n      if (file != null) {\n        element = PsiManager.getInstance(project).findFile(file);\n      }\n    }\n    return element;\n  }","commit_id":"010ad3dba1b4862a0c1dd0db8428b9e13b15d425","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public Result preprocessEnter(@NotNull PsiFile file,\n                                @NotNull Editor editor,\n                                @NotNull Ref<Integer> caretOffset,\n                                @NotNull Ref<Integer> caretAdvance,\n                                @NotNull DataContext dataContext,\n                                EditorActionHandler originalHandler) {\n    if (!(file instanceof PyFile)) {\n      return Result.Continue;\n    }\n    final Boolean isSplitLine = DataManager.getInstance().loadFromDataContext(dataContext, SplitLineAction.SPLIT_LINE_KEY);\n    if (isSplitLine != null) {\n      return Result.Continue;\n    }\n    Document doc = editor.getDocument();\n    PsiDocumentManager.getInstance(file.getProject()).commitDocument(doc);\n    final int offset = caretOffset.get();\n    final PsiElement element = file.findElementAt(offset);\n    if (element == null) {\n      return Result.Continue;\n    }\n    CodeInsightSettings codeInsightSettings = CodeInsightSettings.getInstance();\n    if (codeInsightSettings.JAVADOC_STUB_ON_ENTER && PythonDocCommentUtil.inDocComment(element)) {\n      insertDocStringStub(editor, element);\n      return Result.Continue;\n    }\n\n    if (!PyCodeInsightSettings.getInstance().INSERT_BACKSLASH_ON_WRAP) {\n      return Result.Continue;\n    }\n    if (offset > 0) {\n      final PsiElement beforeCaret = file.findElementAt(offset-1);\n      if (beforeCaret instanceof PsiWhiteSpace && beforeCaret.getText().indexOf('\\\\') > 0) {\n        // we've got a backslash at EOL already, don't need another one\n        return Result.Continue;\n      }\n    }\n    PsiElement statementBefore = findStatementBeforeCaret(file, offset);\n    PsiElement statementAfter = findStatementAfterCaret(file, offset);\n    if (statementBefore != statementAfter) {  // Enter pressed at statement break\n      return Result.Continue;\n    }\n    if (statementBefore == null) {  // empty file\n      return Result.Continue;\n    }\n\n    if (PsiTreeUtil.hasErrorElements(statementBefore)) {\n      final Boolean autoWrapping = DataManager.getInstance().loadFromDataContext(dataContext, AutoHardWrapHandler.AUTO_WRAP_LINE_IN_PROGRESS_KEY);\n      if (autoWrapping == null) {\n        // code is already bad, don't mess it up even further\n        return Result.Continue;\n      }\n      // if we're in middle of typing, it's expected that we will have error elements\n    }\n\n    if (inFromImportParentheses(statementBefore, offset)) {\n      return Result.Continue;\n    }\n\n    PsiElement wrappableBefore = findWrappable(file, offset, true);\n    PsiElement wrappableAfter = findWrappable(file, offset, false);\n    if (!(wrappableBefore instanceof PsiComment)) {\n      while (wrappableBefore != null) {\n        PsiElement next = PsiTreeUtil.getParentOfType(wrappableBefore, IMPLICIT_WRAP_CLASSES);\n        if (next == null) {\n          break;\n        }\n        wrappableBefore = next;\n      }\n    }\n    if (!(wrappableAfter instanceof PsiComment)) {\n      while (wrappableAfter != null) {\n        PsiElement next = PsiTreeUtil.getParentOfType(wrappableAfter, IMPLICIT_WRAP_CLASSES);\n        if (next == null) {\n          break;\n        }\n        wrappableAfter = next;\n      }\n    }\n    if (wrappableBefore instanceof PsiComment || wrappableAfter instanceof PsiComment) {\n      return Result.Continue;\n    }\n    if (wrappableAfter == null || wrappableBefore != wrappableAfter) {\n      doc.insertString(offset, \"\\\\\");\n      caretOffset.set(offset+1);\n    }\n    return Result.Continue;\n  }","id":105542,"modified_method":"@Override\n  public Result preprocessEnter(@NotNull PsiFile file,\n                                @NotNull Editor editor,\n                                @NotNull Ref<Integer> caretOffset,\n                                @NotNull Ref<Integer> caretAdvance,\n                                @NotNull DataContext dataContext,\n                                EditorActionHandler originalHandler) {\n    if (!(file instanceof PyFile)) {\n      return Result.Continue;\n    }\n    final Boolean isSplitLine = DataManager.getInstance().loadFromDataContext(dataContext, SplitLineAction.SPLIT_LINE_KEY);\n    if (isSplitLine != null) {\n      return Result.Continue;\n    }\n    Document doc = editor.getDocument();\n    PsiDocumentManager.getInstance(file.getProject()).commitDocument(doc);\n    final int offset = caretOffset.get();\n    final PsiElement element = file.findElementAt(offset);\n    CodeInsightSettings codeInsightSettings = CodeInsightSettings.getInstance();\n    if (codeInsightSettings.JAVADOC_STUB_ON_ENTER) {\n      PsiElement comment = element;\n      if (comment == null && offset != 0)\n        comment = file.findElementAt(offset-1);\n      if (PythonDocCommentUtil.inDocComment(comment)) {\n        insertDocStringStub(editor, comment);\n        return Result.Continue;\n      }\n    }\n\n    if (element == null) {\n      return Result.Continue;\n    }\n\n    if (!PyCodeInsightSettings.getInstance().INSERT_BACKSLASH_ON_WRAP) {\n      return Result.Continue;\n    }\n    if (offset > 0) {\n      final PsiElement beforeCaret = file.findElementAt(offset-1);\n      if (beforeCaret instanceof PsiWhiteSpace && beforeCaret.getText().indexOf('\\\\') > 0) {\n        // we've got a backslash at EOL already, don't need another one\n        return Result.Continue;\n      }\n    }\n    PsiElement statementBefore = findStatementBeforeCaret(file, offset);\n    PsiElement statementAfter = findStatementAfterCaret(file, offset);\n    if (statementBefore != statementAfter) {  // Enter pressed at statement break\n      return Result.Continue;\n    }\n    if (statementBefore == null) {  // empty file\n      return Result.Continue;\n    }\n\n    if (PsiTreeUtil.hasErrorElements(statementBefore)) {\n      final Boolean autoWrapping = DataManager.getInstance().loadFromDataContext(dataContext, AutoHardWrapHandler.AUTO_WRAP_LINE_IN_PROGRESS_KEY);\n      if (autoWrapping == null) {\n        // code is already bad, don't mess it up even further\n        return Result.Continue;\n      }\n      // if we're in middle of typing, it's expected that we will have error elements\n    }\n\n    if (inFromImportParentheses(statementBefore, offset)) {\n      return Result.Continue;\n    }\n\n    PsiElement wrappableBefore = findWrappable(file, offset, true);\n    PsiElement wrappableAfter = findWrappable(file, offset, false);\n    if (!(wrappableBefore instanceof PsiComment)) {\n      while (wrappableBefore != null) {\n        PsiElement next = PsiTreeUtil.getParentOfType(wrappableBefore, IMPLICIT_WRAP_CLASSES);\n        if (next == null) {\n          break;\n        }\n        wrappableBefore = next;\n      }\n    }\n    if (!(wrappableAfter instanceof PsiComment)) {\n      while (wrappableAfter != null) {\n        PsiElement next = PsiTreeUtil.getParentOfType(wrappableAfter, IMPLICIT_WRAP_CLASSES);\n        if (next == null) {\n          break;\n        }\n        wrappableAfter = next;\n      }\n    }\n    if (wrappableBefore instanceof PsiComment || wrappableAfter instanceof PsiComment) {\n      return Result.Continue;\n    }\n    if (wrappableAfter == null || wrappableBefore != wrappableAfter) {\n      doc.insertString(offset, \"\\\\\");\n      caretOffset.set(offset+1);\n    }\n    return Result.Continue;\n  }","commit_id":"5e058c901563667750c52bd46d5c095453a87a5b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void execute(@NotNull Editor editor, char charTyped, @NotNull DataContext dataContext) {\n    super.execute(editor, charTyped, dataContext);\n    if (charTyped != ' ') {\n      return;\n    }\n\n    Project project = PlatformDataKeys.PROJECT.getData(dataContext);\n    VirtualFile vfile = PlatformDataKeys.VIRTUAL_FILE.getData(dataContext);\n    if (project != null && vfile != null) {\n      PsiFile file = PsiManager.getInstance(project).findFile(vfile);\n      if (file != null) {\n        PsiElement element = file.findElementAt(editor.getCaretModel().getOffset());\n        if (PythonDocCommentUtil.inDocComment(element)) {\n          PythonDocumentationProvider provider = new PythonDocumentationProvider();\n          PyFunction fun = PsiTreeUtil.getParentOfType(element, PyFunction.class);\n          if (fun != null) {\n            String docStub = provider.generateDocumentationContentStub(fun, false);\n            docStub += element.getParent().getText().substring(0,3);\n            if (docStub != null && docStub.length() != 0) {\n              editor.getDocument().insertString(editor.getCaretModel().getOffset(), docStub);\n              editor.getCaretModel().moveCaretRelatively(100, 1, false, false, false);\n              return;\n            }\n          }\n          PyElement klass = PsiTreeUtil.getParentOfType(element, PyClass.class, PyFile.class);\n          if (klass != null) {\n            editor.getDocument().insertString(editor.getCaretModel().getOffset(),\n                            PythonDocCommentUtil.generateDocForClass(klass, element.getParent().getText().substring(0,3)));\n            return;\n          }\n        }\n      }\n    }\n  }","id":105543,"modified_method":"public void execute(@NotNull Editor editor, char charTyped, @NotNull DataContext dataContext) {\n    super.execute(editor, charTyped, dataContext);\n    if (charTyped != ' ') {\n      return;\n    }\n\n    Project project = PlatformDataKeys.PROJECT.getData(dataContext);\n    VirtualFile vfile = PlatformDataKeys.VIRTUAL_FILE.getData(dataContext);\n    if (project != null && vfile != null) {\n      PsiFile file = PsiManager.getInstance(project).findFile(vfile);\n      if (file != null) {\n        int offset = editor.getCaretModel().getOffset();\n        PsiElement element = file.findElementAt(offset);\n        if (element == null && offset > 1)\n          element = file.findElementAt(offset-2);\n        if (PythonDocCommentUtil.inDocComment(element)) {\n          PythonDocumentationProvider provider = new PythonDocumentationProvider();\n          PyFunction fun = PsiTreeUtil.getParentOfType(element, PyFunction.class);\n          if (fun != null) {\n            String docStub = provider.generateDocumentationContentStub(fun, false);\n            docStub += element.getParent().getText().substring(0,3);\n            if (docStub != null && docStub.length() != 0) {\n              editor.getDocument().insertString(editor.getCaretModel().getOffset(), docStub);\n              editor.getCaretModel().moveCaretRelatively(100, 1, false, false, false);\n              return;\n            }\n          }\n          PyElement klass = PsiTreeUtil.getParentOfType(element, PyClass.class, PyFile.class);\n          if (klass != null) {\n            editor.getDocument().insertString(editor.getCaretModel().getOffset(),\n                            PythonDocCommentUtil.generateDocForClass(klass, element.getParent().getText().substring(0,3)));\n            return;\n          }\n        }\n      }\n    }\n  }","commit_id":"5e058c901563667750c52bd46d5c095453a87a5b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public PsiElement getElementFromLookup(final Editor editor, @Nullable final PsiFile file) {\n\n    final Lookup activeLookup = LookupManager.getInstance(myProject).getActiveLookup();\n\n    if (activeLookup != null) {\n      LookupElement item = activeLookup.getCurrentItem();\n      if (item != null) {\n\n        final PsiElement contextElement = file != null ? file.findElementAt(editor.getCaretModel().getOffset()) : null;\n        final PsiReference ref = TargetElementUtilBase.findReference(editor, editor.getCaretModel().getOffset());\n\n        final DocumentationProvider documentationProvider = getProviderFromElement(file);\n\n        return documentationProvider.getDocumentationElementForLookupItem(\n          PsiManager.getInstance(myProject),\n          item.getObject(),\n          ref != null ? ref.getElement():contextElement\n        );\n      }\n    }\n    return null;\n  }","id":105544,"modified_method":"@Nullable\n  public PsiElement getElementFromLookup(final Editor editor, @Nullable final PsiFile file) {\n\n    final Lookup activeLookup = LookupManager.getInstance(myProject).getActiveLookup();\n\n    if (activeLookup != null) {\n      LookupElement item = activeLookup.getCurrentItem();\n      if (item != null) {\n\n\n        int offset = editor.getCaretModel().getOffset();\n        if (offset > 0 && offset == editor.getDocument().getTextLength()) offset--;\n        final PsiElement contextElement = file == null? null : file.findElementAt(offset);\n        final PsiReference ref = TargetElementUtilBase.findReference(editor, offset);\n\n        final DocumentationProvider documentationProvider = getProviderFromElement(file);\n\n        return documentationProvider.getDocumentationElementForLookupItem(\n          PsiManager.getInstance(myProject),\n          item.getObject(),\n          ref != null ? ref.getElement():contextElement\n        );\n      }\n    }\n    return null;\n  }","commit_id":"dcbcab5113ba0f21939b93f27c827241ca8f1418","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public PsiElement createElementFromText(@Nullable final String text,\n                                          @NotNull final Language language,\n                                          @NotNull final IElementType type,\n                                          @NotNull final PsiElement context) {\n    if (text == null) return null;\n    final DummyHolder result = DummyHolderFactory.createHolder(context.getManager(), language, context);\n    final FileElement holder = result.getTreeElement();\n\n    final ParserDefinition parserDefinition = LanguageParserDefinitions.INSTANCE.forLanguage(language);\n    if (parserDefinition == null) {\n      throw new AssertionError(\"No parser definition for \" + language);\n    }\n    final Project project = context.getProject();\n    final Lexer lexer = parserDefinition.createLexer(project);\n    final PsiBuilder builder = PsiBuilderFactory.getInstance().createBuilder(project, holder, lexer, language, text);\n    final ASTNode node = parserDefinition.createParser(project).parse(type, builder);\n    holder.rawAddChildren((TreeElement)node);\n    markGenerated(result);\n    return node.getPsi();\n  }","id":105545,"modified_method":"@Nullable\n  public PsiElement createElementFromText(@Nullable final String text,\n                                          @NotNull final Language language,\n                                          @NotNull final IElementType type,\n                                          @Nullable final PsiElement context) {\n    if (text == null) return null;\n    final DummyHolder result = DummyHolderFactory.createHolder(myManager, language, context);\n    final FileElement holder = result.getTreeElement();\n\n    final ParserDefinition parserDefinition = LanguageParserDefinitions.INSTANCE.forLanguage(language);\n    if (parserDefinition == null) {\n      throw new AssertionError(\"No parser definition for \" + language);\n    }\n    final Project project = myManager.getProject();\n    final Lexer lexer = parserDefinition.createLexer(project);\n    final PsiBuilder builder = PsiBuilderFactory.getInstance().createBuilder(project, holder, lexer, language, text);\n    final ASTNode node = parserDefinition.createParser(project).parse(type, builder);\n    holder.rawAddChildren((TreeElement)node);\n    markGenerated(result);\n    return node.getPsi();\n  }","commit_id":"dcbcab5113ba0f21939b93f27c827241ca8f1418","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public XQConnection getConnection(String username, String password) throws XQException\n\t{\n\t\ttry\n\t\t{\n\t\t\t//get the broker pool instance\n\t\t\tBrokerPool pool = BrokerPool.getInstance();\n\t\t\t\n\t\t\t//get the user\n\t\t\tUserImpl user = pool.getSecurityManager().getUser(username);\n\t\t\t\n\t\t\tif (user == null)\n\t\t\t{\n\t        \tthrow new XQException(\"User '\" + username + \"' does not exist\");\n\t        }\n\t        if (!user.validate(password) )\n\t        {\n\t        \tthrow new XQException(\"Invalid password for user '\" + username + \"'\");\n\t        }\n\t\t\t\n\t        //BUG: where release???\n\t        //get a broker for the user\n\t        DBBroker broker = pool.get(user);\n\t        \n\t        //return the connection object\n\t        return new org.exist.xqj.XQConnection(broker, handler);\n\t\t\t\n\t\t}\n\t\tcatch(EXistException ee)\n\t\t{\n\t\t\tthrow new XQException(\"Can not access local database instance: \" + ee.getMessage());\n\t\t}\n\t}","id":105546,"modified_method":"public XQConnection getConnection(String username, String password) throws XQException\n\t{\n\t\ttry\n\t\t{\n\t\t\t//get the broker pool instance\n\t\t\tBrokerPool pool = BrokerPool.getInstance();\n\t\t\t\n\t\t\tUser user;\n\t\t\t//get the user\n\t\t\ttry {\n\t\t\t\tuser = pool.getSecurityManager().authenticate(username, password);\n\t\t\t} catch (AuthenticationException e) {\n\t        \tthrow new XQException(e.getMessage());\n\t\t\t}\n\t\t\t\n\t        //BUG: where release???\n\t        //get a broker for the user\n\t        DBBroker broker = pool.get(user);\n\t        \n\t        //return the connection object\n\t        return new org.exist.xqj.XQConnection(broker, handler);\n\t\t\t\n\t\t}\n\t\tcatch(EXistException ee)\n\t\t{\n\t\t\tthrow new XQException(\"Can not access local database instance: \" + ee.getMessage());\n\t\t}\n\t}","commit_id":"31a4ab268879d390ef88ad115eb50771a1c5206a","url":"https://github.com/eXist-db/exist"},{"original_method":"protected User authenticate(String username, String password) throws XmlRpcException {\n        // assume guest user if no user is specified\n        // set a password for admin to permit this\n        if (username == null) {\n            username = \"guest\";\n            password = \"guest\";\n        }\n        // check user\n        UserImpl u = brokerPool.getSecurityManager().getUser(username);\n        if (u == null)\n            throw new XmlRpcException(0, \"User \" + username + \" unknown\" );\n        if (!u.validate(password)) {\n            LOG.debug(\"login denied for user \" + username);\n            throw new XmlRpcException(0, \"Invalid password for user \" + username);\n        }\n        return u;\n    }","id":105547,"modified_method":"protected User authenticate(String username, String password) throws XmlRpcException {\n        // assume guest user if no user is specified\n        // set a password for admin to permit this\n        if (username == null) {\n            username = SecurityManager.GUEST_USER;\n            password = username;\n        }\n        // check user\n        try {\n            return brokerPool.getSecurityManager().authenticate(username, password);\n\t\t} catch (AuthenticationException e) {\n            LOG.debug(e.getMessage());\n            throw new XmlRpcException(0, e.getMessage());\n\t\t}\n    }","commit_id":"889b05455a83b8cbddd3354c943e0989390a01e7","url":"https://github.com/eXist-db/exist"},{"original_method":"@Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\n        String stylesheet = (String) request.getAttribute(REQ_ATTRIBUTE_STYLESHEET);\n        if (stylesheet == null){\n            throw new ServletException(\"No stylesheet source specified!\");\n        }\n\n        Item inputNode = null;\n        \n        String sourceAttrib = (String) request.getAttribute(REQ_ATTRIBUTE_INPUT);\n        if (sourceAttrib != null) {\n\n            Object sourceObj = request.getAttribute(sourceAttrib);\n            if (sourceObj != null) {\n            \tif (sourceObj instanceof ValueSequence) {\n\t\t\t\t\tValueSequence seq = (ValueSequence) sourceObj;\n\t\t\t\t\t\n\t\t\t\t\tif (seq.size() == 1) {\n\t\t\t\t\t\tsourceObj = seq.get(0);\n                    }\n\t\t\t\t}\n            \t\n                if (sourceObj instanceof Item) {\n                    inputNode = (Item) sourceObj;\n                    if (!Type.subTypeOf(inputNode.getType(), Type.NODE)) {\n                        throw new ServletException(\"Input for XSLT servlet is not a node. Read from attribute \" +\n                                sourceAttrib);\n                    }\n\n                    LOG.debug(\"Taking XSLT input from request attribute \" + sourceAttrib);\n                    \n                } else\n                    throw new ServletException(\"Input for XSLT servlet is not a node. Read from attribute \" +\n                            sourceAttrib);\n            }\n        }\n\n        // Retrieve username / password from HTTP request attributes\n        String userParam = (String) request.getAttribute(\"xslt.user\");\n        String passwd = (String) request.getAttribute(\"xslt.password\");\n        if (userParam == null) {\n            userParam = org.exist.security.SecurityManager.GUEST_USER;\n            passwd = userParam;\n        }\n\n        try {\n            pool = BrokerPool.getInstance();\n            UserImpl user = pool.getSecurityManager().getUser(userParam);\n            if (user != null) {\n                if (!user.validate(passwd)) {\n                    response.sendError(HttpServletResponse.SC_FORBIDDEN, \"Wrong password or user\");\n                }\n            }\n\n            SAXTransformerFactory factory = TransformerFactoryAllocator.getTransformerFactory(pool);\n            Templates templates = getSource(user, request, response, factory, stylesheet);\n            if (templates == null){\n                return;\n            }\n            \n            //do the transformation\n            DBBroker broker = null;\n            try {\n                broker = pool.get(user);\n\n                TransformerHandler handler = factory.newTransformerHandler(templates);\n                setTransformerParameters(request, handler.getTransformer());\n                \n                Properties properties = handler.getTransformer().getOutputProperties();\n                setOutputProperties(request, properties);\n\n                String encoding = properties.getProperty(\"encoding\");\n                if (encoding == null){\n                    encoding = \"UTF-8\";\n                }\n                response.setCharacterEncoding(encoding);\n\n                String mediaType = properties.getProperty(\"media-type\");\n                if (mediaType != null) {\n                    if (encoding == null)\n                        response.setContentType(mediaType);\n                    \n                    //check, do mediaType have \"charset\"\n                    else if (mediaType.indexOf(\"charset\") == -1)\n                        response.setContentType(mediaType + \"; charset=\" + encoding);\n                    \n                    else \n                        response.setContentType(mediaType);\n                }\n\n                SAXSerializer sax = (SAXSerializer) SerializerPool.getInstance().borrowObject(SAXSerializer.class);\n                Writer writer = new BufferedWriter(response.getWriter());\n                sax.setOutput(writer, properties);\n\n                SAXResult result = new SAXResult(sax);\n                handler.setResult(result);\n                \n                Serializer serializer = broker.getSerializer();\n                serializer.reset();\n                \n                Receiver receiver = new ReceiverToSAX(handler);\n                try {\n                    XIncludeFilter xinclude = new XIncludeFilter(serializer, receiver);\n                    receiver = xinclude;\n                    String moduleLoadPath;\n\n                    String base = (String) request.getAttribute(REQ_ATTRIBUTE_BASE);\n                    if (base != null){\n                        moduleLoadPath = getServletContext().getRealPath(base);\n                    } else {\n                        moduleLoadPath = getCurrentDir(request).getAbsolutePath();\n                    }\n\n                    xinclude.setModuleLoadPath(moduleLoadPath);\n\n                    serializer.setReceiver(receiver);\n                    if (inputNode != null){\n                        serializer.toSAX((NodeValue)inputNode);\n\n                    } else {\n                        SAXToReceiver saxreceiver = new SAXToReceiver(receiver);\n                        XMLReader reader = pool.getParserPool().borrowXMLReader();\n                        reader.setContentHandler(saxreceiver);\n\n                    \t//Handle gziped input stream\n                    \tInputStream stream;\n                        \n                    \tInputStream inStream = new BufferedInputStream(request.getInputStream());\n                    \tinStream.mark(10);\n                        try {\n                        \tstream = new GZIPInputStream(inStream);\n                        } catch (IOException e) {\n                        \tinStream.reset();\n                        \tstream = inStream;\n\t\t\t\t\t\t}\n\n                        reader.parse(new InputSource(stream));\n                    }\n\n                } catch (SAXParseException e) {\n                    LOG.error(e.getMessage());\n                    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());\n\n                } catch (SAXException e) {\n                    throw new ServletException(\"SAX exception while transforming node: \" + e.getMessage(), e);\n\n                } finally {\n                    SerializerPool.getInstance().returnObject(sax);\n                }\n                \n                writer.flush();\n                response.flushBuffer();\n\n            } catch (IOException e) {\n                throw new ServletException(\"IO exception while transforming node: \" + e.getMessage(), e);\n\n            } catch (TransformerException e) {\n                throw new ServletException(\"Exception while transforming node: \" + e.getMessage(), e);\n                \n            } catch (Throwable e){\n                LOG.error(e);\n                throw new ServletException(\"An error occurred: \" + e.getMessage(), e);\n\n            } finally {\n                pool.release(broker);\n            }\n            \n        } catch (EXistException e) {\n            throw new ServletException(e.getMessage(), e);\n        }\n    }","id":105548,"modified_method":"@Override\n    protected void doPost(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {\n\n        String stylesheet = (String) request.getAttribute(REQ_ATTRIBUTE_STYLESHEET);\n        if (stylesheet == null){\n            throw new ServletException(\"No stylesheet source specified!\");\n        }\n\n        Item inputNode = null;\n        \n        String sourceAttrib = (String) request.getAttribute(REQ_ATTRIBUTE_INPUT);\n        if (sourceAttrib != null) {\n\n            Object sourceObj = request.getAttribute(sourceAttrib);\n            if (sourceObj != null) {\n            \tif (sourceObj instanceof ValueSequence) {\n\t\t\t\t\tValueSequence seq = (ValueSequence) sourceObj;\n\t\t\t\t\t\n\t\t\t\t\tif (seq.size() == 1) {\n\t\t\t\t\t\tsourceObj = seq.get(0);\n                    }\n\t\t\t\t}\n            \t\n                if (sourceObj instanceof Item) {\n                    inputNode = (Item) sourceObj;\n                    if (!Type.subTypeOf(inputNode.getType(), Type.NODE)) {\n                        throw new ServletException(\"Input for XSLT servlet is not a node. Read from attribute \" +\n                                sourceAttrib);\n                    }\n\n                    LOG.debug(\"Taking XSLT input from request attribute \" + sourceAttrib);\n                    \n                } else\n                    throw new ServletException(\"Input for XSLT servlet is not a node. Read from attribute \" +\n                            sourceAttrib);\n            }\n        }\n\n        // Retrieve username / password from HTTP request attributes\n        String userParam = (String) request.getAttribute(\"xslt.user\");\n        String passwd = (String) request.getAttribute(\"xslt.password\");\n        if (userParam == null) {\n            userParam = org.exist.security.SecurityManager.GUEST_USER;\n            passwd = userParam;\n        }\n\n        try {\n            pool = BrokerPool.getInstance();\n            User user;\n\t\t\ttry {\n\t\t\t\tuser = pool.getSecurityManager().authenticate(userParam, passwd);\n\t\t\t} catch (AuthenticationException e1) {\n                response.sendError(HttpServletResponse.SC_FORBIDDEN, \"Wrong password or user\");\n                return;\n\t\t\t}\n\n            SAXTransformerFactory factory = TransformerFactoryAllocator.getTransformerFactory(pool);\n            Templates templates = getSource(user, request, response, factory, stylesheet);\n            if (templates == null){\n                return;\n            }\n            \n            //do the transformation\n            DBBroker broker = null;\n            try {\n                broker = pool.get(user);\n\n                TransformerHandler handler = factory.newTransformerHandler(templates);\n                setTransformerParameters(request, handler.getTransformer());\n                \n                Properties properties = handler.getTransformer().getOutputProperties();\n                setOutputProperties(request, properties);\n\n                String encoding = properties.getProperty(\"encoding\");\n                if (encoding == null){\n                    encoding = \"UTF-8\";\n                }\n                response.setCharacterEncoding(encoding);\n\n                String mediaType = properties.getProperty(\"media-type\");\n                if (mediaType != null) {\n                    if (encoding == null)\n                        response.setContentType(mediaType);\n                    \n                    //check, do mediaType have \"charset\"\n                    else if (mediaType.indexOf(\"charset\") == -1)\n                        response.setContentType(mediaType + \"; charset=\" + encoding);\n                    \n                    else \n                        response.setContentType(mediaType);\n                }\n\n                SAXSerializer sax = (SAXSerializer) SerializerPool.getInstance().borrowObject(SAXSerializer.class);\n                Writer writer = new BufferedWriter(response.getWriter());\n                sax.setOutput(writer, properties);\n\n                SAXResult result = new SAXResult(sax);\n                handler.setResult(result);\n                \n                Serializer serializer = broker.getSerializer();\n                serializer.reset();\n                \n                Receiver receiver = new ReceiverToSAX(handler);\n                try {\n                    XIncludeFilter xinclude = new XIncludeFilter(serializer, receiver);\n                    receiver = xinclude;\n                    String moduleLoadPath;\n\n                    String base = (String) request.getAttribute(REQ_ATTRIBUTE_BASE);\n                    if (base != null){\n                        moduleLoadPath = getServletContext().getRealPath(base);\n                    } else {\n                        moduleLoadPath = getCurrentDir(request).getAbsolutePath();\n                    }\n\n                    xinclude.setModuleLoadPath(moduleLoadPath);\n\n                    serializer.setReceiver(receiver);\n                    if (inputNode != null){\n                        serializer.toSAX((NodeValue)inputNode);\n\n                    } else {\n                        SAXToReceiver saxreceiver = new SAXToReceiver(receiver);\n                        XMLReader reader = pool.getParserPool().borrowXMLReader();\n                        reader.setContentHandler(saxreceiver);\n\n                    \t//Handle gziped input stream\n                    \tInputStream stream;\n                        \n                    \tInputStream inStream = new BufferedInputStream(request.getInputStream());\n                    \tinStream.mark(10);\n                        try {\n                        \tstream = new GZIPInputStream(inStream);\n                        } catch (IOException e) {\n                        \tinStream.reset();\n                        \tstream = inStream;\n\t\t\t\t\t\t}\n\n                        reader.parse(new InputSource(stream));\n                    }\n\n                } catch (SAXParseException e) {\n                    LOG.error(e.getMessage());\n                    response.sendError(HttpServletResponse.SC_INTERNAL_SERVER_ERROR, e.getMessage());\n\n                } catch (SAXException e) {\n                    throw new ServletException(\"SAX exception while transforming node: \" + e.getMessage(), e);\n\n                } finally {\n                    SerializerPool.getInstance().returnObject(sax);\n                }\n                \n                writer.flush();\n                response.flushBuffer();\n\n            } catch (IOException e) {\n                throw new ServletException(\"IO exception while transforming node: \" + e.getMessage(), e);\n\n            } catch (TransformerException e) {\n                throw new ServletException(\"Exception while transforming node: \" + e.getMessage(), e);\n                \n            } catch (Throwable e){\n                LOG.error(e);\n                throw new ServletException(\"An error occurred: \" + e.getMessage(), e);\n\n            } finally {\n                pool.release(broker);\n            }\n            \n        } catch (EXistException e) {\n            throw new ServletException(e.getMessage(), e);\n        }\n    }","commit_id":"c674820606253f6bba60439b76974e23e7f60dcb","url":"https://github.com/eXist-db/exist"},{"original_method":"public static List<SNode> virtual_getMethodsToOverride_5418393554803767537(SNode thisNode) {\n    List<SNode> methods = new ArrayList<SNode>();\n    Iterable<SNode> myMethods = Sequence.fromIterable(IClassifierType_Behavior.call_getMembers_7405920559687277275(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, \"virtual_getThisType_7405920559687254782\", new Object[]{}))).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\"));\n      }\n    }).select(new ISelector<SNode, SNode>() {\n      public SNode select(SNode it) {\n        return SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\"));\n      }\n    });\n\n    for (SNode method : myMethods) {\n      SNode cls = SNodeOperations.getNodeAncestor(method, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, \"jetbrains.mps.baseLanguage.structure.Classifier\"), false, false);\n      if (cls == thisNode) {\n        continue;\n      }\n      if (!(SNodeOperations.isInstanceOf(cls, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, \"jetbrains.mps.baseLanguage.structure.ClassConcept\")))) {\n        continue;\n      }\n      if (SPropertyOperations.getBoolean(method, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0x113294bffd2L, \"isFinal\")) || SPropertyOperations.getBoolean(SNodeOperations.cast(method, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\")), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, 0x1126a8d157dL, \"isAbstract\")) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(method, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112670d273fL, 0x112670d886aL, \"visibility\")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10af9586f0cL, \"jetbrains.mps.baseLanguage.structure.PrivateVisibility\"))) {\n        continue;\n      }\n      ListSequence.fromList(methods).addElement(method);\n    }\n\n    SNode superclass = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, \"virtual_getSuperclass_1240936569950\", new Object[]{});\n    final Iterable<SNode> myConstructors = Sequence.fromIterable(IClassifierType_Behavior.call_getMembers_7405920559687277275(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, \"virtual_getThisType_7405920559687254782\", new Object[]{}))).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b204L, \"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\"));\n      }\n    }).select(new ISelector<SNode, SNode>() {\n      public SNode select(SNode it) {\n        return SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b204L, \"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\"));\n      }\n    });\n    Iterable<SNode> superConstructors = Sequence.fromIterable(IClassifierType_Behavior.call_getMembers_7405920559687277275(superclass)).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b204L, \"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\"));\n      }\n    }).select(new ISelector<SNode, SNode>() {\n      public SNode select(SNode it) {\n        return SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b204L, \"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\"));\n      }\n    }).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112670d273fL, 0x112670d886aL, \"visibility\")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10af9586f0cL, \"jetbrains.mps.baseLanguage.structure.PrivateVisibility\")));\n      }\n    });\n    Iterable<SNode> unimplementedConstructors = Sequence.fromIterable(superConstructors).where(new IWhereFilter<SNode>() {\n      public boolean accept(final SNode candidate) {\n        return !(Sequence.fromIterable(myConstructors).any(new IWhereFilter<SNode>() {\n          public boolean accept(SNode m) {\n            return BaseMethodDeclaration_Behavior.call_hasSameParameters_855369272314187138(candidate, m);\n          }\n        }));\n      }\n    });\n\n    ListSequence.fromList(methods).addSequence(Sequence.fromIterable(unimplementedConstructors));\n    return methods;\n  }","id":105549,"modified_method":"public static List<SNode> virtual_getMethodsToOverride_5418393554803767537(SNode thisNode) {\n    List<SNode> methods = new ArrayList<SNode>();\n    Iterable<SNode> myMethods = SNodeOperations.ofConcept(IClassifierType_Behavior.call_getMembers_7405920559687277275(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, \"virtual_getThisType_7405920559687254782\", new Object[]{})), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\"));\n\n    for (SNode method : myMethods) {\n      SNode cls = SNodeOperations.getNodeAncestor(method, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x101d9d3ca30L, \"jetbrains.mps.baseLanguage.structure.Classifier\"), false, false);\n      if (cls == thisNode) {\n        continue;\n      }\n      if (!(SNodeOperations.isInstanceOf(cls, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L, \"jetbrains.mps.baseLanguage.structure.ClassConcept\")))) {\n        continue;\n      }\n      if (SPropertyOperations.getBoolean(method, MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b1fcL, 0x113294bffd2L, \"isFinal\")) || SPropertyOperations.getBoolean(SNodeOperations.cast(method, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\")), MetaAdapterFactory.getProperty(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, 0x1126a8d157dL, \"isAbstract\")) || SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(method, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b21dL, \"jetbrains.mps.baseLanguage.structure.InstanceMethodDeclaration\")), MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112670d273fL, 0x112670d886aL, \"visibility\")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10af9586f0cL, \"jetbrains.mps.baseLanguage.structure.PrivateVisibility\"))) {\n        continue;\n      }\n      ListSequence.fromList(methods).addElement(method);\n    }\n\n    SNode superclass = BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, \"virtual_getSuperclass_1240936569950\", new Object[]{});\n    final Iterable<SNode> myConstructors = SNodeOperations.ofConcept(IClassifierType_Behavior.call_getMembers_7405920559687277275(BehaviorReflection.invokeVirtual((Class<SNode>) ((Class) Object.class), thisNode, \"virtual_getThisType_7405920559687254782\", new Object[]{})), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b204L, \"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\"));\n    Iterable<SNode> superConstructors = Sequence.fromIterable(SNodeOperations.ofConcept(IClassifierType_Behavior.call_getMembers_7405920559687277275(superclass), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b204L, \"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\"))).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return !(SNodeOperations.isInstanceOf(SLinkOperations.getTarget(it, MetaAdapterFactory.getContainmentLink(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x112670d273fL, 0x112670d886aL, \"visibility\")), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x10af9586f0cL, \"jetbrains.mps.baseLanguage.structure.PrivateVisibility\")));\n      }\n    });\n    Iterable<SNode> unimplementedConstructors = Sequence.fromIterable(superConstructors).where(new IWhereFilter<SNode>() {\n      public boolean accept(final SNode candidate) {\n        return !(Sequence.fromIterable(myConstructors).any(new IWhereFilter<SNode>() {\n          public boolean accept(SNode m) {\n            return BaseMethodDeclaration_Behavior.call_hasSameParameters_855369272314187138(candidate, m);\n          }\n        }));\n      }\n    });\n\n    ListSequence.fromList(methods).addSequence(Sequence.fromIterable(unimplementedConstructors));\n    return methods;\n  }","commit_id":"6a1de07a7e5203f1cf5d34dba67d14bfa46765fa","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Iterable<SNode> call_constructors_5292274854859503373(SNode thisNode) {\n    return Sequence.fromIterable(Classifier_Behavior.call_members_1465982738252129704(thisNode)).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b204L, \"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\"));\n      }\n    }).select(new ISelector<SNode, SNode>() {\n      public SNode select(SNode it) {\n        return SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b204L, \"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\"));\n      }\n    });\n  }","id":105550,"modified_method":"public static Iterable<SNode> call_constructors_5292274854859503373(SNode thisNode) {\n    return SNodeOperations.ofConcept(Classifier_Behavior.call_members_1465982738252129704(thisNode), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8cc56b204L, \"jetbrains.mps.baseLanguage.structure.ConstructorDeclaration\"));\n  }","commit_id":"6a1de07a7e5203f1cf5d34dba67d14bfa46765fa","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Iterable<SNode> call_fields_5292274854859383272(SNode thisNode) {\n    return Sequence.fromIterable(Classifier_Behavior.call_members_1465982738252129704(thisNode)).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca68L, \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\"));\n      }\n    }).select(new ISelector<SNode, SNode>() {\n      public SNode select(SNode it) {\n        return SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca68L, \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\"));\n      }\n    });\n  }","id":105551,"modified_method":"public static Iterable<SNode> call_fields_5292274854859383272(SNode thisNode) {\n    return SNodeOperations.ofConcept(Classifier_Behavior.call_members_1465982738252129704(thisNode), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca68L, \"jetbrains.mps.baseLanguage.structure.FieldDeclaration\"));\n  }","commit_id":"6a1de07a7e5203f1cf5d34dba67d14bfa46765fa","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Iterable<SNode> call_instanceInitializers_7702003619977535145(SNode thisNode) {\n    return Sequence.fromIterable(Classifier_Behavior.call_members_1465982738252129704(thisNode)).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118f0b909f7L, \"jetbrains.mps.baseLanguage.structure.InstanceInitializer\"));\n      }\n    }).select(new ISelector<SNode, SNode>() {\n      public SNode select(SNode it) {\n        return SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118f0b909f7L, \"jetbrains.mps.baseLanguage.structure.InstanceInitializer\"));\n      }\n    });\n  }","id":105552,"modified_method":"public static Iterable<SNode> call_instanceInitializers_7702003619977535145(SNode thisNode) {\n    return SNodeOperations.ofConcept(Classifier_Behavior.call_members_1465982738252129704(thisNode), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x118f0b909f7L, \"jetbrains.mps.baseLanguage.structure.InstanceInitializer\"));\n  }","commit_id":"6a1de07a7e5203f1cf5d34dba67d14bfa46765fa","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Iterable<SNode> call_properties_5292274854859513790(SNode thisNode) {\n    return Sequence.fromIterable(Classifier_Behavior.call_members_1465982738252129704(thisNode)).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b744dafeL, \"jetbrains.mps.baseLanguage.structure.Property\"));\n      }\n    }).select(new ISelector<SNode, SNode>() {\n      public SNode select(SNode it) {\n        return SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b744dafeL, \"jetbrains.mps.baseLanguage.structure.Property\"));\n      }\n    });\n  }","id":105553,"modified_method":"public static Iterable<SNode> call_properties_5292274854859513790(SNode thisNode) {\n    return SNodeOperations.ofConcept(Classifier_Behavior.call_members_1465982738252129704(thisNode), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x117b744dafeL, \"jetbrains.mps.baseLanguage.structure.Property\"));\n  }","commit_id":"6a1de07a7e5203f1cf5d34dba67d14bfa46765fa","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Iterable<SNode> call_staticInitializers_3136320261464948039(SNode thisNode) {\n    return Sequence.fromIterable(Classifier_Behavior.call_members_1465982738252129704(thisNode)).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11c7538039dL, \"jetbrains.mps.baseLanguage.structure.StaticInitializer\"));\n      }\n    }).select(new ISelector<SNode, SNode>() {\n      public SNode select(SNode it) {\n        return SNodeOperations.cast(it, MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11c7538039dL, \"jetbrains.mps.baseLanguage.structure.StaticInitializer\"));\n      }\n    });\n  }","id":105554,"modified_method":"public static Iterable<SNode> call_staticInitializers_3136320261464948039(SNode thisNode) {\n    return SNodeOperations.ofConcept(Classifier_Behavior.call_members_1465982738252129704(thisNode), MetaAdapterFactory.getConcept(0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0x11c7538039dL, \"jetbrains.mps.baseLanguage.structure.StaticInitializer\"));\n  }","commit_id":"6a1de07a7e5203f1cf5d34dba67d14bfa46765fa","url":"https://github.com/JetBrains/MPS"},{"original_method":"private void sendUdpPingShutdown()\n    {\n        sendUdpPing( NEO_SHUTDOWN, sessionId );\n    }","id":105555,"modified_method":"private void sendUdpPingShutdown()\n    {\n        ByteBuffer buf = setupUdpPing( NEO_SHUTDOWN, sessionId );\n        SocketAddress host = new InetSocketAddress( UDP_HOST, UDP_PORT );\n        new UdpPinger( buf, host ).sendPing();\n    }","commit_id":"4c8db6214c0418a66c2ef277f7755e9491a03b1b","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void sendUdpPing( byte event, long sessionId )\n    {\n        NeoStoreXaDataSource xaDs = \n            (NeoStoreXaDataSource) persistenceSource.getXaDataSource();\n        ByteBuffer buf = ByteBuffer.allocate( 73 );\n        buf.put( NEO_STARTED );\n        buf.putLong( sessionId );\n        buf.putLong( xaDs.getRandomIdentifier() );\n        buf.putLong( xaDs.getCreationTime() );\n        buf.putLong( xaDs.getCurrentLogVersion() );\n        buf.putLong( xaDs.getNumberOfIdsInUse( Node.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( Relationship.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( PropertyStore.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( RelationshipType.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( PropertyIndex.class ) );\n        buf.flip();\n        SocketAddress host = new InetSocketAddress( UDP_HOST, UDP_PORT );\n        new UdpPinger( buf, host ).sendPing();\n    }","id":105556,"modified_method":"private ByteBuffer setupUdpPing( byte event, long sessionId )\n    {\n        NeoStoreXaDataSource xaDs = \n            (NeoStoreXaDataSource) persistenceSource.getXaDataSource();\n        ByteBuffer buf = ByteBuffer.allocate( 73 );\n        buf.put( event );\n        buf.putLong( sessionId );\n        buf.putLong( xaDs.getRandomIdentifier() );\n        buf.putLong( xaDs.getCreationTime() );\n        buf.putLong( xaDs.getCurrentLogVersion() );\n        buf.putLong( xaDs.getNumberOfIdsInUse( Node.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( Relationship.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( PropertyStore.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( RelationshipType.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( PropertyIndex.class ) );\n        buf.flip();\n        return buf;\n    }","commit_id":"4c8db6214c0418a66c2ef277f7755e9491a03b1b","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void sendUdpPingStarted()\n    {\n        sessionId = r.nextLong();\n        sendUdpPing( NEO_STARTED, sessionId );\n        timer.schedule( new TimerTask()\n        {\n            @Override\n            public void run()\n            {\n                sendUdpPingRunning();\n            }\n        }, UDP_PING_DELAY );\n    }","id":105557,"modified_method":"private void sendUdpPingStarted()\n    {\n        sessionId = r.nextLong();\n        final ByteBuffer buf = setupUdpPing( NEO_STARTED, sessionId );\n        timer.schedule( new TimerTask()\n        {\n            @Override\n            public void run()\n            {\n                SocketAddress host = new InetSocketAddress( UDP_HOST, UDP_PORT );\n                new UdpPinger( buf, host ).sendPing();\n            }\n        }, 0 );\n        timer.schedule( new TimerTask()\n        {\n            @Override\n            public void run()\n            {\n                ByteBuffer buffer = setupUdpPing( NEO_RUNNING, sessionId );\n                SocketAddress host = new InetSocketAddress( UDP_HOST, UDP_PORT );\n                new UdpPinger( buffer, host ).sendPing();\n            }\n        }, UDP_PING_DELAY, UDP_PING_DELAY );\n    }","commit_id":"4c8db6214c0418a66c2ef277f7755e9491a03b1b","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void sendPing()\n    {\n        new Thread()\n        {\n            public void run()\n            {\n                try\n                {\n                    DatagramChannel sendChannel = DatagramChannel.open();\n                    // blocking but will still just throw it at OS since it is\n                    // UDP (will not block, just fail)\n                    // one time try, ignore 0 bytes sent\n                    sendChannel.send( buf, host );\n                    sendChannel.close();\n                }\n                catch ( Exception e )\n                {\n                    // ok we tried\n                }\n            }\n        }.start();\n    }","id":105558,"modified_method":"public void sendPing()\n    {\n        try\n        {\n            DatagramChannel sendChannel = DatagramChannel.open();\n            // blocking but will still just throw it at OS since it is\n            // UDP (will not block, just fail)\n            // one time try, ignore 0 bytes sent\n            sendChannel.send( buf, host );\n            sendChannel.close();\n        }\n        catch ( Exception e )\n        {\n            e.printStackTrace();\n            // ok we tried\n        }\n    }","commit_id":"4c8db6214c0418a66c2ef277f7755e9491a03b1b","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void sendUdpPingStarted()\n    {\n        sessionId = r.nextLong();\n        sendUdpPing( NEO_STARTED, sessionId );\n        timer.schedule( new TimerTask()\n        {\n            @Override\n            public void run()\n            {\n                sendUdpPingRunning();\n            }\n        }, UDP_PING_DELAY );\n    }","id":105559,"modified_method":"private void sendUdpPingStarted()\n    {\n        sessionId = r.nextLong();\n        final ByteBuffer buf = setupUdpPing( NEO_STARTED, sessionId );\n        timer.schedule( new TimerTask()\n        {\n            @Override\n            public void run()\n            {\n                SocketAddress host = new InetSocketAddress( UDP_HOST, UDP_PORT );\n                new UdpPinger( buf, host ).sendPing();\n            }\n        }, 0 );\n        timer.schedule( new TimerTask()\n        {\n            @Override\n            public void run()\n            {\n                ByteBuffer buffer = setupUdpPing( NEO_RUNNING, sessionId );\n                SocketAddress host = new InetSocketAddress( UDP_HOST, UDP_PORT );\n                new UdpPinger( buffer, host ).sendPing();\n            }\n        }, UDP_PING_DELAY, UDP_PING_DELAY );\n    }","commit_id":"06b666fc4d9807044917a2c18696b0c4a41acd6d","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void sendUdpPing( byte event, long sessionId )\n    {\n        NeoStoreXaDataSource xaDs = \n            (NeoStoreXaDataSource) persistenceSource.getXaDataSource();\n        ByteBuffer buf = ByteBuffer.allocate( 73 );\n        buf.put( NEO_STARTED );\n        buf.putLong( sessionId );\n        buf.putLong( xaDs.getRandomIdentifier() );\n        buf.putLong( xaDs.getCreationTime() );\n        buf.putLong( xaDs.getCurrentLogVersion() );\n        buf.putLong( xaDs.getNumberOfIdsInUse( Node.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( Relationship.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( PropertyStore.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( RelationshipType.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( PropertyIndex.class ) );\n        buf.flip();\n        SocketAddress host = new InetSocketAddress( UDP_HOST, UDP_PORT );\n        new UdpPinger( buf, host ).sendPing();\n    }","id":105560,"modified_method":"private ByteBuffer setupUdpPing( byte event, long sessionId )\n    {\n        NeoStoreXaDataSource xaDs = \n            (NeoStoreXaDataSource) persistenceSource.getXaDataSource();\n        ByteBuffer buf = ByteBuffer.allocate( 73 );\n        buf.put( event );\n        buf.putLong( sessionId );\n        buf.putLong( xaDs.getRandomIdentifier() );\n        buf.putLong( xaDs.getCreationTime() );\n        buf.putLong( xaDs.getCurrentLogVersion() );\n        buf.putLong( xaDs.getNumberOfIdsInUse( Node.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( Relationship.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( PropertyStore.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( RelationshipType.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( PropertyIndex.class ) );\n        buf.flip();\n        return buf;\n    }","commit_id":"06b666fc4d9807044917a2c18696b0c4a41acd6d","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void sendUdpPingShutdown()\n    {\n        sendUdpPing( NEO_SHUTDOWN, sessionId );\n    }","id":105561,"modified_method":"private void sendUdpPingShutdown()\n    {\n        ByteBuffer buf = setupUdpPing( NEO_SHUTDOWN, sessionId );\n        SocketAddress host = new InetSocketAddress( UDP_HOST, UDP_PORT );\n        new UdpPinger( buf, host ).sendPing();\n    }","commit_id":"06b666fc4d9807044917a2c18696b0c4a41acd6d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void sendPing()\n    {\n        new Thread()\n        {\n            public void run()\n            {\n                try\n                {\n                    DatagramChannel sendChannel = DatagramChannel.open();\n                    // blocking but will still just throw it at OS since it is\n                    // UDP (will not block, just fail)\n                    // one time try, ignore 0 bytes sent\n                    sendChannel.send( buf, host );\n                    sendChannel.close();\n                }\n                catch ( Exception e )\n                {\n                    // ok we tried\n                }\n            }\n        }.start();\n    }","id":105562,"modified_method":"public void sendPing()\n    {\n        try\n        {\n            DatagramChannel sendChannel = DatagramChannel.open();\n            // blocking but will still just throw it at OS since it is\n            // UDP (will not block, just fail)\n            // one time try, ignore 0 bytes sent\n            sendChannel.send( buf, host );\n            sendChannel.close();\n        }\n        catch ( Exception e )\n        {\n            e.printStackTrace();\n            // ok we tried\n        }\n    }","commit_id":"06b666fc4d9807044917a2c18696b0c4a41acd6d","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void sendUdpPing( byte event, long sessionId )\n    {\n        NeoStoreXaDataSource xaDs = \n            (NeoStoreXaDataSource) persistenceSource.getXaDataSource();\n        ByteBuffer buf = ByteBuffer.allocate( 73 );\n        buf.put( NEO_STARTED );\n        buf.putLong( sessionId );\n        buf.putLong( xaDs.getRandomIdentifier() );\n        buf.putLong( xaDs.getCreationTime() );\n        buf.putLong( xaDs.getCurrentLogVersion() );\n        buf.putLong( xaDs.getNumberOfIdsInUse( Node.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( Relationship.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( PropertyStore.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( RelationshipType.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( PropertyIndex.class ) );\n        buf.flip();\n        SocketAddress host = new InetSocketAddress( UDP_HOST, UDP_PORT );\n        new UdpPinger( buf, host ).sendPing();\n    }","id":105563,"modified_method":"private ByteBuffer setupUdpPing( byte event, long sessionId )\n    {\n        NeoStoreXaDataSource xaDs = \n            (NeoStoreXaDataSource) persistenceSource.getXaDataSource();\n        ByteBuffer buf = ByteBuffer.allocate( 73 );\n        buf.put( event );\n        buf.putLong( sessionId );\n        buf.putLong( xaDs.getRandomIdentifier() );\n        buf.putLong( xaDs.getCreationTime() );\n        buf.putLong( xaDs.getCurrentLogVersion() );\n        buf.putLong( xaDs.getNumberOfIdsInUse( Node.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( Relationship.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( PropertyStore.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( RelationshipType.class ) );\n        buf.putLong( xaDs.getNumberOfIdsInUse( PropertyIndex.class ) );\n        buf.flip();\n        return buf;\n    }","commit_id":"63cdae1320a7b2fafb64c0696fb20ed19ddd0619","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void sendUdpPingShutdown()\n    {\n        sendUdpPing( NEO_SHUTDOWN, sessionId );\n    }","id":105564,"modified_method":"private void sendUdpPingShutdown()\n    {\n        ByteBuffer buf = setupUdpPing( NEO_SHUTDOWN, sessionId );\n        SocketAddress host = new InetSocketAddress( UDP_HOST, UDP_PORT );\n        new UdpPinger( buf, host ).sendPing();\n    }","commit_id":"63cdae1320a7b2fafb64c0696fb20ed19ddd0619","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void sendUdpPingStarted()\n    {\n        sessionId = r.nextLong();\n        sendUdpPing( NEO_STARTED, sessionId );\n        timer.schedule( new TimerTask()\n        {\n            @Override\n            public void run()\n            {\n                sendUdpPingRunning();\n            }\n        }, UDP_PING_DELAY );\n    }","id":105565,"modified_method":"private void sendUdpPingStarted()\n    {\n        sessionId = r.nextLong();\n        final ByteBuffer buf = setupUdpPing( NEO_STARTED, sessionId );\n        timer.schedule( new TimerTask()\n        {\n            @Override\n            public void run()\n            {\n                SocketAddress host = new InetSocketAddress( UDP_HOST, UDP_PORT );\n                new UdpPinger( buf, host ).sendPing();\n            }\n        }, 0 );\n        timer.schedule( new TimerTask()\n        {\n            @Override\n            public void run()\n            {\n                ByteBuffer buffer = setupUdpPing( NEO_RUNNING, sessionId );\n                SocketAddress host = new InetSocketAddress( UDP_HOST, UDP_PORT );\n                new UdpPinger( buffer, host ).sendPing();\n            }\n        }, UDP_PING_DELAY, UDP_PING_DELAY );\n    }","commit_id":"63cdae1320a7b2fafb64c0696fb20ed19ddd0619","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void sendPing()\n    {\n        new Thread()\n        {\n            public void run()\n            {\n                try\n                {\n                    DatagramChannel sendChannel = DatagramChannel.open();\n                    // blocking but will still just throw it at OS since it is\n                    // UDP (will not block, just fail)\n                    // one time try, ignore 0 bytes sent\n                    sendChannel.send( buf, host );\n                    sendChannel.close();\n                }\n                catch ( Exception e )\n                {\n                    // ok we tried\n                }\n            }\n        }.start();\n    }","id":105566,"modified_method":"public void sendPing()\n    {\n        try\n        {\n            DatagramChannel sendChannel = DatagramChannel.open();\n            // blocking but will still just throw it at OS since it is\n            // UDP (will not block, just fail)\n            // one time try, ignore 0 bytes sent\n            sendChannel.send( buf, host );\n            sendChannel.close();\n        }\n        catch ( Exception e )\n        {\n            e.printStackTrace();\n            // ok we tried\n        }\n    }","commit_id":"63cdae1320a7b2fafb64c0696fb20ed19ddd0619","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Nullable\n  public String getQualifiedName(PsiElement element) {\n    element = getMember(element);\n    if (element instanceof PsiClass) {\n      return ((PsiClass)element).getQualifiedName();\n    }\n    else if (element instanceof PsiMember) {\n      final PsiMember member = (PsiMember)element;\n      return member.getContainingClass().getQualifiedName() + \"#\" + member.getName();\n    }\n    return null;\n  }","id":105567,"modified_method":"@Nullable\n  public String getQualifiedName(PsiElement element) {\n    element = getMember(element);\n    if (element instanceof PsiClass) {\n      return ((PsiClass)element).getQualifiedName();\n    }\n    else if (element instanceof PsiMember) {\n      final PsiMember member = (PsiMember)element;\n      PsiClass containingClass = member.getContainingClass();\n      if (containingClass instanceof PsiAnonymousClass) containingClass = ((PsiAnonymousClass)containingClass).getBaseClassType().resolve();\n      if (containingClass == null) return null;\n      String classFqn = containingClass.getQualifiedName();\n      if (classFqn == null) return member.getName();  // refer to member of anonymous class by simple name\n      return classFqn + \"#\" + member.getName();\n    }\n    return null;\n  }","commit_id":"b8343a308ad5df0a99527d5aeba828ba40f7cc42","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) {\n    if (!(element instanceof PsiMember)) return;\n    PsiMember targetElement = (PsiMember) element;\n    final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project);\n    Document document = editor.getDocument();\n\n    final PsiFile file = documentManager.getPsiFile(document);\n\n    final int offset = editor.getCaretModel().getOffset();\n    PsiElement elementAtCaret = file.findElementAt(offset);\n    if (elementAtCaret == null) return;\n\n    fqn = fqn.replace('#', '.');\n    String toInsert;\n    String suffix = \"\";\n    PsiElement elementToInsert = targetElement;\n    if (targetElement instanceof PsiMethod && PsiUtil.isInsideJavadocComment(elementAtCaret)) {\n      // use fqn#methodName(ParamType)\n      PsiMethod method = (PsiMethod)targetElement;\n      PsiClass aClass = method.getContainingClass();\n      String className = aClass == null ? \"\" : aClass.getQualifiedName();\n      toInsert = className == null ? \"\" : className;\n      if (toInsert.length() != 0) toInsert += \"#\";\n      toInsert += method.getName() + \"(\";\n      PsiParameter[] parameters = method.getParameterList().getParameters();\n      for (int i = 0; i < parameters.length; i++) {\n        PsiParameter parameter = parameters[i];\n        if (i != 0) toInsert += \", \";\n        toInsert += parameter.getType().getCanonicalText();\n      }\n      toInsert += \")\";\n    }\n    else if (targetElement == null ||\n             PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiLiteralExpression.class, PsiComment.class) != null ||\n             PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiJavaFile.class) == null) {\n      toInsert = fqn;\n    }\n    else {\n      toInsert = targetElement.getName();\n      if (targetElement instanceof PsiMethod) {\n        suffix = \"()\";\n        if (((PsiMethod)targetElement).isConstructor()) {\n          targetElement = targetElement.getContainingClass();\n        }\n      }\n      else if (targetElement instanceof PsiClass) {\n        if (isAfterNew(file, elementAtCaret)) {\n          // pasting reference to default constructor of the class after new\n          suffix = \"()\";\n        }\n        else if (toInsert != null && toInsert.length() != 0 && Character.isJavaIdentifierPart(toInsert.charAt(toInsert.length()-1)) && Character.isJavaIdentifierPart(elementAtCaret.getText().charAt(0))) {\n          //separate identifiers with space\n          suffix = \" \";\n        }\n      }\n      final PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory();\n      final PsiExpression expression;\n      try {\n        expression = factory.createExpressionFromText(toInsert + suffix, elementAtCaret);\n      }\n      catch (IncorrectOperationException e) {\n        LOG.error(e);\n        return;\n      }\n      final PsiReferenceExpression referenceExpression = expression instanceof PsiMethodCallExpression\n                                                         ? ((PsiMethodCallExpression)expression).getMethodExpression()\n                                                         : expression instanceof PsiReferenceExpression\n                                                           ? (PsiReferenceExpression)expression\n                                                           : null;\n      if (referenceExpression == null) {\n        toInsert = fqn;\n      }\n      else if (referenceExpression.advancedResolve(true).getElement() != targetElement) {\n        try {\n          referenceExpression.bindToElement(targetElement);\n        }\n        catch (IncorrectOperationException e) {\n          // failed to bind\n        }\n        if (referenceExpression.advancedResolve(true).getElement() != targetElement) {\n          toInsert = fqn;\n        }\n      }\n    }\n    if (toInsert == null) toInsert = \"\";\n\n    document.insertString(offset, toInsert+suffix);\n    documentManager.commitAllDocuments();\n    int endOffset = offset + toInsert.length() + suffix.length();\n    RangeMarker rangeMarker = document.createRangeMarker(endOffset, endOffset);\n    elementAtCaret = file.findElementAt(offset);\n\n    if (elementAtCaret != null && elementAtCaret.isValid()) {\n      try {\n        shortenReference(elementAtCaret, targetElement);\n      }\n      catch (IncorrectOperationException e) {\n        LOG.error(e);\n      }\n    }\n    CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(file);\n    try {\n      CodeStyleManager.getInstance(project).adjustLineIndent(file, offset);\n    }\n    catch (IncorrectOperationException e) {\n      LOG.error(e);\n    }\n\n    int caretOffset = rangeMarker.getEndOffset();\n    if (elementToInsert instanceof PsiMethod && ((PsiMethod)elementToInsert).getParameterList().getParametersCount() != 0 && StringUtil.endsWithChar(suffix,')')) {\n      caretOffset --;\n    }\n    editor.getCaretModel().moveToOffset(caretOffset);\n  }","id":105568,"modified_method":"public void insertQualifiedName(String fqn, final PsiElement element, final Editor editor, final Project project) {\n    if (!(element instanceof PsiMember)) return;\n    PsiMember targetElement = (PsiMember) element;\n    final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project);\n    Document document = editor.getDocument();\n\n    final PsiFile file = documentManager.getPsiFile(document);\n\n    final int offset = editor.getCaretModel().getOffset();\n    PsiElement elementAtCaret = file.findElementAt(offset);\n    if (elementAtCaret == null) return;\n\n    fqn = fqn.replace('#', '.');\n    String toInsert;\n    String suffix = \"\";\n    PsiElement elementToInsert = targetElement;\n    if (targetElement instanceof PsiMethod && PsiUtil.isInsideJavadocComment(elementAtCaret)) {\n      // use fqn#methodName(ParamType)\n      PsiMethod method = (PsiMethod)targetElement;\n      PsiClass aClass = method.getContainingClass();\n      String className = aClass == null ? \"\" : aClass.getQualifiedName();\n      toInsert = className == null ? \"\" : className;\n      if (toInsert.length() != 0) toInsert += \"#\";\n      toInsert += method.getName() + \"(\";\n      PsiParameter[] parameters = method.getParameterList().getParameters();\n      for (int i = 0; i < parameters.length; i++) {\n        PsiParameter parameter = parameters[i];\n        if (i != 0) toInsert += \", \";\n        toInsert += parameter.getType().getCanonicalText();\n      }\n      toInsert += \")\";\n    }\n    else if (PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiLiteralExpression.class, PsiComment.class) != null ||\n             PsiTreeUtil.getNonStrictParentOfType(elementAtCaret, PsiJavaFile.class) == null) {\n      toInsert = fqn;\n    }\n    else {\n      toInsert = targetElement.getName();\n      if (targetElement instanceof PsiMethod) {\n        suffix = \"()\";\n        if (((PsiMethod)targetElement).isConstructor()) {\n          targetElement = targetElement.getContainingClass();\n        }\n      }\n      else if (targetElement instanceof PsiClass) {\n        if (isAfterNew(file, elementAtCaret)) {\n          // pasting reference to default constructor of the class after new\n          suffix = \"()\";\n        }\n        else if (toInsert != null && toInsert.length() != 0 && Character.isJavaIdentifierPart(toInsert.charAt(toInsert.length()-1)) && Character.isJavaIdentifierPart(elementAtCaret.getText().charAt(0))) {\n          //separate identifiers with space\n          suffix = \" \";\n        }\n      }\n      final PsiElementFactory factory = JavaPsiFacade.getInstance(project).getElementFactory();\n      final PsiExpression expression;\n      try {\n        expression = factory.createExpressionFromText(toInsert + suffix, elementAtCaret);\n      }\n      catch (IncorrectOperationException e) {\n        LOG.error(e);\n        return;\n      }\n      final PsiReferenceExpression referenceExpression = expression instanceof PsiMethodCallExpression\n                                                         ? ((PsiMethodCallExpression)expression).getMethodExpression()\n                                                         : expression instanceof PsiReferenceExpression\n                                                           ? (PsiReferenceExpression)expression\n                                                           : null;\n      if (referenceExpression == null) {\n        toInsert = fqn;\n      }\n      else if (!isReferencedTo(referenceExpression, targetElement)) {\n        try {\n          referenceExpression.bindToElement(targetElement);\n        }\n        catch (IncorrectOperationException e) {\n          // failed to bind\n        }\n        if (!isReferencedTo(referenceExpression, targetElement)) {\n          toInsert = fqn;\n        }\n      }\n    }\n    if (toInsert == null) toInsert = \"\";\n\n    document.insertString(offset, toInsert+suffix);\n    documentManager.commitAllDocuments();\n    int endOffset = offset + toInsert.length() + suffix.length();\n    RangeMarker rangeMarker = document.createRangeMarker(endOffset, endOffset);\n    elementAtCaret = file.findElementAt(offset);\n\n    if (elementAtCaret != null && elementAtCaret.isValid()) {\n      try {\n        shortenReference(elementAtCaret, targetElement);\n      }\n      catch (IncorrectOperationException e) {\n        LOG.error(e);\n      }\n    }\n    CodeInsightUtilBase.forcePsiPostprocessAndRestoreElement(file);\n    try {\n      CodeStyleManager.getInstance(project).adjustLineIndent(file, offset);\n    }\n    catch (IncorrectOperationException e) {\n      LOG.error(e);\n    }\n\n    int caretOffset = rangeMarker.getEndOffset();\n    if (elementToInsert instanceof PsiMethod && ((PsiMethod)elementToInsert).getParameterList().getParametersCount() != 0 && StringUtil.endsWithChar(suffix,')')) {\n      caretOffset --;\n    }\n    editor.getCaretModel().moveToOffset(caretOffset);\n  }","commit_id":"b8343a308ad5df0a99527d5aeba828ba40f7cc42","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean conditionalExpressionsAreEquivalent(\n    @NotNull PsiConditionalExpression condExp1,\n    @NotNull PsiConditionalExpression condExp2) {\n    final PsiExpression condition1 = condExp1.getCondition();\n    final PsiExpression condition2 = condExp2.getCondition();\n    final PsiExpression thenExpression1 = condExp1.getThenExpression();\n    final PsiExpression thenExpression2 = condExp2.getThenExpression();\n    final PsiExpression elseExpression1 = condExp1.getElseExpression();\n    final PsiExpression elseExpression2 = condExp2.getElseExpression();\n    return expressionsAreEquivalent(condition1, condition2)\n           && expressionsAreEquivalent(thenExpression1, thenExpression2)\n           && expressionsAreEquivalent(elseExpression1, elseExpression2);\n  }","id":105569,"modified_method":"private static boolean conditionalExpressionsAreEquivalent(\n    @NotNull PsiConditionalExpression conditionalExpression1,\n    @NotNull PsiConditionalExpression conditionalExpression2) {\n    final PsiExpression condition1 = conditionalExpression1.getCondition();\n    final PsiExpression condition2 = conditionalExpression2.getCondition();\n    final PsiExpression thenExpression1 =\n      conditionalExpression1.getThenExpression();\n    final PsiExpression thenExpression2 =\n      conditionalExpression2.getThenExpression();\n    final PsiExpression elseExpression1 =\n      conditionalExpression1.getElseExpression();\n    final PsiExpression elseExpression2 =\n      conditionalExpression2.getElseExpression();\n    return expressionsAreEquivalent(condition1, condition2)\n           && expressionsAreEquivalent(thenExpression1, thenExpression2)\n           && expressionsAreEquivalent(elseExpression1, elseExpression2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean assignmentExpressionsAreEquivalent(\n    @NotNull PsiAssignmentExpression assignExp1,\n    @NotNull PsiAssignmentExpression assignExp2) {\n    final IElementType tokenType1 = assignExp1.getOperationTokenType();\n    if (!tokenType1.equals(assignExp2.getOperationTokenType())) {\n      return false;\n    }\n    final PsiExpression lhs1 = assignExp1.getLExpression();\n    final PsiExpression lhs2 = assignExp2.getLExpression();\n    final PsiExpression rhs1 = assignExp1.getRExpression();\n    final PsiExpression rhs2 = assignExp2.getRExpression();\n    return expressionsAreEquivalent(lhs1, lhs2)\n           && expressionsAreEquivalent(rhs1, rhs2);\n  }","id":105570,"modified_method":"private static boolean assignmentExpressionsAreEquivalent(\n    @NotNull PsiAssignmentExpression assignmentExpression1,\n    @NotNull PsiAssignmentExpression assignmentExpression2) {\n    final IElementType tokenType1 = assignmentExpression1.getOperationTokenType();\n    if (!tokenType1.equals(assignmentExpression2.getOperationTokenType())) {\n      return false;\n    }\n    final PsiExpression lhs1 = assignmentExpression1.getLExpression();\n    final PsiExpression lhs2 = assignmentExpression2.getLExpression();\n    final PsiExpression rhs1 = assignmentExpression1.getRExpression();\n    final PsiExpression rhs2 = assignmentExpression2.getRExpression();\n    return expressionsAreEquivalent(lhs1, lhs2)\n           && expressionsAreEquivalent(rhs1, rhs2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean methodCallExpressionsAreEquivalent(\n    @NotNull PsiMethodCallExpression methodExp1,\n    @NotNull PsiMethodCallExpression methodExp2) {\n    final PsiReferenceExpression methodExpression1 =\n      methodExp1.getMethodExpression();\n    final PsiReferenceExpression methodExpression2 =\n      methodExp2.getMethodExpression();\n    if (!expressionsAreEquivalent(methodExpression1, methodExpression2)) {\n      return false;\n    }\n    final PsiExpressionList argumentList1 = methodExp1.getArgumentList();\n    final PsiExpression[] args1 = argumentList1.getExpressions();\n    final PsiExpressionList argumentList2 = methodExp2.getArgumentList();\n    final PsiExpression[] args2 = argumentList2.getExpressions();\n    return expressionListsAreEquivalent(args1, args2);\n  }","id":105571,"modified_method":"private static boolean methodCallExpressionsAreEquivalent(\n    @NotNull PsiMethodCallExpression methodCallExpression1,\n    @NotNull PsiMethodCallExpression methodCallExpression2) {\n    final PsiReferenceExpression methodExpression1 =\n      methodCallExpression1.getMethodExpression();\n    final PsiReferenceExpression methodExpression2 =\n      methodCallExpression2.getMethodExpression();\n    if (!expressionsAreEquivalent(methodExpression1, methodExpression2)) {\n      return false;\n    }\n    final PsiExpressionList argumentList1 =\n      methodCallExpression1.getArgumentList();\n    final PsiExpression[] args1 = argumentList1.getExpressions();\n    final PsiExpressionList argumentList2 =\n      methodCallExpression2.getArgumentList();\n    final PsiExpression[] args2 = argumentList2.getExpressions();\n    return expressionListsAreEquivalent(args1, args2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean postfixExpressionsAreEquivalent(\n    @NotNull PsiPostfixExpression postfixExp1,\n    @NotNull PsiPostfixExpression postfixExp2) {\n    final IElementType tokenType1 = postfixExp1.getOperationTokenType();\n    if (!tokenType1.equals(postfixExp2.getOperationTokenType())) {\n      return false;\n    }\n    final PsiExpression operand1 = postfixExp1.getOperand();\n    final PsiExpression operand2 = postfixExp2.getOperand();\n    return expressionsAreEquivalent(operand1, operand2);\n  }","id":105572,"modified_method":"private static boolean postfixExpressionsAreEquivalent(\n    @NotNull PsiPostfixExpression postfixExpression1,\n    @NotNull PsiPostfixExpression postfixExpression2) {\n    final IElementType tokenType1 = postfixExpression1.getOperationTokenType();\n    if (!tokenType1.equals(postfixExpression2.getOperationTokenType())) {\n      return false;\n    }\n    final PsiExpression operand1 = postfixExpression1.getOperand();\n    final PsiExpression operand2 = postfixExpression2.getOperand();\n    return expressionsAreEquivalent(operand1, operand2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean forEachStatementsAreEquivalent(\n    @NotNull PsiForeachStatement statement1,\n    @NotNull PsiForeachStatement statement2) {\n    final PsiExpression value1 = statement1.getIteratedValue();\n    final PsiExpression value2 = statement2.getIteratedValue();\n    if (!expressionsAreEquivalent(value1, value2)) {\n      return false;\n    }\n    final PsiParameter parameter1 = statement1.getIterationParameter();\n    final PsiParameter parameter2 = statement1.getIterationParameter();\n    final String name1 = parameter1.getName();\n    final String name2 = parameter2.getName();\n    if (!name1.equals(name2)) {\n      return false;\n    }\n    final PsiType type1 = parameter1.getType();\n    if (!type1.equals(parameter2.getType())) {\n      return false;\n    }\n    final PsiStatement body1 = statement1.getBody();\n    final PsiStatement body2 = statement2.getBody();\n    return statementsAreEquivalent(body1, body2);\n  }","id":105573,"modified_method":"private static boolean forEachStatementsAreEquivalent(\n    @NotNull PsiForeachStatement statement1,\n    @NotNull PsiForeachStatement statement2) {\n    final PsiExpression value1 = statement1.getIteratedValue();\n    final PsiExpression value2 = statement2.getIteratedValue();\n    if (!expressionsAreEquivalent(value1, value2)) {\n      return false;\n    }\n    final PsiParameter parameter1 = statement1.getIterationParameter();\n    final PsiParameter parameter2 = statement1.getIterationParameter();\n    final String name1 = parameter1.getName();\n    if (name1 == null) {\n      return parameter2.getName() == null;\n    }\n    if (!name1.equals(parameter2.getName())) {\n      return false;\n    }\n    final PsiType type1 = parameter1.getType();\n    if (!type1.equals(parameter2.getType())) {\n      return false;\n    }\n    final PsiStatement body1 = statement1.getBody();\n    final PsiStatement body2 = statement2.getBody();\n    return statementsAreEquivalent(body1, body2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean typecastExpressionsAreEquivalent(\n    @NotNull PsiTypeCastExpression typecastExp1,\n    @NotNull PsiTypeCastExpression typecastExp2) {\n    final PsiTypeElement typeElement1 = typecastExp1.getCastType();\n    final PsiTypeElement typeElement2 = typecastExp2.getCastType();\n    if (typeElement1 == null && typeElement2 == null) {\n      return true;\n    }\n    if (typeElement1 == null || typeElement2 == null) {\n      return false;\n    }\n    final PsiType type1 = typeElement1.getType();\n    final PsiType type2 = typeElement2.getType();\n    if (!typesAreEquivalent(type1, type2)) {\n      return false;\n    }\n    final PsiExpression operand1 = typecastExp1.getOperand();\n    final PsiExpression operand2 = typecastExp2.getOperand();\n    return expressionsAreEquivalent(operand1, operand2);\n  }","id":105574,"modified_method":"private static boolean typeCastExpressionsAreEquivalent(\n    @NotNull PsiTypeCastExpression typeCastExpression1,\n    @NotNull PsiTypeCastExpression typeCastExpression2) {\n    final PsiTypeElement typeElement1 = typeCastExpression1.getCastType();\n    final PsiTypeElement typeElement2 = typeCastExpression2.getCastType();\n    if (!typeElementsAreEquivalent(typeElement1, typeElement2)) {\n      return false;\n    }\n    final PsiExpression operand1 = typeCastExpression1.getOperand();\n    final PsiExpression operand2 = typeCastExpression2.getOperand();\n    return expressionsAreEquivalent(operand1, operand2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean statementsAreEquivalent(\n    @Nullable PsiStatement statement1,\n    @Nullable PsiStatement statement2) {\n    if (statement1 == null && statement2 == null) {\n      return true;\n    }\n    if (statement1 == null || statement2 == null) {\n      return false;\n    }\n    if (statement1.getClass() != statement2.getClass()) {\n      return false;\n    }\n    if (statement1 instanceof PsiAssertStatement) {\n      final PsiAssertStatement assertStatement1 =\n        (PsiAssertStatement)statement1;\n      final PsiAssertStatement assertStatement2 =\n        (PsiAssertStatement)statement2;\n      return assertStatementsAreEquivalent(assertStatement1,\n                                           assertStatement2);\n    }\n    if (statement1 instanceof PsiBlockStatement) {\n      final PsiBlockStatement blockStatement1 =\n        (PsiBlockStatement)statement1;\n      final PsiBlockStatement blockStatement2 =\n        (PsiBlockStatement)statement2;\n      return blockStatementsAreEquivalent(blockStatement1,\n                                          blockStatement2);\n    }\n    if (statement1 instanceof PsiBreakStatement) {\n      final PsiBreakStatement breakStatement1 =\n        (PsiBreakStatement)statement1;\n      final PsiBreakStatement breakStatement2 =\n        (PsiBreakStatement)statement2;\n      return breakStatementsAreEquivalent(breakStatement1,\n                                          breakStatement2);\n    }\n    if (statement1 instanceof PsiContinueStatement) {\n      final PsiContinueStatement continueStatement1 =\n        (PsiContinueStatement)statement1;\n      final PsiContinueStatement continueStatement2 =\n        (PsiContinueStatement)statement2;\n      return continueStatementsAreEquivalent(continueStatement1,\n                                             continueStatement2);\n    }\n    if (statement1 instanceof PsiDeclarationStatement) {\n      final PsiDeclarationStatement declarationStatement1 =\n        (PsiDeclarationStatement)statement1;\n      final PsiDeclarationStatement declarationStatement2 =\n        (PsiDeclarationStatement)statement2;\n      return declarationStatementsAreEquivalent(declarationStatement1,\n                                                declarationStatement2);\n    }\n    if (statement1 instanceof PsiDoWhileStatement) {\n      final PsiDoWhileStatement doWhileStatement1 =\n        (PsiDoWhileStatement)statement1;\n      final PsiDoWhileStatement doWhileStatement2 =\n        (PsiDoWhileStatement)statement2;\n      return doWhileStatementsAreEquivalent(\n        doWhileStatement1, doWhileStatement2);\n    }\n    if (statement1 instanceof PsiEmptyStatement) {\n      return true;\n    }\n    if (statement1 instanceof PsiExpressionListStatement) {\n      final PsiExpressionListStatement expressionListStatement1 =\n        (PsiExpressionListStatement)statement1;\n      final PsiExpressionListStatement expressionListStatement2 =\n        (PsiExpressionListStatement)statement2;\n      return expressionListStatementsAreEquivalent(\n        expressionListStatement1,\n        expressionListStatement2);\n    }\n    if (statement1 instanceof PsiExpressionStatement) {\n      final PsiExpressionStatement expressionStatement1 =\n        (PsiExpressionStatement)statement1;\n      final PsiExpressionStatement expressionStatement2 =\n        (PsiExpressionStatement)statement2;\n      return expressionStatementsAreEquivalent(\n        expressionStatement1,\n        expressionStatement2);\n    }\n    if (statement1 instanceof PsiForStatement) {\n      final PsiForStatement forStatement1 =\n        (PsiForStatement)statement1;\n      final PsiForStatement forStatement2 =\n        (PsiForStatement)statement2;\n      return forStatementsAreEquivalent(forStatement1, forStatement2);\n    }\n    if (statement1 instanceof PsiForeachStatement) {\n      final PsiForeachStatement forEachStatement1 =\n        (PsiForeachStatement)statement1;\n      final PsiForeachStatement forEachStatement2 =\n        (PsiForeachStatement)statement2;\n      return forEachStatementsAreEquivalent(forEachStatement1,\n                                            forEachStatement2);\n    }\n    if (statement1 instanceof PsiIfStatement) {\n      return ifStatementsAreEquivalent(\n        (PsiIfStatement)statement1,\n        (PsiIfStatement)statement2);\n    }\n    if (statement1 instanceof PsiLabeledStatement) {\n      final PsiLabeledStatement labeledStatement1 =\n        (PsiLabeledStatement)statement1;\n      final PsiLabeledStatement labeledStatement2 =\n        (PsiLabeledStatement)statement2;\n      return labeledStatementsAreEquivalent(labeledStatement1,\n                                            labeledStatement2);\n    }\n    if (statement1 instanceof PsiReturnStatement) {\n      final PsiReturnStatement returnStatement1 =\n        (PsiReturnStatement)statement1;\n      final PsiReturnStatement returnStatement2 =\n        (PsiReturnStatement)statement2;\n      return returnStatementsAreEquivalent(returnStatement1,\n                                           returnStatement2);\n    }\n    if (statement1 instanceof PsiSwitchStatement) {\n      final PsiSwitchStatement switchStatement1 =\n        (PsiSwitchStatement)statement1;\n      final PsiSwitchStatement switchStatement2 =\n        (PsiSwitchStatement)statement2;\n      return switchStatementsAreEquivalent(switchStatement1,\n                                           switchStatement2);\n    }\n    if (statement1 instanceof PsiSwitchLabelStatement) {\n      final PsiSwitchLabelStatement switchLabelStatement1 =\n        (PsiSwitchLabelStatement)statement1;\n      final PsiSwitchLabelStatement switchLabelStatement2 =\n        (PsiSwitchLabelStatement)statement2;\n      return switchLabelStatementsAreEquivalent(switchLabelStatement1,\n                                                switchLabelStatement2);\n    }\n    if (statement1 instanceof PsiSynchronizedStatement) {\n      final PsiSynchronizedStatement synchronizedStatement1 =\n        (PsiSynchronizedStatement)statement1;\n      final PsiSynchronizedStatement synchronizedStatement2 =\n        (PsiSynchronizedStatement)statement2;\n      return synchronizedStatementsAreEquivalent(\n        synchronizedStatement1, synchronizedStatement2);\n    }\n    if (statement1 instanceof PsiThrowStatement) {\n      final PsiThrowStatement throwStatement1 =\n        (PsiThrowStatement)statement1;\n      final PsiThrowStatement throwStatement2 =\n        (PsiThrowStatement)statement2;\n      return throwStatementsAreEquivalent(throwStatement1,\n                                          throwStatement2);\n    }\n    if (statement1 instanceof PsiTryStatement) {\n      final PsiTryStatement tryStatement1 =\n        (PsiTryStatement)statement1;\n      final PsiTryStatement tryStatement2 =\n        (PsiTryStatement)statement2;\n      return tryStatementsAreEquivalent(tryStatement1,\n                                        tryStatement2);\n    }\n    if (statement1 instanceof PsiWhileStatement) {\n      final PsiWhileStatement whileStatement1 =\n        (PsiWhileStatement)statement1;\n      final PsiWhileStatement whileStatement2 =\n        (PsiWhileStatement)statement2;\n      return whileStatementsAreEquivalent(whileStatement1,\n                                          whileStatement2);\n    }\n    final String text1 = statement1.getText();\n    final String text2 = statement2.getText();\n    return text1.equals(text2);\n  }","id":105575,"modified_method":"public static boolean statementsAreEquivalent(@Nullable PsiStatement statement1, @Nullable PsiStatement statement2) {\n    if (statement1 == null) {\n      return statement2 == null;\n    } else if (statement2 == null) {\n      return false;\n    }\n    if (statement1.getClass() != statement2.getClass()) {\n      return false;\n    }\n    if (statement1 instanceof PsiAssertStatement) {\n      return assertStatementsAreEquivalent((PsiAssertStatement)statement1, (PsiAssertStatement)statement2);\n    }\n    if (statement1 instanceof PsiBlockStatement) {\n      return blockStatementsAreEquivalent((PsiBlockStatement)statement1, (PsiBlockStatement)statement2);\n    }\n    if (statement1 instanceof PsiBreakStatement) {\n      return breakStatementsAreEquivalent((PsiBreakStatement)statement1, (PsiBreakStatement)statement2);\n    }\n    if (statement1 instanceof PsiContinueStatement) {\n      return continueStatementsAreEquivalent((PsiContinueStatement)statement1, (PsiContinueStatement)statement2);\n    }\n    if (statement1 instanceof PsiDeclarationStatement) {\n      return declarationStatementsAreEquivalent((PsiDeclarationStatement)statement1, (PsiDeclarationStatement)statement2);\n    }\n    if (statement1 instanceof PsiDoWhileStatement) {\n      return doWhileStatementsAreEquivalent((PsiDoWhileStatement)statement1, (PsiDoWhileStatement)statement2);\n    }\n    if (statement1 instanceof PsiEmptyStatement) {\n      return true;\n    }\n    if (statement1 instanceof PsiExpressionListStatement) {\n      return expressionListStatementsAreEquivalent((PsiExpressionListStatement)statement1, (PsiExpressionListStatement)statement2);\n    }\n    if (statement1 instanceof PsiExpressionStatement) {\n      return expressionStatementsAreEquivalent((PsiExpressionStatement)statement1, (PsiExpressionStatement)statement2);\n    }\n    if (statement1 instanceof PsiForStatement) {\n      return forStatementsAreEquivalent((PsiForStatement)statement1, (PsiForStatement)statement2);\n    }\n    if (statement1 instanceof PsiForeachStatement) {\n      return forEachStatementsAreEquivalent((PsiForeachStatement)statement1, (PsiForeachStatement)statement2);\n    }\n    if (statement1 instanceof PsiIfStatement) {\n      return ifStatementsAreEquivalent((PsiIfStatement)statement1, (PsiIfStatement)statement2);\n    }\n    if (statement1 instanceof PsiLabeledStatement) {\n      return labeledStatementsAreEquivalent((PsiLabeledStatement)statement1, (PsiLabeledStatement)statement2);\n    }\n    if (statement1 instanceof PsiReturnStatement) {\n      return returnStatementsAreEquivalent((PsiReturnStatement)statement1, (PsiReturnStatement)statement2);\n    }\n    if (statement1 instanceof PsiSwitchStatement) {\n      return switchStatementsAreEquivalent((PsiSwitchStatement)statement1, (PsiSwitchStatement)statement2);\n    }\n    if (statement1 instanceof PsiSwitchLabelStatement) {\n      return switchLabelStatementsAreEquivalent((PsiSwitchLabelStatement)statement1, (PsiSwitchLabelStatement)statement2);\n    }\n    if (statement1 instanceof PsiSynchronizedStatement) {\n      return synchronizedStatementsAreEquivalent((PsiSynchronizedStatement)statement1, (PsiSynchronizedStatement)statement2);\n    }\n    if (statement1 instanceof PsiThrowStatement) {\n      return throwStatementsAreEquivalent((PsiThrowStatement)statement1, (PsiThrowStatement)statement2);\n    }\n    if (statement1 instanceof PsiTryStatement) {\n      return tryStatementsAreEquivalent((PsiTryStatement)statement1, (PsiTryStatement)statement2);\n    }\n    if (statement1 instanceof PsiWhileStatement) {\n      return whileStatementsAreEquivalent((PsiWhileStatement)statement1, (PsiWhileStatement)statement2);\n    }\n    final String text1 = statement1.getText();\n    final String text2 = statement2.getText();\n    return text1.equals(text2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean newExpressionsAreEquivalent(\n    @NotNull PsiNewExpression newExp1,\n    @NotNull PsiNewExpression newExp2) {\n    final PsiJavaCodeReferenceElement classRef1 =\n      newExp1.getClassReference();\n    final PsiJavaCodeReferenceElement classRef2 =\n      newExp2.getClassReference();\n    if (classRef1 == null || classRef2 == null) {\n      return false;\n    }\n    final String text = classRef1.getText();\n    if (!text.equals(classRef2.getText())) {\n      return false;\n    }\n    final PsiExpression[] arrayDimensions1 = newExp1.getArrayDimensions();\n    final PsiExpression[] arrayDimensions2 = newExp2.getArrayDimensions();\n    if (!expressionListsAreEquivalent(arrayDimensions1, arrayDimensions2)) {\n      return false;\n    }\n    final PsiArrayInitializerExpression arrayInitializer1 =\n      newExp1.getArrayInitializer();\n    final PsiArrayInitializerExpression arrayInitializer2 =\n      newExp2.getArrayInitializer();\n    if (!expressionsAreEquivalent(arrayInitializer1, arrayInitializer2)) {\n      return false;\n    }\n    final PsiExpression qualifier1 = newExp1.getQualifier();\n    final PsiExpression qualifier2 = newExp2.getQualifier();\n    if (!expressionsAreEquivalent(qualifier1, qualifier2)) {\n      return false;\n    }\n    final PsiExpressionList argumentList1 = newExp1.getArgumentList();\n    final PsiExpression[] args1;\n    if (argumentList1 == null) {\n      args1 = null;\n    }\n    else {\n      args1 = argumentList1.getExpressions();\n    }\n    final PsiExpressionList argumentList2 = newExp2.getArgumentList();\n    final PsiExpression[] args2;\n    if (argumentList2 == null) {\n      args2 = null;\n    }\n    else {\n      args2 = argumentList2.getExpressions();\n    }\n    return expressionListsAreEquivalent(args1, args2);\n  }","id":105576,"modified_method":"private static boolean newExpressionsAreEquivalent(\n    @NotNull PsiNewExpression newExpression1,\n    @NotNull PsiNewExpression newExpression2) {\n    final PsiJavaCodeReferenceElement classReference1 =\n      newExpression1.getClassReference();\n    final PsiJavaCodeReferenceElement classReference2 =\n      newExpression2.getClassReference();\n    if (classReference1 == null || classReference2 == null) {\n      return false;\n    }\n    final String text = classReference1.getText();\n    if (!text.equals(classReference2.getText())) {\n      return false;\n    }\n    final PsiExpression[] arrayDimensions1 =\n      newExpression1.getArrayDimensions();\n    final PsiExpression[] arrayDimensions2 =\n      newExpression2.getArrayDimensions();\n    if (!expressionListsAreEquivalent(arrayDimensions1, arrayDimensions2)) {\n      return false;\n    }\n    final PsiArrayInitializerExpression arrayInitializer1 =\n      newExpression1.getArrayInitializer();\n    final PsiArrayInitializerExpression arrayInitializer2 =\n      newExpression2.getArrayInitializer();\n    if (!expressionsAreEquivalent(arrayInitializer1, arrayInitializer2)) {\n      return false;\n    }\n    final PsiExpression qualifier1 = newExpression1.getQualifier();\n    final PsiExpression qualifier2 = newExpression2.getQualifier();\n    if (!expressionsAreEquivalent(qualifier1, qualifier2)) {\n      return false;\n    }\n    final PsiExpressionList argumentList1 = newExpression1.getArgumentList();\n    final PsiExpression[] args1;\n    if (argumentList1 == null) {\n      args1 = null;\n    }\n    else {\n      args1 = argumentList1.getExpressions();\n    }\n    final PsiExpressionList argumentList2 = newExpression2.getArgumentList();\n    final PsiExpression[] args2;\n    if (argumentList2 == null) {\n      args2 = null;\n    }\n    else {\n      args2 = argumentList2.getExpressions();\n    }\n    return expressionListsAreEquivalent(args1, args2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean parametersAreEquivalent(\n    @NotNull PsiParameter parameter1,\n    @NotNull PsiParameter parameter2) {\n    final PsiType type1 = parameter1.getType();\n    final PsiType type2 = parameter2.getType();\n    if (!typesAreEquivalent(type1, type2)) {\n      return false;\n    }\n    final String name1 = parameter1.getName();\n    final String name2 = parameter2.getName();\n    return name1.equals(name2);\n  }","id":105577,"modified_method":"private static boolean parametersAreEquivalent(\n    @NotNull PsiParameter parameter1,\n    @NotNull PsiParameter parameter2) {\n    final PsiType type1 = parameter1.getType();\n    final PsiType type2 = parameter2.getType();\n    if (!typesAreEquivalent(type1, type2)) {\n      return false;\n    }\n    final String name1 = parameter1.getName();\n    final String name2 = parameter2.getName();\n    if (name1 == null) {\n      return name2 == null;\n    }\n    return name1.equals(name2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean localVariableAreEquivalent(\n    @NotNull PsiLocalVariable var1, @NotNull PsiLocalVariable var2) {\n    final PsiType type1 = var1.getType();\n    final PsiType type2 = var2.getType();\n    if (!typesAreEquivalent(type1, type2)) {\n      return false;\n    }\n    final String name1 = var1.getName();\n    final String name2 = var2.getName();\n    if (!name1.equals(name2)) {\n      return false;\n    }\n    final PsiExpression initializer1 = var1.getInitializer();\n    final PsiExpression initializer2 = var2.getInitializer();\n    return expressionsAreEquivalent(initializer1, initializer2);\n  }","id":105578,"modified_method":"private static boolean localVariablesAreEquivalent(\n    @NotNull PsiLocalVariable localVariable1,\n    @NotNull PsiLocalVariable localVariable2) {\n    final PsiType type1 = localVariable1.getType();\n    final PsiType type2 = localVariable2.getType();\n    if (!typesAreEquivalent(type1, type2)) {\n      return false;\n    }\n    final String name1 = localVariable1.getName();\n    final String name2 = localVariable2.getName();\n    if (name1 == null) {\n      return name2 == null;\n    }\n    if (!name1.equals(name2)) {\n      return false;\n    }\n    final PsiExpression initializer1 = localVariable1.getInitializer();\n    final PsiExpression initializer2 = localVariable2.getInitializer();\n    return expressionsAreEquivalent(initializer1, initializer2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean declarationStatementsAreEquivalent(\n    @NotNull PsiDeclarationStatement statement1,\n    @NotNull PsiDeclarationStatement statement2) {\n    final PsiElement[] elements1 = statement1.getDeclaredElements();\n    final List<PsiLocalVariable> vars1 =\n      new ArrayList<PsiLocalVariable>(elements1.length);\n    for (PsiElement anElement : elements1) {\n      if (anElement instanceof PsiLocalVariable) {\n        vars1.add((PsiLocalVariable)anElement);\n      }\n    }\n    final PsiElement[] elements2 = statement2.getDeclaredElements();\n    final List<PsiLocalVariable> vars2 =\n      new ArrayList<PsiLocalVariable>(elements2.length);\n    for (PsiElement anElement : elements2) {\n      if (anElement instanceof PsiLocalVariable) {\n        vars2.add((PsiLocalVariable)anElement);\n      }\n    }\n    final int size = vars1.size();\n    if (size != vars2.size()) {\n      return false;\n    }\n    for (int i = 0; i < size; i++) {\n      final PsiLocalVariable var1 = vars1.get(i);\n      final PsiLocalVariable var2 = vars2.get(i);\n      if (!localVariableAreEquivalent(var1, var2)) {\n        return false;\n      }\n    }\n    return true;\n  }","id":105579,"modified_method":"private static boolean declarationStatementsAreEquivalent(\n    @NotNull PsiDeclarationStatement statement1,\n    @NotNull PsiDeclarationStatement statement2) {\n    final PsiElement[] elements1 = statement1.getDeclaredElements();\n    final List<PsiLocalVariable> vars1 =\n      new ArrayList<PsiLocalVariable>(elements1.length);\n    for (PsiElement anElement : elements1) {\n      if (anElement instanceof PsiLocalVariable) {\n        vars1.add((PsiLocalVariable)anElement);\n      }\n    }\n    final PsiElement[] elements2 = statement2.getDeclaredElements();\n    final List<PsiLocalVariable> vars2 =\n      new ArrayList<PsiLocalVariable>(elements2.length);\n    for (PsiElement anElement : elements2) {\n      if (anElement instanceof PsiLocalVariable) {\n        vars2.add((PsiLocalVariable)anElement);\n      }\n    }\n    final int size = vars1.size();\n    if (size != vars2.size()) {\n      return false;\n    }\n    for (int i = 0; i < size; i++) {\n      final PsiLocalVariable var1 = vars1.get(i);\n      final PsiLocalVariable var2 = vars2.get(i);\n      if (!localVariablesAreEquivalent(var1, var2)) {\n        return false;\n      }\n    }\n    return true;\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean arrayAccessExpressionsAreEquivalent(\n    @NotNull PsiArrayAccessExpression arrAccessExp2,\n    @NotNull PsiArrayAccessExpression arrAccessExp1) {\n    final PsiExpression arrayExpression2 =\n      arrAccessExp2.getArrayExpression();\n    final PsiExpression arrayExpression1 =\n      arrAccessExp1.getArrayExpression();\n    final PsiExpression indexExpression2 =\n      arrAccessExp2.getIndexExpression();\n    final PsiExpression indexExpression1 =\n      arrAccessExp1.getIndexExpression();\n    return expressionsAreEquivalent(arrayExpression2, arrayExpression1)\n           && expressionsAreEquivalent(indexExpression2, indexExpression1);\n  }","id":105580,"modified_method":"private static boolean arrayAccessExpressionsAreEquivalent(\n    @NotNull PsiArrayAccessExpression arrayAccessExpression1,\n    @NotNull PsiArrayAccessExpression arrayAccessExpression2) {\n    final PsiExpression arrayExpression2 =\n      arrayAccessExpression1.getArrayExpression();\n    final PsiExpression arrayExpression1 =\n      arrayAccessExpression2.getArrayExpression();\n    final PsiExpression indexExpression2 =\n      arrayAccessExpression1.getIndexExpression();\n    final PsiExpression indexExpression1 =\n      arrayAccessExpression2.getIndexExpression();\n    return expressionsAreEquivalent(arrayExpression2, arrayExpression1)\n           && expressionsAreEquivalent(indexExpression2, indexExpression1);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean instanceofExpressionsAreEquivalent(\n    PsiInstanceOfExpression instanceOfExpression1,\n    PsiInstanceOfExpression instanceOfExpression2) {\n    final PsiExpression operand1 = instanceOfExpression1.getOperand();\n    final PsiExpression operand2 = instanceOfExpression2.getOperand();\n    if (!expressionsAreEquivalent(operand1, operand2)) {\n      return false;\n    }\n    final PsiTypeElement typeElement1 =\n      instanceOfExpression1.getCheckType();\n    final PsiTypeElement typeElement2 =\n      instanceOfExpression2.getCheckType();\n    if (typeElement1 == null) {\n      return typeElement2 == null;\n    }\n    else if (typeElement2 == null) {\n      return false;\n    }\n    final PsiType type1 = typeElement1.getType();\n    final PsiType type2 = typeElement2.getType();\n    return typesAreEquivalent(type1, type2);\n  }","id":105581,"modified_method":"private static boolean instanceofExpressionsAreEquivalent(\n    PsiInstanceOfExpression instanceOfExpression1,\n    PsiInstanceOfExpression instanceOfExpression2) {\n    final PsiExpression operand1 = instanceOfExpression1.getOperand();\n    final PsiExpression operand2 = instanceOfExpression2.getOperand();\n    if (!expressionsAreEquivalent(operand1, operand2)) {\n      return false;\n    }\n    final PsiTypeElement typeElement1 = instanceOfExpression1.getCheckType();\n    final PsiTypeElement typeElement2 = instanceOfExpression2.getCheckType();\n    return typeElementsAreEquivalent(typeElement1, typeElement2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean binaryExpressionsAreEquivalent(\n    @NotNull PsiBinaryExpression binaryExp1,\n    @NotNull PsiBinaryExpression binaryExp2) {\n    final IElementType tokenType1 = binaryExp1.getOperationTokenType();\n    if (!tokenType1.equals(binaryExp2.getOperationTokenType())) {\n      return false;\n    }\n    final PsiExpression lhs1 = binaryExp1.getLOperand();\n    final PsiExpression lhs2 = binaryExp2.getLOperand();\n    final PsiExpression rhs1 = binaryExp1.getROperand();\n    final PsiExpression rhs2 = binaryExp2.getROperand();\n    return expressionsAreEquivalent(lhs1, lhs2)\n           && expressionsAreEquivalent(rhs1, rhs2);\n  }","id":105582,"modified_method":"private static boolean literalExpressionsAreEquivalent(PsiLiteralExpression expression1, PsiLiteralExpression expression2) {\n    final Object value1 = expression1.getValue();\n    final Object value2 = expression2.getValue();\n    if (value1 == null) {\n      return value2 == null;\n    } else if (value2 == null) {\n      return false;\n    }\n    return value1.equals(value2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean tryStatementsAreEquivalent(\n    @NotNull PsiTryStatement statement1,\n    @NotNull PsiTryStatement statement2) {\n    final PsiCodeBlock tryBlock1 = statement1.getTryBlock();\n    final PsiCodeBlock tryBlock2 = statement2.getTryBlock();\n    if (!codeBlocksAreEquivalent(tryBlock1, tryBlock2)) {\n      return false;\n    }\n    final PsiCodeBlock finallyBlock1 = statement1.getFinallyBlock();\n    final PsiCodeBlock finallyBlock2 = statement2.getFinallyBlock();\n    if (!codeBlocksAreEquivalent(finallyBlock1, finallyBlock2)) {\n      return false;\n    }\n    final PsiCodeBlock[] catchBlocks1 = statement1.getCatchBlocks();\n    final PsiCodeBlock[] catchBlocks2 = statement2.getCatchBlocks();\n    if (catchBlocks1.length != catchBlocks2.length) {\n      return false;\n    }\n    for (int i = 0; i < catchBlocks2.length; i++) {\n      if (!codeBlocksAreEquivalent(catchBlocks1[i], catchBlocks2[i])) {\n        return false;\n      }\n    }\n    final PsiParameter[] catchParameters1 =\n      statement1.getCatchBlockParameters();\n    final PsiParameter[] catchParameters2 =\n      statement2.getCatchBlockParameters();\n    if (catchParameters1.length != catchParameters2.length) {\n      return false;\n    }\n    for (int i = 0; i < catchParameters2.length; i++) {\n      if (!parametersAreEquivalent(catchParameters2[i],\n                                   catchParameters1[i])) {\n        return false;\n      }\n    }\n    return true;\n  }","id":105583,"modified_method":"private static boolean tryStatementsAreEquivalent(@NotNull PsiTryStatement statement1, @NotNull PsiTryStatement statement2) {\n    final PsiCodeBlock tryBlock1 = statement1.getTryBlock();\n    final PsiCodeBlock tryBlock2 = statement2.getTryBlock();\n    if (!codeBlocksAreEquivalent(tryBlock1, tryBlock2)) {\n      return false;\n    }\n    final PsiCodeBlock finallyBlock1 = statement1.getFinallyBlock();\n    final PsiCodeBlock finallyBlock2 = statement2.getFinallyBlock();\n    if (!codeBlocksAreEquivalent(finallyBlock1, finallyBlock2)) {\n      return false;\n    }\n    final PsiCodeBlock[] catchBlocks1 = statement1.getCatchBlocks();\n    final PsiCodeBlock[] catchBlocks2 = statement2.getCatchBlocks();\n    if (catchBlocks1.length != catchBlocks2.length) {\n      return false;\n    }\n    for (int i = 0; i < catchBlocks2.length; i++) {\n      if (!codeBlocksAreEquivalent(catchBlocks1[i], catchBlocks2[i])) {\n        return false;\n      }\n    }\n    final PsiResourceList resourceList1 = statement1.getResourceList();\n    final PsiResourceList resourceList2 = statement2.getResourceList();\n    if (resourceList1 != null) {\n      if (resourceList2 == null) {\n        return false;\n      }\n      if (resourceList1.getResourceVariablesCount() != resourceList2.getResourceVariablesCount()) {\n        return false;\n      }\n      final List<PsiResourceVariable> resourceVariables1 = resourceList1.getResourceVariables();\n      final List<PsiResourceVariable> resourceVariables2 = resourceList2.getResourceVariables();\n      for (int i1 = 0, size = resourceVariables1.size(); i1 < size; i1++) {\n        final PsiResourceVariable variable1 = resourceVariables1.get(i1);\n        final PsiResourceVariable variable2 = resourceVariables2.get(i1);\n        if (!localVariablesAreEquivalent(variable1, variable2)) {\n          return false;\n        }\n      }\n    } else if (resourceList2 != null) {\n      return false;\n    }\n    final PsiParameter[] catchParameters1 = statement1.getCatchBlockParameters();\n    final PsiParameter[] catchParameters2 = statement2.getCatchBlockParameters();\n    if (catchParameters1.length != catchParameters2.length) {\n      return false;\n    }\n    for (int i = 0; i < catchParameters2.length; i++) {\n      if (!parametersAreEquivalent(catchParameters2[i], catchParameters1[i])) {\n        return false;\n      }\n    }\n    return true;\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean prefixExpressionsAreEquivalent(\n    @NotNull PsiPrefixExpression prefixExp1,\n    @NotNull PsiPrefixExpression prefixExp2) {\n    final IElementType tokenType1 = prefixExp1.getOperationTokenType();\n    if (!tokenType1.equals(prefixExp2.getOperationTokenType())) {\n      return false;\n    }\n    final PsiExpression operand1 = prefixExp1.getOperand();\n    final PsiExpression operand2 = prefixExp2.getOperand();\n    return expressionsAreEquivalent(operand1, operand2);\n  }","id":105584,"modified_method":"private static boolean prefixExpressionsAreEquivalent(\n    @NotNull PsiPrefixExpression prefixExpression1,\n    @NotNull PsiPrefixExpression prefixExpression2) {\n    final IElementType tokenType1 = prefixExpression1.getOperationTokenType();\n    if (!tokenType1.equals(prefixExpression2.getOperationTokenType())) {\n      return false;\n    }\n    final PsiExpression operand1 = prefixExpression1.getOperand();\n    final PsiExpression operand2 = prefixExpression2.getOperand();\n    return expressionsAreEquivalent(operand1, operand2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean arrayInitializerExpressionsAreEquivalent(\n    @NotNull PsiArrayInitializerExpression arrInitExp1,\n    @NotNull PsiArrayInitializerExpression arrInitExp2) {\n    final PsiExpression[] initializers1 = arrInitExp1.getInitializers();\n    final PsiExpression[] initializers2 = arrInitExp2.getInitializers();\n    return expressionListsAreEquivalent(initializers1, initializers2);\n  }","id":105585,"modified_method":"private static boolean arrayInitializerExpressionsAreEquivalent(\n    @NotNull PsiArrayInitializerExpression arrayInitializerExpression1,\n    @NotNull PsiArrayInitializerExpression arrayInitializerExpression2) {\n    final PsiExpression[] initializers1 =\n      arrayInitializerExpression1.getInitializers();\n    final PsiExpression[] initializers2 =\n      arrayInitializerExpression2.getInitializers();\n    return expressionListsAreEquivalent(initializers1, initializers2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean expressionsAreEquivalent(\n    @Nullable PsiExpression exp1, @Nullable PsiExpression exp2) {\n    if (exp1 == null && exp2 == null) {\n      return true;\n    }\n    if (exp1 == null || exp2 == null) {\n      return false;\n    }\n    final PsiExpression expToCompare1 =\n      ParenthesesUtils.stripParentheses(exp1);\n    final PsiExpression expToCompare2 =\n      ParenthesesUtils.stripParentheses(exp2);\n    if (expToCompare1 == null && expToCompare2 == null) {\n      return true;\n    }\n    if (expToCompare1 == null || expToCompare2 == null) {\n      return false;\n    }\n    if (expToCompare1.getClass() != expToCompare2.getClass()) {\n      return false;\n    }\n    if (expToCompare1 instanceof PsiThisExpression) {\n      return true;\n    }\n    else if (expToCompare1 instanceof PsiSuperExpression) {\n      return true;\n    }\n    else if (expToCompare1 instanceof PsiLiteralExpression) {\n      final String text1 = expToCompare1.getText();\n      final String text2 = expToCompare2.getText();\n      return text1.equals(text2);\n    }\n    else if (expToCompare1 instanceof PsiClassObjectAccessExpression) {\n      final String text1 = expToCompare1.getText();\n      final String text2 = expToCompare2.getText();\n      return text1.equals(text2);\n    }\n    else if (expToCompare1 instanceof PsiReferenceExpression) {\n      return referenceExpressionsAreEquivalent(\n        (PsiReferenceExpression)expToCompare1,\n        (PsiReferenceExpression)expToCompare2);\n    }\n    else if (expToCompare1 instanceof PsiMethodCallExpression) {\n      return methodCallExpressionsAreEquivalent(\n        (PsiMethodCallExpression)expToCompare1,\n        (PsiMethodCallExpression)expToCompare2);\n    }\n    else if (expToCompare1 instanceof PsiNewExpression) {\n      return newExpressionsAreEquivalent(\n        (PsiNewExpression)expToCompare1,\n        (PsiNewExpression)expToCompare2);\n    }\n    else if (expToCompare1 instanceof PsiArrayInitializerExpression) {\n      return arrayInitializerExpressionsAreEquivalent(\n        (PsiArrayInitializerExpression)expToCompare1,\n        (PsiArrayInitializerExpression)expToCompare2);\n    }\n    else if (expToCompare1 instanceof PsiTypeCastExpression) {\n      return typecastExpressionsAreEquivalent(\n        (PsiTypeCastExpression)expToCompare1,\n        (PsiTypeCastExpression)expToCompare2);\n    }\n    else if (expToCompare1 instanceof PsiArrayAccessExpression) {\n      return arrayAccessExpressionsAreEquivalent(\n        (PsiArrayAccessExpression)expToCompare2,\n        (PsiArrayAccessExpression)expToCompare1);\n    }\n    else if (expToCompare1 instanceof PsiPrefixExpression) {\n      return prefixExpressionsAreEquivalent(\n        (PsiPrefixExpression)expToCompare1,\n        (PsiPrefixExpression)expToCompare2);\n    }\n    else if (expToCompare1 instanceof PsiPostfixExpression) {\n      return postfixExpressionsAreEquivalent(\n        (PsiPostfixExpression)expToCompare1,\n        (PsiPostfixExpression)expToCompare2);\n    }\n    else if (expToCompare1 instanceof PsiBinaryExpression) {\n      return binaryExpressionsAreEquivalent(\n        (PsiBinaryExpression)expToCompare1,\n        (PsiBinaryExpression)expToCompare2);\n    }\n    else if (expToCompare1 instanceof PsiAssignmentExpression) {\n      return assignmentExpressionsAreEquivalent(\n        (PsiAssignmentExpression)expToCompare1,\n        (PsiAssignmentExpression)expToCompare2);\n    }\n    else if (expToCompare1 instanceof PsiConditionalExpression) {\n      return conditionalExpressionsAreEquivalent(\n        (PsiConditionalExpression)expToCompare1,\n        (PsiConditionalExpression)expToCompare2);\n    }\n    else if (expToCompare1 instanceof PsiInstanceOfExpression) {\n      return instanceofExpressionsAreEquivalent(\n        (PsiInstanceOfExpression)expToCompare1,\n        (PsiInstanceOfExpression)expToCompare2);\n    }\n    return false;\n  }","id":105586,"modified_method":"public static boolean expressionsAreEquivalent(@Nullable PsiExpression expression1, @Nullable PsiExpression expression2) {\n    expression1 = ParenthesesUtils.stripParentheses(expression1);\n    expression2 = ParenthesesUtils.stripParentheses(expression2);\n    if (expression1 == null) {\n      return expression2 == null;\n    } else if (expression2 == null) {\n      return false;\n    }\n    if (expression1.getClass() != expression2.getClass()) {\n      return false;\n    }\n    if (expression1 instanceof PsiThisExpression) {\n      return true;\n    }\n    else if (expression1 instanceof PsiSuperExpression) {\n      return true;\n    }\n    else if (expression1 instanceof PsiLiteralExpression) {\n      return literalExpressionsAreEquivalent((PsiLiteralExpression)expression1, (PsiLiteralExpression)expression2);\n    }\n    else if (expression1 instanceof PsiClassObjectAccessExpression) {\n      return classObjectAccessExpressionsAreEquivalent((PsiClassObjectAccessExpression)expression1,\n                                                       (PsiClassObjectAccessExpression)expression2);\n    }\n    else if (expression1 instanceof PsiReferenceExpression) {\n      return referenceExpressionsAreEquivalent((PsiReferenceExpression)expression1, (PsiReferenceExpression)expression2);\n    }\n    else if (expression1 instanceof PsiMethodCallExpression) {\n      return methodCallExpressionsAreEquivalent((PsiMethodCallExpression)expression1, (PsiMethodCallExpression)expression2);\n    }\n    else if (expression1 instanceof PsiNewExpression) {\n      return newExpressionsAreEquivalent((PsiNewExpression)expression1, (PsiNewExpression)expression2);\n    }\n    else if (expression1 instanceof PsiArrayInitializerExpression) {\n      return arrayInitializerExpressionsAreEquivalent((PsiArrayInitializerExpression)expression1,\n                                                      (PsiArrayInitializerExpression)expression2);\n    }\n    else if (expression1 instanceof PsiTypeCastExpression) {\n      return typeCastExpressionsAreEquivalent((PsiTypeCastExpression)expression1, (PsiTypeCastExpression)expression2);\n    }\n    else if (expression1 instanceof PsiArrayAccessExpression) {\n      return arrayAccessExpressionsAreEquivalent((PsiArrayAccessExpression)expression2, (PsiArrayAccessExpression)expression1);\n    }\n    else if (expression1 instanceof PsiPrefixExpression) {\n      return prefixExpressionsAreEquivalent((PsiPrefixExpression)expression1, (PsiPrefixExpression)expression2);\n    }\n    else if (expression1 instanceof PsiPostfixExpression) {\n      return postfixExpressionsAreEquivalent((PsiPostfixExpression)expression1, (PsiPostfixExpression)expression2);\n    }\n    else if (expression1 instanceof PsiPolyadicExpression) {\n      return polyadicExpressionsAreEquivalent((PsiPolyadicExpression)expression1, (PsiPolyadicExpression)expression2);\n    }\n    else if (expression1 instanceof PsiAssignmentExpression) {\n      return assignmentExpressionsAreEquivalent((PsiAssignmentExpression)expression1, (PsiAssignmentExpression)expression2);\n    }\n    else if (expression1 instanceof PsiConditionalExpression) {\n      return conditionalExpressionsAreEquivalent((PsiConditionalExpression)expression1, (PsiConditionalExpression)expression2);\n    }\n    else if (expression1 instanceof PsiInstanceOfExpression) {\n      return instanceofExpressionsAreEquivalent((PsiInstanceOfExpression)expression1, (PsiInstanceOfExpression)expression2);\n    }\n    return false;\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean statementsAreEquivalent(\n    @Nullable PsiStatement statement1,\n    @Nullable PsiStatement statement2) {\n    if (statement1 == null && statement2 == null) {\n      return true;\n    }\n    if (statement1 == null || statement2 == null) {\n      return false;\n    }\n    final int type1 = getStatementType(statement1);\n    final int type2 = getStatementType(statement2);\n    if (type1 != type2) {\n      return false;\n    }\n    switch (type1) {\n      case ASSERT_STATEMENT:\n        return assertStatementsAreEquivalent(\n          (PsiAssertStatement)statement1,\n          (PsiAssertStatement)statement2);\n      case BLOCK_STATEMENT:\n        return blockStatementsAreEquivalent(\n          (PsiBlockStatement)statement1,\n          (PsiBlockStatement)statement2);\n      case BREAK_STATEMENT:\n        return breakStatementsAreEquivalent(\n          (PsiBreakStatement)statement1,\n          (PsiBreakStatement)statement2);\n      case CONTINUE_STATEMENT:\n        return continueStatementsAreEquivalent(\n          (PsiContinueStatement)statement1,\n          (PsiContinueStatement)statement2);\n      case DECLARATION_STATEMENT:\n        return declarationStatementsAreEquivalent(\n          (PsiDeclarationStatement)statement1,\n          (PsiDeclarationStatement)statement2);\n      case DO_WHILE_STATEMENT:\n        return doWhileStatementsAreEquivalent(\n          (PsiDoWhileStatement)statement1,\n          (PsiDoWhileStatement)statement2);\n      case EMPTY_STATEMENT:\n        return true;\n      case EXPRESSION_LIST_STATEMENT:\n        return expressionListStatementsAreEquivalent(\n          (PsiExpressionListStatement)statement1,\n          (PsiExpressionListStatement)statement2);\n      case EXPRESSION_STATEMENT:\n        return expressionStatementsAreEquivalent(\n          (PsiExpressionStatement)statement1,\n          (PsiExpressionStatement)statement2);\n      case FOR_STATEMENT:\n        return forStatementsAreEquivalent(\n          (PsiForStatement)statement1,\n          (PsiForStatement)statement2);\n      case FOR_EACH_STATEMENT:\n        return forEachStatementsAreEquivalent(\n          (PsiForeachStatement)statement1,\n          (PsiForeachStatement)statement2);\n      case IF_STATEMENT:\n        return ifStatementsAreEquivalent(\n          (PsiIfStatement)statement1,\n          (PsiIfStatement)statement2);\n      case LABELED_STATEMENT:\n        return labeledStatementsAreEquivalent(\n          (PsiLabeledStatement)statement1,\n          (PsiLabeledStatement)statement2);\n      case RETURN_STATEMENT:\n        return returnStatementsAreEquivalent(\n          (PsiReturnStatement)statement1,\n          (PsiReturnStatement)statement2);\n      case SWITCH_LABEL_STATEMENT:\n        return switchLabelStatementsAreEquivalent(\n          (PsiSwitchLabelStatement)statement1,\n          (PsiSwitchLabelStatement)statement2);\n      case SWITCH_STATEMENT:\n        return switchStatementsAreEquivalent(\n          (PsiSwitchStatement)statement1,\n          (PsiSwitchStatement)statement2);\n      case SYNCHRONIZED_STATEMENT:\n        return synchronizedStatementsAreEquivalent(\n          (PsiSynchronizedStatement)statement1,\n          (PsiSynchronizedStatement)statement2);\n      case THROW_STATEMENT:\n        return throwStatementsAreEquivalent(\n          (PsiThrowStatement)statement1,\n          (PsiThrowStatement)statement2);\n      case TRY_STATEMENT:\n        return tryStatementsAreEquivalent(\n          (PsiTryStatement)statement1,\n          (PsiTryStatement)statement2);\n      case WHILE_STATEMENT:\n        return whileStatementsAreEquivalent(\n          (PsiWhileStatement)statement1,\n          (PsiWhileStatement)statement2);\n      default:\n        final String text1 = statement1.getText();\n        final String text2 = statement2.getText();\n        return text1.equals(text2);\n    }\n  }","id":105587,"modified_method":"public static boolean statementsAreEquivalent(@Nullable PsiStatement statement1, @Nullable PsiStatement statement2) {\n    if (statement1 == null) {\n      return statement2 == null;\n    } else if (statement2 == null) {\n      return false;\n    }\n    if (statement1.getClass() != statement2.getClass()) {\n      return false;\n    }\n    if (statement1 instanceof PsiAssertStatement) {\n      return assertStatementsAreEquivalent((PsiAssertStatement)statement1, (PsiAssertStatement)statement2);\n    }\n    if (statement1 instanceof PsiBlockStatement) {\n      return blockStatementsAreEquivalent((PsiBlockStatement)statement1, (PsiBlockStatement)statement2);\n    }\n    if (statement1 instanceof PsiBreakStatement) {\n      return breakStatementsAreEquivalent((PsiBreakStatement)statement1, (PsiBreakStatement)statement2);\n    }\n    if (statement1 instanceof PsiContinueStatement) {\n      return continueStatementsAreEquivalent((PsiContinueStatement)statement1, (PsiContinueStatement)statement2);\n    }\n    if (statement1 instanceof PsiDeclarationStatement) {\n      return declarationStatementsAreEquivalent((PsiDeclarationStatement)statement1, (PsiDeclarationStatement)statement2);\n    }\n    if (statement1 instanceof PsiDoWhileStatement) {\n      return doWhileStatementsAreEquivalent((PsiDoWhileStatement)statement1, (PsiDoWhileStatement)statement2);\n    }\n    if (statement1 instanceof PsiEmptyStatement) {\n      return true;\n    }\n    if (statement1 instanceof PsiExpressionListStatement) {\n      return expressionListStatementsAreEquivalent((PsiExpressionListStatement)statement1, (PsiExpressionListStatement)statement2);\n    }\n    if (statement1 instanceof PsiExpressionStatement) {\n      return expressionStatementsAreEquivalent((PsiExpressionStatement)statement1, (PsiExpressionStatement)statement2);\n    }\n    if (statement1 instanceof PsiForStatement) {\n      return forStatementsAreEquivalent((PsiForStatement)statement1, (PsiForStatement)statement2);\n    }\n    if (statement1 instanceof PsiForeachStatement) {\n      return forEachStatementsAreEquivalent((PsiForeachStatement)statement1, (PsiForeachStatement)statement2);\n    }\n    if (statement1 instanceof PsiIfStatement) {\n      return ifStatementsAreEquivalent((PsiIfStatement)statement1, (PsiIfStatement)statement2);\n    }\n    if (statement1 instanceof PsiLabeledStatement) {\n      return labeledStatementsAreEquivalent((PsiLabeledStatement)statement1, (PsiLabeledStatement)statement2);\n    }\n    if (statement1 instanceof PsiReturnStatement) {\n      return returnStatementsAreEquivalent((PsiReturnStatement)statement1, (PsiReturnStatement)statement2);\n    }\n    if (statement1 instanceof PsiSwitchStatement) {\n      return switchStatementsAreEquivalent((PsiSwitchStatement)statement1, (PsiSwitchStatement)statement2);\n    }\n    if (statement1 instanceof PsiSwitchLabelStatement) {\n      return switchLabelStatementsAreEquivalent((PsiSwitchLabelStatement)statement1, (PsiSwitchLabelStatement)statement2);\n    }\n    if (statement1 instanceof PsiSynchronizedStatement) {\n      return synchronizedStatementsAreEquivalent((PsiSynchronizedStatement)statement1, (PsiSynchronizedStatement)statement2);\n    }\n    if (statement1 instanceof PsiThrowStatement) {\n      return throwStatementsAreEquivalent((PsiThrowStatement)statement1, (PsiThrowStatement)statement2);\n    }\n    if (statement1 instanceof PsiTryStatement) {\n      return tryStatementsAreEquivalent((PsiTryStatement)statement1, (PsiTryStatement)statement2);\n    }\n    if (statement1 instanceof PsiWhileStatement) {\n      return whileStatementsAreEquivalent((PsiWhileStatement)statement1, (PsiWhileStatement)statement2);\n    }\n    final String text1 = statement1.getText();\n    final String text2 = statement2.getText();\n    return text1.equals(text2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean typecastExpressionsAreEquivalent(\n    @NotNull PsiTypeCastExpression typeCastExpression1,\n    @NotNull PsiTypeCastExpression typeCastExpression2) {\n    final PsiTypeElement castType2 = typeCastExpression1.getCastType();\n    final PsiTypeElement castType1 = typeCastExpression2.getCastType();\n    if (castType1 == null && castType2 == null) {\n      return true;\n    }\n    if (castType1 == null || castType2 == null) {\n      return false;\n    }\n    if (!castType2.equals(castType1)) {\n      return false;\n    }\n    final PsiExpression operand1 = typeCastExpression2.getOperand();\n    final PsiExpression operand2 = typeCastExpression1.getOperand();\n    return expressionsAreEquivalent(operand1, operand2);\n  }","id":105588,"modified_method":"private static boolean typeCastExpressionsAreEquivalent(\n    @NotNull PsiTypeCastExpression typeCastExpression1,\n    @NotNull PsiTypeCastExpression typeCastExpression2) {\n    final PsiTypeElement typeElement1 = typeCastExpression1.getCastType();\n    final PsiTypeElement typeElement2 = typeCastExpression2.getCastType();\n    if (!typeElementsAreEquivalent(typeElement1, typeElement2)) {\n      return false;\n    }\n    final PsiExpression operand1 = typeCastExpression1.getOperand();\n    final PsiExpression operand2 = typeCastExpression2.getOperand();\n    return expressionsAreEquivalent(operand1, operand2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean localVariableAreEquivalent(\n    @NotNull PsiLocalVariable localVariable1,\n    @NotNull PsiLocalVariable localVariable2) {\n    final PsiType type1 = localVariable1.getType();\n    final PsiType type2 = localVariable2.getType();\n    if (!typesAreEquivalent(type1, type2)) {\n      return false;\n    }\n    final String name1 = localVariable1.getName();\n    final String name2 = localVariable2.getName();\n    if (name1 == null) {\n      return name2 == null;\n    }\n    if (!name1.equals(name2)) {\n      return false;\n    }\n    final PsiExpression initializer1 = localVariable1.getInitializer();\n    final PsiExpression initializer2 = localVariable2.getInitializer();\n    return expressionsAreEquivalent(initializer1, initializer2);\n  }","id":105589,"modified_method":"private static boolean localVariablesAreEquivalent(\n    @NotNull PsiLocalVariable localVariable1,\n    @NotNull PsiLocalVariable localVariable2) {\n    final PsiType type1 = localVariable1.getType();\n    final PsiType type2 = localVariable2.getType();\n    if (!typesAreEquivalent(type1, type2)) {\n      return false;\n    }\n    final String name1 = localVariable1.getName();\n    final String name2 = localVariable2.getName();\n    if (name1 == null) {\n      return name2 == null;\n    }\n    if (!name1.equals(name2)) {\n      return false;\n    }\n    final PsiExpression initializer1 = localVariable1.getInitializer();\n    final PsiExpression initializer2 = localVariable2.getInitializer();\n    return expressionsAreEquivalent(initializer1, initializer2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean tryStatementsAreEquivalent(\n    @NotNull PsiTryStatement statement1,\n    @NotNull PsiTryStatement statement2) {\n    final PsiCodeBlock tryBlock1 = statement1.getTryBlock();\n    final PsiCodeBlock tryBlock2 = statement2.getTryBlock();\n    if (!codeBlocksAreEquivalent(tryBlock1, tryBlock2)) {\n      return false;\n    }\n    final PsiCodeBlock finallyBlock1 = statement1.getFinallyBlock();\n    final PsiCodeBlock finallyBlock2 = statement2.getFinallyBlock();\n    if (!codeBlocksAreEquivalent(finallyBlock1, finallyBlock2)) {\n      return false;\n    }\n    final PsiCodeBlock[] catchBlocks1 = statement1.getCatchBlocks();\n    final PsiCodeBlock[] catchBlocks2 = statement2.getCatchBlocks();\n    if (catchBlocks1.length != catchBlocks2.length) {\n      return false;\n    }\n    for (int i = 0; i < catchBlocks2.length; i++) {\n      if (!codeBlocksAreEquivalent(catchBlocks1[i], catchBlocks2[i])) {\n        return false;\n      }\n    }\n    final PsiParameter[] catchParameters1 =\n      statement1.getCatchBlockParameters();\n    final PsiParameter[] catchParameters2 =\n      statement2.getCatchBlockParameters();\n    if (catchParameters1.length != catchParameters2.length) {\n      return false;\n    }\n    for (int i = 0; i < catchParameters2.length; i++) {\n      if (!parametersAreEquivalent(catchParameters2[i],\n                                   catchParameters1[i])) {\n        return false;\n      }\n    }\n    return true;\n  }","id":105590,"modified_method":"private static boolean tryStatementsAreEquivalent(@NotNull PsiTryStatement statement1, @NotNull PsiTryStatement statement2) {\n    final PsiCodeBlock tryBlock1 = statement1.getTryBlock();\n    final PsiCodeBlock tryBlock2 = statement2.getTryBlock();\n    if (!codeBlocksAreEquivalent(tryBlock1, tryBlock2)) {\n      return false;\n    }\n    final PsiCodeBlock finallyBlock1 = statement1.getFinallyBlock();\n    final PsiCodeBlock finallyBlock2 = statement2.getFinallyBlock();\n    if (!codeBlocksAreEquivalent(finallyBlock1, finallyBlock2)) {\n      return false;\n    }\n    final PsiCodeBlock[] catchBlocks1 = statement1.getCatchBlocks();\n    final PsiCodeBlock[] catchBlocks2 = statement2.getCatchBlocks();\n    if (catchBlocks1.length != catchBlocks2.length) {\n      return false;\n    }\n    for (int i = 0; i < catchBlocks2.length; i++) {\n      if (!codeBlocksAreEquivalent(catchBlocks1[i], catchBlocks2[i])) {\n        return false;\n      }\n    }\n    final PsiResourceList resourceList1 = statement1.getResourceList();\n    final PsiResourceList resourceList2 = statement2.getResourceList();\n    if (resourceList1 != null) {\n      if (resourceList2 == null) {\n        return false;\n      }\n      if (resourceList1.getResourceVariablesCount() != resourceList2.getResourceVariablesCount()) {\n        return false;\n      }\n      final List<PsiResourceVariable> resourceVariables1 = resourceList1.getResourceVariables();\n      final List<PsiResourceVariable> resourceVariables2 = resourceList2.getResourceVariables();\n      for (int i1 = 0, size = resourceVariables1.size(); i1 < size; i1++) {\n        final PsiResourceVariable variable1 = resourceVariables1.get(i1);\n        final PsiResourceVariable variable2 = resourceVariables2.get(i1);\n        if (!localVariablesAreEquivalent(variable1, variable2)) {\n          return false;\n        }\n      }\n    } else if (resourceList2 != null) {\n      return false;\n    }\n    final PsiParameter[] catchParameters1 = statement1.getCatchBlockParameters();\n    final PsiParameter[] catchParameters2 = statement2.getCatchBlockParameters();\n    if (catchParameters1.length != catchParameters2.length) {\n      return false;\n    }\n    for (int i = 0; i < catchParameters2.length; i++) {\n      if (!parametersAreEquivalent(catchParameters2[i], catchParameters1[i])) {\n        return false;\n      }\n    }\n    return true;\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean binaryExpressionsAreEquivalent(\n    @NotNull PsiBinaryExpression binaryExpression1,\n    @NotNull PsiBinaryExpression binaryExpression2) {\n    final IElementType tokenType1 = binaryExpression1.getOperationTokenType();\n    if (!tokenType1.equals(binaryExpression2.getOperationTokenType())) {\n      return false;\n    }\n    final PsiExpression lhs1 = binaryExpression1.getLOperand();\n    final PsiExpression lhs2 = binaryExpression2.getLOperand();\n    final PsiExpression rhs1 = binaryExpression1.getROperand();\n    final PsiExpression rhs2 = binaryExpression2.getROperand();\n    return expressionsAreEquivalent(lhs1, lhs2)\n           && expressionsAreEquivalent(rhs1, rhs2);\n  }","id":105591,"modified_method":"private static boolean referenceExpressionsAreEquivalent(\n    PsiReferenceExpression referenceExpression1,\n    PsiReferenceExpression referenceExpression2) {\n    final PsiElement element1 = referenceExpression1.resolve();\n    final PsiElement element2 = referenceExpression2.resolve();\n    if (element1 != null) {\n      if (!element1.equals(element2)) {\n        return false;\n      }\n    }\n    else {\n      return element2 == null;\n    }\n    if (element1 instanceof PsiMember) {\n      final PsiMember member1 = (PsiMember)element1;\n      if (member1.hasModifierProperty(PsiModifier.STATIC)) {\n        return true;\n      }\n      else if (member1 instanceof PsiClass) {\n        return true;\n      }\n    }\n    else {\n      return true;\n    }\n    final PsiExpression qualifier1 =\n      referenceExpression1.getQualifierExpression();\n    final PsiExpression qualifier2 =\n      referenceExpression2.getQualifierExpression();\n    if (qualifier1 != null &&\n        !(qualifier1 instanceof PsiThisExpression ||\n          qualifier1 instanceof PsiSuperExpression)) {\n      if (qualifier2 == null) {\n        return false;\n      }\n      else if (!expressionsAreEquivalent(qualifier1, qualifier2)) {\n        return false;\n      }\n    }\n    else {\n      if (qualifier2 != null &&\n          !(qualifier2 instanceof PsiThisExpression ||\n            qualifier2 instanceof PsiSuperExpression)) {\n        return false;\n      }\n    }\n    final String text1 = referenceExpression1.getText();\n    final String text2 = referenceExpression2.getText();\n    return text1.equals(text2);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean declarationStatementsAreEquivalent(\n    @NotNull PsiDeclarationStatement statement1,\n    @NotNull PsiDeclarationStatement statement2) {\n    final PsiElement[] elements1 = statement1.getDeclaredElements();\n    final List<PsiLocalVariable> vars1 =\n      new ArrayList<PsiLocalVariable>(elements1.length);\n    for (PsiElement anElement : elements1) {\n      if (anElement instanceof PsiLocalVariable) {\n        vars1.add((PsiLocalVariable)anElement);\n      }\n    }\n    final PsiElement[] elements2 = statement2.getDeclaredElements();\n    final List<PsiLocalVariable> vars2 =\n      new ArrayList<PsiLocalVariable>(elements2.length);\n    for (PsiElement anElement : elements2) {\n      if (anElement instanceof PsiLocalVariable) {\n        vars2.add((PsiLocalVariable)anElement);\n      }\n    }\n    final int size = vars1.size();\n    if (size != vars2.size()) {\n      return false;\n    }\n    for (int i = 0; i < size; i++) {\n      final PsiLocalVariable var1 = vars1.get(i);\n      final PsiLocalVariable var2 = vars2.get(i);\n      if (!localVariableAreEquivalent(var1, var2)) {\n        return false;\n      }\n    }\n    return true;\n  }","id":105592,"modified_method":"private static boolean declarationStatementsAreEquivalent(\n    @NotNull PsiDeclarationStatement statement1,\n    @NotNull PsiDeclarationStatement statement2) {\n    final PsiElement[] elements1 = statement1.getDeclaredElements();\n    final List<PsiLocalVariable> vars1 =\n      new ArrayList<PsiLocalVariable>(elements1.length);\n    for (PsiElement anElement : elements1) {\n      if (anElement instanceof PsiLocalVariable) {\n        vars1.add((PsiLocalVariable)anElement);\n      }\n    }\n    final PsiElement[] elements2 = statement2.getDeclaredElements();\n    final List<PsiLocalVariable> vars2 =\n      new ArrayList<PsiLocalVariable>(elements2.length);\n    for (PsiElement anElement : elements2) {\n      if (anElement instanceof PsiLocalVariable) {\n        vars2.add((PsiLocalVariable)anElement);\n      }\n    }\n    final int size = vars1.size();\n    if (size != vars2.size()) {\n      return false;\n    }\n    for (int i = 0; i < size; i++) {\n      final PsiLocalVariable var1 = vars1.get(i);\n      final PsiLocalVariable var2 = vars2.get(i);\n      if (!localVariablesAreEquivalent(var1, var2)) {\n        return false;\n      }\n    }\n    return true;\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean expressionsAreEquivalent(\n    @Nullable PsiExpression expression1,\n    @Nullable PsiExpression expression2) {\n    if (expression1 == null && expression2 == null) {\n      return true;\n    }\n    if (expression1 == null || expression2 == null) {\n      return false;\n    }\n    PsiExpression expToCompare1 = expression1;\n    while (expToCompare1 instanceof PsiParenthesizedExpression) {\n      final PsiParenthesizedExpression parenthesizedExpression =\n        (PsiParenthesizedExpression)expToCompare1;\n      expToCompare1 = parenthesizedExpression.getExpression();\n    }\n    PsiExpression expToCompare2 = expression2;\n    while (expToCompare2 instanceof PsiParenthesizedExpression) {\n      final PsiParenthesizedExpression parenthesizedExpression =\n        (PsiParenthesizedExpression)expToCompare2;\n      expToCompare2 = parenthesizedExpression.getExpression();\n    }\n    if (expToCompare1 == null && expToCompare2 == null) {\n      return true;\n    }\n    if (expToCompare1 == null || expToCompare2 == null) {\n      return false;\n    }\n    final int type1 = getExpressionType(expToCompare1);\n    final int type2 = getExpressionType(expToCompare2);\n    if (type1 != type2) {\n      return false;\n    }\n    switch (type1) {\n      case THIS_EXPRESSION:\n      case SUPER_EXPRESSION:\n        return true;\n      case LITERAL_EXPRESSION:\n      case CLASS_OBJECT_EXPRESSION:\n      case REFERENCE_EXPRESSION:\n        final String text1 = expToCompare1.getText();\n        final String text2 = expToCompare2.getText();\n        return text1.equals(text2);\n      case METHOD_CALL_EXPRESSION:\n        return methodCallExpressionsAreEquivalent(\n          (PsiMethodCallExpression)expToCompare1,\n          (PsiMethodCallExpression)expToCompare2);\n      case NEW_EXPRESSION:\n        return newExpressionsAreEquivalent(\n          (PsiNewExpression)expToCompare1,\n          (PsiNewExpression)expToCompare2);\n      case ARRAY_INITIALIZER_EXPRESSION:\n        return arrayInitializerExpressionsAreEquivalent(\n          (PsiArrayInitializerExpression)expToCompare1,\n          (PsiArrayInitializerExpression)expToCompare2);\n      case TYPECAST_EXPRESSION:\n        return typecastExpressionsAreEquivalent(\n          (PsiTypeCastExpression)expToCompare2,\n          (PsiTypeCastExpression)expToCompare1);\n      case ARRAY_ACCESS_EXPRESSION:\n        return arrayAccessExpressionsAreEquivalent(\n          (PsiArrayAccessExpression)expToCompare2,\n          (PsiArrayAccessExpression)expToCompare1);\n      case PREFIX_EXPRESSION:\n        return prefixExpressionsAreEquivalent(\n          (PsiPrefixExpression)expToCompare1,\n          (PsiPrefixExpression)expToCompare2);\n      case POSTFIX_EXPRESSION:\n        return postfixExpressionsAreEquivalent(\n          (PsiPostfixExpression)expToCompare1,\n          (PsiPostfixExpression)expToCompare2);\n      case BINARY_EXPRESSION:\n        return binaryExpressionsAreEquivalent(\n          (PsiBinaryExpression)expToCompare1,\n          (PsiBinaryExpression)expToCompare2);\n      case ASSIGNMENT_EXPRESSION:\n        return assignmentExpressionsAreEquivalent(\n          (PsiAssignmentExpression)expToCompare1,\n          (PsiAssignmentExpression)expToCompare2);\n      case CONDITIONAL_EXPRESSION:\n        return conditionalExpressionsAreEquivalent(\n          (PsiConditionalExpression)expToCompare1,\n          (PsiConditionalExpression)expToCompare2);\n      default:\n        return false;\n    }\n  }","id":105593,"modified_method":"public static boolean expressionsAreEquivalent(@Nullable PsiExpression expression1, @Nullable PsiExpression expression2) {\n    expression1 = ParenthesesUtils.stripParentheses(expression1);\n    expression2 = ParenthesesUtils.stripParentheses(expression2);\n    if (expression1 == null) {\n      return expression2 == null;\n    } else if (expression2 == null) {\n      return false;\n    }\n    if (expression1.getClass() != expression2.getClass()) {\n      return false;\n    }\n    if (expression1 instanceof PsiThisExpression) {\n      return true;\n    }\n    else if (expression1 instanceof PsiSuperExpression) {\n      return true;\n    }\n    else if (expression1 instanceof PsiLiteralExpression) {\n      return literalExpressionsAreEquivalent((PsiLiteralExpression)expression1, (PsiLiteralExpression)expression2);\n    }\n    else if (expression1 instanceof PsiClassObjectAccessExpression) {\n      return classObjectAccessExpressionsAreEquivalent((PsiClassObjectAccessExpression)expression1,\n                                                       (PsiClassObjectAccessExpression)expression2);\n    }\n    else if (expression1 instanceof PsiReferenceExpression) {\n      return referenceExpressionsAreEquivalent((PsiReferenceExpression)expression1, (PsiReferenceExpression)expression2);\n    }\n    else if (expression1 instanceof PsiMethodCallExpression) {\n      return methodCallExpressionsAreEquivalent((PsiMethodCallExpression)expression1, (PsiMethodCallExpression)expression2);\n    }\n    else if (expression1 instanceof PsiNewExpression) {\n      return newExpressionsAreEquivalent((PsiNewExpression)expression1, (PsiNewExpression)expression2);\n    }\n    else if (expression1 instanceof PsiArrayInitializerExpression) {\n      return arrayInitializerExpressionsAreEquivalent((PsiArrayInitializerExpression)expression1,\n                                                      (PsiArrayInitializerExpression)expression2);\n    }\n    else if (expression1 instanceof PsiTypeCastExpression) {\n      return typeCastExpressionsAreEquivalent((PsiTypeCastExpression)expression1, (PsiTypeCastExpression)expression2);\n    }\n    else if (expression1 instanceof PsiArrayAccessExpression) {\n      return arrayAccessExpressionsAreEquivalent((PsiArrayAccessExpression)expression2, (PsiArrayAccessExpression)expression1);\n    }\n    else if (expression1 instanceof PsiPrefixExpression) {\n      return prefixExpressionsAreEquivalent((PsiPrefixExpression)expression1, (PsiPrefixExpression)expression2);\n    }\n    else if (expression1 instanceof PsiPostfixExpression) {\n      return postfixExpressionsAreEquivalent((PsiPostfixExpression)expression1, (PsiPostfixExpression)expression2);\n    }\n    else if (expression1 instanceof PsiPolyadicExpression) {\n      return polyadicExpressionsAreEquivalent((PsiPolyadicExpression)expression1, (PsiPolyadicExpression)expression2);\n    }\n    else if (expression1 instanceof PsiAssignmentExpression) {\n      return assignmentExpressionsAreEquivalent((PsiAssignmentExpression)expression1, (PsiAssignmentExpression)expression2);\n    }\n    else if (expression1 instanceof PsiConditionalExpression) {\n      return conditionalExpressionsAreEquivalent((PsiConditionalExpression)expression1, (PsiConditionalExpression)expression2);\n    }\n    else if (expression1 instanceof PsiInstanceOfExpression) {\n      return instanceofExpressionsAreEquivalent((PsiInstanceOfExpression)expression1, (PsiInstanceOfExpression)expression2);\n    }\n    return false;\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean typesAreEquivalent(\n    @Nullable PsiType type1, @Nullable PsiType type2) {\n    if (type1 == null) {\n      return type2 == null;\n    }\n    if (type2 == null) {\n      return false;\n    }\n    final String type1Text = type1.getCanonicalText();\n    final String type2Text = type2.getCanonicalText();\n    return type1Text.equals(type2Text);\n  }","id":105594,"modified_method":"public static boolean typesAreEquivalent(\n    @Nullable PsiType type1, @Nullable PsiType type2) {\n    if (type1 == null) {\n      return type2 == null;\n    }\n    if (type2 == null) {\n      return false;\n    }\n    final String type1Text = type1.getCanonicalText();\n    final String type2Text = type2.getCanonicalText();\n    return type1Text.equals(type2Text);\n  }","commit_id":"7ae5c45604dbe68e03f78dc8f2ad4faf8012a7a1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean isEquality(PsiExpression arg){\n        if(arg instanceof PsiBinaryExpression){\n            final PsiBinaryExpression binaryExp = (PsiBinaryExpression) arg;\n            final PsiJavaToken sign = binaryExp.getOperationSign();\n            final IElementType tokenType = sign.getTokenType();\n            return JavaTokenType.EQEQ.equals(tokenType);\n        } else if(arg instanceof PsiMethodCallExpression){\n            final PsiMethodCallExpression expression =\n                    (PsiMethodCallExpression) arg;\n            final PsiExpressionList argumentList = expression.getArgumentList();\n            if(argumentList == null){\n                return false;\n            }\n            if(argumentList.getExpressions().length != 1){\n                return false;\n            }\n            final PsiReferenceExpression methodExpression =\n                    expression.getMethodExpression();\n            if(methodExpression == null){\n                return false;\n            }\n            @NonNls final String methodName = methodExpression.getReferenceName();\n            return \"equals\".equals(methodName);\n        }\n        return false;\n    }","id":105595,"modified_method":"private static boolean isEquality(PsiExpression arg){\n        if(arg instanceof PsiBinaryExpression){\n            final PsiBinaryExpression binaryExp = (PsiBinaryExpression) arg;\n            final PsiJavaToken sign = binaryExp.getOperationSign();\n            final IElementType tokenType = sign.getTokenType();\n            return JavaTokenType.EQEQ.equals(tokenType);\n        } else if(arg instanceof PsiMethodCallExpression){\n            final PsiMethodCallExpression expression =\n                    (PsiMethodCallExpression) arg;\n            final PsiExpressionList argumentList = expression.getArgumentList();\n            if(argumentList.getExpressions().length != 1){\n                return false;\n            }\n            final PsiReferenceExpression methodExpression =\n                    expression.getMethodExpression();\n            @NonNls final String methodName =\n                    methodExpression.getReferenceName();\n            return \"equals\".equals(methodName);\n        }\n        return false;\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean satisfiedBy(PsiElement element){\n        if(!(element instanceof PsiMethodCallExpression)){\n            return false;\n        }\n        if(ErrorUtil.containsError(element)){\n            return false;\n        }\n        final PsiMethodCallExpression expression =\n                (PsiMethodCallExpression) element;\n        final PsiExpressionList argumentList = expression.getArgumentList();\n        if(argumentList == null){\n            return false;\n        }\n        final PsiExpression[] args = argumentList.getExpressions();\n        final int numArgs = args.length;\n        if(numArgs < 1 || numArgs > 2){\n            return false;\n        }\n        final PsiReferenceExpression methodExpression =\n                expression.getMethodExpression();\n        if(methodExpression == null){\n            return false;\n        }\n        @NonNls final String methodName = methodExpression.getReferenceName();\n        if(!\"assertTrue\".equals(methodName)){\n            return false;\n        }\n        if(numArgs == 1){\n            return isEquality(args[0]);\n        } else{\n            return isEquality(args[1]);\n        }\n    }","id":105596,"modified_method":"public boolean satisfiedBy(PsiElement element){\n        if(!(element instanceof PsiMethodCallExpression)){\n            return false;\n        }\n        if(ErrorUtil.containsError(element)){\n            return false;\n        }\n        final PsiMethodCallExpression expression =\n                (PsiMethodCallExpression) element;\n        final PsiExpressionList argumentList = expression.getArgumentList();\n        final PsiExpression[] args = argumentList.getExpressions();\n        final int numArgs = args.length;\n        if(numArgs < 1 || numArgs > 2){\n            return false;\n        }\n        final PsiReferenceExpression methodExpression =\n                expression.getMethodExpression();\n        @NonNls final String methodName = methodExpression.getReferenceName();\n        if(!\"assertTrue\".equals(methodName)){\n            return false;\n        }\n        if(numArgs == 1){\n            return isEquality(args[0]);\n        } else{\n            return isEquality(args[1]);\n        }\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean isReturn(PsiStatement statement, @NonNls String value){\n        if(statement == null){\n            return false;\n        }\n        if(!(statement instanceof PsiReturnStatement)){\n            return false;\n        }\n        final PsiReturnStatement returnStatement =\n                (PsiReturnStatement) statement;\n        if(returnStatement.getReturnValue() == null){\n            return false;\n        }\n        final PsiExpression returnValue = returnStatement.getReturnValue();\n        final String returnValueText = returnValue.getText();\n        return value.equals(returnValueText);\n    }","id":105597,"modified_method":"public static boolean isReturn(PsiStatement statement, @NonNls String value){\n        if(statement == null){\n            return false;\n        }\n        if(!(statement instanceof PsiReturnStatement)){\n            return false;\n        }\n        final PsiReturnStatement returnStatement =\n                (PsiReturnStatement) statement;\n        if(returnStatement.getReturnValue() == null){\n            return false;\n        }\n        final PsiExpression returnValue = returnStatement.getReturnValue();\n\t    if (returnValue == null){\n\t\t    return false;\n\t    }\n        final String returnValueText = returnValue.getText();\n        return value.equals(returnValueText);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean isAssignment(PsiStatement statement, @NonNls String value){\n        if(statement == null){\n            return false;\n        }\n        if(!(statement instanceof PsiExpressionStatement)){\n            return false;\n        }\n        final PsiExpressionStatement expressionStatement =\n                (PsiExpressionStatement) statement;\n        final PsiExpression expression = expressionStatement.getExpression();\n        if(!(expression instanceof PsiAssignmentExpression)){\n            return false;\n        }\n        final PsiAssignmentExpression assignment =\n                (PsiAssignmentExpression) expression;\n        final PsiExpression rhs = assignment.getRExpression();\n        final PsiExpression lhs = assignment.getLExpression();\n        if(rhs == null){\n            return false;\n        }\n        final String rhsText = rhs.getText();\n        return value.equals(rhsText);\n    }","id":105598,"modified_method":"public static boolean isAssignment(PsiStatement statement, @NonNls String value){\n        if(statement == null){\n            return false;\n        }\n        if(!(statement instanceof PsiExpressionStatement)){\n            return false;\n        }\n        final PsiExpressionStatement expressionStatement =\n                (PsiExpressionStatement) statement;\n        final PsiExpression expression = expressionStatement.getExpression();\n        if(!(expression instanceof PsiAssignmentExpression)){\n            return false;\n        }\n        final PsiAssignmentExpression assignment =\n                (PsiAssignmentExpression) expression;\n        final PsiExpression rhs = assignment.getRExpression();\n        if(rhs == null){\n            return false;\n        }\n        final String rhsText = rhs.getText();\n        return value.equals(rhsText);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean isNull(PsiExpression expression) {\n    if (!(expression instanceof PsiLiteralExpression)) {\n      return false;\n    }\n    @NonNls final String text = expression.getText();\n    return \"null\".equals(text);\n  }","id":105599,"modified_method":"private static boolean isNull(PsiExpression expression) {\n        if (!(expression instanceof PsiLiteralExpression)) {\n            return false;\n        }\n        @NonNls final String text = expression.getText();\n        return PsiKeyword.NULL.equals(text);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean satisfiedBy(PsiElement element){\n        if(!(element instanceof PsiExpressionStatement)){\n            return false;\n        }\n\n        final PsiExpressionStatement statement =\n                (PsiExpressionStatement) element;\n        final PsiExpression expression = statement.getExpression();\n        final PsiElement parent = expression.getParent();\n        if(!(parent instanceof PsiExpressionStatement)){\n            return false;\n        }\n        final PsiType type = expression.getType();\n        if(!PsiType.BOOLEAN.equals(type)){\n            return false;\n        }\n        final PsiMethod containingMethod = PsiTreeUtil.getParentOfType(\n                expression, PsiMethod.class);\n        if (containingMethod != null && AnnotationUtil.isAnnotated(containingMethod, \"org.junit.Test\",\n                                       true)) {\n            return true;\n        }\n        final PsiClass containingClass =\n                PsiTreeUtil.getParentOfType(expression, PsiClass.class);\n        if(!isTest(containingClass)){\n            return false;\n        }\n        return isTestMethod(containingMethod);\n    }","id":105600,"modified_method":"public boolean satisfiedBy(PsiElement element){\n        if(!(element instanceof PsiExpressionStatement)){\n            return false;\n        }\n\n        final PsiExpressionStatement statement =\n                (PsiExpressionStatement) element;\n        final PsiExpression expression = statement.getExpression();\n        final PsiElement parent = expression.getParent();\n        if(!(parent instanceof PsiExpressionStatement)){\n            return false;\n        }\n        final PsiType type = expression.getType();\n        if(!PsiType.BOOLEAN.equals(type)){\n            return false;\n        }\n        final PsiMethod containingMethod = PsiTreeUtil.getParentOfType(\n                expression, PsiMethod.class);\n        return isTestMethod(containingMethod);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean isTestMethod(PsiMethod method){\n        if(method == null){\n            return false;\n        }\n        if(method.hasModifierProperty(PsiModifier.ABSTRACT) ||\n           !method.hasModifierProperty(PsiModifier.PUBLIC)){\n            return false;\n        }\n\n        final PsiType returnType = method.getReturnType();\n        if(returnType == null){\n            return false;\n        }\n        if(!returnType.equals(PsiType.VOID)){\n            return false;\n        }\n        final PsiParameterList parameterList = method.getParameterList();\n        final PsiParameter[] parameters = parameterList.getParameters();\n        if(parameters == null){\n            return false;\n        }\n        if(parameters.length != 0){\n            return false;\n        }\n        @NonNls final String methodName = method.getName();\n        return methodName.startsWith(\"test\");\n    }","id":105601,"modified_method":"private static boolean isTestMethod(PsiMethod method){\n        if(method == null){\n            return false;\n        }\n\t    if (AnnotationUtil.isAnnotated(method, \"org.junit.Test\", true)) {\n\t\t    return true;\n\t    }\n        if(method.hasModifierProperty(PsiModifier.ABSTRACT) ||\n           !method.hasModifierProperty(PsiModifier.PUBLIC)){\n            return false;\n        }\n        final PsiType returnType = method.getReturnType();\n        if(returnType == null){\n            return false;\n        }\n        if(!returnType.equals(PsiType.VOID)){\n            return false;\n        }\n        final PsiParameterList parameterList = method.getParameterList();\n        final PsiParameter[] parameters = parameterList.getParameters();\n        if(parameters == null){\n            return false;\n        }\n        if(parameters.length != 0){\n            return false;\n        }\n        @NonNls final String methodName = method.getName();\n\t    if (!methodName.startsWith(\"test\")) {\n\t\t    return false;\n\t    }\n\t    final PsiClass containingClass = method.getContainingClass();\n\t    return isTestClass(containingClass);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean isTest(PsiClass aClass){\n        if(aClass == null){\n            return false;\n        }\n        final PsiManager psiManager = aClass.getManager();\n        final Project project = psiManager.getProject();\n        final GlobalSearchScope scope = GlobalSearchScope.allScope(project);\n        final PsiClass ancestorClass =\n                psiManager.findClass(\"junit.framework.TestCase\", scope);\n        return InheritanceUtil.isInheritorOrSelf(aClass, ancestorClass, true);\n    }","id":105602,"modified_method":"private static boolean isTestClass(PsiClass aClass){\n        if(aClass == null){\n            return false;\n        }\n        final PsiManager psiManager = aClass.getManager();\n        final Project project = psiManager.getProject();\n        final GlobalSearchScope scope = GlobalSearchScope.allScope(project);\n        final PsiClass ancestorClass =\n                psiManager.findClass(\"junit.framework.TestCase\", scope);\n        return InheritanceUtil.isInheritorOrSelf(aClass, ancestorClass, true);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean codeBlocksAreEquivalent(PsiCodeBlock block1,\n                                                   PsiCodeBlock block2){\n        if(block1 == null && block2 == null){\n            return true;\n        }\n        if(block1 == null || block2 == null){\n            return false;\n        }\n        final PsiStatement[] statements1 = block1.getStatements();\n        final PsiStatement[] statements2 = block2.getStatements();\n        if(statements2.length != statements1.length){\n            return false;\n        }\n        for(int i = 0; i < statements2.length; i++){\n            if(!statementsAreEquivalent(statements2[i], statements1[i])){\n                return false;\n            }\n        }\n        return true;\n    }","id":105603,"modified_method":"public static boolean codeBlocksAreEquivalent(\n            @Nullable PsiCodeBlock block1, @Nullable PsiCodeBlock block2){\n        if(block1 == null && block2 == null){\n            return true;\n        }\n        if(block1 == null || block2 == null){\n            return false;\n        }\n        final PsiStatement[] statements1 = block1.getStatements();\n        final PsiStatement[] statements2 = block2.getStatements();\n        if(statements2.length != statements1.length){\n            return false;\n        }\n        for(int i = 0; i < statements2.length; i++){\n            if(!statementsAreEquivalent(statements2[i], statements1[i])){\n                return false;\n            }\n        }\n        return true;\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean typecastExpressionsAreEquivalent(PsiTypeCastExpression typecastExp2,\n                                                            PsiTypeCastExpression typecastExp1){\n        final PsiTypeElement castType2 = typecastExp2.getCastType();\n        final PsiTypeElement castType1 = typecastExp1.getCastType();\n        if(!castType2.equals(castType1)){\n            return false;\n        }\n        final PsiExpression operand1 = typecastExp1.getOperand();\n        final PsiExpression operand2 = typecastExp2.getOperand();\n        return expressionsAreEquivalent(operand1, operand2);\n    }","id":105604,"modified_method":"private static boolean typecastExpressionsAreEquivalent(\n            @NotNull PsiTypeCastExpression typeCastExpression1,\n            @NotNull PsiTypeCastExpression typeCastExpression2){\n        final PsiTypeElement castType2 = typeCastExpression1.getCastType();\n        final PsiTypeElement castType1 = typeCastExpression2.getCastType();\n        if(castType1 == null && castType2 == null){\n            return true;\n        }\n        if(castType1 == null || castType2 == null){\n            return false;\n        }\n        if(!castType2.equals(castType1)){\n            return false;\n        }\n        final PsiExpression operand1 = typeCastExpression2.getOperand();\n        final PsiExpression operand2 = typeCastExpression1.getOperand();\n        return expressionsAreEquivalent(operand1, operand2);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean conditionalExpressionsAreEquivalent(PsiConditionalExpression condExp1,\n                                                               PsiConditionalExpression condExp2){\n        final PsiExpression condition1 = condExp1.getCondition();\n        final PsiExpression condition2 = condExp2.getCondition();\n        final PsiExpression thenExpression1 = condExp1.getThenExpression();\n        final PsiExpression thenExpression2 = condExp2.getThenExpression();\n        final PsiExpression elseExpression1 = condExp1.getElseExpression();\n        final PsiExpression elseExpression2 = condExp2.getElseExpression();\n        return expressionsAreEquivalent(condition1, condition2)\n                &&\n                expressionsAreEquivalent(thenExpression1,\n                                         thenExpression2)\n                &&\n                expressionsAreEquivalent(elseExpression1,\n                                         elseExpression2);\n    }","id":105605,"modified_method":"private static boolean conditionalExpressionsAreEquivalent(\n            @NotNull PsiConditionalExpression conditionalExpression1,\n            @NotNull PsiConditionalExpression conditionalExpression2){\n        final PsiExpression condition1 = conditionalExpression1.getCondition();\n        final PsiExpression condition2 = conditionalExpression2.getCondition();\n        final PsiExpression thenExpression1 =\n                conditionalExpression1.getThenExpression();\n        final PsiExpression thenExpression2 =\n                conditionalExpression2.getThenExpression();\n        final PsiExpression elseExpression1 =\n                conditionalExpression1.getElseExpression();\n        final PsiExpression elseExpression2 =\n                conditionalExpression2.getElseExpression();\n        return expressionsAreEquivalent(condition1, condition2)\n                && expressionsAreEquivalent(thenExpression1, thenExpression2)\n                && expressionsAreEquivalent(elseExpression1, elseExpression2);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean assignmentExpressionsAreEquivalent(PsiAssignmentExpression assignExp1,\n                                                              PsiAssignmentExpression assignExp2){\n        final PsiJavaToken sign1 = assignExp1.getOperationSign();\n        final PsiJavaToken sign2 = assignExp2.getOperationSign();\n        if(!sign1.getTokenType().equals(sign2.getTokenType())){\n            return false;\n        }\n        final PsiExpression lhs1 = assignExp1.getLExpression();\n        final PsiExpression lhs2 = assignExp2.getLExpression();\n        final PsiExpression rhs1 = assignExp1.getRExpression();\n        final PsiExpression rhs2 = assignExp2.getRExpression();\n        return expressionsAreEquivalent(lhs1, lhs2)\n                && expressionsAreEquivalent(rhs1, rhs2);\n    }","id":105606,"modified_method":"private static boolean assignmentExpressionsAreEquivalent(\n            @NotNull PsiAssignmentExpression assignmentExpression1,\n            @NotNull PsiAssignmentExpression assignmentExpression2){\n        final PsiJavaToken sign1 = assignmentExpression1.getOperationSign();\n        final PsiJavaToken sign2 = assignmentExpression2.getOperationSign();\n        final IElementType tokenType1 = sign1.getTokenType();\n        if(!tokenType1.equals(sign2.getTokenType())){\n            return false;\n        }\n        final PsiExpression lhs1 = assignmentExpression1.getLExpression();\n        final PsiExpression lhs2 = assignmentExpression2.getLExpression();\n        final PsiExpression rhs1 = assignmentExpression1.getRExpression();\n        final PsiExpression rhs2 = assignmentExpression2.getRExpression();\n        return expressionsAreEquivalent(lhs1, lhs2)\n                && expressionsAreEquivalent(rhs1, rhs2);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean prefixExpressionsAreEquivalent(PsiPrefixExpression prefixExp1,\n                                                          PsiPrefixExpression prefixExp2){\n        final PsiJavaToken sign1 = prefixExp1.getOperationSign();\n        final PsiJavaToken sign2 = prefixExp2.getOperationSign();\n        if(!sign1.getTokenType().equals(sign2.getTokenType())){\n            return false;\n        }\n        final PsiExpression operand1 = prefixExp1.getOperand();\n        final PsiExpression operand2 = prefixExp2.getOperand();\n        return expressionsAreEquivalent(operand1, operand2);\n    }","id":105607,"modified_method":"private static boolean prefixExpressionsAreEquivalent(\n            @NotNull PsiPrefixExpression prefixExpression1,\n            @NotNull PsiPrefixExpression prefixExpression2){\n        final PsiJavaToken sign1 = prefixExpression1.getOperationSign();\n        final PsiJavaToken sign2 = prefixExpression2.getOperationSign();\n        final IElementType tokenType1 = sign1.getTokenType();\n        if(!tokenType1.equals(sign2.getTokenType())){\n            return false;\n        }\n        final PsiExpression operand1 = prefixExpression1.getOperand();\n        final PsiExpression operand2 = prefixExpression2.getOperand();\n        return expressionsAreEquivalent(operand1, operand2);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean declarationStatementsAreEquivalent(PsiDeclarationStatement statement1,\n                                                              PsiDeclarationStatement statement2){\n        final PsiElement[] elements1 = statement1.getDeclaredElements();\n        final List<PsiLocalVariable> vars1 = new ArrayList<PsiLocalVariable>(elements1.length);\n        for(PsiElement anElement : elements1){\n            if(anElement instanceof PsiLocalVariable){\n                vars1.add((PsiLocalVariable) anElement);\n            }\n        }\n        final PsiElement[] elements2 = statement2.getDeclaredElements();\n        final List<PsiLocalVariable> vars2 = new ArrayList<PsiLocalVariable>(elements2.length);\n        for(PsiElement anElement : elements2){\n            if(anElement instanceof PsiLocalVariable){\n                vars2.add((PsiLocalVariable) anElement);\n            }\n        }\n        if(vars1.size() != vars2.size()){\n            return false;\n        }\n        for(int i = 0; i < vars1.size(); i++){\n            final PsiLocalVariable var1 = vars1.get(i);\n            final PsiLocalVariable var2 = vars2.get(i);\n            if(localVariableAreEquivalent(var1, var2)){\n                return false;\n            }\n        }\n        return true;\n    }","id":105608,"modified_method":"private static boolean declarationStatementsAreEquivalent(\n            @NotNull PsiDeclarationStatement statement1,\n            @NotNull  PsiDeclarationStatement statement2){\n        final PsiElement[] elements1 = statement1.getDeclaredElements();\n        final List<PsiLocalVariable> vars1 =\n                new ArrayList<PsiLocalVariable>(elements1.length);\n        for(PsiElement anElement : elements1){\n            if(anElement instanceof PsiLocalVariable){\n                vars1.add((PsiLocalVariable) anElement);\n            }\n        }\n        final PsiElement[] elements2 = statement2.getDeclaredElements();\n        final List<PsiLocalVariable> vars2 =\n                new ArrayList<PsiLocalVariable>(elements2.length);\n        for(PsiElement anElement : elements2){\n            if(anElement instanceof PsiLocalVariable){\n                vars2.add((PsiLocalVariable) anElement);\n            }\n        }\n        final int size = vars1.size();\n        if(size != vars2.size()){\n            return false;\n        }\n        for(int i = 0; i < size; i++){\n            final PsiLocalVariable var1 = vars1.get(i);\n            final PsiLocalVariable var2 = vars2.get(i);\n            if(!localVariableAreEquivalent(var1, var2)){\n                return false;\n            }\n        }\n        return true;\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean arrayInitializerExpressionsAreEquivalent(PsiArrayInitializerExpression arrInitExp1,\n                                                                    PsiArrayInitializerExpression arrInitExp2){\n        final PsiExpression[] initializers1 = arrInitExp1.getInitializers();\n        final PsiExpression[] initializers2 = arrInitExp2.getInitializers();\n        return expressionListsAreEquivalent(initializers1, initializers2);\n    }","id":105609,"modified_method":"private static boolean arrayInitializerExpressionsAreEquivalent(\n            @NotNull PsiArrayInitializerExpression arrayInitializerExpression1,\n            @NotNull PsiArrayInitializerExpression arrayInitializerExpression2){\n        final PsiExpression[] initializers1 =\n                arrayInitializerExpression1.getInitializers();\n        final PsiExpression[] initializers2 =\n                arrayInitializerExpression2.getInitializers();\n        return expressionListsAreEquivalent(initializers1, initializers2);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean forEachStatementsAreEquivalent(PsiForeachStatement statement1,\n                                                          PsiForeachStatement statement2){\n        final PsiExpression value1 = statement1.getIteratedValue();\n        final PsiExpression value2 = statement2.getIteratedValue();\n        if(!expressionsAreEquivalent(value1, value2)){\n            return false;\n        }\n        final PsiParameter parameter1 = statement1.getIterationParameter();\n        final PsiParameter parameter2 = statement1.getIterationParameter();\n        if(!parameter1.getName().equals(parameter2.getName())){\n            return false;\n        }\n        if(!parameter1.getType().equals(parameter2.getType())){\n            return false;\n        }\n        final PsiStatement body1 = statement1.getBody();\n        final PsiStatement body2 = statement2.getBody();\n        return statementsAreEquivalent(body1, body2);\n    }","id":105610,"modified_method":"private static boolean forEachStatementsAreEquivalent(\n            @NotNull PsiForeachStatement statement1,\n            @NotNull PsiForeachStatement statement2){\n        final PsiExpression value1 = statement1.getIteratedValue();\n        final PsiExpression value2 = statement2.getIteratedValue();\n        if(!expressionsAreEquivalent(value1, value2)){\n            return false;\n        }\n        final PsiParameter parameter1 = statement1.getIterationParameter();\n        final PsiParameter parameter2 = statement1.getIterationParameter();\n        final String name1 = parameter1.getName();\n        if(name1 == null){\n            return parameter2.getName() == null;\n        }\n        if(!name1.equals(parameter2.getName())){\n            return false;\n        }\n        final PsiType type1 = parameter1.getType();\n        if(!type1.equals(parameter2.getType())){\n            return false;\n        }\n        final PsiStatement body1 = statement1.getBody();\n        final PsiStatement body2 = statement2.getBody();\n        return statementsAreEquivalent(body1, body2);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean binaryExpressionsAreEquivalent(PsiBinaryExpression binaryExp1,\n                                                          PsiBinaryExpression binaryExp2){\n        final PsiJavaToken sign1 = binaryExp1.getOperationSign();\n        final PsiJavaToken sign2 = binaryExp2.getOperationSign();\n        if(!sign1.getTokenType().equals(sign2.getTokenType())){\n            return false;\n        }\n        final PsiExpression lhs1 = binaryExp1.getLOperand();\n        final PsiExpression lhs2 = binaryExp2.getLOperand();\n        final PsiExpression rhs1 = binaryExp1.getROperand();\n        final PsiExpression rhs2 = binaryExp2.getROperand();\n        return expressionsAreEquivalent(lhs1, lhs2)\n                && expressionsAreEquivalent(rhs1, rhs2);\n    }","id":105611,"modified_method":"private static boolean binaryExpressionsAreEquivalent(\n            @NotNull PsiBinaryExpression binaryExpression1,\n            @NotNull PsiBinaryExpression binaryExpression2){\n        final PsiJavaToken sign1 = binaryExpression1.getOperationSign();\n        final PsiJavaToken sign2 = binaryExpression2.getOperationSign();\n        final IElementType tokenType1 = sign1.getTokenType();\n        if(!tokenType1.equals(sign2.getTokenType())){\n            return false;\n        }\n        final PsiExpression lhs1 = binaryExpression1.getLOperand();\n        final PsiExpression lhs2 = binaryExpression2.getLOperand();\n        final PsiExpression rhs1 = binaryExpression1.getROperand();\n        final PsiExpression rhs2 = binaryExpression2.getROperand();\n        return expressionsAreEquivalent(lhs1, lhs2)\n                && expressionsAreEquivalent(rhs1, rhs2);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean localVariableAreEquivalent(PsiLocalVariable var1,\n                                                      PsiLocalVariable var2){\n        final PsiType type1 = var1.getType();\n        final PsiType type2 = var2.getType();\n        if(!typesAreEquivalent(type1, type2)){\n            return false;\n        }\n        final String name1 = var1.getName();\n        final String name2 = var2.getName();\n        if(name1 == null){\n            return name2 == null;\n        }\n        return name1.equals(name2);\n    }","id":105612,"modified_method":"private static boolean localVariableAreEquivalent(\n            @NotNull  PsiLocalVariable localVariable1,\n            @NotNull PsiLocalVariable localVariable2){\n        final PsiType type1 = localVariable1.getType();\n        final PsiType type2 = localVariable2.getType();\n        if(!typesAreEquivalent(type1, type2)){\n            return false;\n        }\n        final String name1 = localVariable1.getName();\n        final String name2 = localVariable2.getName();\n        if(name1 == null){\n            return name2 == null;\n        }\n        if(!name1.equals(name2)){\n            return false;\n        }\n        final PsiExpression initializer1 = localVariable1.getInitializer();\n        final PsiExpression initializer2 = localVariable2.getInitializer();\n        return expressionsAreEquivalent(initializer1, initializer2);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean postfixExpressionsAreEquivalent(PsiPostfixExpression postfixExp1,\n                                                           PsiPostfixExpression postfixExp2){\n        final PsiJavaToken sign1 = postfixExp1.getOperationSign();\n        final PsiJavaToken sign2 = postfixExp2.getOperationSign();\n        if(!sign1.getTokenType().equals(sign2.getTokenType())){\n            return false;\n        }\n        final PsiExpression operand1 = postfixExp1.getOperand();\n        final PsiExpression operand2 = postfixExp2.getOperand();\n        return expressionsAreEquivalent(operand1, operand2);\n    }","id":105613,"modified_method":"private static boolean postfixExpressionsAreEquivalent(\n            @NotNull PsiPostfixExpression postfixExpression1,\n            @NotNull PsiPostfixExpression postfixExpression2){\n        final PsiJavaToken sign1 = postfixExpression1.getOperationSign();\n        final PsiJavaToken sign2 = postfixExpression2.getOperationSign();\n        final IElementType tokenType1 = sign1.getTokenType();\n        if(!tokenType1.equals(sign2.getTokenType())){\n            return false;\n        }\n        final PsiExpression operand1 = postfixExpression1.getOperand();\n        final PsiExpression operand2 = postfixExpression2.getOperand();\n        return expressionsAreEquivalent(operand1, operand2);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean methodCallExpressionsAreEquivalent(PsiMethodCallExpression methodExp1,\n                                                              PsiMethodCallExpression methodExp2){\n        final PsiReferenceExpression methodExpression1 =\n                methodExp1.getMethodExpression();\n        final PsiReferenceExpression methodExpression2 =\n                methodExp2.getMethodExpression();\n        if(!expressionsAreEquivalent(methodExpression1, methodExpression2)){\n            return false;\n        }\n        final PsiExpressionList argumentList1 = methodExp1.getArgumentList();\n        if(argumentList1 == null){\n            return false;\n        }\n        final PsiExpression[] args1 = argumentList1.getExpressions();\n        final PsiExpressionList argumentList2 = methodExp2.getArgumentList();\n        if(argumentList2 == null){\n            return false;\n        }\n        final PsiExpression[] args2 = argumentList2.getExpressions();\n        return expressionListsAreEquivalent(args1, args2);\n    }","id":105614,"modified_method":"private static boolean methodCallExpressionsAreEquivalent(\n            @NotNull PsiMethodCallExpression methodCallExpression1,\n            @NotNull PsiMethodCallExpression methodCallExpression2){\n        final PsiReferenceExpression methodExpression1 =\n                methodCallExpression1.getMethodExpression();\n        final PsiReferenceExpression methodExpression2 =\n                methodCallExpression2.getMethodExpression();\n        if(!expressionsAreEquivalent(methodExpression1, methodExpression2)){\n            return false;\n        }\n        final PsiExpressionList argumentList1 =\n                methodCallExpression1.getArgumentList();\n        final PsiExpression[] args1 = argumentList1.getExpressions();\n        final PsiExpressionList argumentList2 =\n                methodCallExpression2.getArgumentList();\n        final PsiExpression[] args2 = argumentList2.getExpressions();\n        return expressionListsAreEquivalent(args1, args2);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean newExpressionsAreEquivalent(PsiNewExpression newExp1,\n                                                       PsiNewExpression newExp2){\n        final PsiExpression[] arrayDimensions1 = newExp1.getArrayDimensions();\n        final PsiExpression[] arrayDimensions2 = newExp2.getArrayDimensions();\n        if(!expressionListsAreEquivalent(arrayDimensions1, arrayDimensions2)){\n            return false;\n        }\n        final PsiArrayInitializerExpression arrayInitializer1 =\n                newExp1.getArrayInitializer();\n        final PsiArrayInitializerExpression arrayInitializer2 =\n                newExp2.getArrayInitializer();\n        if(!expressionsAreEquivalent(arrayInitializer1, arrayInitializer2)){\n            return false;\n        }\n        final PsiExpression qualifier1 = newExp1.getQualifier();\n        final PsiExpression qualifier2 = newExp2.getQualifier();\n        if(!expressionsAreEquivalent(qualifier1, qualifier2)){\n            return false;\n        }\n        final PsiExpressionList argumentList1 = newExp1.getArgumentList();\n        final PsiExpression[] args1 = argumentList1 == null?null:\n                argumentList1.getExpressions();\n        final PsiExpressionList argumentList2 = newExp2.getArgumentList();\n        final PsiExpression[] args2 = argumentList2 == null?null:\n                argumentList2.getExpressions();\n        return expressionListsAreEquivalent(args1, args2);\n    }","id":105615,"modified_method":"private static boolean newExpressionsAreEquivalent(\n            @NotNull PsiNewExpression newExpression1,\n            @NotNull PsiNewExpression newExpression2){\n        final PsiJavaCodeReferenceElement classReference1 =\n                newExpression1.getClassReference();\n        final PsiJavaCodeReferenceElement classReference2 =\n                newExpression2.getClassReference();\n        if(classReference1 == null || classReference2 == null){\n            return false;\n        }\n        final String text = classReference1.getText();\n        if(!text.equals(classReference2.getText())){\n            return false;\n        }\n        final PsiExpression[] arrayDimensions1 =\n                newExpression1.getArrayDimensions();\n        final PsiExpression[] arrayDimensions2 =\n                newExpression2.getArrayDimensions();\n        if(!expressionListsAreEquivalent(arrayDimensions1, arrayDimensions2)){\n            return false;\n        }\n        final PsiArrayInitializerExpression arrayInitializer1 =\n                newExpression1.getArrayInitializer();\n        final PsiArrayInitializerExpression arrayInitializer2 =\n                newExpression2.getArrayInitializer();\n        if(!expressionsAreEquivalent(arrayInitializer1, arrayInitializer2)){\n            return false;\n        }\n        final PsiExpression qualifier1 = newExpression1.getQualifier();\n        final PsiExpression qualifier2 = newExpression2.getQualifier();\n        if(!expressionsAreEquivalent(qualifier1, qualifier2)){\n            return false;\n        }\n        final PsiExpressionList argumentList1 = newExpression1.getArgumentList();\n        final PsiExpression[] args1;\n        if(argumentList1 == null){\n            args1 = null;\n        } else{\n            args1 = argumentList1.getExpressions();\n        }\n        final PsiExpressionList argumentList2 = newExpression2.getArgumentList();\n        final PsiExpression[] args2;\n        if(argumentList2 == null){\n            args2 = null;\n        } else{\n            args2 = argumentList2.getExpressions();\n        }\n        return expressionListsAreEquivalent(args1, args2);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean statementsAreEquivalent(PsiStatement exp1,\n                                                  PsiStatement exp2){\n        if(exp1 == null && exp2 == null){\n            return true;\n        }\n        if(exp1 == null || exp2 == null){\n            return false;\n        }\n        final int type1 = getStatementType(exp1);\n        final int type2 = getStatementType(exp2);\n        if(type1 != type2){\n            return false;\n        }\n        switch(type1){\n            case ASSERT_STATEMENT:\n                return assertStatementsAreEquivalent((PsiAssertStatement) exp1,\n                                                     (PsiAssertStatement) exp2);\n            case BLOCK_STATEMENT:\n                return blockStatementsAreEquivalent((PsiBlockStatement) exp1,\n                                                    (PsiBlockStatement) exp2);\n            case BREAK_STATEMENT:\n                return breakStatementsAreEquivalent((PsiBreakStatement) exp1,\n                                                    (PsiBreakStatement) exp2);\n            case CONTINUE_STATEMENT:\n                return continueStatementsAreEquivalent((PsiContinueStatement) exp1,\n                                                       (PsiContinueStatement) exp2);\n            case DECLARATION_STATEMENT:\n                return declarationStatementsAreEquivalent((PsiDeclarationStatement) exp1,\n                                                          (PsiDeclarationStatement) exp2);\n            case DO_WHILE_STATEMENT:\n                return doWhileStatementsAreEquivalent((PsiDoWhileStatement) exp1,\n                                                      (PsiDoWhileStatement) exp2);\n            case EMPTY_STATEMENT:\n                return true;\n            case EXPRESSION_LIST_STATEMENT:\n                return expressionListStatementsAreEquivalent((PsiExpressionListStatement) exp1,\n                                                             (PsiExpressionListStatement) exp2);\n            case EXPRESSION_STATEMENT:\n                return expressionStatementsAreEquivalent((PsiExpressionStatement) exp1,\n                                                         (PsiExpressionStatement) exp2);\n            case FOR_STATEMENT:\n                return forStatementsAreEquivalent((PsiForStatement) exp1,\n                                                  (PsiForStatement) exp2);\n            case FOR_EACH_STATEMENT:\n                return forEachStatementsAreEquivalent((PsiForeachStatement) exp1,\n                                                      (PsiForeachStatement) exp2);\n            case IF_STATEMENT:\n                return ifStatementsAreEquivalent((PsiIfStatement) exp1,\n                                                 (PsiIfStatement) exp2);\n            case LABELED_STATEMENT:\n                return labeledStatementsAreEquivalent((PsiLabeledStatement) exp1,\n                                                      (PsiLabeledStatement) exp2);\n            case RETURN_STATEMENT:\n                return returnStatementsAreEquivalent((PsiReturnStatement) exp1,\n                                                     (PsiReturnStatement) exp2);\n            case SWITCH_LABEL_STATEMENT:\n                return switchLabelStatementsAreEquivalent((PsiSwitchLabelStatement) exp1,\n                                                          (PsiSwitchLabelStatement) exp2);\n            case SWITCH_STATEMENT:\n                return switchStatementsAreEquivalent((PsiSwitchStatement) exp1,\n                                                     (PsiSwitchStatement) exp2);\n            case SYNCHRONIZED_STATEMENT:\n                return synchronizedStatementsAreEquivalent((PsiSynchronizedStatement) exp1,\n                                                           (PsiSynchronizedStatement) exp2);\n            case THROW_STATEMENT:\n                return throwStatementsAreEquivalent((PsiThrowStatement) exp1,\n                                                    (PsiThrowStatement) exp2);\n            case TRY_STATEMENT:\n                return tryStatementsAreEquivalent((PsiTryStatement) exp1,\n                                                  (PsiTryStatement) exp2);\n            case WHILE_STATEMENT:\n                return whileStatementsAreEquivalent((PsiWhileStatement) exp1,\n                                                    (PsiWhileStatement) exp2);\n            default:\n                return false;\n        }\n    }","id":105616,"modified_method":"public static boolean statementsAreEquivalent(\n            @Nullable PsiStatement statement1,\n            @Nullable PsiStatement statement2){\n        if(statement1 == null && statement2 == null){\n            return true;\n        }\n        if(statement1 == null || statement2 == null){\n            return false;\n        }\n        final int type1 = getStatementType(statement1);\n        final int type2 = getStatementType(statement2);\n        if(type1 != type2){\n            return false;\n        }\n        switch(type1){\n            case ASSERT_STATEMENT:\n                return assertStatementsAreEquivalent(\n                        (PsiAssertStatement)statement1,\n                        (PsiAssertStatement)statement2);\n            case BLOCK_STATEMENT:\n                return blockStatementsAreEquivalent(\n                        (PsiBlockStatement)statement1,\n                        (PsiBlockStatement)statement2);\n            case BREAK_STATEMENT:\n                return breakStatementsAreEquivalent(\n                        (PsiBreakStatement)statement1,\n                        (PsiBreakStatement)statement2);\n            case CONTINUE_STATEMENT:\n                return continueStatementsAreEquivalent(\n                        (PsiContinueStatement)statement1,\n                        (PsiContinueStatement)statement2);\n            case DECLARATION_STATEMENT:\n                return declarationStatementsAreEquivalent(\n                        (PsiDeclarationStatement)statement1,\n                        (PsiDeclarationStatement)statement2);\n            case DO_WHILE_STATEMENT:\n                return doWhileStatementsAreEquivalent(\n                        (PsiDoWhileStatement)statement1,\n                        (PsiDoWhileStatement)statement2);\n            case EMPTY_STATEMENT:\n                return true;\n            case EXPRESSION_LIST_STATEMENT:\n                return expressionListStatementsAreEquivalent(\n                        (PsiExpressionListStatement)statement1,\n                        (PsiExpressionListStatement)statement2);\n            case EXPRESSION_STATEMENT:\n                return expressionStatementsAreEquivalent(\n                        (PsiExpressionStatement)statement1,\n                        (PsiExpressionStatement)statement2);\n            case FOR_STATEMENT:\n                return forStatementsAreEquivalent(\n                        (PsiForStatement)statement1,\n                        (PsiForStatement)statement2);\n            case FOR_EACH_STATEMENT:\n                return forEachStatementsAreEquivalent(\n                        (PsiForeachStatement)statement1,\n                        (PsiForeachStatement)statement2);\n            case IF_STATEMENT:\n                return ifStatementsAreEquivalent(\n                        (PsiIfStatement) statement1,\n                        (PsiIfStatement) statement2);\n            case LABELED_STATEMENT:\n                return labeledStatementsAreEquivalent(\n                        (PsiLabeledStatement)statement1,\n                        (PsiLabeledStatement)statement2);\n            case RETURN_STATEMENT:\n                return returnStatementsAreEquivalent(\n                        (PsiReturnStatement)statement1,\n                        (PsiReturnStatement)statement2);\n            case SWITCH_LABEL_STATEMENT:\n                return switchLabelStatementsAreEquivalent(\n                        (PsiSwitchLabelStatement)statement1,\n                        (PsiSwitchLabelStatement)statement2);\n            case SWITCH_STATEMENT:\n                return switchStatementsAreEquivalent(\n                        (PsiSwitchStatement)statement1,\n                        (PsiSwitchStatement)statement2);\n            case SYNCHRONIZED_STATEMENT:\n                return synchronizedStatementsAreEquivalent(\n                        (PsiSynchronizedStatement)statement1,\n                        (PsiSynchronizedStatement)statement2);\n            case THROW_STATEMENT:\n                return throwStatementsAreEquivalent(\n                        (PsiThrowStatement)statement1,\n                        (PsiThrowStatement)statement2);\n            case TRY_STATEMENT:\n                return tryStatementsAreEquivalent(\n                        (PsiTryStatement)statement1,\n                        (PsiTryStatement)statement2);\n            case WHILE_STATEMENT:\n                return whileStatementsAreEquivalent(\n                        (PsiWhileStatement)statement1,\n                        (PsiWhileStatement)statement2);\n            default:\n                final String text1 = statement1.getText();\n                final String text2 = statement2.getText();\n                return text1.equals(text2);\n        }\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean arrayAccessExpressionsAreEquivalent(PsiArrayAccessExpression arrAccessExp2,\n                                                               PsiArrayAccessExpression arrAccessExp1){\n        final PsiExpression arrayExpression2 =\n                arrAccessExp2.getArrayExpression();\n        final PsiExpression arrayExpression1 =\n                arrAccessExp1.getArrayExpression();\n        final PsiExpression indexExpression2 =\n                arrAccessExp2.getIndexExpression();\n        final PsiExpression indexExpression1 =\n                arrAccessExp1.getIndexExpression();\n        return expressionsAreEquivalent(arrayExpression2, arrayExpression1)\n                &&\n                expressionsAreEquivalent(indexExpression2,\n                                         indexExpression1);\n    }","id":105617,"modified_method":"private static boolean arrayAccessExpressionsAreEquivalent(\n            @NotNull PsiArrayAccessExpression arrayAccessExpression1,\n            @NotNull PsiArrayAccessExpression arrayAccessExpression2){\n        final PsiExpression arrayExpression2 =\n                arrayAccessExpression1.getArrayExpression();\n        final PsiExpression arrayExpression1 =\n                arrayAccessExpression2.getArrayExpression();\n        final PsiExpression indexExpression2 =\n                arrayAccessExpression1.getIndexExpression();\n        final PsiExpression indexExpression1 =\n                arrayAccessExpression2.getIndexExpression();\n        return expressionsAreEquivalent(arrayExpression2, arrayExpression1)\n                && expressionsAreEquivalent(indexExpression2, indexExpression1);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean labeledStatementsAreEquivalent(PsiLabeledStatement statement1,\n                                                          PsiLabeledStatement statement2){\n\n        final PsiIdentifier identifier1 = statement1.getLabelIdentifier();\n        final PsiIdentifier identifier2 = statement2.getLabelIdentifier();\n        if(identifier1 == null){\n            return identifier2 == null;\n        }\n        if(identifier2 == null){\n            return false;\n        }\n        final String text1 = identifier1.getText();\n        final String text2 = identifier2.getText();\n        return text1.equals(text2);\n    }","id":105618,"modified_method":"private static boolean labeledStatementsAreEquivalent(\n            @NotNull PsiLabeledStatement statement1,\n            @NotNull PsiLabeledStatement statement2){\n        final PsiIdentifier identifier1 = statement1.getLabelIdentifier();\n        final PsiIdentifier identifier2 = statement2.getLabelIdentifier();\n        final String text1 = identifier1.getText();\n        final String text2 = identifier2.getText();\n        return text1.equals(text2);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean expressionsAreEquivalent(PsiExpression exp1,\n                                                   PsiExpression exp2){\n        if(exp1 == null && exp2 == null){\n            return true;\n        }\n        if(exp1 == null || exp2 == null){\n            return false;\n        }\n        PsiExpression expToCompare1 = exp1;\n        while(expToCompare1 instanceof PsiParenthesizedExpression){\n            expToCompare1 = ((PsiParenthesizedExpression) expToCompare1).getExpression();\n        }\n        PsiExpression expToCompare2 = exp2;\n        while(expToCompare2 instanceof PsiParenthesizedExpression){\n            expToCompare2 = ((PsiParenthesizedExpression) expToCompare2).getExpression();\n        }\n        final int type1 = getExpressionType(expToCompare1);\n        final int type2 = getExpressionType(expToCompare2);\n        if(type1 != type2){\n            return false;\n        }\n        switch(type1){\n            case THIS_EXPRESSION:\n            case SUPER_EXPRESSION:\n                return true;\n            case LITERAL_EXPRESSION:\n            case CLASS_OBJECT_EXPRESSION:\n            case REFERENCE_EXPRESSION:\n                final String text1 = expToCompare1.getText();\n                final String text2 = expToCompare2.getText();\n                return text1.equals(text2);\n            case METHOD_CALL_EXPRESSION:\n                return methodCallExpressionsAreEquivalent((PsiMethodCallExpression) expToCompare1,\n                                                          (PsiMethodCallExpression) expToCompare2);\n            case NEW_EXPRESSION:\n                return newExpressionsAreEquivalent((PsiNewExpression) expToCompare1,\n                                                   (PsiNewExpression) expToCompare2);\n            case ARRAY_INITIALIZER_EXPRESSION:\n                return arrayInitializerExpressionsAreEquivalent((PsiArrayInitializerExpression) expToCompare1,\n                                                                (PsiArrayInitializerExpression) expToCompare2);\n            case TYPECAST_EXPRESSION:\n                return typecastExpressionsAreEquivalent((PsiTypeCastExpression) expToCompare2,\n                                                        (PsiTypeCastExpression) expToCompare1);\n            case ARRAY_ACCESS_EXPRESSION:\n                return arrayAccessExpressionsAreEquivalent((PsiArrayAccessExpression) expToCompare2,\n                                                           (PsiArrayAccessExpression) expToCompare1);\n            case PREFIX_EXPRESSION:\n                return prefixExpressionsAreEquivalent((PsiPrefixExpression) expToCompare1,\n                                                      (PsiPrefixExpression) expToCompare2);\n            case POSTFIX_EXPRESSION:\n                return postfixExpressionsAreEquivalent((PsiPostfixExpression) expToCompare1,\n                                                       (PsiPostfixExpression) expToCompare2);\n            case BINARY_EXPRESSION:\n                return binaryExpressionsAreEquivalent((PsiBinaryExpression) expToCompare1,\n                                                      (PsiBinaryExpression) expToCompare2);\n            case ASSIGNMENT_EXPRESSION:\n                return assignmentExpressionsAreEquivalent((PsiAssignmentExpression) expToCompare1,\n                                                          (PsiAssignmentExpression) expToCompare2);\n            case CONDITIONAL_EXPRESSION:\n                return conditionalExpressionsAreEquivalent((PsiConditionalExpression) expToCompare1,\n                                                           (PsiConditionalExpression) expToCompare2);\n            default:\n                return false;\n        }\n    }","id":105619,"modified_method":"public static boolean expressionsAreEquivalent(\n            @Nullable PsiExpression expression1,\n            @Nullable PsiExpression expression2){\n        if(expression1 == null && expression2 == null){\n            return true;\n        }\n        if(expression1 == null || expression2 == null){\n            return false;\n        }\n        PsiExpression expToCompare1 = expression1;\n        while(expToCompare1 instanceof PsiParenthesizedExpression){\n            final PsiParenthesizedExpression parenthesizedExpression =\n                    (PsiParenthesizedExpression)expToCompare1;\n            expToCompare1 = parenthesizedExpression.getExpression();\n        }\n        PsiExpression expToCompare2 = expression2;\n        while(expToCompare2 instanceof PsiParenthesizedExpression){\n            final PsiParenthesizedExpression parenthesizedExpression =\n                    (PsiParenthesizedExpression)expToCompare2;\n            expToCompare2 = parenthesizedExpression.getExpression();\n        }\n        if(expToCompare1 == null && expToCompare2 == null){\n            return true;\n        }\n        if(expToCompare1 == null || expToCompare2 == null){\n            return false;\n        }\n        final int type1 = getExpressionType(expToCompare1);\n        final int type2 = getExpressionType(expToCompare2);\n        if(type1 != type2){\n            return false;\n        }\n        switch(type1){\n            case THIS_EXPRESSION:\n            case SUPER_EXPRESSION:\n                return true;\n            case LITERAL_EXPRESSION:\n            case CLASS_OBJECT_EXPRESSION:\n            case REFERENCE_EXPRESSION:\n                final String text1 = expToCompare1.getText();\n                final String text2 = expToCompare2.getText();\n                return text1.equals(text2);\n            case METHOD_CALL_EXPRESSION:\n                return methodCallExpressionsAreEquivalent(\n                        (PsiMethodCallExpression) expToCompare1,\n                        (PsiMethodCallExpression) expToCompare2);\n            case NEW_EXPRESSION:\n                return newExpressionsAreEquivalent(\n                        (PsiNewExpression) expToCompare1,\n                        (PsiNewExpression) expToCompare2);\n            case ARRAY_INITIALIZER_EXPRESSION:\n                return arrayInitializerExpressionsAreEquivalent(\n                        (PsiArrayInitializerExpression) expToCompare1,\n                        (PsiArrayInitializerExpression) expToCompare2);\n            case TYPECAST_EXPRESSION:\n                return typecastExpressionsAreEquivalent(\n                        (PsiTypeCastExpression) expToCompare2,\n                        (PsiTypeCastExpression) expToCompare1);\n            case ARRAY_ACCESS_EXPRESSION:\n                return arrayAccessExpressionsAreEquivalent(\n                        (PsiArrayAccessExpression) expToCompare2,\n                        (PsiArrayAccessExpression) expToCompare1);\n            case PREFIX_EXPRESSION:\n                return prefixExpressionsAreEquivalent(\n                        (PsiPrefixExpression) expToCompare1,\n                        (PsiPrefixExpression) expToCompare2);\n            case POSTFIX_EXPRESSION:\n                return postfixExpressionsAreEquivalent(\n                        (PsiPostfixExpression) expToCompare1,\n                        (PsiPostfixExpression) expToCompare2);\n            case BINARY_EXPRESSION:\n                return binaryExpressionsAreEquivalent(\n                        (PsiBinaryExpression) expToCompare1,\n                        (PsiBinaryExpression) expToCompare2);\n            case ASSIGNMENT_EXPRESSION:\n                return assignmentExpressionsAreEquivalent(\n                        (PsiAssignmentExpression) expToCompare1,\n                        (PsiAssignmentExpression) expToCompare2);\n            case CONDITIONAL_EXPRESSION:\n                return conditionalExpressionsAreEquivalent(\n                        (PsiConditionalExpression) expToCompare1,\n                        (PsiConditionalExpression) expToCompare2);\n            default:\n                return false;\n        }\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static int getExpressionType(PsiExpression exp){\n        if(exp instanceof PsiThisExpression){\n            return THIS_EXPRESSION;\n        }\n        if(exp instanceof PsiLiteralExpression){\n            return LITERAL_EXPRESSION;\n        }\n        if(exp instanceof PsiClassObjectAccessExpression){\n            return CLASS_OBJECT_EXPRESSION;\n        }\n        if(exp instanceof PsiReferenceExpression){\n            return REFERENCE_EXPRESSION;\n        }\n        if(exp instanceof PsiSuperExpression){\n            return SUPER_EXPRESSION;\n        }\n        if(exp instanceof PsiMethodCallExpression){\n            return METHOD_CALL_EXPRESSION;\n        }\n        if(exp instanceof PsiNewExpression){\n            return NEW_EXPRESSION;\n        }\n        if(exp instanceof PsiArrayInitializerExpression){\n            return ARRAY_INITIALIZER_EXPRESSION;\n        }\n        if(exp instanceof PsiTypeCastExpression){\n            return TYPECAST_EXPRESSION;\n        }\n        if(exp instanceof PsiArrayAccessExpression){\n            return ARRAY_ACCESS_EXPRESSION;\n        }\n        if(exp instanceof PsiPrefixExpression){\n            return PREFIX_EXPRESSION;\n        }\n        if(exp instanceof PsiPostfixExpression){\n            return POSTFIX_EXPRESSION;\n        }\n        if(exp instanceof PsiBinaryExpression){\n            return BINARY_EXPRESSION;\n        }\n        if(exp instanceof PsiConditionalExpression){\n            return CONDITIONAL_EXPRESSION;\n        }\n        if(exp instanceof PsiAssignmentExpression){\n            return ASSIGNMENT_EXPRESSION;\n        }\n        return -1;\n    }","id":105620,"modified_method":"private static int getExpressionType(@Nullable PsiExpression expression){\n        if(expression instanceof PsiThisExpression){\n            return THIS_EXPRESSION;\n        }\n        if(expression instanceof PsiLiteralExpression){\n            return LITERAL_EXPRESSION;\n        }\n        if(expression instanceof PsiClassObjectAccessExpression){\n            return CLASS_OBJECT_EXPRESSION;\n        }\n        if(expression instanceof PsiReferenceExpression){\n            return REFERENCE_EXPRESSION;\n        }\n        if(expression instanceof PsiSuperExpression){\n            return SUPER_EXPRESSION;\n        }\n        if(expression instanceof PsiMethodCallExpression){\n            return METHOD_CALL_EXPRESSION;\n        }\n        if(expression instanceof PsiNewExpression){\n            return NEW_EXPRESSION;\n        }\n        if(expression instanceof PsiArrayInitializerExpression){\n            return ARRAY_INITIALIZER_EXPRESSION;\n        }\n        if(expression instanceof PsiTypeCastExpression){\n            return TYPECAST_EXPRESSION;\n        }\n        if(expression instanceof PsiArrayAccessExpression){\n            return ARRAY_ACCESS_EXPRESSION;\n        }\n        if(expression instanceof PsiPrefixExpression){\n            return PREFIX_EXPRESSION;\n        }\n        if(expression instanceof PsiPostfixExpression){\n            return POSTFIX_EXPRESSION;\n        }\n        if(expression instanceof PsiBinaryExpression){\n            return BINARY_EXPRESSION;\n        }\n        if(expression instanceof PsiConditionalExpression){\n            return CONDITIONAL_EXPRESSION;\n        }\n        if(expression instanceof PsiAssignmentExpression){\n            return ASSIGNMENT_EXPRESSION;\n        }\n        return -1;\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean containsErrorElement(){\n            return containsErrorElement;\n        }","id":105621,"modified_method":"public boolean containsErrorElement(){\n            return containsErrorElement;\n        }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void processIntention(PsiElement element)\n    throws IncorrectOperationException {\n    final PsiMethodCallExpression call = (PsiMethodCallExpression)element;\n    final PsiReferenceExpression methodExpression =\n      call.getMethodExpression();\n    @NonNls final String fromMethodName = methodExpression.getReferenceName();\n    @NonNls final String toMethodName;\n    if (\"assertTrue\".equals(fromMethodName)) {\n      toMethodName = \"assertFalse\";\n    }\n    else {\n      toMethodName = \"assertTrue\";\n    }\n    final PsiElement qualifier =\n      methodExpression.getQualifier();\n\n    final String qualifierText;\n    if (qualifier == null) {\n        qualifierText = \"\";\n    }\n    else {\n        qualifierText = qualifier.getText() + '.';\n    }\n    final PsiExpressionList argumentList = call.getArgumentList();\n    assert argumentList != null;\n    final PsiExpression[] args = argumentList.getExpressions();\n    final String callString;\n    if (args.length == 1) {\n      final PsiExpression arg = args[0];\n      callString = qualifierText + toMethodName + '(' +\n                   BoolUtils.getNegatedExpressionText(arg) + ')';\n    }\n    else {\n      final PsiExpression arg = args[1];\n      callString = qualifierText + toMethodName + '(' + args[0].getText() + ',' +\n        BoolUtils.getNegatedExpressionText(arg) +\n        ')';\n    }\n    replaceExpression(callString, call);\n  }","id":105622,"modified_method":"public void processIntention(PsiElement element)\n            throws IncorrectOperationException {\n        final PsiMethodCallExpression call = (PsiMethodCallExpression)element;\n        final PsiReferenceExpression methodExpression =\n                call.getMethodExpression();\n        @NonNls final String fromMethodName =\n                methodExpression.getReferenceName();\n        @NonNls final String toMethodName;\n        if (\"assertTrue\".equals(fromMethodName)) {\n            toMethodName = \"assertFalse\";\n        } else {\n            toMethodName = \"assertTrue\";\n        }\n        final PsiElement qualifier =\n                methodExpression.getQualifier();\n        final String qualifierText;\n        if (qualifier == null) {\n            qualifierText = \"\";\n        } else {\n            qualifierText = qualifier.getText() + '.';\n        }\n        final PsiExpressionList argumentList = call.getArgumentList();\n        final PsiExpression[] args = argumentList.getExpressions();\n        final String callString;\n        if (args.length == 1) {\n            final PsiExpression arg = args[0];\n            callString = qualifierText + toMethodName + '(' +\n                    BoolUtils.getNegatedExpressionText(arg) + ')';\n        } else {\n            final PsiExpression arg = args[1];\n            callString = qualifierText + toMethodName + '(' +\n                    args[0].getText() + ',' +\n                    BoolUtils.getNegatedExpressionText(arg) + ')';\n        }\n        replaceExpression(callString, call);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean isFileReadOnly(Project project, PsiFile file){\n        final VirtualFile virtualFile = file.getVirtualFile();\n        return ReadonlyStatusHandler.getInstance(project)\n                .ensureFilesWritable(new VirtualFile[]{virtualFile})\n                .hasReadonlyFiles();\n    }","id":105623,"modified_method":"private static boolean isFileReadOnly(Project project, PsiFile file){\n        final VirtualFile virtualFile = file.getVirtualFile();\n        final ReadonlyStatusHandler readonlyStatusHandler =\n                ReadonlyStatusHandler.getInstance(project);\n        final ReadonlyStatusHandler.OperationStatus operationStatus =\n                readonlyStatusHandler.ensureFilesWritable(virtualFile);\n        return operationStatus.hasReadonlyFiles();\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected static void replaceExpressionWithNegatedExpressionString(String newExpression,\n                                                                       PsiExpression exp)\n            throws IncorrectOperationException{\n        final PsiManager mgr = exp.getManager();\n        final PsiElementFactory factory = mgr.getElementFactory();\n\n        PsiExpression expressionToReplace = exp;\n        final String expString;\n        if(BoolUtils.isNegated(exp)){\n            expressionToReplace = BoolUtils.findNegation(exp);\n            expString = newExpression;\n        } else{\n            expString = \"!(\" + newExpression + ')';\n        }\n        final PsiExpression newCall =\n                factory.createExpressionFromText(expString, null);\n        assert expressionToReplace != null;\n        final PsiElement insertedElement = expressionToReplace.replace(newCall);\n        final CodeStyleManager codeStyleManager = mgr.getCodeStyleManager();\n        codeStyleManager.reformat(insertedElement);\n    }","id":105624,"modified_method":"protected static void replaceExpressionWithNegatedExpressionString(\n            @NotNull String newExpression,\n            @NotNull PsiExpression expression)\n            throws IncorrectOperationException{\n        final PsiManager mgr = expression.getManager();\n        final PsiElementFactory factory = mgr.getElementFactory();\n\n        PsiExpression expressionToReplace = expression;\n        final String expString;\n        if(BoolUtils.isNegated(expression)){\n            expressionToReplace = BoolUtils.findNegation(expression);\n            expString = newExpression;\n        } else{\n            expString = \"!(\" + newExpression + ')';\n        }\n        final PsiExpression newCall =\n                factory.createExpressionFromText(expString, null);\n        assert expressionToReplace != null;\n        final PsiElement insertedElement = expressionToReplace.replace(newCall);\n        final CodeStyleManager codeStyleManager = mgr.getCodeStyleManager();\n        codeStyleManager.reformat(insertedElement);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected static void replaceExpression(@NotNull String newExpression,\n                                            @NotNull PsiExpression exp)\n            throws IncorrectOperationException{\n        final PsiManager mgr = exp.getManager();\n        final PsiElementFactory factory = mgr.getElementFactory();\n        final PsiExpression newCall =\n                factory.createExpressionFromText(newExpression, null);\n        final PsiElement insertedElement = exp.replace(newCall);\n        final CodeStyleManager codeStyleManager = mgr.getCodeStyleManager();\n        codeStyleManager.reformat(insertedElement);\n    }","id":105625,"modified_method":"protected static void replaceExpression(@NotNull String newExpression,\n                                            @NotNull PsiExpression expression)\n            throws IncorrectOperationException{\n        final PsiManager mgr = expression.getManager();\n        final PsiElementFactory factory = mgr.getElementFactory();\n        final PsiExpression newCall =\n                factory.createExpressionFromText(newExpression, null);\n        final PsiElement insertedElement = expression.replace(newCall);\n        final CodeStyleManager codeStyleManager = mgr.getCodeStyleManager();\n        codeStyleManager.reformat(insertedElement);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected static void replaceExpressionWithNegatedExpression(@NotNull PsiExpression newExpression,\n                                                                 @NotNull PsiExpression exp)\n            throws IncorrectOperationException{\n        final PsiManager mgr = exp.getManager();\n        final PsiElementFactory factory = mgr.getElementFactory();\n\n        PsiExpression expressionToReplace = exp;\n        final String newExpressionText = newExpression.getText();\n        final String expString;\n        if(BoolUtils.isNegated(exp)){\n            expressionToReplace = BoolUtils.findNegation(exp);\n            expString = newExpressionText;\n        } else if(ComparisonUtils.isComparison(newExpression)){\n            final PsiBinaryExpression binaryExpression =\n                    (PsiBinaryExpression) newExpression;\n            final PsiJavaToken sign = binaryExpression.getOperationSign();\n            final String operator = sign.getText();\n            final String negatedComparison =\n                    ComparisonUtils.getNegatedComparison(operator);\n            final PsiExpression lhs = binaryExpression.getLOperand();\n            final PsiExpression rhs = binaryExpression.getROperand();\n            assert rhs != null;\n            expString = lhs.getText() + negatedComparison + rhs.getText();\n        } else{\n            if(ParenthesesUtils.getPrecendence(newExpression) >\n               ParenthesesUtils.PREFIX_PRECEDENCE){\n                expString = \"!(\" + newExpressionText + ')';\n            } else{\n                expString = '!' + newExpressionText;\n            }\n        }\n        final PsiExpression newCall =\n                factory.createExpressionFromText(expString, null);\n        assert expressionToReplace != null;\n        final PsiElement insertedElement = expressionToReplace.replace(newCall);\n        final CodeStyleManager codeStyleManager = mgr.getCodeStyleManager();\n        codeStyleManager.reformat(insertedElement);\n    }","id":105626,"modified_method":"protected static void replaceExpressionWithNegatedExpression(\n            @NotNull PsiExpression newExpression,\n            @NotNull PsiExpression expression)\n            throws IncorrectOperationException{\n        final PsiManager mgr = expression.getManager();\n        final PsiElementFactory factory = mgr.getElementFactory();\n\n        PsiExpression expressionToReplace = expression;\n        final String newExpressionText = newExpression.getText();\n        final String expString;\n        if(BoolUtils.isNegated(expression)){\n            expressionToReplace = BoolUtils.findNegation(expression);\n            expString = newExpressionText;\n        } else if(ComparisonUtils.isComparison(newExpression)){\n            final PsiBinaryExpression binaryExpression =\n                    (PsiBinaryExpression) newExpression;\n            final PsiJavaToken sign = binaryExpression.getOperationSign();\n            final String operator = sign.getText();\n            final String negatedComparison =\n                    ComparisonUtils.getNegatedComparison(operator);\n            final PsiExpression lhs = binaryExpression.getLOperand();\n            final PsiExpression rhs = binaryExpression.getROperand();\n            assert rhs != null;\n            expString = lhs.getText() + negatedComparison + rhs.getText();\n        } else{\n            if(ParenthesesUtils.getPrecendence(newExpression) >\n                    ParenthesesUtils.PREFIX_PRECEDENCE){\n                expString = \"!(\" + newExpressionText + ')';\n            } else{\n                expString = '!' + newExpressionText;\n            }\n        }\n        final PsiExpression newCall =\n                factory.createExpressionFromText(expString, null);\n        assert expressionToReplace != null;\n        final PsiElement insertedElement = expressionToReplace.replace(newCall);\n        final CodeStyleManager codeStyleManager = mgr.getCodeStyleManager();\n        codeStyleManager.reformat(insertedElement);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private String getPrefix() {\n      final String name = this.getClass().getSimpleName();\n      StringBuffer buf = new StringBuffer(name.length() + 10);\n      buf.append(Character.toLowerCase(name.charAt(0)));\n      for (int i = 1; i < name.length(); i++){\n        final char c = name.charAt(i);\n        if (Character.isUpperCase(c)){\n          buf.append('.').append(Character.toLowerCase(c));\n        } else {\n          buf.append(c);\n        }\n      }\n      return buf.toString();\n    }","id":105627,"modified_method":"private String getPrefix() {\n        final Class<? extends Intention> aClass = getClass();\n        final String name = aClass.getSimpleName();\n        final StringBuffer buffer = new StringBuffer(name.length() + 10);\n        buffer.append(Character.toLowerCase(name.charAt(0)));\n        for (int i = 1; i < name.length(); i++){\n            final char c = name.charAt(i);\n            if (Character.isUpperCase(c)){\n                buffer.append('.');\n                buffer.append(Character.toLowerCase(c));\n            } else {\n                buffer.append(c);\n            }\n        }\n        return buffer.toString();\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void processIntention(PsiElement element)\n    throws IncorrectOperationException {\n    final PsiJavaToken token = (PsiJavaToken)element;\n    final PsiIfStatement parentStatement =\n      (PsiIfStatement)token.getParent();\n    assert parentStatement != null;\n    final PsiBlockStatement elseBranch =\n      (PsiBlockStatement)parentStatement.getElseBranch();\n    final PsiCodeBlock elseBranchBlock = elseBranch.getCodeBlock();\n    final PsiStatement elseBranchContents =\n      elseBranchBlock.getStatements()[0];\n    replaceStatement(elseBranchContents.getText(), elseBranch);\n  }","id":105628,"modified_method":"public void processIntention(PsiElement element)\n            throws IncorrectOperationException {\n        final PsiJavaToken token = (PsiJavaToken)element;\n        final PsiIfStatement parentStatement =\n                (PsiIfStatement)token.getParent();\n        assert parentStatement != null;\n        final PsiBlockStatement elseBranch =\n                (PsiBlockStatement)parentStatement.getElseBranch();\n        assert elseBranch != null;\n        final PsiCodeBlock elseBranchBlock = elseBranch.getCodeBlock();\n        final PsiStatement elseBranchContents =\n                elseBranchBlock.getStatements()[0];\n        replaceStatement(elseBranchContents.getText(), elseBranch);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean satisfiedBy(PsiElement element){\n        if(!(element instanceof PsiJavaToken)){\n            return false;\n        }\n        @NonNls final String text = element.getText();\n        if(!\"else\".equals(text)){\n            return false;\n        }\n        final PsiJavaToken token = (PsiJavaToken) element;\n\n        final PsiElement parent = token.getParent();\n        if(!(parent instanceof PsiIfStatement)){\n            return false;\n        }\n        final PsiIfStatement ifStatement = (PsiIfStatement) parent;\n        if(ErrorUtil.containsError(ifStatement)){\n            return false;\n        }\n        final PsiStatement thenBranch = ifStatement.getThenBranch();\n        final PsiStatement elseBranch = ifStatement.getElseBranch();\n        if(thenBranch == null){\n            return false;\n        }\n        if(elseBranch == null){\n            return false;\n        }\n        if(!(elseBranch instanceof PsiBlockStatement)){\n            return false;\n        }\n        final PsiCodeBlock block =\n                ((PsiBlockStatement) elseBranch).getCodeBlock();\n        final PsiStatement[] statements = block.getStatements();\n        if(statements.length != 1){\n            return false;\n        }\n      return statements[0] instanceof PsiIfStatement;\n    }","id":105629,"modified_method":"public boolean satisfiedBy(PsiElement element){\n\t\tif(!(element instanceof PsiJavaToken)){\n\t\t\treturn false;\n\t\t}\n\t\t@NonNls final String text = element.getText();\n\t\tif(!PsiKeyword.ELSE.equals(text)){\n\t\t\treturn false;\n\t\t}\n\t\tfinal PsiJavaToken token = (PsiJavaToken) element;\n\t\tfinal PsiElement parent = token.getParent();\n\t\tif(!(parent instanceof PsiIfStatement)){\n\t\t\treturn false;\n\t\t}\n\t\tfinal PsiIfStatement ifStatement = (PsiIfStatement) parent;\n\t\tif(ErrorUtil.containsError(ifStatement)){\n\t\t\treturn false;\n\t\t}\n\t\tfinal PsiStatement thenBranch = ifStatement.getThenBranch();\n\t\tfinal PsiStatement elseBranch = ifStatement.getElseBranch();\n\t\tif(thenBranch == null){\n\t\t\treturn false;\n\t\t}\n\t\tif(!(elseBranch instanceof PsiBlockStatement)){\n\t\t\treturn false;\n\t\t}\n\t\tfinal PsiCodeBlock block =\n\t\t\t\t((PsiBlockStatement) elseBranch).getCodeBlock();\n\t\tfinal PsiStatement[] statements = block.getStatements();\n\t\treturn statements.length == 1 &&\n\t\t\t\tstatements[0] instanceof PsiIfStatement;\n\t}","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * @param variable\n   * @param initializer\n   * @return\n   * @throws com.intellij.util.IncorrectOperationException\n   *\n   */\n  private static PsiDeclarationStatement createNewDeclaration(@NotNull PsiLocalVariable variable,\n                                                              PsiExpression initializer)\n    throws IncorrectOperationException {\n    final PsiManager manager = variable.getManager();\n    final PsiElementFactory factory = manager.getElementFactory();\n    final PsiDeclarationStatement newDeclaration =\n      factory.createVariableDeclarationStatement(\n        variable.getName(), variable.getType(), initializer\n      );\n    if (variable.hasModifierProperty(PsiModifier.FINAL)) {\n      final PsiLocalVariable newVariable =\n        (PsiLocalVariable)newDeclaration.getDeclaredElements()[0];\n      newVariable.getModifierList().setModifierProperty(PsiModifier.FINAL,\n                                                        true);\n    }\n    return newDeclaration;\n  }","id":105630,"modified_method":"private static PsiDeclarationStatement createNewDeclaration(\n            @NotNull PsiLocalVariable variable, PsiExpression initializer)\n            throws IncorrectOperationException {\n        final PsiManager manager = variable.getManager();\n        final PsiElementFactory factory = manager.getElementFactory();\n        final PsiDeclarationStatement newDeclaration =\n                factory.createVariableDeclarationStatement(\n                        variable.getName(), variable.getType(), initializer);\n        if (variable.hasModifierProperty(PsiModifier.FINAL)) {\n            final PsiLocalVariable newVariable =\n                    (PsiLocalVariable)newDeclaration.getDeclaredElements()[0];\n            final PsiModifierList modifierList = newVariable.getModifierList();\n            modifierList.setModifierProperty(PsiModifier.FINAL, true);\n        }\n        return newDeclaration;\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void processIntention(PsiElement element)\n    throws IncorrectOperationException {\n    final PsiMethodCallExpression call =\n      (PsiMethodCallExpression)element;\n    final PsiReferenceExpression expression = call.getMethodExpression();\n    final PsiElement qualifier = expression.getQualifier();\n\n    final String qualifierText;\n    if (qualifier == null) {\n      qualifierText = \"\";\n    }\n    else {\n      qualifierText = qualifier.getText() + '.';\n    }\n\n    final PsiExpressionList argumentList = call.getArgumentList();\n    assert argumentList != null;\n    final PsiExpression[] args = argumentList.getExpressions();\n    final String callString;\n    if (args.length == 2) {\n      @NonNls final String argText = args[0].getText();\n      final PsiExpression otherArg;\n      if (\"true\".equals(argText) ||\n          \"false\".equals(argText) ||\n          \"null\".equals(argText)) {\n        otherArg = args[1];\n      }\n      else {\n        otherArg = args[0];\n      }\n      callString = qualifierText + getAssertString(argText) + '(' +\n                   otherArg.getText() + ')';\n    }\n    else {\n      @NonNls final String argText = args[1].getText();\n      final PsiExpression otherArg;\n      if (\"true\".equals(argText) ||\n          \"false\".equals(argText) ||\n          \"null\".equals(argText)) {\n        otherArg = args[2];\n      }\n      else {\n        otherArg = args[1];\n      }\n      callString = qualifierText + getAssertString(argText) + '(' +\n                   args[0].getText() + \", \" + otherArg.getText() + ')';\n    }\n    replaceExpression(callString, call);\n  }","id":105631,"modified_method":"public void processIntention(PsiElement element)\n            throws IncorrectOperationException {\n        final PsiMethodCallExpression call =\n                (PsiMethodCallExpression)element;\n        final PsiReferenceExpression expression = call.getMethodExpression();\n        final PsiElement qualifier = expression.getQualifier();\n        final String qualifierText;\n        if (qualifier == null) {\n            qualifierText = \"\";\n        } else {\n            qualifierText = qualifier.getText() + '.';\n        }\n        final PsiExpressionList argumentList = call.getArgumentList();\n        final PsiExpression[] args = argumentList.getExpressions();\n        final String callString;\n        if (args.length == 2) {\n            @NonNls final String argText = args[0].getText();\n            final PsiExpression otherArg;\n            if (\"true\".equals(argText) ||\n                    \"false\".equals(argText) ||\n                    \"null\".equals(argText)) {\n                otherArg = args[1];\n            } else {\n                otherArg = args[0];\n            }\n            callString = qualifierText + getAssertString(argText) + '(' +\n                    otherArg.getText() + ')';\n        } else {\n            @NonNls final String argText = args[1].getText();\n            final PsiExpression otherArg;\n            if (\"true\".equals(argText) ||\n                    \"false\".equals(argText) ||\n                    \"null\".equals(argText)) {\n                otherArg = args[2];\n            } else {\n                otherArg = args[1];\n            }\n            callString = qualifierText + getAssertString(argText) + '(' +\n                    args[0].getText() + \", \" + otherArg.getText() + ')';\n        }\n        replaceExpression(callString, call);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected String getTextForElement(PsiElement element) {\n    final PsiMethodCallExpression call = (PsiMethodCallExpression)element;\n    final PsiExpressionList argumentList = call.getArgumentList();\n    final PsiExpression[] args = argumentList.getExpressions();\n    final PsiReferenceExpression methodExpression =\n      call.getMethodExpression();\n    @NonNls final String methodName = methodExpression.getReferenceName();\n    assert methodName != null;\n    final String literal = methodName.substring(\"assert\".length())\n      .toLowerCase();\n\n    if (args.length == 1) {\n      return IntentionPowerPackBundle.message(\"replace.assert.literal.with.assert.equals.intention.name\", methodName, literal);\n    }\n    else {\n      return IntentionPowerPackBundle.message(\"replace.assert.literal.with.assert.equals.intention.name1\", methodName, literal);\n    }\n  }","id":105632,"modified_method":"protected String getTextForElement(PsiElement element) {\n        final PsiMethodCallExpression call = (PsiMethodCallExpression)element;\n        final PsiExpressionList argumentList = call.getArgumentList();\n        final PsiExpression[] args = argumentList.getExpressions();\n        final PsiReferenceExpression methodExpression =\n                call.getMethodExpression();\n        @NonNls final String methodName = methodExpression.getReferenceName();\n        assert methodName != null;\n        final String postfix = methodName.substring(\"assert\".length());\n        final String literal = postfix.toLowerCase();\n        if (args.length == 1) {\n            return IntentionPowerPackBundle.message(\n                    \"replace.assert.literal.with.assert.equals.intention.name\",\n                    methodName, literal);\n        } else {\n            return IntentionPowerPackBundle.message(\n                    \"replace.assert.literal.with.assert.equals.intention.name1\",\n                    methodName, literal);\n        }\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void processIntention(PsiElement element)\n    throws IncorrectOperationException {\n    final PsiMethodCallExpression call =\n      (PsiMethodCallExpression)element;\n    final PsiReferenceExpression methodExpression =\n      call.getMethodExpression();\n    final PsiElement qualifier =\n      methodExpression.getQualifier();\n    @NonNls final String methodName = methodExpression.getReferenceName();\n    assert methodName != null;\n    final String literal = methodName.substring(\"assert\".length())\n      .toLowerCase();\n\n    final String qualifierText;\n    if (qualifier == null) {\n      qualifierText = \"\";\n    }\n    else {\n      qualifierText = qualifier.getText() + '.';\n    }\n    final PsiExpressionList argumentList = call.getArgumentList();\n    assert argumentList != null;\n    final PsiExpression[] args = argumentList.getExpressions();\n\n    @NonNls final String callString;\n    if (args.length == 1) {\n      callString = qualifierText + \"assertEquals(\" + literal + \", \" +\n                   args[0].getText() + ')';\n    }\n    else {\n      callString =\n        qualifierText + \"assertEquals(\" + args[0].getText() + \", \" +\n        literal +\n        \", \" + args[1].getText() +\n        ')';\n    }\n    replaceExpression(callString, call);\n  }","id":105633,"modified_method":"public void processIntention(PsiElement element)\n            throws IncorrectOperationException {\n        final PsiMethodCallExpression call =\n                (PsiMethodCallExpression)element;\n        final PsiReferenceExpression methodExpression =\n                call.getMethodExpression();\n        final PsiElement qualifier =\n                methodExpression.getQualifier();\n        @NonNls final String methodName = methodExpression.getReferenceName();\n        assert methodName != null;\n        final String qualifierText;\n        if (qualifier == null) {\n            qualifierText = \"\";\n        } else {\n            qualifierText = qualifier.getText() + '.';\n        }\n        final String postfix = methodName.substring(\"assert\".length());\n        final String literal = postfix.toLowerCase();\n        final PsiExpressionList argumentList = call.getArgumentList();\n        final PsiExpression[] arguments = argumentList.getExpressions();\n        @NonNls final String callString;\n        if (arguments.length == 1) {\n            callString = qualifierText + \"assertEquals(\" + literal + \", \" +\n                    arguments[0].getText() + ')';\n        } else {\n            callString =\n                    qualifierText + \"assertEquals(\" + arguments[0].getText() +\n                            \", \" + literal + \", \" + arguments[1].getText() + ')';\n        }\n        replaceExpression(callString, call);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean isReplaceableAssignment(PsiIfStatement ifStatement){\n        PsiStatement thenBranch = ifStatement.getThenBranch();\n        if(thenBranch == null){\n            return false;\n        }\n        thenBranch = ConditionalUtils.stripBraces(thenBranch);\n\n        if(!ConditionalUtils.isAssignment(thenBranch)){\n            return false;\n        }\n        PsiStatement elseBranch = ifStatement.getElseBranch();\n        elseBranch = ConditionalUtils.stripBraces(elseBranch);\n        if(elseBranch == null){\n            return false;\n        }\n        if(!ConditionalUtils.isAssignment(elseBranch)){\n            return false;\n        }\n        final PsiAssignmentExpression thenExpression =\n                (PsiAssignmentExpression) ((PsiExpressionStatement) thenBranch).getExpression();\n        final PsiAssignmentExpression elseExpression =\n                (PsiAssignmentExpression) ((PsiExpressionStatement) elseBranch).getExpression();\n        final PsiJavaToken thenSign = thenExpression.getOperationSign();\n        final PsiJavaToken elseSign = elseExpression.getOperationSign();\n        if(!thenSign.getTokenType().equals(elseSign.getTokenType())){\n            return false;\n        }\n        final PsiExpression thenLhs = thenExpression.getLExpression();\n        if(thenExpression.getRExpression() == null){\n            return false;\n        }\n        if(elseExpression.getRExpression() == null ||\n                elseExpression.getLExpression() == null){\n            return false;\n        }\n        final PsiExpression thenRhs = thenExpression.getRExpression();\n        assert thenRhs != null;\n        final PsiType thenType = thenRhs.getType();\n        if(thenType == null){\n            return false;\n        }\n        final PsiExpression elseRhs = elseExpression.getRExpression();\n       if(elseRhs == null)\n       {\n           return false;\n       }\n        final PsiType elseType = elseRhs.getType();\n        if(elseType == null){\n            return false;\n        }\n        if(!(thenType.isAssignableFrom(elseType) ||\n                elseType.isAssignableFrom(thenType))){\n            return false;\n        }\n        final PsiExpression elseLhs = elseExpression.getLExpression();\n        return EquivalenceChecker.expressionsAreEquivalent(thenLhs, elseLhs);\n    }","id":105634,"modified_method":"public static boolean isReplaceableAssignment(PsiIfStatement ifStatement){\n        PsiStatement thenBranch = ifStatement.getThenBranch();\n        if(thenBranch == null){\n            return false;\n        }\n        thenBranch = ConditionalUtils.stripBraces(thenBranch);\n\n        if(!ConditionalUtils.isAssignment(thenBranch)){\n            return false;\n        }\n        PsiStatement elseBranch = ifStatement.getElseBranch();\n        elseBranch = ConditionalUtils.stripBraces(elseBranch);\n        if(elseBranch == null){\n            return false;\n        }\n        if(!ConditionalUtils.isAssignment(elseBranch)){\n            return false;\n        }\n        final PsiAssignmentExpression thenExpression =\n                (PsiAssignmentExpression)\n                        ((PsiExpressionStatement) thenBranch).getExpression();\n        final PsiAssignmentExpression elseExpression =\n                (PsiAssignmentExpression)\n                        ((PsiExpressionStatement) elseBranch).getExpression();\n        final PsiJavaToken thenSign = thenExpression.getOperationSign();\n        final PsiJavaToken elseSign = elseExpression.getOperationSign();\n\t    final IElementType tokenType = thenSign.getTokenType();\n\t    if(!tokenType.equals(elseSign.getTokenType())){\n\t        return false;\n\t    }\n        final PsiExpression thenLhs = thenExpression.getLExpression();\n        if(thenExpression.getRExpression() == null){\n            return false;\n        }\n        if(elseExpression.getRExpression() == null){\n            return false;\n        }\n        final PsiExpression thenRhs = thenExpression.getRExpression();\n        assert thenRhs != null;\n        final PsiType thenType = thenRhs.getType();\n        if(thenType == null){\n            return false;\n        }\n        final PsiExpression elseRhs = elseExpression.getRExpression();\n\t    if(elseRhs == null) {\n\t\t    return false;\n\t    }\n        final PsiType elseType = elseRhs.getType();\n        if(elseType == null){\n            return false;\n        }\n        if(!(thenType.isAssignableFrom(elseType) ||\n                elseType.isAssignableFrom(thenType))){\n            return false;\n        }\n        final PsiExpression elseLhs = elseExpression.getLExpression();\n        return EquivalenceChecker.expressionsAreEquivalent(thenLhs, elseLhs);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean isReplaceableImplicitReturn(PsiIfStatement ifStatement){\n        final PsiElement nextStatement =\n                PsiTreeUtil.skipSiblingsForward(ifStatement,\n                                                new Class[]{\n                                                    PsiWhiteSpace.class});\n        if(!(nextStatement instanceof PsiReturnStatement)){\n            return false;\n        }\n        PsiStatement thenBranch = ifStatement.getThenBranch();\n        thenBranch = ConditionalUtils.stripBraces(thenBranch);\n        if(!(thenBranch instanceof PsiReturnStatement)){\n            return false;\n        }\n\n        final PsiExpression thenReturn =\n                ((PsiReturnStatement) thenBranch).getReturnValue();\n        if(thenReturn == null){\n            return false;\n        }\n        final PsiType thenType = thenReturn.getType();\n        if(thenType == null){\n            return false;\n        }\n\n        final PsiExpression elseReturn =\n                ((PsiReturnStatement) nextStatement).getReturnValue();\n        if(elseReturn == null){\n            return false;\n        }\n        final PsiType elseType = elseReturn.getType();\n        if(elseType == null){\n            return false;\n        }\n\n        return thenType.isAssignableFrom(elseType) ||\n                elseType.isAssignableFrom(thenType);\n    }","id":105635,"modified_method":"public static boolean isReplaceableImplicitReturn(\n            PsiIfStatement ifStatement){\n        final PsiElement nextStatement =\n                PsiTreeUtil.skipSiblingsForward(ifStatement,\n                        PsiWhiteSpace.class);\n        if(!(nextStatement instanceof PsiReturnStatement)){\n            return false;\n        }\n        PsiStatement thenBranch = ifStatement.getThenBranch();\n        thenBranch = ConditionalUtils.stripBraces(thenBranch);\n        if(!(thenBranch instanceof PsiReturnStatement)){\n            return false;\n        }\n        final PsiExpression thenReturn =\n                ((PsiReturnStatement) thenBranch).getReturnValue();\n        if(thenReturn == null){\n            return false;\n        }\n        final PsiType thenType = thenReturn.getType();\n        if(thenType == null){\n            return false;\n        }\n        final PsiExpression elseReturn =\n                ((PsiReturnStatement) nextStatement).getReturnValue();\n        if(elseReturn == null){\n            return false;\n        }\n        final PsiType elseType = elseReturn.getType();\n        if(elseType == null){\n            return false;\n        }\n        return thenType.isAssignableFrom(elseType) ||\n                elseType.isAssignableFrom(thenType);\n    }","commit_id":"d480fc584ca16bf153d91815bf51e7a6d1cd97c1","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void resolveExtensions(Model model, DependencyTree root) throws IOException, RepositoryException, XmlPullParserException {\n        ModuleRegistry.VersionedModule module = moduleRegistry.getVersionedModule(moduleId);\n        if( module!=null ) {\n            Map<String, ModuleRegistry.VersionedModule> availableExtensions = module.getAvailableExtensions();\n            String extensionsString=\"\";\n            for (String enabledExtension : module.getEnabledExtensions()) {\n                ModuleRegistry.VersionedModule extensionModule = availableExtensions.get(enabledExtension);\n                if( extensionModule!=null ) {\n                    VersionedDependencyId id = extensionModule.getId();\n\n                    // lets resolve the dependency\n                    DependencyTreeResult result = resolver.collectDependencies(id.getGroupId(), id.getArtifactId(), id.getVersion(), id.getExtension(), id.getClassifier());\n\n                    if (result != null) {\n                        DependencyTree tree = result.getTree();\n\n                        sharedFilterText += \" \" + emptyIfNull(tree.getManfiestEntry(ServiceConstants.INSTR_FAB_PROVIDED_DEPENDENCY));\n                        requireBundleFilterText += \" \" + emptyIfNull(tree.getManfiestEntry(ServiceConstants.INSTR_FAB_DEPENDENCY_REQUIRE_BUNDLE));\n                        excludeFilterText += \" \" + emptyIfNull(tree.getManfiestEntry(ServiceConstants.INSTR_FAB_EXCLUDE_DEPENDENCY));\n                        optionalDependencyText += \" \" + emptyIfNull(tree.getManfiestEntry(ServiceConstants.INSTR_FAB_OPTIONAL_DEPENDENCY));\n\n                        sharedFilter = DependencyTreeFilters.parseShareFilter(sharedFilterText.trim());\n                        requireBundleFilter = DependencyTreeFilters.parseRequireBundleFilter(requireBundleFilterText.trim());\n                        excludePackageFilter = DependencyTreeFilters.parseExcludeFilter(excludeFilterText.trim());\n                        excludeOptionalFilter = DependencyTreeFilters.parseExcludeOptionalFilter(optionalDependencyText.trim());\n\n                        LOG.debug(\"Adding extension: \" + tree.getDependencyId());\n                        if( extensionsString.length()!=0 ) {\n                            extensionsString += \" \";\n                        }\n                        extensionsString += id;\n                        addChildDependency(tree);\n\n                    } else {\n                        LOG.debug(\"Could not resolve extension: \" + id);\n                    }\n                }\n            }\n            if( extensionsString.length()!= 0 ) {\n                instructions.put(ServiceConstants.INSTR_FAB_MODULE_ENABLED_EXTENSIONS, extensionsString);\n            }\n        }\n    }","id":105636,"modified_method":"protected void resolveExtensions(Model model, DependencyTree root) throws IOException, RepositoryException, XmlPullParserException {\n        ModuleRegistry.VersionedModule module = moduleRegistry.getVersionedModule(moduleId);\n        if( module!=null ) {\n            Map<String, ModuleRegistry.VersionedModule> availableExtensions = module.getAvailableExtensions();\n            String extensionsString=\"\";\n            for (String enabledExtension : module.getEnabledExtensions()) {\n                ModuleRegistry.VersionedModule extensionModule = availableExtensions.get(enabledExtension);\n                if( extensionModule!=null ) {\n                    VersionedDependencyId id = extensionModule.getId();\n\n                    // lets resolve the dependency\n                    DependencyTreeResult result = resolver.collectDependencies(id.getGroupId(), id.getArtifactId(), id.getVersion(), id.getExtension(), id.getClassifier());\n\n                    if (result != null) {\n                        DependencyTree tree = result.getTree();\n\n                        sharedFilterPatterns.addAll(Strings.splitAndTrimAsList(emptyIfNull(tree.getManfiestEntry(ServiceConstants.INSTR_FAB_PROVIDED_DEPENDENCY)), \"\\\\s+\"));\n                        requireBundleFilterPatterns.addAll(Strings.splitAndTrimAsList(emptyIfNull(tree.getManfiestEntry(ServiceConstants.INSTR_FAB_DEPENDENCY_REQUIRE_BUNDLE)), \"\\\\s+\"));\n                        excludeFilterPatterns.addAll(Strings.splitAndTrimAsList(emptyIfNull(tree.getManfiestEntry(ServiceConstants.INSTR_FAB_EXCLUDE_DEPENDENCY)), \"\\\\s+\"));\n                        optionalDependencyPatterns.addAll(Strings.splitAndTrimAsList(emptyIfNull(tree.getManfiestEntry(ServiceConstants.INSTR_FAB_OPTIONAL_DEPENDENCY)), \"\\\\s+\"));\n\n                        sharedFilter = DependencyTreeFilters.parseShareFilter(join(sharedFilterPatterns, \" \"));\n                        requireBundleFilter = DependencyTreeFilters.parseRequireBundleFilter(join(requireBundleFilterPatterns, \" \"));\n                        excludePackageFilter = DependencyTreeFilters.parseExcludeFilter(join(excludeFilterPatterns, \" \"));\n                        excludeOptionalFilter = DependencyTreeFilters.parseExcludeOptionalFilter(join(optionalDependencyPatterns, \" \"));\n\n                        LOG.debug(\"Adding extension: \" + tree.getDependencyId());\n                        if( extensionsString.length()!=0 ) {\n                            extensionsString += \" \";\n                        }\n                        extensionsString += id;\n                        addChildDependency(tree);\n\n                    } else {\n                        LOG.debug(\"Could not resolve extension: \" + id);\n                    }\n                }\n            }\n            if( extensionsString.length()!= 0 ) {\n                instructions.put(ServiceConstants.INSTR_FAB_MODULE_ENABLED_EXTENSIONS, extensionsString);\n            }\n        }\n    }","commit_id":"2def57d12653c050e2cc2857a348017bca170b20","url":"https://github.com/fabric8io/fabric8"},{"original_method":"public void resolve() throws RepositoryException, IOException, XmlPullParserException, BundleException {\n        PomDetails pomDetails = connection.resolvePomDetails();\n        if (!pomDetails.isValid()) {\n            LOG.warn(\"Cannot resolve pom.xml for \" + connection.getJarFile());\n            return;\n        }\n        DependencyTreeResult result = resolver.collectDependencies(pomDetails, offline);\n        this.rootTree = result.getTree();\n\n        sharedFilterText = emptyIfNull(getManfiestProperty(ServiceConstants.INSTR_FAB_PROVIDED_DEPENDENCY));\n        requireBundleFilterText = emptyIfNull(getManfiestProperty(ServiceConstants.INSTR_FAB_DEPENDENCY_REQUIRE_BUNDLE));\n        excludeFilterText = emptyIfNull(getManfiestProperty(ServiceConstants.INSTR_FAB_EXCLUDE_DEPENDENCY));\n        optionalDependencyText = emptyIfNull(getManfiestProperty(ServiceConstants.INSTR_FAB_OPTIONAL_DEPENDENCY));\n\n        sharedFilter = DependencyTreeFilters.parseShareFilter(sharedFilterText.trim());\n        requireBundleFilter = DependencyTreeFilters.parseRequireBundleFilter(requireBundleFilterText.trim());\n        excludePackageFilter = DependencyTreeFilters.parseExcludeFilter(excludeFilterText.trim());\n        excludeOptionalFilter = DependencyTreeFilters.parseExcludeOptionalFilter(optionalDependencyText.trim());\n\n        bundleClassPath.addAll(Strings.splitAsList(getManfiestProperty(ServiceConstants.INSTR_BUNDLE_CLASSPATH), \",\"));\n        requireBundles.addAll(Strings.splitAsList(getManfiestProperty(ServiceConstants.INSTR_REQUIRE_BUNDLE), \",\"));\n        importPackages.addAll(Strings.splitAsList(getManfiestProperty(ServiceConstants.INSTR_IMPORT_PACKAGE), \",\"));\n\n\n        String name = getManfiestProperty(ServiceConstants.INSTR_BUNDLE_SYMBOLIC_NAME);\n        if (name.length() <= 0) {\n            name = rootTree.getBundleSymbolicName();\n            instructions.setProperty(ServiceConstants.INSTR_BUNDLE_SYMBOLIC_NAME, name);\n        }\n\n        LOG.debug(\"Resolving Dependencies for: \"+rootTree.getDependencyId());\n        addDependencies(rootTree);\n\n        // Build a ModuleDescriptor using the Jar Manifests headers..\n        Model model = pomDetails.getModel();\n        moduleId = new VersionedDependencyId(model);\n        ModuleRegistry.VersionedModule module = moduleRegistry.getVersionedModule(moduleId);\n        if( module==null || module.getFile()!=null ) {\n            registerModule(model);\n        }\n\n        resolveExtensions(model, rootTree);\n\n        for (DependencyTree dependencyTree : sharedDependencies) {\n            if (requireBundleFilter.matches(dependencyTree)) {\n                // lets figure out the bundle ID etc...\n                String bundleId = dependencyTree.getBundleSymbolicName();\n                Version version = new Version(VersionCleaner.clean(dependencyTree.getVersion()));\n                requireBundles.add(bundleId + \";bundle-version=\" + version + \"\");\n            } else {\n                // TODO don't think we need to do anything now since already the BND stuff figures out the import packages for any missing stuff?\n                if (processImportPackages) {\n                    // lets add all the import packages...\n                    importAllExportedPackages(dependencyTree);\n                }\n            }\n        }\n\n        for (DependencyTree dependencyTree : nonSharedDependencies) {\n            if (dependencyTree.isValidLibrary()) {\n                String url = dependencyTree.getUrl();\n                if (url != null) {\n                    String path = dependencyTree.getGroupId() + \".\" + dependencyTree.getArtifactId() + \".jar\";\n\n                    if (!bundleClassPath.contains(path)) {\n                        // try use a file if it exists\n                        File file = new File(url);\n                        if (file.exists()) {\n                            embeddedResources.put(path, file);\n                        } else {\n                            embeddedResources.put(path, new URL(url));\n                        }\n                        addBundleClassPath(path);\n                    }\n                }\n            }\n        }\n\n        // Remove dup dependencies..\n        nonSharedDependencies = filterOutDuplicates(nonSharedDependencies);\n        sharedDependencies = filterOutDuplicates(sharedDependencies);\n        installDependencies = filterOutDuplicates(installDependencies);\n        optionalDependencies = filterOutDuplicates(optionalDependencies);\n\n        LOG.debug(\"nonSharedDependencies:\");\n        for( DependencyTree d : nonSharedDependencies) {\n            LOG.debug(\"  \"+d.getDependencyId());\n        }\n        LOG.debug(\"sharedDependencies:\");\n        for( DependencyTree d : sharedDependencies) {\n            LOG.debug(\"  \"+d.getDependencyId());\n        }\n        LOG.debug(\"installDependencies:\");\n        for( DependencyTree d : installDependencies) {\n            LOG.debug(\"  \"+d.getDependencyId());\n        }\n\n        LOG.debug(\"resolved: bundleClassPath: \" + Strings.join(bundleClassPath, \"\\t\\n\"));\n        LOG.debug(\"resolved: requireBundles: \" + Strings.join(requireBundles, \"\\t\\n\"));\n        LOG.debug(\"resolved: importPackages: \" + Strings.join(importPackages, \"\\t\\n\"));\n\n        instructions.setProperty(ServiceConstants.INSTR_BUNDLE_CLASSPATH, Strings.join(bundleClassPath, \",\"));\n        instructions.setProperty(ServiceConstants.INSTR_REQUIRE_BUNDLE, Strings.join(requireBundles, \",\"));\n        instructions.setProperty(ServiceConstants.INSTR_FAB_MODULE_ID, moduleId.toString());\n    }","id":105637,"modified_method":"public void resolve() throws RepositoryException, IOException, XmlPullParserException, BundleException {\n        PomDetails pomDetails = connection.resolvePomDetails();\n        if (!pomDetails.isValid()) {\n            LOG.warn(\"Cannot resolve pom.xml for \" + connection.getJarFile());\n            return;\n        }\n        DependencyTreeResult result = resolver.collectDependencies(pomDetails, offline);\n        this.rootTree = result.getTree();\n\n        sharedFilterPatterns.addAll(Strings.splitAndTrimAsList(emptyIfNull(getManfiestProperty(ServiceConstants.INSTR_FAB_PROVIDED_DEPENDENCY)), \"\\\\s+\"));\n        requireBundleFilterPatterns.addAll(Strings.splitAndTrimAsList(emptyIfNull(getManfiestProperty(ServiceConstants.INSTR_FAB_DEPENDENCY_REQUIRE_BUNDLE)), \"\\\\s+\"));\n        excludeFilterPatterns.addAll(Strings.splitAndTrimAsList(emptyIfNull(getManfiestProperty(ServiceConstants.INSTR_FAB_EXCLUDE_DEPENDENCY)), \"\\\\s+\"));\n        optionalDependencyPatterns.addAll(Strings.splitAndTrimAsList(emptyIfNull(getManfiestProperty(ServiceConstants.INSTR_FAB_OPTIONAL_DEPENDENCY)), \"\\\\s+\"));\n\n        sharedFilter = DependencyTreeFilters.parseShareFilter(join(sharedFilterPatterns, \" \"));\n        requireBundleFilter = DependencyTreeFilters.parseRequireBundleFilter(join(requireBundleFilterPatterns, \" \"));\n        excludePackageFilter = DependencyTreeFilters.parseExcludeFilter(join(excludeFilterPatterns, \" \"));\n        excludeOptionalFilter = DependencyTreeFilters.parseExcludeOptionalFilter(join(optionalDependencyPatterns, \" \"));\n\n        bundleClassPath.addAll(Strings.splitAsList(getManfiestProperty(ServiceConstants.INSTR_BUNDLE_CLASSPATH), \",\"));\n        requireBundles.addAll(Strings.splitAsList(getManfiestProperty(ServiceConstants.INSTR_REQUIRE_BUNDLE), \",\"));\n        importPackages.addAll(Strings.splitAsList(getManfiestProperty(ServiceConstants.INSTR_IMPORT_PACKAGE), \",\"));\n\n\n        String name = getManfiestProperty(ServiceConstants.INSTR_BUNDLE_SYMBOLIC_NAME);\n        if (name.length() <= 0) {\n            name = rootTree.getBundleSymbolicName();\n            instructions.setProperty(ServiceConstants.INSTR_BUNDLE_SYMBOLIC_NAME, name);\n        }\n\n        LOG.debug(\"Resolving Dependencies for: \"+rootTree.getDependencyId());\n        addDependencies(rootTree);\n\n        // Build a ModuleDescriptor using the Jar Manifests headers..\n        Model model = pomDetails.getModel();\n        moduleId = new VersionedDependencyId(model);\n        ModuleRegistry.VersionedModule module = moduleRegistry.getVersionedModule(moduleId);\n        if( module==null || module.getFile()!=null ) {\n            registerModule(model);\n        }\n\n        resolveExtensions(model, rootTree);\n\n        for (DependencyTree dependencyTree : sharedDependencies) {\n            if (requireBundleFilter.matches(dependencyTree)) {\n                // lets figure out the bundle ID etc...\n                String bundleId = dependencyTree.getBundleSymbolicName();\n                Version version = new Version(VersionCleaner.clean(dependencyTree.getVersion()));\n                requireBundles.add(bundleId + \";bundle-version=\" + version + \"\");\n            } else {\n                // TODO don't think we need to do anything now since already the BND stuff figures out the import packages for any missing stuff?\n                if (processImportPackages) {\n                    // lets add all the import packages...\n                    importAllExportedPackages(dependencyTree);\n                }\n            }\n        }\n\n        for (DependencyTree dependencyTree : nonSharedDependencies) {\n            if (dependencyTree.isValidLibrary()) {\n                String url = dependencyTree.getUrl();\n                if (url != null) {\n                    String path = dependencyTree.getGroupId() + \".\" + dependencyTree.getArtifactId() + \".jar\";\n\n                    if (!bundleClassPath.contains(path)) {\n                        // try use a file if it exists\n                        File file = new File(url);\n                        if (file.exists()) {\n                            embeddedResources.put(path, file);\n                        } else {\n                            embeddedResources.put(path, new URL(url));\n                        }\n                        addBundleClassPath(path);\n                    }\n                }\n            }\n        }\n\n        // Remove dup dependencies..\n        nonSharedDependencies = filterOutDuplicates(nonSharedDependencies);\n        sharedDependencies = filterOutDuplicates(sharedDependencies);\n        installDependencies = filterOutDuplicates(installDependencies);\n        optionalDependencies = filterOutDuplicates(optionalDependencies);\n\n        LOG.debug(\"nonSharedDependencies:\");\n        for( DependencyTree d : nonSharedDependencies) {\n            LOG.debug(\"  \"+d.getDependencyId());\n        }\n        LOG.debug(\"sharedDependencies:\");\n        for( DependencyTree d : sharedDependencies) {\n            LOG.debug(\"  \"+d.getDependencyId());\n        }\n        LOG.debug(\"installDependencies:\");\n        for( DependencyTree d : installDependencies) {\n            LOG.debug(\"  \"+d.getDependencyId());\n        }\n\n        LOG.debug(\"resolved: bundleClassPath: \" + Strings.join(bundleClassPath, \"\\t\\n\"));\n        LOG.debug(\"resolved: requireBundles: \" + Strings.join(requireBundles, \"\\t\\n\"));\n        LOG.debug(\"resolved: importPackages: \" + Strings.join(importPackages, \"\\t\\n\"));\n\n        instructions.setProperty(ServiceConstants.INSTR_BUNDLE_CLASSPATH, Strings.join(bundleClassPath, \",\"));\n        instructions.setProperty(ServiceConstants.INSTR_REQUIRE_BUNDLE, Strings.join(requireBundles, \",\"));\n        instructions.setProperty(ServiceConstants.INSTR_FAB_MODULE_ID, moduleId.toString());\n\n        // Update the headers fab headers.. they may have been updated by the extensions.\n        if( !sharedFilterPatterns.isEmpty() ) {\n            instructions.setProperty(ServiceConstants.INSTR_FAB_PROVIDED_DEPENDENCY, join(sharedFilterPatterns, \" \"));\n        }\n        if( !requireBundleFilterPatterns.isEmpty() ) {\n            instructions.setProperty(ServiceConstants.INSTR_FAB_DEPENDENCY_REQUIRE_BUNDLE, join(requireBundleFilterPatterns, \" \"));\n        }\n        if( !excludeFilterPatterns.isEmpty() ) {\n            instructions.setProperty(ServiceConstants.INSTR_FAB_EXCLUDE_DEPENDENCY, join(excludeFilterPatterns, \" \"));\n        }\n        if( !optionalDependencyPatterns.isEmpty() ) {\n            instructions.setProperty(ServiceConstants.INSTR_FAB_OPTIONAL_DEPENDENCY, join(optionalDependencyPatterns, \" \"));\n        }\n\n    }","commit_id":"2def57d12653c050e2cc2857a348017bca170b20","url":"https://github.com/fabric8io/fabric8"},{"original_method":"@Test\n    public void testSubsystemWitThreadsAndConnectorProperties() throws Exception {\n        final int port = 12345;\n        KernelServices services = installInController(new AdditionalInitialization(){\n                @Override\n                protected void setupController(ControllerInitializer controllerInitializer) {\n                    controllerInitializer.addSocketBinding(\"test\", port);\n                }\n\n                @Override\n                protected void addExtraServices(ServiceTarget target) {\n                    //Needed for initialization of the RealmAuthenticationProviderService\n                    AbsolutePathService.addService(ServerEnvironment.CONTROLLER_TEMP_DIR, new File(\"target/temp\" + System.currentTimeMillis()).getAbsolutePath(), target);\n                }\n\n            },readResource(\"remoting-with-threads.xml\"));\n\n        ServiceController<?> endPointService = services.getContainer().getRequiredService(RemotingServices.SUBSYSTEM_ENDPOINT);\n        assertNotNull(endPointService);\n\n        ServiceName connectorServiceName = RemotingServices.serverServiceName(\"test-connector\");\n        ServiceController<?> connectorService = services.getContainer().getRequiredService(connectorServiceName);\n        assertNotNull(connectorService);\n\n        ModelNode model = services.readWholeModel();\n        ModelNode subsystem = model.require(SUBSYSTEM).require(RemotingExtension.SUBSYSTEM_NAME);\n        assertEquals(5, subsystem.require(CommonAttributes.WORKER_READ_THREADS).asInt());\n        assertEquals(6, subsystem.require(CommonAttributes.WORKER_TASK_CORE_THREADS).asInt());\n        assertEquals(7, subsystem.require(CommonAttributes.WORKER_TASK_KEEPALIVE).asInt());\n        assertEquals(8, subsystem.require(CommonAttributes.WORKER_TASK_LIMIT).asInt());\n        assertEquals(9, subsystem.require(CommonAttributes.WORKER_TASK_MAX_THREADS).asInt());\n        assertEquals(10, subsystem.require(CommonAttributes.WORKER_WRITE_THREADS).asInt());\n\n        ModelNode connector = subsystem.require(CommonAttributes.CONNECTOR).require(\"test-connector\");\n        assertEquals(1, connector.require(CommonAttributes.PROPERTY).require(\"org.xnio.Options.WORKER_ACCEPT_THREADS\").require(CommonAttributes.VALUE).asInt());\n    }","id":105638,"modified_method":"@Test\n    public void testSubsystemWitThreadsAndConnectorProperties() throws Exception {\n        final int port = 12345;\n        KernelServices services = createKernelServicesBuilder(new AdditionalInitialization() {\n            @Override\n            protected void setupController(ControllerInitializer controllerInitializer) {\n                controllerInitializer.addSocketBinding(\"test\", port);\n            }\n\n            @Override\n            protected void addExtraServices(ServiceTarget target) {\n                //Needed for initialization of the RealmAuthenticationProviderService\n                AbsolutePathService.addService(ServerEnvironment.CONTROLLER_TEMP_DIR, new File(\"target/temp\" + System.currentTimeMillis()).getAbsolutePath(), target);\n            }\n\n        }).setSubsystemXmlResource(\"remoting-with-threads.xml\")\n                .build();\n\n\n        ServiceController<?> endPointService = services.getContainer().getRequiredService(RemotingServices.SUBSYSTEM_ENDPOINT);\n        assertNotNull(endPointService);\n\n        ServiceName connectorServiceName = RemotingServices.serverServiceName(\"test-connector\");\n        ServiceController<?> connectorService = services.getContainer().getRequiredService(connectorServiceName);\n        assertNotNull(connectorService);\n\n        ModelNode model = services.readWholeModel();\n        ModelNode subsystem = model.require(SUBSYSTEM).require(RemotingExtension.SUBSYSTEM_NAME);\n        assertEquals(5, subsystem.require(CommonAttributes.WORKER_READ_THREADS).asInt());\n        assertEquals(6, subsystem.require(CommonAttributes.WORKER_TASK_CORE_THREADS).asInt());\n        assertEquals(7, subsystem.require(CommonAttributes.WORKER_TASK_KEEPALIVE).asInt());\n        assertEquals(8, subsystem.require(CommonAttributes.WORKER_TASK_LIMIT).asInt());\n        assertEquals(9, subsystem.require(CommonAttributes.WORKER_TASK_MAX_THREADS).asInt());\n        assertEquals(10, subsystem.require(CommonAttributes.WORKER_WRITE_THREADS).asInt());\n\n        ModelNode connector = subsystem.require(CommonAttributes.CONNECTOR).require(\"test-connector\");\n        assertEquals(1, connector.require(CommonAttributes.PROPERTY).require(\"org.xnio.Options.WORKER_ACCEPT_THREADS\").require(CommonAttributes.VALUE).asInt());\n    }","commit_id":"fad93064dd78aedd94283792d41d5efb1c912fb9","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test @Ignore(\"AS7-4127\")\n    public void testSubsystemWithThreadAttributeChange() throws Exception {\n        final int port = 12345;\n        KernelServices services = installInController(new AdditionalInitialization(){\n                @Override\n                protected void setupController(ControllerInitializer controllerInitializer) {\n                    controllerInitializer.addSocketBinding(\"test\", port);\n                }\n\n                @Override\n                protected void addExtraServices(ServiceTarget target) {\n                    //Needed for initialization of the RealmAuthenticationProviderService\n                    AbsolutePathService.addService(ServerEnvironment.CONTROLLER_TEMP_DIR, new File(\"target/temp\" + System.currentTimeMillis()).getAbsolutePath(), target);\n                }\n\n            },readResource(\"remoting-with-threads.xml\"));\n\n        CurrentConnectorAndController current = CurrentConnectorAndController.create(services, RemotingServices.SUBSYSTEM_ENDPOINT, RemotingServices.serverServiceName(\"test-connector\"));\n\n        updateAndCheckThreadAttribute(services, current, CommonAttributes.WORKER_READ_THREADS, 5, 6);\n        updateAndCheckThreadAttribute(services, current, CommonAttributes.WORKER_TASK_CORE_THREADS, 6, 2);\n        updateAndCheckThreadAttribute(services, current, CommonAttributes.WORKER_TASK_KEEPALIVE, 7, 3);\n        updateAndCheckThreadAttribute(services, current, CommonAttributes.WORKER_TASK_LIMIT, 8, 4);\n        updateAndCheckThreadAttribute(services, current, CommonAttributes.WORKER_TASK_MAX_THREADS, 9, 5);\n        updateAndCheckThreadAttribute(services, current, CommonAttributes.WORKER_WRITE_THREADS, 10, 6);\n    }","id":105639,"modified_method":"@Test\n    public void testSubsystemWithThreadAttributeChange() throws Exception {\n        final int port = 12345;\n        KernelServices services = createKernelServicesBuilder(new AdditionalInitialization() {\n            @Override\n            protected void setupController(ControllerInitializer controllerInitializer) {\n                controllerInitializer.addSocketBinding(\"test\", port);\n            }\n\n            @Override\n            protected void addExtraServices(ServiceTarget target) {\n                //Needed for initialization of the RealmAuthenticationProviderService\n                AbsolutePathService.addService(ServerEnvironment.CONTROLLER_TEMP_DIR, new File(\"target/temp\" + System.currentTimeMillis()).getAbsolutePath(), target);\n            }\n\n        }).setSubsystemXmlResource(\"remoting-with-threads.xml\")\n                .build();\n\n        CurrentConnectorAndController current = CurrentConnectorAndController.create(services, RemotingServices.SUBSYSTEM_ENDPOINT, RemotingServices.serverServiceName(\"test-connector\"));\n\n        updateAndCheckThreadAttribute(services, current, CommonAttributes.WORKER_READ_THREADS, 5, 6);\n        updateAndCheckThreadAttribute(services, current, CommonAttributes.WORKER_TASK_CORE_THREADS, 6, 2);\n        updateAndCheckThreadAttribute(services, current, CommonAttributes.WORKER_TASK_KEEPALIVE, 7, 3);\n        updateAndCheckThreadAttribute(services, current, CommonAttributes.WORKER_TASK_LIMIT, 8, 4);\n        updateAndCheckThreadAttribute(services, current, CommonAttributes.WORKER_TASK_MAX_THREADS, 9, 5);\n        updateAndCheckThreadAttribute(services, current, CommonAttributes.WORKER_WRITE_THREADS, 10, 6);\n    }","commit_id":"fad93064dd78aedd94283792d41d5efb1c912fb9","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test @Ignore(\"AS7-3632\")\n    public void testSubsystemWithBadConnectorProperty() throws Exception {\n        final int port = 12345;\n        KernelServices services = installInController(new AdditionalInitialization(){\n                @Override\n                protected void setupController(ControllerInitializer controllerInitializer) {\n                    controllerInitializer.addSocketBinding(\"test\", port);\n                }\n\n            },readResource(\"remoting-with-bad-connector-property.xml\"));\n\n        try {\n            services.getContainer().getRequiredService(RemotingServices.SUBSYSTEM_ENDPOINT);\n            fail(\"Expected no \" + RemotingServices.SUBSYSTEM_ENDPOINT);\n        } catch (ServiceNotFoundException expected) {\n        }\n\n        try {\n            services.getContainer().getRequiredService(RemotingServices.serverServiceName(\"test-connector\"));\n            fail(\"Expected no \" + RemotingServices.serverServiceName(\"test-connector\"));\n        } catch (ServiceNotFoundException expected) {\n        }\n    }","id":105640,"modified_method":"@Test\n    public void testSubsystemWithBadConnectorProperty() throws Exception {\n        final int port = 12345;\n        KernelServices services = createKernelServicesBuilder(new AdditionalInitialization() {\n            @Override\n            protected void setupController(ControllerInitializer controllerInitializer) {\n                controllerInitializer.addSocketBinding(\"test\", port);\n            }\n\n        }).setSubsystemXmlResource(\"remoting-with-bad-connector-property.xml\")\n                .build();\n\n        try {\n            services.getContainer().getRequiredService(RemotingServices.SUBSYSTEM_ENDPOINT);\n            fail(\"Expected no \" + RemotingServices.SUBSYSTEM_ENDPOINT);\n        } catch (ServiceNotFoundException expected) {\n        }\n\n        try {\n            services.getContainer().getRequiredService(RemotingServices.serverServiceName(\"test-connector\"));\n            fail(\"Expected no \" + RemotingServices.serverServiceName(\"test-connector\"));\n        } catch (ServiceNotFoundException expected) {\n        }\n    }","commit_id":"fad93064dd78aedd94283792d41d5efb1c912fb9","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Tests that the outbound connections configured in the remoting subsytem are processed and services\n     * are created for them\n     *\n     * @throws Exception\n     */\n    @Test\n    public void testOutboundConnections() throws Exception {\n        final int outboundSocketBindingPort = 6799;\n        final int socketBindingPort = 1234;\n        KernelServices services = installInController(new AdditionalInitialization(){\n                @Override\n                protected void setupController(ControllerInitializer controllerInitializer) {\n                    controllerInitializer.addSocketBinding(\"test\", socketBindingPort);\n                    controllerInitializer.addRemoteOutboundSocketBinding(\"dummy-outbound-socket\", \"localhost\", outboundSocketBindingPort);\n                    controllerInitializer.addRemoteOutboundSocketBinding(\"other-outbound-socket\", \"localhost\", outboundSocketBindingPort);\n                }\n\n            },readResource(\"remoting-with-outbound-connections.xml\"));\n\n        ServiceController<?> endPointService = services.getContainer().getRequiredService(RemotingServices.SUBSYSTEM_ENDPOINT);\n        assertNotNull(\"Endpoint service was null\", endPointService);\n\n        final String remoteOutboundConnectionName = \"remote-conn1\";\n        ServiceName remoteOutboundConnectionServiceName = RemoteOutboundConnectionService.REMOTE_OUTBOUND_CONNECTION_BASE_SERVICE_NAME.append(remoteOutboundConnectionName);\n        ServiceController<?> remoteOutboundConnectionService = services.getContainer().getRequiredService(remoteOutboundConnectionServiceName);\n        assertNotNull(\"Remote outbound connection service for outbound connection:\" + remoteOutboundConnectionName + \" was null\", remoteOutboundConnectionService);\n        RemoteOutboundConnectionService remoteService = (RemoteOutboundConnectionService) remoteOutboundConnectionService.getService();\n        assertEquals(2, remoteService.connectionCreationOptions.size());\n\n        final String localOutboundConnectionName = \"local-conn1\";\n        ServiceName localOutboundConnectionServiceName = LocalOutboundConnectionService.LOCAL_OUTBOUND_CONNECTION_BASE_SERVICE_NAME.append(localOutboundConnectionName);\n        ServiceController<?> localOutboundConnectionService = services.getContainer().getRequiredService(localOutboundConnectionServiceName);\n        assertNotNull(\"Local outbound connection service for outbound connection:\" + localOutboundConnectionName + \" was null\", localOutboundConnectionService);\n        LocalOutboundConnectionService localService = (LocalOutboundConnectionService)localOutboundConnectionService.getService();\n        assertEquals(2, localService.connectionCreationOptions.size());\n    }","id":105641,"modified_method":"/**\n     * Tests that the outbound connections configured in the remoting subsytem are processed and services\n     * are created for them\n     *\n     * @throws Exception\n     */\n    @Test\n    public void testOutboundConnections() throws Exception {\n        final int outboundSocketBindingPort = 6799;\n        final int socketBindingPort = 1234;\n        KernelServices services = createKernelServicesBuilder(new AdditionalInitialization() {\n            @Override\n            protected void setupController(ControllerInitializer controllerInitializer) {\n                controllerInitializer.addSocketBinding(\"test\", socketBindingPort);\n                controllerInitializer.addRemoteOutboundSocketBinding(\"dummy-outbound-socket\", \"localhost\", outboundSocketBindingPort);\n                controllerInitializer.addRemoteOutboundSocketBinding(\"other-outbound-socket\", \"localhost\", outboundSocketBindingPort);\n            }\n\n        }).setSubsystemXmlResource(\"remoting-with-outbound-connections.xml\")\n                .build();\n\n        ServiceController<?> endPointService = services.getContainer().getRequiredService(RemotingServices.SUBSYSTEM_ENDPOINT);\n        assertNotNull(\"Endpoint service was null\", endPointService);\n\n        final String remoteOutboundConnectionName = \"remote-conn1\";\n        ServiceName remoteOutboundConnectionServiceName = RemoteOutboundConnectionService.REMOTE_OUTBOUND_CONNECTION_BASE_SERVICE_NAME.append(remoteOutboundConnectionName);\n        ServiceController<?> remoteOutboundConnectionService = services.getContainer().getRequiredService(remoteOutboundConnectionServiceName);\n        assertNotNull(\"Remote outbound connection service for outbound connection:\" + remoteOutboundConnectionName + \" was null\", remoteOutboundConnectionService);\n        RemoteOutboundConnectionService remoteService = (RemoteOutboundConnectionService) remoteOutboundConnectionService.getService();\n        assertEquals(2, remoteService.connectionCreationOptions.size());\n\n        final String localOutboundConnectionName = \"local-conn1\";\n        ServiceName localOutboundConnectionServiceName = LocalOutboundConnectionService.LOCAL_OUTBOUND_CONNECTION_BASE_SERVICE_NAME.append(localOutboundConnectionName);\n        ServiceController<?> localOutboundConnectionService = services.getContainer().getRequiredService(localOutboundConnectionServiceName);\n        assertNotNull(\"Local outbound connection service for outbound connection:\" + localOutboundConnectionName + \" was null\", localOutboundConnectionService);\n        LocalOutboundConnectionService localService = (LocalOutboundConnectionService) localOutboundConnectionService.getService();\n        assertEquals(2, localService.connectionCreationOptions.size());\n    }","commit_id":"fad93064dd78aedd94283792d41d5efb1c912fb9","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test @Ignore(\"AS7-4127\")\n    public void testSubsystemWithConnectorPropertyChange() throws Exception {\n        final int port = 12345;\n        KernelServices services = installInController(new AdditionalInitialization(){\n                @Override\n                protected void setupController(ControllerInitializer controllerInitializer) {\n                    controllerInitializer.addSocketBinding(\"test\", port);\n                }\n\n                @Override\n                protected void addExtraServices(ServiceTarget target) {\n                    //Needed for initialization of the RealmAuthenticationProviderService\n                    AbsolutePathService.addService(ServerEnvironment.CONTROLLER_TEMP_DIR, new File(\"target/temp\" + System.currentTimeMillis()).getAbsolutePath(), target);\n                }\n            },readResource(\"remoting-with-threads.xml\"));\n\n        CurrentConnectorAndController current = CurrentConnectorAndController.create(services, RemotingServices.SUBSYSTEM_ENDPOINT, RemotingServices.serverServiceName(\"test-connector\"));\n\n        //Test that write property reloads the connector\n        ModelNode write = new ModelNode();\n        write.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n        write.get(OP).set(WRITE_ATTRIBUTE_OPERATION);\n        write.get(OP_ADDR).add(SUBSYSTEM, RemotingExtension.SUBSYSTEM_NAME).add(CommonAttributes.CONNECTOR, \"test-connector\").add(CommonAttributes.PROPERTY, \"org.xnio.Options.WORKER_ACCEPT_THREADS\");\n        write.get(NAME).set(VALUE);\n        write.get(VALUE).set(2);\n        ModelNode result = services.executeOperation(write);\n        assertFalse(result.get(FAILURE_DESCRIPTION).toString(), result.hasDefined(FAILURE_DESCRIPTION));\n        assertEquals(2, services.readWholeModel().get(SUBSYSTEM, RemotingExtension.SUBSYSTEM_NAME, CommonAttributes.CONNECTOR, \"test-connector\", CommonAttributes.PROPERTY, \"org.xnio.Options.WORKER_ACCEPT_THREADS\").require(VALUE).asInt());\n        current.updateCurrentEndpoint(true);\n        current.updateCurrentConnector(false);\n\n        //remove property\n        ModelNode remove = write.clone();\n        remove.get(OP).set(REMOVE);\n        remove.remove(NAME);\n        remove.remove(VALUE);\n        result = services.executeOperation(remove);\n        assertFalse(result.get(FAILURE_DESCRIPTION).toString(), result.hasDefined(FAILURE_DESCRIPTION));\n        assertFalse(services.readWholeModel().get(SUBSYSTEM, RemotingExtension.SUBSYSTEM_NAME, CommonAttributes.CONNECTOR, \"test-connector\", CommonAttributes.PROPERTY, \"org.xnio.Options.WORKER_ACCEPT_THREADS\").isDefined());\n        current.updateCurrentEndpoint(true);\n        current.updateCurrentConnector(false);\n\n        //TODO property\n        ModelNode add = remove.clone();\n        add.get(OP).set(ADD);\n        add.get(VALUE).set(1);\n        result = services.executeOperation(add);\n        assertFalse(result.get(FAILURE_DESCRIPTION).toString(), result.hasDefined(FAILURE_DESCRIPTION));\n        assertEquals(1, services.readWholeModel().get(SUBSYSTEM, RemotingExtension.SUBSYSTEM_NAME, CommonAttributes.CONNECTOR, \"test-connector\", CommonAttributes.PROPERTY, \"org.xnio.Options.WORKER_ACCEPT_THREADS\").require(VALUE).asInt());\n        current.updateCurrentEndpoint(true);\n        current.updateCurrentConnector(false);\n    }","id":105642,"modified_method":"@Test\n    public void testSubsystemWithConnectorPropertyChange() throws Exception {\n        final int port = 12345;\n\n        KernelServices services = createKernelServicesBuilder(new AdditionalInitialization() {\n            @Override\n            protected void setupController(ControllerInitializer controllerInitializer) {\n                controllerInitializer.addSocketBinding(\"test\", port);\n            }\n\n            @Override\n            protected void addExtraServices(ServiceTarget target) {\n                //Needed for initialization of the RealmAuthenticationProviderService\n                AbsolutePathService.addService(ServerEnvironment.CONTROLLER_TEMP_DIR, new File(\"target/temp\" + System.currentTimeMillis()).getAbsolutePath(), target);\n            }\n        }).setSubsystemXmlResource(\"remoting-with-threads.xml\")\n                .build();\n\n\n        CurrentConnectorAndController current = CurrentConnectorAndController.create(services, RemotingServices.SUBSYSTEM_ENDPOINT, RemotingServices.serverServiceName(\"test-connector\"));\n\n        //Test that write property reloads the connector\n        ModelNode write = new ModelNode();\n        write.get(OPERATION_HEADERS, ALLOW_RESOURCE_SERVICE_RESTART).set(true);\n        write.get(OP).set(WRITE_ATTRIBUTE_OPERATION);\n        write.get(OP_ADDR).add(SUBSYSTEM, RemotingExtension.SUBSYSTEM_NAME).add(CommonAttributes.CONNECTOR, \"test-connector\").add(CommonAttributes.PROPERTY, \"org.xnio.Options.WORKER_ACCEPT_THREADS\");\n        write.get(NAME).set(VALUE);\n        write.get(VALUE).set(2);\n        ModelNode result = services.executeOperation(write);\n        assertFalse(result.get(FAILURE_DESCRIPTION).toString(), result.hasDefined(FAILURE_DESCRIPTION));\n        assertEquals(2, services.readWholeModel().get(SUBSYSTEM, RemotingExtension.SUBSYSTEM_NAME, CommonAttributes.CONNECTOR, \"test-connector\", CommonAttributes.PROPERTY, \"org.xnio.Options.WORKER_ACCEPT_THREADS\").require(VALUE).asInt());\n        current.updateCurrentEndpoint(true);\n        current.updateCurrentConnector(false);\n\n        //remove property\n        ModelNode remove = write.clone();\n        remove.get(OP).set(REMOVE);\n        remove.remove(NAME);\n        remove.remove(VALUE);\n        result = services.executeOperation(remove);\n        assertFalse(result.get(FAILURE_DESCRIPTION).toString(), result.hasDefined(FAILURE_DESCRIPTION));\n        assertFalse(services.readWholeModel().get(SUBSYSTEM, RemotingExtension.SUBSYSTEM_NAME, CommonAttributes.CONNECTOR, \"test-connector\", CommonAttributes.PROPERTY, \"org.xnio.Options.WORKER_ACCEPT_THREADS\").isDefined());\n        current.updateCurrentEndpoint(true);\n        current.updateCurrentConnector(false);\n\n        //TODO property\n        ModelNode add = remove.clone();\n        add.get(OP).set(ADD);\n        add.get(VALUE).set(1);\n        result = services.executeOperation(add);\n        assertFalse(result.get(FAILURE_DESCRIPTION).toString(), result.hasDefined(FAILURE_DESCRIPTION));\n        assertEquals(1, services.readWholeModel().get(SUBSYSTEM, RemotingExtension.SUBSYSTEM_NAME, CommonAttributes.CONNECTOR, \"test-connector\", CommonAttributes.PROPERTY, \"org.xnio.Options.WORKER_ACCEPT_THREADS\").require(VALUE).asInt());\n        current.updateCurrentEndpoint(true);\n        current.updateCurrentConnector(false);\n    }","commit_id":"fad93064dd78aedd94283792d41d5efb1c912fb9","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n        public void channelClosed( ChannelHandlerContext ctx, ChannelStateEvent e ) throws Exception\n        {\n            closedChannel( getURI( (InetSocketAddress) ctx.getChannel().getRemoteAddress() ) );\n            channels.remove( ctx.getChannel() );\n        }","id":105643,"modified_method":"@Override\n        public void channelClosed( ChannelHandlerContext ctx, ChannelStateEvent e ) throws Exception\n        {\n            closedChannel( ctx.getChannel() );\n            channels.remove( ctx.getChannel() );\n        }","commit_id":"a92ec12bc897a795b63e5b6a6a60e612e718dc69","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n        public void messageReceived( ChannelHandlerContext ctx, MessageEvent event ) throws Exception\n        {\n            final Message message = (Message) event.getMessage();\n            msgLog.debug( \"Received:\" + message );\n            receiver.receive( message );\n        }","id":105644,"modified_method":"@Override\n        public void messageReceived( ChannelHandlerContext ctx, MessageEvent event ) throws Exception\n        {\n            final Message message = (Message) event.getMessage();\n            msgLog.debug( \"Received: \" + message );\n            receiver.receive( message );\n        }","commit_id":"a92ec12bc897a795b63e5b6a6a60e612e718dc69","url":"https://github.com/neo4j/neo4j"},{"original_method":"protected void closedChannel( final URI uri )\n    {\n        Channel channel = connections.remove( uri );\n        if ( channel != null && channel.isOpen())\n        {\n            channel.close();\n        }\n\n        Listeners.notifyListeners( listeners, new Listeners.Notification<NetworkChannelsListener>()\n        {\n            @Override\n            public void notify( NetworkChannelsListener listener )\n            {\n                listener.channelClosed( uri );\n            }\n        } );\n    }","id":105645,"modified_method":"protected void closedChannel( final Channel channelClosed )\n    {\n        /*\n         * Netty channels do not have the remote address set when closed (technically, when not connected). So\n         * we need to do a reverse lookup\n         */\n        URI to = null;\n        for ( Map.Entry<URI, Channel> uriChannelEntry : connections.entrySet() )\n        {\n            if ( uriChannelEntry.getValue().equals( channelClosed ) )\n            {\n                to = uriChannelEntry.getKey();\n                break;\n            }\n        }\n\n        if ( to == null )\n        {\n            msgLog.error( \"Channel \" + channelClosed + \" had no URI associated with it.\" );\n            return;\n        }\n\n        connections.remove( to );\n\n        final URI uri = to;\n\n\n        Listeners.notifyListeners( listeners, new Listeners.Notification<NetworkChannelsListener>()\n        {\n            @Override\n            public void notify( NetworkChannelsListener listener )\n            {\n                listener.channelClosed( uri );\n            }\n        } );\n    }","commit_id":"a92ec12bc897a795b63e5b6a6a60e612e718dc69","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n        public void channelOpen( ChannelHandlerContext ctx, ChannelStateEvent e ) throws Exception\n        {\n            Channel ctxChannel = ctx.getChannel();\n            openedChannel( getURI( (InetSocketAddress) ctxChannel.getRemoteAddress() ), ctxChannel );\n            channels.add( ctxChannel );\n        }","id":105646,"modified_method":"@Override\n        public void channelConnected( ChannelHandlerContext ctx, ChannelStateEvent e ) throws Exception\n        {\n            Channel ctxChannel = ctx.getChannel();\n            openedChannel( getURI( (InetSocketAddress) ctxChannel.getRemoteAddress() ), ctxChannel );\n            channels.add( ctxChannel );\n        }","commit_id":"a92ec12bc897a795b63e5b6a6a60e612e718dc69","url":"https://github.com/neo4j/neo4j"},{"original_method":"private Server( final CountDownLatch latch, final Map<String, String> config )\n        {\n            final Config conf = new Config( config, ClusterSettings.class );\n            networkReceiver = life.add(new NetworkReceiver(new NetworkReceiver.Configuration()\n            {\n                @Override\n                public HostnamePort clusterServer()\n                {\n                    return conf.get( ClusterSettings.cluster_server );\n                }\n\n                @Override\n                public int defaultPort()\n                {\n                    return 5001;\n                }\n            }, new DevNullLoggingService()));\n\n            networkSender = life.add(new NetworkSender(new NetworkSender.Configuration()\n            {\n                @Override\n                public int defaultPort()\n                {\n                    return 5001;\n                }\n            }, networkReceiver, new DevNullLoggingService()));\n\n            life.add( new LifecycleAdapter()\n            {\n                @Override\n                public void start() throws Throwable\n                {\n                    networkReceiver.addMessageProcessor( new MessageProcessor()\n                    {\n                        @Override\n                        public boolean process( Message<? extends MessageType> message )\n                        {\n                            // server receives a message\n                            System.out.println(\"#\"+message);\n                            processedMessage.set(true);\n                            latch.countDown();\n                            return true;\n                        }\n                    } );\n                }\n            } );\n        }","id":105647,"modified_method":"private Server( final CountDownLatch latch, final Map<String, String> config )\n        {\n            final Config conf = new Config( config, ClusterSettings.class );\n            networkReceiver = life.add(new NetworkReceiver(new NetworkReceiver.Configuration()\n            {\n                @Override\n                public HostnamePort clusterServer()\n                {\n                    return conf.get( ClusterSettings.cluster_server );\n                }\n\n                @Override\n                public int defaultPort()\n                {\n                    return 5001;\n                }\n            }, new DevNullLoggingService()));\n\n            networkSender = life.add(new NetworkSender(new NetworkSender.Configuration()\n            {\n                @Override\n                public int defaultPort()\n                {\n                    return 5001;\n                }\n            }, networkReceiver, new DevNullLoggingService()));\n\n            life.add( new LifecycleAdapter()\n            {\n                @Override\n                public void start() throws Throwable\n                {\n                    networkReceiver.addMessageProcessor( new MessageProcessor()\n                    {\n                        @Override\n                        public boolean process( Message<? extends MessageType> message )\n                        {\n                            // server receives a message\n                            processedMessage.set(true);\n                            latch.countDown();\n                            return true;\n                        }\n                    } );\n                }\n            } );\n        }","commit_id":"a92ec12bc897a795b63e5b6a6a60e612e718dc69","url":"https://github.com/neo4j/neo4j"},{"original_method":"private static boolean bindDocComment(TreeElement docComment) {\n    TreeElement element = docComment.getTreeNext();\n    if (element == null) return false;\n    TreeElement startSpaces = null;\n    ASTNode endSpaces;\n\n    // Bypass meaningless tokens and hold'em in hands\n    while (element.getElementType() == WHITE_SPACE ||\n           element.getElementType() == C_STYLE_COMMENT ||\n           element.getElementType() == END_OF_LINE_COMMENT ||\n           (element.getElementType() == IMPORT_LIST && element.getTextLength() == 0)\n      ) {\n      if (startSpaces == null) startSpaces = element;\n      element = element.getTreeNext();\n      if (element == null) return false;\n    }\n\n    endSpaces = element;\n\n    if (element.getElementType() == CLASS || element.getElementType() == FIELD || element.getElementType() == METHOD ||\n        element.getElementType() == ENUM_CONSTANT) {\n      TreeElement first = (TreeElement)element.getFirstChildNode();\n\n      TreeElement endRange = docComment;\n      if(startSpaces != null){\n        element = startSpaces.getTreeNext();\n        if (startSpaces.getElementType() != IMPORT_LIST) {\n          endRange = startSpaces;\n        }\n      }\n\n      TreeUtil.removeRange(docComment, endRange.getTreeNext());\n      TreeUtil.insertBefore(first, docComment);\n\n      if (startSpaces != null) {\n        TreeElement anchor = startSpaces;\n\n        while (element != endSpaces) {\n          TreeElement next = element.getTreeNext();\n          if (element.getElementType() != IMPORT_LIST) {\n            TreeUtil.remove(element);\n            TreeUtil.insertAfter(anchor, element);\n            anchor = element;\n          }\n          element = next;\n        }\n      }\n      return true;\n    }\n    return false;\n  }","id":105648,"modified_method":"private static boolean bindDocComment(TreeElement docComment) {\n    TreeElement element = docComment.getTreeNext();\n    if (element == null) return false;\n    TreeElement startSpaces = null;\n    TreeElement lastSpace = null;\n\n    TreeElement importList = null;\n    // Bypass meaningless tokens and hold'em in hands\n    while (element.getElementType() == WHITE_SPACE ||\n           element.getElementType() == C_STYLE_COMMENT ||\n           element.getElementType() == END_OF_LINE_COMMENT ||\n           (element.getElementType() == IMPORT_LIST && element.getTextLength() == 0)\n      ) {\n      if (element.getElementType() == IMPORT_LIST) importList = element;\n      if (startSpaces == null) startSpaces = element;\n      lastSpace = element;\n      element = element.getTreeNext();\n      if (element == null) return false;\n    }\n\n    if (element.getElementType() == CLASS || element.getElementType() == FIELD || element.getElementType() == METHOD ||\n        element.getElementType() == ENUM_CONSTANT) {\n      TreeElement first = (TreeElement)element.getFirstChildNode();\n      if (startSpaces != null) {\n        TreeUtil.removeRange(docComment, element);\n      } else {\n        TreeUtil.remove(docComment);\n      }\n\n      TreeUtil.insertBefore(first, docComment);\n\n      if (importList != null) {\n        TreeUtil.remove(importList);\n        TreeUtil.insertBefore(element, importList);\n      }\n\n      return true;\n    }\n    return false;\n  }","commit_id":"0b1ead16a2cf3a37ca42219a05e1491c0f12b159","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void removeRange(TreeElement start, TreeElement end) {\n    if (start == null) return;\n    if(start == end) return;\n    final CompositeElement parent = start.getTreeParent();\n    final TreeElement startPrev = start.getTreePrev();\n    final TreeElement endPrev = end != null ? end.getTreePrev() : null;\n    LOG.assertTrue(end == null || end.getTreeParent() == parent, \"Trying to remove non-child\");\n\n    if (parent != null){\n      if (start == parent.getFirstChildNode()){\n        parent.firstChild = end;\n      }\n      if (end == null){\n        parent.lastChild = startPrev;\n      }\n    }\n    if (startPrev != null){\n      startPrev.setTreeNext(end);\n    }\n    if (end != null){\n      end.setTreePrev(startPrev);\n    }\n\n    start.setTreePrev(null);\n    if (parent != null){\n      for(TreeElement element = start; element != end; element = element.getTreeNext()){\n        element.setTreeParent(null);\n      }\n    }\n    if (endPrev != null){\n      endPrev.setTreeNext(null);\n    }\n\n    if (DebugUtil.CHECK){\n      if (parent != null){\n        DebugUtil.checkTreeStructure(parent);\n      }\n      DebugUtil.checkTreeStructure(start);\n    }\n  }","id":105649,"modified_method":"public static void removeRange(TreeElement start, TreeElement end) {\n    if (start == null) return;\n    if(start == end) return;\n    final CompositeElement parent = start.getTreeParent();\n    final TreeElement startPrev = start.getTreePrev();\n    final TreeElement endPrev = end != null ? end.getTreePrev() : null;\n    LOG.assertTrue(end == null || end.getTreeParent() == parent, \"Trying to remove non-child\");\n\n    if (parent != null){\n      if (start == parent.getFirstChildNode()){\n        parent.firstChild = end;\n      }\n      if (end == null){\n        parent.lastChild = startPrev;\n      }\n    }\n    if (startPrev != null){\n      startPrev.setTreeNext(end);\n    }\n    if (end != null){\n      end.setTreePrev(startPrev);\n    }\n\n    start.setTreePrev(null);\n    if (endPrev != null){\n      endPrev.setTreeNext(null);\n    }\n\n    if (parent != null){\n      for(TreeElement element = start; element != null; element = element.getTreeNext()){\n        element.setTreeParent(null);\n      }\n    }\n\n    if (DebugUtil.CHECK){\n      if (parent != null){\n        DebugUtil.checkTreeStructure(parent);\n      }\n      DebugUtil.checkTreeStructure(start);\n    }\n  }","commit_id":"0b1ead16a2cf3a37ca42219a05e1491c0f12b159","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * Creates the JMF <tt>CaptureDevice<\/tt> this instance represents and\n     * provides an implementation of <tt>MediaDevice<\/tt> for.\n     *\n     * @return the JMF <tt>CaptureDevice<\/tt> this instance represents and\n     * provides an implementation of <tt>MediaDevice<\/tt> for; <tt>null<\/tt>\n     * if the creation fails\n     */\n    @Override\n    synchronized CaptureDevice createCaptureDevice()\n    {\n        CaptureDevice captureDevice = null;\n\n        if (getDirection().allowsSending())\n        {\n            if (captureDeviceSharing == null)\n            {\n                CaptureDeviceInfo captureDeviceInfo = getCaptureDeviceInfo();\n                boolean createCaptureDeviceIfNull = true;\n\n                if (captureDeviceInfo != null)\n                {\n                    MediaLocator locator = captureDeviceInfo.getLocator();\n\n                    if ((locator != null)\n                            && \"javasound\"\n                                    .equalsIgnoreCase(locator.getProtocol()))\n                    {\n                        captureDevice = super.createCaptureDevice();\n                        createCaptureDeviceIfNull = false;\n                        if (captureDevice != null)\n                        {\n                            captureDeviceSharing\n                                = createCaptureDeviceSharing(captureDevice);\n                            captureDevice\n                                = captureDeviceSharing.createOutputDataSource();\n                        }\n                    }\n                }\n                if ((captureDevice == null) && createCaptureDeviceIfNull)\n                    captureDevice = super.createCaptureDevice();\n            }\n            else\n                captureDevice = captureDeviceSharing.createOutputDataSource();\n        }\n        return captureDevice;\n    }","id":105650,"modified_method":"/**\n     * Creates the JMF <tt>CaptureDevice<\/tt> this instance represents and\n     * provides an implementation of <tt>MediaDevice<\/tt> for.\n     *\n     * @return the JMF <tt>CaptureDevice<\/tt> this instance represents and\n     * provides an implementation of <tt>MediaDevice<\/tt> for; <tt>null<\/tt>\n     * if the creation fails\n     */\n    @Override\n    synchronized CaptureDevice createCaptureDevice()\n    {\n        CaptureDevice captureDevice = null;\n\n        if (getDirection().allowsSending())\n        {\n            if (captureDeviceSharing == null)\n            {\n                CaptureDeviceInfo captureDeviceInfo = getCaptureDeviceInfo();\n                boolean createCaptureDeviceIfNull = true;\n\n                if (captureDeviceInfo != null)\n                {\n                    MediaLocator locator = captureDeviceInfo.getLocator();\n                    String locatorProtocol\n                        = (locator == null) ? null : locator.getProtocol();\n\n                    if (\"javasound\".equalsIgnoreCase(locatorProtocol)\n                            || PortAudioAuto.LOCATOR_PROTOCOL\n                                    .equalsIgnoreCase(locatorProtocol))\n                    {\n                        captureDevice = super.createCaptureDevice();\n                        createCaptureDeviceIfNull = false;\n                        if (captureDevice != null)\n                        {\n                            captureDeviceSharing\n                                = createCaptureDeviceSharing(captureDevice);\n                            captureDevice\n                                = captureDeviceSharing.createOutputDataSource();\n                        }\n                    }\n                }\n                if ((captureDevice == null) && createCaptureDeviceIfNull)\n                    captureDevice = super.createCaptureDevice();\n            }\n            else\n                captureDevice = captureDeviceSharing.createOutputDataSource();\n        }\n        return captureDevice;\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Disconnect the datasource\n     */\n    public synchronized void disconnect()\n    {\n        if (!connected)\n            return;\n\n        try\n        {\n            stop();\n        }\n        catch (IOException ioex)\n        {\n            logger\n                .warn(\n                    \"Failed to stop DataSource with locator \" + getLocator(),\n                    ioex);\n        }\n\n        connected = false;\n        if (logger.isTraceEnabled())\n            logger.trace(\"Disconnected \" + MediaStreamImpl.toString(this));\n    }","id":105651,"modified_method":"/**\n     * Closes the connection to the media source specified by the\n     * <tt>MediaLocator<\/tt> of this <tt>DataSource<\/tt>. Allows extenders to\n     * override and be sure that there will be no request to close a connection\n     * if the connection has not been opened yet.\n     */\n    protected synchronized void doDisconnect()\n    {\n        try\n        {\n            synchronized (this)\n            {\n                if (streams != null)\n                {\n                    for (Object stream : streams)\n                    {\n                        try\n                        {\n                            ((PortAudioStream) stream).setDeviceIndex(\n                                    PortAudio.paNoDevice);\n                        }\n                        catch (IOException ioex)\n                        {\n                        }\n                    }\n                }\n            }\n        }\n        finally\n        {\n            super.doDisconnect();\n        }\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Connect the datasource\n     * @throws IOException if we cannot initialize portaudio.\n     */\n    public synchronized void connect()\n        throws IOException\n    {\n        if (connected)\n            return;\n\n        connected = true;\n        if (logger.isTraceEnabled())\n            logger.trace(\"Connected \" + MediaStreamImpl.toString(this));\n    }","id":105652,"modified_method":"/**\n     * Opens a connection to the media source specified by the\n     * <tt>MediaLocator<\/tt> of this <tt>DataSource<\/tt>.\n     *\n     * @throws IOException if anything goes wrong while opening the connection\n     * to the media source specified by the <tt>MediaLocator<\/tt> of this\n     * <tt>DataSource<\/tt>\n     * @see AbstractPullBufferCaptureDevice#doConnect()\n     */\n    @Override\n    protected void doConnect()\n        throws IOException\n    {\n        super.doConnect();\n\n        int deviceIndex = getDeviceIndex();\n\n        synchronized (this)\n        {\n            for (Object stream : getStreams())\n                ((PortAudioStream) stream).setDeviceIndex(deviceIndex);\n        }\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Returns the state of echo cancel configuration.\n     * @return state of echo cancel.\n     */\n    public boolean isEchoCancelEnabled()\n    {\n        try\n        {\n            return PortAudioManager.getInstance().isEnabledEchoCancel();\n        }\n        catch (PortAudioException e)\n        {\n            return false;\n        }\n    }","id":105653,"modified_method":"/**\n     * Returns the state of echo cancel configuration.\n     * @return state of echo cancel.\n     */\n    public boolean isEchoCancelEnabled()\n    {\n        return PortAudioManager.isEnabledEchoCancel();\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Returns the state of noise suppression configuration.\n     * @return state of noise suppression.\n     */\n    public boolean isDenoiseEnabled()\n    {\n        try\n        {\n            return PortAudioManager.getInstance().isEnabledDeNoise();\n        }\n        catch (PortAudioException e)\n        {\n            return false;\n        }\n    }","id":105654,"modified_method":"/**\n     * Returns the state of noise suppression configuration.\n     * @return state of noise suppression.\n     */\n    public boolean isDenoiseEnabled()\n    {\n        return PortAudioManager.isEnabledDeNoise();\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Change the state of echo cancel configuration\n     * @param enabled true if enabled.\n     * @param save whether we will save this option or not.\n     */\n    public void setEchoCancel(boolean enabled, boolean save)\n    {\n        try\n        {\n            PortAudioManager portAudioManager = PortAudioManager.getInstance();\n\n            portAudioManager\n                .setEchoCancel(enabled, portAudioManager.getFilterLength());\n\n            if(save)\n                NeomediaActivator.getConfigurationService()\n                    .setProperty(PROP_AUDIO_ECHOCANCEL_ENABLED, enabled);\n        }\n        catch (PortAudioException ex)\n        {\n            logger.error(\"Error setting echocancel config\", ex);\n        }\n    }","id":105655,"modified_method":"/**\n     * Change the state of echo cancel configuration\n     * @param enabled true if enabled.\n     * @param save whether we will save this option or not.\n     */\n    public void setEchoCancel(boolean enabled, boolean save)\n    {\n        PortAudioManager.setEchoCancel(\n            enabled,\n            PortAudioManager.getFilterLengthInMillis());\n\n        if(save)\n            NeomediaActivator.getConfigurationService()\n                    .setProperty(PROP_AUDIO_ECHOCANCEL_ENABLED, enabled);\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Change the state of noise suppression configuration\n     * @param enabled true if enabled.\n     * @param save whether we will save this option or not.\n     */\n    public void setDenoise(boolean enabled, boolean save)\n    {\n        try\n        {\n            PortAudioManager.getInstance().setDeNoise(enabled);\n\n            if(save)\n                NeomediaActivator.getConfigurationService()\n                    .setProperty(PROP_AUDIO_DENOISE_ENABLED, enabled);\n        }\n        catch (PortAudioException ex)\n        {\n            logger.error(\"Error setting denoise config\", ex);\n        }\n    }","id":105656,"modified_method":"/**\n     * Change the state of noise suppression configuration\n     * @param enabled true if enabled.\n     * @param save whether we will save this option or not.\n     */\n    public void setDenoise(boolean enabled, boolean save)\n    {\n        PortAudioManager.setDeNoise(enabled);\n\n        if(save)\n            NeomediaActivator.getConfigurationService()\n                    .setProperty(PROP_AUDIO_DENOISE_ENABLED, enabled);\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Set audio playback device.\n     * @param audioPlaybackDevice the audioPlaybackDevice to set.\n     * @param save whether we will save this option or not.\n     */\n    public void setAudioPlaybackDevice(CaptureDeviceInfo audioPlaybackDevice,\n                                       boolean save)\n    {\n        if(this.audioPlaybackDevice != audioPlaybackDevice)\n        {\n            CaptureDeviceInfo oldDev = this.audioPlaybackDevice;\n            this.audioPlaybackDevice = audioPlaybackDevice;\n            setDeviceToRenderer(audioPlaybackDevice);\n\n            // we changed playback device, so we are using portaudio\n            // lets use it, remove javasound renderer to be sure\n            // its not used anymore and install the portaudio one\n            removeJavaSoundRenderer();\n            initPortAudioRenderer();\n\n            if(save)\n            {\n                ConfigurationService config\n                    = NeomediaActivator.getConfigurationService();\n\n                if (audioPlaybackDevice != null)\n                {\n                    config.setProperty(PROP_AUDIO_PLAYBACK_DEVICE,\n                        audioPlaybackDevice.getName());\n\n                    config.setProperty(PROP_AUDIO_DEVICE_IS_DISABLED, false);\n                }\n                else\n                    config.setProperty(PROP_AUDIO_PLAYBACK_DEVICE, null);\n            }\n\n            firePropertyChange(AUDIO_PLAYBACK_DEVICE,\n                oldDev, audioPlaybackDevice);\n        }\n    }","id":105657,"modified_method":"/**\n     * Set audio playback device.\n     * @param audioPlaybackDevice the audioPlaybackDevice to set.\n     * @param save whether we will save this option or not.\n     */\n    public void setAudioPlaybackDevice(CaptureDeviceInfo audioPlaybackDevice,\n                                       boolean save)\n    {\n        if(this.audioPlaybackDevice != audioPlaybackDevice)\n        {\n            CaptureDeviceInfo oldDev = this.audioPlaybackDevice;\n\n            this.audioPlaybackDevice = audioPlaybackDevice;\n\n            if (this.audioPlaybackDevice != null)\n            {\n                /*\n                 * The audioPlaybackDevice is non-null only for PortAudio for\n                 * now i.e. we currently want to use PortAudio instead of\n                 * JavaSound. So we have to disable JavaSound and enable\n                 * PortAudio.\n                 */\n                PlugInManager.removePlugIn(\n                    \"com.sun.media.renderer.audio.JavaSoundRenderer\",\n                    PlugInManager.RENDERER);\n\n                PortAudioRenderer.setDefaultLocator(\n                        this.audioPlaybackDevice.getLocator());\n                PlugInManager.addPlugIn(\n                        \"net.java.sip.communicator.impl.neomedia.jmfext.media\"\n                            + \".renderer.audio.PortAudioRenderer\",\n                        new PortAudioRenderer().getSupportedInputFormats(),\n                        null,\n                        PlugInManager.RENDERER);\n            }\n\n            if(save)\n            {\n                ConfigurationService config\n                    = NeomediaActivator.getConfigurationService();\n\n                if (audioPlaybackDevice != null)\n                {\n                    config.setProperty(PROP_AUDIO_PLAYBACK_DEVICE,\n                        audioPlaybackDevice.getName());\n\n                    config.setProperty(PROP_AUDIO_DEVICE_IS_DISABLED, false);\n                }\n                else\n                    config.setProperty(PROP_AUDIO_PLAYBACK_DEVICE, null);\n            }\n\n            firePropertyChange(AUDIO_PLAYBACK_DEVICE,\n                oldDev, audioPlaybackDevice);\n        }\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Set entropy to ZrtpFortuna singleton.\n     * \n     * The methods reads entropy data and seeds the ZrtpFortuna singleton. \n     * The methods seeds the first pool (0) of Fortuna to make sure that\n     * this entropy is always used.\n     * \n     * @return true if entropy data was available, false otherwise.\n     */\n    public boolean setEntropy()\n    {\n        boolean retValue = false;\n        if (deviceConfiguration.getAudioSystem().equals(\n                DeviceConfiguration.AUDIO_SYSTEM_JAVASOUND))\n        {\n            // retValue = readJMFAudioEntropy();\n        }\n        else if (deviceConfiguration.getAudioSystem().equals(\n                DeviceConfiguration.AUDIO_SYSTEM_PORTAUDIO))\n        {\n            GatherPortAudio gatherer = new GatherPortAudio();\n            retValue = gatherer.preparePortAudioEntropy();\n            if (retValue)\n            {\n                gatherer.start();\n            }\n        }\n        return retValue;\n    }","id":105658,"modified_method":"/**\n     * Set entropy to ZrtpFortuna singleton.\n     * \n     * The methods reads entropy data and seeds the ZrtpFortuna singleton. \n     * The methods seeds the first pool (0) of Fortuna to make sure that\n     * this entropy is always used.\n     * \n     * @return true if entropy data was available, false otherwise.\n     */\n    public boolean setEntropy()\n    {\n        boolean retValue = false;\n        if (deviceConfiguration.getAudioSystem().equals(\n                DeviceConfiguration.AUDIO_SYSTEM_JAVASOUND))\n        {\n            // retValue = readJMFAudioEntropy();\n        }\n        else if (deviceConfiguration.getAudioSystem().equals(\n                DeviceConfiguration.AUDIO_SYSTEM_PORTAUDIO))\n        {\n//            GatherPortAudio gatherer = new GatherPortAudio();\n//            retValue = gatherer.preparePortAudioEntropy();\n//            if (retValue)\n//                gatherer.start();\n        }\n        return retValue;\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * @param inputBuffer\n     * @param outputBuffer\n     * @return\n     * @see AbstractCodecExt#doProcess(Buffer, Buffer)\n     */\n    protected int doProcess(Buffer inputBuffer, Buffer outputBuffer)\n    {\n        Format inputFormat = inputBuffer.getFormat();\n\n        if ((inputFormat != null)\n                && (inputFormat != this.inputFormat)\n                && !inputFormat.equals(this.inputFormat))\n        {\n            if (null == setInputFormat(inputFormat))\n                return BUFFER_PROCESSED_FAILED;\n        }\n        inputFormat = this.inputFormat;\n\n        /*\n         * Make sure that the native Speex decoder which is represented by this\n         * instance is configured to work with the inputFormat.\n         */\n        AudioFormat inputAudioFormat = (AudioFormat) inputFormat;\n        int inputSampleRate = (int) inputAudioFormat.getSampleRate();\n\n        if ((state != 0) && (sampleRate != inputSampleRate))\n        {\n            Speex.speex_decoder_destroy(state);\n            state = 0;\n            sampleRate = 0;\n            frameSize = 0;\n        }\n        if (state == 0)\n        {\n            long mode\n                = Speex.speex_lib_get_mode(\n                        (inputSampleRate == 16000)\n                            ? Speex.SPEEX_MODEID_WB\n                            : (inputSampleRate == 32000)\n                                ? Speex.SPEEX_MODEID_UWB\n                                : Speex.SPEEX_MODEID_NB);\n\n            if (mode == 0)\n                return BUFFER_PROCESSED_FAILED;\n            state = Speex.speex_decoder_init(mode);\n            if (state == 0)\n                return BUFFER_PROCESSED_FAILED;\n            if (Speex.speex_decoder_ctl(\n                        state,\n                        Speex.SPEEX_SET_ENH,\n                        1)\n                    != 0)\n                return BUFFER_PROCESSED_FAILED;\n            if (Speex.speex_decoder_ctl(\n                        state,\n                        Speex.SPEEX_SET_SAMPLING_RATE,\n                        inputSampleRate)\n                    != 0)\n                return BUFFER_PROCESSED_FAILED;\n\n            int frameSize\n                = Speex.speex_decoder_ctl(state, Speex.SPEEX_GET_FRAME_SIZE);\n\n            if (frameSize < 0)\n                return BUFFER_PROCESSED_FAILED;\n\n            sampleRate = inputSampleRate;\n            this.frameSize = frameSize * 2 /* (sampleSizeInBits / 8) */;\n            duration = (long) ((frameSize * 1000 * 1000000) / sampleRate);\n        }\n\n        /* Read the encoded audio data from inputBuffer into the SpeexBits. */\n        int inputLength = inputBuffer.getLength();\n\n        if (inputLength > 0)\n        {\n            byte[] input = (byte[]) inputBuffer.getData();\n            int inputOffset = inputBuffer.getOffset();\n\n            Speex.speex_bits_read_from(bits, input, inputOffset, inputLength);\n            inputLength = 0;\n            inputBuffer.setLength(inputLength);\n            inputBuffer.setOffset(inputOffset + inputLength);\n        }\n\n        /* At long last, do the actual decoding. */\n        int outputLength = this.frameSize;\n\n        if (outputLength > 0)\n        {\n            byte[] output = validateByteArraySize(outputBuffer, outputLength);\n\n            if (0 == Speex.speex_decode_int(state, bits, output, 0))\n            {\n                outputBuffer.setDuration(duration);\n                outputBuffer.setFormat(getOutputFormat());\n                outputBuffer.setLength(outputLength);\n                outputBuffer.setOffset(0);\n            }\n            else\n            {\n                outputBuffer.setLength(0);\n                discardOutputBuffer(outputBuffer);\n            }\n        }\n        else\n        {\n            outputBuffer.setLength(0);\n            discardOutputBuffer(outputBuffer);\n        }\n\n        if ((inputLength < 1) && (Speex.speex_bits_remaining(bits) < 1))\n            return BUFFER_PROCESSED_OK;\n        else\n            return BUFFER_PROCESSED_OK | INPUT_BUFFER_NOT_CONSUMED;\n    }","id":105659,"modified_method":"/**\n     * @param inputBuffer\n     * @param outputBuffer\n     * @return\n     * @see AbstractCodecExt#doProcess(Buffer, Buffer)\n     */\n    protected int doProcess(Buffer inputBuffer, Buffer outputBuffer)\n    {\n        Format inputFormat = inputBuffer.getFormat();\n\n        if ((inputFormat != null)\n                && (inputFormat != this.inputFormat)\n                && !inputFormat.equals(this.inputFormat))\n        {\n            if (null == setInputFormat(inputFormat))\n                return BUFFER_PROCESSED_FAILED;\n        }\n        inputFormat = this.inputFormat;\n\n        /*\n         * Make sure that the native Speex decoder which is represented by this\n         * instance is configured to work with the inputFormat.\n         */\n        AudioFormat inputAudioFormat = (AudioFormat) inputFormat;\n        int inputSampleRate = (int) inputAudioFormat.getSampleRate();\n\n        if ((state != 0) && (sampleRate != inputSampleRate))\n        {\n            Speex.speex_decoder_destroy(state);\n            state = 0;\n            sampleRate = 0;\n            frameSize = 0;\n        }\n        if (state == 0)\n        {\n            long mode\n                = Speex.speex_lib_get_mode(\n                        (inputSampleRate == 16000)\n                            ? Speex.SPEEX_MODEID_WB\n                            : (inputSampleRate == 32000)\n                                ? Speex.SPEEX_MODEID_UWB\n                                : Speex.SPEEX_MODEID_NB);\n\n            if (mode == 0)\n                return BUFFER_PROCESSED_FAILED;\n            state = Speex.speex_decoder_init(mode);\n            if (state == 0)\n                return BUFFER_PROCESSED_FAILED;\n            if (Speex.speex_decoder_ctl(\n                        state,\n                        Speex.SPEEX_SET_ENH,\n                        1)\n                    != 0)\n                return BUFFER_PROCESSED_FAILED;\n            if (Speex.speex_decoder_ctl(\n                        state,\n                        Speex.SPEEX_SET_SAMPLING_RATE,\n                        inputSampleRate)\n                    != 0)\n                return BUFFER_PROCESSED_FAILED;\n\n            int frameSize\n                = Speex.speex_decoder_ctl(state, Speex.SPEEX_GET_FRAME_SIZE);\n\n            if (frameSize < 0)\n                return BUFFER_PROCESSED_FAILED;\n\n            sampleRate = inputSampleRate;\n            this.frameSize = frameSize * 2 /* (sampleSizeInBits / 8) */;\n            duration = (long) ((frameSize * 1000 * 1000000) / sampleRate);\n        }\n\n        /* Read the encoded audio data from inputBuffer into the SpeexBits. */\n        int inputLength = inputBuffer.getLength();\n\n        if (inputLength > 0)\n        {\n            byte[] input = (byte[]) inputBuffer.getData();\n            int inputOffset = inputBuffer.getOffset();\n\n            Speex.speex_bits_read_from(bits, input, inputOffset, inputLength);\n            inputLength = 0;\n            inputBuffer.setLength(inputLength);\n            inputBuffer.setOffset(inputOffset + inputLength);\n        }\n\n        /* At long last, do the actual decoding. */\n        int outputLength = this.frameSize;\n        boolean inputBufferNotConsumed;\n\n        if (outputLength > 0)\n        {\n            byte[] output = validateByteArraySize(outputBuffer, outputLength);\n\n            if (0 == Speex.speex_decode_int(state, bits, output, 0))\n            {\n                outputBuffer.setDuration(duration);\n                outputBuffer.setFormat(getOutputFormat());\n                outputBuffer.setLength(outputLength);\n                outputBuffer.setOffset(0);\n                inputBufferNotConsumed = (Speex.speex_bits_remaining(bits) > 0);\n            }\n            else\n            {\n                outputBuffer.setLength(0);\n                discardOutputBuffer(outputBuffer);\n                inputBufferNotConsumed = false;\n            }\n        }\n        else\n        {\n            outputBuffer.setLength(0);\n            discardOutputBuffer(outputBuffer);\n            inputBufferNotConsumed = false;\n        }\n\n        if ((inputLength < 1) && !inputBufferNotConsumed)\n            return BUFFER_PROCESSED_OK;\n        else\n            return BUFFER_PROCESSED_OK | INPUT_BUFFER_NOT_CONSUMED;\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * @param inputBuffer\n     * @param outputBuffer\n     * @return\n     * @see AbstractCodecExt#doProcess(Buffer, Buffer)\n     */\n    protected int doProcess(Buffer inputBuffer, Buffer outputBuffer)\n    {\n        Format inputFormat = inputBuffer.getFormat();\n\n        if ((inputFormat != null)\n                && (inputFormat != this.inputFormat)\n                && !inputFormat.equals(this.inputFormat))\n        {\n            if (null == setInputFormat(inputFormat))\n                return BUFFER_PROCESSED_FAILED;\n        }\n        inputFormat = this.inputFormat;\n\n        /*\n         * Make sure that the native Speex encoder which is represented by this\n         * instance is configured to work with the inputFormat.\n         */\n        AudioFormat inputAudioFormat = (AudioFormat) inputFormat;\n        int inputSampleRate = (int) inputAudioFormat.getSampleRate();\n\n        if ((state != 0) && (sampleRate != inputSampleRate))\n        {\n            Speex.speex_encoder_destroy(state);\n            state = 0;\n            sampleRate = 0;\n            frameSize = 0;\n        }\n        if (state == 0)\n        {\n            long mode\n                = Speex.speex_lib_get_mode(\n                        (inputSampleRate == 16000)\n                            ? Speex.SPEEX_MODEID_WB\n                            : (inputSampleRate == 32000)\n                                ? Speex.SPEEX_MODEID_UWB\n                                : Speex.SPEEX_MODEID_NB);\n\n            if (mode == 0)\n                return BUFFER_PROCESSED_FAILED;\n            state = Speex.speex_encoder_init(mode);\n            if (state == 0)\n                return BUFFER_PROCESSED_FAILED;\n            if (Speex.speex_encoder_ctl(\n                        state,\n                        Speex.SPEEX_SET_QUALITY,\n                        4)\n                    != 0)\n                return BUFFER_PROCESSED_FAILED;\n            if (Speex.speex_encoder_ctl(\n                        state,\n                        Speex.SPEEX_SET_SAMPLING_RATE,\n                        inputSampleRate)\n                    != 0)\n                return BUFFER_PROCESSED_FAILED;\n\n            int frameSize\n                = Speex.speex_encoder_ctl(state, Speex.SPEEX_GET_FRAME_SIZE);\n\n            if (frameSize < 0)\n                return BUFFER_PROCESSED_FAILED;\n\n            sampleRate = inputSampleRate;\n            this.frameSize = frameSize * 2 /* (sampleSizeInBits / 8) */;\n            duration = (long) ((frameSize * 1000 * 1000000) / sampleRate);\n        }\n\n        /*\n         * The native Speex encoder always processes frameSize bytes from the\n         * input in one call. If any specified inputBuffer is with a different\n         * length, then we'll have to wait for more bytes to arrive until we\n         * have frameSize bytes. Remember whatever is left unprocessed in\n         * previousInput and prepend it to the next inputBuffer.\n         */\n        byte[] input = (byte[]) inputBuffer.getData();\n        int inputLength = inputBuffer.getLength();\n        int inputOffset = inputBuffer.getOffset();\n\n        if ((previousInput != null) && (previousInputLength > 0))\n        {\n            if (previousInputLength < this.frameSize)\n            {\n                if (previousInput.length < this.frameSize)\n                {\n                    byte[] newPreviousInput = new byte[this.frameSize];\n\n                    System.arraycopy(\n                            previousInput, 0,\n                            newPreviousInput, 0,\n                            previousInput.length);\n                    previousInput = newPreviousInput;\n                }\n\n                int bytesToCopyFromInputToPreviousInput\n                    = Math.min(\n                            this.frameSize - previousInputLength,\n                            inputLength);\n\n                if (bytesToCopyFromInputToPreviousInput > 0)\n                {\n                    System.arraycopy(\n                            input, inputOffset,\n                            previousInput, previousInputLength,\n                            bytesToCopyFromInputToPreviousInput);\n                    previousInputLength += bytesToCopyFromInputToPreviousInput;\n                    inputLength -= bytesToCopyFromInputToPreviousInput;\n                    inputBuffer.setLength(inputLength);\n                    inputBuffer.setOffset(\n                            inputOffset + bytesToCopyFromInputToPreviousInput);\n                }\n            }\n\n            if (previousInputLength == this.frameSize)\n            {\n                input = previousInput;\n                inputOffset = 0;\n                previousInputLength = 0;\n            }\n            else if (previousInputLength > this.frameSize)\n            {\n                input = new byte[this.frameSize];\n                System.arraycopy(previousInput, 0, input, 0, input.length);\n                inputOffset = 0;\n                previousInputLength -= input.length;\n                System.arraycopy(\n                        previousInput, input.length,\n                        previousInput, 0,\n                        previousInputLength);\n            }\n            else\n            {\n                outputBuffer.setLength(0);\n                discardOutputBuffer(outputBuffer);\n                if (inputLength < 1)\n                    return BUFFER_PROCESSED_OK;\n                else\n                    return BUFFER_PROCESSED_OK | INPUT_BUFFER_NOT_CONSUMED;\n            }\n        }\n        else if (inputLength < 1)\n        {\n            outputBuffer.setLength(0);\n            discardOutputBuffer(outputBuffer);\n            return BUFFER_PROCESSED_OK;\n        }\n        else if (inputLength < this.frameSize)\n        {\n            if ((previousInput == null) || (previousInput.length < inputLength))\n                previousInput = new byte[this.frameSize];\n            System.arraycopy(input, inputOffset, previousInput, 0, inputLength);\n            previousInputLength = inputLength;\n            outputBuffer.setLength(0);\n            discardOutputBuffer(outputBuffer);\n            return BUFFER_PROCESSED_OK;\n        }\n        else\n        {\n            inputLength -= this.frameSize;\n            inputBuffer.setLength(inputLength);\n            inputBuffer.setOffset(inputOffset + this.frameSize);\n        }\n\n        /* At long last, do the actual encoding. */\n        Speex.speex_bits_reset(bits);\n        Speex.speex_encode_int(state, input, inputOffset, bits);\n\n        /* Read the encoded audio data from the SpeexBits into outputBuffer. */\n        int outputLength = Speex.speex_bits_nbytes(bits);\n\n        if (outputLength > 0)\n        {\n            byte[] output = validateByteArraySize(outputBuffer, outputLength);\n\n            outputLength\n                = Speex.speex_bits_write(bits, output, 0, output.length);\n            if (outputLength > 0)\n            {\n                outputBuffer.setDuration(duration);\n                outputBuffer.setFormat(getOutputFormat());\n                outputBuffer.setLength(outputLength);\n                outputBuffer.setOffset(0);\n            }\n            else\n            {\n                outputBuffer.setLength(0);\n                discardOutputBuffer(outputBuffer);\n            }\n        }\n        else\n        {\n            outputBuffer.setLength(0);\n            discardOutputBuffer(outputBuffer);\n        }\n\n        if (inputLength < 1)\n            return BUFFER_PROCESSED_OK;\n        else\n            return BUFFER_PROCESSED_OK | INPUT_BUFFER_NOT_CONSUMED;\n    }","id":105660,"modified_method":"/**\n     * @param inputBuffer\n     * @param outputBuffer\n     * @return\n     * @see AbstractCodecExt#doProcess(Buffer, Buffer)\n     */\n    protected int doProcess(Buffer inputBuffer, Buffer outputBuffer)\n    {\n        Format inputFormat = inputBuffer.getFormat();\n\n        if ((inputFormat != null)\n                && (inputFormat != this.inputFormat)\n                && !inputFormat.equals(this.inputFormat))\n        {\n            if (null == setInputFormat(inputFormat))\n                return BUFFER_PROCESSED_FAILED;\n        }\n        inputFormat = this.inputFormat;\n\n        /*\n         * Make sure that the native Speex encoder which is represented by this\n         * instance is configured to work with the inputFormat.\n         */\n        AudioFormat inputAudioFormat = (AudioFormat) inputFormat;\n        int inputSampleRate = (int) inputAudioFormat.getSampleRate();\n\n        if ((state != 0) && (sampleRate != inputSampleRate))\n        {\n            Speex.speex_encoder_destroy(state);\n            state = 0;\n            sampleRate = 0;\n            frameSize = 0;\n        }\n        if (state == 0)\n        {\n            long mode\n                = Speex.speex_lib_get_mode(\n                        (inputSampleRate == 16000)\n                            ? Speex.SPEEX_MODEID_WB\n                            : (inputSampleRate == 32000)\n                                ? Speex.SPEEX_MODEID_UWB\n                                : Speex.SPEEX_MODEID_NB);\n\n            if (mode == 0)\n                return BUFFER_PROCESSED_FAILED;\n            state = Speex.speex_encoder_init(mode);\n            if (state == 0)\n                return BUFFER_PROCESSED_FAILED;\n            if (Speex.speex_encoder_ctl(\n                        state,\n                        Speex.SPEEX_SET_QUALITY,\n                        4)\n                    != 0)\n                return BUFFER_PROCESSED_FAILED;\n            if (Speex.speex_encoder_ctl(\n                        state,\n                        Speex.SPEEX_SET_SAMPLING_RATE,\n                        inputSampleRate)\n                    != 0)\n                return BUFFER_PROCESSED_FAILED;\n\n            int frameSize\n                = Speex.speex_encoder_ctl(state, Speex.SPEEX_GET_FRAME_SIZE);\n\n            if (frameSize < 0)\n                return BUFFER_PROCESSED_FAILED;\n\n            sampleRate = inputSampleRate;\n            this.frameSize = frameSize * 2 /* (sampleSizeInBits / 8) */;\n            duration\n                = (((long) frameSize) * 1000 * 1000000) / ((long) sampleRate);\n        }\n\n        /*\n         * The native Speex encoder always processes frameSize bytes from the\n         * input in one call. If any specified inputBuffer is with a different\n         * length, then we'll have to wait for more bytes to arrive until we\n         * have frameSize bytes. Remember whatever is left unprocessed in\n         * previousInput and prepend it to the next inputBuffer.\n         */\n        byte[] input = (byte[]) inputBuffer.getData();\n        int inputLength = inputBuffer.getLength();\n        int inputOffset = inputBuffer.getOffset();\n\n        if ((previousInput != null) && (previousInputLength > 0))\n        {\n            if (previousInputLength < this.frameSize)\n            {\n                if (previousInput.length < this.frameSize)\n                {\n                    byte[] newPreviousInput = new byte[this.frameSize];\n\n                    System.arraycopy(\n                            previousInput, 0,\n                            newPreviousInput, 0,\n                            previousInput.length);\n                    previousInput = newPreviousInput;\n                }\n\n                int bytesToCopyFromInputToPreviousInput\n                    = Math.min(\n                            this.frameSize - previousInputLength,\n                            inputLength);\n\n                if (bytesToCopyFromInputToPreviousInput > 0)\n                {\n                    System.arraycopy(\n                            input, inputOffset,\n                            previousInput, previousInputLength,\n                            bytesToCopyFromInputToPreviousInput);\n                    previousInputLength += bytesToCopyFromInputToPreviousInput;\n                    inputLength -= bytesToCopyFromInputToPreviousInput;\n                    inputBuffer.setLength(inputLength);\n                    inputBuffer.setOffset(\n                            inputOffset + bytesToCopyFromInputToPreviousInput);\n                }\n            }\n\n            if (previousInputLength == this.frameSize)\n            {\n                input = previousInput;\n                inputOffset = 0;\n                previousInputLength = 0;\n            }\n            else if (previousInputLength > this.frameSize)\n            {\n                input = new byte[this.frameSize];\n                System.arraycopy(previousInput, 0, input, 0, input.length);\n                inputOffset = 0;\n                previousInputLength -= input.length;\n                System.arraycopy(\n                        previousInput, input.length,\n                        previousInput, 0,\n                        previousInputLength);\n            }\n            else\n            {\n                outputBuffer.setLength(0);\n                discardOutputBuffer(outputBuffer);\n                if (inputLength < 1)\n                    return BUFFER_PROCESSED_OK;\n                else\n                    return BUFFER_PROCESSED_OK | INPUT_BUFFER_NOT_CONSUMED;\n            }\n        }\n        else if (inputLength < 1)\n        {\n            outputBuffer.setLength(0);\n            discardOutputBuffer(outputBuffer);\n            return BUFFER_PROCESSED_OK;\n        }\n        else if (inputLength < this.frameSize)\n        {\n            if ((previousInput == null) || (previousInput.length < inputLength))\n                previousInput = new byte[this.frameSize];\n            System.arraycopy(input, inputOffset, previousInput, 0, inputLength);\n            previousInputLength = inputLength;\n            outputBuffer.setLength(0);\n            discardOutputBuffer(outputBuffer);\n            return BUFFER_PROCESSED_OK;\n        }\n        else\n        {\n            inputLength -= this.frameSize;\n            inputBuffer.setLength(inputLength);\n            inputBuffer.setOffset(inputOffset + this.frameSize);\n        }\n\n        /* At long last, do the actual encoding. */\n        Speex.speex_bits_reset(bits);\n        Speex.speex_encode_int(state, input, inputOffset, bits);\n\n        /* Read the encoded audio data from the SpeexBits into outputBuffer. */\n        int outputLength = Speex.speex_bits_nbytes(bits);\n\n        if (outputLength > 0)\n        {\n            byte[] output = validateByteArraySize(outputBuffer, outputLength);\n\n            outputLength\n                = Speex.speex_bits_write(bits, output, 0, output.length);\n            if (outputLength > 0)\n            {\n                outputBuffer.setDuration(duration);\n                outputBuffer.setFormat(getOutputFormat());\n                outputBuffer.setLength(outputLength);\n                outputBuffer.setOffset(0);\n            }\n            else\n            {\n                outputBuffer.setLength(0);\n                discardOutputBuffer(outputBuffer);\n            }\n        }\n        else\n        {\n            outputBuffer.setLength(0);\n            discardOutputBuffer(outputBuffer);\n        }\n\n        if (inputLength < 1)\n            return BUFFER_PROCESSED_OK;\n        else\n            return BUFFER_PROCESSED_OK | INPUT_BUFFER_NOT_CONSUMED;\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * @param format\n     * @return\n     * @see AbstractCodecExt#setInputFormat(Format)\n     */\n    @Override\n    public Format setInputFormat(Format format)\n    {\n        Format inputFormat = super.setInputFormat(format);\n\n        if (inputFormat != null)\n        {\n            double outputSampleRate;\n            int outputChannels;\n            long outputDuration;\n\n            if (outputFormat == null)\n            {\n                outputSampleRate = Format.NOT_SPECIFIED;\n                outputChannels = Format.NOT_SPECIFIED;\n                outputDuration = Format.NOT_SPECIFIED;\n            }\n            else\n            {\n                AudioFormat outputAudioFormat = (AudioFormat) outputFormat;\n\n                outputSampleRate = outputAudioFormat.getSampleRate();\n                outputChannels = outputAudioFormat.getChannels();\n                outputDuration = outputAudioFormat.computeDuration(0);\n            }\n\n            AudioFormat inputAudioFormat = (AudioFormat) inputFormat;\n            double inputSampleRate = inputAudioFormat.getSampleRate();\n            int inputChannels = inputAudioFormat.getChannels();\n\n            if ((outputSampleRate != inputSampleRate)\n                    || (outputChannels != inputChannels)\n                    || (outputDuration == Format.NOT_SPECIFIED))\n            {\n                setOutputFormat(\n                    new AudioFormat(\n                            Constants.SPEEX_RTP,\n                            inputSampleRate,\n                            Format.NOT_SPECIFIED,\n                            inputChannels,\n                            AudioFormat.LITTLE_ENDIAN,\n                            AudioFormat.SIGNED,\n                            Format.NOT_SPECIFIED,\n                            Format.NOT_SPECIFIED,\n                            Format.byteArray)\n                        {\n                            @Override\n                            public long computeDuration(long length)\n                            {\n                                return duration;\n                            }\n                        });\n            }\n        }\n        return inputFormat;\n    }","id":105661,"modified_method":"/**\n     * @param format\n     * @return\n     * @see AbstractCodecExt#setInputFormat(Format)\n     */\n    @Override\n    public Format setInputFormat(Format format)\n    {\n        Format inputFormat = super.setInputFormat(format);\n\n        if (inputFormat != null)\n        {\n            double outputSampleRate;\n            int outputChannels;\n\n            if (outputFormat == null)\n            {\n                outputSampleRate = Format.NOT_SPECIFIED;\n                outputChannels = Format.NOT_SPECIFIED;\n            }\n            else\n            {\n                AudioFormat outputAudioFormat = (AudioFormat) outputFormat;\n\n                outputSampleRate = outputAudioFormat.getSampleRate();\n                outputChannels = outputAudioFormat.getChannels();\n            }\n\n            AudioFormat inputAudioFormat = (AudioFormat) inputFormat;\n            double inputSampleRate = inputAudioFormat.getSampleRate();\n            int inputChannels = inputAudioFormat.getChannels();\n\n            if ((outputSampleRate != inputSampleRate)\n                    || (outputChannels != inputChannels))\n            {\n                setOutputFormat(\n                    new AudioFormat(\n                            Constants.SPEEX_RTP,\n                            inputSampleRate,\n                            Format.NOT_SPECIFIED,\n                            inputChannels,\n                            AudioFormat.LITTLE_ENDIAN,\n                            AudioFormat.SIGNED,\n                            Format.NOT_SPECIFIED,\n                            Format.NOT_SPECIFIED,\n                            Format.byteArray));\n            }\n        }\n        return inputFormat;\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * The number of devices belonging to this host API.\n     * @param hostApiInfo pointer to host api info structure.\n     * @return The number of devices belonging to this host API.\n     */\n    public static native int PaHostApiInfo_GetDeviceCount(long hostApiInfo);","id":105662,"modified_method":"/**\n     * The number of devices belonging to this host API.\n     * @param hostApiInfo pointer to host api info structure.\n     * @return The number of devices belonging to this host API.\n     */\n    public static native int PaHostApiInfo_getDeviceCount(long hostApiInfo);","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Gets the human-readable name of the <tt>PaHostApiInfo<\/tt> specified by a\n     * pointer to it.\n     *\n     * @param hostApiInfo the pointer to the <tt>PaHostApiInfo<\/tt> to get the\n     * human-readable name of\n     * @return the human-readable name of the <tt>PaHostApiInfo<\/tt> pointed to\n     * by <tt>hostApiInfo<\/tt>\n     * @deprecated Presumes that the <tt>name<\/tt> of <tt>PaHostApiInfo<\/tt> is\n     * encoded in modified UTF-8\n     */\n    @Deprecated\n    public static native String PaHostApiInfo_GetName(long hostApiInfo);","id":105663,"modified_method":"/**\n     * Gets the human-readable name of the <tt>PaHostApiInfo<\/tt> specified by a\n     * pointer to it.\n     *\n     * @param hostApiInfo the pointer to the <tt>PaHostApiInfo<\/tt> to get the\n     * human-readable name of\n     * @return the human-readable name of the <tt>PaHostApiInfo<\/tt> pointed to\n     * by <tt>hostApiInfo<\/tt>\n     * @deprecated Presumes that the <tt>name<\/tt> of <tt>PaHostApiInfo<\/tt> is\n     * encoded in modified UTF-8\n     */\n    @Deprecated\n    public static native String PaHostApiInfo_getName(long hostApiInfo);","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * The well known unique identifier of this host API.\n     * @param hostApiInfo pointer to host api info structure.\n     * @return The well known unique identifier of this host API.\n     *         Enumerator:\n                    paInDevelopment\n                    paDirectSound\n                    paMME\n                    paASIO\n                    paSoundManager\n                    paCoreAudio\n                    paOSS\n                    paALSA\n                    paAL\n                    paBeOS\n                    paWDMKS\n                    paJACK\n                    paWASAPI\n                    paAudioScienceHPI\n     */\n    public static native int PaHostApiInfo_GetType(long hostApiInfo);","id":105664,"modified_method":"/**\n     * The well known unique identifier of this host API.\n     * @param hostApiInfo pointer to host api info structure.\n     * @return The well known unique identifier of this host API.\n     *         Enumerator:\n     *              paInDevelopment\n     *              paDirectSound\n     *              paMME\n     *              paASIO\n     *              paSoundManager\n     *              paCoreAudio\n     *              paOSS\n     *              paALSA\n     *              paAL\n     *              paBeOS\n     *              paWDMKS\n     *              paJACK\n     *              paWASAPI\n     *              paAudioScienceHPI\n     */\n    public static native int PaHostApiInfo_getType(long hostApiInfo);","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * The default output device for this host API.\n     * @param hostApiInfo pointer to host api info structure.\n     * @return The default output device for this host API.\n     */\n    public static native int PaHostApiInfo_GetDefaultOutputDevice(long hostApiInfo);","id":105665,"modified_method":"/**\n     * The default output device for this host API.\n     * @param hostApiInfo pointer to host api info structure.\n     * @return The default output device for this host API.\n     */\n    public static native int PaHostApiInfo_getDefaultOutputDevice(\n            long hostApiInfo);","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * The default input device for this host API.\n     * @param hostApiInfo pointer to host api info structure.\n     * @return The default input device for this host API.\n     */\n    public static native int PaHostApiInfo_GetDefaultInputDevice(long hostApiInfo);","id":105666,"modified_method":"/**\n     * The default input device for this host API.\n     * @param hostApiInfo pointer to host api info structure.\n     * @return The default input device for this host API.\n     */\n    public static native int PaHostApiInfo_getDefaultInputDevice(\n            long hostApiInfo);","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes a new <tt>PortAudioAuto<\/tt> instance which creates PortAudio\n     * capture devices by enumerating all host devices with input channels.\n     *\n     * @throws Exception if anything wrong happens while creating the PortAudio\n     * capture devices\n     */\n    PortAudioAuto()\n        throws Exception\n    {\n        // if PortAudio has a problem initializing like missing native\n        // components it will trow exception here and PortAudio rendering will\n        // not be inited.\n        PortAudioManager portAudioManager = PortAudioManager.getInstance();\n\n        // enable jmf logging, so we can track codec chains and formats\n        if(logger.isDebugEnabled())\n            Registry.set(\"allowLogging\", true);\n\n        int deviceCount = PortAudio.Pa_GetDeviceCount();\n\n        int defaultInputDeviceIx = PortAudio.Pa_GetDefaultInputDevice();\n        int defaultOutputDeviceIx = PortAudio.Pa_GetDefaultOutputDevice();\n\n        Vector<CaptureDeviceInfo> playbackDevVector =\n            new Vector<CaptureDeviceInfo>();\n\n        for (int deviceIndex = 0; deviceIndex < deviceCount; deviceIndex++)\n        {\n            long deviceInfo = PortAudio.Pa_GetDeviceInfo(deviceIndex);\n            int maxInputChannels =\n                PortAudio.PaDeviceInfo_getMaxInputChannels(deviceInfo);\n            int maxOutputChannels =\n                PortAudio.PaDeviceInfo_getMaxOutputChannels(deviceInfo);\n\n            String devName\n                = PortAudio.PaDeviceInfo_getCharsetAwareName(deviceInfo);\n            if (devName != null)\n                devName = devName.trim();\n\n            CaptureDeviceInfo jmfInfo =\n                    new CaptureDeviceInfo(\n                        devName,\n                        new MediaLocator(\n                            PortAudioUtils.LOCATOR_PREFIX + deviceIndex),\n                        new Format[]{DataSource.getCaptureFormat()});\n\n            if(maxInputChannels > 0)\n            {\n                CaptureDeviceManager.addDevice(jmfInfo);\n            }\n\n            if(maxOutputChannels > 0)\n            {\n                playbackDevVector.add(jmfInfo);\n            }\n\n            if(deviceIndex == defaultInputDeviceIx)\n                defaultCaptureDevice = jmfInfo;\n\n            if(deviceIndex == defaultOutputDeviceIx)\n                defaultPlaybackDevice = jmfInfo;\n        }\n\n        playbackDevices = playbackDevVector.toArray(new CaptureDeviceInfo[0]);\n\n        CaptureDeviceManager.commit();\n\n        // now add it as available audio system to DeviceConfiguration\n        DeviceConfiguration.addAudioSystem(\n            DeviceConfiguration.AUDIO_SYSTEM_PORTAUDIO);\n\n        // now extract other sound related configs\n        try\n        {\n            ConfigurationService config\n                = NeomediaActivator.getConfigurationService();\n\n            boolean echoCancelEnabled =\n                config.getBoolean(\n                    DeviceConfiguration.PROP_AUDIO_ECHOCANCEL_ENABLED,\n                    portAudioManager.isEnabledEchoCancel());\n            if(echoCancelEnabled)\n            {\n                int echoCancelTail =\n                    config.getInt(\n                        DeviceConfiguration.PROP_AUDIO_ECHOCANCEL_TAIL,\n                        portAudioManager.getFilterLength());\n                portAudioManager.setEchoCancel(\n                    echoCancelEnabled,\n                    echoCancelTail);\n            }\n\n            boolean denoiseEnabled =\n                config.getBoolean(\n                    DeviceConfiguration.PROP_AUDIO_DENOISE_ENABLED,\n                    portAudioManager.isEnabledDeNoise());\n            portAudioManager.setDeNoise(denoiseEnabled);\n\n            // suggested latency is saved in configuration as\n            // milliseconds but PortAudioManager use it as seconds\n            int defaultAudioLatency\n                = (int) (PortAudioManager.getSuggestedLatency()*1000);\n            int audioLatency = config.getInt(\n                DeviceConfiguration.PROP_AUDIO_LATENCY,\n                defaultAudioLatency);\n            if(audioLatency != defaultAudioLatency)\n                    PortAudioManager.setSuggestedLatency(\n                        (double)audioLatency/1000d);\n        }\n        catch (Exception e)\n        {\n            logger.error(\"Error parsing audio config\", e);\n        }\n\n        supported = true;\n    }","id":105667,"modified_method":"/**\n     * Initializes a new <tt>PortAudioAuto<\/tt> instance which creates PortAudio\n     * capture devices by enumerating all host devices with input channels.\n     *\n     * @throws Exception if anything wrong happens while creating the PortAudio\n     * capture devices\n     */\n    PortAudioAuto()\n        throws Exception\n    {\n        // enable jmf logging, so we can track codec chains and formats\n        if(logger.isDebugEnabled())\n            Registry.set(\"allowLogging\", true);\n\n        // if PortAudio has a problem initializing like missing native\n        // components it will trow exception here and PortAudio rendering will\n        // not be inited.\n        int deviceCount = PortAudio.Pa_GetDeviceCount();\n\n        int defaultInputDeviceIx = PortAudio.Pa_GetDefaultInputDevice();\n        int defaultOutputDeviceIx = PortAudio.Pa_GetDefaultOutputDevice();\n\n        Vector<CaptureDeviceInfo> playbackDevVector =\n            new Vector<CaptureDeviceInfo>();\n\n        for (int deviceIndex = 0; deviceIndex < deviceCount; deviceIndex++)\n        {\n            long deviceInfo = PortAudio.Pa_GetDeviceInfo(deviceIndex);\n            int maxInputChannels =\n                PortAudio.PaDeviceInfo_getMaxInputChannels(deviceInfo);\n            int maxOutputChannels =\n                PortAudio.PaDeviceInfo_getMaxOutputChannels(deviceInfo);\n\n            String devName\n                = PortAudio.PaDeviceInfo_getCharsetAwareName(deviceInfo);\n            if (devName != null)\n                devName = devName.trim();\n\n            CaptureDeviceInfo jmfInfo\n                = new CaptureDeviceInfo(\n                        devName,\n                        new MediaLocator(LOCATOR_PROTOCOL + \":#\" + deviceIndex),\n                        new Format[]\n                                {\n                                    new AudioFormat(\n                                            AudioFormat.LINEAR,\n                                            PortAudio.DEFAULT_SAMPLE_RATE,\n                                            16 /* sampleSizeInBits */,\n                                            1 /* channels */,\n                                            AudioFormat.LITTLE_ENDIAN,\n                                            AudioFormat.SIGNED,\n                                            16 /* frameSizeInBits */,\n                                            Format.NOT_SPECIFIED /* frameRate */,\n                                            Format.byteArray)\n                                });\n\n            if(maxInputChannels > 0)\n                CaptureDeviceManager.addDevice(jmfInfo);\n            if(maxOutputChannels > 0)\n                playbackDevVector.add(jmfInfo);\n\n            if(deviceIndex == defaultInputDeviceIx)\n                defaultCaptureDevice = jmfInfo;\n            if(deviceIndex == defaultOutputDeviceIx)\n                defaultPlaybackDevice = jmfInfo;\n        }\n\n        playbackDevices = playbackDevVector.toArray(new CaptureDeviceInfo[0]);\n\n        CaptureDeviceManager.commit();\n\n        // now add it as available audio system to DeviceConfiguration\n        DeviceConfiguration.addAudioSystem(\n            DeviceConfiguration.AUDIO_SYSTEM_PORTAUDIO);\n\n        // now extract other sound related configs\n        try\n        {\n            ConfigurationService config\n                = NeomediaActivator.getConfigurationService();\n\n            boolean echoCancelEnabled =\n                config.getBoolean(\n                    DeviceConfiguration.PROP_AUDIO_ECHOCANCEL_ENABLED,\n                    PortAudioManager.isEnabledEchoCancel());\n            if(echoCancelEnabled)\n            {\n                long echoCancelFilterLengthInMillis =\n                    config.getLong(\n                        DeviceConfiguration\n                            .PROP_AUDIO_ECHOCANCEL_FILTER_LENGTH_IN_MILLIS,\n                        PortAudioManager.getFilterLengthInMillis());\n\n                PortAudioManager.setEchoCancel(\n                    echoCancelEnabled,\n                    echoCancelFilterLengthInMillis);\n            }\n\n            boolean denoiseEnabled =\n                config.getBoolean(\n                    DeviceConfiguration.PROP_AUDIO_DENOISE_ENABLED,\n                    PortAudioManager.isEnabledDeNoise());\n            PortAudioManager.setDeNoise(denoiseEnabled);\n\n            // suggested latency is saved in configuration as\n            // milliseconds but PortAudioManager use it as seconds\n            int defaultAudioLatency\n                = (int) (PortAudioManager.getSuggestedLatency()*1000);\n            int audioLatency = config.getInt(\n                DeviceConfiguration.PROP_AUDIO_LATENCY,\n                defaultAudioLatency);\n            if(audioLatency != defaultAudioLatency)\n                    PortAudioManager.setSuggestedLatency(\n                        (double)audioLatency/1000d);\n        }\n        catch (Exception e)\n        {\n            logger.error(\"Error parsing audio config\", e);\n        }\n\n        supported = true;\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Plays this audio.\n     */\n    public void play()\n    {\n        if ((url != null) && !audioNotifier.isMute())\n        {\n            started = true;\n            new Thread(new PlayThread()).start();\n        }\n    }","id":105668,"modified_method":"/**\n     * Plays this audio.\n     */\n    public void play()\n    {\n        if ((url != null) && !audioNotifier.isMute())\n        {\n            started = true;\n            new Thread()\n                    {\n                        @Override\n                        public void run()\n                        {\n                            runInPlayThread();\n                        }\n                    }.start();\n        }\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Enables or disables noise suppression.\n     * @param enabled should we enable or disable noise suppression.\n     */\n    public void setDeNoise(boolean enabled)\n    {\n        this.enabledDeNoise = enabled;\n    }","id":105669,"modified_method":"/**\n     * Enables or disables noise suppression.\n     * @param enabled should we enable or disable noise suppression.\n     */\n    public static void setDeNoise(boolean enabled)\n    {\n        PortAudioManager.enabledDeNoise = enabled;\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Number of samples of echo to cancel\n     * (should generally correspond to 100-500 ms)\n     * @return the filterLength.\n     */\n    public int getFilterLength()\n    {\n        return filterLength;\n    }","id":105670,"modified_method":"/**\n     * Gets the number of milliseconds of echo to cancel.\n     *\n     * @return the number of milliseconds of echo to cancel\n     */\n    public static long getFilterLengthInMillis()\n    {\n        return filterLengthInMillis;\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Enables or disables echo cancel.\n     * @param enabled should we enable or disable echo cancellation\n     * @param filterLength Number of samples of echo to cancel\n     *          (should generally correspond to 100-500 ms)\n     */\n    public void setEchoCancel(boolean enabled, int filterLength)\n    {\n        this.enabledEchoCancel = enabled;\n        this.filterLength = filterLength;\n    }","id":105671,"modified_method":"/**\n     * Enables or disables echo cancel.\n     *\n     * @param enabled should we enable or disable echo cancellation\n     * @param filterLengthInMillis the number of milliseconds of echo to cancel.\n     * Should generally correspond to 100-500 ms.\n     */\n    public static void setEchoCancel(boolean enabled, long filterLengthInMillis)\n    {\n        PortAudioManager.enabledEchoCancel = enabled;\n        PortAudioManager.filterLengthInMillis = filterLengthInMillis;\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Gets the list of JMF <tt>Format<\/tt>s of audio data which this\n     * <tt>Renderer<\/tt> is capable of rendering.\n     *\n     * @return an array of JMF <tt>Format<\/tt>s of audio data which this\n     * <tt>Renderer<\/tt> is capable of rendering\n     */\n    public Format[] getSupportedInputFormats()\n    {\n        return supportedInputFormats;\n    }","id":105672,"modified_method":"/**\n     * Gets the list of JMF <tt>Format<\/tt>s of audio data which this\n     * <tt>Renderer<\/tt> is capable of rendering.\n     *\n     * @return an array of JMF <tt>Format<\/tt>s of audio data which this\n     * <tt>Renderer<\/tt> is capable of rendering\n     */\n    public Format[] getSupportedInputFormats()\n    {\n        /*\n         * We want to try to match the PortAudio CaptureDevice when rendering\n         * for the output device of the PortAudio audio system in order to make\n         * echo cancellation and denoise possible (if enabled, of course).\n         * Otherwise i.e. when rendering for the notification device of the\n         * PortAudio audio system, we will not try to make echo cancellation and\n         * denoise possible here.\n         */\n//        if (getLocator() == defaultLocator)\n//        {\n//            for (Format supportedInputFormat : SUPPORTED_INPUT_FORMATS)\n//            {\n//                if (((AudioFormat) supportedInputFormat).getSampleRate()\n//                        == PortAudio.DEFAULT_SAMPLE_RATE)\n//                    return new Format[] { supportedInputFormat };\n//            }\n//        }\n        return SUPPORTED_INPUT_FORMATS.clone();\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Stops the rendering process.\n     */\n    public void stop()\n    {\n        try\n        {\n            stream.stop();\n        }\n        catch (PortAudioException paex)\n        {\n            logger.error(\"Closing PortAudio stream failed\", paex);\n        }\n    }","id":105673,"modified_method":"/**\n     * Stops the rendering process.\n     */\n    public synchronized void stop()\n    {\n        boolean interrupted = false;\n\n        while (streamIsBusy)\n        {\n            try\n            {\n                wait();\n            }\n            catch (InterruptedException iex)\n            {\n                interrupted = true;\n            }\n        }\n        if (interrupted)\n            Thread.currentThread().interrupt();\n\n        if (started && (stream != 0))\n        {\n            try\n            {\n                PortAudio.Pa_StopStream(stream);\n                started = false;\n\n                bufferLeft = null;\n            }\n            catch (PortAudioException paex)\n            {\n                logger.error(\"Failed to close PortAudio stream.\", paex);\n            }\n        }\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Renders the audio data contained in a specific <tt>Buffer<\/tt> onto the\n     * PortAudio device represented by this <tt>Renderer<\/tt>.\n     *\n     * @param buffer the <tt>Buffer<\/tt> which contains the audio data to be\n     * rendered\n     * @return <tt>BUFFER_PROCESSED_OK<\/tt> if the specified <tt>buffer<\/tt> has\n     * been successfully processed\n     */\n    public int process(Buffer buffer)\n    {\n        try\n        {\n            stream\n                .write(\n                    (byte[]) buffer.getData(),\n                    buffer.getOffset(),\n                    buffer.getLength());\n        }\n        catch (PortAudioException paex)\n        {\n            logger.error(\"Error writing to device\", paex);\n        }\n        return BUFFER_PROCESSED_OK;\n    }","id":105674,"modified_method":"/**\n     * Renders the audio data contained in a specific <tt>Buffer<\/tt> onto the\n     * PortAudio device represented by this <tt>Renderer<\/tt>.\n     *\n     * @param buffer the <tt>Buffer<\/tt> which contains the audio data to be\n     * rendered\n     * @return <tt>BUFFER_PROCESSED_OK<\/tt> if the specified <tt>buffer<\/tt> has\n     * been successfully processed\n     */\n    public int process(Buffer buffer)\n    {\n        synchronized (this)\n        {\n            if (!started || (stream == 0))\n                return BUFFER_PROCESSED_OK;\n            else\n                streamIsBusy = true;\n        }\n        try\n        {\n            process(\n                (byte[]) buffer.getData(),\n                buffer.getOffset(),\n                buffer.getLength());\n        }\n        catch (PortAudioException paex)\n        {\n            logger.error(\"Failed to process Buffer.\", paex);\n        }\n        finally\n        {\n            synchronized (this)\n            {\n                streamIsBusy = false;\n                notifyAll();\n            }\n        }\n        return BUFFER_PROCESSED_OK;\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Starts the rendering process. Any audio data available in the internal\n     * resources associated with this <tt>PortAudioRenderer<\/tt> will begin\n     * being rendered.\n     */\n    public void start()\n    {\n        try\n        {\n            stream.start();\n        }\n        catch (PortAudioException paex)\n        {\n            logger.error(\"Starting PortAudio stream failed\", paex);\n        }\n    }","id":105675,"modified_method":"/**\n     * Starts the rendering process. Any audio data available in the internal\n     * resources associated with this <tt>PortAudioRenderer<\/tt> will begin\n     * being rendered.\n     */\n    public synchronized void start()\n    {\n        if (!started && (stream != 0))\n        {\n            try\n            {\n                PortAudio.Pa_StartStream(stream);\n                started = true;\n            }\n            catch (PortAudioException paex)\n            {\n                logger.error(\"Failed to start PortAudio stream.\", paex);\n            }\n        }\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Sets the JMF <tt>Format<\/tt> of the audio data to be rendered by this\n     * <tt>Renderer<\/tt>.\n     *\n     * @param format the JMF <tt>Format<\/tt> of the audio data to be redered by\n     * this instance\n     * @return <tt>null<\/tt> if the specified <tt>format<\/tt> is not compatible\n     * with this <tt>Renderer<\/tt>; otherwise, the JMF <tt>Format<\/tt> which has\n     * been successfully set\n     */\n    public Format setInputFormat(Format format)\n    {\n        if(!(format instanceof AudioFormat))\n            return null;\n\n        this.inputFormat = (AudioFormat) format;\n        return this.inputFormat;\n    }","id":105676,"modified_method":"/**\n     * Sets the JMF <tt>Format<\/tt> of the audio data to be rendered by this\n     * <tt>Renderer<\/tt>.\n     *\n     * @param format the JMF <tt>Format<\/tt> of the audio data to be redered by\n     * this instance\n     * @return <tt>null<\/tt> if the specified <tt>format<\/tt> is not compatible\n     * with this <tt>Renderer<\/tt>; otherwise, the JMF <tt>Format<\/tt> which has\n     * been successfully set\n     */\n    public Format setInputFormat(Format format)\n    {\n        Format matchingFormat = null;\n\n        for (Format supportedInputFormat : getSupportedInputFormats())\n        {\n            if (supportedInputFormat.matches(format))\n            {\n                matchingFormat = supportedInputFormat.intersects(format);\n                break;\n            }\n        }\n        if (matchingFormat == null)\n            return null;\n\n        inputFormat = (AudioFormat) matchingFormat;\n        return inputFormat;\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Opens the PortAudio device and output stream represented by this instance\n     * which are to be used to render audio.\n     *\n     * @throws ResourceUnavailableException if the PortAudio device or output\n     * stream cannot be created or opened\n     */\n    public void open()\n        throws ResourceUnavailableException\n    {\n        if (stream == null)\n        {\n            try\n            {\n                stream\n                    = PortAudioManager\n                        .getInstance()\n                            .getOutputStream(\n                                deviceIndex,\n                                inputFormat.getSampleRate(),\n                                inputFormat.getChannels());\n            }\n            catch (PortAudioException paex)\n            {\n                throw new ResourceUnavailableException(paex.getMessage());\n            }\n        }\n    }","id":105677,"modified_method":"/**\n     * Opens the PortAudio device and output stream represented by this instance\n     * which are to be used to render audio.\n     *\n     * @throws ResourceUnavailableException if the PortAudio device or output\n     * stream cannot be created or opened\n     */\n    public synchronized void open()\n        throws ResourceUnavailableException\n    {\n        if (stream == 0)\n        {\n            int deviceIndex = DataSource.getDeviceIndex(getLocator());\n            AudioFormat inputFormat = this.inputFormat;\n            int channels = inputFormat.getChannels();\n\n            if (channels == Format.NOT_SPECIFIED)\n                channels = 1;\n\n            long sampleFormat\n                = PortAudio.getPaSampleFormat(\n                    inputFormat.getSampleSizeInBits());\n            double sampleRate = inputFormat.getSampleRate();\n\n            try\n            {\n                long outputParameters\n                    = PortAudio.PaStreamParameters_new(\n                            deviceIndex,\n                            channels,\n                            sampleFormat,\n                            PortAudioManager.getSuggestedLatency());\n\n                stream\n                    = PortAudio.Pa_OpenStream(\n                            0 /* inputParameters */,\n                            outputParameters,\n                            sampleRate,\n                            PortAudio.FRAMES_PER_BUFFER_UNSPECIFIED,\n                            PortAudio.STREAM_FLAGS_CLIP_OFF\n                                | PortAudio.STREAM_FLAGS_DITHER_OFF,\n                            null /* streamCallback */);\n            }\n            catch (PortAudioException paex)\n            {\n                throw new ResourceUnavailableException(paex.getMessage());\n            }\n            if (stream == 0)\n                throw new ResourceUnavailableException(\"Pa_OpenStream\");\n\n            framesPerBuffer\n                = (int)\n                    ((sampleRate * PortAudio.DEFAULT_MILLIS_PER_BUFFER)\n                        / (channels * 1000));\n            bytesPerBuffer\n                = PortAudio.Pa_GetSampleSize(sampleFormat)\n                    * channels\n                    * framesPerBuffer;\n        }\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Sets the PortAudio index of the device to be used by the\n     * <tt>PortAudioRenderer<\/tt> instances which are to be opened later on.\n     * Changes the <tt>supportedInputFormats<\/tt> property of all\n     * <tt>PortAudioRenderer<\/tt> instances.\n     *\n     * @param locator the <tt>MediaLocator<\/tt> specifying the PortAudio device\n     * index\n     */\n    public static void setDevice(MediaLocator locator)\n    {\n        deviceIndex = PortAudioUtils.getDeviceIndexFromLocator(locator);\n\n        int outputChannels = 1;\n\n        supportedInputFormats = new Format[SUPPORTED_SAMPLE_RATES.length];\n        for(int i = 0; i < SUPPORTED_SAMPLE_RATES.length; i++)\n        {\n            supportedInputFormats[i]\n                = new AudioFormat(\n                        AudioFormat.LINEAR,\n                        SUPPORTED_SAMPLE_RATES[i],\n                        16,\n                        outputChannels,\n                        AudioFormat.LITTLE_ENDIAN,\n                        AudioFormat.SIGNED,\n                        16,\n                        Format.NOT_SPECIFIED,\n                        Format.byteArray);\n        }\n    }","id":105678,"modified_method":"/**\n     * Sets the <tt>MediaLocator<\/tt> which specifies the device index of the\n     * PortAudio device to be used by this instance for rendering.\n     *\n     * @param locator a <tt>MediaLocator<\/tt> which specifies the device index\n     * of the PortAudio device to be used by this instance for rendering\n     */\n    public void setLocator(MediaLocator locator)\n    {\n        if (this.locator == null)\n        {\n            if (locator == null)\n                return;\n        }\n        else if (this.locator.equals(locator))\n            return;\n\n        this.locator = locator;\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     *  Closes the plug-in.\n     */\n    public void close()\n    {\n        if (stream != null)\n        {\n            stop();\n\n            try\n            {\n                stream.close();\n            }\n            catch (PortAudioException paex)\n            {\n                logger.error(\"Failed to close stream\", paex);\n            }\n        }\n    }","id":105679,"modified_method":"/**\n     * Closes this <tt>PlugIn<\/tt>.\n     */\n    public synchronized void close()\n    {\n        try\n        {\n            stop();\n        }\n        finally\n        {\n            if (stream != 0)\n            {\n                try\n                {\n                    PortAudio.Pa_CloseStream(stream);\n                    stream = 0;\n                }\n                catch (PortAudioException paex)\n                {\n                    logger.error(\"Failed to close PortAudio stream.\", paex);\n                }\n            }\n        }\n    }","commit_id":"71ceae7c10e35c91b6132f17f153199962f74aea","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes a new <tt>AudioMixer<\/tt> instance. Because JMF's\n     * <tt>Manager.createMergingDataSource(DataSource[])<\/tt> requires the\n     * implementation of <tt>CaptureDevice<\/tt> for audio if it is implemented\n     * for video and it is indeed the cause for our use case of\n     * <tt>AudioMixingPushBufferDataSource<\/tt>, the new <tt>AudioMixer<\/tt>\n     * instance provides specified <tt>CaptureDevice<\/tt> capabilities to the\n     * <tt>AudioMixingPushBufferDataSource<\/tt>s it creates. The specified\n     * <tt>CaptureDevice<\/tt> is also added as the first input\n     * <tt>DataSource<\/tt> of the new instance.\n     * \n     * @param captureDevice the <tt>CaptureDevice<\/tt> capabilities to be\n     * provided to the <tt>AudioMixingPushBufferDataSource<\/tt>s created by the\n     * new instance and its first input <tt>DataSource<\/tt>\n     */\n    public AudioMixer(CaptureDevice captureDevice)\n    {\n        this.captureDevice = captureDevice;\n\n        this.localOutputDataSource = createOutputDataSource();\n        addInputDataSource(\n            (DataSource) this.captureDevice,\n            this.localOutputDataSource);\n    }","id":105680,"modified_method":"/**\n     * Initializes a new <tt>AudioMixer<\/tt> instance. Because JMF's\n     * <tt>Manager.createMergingDataSource(DataSource[])<\/tt> requires the\n     * implementation of <tt>CaptureDevice<\/tt> for audio if it is implemented\n     * for video and it is indeed the cause for our use case of\n     * <tt>AudioMixingPushBufferDataSource<\/tt>, the new <tt>AudioMixer<\/tt>\n     * instance provides specified <tt>CaptureDevice<\/tt> capabilities to the\n     * <tt>AudioMixingPushBufferDataSource<\/tt>s it creates. The specified\n     * <tt>CaptureDevice<\/tt> is also added as the first input\n     * <tt>DataSource<\/tt> of the new instance.\n     * \n     * @param captureDevice the <tt>CaptureDevice<\/tt> capabilities to be\n     * provided to the <tt>AudioMixingPushBufferDataSource<\/tt>s created by the\n     * new instance and its first input <tt>DataSource<\/tt>\n     */\n    public AudioMixer(CaptureDevice captureDevice)\n    {\n        if (captureDevice instanceof PullBufferDataSource)\n            captureDevice\n                = new PushBufferDataSourceAdapter(\n                        (PullBufferDataSource) captureDevice);\n\n        this.captureDevice = captureDevice;\n\n        this.localOutputDataSource = createOutputDataSource();\n        addInputDataSource(\n            (DataSource) this.captureDevice,\n            this.localOutputDataSource);\n    }","commit_id":"0979e474bb603e938a102ed4520ee58befede0af","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Gets the duration of each one of the output streams produced by this\n     * <tt>AudioMixer<\/tt>.\n     * \n     * @return the duration of each one of the output streams produced by this\n     * <tt>AudioMixer<\/tt>\n     */\n    Time getDuration()\n    {\n        Time duration = null;\n\n        for (InputDataSourceDesc inputDataSourceDesc : inputDataSources)\n        {\n            Time inputDuration\n                = inputDataSourceDesc\n                        .getEffectiveInputDataSource().getDuration();\n\n            if (Duration.DURATION_UNBOUNDED.equals(inputDuration)\n                    || Duration.DURATION_UNKNOWN.equals(inputDuration))\n                return inputDuration;\n\n            if ((duration == null)\n                    || (duration.getNanoseconds() < inputDuration.getNanoseconds()))\n                duration = inputDuration;\n        }\n        return (duration == null) ? Duration.DURATION_UNKNOWN : duration;\n    }","id":105681,"modified_method":"/**\n     * Gets the duration of each one of the output streams produced by this\n     * <tt>AudioMixer<\/tt>.\n     * \n     * @return the duration of each one of the output streams produced by this\n     * <tt>AudioMixer<\/tt>\n     */\n    Time getDuration()\n    {\n        Time duration = null;\n\n        synchronized (inputDataSources)\n        {\n            for (InputDataSourceDesc inputDataSourceDesc : inputDataSources)\n            {\n                Time inputDuration\n                    = inputDataSourceDesc\n                            .getEffectiveInputDataSource().getDuration();\n\n                if (Duration.DURATION_UNBOUNDED.equals(inputDuration)\n                        || Duration.DURATION_UNKNOWN.equals(inputDuration))\n                    return inputDuration;\n\n                if ((duration == null)\n                        || (duration.getNanoseconds()\n                                < inputDuration.getNanoseconds()))\n                    duration = inputDuration;\n            }\n        }\n        return (duration == null) ? Duration.DURATION_UNKNOWN : duration;\n    }","commit_id":"0979e474bb603e938a102ed4520ee58befede0af","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Stops the input <tt>DataSource<\/tt>s of this <tt>AudioMixer<\/tt>.\n     * \n     * @throws IOException\n     */\n    void stop()\n        throws IOException\n    {\n        for (InputDataSourceDesc inputDataSourceDesc : inputDataSources)\n            inputDataSourceDesc.getEffectiveInputDataSource().stop();\n    }","id":105682,"modified_method":"/**\n     * Stops the input <tt>DataSource<\/tt>s of this <tt>AudioMixer<\/tt>.\n     * \n     * @throws IOException\n     */\n    void stop()\n        throws IOException\n    {\n        synchronized (inputDataSources)\n        {\n            for (InputDataSourceDesc inputDataSourceDesc : inputDataSources)\n                inputDataSourceDesc.getEffectiveInputDataSource().stop();\n        }\n    }","commit_id":"0979e474bb603e938a102ed4520ee58befede0af","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Starts the input <tt>DataSource<\/tt>s of this <tt>AudioMixer<\/tt>.\n     * \n     * @throws IOException\n     */\n    void start()\n        throws IOException\n    {\n        for (InputDataSourceDesc inputDataSourceDesc : inputDataSources)\n            inputDataSourceDesc.getEffectiveInputDataSource().start();\n    }","id":105683,"modified_method":"/**\n     * Starts the input <tt>DataSource<\/tt>s of this <tt>AudioMixer<\/tt>.\n     * \n     * @throws IOException\n     */\n    void start()\n        throws IOException\n    {\n        synchronized (inputDataSources)\n        {\n            for (InputDataSourceDesc inputDataSourceDesc : inputDataSources)\n                inputDataSourceDesc.getEffectiveInputDataSource().start();\n        }\n    }","commit_id":"0979e474bb603e938a102ed4520ee58befede0af","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Adds a new input <tt>DataSource<\/tt> to the collection of input\n     * <tt>DataSource<\/tt>s from which this instance reads audio. If the\n     * specified <tt>DataSource<\/tt> indeed provides audio, the respective\n     * contributions to the mix will be excluded from the mix output provided\n     * through a specific <tt>AudioMixingPushBufferDataSource<\/tt>.\n     * \n     * @param inputDataSource a new <tt>DataSource<\/tt> to input audio to this\n     * instance\n     * @param outputDataSource the <tt>AudioMixingPushBufferDataSource<\/tt> to\n     * not include the audio contributions of <tt>inputDataSource<\/tt> in the\n     * mix it outputs\n     */\n    void addInputDataSource(\n        DataSource inputDataSource,\n        AudioMixingPushBufferDataSource outputDataSource)\n    {\n        if (inputDataSource == null)\n            throw new IllegalArgumentException(\"inputDataSource\");\n\n        for (InputDataSourceDesc inputDataSourceDesc : inputDataSources)\n            if (inputDataSource.equals(inputDataSourceDesc.inputDataSource))\n                throw new IllegalArgumentException(\"inputDataSource\");\n\n        inputDataSources.add(\n            new InputDataSourceDesc(\n                    inputDataSource,\n                    outputDataSource));\n    }","id":105684,"modified_method":"/**\n     * Adds a new input <tt>DataSource<\/tt> to the collection of input\n     * <tt>DataSource<\/tt>s from which this instance reads audio. If the\n     * specified <tt>DataSource<\/tt> indeed provides audio, the respective\n     * contributions to the mix will be excluded from the mix output provided\n     * through a specific <tt>AudioMixingPushBufferDataSource<\/tt>.\n     * \n     * @param inputDataSource a new <tt>DataSource<\/tt> to input audio to this\n     * instance\n     * @param outputDataSource the <tt>AudioMixingPushBufferDataSource<\/tt> to\n     * not include the audio contributions of <tt>inputDataSource<\/tt> in the\n     * mix it outputs\n     */\n    void addInputDataSource(\n        DataSource inputDataSource,\n        AudioMixingPushBufferDataSource outputDataSource)\n    {\n        if (inputDataSource == null)\n            throw new IllegalArgumentException(\"inputDataSource\");\n\n        synchronized (inputDataSources)\n        {\n            for (InputDataSourceDesc inputDataSourceDesc : inputDataSources)\n                if (inputDataSource.equals(inputDataSourceDesc.inputDataSource))\n                    throw new IllegalArgumentException(\"inputDataSource\");\n\n            inputDataSources.add(\n                new InputDataSourceDesc(\n                        inputDataSource,\n                        outputDataSource));\n        }\n    }","commit_id":"0979e474bb603e938a102ed4520ee58befede0af","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Notifies this <tt>AudioMixer<\/tt> that an output\n     * <tt>AudioMixingPushBufferDataSource<\/tt> reading from it has been\n     * connected. The first of the many\n     * <tt>AudioMixingPushBufferDataSource<\/tt>s reading from this\n     * <tt>AudioMixer<\/tt> which gets connected causes it to connect to the\n     * input <tt>DataSource<\/tt>s it manages.\n     * \n     * @throws IOException\n     */\n    void connect()\n        throws IOException\n    {\n        if (connected == 0)\n            for (InputDataSourceDesc inputDataSourceDesc : inputDataSources)\n                inputDataSourceDesc.getEffectiveInputDataSource().connect();\n\n        connected++;\n    }","id":105685,"modified_method":"/**\n     * Notifies this <tt>AudioMixer<\/tt> that an output\n     * <tt>AudioMixingPushBufferDataSource<\/tt> reading from it has been\n     * connected. The first of the many\n     * <tt>AudioMixingPushBufferDataSource<\/tt>s reading from this\n     * <tt>AudioMixer<\/tt> which gets connected causes it to connect to the\n     * input <tt>DataSource<\/tt>s it manages.\n     * \n     * @throws IOException\n     */\n    void connect()\n        throws IOException\n    {\n        if (connected == 0)\n            synchronized (inputDataSources)\n            {\n                for (InputDataSourceDesc inputDataSourceDesc : inputDataSources)\n                    inputDataSourceDesc.getEffectiveInputDataSource().connect();\n            }\n\n        connected++;\n    }","commit_id":"0979e474bb603e938a102ed4520ee58befede0af","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Gets the <tt>SourceStream<\/tt>s (in the form of\n     * <tt>InputStreamDesc<\/tt>) of the <tt>DataSource<\/tt>s from which\n     * this <tt>AudioMixer<\/tt> reads data which produce data in a specific\n     * <tt>AudioFormat<\/tt>. When an input <tt>DataSource<\/tt> does not\n     * have such <tt>SourceStream<\/tt>s, an attempt is made to transcode its\n     * tracks so that such <tt>SourceStream<\/tt>s can be retrieved from it\n     * after transcoding.\n     * \n     * @param outputFormat\n     *            the <tt>AudioFormat<\/tt> in which the retrieved\n     *            <tt>SourceStream<\/tt>s are to produce data\n     * @return a new collection of <tt>SourceStream<\/tt>s (in the form of\n     *         <tt>InputStreamDesc<\/tt>) retrieved from the input\n     *         <tt>DataSource<\/tt>s of this <tt>AudioMixer<\/tt> and\n     *         producing data in the specified <tt>AudioFormat<\/tt>\n     * @throws IOException\n     */\n    private Collection<InputStreamDesc> getInputStreamsFromInputDataSources(\n            AudioFormat outputFormat)\n        throws IOException\n    {\n        List<InputStreamDesc> inputStreams = new ArrayList<InputStreamDesc>();\n\n        for (InputDataSourceDesc inputDataSourceDesc : inputDataSources)\n        {\n            boolean got\n                = getInputStreamsFromInputDataSource(\n                        inputDataSourceDesc,\n                        outputFormat,\n                        inputStreams);\n\n            if (!got)\n            {\n                DataSource transcodingDataSource\n                    = createTranscodingDataSource(\n                            inputDataSourceDesc.getEffectiveInputDataSource(),\n                            outputFormat);\n\n                if (transcodingDataSource != null)\n                {\n                    inputDataSourceDesc.setTranscodingDataSource(\n                        transcodingDataSource);\n\n                    getInputStreamsFromInputDataSource(\n                        inputDataSourceDesc,\n                        outputFormat,\n                        inputStreams);\n                }\n            }\n        }\n        return inputStreams;\n    }","id":105686,"modified_method":"/**\n     * Gets the <tt>SourceStream<\/tt>s (in the form of\n     * <tt>InputStreamDesc<\/tt>) of the <tt>DataSource<\/tt>s from which\n     * this <tt>AudioMixer<\/tt> reads data which produce data in a specific\n     * <tt>AudioFormat<\/tt>. When an input <tt>DataSource<\/tt> does not\n     * have such <tt>SourceStream<\/tt>s, an attempt is made to transcode its\n     * tracks so that such <tt>SourceStream<\/tt>s can be retrieved from it\n     * after transcoding.\n     * \n     * @param outputFormat\n     *            the <tt>AudioFormat<\/tt> in which the retrieved\n     *            <tt>SourceStream<\/tt>s are to produce data\n     * @return a new collection of <tt>SourceStream<\/tt>s (in the form of\n     *         <tt>InputStreamDesc<\/tt>) retrieved from the input\n     *         <tt>DataSource<\/tt>s of this <tt>AudioMixer<\/tt> and\n     *         producing data in the specified <tt>AudioFormat<\/tt>\n     * @throws IOException\n     */\n    private Collection<InputStreamDesc> getInputStreamsFromInputDataSources(\n            AudioFormat outputFormat)\n        throws IOException\n    {\n        List<InputStreamDesc> inputStreams = new ArrayList<InputStreamDesc>();\n\n        synchronized (inputDataSources)\n        {\n            for (InputDataSourceDesc inputDataSourceDesc : inputDataSources)\n            {\n                boolean got\n                    = getInputStreamsFromInputDataSource(\n                            inputDataSourceDesc,\n                            outputFormat,\n                            inputStreams);\n\n                if (!got)\n                {\n                    DataSource transcodingDataSource\n                        = createTranscodingDataSource(\n                                inputDataSourceDesc\n                                    .getEffectiveInputDataSource(),\n                                outputFormat);\n\n                    if (transcodingDataSource != null)\n                    {\n                        inputDataSourceDesc\n                            .setTranscodingDataSource(transcodingDataSource);\n\n                        getInputStreamsFromInputDataSource(\n                            inputDataSourceDesc,\n                            outputFormat,\n                            inputStreams);\n                    }\n                }\n            }\n        }\n        return inputStreams;\n    }","commit_id":"0979e474bb603e938a102ed4520ee58befede0af","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n         * Reads audio samples from a specific <tt>PushBufferStream<\/tt> and\n         * converts them to a specific output <tt>AudioFormat<\/tt>. An\n         * attempt is made to read a specific maximum number of samples from the\n         * specified <tt>PushBufferStream<\/tt> but the very\n         * <tt>PushBufferStream<\/tt> may not honor the request.\n         * \n         * @param inputStream\n         *            the <tt>PushBufferStream<\/tt> to read from\n         * @param outputFormat\n         *            the <tt>AudioFormat<\/tt> to which the samples read\n         *            from <tt>inputStream<\/tt> are to converted before\n         *            being returned\n         * @param sampleCount\n         *            the maximum number of samples which the read operation\n         *            should attempt to read from <tt>inputStream<\/tt> but\n         *            the very <tt>inputStream<\/tt> may not honor the\n         *            request\n         * @return\n         * @throws IOException\n         * @throws UnsupportedFormatException\n         */\n        private int[] read(\n                PushBufferStream inputStream,\n                AudioFormat outputFormat,\n                int sampleCount)\n            throws IOException,\n                   UnsupportedFormatException\n        {\n            Buffer buffer = new Buffer();\n        \n            if (sampleCount != 0)\n            {\n                AudioFormat inputFormat = (AudioFormat) inputStream.getFormat();\n                Class<?> inputDataType = inputFormat.getDataType();\n        \n                if (Format.byteArray.equals(inputDataType))\n                {\n                    buffer.setData(\n                        new byte[\n                                sampleCount\n                                    * (inputFormat.getSampleSizeInBits() / 8)]);\n                    buffer.setLength(0);\n                    buffer.setOffset(0);\n                }\n                else\n                    throw\n                        new UnsupportedFormatException(\n                                \"!Format.getDataType().equals(byte[].class)\",\n                                inputFormat);\n            }\n        \n            inputStream.read(buffer);\n        \n            int inputLength = buffer.getLength();\n        \n            if (inputLength <= 0)\n                return null;\n        \n            AudioFormat inputFormat = (AudioFormat) buffer.getFormat();\n        \n            if (inputFormat.getSigned() != AudioFormat.SIGNED)\n                throw\n                    new UnsupportedFormatException(\n                            \"AudioFormat.getSigned()\",\n                            inputFormat);\n            if (inputFormat.getChannels() != outputFormat.getChannels())\n                throw\n                    new UnsupportedFormatException(\n                            \"AudioFormat.getChannels()\",\n                            inputFormat);\n        \n            Object inputData = buffer.getData();\n        \n            if (inputData instanceof byte[])\n            {\n                byte[] inputSamples = (byte[]) inputData;\n                int[] outputSamples;\n                int outputSampleSizeInBits = outputFormat.getSampleSizeInBits();\n        \n                switch (inputFormat.getSampleSizeInBits())\n                {\n                case 16:\n                    outputSamples = new int[inputSamples.length / 2];\n                    for (int i = 0; i < outputSamples.length; i++)\n                    {\n                        int sample = ArrayIOUtils.readInt16(inputSamples, i * 2);\n        \n                        switch (outputSampleSizeInBits)\n                        {\n                        case 16:\n                            break;\n                        case 32:\n                            sample = Math.round(sample * INT_TO_SHORT_RATIO);\n                            break;\n                        case 8:\n                        case 24:\n                        default:\n                            throw\n                                new UnsupportedFormatException(\n                                        \"AudioFormat.getSampleSizeInBits()\",\n                                        outputFormat);\n                        }\n        \n                        outputSamples[i] = sample;\n                    }\n                    return outputSamples;\n                case 32:\n                    outputSamples = new int[inputSamples.length / 4];\n                    for (int i = 0; i < outputSamples.length; i++)\n                    {\n                        int sample = readInt(inputSamples, i * 4);\n        \n                        switch (outputSampleSizeInBits)\n                        {\n                        case 16:\n                            sample = Math.round(sample * SHORT_TO_INT_RATIO);\n                            break;\n                        case 32:\n                            break;\n                        case 8:\n                        case 24:\n                        default:\n                            throw\n                                new UnsupportedFormatException(\n                                        \"AudioFormat.getSampleSizeInBits()\",\n                                        outputFormat);\n                        }\n        \n                        outputSamples[i] = sample;\n                    }\n                    return outputSamples;\n                case 8:\n                case 24:\n                default:\n                    throw\n                        new UnsupportedFormatException(\n                                \"AudioFormat.getSampleSizeInBits()\",\n                                inputFormat);\n                }\n            }\n            else if (inputData instanceof short[])\n            {\n                throw\n                    new UnsupportedFormatException(\n                            \"Format.getDataType().equals(short[].class)\",\n                            inputFormat);\n            }\n            else if (inputData instanceof int[])\n            {\n                throw\n                    new UnsupportedFormatException(\n                            \"Format.getDataType().equals(int[].class)\",\n                            inputFormat);\n            }\n            return null;\n        }","id":105687,"modified_method":"/**\n         * Reads audio samples from a specific <tt>PushBufferStream<\/tt> and\n         * converts them to a specific output <tt>AudioFormat<\/tt>. An\n         * attempt is made to read a specific maximum number of samples from the\n         * specified <tt>PushBufferStream<\/tt> but the very\n         * <tt>PushBufferStream<\/tt> may not honor the request.\n         * \n         * @param inputStream\n         *            the <tt>PushBufferStream<\/tt> to read from\n         * @param outputFormat\n         *            the <tt>AudioFormat<\/tt> to which the samples read\n         *            from <tt>inputStream<\/tt> are to converted before\n         *            being returned\n         * @param sampleCount\n         *            the maximum number of samples which the read operation\n         *            should attempt to read from <tt>inputStream<\/tt> but\n         *            the very <tt>inputStream<\/tt> may not honor the\n         *            request\n         * @return\n         * @throws IOException\n         * @throws UnsupportedFormatException\n         */\n        private int[] read(\n                PushBufferStream inputStream,\n                AudioFormat outputFormat,\n                int sampleCount)\n            throws IOException,\n                   UnsupportedFormatException\n        {\n            AudioFormat inputStreamFormat = (AudioFormat) inputStream.getFormat();\n            Buffer buffer = new Buffer();\n        \n            if (sampleCount != 0)\n            {\n                Class<?> inputDataType = inputStreamFormat.getDataType();\n        \n                if (Format.byteArray.equals(inputDataType))\n                {\n                    buffer.setData(\n                        new byte[\n                                sampleCount\n                                    * (inputStreamFormat.getSampleSizeInBits()\n                                            / 8)]);\n                    buffer.setLength(0);\n                    buffer.setOffset(0);\n                }\n                else\n                    throw\n                        new UnsupportedFormatException(\n                                \"!Format.getDataType().equals(byte[].class)\",\n                                inputStreamFormat);\n            }\n        \n            inputStream.read(buffer);\n        \n            int inputLength = buffer.getLength();\n        \n            if (inputLength <= 0)\n                return null;\n        \n            AudioFormat inputFormat = (AudioFormat) buffer.getFormat();\n\n            if (inputFormat == null)\n                inputFormat = inputStreamFormat;\n\n            int inputFormatSigned = inputFormat.getSigned();\n\n            if ((inputFormatSigned != AudioFormat.SIGNED)\n                    && (inputFormatSigned != Format.NOT_SPECIFIED))\n                throw\n                    new UnsupportedFormatException(\n                            \"AudioFormat.getSigned()\",\n                            inputFormat);\n\n            int inputFormatChannels = inputFormat.getChannels();\n            int outputFormatChannels = outputFormat.getChannels();\n\n            if ((inputFormatChannels != outputFormatChannels)\n                    && (inputFormatChannels != Format.NOT_SPECIFIED)\n                    && (outputFormatChannels != Format.NOT_SPECIFIED))\n            {\n                logger\n                    .error(\n                        \"Encountered inputFormat with a different number of\"\n                            + \" channels than outputFormat for inputFormat \"\n                            + inputFormat\n                            + \" and outputFormat \"\n                            + outputFormat);\n                throw\n                    new UnsupportedFormatException(\n                            \"AudioFormat.getChannels()\",\n                            inputFormat);\n            }\n\n            Object inputData = buffer.getData();\n        \n            if (inputData instanceof byte[])\n            {\n                byte[] inputSamples = (byte[]) inputData;\n                int[] outputSamples;\n                int outputSampleSizeInBits = outputFormat.getSampleSizeInBits();\n        \n                switch (inputFormat.getSampleSizeInBits())\n                {\n                case 16:\n                    outputSamples = new int[inputSamples.length / 2];\n                    for (int i = 0; i < outputSamples.length; i++)\n                    {\n                        int sample = ArrayIOUtils.readInt16(inputSamples, i * 2);\n        \n                        switch (outputSampleSizeInBits)\n                        {\n                        case 16:\n                            break;\n                        case 32:\n                            sample = Math.round(sample * INT_TO_SHORT_RATIO);\n                            break;\n                        case 8:\n                        case 24:\n                        default:\n                            throw\n                                new UnsupportedFormatException(\n                                        \"AudioFormat.getSampleSizeInBits()\",\n                                        outputFormat);\n                        }\n        \n                        outputSamples[i] = sample;\n                    }\n                    return outputSamples;\n                case 32:\n                    outputSamples = new int[inputSamples.length / 4];\n                    for (int i = 0; i < outputSamples.length; i++)\n                    {\n                        int sample = readInt(inputSamples, i * 4);\n        \n                        switch (outputSampleSizeInBits)\n                        {\n                        case 16:\n                            sample = Math.round(sample * SHORT_TO_INT_RATIO);\n                            break;\n                        case 32:\n                            break;\n                        case 8:\n                        case 24:\n                        default:\n                            throw\n                                new UnsupportedFormatException(\n                                        \"AudioFormat.getSampleSizeInBits()\",\n                                        outputFormat);\n                        }\n        \n                        outputSamples[i] = sample;\n                    }\n                    return outputSamples;\n                case 8:\n                case 24:\n                default:\n                    throw\n                        new UnsupportedFormatException(\n                                \"AudioFormat.getSampleSizeInBits()\",\n                                inputFormat);\n                }\n            }\n            else if (inputData instanceof short[])\n            {\n                throw\n                    new UnsupportedFormatException(\n                            \"Format.getDataType().equals(short[].class)\",\n                            inputFormat);\n            }\n            else if (inputData instanceof int[])\n            {\n                throw\n                    new UnsupportedFormatException(\n                            \"Format.getDataType().equals(int[].class)\",\n                            inputFormat);\n            }\n            return null;\n        }","commit_id":"0979e474bb603e938a102ed4520ee58befede0af","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Notifies this <tt>AudioMixer<\/tt> that an output\n     * <tt>AudioMixingPushBufferDataSource<\/tt> reading from it has been\n     * disconnected. The last of the many\n     * <tt>AudioMixingPushBufferDataSource<\/tt>s reading from this\n     * <tt>AudioMixer<\/tt> which gets disconnected causes it to disconnect\n     * from the input <tt>DataSource<\/tt>s it manages.\n     */\n    void disconnect()\n    {\n        if (connected <= 0)\n            return;\n\n        connected--;\n\n        if (connected == 0)\n        {\n            outputStream = null;\n\n            for (InputDataSourceDesc inputDataSourceDesc : inputDataSources)\n                inputDataSourceDesc.getEffectiveInputDataSource().disconnect();\n        }\n    }","id":105688,"modified_method":"/**\n     * Notifies this <tt>AudioMixer<\/tt> that an output\n     * <tt>AudioMixingPushBufferDataSource<\/tt> reading from it has been\n     * disconnected. The last of the many\n     * <tt>AudioMixingPushBufferDataSource<\/tt>s reading from this\n     * <tt>AudioMixer<\/tt> which gets disconnected causes it to disconnect\n     * from the input <tt>DataSource<\/tt>s it manages.\n     */\n    void disconnect()\n    {\n        if (connected <= 0)\n            return;\n\n        connected--;\n\n        if (connected == 0)\n        {\n            outputStream = null;\n\n            synchronized (inputDataSources)\n            {\n                for (InputDataSourceDesc inputDataSourceDesc : inputDataSources)\n                    inputDataSourceDesc.getEffectiveInputDataSource().disconnect();\n            }\n        }\n    }","commit_id":"0979e474bb603e938a102ed4520ee58befede0af","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Gets the <tt>AudioFormat<\/tt> in which the input\n     * <tt>DataSource<\/tt>s of this <tt>AudioMixer<\/tt> can produce data\n     * and which is to be the output <tt>Format<\/tt> of this\n     * <tt>AudioMixer<\/tt>.\n     * \n     * @return the <tt>AudioFormat<\/tt> in which the input\n     *         <tt>DataSource<\/tt>s of this <tt>AudioMixer<\/tt> can\n     *         produce data and which is to be the output <tt>Format<\/tt> of\n     *         this <tt>AudioMixer<\/tt>\n     */\n    private AudioFormat getOutputFormatFromInputDataSources()\n    {\n        // TODO Auto-generated method stub\n        return DEFAULT_OUTPUT_FORMAT;\n    }","id":105689,"modified_method":"/**\n     * Gets the <tt>AudioFormat<\/tt> in which the input\n     * <tt>DataSource<\/tt>s of this <tt>AudioMixer<\/tt> can produce data\n     * and which is to be the output <tt>Format<\/tt> of this\n     * <tt>AudioMixer<\/tt>.\n     * \n     * @return the <tt>AudioFormat<\/tt> in which the input\n     *         <tt>DataSource<\/tt>s of this <tt>AudioMixer<\/tt> can\n     *         produce data and which is to be the output <tt>Format<\/tt> of\n     *         this <tt>AudioMixer<\/tt>\n     */\n    private AudioFormat getOutputFormatFromInputDataSources()\n    {\n        String formatControlType = FormatControl.class.getName();\n        AudioFormat outputFormat = null;\n\n        synchronized (inputDataSources)\n        {\n            for (InputDataSourceDesc inputDataSource : inputDataSources)\n            {\n                FormatControl formatControl\n                    = (FormatControl)\n                        inputDataSource\n                            .getEffectiveInputDataSource()\n                                .getControl(formatControlType);\n\n                if (formatControl != null)\n                {\n                    AudioFormat format\n                        = (AudioFormat) formatControl.getFormat();\n\n                    if (format != null)\n                    {\n                        // SIGNED\n                        int signed = format.getSigned();\n\n                        if ((AudioFormat.SIGNED == signed)\n                                || (Format.NOT_SPECIFIED == signed))\n                        {\n                            // LITTLE_ENDIAN\n                            int endian = format.getEndian();\n\n                            if ((AudioFormat.LITTLE_ENDIAN == endian)\n                                    || (Format.NOT_SPECIFIED == endian))\n                            {\n                                outputFormat = format;\n                                break;\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (outputFormat == null)\n            outputFormat = DEFAULT_OUTPUT_FORMAT;\n\n        if (logger.isTraceEnabled())\n            logger\n                .trace(\n                    \"Determined outputFormat of AudioMixer\"\n                        + \" from inputDataSources to be \"\n                        + outputFormat);\n        return outputFormat;\n    }","commit_id":"0979e474bb603e938a102ed4520ee58befede0af","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Sets a specific <tt>AudioFormat<\/tt>, if possible, as the output\n     * format of the input <tt>DataSource<\/tt>s of this\n     * <tt>AudioMixer<\/tt> in an attempt to not have to perform explicit\n     * transcoding of the input <tt>SourceStream<\/tt>s.\n     * \n     * @param outputFormat\n     *            the <tt>AudioFormat<\/tt> in which the input\n     *            <tt>DataSource<\/tt>s of this <tt>AudioMixer<\/tt> are\n     *            to be instructed to output\n     */\n    private void setOutputFormatToInputDataSources(AudioFormat outputFormat)\n    {\n        String formatControlType = FormatControl.class.getName();\n\n        for (InputDataSourceDesc inputDataSourceDesc : inputDataSources)\n        {\n            DataSource inputDataSource\n                = inputDataSourceDesc.getEffectiveInputDataSource();\n            FormatControl formatControl\n                = (FormatControl) inputDataSource.getControl(formatControlType);\n\n            if (formatControl != null)\n            {\n                Format inputFormat = formatControl.getFormat();\n\n                if ((inputFormat == null)\n                        || !matches(inputFormat, outputFormat))\n                    formatControl.setFormat(outputFormat);\n            }\n        }\n    }","id":105690,"modified_method":"/**\n     * Sets a specific <tt>AudioFormat<\/tt>, if possible, as the output\n     * format of the input <tt>DataSource<\/tt>s of this\n     * <tt>AudioMixer<\/tt> in an attempt to not have to perform explicit\n     * transcoding of the input <tt>SourceStream<\/tt>s.\n     * \n     * @param outputFormat\n     *            the <tt>AudioFormat<\/tt> in which the input\n     *            <tt>DataSource<\/tt>s of this <tt>AudioMixer<\/tt> are\n     *            to be instructed to output\n     */\n    private void setOutputFormatToInputDataSources(AudioFormat outputFormat)\n    {\n        String formatControlType = FormatControl.class.getName();\n\n        synchronized (inputDataSources)\n        {\n            for (InputDataSourceDesc inputDataSourceDesc : inputDataSources)\n            {\n                DataSource inputDataSource\n                    = inputDataSourceDesc.getEffectiveInputDataSource();\n                FormatControl formatControl\n                    = (FormatControl)\n                        inputDataSource.getControl(formatControlType);\n\n                if (formatControl != null)\n                {\n                    Format inputFormat = formatControl.getFormat();\n\n                    if ((inputFormat == null)\n                            || !matches(inputFormat, outputFormat))\n                    {\n                        Format setFormat\n                            = formatControl.setFormat(outputFormat);\n\n                        if (setFormat == null)\n                            logger\n                                .error(\n                                    \"Failed to set format of inputDataSource to \"\n                                        + outputFormat);\n                        else if (setFormat != outputFormat)\n                            logger\n                                .warn(\n                                    \"Failed to change format of inputDataSource from \"\n                                        + setFormat\n                                        + \" to \"\n                                        + outputFormat);\n                        else if (logger.isTraceEnabled())\n                            logger\n                                .trace(\n                                    \"Set format of inputDataSource to \"\n                                        + setFormat);\n                    }\n                }\n            }\n        }\n    }","commit_id":"0979e474bb603e938a102ed4520ee58befede0af","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes a new <tt>MutePushBufferDataSource<\/tt> instance which is to\n     * provide mute support for a specific <tt>PushBufferDataSource<\/tt>.\n     * \n     * @param dataSource the <tt>PushBufferDataSource<\/tt> the new instance is\n     *            to provide mute support for\n     */\n    public MutePushBufferDataSource(PushBufferDataSource dataSource)\n    {\n        super(\n            (dataSource instanceof CaptureDevice)\n                ? (CaptureDevice) dataSource\n                : null);\n\n        this.dataSource = dataSource;\n    }","id":105691,"modified_method":"/**\n     * Initializes a new <tt>MutePushBufferDataSource<\/tt> instance which is to\n     * provide mute support for a specific <tt>PushBufferDataSource<\/tt>.\n     * \n     * @param dataSource the <tt>PushBufferDataSource<\/tt> the new instance is\n     *            to provide mute support for\n     */\n    public MutePushBufferDataSource(PushBufferDataSource dataSource)\n    {\n        super(dataSource);\n    }","commit_id":"0979e474bb603e938a102ed4520ee58befede0af","url":"https://github.com/jitsi/jitsi"},{"original_method":"public static Test suite() {\n\t\tTestSuite testSuite = new TestSuite();\n\n\t\ttestSuite.addTest(PostNewMBCategoryThreadMessageTests.suite());\n\t\ttestSuite.addTest(PostNewMBCategoryThreadMultipleMessageTests.suite());\n\t\ttestSuite.addTest(PostNewMBThreadMessageTests.suite());\n\t\ttestSuite.addTest(PostNewMBThreadMultipleMessageTests.suite());\n\n\t\treturn testSuite;\n\t}","id":105692,"modified_method":"public static Test suite() {\n\t\tTestSuite testSuite = new TestSuite();\n\n\t\ttestSuite.addTest(PostNewMBCategoriesThreadMessageTests.suite());\n\t\ttestSuite.addTest(PostNewMBCategoryThreadMessageTests.suite());\n\t\ttestSuite.addTest(PostNewMBCategoryThreadsMessageTests.suite());\n\t\ttestSuite.addTest(PostNewMBThreadMessageTests.suite());\n\t\ttestSuite.addTest(PostNewMBThreadsMessageTests.suite());\n\t\ttestSuite.addTest(ReplyMBCategoryThreadMessageRepliesTests.suite());\n\t\ttestSuite.addTest(ReplyMBCategoryThreadMessageReplyTests.suite());\n\t\ttestSuite.addTest(ReplyMBCategoryThreadMessageReplyReplyTests.suite());\n\t\ttestSuite.addTest(ReplyMBThreadMessageRepliesTests.suite());\n\t\ttestSuite.addTest(ReplyMBThreadMessageReplyTests.suite());\n\n\t\treturn testSuite;\n\t}","commit_id":"a2bee5588ab129f84981d016d7c1d9769f467137","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void testTearDownMBThread() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\t\t\t\tloadRequiredJavaScriptModules();\n\t\t\t\tselenium.clickAt(\"link=Message Boards Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Message Boards Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tloadRequiredJavaScriptModules();\n\n\t\t\t\tboolean thread1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!thread1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/navigation_interaction.js')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tloadRequiredJavaScriptModules();\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\n\t\t\t\tboolean thread2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!thread2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/navigation_interaction.js')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tloadRequiredJavaScriptModules();\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 3:\n\n\t\t\t\tboolean thread3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!thread3Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/navigation_interaction.js')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tloadRequiredJavaScriptModules();\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 4:\n\n\t\t\t\tboolean thread4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!thread4Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/navigation_interaction.js')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tloadRequiredJavaScriptModules();\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 5:\n\n\t\t\t\tboolean thread5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!thread5Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isElementPresent(\n\t\t\t\t\t\t\t\t\t\"//script[contains(@src,'/liferay/navigation_interaction.js')]\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tloadRequiredJavaScriptModules();\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","id":105693,"modified_method":"public void testTearDownMBThread() throws Exception {\n\t\tint label = 1;\n\n\t\twhile (label >= 1) {\n\t\t\tswitch (label) {\n\t\t\tcase 1:\n\t\t\t\tselenium.open(\"/web/guest/home/\");\n\t\t\t\tloadRequiredJavaScriptModules();\n\t\t\t\tselenium.clickAt(\"link=Message Boards Test Page\",\n\t\t\t\t\tRuntimeVariables.replace(\"Message Boards Test Page\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tloadRequiredJavaScriptModules();\n\n\t\t\t\tboolean thread1Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!thread1Present) {\n\t\t\t\t\tlabel = 2;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tloadRequiredJavaScriptModules();\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 2:\n\n\t\t\t\tboolean thread2Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!thread2Present) {\n\t\t\t\t\tlabel = 3;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tloadRequiredJavaScriptModules();\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 3:\n\n\t\t\t\tboolean thread3Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!thread3Present) {\n\t\t\t\t\tlabel = 4;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tloadRequiredJavaScriptModules();\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 4:\n\n\t\t\t\tboolean thread4Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!thread4Present) {\n\t\t\t\t\tlabel = 5;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tloadRequiredJavaScriptModules();\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 5:\n\n\t\t\t\tboolean thread5Present = selenium.isElementPresent(\n\t\t\t\t\t\t\"//span[@title='Actions']/ul/li/strong/a\");\n\n\t\t\t\tif (!thread5Present) {\n\t\t\t\t\tlabel = 6;\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tThread.sleep(5000);\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Actions\"),\n\t\t\t\t\tselenium.getText(\"//span[@title='Actions']/ul/li/strong/a\"));\n\t\t\t\tselenium.clickAt(\"//span[@title='Actions']/ul/li/strong/a\",\n\t\t\t\t\tRuntimeVariables.replace(\"Actions\"));\n\n\t\t\t\tfor (int second = 0;; second++) {\n\t\t\t\t\tif (second >= 90) {\n\t\t\t\t\t\tfail(\"timeout\");\n\t\t\t\t\t}\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tif (selenium.isVisible(\n\t\t\t\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\")) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t}\n\n\t\t\t\t\tThread.sleep(1000);\n\t\t\t\t}\n\n\t\t\t\tassertEquals(RuntimeVariables.replace(\"Delete\"),\n\t\t\t\t\tselenium.getText(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.click(RuntimeVariables.replace(\n\t\t\t\t\t\t\"//div[@class='lfr-component lfr-menu-list']/ul/li[contains(.,'Delete')]/a\"));\n\t\t\t\tselenium.waitForPageToLoad(\"30000\");\n\t\t\t\tloadRequiredJavaScriptModules();\n\t\t\t\tassertTrue(selenium.getConfirmation()\n\t\t\t\t\t\t\t\t   .matches(\"^Are you sure you want to delete this[\\\\s\\\\S]$\"));\n\n\t\t\tcase 6:\n\t\t\tcase 100:\n\t\t\t\tlabel = -1;\n\t\t\t}\n\t\t}\n\t}","commit_id":"a2bee5588ab129f84981d016d7c1d9769f467137","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * Returns the JUnit test suite for this package.<p>\n     * \n     * @return the JUnit test suite for this package\n     */        \n    public static Test suite() {\n        TestSuite suite = new TestSuite(\"Tests for package org.opencms.file\");\n        //$JUnit-BEGIN$\n        suite.addTest(TestTouch.suite());\n        suite.addTest(TestProperty.suite());\n        suite.addTest(TestSiblings.suite());\n        suite.addTest(TestUndoChanges.suite());\n        suite.addTest(TestReadResource.suite());\n        suite.addTest(TestChacc.suite());\n        suite.addTest(TestPermissions.suite());\n        suite.addTest(TestProperyDefinition.suite());\n        suite.addTest(TestCreateWriteResource.suite());\n        suite.addTest(TestProjects.suite());\n        suite.addTest(TestCopy.suite());        \n        suite.addTest(TestLock.suite()); \n        suite.addTest(TestMoveRename.suite());\n        suite.addTest(TestPublishing.suite());\n        //$JUnit-END$\n        return suite;\n    }","id":105694,"modified_method":"/**\n     * Returns the JUnit test suite for this package.<p>\n     * \n     * @return the JUnit test suite for this package\n     */\n    public static Test suite() {\n        TestSuite suite = new TestSuite(\"Tests for package org.opencms.file\");\n        //$JUnit-BEGIN$\n        suite.addTest(TestChacc.suite());\n        suite.addTest(TestCopy.suite());\n        suite.addTest(TestCreateWriteResource.suite());\n        suite.addTest(TestReadResource.suite());\n        suite.addTest(TestRestoreFromHistory.suite());\n        suite.addTest(TestLock.suite());\n        suite.addTest(TestTouch.suite());\n        suite.addTest(TestSiblings.suite());\n        suite.addTest(TestMoveRename.suite());\n        suite.addTest(TestUndoChanges.suite());\n        suite.addTest(TestPermissions.suite());\n        suite.addTest(TestProperty.suite());\n        suite.addTest(TestResourceOperations.suite());\n        suite.addTest(TestProjects.suite());\n        suite.addTest(TestProperyDefinition.suite());\n        suite.addTest(TestPublishing.suite());\n        //$JUnit-END$\n        return suite;\n    }","commit_id":"1eaa0be47a0f0efc5728297e564de8969365194d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Test the import of a sibling.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testImportSibling() throws Throwable {\n\n        CmsObject cms = getCmsObject();     \n        echo(\"Testing to import an existing resource as sibling\");\n\n        CmsProperty prop1 = new CmsProperty(I_CmsConstants.C_PROPERTY_TITLE, \"The title\", null);\n        CmsProperty prop2 = new CmsProperty(I_CmsConstants.C_PROPERTY_DESCRIPTION, \"The description\", null);\n        CmsProperty prop3 = new CmsProperty(I_CmsConstants.C_PROPERTY_KEYWORDS, \"The keywords\", null);\n        \n        List properties = new ArrayList();\n        properties.add(prop1);\n        \n        String siblingname = \"/folder1/test1.html\";\n        \n        // make sure some non-shared properties are attached to the sibling\n        cms.lockResource(siblingname);\n        cms.writePropertyObjects(siblingname, properties);\n        cms.unlockResource(siblingname);\n        \n        long timestamp = System.currentTimeMillis() - 12345678;\n        \n        String resourcename1 = \"/folder2/test1_sib1.html\";\n        String resourcename2 = \"/folder1/subfolder11/test1_sib2.html\";\n        \n        // read the existing resource to create siblings for\n        CmsFile file = cms.readFile(siblingname);\n        byte[] content = file.getContents(); \n        \n        assertTrue(file.getLength() > 0);\n        assertTrue(content.length > 0);\n        \n        storeResources(cms, siblingname);\n\n        // create a new resource\n        CmsResource resource;\n\n        resource= new CmsResource (\n            file.getStructureId(),\n            file.getResourceId(),\n            CmsUUID.getNullUUID(),\n            file.getContentId(),\n            CmsResource.getName(resourcename2),\n            CmsResourceTypePlain.C_RESOURCE_TYPE_ID,\n            0,\n            cms.getRequestContext().currentProject().getId(),\n            I_CmsConstants.C_STATE_NEW,\n            OpenCms.getResourceManager().getResourceType(CmsResourceTypePlain.C_RESOURCE_TYPE_ID).getLoaderId(),\n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            CmsResource.DATE_RELEASED_DEFAULT,\n            CmsResource.DATE_EXPIRED_DEFAULT,\n            1,\n            0\n        );\n        \n        properties.add(prop2);         \n        // using null as content must create sibling of existing content\n        cms.importResource(resourcename2, resource, null, properties);\n        \n        // project must be current project\n        assertProject(cms, resourcename2, cms.getRequestContext().currentProject());\n        // resource type\n        assertResourceType(cms, resourcename2, CmsResourceTypePlain.C_RESOURCE_TYPE_ID);\n        assertResourceType(cms, siblingname, CmsResourceTypePlain.C_RESOURCE_TYPE_ID);\n        // state\n        assertState(cms, resourcename2, I_CmsConstants.C_STATE_NEW);\n        assertState(cms, siblingname, I_CmsConstants.C_STATE_CHANGED);\n        // date last modified\n        assertDateLastModified(cms, resourcename2, file.getDateLastModified());      \n        assertDateLastModified(cms, siblingname, file.getDateLastModified());      \n        // the user last modified\n        assertUserLastModified(cms, resourcename2, cms.getRequestContext().currentUser());\n        assertUserLastModified(cms, siblingname, cms.getRequestContext().currentUser());\n        // content must be identical to stored content of new resource\n        assertContent(cms, resourcename2, content);\n        assertContent(cms, siblingname, content);       \n        // check the sibling count\n        assertSiblingCountIncremented(cms, siblingname, 1);       \n\n        // now evaluate the filter\n        OpenCmsTestResourceConfigurableFilter filter =\n            new OpenCmsTestResourceConfigurableFilter(OpenCmsTestResourceFilter.FILTER_CREATE_RESOURCE);\n\n        filter.disableSiblingCountTest();\n        assertFilter(cms, siblingname, filter);   \n        \n        String contentStr = \"Hello this is my NEW AND CHANGED sibling content\";\n        content = contentStr.getBytes();        \n        \n        resource= new CmsResource (\n            file.getStructureId(),\n            file.getResourceId(),\n            CmsUUID.getNullUUID(),\n            file.getContentId(),\n            CmsResource.getName(resourcename1),\n            CmsResourceTypePlain.C_RESOURCE_TYPE_ID,\n            0,\n            cms.getRequestContext().currentProject().getId(),\n            I_CmsConstants.C_STATE_NEW,\n            OpenCms.getResourceManager().getResourceType(CmsResourceTypePlain.C_RESOURCE_TYPE_ID).getLoaderId(),\n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            CmsResource.DATE_RELEASED_DEFAULT,\n            CmsResource.DATE_EXPIRED_DEFAULT,\n            1,\n            content.length\n        );\n        \n        properties.add(prop3);\n        // using new content must replace existing content\n        cms.importResource(resourcename1, resource, content, properties);\n                \n        // project must be current project\n        assertProject(cms, resourcename1, cms.getRequestContext().currentProject());\n        assertProject(cms, resourcename2, cms.getRequestContext().currentProject());\n        // resource type\n        assertResourceType(cms, resourcename1, CmsResourceTypePlain.C_RESOURCE_TYPE_ID);\n        assertResourceType(cms, resourcename2, CmsResourceTypePlain.C_RESOURCE_TYPE_ID);\n        assertResourceType(cms, siblingname, CmsResourceTypePlain.C_RESOURCE_TYPE_ID);\n        // state\n        assertState(cms, resourcename1, I_CmsConstants.C_STATE_NEW);\n        assertState(cms, resourcename2, I_CmsConstants.C_STATE_NEW);\n        assertState(cms, siblingname, I_CmsConstants.C_STATE_CHANGED);\n        // date last modified\n        assertDateLastModified(cms, resourcename1, timestamp);      \n        assertDateLastModified(cms, resourcename2, timestamp);      \n        assertDateLastModified(cms, siblingname, timestamp);      \n        // the user last modified\n        assertUserLastModified(cms, resourcename1, cms.getRequestContext().currentUser());\n        assertUserLastModified(cms, resourcename2, cms.getRequestContext().currentUser());\n        assertUserLastModified(cms, siblingname, cms.getRequestContext().currentUser());\n        // content must be identical to stored content of new resource\n        assertContent(cms, resourcename1, content);\n        assertContent(cms, resourcename2, content);\n        assertContent(cms, siblingname, content);       \n        // check the sibling count\n        assertSiblingCountIncremented(cms, siblingname, 2);       \n\n        // now evaluate the filter\n        assertFilter(cms, siblingname, filter);   \n        \n        // publish the project\n        cms.unlockProject(cms.getRequestContext().currentProject().getId());\n        cms.publishProject();     \n        \n        assertState(cms, resourcename1, I_CmsConstants.C_STATE_UNCHANGED);  \n        assertState(cms, resourcename2, I_CmsConstants.C_STATE_UNCHANGED);  \n    }","id":105695,"modified_method":"/**\n     * Test the import of a sibling.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testImportSibling() throws Throwable {\n\n        CmsObject cms = getCmsObject();     \n        echo(\"Testing to import an existing resource as sibling\");\n\n        CmsProperty prop1 = new CmsProperty(I_CmsConstants.C_PROPERTY_TITLE, \"The title\", null);\n        CmsProperty prop2 = new CmsProperty(I_CmsConstants.C_PROPERTY_DESCRIPTION, \"The description\", null);\n        CmsProperty prop3 = new CmsProperty(I_CmsConstants.C_PROPERTY_KEYWORDS, \"The keywords\", null);\n        \n        List properties = new ArrayList();\n        properties.add(prop1);\n        \n        String siblingname = \"/folder1/test1.html\";\n        \n        // make sure some non-shared properties are attached to the sibling\n        cms.lockResource(siblingname);\n        cms.writePropertyObjects(siblingname, properties);\n        cms.unlockResource(siblingname);\n        \n        long timestamp = System.currentTimeMillis() - 12345678;\n        \n        String resourcename1 = \"/folder2/test1_sib1.html\";\n        String resourcename2 = \"/folder1/subfolder11/test1_sib2.html\";\n        \n        // read the existing resource to create siblings for\n        CmsFile file = cms.readFile(siblingname);\n        byte[] content = file.getContents(); \n        \n        assertTrue(file.getLength() > 0);\n        assertTrue(content.length > 0);\n        \n        storeResources(cms, siblingname);\n\n        // create a new resource\n        CmsResource resource;\n\n        // cw: Test changed: must now provide correct content size in resource\n        resource= new CmsResource (\n            file.getStructureId(),\n            file.getResourceId(),\n            CmsUUID.getNullUUID(),\n            CmsResource.getName(resourcename2),\n            CmsResourceTypePlain.C_RESOURCE_TYPE_ID,\n            0,\n            cms.getRequestContext().currentProject().getId(),\n            I_CmsConstants.C_STATE_NEW,\n            OpenCms.getResourceManager().getResourceType(CmsResourceTypePlain.C_RESOURCE_TYPE_ID).getLoaderId(),\n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            CmsResource.DATE_RELEASED_DEFAULT,\n            CmsResource.DATE_EXPIRED_DEFAULT,\n            1,\n            content.length\n        );\n        \n        properties.add(prop2);         \n        // using null as content must create sibling of existing content\n        cms.importResource(resourcename2, resource, null, properties);\n        \n        // project must be current project\n        assertProject(cms, resourcename2, cms.getRequestContext().currentProject());\n        // resource type\n        assertResourceType(cms, resourcename2, CmsResourceTypePlain.C_RESOURCE_TYPE_ID);\n        assertResourceType(cms, siblingname, CmsResourceTypePlain.C_RESOURCE_TYPE_ID);\n        // state\n        assertState(cms, resourcename2, I_CmsConstants.C_STATE_NEW);\n        assertState(cms, siblingname, I_CmsConstants.C_STATE_CHANGED);\n        // date last modified\n        assertDateLastModified(cms, resourcename2, file.getDateLastModified());      \n        assertDateLastModified(cms, siblingname, file.getDateLastModified());      \n        // the user last modified\n        assertUserLastModified(cms, resourcename2, cms.getRequestContext().currentUser());\n        assertUserLastModified(cms, siblingname, cms.getRequestContext().currentUser());\n        // content must be identical to stored content of new resource\n        assertContent(cms, resourcename2, content);\n        assertContent(cms, siblingname, content);       \n        // check the sibling count\n        assertSiblingCountIncremented(cms, siblingname, 1);       \n\n        // now evaluate the filter\n        OpenCmsTestResourceConfigurableFilter filter =\n            new OpenCmsTestResourceConfigurableFilter(OpenCmsTestResourceFilter.FILTER_CREATE_RESOURCE);\n\n        filter.disableSiblingCountTest();\n        assertFilter(cms, siblingname, filter);   \n        \n        String contentStr = \"Hello this is my NEW AND CHANGED sibling content\";\n        content = contentStr.getBytes();        \n        \n        resource= new CmsResource (\n            file.getStructureId(),\n            file.getResourceId(),\n            CmsUUID.getNullUUID(),\n            CmsResource.getName(resourcename1),\n            CmsResourceTypePlain.C_RESOURCE_TYPE_ID,\n            0,\n            cms.getRequestContext().currentProject().getId(),\n            I_CmsConstants.C_STATE_NEW,\n            OpenCms.getResourceManager().getResourceType(CmsResourceTypePlain.C_RESOURCE_TYPE_ID).getLoaderId(),\n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            CmsResource.DATE_RELEASED_DEFAULT,\n            CmsResource.DATE_EXPIRED_DEFAULT,\n            1,\n            content.length\n        );\n        \n        properties.add(prop3);\n        // using new content must replace existing content\n        cms.importResource(resourcename1, resource, content, properties);\n                \n        // project must be current project\n        assertProject(cms, resourcename1, cms.getRequestContext().currentProject());\n        assertProject(cms, resourcename2, cms.getRequestContext().currentProject());\n        // resource type\n        assertResourceType(cms, resourcename1, CmsResourceTypePlain.C_RESOURCE_TYPE_ID);\n        assertResourceType(cms, resourcename2, CmsResourceTypePlain.C_RESOURCE_TYPE_ID);\n        assertResourceType(cms, siblingname, CmsResourceTypePlain.C_RESOURCE_TYPE_ID);\n        // state\n        assertState(cms, resourcename1, I_CmsConstants.C_STATE_NEW);\n        assertState(cms, resourcename2, I_CmsConstants.C_STATE_NEW);\n        assertState(cms, siblingname, I_CmsConstants.C_STATE_CHANGED);\n        // date last modified\n        assertDateLastModified(cms, resourcename1, timestamp);      \n        assertDateLastModified(cms, resourcename2, timestamp);      \n        assertDateLastModified(cms, siblingname, timestamp);      \n        // the user last modified\n        assertUserLastModified(cms, resourcename1, cms.getRequestContext().currentUser());\n        assertUserLastModified(cms, resourcename2, cms.getRequestContext().currentUser());\n        assertUserLastModified(cms, siblingname, cms.getRequestContext().currentUser());\n        // content must be identical to stored content of new resource\n        assertContent(cms, resourcename1, content);\n        assertContent(cms, resourcename2, content);\n        assertContent(cms, siblingname, content);       \n        // check the sibling count\n        assertSiblingCountIncremented(cms, siblingname, 2);       \n\n        // now evaluate the filter\n        assertFilter(cms, siblingname, filter);   \n        \n        // publish the project\n        cms.unlockProject(cms.getRequestContext().currentProject().getId());\n        cms.publishProject();     \n        \n        assertState(cms, resourcename1, I_CmsConstants.C_STATE_UNCHANGED);  \n        assertState(cms, resourcename2, I_CmsConstants.C_STATE_UNCHANGED);  \n    }","commit_id":"1eaa0be47a0f0efc5728297e564de8969365194d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n    * Test the create resource method for an already existing resource.<p>\n    * \n    * @throws Throwable if something goes wrong\n    */\n   public void testCreateResourceAgain() throws Throwable {\n\n       CmsObject cms = getCmsObject();     \n       echo(\"Testing to create an existing resource again\");\n\n       String resourcename = \"/folder1/test2.html\";\n       storeResources(cms, resourcename);\n       long timestamp = System.currentTimeMillis();\n       \n       String contentStr = \"Hello this is my NEW AND ALSO CHANGED other content\";\n       byte[] content = contentStr.getBytes();      \n\n       assertState(cms, resourcename, I_CmsConstants.C_STATE_UNCHANGED);\n       cms.lockResource(resourcename);\n       \n       try {\n           // resource exists and is not deleted, creation must thrw exception\n           cms.createResource(resourcename, CmsResourceTypePlain.C_RESOURCE_TYPE_ID, content, null);\n       } catch (CmsVfsException e) {\n           if (e.getType() != CmsVfsException.C_VFS_RESOURCE_ALREADY_EXISTS) {\n               fail(\"Existing resource '\" + resourcename + \"' was not detected!\");\n           }\n       }\n\n       // read resource for comparing id's later\n       CmsResource original = cms.readResource(resourcename);\n       \n       // delete resource and try again\n       cms.deleteResource(resourcename, I_CmsConstants.C_DELETE_OPTION_PRESERVE_SIBLINGS);\n       cms.createResource(resourcename, CmsResourceTypePlain.C_RESOURCE_TYPE_ID, content, null);\n              \n       // project must be current project\n       assertProject(cms, resourcename, cms.getRequestContext().currentProject());\n       // state must be \"changed\"\n       assertState(cms, resourcename, I_CmsConstants.C_STATE_CHANGED);\n       // date last modified \n       assertDateLastModifiedAfter(cms, resourcename, timestamp);\n       // the user last modified must be the current user\n       assertUserLastModified(cms, resourcename, cms.getRequestContext().currentUser());\n       // date created\n       assertDateCreatedAfter(cms, resourcename, timestamp);\n       // the user created must be the current user\n       assertUserCreated(cms, resourcename, cms.getRequestContext().currentUser());       \n       // check the content\n       assertContent(cms, resourcename, content);     \n       \n       // compare id's\n       CmsResource created = cms.readResource(resourcename);\n       if (created.getResourceId().equals(original.getResourceId())) {\n           fail(\"A created resource that replaced a deleted resource must not have the same resource id!\");\n       }\n       if (created.getContentId().equals(original.getContentId())) {\n           fail(\"A created resource that replaced a deleted resource must not have the same content id!\");\n       }       \n       \n       // publish the project\n       cms.unlockProject(cms.getRequestContext().currentProject().getId());\n       cms.publishProject();    \n              \n       assertState(cms, resourcename, I_CmsConstants.C_STATE_UNCHANGED);       \n   }","id":105696,"modified_method":"/**\n    * Test the create resource method for an already existing resource.<p>\n    * \n    * @throws Throwable if something goes wrong\n    */\n   public void testCreateResourceAgain() throws Throwable {\n\n       CmsObject cms = getCmsObject();     \n       echo(\"Testing to create an existing resource again\");\n\n       String resourcename = \"/folder1/test2.html\";\n       storeResources(cms, resourcename);\n       long timestamp = System.currentTimeMillis();\n       \n       String contentStr = \"Hello this is my NEW AND ALSO CHANGED other content\";\n       byte[] content = contentStr.getBytes();      \n\n       assertState(cms, resourcename, I_CmsConstants.C_STATE_UNCHANGED);\n       cms.lockResource(resourcename);\n       \n       try {\n           // resource exists and is not deleted, creation must thrw exception\n           cms.createResource(resourcename, CmsResourceTypePlain.C_RESOURCE_TYPE_ID, content, null);\n       } catch (CmsVfsException e) {\n           if (e.getType() != CmsVfsException.C_VFS_RESOURCE_ALREADY_EXISTS) {\n               fail(\"Existing resource '\" + resourcename + \"' was not detected!\");\n           }\n       }\n\n       // read resource for comparing id's later\n       CmsResource original = cms.readResource(resourcename);\n       \n       // delete resource and try again\n       cms.deleteResource(resourcename, I_CmsConstants.C_DELETE_OPTION_PRESERVE_SIBLINGS);\n       cms.createResource(resourcename, CmsResourceTypePlain.C_RESOURCE_TYPE_ID, content, null);\n              \n       // project must be current project\n       assertProject(cms, resourcename, cms.getRequestContext().currentProject());\n       // state must be \"changed\"\n       assertState(cms, resourcename, I_CmsConstants.C_STATE_CHANGED);\n       // date last modified \n       assertDateLastModifiedAfter(cms, resourcename, timestamp);\n       // the user last modified must be the current user\n       assertUserLastModified(cms, resourcename, cms.getRequestContext().currentUser());\n       // date created\n       assertDateCreatedAfter(cms, resourcename, timestamp);\n       // the user created must be the current user\n       assertUserCreated(cms, resourcename, cms.getRequestContext().currentUser());       \n       // check the content\n       assertContent(cms, resourcename, content);     \n       \n       // compare id's\n       CmsResource created = cms.readResource(resourcename);\n       if (created.getResourceId().equals(original.getResourceId())) {\n           fail(\"A created resource that replaced a deleted resource must not have the same resource id!\");\n       }     \n       \n       // publish the project\n       cms.unlockProject(cms.getRequestContext().currentProject().getId());\n       cms.publishProject();    \n              \n       assertState(cms, resourcename, I_CmsConstants.C_STATE_UNCHANGED);       \n   }","commit_id":"1eaa0be47a0f0efc5728297e564de8969365194d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n    * Test the create a folder again.<p>\n    * \n    * @throws Throwable if something goes wrong\n    */\n   public void testCreateFolderAgain() throws Throwable {\n\n       CmsObject cms = getCmsObject();     \n       echo(\"Testing to create an existing folder again\");\n\n       String resourcename = \"/folder1/test2/\";\n       storeResources(cms, resourcename);\n       long timestamp = System.currentTimeMillis();\n       \n       assertState(cms, resourcename, I_CmsConstants.C_STATE_UNCHANGED);       \n       cms.lockResource(resourcename);       \n       \n       try {\n           // resource exists and is not deleted, creation must thrw exception\n           cms.createResource(resourcename, CmsResourceTypeFolder.C_RESOURCE_TYPE_ID, null, null);\n       } catch (CmsVfsException e) {\n           if (e.getType() != CmsVfsException.C_VFS_RESOURCE_ALREADY_EXISTS) {\n               fail(\"Existing resource '\" + resourcename + \"' was not detected!\");\n           }\n       }\n       \n       // read resource for comparing id's later\n       CmsResource original = cms.readResource(resourcename);\n       \n       // delete resource and try again\n       cms.deleteResource(resourcename, I_CmsConstants.C_DELETE_OPTION_PRESERVE_SIBLINGS);\n       cms.createResource(resourcename, CmsResourceTypeFolder.C_RESOURCE_TYPE_ID, null, null);\n       \n       // ensure created resource is a folder\n       assertIsFolder(cms, resourcename);     \n       // project must be current project\n       assertProject(cms, resourcename, cms.getRequestContext().currentProject());\n       // state must be \"changed\"\n       assertState(cms, resourcename, I_CmsConstants.C_STATE_CHANGED);\n       // date last modified \n       assertDateLastModifiedAfter(cms, resourcename, timestamp);\n       // the user last modified must be the current user\n       assertUserLastModified(cms, resourcename, cms.getRequestContext().currentUser());\n       // date created\n       assertDateCreated(cms, resourcename, original.getDateCreated());\n       // the user created must be the current user\n       assertUserCreated(cms, resourcename, cms.readUser(original.getUserCreated())); \n       \n       // compare id's\n       CmsResource created = cms.readResource(resourcename);\n       if (! created.getResourceId().equals(original.getResourceId())) {\n           fail(\"A created folder that replaced a deleted folder must have the same resource id!\");\n       }\n       if (! created.getContentId().equals(original.getContentId())) {\n           fail(\"A created folder that replaced a deleted folder must have the same content id!\");\n       }        \n       \n       // publish the project\n       cms.unlockProject(cms.getRequestContext().currentProject().getId());\n       cms.publishProject();    \n       \n       assertState(cms, resourcename, I_CmsConstants.C_STATE_UNCHANGED);       \n   }","id":105697,"modified_method":"/**\n    * Test the create a folder again.<p>\n    * \n    * @throws Throwable if something goes wrong\n    */\n   public void testCreateFolderAgain() throws Throwable {\n\n       CmsObject cms = getCmsObject();     \n       echo(\"Testing to create an existing folder again\");\n\n       String resourcename = \"/folder1/test2/\";\n       storeResources(cms, resourcename);\n       long timestamp = System.currentTimeMillis();\n       \n       assertState(cms, resourcename, I_CmsConstants.C_STATE_UNCHANGED);       \n       cms.lockResource(resourcename);       \n       \n       try {\n           // resource exists and is not deleted, creation must thrw exception\n           cms.createResource(resourcename, CmsResourceTypeFolder.C_RESOURCE_TYPE_ID, null, null);\n       } catch (CmsVfsException e) {\n           if (e.getType() != CmsVfsException.C_VFS_RESOURCE_ALREADY_EXISTS) {\n               fail(\"Existing resource '\" + resourcename + \"' was not detected!\");\n           }\n       }\n       \n       // read resource for comparing id's later\n       CmsResource original = cms.readResource(resourcename);\n       \n       // delete resource and try again\n       cms.deleteResource(resourcename, I_CmsConstants.C_DELETE_OPTION_PRESERVE_SIBLINGS);\n       cms.createResource(resourcename, CmsResourceTypeFolder.C_RESOURCE_TYPE_ID, null, null);\n       \n       // ensure created resource is a folder\n       assertIsFolder(cms, resourcename);     \n       // project must be current project\n       assertProject(cms, resourcename, cms.getRequestContext().currentProject());\n       // state must be \"changed\"\n       assertState(cms, resourcename, I_CmsConstants.C_STATE_CHANGED);\n       // date last modified \n       assertDateLastModifiedAfter(cms, resourcename, timestamp);\n       // the user last modified must be the current user\n       assertUserLastModified(cms, resourcename, cms.getRequestContext().currentUser());\n       // date created\n       assertDateCreated(cms, resourcename, original.getDateCreated());\n       // the user created must be the current user\n       assertUserCreated(cms, resourcename, cms.readUser(original.getUserCreated())); \n       \n       // compare id's\n       CmsResource created = cms.readResource(resourcename);\n       if (! created.getResourceId().equals(original.getResourceId())) {\n           fail(\"A created folder that replaced a deleted folder must have the same resource id!\");\n       }      \n       \n       // publish the project\n       cms.unlockProject(cms.getRequestContext().currentProject().getId());\n       cms.publishProject();    \n       \n       assertState(cms, resourcename, I_CmsConstants.C_STATE_UNCHANGED);       \n   }","commit_id":"1eaa0be47a0f0efc5728297e564de8969365194d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Test the import resource method.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testImportResourceAgain() throws Throwable {\n\n        CmsObject cms = getCmsObject();     \n        echo(\"Testing to import an existing resource again\");\n        \n        String resourcename = \"/folder1/test1.html\";\n        \n        storeResources(cms, resourcename);\n        long timestamp = System.currentTimeMillis() - 12345678;\n        \n        String contentStr = \"Hello this is my NEW AND CHANGED content\";\n        byte[] content = contentStr.getBytes();\n\n        // create a new resource\n        CmsResource resource = new CmsResource (\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),\n            \"test1.html\",\n            CmsResourceTypePlain.C_RESOURCE_TYPE_ID,\n            0,\n            cms.getRequestContext().currentProject().getId(),\n            I_CmsConstants.C_STATE_NEW,\n            OpenCms.getResourceManager().getResourceType(CmsResourceTypePlain.C_RESOURCE_TYPE_ID).getLoaderId(),\n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            CmsResource.DATE_RELEASED_DEFAULT,\n            CmsResource.DATE_EXPIRED_DEFAULT,\n            1,\n            content.length\n        );\n        \n        cms.importResource(resourcename, resource, content, null);\n        \n        // ensure created resource type\n        assertResourceType(cms, resourcename, CmsResourceTypePlain.C_RESOURCE_TYPE_ID); \n        // project must be current project\n        assertProject(cms, resourcename, cms.getRequestContext().currentProject());\n        // state must be \"new\"\n        assertState(cms, resourcename, I_CmsConstants.C_STATE_CHANGED);\n        // date last modified \n        assertDateLastModified(cms, resourcename, timestamp);\n        // the user last modified must be the current user\n        assertUserLastModified(cms, resourcename, cms.getRequestContext().currentUser());         \n        // now evaluate the filter\n        assertFilter(cms, resourcename, OpenCmsTestResourceFilter.FILTER_CREATE_RESOURCE);        \n                \n        // publish the project\n        cms.unlockProject(cms.getRequestContext().currentProject().getId());\n        cms.publishProject();     \n        \n        assertState(cms, resourcename, I_CmsConstants.C_STATE_UNCHANGED);        \n    }","id":105698,"modified_method":"/**\n     * Test the import resource method.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testImportResourceAgain() throws Throwable {\n\n        CmsObject cms = getCmsObject();     \n        echo(\"Testing to import an existing resource again\");\n        \n        String resourcename = \"/folder1/test1.html\";\n        \n        storeResources(cms, resourcename);\n        long timestamp = System.currentTimeMillis() - 12345678;\n        \n        String contentStr = \"Hello this is my NEW AND CHANGED content\";\n        byte[] content = contentStr.getBytes();\n\n        // create a new resource\n        CmsResource resource = new CmsResource (\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(), \n            \"test1.html\",\n            CmsResourceTypePlain.C_RESOURCE_TYPE_ID,\n            0,\n            cms.getRequestContext().currentProject().getId(),\n            I_CmsConstants.C_STATE_NEW,\n            OpenCms.getResourceManager().getResourceType(CmsResourceTypePlain.C_RESOURCE_TYPE_ID).getLoaderId(),\n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            CmsResource.DATE_RELEASED_DEFAULT,\n            CmsResource.DATE_EXPIRED_DEFAULT,\n            1,\n            content.length\n        );\n        \n        cms.importResource(resourcename, resource, content, null);\n        \n        // ensure created resource type\n        assertResourceType(cms, resourcename, CmsResourceTypePlain.C_RESOURCE_TYPE_ID); \n        // project must be current project\n        assertProject(cms, resourcename, cms.getRequestContext().currentProject());\n        // state must be \"new\"\n        assertState(cms, resourcename, I_CmsConstants.C_STATE_CHANGED);\n        // date last modified \n        assertDateLastModified(cms, resourcename, timestamp);\n        // the user last modified must be the current user\n        assertUserLastModified(cms, resourcename, cms.getRequestContext().currentUser());         \n        // now evaluate the filter\n        assertFilter(cms, resourcename, OpenCmsTestResourceFilter.FILTER_CREATE_RESOURCE);        \n                \n        // publish the project\n        cms.unlockProject(cms.getRequestContext().currentProject().getId());\n        cms.publishProject();     \n        \n        assertState(cms, resourcename, I_CmsConstants.C_STATE_UNCHANGED);        \n    }","commit_id":"1eaa0be47a0f0efc5728297e564de8969365194d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Test the import resource method with a folder.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testImportFolder() throws Throwable {\n\n        CmsObject cms = getCmsObject();     \n        echo(\"Testing import resource for a folder\");\n        \n        String resourcename = \"/folder1/test1/\";\n        \n        long timestamp = System.currentTimeMillis() - 87654321;        \n        \n        // create a new resource\n        CmsResource resource = new CmsResource (\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),            \n            \"test1\",\n            CmsResourceTypeFolder.C_RESOURCE_TYPE_ID,\n            0,\n            cms.getRequestContext().currentProject().getId(),\n            I_CmsConstants.C_STATE_NEW,\n            OpenCms.getResourceManager().getResourceType(CmsResourceTypeFolder.C_RESOURCE_TYPE_ID).getLoaderId(),\n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            CmsResource.DATE_RELEASED_DEFAULT,\n            CmsResource.DATE_EXPIRED_DEFAULT,\n            1,\n            -1\n        );\n        \n        cms.importResource(resourcename, resource, null, null);\n        \n        // ensure created resource is a folder\n        assertIsFolder(cms, resourcename);  \n        // project must be current project\n        assertProject(cms, resourcename, cms.getRequestContext().currentProject());\n        // state must be \"new\"\n        assertState(cms, resourcename, I_CmsConstants.C_STATE_NEW);\n        // date last modified \n        assertDateLastModified(cms, resourcename, timestamp);\n        // date created\n        assertDateCreated(cms, resourcename, timestamp);\n        // the user last modified must be the current user\n        assertUserLastModified(cms, resourcename, cms.getRequestContext().currentUser()); \n        \n        // publish the project\n        cms.unlockProject(cms.getRequestContext().currentProject().getId());\n        cms.publishProject();   \n        \n        assertState(cms, resourcename, I_CmsConstants.C_STATE_UNCHANGED);\n    }","id":105699,"modified_method":"/**\n     * Test the import resource method with a folder.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testImportFolder() throws Throwable {\n\n        CmsObject cms = getCmsObject();     \n        echo(\"Testing import resource for a folder\");\n        \n        String resourcename = \"/folder1/test1/\";\n        \n        long timestamp = System.currentTimeMillis() - 87654321;        \n        \n        // create a new resource\n        CmsResource resource = new CmsResource (\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),            \n            \"test1\",\n            CmsResourceTypeFolder.C_RESOURCE_TYPE_ID,\n            0,\n            cms.getRequestContext().currentProject().getId(),\n            I_CmsConstants.C_STATE_NEW,\n            OpenCms.getResourceManager().getResourceType(CmsResourceTypeFolder.C_RESOURCE_TYPE_ID).getLoaderId(),\n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            CmsResource.DATE_RELEASED_DEFAULT,\n            CmsResource.DATE_EXPIRED_DEFAULT,\n            1,\n            -1\n        );\n        \n        cms.importResource(resourcename, resource, null, null);\n        \n        // ensure created resource is a folder\n        assertIsFolder(cms, resourcename);  \n        // project must be current project\n        assertProject(cms, resourcename, cms.getRequestContext().currentProject());\n        // state must be \"new\"\n        assertState(cms, resourcename, I_CmsConstants.C_STATE_NEW);\n        // date last modified \n        assertDateLastModified(cms, resourcename, timestamp);\n        // date created\n        assertDateCreated(cms, resourcename, timestamp);\n        // the user last modified must be the current user\n        assertUserLastModified(cms, resourcename, cms.getRequestContext().currentUser()); \n        \n        // publish the project\n        cms.unlockProject(cms.getRequestContext().currentProject().getId());\n        cms.publishProject();   \n        \n        assertState(cms, resourcename, I_CmsConstants.C_STATE_UNCHANGED);\n    }","commit_id":"1eaa0be47a0f0efc5728297e564de8969365194d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Test the import resource method.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testImportResource() throws Throwable {\n\n        CmsObject cms = getCmsObject();     \n        echo(\"Testing import resource\");\n        \n        String resourcename = \"/folder1/test1.html\";\n        \n        String contentStr = \"Hello this is my content\";\n        byte[] content = contentStr.getBytes();\n        long timestamp = System.currentTimeMillis() - 87654321;        \n        \n        // create a new resource\n        CmsResource resource = new CmsResource (\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),            \n            \"test1.html\",\n            CmsResourceTypePlain.C_RESOURCE_TYPE_ID,\n            0,\n            cms.getRequestContext().currentProject().getId(),\n            I_CmsConstants.C_STATE_NEW,\n            OpenCms.getResourceManager().getResourceType(CmsResourceTypePlain.C_RESOURCE_TYPE_ID).getLoaderId(),\n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            CmsResource.DATE_RELEASED_DEFAULT,\n            CmsResource.DATE_EXPIRED_DEFAULT,\n            1,\n            content.length\n        );\n        \n        cms.importResource(resourcename, resource, content, null);\n        \n        // ensure created resource type\n        assertResourceType(cms, resourcename, CmsResourceTypePlain.C_RESOURCE_TYPE_ID);  \n        // project must be current project\n        assertProject(cms, resourcename, cms.getRequestContext().currentProject());\n        // state must be \"new\"\n        assertState(cms, resourcename, I_CmsConstants.C_STATE_NEW);\n        // date last modified \n        assertDateLastModified(cms, resourcename, timestamp);\n        // date created\n        assertDateCreated(cms, resourcename, timestamp);\n        // the user last modified must be the current user\n        assertUserLastModified(cms, resourcename, cms.getRequestContext().currentUser()); \n        // the content \n        assertContent(cms, resourcename, content);\n        \n        // publish the project\n        cms.unlockProject(cms.getRequestContext().currentProject().getId());\n        cms.publishProject();   \n        \n        assertState(cms, resourcename, I_CmsConstants.C_STATE_UNCHANGED);\n    }","id":105700,"modified_method":"/**\n     * Test the import resource method.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testImportResource() throws Throwable {\n\n        CmsObject cms = getCmsObject();     \n        echo(\"Testing import resource\");\n        \n        String resourcename = \"/folder1/test1.html\";\n        \n        String contentStr = \"Hello this is my content\";\n        byte[] content = contentStr.getBytes();\n        long timestamp = System.currentTimeMillis() - 87654321;        \n        \n        // create a new resource\n        CmsResource resource = new CmsResource (\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),            \n            \"test1.html\",\n            CmsResourceTypePlain.C_RESOURCE_TYPE_ID,\n            0,\n            cms.getRequestContext().currentProject().getId(),\n            I_CmsConstants.C_STATE_NEW,\n            OpenCms.getResourceManager().getResourceType(CmsResourceTypePlain.C_RESOURCE_TYPE_ID).getLoaderId(),\n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            CmsResource.DATE_RELEASED_DEFAULT,\n            CmsResource.DATE_EXPIRED_DEFAULT,\n            1,\n            content.length\n        );\n        \n        cms.importResource(resourcename, resource, content, null);\n        \n        // ensure created resource type\n        assertResourceType(cms, resourcename, CmsResourceTypePlain.C_RESOURCE_TYPE_ID);  \n        // project must be current project\n        assertProject(cms, resourcename, cms.getRequestContext().currentProject());\n        // state must be \"new\"\n        assertState(cms, resourcename, I_CmsConstants.C_STATE_NEW);\n        // date last modified \n        assertDateLastModified(cms, resourcename, timestamp);\n        // date created\n        assertDateCreated(cms, resourcename, timestamp);\n        // the user last modified must be the current user\n        assertUserLastModified(cms, resourcename, cms.getRequestContext().currentUser()); \n        // the content \n        assertContent(cms, resourcename, content);\n        \n        // publish the project\n        cms.unlockProject(cms.getRequestContext().currentProject().getId());\n        cms.publishProject();   \n        \n        assertState(cms, resourcename, I_CmsConstants.C_STATE_UNCHANGED);\n    }","commit_id":"1eaa0be47a0f0efc5728297e564de8969365194d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Test the import resource method for an existing folder.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testImportFolderAgain() throws Throwable {\n\n        CmsObject cms = getCmsObject();     \n        echo(\"Testing to import an existing folder again\");\n        \n        String resourcename = \"/folder1/test1/\";\n        \n        storeResources(cms, resourcename);\n        long timestamp = System.currentTimeMillis() - 12345678;       \n\n        // create a new folder\n        CmsResource resource = new CmsResource (\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),            \n            \"test1\",\n            CmsResourceTypeFolder.C_RESOURCE_TYPE_ID,\n            0,\n            cms.getRequestContext().currentProject().getId(),\n            I_CmsConstants.C_STATE_NEW,\n            OpenCms.getResourceManager().getResourceType(CmsResourceTypeFolder.C_RESOURCE_TYPE_ID).getLoaderId(),\n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            CmsResource.DATE_RELEASED_DEFAULT,\n            CmsResource.DATE_EXPIRED_DEFAULT,\n            1,\n            -1\n        );\n        \n        cms.importResource(resourcename, resource, null, null);\n        \n        // ensure created resource is a folder\n        assertIsFolder(cms, resourcename);  \n        // project must be current project\n        assertProject(cms, resourcename, cms.getRequestContext().currentProject());\n        // state must be \"new\"\n        assertState(cms, resourcename, I_CmsConstants.C_STATE_CHANGED);\n        // date last modified \n        assertDateLastModified(cms, resourcename, timestamp);\n        // the user last modified must be the current user\n        assertUserLastModified(cms, resourcename, cms.getRequestContext().currentUser());         \n        // now evaluate the filter\n        assertFilter(cms, resourcename, OpenCmsTestResourceFilter.FILTER_CREATE_RESOURCE);       \n        \n        // publish the project\n        cms.unlockProject(cms.getRequestContext().currentProject().getId());\n        cms.publishProject();     \n        \n        assertState(cms, resourcename, I_CmsConstants.C_STATE_UNCHANGED);        \n    }","id":105701,"modified_method":"/**\n     * Test the import resource method for an existing folder.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testImportFolderAgain() throws Throwable {\n\n        CmsObject cms = getCmsObject();     \n        echo(\"Testing to import an existing folder again\");\n        \n        String resourcename = \"/folder1/test1/\";\n        \n        storeResources(cms, resourcename);\n        long timestamp = System.currentTimeMillis() - 12345678;       \n\n        // create a new folder\n        CmsResource resource = new CmsResource (\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),\n            CmsUUID.getNullUUID(),            \n            \"test1\",\n            CmsResourceTypeFolder.C_RESOURCE_TYPE_ID,\n            0,\n            cms.getRequestContext().currentProject().getId(),\n            I_CmsConstants.C_STATE_NEW,\n            OpenCms.getResourceManager().getResourceType(CmsResourceTypeFolder.C_RESOURCE_TYPE_ID).getLoaderId(),\n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            timestamp,\n            cms.getRequestContext().currentUser().getId(), \n            CmsResource.DATE_RELEASED_DEFAULT,\n            CmsResource.DATE_EXPIRED_DEFAULT,\n            1,\n            -1\n        );\n        \n        cms.importResource(resourcename, resource, null, null);\n        \n        // ensure created resource is a folder\n        assertIsFolder(cms, resourcename);  \n        // project must be current project\n        assertProject(cms, resourcename, cms.getRequestContext().currentProject());\n        // state must be \"new\"\n        assertState(cms, resourcename, I_CmsConstants.C_STATE_CHANGED);\n        // date last modified \n        assertDateLastModified(cms, resourcename, timestamp);\n        // the user last modified must be the current user\n        assertUserLastModified(cms, resourcename, cms.getRequestContext().currentUser());         \n        // now evaluate the filter\n        assertFilter(cms, resourcename, OpenCmsTestResourceFilter.FILTER_CREATE_RESOURCE);       \n        \n        // publish the project\n        cms.unlockProject(cms.getRequestContext().currentProject().getId());\n        cms.publishProject();     \n        \n        assertState(cms, resourcename, I_CmsConstants.C_STATE_UNCHANGED);        \n    }","commit_id":"1eaa0be47a0f0efc5728297e564de8969365194d","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Creates the OpenCms JUnit test suite.<p>\n     * \n     * @return the OpenCms JUnit test suite\n     */\n    public static Test suite() {\n        TestSuite suite = new TestSuite(\"OpenCms complete test\");\n\n        suite.addTest(org.opencms.setup.AllTests.suite());                     \n        suite.addTest(org.opencms.file.AllTests.suite());                          \n        suite.addTest(org.opencms.importexport.AllTests.suite());        \n        suite.addTest(org.opencms.staticexport.AllTests.suite());        \n        suite.addTest(org.opencms.util.AllTests.suite());        \n        \n        TestSetup wrapper = new TestSetup(suite) {\n\n            protected void setUp() {\n                oneTimeSetUp();\n            }\n    \n            protected void tearDown() {\n                oneTimeTearDown();\n            }\n        };\n        \n        return wrapper;\n    }","id":105702,"modified_method":"/**\n     * Creates the OpenCms JUnit test suite.<p>\n     * \n     * @return the OpenCms JUnit test suite\n     */\n    public static Test suite() {\n        TestSuite suite = new TestSuite(\"OpenCms complete tests\");\n\n        suite.addTest(org.opencms.configuration.AllTests.suite());                          \n        suite.addTest(org.opencms.file.AllTests.suite());                          \n        suite.addTest(org.opencms.flex.AllTests.suite());                          \n        suite.addTest(org.opencms.setup.AllTests.suite());                     \n        suite.addTest(org.opencms.importexport.AllTests.suite());        \n        suite.addTest(org.opencms.staticexport.AllTests.suite());        \n        suite.addTest(org.opencms.util.AllTests.suite());        \n        \n        TestSetup wrapper = new TestSetup(suite) {\n\n            protected void setUp() {\n                oneTimeSetUp();\n            }\n    \n            protected void tearDown() {\n                oneTimeTearDown();\n            }\n        };\n        \n        return wrapper;\n    }","commit_id":"a0f3c076d88f77832f74a44426d5f56c533639d9","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the JUnit test suite for this package.<p>\n     * \n     * @return the JUnit test suite for this package\n     */\n    public static Test suite() {\n\n        TestSuite suite = new TestSuite(\"Tests for package \" + AllTests.class.getPackage().getName());\n        OpenCmsTestProperties.initialize(org.opencms.test.AllTests.TEST_PROPERTIES_PATH);\n        //$JUnit-BEGIN$\n        suite.addTest(TestChacc.suite());\n        suite.addTest(TestChangeProperties.suite());\n        suite.addTest(TestCopy.suite());\n        suite.addTest(TestChtype.suite());\n        suite.addTest(TestConcurrentOperations.suite());\n        suite.addTest(TestCreateWriteResource.suite());\n        suite.addTest(TestDefaultResourceCollectors.suite());\n        suite.addTest(TestDeletion.suite());\n        suite.addTest(TestExists.suite());\n        suite.addTest(TestHistory.suite());\n        suite.addTest(TestLinkValidation.suite());\n        suite.addTest(TestLock.suite());\n        suite.addTest(TestMoveRename.suite());\n        suite.addTest(TestMoveRename2.suite());\n        suite.addTest(TestPermissions.suite());\n        suite.addTest(TestProjects.suite());\n        suite.addTest(TestProperty.suite());\n        suite.addTest(TestPropertyDefinition.suite());\n        suite.addTest(TestPublishing.suite());\n        suite.addTest(TestPublishIssues.suite());\n        suite.addTest(TestReadResource.suite());\n        suite.addTest(TestReadResourceTree.suite());\n        suite.addTest(TestReleaseExpire.suite());\n        suite.addTest(TestReplace.suite());\n        suite.addTest(TestResourceFilter.suite());\n        suite.addTest(TestResourceOperations.suite());\n        suite.addTest(TestRestoreFromHistory.suite());\n        suite.addTest(TestSiblings.suite());\n        suite.addTest(TestTouch.suite());\n        suite.addTest(TestUndelete.suite());\n        suite.addTest(TestUndoChanges.suite());\n        suite.addTest(TestUser.suite());\n        //$JUnit-END$\n        return suite;\n    }","id":105703,"modified_method":"/**\n     * Returns the JUnit test suite for this package.<p>\n     * \n     * @return the JUnit test suite for this package\n     */\n    public static Test suite() {\n\n        TestSuite suite = new TestSuite(\"Tests for package \" + AllTests.class.getPackage().getName());\n        OpenCmsTestProperties.initialize(org.opencms.test.AllTests.TEST_PROPERTIES_PATH);\n        //$JUnit-BEGIN$\n        suite.addTest(TestChacc.suite());\n        suite.addTest(TestChangeProperties.suite());\n        suite.addTest(TestChflags.suite());\n        suite.addTest(TestChtype.suite());\n        suite.addTest(TestCmsResourceFilter.suite());\n        suite.addTest(TestConcurrentOperations.suite());\n        suite.addTest(TestCopy.suite());\n        suite.addTest(TestCreateWriteResource.suite());\n        suite.addTest(TestDefaultResourceCollectors.suite());\n        suite.addTest(TestDeletion.suite());\n        suite.addTest(TestExists.suite());\n        suite.addTest(TestGroupOperations.suite());\n        suite.addTest(TestHistory.suite());\n        suite.addTest(TestLinkValidation.suite());\n        suite.addTest(TestLock.suite());\n        suite.addTest(TestMoveRename.suite());\n        suite.addTest(TestMoveRename2.suite());\n        suite.addTest(TestPermissions.suite());\n        suite.addTest(TestProjectHistory.suite());\n        suite.addTest(TestProjects.suite());\n        suite.addTest(TestProperty.suite());\n        suite.addTest(TestPropertyDefinition.suite());\n        suite.addTest(TestPublishing.suite());\n        suite.addTest(TestPublishIssues.suite());\n        suite.addTest(TestReadResource.suite());\n        suite.addTest(TestReadResourceTree.suite());\n        suite.addTest(TestReleaseExpire.suite());\n        suite.addTest(TestReplace.suite());\n        suite.addTest(TestResourceFilter.suite());\n        suite.addTest(TestResourceOperations.suite());\n        suite.addTest(TestRestoreFromHistory.suite());\n        suite.addTest(TestSiblings.suite());\n        suite.addTest(TestTouch.suite());\n        suite.addTest(TestUndelete.suite());\n        suite.addTest(TestUndoChanges.suite());\n        suite.addTest(TestUser.suite());\n        //$JUnit-END$\n        return suite;\n    }","commit_id":"e5f7e47d1f3b3ab4f1b8413130aca49338a02813","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Tests the \"getUsersOfGroup\" method.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testGetUsersOfGroup() throws Throwable {\n        \n        CmsObject cms = getCmsObject();\n        echo(\"Testing testGetUsersOfGroup\");\n        \n        List users = cms.getUsersOfGroup(\"Guests\");\n        assertEquals(\"/Export\", ((CmsUser)users.get(0)).getName());\n        assertEquals(\"/Guest\", ((CmsUser)users.get(1)).getName());\n    }","id":105704,"modified_method":"/**\n     * Tests the \"getUsersOfGroup\" method.<p>\n     * \n     * @throws Throwable if something goes wrong\n     */\n    public void testGetUsersOfGroup() throws Throwable {\n\n        CmsObject cms = getCmsObject();\n        echo(\"Testing testGetUsersOfGroup\");\n\n        List users = cms.getUsersOfGroup(\"Guests\");\n        assertEquals(\"Export\", ((CmsUser)users.get(0)).getName());\n        assertEquals(\"Guest\", ((CmsUser)users.get(1)).getName());\n    }","commit_id":"e5f7e47d1f3b3ab4f1b8413130aca49338a02813","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Test suite for this test class.<p>\n     * \n     * @return the test suite\n     */\n    public static Test suite() {\n        OpenCmsTestProperties.initialize(org.opencms.test.AllTests.TEST_PROPERTIES_PATH);\n        \n        TestSuite suite = new TestSuite();\n        suite.setName(TestGroupOperations.class.getName());\n\n        suite.addTest(new TestGroupOperations(\"testGetUsersOfGroup\"));\n        suite.addTest(new TestGroupOperations(\"testParentGroups\"));\n        \n        TestSetup wrapper = new TestSetup(suite) {\n            \n            protected void setUp() {\n                setupOpenCms(null, null, false);\n            }\n            \n            protected void tearDown() {\n                removeOpenCms();\n            }\n        };\n        \n        return wrapper;\n    }","id":105705,"modified_method":"/**\n     * Test suite for this test class.<p>\n     * \n     * @return the test suite\n     */\n    public static Test suite() {\n\n        OpenCmsTestProperties.initialize(org.opencms.test.AllTests.TEST_PROPERTIES_PATH);\n\n        TestSuite suite = new TestSuite();\n        suite.setName(TestGroupOperations.class.getName());\n\n        suite.addTest(new TestGroupOperations(\"testGetUsersOfGroup\"));\n        suite.addTest(new TestGroupOperations(\"testParentGroups\"));\n        suite.addTest(new TestGroupOperations(\"testDeleteGroup\"));\n\n        TestSetup wrapper = new TestSetup(suite) {\n\n            protected void setUp() {\n\n                setupOpenCms(null, null, false);\n            }\n\n            protected void tearDown() {\n\n                removeOpenCms();\n            }\n        };\n\n        return wrapper;\n    }","commit_id":"e5f7e47d1f3b3ab4f1b8413130aca49338a02813","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Test suite for this test class.<p>\n     * \n     * @return the test suite\n     */\n    public static Test suite() {\n\n        OpenCmsTestProperties.initialize(org.opencms.test.AllTests.TEST_PROPERTIES_PATH);\n\n        TestSuite suite = new TestSuite();\n        suite.setName(TestMoveRename.class.getName());\n\n        suite.addTest(new TestMoveRename(\"testMoveToDeletedFolder\"));\n        suite.addTest(new TestMoveRename(\"testPublishDeletedFolderWithMovedResource\"));\n        suite.addTest(new TestMoveRename(\"testPermaLink\"));\n        suite.addTest(new TestMoveRename(\"testMoveSingleResource\"));\n        suite.addTest(new TestMoveRename(\"testMoveSingleNewResource\"));\n        suite.addTest(new TestMoveRename(\"testMultipleMoveResource\"));\n        suite.addTest(new TestMoveRename(\"testMoveFolderToOwnSubfolder\"));\n        suite.addTest(new TestMoveRename(\"testOverwriteMovedResource\"));\n        suite.addTest(new TestMoveRename(\"testMoveWithoutPermissions\"));\n\n        TestSetup wrapper = new TestSetup(suite) {\n\n            protected void setUp() {\n\n                setupOpenCms(\"simpletest\", \"/sites/default/\");\n            }\n\n            protected void tearDown() {\n\n                removeOpenCms();\n            }\n        };\n\n        return wrapper;\n    }","id":105706,"modified_method":"/**\n     * Test suite for this test class.<p>\n     * \n     * @return the test suite\n     */\n    public static Test suite() {\n\n        OpenCmsTestProperties.initialize(org.opencms.test.AllTests.TEST_PROPERTIES_PATH);\n\n        TestSuite suite = new TestSuite();\n        suite.setName(TestMoveRename.class.getName());\n\n        suite.addTest(new TestMoveRename(\"testMoveToDeletedFolder\"));\n        suite.addTest(new TestMoveRename(\"testPublishDeletedFolderWithMovedResource\"));\n        suite.addTest(new TestMoveRename(\"testPermaLink\"));\n        suite.addTest(new TestMoveRename(\"testMoveSingleResource\"));\n        suite.addTest(new TestMoveRename(\"testMoveSingleNewResource\"));\n        suite.addTest(new TestMoveRename(\"testMultipleMoveResource\"));\n        suite.addTest(new TestMoveRename(\"testMoveFolderToOwnSubfolder\"));\n        suite.addTest(new TestMoveRename(\"testOverwriteMovedResource\"));\n        suite.addTest(new TestMoveRename(\"testMoveWithoutPermissions\"));\n        suite.addTest(new TestMoveRename(\"testMoveDeleted\"));\n\n        TestSetup wrapper = new TestSetup(suite) {\n\n            protected void setUp() {\n\n                setupOpenCms(\"simpletest\", \"/sites/default/\");\n            }\n\n            protected void tearDown() {\n\n                removeOpenCms();\n            }\n        };\n\n        return wrapper;\n    }","commit_id":"e5f7e47d1f3b3ab4f1b8413130aca49338a02813","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Creates the OpenCms JUnit test suite.<p>\n     * \n     * @return the OpenCms JUnit test suite\n     */\n    public static Test suite() {\n\n        TestSuite suite = new TestSuite(\"OpenCms complete tests\");\n\n        suite.addTest(org.opencms.cache.AllTests.suite());\n        suite.addTest(org.opencms.configuration.AllTests.suite());\n        suite.addTest(org.opencms.db.AllTests.suite());\n        suite.addTest(org.opencms.file.AllTests.suite());\n        suite.addTest(org.opencms.file.types.AllTests.suite());\n        suite.addTest(org.opencms.flex.AllTests.suite());\n        suite.addTest(org.opencms.i18n.AllTests.suite());\n        suite.addTest(org.opencms.importexport.AllTests.suite());\n        suite.addTest(org.opencms.jsp.util.AllTests.suite());\n        suite.addTest(org.opencms.jsp.decorator.AllTests.suite());\n        suite.addTest(org.opencms.loader.AllTests.suite());\n        suite.addTest(org.opencms.main.AllTests.suite());\n        suite.addTest(org.opencms.module.AllTests.suite());\n        suite.addTest(org.opencms.monitor.AllTests.suite());\n        suite.addTest(org.opencms.notification.AllTests.suite());\n        suite.addTest(org.opencms.publish.AllTests.suite());\n        suite.addTest(org.opencms.scheduler.AllTests.suite());\n        suite.addTest(org.opencms.search.AllTests.suite());\n        suite.addTest(org.opencms.search.extractors.AllTests.suite());\n        suite.addTest(org.opencms.security.AllTests.suite());\n        suite.addTest(org.opencms.setup.AllTests.suite());\n        suite.addTest(org.opencms.staticexport.AllTests.suite());\n        suite.addTest(org.opencms.synchronize.AllTests.suite());\n        suite.addTest(org.opencms.util.AllTests.suite());\n        suite.addTest(org.opencms.widgets.AllTests.suite());\n        suite.addTest(org.opencms.workplace.AllTests.suite());\n        suite.addTest(org.opencms.xml.AllTests.suite());\n        suite.addTest(org.opencms.xml.content.AllTests.suite());\n        suite.addTest(org.opencms.xml.page.AllTests.suite());\n\n        TestSetup wrapper = new TestSetup(suite) {\n\n            protected void setUp() {\n\n                oneTimeSetUp();\n            }\n\n            protected void tearDown() {\n\n                oneTimeTearDown();\n            }\n        };\n\n        return wrapper;\n    }","id":105707,"modified_method":"/**\n     * Creates the OpenCms JUnit test suite.<p>\n     * \n     * @return the OpenCms JUnit test suite\n     */\n    public static Test suite() {\n\n        TestSuite suite = new TestSuite(\"OpenCms complete tests\");\n\n        suite.addTest(org.opencms.cache.AllTests.suite());\n        suite.addTest(org.opencms.configuration.AllTests.suite());\n        suite.addTest(org.opencms.db.AllTests.suite());\n        suite.addTest(org.opencms.file.AllTests.suite());\n        suite.addTest(org.opencms.file.collectors.AllTests.suite());\n        suite.addTest(org.opencms.file.types.AllTests.suite());\n        suite.addTest(org.opencms.file.wrapper.AllTests.suite());\n        suite.addTest(org.opencms.flex.AllTests.suite());\n        suite.addTest(org.opencms.i18n.AllTests.suite());\n        suite.addTest(org.opencms.importexport.AllTests.suite());\n        suite.addTest(org.opencms.jsp.decorator.AllTests.suite());\n        suite.addTest(org.opencms.jsp.util.AllTests.suite());\n        suite.addTest(org.opencms.loader.AllTests.suite());\n        suite.addTest(org.opencms.main.AllTests.suite());\n        suite.addTest(org.opencms.module.AllTests.suite());\n        suite.addTest(org.opencms.monitor.AllTests.suite());\n        suite.addTest(org.opencms.notification.AllTests.suite());\n        suite.addTest(org.opencms.publish.AllTests.suite());\n        suite.addTest(org.opencms.scheduler.AllTests.suite());\n        suite.addTest(org.opencms.search.AllTests.suite());\n        suite.addTest(org.opencms.search.extractors.AllTests.suite());\n        suite.addTest(org.opencms.security.AllTests.suite());\n        suite.addTest(org.opencms.setup.AllTests.suite());\n        suite.addTest(org.opencms.staticexport.AllTests.suite());\n        suite.addTest(org.opencms.synchronize.AllTests.suite());\n        suite.addTest(org.opencms.util.AllTests.suite());\n        suite.addTest(org.opencms.widgets.AllTests.suite());\n        suite.addTest(org.opencms.workplace.AllTests.suite());\n        suite.addTest(org.opencms.xml.AllTests.suite());\n        suite.addTest(org.opencms.xml.content.AllTests.suite());\n        suite.addTest(org.opencms.xml.page.AllTests.suite());\n\n        TestSetup wrapper = new TestSetup(suite) {\n\n            protected void setUp() {\n\n                oneTimeSetUp();\n            }\n\n            protected void tearDown() {\n\n                oneTimeTearDown();\n            }\n        };\n\n        return wrapper;\n    }","commit_id":"4155ec27439857d0d34c6529911f389eb6d23aae","url":"https://github.com/alkacon/opencms-core"},{"original_method":"private MailStatus loadMailStatus(String messageId, Map<String, Object> parameters)\n    {\n        MailStatus status;\n        try {\n            List<MailStatus> statuses = this.mailStatusStore.load(\n                Collections.<String, Object>singletonMap(\"messageId\", messageId));\n            if (statuses.isEmpty()) {\n                status = null;\n            } else {\n                status = statuses.get(0);\n            }\n        } catch (MailStoreException e) {\n            // Failed to load the status in the DB, we continue but log an error\n            this.logger.error(\"Failed to load mail status for message id [{}] from the database\", messageId, e);\n            status = null;\n        }\n        return status;\n    }","id":105708,"modified_method":"private MailStatus loadMailStatus(String messageId, Map<String, Object> parameters)\n    {\n        MailStatus status;\n        try {\n            List<MailStatus> statuses = this.mailStatusStore.load(\n                Collections.<String, Object>singletonMap(\"id\", messageId));\n            if (statuses.isEmpty()) {\n                status = null;\n            } else {\n                status = statuses.get(0);\n            }\n        } catch (MailStoreException e) {\n            // Failed to load the status in the DB, we continue but log an error\n            this.logger.error(\"Failed to load mail status for message id [{}] from the database\", messageId, e);\n            status = null;\n        }\n        return status;\n    }","commit_id":"64323db0c0aa1b1bf026dda39c403e903cb42e9b","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void onSuccessWithPreviouslyFailedMessage() throws Exception\n    {\n        MailStatusStore mailStatusStore = this.mocker.getInstance(MailStatusStore.class, \"database\");\n        Map<String, Object> parameters = Collections.singletonMap(\"wikiId\", (Object) \"mywiki\");\n        MailStatus status = new MailStatus(this.message, MailState.FAILED);\n        status.setWiki(\"otherwiki\");\n        when(mailStatusStore.load(Collections.<String, Object>singletonMap(\"messageId\",\n            this.mailId.toString()))).thenReturn(Arrays.asList(status));\n\n        MailContentStore mailContentStore = this.mocker.getInstance(MailContentStore.class, \"filesystem\");\n\n        this.mocker.getComponentUnderTest().onSuccess(this.message, parameters);\n\n        verify(mailStatusStore).load(Collections.<String, Object>singletonMap(\"messageId\", this.mailId.toString()));\n\n        verify(mailContentStore).delete(this.batchId.toString(), this.mailId.toString());\n\n        verify(mailStatusStore).save(argThat(new isSameMailStatus(MailState.SENT, \"otherwiki\")), eq(parameters));\n    }","id":105709,"modified_method":"@Test\n    public void onSuccessWithPreviouslyFailedMessage() throws Exception\n    {\n        MailStatusStore mailStatusStore = this.mocker.getInstance(MailStatusStore.class, \"database\");\n        Map<String, Object> parameters = Collections.singletonMap(\"wikiId\", (Object) \"mywiki\");\n        MailStatus status = new MailStatus(this.message, MailState.FAILED);\n        status.setWiki(\"otherwiki\");\n        when(mailStatusStore.load(Collections.<String, Object>singletonMap(\"id\",\n            this.mailId.toString()))).thenReturn(Arrays.asList(status));\n\n        MailContentStore mailContentStore = this.mocker.getInstance(MailContentStore.class, \"filesystem\");\n\n        this.mocker.getComponentUnderTest().onSuccess(this.message, parameters);\n\n        verify(mailStatusStore).load(Collections.<String, Object>singletonMap(\"id\", this.mailId.toString()));\n\n        verify(mailContentStore).delete(this.batchId.toString(), this.mailId.toString());\n\n        verify(mailStatusStore).save(argThat(new isSameMailStatus(MailState.SENT, \"otherwiki\")), eq(parameters));\n    }","commit_id":"64323db0c0aa1b1bf026dda39c403e903cb42e9b","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void onSuccessWithPreviouslyFailedMessageAndWhenContentStoreFails() throws Exception\n    {\n        MailStatusStore mailStatusStore = this.mocker.getInstance(MailStatusStore.class, \"database\");\n        Map<String, Object> parameters = Collections.emptyMap();\n        MailStatus status = new MailStatus(this.message, MailState.FAILED);\n        when(mailStatusStore.load(Collections.<String, Object>singletonMap(\"messageId\",\n            this.mailId.toString()))).thenReturn(Arrays.asList(status));\n\n        MailContentStore mailContentStore = this.mocker.getInstance(MailContentStore.class, \"filesystem\");\n        doThrow(new MailStoreException(\"error\")).when(mailContentStore).delete(this.batchId.toString(),\n            this.mailId.toString());\n\n        this.mocker.getComponentUnderTest().onSuccess(this.message, parameters);\n\n        assertEquals(\"Failed to remove previously failing message [\" + this.mailId + \"] (batch id [\" + this.batchId\n            + \"]) from the file system. Reason [MailStoreException: error]. However it has now been sent successfully.\",\n            this.logRule.getMessage(0));\n    }","id":105710,"modified_method":"@Test\n    public void onSuccessWithPreviouslyFailedMessageAndWhenContentStoreFails() throws Exception\n    {\n        MailStatusStore mailStatusStore = this.mocker.getInstance(MailStatusStore.class, \"database\");\n        Map<String, Object> parameters = Collections.emptyMap();\n        MailStatus status = new MailStatus(this.message, MailState.FAILED);\n        when(mailStatusStore.load(Collections.<String, Object>singletonMap(\"id\",\n            this.mailId.toString()))).thenReturn(Arrays.asList(status));\n\n        MailContentStore mailContentStore = this.mocker.getInstance(MailContentStore.class, \"filesystem\");\n        doThrow(new MailStoreException(\"error\")).when(mailContentStore).delete(this.batchId.toString(),\n            this.mailId.toString());\n\n        this.mocker.getComponentUnderTest().onSuccess(this.message, parameters);\n\n        assertEquals(\"Failed to remove previously failing message [\" + this.mailId + \"] (batch id [\" + this.batchId\n            + \"]) from the file system. Reason [MailStoreException: error]. However it has now been sent successfully.\",\n            this.logRule.getMessage(0));\n    }","commit_id":"64323db0c0aa1b1bf026dda39c403e903cb42e9b","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void onError() throws Exception\n    {\n        MailStatusStore mailStatusStore = this.mocker.getInstance(MailStatusStore.class, \"database\");\n        Map<String, Object> parameters = Collections.singletonMap(\"wikiId\", (Object) \"mywiki\");\n        MailStatus status = new MailStatus(this.message, MailState.READY);\n        status.setWiki(\"otherwiki\");\n        when(mailStatusStore.load(Collections.<String, Object>singletonMap(\"messageId\",\n            this.mailId.toString()))).thenReturn(Arrays.asList(status));\n\n        MailContentStore mailContentStore = this.mocker.getInstance(MailContentStore.class, \"filesystem\");\n\n        this.mocker.getComponentUnderTest().onError(this.message, new Exception(\"Error\"), parameters);\n\n        verify(mailStatusStore).load(Collections.<String, Object>singletonMap(\"messageId\", this.mailId.toString()));\n\n            verify(mailContentStore).save(this.message);\n\n        verify(mailStatusStore).save(argThat(new isSameMailStatus(MailState.FAILED, \"otherwiki\")), eq(parameters));\n    }","id":105711,"modified_method":"@Test\n    public void onError() throws Exception\n    {\n        MailStatusStore mailStatusStore = this.mocker.getInstance(MailStatusStore.class, \"database\");\n        Map<String, Object> parameters = Collections.singletonMap(\"wikiId\", (Object) \"mywiki\");\n        MailStatus status = new MailStatus(this.message, MailState.READY);\n        status.setWiki(\"otherwiki\");\n        when(mailStatusStore.load(Collections.<String, Object>singletonMap(\"id\",\n            this.mailId.toString()))).thenReturn(Arrays.asList(status));\n\n        MailContentStore mailContentStore = this.mocker.getInstance(MailContentStore.class, \"filesystem\");\n\n        this.mocker.getComponentUnderTest().onError(this.message, new Exception(\"Error\"), parameters);\n\n        verify(mailStatusStore).load(Collections.<String, Object>singletonMap(\"id\", this.mailId.toString()));\n\n            verify(mailContentStore).save(this.message);\n\n        verify(mailStatusStore).save(argThat(new isSameMailStatus(MailState.FAILED, \"otherwiki\")), eq(parameters));\n    }","commit_id":"64323db0c0aa1b1bf026dda39c403e903cb42e9b","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void onSuccess() throws Exception\n    {\n        MailStatusStore mailStatusStore = this.mocker.getInstance(MailStatusStore.class, \"database\");\n        Map<String, Object> parameters = Collections.singletonMap(\"wikiId\", (Object) \"mywiki\");\n        MailStatus status = new MailStatus(this.message, MailState.READY);\n        status.setWiki(\"otherwiki\");\n        when(mailStatusStore.load(Collections.<String, Object>singletonMap(\"messageId\",\n            this.mailId.toString()))).thenReturn(Arrays.asList(status));\n\n        this.mocker.getComponentUnderTest().onSuccess(this.message, parameters);\n\n        verify(mailStatusStore).load(Collections.<String, Object>singletonMap(\"messageId\", this.mailId.toString()));\n        verify(mailStatusStore).save(argThat(new isSameMailStatus(MailState.SENT, \"otherwiki\")), eq(parameters));\n    }","id":105712,"modified_method":"@Test\n    public void onSuccess() throws Exception\n    {\n        MailStatusStore mailStatusStore = this.mocker.getInstance(MailStatusStore.class, \"database\");\n        Map<String, Object> parameters = Collections.singletonMap(\"wikiId\", (Object) \"mywiki\");\n        MailStatus status = new MailStatus(this.message, MailState.READY);\n        status.setWiki(\"otherwiki\");\n        when(mailStatusStore.load(Collections.<String, Object>singletonMap(\"id\",\n            this.mailId.toString()))).thenReturn(Arrays.asList(status));\n\n        this.mocker.getComponentUnderTest().onSuccess(this.message, parameters);\n\n        verify(mailStatusStore).load(Collections.<String, Object>singletonMap(\"id\", this.mailId.toString()));\n        verify(mailStatusStore).save(argThat(new isSameMailStatus(MailState.SENT, \"otherwiki\")), eq(parameters));\n    }","commit_id":"64323db0c0aa1b1bf026dda39c403e903cb42e9b","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Iterator<MailStatus> getByState(MailState state)\n    {\n        if (this.batchId == null) {\n            return Collections.emptyIterator();\n        }\n\n        try {\n            return this.mailStatusStore.load(\n                Collections.<String, Object>singletonMap(\"state\", state.toString())).iterator();\n        } catch (MailStoreException e) {\n            LOGGER.error(\"Failed to get results by state. Returning an empty result.\", e);\n            return Collections.emptyIterator();\n        }\n    }","id":105713,"modified_method":"@Override\n    public Iterator<MailStatus> getByState(MailState state)\n    {\n        if (this.batchId == null) {\n            return Collections.emptyIterator();\n        }\n\n        try {\n            Map<String, Object> filterMap = new HashMap<>();\n            filterMap.put(BATCHID_KEY, this.batchId);\n            filterMap.put(\"state\", state.toString());\n            return this.mailStatusStore.load(filterMap).iterator();\n        } catch (MailStoreException e) {\n            LOGGER.error(\"Failed to get results by state. Returning an empty result.\", e);\n            return Collections.emptyIterator();\n        }\n    }","commit_id":"64323db0c0aa1b1bf026dda39c403e903cb42e9b","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public Iterator<MailStatus> getAll()\n    {\n        if (this.batchId == null) {\n            return Collections.emptyIterator();\n        }\n\n        try {\n            return this.mailStatusStore.load(Collections.<String, Object>emptyMap()).iterator();\n        } catch (MailStoreException e) {\n            LOGGER.error(\"Failed to get all results. Returning an empty result.\", e);\n            return Collections.emptyIterator();\n        }\n    }","id":105714,"modified_method":"@Override\n    public Iterator<MailStatus> getAll()\n    {\n        if (this.batchId == null) {\n            return Collections.emptyIterator();\n        }\n\n        try {\n            return this.mailStatusStore.load(\n                Collections.<String, Object>singletonMap(BATCHID_KEY, this.batchId)).iterator();\n        } catch (MailStoreException e) {\n            LOGGER.error(\"Failed to get all results. Returning an empty result.\", e);\n            return Collections.emptyIterator();\n        }\n    }","commit_id":"64323db0c0aa1b1bf026dda39c403e903cb42e9b","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public long getSize()\n    {\n        if (this.batchId == null) {\n            return 0;\n        }\n\n        try {\n            return this.mailStatusStore.count(Collections.<String, Object>emptyMap());\n        } catch (MailStoreException e) {\n            LOGGER.error(\"Failed to get size of results for batch id [{}]. Returning an empty result.\",\n                this.batchId, e);\n            return 0;\n        }\n    }","id":105715,"modified_method":"@Override\n    public long getSize()\n    {\n        if (this.batchId == null) {\n            return 0;\n        }\n\n        try {\n            return this.mailStatusStore.count(Collections.<String, Object>singletonMap(BATCHID_KEY, this.batchId));\n        } catch (MailStoreException e) {\n            LOGGER.error(\"Failed to get size of results for batch id [{}]. Returning an empty result.\",\n                this.batchId, e);\n            return 0;\n        }\n    }","commit_id":"64323db0c0aa1b1bf026dda39c403e903cb42e9b","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void getAll() throws Exception\n    {\n        MailStatusStore store = mock(MailStatusStore.class);\n        MailStatus status = new MailStatus();\n        when(store.load(Collections.<String, Object>emptyMap())).thenReturn(Arrays.asList(status));\n\n        DatabaseMailStatusResult result = new DatabaseMailStatusResult(store);\n        result.setBatchId(\"batchid\");\n\n        Iterator<MailStatus> resultStatuses = result.getAll();\n        MailStatus resultStatus = resultStatuses.next();\n        assertSame(status, resultStatus);\n        assertFalse(resultStatuses.hasNext());\n    }","id":105716,"modified_method":"@Test\n    public void getAll() throws Exception\n    {\n        MailStatusStore store = mock(MailStatusStore.class);\n        MailStatus status = new MailStatus();\n        when(store.load(Collections.<String, Object>singletonMap(\"batchId\", \"batchid\"))).thenReturn(\n            Arrays.asList(status));\n\n        DatabaseMailStatusResult result = new DatabaseMailStatusResult(store);\n        result.setBatchId(\"batchid\");\n\n        Iterator<MailStatus> resultStatuses = result.getAll();\n        MailStatus resultStatus = resultStatuses.next();\n        assertSame(status, resultStatus);\n        assertFalse(resultStatuses.hasNext());\n    }","commit_id":"64323db0c0aa1b1bf026dda39c403e903cb42e9b","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void getSize() throws Exception\n    {\n        MailStatusStore store = mock(MailStatusStore.class);\n        when(store.count(Collections.<String, Object>emptyMap())).thenReturn(1L);\n\n        DatabaseMailStatusResult result = new DatabaseMailStatusResult(store);\n        result.setBatchId(\"batchid\");\n\n        assertEquals(1, result.getSize());\n    }","id":105717,"modified_method":"@Test\n    public void getSize() throws Exception\n    {\n        MailStatusStore store = mock(MailStatusStore.class);\n        when(store.count(Collections.<String, Object>singletonMap(\"batchId\", \"batchid\"))).thenReturn(1L);\n\n        DatabaseMailStatusResult result = new DatabaseMailStatusResult(store);\n        result.setBatchId(\"batchid\");\n\n        assertEquals(1, result.getSize());\n    }","commit_id":"64323db0c0aa1b1bf026dda39c403e903cb42e9b","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void getSizeWhenStorageError() throws Exception\n    {\n        MailStatusStore store = mock(MailStatusStore.class);\n        when(store.count(Collections.<String, Object>emptyMap())).thenThrow(new MailStoreException(\"error\"));\n\n        DatabaseMailStatusResult result = new DatabaseMailStatusResult(store);\n        result.setBatchId(\"batchid\");\n\n        assertEquals(0, result.getSize());\n        assertEquals(\"Failed to get size of results for batch id [batchid]. Returning an empty result.\",\n            this.logRule.getMessage(0));\n    }","id":105718,"modified_method":"@Test\n    public void getSizeWhenStorageError() throws Exception\n    {\n        MailStatusStore store = mock(MailStatusStore.class);\n        when(store.count(Collections.<String, Object>singletonMap(\"batchId\", \"batchid\"))).thenThrow(\n            new MailStoreException(\"error\"));\n\n        DatabaseMailStatusResult result = new DatabaseMailStatusResult(store);\n        result.setBatchId(\"batchid\");\n\n        assertEquals(0, result.getSize());\n        assertEquals(\"Failed to get size of results for batch id [batchid]. Returning an empty result.\",\n            this.logRule.getMessage(0));\n    }","commit_id":"64323db0c0aa1b1bf026dda39c403e903cb42e9b","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n\tpublic void index(OutputStream outputStream) throws Exception {\n\t\tPath tempPath = Files.createTempDirectory(null);\n\n\t\tFile tempDir = tempPath.toFile();\n\n\t\t_config.put(\"root.url\", tempDir.getPath());\n\n\t\tSet<File> jarFiles = new LinkedHashSet<>();\n\n\t\ttry {\n\t\t\t_processSystemBundle(tempDir, jarFiles);\n\t\t\t_processSystemPackagesExtra(tempDir, jarFiles);\n\n\t\t\tfor (String dirName : _dirNames) {\n\t\t\t\ttry (DirectoryStream<Path> directoryStream =\n\t\t\t\t\t\tFiles.newDirectoryStream(Paths.get(dirName))) {\n\n\t\t\t\t\tIterator<Path> iterator = directoryStream.iterator();\n\n\t\t\t\t\twhile (iterator.hasNext()) {\n\t\t\t\t\t\t_addBundle(tempPath, iterator.next(), jarFiles);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tResourceIndexer resourceIndexer = new RepoIndex();\n\n\t\t\tresourceIndexer.index(jarFiles, outputStream, _config);\n\t\t}\n\t\tfinally {\n\t\t\tPathUtil.deltree(tempPath);\n\t\t}\n\t}","id":105719,"modified_method":"@Override\n\tpublic void index(OutputStream outputStream) throws Exception {\n\t\tPath tempPath = Files.createTempDirectory(null);\n\n\t\tFile tempDir = tempPath.toFile();\n\n\t\t_config.put(\"root.url\", tempDir.getPath());\n\n\t\tSet<File> jarFiles = new LinkedHashSet<>();\n\n\t\ttry {\n\t\t\t_processSystemBundle(tempDir, jarFiles);\n\n\t\t\tfor (String dirName : _dirNames) {\n\t\t\t\ttry (DirectoryStream<Path> directoryStream =\n\t\t\t\t\t\tFiles.newDirectoryStream(Paths.get(dirName))) {\n\n\t\t\t\t\tIterator<Path> iterator = directoryStream.iterator();\n\n\t\t\t\t\twhile (iterator.hasNext()) {\n\t\t\t\t\t\t_addBundle(tempPath, iterator.next(), jarFiles);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tResourceIndexer resourceIndexer = new RepoIndex();\n\n\t\t\tresourceIndexer.index(jarFiles, outputStream, _config);\n\t\t}\n\t\tfinally {\n\t\t\tPathUtil.deltree(tempPath);\n\t\t}\n\t}","commit_id":"fef38636c6cac9c1e6119004476b44ec19531f3f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private static URI _indexTargetPlatform(String... dirNames)\n\t\tthrows Exception {\n\n\t\tFramework framework = null;\n\n\t\tPath tempPath = Files.createTempDirectory(null);\n\n\t\ttry {\n\t\t\tServiceLoader<FrameworkFactory> serviceLoader = ServiceLoader.load(\n\t\t\t\tFrameworkFactory.class);\n\n\t\t\tFrameworkFactory frameworkFactory = serviceLoader.iterator().next();\n\n\t\t\tframework = frameworkFactory.newFramework(\n\t\t\t\tCollections.singletonMap(\n\t\t\t\t\torg.osgi.framework.Constants.FRAMEWORK_STORAGE,\n\t\t\t\t\ttempPath.toString()));\n\n\t\t\tframework.init();\n\n\t\t\tBundleContext bundleContext = framework.getBundleContext();\n\n\t\t\tBundle systemBundle = bundleContext.getBundle(0);\n\n\t\t\tTargetPlatformIndexer targetPlatformIndexer =\n\t\t\t\tnew TargetPlatformIndexer(systemBundle, dirNames);\n\n\t\t\tByteArrayOutputStream byteArrayOutputStream =\n\t\t\t\tnew ByteArrayOutputStream();\n\n\t\t\ttargetPlatformIndexer.index(byteArrayOutputStream);\n\n\t\t\tURL url = BytesURLSupport.putBytes(\n\t\t\t\t\"liferay-target-platform\", byteArrayOutputStream.toByteArray());\n\n\t\t\treturn url.toURI();\n\t\t}\n\t\tfinally {\n\t\t\tframework.stop();\n\n\t\t\tPathUtil.deltree(tempPath);\n\t\t}\n\t}","id":105720,"modified_method":"private static URI _indexTargetPlatform(String... dirNames)\n\t\tthrows Exception {\n\n\t\tFramework framework = null;\n\n\t\tPath tempPath = Files.createTempDirectory(null);\n\n\t\tString systemPackagesExtra = \"\";\n\n\t\tURL url = _classLoader.getResource(\n\t\t\t\"META-INF/system.packages.extra.mf\");\n\n\t\ttry (InputStream inputStream = url.openStream()) {\n\t\t\tManifest extraPackagesManifest = new Manifest(inputStream);\n\n\t\t\tAttributes attributes = extraPackagesManifest.getMainAttributes();\n\n\t\t\tsystemPackagesExtra = attributes.getValue(\"Export-Package\");\n\t\t}\n\n\t\tMap<String, String> properties = new HashMap<>();\n\n\t\tproperties.put(Constants.FRAMEWORK_STORAGE, tempPath.toString());\n\t\tproperties.put(\n\t\t\tConstants.FRAMEWORK_SYSTEMPACKAGES_EXTRA, systemPackagesExtra);\n\n\t\ttry {\n\t\t\tServiceLoader<FrameworkFactory> serviceLoader = ServiceLoader.load(\n\t\t\t\tFrameworkFactory.class);\n\n\t\t\tFrameworkFactory frameworkFactory = serviceLoader.iterator().next();\n\n\t\t\tframework = frameworkFactory.newFramework(properties);\n\n\t\t\tframework.init();\n\n\t\t\tBundleContext bundleContext = framework.getBundleContext();\n\n\t\t\tBundle systemBundle = bundleContext.getBundle(0);\n\n\t\t\tTargetPlatformIndexer targetPlatformIndexer =\n\t\t\t\tnew TargetPlatformIndexer(systemBundle, dirNames);\n\n\t\t\tByteArrayOutputStream byteArrayOutputStream =\n\t\t\t\tnew ByteArrayOutputStream();\n\n\t\t\ttargetPlatformIndexer.index(byteArrayOutputStream);\n\n\t\t\turl = BytesURLSupport.putBytes(\n\t\t\t\t\"liferay-target-platform\", byteArrayOutputStream.toByteArray());\n\n\t\t\treturn url.toURI();\n\t\t}\n\t\tfinally {\n\t\t\tframework.stop();\n\n\t\t\tPathUtil.deltree(tempPath);\n\t\t}\n\t}","commit_id":"fef38636c6cac9c1e6119004476b44ec19531f3f","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private Model readModel( ModelSource modelSource, File pomFile, ModelBuildingRequest request,\n                             DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model model;\n\n        if ( modelSource == null )\n        {\n            if ( pomFile != null )\n            {\n                modelSource = new FileModelSource( pomFile );\n            }\n            else\n            {\n                throw new IllegalArgumentException( \"neither model source nor input file are specified\" );\n            }\n        }\n\n        problems.setSource( modelSource.getLocation() );\n        try\n        {\n            boolean strict = request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0;\n\n            Map<String, ?> options = Collections.singletonMap( ModelProcessor.IS_STRICT, Boolean.valueOf( strict ) );\n\n            try\n            {\n                model = modelProcessor.read( modelSource.getInputStream(), options );\n            }\n            catch ( ModelParseException e )\n            {\n                if ( !strict || pomFile != null )\n                {\n                    throw e;\n                }\n\n                options = Collections.singletonMap( ModelProcessor.IS_STRICT, Boolean.FALSE );\n\n                model = modelProcessor.read( modelSource.getInputStream(), options );\n\n                problems.addWarning( \"Malformed POM \" + modelSource.getLocation() + \": \" + e.getMessage(), e );\n            }\n        }\n        catch ( ModelParseException e )\n        {\n            problems.addFatalError( \"Non-parseable POM \" + modelSource.getLocation() + \": \" + e.getMessage(), e );\n            throw new ModelBuildingException( problems.getRootModelId(), problems.getProblems() );\n        }\n        catch ( IOException e )\n        {\n            problems.addFatalError( \"Non-readable POM \" + modelSource.getLocation() + \": \" + e.getMessage(), e );\n            throw new ModelBuildingException( problems.getRootModelId(), problems.getProblems() );\n        }\n\n        model.setPomFile( pomFile );\n\n        problems.setSource( model );\n        modelValidator.validateRawModel( model, request, problems );\n\n        return model;\n    }","id":105721,"modified_method":"private Model readModel( ModelSource modelSource, File pomFile, ModelBuildingRequest request,\n                             DefaultModelProblemCollector problems )\n        throws ModelBuildingException\n    {\n        Model model;\n\n        if ( modelSource == null )\n        {\n            if ( pomFile != null )\n            {\n                modelSource = new FileModelSource( pomFile );\n            }\n            else\n            {\n                throw new IllegalArgumentException( \"neither model source nor input file are specified\" );\n            }\n        }\n\n        problems.setSource( modelSource.getLocation() );\n        try\n        {\n            boolean strict = request.getValidationLevel() >= ModelBuildingRequest.VALIDATION_LEVEL_MAVEN_2_0;\n\n            Map<String,Object> options = new HashMap<String,Object>();\n            options.put(ModelProcessor.IS_STRICT, Boolean.valueOf( strict ));\n            options.put(ModelProcessor.LOCATION, modelSource.getLocation());\n            options.put(ModelProcessor.SOURCE, modelSource);\n\n            try\n            {\n                model = modelProcessor.read( modelSource.getInputStream(), options );\n            }\n            catch ( ModelParseException e )\n            {\n                if ( !strict || pomFile != null )\n                {\n                    throw e;\n                }\n\n                options = Collections.singletonMap( ModelProcessor.IS_STRICT, (Object)Boolean.FALSE );\n\n                model = modelProcessor.read( modelSource.getInputStream(), options );\n\n                problems.addWarning( \"Malformed POM \" + modelSource.getLocation() + \": \" + e.getMessage(), e );\n            }\n        }\n        catch ( ModelParseException e )\n        {\n            problems.addFatalError( \"Non-parseable POM \" + modelSource.getLocation() + \": \" + e.getMessage(), e );\n            throw new ModelBuildingException( problems.getRootModelId(), problems.getProblems() );\n        }\n        catch ( IOException e )\n        {\n            problems.addFatalError( \"Non-readable POM \" + modelSource.getLocation() + \": \" + e.getMessage(), e );\n            throw new ModelBuildingException( problems.getRootModelId(), problems.getProblems() );\n        }\n\n        model.setPomFile( pomFile );\n\n        problems.setSource( model );\n        modelValidator.validateRawModel( model, request, problems );\n\n        return model;\n    }","commit_id":"57f45121c3527b2250019214ed6dbad3182c2eb9","url":"https://github.com/apache/maven"},{"original_method":"public String getClassName() {\n    final zClosureContext1 _zClosureContext = new zClosureContext1();\n    _zClosureContext.className = null;\n    CommandProcessor.instance().executeLightweightCommand(new Command2(TestCaseTreeNode.this, _zClosureContext));\n    return _zClosureContext.className;\n  }","id":105722,"modified_method":"public String getClassName() {\n    final Wrappers._T<String> className = new Wrappers._T<String>(null);\n    CommandProcessor.instance().executeLightweightCommand(new Runnable() {\n\n      public void run() {\n        className.value = INamedConcept_Behavior.call_getFqName_1184686272576(TestCaseTreeNode.this.testCase);\n      }\n\n    });\n    return className.value;\n  }","commit_id":"e38a3fc8df0e9682a07a29c14ad6b832877326ca","url":"https://github.com/JetBrains/MPS"},{"original_method":"public String getClassName() {\n    final zClosureContext2 _zClosureContext1 = new zClosureContext2();\n    _zClosureContext1.className = null;\n    CommandProcessor.instance().executeLightweightCommand(new Command4(TestMethodTreeNode.this, _zClosureContext1));\n    return _zClosureContext1.className;\n  }","id":105723,"modified_method":"public String getClassName() {\n    final Wrappers._T<String> className = new Wrappers._T<String>(null);\n    CommandProcessor.instance().executeLightweightCommand(new Runnable() {\n\n      public void run() {\n        SNode classConcept = SNodeOperations.getAncestor(TestMethodTreeNode.this.testMethod, \"jetbrains.mps.baseLanguage.structure.ClassConcept\", false, false);\n        if (classConcept != null) {\n          className.value = INamedConcept_Behavior.call_getFqName_1184686272576(classConcept);\n        }\n      }\n\n    });\n    return className.value;\n  }","commit_id":"e38a3fc8df0e9682a07a29c14ad6b832877326ca","url":"https://github.com/JetBrains/MPS"},{"original_method":"public String getMethodName() {\n    final zClosureContext3 _zClosureContext2 = new zClosureContext3();\n    _zClosureContext2.methodName = null;\n    CommandProcessor.instance().executeLightweightCommand(new Command5(TestMethodTreeNode.this, _zClosureContext2));\n    return _zClosureContext2.methodName;\n  }","id":105724,"modified_method":"public String getMethodName() {\n    final Wrappers._T<String> methodName = new Wrappers._T<String>(null);\n    CommandProcessor.instance().executeLightweightCommand(new Runnable() {\n\n      public void run() {\n        methodName.value = SPropertyOperations.getString(TestMethodTreeNode.this.testMethod, \"name\");\n      }\n\n    });\n    return methodName.value;\n  }","commit_id":"e38a3fc8df0e9682a07a29c14ad6b832877326ca","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void setState(TestState state) {\n    this.state = state;\n    CommandProcessor.instance().executeLightweightCommandInEDT(new Command3(TestMethodTreeNode.this, null));\n  }","id":105725,"modified_method":"public void setState(TestState state) {\n    this.state = state;\n    CommandProcessor.instance().executeLightweightCommandInEDT(new Runnable() {\n\n      public void run() {\n        TestMethodTreeNode.this.updatePresentation();\n        TestMethodTreeNode.this.updateNodePresentationInTree();\n      }\n\n    });\n  }","commit_id":"e38a3fc8df0e9682a07a29c14ad6b832877326ca","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Test\n    public void canWriteToOneServerInTheClusterAndReadFromAnother() throws Exception\n    {\n        cluster = new ServerCluster( dir, zk, SERVER_PORTS );\n        URI base = cluster.getRandomServerUri();\n        put( property( node( base, 0 ), \"message\" ), \"hello world\" );\n        cluster.updateAll();\n        base = cluster.getRandomServerUri( base );\n        assertEquals( \"hello world\", get( property( node( base, 0 ), \"message\" ) ) );\n    }","id":105726,"modified_method":"@Test\n    public void canWriteToOneServerInTheClusterAndReadFromAnother() throws Exception\n    {\n        cluster = new ServerCluster( testName.getMethodName(), dir, zk, SERVER_PORTS );\n        URI base = cluster.getRandomServerUri();\n        put( property( node( base, 0 ), \"message\" ), \"hello world\" );\n        cluster.updateAll();\n        base = cluster.getRandomServerUri( base );\n        assertEquals( \"hello world\", get( property( node( base, 0 ), \"message\" ) ) );\n    }","commit_id":"143828b869d90e0528ef60c01ad9ad391cc74d39","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void canStartUpServerCluster() throws Exception\n    {\n        cluster = new ServerCluster( dir, zk, SERVER_PORTS );\n    }","id":105727,"modified_method":"@Test\n    public void canStartUpServerCluster() throws Exception\n    {\n        cluster = new ServerCluster( testName.getMethodName(), dir, zk, SERVER_PORTS );\n    }","commit_id":"143828b869d90e0528ef60c01ad9ad391cc74d39","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void canWriteToOneServerInTheClusterThenReadFromAnotherAfterShuttingDownTheWriteServer()\n            throws Exception\n    {\n        cluster = new ServerCluster( dir, zk, SERVER_PORTS );\n        URI base = cluster.getRandomServerUri();\n        put( property( node( base, 0 ), \"message\" ), \"hello world\" );\n        cluster.updateAll();\n        cluster.kill( base );\n        base = cluster.getRandomServerUri();\n        assertEquals( \"hello world\", get( property( node( base, 0 ), \"message\" ) ) );\n    }","id":105728,"modified_method":"@Test\n    public void canWriteToOneServerInTheClusterThenReadFromAnotherAfterShuttingDownTheWriteServer()\n            throws Exception\n    {\n        cluster = new ServerCluster( testName.getMethodName(), dir, zk, SERVER_PORTS );\n        URI base = cluster.getRandomServerUri();\n        put( property( node( base, 0 ), \"message\" ), \"hello world\" );\n        cluster.updateAll();\n        cluster.kill( base );\n        base = cluster.getRandomServerUri();\n        assertEquals( \"hello world\", get( property( node( base, 0 ), \"message\" ) ) );\n    }","commit_id":"143828b869d90e0528ef60c01ad9ad391cc74d39","url":"https://github.com/neo4j/neo4j"},{"original_method":"@SuppressWarnings( \"unchecked\" )\n    private static Pair<String, File> config( TargetDirectory targetDir,\n            LocalhostZooKeeperCluster keeperCluster, int id, Pair<Integer, Integer> ports )\n    {\n        File serverDir = targetDir.directory( \"server-\" + ports.other(), true );\n        File serverConfig = new File( serverDir, \"server.cfg\" );\n        File dbConfig = new File( serverDir, \"neo4j.cfg\" );\n        File dbDir = new File( serverDir, \"graph-database\" );\n\n        // Server configuration\n        config( serverConfig,//\n                Pair.of( Configurator.DB_MODE_KEY, DatabaseMode.HA.name() ),//\n                Pair.of( Configurator.DATABASE_LOCATION_PROPERTY_KEY, dbDir.getAbsolutePath() ),//\n                Pair.of( Configurator.WEBSERVER_PORT_PROPERTY_KEY, ports.other().toString() ),//\n                Pair.of( Configurator.DB_TUNING_PROPERTY_FILE_KEY, dbConfig.getAbsolutePath() ) );\n\n        // Kernel (and HA) configuration\n        config( dbConfig, //\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_SERVER, \"localhost:\"\n                                                                            + ports.first() ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_MACHINE_ID,\n                        Integer.toString( id ) ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_ZOO_KEEPER_SERVERS,\n                        keeperCluster.getConnectionString() ) );\n\n        return Pair.of( serverConfig.getAbsolutePath(), serverDir );\n    }","id":105729,"modified_method":"@SuppressWarnings( \"unchecked\" )\n    private static Pair<String, File> config( String name, TargetDirectory targetDir,\n            LocalhostZooKeeperCluster keeperCluster, int id, Pair<Integer, Integer> ports )\n    {\n        File serverDir = targetDir.directory( \"server-\" + ports.other(), true );\n        File serverConfig = new File( serverDir, \"server.cfg\" );\n        File dbConfig = new File( serverDir, \"neo4j.cfg\" );\n        File dbDir = new File( serverDir, \"graph-database\" );\n\n        // Server configuration\n        config( serverConfig,//\n                Pair.of( Configurator.DB_MODE_KEY, DatabaseMode.HA.name() ),//\n                Pair.of( Configurator.DATABASE_LOCATION_PROPERTY_KEY, dbDir.getAbsolutePath() ),//\n                Pair.of( Configurator.WEBSERVER_PORT_PROPERTY_KEY, ports.other().toString() ),//\n                Pair.of( Configurator.DB_TUNING_PROPERTY_FILE_KEY, dbConfig.getAbsolutePath() ) );\n\n        // Kernel (and HA) configuration\n        config( dbConfig, //\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_CLUSTER_NAME, name ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_SERVER, \"localhost:\"\n                                                                            + ports.first() ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_MACHINE_ID,\n                        Integer.toString( id ) ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_ZOO_KEEPER_SERVERS,\n                        keeperCluster.getConnectionString() ) );\n\n        return Pair.of( serverConfig.getAbsolutePath(), serverDir );\n    }","commit_id":"143828b869d90e0528ef60c01ad9ad391cc74d39","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ServerCluster( TargetDirectory targetDir, LocalhostZooKeeperCluster keeperCluster,\n            Pair<Integer, Integer>... ports )\n    {\n        // @SuppressWarnings( { \"unchecked\", \"hiding\" } )\n        // Pair<ServerManager, File>[] servers = new Pair[ports.length];\n        this.servers = new Triplet[ports.length];\n        SubProcess<ServerManager, String> process = new ServerProcess();\n        try\n        {\n            for ( int i = 0; i < ports.length; i++ )\n            {\n                Pair<String, File> config = config( targetDir, keeperCluster, i, ports[i] );\n                servers[i] = awaitStartup( Pair.of( process.start( config.first() ), config.other() ) )[0];\n            }\n        }\n        catch ( Throwable e )\n        {\n            // shutdownAndCleanUp( servers );\n            for ( Pair<URI, File> UGLY_CODE_DUE_TO_ISSUES_IN_HA : shutdown(\n                    (Class<Pair<URI, File>>) (Class) Pair.class, servers ) )\n            {\n                if ( UGLY_CODE_DUE_TO_ISSUES_IN_HA != null )\n                    TargetDirectory.recursiveDelete( UGLY_CODE_DUE_TO_ISSUES_IN_HA.other() );\n            }\n            if ( e instanceof Error ) throw (Error) e;\n            if ( e instanceof RuntimeException ) throw (RuntimeException) e;\n            throw new RuntimeException( \"Cluster startup failed\", e );\n        }\n        // this.servers = awaitStartup( servers );\n        System.out.println( \"Started \" + this );\n    }","id":105730,"modified_method":"public ServerCluster( String testName, TargetDirectory targetDir,\n            LocalhostZooKeeperCluster keeperCluster, Pair<Integer, Integer>... ports )\n    {\n        // @SuppressWarnings( { \"unchecked\", \"hiding\" } )\n        // Pair<ServerManager, File>[] servers = new Pair[ports.length];\n        this.servers = new Triplet[ports.length];\n        SubProcess<ServerManager, String> process = new ServerProcess( testName );\n        try\n        {\n            for ( int i = 0; i < ports.length; i++ )\n            {\n                Pair<String, File> config = config( testName, targetDir, keeperCluster, i, ports[i] );\n                servers[i] = awaitStartup( Pair.of( process.start( config.first() ), config.other() ) )[0];\n            }\n        }\n        catch ( Throwable e )\n        {\n            // shutdownAndCleanUp( servers );\n            for ( Pair<URI, File> UGLY_CODE_DUE_TO_ISSUES_IN_HA : shutdown(\n                    (Class<Pair<URI, File>>) (Class) Pair.class, servers ) )\n            {\n                if ( UGLY_CODE_DUE_TO_ISSUES_IN_HA != null )\n                    TargetDirectory.recursiveDelete( UGLY_CODE_DUE_TO_ISSUES_IN_HA.other() );\n            }\n            if ( e instanceof Error ) throw (Error) e;\n            if ( e instanceof RuntimeException ) throw (RuntimeException) e;\n            throw new RuntimeException( \"Cluster startup failed\", e );\n        }\n        // this.servers = awaitStartup( servers );\n        System.out.println( \"Started \" + this );\n    }","commit_id":"143828b869d90e0528ef60c01ad9ad391cc74d39","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public String toString()\n    {\n        StringBuilder result = new StringBuilder( \"ServerCluster[\" );\n        String prefix = \"\";\n        for ( Triplet<ServerManager, URI, File> server : servers )\n        {\n            if ( server == null )\n            {\n                result.append( \"--\" );\n            }\n            else\n            {\n                result.append( prefix ).append( server.second() );\n                if ( server.first().isMaster() ) result.append( \" is master\" );\n            }\n            prefix = \", \";\n        }\n        return result.append( \"]\" ).toString();\n    }","id":105731,"modified_method":"@Override\n    public String toString()\n    {\n        StringBuilder result = new StringBuilder( \"ServerCluster[\" );\n        String prefix = \"\";\n        for ( Triplet<ServerManager, URI, File> server : servers )\n        {\n            if ( server == null )\n            {\n                result.append( \"--\" );\n            }\n            else\n            {\n                result.append( prefix ).append( server.first() ).append( \": \" ).append(\n                        server.second() );\n                if ( server.first().isMaster() ) result.append( \" is master\" );\n            }\n            prefix = \", \";\n        }\n        return result.append( \"]\" ).toString();\n    }","commit_id":"143828b869d90e0528ef60c01ad9ad391cc74d39","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n        protected void startup( String configFilePath )\n        {\n            System.out.println( \"configFilePath=\" + configFilePath );\n            System.setProperty( Configurator.NEO_SERVER_CONFIG_FILE_KEY, configFilePath );\n            this.bootstrap = new BootStrapper();\n            this.startupStatus = this.bootstrap.start();\n        }","id":105732,"modified_method":"ServerProcess( String name )\n        {\n            this.name = name;\n        }","commit_id":"143828b869d90e0528ef60c01ad9ad391cc74d39","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void canWriteToOneServerInTheClusterThenReadFromAnotherAfterShuttingDownTheWriteServer()\n            throws Exception\n    {\n        cluster = new ServerCluster( dir, zk, SERVER_PORTS );\n        URI base = cluster.getRandomServerUri();\n        put( property( node( base, 0 ), \"message\" ), \"hello world\" );\n        cluster.updateAll();\n        cluster.kill( base );\n        base = cluster.getRandomServerUri();\n        assertEquals( \"hello world\", get( property( node( base, 0 ), \"message\" ) ) );\n    }","id":105733,"modified_method":"@Test\n    public void canWriteToOneServerInTheClusterThenReadFromAnotherAfterShuttingDownTheWriteServer()\n            throws Exception\n    {\n        cluster = new ServerCluster( testName.getMethodName(), dir, zk, SERVER_PORTS );\n        URI base = cluster.getRandomServerUri();\n        put( property( node( base, 0 ), \"message\" ), \"hello world\" );\n        cluster.updateAll();\n        cluster.kill( base );\n        base = cluster.getRandomServerUri();\n        assertEquals( \"hello world\", get( property( node( base, 0 ), \"message\" ) ) );\n    }","commit_id":"09cdaa39d13357863d0ca85912a37ff61bb7ac34","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void canStartUpServerCluster() throws Exception\n    {\n        cluster = new ServerCluster( dir, zk, SERVER_PORTS );\n    }","id":105734,"modified_method":"@Test\n    public void canStartUpServerCluster() throws Exception\n    {\n        cluster = new ServerCluster( testName.getMethodName(), dir, zk, SERVER_PORTS );\n    }","commit_id":"09cdaa39d13357863d0ca85912a37ff61bb7ac34","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void canWriteToOneServerInTheClusterAndReadFromAnother() throws Exception\n    {\n        cluster = new ServerCluster( dir, zk, SERVER_PORTS );\n        URI base = cluster.getRandomServerUri();\n        put( property( node( base, 0 ), \"message\" ), \"hello world\" );\n        cluster.updateAll();\n        base = cluster.getRandomServerUri( base );\n        assertEquals( \"hello world\", get( property( node( base, 0 ), \"message\" ) ) );\n    }","id":105735,"modified_method":"@Test\n    public void canWriteToOneServerInTheClusterAndReadFromAnother() throws Exception\n    {\n        cluster = new ServerCluster( testName.getMethodName(), dir, zk, SERVER_PORTS );\n        URI base = cluster.getRandomServerUri();\n        put( property( node( base, 0 ), \"message\" ), \"hello world\" );\n        cluster.updateAll();\n        base = cluster.getRandomServerUri( base );\n        assertEquals( \"hello world\", get( property( node( base, 0 ), \"message\" ) ) );\n    }","commit_id":"09cdaa39d13357863d0ca85912a37ff61bb7ac34","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n        protected void startup( String configFilePath )\n        {\n            System.out.println( \"configFilePath=\" + configFilePath );\n            System.setProperty( Configurator.NEO_SERVER_CONFIG_FILE_KEY, configFilePath );\n            this.bootstrap = new BootStrapper();\n            this.startupStatus = this.bootstrap.start();\n        }","id":105736,"modified_method":"ServerProcess( String name )\n        {\n            this.name = name;\n        }","commit_id":"09cdaa39d13357863d0ca85912a37ff61bb7ac34","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ServerCluster( TargetDirectory targetDir, LocalhostZooKeeperCluster keeperCluster,\n            Pair<Integer, Integer>... ports )\n    {\n        // @SuppressWarnings( { \"unchecked\", \"hiding\" } )\n        // Pair<ServerManager, File>[] servers = new Pair[ports.length];\n        this.servers = new Triplet[ports.length];\n        SubProcess<ServerManager, String> process = new ServerProcess();\n        try\n        {\n            for ( int i = 0; i < ports.length; i++ )\n            {\n                Pair<String, File> config = config( targetDir, keeperCluster, i, ports[i] );\n                servers[i] = awaitStartup( Pair.of( process.start( config.first() ), config.other() ) )[0];\n            }\n        }\n        catch ( Throwable e )\n        {\n            // shutdownAndCleanUp( servers );\n            for ( Pair<URI, File> UGLY_CODE_DUE_TO_ISSUES_IN_HA : shutdown(\n                    (Class<Pair<URI, File>>) (Class) Pair.class, servers ) )\n            {\n                if ( UGLY_CODE_DUE_TO_ISSUES_IN_HA != null )\n                    TargetDirectory.recursiveDelete( UGLY_CODE_DUE_TO_ISSUES_IN_HA.other() );\n            }\n            if ( e instanceof Error ) throw (Error) e;\n            if ( e instanceof RuntimeException ) throw (RuntimeException) e;\n            throw new RuntimeException( \"Cluster startup failed\", e );\n        }\n        // this.servers = awaitStartup( servers );\n        System.out.println( \"Started \" + this );\n    }","id":105737,"modified_method":"public ServerCluster( String testName, TargetDirectory targetDir,\n            LocalhostZooKeeperCluster keeperCluster, Pair<Integer, Integer>... ports )\n    {\n        // @SuppressWarnings( { \"unchecked\", \"hiding\" } )\n        // Pair<ServerManager, File>[] servers = new Pair[ports.length];\n        this.servers = new Triplet[ports.length];\n        SubProcess<ServerManager, String> process = new ServerProcess( testName );\n        try\n        {\n            for ( int i = 0; i < ports.length; i++ )\n            {\n                Pair<String, File> config = config( testName, targetDir, keeperCluster, i, ports[i] );\n                servers[i] = awaitStartup( Pair.of( process.start( config.first() ), config.other() ) )[0];\n            }\n        }\n        catch ( Throwable e )\n        {\n            // shutdownAndCleanUp( servers );\n            for ( Pair<URI, File> UGLY_CODE_DUE_TO_ISSUES_IN_HA : shutdown(\n                    (Class<Pair<URI, File>>) (Class) Pair.class, servers ) )\n            {\n                if ( UGLY_CODE_DUE_TO_ISSUES_IN_HA != null )\n                    TargetDirectory.recursiveDelete( UGLY_CODE_DUE_TO_ISSUES_IN_HA.other() );\n            }\n            if ( e instanceof Error ) throw (Error) e;\n            if ( e instanceof RuntimeException ) throw (RuntimeException) e;\n            throw new RuntimeException( \"Cluster startup failed\", e );\n        }\n        // this.servers = awaitStartup( servers );\n        System.out.println( \"Started \" + this );\n    }","commit_id":"09cdaa39d13357863d0ca85912a37ff61bb7ac34","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public String toString()\n    {\n        StringBuilder result = new StringBuilder( \"ServerCluster[\" );\n        String prefix = \"\";\n        for ( Triplet<ServerManager, URI, File> server : servers )\n        {\n            if ( server == null )\n            {\n                result.append( \"--\" );\n            }\n            else\n            {\n                result.append( prefix ).append( server.second() );\n                if ( server.first().isMaster() ) result.append( \" is master\" );\n            }\n            prefix = \", \";\n        }\n        return result.append( \"]\" ).toString();\n    }","id":105738,"modified_method":"@Override\n    public String toString()\n    {\n        StringBuilder result = new StringBuilder( \"ServerCluster[\" );\n        String prefix = \"\";\n        for ( Triplet<ServerManager, URI, File> server : servers )\n        {\n            if ( server == null )\n            {\n                result.append( \"--\" );\n            }\n            else\n            {\n                result.append( prefix ).append( server.first() ).append( \": \" ).append(\n                        server.second() );\n                if ( server.first().isMaster() ) result.append( \" is master\" );\n            }\n            prefix = \", \";\n        }\n        return result.append( \"]\" ).toString();\n    }","commit_id":"09cdaa39d13357863d0ca85912a37ff61bb7ac34","url":"https://github.com/neo4j/neo4j"},{"original_method":"@SuppressWarnings( \"unchecked\" )\n    private static Pair<String, File> config( TargetDirectory targetDir,\n            LocalhostZooKeeperCluster keeperCluster, int id, Pair<Integer, Integer> ports )\n    {\n        File serverDir = targetDir.directory( \"server-\" + ports.other(), true );\n        File serverConfig = new File( serverDir, \"server.cfg\" );\n        File dbConfig = new File( serverDir, \"neo4j.cfg\" );\n        File dbDir = new File( serverDir, \"graph-database\" );\n\n        // Server configuration\n        config( serverConfig,//\n                Pair.of( Configurator.DB_MODE_KEY, DatabaseMode.HA.name() ),//\n                Pair.of( Configurator.DATABASE_LOCATION_PROPERTY_KEY, dbDir.getAbsolutePath() ),//\n                Pair.of( Configurator.WEBSERVER_PORT_PROPERTY_KEY, ports.other().toString() ),//\n                Pair.of( Configurator.DB_TUNING_PROPERTY_FILE_KEY, dbConfig.getAbsolutePath() ) );\n\n        // Kernel (and HA) configuration\n        config( dbConfig, //\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_SERVER, \"localhost:\"\n                                                                            + ports.first() ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_MACHINE_ID,\n                        Integer.toString( id ) ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_ZOO_KEEPER_SERVERS,\n                        keeperCluster.getConnectionString() ) );\n\n        return Pair.of( serverConfig.getAbsolutePath(), serverDir );\n    }","id":105739,"modified_method":"@SuppressWarnings( \"unchecked\" )\n    private static Pair<String, File> config( String name, TargetDirectory targetDir,\n            LocalhostZooKeeperCluster keeperCluster, int id, Pair<Integer, Integer> ports )\n    {\n        File serverDir = targetDir.directory( \"server-\" + ports.other(), true );\n        File serverConfig = new File( serverDir, \"server.cfg\" );\n        File dbConfig = new File( serverDir, \"neo4j.cfg\" );\n        File dbDir = new File( serverDir, \"graph-database\" );\n\n        // Server configuration\n        config( serverConfig,//\n                Pair.of( Configurator.DB_MODE_KEY, DatabaseMode.HA.name() ),//\n                Pair.of( Configurator.DATABASE_LOCATION_PROPERTY_KEY, dbDir.getAbsolutePath() ),//\n                Pair.of( Configurator.WEBSERVER_PORT_PROPERTY_KEY, ports.other().toString() ),//\n                Pair.of( Configurator.DB_TUNING_PROPERTY_FILE_KEY, dbConfig.getAbsolutePath() ) );\n\n        // Kernel (and HA) configuration\n        config( dbConfig, //\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_CLUSTER_NAME, name ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_SERVER, \"localhost:\"\n                                                                            + ports.first() ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_MACHINE_ID,\n                        Integer.toString( id ) ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_ZOO_KEEPER_SERVERS,\n                        keeperCluster.getConnectionString() ) );\n\n        return Pair.of( serverConfig.getAbsolutePath(), serverDir );\n    }","commit_id":"09cdaa39d13357863d0ca85912a37ff61bb7ac34","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void canWriteToOneServerInTheClusterAndReadFromAnother() throws Exception\n    {\n        cluster = new ServerCluster( dir, zk, SERVER_PORTS );\n        URI base = cluster.getRandomServerUri();\n        put( property( node( base, 0 ), \"message\" ), \"hello world\" );\n        cluster.updateAll();\n        base = cluster.getRandomServerUri( base );\n        assertEquals( \"hello world\", get( property( node( base, 0 ), \"message\" ) ) );\n    }","id":105740,"modified_method":"@Test\n    public void canWriteToOneServerInTheClusterAndReadFromAnother() throws Exception\n    {\n        cluster = new ServerCluster( testName.getMethodName(), dir, zk, SERVER_PORTS );\n        URI base = cluster.getRandomServerUri();\n        put( property( node( base, 0 ), \"message\" ), \"hello world\" );\n        cluster.updateAll();\n        base = cluster.getRandomServerUri( base );\n        assertEquals( \"hello world\", get( property( node( base, 0 ), \"message\" ) ) );\n    }","commit_id":"b0671988ae73677ce9ec2f8a3985ca3544794187","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void canStartUpServerCluster() throws Exception\n    {\n        cluster = new ServerCluster( dir, zk, SERVER_PORTS );\n    }","id":105741,"modified_method":"@Test\n    public void canStartUpServerCluster() throws Exception\n    {\n        cluster = new ServerCluster( testName.getMethodName(), dir, zk, SERVER_PORTS );\n    }","commit_id":"b0671988ae73677ce9ec2f8a3985ca3544794187","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void canWriteToOneServerInTheClusterThenReadFromAnotherAfterShuttingDownTheWriteServer()\n            throws Exception\n    {\n        cluster = new ServerCluster( dir, zk, SERVER_PORTS );\n        URI base = cluster.getRandomServerUri();\n        put( property( node( base, 0 ), \"message\" ), \"hello world\" );\n        cluster.updateAll();\n        cluster.kill( base );\n        base = cluster.getRandomServerUri();\n        assertEquals( \"hello world\", get( property( node( base, 0 ), \"message\" ) ) );\n    }","id":105742,"modified_method":"@Test\n    public void canWriteToOneServerInTheClusterThenReadFromAnotherAfterShuttingDownTheWriteServer()\n            throws Exception\n    {\n        cluster = new ServerCluster( testName.getMethodName(), dir, zk, SERVER_PORTS );\n        URI base = cluster.getRandomServerUri();\n        put( property( node( base, 0 ), \"message\" ), \"hello world\" );\n        cluster.updateAll();\n        cluster.kill( base );\n        base = cluster.getRandomServerUri();\n        assertEquals( \"hello world\", get( property( node( base, 0 ), \"message\" ) ) );\n    }","commit_id":"b0671988ae73677ce9ec2f8a3985ca3544794187","url":"https://github.com/neo4j/neo4j"},{"original_method":"@SuppressWarnings( \"unchecked\" )\n    private static Pair<String, File> config( TargetDirectory targetDir,\n            LocalhostZooKeeperCluster keeperCluster, int id, Pair<Integer, Integer> ports )\n    {\n        File serverDir = targetDir.directory( \"server-\" + ports.other(), true );\n        File serverConfig = new File( serverDir, \"server.cfg\" );\n        File dbConfig = new File( serverDir, \"neo4j.cfg\" );\n        File dbDir = new File( serverDir, \"graph-database\" );\n\n        // Server configuration\n        config( serverConfig,//\n                Pair.of( Configurator.DB_MODE_KEY, DatabaseMode.HA.name() ),//\n                Pair.of( Configurator.DATABASE_LOCATION_PROPERTY_KEY, dbDir.getAbsolutePath() ),//\n                Pair.of( Configurator.WEBSERVER_PORT_PROPERTY_KEY, ports.other().toString() ),//\n                Pair.of( Configurator.DB_TUNING_PROPERTY_FILE_KEY, dbConfig.getAbsolutePath() ) );\n\n        // Kernel (and HA) configuration\n        config( dbConfig, //\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_SERVER, \"localhost:\"\n                                                                            + ports.first() ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_MACHINE_ID,\n                        Integer.toString( id ) ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_ZOO_KEEPER_SERVERS,\n                        keeperCluster.getConnectionString() ) );\n\n        return Pair.of( serverConfig.getAbsolutePath(), serverDir );\n    }","id":105743,"modified_method":"@SuppressWarnings( \"unchecked\" )\n    private static Pair<String, File> config( String name, TargetDirectory targetDir,\n            LocalhostZooKeeperCluster keeperCluster, int id, Pair<Integer, Integer> ports )\n    {\n        File serverDir = targetDir.directory( \"server-\" + ports.other(), true );\n        File serverConfig = new File( serverDir, \"server.cfg\" );\n        File dbConfig = new File( serverDir, \"neo4j.cfg\" );\n        File dbDir = new File( serverDir, \"graph-database\" );\n\n        // Server configuration\n        config( serverConfig,//\n                Pair.of( Configurator.DB_MODE_KEY, DatabaseMode.HA.name() ),//\n                Pair.of( Configurator.DATABASE_LOCATION_PROPERTY_KEY, dbDir.getAbsolutePath() ),//\n                Pair.of( Configurator.WEBSERVER_PORT_PROPERTY_KEY, ports.other().toString() ),//\n                Pair.of( Configurator.DB_TUNING_PROPERTY_FILE_KEY, dbConfig.getAbsolutePath() ) );\n\n        // Kernel (and HA) configuration\n        config( dbConfig, //\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_CLUSTER_NAME, name ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_SERVER, \"localhost:\"\n                                                                            + ports.first() ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_MACHINE_ID,\n                        Integer.toString( id ) ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_ZOO_KEEPER_SERVERS,\n                        keeperCluster.getConnectionString() ) );\n\n        return Pair.of( serverConfig.getAbsolutePath(), serverDir );\n    }","commit_id":"b0671988ae73677ce9ec2f8a3985ca3544794187","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n        protected void startup( String configFilePath )\n        {\n            System.out.println( \"configFilePath=\" + configFilePath );\n            System.setProperty( Configurator.NEO_SERVER_CONFIG_FILE_KEY, configFilePath );\n            this.bootstrap = new BootStrapper();\n            this.startupStatus = this.bootstrap.start();\n        }","id":105744,"modified_method":"ServerProcess( String name )\n        {\n            this.name = name;\n        }","commit_id":"b0671988ae73677ce9ec2f8a3985ca3544794187","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public String toString()\n    {\n        StringBuilder result = new StringBuilder( \"ServerCluster[\" );\n        String prefix = \"\";\n        for ( Triplet<ServerManager, URI, File> server : servers )\n        {\n            if ( server == null )\n            {\n                result.append( \"--\" );\n            }\n            else\n            {\n                result.append( prefix ).append( server.second() );\n                if ( server.first().isMaster() ) result.append( \" is master\" );\n            }\n            prefix = \", \";\n        }\n        return result.append( \"]\" ).toString();\n    }","id":105745,"modified_method":"@Override\n    public String toString()\n    {\n        StringBuilder result = new StringBuilder( \"ServerCluster[\" );\n        String prefix = \"\";\n        for ( Triplet<ServerManager, URI, File> server : servers )\n        {\n            if ( server == null )\n            {\n                result.append( \"--\" );\n            }\n            else\n            {\n                result.append( prefix ).append( server.first() ).append( \": \" ).append(\n                        server.second() );\n                if ( server.first().isMaster() ) result.append( \" is master\" );\n            }\n            prefix = \", \";\n        }\n        return result.append( \"]\" ).toString();\n    }","commit_id":"b0671988ae73677ce9ec2f8a3985ca3544794187","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ServerCluster( TargetDirectory targetDir, LocalhostZooKeeperCluster keeperCluster,\n            Pair<Integer, Integer>... ports )\n    {\n        // @SuppressWarnings( { \"unchecked\", \"hiding\" } )\n        // Pair<ServerManager, File>[] servers = new Pair[ports.length];\n        this.servers = new Triplet[ports.length];\n        SubProcess<ServerManager, String> process = new ServerProcess();\n        try\n        {\n            for ( int i = 0; i < ports.length; i++ )\n            {\n                Pair<String, File> config = config( targetDir, keeperCluster, i, ports[i] );\n                servers[i] = awaitStartup( Pair.of( process.start( config.first() ), config.other() ) )[0];\n            }\n        }\n        catch ( Throwable e )\n        {\n            // shutdownAndCleanUp( servers );\n            for ( Pair<URI, File> UGLY_CODE_DUE_TO_ISSUES_IN_HA : shutdown(\n                    (Class<Pair<URI, File>>) (Class) Pair.class, servers ) )\n            {\n                if ( UGLY_CODE_DUE_TO_ISSUES_IN_HA != null )\n                    TargetDirectory.recursiveDelete( UGLY_CODE_DUE_TO_ISSUES_IN_HA.other() );\n            }\n            if ( e instanceof Error ) throw (Error) e;\n            if ( e instanceof RuntimeException ) throw (RuntimeException) e;\n            throw new RuntimeException( \"Cluster startup failed\", e );\n        }\n        // this.servers = awaitStartup( servers );\n        System.out.println( \"Started \" + this );\n    }","id":105746,"modified_method":"public ServerCluster( String testName, TargetDirectory targetDir,\n            LocalhostZooKeeperCluster keeperCluster, Pair<Integer, Integer>... ports )\n    {\n        // @SuppressWarnings( { \"unchecked\", \"hiding\" } )\n        // Pair<ServerManager, File>[] servers = new Pair[ports.length];\n        this.servers = new Triplet[ports.length];\n        SubProcess<ServerManager, String> process = new ServerProcess( testName );\n        try\n        {\n            for ( int i = 0; i < ports.length; i++ )\n            {\n                Pair<String, File> config = config( testName, targetDir, keeperCluster, i, ports[i] );\n                servers[i] = awaitStartup( Pair.of( process.start( config.first() ), config.other() ) )[0];\n            }\n        }\n        catch ( Throwable e )\n        {\n            // shutdownAndCleanUp( servers );\n            for ( Pair<URI, File> UGLY_CODE_DUE_TO_ISSUES_IN_HA : shutdown(\n                    (Class<Pair<URI, File>>) (Class) Pair.class, servers ) )\n            {\n                if ( UGLY_CODE_DUE_TO_ISSUES_IN_HA != null )\n                    TargetDirectory.recursiveDelete( UGLY_CODE_DUE_TO_ISSUES_IN_HA.other() );\n            }\n            if ( e instanceof Error ) throw (Error) e;\n            if ( e instanceof RuntimeException ) throw (RuntimeException) e;\n            throw new RuntimeException( \"Cluster startup failed\", e );\n        }\n        // this.servers = awaitStartup( servers );\n        System.out.println( \"Started \" + this );\n    }","commit_id":"b0671988ae73677ce9ec2f8a3985ca3544794187","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void canWriteToOneServerInTheClusterAndReadFromAnother() throws Exception\n    {\n        cluster = new ServerCluster( dir, zk, SERVER_PORTS );\n        URI base = cluster.getRandomServerUri();\n        put( property( node( base, 0 ), \"message\" ), \"hello world\" );\n        cluster.updateAll();\n        base = cluster.getRandomServerUri( base );\n        assertEquals( \"hello world\", get( property( node( base, 0 ), \"message\" ) ) );\n    }","id":105747,"modified_method":"@Test\n    public void canWriteToOneServerInTheClusterAndReadFromAnother() throws Exception\n    {\n        cluster = new ServerCluster( testName.getMethodName(), dir, zk, SERVER_PORTS );\n        URI base = cluster.getRandomServerUri();\n        put( property( node( base, 0 ), \"message\" ), \"hello world\" );\n        cluster.updateAll();\n        base = cluster.getRandomServerUri( base );\n        assertEquals( \"hello world\", get( property( node( base, 0 ), \"message\" ) ) );\n    }","commit_id":"c225a5073e7c64cee36097191eef8d6306c79337","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void canStartUpServerCluster() throws Exception\n    {\n        cluster = new ServerCluster( dir, zk, SERVER_PORTS );\n    }","id":105748,"modified_method":"@Test\n    public void canStartUpServerCluster() throws Exception\n    {\n        cluster = new ServerCluster( testName.getMethodName(), dir, zk, SERVER_PORTS );\n    }","commit_id":"c225a5073e7c64cee36097191eef8d6306c79337","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void canWriteToOneServerInTheClusterThenReadFromAnotherAfterShuttingDownTheWriteServer()\n            throws Exception\n    {\n        cluster = new ServerCluster( dir, zk, SERVER_PORTS );\n        URI base = cluster.getRandomServerUri();\n        put( property( node( base, 0 ), \"message\" ), \"hello world\" );\n        cluster.updateAll();\n        cluster.kill( base );\n        base = cluster.getRandomServerUri();\n        assertEquals( \"hello world\", get( property( node( base, 0 ), \"message\" ) ) );\n    }","id":105749,"modified_method":"@Test\n    public void canWriteToOneServerInTheClusterThenReadFromAnotherAfterShuttingDownTheWriteServer()\n            throws Exception\n    {\n        cluster = new ServerCluster( testName.getMethodName(), dir, zk, SERVER_PORTS );\n        URI base = cluster.getRandomServerUri();\n        put( property( node( base, 0 ), \"message\" ), \"hello world\" );\n        cluster.updateAll();\n        cluster.kill( base );\n        base = cluster.getRandomServerUri();\n        assertEquals( \"hello world\", get( property( node( base, 0 ), \"message\" ) ) );\n    }","commit_id":"c225a5073e7c64cee36097191eef8d6306c79337","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public String toString()\n    {\n        StringBuilder result = new StringBuilder( \"ServerCluster[\" );\n        String prefix = \"\";\n        for ( Triplet<ServerManager, URI, File> server : servers )\n        {\n            if ( server == null )\n            {\n                result.append( \"--\" );\n            }\n            else\n            {\n                result.append( prefix ).append( server.second() );\n                if ( server.first().isMaster() ) result.append( \" is master\" );\n            }\n            prefix = \", \";\n        }\n        return result.append( \"]\" ).toString();\n    }","id":105750,"modified_method":"@Override\n    public String toString()\n    {\n        StringBuilder result = new StringBuilder( \"ServerCluster[\" );\n        String prefix = \"\";\n        for ( Triplet<ServerManager, URI, File> server : servers )\n        {\n            if ( server == null )\n            {\n                result.append( \"--\" );\n            }\n            else\n            {\n                result.append( prefix ).append( server.first() ).append( \": \" ).append(\n                        server.second() );\n                if ( server.first().isMaster() ) result.append( \" is master\" );\n            }\n            prefix = \", \";\n        }\n        return result.append( \"]\" ).toString();\n    }","commit_id":"c225a5073e7c64cee36097191eef8d6306c79337","url":"https://github.com/neo4j/neo4j"},{"original_method":"@SuppressWarnings( \"unchecked\" )\n    private static Pair<String, File> config( TargetDirectory targetDir,\n            LocalhostZooKeeperCluster keeperCluster, int id, Pair<Integer, Integer> ports )\n    {\n        File serverDir = targetDir.directory( \"server-\" + ports.other(), true );\n        File serverConfig = new File( serverDir, \"server.cfg\" );\n        File dbConfig = new File( serverDir, \"neo4j.cfg\" );\n        File dbDir = new File( serverDir, \"graph-database\" );\n\n        // Server configuration\n        config( serverConfig,//\n                Pair.of( Configurator.DB_MODE_KEY, DatabaseMode.HA.name() ),//\n                Pair.of( Configurator.DATABASE_LOCATION_PROPERTY_KEY, dbDir.getAbsolutePath() ),//\n                Pair.of( Configurator.WEBSERVER_PORT_PROPERTY_KEY, ports.other().toString() ),//\n                Pair.of( Configurator.DB_TUNING_PROPERTY_FILE_KEY, dbConfig.getAbsolutePath() ) );\n\n        // Kernel (and HA) configuration\n        config( dbConfig, //\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_SERVER, \"localhost:\"\n                                                                            + ports.first() ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_MACHINE_ID,\n                        Integer.toString( id ) ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_ZOO_KEEPER_SERVERS,\n                        keeperCluster.getConnectionString() ) );\n\n        return Pair.of( serverConfig.getAbsolutePath(), serverDir );\n    }","id":105751,"modified_method":"@SuppressWarnings( \"unchecked\" )\n    private static Pair<String, File> config( String name, TargetDirectory targetDir,\n            LocalhostZooKeeperCluster keeperCluster, int id, Pair<Integer, Integer> ports )\n    {\n        File serverDir = targetDir.directory( \"server-\" + ports.other(), true );\n        File serverConfig = new File( serverDir, \"server.cfg\" );\n        File dbConfig = new File( serverDir, \"neo4j.cfg\" );\n        File dbDir = new File( serverDir, \"graph-database\" );\n\n        // Server configuration\n        config( serverConfig,//\n                Pair.of( Configurator.DB_MODE_KEY, DatabaseMode.HA.name() ),//\n                Pair.of( Configurator.DATABASE_LOCATION_PROPERTY_KEY, dbDir.getAbsolutePath() ),//\n                Pair.of( Configurator.WEBSERVER_PORT_PROPERTY_KEY, ports.other().toString() ),//\n                Pair.of( Configurator.DB_TUNING_PROPERTY_FILE_KEY, dbConfig.getAbsolutePath() ) );\n\n        // Kernel (and HA) configuration\n        config( dbConfig, //\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_CLUSTER_NAME, name ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_SERVER, \"localhost:\"\n                                                                            + ports.first() ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_MACHINE_ID,\n                        Integer.toString( id ) ),//\n                Pair.of( HighlyAvailableGraphDatabase.CONFIG_KEY_HA_ZOO_KEEPER_SERVERS,\n                        keeperCluster.getConnectionString() ) );\n\n        return Pair.of( serverConfig.getAbsolutePath(), serverDir );\n    }","commit_id":"c225a5073e7c64cee36097191eef8d6306c79337","url":"https://github.com/neo4j/neo4j"},{"original_method":"public ServerCluster( TargetDirectory targetDir, LocalhostZooKeeperCluster keeperCluster,\n            Pair<Integer, Integer>... ports )\n    {\n        // @SuppressWarnings( { \"unchecked\", \"hiding\" } )\n        // Pair<ServerManager, File>[] servers = new Pair[ports.length];\n        this.servers = new Triplet[ports.length];\n        SubProcess<ServerManager, String> process = new ServerProcess();\n        try\n        {\n            for ( int i = 0; i < ports.length; i++ )\n            {\n                Pair<String, File> config = config( targetDir, keeperCluster, i, ports[i] );\n                servers[i] = awaitStartup( Pair.of( process.start( config.first() ), config.other() ) )[0];\n            }\n        }\n        catch ( Throwable e )\n        {\n            // shutdownAndCleanUp( servers );\n            for ( Pair<URI, File> UGLY_CODE_DUE_TO_ISSUES_IN_HA : shutdown(\n                    (Class<Pair<URI, File>>) (Class) Pair.class, servers ) )\n            {\n                if ( UGLY_CODE_DUE_TO_ISSUES_IN_HA != null )\n                    TargetDirectory.recursiveDelete( UGLY_CODE_DUE_TO_ISSUES_IN_HA.other() );\n            }\n            if ( e instanceof Error ) throw (Error) e;\n            if ( e instanceof RuntimeException ) throw (RuntimeException) e;\n            throw new RuntimeException( \"Cluster startup failed\", e );\n        }\n        // this.servers = awaitStartup( servers );\n        System.out.println( \"Started \" + this );\n    }","id":105752,"modified_method":"public ServerCluster( String testName, TargetDirectory targetDir,\n            LocalhostZooKeeperCluster keeperCluster, Pair<Integer, Integer>... ports )\n    {\n        // @SuppressWarnings( { \"unchecked\", \"hiding\" } )\n        // Pair<ServerManager, File>[] servers = new Pair[ports.length];\n        this.servers = new Triplet[ports.length];\n        SubProcess<ServerManager, String> process = new ServerProcess( testName );\n        try\n        {\n            for ( int i = 0; i < ports.length; i++ )\n            {\n                Pair<String, File> config = config( testName, targetDir, keeperCluster, i, ports[i] );\n                servers[i] = awaitStartup( Pair.of( process.start( config.first() ), config.other() ) )[0];\n            }\n        }\n        catch ( Throwable e )\n        {\n            // shutdownAndCleanUp( servers );\n            for ( Pair<URI, File> UGLY_CODE_DUE_TO_ISSUES_IN_HA : shutdown(\n                    (Class<Pair<URI, File>>) (Class) Pair.class, servers ) )\n            {\n                if ( UGLY_CODE_DUE_TO_ISSUES_IN_HA != null )\n                    TargetDirectory.recursiveDelete( UGLY_CODE_DUE_TO_ISSUES_IN_HA.other() );\n            }\n            if ( e instanceof Error ) throw (Error) e;\n            if ( e instanceof RuntimeException ) throw (RuntimeException) e;\n            throw new RuntimeException( \"Cluster startup failed\", e );\n        }\n        // this.servers = awaitStartup( servers );\n        System.out.println( \"Started \" + this );\n    }","commit_id":"c225a5073e7c64cee36097191eef8d6306c79337","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n        protected void startup( String configFilePath )\n        {\n            System.out.println( \"configFilePath=\" + configFilePath );\n            System.setProperty( Configurator.NEO_SERVER_CONFIG_FILE_KEY, configFilePath );\n            this.bootstrap = new BootStrapper();\n            this.startupStatus = this.bootstrap.start();\n        }","id":105753,"modified_method":"ServerProcess( String name )\n        {\n            this.name = name;\n        }","commit_id":"c225a5073e7c64cee36097191eef8d6306c79337","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n  public RequestStatus updateResources(Request request, Predicate predicate)\n    throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {\n\n    final Set<Map<String, Object>> propertyMaps = request.getProperties();\n\n    modifyResources(new Command<Void>() {\n      @Override\n      public Void invoke() throws AmbariException {\n        for (Map<String, Object> propertyMap : propertyMaps) {\n          final Long layoutId;\n          try {\n            layoutId = Long.parseLong(propertyMap.get(WIDGETLAYOUT_ID_PROPERTY_ID).toString());\n          } catch (Exception ex) {\n            throw new AmbariException(\"WidgetLayout should have numerical id\");\n          }\n          final WidgetLayoutEntity entity = widgetLayoutDAO.findById(layoutId);\n          if (entity == null) {\n            throw new ObjectNotFoundException(\"There is no widget layout with id \" + layoutId);\n          }\n          if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID)))) {\n            entity.setLayoutName(propertyMap.get(WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID).toString());\n          }\n          if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(WIDGETLAYOUT_SECTION_NAME_PROPERTY_ID)))) {\n            entity.setSectionName(propertyMap.get(WIDGETLAYOUT_SECTION_NAME_PROPERTY_ID).toString());\n          }\n          if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(WIDGETLAYOUT_DISPLAY_NAME_PROPERTY_ID)))) {\n            entity.setDisplayName(propertyMap.get(WIDGETLAYOUT_DISPLAY_NAME_PROPERTY_ID).toString());\n          }\n          if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(WIDGETLAYOUT_SCOPE_PROPERTY_ID)))) {\n            entity.setScope(propertyMap.get(WIDGETLAYOUT_SCOPE_PROPERTY_ID).toString());\n          }\n\n          Set widgetsSet = (LinkedHashSet) propertyMap.get(WIDGETLAYOUT_WIDGETS_PROPERTY_ID);\n\n          List<WidgetLayoutUserWidgetEntity> widgetLayoutUserWidgetEntityList = new LinkedList<WidgetLayoutUserWidgetEntity>();\n          int order=0;\n          for (Object widgetObject : widgetsSet) {\n            HashMap<String, Object> widget = (HashMap) widgetObject;\n            long id = Integer.parseInt(widget.get(\"id\").toString());\n            WidgetEntity widgetEntity = widgetDAO.findById(id);\n            if (widgetEntity == null) {\n              throw new AmbariException(\"Widget with id \" + widget.get(\"id\").toString() + \" does not exists\");\n            }\n            WidgetLayoutUserWidgetEntity widgetLayoutUserWidgetEntity = new WidgetLayoutUserWidgetEntity();\n\n            widgetLayoutUserWidgetEntity.setWidget(widgetEntity);\n            widgetLayoutUserWidgetEntity.setWidgetOrder(order++);\n            widgetLayoutUserWidgetEntity.setWidgetLayout(entity);\n            widgetLayoutUserWidgetEntityList.add(widgetLayoutUserWidgetEntity);\n            widgetEntity.getListWidgetLayoutUserWidgetEntity().add(widgetLayoutUserWidgetEntity);\n          }\n\n          entity.setListWidgetLayoutUserWidgetEntity(widgetLayoutUserWidgetEntityList);\n\n          widgetLayoutDAO.merge(entity);\n        }\n        return null;\n      }\n    });\n\n    return getRequestStatus(null);\n  }","id":105754,"modified_method":"@Override\n  public RequestStatus updateResources(Request request, Predicate predicate)\n    throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {\n\n    final Set<Map<String, Object>> propertyMaps = request.getProperties();\n\n    modifyResources(new Command<Void>() {\n      @Override\n      public Void invoke() throws AmbariException {\n        for (Map<String, Object> propertyMap : propertyMaps) {\n          final Long layoutId;\n          try {\n            layoutId = Long.parseLong(propertyMap.get(WIDGETLAYOUT_ID_PROPERTY_ID).toString());\n          } catch (Exception ex) {\n            throw new AmbariException(\"WidgetLayout should have numerical id\");\n          }\n          final WidgetLayoutEntity entity = widgetLayoutDAO.findById(layoutId);\n          if (entity == null) {\n            throw new ObjectNotFoundException(\"There is no widget layout with id \" + layoutId);\n          }\n          if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID)))) {\n            entity.setLayoutName(propertyMap.get(WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID).toString());\n          }\n          if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(WIDGETLAYOUT_SECTION_NAME_PROPERTY_ID)))) {\n            entity.setSectionName(propertyMap.get(WIDGETLAYOUT_SECTION_NAME_PROPERTY_ID).toString());\n          }\n          if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(WIDGETLAYOUT_DISPLAY_NAME_PROPERTY_ID)))) {\n            entity.setDisplayName(propertyMap.get(WIDGETLAYOUT_DISPLAY_NAME_PROPERTY_ID).toString());\n          }\n          if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(WIDGETLAYOUT_SCOPE_PROPERTY_ID)))) {\n            entity.setScope(propertyMap.get(WIDGETLAYOUT_SCOPE_PROPERTY_ID).toString());\n          }\n\n          Set widgetsSet = (LinkedHashSet) propertyMap.get(WIDGETLAYOUT_WIDGETS_PROPERTY_ID);\n\n          //Remove old relations from widget entities\n          for (WidgetLayoutUserWidgetEntity widgetLayoutUserWidgetEntity : entity.getListWidgetLayoutUserWidgetEntity()) {\n            widgetLayoutUserWidgetEntity.getWidget().getListWidgetLayoutUserWidgetEntity()\n                    .remove(widgetLayoutUserWidgetEntity);\n            widgetDAO.merge(widgetLayoutUserWidgetEntity.getWidget());\n          }\n          entity.setListWidgetLayoutUserWidgetEntity(new LinkedList<WidgetLayoutUserWidgetEntity>());\n          widgetLayoutDAO.merge(entity);\n\n          List<WidgetLayoutUserWidgetEntity> widgetLayoutUserWidgetEntityList = new LinkedList<WidgetLayoutUserWidgetEntity>();\n          int order=0;\n          for (Object widgetObject : widgetsSet) {\n            HashMap<String, Object> widget = (HashMap) widgetObject;\n            long id = Integer.parseInt(widget.get(\"id\").toString());\n            WidgetEntity widgetEntity = widgetDAO.findById(id);\n            if (widgetEntity == null) {\n              throw new AmbariException(\"Widget with id \" + widget.get(\"id\").toString() + \" does not exists\");\n            }\n            WidgetLayoutUserWidgetEntity widgetLayoutUserWidgetEntity = new WidgetLayoutUserWidgetEntity();\n\n            widgetLayoutUserWidgetEntity.setWidget(widgetEntity);\n            widgetLayoutUserWidgetEntity.setWidgetOrder(order++);\n            widgetLayoutUserWidgetEntity.setWidgetLayout(entity);\n            widgetLayoutUserWidgetEntityList.add(widgetLayoutUserWidgetEntity);\n            widgetEntity.getListWidgetLayoutUserWidgetEntity().add(widgetLayoutUserWidgetEntity);\n          }\n\n          entity.setListWidgetLayoutUserWidgetEntity(widgetLayoutUserWidgetEntityList);\n\n          widgetLayoutDAO.merge(entity);\n        }\n        return null;\n      }\n    });\n\n    return getRequestStatus(null);\n  }","commit_id":"501afc0f58c65eaeccf6c388ae6100c2c3d31048","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * @throws Exception\n   */\n  @Test\n  public void testUpdateResources() throws Exception {\n    AmbariManagementController amc = createMock(AmbariManagementController.class);\n    Clusters clusters = createMock(Clusters.class);\n    Cluster cluster = createMock(Cluster.class);\n    expect(amc.getClusters()).andReturn(clusters).atLeastOnce();\n    expect(clusters.getCluster((String) anyObject())).andReturn(cluster).atLeastOnce();\n    expect(cluster.getClusterId()).andReturn(Long.valueOf(1)).atLeastOnce();\n\n    Capture<WidgetLayoutEntity> entityCapture = new Capture<WidgetLayoutEntity>();\n    dao.create(capture(entityCapture));\n    expectLastCall();\n\n    replay(amc, clusters, cluster, dao);\n\n    Map<String, Object> requestProps = new HashMap<String, Object>();\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID, \"layout_name\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_DISPLAY_NAME_PROPERTY_ID, \"display_name\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_SECTION_NAME_PROPERTY_ID, \"section_name\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_USERNAME_PROPERTY_ID, \"admin\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_SCOPE_PROPERTY_ID, \"CLUSTER\");\n    Set widgetsInfo = new LinkedHashSet();\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_WIDGETS_PROPERTY_ID, widgetsInfo);\n\n    Request request = PropertyHelper.getCreateRequest(\n        Collections.singleton(requestProps), null);\n\n    WidgetLayoutResourceProvider provider = createProvider(amc);\n\n    provider.createResources(request);\n\n    Assert.assertTrue(entityCapture.hasCaptured());\n    WidgetLayoutEntity entity = entityCapture.getValue();\n    Assert.assertNotNull(entity);\n\n    Predicate predicate = new PredicateBuilder().property(\n            WidgetLayoutResourceProvider.WIDGETLAYOUT_CLUSTER_NAME_PROPERTY_ID).equals(\"c1\")\n            .and().property(WidgetLayoutResourceProvider.WIDGETLAYOUT_ID_PROPERTY_ID).equals(\"1\")\n            .and().property(WidgetLayoutResourceProvider.WIDGETLAYOUT_USERNAME_PROPERTY_ID).equals(\"username\").toPredicate();\n\n    // everything is mocked, there is no DB\n    entity.setId(Long.valueOf(1));\n\n    String oldLayoutName = entity.getLayoutName();\n    String oldScope = entity.getScope();\n\n    resetToStrict(dao);\n    expect(dao.findById(1L)).andReturn(entity).anyTimes();\n    expect(dao.merge((WidgetLayoutEntity) anyObject())).andReturn(entity).anyTimes();\n    replay(dao);\n\n    requestProps = new HashMap<String, Object>();\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID, \"layout_name_new\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_SCOPE_PROPERTY_ID, \"USER\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_ID_PROPERTY_ID, \"1\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_WIDGETS_PROPERTY_ID, widgetsInfo);\n\n    request = PropertyHelper.getUpdateRequest(requestProps, null);\n\n    provider.updateResources(request, predicate);\n\n    Assert.assertFalse(oldLayoutName.equals(entity.getLayoutName()));\n    Assert.assertFalse(oldScope.equals(entity.getScope()));\n\n    verify(amc, clusters, cluster, dao);\n  }","id":105755,"modified_method":"/**\n   * @throws Exception\n   */\n  @Test\n  public void testUpdateResources() throws Exception {\n    AmbariManagementController amc = createMock(AmbariManagementController.class);\n    Clusters clusters = createMock(Clusters.class);\n    Cluster cluster = createMock(Cluster.class);\n    expect(amc.getClusters()).andReturn(clusters).atLeastOnce();\n    expect(clusters.getCluster((String) anyObject())).andReturn(cluster).atLeastOnce();\n    expect(cluster.getClusterId()).andReturn(Long.valueOf(1)).atLeastOnce();\n\n    Capture<WidgetLayoutEntity> entityCapture = new Capture<WidgetLayoutEntity>();\n    dao.create(capture(entityCapture));\n    expectLastCall();\n\n    WidgetEntity widgetEntity = new WidgetEntity();\n    widgetEntity.setId(1L);\n    widgetEntity.setListWidgetLayoutUserWidgetEntity(new ArrayList<WidgetLayoutUserWidgetEntity>());\n    WidgetEntity widgetEntity2 = new WidgetEntity();\n    widgetEntity2.setId(2L);\n    widgetEntity2.setListWidgetLayoutUserWidgetEntity(new ArrayList<WidgetLayoutUserWidgetEntity>());\n    expect(widgetDAO.findById(1L)).andReturn(widgetEntity).atLeastOnce();\n\n    replay(amc, clusters, cluster, dao, widgetDAO);\n\n    Map<String, Object> requestProps = new HashMap<String, Object>();\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID, \"layout_name\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_DISPLAY_NAME_PROPERTY_ID, \"display_name\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_SECTION_NAME_PROPERTY_ID, \"section_name\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_USERNAME_PROPERTY_ID, \"admin\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_SCOPE_PROPERTY_ID, \"CLUSTER\");\n    Set widgetsInfo = new LinkedHashSet();\n    Map<String, String> widget = new HashMap<String, String>();\n    widget.put(\"id\",\"1\");\n    widgetsInfo.add(widget);\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_WIDGETS_PROPERTY_ID, widgetsInfo);\n\n    Request request = PropertyHelper.getCreateRequest(\n        Collections.singleton(requestProps), null);\n\n    WidgetLayoutResourceProvider provider = createProvider(amc);\n\n    provider.createResources(request);\n\n    Assert.assertTrue(entityCapture.hasCaptured());\n    WidgetLayoutEntity entity = entityCapture.getValue();\n    Assert.assertNotNull(entity);\n\n    Predicate predicate = new PredicateBuilder().property(\n            WidgetLayoutResourceProvider.WIDGETLAYOUT_CLUSTER_NAME_PROPERTY_ID).equals(\"c1\")\n            .and().property(WidgetLayoutResourceProvider.WIDGETLAYOUT_ID_PROPERTY_ID).equals(\"1\")\n            .and().property(WidgetLayoutResourceProvider.WIDGETLAYOUT_USERNAME_PROPERTY_ID).equals(\"username\").toPredicate();\n\n    // everything is mocked, there is no DB\n    entity.setId(Long.valueOf(1));\n\n    String oldLayoutName = entity.getLayoutName();\n    String oldScope = entity.getScope();\n\n    resetToStrict(dao, widgetDAO);\n    expect(dao.findById(1L)).andReturn(entity).anyTimes();\n    expect(dao.merge((WidgetLayoutEntity) anyObject())).andReturn(entity).anyTimes();\n    expect(widgetDAO.merge(widgetEntity)).andReturn(widgetEntity).anyTimes();\n    expect(widgetDAO.findById(2L)).andReturn(widgetEntity2).anyTimes();\n    replay(dao, widgetDAO);\n\n    requestProps = new HashMap<String, Object>();\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID, \"layout_name_new\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_SCOPE_PROPERTY_ID, \"USER\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_ID_PROPERTY_ID, \"1\");\n    widget.put(\"id\",\"2\");\n    widgetsInfo.add(widget);\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_WIDGETS_PROPERTY_ID, widgetsInfo);\n\n    request = PropertyHelper.getUpdateRequest(requestProps, null);\n\n    provider.updateResources(request, predicate);\n\n    Assert.assertFalse(oldLayoutName.equals(entity.getLayoutName()));\n    Assert.assertFalse(oldScope.equals(entity.getScope()));\n\n    verify(amc, clusters, cluster, dao, widgetDAO);\n  }","commit_id":"501afc0f58c65eaeccf6c388ae6100c2c3d31048","url":"https://github.com/apache/ambari"},{"original_method":"@Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    WidgetLayoutUserWidgetEntity that = (WidgetLayoutUserWidgetEntity) o;\n\n    if (widgetLayout.getId() != that.widgetLayout.getId()) return false;\n    if (widget.getId() != that.widget.getId()) return false;\n\n    return true;\n  }","id":105756,"modified_method":"@Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    WidgetLayoutUserWidgetEntity that = (WidgetLayoutUserWidgetEntity) o;\n\n    return (widgetLayout.equals(that.widgetLayout) && widget.equals(that.widget));\n  }","commit_id":"501afc0f58c65eaeccf6c388ae6100c2c3d31048","url":"https://github.com/apache/ambari"},{"original_method":"private void createRecords() {\n    for (int i=0; i<3; i++) {\n      WidgetEntity widgetEntity = new WidgetEntity();\n      widgetEntity.setAuthor(\"author\");\n      widgetEntity.setDefaultSectionName(\"section_name\");\n      widgetEntity.setClusterId(clusterId);\n      widgetEntity.setMetrics(\"metrics\");\n      widgetEntity.setDescription(\"description\");\n      widgetEntity.setProperties(\"{\\\"warning_threshold\\\": 0.5,\\\"error_threshold\\\": 0.7 }\");\n      widgetEntity.setScope(\"CLUSTER\");\n      widgetEntity.setWidgetName(\"widget\" + i);\n      widgetEntity.setWidgetType(\"GAUGE\");\n      widgetEntity.setWidgetValues(\"${`jvmMemoryHeapUsed + jvmMemoryHeapMax`}\");\n      final WidgetLayoutEntity widgetLayoutEntity = new WidgetLayoutEntity();\n      widgetLayoutEntity.setClusterId(clusterId);\n      widgetLayoutEntity.setLayoutName(\"layout name\" + i);\n      widgetLayoutEntity.setSectionName(\"section\" + i%2);\n      widgetLayoutEntity.setDisplayName(\"display_name\");\n      widgetLayoutEntity.setUserName(\"user_name\");\n      widgetLayoutEntity.setScope(\"CLUSTER\");\n      final WidgetLayoutUserWidgetEntity widgetLayoutUserWidget = new WidgetLayoutUserWidgetEntity();\n      widgetLayoutUserWidget.setWidget(widgetEntity);\n      widgetLayoutUserWidget.setWidgetLayout(widgetLayoutEntity);\n      widgetLayoutUserWidget.setWidgetOrder(0);\n\n      widgetDAO.create(widgetEntity);\n      List<WidgetLayoutUserWidgetEntity> widgetLayoutUserWidgetEntityList = new LinkedList<WidgetLayoutUserWidgetEntity>();\n      widgetLayoutUserWidgetEntityList.add(widgetLayoutUserWidget);\n\n      widgetLayoutEntity.setListWidgetLayoutUserWidgetEntity(widgetLayoutUserWidgetEntityList);\n      widgetLayoutDAO.create(widgetLayoutEntity);\n    }\n  }","id":105757,"modified_method":"private void createRecords() {\n    for (int i=0; i<3; i++) {\n      WidgetEntity widgetEntity = new WidgetEntity();\n      widgetEntity.setAuthor(\"author\");\n      widgetEntity.setDefaultSectionName(\"section_name\");\n      widgetEntity.setClusterId(clusterId);\n      widgetEntity.setMetrics(\"metrics\");\n      widgetEntity.setDescription(\"description\");\n      widgetEntity.setProperties(\"{\\\"warning_threshold\\\": 0.5,\\\"error_threshold\\\": 0.7 }\");\n      widgetEntity.setScope(\"CLUSTER\");\n      widgetEntity.setWidgetName(\"widget\" + i);\n      widgetEntity.setWidgetType(\"GAUGE\");\n      widgetEntity.setWidgetValues(\"${`jvmMemoryHeapUsed + jvmMemoryHeapMax`}\");\n      widgetEntity.setListWidgetLayoutUserWidgetEntity(new LinkedList<WidgetLayoutUserWidgetEntity>());\n      final WidgetLayoutEntity widgetLayoutEntity = new WidgetLayoutEntity();\n      widgetLayoutEntity.setClusterId(clusterId);\n      widgetLayoutEntity.setLayoutName(\"layout name\" + i);\n      widgetLayoutEntity.setSectionName(\"section\" + i%2);\n      widgetLayoutEntity.setDisplayName(\"display_name\");\n      widgetLayoutEntity.setUserName(\"user_name\");\n      widgetLayoutEntity.setScope(\"CLUSTER\");\n      final WidgetLayoutUserWidgetEntity widgetLayoutUserWidget = new WidgetLayoutUserWidgetEntity();\n      widgetLayoutUserWidget.setWidget(widgetEntity);\n      widgetLayoutUserWidget.setWidgetLayout(widgetLayoutEntity);\n      widgetLayoutUserWidget.setWidgetOrder(0);\n\n      widgetEntity.getListWidgetLayoutUserWidgetEntity().add(widgetLayoutUserWidget);\n      List<WidgetLayoutUserWidgetEntity> widgetLayoutUserWidgetEntityList = new LinkedList<WidgetLayoutUserWidgetEntity>();\n      widgetLayoutUserWidgetEntityList.add(widgetLayoutUserWidget);\n\n      widgetLayoutEntity.setListWidgetLayoutUserWidgetEntity(widgetLayoutUserWidgetEntityList);\n      widgetLayoutDAO.create(widgetLayoutEntity);\n    }\n  }","commit_id":"eef00a9ec7d9561eeac087d743a852e3d34d67ba","url":"https://github.com/apache/ambari"},{"original_method":"private void createRecords() {\n\n    WidgetLayoutEntity widgetLayoutEntity = new WidgetLayoutEntity();\n    widgetLayoutEntity.setClusterId(clusterId);\n    widgetLayoutEntity.setLayoutName(\"layout name0\");\n    widgetLayoutEntity.setSectionName(\"section0\");\n    widgetLayoutEntity.setUserName(\"username\");\n    widgetLayoutEntity.setScope(\"CLUSTER\");\n    widgetLayoutEntity.setDisplayName(\"displ_name\");\n\n    WidgetLayoutEntity widgetLayoutEntity2 = new WidgetLayoutEntity();\n    widgetLayoutEntity2.setClusterId(clusterId);\n    widgetLayoutEntity2.setLayoutName(\"layout name1\");\n    widgetLayoutEntity2.setSectionName(\"section1\");\n    widgetLayoutEntity2.setUserName(\"username\");\n    widgetLayoutEntity2.setScope(\"CLUSTER\");\n    widgetLayoutEntity2.setDisplayName(\"displ_name2\");\n\n    List<WidgetLayoutUserWidgetEntity> widgetLayoutUserWidgetEntityList = new LinkedList<WidgetLayoutUserWidgetEntity>();\n\n    for (int i=0; i<3; i++) {\n      WidgetEntity widgetEntity = new WidgetEntity();\n      widgetEntity.setDefaultSectionName(\"display name\" + i);\n      widgetEntity.setAuthor(\"author\");\n      widgetEntity.setClusterId(clusterId);\n      widgetEntity.setMetrics(\"metrics\");\n      widgetEntity.setDescription(\"description\");\n      widgetEntity.setProperties(\"{\\\"warning_threshold\\\": 0.5,\\\"error_threshold\\\": 0.7 }\");\n      widgetEntity.setScope(\"CLUSTER\");\n      widgetEntity.setWidgetName(\"widget\" + i);\n      widgetEntity.setWidgetType(\"GAUGE\");\n      widgetEntity.setWidgetValues(\"${`jvmMemoryHeapUsed + jvmMemoryHeapMax`}\");\n\n      widgetDAO.create(widgetEntity);\n\n      WidgetLayoutUserWidgetEntity widgetLayoutUserWidget = new WidgetLayoutUserWidgetEntity();\n      widgetLayoutUserWidget.setWidget(widgetEntity);\n      widgetLayoutUserWidget.setWidgetLayout(widgetLayoutEntity);\n      widgetLayoutUserWidget.setWidgetOrder(0);\n      widgetLayoutUserWidgetEntityList.add(widgetLayoutUserWidget);\n    }\n\n    widgetLayoutEntity.setListWidgetLayoutUserWidgetEntity(widgetLayoutUserWidgetEntityList);\n    widgetLayoutDAO.create(widgetLayoutEntity);\n    widgetLayoutDAO.create(widgetLayoutEntity2);\n\n  }","id":105758,"modified_method":"private void createRecords() {\n\n    WidgetLayoutEntity widgetLayoutEntity = new WidgetLayoutEntity();\n    widgetLayoutEntity.setClusterId(clusterId);\n    widgetLayoutEntity.setLayoutName(\"layout name0\");\n    widgetLayoutEntity.setSectionName(\"section0\");\n    widgetLayoutEntity.setUserName(\"username\");\n    widgetLayoutEntity.setScope(\"CLUSTER\");\n    widgetLayoutEntity.setDisplayName(\"displ_name\");\n\n    WidgetLayoutEntity widgetLayoutEntity2 = new WidgetLayoutEntity();\n    widgetLayoutEntity2.setClusterId(clusterId);\n    widgetLayoutEntity2.setLayoutName(\"layout name1\");\n    widgetLayoutEntity2.setSectionName(\"section1\");\n    widgetLayoutEntity2.setUserName(\"username\");\n    widgetLayoutEntity2.setScope(\"CLUSTER\");\n    widgetLayoutEntity2.setDisplayName(\"displ_name2\");\n\n    List<WidgetLayoutUserWidgetEntity> widgetLayoutUserWidgetEntityList = new LinkedList<WidgetLayoutUserWidgetEntity>();\n\n    for (int i=0; i<3; i++) {\n      WidgetEntity widgetEntity = new WidgetEntity();\n      widgetEntity.setDefaultSectionName(\"display name\" + i);\n      widgetEntity.setAuthor(\"author\");\n      widgetEntity.setClusterId(clusterId);\n      widgetEntity.setMetrics(\"metrics\");\n      widgetEntity.setDescription(\"description\");\n      widgetEntity.setProperties(\"{\\\"warning_threshold\\\": 0.5,\\\"error_threshold\\\": 0.7 }\");\n      widgetEntity.setScope(\"CLUSTER\");\n      widgetEntity.setWidgetName(\"widget\" + i);\n      widgetEntity.setWidgetType(\"GAUGE\");\n      widgetEntity.setWidgetValues(\"${`jvmMemoryHeapUsed + jvmMemoryHeapMax`}\");\n\n      WidgetLayoutUserWidgetEntity widgetLayoutUserWidget = new WidgetLayoutUserWidgetEntity();\n      widgetLayoutUserWidget.setWidget(widgetEntity);\n      widgetLayoutUserWidget.setWidgetLayout(widgetLayoutEntity);\n      widgetLayoutUserWidget.setWidgetOrder(0);\n      widgetLayoutUserWidgetEntityList.add(widgetLayoutUserWidget);\n    }\n\n    widgetLayoutEntity.setListWidgetLayoutUserWidgetEntity(widgetLayoutUserWidgetEntityList);\n    widgetLayoutDAO.create(widgetLayoutEntity);\n    widgetLayoutDAO.create(widgetLayoutEntity2);\n\n  }","commit_id":"eef00a9ec7d9561eeac087d743a852e3d34d67ba","url":"https://github.com/apache/ambari"},{"original_method":"@Override\n  public RequestStatus updateResources(Request request, Predicate predicate)\n    throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {\n\n    final Set<Map<String, Object>> propertyMaps = request.getProperties();\n\n    modifyResources(new Command<Void>() {\n      @Override\n      public Void invoke() throws AmbariException {\n        for (Map<String, Object> propertyMap : propertyMaps) {\n          final Long layoutId;\n          try {\n            layoutId = Long.parseLong(propertyMap.get(WIDGETLAYOUT_ID_PROPERTY_ID).toString());\n          } catch (Exception ex) {\n            throw new AmbariException(\"WidgetLayout should have numerical id\");\n          }\n          final WidgetLayoutEntity entity = widgetLayoutDAO.findById(layoutId);\n          if (entity == null) {\n            throw new ObjectNotFoundException(\"There is no widget layout with id \" + layoutId);\n          }\n          if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID)))) {\n            entity.setLayoutName(propertyMap.get(WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID).toString());\n          }\n          if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(WIDGETLAYOUT_SECTION_NAME_PROPERTY_ID)))) {\n            entity.setSectionName(propertyMap.get(WIDGETLAYOUT_SECTION_NAME_PROPERTY_ID).toString());\n          }\n          if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(WIDGETLAYOUT_DISPLAY_NAME_PROPERTY_ID)))) {\n            entity.setDisplayName(propertyMap.get(WIDGETLAYOUT_DISPLAY_NAME_PROPERTY_ID).toString());\n          }\n          if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(WIDGETLAYOUT_SCOPE_PROPERTY_ID)))) {\n            entity.setScope(propertyMap.get(WIDGETLAYOUT_SCOPE_PROPERTY_ID).toString());\n          }\n\n          Set widgetsSet = (LinkedHashSet) propertyMap.get(WIDGETLAYOUT_WIDGETS_PROPERTY_ID);\n\n          List<WidgetLayoutUserWidgetEntity> widgetLayoutUserWidgetEntityList = new LinkedList<WidgetLayoutUserWidgetEntity>();\n          int order=0;\n          for (Object widgetObject : widgetsSet) {\n            HashMap<String, Object> widget = (HashMap) widgetObject;\n            long id = Integer.parseInt(widget.get(\"id\").toString());\n            WidgetEntity widgetEntity = widgetDAO.findById(id);\n            if (widgetEntity == null) {\n              throw new AmbariException(\"Widget with id \" + widget.get(\"id\").toString() + \" does not exists\");\n            }\n            WidgetLayoutUserWidgetEntity widgetLayoutUserWidgetEntity = new WidgetLayoutUserWidgetEntity();\n\n            widgetLayoutUserWidgetEntity.setWidget(widgetEntity);\n            widgetLayoutUserWidgetEntity.setWidgetOrder(order++);\n            widgetLayoutUserWidgetEntity.setWidgetLayout(entity);\n            widgetLayoutUserWidgetEntityList.add(widgetLayoutUserWidgetEntity);\n            widgetEntity.getListWidgetLayoutUserWidgetEntity().add(widgetLayoutUserWidgetEntity);\n          }\n\n          entity.setListWidgetLayoutUserWidgetEntity(widgetLayoutUserWidgetEntityList);\n\n          widgetLayoutDAO.merge(entity);\n        }\n        return null;\n      }\n    });\n\n    return getRequestStatus(null);\n  }","id":105759,"modified_method":"@Override\n  public RequestStatus updateResources(Request request, Predicate predicate)\n    throws SystemException, UnsupportedPropertyException, NoSuchResourceException, NoSuchParentResourceException {\n\n    final Set<Map<String, Object>> propertyMaps = request.getProperties();\n\n    modifyResources(new Command<Void>() {\n      @Override\n      public Void invoke() throws AmbariException {\n        for (Map<String, Object> propertyMap : propertyMaps) {\n          final Long layoutId;\n          try {\n            layoutId = Long.parseLong(propertyMap.get(WIDGETLAYOUT_ID_PROPERTY_ID).toString());\n          } catch (Exception ex) {\n            throw new AmbariException(\"WidgetLayout should have numerical id\");\n          }\n          final WidgetLayoutEntity entity = widgetLayoutDAO.findById(layoutId);\n          if (entity == null) {\n            throw new ObjectNotFoundException(\"There is no widget layout with id \" + layoutId);\n          }\n          if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID)))) {\n            entity.setLayoutName(propertyMap.get(WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID).toString());\n          }\n          if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(WIDGETLAYOUT_SECTION_NAME_PROPERTY_ID)))) {\n            entity.setSectionName(propertyMap.get(WIDGETLAYOUT_SECTION_NAME_PROPERTY_ID).toString());\n          }\n          if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(WIDGETLAYOUT_DISPLAY_NAME_PROPERTY_ID)))) {\n            entity.setDisplayName(propertyMap.get(WIDGETLAYOUT_DISPLAY_NAME_PROPERTY_ID).toString());\n          }\n          if (StringUtils.isNotBlank(ObjectUtils.toString(propertyMap.get(WIDGETLAYOUT_SCOPE_PROPERTY_ID)))) {\n            entity.setScope(propertyMap.get(WIDGETLAYOUT_SCOPE_PROPERTY_ID).toString());\n          }\n\n          Set widgetsSet = (LinkedHashSet) propertyMap.get(WIDGETLAYOUT_WIDGETS_PROPERTY_ID);\n\n          //Remove old relations from widget entities\n          for (WidgetLayoutUserWidgetEntity widgetLayoutUserWidgetEntity : entity.getListWidgetLayoutUserWidgetEntity()) {\n            widgetLayoutUserWidgetEntity.getWidget().getListWidgetLayoutUserWidgetEntity()\n                    .remove(widgetLayoutUserWidgetEntity);\n            widgetDAO.merge(widgetLayoutUserWidgetEntity.getWidget());\n          }\n          entity.setListWidgetLayoutUserWidgetEntity(new LinkedList<WidgetLayoutUserWidgetEntity>());\n          widgetLayoutDAO.merge(entity);\n\n          List<WidgetLayoutUserWidgetEntity> widgetLayoutUserWidgetEntityList = new LinkedList<WidgetLayoutUserWidgetEntity>();\n          int order=0;\n          for (Object widgetObject : widgetsSet) {\n            HashMap<String, Object> widget = (HashMap) widgetObject;\n            long id = Integer.parseInt(widget.get(\"id\").toString());\n            WidgetEntity widgetEntity = widgetDAO.findById(id);\n            if (widgetEntity == null) {\n              throw new AmbariException(\"Widget with id \" + widget.get(\"id\").toString() + \" does not exists\");\n            }\n            WidgetLayoutUserWidgetEntity widgetLayoutUserWidgetEntity = new WidgetLayoutUserWidgetEntity();\n\n            widgetLayoutUserWidgetEntity.setWidget(widgetEntity);\n            widgetLayoutUserWidgetEntity.setWidgetOrder(order++);\n            widgetLayoutUserWidgetEntity.setWidgetLayout(entity);\n            widgetLayoutUserWidgetEntityList.add(widgetLayoutUserWidgetEntity);\n            widgetEntity.getListWidgetLayoutUserWidgetEntity().add(widgetLayoutUserWidgetEntity);\n          }\n\n          entity.setListWidgetLayoutUserWidgetEntity(widgetLayoutUserWidgetEntityList);\n\n          widgetLayoutDAO.merge(entity);\n        }\n        return null;\n      }\n    });\n\n    return getRequestStatus(null);\n  }","commit_id":"eef00a9ec7d9561eeac087d743a852e3d34d67ba","url":"https://github.com/apache/ambari"},{"original_method":"/**\n   * @throws Exception\n   */\n  @Test\n  public void testUpdateResources() throws Exception {\n    AmbariManagementController amc = createMock(AmbariManagementController.class);\n    Clusters clusters = createMock(Clusters.class);\n    Cluster cluster = createMock(Cluster.class);\n    expect(amc.getClusters()).andReturn(clusters).atLeastOnce();\n    expect(clusters.getCluster((String) anyObject())).andReturn(cluster).atLeastOnce();\n    expect(cluster.getClusterId()).andReturn(Long.valueOf(1)).atLeastOnce();\n\n    Capture<WidgetLayoutEntity> entityCapture = new Capture<WidgetLayoutEntity>();\n    dao.create(capture(entityCapture));\n    expectLastCall();\n\n    replay(amc, clusters, cluster, dao);\n\n    Map<String, Object> requestProps = new HashMap<String, Object>();\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID, \"layout_name\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_DISPLAY_NAME_PROPERTY_ID, \"display_name\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_SECTION_NAME_PROPERTY_ID, \"section_name\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_USERNAME_PROPERTY_ID, \"admin\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_SCOPE_PROPERTY_ID, \"CLUSTER\");\n    Set widgetsInfo = new LinkedHashSet();\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_WIDGETS_PROPERTY_ID, widgetsInfo);\n\n    Request request = PropertyHelper.getCreateRequest(\n        Collections.singleton(requestProps), null);\n\n    WidgetLayoutResourceProvider provider = createProvider(amc);\n\n    provider.createResources(request);\n\n    Assert.assertTrue(entityCapture.hasCaptured());\n    WidgetLayoutEntity entity = entityCapture.getValue();\n    Assert.assertNotNull(entity);\n\n    Predicate predicate = new PredicateBuilder().property(\n            WidgetLayoutResourceProvider.WIDGETLAYOUT_CLUSTER_NAME_PROPERTY_ID).equals(\"c1\")\n            .and().property(WidgetLayoutResourceProvider.WIDGETLAYOUT_ID_PROPERTY_ID).equals(\"1\")\n            .and().property(WidgetLayoutResourceProvider.WIDGETLAYOUT_USERNAME_PROPERTY_ID).equals(\"username\").toPredicate();\n\n    // everything is mocked, there is no DB\n    entity.setId(Long.valueOf(1));\n\n    String oldLayoutName = entity.getLayoutName();\n    String oldScope = entity.getScope();\n\n    resetToStrict(dao);\n    expect(dao.findById(1L)).andReturn(entity).anyTimes();\n    expect(dao.merge((WidgetLayoutEntity) anyObject())).andReturn(entity).anyTimes();\n    replay(dao);\n\n    requestProps = new HashMap<String, Object>();\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID, \"layout_name_new\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_SCOPE_PROPERTY_ID, \"USER\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_ID_PROPERTY_ID, \"1\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_WIDGETS_PROPERTY_ID, widgetsInfo);\n\n    request = PropertyHelper.getUpdateRequest(requestProps, null);\n\n    provider.updateResources(request, predicate);\n\n    Assert.assertFalse(oldLayoutName.equals(entity.getLayoutName()));\n    Assert.assertFalse(oldScope.equals(entity.getScope()));\n\n    verify(amc, clusters, cluster, dao);\n  }","id":105760,"modified_method":"/**\n   * @throws Exception\n   */\n  @Test\n  public void testUpdateResources() throws Exception {\n    AmbariManagementController amc = createMock(AmbariManagementController.class);\n    Clusters clusters = createMock(Clusters.class);\n    Cluster cluster = createMock(Cluster.class);\n    expect(amc.getClusters()).andReturn(clusters).atLeastOnce();\n    expect(clusters.getCluster((String) anyObject())).andReturn(cluster).atLeastOnce();\n    expect(cluster.getClusterId()).andReturn(Long.valueOf(1)).atLeastOnce();\n\n    Capture<WidgetLayoutEntity> entityCapture = new Capture<WidgetLayoutEntity>();\n    dao.create(capture(entityCapture));\n    expectLastCall();\n\n    WidgetEntity widgetEntity = new WidgetEntity();\n    widgetEntity.setId(1L);\n    widgetEntity.setListWidgetLayoutUserWidgetEntity(new ArrayList<WidgetLayoutUserWidgetEntity>());\n    WidgetEntity widgetEntity2 = new WidgetEntity();\n    widgetEntity2.setId(2L);\n    widgetEntity2.setListWidgetLayoutUserWidgetEntity(new ArrayList<WidgetLayoutUserWidgetEntity>());\n    expect(widgetDAO.findById(1L)).andReturn(widgetEntity).atLeastOnce();\n\n    replay(amc, clusters, cluster, dao, widgetDAO);\n\n    Map<String, Object> requestProps = new HashMap<String, Object>();\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_CLUSTER_NAME_PROPERTY_ID, \"c1\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID, \"layout_name\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_DISPLAY_NAME_PROPERTY_ID, \"display_name\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_SECTION_NAME_PROPERTY_ID, \"section_name\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_USERNAME_PROPERTY_ID, \"admin\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_SCOPE_PROPERTY_ID, \"CLUSTER\");\n    Set widgetsInfo = new LinkedHashSet();\n    Map<String, String> widget = new HashMap<String, String>();\n    widget.put(\"id\",\"1\");\n    widgetsInfo.add(widget);\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_WIDGETS_PROPERTY_ID, widgetsInfo);\n\n    Request request = PropertyHelper.getCreateRequest(\n        Collections.singleton(requestProps), null);\n\n    WidgetLayoutResourceProvider provider = createProvider(amc);\n\n    provider.createResources(request);\n\n    Assert.assertTrue(entityCapture.hasCaptured());\n    WidgetLayoutEntity entity = entityCapture.getValue();\n    Assert.assertNotNull(entity);\n\n    Predicate predicate = new PredicateBuilder().property(\n            WidgetLayoutResourceProvider.WIDGETLAYOUT_CLUSTER_NAME_PROPERTY_ID).equals(\"c1\")\n            .and().property(WidgetLayoutResourceProvider.WIDGETLAYOUT_ID_PROPERTY_ID).equals(\"1\")\n            .and().property(WidgetLayoutResourceProvider.WIDGETLAYOUT_USERNAME_PROPERTY_ID).equals(\"username\").toPredicate();\n\n    // everything is mocked, there is no DB\n    entity.setId(Long.valueOf(1));\n\n    String oldLayoutName = entity.getLayoutName();\n    String oldScope = entity.getScope();\n\n    resetToStrict(dao, widgetDAO);\n    expect(dao.findById(1L)).andReturn(entity).anyTimes();\n    expect(dao.merge((WidgetLayoutEntity) anyObject())).andReturn(entity).anyTimes();\n    expect(widgetDAO.merge(widgetEntity)).andReturn(widgetEntity).anyTimes();\n    expect(widgetDAO.findById(2L)).andReturn(widgetEntity2).anyTimes();\n    replay(dao, widgetDAO);\n\n    requestProps = new HashMap<String, Object>();\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_LAYOUT_NAME_PROPERTY_ID, \"layout_name_new\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_SCOPE_PROPERTY_ID, \"USER\");\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_ID_PROPERTY_ID, \"1\");\n    widget.put(\"id\",\"2\");\n    widgetsInfo.add(widget);\n    requestProps.put(WidgetLayoutResourceProvider.WIDGETLAYOUT_WIDGETS_PROPERTY_ID, widgetsInfo);\n\n    request = PropertyHelper.getUpdateRequest(requestProps, null);\n\n    provider.updateResources(request, predicate);\n\n    Assert.assertFalse(oldLayoutName.equals(entity.getLayoutName()));\n    Assert.assertFalse(oldScope.equals(entity.getScope()));\n\n    verify(amc, clusters, cluster, dao, widgetDAO);\n  }","commit_id":"eef00a9ec7d9561eeac087d743a852e3d34d67ba","url":"https://github.com/apache/ambari"},{"original_method":"@Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    WidgetLayoutUserWidgetEntity that = (WidgetLayoutUserWidgetEntity) o;\n\n    if (widgetLayout.getId() != that.widgetLayout.getId()) return false;\n    if (widget.getId() != that.widget.getId()) return false;\n\n    return true;\n  }","id":105761,"modified_method":"@Override\n  public boolean equals(Object o) {\n    if (this == o) return true;\n    if (o == null || getClass() != o.getClass()) return false;\n\n    WidgetLayoutUserWidgetEntity that = (WidgetLayoutUserWidgetEntity) o;\n\n    return (widgetLayout.equals(that.widgetLayout) && widget.equals(that.widget));\n  }","commit_id":"eef00a9ec7d9561eeac087d743a852e3d34d67ba","url":"https://github.com/apache/ambari"},{"original_method":"@Override\n  protected boolean process(@NotNull final String path,\n                            @NotNull final Project project,\n                            @NotNull final FullHttpRequest request,\n                            @NotNull ChannelHandlerContext context) {\n    final DartSdk sdk = DartSdk.getDartSdk(project);\n    if (sdk == null || StringUtil.compareVersionNumbers(sdk.getVersion(), \"1.6\") < 0) return false;\n\n    final Pair<VirtualFile, String> servedDirAndPathForPubServer = getServedDirAndPathForPubServer(project, path);\n    if (servedDirAndPathForPubServer == null) return false;\n\n    PubServerManager.getInstance(project).send(context.channel(), request, servedDirAndPathForPubServer.first, servedDirAndPathForPubServer.second);\n    return true;\n  }","id":105762,"modified_method":"@Override\n  protected boolean process(@NotNull final String path,\n                            @NotNull final Project project,\n                            @NotNull final FullHttpRequest request,\n                            @NotNull ChannelHandlerContext context) {\n    final DartSdk sdk = DartSdk.getDartSdk(project);\n    if (sdk == null || StringUtil.compareVersionNumbers(sdk.getVersion(), \"1.6\") < 0) return false;\n\n    final Pair<VirtualFile, String> servedDirAndPathForPubServer = getServedDirAndPathForPubServer(project, path);\n    if (servedDirAndPathForPubServer == null) return false;\n\n    HttpHeaders validateResult = BuiltInWebServerKt.validateToken(request, context.channel(), true);\n    if (validateResult != null && validateResult.isEmpty()) {\n      PubServerManager.getInstance(project).send(context.channel(), request, servedDirAndPathForPubServer.first, servedDirAndPathForPubServer.second);\n    }\n    return true;\n  }","commit_id":"08635788c26f50ddeb0e84991d083d01a7275097","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public UMOConnector createConnector() throws Exception\n    {\n        JmsConnector connector = new JmsConnector();\n        connector.setSpecification(JmsConstants.JMS_SPECIFICATION_11);\n        Properties props = JmsTestUtils.getJmsProperties(JmsTestUtils.ACTIVE_MQ_JMS_PROPERTIES);\n\n        connector.setConnectionFactoryJndiName(\"JmsQueueConnectionFactory\");\n        connector.setJndiProviderProperties(props);\n        connector.setName(CONNECTOR_NAME);\n        connector.getDispatcherThreadingProfile().setDoThreading(false);\n\n        HashMap overrides = new HashMap();\n        overrides.put(\"transacted.message.receiver\", JmsMessageReceiverSynchronous.class.getName());\n        connector.setServiceOverrides(overrides);\n        return connector;\n    }","id":105763,"modified_method":"public UMOConnector createConnector() throws Exception\n    {\n        JmsConnector connector = new JmsConnector();\n        connector.setSpecification(JmsConstants.JMS_SPECIFICATION_11);\n        Properties props = JmsTestUtils.getJmsProperties(JmsTestUtils.ACTIVE_MQ_JMS_PROPERTIES);\n\n        connector.setConnectionFactoryJndiName(\"JmsQueueConnectionFactory\");\n        connector.setJndiProviderProperties(props);\n        connector.setName(CONNECTOR_NAME);\n        connector.getDispatcherThreadingProfile().setDoThreading(false);\n\n        HashMap overrides = new HashMap();\n        overrides.put(\"message.receiver\", JmsMessageReceiverSynchronous.class.getName());\n        connector.setServiceOverrides(overrides);\n        return connector;\n    }","commit_id":"8d88d98952fcfee47bb8d450758499003e641483","url":"https://github.com/mulesoft/mule"},{"original_method":"public UMOConnector createConnector() throws Exception\n    {\n        JmsConnector connector = new JmsConnector();\n        connector.setSpecification(JmsConstants.JMS_SPECIFICATION_11);\n        Properties props = JmsTestUtils.getJmsProperties(JmsTestUtils.ACTIVE_MQ_JMS_PROPERTIES);\n\n        connector.setConnectionFactoryJndiName(\"JmsTopicConnectionFactory\");\n        connector.setJndiProviderProperties(props);\n        connector.setName(CONNECTOR_NAME);\n        connector.getDispatcherThreadingProfile().setDoThreading(false);\n\n        HashMap overrides = new HashMap();\n        overrides.put(\"transacted.message.receiver\", JmsMessageReceiverSynchronous.class.getName());\n        connector.setServiceOverrides(overrides);\n        return connector;\n    }","id":105764,"modified_method":"public UMOConnector createConnector() throws Exception\n    {\n        JmsConnector connector = new JmsConnector();\n        connector.setSpecification(JmsConstants.JMS_SPECIFICATION_11);\n        Properties props = JmsTestUtils.getJmsProperties(JmsTestUtils.ACTIVE_MQ_JMS_PROPERTIES);\n\n        connector.setConnectionFactoryJndiName(\"JmsTopicConnectionFactory\");\n        connector.setJndiProviderProperties(props);\n        connector.setName(CONNECTOR_NAME);\n        connector.getDispatcherThreadingProfile().setDoThreading(false);\n\n        HashMap overrides = new HashMap();\n        overrides.put(\"message.receiver\", JmsMessageReceiverSynchronous.class.getName());\n        connector.setServiceOverrides(overrides);\n        return connector;\n    }","commit_id":"8d88d98952fcfee47bb8d450758499003e641483","url":"https://github.com/mulesoft/mule"},{"original_method":"protected void registerReceiverWithMuleService(UMOMessageReceiver receiver, UMOEndpointURI ep) throws UMOException {\n        // If this is the first receiver we need to create the Axis service\n        // component\n        // this will be registered with Mule when the Connector starts\n        if (axisDescriptor == null) {\n            // See if the axis descriptor has already been added. This allows\n            // developers to override the default configuration, say to increase\n            // the threadpool\n            axisDescriptor = (MuleDescriptor) MuleManager.getInstance()\n                    .getModel()\n                    .getDescriptor(AXIS_SERVICE_COMPONENT_NAME);\n            if (axisDescriptor == null) {\n                axisDescriptor = createAxisDescriptor();\n            } else {\n                // Lets unregister the 'template' instance, configure it and\n                // then register\n                // again later\n                MuleManager.getInstance().getModel().unregisterComponent(axisDescriptor);\n            }\n            // if the axis server hasn't been set, set it now. The Axis server\n            // may be set\n            // externally\n            if (axisDescriptor.getProperties().get(\"axisServer\") == null) {\n                axisDescriptor.getProperties().put(\"axisServer\", axisServer);\n            }\n            axisDescriptor.setContainerManaged(false);\n        }\n        String serviceName = receiver.getComponent().getDescriptor().getName();\n        // No determine if the endpointUri requires a new connector to be\n        // registed\n        // in the case of http we only need to register the new endpointUri if\n        // the\n        // port is different\n        String endpoint = receiver.getEndpointURI().getAddress() + \"/\" + serviceName;\n\n        String scheme = ep.getScheme().toLowerCase();\n        boolean sync = receiver.getEndpoint().isSynchronous();\n        if (scheme.equals(\"http\") || scheme.equals(\"tcp\")) {\n            // if we are using a socket based endpointUri make sure it is\n            // running synchronously by default\n            sync = true;\n        }\n\n        Map endpointCounters = (Map) axisDescriptor.getProperties().get(ENDPOINT_COUNTERS_PROPERTY);\n        if (endpointCounters == null) {\n            endpointCounters = new HashMap();\n        }\n\n        //String endpointKey = getCounterEndpointKey(receiver.getEndpointURI());\n        //String endpointKey = receiver.getEndpointURI().toString() + \"/\" + serviceName;\n\n        Integer count = (Integer) endpointCounters.get(endpoint);\n        if (count == null)\n            count = new Integer(0);\n\n        if (count.intValue() == 0) {\n            UMOEndpoint serviceEndpoint = new MuleEndpoint(endpoint, true);\n            serviceEndpoint.setSynchronous(sync);\n            serviceEndpoint.setName(ep.getScheme() + \":\" + serviceName);\n            // set the filter on the axis endpoint on the real receiver endpoint\n            serviceEndpoint.setFilter(receiver.getEndpoint().getFilter());\n            axisDescriptor.getInboundRouter().addEndpoint(serviceEndpoint);\n        }\n\n        // Update the counter for this endpoint\n        count = new Integer(count.intValue() + 1);\n        endpointCounters.put(endpoint, count);\n        axisDescriptor.getProperties().put(ENDPOINT_COUNTERS_PROPERTY, endpointCounters);\n    }","id":105765,"modified_method":"protected void registerReceiverWithMuleService(UMOMessageReceiver receiver, UMOEndpointURI ep) throws UMOException {\n        // If this is the first receiver we need to create the Axis service\n        // component\n        // this will be registered with Mule when the Connector starts\n        if (axisDescriptor == null) {\n            // See if the axis descriptor has already been added. This allows\n            // developers to override the default configuration, say to increase\n            // the threadpool\n            axisDescriptor = (MuleDescriptor) MuleManager.getInstance()\n                    .getModel()\n                    .getDescriptor(AXIS_SERVICE_COMPONENT_NAME);\n            if (axisDescriptor == null) {\n                axisDescriptor = createAxisDescriptor();\n            } else {\n                // Lets unregister the 'template' instance, configure it and\n                // then register\n                // again later\n                MuleManager.getInstance().getModel().unregisterComponent(axisDescriptor);\n            }\n            // if the axis server hasn't been set, set it now. The Axis server\n            // may be set\n            // externally\n            if (axisDescriptor.getProperties().get(\"axisServer\") == null) {\n                axisDescriptor.getProperties().put(\"axisServer\", axisServer);\n            }\n            axisDescriptor.setContainerManaged(false);\n        }\n        String serviceName = receiver.getComponent().getDescriptor().getName();\n        // No determine if the endpointUri requires a new connector to be\n        // registed in the case of http we only need to register the new endpointUri if\n        // the port is different\n        //If we're using VM or Jms we just use the resource infor directly without appending a service name\n        String endpoint = null;\n        String scheme = ep.getScheme().toLowerCase();\n         if( scheme.equals(\"jms\") || scheme.equals(\"vm\")) {\n             endpoint = ep.toString();\n         } else {\n            endpoint = receiver.getEndpointURI().getAddress() + \"/\" + serviceName;\n         }\n         if(logger.isDebugEnabled()) logger.debug(\"Modified endpoint with \" + scheme + \" scheme to \" + endpoint);\n\n        boolean sync = receiver.getEndpoint().isSynchronous();\n        if (scheme.equals(\"http\") || scheme.equals(\"tcp\")) {\n            // if we are using a socket based endpointUri make sure it is\n            // running synchronously by default\n            sync = true;\n        }\n\n        Map endpointCounters = (Map) axisDescriptor.getProperties().get(ENDPOINT_COUNTERS_PROPERTY);\n        if (endpointCounters == null) {\n            endpointCounters = new HashMap();\n        }\n\n        //String endpointKey = getCounterEndpointKey(receiver.getEndpointURI());\n        //String endpointKey = receiver.getEndpointURI().toString() + \"/\" + serviceName;\n\n        Integer count = (Integer) endpointCounters.get(endpoint);\n        if (count == null)\n            count = new Integer(0);\n\n        if (count.intValue() == 0) {\n            UMOEndpoint serviceEndpoint = new MuleEndpoint(endpoint, true);\n            serviceEndpoint.setSynchronous(sync);\n            serviceEndpoint.setName(ep.getScheme() + \":\" + serviceName);\n            // set the filter on the axis endpoint on the real receiver endpoint\n            serviceEndpoint.setFilter(receiver.getEndpoint().getFilter());\n            //propagate properties to the service endpoint\n            serviceEndpoint.getProperties().putAll(receiver.getEndpoint().getProperties());\n\n            axisDescriptor.getInboundRouter().addEndpoint(serviceEndpoint);\n        }\n\n        // Update the counter for this endpoint\n        count = new Integer(count.intValue() + 1);\n        endpointCounters.put(endpoint, count);\n        axisDescriptor.getProperties().put(ENDPOINT_COUNTERS_PROPERTY, endpointCounters);\n    }","commit_id":"8d88d98952fcfee47bb8d450758499003e641483","url":"https://github.com/mulesoft/mule"},{"original_method":"private UMOMessage dispatchMessage(UMOEvent event) throws Exception\n    {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"dispatching on endpoint: \" + event.getEndpoint().getEndpointURI() + \". Event id is: \"\n                    + event.getId());\n        }\n        Session txSession = null;\n        Session session = null;\n        MessageProducer producer = null;\n        MessageConsumer consumer = null;\n\n        try {\n            // Retrieve a session from the connector\n            session = connector.getSession(event.getEndpoint());\n            // Retrieve the session for the current transaction\n            // If there is one, this is up to the transaction to close the\n            // session\n            txSession = connector.getCurrentSession();\n\n            // If a transaction is running, we can not receive any messages\n            // in the same transaction\n            boolean remoteSync = useRemoteSync(event);\n            if (txSession != null && remoteSync) {\n                throw new IllegalTransactionStateException(new org.mule.config.i18n.Message(\"jms\", 2));\n            }\n\n            UMOEndpointURI endpointUri = event.getEndpoint().getEndpointURI();\n            // determine if endpointUri is a queue or topic\n            // the format is topic:destination\n            boolean topic = false;\n            String resourceInfo = endpointUri.getResourceInfo();\n            topic = (resourceInfo != null && \"topic\".equalsIgnoreCase(resourceInfo));\n            Destination dest = connector.getJmsSupport().createDestination(session, endpointUri.getAddress(), topic);\n            producer = connector.getJmsSupport().createProducer(session, dest);\n\n            Object message = event.getTransformedMessage();\n            if (!(message instanceof Message)) {\n                throw new DispatchException(new org.mule.config.i18n.Message(Messages.MESSAGE_NOT_X_IT_IS_TYPE_X_CHECK_TRANSFORMER_ON_X,\n                                                                             \"JMS message\",\n                                                                             message.getClass().getName(),\n                                                                             connector.getName()),\n                                            event.getMessage(),\n                                            event.getEndpoint());\n            }\n\n            Message msg = (Message) message;\n            if (event.getMessage().getCorrelationId() != null) {\n                msg.setJMSCorrelationID(event.getMessage().getCorrelationId());\n            }\n\n            Destination replyTo = null;\n            Object tempReplyTo = event.removeProperty(\"JMSReplyTo\");\n            if (tempReplyTo != null) {\n                if (tempReplyTo instanceof Destination) {\n                    replyTo = (Destination) tempReplyTo;\n                } else {\n                    boolean replyToTopic = false;\n                    String reply = tempReplyTo.toString();\n                    int i = reply.indexOf(\":\");\n                    if (i > -1) {\n                        String qtype = reply.substring(0, i);\n                        replyToTopic = \"topic\".equalsIgnoreCase(qtype);\n                        reply = reply.substring(i + 1);\n                    }\n                    replyTo = connector.getJmsSupport().createDestination(session, reply, replyToTopic);\n                }\n            }\n            // Are we going to wait for a return event ?\n            if (remoteSync && replyTo == null) {\n                replyTo = connector.getJmsSupport().createTemporaryDestination(session, topic);\n            }\n            // Set the replyTo property\n            if (replyTo != null) {\n                msg.setJMSReplyTo(replyTo);\n            }\n            \n            // Are we going to wait for a return event ?\n            if (remoteSync) {\n                consumer = connector.getJmsSupport().createConsumer(session, replyTo);\n            }\n\n            // QoS support\n            String ttlString = (String) event.removeProperty(\"TimeToLive\");\n            String priorityString = (String) event.removeProperty(\"Priority\");\n            String persistentDeliveryString = (String) event.removeProperty(\"PersistentDelivery\");\n\n            if (ttlString == null && priorityString == null && persistentDeliveryString == null) {\n                connector.getJmsSupport().send(producer, msg);\n            } else {\n                long ttl = Message.DEFAULT_TIME_TO_LIVE;\n                int priority = Message.DEFAULT_PRIORITY;\n                boolean persistent = Message.DEFAULT_DELIVERY_MODE == DeliveryMode.PERSISTENT;\n\n                if (ttlString != null) {\n                    ttl = Long.parseLong(ttlString);\n                }\n                if (priorityString != null) {\n                    priority = Integer.parseInt(priorityString);\n                }\n                if (persistentDeliveryString != null) {\n                    persistent = Boolean.valueOf(persistentDeliveryString).booleanValue();\n                }\n                connector.getJmsSupport().send(producer, msg, persistent, priority, ttl);\n            }\n\n            if (consumer != null) {\n                int timeout = event.getEndpoint().getRemoteSyncTimeout();\n                logger.debug(\"Waiting for return event for: \" + timeout + \" ms on \" + replyTo);\n                Message result = consumer.receive(timeout);\n                if (result == null) {\n                    logger.debug(\"No message was returned via replyTo destination\");\n                    return null;\n                } else {\n                    Object resultObject = JmsMessageUtils.getObjectForMessage(result);\n                    return new MuleMessage(resultObject);\n                }\n            }\n\n            return null;\n        } finally {\n            JmsUtils.closeQuietly(consumer);\n            JmsUtils.closeQuietly(producer);\n            if (session != null && session != txSession) {\n                JmsUtils.closeQuietly(session);\n            }\n        }\n    }","id":105766,"modified_method":"private UMOMessage dispatchMessage(UMOEvent event) throws Exception {\n        if (logger.isDebugEnabled()) {\n            logger.debug(\"dispatching on endpoint: \" + event.getEndpoint().getEndpointURI() + \". Event id is: \"\n                    + event.getId());\n        }\n        Session txSession = null;\n        Session session = null;\n        MessageProducer producer = null;\n        MessageConsumer consumer = null;\n\n        try {\n            // Retrieve a session from the connector\n            session = connector.getSession(event.getEndpoint());\n            // Retrieve the session for the current transaction\n            // If there is one, this is up to the transaction to close the\n            // session\n            txSession = connector.getCurrentSession();\n\n            // If a transaction is running, we can not receive any messages\n            // in the same transaction\n            boolean remoteSync = useRemoteSync(event);\n            if (txSession != null && remoteSync) {\n                throw new IllegalTransactionStateException(new org.mule.config.i18n.Message(\"jms\", 2));\n            }\n\n            UMOEndpointURI endpointUri = event.getEndpoint().getEndpointURI();\n            // determine if endpointUri is a queue or topic\n            // the format is topic:destination\n            boolean topic = false;\n            String resourceInfo = endpointUri.getResourceInfo();\n            topic = (resourceInfo != null && \"topic\".equalsIgnoreCase(resourceInfo));\n            //todo MULE20 remove resource info support\n            if(!topic) topic = PropertiesHelper.getBooleanProperty(event.getEndpoint().getProperties(), \"topic\", false);\n\n            Destination dest = connector.getJmsSupport().createDestination(session, endpointUri.getAddress(), topic);\n            producer = connector.getJmsSupport().createProducer(session, dest);\n\n            Object message = event.getTransformedMessage();\n            if (!(message instanceof Message)) {\n                throw new DispatchException(new org.mule.config.i18n.Message(Messages.MESSAGE_NOT_X_IT_IS_TYPE_X_CHECK_TRANSFORMER_ON_X,\n                        \"JMS message\",\n                        message.getClass().getName(),\n                        connector.getName()),\n                        event.getMessage(),\n                        event.getEndpoint());\n            }\n\n            Message msg = (Message) message;\n            if (event.getMessage().getCorrelationId() != null) {\n                msg.setJMSCorrelationID(event.getMessage().getCorrelationId());\n            }\n\n            Destination replyTo = null;\n            Object tempReplyTo = event.removeProperty(\"JMSReplyTo\");\n            if (tempReplyTo != null) {\n                if (tempReplyTo instanceof Destination) {\n                    replyTo = (Destination) tempReplyTo;\n                } else {\n                    boolean replyToTopic = false;\n                    String reply = tempReplyTo.toString();\n                    int i = reply.indexOf(\":\");\n                    if (i > -1) {\n                        String qtype = reply.substring(0, i);\n                        replyToTopic = \"topic\".equalsIgnoreCase(qtype);\n                        reply = reply.substring(i + 1);\n                    }\n                    replyTo = connector.getJmsSupport().createDestination(session, reply, replyToTopic);\n                }\n            }\n            // Are we going to wait for a return event ?\n            if (remoteSync && replyTo == null) {\n                replyTo = connector.getJmsSupport().createTemporaryDestination(session, topic);\n            }\n            // Set the replyTo property\n            if (replyTo != null) {\n                msg.setJMSReplyTo(replyTo);\n            }\n            \n            // Are we going to wait for a return event ?\n            if (remoteSync) {\n                consumer = connector.getJmsSupport().createConsumer(session, replyTo);\n            }\n\n            // QoS support\n            String ttlString = (String) event.removeProperty(\"TimeToLive\");\n            String priorityString = (String) event.removeProperty(\"Priority\");\n            String persistentDeliveryString = (String) event.removeProperty(\"PersistentDelivery\");\n\n            long ttl = Message.DEFAULT_TIME_TO_LIVE;\n            int priority = Message.DEFAULT_PRIORITY;\n            boolean persistent = Message.DEFAULT_DELIVERY_MODE == DeliveryMode.PERSISTENT;\n\n            if (ttlString != null) {\n                ttl = Long.parseLong(ttlString);\n            }\n            if (priorityString != null) {\n                priority = Integer.parseInt(priorityString);\n            }\n            if (persistentDeliveryString != null) {\n                persistent = Boolean.valueOf(persistentDeliveryString).booleanValue();\n            }\n\n            if (consumer != null && topic) {\n                //need to register a listener for a topic\n                Latch l = new Latch();\n                ReplyToListener listener = new ReplyToListener(l);\n                consumer.setMessageListener(listener);\n\n                connector.getJmsSupport().send(producer, msg, persistent, priority, ttl);\n\n                int timeout = event.getEndpoint().getRemoteSyncTimeout();\n                logger.debug(\"Waiting for return event for: \" + timeout + \" ms on \" + replyTo);\n                l.await(timeout, TimeUnit.MILLISECONDS);\n                consumer.setMessageListener(null);\n                listener.release();\n                Message result = listener.getMessage();\n                if (result == null) {\n                    logger.debug(\"No message was returned via replyTo destination\");\n                    return null;\n                } else {\n                    Object resultObject = JmsMessageUtils.getObjectForMessage(result);\n                    return new MuleMessage(resultObject);\n                }\n            } else {\n                connector.getJmsSupport().send(producer, msg, persistent, priority, ttl);\n                if (consumer != null) {\n                    int timeout = event.getEndpoint().getRemoteSyncTimeout();\n                    logger.debug(\"Waiting for return event for: \" + timeout + \" ms on \" + replyTo);\n                    Message result = consumer.receive(timeout);\n                    if (result == null) {\n                        logger.debug(\"No message was returned via replyTo destination\");\n                        return null;\n                    } else {\n                        Object resultObject = JmsMessageUtils.getObjectForMessage(result);\n                        return new MuleMessage(resultObject);\n                    }\n                }\n            }\n            return null;\n        } finally {\n            JmsUtils.closeQuietly(consumer);\n            JmsUtils.closeQuietly(producer);\n            if (session != null && session != txSession) {\n                JmsUtils.closeQuietly(session);\n            }\n        }\n    }","commit_id":"8d88d98952fcfee47bb8d450758499003e641483","url":"https://github.com/mulesoft/mule"},{"original_method":"/**\n     * Create a consumer for the jms destination\n     * \n     * @throws Exception\n     */\n    protected void createConsumer() throws Exception\n    {\n    \ttry {\n\t        JmsSupport jmsSupport = this.connector.getJmsSupport();\n\t        // Create session if none exists\n\t        if (session == null) {\n\t    \t\tsession = this.connector.getSession(endpoint);\n\t        }\n\t\n\t        // Create destination\n\t        String resourceInfo = endpoint.getEndpointURI().getResourceInfo();\n\t        boolean topic = (resourceInfo != null && \"topic\".equalsIgnoreCase(resourceInfo));\n\t        Destination dest = jmsSupport.createDestination(session, endpoint.getEndpointURI().getAddress(), topic);\n\t\n\t        // Extract jms selector\n\t        String selector = null;\n\t        if (endpoint.getFilter() != null && endpoint.getFilter() instanceof JmsSelectorFilter) {\n\t            selector = ((JmsSelectorFilter) endpoint.getFilter()).getExpression();\n\t        } else if (endpoint.getProperties() != null) {\n\t            // still allow the selector to be set as a property on the endpoint\n\t            // to be backward compatable\n\t            selector = (String) endpoint.getProperties().get(JmsConstants.JMS_SELECTOR_PROPERTY);\n\t        }\n\t        String tempDurable = (String) endpoint.getProperties().get(\"durable\");\n\t        boolean durable = connector.isDurable();\n\t        if (tempDurable != null)\n\t            durable = Boolean.valueOf(tempDurable).booleanValue();\n\t\n\t        // Get the durable subscriber name if there is one\n\t        String durableName = (String) endpoint.getProperties().get(\"durableName\");\n\t        if (durableName == null && durable && dest instanceof Topic) {\n\t            durableName = \"mule.\" + connector.getName() + \".\" + endpoint.getEndpointURI().getAddress();\n\t            logger.debug(\"Jms Connector for this receiver is durable but no durable name has been specified. Defaulting to: \"\n\t                    + durableName);\n\t        }\n\t\n\t        // Create consumer\n\t        consumer = jmsSupport.createConsumer(session, dest, selector, connector.isNoLocal(), durableName);\n    \t} catch (JMSException e) {\n    \t\tthrow new ConnectException(e, this);\n    \t}\n    }","id":105767,"modified_method":"/**\n     * Create a consumer for the jms destination\n     *\n     * @throws Exception\n     */\n    protected void createConsumer() throws Exception\n    {\n    \ttry {\n\t        JmsSupport jmsSupport = this.connector.getJmsSupport();\n\t        // Create session if none exists\n\t        if (session == null) {\n\t    \t\tsession = this.connector.getSession(endpoint);\n\t        }\n\n\t        // Create destination\n\t        String resourceInfo = endpoint.getEndpointURI().getResourceInfo();\n\t        boolean topic = (resourceInfo != null && \"topic\".equalsIgnoreCase(resourceInfo));\n\n            //todo MULE20 remove resource Info support\n            if(!topic) topic = PropertiesHelper.getBooleanProperty(endpoint.getProperties(), \"topic\", false);\n\n\t        Destination dest = jmsSupport.createDestination(session, endpoint.getEndpointURI().getAddress(), topic);\n\n\t        // Extract jms selector\n\t        String selector = null;\n\t        if (endpoint.getFilter() != null && endpoint.getFilter() instanceof JmsSelectorFilter) {\n\t            selector = ((JmsSelectorFilter) endpoint.getFilter()).getExpression();\n\t        } else if (endpoint.getProperties() != null) {\n\t            // still allow the selector to be set as a property on the endpoint\n\t            // to be backward compatable\n\t            selector = (String) endpoint.getProperties().get(JmsConstants.JMS_SELECTOR_PROPERTY);\n\t        }\n\t        String tempDurable = (String) endpoint.getProperties().get(\"durable\");\n\t        boolean durable = connector.isDurable();\n\t        if (tempDurable != null)\n\t            durable = Boolean.valueOf(tempDurable).booleanValue();\n\n\t        // Get the durable subscriber name if there is one\n\t        String durableName = (String) endpoint.getProperties().get(\"durableName\");\n\t        if (durableName == null && durable && dest instanceof Topic) {\n\t            durableName = \"mule.\" + connector.getName() + \".\" + endpoint.getEndpointURI().getAddress();\n\t            logger.debug(\"Jms Connector for this receiver is durable but no durable name has been specified. Defaulting to: \"\n\t                    + durableName);\n\t        }\n\n\t        // Create consumer\n\t        consumer = jmsSupport.createConsumer(session, dest, selector, connector.isNoLocal(), durableName);\n    \t} catch (JMSException e) {\n    \t\tthrow new ConnectException(e, this);\n    \t}\n    }","commit_id":"8d88d98952fcfee47bb8d450758499003e641483","url":"https://github.com/mulesoft/mule"},{"original_method":"public CeyloncFileManager(Context context, boolean register, Charset charset) {\n        super(context, register, charset);\n        jarRepository = new JarOutputRepositoryManager(Log.instance(context));\n    }","id":105768,"modified_method":"public CeyloncFileManager(Context context, boolean register, Charset charset) {\n        super(context, register, charset);\n        jarRepository = new JarOutputRepositoryManager(Log.instance(context), Options.instance(context));\n    }","commit_id":"540645ec9ccfcc54c73214df7251e8e085048e6a","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"public ProgressiveJar(File targetJarFile, Log log) throws IOException{\n            if(targetJarFile.exists()){\n                outputJarFile = File.createTempFile(targetJarFile.getName(), \".tmp\", targetJarFile.getParentFile());\n                originalJarFile = targetJarFile;\n            }else{\n                outputJarFile = targetJarFile; \n                originalJarFile = null;\n            }\n            jarOutputStream = new JarOutputStream(new FileOutputStream(outputJarFile));\n            this.log = log;\n        }","id":105769,"modified_method":"public ProgressiveJar(File targetJarFile, Log log, Options options) throws IOException{\n            if(targetJarFile.exists()){\n                outputJarFile = File.createTempFile(targetJarFile.getName(), \".tmp\", targetJarFile.getParentFile());\n                originalJarFile = targetJarFile;\n            }else{\n                outputJarFile = targetJarFile; \n                originalJarFile = null;\n            }\n            jarOutputStream = new JarOutputStream(new FileOutputStream(outputJarFile));\n            this.log = log;\n            this.options = options;\n        }","commit_id":"540645ec9ccfcc54c73214df7251e8e085048e6a","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"private ProgressiveJar getProgressiveJar(File outputDir, Module module) throws IOException {\n        ProgressiveJar jarFile = openJars.get(module);\n        if(jarFile == null){\n            String jarName = Util.getJarName(module);\n            File moduleOutputDir = Util.getModulePath(outputDir, module);\n            if(!moduleOutputDir.exists() && !moduleOutputDir.mkdirs())\n                throw new IOException(\"Failed to create output dir: \"+moduleOutputDir);\n            Log.printLines(log.noticeWriter, \"[output jar name: \"+jarName+\"]\");\n            jarFile = new ProgressiveJar(new File(moduleOutputDir, jarName), log);\n            openJars.put(module, jarFile);\n        }\n        return jarFile;\n    }","id":105770,"modified_method":"private ProgressiveJar getProgressiveJar(File outputDir, Module module) throws IOException {\n        ProgressiveJar jarFile = openJars.get(module);\n        if(jarFile == null){\n            String jarName = Util.getJarName(module);\n            File moduleOutputDir = Util.getModulePath(outputDir, module);\n            if(!moduleOutputDir.exists() && !moduleOutputDir.mkdirs())\n                throw new IOException(\"Failed to create output dir: \"+moduleOutputDir);\n            if(options.get(OptionName.VERBOSE) != null){\n                Log.printLines(log.noticeWriter, \"[output jar name: \"+jarName+\"]\");\n            }\n            jarFile = new ProgressiveJar(new File(moduleOutputDir, jarName), log, options);\n            openJars.put(module, jarFile);\n        }\n        return jarFile;\n    }","commit_id":"540645ec9ccfcc54c73214df7251e8e085048e6a","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"JarOutputRepositoryManager(Log log){\n        this.log = log;\n    }","id":105771,"modified_method":"JarOutputRepositoryManager(Log log, Options options){\n        this.log = log;\n        this.options = options;\n    }","commit_id":"540645ec9ccfcc54c73214df7251e8e085048e6a","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"public void close() throws IOException {\n            // now copy all previous jar entries\n            if(originalJarFile != null){\n                JarFile jarFile = new JarFile(originalJarFile);\n                Enumeration<JarEntry> entries = jarFile.entries();\n                while(entries.hasMoreElements()){\n                    JarEntry entry = entries.nextElement();\n                    // skip the old entry if we overwrote it\n                    if(writtenClasses.contains(entry.getName()))\n                        continue;\n                    jarOutputStream.putNextEntry(entry);\n                    InputStream inputStream = jarFile.getInputStream(entry);\n                    copy(inputStream, jarOutputStream);\n                    inputStream.close();\n                    jarOutputStream.closeEntry();\n                }\n                jarFile.close();\n            }\n            jarOutputStream.flush();\n            jarOutputStream.close();\n            Log.printLines(log.noticeWriter, \"[done writing to jar: \"+outputJarFile.getPath()+\"]\");\n            if(originalJarFile != null){\n                // now rename to the original name\n                Log.printLines(log.noticeWriter, \"[renaming jar to: \"+originalJarFile.getPath()+\"]\");\n            \toriginalJarFile.delete();\n                if(!outputJarFile.renameTo(originalJarFile))\n                    throw new IOException(\"Failed to rename jar file\");\n            }\n        }","id":105772,"modified_method":"public void close() throws IOException {\n            // now copy all previous jar entries\n            if(originalJarFile != null){\n                JarFile jarFile = new JarFile(originalJarFile);\n                Enumeration<JarEntry> entries = jarFile.entries();\n                while(entries.hasMoreElements()){\n                    JarEntry entry = entries.nextElement();\n                    // skip the old entry if we overwrote it\n                    if(writtenClasses.contains(entry.getName()))\n                        continue;\n                    jarOutputStream.putNextEntry(entry);\n                    InputStream inputStream = jarFile.getInputStream(entry);\n                    copy(inputStream, jarOutputStream);\n                    inputStream.close();\n                    jarOutputStream.closeEntry();\n                }\n                jarFile.close();\n            }\n            jarOutputStream.flush();\n            jarOutputStream.close();\n            if(options.get(OptionName.VERBOSE) != null){\n                Log.printLines(log.noticeWriter, \"[done writing to jar: \"+outputJarFile.getPath()+\"]\");\n            }\n            if(originalJarFile != null){\n                // now rename to the original name\n                if(options.get(OptionName.VERBOSE) != null){\n                    Log.printLines(log.noticeWriter, \"[renaming jar to: \"+originalJarFile.getPath()+\"]\");\n                }\n            \toriginalJarFile.delete();\n                if(!outputJarFile.renameTo(originalJarFile))\n                    throw new IOException(\"Failed to rename jar file\");\n            }\n        }","commit_id":"540645ec9ccfcc54c73214df7251e8e085048e6a","url":"https://github.com/ceylon/ceylon-compiler"},{"original_method":"protected void mergeConfigurations(ModuleRevisionId sourceMrid, Configuration[] configurations) {\n            DefaultModuleDescriptor md = getMd();\n            for (int i = 0; i < configurations.length; i++) {\n                Configuration configuration = configurations[i];\n                Message.debug(\"Merging configuration with: \" + configuration.getName());\n                //copy configuration from parent descriptor\n                md.addConfiguration(new Configuration(configuration, sourceMrid));\n            }\n        }","id":105773,"modified_method":"private void mergeConfigurations(ModuleRevisionId sourceMrid, Configuration[] configurations) {\n            DefaultModuleDescriptor md = getMd();\n            for (Configuration configuration : configurations) {\n                Message.debug(\"Merging configuration with: \" + configuration.getName());\n                //copy configuration from parent descriptor\n                md.addConfiguration(new Configuration(configuration, sourceMrid));\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected URL getSchemaURL() {\n            return getClass().getResource(\"ivy.xsd\");\n        }","id":105774,"modified_method":"private URL getSchemaURL() {\n            return getClass().getResource(\"ivy.xsd\");\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void ivyModuleStarted(Attributes attributes) throws SAXException {\n            descriptorVersion = attributes.getValue(\"version\");\n            int versionIndex = ALLOWED_VERSIONS.indexOf(descriptorVersion);\n            if (versionIndex == -1) {\n                addError(\"invalid version \" + descriptorVersion);\n                throw new SAXException(\"invalid version \" + descriptorVersion);\n            }\n            if (versionIndex >= ALLOWED_VERSIONS.indexOf(\"1.3\")) {\n                Message.debug(\"post 1.3 ivy file: using \" + PatternMatcher.EXACT\n                        + \" as default matcher\");\n                defaultMatcher = settings.getMatcher(PatternMatcher.EXACT);\n            } else {\n                Message.debug(\"pre 1.3 ivy file: using \" + PatternMatcher.EXACT_OR_REGEXP\n                        + \" as default matcher\");\n                defaultMatcher = settings.getMatcher(PatternMatcher.EXACT_OR_REGEXP);\n            }\n\n            for (int i = 0; i < attributes.getLength(); i++) {\n                if (attributes.getQName(i).startsWith(\"xmlns:\")) {\n                    getMd().addExtraAttributeNamespace(\n                        attributes.getQName(i).substring(\"xmlns:\".length()),\n                        attributes.getValue(i));\n                }\n            }\n        }","id":105775,"modified_method":"private void ivyModuleStarted(Attributes attributes) throws SAXException {\n            descriptorVersion = attributes.getValue(\"version\");\n            int versionIndex = ALLOWED_VERSIONS.indexOf(descriptorVersion);\n            if (versionIndex == -1) {\n                addError(\"invalid version \" + descriptorVersion);\n                throw new SAXException(\"invalid version \" + descriptorVersion);\n            }\n            if (versionIndex >= ALLOWED_VERSIONS.indexOf(\"1.3\")) {\n                Message.debug(\"post 1.3 ivy file: using \" + PatternMatcher.EXACT + \" as default matcher\");\n                defaultMatcher = settings.getMatcher(PatternMatcher.EXACT);\n            } else {\n                Message.debug(\"pre 1.3 ivy file: using \" + PatternMatcher.EXACT_OR_REGEXP + \" as default matcher\");\n                defaultMatcher = settings.getMatcher(PatternMatcher.EXACT_OR_REGEXP);\n            }\n\n            for (int i = 0; i < attributes.getLength(); i++) {\n                if (attributes.getQName(i).startsWith(\"xmlns:\")) {\n                    getMd().addExtraAttributeNamespace(attributes.getQName(i).substring(\"xmlns:\".length()), attributes.getValue(i));\n                }\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void replaceConfigurationWildcards() {\n            Configuration[] configs = getMd().getConfigurations();\n            for (int i = 0; i < configs.length; i++) {\n                configs[i].replaceWildcards(getMd());\n            }\n        }","id":105776,"modified_method":"private void replaceConfigurationWildcards() {\n            Configuration[] configs = getMd().getConfigurations();\n            for (Configuration config : configs) {\n                config.replaceWildcards(getMd());\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void mergeAll(ModuleDescriptor parent) {\n            ModuleRevisionId sourceMrid = parent.getModuleRevisionId();\n            mergeInfo(parent);\n            mergeConfigurations(sourceMrid, parent.getConfigurations());\n            mergeDependencies(parent.getDependencies());\n            mergeDescription(parent.getDescription());\n        }","id":105777,"modified_method":"private void mergeAll(ModuleDescriptor parent) {\n            ModuleRevisionId sourceMrid = parent.getModuleRevisionId();\n            mergeInfo(parent);\n            mergeConfigurations(sourceMrid, parent.getConfigurations());\n            mergeDependencies(parent.getDependencies());\n            mergeDescription(parent.getDescription());\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void publicationsStarted(Attributes attributes) {\n            state = State.PUB;\n            artifactsDeclared = true;\n            checkConfigurations();\n            String defaultConf = settings.substitute(attributes.getValue(\"defaultconf\"));\n            if (defaultConf != null) {\n                setPublicationsDefaultConf(defaultConf);\n            }\n        }","id":105778,"modified_method":"private void publicationsStarted(Attributes attributes) {\n            state = State.PUB;\n            artifactsDeclared = true;\n            checkConfigurations();\n            String defaultConf = substitute(attributes.getValue(\"defaultconf\"));\n            if (defaultConf != null) {\n                this.publicationsDefaultConf = defaultConf.split(\",\");\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void confStarted(Attributes attributes) {\n            String conf = settings.substitute(attributes.getValue(\"name\"));\n            switch (state) {\n                case State.CONF:\n                    String visibility = settings.substitute(attributes.getValue(\"visibility\"));\n                    String ext = settings.substitute(attributes.getValue(\"extends\"));\n                    String transitiveValue = attributes.getValue(\"transitive\");\n                    boolean transitive = (transitiveValue == null) ? true : Boolean\n                            .valueOf(attributes.getValue(\"transitive\")).booleanValue();\n                    String deprecated = attributes.getValue(\"deprecated\");\n                    Configuration configuration = new Configuration(conf,\n                            Configuration.Visibility\n                                    .getVisibility(visibility == null ? \"public\"\n                                            : visibility), settings.substitute(attributes\n                                    .getValue(\"description\")), ext == null ? null : ext\n                                    .split(\",\"), transitive, deprecated);\n                    ExtendableItemHelper.fillExtraAttributes(settings, configuration, attributes,\n                            new String[]{\"name\", \"visibility\", \"extends\", \"transitive\",\n                                    \"description\", \"deprecated\"});\n                    getMd().addConfiguration(configuration);\n                    break;\n                case State.PUB:\n                    if (\"*\".equals(conf)) {\n                        String[] confs = getMd().getConfigurationsNames();\n                        for (int i = 0; i < confs.length; i++) {\n                            artifact.addConfiguration(confs[i]);\n                            getMd().addArtifact(confs[i], artifact);\n                        }\n                    } else {\n                        artifact.addConfiguration(conf);\n                        getMd().addArtifact(conf, artifact);\n                    }\n                    break;\n                case State.DEP:\n                    this.conf = conf;\n                    String mappeds = settings.substitute(attributes.getValue(\"mapped\"));\n                    if (mappeds != null) {\n                        String[] mapped = mappeds.split(\",\");\n                        for (int i = 0; i < mapped.length; i++) {\n                            dd.addDependencyConfiguration(conf, mapped[i].trim());\n                        }\n                    }\n                    break;\n                case State.DEP_ARTIFACT:\n                case State.ARTIFACT_INCLUDE:\n                case State.ARTIFACT_EXCLUDE:\n                    addConfiguration(conf);\n                    break;\n                default:\n                    if (validate) {\n                        addError(\"conf tag found in invalid tag: \" + state);\n                    }\n                    break;\n            }\n        }","id":105779,"modified_method":"private void confStarted(Attributes attributes) {\n            String conf = substitute(attributes.getValue(\"name\"));\n            switch (state) {\n                case State.CONF:\n                    Configuration.Visibility visibility = Configuration.Visibility.getVisibility(elvis(substitute(attributes.getValue(\"visibility\")), \"public\"));\n                    String description = substitute(attributes.getValue(\"description\"));\n                    String[] extend = substitute(attributes.getValue(\"extends\")) == null ? null : substitute(attributes.getValue(\"extends\")).split(\",\");\n                    String transitiveValue = attributes.getValue(\"transitive\");\n                    boolean transitive = (transitiveValue == null) || Boolean.valueOf(attributes.getValue(\"transitive\"));\n                    String deprecated = attributes.getValue(\"deprecated\");\n                    Configuration configuration = new Configuration(conf, visibility, description, extend, transitive, deprecated);\n                    ExtendableItemHelper.fillExtraAttributes(settings, configuration, attributes, \n                            new String[]{\"name\", \"visibility\", \"extends\", \"transitive\", \"description\", \"deprecated\"});\n                    getMd().addConfiguration(configuration);\n                    break;\n                case State.PUB:\n                    if (\"*\".equals(conf)) {\n                        String[] confs = getMd().getConfigurationsNames();\n                        for (String confName : confs) {\n                            artifact.addConfiguration(confName);\n                            getMd().addArtifact(confName, artifact);\n                        }\n                    } else {\n                        artifact.addConfiguration(conf);\n                        getMd().addArtifact(conf, artifact);\n                    }\n                    break;\n                case State.DEP:\n                    this.conf = conf;\n                    String mappeds = substitute(attributes.getValue(\"mapped\"));\n                    if (mappeds != null) {\n                        String[] mapped = mappeds.split(\",\");\n                        for (String depConf : mapped) {\n                            dd.addDependencyConfiguration(conf, depConf.trim());\n                        }\n                    }\n                    break;\n                case State.DEP_ARTIFACT:\n                case State.ARTIFACT_INCLUDE:\n                case State.ARTIFACT_EXCLUDE:\n                    addConfiguration(conf);\n                    break;\n                default:\n                    if (validate) {\n                        addError(\"conf tag found in invalid tag: \" + state);\n                    }\n                    break;\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void checkConfigurations() {\n            if (getMd().getConfigurations().length == 0) {\n                getMd().addConfiguration(new Configuration(\"default\"));\n            }\n        }","id":105780,"modified_method":"private void checkConfigurations() {\n            if (getMd().getConfigurations().length == 0) {\n                getMd().addConfiguration(new Configuration(\"default\"));\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void mergeInfo(ModuleDescriptor parent) {\n            ModuleRevisionId parentMrid = parent.getModuleRevisionId();\n\n            DefaultModuleDescriptor descriptor = getMd();\n            ModuleRevisionId currentMrid = descriptor.getModuleRevisionId();\n\n            ModuleRevisionId mergedMrid = ModuleRevisionId.newInstance(\n                mergeValue(parentMrid.getOrganisation(), currentMrid.getOrganisation()),\n                currentMrid.getName(),\n                mergeValue(parentMrid.getBranch(), currentMrid.getBranch()),\n                mergeValue(parentMrid.getRevision(), currentMrid.getRevision()),\n                mergeValues(parentMrid.getQualifiedExtraAttributes(),\n                            currentMrid.getQualifiedExtraAttributes())\n            );\n\n            descriptor.setModuleRevisionId(mergedMrid);\n            descriptor.setResolvedModuleRevisionId(mergedMrid);\n\n            descriptor.setStatus(mergeValue(parent.getStatus(), descriptor.getStatus()));\n            if (descriptor.getNamespace() == null && parent instanceof DefaultModuleDescriptor) {\n                Namespace parentNamespace = ((DefaultModuleDescriptor) parent).getNamespace();\n                descriptor.setNamespace(parentNamespace);\n            }\n        }","id":105781,"modified_method":"private void mergeInfo(ModuleDescriptor parent) {\n            ModuleRevisionId parentMrid = parent.getModuleRevisionId();\n\n            DefaultModuleDescriptor descriptor = getMd();\n            ModuleRevisionId currentMrid = descriptor.getModuleRevisionId();\n\n            ModuleRevisionId mergedMrid = ModuleRevisionId.newInstance(\n                mergeValue(parentMrid.getOrganisation(), currentMrid.getOrganisation()),\n                currentMrid.getName(),\n                mergeValue(parentMrid.getBranch(), currentMrid.getBranch()),\n                mergeValue(parentMrid.getRevision(), currentMrid.getRevision()),\n                mergeValues(parentMrid.getQualifiedExtraAttributes(), currentMrid.getQualifiedExtraAttributes())\n            );\n\n            descriptor.setModuleRevisionId(mergedMrid);\n            descriptor.setResolvedModuleRevisionId(mergedMrid);\n\n            descriptor.setStatus(mergeValue(parent.getStatus(), descriptor.getStatus()));\n            if (descriptor.getNamespace() == null && parent instanceof DefaultModuleDescriptor) {\n                Namespace parentNamespace = ((DefaultModuleDescriptor) parent).getNamespace();\n                descriptor.setNamespace(parentNamespace);\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void addDependencyArtifacts(String tag, Attributes attributes)\n                throws MalformedURLException {\n            state = State.DEP_ARTIFACT;\n            parseRule(tag, attributes);\n        }","id":105782,"modified_method":"private void addDependencyArtifacts(String tag, Attributes attributes)\n                throws MalformedURLException {\n            state = State.DEP_ARTIFACT;\n            parseRule(tag, attributes);\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void mediationOverrideStarted(Attributes attributes) {\n            String org = settings.substitute(attributes.getValue(\"org\"));\n            org = org == null ? PatternMatcher.ANY_EXPRESSION : org;\n            String mod = settings.substitute(attributes.getValue(\"module\"));\n            mod = mod == null ? PatternMatcher.ANY_EXPRESSION : mod;\n            String rev = settings.substitute(attributes.getValue(\"rev\"));\n            String branch = settings.substitute(attributes.getValue(\"branch\"));\n            String matcherName = settings.substitute(attributes.getValue(\"matcher\"));\n            PatternMatcher matcher = matcherName == null ? defaultMatcher : settings\n                    .getMatcher(matcherName);\n            if (matcher == null) {\n                addError(\"unknown matcher: \" + matcherName);\n                return;\n            }\n            getMd().addDependencyDescriptorMediator(\n                new ModuleId(org, mod), matcher,\n                new OverrideDependencyDescriptorMediator(branch, rev));\n        }","id":105783,"modified_method":"private void mediationOverrideStarted(Attributes attributes) {\n            String org = elvis(substitute(attributes.getValue(\"org\")), PatternMatcher.ANY_EXPRESSION);\n            String mod = elvis(substitute(attributes.getValue(\"module\")), PatternMatcher.ANY_EXPRESSION);\n            String rev = substitute(attributes.getValue(\"rev\"));\n            String branch = substitute(attributes.getValue(\"branch\"));\n            String matcherName = substitute(attributes.getValue(\"matcher\"));\n            PatternMatcher matcher = matcherName == null ? defaultMatcher : settings.getMatcher(matcherName);\n            if (matcher == null) {\n                addError(\"unknown matcher: \" + matcherName);\n                return;\n            }\n            getMd().addDependencyDescriptorMediator(new ModuleId(org, mod), matcher, new OverrideDependencyDescriptorMediator(branch, rev));\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void addConfiguration(String c) {\n            confAware.addConfiguration(c);\n            if (state != State.EXCLUDE) {\n                // we are currently adding a configuration to either an include, exclude or artifact\n                // element\n                // of a dependency. This means that we have to add this element to the corresponding\n                // conf\n                // of the current dependency descriptor\n                if (confAware instanceof DependencyArtifactDescriptor) {\n                    dd.addDependencyArtifact(c, (DependencyArtifactDescriptor) confAware);\n                } else if (confAware instanceof IncludeRule) {\n                    dd.addIncludeRule(c, (IncludeRule) confAware);\n                } else if (confAware instanceof ExcludeRule) {\n                    dd.addExcludeRule(c, (ExcludeRule) confAware);\n                }\n            }\n        }","id":105784,"modified_method":"private void addConfiguration(String c) {\n            confAware.addConfiguration(c);\n            if (state != State.EXCLUDE) {\n                // we are currently adding a configuration to either an include, exclude or artifact\n                // element\n                // of a dependency. This means that we have to add this element to the corresponding\n                // conf\n                // of the current dependency descriptor\n                if (confAware instanceof DependencyArtifactDescriptor) {\n                    dd.addDependencyArtifact(c, (DependencyArtifactDescriptor) confAware);\n                } else if (confAware instanceof IncludeRule) {\n                    dd.addIncludeRule(c, (IncludeRule) confAware);\n                } else if (confAware instanceof ExcludeRule) {\n                    dd.addExcludeRule(c, (ExcludeRule) confAware);\n                }\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"/**\n     * @param xmlURL\n     *            the url pointing to the file to parse\n     * @param res\n     *            the real resource to parse, used for log only\n     * @param validate\n     * @return\n     * @throws java.text.ParseException\n     * @throws java.io.IOException\n     */\n    public DefaultModuleDescriptor parseDescriptor(ParserSettings ivySettings, URL xmlURL, Resource res,\n            boolean validate) throws ParseException, IOException {\n        Parser parser = newParser(ivySettings);\n        parser.setValidate(validate);\n        parser.setResource(res);\n        parser.setInput(xmlURL);\n        parser.parse();\n        return (DefaultModuleDescriptor) parser.getModuleDescriptor();\n    }","id":105785,"modified_method":"public DefaultModuleDescriptor parseDescriptor(ParserSettings ivySettings, URL xmlURL, Resource res,\n            boolean validate) throws ParseException, IOException {\n        Parser parser = new Parser(this, ivySettings, res);\n        parser.setValidate(validate);\n        parser.setInput(xmlURL);\n        parser.parse();\n        return (DefaultModuleDescriptor) parser.getModuleDescriptor();\n    }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void mergeWithOtherModuleDescriptor(List/* <String> */extendTypes,\n                ModuleDescriptor parent) {\n\n            if (extendTypes.contains(\"all\")) {\n                mergeAll(parent);\n            } else {\n                if (extendTypes.contains(\"info\")) {\n                    mergeInfo(parent);\n                }\n\n                if (extendTypes.contains(\"configurations\")) {\n                    mergeConfigurations(parent.getModuleRevisionId(), parent.getConfigurations());\n                }\n\n                if (extendTypes.contains(\"dependencies\")) {\n                    mergeDependencies(parent.getDependencies());\n                }\n\n                if (extendTypes.contains(\"description\")) {\n                    mergeDescription(parent.getDescription());\n                }\n            }\n\n        }","id":105786,"modified_method":"private void mergeWithOtherModuleDescriptor(List<String> extendTypes, ModuleDescriptor parent) {\n\n            if (extendTypes.contains(\"all\")) {\n                mergeAll(parent);\n            } else {\n                if (extendTypes.contains(\"info\")) {\n                    mergeInfo(parent);\n                }\n\n                if (extendTypes.contains(\"configurations\")) {\n                    mergeConfigurations(parent.getModuleRevisionId(), parent.getConfigurations());\n                }\n\n                if (extendTypes.contains(\"dependencies\")) {\n                    mergeDependencies(parent.getDependencies());\n                }\n\n                if (extendTypes.contains(\"description\")) {\n                    mergeDescription(parent.getDescription());\n                }\n            }\n\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected ModuleDescriptor parseOtherIvyFileOnFileSystem(String location)\n                throws ParseException, IOException {\n            URL url = null;\n            ModuleDescriptor parent = null;\n            url = getSettings().getRelativeUrlResolver().getURL(descriptorURL, location);\n            Message.debug(\"Trying to load included ivy file from \" + url.toString());\n            URLResource res = new URLResource(url);\n            ModuleDescriptorParser parser = ModuleDescriptorParserRegistry.getInstance().getParser(\n                res);\n\n            parent = parser.parseDescriptor(getSettings(), url, isValidate());\n            return parent;\n        }","id":105787,"modified_method":"private ModuleDescriptor parseOtherIvyFileOnFileSystem(String location)\n                throws ParseException, IOException {\n            URL url = settings.getRelativeUrlResolver().getURL(descriptorURL, location);\n            Message.debug(\"Trying to load included ivy file from \" + url.toString());\n            URLResource res = new URLResource(url);\n            ModuleDescriptorParser parser = ModuleDescriptorParserRegistry.getInstance().getParser(res);\n\n            return parser.parseDescriptor(settings, url, validate);\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"public void endElement(String uri, String localName, String qName) throws SAXException {\n            if (state == State.PUB && \"artifact\".equals(qName)\n                    && artifact.getConfigurations().length == 0) {\n                String[] confs = publicationsDefaultConf == null\n                    ? getMd().getConfigurationsNames()\n                    : publicationsDefaultConf;\n                for (int i = 0; i < confs.length; i++) {\n                    artifact.addConfiguration(confs[i].trim());\n                    getMd().addArtifact(confs[i].trim(), artifact);\n                }\n            } else if (\"configurations\".equals(qName)) {\n                checkConfigurations();\n            } else if ((state == State.DEP_ARTIFACT && \"artifact\".equals(qName))\n                    || (state == State.ARTIFACT_INCLUDE && \"include\".equals(qName))\n                    || (state == State.ARTIFACT_EXCLUDE && \"exclude\".equals(qName))) {\n                state = State.DEP;\n                if (confAware.getConfigurations().length == 0) {\n                    String[] confs = getMd().getConfigurationsNames();\n                    for (int i = 0; i < confs.length; i++) {\n                        addConfiguration(confs[i]);\n                    }\n                }\n                confAware = null;\n            } else if (\"exclude\".equals(qName) && state == State.EXCLUDE) {\n                if (confAware.getConfigurations().length == 0) {\n                    String[] confs = getMd().getConfigurationsNames();\n                    for (int i = 0; i < confs.length; i++) {\n                        addConfiguration(confs[i]);\n                    }\n                }\n                confAware = null;\n                state = State.DEPS;\n            } else if (\"dependency\".equals(qName) && state == State.DEP) {\n                if (dd.getModuleConfigurations().length == 0) {\n                    parseDepsConfs(getDefaultConf(), dd);\n                }\n                state = State.DEPS;\n            } else if (\"dependencies\".equals(qName) && state == State.DEPS) {\n                state = State.NONE;\n            } else if (state == State.INFO && \"info\".equals(qName)) {\n                state = State.NONE;\n            } else if (state == State.DESCRIPTION && \"description\".equals(qName)) {\n                getMd().setDescription(buffer == null ? \"\" : buffer.toString().trim());\n                buffer = null;\n                state = State.INFO;\n            } else if (state == State.EXTRA_INFO) {\n                getMd().addExtraInfo(qName, buffer == null ? \"\" : buffer.toString());\n                buffer = null;\n                state = State.INFO;\n            } else if (state == State.DESCRIPTION) {\n                if (buffer.toString().endsWith(\"<\" + qName + \">\")) {\n                    buffer.deleteCharAt(buffer.length() - 1);\n                    buffer.append(\"/>\");\n                } else {\n                    buffer.append(\"<\/\" + qName + \">\");\n                }\n            }\n        }","id":105788,"modified_method":"public void endElement(String uri, String localName, String qName) throws SAXException {\n            if (state == State.PUB && \"artifact\".equals(qName) && artifact.getConfigurations().length == 0) {\n                String[] confs = publicationsDefaultConf == null ? getMd().getConfigurationsNames() : publicationsDefaultConf;\n                for (String confName : confs) {\n                    artifact.addConfiguration(confName.trim());\n                    getMd().addArtifact(confName.trim(), artifact);\n                }\n            } else if (\"configurations\".equals(qName)) {\n                checkConfigurations();\n            } else if ((state == State.DEP_ARTIFACT && \"artifact\".equals(qName))\n                    || (state == State.ARTIFACT_INCLUDE && \"include\".equals(qName))\n                    || (state == State.ARTIFACT_EXCLUDE && \"exclude\".equals(qName))) {\n                state = State.DEP;\n                if (confAware.getConfigurations().length == 0) {\n                    String[] confs = getMd().getConfigurationsNames();\n                    for (String confName : confs) {\n                        addConfiguration(confName);\n                    }\n                }\n                confAware = null;\n            } else if (\"exclude\".equals(qName) && state == State.EXCLUDE) {\n                if (confAware.getConfigurations().length == 0) {\n                    String[] confs = getMd().getConfigurationsNames();\n                    for (String confName : confs) {\n                        addConfiguration(confName);\n                    }\n                }\n                confAware = null;\n                state = State.DEPS;\n            } else if (\"dependency\".equals(qName) && state == State.DEP) {\n                if (dd.getModuleConfigurations().length == 0) {\n                    parseDepsConfs(getDefaultConf(), dd);\n                }\n                state = State.DEPS;\n            } else if (\"dependencies\".equals(qName) && state == State.DEPS) {\n                state = State.NONE;\n            } else if (state == State.INFO && \"info\".equals(qName)) {\n                state = State.NONE;\n            } else if (state == State.DESCRIPTION && \"description\".equals(qName)) {\n                getMd().setDescription(buffer == null ? \"\" : buffer.toString().trim());\n                buffer = null;\n                state = State.INFO;\n            } else if (state == State.EXTRA_INFO) {\n                getMd().addExtraInfo(qName, buffer == null ? \"\" : buffer.toString());\n                buffer = null;\n                state = State.INFO;\n            } else if (state == State.DESCRIPTION) {\n                if (buffer.toString().endsWith(\"<\" + qName + \">\")) {\n                    buffer.deleteCharAt(buffer.length() - 1);\n                    buffer.append(\"/>\");\n                } else {\n                    buffer.append(\"<\/\").append(qName).append(\">\");\n                }\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void mergeDependencies(DependencyDescriptor[] dependencies) {\n            DefaultModuleDescriptor md = getMd();\n            for (int i = 0; i < dependencies.length; i++) {\n                DependencyDescriptor dependencyDescriptor = dependencies[i];\n                Message.debug(\"Merging dependency with: \"\n                        + dependencyDescriptor.getDependencyRevisionId().toString());\n                md.addDependency(dependencyDescriptor);\n            }\n        }","id":105789,"modified_method":"private void mergeDependencies(DependencyDescriptor[] dependencies) {\n            DefaultModuleDescriptor md = getMd();\n            for (DependencyDescriptor dependencyDescriptor : dependencies) {\n                Message.debug(\"Merging dependency with: \" + dependencyDescriptor.getDependencyRevisionId().toString());\n                md.addDependency(dependencyDescriptor);\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void dependencyStarted(Attributes attributes) {\n            state = State.DEP;\n            String org = settings.substitute(attributes.getValue(\"org\"));\n            if (org == null) {\n                org = getMd().getModuleRevisionId().getOrganisation();\n            }\n            boolean force = Boolean.valueOf(settings.substitute(attributes.getValue(\"force\")))\n                    .booleanValue();\n            boolean changing = Boolean.valueOf(\n                settings.substitute(attributes.getValue(\"changing\"))).booleanValue();\n\n            String transitiveValue = settings.substitute(attributes.getValue(\"transitive\"));\n            boolean transitive = (transitiveValue == null) ? true : Boolean.valueOf(\n                attributes.getValue(\"transitive\")).booleanValue();\n\n            String name = settings.substitute(attributes.getValue(\"name\"));\n            String branch = settings.substitute(attributes.getValue(\"branch\"));\n            String branchConstraint = settings.substitute(attributes.getValue(\"branchConstraint\"));\n\n//            if (branchConstraint == null) {\n//                // there was no branch constraint before, so we should\n//                // set the branchConstraint to the current default branch\n//                branchConstraint = settings.getDefaultBranch(ModuleId.newInstance(org, name));\n//            }\n\n            String rev = settings.substitute(attributes.getValue(\"rev\"));\n            String revConstraint = settings.substitute(attributes.getValue(\"revConstraint\"));\n\n            Map extraAttributes = ExtendableItemHelper.getExtraAttributes(\n                settings, attributes, DEPENDENCY_REGULAR_ATTRIBUTES);\n\n            ModuleRevisionId revId = ModuleRevisionId.newInstance(org, name, branch, rev,\n                extraAttributes);\n            ModuleRevisionId dynamicId = null;\n            if ((revConstraint == null) && (branchConstraint == null)) {\n                // no dynamic constraints defined, so dynamicId equals revId\n                dynamicId = ModuleRevisionId.newInstance(org, name, branch, rev,\n                                extraAttributes, false);\n            } else {\n                if (branchConstraint == null) {\n                    // this situation occurs when there was no branch defined\n                    // in the original dependency descriptor. So the dynamicId\n                    // shouldn't contain a branch neither\n                    dynamicId = ModuleRevisionId.newInstance(org, name, null, revConstraint,\n                                    extraAttributes, false);\n                } else {\n                    dynamicId = ModuleRevisionId.newInstance(org, name, branchConstraint,\n                                    revConstraint, extraAttributes);\n                }\n            }\n\n            dd = new DefaultDependencyDescriptor(getMd(), revId, dynamicId, force, changing, transitive);\n            getMd().addDependency(dd);\n            String confs = settings.substitute(attributes.getValue(\"conf\"));\n            if (confs != null && confs.length() > 0) {\n                parseDepsConfs(confs, dd);\n            }\n        }","id":105790,"modified_method":"private void dependencyStarted(Attributes attributes) {\n            state = State.DEP;\n            String org = substitute(attributes.getValue(\"org\"));\n            if (org == null) {\n                org = getMd().getModuleRevisionId().getOrganisation();\n            }\n            boolean force = Boolean.valueOf(substitute(attributes.getValue(\"force\")));\n            boolean changing = Boolean.valueOf(substitute(attributes.getValue(\"changing\")));\n\n            String transitiveValue = substitute(attributes.getValue(\"transitive\"));\n            boolean transitive = (transitiveValue == null) ? true : Boolean.valueOf(transitiveValue);\n\n            String name = substitute(attributes.getValue(\"name\"));\n            String branch = substitute(attributes.getValue(\"branch\"));\n            String branchConstraint = substitute(attributes.getValue(\"branchConstraint\"));\n            String rev = substitute(attributes.getValue(\"rev\"));\n            String revConstraint = substitute(attributes.getValue(\"revConstraint\"));\n\n            Map extraAttributes = ExtendableItemHelper.getExtraAttributes(settings, attributes, DEPENDENCY_REGULAR_ATTRIBUTES);\n\n            ModuleRevisionId revId = ModuleRevisionId.newInstance(org, name, branch, rev, extraAttributes);\n            ModuleRevisionId dynamicId;\n            if ((revConstraint == null) && (branchConstraint == null)) {\n                // no dynamic constraints defined, so dynamicId equals revId\n                dynamicId = ModuleRevisionId.newInstance(org, name, branch, rev, extraAttributes, false);\n            } else {\n                if (branchConstraint == null) {\n                    // this situation occurs when there was no branch defined\n                    // in the original dependency descriptor. So the dynamicId\n                    // shouldn't contain a branch neither\n                    dynamicId = ModuleRevisionId.newInstance(org, name, null, revConstraint, extraAttributes, false);\n                } else {\n                    dynamicId = ModuleRevisionId.newInstance(org, name, branchConstraint, revConstraint, extraAttributes);\n                }\n            }\n\n            dd = new DefaultDependencyDescriptor(getMd(), revId, dynamicId, force, changing, transitive);\n            getMd().addDependency(dd);\n            String confs = substitute(attributes.getValue(\"conf\"));\n            if (confs != null && confs.length() > 0) {\n                parseDepsConfs(confs, dd);\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void dependenciesStarted(Attributes attributes) {\n            state = State.DEPS;\n            String defaultConf = settings.substitute(attributes.getValue(\"defaultconf\"));\n            if (defaultConf != null) {\n                setDefaultConf(defaultConf);\n            }\n            defaultConf = settings.substitute(attributes.getValue(\"defaultconfmapping\"));\n            if (defaultConf != null) {\n                setDefaultConfMapping(defaultConf);\n            }\n            String confMappingOverride = settings.substitute(attributes\n                    .getValue(\"confmappingoverride\"));\n            if (confMappingOverride != null) {\n                getMd().setMappingOverride(Boolean.valueOf(confMappingOverride).booleanValue());\n            }\n            checkConfigurations();\n        }","id":105791,"modified_method":"private void dependenciesStarted(Attributes attributes) {\n            state = State.DEPS;\n            String defaultConf = substitute(attributes.getValue(\"defaultconf\"));\n            if (defaultConf != null) {\n                setDefaultConf(defaultConf);\n            }\n            String defaultConfMapping = substitute(attributes.getValue(\"defaultconfmapping\"));\n            if (defaultConf != null) {\n                setDefaultConfMapping(defaultConfMapping);\n            }\n            String confMappingOverride = substitute(attributes.getValue(\"confmappingoverride\"));\n            if (confMappingOverride != null) {\n                getMd().setMappingOverride(Boolean.valueOf(confMappingOverride));\n            }\n            checkConfigurations();\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected PatternMatcher getPatternMatcher(String m) {\n            String matcherName = settings.substitute(m);\n            PatternMatcher matcher = matcherName == null ? defaultMatcher : settings\n                    .getMatcher(matcherName);\n            if (matcher == null) {\n                throw new IllegalArgumentException(\"unknown matcher \" + matcherName);\n            }\n            return matcher;\n        }","id":105792,"modified_method":"private PatternMatcher getPatternMatcher(String m) {\n            String matcherName = substitute(m);\n            PatternMatcher matcher = matcherName == null ? defaultMatcher : settings\n                    .getMatcher(matcherName);\n            if (matcher == null) {\n                throw new IllegalArgumentException(\"unknown matcher \" + matcherName);\n            }\n            return matcher;\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void managerStarted(Attributes attributes, String managerAtt) {\n            String org = settings.substitute(attributes.getValue(\"org\"));\n            org = org == null ? PatternMatcher.ANY_EXPRESSION : org;\n            String mod = settings.substitute(attributes.getValue(\"module\"));\n            mod = mod == null ? PatternMatcher.ANY_EXPRESSION : mod;\n            ConflictManager cm;\n            String name = settings.substitute(attributes.getValue(managerAtt));\n            String rev = settings.substitute(attributes.getValue(\"rev\"));\n            if (rev != null) {\n                String[] revs = rev.split(\",\");\n                for (int i = 0; i < revs.length; i++) {\n                    revs[i] = revs[i].trim();\n                }\n                cm = new FixedConflictManager(revs);\n            } else if (name != null) {\n                cm = settings.getConflictManager(name);\n                if (cm == null) {\n                    addError(\"unknown conflict manager: \" + name);\n                    return;\n                }\n            } else {\n                addError(\"bad conflict manager: no manager nor rev\");\n                return;\n            }\n            String matcherName = settings.substitute(attributes.getValue(\"matcher\"));\n            PatternMatcher matcher = matcherName == null ? defaultMatcher : settings\n                    .getMatcher(matcherName);\n            if (matcher == null) {\n                addError(\"unknown matcher: \" + matcherName);\n                return;\n            }\n            getMd().addConflictManager(new ModuleId(org, mod), matcher, cm);\n        }","id":105793,"modified_method":"private void managerStarted(Attributes attributes, String managerAtt) {\n            String org = elvis(substitute(attributes.getValue(\"org\")), PatternMatcher.ANY_EXPRESSION);\n            String mod = elvis(substitute(attributes.getValue(\"module\")), PatternMatcher.ANY_EXPRESSION);\n            String name = substitute(attributes.getValue(managerAtt));\n            String rev = substitute(attributes.getValue(\"rev\"));\n            ConflictManager cm;\n            if (rev != null) {\n                String[] revs = rev.split(\",\");\n                for (int i = 0; i < revs.length; i++) {\n                    revs[i] = revs[i].trim();\n                }\n                cm = new FixedConflictManager(revs);\n            } else if (name != null) {\n                cm = settings.getConflictManager(name);\n                if (cm == null) {\n                    addError(\"unknown conflict manager: \" + name);\n                    return;\n                }\n            } else {\n                addError(\"bad conflict manager: no manager nor rev\");\n                return;\n            }\n            String matcherName = substitute(attributes.getValue(\"matcher\"));\n            PatternMatcher matcher = matcherName == null ? defaultMatcher : settings.getMatcher(matcherName);\n            if (matcher == null) {\n                addError(\"unknown matcher: \" + matcherName);\n                return;\n            }\n            getMd().addConflictManager(new ModuleId(org, mod), matcher, cm);\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void mergeDescription(String description) {\n            String current = getMd().getDescription();\n            if (current == null || current.trim().length() == 0) {\n                getMd().setDescription(description);\n            }\n        }","id":105794,"modified_method":"private void mergeDescription(String description) {\n            String current = getMd().getDescription();\n            if (current == null || current.trim().length() == 0) {\n                getMd().setDescription(description);\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void artifactStarted(String qName, Attributes attributes)\n                throws MalformedURLException {\n            if (state == State.PUB) {\n                // this is a published artifact\n                String artName = settings.substitute(attributes.getValue(\"name\"));\n                artName = artName == null ? getMd().getModuleRevisionId().getName() : artName;\n                String type = settings.substitute(attributes.getValue(\"type\"));\n                type = type == null ? \"jar\" : type;\n                String ext = settings.substitute(attributes.getValue(\"ext\"));\n                ext = ext != null ? ext : type;\n                String url = settings.substitute(attributes.getValue(\"url\"));\n                artifact = new MDArtifact(getMd(), artName, type, ext, url == null ? null\n                        : new URL(url), ExtendableItemHelper.getExtraAttributes(\n                            settings, attributes, new String[] {\"ext\", \"type\", \"name\", \"conf\"}));\n                String confs = settings.substitute(attributes.getValue(\"conf\"));\n                // only add confs if they are specified. if they aren't, endElement will\n                // handle this\n                // only if there are no conf defined in sub elements\n                if (confs != null && confs.length() > 0) {\n                    String[] conf;\n                    if (\"*\".equals(confs)) {\n                        conf = getMd().getConfigurationsNames();\n                    } else {\n                        conf = confs.split(\",\");\n                    }\n                    for (int i = 0; i < conf.length; i++) {\n                        artifact.addConfiguration(conf[i].trim());\n                        getMd().addArtifact(conf[i].trim(), artifact);\n                    }\n                }\n            } else if (state == State.DEP) {\n                // this is an artifact asked for a particular dependency\n                addDependencyArtifacts(qName, attributes);\n            } else if (validate) {\n                addError(\"artifact tag found in invalid tag: \" + state);\n            }\n        }","id":105795,"modified_method":"private void artifactStarted(String qName, Attributes attributes)\n                throws MalformedURLException {\n            if (state == State.PUB) {\n                // this is a published artifact\n                String artName = elvis(substitute(attributes.getValue(\"name\")), getMd().getModuleRevisionId().getName());\n                String type = elvis(substitute(attributes.getValue(\"type\")), \"jar\");\n                String ext = elvis(substitute(attributes.getValue(\"ext\")), type);\n                String url = substitute(attributes.getValue(\"url\"));\n                Map extraAttributes = ExtendableItemHelper.getExtraAttributes(settings, attributes, new String[]{\"ext\", \"type\", \"name\", \"conf\"});\n                artifact = new MDArtifact(getMd(), artName, type, ext, url == null ? null : new URL(url), extraAttributes);\n                String confs = substitute(attributes.getValue(\"conf\"));\n                \n                // Only add confs if they are specified. if they aren't, endElement will handle this only if there are no conf defined in sub elements\n                if (confs != null && confs.length() > 0) {\n                    String[] conf;\n                    if (\"*\".equals(confs)) {\n                        conf = getMd().getConfigurationsNames();\n                    } else {\n                        conf = confs.split(\",\");\n                    }\n                    for (String confName : conf) {\n                        artifact.addConfiguration(confName.trim());\n                        getMd().addArtifact(confName.trim(), artifact);\n                    }\n                }\n            } else if (state == State.DEP) {\n                // this is an artifact asked for a particular dependency\n                addDependencyArtifacts(qName, attributes);\n            } else if (validate) {\n                addError(\"artifact tag found in invalid tag: \" + state);\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"public void parse() throws ParseException,\n                IOException {\n            try {\n                URL schemaURL = validate ? getSchemaURL() : null;\n                if (descriptorURL != null) {\n                    XMLHelper.parse(descriptorURL, schemaURL, this);\n                } else {\n                    XMLHelper.parse(descriptorInput, schemaURL, this, null);\n                }\n                checkConfigurations();\n                replaceConfigurationWildcards();\n                getMd().setModuleArtifact(\n                    DefaultArtifact.newIvyArtifact(\n                        getMd().getResolvedModuleRevisionId(), getMd().getPublicationDate()));\n                if (!artifactsDeclared) {\n                    String[] confs = getMd().getConfigurationsNames();\n                    for (int i = 0; i < confs.length; i++) {\n                        getMd().addArtifact(confs[i],\n                            new MDArtifact(getMd(), getMd().getModuleRevisionId().getName(),\n                                \"jar\", \"jar\"));\n                    }\n                }\n                getMd().check();\n            } catch (ParserConfigurationException ex) {\n                IllegalStateException ise = new IllegalStateException(ex.getMessage() + \" in \"\n                        + descriptorURL);\n                ise.initCause(ex);\n                throw ise;\n            } catch (Exception ex) {\n                checkErrors();\n                ParseException pe = new ParseException(ex.getMessage() + \" in \" + descriptorURL, 0);\n                pe.initCause(ex);\n                throw pe;\n            }\n        }","id":105796,"modified_method":"public void parse() throws ParseException,\n                IOException {\n            try {\n                URL schemaURL = validate ? getSchemaURL() : null;\n                if (descriptorURL != null) {\n                    XMLHelper.parse(descriptorURL, schemaURL, this);\n                } else {\n                    XMLHelper.parse(descriptorInput, schemaURL, this, null);\n                }\n                checkConfigurations();\n                replaceConfigurationWildcards();\n                getMd().setModuleArtifact(DefaultArtifact.newIvyArtifact(getMd().getResolvedModuleRevisionId(), getMd().getPublicationDate()));\n                if (!artifactsDeclared) {\n                    String[] configurationNames = getMd().getConfigurationsNames();\n                    for (String configurationName : configurationNames) {\n                        getMd().addArtifact(configurationName, new MDArtifact(getMd(), getMd().getModuleRevisionId().getName(), \"jar\", \"jar\"));\n                    }\n                }\n                getMd().check();\n            } catch (ParserConfigurationException ex) {\n                IllegalStateException ise = new IllegalStateException(ex.getMessage() + \" in \"\n                        + descriptorURL);\n                ise.initCause(ex);\n                throw ise;\n            } catch (Exception ex) {\n                checkErrors();\n                ParseException pe = new ParseException(ex.getMessage() + \" in \" + descriptorURL, 0);\n                pe.initCause(ex);\n                throw pe;\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"public Parser(ModuleDescriptorParser parser, ParserSettings ivySettings) {\n            super(parser);\n            settings = ivySettings;\n        }","id":105797,"modified_method":"public Parser(ModuleDescriptorParser parser, ParserSettings ivySettings, Resource res) {\n            super(parser);\n            settings = ivySettings;\n            setResource(res);\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"public void startElement(String uri, String localName, String qName, Attributes attributes)\n                throws SAXException {\n            try {\n                if (state == State.DESCRIPTION) {\n                    // make sure we don't interpret any tag while in description tag\n                    getBuffer().append(\"<\").append(qName);\n                    for (int i = 0; i < attributes.getLength(); i++) {\n                        getBuffer().append(\" \");\n                        getBuffer().append(attributes.getQName(i));\n                        getBuffer().append(\"=\\\"\");\n                        getBuffer().append(attributes.getValue(i));\n                        getBuffer().append(\"\\\"\");\n                    }\n                    getBuffer().append(\">\");\n                    return;\n                } else if (\"ivy-module\".equals(qName)) {\n                    ivyModuleStarted(attributes);\n                } else if (\"info\".equals(qName)) {\n                    infoStarted(attributes);\n                } else if (state == State.INFO && \"extends\".equals(qName)) {\n                    extendsStarted(attributes);\n                } else if (state == State.INFO && \"license\".equals(qName)) {\n                    getMd().addLicense(new License(settings.substitute(attributes.getValue(\"name\")),\n                                        settings.substitute(attributes.getValue(\"url\"))));\n                } else if (state == State.INFO && \"description\".equals(qName)) {\n                    getMd().setHomePage(settings.substitute(attributes.getValue(\"homepage\")));\n                    state = State.DESCRIPTION;\n                    buffer = new StringBuffer();\n                } else if (state == State.INFO && isOtherNamespace(qName)) {\n                    buffer = new StringBuffer();\n                    state = State.EXTRA_INFO;\n                } else if (\"configurations\".equals(qName)) {\n                    configurationStarted(attributes);\n                } else if (\"publications\".equals(qName)) {\n                    publicationsStarted(attributes);\n                } else if (\"dependencies\".equals(qName)) {\n                    dependenciesStarted(attributes);\n                } else if (\"conflicts\".equals(qName)) {\n                    if (!descriptorVersion.startsWith(\"1.\")) {\n                        Message.deprecated(\"using conflicts section is deprecated: \"\n                                + \"please use hints section instead. Ivy file URL: \" + descriptorURL);\n                    }\n                    state = State.CONFLICT;\n                    checkConfigurations();\n                } else if (\"artifact\".equals(qName)) {\n                    artifactStarted(qName, attributes);\n                } else if (\"include\".equals(qName) && state == State.DEP) {\n                    addIncludeRule(qName, attributes);\n                } else if (\"exclude\".equals(qName) && state == State.DEP) {\n                    addExcludeRule(qName, attributes);\n                } else if (\"exclude\".equals(qName) && state == State.DEPS) {\n                    state = State.EXCLUDE;\n                    parseRule(qName, attributes);\n                    getMd().addExcludeRule((ExcludeRule) confAware);\n                } else if (\"dependency\".equals(qName)) {\n                    dependencyStarted(attributes);\n                } else if (\"conf\".equals(qName)) {\n                    confStarted(attributes);\n                } else if (\"mapped\".equals(qName)) {\n                    dd.addDependencyConfiguration(conf, settings.substitute(attributes\n                            .getValue(\"name\")));\n                } else if ((\"conflict\".equals(qName) && state == State.DEPS)\n                        || \"manager\".equals(qName) && state == State.CONFLICT) {\n                    managerStarted(attributes, state == State.CONFLICT ? \"name\" : \"manager\");\n                } else if (\"override\".equals(qName) && state == State.DEPS) {\n                    mediationOverrideStarted(attributes);\n                } else if (\"include\".equals(qName) && state == State.CONF) {\n                    includeConfStarted(attributes);\n                } else if (validate && state != State.EXTRA_INFO && state != State.DESCRIPTION) {\n                    addError(\"unknown tag \" + qName);\n                }\n            } catch (Exception ex) {\n                if (ex instanceof SAXException) {\n                    throw (SAXException) ex;\n                }\n                SAXException sax = new SAXException(\"Problem occurred while parsing ivy file: \"\n                        + ex.getMessage(), ex);\n                sax.initCause(ex);\n                throw sax;\n            }\n        }","id":105798,"modified_method":"public void startElement(String uri, String localName, String qName, Attributes attributes)\n                throws SAXException {\n            try {\n                if (state == State.DESCRIPTION) {\n                    // make sure we don't interpret any tag while in description tag\n                    descriptionStarted(qName, attributes);\n                } else if (\"ivy-module\".equals(qName)) {\n                    ivyModuleStarted(attributes);\n                } else if (\"info\".equals(qName)) {\n                    infoStarted(attributes);\n                } else if (state == State.INFO && \"extends\".equals(qName)) {\n                    extendsStarted(attributes);\n                } else if (state == State.INFO && \"license\".equals(qName)) {\n                    getMd().addLicense(new License(substitute(attributes.getValue(\"name\")), substitute(attributes.getValue(\"url\"))));\n                } else if (state == State.INFO && \"description\".equals(qName)) {\n                    getMd().setHomePage(substitute(attributes.getValue(\"homepage\")));\n                    state = State.DESCRIPTION;\n                    buffer = new StringBuffer();\n                } else if (state == State.INFO && isOtherNamespace(qName)) {\n                    buffer = new StringBuffer();\n                    state = State.EXTRA_INFO;\n                } else if (\"configurations\".equals(qName)) {\n                    configurationStarted(attributes);\n                } else if (\"publications\".equals(qName)) {\n                    publicationsStarted(attributes);\n                } else if (\"dependencies\".equals(qName)) {\n                    dependenciesStarted(attributes);\n                } else if (\"conflicts\".equals(qName)) {\n                    if (!descriptorVersion.startsWith(\"1.\")) {\n                        Message.deprecated(\"using conflicts section is deprecated: \"\n                                + \"please use hints section instead. Ivy file URL: \" + descriptorURL);\n                    }\n                    state = State.CONFLICT;\n                    checkConfigurations();\n                } else if (\"artifact\".equals(qName)) {\n                    artifactStarted(qName, attributes);\n                } else if (\"include\".equals(qName) && state == State.DEP) {\n                    addIncludeRule(qName, attributes);\n                } else if (\"exclude\".equals(qName) && state == State.DEP) {\n                    addExcludeRule(qName, attributes);\n                } else if (\"exclude\".equals(qName) && state == State.DEPS) {\n                    state = State.EXCLUDE;\n                    parseRule(qName, attributes);\n                    getMd().addExcludeRule((ExcludeRule) confAware);\n                } else if (\"dependency\".equals(qName)) {\n                    dependencyStarted(attributes);\n                } else if (\"conf\".equals(qName)) {\n                    confStarted(attributes);\n                } else if (\"mapped\".equals(qName)) {\n                    dd.addDependencyConfiguration(conf, substitute(attributes.getValue(\"name\")));\n                } else if ((\"conflict\".equals(qName) && state == State.DEPS) || \"manager\".equals(qName) && state == State.CONFLICT) {\n                    managerStarted(attributes, state == State.CONFLICT ? \"name\" : \"manager\");\n                } else if (\"override\".equals(qName) && state == State.DEPS) {\n                    mediationOverrideStarted(attributes);\n                } else if (\"include\".equals(qName) && state == State.CONF) {\n                    includeConfStarted(attributes);\n                } else if (validate && state != State.EXTRA_INFO && state != State.DESCRIPTION) {\n                    addError(\"unknown tag \" + qName);\n                }\n            } catch (Exception ex) {\n                if (ex instanceof SAXException) {\n                    throw (SAXException) ex;\n                }\n                SAXException sax = new SAXException(\"Problem occurred while parsing ivy file: \"\n                        + ex.getMessage(), ex);\n                sax.initCause(ex);\n                throw sax;\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void parseRule(String tag, Attributes attributes) throws MalformedURLException {\n            String name = settings.substitute(attributes.getValue(\"name\"));\n            if (name == null) {\n                name = settings.substitute(attributes.getValue(\"artifact\"));\n                if (name == null) {\n                    name = \"artifact\".equals(tag) ? dd.getDependencyId().getName()\n                            : PatternMatcher.ANY_EXPRESSION;\n                }\n            }\n            String type = settings.substitute(attributes.getValue(\"type\"));\n            if (type == null) {\n                type = \"artifact\".equals(tag) ? \"jar\" : PatternMatcher.ANY_EXPRESSION;\n            }\n            String ext = settings.substitute(attributes.getValue(\"ext\"));\n            ext = ext != null ? ext : type;\n            if (state == State.DEP_ARTIFACT) {\n                String url = settings.substitute(attributes.getValue(\"url\"));\n                Map extraAtt = ExtendableItemHelper.getExtraAttributes(settings, attributes,\n                    new String[] {\"name\", \"type\", \"ext\", \"url\", \"conf\"});\n                confAware = new DefaultDependencyArtifactDescriptor(dd, name, type, ext,\n                        url == null ? null : new URL(url), extraAtt);\n            } else if (state == State.ARTIFACT_INCLUDE) {\n                PatternMatcher matcher = getPatternMatcher(attributes.getValue(\"matcher\"));\n                String org = settings.substitute(attributes.getValue(\"org\"));\n                org = org == null ? PatternMatcher.ANY_EXPRESSION : org;\n                String module = settings.substitute(attributes.getValue(\"module\"));\n                module = module == null ? PatternMatcher.ANY_EXPRESSION : module;\n                ArtifactId aid = new ArtifactId(new ModuleId(org, module), name, type, ext);\n                Map extraAtt = ExtendableItemHelper.getExtraAttributes(settings, attributes,\n                    new String[] {\"org\", \"module\", \"name\", \"type\", \"ext\", \"matcher\", \"conf\"});\n                confAware = new DefaultIncludeRule(aid, matcher, extraAtt);\n            } else { // _state == ARTIFACT_EXCLUDE || EXCLUDE\n                PatternMatcher matcher = getPatternMatcher(attributes.getValue(\"matcher\"));\n                String org = settings.substitute(attributes.getValue(\"org\"));\n                org = org == null ? PatternMatcher.ANY_EXPRESSION : org;\n                String module = settings.substitute(attributes.getValue(\"module\"));\n                module = module == null ? PatternMatcher.ANY_EXPRESSION : module;\n                ArtifactId aid = new ArtifactId(new ModuleId(org, module), name, type, ext);\n                Map extraAtt = ExtendableItemHelper.getExtraAttributes(settings, attributes,\n                    new String[] {\"org\", \"module\", \"name\", \"type\", \"ext\", \"matcher\", \"conf\"});\n                confAware = new DefaultExcludeRule(aid, matcher, extraAtt);\n            }\n            String confs = settings.substitute(attributes.getValue(\"conf\"));\n            // only add confs if they are specified. if they aren't, endElement will handle this\n            // only if there are no conf defined in sub elements\n            if (confs != null && confs.length() > 0) {\n                String[] conf;\n                if (\"*\".equals(confs)) {\n                    conf = getMd().getConfigurationsNames();\n                } else {\n                    conf = confs.split(\",\");\n                }\n                for (int i = 0; i < conf.length; i++) {\n                    addConfiguration(conf[i].trim());\n                }\n            }\n        }","id":105799,"modified_method":"private void parseRule(String tag, Attributes attributes) throws MalformedURLException {\n            String name = substitute(attributes.getValue(\"name\"));\n            if (name == null) {\n                name = substitute(attributes.getValue(\"artifact\"));\n                if (name == null) {\n                    name = \"artifact\".equals(tag) ? dd.getDependencyId().getName()\n                            : PatternMatcher.ANY_EXPRESSION;\n                }\n            }\n            String type = substitute(attributes.getValue(\"type\"));\n            if (type == null) {\n                type = \"artifact\".equals(tag) ? \"jar\" : PatternMatcher.ANY_EXPRESSION;\n            }\n            String ext = substitute(attributes.getValue(\"ext\"));\n            ext = ext != null ? ext : type;\n            if (state == State.DEP_ARTIFACT) {\n                String url = substitute(attributes.getValue(\"url\"));\n                Map extraAttributes = ExtendableItemHelper.getExtraAttributes(settings, attributes, new String[]{\"name\", \"type\", \"ext\", \"url\", \"conf\"});\n                confAware = new DefaultDependencyArtifactDescriptor(dd, name, type, ext, url == null ? null : new URL(url), extraAttributes);\n            } else if (state == State.ARTIFACT_INCLUDE) {\n                PatternMatcher matcher = getPatternMatcher(attributes.getValue(\"matcher\"));\n                String org = elvis(substitute(attributes.getValue(\"org\")), PatternMatcher.ANY_EXPRESSION);\n                String module = elvis(substitute(attributes.getValue(\"module\")), PatternMatcher.ANY_EXPRESSION);\n                ArtifactId aid = new ArtifactId(new ModuleId(org, module), name, type, ext);\n                Map extraAttributes = ExtendableItemHelper.getExtraAttributes(settings, attributes, new String[]{\"org\", \"module\", \"name\", \"type\", \"ext\", \"matcher\", \"conf\"});\n                confAware = new DefaultIncludeRule(aid, matcher, extraAttributes);\n            } else { // _state == ARTIFACT_EXCLUDE || EXCLUDE\n                PatternMatcher matcher = getPatternMatcher(attributes.getValue(\"matcher\"));\n                String org = elvis(substitute(attributes.getValue(\"org\")), PatternMatcher.ANY_EXPRESSION);\n                String module = elvis(substitute(attributes.getValue(\"module\")), PatternMatcher.ANY_EXPRESSION);\n                ArtifactId aid = new ArtifactId(new ModuleId(org, module), name, type, ext);\n                Map extraAttributes = ExtendableItemHelper.getExtraAttributes(settings, attributes, new String[]{\"org\", \"module\", \"name\", \"type\", \"ext\", \"matcher\", \"conf\"});\n                confAware = new DefaultExcludeRule(aid, matcher, extraAttributes);\n            }\n            String confs = substitute(attributes.getValue(\"conf\"));\n            // only add confs if they are specified. if they aren't, endElement will handle this\n            // only if there are no conf defined in sub elements\n            if (confs != null && confs.length() > 0) {\n                String[] conf;\n                if (\"*\".equals(confs)) {\n                    conf = getMd().getConfigurationsNames();\n                } else {\n                    conf = confs.split(\",\");\n                }\n                for (String confName : conf) {\n                    addConfiguration(confName.trim());\n                }\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void infoStarted(Attributes attributes) {\n            state = State.INFO;\n            String org = settings.substitute(attributes.getValue(\"organisation\"));\n            String module = settings.substitute(attributes.getValue(\"module\"));\n            String revision = settings.substitute(attributes.getValue(\"revision\"));\n            String branch = settings.substitute(attributes.getValue(\"branch\"));\n            getMd().setModuleRevisionId(ModuleRevisionId.newInstance(org, module, branch,\n                revision, ExtendableItemHelper.getExtraAttributes(settings, attributes,\n                    new String[] {\n                        \"organisation\", \"module\", \"revision\", \"status\", \"publication\",\n                        \"branch\", \"namespace\", \"default\", \"resolver\"})));\n\n            String namespace = settings.substitute(attributes.getValue(\"namespace\"));\n            if (namespace != null) {\n                Namespace ns = settings.getNamespace(namespace);\n                if (ns == null) {\n                    Message.warn(\"namespace not found for \" + getMd().getModuleRevisionId()\n                            + \": \" + namespace);\n                } else {\n                    getMd().setNamespace(ns);\n                }\n            }\n\n            String status = settings.substitute(attributes.getValue(\"status\"));\n            getMd().setStatus(status == null ? settings.getStatusManager().getDefaultStatus()\n                    : status);\n            getMd().setDefault(Boolean.valueOf(settings.substitute(attributes.getValue(\"default\")))\n                    .booleanValue());\n            String pubDate = settings.substitute(attributes.getValue(\"publication\"));\n            if (pubDate != null && pubDate.length() > 0) {\n                try {\n                    final SimpleDateFormat ivyDateFormat = new SimpleDateFormat(IVY_DATE_FORMAT_PATTERN);\n                    getMd().setPublicationDate(ivyDateFormat.parse(pubDate));\n                } catch (ParseException e) {\n                    addError(\"invalid publication date format: \" + pubDate);\n                    getMd().setPublicationDate(getDefaultPubDate());\n                }\n            } else {\n                getMd().setPublicationDate(getDefaultPubDate());\n            }\n        }","id":105800,"modified_method":"private void infoStarted(Attributes attributes) {\n            state = State.INFO;\n            String org = substitute(attributes.getValue(\"organisation\"));\n            String module = substitute(attributes.getValue(\"module\"));\n            String revision = substitute(attributes.getValue(\"revision\"));\n            String branch = substitute(attributes.getValue(\"branch\"));\n            Map extraAttributes = ExtendableItemHelper.getExtraAttributes(settings, attributes, \n                    new String[]{\"organisation\", \"module\", \"revision\", \"status\", \"publication\", \"branch\", \"namespace\", \"default\", \"resolver\"});\n            getMd().setModuleRevisionId(ModuleRevisionId.newInstance(org, module, branch, revision, extraAttributes));\n\n            String namespace = substitute(attributes.getValue(\"namespace\"));\n            if (namespace != null) {\n                Namespace ns = settings.getNamespace(namespace);\n                if (ns == null) {\n                    Message.warn(\"namespace not found for \" + getMd().getModuleRevisionId() + \": \" + namespace);\n                } else {\n                    getMd().setNamespace(ns);\n                }\n            }\n\n            getMd().setStatus(elvis(substitute(attributes.getValue(\"status\")), settings.getStatusManager().getDefaultStatus()));\n            getMd().setDefault(Boolean.valueOf(substitute(attributes.getValue(\"default\"))));\n            String pubDate = substitute(attributes.getValue(\"publication\"));\n            if (pubDate != null && pubDate.length() > 0) {\n                try {\n                    final SimpleDateFormat ivyDateFormat = new SimpleDateFormat(IVY_DATE_FORMAT_PATTERN);\n                    getMd().setPublicationDate(ivyDateFormat.parse(pubDate));\n                } catch (ParseException e) {\n                    addError(\"invalid publication date format: \" + pubDate);\n                    getMd().setPublicationDate(getDefaultPubDate());\n                }\n            } else {\n                getMd().setPublicationDate(getDefaultPubDate());\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected ModuleDescriptor parseOtherIvyFile(String parentOrganisation,\n                String parentModule, String parentRevision) throws ParseException {\n            ModuleId parentModuleId = new ModuleId(parentOrganisation, parentModule);\n            ModuleRevisionId parentMrid = new ModuleRevisionId(parentModuleId, parentRevision);\n\n            DependencyDescriptor dd = new DefaultDependencyDescriptor(parentMrid, true);\n            ResolveData data = IvyContext.getContext().getResolveData();\n            if (data == null) {\n                ResolveEngine engine = IvyContext.getContext().getIvy().getResolveEngine();\n                ResolveOptions options = new ResolveOptions();\n                options.setDownload(false);\n                data = new ResolveData(engine, options);\n            }\n\n            DependencyResolver resolver = getSettings().getResolver(parentMrid);\n            if (resolver == null) {\n                // TODO: Throw exception here?\n                return null;\n            } else {\n                dd = NameSpaceHelper.toSystem(dd, getSettings().getContextNamespace());\n                ResolvedModuleRevision otherModule = resolver.getDependency(dd, data);\n                if (otherModule == null) {\n                    throw new ParseException(\"Unable to find \" + parentMrid.toString(), 0);\n                }\n                return otherModule.getDescriptor();\n            }\n\n        }","id":105801,"modified_method":"private ModuleDescriptor parseOtherIvyFile(String parentOrganisation,\n                String parentModule, String parentRevision) throws ParseException {\n            ModuleId parentModuleId = new ModuleId(parentOrganisation, parentModule);\n            ModuleRevisionId parentMrid = new ModuleRevisionId(parentModuleId, parentRevision);\n\n            DependencyDescriptor dd = new DefaultDependencyDescriptor(parentMrid, true);\n            ResolveData data = IvyContext.getContext().getResolveData();\n            if (data == null) {\n                ResolveEngine engine = IvyContext.getContext().getIvy().getResolveEngine();\n                ResolveOptions options = new ResolveOptions();\n                options.setDownload(false);\n                data = new ResolveData(engine, options);\n            }\n\n            DependencyResolver resolver = settings.getResolver(parentMrid);\n            if (resolver == null) {\n                // TODO: Throw exception here?\n                return null;\n            } else {\n                dd = NameSpaceHelper.toSystem(dd, settings.getContextNamespace());\n                ResolvedModuleRevision otherModule = resolver.getDependency(dd, data);\n                if (otherModule == null) {\n                    throw new ParseException(\"Unable to find \" + parentMrid.toString(), 0);\n                }\n                return otherModule.getDescriptor();\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void addIncludeRule(String tag, Attributes attributes)\n                throws MalformedURLException {\n            state = State.ARTIFACT_INCLUDE;\n            parseRule(tag, attributes);\n        }","id":105802,"modified_method":"private void addIncludeRule(String tag, Attributes attributes)\n                throws MalformedURLException {\n            state = State.ARTIFACT_INCLUDE;\n            parseRule(tag, attributes);\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void extendsStarted(Attributes attributes) throws ParseException {\n            String parentOrganisation = attributes.getValue(\"organisation\");\n            String parentModule = attributes.getValue(\"module\");\n            String parentRevision = attributes.getValue(\"revision\");\n            String location = attributes.getValue(\"location\") != null ? attributes\n                    .getValue(\"location\") : getDefaultParentLocation();\n            ModuleDescriptor parent = null;\n\n            String extendType = attributes.getValue(\"extendType\") != null ? attributes.getValue(\n                \"extendType\").toLowerCase() : \"all\";\n\n            List/* <String> */extendTypes = Arrays.asList(extendType.split(\",\"));\n\n            try {\n                Message.debug(\"Trying to parse included ivy file :\" + location);\n                parent = parseOtherIvyFileOnFileSystem(location);\n\n                //verify that the parsed descriptor is the correct parent module.\n                ModuleId expected = new ModuleId(parentOrganisation, parentModule);\n                ModuleId pid = parent.getModuleRevisionId().getModuleId();\n                if (!expected.equals(pid)) {\n                    Message.verbose(\"Ignoring parent Ivy file \" + location + \"; expected \"\n                        + expected + \" but found \" + pid);\n                    parent = null;\n                }\n\n            } catch (ParseException e) {\n                Message.warn(\"Unable to parse included ivy file \" + location + \": \"\n                    + e.getMessage());\n            } catch (IOException e) {\n                Message.warn(\"Unable to parse included ivy file \" + location + \": \"\n                    + e.getMessage());\n            }\n\n            // if the included ivy file is not found on file system, tries to resolve using\n            // repositories\n            if (parent == null) {\n                try {\n                    Message.debug(\n                        \"Trying to parse included ivy file by asking repository for module :\"\n                                    + parentOrganisation\n                                    + \"#\"\n                                    + parentModule\n                                    + \";\"\n                                    + parentRevision);\n                    parent = parseOtherIvyFile(parentOrganisation, parentModule, parentRevision);\n                } catch (ParseException e) {\n                    Message.warn(\"Unable to parse included ivy file for \" + parentOrganisation\n                            + \"#\" + parentModule + \";\" + parentRevision);\n                }\n            }\n\n            if (parent == null) {\n                throw new ParseException(\"Unable to parse included ivy file for \"\n                        + parentOrganisation + \"#\" + parentModule + \";\" + parentRevision, 0);\n            }\n\n            DefaultExtendsDescriptor ed = new DefaultExtendsDescriptor(\n                    parent.getModuleRevisionId(),\n                    parent.getResolvedModuleRevisionId(),\n                    attributes.getValue(\"location\"),\n                    (String[]) extendTypes.toArray(new String[extendTypes.size()]));\n            getMd().addInheritedDescriptor(ed);\n\n            mergeWithOtherModuleDescriptor(extendTypes, parent);\n        }","id":105803,"modified_method":"private void extendsStarted(Attributes attributes) throws ParseException {\n            String parentOrganisation = attributes.getValue(\"organisation\");\n            String parentModule = attributes.getValue(\"module\");\n            String parentRevision = attributes.getValue(\"revision\");\n            String location = elvis(attributes.getValue(\"location\"), getDefaultParentLocation());\n\n            String extendType = elvis(attributes.getValue(\"extendType\"), \"all\").toLowerCase();\n            List<String> extendTypes = Arrays.asList(extendType.split(\",\"));\n\n            ModuleDescriptor parent = null;\n            try {\n                Message.debug(\"Trying to parse included ivy file :\" + location);\n                parent = parseOtherIvyFileOnFileSystem(location);\n\n                //verify that the parsed descriptor is the correct parent module.\n                ModuleId expected = new ModuleId(parentOrganisation, parentModule);\n                ModuleId pid = parent.getModuleRevisionId().getModuleId();\n                if (!expected.equals(pid)) {\n                    Message.verbose(\"Ignoring parent Ivy file \" + location + \"; expected \" + expected + \" but found \" + pid);\n                    parent = null;\n                }\n\n            } catch (ParseException e) {\n                Message.warn(\"Unable to parse included ivy file \" + location + \": \" + e.getMessage());\n            } catch (IOException e) {\n                Message.warn(\"Unable to parse included ivy file \" + location + \": \" + e.getMessage());\n            }\n\n            // if the included ivy file is not found on file system, tries to resolve using\n            // repositories\n            if (parent == null) {\n                try {\n                    Message.debug(\n                        \"Trying to parse included ivy file by asking repository for module :\"\n                                    + parentOrganisation\n                                    + \"#\"\n                                    + parentModule\n                                    + \";\"\n                                    + parentRevision);\n                    parent = parseOtherIvyFile(parentOrganisation, parentModule, parentRevision);\n                } catch (ParseException e) {\n                    Message.warn(\"Unable to parse included ivy file for \" + parentOrganisation + \"#\" + parentModule + \";\" + parentRevision);\n                }\n            }\n\n            if (parent == null) {\n                throw new ParseException(\"Unable to parse included ivy file for \" + parentOrganisation + \"#\" + parentModule + \";\" + parentRevision, 0);\n            }\n\n            DefaultExtendsDescriptor ed = new DefaultExtendsDescriptor(\n                    parent.getModuleRevisionId(),\n                    parent.getResolvedModuleRevisionId(),\n                    attributes.getValue(\"location\"),\n                    extendTypes.toArray(new String[extendTypes.size()]));\n            getMd().addInheritedDescriptor(ed);\n\n            mergeWithOtherModuleDescriptor(extendTypes, parent);\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void configurationStarted(Attributes attributes) {\n            state = State.CONF;\n            setDefaultConfMapping(settings\n                    .substitute(attributes.getValue(\"defaultconfmapping\")));\n            setDefaultConf(settings.substitute(attributes.getValue(\"defaultconf\")));\n            getMd()\n                    .setMappingOverride(Boolean.valueOf(\n                        settings.substitute(attributes.getValue(\"confmappingoverride\")))\n                            .booleanValue());\n        }","id":105804,"modified_method":"private void configurationStarted(Attributes attributes) {\n            state = State.CONF;\n            setDefaultConfMapping(substitute(attributes.getValue(\"defaultconfmapping\")));\n            setDefaultConf(substitute(attributes.getValue(\"defaultconf\")));\n            getMd().setMappingOverride(Boolean.valueOf(substitute(attributes.getValue(\"confmappingoverride\"))));\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void addExcludeRule(String tag, Attributes attributes)\n                throws MalformedURLException {\n            state = State.ARTIFACT_EXCLUDE;\n            parseRule(tag, attributes);\n        }","id":105805,"modified_method":"private void addExcludeRule(String tag, Attributes attributes)\n                throws MalformedURLException {\n            state = State.ARTIFACT_EXCLUDE;\n            parseRule(tag, attributes);\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected boolean isOtherNamespace(String qName) {\n            return qName.indexOf(':') != -1;\n        }","id":105806,"modified_method":"private boolean isOtherNamespace(String qName) {\n            return qName.indexOf(':') != -1;\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected void includeConfStarted(Attributes attributes)\n                throws SAXException, IOException, ParserConfigurationException, ParseException {\n            URL url = settings.getRelativeUrlResolver().getURL(descriptorURL,\n                    settings.substitute(attributes.getValue(\"file\")),\n                    settings.substitute(attributes.getValue(\"url\")));\n\n            if (url == null) {\n                throw new SAXException(\"include tag must have a file or an url attribute\");\n            }\n\n            // create a new temporary parser to read the configurations from\n            // the specified file.\n            Parser parser = new Parser(getModuleDescriptorParser(), settings);\n            parser.setInput(url);\n            parser.setMd(new DefaultModuleDescriptor(getModuleDescriptorParser(),\n                    new URLResource(url)));\n            XMLHelper.parse(url , null, parser);\n\n            // add the configurations from this temporary parser to this module descriptor\n            Configuration[] configs = parser.getModuleDescriptor().getConfigurations();\n            for (int i = 0; i < configs.length; i++) {\n                getMd().addConfiguration(configs[i]);\n            }\n            if (parser.getDefaultConfMapping() != null) {\n                Message.debug(\"setting default conf mapping from imported configurations file: \"\n                        + parser.getDefaultConfMapping());\n                setDefaultConfMapping(parser.getDefaultConfMapping());\n            }\n            if (parser.getDefaultConf() != null) {\n                Message.debug(\"setting default conf from imported configurations file: \"\n                        + parser.getDefaultConf());\n                setDefaultConf(parser.getDefaultConf());\n            }\n            if (parser.getMd().isMappingOverride()) {\n                Message.debug(\"enabling mapping-override from imported configurations\"\n                        + \" file\");\n                getMd().setMappingOverride(true);\n            }\n        }","id":105807,"modified_method":"private void includeConfStarted(Attributes attributes)\n                throws SAXException, IOException, ParserConfigurationException, ParseException {\n            URL url = settings.getRelativeUrlResolver().getURL(descriptorURL, substitute(attributes.getValue(\"file\")), substitute(attributes.getValue(\"url\")));\n            if (url == null) {\n                throw new SAXException(\"include tag must have a file or an url attribute\");\n            }\n\n            // create a new temporary parser to read the configurations from\n            // the specified file.\n            Parser parser = newParser(new URLResource(url));\n            parser.setInput(url);\n            XMLHelper.parse(url , null, parser);\n\n            // add the configurations from this temporary parser to this module descriptor\n            Configuration[] configs = parser.getModuleDescriptor().getConfigurations();\n            for (Configuration config : configs) {\n                getMd().addConfiguration(config);\n            }\n            if (parser.getDefaultConfMapping() != null) {\n                Message.debug(\"setting default conf mapping from imported configurations file: \" + parser.getDefaultConfMapping());\n                setDefaultConfMapping(parser.getDefaultConfMapping());\n            }\n            if (parser.getDefaultConf() != null) {\n                Message.debug(\"setting default conf from imported configurations file: \" + parser.getDefaultConf());\n                setDefaultConf(parser.getDefaultConf());\n            }\n            if (parser.getMd().isMappingOverride()) {\n                Message.debug(\"enabling mapping-override from imported configurations file\");\n                getMd().setMappingOverride(true);\n            }\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"protected String getDefaultParentLocation() {\n            return \"../ivy.xml\";\n        }","id":105808,"modified_method":"private String getDefaultParentLocation() {\n            return \"../ivy.xml\";\n        }","commit_id":"637f0e1e94023600a7ee083de3c736d5e1400d9d","url":"https://github.com/gradle/gradle"},{"original_method":"@BeforeClass\n    public static void setup() throws TTransportException, IOException, InterruptedException, ConfigurationException,\n    AuthenticationException, AuthorizationException, InvalidRequestException, UnavailableException, TimedOutException, TException, NotFoundException, CharacterCodingException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException\n    {\n        startCassandra();\n        setupDataByCql(statements);\n        startHadoopCluster();\n    }","id":105809,"modified_method":"@BeforeClass\n    public static void setup() throws IOException, InterruptedException, ConfigurationException,\n        TException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException\n    {\n        startCassandra();\n        executeCQLStatements(statements);\n        startHadoopCluster();\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"@BeforeClass\n    public static void setup() throws TTransportException, IOException, InterruptedException, ConfigurationException,\n                                      AuthenticationException, AuthorizationException, InvalidRequestException, UnavailableException, TimedOutException, TException, NotFoundException, CharacterCodingException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException\n    {\n        startCassandra();\n        setupDataByCql(statements);\n        startHadoopCluster();\n    }","id":105810,"modified_method":"@BeforeClass\n    public static void setup() throws IOException, InterruptedException, ConfigurationException, TException,\n        ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException\n    {\n        startCassandra();\n        executeCQLStatements(statements);\n        startHadoopCluster();\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"@BeforeClass\n    public static void setup() throws TTransportException, IOException, InterruptedException, ConfigurationException,\n                                      AuthenticationException, AuthorizationException, InvalidRequestException, UnavailableException, TimedOutException, TException, NotFoundException, CharacterCodingException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException\n    {\n        startCassandra();\n        setupDataByCql(statements);\n        startHadoopCluster();\n    }","id":105811,"modified_method":"@BeforeClass\n    public static void setup() throws IOException, InterruptedException, ConfigurationException, TException, ClassNotFoundException,\n        NoSuchFieldException, IllegalAccessException, InstantiationException\n    {\n        startCassandra();\n        executeCQLStatements(statements);\n        startHadoopCluster();\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testCassandraStorageSchema() throws IOException, ClassNotFoundException, TException, TimedOutException, NotFoundException, InvalidRequestException, NoSuchFieldException, UnavailableException, IllegalAccessException, InstantiationException\n    {\n        //results: (key1,{((111,),),((111,column1),100),((111,column2),10.1)})\n        pig.registerQuery(\"rows = LOAD 'cassandra://cql3ks/cqltable?\" + defaultParameters + \"' USING CassandraStorage();\");\n\n        //schema: {key: chararray,columns: {(name: (),value: bytearray)}}\n        Iterator<Tuple> it = pig.openIterator(\"rows\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            String rowKey =  t.get(0).toString();\n            Assert.assertEquals(rowKey, \"key1\");\n            DataBag columns = (DataBag) t.get(1);\n            Iterator<Tuple> iter = columns.iterator();\n            int i = 0;\n            while(iter.hasNext())\n            {\n                i++;\n                Tuple column = (Tuple) iter.next();\n                if (i==1)\n                {\n                    Assert.assertEquals(((Tuple) column.get(0)).get(0), 111);\n                    Assert.assertEquals(((Tuple) column.get(0)).get(1), \"\");\n                    Assert.assertEquals(column.get(1).toString(), \"\");\n                }\n                if (i==2)\n                {\n                    Assert.assertEquals(((Tuple) column.get(0)).get(0), 111);\n                    Assert.assertEquals(((Tuple) column.get(0)).get(1), \"column1\");\n                    Assert.assertEquals(column.get(1), 100);\n                }\n                if (i==3)\n                {\n                    Assert.assertEquals(((Tuple) column.get(0)).get(0), 111);\n                    Assert.assertEquals(((Tuple) column.get(0)).get(1), \"column2\");\n                    Assert.assertEquals(column.get(1), 10.1f);\n                }\n            }\n            Assert.assertEquals(3, columns.size());\n        }\n        else\n        {\n            Assert.fail(\"Can't fetch any data\");\n        }\n\n        //results: (key1,(column1,100),(column2,10.1))\n        pig.registerQuery(\"compact_rows = LOAD 'cassandra://cql3ks/compactcqltable?\" + defaultParameters + \"' USING CassandraStorage();\");\n\n        //schema: {key: chararray,column1: (name: chararray,value: int),column2: (name: chararray,value: float)}\n        it = pig.openIterator(\"compact_rows\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            String rowKey =  t.get(0).toString();\n            Assert.assertEquals(rowKey, \"key1\");\n            Tuple column = (Tuple) t.get(1);\n            Assert.assertEquals(column.get(0), \"column1\");\n            Assert.assertEquals(column.get(1), 100);\n            column = (Tuple) t.get(2);\n            Assert.assertEquals(column.get(0), \"column2\");\n            Assert.assertEquals(column.get(1), 10.1f);\n        }\n        else\n        {\n            Assert.fail(\"Can't fetch any data\");\n        }\n    }","id":105812,"modified_method":"@Test\n    public void testCassandraStorageSchema() throws IOException, ClassNotFoundException, TException, NoSuchFieldException,\n        IllegalAccessException, InstantiationException\n    {\n        //results: (key1,{((111,),),((111,column1),100),((111,column2),10.1)})\n        pig.registerQuery(\"rows = LOAD 'cassandra://cql3ks/cqltable?\" + defaultParameters + \"' USING CassandraStorage();\");\n\n        //schema: {key: chararray,columns: {(name: (),value: bytearray)}}\n        Iterator<Tuple> it = pig.openIterator(\"rows\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            String rowKey =  t.get(0).toString();\n            Assert.assertEquals(rowKey, \"key1\");\n            DataBag columns = (DataBag) t.get(1);\n            Iterator<Tuple> iter = columns.iterator();\n            int i = 0;\n            while (iter.hasNext())\n            {\n                i++;\n                Tuple column = iter.next();\n                if (i==1)\n                {\n                    Assert.assertEquals(((Tuple) column.get(0)).get(0), 111);\n                    Assert.assertEquals(((Tuple) column.get(0)).get(1), \"\");\n                    Assert.assertEquals(column.get(1).toString(), \"\");\n                }\n                if (i==2)\n                {\n                    Assert.assertEquals(((Tuple) column.get(0)).get(0), 111);\n                    Assert.assertEquals(((Tuple) column.get(0)).get(1), \"column1\");\n                    Assert.assertEquals(column.get(1), 100);\n                }\n                if (i==3)\n                {\n                    Assert.assertEquals(((Tuple) column.get(0)).get(0), 111);\n                    Assert.assertEquals(((Tuple) column.get(0)).get(1), \"column2\");\n                    Assert.assertEquals(column.get(1), 10.1f);\n                }\n            }\n            Assert.assertEquals(3, columns.size());\n        }\n        else\n        {\n            Assert.fail(\"Can't fetch any data\");\n        }\n\n        //results: (key1,(column1,100),(column2,10.1))\n        pig.registerQuery(\"compact_rows = LOAD 'cassandra://cql3ks/compactcqltable?\" + defaultParameters + \"' USING CassandraStorage();\");\n\n        //schema: {key: chararray,column1: (name: chararray,value: int),column2: (name: chararray,value: float)}\n        it = pig.openIterator(\"compact_rows\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            String rowKey =  t.get(0).toString();\n            Assert.assertEquals(rowKey, \"key1\");\n            Tuple column = (Tuple) t.get(1);\n            Assert.assertEquals(column.get(0), \"column1\");\n            Assert.assertEquals(column.get(1), 100);\n            column = (Tuple) t.get(2);\n            Assert.assertEquals(column.get(0), \"column2\");\n            Assert.assertEquals(column.get(1), 10.1f);\n        }\n        else\n        {\n            Assert.fail(\"Can't fetch any data\");\n        }\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"protected AbstractType parseType(String type) throws IOException\n    {\n        try\n        {\n            return TypeParser.parse(type);\n        }\n        catch (ConfigurationException e)\n        {\n            throw new IOException(e);\n        }\n        catch (SyntaxException e)\n        {\n            throw new IOException(e);\n        }\n    }","id":105813,"modified_method":"protected AbstractType parseType(String type) throws IOException\n    {\n        try\n        {\n            return TypeParser.parse(type);\n        }\n        catch (ConfigurationException | SyntaxException e)\n        {\n            throw new IOException(e);\n        }\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"@Override\n    public TTransport openTransport(String host, int port) throws Exception\n    {\n        TSSLTransportFactory.TSSLTransportParameters params = new TSSLTransportFactory.TSSLTransportParameters(protocol, cipherSuites);\n        params.setTrustStore(truststore, truststorePassword);\n        if (null != keystore)\n            params.setKeyStore(keystore, keystorePassword);\n        TTransport trans = TSSLTransportFactory.getClientSocket(host, port, SOCKET_TIMEOUT, params);\n        return new FramedTransportFactory().getTransport(trans);\n    }","id":105814,"modified_method":"@Override\n    public TTransport openTransport(String host, int port) throws Exception\n    {\n        TSSLTransportFactory.TSSLTransportParameters params = new TSSLTransportFactory.TSSLTransportParameters(protocol, cipherSuites);\n        params.setTrustStore(truststore, truststorePassword);\n        if (null != keystore)\n            params.setKeyStore(keystore, keystorePassword);\n        TTransport trans = TSSLTransportFactory.getClientSocket(host, port, SOCKET_TIMEOUT, params);\n        return new TFramedTransport(trans, DEFAULT_MAX_FRAME_SIZE);\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"@BeforeClass\n    public static void setup() throws TTransportException, IOException, InterruptedException, ConfigurationException,\n                                      AuthenticationException, AuthorizationException, InvalidRequestException, UnavailableException, TimedOutException, TException, NotFoundException, CharacterCodingException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException\n    {\n        startCassandra();\n        setupDataByCli(statements);\n        startHadoopCluster();\n    }","id":105815,"modified_method":"@BeforeClass\n    public static void setup() throws IOException, InterruptedException, ConfigurationException, TException,\n        ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException\n    {\n        startCassandra();\n        executeCQLStatements(statements);\n        startHadoopCluster();\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testCassandraStorageDataType() throws IOException, ClassNotFoundException, TException, TimedOutException, NotFoundException, InvalidRequestException, NoSuchFieldException, UnavailableException, IllegalAccessException, InstantiationException\n    {\n        pig.registerQuery(\"rows = LOAD 'cassandra://thriftKs/SomeApp?\" + defaultParameters + \"' USING CassandraStorage();\");\n\n        //{key: chararray, col_ascii: (name: chararray,value: chararray),\n        //col_boolean: (name: chararray,value: bytearray),\n        //col_bytes: (name: chararray,value: bytearray),\n        //col_date: (name: chararray,value: long),\n        //col_decimal: (name: chararray,value: chararray),\n        //col_double: (name: chararray,value: double),\n        //col_float: (name: chararray,value: float),\n        //col_inetaddress: (name: chararray,value: chararray),\n        //col_int32: (name: chararray,value: int),\n        //col_integer: (name: chararray,value: int),\n        //col_lexical_uuid: (name: chararray,value: chararray),\n        //col_long: (name: chararray,value: long),\n        //col_timeuuid: (name: chararray,value: bytearray),\n        //col_uft8: (name: chararray,value: chararray),\n        //col_uuid: (name: chararray,value: chararray),\n        //columns: {(name: chararray,value: chararray)}}\n        Iterator<Tuple> it = pig.openIterator(\"rows\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            Assert.assertEquals(t.get(0), \"foo\");\n            Tuple column = (Tuple) t.get(1);\n            Assert.assertEquals(column.get(1), \"ascii\");\n            column = (Tuple) t.get(2);\n            Assert.assertEquals(column.get(1), false);\n            column = (Tuple) t.get(3);\n            Assert.assertEquals(column.get(1), new DataByteArray(Hex.hexToBytes(\"DEADBEEF\")));\n            column = (Tuple) t.get(4);\n            Assert.assertEquals(column.get(1), 1296705900000L);\n            column = (Tuple) t.get(5);\n            Assert.assertEquals(column.get(1), \"23.345\");\n            column = (Tuple) t.get(6);\n            Assert.assertEquals(column.get(1), 2.7182818284590451d);\n            column = (Tuple) t.get(7);\n            Assert.assertEquals(column.get(1), 23.45f);\n            column = (Tuple) t.get(8);\n            Assert.assertEquals(column.get(1), \"127.0.0.1\");\n            column = (Tuple) t.get(9);\n            Assert.assertEquals(column.get(1), 23);\n            column = (Tuple) t.get(10);\n            Assert.assertEquals(column.get(1), 12345);\n            column = (Tuple) t.get(11);\n            Assert.assertEquals(column.get(1), new DataByteArray((TimeUUIDType.instance.fromString(\"e23f450f-53a6-11e2-7f7f-7f7f7f7f7f77\").array())));\n            column = (Tuple) t.get(12);\n            Assert.assertEquals(column.get(1), 12345678L);\n            column = (Tuple) t.get(13);\n            Assert.assertEquals(column.get(1), new DataByteArray((TimeUUIDType.instance.fromString(\"e23f450f-53a6-11e2-7f7f-7f7f7f7f7f7f\").array())));\n            column = (Tuple) t.get(14);\n            Assert.assertEquals(column.get(1), \"hello\");\n            column = (Tuple) t.get(15);\n            Assert.assertEquals(column.get(1), new DataByteArray((UUIDType.instance.fromString(\"550e8400-e29b-41d4-a716-446655440000\").array())));\n        }\n\n        pig.registerQuery(\"cc_rows = LOAD 'cassandra://thriftKs/CC?\" + defaultParameters + \"' USING CassandraStorage();\");\n\n        //(chuck,{(kick,3)})\n        it = pig.openIterator(\"cc_rows\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            Assert.assertEquals(t.get(0), \"chuck\");           \n            DataBag columns = (DataBag) t.get(1);\n            Iterator<Tuple> iter = columns.iterator();\n            if(iter.hasNext())\n            {\n                Tuple column = iter.next();\n                Assert.assertEquals(column.get(0), \"kick\");\n                Assert.assertEquals(column.get(1), 3L);\n            }\n         }\n    }","id":105816,"modified_method":"@Test\n    public void testCassandraStorageDataType() throws IOException, ClassNotFoundException, TException,\n        NoSuchFieldException, IllegalAccessException, InstantiationException\n    {\n        pig.registerQuery(\"rows = LOAD 'cassandra://thrift_ks/some_app?\" + defaultParameters + \"' USING CassandraStorage();\");\n        Tuple t = pig.openIterator(\"rows\").next();\n\n        // key\n        assertEquals(\"foo\", t.get(0));\n\n        // col_ascii\n        Tuple column = (Tuple) t.get(1);\n        assertEquals(\"ascii\", column.get(1));\n\n        // col_bigint\n        column = (Tuple) t.get(2);\n        assertEquals(12345678L, column.get(1));\n\n        // col_blob\n        column = (Tuple) t.get(3);\n        assertEquals(new DataByteArray(Hex.hexToBytes(\"DEADBEEF\")), column.get(1));\n\n        // col_boolean\n        column = (Tuple) t.get(4);\n        assertEquals(false, column.get(1));\n\n        // col_decimal\n        column = (Tuple) t.get(5);\n        assertEquals(\"23.345\", column.get(1));\n\n        // col_double\n        column = (Tuple) t.get(6);\n        assertEquals(2.7182818284590451d, column.get(1));\n\n        // col_float\n        column = (Tuple) t.get(7);\n        assertEquals(23.45f, column.get(1));\n\n        // col_inet\n        column = (Tuple) t.get(8);\n        assertEquals(\"127.0.0.1\", column.get(1));\n\n        // col_int\n        column = (Tuple) t.get(9);\n        assertEquals(23, column.get(1));\n\n        // col_text\n        column = (Tuple) t.get(10);\n        assertEquals(\"hello\", column.get(1));\n\n        // col_timestamp\n        column = (Tuple) t.get(11);\n        assertEquals(1296705900000L, column.get(1));\n\n        // col_timeuuid\n        column = (Tuple) t.get(12);\n        assertEquals(new DataByteArray((TimeUUIDType.instance.fromString(\"e23f450f-53a6-11e2-7f7f-7f7f7f7f7f7f\").array())), column.get(1));\n\n        // col_uuid\n        column = (Tuple) t.get(13);\n        assertEquals(new DataByteArray((UUIDType.instance.fromString(\"550e8400-e29b-41d4-a716-446655440000\").array())), column.get(1));\n\n        // col_varint\n        column = (Tuple) t.get(14);\n        assertEquals(12345, column.get(1));\n\n        pig.registerQuery(\"cc_rows = LOAD 'cassandra://thrift_ks/cc?\" + defaultParameters + \"' USING CassandraStorage();\");\n        t = pig.openIterator(\"cc_rows\").next();\n\n        assertEquals(\"chuck\", t.get(0));\n\n        DataBag columns = (DataBag) t.get(1);\n        column = columns.iterator().next();\n        assertEquals(\"kick\", column.get(0));\n        assertEquals(3L, column.get(1));\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testCqlNativeStorage() throws IOException, ClassNotFoundException, TException, TimedOutException, NotFoundException, InvalidRequestException, NoSuchFieldException, UnavailableException, IllegalAccessException, InstantiationException, AuthenticationException, AuthorizationException\n    {\n        //regular thrift column families\n        //input_cql=select * from \"SomeApp\" where token(key) > ? and token(key) <= ?\n        cqlStorageTest(\"data = load 'cql://thriftKs/SomeApp?\" + defaultParameters + nativeParameters + \"&input_cql=select%20*%20from%20%22SomeApp%22%20where%20token(key)%20%3E%20%3F%20and%20token(key)%20%3C%3D%20%3F' using CqlNativeStorage();\");\n\n        //Test counter colun family\n        //input_cql=select * from \"CC\" where token(key) > ? and token(key) <= ?\n        cqlStorageCounterTableTest(\"cc_data = load 'cql://thriftKs/CC?\" + defaultParameters + nativeParameters + \"&input_cql=select%20*%20from%20%22CC%22%20where%20token(key)%20%3E%20%3F%20and%20token(key)%20%3C%3D%20%3F' using CqlNativeStorage();\");\n\n        //Test composite column family\n        //input_cql=select * from \"Compo\" where token(key) > ? and token(key) <= ?\n        cqlStorageCompositeTableTest(\"compo_data = load 'cql://thriftKs/Compo?\" + defaultParameters + nativeParameters + \"&input_cql=select%20*%20from%20%22Compo%22%20where%20token(key)%20%3E%20%3F%20and%20token(key)%20%3C%3D%20%3F' using CqlNativeStorage();\");\n    }","id":105817,"modified_method":"@Test\n    public void testCqlNativeStorage() throws IOException, ClassNotFoundException, TException, NoSuchFieldException,\n        IllegalAccessException, InstantiationException\n    {\n        //regular thrift column families\n        //input_cql=select * from \"some_app\" where token(key) > ? and token(key) <= ?\n        cqlStorageTest(\"data = load 'cql://thrift_ks/some_app?\" + defaultParameters + nativeParameters + \"&input_cql=select%20*%20from%20%22some_app%22%20where%20token(key)%20%3E%20%3F%20and%20token(key)%20%3C%3D%20%3F' using CqlNativeStorage();\");\n\n        //Test counter column family\n        //input_cql=select * from \"cc\" where token(key) > ? and token(key) <= ?\n        cqlStorageCounterTableTest(\"cc_data = load 'cql://thrift_ks/cc?\" + defaultParameters + nativeParameters + \"&input_cql=select%20*%20from%20%22cc%22%20where%20token(key)%20%3E%20%3F%20and%20token(key)%20%3C%3D%20%3F' using CqlNativeStorage();\");\n\n        //Test composite column family\n        //input_cql=select * from \"compo\" where token(key) > ? and token(key) <= ?\n        cqlStorageCompositeTableTest(\"compo_data = load 'cql://thrift_ks/compo?\" + defaultParameters + nativeParameters + \"&input_cql=select%20*%20from%20%22compo%22%20where%20token(key)%20%3E%20%3F%20and%20token(key)%20%3C%3D%20%3F' using CqlNativeStorage();\");\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testCassandraStorageFilter() throws IOException, ClassNotFoundException, TException, TimedOutException, NotFoundException, InvalidRequestException, NoSuchFieldException, UnavailableException, IllegalAccessException, InstantiationException, AuthenticationException, AuthorizationException\n    {\n        executeCliStatements(deleteCopyOfSomeAppTableData);\n        pig.setBatchOn();\n        pig.registerQuery(\"rows = LOAD 'cassandra://thriftKs/SomeApp?\" + defaultParameters + \"' USING CassandraStorage();\");\n\n        //filter\n        pig.registerQuery(\"likes = FILTER rows by vote_type.value eq 'like' and rating.value > 5;\");\n        pig.registerQuery(\"STORE likes INTO 'cassandra://thriftKs/CopyOfSomeApp?\" + defaultParameters + \"' USING CassandraStorage();\");\n        pig.executeBatch();\n\n        Assert.assertEquals(\"like\", getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"vote_type\", \"bar\", \"UTF8Type\"));\n        Assert.assertEquals(\"like\", getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"vote_type\", \"foo\", \"UTF8Type\"));\n        String value = null;\n        try\n        {\n            value = getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"vote_type\", \"qux\", \"UTF8Type\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n        try\n        {\n            value = getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"vote_type\", \"baz\", \"UTF8Type\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n\n        executeCliStatements(deleteCopyOfSomeAppTableData);\n        pig.setBatchOn();\n        pig.registerQuery(\"rows = LOAD 'cassandra://thriftKs/SomeApp?\" + defaultParameters + \"' USING CassandraStorage();\");\n        pig.registerQuery(\"dislikes_extras = FILTER rows by vote_type.value eq 'dislike' AND COUNT(columns) > 0;\");\n        pig.registerQuery(\"STORE dislikes_extras INTO 'cassandra://thriftKs/CopyOfSomeApp?\" + defaultParameters + \"' USING CassandraStorage();\");\n        pig.registerQuery(\"visible = FILTER rows BY COUNT(columns) == 0;\");\n        pig.executeBatch();\n        Assert.assertEquals(\"dislike\", getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"vote_type\", \"baz\", \"UTF8Type\"));\n        Assert.assertEquals(\"dislike\", getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"vote_type\", \"qux\", \"UTF8Type\"));\n        value = null;\n        try\n        {\n            value = getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"vote_type\", \"bar\", \"UTF8Type\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n        try\n        {\n            value = getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"vote_type\", \"foo\", \"UTF8Type\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n    }","id":105818,"modified_method":"@Test\n    public void testCassandraStorageFilter() throws IOException, ClassNotFoundException, TException, NoSuchFieldException,\n        IllegalAccessException, InstantiationException\n    {\n        executeCQLStatements(deleteCopyOfSomeAppTableData);\n        pig.setBatchOn();\n        pig.registerQuery(\"rows = LOAD 'cassandra://thrift_ks/some_app?\" + defaultParameters + \"' USING CassandraStorage();\");\n\n        //filter\n        pig.registerQuery(\"likes = FILTER rows by vote_type.value eq 'like' and rating.value > 5;\");\n        pig.registerQuery(\"STORE likes INTO 'cassandra://thrift_ks/copy_of_some_app?\" + defaultParameters + \"' USING CassandraStorage();\");\n        pig.executeBatch();\n\n        Assert.assertEquals(\"like\", getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"vote_type\", \"bar\", \"UTF8Type\"));\n        Assert.assertEquals(\"like\", getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"vote_type\", \"foo\", \"UTF8Type\"));\n        String value = null;\n        try\n        {\n            value = getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"vote_type\", \"qux\", \"UTF8Type\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n        try\n        {\n            value = getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"vote_type\", \"baz\", \"UTF8Type\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n\n        executeCQLStatements(deleteCopyOfSomeAppTableData);\n        pig.setBatchOn();\n        pig.registerQuery(\"rows = LOAD 'cassandra://thrift_ks/some_app?\" + defaultParameters + \"' USING CassandraStorage();\");\n        pig.registerQuery(\"dislikes_extras = FILTER rows by vote_type.value eq 'dislike';\");\n        pig.registerQuery(\"STORE dislikes_extras INTO 'cassandra://thrift_ks/copy_of_some_app?\" + defaultParameters + \"' USING CassandraStorage();\");\n        pig.executeBatch();\n        Assert.assertEquals(\"dislike\", getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"vote_type\", \"baz\", \"UTF8Type\"));\n        Assert.assertEquals(\"dislike\", getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"vote_type\", \"qux\", \"UTF8Type\"));\n        value = null;\n        try\n        {\n            value = getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"vote_type\", \"bar\", \"UTF8Type\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n        try\n        {\n            value = getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"vote_type\", \"foo\", \"UTF8Type\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"/** This test case fails due to antlr lib conflicts, Cassandra2.1 uses 3.2, Hive1.2 uses 3.4 */\n    //@Test\n    public void testCassandraStorageCompositeColumnCF() throws IOException, ClassNotFoundException, TException, TimedOutException, NotFoundException, InvalidRequestException, NoSuchFieldException, UnavailableException, IllegalAccessException, InstantiationException, AuthenticationException, AuthorizationException\n    {\n        //Test CompositeType\n        pig.registerQuery(\"compo = load 'cassandra://thriftKs/Compo?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.registerQuery(\"compo = foreach compo generate key as method, flatten(columns);\");\n        pig.registerQuery(\"lee = filter compo by columns::name == ('bruce','lee');\");\n\n        //(kick,(bruce,lee),oww)\n        //(punch,(bruce,lee),ouch)\n        Iterator<Tuple> it = pig.openIterator(\"lee\");\n        int count = 0;\n        while (it.hasNext()) {\n            count ++;\n            Tuple t = it.next();\n            Tuple t1 = (Tuple) t.get(1);\n            Assert.assertEquals(t1.get(0), \"bruce\");\n            Assert.assertEquals(t1.get(1), \"lee\");\n            if (\"kick\".equals(t.get(0)))\n                Assert.assertEquals(t.get(2), \"oww\");\n            else if (\"kick\".equals(t.get(0)))\n                Assert.assertEquals(t.get(2), \"ouch\");\n        }\n        Assert.assertEquals(count, 2);\n        pig.registerQuery(\"night = load 'cassandra://thriftKs/CompoInt?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.registerQuery(\"night = foreach night generate flatten(columns);\");\n        pig.registerQuery(\"night = foreach night generate (int)columns::name.$0+(double)columns::name.$1/60 as hour, columns::value as noise;\");\n\n        //What happens at the darkest hour?\n        pig.registerQuery(\"darkest = filter night by hour > 2 and hour < 5;\");\n\n        //(2.5,daddy?)\n        it = pig.openIterator(\"darkest\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            Assert.assertEquals(t.get(0), 2.5d);\n            Assert.assertEquals(t.get(1), \"daddy?\");\n        }\n        pig.setBatchOn();\n        pig.registerQuery(\"compo_int_rows = LOAD 'cassandra://thriftKs/CompoInt?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.registerQuery(\"STORE compo_int_rows INTO 'cassandra://thriftKs/CompoIntCopy?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.executeBatch();\n        pig.registerQuery(\"compocopy_int_rows = LOAD 'cassandra://thriftKs/CompoIntCopy?\" + defaultParameters + \"' using CassandraStorage();\");\n        //(clock,{((1,0),z),((1,30),zzzz),((2,30),daddy?),((6,30),coffee...)})\n        it = pig.openIterator(\"compocopy_int_rows\");\n        count = 0;\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            Assert.assertEquals(t.get(0), \"clock\");\n            DataBag columns = (DataBag) t.get(1);\n            Iterator<Tuple> iter = columns.iterator();\n            while (iter.hasNext())\n            {\n                count ++;\n                Tuple t1 = iter.next();\n                Tuple inner = (Tuple) t1.get(0);\n                if ((Long) inner.get(0) == 1L && (Long) inner.get(1) == 0L)\n                    Assert.assertEquals(t1.get(1), \"z\");\n                else if ((Long) inner.get(0) == 1L && (Long) inner.get(1) == 30L)\n                    Assert.assertEquals(t1.get(1), \"zzzz\");\n                else if ((Long) inner.get(0) == 2L && (Long) inner.get(1) == 30L)\n                    Assert.assertEquals(t1.get(1), \"daddy?\");\n                else if ((Long) inner.get(0) == 6L && (Long) inner.get(1) == 30L)\n                    Assert.assertEquals(t1.get(1), \"coffee...\");\n            }\n            Assert.assertEquals(count, 4);\n        }\n    }","id":105819,"modified_method":"@Test\n    public void testCassandraStorageCompositeColumnCF() throws IOException, ClassNotFoundException, TException,\n        NoSuchFieldException, IllegalAccessException, InstantiationException\n    {\n        //Test CompositeType\n        pig.registerQuery(\"compo = load 'cassandra://thrift_ks/compo?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.registerQuery(\"compo = foreach compo generate key as method, flatten(columns);\");\n        pig.registerQuery(\"lee = filter compo by columns::name == ('bruce','lee');\");\n\n        //(kick,(bruce,lee),oww)\n        //(punch,(bruce,lee),ouch)\n        Iterator<Tuple> it = pig.openIterator(\"lee\");\n        int count = 0;\n        while (it.hasNext()) {\n            count ++;\n            Tuple t = it.next();\n            Tuple t1 = (Tuple) t.get(1);\n            Assert.assertEquals(t1.get(0), \"bruce\");\n            Assert.assertEquals(t1.get(1), \"lee\");\n            if (\"kick\".equals(t.get(0)))\n                Assert.assertEquals(t.get(2), \"oww\");\n            else if (\"kick\".equals(t.get(0)))\n                Assert.assertEquals(t.get(2), \"ouch\");\n        }\n        Assert.assertEquals(count, 2);\n        pig.registerQuery(\"night = load 'cassandra://thrift_ks/compo_int?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.registerQuery(\"night = foreach night generate flatten(columns);\");\n        pig.registerQuery(\"night = foreach night generate (int)columns::name.$0+(double)columns::name.$1/60 as hour, columns::value as noise;\");\n\n        //What happens at the darkest hour?\n        pig.registerQuery(\"darkest = filter night by hour > 2 and hour < 5;\");\n\n        //(2.5,daddy?)\n        it = pig.openIterator(\"darkest\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            Assert.assertEquals(t.get(0), 2.5d);\n            Assert.assertEquals(t.get(1), \"daddy?\");\n        }\n        pig.setBatchOn();\n        pig.registerQuery(\"compo_int_rows = LOAD 'cassandra://thrift_ks/compo_int?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.registerQuery(\"STORE compo_int_rows INTO 'cassandra://thrift_ks/compo_int_copy?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.executeBatch();\n        pig.registerQuery(\"compocopy_int_rows = LOAD 'cassandra://thrift_ks/compo_int_copy?\" + defaultParameters + \"' using CassandraStorage();\");\n        //(clock,{((1,0),z),((1,30),zzzz),((2,30),daddy?),((6,30),coffee...)})\n        it = pig.openIterator(\"compocopy_int_rows\");\n        count = 0;\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            Assert.assertEquals(t.get(0), \"clock\");\n            DataBag columns = (DataBag) t.get(1);\n            for (Tuple t1 : columns)\n            {\n                count++;\n                Tuple inner = (Tuple) t1.get(0);\n                if ((Long) inner.get(0) == 1L && (Long) inner.get(1) == 0L)\n                    Assert.assertEquals(t1.get(1), \"z\");\n                else if ((Long) inner.get(0) == 1L && (Long) inner.get(1) == 30L)\n                    Assert.assertEquals(t1.get(1), \"zzzz\");\n                else if ((Long) inner.get(0) == 2L && (Long) inner.get(1) == 30L)\n                    Assert.assertEquals(t1.get(1), \"daddy?\");\n                else if ((Long) inner.get(0) == 6L && (Long) inner.get(1) == 30L)\n                    Assert.assertEquals(t1.get(1), \"coffee...\");\n            }\n            Assert.assertEquals(count, 4);\n        }\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"@BeforeClass\n    public static void setup() throws TTransportException, IOException, InterruptedException, ConfigurationException,\n                                      AuthenticationException, AuthorizationException, InvalidRequestException, UnavailableException, TimedOutException, TException, NotFoundException, CharacterCodingException, ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException\n    {\n        startCassandra();\n        setupDataByCli(statements);\n        startHadoopCluster();\n    }","id":105820,"modified_method":"@BeforeClass\n    public static void setup() throws IOException, InterruptedException, ConfigurationException, TException,\n        ClassNotFoundException, NoSuchFieldException, IllegalAccessException, InstantiationException\n    {\n        startCassandra();\n        executeCQLStatements(statements);\n        startHadoopCluster();\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testCassandraStorageSigleTupleCopy() throws IOException, ClassNotFoundException, TException, TimedOutException, NotFoundException, InvalidRequestException, NoSuchFieldException, UnavailableException, IllegalAccessException, InstantiationException, AuthenticationException, AuthorizationException\n    {\n        executeCliStatements(deleteCopyOfSomeAppTableData);\n        pig.setBatchOn();\n        pig.registerQuery(\"rows = LOAD 'cassandra://thriftKs/SomeApp?\" + defaultParameters + \"' USING CassandraStorage();\");\n        //sigle tuple\n        pig.registerQuery(\"onecol = FOREACH rows GENERATE key, percent;\");\n        pig.registerQuery(\"STORE onecol INTO 'cassandra://thriftKs/CopyOfSomeApp?\" + defaultParameters + \"' USING CassandraStorage();\");\n        pig.executeBatch();\n        String value = null;\n        try\n        {\n            value = getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"name\", \"qux\", \"UTF8Type\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n        try\n        {\n            value = getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"vote_type\", \"qux\", \"UTF8Type\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n        Assert.assertEquals(\"64.7\", getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"percent\", \"qux\", \"FloatType\"));\n    }","id":105821,"modified_method":"@Test\n    public void testCassandraStorageSigleTupleCopy() throws IOException, ClassNotFoundException, TException,\n        NoSuchFieldException, IllegalAccessException, InstantiationException\n    {\n        executeCQLStatements(deleteCopyOfSomeAppTableData);\n        pig.setBatchOn();\n        pig.registerQuery(\"rows = LOAD 'cassandra://thrift_ks/some_app?\" + defaultParameters + \"' USING CassandraStorage();\");\n        //sigle tuple\n        pig.registerQuery(\"onecol = FOREACH rows GENERATE key, percent;\");\n        pig.registerQuery(\"STORE onecol INTO 'cassandra://thrift_ks/copy_of_some_app?\" + defaultParameters + \"' USING CassandraStorage();\");\n        pig.executeBatch();\n        String value = null;\n        try\n        {\n            value = getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"name\", \"qux\", \"UTF8Type\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n        try\n        {\n            value = getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"vote_type\", \"qux\", \"UTF8Type\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n        Assert.assertEquals(\"64.7\", getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"percent\", \"qux\", \"FloatType\"));\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testCassandraStorageBagOnlyCopy() throws IOException, ClassNotFoundException, TException, TimedOutException, NotFoundException, InvalidRequestException, NoSuchFieldException, UnavailableException, IllegalAccessException, InstantiationException, AuthenticationException, AuthorizationException\n    {\n        executeCliStatements(deleteCopyOfSomeAppTableData);\n        pig.setBatchOn();\n        pig.registerQuery(\"rows = LOAD 'cassandra://thriftKs/SomeApp?\" + defaultParameters + \"' USING CassandraStorage();\");\n        //bag only\n        pig.registerQuery(\"other = FOREACH rows GENERATE key, columns;\");\n        pig.registerQuery(\"STORE other INTO 'cassandra://thriftKs/CopyOfSomeApp?\" + defaultParameters + \"' USING CassandraStorage();\");\n        pig.executeBatch();\n        String value = null;\n        try\n        {\n            value = getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"name\", \"qux\", \"UTF8Type\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n        try\n        {\n            value = getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"vote_type\", \"qux\", \"UTF8Type\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n        try\n        {\n            value = getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"percent\", \"qux\", \"FloatType\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n        Assert.assertEquals(\"extra1\", getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"extra1\", \"qux\", \"UTF8Type\"));\n    }","id":105822,"modified_method":"@Test\n    public void testCassandraStorageBagOnlyCopy() throws IOException, ClassNotFoundException, TException,\n        NoSuchFieldException, IllegalAccessException, InstantiationException\n    {\n        executeCQLStatements(deleteCopyOfSomeAppTableData);\n        pig.setBatchOn();\n        pig.registerQuery(\"rows = LOAD 'cassandra://thrift_ks/some_app?\" + defaultParameters + \"' USING CassandraStorage();\");\n        //bag only\n        pig.registerQuery(\"other = FOREACH rows GENERATE key, columns;\");\n        pig.registerQuery(\"STORE other INTO 'cassandra://thrift_ks/copy_of_some_app?\" + defaultParameters + \"' USING CassandraStorage();\");\n        pig.executeBatch();\n        String value = null;\n        try\n        {\n            value = getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"name\", \"qux\", \"UTF8Type\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n        try\n        {\n            value = getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"vote_type\", \"qux\", \"UTF8Type\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n        try\n        {\n            value = getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"percent\", \"qux\", \"FloatType\");\n        }\n        catch (NotFoundException e)\n        {\n            Assert.assertTrue(true);\n        }\n        if (value != null)\n            Assert.fail();\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testCassandraStorageFullCopy() throws IOException, ClassNotFoundException, TException, TimedOutException, NotFoundException, InvalidRequestException, NoSuchFieldException, UnavailableException, IllegalAccessException, InstantiationException, AuthenticationException, AuthorizationException\n    {\n        pig.setBatchOn();\n        pig.registerQuery(\"rows = LOAD 'cassandra://thriftKs/SomeApp?\" + defaultParameters + \"' USING CassandraStorage();\");\n        //full copy\n        pig.registerQuery(\"STORE rows INTO 'cassandra://thriftKs/CopyOfSomeApp?\" + defaultParameters + \"' USING CassandraStorage();\");\n        pig.executeBatch();\n        Assert.assertEquals(\"User Qux\", getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"name\", \"qux\", \"UTF8Type\"));\n        Assert.assertEquals(\"dislike\", getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"vote_type\", \"qux\", \"UTF8Type\"));\n        Assert.assertEquals(\"64.7\", getColumnValue(\"thriftKs\", \"CopyOfSomeApp\", \"percent\", \"qux\", \"FloatType\"));\n    }","id":105823,"modified_method":"@Test\n    public void testCassandraStorageFullCopy() throws IOException, ClassNotFoundException, TException, NoSuchFieldException,\n        IllegalAccessException, InstantiationException\n    {\n        pig.setBatchOn();\n        pig.registerQuery(\"rows = LOAD 'cassandra://thrift_ks/some_app?\" + defaultParameters + \"' USING CassandraStorage();\");\n        //full copy\n        pig.registerQuery(\"STORE rows INTO 'cassandra://thrift_ks/copy_of_some_app?\" + defaultParameters + \"' USING CassandraStorage();\");\n        pig.executeBatch();\n        Assert.assertEquals(\"User Qux\", getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"name\", \"qux\", \"UTF8Type\"));\n        Assert.assertEquals(\"dislike\", getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"vote_type\", \"qux\", \"UTF8Type\"));\n        Assert.assertEquals(\"64.7\", getColumnValue(\"thrift_ks\", \"copy_of_some_app\", \"percent\", \"qux\", \"FloatType\"));\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testCassandraStorageCompositeKeyCF() throws IOException, ClassNotFoundException, TException, TimedOutException, NotFoundException, InvalidRequestException, NoSuchFieldException, UnavailableException, IllegalAccessException, InstantiationException, AuthenticationException, AuthorizationException\n    {\n        //Test CompositeKey\n        pig.registerQuery(\"compokeys = load 'cassandra://thriftKs/CompoKey?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.registerQuery(\"compokeys = filter compokeys by key.$1 == 40;\");\n        //((clock,40),{(6,coffee...)})\n        Iterator<Tuple> it = pig.openIterator(\"compokeys\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            Tuple key = (Tuple) t.get(0); \n            Assert.assertEquals(key.get(0), \"clock\");\n            Assert.assertEquals(key.get(1), 40L);\n            DataBag columns = (DataBag) t.get(1);\n            Iterator<Tuple> iter = columns.iterator();\n            if (iter.hasNext())\n            {\n                Tuple t1 = iter.next();\n                Assert.assertEquals(t1.get(0), 6L);\n                Assert.assertEquals(t1.get(1), \"coffee...\");\n            }\n        }\n        pig.setBatchOn();\n        pig.registerQuery(\"compo_key_rows = LOAD 'cassandra://thriftKs/CompoKey?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.registerQuery(\"STORE compo_key_rows INTO 'cassandra://thriftKs/CompoKeyCopy?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.executeBatch();\n        pig.registerQuery(\"compo_key_copy_rows = LOAD 'cassandra://thriftKs/CompoKeyCopy?\" + defaultParameters + \"' using CassandraStorage();\");\n        //((clock,10),{(1,z)})\n        //((clock,20),{(1,zzzz)})\n        //((clock,30),{(2,daddy?)})\n        //((clock,40),{(6,coffee...)})\n        it = pig.openIterator(\"compo_key_copy_rows\");\n        int count = 0;\n        while (it.hasNext()) {\n            Tuple t = it.next();\n            count ++;\n            Tuple key = (Tuple) t.get(0); \n            if (\"clock\".equals(key.get(0)) && (Long) key.get(1) == 10L)\n            {\n                DataBag columns = (DataBag) t.get(1);\n                Iterator<Tuple> iter = columns.iterator();\n                if (iter.hasNext())\n                {\n                    Tuple t1 = iter.next();\n                    Assert.assertEquals(t1.get(0), 1L);\n                    Assert.assertEquals(t1.get(1), \"z\");\n                }\n            }\n            else if (\"clock\".equals(key.get(0)) && (Long) key.get(1) == 40L)\n            {\n                DataBag columns = (DataBag) t.get(1);\n                Iterator<Tuple> iter = columns.iterator();\n                if (iter.hasNext())\n                {\n                    Tuple t1 = iter.next();\n                    Assert.assertEquals(t1.get(0), 6L);\n                    Assert.assertEquals(t1.get(1), \"coffee...\");\n                }\n            }\n            else if (\"clock\".equals(key.get(0)) && (Long) key.get(1) == 20L)\n            {\n                DataBag columns = (DataBag) t.get(1);\n                Iterator<Tuple> iter = columns.iterator();\n                if (iter.hasNext())\n                {\n                    Tuple t1 = iter.next();\n                    Assert.assertEquals(t1.get(0), 1L);\n                    Assert.assertEquals(t1.get(1), \"zzzz\");\n                }\n            }\n            else if (\"clock\".equals(key.get(0)) && (Long) key.get(1) == 30L)\n            {\n                DataBag columns = (DataBag) t.get(1);\n                Iterator<Tuple> iter = columns.iterator();\n                if (iter.hasNext())\n                {\n                    Tuple t1 = iter.next();\n                    Assert.assertEquals(t1.get(0), 2L);\n                    Assert.assertEquals(t1.get(1), \"daddy?\");\n                }\n            }\n        }\n        Assert.assertEquals(count, 4);\n    }","id":105824,"modified_method":"@Test\n    public void testCassandraStorageCompositeKeyCF() throws IOException, ClassNotFoundException, TException,\n        NoSuchFieldException, IllegalAccessException, InstantiationException\n    {\n        //Test CompositeKey\n        pig.registerQuery(\"compokeys = load 'cassandra://thrift_ks/compo_key?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.registerQuery(\"compokeys = filter compokeys by key.$1 == 40;\");\n        //((clock,40),{(6,coffee...)})\n        Iterator<Tuple> it = pig.openIterator(\"compokeys\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            Tuple key = (Tuple) t.get(0); \n            Assert.assertEquals(key.get(0), \"clock\");\n            Assert.assertEquals(key.get(1), 40L);\n            DataBag columns = (DataBag) t.get(1);\n            Iterator<Tuple> iter = columns.iterator();\n            if (iter.hasNext())\n            {\n                Tuple t1 = iter.next();\n                Assert.assertEquals(t1.get(0), 6L);\n                Assert.assertEquals(t1.get(1), \"coffee...\");\n            }\n        }\n        pig.setBatchOn();\n        pig.registerQuery(\"compo_key_rows = LOAD 'cassandra://thrift_ks/compo_key?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.registerQuery(\"STORE compo_key_rows INTO 'cassandra://thrift_ks/compo_key_copy?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.executeBatch();\n        pig.registerQuery(\"compo_key_copy_rows = LOAD 'cassandra://thrift_ks/compo_key_copy?\" + defaultParameters + \"' using CassandraStorage();\");\n        //((clock,10),{(1,z)})\n        //((clock,20),{(1,zzzz)})\n        //((clock,30),{(2,daddy?)})\n        //((clock,40),{(6,coffee...)})\n        it = pig.openIterator(\"compo_key_copy_rows\");\n        int count = 0;\n        while (it.hasNext()) {\n            Tuple t = it.next();\n            count ++;\n            Tuple key = (Tuple) t.get(0); \n            if (\"clock\".equals(key.get(0)) && (Long) key.get(1) == 10L)\n            {\n                DataBag columns = (DataBag) t.get(1);\n                Iterator<Tuple> iter = columns.iterator();\n                if (iter.hasNext())\n                {\n                    Tuple t1 = iter.next();\n                    Assert.assertEquals(t1.get(0), 1L);\n                    Assert.assertEquals(t1.get(1), \"z\");\n                }\n            }\n            else if (\"clock\".equals(key.get(0)) && (Long) key.get(1) == 40L)\n            {\n                DataBag columns = (DataBag) t.get(1);\n                Iterator<Tuple> iter = columns.iterator();\n                if (iter.hasNext())\n                {\n                    Tuple t1 = iter.next();\n                    Assert.assertEquals(t1.get(0), 6L);\n                    Assert.assertEquals(t1.get(1), \"coffee...\");\n                }\n            }\n            else if (\"clock\".equals(key.get(0)) && (Long) key.get(1) == 20L)\n            {\n                DataBag columns = (DataBag) t.get(1);\n                Iterator<Tuple> iter = columns.iterator();\n                if (iter.hasNext())\n                {\n                    Tuple t1 = iter.next();\n                    Assert.assertEquals(t1.get(0), 1L);\n                    Assert.assertEquals(t1.get(1), \"zzzz\");\n                }\n            }\n            else if (\"clock\".equals(key.get(0)) && (Long) key.get(1) == 30L)\n            {\n                DataBag columns = (DataBag) t.get(1);\n                Iterator<Tuple> iter = columns.iterator();\n                if (iter.hasNext())\n                {\n                    Tuple t1 = iter.next();\n                    Assert.assertEquals(t1.get(0), 2L);\n                    Assert.assertEquals(t1.get(1), \"daddy?\");\n                }\n            }\n        }\n        Assert.assertEquals(4, count);\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testCassandraStorageCounterCF() throws IOException, ClassNotFoundException, TException, TimedOutException, NotFoundException, InvalidRequestException, NoSuchFieldException, UnavailableException, IllegalAccessException, InstantiationException, AuthenticationException, AuthorizationException\n    {\n        pig.registerQuery(\"rows = LOAD 'cassandra://thriftKs/SomeApp?\" + defaultParameters + \"' USING CassandraStorage();\");\n\n        //Test counter column family support\n        pig.registerQuery(\"CC = load 'cassandra://thriftKs/CC?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.registerQuery(\"total_hits = foreach CC generate key, SUM(columns.value);\");\n        //(chuck,4)\n        Iterator<Tuple> it = pig.openIterator(\"total_hits\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            Assert.assertEquals(t.get(0), \"chuck\");\n            Assert.assertEquals(t.get(1), 4l);\n        }\n    }","id":105825,"modified_method":"@Test\n    public void testCassandraStorageCounterCF() throws IOException, ClassNotFoundException, TException, NoSuchFieldException,\n        IllegalAccessException, InstantiationException\n    {\n        //Test counter column family support\n        pig.registerQuery(\"CC = load 'cassandra://thrift_ks/cc?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.registerQuery(\"total_hits = foreach CC generate key, SUM(columns.value);\");\n        //(chuck,4)\n        Tuple t = pig.openIterator(\"total_hits\").next();\n        Assert.assertEquals(t.get(0), \"chuck\");\n        Assert.assertEquals(t.get(1), 4l);\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testCassandraStorageSchema() throws IOException, ClassNotFoundException, TException, TimedOutException, NotFoundException, InvalidRequestException, NoSuchFieldException, UnavailableException, IllegalAccessException, InstantiationException\n    {\n        //results: (qux,(atomic_weight,0.660161815846869),(created,1335890877),(name,User Qux),(percent,64.7),\n        //(rating,2),(score,12000),(vote_type,dislike),{(extra1,extra1),\n        //(extra2,extra2),(extra3,extra3),\n        //(extra4,extra4),(extra5,extra5),\n        //(extra6,extra6),(extra7,extra7)})\n        pig.registerQuery(\"rows = LOAD 'cassandra://thriftKs/SomeApp?\" + defaultParameters + \"' USING CassandraStorage();\");\n\n        //schema: {key: chararray,atomic_weight: (name: chararray,value: double),created: (name: chararray,value: long),\n        //name: (name: chararray,value: chararray),percent: (name: chararray,value: float),\n        //rating: (name: chararray,value: int),score: (name: chararray,value: long),\n        //vote_type: (name: chararray,value: chararray),columns: {(name: chararray,value: chararray)}}\n        Iterator<Tuple> it = pig.openIterator(\"rows\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            String rowKey =  t.get(0).toString();\n            if (\"qux\".equals(rowKey))\n            {\n                Tuple column = (Tuple) t.get(1);\n                Assert.assertEquals(column.get(0), \"atomic_weight\");\n                Assert.assertEquals(column.get(1), 0.660161815846869d);\n                column = (Tuple) t.get(3);\n                Assert.assertEquals(column.get(0), \"name\");\n                Assert.assertEquals(column.get(1), \"User Qux\");\n                column = (Tuple) t.get(4);\n                Assert.assertEquals(column.get(0), \"percent\");\n                Assert.assertEquals(column.get(1), 64.7f);\n                column = (Tuple) t.get(5);\n                Assert.assertEquals(column.get(0), \"rating\");\n                Assert.assertEquals(column.get(1), 2);\n                column = (Tuple) t.get(6);\n                Assert.assertEquals(column.get(0), \"score\");\n                Assert.assertEquals(column.get(1), 12000L);\n                column = (Tuple) t.get(7);\n                Assert.assertEquals(column.get(0), \"vote_type\");\n                Assert.assertEquals(column.get(1), \"dislike\");\n                DataBag columns = (DataBag) t.get(8);\n                Iterator<Tuple> iter = columns.iterator();\n                int i = 0;\n                while(iter.hasNext())\n                {\n                    i++;\n                    column = iter.next();\n                    Assert.assertEquals(column.get(0), \"extra\"+i);\n                }\n                Assert.assertEquals(7, columns.size());\n            }\n\n        }\n    }","id":105826,"modified_method":"@Test\n    public void testCassandraStorageSchema() throws IOException, ClassNotFoundException, TException, NoSuchFieldException,\n        IllegalAccessException, InstantiationException\n    {\n        //results: (qux,(atomic_weight,0.660161815846869),(created,1335890877),(name,User Qux),(percent,64.7),\n        //(rating,2),(score,12000),(vote_type,dislike))\n        pig.registerQuery(\"rows = LOAD 'cassandra://thrift_ks/some_app?\" + defaultParameters + \"' USING CassandraStorage();\");\n\n        //schema: {key: chararray,atomic_weight: (name: chararray,value: double),created: (name: chararray,value: long),\n        //name: (name: chararray,value: chararray),percent: (name: chararray,value: float),\n        //rating: (name: chararray,value: int),score: (name: chararray,value: long),\n        //vote_type: (name: chararray,value: chararray),columns: {(name: chararray,value: chararray)}}\n        Iterator<Tuple> it = pig.openIterator(\"rows\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            String rowKey =  t.get(0).toString();\n            if (\"qux\".equals(rowKey))\n            {\n                Tuple column = (Tuple) t.get(1);\n                Assert.assertEquals(column.get(0), \"atomic_weight\");\n                Assert.assertEquals(column.get(1), 0.660161815846869d);\n                column = (Tuple) t.get(3);\n                Assert.assertEquals(column.get(0), \"name\");\n                Assert.assertEquals(column.get(1), \"User Qux\");\n                column = (Tuple) t.get(4);\n                Assert.assertEquals(column.get(0), \"percent\");\n                Assert.assertEquals(column.get(1), 64.7f);\n                column = (Tuple) t.get(5);\n                Assert.assertEquals(column.get(0), \"rating\");\n                Assert.assertEquals(column.get(1), 2);\n                column = (Tuple) t.get(6);\n                Assert.assertEquals(column.get(0), \"score\");\n                Assert.assertEquals(column.get(1), 12000L);\n                column = (Tuple) t.get(7);\n                Assert.assertEquals(column.get(0), \"vote_type\");\n                Assert.assertEquals(column.get(1), \"dislike\");\n            }\n        }\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testCassandraStorageJoin() throws IOException, ClassNotFoundException, TException, TimedOutException, NotFoundException, InvalidRequestException, NoSuchFieldException, UnavailableException, IllegalAccessException, InstantiationException, AuthenticationException, AuthorizationException\n    {\n        //test key types with a join\n        pig.registerQuery(\"U8 = load 'cassandra://thriftKs/U8?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.registerQuery(\"Bytes = load 'cassandra://thriftKs/Bytes?\" + defaultParameters + \"' using CassandraStorage();\");\n\n        //cast key to chararray\n        pig.registerQuery(\"b = foreach Bytes generate (chararray)key, columns;\");\n\n        //key in Bytes is a bytearray, U8 chararray\n        //(foo,{(x,Z)},foo,{(x,Z)})\n        pig.registerQuery(\"a = join Bytes by key, U8 by key;\");\n        Iterator<Tuple> it = pig.openIterator(\"a\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            Assert.assertEquals(t.get(0), new DataByteArray(\"foo\".getBytes()));\n            DataBag columns = (DataBag) t.get(1);\n            Iterator<Tuple> iter = columns.iterator();\n            Tuple t1 = iter.next();\n            Assert.assertEquals(t1.get(0), \"x\");\n            Assert.assertEquals(t1.get(1), new DataByteArray(\"Z\".getBytes()));\n            String column = (String) t.get(2);\n            Assert.assertEquals(column, \"foo\");\n            columns = (DataBag) t.get(3);\n            iter = columns.iterator();\n            Tuple t2 = iter.next();\n            Assert.assertEquals(t2.get(0), \"x\");\n            Assert.assertEquals(t2.get(1), new DataByteArray(\"Z\".getBytes()));\n        }\n        //key should now be cast into a chararray\n        //(foo,{(x,Z)},foo,{(x,Z)})\n        pig.registerQuery(\"c = join b by (chararray)key, U8 by (chararray)key;\");\n        it = pig.openIterator(\"c\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            Assert.assertEquals(t.get(0), \"foo\");\n            DataBag columns = (DataBag) t.get(1);\n            Iterator<Tuple> iter = columns.iterator();\n            Tuple t1 = iter.next();\n            Assert.assertEquals(t1.get(0), \"x\");\n            Assert.assertEquals(t1.get(1), new DataByteArray(\"Z\".getBytes()));\n            String column = (String) t.get(2);\n            Assert.assertEquals(column, \"foo\");\n            columns = (DataBag) t.get(3);\n            iter = columns.iterator();\n            Tuple t2 = iter.next();\n            Assert.assertEquals(t2.get(0), \"x\");\n            Assert.assertEquals(t2.get(1), new DataByteArray(\"Z\".getBytes()));\n        }\n    }","id":105827,"modified_method":"@Test\n    public void testCassandraStorageJoin() throws IOException, ClassNotFoundException, TException, IllegalAccessException, InstantiationException\n    {\n        //test key types with a join\n        pig.registerQuery(\"U8 = load 'cassandra://thrift_ks/u8?\" + defaultParameters + \"' using CassandraStorage();\");\n        pig.registerQuery(\"Bytes = load 'cassandra://thrift_ks/bytes?\" + defaultParameters + \"' using CassandraStorage();\");\n\n        //cast key to chararray\n        pig.registerQuery(\"b = foreach Bytes generate (chararray)key, columns;\");\n\n        //key in Bytes is a bytearray, U8 chararray\n        //(foo,{(x,Z)},foo,{(x,Z)})\n        pig.registerQuery(\"a = join Bytes by key, U8 by key;\");\n        Iterator<Tuple> it = pig.openIterator(\"a\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            Assert.assertEquals(t.get(0), new DataByteArray(\"foo\".getBytes()));\n            DataBag columns = (DataBag) t.get(1);\n            Iterator<Tuple> iter = columns.iterator();\n            Tuple t1 = iter.next();\n            Assert.assertEquals(t1.get(0), \"x\");\n            Assert.assertEquals(t1.get(1), new DataByteArray(\"Z\".getBytes()));\n            String column = (String) t.get(2);\n            Assert.assertEquals(column, \"foo\");\n            columns = (DataBag) t.get(3);\n            iter = columns.iterator();\n            Tuple t2 = iter.next();\n            Assert.assertEquals(t2.get(0), \"x\");\n            Assert.assertEquals(t2.get(1), new DataByteArray(\"Z\".getBytes()));\n        }\n        //key should now be cast into a chararray\n        //(foo,{(x,Z)},foo,{(x,Z)})\n        pig.registerQuery(\"c = join b by (chararray)key, U8 by (chararray)key;\");\n        it = pig.openIterator(\"c\");\n        if (it.hasNext()) {\n            Tuple t = it.next();\n            Assert.assertEquals(t.get(0), \"foo\");\n            DataBag columns = (DataBag) t.get(1);\n            Iterator<Tuple> iter = columns.iterator();\n            Tuple t1 = iter.next();\n            Assert.assertEquals(t1.get(0), \"x\");\n            Assert.assertEquals(t1.get(1), new DataByteArray(\"Z\".getBytes()));\n            String column = (String) t.get(2);\n            Assert.assertEquals(column, \"foo\");\n            columns = (DataBag) t.get(3);\n            iter = columns.iterator();\n            Tuple t2 = iter.next();\n            Assert.assertEquals(t2.get(0), \"x\");\n            Assert.assertEquals(t2.get(1), new DataByteArray(\"Z\".getBytes()));\n        }\n    }","commit_id":"380273826d05913d4b80b73e0db2ea49711b17c7","url":"https://github.com/apache/cassandra"},{"original_method":"public boolean replace(K key, V oldToReplace, V value)\n    {\n        // if there is no old value in our map, we fail\n        FreeableMemory old = map.get(key);\n        if (old == null)\n            return false;\n\n        // see if the old value matches the one we want to replace\n        FreeableMemory mem = serialize(value);\n        if (mem == null)\n            return false; // out of memory.  never mind.\n        V oldValue = deserialize(old);\n        boolean success = oldValue.equals(oldToReplace) && map.replace(key, old, mem);\n\n        if (success)\n            old.unreference();\n        else\n            mem.unreference();\n        return success;\n    }","id":105828,"modified_method":"public boolean replace(K key, V oldToReplace, V value)\n    {\n        // if there is no old value in our map, we fail\n        FreeableMemory old = map.get(key);\n        if (old == null)\n            return false;\n\n        // see if the old value matches the one we want to replace\n        FreeableMemory mem = serialize(value);\n        if (mem == null)\n            return false; // out of memory.  never mind.\n\n        V oldValue;\n        // reference old guy before de-serializing\n        if (!old.reference())\n            return false; // we have already freed hence noop.\n        try\n        {\n             oldValue = deserialize(old);\n        }\n        finally\n        {\n            old.unreference();\n        }\n        boolean success = oldValue.equals(oldToReplace) && map.replace(key, old, mem);\n\n        if (success)\n            old.unreference(); // so it will be eventually be cleaned\n        else\n            mem.unreference();\n        return success;\n    }","commit_id":"f956569dbd7848eadbe5e70b12fadb7e25e0fc4a","url":"https://github.com/apache/cassandra"},{"original_method":"public boolean replace(K key, V oldToReplace, V value)\n    {\n        // if there is no old value in our map, we fail\n        FreeableMemory old = map.get(key);\n        if (old == null)\n            return false;\n\n        // see if the old value matches the one we want to replace\n        FreeableMemory mem = serialize(value);\n        if (mem == null)\n            return false; // out of memory.  never mind.\n        V oldValue = deserialize(old);\n        boolean success = oldValue.equals(oldToReplace) && map.replace(key, old, mem);\n\n        if (success)\n            old.unreference();\n        else\n            mem.unreference();\n        return success;\n    }","id":105829,"modified_method":"public boolean replace(K key, V oldToReplace, V value)\n    {\n        // if there is no old value in our map, we fail\n        FreeableMemory old = map.get(key);\n        if (old == null)\n            return false;\n\n        // see if the old value matches the one we want to replace\n        FreeableMemory mem = serialize(value);\n        if (mem == null)\n            return false; // out of memory.  never mind.\n\n        V oldValue;\n        // reference old guy before de-serializing\n        if (!old.reference())\n            return false; // we have already freed hence noop.\n        try\n        {\n             oldValue = deserialize(old);\n        }\n        finally\n        {\n            old.unreference();\n        }\n        boolean success = oldValue.equals(oldToReplace) && map.replace(key, old, mem);\n\n        if (success)\n            old.unreference(); // so it will be eventually be cleaned\n        else\n            mem.unreference();\n        return success;\n    }","commit_id":"030d4718e5596884c766b6e3e5b1c54fe23f6dd8","url":"https://github.com/apache/cassandra"},{"original_method":"public boolean replace(K key, V oldToReplace, V value)\n    {\n        // if there is no old value in our map, we fail\n        FreeableMemory old = map.get(key);\n        if (old == null)\n            return false;\n\n        // see if the old value matches the one we want to replace\n        FreeableMemory mem = serialize(value);\n        if (mem == null)\n            return false; // out of memory.  never mind.\n        V oldValue = deserialize(old);\n        boolean success = oldValue.equals(oldToReplace) && map.replace(key, old, mem);\n\n        if (success)\n            old.unreference();\n        else\n            mem.unreference();\n        return success;\n    }","id":105830,"modified_method":"public boolean replace(K key, V oldToReplace, V value)\n    {\n        // if there is no old value in our map, we fail\n        FreeableMemory old = map.get(key);\n        if (old == null)\n            return false;\n\n        // see if the old value matches the one we want to replace\n        FreeableMemory mem = serialize(value);\n        if (mem == null)\n            return false; // out of memory.  never mind.\n\n        V oldValue;\n        // reference old guy before de-serializing\n        if (!old.reference())\n            return false; // we have already freed hence noop.\n        try\n        {\n             oldValue = deserialize(old);\n        }\n        finally\n        {\n            old.unreference();\n        }\n        boolean success = oldValue.equals(oldToReplace) && map.replace(key, old, mem);\n\n        if (success)\n            old.unreference(); // so it will be eventually be cleaned\n        else\n            mem.unreference();\n        return success;\n    }","commit_id":"7e3bb8644d0b6e9bd3528fb589550f7d3971ab63","url":"https://github.com/apache/cassandra"},{"original_method":"@Override\n  protected void actionPerformed(@NotNull final HgRepository repository, @NotNull final VcsFullCommitDetails commit) {\n    final Project project = repository.getProject();\n    final Hash parentHash = commit.getParents().get(0);\n    final HgNameWithHashInfo parentPatchName = ContainerUtil.find(repository.getMQAppliedPatches(), new Condition<HgNameWithHashInfo>() {\n      @Override\n      public boolean value(HgNameWithHashInfo info) {\n        return info.getHash().equals(parentHash);\n      }\n    });\n    new Task.Backgroundable(repository.getProject(), parentPatchName != null\n                                                     ? HgVcsMessages.message(\"hg4idea.mq.progress.goto\", parentPatchName)\n                                                     : HgVcsMessages.message(\"hg4idea.mq.progress.pop\")) {\n\n      @Override\n      public void run(@NotNull ProgressIndicator indicator) {\n        if (parentPatchName != null) {\n          new HgQGotoCommand(repository).executeInCurrentThread(parentPatchName.getName());\n        }\n        else {\n          new HgQPopCommand(repository).executeInCurrentThread();\n        }\n      }\n\n      @Override\n      public void onSuccess() {\n        HgShowUnAppliedPatchesAction.showUnAppliedPatches(project, repository);\n      }\n    }.queue();\n  }","id":105831,"modified_method":"@Override\n  protected void actionPerformed(@NotNull final HgRepository repository, @NotNull final VcsFullCommitDetails commit) {\n    final Project project = repository.getProject();\n    List<Hash> parents = commit.getParents();\n    final Hash parentHash = parents.isEmpty() ? null : parents.get(0);\n\n    final HgNameWithHashInfo parentPatchName = ContainerUtil.find(repository.getMQAppliedPatches(), new Condition<HgNameWithHashInfo>() {\n      @Override\n      public boolean value(HgNameWithHashInfo info) {\n        return info.getHash().equals(parentHash);\n      }\n    });\n    new Task.Backgroundable(repository.getProject(), parentPatchName != null\n                                                     ? HgVcsMessages.message(\"hg4idea.mq.progress.goto\", parentPatchName)\n                                                     : HgVcsMessages.message(\"hg4idea.mq.progress.pop\")) {\n\n      @Override\n      public void run(@NotNull ProgressIndicator indicator) {\n        if (parentPatchName != null) {\n          new HgQGotoCommand(repository).executeInCurrentThread(parentPatchName.getName());\n        }\n        else {\n          new HgQPopCommand(repository).executeInCurrentThread();\n        }\n      }\n\n      @Override\n      public void onSuccess() {\n        HgShowUnAppliedPatchesAction.showUnAppliedPatches(project, repository);\n      }\n    }.queue();\n  }","commit_id":"7c016ade8992d16c5cafabb4c912ff00d15b129c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public List<CommittedChangeList> getCommittedChanges(ChangeBrowserSettings changeBrowserSettings,\n                                                       RepositoryLocation repositoryLocation,\n                                                       int maxCount) throws VcsException {\n    VirtualFile root = ((HgRepositoryLocation)repositoryLocation).getRoot();\n\n    HgFile hgFile = new HgFile(root, VcsUtil.getFilePath(root.getPath()));\n\n    List<CommittedChangeList> result = new LinkedList<CommittedChangeList>();\n    HgLogCommand hgLogCommand = new HgLogCommand(project);\n    hgLogCommand.setLogFile(false);\n    List<HgFileRevision> localRevisions =\n      hgLogCommand.execute(hgFile, maxCount == 0 ? -1 : maxCount, true); //can be empty\n\n    Collections.reverse(localRevisions);\n\n    for (HgFileRevision revision : localRevisions) {\n      HgRevisionNumber vcsRevisionNumber = revision.getRevisionNumber();\n      HgRevisionNumber firstParent = vcsRevisionNumber.getParents().get(0);\n      List<Change> changes = new ArrayList<Change>();\n      for (String file : revision.getModifiedFiles()) {\n        changes.add(createChange(root, file, firstParent, file, vcsRevisionNumber, FileStatus.MODIFIED));\n      }\n      for (String file : revision.getAddedFiles()) {\n        changes.add(createChange(root, null, null, file, vcsRevisionNumber, FileStatus.ADDED));\n      }\n      for (String file : revision.getDeletedFiles()) {\n        changes.add(createChange(root, file, firstParent, null, vcsRevisionNumber, FileStatus.DELETED));\n      }\n      for (Map.Entry<String, String> copiedFile : revision.getCopiedFiles().entrySet()) {\n        changes.add(createChange(root, copiedFile.getKey(), firstParent, copiedFile.getValue(), vcsRevisionNumber, FileStatus.ADDED));\n      }\n\n      result.add(new HgCommittedChangeList(myVcs, vcsRevisionNumber, revision.getBranchName(), revision.getCommitMessage(),\n                                           revision.getAuthor(), revision.getRevisionDate(), changes));\n    }\n    Collections.reverse(result);\n    return result;\n  }","id":105832,"modified_method":"public List<CommittedChangeList> getCommittedChanges(ChangeBrowserSettings changeBrowserSettings,\n                                                       RepositoryLocation repositoryLocation,\n                                                       int maxCount) throws VcsException {\n    VirtualFile root = ((HgRepositoryLocation)repositoryLocation).getRoot();\n\n    HgFile hgFile = new HgFile(root, VcsUtil.getFilePath(root.getPath()));\n\n    List<CommittedChangeList> result = new LinkedList<CommittedChangeList>();\n    HgLogCommand hgLogCommand = new HgLogCommand(project);\n    hgLogCommand.setLogFile(false);\n    List<HgFileRevision> localRevisions =\n      hgLogCommand.execute(hgFile, maxCount == 0 ? -1 : maxCount, true); //can be empty\n\n    Collections.reverse(localRevisions);\n\n    for (HgFileRevision revision : localRevisions) {\n      HgRevisionNumber vcsRevisionNumber = revision.getRevisionNumber();\n      List<HgRevisionNumber> parents = vcsRevisionNumber.getParents();\n\n      HgRevisionNumber firstParent;\n      if ( parents.isEmpty() ) {\n        // There's no parent...this is a root in the repository.\n        firstParent = null;\n      }\n      else {\n        firstParent = parents.get(0);\n      }\n\n      List<Change> changes = new ArrayList<Change>();\n      for (String file : revision.getModifiedFiles()) {\n        changes.add(createChange(root, file, firstParent, file, vcsRevisionNumber, FileStatus.MODIFIED));\n      }\n      for (String file : revision.getAddedFiles()) {\n        changes.add(createChange(root, null, null, file, vcsRevisionNumber, FileStatus.ADDED));\n      }\n      for (String file : revision.getDeletedFiles()) {\n        changes.add(createChange(root, file, firstParent, null, vcsRevisionNumber, FileStatus.DELETED));\n      }\n      for (Map.Entry<String, String> copiedFile : revision.getCopiedFiles().entrySet()) {\n        changes.add(createChange(root, copiedFile.getKey(), firstParent, copiedFile.getValue(), vcsRevisionNumber, FileStatus.ADDED));\n      }\n\n      result.add(new HgCommittedChangeList(myVcs, vcsRevisionNumber, revision.getBranchName(), revision.getCommitMessage(),\n                                           revision.getAuthor(), revision.getRevisionDate(), changes));\n    }\n    Collections.reverse(result);\n    return result;\n  }","commit_id":"4a504db69577bd00644850915a6c5063bf29c989","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public CommittedChangeList getCommittedChangesForRevision(@Nullable RepositoryLocation repositoryLocation, String revision) {\n    if (repositoryLocation == null) {\n      return null;\n    }\n    VirtualFile root = ((HgRepositoryLocation)repositoryLocation).getRoot();\n    HgFile hgFile = new HgFile(root, VcsUtil.getFilePath(root.getPath()));\n    HgLogCommand hgLogCommand = new HgLogCommand(project);\n    hgLogCommand.setLogFile(false);\n    hgLogCommand.setFollowCopies(true);\n    List<String> args = new ArrayList<String>();\n    args.add(\"--rev\");\n    args.add(revision);\n    final List<HgFileRevision> revisions;\n    try {\n      revisions = hgLogCommand.execute(hgFile, 1, true, args);\n    }\n    catch (HgCommandException e) {\n      new HgCommandResultNotifier(project).notifyError(null, HgVcsMessages.message(\"hg4idea.error.log.command.execution\"), e.getMessage());\n      return null;\n    }\n    if (ContainerUtil.isEmpty(revisions)) {\n      return null;\n    }\n    HgFileRevision localRevision = revisions.get(0);\n    HgRevisionNumber vcsRevisionNumber = localRevision.getRevisionNumber();\n    HgRevisionNumber firstParent = vcsRevisionNumber.getParents().get(0);\n    List<Change> changes = new ArrayList<Change>();\n    for (String file : localRevision.getModifiedFiles()) {\n      changes.add(createChange(root, file, firstParent, file, vcsRevisionNumber, FileStatus.MODIFIED));\n    }\n    for (String file : localRevision.getAddedFiles()) {\n      changes.add(createChange(root, null, null, file, vcsRevisionNumber, FileStatus.ADDED));\n    }\n    for (String file : localRevision.getDeletedFiles()) {\n      changes.add(createChange(root, file, firstParent, null, vcsRevisionNumber, FileStatus.DELETED));\n    }\n    for (Map.Entry<String, String> copiedFile : localRevision.getCopiedFiles().entrySet()) {\n      changes.add(createChange(root, copiedFile.getKey(), firstParent, copiedFile.getValue(), vcsRevisionNumber, HgChangeProvider.COPIED));\n    }\n\n    return new HgCommittedChangeList(myVcs, vcsRevisionNumber, localRevision.getBranchName(), localRevision.getCommitMessage(),\n                                     localRevision.getAuthor(), localRevision.getRevisionDate(), changes);\n  }","id":105833,"modified_method":"@Nullable\n  public CommittedChangeList getCommittedChangesForRevision(@Nullable RepositoryLocation repositoryLocation, String revision) {\n    if (repositoryLocation == null) {\n      return null;\n    }\n    VirtualFile root = ((HgRepositoryLocation)repositoryLocation).getRoot();\n    HgFile hgFile = new HgFile(root, VcsUtil.getFilePath(root.getPath()));\n    HgLogCommand hgLogCommand = new HgLogCommand(project);\n    hgLogCommand.setLogFile(false);\n    hgLogCommand.setFollowCopies(true);\n    List<String> args = new ArrayList<String>();\n    args.add(\"--rev\");\n    args.add(revision);\n    final List<HgFileRevision> revisions;\n    try {\n      revisions = hgLogCommand.execute(hgFile, 1, true, args);\n    }\n    catch (HgCommandException e) {\n      new HgCommandResultNotifier(project).notifyError(null, HgVcsMessages.message(\"hg4idea.error.log.command.execution\"), e.getMessage());\n      return null;\n    }\n    if (ContainerUtil.isEmpty(revisions)) {\n      return null;\n    }\n    HgFileRevision localRevision = revisions.get(0);\n    HgRevisionNumber vcsRevisionNumber = localRevision.getRevisionNumber();\n    List<HgRevisionNumber> parents = vcsRevisionNumber.getParents();\n    HgRevisionNumber firstParent = parents.isEmpty() ? null : parents.get(0); // can have no parents if it is a root\n    List<Change> changes = new ArrayList<Change>();\n    for (String file : localRevision.getModifiedFiles()) {\n      changes.add(createChange(root, file, firstParent, file, vcsRevisionNumber, FileStatus.MODIFIED));\n    }\n    for (String file : localRevision.getAddedFiles()) {\n      changes.add(createChange(root, null, null, file, vcsRevisionNumber, FileStatus.ADDED));\n    }\n    for (String file : localRevision.getDeletedFiles()) {\n      changes.add(createChange(root, file, firstParent, null, vcsRevisionNumber, FileStatus.DELETED));\n    }\n    for (Map.Entry<String, String> copiedFile : localRevision.getCopiedFiles().entrySet()) {\n      changes.add(createChange(root, copiedFile.getKey(), firstParent, copiedFile.getValue(), vcsRevisionNumber, HgChangeProvider.COPIED));\n    }\n\n    return new HgCommittedChangeList(myVcs, vcsRevisionNumber, localRevision.getBranchName(), localRevision.getCommitMessage(),\n                                     localRevision.getAuthor(), localRevision.getRevisionDate(), changes);\n  }","commit_id":"3ab65e63c8bf8684f68d7bbe295c2c2b9d5993a0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Creates a new instance of {@link FileSystemWorker}.\n   *\n   * @param blockWorker the block worker handle\n   * @throws IOException if an I/O error occurs\n   */\n  public DefaultFileSystemWorker(BlockWorker blockWorker) throws IOException {\n    super(Executors.newFixedThreadPool(3,\n        ThreadFactoryUtils.build(\"file-system-worker-heartbeat-%d\", true)));\n\n    mSessions = new Sessions();\n    mFileDataManager = new FileDataManager(Preconditions.checkNotNull(blockWorker));\n    mUnderFileSystemManager = new UnderFileSystemManager();\n\n    // Setup AbstractMasterClient\n    mFileSystemMasterWorkerClient = new FileSystemMasterClient(\n        NetworkAddressUtils.getConnectAddress(ServiceType.MASTER_RPC));\n\n    // Setup session cleaner\n    mSessionCleaner = new SessionCleaner(new SessionCleanupCallback() {\n      /**\n       * Cleans up after sessions, to prevent zombie sessions holding ufs resources.\n       */\n      @Override\n      public void cleanupSessions() {\n        for (long session : mSessions.getTimedOutSessions()) {\n          mSessions.removeSession(session);\n          mUnderFileSystemManager.cleanupSession(session);\n        }\n      }\n    });\n\n    mServiceHandler = new FileSystemWorkerClientServiceHandler(this);\n  }","id":105834,"modified_method":"/**\n   * Creates a new instance of {@link FileSystemWorker}.\n   *\n   * @param blockWorker the block worker handle\n   * @throws IOException if an I/O error occurs\n   */\n  public DefaultFileSystemWorker(BlockWorker blockWorker) throws IOException {\n    super(Executors.newFixedThreadPool(3,\n        ThreadFactoryUtils.build(\"file-system-worker-heartbeat-%d\", true)));\n\n    mSessions = new Sessions();\n    UnderFileSystem ufs = UnderFileSystem.get(Configuration.get(Constants.UNDERFS_ADDRESS));\n    mFileDataManager = new FileDataManager(Preconditions.checkNotNull(blockWorker), ufs);\n    mUnderFileSystemManager = new UnderFileSystemManager();\n\n    // Setup AbstractMasterClient\n    mFileSystemMasterWorkerClient = new FileSystemMasterClient(\n        NetworkAddressUtils.getConnectAddress(ServiceType.MASTER_RPC));\n\n    // Setup session cleaner\n    mSessionCleaner = new SessionCleaner(new SessionCleanupCallback() {\n      /**\n       * Cleans up after sessions, to prevent zombie sessions holding ufs resources.\n       */\n      @Override\n      public void cleanupSessions() {\n        for (long session : mSessions.getTimedOutSessions()) {\n          mSessions.removeSession(session);\n          mUnderFileSystemManager.cleanupSession(session);\n        }\n      }\n    });\n\n    mServiceHandler = new FileSystemWorkerClientServiceHandler(this);\n  }","commit_id":"34f312414f56fd0dfda4c501d0eeecb0ba19bc9d","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Creates a new instance of {@link FileDataManager}.\n   *\n   * @param blockWorker the block worker handle\n   */\n  public FileDataManager(BlockWorker blockWorker) {\n    mBlockWorker = Preconditions.checkNotNull(blockWorker);\n    mPersistingInProgressFiles = new HashMap<>();\n    mPersistedFiles = new HashSet<>();\n    // Create Under FileSystem Client\n    String ufsAddress = Configuration.get(Constants.UNDERFS_ADDRESS);\n    mUfs = UnderFileSystem.get(ufsAddress);\n  }","id":105835,"modified_method":"/**\n   * Creates a new instance of {@link FileDataManager}.\n   *\n   * @param blockWorker the block worker handle\n   */\n  public FileDataManager(BlockWorker blockWorker, UnderFileSystem ufs) {\n    mBlockWorker = Preconditions.checkNotNull(blockWorker);\n    mPersistingInProgressFiles = new HashMap<>();\n    mPersistedFiles = new HashSet<>();\n    mUfs = ufs;\n  }","commit_id":"34f312414f56fd0dfda4c501d0eeecb0ba19bc9d","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Persists the blocks of a file into the under file system.\n   *\n   * @param fileId the id of the file\n   * @param blockIds the list of block ids\n   * @throws IOException if the file persistence fails\n   */\n  public void persistFile(long fileId, List<Long> blockIds) throws IOException {\n    Map<Long, Long> blockIdToLockId;\n    synchronized (mLock) {\n      blockIdToLockId = mPersistingInProgressFiles.get(fileId);\n      if (blockIdToLockId == null || !blockIdToLockId.keySet().equals(new HashSet<>(blockIds))) {\n        throw new IOException(\"Not all the blocks of file \" + fileId + \" are blocked\");\n      }\n    }\n\n    String dstPath = prepareUfsFilePath(fileId);\n    // TODO(chaomin): should also propagate ancestor dirs permission to UFS.\n    FileInfo fileInfo = mBlockWorker.getFileInfo(fileId);\n    Permission perm = new Permission(fileInfo.getOwner(), fileInfo.getGroup(),\n        (short) fileInfo.getMode());\n    OutputStream outputStream = mUfs.create(dstPath, new CreateOptions().setPermission(perm));\n    final WritableByteChannel outputChannel = Channels.newChannel(outputStream);\n\n    List<Throwable> errors = new ArrayList<>();\n    try {\n      for (long blockId : blockIds) {\n        long lockId = blockIdToLockId.get(blockId);\n\n        if (Configuration.getBoolean(Constants.WORKER_FILE_PERSIST_RATE_LIMIT_ENABLED)) {\n          BlockMeta blockMeta =\n              mBlockWorker.getBlockMeta(Sessions.CHECKPOINT_SESSION_ID, blockId, lockId);\n          getRateLimiter().acquire((int) blockMeta.getBlockSize());\n        }\n\n        // obtain block reader\n        BlockReader reader =\n            mBlockWorker.readBlockRemote(Sessions.CHECKPOINT_SESSION_ID, blockId, lockId);\n\n        // write content out\n        ReadableByteChannel inputChannel = reader.getChannel();\n        BufferUtils.fastCopy(inputChannel, outputChannel);\n        reader.close();\n      }\n    } catch (BlockDoesNotExistException e) {\n      errors.add(e);\n    } catch (InvalidWorkerStateException e) {\n      errors.add(e);\n    } finally {\n      // make sure all the locks are released\n      for (long lockId : blockIdToLockId.values()) {\n        try {\n          mBlockWorker.unlockBlock(lockId);\n        } catch (BlockDoesNotExistException e) {\n          errors.add(e);\n        }\n      }\n\n      if (!errors.isEmpty()) {\n        StringBuilder errorStr = new StringBuilder();\n        errorStr.append(\"the blocks of file\").append(fileId).append(\" are failed to persist\\n\");\n        for (Throwable e : errors) {\n          errorStr.append(e).append('\\n');\n        }\n        throw new IOException(errorStr.toString());\n      }\n    }\n\n    outputStream.flush();\n    outputChannel.close();\n    outputStream.close();\n    synchronized (mLock) {\n      mPersistingInProgressFiles.remove(fileId);\n      mPersistedFiles.add(fileId);\n    }\n  }","id":105836,"modified_method":"/**\n   * Persists the blocks of a file into the under file system.\n   *\n   * @param fileId the id of the file\n   * @param blockIds the list of block ids\n   * @throws IOException if the file persistence fails\n   */\n  public void persistFile(long fileId, List<Long> blockIds) throws IOException {\n    Map<Long, Long> blockIdToLockId;\n    synchronized (mLock) {\n      blockIdToLockId = mPersistingInProgressFiles.get(fileId);\n      if (blockIdToLockId == null || !blockIdToLockId.keySet().equals(new HashSet<>(blockIds))) {\n        throw new IOException(\"Not all the blocks of file \" + fileId + \" are locked\");\n      }\n    }\n\n    String dstPath = prepareUfsFilePath(fileId);\n    // TODO(chaomin): should also propagate ancestor dirs permission to UFS.\n    FileInfo fileInfo = mBlockWorker.getFileInfo(fileId);\n    Permission perm = new Permission(fileInfo.getOwner(), fileInfo.getGroup(),\n        (short) fileInfo.getMode());\n    OutputStream outputStream = mUfs.create(dstPath, new CreateOptions().setPermission(perm));\n    final WritableByteChannel outputChannel = Channels.newChannel(outputStream);\n\n    List<Throwable> errors = new ArrayList<>();\n    try {\n      for (long blockId : blockIds) {\n        long lockId = blockIdToLockId.get(blockId);\n\n        if (Configuration.getBoolean(Constants.WORKER_FILE_PERSIST_RATE_LIMIT_ENABLED)) {\n          BlockMeta blockMeta =\n              mBlockWorker.getBlockMeta(Sessions.CHECKPOINT_SESSION_ID, blockId, lockId);\n          getRateLimiter().acquire((int) blockMeta.getBlockSize());\n        }\n\n        // obtain block reader\n        BlockReader reader =\n            mBlockWorker.readBlockRemote(Sessions.CHECKPOINT_SESSION_ID, blockId, lockId);\n\n        // write content out\n        ReadableByteChannel inputChannel = reader.getChannel();\n        BufferUtils.fastCopy(inputChannel, outputChannel);\n        reader.close();\n      }\n    } catch (BlockDoesNotExistException e) {\n      errors.add(e);\n    } catch (InvalidWorkerStateException e) {\n      errors.add(e);\n    } finally {\n      // make sure all the locks are released\n      for (long lockId : blockIdToLockId.values()) {\n        try {\n          mBlockWorker.unlockBlock(lockId);\n        } catch (BlockDoesNotExistException e) {\n          errors.add(e);\n        }\n      }\n\n      if (!errors.isEmpty()) {\n        StringBuilder errorStr = new StringBuilder();\n        errorStr.append(\"the blocks of file\").append(fileId).append(\" are failed to persist\\n\");\n        for (Throwable e : errors) {\n          errorStr.append(e).append('\\n');\n        }\n        throw new IOException(errorStr.toString());\n      }\n    }\n\n    outputStream.flush();\n    outputChannel.close();\n    outputStream.close();\n    synchronized (mLock) {\n      mPersistingInProgressFiles.remove(fileId);\n      mPersistedFiles.add(fileId);\n    }\n  }","commit_id":"34f312414f56fd0dfda4c501d0eeecb0ba19bc9d","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * @return the persisted file\n   */\n  public List<Long> getPersistedFiles() {\n    List<Long> toReturn = new ArrayList<>();\n    synchronized (mLock) {\n      toReturn.addAll(mPersistedFiles);\n      return toReturn;\n    }\n  }","id":105837,"modified_method":"/**\n   * @return the persisted file\n   */\n  public List<Long> getPersistedFiles() {\n    synchronized (mLock) {\n      return ImmutableList.copyOf(mPersistedFiles);\n    }\n  }","commit_id":"34f312414f56fd0dfda4c501d0eeecb0ba19bc9d","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests that the correct error message is provided when persisting a file fails.\n   */\n  @Test\n  public void errorHandlingTest() throws Exception {\n    long fileId = 1;\n    List<Long> blockIds = Lists.newArrayList(1L, 2L);\n\n    // mock block worker\n    BlockWorker blockWorker = Mockito.mock(BlockWorker.class);\n    FileInfo fileInfo = new FileInfo();\n    fileInfo.setPath(\"test\");\n    Mockito.when(blockWorker.getFileInfo(fileId)).thenReturn(fileInfo);\n    for (long blockId : blockIds) {\n      Mockito.when(blockWorker.lockBlock(Sessions.CHECKPOINT_SESSION_ID, blockId))\n          .thenReturn(blockId);\n      Mockito.doThrow(new InvalidWorkerStateException(\"invalid worker\")).when(blockWorker)\n          .readBlockRemote(Sessions.CHECKPOINT_SESSION_ID, blockId, blockId);\n    }\n\n    FileDataManager manager = new FileDataManager(blockWorker);\n\n    // mock ufs\n    UnderFileSystem ufs = Mockito.mock(UnderFileSystem.class);\n    String ufsRoot = Configuration.get(Constants.UNDERFS_ADDRESS);\n    Mockito.when(ufs.exists(ufsRoot)).thenReturn(true);\n    Whitebox.setInternalState(manager, \"mUfs\", ufs);\n    OutputStream outputStream = Mockito.mock(OutputStream.class);\n\n    // mock BufferUtils\n    PowerMockito.mockStatic(BufferUtils.class);\n    String dstPath = PathUtils.concatPath(ufsRoot, fileInfo.getPath());\n    Mockito.when(ufs.create(dstPath)).thenReturn(outputStream);\n    Mockito.when(ufs.create(Mockito.anyString(), Mockito.any(CreateOptions.class)))\n        .thenReturn(outputStream);\n\n    manager.lockBlocks(fileId, blockIds);\n    try {\n      manager.persistFile(fileId, blockIds);\n      Assert.fail(\"the persist should fail\");\n    } catch (IOException e) {\n      Assert.assertEquals(\"the blocks of file1 are failed to persist\\n\"\n          + \"alluxio.exception.InvalidWorkerStateException: invalid worker\\n\", e.getMessage());\n      // verify the locks are all unlocked\n      Mockito.verify(blockWorker).unlockBlock(1L);\n      Mockito.verify(blockWorker).unlockBlock(2L);\n    }\n  }","id":105838,"modified_method":"/**\n   * Tests that the correct error message is provided when persisting a file fails.\n   */\n  @Test\n  public void errorHandlingTest() throws Exception {\n    long fileId = 1;\n    List<Long> blockIds = Lists.newArrayList(1L, 2L);\n\n    FileInfo fileInfo = new FileInfo();\n    fileInfo.setPath(\"test\");\n    Mockito.when(mBlockWorker.getFileInfo(fileId)).thenReturn(fileInfo);\n    for (long blockId : blockIds) {\n      Mockito.when(mBlockWorker.lockBlock(Sessions.CHECKPOINT_SESSION_ID, blockId))\n          .thenReturn(blockId);\n      Mockito.doThrow(new InvalidWorkerStateException(\"invalid worker\")).when(mBlockWorker)\n          .readBlockRemote(Sessions.CHECKPOINT_SESSION_ID, blockId, blockId);\n    }\n\n    String ufsRoot = Configuration.get(Constants.UNDERFS_ADDRESS);\n    Mockito.when(mUfs.exists(ufsRoot)).thenReturn(true);\n    OutputStream outputStream = Mockito.mock(OutputStream.class);\n\n    // mock BufferUtils\n    PowerMockito.mockStatic(BufferUtils.class);\n    String dstPath = PathUtils.concatPath(ufsRoot, fileInfo.getPath());\n    Mockito.when(mUfs.create(dstPath)).thenReturn(outputStream);\n    Mockito.when(mUfs.create(Mockito.anyString(), Mockito.any(CreateOptions.class)))\n        .thenReturn(outputStream);\n\n    mManager.lockBlocks(fileId, blockIds);\n    try {\n      mManager.persistFile(fileId, blockIds);\n      Assert.fail(\"the persist should fail\");\n    } catch (IOException e) {\n      Assert.assertEquals(\"the blocks of file1 are failed to persist\\n\"\n          + \"alluxio.exception.InvalidWorkerStateException: invalid worker\\n\", e.getMessage());\n      // verify the locks are all unlocked\n      Mockito.verify(mBlockWorker).unlockBlock(1L);\n      Mockito.verify(mBlockWorker).unlockBlock(2L);\n    }\n  }","commit_id":"34f312414f56fd0dfda4c501d0eeecb0ba19bc9d","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests that a file gets persisted.\n   */\n  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void persistFileTest() throws Exception {\n    long fileId = 1;\n    List<Long> blockIds = Lists.newArrayList(1L, 2L);\n\n    // mock block worker\n    BlockWorker blockWorker = Mockito.mock(BlockWorker.class);\n    FileInfo fileInfo = new FileInfo();\n    fileInfo.setPath(\"test\");\n    Mockito.when(blockWorker.getFileInfo(fileId)).thenReturn(fileInfo);\n    BlockReader reader = Mockito.mock(BlockReader.class);\n    for (long blockId : blockIds) {\n      Mockito.when(blockWorker.lockBlock(Sessions.CHECKPOINT_SESSION_ID, blockId))\n          .thenReturn(blockId);\n      Mockito.when(blockWorker.readBlockRemote(Sessions.CHECKPOINT_SESSION_ID, blockId, blockId))\n          .thenReturn(reader);\n    }\n\n    FileDataManager manager = new FileDataManager(blockWorker);\n\n    // mock ufs\n    UnderFileSystem ufs = Mockito.mock(UnderFileSystem.class);\n    String ufsRoot = Configuration.get(Constants.UNDERFS_ADDRESS);\n    Mockito.when(ufs.exists(ufsRoot)).thenReturn(true);\n    Whitebox.setInternalState(manager, \"mUfs\", ufs);\n    OutputStream outputStream = Mockito.mock(OutputStream.class);\n\n    // mock BufferUtils\n    PowerMockito.mockStatic(BufferUtils.class);\n\n    String dstPath = PathUtils.concatPath(ufsRoot, fileInfo.getPath());\n    Mockito.when(ufs.create(dstPath)).thenReturn(outputStream);\n    Mockito.when(ufs.create(Mockito.anyString(), Mockito.any(CreateOptions.class)))\n        .thenReturn(outputStream);\n\n    manager.lockBlocks(fileId, blockIds);\n    manager.persistFile(fileId, blockIds);\n\n    // verify file persisted\n    Set<Long> persistedFiles = (Set<Long>) Whitebox.getInternalState(manager, \"mPersistedFiles\");\n    Assert.assertEquals(Sets.newHashSet(fileId), persistedFiles);\n\n    // verify fastCopy called twice, once per block\n    PowerMockito.verifyStatic(Mockito.times(2));\n    BufferUtils.fastCopy(Mockito.any(ReadableByteChannel.class),\n        Mockito.any(WritableByteChannel.class));\n\n    // verify the file is not needed for another persistence\n    Assert.assertFalse(manager.needPersistence(fileId));\n  }","id":105839,"modified_method":"/**\n   * Tests that a file gets persisted.\n   */\n  @Test\n  public void persistFileTest() throws Exception {\n    long fileId = 1;\n    List<Long> blockIds = Lists.newArrayList(1L, 2L);\n\n    writeFileWithBlocks(fileId, blockIds);\n\n    // verify file persisted\n    Assert.assertEquals(Arrays.asList(fileId), mManager.getPersistedFiles());\n\n    // verify fastCopy called twice, once per block\n    PowerMockito.verifyStatic(Mockito.times(2));\n    BufferUtils.fastCopy(Mockito.any(ReadableByteChannel.class),\n        Mockito.any(WritableByteChannel.class));\n\n    // verify the file is not needed for another persistence\n    Assert.assertFalse(mManager.needPersistence(fileId));\n  }","commit_id":"34f312414f56fd0dfda4c501d0eeecb0ba19bc9d","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests the rate limiting functionality for asynchronous persistence.\n   */\n  @Test\n  public void persistFileRateLimitingTest() throws Exception {\n    long fileId = 1;\n    List<Long> blockIds = Lists.newArrayList(1L, 2L, 3L);\n\n    // mock block worker\n    BlockWorker blockWorker = Mockito.mock(BlockWorker.class);\n    FileInfo fileInfo = new FileInfo();\n    fileInfo.setPath(\"test\");\n    Mockito.when(blockWorker.getFileInfo(fileId)).thenReturn(fileInfo);\n    BlockReader reader = Mockito.mock(BlockReader.class);\n    for (long blockId : blockIds) {\n      Mockito.when(blockWorker.lockBlock(Sessions.CHECKPOINT_SESSION_ID, blockId))\n          .thenReturn(blockId);\n      Mockito\n          .when(blockWorker.readBlockRemote(Sessions.CHECKPOINT_SESSION_ID, blockId, blockId))\n          .thenReturn(reader);\n      BlockMeta mockedBlockMeta = PowerMockito.mock(BlockMeta.class);\n      Mockito.when(mockedBlockMeta.getBlockSize()).thenReturn(100L);\n      Mockito\n          .when(blockWorker.getBlockMeta(Sessions.CHECKPOINT_SESSION_ID, blockId, blockId))\n          .thenReturn(mockedBlockMeta);\n    }\n\n    Configuration.set(Constants.WORKER_FILE_PERSIST_RATE_LIMIT_ENABLED, \"true\");\n    Configuration.set(Constants.WORKER_FILE_PERSIST_RATE_LIMIT, \"100\");\n\n    FileDataManager manager = new FileDataManager(blockWorker);\n\n    // mock ufs\n    UnderFileSystem ufs = Mockito.mock(UnderFileSystem.class);\n    String ufsRoot = Configuration.get(Constants.UNDERFS_ADDRESS);\n    Mockito.when(ufs.exists(ufsRoot)).thenReturn(true);\n    Whitebox.setInternalState(manager, \"mUfs\", ufs);\n\n    // Setup a mock rate limiter.\n    MockRateLimiter mockRateLimiter = new MockRateLimiter(\n        Configuration.getBytes(Constants.WORKER_FILE_PERSIST_RATE_LIMIT));\n    Whitebox.setInternalState(\n        manager, \"mPersistenceRateLimiter\", mockRateLimiter.getGuavaRateLimiter());\n\n    OutputStream outputStream = Mockito.mock(OutputStream.class);\n\n    // mock BufferUtils\n    PowerMockito.mockStatic(BufferUtils.class);\n\n    String dstPath = PathUtils.concatPath(ufsRoot, fileInfo.getPath());\n    Mockito.when(ufs.create(dstPath)).thenReturn(outputStream);\n    Mockito.when(ufs.create(Mockito.anyString(), Mockito.any(CreateOptions.class)))\n        .thenReturn(outputStream);\n\n    manager.lockBlocks(fileId, blockIds);\n    manager.persistFile(fileId, blockIds);\n\n    List<String> expectedEvents = Lists.newArrayList(\"R0.00\", \"R1.00\", \"R1.00\");\n    assertEquals(expectedEvents, mockRateLimiter.readEventsAndClear());\n\n    // Simulate waiting for 1 second.\n    mockRateLimiter.sleepMillis(1000);\n\n    manager.lockBlocks(fileId, blockIds);\n    manager.persistFile(fileId, blockIds);\n\n    // The first write will go through immediately without throttling.\n    expectedEvents = Lists.newArrayList(\"U1.00\", \"R0.00\", \"R1.00\", \"R1.00\");\n    assertEquals(expectedEvents, mockRateLimiter.readEventsAndClear());\n\n    // Repeat persistence without sleeping.\n    mockRateLimiter = new MockRateLimiter(\n        Configuration.getBytes(Constants.WORKER_FILE_PERSIST_RATE_LIMIT));\n    Whitebox.setInternalState(\n        manager, \"mPersistenceRateLimiter\", mockRateLimiter.getGuavaRateLimiter());\n\n    manager.lockBlocks(fileId, blockIds);\n    manager.persistFile(fileId, blockIds);\n\n    expectedEvents = Lists.newArrayList(\"R0.00\", \"R1.00\", \"R1.00\");\n    assertEquals(expectedEvents, mockRateLimiter.readEventsAndClear());\n\n    manager.lockBlocks(fileId, blockIds);\n    manager.persistFile(fileId, blockIds);\n\n    expectedEvents = Lists.newArrayList(\"R1.00\", \"R1.00\", \"R1.00\");\n    assertEquals(expectedEvents, mockRateLimiter.readEventsAndClear());\n  }","id":105840,"modified_method":"/**\n   * Tests the rate limiting functionality for asynchronous persistence.\n   */\n  @Test\n  public void persistFileRateLimitingTest() throws Exception {\n    long fileId = 1;\n    List<Long> blockIds = Lists.newArrayList(1L, 2L, 3L);\n\n    FileInfo fileInfo = new FileInfo();\n    fileInfo.setPath(\"test\");\n    Mockito.when(mBlockWorker.getFileInfo(fileId)).thenReturn(fileInfo);\n    BlockReader reader = Mockito.mock(BlockReader.class);\n    for (long blockId : blockIds) {\n      Mockito.when(mBlockWorker.lockBlock(Sessions.CHECKPOINT_SESSION_ID, blockId))\n          .thenReturn(blockId);\n      Mockito\n          .when(mBlockWorker.readBlockRemote(Sessions.CHECKPOINT_SESSION_ID, blockId, blockId))\n          .thenReturn(reader);\n      BlockMeta mockedBlockMeta = PowerMockito.mock(BlockMeta.class);\n      Mockito.when(mockedBlockMeta.getBlockSize()).thenReturn(100L);\n      Mockito\n          .when(mBlockWorker.getBlockMeta(Sessions.CHECKPOINT_SESSION_ID, blockId, blockId))\n          .thenReturn(mockedBlockMeta);\n    }\n\n    Configuration.set(Constants.WORKER_FILE_PERSIST_RATE_LIMIT_ENABLED, \"true\");\n    Configuration.set(Constants.WORKER_FILE_PERSIST_RATE_LIMIT, \"100\");\n\n    // mock ufs\n    String ufsRoot = Configuration.get(Constants.UNDERFS_ADDRESS);\n    Mockito.when(mUfs.exists(ufsRoot)).thenReturn(true);\n\n    // Setup a mock rate limiter.\n    MockRateLimiter mockRateLimiter = new MockRateLimiter(\n        Configuration.getBytes(Constants.WORKER_FILE_PERSIST_RATE_LIMIT));\n    Whitebox.setInternalState(\n        mManager, \"mPersistenceRateLimiter\", mockRateLimiter.getGuavaRateLimiter());\n\n    OutputStream outputStream = Mockito.mock(OutputStream.class);\n\n    // mock BufferUtils\n    PowerMockito.mockStatic(BufferUtils.class);\n\n    String dstPath = PathUtils.concatPath(ufsRoot, fileInfo.getPath());\n    Mockito.when(mUfs.create(dstPath)).thenReturn(outputStream);\n    Mockito.when(mUfs.create(Mockito.anyString(), Mockito.any(CreateOptions.class)))\n        .thenReturn(outputStream);\n\n    mManager.lockBlocks(fileId, blockIds);\n    mManager.persistFile(fileId, blockIds);\n\n    List<String> expectedEvents = Lists.newArrayList(\"R0.00\", \"R1.00\", \"R1.00\");\n    assertEquals(expectedEvents, mockRateLimiter.readEventsAndClear());\n\n    // Simulate waiting for 1 second.\n    mockRateLimiter.sleepMillis(1000);\n\n    mManager.lockBlocks(fileId, blockIds);\n    mManager.persistFile(fileId, blockIds);\n\n    // The first write will go through immediately without throttling.\n    expectedEvents = Lists.newArrayList(\"U1.00\", \"R0.00\", \"R1.00\", \"R1.00\");\n    assertEquals(expectedEvents, mockRateLimiter.readEventsAndClear());\n\n    // Repeat persistence without sleeping.\n    mockRateLimiter = new MockRateLimiter(\n        Configuration.getBytes(Constants.WORKER_FILE_PERSIST_RATE_LIMIT));\n    Whitebox.setInternalState(\n        mManager, \"mPersistenceRateLimiter\", mockRateLimiter.getGuavaRateLimiter());\n\n    mManager.lockBlocks(fileId, blockIds);\n    mManager.persistFile(fileId, blockIds);\n\n    expectedEvents = Lists.newArrayList(\"R0.00\", \"R1.00\", \"R1.00\");\n    assertEquals(expectedEvents, mockRateLimiter.readEventsAndClear());\n\n    mManager.lockBlocks(fileId, blockIds);\n    mManager.persistFile(fileId, blockIds);\n\n    expectedEvents = Lists.newArrayList(\"R1.00\", \"R1.00\", \"R1.00\");\n    assertEquals(expectedEvents, mockRateLimiter.readEventsAndClear());\n  }","commit_id":"34f312414f56fd0dfda4c501d0eeecb0ba19bc9d","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests the blocks are unlocked correctly when exception is encountered in\n   * {@link FileDataManager#lockBlocks(long, List)}.\n   */\n  @Test\n  public void lockBlocksErrorHandlingTest() throws Exception {\n    long fileId = 1;\n    List<Long> blockIds = Lists.newArrayList(1L, 2L, 3L);\n\n    // mock block data manager\n    BlockWorker blockWorker = Mockito.mock(BlockWorker.class);\n    FileInfo fileInfo = new FileInfo();\n    fileInfo.setPath(\"test\");\n    Mockito.when(blockWorker.lockBlock(Sessions.CHECKPOINT_SESSION_ID, 1L)).thenReturn(1L);\n    Mockito.when(blockWorker.lockBlock(Sessions.CHECKPOINT_SESSION_ID, 2L)).thenReturn(2L);\n    Mockito.when(blockWorker.lockBlock(Sessions.CHECKPOINT_SESSION_ID, 3L))\n        .thenThrow(new BlockDoesNotExistException(\"block 3 does not exist\"));\n    FileDataManager manager = new FileDataManager(blockWorker);\n    try {\n      manager.lockBlocks(fileId, blockIds);\n      Assert.fail(\"the lock should fail\");\n    } catch (IOException e) {\n      Assert.assertEquals(\n          \"failed to lock all blocks of file 1\\n\"\n              + \"alluxio.exception.BlockDoesNotExistException: block 3 does not exist\\n\",\n          e.getMessage());\n      // verify the locks are all unlocked\n      Mockito.verify(blockWorker).unlockBlock(1L);\n      Mockito.verify(blockWorker).unlockBlock(2L);\n    }\n  }","id":105841,"modified_method":"/**\n   * Tests the blocks are unlocked correctly when exception is encountered in\n   * {@link FileDataManager#lockBlocks(long, List)}.\n   */\n  @Test\n  public void lockBlocksErrorHandlingTest() throws Exception {\n    long fileId = 1;\n    List<Long> blockIds = Lists.newArrayList(1L, 2L, 3L);\n\n    Mockito.when(mBlockWorker.lockBlock(Sessions.CHECKPOINT_SESSION_ID, 1L)).thenReturn(1L);\n    Mockito.when(mBlockWorker.lockBlock(Sessions.CHECKPOINT_SESSION_ID, 2L)).thenReturn(2L);\n    Mockito.when(mBlockWorker.lockBlock(Sessions.CHECKPOINT_SESSION_ID, 3L))\n        .thenThrow(new BlockDoesNotExistException(\"block 3 does not exist\"));\n    try {\n      mManager.lockBlocks(fileId, blockIds);\n      Assert.fail(\"the lock should fail\");\n    } catch (IOException e) {\n      Assert.assertEquals(\n          \"failed to lock all blocks of file 1\\n\"\n              + \"alluxio.exception.BlockDoesNotExistException: block 3 does not exist\\n\",\n          e.getMessage());\n      // verify the locks are all unlocked\n      Mockito.verify(mBlockWorker).unlockBlock(1L);\n      Mockito.verify(mBlockWorker).unlockBlock(2L);\n    }\n  }","commit_id":"34f312414f56fd0dfda4c501d0eeecb0ba19bc9d","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Tests that persisted file are cleared in the manager.\n   */\n  @Test\n  @SuppressWarnings(\"unchecked\")\n  public void clearPersistedFilesTest() {\n    BlockWorker blockWorker = Mockito.mock(BlockWorker.class);\n    FileDataManager manager = new FileDataManager(blockWorker);\n    Set<Long> persistedFiles = Sets.newHashSet(1L, 2L);\n\n    Whitebox.setInternalState(manager, \"mPersistedFiles\", Sets.newHashSet(persistedFiles));\n    List<Long> poppedList = manager.getPersistedFiles();\n    Assert.assertEquals(persistedFiles, Sets.newHashSet(poppedList));\n\n    // verify persisted files cleared in the manager\n    poppedList.remove(2L);\n    manager.clearPersistedFiles(poppedList);\n    persistedFiles = (Set<Long>) Whitebox.getInternalState(manager, \"mPersistedFiles\");\n    Assert.assertEquals(Sets.newHashSet(2L), persistedFiles);\n  }","id":105842,"modified_method":"/**\n   * Tests that persisted file are cleared in the manager.\n   */\n  @Test\n  public void clearPersistedFilesTest() throws Exception {\n    writeFileWithBlocks(1L, ImmutableList.of(1L, 2L));\n    mManager.clearPersistedFiles(ImmutableList.of(1L));\n    Assert.assertEquals(Collections.emptyList(), mManager.getPersistedFiles());\n  }","commit_id":"34f312414f56fd0dfda4c501d0eeecb0ba19bc9d","url":"https://github.com/amplab/tachyon"},{"original_method":"public void removeRule(final String packageName,\r\n                           final String ruleName) {\r\n        synchronized ( this.pkgs ) {\r\n            final Package pkg = (Package) this.pkgs.get( packageName );\r\n            if ( pkg == null ) {\r\n                throw new IllegalArgumentException( \"Package name '\" + packageName + \"' does not exist for this Rule Base.\" );\r\n            }\r\n\r\n            final Rule rule = pkg.getRule( ruleName );\r\n            if ( rule == null ) {\r\n                throw new IllegalArgumentException( \"Rule name '\" + ruleName + \"' does not exist in the Package '\" + packageName + \"'.\" );\r\n            }\r\n\r\n            // only acquire the lock if it hasn't been done explicitely\r\n            boolean doUnlock = false;\r\n            if ( !this.lock.isHeldByCurrentThread() && (this.wms == null || this.wms.length == 0) ) {\r\n                lock();\r\n                doUnlock = true;\r\n            }\r\n            this.removalsSinceLock++;\r\n\r\n            removeRule( pkg,\r\n                        rule );\r\n            pkg.removeRule( rule );\r\n            if ( this.reloadPackageCompilationData == null ) {\r\n                this.reloadPackageCompilationData = new ReloadPackageCompilationData();\r\n            }\r\n            this.reloadPackageCompilationData.addDialectDatas( pkg.getDialectRuntimeRegistry() );\r\n\r\n            // only unlock if it had been acquired implicitely\r\n            if ( doUnlock ) {\r\n                unlock();\r\n            }\r\n        }\r\n    }","id":105843,"modified_method":"public void removeRule(final String packageName,\r\n                           final String ruleName) {\r\n        synchronized (this.pkgs) {\r\n            final Package pkg = this.pkgs.get(packageName);\r\n            if (pkg == null) {\r\n                throw new IllegalArgumentException(\"Package name '\" + packageName + \"' does not exist for this Rule Base.\");\r\n            }\r\n\r\n            final Rule rule = pkg.getRule(ruleName);\r\n            if (rule == null) {\r\n                throw new IllegalArgumentException(\"Rule name '\" + ruleName + \"' does not exist in the Package '\" + packageName + \"'.\");\r\n            }\r\n\r\n            // only acquire the lock if it hasn't been done explicitely\r\n            boolean doUnlock = false;\r\n            if (!this.lock.isHeldByCurrentThread() && (this.wms == null || this.wms.length == 0)) {\r\n                lock();\r\n                doUnlock = true;\r\n            }\r\n            this.removalsSinceLock++;\r\n\r\n            removeRule(pkg,\r\n                    rule);\r\n            pkg.removeRule(rule);\r\n            if (this.reloadPackageCompilationData == null) {\r\n                this.reloadPackageCompilationData = new ReloadPackageCompilationData();\r\n            }\r\n            this.reloadPackageCompilationData.addDialectDatas(pkg.getDialectRuntimeRegistry());\r\n\r\n            // only unlock if it had been acquired implicitely\r\n            if (doUnlock) {\r\n                unlock();\r\n            }\r\n        }\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public synchronized void disposeStatefulSession(final StatefulSession statefulSession) {\r\n        this.statefulSessions.remove( statefulSession );\r\n        for ( Iterator it = statefulSession.getRuleBaseUpdateListeners().iterator(); it.hasNext(); ) {\r\n            this.removeEventListener( (RuleBaseEventListener) it.next() );\r\n        }\r\n    }","id":105844,"modified_method":"public void disposeStatefulSession(final StatefulSession statefulSession) {\r\n        try {\r\n            statefuleSessionLock.lock();\r\n\r\n            this.statefulSessions.remove(statefulSession);\r\n            for (Object listener : statefulSession.getRuleBaseUpdateListeners()) {\r\n                this.removeEventListener((RuleBaseEventListener) listener);\r\n            }\r\n        } finally {\r\n            statefuleSessionLock.unlock();\r\n        }\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public Process getProcess(final String id) {\r\n        Process process = null;\r\n        synchronized ( this.pkgs ) {\r\n            process = (Process) this.processes.get( id );\r\n        }\r\n        return process;\r\n    }","id":105845,"modified_method":"public Process getProcess(final String id) {\r\n        Process process;\r\n        synchronized (this.pkgs) {\r\n            process = (Process) this.processes.get(id);\r\n        }\r\n        return process;\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public Package[] getPackages() {\r\n        return (Package[]) this.pkgs.values().toArray( new Package[this.pkgs.size()] );\r\n    }","id":105846,"modified_method":"public Package[] getPackages() {\r\n        return this.pkgs.values().toArray(new Package[this.pkgs.size()]);\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public StatefulSession[] getStatefulSessions() {\r\n        return (StatefulSession[]) this.statefulSessions.toArray( new StatefulSession[this.statefulSessions.size()] );\r\n    }","id":105847,"modified_method":"public StatefulSession[] getStatefulSessions() {\r\n        final StatefulSession[] copyOfSessions;\r\n        try {\r\n            statefuleSessionLock.lock();\r\n            copyOfSessions = new StatefulSession[this.statefulSessions.size()];\r\n\r\n            this.statefulSessions.toArray(copyOfSessions);\r\n        } finally {\r\n            statefuleSessionLock.unlock();\r\n        }\r\n\r\n        return copyOfSessions;\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void removeFunction(final String packageName,\r\n                               final String functionName) {\r\n        synchronized ( this.pkgs ) {\r\n            final Package pkg = (Package) this.pkgs.get( packageName );\r\n            if ( pkg == null ) {\r\n                throw new IllegalArgumentException( \"Package name '\" + packageName + \"' does not exist for this Rule Base.\" );\r\n            }\r\n\r\n            this.eventSupport.fireBeforeFunctionRemoved( pkg,\r\n                                                         functionName );\r\n\r\n            if ( !pkg.getFunctions().containsKey( functionName ) ) {\r\n                throw new IllegalArgumentException( \"function name '\" + packageName + \"' does not exist in the Package '\" + packageName + \"'.\" );\r\n            }\r\n\r\n            pkg.removeFunction( functionName );\r\n\r\n            if ( this.reloadPackageCompilationData == null ) {\r\n                this.reloadPackageCompilationData = new ReloadPackageCompilationData();\r\n            }\r\n            this.reloadPackageCompilationData.addDialectDatas( pkg.getDialectRuntimeRegistry() );\r\n\r\n            this.eventSupport.fireAfterFunctionRemoved( pkg,\r\n                                                        functionName );\r\n        }\r\n    }","id":105848,"modified_method":"public void removeFunction(final String packageName,\r\n                               final String functionName) {\r\n        synchronized (this.pkgs) {\r\n            final Package pkg = this.pkgs.get(packageName);\r\n            if (pkg == null) {\r\n                throw new IllegalArgumentException(\"Package name '\" + packageName + \"' does not exist for this Rule Base.\");\r\n            }\r\n\r\n            this.eventSupport.fireBeforeFunctionRemoved(pkg,\r\n                    functionName);\r\n\r\n            if (!pkg.getFunctions().containsKey(functionName)) {\r\n                throw new IllegalArgumentException(\"function name '\" + packageName + \"' does not exist in the Package '\" + packageName + \"'.\");\r\n            }\r\n\r\n            pkg.removeFunction(functionName);\r\n\r\n            if (this.reloadPackageCompilationData == null) {\r\n                this.reloadPackageCompilationData = new ReloadPackageCompilationData();\r\n            }\r\n            this.reloadPackageCompilationData.addDialectDatas(pkg.getDialectRuntimeRegistry());\r\n\r\n            this.eventSupport.fireAfterFunctionRemoved(pkg,\r\n                    functionName);\r\n        }\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public Package getPackage(final String name) {\r\n        return (Package) this.pkgs.get( name );\r\n    }","id":105849,"modified_method":"public Package getPackage(final String name) {\r\n        return this.pkgs.get(name);\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void removePackage(final String packageName) {\r\n        synchronized ( this.pkgs ) {\r\n            final Package pkg = (Package) this.pkgs.get( packageName );\r\n            if ( pkg == null ) {\r\n                throw new IllegalArgumentException( \"Package name '\" + packageName + \"' does not exist for this Rule Base.\" );\r\n            }\r\n\r\n            // only acquire the lock if it hasn't been done explicitely\r\n            boolean doUnlock = false;\r\n            if ( !this.lock.isHeldByCurrentThread() && (this.wms == null || this.wms.length == 0) ) {\r\n                lock();\r\n                doUnlock = true;\r\n            }\r\n            try {\r\n                this.removalsSinceLock++;\r\n\r\n                this.eventSupport.fireBeforePackageRemoved( pkg );\r\n\r\n                final Rule[] rules = pkg.getRules();\r\n\r\n                for ( int i = 0; i < rules.length; ++i ) {\r\n                    removeRule( pkg,\r\n                                rules[i] );\r\n                }\r\n\r\n                // getting the list of referenced globals\r\n                final Set referencedGlobals = new HashSet();\r\n                for ( final Iterator it = this.pkgs.values().iterator(); it.hasNext(); ) {\r\n                    final org.drools.rule.Package pkgref = (org.drools.rule.Package) it.next();\r\n                    if ( pkgref != pkg ) {\r\n                        referencedGlobals.addAll( pkgref.getGlobals().keySet() );\r\n                    }\r\n                }\r\n                // removing globals declared inside the package that are not shared\r\n                for ( final Iterator it = pkg.getGlobals().keySet().iterator(); it.hasNext(); ) {\r\n                    final String globalName = (String) it.next();\r\n                    if ( !referencedGlobals.contains( globalName ) ) {\r\n                        this.globals.remove( globalName );\r\n                    }\r\n                }\r\n                //and now the rule flows\r\n                final Map flows = pkg.getRuleFlows();\r\n                for ( final Iterator iter = flows.keySet().iterator(); iter.hasNext(); ) {\r\n                    removeProcess( (String) iter.next() );\r\n                }\r\n                // removing the package itself from the list\r\n                this.pkgs.remove( pkg.getName() );\r\n                \r\n                pkg.getDialectRuntimeRegistry().onRemove();\r\n\r\n                //clear all members of the pkg\r\n                pkg.clear();\r\n\r\n                this.eventSupport.fireAfterPackageRemoved( pkg );\r\n\r\n                // only unlock if it had been acquired implicitely\r\n            } finally {\r\n                if ( doUnlock ) {\r\n                    unlock();\r\n                }\r\n            }\r\n        }\r\n    }","id":105850,"modified_method":"public void removePackage(final String packageName) {\r\n        synchronized (this.pkgs) {\r\n            final Package pkg = this.pkgs.get(packageName);\r\n            if (pkg == null) {\r\n                throw new IllegalArgumentException(\"Package name '\" + packageName + \"' does not exist for this Rule Base.\");\r\n            }\r\n\r\n            // only acquire the lock if it hasn't been done explicitely\r\n            boolean doUnlock = false;\r\n            if (!this.lock.isHeldByCurrentThread() && (this.wms == null || this.wms.length == 0)) {\r\n                lock();\r\n                doUnlock = true;\r\n            }\r\n            try {\r\n                this.removalsSinceLock++;\r\n\r\n                this.eventSupport.fireBeforePackageRemoved(pkg);\r\n\r\n                final Rule[] rules = pkg.getRules();\r\n\r\n                for (int i = 0; i < rules.length; ++i) {\r\n                    removeRule(pkg,\r\n                            rules[i]);\r\n                }\r\n\r\n                // getting the list of referenced globals\r\n                final Set referencedGlobals = new HashSet();\r\n                for (final Iterator it = this.pkgs.values().iterator(); it.hasNext();) {\r\n                    final org.drools.rule.Package pkgref = (org.drools.rule.Package) it.next();\r\n                    if (pkgref != pkg) {\r\n                        referencedGlobals.addAll(pkgref.getGlobals().keySet());\r\n                    }\r\n                }\r\n                // removing globals declared inside the package that are not shared\r\n                for (final Iterator it = pkg.getGlobals().keySet().iterator(); it.hasNext();) {\r\n                    final String globalName = (String) it.next();\r\n                    if (!referencedGlobals.contains(globalName)) {\r\n                        this.globals.remove(globalName);\r\n                    }\r\n                }\r\n                //and now the rule flows\r\n                final Map flows = pkg.getRuleFlows();\r\n                for (final Iterator iter = flows.keySet().iterator(); iter.hasNext();) {\r\n                    removeProcess((String) iter.next());\r\n                }\r\n                // removing the package itself from the list\r\n                this.pkgs.remove(pkg.getName());\r\n\r\n                pkg.getDialectRuntimeRegistry().onRemove();\r\n\r\n                //clear all members of the pkg\r\n                pkg.clear();\r\n\r\n                this.eventSupport.fireAfterPackageRemoved(pkg);\r\n\r\n                // only unlock if it had been acquired implicitely\r\n            } finally {\r\n                if (doUnlock) {\r\n                    unlock();\r\n                }\r\n            }\r\n        }\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\r\n     * Add a <code>Package<\/code> to the network. Iterates through the\r\n     * <code>Package<\/code> adding Each individual <code>Rule<\/code> to the\r\n     * network. Before update network each referenced <code>WorkingMemory<\/code>\r\n     * is locked.\r\n     *\r\n     * @param newPkg\r\n     *            The package to add.\r\n     */    \r\n    public void addPackages(final Collection<Package> newPkgs) {\r\n        synchronized ( this.pkgs ) {\r\n            boolean doUnlock = false;\r\n            // only acquire the lock if it hasn't been done explicitely\r\n            if ( !this.lock.isHeldByCurrentThread() && (this.wms == null || this.wms.length == 0) ) {\r\n                lock();\r\n                doUnlock = true;\r\n            }            \r\n            try {                \r\n                // we need to merge all byte[] first, so that the root classloader can resolve classes\r\n                for ( Package newPkg : newPkgs ) {\r\n                    newPkg.checkValidity();                           \r\n                    this.additionsSinceLock++;\r\n                    this.eventSupport.fireBeforePackageAdded( newPkg );\r\n                    \r\n                    Package pkg = this.pkgs.get( newPkg.getName() );                \r\n                    if ( pkg == null ) {\r\n                        pkg = new Package( newPkg.getName() );\r\n                        \r\n                        // @TODO we really should have a single root cache\r\n                        pkg.setClassFieldAccessorCache( this.classFieldAccessorCache );\r\n                        pkgs.put( pkg.getName(),\r\n                                  pkg );\r\n                    }       \r\n                    \r\n                    // first merge anything related to classloader re-wiring\r\n                    pkg.getDialectRuntimeRegistry().merge( newPkg.getDialectRuntimeRegistry(), this.rootClassLoader );                \r\n                }\r\n\r\n                // now iterate again, this time onBeforeExecute will handle any wiring or cloader re-creating that needs to be done as part of the merge\r\n                for ( Package newPkg : newPkgs ) {\r\n                    Package pkg = this.pkgs.get( newPkg.getName() );              \r\n                    pkg.getDialectRuntimeRegistry().onBeforeExecute();\r\n                    // with the classloader recreated for all byte[] classes, we should now merge and wire any new accessors\r\n                    pkg.getClassFieldAccessorStore().merge( newPkg.getClassFieldAccessorStore() );\r\n                }\r\n                \r\n                for ( Package newPkg : newPkgs ) {\r\n                    Package pkg = this.pkgs.get( newPkg.getName() );  \r\n                    \r\n                    if ( newPkg.getFunctions() != null ) {\r\n                        for ( Map.Entry<String, Function> entry : newPkg.getFunctions().entrySet() ) {\r\n                            pkg.addFunction( entry.getValue() );\r\n                        }\r\n                    }            \r\n                    \r\n                    // we have to do this before the merging, as it does some classloader resolving\r\n                    TypeDeclaration lastType = null;\r\n                    try {\r\n                        // Add the type declarations to the RuleBase\r\n                        if ( newPkg.getTypeDeclarations() != null ) {\r\n                            // add type declarations\r\n                            for ( TypeDeclaration type : newPkg.getTypeDeclarations().values() ) {\r\n                                lastType = type;\r\n                                type.setTypeClass( this.rootClassLoader.loadClass( type.getTypeClassName() ) );\r\n                                // @TODO should we allow overrides? only if the class is not in use.\r\n                                if ( !this.classTypeDeclaration.containsKey( type.getTypeClass() ) ) {\r\n                                    // add to rulebase list of type declarations                        \r\n                                    this.classTypeDeclaration.put( type.getTypeClass(),\r\n                                                                   type );\r\n                                }\r\n                            }\r\n                        }\r\n                    } catch ( ClassNotFoundException e ) {\r\n                        throw new RuntimeDroolsException( \"unable to resolve Type Declaration class '\" + lastType.getTypeName()+\"'\" );            \r\n                    }            \r\n    \r\n                    // now merge the new package into the existing one\r\n                    mergePackage( pkg,\r\n                                  newPkg );\r\n    \r\n                    // add the rules to the RuleBase\r\n                    final Rule[] rules = newPkg.getRules();\r\n                    for ( int i = 0; i < rules.length; ++i ) {\r\n                        addRule( newPkg,\r\n                                 rules[i] );\r\n                    }\r\n    \r\n                    // add the flows to the RuleBase\r\n                    if ( newPkg.getRuleFlows() != null ) {\r\n                        final Map flows = newPkg.getRuleFlows();\r\n                        for ( final Object object : newPkg.getRuleFlows().entrySet() ) {\r\n                            final Entry flow = (Entry) object;\r\n                            this.processes.put( flow.getKey(),\r\n                                                flow.getValue() );\r\n                        }\r\n                    }\r\n    \r\n                    this.eventSupport.fireAfterPackageAdded( newPkg );\r\n                }                \r\n            } finally {\r\n                // only unlock if it had been acquired implicitely\r\n                if ( doUnlock ) {\r\n                    unlock();\r\n                }\r\n            }\r\n        }\r\n        \r\n    }","id":105851,"modified_method":"/**\r\n     * Add a <code>Package<\/code> to the network. Iterates through the\r\n     * <code>Package<\/code> adding Each individual <code>Rule<\/code> to the\r\n     * network. Before update network each referenced <code>WorkingMemory<\/code>\r\n     * is locked.\r\n     *\r\n     * @param newPkg The package to add.\r\n     */\r\n    public void addPackages(final Collection<Package> newPkgs) {\r\n        synchronized (this.pkgs) {\r\n            boolean doUnlock = false;\r\n            // only acquire the lock if it hasn't been done explicitely\r\n            if (!this.lock.isHeldByCurrentThread() && (this.wms == null || this.wms.length == 0)) {\r\n                lock();\r\n                doUnlock = true;\r\n            }\r\n            try {\r\n                // we need to merge all byte[] first, so that the root classloader can resolve classes\r\n                for (Package newPkg : newPkgs) {\r\n                    newPkg.checkValidity();\r\n                    this.additionsSinceLock++;\r\n                    this.eventSupport.fireBeforePackageAdded(newPkg);\r\n\r\n                    Package pkg = this.pkgs.get(newPkg.getName());\r\n                    if (pkg == null) {\r\n                        pkg = new Package(newPkg.getName());\r\n\r\n                        // @TODO we really should have a single root cache\r\n                        pkg.setClassFieldAccessorCache(this.classFieldAccessorCache);\r\n                        pkgs.put(pkg.getName(),\r\n                                pkg);\r\n                    }\r\n\r\n                    // first merge anything related to classloader re-wiring\r\n                    pkg.getDialectRuntimeRegistry().merge(newPkg.getDialectRuntimeRegistry(), this.rootClassLoader);\r\n                }\r\n\r\n                // now iterate again, this time onBeforeExecute will handle any wiring or cloader re-creating that needs to be done as part of the merge\r\n                for (Package newPkg : newPkgs) {\r\n                    Package pkg = this.pkgs.get(newPkg.getName());\r\n                    pkg.getDialectRuntimeRegistry().onBeforeExecute();\r\n                    // with the classloader recreated for all byte[] classes, we should now merge and wire any new accessors\r\n                    pkg.getClassFieldAccessorStore().merge(newPkg.getClassFieldAccessorStore());\r\n                }\r\n\r\n                for (Package newPkg : newPkgs) {\r\n                    Package pkg = this.pkgs.get(newPkg.getName());\r\n\r\n                    if (newPkg.getFunctions() != null) {\r\n                        for (Map.Entry<String, Function> entry : newPkg.getFunctions().entrySet()) {\r\n                            pkg.addFunction(entry.getValue());\r\n                        }\r\n                    }\r\n\r\n                    // we have to do this before the merging, as it does some classloader resolving\r\n                    TypeDeclaration lastType = null;\r\n                    try {\r\n                        // Add the type declarations to the RuleBase\r\n                        if (newPkg.getTypeDeclarations() != null) {\r\n                            // add type declarations\r\n                            for (TypeDeclaration type : newPkg.getTypeDeclarations().values()) {\r\n                                lastType = type;\r\n                                type.setTypeClass(this.rootClassLoader.loadClass(type.getTypeClassName()));\r\n                                // @TODO should we allow overrides? only if the class is not in use.\r\n                                if (!this.classTypeDeclaration.containsKey(type.getTypeClass())) {\r\n                                    // add to rulebase list of type declarations                        \r\n                                    this.classTypeDeclaration.put(type.getTypeClass(),\r\n                                            type);\r\n                                }\r\n                            }\r\n                        }\r\n                    } catch (ClassNotFoundException e) {\r\n                        throw new RuntimeDroolsException(\"unable to resolve Type Declaration class '\" + lastType.getTypeName() + \"'\");\r\n                    }\r\n\r\n                    // now merge the new package into the existing one\r\n                    mergePackage(pkg,\r\n                            newPkg);\r\n\r\n                    // add the rules to the RuleBase\r\n                    final Rule[] rules = newPkg.getRules();\r\n                    for (int i = 0; i < rules.length; ++i) {\r\n                        addRule(newPkg,\r\n                                rules[i]);\r\n                    }\r\n\r\n                    // add the flows to the RuleBase\r\n                    if (newPkg.getRuleFlows() != null) {\r\n                        final Map flows = newPkg.getRuleFlows();\r\n                        for (final Object object : flows.entrySet()) {\r\n                            final Entry flow = (Entry) object;\r\n                            this.processes.put(flow.getKey(),\r\n                                    flow.getValue());\r\n                        }\r\n                    }\r\n\r\n                    this.eventSupport.fireAfterPackageAdded(newPkg);\r\n                }\r\n            } finally {\r\n                // only unlock if it had been acquired implicitely\r\n                if (doUnlock) {\r\n                    unlock();\r\n                }\r\n            }\r\n        }\r\n\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public InternalWorkingMemory[] getWorkingMemories() {\r\n        return (InternalWorkingMemory[]) this.statefulSessions.toArray( new InternalWorkingMemory[this.statefulSessions.size()] );\r\n    }","id":105852,"modified_method":"public InternalWorkingMemory[] getWorkingMemories() {\r\n        final InternalWorkingMemory[] copyOfMemories;\r\n        try {\r\n            statefuleSessionLock.lock();\r\n            copyOfMemories = new InternalWorkingMemory[this.statefulSessions.size()];\r\n\r\n            this.statefulSessions.toArray(copyOfMemories);\r\n        } finally {\r\n            statefuleSessionLock.unlock();\r\n        }\r\n\r\n        return copyOfMemories;\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\r\n     * Handles the read serialization of the Package. Patterns in Rules may reference generated data which cannot be serialized by default methods.\r\n     * The Package uses PackageCompilationData to hold a reference to the generated bytecode; which must be restored before any Rules.\r\n     * A custom ObjectInputStream, able to resolve classes against the bytecode in the PackageCompilationData, is used to restore the Rules.\r\n     *\r\n     */\r\n    public void readExternal(final ObjectInput in) throws IOException,\r\n                                                  ClassNotFoundException {\r\n        // PackageCompilationData must be restored before Rules as it has the ClassLoader needed to resolve the generated code references in Rules\r\n        DroolsObjectInput droolsStream = null;\r\n        boolean isDrools = in instanceof DroolsObjectInput;\r\n\r\n        if ( isDrools ) {\r\n            droolsStream = (DroolsObjectInput) in;\r\n        } else {\r\n            droolsStream = new DroolsObjectInputStream( (ObjectInputStream) in );\r\n\r\n        }\r\n\r\n        this.rootClassLoader = new CompositeClassLoader( droolsStream.getParentClassLoader() );\r\n        droolsStream.setClassLoader( this.rootClassLoader  );\r\n        droolsStream.setRuleBase( this );\r\n        \r\n        this.classFieldAccessorCache = new ClassFieldAccessorCache( this.rootClassLoader );\r\n        \r\n        this.config = (RuleBaseConfiguration) droolsStream.readObject();\r\n        this.config.setClassLoader( droolsStream.getParentClassLoader() );\r\n        \r\n        this.pkgs = (Map<String, Package>) droolsStream.readObject();\r\n\r\n\r\n        for ( final Object object : this.pkgs.values() ) {\r\n            ((Package) object).getDialectRuntimeRegistry().onAdd( this.rootClassLoader );\r\n        }\r\n        \r\n        // PackageCompilationData must be restored before Rules as it has the ClassLoader needed to resolve the generated code references in Rules\r\n        this.id = (String) droolsStream.readObject();\r\n        this.workingMemoryCounter = droolsStream.readInt();\r\n\r\n        this.processes = (Map) droolsStream.readObject();\r\n        this.agendaGroupRuleTotals = (Map) droolsStream.readObject();\r\n        Class cls = null;\r\n        try {\r\n            cls = droolsStream.getParentClassLoader().loadClass( droolsStream.readUTF() );\r\n            this.factHandleFactory = (FactHandleFactory) cls.newInstance();\r\n        } catch ( InstantiationException e ) {\r\n            DroolsObjectInputStream.newInvalidClassException( cls,\r\n                                                              e );\r\n        } catch ( IllegalAccessException e ) {\r\n            DroolsObjectInputStream.newInvalidClassException( cls,\r\n                                                              e );\r\n        }                       \r\n        \r\n        for ( final Object object : this.pkgs.values() ) {\r\n            ((Package) object).getDialectRuntimeRegistry().onBeforeExecute( );\r\n            ((Package) object).getClassFieldAccessorStore().setClassFieldAccessorCache( this.classFieldAccessorCache );\r\n            ((Package) object).getClassFieldAccessorStore().wire();\r\n        }\r\n        \r\n        this.populateTypeDeclarationMaps(); \r\n        \r\n        // read globals\r\n        Map<String, String> globs = (Map<String, String>) droolsStream.readObject();\r\n        populateGlobalsMap( globs );\r\n        \r\n        this.partitionIDs = (List<RuleBasePartitionId>) droolsStream.readObject();\r\n        \r\n        this.eventSupport = (RuleBaseEventSupport) droolsStream.readObject();\r\n        this.eventSupport.setRuleBase( this );\r\n        this.statefulSessions = new ObjectHashSet();\r\n\r\n        if ( !isDrools ) {\r\n            droolsStream.close();\r\n        }                      \r\n    }","id":105853,"modified_method":"/**\r\n     * Handles the read serialization of the Package. Patterns in Rules may reference generated data which cannot be serialized by default methods.\r\n     * The Package uses PackageCompilationData to hold a reference to the generated bytecode; which must be restored before any Rules.\r\n     * A custom ObjectInputStream, able to resolve classes against the bytecode in the PackageCompilationData, is used to restore the Rules.\r\n     */\r\n    public void readExternal(final ObjectInput in) throws IOException,\r\n            ClassNotFoundException {\r\n        // PackageCompilationData must be restored before Rules as it has the ClassLoader needed to resolve the generated code references in Rules\r\n        DroolsObjectInput droolsStream;\r\n        boolean isDrools = in instanceof DroolsObjectInput;\r\n\r\n        if (isDrools) {\r\n            droolsStream = (DroolsObjectInput) in;\r\n        } else {\r\n            droolsStream = new DroolsObjectInputStream((ObjectInputStream) in);\r\n\r\n        }\r\n\r\n        this.rootClassLoader = new CompositeClassLoader(droolsStream.getParentClassLoader());\r\n        droolsStream.setClassLoader(this.rootClassLoader);\r\n        droolsStream.setRuleBase(this);\r\n\r\n        this.classFieldAccessorCache = new ClassFieldAccessorCache(this.rootClassLoader);\r\n\r\n        this.config = (RuleBaseConfiguration) droolsStream.readObject();\r\n        this.config.setClassLoader(droolsStream.getParentClassLoader());\r\n\r\n        this.pkgs = (Map<String, Package>) droolsStream.readObject();\r\n\r\n\r\n        for (final Object object : this.pkgs.values()) {\r\n            ((Package) object).getDialectRuntimeRegistry().onAdd(this.rootClassLoader);\r\n        }\r\n\r\n        // PackageCompilationData must be restored before Rules as it has the ClassLoader needed to resolve the generated code references in Rules\r\n        this.id = (String) droolsStream.readObject();\r\n        this.workingMemoryCounter = droolsStream.readInt();\r\n\r\n        this.processes = (Map) droolsStream.readObject();\r\n        this.agendaGroupRuleTotals = (Map) droolsStream.readObject();\r\n        Class cls = null;\r\n        try {\r\n            cls = droolsStream.getParentClassLoader().loadClass(droolsStream.readUTF());\r\n            this.factHandleFactory = (FactHandleFactory) cls.newInstance();\r\n        } catch (InstantiationException e) {\r\n            DroolsObjectInputStream.newInvalidClassException(cls,\r\n                    e);\r\n        } catch (IllegalAccessException e) {\r\n            DroolsObjectInputStream.newInvalidClassException(cls,\r\n                    e);\r\n        }\r\n\r\n        for (final Object object : this.pkgs.values()) {\r\n            ((Package) object).getDialectRuntimeRegistry().onBeforeExecute();\r\n            ((Package) object).getClassFieldAccessorStore().setClassFieldAccessorCache(this.classFieldAccessorCache);\r\n            ((Package) object).getClassFieldAccessorStore().wire();\r\n        }\r\n\r\n        this.populateTypeDeclarationMaps();\r\n\r\n        // read globals\r\n        Map<String, String> globs = (Map<String, String>) droolsStream.readObject();\r\n        populateGlobalsMap(globs);\r\n\r\n        this.partitionIDs = (List<RuleBasePartitionId>) droolsStream.readObject();\r\n\r\n        this.eventSupport = (RuleBaseEventSupport) droolsStream.readObject();\r\n        this.eventSupport.setRuleBase(this);\r\n        this.statefulSessions = new ObjectHashSet();\r\n\r\n        if (!isDrools) {\r\n            droolsStream.close();\r\n        }\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public RuleBasePartitionId createNewPartitionId() {\r\n        RuleBasePartitionId p = null;\r\n        synchronized ( this.partitionIDs ) {\r\n            p = new RuleBasePartitionId(\"P-\" + this.partitionIDs.size());\r\n            this.partitionIDs.add( p );\r\n        }\r\n        return p;\r\n    }","id":105854,"modified_method":"public RuleBasePartitionId createNewPartitionId() {\r\n        RuleBasePartitionId p;\r\n        synchronized (this.partitionIDs) {\r\n            p = new RuleBasePartitionId(\"P-\" + this.partitionIDs.size());\r\n            this.partitionIDs.add(p);\r\n        }\r\n        return p;\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void addStatefulSession(final StatefulSession statefulSession) {\r\n        synchronized ( this.statefulSessions ) {\r\n            this.statefulSessions.add( statefulSession );\r\n        }\r\n    }","id":105855,"modified_method":"public void addStatefulSession(final StatefulSession statefulSession) {\r\n        try {\r\n            statefuleSessionLock.lock();\r\n\r\n            this.statefulSessions.add(statefulSession);\r\n        } finally {\r\n            statefuleSessionLock.unlock();\r\n        }\r\n\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public int getNextId() {\r\n            Integer id = this.recycledIds.poll();\r\n            if ( id == null ) {\r\n                return this.nextId++;\r\n            }\r\n            return id.intValue();\r\n        }","id":105856,"modified_method":"public int getNextId() {\r\n            Integer id = this.recycledIds.poll();\r\n            if ( id == null ) {\r\n                return this.nextId++;\r\n            }\r\n            return id;\r\n        }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void order() {\r\n        if ( ordered ) {\r\n            // we should only do this on first call, its expected the RuleBase should not change afterwards.\r\n            return;\r\n        }\r\n        Map map = new HashMap();\r\n\r\n        for ( Iterator it = this.rules.values().iterator(); it.hasNext(); ) {\r\n            BaseNode[] nodes = (BaseNode[]) it.next();\r\n            for ( int i = 0; i < nodes.length; i++ ) {\r\n                if ( nodes[i] instanceof RuleTerminalNode ) {\r\n                    RuleTerminalNode node = (RuleTerminalNode) nodes[i];\r\n                    String agendaGroup = node.getRule().getAgendaGroup();\r\n                    if ( agendaGroup == null || agendaGroup.equals( \"\" ) ) {\r\n                        agendaGroup = \"MAIN\";\r\n                    }\r\n                    List rules = (List) map.get( agendaGroup );\r\n                    if ( rules == null ) {\r\n                        rules = new ArrayList();\r\n                        map.put( agendaGroup,\r\n                                 rules );\r\n                    }\r\n                    rules.add( node );\r\n                }\r\n            }\r\n        }\r\n\r\n        for ( Iterator it = map.entrySet().iterator(); it.hasNext(); ) {\r\n            Entry entry = (Entry) it.next();\r\n            String agendaGroup = (String) entry.getKey();\r\n            List rules = (List) entry.getValue();\r\n            Collections.sort( rules,\r\n                              RuleSequenceComparator.INSTANCE );\r\n\r\n            int i = 0;\r\n            for ( Iterator listIter = rules.iterator(); listIter.hasNext(); ) {\r\n                RuleTerminalNode node = (RuleTerminalNode) listIter.next();\r\n                node.setSequence( i++ );\r\n            }\r\n\r\n            ruleBase.getAgendaGroupRuleTotals().put( agendaGroup,\r\n                                                     new Integer( i ) );\r\n        }\r\n        ordered = true;\r\n    }","id":105857,"modified_method":"public void order() {\r\n        if ( ordered ) {\r\n            // we should only do this on first call, its expected the RuleBase should not change afterwards.\r\n            return;\r\n        }\r\n        Map map = new HashMap();\r\n\r\n        for ( Iterator it = this.rules.values().iterator(); it.hasNext(); ) {\r\n            BaseNode[] nodes = (BaseNode[]) it.next();\r\n            for ( int i = 0; i < nodes.length; i++ ) {\r\n                if ( nodes[i] instanceof RuleTerminalNode ) {\r\n                    RuleTerminalNode node = (RuleTerminalNode) nodes[i];\r\n                    String agendaGroup = node.getRule().getAgendaGroup();\r\n                    if ( agendaGroup == null || agendaGroup.equals( \"\" ) ) {\r\n                        agendaGroup = \"MAIN\";\r\n                    }\r\n                    List rules = (List) map.get( agendaGroup );\r\n                    if ( rules == null ) {\r\n                        rules = new ArrayList();\r\n                        map.put( agendaGroup,\r\n                                 rules );\r\n                    }\r\n                    rules.add( node );\r\n                }\r\n            }\r\n        }\r\n\r\n        for ( Iterator it = map.entrySet().iterator(); it.hasNext(); ) {\r\n            Entry entry = (Entry) it.next();\r\n            String agendaGroup = (String) entry.getKey();\r\n            List rules = (List) entry.getValue();\r\n            Collections.sort( rules,\r\n                              RuleSequenceComparator.INSTANCE );\r\n\r\n            int i = 0;\r\n            for ( Iterator listIter = rules.iterator(); listIter.hasNext(); ) {\r\n                RuleTerminalNode node = (RuleTerminalNode) listIter.next();\r\n                node.setSequence( i++ );\r\n            }\r\n\r\n            ruleBase.getAgendaGroupRuleTotals().put( agendaGroup,\r\n                    i );\r\n        }\r\n        ordered = true;\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public BaseNode[] getTerminalNodes(final Rule rule) {\r\n        return (BaseNode[]) this.rules.get( rule );\r\n    }","id":105858,"modified_method":"public BaseNode[] getTerminalNodes(final Rule rule) {\r\n        return this.rules.get( rule );\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void releaseId(int id) {\r\n            this.recycledIds.add( new Integer( id ) );\r\n        }","id":105859,"modified_method":"public void releaseId(int id) {\r\n            this.recycledIds.add(id );\r\n        }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public StatelessSession newStatelessSession() {\r\n\r\n        //orders the rules\r\n        if ( this.config.isSequential() ) {\r\n            this.reteooBuilder.order();\r\n        }\r\n\r\n        synchronized ( this.pkgs ) {\r\n            return new ReteooStatelessSession( this );\r\n        }\r\n    }","id":105860,"modified_method":"public StatelessSession newStatelessSession() {\r\n\r\n        //orders the rules\r\n        if ( this.getConfig().isSequential() ) {\r\n            this.reteooBuilder.order();\r\n        }\r\n\r\n        synchronized ( this.pkgs ) {\r\n            return new ReteooStatelessSession( this );\r\n        }\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void addPackages(Collection<Package> pkgs) {\r\n        super.addPackages( pkgs );\r\n        if ( this.config.isSequential() ) {\r\n            this.reteooBuilder.setOrdered( false );\r\n        }        \r\n    }","id":105861,"modified_method":"public void addPackages(Collection<Package> pkgs) {\r\n        super.addPackages( pkgs );\r\n        if ( this.getConfig().isSequential() ) {\r\n            this.reteooBuilder.setOrdered( false );\r\n        }        \r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public StatefulSession newStatefulSession(int id,\r\n                                              final SessionConfiguration sessionConfig,\r\n                                              final Environment environment) {\r\n        if ( this.config.isSequential() ) {\r\n            throw new RuntimeException( \"Cannot have a stateful rule session, with sequential configuration set to true\" );\r\n        }\r\n        ReteooStatefulSession session = null;\r\n\r\n        synchronized ( this.pkgs ) {\r\n            ExecutorService executor = ExecutorServiceFactory.createExecutorService( this.config.getExecutorService() );;\r\n            session = new ReteooStatefulSession( id,\r\n                                                 this,\r\n                                                 executor,\r\n                                                 sessionConfig,\r\n                                                 environment );\r\n\r\n            executor.setCommandExecutor( new CommandExecutor( session ) );\r\n\r\n            if ( sessionConfig.isKeepReference() ) {\r\n                super.addStatefulSession( session );\r\n                for ( Iterator it = session.getRuleBaseUpdateListeners().iterator(); it.hasNext(); ) {\r\n                    addEventListener( (RuleBaseEventListener) it.next() );\r\n                }\r\n            }\r\n\r\n            session.startPartitionManagers();\r\n\r\n            session.queueWorkingMemoryAction( new WorkingMemoryReteAssertAction( session.getInitialFactHandle(),\r\n                                                                                 false,\r\n                                                                                 true,\r\n                                                                                 null,\r\n                                                                                 null ) );\r\n        }\r\n\r\n        return session;\r\n    }","id":105862,"modified_method":"StatefulSession newStatefulSession(int id,\r\n                                              final SessionConfiguration sessionConfig,\r\n                                              final Environment environment) {\r\n        if ( this.getConfig().isSequential() ) {\r\n            throw new RuntimeException( \"Cannot have a stateful rule session, with sequential configuration set to true\" );\r\n        }\r\n        ReteooStatefulSession session  ;\r\n\r\n        synchronized ( this.pkgs ) {\r\n            ExecutorService executor = ExecutorServiceFactory.createExecutorService( this.getConfig().getExecutorService() );\r\n            session = new ReteooStatefulSession( id,\r\n                                                 this,\r\n                                                 executor,\r\n                                                 sessionConfig,\r\n                                                 environment );\r\n\r\n            executor.setCommandExecutor( new CommandExecutor( session ) );\r\n\r\n            if ( sessionConfig.isKeepReference() ) {\r\n                super.addStatefulSession( session );\r\n                for (Object listener : session.getRuleBaseUpdateListeners()) {\r\n                    addEventListener((RuleBaseEventListener) listener);\r\n                }\r\n            }\r\n\r\n            session.startPartitionManagers();\r\n\r\n            session.queueWorkingMemoryAction( new WorkingMemoryReteAssertAction( session.getInitialFactHandle(),\r\n                                                                                 false,\r\n                                                                                 true,\r\n                                                                                 null,\r\n                                                                                 null ) );\r\n        }\r\n\r\n        return session;\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void addPackage(final Package newPkg) {\r\n        List<Package> list = new ArrayList<Package>();\r\n        list.add( newPkg );\r\n        super.addPackages( list );\r\n        if ( this.config.isSequential() ) {\r\n            this.reteooBuilder.setOrdered( false );\r\n        }\r\n    }","id":105863,"modified_method":"public void addPackage(final Package newPkg) {\r\n        List<Package> list = new ArrayList<Package>();\r\n        list.add( newPkg );\r\n        super.addPackages( list );\r\n        if ( this.getConfig().isSequential() ) {\r\n            this.reteooBuilder.setOrdered( false );\r\n        }\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"private void setupRete() {\r\n        this.rete = new Rete( this );\r\n        this.reteooBuilder = new ReteooBuilder( this );\r\n\r\n        // always add the default entry point\r\n        EntryPointNode epn = new EntryPointNode( this.reteooBuilder.getIdGenerator().getNextId(),\r\n                                                 RuleBasePartitionId.MAIN_PARTITION,\r\n                                                 this.config.isMultithreadEvaluation(),\r\n                                                 this.rete,\r\n                                                 EntryPoint.DEFAULT );\r\n        epn.attach();\r\n    }","id":105864,"modified_method":"private void setupRete() {\r\n        this.rete = new Rete( this );\r\n        this.reteooBuilder = new ReteooBuilder( this );\r\n\r\n        // always add the default entry point\r\n        EntryPointNode epn = new EntryPointNode( this.reteooBuilder.getIdGenerator().getNextId(),\r\n                                                 RuleBasePartitionId.MAIN_PARTITION,\r\n                                                 this.getConfig().isMultithreadEvaluation(),\r\n                                                 this.rete,\r\n                                                 EntryPoint.DEFAULT );\r\n        epn.attach();\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public StatefulSession newStatefulSession(java.io.InputStream stream,\r\n                                              boolean keepReference) {\r\n        StatefulSession session = null;\r\n        try {\r\n            synchronized ( this.pkgs ) {\r\n                // first unwrap the byte[]\r\n                ObjectInputStream ois = new ObjectInputStream( stream );\r\n    \r\n                // standard serialisation would have written the statateful session instance info to the stream first\r\n                // so we read it, but we don't need it, so just ignore.\r\n                ReteooStatefulSession rsession = (ReteooStatefulSession) ois.readObject();\r\n    \r\n                // now unmarshall that byte[]\r\n                ByteArrayInputStream bais = new ByteArrayInputStream( rsession.bytes );\r\n                Marshaller marshaller = MarshallerFactory.newMarshaller( new KnowledgeBaseImpl( this ) );\r\n                StatefulKnowledgeSession ksession = marshaller.unmarshall( bais,\r\n                                                                           new SessionConfiguration(),\r\n                                                                           EnvironmentFactory.newEnvironment() );\r\n                session = (StatefulSession) ((StatefulKnowledgeSessionImpl) ksession).session;\r\n    \r\n                if ( keepReference ) {\r\n                    super.addStatefulSession( session );\r\n                    for ( Iterator it = session.getRuleBaseUpdateListeners().iterator(); it.hasNext(); ) {\r\n                        addEventListener( (RuleBaseEventListener) it.next() );\r\n                    }\r\n                }\r\n    \r\n                bais.close();\r\n            }\r\n\r\n        } catch ( Exception e ) {\r\n            throw new RuntimeException( \"Unable to unmarshall session\",\r\n                                        e );\r\n        } finally {\r\n            try {\r\n                stream.close();\r\n            } catch ( IOException e ) {\r\n                new RuntimeException( \"Unable to close stream\",\r\n                                      e );\r\n            }\r\n        }\r\n        return session;\r\n    }","id":105865,"modified_method":"public StatefulSession newStatefulSession(java.io.InputStream stream,\r\n                                              boolean keepReference) {\r\n        StatefulSession session = null;\r\n        try {\r\n            synchronized ( this.pkgs ) {\r\n                // first unwrap the byte[]\r\n                ObjectInputStream ois = new ObjectInputStream( stream );\r\n    \r\n                // standard serialisation would have written the statateful session instance info to the stream first\r\n                // so we read it, but we don't need it, so just ignore.\r\n                ReteooStatefulSession rsession = (ReteooStatefulSession) ois.readObject();\r\n    \r\n                // now unmarshall that byte[]\r\n                ByteArrayInputStream bais = new ByteArrayInputStream( rsession.bytes );\r\n                Marshaller marshaller = MarshallerFactory.newMarshaller( new KnowledgeBaseImpl( this ) );\r\n                StatefulKnowledgeSession ksession = marshaller.unmarshall( bais,\r\n                                                                           new SessionConfiguration(),\r\n                                                                           EnvironmentFactory.newEnvironment() );\r\n                session = (StatefulSession) ((StatefulKnowledgeSessionImpl) ksession).session;\r\n    \r\n                if ( keepReference ) {\r\n                    super.addStatefulSession( session );\r\n                    for (Object listener : session.getRuleBaseUpdateListeners()) {\r\n                        addEventListener((RuleBaseEventListener) listener);\r\n                    }\r\n                }\r\n    \r\n                bais.close();\r\n            }\r\n\r\n        } catch ( Exception e ) {\r\n            throw new RuntimeException( \"Unable to unmarshall session\",\r\n                                        e );\r\n        } finally {\r\n            try {\r\n                stream.close();\r\n            } catch ( IOException e ) {\r\n                throw new RuntimeException( \"Unable to close stream\", e );\r\n            }\r\n        }\r\n        return session;\r\n    }","commit_id":"7efe14464c8387342d8585a709a62beaa1194747","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * Load user/group entry in the cache as needed, load related group entries and return the list of all groups\n     * associated with the given user/group in both the user wiki and the given entity wiki. Groups containing\n     * (recursively) groups containing the user/group are also listed.\n     *\n     * @param user The user/group to load.\n     * @param userWiki The user wiki. Should correspond to the wiki of the user/group provided above.\n     * @param entityWiki Only for global user, the wiki of the entity currently evaluated if it differ from the user\n     * wiki, null otherwise. Local group information of the entity wiki will be evaluated for the user/group to load\n     * and a shadow user will be made available in that wiki to support access entries.\n     * @return A collection of groups associated to the requested user/group (both user wiki and entity wiki)\n     * @throws ParentEntryEvictedException if any of the parent entries of the group were evicted.\n     * @throws ConflictingInsertionException When different threads have inserted conflicting entries into the cache.\n     * @throws org.xwiki.security.authorization.AuthorizationException on error.\n     */\n    private Collection<GroupSecurityReference> loadUserEntry(UserSecurityReference user, SecurityReference userWiki,\n        SecurityReference entityWiki)\n        throws ParentEntryEvictedException, ConflictingInsertionException, AuthorizationException\n    {\n        // First, we try to get the groups of the user from the cache\n        Collection<GroupSecurityReference> groups = securityCache.getGroupsFor(user, entityWiki); \n        if (groups != null) {\n            // Since we have then in the cache, it means that the entry is already loaded\n            return groups;\n        }\n        \n        // Otherwise we have to load the entry\n        groups = new HashSet<GroupSecurityReference>();\n\n        // Public access could not appear in any group, no need to load it carefully, just optimized here\n        if (user.getOriginalReference() == null) {\n            if (securityCache.get(user) == null) {\n                // Main wiki entry should be loaded\n                getRules(user);\n            }\n            if (entityWiki != null) {\n                // Ensure there is a Public shadow in the subwiki of the checked entity\n                securityCache.add(new DefaultSecurityShadowEntry(user, entityWiki), null);\n            }\n            return groups;\n        }\n\n        // If the user is global and we are looking for rules inside a subwiki\n        if (entityWiki != null) {\n            // Optim: We know we will have to load at least the rules concerning the local groups of the user, but we \n            // can try to get the global groups of that user, meaning that we would not have to load the rules\n            // concerning them via the bridge.\n            Collection<GroupSecurityReference> globalGroups = securityCache.getGroupsFor(user, null);\n            if (globalGroups == null) {\n                // No luck, the cache has no information about the global groups, so we will load them too\n                globalGroups = new HashSet<>();\n                loadUserEntry(user, userWiki, null, globalGroups, new ArrayDeque<GroupSecurityReference>());\n            }\n            groups.addAll(globalGroups);\n\n            // Now we load the rules concerning the shadows of the global groups in the subwiki\n            for (GroupSecurityReference group : globalGroups) {\n                Collection<GroupSecurityReference> localGroups = new HashSet<>();\n                loadUserEntry(group, userWiki, entityWiki, localGroups, new ArrayDeque<GroupSecurityReference>());\n                groups.addAll(localGroups);\n            }\n        }\n\n        // We load the rules concerning the groups of the user inside the wiki of the entity, could be either\n        // the global group of a global user, local group for a global user, or local group for a local user\n        Collection<GroupSecurityReference> localGroups = new HashSet<>();\n        loadUserEntry(user, userWiki, entityWiki, localGroups, new ArrayDeque<GroupSecurityReference>());\n        groups.addAll(localGroups);\n\n        // Returns all collected groups for access evaluation\n        return groups;\n    }","id":105866,"modified_method":"/**\n     * Load user/group entry in the cache as needed, load related group entries and return the list of all groups\n     * associated with the given user/group in both the user wiki and the given entity wiki. Groups containing\n     * (recursively) groups containing the user/group are also listed.\n     *\n     * @param user The user/group to load.\n     * @param userWiki The user wiki. Should correspond to the wiki of the user/group provided above.\n     * @param entityWiki Only for global user, the wiki of the entity currently evaluated if it differ from the user\n     * wiki, null otherwise. Local group information of the entity wiki will be evaluated for the user/group to load\n     * and a shadow user will be made available in that wiki to support access entries.\n     * @return A collection of groups associated to the requested user/group (both user wiki and entity wiki)\n     * @throws ParentEntryEvictedException if any of the parent entries of the group were evicted.\n     * @throws ConflictingInsertionException When different threads have inserted conflicting entries into the cache.\n     * @throws org.xwiki.security.authorization.AuthorizationException on error.\n     */\n    private Collection<GroupSecurityReference> loadUserEntry(UserSecurityReference user, SecurityReference userWiki,\n        SecurityReference entityWiki)\n        throws ParentEntryEvictedException, ConflictingInsertionException, AuthorizationException\n    {\n        // First, we try to get the groups of the user from the cache\n        Collection<GroupSecurityReference> groups = securityCache.getGroupsFor(user, entityWiki); \n        if (groups != null) {\n            // Since we have then in the cache, it means that the entry is already loaded\n            return groups;\n        }\n        \n        // Otherwise we have to load the entry\n        groups = new HashSet<GroupSecurityReference>();\n\n        // Public access could not appear in any group, no need to load it carefully, just optimized here\n        if (user.getOriginalReference() == null) {\n            if (securityCache.get(user) == null) {\n                // Main wiki entry should be loaded\n                getRules(user);\n            }\n            if (entityWiki != null) {\n                // Ensure there is a Public shadow in the subwiki of the checked entity\n                securityCache.add(new DefaultSecurityShadowEntry(user, entityWiki), null);\n            }\n            return groups;\n        }\n\n        // If the user/group is global and we are looking for rules inside a subwiki, we need to ensure that the\n        // global user/group is loaded first, and we should also looks at global groups that it is a member of\n        if (entityWiki != null) {\n            // First we add the global groups containing that user/group\n            // Check availability of the information from the user/group entry in the cache\n            Collection<GroupSecurityReference> globalGroups = securityCache.getGroupsFor(user, null);\n            if (globalGroups == null) {\n                // No luck, the global user does not seems to be in the cache, so we need to load it\n                globalGroups = new HashSet<>();\n                loadUserEntry(user, userWiki, null, globalGroups, new ArrayDeque<GroupSecurityReference>());\n            }\n            groups.addAll(globalGroups);\n\n            // Now we also need to consider the local groups that contains the global groups found, since the user/group\n            // should be considered indirectly a member of these groups as well\n            for (GroupSecurityReference group : globalGroups) {\n                // Check availability of the information from the shadow entry of the global group in the entity wiki\n                Collection<GroupSecurityReference> localGroups = securityCache.getGroupsFor(group, entityWiki);\n                if (localGroups == null) {\n                    // No luck, the shadow of the global group in the entity wiki does not seems to be in the cache,\n                    // so we need to load it\n                    localGroups = new HashSet<>();\n                    loadUserEntry(group, userWiki, entityWiki, localGroups, new ArrayDeque<GroupSecurityReference>());\n                }\n                groups.addAll(localGroups);\n            }\n        }\n\n        // We load the rules concerning the groups of the user inside the wiki of the entity, could be either\n        // the global group of a global user, local group for a global user, or local group for a local user\n        Collection<GroupSecurityReference> localGroups = new HashSet<>();\n        loadUserEntry(user, userWiki, entityWiki, localGroups, new ArrayDeque<GroupSecurityReference>());\n        groups.addAll(localGroups);\n\n        // Returns all collected groups for access evaluation\n        return groups;\n    }","commit_id":"5969642eac9152b0fdbca01ff82665ffbd39eda7","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Load a user/group entry in the cache as need, load related group entries, in the context of a single wiki.\n     *\n     * @param user The user/group to be loaded.\n     * @param userWiki The user wiki. Should correspond to the wiki of the user provided above.\n     * @param entityWiki Only for global user, the wiki to be evaluated, null otherwise to evaluate the user wiki.\n     * @param allGroups For the initial call, this collection should normally be empty, and will receive all the\n     *                  group associated with the given user (either directly or indirectly).\n     * @param branchGroups During recursive calls, it contains the result so far, and allow limiting the recursion.\n     * @throws ParentEntryEvictedException if any of the parent entries of the group were evicted.\n     * @throws ConflictingInsertionException When different threads have inserted conflicting entries into the cache.\n     * @throws org.xwiki.security.authorization.AuthorizationException on error.\n     */\n    private void loadUserEntry(UserSecurityReference user, SecurityReference userWiki,\n        SecurityReference entityWiki, Collection<GroupSecurityReference> allGroups,\n        Deque<GroupSecurityReference> branchGroups)\n        throws ParentEntryEvictedException, ConflictingInsertionException, AuthorizationException\n    {\n        // Retrieve the list of immediate group for the user/group in either the entity wiki or the user/group wiki\n        Collection<GroupSecurityReference> groups = (entityWiki != null)\n            ? userBridge.getAllGroupsFor(user, entityWiki.getOriginalWikiReference())\n            : userBridge.getAllGroupsFor(user, userWiki.getOriginalWikiReference());\n\n        Collection<GroupSecurityReference> immediateGroup = new ArrayList<GroupSecurityReference>();\n\n        // Loads all immediate groups recursively, collecting indirect groups along the way\n        for (GroupSecurityReference group : groups) {\n            // Loads the group only if it has never been seen before in the current path to avoid infinite recursion\n            if (!branchGroups.contains(group)) {\n                // We check the cache for real nodes (not shadows) since group are coming from their own wiki\n                Collection<GroupSecurityReference> groupsOfGroup = securityCache.getGroupsFor(group, null);\n                // And we load the groups only if they are not in the cache\n                if (groupsOfGroup == null) {\n                    // Add this group into the list of immediate groups for this entry\n                    immediateGroup.add(group);\n\n                    // Load dependencies recursively\n                    branchGroups.push(group);\n                    loadUserEntry(group, (entityWiki != null) ? entityWiki : userWiki, null, allGroups, branchGroups);\n                    branchGroups.pop();\n                } else {\n                    // Check for possible recursion in the cached groups and add this group only if it is safe\n                    boolean recursionFound = false;\n                    for (GroupSecurityReference existingGroups : groupsOfGroup) {\n                        if (branchGroups.contains(existingGroups)) {\n                            recursionFound = true;\n                            break;\n                        }\n                    }\n                    if (!recursionFound) {\n                        // Add this group into the list of immediate groups for this entry\n                        immediateGroup.add(group);\n                        // Add all group found in the cache for the final result\n                        allGroups.addAll(groupsOfGroup);\n                    }\n                }\n            }\n        }\n\n        // Collect groups of this entry for the final result\n        allGroups.addAll(immediateGroup);\n\n        // Store the user/group in the cache\n        if (entityWiki != null) {\n            // Store a shadow entry for a global user/group involved in a local wiki\n            securityCache.add(new DefaultSecurityShadowEntry(user, entityWiki), immediateGroup);\n        } else {\n            // Store or upgrade document entry into a user/group entry in the cache\n            // While the document rules could be already loaded in the cache, even if these rules should stay the same,\n            // we need to reload them as a user/group to have the security rules reference properly typed and\n            // recognized by the cache as a user. (cfr. XWIKI-12016)\n            loadUserEntry(user, immediateGroup);\n        }\n    }","id":105867,"modified_method":"/**\n     * Load a user/group entry in the cache as need, load related group entries, in the context of a single wiki.\n     *\n     * @param user The user/group to be loaded.\n     * @param userWiki The user wiki. Should correspond to the wiki of the user provided above.\n     * @param entityWiki Only for global user, the wiki to be evaluated, null otherwise to evaluate the user wiki.\n     * @param allGroups For the initial call, this collection should normally be empty, and will receive all the\n     *                  group associated with the given user (either directly or indirectly).\n     * @param branchGroups During recursive calls, it contains the result so far, and allow limiting the recursion.\n     * @throws ParentEntryEvictedException if any of the parent entries of the group were evicted.\n     * @throws ConflictingInsertionException When different threads have inserted conflicting entries into the cache.\n     * @throws org.xwiki.security.authorization.AuthorizationException on error.\n     */\n    private void loadUserEntry(UserSecurityReference user, SecurityReference userWiki,\n        SecurityReference entityWiki, Collection<GroupSecurityReference> allGroups,\n        Deque<GroupSecurityReference> branchGroups)\n        throws ParentEntryEvictedException, ConflictingInsertionException, AuthorizationException\n    {\n        // Retrieve the list of immediate group for the user/group in either the entity wiki or the user/group wiki\n        Collection<GroupSecurityReference> groups = (entityWiki != null)\n            ? userBridge.getAllGroupsFor(user, entityWiki.getOriginalWikiReference())\n            : userBridge.getAllGroupsFor(user, userWiki.getOriginalWikiReference());\n\n        Collection<GroupSecurityReference> immediateGroup = new ArrayList<GroupSecurityReference>();\n\n        // Loads all immediate groups recursively, collecting indirect groups along the way\n        for (GroupSecurityReference group : groups) {\n            // Loads the group only if it has never been seen before in the current path to avoid infinite recursion\n            if (!branchGroups.contains(group)) {\n                // We check the cache for real nodes (not shadows) since group are coming from their own wiki\n                Collection<GroupSecurityReference> groupsOfGroup = securityCache.getGroupsFor(group, null);\n                // And we load the groups only if they are not in the cache\n                if (groupsOfGroup == null) {\n                    // Add this group into the list of immediate groups for this entry\n                    immediateGroup.add(group);\n\n                    // Load dependencies recursively\n                    branchGroups.push(group);\n                    loadUserEntry(group, (entityWiki != null) ? entityWiki : userWiki, null, allGroups, branchGroups);\n                    branchGroups.pop();\n                } else {\n                    // Check for possible recursion in the cached groups and add this group only if it is safe\n                    boolean recursionFound = false;\n                    for (GroupSecurityReference existingGroup : groupsOfGroup) {\n                        if (branchGroups.contains(existingGroup)) {\n                            recursionFound = true;\n                            break;\n                        }\n                    }\n                    if (!recursionFound) {\n                        // Add this group into the list of immediate groups for this entry\n                        immediateGroup.add(group);\n                        // Add all group found in the cache for the final result\n                        allGroups.addAll(groupsOfGroup);\n                    }\n                }\n            }\n        }\n\n        // Collect groups of this entry for the final result\n        allGroups.addAll(immediateGroup);\n\n        // Store the user/group in the cache\n        if (entityWiki != null) {\n            // Store a shadow entry for a global user/group involved in a local wiki\n            securityCache.add(new DefaultSecurityShadowEntry(user, entityWiki), immediateGroup);\n        } else {\n            // Store or upgrade document entry into a user/group entry in the cache\n            // While the document rules could be already loaded in the cache, even if these rules should stay the same,\n            // we need to reload them as a user/group to have the security rules reference properly typed and\n            // recognized by the cache as a user. (cfr. XWIKI-12016)\n            loadUserEntry(user, immediateGroup);\n        }\n    }","commit_id":"5969642eac9152b0fdbca01ff82665ffbd39eda7","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public long getLong(Object bean, String param, long defaultValue) {\n\t\tLong beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = (Long)PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.longValue();\n\t\t}\n\t}","id":105868,"modified_method":"public long getLong(Object bean, String param, long defaultValue) {\n\t\tLong beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tObject value = BeanUtil.getProperty(bean, param);\n\n\t\t\t\tbeanValue = ReflectUtil.castType(value, Long.class);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.longValue();\n\t\t}\n\t}","commit_id":"f00279a4d4672201d1574969abab9c3ba36f82fc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void copyProperties(Object source, Object target) {\n\t\tBeanUtils.copyProperties(source, target);\n\t}","id":105869,"modified_method":"public void copyProperties(Object source, Object target) {\n\t\ttry {\n\t\t\tBeanTool.copyProperties(source, target);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\t\t}\n\t}","commit_id":"f00279a4d4672201d1574969abab9c3ba36f82fc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public String getString(Object bean, String param, String defaultValue) {\n\t\tString beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = (String)PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue;\n\t\t}\n\t}","id":105870,"modified_method":"public String getString(Object bean, String param, String defaultValue) {\n\t\tString beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tObject value = BeanUtil.getProperty(bean, param);\n\n\t\t\t\tbeanValue = ReflectUtil.castType(value, String.class);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue;\n\t\t}\n\t}","commit_id":"f00279a4d4672201d1574969abab9c3ba36f82fc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public short getShort(Object bean, String param, short defaultValue) {\n\t\tShort beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = (Short)PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.shortValue();\n\t\t}\n\t}","id":105871,"modified_method":"public short getShort(Object bean, String param, short defaultValue) {\n\t\tShort beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tObject value = BeanUtil.getProperty(bean, param);\n\n\t\t\t\tbeanValue = ReflectUtil.castType(value, Short.class);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.shortValue();\n\t\t}\n\t}","commit_id":"f00279a4d4672201d1574969abab9c3ba36f82fc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public int getInteger(Object bean, String param, int defaultValue) {\n\t\tInteger beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = (Integer)PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.intValue();\n\t\t}\n\t}","id":105872,"modified_method":"public int getInteger(Object bean, String param, int defaultValue) {\n\t\tInteger beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tObject value = BeanUtil.getProperty(bean, param);\n\n\t\t\t\tbeanValue = ReflectUtil.castType(value, Integer.class);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.intValue();\n\t\t}\n\t}","commit_id":"f00279a4d4672201d1574969abab9c3ba36f82fc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void copyProperties(\n\t\tObject source, Object target, Class<?> editable) {\n\n\t\tBeanUtils.copyProperties(source, target, editable);\n\t}","id":105873,"modified_method":"public void copyProperties(\n\t\tObject source, Object target, Class<?> editable) {\n\n\t\ttry {\n\t\t\tBeanTool.copyProperties(source, target, editable);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\t\t}\n\t}","commit_id":"f00279a4d4672201d1574969abab9c3ba36f82fc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public byte getByte(Object bean, String param, byte defaultValue) {\n\t\tByte beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = (Byte)PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.byteValue();\n\t\t}\n\t}","id":105874,"modified_method":"public byte getByte(Object bean, String param, byte defaultValue) {\n\t\tByte beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tObject value = BeanUtil.getProperty(bean, param);\n\n\t\t\t\tbeanValue = ReflectUtil.castType(value, Byte.class);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.byteValue();\n\t\t}\n\t}","commit_id":"f00279a4d4672201d1574969abab9c3ba36f82fc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public float getFloat(Object bean, String param, float defaultValue) {\n\t\tFloat beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = (Float)PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.floatValue();\n\t\t}\n\t}","id":105875,"modified_method":"public float getFloat(Object bean, String param, float defaultValue) {\n\t\tFloat beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tObject value = BeanUtil.getProperty(bean, param);\n\n\t\t\t\tbeanValue = ReflectUtil.castType(value, Float.class);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.floatValue();\n\t\t}\n\t}","commit_id":"f00279a4d4672201d1574969abab9c3ba36f82fc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Object getObject(Object bean, String param, Object defaultValue) {\n\t\tObject beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue;\n\t\t}\n\t}","id":105876,"modified_method":"public Object getObject(Object bean, String param, Object defaultValue) {\n\t\tObject beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = BeanUtil.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue;\n\t\t}\n\t}","commit_id":"f00279a4d4672201d1574969abab9c3ba36f82fc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public double getDouble(Object bean, String param, double defaultValue) {\n\t\tDouble beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = (Double)PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.doubleValue();\n\t\t}\n\t}","id":105877,"modified_method":"public double getDouble(Object bean, String param, double defaultValue) {\n\t\tDouble beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tObject value = BeanUtil.getProperty(bean, param);\n\n\t\t\t\tbeanValue = ReflectUtil.castType(value, Double.class);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.doubleValue();\n\t\t}\n\t}","commit_id":"f00279a4d4672201d1574969abab9c3ba36f82fc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public boolean getBoolean(Object bean, String param, boolean defaultValue) {\n\t\tBoolean beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = (Boolean)PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.booleanValue();\n\t\t}\n\t}","id":105878,"modified_method":"public boolean getBoolean(Object bean, String param, boolean defaultValue) {\n\t\tBoolean beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tObject value = BeanUtil.getProperty(bean, param);\n\n\t\t\t\tbeanValue = ReflectUtil.castType(value, Boolean.class);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e, e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.booleanValue();\n\t\t}\n\t}","commit_id":"f00279a4d4672201d1574969abab9c3ba36f82fc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void copyProperties(\n\t\tObject source, Object target, String[] ignoreProperties) {\n\n\t\tBeanUtils.copyProperties(source, target, ignoreProperties);\n\t}","id":105879,"modified_method":"public void copyProperties(\n\t\tObject source, Object target, String[] ignoreProperties) {\n\n\t\ttry {\n\t\t\tBeanTool.copyProperties(source, target, ignoreProperties, false);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\t\t}\n\t}","commit_id":"f00279a4d4672201d1574969abab9c3ba36f82fc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void setProperty(Object bean, String param, Object value) {\n\t\ttry {\n\t\t\tPropertyUtils.setProperty(bean, param, value);\n\t\t}\n\t\tcatch (NoSuchMethodException nsme) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e);\n\t\t}\n\t}","id":105880,"modified_method":"public void setProperty(Object bean, String param, Object value) {\n\t\ttry {\n\t\t\tBeanUtil.setProperty(bean, param, value);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e, e);\n\t\t}\n\t}","commit_id":"f00279a4d4672201d1574969abab9c3ba36f82fc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public long getLong(Object bean, String param, long defaultValue) {\n\t\tLong beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = (Long)PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.longValue();\n\t\t}\n\t}","id":105881,"modified_method":"public long getLong(Object bean, String param, long defaultValue) {\n\t\tLong beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tObject value = BeanUtil.getProperty(bean, param);\n\t\t\t\tbeanValue = ReflectUtil.castType(value, Long.class);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.longValue();\n\t\t}\n\t}","commit_id":"03f9391baf6fc3e555fbf88c696ed579b190e4ec","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public double getDouble(Object bean, String param, double defaultValue) {\n\t\tDouble beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = (Double)PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.doubleValue();\n\t\t}\n\t}","id":105882,"modified_method":"public double getDouble(Object bean, String param, double defaultValue) {\n\t\tDouble beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tObject value = BeanUtil.getProperty(bean, param);\n\t\t\t\tbeanValue = ReflectUtil.castType(value, Double.class);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.doubleValue();\n\t\t}\n\t}","commit_id":"03f9391baf6fc3e555fbf88c696ed579b190e4ec","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void copyProperties(\n\t\tObject source, Object target, String[] ignoreProperties) {\n\n\t\tBeanUtils.copyProperties(source, target, ignoreProperties);\n\t}","id":105883,"modified_method":"public void copyProperties(\n\t\tObject source, Object target, String[] ignoreProperties) {\n\n\t\ttry {\n\t\t\tBeanTool.copyProperties(source, target, ignoreProperties, false);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e);\n\t\t}\n\t}","commit_id":"03f9391baf6fc3e555fbf88c696ed579b190e4ec","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public short getShort(Object bean, String param, short defaultValue) {\n\t\tShort beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = (Short)PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.shortValue();\n\t\t}\n\t}","id":105884,"modified_method":"public short getShort(Object bean, String param, short defaultValue) {\n\t\tShort beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tObject value = BeanUtil.getProperty(bean, param);\n\t\t\t\tbeanValue = ReflectUtil.castType(value, Short.class);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.shortValue();\n\t\t}\n\t}","commit_id":"03f9391baf6fc3e555fbf88c696ed579b190e4ec","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void copyProperties(Object source, Object target) {\n\t\tBeanUtils.copyProperties(source, target);\n\t}","id":105885,"modified_method":"public void copyProperties(Object source, Object target) {\n\n\t\ttry {\n\t\t\tBeanTool.copyProperties(source, target);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e);\n\t\t}\n\t}","commit_id":"03f9391baf6fc3e555fbf88c696ed579b190e4ec","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Object getObject(Object bean, String param, Object defaultValue) {\n\t\tObject beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue;\n\t\t}\n\t}","id":105886,"modified_method":"public Object getObject(Object bean, String param, Object defaultValue) {\n\t\tObject beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = BeanUtil.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue;\n\t\t}\n\t}","commit_id":"03f9391baf6fc3e555fbf88c696ed579b190e4ec","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void copyProperties(\n\t\tObject source, Object target, Class<?> editable) {\n\n\t\tBeanUtils.copyProperties(source, target, editable);\n\t}","id":105887,"modified_method":"public void copyProperties(\n\t\tObject source, Object target, Class<?> editable) {\n\n\t\ttry {\n\t\t\tBeanTool.copyProperties(source, target, editable);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e);\n\t\t}\n\t}","commit_id":"03f9391baf6fc3e555fbf88c696ed579b190e4ec","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public String getString(Object bean, String param, String defaultValue) {\n\t\tString beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = (String)PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue;\n\t\t}\n\t}","id":105888,"modified_method":"public String getString(Object bean, String param, String defaultValue) {\n\t\tString beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tObject value = BeanUtil.getProperty(bean, param);\n\t\t\t\tbeanValue = ReflectUtil.castType(value, String.class);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue;\n\t\t}\n\t}","commit_id":"03f9391baf6fc3e555fbf88c696ed579b190e4ec","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public float getFloat(Object bean, String param, float defaultValue) {\n\t\tFloat beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = (Float)PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.floatValue();\n\t\t}\n\t}","id":105889,"modified_method":"public float getFloat(Object bean, String param, float defaultValue) {\n\t\tFloat beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tObject value = BeanUtil.getProperty(bean, param);\n\t\t\t\tbeanValue = ReflectUtil.castType(value, Float.class);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.floatValue();\n\t\t}\n\t}","commit_id":"03f9391baf6fc3e555fbf88c696ed579b190e4ec","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void setProperty(Object bean, String param, Object value) {\n\t\ttry {\n\t\t\tPropertyUtils.setProperty(bean, param, value);\n\t\t}\n\t\tcatch (NoSuchMethodException nsme) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e);\n\t\t}\n\t}","id":105890,"modified_method":"public void setProperty(Object bean, String param, Object value) {\n\t\ttry {\n\t\t\tBeanUtil.setProperty(bean, param, value);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\t_log.error(e);\n\t\t}\n\t}","commit_id":"03f9391baf6fc3e555fbf88c696ed579b190e4ec","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public int getInteger(Object bean, String param, int defaultValue) {\n\t\tInteger beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = (Integer)PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.intValue();\n\t\t}\n\t}","id":105891,"modified_method":"public int getInteger(Object bean, String param, int defaultValue) {\n\t\tInteger beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tObject value = BeanUtil.getProperty(bean, param);\n\t\t\t\tbeanValue = ReflectUtil.castType(value, Integer.class);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.intValue();\n\t\t}\n\t}","commit_id":"03f9391baf6fc3e555fbf88c696ed579b190e4ec","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public byte getByte(Object bean, String param, byte defaultValue) {\n\t\tByte beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = (Byte)PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.byteValue();\n\t\t}\n\t}","id":105892,"modified_method":"public byte getByte(Object bean, String param, byte defaultValue) {\n\t\tByte beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tObject value = BeanUtil.getProperty(bean, param);\n\t\t\t\tbeanValue = ReflectUtil.castType(value, Byte.class);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.byteValue();\n\t\t}\n\t}","commit_id":"03f9391baf6fc3e555fbf88c696ed579b190e4ec","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public boolean getBoolean(Object bean, String param, boolean defaultValue) {\n\t\tBoolean beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tbeanValue = (Boolean)PropertyUtils.getProperty(bean, param);\n\t\t\t}\n\t\t\tcatch (NoSuchMethodException nsme) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(nsme.getMessage());\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.booleanValue();\n\t\t}\n\t}","id":105893,"modified_method":"public boolean getBoolean(Object bean, String param, boolean defaultValue) {\n\t\tBoolean beanValue = null;\n\n\t\tif (bean != null) {\n\t\t\ttry {\n\t\t\t\tObject value = BeanUtil.getProperty(bean, param);\n\t\t\t\tbeanValue = ReflectUtil.castType(value, Boolean.class);\n\t\t\t}\n\t\t\tcatch (Exception e) {\n\t\t\t\t_log.error(e);\n\t\t\t}\n\t\t}\n\n\t\tif (beanValue == null) {\n\t\t\treturn defaultValue;\n\t\t}\n\t\telse {\n\t\t\treturn beanValue.booleanValue();\n\t\t}\n\t}","commit_id":"03f9391baf6fc3e555fbf88c696ed579b190e4ec","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * @see Node#setProperty(String, Binary)\n     */\n    @Override\n    @CheckForNull\n    public Property setProperty(String name, Binary value) throws RepositoryException {\n        Value v = (value == null ? null : getValueFactory().createValue(value));\n        return setProperty(name, v, PropertyType.BINARY);\n    }","id":105894,"modified_method":"@Override @Nonnull\n    public Property setProperty(String name, Binary value)\n            throws RepositoryException {\n        if (value != null) {\n            Value v = getValueFactory().createValue(value);\n            return internalSetProperty(name, v, PropertyType.BINARY, true);\n        } else {\n            return internalRemoveProperty(name);\n        }\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * @see Node#setProperty(String, String[])\n     */\n    @Override\n    @Nonnull\n    public Property setProperty(String name, String[] values) throws RepositoryException {\n        return setProperty(name, values, PropertyType.UNDEFINED);\n    }","id":105895,"modified_method":"@Override @Nonnull\n    public Property setProperty(String name, String[] values)\n            throws RepositoryException {\n        if (values != null) {\n            Value[] vs = ValueHelper.convert(\n                    values, PropertyType.STRING, getValueFactory());\n            return internalSetProperty(name, vs, UNDEFINED, false);\n        } else {\n            return internalRemoveProperty(name);\n        }\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * @see Node#setProperty(String, Calendar)\n     */\n    @Override\n    @CheckForNull\n    public Property setProperty(String name, Calendar value) throws RepositoryException {\n        Value v = (value == null ? null : getValueFactory().createValue(value));\n        return setProperty(name, v, PropertyType.DATE);\n    }","id":105896,"modified_method":"@Override @Nonnull\n    public Property setProperty(String name, Calendar value)\n            throws RepositoryException {\n        if (value != null) {\n            Value v = getValueFactory().createValue(value);\n            return internalSetProperty(name, v, PropertyType.DATE, true);\n        } else {\n            return internalRemoveProperty(name);\n        }\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * @see Node#setProperty(String, long)\n     */\n    @Override\n    @Nonnull\n    public Property setProperty(String name, long value) throws RepositoryException {\n        return setProperty(name, getValueFactory().createValue(value), PropertyType.LONG);\n    }","id":105897,"modified_method":"@Override @Nonnull\n    public Property setProperty(String name, long value)\n            throws RepositoryException {\n        Value v = getValueFactory().createValue(value);\n        return internalSetProperty(name, v, PropertyType.LONG, true);\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * @see Node#setProperty(String, BigDecimal)\n     */\n    @Override\n    @CheckForNull\n    public Property setProperty(String name, BigDecimal value) throws RepositoryException {\n        Value v = (value == null ? null : getValueFactory().createValue(value));\n        return setProperty(name, v, PropertyType.DECIMAL);\n    }","id":105898,"modified_method":"@Override @Nonnull\n    public Property setProperty(String name, BigDecimal value)\n            throws RepositoryException {\n        if (value != null) {\n            Value v = getValueFactory().createValue(value);\n            return internalSetProperty(name, v, PropertyType.DECIMAL, true);\n        } else {\n            return internalRemoveProperty(name);\n        }\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * @see Node#setProperty(String, InputStream)\n     */\n    @SuppressWarnings(\"deprecation\")\n    @Override\n    @CheckForNull\n    public Property setProperty(String name, InputStream value) throws RepositoryException {\n        Value v = (value == null ? null : getValueFactory().createValue(value));\n        return setProperty(name, v, PropertyType.BINARY);\n    }","id":105899,"modified_method":"@Override @Nonnull\n    public Property setProperty(String name, InputStream value)\n            throws RepositoryException {\n        if (value != null) {\n            ValueFactory factory = getValueFactory();\n            Binary binary = factory.createBinary(value);\n            try {\n                Value v = factory.createValue(binary);\n                return internalSetProperty(name, v, PropertyType.BINARY, true);\n            } finally {\n                binary.dispose();\n            }\n        } else {\n            return internalRemoveProperty(name);\n        }\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private Property internalSetProperty(final String jcrName, final Value[] values,\n                                         final int type, final boolean exactTypeMatch) throws RepositoryException {\n        return perform(new SessionOperation<Property>() {\n            @Override\n            protected void checkPreconditions() throws RepositoryException {\n                checkStatus();\n                checkProtected();\n            }\n\n            @Override\n            public Property perform() throws RepositoryException {\n                String oakName = getOakPath(jcrName);\n                if (values == null) {\n                    if (hasProperty(jcrName)) {\n                        Property property = getProperty(jcrName);\n                        property.remove();\n                        return property;\n                    } else {\n                        return new PropertyImpl(new PropertyDelegate(\n                                sessionDelegate, dlg.getLocation().getChild(oakName)), sessionContext);\n                    }\n                } else {\n                    Value[] targetValues;\n                    if (DISABLE_TRANSIENT_DEFINITION_CHECKS) {\n                        targetValues = values;\n                    } else {\n                        PropertyDefinition definition;\n                        if (hasProperty(jcrName)) {\n                            definition = getProperty(jcrName).getDefinition();\n                        } else {\n                            definition = getDefinitionProvider().getDefinition(NodeImpl.this, oakName, true, type, exactTypeMatch);\n                        }\n                        checkProtected(definition);\n                        if (!definition.isMultiple()) {\n                            throw new ValueFormatException(\"Cannot set value array to single value property\");\n                        }\n\n                        int targetType = getTargetType(values, definition);\n                        targetValues = ValueHelper.convert(values, targetType, getValueFactory());\n                    }\n\n                    Iterable<Value> nonNullValues = Iterables.filter(\n                            Arrays.asList(targetValues),\n                            Predicates.notNull());\n                    return new PropertyImpl(dlg.setProperty(PropertyStates.createProperty(oakName, nonNullValues)), sessionContext);\n                }\n            }\n        });\n    }","id":105900,"modified_method":"private Property internalSetProperty(\n            final String jcrName, final Value[] values,\n            final int type, final boolean exactTypeMatch)\n            throws RepositoryException {\n        checkNotNull(values);\n        final String oakName = getOakPath(checkNotNull(jcrName));\n        return perform(new SessionOperation<Property>() {\n            @Override\n            protected void checkPreconditions() throws RepositoryException {\n                // TODO: Reduce boilerplate (OAK-662)\n                checkStatus();\n                checkProtected();\n            }\n\n            @Override\n            public Property perform() throws RepositoryException {\n                Value[] targetValues;\n                if (DISABLE_TRANSIENT_DEFINITION_CHECKS) {\n                    targetValues = values;\n                } else {\n                    PropertyDefinition definition;\n                    // TODO: Avoid extra JCR method calls (OAK-672)\n                    if (hasProperty(jcrName)) {\n                        definition = getProperty(jcrName).getDefinition();\n                    } else {\n                        definition = getDefinitionProvider().getDefinition(\n                                NodeImpl.this, oakName, true, type,\n                                exactTypeMatch);\n                    }\n                    checkProtected(definition);\n                    if (!definition.isMultiple()) {\n                        throw new ValueFormatException(\n                                \"Cannot set value array to single value property\");\n                    }\n\n                    int targetType = getTargetType(values, definition);\n                    targetValues = ValueHelper.convert(\n                            values, targetType, getValueFactory());\n                }\n\n                Iterable<Value> nonNullValues = Iterables.filter(\n                        Arrays.asList(targetValues), Predicates.notNull());\n                PropertyState state =\n                        PropertyStates.createProperty(oakName, nonNullValues);\n                return new PropertyImpl(dlg.setProperty(state), sessionContext);\n            }\n        });\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"private Property internalSetProperty(final String jcrName, final Value value,\n                                         final int type, final boolean exactTypeMatch) throws RepositoryException {\n        return perform(new SessionOperation<Property>() {\n            @Override\n            protected void checkPreconditions() throws RepositoryException {\n                checkStatus();\n                checkProtected();\n            }\n\n            @Override\n            public Property perform() throws RepositoryException {\n                String oakName = getOakPath(jcrName);\n                if (value == null) {\n                    if (hasProperty(jcrName)) {\n                        Property property = getProperty(jcrName);\n                        property.remove();\n                        return property;\n                    } else {\n                        // Return a property instance which throws on access. See OAK-395\n                        return new PropertyImpl(new PropertyDelegate(\n                                sessionDelegate, dlg.getLocation().getChild(oakName)), sessionContext);\n                    }\n                } else {\n                    Value targetValue;\n                    if (DISABLE_TRANSIENT_DEFINITION_CHECKS) {\n                        targetValue = value;\n                    } else {\n                        PropertyDefinition definition;\n                        if (hasProperty(jcrName)) {\n                            definition = getProperty(jcrName).getDefinition();\n                        } else {\n                            definition = getDefinitionProvider().getDefinition(NodeImpl.this, oakName, false, type, exactTypeMatch);\n                        }\n                        checkProtected(definition);\n                        if (definition.isMultiple()) {\n                            throw new ValueFormatException(\"Cannot set single value to multivalued property\");\n                        }\n\n                        int targetType = getTargetType(value, definition);\n                        targetValue = ValueHelper.convert(value, targetType, getValueFactory());\n                    }\n\n                    return new PropertyImpl(dlg.setProperty(PropertyStates.createProperty(oakName, targetValue)), sessionContext);\n                }\n            }\n        });\n    }","id":105901,"modified_method":"private Property internalSetProperty(\n            final String jcrName, final Value value,\n            final int type, final boolean exactTypeMatch)\n            throws RepositoryException {\n        checkNotNull(value);\n        final String oakName = getOakPath(checkNotNull(jcrName));\n        return perform(new SessionOperation<Property>() {\n            @Override\n            protected void checkPreconditions() throws RepositoryException {\n                // TODO: Reduce boilerplate (OAK-662)\n                checkStatus();\n                checkProtected();\n            }\n\n            @Override\n            public Property perform() throws RepositoryException {\n                Value targetValue;\n                if (DISABLE_TRANSIENT_DEFINITION_CHECKS) {\n                    targetValue = value;\n                } else {\n                    PropertyDefinition definition;\n                    // TODO: Avoid extra JCR method calls (OAK-672)\n                    if (hasProperty(jcrName)) {\n                        definition = getProperty(jcrName).getDefinition();\n                    } else {\n                        definition = getDefinitionProvider().getDefinition(\n                                NodeImpl.this, oakName, false, type,\n                                exactTypeMatch);\n                    }\n                    checkProtected(definition);\n                    if (definition.isMultiple()) {\n                        throw new ValueFormatException(\n                                \"Cannot set single value to multivalued property\");\n                    }\n\n                    int targetType = getTargetType(value, definition);\n                    targetValue = ValueHelper.convert(\n                            value, targetType, getValueFactory());\n                }\n\n                PropertyState state =\n                        PropertyStates.createProperty(oakName, targetValue);\n                return new PropertyImpl(dlg.setProperty(state), sessionContext);\n            }\n        });\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * @see Node#setProperty(String, String)\n     */\n    @Override\n    @CheckForNull\n    public Property setProperty(String name, String value) throws RepositoryException {\n        Value v = (value == null) ? null : getValueFactory().createValue(value, PropertyType.STRING);\n        return internalSetProperty(name, v, PropertyType.UNDEFINED, false);\n    }","id":105902,"modified_method":"@Override @Nonnull\n    public Property setProperty(String name, String value)\n            throws RepositoryException {\n        if (value != null) {\n            Value v = getValueFactory().createValue(value);\n            return internalSetProperty(name, v, UNDEFINED, false);\n        } else {\n            return internalRemoveProperty(name);\n        }\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * @see Node#setProperty(String, double)\n     */\n    @Override\n    @Nonnull\n    public Property setProperty(String name, double value) throws RepositoryException {\n        return setProperty(name, getValueFactory().createValue(value), PropertyType.DOUBLE);\n    }","id":105903,"modified_method":"@Override @Nonnull\n    public Property setProperty(String name, double value)\n            throws RepositoryException {\n        Value v = getValueFactory().createValue(value);\n        return internalSetProperty(name, v, PropertyType.DOUBLE, true);\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * @see Node#setProperty(String, javax.jcr.Value)\n     */\n    @Override\n    @CheckForNull\n    public Property setProperty(String name, Value value) throws RepositoryException {\n        int type = PropertyType.UNDEFINED;\n        if (value != null) {\n            type = value.getType();\n        }\n        return internalSetProperty(name, value, type, false);\n    }","id":105904,"modified_method":"@Override @Nonnull\n    public Property setProperty(String name, Value value)\n            throws RepositoryException {\n        if (value != null) {\n            return internalSetProperty(name, value, value.getType(), false);\n        } else {\n            return internalRemoveProperty(name);\n        }\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * @see Node#setProperty(String, Node)\n     */\n    @Override\n    @CheckForNull\n    public Property setProperty(String name, Node value) throws RepositoryException {\n        Value v = (value == null) ? null : getValueFactory().createValue(value);\n        return setProperty(name, v, PropertyType.REFERENCE);\n    }","id":105905,"modified_method":"@Override @Nonnull\n    public Property setProperty(String name, Node value)\n            throws RepositoryException {\n        if (value != null) {\n            Value v = getValueFactory().createValue(value);\n            return internalSetProperty(name, v, PropertyType.REFERENCE, true);\n        } else {\n            return internalRemoveProperty(name);\n        }\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * @see Node#setProperty(String, String, int)\n     */\n    @Override\n    @CheckForNull\n    public Property setProperty(String name, String value, int type) throws RepositoryException {\n        Value v = (value == null) ? null : getValueFactory().createValue(value, type);\n        return internalSetProperty(name, v, type, true);\n    }","id":105906,"modified_method":"@Override @Nonnull\n    public Property setProperty(String name, String value, int type)\n            throws RepositoryException {\n        if (type == PropertyType.UNDEFINED) {\n            return setProperty(name, value);\n        } else if (value != null) {\n            Value v = getValueFactory().createValue(value, type);\n            return internalSetProperty(name, v, type, true);\n        } else {\n            return internalRemoveProperty(name);\n        }\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"@Override\n    @Nonnull\n    public Property setProperty(String jcrName, Value[] values, int type) throws RepositoryException {\n        return internalSetProperty(jcrName, values, type, true);\n    }","id":105907,"modified_method":"@Override @Nonnull\n    public Property setProperty(String jcrName, Value[] values, int type)\n            throws RepositoryException {\n        if (type == UNDEFINED) {\n            return setProperty(jcrName, values);\n        } else if (values != null) {\n            return internalSetProperty(jcrName, values, type, true);\n        } else {\n            return internalRemoveProperty(jcrName);\n        }\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * @see Node#setProperty(String, String[], int)\n     */\n    @Override\n    @Nonnull\n    public Property setProperty(String name, String[] values, int type) throws RepositoryException {\n        Value[] vs;\n        if (type == PropertyType.UNDEFINED) {\n            vs = ValueHelper.convert(values, PropertyType.STRING, getValueFactory());\n        } else {\n            vs = ValueHelper.convert(values, type, getValueFactory());\n        }\n        return internalSetProperty(name, vs, type, (type != PropertyType.UNDEFINED));\n    }","id":105908,"modified_method":"@Override @Nonnull\n    public Property setProperty(String name, String[] values, int type)\n            throws RepositoryException {\n        if (type == UNDEFINED) {\n            return setProperty(name, values);\n        } else if (values != null) {\n            Value[] vs = ValueHelper.convert(values, type, getValueFactory());\n            return internalSetProperty(name, vs, type, true);\n        } else {\n            return internalRemoveProperty(name);\n        }\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * @see Node#setProperty(String, javax.jcr.Value[])\n     */\n    @Override\n    @Nonnull\n    public Property setProperty(String name, Value[] values) throws RepositoryException {\n        int type;\n        if (values == null || values.length == 0 || values[0] == null) {\n            type = PropertyType.UNDEFINED;\n        } else {\n            type = values[0].getType();\n        }\n        return internalSetProperty(name, values, type, false);\n    }","id":105909,"modified_method":"@Override @Nonnull\n    public Property setProperty(String name, Value[] values)\n            throws RepositoryException {\n        if (values != null) {\n            for (int i = 0; i < values.length; i++) {\n                if (values[i] != null) {\n                    // use the type of the first non-null value\n                    return internalSetProperty(\n                            name, values, values[i].getType(), false);\n                }\n            }\n            // unknown value type\n            return internalSetProperty(name, values, UNDEFINED, false);\n        } else {\n            return internalRemoveProperty(name);\n        }\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * @see Node#setProperty(String, javax.jcr.Value, int)\n     */\n    @Override\n    @Nonnull\n    public Property setProperty(String name, Value value, int type)\n            throws RepositoryException {\n        return internalSetProperty(name, value, type, type != PropertyType.UNDEFINED);\n    }","id":105910,"modified_method":"@Override @Nonnull\n    public Property setProperty(String name, Value value, int type)\n            throws RepositoryException {\n        if (type == UNDEFINED) {\n            return setProperty(name, value);\n        } else if (value != null) {\n            return internalSetProperty(name, value, type, true);\n        } else {\n            return internalRemoveProperty(name);\n        }\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"/**\n     * @see Node#setProperty(String, boolean)\n     */\n    @Override\n    @Nonnull\n    public Property setProperty(String name, boolean value) throws RepositoryException {\n        return setProperty(name, getValueFactory().createValue(value), PropertyType.BOOLEAN);\n    }","id":105911,"modified_method":"@Override @Nonnull\n    public Property setProperty(String name, boolean value)\n            throws RepositoryException {\n        Value v = getValueFactory().createValue(value);\n        return internalSetProperty(name, v, PropertyType.BOOLEAN, true);\n    }","commit_id":"d5f104122e19a1405ae73d60fce3b30382af0de8","url":"https://github.com/apache/jackrabbit-oak"},{"original_method":"protected Grammar getGrammar(XtextTemplateContext xtextTemplateContext) {\n\t\tEObject grammarElement = xtextTemplateContext.getContentAssistContext()\n\t\t\t\t.getRootNode().getGrammarElement();\n\t\treturn (Grammar) EcoreUtil.getRootContainer(grammarElement);\n\t}","id":105912,"modified_method":"protected Grammar getGrammar(XtextTemplateContext xtextTemplateContext) {\n\t\tEObject grammarElement = xtextTemplateContext.getContentAssistContext()\n\t\t\t\t.getRootNode().getGrammarElement();\n\t\tif (grammarElement == null && grammarAccess != null)\n\t\t\treturn grammarAccess.getGrammar();\n\t\treturn (Grammar) EcoreUtil.getRootContainer(grammarElement);\n\t}","commit_id":"efedf8e0428661d5b3511f106de0c9a8ee9e0fbc","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic List<String> resolveValues(TemplateVariable variable, XtextTemplateContext castedContext) {\n\t\tString abbreviatedCrossReference = (String) variable.getVariableType().getParams().iterator().next();\n\t\tint dotIndex = abbreviatedCrossReference.lastIndexOf('.');\n\t\tif (dotIndex <= 0) {\n\t\t\tlog.error(\"CrossReference '\" + abbreviatedCrossReference + \"' could not be resolved.\"); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tString[] classReferencePair = new String[] { abbreviatedCrossReference.substring(0, dotIndex),\n\t\t\t\tabbreviatedCrossReference.substring(dotIndex + 1) };\n\t\tEReference reference = getReference(classReferencePair[0], classReferencePair[1], getGrammar(castedContext));\n\t\tif (reference == null) {\n\t\t\tlog.error(\"CrossReference to class '\" + classReferencePair[0] + \"' and reference '\" + classReferencePair[1] //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\t\t+ \"' could not be resolved.\"); //$NON-NLS-1$\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tIScope scope = castedContext.getScopeProvider().getScope(\n\t\t\t\tcastedContext.getContentAssistContext().getCurrentModel(), reference);\n\t\tIterable<IEObjectDescription> linkingCandidates = queryScope(scope);\n\n\t\tList<String> names = new ArrayList<String>();\n\t\tfor (IEObjectDescription eObjectDescription : linkingCandidates) {\n\t\t\tnames.add(qualifiedNameConverter.toString(eObjectDescription.getName()));\n\t\t}\n\t\treturn names;\n\t}","id":105913,"modified_method":"@Override\n\tpublic List<String> resolveValues(TemplateVariable variable, XtextTemplateContext castedContext) {\n\t\tString abbreviatedCrossReference = (String) variable.getVariableType().getParams().iterator().next();\n\t\tint dotIndex = abbreviatedCrossReference.lastIndexOf('.');\n\t\tif (dotIndex <= 0) {\n\t\t\tlog.error(\"CrossReference '\" + abbreviatedCrossReference + \"' could not be resolved.\"); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tString[] classReferencePair = new String[] { abbreviatedCrossReference.substring(0, dotIndex),\n\t\t\t\tabbreviatedCrossReference.substring(dotIndex + 1) };\n\t\tGrammar grammar = getGrammar(castedContext);\n\t\tif (grammar == null) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tEReference reference = getReference(classReferencePair[0], classReferencePair[1], grammar);\n\t\tif (reference == null) {\n\t\t\tlog.debug(\"CrossReference to class '\" + classReferencePair[0] + \"' and reference '\" + classReferencePair[1] //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\t\t+ \"' could not be resolved.\"); //$NON-NLS-1$\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tIScope scope = castedContext.getScopeProvider().getScope(\n\t\t\t\tcastedContext.getContentAssistContext().getCurrentModel(), reference);\n\t\tIterable<IEObjectDescription> linkingCandidates = queryScope(scope);\n\n\t\tList<String> names = new ArrayList<String>();\n\t\tfor (IEObjectDescription eObjectDescription : linkingCandidates) {\n\t\t\tnames.add(qualifiedNameConverter.toString(eObjectDescription.getName()));\n\t\t}\n\t\treturn names;\n\t}","commit_id":"efedf8e0428661d5b3511f106de0c9a8ee9e0fbc","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic List<String> resolveValues(TemplateVariable variable,\n\t\t\tXtextTemplateContext castedContext) {\n\t\tString enumerationName = (String) variable.getVariableType()\n\t\t\t\t.getParams().iterator().next();\n\t\tEEnum enumeration = (EEnum) getEClassifierForGrammar(enumerationName,\n\t\t\t\tgetGrammar(castedContext));\n\t\tif (enumeration == null) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\treturn Lists.transform(enumeration.getELiterals(), new Function<EEnumLiteral, String>() {\n\t\t\tpublic String apply(EEnumLiteral enumLiteral) {\n\t\t\t\treturn enumLiteral.getLiteral();\n\t\t\t}\n\t\t});\n\t}","id":105914,"modified_method":"@Override\n\tpublic List<String> resolveValues(TemplateVariable variable,\n\t\t\tXtextTemplateContext castedContext) {\n\t\tString enumerationName = (String) variable.getVariableType()\n\t\t\t\t.getParams().iterator().next();\n\t\tGrammar grammar = getGrammar(castedContext);\n\t\tif (grammar == null)\n\t\t\treturn Collections.emptyList();\n\t\tEEnum enumeration = (EEnum) getEClassifierForGrammar(enumerationName, grammar);\n\t\tif (enumeration == null) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\treturn Lists.transform(enumeration.getELiterals(), new Function<EEnumLiteral, String>() {\n\t\t\tpublic String apply(EEnumLiteral enumLiteral) {\n\t\t\t\treturn enumLiteral.getLiteral();\n\t\t\t}\n\t\t});\n\t}","commit_id":"efedf8e0428661d5b3511f106de0c9a8ee9e0fbc","url":"https://github.com/eclipse/xtext"},{"original_method":"protected Grammar getGrammar(XtextTemplateContext xtextTemplateContext) {\n\t\tEObject grammarElement = xtextTemplateContext.getContentAssistContext()\n\t\t\t\t.getRootNode().getGrammarElement();\n\t\treturn (Grammar) EcoreUtil.getRootContainer(grammarElement);\n\t}","id":105915,"modified_method":"protected Grammar getGrammar(XtextTemplateContext xtextTemplateContext) {\n\t\tEObject grammarElement = xtextTemplateContext.getContentAssistContext()\n\t\t\t\t.getRootNode().getGrammarElement();\n\t\tif (grammarElement == null && grammarAccess != null)\n\t\t\treturn grammarAccess.getGrammar();\n\t\treturn (Grammar) EcoreUtil.getRootContainer(grammarElement);\n\t}","commit_id":"44b43ae05d52776867dbbb285935866fb9c8e3ba","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic List<String> resolveValues(TemplateVariable variable, XtextTemplateContext castedContext) {\n\t\tString abbreviatedCrossReference = (String) variable.getVariableType().getParams().iterator().next();\n\t\tint dotIndex = abbreviatedCrossReference.lastIndexOf('.');\n\t\tif (dotIndex <= 0) {\n\t\t\tlog.error(\"CrossReference '\" + abbreviatedCrossReference + \"' could not be resolved.\"); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tString[] classReferencePair = new String[] { abbreviatedCrossReference.substring(0, dotIndex),\n\t\t\t\tabbreviatedCrossReference.substring(dotIndex + 1) };\n\t\tEReference reference = getReference(classReferencePair[0], classReferencePair[1], getGrammar(castedContext));\n\t\tif (reference == null) {\n\t\t\tlog.error(\"CrossReference to class '\" + classReferencePair[0] + \"' and reference '\" + classReferencePair[1] //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\t\t+ \"' could not be resolved.\"); //$NON-NLS-1$\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tIScope scope = castedContext.getScopeProvider().getScope(\n\t\t\t\tcastedContext.getContentAssistContext().getCurrentModel(), reference);\n\t\tIterable<IEObjectDescription> linkingCandidates = queryScope(scope);\n\n\t\tList<String> names = new ArrayList<String>();\n\t\tfor (IEObjectDescription eObjectDescription : linkingCandidates) {\n\t\t\tnames.add(qualifiedNameConverter.toString(eObjectDescription.getName()));\n\t\t}\n\t\treturn names;\n\t}","id":105916,"modified_method":"@Override\n\tpublic List<String> resolveValues(TemplateVariable variable, XtextTemplateContext castedContext) {\n\t\tString abbreviatedCrossReference = (String) variable.getVariableType().getParams().iterator().next();\n\t\tint dotIndex = abbreviatedCrossReference.lastIndexOf('.');\n\t\tif (dotIndex <= 0) {\n\t\t\tlog.error(\"CrossReference '\" + abbreviatedCrossReference + \"' could not be resolved.\"); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tString[] classReferencePair = new String[] { abbreviatedCrossReference.substring(0, dotIndex),\n\t\t\t\tabbreviatedCrossReference.substring(dotIndex + 1) };\n\t\tGrammar grammar = getGrammar(castedContext);\n\t\tif (grammar == null) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tEReference reference = getReference(classReferencePair[0], classReferencePair[1], grammar);\n\t\tif (reference == null) {\n\t\t\tlog.debug(\"CrossReference to class '\" + classReferencePair[0] + \"' and reference '\" + classReferencePair[1] //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\t\t\t+ \"' could not be resolved.\"); //$NON-NLS-1$\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\tIScope scope = castedContext.getScopeProvider().getScope(\n\t\t\t\tcastedContext.getContentAssistContext().getCurrentModel(), reference);\n\t\tIterable<IEObjectDescription> linkingCandidates = queryScope(scope);\n\n\t\tList<String> names = new ArrayList<String>();\n\t\tfor (IEObjectDescription eObjectDescription : linkingCandidates) {\n\t\t\tnames.add(qualifiedNameConverter.toString(eObjectDescription.getName()));\n\t\t}\n\t\treturn names;\n\t}","commit_id":"44b43ae05d52776867dbbb285935866fb9c8e3ba","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic List<String> resolveValues(TemplateVariable variable,\n\t\t\tXtextTemplateContext castedContext) {\n\t\tString enumerationName = (String) variable.getVariableType()\n\t\t\t\t.getParams().iterator().next();\n\t\tEEnum enumeration = (EEnum) getEClassifierForGrammar(enumerationName,\n\t\t\t\tgetGrammar(castedContext));\n\t\tif (enumeration == null) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\treturn Lists.transform(enumeration.getELiterals(), new Function<EEnumLiteral, String>() {\n\t\t\tpublic String apply(EEnumLiteral enumLiteral) {\n\t\t\t\treturn enumLiteral.getLiteral();\n\t\t\t}\n\t\t});\n\t}","id":105917,"modified_method":"@Override\n\tpublic List<String> resolveValues(TemplateVariable variable,\n\t\t\tXtextTemplateContext castedContext) {\n\t\tString enumerationName = (String) variable.getVariableType()\n\t\t\t\t.getParams().iterator().next();\n\t\tGrammar grammar = getGrammar(castedContext);\n\t\tif (grammar == null)\n\t\t\treturn Collections.emptyList();\n\t\tEEnum enumeration = (EEnum) getEClassifierForGrammar(enumerationName, grammar);\n\t\tif (enumeration == null) {\n\t\t\treturn Collections.emptyList();\n\t\t}\n\t\treturn Lists.transform(enumeration.getELiterals(), new Function<EEnumLiteral, String>() {\n\t\t\tpublic String apply(EEnumLiteral enumLiteral) {\n\t\t\t\treturn enumLiteral.getLiteral();\n\t\t\t}\n\t\t});\n\t}","commit_id":"44b43ae05d52776867dbbb285935866fb9c8e3ba","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the chgrp template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The chgrp template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n\n        // the template to be displayed\n        String template = null;\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n        String newgroup = (String)parameters.get(C_PARA_NEWGROUP);\n        String filename = (String)parameters.get(C_PARA_FILE);\n        String flags = (String)parameters.get(C_PARA_FLAGS);\n        if(flags == null) {\n            flags = \"false\";\n        }\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n\n        //check if the lock parameter was included in the request\n        // if not, the lock page is shown for the first time\n        filename = (String)session.getValue(C_PARA_FILE);\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n\n        // select the template to be displayed\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n\n        // a new owner was given in the request so try to change it\n        if(newgroup != null) {\n\n            // check if the current user has the right to change the group of the\n            // resource. Only the owner of a file and the admin are allowed to do this.\n            if((cms.getRequestContext().currentUser().equals(cms.readOwner(file)))\n                    || (cms.userInGroup(cms.getRequestContext().currentUser().getName(),\n                    C_GROUP_ADMIN))) {\n\n                boolean rekursive = false;\n                // if the resource is a folder, check if there is a corresponding\n                if(file.isFolder() && flags.equals(\"true\")) {\n                    rekursive = true;\n                }\n                cms.chgrp(file.getAbsolutePath(), newgroup,rekursive);\n\n                session.removeValue(C_PARA_FILE);\n\n                // return to filelist\n                try {\n                    if(lasturl == null || \"\".equals(lasturl)) {\n                        cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                                + C_WP_EXPLORER_FILELIST);\n                    }\n                    else {\n                        cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                    }\n                }\n                catch(Exception e) {\n                    throw new CmsException(\"Redirect fails :\" + getConfigFile(cms).getWorkplaceActionPath()\n                            + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                }\n                return null;\n            }\n            else {\n\n                // the current user is not allowed to change the file owner\n                xmlTemplateDocument.setData(\"details\", \"the current user is not allowed to change the file owner\");\n                template = \"error\";\n                session.removeValue(C_PARA_FILE);\n            }\n        }\n\n        // set the required datablocks\n        String title = cms.readProperty(file.getAbsolutePath(),\n                C_PROPERTY_TITLE);\n        if(title == null) {\n            title = \"\";\n        }\n        CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n        CmsUser owner = cms.readOwner(file);\n        xmlTemplateDocument.setData(\"TITLE\", title);\n        xmlTemplateDocument.setData(\"STATE\", getState(cms, file, lang));\n        xmlTemplateDocument.setData(\"OWNER\", Utils.getFullName(owner));\n        xmlTemplateDocument.setData(\"GROUP\", cms.readGroup(file).getName());\n        xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","id":105918,"modified_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the chgrp template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The chgrp template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n\n        // the template to be displayed\n        String template = null;\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n        String newgroup = (String)parameters.get(C_PARA_NEWGROUP);\n        String filename = (String)parameters.get(C_PARA_FILE);\n        String flags = (String)parameters.get(C_PARA_FLAGS);\n        if(flags == null) {\n            flags = \"false\";\n        }\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n\n        //check if the lock parameter was included in the request\n        // if not, the lock page is shown for the first time\n        filename = (String)session.getValue(C_PARA_FILE);\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n\n        // select the template to be displayed\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n\n        // a new owner was given in the request so try to change it\n        if(newgroup != null) {\n\n            // check if the current user has the right to change the group of the\n            // resource. Only the owner of a file and the admin are allowed to do this.\n            if((cms.getRequestContext().currentUser().equals(cms.readOwner(file)))\n                    || (cms.userInGroup(cms.getRequestContext().currentUser().getName(),\n                    C_GROUP_ADMIN))) {\n\n                boolean rekursive = false;\n                // if the resource is a folder, check if there is a corresponding\n                if(file.isFolder() && flags.equals(\"true\")) {\n                    rekursive = true;\n                }\n                cms.chgrp(file.getAbsolutePath(), newgroup,rekursive);\n\n                session.removeValue(C_PARA_FILE);\n\n                // return to filelist\n                try {\n                    if(lasturl == null || \"\".equals(lasturl)) {\n                        cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                                + C_WP_EXPLORER_FILELIST);\n                    }\n                    else {\n                        cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                    }\n                }\n                catch(Exception e) {\n                    throw new CmsException(\"Redirect fails :\" + getConfigFile(cms).getWorkplaceActionPath()\n                            + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                }\n                return null;\n            }\n            else {\n\n                // the current user is not allowed to change the file owner\n                xmlTemplateDocument.setData(\"details\", \"the current user is not allowed to change the file owner\");\n                xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                template = \"error\";\n                session.removeValue(C_PARA_FILE);\n            }\n        }\n\n        // set the required datablocks\n        String title = cms.readProperty(file.getAbsolutePath(),\n                C_PROPERTY_TITLE);\n        if(title == null) {\n            title = \"\";\n        }\n        CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n        CmsUser owner = cms.readOwner(file);\n        xmlTemplateDocument.setData(\"TITLE\", title);\n        xmlTemplateDocument.setData(\"STATE\", getState(cms, file, lang));\n        xmlTemplateDocument.setData(\"OWNER\", Utils.getFullName(owner));\n        xmlTemplateDocument.setData(\"GROUP\", cms.readGroup(file).getName());\n        xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","commit_id":"912d36f63a436e922d8fcba1a728ba3477adcf80","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the chmod template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The chmod template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms,\n                templateFile);\n        String newaccess = (String)parameters.get(C_PARA_NEWACCESS);\n\n        // get the filename\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n        filename = (String)session.getValue(C_PARA_FILE);\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n\n        // get all access flags from the request\n        String ur = (String)parameters.get(\"ur\");\n        String uw = (String)parameters.get(\"uw\");\n        String uv = (String)parameters.get(\"uv\");\n        String gr = (String)parameters.get(\"gr\");\n        String gw = (String)parameters.get(\"gw\");\n        String gv = (String)parameters.get(\"gv\");\n        String pr = (String)parameters.get(\"pr\");\n        String pw = (String)parameters.get(\"pw\");\n        String pv = (String)parameters.get(\"pv\");\n        String ir = (String)parameters.get(\"ir\");\n        String allflag = (String)parameters.get(C_PARA_FLAGS);\n        if(allflag == null) {\n            allflag = \"false\";\n        }\n\n        // select the template to be displayed\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n\n        // check if the newaccess parameter is available. This parameter is set when\n\n        // the access flags are modified.\n        if(newaccess != null) {\n\n            // check if the current user has the right to change the group of the\n            // resource. Only the owner of a file and the admin are allowed to do this.\n            if((cms.getRequestContext().currentUser().equals(cms.readOwner(file)))\n                    || (cms.userInGroup(cms.getRequestContext().currentUser().getName(),\n                    C_GROUP_ADMIN))) {\n\n                // calculate the new access flags\n                int flag = 0;\n                if(ur != null) {\n                    if(ur.equals(\"true\")) {\n                        flag += C_ACCESS_OWNER_READ;\n                    }\n                }\n                if(uw != null) {\n                    if(uw.equals(\"true\")) {\n                        flag += C_ACCESS_OWNER_WRITE;\n                    }\n                }\n                if(uv != null) {\n                    if(uv.equals(\"true\")) {\n                        flag += C_ACCESS_OWNER_VISIBLE;\n                    }\n                }\n                if(gr != null) {\n                    if(gr.equals(\"true\")) {\n                        flag += C_ACCESS_GROUP_READ;\n                    }\n                }\n                if(gw != null) {\n                    if(gw.equals(\"true\")) {\n                        flag += C_ACCESS_GROUP_WRITE;\n                    }\n                }\n                if(gv != null) {\n                    if(gv.equals(\"true\")) {\n                        flag += C_ACCESS_GROUP_VISIBLE;\n                    }\n                }\n                if(pr != null) {\n                    if(pr.equals(\"true\")) {\n                        flag += C_ACCESS_PUBLIC_READ;\n                    }\n                }\n                if(pw != null) {\n                    if(pw.equals(\"true\")) {\n                        flag += C_ACCESS_PUBLIC_WRITE;\n                    }\n                }\n                if(pv != null) {\n                    if(pv.equals(\"true\")) {\n                        flag += C_ACCESS_PUBLIC_VISIBLE;\n                    }\n                }\n                if(ir != null) {\n                    if(ir.equals(\"true\")) {\n                        flag += C_ACCESS_INTERNAL_READ;\n                    }\n                }\n\n                // modify the access flags\n                boolean rekursive = false;\n                if(file.isFolder() && allflag.equals(\"true\")) {\n                    rekursive = true;\n                }\n                cms.chmod(file.getAbsolutePath(), flag, rekursive);\n\n                session.removeValue(C_PARA_FILE);\n\n                // return to filelist\n                try {\n                    if(lasturl == null || \"\".equals(lasturl)) {\n                        cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath() + C_WP_EXPLORER_FILELIST);\n                    }\n                    else {\n                        cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                    }\n                }\n                catch(Exception e) {\n                    throw new CmsException(\"Redirect fails :\"\n                            + getConfigFile(cms).getWorkplaceActionPath()\n                            + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                }\n                return null;\n            }else {\n\n                // the current user is not allowed to change the file owner\n                xmlTemplateDocument.setData(\"details\",\n                        \"the current user is not allowed to change the file owner\");\n                template = \"error\";\n                session.removeValue(C_PARA_FILE);\n            }\n        }\n\n        // set all required datablocks\n        // set the required datablocks\n        String title = cms.readProperty(file.getAbsolutePath(), C_PROPERTY_TITLE);\n        if(title == null) {\n            title = \"\";\n        }\n        CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n        CmsUser owner = cms.readOwner(file);\n        xmlTemplateDocument.setData(\"TITLE\", title);\n        xmlTemplateDocument.setData(\"STATE\", getState(cms, file, lang));\n        xmlTemplateDocument.setData(\"OWNER\", Utils.getFullName(owner));\n        xmlTemplateDocument.setData(\"GROUP\", cms.readGroup(file).getName());\n        xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n\n        // now set the actual access flags i the dialog\n        int flags = file.getAccessFlags();\n        if((flags & C_ACCESS_OWNER_READ) > 0) {\n            xmlTemplateDocument.setData(\"CHECKUR\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKUR\", \" \");\n        }\n        if((flags & C_ACCESS_OWNER_WRITE) > 0) {\n            xmlTemplateDocument.setData(\"CHECKUW\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKUW\", \" \");\n        }\n        if((flags & C_ACCESS_OWNER_VISIBLE) > 0) {\n            xmlTemplateDocument.setData(\"CHECKUV\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKUV\", \" \");\n        }\n        if((flags & C_ACCESS_GROUP_READ) > 0) {\n            xmlTemplateDocument.setData(\"CHECKGR\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKGR\", \" \");\n        }\n        if((flags & C_ACCESS_GROUP_WRITE) > 0) {\n            xmlTemplateDocument.setData(\"CHECKGW\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKGW\", \" \");\n        }\n        if((flags & C_ACCESS_GROUP_VISIBLE) > 0) {\n            xmlTemplateDocument.setData(\"CHECKGV\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKGV\", \" \");\n        }\n        if((flags & C_ACCESS_PUBLIC_READ) > 0) {\n            xmlTemplateDocument.setData(\"CHECKPR\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKPR\", \" \");\n        }\n        if((flags & C_ACCESS_PUBLIC_WRITE) > 0) {\n            xmlTemplateDocument.setData(\"CHECKPW\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKPW\", \" \");\n        }\n        if((flags & C_ACCESS_PUBLIC_VISIBLE) > 0) {\n            xmlTemplateDocument.setData(\"CHECKPV\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKPV\", \" \");\n        }\n        if((flags & C_ACCESS_INTERNAL_READ) > 0) {\n            xmlTemplateDocument.setData(\"CHECKIF\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKIF\", \" \");\n        }\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","id":105919,"modified_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the chmod template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The chmod template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms,\n                templateFile);\n        String newaccess = (String)parameters.get(C_PARA_NEWACCESS);\n\n        // get the filename\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n        filename = (String)session.getValue(C_PARA_FILE);\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n\n        // get all access flags from the request\n        String ur = (String)parameters.get(\"ur\");\n        String uw = (String)parameters.get(\"uw\");\n        String uv = (String)parameters.get(\"uv\");\n        String gr = (String)parameters.get(\"gr\");\n        String gw = (String)parameters.get(\"gw\");\n        String gv = (String)parameters.get(\"gv\");\n        String pr = (String)parameters.get(\"pr\");\n        String pw = (String)parameters.get(\"pw\");\n        String pv = (String)parameters.get(\"pv\");\n        String ir = (String)parameters.get(\"ir\");\n        String allflag = (String)parameters.get(C_PARA_FLAGS);\n        if(allflag == null) {\n            allflag = \"false\";\n        }\n\n        // select the template to be displayed\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n\n        // check if the newaccess parameter is available. This parameter is set when\n\n        // the access flags are modified.\n        if(newaccess != null) {\n\n            // check if the current user has the right to change the group of the\n            // resource. Only the owner of a file and the admin are allowed to do this.\n            if((cms.getRequestContext().currentUser().equals(cms.readOwner(file)))\n                    || (cms.userInGroup(cms.getRequestContext().currentUser().getName(),\n                    C_GROUP_ADMIN))) {\n\n                // calculate the new access flags\n                int flag = 0;\n                if(ur != null) {\n                    if(ur.equals(\"true\")) {\n                        flag += C_ACCESS_OWNER_READ;\n                    }\n                }\n                if(uw != null) {\n                    if(uw.equals(\"true\")) {\n                        flag += C_ACCESS_OWNER_WRITE;\n                    }\n                }\n                if(uv != null) {\n                    if(uv.equals(\"true\")) {\n                        flag += C_ACCESS_OWNER_VISIBLE;\n                    }\n                }\n                if(gr != null) {\n                    if(gr.equals(\"true\")) {\n                        flag += C_ACCESS_GROUP_READ;\n                    }\n                }\n                if(gw != null) {\n                    if(gw.equals(\"true\")) {\n                        flag += C_ACCESS_GROUP_WRITE;\n                    }\n                }\n                if(gv != null) {\n                    if(gv.equals(\"true\")) {\n                        flag += C_ACCESS_GROUP_VISIBLE;\n                    }\n                }\n                if(pr != null) {\n                    if(pr.equals(\"true\")) {\n                        flag += C_ACCESS_PUBLIC_READ;\n                    }\n                }\n                if(pw != null) {\n                    if(pw.equals(\"true\")) {\n                        flag += C_ACCESS_PUBLIC_WRITE;\n                    }\n                }\n                if(pv != null) {\n                    if(pv.equals(\"true\")) {\n                        flag += C_ACCESS_PUBLIC_VISIBLE;\n                    }\n                }\n                if(ir != null) {\n                    if(ir.equals(\"true\")) {\n                        flag += C_ACCESS_INTERNAL_READ;\n                    }\n                }\n\n                // modify the access flags\n                boolean rekursive = false;\n                if(file.isFolder() && allflag.equals(\"true\")) {\n                    rekursive = true;\n                }\n                cms.chmod(file.getAbsolutePath(), flag, rekursive);\n\n                session.removeValue(C_PARA_FILE);\n\n                // return to filelist\n                try {\n                    if(lasturl == null || \"\".equals(lasturl)) {\n                        cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath() + C_WP_EXPLORER_FILELIST);\n                    }\n                    else {\n                        cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                    }\n                }\n                catch(Exception e) {\n                    throw new CmsException(\"Redirect fails :\"\n                            + getConfigFile(cms).getWorkplaceActionPath()\n                            + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                }\n                return null;\n            }else {\n\n                // the current user is not allowed to change the file owner\n                xmlTemplateDocument.setData(\"details\",\n                        \"the current user is not allowed to change the file owner\");\n                xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                template = \"error\";\n                session.removeValue(C_PARA_FILE);\n            }\n        }\n\n        // set all required datablocks\n        // set the required datablocks\n        String title = cms.readProperty(file.getAbsolutePath(), C_PROPERTY_TITLE);\n        if(title == null) {\n            title = \"\";\n        }\n        CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n        CmsUser owner = cms.readOwner(file);\n        xmlTemplateDocument.setData(\"TITLE\", title);\n        xmlTemplateDocument.setData(\"STATE\", getState(cms, file, lang));\n        xmlTemplateDocument.setData(\"OWNER\", Utils.getFullName(owner));\n        xmlTemplateDocument.setData(\"GROUP\", cms.readGroup(file).getName());\n        xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n\n        // now set the actual access flags i the dialog\n        int flags = file.getAccessFlags();\n        if((flags & C_ACCESS_OWNER_READ) > 0) {\n            xmlTemplateDocument.setData(\"CHECKUR\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKUR\", \" \");\n        }\n        if((flags & C_ACCESS_OWNER_WRITE) > 0) {\n            xmlTemplateDocument.setData(\"CHECKUW\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKUW\", \" \");\n        }\n        if((flags & C_ACCESS_OWNER_VISIBLE) > 0) {\n            xmlTemplateDocument.setData(\"CHECKUV\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKUV\", \" \");\n        }\n        if((flags & C_ACCESS_GROUP_READ) > 0) {\n            xmlTemplateDocument.setData(\"CHECKGR\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKGR\", \" \");\n        }\n        if((flags & C_ACCESS_GROUP_WRITE) > 0) {\n            xmlTemplateDocument.setData(\"CHECKGW\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKGW\", \" \");\n        }\n        if((flags & C_ACCESS_GROUP_VISIBLE) > 0) {\n            xmlTemplateDocument.setData(\"CHECKGV\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKGV\", \" \");\n        }\n        if((flags & C_ACCESS_PUBLIC_READ) > 0) {\n            xmlTemplateDocument.setData(\"CHECKPR\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKPR\", \" \");\n        }\n        if((flags & C_ACCESS_PUBLIC_WRITE) > 0) {\n            xmlTemplateDocument.setData(\"CHECKPW\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKPW\", \" \");\n        }\n        if((flags & C_ACCESS_PUBLIC_VISIBLE) > 0) {\n            xmlTemplateDocument.setData(\"CHECKPV\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKPV\", \" \");\n        }\n        if((flags & C_ACCESS_INTERNAL_READ) > 0) {\n            xmlTemplateDocument.setData(\"CHECKIF\", \"CHECKED\");\n        }\n        else {\n            xmlTemplateDocument.setData(\"CHECKIF\", \" \");\n        }\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","commit_id":"912d36f63a436e922d8fcba1a728ba3477adcf80","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the chown template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The chown template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n\n        // the template to be displayed\n        String template = null;\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms,\n                templateFile);\n        String newowner = (String)parameters.get(C_PARA_NEWOWNER);\n        String filename = (String)parameters.get(C_PARA_FILE);\n        String flags = (String)parameters.get(C_PARA_FLAGS);\n        if(flags == null) {\n            flags = \"false\";\n        }\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n\n        //check if the lock parameter was included in the request\n\n        // if not, the lock page is shown for the first time\n        filename = (String)session.getValue(C_PARA_FILE);\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n\n        // select the template to be displayed\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n\n        // a new owner was given in the request so try to change it\n        if(newowner != null) {\n\n            // check if the current user has the right to change the owner of the\n\n            // resource. Only the owner of a file and the admin are allowed to do this.\n            if((cms.getRequestContext().currentUser().equals(cms.readOwner(file)))\n                    || (cms.userInGroup(cms.getRequestContext().currentUser().getName(), C_GROUP_ADMIN))) {\n\n                boolean rekursive = false;\n                // if the resource is a folder, check if there is a corresponding\n                if(file.isFolder() && flags.equals(\"true\")) {\n                    rekursive = true;\n                }\n                cms.chown(file.getAbsolutePath(), newowner, rekursive);\n                session.removeValue(C_PARA_FILE);\n\n                // return to filelist\n                try {\n                    if(lasturl == null || \"\".equals(lasturl)) {\n                        cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                                + C_WP_EXPLORER_FILELIST);\n                    }\n                    else {\n                        cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                    }\n                }\n                catch(Exception e) {\n                    throw new CmsException(\"Redirect fails :\" + getConfigFile(cms).getWorkplaceActionPath()\n                            + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                }\n                return null;\n            }\n            else {\n\n                // the current user is not allowed to change the file owner\n                xmlTemplateDocument.setData(\"details\", \"the current user is not allowed to change the file owner\");\n                template = \"error\";\n                session.removeValue(C_PARA_FILE);\n            }\n        }\n\n        // set the required datablocks\n        String title = cms.readProperty(file.getAbsolutePath(),\n                C_PROPERTY_TITLE);\n        if(title == null) {\n            title = \"\";\n        }\n        CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n        CmsUser owner = cms.readOwner(file);\n        xmlTemplateDocument.setData(\"TITLE\", title);\n        xmlTemplateDocument.setData(\"STATE\", getState(cms, file, lang));\n        xmlTemplateDocument.setData(\"OWNER\", Utils.getFullName(owner));\n        xmlTemplateDocument.setData(\"GROUP\", cms.readGroup(file).getName());\n        xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","id":105920,"modified_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the chown template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The chown template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n\n        // the template to be displayed\n        String template = null;\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms,\n                templateFile);\n        String newowner = (String)parameters.get(C_PARA_NEWOWNER);\n        String filename = (String)parameters.get(C_PARA_FILE);\n        String flags = (String)parameters.get(C_PARA_FLAGS);\n        if(flags == null) {\n            flags = \"false\";\n        }\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n\n        //check if the lock parameter was included in the request\n\n        // if not, the lock page is shown for the first time\n        filename = (String)session.getValue(C_PARA_FILE);\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n\n        // select the template to be displayed\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n\n        // a new owner was given in the request so try to change it\n        if(newowner != null) {\n\n            // check if the current user has the right to change the owner of the\n\n            // resource. Only the owner of a file and the admin are allowed to do this.\n            if((cms.getRequestContext().currentUser().equals(cms.readOwner(file)))\n                    || (cms.userInGroup(cms.getRequestContext().currentUser().getName(), C_GROUP_ADMIN))) {\n\n                boolean rekursive = false;\n                // if the resource is a folder, check if there is a corresponding\n                if(file.isFolder() && flags.equals(\"true\")) {\n                    rekursive = true;\n                }\n                cms.chown(file.getAbsolutePath(), newowner, rekursive);\n                session.removeValue(C_PARA_FILE);\n\n                // return to filelist\n                try {\n                    if(lasturl == null || \"\".equals(lasturl)) {\n                        cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                                + C_WP_EXPLORER_FILELIST);\n                    }\n                    else {\n                        cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                    }\n                }\n                catch(Exception e) {\n                    throw new CmsException(\"Redirect fails :\" + getConfigFile(cms).getWorkplaceActionPath()\n                            + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                }\n                return null;\n            }\n            else {\n\n                // the current user is not allowed to change the file owner\n                xmlTemplateDocument.setData(\"details\", \"the current user is not allowed to change the file owner\");\n                xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                template = \"error\";\n                session.removeValue(C_PARA_FILE);\n            }\n        }\n\n        // set the required datablocks\n        String title = cms.readProperty(file.getAbsolutePath(),\n                C_PROPERTY_TITLE);\n        if(title == null) {\n            title = \"\";\n        }\n        CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n        CmsUser owner = cms.readOwner(file);\n        xmlTemplateDocument.setData(\"TITLE\", title);\n        xmlTemplateDocument.setData(\"STATE\", getState(cms, file, lang));\n        xmlTemplateDocument.setData(\"OWNER\", Utils.getFullName(owner));\n        xmlTemplateDocument.setData(\"GROUP\", cms.readGroup(file).getName());\n        xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","commit_id":"912d36f63a436e922d8fcba1a728ba3477adcf80","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the copy template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The copy template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n        CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(C_PARA_NEWFILE);\n            session.removeValue(C_PARA_NEWFOLDER);\n            session.removeValue(C_PARA_FLAGS);\n            session.removeValue(C_PARA_NAME);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n\n        // get the file to be copied\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n        filename = (String)session.getValue(C_PARA_FILE);\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n\n        // read all request parameters\n        String newFolder = new String();\n        String newFile = new String();\n        String wholePath = (String)parameters.get(C_PARA_NEWFOLDER);\n        // the wholePath includes the folder and/or the filename\n        if(wholePath != null && !(\"\".equals(wholePath))){\n            if(wholePath.startsWith(\"/\")){\n                // get the foldername\n                newFolder = wholePath.substring(0, wholePath.lastIndexOf(\"/\")+1);\n                newFile = wholePath.substring(wholePath.lastIndexOf(\"/\")+1);\n                if (newFile == null || \"\".equals(newFile)){\n                    newFile = file.getName();\n                }\n            } else {\n                newFolder = file.getParent();\n                newFile = wholePath;\n            }\n        }\n\n        if(newFile != null && !(\"\".equals(newFile))) {\n            session.putValue(C_PARA_NEWFILE, newFile);\n        }\n        newFile = (String)session.getValue(C_PARA_NEWFILE);\n        if(newFolder != null && !(\"\".equals(newFolder))) {\n            session.putValue(C_PARA_NEWFOLDER, newFolder);\n        }\n        newFolder = (String)session.getValue(C_PARA_NEWFOLDER);\n\n        String flags = (String)parameters.get(C_PARA_FLAGS);\n        if(flags != null) {\n            session.putValue(C_PARA_FLAGS, flags);\n        }\n        flags = (String)session.getValue(C_PARA_FLAGS);\n        String action = (String)parameters.get(\"action\");\n\n        // select the template to be displayed\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n\n        // modify the folderaname if nescessary (the root folder is always given\n        // as a nice name)\n        if(newFolder != null && !(\"\".equals(newFolder))) {\n            if(newFolder.equals(lang.getLanguageValue(\"title.rootfolder\"))) {\n                newFolder = \"/\";\n            }\n        }\n\n        //check if the newfile parameter was included in the request\n        // if not, the copy page is shown for the first time\n        if(newFile == null || \"\".equals(newFile)) {\n            session.putValue(C_PARA_NAME, file.getName());\n        }\n        else {\n            if(action == null) {\n                template = \"wait\";\n            }\n            else {\n\n                try {\n                    cms.copyResource(file.getAbsolutePath(), newFolder +newFile, !flags.equals(\"false\"));\n                }\n                catch(CmsException ex) {\n                    // something went wrong, so remove all session parameters\n                    session.removeValue(C_PARA_FILE);\n                    session.removeValue(C_PARA_NAME);\n                    session.removeValue(C_PARA_NEWFILE);\n                    session.removeValue(C_PARA_NEWFOLDER);\n                    session.removeValue(C_PARA_FLAGS);\n\n                    template = \"error\";\n                    xmlTemplateDocument.setData(\"details\", ex.getStackTrace());\n                    return startProcessing(cms, xmlTemplateDocument, \"\", parameters,\n                            template);\n                }\n\n                // everything is done, so remove all session parameters\n                session.removeValue(C_PARA_FILE);\n                session.removeValue(C_PARA_NAME);\n                session.removeValue(C_PARA_NEWFILE);\n                session.removeValue(C_PARA_NEWFOLDER);\n                session.removeValue(C_PARA_FLAGS);\n\n                // TODO: Error handling\n                // now return to filelist\n                try {\n                    if(lasturl == null || \"\".equals(lasturl)) {\n                        cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                                + C_WP_EXPLORER_FILELIST);\n                    }\n                    else {\n                        cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                    }\n                }\n                catch(Exception e) {\n                    throw new CmsException(\"Redirect fails :\"\n                            + getConfigFile(cms).getWorkplaceActionPath()\n                            + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                }\n                return null;\n            }\n        }\n\n        // set the required datablocks\n        String title = cms.readProperty(file.getAbsolutePath(), C_PROPERTY_TITLE);\n        if(title == null) {\n            title = \"\";\n        }\n        CmsUser owner = cms.readOwner(file);\n        xmlTemplateDocument.setData(\"TITLE\", title);\n        xmlTemplateDocument.setData(\"STATE\", getState(cms, file, lang));\n        xmlTemplateDocument.setData(\"OWNER\", Utils.getFullName(owner));\n        xmlTemplateDocument.setData(\"GROUP\", cms.readGroup(file).getName());\n        xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","id":105921,"modified_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the copy template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The copy template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n        CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(C_PARA_NEWFILE);\n            session.removeValue(C_PARA_NEWFOLDER);\n            session.removeValue(C_PARA_FLAGS);\n            session.removeValue(C_PARA_NAME);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n\n        // get the file to be copied\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n        filename = (String)session.getValue(C_PARA_FILE);\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n\n        // read all request parameters\n        String newFolder = new String();\n        String newFile = new String();\n        String wholePath = (String)parameters.get(C_PARA_NEWFOLDER);\n        // the wholePath includes the folder and/or the filename\n        if(wholePath != null && !(\"\".equals(wholePath))){\n            if(wholePath.startsWith(\"/\")){\n                // get the foldername\n                newFolder = wholePath.substring(0, wholePath.lastIndexOf(\"/\")+1);\n                newFile = wholePath.substring(wholePath.lastIndexOf(\"/\")+1);\n                if (newFile == null || \"\".equals(newFile)){\n                    newFile = file.getName();\n                }\n            } else {\n                newFolder = file.getParent();\n                newFile = wholePath;\n            }\n        }\n\n        if(newFile != null && !(\"\".equals(newFile))) {\n            session.putValue(C_PARA_NEWFILE, newFile);\n        }\n        newFile = (String)session.getValue(C_PARA_NEWFILE);\n        if(newFolder != null && !(\"\".equals(newFolder))) {\n            session.putValue(C_PARA_NEWFOLDER, newFolder);\n        }\n        newFolder = (String)session.getValue(C_PARA_NEWFOLDER);\n\n        String flags = (String)parameters.get(C_PARA_FLAGS);\n        if(flags != null) {\n            session.putValue(C_PARA_FLAGS, flags);\n        }\n        flags = (String)session.getValue(C_PARA_FLAGS);\n        String action = (String)parameters.get(\"action\");\n\n        // select the template to be displayed\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n\n        // modify the folderaname if nescessary (the root folder is always given\n        // as a nice name)\n        if(newFolder != null && !(\"\".equals(newFolder))) {\n            if(newFolder.equals(lang.getLanguageValue(\"title.rootfolder\"))) {\n                newFolder = \"/\";\n            }\n        }\n\n        //check if the newfile parameter was included in the request\n        // if not, the copy page is shown for the first time\n        if(newFile == null || \"\".equals(newFile)) {\n            session.putValue(C_PARA_NAME, file.getName());\n        }\n        else {\n            if(action == null) {\n                template = \"wait\";\n            }\n            else {\n\n                try {\n                    cms.copyResource(file.getAbsolutePath(), newFolder +newFile, !flags.equals(\"false\"));\n                }\n                catch(CmsException ex) {\n                    // something went wrong, so remove all session parameters\n                    session.removeValue(C_PARA_FILE);\n                    session.removeValue(C_PARA_NAME);\n                    session.removeValue(C_PARA_NEWFILE);\n                    session.removeValue(C_PARA_NEWFOLDER);\n                    session.removeValue(C_PARA_FLAGS);\n\n                    template = \"error\";\n                    xmlTemplateDocument.setData(\"details\", ex.getStackTrace());\n                    xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                    return startProcessing(cms, xmlTemplateDocument, \"\", parameters,\n                            template);\n                }\n\n                // everything is done, so remove all session parameters\n                session.removeValue(C_PARA_FILE);\n                session.removeValue(C_PARA_NAME);\n                session.removeValue(C_PARA_NEWFILE);\n                session.removeValue(C_PARA_NEWFOLDER);\n                session.removeValue(C_PARA_FLAGS);\n\n                // TODO: Error handling\n                // now return to filelist\n                try {\n                    if(lasturl == null || \"\".equals(lasturl)) {\n                        cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                                + C_WP_EXPLORER_FILELIST);\n                    }\n                    else {\n                        cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                    }\n                }\n                catch(Exception e) {\n                    throw new CmsException(\"Redirect fails :\"\n                            + getConfigFile(cms).getWorkplaceActionPath()\n                            + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                }\n                return null;\n            }\n        }\n\n        // set the required datablocks\n        String title = cms.readProperty(file.getAbsolutePath(), C_PROPERTY_TITLE);\n        if(title == null) {\n            title = \"\";\n        }\n        CmsUser owner = cms.readOwner(file);\n        xmlTemplateDocument.setData(\"TITLE\", title);\n        xmlTemplateDocument.setData(\"STATE\", getState(cms, file, lang));\n        xmlTemplateDocument.setData(\"OWNER\", Utils.getFullName(owner));\n        xmlTemplateDocument.setData(\"GROUP\", cms.readGroup(file).getName());\n        xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","commit_id":"912d36f63a436e922d8fcba1a728ba3477adcf80","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the delete template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The delete template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_DELETE);\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n        String delete = (String)parameters.get(C_PARA_DELETE);\n        if(delete != null) {\n            session.putValue(C_PARA_DELETE, delete);\n        }\n        delete = (String)session.getValue(C_PARA_DELETE);\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n        filename = (String)session.getValue(C_PARA_FILE);\n        String action = (String)parameters.get(\"action\");\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n\n        //check if the name parameter was included in the request\n        // if not, the delete page is shown for the first time\n        if(delete != null) {\n            if(action == null) {\n                template = \"wait\";\n            }\n            else {\n\n                // check if the resource is a file or a folder\n                if(file.isFile()) {\n\n                    // its a file, so delete it\n                    try{\n                        cms.deleteResource(file.getAbsolutePath());\n                        session.removeValue(C_PARA_DELETE);\n                        session.removeValue(C_PARA_FILE);\n                    }catch(CmsException e){\n                        session.removeValue(C_PARA_DELETE);\n                        session.removeValue(C_PARA_FILE);\n                        xmlTemplateDocument.setData(\"details\", Utils.getStackTrace(e));\n                        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, \"error\");\n                    }\n                    try {\n                        if(lasturl == null || \"\".equals(lasturl)) {\n                            cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                                    + C_WP_EXPLORER_FILELIST);\n                        }\n                        else {\n                            cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                        }\n                    }\n                    catch(Exception e) {\n                        throw new CmsException(\"Redirect fails :\" + getConfigFile(cms).getWorkplaceActionPath()\n                                + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                    }\n                    return null;\n                }\n                else {\n                    // its a folder\n                    cms.deleteResource(file.getAbsolutePath());\n\n                    session.removeValue(C_PARA_DELETE);\n                    session.removeValue(C_PARA_FILE);\n                    xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                    template = \"update\";\n                }\n            }\n\n        // TODO: Error handling\n        }\n\n        // set the required datablocks\n        if(action == null) {\n            String title = cms.readProperty(file.getAbsolutePath(), C_PROPERTY_TITLE);\n            if(title == null) {\n                title = \"\";\n            }\n            CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n            CmsUser owner = cms.readOwner(file);\n            xmlTemplateDocument.setData(\"TITLE\", title);\n            xmlTemplateDocument.setData(\"STATE\", getState(cms, file, lang));\n            xmlTemplateDocument.setData(\"OWNER\", Utils.getFullName(owner));\n            xmlTemplateDocument.setData(\"GROUP\", cms.readGroup(file).getName());\n            xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n        }\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","id":105922,"modified_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the delete template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The delete template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_DELETE);\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n        String delete = (String)parameters.get(C_PARA_DELETE);\n        if(delete != null) {\n            session.putValue(C_PARA_DELETE, delete);\n        }\n        delete = (String)session.getValue(C_PARA_DELETE);\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n        filename = (String)session.getValue(C_PARA_FILE);\n        String action = (String)parameters.get(\"action\");\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n\n        //check if the name parameter was included in the request\n        // if not, the delete page is shown for the first time\n        if(delete != null) {\n            if(action == null) {\n                template = \"wait\";\n            }\n            else {\n\n                // check if the resource is a file or a folder\n                if(file.isFile()) {\n\n                    // its a file, so delete it\n                    try{\n                        cms.deleteResource(file.getAbsolutePath());\n                        session.removeValue(C_PARA_DELETE);\n                        session.removeValue(C_PARA_FILE);\n                    }catch(CmsException e){\n                        session.removeValue(C_PARA_DELETE);\n                        session.removeValue(C_PARA_FILE);\n                        xmlTemplateDocument.setData(\"details\", Utils.getStackTrace(e));\n                        xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, \"error\");\n                    }\n                    try {\n                        if(lasturl == null || \"\".equals(lasturl)) {\n                            cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                                    + C_WP_EXPLORER_FILELIST);\n                        }\n                        else {\n                            cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                        }\n                    }\n                    catch(Exception e) {\n                        throw new CmsException(\"Redirect fails :\" + getConfigFile(cms).getWorkplaceActionPath()\n                                + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                    }\n                    return null;\n                }\n                else {\n                    // its a folder\n                    try{\n                        cms.deleteResource(file.getAbsolutePath());\n                    }catch(CmsException e){\n                        session.removeValue(C_PARA_DELETE);\n                        session.removeValue(C_PARA_FILE);\n                        xmlTemplateDocument.setData(\"details\", Utils.getStackTrace(e));\n                        xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, \"error\");\n                    }\n                    session.removeValue(C_PARA_DELETE);\n                    session.removeValue(C_PARA_FILE);\n                    xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                    template = \"update\";\n                }\n            }\n\n        // TODO: Error handling\n        }\n\n        // set the required datablocks\n        if(action == null) {\n            String title = cms.readProperty(file.getAbsolutePath(), C_PROPERTY_TITLE);\n            if(title == null) {\n                title = \"\";\n            }\n            CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n            CmsUser owner = cms.readOwner(file);\n            xmlTemplateDocument.setData(\"TITLE\", title);\n            xmlTemplateDocument.setData(\"STATE\", getState(cms, file, lang));\n            xmlTemplateDocument.setData(\"OWNER\", Utils.getFullName(owner));\n            xmlTemplateDocument.setData(\"GROUP\", cms.readGroup(file).getName());\n            xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n        }\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","commit_id":"912d36f63a436e922d8fcba1a728ba3477adcf80","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Handling of the <CODE>&lt;ERRORPAGEBOX&gt;<\/CODE> tags.\n     * <P>\n     * Reads the code of a error page box from the errors definition file\n     * and returns the processed code with the actual elements.\n     * <P>\n     * Error page boxes can be referenced in any workplace template by <br>\n     * // TODO: insert correct syntax here!\n     * <CODE>&lt;ERRORPAGEBOX name=\"...\" action=\"...\" alt=\"...\"/&gt;<\/CODE>\n     *\n     * @param cms CmsObject Object for accessing resources.\n     * @param n XML element containing the <code>&lt;ERRORPAGEBOX&gt;<\/code> tag.\n     * @param doc Reference to the A_CmsXmlContent object of the initiating XLM document.\n     * @param callingObject reference to the calling object.\n     * @param parameters Hashtable containing all user parameters.\n     * @param lang CmsXmlLanguageFile conataining the currently valid language file.\n     * @return Processed button.\n     * @exception CmsException\n     */\n\n    public Object handleSpecialWorkplaceTag(CmsObject cms, Element n, A_CmsXmlContent doc,\n            Object callingObject, Hashtable parameters, CmsXmlLanguageFile lang) throws CmsException {\n\n        // collect all required data\n        String errorTitle = n.getAttribute(C_ERROR_TITLE);\n        String errorMessage = n.getAttribute(C_ERROR_MESSAGE);\n        String errorReason = n.getAttribute(C_ERROR_REASON);\n        String errorSuggestion = n.getAttribute(C_ERROR_SUGGESTION);\n        String errorLink = n.getAttribute(C_ERROR_LINK);\n        String details = \"no details\";\n        if(n.hasChildNodes()) {\n            details = n.getFirstChild().getNodeValue();\n        }\n        String reason;\n        String button;\n        CmsXmlWpTemplateFile errordef = getErrorDefinitions(cms);\n        CmsXmlWpConfigFile confFile = new CmsXmlWpConfigFile(cms);\n\n        // get the data from the language file\n        errorTitle = lang.getLanguageValue(errorTitle);\n        errorMessage = lang.getLanguageValue(errorMessage);\n        errorReason = lang.getLanguageValue(errorReason);\n        errorSuggestion = lang.getLanguageValue(errorSuggestion);\n        reason = lang.getLanguageValue(\"message.reason\");\n        button = lang.getLanguageValue(\"button.ok\");\n        String servletPath = cms.getRequestContext().getRequest().getServletUrl();\n        errordef.setData(\"stylesheetpath\", cms.getRequestContext().getRequest().getServletUrl() + \"/system/workplace/css/\");\n        errordef.setData(\"jspath\", cms.getRequestContext().getRequest().getServletUrl() + \"/system/workplace/templates/js/\");\n        errordef.setData(C_ERROR_MSG_BUTTON, button);\n        errordef.setData(C_ERROR_TITLE, errorTitle);\n        errordef.setData(C_ERROR_MESSAGE, errorMessage);\n        errordef.setData(C_ERROR_REASON, errorReason);\n        errordef.setData(C_ERROR_SUGGESTION, errorSuggestion);\n        errordef.setData(C_ERROR_LINK, errorLink);\n        errordef.setData(C_ERROR_MSG_REASON, reason);\n        errordef.setData(C_ERROR_MSG_DETAILS, details);\n\n        // build errorpage\n        String result = errordef.getProcessedDataValue(C_TAG_ERRORPAGE, callingObject, null);\n        return result;\n    }","id":105923,"modified_method":"/**\n     * Handling of the <CODE>&lt;ERRORPAGEBOX&gt;<\/CODE> tags.\n     * <P>\n     * Reads the code of a error page box from the errors definition file\n     * and returns the processed code with the actual elements.\n     * <P>\n     * Error page boxes can be referenced in any workplace template by <br>\n     * // TODO: insert correct syntax here!\n     * <CODE>&lt;ERRORPAGEBOX name=\"...\" action=\"...\" alt=\"...\"/&gt;<\/CODE>\n     *\n     * @param cms CmsObject Object for accessing resources.\n     * @param n XML element containing the <code>&lt;ERRORPAGEBOX&gt;<\/code> tag.\n     * @param doc Reference to the A_CmsXmlContent object of the initiating XLM document.\n     * @param callingObject reference to the calling object.\n     * @param parameters Hashtable containing all user parameters.\n     * @param lang CmsXmlLanguageFile conataining the currently valid language file.\n     * @return Processed button.\n     * @exception CmsException\n     */\n\n    public Object handleSpecialWorkplaceTag(CmsObject cms, Element n, A_CmsXmlContent doc,\n            Object callingObject, Hashtable parameters, CmsXmlLanguageFile lang) throws CmsException {\n\n        // collect all required data\n        String errorTitle = n.getAttribute(C_ERROR_TITLE);\n        String errorMessage = n.getAttribute(C_ERROR_MESSAGE);\n        String errorReason = n.getAttribute(C_ERROR_REASON);\n        String errorSuggestion = n.getAttribute(C_ERROR_SUGGESTION);\n        String errorLink = n.getAttribute(C_ERROR_LINK);\n        String details = \"no details\";\n        if(n.hasChildNodes()) {\n            details = n.getFirstChild().getNodeValue();\n        }\n        // try to read the processed lasturl\n        NodeList nlist = n.getChildNodes();\n        if(nlist.getLength() > 1){\n            String theLasturl = nlist.item(1).getNodeValue();\n            // if the lasturl is given set the errorLink to lasturl\n            if(theLasturl != null && !\"\".equals(theLasturl.trim())){\n                errorLink = theLasturl;\n            }\n        }\n        String reason;\n        String button;\n        CmsXmlWpTemplateFile errordef = getErrorDefinitions(cms);\n        CmsXmlWpConfigFile confFile = new CmsXmlWpConfigFile(cms);\n\n        // get the data from the language file\n        errorTitle = lang.getLanguageValue(errorTitle);\n        errorMessage = lang.getLanguageValue(errorMessage);\n        errorReason = lang.getLanguageValue(errorReason);\n        errorSuggestion = lang.getLanguageValue(errorSuggestion);\n        reason = lang.getLanguageValue(\"message.reason\");\n        button = lang.getLanguageValue(\"button.ok\");\n        String servletPath = cms.getRequestContext().getRequest().getServletUrl();\n        errordef.setData(\"stylesheetpath\", cms.getRequestContext().getRequest().getServletUrl() + \"/system/workplace/css/\");\n        errordef.setData(\"jspath\", cms.getRequestContext().getRequest().getServletUrl() + \"/system/workplace/templates/js/\");\n        errordef.setData(C_ERROR_MSG_BUTTON, button);\n        errordef.setData(C_ERROR_TITLE, errorTitle);\n        errordef.setData(C_ERROR_MESSAGE, errorMessage);\n        errordef.setData(C_ERROR_REASON, errorReason);\n        errordef.setData(C_ERROR_SUGGESTION, errorSuggestion);\n        errordef.setData(C_ERROR_LINK, errorLink);\n        errordef.setData(C_ERROR_MSG_REASON, reason);\n        errordef.setData(C_ERROR_MSG_DETAILS, details);\n\n        // build errorpage\n        String result = errordef.getProcessedDataValue(C_TAG_ERRORPAGE, callingObject, null);\n        return result;\n    }","commit_id":"912d36f63a436e922d8fcba1a728ba3477adcf80","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the lock template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The lock template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n\n        // the template to be displayed\n        String template = null;\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n        String lock = (String)parameters.get(C_PARA_LOCK);\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n\n        //check if the user wants the lock dialog\n        // if yes, the lock page is shown for the first time\n        filename = (String)session.getValue(C_PARA_FILE);\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n\n        // select the template to be displayed\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n        Hashtable startSettings = (Hashtable)cms.getRequestContext().currentUser().getAdditionalInfo(C_ADDITIONAL_INFO_STARTSETTINGS);\n        String showLockDialog = \"on\";\n        if(startSettings!=null){\n            showLockDialog = (String)startSettings.get(C_START_LOCKDIALOG);\n        }\n        if(lock == null && !\"on\".equals(showLockDialog)) {\n            lock = \"true\";\n        }\n        boolean hlock = true;\n        if(lock != null) {\n            if(lock.equals(\"true\")) {\n                session.removeValue(C_PARA_FILE);\n                try{\n                    cms.lockResource(filename);\n                }catch(CmsException e){\n                    if(e.getType() == CmsException.C_ACCESS_DENIED) {\n                        template = \"accessdenied\";\n                    }else {\n                        xmlTemplateDocument.setData(\"details\", \"unknown error:\"+e.toString());\n                        template = \"error\";\n                    }\n                    xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n                    // process the selected template\n                    return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n                    // TODO: ErrorHandling\n                }\n\n                // return to filelist\n                try {\n                    if(lasturl == null || \"\".equals(lasturl)) {\n                        cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                                    + C_WP_EXPLORER_FILELIST);\n                    }\n                    else {\n                        cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                    }\n                }\n                catch(Exception e) {\n                        throw new CmsException(\"Redirect fails :\"\n                                + getConfigFile(cms).getWorkplaceActionPath()\n                                + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                }\n                return null;\n            }\n        }\n        xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","id":105924,"modified_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the lock template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The lock template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n\n        // the template to be displayed\n        String template = null;\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n        String lock = (String)parameters.get(C_PARA_LOCK);\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n\n        //check if the user wants the lock dialog\n        // if yes, the lock page is shown for the first time\n        filename = (String)session.getValue(C_PARA_FILE);\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n\n        // select the template to be displayed\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n        Hashtable startSettings = (Hashtable)cms.getRequestContext().currentUser().getAdditionalInfo(C_ADDITIONAL_INFO_STARTSETTINGS);\n        String showLockDialog = \"on\";\n        if(startSettings!=null){\n            showLockDialog = (String)startSettings.get(C_START_LOCKDIALOG);\n        }\n        if(lock == null && !\"on\".equals(showLockDialog)) {\n            lock = \"true\";\n        }\n        boolean hlock = true;\n        if(lock != null) {\n            if(lock.equals(\"true\")) {\n                session.removeValue(C_PARA_FILE);\n                try{\n                    cms.lockResource(filename);\n                }catch(CmsException e){\n                    if(e.getType() == CmsException.C_ACCESS_DENIED) {\n                        template = \"erroraccessdenied\";\n                        xmlTemplateDocument.setData(\"details\", file.getName());\n                    }else {\n                        xmlTemplateDocument.setData(\"details\", e.toString());\n                        template = \"error\";\n                    }\n                    xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                    xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n                    // process the selected template\n                    return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n                    // TODO: ErrorHandling\n                }\n\n                // return to filelist\n                try {\n                    if(lasturl == null || \"\".equals(lasturl)) {\n                        cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                                    + C_WP_EXPLORER_FILELIST);\n                    }\n                    else {\n                        cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                    }\n                }\n                catch(Exception e) {\n                        throw new CmsException(\"Redirect fails :\"\n                                + getConfigFile(cms).getWorkplaceActionPath()\n                                + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                }\n                return null;\n            }\n        }\n        xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","commit_id":"912d36f63a436e922d8fcba1a728ba3477adcf80","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the lockchange template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The lockchange template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n        String lock = (String)parameters.get(C_PARA_LOCK);\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n\n        //check if the user wants the lock dialog\n        // if yes, the lock page is shown for the first time\n        filename = (String)session.getValue(C_PARA_FILE);\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n\n        // select the template to be displayed\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n        Hashtable startSettings = (Hashtable)cms.getRequestContext().currentUser().getAdditionalInfo(C_ADDITIONAL_INFO_STARTSETTINGS);\n        String showLockDialog = \"on\";\n        if(startSettings!=null){\n            showLockDialog = (String)startSettings.get(C_START_LOCKDIALOG);\n        }\n        if(lock == null && !\"on\".equals(showLockDialog)) {\n            lock = \"true\";\n        }\n        if(lock != null) {\n            if(lock.equals(\"true\")) {\n                cms.lockResource(filename, true);\n                session.removeValue(C_PARA_FILE);\n            }\n\n            // TODO: ErrorHandling\n\n            // return to filelist\n            try {\n                if(lasturl == null || \"\".equals(lasturl)) {\n                    cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                            + C_WP_EXPLORER_FILELIST);\n                }\n                else {\n                    cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                }\n            }\n            catch(Exception e) {\n                throw new CmsException(\"Redirect fails :\"\n                        + getConfigFile(cms).getWorkplaceActionPath()\n                        + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n            }\n            return null;\n        }\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms,\n                templateFile);\n        xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","id":105925,"modified_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the lockchange template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The lockchange template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n        String lock = (String)parameters.get(C_PARA_LOCK);\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n\n        //check if the user wants the lock dialog\n        // if yes, the lock page is shown for the first time\n        filename = (String)session.getValue(C_PARA_FILE);\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n\n        // select the template to be displayed\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n        Hashtable startSettings = (Hashtable)cms.getRequestContext().currentUser().getAdditionalInfo(C_ADDITIONAL_INFO_STARTSETTINGS);\n        String showLockDialog = \"on\";\n        if(startSettings!=null){\n            showLockDialog = (String)startSettings.get(C_START_LOCKDIALOG);\n        }\n        if(lock == null && !\"on\".equals(showLockDialog)) {\n            lock = \"true\";\n        }\n        if(lock != null) {\n            if(lock.equals(\"true\")) {\n                session.removeValue(C_PARA_FILE);\n                try{\n                    cms.lockResource(filename, true);\n                }catch(CmsException e){\n                    CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n                    if(e.getType() == CmsException.C_ACCESS_DENIED) {\n                        template = \"erroraccessdenied\";\n                        xmlTemplateDocument.setData(\"details\", file.getName());\n                    }else {\n                        xmlTemplateDocument.setData(\"details\", e.toString());\n                        template = \"error\";\n                    }\n                    xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                    xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n                    // process the selected template\n                    return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n                    // TODO: ErrorHandling\n                }\n            }\n\n            // TODO: ErrorHandling\n\n            // return to filelist\n            try {\n                if(lasturl == null || \"\".equals(lasturl)) {\n                    cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                            + C_WP_EXPLORER_FILELIST);\n                }\n                else {\n                    cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                }\n            }\n            catch(Exception e) {\n                throw new CmsException(\"Redirect fails :\"\n                        + getConfigFile(cms).getWorkplaceActionPath()\n                        + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n            }\n            return null;\n        }\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms,\n                templateFile);\n        xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","commit_id":"912d36f63a436e922d8fcba1a728ba3477adcf80","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the move template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The move template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms,\n                templateFile);\n        CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(C_PARA_NEWFOLDER);\n            session.removeValue(C_PARA_FLAGS);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n\n        // get the file to be copied\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n        filename = (String)session.getValue(C_PARA_FILE);\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n\n        // read all request parameters\n        String newFolder = new String();\n        String newFile = new String();\n        String wholePath = (String)parameters.get(C_PARA_NEWFOLDER);\n\n        // the wholePath includes the folder and/or the filename\n        if(wholePath != null && !(\"\".equals(wholePath))){\n            if(wholePath.startsWith(\"/\")){\n                // get the foldername\n                newFolder = wholePath.substring(0, wholePath.lastIndexOf(\"/\")+1);\n                newFile = wholePath.substring(wholePath.lastIndexOf(\"/\")+1);\n                if (newFile == null || \"\".equals(newFile)){\n                    newFile = file.getName();\n                }\n            } else {\n                newFolder = file.getParent();\n                newFile = wholePath;\n            }\n        }\n        if(newFolder != null && !(\"\".equals(newFolder))) {\n            session.putValue(C_PARA_NEWFOLDER, newFolder);\n        }\n        newFolder = (String)session.getValue(C_PARA_NEWFOLDER);\n\n        if(newFile != null && !(\"\".equals(newFile))) {\n            session.putValue(C_PARA_NEWFILE, newFile);\n        }\n        newFile = (String)session.getValue(C_PARA_NEWFILE);\n\n        String flags = (String)parameters.get(C_PARA_FLAGS);\n        if(flags != null) {\n            session.putValue(C_PARA_FLAGS, flags);\n        }\n        flags = (String)session.getValue(C_PARA_FLAGS);\n        String action = (String)parameters.get(\"action\");\n        // modify the folderaname if nescessary (the root folder is always given\n        // as a nice name)\n        if(newFolder != null && !(\"\".equals(newFolder))) {\n            if(newFolder.equals(lang.getLanguageValue(\"title.rootfolder\"))) {\n                newFolder = \"/\";\n            }\n\n            // ednfal: check if the user try to move the resource into itself\n            if(newFolder.equals(file.getAbsolutePath())) {\n                throw new CmsException(\"Can't move folder into itself\",\n                        CmsException.C_BAD_NAME);\n            }\n\n            // ednfal: try to read the destination folder\n            try {\n                CmsFolder toFolder = cms.readFolder(newFolder);\n            }\n            catch(CmsException ex) {\n                if(ex.getType() == CmsException.C_NOT_FOUND) {\n                    throw new CmsException(\"Destination folder not exists\",\n                            CmsException.C_BAD_NAME);\n                }\n            }\n        }\n\n        // select the template to be displayed\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n\n        //check if the newFolder parameter was included in the request\n        //if not, the move page is shown for the first time\n        if(newFolder != null && !(\"\".equals(newFolder))) {\n            if(action == null) {\n                template = \"wait\";\n            }\n            else {\n                if(file.isFile()) {\n\n                    // this is a file, so move it\n                    try {\n                        cms.moveResource(((CmsFile)file).getAbsolutePath(), newFolder + newFile);\n                    }\n                    catch(CmsException ex) {\n\n                        // something went wrong, so remove all session parameters\n                        session.removeValue(C_PARA_FILE);\n                        session.removeValue(C_PARA_NEWFOLDER);\n                        session.removeValue(C_PARA_FLAGS);\n\n                        //throw ex;\n                        template = \"error\";\n                        xmlTemplateDocument.setData(\"details\", ex.getStackTrace());\n                        return startProcessing(cms, xmlTemplateDocument, \"\", parameters,\n                                template);\n                    }\n\n                    // everything is done, so remove all session parameters\n                    session.removeValue(C_PARA_FILE);\n                    session.removeValue(C_PARA_NEWFOLDER);\n                    session.removeValue(C_PARA_FLAGS);\n\n                    // TODO: Error handling\n\n                    // return to the calling page\n                    try {\n                        if(lasturl == null || \"\".equals(lasturl)) {\n                            cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath() + C_WP_EXPLORER_FILELIST);\n                        }\n                        else {\n                            cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                        }\n                    }\n                    catch(Exception e) {\n                        throw new CmsException(\"Redirect fails :\"\n                                + getConfigFile(cms).getWorkplaceActionPath()\n                                + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                    }\n                    return null;\n                }\n                else {\n                    // this is a folder\n                    // get all subfolders and files\n                    try {\n                        cms.moveResource(((CmsFolder)file).getAbsolutePath(), newFolder + newFile);\n                    } catch(CmsException e) {\n                        // something went wrong, so remove all session parameters\n                        session.removeValue(C_PARA_FILE);\n                        session.removeValue(C_PARA_NEWFOLDER);\n                        session.removeValue(C_PARA_FLAGS);\n\n                        //throw e;\n                        template = \"error\";\n                        xmlTemplateDocument.setData(\"details\", e.getStackTrace());\n                        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n                    }\n\n                    // everything is done, so remove all session parameters\n                    session.removeValue(C_PARA_FILE);\n                    session.removeValue(C_PARA_NEWFOLDER);\n                    session.removeValue(C_PARA_FLAGS);\n                    xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                    template = \"update\";\n                }\n            }\n        }\n\n        // set the required datablocks\n        if(action == null) {\n            String title = cms.readProperty(file.getAbsolutePath(), C_PROPERTY_TITLE);\n            if(title == null) {\n                title = \"\";\n            }\n            CmsUser owner = cms.readOwner(file);\n            xmlTemplateDocument.setData(\"TITLE\", title);\n            xmlTemplateDocument.setData(\"STATE\", getState(cms, file, lang));\n            xmlTemplateDocument.setData(\"OWNER\", Utils.getFullName(owner));\n            xmlTemplateDocument.setData(\"GROUP\", cms.readGroup(file).getName());\n            xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n        }\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","id":105926,"modified_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the move template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The move template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms,\n                templateFile);\n        CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(C_PARA_NEWFOLDER);\n            session.removeValue(C_PARA_FLAGS);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n\n        // get the file to be copied\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n        filename = (String)session.getValue(C_PARA_FILE);\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n\n        // read all request parameters\n        String newFolder = new String();\n        String newFile = new String();\n        String wholePath = (String)parameters.get(C_PARA_NEWFOLDER);\n\n        // the wholePath includes the folder and/or the filename\n        if(wholePath != null && !(\"\".equals(wholePath))){\n            if(wholePath.startsWith(\"/\")){\n                // get the foldername\n                newFolder = wholePath.substring(0, wholePath.lastIndexOf(\"/\")+1);\n                newFile = wholePath.substring(wholePath.lastIndexOf(\"/\")+1);\n                if (newFile == null || \"\".equals(newFile)){\n                    newFile = file.getName();\n                }\n            } else {\n                newFolder = file.getParent();\n                newFile = wholePath;\n            }\n        }\n        if(newFolder != null && !(\"\".equals(newFolder))) {\n            session.putValue(C_PARA_NEWFOLDER, newFolder);\n        }\n        newFolder = (String)session.getValue(C_PARA_NEWFOLDER);\n\n        if(newFile != null && !(\"\".equals(newFile))) {\n            session.putValue(C_PARA_NEWFILE, newFile);\n        }\n        newFile = (String)session.getValue(C_PARA_NEWFILE);\n\n        String flags = (String)parameters.get(C_PARA_FLAGS);\n        if(flags != null) {\n            session.putValue(C_PARA_FLAGS, flags);\n        }\n        flags = (String)session.getValue(C_PARA_FLAGS);\n        String action = (String)parameters.get(\"action\");\n        // modify the folderaname if nescessary (the root folder is always given\n        // as a nice name)\n        if(newFolder != null && !(\"\".equals(newFolder))) {\n            if(newFolder.equals(lang.getLanguageValue(\"title.rootfolder\"))) {\n                newFolder = \"/\";\n            }\n\n            // ednfal: check if the user try to move the resource into itself\n            if(newFolder.equals(file.getAbsolutePath())) {\n                 // something went wrong, so remove all session parameters\n                session.removeValue(C_PARA_FILE);\n                session.removeValue(C_PARA_NEWFOLDER);\n                session.removeValue(C_PARA_FLAGS);\n                template = \"error\";\n                xmlTemplateDocument.setData(\"details\", \"Can't move folder into itself\");\n                xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                return startProcessing(cms, xmlTemplateDocument, \"\", parameters,\n                            template);\n            }\n\n            // ednfal: try to read the destination folder\n            try {\n                CmsFolder toFolder = cms.readFolder(newFolder);\n            }\n            catch(CmsException ex) {\n                // something went wrong, so remove all session parameters\n                session.removeValue(C_PARA_FILE);\n                session.removeValue(C_PARA_NEWFOLDER);\n                session.removeValue(C_PARA_FLAGS);\n\n                template = \"error\";\n                if(ex.getType() == CmsException.C_NOT_FOUND) {\n                    xmlTemplateDocument.setData(\"details\", \"Destination folder not exists\"+ex.getStackTrace());\n                } else {\n                    xmlTemplateDocument.setData(\"details\", ex.getStackTrace());\n                }\n                xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                return startProcessing(cms, xmlTemplateDocument, \"\", parameters,\n                                template);\n            }\n        }\n\n        // select the template to be displayed\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n\n        //check if the newFolder parameter was included in the request\n        //if not, the move page is shown for the first time\n        if(newFolder != null && !(\"\".equals(newFolder))) {\n            if(action == null) {\n                template = \"wait\";\n            }\n            else {\n                if(file.isFile()) {\n\n                    // this is a file, so move it\n                    try {\n                        cms.moveResource(((CmsFile)file).getAbsolutePath(), newFolder + newFile);\n                    }\n                    catch(CmsException ex) {\n\n                        // something went wrong, so remove all session parameters\n                        session.removeValue(C_PARA_FILE);\n                        session.removeValue(C_PARA_NEWFOLDER);\n                        session.removeValue(C_PARA_FLAGS);\n\n                        //throw ex;\n                        template = \"error\";\n                        xmlTemplateDocument.setData(\"details\", ex.getStackTrace());\n                        xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                        return startProcessing(cms, xmlTemplateDocument, \"\", parameters,\n                                template);\n                    }\n\n                    // everything is done, so remove all session parameters\n                    session.removeValue(C_PARA_FILE);\n                    session.removeValue(C_PARA_NEWFOLDER);\n                    session.removeValue(C_PARA_FLAGS);\n\n                    // TODO: Error handling\n\n                    // return to the calling page\n                    try {\n                        if(lasturl == null || \"\".equals(lasturl)) {\n                            cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath() + C_WP_EXPLORER_FILELIST);\n                        }\n                        else {\n                            cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                        }\n                    }\n                    catch(Exception e) {\n                        throw new CmsException(\"Redirect fails :\"\n                                + getConfigFile(cms).getWorkplaceActionPath()\n                                + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                    }\n                    return null;\n                }\n                else {\n                    // this is a folder\n                    // get all subfolders and files\n                    try {\n                        cms.moveResource(((CmsFolder)file).getAbsolutePath(), newFolder + newFile);\n                    } catch(CmsException e) {\n                        // something went wrong, so remove all session parameters\n                        session.removeValue(C_PARA_FILE);\n                        session.removeValue(C_PARA_NEWFOLDER);\n                        session.removeValue(C_PARA_FLAGS);\n\n                        //throw e;\n                        template = \"error\";\n                        xmlTemplateDocument.setData(\"details\", e.getStackTrace());\n                        xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n                    }\n\n                    // everything is done, so remove all session parameters\n                    session.removeValue(C_PARA_FILE);\n                    session.removeValue(C_PARA_NEWFOLDER);\n                    session.removeValue(C_PARA_FLAGS);\n                    xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                    template = \"update\";\n                }\n            }\n        }\n\n        // set the required datablocks\n        if(action == null) {\n            String title = cms.readProperty(file.getAbsolutePath(), C_PROPERTY_TITLE);\n            if(title == null) {\n                title = \"\";\n            }\n            CmsUser owner = cms.readOwner(file);\n            xmlTemplateDocument.setData(\"TITLE\", title);\n            xmlTemplateDocument.setData(\"STATE\", getState(cms, file, lang));\n            xmlTemplateDocument.setData(\"OWNER\", Utils.getFullName(owner));\n            xmlTemplateDocument.setData(\"GROUP\", cms.readGroup(file).getName());\n            xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n        }\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","commit_id":"912d36f63a436e922d8fcba1a728ba3477adcf80","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the undelete template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The undelete template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n        filename = (String)session.getValue(C_PARA_FILE);\n        String action = (String)parameters.get(\"action\");\n        CmsResource file = null;\n        if(filename.endsWith(\"/\")){\n            file = (CmsResource)cms.readFolder(filename, true);\n        } else {\n            file = (CmsResource)cms.readFileHeader(filename);\n        }\n\n        if(action!= null){\n            if (\"check\".equals(action)){\n                if(file.getState() != C_STATE_DELETED){\n                    if(checkLocked(cms, file)){\n                        action = \"wait\";\n                    } else {\n                        // ask user if the locks should be removed\n                        return startProcessing(cms, xmlTemplateDocument, elementName, parameters,\"asklock\");\n                    }\n                } else {\n                    action = \"wait\";\n                }\n            } else if(\"rmlocks\".equals(action)){\n                // remove the locks and publish\n                try{\n                    unlockResource(cms, file);\n                    action = \"wait\";\n                } catch (CmsException exc){\n                    xmlTemplateDocument.setData(\"details\", Utils.getStackTrace(exc));\n                    return startProcessing(cms, xmlTemplateDocument, elementName, parameters,\"errorlock\");\n                }\n\n            //check if the name parameter was included in the request\n            // if not, the publishresource page is shown for the first time\n            }\n            if((action != null) && \"wait\".equals(action)) {\n                return startProcessing(cms, xmlTemplateDocument, \"\", parameters, \"wait\");\n            }\n            if((action != null) && \"ok\".equals(action)) {\n                // publish the resource\n                try{\n                    cms.publishResource(file.getAbsolutePath());\n                    session.removeValue(C_PARA_FILE);\n                    template = \"done\";\n                } catch(CmsException e){\n                    session.removeValue(C_PARA_FILE);\n                    xmlTemplateDocument.setData(\"details\", Utils.getStackTrace(e));\n                    return startProcessing(cms, xmlTemplateDocument, \"\", parameters, \"error\");\n                }\n            }\n        }\n\n        // set the required datablocks\n        if(action == null) {\n            CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n            xmlTemplateDocument.setData(\"CHANGEDATE\", Utils.getNiceDate(file.getDateLastModified()));\n            xmlTemplateDocument.setData(\"USER\", cms.readUser(file.getResourceLastModifiedBy()).getName());\n            xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n        }\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","id":105927,"modified_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the undelete template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The undelete template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n        filename = (String)session.getValue(C_PARA_FILE);\n        String action = (String)parameters.get(\"action\");\n        CmsResource file = null;\n        if(filename.endsWith(\"/\")){\n            file = (CmsResource)cms.readFolder(filename, true);\n        } else {\n            file = (CmsResource)cms.readFileHeader(filename);\n        }\n\n        if(action!= null){\n            if (\"check\".equals(action)){\n                if(file.getState() != C_STATE_DELETED){\n                    if(checkLocked(cms, file)){\n                        action = \"wait\";\n                    } else {\n                        // ask user if the locks should be removed\n                        return startProcessing(cms, xmlTemplateDocument, elementName, parameters,\"asklock\");\n                    }\n                } else {\n                    action = \"wait\";\n                }\n            } else if(\"rmlocks\".equals(action)){\n                // remove the locks and publish\n                try{\n                    unlockResource(cms, file);\n                    action = \"wait\";\n                } catch (CmsException exc){\n                    xmlTemplateDocument.setData(\"details\", Utils.getStackTrace(exc));\n                    xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                    return startProcessing(cms, xmlTemplateDocument, elementName, parameters,\"errorlock\");\n                }\n\n            //check if the name parameter was included in the request\n            // if not, the publishresource page is shown for the first time\n            }\n            if((action != null) && \"wait\".equals(action)) {\n                return startProcessing(cms, xmlTemplateDocument, \"\", parameters, \"wait\");\n            }\n            if((action != null) && \"ok\".equals(action)) {\n                // publish the resource\n                try{\n                    cms.publishResource(file.getAbsolutePath());\n                    session.removeValue(C_PARA_FILE);\n                    template = \"done\";\n                } catch(CmsException e){\n                    session.removeValue(C_PARA_FILE);\n                    xmlTemplateDocument.setData(\"details\", Utils.getStackTrace(e));\n                    xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                    return startProcessing(cms, xmlTemplateDocument, \"\", parameters, \"error\");\n                }\n            }\n        }\n\n        // set the required datablocks\n        if(action == null) {\n            CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n            xmlTemplateDocument.setData(\"CHANGEDATE\", Utils.getNiceDate(file.getDateLastModified()));\n            xmlTemplateDocument.setData(\"USER\", cms.readUser(file.getResourceLastModifiedBy()).getName());\n            xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n        }\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","commit_id":"912d36f63a436e922d8fcba1a728ba3477adcf80","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the rename template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The lock template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(C_PARA_NAME);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n\n        // TODO: check, if this is neede: String lock=(String)parameters.get(C_PARA_LOCK);\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n        filename = (String)session.getValue(C_PARA_FILE);\n        String newFile = (String)parameters.get(C_PARA_NAME);\n        if(session.getValue(C_PARA_NAME) != null) {\n            if(newFile != null) {\n\n                // Save the new parameter of the new filename.\n                // Only do this, if the session value already exists.\n                // We use the existance of a session value as a flag\n                // For initial try / retry after exception.\n                session.putValue(C_PARA_NAME, newFile);\n            }\n            else {\n\n                // Get back the saved value (if one exists)\n                newFile = (String)session.getValue(C_PARA_NAME);\n            }\n        }\n\n        //newFile=(String)session.getValue(C_PARA_NAME);\n        String action = (String)parameters.get(\"action\");\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n\n        //check if the name parameter was included in the request\n        // if not, the lock page is shown for the first time\n        //if (newFile == null) {\n        if(newFile == null || session.getValue(C_PARA_NAME) == null) {\n            if(newFile == null) {\n                session.putValue(C_PARA_NAME, file.getName());\n            }\n            else {\n                session.putValue(C_PARA_NAME, newFile);\n            }\n        }\n        else {\n            if(action == null) {\n                template = \"wait\";\n            }\n            else {\n\n                // now check if the resource is a file or a folder\n                if(file.isFile()) {\n\n                    // this is a file, so rename it\n                    try {\n                        cms.renameResource(file.getAbsolutePath(), newFile);\n                    }\n                    catch(CmsException ex) {\n\n                        // something went wrong, so remove all session parameters\n                        session.removeValue(C_PARA_FILE); //don't delete this. We really need this to try again.\n                        session.removeValue(C_PARA_NAME);\n                        xmlTemplateDocument.setData(\"details\", Utils.getStackTrace(ex));\n                        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, \"errorbadname\");\n                    }\n\n                    // everything is done, so remove all session parameters\n                    session.removeValue(C_PARA_FILE);\n                    session.removeValue(C_PARA_NAME);\n                    try {\n                        if(lasturl == null || \"\".equals(lasturl)) {\n                            cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                                    + C_WP_EXPLORER_FILELIST);\n                        }\n                        else {\n                            cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                        }\n                    }\n                    catch(Exception e) {\n                        throw new CmsException(\"Redirect fails :\" + getConfigFile(cms).getWorkplaceActionPath()\n                                + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                    }\n                    return null;\n                }\n                else {\n\n                    // this is a folder\n                    try {\n                        cms.renameResource(file.getAbsolutePath(), newFile);\n                    } catch(CmsException ex) {\n\n                        // something went wrong, so remove all session parameters\n                        session.removeValue(C_PARA_FILE); //don't delete this. We really need this to try again.\n                        session.removeValue(C_PARA_NAME);\n                        xmlTemplateDocument.setData(\"details\", Utils.getStackTrace(ex));\n                        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, \"errorbadname\");\n                    }\n\n                    // everything is done, so remove all session parameters\n                    session.removeValue(C_PARA_FILE);\n                    session.removeValue(C_PARA_NAME);\n                    xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                    template = \"update\";\n                }\n            }\n        }\n\n        // set the required datablocks\n        if(action == null) {\n            String title = cms.readProperty(file.getAbsolutePath(), C_PROPERTY_TITLE);\n            if(title == null) {\n                title = \"\";\n            }\n            CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n            CmsUser owner = cms.readOwner(file);\n            xmlTemplateDocument.setData(\"TITLE\", title);\n            xmlTemplateDocument.setData(\"STATE\", getState(cms, file, lang));\n            xmlTemplateDocument.setData(\"OWNER\", Utils.getFullName(owner));\n            xmlTemplateDocument.setData(\"GROUP\", cms.readGroup(file).getName());\n            xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n        }\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","id":105928,"modified_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the rename template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The lock template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(C_PARA_NAME);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n\n        // TODO: check, if this is neede: String lock=(String)parameters.get(C_PARA_LOCK);\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n        filename = (String)session.getValue(C_PARA_FILE);\n        String newFile = (String)parameters.get(C_PARA_NAME);\n        if(session.getValue(C_PARA_NAME) != null) {\n            if(newFile != null) {\n\n                // Save the new parameter of the new filename.\n                // Only do this, if the session value already exists.\n                // We use the existance of a session value as a flag\n                // For initial try / retry after exception.\n                session.putValue(C_PARA_NAME, newFile);\n            }\n            else {\n\n                // Get back the saved value (if one exists)\n                newFile = (String)session.getValue(C_PARA_NAME);\n            }\n        }\n\n        //newFile=(String)session.getValue(C_PARA_NAME);\n        String action = (String)parameters.get(\"action\");\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n\n        //check if the name parameter was included in the request\n        // if not, the lock page is shown for the first time\n        //if (newFile == null) {\n        if(newFile == null || session.getValue(C_PARA_NAME) == null) {\n            if(newFile == null) {\n                session.putValue(C_PARA_NAME, file.getName());\n            }\n            else {\n                session.putValue(C_PARA_NAME, newFile);\n            }\n        }\n        else {\n            if(action == null) {\n                template = \"wait\";\n            }\n            else {\n\n                // now check if the resource is a file or a folder\n                if(file.isFile()) {\n\n                    // this is a file, so rename it\n                    try {\n                        cms.renameResource(file.getAbsolutePath(), newFile);\n                    }\n                    catch(CmsException ex) {\n\n                        // something went wrong, so remove all session parameters\n                        session.removeValue(C_PARA_FILE); //don't delete this. We really need this to try again.\n                        session.removeValue(C_PARA_NAME);\n                        xmlTemplateDocument.setData(\"details\", Utils.getStackTrace(ex));\n                        xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, \"errorbadname\");\n                    }\n\n                    // everything is done, so remove all session parameters\n                    session.removeValue(C_PARA_FILE);\n                    session.removeValue(C_PARA_NAME);\n                    try {\n                        if(lasturl == null || \"\".equals(lasturl)) {\n                            cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                                    + C_WP_EXPLORER_FILELIST);\n                        }\n                        else {\n                            cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                        }\n                    }\n                    catch(Exception e) {\n                        throw new CmsException(\"Redirect fails :\" + getConfigFile(cms).getWorkplaceActionPath()\n                                + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                    }\n                    return null;\n                }\n                else {\n\n                    // this is a folder\n                    try {\n                        cms.renameResource(file.getAbsolutePath(), newFile);\n                    } catch(CmsException ex) {\n\n                        // something went wrong, so remove all session parameters\n                        session.removeValue(C_PARA_FILE); //don't delete this. We really need this to try again.\n                        session.removeValue(C_PARA_NAME);\n                        xmlTemplateDocument.setData(\"details\", Utils.getStackTrace(ex));\n                        xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, \"errorbadname\");\n                    }\n\n                    // everything is done, so remove all session parameters\n                    session.removeValue(C_PARA_FILE);\n                    session.removeValue(C_PARA_NAME);\n                    xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                    template = \"update\";\n                }\n            }\n        }\n\n        // set the required datablocks\n        if(action == null) {\n            String title = cms.readProperty(file.getAbsolutePath(), C_PROPERTY_TITLE);\n            if(title == null) {\n                title = \"\";\n            }\n            CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n            CmsUser owner = cms.readOwner(file);\n            xmlTemplateDocument.setData(\"TITLE\", title);\n            xmlTemplateDocument.setData(\"STATE\", getState(cms, file, lang));\n            xmlTemplateDocument.setData(\"OWNER\", Utils.getFullName(owner));\n            xmlTemplateDocument.setData(\"GROUP\", cms.readGroup(file).getName());\n            xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n        }\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","commit_id":"912d36f63a436e922d8fcba1a728ba3477adcf80","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the undelete template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The undelete template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"undochanges\");\n            session.removeValue(\"lasturl\");\n        }\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n        String undochanges = (String)parameters.get(\"undochanges\");\n        if(undochanges != null) {\n            session.putValue(\"undochanges\", undochanges);\n        }\n        undochanges = (String)session.getValue(\"undochanges\");\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n        filename = (String)session.getValue(C_PARA_FILE);\n        String action = (String)parameters.get(\"action\");\n\n        CmsResource file = null;\n        if(filename.endsWith(\"/\")){\n            file = (CmsResource)cms.readFolder(filename);\n        } else {\n            file = (CmsResource)cms.readFileHeader(filename);\n        }\n        //check if the name parameter was included in the request\n        // if not, the undoChanges page is shown for the first time\n        if(undochanges != null){\n            if(action != null) {\n                // undo changes of the resource\n                try{\n                    cms.undoChanges(file.getAbsolutePath());\n                    session.removeValue(C_PARA_FILE);\n                    template = \"done\";\n                } catch(CmsException e){\n                    session.removeValue(C_PARA_FILE);\n                    xmlTemplateDocument.setData(\"details\", Utils.getStackTrace(e));\n                    return startProcessing(cms, xmlTemplateDocument, \"\", parameters, \"error\");\n                }\n            } else {\n                template = \"wait\";\n            }\n        }\n        // set the required datablocks\n        if(action == null) {\n            CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n            xmlTemplateDocument.setData(\"CHANGEDATE\", Utils.getNiceDate(file.getDateLastModified()));\n            xmlTemplateDocument.setData(\"USER\", cms.readUser(file.getResourceLastModifiedBy()).getName());\n            xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n        }\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","id":105929,"modified_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the undelete template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The undelete template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"undochanges\");\n            session.removeValue(\"lasturl\");\n        }\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n        String undochanges = (String)parameters.get(\"undochanges\");\n        if(undochanges != null) {\n            session.putValue(\"undochanges\", undochanges);\n        }\n        undochanges = (String)session.getValue(\"undochanges\");\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n        filename = (String)session.getValue(C_PARA_FILE);\n        String action = (String)parameters.get(\"action\");\n\n        CmsResource file = null;\n        if(filename.endsWith(\"/\")){\n            file = (CmsResource)cms.readFolder(filename);\n        } else {\n            file = (CmsResource)cms.readFileHeader(filename);\n        }\n        //check if the name parameter was included in the request\n        // if not, the undoChanges page is shown for the first time\n        if(undochanges != null){\n            if(action != null) {\n                // undo changes of the resource\n                try{\n                    cms.undoChanges(file.getAbsolutePath());\n                    session.removeValue(C_PARA_FILE);\n                    template = \"done\";\n                } catch(CmsException e){\n                    session.removeValue(C_PARA_FILE);\n                    xmlTemplateDocument.setData(\"details\", Utils.getStackTrace(e));\n                    xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                    return startProcessing(cms, xmlTemplateDocument, \"\", parameters, \"error\");\n                }\n            } else {\n                template = \"wait\";\n            }\n        }\n        // set the required datablocks\n        if(action == null) {\n            CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n            xmlTemplateDocument.setData(\"CHANGEDATE\", Utils.getNiceDate(file.getDateLastModified()));\n            xmlTemplateDocument.setData(\"USER\", cms.readUser(file.getResourceLastModifiedBy()).getName());\n            xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n        }\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","commit_id":"912d36f63a436e922d8fcba1a728ba3477adcf80","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Overwrties the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the unlock templated and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The unlock template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n        String unlock = (String)parameters.get(C_PARA_UNLOCK);\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n\n        //check if the user wants the lock dialog\n        // if yes, the lock page is shown for the first time\n        filename = (String)session.getValue(C_PARA_FILE);\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n\n        // select the template to be displayed\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n        Hashtable startSettings = (Hashtable)cms.getRequestContext().currentUser().getAdditionalInfo(C_ADDITIONAL_INFO_STARTSETTINGS);\n        String showLockDialog = \"on\";\n        if(startSettings!=null){\n            showLockDialog = (String)startSettings.get(C_START_LOCKDIALOG);\n        }\n        if(unlock == null && !\"on\".equals(showLockDialog)) {\n            unlock = \"true\";\n        }\n        if(unlock != null) {\n            if(unlock.equals(\"true\")) {\n                try {\n                    cms.unlockResource(filename);\n                    session.removeValue(C_PARA_FILE);\n                }\n                catch(CmsException e) {\n                    if(e.getType() == CmsException.C_NO_ACCESS) {\n                        template = \"erroraccessdenied\";\n                        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n                        xmlTemplateDocument.setData(\"details\", file.getName());\n                        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n                    }\n                    else {\n                        throw e;\n                    }\n                }\n            }\n\n            // return to filelist\n            try {\n                if(lasturl == null || \"\".equals(lasturl)) {\n                    cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                            + C_WP_EXPLORER_FILELIST);\n                }\n                else {\n                    cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                }\n            }\n            catch(Exception e) {\n                throw new CmsException(\"Redirect fails :\" + getConfigFile(cms).getWorkplaceActionPath()\n                        + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n            }\n            return null;\n        }\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n        xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","id":105930,"modified_method":"/**\n     * Overwrties the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the unlock templated and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The unlock template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n        String unlock = (String)parameters.get(C_PARA_UNLOCK);\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n\n        //check if the user wants the lock dialog\n        // if yes, the lock page is shown for the first time\n        filename = (String)session.getValue(C_PARA_FILE);\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n\n        // select the template to be displayed\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n        Hashtable startSettings = (Hashtable)cms.getRequestContext().currentUser().getAdditionalInfo(C_ADDITIONAL_INFO_STARTSETTINGS);\n        String showLockDialog = \"on\";\n        if(startSettings!=null){\n            showLockDialog = (String)startSettings.get(C_START_LOCKDIALOG);\n        }\n        if(unlock == null && !\"on\".equals(showLockDialog)) {\n            unlock = \"true\";\n        }\n        if(unlock != null) {\n            if(unlock.equals(\"true\")) {\n                try {\n                    cms.unlockResource(filename);\n                    session.removeValue(C_PARA_FILE);\n                }\n                catch(CmsException e) {\n                    CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n                    if(e.getType() == CmsException.C_NO_ACCESS) {\n                        template = \"erroraccessdenied\";\n                        xmlTemplateDocument.setData(\"details\", file.getName());\n                    }\n                    else {\n                        template = \"error\";\n                        xmlTemplateDocument.setData(\"details\", e.toString());\n                    }\n                    xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                    return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n                }\n            }\n\n            // return to filelist\n            try {\n                if(lasturl == null || \"\".equals(lasturl)) {\n                    cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                            + C_WP_EXPLORER_FILELIST);\n                }\n                else {\n                    cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                }\n            }\n            catch(Exception e) {\n                throw new CmsException(\"Redirect fails :\" + getConfigFile(cms).getWorkplaceActionPath()\n                        + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n            }\n            return null;\n        }\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n        xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","commit_id":"912d36f63a436e922d8fcba1a728ba3477adcf80","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the delete template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The delete template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n    \n    public byte[] getContent(CmsObject cms, String templateFile, String elementName, \n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n        \n        // the template to be displayed\n        String template = null;\n        \n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n            \n            // remove all session values\n            session.removeValue(C_PARA_DELETE);\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n        \n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n        String delete = (String)parameters.get(C_PARA_DELETE);\n        if(delete != null) {\n            session.putValue(C_PARA_DELETE, delete);\n        }\n        delete = (String)session.getValue(C_PARA_DELETE);\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n        filename = (String)session.getValue(C_PARA_FILE);\n        String action = (String)parameters.get(\"action\");\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n        \n        //check if the name parameter was included in the request        \n        // if not, the delete page is shown for the first time\n        if(delete != null) {\n            if(action == null) {\n                template = \"wait\";\n            }\n            else {\n                \n                // check if the resource is a file or a folder\n                if(file.isFile()) {\n                    \n                    // its a file, so delete it\n                    deleteFile(cms, file);\n                    session.removeValue(C_PARA_DELETE);\n                    session.removeValue(C_PARA_FILE);\n                    try {\n                        if(lasturl == null || \"\".equals(lasturl)) {\n                            cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath() \n                                    + C_WP_EXPLORER_FILELIST);\n                        }\n                        else {\n                            cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                        }\n                    }\n                    catch(Exception e) {\n                        throw new CmsException(\"Redirect fails :\" + getConfigFile(cms).getWorkplaceActionPath() \n                                + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                    }\n                    return null;\n                }\n                else {\n                    \n                    // its a folder, so try to delete the folder and its subfolders                    \n                    // get all subfolders and files\n                    Vector allFolders = new Vector();\n                    Vector allFiles = new Vector();\n                    getAllResources(cms, filename, allFiles, allFolders);\n                    \n                    // unlock the folder, otherwise the subflders and files could not be                    \n                    // deleted.                    \n                    //cms.unlockResource(filename);                    \n                    // now delete all files in the subfolders\n                    for(int i = 0;i < allFiles.size();i++) {\n                        CmsFile newfile = (CmsFile)allFiles.elementAt(i);\n                        if(newfile.getState() != C_STATE_DELETED) {\n                            \n                            //cms.lockResource(newfile.getAbsolutePath());\n                            deleteFile(cms, newfile);\n                        }\n                    }\n                    \n                    // now delete all subfolders\n                    for(int i = 0;i < allFolders.size();i++) {\n                        CmsFolder folder = (CmsFolder)allFolders.elementAt(allFolders.size() - i - 1);\n                        if(folder.getState() != C_STATE_DELETED) {\n                            \n                            //cms.lockResource(folder.getAbsolutePath());\n                            cms.deleteFolder(folder.getAbsolutePath());\n                            try {\n                                cms.deleteFolder(C_CONTENTBODYPATH + folder.getAbsolutePath().substring(1));\n                            }\n                            catch(CmsException e) {\n                                \n                            }\n                        }\n                    }\n                    \n                    // finally delete the selected folder                    \n                    //cms.lockResource(filename);\n                    cms.deleteFolder(filename);\n                    try {\n                        cms.deleteFolder(C_CONTENTBODYPATH + filename.substring(1));\n                    }\n                    catch(CmsException e) {\n                        \n                    }\n                    session.removeValue(C_PARA_DELETE);\n                    session.removeValue(C_PARA_FILE);\n                    xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                    template = \"update\";\n                }\n            }\n        \n        // TODO: Error handling\n        }\n        \n        // set the required datablocks\n        if(action == null) {\n            String title = cms.readProperty(file.getAbsolutePath(), C_PROPERTY_TITLE);\n            if(title == null) {\n                title = \"\";\n            }\n            CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n            CmsUser owner = cms.readOwner(file);\n            xmlTemplateDocument.setData(\"TITLE\", title);\n            xmlTemplateDocument.setData(\"STATE\", getState(cms, file, lang));\n            xmlTemplateDocument.setData(\"OWNER\", Utils.getFullName(owner));\n            xmlTemplateDocument.setData(\"GROUP\", cms.readGroup(file).getName());\n            xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n        }\n        \n        // process the selected template \n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","id":105931,"modified_method":"/**\n     * Overwrites the getContent method of the CmsWorkplaceDefault.<br>\n     * Gets the content of the delete template and processed the data input.\n     * @param cms The CmsObject.\n     * @param templateFile The delete template file\n     * @param elementName not used\n     * @param parameters Parameters of the request and the template.\n     * @param templateSelector Selector of the template tag to be displayed.\n     * @return Bytearre containgine the processed data of the template.\n     * @exception Throws CmsException if something goes wrong.\n     */\n\n    public byte[] getContent(CmsObject cms, String templateFile, String elementName,\n            Hashtable parameters, String templateSelector) throws CmsException {\n        I_CmsSession session = cms.getRequestContext().getSession(true);\n        CmsXmlWpTemplateFile xmlTemplateDocument = new CmsXmlWpTemplateFile(cms, templateFile);\n\n        // the template to be displayed\n        String template = null;\n\n        // clear session values on first load\n        String initial = (String)parameters.get(C_PARA_INITIAL);\n        if(initial != null) {\n\n            // remove all session values\n            session.removeValue(C_PARA_DELETE);\n            session.removeValue(C_PARA_FILE);\n            session.removeValue(\"lasturl\");\n        }\n\n        // get the lasturl parameter\n        String lasturl = getLastUrl(cms, parameters);\n        String delete = (String)parameters.get(C_PARA_DELETE);\n        if(delete != null) {\n            session.putValue(C_PARA_DELETE, delete);\n        }\n        delete = (String)session.getValue(C_PARA_DELETE);\n        String filename = (String)parameters.get(C_PARA_FILE);\n        if(filename != null) {\n            session.putValue(C_PARA_FILE, filename);\n        }\n        filename = (String)session.getValue(C_PARA_FILE);\n        String action = (String)parameters.get(\"action\");\n        CmsResource file = (CmsResource)cms.readFileHeader(filename);\n        if(file.isFile()) {\n            template = \"file\";\n        }\n        else {\n            template = \"folder\";\n        }\n\n        //check if the name parameter was included in the request\n        // if not, the delete page is shown for the first time\n        if(delete != null) {\n            if(action == null) {\n                template = \"wait\";\n            }\n            else {\n\n                // check if the resource is a file or a folder\n                if(file.isFile()) {\n\n                    // its a file, so delete it\n                    try{\n                        deleteFile(cms, file);\n                        session.removeValue(C_PARA_DELETE);\n                        session.removeValue(C_PARA_FILE);\n                    }catch(CmsException e){\n                        session.removeValue(C_PARA_DELETE);\n                        session.removeValue(C_PARA_FILE);\n                        xmlTemplateDocument.setData(\"details\", Utils.getStackTrace(e));\n                        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, \"error\");\n                    }\n                    try {\n                        if(lasturl == null || \"\".equals(lasturl)) {\n                            cms.getRequestContext().getResponse().sendCmsRedirect(getConfigFile(cms).getWorkplaceActionPath()\n                                    + C_WP_EXPLORER_FILELIST);\n                        }\n                        else {\n                            cms.getRequestContext().getResponse().sendRedirect(lasturl);\n                        }\n                    }\n                    catch(Exception e) {\n                        throw new CmsException(\"Redirect fails :\" + getConfigFile(cms).getWorkplaceActionPath()\n                                + C_WP_EXPLORER_FILELIST, CmsException.C_UNKNOWN_EXCEPTION, e);\n                    }\n                    return null;\n                }\n                else {\n\n                    // its a folder, so try to delete the folder and its subfolders\n                    // get all subfolders and files\n                    Vector allFolders = new Vector();\n                    Vector allFiles = new Vector();\n                    getAllResources(cms, filename, allFiles, allFolders);\n\n                    // unlock the folder, otherwise the subflders and files could not be\n                    // deleted.\n                    //cms.unlockResource(filename);\n                    // now delete all files in the subfolders\n                    for(int i = 0;i < allFiles.size();i++) {\n                        CmsFile newfile = (CmsFile)allFiles.elementAt(i);\n                        if(newfile.getState() != C_STATE_DELETED) {\n\n                            //cms.lockResource(newfile.getAbsolutePath());\n                            deleteFile(cms, newfile);\n                        }\n                    }\n\n                    // now delete all subfolders\n                    for(int i = 0;i < allFolders.size();i++) {\n                        CmsFolder folder = (CmsFolder)allFolders.elementAt(allFolders.size() - i - 1);\n                        if(folder.getState() != C_STATE_DELETED) {\n\n                            //cms.lockResource(folder.getAbsolutePath());\n                            cms.deleteFolder(folder.getAbsolutePath());\n                            try {\n                                cms.deleteFolder(C_CONTENTBODYPATH + folder.getAbsolutePath().substring(1));\n                            }\n                            catch(CmsException e) {\n\n                            }\n                        }\n                    }\n\n                    // finally delete the selected folder\n                    //cms.lockResource(filename);\n                    cms.deleteFolder(filename);\n                    try {\n                        cms.deleteFolder(C_CONTENTBODYPATH + filename.substring(1));\n                    }\n                    catch(CmsException e) {\n\n                    }\n                    session.removeValue(C_PARA_DELETE);\n                    session.removeValue(C_PARA_FILE);\n                    xmlTemplateDocument.setData(\"lasturl\", lasturl);\n                    template = \"update\";\n                }\n            }\n\n        // TODO: Error handling\n        }\n\n        // set the required datablocks\n        if(action == null) {\n            String title = cms.readProperty(file.getAbsolutePath(), C_PROPERTY_TITLE);\n            if(title == null) {\n                title = \"\";\n            }\n            CmsXmlLanguageFile lang = xmlTemplateDocument.getLanguageFile();\n            CmsUser owner = cms.readOwner(file);\n            xmlTemplateDocument.setData(\"TITLE\", title);\n            xmlTemplateDocument.setData(\"STATE\", getState(cms, file, lang));\n            xmlTemplateDocument.setData(\"OWNER\", Utils.getFullName(owner));\n            xmlTemplateDocument.setData(\"GROUP\", cms.readGroup(file).getName());\n            xmlTemplateDocument.setData(\"FILENAME\", file.getName());\n        }\n\n        // process the selected template\n        return startProcessing(cms, xmlTemplateDocument, \"\", parameters, template);\n    }","commit_id":"73c6704872ae9f143ed5d45162b7213affa689fe","url":"https://github.com/alkacon/opencms-core"},{"original_method":"private void calculatePackageSpaces(\n        ResolveSession session,\n        Resource resource,\n        Candidates allCandidates,\n        Map<Resource, Packages> resourcePkgMap,\n        Map<Capability, Set<Resource>> usesCycleMap,\n        Set<Resource> cycle)\n    {\n        if (cycle.contains(resource))\n        {\n            return;\n        }\n        cycle.add(resource);\n\n        // Make sure package space hasn't already been calculated.\n        Packages resourcePkgs = resourcePkgMap.get(resource);\n        if (resourcePkgs != null)\n        {\n            if (resourcePkgs.m_isCalculated)\n            {\n                return;\n            }\n            else\n            {\n                resourcePkgs.m_isCalculated = true;\n            }\n        }\n\n        // Create a list for requirement and proposed candidate\n        // capability or actual capability if resource is resolved or not.\n        List<WireCandidate> wireCandidates = new ArrayList<WireCandidate>();\n        boolean isDynamicImporting = false;\n        Wiring wiring = session.getContext().getWirings().get(resource);\n        if (wiring != null)\n        {\n            // Use wires to get actual requirements and satisfying capabilities.\n            for (Wire wire : wiring.getRequiredResourceWires(null))\n            {\n                // Wrap the requirement as a hosted requirement if it comes\n                // from a fragment, since we will need to know the host. We\n                // also need to wrap if the requirement is a dynamic import,\n                // since that requirement will be shared with any other\n                // matching dynamic imports.\n                Requirement r = wire.getRequirement();\n                if (!r.getResource().equals(wire.getRequirer())\n                    || Util.isDynamic(r))\n                {\n                    r = new WrappedRequirement(wire.getRequirer(), r);\n                }\n                // Wrap the capability as a hosted capability if it comes\n                // from a fragment, since we will need to know the host.\n                Capability c = wire.getCapability();\n                if (!c.getResource().equals(wire.getProvider()))\n                {\n                    c = new WrappedCapability(wire.getProvider(), c);\n                }\n                wireCandidates.add(new WireCandidate(r, c));\n            }\n\n            // Since the resource is resolved, it could be dynamically importing,\n            // so check to see if there are candidates for any of its dynamic\n            // imports.\n            //\n            // NOTE: If the resource is dynamically importing, the fact that\n            // the dynamic import is added here last to the\n            // list is used later when checking to see if the package being\n            // dynamically imported shadows an existing provider.\n            for (Requirement req : wiring.getResourceRequirements(null))\n            {\n                if (!Util.isDynamic(req))\n                {\n                    continue;\n                }\n                // Grab first (i.e., highest priority) candidate.\n                Capability cap = allCandidates.getFirstCandidate(req);\n                // Optional requirements may not have any candidates.\n                if (cap == null)\n                {\n                    continue;\n                }\n                wireCandidates.add(new WireCandidate(req, cap));\n                isDynamicImporting = true;\n                // Can only dynamically import one at a time, so break\n                // out of the loop after the first.\n                break;\n            }\n        }\n        else\n        {\n            for (Requirement req : resource.getRequirements(null))\n            {\n                if (!Util.isDynamic(req))\n                {\n                    // Get the candidates for the current requirement.\n                    List<Capability> candCaps = allCandidates.getCandidates(req);\n                    // Optional requirements may not have any candidates.\n                    if (candCaps == null)\n                    {\n                        continue;\n                    }\n\n                    // For multiple cardinality requirements, we need to grab\n                    // all candidates.\n                    if (Util.isMultiple(req))\n                    {\n                        // Use the same requirement, but list each capability separately\n                        for (Capability cap : candCaps)\n                        {\n                            wireCandidates.add(new WireCandidate(req, cap));\n                        }\n                    }\n                    // Grab first (i.e., highest priority) candidate\n                    else\n                    {\n                        Capability cap = candCaps.get(0);\n                        wireCandidates.add(new WireCandidate(req, cap));\n                    }\n                }\n            }\n        }\n\n        // First, add all exported packages to the target resource's package space.\n        calculateExportedPackages(session.getContext(), resource, allCandidates, resourcePkgMap);\n        resourcePkgs = resourcePkgMap.get(resource);\n\n        // Second, add all imported packages to the target resource's package space.\n        for (int i = 0; i < wireCandidates.size(); i++)\n        {\n            WireCandidate wireCandidate = wireCandidates.get(i);\n            Requirement req = wireCandidate.requirement;\n            Capability cap = wireCandidate.capability;\n            calculateExportedPackages(\n                session.getContext(), cap.getResource(), allCandidates, resourcePkgMap);\n\n            // If this resource is dynamically importing, then the last requirement\n            // is the dynamic import being resolved, since it is added last to the\n            // parallel lists above. For the dynamically imported package, make\n            // sure that the resource doesn't already have a provider for that\n            // package, which would be illegal and shouldn't be allowed.\n            if (isDynamicImporting && ((i + 1) == wireCandidates.size()))\n            {\n                String pkgName = (String) cap.getAttributes().get(PackageNamespace.PACKAGE_NAMESPACE);\n                if (resourcePkgs.m_exportedPkgs.containsKey(pkgName)\n                    || resourcePkgs.m_importedPkgs.containsKey(pkgName)\n                    || resourcePkgs.m_requiredPkgs.containsKey(pkgName))\n                {\n                    throw new IllegalArgumentException(\n                        \"Resource \"\n                        + resource\n                        + \" cannot dynamically import package '\"\n                        + pkgName\n                        + \"' since it already has access to it.\");\n                }\n            }\n\n            mergeCandidatePackages(\n                session.getContext(), resource, req, cap, resourcePkgMap, allCandidates,\n                new HashMap<Resource, Set<Capability>>(), new HashMap<Resource, Set<Resource>>());\n        }\n\n        // Third, have all candidates to calculate their package spaces.\n        for (WireCandidate w : wireCandidates)\n        {\n            Capability cap = w.capability;\n            calculatePackageSpaces(\n                session, cap.getResource(), allCandidates, resourcePkgMap,\n                usesCycleMap, cycle);\n        }\n\n        // Fourth, if the target resource is unresolved or is dynamically importing,\n        // then add all the uses constraints implied by its imported and required\n        // packages to its package space.\n        // NOTE: We do not need to do this for resolved resources because their\n        // package space is consistent by definition and these uses constraints\n        // are only needed to verify the consistency of a resolving resource. The\n        // only exception is if a resolved resource is dynamically importing, then\n        // we need to calculate its uses constraints again to make sure the new\n        // import is consistent with the existing package space.\n        if ((wiring == null) || isDynamicImporting)\n        {\n            // Merge uses constraints from required capabilities.\n            for (WireCandidate w : wireCandidates)\n            {\n                Requirement req = w.requirement;\n                Capability cap = w.capability;\n                // Ignore bundle/package requirements, since they are\n                // considered below.\n                if (!req.getNamespace().equals(BundleNamespace.BUNDLE_NAMESPACE)\n                    && !req.getNamespace().equals(PackageNamespace.PACKAGE_NAMESPACE))\n                {\n                    List<Requirement> blameReqs =\n                            Collections.singletonList(req);\n\n                    mergeUses(\n                        session,\n                        resource,\n                        resourcePkgs,\n                        cap,\n                        blameReqs,\n                        cap,\n                        resourcePkgMap,\n                        usesCycleMap);\n                }\n            }\n            // Merge uses constraints from imported packages.\n            for (List<Blame> blames : resourcePkgs.m_importedPkgs.values())\n            {\n                for (Blame blame : blames)\n                {\n                    List<Requirement> blameReqs =\n                        Collections.singletonList(blame.m_reqs.get(0));\n\n                    mergeUses(\n                        session,\n                        resource,\n                        resourcePkgs,\n                        blame.m_cap,\n                        blameReqs,\n                        null,\n                        resourcePkgMap,\n                        usesCycleMap);\n                }\n            }\n            // Merge uses constraints from required bundles.\n            for (List<Blame> blames : resourcePkgs.m_requiredPkgs.values())\n            {\n                for (Blame blame : blames)\n                {\n                    List<Requirement> blameReqs =\n                        Collections.singletonList(blame.m_reqs.get(0));\n\n                    mergeUses(\n                        session,\n                        resource,\n                        resourcePkgs,\n                        blame.m_cap,\n                        blameReqs,\n                        null,\n                        resourcePkgMap,\n                        usesCycleMap);\n                }\n            }\n        }\n    }","id":105932,"modified_method":"private static Map<Resource, Packages> calculatePackageSpaces(\n            final ResolveSession session,\n            final Candidates allCandidates,\n            Collection<Resource> hosts)\n    {\n        // Parallel compute wire candidates\n        final Map<Resource, List<WireCandidate>> allWireCandidates = new OpenHashMap<Resource, List<WireCandidate>>();\n        for (Resource resource : hosts)\n        {\n            getWireCandidatesAndRecurse(session, allCandidates, allWireCandidates, resource);\n        }\n\n        // Parallel get all exported packages\n        final Map<Resource, Packages> allPackages = new OpenHashMap<Resource, Packages>(allCandidates.getNbResources());\n        for (final Resource resource : allWireCandidates.keySet())\n        {\n            final Packages packages = new Packages(resource);\n            allPackages.put(resource, packages);\n            calculateExportedPackages(session, allCandidates, resource, packages.m_exportedPkgs);\n        }\n\n        // Parallel compute package lists\n        for (final Resource resource : allWireCandidates.keySet())\n        {\n            getPackages(session, allCandidates, allWireCandidates, allPackages, resource, allPackages.get(resource));\n        }\n\n        // Sequential compute package sources\n        // TODO: make that parallel\n        for (Resource resource : allWireCandidates.keySet())\n        {\n            getPackageSourcesInternal(session, allPackages, resource);\n        }\n\n        // Parallel compute uses\n        for (final Resource resource : allWireCandidates.keySet())\n        {\n            computeUses(session, allWireCandidates, allPackages, resource);\n        }\n\n        return allPackages;\n    }","commit_id":"c1047d83219e94c0e64402c71d1bff7ae00e4c9e","url":"https://github.com/apache/felix"},{"original_method":"private static void calculateExportedPackages(\n        ResolveContext rc,\n        Resource resource,\n        Candidates allCandidates,\n        Map<Resource, Packages> resourcePkgMap)\n    {\n        Packages packages = resourcePkgMap.get(resource);\n        if (packages != null)\n        {\n            return;\n        }\n        packages = new Packages(resource);\n\n        // Get all exported packages.\n        Wiring wiring = rc.getWirings().get(resource);\n        List<Capability> caps = (wiring != null)\n            ? wiring.getResourceCapabilities(null)\n            : resource.getCapabilities(null);\n        Map<String, Blame> exports = packages.m_exportedPkgs;\n        for (Capability cap : caps)\n        {\n            if (cap.getNamespace().equals(PackageNamespace.PACKAGE_NAMESPACE))\n            {\n                if (!cap.getResource().equals(resource))\n                {\n                    cap = new WrappedCapability(resource, cap);\n                }\n                exports.put(\n                    (String) cap.getAttributes().get(PackageNamespace.PACKAGE_NAMESPACE),\n                    new Blame(cap, null));\n            }\n        }\n        // Remove substitutable exports that were imported.\n        // For resolved resources Wiring.getCapabilities()\n        // already excludes imported substitutable exports, but\n        // for resolving resources we must look in the candidate\n        // map to determine which exports are substitutable.\n        if (!exports.isEmpty())\n        {\n            if (wiring == null)\n            {\n                for (Requirement req : resource.getRequirements(null))\n                {\n                    if (req.getNamespace().equals(PackageNamespace.PACKAGE_NAMESPACE))\n                    {\n                        Capability cand = allCandidates.getFirstCandidate(req);\n                        if (cand != null)\n                        {\n                            String pkgName = (String) cand.getAttributes().get(PackageNamespace.PACKAGE_NAMESPACE);\n                            exports.remove(pkgName);\n                        }\n                    }\n                }\n            }\n        }\n\n        resourcePkgMap.put(resource, packages);\n    }","id":105933,"modified_method":"private static OpenHashMap<String, Blame> calculateExportedPackages(\n            ResolveSession session,\n            Candidates allCandidates,\n            Resource resource,\n            OpenHashMap<String, Blame> exports)\n    {\n        // Get all exported packages.\n        Wiring wiring = session.getContext().getWirings().get(resource);\n        List<Capability> caps = (wiring != null)\n            ? wiring.getResourceCapabilities(null)\n            : resource.getCapabilities(null);\n        for (Capability cap : caps)\n        {\n            if (cap.getNamespace().equals(PackageNamespace.PACKAGE_NAMESPACE))\n            {\n                if (!cap.getResource().equals(resource))\n                {\n                    cap = new WrappedCapability(resource, cap);\n                }\n                exports.put(\n                    (String) cap.getAttributes().get(PackageNamespace.PACKAGE_NAMESPACE),\n                    new Blame(cap, null));\n            }\n        }\n        // Remove substitutable exports that were imported.\n        // For resolved resources Wiring.getCapabilities()\n        // already excludes imported substitutable exports, but\n        // for resolving resources we must look in the candidate\n        // map to determine which exports are substitutable.\n        if (!exports.isEmpty())\n        {\n            if (wiring == null)\n            {\n                for (Requirement req : resource.getRequirements(null))\n                {\n                    if (req.getNamespace().equals(PackageNamespace.PACKAGE_NAMESPACE))\n                    {\n                        Capability cand = allCandidates.getFirstCandidate(req);\n                        if (cand != null)\n                        {\n                            String pkgName = (String) cand.getAttributes().get(PackageNamespace.PACKAGE_NAMESPACE);\n                            exports.remove(pkgName);\n                        }\n                    }\n                }\n            }\n        }\n        return exports;\n    }","commit_id":"c1047d83219e94c0e64402c71d1bff7ae00e4c9e","url":"https://github.com/apache/felix"},{"original_method":"private ResolutionError checkConsistency(\n        ResolveSession session,\n        Candidates allCandidates,\n        Map<Resource, ResolutionError> currentFaultyResources,\n        Map<Resource, Resource> hosts,\n        boolean dynamic)\n    {\n        Map<Resource, Packages> resourcePkgMap =\n                new HashMap<Resource, Packages>(allCandidates.getNbResources());\n        // Reuse a resultCache map for checking package consistency\n        // for all resources.\n        Map<Resource, Object> resultCache =\n                new HashMap<Resource, Object>();\n        // Check the package space consistency for all 'root' resources.\n        ResolutionError error = null;\n        for (Entry<Resource, Resource> entry : hosts.entrySet())\n        {\n            calculatePackageSpaces(\n                    session, entry.getValue(), allCandidates,\n                    resourcePkgMap, new HashMap<Capability, Set<Resource>>(256),\n                    new HashSet<Resource>(64));\n//System.out.println(\"+++ PACKAGE SPACES START +++\");\n//dumpResourcePkgMap(resourcePkgMap);\n//System.out.println(\"+++ PACKAGE SPACES END +++\");\n\n            ResolutionError rethrow = checkPackageSpaceConsistency(\n                    session, entry.getValue(),\n                    allCandidates, dynamic, resourcePkgMap, resultCache);\n            if (rethrow != null)\n            {\n                Resource faultyResource = entry.getKey();\n                // check that the faulty requirement is not from a fragment\n                for (Requirement faultyReq : rethrow.getUnresolvedRequirements())\n                {\n                    if (faultyReq instanceof WrappedRequirement)\n                    {\n                        faultyResource =\n                                ((WrappedRequirement) faultyReq)\n                                        .getDeclaredRequirement().getResource();\n                        break;\n                    }\n                }\n                currentFaultyResources.put(faultyResource, rethrow);\n                error = rethrow;\n            }\n        }\n        return error;\n    }","id":105934,"modified_method":"private ResolutionError checkConsistency(\n        ResolveSession session,\n        Candidates allCandidates,\n        Map<Resource, ResolutionError> currentFaultyResources,\n        Map<Resource, Resource> hosts,\n        boolean dynamic)\n    {\n        // Calculate package spaces\n        Map<Resource, Packages> resourcePkgMap =\n            calculatePackageSpaces(session, allCandidates, hosts.values());\n        ResolutionError error = null;\n        // Check package consistency\n        Map<Resource, Object> resultCache =\n                new OpenHashMap<Resource, Object>(resourcePkgMap.size());\n        for (Entry<Resource, Resource> entry : hosts.entrySet())\n        {\n            ResolutionError rethrow = checkPackageSpaceConsistency(\n                    session, entry.getValue(),\n                    allCandidates, dynamic, resourcePkgMap, resultCache);\n            if (rethrow != null)\n            {\n                Resource faultyResource = entry.getKey();\n                // check that the faulty requirement is not from a fragment\n                for (Requirement faultyReq : rethrow.getUnresolvedRequirements())\n                {\n                    if (faultyReq instanceof WrappedRequirement)\n                    {\n                        faultyResource =\n                                ((WrappedRequirement) faultyReq)\n                                        .getDeclaredRequirement().getResource();\n                        break;\n                    }\n                }\n                currentFaultyResources.put(faultyResource, rethrow);\n                error = rethrow;\n            }\n        }\n        return error;\n    }","commit_id":"c1047d83219e94c0e64402c71d1bff7ae00e4c9e","url":"https://github.com/apache/felix"},{"original_method":"private static void mergeUses(\n        ResolveSession session, Resource current, Packages currentPkgs,\n        Capability mergeCap, List<Requirement> blameReqs, Capability matchingCap,\n        Map<Resource, Packages> resourcePkgMap,\n        Map<Capability, Set<Resource>> cycleMap)\n    {\n        // If there are no uses, then just return.\n        // If the candidate resource is the same as the current resource,\n        // then we don't need to verify and merge the uses constraints\n        // since this will happen as we build up the package space.\n        if (current.equals(mergeCap.getResource()))\n        {\n            return;\n        }\n\n        // Check for cycles.\n        Set<Resource> set = cycleMap.get(mergeCap);\n        if (set == null)\n        {\n            set = new HashSet<Resource>();\n            cycleMap.put(mergeCap, set);\n        }\n        if (!set.add(current))\n        {\n            return;\n        }\n\n        for (Capability candSourceCap : getPackageSources(session, mergeCap, resourcePkgMap))\n        {\n            List<String> uses;\n// TODO: RFC-112 - Need impl-specific type\n//            if (candSourceCap instanceof FelixCapability)\n//            {\n//                uses = ((FelixCapability) candSourceCap).getUses();\n//            }\n//            else\n            {\n                String s = candSourceCap.getDirectives().get(Namespace.CAPABILITY_USES_DIRECTIVE);\n                if (s != null && !s.isEmpty())\n                {\n                    // Parse these uses directive.\n                    uses = session.getUsesCache().get(s);\n                    if (uses == null)\n                    {\n                        uses = parseUses(s);\n                        session.getUsesCache().put(s, uses);\n                    }\n                }\n                else\n                {\n                    continue;\n                }\n            }\n            Packages candSourcePkgs = resourcePkgMap.get(candSourceCap.getResource());\n            for (String usedPkgName : uses)\n            {\n                List<Blame> candSourceBlames;\n                // Check to see if the used package is exported.\n                Blame candExportedBlame = candSourcePkgs.m_exportedPkgs.get(usedPkgName);\n                if (candExportedBlame != null)\n                {\n                    candSourceBlames = Collections.singletonList(candExportedBlame);\n                }\n                else\n                {\n                    // If the used package is not exported, check to see if it\n                    // is required.\n                    candSourceBlames = candSourcePkgs.m_requiredPkgs.get(usedPkgName);\n                    // Lastly, if the used package is not required, check to see if it\n                    // is imported.\n                    if (candSourceBlames == null)\n                    {\n                        candSourceBlames = candSourcePkgs.m_importedPkgs.get(usedPkgName);\n                    }\n                }\n\n                // If the used package cannot be found, then just ignore it\n                // since it has no impact.\n                if (candSourceBlames == null)\n                {\n                    continue;\n                }\n\n                ArrayMap<Capability, UsedBlames> usedPkgBlames = currentPkgs.m_usedPkgs.getOrCompute(usedPkgName);\n                for (Blame blame : candSourceBlames)\n                {\n                    if (blame.m_reqs != null)\n                    {\n                        List<Requirement> blameReqs2 = new ArrayList<Requirement>(blameReqs.size() + 1);\n                        blameReqs2.addAll(blameReqs);\n                        // Only add the last requirement in blame chain because\n                        // that is the requirement wired to the blamed capability\n                        blameReqs2.add(blame.m_reqs.get(blame.m_reqs.size() - 1));\n                        addUsedBlame(usedPkgBlames, blame.m_cap, blameReqs2, matchingCap);\n                        mergeUses(session, current, currentPkgs, blame.m_cap, blameReqs2, matchingCap,\n                            resourcePkgMap, cycleMap);\n                    }\n                    else\n                    {\n                        addUsedBlame(usedPkgBlames, blame.m_cap, blameReqs, matchingCap);\n                        mergeUses(session, current, currentPkgs, blame.m_cap, blameReqs, matchingCap,\n                            resourcePkgMap, cycleMap);\n                    }\n                }\n            }\n        }\n    }","id":105935,"modified_method":"private static void mergeUses(\n        ResolveSession session, Resource current, Packages currentPkgs,\n        Capability mergeCap, List<Requirement> blameReqs, Capability matchingCap,\n        Map<Resource, Packages> resourcePkgMap,\n        Set<Capability> cycleMap)\n    {\n        // If there are no uses, then just return.\n        // If the candidate resource is the same as the current resource,\n        // then we don't need to verify and merge the uses constraints\n        // since this will happen as we build up the package space.\n        if (current.equals(mergeCap.getResource()))\n        {\n            return;\n        }\n\n        // Check for cycles.\n        if (!cycleMap.add(mergeCap))\n        {\n            return;\n        }\n\n        for (Capability candSourceCap : getPackageSources(session, mergeCap, resourcePkgMap))\n        {\n            List<String> uses;\n// TODO: RFC-112 - Need impl-specific type\n//            if (candSourceCap instanceof FelixCapability)\n//            {\n//                uses = ((FelixCapability) candSourceCap).getUses();\n//            }\n//            else\n            {\n                String s = candSourceCap.getDirectives().get(Namespace.CAPABILITY_USES_DIRECTIVE);\n                if (s != null && !s.isEmpty())\n                {\n                    // Parse these uses directive.\n                    uses = session.getUsesCache().get(s);\n                    if (uses == null)\n                    {\n                        uses = parseUses(s);\n                        session.getUsesCache().put(s, uses);\n                    }\n                }\n                else\n                {\n                    continue;\n                }\n            }\n            Packages candSourcePkgs = resourcePkgMap.get(candSourceCap.getResource());\n            for (String usedPkgName : uses)\n            {\n                List<Blame> candSourceBlames;\n                // Check to see if the used package is exported.\n                Blame candExportedBlame = candSourcePkgs.m_exportedPkgs.get(usedPkgName);\n                if (candExportedBlame != null)\n                {\n                    candSourceBlames = Collections.singletonList(candExportedBlame);\n                }\n                else\n                {\n                    // If the used package is not exported, check to see if it\n                    // is required.\n                    candSourceBlames = candSourcePkgs.m_requiredPkgs.get(usedPkgName);\n                    // Lastly, if the used package is not required, check to see if it\n                    // is imported.\n                    if (candSourceBlames == null)\n                    {\n                        candSourceBlames = candSourcePkgs.m_importedPkgs.get(usedPkgName);\n                    }\n                }\n\n                // If the used package cannot be found, then just ignore it\n                // since it has no impact.\n                if (candSourceBlames == null)\n                {\n                    continue;\n                }\n\n                ArrayMap<Capability, UsedBlames> usedPkgBlames = currentPkgs.m_usedPkgs.getOrCompute(usedPkgName);\n                for (Blame blame : candSourceBlames)\n                {\n                    if (blame.m_reqs != null)\n                    {\n                        List<Requirement> blameReqs2 = new ArrayList<Requirement>(blameReqs.size() + 1);\n                        blameReqs2.addAll(blameReqs);\n                        // Only add the last requirement in blame chain because\n                        // that is the requirement wired to the blamed capability\n                        blameReqs2.add(blame.m_reqs.get(blame.m_reqs.size() - 1));\n                        addUsedBlame(usedPkgBlames, blame.m_cap, blameReqs2, matchingCap);\n                        mergeUses(session, current, currentPkgs, blame.m_cap, blameReqs2, matchingCap,\n                            resourcePkgMap, cycleMap);\n                    }\n                    else\n                    {\n                        addUsedBlame(usedPkgBlames, blame.m_cap, blameReqs, matchingCap);\n                        mergeUses(session, current, currentPkgs, blame.m_cap, blameReqs, matchingCap,\n                            resourcePkgMap, cycleMap);\n                    }\n                }\n            }\n        }\n    }","commit_id":"c1047d83219e94c0e64402c71d1bff7ae00e4c9e","url":"https://github.com/apache/felix"},{"original_method":"public Map<Resource, List<Wire>> resolve(ResolveContext rc) throws ResolutionException\n    {\n        ResolveSession session = new ResolveSession(rc);\n        Map<Resource, List<Wire>> wireMap =\n            new HashMap<Resource, List<Wire>>();\n\n        // Make copies of arguments in case we want to modify them.\n        Collection<Resource> mandatoryResources = new ArrayList<Resource>(rc.getMandatoryResources());\n        Collection<Resource> optionalResources = new ArrayList<Resource>(rc.getOptionalResources());\n        // keeps track of valid on demand fragments that we have seen.\n        // a null value or TRUE indicate it is valid\n        Map<Resource, Boolean> validOnDemandResources = new HashMap<Resource, Boolean>(0);\n\n        boolean retry;\n        do\n        {\n            retry = false;\n            try\n            {\n                // Create object to hold all candidates.\n                Candidates allCandidates = new Candidates(validOnDemandResources);\n\n                // Populate mandatory resources; since these are mandatory\n                // resources, failure throws a resolve exception.\n                for (Iterator<Resource> it = mandatoryResources.iterator();\n                    it.hasNext();)\n                {\n                    Resource resource = it.next();\n                    if (Util.isFragment(resource) || (rc.getWirings().get(resource) == null))\n                    {\n                        ResolutionError error = allCandidates.populate(rc, resource, Candidates.MANDATORY);\n                        if (error != null)\n                        {\n                            throw error.toException();\n                        }\n                    }\n                    else\n                    {\n                        it.remove();\n                    }\n                }\n\n                // Populate optional resources; since these are optional\n                // resources, failure does not throw a resolve exception.\n                for (Resource resource : optionalResources)\n                {\n                    boolean isFragment = Util.isFragment(resource);\n                    if (isFragment || (rc.getWirings().get(resource) == null))\n                    {\n                        ResolutionError error = allCandidates.populate(rc, resource, Candidates.OPTIONAL);\n                        if (error != null)\n                        {\n                            throw error.toException();\n                        }\n                    }\n                }\n\n                // Merge any fragments into hosts.\n                ResolutionError rethrow = allCandidates.prepare(rc);\n                if (rethrow != null)\n                {\n                    throw rethrow.toException();\n                }\n\n                // Create a combined list of populated resources; for\n                // optional resources. We do not need to consider ondemand\n                // fragments, since they will only be pulled in if their\n                // host is already present.\n                Set<Resource> allResources =\n                    new LinkedHashSet<Resource>(mandatoryResources);\n                for (Resource resource : optionalResources)\n                {\n                    if (allCandidates.isPopulated(resource))\n                    {\n                        allResources.add(resource);\n                    }\n                }\n\n                List<Candidates> usesPermutations = session.getUsesPermutations();\n                List<Candidates> importPermutations = session.getImportPermutations();\n\n                // Record the initial candidate permutation.\n                usesPermutations.add(allCandidates);\n\n                // If a populated resource is a fragment, then its host\n                // must ultimately be verified, so store its host requirement\n                // to use for package space calculation.\n                Map<Resource, Requirement> hostReqs = new HashMap<Resource, Requirement>();\n                for (Resource resource : allResources)\n                {\n                    if (Util.isFragment(resource))\n                    {\n                        hostReqs.put(\n                            resource,\n                            resource.getRequirements(HostNamespace.HOST_NAMESPACE).get(0));\n                    }\n                }\n\n                Set<Object> processedDeltas = new HashSet<Object>();\n                Map<Resource, ResolutionError> faultyResources = null;\n                do\n                {\n                    allCandidates = (usesPermutations.size() > 0)\n                            ? usesPermutations.remove(0)\n                            : (importPermutations.size() > 0\n                                    ? importPermutations.remove(0)\n                                    : null);\n                    if (allCandidates == null)\n                    {\n                        break;\n                    }\n                    // The delta is used to detect that we have already processed this particular permutation\n                    if (!processedDeltas.add(allCandidates.getDelta()))\n                    {\n                        // This permutation has already been tried\n                        // Don't try it again\n                        continue;\n                    }\n\n                    // Null out each time a new permutation is attempted.\n                    // We only use this to store a valid permutation which is a\n                    // delta of the current permutation.\n                    session.setMultipleCardCandidates(null);\n\n//allCandidates.dump();\n\n                    rethrow = allCandidates.checkSubstitutes(importPermutations);\n                    if (rethrow != null)\n                    {\n                        continue;\n                    }\n\n                    // Compute the list of hosts\n                    Map<Resource, Resource> hosts = new LinkedHashMap<Resource, Resource>();\n                    for (Resource resource : allResources)\n                    {\n                        // If we are resolving a fragment, then get its\n                        // host candidate and verify it instead.\n                        Requirement hostReq = hostReqs.get(resource);\n                        if (hostReq != null)\n                        {\n                            Capability hostCap = allCandidates.getFirstCandidate(hostReq);\n                            // If the resource is an already resolved fragment and can not\n                            // be attached to new hosts, there will be no matching host,\n                            // so ignore this resource\n                            if (hostCap == null)\n                            {\n                                continue;\n                            }\n                            resource = hostCap.getResource();\n                        }\n                        hosts.put(resource, allCandidates.getWrappedHost(resource));\n                    }\n\n                    Map<Resource, ResolutionError> currentFaultyResources = new HashMap<Resource, ResolutionError>();\n                    rethrow = checkConsistency(session, allCandidates, currentFaultyResources, hosts, false);\n\n                    if (!currentFaultyResources.isEmpty())\n                    {\n                        if (faultyResources == null)\n                        {\n                            faultyResources = currentFaultyResources;\n                        }\n                        else if (faultyResources.size() > currentFaultyResources.size())\n                        {\n                            // save the optimal faultyResources which has less\n                            faultyResources = currentFaultyResources;\n                        }\n                    }\n                }\n                while (rethrow != null);\n\n                // If there is a resolve exception, then determine if an\n                // optionally resolved resource is to blame (typically a fragment).\n                // If so, then remove the optionally resolved resolved and try\n                // again; otherwise, rethrow the resolve exception.\n                if (rethrow != null)\n                {\n                    if (faultyResources != null)\n                    {\n                        Set<Resource> resourceKeys = faultyResources.keySet();\n                        retry = (optionalResources.removeAll(resourceKeys));\n                        for (Resource faultyResource : resourceKeys)\n                        {\n                            Boolean valid = validOnDemandResources.get(faultyResource);\n                            if (valid != null && valid)\n                            {\n                                // This was an ondemand resource.\n                                // Invalidate it and try again.\n                                validOnDemandResources.put(faultyResource, Boolean.FALSE);\n                                retry = true;\n                            }\n                        }\n                        // log all the resolution exceptions for the uses constraint violations\n                        for (Map.Entry<Resource, ResolutionError> usesError : faultyResources.entrySet())\n                        {\n                            m_logger.logUsesConstraintViolation(usesError.getKey(), usesError.getValue());\n                        }\n                    }\n                    if (!retry)\n                    {\n                        throw rethrow.toException();\n                    }\n                }\n                // If there is no exception to rethrow, then this was a clean\n                // resolve, so populate the wire map.\n                else\n                {\n                    if (session.getMultipleCardCandidates() != null)\n                    {\n                        // Candidates for multiple cardinality requirements were\n                        // removed in order to provide a consistent class space.\n                        // Use the consistent permutation\n                        allCandidates = session.getMultipleCardCandidates();\n                    }\n                    for (Resource resource : allResources)\n                    {\n                        Resource target = resource;\n\n                        // If we are resolving a fragment, then we\n                        // actually want to populate its host's wires.\n                        Requirement hostReq = hostReqs.get(resource);\n                        if (hostReq != null)\n                        {\n                            Capability hostCap = allCandidates.getFirstCandidate(hostReq);\n                            // If the resource is an already resolved fragment and can not\n                            // be attached to new hosts, there will be no matching host,\n                            // so ignore this resource\n                            if (hostCap == null)\n                            {\n                                continue;\n                            }\n                            target = hostCap.getResource();\n                        }\n\n                        if (allCandidates.isPopulated(target))\n                        {\n                            wireMap =\n                                populateWireMap(\n                                    rc, allCandidates.getWrappedHost(target),\n                                    wireMap, allCandidates);\n                        }\n                    }\n                }\n            }\n            finally\n            {\n                // Always clear the state.\n                session.getUsesPermutations().clear();\n                session.getImportPermutations().clear();\n                session.setMultipleCardCandidates(null);\n            }\n        }\n        while (retry);\n\n        return wireMap;\n    }","id":105936,"modified_method":"public Map<Resource, List<Wire>> resolve(ResolveContext rc) throws ResolutionException\n    {\n        ResolveSession session = new ResolveSession(rc);\n        Map<Resource, List<Wire>> wireMap =\n            new HashMap<Resource, List<Wire>>();\n\n        // Make copies of arguments in case we want to modify them.\n        Collection<Resource> mandatoryResources = new ArrayList<Resource>(rc.getMandatoryResources());\n        Collection<Resource> optionalResources = new ArrayList<Resource>(rc.getOptionalResources());\n        // keeps track of valid on demand fragments that we have seen.\n        // a null value or TRUE indicate it is valid\n        Map<Resource, Boolean> validOnDemandResources = new HashMap<Resource, Boolean>(0);\n\n        boolean retry;\n        do\n        {\n            retry = false;\n            try\n            {\n                // Create object to hold all candidates.\n                Candidates allCandidates = new Candidates(validOnDemandResources);\n\n                // Populate mandatory resources; since these are mandatory\n                // resources, failure throws a resolve exception.\n                for (Iterator<Resource> it = mandatoryResources.iterator();\n                    it.hasNext();)\n                {\n                    Resource resource = it.next();\n                    if (Util.isFragment(resource) || (rc.getWirings().get(resource) == null))\n                    {\n                        ResolutionError error = allCandidates.populate(rc, resource, Candidates.MANDATORY);\n                        if (error != null)\n                        {\n                            throw error.toException();\n                        }\n                    }\n                    else\n                    {\n                        it.remove();\n                    }\n                }\n\n                // Populate optional resources; since these are optional\n                // resources, failure does not throw a resolve exception.\n                for (Resource resource : optionalResources)\n                {\n                    boolean isFragment = Util.isFragment(resource);\n                    if (isFragment || (rc.getWirings().get(resource) == null))\n                    {\n                        ResolutionError error = allCandidates.populate(rc, resource, Candidates.OPTIONAL);\n                        if (error != null)\n                        {\n                            throw error.toException();\n                        }\n                    }\n                }\n\n                // Merge any fragments into hosts.\n                ResolutionError rethrow = allCandidates.prepare(rc);\n                if (rethrow != null)\n                {\n                    throw rethrow.toException();\n                }\n\n                // Create a combined list of populated resources; for\n                // optional resources. We do not need to consider ondemand\n                // fragments, since they will only be pulled in if their\n                // host is already present.\n                Set<Resource> allResources =\n                    new LinkedHashSet<Resource>(mandatoryResources);\n                for (Resource resource : optionalResources)\n                {\n                    if (allCandidates.isPopulated(resource))\n                    {\n                        allResources.add(resource);\n                    }\n                }\n\n                List<Candidates> usesPermutations = session.getUsesPermutations();\n                List<Candidates> importPermutations = session.getImportPermutations();\n\n                // Record the initial candidate permutation.\n                usesPermutations.add(allCandidates);\n\n                // If a populated resource is a fragment, then its host\n                // must ultimately be verified, so store its host requirement\n                // to use for package space calculation.\n                Map<Resource, Requirement> hostReqs = new HashMap<Resource, Requirement>();\n                for (Resource resource : allResources)\n                {\n                    if (Util.isFragment(resource))\n                    {\n                        hostReqs.put(\n                            resource,\n                            resource.getRequirements(HostNamespace.HOST_NAMESPACE).get(0));\n                    }\n                }\n\n                Set<Object> processedDeltas = new HashSet<Object>();\n                Map<Resource, ResolutionError> faultyResources = null;\n                do\n                {\n                    allCandidates = (usesPermutations.size() > 0)\n                            ? usesPermutations.remove(0)\n                            : (importPermutations.size() > 0\n                                    ? importPermutations.remove(0)\n                                    : null);\n                    if (allCandidates == null)\n                    {\n                        break;\n                    }\n                    // The delta is used to detect that we have already processed this particular permutation\n                    if (!processedDeltas.add(allCandidates.getDelta()))\n                    {\n                        // This permutation has already been tried\n                        // Don't try it again\n                        continue;\n                    }\n\n                    // Null out each time a new permutation is attempted.\n                    // We only use this to store a valid permutation which is a\n                    // delta of the current permutation.\n                    session.setMultipleCardCandidates(null);\n\n//allCandidates.dump();\n\n                    rethrow = allCandidates.checkSubstitutes(importPermutations);\n                    if (rethrow != null)\n                    {\n                        continue;\n                    }\n\n                    // Compute the list of hosts\n                    Map<Resource, Resource> hosts = new OpenHashMap<Resource, Resource>();\n                    for (Resource resource : allResources)\n                    {\n                        // If we are resolving a fragment, then get its\n                        // host candidate and verify it instead.\n                        Requirement hostReq = hostReqs.get(resource);\n                        if (hostReq != null)\n                        {\n                            Capability hostCap = allCandidates.getFirstCandidate(hostReq);\n                            // If the resource is an already resolved fragment and can not\n                            // be attached to new hosts, there will be no matching host,\n                            // so ignore this resource\n                            if (hostCap == null)\n                            {\n                                continue;\n                            }\n                            resource = hostCap.getResource();\n                        }\n                        hosts.put(resource, allCandidates.getWrappedHost(resource));\n                    }\n\n                    Map<Resource, ResolutionError> currentFaultyResources = new HashMap<Resource, ResolutionError>();\n                    rethrow = checkConsistency(session, allCandidates, currentFaultyResources, hosts, false);\n\n                    if (!currentFaultyResources.isEmpty())\n                    {\n                        if (faultyResources == null)\n                        {\n                            faultyResources = currentFaultyResources;\n                        }\n                        else if (faultyResources.size() > currentFaultyResources.size())\n                        {\n                            // save the optimal faultyResources which has less\n                            faultyResources = currentFaultyResources;\n                        }\n                    }\n                }\n                while (rethrow != null);\n\n                // If there is a resolve exception, then determine if an\n                // optionally resolved resource is to blame (typically a fragment).\n                // If so, then remove the optionally resolved resolved and try\n                // again; otherwise, rethrow the resolve exception.\n                if (rethrow != null)\n                {\n                    if (faultyResources != null)\n                    {\n                        Set<Resource> resourceKeys = faultyResources.keySet();\n                        retry = (optionalResources.removeAll(resourceKeys));\n                        for (Resource faultyResource : resourceKeys)\n                        {\n                            Boolean valid = validOnDemandResources.get(faultyResource);\n                            if (valid != null && valid)\n                            {\n                                // This was an ondemand resource.\n                                // Invalidate it and try again.\n                                validOnDemandResources.put(faultyResource, Boolean.FALSE);\n                                retry = true;\n                            }\n                        }\n                        // log all the resolution exceptions for the uses constraint violations\n                        for (Map.Entry<Resource, ResolutionError> usesError : faultyResources.entrySet())\n                        {\n                            m_logger.logUsesConstraintViolation(usesError.getKey(), usesError.getValue());\n                        }\n                    }\n                    if (!retry)\n                    {\n                        throw rethrow.toException();\n                    }\n                }\n                // If there is no exception to rethrow, then this was a clean\n                // resolve, so populate the wire map.\n                else\n                {\n                    if (session.getMultipleCardCandidates() != null)\n                    {\n                        // Candidates for multiple cardinality requirements were\n                        // removed in order to provide a consistent class space.\n                        // Use the consistent permutation\n                        allCandidates = session.getMultipleCardCandidates();\n                    }\n                    for (Resource resource : allResources)\n                    {\n                        Resource target = resource;\n\n                        // If we are resolving a fragment, then we\n                        // actually want to populate its host's wires.\n                        Requirement hostReq = hostReqs.get(resource);\n                        if (hostReq != null)\n                        {\n                            Capability hostCap = allCandidates.getFirstCandidate(hostReq);\n                            // If the resource is an already resolved fragment and can not\n                            // be attached to new hosts, there will be no matching host,\n                            // so ignore this resource\n                            if (hostCap == null)\n                            {\n                                continue;\n                            }\n                            target = hostCap.getResource();\n                        }\n\n                        if (allCandidates.isPopulated(target))\n                        {\n                            wireMap =\n                                populateWireMap(\n                                    rc, allCandidates.getWrappedHost(target),\n                                    wireMap, allCandidates);\n                        }\n                    }\n                }\n            }\n            finally\n            {\n                // Always clear the state.\n                session.getUsesPermutations().clear();\n                session.getImportPermutations().clear();\n                session.setMultipleCardCandidates(null);\n            }\n        }\n        while (retry);\n\n        return wireMap;\n    }","commit_id":"c1047d83219e94c0e64402c71d1bff7ae00e4c9e","url":"https://github.com/apache/felix"},{"original_method":"private void mergeCandidatePackages(\n        ResolveContext rc, Resource current, Requirement currentReq,\n        Capability candCap, Map<Resource, Packages> resourcePkgMap,\n        Candidates allCandidates, Map<Resource, Set<Capability>> cycles,\n        HashMap<Resource, Set<Resource>> visitedRequiredBundlesMap)\n    {\n        Set<Capability> cycleCaps = cycles.get(current);\n        if (cycleCaps == null)\n        {\n            cycleCaps = new HashSet<Capability>();\n            cycles.put(current, cycleCaps);\n        }\n        if (!cycleCaps.add(candCap))\n        {\n            return;\n        }\n\n        if (candCap.getNamespace().equals(PackageNamespace.PACKAGE_NAMESPACE))\n        {\n            mergeCandidatePackage(\n                resourcePkgMap.get(current).m_importedPkgs,\n                currentReq, candCap);\n        }\n        else if (candCap.getNamespace().equals(BundleNamespace.BUNDLE_NAMESPACE))\n        {\n// TODO: FELIX3 - THIS NEXT LINE IS A HACK. IMPROVE HOW/WHEN WE CALCULATE EXPORTS.\n            calculateExportedPackages(\n                rc, candCap.getResource(), allCandidates, resourcePkgMap);\n\n            // Get the candidate's package space to determine which packages\n            // will be visible to the current resource.\n            Packages candPkgs = resourcePkgMap.get(candCap.getResource());\n\n            Set<Resource> visitedRequiredBundles = visitedRequiredBundlesMap.get(current);\n            if (visitedRequiredBundles == null)\n            {\n                visitedRequiredBundles = new HashSet<Resource>();\n                visitedRequiredBundlesMap.put(current, visitedRequiredBundles);\n            }\n            if (visitedRequiredBundles.add(candCap.getResource()))\n            {\n                // We have to merge all exported packages from the candidate,\n                // since the current resource requires it.\n                for (Blame blame : candPkgs.m_exportedPkgs.values())\n                {\n                    mergeCandidatePackage(\n                        resourcePkgMap.get(current).m_requiredPkgs,\n                        currentReq,\n                        blame.m_cap);\n                }\n            }\n\n            // If the candidate requires any other bundles with reexport visibility,\n            // then we also need to merge their packages too.\n            Wiring candWiring = rc.getWirings().get(candCap.getResource());\n            if (candWiring != null)\n            {\n                for (Wire w : candWiring.getRequiredResourceWires(null))\n                {\n                    if (w.getRequirement().getNamespace()\n                        .equals(BundleNamespace.BUNDLE_NAMESPACE))\n                    {\n                        if (Util.isReexport(w.getRequirement()))\n                        {\n                            mergeCandidatePackages(\n                                rc,\n                                current,\n                                currentReq,\n                                w.getCapability(),\n                                resourcePkgMap,\n                                allCandidates,\n                                cycles, visitedRequiredBundlesMap);\n                        }\n                    }\n                }\n            }\n            else\n            {\n                for (Requirement req : candCap.getResource().getRequirements(null))\n                {\n                    if (req.getNamespace().equals(BundleNamespace.BUNDLE_NAMESPACE))\n                    {\n                        if (Util.isReexport(req))\n                        {\n                            Capability cap = allCandidates.getFirstCandidate(req);\n                            if (cap != null) {\n                                mergeCandidatePackages(\n                                        rc,\n                                        current,\n                                        currentReq,\n                                        cap,\n                                        resourcePkgMap,\n                                        allCandidates,\n                                        cycles,\n                                        visitedRequiredBundlesMap);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        cycles.remove(current);\n    }","id":105937,"modified_method":"private static void mergeCandidatePackages(\n            ResolveSession session,\n            Map<Resource, Packages> resourcePkgMap,\n            Candidates allCandidates,\n            Packages packages,\n            Requirement currentReq,\n            Capability candCap,\n            Set<Capability> capabilityCycles,\n            Set<Resource> visitedRequiredBundles)\n    {\n        if (!capabilityCycles.add(candCap))\n        {\n            return;\n        }\n\n        if (candCap.getNamespace().equals(PackageNamespace.PACKAGE_NAMESPACE))\n        {\n            mergeCandidatePackage(\n                packages.m_importedPkgs,\n                currentReq, candCap);\n        }\n        else if (candCap.getNamespace().equals(BundleNamespace.BUNDLE_NAMESPACE))\n        {\n\n            // Get the candidate's package space to determine which packages\n            // will be visible to the current resource.\n            if (visitedRequiredBundles.add(candCap.getResource()))\n            {\n                // We have to merge all exported packages from the candidate,\n                // since the current resource requires it.\n                for (Blame blame : resourcePkgMap.get(candCap.getResource()).m_exportedPkgs.values())\n                {\n                    mergeCandidatePackage(\n                        packages.m_requiredPkgs,\n                        currentReq,\n                        blame.m_cap);\n                }\n            }\n\n            // If the candidate requires any other bundles with reexport visibility,\n            // then we also need to merge their packages too.\n            Wiring candWiring = session.getContext().getWirings().get(candCap.getResource());\n            if (candWiring != null)\n            {\n                for (Wire w : candWiring.getRequiredResourceWires(null))\n                {\n                    if (w.getRequirement().getNamespace()\n                        .equals(BundleNamespace.BUNDLE_NAMESPACE))\n                    {\n                        if (Util.isReexport(w.getRequirement()))\n                        {\n                            mergeCandidatePackages(\n                                session,\n                                resourcePkgMap,\n                                allCandidates,\n                                packages,\n                                currentReq,\n                                w.getCapability(),\n                                capabilityCycles,\n                                visitedRequiredBundles);\n                        }\n                    }\n                }\n            }\n            else\n            {\n                for (Requirement req : candCap.getResource().getRequirements(null))\n                {\n                    if (req.getNamespace().equals(BundleNamespace.BUNDLE_NAMESPACE))\n                    {\n                        if (Util.isReexport(req))\n                        {\n                            Capability cap = allCandidates.getFirstCandidate(req);\n                            if (cap != null)\n                            {\n                                mergeCandidatePackages(\n                                        session,\n                                        resourcePkgMap,\n                                        allCandidates,\n                                        packages,\n                                        currentReq,\n                                        cap,\n                                        capabilityCycles,\n                                        visitedRequiredBundles);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"c1047d83219e94c0e64402c71d1bff7ae00e4c9e","url":"https://github.com/apache/felix"},{"original_method":"private void findTasks(Project project, Map<String, TaskSelectorBuilder> tasks, Collection<String> visibleTasks) {\n        for (Project child : project.getChildProjects().values()) {\n            findTasks(child, tasks, visibleTasks);\n        }\n        for (Task task : taskLister.listProjectTasks(project)) {\n            TaskSelectorBuilder selectorBuilder = tasks.get(task.getName());\n            if (selectorBuilder != null) {\n                selectorBuilder.addDescription(task.getDescription());\n            } else {\n                tasks.put(task.getName(), new TaskSelectorBuilder(task.getName(), task.getDescription()));\n            }\n            if (task.getGroup() != null) {\n                visibleTasks.add(task.getName());\n            }\n        }\n    }","id":105938,"modified_method":"private void findTasks(Project project, Collection<String> tasks, Collection<String> visibleTasks) {\n        for (Project child : project.getChildProjects().values()) {\n            findTasks(child, tasks, visibleTasks);\n        }\n        for (Task task : taskLister.listProjectTasks(project)) {\n            tasks.add(task.getName());\n            if (task.getGroup() != null) {\n                visibleTasks.add(task.getName());\n            }\n        }\n    }","commit_id":"cdae5d6d12ff53cc4f22a5957ebd09fc09e7ade7","url":"https://github.com/gradle/gradle"},{"original_method":"public DefaultBuildInvocations buildAll(String modelName, Project project) {\n        if (!canBuild(modelName)) {\n            throw new GradleException(\"Unknown model name \" + modelName);\n        }\n        List<LaunchableGradleTaskSelector> selectors = Lists.newArrayList();\n        Map<String, TaskSelectorBuilder> aggregatedTasks = Maps.newLinkedHashMap();\n        Set<String> visibleTasks = Sets.newLinkedHashSet();\n        findTasks(project, aggregatedTasks, visibleTasks);\n        for (TaskSelectorBuilder selectorData : aggregatedTasks.values()) {\n            selectors.add(selectorData.build(project, visibleTasks));\n        }\n        return new DefaultBuildInvocations()\n                .setSelectors(selectors)\n                .setTasks(tasks(project));\n    }","id":105939,"modified_method":"public DefaultBuildInvocations buildAll(String modelName, Project project) {\n        if (!canBuild(modelName)) {\n            throw new GradleException(\"Unknown model name \" + modelName);\n        }\n        List<LaunchableGradleTaskSelector> selectors = Lists.newArrayList();\n        Set<String> aggregatedTasks = Sets.newLinkedHashSet();\n        Set<String> visibleTasks = Sets.newLinkedHashSet();\n        findTasks(project, aggregatedTasks, visibleTasks);\n        for (String selectorName : aggregatedTasks) {\n            selectors.add(new LaunchableGradleTaskSelector().\n                    setName(selectorName).\n                    setTaskName(selectorName).\n                    setProjectPath(project.getPath()).\n                    setDescription(project.getParent() != null\n                            ? String.format(\"%s:%s task selector\", project.getPath(), selectorName)\n                            : String.format(\"%s task selector\", selectorName)).\n                    setDisplayName(String.format(\"%s in %s and subprojects.\", selectorName, project.toString())).\n                    setPublic(visibleTasks.contains(selectorName)));\n        }\n        return new DefaultBuildInvocations()\n                .setSelectors(selectors)\n                .setTasks(tasks(project));\n    }","commit_id":"cdae5d6d12ff53cc4f22a5957ebd09fc09e7ade7","url":"https://github.com/gradle/gradle"},{"original_method":"private void findTasks(Project project, Map<String, TaskSelectorBuilder> tasks, Collection<String> visibleTasks) {\n        for (Project child : project.getChildProjects().values()) {\n            findTasks(child, tasks, visibleTasks);\n        }\n        for (Task task : taskLister.listProjectTasks(project)) {\n            TaskSelectorBuilder selectorBuilder = tasks.get(task.getName());\n            if (selectorBuilder != null) {\n                selectorBuilder.addDescription(task.getDescription());\n            } else {\n                tasks.put(task.getName(), new TaskSelectorBuilder(task.getName(), task.getDescription()));\n            }\n            if (task.getGroup() != null) {\n                visibleTasks.add(task.getName());\n            }\n        }\n    }","id":105940,"modified_method":"private void findTasks(Project project, Collection<String> tasks, Collection<String> visibleTasks) {\n        for (Project child : project.getChildProjects().values()) {\n            findTasks(child, tasks, visibleTasks);\n        }\n        for (Task task : taskLister.listProjectTasks(project)) {\n            tasks.add(task.getName());\n            if (task.getGroup() != null) {\n                visibleTasks.add(task.getName());\n            }\n        }\n    }","commit_id":"0deb1681bf8de9241eb275285ae5eb500ce4b118","url":"https://github.com/gradle/gradle"},{"original_method":"public DefaultBuildInvocations buildAll(String modelName, Project project) {\n        if (!canBuild(modelName)) {\n            throw new GradleException(\"Unknown model name \" + modelName);\n        }\n        List<LaunchableGradleTaskSelector> selectors = Lists.newArrayList();\n        Map<String, TaskSelectorBuilder> aggregatedTasks = Maps.newLinkedHashMap();\n        Set<String> visibleTasks = Sets.newLinkedHashSet();\n        findTasks(project, aggregatedTasks, visibleTasks);\n        for (TaskSelectorBuilder selectorData : aggregatedTasks.values()) {\n            selectors.add(selectorData.build(project, visibleTasks));\n        }\n        return new DefaultBuildInvocations()\n                .setSelectors(selectors)\n                .setTasks(tasks(project));\n    }","id":105941,"modified_method":"public DefaultBuildInvocations buildAll(String modelName, Project project) {\n        if (!canBuild(modelName)) {\n            throw new GradleException(\"Unknown model name \" + modelName);\n        }\n        List<LaunchableGradleTaskSelector> selectors = Lists.newArrayList();\n        Set<String> aggregatedTasks = Sets.newLinkedHashSet();\n        Set<String> visibleTasks = Sets.newLinkedHashSet();\n        findTasks(project, aggregatedTasks, visibleTasks);\n        for (String selectorName : aggregatedTasks) {\n            selectors.add(new LaunchableGradleTaskSelector().\n                    setName(selectorName).\n                    setTaskName(selectorName).\n                    setProjectPath(project.getPath()).\n                    setDescription(project.getParent() != null\n                            ? String.format(\"%s:%s task selector\", project.getPath(), selectorName)\n                            : String.format(\"%s task selector\", selectorName)).\n                    setDisplayName(String.format(\"%s in %s and subprojects.\", selectorName, project.toString())).\n                    setPublic(visibleTasks.contains(selectorName)));\n        }\n        return new DefaultBuildInvocations()\n                .setSelectors(selectors)\n                .setTasks(tasks(project));\n    }","commit_id":"0deb1681bf8de9241eb275285ae5eb500ce4b118","url":"https://github.com/gradle/gradle"},{"original_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public final synchronized void stop() throws LifecycleException {\n\n        if (LifecycleState.STOPPING_PREP.equals(state) || LifecycleState.STOPPING.equals(state) ||\n                LifecycleState.STOPPED.equals(state)) {\n\n            if (log.isDebugEnabled()) {\n                Exception e = new LifecycleException();\n                log.debug(sm.getString(\"lifecycleBase.alreadyStopped\", toString()), e);\n            } else if (log.isInfoEnabled()) {\n                log.info(sm.getString(\"lifecycleBase.alreadyStopped\", toString()));\n            }\n\n            return;\n        }\n\n        if (state.equals(LifecycleState.NEW)) {\n            state = LifecycleState.STOPPED;\n            return;\n        }\n\n        if (!state.equals(LifecycleState.STARTED) && !state.equals(LifecycleState.FAILED)) {\n            invalidTransition(Lifecycle.BEFORE_STOP_EVENT);\n        }\n\n        try {\n            if (state.equals(LifecycleState.FAILED)) {\n                // Don't transition to STOPPING_PREP as that would briefly mark the\n                // component as available but do ensure the BEFORE_STOP_EVENT is\n                // fired\n                fireLifecycleEvent(BEFORE_STOP_EVENT, null);\n            } else {\n                setStateInternal(LifecycleState.STOPPING_PREP, null, false);\n            }\n\n            stopInternal();\n\n            // Shouldn't be necessary but acts as a check that sub-classes are\n            // doing what they are supposed to.\n            if (!state.equals(LifecycleState.STOPPING) && !state.equals(LifecycleState.FAILED)) {\n                invalidTransition(Lifecycle.AFTER_STOP_EVENT);\n            }\n\n            setStateInternal(LifecycleState.STOPPED, null, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            setStateInternal(LifecycleState.FAILED, null, false);\n            throw new LifecycleException(sm.getString(\"lifecycleBase.stopFail\",toString()), t);\n        } finally {\n            if (this instanceof Lifecycle.SingleUse) {\n                // Complete stop process first\n                setStateInternal(LifecycleState.STOPPED, null, false);\n                destroy();\n            }\n        }\n    }","id":105942,"modified_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public final synchronized void stop() throws LifecycleException {\n\n        if (LifecycleState.STOPPING_PREP.equals(state) || LifecycleState.STOPPING.equals(state) ||\n                LifecycleState.STOPPED.equals(state)) {\n\n            if (log.isDebugEnabled()) {\n                Exception e = new LifecycleException();\n                log.debug(sm.getString(\"lifecycleBase.alreadyStopped\", toString()), e);\n            } else if (log.isInfoEnabled()) {\n                log.info(sm.getString(\"lifecycleBase.alreadyStopped\", toString()));\n            }\n\n            return;\n        }\n\n        if (state.equals(LifecycleState.NEW)) {\n            state = LifecycleState.STOPPED;\n            return;\n        }\n\n        if (!state.equals(LifecycleState.STARTED) && !state.equals(LifecycleState.FAILED)) {\n            invalidTransition(Lifecycle.BEFORE_STOP_EVENT);\n        }\n\n        try {\n            if (state.equals(LifecycleState.FAILED)) {\n                // Don't transition to STOPPING_PREP as that would briefly mark the\n                // component as available but do ensure the BEFORE_STOP_EVENT is\n                // fired\n                fireLifecycleEvent(BEFORE_STOP_EVENT, null);\n            } else {\n                setStateInternal(LifecycleState.STOPPING_PREP, null, false);\n            }\n\n            stopInternal();\n\n            // Shouldn't be necessary but acts as a check that sub-classes are\n            // doing what they are supposed to.\n            if (!state.equals(LifecycleState.STOPPING) && !state.equals(LifecycleState.FAILED)) {\n                invalidTransition(Lifecycle.AFTER_STOP_EVENT);\n            }\n\n            setStateInternal(LifecycleState.STOPPED, null, false);\n        } catch (Throwable t) {\n            handleSubClassException(t, \"lifecycleBase.stopFail\", toString());\n        } finally {\n            if (this instanceof Lifecycle.SingleUse) {\n                // Complete stop process first\n                setStateInternal(LifecycleState.STOPPED, null, false);\n                destroy();\n            }\n        }\n    }","commit_id":"533b280728877537a7542c133417a2091f294f39","url":"https://github.com/apache/tomcat"},{"original_method":"@Override\n    public final synchronized void init() throws LifecycleException {\n        if (!state.equals(LifecycleState.NEW)) {\n            invalidTransition(Lifecycle.BEFORE_INIT_EVENT);\n        }\n\n        try {\n            setStateInternal(LifecycleState.INITIALIZING, null, false);\n            initInternal();\n            setStateInternal(LifecycleState.INITIALIZED, null, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            setStateInternal(LifecycleState.FAILED, null, false);\n            throw new LifecycleException(sm.getString(\"lifecycleBase.initFail\",toString()), t);\n        }\n    }","id":105943,"modified_method":"@Override\n    public final synchronized void init() throws LifecycleException {\n        if (!state.equals(LifecycleState.NEW)) {\n            invalidTransition(Lifecycle.BEFORE_INIT_EVENT);\n        }\n\n        try {\n            setStateInternal(LifecycleState.INITIALIZING, null, false);\n            initInternal();\n            setStateInternal(LifecycleState.INITIALIZED, null, false);\n        } catch (Throwable t) {\n            handleSubClassException(t, \"lifecycleBase.initFail\", toString());\n        }\n    }","commit_id":"533b280728877537a7542c133417a2091f294f39","url":"https://github.com/apache/tomcat"},{"original_method":"@Override\n    public final synchronized void destroy() throws LifecycleException {\n        if (LifecycleState.FAILED.equals(state)) {\n            try {\n                // Triggers clean-up\n                stop();\n            } catch (LifecycleException e) {\n                // Just log. Still want to destroy.\n                log.warn(sm.getString(\n                        \"lifecycleBase.destroyStopFail\", toString()), e);\n            }\n        }\n\n        if (LifecycleState.DESTROYING.equals(state) || LifecycleState.DESTROYED.equals(state)) {\n            if (log.isDebugEnabled()) {\n                Exception e = new LifecycleException();\n                log.debug(sm.getString(\"lifecycleBase.alreadyDestroyed\", toString()), e);\n            } else if (log.isInfoEnabled() && !(this instanceof Lifecycle.SingleUse)) {\n                // Rather than have every component that might need to call\n                // destroy() check for SingleUse, don't log an info message if\n                // multiple calls are made to destroy()\n                log.info(sm.getString(\"lifecycleBase.alreadyDestroyed\", toString()));\n            }\n\n            return;\n        }\n\n        if (!state.equals(LifecycleState.STOPPED) && !state.equals(LifecycleState.FAILED) &&\n                !state.equals(LifecycleState.NEW) && !state.equals(LifecycleState.INITIALIZED)) {\n            invalidTransition(Lifecycle.BEFORE_DESTROY_EVENT);\n        }\n\n        try {\n            setStateInternal(LifecycleState.DESTROYING, null, false);\n            destroyInternal();\n            setStateInternal(LifecycleState.DESTROYED, null, false);\n        } catch (Throwable t) {\n            ExceptionUtils.handleThrowable(t);\n            setStateInternal(LifecycleState.FAILED, null, false);\n            throw new LifecycleException(sm.getString(\"lifecycleBase.destroyFail\",toString()), t);\n        }\n    }","id":105944,"modified_method":"@Override\n    public final synchronized void destroy() throws LifecycleException {\n        if (LifecycleState.FAILED.equals(state)) {\n            try {\n                // Triggers clean-up\n                stop();\n            } catch (LifecycleException e) {\n                // Just log. Still want to destroy.\n                log.warn(sm.getString(\n                        \"lifecycleBase.destroyStopFail\", toString()), e);\n            }\n        }\n\n        if (LifecycleState.DESTROYING.equals(state) || LifecycleState.DESTROYED.equals(state)) {\n            if (log.isDebugEnabled()) {\n                Exception e = new LifecycleException();\n                log.debug(sm.getString(\"lifecycleBase.alreadyDestroyed\", toString()), e);\n            } else if (log.isInfoEnabled() && !(this instanceof Lifecycle.SingleUse)) {\n                // Rather than have every component that might need to call\n                // destroy() check for SingleUse, don't log an info message if\n                // multiple calls are made to destroy()\n                log.info(sm.getString(\"lifecycleBase.alreadyDestroyed\", toString()));\n            }\n\n            return;\n        }\n\n        if (!state.equals(LifecycleState.STOPPED) && !state.equals(LifecycleState.FAILED) &&\n                !state.equals(LifecycleState.NEW) && !state.equals(LifecycleState.INITIALIZED)) {\n            invalidTransition(Lifecycle.BEFORE_DESTROY_EVENT);\n        }\n\n        try {\n            setStateInternal(LifecycleState.DESTROYING, null, false);\n            destroyInternal();\n            setStateInternal(LifecycleState.DESTROYED, null, false);\n        } catch (Throwable t) {\n            handleSubClassException(t, \"lifecycleBase.destroyFail\", toString());\n        }\n    }","commit_id":"533b280728877537a7542c133417a2091f294f39","url":"https://github.com/apache/tomcat"},{"original_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public final synchronized void start() throws LifecycleException {\n\n        if (LifecycleState.STARTING_PREP.equals(state) || LifecycleState.STARTING.equals(state) ||\n                LifecycleState.STARTED.equals(state)) {\n\n            if (log.isDebugEnabled()) {\n                Exception e = new LifecycleException();\n                log.debug(sm.getString(\"lifecycleBase.alreadyStarted\", toString()), e);\n            } else if (log.isInfoEnabled()) {\n                log.info(sm.getString(\"lifecycleBase.alreadyStarted\", toString()));\n            }\n\n            return;\n        }\n\n        if (state.equals(LifecycleState.NEW)) {\n            init();\n        } else if (state.equals(LifecycleState.FAILED)) {\n            stop();\n        } else if (!state.equals(LifecycleState.INITIALIZED) &&\n                !state.equals(LifecycleState.STOPPED)) {\n            invalidTransition(Lifecycle.BEFORE_START_EVENT);\n        }\n\n        try {\n            setStateInternal(LifecycleState.STARTING_PREP, null, false);\n            startInternal();\n            if (state.equals(LifecycleState.FAILED)) {\n                // This is a 'controlled' failure. The component put itself into the\n                // FAILED state so call stop() to complete the clean-up.\n                stop();\n            } else if (!state.equals(LifecycleState.STARTING)) {\n                // Shouldn't be necessary but acts as a check that sub-classes are\n                // doing what they are supposed to.\n                invalidTransition(Lifecycle.AFTER_START_EVENT);\n            } else {\n                setStateInternal(LifecycleState.STARTED, null, false);\n            }\n        } catch (Throwable t) {\n            // This is an 'uncontrolled' failure so put the component into the\n            // FAILED state and throw an exception.\n            ExceptionUtils.handleThrowable(t);\n            setStateInternal(LifecycleState.FAILED, null, false);\n            throw new LifecycleException(sm.getString(\"lifecycleBase.startFail\", toString()), t);\n        }\n    }","id":105945,"modified_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public final synchronized void start() throws LifecycleException {\n\n        if (LifecycleState.STARTING_PREP.equals(state) || LifecycleState.STARTING.equals(state) ||\n                LifecycleState.STARTED.equals(state)) {\n\n            if (log.isDebugEnabled()) {\n                Exception e = new LifecycleException();\n                log.debug(sm.getString(\"lifecycleBase.alreadyStarted\", toString()), e);\n            } else if (log.isInfoEnabled()) {\n                log.info(sm.getString(\"lifecycleBase.alreadyStarted\", toString()));\n            }\n\n            return;\n        }\n\n        if (state.equals(LifecycleState.NEW)) {\n            init();\n        } else if (state.equals(LifecycleState.FAILED)) {\n            stop();\n        } else if (!state.equals(LifecycleState.INITIALIZED) &&\n                !state.equals(LifecycleState.STOPPED)) {\n            invalidTransition(Lifecycle.BEFORE_START_EVENT);\n        }\n\n        try {\n            setStateInternal(LifecycleState.STARTING_PREP, null, false);\n            startInternal();\n            if (state.equals(LifecycleState.FAILED)) {\n                // This is a 'controlled' failure. The component put itself into the\n                // FAILED state so call stop() to complete the clean-up.\n                stop();\n            } else if (!state.equals(LifecycleState.STARTING)) {\n                // Shouldn't be necessary but acts as a check that sub-classes are\n                // doing what they are supposed to.\n                invalidTransition(Lifecycle.AFTER_START_EVENT);\n            } else {\n                setStateInternal(LifecycleState.STARTED, null, false);\n            }\n        } catch (Throwable t) {\n            // This is an 'uncontrolled' failure so put the component into the\n            // FAILED state and throw an exception.\n            handleSubClassException(t, \"lifecycleBase.startFail\", toString());\n        }\n    }","commit_id":"533b280728877537a7542c133417a2091f294f39","url":"https://github.com/apache/tomcat"},{"original_method":"@Override\n\tpublic PortalCache<K, V> getCache(String name, boolean blocking)\n\t\tthrows PortalCacheException {\n\n\t\tPortalCache<K, V> portalCache = _portalCaches.get(name);\n\n\t\tif (portalCache != null) {\n\t\t\treturn portalCache;\n\t\t}\n\n\t\tportalCache = createPortalCache(name);\n\n\t\tPortalCacheConfiguration portalCacheConfiguration =\n\t\t\t_portalCacheManagerConfiguration.getPortalCacheConfiguration(\n\t\t\t\tportalCache.getName());\n\n\t\tif (portalCacheConfiguration == null) {\n\t\t\tportalCacheConfiguration =\n\t\t\t\t_portalCacheManagerConfiguration.\n\t\t\t\t\tgetDefaultPortalCacheConfiguration();\n\t\t}\n\n\t\t_initPortalCacheListeners(portalCache, portalCacheConfiguration);\n\n\t\tif (PropsValues.TRANSACTIONAL_CACHE_ENABLED &&\n\t\t\tisTransactionalPortalCache(name)) {\n\n\t\t\tportalCache = new TransactionalPortalCache<K, V>(portalCache);\n\t\t}\n\n\t\tif (PropsValues.EHCACHE_BLOCKING_CACHE_ALLOWED && blocking) {\n\t\t\tportalCache = new BlockingPortalCache<K, V>(portalCache);\n\t\t}\n\n\t\tif ((_portalCaches.putIfAbsent(name, portalCache) == null) &&\n\t\t\tPropsValues.EHCACHE_BOOTSTRAP_CACHE_LOADER_ENABLED &&\n\t\t\t(portalCacheConfiguration != null)) {\n\n\t\t\tCallbackConfiguration bootstrapConfiguration =\n\t\t\t\tportalCacheConfiguration.getBootstrapLoaderConfiguration();\n\n\t\t\tif (bootstrapConfiguration != null) {\n\t\t\t\tCallbackFactory callbackFactory =\n\t\t\t\t\tbootstrapConfiguration.getCallbackFactory();\n\n\t\t\t\tBootstrapLoader bootstrapLoader =\n\t\t\t\t\tcallbackFactory.createBootstrapLoader(\n\t\t\t\t\t\tbootstrapConfiguration.getProperties());\n\n\t\t\t\tif (bootstrapLoader != null) {\n\t\t\t\t\tbootstrapLoader.load(getName(), name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn _portalCaches.get(name);\n\t}","id":105946,"modified_method":"@Override\n\tpublic PortalCache<K, V> getCache(String name, boolean blocking)\n\t\tthrows PortalCacheException {\n\n\t\tPortalCache<K, V> portalCache = _portalCaches.get(name);\n\n\t\tif (portalCache != null) {\n\t\t\treturn portalCache;\n\t\t}\n\n\t\tportalCache = createPortalCache(name);\n\n\t\tPortalCacheConfiguration portalCacheConfiguration =\n\t\t\t_portalCacheManagerConfiguration.getPortalCacheConfiguration(\n\t\t\t\tportalCache.getName());\n\n\t\tif (portalCacheConfiguration == null) {\n\t\t\tportalCacheConfiguration =\n\t\t\t\t_portalCacheManagerConfiguration.\n\t\t\t\t\tgetDefaultPortalCacheConfiguration();\n\t\t}\n\n\t\t_initPortalCacheListeners(portalCache, portalCacheConfiguration);\n\n\t\tif (PropsValues.TRANSACTIONAL_CACHE_ENABLED &&\n\t\t\tisTransactionalPortalCache(name)) {\n\n\t\t\tportalCache = new TransactionalPortalCache<K, V>(portalCache);\n\t\t}\n\n\t\tif (PropsValues.EHCACHE_BLOCKING_CACHE_ALLOWED && blocking) {\n\t\t\tportalCache = new BlockingPortalCache<K, V>(portalCache);\n\t\t}\n\n\t\tPortalCache<K, V> previousPortalCache = _portalCaches.putIfAbsent(\n\t\t\tname, portalCache);\n\n\t\tif (previousPortalCache != null) {\n\t\t\tportalCache = previousPortalCache;\n\t\t}\n\t\telse if (PropsValues.EHCACHE_BOOTSTRAP_CACHE_LOADER_ENABLED &&\n\t\t\t\t (portalCacheConfiguration != null)) {\n\n\t\t\tCallbackConfiguration bootstrapLoaderConfiguration =\n\t\t\t\tportalCacheConfiguration.getBootstrapLoaderConfiguration();\n\n\t\t\tif (bootstrapLoaderConfiguration != null) {\n\t\t\t\tCallbackFactory callbackFactory =\n\t\t\t\t\tbootstrapLoaderConfiguration.getCallbackFactory();\n\n\t\t\t\tBootstrapLoader bootstrapLoader =\n\t\t\t\t\tcallbackFactory.createBootstrapLoader(\n\t\t\t\t\t\tbootstrapLoaderConfiguration.getProperties());\n\n\t\t\t\tif (bootstrapLoader != null) {\n\t\t\t\t\tbootstrapLoader.load(getName(), name);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn portalCache;\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void afterPropertiesSet() {\n\t\tif ((_portalCacheManagerConfiguration != null) ||\n\t\t\t(_mpiOnly && SPIUtil.isSPI())) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tinitPortalCacheManager();\n\n\t\t_portalCacheManagerConfiguration = getPortalCacheManagerConfiguration();\n\n\t\tCollection<CallbackConfiguration> cacheManagerListenerConfigurations =\n\t\t\t_portalCacheManagerConfiguration.\n\t\t\t\tgetCacheManagerListenerConfigurations();\n\n\t\tfor (CallbackConfiguration callbackConfiguration :\n\t\t\t\tcacheManagerListenerConfigurations) {\n\n\t\t\tCallbackFactory callbackFactory =\n\t\t\t\tcallbackConfiguration.getCallbackFactory();\n\n\t\t\tCacheManagerListener cacheManagerListener =\n\t\t\t\tcallbackFactory.createCacheManagerListener(\n\t\t\t\t\tcallbackConfiguration.getProperties());\n\n\t\t\tif (cacheManagerListener != null) {\n\t\t\t\tregisterCacheManagerListener(cacheManagerListener);\n\t\t\t}\n\t\t}\n\n\t\tPortalCacheProvider.registerPortalCacheManager(this);\n\t}","id":105947,"modified_method":"public void afterPropertiesSet() {\n\t\tif ((_portalCacheManagerConfiguration != null) ||\n\t\t\t(_mpiOnly && SPIUtil.isSPI())) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tinitPortalCacheManager();\n\n\t\t_portalCacheManagerConfiguration = getPortalCacheManagerConfiguration();\n\n\t\tfor (CallbackConfiguration callbackConfiguration :\n\t\t\t\t_portalCacheManagerConfiguration.\n\t\t\t\t\tgetCacheManagerListenerConfigurations()) {\n\n\t\t\tCallbackFactory callbackFactory =\n\t\t\t\tcallbackConfiguration.getCallbackFactory();\n\n\t\t\tCacheManagerListener cacheManagerListener =\n\t\t\t\tcallbackFactory.createCacheManagerListener(\n\t\t\t\t\tcallbackConfiguration.getProperties());\n\n\t\t\tif (cacheManagerListener != null) {\n\t\t\t\tregisterCacheManagerListener(cacheManagerListener);\n\t\t\t}\n\t\t}\n\n\t\tPortalCacheProvider.registerPortalCacheManager(this);\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void notifyEntryPut(\n\t\t\tPortalCache<K, V> portalCache, K key, V value, int timeToLive)\n\t\tthrows PortalCacheException {\n\n\t\tif (_skipListenerThreadLocal.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( Map.Entry<CacheListener<K, V>, CacheListenerScope> entry :\n\t\t\t\t_cacheListeners.entrySet()) {\n\n\t\t\tCacheListenerScope cacheListenerScope = entry.getValue();\n\n\t\t\tCacheListener<K, V> cacheListener = entry.getKey();\n\n\t\t\tif (_shouldDeliver(cacheListener, cacheListenerScope)) {\n\t\t\t\tcacheListener.notifyEntryPut(\n\t\t\t\t\tportalCache, key, value, timeToLive);\n\t\t\t}\n\t\t}\n\t}","id":105948,"modified_method":"@Override\n\tpublic void notifyEntryPut(\n\t\t\tPortalCache<K, V> portalCache, K key, V value, int timeToLive)\n\t\tthrows PortalCacheException {\n\n\t\tif (_skipListenerThreadLocal.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (Map.Entry<CacheListener<K, V>, CacheListenerScope> entry :\n\t\t\t\t_cacheListeners.entrySet()) {\n\n\t\t\tCacheListener<K, V> cacheListener = entry.getKey();\n\n\t\t\tif (_shouldDeliver(cacheListener, entry.getValue())) {\n\t\t\t\tcacheListener.notifyEntryPut(\n\t\t\t\t\tportalCache, key, value, timeToLive);\n\t\t\t}\n\t\t}\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void setSkipListenerThreadLocal(boolean skipListener) {\n\t\t_skipListenerThreadLocal.set(skipListener);\n\t}","id":105949,"modified_method":"public static void setSkipListener(boolean skipListener) {\n\t\t_skipListenerThreadLocal.set(skipListener);\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void notifyEntryUpdated(\n\t\t\tPortalCache<K, V> portalCache, K key, V value, int timeToLive)\n\t\tthrows PortalCacheException {\n\n\t\tif (_skipListenerThreadLocal.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( Map.Entry<CacheListener<K, V>, CacheListenerScope> entry :\n\t\t\t\t_cacheListeners.entrySet()) {\n\n\t\t\tCacheListenerScope cacheListenerScope = entry.getValue();\n\n\t\t\tCacheListener<K, V> cacheListener = entry.getKey();\n\n\t\t\tif (_shouldDeliver(cacheListener, cacheListenerScope)) {\n\t\t\t\tcacheListener.notifyEntryUpdated(\n\t\t\t\t\tportalCache, key, value, timeToLive);\n\t\t\t}\n\t\t}\n\t}","id":105950,"modified_method":"@Override\n\tpublic void notifyEntryUpdated(\n\t\t\tPortalCache<K, V> portalCache, K key, V value, int timeToLive)\n\t\tthrows PortalCacheException {\n\n\t\tif (_skipListenerThreadLocal.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (Map.Entry<CacheListener<K, V>, CacheListenerScope> entry :\n\t\t\t\t_cacheListeners.entrySet()) {\n\n\t\t\tCacheListener<K, V> cacheListener = entry.getKey();\n\n\t\t\tif (_shouldDeliver(cacheListener, entry.getValue())) {\n\t\t\t\tcacheListener.notifyEntryUpdated(\n\t\t\t\t\tportalCache, key, value, timeToLive);\n\t\t\t}\n\t\t}\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void notifyEntryExpired(\n\t\t\tPortalCache<K, V> portalCache, K key, V value, int timeToLive)\n\t\tthrows PortalCacheException {\n\n\t\tif (_skipListenerThreadLocal.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( Map.Entry<CacheListener<K, V>, CacheListenerScope> entry :\n\t\t\t\t_cacheListeners.entrySet()) {\n\n\t\t\tCacheListenerScope cacheListenerScope = entry.getValue();\n\n\t\t\tCacheListener<K, V> cacheListener = entry.getKey();\n\n\t\t\tif (_shouldDeliver(cacheListener, cacheListenerScope)) {\n\t\t\t\tcacheListener.notifyEntryExpired(\n\t\t\t\t\tportalCache, key, value, timeToLive);\n\t\t\t}\n\t\t}\n\t}","id":105951,"modified_method":"@Override\n\tpublic void notifyEntryExpired(\n\t\t\tPortalCache<K, V> portalCache, K key, V value, int timeToLive)\n\t\tthrows PortalCacheException {\n\n\t\tif (_skipListenerThreadLocal.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (Map.Entry<CacheListener<K, V>, CacheListenerScope> entry :\n\t\t\t\t_cacheListeners.entrySet()) {\n\n\t\t\tCacheListener<K, V> cacheListener = entry.getKey();\n\n\t\t\tif (_shouldDeliver(cacheListener, entry.getValue())) {\n\t\t\t\tcacheListener.notifyEntryExpired(\n\t\t\t\t\tportalCache, key, value, timeToLive);\n\t\t\t}\n\t\t}\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void notifyEntryRemoved(\n\t\t\tPortalCache<K, V> portalCache, K key, V value, int timeToLive)\n\t\tthrows PortalCacheException {\n\n\t\tif (_skipListenerThreadLocal.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( Map.Entry<CacheListener<K, V>, CacheListenerScope> entry :\n\t\t\t\t_cacheListeners.entrySet()) {\n\n\t\t\tCacheListenerScope cacheListenerScope = entry.getValue();\n\n\t\t\tCacheListener<K, V> cacheListener = entry.getKey();\n\n\t\t\tif (_shouldDeliver(cacheListener, cacheListenerScope)) {\n\t\t\t\tcacheListener.notifyEntryRemoved(\n\t\t\t\t\tportalCache, key, value, timeToLive);\n\t\t\t}\n\t\t}\n\t}","id":105952,"modified_method":"@Override\n\tpublic void notifyEntryRemoved(\n\t\t\tPortalCache<K, V> portalCache, K key, V value, int timeToLive)\n\t\tthrows PortalCacheException {\n\n\t\tif (_skipListenerThreadLocal.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (Map.Entry<CacheListener<K, V>, CacheListenerScope> entry :\n\t\t\t\t_cacheListeners.entrySet()) {\n\n\t\t\tCacheListener<K, V> cacheListener = entry.getKey();\n\n\t\t\tif (_shouldDeliver(cacheListener, entry.getValue())) {\n\t\t\t\tcacheListener.notifyEntryRemoved(\n\t\t\t\t\tportalCache, key, value, timeToLive);\n\t\t\t}\n\t\t}\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void notifyEntryEvicted(\n\t\t\tPortalCache<K, V> portalCache, K key, V value, int timeToLive)\n\t\tthrows PortalCacheException {\n\n\t\tif (_skipListenerThreadLocal.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( Map.Entry<CacheListener<K, V>, CacheListenerScope> entry :\n\t\t\t\t_cacheListeners.entrySet()) {\n\n\t\t\tCacheListenerScope cacheListenerScope = entry.getValue();\n\n\t\t\tCacheListener<K, V> cacheListener = entry.getKey();\n\n\t\t\tif (_shouldDeliver(cacheListener, cacheListenerScope)) {\n\t\t\t\tcacheListener.notifyEntryEvicted(\n\t\t\t\t\tportalCache, key, value, timeToLive);\n\t\t\t}\n\t\t}\n\t}","id":105953,"modified_method":"@Override\n\tpublic void notifyEntryEvicted(\n\t\t\tPortalCache<K, V> portalCache, K key, V value, int timeToLive)\n\t\tthrows PortalCacheException {\n\n\t\tif (_skipListenerThreadLocal.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (Map.Entry<CacheListener<K, V>, CacheListenerScope> entry :\n\t\t\t\t_cacheListeners.entrySet()) {\n\n\t\t\tCacheListener<K, V> cacheListener = entry.getKey();\n\n\t\t\tif (_shouldDeliver(cacheListener, entry.getValue())) {\n\t\t\t\tcacheListener.notifyEntryEvicted(\n\t\t\t\t\tportalCache, key, value, timeToLive);\n\t\t\t}\n\t\t}\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void notifyRemoveAll(PortalCache<K, V> portalCache)\n\t\tthrows PortalCacheException {\n\n\t\tif (_skipListenerThreadLocal.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor ( Map.Entry<CacheListener<K, V>, CacheListenerScope> entry :\n\t\t\t\t_cacheListeners.entrySet()) {\n\n\t\t\tCacheListenerScope cacheListenerScope = entry.getValue();\n\n\t\t\tCacheListener<K, V> cacheListener = entry.getKey();\n\n\t\t\tif (_shouldDeliver(cacheListener, cacheListenerScope)) {\n\t\t\t\tcacheListener.notifyRemoveAll(portalCache);\n\t\t\t}\n\t\t}\n\t}","id":105954,"modified_method":"@Override\n\tpublic void notifyRemoveAll(PortalCache<K, V> portalCache)\n\t\tthrows PortalCacheException {\n\n\t\tif (_skipListenerThreadLocal.get()) {\n\t\t\treturn;\n\t\t}\n\n\t\tfor (Map.Entry<CacheListener<K, V>, CacheListenerScope> entry :\n\t\t\t\t_cacheListeners.entrySet()) {\n\n\t\t\tCacheListener<K, V> cacheListener = entry.getKey();\n\n\t\t\tif (_shouldDeliver(cacheListener, entry.getValue())) {\n\t\t\t\tcacheListener.notifyRemoveAll(portalCache);\n\t\t\t}\n\t\t}\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void setRemoteInvokeThreadLocal(boolean remoteInvoke) {\n\t\t_remoteInvokeThreadLocal.set(remoteInvoke);\n\t}","id":105955,"modified_method":"public static void setRemoteInvoke(boolean remoteInvoke) {\n\t\t_remoteInvokeThreadLocal.set(remoteInvoke);\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void handlePortalCacheClusterEvent(\n\t\tPortalCacheClusterEvent portalCacheClusterEvent) {\n\n\t\tPortalCacheManager<? extends Serializable, ?> portalCacheManager =\n\t\t\tPortalCacheProvider.getPortalCacheManager(\n\t\t\t\tportalCacheClusterEvent.getPortalCacheManagerName());\n\n\t\tPortalCache<Serializable, Serializable> portalCache =\n\t\t\t(PortalCache<Serializable, Serializable>)\n\t\t\t\tportalCacheManager.getCache(\n\t\t\t\t\tportalCacheClusterEvent.getPortalCacheName());\n\n\t\tif (portalCache == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tPortalCacheClusterEventType portalCacheClusterEventType =\n\t\t\tportalCacheClusterEvent.getEventType();\n\n\t\tboolean remote = AggregatedCacheListener.getRemoteInvokeThreadLocal();\n\n\t\tAggregatedCacheListener.setRemoteInvokeThreadLocal(true);\n\n\t\ttry {\n\t\t\tif (portalCacheClusterEventType.equals(\n\t\t\t\t\tPortalCacheClusterEventType.REMOVE_ALL)) {\n\n\t\t\t\tportalCache.removeAll();\n\t\t\t}\n\t\t\telse if (portalCacheClusterEventType.equals(\n\t\t\t\t\t\tPortalCacheClusterEventType.PUT) ||\n\t\t\t\t\t portalCacheClusterEventType.equals(\n\t\t\t\t\t\tPortalCacheClusterEventType.UPDATE)) {\n\n\t\t\t\tSerializable key = portalCacheClusterEvent.getElementKey();\n\t\t\t\tSerializable value = portalCacheClusterEvent.getElementValue();\n\n\t\t\t\tif (value == null) {\n\t\t\t\t\tportalCache.remove(key);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tportalCache.put(\n\t\t\t\t\t\tkey, value, portalCacheClusterEvent.getTimeToLive());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tportalCache.remove(portalCacheClusterEvent.getElementKey());\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tAggregatedCacheListener.setRemoteInvokeThreadLocal(remote);\n\t\t}\n\t}","id":105956,"modified_method":"protected void handlePortalCacheClusterEvent(\n\t\tPortalCacheClusterEvent portalCacheClusterEvent) {\n\n\t\tPortalCacheManager<? extends Serializable, ?> portalCacheManager =\n\t\t\tPortalCacheProvider.getPortalCacheManager(\n\t\t\t\tportalCacheClusterEvent.getPortalCacheManagerName());\n\n\t\tPortalCache<Serializable, Serializable> portalCache =\n\t\t\t(PortalCache<Serializable, Serializable>)\n\t\t\t\tportalCacheManager.getCache(\n\t\t\t\t\tportalCacheClusterEvent.getPortalCacheName());\n\n\t\tif (portalCache == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tPortalCacheClusterEventType portalCacheClusterEventType =\n\t\t\tportalCacheClusterEvent.getEventType();\n\n\t\tboolean remote = AggregatedCacheListener.isRemoteInvoke();\n\n\t\tAggregatedCacheListener.setRemoteInvoke(true);\n\n\t\ttry {\n\t\t\tif (portalCacheClusterEventType.equals(\n\t\t\t\t\tPortalCacheClusterEventType.REMOVE_ALL)) {\n\n\t\t\t\tportalCache.removeAll();\n\t\t\t}\n\t\t\telse if (portalCacheClusterEventType.equals(\n\t\t\t\t\t\tPortalCacheClusterEventType.PUT) ||\n\t\t\t\t\t portalCacheClusterEventType.equals(\n\t\t\t\t\t\tPortalCacheClusterEventType.UPDATE)) {\n\n\t\t\t\tSerializable key = portalCacheClusterEvent.getElementKey();\n\t\t\t\tSerializable value = portalCacheClusterEvent.getElementValue();\n\n\t\t\t\tif (value == null) {\n\t\t\t\t\tportalCache.remove(key);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tportalCache.put(\n\t\t\t\t\t\tkey, value, portalCacheClusterEvent.getTimeToLive());\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tportalCache.remove(portalCacheClusterEvent.getElementKey());\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tAggregatedCacheListener.setRemoteInvoke(remote);\n\t\t}\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private static Set<CallbackConfiguration>\n\t\t_getCacheManagerListenerConfigurations(\n\t\t\tConfiguration ehcacheConfiguration) {\n\n\t\tFactoryConfiguration<?> factoryConfiguration =\n\t\t\tehcacheConfiguration.\n\t\t\t\tgetCacheManagerEventListenerFactoryConfiguration();\n\n\t\tif (factoryConfiguration == null) {\n\t\t\treturn Collections.emptySet();\n\t\t}\n\n\t\tProperties properties = _parseProperties(\n\t\t\tfactoryConfiguration.getProperties(),\n\t\t\tfactoryConfiguration.getPropertySeparator());\n\n\t\tproperties.put(\n\t\t\tEhcacheConstants.CACHE_MANAGER_LISTENER_FACTORY_CLASS_NAME,\n\t\t\tfactoryConfiguration.getFullyQualifiedClassPath());\n\t\tproperties.put(\n\t\t\tEhcacheConstants.PORTAL_CACHE_MANAGER_NAME,\n\t\t\tehcacheConfiguration.getName());\n\n\t\tCallbackConfiguration callbackConfiguration = new CallbackConfiguration(\n\t\t\tEhcacheCallbackFactory.INSTANCE, properties);\n\n\t\tSet<CallbackConfiguration> callbackConfigurations =\n\t\t\tnew HashSet<CallbackConfiguration>();\n\n\t\tcallbackConfigurations.add(callbackConfiguration);\n\n\t\treturn callbackConfigurations;\n\t}","id":105957,"modified_method":"private static Set<CallbackConfiguration>\n\t\t_getCacheManagerListenerConfigurations(\n\t\t\tConfiguration ehcacheConfiguration) {\n\n\t\tFactoryConfiguration<?> factoryConfiguration =\n\t\t\tehcacheConfiguration.\n\t\t\t\tgetCacheManagerEventListenerFactoryConfiguration();\n\n\t\tif (factoryConfiguration == null) {\n\t\t\treturn Collections.emptySet();\n\t\t}\n\n\t\tProperties properties = _parseProperties(\n\t\t\tfactoryConfiguration.getProperties(),\n\t\t\tfactoryConfiguration.getPropertySeparator());\n\n\t\tproperties.put(\n\t\t\tEhcacheConstants.CACHE_MANAGER_LISTENER_FACTORY_CLASS_NAME,\n\t\t\tfactoryConfiguration.getFullyQualifiedClassPath());\n\t\tproperties.put(\n\t\t\tEhcacheConstants.PORTAL_CACHE_MANAGER_NAME,\n\t\t\tehcacheConfiguration.getName());\n\n\t\treturn Collections.singleton(\n\t\t\tnew CallbackConfiguration(\n\t\t\t\tEhcacheCallbackFactory.INSTANCE, properties));\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private static Properties _parseProperties(\n\t\tString propertiesString, String propertySeparator) {\n\n\t\tProperties properties = new Properties();\n\n\t\tif (propertiesString == null) {\n\t\t\treturn properties;\n\t\t}\n\n\t\tif (propertySeparator == null) {\n\t\t\tpropertySeparator = StringPool.COMMA;\n\t\t}\n\n\t\tString propertyLines = propertiesString.trim();\n\n\t\tpropertyLines = propertyLines.replaceAll(\n\t\t\tpropertySeparator, StringPool.NEW_LINE);\n\n\t\ttry {\n\t\t\tproperties.load(new StringReader(propertyLines));\n\t\t}\n\t\tcatch (IOException e) {\n\t\t}\n\n\t\treturn properties;\n\t}","id":105958,"modified_method":"private static Properties _parseProperties(\n\t\tString propertiesString, String propertySeparator) {\n\n\t\tProperties properties = new Properties();\n\n\t\tif (propertiesString == null) {\n\t\t\treturn properties;\n\t\t}\n\n\t\tif (propertySeparator == null) {\n\t\t\tpropertySeparator = StringPool.COMMA;\n\t\t}\n\n\t\tString propertyLines = propertiesString.trim();\n\n\t\tpropertyLines = StringUtil.replace(\n\t\t\tpropertyLines, propertySeparator, StringPool.NEW_LINE);\n\n\t\ttry {\n\t\t\tproperties.load(new UnsyncStringReader(propertyLines));\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new RuntimeException(ioe);\n\t\t}\n\n\t\treturn properties;\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static ObjectValuePair<\n\t\t\tConfiguration, PortalCacheManagerConfiguration>\n\t\tgetConfiguration(String configurationPath) {\n\n\t\treturn getConfiguration(configurationPath, false);\n\t}","id":105959,"modified_method":"public static ObjectValuePair<\n\t\t\tConfiguration, PortalCacheManagerConfiguration>\n\t\tgetConfiguration(String configurationPath) {\n\n\t\treturn getConfiguration(configurationPath, false, false);\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static ObjectValuePair<\n\t\t\tConfiguration, PortalCacheManagerConfiguration>\n\t\tgetConfiguration(URL configurationURL) {\n\n\t\treturn getConfiguration(configurationURL, false);\n\t}","id":105960,"modified_method":"public static ObjectValuePair<\n\t\t\tConfiguration, PortalCacheManagerConfiguration>\n\t\tgetConfiguration(URL configurationURL) {\n\n\t\treturn getConfiguration(configurationURL, false, false);\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic boolean remove(Object key, boolean doNotNotifyCacheReplicators)\n\t\tthrows IllegalStateException {\n\n\t\tboolean remoteInvoke =\n\t\t\tAggregatedCacheListener.getRemoteInvokeThreadLocal();\n\n\t\tAggregatedCacheListener.setRemoteInvokeThreadLocal(\n\t\t\tdoNotNotifyCacheReplicators);\n\n\t\ttry {\n\t\t\treturn super.remove(key, doNotNotifyCacheReplicators);\n\t\t}\n\t\tfinally {\n\t\t\tAggregatedCacheListener.setRemoteInvokeThreadLocal(remoteInvoke);\n\t\t}\n\t}","id":105961,"modified_method":"@Override\n\tpublic boolean remove(Object key, boolean doNotNotifyCacheReplicators)\n\t\tthrows IllegalStateException {\n\n\t\tboolean remoteInvoke = AggregatedCacheListener.isRemoteInvoke();\n\n\t\tAggregatedCacheListener.setRemoteInvoke(doNotNotifyCacheReplicators);\n\n\t\ttry {\n\t\t\treturn super.remove(key, doNotNotifyCacheReplicators);\n\t\t}\n\t\tfinally {\n\t\t\tAggregatedCacheListener.setRemoteInvoke(remoteInvoke);\n\t\t}\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void removeAll(boolean doNotNotifyCacheReplicators)\n\t\tthrows CacheException, IllegalStateException {\n\n\t\tboolean remoteInvoke =\n\t\t\tAggregatedCacheListener.getRemoteInvokeThreadLocal();\n\n\t\tAggregatedCacheListener.setRemoteInvokeThreadLocal(\n\t\t\tdoNotNotifyCacheReplicators);\n\n\t\ttry {\n\t\t\tsuper.removeAll(doNotNotifyCacheReplicators);\n\t\t}\n\t\tfinally {\n\t\t\tAggregatedCacheListener.setRemoteInvokeThreadLocal(remoteInvoke);\n\t\t}\n\t}","id":105962,"modified_method":"@Override\n\tpublic void removeAll(boolean doNotNotifyCacheReplicators)\n\t\tthrows CacheException, IllegalStateException {\n\n\t\tboolean remoteInvoke = AggregatedCacheListener.isRemoteInvoke();\n\n\t\tAggregatedCacheListener.setRemoteInvoke(doNotNotifyCacheReplicators);\n\n\t\ttry {\n\t\t\tsuper.removeAll(doNotNotifyCacheReplicators);\n\t\t}\n\t\tfinally {\n\t\t\tAggregatedCacheListener.setRemoteInvoke(remoteInvoke);\n\t\t}\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic Element putIfAbsent(\n\t\t\tfinal Element element, final boolean doNotNotifyCacheReplicators)\n\t\tthrows NullPointerException {\n\n\t\tboolean remoteInvoke =\n\t\t\tAggregatedCacheListener.getRemoteInvokeThreadLocal();\n\n\t\tAggregatedCacheListener.setRemoteInvokeThreadLocal(\n\t\t\tdoNotNotifyCacheReplicators);\n\n\t\ttry {\n\t\t\treturn super.putIfAbsent(element, doNotNotifyCacheReplicators);\n\t\t}\n\t\tfinally {\n\t\t\tAggregatedCacheListener.setRemoteInvokeThreadLocal(remoteInvoke);\n\t\t}\n\t}","id":105963,"modified_method":"@Override\n\tpublic Element putIfAbsent(\n\t\t\tfinal Element element, final boolean doNotNotifyCacheReplicators)\n\t\tthrows NullPointerException {\n\n\t\tboolean remoteInvoke = AggregatedCacheListener.isRemoteInvoke();\n\n\t\tAggregatedCacheListener.setRemoteInvoke(doNotNotifyCacheReplicators);\n\n\t\ttry {\n\t\t\treturn super.putIfAbsent(element, doNotNotifyCacheReplicators);\n\t\t}\n\t\tfinally {\n\t\t\tAggregatedCacheListener.setRemoteInvoke(remoteInvoke);\n\t\t}\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void removeAll(\n\t\t\tCollection<?> keys, boolean doNotNotifyCacheReplicators)\n\t\tthrows IllegalStateException {\n\n\t\tboolean remoteInvoke =\n\t\t\tAggregatedCacheListener.getRemoteInvokeThreadLocal();\n\n\t\tAggregatedCacheListener.setRemoteInvokeThreadLocal(\n\t\t\tdoNotNotifyCacheReplicators);\n\n\t\ttry {\n\t\t\tsuper.removeAll(keys, doNotNotifyCacheReplicators);\n\t\t}\n\t\tfinally {\n\t\t\tAggregatedCacheListener.setRemoteInvokeThreadLocal(remoteInvoke);\n\t\t}\n\t}","id":105964,"modified_method":"@Override\n\tpublic void removeAll(\n\t\t\tCollection<?> keys, boolean doNotNotifyCacheReplicators)\n\t\tthrows IllegalStateException {\n\n\t\tboolean remoteInvoke = AggregatedCacheListener.isRemoteInvoke();\n\n\t\tAggregatedCacheListener.setRemoteInvoke(doNotNotifyCacheReplicators);\n\n\t\ttry {\n\t\t\tsuper.removeAll(keys, doNotNotifyCacheReplicators);\n\t\t}\n\t\tfinally {\n\t\t\tAggregatedCacheListener.setRemoteInvoke(remoteInvoke);\n\t\t}\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void put(Element element, boolean doNotNotifyCacheReplicators)\n\t\tthrows CacheException, IllegalArgumentException, IllegalStateException {\n\n\t\tboolean remoteInvoke =\n\t\t\tAggregatedCacheListener.getRemoteInvokeThreadLocal();\n\n\t\tAggregatedCacheListener.setRemoteInvokeThreadLocal(\n\t\t\tdoNotNotifyCacheReplicators);\n\n\t\ttry {\n\t\t\tsuper.put(element, doNotNotifyCacheReplicators);\n\t\t}\n\t\tfinally {\n\t\t\tAggregatedCacheListener.setRemoteInvokeThreadLocal(remoteInvoke);\n\t\t}\n\t}","id":105965,"modified_method":"@Override\n\tpublic void put(Element element, boolean doNotNotifyCacheReplicators)\n\t\tthrows CacheException, IllegalArgumentException, IllegalStateException {\n\n\t\tboolean remoteInvoke = AggregatedCacheListener.isRemoteInvoke();\n\n\t\tAggregatedCacheListener.setRemoteInvoke(doNotNotifyCacheReplicators);\n\n\t\ttry {\n\t\t\tsuper.put(element, doNotNotifyCacheReplicators);\n\t\t}\n\t\tfinally {\n\t\t\tAggregatedCacheListener.setRemoteInvoke(remoteInvoke);\n\t\t}\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void doPut(K key, V value, int timeToLive, boolean quiet) {\n\t\tboolean skipListener = false;\n\n\t\tif (quiet) {\n\t\t\tskipListener = AggregatedCacheListener.getSkipListenerThreadLocal();\n\n\t\t\tAggregatedCacheListener.setSkipListenerThreadLocal(true);\n\t\t}\n\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tV oldValue = _lowLevelCache.get(key);\n\n\t\t\t\tif (oldValue == null) {\n\t\t\t\t\toldValue = _lowLevelCache.putIfAbsent(\n\t\t\t\t\t\tkey, value, timeToLive);\n\n\t\t\t\t\tif (oldValue == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (value.getMvccVersion() <= oldValue.getMvccVersion()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (_lowLevelCache.replace(key, oldValue, value, timeToLive)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (quiet) {\n\t\t\t\tAggregatedCacheListener.setSkipListenerThreadLocal(\n\t\t\t\t\tskipListener);\n\t\t\t}\n\t\t}\n\t}","id":105966,"modified_method":"protected void doPut(K key, V value, int timeToLive, boolean quiet) {\n\t\tboolean skipListener = false;\n\n\t\tif (quiet) {\n\t\t\tskipListener = AggregatedCacheListener.isSkipListener();\n\n\t\t\tAggregatedCacheListener.setSkipListener(true);\n\t\t}\n\n\t\ttry {\n\t\t\twhile (true) {\n\t\t\t\tV oldValue = _lowLevelCache.get(key);\n\n\t\t\t\tif (oldValue == null) {\n\t\t\t\t\toldValue = _lowLevelCache.putIfAbsent(\n\t\t\t\t\t\tkey, value, timeToLive);\n\n\t\t\t\t\tif (oldValue == null) {\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (value.getMvccVersion() <= oldValue.getMvccVersion()) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\tif (_lowLevelCache.replace(key, oldValue, value, timeToLive)) {\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (quiet) {\n\t\t\t\tAggregatedCacheListener.setSkipListener(skipListener);\n\t\t\t}\n\t\t}\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected PortalCache<K, V> createPortalCache(String cacheName) {\n\t\tMemoryPortalCache<K, V> portalCache = _memoryPortalCaches.get(\n\t\t\tcacheName);\n\n\t\tif (portalCache != null) {\n\t\t\treturn portalCache;\n\t\t}\n\n\t\tportalCache = new MemoryPortalCache<K, V>(\n\t\t\tthis, cacheName, _cacheInitialCapacity);\n\n\t\tif (_memoryPortalCaches.putIfAbsent(cacheName, portalCache) == null) {\n\t\t\taggregatedCacheManagerListener.notifyCacheAdded(cacheName);\n\t\t}\n\n\t\treturn _memoryPortalCaches.get(cacheName);\n\t}","id":105967,"modified_method":"@Override\n\tprotected PortalCache<K, V> createPortalCache(String cacheName) {\n\t\tMemoryPortalCache<K, V> portalCache = _memoryPortalCaches.get(\n\t\t\tcacheName);\n\n\t\tif (portalCache != null) {\n\t\t\treturn portalCache;\n\t\t}\n\n\t\tportalCache = new MemoryPortalCache<K, V>(\n\t\t\tthis, cacheName, _cacheInitialCapacity);\n\n\t\tMemoryPortalCache<K, V> previousPortalCache =\n\t\t\t_memoryPortalCaches.putIfAbsent(cacheName, portalCache);\n\n\t\tif (previousPortalCache == null) {\n\t\t\taggregatedCacheManagerListener.notifyCacheAdded(cacheName);\n\t\t}\n\t\telse {\n\t\t\tportalCache = previousPortalCache;\n\t\t}\n\n\t\treturn portalCache;\n\t}","commit_id":"aea0f3eec0b114372d3d9ccd9962121eea29ec2c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public BuildRootIndexImpl(BuildTargetIndex targetIndex, JpsModel model, ModuleExcludeIndex index,\n                            BuildDataPaths dataPaths, final IgnoredFileIndex ignoredFileIndex) {\n    myIgnoredFileIndex = ignoredFileIndex;\n    myRootsByTarget = new HashMap<BuildTarget<?>, List<? extends BuildRootDescriptor>>();\n    myRootToDescriptors = new THashMap<File, List<BuildRootDescriptor>>(FileUtil.FILE_HASHING_STRATEGY);\n    myFileFilters = new ConcurrentHashMap<BuildRootDescriptor, FileFilter>();\n    final Iterable<AdditionalRootsProviderService> rootsProviders = JpsServiceManager.getInstance().getExtensions(AdditionalRootsProviderService.class);\n    for (BuildTargetType<?> targetType : TargetTypeRegistry.getInstance().getTargetTypes()) {\n      for (BuildTarget<?> target : targetIndex.getAllTargets(targetType)) {\n        addRoots(dataPaths, rootsProviders, target, model, index, ignoredFileIndex);\n      }\n    }\n  }","id":105968,"modified_method":"public BuildRootIndexImpl(BuildTargetIndex targetIndex, JpsModel model, ModuleExcludeIndex index,\n                            BuildDataPaths dataPaths, final IgnoredFileIndex ignoredFileIndex) {\n    myIgnoredFileIndex = ignoredFileIndex;\n    myRootsByTarget = new HashMap<BuildTarget<?>, List<? extends BuildRootDescriptor>>();\n    myRootToDescriptors = new THashMap<File, List<BuildRootDescriptor>>(FileUtil.FILE_HASHING_STRATEGY);\n    myFileFilters = new ConcurrentHashMap<BuildRootDescriptor, FileFilter>(16, 0.75f, 1);\n    final Iterable<AdditionalRootsProviderService> rootsProviders = JpsServiceManager.getInstance().getExtensions(AdditionalRootsProviderService.class);\n    for (BuildTargetType<?> targetType : TargetTypeRegistry.getInstance().getTargetTypes()) {\n      for (BuildTarget<?> target : targetIndex.getAllTargets(targetType)) {\n        addRoots(dataPaths, rootsProviders, target, model, index, ignoredFileIndex);\n      }\n    }\n  }","commit_id":"01ef080d23f1feffa8a236491ceca646c4d66798","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public BuildTargetTypeState(BuildTargetType<?> targetType, BuildTargetsState state) {\n    myTargetType = targetType;\n    myTargetsState = state;\n    myTargetsFile = new File(state.getDataPaths().getTargetTypeDataRoot(targetType), \"targets.dat\");\n    myConfigurations = new ConcurrentHashMap<BuildTarget<?>, BuildTargetConfiguration>();\n    myTargetIds = new HashMap<BuildTarget<?>, Integer>();\n    load();\n  }","id":105969,"modified_method":"public BuildTargetTypeState(BuildTargetType<?> targetType, BuildTargetsState state) {\n    myTargetType = targetType;\n    myTargetsState = state;\n    myTargetsFile = new File(state.getDataPaths().getTargetTypeDataRoot(targetType), \"targets.dat\");\n    myConfigurations = new ConcurrentHashMap<BuildTarget<?>, BuildTargetConfiguration>(16, 0.75f, 1);\n    myTargetIds = new HashMap<BuildTarget<?>, Integer>();\n    load();\n  }","commit_id":"01ef080d23f1feffa8a236491ceca646c4d66798","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private BuildTargetTypeState getTypeState(BuildTargetType<?> type) {\n    BuildTargetTypeState state = myTypeStates.get(type);\n    if (state == null) {\n      state = new BuildTargetTypeState(type, this);\n      myTypeStates.putIfAbsent(type, state);\n      state = myTypeStates.get(type);\n    }\n    return state;\n  }","id":105970,"modified_method":"private BuildTargetTypeState getTypeState(BuildTargetType<?> type) {\n    BuildTargetTypeState state = myTypeStates.get(type);\n    if (state == null) {\n      final BuildTargetTypeState newState = new BuildTargetTypeState(type, this);\n      state = myTypeStates.putIfAbsent(type, newState);\n      if (state == null) {\n        state = newState;\n      }\n    }\n    return state;\n  }","commit_id":"01ef080d23f1feffa8a236491ceca646c4d66798","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public <T> Iterable<T> getExtensions(Class<T> extensionClass) {\n    List<?> cached = myExtensions.get(extensionClass);\n    if (cached == null) {\n      final ServiceLoader<T> loader = ServiceLoader.load(extensionClass, extensionClass.getClassLoader());\n      List<T> extensions = new ArrayList<T>();\n      for (T t : loader) {\n        extensions.add(t);\n      }\n      myExtensions.putIfAbsent(extensionClass, extensions);\n      cached = myExtensions.get(extensionClass);\n    }\n    //noinspection unchecked\n    return (List<T>)cached;\n  }","id":105971,"modified_method":"@Override\n  public <T> Iterable<T> getExtensions(Class<T> extensionClass) {\n    List<?> cached = myExtensions.get(extensionClass);\n    if (cached == null) {\n      final ServiceLoader<T> loader = ServiceLoader.load(extensionClass, extensionClass.getClassLoader());\n      final List<T> extensions = new ArrayList<T>();\n      for (T t : loader) {\n        extensions.add(t);\n      }\n      cached = myExtensions.putIfAbsent(extensionClass, extensions);\n      if (cached == null) {\n        cached = extensions;\n      }\n    }\n    //noinspection unchecked\n    return (List<T>)cached;\n  }","commit_id":"01ef080d23f1feffa8a236491ceca646c4d66798","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public <T> T getService(Class<T> serviceClass) {\n    //noinspection unchecked\n    T service = (T)myServices.get(serviceClass);\n    if (service == null) {\n      final Iterator<T> iterator = ServiceLoader.load(serviceClass, serviceClass.getClassLoader()).iterator();\n      if (!iterator.hasNext()) {\n        throw new ServiceConfigurationError(\"Implementation for \" + serviceClass + \" not found\");\n      }\n      service = iterator.next();\n      if (iterator.hasNext()) {\n        throw new ServiceConfigurationError(\n          \"More than one implementation for \" + serviceClass + \" found: \" + service.getClass() + \" and \" + iterator.next().getClass());\n      }\n      myServices.putIfAbsent(serviceClass, service);\n      //noinspection unchecked\n      service = (T)myServices.get(serviceClass);\n    }\n    return service;\n  }","id":105972,"modified_method":"@Override\n  public <T> T getService(Class<T> serviceClass) {\n    //noinspection unchecked\n    T service = (T)myServices.get(serviceClass);\n    if (service == null) {\n      final Iterator<T> iterator = ServiceLoader.load(serviceClass, serviceClass.getClassLoader()).iterator();\n      if (!iterator.hasNext()) {\n        throw new ServiceConfigurationError(\"Implementation for \" + serviceClass + \" not found\");\n      }\n      final T loadedService = iterator.next();\n      if (iterator.hasNext()) {\n        throw new ServiceConfigurationError(\n          \"More than one implementation for \" + serviceClass + \" found: \" + loadedService.getClass() + \" and \" + iterator.next().getClass());\n      }\n      //noinspection unchecked\n      service = (T)myServices.putIfAbsent(serviceClass, loadedService);\n      if (service == null) {\n        service = loadedService;\n      }\n    }\n    return service;\n  }","commit_id":"01ef080d23f1feffa8a236491ceca646c4d66798","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * Action when the \"Search\" button is pressed.\n     *\n     * @param evt  the action event\n     */\n    private void search() {\n        // change the cursor to \"waiting cursor\" for this operation\n        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n        try {\n            if (this.anyFiltersEnabled()) {\n                String title = \"File Search Results \" + index;\n                String pathText = \"Filename Search Results:\";\n\n                // try to get the number of matches first\n                Case currentCase = Case.getCurrentCase(); // get the most updated case\n                int totalMatches = 0;\n                ArrayList<FsContent> fsContentList = new ArrayList<FsContent>();\n                try {\n                    List<FsContent> currentDbList;\n                    SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n                    ResultSet rs = tempDb.runQuery(this.getQuery(\"count(*) as TotalMatches\"));\n                    totalMatches = totalMatches + rs.getInt(\"TotalMatches\");\n                    rs.close();\n                    rs = tempDb.runQuery(this.getQuery(null));\n                    currentDbList = tempDb.resultSetToFsContents(rs);\n                    rs.close();\n                    fsContentList.addAll(currentDbList);\n                } catch (SQLException ex) {\n                    Logger logger = Logger.getLogger(this.getClass().getName());\n                    logger.log(Level.WARNING, \"Error while trying to get the number of matches.\", ex);\n                }\n\n                TopComponent searchResultWin = DataResultTopComponent.createInstance(title, pathText, new TableFilterNode(new SearchNode(fsContentList), true), totalMatches);\n\n                searchResultWin.requestActive(); // make it the active top component\n\n                searchResultWin.addPropertyChangeListener(this);\n                searchResults.add((DataResultTopComponent) searchResultWin);\n                index++;\n\n                /**\n                 * If total matches more than 1000, pop up a dialog box that say\n                 * the performance maybe be slow and to increase the performance,\n                 * tell the users to refine their search.\n                 */\n                if (totalMatches > 1000) {\n                    // show the confirmation\n                    NotifyDescriptor d = new NotifyDescriptor.Message(\"Note: \" + totalMatches + \" matches found. Due to the large number of search results, performance may be slow for some operations. (In particular the thumbnail view in this version of Autospy, should be fixed in a future version) \\n\\nPlease refine your search to get better search results and improve performance.\");\n                    DialogDisplayer.getDefault().notify(d);\n                }\n            } else {\n                throw new FilterValidationException(\"At least one filter must be selected.\");\n            }\n        } catch (FilterValidationException ex) {\n            NotifyDescriptor d = new NotifyDescriptor.Message(\"Validation Error: \" + ex.getMessage());\n            DialogDisplayer.getDefault().notify(d);\n        } finally {\n            this.setCursor(null);\n        }\n    }","id":105973,"modified_method":"/**\n     * Action when the \"Search\" button is pressed.\n     *\n     * @param evt  the action event\n     */\n    private void search() {\n        // change the cursor to \"waiting cursor\" for this operation\n        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));\n        try {\n            if (this.anyFiltersEnabled()) {\n                String title = \"File Search Results \" + index;\n                String pathText = \"Filename Search Results:\";\n\n                // try to get the number of matches first\n                Case currentCase = Case.getCurrentCase(); // get the most updated case\n                int totalMatches = 0;\n                ArrayList<FsContent> fsContentList = new ArrayList<FsContent>();\n                try {\n                    List<FsContent> currentDbList;\n                    SleuthkitCase tempDb = currentCase.getSleuthkitCase();\n                    ResultSet rs = tempDb.runQuery(this.getQuery(\"count(*) as TotalMatches\"));\n                    totalMatches = totalMatches + rs.getInt(\"TotalMatches\");\n                    rs.getStatement().close();\n                    rs.close();\n                    rs = tempDb.runQuery(this.getQuery(null));\n                    currentDbList = tempDb.resultSetToFsContents(rs);\n                    rs.getStatement().close();\n                    rs.close();\n                    fsContentList.addAll(currentDbList);\n                } catch (SQLException ex) {\n                    Logger logger = Logger.getLogger(this.getClass().getName());\n                    logger.log(Level.WARNING, \"Error while trying to get the number of matches.\", ex);\n                }\n\n                TopComponent searchResultWin = DataResultTopComponent.createInstance(title, pathText, new TableFilterNode(new SearchNode(fsContentList), true), totalMatches);\n\n                searchResultWin.requestActive(); // make it the active top component\n\n                searchResultWin.addPropertyChangeListener(this);\n                searchResults.add((DataResultTopComponent) searchResultWin);\n                index++;\n\n                /**\n                 * If total matches more than 1000, pop up a dialog box that say\n                 * the performance maybe be slow and to increase the performance,\n                 * tell the users to refine their search.\n                 */\n                if (totalMatches > 1000) {\n                    // show the confirmation\n                    NotifyDescriptor d = new NotifyDescriptor.Message(\"Note: \" + totalMatches + \" matches found. Due to the large number of search results, performance may be slow for some operations. (In particular the thumbnail view in this version of Autospy, should be fixed in a future version) \\n\\nPlease refine your search to get better search results and improve performance.\");\n                    DialogDisplayer.getDefault().notify(d);\n                }\n            } else {\n                throw new FilterValidationException(\"At least one filter must be selected.\");\n            }\n        } catch (FilterValidationException ex) {\n            NotifyDescriptor d = new NotifyDescriptor.Message(\"Validation Error: \" + ex.getMessage());\n            DialogDisplayer.getDefault().notify(d);\n        } finally {\n            this.setCursor(null);\n        }\n    }","commit_id":"3817504a494e6ae65c9b48e5001e7b3626a5a686","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n    public Collection<FsContent> visit(FileSystem fs) {\n        // Files in the database have a filesystem field, so it's quick to\n        // get all the matching files for an entire filesystem with a query\n\n        SleuthkitCase sc = Case.getCurrentCase().getSleuthkitCase();\n\n        String query = \"SELECT * FROM tsk_files WHERE fs_obj_id = \" + fs.getId()\n                + \" AND (meta_type = \" + TskData.TSK_FS_META_TYPE_ENUM.TSK_FS_META_TYPE_REG.getMetaType() + \n                \") AND (known != \" + FileKnown.KNOWN.toLong() + \") AND (size > 0)\";\n        try {\n            ResultSet rs = sc.runQuery(query);\n            return sc.resultSetToFsContents(rs);\n        } catch (SQLException ex) {\n            logger.log(Level.WARNING, \"Couldn't get all files in FileSystem\", ex);\n            return Collections.EMPTY_SET;\n        }\n    }","id":105974,"modified_method":"@Override\n    public Collection<FsContent> visit(FileSystem fs) {\n        // Files in the database have a filesystem field, so it's quick to\n        // get all the matching files for an entire filesystem with a query\n\n        SleuthkitCase sc = Case.getCurrentCase().getSleuthkitCase();\n\n        String query = \"SELECT * FROM tsk_files WHERE fs_obj_id = \" + fs.getId()\n                + \" AND (meta_type = \" + TskData.TSK_FS_META_TYPE_ENUM.TSK_FS_META_TYPE_REG.getMetaType() + \n                \") AND (known != \" + FileKnown.KNOWN.toLong() + \") AND (size > 0)\";\n        try {\n            ResultSet rs = sc.runQuery(query);\n            List<FsContent> contents = sc.resultSetToFsContents(rs);\n            rs.getStatement().close();\n            rs.close();\n            return contents;\n        } catch (SQLException ex) {\n            logger.log(Level.WARNING, \"Couldn't get all files in FileSystem\", ex);\n            return Collections.EMPTY_SET;\n        }\n    }","commit_id":"3817504a494e6ae65c9b48e5001e7b3626a5a686","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n    public Collection<FsContent> visit(FileSystem fs) {\n        // Files in the database have a filesystem field, so it's quick to\n        // get all the matching files for an entire filesystem with a query\n\n        SleuthkitCase sc = Case.getCurrentCase().getSleuthkitCase();\n\n        String query = \"SELECT * FROM tsk_files WHERE fs_obj_id = \" + fs.getId()\n                + \" AND (meta_type = \" + TskData.TSK_FS_META_TYPE_ENUM.TSK_FS_META_TYPE_REG.getMetaType() + \n                \") AND (known != \" + FileKnown.KNOWN.toLong() + \") AND (size > 0)\";\n        try {\n            ResultSet rs = sc.runQuery(query);\n            return sc.resultSetToFsContents(rs);\n        } catch (SQLException ex) {\n            logger.log(Level.WARNING, \"Couldn't get all files in FileSystem\", ex);\n            return Collections.EMPTY_SET;\n        }\n    }","id":105975,"modified_method":"@Override\n    public Collection<FsContent> visit(FileSystem fs) {\n        // Files in the database have a filesystem field, so it's quick to\n        // get all the matching files for an entire filesystem with a query\n\n        SleuthkitCase sc = Case.getCurrentCase().getSleuthkitCase();\n\n        String query = \"SELECT * FROM tsk_files WHERE fs_obj_id = \" + fs.getId()\n                + \" AND (meta_type = \" + TskData.TSK_FS_META_TYPE_ENUM.TSK_FS_META_TYPE_REG.getMetaType() + \n                \") AND (known != \" + FileKnown.KNOWN.toLong() + \") AND (size > 0)\";\n        try {\n            ResultSet rs = sc.runQuery(query);\n            List<FsContent>contents =  sc.resultSetToFsContents(rs);\n            rs.getStatement().close();\n            rs.close();\n            return contents;\n        } catch (SQLException ex) {\n            logger.log(Level.WARNING, \"Couldn't get all files in FileSystem\", ex);\n            return Collections.EMPTY_SET;\n        }\n    }","commit_id":"3817504a494e6ae65c9b48e5001e7b3626a5a686","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"@Override\n    public Collection<FsContent> visit(FileSystem fs) {\n        // Files in the database have a filesystem field, so it's quick to\n        // get all the matching files for an entire filesystem with a query\n        \n        SleuthkitCase sc = Case.getCurrentCase().getSleuthkitCase();\n\n        String query = \"SELECT * FROM tsk_files WHERE fs_obj_id = \" + fs.getId()\n                + \" AND (\" + extensionsLikePredicate + \")\"\n                + \" AND (known != \" + FileKnown.KNOWN.toLong() + \")\" \n                + \" AND (meta_type = \" + TskData.TSK_FS_META_TYPE_ENUM.TSK_FS_META_TYPE_REG.getMetaType() + \")\" \n                + \" AND (size > 0)\";\n        try {\n            ResultSet rs = sc.runQuery(query);\n            return sc.resultSetToFsContents(rs);\n        } catch (SQLException ex) {\n            logger.log(Level.WARNING, \"Couldn't get all files in FileSystem\", ex);\n            return Collections.EMPTY_SET;\n        }\n    }","id":105976,"modified_method":"@Override\n    public Collection<FsContent> visit(FileSystem fs) {\n        // Files in the database have a filesystem field, so it's quick to\n        // get all the matching files for an entire filesystem with a query\n        \n        SleuthkitCase sc = Case.getCurrentCase().getSleuthkitCase();\n\n        String query = \"SELECT * FROM tsk_files WHERE fs_obj_id = \" + fs.getId()\n                + \" AND (\" + extensionsLikePredicate + \")\"\n                + \" AND (known != \" + FileKnown.KNOWN.toLong() + \")\" \n                + \" AND (meta_type = \" + TskData.TSK_FS_META_TYPE_ENUM.TSK_FS_META_TYPE_REG.getMetaType() + \")\" \n                + \" AND (size > 0)\";\n        try {\n            ResultSet rs = sc.runQuery(query);\n            List<FsContent> contents =  sc.resultSetToFsContents(rs);\n            rs.getStatement().close();\n            rs.close();\n            return contents;\n        } catch (SQLException ex) {\n            logger.log(Level.WARNING, \"Couldn't get all files in FileSystem\", ex);\n            return Collections.EMPTY_SET;\n        }\n    }","commit_id":"3817504a494e6ae65c9b48e5001e7b3626a5a686","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n     * Just perform the query and return result without updating the GUI\n     * This utility is used in this class, can be potentially reused by other classes\n     * @param query\n     * @return matches List\n     */\n    @Override\n    public List<FsContent> performQuery() throws RuntimeException {\n        List<FsContent> matches = new ArrayList<FsContent>();\n\n        boolean allMatchesFetched = false;\n        final int ROWS_PER_FETCH = 10000;\n\n        Server.Core solrCore = KeywordSearch.getServer().getCore();\n\n        SolrQuery q = new SolrQuery();\n\n        q.setQuery(queryEscaped);\n        q.setRows(ROWS_PER_FETCH);\n        q.setFields(\"id\");\n\n        for (int start = 0; !allMatchesFetched; start = start + ROWS_PER_FETCH) {\n\n            q.setStart(start);\n\n            try {\n                QueryResponse response = solrCore.query(q, METHOD.POST);\n                SolrDocumentList resultList = response.getResults();\n                long results = resultList.getNumFound();\n\n                allMatchesFetched = start + ROWS_PER_FETCH >= results;\n\n                for (SolrDocument resultDoc : resultList) {\n                    long id = Long.parseLong((String) resultDoc.getFieldValue(\"id\"));\n\n                    SleuthkitCase sc = Case.getCurrentCase().getSleuthkitCase();\n\n                    // TODO: has to be a better way to get files. Also, need to \n                    // check that we actually get 1 hit for each id\n                    ResultSet rs = sc.runQuery(\"select * from tsk_files where obj_id=\" + id);\n                    matches.addAll(sc.resultSetToFsContents(rs));\n                    rs.close();\n                }\n\n            } catch (SolrServerException ex) {\n                logger.log(Level.WARNING, \"Error executing Lucene Solr Query: \" + query.substring(0,Math.min(query.length()-1, 200)), ex);\n                throw new RuntimeException(ex);\n                // TODO: handle bad query strings, among other issues\n            } catch (SQLException ex) {\n                logger.log(Level.WARNING, \"Error interpreting results from Lucene Solr Query: \" + query, ex);\n            }\n\n        }\n        return matches;\n    }","id":105977,"modified_method":"/**\n     * Just perform the query and return result without updating the GUI\n     * This utility is used in this class, can be potentially reused by other classes\n     * @param query\n     * @return matches List\n     */\n    @Override\n    public List<FsContent> performQuery() throws RuntimeException {\n        List<FsContent> matches = new ArrayList<FsContent>();\n\n        boolean allMatchesFetched = false;\n        final int ROWS_PER_FETCH = 10000;\n\n        Server.Core solrCore = KeywordSearch.getServer().getCore();\n\n        SolrQuery q = new SolrQuery();\n\n        q.setQuery(queryEscaped);\n        q.setRows(ROWS_PER_FETCH);\n        q.setFields(\"id\");\n\n        for (int start = 0; !allMatchesFetched; start = start + ROWS_PER_FETCH) {\n\n            q.setStart(start);\n\n            try {\n                QueryResponse response = solrCore.query(q, METHOD.POST);\n                SolrDocumentList resultList = response.getResults();\n                long results = resultList.getNumFound();\n\n                allMatchesFetched = start + ROWS_PER_FETCH >= results;\n\n                for (SolrDocument resultDoc : resultList) {\n                    long id = Long.parseLong((String) resultDoc.getFieldValue(\"id\"));\n\n                    SleuthkitCase sc = Case.getCurrentCase().getSleuthkitCase();\n\n                    // TODO: has to be a better way to get files. Also, need to \n                    // check that we actually get 1 hit for each id\n                    ResultSet rs = sc.runQuery(\"select * from tsk_files where obj_id=\" + id);\n                    matches.addAll(sc.resultSetToFsContents(rs));\n                    rs.getStatement().close();\n                    rs.close();\n                }\n\n            } catch (SolrServerException ex) {\n                logger.log(Level.WARNING, \"Error executing Lucene Solr Query: \" + query.substring(0,Math.min(query.length()-1, 200)), ex);\n                throw new RuntimeException(ex);\n                // TODO: handle bad query strings, among other issues\n            } catch (SQLException ex) {\n                logger.log(Level.WARNING, \"Error interpreting results from Lucene Solr Query: \" + query, ex);\n            }\n\n        }\n        return matches;\n    }","commit_id":"3817504a494e6ae65c9b48e5001e7b3626a5a686","url":"https://github.com/sleuthkit/autopsy"},{"original_method":"/**\n   * put your documentation comment here\n   * @exception ServletException\n   */\n  public void init() throws ServletException {\n    ServletConfig sc = this.getServletConfig();\n    if (sc != null) {\n      // initialize stylesheet set\n      // once JNDI DB access is in place the following line can be removed\n      try {\n        this.set = new StylesheetSet(this.getClass().getResource(relativeSSLLocation).toString());\n        String mediaPropsUrl = this.getClass().getResource(\"/properties/media.properties\").toString();\n        String mimePropsUrl = this.getClass().getResource(\"/properties/media.properties\").toString();\n        String serializerPropsUrl = this.getClass().getResource(\"/properties/media.properties\").toString();\n        this.set.setMediaProps(mediaPropsUrl);\n        this.mediaM = new MediaManager(mediaPropsUrl, mimePropsUrl, serializerPropsUrl);\n      } catch (PortalException pe) {\n        throw new ServletException(pe);\n      }\n      // determine the channel with its parameters\n      String className = sc.getInitParameter(\"className\");\n      channelName = sc.getInitParameter(\"channelName\");\n      hasEdit = Boolean.getBoolean(sc.getInitParameter(\"hasEdit\"));\n      hasHelp = Boolean.getBoolean(sc.getInitParameter(\"hasHelp\"));\n      hasAbout = Boolean.getBoolean(sc.getInitParameter(\"hasAbout\"));\n      String s_timeOut = sc.getInitParameter(\"timeOut\");\n      if (s_timeOut != null)\n        this.timeOut = Long.parseLong(s_timeOut);\n      // instantiate channel class\n      try {\n        channel = (org.jasig.portal.IChannel)Class.forName(className).newInstance();\n        // construct a ChannelStaticData object\n        ChannelStaticData sd = new ChannelStaticData();\n        sd.setChannelID(\"singlet\");\n        sd.setTimeout(timeOut);\n        // determine the IPerson object\n        int guestUserId = 1;\n        IPerson person = new org.jasig.portal.security.provider.PersonImpl();\n        person.setID(guestUserId);\n        person.setFullName(\"Guest\");\n        sd.setPerson(person);\n        // todo: determine and pass channel publish/subscribe parameters.\n        //\t\t    sd.setParameters (params);\n        channel.setStaticData(sd);\n        initialized = true;\n      } catch (Exception e) {\n          // some diagnostic state can be saved here\n          e.printStackTrace();\n      }\n    }\n  }","id":105978,"modified_method":"/**\n   * put your documentation comment here\n   * @exception ServletException\n   */\n  public void init() throws ServletException {\n    ServletConfig sc = this.getServletConfig();\n    if (sc != null) {\n      // initialize stylesheet set\n      // once JNDI DB access is in place the following line can be removed\n      try {\n\tthis.set = new StylesheetSet(ResourceLoader.getResourceAsURLString(this.getClass(), relativeSSLLocation));\n        String mediaPropsUrl = ResourceLoader.getResourceAsURLString(this.getClass(), \"/properties/media.properties\");\n        String mimePropsUrl = ResourceLoader.getResourceAsURLString(this.getClass(), \"/properties/mime.properties\");\n        String serializerPropsUrl = ResourceLoader.getResourceAsURLString(this.getClass(), \"/properties/serializer.properties\");\n        this.set.setMediaProps(mediaPropsUrl);\n        this.mediaM = new MediaManager(mediaPropsUrl, mimePropsUrl, serializerPropsUrl);\n      } catch (PortalException pe) {\n        throw new ServletException(pe);\n      }\n      // determine the channel with its parameters\n      String className = sc.getInitParameter(\"className\");\n      channelName = sc.getInitParameter(\"channelName\");\n      hasEdit = Boolean.getBoolean(sc.getInitParameter(\"hasEdit\"));\n      hasHelp = Boolean.getBoolean(sc.getInitParameter(\"hasHelp\"));\n      hasAbout = Boolean.getBoolean(sc.getInitParameter(\"hasAbout\"));\n      String s_timeOut = sc.getInitParameter(\"timeOut\");\n      if (s_timeOut != null)\n        this.timeOut = Long.parseLong(s_timeOut);\n      // instantiate channel class\n      try {\n        channel = (org.jasig.portal.IChannel)Class.forName(className).newInstance();\n        // construct a ChannelStaticData object\n        ChannelStaticData sd = new ChannelStaticData();\n        sd.setChannelID(\"singlet\");\n        sd.setTimeout(timeOut);\n        // determine the IPerson object\n        int guestUserId = 1;\n        IPerson person = new org.jasig.portal.security.provider.PersonImpl();\n        person.setID(guestUserId);\n        person.setFullName(\"Guest\");\n        sd.setPerson(person);\n        // todo: determine and pass channel publish/subscribe parameters.\n        //\t\t    sd.setParameters (params);\n        channel.setStaticData(sd);\n        initialized = true;\n      } catch (Exception e) {\n          // some diagnostic state can be saved here\n          e.printStackTrace();\n      }\n    }\n  }","commit_id":"6f627f9252e37ca59950bab7a8ba5b1c0bc619cd","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n     * This method will output channel content into the HttpServletResponse's\n     * out stream. Note that setRuntimeData() method is called only if there was\n     * no prior call to prepare() method.\n     * @param req http request\n     * @param res http response\n     */\n    public void render(HttpServletRequest req,HttpServletResponse res) throws Exception {\n\tChannelRuntimeData rd=null;\n\tif(!dataIsSet) {\n\t    if(this instanceof IPrivilegedChannel) {\n\t\t((IPrivilegedChannel) this).setPortalControlStructures(pcs);\n\t    }\n\t    rd=getRuntimeData(req);\n\t} else {\n\t    dataIsSet=false;\n\t}\n\n\t// start rendering\n\tChannelRenderer cr = new ChannelRenderer (this,rd);\n        cr.setTimeout (timeOut);\n        cr.startRendering ();\n\n\t// set the output mime type\n\tres.setContentType(mediaM.getReturnMimeType(req));\n\t// set up the serializer\n\tBaseMarkupSerializer ser = mediaM.getSerializer(mediaM.getMedia(req), res.getWriter());\n\tser.asContentHandler();\n\t// get the framing stylesheet\n\tString xslURI = set.getStylesheetURI(req);\n\ttry {\n            TransformerHandler th=XSLT.getTransformerHandler(xslURI);\n            th.setResult(new SAXResult(ser));\n\t    org.xml.sax.helpers.AttributesImpl atl = new org.xml.sax.helpers.AttributesImpl();\n\t    atl.addAttribute(\"\",\"name\",\"name\", \"CDATA\", channelName);\n\t    // add other attributes: hasHelp, hasAbout, hasEdit\n            th.startDocument();\n\t    th.startElement(\"\",\"channel\",\"channel\", atl);\n\t    ChannelSAXStreamFilter custodian = new ChannelSAXStreamFilter(th);\n\t    int out=cr.outputRendering(custodian);\n\t    if(out==cr.RENDERING_TIMED_OUT) {\n\t\tthrow new InternalTimeoutException(\"The channel has timed out\");\n\t    }\n\t    th.endElement(\"\",\"channel\",\"channel\");\n\t    th.endDocument();\n\t} catch (InternalPortalException ipe) {\n\t    throw ipe.getException();\n\t}\n    }","id":105979,"modified_method":"/**\n     * This method will output channel content into the HttpServletResponse's\n     * out stream. Note that setRuntimeData() method is called only if there was\n     * no prior call to prepare() method.\n     * @param req http request\n     * @param res http response\n     */\n    public void render(HttpServletRequest req,HttpServletResponse res) throws Exception {\n\tChannelRuntimeData rd=null;\n\tif(!dataIsSet) {\n\t    if(this instanceof IPrivilegedChannel) {\n\t\t((IPrivilegedChannel) this).setPortalControlStructures(pcs);\n\t    }\n\t    rd=getRuntimeData(req);\n\t} else {\n\t    dataIsSet=false;\n\t}\n\n\t// start rendering\n\tChannelRenderer cr = new ChannelRenderer (this,rd);\n        cr.setTimeout (timeOut);\n        cr.startRendering ();\n\n\t// set the output mime type\n\tres.setContentType(mediaM.getReturnMimeType(req));\n\t// set up the serializer\n\tBaseMarkupSerializer ser = mediaM.getSerializer(mediaM.getMedia(req), res.getWriter());\n\tser.asContentHandler();\n\t// get the framing stylesheet\n\tString xslURI = ResourceLoader.getResourceAsURLString(this.getClass(), set.getStylesheetURI(req));\n\ttry {\n            TransformerHandler th=XSLT.getTransformerHandler(xslURI);\n            th.setResult(new SAXResult(ser));\n\t    org.xml.sax.helpers.AttributesImpl atl = new org.xml.sax.helpers.AttributesImpl();\n\t    atl.addAttribute(\"\",\"name\",\"name\", \"CDATA\", channelName);\n\t    // add other attributes: hasHelp, hasAbout, hasEdit\n            th.startDocument();\n\t    th.startElement(\"\",\"channel\",\"channel\", atl);\n\t    ChannelSAXStreamFilter custodian = new ChannelSAXStreamFilter(th);\n\t    int out=cr.outputRendering(custodian);\n\t    if(out==cr.RENDERING_TIMED_OUT) {\n\t\tthrow new InternalTimeoutException(\"The channel has timed out\");\n\t    }\n\t    th.endElement(\"\",\"channel\",\"channel\");\n\t    th.endDocument();\n\t} catch (InternalPortalException ipe) {\n\t    throw ipe.getException();\n\t}\n    }","commit_id":"6f627f9252e37ca59950bab7a8ba5b1c0bc619cd","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n     * Initializes the channel and calls setStaticData() on the channel.\n     * @param params a hastable of channel publish/subscribe parameters (<parameter> elements\n     * @param channelName channel name\n     * @param hasHelp determines if the channel supports \"help\" layout event\n     * @param hasAbout determines if the channel supports \"about\" layout event\n     * @param hasEdit determines if the channel supports \"edit\" layout event\n     * @param timeOut channel timeout value in milliseconds\n     * @param person a user IPerson object\n     */\n    public void initialize(Hashtable params,String channelName,boolean hasHelp, boolean hasAbout, boolean hasEdit, long timeOut,IPerson person) throws PortalException {\n\tthis.set = new StylesheetSet(this.getClass().getResource(relativeSSLLocation).toString());\n        String mediaPropsUrl = this.getClass().getResource(\"/properties/media.properties\").toString();\n        String mimePropsUrl = this.getClass().getResource(\"/properties/media.properties\").toString();\n        String serializerPropsUrl = this.getClass().getResource(\"/properties/media.properties\").toString();\n\tthis.set.setMediaProps(mediaPropsUrl);\n        this.mediaM = new MediaManager(mediaPropsUrl, mimePropsUrl, serializerPropsUrl);\n\tthis.channelName=channelName;\n\tthis.hasHelp=hasHelp;\n\tthis.hasAbout=hasAbout;\n\tthis.hasEdit=hasEdit;\n\tthis.timeOut=timeOut;\n\tthis.pcs=pcs;\n\n        ChannelStaticData sd = new ChannelStaticData ();\n        sd.setChannelID (chanID);\n        sd.setTimeout (timeOut);\n        sd.setParameters (params);\n        // get person object from UsreLayoutManager\n        sd.setPerson(person);\n\tthis.setStaticData(sd);\n    }","id":105980,"modified_method":"/**\n     * Initializes the channel and calls setStaticData() on the channel.\n     * @param params a hastable of channel publish/subscribe parameters (<parameter> elements\n     * @param channelName channel name\n     * @param hasHelp determines if the channel supports \"help\" layout event\n     * @param hasAbout determines if the channel supports \"about\" layout event\n     * @param hasEdit determines if the channel supports \"edit\" layout event\n     * @param timeOut channel timeout value in milliseconds\n     * @param person a user IPerson object\n     */\n    public void initialize(Hashtable params,String channelName,boolean hasHelp, boolean hasAbout, boolean hasEdit, long timeOut,IPerson person) throws PortalException {\n\tthis.set = new StylesheetSet(ResourceLoader.getResourceAsURLString(this.getClass(), relativeSSLLocation));\n        String mediaPropsUrl = ResourceLoader.getResourceAsURLString(this.getClass(), \"/properties/media.properties\");\n        String mimePropsUrl = ResourceLoader.getResourceAsURLString(this.getClass(), \"/properties/mime.properties\");\n        String serializerPropsUrl = ResourceLoader.getResourceAsURLString(this.getClass(), \"/properties/serializer.properties\");\n\tthis.set.setMediaProps(mediaPropsUrl);\n        this.mediaM = new MediaManager(mediaPropsUrl, mimePropsUrl, serializerPropsUrl);\n\tthis.channelName=channelName;\n\tthis.hasHelp=hasHelp;\n\tthis.hasAbout=hasAbout;\n\tthis.hasEdit=hasEdit;\n\tthis.timeOut=timeOut;\n\tthis.pcs=pcs;\n\n        ChannelStaticData sd = new ChannelStaticData ();\n        sd.setChannelID (chanID);\n        sd.setTimeout (timeOut);\n        sd.setParameters (params);\n        // get person object from UsreLayoutManager\n        sd.setPerson(person);\n\tthis.setStaticData(sd);\n    }","commit_id":"6f627f9252e37ca59950bab7a8ba5b1c0bc619cd","url":"https://github.com/Jasig/uPortal"},{"original_method":"protected long getInternalRepositoryId(\n\t\t\tlong folderId, long fileEntryId, long fileVersionId)\n\t\tthrows PortalException {\n\n\t\tlong repositoryId = 0;\n\n\t\tif (folderId != 0) {\n\t\t\tDLFolder dlFolder = dlFolderLocalService.fetchDLFolder(folderId);\n\n\t\t\trepositoryId = dlFolder.getRepositoryId();\n\t\t}\n\t\telse if (fileEntryId != 0) {\n\t\t\tDLFileEntry dlFileEntry = dlFileEntryLocalService.fetchDLFileEntry(\n\t\t\t\tfileEntryId);\n\n\t\t\trepositoryId = dlFileEntry.getRepositoryId();\n\t\t}\n\t\telse if (fileVersionId != 0) {\n\t\t\tDLFileVersion dlFileVersion =\n\t\t\t\tdlFileVersionLocalService.fetchDLFileVersion(fileVersionId);\n\n\t\t\trepositoryId = dlFileVersion.getRepositoryId();\n\t\t}\n\t\telse {\n\t\t\tthrow new InvalidRepositoryIdException(\n\t\t\t\t\"Missing a valid ID for folder, file entry, or file \" +\n\t\t\t\t\t\"version\");\n\t\t}\n\n\t\treturn repositoryId;\n\t}","id":105981,"modified_method":"protected long getInternalRepositoryId(\n\t\t\tlong folderId, long fileEntryId, long fileVersionId)\n\t\tthrows PortalException {\n\n\t\tif (folderId != 0) {\n\t\t\tDLFolder dlFolder = dlFolderLocalService.fetchDLFolder(folderId);\n\n\t\t\tif (dlFolder == null) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn dlFolder.getRepositoryId();\n\t\t\t}\n\t\t}\n\t\telse if (fileEntryId != 0) {\n\t\t\tDLFileEntry dlFileEntry = dlFileEntryLocalService.fetchDLFileEntry(\n\t\t\t\tfileEntryId);\n\n\t\t\tif (dlFileEntry == null) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn dlFileEntry.getRepositoryId();\n\t\t\t}\n\t\t}\n\t\telse if (fileVersionId != 0) {\n\t\t\tDLFileVersion dlFileVersion =\n\t\t\t\tdlFileVersionLocalService.fetchDLFileVersion(fileVersionId);\n\n\t\t\tif (dlFileVersion == null) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\telse {\n\t\t\t\treturn dlFileVersion.getRepositoryId();\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tthrow new InvalidRepositoryIdException(\n\t\t\t\t\"Missing a valid ID for folder, file entry, or file \" +\n\t\t\t\t\t\"version\");\n\t\t}\n\t}","commit_id":"84dc2776a306d2d1134d7fa707015ff26a91f355","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic LocalRepository getLocalRepositoryImpl(\n\t\t\tlong folderId, long fileEntryId, long fileVersionId)\n\t\tthrows PortalException {\n\n\t\tlong repositoryEntryId = RepositoryUtil.getRepositoryEntryId(\n\t\t\tfolderId, fileEntryId, fileVersionId);\n\n\t\tLocalRepository localRepositoryImpl =\n\t\t\t_localRepositoriesByRepositoryEntryId.get(repositoryEntryId);\n\n\t\tif (localRepositoryImpl != null) {\n\t\t\treturn localRepositoryImpl;\n\t\t}\n\n\t\tlong repositoryId = getInternalRepositoryId(\n\t\t\tfolderId, fileEntryId, fileVersionId);\n\n\t\tif (repositoryId == 0) {\n\t\t\trepositoryId = getExternalRepositoryId(\n\t\t\t\tfolderId, fileEntryId, fileVersionId);\n\t\t}\n\n\t\tlocalRepositoryImpl = LocalRepositoryFactoryUtil.create(repositoryId);\n\n\t\tcheckRepository(localRepositoryImpl.getRepositoryId());\n\n\t\t_localRepositoriesByRepositoryEntryId.put(\n\t\t\trepositoryEntryId, localRepositoryImpl);\n\n\t\treturn localRepositoryImpl;\n\t}","id":105982,"modified_method":"@Override\n\tpublic LocalRepository getLocalRepositoryImpl(\n\t\t\tlong folderId, long fileEntryId, long fileVersionId)\n\t\tthrows PortalException {\n\n\t\tlong repositoryEntryId = RepositoryUtil.getRepositoryEntryId(\n\t\t\tfolderId, fileEntryId, fileVersionId);\n\n\t\tLocalRepository localRepositoryImpl =\n\t\t\t_localRepositoriesByRepositoryEntryId.get(repositoryEntryId);\n\n\t\tif (localRepositoryImpl != null) {\n\t\t\treturn localRepositoryImpl;\n\t\t}\n\n\t\tlong repositoryId = getRepositoryId(\n\t\t\tfolderId, fileEntryId, fileVersionId);\n\n\t\tlocalRepositoryImpl = LocalRepositoryFactoryUtil.create(repositoryId);\n\n\t\tcheckRepository(localRepositoryImpl.getRepositoryId());\n\n\t\t_localRepositoriesByRepositoryEntryId.put(\n\t\t\trepositoryEntryId, localRepositoryImpl);\n\n\t\treturn localRepositoryImpl;\n\t}","commit_id":"84dc2776a306d2d1134d7fa707015ff26a91f355","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic com.liferay.portal.kernel.repository.Repository getRepositoryImpl(\n\t\t\tlong folderId, long fileEntryId, long fileVersionId)\n\t\tthrows PortalException {\n\n\t\tlong repositoryEntryId = RepositoryUtil.getRepositoryEntryId(\n\t\t\tfolderId, fileEntryId, fileVersionId);\n\n\t\tcom.liferay.portal.kernel.repository.Repository repositoryImpl =\n\t\t\t_repositoriesByEntryId.get(repositoryEntryId);\n\n\t\tif (repositoryImpl != null) {\n\t\t\treturn repositoryImpl;\n\t\t}\n\n\t\tlong repositoryId = getInternalRepositoryId(\n\t\t\tfolderId, fileEntryId, fileVersionId);\n\n\t\tif (repositoryId == 0) {\n\t\t\trepositoryId = getExternalRepositoryId(\n\t\t\t\tfolderId, fileEntryId, fileVersionId);\n\t\t}\n\n\t\trepositoryImpl = RepositoryFactoryUtil.create(repositoryId);\n\n\t\tcheckRepository(repositoryImpl.getRepositoryId());\n\n\t\t_repositoriesByEntryId.put(repositoryEntryId, repositoryImpl);\n\n\t\treturn repositoryImpl;\n\t}","id":105983,"modified_method":"@Override\n\tpublic com.liferay.portal.kernel.repository.Repository getRepositoryImpl(\n\t\t\tlong folderId, long fileEntryId, long fileVersionId)\n\t\tthrows PortalException {\n\n\t\tlong repositoryEntryId = RepositoryUtil.getRepositoryEntryId(\n\t\t\tfolderId, fileEntryId, fileVersionId);\n\n\t\tcom.liferay.portal.kernel.repository.Repository repositoryImpl =\n\t\t\t_repositoriesByEntryId.get(repositoryEntryId);\n\n\t\tif (repositoryImpl != null) {\n\t\t\treturn repositoryImpl;\n\t\t}\n\n\t\tlong repositoryId = getRepositoryId(\n\t\t\tfolderId, fileEntryId, fileVersionId);\n\n\t\trepositoryImpl = RepositoryFactoryUtil.create(repositoryId);\n\n\t\tcheckRepository(repositoryImpl.getRepositoryId());\n\n\t\t_repositoriesByEntryId.put(repositoryEntryId, repositoryImpl);\n\n\t\treturn repositoryImpl;\n\t}","commit_id":"84dc2776a306d2d1134d7fa707015ff26a91f355","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public Sequence eval(Sequence contextSequence, Item contextItem)\n\t\tthrows XPathException {\n\t\tSequence inner = getArgument(0).eval(contextSequence, contextItem);\n\t\tif (inner.getLength() == 0)\n\t\t\treturn Sequence.EMPTY_SEQUENCE;\n\n\t\tSequenceIterator iter = inner.iterate();\n\t\tAtomicValue next = (AtomicValue) iter.nextItem();\n\t\tif (!Type.subTypeOf(next.getType(), Type.NUMBER))\n\t\t\tnext = next.convertTo(Type.DOUBLE);\n\t\tComputableValue sum = (ComputableValue) next;\n\t\twhile (iter.hasNext()) {\n\t\t\tnext = (AtomicValue) iter.nextItem();\n\t\t\tif (!Type.subTypeOf(next.getType(), Type.NUMBER))\n\t\t\t\tnext = next.convertTo(Type.DOUBLE);\n\t\t\tsum = sum.plus((NumericValue) next);\n\t\t}\n\t\treturn sum.div(new IntegerValue(inner.getLength()));\n\t}","id":105984,"modified_method":"public Sequence eval(Sequence contextSequence, Item contextItem)\n\t\tthrows XPathException {\n\t\tSequence inner = getArgument(0).eval(contextSequence, contextItem);\n\t\tif (inner.getLength() == 0)\n\t\t\treturn Sequence.EMPTY_SEQUENCE;\n\n\t\tSequenceIterator iter = inner.iterate();\n\t\tItem nextItem;\n\t\tAtomicValue nextValue;\n\t\tnextItem = iter.nextItem();\n\t\tnextValue = nextItem.atomize();\n\t\tif (!Type.subTypeOf(nextValue.getType(), Type.NUMBER))\n\t\t\tnextValue = nextValue.convertTo(Type.DOUBLE);\n\t\tComputableValue sum = (ComputableValue) nextValue;\n\t\twhile (iter.hasNext()) {\n\t\t\tnextItem = iter.nextItem();\n\t\t\tnextValue = nextItem.atomize();\n\t\t\tif (!Type.subTypeOf(nextValue.getType(), Type.NUMBER))\n\t\t\t\tnextValue = nextValue.convertTo(Type.DOUBLE);\n\t\t\tsum = sum.plus((NumericValue) nextValue);\n\t\t}\n\t\treturn sum.div(new IntegerValue(inner.getLength()));\n\t}","commit_id":"abf703030454649a27ec71ebd437852ab0b64733","url":"https://github.com/eXist-db/exist"},{"original_method":"public Sequence eval(Sequence contextSequence, Item contextItem)\n\t\tthrows XPathException {\n\t\tSequence arg = getArgument(0).eval(contextSequence, contextItem);\n\t\tif(arg.getLength() == 0)\n\t\t\treturn Sequence.EMPTY_SEQUENCE;\n\t\tCollator collator = getCollator(contextSequence, contextItem, 2);\n\t\tSequenceIterator iter = arg.unorderedIterator();\n\t\tAtomicValue max = (AtomicValue)iter.nextItem();\n\t\tif(max.getType() == Type.ATOMIC)\n\t\t\tmax = max.convertTo(Type.DOUBLE);\n\t\tAtomicValue current;\n\t\twhile(iter.hasNext()) {\n\t\t\tcurrent = (AtomicValue)iter.nextItem();\n\t\t\tif(current.getType() == Type.ATOMIC)\n\t\t\t\tcurrent = current.convertTo(Type.DOUBLE);\n\t\t\tif(Type.subTypeOf(current.getType(), Type.NUMBER) &&\n\t\t\t\t((NumericValue)current).isNaN())\n\t\t\t\treturn DoubleValue.NaN;\n\t\t\t\t\n\t\t\tmax = max.max(collator, current);\n\t\t}\n\t\treturn max;\n\t}","id":105985,"modified_method":"public Sequence eval(Sequence contextSequence, Item contextItem)\n\t\tthrows XPathException {\n\t\tSequence arg = getArgument(0).eval(contextSequence, contextItem);\n\t\tif(arg.getLength() == 0)\n\t\t\treturn Sequence.EMPTY_SEQUENCE;\n\t\tCollator collator = getCollator(contextSequence, contextItem, 2);\n\t\tSequenceIterator iter = arg.unorderedIterator();\n\t\tItem nextItem;\n\t\tAtomicValue nextValue;\n\t\tnextItem = iter.nextItem();\n\t\tnextValue = nextItem.atomize();\n\t\tAtomicValue max = nextValue;\n\t\tif(max.getType() == Type.ATOMIC)\n\t\t\tmax = max.convertTo(Type.DOUBLE);\t\t\n\t\twhile(iter.hasNext()) {\n\t\t\tnextItem = iter.nextItem();\n\t\t\tnextValue = nextItem.atomize();\n\t\t\tif(nextValue.getType() == Type.ATOMIC)\n\t\t\t\tnextValue = nextValue.convertTo(Type.DOUBLE);\n\t\t\tif(Type.subTypeOf(nextValue.getType(), Type.NUMBER) &&\n\t\t\t\t((NumericValue)nextValue).isNaN())\n\t\t\t\treturn DoubleValue.NaN;\n\t\t\t\t\n\t\t\tmax = max.max(collator, nextValue);\n\t\t}\n//\t\tTODO : return a ComputableValue ?\n\t\treturn max;\n\t}","commit_id":"8edb7cd6633ee803219c5f831cd22e1a696d4a61","url":"https://github.com/eXist-db/exist"},{"original_method":"public Sequence eval(Sequence contextSequence, Item contextItem)\n\t\tthrows XPathException {\n\t\tSequence arg = getArgument(0).eval(contextSequence, contextItem);\n\t\tif (arg.getLength() == 0)\n\t\t\treturn Sequence.EMPTY_SEQUENCE;\n\t\tCollator collator = getCollator(contextSequence, contextItem, 2);\n\t\tSequenceIterator iter = arg.iterate();\n\t\tAtomicValue min = (AtomicValue) iter.nextItem();\n\t\tAtomicValue current;\n\t\twhile (iter.hasNext()) {\n\t\t\tcurrent = (AtomicValue) iter.nextItem();\n\t\t\tif (current.getType() == Type.ATOMIC)\n\t\t\t\tcurrent = current.convertTo(Type.DOUBLE);\n\t\t\tif (Type.subTypeOf(current.getType(), Type.NUMBER)\n\t\t\t\t&& ((NumericValue) current).isNaN())\n\t\t\t\treturn DoubleValue.NaN;\n\n\t\t\tmin = min.min(collator, current);\n\t\t}\n\t\treturn min;\n\t}","id":105986,"modified_method":"public Sequence eval(Sequence contextSequence, Item contextItem)\n\t\tthrows XPathException {\n\t\tSequence arg = getArgument(0).eval(contextSequence, contextItem);\n\t\tif (arg.getLength() == 0)\n\t\t\treturn Sequence.EMPTY_SEQUENCE;\n\t\tCollator collator = getCollator(contextSequence, contextItem, 2);\n\t\tSequenceIterator iter = arg.iterate();\n\t\tItem nextItem;\n\t\tAtomicValue nextValue;\n\t\tnextItem = iter.nextItem();\n\t\tnextValue = nextItem.atomize();\n\t\tAtomicValue min = nextValue;\n\t\twhile (iter.hasNext()) {\n\t\t\tnextItem = iter.nextItem();\n\t\t\tnextValue = nextItem.atomize();\n\t\t\tif (nextValue.getType() == Type.ATOMIC)\n\t\t\t\tnextValue = nextValue.convertTo(Type.DOUBLE);\n\t\t\tif (Type.subTypeOf(nextValue.getType(), Type.NUMBER)\n\t\t\t\t&& ((NumericValue) nextValue).isNaN())\n\t\t\t\treturn DoubleValue.NaN;\n\n\t\t\tmin = min.min(collator, nextValue);\n\t\t}\n//\t\tTODO : return a ComputableValue ?\n\t\treturn min;\n\t}","commit_id":"8edb7cd6633ee803219c5f831cd22e1a696d4a61","url":"https://github.com/eXist-db/exist"},{"original_method":"public Sequence eval(Sequence contextSequence, Item contextItem) throws XPathException {\n\t\tSequence inner = getArgument(0).eval(contextSequence, contextItem);\n\t\tSequence zero = IntegerValue.ZERO;\n\t\tif(getSignature().getArgumentCount() == 2)\n\t\t\tzero = getArgument(1).eval(contextSequence, contextItem);\n\t\t\n\t\tif (inner.getLength() == 0)\n\t\t\treturn zero;\n\n\t\tSequenceIterator iter = inner.iterate();\n\t\tAtomicValue next = (AtomicValue) iter.nextItem();\n\t\tif (!Type.subTypeOf(next.getType(), Type.NUMBER))\n\t\t\tnext = next.convertTo(Type.DOUBLE);\n\t\tComputableValue sum = (ComputableValue) next;\n\t\twhile (iter.hasNext()) {\n\t\t\tnext = (AtomicValue) iter.nextItem();\n\t\t\tif (!Type.subTypeOf(next.getType(), Type.NUMBER))\n\t\t\t\tnext = next.convertTo(Type.DOUBLE);\n\t\t\tif(((NumericValue)next).isNaN())\n\t\t\t\treturn DoubleValue.NaN;\n\t\t\tsum = sum.plus((NumericValue) next);\n\t\t}\n\t\treturn sum;\n\t}","id":105987,"modified_method":"public Sequence eval(Sequence contextSequence, Item contextItem) throws XPathException {\n\t\tSequence inner = getArgument(0).eval(contextSequence, contextItem);\n\t\tSequence zero = IntegerValue.ZERO;\n\t\tif(getSignature().getArgumentCount() == 2)\n\t\t\tzero = getArgument(1).eval(contextSequence, contextItem);\n\t\t\n\t\tif (inner.getLength() == 0)\n\t\t\treturn zero;\n\n\t\tItem nextItem;\n\t\tAtomicValue nextValue;\n\t\tSequenceIterator iter = inner.iterate();\n\t\tnextItem = iter.nextItem();\n\t\tnextValue = nextItem.atomize();\n\t\tif (!Type.subTypeOf(nextValue.getType(), Type.NUMBER))\n\t\t\tnextValue = nextValue.convertTo(Type.DOUBLE);\n\t\tComputableValue sum = (ComputableValue) nextValue;\n\t\twhile (iter.hasNext()) {\n\t\t\tnextItem = iter.nextItem();\n\t\t\tnextValue = nextItem.atomize();\n\t\t\tif (!Type.subTypeOf(nextValue.getType(), Type.NUMBER))\n\t\t\t\tnextValue = nextValue.convertTo(Type.DOUBLE);\n\t\t\tif(((NumericValue)nextValue).isNaN())\n\t\t\t\treturn DoubleValue.NaN;\n\t\t\tsum = sum.plus((NumericValue) nextValue);\n\t\t}\n\t\treturn sum;\n\t}","commit_id":"1dba71ff01fe8ffa3351ca95b83f3cb10ce32fca","url":"https://github.com/eXist-db/exist"},{"original_method":"@Override\n\tpublic void startGateway() throws TimeoutException, GatewayException, IOException, InterruptedException\n\t{\n\t\tsuper.startGateway();\n\t\tthis.incomingMessagesThread = new Thread(new Runnable()\n\t\t{\n\t\t\t// Run thread to fake incoming messages\n                        @Override\n\t\t\tpublic void run()\n\t\t\t{\n\t\t\t\twhile (!FakeTestGateway.this.incomingMessagesThread.isInterrupted())\n\t\t\t\t{\n\t\t\t\t\ttry {\n\t\t\t\t\t\tQueueRunner runner = m_delayQueue.take();\n\t\t\t\t\t\trunner.run();\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\tLogUtils.warnf(this, e, \"failed to run queue\");\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, \"IncomingMessagesThread\");\n\t\tthis.incomingMessagesThread.start();\n\t}","id":105988,"modified_method":"@Override\n\tpublic void startGateway() throws TimeoutException, GatewayException, IOException, InterruptedException\n\t{\n\t\tsuper.startGateway();\n\t\tthis.incomingMessagesThread = new Thread(new Runnable()\n\t\t{\n\t\t\t// Run thread to fake incoming messages\n                        @Override\n\t\t\tpublic void run()\n\t\t\t{\n\t\t\t\twhile (!FakeTestGateway.this.incomingMessagesThread.isInterrupted())\n\t\t\t\t{\n\t\t\t\t\ttry {\n\t\t\t\t\t\tQueueRunner runner = m_delayQueue.take();\n\t\t\t\t\t\trunner.run();\n\t\t\t\t\t} catch (InterruptedException e) {\n\t\t\t\t\t\t// TODO Auto-generated catch block\n\t\t\t\t\t\tLOG.warn(\"failed to run queue\", e);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}, \"IncomingMessagesThread\");\n\t\tthis.incomingMessagesThread.start();\n\t}","commit_id":"80ac407d4ca2a7ea0adf8ceaed34aef3845151ae","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** {@inheritDoc} */\n\t@Override\n\tpublic PollStatus poll(MonitoredService svc, Map<String, Object> parameters) {\n        int retries = ParameterMap.getKeyedInteger(parameters, \"retry\", PingConstants.DEFAULT_RETRIES);\n        long timeout = ParameterMap.getKeyedLong(parameters, \"timeout\", PingConstants.DEFAULT_TIMEOUT);\n        Long rtt = null;\n        \n\t\tString phoneNumber = null;\n\t\ttry {\n\t\t\tphoneNumber = phonebook.getTargetForAddress(svc.getIpAddr());\n\t\t} catch (final PhonebookException e) {\n\t\t    LogUtils.warnf(this, e, \"Unable to get phonebook target for %s\", svc.getIpAddr());\n\t\t}\n\n\t\tif (phoneNumber != null) {\n\t\t\ttry {\n\t\t\t\trtt = SmsPinger.ping(phoneNumber, timeout, retries);\n\t\t\t} catch (final Exception e) {\n\t\t\t    LogUtils.warnf(this, e, \"Unable to ping phone number: %s\", phoneNumber);\n\t\t\t}\n\t\t}\n\n\t\tif (rtt != null) {\n\t\t\treturn PollStatus.available(rtt.doubleValue());\n\t\t} else {\n\t\t\treturn PollStatus.unavailable();\n\t\t}\n\t}","id":105989,"modified_method":"/** {@inheritDoc} */\n\t@Override\n\tpublic PollStatus poll(MonitoredService svc, Map<String, Object> parameters) {\n        int retries = ParameterMap.getKeyedInteger(parameters, \"retry\", PingConstants.DEFAULT_RETRIES);\n        long timeout = ParameterMap.getKeyedLong(parameters, \"timeout\", PingConstants.DEFAULT_TIMEOUT);\n        Long rtt = null;\n        \n\t\tString phoneNumber = null;\n\t\ttry {\n\t\t\tphoneNumber = phonebook.getTargetForAddress(svc.getIpAddr());\n\t\t} catch (final PhonebookException e) {\n\t\t    LOG.warn(\"Unable to get phonebook target for {}\", svc.getIpAddr(), e);\n\t\t}\n\n\t\tif (phoneNumber != null) {\n\t\t\ttry {\n\t\t\t\trtt = SmsPinger.ping(phoneNumber, timeout, retries);\n\t\t\t} catch (final Exception e) {\n\t\t\t    LOG.warn(\"Unable to ping phone number: {}\", phoneNumber, e);\n\t\t\t}\n\t\t}\n\n\t\tif (rtt != null) {\n\t\t\treturn PollStatus.available(rtt.doubleValue());\n\t\t} else {\n\t\t\treturn PollStatus.unavailable();\n\t\t}\n\t}","commit_id":"80ac407d4ca2a7ea0adf8ceaed34aef3845151ae","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * <p>getGenerator<\/p>\n     *\n     * @return a {@link org.opennms.sms.monitor.session.SessionVariableGenerator} object.\n     * @throws java.lang.ClassNotFoundException if any.\n     * @throws java.lang.InstantiationException if any.\n     * @throws java.lang.IllegalAccessException if any.\n     */\n    public SessionVariableGenerator getGenerator() throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        \n        if (m_generator == null) {\n            Class<?> c = Class.forName(getClassName());\n            if (SessionVariableGenerator.class.isAssignableFrom(c)) {\n                SessionVariableGenerator generator = (SessionVariableGenerator)c.newInstance();\n                generator.setParameters(getParametersAsMap());\n                m_generator = generator;\n    \n            } else {\n                warnf(this, \"unable to get instance of session class: %s\", c);\n            }\n        }\n        return m_generator;\n    }","id":105990,"modified_method":"/**\n     * <p>getGenerator<\/p>\n     *\n     * @return a {@link org.opennms.sms.monitor.session.SessionVariableGenerator} object.\n     * @throws java.lang.ClassNotFoundException if any.\n     * @throws java.lang.InstantiationException if any.\n     * @throws java.lang.IllegalAccessException if any.\n     */\n    public SessionVariableGenerator getGenerator() throws ClassNotFoundException, InstantiationException, IllegalAccessException {\n        \n        if (m_generator == null) {\n            Class<?> c = Class.forName(getClassName());\n            if (SessionVariableGenerator.class.isAssignableFrom(c)) {\n                SessionVariableGenerator generator = (SessionVariableGenerator)c.newInstance();\n                generator.setParameters(getParametersAsMap());\n                m_generator = generator;\n    \n            } else {\n                LOG.warn(\"unable to get instance of session class: {}\", c);\n            }\n        }\n        return m_generator;\n    }","commit_id":"80ac407d4ca2a7ea0adf8ceaed34aef3845151ae","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** {@inheritDoc} */\n\t@Override\n    public boolean matches(MobileSequenceSession session, MobileMsgRequest request, MobileMsgResponse response) {\n        LogUtils.tracef(this, \"smsFromRecipient.matches(%s, %s)\", request, response);\n        if (request instanceof SmsRequest && response instanceof SmsResponse) {\n        \treturn equals(((SmsResponse)response).getOriginator(), ((SmsRequest)request).getRecipient());\n        }\n\n        return false;\n    }","id":105991,"modified_method":"/** {@inheritDoc} */\n\t@Override\n    public boolean matches(MobileSequenceSession session, MobileMsgRequest request, MobileMsgResponse response) {\n        LOG.trace(\"smsFromRecipient.matches({}, {})\", request, response);\n        if (request instanceof SmsRequest && response instanceof SmsResponse) {\n        \treturn equals(((SmsResponse)response).getOriginator(), ((SmsRequest)request).getRecipient());\n        }\n\n        return false;\n    }","commit_id":"80ac407d4ca2a7ea0adf8ceaed34aef3845151ae","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** {@inheritDoc} */\n\t@Override\n    public boolean matches(MobileSequenceSession session, MobileMsgRequest request, MobileMsgResponse response) {\n        LogUtils.tracef(this, \"smsFrom.matches(%s, %s, %s)\", session.substitute(getText()), request, response);\n        return response instanceof SmsResponse && session.eqOrMatches(getText(), ((SmsResponse)response).getOriginator());\n    }","id":105992,"modified_method":"/** {@inheritDoc} */\n\t@Override\n    public boolean matches(MobileSequenceSession session, MobileMsgRequest request, MobileMsgResponse response) {\n        LOG.trace(\"smsFrom.matches({}, {}, {})\", Arrays.asList(session.substitute(getText()), request, response));\n        return response instanceof SmsResponse && session.eqOrMatches(getText(), ((SmsResponse)response).getOriginator());\n    }","commit_id":"80ac407d4ca2a7ea0adf8ceaed34aef3845151ae","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** {@inheritDoc} */\n\t@Override\n    public boolean matches(MobileSequenceSession session, MobileMsgRequest request, MobileMsgResponse response) {\n        LogUtils.tracef(this, \"textMatches(%s, %s, %s)\", session.substitute(getText()), request, response);\n        String responseText = response.getText() == null ? \"\" : response.getText();\n        return session.matches(getText(), responseText);\n    }","id":105993,"modified_method":"/** {@inheritDoc} */\n\t@Override\n    public boolean matches(MobileSequenceSession session, MobileMsgRequest request, MobileMsgResponse response) {\n        LOG.trace(\"textMatches({}, {}, {})\", Arrays.asList(session.substitute(getText()), request, response));\n        String responseText = response.getText() == null ? \"\" : response.getText();\n        return session.matches(getText(), responseText);\n    }","commit_id":"80ac407d4ca2a7ea0adf8ceaed34aef3845151ae","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/** {@inheritDoc} */\n\t@Override\n    public boolean matches(MobileSequenceSession session, MobileMsgRequest request, MobileMsgResponse response) {\n        LogUtils.tracef(this, \"ussdStatusIs(%s, %s)\", getText(), request, response);\n        return response instanceof UssdResponse && session.ussdStatusMatches(getText(), ((UssdResponse)response).getSessionStatus());\n    }","id":105994,"modified_method":"/** {@inheritDoc} */\n\t@Override\n    public boolean matches(MobileSequenceSession session, MobileMsgRequest request, MobileMsgResponse response) {\n        LOG.trace(\"ussdStatusIs({}, {})\", Arrays.asList(getText(), request, response));\n        return response instanceof UssdResponse && session.ussdStatusMatches(getText(), ((UssdResponse)response).getSessionStatus());\n    }","commit_id":"80ac407d4ca2a7ea0adf8ceaed34aef3845151ae","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void verifyCustomJsps(\n\t\t\tString currentServletContextName, CustomJspBag currentCustomJspBag)\n\t\tthrows DuplicateCustomJspException {\n\n\t\tif (_customJspBagsMap.isEmpty() ||\n\t\t\t_customJspBagsMap.containsKey(currentServletContextName) ||\n\t\t\t!currentCustomJspBag.isCustomJspGlobal()) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tString currentCustomJspDir = currentCustomJspBag.getCustomJspDir();\n\t\tSet<String> currentCustomJsps = new HashSet<>();\n\n\t\tfor (String currentCustomJsp : currentCustomJspBag.getCustomJsps()) {\n\t\t\tint pos = currentCustomJsp.indexOf(currentCustomJspDir);\n\n\t\t\tString portalJsp = currentCustomJsp.substring(\n\t\t\t\tpos + currentCustomJspDir.length());\n\n\t\t\tcurrentCustomJsps.add(portalJsp);\n\t\t}\n\n\t\tMap<String, String> collidingCustomJsps = new HashMap<>();\n\n\t\tfor (Map.Entry<String, CustomJspBag> entry :\n\t\t\t\t_customJspBagsMap.entrySet()) {\n\n\t\t\tCustomJspBag customJspBag = (CustomJspBag)entry.getValue();\n\n\t\t\tif (!customJspBag.isCustomJspGlobal()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tString servletContextName = (String)entry.getKey();\n\n\t\t\tString customJspDir = customJspBag.getCustomJspDir();\n\t\t\tList<String> customJsps = customJspBag.getCustomJsps();\n\n\t\t\tfor (String customJsp : customJsps) {\n\t\t\t\tint pos = customJsp.indexOf(customJspDir);\n\n\t\t\t\tString portalJsp = customJsp.substring(\n\t\t\t\t\tpos + customJspDir.length());\n\n\t\t\t\tif (currentCustomJsps.contains(portalJsp)) {\n\t\t\t\t\tcollidingCustomJsps.put(portalJsp, servletContextName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ((collidingCustomJsps != null) && !collidingCustomJsps.isEmpty()) {\n\t\t\t_log.error(\n\t\t\t\tcurrentServletContextName + \" is colliding with the \" +\n\t\t\t\t\t\"currently installed hooks\");\n\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\tLog log = SanitizerLogWrapper.allowCRLF(_log);\n\n\t\t\t\tStringBundler sb = new StringBundler(\n\t\t\t\t\tcollidingCustomJsps.size() * 4 + 3);\n\n\t\t\t\tsb.append(\"Colliding JSP files in \");\n\t\t\t\tsb.append(currentServletContextName);\n\t\t\t\tsb.append(StringPool.NEW_LINE);\n\n\t\t\t\tfor (Map.Entry<String, String> entry :\n\t\t\t\t\t\tcollidingCustomJsps.entrySet()) {\n\n\t\t\t\t\tsb.append((String)entry.getKey());\n\t\t\t\t\tsb.append(\" with \");\n\t\t\t\t\tsb.append((String)entry.getValue());\n\t\t\t\t\tsb.append(StringPool.NEW_LINE);\n\t\t\t\t}\n\n\t\t\t\tsb.setIndex(sb.index() - 1);\n\n\t\t\t\tlog.debug(sb.toString());\n\t\t\t}\n\n\t\t\tthrow new DuplicateCustomJspException();\n\t\t}\n\t}","id":105995,"modified_method":"protected void verifyCustomJsps(\n\t\t\tString currentServletContextName, CustomJspBag currentCustomJspBag)\n\t\tthrows DuplicateCustomJspException {\n\n\t\tif (_customJspBagsMap.isEmpty() ||\n\t\t\t_customJspBagsMap.containsKey(currentServletContextName) ||\n\t\t\t!currentCustomJspBag.isCustomJspGlobal()) {\n\n\t\t\treturn;\n\t\t}\n\n\t\tString currentCustomJspDir = currentCustomJspBag.getCustomJspDir();\n\t\tSet<String> currentCustomJsps = new HashSet<>();\n\n\t\tfor (String currentCustomJsp : currentCustomJspBag.getCustomJsps()) {\n\t\t\tString portalJsp = getPortalJspName(\n\t\t\t\tcurrentCustomJsp, currentCustomJspDir);\n\n\t\t\tcurrentCustomJsps.add(portalJsp);\n\t\t}\n\n\t\tMap<String, String> collidingCustomJsps = new HashMap<>();\n\n\t\tfor (Map.Entry<String, CustomJspBag> entry :\n\t\t\t\t_customJspBagsMap.entrySet()) {\n\n\t\t\tCustomJspBag customJspBag = (CustomJspBag)entry.getValue();\n\n\t\t\tif (!customJspBag.isCustomJspGlobal()) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tString servletContextName = (String)entry.getKey();\n\n\t\t\tString customJspDir = customJspBag.getCustomJspDir();\n\t\t\tList<String> customJsps = customJspBag.getCustomJsps();\n\n\t\t\tfor (String customJsp : customJsps) {\n\t\t\t\tString portalJsp = getPortalJspName(customJsp, customJspDir);\n\n\t\t\t\tif (currentCustomJsps.contains(portalJsp)) {\n\t\t\t\t\tcollidingCustomJsps.put(portalJsp, servletContextName);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif ((collidingCustomJsps != null) && !collidingCustomJsps.isEmpty()) {\n\t\t\t_log.error(\n\t\t\t\tcurrentServletContextName + \" is colliding with the \" +\n\t\t\t\t\t\"currently installed hooks\");\n\n\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\tLog log = SanitizerLogWrapper.allowCRLF(_log);\n\n\t\t\t\tStringBundler sb = new StringBundler(\n\t\t\t\t\tcollidingCustomJsps.size() * 4 + 3);\n\n\t\t\t\tsb.append(\"Colliding JSP files in \");\n\t\t\t\tsb.append(currentServletContextName);\n\t\t\t\tsb.append(StringPool.NEW_LINE);\n\n\t\t\t\tfor (Map.Entry<String, String> entry :\n\t\t\t\t\t\tcollidingCustomJsps.entrySet()) {\n\n\t\t\t\t\tsb.append((String)entry.getKey());\n\t\t\t\t\tsb.append(\" with \");\n\t\t\t\t\tsb.append((String)entry.getValue());\n\t\t\t\t\tsb.append(StringPool.NEW_LINE);\n\t\t\t\t}\n\n\t\t\t\tsb.setIndex(sb.index() - 1);\n\n\t\t\t\tlog.debug(sb.toString());\n\t\t\t}\n\n\t\t\tthrow new DuplicateCustomJspException();\n\t\t}\n\t}","commit_id":"320e45af9174d2ceba01a620260ded107e3bec29","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void initCustomJspBag(\n\t\t\tString servletContextName, String displayName,\n\t\t\tCustomJspBag customJspBag)\n\t\tthrows Exception {\n\n\t\tString customJspDir = customJspBag.getCustomJspDir();\n\t\tboolean customJspGlobal = customJspBag.isCustomJspGlobal();\n\t\tList<String> customJsps = customJspBag.getCustomJsps();\n\n\t\tString portalWebDir = PortalUtil.getPortalWebDir();\n\n\t\tfor (String customJsp : customJsps) {\n\t\t\tint pos = customJsp.indexOf(customJspDir);\n\n\t\t\tString portalJsp = customJsp.substring(pos + customJspDir.length());\n\n\t\t\tif (customJspGlobal) {\n\t\t\t\tFile portalJspFile = new File(portalWebDir + portalJsp);\n\t\t\t\tFile portalJspBackupFile = getPortalJspBackupFile(\n\t\t\t\t\tportalJspFile);\n\n\t\t\t\tif (portalJspFile.exists() && !portalJspBackupFile.exists()) {\n\t\t\t\t\tFileUtil.copyFile(portalJspFile, portalJspBackupFile);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tportalJsp = CustomJspRegistryUtil.getCustomJspFileName(\n\t\t\t\t\tservletContextName, portalJsp);\n\t\t\t}\n\n\t\t\tFileUtil.copyFile(customJsp, portalWebDir + portalJsp);\n\t\t}\n\n\t\tif (!customJspGlobal) {\n\t\t\tCustomJspRegistryUtil.registerServletContextName(\n\t\t\t\tservletContextName, displayName);\n\t\t}\n\t}","id":105996,"modified_method":"protected void initCustomJspBag(\n\t\t\tString servletContextName, String displayName,\n\t\t\tCustomJspBag customJspBag)\n\t\tthrows Exception {\n\n\t\tString customJspDir = customJspBag.getCustomJspDir();\n\t\tboolean customJspGlobal = customJspBag.isCustomJspGlobal();\n\t\tList<String> customJsps = customJspBag.getCustomJsps();\n\n\t\tString portalWebDir = PortalUtil.getPortalWebDir();\n\n\t\tfor (String customJsp : customJsps) {\n\t\t\tString portalJsp = getPortalJspName(customJsp, customJspDir);\n\n\t\t\tif (customJspGlobal) {\n\t\t\t\tFile portalJspFile = new File(portalWebDir + portalJsp);\n\t\t\t\tFile portalJspBackupFile = getPortalJspBackupFile(\n\t\t\t\t\tportalJspFile);\n\n\t\t\t\tif (portalJspFile.exists() && !portalJspBackupFile.exists()) {\n\t\t\t\t\tFileUtil.copyFile(portalJspFile, portalJspBackupFile);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tportalJsp = CustomJspRegistryUtil.getCustomJspFileName(\n\t\t\t\t\tservletContextName, portalJsp);\n\t\t\t}\n\n\t\t\tFileUtil.copyFile(customJsp, portalWebDir + portalJsp);\n\t\t}\n\n\t\tif (!customJspGlobal) {\n\t\t\tCustomJspRegistryUtil.registerServletContextName(\n\t\t\t\tservletContextName, displayName);\n\t\t}\n\t}","commit_id":"320e45af9174d2ceba01a620260ded107e3bec29","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static File call_getPath_1233752667763(SNode thisNode, SNode parentNode) {\n    if (SNodeOperations.isInstanceOf(parentNode, \"jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent\")) {\n      return new File(IAbstractCompositeComponent_Behavior.call_getChildrenTargetDir_1237389224202(((SNode)parentNode)) + File.separator + SPropertyOperations.getString(thisNode, \"name\"));\n    } else if (SNodeOperations.isInstanceOf(parentNode, \"jetbrains.mps.build.packaging.structure.IfProjectComponent\")) {\n      return AbstractProjectComponent_Behavior.call_getPath_1233752667763(thisNode, SNodeOperations.getParent(parentNode));\n    }\n    return new File(SPropertyOperations.getString(thisNode, \"name\"));\n  }","id":105997,"modified_method":"public static File call_getPath_1233752667763(SNode thisNode, SNode parentNode) {\n    if (SNodeOperations.isInstanceOf(parentNode, \"jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent\")) {\n      String parentTargetDir = IAbstractCompositeComponent_Behavior.call_getChildrenTargetDir_1237389224202(((SNode)parentNode));\n      if (StringUtils.isEmpty(parentTargetDir)) {\n        return new File(SPropertyOperations.getString(thisNode, \"name\"));\n      }\n      return new File(parentTargetDir + File.separator + SPropertyOperations.getString(thisNode, \"name\"));\n    } else if (SNodeOperations.isInstanceOf(parentNode, \"jetbrains.mps.build.packaging.structure.IfProjectComponent\")) {\n      return AbstractProjectComponent_Behavior.call_getPath_1233752667763(thisNode, SNodeOperations.getParent(parentNode));\n    }\n    return new File(SPropertyOperations.getString(thisNode, \"name\"));\n  }","commit_id":"9261da5372fed426ca7c63f40cda63d820ea5c3f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String virtual_getChildrenTargetDir_1237389224202(SNode thisNode) {\n    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(thisNode), \"jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent\")) {\n      return IAbstractCompositeComponent_Behavior.call_getChildrenTargetDir_1237389224202(((SNode)SNodeOperations.getParent(thisNode))) + File.separator + Antcall_Behavior.call_getName_1213877286263(thisNode);\n    }\n    return Antcall_Behavior.call_getName_1213877286263(thisNode);\n  }","id":105998,"modified_method":"public static String virtual_getChildrenTargetDir_1237389224202(SNode thisNode) {\n    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(thisNode), \"jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent\")) {\n      String parentTargetDir = IAbstractCompositeComponent_Behavior.call_getChildrenTargetDir_1237389224202(((SNode)SNodeOperations.getParent(thisNode)));\n      if (StringUtils.isEmpty(parentTargetDir)) {\n        return Antcall_Behavior.call_getName_1213877286263(thisNode);\n      }\n      return parentTargetDir + File.separator + Antcall_Behavior.call_getName_1213877286263(thisNode);\n    }\n    return Antcall_Behavior.call_getName_1213877286263(thisNode);\n  }","commit_id":"9261da5372fed426ca7c63f40cda63d820ea5c3f","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static String virtual_getChildrenTargetDir_1237389224202(SNode thisNode) {\n    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(thisNode), \"jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent\")) {\n      return IAbstractCompositeComponent_Behavior.call_getChildrenTargetDir_1237389224202(((SNode)SNodeOperations.getParent(thisNode))) + File.separator + Jar_Behavior.call_getTemporalDir_1213877485659(thisNode);\n    }\n    return Jar_Behavior.call_getTemporalDir_1213877485659(thisNode);\n  }","id":105999,"modified_method":"public static String virtual_getChildrenTargetDir_1237389224202(SNode thisNode) {\n    if (SNodeOperations.isInstanceOf(SNodeOperations.getParent(thisNode), \"jetbrains.mps.build.packaging.structure.IAbstractCompositeComponent\")) {\n      String parentTargetDir = IAbstractCompositeComponent_Behavior.call_getChildrenTargetDir_1237389224202(((SNode)SNodeOperations.getParent(thisNode)));\n      if (StringUtils.isEmpty(parentTargetDir)) {\n        return Jar_Behavior.call_getTemporalDir_1213877485659(thisNode);\n      }\n      return parentTargetDir + File.separator + Jar_Behavior.call_getTemporalDir_1213877485659(thisNode);\n    }\n    return Jar_Behavior.call_getTemporalDir_1213877485659(thisNode);\n  }","commit_id":"9261da5372fed426ca7c63f40cda63d820ea5c3f","url":"https://github.com/JetBrains/MPS"}]