[{"original_method":"/**\n     * \n     * @throws Exception\n     */\n    public final void testAttributes() throws Exception\n    {\n        final XmlPullParser parser = new XmlPullParser(null);\n        parser.parse(\"<tag>\");\n        XmlTag tag = (XmlTag) parser.nextTag();\n        assertEquals(0, tag.getAttributes().size());\n        // assertTrue(tag.isOpen(\"tag\"));\n        assertFalse(tag.getAttributes().containsKey(\"attr\"));\n        assertNull(tag.getAttributes().getString(\"attr\"));\n        \n        parser.parse(\"<tag attr='1234'>\");\n        tag = (XmlTag) parser.nextTag();\n        assertEquals(1, tag.getAttributes().size());\n        assertTrue(tag.getAttributes().containsKey(\"attr\"));\n        assertEquals(\"1234\", tag.getAttributes().getString(\"attr\"));\n        \n        parser.parse(\"<tag attr=1234>\");\n        tag = (XmlTag) parser.nextTag();\n        assertEquals(1, tag.getAttributes().size());\n        assertTrue(tag.getAttributes().containsKey(\"attr\"));\n        assertEquals(\"1234\", tag.getAttributes().getString(\"attr\"));\n        \n        parser.parse(\"<tag attr=1234 >\");\n        tag = (XmlTag) parser.nextTag();\n        assertEquals(1, tag.getAttributes().size());\n        assertTrue(tag.getAttributes().containsKey(\"attr\"));\n        assertEquals(\"1234\", tag.getAttributes().getString(\"attr\"));\n        \n        parser.parse(\"<tag attr-withHypen=1234 >\");\n        tag = (XmlTag) parser.nextTag();\n        assertEquals(1, tag.getAttributes().size());\n        assertTrue(tag.getAttributes().containsKey(\"attr-withHypen\"));\n        assertEquals(\"1234\", tag.getAttributes().getString(\"attr-withHypen\"));\n        \n        parser.parse(\"<tag attr=\\\"1234\\\">\");\n        tag = (XmlTag) parser.nextTag();\n        assertEquals(1, tag.getAttributes().size());\n        assertTrue(tag.getAttributes().containsKey(\"attr\"));\n        assertEquals(\"1234\", tag.getAttributes().getString(\"attr\"));\n        \n        parser.parse(\"<tag attr='1234' test='23'>\");\n        tag = (XmlTag) parser.nextTag();\n        assertEquals(2, tag.getAttributes().size());\n        assertTrue(tag.getAttributes().containsKey(\"attr\"));\n        assertEquals(\"1234\", tag.getAttributes().getString(\"attr\"));\n        assertTrue(tag.getAttributes().containsKey(\"test\"));\n        assertEquals(\"23\", tag.getAttributes().getString(\"test\"));\n        \n        parser.parse(\"<tag attr='1234' attr='23'>\");\n        Exception ex = null;\n        try\n        {\n            tag = (XmlTag) parser.nextTag();\n        }\n        catch (ParseException e)\n        {\n            ex = e;\n        }\n        assertNotNull(ex);\n    }","id":10000,"modified_method":"/**\n     * \n     * @throws Exception\n     */\n    public final void testAttributes() throws Exception\n    {\n        final XmlPullParser parser = new XmlPullParser();\n        parser.parse(\"<tag>\");\n        XmlTag tag = (XmlTag) parser.nextTag();\n        assertEquals(0, tag.getAttributes().size());\n        // assertTrue(tag.isOpen(\"tag\"));\n        assertFalse(tag.getAttributes().containsKey(\"attr\"));\n        assertNull(tag.getAttributes().getString(\"attr\"));\n        \n        parser.parse(\"<tag attr='1234'>\");\n        tag = (XmlTag) parser.nextTag();\n        assertEquals(1, tag.getAttributes().size());\n        assertTrue(tag.getAttributes().containsKey(\"attr\"));\n        assertEquals(\"1234\", tag.getAttributes().getString(\"attr\"));\n        \n        parser.parse(\"<tag attr=1234>\");\n        tag = (XmlTag) parser.nextTag();\n        assertEquals(1, tag.getAttributes().size());\n        assertTrue(tag.getAttributes().containsKey(\"attr\"));\n        assertEquals(\"1234\", tag.getAttributes().getString(\"attr\"));\n        \n        parser.parse(\"<tag attr=1234 >\");\n        tag = (XmlTag) parser.nextTag();\n        assertEquals(1, tag.getAttributes().size());\n        assertTrue(tag.getAttributes().containsKey(\"attr\"));\n        assertEquals(\"1234\", tag.getAttributes().getString(\"attr\"));\n        \n        parser.parse(\"<tag attr-withHypen=1234 >\");\n        tag = (XmlTag) parser.nextTag();\n        assertEquals(1, tag.getAttributes().size());\n        assertTrue(tag.getAttributes().containsKey(\"attr-withHypen\"));\n        assertEquals(\"1234\", tag.getAttributes().getString(\"attr-withHypen\"));\n        \n        parser.parse(\"<tag attr=\\\"1234\\\">\");\n        tag = (XmlTag) parser.nextTag();\n        assertEquals(1, tag.getAttributes().size());\n        assertTrue(tag.getAttributes().containsKey(\"attr\"));\n        assertEquals(\"1234\", tag.getAttributes().getString(\"attr\"));\n        \n        parser.parse(\"<tag attr='1234' test='23'>\");\n        tag = (XmlTag) parser.nextTag();\n        assertEquals(2, tag.getAttributes().size());\n        assertTrue(tag.getAttributes().containsKey(\"attr\"));\n        assertEquals(\"1234\", tag.getAttributes().getString(\"attr\"));\n        assertTrue(tag.getAttributes().containsKey(\"test\"));\n        assertEquals(\"23\", tag.getAttributes().getString(\"test\"));\n        \n        parser.parse(\"<tag attr='1234' attr='23'>\");\n        Exception ex = null;\n        try\n        {\n            tag = (XmlTag) parser.nextTag();\n        }\n        catch (ParseException e)\n        {\n            ex = e;\n        }\n        assertNotNull(ex);\n    }","commit_id":"1d9e3f86003812b0e963e2334c831949898ea9b4","url":"https://github.com/apache/wicket"},{"original_method":"/**\n     * \n     * @throws Exception\n     */\n    public final void testEncoding() throws Exception\n    {\n        final XmlPullParser parser = new XmlPullParser(null);\n        parser.parse(new StringResourceStream(\"<?xml version=\\\"1.0\\\" encoding=\\\"iso-8859-1\\\" ?>\"));\n        assertEquals(\"iso-8859-1\", parser.getEncoding());\n        XmlTag tag = (XmlTag) parser.nextTag();\n        assertNull(tag);\n\n        parser.parse(new StringResourceStream(\"<?xml version=\\\"1.0\\\" encoding='iso-8859-1' ?> test test\"));\n        assertEquals(\"iso-8859-1\", parser.getEncoding());\n        tag = (XmlTag) parser.nextTag();\n        assertNull(tag);\n\n        // re-order and move close (remove whitespaces\n        parser.parse(new StringResourceStream(\"   <?xml encoding='iso-8859-1'version=\\\"1.0\\\"?> test test\"));\n        assertEquals(\"iso-8859-1\", parser.getEncoding());\n        tag = (XmlTag) parser.nextTag();\n        assertNull(tag);\n\n        // attribute value must be enclosed by \"\"\n        Exception ex = null;\n        try\n        {\n            parser.parse(new StringResourceStream(\"<?xml encoding=iso-8859-1 ?> test test\"));\n        }\n        catch (UnsupportedEncodingException e)\n        {\n            ex = e;\n        }\n        assertNotNull(ex);\n\n        // Invaluid encoding\n        ex = null;\n        try\n        {\n            parser.parse(new StringResourceStream(\"<?xml encoding='XXX' ?>\"));\n        }\n        catch (UnsupportedEncodingException e)\n        {\n            ex = e;\n        }\n        assertNotNull(ex);\n\n        // no extra characters allowed before <?xml>\n        // TODO General: I'd certainly prefer an exception\n        parser.parse(new StringResourceStream(\"xxxx <?xml encoding='iso-8859-1' ?>\"));\n        assertNull(parser.getEncoding());\n        tag = (XmlTag) parser.nextTag();\n        assertNull(tag);\n\n        // no extra characters allowed before <?xml>\n        // Are comments allowed preceding the encoding string?\n        parser.parse(new StringResourceStream(\"<!-- Comment --!> <?xml encoding='iso-8859-1' ?>\"));\n        assertNull(parser.getEncoding());\n        tag = (XmlTag) parser.nextTag();\n        assertNull(tag);\n\n        // 'test' is not a valid attribut. But we currently don't test it.\n        parser.parse(new StringResourceStream(\"<?xml test='123' >\"));\n        assertNull(parser.getEncoding());\n        tag = (XmlTag) parser.nextTag();\n        assertNull(tag);\n    }","id":10001,"modified_method":"/**\n     * \n     * @throws Exception\n     */\n    public final void testEncoding() throws Exception\n    {\n        final XmlPullParser parser = new XmlPullParser();\n        parser.parse(new StringResourceStream(\"<?xml version=\\\"1.0\\\" encoding=\\\"iso-8859-1\\\" ?>\"), null);\n        assertEquals(\"iso-8859-1\", parser.getEncoding());\n        XmlTag tag = (XmlTag) parser.nextTag();\n        assertNull(tag);\n\n        parser.parse(new StringResourceStream(\"<?xml version=\\\"1.0\\\" encoding='iso-8859-1' ?> test test\"), null);\n        assertEquals(\"iso-8859-1\", parser.getEncoding());\n        tag = (XmlTag) parser.nextTag();\n        assertNull(tag);\n\n        // re-order and move close (remove whitespaces\n        parser.parse(new StringResourceStream(\"   <?xml encoding='iso-8859-1'version=\\\"1.0\\\"?> test test\"), null);\n        assertEquals(\"iso-8859-1\", parser.getEncoding());\n        tag = (XmlTag) parser.nextTag();\n        assertNull(tag);\n\n        // attribute value must be enclosed by \"\"\n        Exception ex = null;\n        try\n        {\n            parser.parse(new StringResourceStream(\"<?xml encoding=iso-8859-1 ?> test test\"), null);\n        }\n        catch (UnsupportedEncodingException e)\n        {\n            ex = e;\n        }\n        assertNotNull(ex);\n\n        // Invaluid encoding\n        ex = null;\n        try\n        {\n            parser.parse(new StringResourceStream(\"<?xml encoding='XXX' ?>\"), null);\n        }\n        catch (UnsupportedEncodingException e)\n        {\n            ex = e;\n        }\n        assertNotNull(ex);\n\n        // no extra characters allowed before <?xml>\n        // TODO General: I'd certainly prefer an exception\n        parser.parse(new StringResourceStream(\"xxxx <?xml encoding='iso-8859-1' ?>\"), null);\n        assertNull(parser.getEncoding());\n        tag = (XmlTag) parser.nextTag();\n        assertNull(tag);\n\n        // no extra characters allowed before <?xml>\n        // Are comments allowed preceding the encoding string?\n        parser.parse(new StringResourceStream(\"<!-- Comment --> <?xml encoding='iso-8859-1' ?>\"), null);\n        assertNull(parser.getEncoding());\n        tag = (XmlTag) parser.nextTag();\n        assertNull(tag);\n\n        // 'test' is not a valid attribut. But we currently don't test it.\n        parser.parse(new StringResourceStream(\"<?xml test='123' >\"), null);\n        assertNull(parser.getEncoding());\n        tag = (XmlTag) parser.nextTag();\n        assertNull(tag);\n    }","commit_id":"1d9e3f86003812b0e963e2334c831949898ea9b4","url":"https://github.com/apache/wicket"},{"original_method":"/**\n     * \n     * @throws Exception\n     */\n    public final void testCompressWhitespace() throws Exception\n    {\n        final XmlPullParser parser = new XmlPullParser(null);\n        parser.parse(\"<?xml version=\\\"1.0\\\" encoding=\\\"iso-8859-1\\\" ?>\");\n    }","id":10002,"modified_method":"/**\n     * \n     * @throws Exception\n     */\n    public final void testCompressWhitespace() throws Exception\n    {\n        final XmlPullParser parser = new XmlPullParser();\n        parser.parse(\"<?xml version=\\\"1.0\\\" encoding=\\\"iso-8859-1\\\" ?>\");\n    }","commit_id":"1d9e3f86003812b0e963e2334c831949898ea9b4","url":"https://github.com/apache/wicket"},{"original_method":"/**\n     * \n     * @throws Exception\n     */\n    public final void testScript() throws Exception\n    {\n        final XmlPullParser parser = new XmlPullParser(null);\n        parser.parse(\"<html><script language=\\\"JavaScript\\\">... <x a> ...<\/script><\/html>\");\n        XmlTag tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isOpen());\n        assertEquals(\"html\", tag.getName());\n        tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isOpen());\n        assertEquals(\"script\", tag.getName());\n        tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isClose());\n        assertEquals(\"script\", tag.getName());\n        tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isClose());\n        assertEquals(\"html\", tag.getName());\n    }","id":10003,"modified_method":"/**\n     * \n     * @throws Exception\n     */\n    public final void testScript() throws Exception\n    {\n        final XmlPullParser parser = new XmlPullParser();\n        parser.parse(\"<html><script language=\\\"JavaScript\\\">... <x a> ...<\/script><\/html>\");\n        XmlTag tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isOpen());\n        assertEquals(\"html\", tag.getName());\n        tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isOpen());\n        assertEquals(\"script\", tag.getName());\n        tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isClose());\n        assertEquals(\"script\", tag.getName());\n        tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isClose());\n        assertEquals(\"html\", tag.getName());\n    }","commit_id":"1d9e3f86003812b0e963e2334c831949898ea9b4","url":"https://github.com/apache/wicket"},{"original_method":"/**\n     * \n     * @throws Exception\n     */\n    public final void testBasics() throws Exception\n    {\n        final XmlPullParser parser = new XmlPullParser(null);\n        parser.parse(\"This is a text\");\n        MarkupElement elem = parser.nextTag();\n        assertNull(elem);\n\n        parser.parse(\"<tag/>\");\n        XmlTag tag = (XmlTag) parser.nextTag();\n        assertFalse(tag.isOpen());\n        // assertFalse(tag.isOpen(\"tag\"));\n        // assertFalse(tag.isOpen(\"xxx\"));\n        assertFalse(tag.isClose());\n        assertTrue(tag.isOpenClose());\n        // assertTrue(tag.isOpenClose(\"tag\"));\n        assertEquals(\"tag\", tag.getName());\n        assertNull(tag.getNamespace());\n        assertEquals(0, tag.getAttributes().size());\n\n        // extra spaces\n        parser.parse(\"<tag ><\/tag >\");\n        tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isOpen());\n        // assertTrue(tag.isOpen(\"tag\"));\n        // assertFalse(tag.isOpen(\"xxx\"));\n        assertFalse(tag.isClose());\n        assertFalse(tag.isOpenClose());\n        // assertFalse(tag.isOpenClose(\"tag\"));\n        assertEquals(\"tag\", tag.getName());\n        assertNull(tag.getNamespace());\n        assertEquals(0, tag.getAttributes().size());\n\n        tag = (XmlTag) parser.nextTag();\n        assertFalse(tag.isOpen());\n        // assertFalse(tag.isOpen(\"tag\"));\n        // assertFalse(tag.isOpen(\"xxx\"));\n        assertTrue(tag.isClose());\n        assertFalse(tag.isOpenClose());\n        // assertFalse(tag.isOpenClose(\"tag\"));\n        assertEquals(\"tag\", tag.getName());\n        assertNull(tag.getNamespace());\n        assertEquals(0, tag.getAttributes().size());\n\n        parser.parse(\"<tag>  <\/tag>\");\n        tag = (XmlTag) parser.nextTag();\n        // assertTrue(tag.isOpen(\"tag\"));\n        tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isClose());\n\n        parser.parse(\"xx <tag> yy <\/tag> zz\");\n        tag = (XmlTag) parser.nextTag();\n        // assertTrue(tag.isOpen(\"tag\"));\n        tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isClose());\n\n        // XmlPullParser does NOT check that tags get properly closed\n        parser.parse(\"<tag>\");\n        tag = (XmlTag) parser.nextTag();\n        tag = (XmlTag) parser.nextTag();\n        assertNull(elem);\n\n        parser.parse(\"<tag> <tag> <tag>\");\n        tag = (XmlTag) parser.nextTag();\n        // assertTrue(tag.isOpen(\"tag\"));\n        tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpen(\"tag\"));\n        tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpen(\"tag\"));\n\n        parser.parse(\"<ns:tag/>\");\n        tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpenClose(\"tag\"));\n        assertEquals(\"ns\", tag.getNamespace());\n        assertEquals(\"tag\", tag.getName());\n\n        parser.parse(\"<ns:tag><\/ns:tag>\");\n        tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpen(\"tag\"));\n        assertEquals(\"ns\", tag.getNamespace());\n        assertEquals(\"tag\", tag.getName());\n        \n        XmlTag closeTag = (XmlTag) parser.nextTag();\n        assertTrue(closeTag.isClose());\n        assertEquals(\"ns\", closeTag.getNamespace());\n        assertEquals(\"tag\", closeTag.getName());\n    }","id":10004,"modified_method":"/**\n     * \n     * @throws Exception\n     */\n    public final void testBasics() throws Exception\n    {\n        final XmlPullParser parser = new XmlPullParser();\n        parser.parse(\"This is a text\");\n        MarkupElement elem = parser.nextTag();\n        assertNull(elem);\n\n        parser.parse(\"<tag/>\");\n        XmlTag tag = (XmlTag) parser.nextTag();\n        assertFalse(tag.isOpen());\n        // assertFalse(tag.isOpen(\"tag\"));\n        // assertFalse(tag.isOpen(\"xxx\"));\n        assertFalse(tag.isClose());\n        assertTrue(tag.isOpenClose());\n        // assertTrue(tag.isOpenClose(\"tag\"));\n        assertEquals(\"tag\", tag.getName());\n        assertNull(tag.getNamespace());\n        assertEquals(0, tag.getAttributes().size());\n\n        // extra spaces\n        parser.parse(\"<tag ><\/tag >\");\n        tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isOpen());\n        // assertTrue(tag.isOpen(\"tag\"));\n        // assertFalse(tag.isOpen(\"xxx\"));\n        assertFalse(tag.isClose());\n        assertFalse(tag.isOpenClose());\n        // assertFalse(tag.isOpenClose(\"tag\"));\n        assertEquals(\"tag\", tag.getName());\n        assertNull(tag.getNamespace());\n        assertEquals(0, tag.getAttributes().size());\n\n        tag = (XmlTag) parser.nextTag();\n        assertFalse(tag.isOpen());\n        // assertFalse(tag.isOpen(\"tag\"));\n        // assertFalse(tag.isOpen(\"xxx\"));\n        assertTrue(tag.isClose());\n        assertFalse(tag.isOpenClose());\n        // assertFalse(tag.isOpenClose(\"tag\"));\n        assertEquals(\"tag\", tag.getName());\n        assertNull(tag.getNamespace());\n        assertEquals(0, tag.getAttributes().size());\n\n        parser.parse(\"<tag>  <\/tag>\");\n        tag = (XmlTag) parser.nextTag();\n        // assertTrue(tag.isOpen(\"tag\"));\n        tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isClose());\n\n        parser.parse(\"xx <tag> yy <\/tag> zz\");\n        tag = (XmlTag) parser.nextTag();\n        // assertTrue(tag.isOpen(\"tag\"));\n        tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isClose());\n\n        // XmlPullParser does NOT check that tags get properly closed\n        parser.parse(\"<tag>\");\n        tag = (XmlTag) parser.nextTag();\n        tag = (XmlTag) parser.nextTag();\n        assertNull(elem);\n\n        parser.parse(\"<tag> <tag> <tag>\");\n        tag = (XmlTag) parser.nextTag();\n        // assertTrue(tag.isOpen(\"tag\"));\n        tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpen(\"tag\"));\n        tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpen(\"tag\"));\n\n        parser.parse(\"<ns:tag/>\");\n        tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpenClose(\"tag\"));\n        assertEquals(\"ns\", tag.getNamespace());\n        assertEquals(\"tag\", tag.getName());\n\n        parser.parse(\"<ns:tag><\/ns:tag>\");\n        tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpen(\"tag\"));\n        assertEquals(\"ns\", tag.getNamespace());\n        assertEquals(\"tag\", tag.getName());\n        \n        XmlTag closeTag = (XmlTag) parser.nextTag();\n        assertTrue(closeTag.isClose());\n        assertEquals(\"ns\", closeTag.getNamespace());\n        assertEquals(\"tag\", closeTag.getName());\n    }","commit_id":"1d9e3f86003812b0e963e2334c831949898ea9b4","url":"https://github.com/apache/wicket"},{"original_method":"/**\n     * \n     * @throws Exception\n     */\n    public final void testComments() throws Exception\n    {\n        final XmlPullParser parser = new XmlPullParser(null);\n        parser.parse(\"<!-- test --><tag>\");\n        XmlTag tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpen(\"tag\"));\n        \n        parser.parse(\"<!-- test --><tag> aaa <!-- test 1 --> bbb <tag> <!-- test --> <\/tag>\");\n        tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpen(\"tag\"));\n        tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpen(\"tag\"));\n        tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isClose());\n        tag = (XmlTag) parser.nextTag();\n        assertNull(tag);\n        \n        // As you can see, XmlPullParser is really a shallow parser only\n        parser.parse(\"<!-- test --><tag> aaa <?tag test 1 ?> bbb <tag> <!DOCTYPE test > <\/tag>\");\n        tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpen(\"tag\"));\n        tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpen(\"tag\"));\n        tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isClose());\n        tag = (XmlTag) parser.nextTag();\n        assertNull(tag);\n    }","id":10005,"modified_method":"/**\n     * \n     * @throws Exception\n     */\n    public final void testComments() throws Exception\n    {\n        final XmlPullParser parser = new XmlPullParser();\n        parser.parse(\"<!-- test --><tag>\");\n        XmlTag tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpen(\"tag\"));\n        \n        parser.parse(\"<!-- test --><tag> aaa <!-- test 1 --> bbb <tag> <!-- test --> <\/tag>\");\n        tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpen(\"tag\"));\n        tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpen(\"tag\"));\n        tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isClose());\n        tag = (XmlTag) parser.nextTag();\n        assertNull(tag);\n        \n        // As you can see, XmlPullParser is really a shallow parser only\n        parser.parse(\"<!-- test --><tag> aaa <?tag test 1 ?> bbb <tag> <!DOCTYPE test > <\/tag>\");\n        tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpen(\"tag\"));\n        tag = (XmlTag) parser.nextTag();\n//      assertTrue(tag.isOpen(\"tag\"));\n        tag = (XmlTag) parser.nextTag();\n        assertTrue(tag.isClose());\n        tag = (XmlTag) parser.nextTag();\n        assertNull(tag);\n    }","commit_id":"1d9e3f86003812b0e963e2334c831949898ea9b4","url":"https://github.com/apache/wicket"},{"original_method":"@Override\n  public void generate() {\n    ILanguageConfig _language = this.getLanguage();\n    List<String> _fileExtensions = _language.getFileExtensions();\n    final String fileExtension = IterableExtensions.<String>head(_fileExtensions);\n    ILanguageConfig _language_1 = this.getLanguage();\n    final Grammar grammar = _language_1.getGrammar();\n    final GuiceModuleAccess.BindingFactory bindFactory = new GuiceModuleAccess.BindingFactory();\n    TypeReference _typeRef = TypeReference.typeRef(\"org.eclipse.xtext.parser.antlr.IAntlrTokenFileProvider\");\n    TypeReference _antlrTokenFileProvider = this._ideaPluginClassNames.getAntlrTokenFileProvider(grammar);\n    bindFactory.addTypeToType(_typeRef, _antlrTokenFileProvider);\n    TypeReference _typeRef_1 = TypeReference.typeRef(\"org.eclipse.xtext.parser.antlr.Lexer\");\n    TypeReference _psiInternalLexer = this._ideaPluginClassNames.getPsiInternalLexer(grammar);\n    bindFactory.addTypeToType(_typeRef_1, _psiInternalLexer);\n    StringConcatenationClient _client = new StringConcatenationClient() {\n      @Override\n      protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {\n        _builder.append(\"binder.bind(\");\n        _builder.append(Lexer.class, \"\");\n        _builder.append(\".class)\");\n        _builder.newLineIfNotEmpty();\n        _builder.append(\"\\t\");\n        _builder.append(\".annotatedWith(\");\n        _builder.append(Names.class, \"\\t\");\n        _builder.append(\".named(\");\n        _builder.append(LexerBindings.class, \"\\t\");\n        _builder.append(\".RUNTIME))\");\n        _builder.newLineIfNotEmpty();\n        _builder.append(\"\\t\");\n        _builder.append(\".to(\");\n        TypeReference _psiInternalLexer = IdeaPluginGenerator.this._ideaPluginClassNames.getPsiInternalLexer(grammar);\n        _builder.append(_psiInternalLexer, \"\\t\");\n        _builder.append(\".class);\");\n        _builder.newLineIfNotEmpty();\n      }\n    };\n    bindFactory.addConfiguredBinding(\"RuntimeLexer\", _client);\n    TypeReference _typeRef_2 = TypeReference.typeRef(\"com.intellij.lang.PsiParser\");\n    TypeReference _psiParser = this._ideaPluginClassNames.getPsiParser(grammar);\n    bindFactory.addTypeToType(_typeRef_2, _psiParser);\n    TypeReference _typeRef_3 = TypeReference.typeRef(\"org.eclipse.xtext.idea.parser.TokenTypeProvider\");\n    TypeReference _tokenTypeProvider = this._ideaPluginClassNames.getTokenTypeProvider(grammar);\n    bindFactory.addTypeToType(_typeRef_3, _tokenTypeProvider);\n    TypeReference _typeRef_4 = TypeReference.typeRef(\"com.intellij.lang.ParserDefinition\");\n    TypeReference _parserDefinition = this._ideaPluginClassNames.getParserDefinition(grammar);\n    bindFactory.addTypeToType(_typeRef_4, _parserDefinition);\n    TypeReference _typeRef_5 = TypeReference.typeRef(\"org.eclipse.xtext.idea.lang.IElementTypeProvider\");\n    TypeReference _elementTypeProvider = this._ideaPluginClassNames.getElementTypeProvider(grammar);\n    bindFactory.addTypeToTypeSingleton(_typeRef_5, _elementTypeProvider);\n    TypeReference _typeRef_6 = TypeReference.typeRef(\"org.eclipse.xtext.idea.facet.AbstractFacetConfiguration\");\n    TypeReference _facetConfiguration = this._ideaPluginClassNames.getFacetConfiguration(grammar);\n    bindFactory.addTypeToType(_typeRef_6, _facetConfiguration);\n    TypeReference _typeRef_7 = TypeReference.typeRef(\"com.intellij.facet.FacetTypeId\");\n    StringConcatenationClient _client_1 = new StringConcatenationClient() {\n      @Override\n      protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {\n        TypeReference _facetType = IdeaPluginGenerator.this._ideaPluginClassNames.getFacetType(grammar);\n        _builder.append(_facetType, \"\");\n        _builder.append(\".TYPEID\");\n      }\n    };\n    bindFactory.addTypeToInstance(_typeRef_7, _client_1);\n    boolean _inheritsXbase = this._xbaseUsageDetector.inheritsXbase(grammar);\n    if (_inheritsXbase) {\n      TypeReference _typeRef_8 = TypeReference.typeRef(\"org.eclipse.xtext.common.types.xtext.AbstractTypeScopeProvider\");\n      TypeReference _typeRef_9 = TypeReference.typeRef(\"org.eclipse.xtext.idea.common.types.StubBasedTypeScopeProvider\");\n      bindFactory.addTypeToType(_typeRef_8, _typeRef_9);\n      TypeReference _typeRef_10 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.typesystem.internal.IFeatureScopeTracker.Provider\");\n      TypeReference _typeRef_11 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.typesystem.internal.OptimizingFeatureScopeTrackerProvider\");\n      bindFactory.addTypeToType(_typeRef_10, _typeRef_11);\n      StringConcatenationClient _client_2 = new StringConcatenationClient() {\n        @Override\n        protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {\n          _builder.append(\"binder.bind(\");\n          TypeReference _typeRef = TypeReference.typeRef(\"org.eclipse.xtext.psi.IPsiModelAssociations\");\n          _builder.append(_typeRef, \"\");\n          _builder.append(\".class)\");\n          _builder.newLineIfNotEmpty();\n          _builder.append(\"\\t\");\n          _builder.append(\".annotatedWith(\");\n          _builder.append(LanguageSpecific.class, \"\\t\");\n          _builder.append(\".class)\");\n          _builder.newLineIfNotEmpty();\n          _builder.append(\"\\t\");\n          _builder.append(\".to(\");\n          TypeReference _typeRef_1 = TypeReference.typeRef(\"org.eclipse.xtext.idea.common.types.DerivedMemberAwarePsiModelAssociations\");\n          _builder.append(_typeRef_1, \"\\t\");\n          _builder.append(\".class);\");\n          _builder.newLineIfNotEmpty();\n        }\n      };\n      bindFactory.addConfiguredBinding(\"LanguageSpecificPsiModelAssociations\", _client_2);\n      TypeReference _typeRef_12 = TypeReference.typeRef(\"org.eclipse.xtext.idea.highlighting.IHighlightingConfiguration\");\n      TypeReference _typeRef_13 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.idea.highlighting.XbaseHighlightingConfiguration\");\n      bindFactory.addTypeToType(_typeRef_12, _typeRef_13);\n      TypeReference _typeRef_14 = TypeReference.typeRef(\"org.eclipse.xtext.idea.formatting.BlockFactory\");\n      TypeReference _typeRef_15 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.idea.formatting.XbaseBlockFactory\");\n      bindFactory.addTypeToType(_typeRef_14, _typeRef_15);\n      TypeReference _typeRef_16 = TypeReference.typeRef(\"org.eclipse.xtext.idea.formatting.ChildAttributesProvider\");\n      TypeReference _typeRef_17 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.idea.formatting.XbaseChildAttributesProvider\");\n      bindFactory.addTypeToType(_typeRef_16, _typeRef_17);\n      TypeReference _typeRef_18 = TypeReference.typeRef(\"org.eclipse.xtext.ide.editor.bracketmatching.IBracePairProvider\");\n      TypeReference _typeRef_19 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.idea.bracketmatching.XbaseBracePairProvider\");\n      bindFactory.addTypeToType(_typeRef_18, _typeRef_19);\n      TypeReference _typeRef_20 = TypeReference.typeRef(\"org.eclipse.xtext.idea.findusages.IReferenceSearcher\");\n      TypeReference _typeRef_21 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.idea.findusages.JvmElementAwareReferenceSearcher\");\n      bindFactory.addTypeToType(_typeRef_20, _typeRef_21);\n      TypeReference _typeRef_22 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.compiler.IGeneratorConfigProvider\");\n      TypeReference _typeRef_23 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.idea.facet.XbaseGeneratorConfigProvider\");\n      bindFactory.addTypeToType(_typeRef_22, _typeRef_23);\n      TypeReference _typeRef_24 = TypeReference.typeRef(\"org.eclipse.xtext.idea.findusages.WordsScannerProvider\");\n      TypeReference _typeRef_25 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.idea.findusages.XbaseWordsScanner.XbaseWordsScannerProvider\");\n      bindFactory.addTypeToType(_typeRef_24, _typeRef_25);\n    }\n    ILanguageConfig _language_2 = this.getLanguage();\n    GuiceModuleAccess _ideaGenModule = _language_2.getIdeaGenModule();\n    bindFactory.contributeTo(_ideaGenModule);\n    XtendFileAccess _compileStandaloneSetup = this.compileStandaloneSetup(grammar);\n    XtendFileAccess _compileIdeaSetup = this.compileIdeaSetup(grammar);\n    JavaFileAccess _compileCompletionContributor = this.compileCompletionContributor(grammar);\n    XtendFileAccess _compileFileType = this.compileFileType(grammar);\n    JavaFileAccess _compileFacetConfiguration = this.compileFacetConfiguration(grammar);\n    JavaFileAccess _compileColorSettingsPage = this.compileColorSettingsPage(grammar);\n    final Procedure1<JavaFileAccess> _function = new Procedure1<JavaFileAccess>() {\n      @Override\n      public void apply(final JavaFileAccess it) {\n        IXtextProjectConfig _projectConfig = IdeaPluginGenerator.this.getProjectConfig();\n        IXtextGeneratorFileSystemAccess _ideaPluginSrc = _projectConfig.getIdeaPluginSrc();\n        it.writeTo(_ideaPluginSrc);\n      }\n    };\n    IterableExtensions.forEach(Collections.<JavaFileAccess>unmodifiableList(CollectionLiterals.<JavaFileAccess>newArrayList(_compileStandaloneSetup, _compileIdeaSetup, _compileCompletionContributor, _compileFileType, _compileFacetConfiguration, _compileColorSettingsPage)), _function);\n    TextFileAccess _compileServicesISetup = this.compileServicesISetup(grammar);\n    JavaFileAccess _compileAbstractCompletionContributor = this.compileAbstractCompletionContributor(grammar);\n    JavaFileAccess _compileLanguage = this.compileLanguage(grammar);\n    JavaFileAccess _compileAbstractFileType = this.compileAbstractFileType(grammar, fileExtension);\n    JavaFileAccess _compileFileTypeFactory = this.compileFileTypeFactory(grammar);\n    JavaFileAccess _compileFileImpl = this.compileFileImpl(grammar);\n    JavaFileAccess _compileTokenTypeProvider = this.compileTokenTypeProvider(grammar);\n    JavaFileAccess _compileElementTypeProvider = this.compileElementTypeProvider(grammar);\n    JavaFileAccess _compileParserDefinition = this.compileParserDefinition(grammar);\n    JavaFileAccess _compileSyntaxHighlighterFactory = this.compileSyntaxHighlighterFactory(grammar);\n    JavaFileAccess _compileSemanticHighlightVisitor = this.compileSemanticHighlightVisitor(grammar);\n    JavaFileAccess _compileExtensionFactory = this.compileExtensionFactory(grammar);\n    JavaFileAccess _compileCodeBlockModificationListener = this.compileCodeBlockModificationListener(grammar);\n    JavaFileAccess _compilePsiParser = this.compilePsiParser(grammar);\n    JavaFileAccess _compileAntlrTokenFileProvider = this.compileAntlrTokenFileProvider(grammar);\n    JavaFileAccess _compilePomDeclarationSearcher = this.compilePomDeclarationSearcher(grammar);\n    JavaFileAccess _compileFacetType = this.compileFacetType(grammar);\n    JavaFileAccess _compileBaseColorSettingsPage = this.compileBaseColorSettingsPage(grammar);\n    final Procedure1<TextFileAccess> _function_1 = new Procedure1<TextFileAccess>() {\n      @Override\n      public void apply(final TextFileAccess it) {\n        IXtextProjectConfig _projectConfig = IdeaPluginGenerator.this.getProjectConfig();\n        IXtextGeneratorFileSystemAccess _ideaPluginSrcGen = _projectConfig.getIdeaPluginSrcGen();\n        it.writeTo(_ideaPluginSrcGen);\n      }\n    };\n    IterableExtensions.forEach(Collections.<TextFileAccess>unmodifiableList(CollectionLiterals.<TextFileAccess>newArrayList(_compileServicesISetup, _compileAbstractCompletionContributor, _compileLanguage, _compileAbstractFileType, _compileFileTypeFactory, _compileFileImpl, _compileTokenTypeProvider, _compileElementTypeProvider, _compileParserDefinition, _compileSyntaxHighlighterFactory, _compileSemanticHighlightVisitor, _compileExtensionFactory, _compileCodeBlockModificationListener, _compilePsiParser, _compileAntlrTokenFileProvider, _compilePomDeclarationSearcher, _compileFacetType, _compileBaseColorSettingsPage)), _function_1);\n    if (this.deployable) {\n      final TextFileAccess pluginXml = this.compilePluginXml(grammar);\n      IXtextProjectConfig _projectConfig = this.getProjectConfig();\n      IXtextGeneratorFileSystemAccess _ideaPluginMetaInf = _projectConfig.getIdeaPluginMetaInf();\n      String _path = pluginXml.getPath();\n      boolean _isFile = _ideaPluginMetaInf.isFile(_path);\n      boolean _not = (!_isFile);\n      if (_not) {\n        IXtextProjectConfig _projectConfig_1 = this.getProjectConfig();\n        IXtextGeneratorFileSystemAccess _ideaPluginMetaInf_1 = _projectConfig_1.getIdeaPluginMetaInf();\n        pluginXml.writeTo(_ideaPluginMetaInf_1);\n      }\n      TextFileAccess _compilePluginGenXml = this.compilePluginGenXml(grammar);\n      IXtextProjectConfig _projectConfig_2 = this.getProjectConfig();\n      IXtextGeneratorFileSystemAccess _ideaPluginMetaInf_2 = _projectConfig_2.getIdeaPluginMetaInf();\n      _compilePluginGenXml.writeTo(_ideaPluginMetaInf_2);\n    }\n  }","id":10006,"modified_method":"@Override\n  public void generate() {\n    ILanguageConfig _language = this.getLanguage();\n    List<String> _fileExtensions = _language.getFileExtensions();\n    final String fileExtension = IterableExtensions.<String>head(_fileExtensions);\n    ILanguageConfig _language_1 = this.getLanguage();\n    final Grammar grammar = _language_1.getGrammar();\n    final GuiceModuleAccess.BindingFactory bindFactory = new GuiceModuleAccess.BindingFactory();\n    TypeReference _typeRef = TypeReference.typeRef(\"org.eclipse.xtext.parser.antlr.IAntlrTokenFileProvider\");\n    TypeReference _antlrTokenFileProvider = this._ideaPluginClassNames.getAntlrTokenFileProvider(grammar);\n    bindFactory.addTypeToType(_typeRef, _antlrTokenFileProvider);\n    TypeReference _typeRef_1 = TypeReference.typeRef(\"org.eclipse.xtext.parser.antlr.Lexer\");\n    TypeReference _psiInternalLexer = this._ideaPluginClassNames.getPsiInternalLexer(grammar);\n    bindFactory.addTypeToType(_typeRef_1, _psiInternalLexer);\n    StringConcatenationClient _client = new StringConcatenationClient() {\n      @Override\n      protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {\n        _builder.append(\"binder.bind(\");\n        _builder.append(Lexer.class, \"\");\n        _builder.append(\".class)\");\n        _builder.newLineIfNotEmpty();\n        _builder.append(\"\\t\");\n        _builder.append(\".annotatedWith(\");\n        _builder.append(Names.class, \"\\t\");\n        _builder.append(\".named(\");\n        _builder.append(LexerBindings.class, \"\\t\");\n        _builder.append(\".RUNTIME))\");\n        _builder.newLineIfNotEmpty();\n        _builder.append(\"\\t\");\n        _builder.append(\".to(\");\n        TypeReference _psiInternalLexer = IdeaPluginGenerator.this._ideaPluginClassNames.getPsiInternalLexer(grammar);\n        _builder.append(_psiInternalLexer, \"\\t\");\n        _builder.append(\".class);\");\n        _builder.newLineIfNotEmpty();\n      }\n    };\n    bindFactory.addConfiguredBinding(\"RuntimeLexer\", _client);\n    TypeReference _typeRef_2 = TypeReference.typeRef(\"com.intellij.lang.PsiParser\");\n    TypeReference _psiParser = this._ideaPluginClassNames.getPsiParser(grammar);\n    bindFactory.addTypeToType(_typeRef_2, _psiParser);\n    TypeReference _typeRef_3 = TypeReference.typeRef(\"org.eclipse.xtext.idea.parser.TokenTypeProvider\");\n    TypeReference _tokenTypeProvider = this._ideaPluginClassNames.getTokenTypeProvider(grammar);\n    bindFactory.addTypeToType(_typeRef_3, _tokenTypeProvider);\n    TypeReference _typeRef_4 = TypeReference.typeRef(\"com.intellij.lang.ParserDefinition\");\n    TypeReference _parserDefinition = this._ideaPluginClassNames.getParserDefinition(grammar);\n    bindFactory.addTypeToType(_typeRef_4, _parserDefinition);\n    TypeReference _typeRef_5 = TypeReference.typeRef(\"org.eclipse.xtext.idea.lang.IElementTypeProvider\");\n    TypeReference _elementTypeProvider = this._ideaPluginClassNames.getElementTypeProvider(grammar);\n    bindFactory.addTypeToTypeSingleton(_typeRef_5, _elementTypeProvider);\n    TypeReference _typeRef_6 = TypeReference.typeRef(\"org.eclipse.xtext.idea.facet.AbstractFacetConfiguration\");\n    TypeReference _facetConfiguration = this._ideaPluginClassNames.getFacetConfiguration(grammar);\n    bindFactory.addTypeToType(_typeRef_6, _facetConfiguration);\n    TypeReference _typeRef_7 = TypeReference.typeRef(\"com.intellij.facet.FacetTypeId\");\n    StringConcatenationClient _client_1 = new StringConcatenationClient() {\n      @Override\n      protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {\n        TypeReference _facetType = IdeaPluginGenerator.this._ideaPluginClassNames.getFacetType(grammar);\n        _builder.append(_facetType, \"\");\n        _builder.append(\".TYPEID\");\n      }\n    };\n    bindFactory.addTypeToInstance(_typeRef_7, _client_1);\n    TypeReference _typeRef_8 = TypeReference.typeRef(\"org.eclipse.xtext.ide.editor.contentassist.antlr.IContentAssistParser\");\n    TypeReference _contentAssistParserClass = this._grammarNaming.getContentAssistParserClass(grammar);\n    bindFactory.addTypeToType(_typeRef_8, _contentAssistParserClass);\n    StringConcatenationClient _client_2 = new StringConcatenationClient() {\n      @Override\n      protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {\n        _builder.append(\"binder.bind(\");\n        TypeReference _typeRef = TypeReference.typeRef(\"org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer\");\n        _builder.append(_typeRef, \"\");\n        _builder.append(\".class).annotatedWith(\");\n        _builder.append(Names.class, \"\");\n        _builder.append(\".named(\");\n        TypeReference _typeRef_1 = TypeReference.typeRef(\"org.eclipse.xtext.ide.LexerIdeBindings\");\n        _builder.append(_typeRef_1, \"\");\n        _builder.append(\".CONTENT_ASSIST)).to(\");\n        TypeReference _internalContentAssistLexerClass = IdeaPluginGenerator.this._grammarNaming.getInternalContentAssistLexerClass(grammar);\n        _builder.append(_internalContentAssistLexerClass, \"\");\n        _builder.append(\".class);\");\n      }\n    };\n    bindFactory.addConfiguredBinding(\"ContentAssistLexer\", _client_2);\n    boolean _inheritsXbase = this._xbaseUsageDetector.inheritsXbase(grammar);\n    if (_inheritsXbase) {\n      TypeReference _typeRef_9 = TypeReference.typeRef(\"org.eclipse.xtext.common.types.xtext.AbstractTypeScopeProvider\");\n      TypeReference _typeRef_10 = TypeReference.typeRef(\"org.eclipse.xtext.idea.common.types.StubBasedTypeScopeProvider\");\n      bindFactory.addTypeToType(_typeRef_9, _typeRef_10);\n      TypeReference _typeRef_11 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.typesystem.internal.IFeatureScopeTracker.Provider\");\n      TypeReference _typeRef_12 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.typesystem.internal.OptimizingFeatureScopeTrackerProvider\");\n      bindFactory.addTypeToType(_typeRef_11, _typeRef_12);\n      StringConcatenationClient _client_3 = new StringConcatenationClient() {\n        @Override\n        protected void appendTo(StringConcatenationClient.TargetStringConcatenation _builder) {\n          _builder.append(\"binder.bind(\");\n          TypeReference _typeRef = TypeReference.typeRef(\"org.eclipse.xtext.psi.IPsiModelAssociations\");\n          _builder.append(_typeRef, \"\");\n          _builder.append(\".class)\");\n          _builder.newLineIfNotEmpty();\n          _builder.append(\"\\t\");\n          _builder.append(\".annotatedWith(\");\n          _builder.append(LanguageSpecific.class, \"\\t\");\n          _builder.append(\".class)\");\n          _builder.newLineIfNotEmpty();\n          _builder.append(\"\\t\");\n          _builder.append(\".to(\");\n          TypeReference _typeRef_1 = TypeReference.typeRef(\"org.eclipse.xtext.idea.common.types.DerivedMemberAwarePsiModelAssociations\");\n          _builder.append(_typeRef_1, \"\\t\");\n          _builder.append(\".class);\");\n          _builder.newLineIfNotEmpty();\n        }\n      };\n      bindFactory.addConfiguredBinding(\"LanguageSpecificPsiModelAssociations\", _client_3);\n      TypeReference _typeRef_13 = TypeReference.typeRef(\"org.eclipse.xtext.idea.highlighting.IHighlightingConfiguration\");\n      TypeReference _typeRef_14 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.idea.highlighting.XbaseHighlightingConfiguration\");\n      bindFactory.addTypeToType(_typeRef_13, _typeRef_14);\n      TypeReference _typeRef_15 = TypeReference.typeRef(\"org.eclipse.xtext.idea.formatting.BlockFactory\");\n      TypeReference _typeRef_16 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.idea.formatting.XbaseBlockFactory\");\n      bindFactory.addTypeToType(_typeRef_15, _typeRef_16);\n      TypeReference _typeRef_17 = TypeReference.typeRef(\"org.eclipse.xtext.idea.formatting.ChildAttributesProvider\");\n      TypeReference _typeRef_18 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.idea.formatting.XbaseChildAttributesProvider\");\n      bindFactory.addTypeToType(_typeRef_17, _typeRef_18);\n      TypeReference _typeRef_19 = TypeReference.typeRef(\"org.eclipse.xtext.ide.editor.bracketmatching.IBracePairProvider\");\n      TypeReference _typeRef_20 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.idea.bracketmatching.XbaseBracePairProvider\");\n      bindFactory.addTypeToType(_typeRef_19, _typeRef_20);\n      TypeReference _typeRef_21 = TypeReference.typeRef(\"org.eclipse.xtext.idea.findusages.IReferenceSearcher\");\n      TypeReference _typeRef_22 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.idea.findusages.JvmElementAwareReferenceSearcher\");\n      bindFactory.addTypeToType(_typeRef_21, _typeRef_22);\n      TypeReference _typeRef_23 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.compiler.IGeneratorConfigProvider\");\n      TypeReference _typeRef_24 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.idea.facet.XbaseGeneratorConfigProvider\");\n      bindFactory.addTypeToType(_typeRef_23, _typeRef_24);\n      TypeReference _typeRef_25 = TypeReference.typeRef(\"org.eclipse.xtext.idea.findusages.WordsScannerProvider\");\n      TypeReference _typeRef_26 = TypeReference.typeRef(\"org.eclipse.xtext.xbase.idea.findusages.XbaseWordsScanner.XbaseWordsScannerProvider\");\n      bindFactory.addTypeToType(_typeRef_25, _typeRef_26);\n    }\n    ILanguageConfig _language_2 = this.getLanguage();\n    GuiceModuleAccess _ideaGenModule = _language_2.getIdeaGenModule();\n    bindFactory.contributeTo(_ideaGenModule);\n    XtendFileAccess _compileStandaloneSetup = this.compileStandaloneSetup(grammar);\n    XtendFileAccess _compileIdeaSetup = this.compileIdeaSetup(grammar);\n    JavaFileAccess _compileCompletionContributor = this.compileCompletionContributor(grammar);\n    XtendFileAccess _compileFileType = this.compileFileType(grammar);\n    JavaFileAccess _compileFacetConfiguration = this.compileFacetConfiguration(grammar);\n    JavaFileAccess _compileColorSettingsPage = this.compileColorSettingsPage(grammar);\n    final Procedure1<JavaFileAccess> _function = new Procedure1<JavaFileAccess>() {\n      @Override\n      public void apply(final JavaFileAccess it) {\n        IXtextProjectConfig _projectConfig = IdeaPluginGenerator.this.getProjectConfig();\n        IXtextGeneratorFileSystemAccess _ideaPluginSrc = _projectConfig.getIdeaPluginSrc();\n        it.writeTo(_ideaPluginSrc);\n      }\n    };\n    IterableExtensions.forEach(Collections.<JavaFileAccess>unmodifiableList(CollectionLiterals.<JavaFileAccess>newArrayList(_compileStandaloneSetup, _compileIdeaSetup, _compileCompletionContributor, _compileFileType, _compileFacetConfiguration, _compileColorSettingsPage)), _function);\n    TextFileAccess _compileServicesISetup = this.compileServicesISetup(grammar);\n    JavaFileAccess _compileAbstractCompletionContributor = this.compileAbstractCompletionContributor(grammar);\n    JavaFileAccess _compileLanguage = this.compileLanguage(grammar);\n    JavaFileAccess _compileAbstractFileType = this.compileAbstractFileType(grammar, fileExtension);\n    JavaFileAccess _compileFileTypeFactory = this.compileFileTypeFactory(grammar);\n    JavaFileAccess _compileFileImpl = this.compileFileImpl(grammar);\n    JavaFileAccess _compileTokenTypeProvider = this.compileTokenTypeProvider(grammar);\n    JavaFileAccess _compileElementTypeProvider = this.compileElementTypeProvider(grammar);\n    JavaFileAccess _compileParserDefinition = this.compileParserDefinition(grammar);\n    JavaFileAccess _compileSyntaxHighlighterFactory = this.compileSyntaxHighlighterFactory(grammar);\n    JavaFileAccess _compileSemanticHighlightVisitor = this.compileSemanticHighlightVisitor(grammar);\n    JavaFileAccess _compileExtensionFactory = this.compileExtensionFactory(grammar);\n    JavaFileAccess _compileCodeBlockModificationListener = this.compileCodeBlockModificationListener(grammar);\n    JavaFileAccess _compilePsiParser = this.compilePsiParser(grammar);\n    JavaFileAccess _compileAntlrTokenFileProvider = this.compileAntlrTokenFileProvider(grammar);\n    JavaFileAccess _compilePomDeclarationSearcher = this.compilePomDeclarationSearcher(grammar);\n    JavaFileAccess _compileFacetType = this.compileFacetType(grammar);\n    JavaFileAccess _compileBaseColorSettingsPage = this.compileBaseColorSettingsPage(grammar);\n    final Procedure1<TextFileAccess> _function_1 = new Procedure1<TextFileAccess>() {\n      @Override\n      public void apply(final TextFileAccess it) {\n        IXtextProjectConfig _projectConfig = IdeaPluginGenerator.this.getProjectConfig();\n        IXtextGeneratorFileSystemAccess _ideaPluginSrcGen = _projectConfig.getIdeaPluginSrcGen();\n        it.writeTo(_ideaPluginSrcGen);\n      }\n    };\n    IterableExtensions.forEach(Collections.<TextFileAccess>unmodifiableList(CollectionLiterals.<TextFileAccess>newArrayList(_compileServicesISetup, _compileAbstractCompletionContributor, _compileLanguage, _compileAbstractFileType, _compileFileTypeFactory, _compileFileImpl, _compileTokenTypeProvider, _compileElementTypeProvider, _compileParserDefinition, _compileSyntaxHighlighterFactory, _compileSemanticHighlightVisitor, _compileExtensionFactory, _compileCodeBlockModificationListener, _compilePsiParser, _compileAntlrTokenFileProvider, _compilePomDeclarationSearcher, _compileFacetType, _compileBaseColorSettingsPage)), _function_1);\n    if (this.deployable) {\n      final TextFileAccess pluginXml = this.compilePluginXml(grammar);\n      IXtextProjectConfig _projectConfig = this.getProjectConfig();\n      IXtextGeneratorFileSystemAccess _ideaPluginMetaInf = _projectConfig.getIdeaPluginMetaInf();\n      String _path = pluginXml.getPath();\n      boolean _isFile = _ideaPluginMetaInf.isFile(_path);\n      boolean _not = (!_isFile);\n      if (_not) {\n        IXtextProjectConfig _projectConfig_1 = this.getProjectConfig();\n        IXtextGeneratorFileSystemAccess _ideaPluginMetaInf_1 = _projectConfig_1.getIdeaPluginMetaInf();\n        pluginXml.writeTo(_ideaPluginMetaInf_1);\n      }\n      TextFileAccess _compilePluginGenXml = this.compilePluginGenXml(grammar);\n      IXtextProjectConfig _projectConfig_2 = this.getProjectConfig();\n      IXtextGeneratorFileSystemAccess _ideaPluginMetaInf_2 = _projectConfig_2.getIdeaPluginMetaInf();\n      _compilePluginGenXml.writeTo(_ideaPluginMetaInf_2);\n    }\n  }","commit_id":"ab1a2cf86bbee49d8cf68e4a303e55cbba5c141f","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tprotected String format(String fileName) throws Exception {\n\t\tFile file = new File(BASEDIR + fileName);\n\n\t\tfileName = StringUtil.replace(\n\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\tString content = fileUtil.read(file);\n\n\t\tString newContent = trimContent(content, false);\n\n\t\tnewContent = fixComments(newContent);\n\n\t\tnewContent = fixHexColors(newContent);\n\n\t\tif (isAutoFix() && (newContent != null) &&\n\t\t\t!content.equals(newContent)) {\n\n\t\t\tfileUtil.write(file, newContent);\n\n\t\t\tsourceFormatterHelper.printError(fileName, file);\n\t\t}\n\n\t\treturn newContent;\n\t}","id":10007,"modified_method":"@Override\n\tprotected String format(String fileName) throws Exception {\n\t\tFile file = new File(BASEDIR + fileName);\n\n\t\tfileName = StringUtil.replace(\n\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\tString content = fileUtil.read(file);\n\n\t\tString newContent = trimContent(content, false);\n\n\t\tnewContent = fixComments(newContent);\n\n\t\tnewContent = fixHexColors(newContent);\n\n\t\tif (!content.equals(newContent)) {\n\t\t\tif (isAutoFix()) {\n\t\t\t\tfileUtil.write(file, newContent);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprocessMismatch(file, content, newContent);\n\t\t\t}\n\n\t\t\tprintError(fileName, file);\n\t\t}\n\n\t\treturn newContent;\n\t}","commit_id":"165f727703fa1d3bc2dac29c8599ec68d0d8d93e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected String format(String fileName) throws Exception {\n\t\tFile file = new File(BASEDIR + fileName);\n\n\t\tString content = fileUtil.read(file);\n\n\t\tString newContent = trimContent(content, false);\n\n\t\tif (isAutoFix() && (newContent != null) &&\n\t\t\t!content.equals(newContent)) {\n\n\t\t\tfileUtil.write(file, newContent);\n\n\t\t\tfileName = StringUtil.replace(\n\t\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\t\tsourceFormatterHelper.printError(fileName, file);\n\t\t}\n\n\t\treturn newContent;\n\t}","id":10008,"modified_method":"@Override\n\tprotected String format(String fileName) throws Exception {\n\t\tFile file = new File(BASEDIR + fileName);\n\n\t\tString content = fileUtil.read(file);\n\n\t\tString newContent = trimContent(content, false);\n\n\t\tif (!content.equals(newContent)) {\n\t\t\tif (isAutoFix()) {\n\t\t\t\tfileUtil.write(file, newContent);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprocessMismatch(file, content, newContent);\n\t\t\t}\n\n\t\t\tfileName = StringUtil.replace(\n\t\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\t\tprintError(fileName, file);\n\t\t}\n\n\t\treturn newContent;\n\t}","commit_id":"165f727703fa1d3bc2dac29c8599ec68d0d8d93e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void format() throws Exception {\n\t\t_unusedVariablesExclusions = getExclusionsProperties(\n\t\t\t\"source_formatter_jsp_unused_variables_exclusions.properties\");\n\n\t\tString[] excludes = new String[] {\"**\\\\null.jsp\", \"**\\\\tools\\\\**\"};\n\t\tString[] includes = new String[] {\n\t\t\t\"**\\\\*.jsp\", \"**\\\\*.jspf\", \"**\\\\*.vm\"\n\t\t};\n\n\t\tList<String> fileNames = getFileNames(excludes, includes);\n\n\t\tPattern pattern = Pattern.compile(\n\t\t\t\"\\\\s*@\\\\s*include\\\\s*file=['\\\"](.*)['\\\"]\");\n\n\t\tfor (String fileName : fileNames) {\n\t\t\tFile file = new File(BASEDIR + fileName);\n\n\t\t\tfileName = StringUtil.replace(\n\t\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\t\tString content = fileUtil.read(file);\n\n\t\t\tMatcher matcher = pattern.matcher(content);\n\n\t\t\tString newContent = content;\n\n\t\t\twhile (matcher.find()) {\n\t\t\t\tnewContent = StringUtil.replaceFirst(\n\t\t\t\t\tnewContent, matcher.group(),\n\t\t\t\t\t\"@ include file=\\\"\" + matcher.group(1) + \"\\\"\",\n\t\t\t\t\tmatcher.start());\n\t\t\t}\n\n\t\t\tif (isAutoFix() && !content.equals(newContent)) {\n\t\t\t\tfileUtil.write(file, newContent);\n\n\t\t\t\tsourceFormatterHelper.printError(fileName, file);\n\t\t\t}\n\n\t\t\tif (portalSource &&\n\t\t\t\t!mainReleaseVersion.equals(MAIN_RELEASE_VERSION_6_1_0) &&\n\t\t\t\tfileName.endsWith(\"/init.jsp\") &&\n\t\t\t\t!fileName.endsWith(\"/common/init.jsp\")) {\n\n\t\t\t\taddImportCounts(content);\n\t\t\t}\n\n\t\t\t_jspContents.put(fileName, newContent);\n\t\t}\n\n\t\tif (portalSource &&\n\t\t\t!mainReleaseVersion.equals(MAIN_RELEASE_VERSION_6_1_0)) {\n\n\t\t\tmoveFrequentlyUsedImportsToCommonInit(4);\n\t\t}\n\n\t\tfor (String fileName : fileNames) {\n\t\t\tformat(fileName);\n\t\t}\n\t}","id":10009,"modified_method":"@Override\n\tprotected void format() throws Exception {\n\t\t_unusedVariablesExclusions = getExclusionsProperties(\n\t\t\t\"source_formatter_jsp_unused_variables_exclusions.properties\");\n\n\t\tString[] excludes = new String[] {\"**\\\\null.jsp\", \"**\\\\tools\\\\**\"};\n\t\tString[] includes = new String[] {\n\t\t\t\"**\\\\*.jsp\", \"**\\\\*.jspf\", \"**\\\\*.vm\"\n\t\t};\n\n\t\tList<String> fileNames = getFileNames(excludes, includes);\n\n\t\tPattern pattern = Pattern.compile(\n\t\t\t\"\\\\s*@\\\\s*include\\\\s*file=['\\\"](.*)['\\\"]\");\n\n\t\tfor (String fileName : fileNames) {\n\t\t\tFile file = new File(BASEDIR + fileName);\n\n\t\t\tfileName = StringUtil.replace(\n\t\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\t\tString content = fileUtil.read(file);\n\n\t\t\tMatcher matcher = pattern.matcher(content);\n\n\t\t\tString newContent = content;\n\n\t\t\twhile (matcher.find()) {\n\t\t\t\tnewContent = StringUtil.replaceFirst(\n\t\t\t\t\tnewContent, matcher.group(),\n\t\t\t\t\t\"@ include file=\\\"\" + matcher.group(1) + \"\\\"\",\n\t\t\t\t\tmatcher.start());\n\t\t\t}\n\n\t\t\tif (!content.equals(newContent)) {\n\t\t\t\tif (isAutoFix()) {\n\t\t\t\t\tfileUtil.write(file, newContent);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tprocessMismatch(file, content, newContent);\n\t\t\t\t}\n\n\t\t\t\tprintError(fileName, file);\n\t\t\t}\n\n\t\t\tif (portalSource &&\n\t\t\t\t!mainReleaseVersion.equals(MAIN_RELEASE_VERSION_6_1_0) &&\n\t\t\t\tfileName.endsWith(\"/init.jsp\") &&\n\t\t\t\t!fileName.endsWith(\"/common/init.jsp\")) {\n\n\t\t\t\taddImportCounts(content);\n\t\t\t}\n\n\t\t\t_jspContents.put(fileName, newContent);\n\t\t}\n\n\t\tif (portalSource &&\n\t\t\t!mainReleaseVersion.equals(MAIN_RELEASE_VERSION_6_1_0)) {\n\n\t\t\tmoveFrequentlyUsedImportsToCommonInit(4);\n\t\t}\n\n\t\tfor (String fileName : fileNames) {\n\t\t\tformat(fileName);\n\t\t}\n\t}","commit_id":"165f727703fa1d3bc2dac29c8599ec68d0d8d93e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected String format(String fileName) throws Exception {\n\t\tFile file = new File(BASEDIR + fileName);\n\n\t\tfileName = StringUtil.replace(\n\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\tString content = fileUtil.read(file);\n\n\t\tString oldContent = content;\n\t\tString newContent = StringPool.BLANK;\n\n\t\twhile (true) {\n\t\t\tnewContent = formatJSP(fileName, oldContent);\n\n\t\t\tif (oldContent.equals(newContent)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\toldContent = newContent;\n\t\t}\n\n\t\tnewContent = StringUtil.replace(\n\t\t\tnewContent,\n\t\t\tnew String[] {\n\t\t\t\t\"<br/>\", \"\\\"/>\", \"\\\" >\", \"@page import\", \"\\\"%>\", \")%>\", \"else{\",\n\t\t\t\t\"for(\", \"function (\", \"if(\", \"javascript: \", \"while(\", \"){\\n\",\n\t\t\t\t\"\\n\\n\\n\"\n\t\t\t},\n\t\t\tnew String[] {\n\t\t\t\t\"<br />\", \"\\\" />\", \"\\\">\", \"@ page import\", \"\\\" %>\", \") %>\",\n\t\t\t\t\"else {\", \"for (\", \"function(\", \"if (\", \"javascript:\",\n\t\t\t\t\"while (\", \") {\\n\", \"\\n\\n\"\n\t\t\t});\n\n\t\tnewContent = fixCompatClassImports(file, newContent);\n\n\t\tif (_stripJSPImports && !_jspContents.isEmpty()) {\n\t\t\ttry {\n\t\t\t\tnewContent = stripJSPImports(fileName, newContent);\n\t\t\t}\n\t\t\tcatch (RuntimeException re) {\n\t\t\t\t_stripJSPImports = false;\n\t\t\t}\n\t\t}\n\n\t\tif (portalSource &&\n\t\t\t!mainReleaseVersion.equals(MAIN_RELEASE_VERSION_6_1_0) &&\n\t\t\tcontent.contains(\"page import=\") &&\n\t\t\t!fileName.contains(\"init.jsp\") &&\n\t\t\t!fileName.contains(\"init-ext.jsp\") &&\n\t\t\t!fileName.contains(\"/taglib/aui/\") &&\n\t\t\t!fileName.endsWith(\"touch.jsp\") &&\n\t\t\t(fileName.endsWith(\".jspf\") || content.contains(\"include file=\"))) {\n\n\t\t\tprocessErrorMessage(\n\t\t\t\tfileName, \"move imports to init.jsp: \" + fileName);\n\t\t}\n\n\t\tnewContent = fixCopyright(\n\t\t\tnewContent, getCopyright(), getOldCopyright(), file, fileName);\n\n\t\tnewContent = StringUtil.replace(\n\t\t\tnewContent,\n\t\t\tnew String[] {\n\t\t\t\t\"alert('<%= LanguageUtil.\", \"alert(\\\"<%= LanguageUtil.\",\n\t\t\t\t\"confirm('<%= LanguageUtil.\", \"confirm(\\\"<%= LanguageUtil.\"\n\t\t\t},\n\t\t\tnew String[] {\n\t\t\t\t\"alert('<%= UnicodeLanguageUtil.\",\n\t\t\t\t\"alert(\\\"<%= UnicodeLanguageUtil.\",\n\t\t\t\t\"confirm('<%= UnicodeLanguageUtil.\",\n\t\t\t\t\"confirm(\\\"<%= UnicodeLanguageUtil.\"\n\t\t\t});\n\n\t\tif (newContent.contains(\"    \")) {\n\t\t\tif (!fileName.matches(\".*template.*\\\\.vm$\")) {\n\t\t\t\tprocessErrorMessage(fileName, \"tab: \" + fileName);\n\t\t\t}\n\t\t}\n\n\t\tif (fileName.endsWith(\"init.jsp\") || fileName.endsWith(\"init.jspf\")) {\n\t\t\tint x = newContent.indexOf(\"<%@ page import=\");\n\n\t\t\tint y = newContent.lastIndexOf(\"<%@ page import=\");\n\n\t\t\ty = newContent.indexOf(\"%>\", y);\n\n\t\t\tif ((x != -1) && (y != -1) && (y > x)) {\n\n\t\t\t\t// Set compressImports to false to decompress imports\n\n\t\t\t\tboolean compressImports = true;\n\n\t\t\t\tif (compressImports) {\n\t\t\t\t\tString imports = newContent.substring(x, y);\n\n\t\t\t\t\timports = StringUtil.replace(\n\t\t\t\t\t\timports, new String[] {\"%>\\r\\n<%@ \", \"%>\\n<%@ \"},\n\t\t\t\t\t\tnew String[] {\"%><%@\\r\\n\", \"%><%@\\n\"});\n\n\t\t\t\t\tnewContent =\n\t\t\t\t\t\tnewContent.substring(0, x) + imports +\n\t\t\t\t\t\t\tnewContent.substring(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tnewContent = fixSessionKey(fileName, newContent, sessionKeyPattern);\n\t\tnewContent = fixSessionKey(\n\t\t\tfileName, newContent, taglibSessionKeyPattern);\n\n\t\tcheckLanguageKeys(fileName, newContent, languageKeyPattern);\n\t\tcheckLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern);\n\t\tcheckXSS(fileName, newContent);\n\n\t\tif (isAutoFix() && (newContent != null) &&\n\t\t\t!content.equals(newContent)) {\n\n\t\t\tfileUtil.write(file, newContent);\n\n\t\t\tsourceFormatterHelper.printError(fileName, file);\n\t\t}\n\n\t\treturn newContent;\n\t}","id":10010,"modified_method":"@Override\n\tprotected String format(String fileName) throws Exception {\n\t\tFile file = new File(BASEDIR + fileName);\n\n\t\tfileName = StringUtil.replace(\n\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\tString content = fileUtil.read(file);\n\n\t\tString oldContent = content;\n\t\tString newContent = StringPool.BLANK;\n\n\t\twhile (true) {\n\t\t\tnewContent = formatJSP(fileName, oldContent);\n\n\t\t\tif (oldContent.equals(newContent)) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\toldContent = newContent;\n\t\t}\n\n\t\tnewContent = StringUtil.replace(\n\t\t\tnewContent,\n\t\t\tnew String[] {\n\t\t\t\t\"<br/>\", \"\\\"/>\", \"\\\" >\", \"@page import\", \"\\\"%>\", \")%>\", \"else{\",\n\t\t\t\t\"for(\", \"function (\", \"if(\", \"javascript: \", \"while(\", \"){\\n\",\n\t\t\t\t\"\\n\\n\\n\"\n\t\t\t},\n\t\t\tnew String[] {\n\t\t\t\t\"<br />\", \"\\\" />\", \"\\\">\", \"@ page import\", \"\\\" %>\", \") %>\",\n\t\t\t\t\"else {\", \"for (\", \"function(\", \"if (\", \"javascript:\",\n\t\t\t\t\"while (\", \") {\\n\", \"\\n\\n\"\n\t\t\t});\n\n\t\tnewContent = fixCompatClassImports(file, newContent);\n\n\t\tif (_stripJSPImports && !_jspContents.isEmpty()) {\n\t\t\ttry {\n\t\t\t\tnewContent = stripJSPImports(fileName, newContent);\n\t\t\t}\n\t\t\tcatch (RuntimeException re) {\n\t\t\t\t_stripJSPImports = false;\n\t\t\t}\n\t\t}\n\n\t\tif (portalSource &&\n\t\t\t!mainReleaseVersion.equals(MAIN_RELEASE_VERSION_6_1_0) &&\n\t\t\tcontent.contains(\"page import=\") &&\n\t\t\t!fileName.contains(\"init.jsp\") &&\n\t\t\t!fileName.contains(\"init-ext.jsp\") &&\n\t\t\t!fileName.contains(\"/taglib/aui/\") &&\n\t\t\t!fileName.endsWith(\"touch.jsp\") &&\n\t\t\t(fileName.endsWith(\".jspf\") || content.contains(\"include file=\"))) {\n\n\t\t\tprocessErrorMessage(\n\t\t\t\tfileName, \"move imports to init.jsp: \" + fileName);\n\t\t}\n\n\t\tnewContent = fixCopyright(\n\t\t\tnewContent, getCopyright(), getOldCopyright(), file, fileName);\n\n\t\tnewContent = StringUtil.replace(\n\t\t\tnewContent,\n\t\t\tnew String[] {\n\t\t\t\t\"alert('<%= LanguageUtil.\", \"alert(\\\"<%= LanguageUtil.\",\n\t\t\t\t\"confirm('<%= LanguageUtil.\", \"confirm(\\\"<%= LanguageUtil.\"\n\t\t\t},\n\t\t\tnew String[] {\n\t\t\t\t\"alert('<%= UnicodeLanguageUtil.\",\n\t\t\t\t\"alert(\\\"<%= UnicodeLanguageUtil.\",\n\t\t\t\t\"confirm('<%= UnicodeLanguageUtil.\",\n\t\t\t\t\"confirm(\\\"<%= UnicodeLanguageUtil.\"\n\t\t\t});\n\n\t\tif (newContent.contains(\"    \")) {\n\t\t\tif (!fileName.matches(\".*template.*\\\\.vm$\")) {\n\t\t\t\tprocessErrorMessage(fileName, \"tab: \" + fileName);\n\t\t\t}\n\t\t}\n\n\t\tif (fileName.endsWith(\"init.jsp\") || fileName.endsWith(\"init.jspf\")) {\n\t\t\tint x = newContent.indexOf(\"<%@ page import=\");\n\n\t\t\tint y = newContent.lastIndexOf(\"<%@ page import=\");\n\n\t\t\ty = newContent.indexOf(\"%>\", y);\n\n\t\t\tif ((x != -1) && (y != -1) && (y > x)) {\n\n\t\t\t\t// Set compressImports to false to decompress imports\n\n\t\t\t\tboolean compressImports = true;\n\n\t\t\t\tif (compressImports) {\n\t\t\t\t\tString imports = newContent.substring(x, y);\n\n\t\t\t\t\timports = StringUtil.replace(\n\t\t\t\t\t\timports, new String[] {\"%>\\r\\n<%@ \", \"%>\\n<%@ \"},\n\t\t\t\t\t\tnew String[] {\"%><%@\\r\\n\", \"%><%@\\n\"});\n\n\t\t\t\t\tnewContent =\n\t\t\t\t\t\tnewContent.substring(0, x) + imports +\n\t\t\t\t\t\t\tnewContent.substring(y);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tnewContent = fixSessionKey(fileName, newContent, sessionKeyPattern);\n\t\tnewContent = fixSessionKey(\n\t\t\tfileName, newContent, taglibSessionKeyPattern);\n\n\t\tcheckLanguageKeys(fileName, newContent, languageKeyPattern);\n\t\tcheckLanguageKeys(fileName, newContent, _taglibLanguageKeyPattern);\n\t\tcheckXSS(fileName, newContent);\n\n\t\tif (!content.equals(newContent)) {\n\t\t\tif (isAutoFix()) {\n\t\t\t\tfileUtil.write(file, newContent);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprocessMismatch(file, content, newContent);\n\t\t\t}\n\n\t\t\tprintError(fileName, file);\n\t\t}\n\n\t\treturn newContent;\n\t}","commit_id":"165f727703fa1d3bc2dac29c8599ec68d0d8d93e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected String format(String fileName) throws Exception {\n\t\tFile file = new File(BASEDIR + fileName);\n\n\t\tfileName = StringUtil.replace(\n\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\tString content = fileUtil.read(file);\n\n\t\tString newContent = trimContent(content, false);\n\n\t\tnewContent = StringUtil.replace(\n\t\t\tnewContent,\n\t\t\tnew String[] {\n\t\t\t\t\"else{\", \"for(\", \"function (\", \"if(\", \"while(\", \"){\\n\",\n\t\t\t\t\"= new Array();\", \"= new Object();\"\n\t\t\t},\n\t\t\tnew String[] {\n\t\t\t\t\"else {\", \"for (\", \"function(\", \"if (\", \"while (\", \") {\\n\",\n\t\t\t\t\"= [];\", \"= {};\"\n\t\t\t});\n\n\t\twhile (true) {\n\t\t\tMatcher matcher = _multipleVarsOnSingleLinePattern.matcher(\n\t\t\t\tnewContent);\n\n\t\t\tif (!matcher.find()) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tString match = matcher.group();\n\n\t\t\tint pos = match.indexOf(\"var \");\n\n\t\t\tStringBundler sb = new StringBundler(4);\n\n\t\t\tsb.append(match.substring(0, match.length() - 2));\n\t\t\tsb.append(StringPool.SEMICOLON);\n\t\t\tsb.append(\"\\n\");\n\t\t\tsb.append(match.substring(0, pos + 4));\n\n\t\t\tnewContent = StringUtil.replace(newContent, match, sb.toString());\n\t\t}\n\n\t\tif (newContent.endsWith(\"\\n\")) {\n\t\t\tnewContent = newContent.substring(0, newContent.length() - 1);\n\t\t}\n\n\t\tcheckLanguageKeys(fileName, newContent, languageKeyPattern);\n\n\t\tif (newContent.contains(\"debugger.\")) {\n\t\t\tprocessErrorMessage(fileName, \"debugger \" + fileName);\n\t\t}\n\n\t\tif (isAutoFix() && (newContent != null) &&\n\t\t\t!content.equals(newContent)) {\n\n\t\t\tfileUtil.write(file, newContent);\n\n\t\t\tsourceFormatterHelper.printError(fileName, file);\n\t\t}\n\n\t\treturn newContent;\n\t}","id":10011,"modified_method":"@Override\n\tprotected String format(String fileName) throws Exception {\n\t\tFile file = new File(BASEDIR + fileName);\n\n\t\tfileName = StringUtil.replace(\n\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\tString content = fileUtil.read(file);\n\n\t\tString newContent = trimContent(content, false);\n\n\t\tnewContent = StringUtil.replace(\n\t\t\tnewContent,\n\t\t\tnew String[] {\n\t\t\t\t\"else{\", \"for(\", \"function (\", \"if(\", \"while(\", \"){\\n\",\n\t\t\t\t\"= new Array();\", \"= new Object();\"\n\t\t\t},\n\t\t\tnew String[] {\n\t\t\t\t\"else {\", \"for (\", \"function(\", \"if (\", \"while (\", \") {\\n\",\n\t\t\t\t\"= [];\", \"= {};\"\n\t\t\t});\n\n\t\twhile (true) {\n\t\t\tMatcher matcher = _multipleVarsOnSingleLinePattern.matcher(\n\t\t\t\tnewContent);\n\n\t\t\tif (!matcher.find()) {\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\tString match = matcher.group();\n\n\t\t\tint pos = match.indexOf(\"var \");\n\n\t\t\tStringBundler sb = new StringBundler(4);\n\n\t\t\tsb.append(match.substring(0, match.length() - 2));\n\t\t\tsb.append(StringPool.SEMICOLON);\n\t\t\tsb.append(\"\\n\");\n\t\t\tsb.append(match.substring(0, pos + 4));\n\n\t\t\tnewContent = StringUtil.replace(newContent, match, sb.toString());\n\t\t}\n\n\t\tif (newContent.endsWith(\"\\n\")) {\n\t\t\tnewContent = newContent.substring(0, newContent.length() - 1);\n\t\t}\n\n\t\tcheckLanguageKeys(fileName, newContent, languageKeyPattern);\n\n\t\tif (newContent.contains(\"debugger.\")) {\n\t\t\tprocessErrorMessage(fileName, \"debugger \" + fileName);\n\t\t}\n\n\t\tif (!content.equals(newContent)) {\n\t\t\tif (isAutoFix()) {\n\t\t\t\tfileUtil.write(file, newContent);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprocessMismatch(file, content, newContent);\n\t\t\t}\n\n\t\t\tprintError(fileName, file);\n\t\t}\n\n\t\treturn newContent;\n\t}","commit_id":"165f727703fa1d3bc2dac29c8599ec68d0d8d93e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void formatPortalPortalProperties(File file, String fileName)\n\t\tthrows Exception {\n\n\t\tStringBundler sb = new StringBundler();\n\n\t\tUnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(\n\t\t\tnew UnsyncStringReader(_portalPortalProperties));\n\n\t\tString line = null;\n\n\t\twhile ((line = unsyncBufferedReader.readLine()) != null) {\n\t\t\tline = trimLine(line, true);\n\n\t\t\tif (line.startsWith(StringPool.TAB)) {\n\t\t\t\tline = line.replaceFirst(\n\t\t\t\t\tStringPool.TAB, StringPool.FOUR_SPACES);\n\t\t\t}\n\n\t\t\tsb.append(line);\n\t\t\tsb.append(\"\\n\");\n\t\t}\n\n\t\tunsyncBufferedReader.close();\n\n\t\tString newContent = sb.toString();\n\n\t\tif (newContent.endsWith(\"\\n\")) {\n\t\t\tnewContent = newContent.substring(0, newContent.length() - 1);\n\t\t}\n\n\t\tif (isAutoFix() && (newContent != null) &&\n\t\t\t!_portalPortalProperties.equals(newContent)) {\n\n\t\t\tfileUtil.write(file, newContent);\n\n\t\t\tsourceFormatterHelper.printError(fileName, file);\n\t\t}\n\t}","id":10012,"modified_method":"protected void formatPortalPortalProperties(File file, String fileName)\n\t\tthrows Exception {\n\n\t\tStringBundler sb = new StringBundler();\n\n\t\tUnsyncBufferedReader unsyncBufferedReader = new UnsyncBufferedReader(\n\t\t\tnew UnsyncStringReader(_portalPortalProperties));\n\n\t\tString line = null;\n\n\t\twhile ((line = unsyncBufferedReader.readLine()) != null) {\n\t\t\tline = trimLine(line, true);\n\n\t\t\tif (line.startsWith(StringPool.TAB)) {\n\t\t\t\tline = line.replaceFirst(\n\t\t\t\t\tStringPool.TAB, StringPool.FOUR_SPACES);\n\t\t\t}\n\n\t\t\tsb.append(line);\n\t\t\tsb.append(\"\\n\");\n\t\t}\n\n\t\tunsyncBufferedReader.close();\n\n\t\tString newContent = sb.toString();\n\n\t\tif (newContent.endsWith(\"\\n\")) {\n\t\t\tnewContent = newContent.substring(0, newContent.length() - 1);\n\t\t}\n\n\t\tif (!_portalPortalProperties.equals(newContent)) {\n\t\t\tif (isAutoFix()) {\n\t\t\t\tfileUtil.write(file, newContent);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprocessMismatch(file, _portalPortalProperties, newContent);\n\t\t\t}\n\n\t\t\tprintError(fileName, file);\n\t\t}\n\t}","commit_id":"165f727703fa1d3bc2dac29c8599ec68d0d8d93e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected String format(String fileName) throws IOException {\n\t\tFile file = new File(fileName);\n\n\t\tif (!file.exists()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tString content = fileUtil.read(new File(fileName), true);\n\n\t\tif (content.contains(\"\\r\")) {\n\t\t\tprocessErrorMessage(fileName, \"Invalid new line character\");\n\n\t\t\tif (isAutoFix()) {\n\t\t\t\tcontent = StringUtil.replace(content, \"\\r\", \"\");\n\n\t\t\t\tfileUtil.write(fileName, content);\n\t\t\t}\n\t\t}\n\n\t\treturn content;\n\t}","id":10013,"modified_method":"@Override\n\tprotected String format(String fileName) throws IOException {\n\t\tFile file = new File(fileName);\n\n\t\tif (!file.exists()) {\n\t\t\treturn null;\n\t\t}\n\n\t\tString content = fileUtil.read(new File(fileName), true);\n\n\t\tif (!content.contains(\"\\r\")) {\n\t\t\treturn content;\n\t\t}\n\n\t\tString newContent = StringUtil.replace(content, \"\\r\", \"\");\n\n\t\tif (isAutoFix()) {\n\t\t\tfileUtil.write(fileName, content);\n\t\t}\n\t\telse {\n\t\t\tprocessMismatch(file, content, newContent);\n\t\t}\n\n\t\tprintError(fileName, file);\n\n\t\treturn newContent;\n\t}","commit_id":"165f727703fa1d3bc2dac29c8599ec68d0d8d93e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected String format(String fileName) throws Exception {\n\t\tFile file = new File(BASEDIR + fileName);\n\n\t\tString content = fileUtil.read(file);\n\n\t\tString newContent = formatSQL(content);\n\n\t\tif (isAutoFix() && (newContent != null) &&\n\t\t\t!content.equals(newContent)) {\n\n\t\t\tfileUtil.write(file, newContent);\n\n\t\t\tfileName = StringUtil.replace(\n\t\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\t\tsourceFormatterHelper.printError(fileName, file);\n\t\t}\n\n\t\treturn newContent;\n\t}","id":10014,"modified_method":"@Override\n\tprotected String format(String fileName) throws Exception {\n\t\tFile file = new File(BASEDIR + fileName);\n\n\t\tString content = fileUtil.read(file);\n\n\t\tString newContent = formatSQL(content);\n\n\t\tif (!content.equals(newContent)) {\n\t\t\tif (isAutoFix()) {\n\t\t\t\tfileUtil.write(file, newContent);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tprocessMismatch(file, content, newContent);\n\t\t\t}\n\n\t\t\tfileName = StringUtil.replace(\n\t\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\t\tprintError(fileName, file);\n\t\t}\n\n\t\treturn newContent;\n\t}","commit_id":"165f727703fa1d3bc2dac29c8599ec68d0d8d93e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void format() throws Exception {\n\t\tString[] excludes = new String[] {\n\t\t\t\"**\\\\.bnd\\\\**\", \"**\\\\.idea\\\\**\", \"portal-impl\\\\**\\\\*.action\",\n\t\t\t\"portal-impl\\\\**\\\\*.function\", \"portal-impl\\\\**\\\\*.macro\",\n\t\t\t\"portal-impl\\\\**\\\\*.testcase\"\n\t\t};\n\n\t\tString[] includes = new String[] {\n\t\t\t\"**\\\\*.action\",\"**\\\\*.function\",\"**\\\\*.macro\",\"**\\\\*.testcase\",\n\t\t\t\"**\\\\*.xml\"\n\t\t};\n\n\t\tProperties exclusions = getExclusionsProperties(\n\t\t\t\"source_formatter_xml_exclusions.properties\");\n\n\t\t_friendlyUrlRoutesSortExclusions = getExclusionsProperties(\n\t\t\t\"source_formatter_friendly_url_routes_sort_exclusions.properties\");\n\n\t\tList<String> fileNames = getFileNames(excludes, includes);\n\n\t\tfor (String fileName : fileNames) {\n\t\t\tFile file = new File(BASEDIR + fileName);\n\n\t\t\tfileName = StringUtil.replace(\n\t\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\t\tif (isExcluded(exclusions, fileName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tString content = fileUtil.read(file);\n\n\t\t\tString newContent = content;\n\n\t\t\tif (!fileName.contains(\"/build\")) {\n\t\t\t\tnewContent = trimContent(newContent, false);\n\t\t\t}\n\n\t\t\tif (fileName.contains(\"/build\") && !fileName.contains(\"/tools/\")) {\n\t\t\t\tnewContent = formatAntXML(fileName, newContent);\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\"structures.xml\")) {\n\t\t\t\tnewContent = formatDDLStructuresXML(newContent);\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\"routes.xml\")) {\n\t\t\t\tnewContent = formatFriendlyURLRoutesXML(fileName, newContent);\n\t\t\t}\n\t\t\telse if ((portalSource &&\n\t\t\t\t\t  fileName.endsWith(\"/portlet-custom.xml\")) ||\n\t\t\t\t\t (!portalSource && fileName.endsWith(\"/portlet.xml\"))) {\n\n\t\t\t\tnewContent = formatPortletXML(newContent);\n\t\t\t}\n\t\t\telse if (portalSource &&\n\t\t\t\t\t (fileName.endsWith(\".action\") ||\n\t\t\t\t\t  fileName.endsWith(\".function\") ||\n\t\t\t\t\t  fileName.endsWith(\".macro\") ||\n\t\t\t\t\t  fileName.endsWith(\".testcase\"))) {\n\n\t\t\t\tnewContent = formatPoshiXML(newContent);\n\t\t\t}\n\t\t\telse if (portalSource && fileName.endsWith(\"/service.xml\")) {\n\t\t\t\tformatServiceXML(fileName, newContent);\n\t\t\t}\n\t\t\telse if (portalSource && fileName.endsWith(\"/struts-config.xml\")) {\n\t\t\t\tformatStrutsConfigXML(fileName, newContent);\n\t\t\t}\n\t\t\telse if (portalSource && fileName.endsWith(\"/tiles-defs.xml\")) {\n\t\t\t\tformatTilesDefsXML(fileName, newContent);\n\t\t\t}\n\t\t\telse if ((portalSource && fileName.endsWith(\"WEB-INF/web.xml\")) ||\n\t\t\t\t\t (!portalSource && fileName.endsWith(\"/web.xml\"))) {\n\n\t\t\t\tnewContent = formatWebXML(fileName, newContent);\n\t\t\t}\n\n\t\t\tnewContent = formatXML(newContent);\n\n\t\t\tif (isAutoFix() && (newContent != null) &&\n\t\t\t\t!content.equals(newContent)) {\n\n\t\t\t\tfileUtil.write(file, newContent);\n\n\t\t\t\tsourceFormatterHelper.printError(fileName, file);\n\t\t\t}\n\t\t}\n\t}","id":10015,"modified_method":"@Override\n\tprotected void format() throws Exception {\n\t\tString[] excludes = new String[] {\n\t\t\t\"**\\\\.bnd\\\\**\", \"**\\\\.idea\\\\**\", \"portal-impl\\\\**\\\\*.action\",\n\t\t\t\"portal-impl\\\\**\\\\*.function\", \"portal-impl\\\\**\\\\*.macro\",\n\t\t\t\"portal-impl\\\\**\\\\*.testcase\"\n\t\t};\n\n\t\tString[] includes = new String[] {\n\t\t\t\"**\\\\*.action\",\"**\\\\*.function\",\"**\\\\*.macro\",\"**\\\\*.testcase\",\n\t\t\t\"**\\\\*.xml\"\n\t\t};\n\n\t\tProperties exclusions = getExclusionsProperties(\n\t\t\t\"source_formatter_xml_exclusions.properties\");\n\n\t\t_friendlyUrlRoutesSortExclusions = getExclusionsProperties(\n\t\t\t\"source_formatter_friendly_url_routes_sort_exclusions.properties\");\n\n\t\tList<String> fileNames = getFileNames(excludes, includes);\n\n\t\tfor (String fileName : fileNames) {\n\t\t\tFile file = new File(BASEDIR + fileName);\n\n\t\t\tfileName = StringUtil.replace(\n\t\t\t\tfileName, StringPool.BACK_SLASH, StringPool.SLASH);\n\n\t\t\tif (isExcluded(exclusions, fileName)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tString content = fileUtil.read(file);\n\n\t\t\tString newContent = content;\n\n\t\t\tif (!fileName.contains(\"/build\")) {\n\t\t\t\tnewContent = trimContent(newContent, false);\n\t\t\t}\n\n\t\t\tif (fileName.contains(\"/build\") && !fileName.contains(\"/tools/\")) {\n\t\t\t\tnewContent = formatAntXML(fileName, newContent);\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\"structures.xml\")) {\n\t\t\t\tnewContent = formatDDLStructuresXML(newContent);\n\t\t\t}\n\t\t\telse if (fileName.endsWith(\"routes.xml\")) {\n\t\t\t\tnewContent = formatFriendlyURLRoutesXML(fileName, newContent);\n\t\t\t}\n\t\t\telse if ((portalSource &&\n\t\t\t\t\t  fileName.endsWith(\"/portlet-custom.xml\")) ||\n\t\t\t\t\t (!portalSource && fileName.endsWith(\"/portlet.xml\"))) {\n\n\t\t\t\tnewContent = formatPortletXML(newContent);\n\t\t\t}\n\t\t\telse if (portalSource &&\n\t\t\t\t\t (fileName.endsWith(\".action\") ||\n\t\t\t\t\t  fileName.endsWith(\".function\") ||\n\t\t\t\t\t  fileName.endsWith(\".macro\") ||\n\t\t\t\t\t  fileName.endsWith(\".testcase\"))) {\n\n\t\t\t\tnewContent = formatPoshiXML(newContent);\n\t\t\t}\n\t\t\telse if (portalSource && fileName.endsWith(\"/service.xml\")) {\n\t\t\t\tformatServiceXML(fileName, newContent);\n\t\t\t}\n\t\t\telse if (portalSource && fileName.endsWith(\"/struts-config.xml\")) {\n\t\t\t\tformatStrutsConfigXML(fileName, newContent);\n\t\t\t}\n\t\t\telse if (portalSource && fileName.endsWith(\"/tiles-defs.xml\")) {\n\t\t\t\tformatTilesDefsXML(fileName, newContent);\n\t\t\t}\n\t\t\telse if ((portalSource && fileName.endsWith(\"WEB-INF/web.xml\")) ||\n\t\t\t\t\t (!portalSource && fileName.endsWith(\"/web.xml\"))) {\n\n\t\t\t\tnewContent = formatWebXML(fileName, newContent);\n\t\t\t}\n\n\t\t\tnewContent = formatXML(newContent);\n\n\t\t\tif (!content.equals(newContent)) {\n\t\t\t\tif (isAutoFix()) {\n\t\t\t\t\tfileUtil.write(file, newContent);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tprocessMismatch(file, content, newContent);\n\t\t\t\t}\n\n\t\t\t\tprintError(fileName, file);\n\t\t\t}\n\t\t}\n\t}","commit_id":"165f727703fa1d3bc2dac29c8599ec68d0d8d93e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n    protected void configure() {\n\n        // bind ShardsAllocator\n        final String shardsAllocatorType = settings.get(AllocationModule.SHARDS_ALLOCATOR_TYPE_KEY, AllocationModule.BALANCED_ALLOCATOR);\n        final Class<? extends ShardsAllocator> shardsAllocator = shardsAllocators.get(shardsAllocatorType);\n        if (shardsAllocator == null) {\n            throw new IllegalArgumentException(\"Unknown ShardsAllocator type [\" + shardsAllocatorType + \"]\");\n        } else if (shardsAllocatorType.equals(EVEN_SHARD_COUNT_ALLOCATOR)) {\n            final ESLogger logger = Loggers.getLogger(getClass(), settings);\n            logger.warn(\"{} allocator has been removed in 2.0 using {} instead\", AllocationModule.EVEN_SHARD_COUNT_ALLOCATOR, AllocationModule.BALANCED_ALLOCATOR);\n        }\n        bind(ShardsAllocator.class).to(shardsAllocator).asEagerSingleton();\n\n        // bind AllocationDeciders\n        Multibinder<AllocationDecider> allocationMultibinder = Multibinder.newSetBinder(binder(), AllocationDecider.class);\n        for (Class<? extends AllocationDecider> allocation : allocationDeciders) {\n            allocationMultibinder.addBinding().to(allocation).asEagerSingleton();\n        }\n\n        bind(GatewayAllocator.class).asEagerSingleton();\n        bind(AllocationDeciders.class).asEagerSingleton();\n        bind(AllocationService.class).asEagerSingleton();\n    }","id":10016,"modified_method":"@Override\n    protected void configure() {\n        // bind ShardsAllocator\n        String shardsAllocatorType = shardsAllocators.bindType(binder(), settings, AllocationModule.SHARDS_ALLOCATOR_TYPE_KEY, AllocationModule.BALANCED_ALLOCATOR);\n        if (shardsAllocatorType.equals(EVEN_SHARD_COUNT_ALLOCATOR)) {\n            final ESLogger logger = Loggers.getLogger(getClass(), settings);\n            logger.warn(\"{} allocator has been removed in 2.0 using {} instead\", AllocationModule.EVEN_SHARD_COUNT_ALLOCATOR, AllocationModule.BALANCED_ALLOCATOR);\n        }\n        // bind AllocationDeciders\n        allocationDeciders.bind(binder());\n\n        bind(GatewayAllocator.class).asEagerSingleton();\n        bind(AllocationService.class).asEagerSingleton();\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public AllocationModule(Settings settings) {\n        this.settings = settings;\n        this.allocationDeciders.addAll(DEFAULT_ALLOCATION_DECIDERS);\n        registerShardAllocator(BALANCED_ALLOCATOR, BalancedShardsAllocator.class);\n        registerShardAllocator(EVEN_SHARD_COUNT_ALLOCATOR, BalancedShardsAllocator.class);\n    }","id":10017,"modified_method":"public AllocationModule(Settings settings) {\n        this.settings = settings;\n        for (Class<? extends AllocationDecider> decider : DEFAULT_ALLOCATION_DECIDERS) {\n            allocationDeciders.registerExtension(decider);\n        }\n        shardsAllocators.registerExtension(BALANCED_ALLOCATOR, BalancedShardsAllocator.class);\n        shardsAllocators.registerExtension(EVEN_SHARD_COUNT_ALLOCATOR, BalancedShardsAllocator.class);\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/** Register a custom allocation decider */\n    public void registerAllocationDecider(Class<? extends AllocationDecider> allocationDecider) {\n        boolean isNew = allocationDeciders.add(allocationDecider);\n        if (isNew == false) {\n            throw new IllegalArgumentException(\"Cannot register AllocationDecider \" + allocationDecider.getName() + \" twice\");\n        }\n    }","id":10018,"modified_method":"/** Register a custom allocation decider */\n    public void registerAllocationDecider(Class<? extends AllocationDecider> allocationDecider) {\n        allocationDeciders.registerExtension(allocationDecider);\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/** Register a custom shard allocator with the given name */\n    public void registerShardAllocator(String name, Class<? extends ShardsAllocator> clazz) {\n        Class<? extends ShardsAllocator> existing = shardsAllocators.put(name, clazz);\n        if (existing != null) {\n            throw new IllegalArgumentException(\"Cannot register ShardAllocator [\" + name + \"] to \" + clazz.getName() + \", already registered to \" + existing.getName());\n        }\n    }","id":10019,"modified_method":"/** Register a custom shard allocator with the given name */\n    public void registerShardAllocator(String name, Class<? extends ShardsAllocator> clazz) {\n        shardsAllocators.registerExtension(name, clazz);\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testUnknownShardsAllocator() {\n        Settings settings = Settings.builder().put(AllocationModule.SHARDS_ALLOCATOR_TYPE_KEY, \"dne\").build();\n        AllocationModule module = new AllocationModule(settings);\n        assertBindingFailure(module, \"Unknown ShardsAllocator\");\n    }","id":10020,"modified_method":"public void testUnknownShardsAllocator() {\n        Settings settings = Settings.builder().put(AllocationModule.SHARDS_ALLOCATOR_TYPE_KEY, \"dne\").build();\n        AllocationModule module = new AllocationModule(settings);\n        assertBindingFailure(module, \"Unknown [shards_allocator]\");\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testRegisterShardsAllocatorAlreadyRegistered() {\n        AllocationModule module = new AllocationModule(Settings.EMPTY);\n        try {\n            module.registerShardAllocator(AllocationModule.BALANCED_ALLOCATOR, FakeShardsAllocator.class);\n        } catch (IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"already registered\"));\n        }\n    }","id":10021,"modified_method":"public void testRegisterShardsAllocatorAlreadyRegistered() {\n        AllocationModule module = new AllocationModule(Settings.EMPTY);\n        try {\n            module.registerShardAllocator(AllocationModule.BALANCED_ALLOCATOR, FakeShardsAllocator.class);\n        } catch (IllegalArgumentException e) {\n            assertEquals(e.getMessage(), \"Can't register the same [shards_allocator] more than once for [balanced]\");\n        }\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testRegisterAllocationDeciderDuplicate() {\n        AllocationModule module = new AllocationModule(Settings.EMPTY);\n        try {\n            module.registerAllocationDecider(EnableAllocationDecider.class);\n        } catch (IllegalArgumentException e) {\n            assertTrue(e.getMessage().contains(\"Cannot register AllocationDecider\"));\n            assertTrue(e.getMessage().contains(\"twice\"));\n        }\n    }","id":10022,"modified_method":"public void testRegisterAllocationDeciderDuplicate() {\n        AllocationModule module = new AllocationModule(Settings.EMPTY);\n        try {\n            module.registerAllocationDecider(EnableAllocationDecider.class);\n        } catch (IllegalArgumentException e) {\n            assertEquals(e.getMessage(), \"Can't register the same [allocation_decider] more than once for [\" + EnableAllocationDecider.class.getName() + \"]\");\n        }\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void onModule(SearchModule highlightModule) {\n        highlightModule.registerHighlighter(CustomHighlighter.class);\n    }","id":10023,"modified_method":"public void onModule(SearchModule highlightModule) {\n        highlightModule.registerHighlighter(\"test-custom\", CustomHighlighter.class);\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void onModule(SearchModule searchModule) {\n        searchModule.registerSuggester(CustomSuggester.class);\n    }","id":10024,"modified_method":"public void onModule(SearchModule searchModule) {\n        searchModule.registerSuggester(\"custom\", CustomSuggester.class);\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void add(Map<String, Highlighter> map, Highlighter highlighter) {\n        for (String type : highlighter.names()) {\n            map.put(type, highlighter);\n        }\n    }","id":10025,"modified_method":"private static Map<String, Highlighter> addBuiltIns(Settings settings, Map<String, Highlighter> parsers) {\n        // build in highlighers\n        Map<String, Highlighter> map = new HashMap<>();\n        map.put(FVH,  new FastVectorHighlighter(settings));\n        map.put(FAST_VECTOR_HIGHLIGHTER, map.get(FVH));\n        map.put(PLAIN, new PlainHighlighter());\n        map.put(HIGHLIGHTER, map.get(PLAIN));\n        map.put(POSTINGS, new PostingsHighlighter());\n        map.put(POSTINGS_HIGHLIGHTER, map.get(POSTINGS));\n        map.putAll(parsers);\n        return map;\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public Highlighter get(String type) {\n        return parsers.get(type);\n    }","id":10026,"modified_method":"public Highlighter get(String type) {\n        switch (type) {\n            case FAST_VECTOR_HIGHLIGHTER:\n                deprecationLogger.deprecated(\"highlighter key [{}] is deprecated and will be removed in 3.x use [{}] instead\", FAST_VECTOR_HIGHLIGHTER, FVH);\n                break;\n            case HIGHLIGHTER:\n                deprecationLogger.deprecated(\"highlighter key [{}] is deprecated and will be removed in 3.x use [{}] instead\", HIGHLIGHTER, PLAIN);\n                break;\n            case POSTINGS_HIGHLIGHTER:\n                deprecationLogger.deprecated(\"highlighter key [{}] is deprecated and will be removed in 3.x use [{}] instead\", POSTINGS_HIGHLIGHTER, POSTINGS);\n                break;\n        }\n        return parsers.get(type);\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Inject\n    public Highlighters(Settings settings, Set<Highlighter> parsers) {\n        // build in highlighers\n        Map<String, Highlighter> map = new HashMap<>();\n        add(map, new FastVectorHighlighter(settings));\n        add(map, new PlainHighlighter());\n        add(map, new PostingsHighlighter());\n        for (Highlighter highlighter : parsers) {\n            add(map, highlighter);\n        }\n        this.parsers = Collections.unmodifiableMap(map);\n    }","id":10027,"modified_method":"@Inject\n    public Highlighters(Settings settings, Map<String, Highlighter> parsers) {\n        this(addBuiltIns(settings, parsers));\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Registers the given stream and associate it with the given types.\n     *\n     * @param stream The stream to register\n     */\n    public static synchronized void registerStream(Stream stream) {\n        HashMap<String, Stream> map = new HashMap<>();\n        map.putAll(STREAMS);\n        map.put(stream.getName(), stream);\n        STREAMS = Collections.unmodifiableMap(map);\n    }","id":10028,"modified_method":"/**\n     * Registers the given stream and associate it with the given types.\n     *\n     * @param stream The stream to register\n     */\n    public static synchronized void registerStream(Stream stream) {\n        if (STREAMS.containsKey(stream.getName())) {\n            throw new IllegalArgumentException(\"Can't register stream with name [\" + stream.getName() + \"] more than once\");\n        }\n        HashMap<String, Stream> map = new HashMap<>();\n        map.putAll(STREAMS);\n        map.put(stream.getName(), stream);\n        STREAMS = Collections.unmodifiableMap(map);\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"protected void configureSuggesters() {\n        Multibinder<Suggester> suggesterMultibinder = Multibinder.newSetBinder(binder(), Suggester.class);\n        for (Class<? extends Suggester> clazz : suggesters) {\n            suggesterMultibinder.addBinding().to(clazz);\n        }\n\n        bind(SuggestParseElement.class).asEagerSingleton();\n        bind(SuggestPhase.class).asEagerSingleton();\n        bind(Suggesters.class).asEagerSingleton();\n    }","id":10029,"modified_method":"protected void configureSuggesters() {\n        suggesters.bind(binder());\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"protected void configureHighlighters() {\n        Multibinder<Highlighter> multibinder = Multibinder.newSetBinder(binder(), Highlighter.class);\n        for (Class<? extends Highlighter> highlighter : highlighters) {\n            multibinder.addBinding().to(highlighter);\n        }\n        bind(Highlighters.class).asEagerSingleton();\n    }","id":10030,"modified_method":"protected void configureHighlighters() {\n       highlighters.bind(binder());\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void registerHighlighter(Class<? extends Highlighter> clazz) {\n        highlighters.add(clazz);\n    }","id":10031,"modified_method":"public void registerHighlighter(String key, Class<? extends Highlighter> clazz) {\n        highlighters.registerExtension(key, clazz);\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void registerSuggester(Class<? extends Suggester> suggester) {\n        suggesters.add(suggester);\n    }","id":10032,"modified_method":"public void registerSuggester(String key, Class<? extends Suggester> suggester) {\n        suggesters.registerExtension(key, suggester);\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Registers the given stream and associate it with the given types.\n     *\n     * @param stream The stream to register\n     */\n    public static synchronized void registerStream(Stream stream) {\n        HashMap<String, Stream> map = new HashMap<>();\n        map.putAll(STREAMS);\n        map.put(stream.getName(), stream);\n        STREAMS = Collections.unmodifiableMap(map);\n    }","id":10033,"modified_method":"/**\n     * Registers the given stream and associate it with the given types.\n     *\n     * @param stream The stream to register\n     */\n    public static synchronized void registerStream(Stream stream) {\n        if (STREAMS.containsKey(stream.getName())) {\n            throw new IllegalArgumentException(\"Can't register stream with name [\" + stream.getName() + \"] more than once\");\n        }\n        HashMap<String, Stream> map = new HashMap<>();\n        map.putAll(STREAMS);\n        map.put(stream.getName(), stream);\n        STREAMS = Collections.unmodifiableMap(map);\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Inject\n    public Suggesters(Set<Suggester> suggesters, ScriptService scriptService) {\n        final Map<String, Suggester> map = new HashMap<>();\n        add(map, new PhraseSuggester(scriptService));\n        add(map, new TermSuggester());\n        add(map, new CompletionSuggester());\n        for (Suggester suggester : suggesters) {\n           add(map, suggester);\n        }\n        this.parsers = Collections.unmodifiableMap(map);\n    }","id":10034,"modified_method":"@Inject\n    public Suggesters(Map<String, Suggester> suggesters, ScriptService scriptService) {\n        this(addBuildIns(suggesters, scriptService));\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private void add(Map<String, Suggester> map, Suggester suggester) {\n        for (String type : suggester.names()) {\n            map.put(type, suggester);\n        }\n    }","id":10035,"modified_method":"private static Map<String, Suggester> addBuildIns(Map<String, Suggester> suggesters, ScriptService scriptService) {\n        final Map<String, Suggester> map = new HashMap<>();\n        map.put(\"phrase\", new PhraseSuggester(scriptService));\n        map.put(\"term\", new TermSuggester());\n        map.put(\"completion\", new CompletionSuggester());\n        map.putAll(suggesters);\n        return map;\n    }","commit_id":"74f18d8c16ff4e8aa9505a354abf28c83fc21ad8","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void run() {\n        mapService = getService();\n        mapService.invalidateNearCache(mapName, key);\n    }","id":10036,"modified_method":"public void run() {\n        mapService = getService();\n        if (mapService.getMapContainer(mapName).isNearCacheEnabled()) {\n            mapService.invalidateNearCache(mapName, key);\n        } else {\n            getLogger().warning(\"Cache clear operation has been accepted while near cache is not enabled for \" + mapName + \" map. Possible configuration conflict among nodes.\");\n        }\n    }","commit_id":"9bccf0bebd90c71629460371f59ddf246660925c","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void run() {\n        mapService = getService();\n        mapService.clearNearCache(mapName);\n    }","id":10037,"modified_method":"public void run() {\n        mapService = getService();\n        if(mapService.getMapContainer(mapName).isNearCacheEnabled())  {\n            mapService.clearNearCache(mapName);\n        }\n        else {\n            getLogger().warning(\"Cache clear operation has been accepted while near cache is not enabled for \"+mapName+\" map. Possible configuration conflict among nodes.\");\n        }\n    }","commit_id":"9bccf0bebd90c71629460371f59ddf246660925c","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void run() {\n        mapService = getService();\n        mapService.invalidateNearCache(mapName, mapKeySet.getKeySet());\n    }","id":10038,"modified_method":"public void run() {\n        mapService = getService();\n        if(mapService.getMapContainer(mapName).isNearCacheEnabled())  {\n            mapService.invalidateNearCache(mapName, mapKeySet.getKeySet());\n        }\n        else {\n            getLogger().warning(\"Cache clear operation has been accepted while near cache is not enabled for \"+mapName+\" map. Possible configuration conflict among nodes.\");\n        }\n    }","commit_id":"9bccf0bebd90c71629460371f59ddf246660925c","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"public void run() {\n        mapService = (MapService) getService();\n        mapService.invalidateNearCache(mapName, key);\n    }","id":10039,"modified_method":"public void run() {\n        mapService = (MapService) getService();\n        if (mapService.getMapContainer(mapName).isNearCacheEnabled()) {\n            mapService.invalidateNearCache(mapName, key);\n        } else {\n            getLogger().warning(\"Cache clear operation has been accepted while near cache is not enabled for \" + mapName + \" map. Possible configuration conflict among nodes.\");\n        }\n    }","commit_id":"607ff84c0e3173c790cb43650edf92f16cd6fe66","url":"https://github.com/hazelcast/hazelcast"},{"original_method":"@Test public void testDateHistoFacets() throws Exception {\n        try {\n            client.admin().indices().prepareDelete(\"test\").execute().actionGet();\n        } catch (Exception e) {\n            // ignore\n        }\n        client.admin().indices().prepareCreate(\"test\").execute().actionGet();\n        client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-05T01:01:01\")\n                .field(\"num\", 1)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareFlush().setRefresh(true).execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-05T04:01:01\")\n                .field(\"num\", 2)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareRefresh().execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-06T01:01:01\")\n                .field(\"num\", 3)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareRefresh().execute().actionGet();\n\n\n        SearchResponse searchResponse = client.prepareSearch()\n                .setQuery(matchAllQuery())\n                .addFacet(dateHistogramFacet(\"stats1\").field(\"date\").interval(\"day\"))\n                .addFacet(dateHistogramFacet(\"stats2\").field(\"date\").interval(\"day\").zone(\"-02:00\"))\n                .addFacet(dateHistogramFacet(\"stats3\").field(\"date\").valueField(\"num\").interval(\"day\").zone(\"-02:00\"))\n                .addFacet(dateHistogramFacet(\"stats4\").field(\"date\").valueScript(\"doc['num'].value * 2\").interval(\"day\").zone(\"-02:00\"))\n                .execute().actionGet();\n\n        if (searchResponse.failedShards() > 0) {\n            logger.warn(\"Failed shards:\");\n            for (ShardSearchFailure shardSearchFailure : searchResponse.shardFailures()) {\n                logger.warn(\"-> {}\", shardSearchFailure);\n            }\n        }\n        assertThat(searchResponse.failedShards(), equalTo(0));\n\n        DateHistogramFacet facet = searchResponse.facets().facet(\"stats1\");\n        assertThat(facet.name(), equalTo(\"stats1\"));\n        assertThat(facet.entries().size(), equalTo(2));\n        assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n        assertThat(facet.entries().get(0).count(), equalTo(2l));\n        assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-06\")));\n        assertThat(facet.entries().get(1).count(), equalTo(1l));\n\n        // time zone causes the dates to shift by 2\n        facet = searchResponse.facets().facet(\"stats2\");\n        assertThat(facet.name(), equalTo(\"stats2\"));\n        assertThat(facet.entries().size(), equalTo(2));\n        assertThat(facet.entries().get(0).time(), equalTo(timeInMillis(\"2009-03-04\", DateTimeZone.forOffsetHours(-2))));\n        assertThat(facet.entries().get(0).count(), equalTo(1l));\n        assertThat(facet.entries().get(1).time(), equalTo(timeInMillis(\"2009-03-05\", DateTimeZone.forOffsetHours(-2))));\n        assertThat(facet.entries().get(1).count(), equalTo(2l));\n\n        // time zone causes the dates to shift by 2\n        facet = searchResponse.facets().facet(\"stats3\");\n        assertThat(facet.name(), equalTo(\"stats3\"));\n        assertThat(facet.entries().size(), equalTo(2));\n        assertThat(facet.entries().get(0).time(), equalTo(timeInMillis(\"2009-03-04\", DateTimeZone.forOffsetHours(-2))));\n        assertThat(facet.entries().get(0).count(), equalTo(1l));\n        assertThat(facet.entries().get(0).total(), equalTo(1d));\n        assertThat(facet.entries().get(1).time(), equalTo(timeInMillis(\"2009-03-05\", DateTimeZone.forOffsetHours(-2))));\n        assertThat(facet.entries().get(1).count(), equalTo(2l));\n        assertThat(facet.entries().get(1).total(), equalTo(5d));\n\n        // time zone causes the dates to shift by 2\n        facet = searchResponse.facets().facet(\"stats4\");\n        assertThat(facet.name(), equalTo(\"stats4\"));\n        assertThat(facet.entries().size(), equalTo(2));\n        assertThat(facet.entries().get(0).time(), equalTo(timeInMillis(\"2009-03-04\", DateTimeZone.forOffsetHours(-2))));\n        assertThat(facet.entries().get(0).count(), equalTo(1l));\n        assertThat(facet.entries().get(0).total(), equalTo(2d));\n        assertThat(facet.entries().get(1).time(), equalTo(timeInMillis(\"2009-03-05\", DateTimeZone.forOffsetHours(-2))));\n        assertThat(facet.entries().get(1).count(), equalTo(2l));\n        assertThat(facet.entries().get(1).total(), equalTo(10d));\n    }","id":10040,"modified_method":"@Test public void testDateHistoFacets() throws Exception {\n        try {\n            client.admin().indices().prepareDelete(\"test\").execute().actionGet();\n        } catch (Exception e) {\n            // ignore\n        }\n        client.admin().indices().prepareCreate(\"test\").execute().actionGet();\n        client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-05T01:01:01\")\n                .field(\"num\", 1)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareFlush().setRefresh(true).execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-05T04:01:01\")\n                .field(\"num\", 2)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareRefresh().execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-06T01:01:01\")\n                .field(\"num\", 3)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareRefresh().execute().actionGet();\n\n\n        SearchResponse searchResponse = client.prepareSearch()\n                .setQuery(matchAllQuery())\n                .addFacet(dateHistogramFacet(\"stats1\").field(\"date\").interval(\"day\"))\n                .addFacet(dateHistogramFacet(\"stats2\").field(\"date\").interval(\"day\").zone(\"-02:00\"))\n                .addFacet(dateHistogramFacet(\"stats3\").field(\"date\").valueField(\"num\").interval(\"day\").zone(\"-02:00\"))\n                .addFacet(dateHistogramFacet(\"stats4\").field(\"date\").valueScript(\"doc['num'].value * 2\").interval(\"day\").zone(\"-02:00\"))\n                .addFacet(dateHistogramFacet(\"stats5\").field(\"date\").interval(\"24h\"))\n                .execute().actionGet();\n\n        if (searchResponse.failedShards() > 0) {\n            logger.warn(\"Failed shards:\");\n            for (ShardSearchFailure shardSearchFailure : searchResponse.shardFailures()) {\n                logger.warn(\"-> {}\", shardSearchFailure);\n            }\n        }\n        assertThat(searchResponse.failedShards(), equalTo(0));\n\n        DateHistogramFacet facet = searchResponse.facets().facet(\"stats1\");\n        assertThat(facet.name(), equalTo(\"stats1\"));\n        assertThat(facet.entries().size(), equalTo(2));\n        assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n        assertThat(facet.entries().get(0).count(), equalTo(2l));\n        assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-06\")));\n        assertThat(facet.entries().get(1).count(), equalTo(1l));\n\n        // time zone causes the dates to shift by 2\n        facet = searchResponse.facets().facet(\"stats2\");\n        assertThat(facet.name(), equalTo(\"stats2\"));\n        assertThat(facet.entries().size(), equalTo(2));\n        assertThat(facet.entries().get(0).time(), equalTo(timeInMillis(\"2009-03-04\", DateTimeZone.forOffsetHours(-2))));\n        assertThat(facet.entries().get(0).count(), equalTo(1l));\n        assertThat(facet.entries().get(1).time(), equalTo(timeInMillis(\"2009-03-05\", DateTimeZone.forOffsetHours(-2))));\n        assertThat(facet.entries().get(1).count(), equalTo(2l));\n\n        // time zone causes the dates to shift by 2\n        facet = searchResponse.facets().facet(\"stats3\");\n        assertThat(facet.name(), equalTo(\"stats3\"));\n        assertThat(facet.entries().size(), equalTo(2));\n        assertThat(facet.entries().get(0).time(), equalTo(timeInMillis(\"2009-03-04\", DateTimeZone.forOffsetHours(-2))));\n        assertThat(facet.entries().get(0).count(), equalTo(1l));\n        assertThat(facet.entries().get(0).total(), equalTo(1d));\n        assertThat(facet.entries().get(1).time(), equalTo(timeInMillis(\"2009-03-05\", DateTimeZone.forOffsetHours(-2))));\n        assertThat(facet.entries().get(1).count(), equalTo(2l));\n        assertThat(facet.entries().get(1).total(), equalTo(5d));\n\n        // time zone causes the dates to shift by 2\n        facet = searchResponse.facets().facet(\"stats4\");\n        assertThat(facet.name(), equalTo(\"stats4\"));\n        assertThat(facet.entries().size(), equalTo(2));\n        assertThat(facet.entries().get(0).time(), equalTo(timeInMillis(\"2009-03-04\", DateTimeZone.forOffsetHours(-2))));\n        assertThat(facet.entries().get(0).count(), equalTo(1l));\n        assertThat(facet.entries().get(0).total(), equalTo(2d));\n        assertThat(facet.entries().get(1).time(), equalTo(timeInMillis(\"2009-03-05\", DateTimeZone.forOffsetHours(-2))));\n        assertThat(facet.entries().get(1).count(), equalTo(2l));\n        assertThat(facet.entries().get(1).total(), equalTo(10d));\n\n        facet = searchResponse.facets().facet(\"stats5\");\n        assertThat(facet.name(), equalTo(\"stats5\"));\n        assertThat(facet.entries().size(), equalTo(2));\n        assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n        assertThat(facet.entries().get(0).count(), equalTo(2l));\n        assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-06\")));\n        assertThat(facet.entries().get(1).count(), equalTo(1l));\n    }","commit_id":"bb1668c2b709f56e3c5436f3eb149009f3782627","url":"https://github.com/elastic/elasticsearch"},{"original_method":"/**\n     * Sets the time zone to use when bucketing the values. Can either be in the form of \"-10:00\" or\n     * one of the values listed here: http://joda-time.sourceforge.net/timezones.html.\n     */\n    public DateHistogramFacetBuilder zone(String zone) {\n        this.zone = zone;\n        return this;\n    }","id":10041,"modified_method":"/**\n     * Sets the pre time zone to use when bucketing the values. This timezone will be applied before\n     * rounding off the result.\n     * <p/>\n     * Can either be in the form of \"-10:00\" or\n     * one of the values listed here: http://joda-time.sourceforge.net/timezones.html.\n     */\n    public DateHistogramFacetBuilder preZone(String preZone) {\n        this.preZone = preZone;\n        return this;\n    }","commit_id":"0bf61ab6c8f6c9c2057304b464caece315e4e419","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n        if (keyFieldName == null) {\n            throw new SearchSourceBuilderException(\"field must be set on date histogram facet for facet [\" + name + \"]\");\n        }\n        if (interval == null) {\n            throw new SearchSourceBuilderException(\"interval must be set on date histogram facet for facet [\" + name + \"]\");\n        }\n        builder.startObject(name);\n\n        builder.startObject(DateHistogramFacet.TYPE);\n        if (valueFieldName != null) {\n            builder.field(\"key_field\", keyFieldName);\n            builder.field(\"value_field\", valueFieldName);\n        } else {\n            builder.field(\"field\", keyFieldName);\n        }\n        if (valueScript != null) {\n            builder.field(\"value_script\", valueScript);\n            if (lang != null) {\n                builder.field(\"lang\", lang);\n            }\n            if (this.params != null) {\n                builder.field(\"params\", this.params);\n            }\n        }\n        builder.field(\"interval\", interval);\n        if (zone != null) {\n            builder.field(\"time_zone\", zone);\n        }\n        if (comparatorType != null) {\n            builder.field(\"comparator\", comparatorType.description());\n        }\n        builder.endObject();\n\n        addFilterFacetAndGlobal(builder, params);\n\n        builder.endObject();\n        return builder;\n    }","id":10042,"modified_method":"@Override\n    public XContentBuilder toXContent(XContentBuilder builder, Params params) throws IOException {\n        if (keyFieldName == null) {\n            throw new SearchSourceBuilderException(\"field must be set on date histogram facet for facet [\" + name + \"]\");\n        }\n        if (interval == null) {\n            throw new SearchSourceBuilderException(\"interval must be set on date histogram facet for facet [\" + name + \"]\");\n        }\n        builder.startObject(name);\n\n        builder.startObject(DateHistogramFacet.TYPE);\n        if (valueFieldName != null) {\n            builder.field(\"key_field\", keyFieldName);\n            builder.field(\"value_field\", valueFieldName);\n        } else {\n            builder.field(\"field\", keyFieldName);\n        }\n        if (valueScript != null) {\n            builder.field(\"value_script\", valueScript);\n            if (lang != null) {\n                builder.field(\"lang\", lang);\n            }\n            if (this.params != null) {\n                builder.field(\"params\", this.params);\n            }\n        }\n        builder.field(\"interval\", interval);\n        if (preZone != null) {\n            builder.field(\"pre_zone\", preZone);\n        }\n        if (postZone != null) {\n            builder.field(\"post_zone\", postZone);\n        }\n        if (preOffset != 0) {\n            builder.field(\"pre_offset\", preOffset);\n        }\n        if (postOffset != 0) {\n            builder.field(\"post_offset\", postOffset);\n        }\n        if (factor != 1.0f) {\n            builder.field(\"factor\", factor);\n        }\n        if (comparatorType != null) {\n            builder.field(\"comparator\", comparatorType.description());\n        }\n        builder.endObject();\n\n        addFilterFacetAndGlobal(builder, params);\n\n        builder.endObject();\n        return builder;\n    }","commit_id":"0bf61ab6c8f6c9c2057304b464caece315e4e419","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testDateHistoFacets() throws Exception {\n        try {\n            client.admin().indices().prepareDelete(\"test\").execute().actionGet();\n        } catch (Exception e) {\n            // ignore\n        }\n        client.admin().indices().prepareCreate(\"test\").execute().actionGet();\n        client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-05T01:01:01\")\n                .field(\"num\", 1)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareFlush().setRefresh(true).execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-05T04:01:01\")\n                .field(\"num\", 2)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareRefresh().execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-06T01:01:01\")\n                .field(\"num\", 3)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareRefresh().execute().actionGet();\n\n\n        for (int i = 0; i < numberOfRuns(); i++) {\n            SearchResponse searchResponse = client.prepareSearch()\n                    .setQuery(matchAllQuery())\n                    .addFacet(dateHistogramFacet(\"stats1\").field(\"date\").interval(\"day\"))\n                    .addFacet(dateHistogramFacet(\"stats2\").field(\"date\").interval(\"day\").zone(\"-02:00\"))\n                    .addFacet(dateHistogramFacet(\"stats3\").field(\"date\").valueField(\"num\").interval(\"day\").zone(\"-02:00\"))\n                    .addFacet(dateHistogramFacet(\"stats4\").field(\"date\").valueScript(\"doc['num'].value * 2\").interval(\"day\").zone(\"-02:00\"))\n                    .addFacet(dateHistogramFacet(\"stats5\").field(\"date\").interval(\"24h\"))\n                    .execute().actionGet();\n\n            if (searchResponse.failedShards() > 0) {\n                logger.warn(\"Failed shards:\");\n                for (ShardSearchFailure shardSearchFailure : searchResponse.shardFailures()) {\n                    logger.warn(\"-> {}\", shardSearchFailure);\n                }\n            }\n            assertThat(searchResponse.failedShards(), equalTo(0));\n\n            DateHistogramFacet facet = searchResponse.facets().facet(\"stats1\");\n            assertThat(facet.name(), equalTo(\"stats1\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(0).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-06\")));\n            assertThat(facet.entries().get(1).count(), equalTo(1l));\n\n            // time zone causes the dates to shift by 2\n            facet = searchResponse.facets().facet(\"stats2\");\n            assertThat(facet.name(), equalTo(\"stats2\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-04\")));\n            assertThat(facet.entries().get(0).count(), equalTo(1l));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(1).count(), equalTo(2l));\n\n            // time zone causes the dates to shift by 2\n            facet = searchResponse.facets().facet(\"stats3\");\n            assertThat(facet.name(), equalTo(\"stats3\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-04\")));\n            assertThat(facet.entries().get(0).count(), equalTo(1l));\n            assertThat(facet.entries().get(0).total(), equalTo(1d));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(1).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).total(), equalTo(5d));\n\n            // time zone causes the dates to shift by 2\n            facet = searchResponse.facets().facet(\"stats4\");\n            assertThat(facet.name(), equalTo(\"stats4\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-04\")));\n            assertThat(facet.entries().get(0).count(), equalTo(1l));\n            assertThat(facet.entries().get(0).total(), equalTo(2d));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(1).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).total(), equalTo(10d));\n\n            facet = searchResponse.facets().facet(\"stats5\");\n            assertThat(facet.name(), equalTo(\"stats5\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(0).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-06\")));\n            assertThat(facet.entries().get(1).count(), equalTo(1l));\n        }\n    }","id":10043,"modified_method":"@Test\n    public void testDateHistoFacets() throws Exception {\n        try {\n            client.admin().indices().prepareDelete(\"test\").execute().actionGet();\n        } catch (Exception e) {\n            // ignore\n        }\n        client.admin().indices().prepareCreate(\"test\").execute().actionGet();\n        client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-05T01:01:01\")\n                .field(\"num\", 1)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareFlush().setRefresh(true).execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-05T04:01:01\")\n                .field(\"num\", 2)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareRefresh().execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-06T01:01:01\")\n                .field(\"num\", 3)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareRefresh().execute().actionGet();\n\n\n        for (int i = 0; i < numberOfRuns(); i++) {\n            SearchResponse searchResponse = client.prepareSearch()\n                    .setQuery(matchAllQuery())\n                    .addFacet(dateHistogramFacet(\"stats1\").field(\"date\").interval(\"day\"))\n                    .addFacet(dateHistogramFacet(\"stats2\").field(\"date\").interval(\"day\").preZone(\"-02:00\"))\n                    .addFacet(dateHistogramFacet(\"stats3\").field(\"date\").valueField(\"num\").interval(\"day\").preZone(\"-02:00\"))\n                    .addFacet(dateHistogramFacet(\"stats4\").field(\"date\").valueScript(\"doc['num'].value * 2\").interval(\"day\").preZone(\"-02:00\"))\n                    .addFacet(dateHistogramFacet(\"stats5\").field(\"date\").interval(\"24h\"))\n                    .addFacet(dateHistogramFacet(\"stats6\").field(\"date\").valueField(\"num\").interval(\"day\").preZone(\"-02:00\").postZone(\"-02:00\"))\n                    .execute().actionGet();\n\n            if (searchResponse.failedShards() > 0) {\n                logger.warn(\"Failed shards:\");\n                for (ShardSearchFailure shardSearchFailure : searchResponse.shardFailures()) {\n                    logger.warn(\"-> {}\", shardSearchFailure);\n                }\n            }\n            assertThat(searchResponse.failedShards(), equalTo(0));\n\n            DateHistogramFacet facet = searchResponse.facets().facet(\"stats1\");\n            assertThat(facet.name(), equalTo(\"stats1\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(0).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-06\")));\n            assertThat(facet.entries().get(1).count(), equalTo(1l));\n\n            // time zone causes the dates to shift by 2\n            facet = searchResponse.facets().facet(\"stats2\");\n            assertThat(facet.name(), equalTo(\"stats2\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-04\")));\n            assertThat(facet.entries().get(0).count(), equalTo(1l));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(1).count(), equalTo(2l));\n\n            // time zone causes the dates to shift by 2\n            facet = searchResponse.facets().facet(\"stats3\");\n            assertThat(facet.name(), equalTo(\"stats3\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-04\")));\n            assertThat(facet.entries().get(0).count(), equalTo(1l));\n            assertThat(facet.entries().get(0).total(), equalTo(1d));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(1).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).total(), equalTo(5d));\n\n            // time zone causes the dates to shift by 2\n            facet = searchResponse.facets().facet(\"stats4\");\n            assertThat(facet.name(), equalTo(\"stats4\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-04\")));\n            assertThat(facet.entries().get(0).count(), equalTo(1l));\n            assertThat(facet.entries().get(0).total(), equalTo(2d));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(1).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).total(), equalTo(10d));\n\n            facet = searchResponse.facets().facet(\"stats5\");\n            assertThat(facet.name(), equalTo(\"stats5\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(0).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-06\")));\n            assertThat(facet.entries().get(1).count(), equalTo(1l));\n\n            facet = searchResponse.facets().facet(\"stats6\");\n            assertThat(facet.name(), equalTo(\"stats6\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-04\") - TimeValue.timeValueHours(2).millis()));\n            assertThat(facet.entries().get(0).count(), equalTo(1l));\n            assertThat(facet.entries().get(0).total(), equalTo(1d));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-05\") - TimeValue.timeValueHours(2).millis()));\n            assertThat(facet.entries().get(1).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).total(), equalTo(5d));\n        }\n    }","commit_id":"0bf61ab6c8f6c9c2057304b464caece315e4e419","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Inject\n    public DateHistogramFacetProcessor(Settings settings) {\n        super(settings);\n        InternalDateHistogramFacet.registerStreams();\n\n        dateFieldParsers = MapBuilder.<String, DateFieldParser>newMapBuilder()\n                .put(\"year\", new DateFieldParser.YearOfCentury())\n                .put(\"1y\", new DateFieldParser.YearOfCentury())\n                .put(\"month\", new DateFieldParser.MonthOfYear())\n                .put(\"1m\", new DateFieldParser.MonthOfYear())\n                .put(\"week\", new DateFieldParser.WeekOfWeekyear())\n                .put(\"1w\", new DateFieldParser.WeekOfWeekyear())\n                .put(\"day\", new DateFieldParser.DayOfMonth())\n                .put(\"1d\", new DateFieldParser.DayOfMonth())\n                .put(\"hour\", new DateFieldParser.HourOfDay())\n                .put(\"1h\", new DateFieldParser.HourOfDay())\n                .put(\"minute\", new DateFieldParser.MinuteOfHour())\n                .put(\"1m\", new DateFieldParser.MinuteOfHour())\n                .put(\"second\", new DateFieldParser.SecondOfMinute())\n                .put(\"1s\", new DateFieldParser.SecondOfMinute())\n                .immutableMap();\n    }","id":10044,"modified_method":"@Inject\n    public DateHistogramFacetProcessor(Settings settings) {\n        super(settings);\n        InternalDateHistogramFacet.registerStreams();\n\n        dateFieldParsers = MapBuilder.<String, DateFieldParser>newMapBuilder()\n                .put(\"year\", new DateFieldParser.YearOfCentury())\n                .put(\"1y\", new DateFieldParser.YearOfCentury())\n                .put(\"quarter\", new DateFieldParser.Quarter())\n                .put(\"month\", new DateFieldParser.MonthOfYear())\n                .put(\"1m\", new DateFieldParser.MonthOfYear())\n                .put(\"week\", new DateFieldParser.WeekOfWeekyear())\n                .put(\"1w\", new DateFieldParser.WeekOfWeekyear())\n                .put(\"day\", new DateFieldParser.DayOfMonth())\n                .put(\"1d\", new DateFieldParser.DayOfMonth())\n                .put(\"hour\", new DateFieldParser.HourOfDay())\n                .put(\"1h\", new DateFieldParser.HourOfDay())\n                .put(\"minute\", new DateFieldParser.MinuteOfHour())\n                .put(\"1m\", new DateFieldParser.MinuteOfHour())\n                .put(\"second\", new DateFieldParser.SecondOfMinute())\n                .put(\"1s\", new DateFieldParser.SecondOfMinute())\n                .immutableMap();\n    }","commit_id":"a4fb33dbc374e2c66a507857f5a016f4d9d96b77","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testDateHistoFacets() throws Exception {\n        try {\n            client.admin().indices().prepareDelete(\"test\").execute().actionGet();\n        } catch (Exception e) {\n            // ignore\n        }\n        client.admin().indices().prepareCreate(\"test\").execute().actionGet();\n        client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-05T01:01:01\")\n                .field(\"num\", 1)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareFlush().setRefresh(true).execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-05T04:01:01\")\n                .field(\"num\", 2)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareRefresh().execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-06T01:01:01\")\n                .field(\"num\", 3)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareRefresh().execute().actionGet();\n\n\n        for (int i = 0; i < numberOfRuns(); i++) {\n            SearchResponse searchResponse = client.prepareSearch()\n                    .setQuery(matchAllQuery())\n                    .addFacet(dateHistogramFacet(\"stats1\").field(\"date\").interval(\"day\"))\n                    .addFacet(dateHistogramFacet(\"stats2\").field(\"date\").interval(\"day\").preZone(\"-02:00\"))\n                    .addFacet(dateHistogramFacet(\"stats3\").field(\"date\").valueField(\"num\").interval(\"day\").preZone(\"-02:00\"))\n                    .addFacet(dateHistogramFacet(\"stats4\").field(\"date\").valueScript(\"doc['num'].value * 2\").interval(\"day\").preZone(\"-02:00\"))\n                    .addFacet(dateHistogramFacet(\"stats5\").field(\"date\").interval(\"24h\"))\n                    .addFacet(dateHistogramFacet(\"stats6\").field(\"date\").valueField(\"num\").interval(\"day\").preZone(\"-02:00\").postZone(\"-02:00\"))\n                    .execute().actionGet();\n\n            if (searchResponse.failedShards() > 0) {\n                logger.warn(\"Failed shards:\");\n                for (ShardSearchFailure shardSearchFailure : searchResponse.shardFailures()) {\n                    logger.warn(\"-> {}\", shardSearchFailure);\n                }\n            }\n            assertThat(searchResponse.failedShards(), equalTo(0));\n\n            DateHistogramFacet facet = searchResponse.facets().facet(\"stats1\");\n            assertThat(facet.name(), equalTo(\"stats1\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(0).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-06\")));\n            assertThat(facet.entries().get(1).count(), equalTo(1l));\n\n            // time zone causes the dates to shift by 2\n            facet = searchResponse.facets().facet(\"stats2\");\n            assertThat(facet.name(), equalTo(\"stats2\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-04\")));\n            assertThat(facet.entries().get(0).count(), equalTo(1l));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(1).count(), equalTo(2l));\n\n            // time zone causes the dates to shift by 2\n            facet = searchResponse.facets().facet(\"stats3\");\n            assertThat(facet.name(), equalTo(\"stats3\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-04\")));\n            assertThat(facet.entries().get(0).count(), equalTo(1l));\n            assertThat(facet.entries().get(0).total(), equalTo(1d));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(1).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).total(), equalTo(5d));\n\n            // time zone causes the dates to shift by 2\n            facet = searchResponse.facets().facet(\"stats4\");\n            assertThat(facet.name(), equalTo(\"stats4\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-04\")));\n            assertThat(facet.entries().get(0).count(), equalTo(1l));\n            assertThat(facet.entries().get(0).total(), equalTo(2d));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(1).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).total(), equalTo(10d));\n\n            facet = searchResponse.facets().facet(\"stats5\");\n            assertThat(facet.name(), equalTo(\"stats5\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(0).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-06\")));\n            assertThat(facet.entries().get(1).count(), equalTo(1l));\n\n            facet = searchResponse.facets().facet(\"stats6\");\n            assertThat(facet.name(), equalTo(\"stats6\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-04\") - TimeValue.timeValueHours(2).millis()));\n            assertThat(facet.entries().get(0).count(), equalTo(1l));\n            assertThat(facet.entries().get(0).total(), equalTo(1d));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-05\") - TimeValue.timeValueHours(2).millis()));\n            assertThat(facet.entries().get(1).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).total(), equalTo(5d));\n        }\n    }","id":10045,"modified_method":"@Test\n    public void testDateHistoFacets() throws Exception {\n        try {\n            client.admin().indices().prepareDelete(\"test\").execute().actionGet();\n        } catch (Exception e) {\n            // ignore\n        }\n        client.admin().indices().prepareCreate(\"test\").execute().actionGet();\n        client.admin().cluster().prepareHealth().setWaitForGreenStatus().execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-05T01:01:01\")\n                .field(\"num\", 1)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareFlush().setRefresh(true).execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-05T04:01:01\")\n                .field(\"num\", 2)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareRefresh().execute().actionGet();\n\n        client.prepareIndex(\"test\", \"type1\").setSource(jsonBuilder().startObject()\n                .field(\"date\", \"2009-03-06T01:01:01\")\n                .field(\"num\", 3)\n                .endObject()).execute().actionGet();\n        client.admin().indices().prepareRefresh().execute().actionGet();\n\n\n        for (int i = 0; i < numberOfRuns(); i++) {\n            SearchResponse searchResponse = client.prepareSearch()\n                    .setQuery(matchAllQuery())\n                    .addFacet(dateHistogramFacet(\"stats1\").field(\"date\").interval(\"day\"))\n                    .addFacet(dateHistogramFacet(\"stats2\").field(\"date\").interval(\"day\").preZone(\"-02:00\"))\n                    .addFacet(dateHistogramFacet(\"stats3\").field(\"date\").valueField(\"num\").interval(\"day\").preZone(\"-02:00\"))\n                    .addFacet(dateHistogramFacet(\"stats4\").field(\"date\").valueScript(\"doc['num'].value * 2\").interval(\"day\").preZone(\"-02:00\"))\n                    .addFacet(dateHistogramFacet(\"stats5\").field(\"date\").interval(\"24h\"))\n                    .addFacet(dateHistogramFacet(\"stats6\").field(\"date\").valueField(\"num\").interval(\"day\").preZone(\"-02:00\").postZone(\"-02:00\"))\n                    .addFacet(dateHistogramFacet(\"stats7\").field(\"date\").interval(\"quarter\"))\n                    .execute().actionGet();\n\n            if (searchResponse.failedShards() > 0) {\n                logger.warn(\"Failed shards:\");\n                for (ShardSearchFailure shardSearchFailure : searchResponse.shardFailures()) {\n                    logger.warn(\"-> {}\", shardSearchFailure);\n                }\n            }\n            assertThat(searchResponse.failedShards(), equalTo(0));\n\n            DateHistogramFacet facet = searchResponse.facets().facet(\"stats1\");\n            assertThat(facet.name(), equalTo(\"stats1\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(0).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-06\")));\n            assertThat(facet.entries().get(1).count(), equalTo(1l));\n\n            // time zone causes the dates to shift by 2\n            facet = searchResponse.facets().facet(\"stats2\");\n            assertThat(facet.name(), equalTo(\"stats2\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-04\")));\n            assertThat(facet.entries().get(0).count(), equalTo(1l));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(1).count(), equalTo(2l));\n\n            // time zone causes the dates to shift by 2\n            facet = searchResponse.facets().facet(\"stats3\");\n            assertThat(facet.name(), equalTo(\"stats3\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-04\")));\n            assertThat(facet.entries().get(0).count(), equalTo(1l));\n            assertThat(facet.entries().get(0).total(), equalTo(1d));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(1).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).total(), equalTo(5d));\n\n            // time zone causes the dates to shift by 2\n            facet = searchResponse.facets().facet(\"stats4\");\n            assertThat(facet.name(), equalTo(\"stats4\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-04\")));\n            assertThat(facet.entries().get(0).count(), equalTo(1l));\n            assertThat(facet.entries().get(0).total(), equalTo(2d));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(1).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).total(), equalTo(10d));\n\n            facet = searchResponse.facets().facet(\"stats5\");\n            assertThat(facet.name(), equalTo(\"stats5\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-05\")));\n            assertThat(facet.entries().get(0).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-06\")));\n            assertThat(facet.entries().get(1).count(), equalTo(1l));\n\n            facet = searchResponse.facets().facet(\"stats6\");\n            assertThat(facet.name(), equalTo(\"stats6\"));\n            assertThat(facet.entries().size(), equalTo(2));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-03-04\") - TimeValue.timeValueHours(2).millis()));\n            assertThat(facet.entries().get(0).count(), equalTo(1l));\n            assertThat(facet.entries().get(0).total(), equalTo(1d));\n            assertThat(facet.entries().get(1).time(), equalTo(utcTimeInMillis(\"2009-03-05\") - TimeValue.timeValueHours(2).millis()));\n            assertThat(facet.entries().get(1).count(), equalTo(2l));\n            assertThat(facet.entries().get(1).total(), equalTo(5d));\n\n            facet = searchResponse.facets().facet(\"stats7\");\n            assertThat(facet.name(), equalTo(\"stats7\"));\n            assertThat(facet.entries().size(), equalTo(1));\n            assertThat(facet.entries().get(0).time(), equalTo(utcTimeInMillis(\"2009-01-01\")));\n        }\n    }","commit_id":"a4fb33dbc374e2c66a507857f5a016f4d9d96b77","url":"https://github.com/elastic/elasticsearch"},{"original_method":"NotificationView(Dashlet dashlet) {\n        super(dashlet, 8, new String[] { \"Node\", \"Service\", \"Sent Time\", \"Responder\", \"Response Time\" });\n    }","id":10046,"modified_method":"NotificationView(Dashlet dashlet) {\n        super(dashlet, 8, new String[] { \"Node\", \"Service\", \"Message\", \"Sent Time\", \"Responder\", \"Response Time\" });\n    }","commit_id":"adcd36bded36d766a6270e33e68396fd5ee062ca","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void setRow(FlexTable table, int row, int elementIndex) {\n\t\tNotification notif = m_notifications[elementIndex];\n        table.setText(row, 0, notif.getNodeLabel());\n        Label label = new Label(notif.getServiceName());\n        label.setTitle(notif.getTextMessage());\n        table.setWidget(row, 1, label);\n        table.setText(row, 2, \"\"+notif.getSentTime());\n        table.setText(row, 3, notif.getResponder());\n        table.setText(row, 4, (notif.getRespondTime() != null) ? notif.getRespondTime().toString() : \"\");\n        table.getRowFormatter().setStyleName(row, notif.getSeverity());\n    }","id":10047,"modified_method":"protected void setRow(FlexTable table, int row, int elementIndex) {\n\t\tNotification notif = m_notifications[elementIndex];\n        table.setText(row, 0, notif.getNodeLabel());\n        table.setText(row, 1, notif.getServiceName());\n        table.setText(row, 2, notif.getTextMessage());\n        table.setText(row, 3, \"\"+notif.getSentTime());\n        table.setText(row, 4, notif.getResponder());\n        table.setText(row, 5, (notif.getRespondTime() != null) ? notif.getRespondTime().toString() : \"\");\n        table.getRowFormatter().setStyleName(row, notif.getSeverity());\n    }","commit_id":"adcd36bded36d766a6270e33e68396fd5ee062ca","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void setRow(FlexTable table, int row, int elementIndex) {\n\t\tNotification notif = m_notifications[elementIndex];\n        table.setText(row, 0, notif.getNodeLabel());\n        Label label = new Label(notif.getServiceName());\n        label.setTitle(notif.getTextMessage());\n        table.setWidget(row, 1, label);\n        table.setText(row, 2, \"\"+notif.getSentTime());\n        table.setText(row, 3, notif.getResponder());\n        table.setText(row, 4, (notif.getRespondTime() != null) ? notif.getRespondTime().toString() : \"\");\n        table.getRowFormatter().setStyleName(row, notif.getSeverity());\n    }","id":10048,"modified_method":"protected void setRow(FlexTable table, int row, int elementIndex) {\n\t\tNotification notif = m_notifications[elementIndex];\n        table.setText(row, 0, notif.getNodeLabel());\n        table.setText(row, 1, notif.getServiceName());\n        table.setText(row, 2, notif.getTextMessage());\n        table.setText(row, 3, \"\"+notif.getSentTime());\n        table.setText(row, 4, notif.getResponder());\n        table.setText(row, 5, (notif.getRespondTime() != null) ? notif.getRespondTime().toString() : \"\");\n        table.getRowFormatter().setStyleName(row, notif.getSeverity());\n    }","commit_id":"3f3d478d80fe88ea80f1205cad46e6d42246cc65","url":"https://github.com/OpenNMS/opennms"},{"original_method":"NotificationView(Dashlet dashlet) {\n        super(dashlet, 8, new String[] { \"Node\", \"Service\", \"Sent Time\", \"Responder\", \"Response Time\" });\n    }","id":10049,"modified_method":"NotificationView(Dashlet dashlet) {\n        super(dashlet, 8, new String[] { \"Node\", \"Service\", \"Message\", \"Sent Time\", \"Responder\", \"Response Time\" });\n    }","commit_id":"3f3d478d80fe88ea80f1205cad46e6d42246cc65","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected void setRow(FlexTable table, int row, int elementIndex) {\n\t\tNotification notif = m_notifications[elementIndex];\n        table.setText(row, 0, notif.getNodeLabel());\n        Label label = new Label(notif.getServiceName());\n        label.setTitle(notif.getTextMessage());\n        table.setWidget(row, 1, label);\n        table.setText(row, 2, \"\"+notif.getSentTime());\n        table.setText(row, 3, notif.getResponder());\n        table.setText(row, 4, (notif.getRespondTime() != null) ? notif.getRespondTime().toString() : \"\");\n        table.getRowFormatter().setStyleName(row, notif.getSeverity());\n    }","id":10050,"modified_method":"protected void setRow(FlexTable table, int row, int elementIndex) {\n\t\tNotification notif = m_notifications[elementIndex];\n        table.setText(row, 0, notif.getNodeLabel());\n        table.setText(row, 1, notif.getServiceName());\n        table.setText(row, 2, notif.getTextMessage());\n        table.setText(row, 3, \"\"+notif.getSentTime());\n        table.setText(row, 4, notif.getResponder());\n        table.setText(row, 5, (notif.getRespondTime() != null) ? notif.getRespondTime().toString() : \"\");\n        table.getRowFormatter().setStyleName(row, notif.getSeverity());\n    }","commit_id":"f1ee7f8832906f74813b4fbe6439334ba811bf84","url":"https://github.com/OpenNMS/opennms"},{"original_method":"NotificationView(Dashlet dashlet) {\n        super(dashlet, 8, new String[] { \"Node\", \"Service\", \"Sent Time\", \"Responder\", \"Response Time\" });\n    }","id":10051,"modified_method":"NotificationView(Dashlet dashlet) {\n        super(dashlet, 8, new String[] { \"Node\", \"Service\", \"Message\", \"Sent Time\", \"Responder\", \"Response Time\" });\n    }","commit_id":"f1ee7f8832906f74813b4fbe6439334ba811bf84","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected Criteria buildCriteria(Session session, DetachedCriteria detachedCriteria, Closure additionalCriteria, Class clazz, Object[] arguments, String operator, List expressions) {\n        Criteria crit = getCriteria(datastore, application, session, detachedCriteria, additionalCriteria, clazz);\n        if (arguments.length > 0) {\n            if (arguments[0] instanceof Map<?, ?>) {\n                Map<?, ?> argMap = (Map<?, ?>)arguments[0];\n                GrailsHibernateUtil.populateArgumentsForCriteria(application, clazz, crit, argMap);\n                if (!argMap.containsKey(GrailsHibernateUtil.ARGUMENT_FETCH)) {\n                    crit.setMaxResults(1);\n                }\n            }\n            else {\n                crit.setMaxResults(1);\n            }\n        }\n        else {\n            crit.setMaxResults(1);\n        }\n\n        if (operator.equals(OPERATOR_OR)) {\n            if (firstExpressionIsRequiredBoolean()) {\n                GrailsMethodExpression expression = (GrailsMethodExpression) expressions.remove(0);\n                crit.add(expression.getCriterion());\n            }\n            Disjunction dis = Restrictions.disjunction();\n            for (Object expression : expressions) {\n                GrailsMethodExpression current = (GrailsMethodExpression) expression;\n                dis.add(current.getCriterion());\n            }\n            crit.add(dis);\n        }\n        else {\n            for (Object expression : expressions) {\n                GrailsMethodExpression current = (GrailsMethodExpression) expression;\n                crit.add(current.getCriterion());\n            }\n        }\n        return crit;\n    }","id":10052,"modified_method":"protected Criteria buildCriteria(Session session, DetachedCriteria detachedCriteria, Closure additionalCriteria, Class clazz, Object[] arguments, String operator, List expressions) {\n        Criteria crit = getCriteria(datastore, application, session, detachedCriteria, additionalCriteria, clazz);\n\n        boolean useLimit = establishWhetherToUseLimit(clazz);\n\n        if (arguments.length > 0) {\n            if (arguments[0] instanceof Map<?, ?>) {\n                Map<?, ?> argMap = (Map<?, ?>)arguments[0];\n                GrailsHibernateUtil.populateArgumentsForCriteria(application, clazz, crit, argMap);\n                if (!argMap.containsKey(GrailsHibernateUtil.ARGUMENT_FETCH)) {\n                    if(useLimit)\n                        crit.setMaxResults(1);\n                }\n            }\n            else {\n                if(useLimit)\n                    crit.setMaxResults(1);\n            }\n        }\n        else {\n            if(useLimit)\n                crit.setMaxResults(1);\n        }\n\n        if (operator.equals(OPERATOR_OR)) {\n            if (firstExpressionIsRequiredBoolean()) {\n                GrailsMethodExpression expression = (GrailsMethodExpression) expressions.remove(0);\n                crit.add(expression.getCriterion());\n            }\n            Disjunction dis = Restrictions.disjunction();\n            for (Object expression : expressions) {\n                GrailsMethodExpression current = (GrailsMethodExpression) expression;\n                dis.add(current.getCriterion());\n            }\n            crit.add(dis);\n        }\n        else {\n            for (Object expression : expressions) {\n                GrailsMethodExpression current = (GrailsMethodExpression) expression;\n                crit.add(current.getCriterion());\n            }\n        }\n        return crit;\n    }","commit_id":"27f3549db8aa352b65853aff7ab44aa296d74f38","url":"https://github.com/grails/grails-core"},{"original_method":"@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected Object doInvokeInternalWithExpressions(final Class clazz, String methodName, final Object[] arguments, final List expressions, String operatorInUse, final DetachedCriteria detachedCriteria, final Closure additionalCriteria) {\n        final String operator = OPERATOR_OR.equals(operatorInUse) ? OPERATOR_OR : OPERATOR_AND;\n        return getHibernateTemplate().execute(new HibernateCallback<Object>() {\n            public Object doInHibernate(Session session) throws HibernateException, SQLException {\n\n                Criteria crit = buildCriteria(session, detachedCriteria, additionalCriteria, clazz, arguments, operator, expressions);\n\n                return getResult(crit);\n            }\n        });\n    }","id":10053,"modified_method":"@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected Object doInvokeInternalWithExpressions(final Class clazz, String methodName, final Object[] arguments, final List expressions, String operatorInUse, final DetachedCriteria detachedCriteria, final Closure additionalCriteria) {\n        final String operator = OPERATOR_OR.equals(operatorInUse) ? OPERATOR_OR : OPERATOR_AND;\n        return getHibernateTemplate().execute(new HibernateCallback<Object>() {\n            public Object doInHibernate(Session session) throws HibernateException, SQLException {\n                Criteria crit = buildCriteria(session, detachedCriteria, additionalCriteria, clazz, arguments, operator, expressions);\n\n                boolean useLimit = establishWhetherToUseLimit(clazz);\n                return getResult(crit, useLimit);\n            }\n        });\n    }","commit_id":"27f3549db8aa352b65853aff7ab44aa296d74f38","url":"https://github.com/grails/grails-core"},{"original_method":"protected Object getResult(Criteria crit) {\n        final List<?> list = crit.list();\n        if (!list.isEmpty()) {\n            return GrailsHibernateUtil.unwrapIfProxy(list.get(0));\n        }\n        return null;\n    }","id":10054,"modified_method":"protected Object getResult(Criteria crit) {\n        CriteriaImpl impl = (CriteriaImpl) crit;\n        String entityOrClassName = impl.getEntityOrClassName();\n        GrailsClass domainClass = application.getArtefact(DomainClassArtefactHandler.TYPE, entityOrClassName);\n        boolean useLimit = establishWhetherToUseLimit(domainClass.getClazz());\n\n        return getResult(crit, useLimit);\n    }","commit_id":"27f3549db8aa352b65853aff7ab44aa296d74f38","url":"https://github.com/grails/grails-core"},{"original_method":"@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected Object doInvokeInternalWithExpressions(final Class clazz, String methodName, final Object[] arguments, final List expressions, String operatorInUse, final DetachedCriteria detachedCriteria, final Closure additionalCriteria) {\n        final String operator = OPERATOR_OR.equals(operatorInUse) ? OPERATOR_OR : OPERATOR_AND;\n        return getHibernateTemplate().execute(new HibernateCallback<Object>() {\n            public Object doInHibernate(Session session) throws HibernateException, SQLException {\n\n                Criteria crit = buildCriteria(session, detachedCriteria, additionalCriteria, clazz, arguments, operator, expressions);\n\n                return getResult(crit);\n            }\n        });\n    }","id":10055,"modified_method":"@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected Object doInvokeInternalWithExpressions(final Class clazz, String methodName, final Object[] arguments, final List expressions, String operatorInUse, final DetachedCriteria detachedCriteria, final Closure additionalCriteria) {\n        final String operator = OPERATOR_OR.equals(operatorInUse) ? OPERATOR_OR : OPERATOR_AND;\n        return getHibernateTemplate().execute(new HibernateCallback<Object>() {\n            public Object doInHibernate(Session session) throws HibernateException, SQLException {\n                Criteria crit = buildCriteria(session, detachedCriteria, additionalCriteria, clazz, arguments, operator, expressions);\n\n                boolean useLimit = establishWhetherToUseLimit(clazz);\n                return getResult(crit, useLimit);\n            }\n        });\n    }","commit_id":"90334039faa74f4e74072133c4231c9c8593682f","url":"https://github.com/grails/grails-core"},{"original_method":"protected Object getResult(Criteria crit) {\n        final List<?> list = crit.list();\n        if (!list.isEmpty()) {\n            return GrailsHibernateUtil.unwrapIfProxy(list.get(0));\n        }\n        return null;\n    }","id":10056,"modified_method":"protected Object getResult(Criteria crit) {\n        CriteriaImpl impl = (CriteriaImpl) crit;\n        String entityOrClassName = impl.getEntityOrClassName();\n        GrailsClass domainClass = application.getArtefact(DomainClassArtefactHandler.TYPE, entityOrClassName);\n        boolean useLimit = establishWhetherToUseLimit(domainClass.getClazz());\n\n        return getResult(crit, useLimit);\n    }","commit_id":"90334039faa74f4e74072133c4231c9c8593682f","url":"https://github.com/grails/grails-core"},{"original_method":"protected Criteria buildCriteria(Session session, DetachedCriteria<?> detachedCriteria,\n            Closure<?> additionalCriteria, Class<?> clazz, Object[] arguments,\n            String operator, List<?> expressions) {\n        Criteria crit = getCriteria(datastore, application, session, detachedCriteria, additionalCriteria, clazz);\n        if (arguments.length > 0) {\n            if (arguments[0] instanceof Map<?, ?>) {\n                Map<?, ?> argMap = (Map<?, ?>)arguments[0];\n                GrailsHibernateUtil.populateArgumentsForCriteria(application, clazz, crit, argMap);\n                if (!argMap.containsKey(GrailsHibernateUtil.ARGUMENT_FETCH)) {\n                    crit.setMaxResults(1);\n                }\n            }\n            else {\n                crit.setMaxResults(1);\n            }\n        }\n        else {\n            crit.setMaxResults(1);\n        }\n\n        if (operator.equals(OPERATOR_OR)) {\n            if (firstExpressionIsRequiredBoolean()) {\n                GrailsMethodExpression expression = (GrailsMethodExpression) expressions.remove(0);\n                crit.add(expression.getCriterion());\n            }\n            Disjunction dis = Restrictions.disjunction();\n            for (Object expression : expressions) {\n                GrailsMethodExpression current = (GrailsMethodExpression) expression;\n                dis.add(current.getCriterion());\n            }\n            crit.add(dis);\n        }\n        else {\n            for (Object expression : expressions) {\n                GrailsMethodExpression current = (GrailsMethodExpression) expression;\n                crit.add(current.getCriterion());\n            }\n        }\n        return crit;\n    }","id":10057,"modified_method":"protected Criteria buildCriteria(Session session, DetachedCriteria<?> detachedCriteria,\n            Closure<?> additionalCriteria, Class<?> clazz, Object[] arguments,\n            String operator, List<?> expressions) {\n        Criteria crit = getCriteria(datastore, application, session, detachedCriteria, additionalCriteria, clazz);\n\n        boolean useLimit = establishWhetherToUseLimit(clazz);\n\n        if (arguments.length > 0) {\n            if (arguments[0] instanceof Map<?, ?>) {\n                Map<?, ?> argMap = (Map<?, ?>)arguments[0];\n                GrailsHibernateUtil.populateArgumentsForCriteria(application, clazz, crit, argMap);\n                if (!argMap.containsKey(GrailsHibernateUtil.ARGUMENT_FETCH)) {\n                    if(useLimit)\n                        crit.setMaxResults(1);\n                }\n            }\n            else {\n                if(useLimit)\n                    crit.setMaxResults(1);\n            }\n        }\n        else {\n            if(useLimit)\n                crit.setMaxResults(1);\n        }\n\n        if (operator.equals(OPERATOR_OR)) {\n            if (firstExpressionIsRequiredBoolean()) {\n                GrailsMethodExpression expression = (GrailsMethodExpression) expressions.remove(0);\n                crit.add(expression.getCriterion());\n            }\n            Disjunction dis = Restrictions.disjunction();\n            for (Object expression : expressions) {\n                GrailsMethodExpression current = (GrailsMethodExpression) expression;\n                dis.add(current.getCriterion());\n            }\n            crit.add(dis);\n        }\n        else {\n            for (Object expression : expressions) {\n                GrailsMethodExpression current = (GrailsMethodExpression) expression;\n                crit.add(current.getCriterion());\n            }\n        }\n        return crit;\n    }","commit_id":"90334039faa74f4e74072133c4231c9c8593682f","url":"https://github.com/grails/grails-core"},{"original_method":"protected Object getResult(Criteria crit) {\n        final List<?> list = crit.list();\n        if (!list.isEmpty()) {\n            return GrailsHibernateUtil.unwrapIfProxy(list.get(0));\n        }\n        return null;\n    }","id":10058,"modified_method":"protected Object getResult(Criteria crit) {\n        CriteriaImpl impl = (CriteriaImpl) crit;\n        String entityOrClassName = impl.getEntityOrClassName();\n        GrailsClass domainClass = application.getArtefact(DomainClassArtefactHandler.TYPE, entityOrClassName);\n        boolean useLimit = establishWhetherToUseLimit(domainClass.getClazz());\n\n        return getResult(crit, useLimit);\n    }","commit_id":"213d637811de6c9c268227659530b79d28e837b7","url":"https://github.com/grails/grails-core"},{"original_method":"@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected Object doInvokeInternalWithExpressions(final Class clazz, String methodName, final Object[] arguments, final List expressions, String operatorInUse, final DetachedCriteria detachedCriteria, final Closure additionalCriteria) {\n        final String operator = OPERATOR_OR.equals(operatorInUse) ? OPERATOR_OR : OPERATOR_AND;\n        return getHibernateTemplate().execute(new HibernateCallback<Object>() {\n            public Object doInHibernate(Session session) throws HibernateException, SQLException {\n\n                Criteria crit = buildCriteria(session, detachedCriteria, additionalCriteria, clazz, arguments, operator, expressions);\n\n                return getResult(crit);\n            }\n        });\n    }","id":10059,"modified_method":"@SuppressWarnings(\"rawtypes\")\n    @Override\n    protected Object doInvokeInternalWithExpressions(final Class clazz, String methodName, final Object[] arguments, final List expressions, String operatorInUse, final DetachedCriteria detachedCriteria, final Closure additionalCriteria) {\n        final String operator = OPERATOR_OR.equals(operatorInUse) ? OPERATOR_OR : OPERATOR_AND;\n        return getHibernateTemplate().execute(new HibernateCallback<Object>() {\n            public Object doInHibernate(Session session) throws HibernateException, SQLException {\n                Criteria crit = buildCriteria(session, detachedCriteria, additionalCriteria, clazz, arguments, operator, expressions);\n\n                boolean useLimit = establishWhetherToUseLimit(clazz);\n                return getResult(crit, useLimit);\n            }\n        });\n    }","commit_id":"213d637811de6c9c268227659530b79d28e837b7","url":"https://github.com/grails/grails-core"},{"original_method":"protected Criteria buildCriteria(Session session, DetachedCriteria<?> detachedCriteria,\n            Closure<?> additionalCriteria, Class<?> clazz, Object[] arguments,\n            String operator, List<?> expressions) {\n        Criteria crit = getCriteria(datastore, application, session, detachedCriteria, additionalCriteria, clazz);\n        if (arguments.length > 0) {\n            if (arguments[0] instanceof Map<?, ?>) {\n                Map<?, ?> argMap = (Map<?, ?>)arguments[0];\n                GrailsHibernateUtil.populateArgumentsForCriteria(application, clazz, crit, argMap);\n                if (!argMap.containsKey(GrailsHibernateUtil.ARGUMENT_FETCH)) {\n                    crit.setMaxResults(1);\n                }\n            }\n            else {\n                crit.setMaxResults(1);\n            }\n        }\n        else {\n            crit.setMaxResults(1);\n        }\n\n        if (operator.equals(OPERATOR_OR)) {\n            if (firstExpressionIsRequiredBoolean()) {\n                GrailsMethodExpression expression = (GrailsMethodExpression) expressions.remove(0);\n                crit.add(expression.getCriterion());\n            }\n            Disjunction dis = Restrictions.disjunction();\n            for (Object expression : expressions) {\n                GrailsMethodExpression current = (GrailsMethodExpression) expression;\n                dis.add(current.getCriterion());\n            }\n            crit.add(dis);\n        }\n        else {\n            for (Object expression : expressions) {\n                GrailsMethodExpression current = (GrailsMethodExpression) expression;\n                crit.add(current.getCriterion());\n            }\n        }\n        return crit;\n    }","id":10060,"modified_method":"protected Criteria buildCriteria(Session session, DetachedCriteria<?> detachedCriteria,\n            Closure<?> additionalCriteria, Class<?> clazz, Object[] arguments,\n            String operator, List<?> expressions) {\n        Criteria crit = getCriteria(datastore, application, session, detachedCriteria, additionalCriteria, clazz);\n\n        boolean useLimit = establishWhetherToUseLimit(clazz);\n\n        if (arguments.length > 0) {\n            if (arguments[0] instanceof Map<?, ?>) {\n                Map<?, ?> argMap = (Map<?, ?>)arguments[0];\n                GrailsHibernateUtil.populateArgumentsForCriteria(application, clazz, crit, argMap);\n                if (!argMap.containsKey(GrailsHibernateUtil.ARGUMENT_FETCH)) {\n                    if(useLimit)\n                        crit.setMaxResults(1);\n                }\n            }\n            else {\n                if(useLimit)\n                    crit.setMaxResults(1);\n            }\n        }\n        else {\n            if(useLimit)\n                crit.setMaxResults(1);\n        }\n\n        if (operator.equals(OPERATOR_OR)) {\n            if (firstExpressionIsRequiredBoolean()) {\n                GrailsMethodExpression expression = (GrailsMethodExpression) expressions.remove(0);\n                crit.add(expression.getCriterion());\n            }\n            Disjunction dis = Restrictions.disjunction();\n            for (Object expression : expressions) {\n                GrailsMethodExpression current = (GrailsMethodExpression) expression;\n                dis.add(current.getCriterion());\n            }\n            crit.add(dis);\n        }\n        else {\n            for (Object expression : expressions) {\n                GrailsMethodExpression current = (GrailsMethodExpression) expression;\n                crit.add(current.getCriterion());\n            }\n        }\n        return crit;\n    }","commit_id":"213d637811de6c9c268227659530b79d28e837b7","url":"https://github.com/grails/grails-core"},{"original_method":"@Override\n  public InternalScanner preCompact(ObserverContext<RegionCoprocessorEnvironment> e, Store store,\n                                    InternalScanner scanner, ScanType scanType, CompactionRequest request)\n    throws IOException {\n    TransactionSnapshot snapshot = cache.getLatestState();\n    if (snapshot != null) {\n      return new IncrementSummingScanner(region, BATCH_UNLIMITED, scanner, snapshot.getVisibilityUpperBound());\n    }\n    return new IncrementSummingScanner(region, BATCH_UNLIMITED, scanner);\n  }","id":10061,"modified_method":"@Override\n  public InternalScanner preCompact(ObserverContext<RegionCoprocessorEnvironment> e, Store store,\n                                    InternalScanner scanner, ScanType scanType, CompactionRequest request)\n    throws IOException {\n    TransactionSnapshot snapshot = cache.getLatestState();\n    return new IncrementSummingScanner(region, BATCH_UNLIMITED, scanner, scanType,\n        snapshot != null ? snapshot.getVisibilityUpperBound() : 0);\n  }","commit_id":"565c57e433d9adef085fc227288b052b2fa0e1cb","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public RegionScanner postScannerOpen(ObserverContext<RegionCoprocessorEnvironment> ctx, Scan scan,\n                                       RegionScanner scanner)\n    throws IOException {\n    return new IncrementSummingScanner(region, scan.getBatch(), scanner);\n  }","id":10062,"modified_method":"@Override\n  public RegionScanner postScannerOpen(ObserverContext<RegionCoprocessorEnvironment> ctx, Scan scan,\n                                       RegionScanner scanner)\n    throws IOException {\n    return new IncrementSummingScanner(region, scan.getBatch(), scanner, ScanType.USER_SCAN);\n  }","commit_id":"565c57e433d9adef085fc227288b052b2fa0e1cb","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public InternalScanner preFlush(ObserverContext<RegionCoprocessorEnvironment> e, Store store,\n                                  InternalScanner scanner) throws IOException {\n    TransactionSnapshot snapshot = cache.getLatestState();\n    if (snapshot != null) {\n      return new IncrementSummingScanner(region, BATCH_UNLIMITED, scanner, snapshot.getVisibilityUpperBound());\n    }\n    return new IncrementSummingScanner(region, BATCH_UNLIMITED, scanner);\n  }","id":10063,"modified_method":"@Override\n  public InternalScanner preFlush(ObserverContext<RegionCoprocessorEnvironment> e, Store store,\n                                  InternalScanner scanner) throws IOException {\n    TransactionSnapshot snapshot = cache.getLatestState();\n    return new IncrementSummingScanner(region, BATCH_UNLIMITED, scanner, ScanType.COMPACT_RETAIN_DELETES,\n        snapshot != null ? snapshot.getVisibilityUpperBound() : 0);\n  }","commit_id":"565c57e433d9adef085fc227288b052b2fa0e1cb","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public InternalScanner preCompact(ObserverContext<RegionCoprocessorEnvironment> e, Store store,\n                                    InternalScanner scanner, ScanType scanType) throws IOException {\n    TransactionSnapshot snapshot = cache.getLatestState();\n    if (snapshot != null) {\n      return new IncrementSummingScanner(region, BATCH_UNLIMITED, scanner, snapshot.getVisibilityUpperBound());\n    }\n    return new IncrementSummingScanner(region, BATCH_UNLIMITED, scanner);\n  }","id":10064,"modified_method":"@Override\n  public InternalScanner preCompact(ObserverContext<RegionCoprocessorEnvironment> e, Store store,\n                                    InternalScanner scanner, ScanType scanType) throws IOException {\n    TransactionSnapshot snapshot = cache.getLatestState();\n    return new IncrementSummingScanner(region, BATCH_UNLIMITED, scanner, scanType,\n        snapshot != null ? snapshot.getVisibilityUpperBound() : 0);\n  }","commit_id":"565c57e433d9adef085fc227288b052b2fa0e1cb","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void preGetOp(ObserverContext<RegionCoprocessorEnvironment> ctx, Get get, List<Cell> results)\n    throws IOException {\n    Scan scan = new Scan(get);\n    scan.setMaxVersions();\n    scan.setFilter(Filters.combine(new IncrementFilter(), scan.getFilter()));\n    RegionScanner scanner = null;\n    try {\n      scanner = new IncrementSummingScanner(region, scan.getBatch(), region.getScanner(scan));\n      scanner.next(results);\n      ctx.bypass();\n    } finally {\n      if (scanner != null) {\n        scanner.close();\n      }\n    }\n  }","id":10065,"modified_method":"@Override\n  public void preGetOp(ObserverContext<RegionCoprocessorEnvironment> ctx, Get get, List<Cell> results)\n    throws IOException {\n    Scan scan = new Scan(get);\n    scan.setMaxVersions();\n    scan.setFilter(Filters.combine(new IncrementFilter(), scan.getFilter()));\n    RegionScanner scanner = null;\n    try {\n      scanner = new IncrementSummingScanner(region, scan.getBatch(), region.getScanner(scan), ScanType.USER_SCAN);\n      scanner.next(results);\n      ctx.bypass();\n    } finally {\n      if (scanner != null) {\n        scanner.close();\n      }\n    }\n  }","commit_id":"565c57e433d9adef085fc227288b052b2fa0e1cb","url":"https://github.com/caskdata/cdap"},{"original_method":"private boolean nextInternal(List<Cell> cells, int limit) throws IOException {\n    Cell previousIncrement = null;\n    long runningSum = 0;\n    boolean hasMore;\n    int addedCnt = 0;\n    do {\n      List<Cell> tmpCells = new LinkedList<Cell>();\n      hasMore = baseScanner.next(tmpCells, limit);\n      // compact any delta writes\n      if (!tmpCells.isEmpty()) {\n        for (Cell cell : tmpCells) {\n          if (limit > 0 && addedCnt >= limit) {\n            // haven't reached the end of current cells, so hasMore is true\n            return true;\n          }\n\n          // 1. if this is an increment\n          if (IncrementHandler.isIncrement(cell) && cell.getTimestamp() < compactionUpperBound) {\n            if (LOG.isTraceEnabled()) {\n              LOG.trace(\"Found increment for row=\" + Bytes.toStringBinary(CellUtil.cloneRow(cell)) + \", \" +\n                         \"column=\" + Bytes.toStringBinary(CellUtil.cloneQualifier(cell)));\n            }\n            if (!sameCell(previousIncrement, cell)) {\n              if (previousIncrement != null) {\n                // 1b. if different qualifier, and prev qualifier non-null\n                // 1bi. emit the previous sum\n                if (LOG.isTraceEnabled()) {\n                  LOG.trace(\"Including increment: sum=\" + runningSum + \", cell=\" + previousIncrement);\n                }\n                cells.add(newCell(previousIncrement, runningSum));\n                addedCnt++;\n              }\n              previousIncrement = cell;\n              runningSum = 0;\n            }\n            // add this increment to the tally\n            runningSum += Bytes.toLong(cell.getValueArray(),\n                                       cell.getValueOffset() + IncrementHandler.DELTA_MAGIC_PREFIX.length);\n          } else {\n            // 2. otherwise (not an increment)\n            if (previousIncrement != null) {\n              boolean skipCurrent = false;\n              if (sameCell(previousIncrement, cell)) {\n                // 2a. if qualifier matches previous and this is a long, add to running sum, emit\n                runningSum += Bytes.toLong(cell.getValueArray(), cell.getValueOffset());\n                skipCurrent = true;\n              }\n              if (LOG.isTraceEnabled()) {\n                LOG.trace(\"Including increment: sum=\" + runningSum + \", cell=\" + previousIncrement);\n              }\n              cells.add(newCell(previousIncrement, runningSum));\n              addedCnt++;\n              previousIncrement = null;\n              runningSum = 0;\n\n              if (skipCurrent) {\n                continue;\n              }\n            }\n            // 2b. otherwise emit the current cell\n            //LOG.info(\"Including raw cell \" + cell);\n            cells.add(cell);\n            addedCnt++;\n          }\n        }\n        // emit any left over increment, if we hit the end\n        if (!hasMore && previousIncrement != null) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(\"Including leftover increment: sum=\" + runningSum + \", cell=\" + previousIncrement);\n          }\n          cells.add(newCell(previousIncrement, runningSum));\n        }\n      }\n    } while (hasMore && limit > 0 && addedCnt < limit);\n\n    return hasMore;\n  }","id":10066,"modified_method":"private boolean nextInternal(List<Cell> cells, int limit) throws IOException {\n    if (LOG.isTraceEnabled()) {\n      LOG.trace(\"nextInternal called with limit=\" + limit);\n    }\n    Cell previousIncrement = null;\n    long runningSum = 0;\n    boolean hasMore = true;\n    int addedCnt = 0;\n    do {\n      // 1. fill up results to consume, if needed\n      if (cellsToConsume.isEmpty()) {\n        hasMore = baseScanner.next(cellsToConsume, limit);\n      }\n      // compact any delta writes\n      for (int i = 0; i < cellsToConsume.size(); i++) {\n        Cell cell = cellsToConsume.get(i);\n        // 2. check if we've hit the limit for results\n        if (limit > 0 && addedCnt >= limit) {\n          // haven't reached the end of current cells, so hasMore is true\n          cellsToConsume = cellsToConsume.subList(i, cellsToConsume.size() - 1);\n          return true;\n        }\n\n        // 3. if this is an increment\n        if (IncrementHandler.isIncrement(cell) && cell.getTimestamp() < compactionUpperBound) {\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(\"Found increment for row=\" + Bytes.toStringBinary(CellUtil.cloneRow(cell)) + \", \" +\n                \"column=\" + Bytes.toStringBinary(CellUtil.cloneQualifier(cell)));\n          }\n          if (!sameCell(previousIncrement, cell)) {\n            if (previousIncrement != null) {\n              // 3a. if different qualifier, and prev qualifier non-null\n              // 3ai. emit the previous sum\n              if (LOG.isTraceEnabled()) {\n                LOG.trace(\"Including increment: sum=\" + runningSum + \", cell=\" + previousIncrement);\n              }\n              cells.add(newCell(previousIncrement, runningSum));\n              addedCnt++;\n            }\n            previousIncrement = cell;\n            runningSum = 0;\n          }\n          // add this increment to the tally\n          runningSum += Bytes.toLong(cell.getValueArray(),\n              cell.getValueOffset() + IncrementHandler.DELTA_MAGIC_PREFIX.length);\n        } else {\n          // 4. otherwise (not an increment or not aggregatable)\n          if (previousIncrement != null) {\n            boolean skipCurrent = false;\n            if (sameCell(previousIncrement, cell)) {\n              // 4a. if qualifier matches previous and this is a long, add to running sum, emit\n              runningSum += Bytes.toLong(cell.getValueArray(), cell.getValueOffset());\n              skipCurrent = true;\n            }\n            if (LOG.isTraceEnabled()) {\n              LOG.trace(\"Including increment: sum=\" + runningSum + \", cell=\" + previousIncrement);\n            }\n            cells.add(newCell(previousIncrement, runningSum));\n            addedCnt++;\n            previousIncrement = null;\n            runningSum = 0;\n\n            if (skipCurrent) {\n              continue;\n            }\n          }\n          // 4b. otherwise emit the current cell\n          if (LOG.isTraceEnabled()) {\n            LOG.trace(\"Including raw cell: \" + cell);\n          }\n          cells.add(cell);\n          addedCnt++;\n        }\n      }\n      // if we hit the limit before reaching the end of current results, we would have returned above (step 2)\n      cellsToConsume.clear();\n    } while (hasMore && limit > 0 && addedCnt < limit);\n    // emit any left over increment, if we hit the end\n    if (previousIncrement != null) {\n      if (LOG.isTraceEnabled()) {\n        LOG.trace(\"Including leftover increment: sum=\" + runningSum + \", cell=\" + previousIncrement);\n      }\n      cells.add(newCell(previousIncrement, runningSum));\n    }\n\n    return hasMore;\n  }","commit_id":"565c57e433d9adef085fc227288b052b2fa0e1cb","url":"https://github.com/caskdata/cdap"},{"original_method":"IncrementSummingScanner(HRegion region, int batchSize, InternalScanner baseScanner) {\n    this(region, batchSize, baseScanner, Long.MAX_VALUE);\n  }","id":10067,"modified_method":"IncrementSummingScanner(HRegion region, int batchSize, InternalScanner baseScanner, ScanType scanType) {\n    this(region, batchSize, baseScanner, scanType, Long.MAX_VALUE);\n  }","commit_id":"565c57e433d9adef085fc227288b052b2fa0e1cb","url":"https://github.com/caskdata/cdap"},{"original_method":"IncrementSummingScanner(HRegion region, int batchSize, InternalScanner baseScanner, long compationUpperBound) {\n    this.region = region;\n    this.batchSize = batchSize;\n    this.baseScanner = baseScanner;\n    if (baseScanner instanceof RegionScanner) {\n      this.baseRegionScanner = (RegionScanner) baseScanner;\n    }\n    this.compactionUpperBound = compationUpperBound;\n  }","id":10068,"modified_method":"IncrementSummingScanner(HRegion region, int batchSize, InternalScanner baseScanner, ScanType scanType,\n                          long compationUpperBound) {\n    this.region = region;\n    this.batchSize = batchSize;\n    this.baseScanner = baseScanner;\n    if (baseScanner instanceof RegionScanner) {\n      this.baseRegionScanner = (RegionScanner) baseScanner;\n    }\n    this.scanType = scanType;\n    this.compactionUpperBound = compationUpperBound;\n  }","commit_id":"565c57e433d9adef085fc227288b052b2fa0e1cb","url":"https://github.com/caskdata/cdap"},{"original_method":"private Cell newCell(Cell toCopy, long value) {\n    return CellUtil.createCell(CellUtil.cloneRow(toCopy), CellUtil.cloneFamily(toCopy),\n                               CellUtil.cloneQualifier(toCopy), toCopy.getTimestamp(),\n                               KeyValue.Type.Put.getCode(), Bytes.toBytes(value));\n  }","id":10069,"modified_method":"private Cell newCell(Cell toCopy, long value) {\n    byte[] newValue = Bytes.toBytes(value);\n    if (scanType == ScanType.COMPACT_RETAIN_DELETES) {\n      newValue = Bytes.add(IncrementHandler.DELTA_MAGIC_PREFIX, newValue);\n    }\n    return CellUtil.createCell(CellUtil.cloneRow(toCopy), CellUtil.cloneFamily(toCopy),\n                               CellUtil.cloneQualifier(toCopy), toCopy.getTimestamp(),\n                               KeyValue.Type.Put.getCode(), newValue);\n  }","commit_id":"565c57e433d9adef085fc227288b052b2fa0e1cb","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testIncrementScanning() throws Exception {\n    TableName tableName = TableName.valueOf(\"TestIncrementSummingScanner\");\n    byte[] familyBytes = Bytes.toBytes(\"f\");\n    byte[] columnBytes = Bytes.toBytes(\"c\");\n    HRegion region = createRegion(tableName, familyBytes);\n    try {\n      region.initialize();\n      \n      // test handling of a single increment value alone\n      Put p = new Put(Bytes.toBytes(\"r1\"));\n      p.add(familyBytes, columnBytes, Bytes.toBytes(3L));\n      p.setAttribute(HBaseOrderedTable.DELTA_WRITE, TRUE);\n      region.put(p);\n\n      Scan scan = new Scan();\n      RegionScanner scanner = new IncrementSummingScanner(region, -1, region.getScanner(scan));\n      List<Cell> results = Lists.newArrayList();\n      scanner.next(results);\n\n      assertEquals(1, results.size());\n      Cell cell = results.get(0);\n      assertNotNull(cell);\n      assertEquals(3L, Bytes.toLong(cell.getValue()));\n\n      // test handling of a single total sum\n      p = new Put(Bytes.toBytes(\"r2\"));\n      p.add(familyBytes, columnBytes, Bytes.toBytes(5L));\n      region.put(p);\n\n      scan = new Scan(Bytes.toBytes(\"r2\"));\n\n      scanner = new IncrementSummingScanner(region, -1, region.getScanner(scan));\n      results = Lists.newArrayList();\n      scanner.next(results);\n\n      assertEquals(1, results.size());\n      cell = results.get(0);\n      assertNotNull(cell);\n      assertEquals(5L, Bytes.toLong(cell.getValue()));\n\n      // test handling of multiple increment values\n      long now = System.currentTimeMillis();\n      p = new Put(Bytes.toBytes(\"r3\"));\n      for (int i = 0; i < 5; i++) {\n        p.add(familyBytes, columnBytes, now - i, Bytes.toBytes((long) (i + 1)));\n      }\n      p.setAttribute(HBaseOrderedTable.DELTA_WRITE, TRUE);\n      region.put(p);\n\n      scan = new Scan(Bytes.toBytes(\"r3\"));\n      scan.setMaxVersions();\n      scanner = new IncrementSummingScanner(region, -1, region.getScanner(scan));\n      results = Lists.newArrayList();\n      scanner.next(results);\n\n      assertEquals(1, results.size());\n      cell = results.get(0);\n      assertNotNull(cell);\n      assertEquals(15L, Bytes.toLong(cell.getValue()));\n\n      // test handling of multiple increment values followed by a total sum, then other increments\n      now = System.currentTimeMillis();\n      p = new Put(Bytes.toBytes(\"r4\"));\n      for (int i = 0; i < 3; i++) {\n        p.add(familyBytes, columnBytes, now - i, Bytes.toBytes(1L));\n      }\n      p.setAttribute(HBaseOrderedTable.DELTA_WRITE, TRUE);\n      region.put(p);\n\n      // this put will appear as a \"total\" sum prior to all the delta puts\n      p = new Put(Bytes.toBytes(\"r4\"));\n      p.add(familyBytes, columnBytes, now - 5, Bytes.toBytes(5L));\n      region.put(p);\n\n      scan = new Scan(Bytes.toBytes(\"r4\"));\n      scan.setMaxVersions();\n      scanner = new IncrementSummingScanner(region, -1, region.getScanner(scan));\n      results = Lists.newArrayList();\n      scanner.next(results);\n\n      assertEquals(1, results.size());\n      cell = results.get(0);\n      assertNotNull(cell);\n      assertEquals(8L, Bytes.toLong(cell.getValue()));\n\n      // test handling of an increment column followed by a non-increment column\n      p = new Put(Bytes.toBytes(\"r4\"));\n      p.add(familyBytes, Bytes.toBytes(\"c2\"), Bytes.toBytes(\"value\"));\n      region.put(p);\n\n      scan = new Scan(Bytes.toBytes(\"r4\"));\n      scan.setMaxVersions();\n      scanner = new IncrementSummingScanner(region, -1, region.getScanner(scan));\n      results = Lists.newArrayList();\n      scanner.next(results);\n\n      assertEquals(2, results.size());\n      cell = results.get(0);\n      assertNotNull(cell);\n      assertEquals(8L, Bytes.toLong(cell.getValue()));\n\n      cell = results.get(1);\n      assertNotNull(cell);\n      assertEquals(\"value\", Bytes.toString(cell.getValue()));\n    } finally {\n      region.close();\n    }\n\n  }","id":10070,"modified_method":"@Test\n  public void testIncrementScanning() throws Exception {\n    TableName tableName = TableName.valueOf(\"TestIncrementSummingScanner\");\n    byte[] familyBytes = Bytes.toBytes(\"f\");\n    byte[] columnBytes = Bytes.toBytes(\"c\");\n    HRegion region = createRegion(tableName, familyBytes);\n    try {\n      region.initialize();\n\n      // test handling of a single increment value alone\n      Put p = new Put(Bytes.toBytes(\"r1\"));\n      p.add(familyBytes, columnBytes, Bytes.toBytes(3L));\n      p.setAttribute(HBaseOrderedTable.DELTA_WRITE, TRUE);\n      region.put(p);\n\n      Scan scan = new Scan();\n      RegionScanner scanner = new IncrementSummingScanner(region, -1, region.getScanner(scan), ScanType.USER_SCAN);\n      List<Cell> results = Lists.newArrayList();\n      scanner.next(results);\n\n      assertEquals(1, results.size());\n      Cell cell = results.get(0);\n      assertNotNull(cell);\n      assertEquals(3L, Bytes.toLong(cell.getValue()));\n\n      // test handling of a single total sum\n      p = new Put(Bytes.toBytes(\"r2\"));\n      p.add(familyBytes, columnBytes, Bytes.toBytes(5L));\n      region.put(p);\n\n      scan = new Scan(Bytes.toBytes(\"r2\"));\n\n      scanner = new IncrementSummingScanner(region, -1, region.getScanner(scan), ScanType.USER_SCAN);\n      results = Lists.newArrayList();\n      scanner.next(results);\n\n      assertEquals(1, results.size());\n      cell = results.get(0);\n      assertNotNull(cell);\n      assertEquals(5L, Bytes.toLong(cell.getValue()));\n\n      // test handling of multiple increment values\n      long now = System.currentTimeMillis();\n      p = new Put(Bytes.toBytes(\"r3\"));\n      for (int i = 0; i < 5; i++) {\n        p.add(familyBytes, columnBytes, now - i, Bytes.toBytes((long) (i + 1)));\n      }\n      p.setAttribute(HBaseOrderedTable.DELTA_WRITE, TRUE);\n      region.put(p);\n\n      scan = new Scan(Bytes.toBytes(\"r3\"));\n      scan.setMaxVersions();\n      scanner = new IncrementSummingScanner(region, -1, region.getScanner(scan), ScanType.USER_SCAN);\n      results = Lists.newArrayList();\n      scanner.next(results);\n\n      assertEquals(1, results.size());\n      cell = results.get(0);\n      assertNotNull(cell);\n      assertEquals(15L, Bytes.toLong(cell.getValue()));\n\n      // test handling of multiple increment values followed by a total sum, then other increments\n      now = System.currentTimeMillis();\n      p = new Put(Bytes.toBytes(\"r4\"));\n      for (int i = 0; i < 3; i++) {\n        p.add(familyBytes, columnBytes, now - i, Bytes.toBytes(1L));\n      }\n      p.setAttribute(HBaseOrderedTable.DELTA_WRITE, TRUE);\n      region.put(p);\n\n      // this put will appear as a \"total\" sum prior to all the delta puts\n      p = new Put(Bytes.toBytes(\"r4\"));\n      p.add(familyBytes, columnBytes, now - 5, Bytes.toBytes(5L));\n      region.put(p);\n\n      scan = new Scan(Bytes.toBytes(\"r4\"));\n      scan.setMaxVersions();\n      scanner = new IncrementSummingScanner(region, -1, region.getScanner(scan), ScanType.USER_SCAN);\n      results = Lists.newArrayList();\n      scanner.next(results);\n\n      assertEquals(1, results.size());\n      cell = results.get(0);\n      assertNotNull(cell);\n      assertEquals(8L, Bytes.toLong(cell.getValue()));\n\n      // test handling of an increment column followed by a non-increment column\n      p = new Put(Bytes.toBytes(\"r4\"));\n      p.add(familyBytes, Bytes.toBytes(\"c2\"), Bytes.toBytes(\"value\"));\n      region.put(p);\n\n      scan = new Scan(Bytes.toBytes(\"r4\"));\n      scan.setMaxVersions();\n      scanner = new IncrementSummingScanner(region, -1, region.getScanner(scan), ScanType.USER_SCAN);\n      results = Lists.newArrayList();\n      scanner.next(results);\n\n      assertEquals(2, results.size());\n      cell = results.get(0);\n      assertNotNull(cell);\n      assertEquals(8L, Bytes.toLong(cell.getValue()));\n\n      cell = results.get(1);\n      assertNotNull(cell);\n      assertEquals(\"value\", Bytes.toString(cell.getValue()));\n    } finally {\n      region.close();\n    }\n\n  }","commit_id":"565c57e433d9adef085fc227288b052b2fa0e1cb","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testFlushAndCompact() throws Exception {\n    TableName tableName = TableName.valueOf(\"TestFlushAndCompact\");\n    byte[] familyBytes = Bytes.toBytes(\"f\");\n    byte[] columnBytes = Bytes.toBytes(\"c\");\n    HRegion region = createRegion(tableName, familyBytes);\n    try {\n      region.initialize();\n\n      // load an initial set of increments\n      long ts = System.currentTimeMillis();\n      byte[] row1 = Bytes.toBytes(\"row1\");\n      for (int i = 0; i < 50; i++) {\n        Put p = new Put(row1);\n        p.add(familyBytes, columnBytes, ts, Bytes.toBytes(1L));\n        p.setAttribute(HBaseOrderedTable.DELTA_WRITE, TRUE);\n        ts++;\n        region.put(p);\n      }\n\n      byte[] row2 = Bytes.toBytes(\"row2\");\n      ts = System.currentTimeMillis();\n      // start with a full put\n      Put row2P = new Put(row2);\n      row2P.add(familyBytes, columnBytes, ts++, Bytes.toBytes(10L));\n      region.put(row2P);\n      for (int i = 0; i < 10; i++) {\n        Put p = new Put(row2);\n        p.add(familyBytes, columnBytes, ts++, Bytes.toBytes(1L));\n        p.setAttribute(HBaseOrderedTable.DELTA_WRITE, TRUE);\n        region.put(p);\n      }\n\n      // force a region flush\n      region.flushcache();\n      region.waitForFlushesAndCompactions();\n\n      Result r1 = region.get(new Get(row1));\n      assertNotNull(r1);\n      assertFalse(r1.isEmpty());\n      // row1 should have a full put aggregating all 50 incrments\n      Cell r1Cell = r1.getColumnLatestCell(familyBytes, columnBytes);\n      assertNotNull(r1Cell);\n      assertEquals(50L, Bytes.toLong(r1Cell.getValue()));\n\n      Result r2 = region.get(new Get(row2));\n      assertNotNull(r2);\n      assertFalse(r2.isEmpty());\n      // row2 should have a full put aggregating prior put + 10 increments\n      Cell r2Cell = r2.getColumnLatestCell(familyBytes, columnBytes);\n      assertNotNull(r2Cell);\n      assertEquals(20L, Bytes.toLong(r2Cell.getValue()));\n    } finally {\n      region.close();\n    }\n  }","id":10071,"modified_method":"@Test\n  public void testFlushAndCompact() throws Exception {\n    TableName tableName = TableName.valueOf(\"TestFlushAndCompact\");\n    byte[] familyBytes = Bytes.toBytes(\"f\");\n    byte[] columnBytes = Bytes.toBytes(\"c\");\n    HRegion region = createRegion(tableName, familyBytes);\n    try {\n      region.initialize();\n\n      // load an initial set of increments\n      long ts = System.currentTimeMillis();\n      byte[] row1 = Bytes.toBytes(\"row1\");\n      for (int i = 0; i < 50; i++) {\n        Put p = new Put(row1);\n        p.add(familyBytes, columnBytes, ts, Bytes.toBytes(1L));\n        p.setAttribute(HBaseOrderedTable.DELTA_WRITE, TRUE);\n        ts++;\n        region.put(p);\n      }\n\n      byte[] row2 = Bytes.toBytes(\"row2\");\n      ts = System.currentTimeMillis();\n      // start with a full put\n      Put row2P = new Put(row2);\n      row2P.add(familyBytes, columnBytes, ts++, Bytes.toBytes(10L));\n      region.put(row2P);\n      for (int i = 0; i < 10; i++) {\n        Put p = new Put(row2);\n        p.add(familyBytes, columnBytes, ts++, Bytes.toBytes(1L));\n        p.setAttribute(HBaseOrderedTable.DELTA_WRITE, TRUE);\n        region.put(p);\n      }\n\n      // force a region flush\n      region.flushcache();\n      region.waitForFlushesAndCompactions();\n\n      Result r1 = region.get(new Get(row1));\n      assertNotNull(r1);\n      assertFalse(r1.isEmpty());\n      // row1 should have a full put aggregating all 50 incrments\n      Cell r1Cell = r1.getColumnLatestCell(familyBytes, columnBytes);\n      assertNotNull(r1Cell);\n      assertEquals(50L, Bytes.toLong(r1Cell.getValue()));\n\n      Result r2 = region.get(new Get(row2));\n      assertNotNull(r2);\n      assertFalse(r2.isEmpty());\n      // row2 should have a full put aggregating prior put + 10 increments\n      Cell r2Cell = r2.getColumnLatestCell(familyBytes, columnBytes);\n      assertNotNull(r2Cell);\n      assertEquals(20L, Bytes.toLong(r2Cell.getValue()));\n\n      // add 30 more increments to row2\n      for (int i = 0; i < 30; i++) {\n        Put p = new Put(row2);\n        p.add(familyBytes, columnBytes, ts++, Bytes.toBytes(1L));\n        p.setAttribute(HBaseOrderedTable.DELTA_WRITE, TRUE);\n        region.put(p);\n      }\n\n      // row2 should now have a full put aggregating prior 20 value + 30 increments\n      r2 = region.get(new Get(row2));\n      assertNotNull(r2);\n      assertFalse(r2.isEmpty());\n      r2Cell = r2.getColumnLatestCell(familyBytes, columnBytes);\n      assertNotNull(r2Cell);\n      assertEquals(50L, Bytes.toLong(r2Cell.getValue()));\n\n      // force another region flush\n      region.flushcache();\n      region.waitForFlushesAndCompactions();\n\n      // add 100 more increments to row2\n      for (int i = 0; i < 100; i++) {\n        Put p = new Put(row2);\n        p.add(familyBytes, columnBytes, ts++, Bytes.toBytes(1L));\n        p.setAttribute(HBaseOrderedTable.DELTA_WRITE, TRUE);\n        region.put(p);\n      }\n\n      // row2 should now have a full put aggregating prior 50 value + 100 increments\n      r2 = region.get(new Get(row2));\n      assertNotNull(r2);\n      assertFalse(r2.isEmpty());\n      r2Cell = r2.getColumnLatestCell(familyBytes, columnBytes);\n      assertNotNull(r2Cell);\n      assertEquals(150L, Bytes.toLong(r2Cell.getValue()));\n    } finally {\n      region.close();\n    }\n  }","commit_id":"565c57e433d9adef085fc227288b052b2fa0e1cb","url":"https://github.com/caskdata/cdap"},{"original_method":"private static int createUncleanDb( String dir, int nrOf2PcTransactionsToRecover ) throws Exception\n    {\n        Process process = Runtime.getRuntime().exec( new String[]{\n            \"java\", \"-cp\", System.getProperty( \"java.class.path\" ), CreateTransactionsAndDie.class.getName(),\n            dir, \"\" + nrOf2PcTransactionsToRecover\n        } );\n\n        return new ProcessStreamHandler( process, true ).waitForResult();\n    }","id":10072,"modified_method":"private static int createUncleanDb( String dir, int nrOf2PcTransactionsToRecover ) throws Exception\n    {\n        Process process = Runtime.getRuntime().exec( new String[]{\n                \"java\", \"-cp\", System.getProperty( \"java.class.path\" ), \"-Djava.awt.headless=true\",\n                CreateTransactionsAndDie.class.getName(), dir, \"\" + nrOf2PcTransactionsToRecover\n        } );\n\n        return new ProcessStreamHandler( process, true ).waitForResult();\n    }","commit_id":"80626bec83d3be98eb8904ba44f9c1984213472a","url":"https://github.com/neo4j/neo4j"},{"original_method":"public T start( P parameter, BreakPoint... breakpoints )\n    {\n        DebuggerConnector debugger = null;\n        if ( breakpoints != null && breakpoints.length != 0 ) debugger = new DebuggerConnector( breakpoints );\n        DispatcherTrapImpl callback;\n        try\n        {\n            callback = new DispatcherTrapImpl( this, parameter );\n        }\n        catch ( RemoteException e )\n        {\n            throw new RuntimeException( \"Failed to create local RMI endpoint.\", e );\n        }\n        Process process;\n        String pid;\n        DebugDispatch debugDispatch = null;\n        Dispatcher dispatcher;\n        try\n        {\n            synchronized ( debugger != null ? DebuggerConnector.class : new Object() )\n            {\n                if ( debugger != null )\n                {\n                    process = start( \"java\", \"-Xmx1G\", debugger.listen(), \"-cp\",\n                            classPath( System.getProperty( \"java.class.path\" ) ), SubProcess.class.getName(),\n                            serialize( callback ) );\n                }\n                else\n                {\n                    process = start( \"java\", \"-Xmx1G\", \"-cp\", classPath( System.getProperty( \"java.class.path\" ) ),\n                            SubProcess.class.getName(), serialize( callback ) );\n                }\n                pid = getPid( process );\n                pipe( \"[\" + toString() + \":\" + pid + \"] \", process.getErrorStream(), errorStreamTarget() );\n                pipe( \"[\" + toString() + \":\" + pid + \"] \", process.getInputStream(), inputStreamTarget() );\n                if ( debugger != null )\n                {\n                    debugDispatch = debugger.connect( toString() + \":\" + pid );\n                }\n            }\n            dispatcher = callback.get( process );\n        }\n        finally\n        {\n            try\n            {\n                UnicastRemoteObject.unexportObject( callback, true );\n            }\n            catch ( RemoteException e )\n            {\n                e.printStackTrace();\n            }\n        }\n        if ( dispatcher == null ) throw new IllegalStateException( \"failed to start sub process\" );\n        Handler handler = new Handler( t, dispatcher, process, \"<\" + toString() + \":\" + pid + \">\", debugDispatch );\n        if ( debugDispatch != null ) debugDispatch.handler = handler;\n        return t.cast( Proxy.newProxyInstance( t.getClassLoader(), new Class[] { t }, live( handler ) ) );\n    }","id":10073,"modified_method":"public T start( P parameter, BreakPoint... breakpoints )\n    {\n        DebuggerConnector debugger = null;\n        if ( breakpoints != null && breakpoints.length != 0 ) debugger = new DebuggerConnector( breakpoints );\n        DispatcherTrapImpl callback;\n        try\n        {\n            callback = new DispatcherTrapImpl( this, parameter );\n        }\n        catch ( RemoteException e )\n        {\n            throw new RuntimeException( \"Failed to create local RMI endpoint.\", e );\n        }\n        Process process;\n        String pid;\n        DebugDispatch debugDispatch = null;\n        Dispatcher dispatcher;\n        try\n        {\n            synchronized ( debugger != null ? DebuggerConnector.class : new Object() )\n            {\n                if ( debugger != null )\n                {\n                    process = start( \"java\", \"-Xmx1G\", debugger.listen(), \"-Djava.awt.headless=true\",\n                            \"-cp\", classPath( System.getProperty( \"java.class.path\" ) ),\n                            SubProcess.class.getName(), serialize( callback ) );\n                }\n                else\n                {\n                    process = start( \"java\", \"-Xmx1G\", \"-Djava.awt.headless=true\",\n                            \"-cp\", classPath( System.getProperty( \"java.class.path\" ) ),\n                            SubProcess.class.getName(), serialize( callback ) );\n                }\n                pid = getPid( process );\n                pipe( \"[\" + toString() + \":\" + pid + \"] \", process.getErrorStream(), errorStreamTarget() );\n                pipe( \"[\" + toString() + \":\" + pid + \"] \", process.getInputStream(), inputStreamTarget() );\n                if ( debugger != null )\n                {\n                    debugDispatch = debugger.connect( toString() + \":\" + pid );\n                }\n            }\n            dispatcher = callback.get( process );\n        }\n        finally\n        {\n            try\n            {\n                UnicastRemoteObject.unexportObject( callback, true );\n            }\n            catch ( RemoteException e )\n            {\n                e.printStackTrace();\n            }\n        }\n        if ( dispatcher == null ) throw new IllegalStateException( \"failed to start sub process\" );\n        Handler handler = new Handler( t, dispatcher, process, \"<\" + toString() + \":\" + pid + \">\", debugDispatch );\n        if ( debugDispatch != null ) debugDispatch.handler = handler;\n        return t.cast( Proxy.newProxyInstance( t.getClassLoader(), new Class[] { t }, live( handler ) ) );\n    }","commit_id":"80626bec83d3be98eb8904ba44f9c1984213472a","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void testIndexDeleteIssue() throws Exception\n    {\n        GraphDatabaseService db = newGraphDbService();\n        db.index().forNodes( \"index\" );\n        db.shutdown();\n\n        Process process = Runtime.getRuntime().exec( new String[]{\n                \"java\", \"-cp\", System.getProperty( \"java.class.path\" ),\n                AddDeleteQuit.class.getName(), getDbPath().getPath()\n        } );\n        assertEquals( 0, new ProcessStreamHandler( process, true ).waitForResult() );\n\n        new GraphDatabaseFactory().newEmbeddedDatabase( getDbPath().getPath() ).shutdown();\n        db.shutdown();\n    }","id":10074,"modified_method":"@Test\n    public void testIndexDeleteIssue() throws Exception\n    {\n        GraphDatabaseService db = newGraphDbService();\n        db.index().forNodes( \"index\" );\n        db.shutdown();\n\n        Process process = runJava(AddDeleteQuit.class, getDbPath().getPath());\n        assertEquals( 0, new ProcessStreamHandler( process, true ).waitForResult() );\n\n        new GraphDatabaseFactory().newEmbeddedDatabase( getDbPath().getPath() ).shutdown();\n        db.shutdown();\n    }","commit_id":"80626bec83d3be98eb8904ba44f9c1984213472a","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void recoveryOnDeletedIndex() throws Exception\n    {\n        GraphDatabaseService db = newGraphDbService();\n        db.index().forNodes( \"index\" );\n        db.shutdown();\n\n        Process process = Runtime.getRuntime().exec( new String[]{\n                \"java\", \"-cp\", System.getProperty( \"java.class.path\" ),\n                AddThenDeleteInAnotherTxAndQuit.class.getName(), getDbPath().getPath()\n        } );\n        assertEquals( 0, new ProcessStreamHandler( process, false ).waitForResult() );\n\n        db = new GraphDatabaseFactory().newEmbeddedDatabase( getDbPath().getPath() );\n        assertFalse( db.index().existsForNodes( \"index\" ) );\n        assertNotNull( db.index().forNodes( \"index2\" ).get( \"key\", \"value\" ).getSingle() );\n        db.shutdown();\n    }","id":10075,"modified_method":"@Test\n    public void recoveryOnDeletedIndex() throws Exception\n    {\n        GraphDatabaseService db = newGraphDbService();\n        db.index().forNodes( \"index\" );\n        db.shutdown();\n\n        Process process = runJava(AddThenDeleteInAnotherTxAndQuit.class, getDbPath().getPath());\n        assertEquals( 0, new ProcessStreamHandler( process, false ).waitForResult() );\n\n        db = new GraphDatabaseFactory().newEmbeddedDatabase( getDbPath().getPath() );\n        assertFalse( db.index().existsForNodes( \"index\" ) );\n        assertNotNull( db.index().forNodes( \"index2\" ).get( \"key\", \"value\" ).getSingle() );\n        db.shutdown();\n    }","commit_id":"80626bec83d3be98eb8904ba44f9c1984213472a","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void recoveryForRelationshipCommandsOnly() throws Exception\n    {\n        File path = getDbPath();\n        Neo4jTestCase.deleteFileOrDirectory( path );\n        Process process = Runtime.getRuntime().exec( new String[]{\n                \"java\", \"-Xdebug\", \"-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=5005\", \"-cp\",\n                System.getProperty( \"java.class.path\" ),\n                AddRelToIndex.class.getName(), getDbPath().getPath()\n        } );\n        assertEquals( 0, new ProcessStreamHandler( process, false ).waitForResult() );\n\n        // I would like to do this, but there's no exception propagated out from the constructor\n        // if the recovery fails.\n        // new EmbeddedGraphDatabase( getDbPath() ).shutdown();\n\n        // Instead I have to do this\n        FileSystemAbstraction fileSystemAbstraction = new DefaultFileSystemAbstraction();\n        FileSystemAbstraction fileSystem = fileSystemAbstraction;\n        Map<String, String> params = MapUtil.stringMap(\n                \"store_dir\", getDbPath().getPath() );\n        Config config = new Config( params, GraphDatabaseSettings.class );\n        LuceneDataSource ds = new LuceneDataSource( config, new IndexStore( getDbPath(), fileSystem ), fileSystem,\n                new XaFactory( config, TxIdGenerator.DEFAULT, new PlaceboTm( null, null ),\n                        fileSystemAbstraction, new Monitors(), new DevNullLoggingService(), RecoveryVerifier.ALWAYS_VALID,\n                        LogPruneStrategies.NO_PRUNING, mock( KernelHealth.class ) ), null, new DevNullLoggingService() );\n        ds.start();\n        ds.stop();\n    }","id":10076,"modified_method":"@Test\n    public void recoveryForRelationshipCommandsOnly() throws Exception\n    {\n        File path = getDbPath();\n        Neo4jTestCase.deleteFileOrDirectory( path );\n        Process process = runJava( AddRelToIndex.class, getDbPath().getPath() );\n        assertEquals( 0, new ProcessStreamHandler( process, false ).waitForResult() );\n\n        // I would like to do this, but there's no exception propagated out from the constructor\n        // if the recovery fails.\n        // new EmbeddedGraphDatabase( getDbPath() ).shutdown();\n\n        // Instead I have to do this\n        FileSystemAbstraction fileSystemAbstraction = new DefaultFileSystemAbstraction();\n        FileSystemAbstraction fileSystem = fileSystemAbstraction;\n        Map<String, String> params = MapUtil.stringMap(\n                \"store_dir\", getDbPath().getPath() );\n        Config config = new Config( params, GraphDatabaseSettings.class );\n        LuceneDataSource ds = new LuceneDataSource( config, new IndexStore( getDbPath(), fileSystem ), fileSystem,\n                new XaFactory( config, TxIdGenerator.DEFAULT, new PlaceboTm( null, null ),\n                        fileSystemAbstraction, new Monitors(), new DevNullLoggingService(), RecoveryVerifier.ALWAYS_VALID,\n                        LogPruneStrategies.NO_PRUNING, mock( KernelHealth.class ) ), null, new DevNullLoggingService() );\n        ds.start();\n        ds.stop();\n    }","commit_id":"80626bec83d3be98eb8904ba44f9c1984213472a","url":"https://github.com/neo4j/neo4j"},{"original_method":"/**\n     * Tests an issue where loading all relationship types and property indexes after\n     * the neostore data source had been started internally. The db would be in a\n     * state where it would need recovery for the neostore data source, as well as some\n     * other data source. This would fail since eventually TxManager#getTransaction()\n     * would be called, which would fail since it hadn't as of yet recovered fully.\n     * Whereas that failure would happen in a listener and merely be logged, one effect\n     * of it would be that there would seem to be no relationship types in the database.\n     */\n    @Test\n    public void recoverNeoAndIndexHavingAllRelationshipTypesAfterRecovery() throws Exception\n    {\n        // Given (create transactions and kill process, leaving it needing for recovery)\n        deleteRecursively( new File( dir ) );\n        assertEquals( 0, getRuntime().exec( new String[] { \"java\", \"-cp\", getProperty( \"java.class.path\" ),\n                getClass().getName() } ).waitFor() );\n        \n        // When\n        GraphDatabaseService db = new GraphDatabaseFactory().newEmbeddedDatabase( dir );\n\n        // Then\n        try\n        {\n            assertEquals( MyRelTypes.TEST.name(), GlobalGraphOperations.at( db ).getAllRelationshipTypes().iterator().next().name() );\n        }\n        finally\n        {\n            db.shutdown();\n        }\n    }","id":10077,"modified_method":"/**\n     * Tests an issue where loading all relationship types and property indexes after\n     * the neostore data source had been started internally. The db would be in a\n     * state where it would need recovery for the neostore data source, as well as some\n     * other data source. This would fail since eventually TxManager#getTransaction()\n     * would be called, which would fail since it hadn't as of yet recovered fully.\n     * Whereas that failure would happen in a listener and merely be logged, one effect\n     * of it would be that there would seem to be no relationship types in the database.\n     */\n    @Test\n    public void recoverNeoAndIndexHavingAllRelationshipTypesAfterRecovery() throws Exception\n    {\n        // Given (create transactions and kill process, leaving it needing for recovery)\n        deleteRecursively( new File( dir ) );\n        assertEquals( 0, getRuntime().exec( new String[] {\n                \"java\", \"-Djava.awt.headless=true\",  \"-cp\", getProperty( \"java.class.path\" ), getClass().getName()\n        } ).waitFor() );\n        \n        // When\n        GraphDatabaseService db = new GraphDatabaseFactory().newEmbeddedDatabase( dir );\n\n        // Then\n        try\n        {\n            assertEquals( MyRelTypes.TEST.name(), GlobalGraphOperations.at( db ).getAllRelationshipTypes().iterator().next().name() );\n        }\n        finally\n        {\n            db.shutdown();\n        }\n    }","commit_id":"80626bec83d3be98eb8904ba44f9c1984213472a","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void create2PCTransactionAndShutDownNonClean() throws Exception\n    {\n        assertEquals( 0, getRuntime().exec( new String[] { \"java\", \"-cp\", getProperty( \"java.class.path\" ),\n                getClass().getName(), storeDirectory.getAbsolutePath() } ).waitFor() );\n    }","id":10078,"modified_method":"private void create2PCTransactionAndShutDownNonClean() throws Exception\n    {\n        assertEquals( 0, getRuntime().exec( new String[] {\n                \"java\", \"-cp\", getProperty( \"java.class.path\" ), \"-Djava.awt.headless=true\",\n                getClass().getName(), storeDirectory.getAbsolutePath()\n        } ).waitFor() );\n    }","commit_id":"80626bec83d3be98eb8904ba44f9c1984213472a","url":"https://github.com/neo4j/neo4j"},{"original_method":"private int spawnJvm( Class<?> mainClass, String name ) throws Exception\n    {\n        String dir = forTest( getClass() ).directory( \"client\", true ).getAbsolutePath();\n        return waitForExit( getRuntime().exec( new String[] { \"java\", \"-cp\", getProperty( \"java.class.path\" ),\n                mainClass.getName(), dir } ), 20 );\n    }","id":10079,"modified_method":"private int spawnJvm( Class<?> mainClass, String name ) throws Exception\n    {\n        String dir = forTest( getClass() ).directory( \"client\", true ).getAbsolutePath();\n        return waitForExit( getRuntime().exec( new String[] { \"java\", \"-cp\", getProperty( \"java.class.path\" ),\n                \"-Djava.awt.headless=true\", mainClass.getName(), dir } ), 20 );\n    }","commit_id":"80626bec83d3be98eb8904ba44f9c1984213472a","url":"https://github.com/neo4j/neo4j"},{"original_method":"void verifyCurrentUserCanReadFilter(DefaultIssueFilter issueFilter, String user) {\n    if (!issueFilter.user().equals(user) && !issueFilter.shared()) {\n      throw new ForbiddenException(\"User is not authorized to read this filter\");\n    }\n  }","id":10080,"modified_method":"void verifyCurrentUserCanReadFilter(DefaultIssueFilter issueFilter, String user) {\n    if (!issueFilter.user().equals(user) && !issueFilter.shared()) {\n      // TODO throw unauthorized\n      throw new IllegalStateException(\"User is not authorized to read this filter\");\n    }\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public DefaultIssueFilter update(DefaultIssueFilter issueFilter, UserSession userSession) {\n    String user = getNotNullLogin(userSession);\n    IssueFilterDto issueFilterDto = findIssueFilterDto(issueFilter.id(), user);\n    verifyCurrentUserCanModifyFilter(issueFilterDto.toIssueFilter(), user, userSession);\n\n    if (!issueFilterDto.getUserLogin().equals(issueFilter.user()) && !userSession.hasPermission(Permissions.SYSTEM_ADMIN)) {\n      throw new ForbiddenException(\"User is not authorized to change the owner of this filter\");\n    }\n\n    validateFilter(issueFilter, user);\n\n    issueFilterDao.update(IssueFilterDto.toIssueFilter(issueFilter));\n    return issueFilter;\n  }","id":10081,"modified_method":"public DefaultIssueFilter update(DefaultIssueFilter issueFilter, UserSession userSession) {\n    String user = getNotNullLogin(userSession);\n    IssueFilterDto issueFilterDto = findIssueFilterDto(issueFilter.id(), user);\n    verifyCurrentUserCanModifyFilter(issueFilterDto.toIssueFilter(), user);\n    if(!issueFilterDto.getUserLogin().equals(issueFilter.user())) {\n      verifyCurrentUserCanChangeFilterOwnership(user);\n    }\n    validateFilter(issueFilter, user);\n\n    issueFilterDao.update(IssueFilterDto.toIssueFilter(issueFilter));\n    return issueFilter;\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"String getNotNullLogin(UserSession userSession) {\n    userSession.checkLoggedIn();\n    return userSession.login();\n  }","id":10082,"modified_method":"String getNotNullLogin(UserSession userSession) {\n    String user = userSession.login();\n    if (!userSession.isLoggedIn() && user != null) {\n      throw new IllegalStateException(\"User is not logged in\");\n    }\n    return user;\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void verifyCurrentUserCanModifyFilter(DefaultIssueFilter issueFilter, String user, UserSession userSession) {\n    if (!issueFilter.user().equals(user) && !userSession.hasPermission(Permissions.SYSTEM_ADMIN)) {\n      throw new ForbiddenException(\"User is not authorized to modify this filter\");\n    }\n  }","id":10083,"modified_method":"private void verifyCurrentUserCanModifyFilter(DefaultIssueFilter issueFilter, String user) {\n    if (!issueFilter.user().equals(user) && !isAdmin(user)) {\n      // TODO throw unauthorized\n      throw new IllegalStateException(\"User is not authorized to modify this filter\");\n    }\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void delete(Long issueFilterId, UserSession userSession) {\n    String user = getNotNullLogin(userSession);\n    IssueFilterDto issueFilterDto = findIssueFilterDto(issueFilterId, user);\n    verifyCurrentUserCanModifyFilter(issueFilterDto.toIssueFilter(), user, userSession);\n\n    deleteFavouriteIssueFilters(issueFilterDto);\n    issueFilterDao.delete(issueFilterId);\n  }","id":10084,"modified_method":"public void delete(Long issueFilterId, UserSession userSession) {\n    String user = getNotNullLogin(userSession);\n    IssueFilterDto issueFilterDto = findIssueFilterDto(issueFilterId, user);\n    verifyCurrentUserCanModifyFilter(issueFilterDto.toIssueFilter(), user);\n\n    deleteFavouriteIssueFilters(issueFilterDto);\n    issueFilterDao.delete(issueFilterId);\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public DefaultIssueFilter updateFilterQuery(Long issueFilterId, Map<String, Object> filterQuery, UserSession userSession) {\n    String user = getNotNullLogin(userSession);\n    IssueFilterDto issueFilterDto = findIssueFilterDto(issueFilterId, user);\n    verifyCurrentUserCanModifyFilter(issueFilterDto.toIssueFilter(), user, userSession);\n\n    DefaultIssueFilter issueFilter = issueFilterDto.toIssueFilter();\n    issueFilter.setData(serializeFilterQuery(filterQuery));\n    issueFilterDao.update(IssueFilterDto.toIssueFilter(issueFilter));\n    return issueFilter;\n  }","id":10085,"modified_method":"public DefaultIssueFilter updateFilterQuery(Long issueFilterId, Map<String, Object> filterQuery, UserSession userSession) {\n    String user = getNotNullLogin(userSession);\n    IssueFilterDto issueFilterDto = findIssueFilterDto(issueFilterId, user);\n    verifyCurrentUserCanModifyFilter(issueFilterDto.toIssueFilter(), user);\n\n    DefaultIssueFilter issueFilter = issueFilterDto.toIssueFilter();\n    issueFilter.setData(serializeFilterQuery(filterQuery));\n    issueFilterDao.update(IssueFilterDto.toIssueFilter(issueFilter));\n    return issueFilter;\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public IssueFilterService(IssueFilterDao issueFilterDao, IssueFilterFavouriteDao issueFilterFavouriteDao, IssueFinder issueFinder,\n                            IssueFilterSerializer issueFilterSerializer) {\n    this.issueFilterDao = issueFilterDao;\n    this.issueFilterFavouriteDao = issueFilterFavouriteDao;\n    this.issueFinder = issueFinder;\n    this.issueFilterSerializer = issueFilterSerializer;\n  }","id":10086,"modified_method":"public IssueFilterService(IssueFilterDao issueFilterDao, IssueFilterFavouriteDao issueFilterFavouriteDao, IssueFinder issueFinder, AuthorizationDao authorizationDao,\n                            IssueFilterSerializer issueFilterSerializer) {\n    this.issueFilterDao = issueFilterDao;\n    this.issueFilterFavouriteDao = issueFilterFavouriteDao;\n    this.issueFinder = issueFinder;\n    this.authorizationDao = authorizationDao;\n    this.issueFilterSerializer = issueFilterSerializer;\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_find_shared_filter_by_id() {\n    IssueFilterDto issueFilterDto = new IssueFilterDto().setId(1L).setName(\"My Issue\").setUserLogin(\"arthur\").setShared(true);\n    when(issueFilterDao.selectById(1L)).thenReturn(issueFilterDto);\n\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    DefaultIssueFilter issueFilter = service.find(1L, userSession);\n    assertThat(issueFilter).isNotNull();\n    assertThat(issueFilter.id()).isEqualTo(1L);\n  }","id":10087,"modified_method":"@Test\n  public void should_find_shared_filter_by_id() {\n    IssueFilterDto issueFilterDto = new IssueFilterDto().setId(1L).setName(\"My Issue\").setUserLogin(\"arthur\").setShared(true);\n    when(issueFilterDao.selectById(1L)).thenReturn(issueFilterDto);\n\n    DefaultIssueFilter issueFilter = service.find(1L, userSession);\n    assertThat(issueFilter).isNotNull();\n    assertThat(issueFilter.id()).isEqualTo(1L);\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_add_favorite_on_copy() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"john\").setData(\"componentRoots=struts\"));\n    DefaultIssueFilter issueFilter = new DefaultIssueFilter().setName(\"Copy Of My Issue\");\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    service.copy(1L, issueFilter, userSession);\n\n    verify(issueFilterDao).insert(any(IssueFilterDto.class));\n    verify(issueFilterFavouriteDao).insert(any(IssueFilterFavouriteDto.class));\n  }","id":10088,"modified_method":"@Test\n  public void should_add_favorite_on_copy() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"john\").setData(\"componentRoots=struts\"));\n    DefaultIssueFilter issueFilter = new DefaultIssueFilter().setName(\"Copy Of My Issue\");\n    service.copy(1L, issueFilter, userSession);\n\n    verify(issueFilterDao).insert(any(IssueFilterDto.class));\n    verify(issueFilterFavouriteDao).insert(any(IssueFilterFavouriteDto.class));\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_delete_not_shared_filter_if_user_is_admin() {\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\").setPermissions(UserRole.ADMIN);\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"arthur\").setShared(false));\n\n    try {\n      service.delete(1L, userSession);\n      fail();\n    } catch (ForbiddenException e) {\n      assertThat(e).hasMessage(\"User is not authorized to read this filter\");\n      verify(issueFilterDao, never()).delete(anyLong());\n    }\n  }","id":10089,"modified_method":"@Test\n  public void should_not_delete_not_shared_filter_if_user_is_admin() {\n    when(authorizationDao.selectGlobalPermissions(\"john\")).thenReturn(newArrayList(UserRole.ADMIN));\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"arthur\").setShared(false));\n\n    try {\n      service.delete(1L, userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"User is not authorized to read this filter\");\n    }\n    verify(issueFilterDao, never()).delete(anyLong());\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_save_shared_filter_if_name_already_used_by_shared_filter() {\n    when(issueFilterDao.selectByNameAndUser(eq(\"My Issue\"), eq(\"john\"), eq((Long) null))).thenReturn(null);\n    when(issueFilterDao.selectSharedWithoutUserFiltersByName(eq(\"My Issue\"), eq(\"john\"), eq((Long) null))).thenReturn(new IssueFilterDto());\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    try {\n      DefaultIssueFilter issueFilter = new DefaultIssueFilter().setName(\"My Issue\").setShared(true);\n      service.save(issueFilter, userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Other users already share filters with the same name\");\n    }\n    verify(issueFilterDao, never()).insert(any(IssueFilterDto.class));\n  }","id":10090,"modified_method":"@Test\n  public void should_not_save_shared_filter_if_name_already_used_by_shared_filter() {\n    when(issueFilterDao.selectByNameAndUser(eq(\"My Issue\"), eq(\"john\"), eq((Long) null))).thenReturn(null);\n    when(issueFilterDao.selectSharedWithoutUserFiltersByName(eq(\"My Issue\"), eq(\"john\"), eq((Long) null))).thenReturn(new IssueFilterDto());\n    try {\n      DefaultIssueFilter issueFilter = new DefaultIssueFilter().setName(\"My Issue\").setShared(true);\n      service.save(issueFilter, userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Other users already share filters with the same name\");\n    }\n    verify(issueFilterDao, never()).insert(any(IssueFilterDto.class));\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void before() {\n    issueFilterDao = mock(IssueFilterDao.class);\n    issueFilterFavouriteDao = mock(IssueFilterFavouriteDao.class);\n    issueFinder = mock(IssueFinder.class);\n    issueFilterSerializer = mock(IssueFilterSerializer.class);\n\n    service = new IssueFilterService(issueFilterDao, issueFilterFavouriteDao, issueFinder, issueFilterSerializer);\n  }","id":10091,"modified_method":"@Before\n  public void before() {\n    userSession = mock(UserSession.class);\n    when(userSession.isLoggedIn()).thenReturn(true);\n    when(userSession.userId()).thenReturn(10);\n    when(userSession.login()).thenReturn(\"john\");\n\n    issueFilterDao = mock(IssueFilterDao.class);\n    issueFilterFavouriteDao = mock(IssueFilterFavouriteDao.class);\n    issueFinder = mock(IssueFinder.class);\n    authorizationDao = mock(AuthorizationDao.class);\n    issueFilterSerializer = mock(IssueFilterSerializer.class);\n\n    service = new IssueFilterService(issueFilterDao, issueFilterFavouriteDao, issueFinder, authorizationDao, issueFilterSerializer);\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_find_by_user() {\n    when(issueFilterDao.selectByUser(\"john\")).thenReturn(newArrayList(new IssueFilterDto().setId(1L).setName(\"My Issue\").setUserLogin(\"john\")));\n\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    List<DefaultIssueFilter> issueFilter = service.findByUser(userSession);\n    assertThat(issueFilter).hasSize(1);\n    assertThat(issueFilter.get(0).id()).isEqualTo(1L);\n  }","id":10092,"modified_method":"@Test\n  public void should_find_by_user() {\n    when(issueFilterDao.selectByUser(\"john\")).thenReturn(newArrayList(new IssueFilterDto().setId(1L).setName(\"My Issue\").setUserLogin(\"john\")));\n\n    List<DefaultIssueFilter> issueFilter = service.findByUser(userSession);\n    assertThat(issueFilter).hasSize(1);\n    assertThat(issueFilter.get(0).id()).isEqualTo(1L);\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_update_if_filter_not_found() {\n    when(issueFilterDao.selectById(1L)).thenReturn(null);\n\n    try {\n      UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n      service.update(new DefaultIssueFilter().setId(1L).setName(\"My New Filter\"), userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Filter not found: 1\");\n    }\n    verify(issueFilterDao, never()).update(any(IssueFilterDto.class));\n  }","id":10093,"modified_method":"@Test\n  public void should_not_update_if_filter_not_found() {\n    when(issueFilterDao.selectById(1L)).thenReturn(null);\n\n    try {\n      service.update(new DefaultIssueFilter().setId(1L).setName(\"My New Filter\"), userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Filter not found: 1\");\n    }\n    verify(issueFilterDao, never()).update(any(IssueFilterDto.class));\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_delete() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"john\"));\n\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    service.delete(1L, userSession);\n\n    verify(issueFilterDao).delete(1L);\n  }","id":10094,"modified_method":"@Test\n  public void should_delete() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"john\"));\n\n    service.delete(1L, userSession);\n\n    verify(issueFilterDao).delete(1L);\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_find_by_id_on_not_existing_issue() {\n    when(issueFilterDao.selectById(1L)).thenReturn(null);\n    try {\n      UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n      service.find(1L, userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Filter not found: 1\");\n    }\n  }","id":10095,"modified_method":"@Test\n  public void should_not_find_by_id_on_not_existing_issue() {\n    when(issueFilterDao.selectById(1L)).thenReturn(null);\n    try {\n      service.find(1L, userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Filter not found: 1\");\n    }\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_change_shared_filter_ownership_when_admin() throws Exception {\n    IssueFilterDto sharedFilter = new IssueFilterDto().setId(1L).setName(\"My filter\").setUserLogin(\"former.owner\").setShared(true);\n    IssueFilterDto expectedDto = new IssueFilterDto().setName(\"My filter\").setUserLogin(\"new.owner\").setShared(true);\n\n    MockUserSession admin = MockUserSession.set().setLogin(\"admin\").setPermissions(UserRole.ADMIN);\n    when(issueFilterDao.selectById(1L)).thenReturn(sharedFilter);\n\n    DefaultIssueFilter issueFilter = new DefaultIssueFilter().setId(1L).setName(\"My filter\").setShared(true).setUser(\"new.owner\");\n    service.update(issueFilter, admin);\n\n    verify(issueFilterDao).update(argThat(Matches.filter(expectedDto)));\n  }","id":10096,"modified_method":"@Test\n  public void should_change_shared_filter_ownership_when_admin() throws Exception {\n    String currentUser = \"dave.loper\";\n    IssueFilterDto sharedFilter = new IssueFilterDto().setId(1L).setName(\"My filter\").setUserLogin(\"former.owner\").setShared(true);\n    IssueFilterDto expectedDto = new IssueFilterDto().setName(\"My filter\").setUserLogin(\"new.owner\").setShared(true);\n\n    when(authorizationDao.selectGlobalPermissions(currentUser)).thenReturn(newArrayList(UserRole.ADMIN));\n    when(issueFilterDao.selectById(1L)).thenReturn(sharedFilter);\n\n    DefaultIssueFilter issueFilter = new DefaultIssueFilter().setId(1L).setName(\"My filter\").setShared(true).setUser(\"new.owner\");\n    service.update(issueFilter, MockUserSession.create().setUserId(1).setLogin(currentUser));\n\n    verify(issueFilterDao).update(argThat(Matches.filter(expectedDto)));\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_add_favorite_on_save() {\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    DefaultIssueFilter issueFilter = new DefaultIssueFilter().setName(\"My Issue\");\n    service.save(issueFilter, userSession);\n\n    verify(issueFilterDao).insert(any(IssueFilterDto.class));\n    verify(issueFilterFavouriteDao).insert(any(IssueFilterFavouriteDto.class));\n  }","id":10097,"modified_method":"@Test\n  public void should_add_favorite_on_save() {\n    DefaultIssueFilter issueFilter = new DefaultIssueFilter().setName(\"My Issue\");\n    service.save(issueFilter, userSession);\n\n    verify(issueFilterDao).insert(any(IssueFilterDto.class));\n    verify(issueFilterFavouriteDao).insert(any(IssueFilterFavouriteDto.class));\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_find_issue_filter() {\n    IssueFilterDto issueFilterDto = new IssueFilterDto().setId(1L).setName(\"My Issue\").setUserLogin(\"john\");\n    when(issueFilterDao.selectById(1L)).thenReturn(issueFilterDto);\n\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    DefaultIssueFilter issueFilter = service.find(1L, userSession);\n    assertThat(issueFilter).isNotNull();\n    assertThat(issueFilter.id()).isEqualTo(1L);\n  }","id":10098,"modified_method":"@Test\n  public void should_find_issue_filter() {\n    IssueFilterDto issueFilterDto = new IssueFilterDto().setId(1L).setName(\"My Issue\").setUserLogin(\"john\");\n    when(issueFilterDao.selectById(1L)).thenReturn(issueFilterDto);\n\n    DefaultIssueFilter issueFilter = service.find(1L, userSession);\n    assertThat(issueFilter).isNotNull();\n    assertThat(issueFilter.id()).isEqualTo(1L);\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_update() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Old Filter\").setUserLogin(\"john\"));\n\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    DefaultIssueFilter result = service.update(new DefaultIssueFilter().setId(1L).setName(\"My New Filter\").setUser(\"john\"), userSession);\n    assertThat(result.name()).isEqualTo(\"My New Filter\");\n\n    verify(issueFilterDao).update(any(IssueFilterDto.class));\n  }","id":10099,"modified_method":"@Test\n  public void should_update() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Old Filter\").setUserLogin(\"john\"));\n\n    DefaultIssueFilter result = service.update(new DefaultIssueFilter().setId(1L).setName(\"My New Filter\").setUser(\"john\"), userSession);\n    assertThat(result.name()).isEqualTo(\"My New Filter\");\n\n    verify(issueFilterDao).update(any(IssueFilterDto.class));\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_update_if_name_already_used() {\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Old Filter\").setUserLogin(\"john\"));\n    when(issueFilterDao.selectByNameAndUser(\"My Issue\", \"john\", 1L)).thenReturn(new IssueFilterDto());\n\n    try {\n      service.update(new DefaultIssueFilter().setId(1L).setUser(\"john\").setName(\"My Issue\"), userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Name already exists\");\n    }\n    verify(issueFilterDao, never()).update(any(IssueFilterDto.class));\n  }","id":10100,"modified_method":"@Test\n  public void should_not_update_if_name_already_used() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Old Filter\").setUserLogin(\"john\"));\n    when(issueFilterDao.selectByNameAndUser(\"My Issue\", \"john\", 1L)).thenReturn(new IssueFilterDto());\n\n    try {\n      service.update(new DefaultIssueFilter().setId(1L).setUser(\"john\").setName(\"My Issue\"), userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Name already exists\");\n    }\n    verify(issueFilterDao, never()).update(any(IssueFilterDto.class));\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_delete_shared_filter_if_not_admin() {\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\").setPermissions(UserRole.USER);\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"arthur\").setShared(true));\n\n    try {\n      service.delete(1L, userSession);\n      fail();\n    } catch (ForbiddenException e) {\n      assertThat(e).hasMessage(\"User is not authorized to modify this filter\");\n      verify(issueFilterDao, never()).delete(anyLong());\n    }\n  }","id":10101,"modified_method":"@Test\n  public void should_not_delete_shared_filter_if_not_admin() {\n    when(authorizationDao.selectGlobalPermissions(\"john\")).thenReturn(newArrayList(UserRole.USER));\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"arthur\").setShared(true));\n\n    try {\n      service.delete(1L, userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"User is not authorized to modify this filter\");\n    }\n    verify(issueFilterDao, never()).delete(anyLong());\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_copy() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"john\").setData(\"componentRoots=struts\"));\n    DefaultIssueFilter issueFilter = new DefaultIssueFilter().setName(\"Copy Of My Issue\");\n\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    DefaultIssueFilter result = service.copy(1L, issueFilter, userSession);\n    assertThat(result.name()).isEqualTo(\"Copy Of My Issue\");\n    assertThat(result.user()).isEqualTo(\"john\");\n    assertThat(result.data()).isEqualTo(\"componentRoots=struts\");\n\n    verify(issueFilterDao).insert(any(IssueFilterDto.class));\n  }","id":10102,"modified_method":"@Test\n  public void should_copy() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"john\").setData(\"componentRoots=struts\"));\n    DefaultIssueFilter issueFilter = new DefaultIssueFilter().setName(\"Copy Of My Issue\");\n\n    DefaultIssueFilter result = service.copy(1L, issueFilter, userSession);\n    assertThat(result.name()).isEqualTo(\"Copy Of My Issue\");\n    assertThat(result.user()).isEqualTo(\"john\");\n    assertThat(result.data()).isEqualTo(\"componentRoots=struts\");\n\n    verify(issueFilterDao).insert(any(IssueFilterDto.class));\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_copy_shared_filter() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"arthur\").setShared(true));\n    DefaultIssueFilter issueFilter = new DefaultIssueFilter().setName(\"Copy Of My Issue\");\n\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    DefaultIssueFilter result = service.copy(1L, issueFilter, userSession);\n    assertThat(result.name()).isEqualTo(\"Copy Of My Issue\");\n    assertThat(result.user()).isEqualTo(\"john\");\n\n    verify(issueFilterDao).insert(any(IssueFilterDto.class));\n  }","id":10103,"modified_method":"@Test\n  public void should_copy_shared_filter() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"arthur\").setShared(true));\n    DefaultIssueFilter issueFilter = new DefaultIssueFilter().setName(\"Copy Of My Issue\");\n\n    DefaultIssueFilter result = service.copy(1L, issueFilter, userSession);\n    assertThat(result.name()).isEqualTo(\"Copy Of My Issue\");\n    assertThat(result.user()).isEqualTo(\"john\");\n\n    verify(issueFilterDao).insert(any(IssueFilterDto.class));\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_add_favourite_on_shared_filter() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"arthur\").setShared(true));\n    // The filter is not in the favorite list --> add to favorite\n    when(issueFilterFavouriteDao.selectByUserAndIssueFilterId(\"john\", 1L)).thenReturn(null);\n\n    ArgumentCaptor<IssueFilterFavouriteDto> issueFilterFavouriteDtoCaptor = ArgumentCaptor.forClass(IssueFilterFavouriteDto.class);\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    service.toggleFavouriteIssueFilter(1L, userSession);\n    verify(issueFilterFavouriteDao).insert(issueFilterFavouriteDtoCaptor.capture());\n\n    IssueFilterFavouriteDto issueFilterFavouriteDto = issueFilterFavouriteDtoCaptor.getValue();\n    assertThat(issueFilterFavouriteDto.getIssueFilterId()).isEqualTo(1L);\n    assertThat(issueFilterFavouriteDto.getUserLogin()).isEqualTo(\"john\");\n  }","id":10104,"modified_method":"@Test\n  public void should_add_favourite_on_shared_filter() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"arthur\").setShared(true));\n    // The filter is not in the favorite list --> add to favorite\n    when(issueFilterFavouriteDao.selectByUserAndIssueFilterId(\"john\", 1L)).thenReturn(null);\n\n    ArgumentCaptor<IssueFilterFavouriteDto> issueFilterFavouriteDtoCaptor = ArgumentCaptor.forClass(IssueFilterFavouriteDto.class);\n    service.toggleFavouriteIssueFilter(1L, userSession);\n    verify(issueFilterFavouriteDao).insert(issueFilterFavouriteDtoCaptor.capture());\n\n    IssueFilterFavouriteDto issueFilterFavouriteDto = issueFilterFavouriteDtoCaptor.getValue();\n    assertThat(issueFilterFavouriteDto.getIssueFilterId()).isEqualTo(1L);\n    assertThat(issueFilterFavouriteDto.getUserLogin()).isEqualTo(\"john\");\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_delete_if_filter_not_found() {\n    when(issueFilterDao.selectById(1L)).thenReturn(null);\n\n    try {\n      UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n      service.delete(1L, userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Filter not found: 1\");\n    }\n    verify(issueFilterDao, never()).delete(anyLong());\n  }","id":10105,"modified_method":"@Test\n  public void should_not_delete_if_filter_not_found() {\n    when(issueFilterDao.selectById(1L)).thenReturn(null);\n\n    try {\n      service.delete(1L, userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Filter not found: 1\");\n    }\n    verify(issueFilterDao, never()).delete(anyLong());\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_save_if_name_already_used() {\n    when(issueFilterDao.selectByNameAndUser(eq(\"My Issue\"), eq(\"john\"), eq((Long) null))).thenReturn(new IssueFilterDto());\n    try {\n      UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n      DefaultIssueFilter issueFilter = new DefaultIssueFilter().setName(\"My Issue\");\n      service.save(issueFilter, userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Name already exists\");\n    }\n    verify(issueFilterDao, never()).insert(any(IssueFilterDto.class));\n  }","id":10106,"modified_method":"@Test\n  public void should_not_save_if_name_already_used() {\n    when(issueFilterDao.selectByNameAndUser(eq(\"My Issue\"), eq(\"john\"), eq((Long) null))).thenReturn(new IssueFilterDto());\n    try {\n      DefaultIssueFilter issueFilter = new DefaultIssueFilter().setName(\"My Issue\");\n      service.save(issueFilter, userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Name already exists\");\n    }\n    verify(issueFilterDao, never()).insert(any(IssueFilterDto.class));\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_update_data() {\n    when(issueFilterSerializer.serialize(anyMap())).thenReturn(\"componentRoots=struts\");\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Old Filter\").setUserLogin(\"john\"));\n\n    Map<String, Object> data = newHashMap();\n    data.put(\"componentRoots\", \"struts\");\n\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    DefaultIssueFilter result = service.updateFilterQuery(1L, data, userSession);\n    assertThat(result.data()).isEqualTo(\"componentRoots=struts\");\n\n    verify(issueFilterDao).update(any(IssueFilterDto.class));\n  }","id":10107,"modified_method":"@Test\n  public void should_update_data() {\n    when(issueFilterSerializer.serialize(anyMap())).thenReturn(\"componentRoots=struts\");\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Old Filter\").setUserLogin(\"john\"));\n\n    Map<String, Object> data = newHashMap();\n    data.put(\"componentRoots\", \"struts\");\n\n    DefaultIssueFilter result = service.updateFilterQuery(1L, data, userSession);\n    assertThat(result.data()).isEqualTo(\"componentRoots=struts\");\n\n    verify(issueFilterDao).update(any(IssueFilterDto.class));\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_update_shared_filter_if_admin() {\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\").setPermissions(UserRole.ADMIN);\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Old Filter\").setUserLogin(\"arthur\").setShared(true));\n\n    DefaultIssueFilter result = service.update(new DefaultIssueFilter().setId(1L).setName(\"My New Filter\"), userSession);\n    assertThat(result.name()).isEqualTo(\"My New Filter\");\n    assertThat(result.shared()).isFalse();\n\n    verify(issueFilterDao).update(any(IssueFilterDto.class));\n  }","id":10108,"modified_method":"@Test\n  public void should_update_shared_filter_if_admin() {\n    when(authorizationDao.selectGlobalPermissions(\"john\")).thenReturn(newArrayList(UserRole.ADMIN));\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Old Filter\").setUserLogin(\"arthur\").setShared(true));\n\n    DefaultIssueFilter result = service.update(new DefaultIssueFilter().setId(1L).setName(\"My New Filter\"), userSession);\n    assertThat(result.name()).isEqualTo(\"My New Filter\");\n    assertThat(result.shared()).isFalse();\n\n    verify(issueFilterDao).update(any(IssueFilterDto.class));\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_delete_favourite_issue_filter_id() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"john\").setData(\"componentRoots=struts\"));\n    // The filter is in the favorite list --> remove favorite\n    when(issueFilterFavouriteDao.selectByUserAndIssueFilterId(\"john\", 1L)).thenReturn(new IssueFilterFavouriteDto().setId(10L).setUserLogin(\"john\").setIssueFilterId(1L));\n\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    service.toggleFavouriteIssueFilter(1L, userSession);\n    verify(issueFilterFavouriteDao).delete(10L);\n  }","id":10109,"modified_method":"@Test\n  public void should_delete_favourite_issue_filter_id() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"john\").setData(\"componentRoots=struts\"));\n    // The filter is in the favorite list --> remove favorite\n    when(issueFilterFavouriteDao.selectByUserAndIssueFilterId(\"john\", 1L)).thenReturn(new IssueFilterFavouriteDto().setId(10L).setUserLogin(\"john\").setIssueFilterId(1L));\n\n    service.toggleFavouriteIssueFilter(1L, userSession);\n    verify(issueFilterFavouriteDao).delete(10L);\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_save() {\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    DefaultIssueFilter issueFilter = new DefaultIssueFilter().setName(\"My Issue\");\n    DefaultIssueFilter result = service.save(issueFilter, userSession);\n    assertThat(result.name()).isEqualTo(\"My Issue\");\n    assertThat(result.user()).isEqualTo(\"john\");\n\n    verify(issueFilterDao).insert(any(IssueFilterDto.class));\n  }","id":10110,"modified_method":"@Test\n  public void should_save() {\n    DefaultIssueFilter issueFilter = new DefaultIssueFilter().setName(\"My Issue\");\n    DefaultIssueFilter result = service.save(issueFilter, userSession);\n    assertThat(result.name()).isEqualTo(\"My Issue\");\n    assertThat(result.user()).isEqualTo(\"john\");\n\n    verify(issueFilterDao).insert(any(IssueFilterDto.class));\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_add_favourite_issue_filter_id() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"john\").setData(\"componentRoots=struts\"));\n    // The filter is not in the favorite list --> add to favorite\n    when(issueFilterFavouriteDao.selectByUserAndIssueFilterId(\"john\", 1L)).thenReturn(null);\n\n    ArgumentCaptor<IssueFilterFavouriteDto> issueFilterFavouriteDtoCaptor = ArgumentCaptor.forClass(IssueFilterFavouriteDto.class);\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    service.toggleFavouriteIssueFilter(1L, userSession);\n    verify(issueFilterFavouriteDao).insert(issueFilterFavouriteDtoCaptor.capture());\n\n    IssueFilterFavouriteDto issueFilterFavouriteDto = issueFilterFavouriteDtoCaptor.getValue();\n    assertThat(issueFilterFavouriteDto.getIssueFilterId()).isEqualTo(1L);\n    assertThat(issueFilterFavouriteDto.getUserLogin()).isEqualTo(\"john\");\n  }","id":10111,"modified_method":"@Test\n  public void should_add_favourite_issue_filter_id() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"john\").setData(\"componentRoots=struts\"));\n    // The filter is not in the favorite list --> add to favorite\n    when(issueFilterFavouriteDao.selectByUserAndIssueFilterId(\"john\", 1L)).thenReturn(null);\n\n    ArgumentCaptor<IssueFilterFavouriteDto> issueFilterFavouriteDtoCaptor = ArgumentCaptor.forClass(IssueFilterFavouriteDto.class);\n    service.toggleFavouriteIssueFilter(1L, userSession);\n    verify(issueFilterFavouriteDao).insert(issueFilterFavouriteDtoCaptor.capture());\n\n    IssueFilterFavouriteDto issueFilterFavouriteDto = issueFilterFavouriteDtoCaptor.getValue();\n    assertThat(issueFilterFavouriteDto.getIssueFilterId()).isEqualTo(1L);\n    assertThat(issueFilterFavouriteDto.getUserLogin()).isEqualTo(\"john\");\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_find_favourite_issue_filter_if_not_logged() {\n    try {\n      service.findFavoriteFilters(UserSession.ANONYMOUS);\n      fail();\n    } catch (UnauthorizedException e) {\n      // OK\n    }\n  }","id":10112,"modified_method":"@Test\n  public void should_not_find_favourite_issue_filter_if_not_logged() {\n    when(userSession.isLoggedIn()).thenReturn(false);\n\n    try {\n      service.findFavoriteFilters(userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"User is not logged in\");\n    }\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_find_shared_issue_filter() {\n    when(issueFilterDao.selectSharedWithoutUserFilters(\"john\")).thenReturn(newArrayList(new IssueFilterDto().setId(1L).setName(\"My Issue\").setUserLogin(\"john\").setShared(true)));\n\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    List<DefaultIssueFilter> results = service.findSharedFilters(userSession);\n    assertThat(results).hasSize(1);\n  }","id":10113,"modified_method":"@Test\n  public void should_find_shared_issue_filter() {\n    when(issueFilterDao.selectSharedWithoutUserFilters(\"john\")).thenReturn(newArrayList(new IssueFilterDto().setId(1L).setName(\"My Issue\").setUserLogin(\"john\").setShared(true)));\n\n    List<DefaultIssueFilter> results = service.findSharedFilters(userSession);\n    assertThat(results).hasSize(1);\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_save_if_not_logged_in() {\n    try {\n      DefaultIssueFilter issueFilter = new DefaultIssueFilter().setName(\"My Issue\");\n      service.save(issueFilter, UserSession.ANONYMOUS);\n      fail();\n    } catch (UnauthorizedException e) {\n      verify(issueFilterDao, never()).insert(any(IssueFilterDto.class));\n    }\n  }","id":10114,"modified_method":"@Test\n  public void should_not_save_if_not_logged() {\n    when(userSession.isLoggedIn()).thenReturn(false);\n    try {\n      DefaultIssueFilter issueFilter = new DefaultIssueFilter().setName(\"My Issue\");\n      service.save(issueFilter, userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"User is not logged in\");\n    }\n    verify(issueFilterDao, never()).insert(any(IssueFilterDto.class));\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_find_by_user_if_not_logged_in() {\n    try {\n      service.findByUser(UserSession.ANONYMOUS);\n      fail();\n    } catch (UnauthorizedException e) {\n      // OK\n    }\n  }","id":10115,"modified_method":"@Test\n  public void should_not_find_by_user_if_not_logged() {\n    when(userSession.isLoggedIn()).thenReturn(false);\n    try {\n      service.findByUser(userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"User is not logged in\");\n    }\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_update_if_shared_and_not_admin() {\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\").setPermissions(UserRole.USER);\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Old Filter\").setUserLogin(\"arthur\").setShared(true));\n\n    try {\n      service.update(new DefaultIssueFilter().setId(1L).setName(\"My New Filter\"), userSession);\n      fail();\n    } catch (ForbiddenException e) {\n      assertThat(e).hasMessage(\"User is not authorized to modify this filter\");\n      verify(issueFilterDao, never()).update(any(IssueFilterDto.class));\n    }\n  }","id":10116,"modified_method":"@Test\n  public void should_not_update_if_shared_and_not_admin() {\n    when(authorizationDao.selectGlobalPermissions(\"john\")).thenReturn(newArrayList(UserRole.USER));\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Old Filter\").setUserLogin(\"arthur\").setShared(true));\n\n    try {\n      service.update(new DefaultIssueFilter().setId(1L).setName(\"My New Filter\"), userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"User is not authorized to modify this filter\");\n    }\n    verify(issueFilterDao, never()).update(any(IssueFilterDto.class));\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_toggle_favourite_filter_if_filter_not_found() {\n    when(issueFilterDao.selectById(1L)).thenReturn(null);\n    try {\n      UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n      service.toggleFavouriteIssueFilter(1L, userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Filter not found: 1\");\n    }\n    verify(issueFilterFavouriteDao, never()).delete(anyLong());\n  }","id":10117,"modified_method":"@Test\n  public void should_not_toggle_favourite_filter_if_filter_not_found() {\n    when(issueFilterDao.selectById(1L)).thenReturn(null);\n    try {\n      service.toggleFavouriteIssueFilter(1L, userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalArgumentException.class).hasMessage(\"Filter not found: 1\");\n    }\n    verify(issueFilterFavouriteDao, never()).delete(anyLong());\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_find_if_not_shared_and_user_is_not_the_owner_of_filter() {\n    IssueFilterDto issueFilterDto = new IssueFilterDto().setId(1L).setName(\"My Issue\").setUserLogin(\"eric\").setShared(false);\n    when(issueFilterDao.selectById(1L)).thenReturn(issueFilterDto);\n    try {\n      // John is not authorized to see eric filters\n      UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n      service.find(1L, userSession);\n      fail();\n    } catch (ForbiddenException e) {\n      assertThat(e).hasMessage(\"User is not authorized to read this filter\");\n    }\n  }","id":10118,"modified_method":"@Test\n  public void should_not_find_if_not_shared_and_user_is_not_the_owner_of_filter() {\n    IssueFilterDto issueFilterDto = new IssueFilterDto().setId(1L).setName(\"My Issue\").setUserLogin(\"eric\").setShared(false);\n    when(issueFilterDao.selectById(1L)).thenReturn(issueFilterDto);\n    try {\n      // John is not authorized to see eric filters\n      service.find(1L, userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"User is not authorized to read this filter\");\n    }\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_find_favourite_issue_filter() {\n    when(issueFilterDao.selectByUserWithOnlyFavoriteFilters(\"john\")).thenReturn(newArrayList(new IssueFilterDto().setId(1L).setName(\"My Issue\").setUserLogin(\"john\")));\n\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    List<DefaultIssueFilter> results = service.findFavoriteFilters(userSession);\n    assertThat(results).hasSize(1);\n  }","id":10119,"modified_method":"@Test\n  public void should_find_favourite_issue_filter() {\n    when(issueFilterDao.selectByUserWithOnlyFavoriteFilters(\"john\")).thenReturn(newArrayList(new IssueFilterDto().setId(1L).setName(\"My Issue\").setUserLogin(\"john\")));\n\n    List<DefaultIssueFilter> results = service.findFavoriteFilters(userSession);\n    assertThat(results).hasSize(1);\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_change_own_filter_ownership() throws Exception {\n    String currentUser = \"dave.loper\";\n    IssueFilterDto sharedFilter = new IssueFilterDto().setId(1L).setName(\"My filter\").setUserLogin(currentUser).setShared(true);\n\n    MockUserSession.set().setPermissions(UserRole.USER);\n    when(issueFilterDao.selectById(1L)).thenReturn(sharedFilter);\n\n    try {\n      DefaultIssueFilter issueFilter = new DefaultIssueFilter().setId(1L).setName(\"My filter\").setShared(true).setUser(\"new.owner\");\n      service.update(issueFilter, MockUserSession.create().setUserId(1).setLogin(currentUser));\n      fail();\n    } catch (ForbiddenException e) {\n      assertThat(e).hasMessage(\"User is not authorized to change the owner of this filter\");\n      verify(issueFilterDao, never()).update(any(IssueFilterDto.class));\n    }\n\n  }","id":10120,"modified_method":"@Test\n  public void should_not_change_own_filter_ownership() throws Exception {\n    String currentUser = \"dave.loper\";\n    IssueFilterDto sharedFilter = new IssueFilterDto().setId(1L).setName(\"My filter\").setUserLogin(currentUser).setShared(true);\n\n    when(authorizationDao.selectGlobalPermissions(currentUser)).thenReturn(newArrayList(UserRole.USER));\n    when(issueFilterDao.selectById(1L)).thenReturn(sharedFilter);\n\n    try {\n      DefaultIssueFilter issueFilter = new DefaultIssueFilter().setId(1L).setName(\"My filter\").setShared(true).setUser(\"new.owner\");\n      service.update(issueFilter, MockUserSession.create().setUserId(1).setLogin(currentUser));\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"User is not authorized to change the owner of this filter\");\n    }\n\n    verify(issueFilterDao, never()).update(any(IssueFilterDto.class));\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_delete_favorite_filter_on_delete() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"john\"));\n    when(issueFilterFavouriteDao.selectByUserAndIssueFilterId(\"john\", 1L)).thenReturn(new IssueFilterFavouriteDto().setId(10L).setUserLogin(\"john\").setIssueFilterId(1L));\n\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\");\n    service.delete(1L, userSession);\n\n    verify(issueFilterDao).delete(1L);\n    verify(issueFilterFavouriteDao).deleteByIssueFilterId(1L);\n  }","id":10121,"modified_method":"@Test\n  public void should_delete_favorite_filter_on_delete() {\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"john\"));\n    when(issueFilterFavouriteDao.selectByUserAndIssueFilterId(\"john\", 1L)).thenReturn(new IssueFilterFavouriteDto().setId(10L).setUserLogin(\"john\").setIssueFilterId(1L));\n\n    service.delete(1L, userSession);\n\n    verify(issueFilterDao).delete(1L);\n    verify(issueFilterFavouriteDao).deleteByIssueFilterId(1L);\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_delete_shared_filter_if_user_is_admin() {\n    UserSession userSession = MockUserSession.create().setUserId(1).setLogin(\"john\").setPermissions(UserRole.ADMIN);\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"arthur\").setShared(true));\n\n    service.delete(1L, userSession);\n\n    verify(issueFilterDao).delete(1L);\n  }","id":10122,"modified_method":"@Test\n  public void should_delete_shared_filter_if_user_is_admin() {\n    when(authorizationDao.selectGlobalPermissions(\"john\")).thenReturn(newArrayList(UserRole.ADMIN));\n    when(issueFilterDao.selectById(1L)).thenReturn(new IssueFilterDto().setId(1L).setName(\"My Issues\").setUserLogin(\"arthur\").setShared(true));\n\n    service.delete(1L, userSession);\n\n    verify(issueFilterDao).delete(1L);\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_find_by_id_if_not_logged() {\n    try {\n      service.find(1L, UserSession.ANONYMOUS);\n      fail();\n    } catch (UnauthorizedException e) {\n      verifyZeroInteractions(issueFilterDao);\n    }\n  }","id":10123,"modified_method":"@Test\n  public void should_not_find_by_id_if_not_logged() {\n    when(userSession.isLoggedIn()).thenReturn(false);\n    try {\n      service.find(1L, userSession);\n      fail();\n    } catch (Exception e) {\n      assertThat(e).isInstanceOf(IllegalStateException.class).hasMessage(\"User is not logged in\");\n    }\n    verifyZeroInteractions(issueFilterDao);\n  }","commit_id":"a740c7f2fa413287f04d9f53e9dfb5f1d707a396","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n    public void testPassesJavaOpts() {\n        VanillaJavaApp javaProcess = new VanillaJavaApp(MutableMap.builder()\n                .put(\"main\", \"my.Main\")\n                .put(\"javaOpts\", ImmutableList.of(\"-abc\"))\n                .put(\"useJmx\", false)\n                .build(), \n                app);\n        app.startManagement();\n        app.start(ImmutableList.of(loc));\n        \n        String runDir = javaProcess.getRunDir();\n        String defaultJavaOpts = \"-Xms128m -Xmx512m -XX:MaxPermSize=512m\";\n        String expectedJavaOpts = defaultJavaOpts+\" -abc\";\n        Map<String,String> expectedEnvs = ImmutableMap.<String,String>of(\"JAVA_OPTS\", expectedJavaOpts);\n        List<String> expectedCmds = ImmutableList.of(String.format(\"java $JAVA_OPTS -cp \\\"lib/*\\\" my.Main  >> %s/console 2>&1 <\/dev/null &\", runDir));\n        \n        assertHasExpectedCmds(expectedCmds, expectedEnvs);\n    }","id":10124,"modified_method":"@Test\n    public void testPassesJavaOpts() {\n        VanillaJavaApp javaProcess = app.addChild(EntitySpec.create(VanillaJavaApp.class)\n            .configure(\"main\", \"my.Main\").configure(\"useJmx\", false).configure(\"javaOpts\", ImmutableList.of(\"-abc\")));\n        app.startManagement();\n        app.start(ImmutableList.of(loc));\n        \n        String runDir = javaProcess.getRunDir();\n        String defaultJavaOpts = \"-Xms128m -Xmx512m -XX:MaxPermSize=512m\";\n        String expectedJavaOpts = defaultJavaOpts+\" -abc\";\n        Map<String,String> expectedEnvs = ImmutableMap.<String,String>of(\"JAVA_OPTS\", expectedJavaOpts);\n        List<String> expectedCmds = ImmutableList.of(String.format(\"java $JAVA_OPTS -cp \\\"lib/*\\\" my.Main  >> %s/console 2>&1 <\/dev/null &\", runDir));\n        \n        assertHasExpectedCmds(expectedCmds, expectedEnvs);\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"private void assertJmxWithPropsHasPhrases(Map props,\n            List<String> expectedPhrases,\n            List<String> forbiddenPhrases) {\n        if (!props.containsKey(\"main\")) props.put(\"main\", \"my.Main\");\n        @SuppressWarnings({ \"unused\" })\n        VanillaJavaApp javaProcess = new VanillaJavaApp(props, app) {\n            protected void connectSensors() {\n                /* nothing here */\n                setAttribute(SERVICE_UP, true);\n            }\n        };\n        app.startManagement();\n        app.start(ImmutableList.of(loc));\n        \n        List<String> phrases = new ArrayList<String>(expectedPhrases);\n        Set<String> forbiddenPhrasesFound = new LinkedHashSet<String>();\n        for (ExecCmd cmd : execScriptCmds) {\n            String biggun = \"\"+cmd.env+\" \"+cmd.commands;\n            Iterator<String> pi = phrases.iterator();\n            while (pi.hasNext()) {\n                String phrase = pi.next();\n                if (biggun.contains(phrase)) pi.remove();\n            }\n            if (forbiddenPhrases!=null)\n                for (String p: forbiddenPhrases)\n                    if (biggun.contains(p)) forbiddenPhrasesFound.add(p);\n        }\n        \n        if (!phrases.isEmpty()) {\n            log.warn(\"Missing phrases in commands: \"+phrases+\"\\nCOMMANDS: \"+execScriptCmds);\n            fail(\"Missing phrases in commands: \"+phrases);\n        }\n        if (!forbiddenPhrasesFound.isEmpty()) {\n            log.warn(\"Forbidden phrases found in commands: \"+forbiddenPhrasesFound+\"\\nCOMMANDS: \"+execScriptCmds);\n            fail(\"Forbidden phrases found in commands: \"+forbiddenPhrasesFound);\n        }\n    }","id":10125,"modified_method":"private void assertJmxWithPropsHasPhrases(Map props,\n            List<String> expectedPhrases,\n            List<String> forbiddenPhrases) {\n        if (!props.containsKey(\"main\")) props.put(\"main\", \"my.Main\");\n        @SuppressWarnings({ \"unused\" })\n        VanillaJavaApp javaProcess = app.addChild(EntitySpec.create(VanillaJavaApp.class, TestingNoSensorsVanillaJavaAppImpl.class));\n        app.startManagement();\n        app.start(ImmutableList.of(loc));\n        \n        List<String> phrases = new ArrayList<String>(expectedPhrases);\n        Set<String> forbiddenPhrasesFound = new LinkedHashSet<String>();\n        for (ExecCmd cmd : execScriptCmds) {\n            String biggun = \"\"+cmd.env+\" \"+cmd.commands;\n            Iterator<String> pi = phrases.iterator();\n            while (pi.hasNext()) {\n                String phrase = pi.next();\n                if (biggun.contains(phrase)) pi.remove();\n            }\n            if (forbiddenPhrases!=null)\n                for (String p: forbiddenPhrases)\n                    if (biggun.contains(p)) forbiddenPhrasesFound.add(p);\n        }\n        \n        if (!phrases.isEmpty()) {\n            log.warn(\"Missing phrases in commands: \"+phrases+\"\\nCOMMANDS: \"+execScriptCmds);\n            fail(\"Missing phrases in commands: \"+phrases);\n        }\n        if (!forbiddenPhrasesFound.isEmpty()) {\n            log.warn(\"Forbidden phrases found in commands: \"+forbiddenPhrasesFound+\"\\nCOMMANDS: \"+execScriptCmds);\n            fail(\"Forbidden phrases found in commands: \"+forbiddenPhrasesFound);\n        }\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testSimpleLaunchesJavaProcess() {\n        VanillaJavaApp javaProcess = new VanillaJavaApp(MutableMap.builder()\n                .put(\"main\", \"my.Main\")\n                .put(\"useJmx\", false)\n                .build(), \n                app);\n        app.startManagement();\n        app.start(ImmutableList.of(loc));\n        \n        String runDir = javaProcess.getRunDir();\n        Map<String,String> expectedEnvs = ImmutableMap.<String,String>of();\n        List<String> expectedCmds = ImmutableList.of(String.format(\"java $JAVA_OPTS -cp \\\"lib/*\\\" my.Main  >> %s/console 2>&1 <\/dev/null &\", runDir));\n        \n        assertHasExpectedCmds(expectedCmds, expectedEnvs);\n    }","id":10126,"modified_method":"@Test\n    public void testSimpleLaunchesJavaProcess() {\n        VanillaJavaApp javaProcess = app.addChild(EntitySpec.create(VanillaJavaApp.class)\n            .configure(\"main\", \"my.Main\").configure(\"useJmx\", false));\n        app.startManagement();\n        app.start(ImmutableList.of(loc));\n        \n        String runDir = javaProcess.getRunDir();\n        Map<String,String> expectedEnvs = ImmutableMap.<String,String>of();\n        List<String> expectedCmds = ImmutableList.of(String.format(\"java $JAVA_OPTS -cp \\\"lib/*\\\" my.Main  >> %s/console 2>&1 <\/dev/null &\", runDir));\n        \n        assertHasExpectedCmds(expectedCmds, expectedEnvs);\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testPassesJavaSysProps() {\n        VanillaJavaApp javaProcess = new VanillaJavaApp(MutableMap.builder()\n                .put(\"main\", \"my.Main\")\n                .put(\"javaSysProps\", ImmutableMap.of(\"mykey\", \"myval\"))\n                .put(\"useJmx\", false)\n                .build(), \n                app);\n        app.startManagement();\n        app.start(ImmutableList.of(loc));\n        \n        String runDir = javaProcess.getRunDir();\n        String defaultJavaOpts = \"-Xms128m -Xmx512m -XX:MaxPermSize=512m\";\n        String expectedJavaOpts = defaultJavaOpts+\" -Dmykey=myval\";\n        Map<String,String> expectedEnvs = ImmutableMap.<String,String>of(\"JAVA_OPTS\", expectedJavaOpts);\n        List<String> expectedCmds = ImmutableList.of(String.format(\"java $JAVA_OPTS -cp \\\"lib/*\\\" my.Main  >> %s/console 2>&1 <\/dev/null &\", runDir));\n        \n        assertHasExpectedCmds(expectedCmds, expectedEnvs);\n    }","id":10127,"modified_method":"@Test\n    public void testPassesJavaSysProps() {\n        VanillaJavaApp javaProcess = app.addChild(EntitySpec.create(VanillaJavaApp.class)\n            .configure(\"main\", \"my.Main\").configure(\"useJmx\", false).configure(\"javaSysProps\", ImmutableMap.of(\"mykey\", \"myval\")));\n\n        app.startManagement();\n        app.start(ImmutableList.of(loc));\n        \n        String runDir = javaProcess.getRunDir();\n        String defaultJavaOpts = \"-Xms128m -Xmx512m -XX:MaxPermSize=512m\";\n        String expectedJavaOpts = defaultJavaOpts+\" -Dmykey=myval\";\n        Map<String,String> expectedEnvs = ImmutableMap.<String,String>of(\"JAVA_OPTS\", expectedJavaOpts);\n        List<String> expectedCmds = ImmutableList.of(String.format(\"java $JAVA_OPTS -cp \\\"lib/*\\\" my.Main  >> %s/console 2>&1 <\/dev/null &\", runDir));\n        \n        assertHasExpectedCmds(expectedCmds, expectedEnvs);\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testPassesJavaArgs() {\n        VanillaJavaApp javaProcess = new VanillaJavaApp(MutableMap.builder()\n                .put(\"main\", \"my.Main\")\n                .put(\"args\", ImmutableList.of(\"a1\", \"a2\"))\n                .put(\"useJmx\", false)\n                .build(), \n                app);\n        app.startManagement();\n        app.start(ImmutableList.of(loc));\n        \n        String runDir = javaProcess.getRunDir();\n        Map<String,String> expectedEnvs = ImmutableMap.<String,String>of();\n        List<String> expectedCmds = ImmutableList.of(String.format(\"java $JAVA_OPTS -cp \\\"lib/*\\\" my.Main \\\"a1\\\" \\\"a2\\\" >> %s/console 2>&1 <\/dev/null &\", runDir));\n        \n        assertHasExpectedCmds(expectedCmds, expectedEnvs);\n    }","id":10128,"modified_method":"@Test\n    public void testPassesJavaArgs() {\n        VanillaJavaApp javaProcess = app.addChild(EntitySpec.create(VanillaJavaApp.class)\n            .configure(\"main\", \"my.Main\").configure(\"useJmx\", false).configure(\"args\", ImmutableList.of(\"a1\", \"a2\")));\n        app.startManagement();\n        app.start(ImmutableList.of(loc));\n        \n        String runDir = javaProcess.getRunDir();\n        Map<String,String> expectedEnvs = ImmutableMap.<String,String>of();\n        List<String> expectedCmds = ImmutableList.of(String.format(\"java $JAVA_OPTS -cp \\\"lib/*\\\" my.Main \\\"a1\\\" \\\"a2\\\" >> %s/console 2>&1 <\/dev/null &\", runDir));\n        \n        assertHasExpectedCmds(expectedCmds, expectedEnvs);\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testPassesJavaOptsOverridingDefaults() {\n        VanillaJavaApp javaProcess = new VanillaJavaApp(MutableMap.builder()\n                .put(\"main\", \"my.Main\")\n                .put(\"javaOpts\", ImmutableList.of(\"-Xmx567m\", \"-XX:MaxPermSize=567m\"))\n                .put(\"useJmx\", false)\n                .build(), \n                app);\n        app.startManagement();\n        app.start(ImmutableList.of(loc));\n        \n        String runDir = javaProcess.getRunDir();\n        String expectedJavaOpts = \"-Xms128m -Xmx567m -XX:MaxPermSize=567m\";\n        Map<String,String> expectedEnvs = ImmutableMap.<String,String>of(\"JAVA_OPTS\", expectedJavaOpts);\n        List<String> expectedCmds = ImmutableList.of(String.format(\"java $JAVA_OPTS -cp \\\"lib/*\\\" my.Main  >> %s/console 2>&1 <\/dev/null &\", runDir));\n        \n        assertHasExpectedCmds(expectedCmds, expectedEnvs);\n    }","id":10129,"modified_method":"@Test\n    public void testPassesJavaOptsOverridingDefaults() {\n        VanillaJavaApp javaProcess = app.addChild(EntitySpec.create(VanillaJavaApp.class)\n            .configure(\"main\", \"my.Main\").configure(\"useJmx\", false).configure(\"javaOpts\", ImmutableList.of(\"-Xmx567m\", \"-XX:MaxPermSize=567m\")));\n        app.startManagement();\n        app.start(ImmutableList.of(loc));\n        \n        String runDir = javaProcess.getRunDir();\n        String expectedJavaOpts = \"-Xms128m -Xmx567m -XX:MaxPermSize=567m\";\n        Map<String,String> expectedEnvs = ImmutableMap.<String,String>of(\"JAVA_OPTS\", expectedJavaOpts);\n        List<String> expectedCmds = ImmutableList.of(String.format(\"java $JAVA_OPTS -cp \\\"lib/*\\\" my.Main  >> %s/console 2>&1 <\/dev/null &\", runDir));\n        \n        assertHasExpectedCmds(expectedCmds, expectedEnvs);\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testPassesJavaOptsObeyingMutualExclusions() {\n        VanillaJavaApp javaProcess = new VanillaJavaApp(MutableMap.builder()\n                .put(\"main\", \"my.Main\")\n                .put(\"javaOpts\", ImmutableList.of(\"-client\"))\n                .put(\"useJmx\", false)\n                .build(), \n                app) {\n            @Override public VanillaJavaAppSshDriver newDriver(MachineLocation loc) {\n                return new VanillaJavaAppSshDriver(this, (SshMachineLocation)loc) {\n                    @Override protected List<String> getCustomJavaConfigOptions() {\n                        return MutableList.<String>builder()\n                                .addAll(super.getCustomJavaConfigOptions())\n                                .add(\"-server\")\n                                .build();\n                    };\n                };\n            }\n        };\n        app.startManagement();\n        app.start(ImmutableList.of(loc));\n        \n        String runDir = javaProcess.getRunDir();\n        String defaultJavaOpts = \"-Xms128m -Xmx512m -XX:MaxPermSize=512m\";\n        String expectedJavaOpts = defaultJavaOpts+\" -client\";\n        Map<String,String> expectedEnvs = ImmutableMap.<String,String>of(\"JAVA_OPTS\", expectedJavaOpts);\n        List<String> expectedCmds = ImmutableList.of(String.format(\"java $JAVA_OPTS -cp \\\"lib/*\\\" my.Main  >> %s/console 2>&1 <\/dev/null &\", runDir));\n        \n        assertHasExpectedCmds(expectedCmds, expectedEnvs);\n    }","id":10130,"modified_method":"@Test\n    public void testPassesJavaOptsObeyingMutualExclusions() {\n        VanillaJavaApp javaProcess = app.addChild(EntitySpec.create(VanillaJavaApp.class, TestingJavaOptsVanillaJavaAppImpl.class)\n            .configure(\"main\", \"my.Main\").configure(\"useJmx\", false).configure(\"javaOpts\", ImmutableList.of(\"-client\")));\n        \n        app.startManagement();\n        app.start(ImmutableList.of(loc));\n        \n        String runDir = javaProcess.getRunDir();\n        String defaultJavaOpts = \"-Xms128m -Xmx512m -XX:MaxPermSize=512m\";\n        String expectedJavaOpts = defaultJavaOpts+\" -client\";\n        Map<String,String> expectedEnvs = ImmutableMap.<String,String>of(\"JAVA_OPTS\", expectedJavaOpts);\n        List<String> expectedCmds = ImmutableList.of(String.format(\"java $JAVA_OPTS -cp \\\"lib/*\\\" my.Main  >> %s/console 2>&1 <\/dev/null &\", runDir));\n        \n        assertHasExpectedCmds(expectedCmds, expectedEnvs);\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test(groups=\"Integration\")\n    public void testRebindToKilledJavaApp() throws Exception {\n        VanillaJavaApp javaProcess = new VanillaJavaApp(MutableMap.of(\"main\", MAIN_CLASS.getCanonicalName(), \"classpath\", ImmutableList.of(BROOKLYN_THIS_CLASSPATH)), app);\n        Entities.manage(javaProcess);\n        app.start(ImmutableList.of(loc));\n        javaProcess.getDriver().kill();\n        \n        long starttime = System.currentTimeMillis();\n        rebind();\n        long rebindTime = System.currentTimeMillis() - starttime;\n        \n        VanillaJavaApp javaProcess2 = (VanillaJavaApp) Iterables.find(app.getChildren(), Predicates.instanceOf(VanillaJavaApp.class));\n        EntityTestUtils.assertAttributeEqualsEventually(javaProcess2, VanillaJavaApp.SERVICE_UP, false);\n        \n        // check that it was quick (previously it hung for \n        assertTrue(rebindTime < 30*1000, \"rebindTime=\"+rebindTime);\n    }","id":10131,"modified_method":"@Test(groups=\"Integration\")\n    public void testRebindToKilledJavaApp() throws Exception {\n        VanillaJavaApp javaProcess = app.addChild(EntitySpec.create(VanillaJavaApp.class, TestingJavaOptsVanillaJavaAppImpl.class)\n            .configure(\"main\", MAIN_CLASS.getCanonicalName()).configure(\"classpath\", ImmutableList.of(BROOKLYN_THIS_CLASSPATH)));\n        Entities.manage(javaProcess);\n        app.start(ImmutableList.of(loc));\n        javaProcess.kill();\n        \n        long starttime = System.currentTimeMillis();\n        rebind();\n        long rebindTime = System.currentTimeMillis() - starttime;\n        \n        VanillaJavaApp javaProcess2 = (VanillaJavaApp) Iterables.find(app.getChildren(), Predicates.instanceOf(VanillaJavaApp.class));\n        EntityTestUtils.assertAttributeEqualsEventually(javaProcess2, VanillaJavaApp.SERVICE_UP, false);\n        \n        // check that it was quick (previously it hung for \n        assertTrue(rebindTime < 30*1000, \"rebindTime=\"+rebindTime);\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test(groups=\"Integration\")\n    public void testRebindToJavaApp() throws Exception {\n        VanillaJavaApp javaProcess = new VanillaJavaApp(MutableMap.of(\"main\", MAIN_CLASS.getCanonicalName(), \"classpath\", ImmutableList.of(BROOKLYN_THIS_CLASSPATH)), app);\n        Entities.manage(javaProcess);\n        app.start(ImmutableList.of(loc));\n\n        rebind();\n        VanillaJavaApp javaProcess2 = (VanillaJavaApp) Iterables.find(app.getChildren(), Predicates.instanceOf(VanillaJavaApp.class));\n        \n        EntityTestUtils.assertAttributeEqualsEventually(javaProcess2, VanillaJavaApp.SERVICE_UP, true);\n    }","id":10132,"modified_method":"@Test(groups=\"Integration\")\n    public void testRebindToJavaApp() throws Exception {\n        VanillaJavaApp javaProcess = app.addChild(EntitySpec.create(VanillaJavaApp.class, TestingJavaOptsVanillaJavaAppImpl.class)\n            .configure(\"main\", MAIN_CLASS.getCanonicalName()).configure(\"classpath\", ImmutableList.of(BROOKLYN_THIS_CLASSPATH)));\n\n        Entities.manage(javaProcess);\n        app.start(ImmutableList.of(loc));\n\n        rebind();\n        VanillaJavaApp javaProcess2 = (VanillaJavaApp) Iterables.find(app.getChildren(), Predicates.instanceOf(VanillaJavaApp.class));\n        \n        EntityTestUtils.assertAttributeEqualsEventually(javaProcess2, VanillaJavaApp.SERVICE_UP, true);\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public String getArgs(){\n        List<String> args = entity.getConfig(VanillaJavaApp.ARGS);\n        StringBuffer sb = new StringBuffer();\n        for(Iterator<String> it = args.iterator();it.hasNext();){\n            String arg = it.next();\n            BashStringEscapes.assertValidForDoubleQuotingInBash(arg);\n            sb.append(format(\"\\\"%s\\\"\",arg));\n            if(it.hasNext()){\n                sb.append(\" \");\n            }\n        }\n\n        return sb.toString();\n    }","id":10133,"modified_method":"public String getArgs(){\n        List<Object> args = entity.getConfig(VanillaJavaApp.ARGS);\n        StringBuffer sb = new StringBuffer();\n        for(Iterator<Object> it = args.iterator();it.hasNext();){\n            Object argO = it.next();\n            String arg;\n            try {\n                arg = Tasks.resolveValue(argO, String.class, getEntity().getExecutionContext());\n            } catch (Exception e) {\n                throw Exceptions.propagate(e);\n            }\n            BashStringEscapes.assertValidForDoubleQuotingInBash(arg);\n            sb.append(format(\"\\\"%s\\\"\",arg));\n            if(it.hasNext()){\n                sb.append(\" \");\n            }\n        }\n\n        return sb.toString();\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public VanillaJavaApp getEntity() {\n        return (VanillaJavaApp) super.getEntity();\n    }","id":10134,"modified_method":"public VanillaJavaAppImpl getEntity() {\n        return (VanillaJavaAppImpl) super.getEntity();\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public VanillaJavaAppSshDriver(VanillaJavaApp entity, SshMachineLocation machine) {\n        super(entity, machine);\n    }","id":10135,"modified_method":"public VanillaJavaAppSshDriver(VanillaJavaAppImpl entity, SshMachineLocation machine) {\n        super(entity, machine);\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test(groups={\"Integration\"})\n    public void testStartsAndStops() throws Exception {\n        String main = MAIN_CLASS.getCanonicalName();\n        VanillaJavaApp javaProcess = new VanillaJavaApp(MutableMap.builder()\n                .put(\"parent\", app)\n                .put(\"main\", main)\n                .put(\"classpath\", ImmutableList.of(BROOKLYN_THIS_CLASSPATH))\n                .put(\"args\", ImmutableList.of())\n                .build());\n        Entities.startManagement(app);\n        app.start(ImmutableList.of(loc));\n        assertEquals(javaProcess.getAttribute(VanillaJavaApp.SERVICE_STATE), Lifecycle.RUNNING);\n\n        javaProcess.stop();\n        assertEquals(javaProcess.getAttribute(VanillaJavaApp.SERVICE_STATE), Lifecycle.STOPPED);\n    }","id":10136,"modified_method":"@Test(groups={\"Integration\"})\n    public void testStartsAndStops() throws Exception {\n        String main = MAIN_CLASS.getCanonicalName();\n        final VanillaJavaApp javaProcess = app.addChild(EntitySpec.create(VanillaJavaApp.class)\n            .configure(\"main\", main).configure(\"classpath\", ImmutableList.of(BROOKLYN_THIS_CLASSPATH))\n            .configure(\"args\", ImmutableList.of()));\n        Entities.startManagement(app);\n        app.start(ImmutableList.of(loc));\n        assertEquals(javaProcess.getAttribute(VanillaJavaApp.SERVICE_STATE), Lifecycle.RUNNING);\n\n        javaProcess.stop();\n        assertEquals(javaProcess.getAttribute(VanillaJavaApp.SERVICE_STATE), Lifecycle.STOPPED);\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test(groups={\"WIP\", \"Integration\"})\n    public void testJavaSystemProperties() throws Exception {\n        VanillaJavaApp javaProcess = new VanillaJavaApp(MutableMap.builder()\n                .put(\"parent\", app)\n                .put(\"main\", \"my.Main\")\n                .put(\"classpath\", ImmutableList.of(\"c1\", \"c2\"))\n                .put(\"args\", ImmutableList.of(\"a1\", \"a2\"))\n                .build());\n        javaProcess.setConfig(UsesJava.JAVA_SYSPROPS, ImmutableMap.of(\"fooKey\", \"fooValue\", \"barKey\", \"barValue\"));\n        // TODO: how to test: launch standalone app that outputs system properties to stdout? Probe via JMX?\n    }","id":10137,"modified_method":"@Test(groups={\"WIP\", \"Integration\"})\n    public void testJavaSystemProperties() throws Exception {\n        final VanillaJavaApp javaProcess = app.addChild(EntitySpec.create(VanillaJavaApp.class)\n            .configure(\"main\", \"my.Main\").configure(\"classpath\", ImmutableList.of(\"c1\", \"c2\"))\n            .configure(\"args\", ImmutableList.of(\"a1\", \"a2\")));\n        ((EntityLocal)javaProcess).setConfig(UsesJava.JAVA_SYSPROPS, ImmutableMap.of(\"fooKey\", \"fooValue\", \"barKey\", \"barValue\"));\n        // TODO: how to test: launch standalone app that outputs system properties to stdout? Probe via JMX?\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public AsserterForJmxConnection(VanillaJavaApp e) throws MalformedURLException {\n            this.entity = e;\n            \n            JmxHelper jmxHelper = new JmxHelper(entity);\n            this.url = new JMXServiceURL(jmxHelper.getUrl());\n            this.env = Maps.newLinkedHashMap(jmxHelper.getConnectionEnvVars());\n        }","id":10138,"modified_method":"public AsserterForJmxConnection(VanillaJavaApp e) throws MalformedURLException {\n            this.entity = e;\n            \n            JmxHelper jmxHelper = new JmxHelper((EntityLocal)entity);\n            this.url = new JMXServiceURL(jmxHelper.getUrl());\n            this.env = Maps.newLinkedHashMap(jmxHelper.getConnectionEnvVars());\n        }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test(groups={\"Integration\"})\n    public void testStartsWithJmxPortSpecifiedInConfig() throws Exception {\n        int port = 53405;\n        String main = MAIN_CLASS.getCanonicalName();\n        final VanillaJavaApp javaProcess = new VanillaJavaApp(MutableMap.builder()\n                .put(\"parent\", app)\n                .put(\"main\", main)\n                .put(\"classpath\", ImmutableList.of(BROOKLYN_THIS_CLASSPATH))\n                .put(\"args\", ImmutableList.of())\n                .build());\n        javaProcess.setConfig(UsesJmx.JMX_PORT, PortRanges.fromInteger(port));\n        Entities.startManagement(app);\n        app.start(ImmutableList.of(loc));\n\n        assertEquals(javaProcess.getAttribute(UsesJmx.JMX_PORT), (Integer)port);\n    }","id":10139,"modified_method":"@Test(groups={\"Integration\"})\n    public void testStartsWithJmxPortSpecifiedInConfig() throws Exception {\n        int port = 53405;\n        String main = MAIN_CLASS.getCanonicalName();\n        VanillaJavaApp javaProcess = app.addChild(EntitySpec.create(VanillaJavaApp.class)\n            .configure(\"main\", main).configure(\"classpath\", ImmutableList.of(BROOKLYN_THIS_CLASSPATH))\n            .configure(\"args\", ImmutableList.of()));\n        ((EntityLocal)javaProcess).setConfig(UsesJmx.JMX_PORT, PortRanges.fromInteger(port));\n        Entities.startManagement(app);\n        app.start(ImmutableList.of(loc));\n\n        assertEquals(javaProcess.getAttribute(UsesJmx.JMX_PORT), (Integer)port);\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test\n    public void testReadsConfigFromFlags() throws Exception {\n        VanillaJavaApp javaProcess = new VanillaJavaApp(MutableMap.builder()\n                .put(\"parent\", app)\n                .put(\"main\", \"my.Main\")\n                .put(\"classpath\", ImmutableList.of(\"c1\", \"c2\"))\n                .put(\"args\", ImmutableList.of(\"a1\", \"a2\"))\n                .build());\n        assertEquals(javaProcess.getMainClass(), \"my.Main\");\n        assertEquals(javaProcess.getClasspath(), ImmutableList.of(\"c1\",\"c2\"));\n        assertEquals(javaProcess.getConfig(VanillaJavaApp.ARGS), ImmutableList.of(\"a1\", \"a2\"));\n    }","id":10140,"modified_method":"@Test\n    public void testReadsConfigFromFlags() throws Exception {\n        final VanillaJavaApp javaProcess = app.addChild(EntitySpec.create(VanillaJavaApp.class)\n            .configure(\"main\", \"my.Main\").configure(\"classpath\", ImmutableList.of(\"c1\", \"c2\"))\n            .configure(\"args\", ImmutableList.of(\"a1\", \"a2\")));\n\n        assertEquals(javaProcess.getMainClass(), \"my.Main\");\n        assertEquals(javaProcess.getClasspath(), ImmutableList.of(\"c1\",\"c2\"));\n        assertEquals(javaProcess.getConfig(VanillaJavaApp.ARGS), ImmutableList.of(\"a1\", \"a2\"));\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test(groups={\"Integration\"})\n    public void testHasJvmMXBeanSensorVals() throws Exception {\n        String main = MAIN_CLASS.getCanonicalName();\n        final VanillaJavaApp javaProcess = new VanillaJavaApp(MutableMap.builder()\n                .put(\"parent\", app)\n                .put(\"main\", main)\n                .put(\"classpath\", ImmutableList.of(BROOKLYN_THIS_CLASSPATH))\n                .put(\"args\", ImmutableList.of())\n                .build());\n        Entities.startManagement(app);\n        app.start(ImmutableList.of(loc));\n        \n        // Memory MXBean\n        Asserts.succeedsEventually(MutableMap.of(\"timeout\", TIMEOUT_MS), new Runnable() {\n            public void run() {\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.NON_HEAP_MEMORY_USAGE));\n                long init = javaProcess.getAttribute(VanillaJavaApp.INIT_HEAP_MEMORY);\n                long used = javaProcess.getAttribute(VanillaJavaApp.USED_HEAP_MEMORY);\n                long committed = javaProcess.getAttribute(VanillaJavaApp.COMMITTED_HEAP_MEMORY);\n                long max = javaProcess.getAttribute(VanillaJavaApp.MAX_HEAP_MEMORY);\n    \n                assertNotNull(used);\n                assertNotNull(init);\n                assertNotNull(committed);\n                assertNotNull(max);\n                assertTrue(init <= max, String.format(\"init %d > max %d heap memory\", init, max));\n                assertTrue(used <= committed, String.format(\"used %d > committed %d heap memory\", used, committed));\n                assertTrue(committed <= max, String.format(\"committed %d > max %d heap memory\", committed, max));\n            }});\n        \n        // Threads MX Bean\n        Asserts.succeedsEventually(MutableMap.of(\"timeout\", TIMEOUT_MS), new Runnable() {\n            public void run() {\n                long current = javaProcess.getAttribute(VanillaJavaApp.CURRENT_THREAD_COUNT);\n                long peak = javaProcess.getAttribute(VanillaJavaApp.PEAK_THREAD_COUNT);\n    \n                assertNotNull(current);\n                assertNotNull(peak);\n                assertTrue(current <= peak, String.format(\"current %d > peak %d thread count\", current, peak));\n    \n                //\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.START_TIME));\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.SYSTEM_LOAD_AVERAGE));\n            }});\n\n        // Runtime MX Bean\n        Asserts.succeedsEventually(MutableMap.of(\"timeout\", TIMEOUT_MS), new Runnable() {\n            public void run() {\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.START_TIME));\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.UP_TIME));\n            }});\n        \n        // Operating System MX Bean\n        Asserts.succeedsEventually(MutableMap.of(\"timeout\", TIMEOUT_MS), new Runnable() {\n            public void run() {\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.PROCESS_CPU_TIME));\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.SYSTEM_LOAD_AVERAGE));\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.AVAILABLE_PROCESSORS));\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.TOTAL_PHYSICAL_MEMORY_SIZE));\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.FREE_PHYSICAL_MEMORY_SIZE));\n            }});\n        \n        // TODO work on providing useful metrics from garbage collector MX Bean\n        // assertNotNull(javaProcess.getAttribute(VanillaJavaApp.GARBAGE_COLLECTION_TIME)) TODO: work on providing this\n    }","id":10141,"modified_method":"@Test(groups={\"Integration\"})\n    public void testHasJvmMXBeanSensorVals() throws Exception {\n        String main = MAIN_CLASS.getCanonicalName();\n        final VanillaJavaApp javaProcess = app.addChild(EntitySpec.create(VanillaJavaApp.class)\n            .configure(\"main\", main).configure(\"classpath\", ImmutableList.of(BROOKLYN_THIS_CLASSPATH))\n            .configure(\"args\", ImmutableList.of()));\n        Entities.startManagement(app);\n        app.start(ImmutableList.of(loc));\n        \n        // Memory MXBean\n        Asserts.succeedsEventually(MutableMap.of(\"timeout\", TIMEOUT_MS), new Runnable() {\n            public void run() {\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.NON_HEAP_MEMORY_USAGE));\n                long init = javaProcess.getAttribute(VanillaJavaApp.INIT_HEAP_MEMORY);\n                long used = javaProcess.getAttribute(VanillaJavaApp.USED_HEAP_MEMORY);\n                long committed = javaProcess.getAttribute(VanillaJavaApp.COMMITTED_HEAP_MEMORY);\n                long max = javaProcess.getAttribute(VanillaJavaApp.MAX_HEAP_MEMORY);\n    \n                assertNotNull(used);\n                assertNotNull(init);\n                assertNotNull(committed);\n                assertNotNull(max);\n                assertTrue(init <= max, String.format(\"init %d > max %d heap memory\", init, max));\n                assertTrue(used <= committed, String.format(\"used %d > committed %d heap memory\", used, committed));\n                assertTrue(committed <= max, String.format(\"committed %d > max %d heap memory\", committed, max));\n            }});\n        \n        // Threads MX Bean\n        Asserts.succeedsEventually(MutableMap.of(\"timeout\", TIMEOUT_MS), new Runnable() {\n            public void run() {\n                long current = javaProcess.getAttribute(VanillaJavaApp.CURRENT_THREAD_COUNT);\n                long peak = javaProcess.getAttribute(VanillaJavaApp.PEAK_THREAD_COUNT);\n    \n                assertNotNull(current);\n                assertNotNull(peak);\n                assertTrue(current <= peak, String.format(\"current %d > peak %d thread count\", current, peak));\n    \n                //\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.START_TIME));\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.SYSTEM_LOAD_AVERAGE));\n            }});\n\n        // Runtime MX Bean\n        Asserts.succeedsEventually(MutableMap.of(\"timeout\", TIMEOUT_MS), new Runnable() {\n            public void run() {\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.START_TIME));\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.UP_TIME));\n            }});\n        \n        // Operating System MX Bean\n        Asserts.succeedsEventually(MutableMap.of(\"timeout\", TIMEOUT_MS), new Runnable() {\n            public void run() {\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.PROCESS_CPU_TIME));\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.SYSTEM_LOAD_AVERAGE));\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.AVAILABLE_PROCESSORS));\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.TOTAL_PHYSICAL_MEMORY_SIZE));\n                assertNotNull(javaProcess.getAttribute(VanillaJavaApp.FREE_PHYSICAL_MEMORY_SIZE));\n            }});\n        \n        // TODO work on providing useful metrics from garbage collector MX Bean\n        // assertNotNull(javaProcess.getAttribute(VanillaJavaApp.GARBAGE_COLLECTION_TIME)) TODO: work on providing this\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test(groups={\"Integration\", \"WIP\"})\n    public void testStartsWithSecureJmxPortSpecifiedInConfig() throws Exception {\n        int port = 53406;\n        String main = MAIN_CLASS.getCanonicalName();\n        final VanillaJavaApp javaProcess = new VanillaJavaApp(MutableMap.builder()\n                .put(\"parent\", app)\n                .put(\"main\", main)\n                .put(\"classpath\", ImmutableList.of(BROOKLYN_THIS_CLASSPATH))\n                .put(\"args\", ImmutableList.of())\n                .build());\n        javaProcess.setConfig(UsesJmx.JMX_PORT, PortRanges.fromInteger(port));\n        javaProcess.setConfig(UsesJmx.JMX_SSL_ENABLED, true);\n        \n        Entities.startManagement(app);\n        app.start(ImmutableList.of(loc));\n        // will fail above if JMX can't connect, but also do some add'l checks\n        \n        assertEquals(javaProcess.getAttribute(UsesJmx.JMX_PORT), (Integer)port);\n\n        // good key+cert succeeds\n        new AsserterForJmxConnection(javaProcess)\n                .customizeSocketFactory(null, null)\n                .connect();\n        \n        // bad cert fails\n        Asserts.assertFails(new Callable<Void>() {\n            public Void call() throws Exception {\n                new AsserterForJmxConnection(javaProcess)\n                        .customizeSocketFactory(null, new FluentKeySigner(\"cheater\").newCertificateFor(\"jmx-access-key\", SecureKeys.newKeyPair()))\n                        .connect();\n                return null;\n            }});\n\n        // bad key fails\n        Asserts.assertFails(new Callable<Void>() {\n            public Void call() throws Exception {\n                new AsserterForJmxConnection(javaProcess)\n                        .customizeSocketFactory(SecureKeys.newKeyPair().getPrivate(), null)\n                        .connect();\n                return null;\n            }});\n        \n        // bad profile fails\n        Asserts.assertFails(new Callable<Void>() {\n            public Void call() throws Exception {\n                AsserterForJmxConnection asserter = new AsserterForJmxConnection(javaProcess);\n                asserter.putEnv(\"jmx.remote.profiles\", JmxmpAgent.TLS_JMX_REMOTE_PROFILES);\n                asserter.customizeSocketFactory(SecureKeys.newKeyPair().getPrivate(), null)\n                        .connect();\n                return null;\n            }});\n    }","id":10142,"modified_method":"@Test(groups={\"Integration\", \"WIP\"})\n    public void testStartsWithSecureJmxPortSpecifiedInConfig() throws Exception {\n        int port = 53406;\n        String main = MAIN_CLASS.getCanonicalName();\n        final VanillaJavaApp javaProcess = app.addChild(EntitySpec.create(VanillaJavaApp.class)\n            .configure(\"main\", main).configure(\"classpath\", ImmutableList.of(BROOKLYN_THIS_CLASSPATH))\n            .configure(\"args\", ImmutableList.of()));\n        ((EntityLocal)javaProcess).setConfig(UsesJmx.JMX_PORT, PortRanges.fromInteger(port));\n        ((EntityLocal)javaProcess).setConfig(UsesJmx.JMX_SSL_ENABLED, true);\n        \n        Entities.startManagement(app);\n        app.start(ImmutableList.of(loc));\n        // will fail above if JMX can't connect, but also do some add'l checks\n        \n        assertEquals(javaProcess.getAttribute(UsesJmx.JMX_PORT), (Integer)port);\n\n        // good key+cert succeeds\n        new AsserterForJmxConnection(javaProcess)\n                .customizeSocketFactory(null, null)\n                .connect();\n        \n        // bad cert fails\n        Asserts.assertFails(new Callable<Void>() {\n            public Void call() throws Exception {\n                new AsserterForJmxConnection(javaProcess)\n                        .customizeSocketFactory(null, new FluentKeySigner(\"cheater\").newCertificateFor(\"jmx-access-key\", SecureKeys.newKeyPair()))\n                        .connect();\n                return null;\n            }});\n\n        // bad key fails\n        Asserts.assertFails(new Callable<Void>() {\n            public Void call() throws Exception {\n                new AsserterForJmxConnection(javaProcess)\n                        .customizeSocketFactory(SecureKeys.newKeyPair().getPrivate(), null)\n                        .connect();\n                return null;\n            }});\n        \n        // bad profile fails\n        Asserts.assertFails(new Callable<Void>() {\n            public Void call() throws Exception {\n                AsserterForJmxConnection asserter = new AsserterForJmxConnection(javaProcess);\n                asserter.putEnv(\"jmx.remote.profiles\", JmxmpAgent.TLS_JMX_REMOTE_PROFILES);\n                asserter.customizeSocketFactory(SecureKeys.newKeyPair().getPrivate(), null)\n                        .connect();\n                return null;\n            }});\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Test(groups={\"Integration\"})\n    public void testJvmMXBeanProcessCpuTimeGivesNonZeroPercentage() throws Exception {\n        String main = MAIN_CPU_HUNGRY_CLASS.getCanonicalName();\n        final VanillaJavaApp javaProcess = new VanillaJavaApp(MutableMap.builder()\n                .put(\"parent\", app)\n                .put(\"main\", main)\n                .put(\"classpath\", ImmutableList.of(BROOKLYN_THIS_CLASSPATH))\n                .put(\"args\", ImmutableList.of())\n                .build());\n        Entities.startManagement(app);\n        app.start(ImmutableList.of(loc));\n\n        JavaAppUtils.connectJavaAppServerPolicies(javaProcess);\n        \n        final List<Double> fractions = new CopyOnWriteArrayList<Double>();\n        app.getManagementContext().getSubscriptionManager().subscribe(javaProcess, VanillaJavaApp.PROCESS_CPU_TIME_FRACTION, new SensorEventListener<Double>() {\n                public void onEvent(SensorEvent<Double> event) {\n                    fractions.add(event.getValue());\n                }});\n        \n        // Expect non-trivial load to be generated by the process.\n        // Expect load to be in the right order of magnitude (to ensure we haven't got a decimal point in the wrong place etc);\n        // But with multi-core could get big number; and on jenkins@releng3 we once saw [11.9, 0.6, 0.5]!\n        Asserts.succeedsEventually(MutableMap.of(\"timeout\", TIMEOUT_MS), new Runnable() {\n            public void run() {\n                Iterable<Double> nonTrivialFractions = Iterables.filter(fractions, new Predicate<Double>() {\n                        public boolean apply(Double input) {\n                            return input > 0.01;\n                        }});\n                assertTrue(Iterables.size(nonTrivialFractions) > 10, \"fractions=\"+fractions); \n            }});\n\n        Iterable<Double> tooBigFractions = Iterables.filter(fractions, new Predicate<Double>() {\n                public boolean apply(Double input) {\n                    return input > 50;\n                }});\n        assertTrue(Iterables.isEmpty(tooBigFractions), \"fractions=\"+fractions); \n        \n        Iterable<Double> ballparkRightFractions = Iterables.filter(fractions, new Predicate<Double>() {\n                public boolean apply(Double input) {\n                    return input > 0.01 && input < 4;\n                }});\n        assertTrue(Iterables.size(ballparkRightFractions) >= (fractions.size() / 2), \"fractions=\"+fractions);\n        \n        LOG.info(\"VanillaJavaApp->ExampleVanillaMainCpuHuntry: ProcessCpuTime fractions=\"+fractions);\n    }","id":10143,"modified_method":"@Test(groups={\"Integration\"})\n    public void testJvmMXBeanProcessCpuTimeGivesNonZeroPercentage() throws Exception {\n        String main = MAIN_CPU_HUNGRY_CLASS.getCanonicalName();\n        final VanillaJavaApp javaProcess = app.addChild(EntitySpec.create(VanillaJavaApp.class)\n            .configure(\"main\", main).configure(\"classpath\", ImmutableList.of(BROOKLYN_THIS_CLASSPATH))\n            .configure(\"args\", ImmutableList.of()));\n        Entities.startManagement(app);\n        app.start(ImmutableList.of(loc));\n\n        JavaAppUtils.connectJavaAppServerPolicies((EntityLocal)javaProcess);\n        \n        final List<Double> fractions = new CopyOnWriteArrayList<Double>();\n        app.getManagementContext().getSubscriptionManager().subscribe(javaProcess, VanillaJavaApp.PROCESS_CPU_TIME_FRACTION, new SensorEventListener<Double>() {\n                public void onEvent(SensorEvent<Double> event) {\n                    fractions.add(event.getValue());\n                }});\n        \n        // Expect non-trivial load to be generated by the process.\n        // Expect load to be in the right order of magnitude (to ensure we haven't got a decimal point in the wrong place etc);\n        // But with multi-core could get big number; and on jenkins@releng3 we once saw [11.9, 0.6, 0.5]!\n        Asserts.succeedsEventually(MutableMap.of(\"timeout\", TIMEOUT_MS), new Runnable() {\n            public void run() {\n                Iterable<Double> nonTrivialFractions = Iterables.filter(fractions, new Predicate<Double>() {\n                        public boolean apply(Double input) {\n                            return input > 0.01;\n                        }});\n                assertTrue(Iterables.size(nonTrivialFractions) > 10, \"fractions=\"+fractions); \n            }});\n\n        Iterable<Double> tooBigFractions = Iterables.filter(fractions, new Predicate<Double>() {\n                public boolean apply(Double input) {\n                    return input > 50;\n                }});\n        assertTrue(Iterables.isEmpty(tooBigFractions), \"fractions=\"+fractions); \n        \n        Iterable<Double> ballparkRightFractions = Iterables.filter(fractions, new Predicate<Double>() {\n                public boolean apply(Double input) {\n                    return input > 0.01 && input < 4;\n                }});\n        assertTrue(Iterables.size(ballparkRightFractions) >= (fractions.size() / 2), \"fractions=\"+fractions);\n        \n        LOG.info(\"VanillaJavaApp->ExampleVanillaMainCpuHuntry: ProcessCpuTime fractions=\"+fractions);\n    }","commit_id":"cdee3fdd5cd71487425cb1816d0a2c3a8c7b1ae9","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Override\r\n    public boolean applies(GameEvent event, Ability source, Game game) {\r\n            if (super.applies(event, source, game)) {\r\n                DamageEvent damageEvent = (DamageEvent) event;\r\n                if (event.getTargetId().equals(source.getSourceId()) && damageEvent.isCombatDamage()) {\r\n                    if (game.getState().getCombat().getAttackers().contains(source.getSourceId())) {\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            return false;\r\n    }","id":10144,"modified_method":"@Override\r\n    public boolean applies(GameEvent event, Ability source, Game game) {\r\n        if (super.applies(event, source, game)) {\r\n            DamageEvent damageEvent = (DamageEvent) event;\r\n            if (event.getTargetId().equals(source.getSourceId()) && damageEvent.isCombatDamage()) {\r\n                Permanent sourcePermanent = game.getPermanent(source.getSourceId());\r\n                if (sourcePermanent != null && sourcePermanent.isAttacking()) {\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"a0d0fc8b7e5a92e9071de1e43e2260984d8f085f","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean canChoose(UUID sourceId, UUID sourceControllerId, Game game) {\r\n        Card sourceCard = game.getCard(sourceId);\r\n        if (sourceCard != null) {\r\n            UUID exileId = UUID.fromString(new StringBuilder(sourceCard.getId().toString()).append(sourceCard.getZoneChangeCounter()).toString());\r\n            ExileZone exile = game.getExile().getExileZone(exileId);\r\n            if (exile != null && exile.size() > 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","id":10145,"modified_method":"@Override\r\n    public boolean canChoose(UUID sourceId, UUID sourceControllerId, Game game) {\r\n        Card sourceCard = game.getCard(sourceId);\r\n        if (sourceCard != null) {\r\n            UUID exileId = (UUID) game.getState().getValue(new StringBuilder(\"exileZone\").append(sourceId).append(sourceCard.getZoneChangeCounter()).toString());\r\n            ExileZone exile = game.getExile().getExileZone(exileId);\r\n            if (exile != null && exile.size() > 0) {\r\n                return true;\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"a0d0fc8b7e5a92e9071de1e43e2260984d8f085f","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {\r\n        Set<UUID> possibleTargets = new HashSet<UUID>();\r\n        Card sourceCard = game.getCard(sourceId);\r\n        if (sourceCard != null) {\r\n            UUID exileId = UUID.fromString(new StringBuilder(sourceCard.getId().toString()).append(sourceCard.getZoneChangeCounter()).toString());\r\n            ExileZone exile = game.getExile().getExileZone(exileId);\r\n            if (exile != null && exile.size() > 0) {\r\n                possibleTargets.addAll(exile);\r\n            }\r\n        }\r\n        return possibleTargets;\r\n    }","id":10146,"modified_method":"@Override\r\n    public Set<UUID> possibleTargets(UUID sourceId, UUID sourceControllerId, Game game) {\r\n        Set<UUID> possibleTargets = new HashSet<UUID>();\r\n        Card sourceCard = game.getCard(sourceId);\r\n        if (sourceCard != null) {\r\n            UUID exileId = (UUID) game.getState().getValue(new StringBuilder(\"exileZone\").append(sourceId).append(sourceCard.getZoneChangeCounter()).toString());\r\n            ExileZone exile = game.getExile().getExileZone(exileId);\r\n            if (exile != null && exile.size() > 0) {\r\n                possibleTargets.addAll(exile);\r\n            }\r\n        }\r\n        return possibleTargets;\r\n    }","commit_id":"a0d0fc8b7e5a92e9071de1e43e2260984d8f085f","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n      Player player = game.getPlayer(source.getControllerId());\r\n      if (player != null) {\r\n          player.drawCards(1, game);\r\n          Target target = new TargetCardInHand(new FilterCard(\"card to exile\"));\r\n          target.setRequired(true);\r\n          if (player.chooseTarget(outcome, target, source, game)) {\r\n              Card card = game.getCard(target.getFirstTarget());\r\n              Card sourceCard = game.getCard(source.getSourceId());\r\n              if (card != null && sourceCard != null) {\r\n                  card.setFaceDown(true);\r\n                  UUID exileId = UUID.fromString(new StringBuilder(sourceCard.getId().toString()).append(sourceCard.getZoneChangeCounter()).toString());\r\n                  return card.moveToExile(exileId, new StringBuilder(sourceCard.getName()).append(\"(\").append(sourceCard.getZoneChangeCounter()).append(\")\").toString(), source.getSourceId(), game);\r\n              }\r\n          }\r\n      }\r\n      return false;\r\n    }","id":10147,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n      Player player = game.getPlayer(source.getControllerId());\r\n      if (player != null) {\r\n          player.drawCards(1, game);\r\n          Target target = new TargetCardInHand(new FilterCard(\"card to exile\"));\r\n          target.setRequired(true);\r\n          if (player.chooseTarget(outcome, target, source, game)) {\r\n              Card card = game.getCard(target.getFirstTarget());\r\n              Card sourceCard = game.getCard(source.getSourceId());\r\n              if (card != null && sourceCard != null) {\r\n                  card.setFaceDown(true);\r\n                  UUID exileId = (UUID) game.getState().getValue(new StringBuilder(\"exileZone\").append(source.getSourceId()).append(sourceCard.getZoneChangeCounter()).toString());\r\n                  if (exileId == null) {\r\n                      exileId = UUID.randomUUID();\r\n                      game.getState().setValue(new StringBuilder(\"exileZone\").append(source.getSourceId()).append(sourceCard.getZoneChangeCounter()).toString(), exileId);\r\n                  }\r\n                  return card.moveToExile(exileId, new StringBuilder(sourceCard.getName()).append(\"(\").append(sourceCard.getZoneChangeCounter()).append(\")\").toString(), source.getSourceId(), game);\r\n              }\r\n          }\r\n      }\r\n      return false;\r\n    }","commit_id":"a0d0fc8b7e5a92e9071de1e43e2260984d8f085f","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean canTarget(UUID id, Ability source, Game game) {\r\n        Card card = game.getCard(id);\r\n        if (card != null && game.getState().getZone(card.getId()) == Zone.EXILED) {\r\n            ExileZone exile = null;\r\n            Card sourceCard = game.getCard(source.getSourceId());\r\n            if (sourceCard != null) {\r\n                UUID exileId = UUID.fromString(new StringBuilder(sourceCard.getId().toString()).append(sourceCard.getZoneChangeCounter()).toString());\r\n                exile = game.getExile().getExileZone(exileId);\r\n            }\r\n            if (exile != null && exile.contains(id)) {\r\n                return filter.match(card, source.getControllerId(), game);\r\n            }\r\n        }\r\n        return false;\r\n    }","id":10148,"modified_method":"@Override\r\n    public boolean canTarget(UUID id, Ability source, Game game) {\r\n        Card card = game.getCard(id);\r\n        if (card != null && game.getState().getZone(card.getId()) == Zone.EXILED) {\r\n            ExileZone exile = null;\r\n            Card sourceCard = game.getCard(source.getSourceId());\r\n            if (sourceCard != null) {\r\n                UUID exileId = (UUID) game.getState().getValue(new StringBuilder(\"exileZone\").append(source.getSourceId()).append(sourceCard.getZoneChangeCounter()).toString());\r\n                exile = game.getExile().getExileZone(exileId);\r\n            }\r\n            if (exile != null && exile.contains(id)) {\r\n                return filter.match(card, source.getControllerId(), game);\r\n            }\r\n        }\r\n        return false;\r\n    }","commit_id":"a0d0fc8b7e5a92e9071de1e43e2260984d8f085f","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean applies(UUID sourceId, Ability source, Game game) {\r\n      Card card = game.getCard(sourceId);\r\n      if (card != null && game.getState().getZone(card.getId()) == Zone.EXILED) {\r\n          Card sourceCard = game.getCard(source.getSourceId());\r\n          UUID exileId = UUID.fromString(new StringBuilder(sourceCard.getId().toString()).append(sourceCard.getZoneChangeCounter()).toString());\r\n          ExileZone zone = game.getExile().getExileZone(exileId);\r\n          if (zone != null && zone.contains(card.getId())) {\r\n                if (card.getCardType().contains(CardType.INSTANT) || game.canPlaySorcery(source.getControllerId())) {\r\n                    card.setControllerId(source.getControllerId());\r\n                    return true;\r\n                }\r\n          }\r\n      }\r\n      return false;\r\n    }","id":10149,"modified_method":"@Override\r\n    public boolean applies(UUID sourceId, Ability source, Game game) {\r\n      Card card = game.getCard(sourceId);\r\n      if (card != null && game.getState().getZone(card.getId()) == Zone.EXILED) {\r\n          Card sourceCard = game.getCard(source.getSourceId());\r\n          UUID exileId = (UUID) game.getState().getValue(new StringBuilder(\"exileZone\").append(source.getSourceId()).append(sourceCard.getZoneChangeCounter()).toString());\r\n          ExileZone zone = game.getExile().getExileZone(exileId);\r\n          if (zone != null && zone.contains(card.getId())) {\r\n                if (card.getCardType().contains(CardType.INSTANT) || game.canPlaySorcery(source.getControllerId())) {\r\n                    card.setControllerId(source.getControllerId());\r\n                    return true;\r\n                }\r\n          }\r\n      }\r\n      return false;\r\n    }","commit_id":"a0d0fc8b7e5a92e9071de1e43e2260984d8f085f","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n      Player player = game.getPlayer(targetPointer.getFirst(game, source));\r\n      if (player != null) {\r\n          Card card = player.getLibrary().removeFromTop(game);\r\n          Card sourceCard = game.getCard(source.getSourceId());\r\n          if (card != null && sourceCard != null) {\r\n              UUID exileId = UUID.fromString(new StringBuilder(sourceCard.getId().toString()).append(sourceCard.getZoneChangeCounter()).toString());\r\n              return card.moveToExile(exileId, \"Nightveil Specter\", source.getSourceId(), game);\r\n          }\r\n      }\r\n      return false;\r\n    }","id":10150,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n      Player player = game.getPlayer(targetPointer.getFirst(game, source));\r\n      if (player != null) {\r\n          Card card = player.getLibrary().removeFromTop(game);\r\n          Card sourceCard = game.getCard(source.getSourceId());\r\n          if (card != null && sourceCard != null) {\r\n              UUID exileId = (UUID) game.getState().getValue(new StringBuilder(\"exileZone\").append(source.getSourceId()).append(sourceCard.getZoneChangeCounter()).toString());\r\n              if (exileId == null) {\r\n                  exileId = UUID.randomUUID();\r\n                  game.getState().setValue(new StringBuilder(\"exileZone\").append(source.getSourceId()).append(sourceCard.getZoneChangeCounter()).toString(), exileId);\r\n              }\r\n              return card.moveToExile(exileId, \"Nightveil Specter\", source.getSourceId(), game);\r\n          }\r\n      }\r\n      return false;\r\n    }","commit_id":"a0d0fc8b7e5a92e9071de1e43e2260984d8f085f","url":"https://github.com/magefree/mage"},{"original_method":"public SimicCharm (UUID ownerId) {\r\n        super(ownerId, 195, \"Simic Charm\", Rarity.UNCOMMON, new CardType[]{CardType.INSTANT}, \"{B}{U}\");\r\n        this.expansionSetCode = \"GTC\";\r\n\r\n        this.color.setBlack(true);\r\n        this.color.setBlue(true);\r\n\r\n        //Choose one - Target creature gets +3/+3 until end of turn\r\n        this.getSpellAbility().addEffect(new BoostTargetEffect(3, 3, Constants.Duration.EndOfTurn));\r\n        this.getSpellAbility().addTarget(new TargetCreaturePermanent());\r\n        //permanents you control gain hexproof until end of turn\r\n        Mode mode = new Mode();\r\n        mode.getEffects().add(new GainAbilityAllEffect(HexproofAbility.getInstance(), Constants.Duration.EndOfTurn, new FilterControlledPermanent()));\r\n        this.getSpellAbility().addMode(mode);\r\n        //return target creature to its owner's hand.\r\n        Mode mode2 = new Mode();\r\n        mode2.getEffects().add(new ReturnToHandTargetEffect());\r\n        mode2.getTargets().add(new TargetCreaturePermanent());\r\n        this.getSpellAbility().addMode(mode2);\r\n        \r\n    }","id":10151,"modified_method":"public SimicCharm (UUID ownerId) {\r\n        super(ownerId, 195, \"Simic Charm\", Rarity.UNCOMMON, new CardType[]{CardType.INSTANT}, \"{G}{U}\");\r\n        this.expansionSetCode = \"GTC\";\r\n\r\n        this.color.setBlack(true);\r\n        this.color.setBlue(true);\r\n\r\n        //Choose one - Target creature gets +3/+3 until end of turn\r\n        this.getSpellAbility().addEffect(new BoostTargetEffect(3, 3, Constants.Duration.EndOfTurn));\r\n        this.getSpellAbility().addTarget(new TargetCreaturePermanent());\r\n        //permanents you control gain hexproof until end of turn\r\n        Mode mode = new Mode();\r\n        mode.getEffects().add(new GainAbilityAllEffect(HexproofAbility.getInstance(), Constants.Duration.EndOfTurn, new FilterControlledPermanent()));\r\n        this.getSpellAbility().addMode(mode);\r\n        //return target creature to its owner's hand.\r\n        Mode mode2 = new Mode();\r\n        mode2.getEffects().add(new ReturnToHandTargetEffect());\r\n        mode2.getTargets().add(new TargetCreaturePermanent());\r\n        this.getSpellAbility().addMode(mode2);\r\n        \r\n    }","commit_id":"a0d0fc8b7e5a92e9071de1e43e2260984d8f085f","url":"https://github.com/magefree/mage"},{"original_method":"/**\n\t * Checks an {@link XtextResource}\n\t * \n\t * @param resource\n\t * @return a {@link List} of {@link IMarker} attributes\n\t */\n\tpublic List<Map<String, Object>> check(final Resource resource, Map<?, ?> context, final IProgressMonitor monitor) {\n\t\tList<Map<String, Object>> markers = new ArrayList<Map<String, Object>>(resource.getErrors().size() + resource.getWarnings().size());\n\t\ttry {\n\t\t\t// Syntactical errors\n\t\t\t// Collect EMF Resource Diagnostics\n\t\t\tfor (int i = 0; i < resource.getErrors().size(); i++) {\n\t\t\t\tmarkers.add(markerFromXtextResourceDiagnostic(resource.getErrors().get(i), IMarker.SEVERITY_ERROR));\n\t\t\t}\n\n\t\t\tif (monitor.isCanceled())\n\t\t\t\treturn null;\n\n\t\t\tfor (int i = 0; i < resource.getWarnings().size(); i++) {\n\t\t\t\tmarkers.add(markerFromXtextResourceDiagnostic(resource.getWarnings().get(i), IMarker.SEVERITY_WARNING));\n\t\t\t}\n\n\t\t\tif (monitor.isCanceled())\n\t\t\t\treturn null;\n\n\t\t\tboolean syntaxDiagFail = !markers.isEmpty();\n\t\t\tlogCheckStatus(resource, syntaxDiagFail, \"Syntax\");\n\n\t\t\tfor (EObject ele : resource.getContents()) {\n\t\t\t\ttry {\n\t\t\t\t\tMap<Object, Object> options = Maps.newHashMap(context);\n\t\t\t\t\toptions.put(CancellableDiagnostician.CANCEL_INDICATOR, new CancelIndicator() {\n\t\t\t\t\t\tpublic boolean isCancelled() {\n\t\t\t\t\t\t\treturn monitor.isCanceled();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tDiagnostic diagnostic = diagnostician.validate(ele, options);\n\t\t\t\t\tif (monitor.isCanceled())\n\t\t\t\t\t\treturn null;\n\t\t\t\t\tif (!diagnostic.getChildren().isEmpty()) {\n\t\t\t\t\t\tfor (Diagnostic childDiagnostic : diagnostic.getChildren()) {\n\t\t\t\t\t\t\tMap<String, Object> marker = markerFromEValidatorDiagnostic(childDiagnostic);\n\t\t\t\t\t\t\tif (marker != null) {\n\t\t\t\t\t\t\t\tmarkers.add(marker);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tMap<String, Object> marker = markerFromEValidatorDiagnostic(diagnostic);\n\t\t\t\t\t\tif (marker != null) {\n\t\t\t\t\t\t\tmarkers.add(marker);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\tlog.error(e.getMessage(), e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (RuntimeException e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t\treturn markers;\n\t}","id":10152,"modified_method":"/**\n\t * Checks an {@link XtextResource}\n\t * \n\t * @param resource\n\t * @return a {@link List} of {@link IMarker} attributes\n\t */\n\tpublic List<Map<String, Object>> check(final Resource resource, Map<?, ?> context, final IProgressMonitor monitor) {\n\t\tfinal List<Map<String, Object>> markers = new ArrayList<Map<String, Object>>(resource.getErrors().size() + resource.getWarnings().size());\n\t\tIDiagnosticConverter.Acceptor acceptor = createAcceptor(markers);\n\t\ttry {\n\t\t\t// Syntactical and linking errors\n\t\t\t// Collect EMF Resource Diagnostics\n\t\t\tfor (int i = 0; i < resource.getErrors().size(); i++) {\n\t\t\t\tmarkerFromXtextResourceDiagnostic(resource.getErrors().get(i), IMarker.SEVERITY_ERROR, acceptor);\n\t\t\t}\n\n\t\t\tif (monitor.isCanceled())\n\t\t\t\treturn null;\n\n\t\t\tfor (int i = 0; i < resource.getWarnings().size(); i++) {\n\t\t\t\tmarkerFromXtextResourceDiagnostic(resource.getWarnings().get(i), IMarker.SEVERITY_WARNING, acceptor);\n\t\t\t}\n\n\t\t\tif (monitor.isCanceled())\n\t\t\t\treturn null;\n\n\t\t\tboolean syntaxDiagFail = !markers.isEmpty();\n\t\t\tlogCheckStatus(resource, syntaxDiagFail, \"Syntax\");\n\n\t\t\t// Validation errors\n\t\t\t// Collect Validator Diagnostics\n\t\t\tfor (EObject ele : resource.getContents()) {\n\t\t\t\ttry {\n\t\t\t\t\tMap<Object, Object> options = Maps.newHashMap(context);\n\t\t\t\t\toptions.put(CancellableDiagnostician.CANCEL_INDICATOR, new CancelIndicator() {\n\t\t\t\t\t\tpublic boolean isCancelled() {\n\t\t\t\t\t\t\treturn monitor.isCanceled();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tDiagnostic diagnostic = diagnostician.validate(ele, options);\n\t\t\t\t\tif (monitor.isCanceled())\n\t\t\t\t\t\treturn null;\n\t\t\t\t\tif (!diagnostic.getChildren().isEmpty()) {\n\t\t\t\t\t\tfor (Diagnostic childDiagnostic : diagnostic.getChildren()) {\n\t\t\t\t\t\t\tmarkerFromEValidatorDiagnostic(childDiagnostic, acceptor);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tmarkerFromEValidatorDiagnostic(diagnostic, acceptor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\tlog.error(e.getMessage(), e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (RuntimeException e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t\treturn markers;\n\t}","commit_id":"bcaabc6209d9e1b494e4b36834911f02a90e7392","url":"https://github.com/eclipse/xtext"},{"original_method":"private Map<String, Object> markerFromXtextResourceDiagnostic(\n\t\t\torg.eclipse.emf.ecore.resource.Resource.Diagnostic diagnostic, Object severity) {\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tmap.put(IMarker.SEVERITY, severity);\n\t\tmap.put(IMarker.LINE_NUMBER, diagnostic.getLine());\n\t\tmap.put(IMarker.MESSAGE, diagnostic.getMessage());\n\t\tmap.put(IMarker.PRIORITY, Integer.valueOf(IMarker.PRIORITY_LOW));\n\n\t\tif (diagnostic instanceof org.eclipse.xtext.diagnostics.Diagnostic) {\n\t\t\torg.eclipse.xtext.diagnostics.Diagnostic xtextDiagnostic = (org.eclipse.xtext.diagnostics.Diagnostic) diagnostic;\n\t\t\tmap.put(IMarker.CHAR_START, xtextDiagnostic.getOffset());\n\t\t\tmap.put(IMarker.CHAR_END, xtextDiagnostic.getOffset() + xtextDiagnostic.getLength());\n\t\t}\n\n\t\treturn map;\n\t}","id":10153,"modified_method":"protected void markerFromXtextResourceDiagnostic(\n\t\t\torg.eclipse.emf.ecore.resource.Resource.Diagnostic diagnostic, Object severity, IDiagnosticConverter.Acceptor acceptor) {\n\t\tconverter.convertResourceDiagnostic(diagnostic, severity, acceptor);\n\t}","commit_id":"bcaabc6209d9e1b494e4b36834911f02a90e7392","url":"https://github.com/eclipse/xtext"},{"original_method":"private Map<String, Object> markerFromEValidatorDiagnostic(Diagnostic diagnostic) {\n\t\tif (diagnostic.getSeverity() == Diagnostic.OK)\n\t\t\treturn null;\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tint sever = IMarker.SEVERITY_ERROR;\n\t\tswitch (diagnostic.getSeverity()) {\n\t\t\tcase Diagnostic.WARNING:\n\t\t\t\tsever = IMarker.SEVERITY_WARNING;\n\t\t\t\tbreak;\n\t\t\tcase Diagnostic.INFO:\n\t\t\t\tsever = IMarker.SEVERITY_INFO;\n\t\t\t\tbreak;\n\t\t}\n\t\tmap.put(IMarker.SEVERITY, sever);\n\t\tIterator<?> data = diagnostic.getData().iterator();\n\t\t// causer is the first element see Diagnostician.getData\n\t\tObject causer = data.next();\n\t\tif (causer instanceof EObject) {\n\t\t\tEObject ele = (EObject) causer;\n\t\t\tNodeAdapter nodeAdapter = NodeUtil.getNodeAdapter(ele);\n\t\t\tif (nodeAdapter != null) {\n\t\t\t\tAbstractNode parserNode = nodeAdapter.getParserNode();\n\t\t\t\t// feature is the second element see Diagnostician.getData\n\t\t\t\tObject feature = data.hasNext() ? data.next() : null;\n\t\t\t\tEStructuralFeature structuralFeature = resolveStructuralFeature(ele, feature);\n\t\t\t\tif (structuralFeature != null) {\n\t\t\t\t\tList<AbstractNode> nodes = NodeUtil.findNodesForFeature(ele, structuralFeature);\n\t\t\t\t\tif (!nodes.isEmpty())\n\t\t\t\t\t\tparserNode = nodes.iterator().next();\n\t\t\t\t}\n\t\t\t\tmap.put(IMarker.LINE_NUMBER, Integer.valueOf(parserNode.getLine()));\n\t\t\t\tint offset = parserNode.getOffset();\n\t\t\t\tmap.put(IMarker.CHAR_START, Integer.valueOf(offset));\n\t\t\t\tmap.put(IMarker.CHAR_END, Integer.valueOf(offset + parserNode.getLength()));\n\t\t\t\tmap.put(DIAGNOSTIC_KEY, diagnostic);\n\t\t\t}\n\t\t}\n\t\tmap.put(IMarker.MESSAGE, diagnostic.getMessage());\n\t\tmap.put(IMarker.PRIORITY, Integer.valueOf(IMarker.PRIORITY_LOW));\n\t\treturn map;\n\t}","id":10154,"modified_method":"protected void markerFromEValidatorDiagnostic(Diagnostic diagnostic, IDiagnosticConverter.Acceptor acceptor) {\n\t\tconverter.convertValidatorDiagnostic(diagnostic, acceptor);\n\t}","commit_id":"bcaabc6209d9e1b494e4b36834911f02a90e7392","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n\t * Checks an {@link XtextResource}\n\t * \n\t * @param resource\n\t * @return a {@link List} of {@link IMarker} attributes\n\t */\n\tpublic List<Map<String, Object>> check(final Resource resource, Map<?, ?> context, final IProgressMonitor monitor) {\n\t\tList<Map<String, Object>> markers = new ArrayList<Map<String, Object>>(resource.getErrors().size() + resource.getWarnings().size());\n\t\ttry {\n\t\t\t// Syntactical errors\n\t\t\t// Collect EMF Resource Diagnostics\n\t\t\tfor (int i = 0; i < resource.getErrors().size(); i++) {\n\t\t\t\tmarkers.add(markerFromXtextResourceDiagnostic(resource.getErrors().get(i), IMarker.SEVERITY_ERROR));\n\t\t\t}\n\n\t\t\tif (monitor.isCanceled())\n\t\t\t\treturn null;\n\n\t\t\tfor (int i = 0; i < resource.getWarnings().size(); i++) {\n\t\t\t\tmarkers.add(markerFromXtextResourceDiagnostic(resource.getWarnings().get(i), IMarker.SEVERITY_WARNING));\n\t\t\t}\n\n\t\t\tif (monitor.isCanceled())\n\t\t\t\treturn null;\n\n\t\t\tboolean syntaxDiagFail = !markers.isEmpty();\n\t\t\tlogCheckStatus(resource, syntaxDiagFail, \"Syntax\");\n\n\t\t\tfor (EObject ele : resource.getContents()) {\n\t\t\t\ttry {\n\t\t\t\t\tMap<Object, Object> options = Maps.newHashMap(context);\n\t\t\t\t\toptions.put(CancellableDiagnostician.CANCEL_INDICATOR, new CancelIndicator() {\n\t\t\t\t\t\tpublic boolean isCancelled() {\n\t\t\t\t\t\t\treturn monitor.isCanceled();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tDiagnostic diagnostic = diagnostician.validate(ele, options);\n\t\t\t\t\tif (monitor.isCanceled())\n\t\t\t\t\t\treturn null;\n\t\t\t\t\tif (!diagnostic.getChildren().isEmpty()) {\n\t\t\t\t\t\tfor (Diagnostic childDiagnostic : diagnostic.getChildren()) {\n\t\t\t\t\t\t\tMap<String, Object> marker = markerFromEValidatorDiagnostic(childDiagnostic);\n\t\t\t\t\t\t\tif (marker != null) {\n\t\t\t\t\t\t\t\tmarkers.add(marker);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tMap<String, Object> marker = markerFromEValidatorDiagnostic(diagnostic);\n\t\t\t\t\t\tif (marker != null) {\n\t\t\t\t\t\t\tmarkers.add(marker);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\tlog.error(e.getMessage(), e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (RuntimeException e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t\treturn markers;\n\t}","id":10155,"modified_method":"/**\n\t * Checks an {@link XtextResource}\n\t * \n\t * @param resource\n\t * @return a {@link List} of {@link IMarker} attributes\n\t */\n\tpublic List<Map<String, Object>> check(final Resource resource, Map<?, ?> context, final IProgressMonitor monitor) {\n\t\tfinal List<Map<String, Object>> markers = new ArrayList<Map<String, Object>>(resource.getErrors().size() + resource.getWarnings().size());\n\t\tIDiagnosticConverter.Acceptor acceptor = createAcceptor(markers);\n\t\ttry {\n\t\t\t// Syntactical and linking errors\n\t\t\t// Collect EMF Resource Diagnostics\n\t\t\tfor (int i = 0; i < resource.getErrors().size(); i++) {\n\t\t\t\tmarkerFromXtextResourceDiagnostic(resource.getErrors().get(i), IMarker.SEVERITY_ERROR, acceptor);\n\t\t\t}\n\n\t\t\tif (monitor.isCanceled())\n\t\t\t\treturn null;\n\n\t\t\tfor (int i = 0; i < resource.getWarnings().size(); i++) {\n\t\t\t\tmarkerFromXtextResourceDiagnostic(resource.getWarnings().get(i), IMarker.SEVERITY_WARNING, acceptor);\n\t\t\t}\n\n\t\t\tif (monitor.isCanceled())\n\t\t\t\treturn null;\n\n\t\t\tboolean syntaxDiagFail = !markers.isEmpty();\n\t\t\tlogCheckStatus(resource, syntaxDiagFail, \"Syntax\");\n\n\t\t\t// Validation errors\n\t\t\t// Collect Validator Diagnostics\n\t\t\tfor (EObject ele : resource.getContents()) {\n\t\t\t\ttry {\n\t\t\t\t\tMap<Object, Object> options = Maps.newHashMap(context);\n\t\t\t\t\toptions.put(CancellableDiagnostician.CANCEL_INDICATOR, new CancelIndicator() {\n\t\t\t\t\t\tpublic boolean isCancelled() {\n\t\t\t\t\t\t\treturn monitor.isCanceled();\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t\tDiagnostic diagnostic = diagnostician.validate(ele, options);\n\t\t\t\t\tif (monitor.isCanceled())\n\t\t\t\t\t\treturn null;\n\t\t\t\t\tif (!diagnostic.getChildren().isEmpty()) {\n\t\t\t\t\t\tfor (Diagnostic childDiagnostic : diagnostic.getChildren()) {\n\t\t\t\t\t\t\tmarkerFromEValidatorDiagnostic(childDiagnostic, acceptor);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\tmarkerFromEValidatorDiagnostic(diagnostic, acceptor);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tcatch (RuntimeException e) {\n\t\t\t\t\tlog.error(e.getMessage(), e);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch (RuntimeException e) {\n\t\t\tlog.error(e.getMessage(), e);\n\t\t}\n\t\treturn markers;\n\t}","commit_id":"b12e80562073598baac4e07e95b509c9a1046529","url":"https://github.com/eclipse/xtext"},{"original_method":"private Map<String, Object> markerFromEValidatorDiagnostic(Diagnostic diagnostic) {\n\t\tif (diagnostic.getSeverity() == Diagnostic.OK)\n\t\t\treturn null;\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tint sever = IMarker.SEVERITY_ERROR;\n\t\tswitch (diagnostic.getSeverity()) {\n\t\t\tcase Diagnostic.WARNING:\n\t\t\t\tsever = IMarker.SEVERITY_WARNING;\n\t\t\t\tbreak;\n\t\t\tcase Diagnostic.INFO:\n\t\t\t\tsever = IMarker.SEVERITY_INFO;\n\t\t\t\tbreak;\n\t\t}\n\t\tmap.put(IMarker.SEVERITY, sever);\n\t\tIterator<?> data = diagnostic.getData().iterator();\n\t\t// causer is the first element see Diagnostician.getData\n\t\tObject causer = data.next();\n\t\tif (causer instanceof EObject) {\n\t\t\tEObject ele = (EObject) causer;\n\t\t\tNodeAdapter nodeAdapter = NodeUtil.getNodeAdapter(ele);\n\t\t\tif (nodeAdapter != null) {\n\t\t\t\tAbstractNode parserNode = nodeAdapter.getParserNode();\n\t\t\t\t// feature is the second element see Diagnostician.getData\n\t\t\t\tObject feature = data.hasNext() ? data.next() : null;\n\t\t\t\tEStructuralFeature structuralFeature = resolveStructuralFeature(ele, feature);\n\t\t\t\tif (structuralFeature != null) {\n\t\t\t\t\tList<AbstractNode> nodes = NodeUtil.findNodesForFeature(ele, structuralFeature);\n\t\t\t\t\tif (!nodes.isEmpty())\n\t\t\t\t\t\tparserNode = nodes.iterator().next();\n\t\t\t\t}\n\t\t\t\tmap.put(IMarker.LINE_NUMBER, Integer.valueOf(parserNode.getLine()));\n\t\t\t\tint offset = parserNode.getOffset();\n\t\t\t\tmap.put(IMarker.CHAR_START, Integer.valueOf(offset));\n\t\t\t\tmap.put(IMarker.CHAR_END, Integer.valueOf(offset + parserNode.getLength()));\n\t\t\t\tmap.put(DIAGNOSTIC_KEY, diagnostic);\n\t\t\t}\n\t\t}\n\t\tmap.put(IMarker.MESSAGE, diagnostic.getMessage());\n\t\tmap.put(IMarker.PRIORITY, Integer.valueOf(IMarker.PRIORITY_LOW));\n\t\treturn map;\n\t}","id":10156,"modified_method":"protected void markerFromEValidatorDiagnostic(Diagnostic diagnostic, IDiagnosticConverter.Acceptor acceptor) {\n\t\tconverter.convertValidatorDiagnostic(diagnostic, acceptor);\n\t}","commit_id":"b12e80562073598baac4e07e95b509c9a1046529","url":"https://github.com/eclipse/xtext"},{"original_method":"private Map<String, Object> markerFromXtextResourceDiagnostic(\n\t\t\torg.eclipse.emf.ecore.resource.Resource.Diagnostic diagnostic, Object severity) {\n\t\tMap<String, Object> map = new HashMap<String, Object>();\n\t\tmap.put(IMarker.SEVERITY, severity);\n\t\tmap.put(IMarker.LINE_NUMBER, diagnostic.getLine());\n\t\tmap.put(IMarker.MESSAGE, diagnostic.getMessage());\n\t\tmap.put(IMarker.PRIORITY, Integer.valueOf(IMarker.PRIORITY_LOW));\n\n\t\tif (diagnostic instanceof org.eclipse.xtext.diagnostics.Diagnostic) {\n\t\t\torg.eclipse.xtext.diagnostics.Diagnostic xtextDiagnostic = (org.eclipse.xtext.diagnostics.Diagnostic) diagnostic;\n\t\t\tmap.put(IMarker.CHAR_START, xtextDiagnostic.getOffset());\n\t\t\tmap.put(IMarker.CHAR_END, xtextDiagnostic.getOffset() + xtextDiagnostic.getLength());\n\t\t}\n\n\t\treturn map;\n\t}","id":10157,"modified_method":"protected void markerFromXtextResourceDiagnostic(\n\t\t\torg.eclipse.emf.ecore.resource.Resource.Diagnostic diagnostic, Object severity, IDiagnosticConverter.Acceptor acceptor) {\n\t\tconverter.convertResourceDiagnostic(diagnostic, severity, acceptor);\n\t}","commit_id":"b12e80562073598baac4e07e95b509c9a1046529","url":"https://github.com/eclipse/xtext"},{"original_method":"public boolean doesPrincipalHavePermission(IAuthorizationService service, IAuthorizationPrincipal principal, String owner, String activity, String target) throws AuthorizationException {\n        // the API states that the service, owner, and activity arguments must \n        // not be null. If for some reason they are null, log and fail closed\n        // The principal must also not be null.\n        if (service == null || principal == null || owner == null || activity == null) {\n\n            log.error(\"Null argument to AnyUnblockedGrantPermissionPolicy doesPrincipalHavePermission() method \" +\n                    \"should not be possible.  This is indicative of a potentially serious bug in the \" +\n                    \"permissions and authorization infrastructure. \" +\n                    \"service= [\" + service + \"] principal = [\" + principal + \"] owner = [\" + owner + \"] activity = [\" + activity + \"] target = [\" + target + \"]\");\n\n            // fail closed\n            return false;\n        }\n\n        \n        \n        // first check for explicit permissions for this Principal\n        IPermission[] perms = service.getPermissionsForPrincipal(principal, owner, activity, target);\n\n        Set<IPermission> activePermissions = activePermissions(perms);\n\n        if (containsType(activePermissions, IPermission.PERMISSION_TYPE_DENY)) {\n            if (log.isTraceEnabled()) {\n            \tlog.trace(\"Principal [\" + principal + \"] is explicitly denied permission to perform activity [\" + activity + \"] on target [\" + target + \"] under permission owning system [\" + owner + \"].\");\n            }\n            return false;\n        }\n\n        if (containsType(activePermissions, IPermission.PERMISSION_TYPE_GRANT)) {\n            // explicit GRANT\n            if (log.isTraceEnabled()) {\n            \tlog.trace(\"Principal [\" + principal + \"] is granted permission to perform activity [\" + activity + \"] on target [\" + target + \"] under permission owning system [\" + owner + \"] because this principal has an excplicit GRANT and does not have an exlicit DENY.\");\n            }\n            return true;\n        }\n\n        // no explicit permission.  Search for an unblocked GRANT.\n        boolean hasUnblockedPathToGrant;\n        try {\n            // track groups we've already explored to avoid infinite loop\n            Set<IGroupMember> seenGroups = new HashSet<IGroupMember>(100);\n            hasUnblockedPathToGrant = hasUnblockedPathToGrant(service, principal, owner, activity, target, seenGroups);\n        } catch (Exception e) {\n            log.error(\"Error searching for unblocked path to grant for principal [\" + principal + \"]\", e);\n            // fail closed\n            return false;\n        }\n        \n        if (log.isTraceEnabled()) {\n        \tif (hasUnblockedPathToGrant) {\n        \t\tlog.trace(\"Principal [\" + principal + \"] is granted permission to perform activity [\" + activity + \"] on target [\" + target + \"] under permission owning system [\" + owner + \"] because this principal has an unblocked path to a GRANT.\");\n        \t} else {\n        \t\tlog.trace(\"Principal [\" + principal + \"] is denied permission to perform activity [\" + activity + \"] on target [\" + target + \"] under permission owning system [\" + owner + \"] because this principal does not have an unblocked path to a GRANT.\");\n        \t}\n        }\n        \n        return hasUnblockedPathToGrant;\n\n    }","id":10158,"modified_method":"public boolean doesPrincipalHavePermission(IAuthorizationService service, IAuthorizationPrincipal principal, String owner, String activity, String target) throws AuthorizationException {\n        // the API states that the service, owner, and activity arguments must \n        // not be null. If for some reason they are null, log and fail closed\n        // The principal must also not be null.\n        if (service == null || principal == null || owner == null || activity == null) {\n\n            log.error(\"Null argument to AnyUnblockedGrantPermissionPolicy doesPrincipalHavePermission() method \" +\n                    \"should not be possible.  This is indicative of a potentially serious bug in the \" +\n                    \"permissions and authorization infrastructure. \" +\n                    \"service= [\" + service + \"] principal = [\" + principal + \"] owner = [\" + owner + \"] activity = [\" + activity + \"] target = [\" + target + \"]\");\n\n            // fail closed\n            return false;\n        }\n\n        // if this user is a super-user, just return true\n        if (!IPermission.ALL_PERMISSIONS_ACTIVITY.equals(activity)\n                && doesPrincipalHavePermission(service, principal,\n                        IPermission.PORTAL_SYSTEM,\n                        IPermission.ALL_PERMISSIONS_ACTIVITY,\n                        IPermission.ALL_TARGET)) {\n            return true;\n        }\n        \n        // first check for explicit permissions for this Principal\n        IPermission[] perms = service.getPermissionsForPrincipal(principal, owner, activity, target);\n\n        Set<IPermission> activePermissions = activePermissions(perms);\n\n        if (containsType(activePermissions, IPermission.PERMISSION_TYPE_DENY)) {\n            if (log.isTraceEnabled()) {\n            \tlog.trace(\"Principal [\" + principal + \"] is explicitly denied permission to perform activity [\" + activity + \"] on target [\" + target + \"] under permission owning system [\" + owner + \"].\");\n            }\n            return false;\n        }\n\n        if (containsType(activePermissions, IPermission.PERMISSION_TYPE_GRANT)) {\n            // explicit GRANT\n            if (log.isTraceEnabled()) {\n            \tlog.trace(\"Principal [\" + principal + \"] is granted permission to perform activity [\" + activity + \"] on target [\" + target + \"] under permission owning system [\" + owner + \"] because this principal has an excplicit GRANT and does not have an exlicit DENY.\");\n            }\n            return true;\n        }\n\n        // if the target is formatted as a channel, check if the user has\n        // the ALL_CHANNELS permission\n        if (target.startsWith(IPermission.CHANNEL_PREFIX)\n                    && doesPrincipalHavePermission(service, principal, owner,\n                            activity, IPermission.ALL_PORTLETS_TARGET)) {\n            return true;\n        }\n\n        // if this target corresponds to a group or category, check if the user\n        // has the ALL_CATEGORIES or ALL_GROUPS permissions\n        IEntityGroup targetGroup = GroupService.findGroup(target);\n        if (targetGroup != null) {\n            if ((targetGroup.getEntityType().equals(IChannelDefinition.class)\n                    && doesPrincipalHavePermission(service, principal, owner,\n                            activity, IPermission.ALL_CATEGORIES_TARGET) || doesPrincipalHavePermission(\n                    service, principal, owner, activity,\n                    IPermission.ALL_GROUPS_TARGET))) {\n                return true;\n            }\n        }\n\n        // no explicit permission.  Search for an unblocked GRANT.\n        boolean hasUnblockedPathToGrant;\n        try {\n            // track groups we've already explored to avoid infinite loop\n            Set<IGroupMember> seenGroups = new HashSet<IGroupMember>(100);\n            hasUnblockedPathToGrant = hasUnblockedPathToGrant(service, principal, owner, activity, target, seenGroups);\n        } catch (Exception e) {\n            log.error(\"Error searching for unblocked path to grant for principal [\" + principal + \"]\", e);\n            // fail closed\n            return false;\n        }\n        \n        if (log.isTraceEnabled()) {\n        \tif (hasUnblockedPathToGrant) {\n        \t\tlog.trace(\"Principal [\" + principal + \"] is granted permission to perform activity [\" + activity + \"] on target [\" + target + \"] under permission owning system [\" + owner + \"] because this principal has an unblocked path to a GRANT.\");\n        \t} else {\n        \t\tlog.trace(\"Principal [\" + principal + \"] is denied permission to perform activity [\" + activity + \"] on target [\" + target + \"] under permission owning system [\" + owner + \"] because this principal does not have an unblocked path to a GRANT.\");\n        \t}\n        }\n        \n        return hasUnblockedPathToGrant;\n\n    }","commit_id":"b412d0f13fa336db165c2722c9fe05091d5602c7","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\npublic boolean canPrincipalConfigure(IAuthorizationPrincipal principal, int channelPublishId) throws AuthorizationException {\n    String owner = IPermission.PORTAL_PUBLISH;\n    String target = IPermission.CHANNEL_PREFIX + channelPublishId;\n    \n    // retrieve the indicated channel from the channel registry store and \n    // determine its current lifecycle state\n    IChannelDefinition channel = this.channelRegistryStore.getChannelDefinition(channelPublishId);\n    if (channel == null){\n        throw new AuthorizationException(\"Unable to locate channel \" + channelPublishId);\n    }\n    \n    final String activity = IPermission.PORTLET_MODE_CONFIG;\n    return doesPrincipalHavePermission(principal, owner, activity, IPermission.ALL_CHANNELS_TARGET) || \n        doesPrincipalHavePermission(principal, owner, activity, target);\n}","id":10159,"modified_method":"@Override\npublic boolean canPrincipalConfigure(IAuthorizationPrincipal principal, int channelPublishId) throws AuthorizationException {\n    String owner = IPermission.PORTAL_PUBLISH;\n    String target = IPermission.CHANNEL_PREFIX + channelPublishId;\n    \n    // retrieve the indicated channel from the channel registry store and \n    // determine its current lifecycle state\n    IChannelDefinition channel = this.channelRegistryStore.getChannelDefinition(channelPublishId);\n    if (channel == null){\n        throw new AuthorizationException(\"Unable to locate channel \" + channelPublishId);\n    }\n    \n    final String activity = IPermission.PORTLET_MODE_CONFIG;\n    return doesPrincipalHavePermission(principal, owner, activity, target);\n}","commit_id":"b412d0f13fa336db165c2722c9fe05091d5602c7","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n * This checks if the framework has granted principal a right to publish.  DO WE WANT SOMETHING THIS COARSE (de)?\n * @param principal IAuthorizationPrincipal\n * @return boolean\n */\npublic boolean canPrincipalManage(IAuthorizationPrincipal principal, ChannelLifecycleState state, String categoryId) throws AuthorizationException\n{\n//    return doesPrincipalHavePermission\n//      (principal, IPermission.PORTAL_FRAMEWORK, IPermission.CHANNEL_PUBLISHER_ACTIVITY, null);\n    String owner = IPermission.PORTAL_PUBLISH;\n    \n    // retrieve the indicated channel from the channel registry store and \n    // determine its current lifecycle state\n    ChannelCategory category = this.channelRegistryStore.getChannelCategory(categoryId);\n    if (category == null){\n//    \treturn doesPrincipalHavePermission(principal, owner,\n//\t\t\t\tIPermission.CHANNEL_MANAGER_APPROVED_ACTIVITY, target);\n    \tthrow new AuthorizationException(\"Unable to locate category \" + categoryId);\n    }    \n    int order = state.getOrder();\n    \n    String all = IPermission.ALL_CHANNELS_TARGET;\n    String activity = IPermission.CHANNEL_MANAGER_EXPIRED_ACTIVITY;\n\tif (order <= ChannelLifecycleState.EXPIRED.getOrder()\n\t\t\t&& (doesPrincipalHavePermission(principal, owner, activity, all)\n\t\t\t\t|| doesPrincipalHavePermission(principal, owner, \n\t\t\t\t\tactivity, categoryId))) {\n\t\treturn true;\n    }\n\t\n    activity = IPermission.CHANNEL_MANAGER_ACTIVITY;\n\tif (order <= ChannelLifecycleState.PUBLISHED.getOrder()\n\t\t\t&& (doesPrincipalHavePermission(principal, owner, activity, all)\n\t\t\t\t\t|| doesPrincipalHavePermission(principal, owner,\n\t\t\t\t\t\t\tactivity, categoryId))) {\n    \treturn true;\n    }\n\t\n    activity = IPermission.CHANNEL_MANAGER_APPROVED_ACTIVITY;\n\tif (order <= ChannelLifecycleState.APPROVED.getOrder()\n\t\t\t&& (doesPrincipalHavePermission(principal, owner, activity, all)\n\t\t\t\t\t|| doesPrincipalHavePermission(principal, owner,\n\t\t\t\t\t\t\tactivity, categoryId))) {\n    \treturn true;\n    }\n\t\n    activity = IPermission.CHANNEL_MANAGER_CREATED_ACTIVITY;\n\tif (order <= ChannelLifecycleState.CREATED.getOrder()\n\t\t\t&& (doesPrincipalHavePermission(principal, owner, activity, all)\n\t\t\t\t\t|| doesPrincipalHavePermission(principal, owner,\n\t\t\t\t\t\t\tactivity, categoryId))) {\n    \treturn true;\n    }\n    \t\n\treturn false;\n\n}","id":10160,"modified_method":"/**\n * This checks if the framework has granted principal a right to publish.  DO WE WANT SOMETHING THIS COARSE (de)?\n * @param principal IAuthorizationPrincipal\n * @return boolean\n */\npublic boolean canPrincipalManage(IAuthorizationPrincipal principal, ChannelLifecycleState state, String categoryId) throws AuthorizationException\n{\n//    return doesPrincipalHavePermission\n//      (principal, IPermission.PORTAL_FRAMEWORK, IPermission.CHANNEL_PUBLISHER_ACTIVITY, null);\n    String owner = IPermission.PORTAL_PUBLISH;\n    \n    // retrieve the indicated channel from the channel registry store and \n    // determine its current lifecycle state\n    ChannelCategory category = this.channelRegistryStore.getChannelCategory(categoryId);\n    if (category == null){\n//    \treturn doesPrincipalHavePermission(principal, owner,\n//\t\t\t\tIPermission.CHANNEL_MANAGER_APPROVED_ACTIVITY, target);\n    \tthrow new AuthorizationException(\"Unable to locate category \" + categoryId);\n    }    \n    int order = state.getOrder();\n    \n    String activity = IPermission.CHANNEL_MANAGER_EXPIRED_ACTIVITY;\n\tif (order <= ChannelLifecycleState.EXPIRED.getOrder()\n\t\t\t&& doesPrincipalHavePermission(principal, owner, activity, categoryId)) {\n\t\treturn true;\n    }\n\t\n    activity = IPermission.CHANNEL_MANAGER_ACTIVITY;\n\tif (order <= ChannelLifecycleState.PUBLISHED.getOrder()\n\t\t\t&& doesPrincipalHavePermission(principal, owner, activity, categoryId)) {\n    \treturn true;\n    }\n\t\n    activity = IPermission.CHANNEL_MANAGER_APPROVED_ACTIVITY;\n\tif (order <= ChannelLifecycleState.APPROVED.getOrder()\n\t\t\t&& doesPrincipalHavePermission(principal, owner, activity, categoryId)) {\n    \treturn true;\n    }\n\t\n    activity = IPermission.CHANNEL_MANAGER_CREATED_ACTIVITY;\n\tif (order <= ChannelLifecycleState.CREATED.getOrder()\n\t\t\t&& doesPrincipalHavePermission(principal, owner, activity, categoryId)) {\n    \treturn true;\n    }\n    \t\n\treturn false;\n\n}","commit_id":"b412d0f13fa336db165c2722c9fe05091d5602c7","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n * Answers if the principal has permission to MANAGE this Channel.\n * @return boolean\n * @param principal IAuthorizationPrincipal\n * @param channelPublishId int\n * @exception AuthorizationException indicates authorization information could not be retrieved.\n */\npublic boolean canPrincipalManage(IAuthorizationPrincipal principal, int channelPublishId)\nthrows AuthorizationException\n{\n    String owner = IPermission.PORTAL_PUBLISH;\n    String target = IPermission.CHANNEL_PREFIX + channelPublishId;\n    \n    // retrieve the indicated channel from the channel registry store and \n    // determine its current lifecycle state\n\tIChannelDefinition channel = this.channelRegistryStore\n\t\t\t\t.getChannelDefinition(channelPublishId);\n    if (channel == null){\n    \treturn doesPrincipalHavePermission(principal, owner,\n\t\t\t\tIPermission.CHANNEL_MANAGER_APPROVED_ACTIVITY, target);\n//    \tthrow new AuthorizationException(\"Unable to locate channel \" + channelPublishId);\n    }    \n    ChannelLifecycleState state = channel.getLifecycleState();\n    int order = state.getOrder();\n    \n    /*\n     * The following code assumes that later lifecycle states imply permission\n     * for earlier lifecycle states.  For example, if a user has permission to \n     * manage an expired channel, we assume s/he also has permission to \n     * create, approve, and publish channels.  The following code counts \n     * channels with auto-publish or auto-expiration dates set as requiring\n     * publish or expiration permissions for management, even though the channel \n     * may not yet be published or expired.\n     */\n    \n    String all = IPermission.ALL_CHANNELS_TARGET;\n    String activity = IPermission.CHANNEL_MANAGER_EXPIRED_ACTIVITY;\n\tif ((order <= ChannelLifecycleState.EXPIRED.getOrder() \n\t\t\t|| channel.getExpirationDate() != null)\n\t\t\t&& (doesPrincipalHavePermission(principal, owner, activity, all)\n\t\t\t\t|| doesPrincipalHavePermission(principal, owner,\n\t\t\t\t\t\tactivity, target))) {\n\t\treturn true;\n    } \n\t\n\tactivity = IPermission.CHANNEL_MANAGER_ACTIVITY;\n\tif ((order <= ChannelLifecycleState.PUBLISHED.getOrder() \n    \t\t|| channel.getPublishDate() != null)\n\t\t\t&& (doesPrincipalHavePermission(principal, owner, activity, all)\n\t\t\t\t|| doesPrincipalHavePermission(principal, owner, \n\t\t\t\t\t\tactivity, target))) {\n    \treturn true;\n    } \n\t\n\tactivity = IPermission.CHANNEL_MANAGER_APPROVED_ACTIVITY;\n\tlog.debug(\"order: \" + order + \", approved order: \" + ChannelLifecycleState.APPROVED.getOrder());\n\tif (order <= ChannelLifecycleState.APPROVED.getOrder()\n\t\t\t&& (doesPrincipalHavePermission(principal, owner, activity, all)\n\t\t\t\t|| doesPrincipalHavePermission(principal, owner,\n\t\t\t\t\t\tactivity, target))) {\n    \treturn true;\n    } \n\t\n\tactivity = IPermission.CHANNEL_MANAGER_CREATED_ACTIVITY;\n\tif (order <= ChannelLifecycleState.CREATED.getOrder()\n\t\t\t&& (doesPrincipalHavePermission(principal, owner, activity, all)\n\t\t\t\t|| doesPrincipalHavePermission(principal, owner,\n\t\t\t\t\t\tactivity, target))) {\n    \treturn true;\n    }\n    \t\n\t// if no permissions were found, return false\n\treturn false;\n}","id":10161,"modified_method":"/**\n * Answers if the principal has permission to MANAGE this Channel.\n * @return boolean\n * @param principal IAuthorizationPrincipal\n * @param channelPublishId int\n * @exception AuthorizationException indicates authorization information could not be retrieved.\n */\npublic boolean canPrincipalManage(IAuthorizationPrincipal principal, int channelPublishId)\nthrows AuthorizationException\n{\n    String owner = IPermission.PORTAL_PUBLISH;\n    String target = IPermission.CHANNEL_PREFIX + channelPublishId;\n    \n    // retrieve the indicated channel from the channel registry store and \n    // determine its current lifecycle state\n\tIChannelDefinition channel = this.channelRegistryStore\n\t\t\t\t.getChannelDefinition(channelPublishId);\n    if (channel == null){\n    \treturn doesPrincipalHavePermission(principal, owner,\n\t\t\t\tIPermission.CHANNEL_MANAGER_APPROVED_ACTIVITY, target);\n//    \tthrow new AuthorizationException(\"Unable to locate channel \" + channelPublishId);\n    }    \n    ChannelLifecycleState state = channel.getLifecycleState();\n    int order = state.getOrder();\n    \n    /*\n     * The following code assumes that later lifecycle states imply permission\n     * for earlier lifecycle states.  For example, if a user has permission to \n     * manage an expired channel, we assume s/he also has permission to \n     * create, approve, and publish channels.  The following code counts \n     * channels with auto-publish or auto-expiration dates set as requiring\n     * publish or expiration permissions for management, even though the channel \n     * may not yet be published or expired.\n     */\n    \n    String activity = IPermission.CHANNEL_MANAGER_EXPIRED_ACTIVITY;\n\tif ((order <= ChannelLifecycleState.EXPIRED.getOrder() \n\t\t\t|| channel.getExpirationDate() != null)\n\t\t\t&& doesPrincipalHavePermission(principal, owner, activity, target)) {\n\t\treturn true;\n    } \n\t\n\tactivity = IPermission.CHANNEL_MANAGER_ACTIVITY;\n\tif ((order <= ChannelLifecycleState.PUBLISHED.getOrder() \n    \t\t|| channel.getPublishDate() != null)\n\t\t\t&& doesPrincipalHavePermission(principal, owner, activity, target)) {\n    \treturn true;\n    } \n\t\n\tactivity = IPermission.CHANNEL_MANAGER_APPROVED_ACTIVITY;\n\tlog.debug(\"order: \" + order + \", approved order: \" + ChannelLifecycleState.APPROVED.getOrder());\n\tif (order <= ChannelLifecycleState.APPROVED.getOrder()\n\t\t\t&& doesPrincipalHavePermission(principal, owner, activity, target)) {\n    \treturn true;\n    } \n\t\n\tactivity = IPermission.CHANNEL_MANAGER_CREATED_ACTIVITY;\n\tif (order <= ChannelLifecycleState.CREATED.getOrder()\n\t\t\t&& doesPrincipalHavePermission(principal, owner, activity, target)) {\n    \treturn true;\n    }\n    \t\n\t// if no permissions were found, return false\n\treturn false;\n}","commit_id":"b412d0f13fa336db165c2722c9fe05091d5602c7","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n * Answers if the principal has permission to SUBSCRIBE to this Channel.\n * @return boolean\n * @param principal IAuthorizationPrincipal\n * @param channelPublishId int\n * @exception AuthorizationException indicates authorization information could not be retrieved.\n */\npublic boolean canPrincipalSubscribe(IAuthorizationPrincipal principal, int channelPublishId)\n{\n    String owner = IPermission.PORTAL_SUBSCRIBE;\n    String target = IPermission.CHANNEL_PREFIX + channelPublishId;\n    \n    // retrieve the indicated channel from the channel registry store and \n    // determine its current lifecycle state\n\tIChannelDefinition channel = this.channelRegistryStore\n\t\t\t\t.getChannelDefinition(channelPublishId);\n    if (channel == null){\n    \treturn false;\n    }    \n    ChannelLifecycleState state = channel.getLifecycleState();\n    \n    /*\n     * Each channel lifecycle state now has its own subscribe permission.  The\n     * following logic checks the appropriate permission for the lifecycle.\n     */\n    String permission;\n    if (state.equals(ChannelLifecycleState.PUBLISHED)) {\n    \tpermission = IPermission.CHANNEL_SUBSCRIBER_ACTIVITY;\n    } else if (state.equals(ChannelLifecycleState.APPROVED)) {\n    \tpermission = IPermission.CHANNEL_SUBSCRIBER_APPROVED_ACTIVITY;\n    } else if (state.equals(ChannelLifecycleState.CREATED)) {\n    \tpermission = IPermission.CHANNEL_SUBSCRIBER_CREATED_ACTIVITY;\n    } else if (state.equals(ChannelLifecycleState.EXPIRED)) {\n    \tpermission = IPermission.CHANNEL_SUBSCRIBER_EXPIRED_ACTIVITY;\n    } else {\n\t\t\tthrow new AuthorizationException(\n\t\t\t\t\t\"Unrecognized lifecycle state for channel \"\n\t\t\t\t\t\t\t+ channelPublishId);\n    }\n\n    // test the appropriate permission\n    return (doesPrincipalHavePermission(principal, owner, permission, IPermission.ALL_CHANNELS_TARGET)\n    \t\t|| doesPrincipalHavePermission(principal, owner, permission, target));\n\n}","id":10162,"modified_method":"/**\n * Answers if the principal has permission to SUBSCRIBE to this Channel.\n * @return boolean\n * @param principal IAuthorizationPrincipal\n * @param channelPublishId int\n * @exception AuthorizationException indicates authorization information could not be retrieved.\n */\npublic boolean canPrincipalSubscribe(IAuthorizationPrincipal principal, int channelPublishId)\n{\n    String owner = IPermission.PORTAL_SUBSCRIBE;\n    String target = IPermission.CHANNEL_PREFIX + channelPublishId;\n    \n    // retrieve the indicated channel from the channel registry store and \n    // determine its current lifecycle state\n\tIChannelDefinition channel = this.channelRegistryStore\n\t\t\t\t.getChannelDefinition(channelPublishId);\n    if (channel == null){\n    \treturn false;\n    }    \n    ChannelLifecycleState state = channel.getLifecycleState();\n    \n    /*\n     * Each channel lifecycle state now has its own subscribe permission.  The\n     * following logic checks the appropriate permission for the lifecycle.\n     */\n    String permission;\n    if (state.equals(ChannelLifecycleState.PUBLISHED)) {\n    \tpermission = IPermission.CHANNEL_SUBSCRIBER_ACTIVITY;\n    } else if (state.equals(ChannelLifecycleState.APPROVED)) {\n    \tpermission = IPermission.CHANNEL_SUBSCRIBER_APPROVED_ACTIVITY;\n    } else if (state.equals(ChannelLifecycleState.CREATED)) {\n    \tpermission = IPermission.CHANNEL_SUBSCRIBER_CREATED_ACTIVITY;\n    } else if (state.equals(ChannelLifecycleState.EXPIRED)) {\n    \tpermission = IPermission.CHANNEL_SUBSCRIBER_EXPIRED_ACTIVITY;\n    } else {\n\t\t\tthrow new AuthorizationException(\n\t\t\t\t\t\"Unrecognized lifecycle state for channel \"\n\t\t\t\t\t\t\t+ channelPublishId);\n    }\n\n    // test the appropriate permission\n    return doesPrincipalHavePermission(principal, owner, permission, target);\n\n}","commit_id":"b412d0f13fa336db165c2722c9fe05091d5602c7","url":"https://github.com/Jasig/uPortal"},{"original_method":"public Collection<IPermissionTarget> searchTargets(String term) {\n\n        // Initialize a new collection of matching targets.  We use a HashSet\n        // implementation here to prevent duplicate target entries.\n        Collection<IPermissionTarget> matching = new HashSet<IPermissionTarget>();\n\n        /*\n         * Attempt to find matching entities for each allowed entity type.\n         * Any matching entities will be added to our collection.\n         */\n        \n        for (String type : allowedEntityTypes) {\n            Set<JsonEntityBean> entities = groupListHelper.search(type, term);\n            for (JsonEntityBean entity : entities) {\n                IPermissionTarget target = new PermissionTargetImpl(entity.getId(), entity.getName());\n                matching.add(target);\n            }\n        }\n        \n        // return the list of matching targets\n        return matching;\n    }","id":10163,"modified_method":"public Collection<IPermissionTarget> searchTargets(String term) {\n\n        // Initialize a new collection of matching targets.  We use a HashSet\n        // implementation here to prevent duplicate target entries.\n        Collection<IPermissionTarget> matching = new HashSet<IPermissionTarget>();\n\n        /*\n         * Attempt to find matching entities for each allowed entity type.\n         * Any matching entities will be added to our collection.\n         */\n        \n        for (String type : allowedEntityTypes) {\n            Set<JsonEntityBean> entities = groupListHelper.search(type, term);\n            for (JsonEntityBean entity : entities) {\n                IPermissionTarget target = new PermissionTargetImpl(entity.getId(), entity.getName());\n                matching.add(target);\n            }\n        }\n\n        if (IPermission.ALL_CATEGORIES_TARGET.contains(term)) {\n            matching.add(getAllCategoriesTarget());\n        } else if (IPermission.ALL_PORTLETS_TARGET.contains(term)) {\n            matching.add(getAllPortletsTarget());\n        } else if (IPermission.ALL_GROUPS_TARGET.contains(term)) {\n            matching.add(getAllGroupsTarget());\n        }\n\n        // return the list of matching targets\n        return matching;\n    }","commit_id":"b412d0f13fa336db165c2722c9fe05091d5602c7","url":"https://github.com/Jasig/uPortal"},{"original_method":"public IPermissionTarget getTarget(String key) {\n        \n        /*\n         * Attempt to find a matching entity for each allowed entity type.  This\n         * implementation will return the first entity that it finds. If the \n         * portal contains duplicate entity keys across multiple types, it's\n         * possible that this implementation would demonstrate inconsistent\n         * behavior.\n         */\n        \n        for (String type : allowedEntityTypes) {\n            JsonEntityBean entity = groupListHelper.getEntity(type, key, false);\n            if (entity != null) {\n                IPermissionTarget target = new PermissionTargetImpl(entity.getId(), entity.getName());\n                return target;\n            }\n        }\n        \n        return null;\n    }","id":10164,"modified_method":"public IPermissionTarget getTarget(String key) {\n\n        /*\n         * If the specified key matches one of the \"all entity\" style targets,\n         * just return the appropriate target.\n         */\n        \n        if (IPermission.ALL_CATEGORIES_TARGET.equals(key)) {\n            return getAllCategoriesTarget();\n        } else if (IPermission.ALL_PORTLETS_TARGET.equals(key)) {\n            return getAllPortletsTarget();\n        } else if (IPermission.ALL_GROUPS_TARGET.equals(key)) {\n            return getAllGroupsTarget();\n        }\n        \n        /*\n         * Attempt to find a matching entity for each allowed entity type.  This\n         * implementation will return the first entity that it finds. If the \n         * portal contains duplicate entity keys across multiple types, it's\n         * possible that this implementation would demonstrate inconsistent\n         * behavior.\n         */\n        \n        for (String type : allowedEntityTypes) {\n            JsonEntityBean entity = groupListHelper.getEntity(type, key, false);\n            if (entity != null) {\n                IPermissionTarget target = new PermissionTargetImpl(entity.getId(), entity.getName());\n                return target;\n            }\n        }\n        \n        return null;\n    }","commit_id":"b412d0f13fa336db165c2722c9fe05091d5602c7","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n     * Construct a text or link that mention the people that helped with an action.\n     *\n     * @param sink The sink\n     * @param action The action that was done\n     * @param bundle A resource bundle for i18n\n     * @param dueTos Other people that helped with an action\n     */\n    private void constructDueTo( Sink sink, Action action, ResourceBundle bundle, List dueTos )\n    {\n\n        // Create a Map with key : dueTo name, value : dueTo email\n        Map namesEmailMap = new LinkedHashMap();\n\n        // Only add the dueTo specified as attributes, if it has either a dueTo or a dueToEmail\n        if ( StringUtils.isNotEmpty( action.getDueTo() ) || StringUtils.isNotEmpty( action.getDueToEmail() ) )\n        {\n            namesEmailMap.put( action.getDueTo(), action.getDueToEmail() );\n        }\n\n        for ( Iterator iterator = dueTos.iterator(); iterator.hasNext(); )\n        {\n            DueTo dueTo = (DueTo) iterator.next();\n            namesEmailMap.put( dueTo.getName(), dueTo.getEmail() );\n        }\n\n        if ( namesEmailMap.isEmpty() )\n        {\n            return;\n        }\n\n        sink.text( \" \" + bundle.getString( \"report.changes.text.thanx\" ) + \" \" );\n        int i = 0;\n        for ( Iterator iterator = namesEmailMap.keySet().iterator(); iterator.hasNext(); )\n        {\n            String currentDueTo = (String) iterator.next();\n            String currentDueToEmail = (String) namesEmailMap.get( currentDueTo );\n            i++;\n\n            if ( StringUtils.isNotEmpty( currentDueToEmail ) )\n            {\n                sinkLink( sink, currentDueTo, \"mailto:\" + currentDueToEmail );\n            }\n            else if ( StringUtils.isNotEmpty( currentDueTo ) )\n            {\n                sink.text( currentDueTo );\n            }\n\n            if ( i < namesEmailMap.size() )\n            {\n                sink.text( \", \" );\n            }\n        }\n\n        sink.text( \".\" );\n    }","id":10165,"modified_method":"/**\n     * Construct a text or link that mention the people that helped with an action.\n     *\n     * @param sink The sink\n     * @param action The action that was done\n     * @param bundle A resource bundle for i18n\n     * @param dueTos Other people that helped with an action\n     */\n    private void constructDueTo( Sink sink, Action action, ResourceBundle bundle, List dueTos )\n    {\n\n        // Create a Map with key : dueTo name, value : dueTo email\n        Map<String,String> namesEmailMap = new LinkedHashMap<String,String>();\n\n        // Only add the dueTo specified as attributes, if it has either a dueTo or a dueToEmail\n        if ( StringUtils.isNotEmpty( action.getDueTo() ) || StringUtils.isNotEmpty( action.getDueToEmail() ) )\n        {\n            namesEmailMap.put( action.getDueTo(), action.getDueToEmail() );\n        }\n\n        for ( Iterator iterator = dueTos.iterator(); iterator.hasNext(); )\n        {\n            DueTo dueTo = (DueTo) iterator.next();\n            namesEmailMap.put( dueTo.getName(), dueTo.getEmail() );\n        }\n\n        if ( namesEmailMap.isEmpty() )\n        {\n            return;\n        }\n\n        sink.text( \" \" + bundle.getString( \"report.changes.text.thanx\" ) + \" \" );\n        int i = 0;\n        for ( String currentDueTo : namesEmailMap.keySet() )\n        {\n            String currentDueToEmail = namesEmailMap.get( currentDueTo );\n            i++;\n\n            if ( StringUtils.isNotEmpty( currentDueToEmail ) )\n            {\n                sinkLink( sink, currentDueTo, \"mailto:\" + currentDueToEmail );\n            }\n            else if ( StringUtils.isNotEmpty( currentDueTo ) )\n            {\n                sink.text( currentDueTo );\n            }\n\n            if ( i < namesEmailMap.size() )\n            {\n                sink.text( \", \" );\n            }\n        }\n\n        sink.text( \".\" );\n    }","commit_id":"fdc1b02a99c328f5ef5d615f0a637df1f9232aa3","url":"https://github.com/apache/maven-plugins"},{"original_method":"private final void prepareContext(XPathContextMajor xpathContext, Object functionContext) throws XPathException {\n\n        // Pass function context to controller\n        xpathContext.getController().setUserData(\"\", this.getClass().getName(), functionContext);\n\n        // Use low-level Expression object and implement context node-set and context position\n        final SlotManager slotManager = this.stackFrameMap; // this is already set on XPathExpressionImpl but we can't get to it\n        xpathContext.setCurrentIterator(new ListSequenceIterator(contextItems, contextPosition));\n        xpathContext.openStackFrame(slotManager);\n\n        // Set variable values if any\n        if (variableToValueMap != null) {\n            for (Iterator i = variables.entrySet().iterator(); i.hasNext();) {\n                final Map.Entry entry = (Map.Entry) i.next();\n                final String name = (String) entry.getKey();\n                final Variable variable = (Variable) entry.getValue();\n\n                final ValueRepresentation object = variableToValueMap.get(name);\n                if (object != null) {\n                    // Convert Java object to Saxon object\n                    final ValueRepresentation valueRepresentation = XFormsUtils.convertJavaObjectToSaxonObject(object);\n                    xpathContext.setLocalVariable(variable.getLocalSlotNumber(), valueRepresentation);\n                }\n            }\n        }\n    }","id":10166,"modified_method":"private void prepareContext(XPathContextMajor xpathContext, Object functionContext) throws XPathException {\n\n        // Pass function context to controller\n        xpathContext.getController().setUserData(\"\", this.getClass().getName(), functionContext);\n\n        // Use low-level Expression object and implement context node-set and context position\n        final SlotManager slotManager = this.stackFrameMap; // this is already set on XPathExpressionImpl but we can't get to it\n        xpathContext.setCurrentIterator(new ListSequenceIterator(contextItems, contextPosition));\n        xpathContext.openStackFrame(slotManager);\n\n        // Set variable values if any\n        if (variableToValueMap != null) {\n            for (Map.Entry<String, Variable> entry: variables.entrySet()) {\n                final String name = entry.getKey();\n                final Variable variable = entry.getValue();\n\n                final ValueRepresentation object = variableToValueMap.get(name);\n                if (object != null) {\n                    // Convert Java object to Saxon object\n                    final ValueRepresentation valueRepresentation = XFormsUtils.convertJavaObjectToSaxonObject(object);\n                    xpathContext.setLocalVariable(variable.getLocalSlotNumber(), valueRepresentation);\n                }\n            }\n        }\n    }","commit_id":"2af2de04871f42efcf4c389139ee23acb51c7625","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"public PooledXPathExpression(Expression expression, ObjectPool pool, IndependentContext context, Map variables) {\n        this.expression = expression;\n        this.pool = pool;\n        this.configuration = context.getConfiguration();\n        this.stackFrameMap = context.getStackFrameMap();\n        this.variables = variables;\n    }","id":10167,"modified_method":"public PooledXPathExpression(Expression expression, ObjectPool pool, IndependentContext context, Map<String, Variable> variables) {\n        this.expression = expression;\n        this.pool = pool;\n        this.configuration = context.getConfiguration();\n        this.stackFrameMap = context.getStackFrameMap();\n        this.variables = variables;\n    }","commit_id":"2af2de04871f42efcf4c389139ee23acb51c7625","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Return the expanded shadow tree for the given prefixed control id.\n     *\n     * @param controlPrefixedId     prefixed control id\n     * @return                      full expanded shadow tree, or null\n     */\n    public Element getFullShadowTree(String controlPrefixedId) {\n        return (xblFullShadowTrees == null) ? null : ((Document) xblFullShadowTrees.get(controlPrefixedId)).getRootElement();\n    }","id":10168,"modified_method":"/**\n     * Return the expanded shadow tree for the given prefixed control id.\n     *\n     * @param controlPrefixedId     prefixed control id\n     * @return                      full expanded shadow tree, or null\n     */\n    public Element getFullShadowTree(String controlPrefixedId) {\n        return (xblFullShadowTrees != null) ? xblFullShadowTrees.get(controlPrefixedId).getRootElement() : null;\n    }","commit_id":"2af2de04871f42efcf4c389139ee23acb51c7625","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Return the expanded shadow tree for the given prefixed control id, with only XForms controls and no markup.\n     *\n     * @param controlPrefixedId     prefixed control id\n     * @return                      compact expanded shadow tree, or null\n     */\n    public Element getCompactShadowTree(String controlPrefixedId) {\n        return (xblCompactShadowTrees == null) ? null : ((Document) xblCompactShadowTrees.get(controlPrefixedId)).getRootElement();\n    }","id":10169,"modified_method":"/**\n     * Return the expanded shadow tree for the given prefixed control id, with only XForms controls and no markup.\n     *\n     * @param controlPrefixedId     prefixed control id\n     * @return                      compact expanded shadow tree, or null\n     */\n    public Element getCompactShadowTree(String controlPrefixedId) {\n        return (xblCompactShadowTrees == null) ? null : xblCompactShadowTrees.get(controlPrefixedId).getRootElement();\n    }","commit_id":"2af2de04871f42efcf4c389139ee23acb51c7625","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Generate shadow content for the given control id and XBL binding.\n     *\n     * @param boundElement      element to which the binding applies\n     * @param binding           corresponding <xbl:binding>\n     * @return                  shadow tree document\n     */\n    private Document generateXBLShadowContent(final PipelineContext pipelineContext, final DocumentWrapper documentWrapper,\n                                                    final Element boundElement, Element binding, Map<String, Map<String, String>> namespaceMappings, final String prefix) {\n        final Element templateElement = binding.element(XFormsConstants.XBL_TEMPLATE_QNAME);\n        if (templateElement != null) {\n            // TODO: in script mode, XHTML elements in template should only be kept during page generation\n\n            // Here we create a completely separate document\n\n            // 1. Apply optional preprocessing step (usually XSLT)\n            // Copy as the template element may be used many times\n            final Document shadowTreeDocument = transformTemplate(templateElement, boundElement);\n\n            // 2. Apply xbl:attr, xbl:content, xxbl:attr\n            Dom4jUtils.visitSubtree(shadowTreeDocument.getRootElement(), new Dom4jUtils.VisitorListener() {\n                public void startElement(Element element) {\n\n                    // Handle xbl:content\n\n                    final boolean isXBLContent = element.getQName().equals(XFormsConstants.XBL_CONTENT_QNAME);\n                    final List resultingNodes;\n                    if (isXBLContent) {\n                        final String includesAttribute = element.attributeValue(\"includes\");\n                        final List<Node> contentToInsert;\n                        if (includesAttribute == null) {\n                            // All bound node content must be copied over\n                            final List<Node> elementContent = Dom4jUtils.content(boundElement);\n                            final List<Node> clonedContent = new ArrayList<Node>();\n                            for (Node node: elementContent) {\n                                if (node instanceof Element) {\n                                    clonedContent.add(Dom4jUtils.copyElementCopyParentNamespaces((Element) node));\n                                } else if (!(node instanceof Namespace)) {\n                                     clonedContent.add(Dom4jUtils.createCopy(node));\n                                }\n                            }\n\n                            contentToInsert = clonedContent;\n                        } else {\n                            // Apply CSS selector\n\n                            // Convert CSS to XPath\n                            final String xpathExpression = cssToXPath(includesAttribute);\n\n                            final NodeInfo boundElementInfo = documentWrapper.wrap(boundElement);\n\n                            // TODO: don't use getNamespaceContext() as this is already computed for the bound element\n                            final List elements = XPathCache.evaluate(pipelineContext, boundElementInfo, xpathExpression, Dom4jUtils.getNamespaceContext(element),\n                                    null, null, null, null, null);// TODO: locationData\n\n                            if (elements.size() > 0) {\n                                // Clone all the resulting elements\n                                contentToInsert = new ArrayList<Node>(elements.size());\n                                for (Iterator i = elements.iterator(); i.hasNext();) {\n                                    final NodeInfo currentNodeInfo = (NodeInfo) i.next();\n                                    final Element currentElement = (Element) ((NodeWrapper) currentNodeInfo).getUnderlyingNode();\n\n                                    contentToInsert.add(Dom4jUtils.copyElementCopyParentNamespaces(currentElement));\n                                }\n                            } else {\n                                contentToInsert = null;\n                            }\n                        }\n\n                        // Insert content if any\n                        if (contentToInsert != null && contentToInsert.size() > 0) {\n                            final List<Node> parentContent = Dom4jUtils.content(element.getParent());\n                            final int elementIndex = parentContent.indexOf(element);\n                            parentContent.addAll(elementIndex, contentToInsert);\n                        }\n\n                        // Remove <xbl:content> from shadow tree\n                        element.detach();\n\n                        resultingNodes = contentToInsert;\n                    } else {\n                        // Element is simply kept\n                        resultingNodes = Collections.singletonList(element);\n                    }\n\n                    // Handle attribute forwarding\n                    final Attribute xblAttr = element.attribute(XFormsConstants.XBL_ATTR_QNAME);    // standard xbl:attr (custom syntax)\n                    final Attribute xxblAttr = element.attribute(XFormsConstants.XXBL_ATTR_QNAME);  // extension xxbl:attr (XPath expression)\n                    if (xblAttr != null) {\n                        // Detach attribute (not strictly necessary?)\n                        xblAttr.detach();\n                        // Get attribute value\n                        final String xblAttrString = xblAttr.getValue();\n                        final StringTokenizer st = new StringTokenizer(xblAttrString);\n                        while (st.hasMoreTokens()) {\n                            final String currentValue = st.nextToken();\n\n                            final int equalIndex = currentValue.indexOf('=');\n                            if (equalIndex == -1) {\n                                // No a=b pair, just a single QName\n                                final QName valueQName = Dom4jUtils.extractTextValueQName(element, currentValue, true);\n                                if (!valueQName.getNamespaceURI().equals(XFormsConstants.XBL_NAMESPACE_URI)) {\n                                     // This is not xbl:text, copy the attribute\n                                    setAttribute(resultingNodes, valueQName, boundElement.attributeValue(valueQName));\n                                } else {\n                                    // This is xbl:text\n                                    // \"The xbl:text value cannot occur by itself in the list\"\n                                }\n\n                            } else {\n                                // a=b pair\n                                final QName leftSideQName; {\n                                final String leftSide = currentValue.substring(0, equalIndex);\n                                    leftSideQName = Dom4jUtils.extractTextValueQName(element, leftSide, true);\n                                }\n                                final QName rightSideQName; {\n                                    final String rightSide = currentValue.substring(equalIndex + 1);\n                                    rightSideQName = Dom4jUtils.extractTextValueQName(element, rightSide, true);\n                                }\n\n                                final boolean isLeftSideXBLText = leftSideQName.getNamespaceURI().equals(XFormsConstants.XBL_NAMESPACE_URI);\n                                final boolean isRightSideXBLText = rightSideQName.getNamespaceURI().equals(XFormsConstants.XBL_NAMESPACE_URI);\n\n                                final String rightSideValue;\n                                if (!isRightSideXBLText) {\n                                     // Get attribute value\n                                    rightSideValue = boundElement.attributeValue(rightSideQName);\n                                } else {\n                                    // Get text value\n\n                                    // \"any text nodes (including CDATA nodes and whitespace text nodes) that are\n                                    // explicit children of the bound element must have their data concatenated\"\n                                    rightSideValue = boundElement.getText();// must use getText() and not stringValue()\n                                }\n\n                                if (rightSideValue != null) {// not sure if XBL says what should happen if the source attribute is not found\n                                    if (!isLeftSideXBLText) {\n                                         // Set attribute value\n                                        setAttribute(resultingNodes, leftSideQName, rightSideValue);\n                                    } else {\n                                        // Set text value\n\n                                        // \"value of the attribute on the right-hand side are to be represented as text\n                                        // nodes underneath the shadow element\"\n\n                                        // TODO: \"If the element has any child nodes in the DOM (any nodes, including\n                                        // comment nodes, whitespace text nodes, or even empty CDATA nodes) then the pair\n                                        // is in error and UAs must ignore it, meaning the attribute value is not forwarded\"\n\n                                        setText(resultingNodes, rightSideValue);\n                                    }\n                                }\n                            }\n                            // TODO: handle xbl:lang?\n                            // TODO: handle type specifiers?\n                        }\n                    } else if (xxblAttr != null) {\n                        // Detach attribute (not strictly necessary?)\n                        xxblAttr.detach();\n                        // Get attribute value\n                        final String xxblAttrString = xxblAttr.getValue();\n\n                        final NodeInfo boundElementInfo = documentWrapper.wrap(boundElement);\n\n                        // TODO: don't use getNamespaceContext() as this is already computed for the bound element\n                        final List nodes = XPathCache.evaluate(pipelineContext, boundElementInfo, xxblAttrString, Dom4jUtils.getNamespaceContext(element),\n                                null, null, null, null, null);// TODO: locationData\n\n                        if (nodes.size() > 0) {\n                            for (Iterator i = nodes.iterator(); i.hasNext();) {\n                                final NodeInfo currentNodeInfo = (NodeInfo) i.next();\n                                if (currentNodeInfo.getNodeKind() == org.w3c.dom.Document.ATTRIBUTE_NODE) {\n                                    // This is an attribute\n                                    final Attribute currentAttribute = (Attribute) ((NodeWrapper) currentNodeInfo).getUnderlyingNode();\n                                    setAttribute(resultingNodes, currentAttribute.getQName(), currentAttribute.getValue());\n                                }\n                            }\n                        }\n                    }\n\n                    // Prefix resulting xhtml:*/(@id |@for)\n\n                    // NOTE: We could also do the prefixing in the handlers, when the page is output.\n                    //\n                    // * Benefit of prefixing here: done statically\n                    // * Drawback of prefixing here: in the future if we try to reuse simple shadow trees this won't work\n\n//                    {\n//                        if (resultingNodes != null && resultingNodes.size() > 0) {\n//                            for (Iterator i = resultingNodes.iterator(); i.hasNext();) {\n//                                final Node node = (Node) i.next();\n//                                if (node instanceof Element) {\n//                                    Dom4jUtils.visitSubtree((Element) node, new Dom4jUtils.VisitorListener() {\n//                                        public void startElement(Element element) {\n//                                            if (XMLConstants.XHTML_NAMESPACE_URI.equals(element.getNamespaceURI())) {\n//                                                // Found XHTML element\n//\n//                                                // Update @id and @for if any\n//                                                final Attribute idAttribute = element.attribute(\"id\");\n//                                                if (idAttribute != null) {\n//                                                    idAttribute.setValue(prefix + idAttribute.getValue());\n//                                                }\n//                                                final Attribute forAttribute = element.attribute(\"for\");\n//                                                if (forAttribute != null) {\n//                                                    forAttribute.setValue(prefix + forAttribute.getValue());\n//                                                }\n//                                            }\n//                                        }\n//\n//                                        public void endElement(Element element) {\n//                                        }\n//\n//                                        public void text(Text text) {\n//                                        }\n//                                    });\n//                                }\n//                            }\n//                        }\n//                    }\n                }\n\n                private final void setAttribute(List nodes, QName attributeQName, String attributeValue) {\n                    if (nodes != null && nodes.size() > 0) {\n                        for (Iterator i = nodes.iterator(); i.hasNext();) {\n                            final Node node = (Node) i.next();\n                            if (node instanceof Element) {\n                                ((Element) node).addAttribute(attributeQName, attributeValue);\n                            }\n                        }\n                    }\n                }\n\n                private final void setText(List nodes, String value) {\n                    if (nodes != null && nodes.size() > 0) {\n                        for (Iterator i = nodes.iterator(); i.hasNext();) {\n                            final Node node = (Node) i.next();\n                            if (node instanceof Element) {\n                                ((Element) node).setText(value);\n                            }\n                        }\n                    }\n                }\n\n                public void endElement(Element element) {}\n\n                public void text(Text text) {}\n            }, true);\n\n            // Annotate tree\n            final Document annotedShadowTreeDocument = annotateShadowTree(shadowTreeDocument, namespaceMappings, prefix);\n\n            if (XFormsServer.logger.isDebugEnabled()) {\n                XFormsContainingDocument.logDebugStatic(\"static state\", \"annotated shadow tree\",\n                        new String[] { \"bound element\", Dom4jUtils.elementToString(boundElement), \"document\", Dom4jUtils.domToString(annotedShadowTreeDocument) });\n            }\n\n            return annotedShadowTreeDocument;\n        } else {\n            return null;\n        }\n    }","id":10170,"modified_method":"/**\n     * Generate shadow content for the given control id and XBL binding.\n     *\n     * @param boundElement      element to which the binding applies\n     * @param binding           corresponding <xbl:binding>\n     * @return                  shadow tree document\n     */\n    private Document generateXBLShadowContent(final PipelineContext pipelineContext, final DocumentWrapper documentWrapper,\n                                                    final Element boundElement, Element binding, Map<String, Map<String, String>> namespaceMappings, final String prefix) {\n        final Element templateElement = binding.element(XFormsConstants.XBL_TEMPLATE_QNAME);\n        if (templateElement != null) {\n            // TODO: in script mode, XHTML elements in template should only be kept during page generation\n\n            // Here we create a completely separate document\n\n            // 1. Apply optional preprocessing step (usually XSLT)\n            // Copy as the template element may be used many times\n            final Document shadowTreeDocument = transformTemplate(templateElement, boundElement);\n\n            // 2. Apply xbl:attr, xbl:content, xxbl:attr\n            Dom4jUtils.visitSubtree(shadowTreeDocument.getRootElement(), new Dom4jUtils.VisitorListener() {\n                public void startElement(Element element) {\n\n                    // Handle xbl:content\n\n                    final boolean isXBLContent = element.getQName().equals(XFormsConstants.XBL_CONTENT_QNAME);\n                    final List<Node> resultingNodes;\n                    if (isXBLContent) {\n                        final String includesAttribute = element.attributeValue(\"includes\");\n                        final List<Node> contentToInsert;\n                        if (includesAttribute == null) {\n                            // All bound node content must be copied over\n                            final List<Node> elementContent = Dom4jUtils.content(boundElement);\n                            final List<Node> clonedContent = new ArrayList<Node>();\n                            for (Node node: elementContent) {\n                                if (node instanceof Element) {\n                                    clonedContent.add(Dom4jUtils.copyElementCopyParentNamespaces((Element) node));\n                                } else if (!(node instanceof Namespace)) {\n                                     clonedContent.add(Dom4jUtils.createCopy(node));\n                                }\n                            }\n\n                            contentToInsert = clonedContent;\n                        } else {\n                            // Apply CSS selector\n\n                            // Convert CSS to XPath\n                            final String xpathExpression = cssToXPath(includesAttribute);\n\n                            final NodeInfo boundElementInfo = documentWrapper.wrap(boundElement);\n\n                            // TODO: don't use getNamespaceContext() as this is already computed for the bound element\n                            final List elements = XPathCache.evaluate(pipelineContext, boundElementInfo, xpathExpression, Dom4jUtils.getNamespaceContext(element),\n                                    null, null, null, null, null);// TODO: locationData\n\n                            if (elements.size() > 0) {\n                                // Clone all the resulting elements\n                                contentToInsert = new ArrayList<Node>(elements.size());\n                                for (Object o: elements) {\n                                    final NodeInfo currentNodeInfo = (NodeInfo) o;\n                                    final Element currentElement = (Element) ((NodeWrapper) currentNodeInfo).getUnderlyingNode();\n\n                                    contentToInsert.add(Dom4jUtils.copyElementCopyParentNamespaces(currentElement));\n                                }\n                            } else {\n                                contentToInsert = null;\n                            }\n                        }\n\n                        // Insert content if any\n                        if (contentToInsert != null && contentToInsert.size() > 0) {\n                            final List<Node> parentContent = Dom4jUtils.content(element.getParent());\n                            final int elementIndex = parentContent.indexOf(element);\n                            parentContent.addAll(elementIndex, contentToInsert);\n                        }\n\n                        // Remove <xbl:content> from shadow tree\n                        element.detach();\n\n                        resultingNodes = contentToInsert;\n                    } else {\n                        // Element is simply kept\n                        resultingNodes = Collections.singletonList((Node) element);\n                    }\n\n                    // Handle attribute forwarding\n                    final Attribute xblAttr = element.attribute(XFormsConstants.XBL_ATTR_QNAME);    // standard xbl:attr (custom syntax)\n                    final Attribute xxblAttr = element.attribute(XFormsConstants.XXBL_ATTR_QNAME);  // extension xxbl:attr (XPath expression)\n                    if (xblAttr != null) {\n                        // Detach attribute (not strictly necessary?)\n                        xblAttr.detach();\n                        // Get attribute value\n                        final String xblAttrString = xblAttr.getValue();\n                        final StringTokenizer st = new StringTokenizer(xblAttrString);\n                        while (st.hasMoreTokens()) {\n                            final String currentValue = st.nextToken();\n\n                            final int equalIndex = currentValue.indexOf('=');\n                            if (equalIndex == -1) {\n                                // No a=b pair, just a single QName\n                                final QName valueQName = Dom4jUtils.extractTextValueQName(element, currentValue, true);\n                                if (!valueQName.getNamespaceURI().equals(XFormsConstants.XBL_NAMESPACE_URI)) {\n                                     // This is not xbl:text, copy the attribute\n                                    setAttribute(resultingNodes, valueQName, boundElement.attributeValue(valueQName));\n                                } else {\n                                    // This is xbl:text\n                                    // \"The xbl:text value cannot occur by itself in the list\"\n                                }\n\n                            } else {\n                                // a=b pair\n                                final QName leftSideQName; {\n                                final String leftSide = currentValue.substring(0, equalIndex);\n                                    leftSideQName = Dom4jUtils.extractTextValueQName(element, leftSide, true);\n                                }\n                                final QName rightSideQName; {\n                                    final String rightSide = currentValue.substring(equalIndex + 1);\n                                    rightSideQName = Dom4jUtils.extractTextValueQName(element, rightSide, true);\n                                }\n\n                                final boolean isLeftSideXBLText = leftSideQName.getNamespaceURI().equals(XFormsConstants.XBL_NAMESPACE_URI);\n                                final boolean isRightSideXBLText = rightSideQName.getNamespaceURI().equals(XFormsConstants.XBL_NAMESPACE_URI);\n\n                                final String rightSideValue;\n                                if (!isRightSideXBLText) {\n                                     // Get attribute value\n                                    rightSideValue = boundElement.attributeValue(rightSideQName);\n                                } else {\n                                    // Get text value\n\n                                    // \"any text nodes (including CDATA nodes and whitespace text nodes) that are\n                                    // explicit children of the bound element must have their data concatenated\"\n                                    rightSideValue = boundElement.getText();// must use getText() and not stringValue()\n                                }\n\n                                if (rightSideValue != null) {// not sure if XBL says what should happen if the source attribute is not found\n                                    if (!isLeftSideXBLText) {\n                                         // Set attribute value\n                                        setAttribute(resultingNodes, leftSideQName, rightSideValue);\n                                    } else {\n                                        // Set text value\n\n                                        // \"value of the attribute on the right-hand side are to be represented as text\n                                        // nodes underneath the shadow element\"\n\n                                        // TODO: \"If the element has any child nodes in the DOM (any nodes, including\n                                        // comment nodes, whitespace text nodes, or even empty CDATA nodes) then the pair\n                                        // is in error and UAs must ignore it, meaning the attribute value is not forwarded\"\n\n                                        setText(resultingNodes, rightSideValue);\n                                    }\n                                }\n                            }\n                            // TODO: handle xbl:lang?\n                            // TODO: handle type specifiers?\n                        }\n                    } else if (xxblAttr != null) {\n                        // Detach attribute (not strictly necessary?)\n                        xxblAttr.detach();\n                        // Get attribute value\n                        final String xxblAttrString = xxblAttr.getValue();\n\n                        final NodeInfo boundElementInfo = documentWrapper.wrap(boundElement);\n\n                        // TODO: don't use getNamespaceContext() as this is already computed for the bound element\n                        final List nodeInfos = XPathCache.evaluate(pipelineContext, boundElementInfo, xxblAttrString, Dom4jUtils.getNamespaceContext(element),\n                                null, null, null, null, null);// TODO: locationData\n\n                        if (nodeInfos.size() > 0) {\n                            for (Object nodeInfo: nodeInfos) {\n                                final NodeInfo currentNodeInfo = (NodeInfo) nodeInfo;\n                                if (currentNodeInfo.getNodeKind() == org.w3c.dom.Document.ATTRIBUTE_NODE) {\n                                    // This is an attribute\n                                    final Attribute currentAttribute = (Attribute) ((NodeWrapper) currentNodeInfo).getUnderlyingNode();\n                                    setAttribute(resultingNodes, currentAttribute.getQName(), currentAttribute.getValue());\n                                }\n                            }\n                        }\n                    }\n\n                    // Prefix resulting xhtml:*/(@id |@for)\n\n                    // NOTE: We could also do the prefixing in the handlers, when the page is output.\n                    //\n                    // * Benefit of prefixing here: done statically\n                    // * Drawback of prefixing here: in the future if we try to reuse simple shadow trees this won't work\n\n//                    {\n//                        if (resultingNodes != null && resultingNodes.size() > 0) {\n//                            for (Iterator i = resultingNodes.iterator(); i.hasNext();) {\n//                                final Node node = (Node) i.next();\n//                                if (node instanceof Element) {\n//                                    Dom4jUtils.visitSubtree((Element) node, new Dom4jUtils.VisitorListener() {\n//                                        public void startElement(Element element) {\n//                                            if (XMLConstants.XHTML_NAMESPACE_URI.equals(element.getNamespaceURI())) {\n//                                                // Found XHTML element\n//\n//                                                // Update @id and @for if any\n//                                                final Attribute idAttribute = element.attribute(\"id\");\n//                                                if (idAttribute != null) {\n//                                                    idAttribute.setValue(prefix + idAttribute.getValue());\n//                                                }\n//                                                final Attribute forAttribute = element.attribute(\"for\");\n//                                                if (forAttribute != null) {\n//                                                    forAttribute.setValue(prefix + forAttribute.getValue());\n//                                                }\n//                                            }\n//                                        }\n//\n//                                        public void endElement(Element element) {\n//                                        }\n//\n//                                        public void text(Text text) {\n//                                        }\n//                                    });\n//                                }\n//                            }\n//                        }\n//                    }\n                }\n\n                private void setAttribute(List<Node> nodes, QName attributeQName, String attributeValue) {\n                    if (nodes != null && nodes.size() > 0) {\n                        for (final Node node: nodes) {\n                            if (node instanceof Element) {\n                                ((Element) node).addAttribute(attributeQName, attributeValue);\n                            }\n                        }\n                    }\n                }\n\n                private void setText(List<Node> nodes, String value) {\n                    if (nodes != null && nodes.size() > 0) {\n                        for (final Node node: nodes) {\n                            if (node instanceof Element) {\n                                node.setText(value);\n                            }\n                        }\n                    }\n                }\n\n                public void endElement(Element element) {}\n\n                public void text(Text text) {}\n            }, true);\n\n            // Annotate tree\n            final Document annotatedShadowTreeDocument = annotateShadowTree(shadowTreeDocument, namespaceMappings, prefix);\n\n            if (XFormsServer.logger.isDebugEnabled()) {\n                XFormsContainingDocument.logDebugStatic(\"static state\", \"annotated shadow tree\",\n                        \"bound element\", Dom4jUtils.elementToString(boundElement), \"document\", Dom4jUtils.domToString(annotatedShadowTreeDocument));\n            }\n\n            return annotatedShadowTreeDocument;\n        } else {\n            return null;\n        }\n    }","commit_id":"2af2de04871f42efcf4c389139ee23acb51c7625","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Return the id of the <xbl:binding> element associated with the given  prefixed control id.\n     *\n     * @param controlPrefixedId     prefixed control id\n     * @return                      binding id or null if not found\n     */\n    public String getBindingId(String controlPrefixedId) {\n        return (xblBindingIds == null) ? null : (String) xblBindingIds.get(controlPrefixedId);\n    }","id":10171,"modified_method":"/**\n     * Return the id of the <xbl:binding> element associated with the given  prefixed control id.\n     *\n     * @param controlPrefixedId     prefixed control id\n     * @return                      binding id or null if not found\n     */\n    public String getBindingId(String controlPrefixedId) {\n        return (xblBindingIds == null) ? null : xblBindingIds.get(controlPrefixedId);\n    }","commit_id":"2af2de04871f42efcf4c389139ee23acb51c7625","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"public void processElementIfNeeded(Element controlElement, String controlPrefixedId, LocationData locationData, PipelineContext pipelineContext,\n                                       DocumentWrapper controlsDocumentInfo, Configuration xpathConfiguration, String prefix,\n                                       FastStringBuffer repeatHierarchyStringBuffer, Stack<String> repeatAncestorsStack) {\n        if (xblComponentBindings != null) {\n            final Element bindingElement = (Element) xblComponentBindings.get(controlElement.getQName());\n            if (bindingElement != null) {\n                // A custom component is bound to this element\n\n                // Find new prefix\n                final String newPrefix = controlPrefixedId + XFormsConstants.COMPONENT_SEPARATOR;\n\n                // Generate the shadow content for this particular binding\n                final Document fullShadowTreeDocument = generateXBLShadowContent(pipelineContext, controlsDocumentInfo, controlElement, bindingElement, namespacesMap, newPrefix);\n                if (fullShadowTreeDocument != null) {\n\n                    final DocumentWrapper fullShadowTreeWrapper = new DocumentWrapper(fullShadowTreeDocument, null, xpathConfiguration);\n\n                    // Register models placed under xbl:implementation\n                    if (xblImplementations != null) {\n                        final List<Document> implementationModelDocuments = xblImplementations.get(controlElement.getQName());\n                        if (implementationModelDocuments.size() > 0) {\n                            for (Document currentModelDocument: implementationModelDocuments) {\n                                // Store models by \"prefixed id\"\n                                staticState.addModelDocument(controlPrefixedId + XFormsConstants.COMPONENT_SEPARATOR + currentModelDocument.getRootElement().attributeValue(\"id\"), currentModelDocument);\n                            }\n                            XFormsContainingDocument.logDebugStatic(\"static state\", \"registered XBL implementation model documents\", new String[] { \"count\", Integer.toString(implementationModelDocuments.size()) });\n                        }\n                    }\n\n                    // Extract and register models from within the template\n                    {\n                        final List<Document> extractedModels = XFormsStaticState.extractNestedModels(pipelineContext, fullShadowTreeWrapper, true, locationData);\n                        if (extractedModels.size() > 0) {\n                            for (Document currentModelDocument: extractedModels) {\n                                // Store models by \"prefixed id\"\n                                staticState.addModelDocument(controlPrefixedId + XFormsConstants.COMPONENT_SEPARATOR + currentModelDocument.getRootElement().attributeValue(\"id\"), currentModelDocument);\n                            }\n                            XFormsContainingDocument.logDebugStatic(\"static state\", \"created and registered XBL template model documents\", new String[] { \"count\", Integer.toString(extractedModels.size()) });\n                        }\n                    }\n\n                    // Remember full shadow tree for this prefixed id\n                    xblFullShadowTrees.put(controlPrefixedId, fullShadowTreeDocument);\n\n                    // Generate compact shadow tree for this static id\n                    final Document compactShadowTreeDocument = filterShadowTree(fullShadowTreeDocument, controlElement);\n                    xblCompactShadowTrees.put(controlPrefixedId, compactShadowTreeDocument);\n\n                    // Remember id of binding\n                    xblBindingIds.put(controlPrefixedId, bindingElement.attributeValue(\"id\"));\n\n                    // Extract xbl:xbl/xbl:script and xbl:binding/xbl:resources/xbl:style\n                    // TODO: should do this here, in order to include only the scripts and resources actually used\n\n                    // Gather xbl:handlers/xbl:handler attached to bound node\n                    if (xblHandlers != null) {\n                        final List<Element> handlerElements = (List<Element>) xblHandlers.get(controlElement.getQName());\n                        if (handlerElements != null) {\n                            for (Element currentHandlerElement: handlerElements) {\n                                // Register xbl:handler as an action handler\n                                // NOTE: xbl:handler has similar attributes as XForms actions, in particular @event, @phase, etc.\n                                final XFormsEventHandlerImpl eventHandler = new XFormsEventHandlerImpl(currentHandlerElement, controlPrefixedId, true,\n                                        controlPrefixedId,\n                                        currentHandlerElement.attributeValue(XFormsConstants.XML_EVENTS_EVENT_ATTRIBUTE_QNAME),\n                                        null, // no target attribute allowed in XBL\n                                        currentHandlerElement.attributeValue(XFormsConstants.XML_EVENTS_PHASE_ATTRIBUTE_QNAME),\n                                        currentHandlerElement.attributeValue(XFormsConstants.XML_EVENTS_PROPAGATE_ATTRIBUTE_QNAME),\n                                        currentHandlerElement.attributeValue(XFormsConstants.XML_EVENTS_DEFAULT_ACTION_ATTRIBUTE_QNAME));\n\n                                staticState.registerActionHandler(eventHandler, prefix);\n                            }\n                        }\n                    }\n\n                    // NOTE: Say we don't want to exclude gathering event handlers within nested models\n                    staticState.analyzeComponentTree(pipelineContext, xpathConfiguration, newPrefix, compactShadowTreeDocument.getRootElement(),\n                            repeatHierarchyStringBuffer, repeatAncestorsStack, false);\n                }\n            }\n        }\n    }","id":10172,"modified_method":"public void processElementIfNeeded(Element controlElement, String controlPrefixedId, LocationData locationData, PipelineContext pipelineContext,\n                                       DocumentWrapper controlsDocumentInfo, Configuration xpathConfiguration, String prefix,\n                                       FastStringBuffer repeatHierarchyStringBuffer, Stack<String> repeatAncestorsStack) {\n        if (xblComponentBindings != null) {\n            final Element bindingElement = xblComponentBindings.get(controlElement.getQName());\n            if (bindingElement != null) {\n                // A custom component is bound to this element\n\n                // Find new prefix\n                final String newPrefix = controlPrefixedId + XFormsConstants.COMPONENT_SEPARATOR;\n\n                // Generate the shadow content for this particular binding\n                final Document fullShadowTreeDocument = generateXBLShadowContent(pipelineContext, controlsDocumentInfo, controlElement, bindingElement, namespacesMap, newPrefix);\n                if (fullShadowTreeDocument != null) {\n\n                    final DocumentWrapper fullShadowTreeWrapper = new DocumentWrapper(fullShadowTreeDocument, null, xpathConfiguration);\n\n                    // Register models placed under xbl:implementation\n                    if (xblImplementations != null) {\n                        final List<Document> implementationModelDocuments = xblImplementations.get(controlElement.getQName());\n                        if (implementationModelDocuments.size() > 0) {\n                            for (Document currentModelDocument: implementationModelDocuments) {\n                                // Store models by \"prefixed id\"\n                                staticState.addModelDocument(controlPrefixedId + XFormsConstants.COMPONENT_SEPARATOR + currentModelDocument.getRootElement().attributeValue(\"id\"), currentModelDocument);\n                            }\n                            XFormsContainingDocument.logDebugStatic(\"static state\", \"registered XBL implementation model documents\", \"count\", Integer.toString(implementationModelDocuments.size()));\n                        }\n                    }\n\n                    // Extract and register models from within the template\n                    {\n                        final List<Document> extractedModels = XFormsStaticState.extractNestedModels(pipelineContext, fullShadowTreeWrapper, true, locationData);\n                        if (extractedModels.size() > 0) {\n                            for (Document currentModelDocument: extractedModels) {\n                                // Store models by \"prefixed id\"\n                                staticState.addModelDocument(controlPrefixedId + XFormsConstants.COMPONENT_SEPARATOR + currentModelDocument.getRootElement().attributeValue(\"id\"), currentModelDocument);\n                            }\n                            XFormsContainingDocument.logDebugStatic(\"static state\", \"created and registered XBL template model documents\", \"count\", Integer.toString(extractedModels.size()));\n                        }\n                    }\n\n                    // Remember full shadow tree for this prefixed id\n                    xblFullShadowTrees.put(controlPrefixedId, fullShadowTreeDocument);\n\n                    // Generate compact shadow tree for this static id\n                    final Document compactShadowTreeDocument = filterShadowTree(fullShadowTreeDocument, controlElement);\n                    xblCompactShadowTrees.put(controlPrefixedId, compactShadowTreeDocument);\n\n                    // Remember id of binding\n                    xblBindingIds.put(controlPrefixedId, bindingElement.attributeValue(\"id\"));\n\n                    // Extract xbl:xbl/xbl:script and xbl:binding/xbl:resources/xbl:style\n                    // TODO: should do this here, in order to include only the scripts and resources actually used\n\n                    // Gather xbl:handlers/xbl:handler attached to bound node\n                    if (xblHandlers != null) {\n                        final List<Element> handlerElements = xblHandlers.get(controlElement.getQName());\n                        if (handlerElements != null) {\n                            for (Element currentHandlerElement: handlerElements) {\n                                // Register xbl:handler as an action handler\n                                // NOTE: xbl:handler has similar attributes as XForms actions, in particular @event, @phase, etc.\n                                final XFormsEventHandlerImpl eventHandler = new XFormsEventHandlerImpl(currentHandlerElement, controlPrefixedId, true,\n                                        controlPrefixedId,\n                                        currentHandlerElement.attributeValue(XFormsConstants.XML_EVENTS_EVENT_ATTRIBUTE_QNAME),\n                                        null, // no target attribute allowed in XBL\n                                        currentHandlerElement.attributeValue(XFormsConstants.XML_EVENTS_PHASE_ATTRIBUTE_QNAME),\n                                        currentHandlerElement.attributeValue(XFormsConstants.XML_EVENTS_PROPAGATE_ATTRIBUTE_QNAME),\n                                        currentHandlerElement.attributeValue(XFormsConstants.XML_EVENTS_DEFAULT_ACTION_ATTRIBUTE_QNAME));\n\n                                staticState.registerActionHandler(eventHandler, prefix);\n                            }\n                        }\n                    }\n\n                    // NOTE: Say we don't want to exclude gathering event handlers within nested models\n                    staticState.analyzeComponentTree(pipelineContext, xpathConfiguration, newPrefix, compactShadowTreeDocument.getRootElement(),\n                            repeatHierarchyStringBuffer, repeatAncestorsStack, false);\n                }\n            }\n        }\n    }","commit_id":"2af2de04871f42efcf4c389139ee23acb51c7625","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"public XBLBindings(XFormsStaticState staticState, Map<String, Map<String, String>> namespacesMap, Element staticStateElement) {\n\n        this.staticState = staticState;\n        this.namespacesMap = namespacesMap;\n\n        final List<Element> xblElements = (staticStateElement != null) ? Dom4jUtils.elements(staticStateElement, XFormsConstants.XBL_XBL_QNAME) : XFormsConstants.EMPTY_ELEMENT_LIST;\n        if (xblElements.size() > 0) {\n            xblComponentsFactories = new HashMap<QName, XFormsControlFactory.Factory>();\n            xblComponentBindings = new HashMap<QName, Element>();\n            xblFullShadowTrees = new HashMap<String, Document>();\n            xblCompactShadowTrees = new HashMap<String, Document>();\n            xblBindingIds = new HashMap<String, String>();\n\n            int xblCount = 0;\n            int xblBindingCount = 0;\n            for (Element currentXBLElement: xblElements) {\n                // Copy the element because we may need it in staticStateDocument for encoding\n                final Document currentXBLDocument = Dom4jUtils.createDocumentCopyParentNamespaces(currentXBLElement);\n\n                // Extract xbl:xbl/xbl:script\n                // TODO: should do this differently, in order to include only the scripts and resources actually used\n                final List<Element> scriptElements = Dom4jUtils.elements(currentXBLDocument.getRootElement(), XFormsConstants.XBL_SCRIPT_QNAME);\n                if (scriptElements != null && scriptElements.size() > 0) {\n                    if (xblScripts == null)\n                        xblScripts = new ArrayList<Element>();\n                    xblScripts.addAll(scriptElements);\n                }\n\n                // Find bindings\n                for (Iterator j = currentXBLDocument.getRootElement().elements(XFormsConstants.XBL_BINDING_QNAME).iterator(); j.hasNext(); xblBindingCount++) {\n                    final Element currentBindingElement = (Element) j.next();\n                    final String currentElementAttribute = currentBindingElement.attributeValue(\"element\");\n\n                    if (currentElementAttribute != null) {\n\n                        // For now, only handle \"prefix|name\" selectors\n                        // NOTE: Pass blank prefix as XBL bindings are all within the top-level document\n                        final QName currentQNameMatch\n                                = Dom4jUtils.extractTextValueQName(staticState.getNamespaceMappings(\"\", currentBindingElement), currentElementAttribute.replace('|', ':'), true);\n\n                        // Create and remember factory for this QName\n                        xblComponentsFactories.put(currentQNameMatch,\n                            new XFormsControlFactory.Factory() {\n                                public XFormsControl createXFormsControl(XBLContainer container, XFormsControl parent, Element element, String name, String effectiveId) {\n                                    return new XFormsComponentControl(container, parent, element, name, effectiveId);\n                                }\n                            });\n\n                        xblComponentBindings.put(currentQNameMatch, currentBindingElement);\n\n                        // Extract xbl:handlers/xbl:handler\n                        {\n                            final Element handlersElement = currentBindingElement.element(XFormsConstants.XBL_HANDLERS_QNAME);\n                            if (handlersElement != null) {\n                                final List<Element> handlerElements = Dom4jUtils.elements(handlersElement, XFormsConstants.XBL_HANDLER_QNAME);\n\n                                if (xblHandlers == null) {\n                                    xblHandlers = new LinkedHashMap<QName, List<Element>>();\n                                }\n\n//                                xxx TODO: WIP: get unique ids for handlers\n                                xblHandlers.put(currentQNameMatch, handlerElements);\n                            }\n                        }\n\n                        // Extract xbl:implementation/xforms:model\n                        {\n                            final Element implementationElement = currentBindingElement.element(XFormsConstants.XBL_IMPLEMENTATION_QNAME);\n                            if (implementationElement != null) {\n                                // TODO: check if really need to pass detach == true\n                                final List<Document> modelDocuments = extractChildrenModels(implementationElement, true);\n\n                                if (xblImplementations == null) {\n                                    xblImplementations = new LinkedHashMap<QName, List<Document>>();\n                                }\n\n                                xblImplementations.put(currentQNameMatch, modelDocuments);\n                            }\n                        }\n\n                        // Extract xbl:binding/xbl:resources/xbl:style\n                        // TODO: should do this differently, in order to include only the scripts and resources actually used\n                        {\n                            final List resourcesElements = currentBindingElement.elements(XFormsConstants.XBL_RESOURCES_QNAME);\n                            if (resourcesElements != null) {\n                                for (Iterator k = resourcesElements.iterator(); k.hasNext();) {\n                                    final Element currentResourcesElement = (Element) k.next();\n                                    final List<Element> styleElements = Dom4jUtils.elements(currentResourcesElement, XFormsConstants.XBL_STYLE_QNAME);\n                                    if (styleElements != null && styleElements.size() > 0) {\n                                        if (xblStyles == null) {\n                                            xblStyles = new ArrayList<Element>(styleElements);\n                                        } else {\n                                            xblStyles.addAll(styleElements);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            XFormsContainingDocument.logDebugStatic(\"static state\", \"created top-level XBL documents\",\n                    new String[] { \"xbl:xbl count\", Integer.toString(xblCount), \"xbl:binding count\", Integer.toString(xblBindingCount)});\n        }\n    }","id":10173,"modified_method":"public XBLBindings(XFormsStaticState staticState, Map<String, Map<String, String>> namespacesMap, Element staticStateElement) {\n\n        this.staticState = staticState;\n        this.namespacesMap = namespacesMap;\n\n        final List<Element> xblElements = (staticStateElement != null) ? Dom4jUtils.elements(staticStateElement, XFormsConstants.XBL_XBL_QNAME) : XFormsConstants.EMPTY_ELEMENT_LIST;\n        if (xblElements.size() > 0) {\n            xblComponentsFactories = new HashMap<QName, XFormsControlFactory.Factory>();\n            xblComponentBindings = new HashMap<QName, Element>();\n            xblFullShadowTrees = new HashMap<String, Document>();\n            xblCompactShadowTrees = new HashMap<String, Document>();\n            xblBindingIds = new HashMap<String, String>();\n\n            int xblCount = 0;\n            int xblBindingCount = 0;\n            for (Element currentXBLElement: xblElements) {\n                // Copy the element because we may need it in staticStateDocument for encoding\n                final Document currentXBLDocument = Dom4jUtils.createDocumentCopyParentNamespaces(currentXBLElement);\n\n                // Extract xbl:xbl/xbl:script\n                // TODO: should do this differently, in order to include only the scripts and resources actually used\n                final List<Element> scriptElements = Dom4jUtils.elements(currentXBLDocument.getRootElement(), XFormsConstants.XBL_SCRIPT_QNAME);\n                if (scriptElements != null && scriptElements.size() > 0) {\n                    if (xblScripts == null)\n                        xblScripts = new ArrayList<Element>();\n                    xblScripts.addAll(scriptElements);\n                }\n\n                // Find bindings\n                for (Iterator j = currentXBLDocument.getRootElement().elements(XFormsConstants.XBL_BINDING_QNAME).iterator(); j.hasNext(); xblBindingCount++) {\n                    final Element currentBindingElement = (Element) j.next();\n                    final String currentElementAttribute = currentBindingElement.attributeValue(\"element\");\n\n                    if (currentElementAttribute != null) {\n\n                        // For now, only handle \"prefix|name\" selectors\n                        // NOTE: Pass blank prefix as XBL bindings are all within the top-level document\n                        final QName currentQNameMatch\n                                = Dom4jUtils.extractTextValueQName(staticState.getNamespaceMappings(\"\", currentBindingElement), currentElementAttribute.replace('|', ':'), true);\n\n                        // Create and remember factory for this QName\n                        xblComponentsFactories.put(currentQNameMatch,\n                            new XFormsControlFactory.Factory() {\n                                public XFormsControl createXFormsControl(XBLContainer container, XFormsControl parent, Element element, String name, String effectiveId) {\n                                    return new XFormsComponentControl(container, parent, element, name, effectiveId);\n                                }\n                            });\n\n                        xblComponentBindings.put(currentQNameMatch, currentBindingElement);\n\n                        // Extract xbl:handlers/xbl:handler\n                        {\n                            final Element handlersElement = currentBindingElement.element(XFormsConstants.XBL_HANDLERS_QNAME);\n                            if (handlersElement != null) {\n                                final List<Element> handlerElements = Dom4jUtils.elements(handlersElement, XFormsConstants.XBL_HANDLER_QNAME);\n\n                                if (xblHandlers == null) {\n                                    xblHandlers = new LinkedHashMap<QName, List<Element>>();\n                                }\n\n//                                xxx TODO: WIP: get unique ids for handlers\n                                xblHandlers.put(currentQNameMatch, handlerElements);\n                            }\n                        }\n\n                        // Extract xbl:implementation/xforms:model\n                        {\n                            final Element implementationElement = currentBindingElement.element(XFormsConstants.XBL_IMPLEMENTATION_QNAME);\n                            if (implementationElement != null) {\n                                // TODO: check if really need to pass detach == true\n                                final List<Document> modelDocuments = extractChildrenModels(implementationElement, true);\n\n                                if (xblImplementations == null) {\n                                    xblImplementations = new LinkedHashMap<QName, List<Document>>();\n                                }\n\n                                xblImplementations.put(currentQNameMatch, modelDocuments);\n                            }\n                        }\n\n                        // Extract xbl:binding/xbl:resources/xbl:style\n                        // TODO: should do this differently, in order to include only the scripts and resources actually used\n                        {\n                            final List resourcesElements = currentBindingElement.elements(XFormsConstants.XBL_RESOURCES_QNAME);\n                            if (resourcesElements != null) {\n                                for (Object resourcesElement: resourcesElements) {\n                                    final Element currentResourcesElement = (Element) resourcesElement;\n                                    final List<Element> styleElements = Dom4jUtils.elements(currentResourcesElement, XFormsConstants.XBL_STYLE_QNAME);\n                                    if (styleElements != null && styleElements.size() > 0) {\n                                        if (xblStyles == null) {\n                                            xblStyles = new ArrayList<Element>(styleElements);\n                                        } else {\n                                            xblStyles.addAll(styleElements);\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            XFormsContainingDocument.logDebugStatic(\"static state\", \"created top-level XBL documents\",\n                    \"xbl:xbl count\", Integer.toString(xblCount), \"xbl:binding count\", Integer.toString(xblBindingCount));\n        }\n    }","commit_id":"2af2de04871f42efcf4c389139ee23acb51c7625","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Filter a shadow tree document to keep only XForms controls. This does not modify the input document.\n     *\n     * @param fullShadowTree    full shadow tree document\n     * @return                  compact shadow tree document\n     */\n    private static Document filterShadowTree(Document fullShadowTree, Element boundElement) {\n\n        final TransformerHandler identity = TransformerUtils.getIdentityTransformerHandler();\n        final LocationDocumentResult result= new LocationDocumentResult();\n        identity.setResult(result);\n\n        // Run transformation\n        TransformerUtils.writeDom4j(fullShadowTree, new XFormsExtractorContentHandler(identity));\n//        TransformerUtils.writeDom4j(fullShadowTree, new XFormsExtractorContentHandler(new SAXLoggerProcessor.DebugContentHandler(identity)));\n\n        // Extractor produces /static-state/xbl:template, so extract the nested element\n        final Document compactShadowTree = Dom4jUtils.createDocumentCopyParentNamespaces(result.getDocument().getRootElement().element(XFormsConstants.XBL_TEMPLATE_QNAME), true);\n\n        if (XFormsServer.logger.isDebugEnabled()) {\n            XFormsContainingDocument.logDebugStatic(\"static state\", \"compact shadow tree\",\n                    new String[] { \"bound element\", Dom4jUtils.elementToString(boundElement), \"document\", Dom4jUtils.domToString(compactShadowTree) });\n        }\n\n        return compactShadowTree;\n    }","id":10174,"modified_method":"/**\n     * Filter a shadow tree document to keep only XForms controls. This does not modify the input document.\n     *\n     * @param fullShadowTree    full shadow tree document\n     * @param boundElement\n     * @return                  compact shadow tree document\n     */\n    private static Document filterShadowTree(Document fullShadowTree, Element boundElement) {\n\n        final TransformerHandler identity = TransformerUtils.getIdentityTransformerHandler();\n        final LocationDocumentResult result= new LocationDocumentResult();\n        identity.setResult(result);\n\n        // Run transformation\n        TransformerUtils.writeDom4j(fullShadowTree, new XFormsExtractorContentHandler(identity));\n//        TransformerUtils.writeDom4j(fullShadowTree, new XFormsExtractorContentHandler(new SAXLoggerProcessor.DebugContentHandler(identity)));\n\n        // Extractor produces /static-state/xbl:template, so extract the nested element\n        final Document compactShadowTree = Dom4jUtils.createDocumentCopyParentNamespaces(result.getDocument().getRootElement().element(XFormsConstants.XBL_TEMPLATE_QNAME), true);\n\n        if (XFormsServer.logger.isDebugEnabled()) {\n            XFormsContainingDocument.logDebugStatic(\"static state\", \"compact shadow tree\",\n                    \"bound element\", Dom4jUtils.elementToString(boundElement), \"document\", Dom4jUtils.domToString(compactShadowTree));\n        }\n\n        return compactShadowTree;\n    }","commit_id":"2af2de04871f42efcf4c389139ee23acb51c7625","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Return a control factory for the given QName.\n     *\n     * @param qName QName to check\n     * @return      control factory, or null\n     */\n    public XFormsControlFactory.Factory getComponentFactory(QName qName) {\n        return (xblComponentsFactories == null) ? null : (XFormsControlFactory.Factory) xblComponentsFactories.get(qName);\n    }","id":10175,"modified_method":"/**\n     * Return a control factory for the given QName.\n     *\n     * @param qName QName to check\n     * @return      control factory, or null\n     */\n    public XFormsControlFactory.Factory getComponentFactory(QName qName) {\n        return (xblComponentsFactories == null) ? null : xblComponentsFactories.get(qName);\n    }","commit_id":"2af2de04871f42efcf4c389139ee23acb51c7625","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n         * Create and compile an XPath expression object.\n         */\n        public Object makeObject() throws Exception {\n            if (logger.isDebugEnabled())\n                logger.debug(\"makeObject(\" + xpathString + \")\");\n\n            // Create context\n            final IndependentContext independentContext = new XPathCacheStaticContext(allowAllVariables);\n\n            // Set the base URI if specified\n            if (baseURI != null)\n                independentContext.setBaseURI(baseURI);\n\n            // Declare namespaces\n            if (prefixToURIMap != null) {\n                for (Iterator i = prefixToURIMap.keySet().iterator(); i.hasNext();) {\n                    String prefix = (String) i.next();\n                    independentContext.declareNamespace(prefix, (String) prefixToURIMap.get(prefix));\n                }\n            }\n\n            // Declare variables (we don't use the values here, just the names)\n            final Map<String, Variable> variables = new HashMap<String, Variable>();\n            if (variableNames != null) {\n                for (Iterator i = variableNames.iterator(); i.hasNext();) {\n                    final String name = (String) i.next();\n                    final Variable variable = independentContext.declareVariable(name);\n                    variable.setUseStack(true);// \"Indicate that values of variables are to be found on the stack, not in the Variable object itself\"\n                    variables.put(name, variable);\n                }\n            }\n\n            // Add function library\n            if (functionLibrary != null) {\n                // This is ok\n                ((FunctionLibraryList) independentContext.getFunctionLibrary()).libraryList.add(0, functionLibrary);\n            }\n\n            // Create and compile the expression\n            try {\n                final Expression expression;\n                if (isAvt) {\n                    final Expression tempExpression = AttributeValueTemplate.make(xpathString, -1, independentContext);\n                    // Running typeCheck() is mandatory otherwise things break! This is also done when using evaluator.createExpression()\n                    expression = tempExpression.typeCheck(independentContext, Type.ITEM_TYPE);\n                } else {\n                    // We used to use XPathEvaluator.createExpression(), but there is a bug in it related to slots allocation, so we do the work ourselves instead.\n                    final Expression tempExpression = ExpressionTool.make(xpathString, independentContext, 0, Token.EOF, 1);\n                    expression = tempExpression.typeCheck(independentContext, Type.ITEM_TYPE);\n                }\n\n                // Allocate variable slots in all cases\n                ExpressionTool.allocateSlots(expression, independentContext.getStackFrameMap().getNumberOfVariables(), independentContext.getStackFrameMap());\n\n                {\n                    // Provide an Executable with the only purpose of allowing the evaluate() function find the right\n                    // FunctionLibrary\n                    if (expression instanceof ComputedExpression) {\n                        final ComputedExpression computedExpression = (ComputedExpression) expression;\n                        computedExpression.setParentExpression(new Container() {\n\n                            public Executable getExecutable() {\n                                return new Executable() {\n                                    {\n                                        setFunctionLibrary(independentContext.getFunctionLibrary());\n                                        setLocationMap(new LocationMap());\n                                        setConfiguration(independentContext.getConfiguration());\n                                    }\n                                };\n                            }\n\n                            public LocationProvider getLocationProvider() {\n                                return computedExpression.getLocationProvider();\n                            }\n\n                            public int getHostLanguage() {\n                                return Configuration.JAVA_APPLICATION;\n                            }\n\n                            public boolean replaceSubExpression(Expression expression, Expression expression1) {\n                                return computedExpression.replaceSubExpression(expression, expression1);\n                            }\n\n                            public int getColumnNumber() {\n                                return computedExpression.getColumnNumber();\n                            }\n\n                            public int getLineNumber() {\n                                return computedExpression.getLineNumber();\n                            }\n\n                            public String getPublicId() {\n                                return computedExpression.getPublicId();\n                            }\n\n                            public String getSystemId() {\n                                return computedExpression.getSystemId();\n                            }\n                        });\n                    }\n                }\n\n                // TODO: For now only play with XForms expressions. But should decide probably based on flag?\n                if (false && functionLibrary == XFormsContainingDocument.getFunctionLibrary()) {\n                    final List instances = analyzeExpression(expression, xpathString);\n                    if (instances == null)\n                        logger.info(\"  XXX EXPRESSION DEPENDS ON MORE THAN INSTANCES: \" + xpathString);\n                    else {\n                        logger.info(\"  XXX EXPRESSION DEPENDS ON INSTANCES: \" + xpathString);\n                        for (Iterator i = instances.iterator(); i.hasNext();) {\n                            logger.info(\"    instance: \" + i.next());\n                        }\n                    }\n                }\n\n                return new PooledXPathExpression(expression, pool, independentContext, variables);\n            } catch (Throwable t) {\n                throw new OXFException(t);\n            }\n        }","id":10176,"modified_method":"/**\n         * Create and compile an XPath expression object.\n         */\n        public Object makeObject() throws Exception {\n            if (logger.isDebugEnabled())\n                logger.debug(\"makeObject(\" + xpathString + \")\");\n\n            // Create context\n            final IndependentContext independentContext = new XPathCacheStaticContext(allowAllVariables);\n\n            // Set the base URI if specified\n            if (baseURI != null)\n                independentContext.setBaseURI(baseURI);\n\n            // Declare namespaces\n            if (prefixToURIMap != null) {\n                for (final String prefix: prefixToURIMap.keySet()) {\n                    independentContext.declareNamespace(prefix, prefixToURIMap.get(prefix));\n                }\n            }\n\n            // Declare variables (we don't use the values here, just the names)\n            final Map<String, Variable> variables = new HashMap<String, Variable>();\n            if (variableNames != null) {\n                for (final String name: variableNames) {\n                    final Variable variable = independentContext.declareVariable(name);\n                    variable.setUseStack(true);// \"Indicate that values of variables are to be found on the stack, not in the Variable object itself\"\n                    variables.put(name, variable);\n                }\n            }\n\n            // Add function library\n            if (functionLibrary != null) {\n                // This is ok\n                ((FunctionLibraryList) independentContext.getFunctionLibrary()).libraryList.add(0, functionLibrary);\n            }\n\n            // Create and compile the expression\n            try {\n                final Expression expression;\n                if (isAvt) {\n                    final Expression tempExpression = AttributeValueTemplate.make(xpathString, -1, independentContext);\n                    // Running typeCheck() is mandatory otherwise things break! This is also done when using evaluator.createExpression()\n                    expression = tempExpression.typeCheck(independentContext, Type.ITEM_TYPE);\n                } else {\n                    // We used to use XPathEvaluator.createExpression(), but there is a bug in it related to slots allocation, so we do the work ourselves instead.\n                    final Expression tempExpression = ExpressionTool.make(xpathString, independentContext, 0, Token.EOF, 1);\n                    expression = tempExpression.typeCheck(independentContext, Type.ITEM_TYPE);\n                }\n\n                // Allocate variable slots in all cases\n                ExpressionTool.allocateSlots(expression, independentContext.getStackFrameMap().getNumberOfVariables(), independentContext.getStackFrameMap());\n\n                {\n                    // Provide an Executable with the only purpose of allowing the evaluate() function find the right\n                    // FunctionLibrary\n                    if (expression instanceof ComputedExpression) {\n                        final ComputedExpression computedExpression = (ComputedExpression) expression;\n                        computedExpression.setParentExpression(new Container() {\n\n                            public Executable getExecutable() {\n                                return new Executable() {\n                                    {\n                                        setFunctionLibrary(independentContext.getFunctionLibrary());\n                                        setLocationMap(new LocationMap());\n                                        setConfiguration(independentContext.getConfiguration());\n                                    }\n                                };\n                            }\n\n                            public LocationProvider getLocationProvider() {\n                                return computedExpression.getLocationProvider();\n                            }\n\n                            public int getHostLanguage() {\n                                return Configuration.JAVA_APPLICATION;\n                            }\n\n                            public boolean replaceSubExpression(Expression expression, Expression expression1) {\n                                return computedExpression.replaceSubExpression(expression, expression1);\n                            }\n\n                            public int getColumnNumber() {\n                                return computedExpression.getColumnNumber();\n                            }\n\n                            public int getLineNumber() {\n                                return computedExpression.getLineNumber();\n                            }\n\n                            public String getPublicId() {\n                                return computedExpression.getPublicId();\n                            }\n\n                            public String getSystemId() {\n                                return computedExpression.getSystemId();\n                            }\n                        });\n                    }\n                }\n\n                // TODO: For now only play with XForms expressions. But should decide probably based on flag?\n                if (false && functionLibrary == XFormsContainingDocument.getFunctionLibrary()) {\n                    final List<String> instanceIds = analyzeExpression(expression, xpathString);\n                    if (instanceIds == null)\n                        logger.info(\"  XXX EXPRESSION DEPENDS ON MORE THAN INSTANCES: \" + xpathString);\n                    else {\n                        logger.info(\"  XXX EXPRESSION DEPENDS ON INSTANCES: \" + xpathString);\n                        for (String instanceId: instanceIds) {\n                            logger.info(\"    instance: \" + instanceId);\n                        }\n                    }\n                }\n\n                return new PooledXPathExpression(expression, pool, independentContext, variables);\n            } catch (Throwable t) {\n                throw new OXFException(t);\n            }\n        }","commit_id":"2af2de04871f42efcf4c389139ee23acb51c7625","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private static List analyzeExpression(Expression expression, String xpathString) {\n        if (expression instanceof ComputedExpression) {\n            try {\n                final PathMap pathmap = new PathMap((ComputedExpression) expression, new Configuration());\n                logger.info(\"TEST XPATH PATHS - path for expression: \" + xpathString);\n                pathmap.diagnosticDump(System.out);\n\n                final int dependencies = expression.getDependencies();\n\n                if ((dependencies & StaticProperty.DEPENDS_ON_CONTEXT_ITEM) != 0) {\n                    System.out.println(\"  xxx DEPENDS_ON_CONTEXT_ITEM\");\n                    return null;\n                }\n                if ((dependencies & StaticProperty.DEPENDS_ON_CURRENT_ITEM) != 0) {\n                    System.out.println(\"  xxx DEPENDS_ON_CURRENT_ITEM\");\n                    return null;\n                }\n                if ((dependencies & StaticProperty.DEPENDS_ON_CONTEXT_DOCUMENT) != 0) {\n                    System.out.println(\"  xxx DEPENDS_ON_CONTEXT_DOCUMENT\");\n                    return null;\n                }\n                if ((dependencies & StaticProperty.DEPENDS_ON_LOCAL_VARIABLES) != 0) {\n                    System.out.println(\"  xxx DEPENDS_ON_LOCAL_VARIABLES\");\n                    // Some day we'll have variables\n                    return null;\n                }\n                if ((dependencies & StaticProperty.NON_CREATIVE) != 0) {\n                    System.out.println(\"  xxx NON_CREATIVE\");\n                }\n\n                final List<String> instancesList = new ArrayList<String>();\n\n                final PathMap.PathMapRoot[] roots = pathmap.getPathMapRoots();\n                for (int i = 0; i < roots.length; i++) {\n                    final PathMap.PathMapRoot root = roots[i];\n\n                    final Expression rootExpression = root.getRootExpression();\n\n                    if (rootExpression instanceof Instance || rootExpression instanceof XXFormsInstance) {\n                        final FunctionCall functionCall = (FunctionCall) rootExpression;\n\n                        // TODO: Saxon 9.0 expressions should test \"instanceof StringValue\" to \"instanceof StringLiteral\"\n                        if (functionCall.getArguments()[0] instanceof StringValue) {\n                            final String instanceName = ((StringValue) functionCall.getArguments()[0]).getStringValue();\n                            instancesList.add(instanceName);\n                        } else {\n                            // Instance name is not known at compile time\n                            return null;\n                        }\n                    } else if (rootExpression instanceof Doc) {// don't need document() function as that is XSLT\n                        final FunctionCall functionCall = (FunctionCall) rootExpression;\n\n                        // TODO: Saxon 9.0 expressions should test \"instanceof StringValue\" to \"instanceof StringLiteral\"\n                        if (functionCall.getArguments()[0] instanceof StringValue) {\n//                            final String literalURI = ((StringValue) functionCall.getArguments()[0]).getStringValue();\n                            return null;\n                        } else {\n                            // Document name is not known at compile time\n                            return null;\n                        }\n                    } else if (rootExpression instanceof ContextItemExpression) {\n                        return null;\n                    } else if (rootExpression instanceof RootExpression) {\n                        // We depend on the current XForms model.\n                        return null;\n                    }\n\n//                                final PathMap.PathMapArc[] rootArcs = root.getArcs();\n//\n//                                for (int j = 0; j < rootArcs.length; j++) {\n//                                    final PathMapArc currentArc = rootArcs[j];\n//                                    final AxisExpression getStep\n//                                }\n\n                }\n                return instancesList;\n\n            } catch (Exception e) {\n                logger.error(\"EXCEPTION WHILE ANALYZING PATHS: \" + xpathString);\n                return null;\n            }\n        } else {\n            logger.info(\"TEST XPATH PATHS - expression not a ComputedExpression: \" + xpathString);\n            return Collections.EMPTY_LIST;\n        }\n    }","id":10177,"modified_method":"private static List<String> analyzeExpression(Expression expression, String xpathString) {\n        if (expression instanceof ComputedExpression) {\n            try {\n                final PathMap pathmap = new PathMap((ComputedExpression) expression, new Configuration());\n                logger.info(\"TEST XPATH PATHS - path for expression: \" + xpathString);\n                pathmap.diagnosticDump(System.out);\n\n                final int dependencies = expression.getDependencies();\n\n                if ((dependencies & StaticProperty.DEPENDS_ON_CONTEXT_ITEM) != 0) {\n                    System.out.println(\"  xxx DEPENDS_ON_CONTEXT_ITEM\");\n                    return null;\n                }\n                if ((dependencies & StaticProperty.DEPENDS_ON_CURRENT_ITEM) != 0) {\n                    System.out.println(\"  xxx DEPENDS_ON_CURRENT_ITEM\");\n                    return null;\n                }\n                if ((dependencies & StaticProperty.DEPENDS_ON_CONTEXT_DOCUMENT) != 0) {\n                    System.out.println(\"  xxx DEPENDS_ON_CONTEXT_DOCUMENT\");\n                    return null;\n                }\n                if ((dependencies & StaticProperty.DEPENDS_ON_LOCAL_VARIABLES) != 0) {\n                    System.out.println(\"  xxx DEPENDS_ON_LOCAL_VARIABLES\");\n                    // Some day we'll have variables\n                    return null;\n                }\n                if ((dependencies & StaticProperty.NON_CREATIVE) != 0) {\n                    System.out.println(\"  xxx NON_CREATIVE\");\n                }\n\n                final List<String> instancesList = new ArrayList<String>();\n\n                final PathMap.PathMapRoot[] roots = pathmap.getPathMapRoots();\n                for (final PathMap.PathMapRoot root: roots) {\n                    final Expression rootExpression = root.getRootExpression();\n\n                    if (rootExpression instanceof Instance || rootExpression instanceof XXFormsInstance) {\n                        final FunctionCall functionCall = (FunctionCall) rootExpression;\n\n                        // TODO: Saxon 9.0 expressions should test \"instanceof StringValue\" to \"instanceof StringLiteral\"\n                        if (functionCall.getArguments()[0] instanceof StringValue) {\n                            final String instanceName = ((StringValue) functionCall.getArguments()[0]).getStringValue();\n                            instancesList.add(instanceName);\n                        } else {\n                            // Instance name is not known at compile time\n                            return null;\n                        }\n                    } else if (rootExpression instanceof Doc) {// don't need document() function as that is XSLT\n                        final FunctionCall functionCall = (FunctionCall) rootExpression;\n\n                        // TODO: Saxon 9.0 expressions should test \"instanceof StringValue\" to \"instanceof StringLiteral\"\n                        if (functionCall.getArguments()[0] instanceof StringValue) {\n//                            final String literalURI = ((StringValue) functionCall.getArguments()[0]).getStringValue();\n                            return null;\n                        } else {\n                            // Document name is not known at compile time\n                            return null;\n                        }\n                    } else if (rootExpression instanceof ContextItemExpression) {\n                        return null;\n                    } else if (rootExpression instanceof RootExpression) {\n                        // We depend on the current XForms model.\n                        return null;\n                    }\n\n//                                final PathMap.PathMapArc[] rootArcs = root.getArcs();\n//\n//                                for (int j = 0; j < rootArcs.length; j++) {\n//                                    final PathMapArc currentArc = rootArcs[j];\n//                                    final AxisExpression getStep\n//                                }\n\n                }\n                return instancesList;\n\n            } catch (Exception e) {\n                logger.error(\"EXCEPTION WHILE ANALYZING PATHS: \" + xpathString);\n                return null;\n            }\n        } else {\n            logger.info(\"TEST XPATH PATHS - expression not a ComputedExpression: \" + xpathString);\n            return Collections.EMPTY_LIST;\n        }\n    }","commit_id":"2af2de04871f42efcf4c389139ee23acb51c7625","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"public static PooledXPathExpression getXPathExpression(PropertyContext propertyContext,\n                                                           List<Item> contextItems, int contextPosition,\n                                                           String xpathString,\n                                                           Map<String, String> prefixToURIMap,\n                                                           Map<String, ValueRepresentation> variableToValueMap,\n                                                           FunctionLibrary functionLibrary,\n                                                           String baseURI,\n                                                           boolean isAvt,\n                                                           boolean testNoCache,\n                                                           LocationData locationData) {\n\n        try {\n            // Find pool from cache\n            final Long validity = new Long(0);\n            final Cache cache = ObjectCache.instance(XPATH_CACHE_NAME, XPATH_CACHE_DEFAULT_SIZE);\n            final FastStringBuffer cacheKeyString = new FastStringBuffer(xpathString);\n            {\n                if (functionLibrary != null) {// This is ok\n                    cacheKeyString.append('|');\n                    cacheKeyString.append(Integer.toString(functionLibrary.hashCode()));\n                }\n            }\n            {\n                // NOTE: Mike Kay confirms on 2007-07-04 that compilation depends on the namespace context, so we need\n                // to use it as part of the cache key.\n\n                // TODO: PERF: It turns out that this takes a lot of time. Now that the namespace information is computed statically, we can do better.\n                if (DEBUG_TEST_KEY_OPTIMIZATION) {\n                    // PERF TEST ONLY\n                    cacheKeyString.append(\"|DUMMYNSVAR|\");\n                } else {\n\n                    if (prefixToURIMap != null) {\n                        final Map<String, String> sortedMap = (prefixToURIMap instanceof TreeMap) ? prefixToURIMap : new TreeMap<String, String>(prefixToURIMap);// this should make sure we always get the keys in the same order\n                        for (Iterator i = sortedMap.entrySet().iterator(); i.hasNext();) {\n                            final Map.Entry currentEntry = (Map.Entry) i.next();\n                            cacheKeyString.append('|');\n                            cacheKeyString.append((String) currentEntry.getKey());\n                            cacheKeyString.append('=');\n                            cacheKeyString.append((String) currentEntry.getValue());\n                        }\n                    }\n\n                }\n            }\n            if (DEBUG_TEST_KEY_OPTIMIZATION) {\n                // PERF TEST ONLY\n                // NOP\n            } else {\n\n                if (variableToValueMap != null && variableToValueMap.size() > 0) {\n                    // There are some variables in scope. They must be part of the key\n                    // TODO: Put this in static state as this can be determined statically once and for all\n                    for (Iterator i = variableToValueMap.keySet().iterator(); i.hasNext();) {\n                        final String variableName = (String) i.next();\n                        cacheKeyString.append('|');\n                        cacheKeyString.append(variableName);\n                    }\n                }\n            }\n            {\n                // Add this to the key as evaluating \"name\" as XPath or as AVT is very different!\n                cacheKeyString.append('|');\n                cacheKeyString.append(Boolean.toString(isAvt));\n            }\n\n            // TODO: Add baseURI to cache key (currently, baseURI is pretty much unused)\n\n            final Set<String> variableNames = (variableToValueMap != null) ? variableToValueMap.keySet() : null;\n            final PooledXPathExpression expr;\n            if (testNoCache) {\n                // For testing only: don't get expression from cache\n                final Object o = new XFormsCachePoolableObjetFactory(null, xpathString, prefixToURIMap, variableNames, functionLibrary, baseURI, isAvt, false).makeObject();\n                expr = (PooledXPathExpression) o;\n            } else {\n                // Get or create pool\n                final InternalCacheKey cacheKey = new InternalCacheKey(\"XPath Expression2\", cacheKeyString.toString());\n                ObjectPool pool = (ObjectPool) cache.findValid(propertyContext, cacheKey, validity);\n                if (pool == null) {\n                    pool = createXPathPool(xpathString, prefixToURIMap, variableNames, functionLibrary, baseURI, isAvt);\n                    cache.add(propertyContext, cacheKey, validity, pool);\n                }\n\n                // Get object from pool\n                final Object o = pool.borrowObject();\n                expr = (PooledXPathExpression) o;\n            }\n\n            // Set context items and position\n            expr.setContextItems(contextItems, contextPosition);\n\n            // Set variables\n            expr.setVariables(variableToValueMap);\n\n            return expr;\n        } catch (Exception e) {\n            throw handleXPathException(e, xpathString, \"preparing XPath expression\", locationData);\n        }\n    }","id":10178,"modified_method":"public static PooledXPathExpression getXPathExpression(PropertyContext propertyContext,\n                                                           List<Item> contextItems, int contextPosition,\n                                                           String xpathString,\n                                                           Map<String, String> prefixToURIMap,\n                                                           Map<String, ValueRepresentation> variableToValueMap,\n                                                           FunctionLibrary functionLibrary,\n                                                           String baseURI,\n                                                           boolean isAvt,\n                                                           boolean testNoCache,\n                                                           LocationData locationData) {\n\n        try {\n            // Find pool from cache\n            final Long validity = (long) 0;\n            final Cache cache = ObjectCache.instance(XPATH_CACHE_NAME, XPATH_CACHE_DEFAULT_SIZE);\n            final FastStringBuffer cacheKeyString = new FastStringBuffer(xpathString);\n            {\n                if (functionLibrary != null) {// This is ok\n                    cacheKeyString.append('|');\n                    cacheKeyString.append(Integer.toString(functionLibrary.hashCode()));\n                }\n            }\n            {\n                // NOTE: Mike Kay confirms on 2007-07-04 that compilation depends on the namespace context, so we need\n                // to use it as part of the cache key.\n\n                // TODO: PERF: It turns out that this takes a lot of time. Now that the namespace information is computed statically, we can do better.\n                if (DEBUG_TEST_KEY_OPTIMIZATION) {\n                    // PERF TEST ONLY\n                    cacheKeyString.append(\"|DUMMYNSVAR|\");\n                } else {\n\n                    if (prefixToURIMap != null) {\n                        final Map<String, String> sortedMap = (prefixToURIMap instanceof TreeMap) ? prefixToURIMap : new TreeMap<String, String>(prefixToURIMap);// this should make sure we always get the keys in the same order\n                        for (Map.Entry currentEntry: sortedMap.entrySet()) {\n                            cacheKeyString.append('|');\n                            cacheKeyString.append((String) currentEntry.getKey());\n                            cacheKeyString.append('=');\n                            cacheKeyString.append((String) currentEntry.getValue());\n                        }\n                    }\n\n                }\n            }\n            if (DEBUG_TEST_KEY_OPTIMIZATION) {\n                // PERF TEST ONLY\n                // NOP\n            } else {\n\n                if (variableToValueMap != null && variableToValueMap.size() > 0) {\n                    // There are some variables in scope. They must be part of the key\n                    // TODO: Put this in static state as this can be determined statically once and for all\n                    for (final String variableName: variableToValueMap.keySet()) {\n                        cacheKeyString.append('|');\n                        cacheKeyString.append(variableName);\n                    }\n                }\n            }\n            {\n                // Add this to the key as evaluating \"name\" as XPath or as AVT is very different!\n                cacheKeyString.append('|');\n                cacheKeyString.append(Boolean.toString(isAvt));\n            }\n\n            // TODO: Add baseURI to cache key (currently, baseURI is pretty much unused)\n\n            final Set<String> variableNames = (variableToValueMap != null) ? variableToValueMap.keySet() : null;\n            final PooledXPathExpression expr;\n            if (testNoCache) {\n                // For testing only: don't get expression from cache\n                final Object o = new XFormsCachePoolableObjetFactory(null, xpathString, prefixToURIMap, variableNames, functionLibrary, baseURI, isAvt, false).makeObject();\n                expr = (PooledXPathExpression) o;\n            } else {\n                // Get or create pool\n                final InternalCacheKey cacheKey = new InternalCacheKey(\"XPath Expression2\", cacheKeyString.toString());\n                ObjectPool pool = (ObjectPool) cache.findValid(propertyContext, cacheKey, validity);\n                if (pool == null) {\n                    pool = createXPathPool(xpathString, prefixToURIMap, variableNames, functionLibrary, baseURI, isAvt);\n                    cache.add(propertyContext, cacheKey, validity, pool);\n                }\n\n                // Get object from pool\n                final Object o = pool.borrowObject();\n                expr = (PooledXPathExpression) o;\n            }\n\n            // Set context items and position\n            expr.setContextItems(contextItems, contextPosition);\n\n            // Set variables\n            expr.setVariables(variableToValueMap);\n\n            return expr;\n        } catch (Exception e) {\n            throw handleXPathException(e, xpathString, \"preparing XPath expression\", locationData);\n        }\n    }","commit_id":"2af2de04871f42efcf4c389139ee23acb51c7625","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * A new message has arrived - toss it on the appropriate queue (moving \n     * previously pending messages to the ready queue if it fills the gap, etc).\n     *\n     * @param messageId ID of the message\n     * @param payload message payload\n     * @return true if this is a new packet, false if it is a dup\n     */\n    public boolean messageReceived(long messageId, ByteArray payload) {\n        synchronized (_dataLock) {\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"received \" + messageId + \" with \" + (payload != null ? payload.getValid()+\"\" : \"no payload\"));\n            if (messageId <= _highestReadyBlockId) {\n                if (_log.shouldLog(Log.DEBUG))\n                    _log.debug(\"ignoring dup message \" + messageId);\n                _dataLock.notifyAll();\n                return false; // already received\n            }\n            if (messageId > _highestBlockId)\n                _highestBlockId = messageId;\n            \n            if (_highestReadyBlockId + 1 == messageId) {\n                if (!_locallyClosed && payload.getValid() > 0) {\n                    if (_log.shouldLog(Log.DEBUG))\n                        _log.debug(\"accepting bytes as ready: \" + payload.getValid());\n                    _readyDataBlocks.add(payload);\n                }\n                _highestReadyBlockId = messageId;\n                long cur = _highestReadyBlockId + 1;\n                // now pull in any previously pending blocks\n                while (_notYetReadyBlocks.containsKey(new Long(cur))) {\n                    ByteArray ba = (ByteArray)_notYetReadyBlocks.remove(new Long(cur));\n                    if ( (ba != null) && (ba.getData() != null) && (ba.getValid() > 0) ) {\n                        _readyDataBlocks.add(ba);\n                    }\n                    \n                    if (_log.shouldLog(Log.DEBUG))\n                        _log.debug(\"making ready the block \" + cur);\n                    cur++;\n                    _highestReadyBlockId++;\n                }\n                _dataLock.notifyAll();\n            } else {\n                if (_log.shouldLog(Log.DEBUG))\n                    _log.debug(\"message is out of order: \" + messageId);\n                if (_locallyClosed) // dont need the payload, just the msgId in order\n                    _notYetReadyBlocks.put(new Long(messageId), new ByteArray(null));\n                else\n                    _notYetReadyBlocks.put(new Long(messageId), payload);\n                _dataLock.notifyAll();\n            }\n        }\n        return true;\n    }","id":10179,"modified_method":"/**\n     * A new message has arrived - toss it on the appropriate queue (moving \n     * previously pending messages to the ready queue if it fills the gap, etc).\n     *\n     * @param messageId ID of the message\n     * @param payload message payload\n     * @return true if this is a new packet, false if it is a dup\n     */\n    public boolean messageReceived(long messageId, ByteArray payload) {\n        synchronized (_dataLock) {\n            if (_log.shouldLog(Log.DEBUG))\n                _log.debug(\"received \" + messageId + \" with \" + (payload != null ? payload.getValid()+\"\" : \"no payload\"));\n            if (messageId <= _highestReadyBlockId) {\n                if (_log.shouldLog(Log.DEBUG))\n                    _log.debug(\"ignoring dup message \" + messageId);\n                _dataLock.notifyAll();\n                return false; // already received\n            }\n            if (messageId > _highestBlockId)\n                _highestBlockId = messageId;\n            \n            if (_highestReadyBlockId + 1 == messageId) {\n                if (!_locallyClosed && payload.getValid() > 0) {\n                    if (_log.shouldLog(Log.DEBUG))\n                        _log.debug(\"accepting bytes as ready: \" + payload.getValid());\n                    _readyDataBlocks.add(payload);\n                }\n                _highestReadyBlockId = messageId;\n                long cur = _highestReadyBlockId + 1;\n                // now pull in any previously pending blocks\n                while (_notYetReadyBlocks.containsKey(new Long(cur))) {\n                    ByteArray ba = _notYetReadyBlocks.remove(new Long(cur));\n                    if ( (ba != null) && (ba.getData() != null) && (ba.getValid() > 0) ) {\n                        _readyDataBlocks.add(ba);\n                    }\n                    \n                    if (_log.shouldLog(Log.DEBUG))\n                        _log.debug(\"making ready the block \" + cur);\n                    cur++;\n                    _highestReadyBlockId++;\n                }\n                _dataLock.notifyAll();\n            } else {\n                if (_log.shouldLog(Log.DEBUG))\n                    _log.debug(\"message is out of order: \" + messageId);\n                if (_locallyClosed) // dont need the payload, just the msgId in order\n                    _notYetReadyBlocks.put(new Long(messageId), new ByteArray(null));\n                else\n                    _notYetReadyBlocks.put(new Long(messageId), payload);\n                _dataLock.notifyAll();\n            }\n        }\n        return true;\n    }","commit_id":"171e3abe341bd44a203cae033ddcf1d14ebfe997","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"@Override\n    public int read(byte target[], int offset, int length) throws IOException {\n        if (_locallyClosed) throw new IOException(\"Already locally closed\");\n        throwAnyError();\n        long expiration = -1;\n        if (_readTimeout > 0)\n            expiration = _readTimeout + System.currentTimeMillis();\n        synchronized (_dataLock) {\n            for (int i = 0; i < length; i++) {\n                if ( (_readyDataBlocks.isEmpty()) && (i == 0) ) {\n                    // ok, we havent found anything, so lets block until we get \n                    // at least one byte\n                    \n                    while (_readyDataBlocks.isEmpty()) {\n                        if (_locallyClosed)\n                            throw new IOException(\"Already closed, you wanker\");\n                        \n                        if ( (_notYetReadyBlocks.isEmpty()) && (_closeReceived) ) {\n                            if (_log.shouldLog(Log.INFO))\n                                _log.info(\"read(...,\" + offset + \", \" + length + \")[\" + i \n                                           + \"] got EOF after \" + _readTotal + \" \" + toString());\n                            return -1;\n                        } else {\n                            if (_readTimeout < 0) {\n                                if (_log.shouldLog(Log.DEBUG))\n                                    _log.debug(\"read(...,\" + offset+\", \" + length+ \")[\" + i \n                                               + \") with no timeout: \" + toString());\n                                try { _dataLock.wait(); } catch (InterruptedException ie) { }\n                                if (_log.shouldLog(Log.DEBUG))\n                                    _log.debug(\"read(...,\" + offset+\", \" + length+ \")[\" + i \n                                               + \") with no timeout complete: \" + toString());\n                                throwAnyError();\n                            } else if (_readTimeout > 0) {\n                                if (_log.shouldLog(Log.DEBUG))\n                                    _log.debug(\"read(...,\" + offset+\", \" + length+ \")[\" + i \n                                               + \") with timeout: \" + _readTimeout + \": \" + toString());\n                                try { _dataLock.wait(_readTimeout); } catch (InterruptedException ie) { }\n                                if (_log.shouldLog(Log.DEBUG))\n                                    _log.debug(\"read(...,\" + offset+\", \" + length+ \")[\" + i \n                                               + \") with timeout complete: \" + _readTimeout + \": \" + toString());\n                                throwAnyError();\n                            } else { // readTimeout == 0\n                                // noop, don't block\n                                if (_log.shouldLog(Log.DEBUG))\n                                    _log.debug(\"read(...,\" + offset+\", \" + length+ \")[\" + i \n                                               + \") with nonblocking setup: \" + toString());\n                                return i;\n                            }\n                            if (_readyDataBlocks.isEmpty()) {\n                                if ( (_readTimeout > 0) && (expiration < System.currentTimeMillis()) ) {\n                                    if (_log.shouldLog(Log.INFO))\n                                        _log.info(\"read(...,\" + offset+\", \" + length+ \")[\" + i \n                                                   + \") expired: \" + toString());\n                                    return i;\n                                }\n                            }\n                        }\n                    }\n                    // we looped a few times then got data, so this pass doesnt count\n                    i--;\n                } else if (_readyDataBlocks.isEmpty()) {\n                    if (_log.shouldLog(Log.DEBUG))\n                        _log.debug(\"read(...,\" + offset+\", \" + length+ \")[\" + i \n                                   + \"] no more ready blocks, returning\");\n                    return i;\n                } else {\n                    // either was already ready, or we wait()ed and it arrived\n                    ByteArray cur = (ByteArray)_readyDataBlocks.get(0);\n                    byte rv = cur.getData()[cur.getOffset()+_readyDataBlockIndex];\n                    _readyDataBlockIndex++;\n                    boolean removed = false;\n                    if (cur.getValid() <= _readyDataBlockIndex) {\n                        _readyDataBlockIndex = 0;\n                        _readyDataBlocks.remove(0);\n                        removed = true;\n                    }\n                    _readTotal++;\n                    target[offset + i] = rv; // rv < 0 ? rv + 256 : rv\n                    if ( (_readyDataBlockIndex <= 3) || (_readyDataBlockIndex >= cur.getValid() - 5) ) {\n                        if (_log.shouldLog(Log.DEBUG))\n                            _log.debug(\"read(...,\" + offset+\", \" + length+ \")[\" + i \n                                       + \"] after ready data: readyDataBlockIndex=\" + _readyDataBlockIndex \n                                       + \" readyBlocks=\" + _readyDataBlocks.size()\n                                       + \" readTotal=\" + _readTotal);\n                    }\n                    //if (removed) \n                    //    _cache.release(cur);\n                }\n            } // for (int i = 0; i < length; i++) {\n        }  // synchronized (_dataLock)\n        \n        if (_log.shouldLog(Log.DEBUG))\n            _log.debug(\"read(...,\" + offset+\", \" + length+ \") read fully total read: \" +_readTotal);\n\n        return length;\n    }","id":10180,"modified_method":"@Override\n    public int read(byte target[], int offset, int length) throws IOException {\n        if (_locallyClosed) throw new IOException(\"Already locally closed\");\n        throwAnyError();\n        long expiration = -1;\n        if (_readTimeout > 0)\n            expiration = _readTimeout + System.currentTimeMillis();\n        synchronized (_dataLock) {\n            for (int i = 0; i < length; i++) {\n                if ( (_readyDataBlocks.isEmpty()) && (i == 0) ) {\n                    // ok, we havent found anything, so lets block until we get \n                    // at least one byte\n                    \n                    while (_readyDataBlocks.isEmpty()) {\n                        if (_locallyClosed)\n                            throw new IOException(\"Already closed, you wanker\");\n                        \n                        if ( (_notYetReadyBlocks.isEmpty()) && (_closeReceived) ) {\n                            if (_log.shouldLog(Log.INFO))\n                                _log.info(\"read(...,\" + offset + \", \" + length + \")[\" + i \n                                           + \"] got EOF after \" + _readTotal + \" \" + toString());\n                            return -1;\n                        } else {\n                            if (_readTimeout < 0) {\n                                if (_log.shouldLog(Log.DEBUG))\n                                    _log.debug(\"read(...,\" + offset+\", \" + length+ \")[\" + i \n                                               + \") with no timeout: \" + toString());\n                                try { _dataLock.wait(); } catch (InterruptedException ie) { }\n                                if (_log.shouldLog(Log.DEBUG))\n                                    _log.debug(\"read(...,\" + offset+\", \" + length+ \")[\" + i \n                                               + \") with no timeout complete: \" + toString());\n                                throwAnyError();\n                            } else if (_readTimeout > 0) {\n                                if (_log.shouldLog(Log.DEBUG))\n                                    _log.debug(\"read(...,\" + offset+\", \" + length+ \")[\" + i \n                                               + \") with timeout: \" + _readTimeout + \": \" + toString());\n                                try { _dataLock.wait(_readTimeout); } catch (InterruptedException ie) { }\n                                if (_log.shouldLog(Log.DEBUG))\n                                    _log.debug(\"read(...,\" + offset+\", \" + length+ \")[\" + i \n                                               + \") with timeout complete: \" + _readTimeout + \": \" + toString());\n                                throwAnyError();\n                            } else { // readTimeout == 0\n                                // noop, don't block\n                                if (_log.shouldLog(Log.DEBUG))\n                                    _log.debug(\"read(...,\" + offset+\", \" + length+ \")[\" + i \n                                               + \") with nonblocking setup: \" + toString());\n                                return i;\n                            }\n                            if (_readyDataBlocks.isEmpty()) {\n                                if ( (_readTimeout > 0) && (expiration < System.currentTimeMillis()) ) {\n                                    if (_log.shouldLog(Log.INFO))\n                                        _log.info(\"read(...,\" + offset+\", \" + length+ \")[\" + i \n                                                   + \") expired: \" + toString());\n                                    return i;\n                                }\n                            }\n                        }\n                    }\n                    // we looped a few times then got data, so this pass doesnt count\n                    i--;\n                } else if (_readyDataBlocks.isEmpty()) {\n                    if (_log.shouldLog(Log.DEBUG))\n                        _log.debug(\"read(...,\" + offset+\", \" + length+ \")[\" + i \n                                   + \"] no more ready blocks, returning\");\n                    return i;\n                } else {\n                    // either was already ready, or we wait()ed and it arrived\n                    ByteArray cur = _readyDataBlocks.get(0);\n                    byte rv = cur.getData()[cur.getOffset()+_readyDataBlockIndex];\n                    _readyDataBlockIndex++;\n                    boolean removed = false;\n                    if (cur.getValid() <= _readyDataBlockIndex) {\n                        _readyDataBlockIndex = 0;\n                        _readyDataBlocks.remove(0);\n                        removed = true;\n                    }\n                    _readTotal++;\n                    target[offset + i] = rv; // rv < 0 ? rv + 256 : rv\n                    if ( (_readyDataBlockIndex <= 3) || (_readyDataBlockIndex >= cur.getValid() - 5) ) {\n                        if (_log.shouldLog(Log.DEBUG))\n                            _log.debug(\"read(...,\" + offset+\", \" + length+ \")[\" + i \n                                       + \"] after ready data: readyDataBlockIndex=\" + _readyDataBlockIndex \n                                       + \" readyBlocks=\" + _readyDataBlocks.size()\n                                       + \" readTotal=\" + _readTotal);\n                    }\n                    //if (removed) \n                    //    _cache.release(cur);\n                }\n            } // for (int i = 0; i < length; i++) {\n        }  // synchronized (_dataLock)\n        \n        if (_log.shouldLog(Log.DEBUG))\n            _log.debug(\"read(...,\" + offset+\", \" + length+ \") read fully total read: \" +_readTotal);\n\n        return length;\n    }","commit_id":"171e3abe341bd44a203cae033ddcf1d14ebfe997","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"public int getTotalReadySize() {\n        synchronized (_dataLock) {\n            if (_locallyClosed) return 0;\n            int numBytes = 0;\n            for (int i = 0; i < _readyDataBlocks.size(); i++) {\n                ByteArray cur = (ByteArray)_readyDataBlocks.get(i);\n                if (i == 0)\n                    numBytes += cur.getValid() - _readyDataBlockIndex;\n                else\n                    numBytes += cur.getValid();\n            }\n            return numBytes;\n        }\n    }","id":10181,"modified_method":"public int getTotalReadySize() {\n        synchronized (_dataLock) {\n            if (_locallyClosed) return 0;\n            int numBytes = 0;\n            for (int i = 0; i < _readyDataBlocks.size(); i++) {\n                ByteArray cur = _readyDataBlocks.get(i);\n                if (i == 0)\n                    numBytes += cur.getValid() - _readyDataBlockIndex;\n                else\n                    numBytes += cur.getValid();\n            }\n            return numBytes;\n        }\n    }","commit_id":"171e3abe341bd44a203cae033ddcf1d14ebfe997","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"public MessageInputStream(I2PAppContext ctx) {\n        _context = ctx;\n        _log = ctx.logManager().getLog(MessageInputStream.class);\n        _readyDataBlocks = new ArrayList(4);\n        _readyDataBlockIndex = 0;\n        _highestReadyBlockId = -1;\n        _highestBlockId = -1;\n        _readTimeout = -1;\n        _readTotal = 0;\n        _notYetReadyBlocks = new HashMap(4);\n        _dataLock = new Object();\n        _closeReceived = false;\n        _locallyClosed = false;\n        _cache = ByteCache.getInstance(128, Packet.MAX_PAYLOAD_SIZE);\n    }","id":10182,"modified_method":"public MessageInputStream(I2PAppContext ctx) {\n        _context = ctx;\n        _log = ctx.logManager().getLog(MessageInputStream.class);\n        _readyDataBlocks = new ArrayList(4);\n        _highestReadyBlockId = -1;\n        _highestBlockId = -1;\n        _readTimeout = -1;\n        _notYetReadyBlocks = new HashMap(4);\n        _dataLock = new Object();\n        //_cache = ByteCache.getInstance(128, Packet.MAX_PAYLOAD_SIZE);\n    }","commit_id":"171e3abe341bd44a203cae033ddcf1d14ebfe997","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"public void closeReceived() {\n        synchronized (_dataLock) {\n            if (_log.shouldLog(Log.DEBUG)) {\n                StringBuilder buf = new StringBuilder(128);\n                buf.append(\"Close received, ready bytes: \");\n                long available = 0;\n                for (int i = 0; i < _readyDataBlocks.size(); i++) \n                    available += ((ByteArray)_readyDataBlocks.get(i)).getValid();\n                available -= _readyDataBlockIndex;\n                buf.append(available);\n                buf.append(\" blocks: \").append(_readyDataBlocks.size());\n                \n                buf.append(\" not ready blocks: \");\n                long notAvailable = 0;\n                for (Iterator iter = _notYetReadyBlocks.keySet().iterator(); iter.hasNext(); ) {\n                    Long id = (Long)iter.next();\n                    ByteArray ba = (ByteArray)_notYetReadyBlocks.get(id);\n                    buf.append(id).append(\" \");\n                    \n                    if (ba != null)\n                        notAvailable += ba.getValid();\n                }\n                \n                buf.append(\"not ready bytes: \").append(notAvailable);\n                buf.append(\" highest ready block: \").append(_highestReadyBlockId);\n                \n                _log.debug(buf.toString(), new Exception(\"closed\"));\n            }\n            _closeReceived = true;\n            _dataLock.notifyAll();\n        }\n    }","id":10183,"modified_method":"public void closeReceived() {\n        synchronized (_dataLock) {\n            if (_log.shouldLog(Log.DEBUG)) {\n                StringBuilder buf = new StringBuilder(128);\n                buf.append(\"Close received, ready bytes: \");\n                long available = 0;\n                for (int i = 0; i < _readyDataBlocks.size(); i++) \n                    available += _readyDataBlocks.get(i).getValid();\n                available -= _readyDataBlockIndex;\n                buf.append(available);\n                buf.append(\" blocks: \").append(_readyDataBlocks.size());\n                \n                buf.append(\" not ready blocks: \");\n                long notAvailable = 0;\n                for (Long id : _notYetReadyBlocks.keySet()) {\n                    ByteArray ba = _notYetReadyBlocks.get(id);\n                    buf.append(id).append(\" \");\n                    \n                    if (ba != null)\n                        notAvailable += ba.getValid();\n                }\n                \n                buf.append(\"not ready bytes: \").append(notAvailable);\n                buf.append(\" highest ready block: \").append(_highestReadyBlockId);\n                \n                _log.debug(buf.toString(), new Exception(\"closed\"));\n            }\n            _closeReceived = true;\n            _dataLock.notifyAll();\n        }\n    }","commit_id":"171e3abe341bd44a203cae033ddcf1d14ebfe997","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"@Override\n    public int available() throws IOException {\n        if (_locallyClosed) throw new IOException(\"Already closed, you wanker\");\n        throwAnyError();\n        int numBytes = 0;\n        synchronized (_dataLock) {\n            for (int i = 0; i < _readyDataBlocks.size(); i++) {\n                ByteArray cur = (ByteArray)_readyDataBlocks.get(i);\n                if (i == 0)\n                    numBytes += cur.getValid() - _readyDataBlockIndex;\n                else\n                    numBytes += cur.getValid();\n            }\n        }\n        if (_log.shouldLog(Log.DEBUG))\n            _log.debug(\"available(): \" + numBytes + \" \" + toString());\n        \n        return numBytes;\n    }","id":10184,"modified_method":"@Override\n    public int available() throws IOException {\n        if (_locallyClosed) throw new IOException(\"Already closed, you wanker\");\n        throwAnyError();\n        int numBytes = 0;\n        synchronized (_dataLock) {\n            for (int i = 0; i < _readyDataBlocks.size(); i++) {\n                ByteArray cur = _readyDataBlocks.get(i);\n                if (i == 0)\n                    numBytes += cur.getValid() - _readyDataBlockIndex;\n                else\n                    numBytes += cur.getValid();\n            }\n        }\n        if (_log.shouldLog(Log.DEBUG))\n            _log.debug(\"available(): \" + numBytes + \" \" + toString());\n        \n        return numBytes;\n    }","commit_id":"171e3abe341bd44a203cae033ddcf1d14ebfe997","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"@Override\n    public void close() {\n        synchronized (_dataLock) {\n            //while (_readyDataBlocks.size() > 0)\n            //    _cache.release((ByteArray)_readyDataBlocks.remove(0));\n            _readyDataBlocks.clear();\n             \n            // we don't need the data, but we do need to keep track of the messageIds\n            // received, so we can ACK accordingly\n            for (Iterator iter = _notYetReadyBlocks.values().iterator(); iter.hasNext(); ) {\n                ByteArray ba = (ByteArray)iter.next();\n                ba.setData(null);\n                //_cache.release(ba);\n            }\n            _locallyClosed = true;\n            _dataLock.notifyAll();\n        }\n    }","id":10185,"modified_method":"@Override\n    public void close() {\n        synchronized (_dataLock) {\n            //while (_readyDataBlocks.size() > 0)\n            //    _cache.release((ByteArray)_readyDataBlocks.remove(0));\n            _readyDataBlocks.clear();\n             \n            // we don't need the data, but we do need to keep track of the messageIds\n            // received, so we can ACK accordingly\n            for (ByteArray ba : _notYetReadyBlocks.values()) {\n                ba.setData(null);\n                //_cache.release(ba);\n            }\n            _locallyClosed = true;\n            _dataLock.notifyAll();\n        }\n    }","commit_id":"171e3abe341bd44a203cae033ddcf1d14ebfe997","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     * How many bytes are queued up for reading (or sitting in the out-of-order\n     * buffer)?\n     *\n     * @return Count of bytes waiting to be read\n     */\n    public int getTotalQueuedSize() {\n        synchronized (_dataLock) {\n            if (_locallyClosed) return 0;\n            int numBytes = 0;\n            for (int i = 0; i < _readyDataBlocks.size(); i++) {\n                ByteArray cur = (ByteArray)_readyDataBlocks.get(i);\n                if (i == 0)\n                    numBytes += cur.getValid() - _readyDataBlockIndex;\n                else\n                    numBytes += cur.getValid();\n            }\n            for (Iterator iter = _notYetReadyBlocks.values().iterator(); iter.hasNext(); ) {\n                ByteArray cur = (ByteArray)iter.next();\n                numBytes += cur.getValid();\n            }\n            return numBytes;\n        }\n    }","id":10186,"modified_method":"/**\n     * How many bytes are queued up for reading (or sitting in the out-of-order\n     * buffer)?\n     *\n     * @return Count of bytes waiting to be read\n     */\n    public int getTotalQueuedSize() {\n        synchronized (_dataLock) {\n            if (_locallyClosed) return 0;\n            int numBytes = 0;\n            for (int i = 0; i < _readyDataBlocks.size(); i++) {\n                ByteArray cur = _readyDataBlocks.get(i);\n                if (i == 0)\n                    numBytes += cur.getValid() - _readyDataBlockIndex;\n                else\n                    numBytes += cur.getValid();\n            }\n            for (ByteArray cur : _notYetReadyBlocks.values()) {\n                numBytes += cur.getValid();\n            }\n            return numBytes;\n        }\n    }","commit_id":"171e3abe341bd44a203cae033ddcf1d14ebfe997","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"/**\n     * Ascending list of block IDs greater than the highest\n     * ready block ID, or null if there aren't any.\n     *\n     * @return block IDs greater than the highest ready block ID, or null if there aren't any.\n     */\n    public long[] getOutOfOrderBlocks() {\n        long blocks[] = null;\n        synchronized (_dataLock) {\n            int num = _notYetReadyBlocks.size();\n            if (num <= 0) return null;\n            blocks = new long[num];\n            int i = 0;\n            for (Iterator iter = _notYetReadyBlocks.keySet().iterator(); iter.hasNext(); ) {\n                Long id = (Long)iter.next();\n                blocks[i] = id.longValue();\n                i++;\n            }\n        }\n        Arrays.sort(blocks);\n        return blocks;\n    }","id":10187,"modified_method":"/**\n     * Ascending list of block IDs greater than the highest\n     * ready block ID, or null if there aren't any.\n     *\n     * @return block IDs greater than the highest ready block ID, or null if there aren't any.\n     */\n    public long[] getOutOfOrderBlocks() {\n        long blocks[] = null;\n        synchronized (_dataLock) {\n            int num = _notYetReadyBlocks.size();\n            if (num <= 0) return null;\n            blocks = new long[num];\n            int i = 0;\n            for (Long id : _notYetReadyBlocks.keySet()) {\n                blocks[i++] = id.longValue();\n            }\n        }\n        Arrays.sort(blocks);\n        return blocks;\n    }","commit_id":"171e3abe341bd44a203cae033ddcf1d14ebfe997","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"public void setNamespaceContext(Map namespaceContext) {\n            this.namespaceContext = namespaceContext;\n        }","id":10188,"modified_method":"public void setNamespaceContext(Map<String, String> namespaceContext) {\n            this.namespaceContext = namespaceContext;\n        }","commit_id":"f91a5e560bd85d14fe2fa822977b39b6bc8a04de","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private ResourceSet executeQuery(PipelineContext pipelineContext, Datasource datasource, String collectionName, boolean createCollection, String resourceId, String query, Map namespaceContext) throws XMLDBException {\n        Collection collection = getCollection(pipelineContext, datasource, collectionName);\n        if (collection == null) {\n            if (!createCollection)\n                throw new OXFException(\"Cannot find collection '\" + collectionName + \"'.\");\n            else\n                collection = createCollection(pipelineContext, datasource, collectionName);\n        }\n        XPathQueryService xpathQueryService;\n        try {\n            // For eXist, this is the same as XQueryService\n            xpathQueryService = (XPathQueryService) collection.getService(XPATH_SERVICE_NAME, \"1.0\");\n        } catch (XMLDBException e) {\n            if (e.errorCode == ErrorCodes.NO_SUCH_SERVICE)\n                throw new OXFException(\"XML:DB \" + XPATH_SERVICE_NAME + \" does not exist.\", e);\n            else\n                throw e;\n        }\n        if (xpathQueryService == null)\n            throw new OXFException(\"XML:DB \" + XPATH_SERVICE_NAME + \" does not exist.\");\n\n        // Configure service (this is particular for eXist)\n        // TODO: Should be configurable, but with what mechanism? \n        try {\n            xpathQueryService.setProperty(\"highlight-matches\", \"no\");\n        } catch (Exception e) {\n            logger.debug(\"Unable to set eXist highlight-matches\", e);\n        }\n\n        // Set namespaces\n        if (namespaceContext != null) {\n            for (Iterator i = namespaceContext.keySet().iterator(); i.hasNext();) {\n                String prefix = (String) i.next();\n                String uri = (String) namespaceContext.get(prefix);\n                xpathQueryService.setNamespace(prefix, uri);\n            }\n        }\n\n        // Log for debug\n        logger.debug(query);\n\n        // Execute query\n        ResourceSet result;\n        if (resourceId == null)\n            result = xpathQueryService.query(query);\n        else\n            result = xpathQueryService.queryResource(resourceId, query);\n\n        return result;\n    }","id":10189,"modified_method":"private ResourceSet executeQuery(PipelineContext pipelineContext, Datasource datasource, String collectionName, boolean createCollection,\n                                     String resourceId, String query, Map<String, String> namespaceContext) throws XMLDBException {\n\n        Collection collection = getCollection(pipelineContext, datasource, collectionName);\n        if (collection == null) {\n            if (!createCollection)\n                throw new OXFException(\"Cannot find collection '\" + collectionName + \"'.\");\n            else\n                collection = createCollection(pipelineContext, datasource, collectionName);\n        }\n        final XPathQueryService xpathQueryService;\n        try {\n            // For eXist, this is the same as XQueryService\n            xpathQueryService = (XPathQueryService) collection.getService(XPATH_SERVICE_NAME, \"1.0\");\n        } catch (XMLDBException e) {\n            if (e.errorCode == ErrorCodes.NO_SUCH_SERVICE)\n                throw new OXFException(\"XML:DB \" + XPATH_SERVICE_NAME + \" does not exist.\", e);\n            else\n                throw e;\n        }\n        if (xpathQueryService == null)\n            throw new OXFException(\"XML:DB \" + XPATH_SERVICE_NAME + \" does not exist.\");\n\n        // Configure service (this is particular for eXist)\n        // TODO: Should be configurable, but with what mechanism? \n        try {\n            xpathQueryService.setProperty(\"highlight-matches\", \"no\");\n        } catch (Exception e) {\n            logger.debug(\"Unable to set eXist highlight-matches\", e);\n        }\n\n        // Set namespaces\n        if (namespaceContext != null) {\n            for (final String prefix: namespaceContext.keySet()) {\n                xpathQueryService.setNamespace(prefix, namespaceContext.get(prefix));\n            }\n        }\n\n        // Log for debug\n        logger.debug(query);\n\n        // Execute query\n        final ResourceSet result;\n        if (resourceId == null)\n            result = xpathQueryService.query(query);\n        else\n            result = xpathQueryService.queryResource(resourceId, query);\n\n        return result;\n    }","commit_id":"f91a5e560bd85d14fe2fa822977b39b6bc8a04de","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Query resources from the database.\n     *\n     * @param datasource        the processor configuration\n     * @param collectionName    identifies the collection in which resources are searched\n     * @param resourceId        optional resource id on which the query is run\n     * @param query             selects resources in the collection that must be searched\n     * @param contentHandler    ContentHandler where the resources are output\n     */\n    protected void query(PipelineContext pipelineContext, Datasource datasource, String collectionName, boolean createCollection, String resourceId, String query, Map namespaceContext, ContentHandler contentHandler) {\n        ensureDriverRegistered(pipelineContext, datasource);\n        try {\n            // Execute query\n            ResourceSet result = executeQuery(pipelineContext, datasource, collectionName, createCollection, resourceId, query, namespaceContext);\n\n            // Output resources\n            for (ResourceIterator i = result.getIterator(); i.hasMoreResources();) {\n                Resource resource = i.nextResource();\n                if (resource instanceof XMLResource) {\n                    ((XMLResource) resource).getContentAsSAX(new DatabaseReadContentHandler(contentHandler));\n                } else if (resource instanceof BinaryResource) {\n                    XMLUtils.inputStreamToBase64Characters(new ByteArrayInputStream((byte[]) resource.getContent()), contentHandler);\n                } else {\n                    throw new OXFException(\"Unsupported resource type: \" + resource.getClass());\n                }\n            }\n        } catch (XMLDBException e) {\n            throw new OXFException(e);\n        }\n    }","id":10190,"modified_method":"/**\n     * Query resources from the database.\n     *\n     * @param pipelineContext   current context\n     * @param datasource        the processor configuration\n     * @param collectionName    identifies the collection in which resources are searched\n     * @param createCollection  if true, create collection if it doesn't exist\n     * @param resourceId        optional resource id on which the query is run\n     * @param query             selects resources in the collection that must be searched\n     * @param namespaceContext  namespace mappings\n     * @param contentHandler    ContentHandler where the resources are output\n     */\n    protected void query(PipelineContext pipelineContext, Datasource datasource, String collectionName, boolean createCollection,\n                         String resourceId, String query, Map<String, String> namespaceContext, ContentHandler contentHandler) {\n        ensureDriverRegistered(pipelineContext, datasource);\n        try {\n            // Execute query\n            ResourceSet result = executeQuery(pipelineContext, datasource, collectionName, createCollection, resourceId, query, namespaceContext);\n\n            // Output resources\n            for (ResourceIterator i = result.getIterator(); i.hasMoreResources();) {\n                Resource resource = i.nextResource();\n                if (resource instanceof XMLResource) {\n                    ((XMLResource) resource).getContentAsSAX(new DatabaseReadContentHandler(contentHandler));\n                } else if (resource instanceof BinaryResource) {\n                    XMLUtils.inputStreamToBase64Characters(new ByteArrayInputStream((byte[]) resource.getContent()), contentHandler);\n                } else {\n                    throw new OXFException(\"Unsupported resource type: \" + resource.getClass());\n                }\n            }\n        } catch (XMLDBException e) {\n            throw new OXFException(e);\n        }\n    }","commit_id":"f91a5e560bd85d14fe2fa822977b39b6bc8a04de","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"protected void executeOperation(PipelineContext pipelineContext, ContentHandler contentHandler) {\n        // Get datasource and configuration\n        Datasource datasource = getDatasource(pipelineContext);\n        Config config = getConfig(pipelineContext);\n\n        if (\"query\".equals(config.getOperation())) {\n            query(pipelineContext, datasource, config.getCollection(), \"true\".equals(config.getCreateCollection()), config.getResourceId(), config.getQuery(), config.getNamespaceContext(), contentHandler);\n        } else if (\"insert\".equals(config.getOperation())) {\n            insert(pipelineContext, datasource, config.getCollection(), \"true\".equals(config.getCreateCollection()), config.getResourceId(), getInputByName(INPUT_DATA));\n        } else if (\"delete\".equals(config.getOperation())) {\n            delete(pipelineContext, datasource, config.getCollection(), \"true\".equals(config.getCreateCollection()), config.getResourceId(), config.getQuery(), config.getNamespaceContext());\n        } else if (\"update\".equals(config.getOperation())) {\n            update(pipelineContext, datasource, config.getCollection(), \"true\".equals(config.getCreateCollection()), config.getResourceId(), config.getQuery());\n        } else {\n            // TODO: Handle location info\n            throw new IllegalArgumentException(\"Invalid operation: \" + config.getOperation());\n        }\n    }","id":10191,"modified_method":"protected void executeOperation(PipelineContext pipelineContext, ContentHandler contentHandler) {\n        // Get datasource and configuration\n        final Datasource datasource = getDatasource(pipelineContext);\n        final Config config = getConfig(pipelineContext);\n\n        if (\"query\".equals(config.getOperation())) {\n            query(pipelineContext, datasource, config.getCollection(), \"true\".equals(config.getCreateCollection()), config.getResourceId(), config.getQuery(), config.getNamespaceContext(), contentHandler);\n        } else if (\"insert\".equals(config.getOperation())) {\n            insert(pipelineContext, datasource, config.getCollection(), \"true\".equals(config.getCreateCollection()), config.getResourceId(), getInputByName(INPUT_DATA));\n        } else if (\"delete\".equals(config.getOperation())) {\n            delete(pipelineContext, datasource, config.getCollection(), \"true\".equals(config.getCreateCollection()), config.getResourceId(), config.getQuery(), config.getNamespaceContext());\n        } else if (\"update\".equals(config.getOperation())) {\n            update(pipelineContext, datasource, config.getCollection(), \"true\".equals(config.getCreateCollection()), config.getResourceId(), config.getQuery());\n        } else {\n            // TODO: Handle location info\n            throw new IllegalArgumentException(\"Invalid operation: \" + config.getOperation());\n        }\n    }","commit_id":"f91a5e560bd85d14fe2fa822977b39b6bc8a04de","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Update resources in the database.\n     *\n     * @param datasource         the processor configuration\n     * @param collectionName identifies the collection in which resources are updated\n     * @param resourceId     optional resource id on which the query is run\n     * @param query          the XUpdate query to run\n     */\n    protected void update(PipelineContext pipelineContext, Datasource datasource, String collectionName, boolean createCollection, String resourceId, String query) {\n        ensureDriverRegistered(pipelineContext, datasource);\n        try {\n            Collection collection = getCollection(pipelineContext, datasource, collectionName);\n            if (collection == null) {\n                if (!createCollection)\n                    throw new OXFException(\"Cannot find collection '\" + collectionName + \"'.\");\n                else\n                    collection = createCollection(pipelineContext, datasource, collectionName);\n            }\n            XUpdateQueryService xUpdateQueryService;\n            try {\n                xUpdateQueryService = (XUpdateQueryService) collection.getService(XUPDATE_SERVICE_NAME, \"1.0\");\n            } catch (XMLDBException e) {\n                if (e.errorCode == ErrorCodes.NO_SUCH_SERVICE)\n                    throw new OXFException(\"XML:DB \" + XUPDATE_SERVICE_NAME + \" does not exist.\", e);\n                else\n                    throw e;\n            }\n            if (xUpdateQueryService == null)\n                throw new OXFException(\"XML:DB \" + XUPDATE_SERVICE_NAME + \" does not exist.\");\n\n            // Udpdate either all the resources in a collection, or a specific resource\n            if (resourceId == null)\n                xUpdateQueryService.update(query);\n            else\n                xUpdateQueryService.updateResource(resourceId, query);\n        } catch (XMLDBException e) {\n            throw new OXFException(e);\n        }\n    }","id":10192,"modified_method":"/**\n     * Update resources in the database.\n     *\n     * @param pipelineContext   current context\n     * @param datasource        the processor configuration\n     * @param collectionName    identifies the collection in which resources are updated\n     * @param createCollection  if true, create collection if it doesn't exist\n     * @param resourceId        optional resource id on which the query is run\n     * @param query             the XUpdate query to run\n     */\n    protected void update(PipelineContext pipelineContext, Datasource datasource, String collectionName, boolean createCollection,\n                          String resourceId, String query) {\n        ensureDriverRegistered(pipelineContext, datasource);\n        try {\n            Collection collection = getCollection(pipelineContext, datasource, collectionName);\n            if (collection == null) {\n                if (!createCollection)\n                    throw new OXFException(\"Cannot find collection '\" + collectionName + \"'.\");\n                else\n                    collection = createCollection(pipelineContext, datasource, collectionName);\n            }\n            XUpdateQueryService xUpdateQueryService;\n            try {\n                xUpdateQueryService = (XUpdateQueryService) collection.getService(XUPDATE_SERVICE_NAME, \"1.0\");\n            } catch (XMLDBException e) {\n                if (e.errorCode == ErrorCodes.NO_SUCH_SERVICE)\n                    throw new OXFException(\"XML:DB \" + XUPDATE_SERVICE_NAME + \" does not exist.\", e);\n                else\n                    throw e;\n            }\n            if (xUpdateQueryService == null)\n                throw new OXFException(\"XML:DB \" + XUPDATE_SERVICE_NAME + \" does not exist.\");\n\n            // Update either all the resources in a collection, or a specific resource\n            if (resourceId == null)\n                xUpdateQueryService.update(query);\n            else\n                xUpdateQueryService.updateResource(resourceId, query);\n        } catch (XMLDBException e) {\n            throw new OXFException(e);\n        }\n    }","commit_id":"f91a5e560bd85d14fe2fa822977b39b6bc8a04de","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private boolean isSerializeXML11() {\n        return getPropertySet().getBoolean(\"serialize-xml-11\", false).booleanValue();\n    }","id":10193,"modified_method":"private boolean isSerializeXML11() {\n        return getPropertySet().getBoolean(\"serialize-xml-11\", false);\n    }","commit_id":"f91a5e560bd85d14fe2fa822977b39b6bc8a04de","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Delete resources from the database.\n     *\n     * @param datasource         the processor configuration\n     * @param collectionName identifies the collection in which resources are searched\n     * @param resourceId     optional resource id on which the query is run\n     * @param query          selects resources in the collection that must be deleted\n     */\n    protected void delete(PipelineContext pipelineContext, Datasource datasource, String collectionName, boolean createCollection, String resourceId, String query, Map namespaceContext) {\n        ensureDriverRegistered(pipelineContext, datasource);\n        try {\n            // Execute query\n            ResourceSet result = executeQuery(pipelineContext, datasource, collectionName, createCollection, resourceId, query, namespaceContext);\n\n            // Delete resources based on query result\n            for (ResourceIterator i = result.getIterator(); i.hasMoreResources();) {\n                Resource resource = i.nextResource();\n                resource.getParentCollection().removeResource(resource);\n            }\n        } catch (XMLDBException e) {\n            throw new OXFException(e);\n        }\n    }","id":10194,"modified_method":"/**\n     * Delete resources from the database.\n     *\n     * @param pipelineContext   current context\n     * @param datasource        the processor configuration\n     * @param collectionName    identifies the collection in which resources are searched\n     * @param createCollection  if true, create collection if it doesn't exist\n     * @param resourceId        optional resource id on which the query is run\n     * @param query             selects resources in the collection that must be deleted\n     * @param namespaceContext  namespace mappings\n     */\n    protected void delete(PipelineContext pipelineContext, Datasource datasource, String collectionName, boolean createCollection,\n                          String resourceId, String query, Map<String, String> namespaceContext) {\n        ensureDriverRegistered(pipelineContext, datasource);\n        try {\n            // Execute query\n            final ResourceSet result = executeQuery(pipelineContext, datasource, collectionName, createCollection, resourceId, query, namespaceContext);\n\n            if (result.getSize() > 0) {\n                // Delete resources\n\n                // NOTE: As of 2009-10-27, with eXist 1.2.5, the following doesn't work:\n                //\n                // resource.getParentCollection().removeResource(resource)\n                //\n                // So we implement a workaround: we go up to the resource from the root collection.\n\n                final Collection rootCollection = getCollection(pipelineContext, datasource, ROOT_COLLECTION_PATH);\n                for (final ResourceIterator i = result.getIterator(); i.hasMoreResources();) {\n                    final Resource resource = i.nextResource();\n\n                    Collection parentCollection;\n                    {\n                        parentCollection = rootCollection;\n                        final String[] subCollections = StringUtils.split(resource.getParentCollection().getName().substring(ROOT_COLLECTION_PATH.length()), '/');\n                        for (final String subCollection: subCollections) {\n                            parentCollection = parentCollection.getChildCollection(subCollection);\n                        }\n                    }\n\n                    parentCollection.removeResource(resource);\n                }\n            }\n        } catch (XMLDBException e) {\n            throw new OXFException(e);\n        }\n    }","commit_id":"f91a5e560bd85d14fe2fa822977b39b6bc8a04de","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Insert a resource in a collection.\n     *\n     * @param pipelineContext pipeline context\n     * @param datasource      the processor configuration\n     * @param collectionName  identifies the collection in which to insert the resource\n     * @param input           processor input containing the XML resource to insert\n     */\n    protected void insert(PipelineContext pipelineContext, Datasource datasource, String collectionName, boolean createCollection, String resourceId, ProcessorInput input) {\n        ensureDriverRegistered(pipelineContext, datasource);\n        try {\n            Collection collection = getCollection(pipelineContext, datasource, collectionName);\n            if (collection == null) {\n                if (!createCollection)\n                    throw new OXFException(\"Cannot find collection '\" + collectionName + \"'.\");\n                else\n                    collection = createCollection(pipelineContext, datasource, collectionName);\n            }\n            // Create new XMLResource\n            XMLResource xmlResource = (XMLResource) collection.createResource(resourceId, \"XMLResource\");\n\n            // Write to the resource\n            ContentHandler contentHandler = xmlResource.setContentAsSAX();\n            readInputAsSAX(pipelineContext, input, new NamespaceCleanupContentHandler(contentHandler, isSerializeXML11()));\n\n            // Store resource\n            collection.storeResource(xmlResource);\n        } catch (XMLDBException e) {\n            throw new OXFException(e);\n        }\n    }","id":10195,"modified_method":"/**\n     * Insert a resource in a collection.\n     *\n     * @param pipelineContext   current context\n     * @param datasource        the processor configuration\n     * @param collectionName    identifies the collection in which to insert the resource\n     * @param createCollection  if true, create collection if it doesn't exist\n     * @param resourceId        id of the new resource\n     * @param input             processor input containing the XML resource to insert\n     */\n    protected void insert(PipelineContext pipelineContext, Datasource datasource, String collectionName, boolean createCollection,\n                          String resourceId, ProcessorInput input) {\n        ensureDriverRegistered(pipelineContext, datasource);\n        try {\n            Collection collection = getCollection(pipelineContext, datasource, collectionName);\n            if (collection == null) {\n                if (!createCollection)\n                    throw new OXFException(\"Cannot find collection '\" + collectionName + \"'.\");\n                else\n                    collection = createCollection(pipelineContext, datasource, collectionName);\n            }\n            // Create new XMLResource\n            XMLResource xmlResource = (XMLResource) collection.createResource(resourceId, \"XMLResource\");\n\n            // Write to the resource\n            ContentHandler contentHandler = xmlResource.setContentAsSAX();\n            readInputAsSAX(pipelineContext, input, new NamespaceCleanupContentHandler(contentHandler, isSerializeXML11()));\n\n            // Store resource\n            collection.storeResource(xmlResource);\n        } catch (XMLDBException e) {\n            throw new OXFException(e);\n        }\n    }","commit_id":"f91a5e560bd85d14fe2fa822977b39b6bc8a04de","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private Config readConfig(Document configDocument) {\n        Config config = new Config();\n\n        Element rootElement = configDocument.getRootElement();\n        config.setOperation(rootElement.getName());\n        config.setCollection(rootElement.attributeValue(\"collection\"));\n        config.setCreateCollection(rootElement.attributeValue(\"create-collection\"));\n        config.setResourceId(rootElement.attributeValue(\"resource-id\"));\n\n        config.setQuery(Dom4jUtils.objectToString(XPathUtils.selectObjectValue(configDocument, \"/*/text() | /*/*\")));\n\n        final Map namespaceContext = Dom4jUtils.getNamespaceContext(configDocument.getRootElement());\n        // Not sure why 1) xml needs to be in there and 2) why eXist balks on it, but we remove it here for eXist\n        namespaceContext.remove(XMLConstants.XML_PREFIX);\n        config.setNamespaceContext(namespaceContext);\n\n        return config;\n    }","id":10196,"modified_method":"private Config readConfig(Document configDocument) {\n        Config config = new Config();\n\n        Element rootElement = configDocument.getRootElement();\n        config.setOperation(rootElement.getName());\n        config.setCollection(rootElement.attributeValue(\"collection\"));\n        config.setCreateCollection(rootElement.attributeValue(\"create-collection\"));\n        config.setResourceId(rootElement.attributeValue(\"resource-id\"));\n\n        config.setQuery(Dom4jUtils.objectToString(XPathUtils.selectObjectValue(configDocument, \"/*/text() | /*/*\")));\n\n        final Map<String, String> namespaceContext = Dom4jUtils.getNamespaceContext(configDocument.getRootElement());\n        // Not sure why 1) xml needs to be in there and 2) why eXist balks on it, but we remove it here for eXist\n        namespaceContext.remove(XMLConstants.XML_PREFIX);\n        config.setNamespaceContext(namespaceContext);\n\n        return config;\n    }","commit_id":"f91a5e560bd85d14fe2fa822977b39b6bc8a04de","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Get a resource connection as a <code>URLConnection<\/code> to retrieve a script\n     * from the <code>ResourceConnector<\/code>.\n     *\n     * @param resourceName name of the resource to be retrieved\n     * @return a URLConnection to the resource\n     * @throws ResourceException\n     */\n    public URLConnection getResourceConnection(String resourceName) throws ResourceException {\n        // Get the URLConnection\n        URLConnection groovyScriptConn = null;\n\n        ResourceException se = null;\n        for (int i = 0; i < roots.length; i++) {\n            URL scriptURL = null;\n            try {\n                scriptURL = new URL(roots[i], resourceName);\n                groovyScriptConn = scriptURL.openConnection();\n\n                // Make sure we can open it, if we can't it doesn't exist.\n                // Could be very slow if there are any non-file:// URLs in there\n                groovyScriptConn.getInputStream();\n\n                break; // Now this is a bit unusual\n\n            } catch (MalformedURLException e) {\n                String message = \"Malformed URL: \" + roots[i] + \", \" + resourceName;\n                if (se == null) {\n                    se = new ResourceException(message);\n                } else {\n                    se = new ResourceException(message, se);\n                }\n            } catch (IOException e1) {\n                String message = \"Cannot open URL: \" + scriptURL;\n                if (se == null) {\n                    se = new ResourceException(message);\n                } else {\n                    se = new ResourceException(message, se);\n                }\n            }\n        }\n\n        // If we didn't find anything, report on all the exceptions that occurred.\n        if (groovyScriptConn == null) {\n            throw se;\n        }\n\n        return groovyScriptConn;\n    }","id":10197,"modified_method":"/**\n     * Get a resource connection as a <code>URLConnection<\/code> to retrieve a script\n     * from the <code>ResourceConnector<\/code>.\n     *\n     * @param resourceName name of the resource to be retrieved\n     * @return a URLConnection to the resource\n     * @throws ResourceException\n     */\n    public URLConnection getResourceConnection(String resourceName) throws ResourceException {\n        // Get the URLConnection\n        URLConnection groovyScriptConn = null;\n        ResourceException se = null;\n        for (URL root : roots) {\n            URL scriptURL = null;\n            try {\n                scriptURL = new URL(root, resourceName);\n                groovyScriptConn = scriptURL.openConnection();\n\n                // Make sure we can open it, if we can't it doesn't exist.\n                // Could be very slow if there are any non-file:// URLs in there\n                groovyScriptConn.getInputStream();\n                break; // Now this is a bit unusual\n            } catch (MalformedURLException e) {\n                String message = \"Malformed URL: \" + root + \", \" + resourceName;\n                if (se == null) {\n                    se = new ResourceException(message);\n                } else {\n                    se = new ResourceException(message, se);\n                }\n            } catch (IOException e1) {\n                String message = \"Cannot open URL: \" + scriptURL;\n                if (se == null) {\n                    se = new ResourceException(message);\n                } else {\n                    se = new ResourceException(message, se);\n                }\n            }\n        }\n\n        // If we didn't find anything, report on all the exceptions that occurred.\n        if (groovyScriptConn == null) {\n            throw se;\n        }\n        return groovyScriptConn;\n    }","commit_id":"07f69506f3a482117827f660126b78b1cb76f185","url":"https://github.com/apache/groovy"},{"original_method":"/**\n     * Locate the class and reload it or any of its dependencies\n     *\n     * @param scriptName resource name pointing to the script\n     * @return the cache entry for scriptName\n     * @throws ResourceException if there is a problem accessing the script\n     * @throws ScriptException if there is a problem parsing the script\n     */\n    private ScriptCacheEntry updateCacheEntry(String scriptName)\n            throws ResourceException, ScriptException {\n        ScriptCacheEntry entry;\n\n        scriptName = scriptName.intern();\n        synchronized (scriptName) {\n\n            URLConnection groovyScriptConn = rc.getResourceConnection(scriptName);\n\n            // URL last modified\n            long lastModified = groovyScriptConn.getLastModified();\n            // Check the cache for the scriptName\n            entry = (ScriptCacheEntry) scriptCache.get(scriptName);\n\n            if (entry == null || entry.lastModified < lastModified || dependencyOutOfDate(entry)) {\n                // Make a new entry\n                ScriptCacheEntry currentCacheEntry = new ScriptCacheEntry();\n                currentCacheEntryHolder.set(currentCacheEntry);\n                InputStream in = null;\n\n                try {\n                    in = groovyScriptConn.getInputStream();\n                    currentCacheEntry.scriptClass = groovyLoader.parseClass(in, scriptName);\n                } catch (Exception e) {\n                    throw new ScriptException(\"Could not parse scriptName: \" + scriptName, e);\n                } finally {\n                    currentCacheEntryHolder.set(null);\n                    try {\n                        if (in != null)\n                            in.close();\n                    } catch (IOException e) {\n                        // Do nothing: Just want to make sure it is closed\n                    }\n                }\n\n                currentCacheEntry.lastModified = lastModified;\n                scriptCache.put(scriptName, currentCacheEntry);\n                entry = currentCacheEntry;\n                currentCacheEntry = null;\n            }\n        }\n        return entry;\n    }","id":10198,"modified_method":"/**\n     * Locate the class and reload it or any of its dependencies\n     *\n     * @param scriptName resource name pointing to the script\n     * @return the cache entry for scriptName\n     * @throws ResourceException if there is a problem accessing the script\n     * @throws ScriptException   if there is a problem parsing the script\n     */\n    private ScriptCacheEntry updateCacheEntry(String scriptName) throws ResourceException, ScriptException {\n        ScriptCacheEntry entry;\n\n        scriptName = scriptName.intern();\n        synchronized (scriptName) {\n\n            URLConnection scriptConn = rc.getResourceConnection(scriptName);\n\n            // URL last modified\n            long lastModified = scriptConn.getLastModified();\n            // Check the cache for the scriptName\n            entry = scriptCache.get(scriptName);\n\n            if (entry == null || entry.lastModified < lastModified || dependencyOutOfDate(entry)) {\n                ScriptCacheEntry cacheEntry = new ScriptCacheEntry();\n                currentCacheEntryHolder.set(cacheEntry);\n                cacheEntry.scriptClass = parseScript(scriptName, scriptConn);\n                cacheEntry.lastModified = lastModified;\n                scriptCache.put(scriptName, cacheEntry);\n                entry = cacheEntry;\n                cacheEntry = null;\n            } else {\n                forceClose(scriptConn);\n            }\n        }\n        return entry;\n    }","commit_id":"07f69506f3a482117827f660126b78b1cb76f185","url":"https://github.com/apache/groovy"},{"original_method":"protected Class findClass(String className) throws ClassNotFoundException {\n            String filename = className.replace('.', File.separatorChar) + \".groovy\";\n            URLConnection dependentScriptConn = null;\n            try {\n                dependentScriptConn = rc.getResourceConnection(filename);\n                ScriptCacheEntry currentCacheEntry = (ScriptCacheEntry) currentCacheEntryHolder.get();\n                if(currentCacheEntry != null)\n                    currentCacheEntry.dependencies.put(\n                            dependentScriptConn.getURL(),\n                            new Long(dependentScriptConn.getLastModified()));\n                return parseClass(dependentScriptConn.getInputStream(), filename);\n            } catch (ResourceException e1) {\n                throw new ClassNotFoundException(\"Could not read \" + className + \": \" + e1);\n            } catch (CompilationFailedException e2) {\n                throw new ClassNotFoundException(\"Syntax error in \" + className + \": \" + e2);\n            } catch (IOException e3) {\n                throw new ClassNotFoundException(\"Problem reading \" + className + \": \" + e3);\n            } finally {\n                try {\n                    if (dependentScriptConn != null && dependentScriptConn.getInputStream() != null) {\n                        dependentScriptConn.getInputStream().close();\n                    }\n                } catch (IOException e) {\n                    // IGNORE\n                }\n            }\n        }","id":10199,"modified_method":"protected Class findClass(String className) throws ClassNotFoundException {\n            String filename = className.replace('.', File.separatorChar) + \".groovy\";\n            URLConnection dependentScriptConn = null;\n            try {\n                dependentScriptConn = rc.getResourceConnection(filename);\n                ScriptCacheEntry currentCacheEntry = currentCacheEntryHolder.get();\n                if (currentCacheEntry != null) {\n                    currentCacheEntry.dependencies.put(dependentScriptConn.getURL(), dependentScriptConn.getLastModified());\n                }\n                return parseClass(dependentScriptConn.getInputStream(), filename);\n            } catch (ResourceException e1) {\n                throw new ClassNotFoundException(\"Could not read \" + className + \": \" + e1);\n            } catch (CompilationFailedException e2) {\n                throw new ClassNotFoundException(\"Syntax error in \" + className + \": \" + e2);\n            } catch (IOException e3) {\n                throw new ClassNotFoundException(\"Problem reading \" + className + \": \" + e3);\n            } finally {\n                try {\n                    if (dependentScriptConn != null && dependentScriptConn.getInputStream() != null) {\n                        dependentScriptConn.getInputStream().close();\n                    }\n                } catch (IOException e) {\n                    // IGNORE\n                }\n            }\n        }","commit_id":"07f69506f3a482117827f660126b78b1cb76f185","url":"https://github.com/apache/groovy"},{"original_method":"/**\n     * Initialize a new GroovyClassLoader with the parentClassLoader passed as a parameter.\n     * A GroovyScriptEngine should only use one GroovyClassLoader but since in version\n     * prior to 1.0-RC-01 you could set a new parentClassLoader\n     * Ultimately groovyLoader should be final and only set in the constructor\n     *\n     * @param parentClassLoader the class loader to use\n     */\n    private void initGroovyLoader(final ClassLoader parentClassLoader) {\n        if (groovyLoader == null || groovyLoader.getParent() != parentClassLoader) {\n            groovyLoader =\n                    (GroovyClassLoader) AccessController.doPrivileged(new PrivilegedAction() {\n                        public Object run() {\n                            ScriptClassLoader loader;\n                            if (parentClassLoader instanceof GroovyClassLoader)\n                                loader = new ScriptClassLoader((GroovyClassLoader)parentClassLoader);\n                            else\n                                loader = new ScriptClassLoader(parentClassLoader);\n                            return loader;\n                        }\n                    });\n        }\n    }","id":10200,"modified_method":"private void initGroovyLoader(final ClassLoader parentClassLoader) {\n        if (groovyLoader == null || groovyLoader.getParent() != parentClassLoader) {\n            groovyLoader = AccessController.doPrivileged(new PrivilegedAction<GroovyClassLoader>() {\n                public GroovyClassLoader run() {\n                    ScriptClassLoader loader;\n                    if (parentClassLoader instanceof GroovyClassLoader)\n                        loader = new ScriptClassLoader((GroovyClassLoader) parentClassLoader);\n                    else\n                        loader = new ScriptClassLoader(parentClassLoader);\n                    return loader;\n                }\n            });\n        }\n    }","commit_id":"07f69506f3a482117827f660126b78b1cb76f185","url":"https://github.com/apache/groovy"},{"original_method":"private boolean dependencyOutOfDate(ScriptCacheEntry entry) {\n        if (entry != null) {\n            for (Iterator i = entry.dependencies.keySet().iterator(); i.hasNext();) {\n                URLConnection urlc = null;\n                URL url = (URL) i.next();\n                try {\n                    urlc = url.openConnection();\n                    urlc.setDoInput(false);\n                    urlc.setDoOutput(false);\n                    long dependentLastModified = urlc.getLastModified();\n                    if (dependentLastModified > ((Long) entry.dependencies.get(url)).longValue()) {\n                        return true;\n                    }\n                } catch (IOException ioe) {\n                    return true;\n                }\n            }\n        }\n        return false;\n    }","id":10201,"modified_method":"private boolean dependencyOutOfDate(ScriptCacheEntry cacheEntry) {\n        if (cacheEntry != null) {\n            for (URL url : cacheEntry.dependencies.keySet()) {\n                URLConnection urlc = null;\n                try {\n                    urlc = url.openConnection();\n                    urlc.setDoInput(false);\n                    urlc.setDoOutput(false);\n                    long dependentLastModified = urlc.getLastModified();\n                    if (dependentLastModified > cacheEntry.dependencies.get(url)) {\n                        return true;\n                    }\n                } catch (IOException ioe) {\n                    return true;\n                } finally {\n                    forceClose(urlc);\n                }\n            }\n        }\n        return false;\n    }","commit_id":"07f69506f3a482117827f660126b78b1cb76f185","url":"https://github.com/apache/groovy"},{"original_method":"private String getCvsArguments() {\n\t\t@NonNls final StringBuffer cvsArguments = new StringBuffer();\n\t\tcvsArguments.append(\"-m \\\"\");\n\t\tcvsArguments.append(CommandUtils.getMessageNotNull(getLogMessage()));\n\t\tcvsArguments.append(\"\\\" \");\n\n\t\tif (getKeywordSubstitutionOption() != null) {\n\t\t\tcvsArguments.append(\"-k\");\n\t\t\tcvsArguments.append(getKeywordSubstitutionOption().toString());\n\t\t\tcvsArguments.append(\" \");\n\t\t}\n\t\tif (getVendorBranch() != null) {\n\t\t\tcvsArguments.append(\"-b \");\n\t\t\tcvsArguments.append(getVendorBranch());\n\t\t\tcvsArguments.append(\" \");\n\t\t}\n\t\tif (wrapperMap.size() > 0) {\n\t\t\tfinal Iterator it = wrapperMap.keySet().iterator();\n\t\t\twhile (it.hasNext()) {\n\t\t\t\tfinal SimpleStringPattern pattern = (SimpleStringPattern)it.next();\n\t\t\t\tfinal KeywordSubstitution keywordSubstitutionOptions = (KeywordSubstitution)wrapperMap.get(pattern);\n\t\t\t\tcvsArguments.append(\"-W \");\n\t\t\t\tcvsArguments.append(pattern.toString());\n\t\t\t\tcvsArguments.append(\" -k '\");\n\t\t\t\tcvsArguments.append(keywordSubstitutionOptions.toString());\n\t\t\t\tcvsArguments.append(\"' \");\n\t\t\t}\n\t\t}\n\t\treturn cvsArguments.toString();\n\t}","id":10202,"modified_method":"private String getCvsArguments() {\n\t\t@NonNls final StringBuilder cvsArguments = new StringBuilder();\n\t\tcvsArguments.append(\"-m \\\"\");\n\t\tcvsArguments.append(CommandUtils.getMessageNotNull(getLogMessage()));\n\t\tcvsArguments.append(\"\\\" \");\n\n\t\tif (getKeywordSubstitutionOption() != null) {\n\t\t\tcvsArguments.append(\"-k\");\n\t\t\tcvsArguments.append(getKeywordSubstitutionOption().toString());\n\t\t\tcvsArguments.append(\" \");\n\t\t}\n\t\tif (getVendorBranch() != null) {\n\t\t\tcvsArguments.append(\"-b \");\n\t\t\tcvsArguments.append(getVendorBranch());\n\t\t\tcvsArguments.append(\" \");\n\t\t}\n\t\tif (wrapperMap.size() > 0) {\n\t\t\tfor (final SimpleStringPattern pattern : wrapperMap.keySet()) {\n\t\t\t\tfinal KeywordSubstitution keywordSubstitutionOptions = wrapperMap.get(pattern);\n\t\t\t\tcvsArguments.append(\"-W \");\n\t\t\t\tcvsArguments.append(pattern.toString());\n\t\t\t\tcvsArguments.append(\" -k '\");\n\t\t\t\tcvsArguments.append(keywordSubstitutionOptions.toString());\n\t\t\t\tcvsArguments.append(\"' \");\n\t\t\t}\n\t\t}\n\t\treturn cvsArguments.toString();\n\t}","commit_id":"332322d6050fea5c8fe985a6e8da072eb8f9f75b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public String getCvsCommandLine() {\n\t\t@NonNls final StringBuffer cvsArguments = new StringBuffer(\"import \");\n\t\tcvsArguments.append(getCvsArguments());\n\n\t\tcvsArguments.append(' ');\n\t\tcvsArguments.append(getModule());\n\n\t\tcvsArguments.append(' ');\n\t\tcvsArguments.append(getVendorTag());\n\n\t\tcvsArguments.append(' ');\n\t\tcvsArguments.append(getReleaseTag());\n\t\treturn cvsArguments.toString();\n\t}","id":10203,"modified_method":"public String getCvsCommandLine() {\n\t\t@NonNls final StringBuilder cvsArguments = new StringBuilder(\"import \");\n\t\tcvsArguments.append(getCvsArguments());\n\n\t\tcvsArguments.append(' ');\n\t\tcvsArguments.append(getModule());\n\n\t\tcvsArguments.append(' ');\n\t\tcvsArguments.append(getVendorTag());\n\n\t\tcvsArguments.append(' ');\n\t\tcvsArguments.append(getReleaseTag());\n\t\treturn cvsArguments.toString();\n\t}","commit_id":"332322d6050fea5c8fe985a6e8da072eb8f9f75b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n\t * Adds recursively all request for files and directories in the specified\n\t * directory to the specified requestList.\n\t */\n\tprivate void addFileRequests(File directory, Requests requests, IRequestProcessor requestProcessor, IClientEnvironment clientEnvironment) throws IOException {\n\t\tfinal DirectoryObject directoryObject = clientEnvironment.getCvsFileSystem().getLocalFileSystem().getDirectoryObject(directory);\n\n\t\tfinal String relativePath = directoryObject.toUnixPath();\n\t\tString repository = getRepositoryRoot(clientEnvironment);\n\t\tif (!relativePath.equals(\".\")) {\n\t\t\trepository += '/' + relativePath;\n\t\t}\n\t\trequests.addRequest(new DirectoryRequest(relativePath, repository));\n\n\t\tfinal File[] files = directory.listFiles();\n\t\tif (files == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfinal List subdirectories = new ArrayList();\n\n\t\tfor (int i = 0; i < files.length; i++) {\n\t\t\tfinal File file = files[i];\n\n\t\t\tif (file.isDirectory()) {\n\t\t\t\tfinal DirectoryObject subDirObject = clientEnvironment.getCvsFileSystem().getLocalFileSystem().getDirectoryObject(file);\n\n\t\t\t\tif (clientEnvironment.getIgnoreFileFilter().shouldBeIgnored(subDirObject, clientEnvironment.getCvsFileSystem())) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tsubdirectories.add(file);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfinal FileObject fileObject = clientEnvironment.getCvsFileSystem().getLocalFileSystem().getFileObject(file);\n\n\t\t\t\tif (clientEnvironment.getIgnoreFileFilter().shouldBeIgnored(fileObject, clientEnvironment.getCvsFileSystem())) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfinal KeywordSubstitution keywordSubstMode = getKeywordSubstMode(file.getName());\n\t\t\t\tfinal boolean writable = clientEnvironment.getLocalFileReader().isWritable(fileObject, clientEnvironment.getCvsFileSystem());\n                                if (keywordSubstMode != null) {\n                                        requests.addKoptRequest(keywordSubstMode);\n                                }\n\t\t\t\trequests.addModifiedRequest(fileObject, keywordSubstMode == KeywordSubstitution.BINARY, writable);\n\t\t\t}\n\t\t}\n\n\t\tfor (Iterator it = subdirectories.iterator(); it.hasNext();) {\n\t\t\tfinal File subdirectory = (File)it.next();\n\t\t\taddFileRequests(subdirectory, requests, requestProcessor, clientEnvironment);\n\t\t}\n\t}","id":10204,"modified_method":"/**\n\t * Adds recursively all request for files and directories in the specified\n\t * directory to the specified requestList.\n\t */\n\tprivate void addFileRequests(File directory, Requests requests, IRequestProcessor requestProcessor, IClientEnvironment clientEnvironment) throws IOException {\n\t\tfinal DirectoryObject directoryObject = clientEnvironment.getCvsFileSystem().getLocalFileSystem().getDirectoryObject(directory);\n\n\t\tfinal String relativePath = directoryObject.toUnixPath();\n\t\tString repository = getRepositoryRoot(clientEnvironment);\n\t\tif (!relativePath.equals(\".\")) {\n\t\t\trepository += '/' + relativePath;\n\t\t}\n\t\trequests.addRequest(new DirectoryRequest(relativePath, repository));\n\n\t\tfinal File[] files = directory.listFiles();\n\t\tif (files == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tfinal List<File> subdirectories = new ArrayList();\n\n\t\tfor (final File file : files) {\n\t\t\tif (file.isDirectory()) {\n\t\t\t\tfinal DirectoryObject subDirObject = clientEnvironment.getCvsFileSystem().getLocalFileSystem().getDirectoryObject(file);\n\n\t\t\t\tif (clientEnvironment.getIgnoreFileFilter().shouldBeIgnored(subDirObject, clientEnvironment.getCvsFileSystem())) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tsubdirectories.add(file);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tfinal FileObject fileObject = clientEnvironment.getCvsFileSystem().getLocalFileSystem().getFileObject(file);\n\n\t\t\t\tif (clientEnvironment.getIgnoreFileFilter().shouldBeIgnored(fileObject, clientEnvironment.getCvsFileSystem())) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tfinal KeywordSubstitution keywordSubstMode = getKeywordSubstMode(file.getName());\n\t\t\t\tfinal boolean writable = clientEnvironment.getLocalFileReader().isWritable(fileObject, clientEnvironment.getCvsFileSystem());\n                                if (keywordSubstMode != null) {\n                                        requests.addKoptRequest(keywordSubstMode);\n                                }\n\t\t\t\trequests.addModifiedRequest(fileObject, keywordSubstMode == KeywordSubstitution.BINARY, writable);\n\t\t\t}\n\t\t}\n\n\t\tfor (final File subdirectory : subdirectories) {\n\t\t\taddFileRequests(subdirectory, requests, requestProcessor, clientEnvironment);\n\t\t}\n\t}","commit_id":"332322d6050fea5c8fe985a6e8da072eb8f9f75b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n\t * Returns true, if the file for the specified filename should be treated as\n\t * a binary file.\n\t *\n\t * The information comes from the wrapper map and the set keywordsubstitution.\n\t */\n\tprivate KeywordSubstitution getKeywordSubstMode(String fileName) {\n\t\tKeywordSubstitution keywordSubstMode = getKeywordSubstitutionOption();\n\n\t\tfor (Iterator it = wrapperMap.keySet().iterator(); it.hasNext();) {\n\t\t\tfinal SimpleStringPattern pattern = (SimpleStringPattern)it.next();\n\t\t\tif (pattern.doesMatch(fileName)) {\n\t\t\t\tkeywordSubstMode = (KeywordSubstitution)wrapperMap.get(pattern);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn keywordSubstMode;\n\t}","id":10205,"modified_method":"/**\n\t * Returns true, if the file for the specified filename should be treated as\n\t * a binary file.\n\t *\n\t * The information comes from the wrapper map and the set keywordsubstitution.\n\t */\n\tprivate KeywordSubstitution getKeywordSubstMode(String fileName) {\n\t\tKeywordSubstitution keywordSubstMode = getKeywordSubstitutionOption();\n\n\t\tfor (final SimpleStringPattern pattern : wrapperMap.keySet()) {\n\t\t\tif (pattern.doesMatch(fileName)) {\n\t\t\t\tkeywordSubstMode = wrapperMap.get(pattern);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn keywordSubstMode;\n\t}","commit_id":"332322d6050fea5c8fe985a6e8da072eb8f9f75b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected Command createCommand(CvsRootProvider root, CvsExecutionEnvironment cvsExecutionEnvironment) {\n    ImportCommand result = new ImportCommand();\n    myDetails.prepareCommand(result);\n    return result;\n  }","id":10206,"modified_method":"protected Command createCommand(CvsRootProvider root, CvsExecutionEnvironment cvsExecutionEnvironment) {\n    final ImportCommand result = new ImportCommand();\n    myDetails.prepareCommand(result);\n    return result;\n  }","commit_id":"332322d6050fea5c8fe985a6e8da072eb8f9f75b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static ImportOperation createTestInstance(File sourceLocation, CvsEnvironment env) {\n    ImportDetails details = new ImportDetails(sourceLocation, com.intellij.CvsBundle.message(\"import.defaults.vendor\"),\n                                              com.intellij.CvsBundle.message(\"import.defaults.release_tag\"),\n                                              com.intellij.CvsBundle.message(\"import.defaults.log.message\"),\n                                              sourceLocation.getName(), env, new ArrayList(), new IIgnoreFileFilter(){\n                                                public boolean shouldBeIgnored(AbstractFileObject abstractFileObject, ICvsFileSystem cvsFileSystem) {\n                                                  return false;\n                                                }\n                                              });\n    return new ImportOperation(details);\n  }","id":10207,"modified_method":"public static ImportOperation createTestInstance(File sourceLocation, CvsEnvironment env) {\n    final ImportDetails details = new ImportDetails(sourceLocation, CvsBundle.message(\"import.defaults.vendor\"),\n                                                    CvsBundle.message(\"import.defaults.release_tag\"),\n                                                    CvsBundle.message(\"import.defaults.log.message\"),\n                                                    sourceLocation.getName(), env, new ArrayList(),\n                                                    new IIgnoreFileFilter(){\n                                                      public boolean shouldBeIgnored(AbstractFileObject abstractFileObject, ICvsFileSystem cvsFileSystem) {\n                                                        return false;\n                                                      }\n                                                    });\n    return new ImportOperation(details);\n  }","commit_id":"332322d6050fea5c8fe985a6e8da072eb8f9f75b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public Map getAuthenticationInfo(String realm, String kind) {\n    synchronized(this) {\n        if (myAuthenticationInfo != null) {\n            Map group = (Map) myAuthenticationInfo.get(kind);\n            if (group != null) {\n                Map info = (Map) group.get(realm);\n                if (info != null) {\n                  return decodeData(info);\n                }\n            }\n        }\n    }\n    return null;\n  }","id":10208,"modified_method":"public Map<String, String> getAuthenticationInfo(String realm, String kind) {\n    synchronized(this) {\n        if (myAuthenticationInfo != null) {\n            Map<String, Map<String, String>> group = myAuthenticationInfo.get(kind);\n            if (group != null) {\n                Map<String, String> info = group.get(realm);\n                if (info != null) {\n                  return decodeData(info);\n                }\n            }\n        }\n    }\n    return null;\n  }","commit_id":"8c449f1e5fb2222b8e87b4a3e05576ac9f536286","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static Map encodeData(Map source) {\n      Map dst = new HashMap();\n      for (Iterator keys = source.keySet().iterator(); keys.hasNext();) {\n          String key = (String) keys.next();\n          String value = (String) source.get(key);\n          if (key != null && value != null) {\n              dst.put(key, SVNBase64.byteArrayToBase64(value.getBytes()));\n          }\n      }\n      return dst;\n  }","id":10209,"modified_method":"private static Map<String, String> encodeData(Map<String, String> source) {\n    Map<String, String> dst = new HashMap<String, String>();\n    for (final String key : source.keySet()) {\n      String value = source.get(key);\n      if (key != null && value != null) {\n        dst.put(key, SVNBase64.byteArrayToBase64(value.getBytes()));\n      }\n    }\n    return dst;\n  }","commit_id":"8c449f1e5fb2222b8e87b4a3e05576ac9f536286","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void writeExternal(Element element) throws WriteExternalException {\n      if (myAuthenticationInfo == null) {\n          return;\n      }\n      Document document = new Document();\n      Element authElement = new Element(\"kinds\");\n      for (Iterator groups = myAuthenticationInfo.keySet().iterator(); groups.hasNext();) {\n          String kind = (String) groups.next();\n          Element groupElement = new Element(kind);\n          Map groupsMap = (Map) myAuthenticationInfo.get(kind);\n\n          for (Iterator realms = groupsMap.keySet().iterator(); realms.hasNext();) {\n            String realm = (String) realms.next();\n            Element realmElement = new Element(\"realm\");\n            realmElement.setAttribute(\"name\", SVNBase64.byteArrayToBase64(realm.getBytes()));\n            Map info = (Map) groupsMap.get(realm);\n            for (Iterator keys = info.keySet().iterator(); keys.hasNext();) {\n                String key = (String) keys.next();\n                String value = (String) info.get(key);\n                realmElement.setAttribute(key, value);\n            }\n            groupElement.addContent(realmElement);\n          }\n          authElement.addContent(groupElement);\n      }\n      document.setRootElement(new Element(\"svn4idea\"));\n      document.getRootElement().addContent(authElement);\n\n      File file = getCredentialsFile();\n      file.getParentFile().mkdirs();\n      try {\n          JDOMUtil.writeDocument(document, file, System.getProperty(\"line.separator\"));\n      } catch (IOException e) {\n          //\n      }\n  }","id":10210,"modified_method":"public void writeExternal(Element element) throws WriteExternalException {\n      if (myAuthenticationInfo == null) {\n          return;\n      }\n      Document document = new Document();\n      Element authElement = new Element(\"kinds\");\n      for (Iterator<String> groups = myAuthenticationInfo.keySet().iterator(); groups.hasNext();) {\n          String kind = groups.next();\n          Element groupElement = new Element(kind);\n          Map<String, Map<String, String>> groupsMap = myAuthenticationInfo.get(kind);\n\n          for (Iterator<String> realms = groupsMap.keySet().iterator(); realms.hasNext();) {\n            String realm = realms.next();\n            Element realmElement = new Element(\"realm\");\n            realmElement.setAttribute(\"name\", SVNBase64.byteArrayToBase64(realm.getBytes()));\n            Map<String, String> info = groupsMap.get(realm);\n            for (Iterator<String> keys = info.keySet().iterator(); keys.hasNext();) {\n                String key = keys.next();\n                String value = info.get(key);\n                realmElement.setAttribute(key, value);\n            }\n            groupElement.addContent(realmElement);\n          }\n          authElement.addContent(groupElement);\n      }\n      document.setRootElement(new Element(\"svn4idea\"));\n      document.getRootElement().addContent(authElement);\n\n      File file = getCredentialsFile();\n      file.getParentFile().mkdirs();\n      try {\n          JDOMUtil.writeDocument(document, file, System.getProperty(\"line.separator\"));\n      } catch (IOException e) {\n          //\n      }\n  }","commit_id":"8c449f1e5fb2222b8e87b4a3e05576ac9f536286","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void saveAuthenticationInfo(String realm, String kind, Map info) {\n      synchronized(this) {\n        if (info == null) {\n            return;\n        }\n        realm = realm == null ? \"default\" : realm;\n        if (myAuthenticationInfo == null) {\n            myAuthenticationInfo = new HashMap();\n        }\n        Map group = (Map) myAuthenticationInfo.get(kind);\n        if (group == null) {\n          group = new HashMap();\n          myAuthenticationInfo.put(kind, group);\n        }\n        group.put(realm, encodeData(info));\n      }\n  }","id":10211,"modified_method":"public void saveAuthenticationInfo(String realm, String kind, Map<String, String> info) {\n      synchronized(this) {\n        if (info == null) {\n            return;\n        }\n        realm = realm == null ? \"default\" : realm;\n        if (myAuthenticationInfo == null) {\n            myAuthenticationInfo = new HashMap<String, Map<String, Map<String, String>>>();\n        }\n        Map<String, Map<String, String>> group = myAuthenticationInfo.get(kind);\n        if (group == null) {\n          group = new HashMap<String, Map<String, String>>();\n          myAuthenticationInfo.put(kind, group);\n        }\n        group.put(realm, encodeData(info));\n      }\n  }","commit_id":"8c449f1e5fb2222b8e87b4a3e05576ac9f536286","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void readExternal(Element element) throws InvalidDataException {\n\n      File file = getCredentialsFile();\n      if (!file.exists() || !file.canRead() || !file.isFile()) {\n          return;\n      }\n      Document document;\n      try {\n          document = JDOMUtil.loadDocument(file);\n      } catch (JDOMException e) {\n          return;\n      } catch (IOException e) {\n          return;\n      }\n      if (document == null || document.getRootElement() == null) {\n          return;\n      }\n      Element authElement = document.getRootElement().getChild(\"kinds\");\n\n      if (authElement == null) {\n          return;\n      }\n      myAuthenticationInfo = new HashMap();\n      List groupsList = authElement.getChildren();\n      for (Iterator groups = groupsList.iterator(); groups.hasNext();) {\n        Element groupElement = (Element) groups.next();\n        String kind = groupElement.getName();\n        if (\"realm\".equals(kind)) {\n          // old version.\n          continue;\n        }\n        Map groupMap = new HashMap();\n        myAuthenticationInfo.put(kind, groupMap);\n        List realmsList = groupElement.getChildren(\"realm\");\n        for (Iterator realms = realmsList.iterator(); realms.hasNext();) {\n            Element realmElement = (Element) realms.next();\n            String realmName = realmElement.getAttributeValue(\"name\");\n            StringBuffer sb = new StringBuffer(realmName);\n\n            byte[] buffer = new byte[sb.length()];\n            int length = SVNBase64.base64ToByteArray(sb, buffer);\n            realmName = new String(buffer, 0, length);\n            Map infoMap = new HashMap();\n            List attrsList = realmElement.getAttributes();\n            for (Iterator attrs = attrsList.iterator(); attrs.hasNext();) {\n                Attribute attr = (Attribute) attrs.next();\n                if (\"name\".equals(attr.getName())) {\n                    continue;\n                }\n                String key = attr.getName();\n                String value = attr.getValue();\n                infoMap.put(key, value);\n            }\n            groupMap.put(realmName, infoMap);\n        }\n      }\n  }","id":10212,"modified_method":"public void readExternal(Element element) throws InvalidDataException {\n\n      File file = getCredentialsFile();\n      if (!file.exists() || !file.canRead() || !file.isFile()) {\n          return;\n      }\n      Document document;\n      try {\n          document = JDOMUtil.loadDocument(file);\n      } catch (JDOMException e) {\n          return;\n      } catch (IOException e) {\n          return;\n      }\n      if (document == null || document.getRootElement() == null) {\n          return;\n      }\n      Element authElement = document.getRootElement().getChild(\"kinds\");\n\n      if (authElement == null) {\n          return;\n      }\n      myAuthenticationInfo = new HashMap<String, Map<String, Map<String, String>>>();\n      List groupsList = authElement.getChildren();\n      for (Iterator groups = groupsList.iterator(); groups.hasNext();) {\n        Element groupElement = (Element) groups.next();\n        String kind = groupElement.getName();\n        if (\"realm\".equals(kind)) {\n          // old version.\n          continue;\n        }\n        Map<String, Map<String, String>> groupMap = new HashMap<String, Map<String, String>>();\n        myAuthenticationInfo.put(kind, groupMap);\n        List realmsList = groupElement.getChildren(\"realm\");\n        for (Iterator realms = realmsList.iterator(); realms.hasNext();) {\n            Element realmElement = (Element) realms.next();\n            String realmName = realmElement.getAttributeValue(\"name\");\n            StringBuffer sb = new StringBuffer(realmName);\n\n            byte[] buffer = new byte[sb.length()];\n            int length = SVNBase64.base64ToByteArray(sb, buffer);\n            realmName = new String(buffer, 0, length);\n            Map<String, String> infoMap = new HashMap<String, String>();\n            List attrsList = realmElement.getAttributes();\n            for (Iterator attrs = attrsList.iterator(); attrs.hasNext();) {\n                Attribute attr = (Attribute) attrs.next();\n                if (\"name\".equals(attr.getName())) {\n                    continue;\n                }\n                String key = attr.getName();\n                String value = attr.getValue();\n                infoMap.put(key, value);\n            }\n            groupMap.put(realmName, infoMap);\n        }\n      }\n  }","commit_id":"8c449f1e5fb2222b8e87b4a3e05576ac9f536286","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static Map decodeData(Map source) {\n      Map dst = new HashMap();\n      for (Iterator keys = source.keySet().iterator(); keys.hasNext();) {\n          String key = (String) keys.next();\n          String value = (String) source.get(key);\n          if (key != null && value != null) {\n            StringBuffer sb = new StringBuffer(value);\n            byte[] buffer = new byte[sb.length()];\n            int length = SVNBase64.base64ToByteArray(sb, buffer);\n            dst.put(key, new String(buffer, 0, length));\n          }\n      }\n      return dst;\n  }","id":10213,"modified_method":"private static Map<String, String> decodeData(Map<String, String> source) {\n    Map<String, String> dst = new HashMap<String, String>();\n    for (String key : source.keySet()) {\n      String value = source.get(key);\n      if (key != null && value != null) {\n        StringBuffer sb = new StringBuffer(value);\n        byte[] buffer = new byte[sb.length()];\n        int length = SVNBase64.base64ToByteArray(sb, buffer);\n        dst.put(key, new String(buffer, 0, length));\n      }\n    }\n    return dst;\n  }","commit_id":"8c449f1e5fb2222b8e87b4a3e05576ac9f536286","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void saveAuthentication(SVNAuthentication auth, String kind, String realm) {\n            if (auth.getUserName() == null || \"\".equals(auth.getUserName())) {\n                return;\n            }\n            Map info = new HashMap();\n            info.put(\"kind\", kind);\n            // convert info to SVNAuthentication.\n            info.put(\"username\", auth.getUserName());\n            if (auth instanceof SVNPasswordAuthentication) {\n                info.put(\"password\", ((SVNPasswordAuthentication) auth).getPassword());\n            } else if (auth instanceof SVNSSHAuthentication) {\n                SVNSSHAuthentication sshAuth = (SVNSSHAuthentication) auth;\n                if (sshAuth.getPrivateKeyFile() != null) {\n                    info.put(\"key\", sshAuth.getPrivateKeyFile().getAbsolutePath());\n                    if (sshAuth.getPassphrase() != null) {\n                        info.put(\"passphrase\", sshAuth.getPassphrase());\n                    }\n                } else if (sshAuth.getPassword() != null) {\n                    info.put(\"password\", sshAuth.getPassword());\n                }\n                if (sshAuth.getPortNumber() >= 0) {\n                    info.put(\"port\", Integer.toString(sshAuth.getPortNumber()));\n                }\n            }\n            SvnApplicationSettings.getInstance().saveAuthenticationInfo(realm, kind, info);\n        }","id":10214,"modified_method":"public void saveAuthentication(SVNAuthentication auth, String kind, String realm) {\n            if (auth.getUserName() == null || \"\".equals(auth.getUserName())) {\n                return;\n            }\n            Map<String, String> info = new HashMap<String, String>();\n            info.put(\"kind\", kind);\n            // convert info to SVNAuthentication.\n            info.put(\"username\", auth.getUserName());\n            if (auth instanceof SVNPasswordAuthentication) {\n                info.put(\"password\", ((SVNPasswordAuthentication) auth).getPassword());\n            } else if (auth instanceof SVNSSHAuthentication) {\n                SVNSSHAuthentication sshAuth = (SVNSSHAuthentication) auth;\n                if (sshAuth.getPrivateKeyFile() != null) {\n                    info.put(\"key\", sshAuth.getPrivateKeyFile().getAbsolutePath());\n                    if (sshAuth.getPassphrase() != null) {\n                        info.put(\"passphrase\", sshAuth.getPassphrase());\n                    }\n                } else if (sshAuth.getPassword() != null) {\n                    info.put(\"password\", sshAuth.getPassword());\n                }\n                if (sshAuth.getPortNumber() >= 0) {\n                    info.put(\"port\", Integer.toString(sshAuth.getPortNumber()));\n                }\n            }\n            SvnApplicationSettings.getInstance().saveAuthenticationInfo(realm, kind, info);\n        }","commit_id":"8c449f1e5fb2222b8e87b4a3e05576ac9f536286","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private JComponent createToolbar() {\n    DefaultActionGroup group = new DefaultActionGroup();\n    group.add(new AddPropertyAction());\n    group.add(new EditPropertyAction());\n    group.add(new DeletePropertyAction());\n    group.addSeparator();\n    group.add(new SetKeywordsAction());\n    group.addSeparator();\n    group.add(new FollowSelectionAction());\n    group.add(new RefreshAction());\n    group.add(new CloseAction());\n    return ActionManager.getInstance().createActionToolbar(\"\", group, false).getComponent();\n  }","id":10215,"modified_method":"private JComponent createToolbar() {\n    DefaultActionGroup group = new DefaultActionGroup();\n    group.add(new AddPropertyAction());\n    group.add(new EditPropertyAction());\n    group.add(new DeletePropertyAction());\n    group.addSeparator();\n    group.add(new SetKeywordsAction());\n    group.addSeparator();\n    group.add(new FollowSelectionAction());\n    group.add(myRefreshAction);\n    group.add(myCloseAction);\n    return ActionManager.getInstance().createActionToolbar(\"\", group, false).getComponent();\n  }","commit_id":"1703cc6e52300a64f418938680d0bab0d1f0dc0a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private JPopupMenu createPopup() {\n    DefaultActionGroup group = new DefaultActionGroup();\n    group.add(new AddPropertyAction());\n    group.add(new EditPropertyAction());\n    group.add(new DeletePropertyAction());\n    group.addSeparator();\n    group.add(new SetKeywordsAction());\n    group.addSeparator();\n    group.add(new RefreshAction());\n    return ActionManager.getInstance().createActionPopupMenu(CONTEXT_ID, group).getComponent();\n  }","id":10216,"modified_method":"private DefaultActionGroup createPopup() {\n    DefaultActionGroup group = new DefaultActionGroup();\n    group.add(new AddPropertyAction());\n    group.add(new EditPropertyAction());\n    group.add(new DeletePropertyAction());\n    group.addSeparator();\n    group.add(new SetKeywordsAction());\n    group.addSeparator();\n    group.add(myRefreshAction);\n    return group;\n  }","commit_id":"1703cc6e52300a64f418938680d0bab0d1f0dc0a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void actionPerformed(AnActionEvent e) {\n      Project p = (Project) e.getDataContext().getData(DataConstants.PROJECT);\n      ToolWindowManager.getInstance(p).unregisterToolWindow(ID);\n    }","id":10217,"modified_method":"public void actionPerformed(AnActionEvent e) {\n      Project p = e.getData(DataKeys.PROJECT);\n      ToolWindowManager.getInstance(p).unregisterToolWindow(ID);\n    }","commit_id":"1703cc6e52300a64f418938680d0bab0d1f0dc0a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private Object[][] createTableModel(Map model) {\n    Object[][] result = new Object[model.size()][2];\n    int index = 0;\n    for (Iterator names = model.keySet().iterator(); names.hasNext();) {\n      String name = (String) names.next();\n      String value = (String) model.get(name);\n      if (value == null) {\n        value = \"\";\n      }\n      result[index][0] = name;\n      result[index][1] = value;\n      index++;\n    }\n    return result;\n  }","id":10218,"modified_method":"private static Object[][] createTableModel(Map<String, String> model) {\n    Object[][] result = new Object[model.size()][2];\n    int index = 0;\n    for (final String name : model.keySet()) {\n      String value = model.get(name);\n      if (value == null) {\n        value = \"\";\n      }\n      result[index][0] = name;\n      result[index][1] = value;\n      index++;\n    }\n    return result;\n  }","commit_id":"1703cc6e52300a64f418938680d0bab0d1f0dc0a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void setFile(SvnVcs vcs, File file) {\n    final Map props = new TreeMap();\n    boolean firstTime = myFile == null;\n    if (file != null) {\n      myFile = file;\n      myVcs = vcs;\n      try {\n        vcs.createWCClient().doGetProperty(file, null, SVNRevision.UNDEFINED, SVNRevision.WORKING, false, new ISVNPropertyHandler() {\n          public void handleProperty(File path, SVNPropertyData property) throws SVNException {\n            props.put(property.getName(), property.getValue());\n          }\n          public void handleProperty(SVNURL url, SVNPropertyData property) throws SVNException {\n          }\n          public void handleProperty(long revision, SVNPropertyData property) throws SVNException {\n          }\n        });\n      } catch (SVNException e) {\n        props.clear();\n      }\n    }\n    DefaultTableModel model = (DefaultTableModel) myTable.getModel();\n    model.setDataVector(createTableModel(props), new Object[] {\"Name\", \"Value\"});\n\n    myTable.getColumnModel().setColumnSelectionAllowed(false);\n    myTable.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer() {\n      protected void setValue(Object value) {\n        if (value != null) {\n          if (value.toString().indexOf('\\r') >= 0) {\n            value = value.toString().substring(0, value.toString().indexOf('\\r')) + \" [...]\";\n          }\n          if (value.toString().indexOf('\\n') >= 0) {\n            value = value.toString().substring(0, value.toString().indexOf('\\n')) + \" [...]\";\n          }\n        }\n        super.setValue(value);\n      }\n    });\n    if (firstTime) {\n      mySplitPane.setDividerLocation(.5);\n    }\n    if (myTable.getRowCount() > 0) {\n      myTable.getSelectionModel().setSelectionInterval(0, 0);\n    }\n  }","id":10219,"modified_method":"public void setFile(SvnVcs vcs, File file) {\n    final Map<String, String> props = new TreeMap<String, String>();\n    boolean firstTime = myFile == null;\n    if (file != null) {\n      myFile = file;\n      myVcs = vcs;\n      try {\n        vcs.createWCClient().doGetProperty(file, null, SVNRevision.UNDEFINED, SVNRevision.WORKING, false, new ISVNPropertyHandler() {\n          public void handleProperty(File path, SVNPropertyData property) throws SVNException {\n            props.put(property.getName(), property.getValue());\n          }\n          public void handleProperty(SVNURL url, SVNPropertyData property) throws SVNException {\n          }\n          public void handleProperty(long revision, SVNPropertyData property) throws SVNException {\n          }\n        });\n      } catch (SVNException e) {\n        props.clear();\n      }\n    }\n    DefaultTableModel model = (DefaultTableModel) myTable.getModel();\n    model.setDataVector(createTableModel(props), new Object[] {\"Name\", \"Value\"});\n\n    myTable.getColumnModel().setColumnSelectionAllowed(false);\n    myTable.getColumnModel().getColumn(1).setCellRenderer(new DefaultTableCellRenderer() {\n      protected void setValue(Object value) {\n        if (value != null) {\n          if (value.toString().indexOf('\\r') >= 0) {\n            value = value.toString().substring(0, value.toString().indexOf('\\r')) + \" [...]\";\n          }\n          if (value.toString().indexOf('\\n') >= 0) {\n            value = value.toString().substring(0, value.toString().indexOf('\\n')) + \" [...]\";\n          }\n        }\n        super.setValue(value);\n      }\n    });\n    if (firstTime) {\n      mySplitPane.setDividerLocation(.5);\n    }\n    if (myTable.getRowCount() > 0) {\n      myTable.getSelectionModel().setSelectionInterval(0, 0);\n    }\n  }","commit_id":"1703cc6e52300a64f418938680d0bab0d1f0dc0a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void init() {\n    setLayout(new BorderLayout());\n    myTable = new JTable();\n    myTextArea = new JTextArea(0, 0);\n    myTextArea.setEditable(false);\n    JScrollPane scrollPane = new JScrollPane(myTable);\n    mySplitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, true, scrollPane, new JScrollPane(myTextArea));\n    add(mySplitPane, BorderLayout.CENTER);\n    add(createToolbar(), BorderLayout.WEST);\n    myTable.setModel(new DefaultTableModel(createTableModel(new HashMap()), new Object[] {\"Name\", \"Value\"}));\n    myTable.setShowVerticalLines(true);\n    myTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n    myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {\n      public void valueChanged(ListSelectionEvent e) {\n        int index = myTable.getSelectedRow();\n        if (index >= 0) {\n          Object value = myTable.getValueAt(index, 1);\n          if (value instanceof String) {\n            myTextArea.setText(((String) value));\n          } else {\n            myTextArea.setText(\"\");\n          }\n        } else {\n          myTextArea.setText(\"\");\n        }\n      }\n    });\n    myTable.addMouseListener(new PopupAdapter());\n    scrollPane.addMouseListener(new PopupAdapter());\n  }","id":10220,"modified_method":"public void init() {\n    setLayout(new BorderLayout());\n    myTable = new JTable();\n    myTextArea = new JTextArea(0, 0);\n    myTextArea.setEditable(false);\n    JScrollPane scrollPane = new JScrollPane(myTable);\n    mySplitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT, true, scrollPane, new JScrollPane(myTextArea));\n    add(mySplitPane, BorderLayout.CENTER);\n    add(createToolbar(), BorderLayout.WEST);\n    myTable.setModel(new DefaultTableModel(createTableModel(new HashMap<String, String>()), new Object[] {\"Name\", \"Value\"}));\n    myTable.setShowVerticalLines(true);\n    myTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n    myTable.getSelectionModel().addListSelectionListener(new ListSelectionListener() {\n      public void valueChanged(ListSelectionEvent e) {\n        int index = myTable.getSelectedRow();\n        if (index >= 0) {\n          Object value = myTable.getValueAt(index, 1);\n          if (value instanceof String) {\n            myTextArea.setText(((String) value));\n          } else {\n            myTextArea.setText(\"\");\n          }\n        } else {\n          myTextArea.setText(\"\");\n        }\n      }\n    });\n    myPopupActionGroup = createPopup();\n    PopupHandler.installPopupHandler(myTable, myPopupActionGroup, ActionPlaces.UNKNOWN, ActionManager.getInstance());\n    PopupHandler.installPopupHandler(scrollPane, myPopupActionGroup, ActionPlaces.UNKNOWN, ActionManager.getInstance());\n    final Shortcut[] shortcuts = KeymapManager.getInstance().getActiveKeymap().getShortcuts(IdeActions.ACTION_CLOSE_ACTIVE_TAB);\n    myCloseAction.registerCustomShortcutSet(new CustomShortcutSet(shortcuts), this);\n    myRefreshAction.registerCustomShortcutSet(CommonShortcuts.getRerun(), this);\n  }","commit_id":"1703cc6e52300a64f418938680d0bab0d1f0dc0a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/** @return ticks this process was running. */\n  public static long getProcessTotalTicks() { return _processTotalTicks; }","id":10221,"modified_method":"/**\n   * @return ticks this process was running.\n   */\n  public long getProcessTotalTicks() { assert _processTotalTicks > 0;  return _processTotalTicks; }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"private static void readProcessNumOpenFds(int pid) {\n    if( pid == -1 ) return;\n    String[] arr = new File(\"/proc/\" + pid + \"/fd\").list();\n    _processNumOpenFds = arr == null ? 0 : arr.length;\n  }","id":10222,"modified_method":"private void readProcessNumOpenFds(String pid) {\n    try {\n      String s = \"/proc/\" + pid + \"/fd\";\n      File f = new File(s);\n      String[] arr = f.list();\n      if (arr != null) {\n        _processNumOpenFds = arr.length;\n      }\n    }\n    catch (Exception ignore) {}\n  }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"private static String readProcessProcFile(int pid) {\n    try { return pid == -1 ? null : readFile(new File(\"/proc/\"+pid+\"/stat\")); }\n    catch( IOException ignore ) { return null; }\n  }","id":10223,"modified_method":"private void readProcessProcFile(String pid) {\n    try {\n      String s = \"/proc/\" + pid + \"/stat\";\n      _processData = readFile(new File(s));\n    }\n    catch (Exception ignore) {}\n  }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"private static String readFile(File f) throws IOException {\n    int bytesRead = 0;\n    try(FileReader fr = new FileReader(f)) {\n        synchronized(buffer) {\n          while (true) {\n            int n = fr.read(buffer, bytesRead, buffer.length - bytesRead);\n            if( n < 0 ) return new String(buffer, 0, bytesRead);\n            bytesRead += n;\n            if( bytesRead >= buffer.length ) throw new IOException(\"LinuxProcFileReader readFile unexpected buffer full\");\n          }\n        }\n    }\n  }","id":10224,"modified_method":"private String readFile(File f) throws Exception {\n    char[] buffer = new char[16 * 1024];\n    FileReader fr = new FileReader(f);\n    int bytesRead = 0;\n    while (true) {\n      int n = fr.read(buffer, bytesRead, buffer.length - bytesRead);\n      if (n < 0) {\n        fr.close();\n        return new String (buffer, 0, bytesRead);\n      }\n      else if (n == 0) {\n        // This is weird.\n        fr.close();\n        throw new Exception(\"LinuxProcFileReader readFile read 0 bytes\");\n      }\n\n      bytesRead += n;\n\n      if (bytesRead >= buffer.length) {\n        fr.close();\n        throw new Exception(\"LinuxProcFileReader readFile unexpected buffer full\");\n      }\n    }\n  }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"private static char parseProcessStatusFile(String s) {\n    char cpus = (char) Runtime.getRuntime().availableProcessors();\n    if(s == null) return cpus;\n    try {\n      Matcher m = Pattern.compile(\"Cpus_allowed:\\\\s+([A-Fa-f0-9,]+)\").matcher(s);\n      return m.find() ? numSetBitsHex(m.group(1)) : cpus;\n    }\n    catch( Exception ignore ) { return cpus; }\n  }","id":10225,"modified_method":"private void parseProcessStatusFile(String s) {\n    if(s == null) return;\n    try {\n      Pattern p = Pattern.compile(\"Cpus_allowed:\\\\s+([A-Fa-f0-9,]+)\");\n      Matcher m = p.matcher(s);\n      boolean b = m.find();\n      if (! b) {\n        return;\n      }\n      _processCpusAllowed = numSetBitsHex(m.group(1));\n    }\n    catch (Exception ignore) {}\n  }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return number of currently open fds of this process.  */\n  public static int getProcessNumOpenFds() { return _processNumOpenFds; }","id":10226,"modified_method":"/**\n   * @return number of currently open fds of this process.\n   */\n  public int getProcessNumOpenFds() { assert _processNumOpenFds > 0;  return _processNumOpenFds; }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/**\n   * Main is purely for command-line testing.\n   */\n  public static void main(String[] args) {\n    final String sysTestData =\n            \"cpu  43559117 24094 1632164 1033740407 245624 29 200080 0 0 0\\n\"+\n                    \"cpu0 1630761 1762 62861 31960072 40486 15 10614 0 0 0\\n\"+\n                    \"cpu1 1531923 86 62987 32118372 13190 0 6806 0 0 0\\n\"+\n                    \"cpu2 1436788 332 66513 32210723 10867 0 6772 0 0 0\\n\"+\n                    \"cpu3 1428700 1001 64574 32223156 8751 0 6811 0 0 0\\n\"+\n                    \"cpu4 1424410 152 62649 32232602 6552 0 6836 0 0 0\\n\"+\n                    \"cpu5 1427172 1478 58744 32233938 5471 0 6708 0 0 0\\n\"+\n                    \"cpu6 1418433 348 60957 32241807 5301 0 6639 0 0 0\\n\"+\n                    \"cpu7 1404882 182 60640 32258150 3847 0 6632 0 0 0\\n\"+\n                    \"cpu8 1485698 3593 67154 32101739 38387 0 9016 0 0 0\\n\"+\n                    \"cpu9 1422404 1601 66489 32193865 15133 0 8800 0 0 0\\n\"+\n                    \"cpu10 1383939 3386 69151 32233567 11219 0 8719 0 0 0\\n\"+\n                    \"cpu11 1376904 3051 65256 32246197 8307 0 8519 0 0 0\\n\"+\n                    \"cpu12 1381437 1496 68003 32237894 6966 0 8676 0 0 0\\n\"+\n                    \"cpu13 1376250 1527 66598 32247951 7020 0 8554 0 0 0\\n\"+\n                    \"cpu14 1364352 1573 65520 32262764 5093 0 8531 0 0 0\\n\"+\n                    \"cpu15 1359076 1176 64380 32269336 5219 0 8593 0 0 0\\n\"+\n                    \"cpu16 1363844 6 29612 32344252 4830 2 4366 0 0 0\\n\"+\n                    \"cpu17 1477797 1019 70211 32190189 6278 0 3731 0 0 0\\n\"+\n                    \"cpu18 1285849 30 29219 32428612 3549 0 3557 0 0 0\\n\"+\n                    \"cpu19 1272308 0 27306 32445340 2089 0 3541 0 0 0\\n\"+\n                    \"cpu20 1326369 5 29152 32386824 2458 0 4416 0 0 0\\n\"+\n                    \"cpu21 1320883 28 31886 32384709 2327 1 4869 0 0 0\\n\"+\n                    \"cpu22 1259498 1 26954 32458931 2247 0 3511 0 0 0\\n\"+\n                    \"cpu23 1279464 0 26694 32439550 1914 0 3571 0 0 0\\n\"+\n                    \"cpu24 1229977 19 32308 32471217 4191 0 4732 0 0 0\\n\"+\n                    \"cpu25 1329079 92 79253 32324092 5267 0 4821 0 0 0\\n\"+\n                    \"cpu26 1225922 30 34837 32475220 4000 0 4711 0 0 0\\n\"+\n                    \"cpu27 1261848 56 43928 32397341 3552 0 5625 0 0 0\\n\"+\n                    \"cpu28 1226707 20 36281 32463498 3935 4 5943 0 0 0\\n\"+\n                    \"cpu29 1379751 19 35593 32317723 2872 4 5913 0 0 0\\n\"+\n                    \"cpu30 1247661 0 32636 32455845 2033 0 4775 0 0 0\\n\"+\n                    \"cpu31 1219016 10 33804 32484916 2254 0 4756 0 0 0\\n\"+\n                    \"intr 840450413 1194 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 55 0 0 0 0 0 0 45 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 593665 88058 57766 41441 62426 61320 39848 39787 522984 116724 99144 95021 113975 99093 78676 78144 0 168858 168858 168858 162 2986764 4720950 3610168 5059579 3251008 2765017 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\"+\n                    \"ctxt 1506565570\\n\"+\n                    \"btime 1385196580\\n\"+\n                    \"processes 1226464\\n\"+\n                    \"procs_running 21\\n\"+\n                    \"procs_blocked 0\\n\"+\n                    \"softirq 793917930 0 156954983 77578 492842649 1992553 0 7758971 51856558 228040 82206598\\n\";\n\n    final String procTestData = \"16790 (java) S 1 16789 16789 0 -1 4202496 6714145 0 0 0 4773058 5391 0 0 20 0 110 0 33573283 64362651648 6467228 18446744073709551615 1073741824 1073778376 140734614041280 140734614032416 140242897981768 0 0 3 16800972 18446744073709551615 0 0 17 27 0 0 0 0 0\\n\";\n\n    parseSystemProcFile(sysTestData);\n    parseProcessProcFile(procTestData);\n    System.out.println(\"System idle ticks: \" + getSystemIdleTicks());\n    System.out.println(\"System total ticks: \" + getSystemTotalTicks());\n    System.out.println(\"Process total ticks: \" + getProcessTotalTicks());\n    System.out.println(\"Process RSS: \" + getProcessRss());\n    System.out.println(\"Number of cpus: \" + getCpuTicks().length);\n  }","id":10227,"modified_method":"/**\n   * Main is purely for command-line testing.\n   */\n  public static void main(String[] args) {\n    final String sysTestData =\n            \"cpu  43559117 24094 1632164 1033740407 245624 29 200080 0 0 0\\n\"+\n                    \"cpu0 1630761 1762 62861 31960072 40486 15 10614 0 0 0\\n\"+\n                    \"cpu1 1531923 86 62987 32118372 13190 0 6806 0 0 0\\n\"+\n                    \"cpu2 1436788 332 66513 32210723 10867 0 6772 0 0 0\\n\"+\n                    \"cpu3 1428700 1001 64574 32223156 8751 0 6811 0 0 0\\n\"+\n                    \"cpu4 1424410 152 62649 32232602 6552 0 6836 0 0 0\\n\"+\n                    \"cpu5 1427172 1478 58744 32233938 5471 0 6708 0 0 0\\n\"+\n                    \"cpu6 1418433 348 60957 32241807 5301 0 6639 0 0 0\\n\"+\n                    \"cpu7 1404882 182 60640 32258150 3847 0 6632 0 0 0\\n\"+\n                    \"cpu8 1485698 3593 67154 32101739 38387 0 9016 0 0 0\\n\"+\n                    \"cpu9 1422404 1601 66489 32193865 15133 0 8800 0 0 0\\n\"+\n                    \"cpu10 1383939 3386 69151 32233567 11219 0 8719 0 0 0\\n\"+\n                    \"cpu11 1376904 3051 65256 32246197 8307 0 8519 0 0 0\\n\"+\n                    \"cpu12 1381437 1496 68003 32237894 6966 0 8676 0 0 0\\n\"+\n                    \"cpu13 1376250 1527 66598 32247951 7020 0 8554 0 0 0\\n\"+\n                    \"cpu14 1364352 1573 65520 32262764 5093 0 8531 0 0 0\\n\"+\n                    \"cpu15 1359076 1176 64380 32269336 5219 0 8593 0 0 0\\n\"+\n                    \"cpu16 1363844 6 29612 32344252 4830 2 4366 0 0 0\\n\"+\n                    \"cpu17 1477797 1019 70211 32190189 6278 0 3731 0 0 0\\n\"+\n                    \"cpu18 1285849 30 29219 32428612 3549 0 3557 0 0 0\\n\"+\n                    \"cpu19 1272308 0 27306 32445340 2089 0 3541 0 0 0\\n\"+\n                    \"cpu20 1326369 5 29152 32386824 2458 0 4416 0 0 0\\n\"+\n                    \"cpu21 1320883 28 31886 32384709 2327 1 4869 0 0 0\\n\"+\n                    \"cpu22 1259498 1 26954 32458931 2247 0 3511 0 0 0\\n\"+\n                    \"cpu23 1279464 0 26694 32439550 1914 0 3571 0 0 0\\n\"+\n                    \"cpu24 1229977 19 32308 32471217 4191 0 4732 0 0 0\\n\"+\n                    \"cpu25 1329079 92 79253 32324092 5267 0 4821 0 0 0\\n\"+\n                    \"cpu26 1225922 30 34837 32475220 4000 0 4711 0 0 0\\n\"+\n                    \"cpu27 1261848 56 43928 32397341 3552 0 5625 0 0 0\\n\"+\n                    \"cpu28 1226707 20 36281 32463498 3935 4 5943 0 0 0\\n\"+\n                    \"cpu29 1379751 19 35593 32317723 2872 4 5913 0 0 0\\n\"+\n                    \"cpu30 1247661 0 32636 32455845 2033 0 4775 0 0 0\\n\"+\n                    \"cpu31 1219016 10 33804 32484916 2254 0 4756 0 0 0\\n\"+\n                    \"intr 840450413 1194 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 55 0 0 0 0 0 0 45 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 593665 88058 57766 41441 62426 61320 39848 39787 522984 116724 99144 95021 113975 99093 78676 78144 0 168858 168858 168858 162 2986764 4720950 3610168 5059579 3251008 2765017 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\"+\n                    \"ctxt 1506565570\\n\"+\n                    \"btime 1385196580\\n\"+\n                    \"processes 1226464\\n\"+\n                    \"procs_running 21\\n\"+\n                    \"procs_blocked 0\\n\"+\n                    \"softirq 793917930 0 156954983 77578 492842649 1992553 0 7758971 51856558 228040 82206598\\n\";\n\n    final String procTestData = \"16790 (java) S 1 16789 16789 0 -1 4202496 6714145 0 0 0 4773058 5391 0 0 20 0 110 0 33573283 64362651648 6467228 18446744073709551615 1073741824 1073778376 140734614041280 140734614032416 140242897981768 0 0 3 16800972 18446744073709551615 0 0 17 27 0 0 0 0 0\\n\";\n\n    LinuxProcFileReader lpfr = new LinuxProcFileReader();\n    lpfr.parseSystemProcFile(sysTestData);\n    lpfr.parseProcessProcFile(procTestData);\n    System.out.println(\"System idle ticks: \" + lpfr.getSystemIdleTicks());\n    System.out.println(\"System total ticks: \" + lpfr.getSystemTotalTicks());\n    System.out.println(\"Process total ticks: \" + lpfr.getProcessTotalTicks());\n    System.out.println(\"Process RSS: \" + lpfr.getProcessRss());\n    System.out.println(\"Number of cpus: \" + lpfr.getCpuTicks().length);\n  }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return ticks the system was idle.  in general:  idle + busy == 100% */\n  public static long getSystemIdleTicks() { return _systemIdleTicks; }","id":10228,"modified_method":"/**\n   * @return ticks the system was idle.  in general:  idle + busy == 100%\n   */\n  public long getSystemIdleTicks()   { assert _systemIdleTicks > 0;    return _systemIdleTicks; }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return number of set bits in hexadecimal string (chars must be 0-F) */\n  private static char numSetBitsHex(String s) {\n    // Look-up table for num set bits in 4-bit char\n    final int[] bits_set = {0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4};\n    char nset = 0;\n    for(int i = 0; i < s.length(); i++) {\n      Character ch = s.charAt(i);\n      if (ch == ',') continue;\n      int x = Integer.parseInt(ch.toString(), 16);\n      nset += bits_set[x];\n    }\n    return nset;\n  }","id":10229,"modified_method":"/**\n   * @return number of set bits in hexadecimal string (chars must be 0-F)\n   */\n  public static int numSetBitsHex(String s) {\n    // Look-up table for num set bits in 4-bit char\n    final int[] bits_set = {0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4};\n\n    int nset = 0;\n    for(int i = 0; i < s.length(); i++) {\n      Character ch = s.charAt(i);\n      if (ch == ',') {\n        continue;\n      }\n      int x = Integer.parseInt(ch.toString(), 16);\n      nset += bits_set[x];\n    }\n    return nset;\n  }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"private static void parseProcessProcFile(String s) {\n    if (s == null) return;\n    try {\n      BufferedReader reader = new BufferedReader(new StringReader(s));\n      Matcher m = procPattern.matcher(reader.readLine());\n      if(!m.matches() ) return;\n      long processUserTicks   = Long.parseLong(m.group(14));\n      long processSystemTicks = Long.parseLong(m.group(15));\n      _processTotalTicks = processUserTicks + processSystemTicks;\n      _processRss = Long.parseLong(m.group(24));\n    }\n    catch (Exception ignore) {}\n  }","id":10230,"modified_method":"private void parseProcessProcFile(String s) {\n    if (s == null) return;\n\n    try {\n      BufferedReader reader = new BufferedReader(new StringReader(s));\n      String line = reader.readLine();\n\n      Pattern p = Pattern.compile(\n              \"(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\" + \"\\\\s+\" +\n              \"(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\" + \"\\\\s+\" +\n              \"(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\" + \"\\\\s+\" +\n              \"(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\" + \"\\\\s+\" +\n              \"(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\" + \".*\");\n      Matcher m = p.matcher(line);\n      boolean b = m.matches();\n      if (! b) {\n        return;\n      }\n\n      long processUserTicks   = Long.parseLong(m.group(14));\n      long processSystemTicks   = Long.parseLong(m.group(15));\n      _processTotalTicks = processUserTicks + processSystemTicks;\n      _processRss = Long.parseLong(m.group(24));\n    }\n    catch (Exception ignore) {}\n  }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/**  Array of ticks:  [cpu number][tick type]\n   *\n   * tick types are:\n   * [0] user ticks\n   * [1] system ticks\n   * [2] other ticks (i/o)\n   * [3] idle ticks\n   *\n   * @return ticks array for each cpu of the system.\n   */\n  public static long[][] getCpuTicks() { return CPUTICKS; }","id":10231,"modified_method":"/**\n   * Array of ticks.\n   * [cpu number][tick type]\n   *\n   * tick types are:\n   *\n   * [0] user ticks\n   * [1] system ticks\n   * [2] other ticks (i/o)\n   * [3] idle ticks\n   *\n   * @return ticks array for each cpu of the system.\n   */\n  public long[][] getCpuTicks()      { assert _cpuTicks != null;       return _cpuTicks.toArray(new long[0][0]); }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return process id for this node  */\n  public static int getProcessID() { return PID; }","id":10232,"modified_method":"/**\n   * @return process id for this node as a String.\n   */\n  public String getProcessID() { return _pid; }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return true if all the values are ok to use; false otherwise. */\n  private static boolean valid() {\n    return _systemIdleTicks >= 0 && _systemTotalTicks >= 0 && _processTotalTicks >= 0 && _processNumOpenFds >= 0;\n  }","id":10233,"modified_method":"/**\n   * @return true if all the values are ok to use; false otherwise.\n   */\n  public boolean valid() {\n    return ((_systemIdleTicks >= 0) && (_systemTotalTicks >= 0) && (_processTotalTicks >= 0) &&\n            (_processNumOpenFds >= 0));\n  }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return number of CPUs allowed by this process. */\n  public static char getProcessCpusAllowed() { return PROCESS_CPUS_ALLOWED; }","id":10234,"modified_method":"/**\n   * @return number of CPUs allowed by this process.\n   */\n  public int getProcessCpusAllowed() {\n    if (! IS_OS_LINUX()) {\n      return Runtime.getRuntime().availableProcessors();\n    }\n\n    // _processCpusAllowed is not available on CentOS 5 and earlier.\n    // In this case, just return availableProcessors.\n    if (_processCpusAllowed < 0) {\n      return Runtime.getRuntime().availableProcessors();\n    }\n\n    return _processCpusAllowed;\n  }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"private static String readProcessStatusFile(int pid) {\n    try { return pid== -1 ? null : readFile(new File(\"/proc/\"+pid+\"/status\")); }\n    catch( IOException ignore ) { return null; }\n  }","id":10235,"modified_method":"private void readProcessStatusFile(String pid) {\n    try {\n      String s = \"/proc/\" + pid + \"/status\";\n      _processStatus = readFile(new File(s));\n    }\n    catch (Exception ignore) {}\n  }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @param s String containing contents of proc file. */\n  private static void parseSystemProcFile(String s) {\n    if (s == null) return;\n    BufferedReader reader = new BufferedReader(new StringReader(s));\n    try { \n      // Read aggregate cpu values\n      String line = reader.readLine();\n      Matcher m = sysTicksPattern.matcher(line);\n      if( !m.matches() ) return;\n  \n      int matchGroupBase = 0;\n      long systemUserTicks = 0;\n      long systemSystemTicks = 0;\n      long systemOtherTicks = 0;\n      systemUserTicks    += Long.parseLong(m.group(1 + matchGroupBase));\n      systemOtherTicks   += Long.parseLong(m.group(2 + matchGroupBase));\n      systemSystemTicks  += Long.parseLong(m.group(3 + matchGroupBase));\n      _systemIdleTicks    = Long.parseLong(m.group(4 + matchGroupBase));\n      systemOtherTicks   += Long.parseLong(m.group(5 + matchGroupBase));\n      systemSystemTicks  += Long.parseLong(m.group(6 + matchGroupBase));\n      systemSystemTicks  += Long.parseLong(m.group(7 + matchGroupBase));\n      _systemTotalTicks   = systemUserTicks + systemOtherTicks + systemSystemTicks + _systemIdleTicks;\n  \n      // Read individual cpu values\n      int cpu = 0;\n      line = reader.readLine();\n      while (line != null) {\n        m = cpuTicksPattern.matcher(line);\n        if( !m.matches() ) break;\n        // Copying algorithm from http://gee.cs.oswego.edu/dl/code/\n        // See perfbar.c in gtk_perfbar package.\n        // int cpuNum = Integer.parseInt(m.group(1));\n        matchGroupBase = 1;\n        long cpuUserTicks = 0;\n        long cpuSystemTicks = 0;\n        long cpuOtherTicks = 0;\n        long cpuIdleTicks = 0;\n        cpuUserTicks    += Long.parseLong(m.group(1 + matchGroupBase));\n        cpuOtherTicks   += Long.parseLong(m.group(2 + matchGroupBase));\n        cpuSystemTicks  += Long.parseLong(m.group(3 + matchGroupBase));\n        cpuIdleTicks    += Long.parseLong(m.group(4 + matchGroupBase));\n        cpuOtherTicks   += Long.parseLong(m.group(5 + matchGroupBase));\n        cpuSystemTicks  += Long.parseLong(m.group(6 + matchGroupBase));\n        cpuSystemTicks  += Long.parseLong(m.group(7 + matchGroupBase));\n        CPUTICKS[cpu][0] = cpuUserTicks;\n        CPUTICKS[cpu][1] = cpuSystemTicks;\n        CPUTICKS[cpu][2] = cpuOtherTicks;\n        CPUTICKS[cpu][3] = cpuIdleTicks;\n        cpu++;\n        line = reader.readLine();\n      }\n    } catch( IOException ignore ) {/**/}\n  }","id":10236,"modified_method":"/**\n   * @param s String containing contents of proc file.\n   */\n  private void parseSystemProcFile(String s) {\n    if (s == null) return;\n\n    try {\n      BufferedReader reader = new BufferedReader(new StringReader(s));\n      String line = reader.readLine();\n\n      // Read aggregate cpu values\n      {\n        Pattern p = Pattern.compile(\"cpu\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+).*\");\n        Matcher m = p.matcher(line);\n        boolean b = m.matches();\n        if (!b) {\n          return;\n        }\n\n        int matchGroupBase = 0;\n        long systemUserTicks = 0;\n        long systemSystemTicks = 0;\n        long systemOtherTicks = 0;\n        _systemIdleTicks = 0;\n        systemUserTicks    += Long.parseLong(m.group(1 + matchGroupBase));\n        systemOtherTicks   += Long.parseLong(m.group(2 + matchGroupBase));\n        systemSystemTicks  += Long.parseLong(m.group(3 + matchGroupBase));\n        _systemIdleTicks   += Long.parseLong(m.group(4 + matchGroupBase));\n        systemOtherTicks   += Long.parseLong(m.group(5 + matchGroupBase));\n        systemSystemTicks  += Long.parseLong(m.group(6 + matchGroupBase));\n        systemSystemTicks  += Long.parseLong(m.group(7 + matchGroupBase));\n        _systemTotalTicks   = systemUserTicks + systemOtherTicks + systemSystemTicks + _systemIdleTicks;\n      }\n\n      // Read individual cpu values\n      _cpuTicks = new ArrayList<long[]>();\n      line = reader.readLine();\n      while (line != null) {\n        Pattern p = Pattern.compile(\"cpu(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+).*\");\n        Matcher m = p.matcher(line);\n        boolean b = m.matches();\n        if (! b) {\n          break;\n        }\n\n        // Copying algorithm from http://gee.cs.oswego.edu/dl/code/\n        // See perfbar.c in gtk_perfbar package.\n        // int cpuNum = Integer.parseInt(m.group(1));\n        int matchGroupBase = 1;\n        long cpuUserTicks = 0;\n        long cpuSystemTicks = 0;\n        long cpuOtherTicks = 0;\n        long cpuIdleTicks = 0;\n        cpuUserTicks    += Long.parseLong(m.group(1 + matchGroupBase));\n        cpuOtherTicks   += Long.parseLong(m.group(2 + matchGroupBase));\n        cpuSystemTicks  += Long.parseLong(m.group(3 + matchGroupBase));\n        cpuIdleTicks    += Long.parseLong(m.group(4 + matchGroupBase));\n        cpuOtherTicks   += Long.parseLong(m.group(5 + matchGroupBase));\n        cpuSystemTicks  += Long.parseLong(m.group(6 + matchGroupBase));\n        cpuSystemTicks  += Long.parseLong(m.group(7 + matchGroupBase));\n        long[] oneCpuTicks = {cpuUserTicks, cpuSystemTicks, cpuOtherTicks, cpuIdleTicks};\n        _cpuTicks.add(oneCpuTicks);\n\n        line = reader.readLine();\n      }\n    }\n    catch (Exception ignore) {}\n  }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"private static String readSystemProcFile() {\n    try { return readFile(new File(\"/proc/stat\")); }\n    catch( IOException ignore ) { return null; }\n  }","id":10237,"modified_method":"private void readSystemProcFile() {\n    try {\n      _systemData = readFile(new File(\"/proc/stat\"));\n    }\n    catch (Exception ignore) {}\n  }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"private static int getProcessIdFromJMX() {\n    // Note: may fail in some JVM implementations therefore fallback has to be provided.\n    // Something like '<pid>@<hostname>', at least in SUN / Oracle JVMs\n    final String jvmName = java.lang.management.ManagementFactory.getRuntimeMXBean().getName();\n    final int index = jvmName.indexOf('@');\n    return index < 1 ? -1 // part before '@' empty (index = 0) / '@' not found (index = -1)\n      : Integer.parseInt(jvmName.substring(0, index));\n  }","id":10238,"modified_method":"private static String getProcessId() throws Exception {\n    // Note: may fail in some JVM implementations\n    // therefore fallback has to be provided\n\n    // something like '<pid>@<hostname>', at least in SUN / Oracle JVMs\n    final String jvmName = java.lang.management.ManagementFactory.getRuntimeMXBean().getName();\n    final int index = jvmName.indexOf('@');\n\n    if (index < 1) {\n      // part before '@' empty (index = 0) / '@' not found (index = -1)\n      throw new Exception (\"Can't get process Id\");\n    }\n\n    return Long.toString(Long.parseLong(jvmName.substring(0, index)));\n  }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return resident set size (RSS) of this process. */\n  public static long getProcessRss() { return _processRss; }","id":10239,"modified_method":"/**\n   * @return resident set size (RSS) of this process.\n   */\n  public long getProcessRss()        { assert _processRss > 0;         return _processRss; }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return ticks the system was up. */\n  public static long getSystemTotalTicks() { return _systemTotalTicks; }","id":10240,"modified_method":"/**\n   * @return ticks the system was up.\n   */\n  public long getSystemTotalTicks()  { assert _systemTotalTicks > 0;   return _systemTotalTicks; }","commit_id":"6426045799a984068ebaab5c25cc95eda8d8022d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public void run() {\n    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n    ObjectName os;\n    try {\n      os = new ObjectName(\"java.lang:type=OperatingSystem\");\n    } catch( MalformedObjectNameException e ) {\n      throw Log.throwErr(e);\n    }\n    Thread.currentThread().setPriority(Thread.MAX_PRIORITY);\n    int counter = 0;\n    //noinspection InfiniteLoopStatement\n    while( true ) {\n      // Update the interesting health self-info for publication also\n      H2O cloud = H2O.CLOUD;\n      HeartBeat hb = H2O.SELF._heartbeat;\n      hb._hb_version = HB_VERSION++;\n      hb._jvm_boot_msec= TimeLine.JVM_BOOT_MSEC;\n\n      // Run mini-benchmark every 5 mins.  However, on startup - do not have\n      // all JVMs immediately launch a all-core benchmark - they will fight\n      // with each other.  Stagger them using the hashcode.\n      // Run this benchmark *before* testing the heap or GC, so the GC numbers\n      // are current as of the send time.\n      if( (counter+Math.abs(H2O.SELF.hashCode()*0xDECAF /*spread wider than 1 apart*/)) % (300/(Float.isNaN(hb._gflops)?10:1)) == 0) {\n        hb._gflops   = (float)Linpack.run(hb._cpus_allowed);\n        hb._membw    = (float)MemoryBandwidth.run(hb._cpus_allowed);\n      }\n\n      // Memory utilization as of last FullGC\n      long kv_gc = Cleaner.KV_USED_AT_LAST_GC;\n      long heap_gc = Cleaner.HEAP_USED_AT_LAST_GC;\n      long pojo_gc = Math.max(heap_gc - kv_gc,0);\n      long kv_mem = Cleaner.Histo.cached(); // More current than last FullGC numbers; can skyrocket\n      // Since last FullGC, assuming POJO remains constant and KV changed: new free memory\n      long free_mem = Math.max(MemoryManager.MEM_MAX-kv_mem-pojo_gc,0);\n      long pojo_mem = MemoryManager.MEM_MAX-kv_mem-free_mem;\n      hb.set_kv_mem(kv_mem);\n      hb.set_pojo_mem(pojo_mem);\n      hb.set_free_mem(free_mem);\n      hb.set_swap_mem(Cleaner.Histo.swapped());\n      hb._keys = H2O.STORE.size();\n\n      try {\n        hb._system_load_average = ((Double)mbs.getAttribute(os, \"SystemLoadAverage\")).floatValue();\n        if( hb._system_load_average == -1 )  // SystemLoadAverage not available on windows\n          hb._system_load_average = ((Double)mbs.getAttribute(os, \"SystemCpuLoad\")).floatValue();\n      } catch( Exception e ) {/*Ignore, data probably not available on this VM*/ }\n\n      int rpcs = 0;\n      for( H2ONode h2o : cloud._memary )\n        rpcs += h2o.taskSize();\n      hb._rpcs       = (char)rpcs;\n      // Scrape F/J pool counts\n      hb._fjthrds = new short[H2O.MAX_PRIORITY+1];\n      hb._fjqueue = new short[H2O.MAX_PRIORITY+1];\n      for( int i=0; i<hb._fjthrds.length; i++ ) {\n        hb._fjthrds[i] = (short)H2O.getWrkThrPoolSize(i);\n        hb._fjqueue[i] = (short)H2O.getWrkQueueSize(i);\n      }\n      hb._tcps_active= (char)H2ONode.TCPS.get();\n\n      // get the usable and total disk storage for the partition where the\n      // persistent KV pairs are stored\n      hb.set_free_disk(H2O.getPM().getIce().getUsableSpace());\n      hb.set_max_disk (H2O.getPM().getIce().getTotalSpace() );\n\n      // get cpu utilization for the system and for this process.  (linux only.)\n      LinuxProcFileReader.refresh();\n      hb._pid = LinuxProcFileReader.getProcessID();\n      hb._system_idle_ticks = LinuxProcFileReader.getSystemIdleTicks();\n      hb._system_total_ticks = LinuxProcFileReader.getSystemTotalTicks();\n      hb._process_total_ticks = LinuxProcFileReader.getProcessTotalTicks();\n      hb._process_num_open_fds = LinuxProcFileReader.getProcessNumOpenFds();\n      hb._num_cpus = LinuxProcFileReader.getProcessCpusAllowed();\n      hb._nthreads = H2O.ARGS.nthreads;\n      hb._cpus_allowed = (char)Math.min(LinuxProcFileReader.getProcessCpusAllowed(),H2O.ARGS.nthreads);\n\n      // Announce what Cloud we think we are in.\n      // Publish our health as well.\n      UDPHeartbeat.build_and_multicast(cloud, hb);\n\n      // If we have no internet connection, then the multicast goes\n      // nowhere and we never receive a heartbeat from ourselves!\n      // Fake it now.\n      long now = System.currentTimeMillis();\n      H2O.SELF._last_heard_from = now;\n\n      // Look for napping Nodes & propose removing from Cloud\n      for( H2ONode h2o : cloud._memary ) {\n        long delta = now - h2o._last_heard_from;\n        if( delta > SUSPECT ) {// We suspect this Node has taken a dirt nap\n          if( !h2o._announcedLostContact ) {\n            Paxos.print(\"hart: announce suspect node\",cloud._memary,h2o.toString());\n            h2o._announcedLostContact = true;\n          }\n        } else if( h2o._announcedLostContact ) {\n          Paxos.print(\"hart: regained contact with node\",cloud._memary,h2o.toString());\n          h2o._announcedLostContact = false;\n        }\n      }\n      counter++;\n\n      // Once per second, for the entire cloud a Node will multi-cast publish\n      // itself, so other unrelated Clouds discover each other and form up.\n      try { Thread.sleep(SLEEP); } // Only once-sec per entire Cloud\n      catch( InterruptedException ignore ) { }\n    }\n  }","id":10241,"modified_method":"public void run() {\n    MBeanServer mbs = ManagementFactory.getPlatformMBeanServer();\n    ObjectName os;\n    try {\n      os = new ObjectName(\"java.lang:type=OperatingSystem\");\n    } catch( MalformedObjectNameException e ) {\n      throw Log.throwErr(e);\n    }\n    Thread.currentThread().setPriority(Thread.MAX_PRIORITY);\n    int counter = 0;\n    //noinspection InfiniteLoopStatement\n    while( true ) {\n      // Update the interesting health self-info for publication also\n      H2O cloud = H2O.CLOUD;\n      HeartBeat hb = H2O.SELF._heartbeat;\n      hb._hb_version = HB_VERSION++;\n      hb._jvm_boot_msec= TimeLine.JVM_BOOT_MSEC;\n\n      // Run mini-benchmark every 5 mins.  However, on startup - do not have\n      // all JVMs immediately launch a all-core benchmark - they will fight\n      // with each other.  Stagger them using the hashcode.\n      // Run this benchmark *before* testing the heap or GC, so the GC numbers\n      // are current as of the send time.\n      if( (counter+Math.abs(H2O.SELF.hashCode()*0xDECAF /*spread wider than 1 apart*/)) % (300/(Float.isNaN(hb._gflops)?10:1)) == 0) {\n        hb._gflops   = (float)Linpack.run(hb._cpus_allowed);\n        hb._membw    = (float)MemoryBandwidth.run(hb._cpus_allowed);\n      }\n\n      // Memory utilization as of last FullGC\n      long kv_gc = Cleaner.KV_USED_AT_LAST_GC;\n      long heap_gc = Cleaner.HEAP_USED_AT_LAST_GC;\n      long pojo_gc = Math.max(heap_gc - kv_gc,0);\n      long kv_mem = Cleaner.Histo.cached(); // More current than last FullGC numbers; can skyrocket\n      // Since last FullGC, assuming POJO remains constant and KV changed: new free memory\n      long free_mem = Math.max(MemoryManager.MEM_MAX-kv_mem-pojo_gc,0);\n      long pojo_mem = MemoryManager.MEM_MAX-kv_mem-free_mem;\n      hb.set_kv_mem(kv_mem);\n      hb.set_pojo_mem(pojo_mem);\n      hb.set_free_mem(free_mem);\n      hb.set_swap_mem(Cleaner.Histo.swapped());\n      hb._keys = H2O.STORE.size();\n\n      try {\n        hb._system_load_average = ((Double)mbs.getAttribute(os, \"SystemLoadAverage\")).floatValue();\n        if( hb._system_load_average == -1 )  // SystemLoadAverage not available on windows\n          hb._system_load_average = ((Double)mbs.getAttribute(os, \"SystemCpuLoad\")).floatValue();\n      } catch( Exception e ) {/*Ignore, data probably not available on this VM*/ }\n\n      int rpcs = 0;\n      for( H2ONode h2o : cloud._memary )\n        rpcs += h2o.taskSize();\n      hb._rpcs       = (char)rpcs;\n      // Scrape F/J pool counts\n      hb._fjthrds = new short[H2O.MAX_PRIORITY+1];\n      hb._fjqueue = new short[H2O.MAX_PRIORITY+1];\n      for( int i=0; i<hb._fjthrds.length; i++ ) {\n        hb._fjthrds[i] = (short)H2O.getWrkThrPoolSize(i);\n        hb._fjqueue[i] = (short)H2O.getWrkQueueSize(i);\n      }\n      hb._tcps_active= (char)H2ONode.TCPS.get();\n\n      // get the usable and total disk storage for the partition where the\n      // persistent KV pairs are stored\n      hb.set_free_disk(H2O.getPM().getIce().getUsableSpace());\n      hb.set_max_disk (H2O.getPM().getIce().getTotalSpace() );\n\n      // get cpu utilization for the system and for this process.  (linux only.)\n      LinuxProcFileReader lpfr = new LinuxProcFileReader();\n      lpfr.read();\n      if (lpfr.valid()) {\n        hb._system_idle_ticks = lpfr.getSystemIdleTicks();\n        hb._system_total_ticks = lpfr.getSystemTotalTicks();\n        hb._process_total_ticks = lpfr.getProcessTotalTicks();\n        hb._process_num_open_fds = lpfr.getProcessNumOpenFds();\n      }\n      else {\n        hb._system_idle_ticks = -1;\n        hb._system_total_ticks = -1;\n        hb._process_total_ticks = -1;\n        hb._process_num_open_fds = -1;\n      }\n      hb._cpus_allowed = (char) lpfr.getProcessCpusAllowed();\n      if (H2O.ARGS.nthreads < hb._cpus_allowed) {\n        hb._cpus_allowed = H2O.ARGS.nthreads;\n      }\n      hb._nthreads = H2O.ARGS.nthreads;\n      try {\n        hb._pid = Integer.parseInt(lpfr.getProcessID());\n      }\n      catch (Exception ignore) {}\n\n      // Announce what Cloud we think we are in.\n      // Publish our health as well.\n      UDPHeartbeat.build_and_multicast(cloud, hb);\n\n      // If we have no internet connection, then the multicast goes\n      // nowhere and we never receive a heartbeat from ourselves!\n      // Fake it now.\n      long now = System.currentTimeMillis();\n      H2O.SELF._last_heard_from = now;\n\n      // Look for napping Nodes & propose removing from Cloud\n      for( H2ONode h2o : cloud._memary ) {\n        long delta = now - h2o._last_heard_from;\n        if( delta > SUSPECT ) {// We suspect this Node has taken a dirt nap\n          if( !h2o._announcedLostContact ) {\n            Paxos.print(\"hart: announce suspect node\",cloud._memary,h2o.toString());\n            h2o._announcedLostContact = true;\n          }\n        } else if( h2o._announcedLostContact ) {\n          Paxos.print(\"hart: regained contact with node\",cloud._memary,h2o.toString());\n          h2o._announcedLostContact = false;\n        }\n      }\n      counter++;\n\n      // Once per second, for the entire cloud a Node will multi-cast publish\n      // itself, so other unrelated Clouds discover each other and form up.\n      try { Thread.sleep(SLEEP); } // Only once-sec per entire Cloud\n      catch( InterruptedException ignore ) { }\n    }\n  }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return number of CPUs allowed by this process. */\n  public static char getProcessCpusAllowed() { return PROCESS_CPUS_ALLOWED; }","id":10242,"modified_method":"/**\n   * @return number of CPUs allowed by this process.\n   */\n  public int getProcessCpusAllowed() {\n    if (! IS_OS_LINUX()) {\n      return Runtime.getRuntime().availableProcessors();\n    }\n\n    // _processCpusAllowed is not available on CentOS 5 and earlier.\n    // In this case, just return availableProcessors.\n    if (_processCpusAllowed < 0) {\n      return Runtime.getRuntime().availableProcessors();\n    }\n\n    return _processCpusAllowed;\n  }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @param s String containing contents of proc file. */\n  private static void parseSystemProcFile(String s) {\n    if (s == null) return;\n    BufferedReader reader = new BufferedReader(new StringReader(s));\n    try {\n      // Read aggregate cpu values\n      String line = reader.readLine();\n      Matcher m = sysTicksPattern.matcher(line);\n      if( !m.matches() ) return;\n\n      int matchGroupBase = 0;\n      long systemUserTicks = 0;\n      long systemSystemTicks = 0;\n      long systemOtherTicks = 0;\n      systemUserTicks    += Long.parseLong(m.group(1 + matchGroupBase));\n      systemOtherTicks   += Long.parseLong(m.group(2 + matchGroupBase));\n      systemSystemTicks  += Long.parseLong(m.group(3 + matchGroupBase));\n      _systemIdleTicks    = Long.parseLong(m.group(4 + matchGroupBase));\n      systemOtherTicks   += Long.parseLong(m.group(5 + matchGroupBase));\n      systemSystemTicks  += Long.parseLong(m.group(6 + matchGroupBase));\n      systemSystemTicks  += Long.parseLong(m.group(7 + matchGroupBase));\n      _systemTotalTicks   = systemUserTicks + systemOtherTicks + systemSystemTicks + _systemIdleTicks;\n\n      // Read individual cpu values\n      int cpu = 0;\n      line = reader.readLine();\n      while (line != null) {\n        m = cpuTicksPattern.matcher(line);\n        if( !m.matches() ) break;\n        // Copying algorithm from http://gee.cs.oswego.edu/dl/code/\n        // See perfbar.c in gtk_perfbar package.\n        // int cpuNum = Integer.parseInt(m.group(1));\n        matchGroupBase = 1;\n        long cpuUserTicks = 0;\n        long cpuSystemTicks = 0;\n        long cpuOtherTicks = 0;\n        long cpuIdleTicks = 0;\n        cpuUserTicks    += Long.parseLong(m.group(1 + matchGroupBase));\n        cpuOtherTicks   += Long.parseLong(m.group(2 + matchGroupBase));\n        cpuSystemTicks  += Long.parseLong(m.group(3 + matchGroupBase));\n        cpuIdleTicks    += Long.parseLong(m.group(4 + matchGroupBase));\n        cpuOtherTicks   += Long.parseLong(m.group(5 + matchGroupBase));\n        cpuSystemTicks  += Long.parseLong(m.group(6 + matchGroupBase));\n        cpuSystemTicks  += Long.parseLong(m.group(7 + matchGroupBase));\n        CPUTICKS[cpu][0] = cpuUserTicks;\n        CPUTICKS[cpu][1] = cpuSystemTicks;\n        CPUTICKS[cpu][2] = cpuOtherTicks;\n        CPUTICKS[cpu][3] = cpuIdleTicks;\n        cpu++;\n        line = reader.readLine();\n      }\n    } catch( IOException ignore ) {/**/}\n  }","id":10243,"modified_method":"/**\n   * @param s String containing contents of proc file.\n   */\n  private void parseSystemProcFile(String s) {\n    if (s == null) return;\n\n    try {\n      BufferedReader reader = new BufferedReader(new StringReader(s));\n      String line = reader.readLine();\n\n      // Read aggregate cpu values\n      {\n        Pattern p = Pattern.compile(\"cpu\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+).*\");\n        Matcher m = p.matcher(line);\n        boolean b = m.matches();\n        if (!b) {\n          return;\n        }\n\n        long systemUserTicks = Long.parseLong(m.group(1));\n        long systemNiceTicks = Long.parseLong(m.group(2));\n        long systemSystemTicks = Long.parseLong(m.group(3));\n        _systemIdleTicks = Long.parseLong(m.group(4));\n        _systemTotalTicks = systemUserTicks + systemNiceTicks + systemSystemTicks + _systemIdleTicks;\n      }\n\n      // Read individual cpu values\n      _cpuTicks = new ArrayList<long[]>();\n      line = reader.readLine();\n      while (line != null) {\n        Pattern p = Pattern.compile(\"cpu(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+)\\\\s+(\\\\d+).*\");\n        Matcher m = p.matcher(line);\n        boolean b = m.matches();\n        if (! b) {\n          break;\n        }\n\n        // Copying algorithm from http://gee.cs.oswego.edu/dl/code/\n        // See perfbar.c in gtk_perfbar package.\n        // int cpuNum = Integer.parseInt(m.group(1));\n        long cpuUserTicks = 0;\n        long cpuSystemTicks = 0;\n        long cpuOtherTicks = 0;\n        long cpuIdleTicks = 0;\n        cpuUserTicks    += Long.parseLong(m.group(2));\n        cpuOtherTicks   += Long.parseLong(m.group(3));\n        cpuSystemTicks  += Long.parseLong(m.group(4));\n        cpuIdleTicks    += Long.parseLong(m.group(5));\n        cpuOtherTicks   += Long.parseLong(m.group(6));\n        cpuSystemTicks  += Long.parseLong(m.group(7));\n        cpuSystemTicks  += Long.parseLong(m.group(8));\n        long[] oneCpuTicks = {cpuUserTicks, cpuSystemTicks, cpuOtherTicks, cpuIdleTicks};\n        _cpuTicks.add(oneCpuTicks);\n\n        line = reader.readLine();\n      }\n    }\n    catch (Exception ignore) {}\n  }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"private static void parseProcessProcFile(String s) {\n    if (s == null) return;\n    try {\n      BufferedReader reader = new BufferedReader(new StringReader(s));\n      Matcher m = procPattern.matcher(reader.readLine());\n      if(!m.matches() ) return;\n      long processUserTicks   = Long.parseLong(m.group(14));\n      long processSystemTicks = Long.parseLong(m.group(15));\n      _processTotalTicks = processUserTicks + processSystemTicks;\n      _processRss = Long.parseLong(m.group(24));\n    }\n    catch (Exception ignore) {}\n  }","id":10244,"modified_method":"private void parseProcessProcFile(String s) {\n    if (s == null) return;\n\n    try {\n      BufferedReader reader = new BufferedReader(new StringReader(s));\n      String line = reader.readLine();\n\n      Pattern p = Pattern.compile(\n              \"(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\" + \"\\\\s+\" +\n              \"(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\" + \"\\\\s+\" +\n              \"(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\" + \"\\\\s+\" +\n              \"(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\" + \"\\\\s+\" +\n              \"(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\\\\s+(\\\\S+)\" + \".*\");\n      Matcher m = p.matcher(line);\n      boolean b = m.matches();\n      if (! b) {\n        return;\n      }\n\n      long processUserTicks   = Long.parseLong(m.group(14));\n      long processSystemTicks   = Long.parseLong(m.group(15));\n      _processTotalTicks = processUserTicks + processSystemTicks;\n      _processRss = Long.parseLong(m.group(24));\n    }\n    catch (Exception ignore) {}\n  }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"private static String readProcessStatusFile(int pid) {\n    try { return pid== -1 ? null : readFile(new File(\"/proc/\"+pid+\"/status\")); }\n    catch( IOException ignore ) { return null; }\n  }","id":10245,"modified_method":"private void readProcessStatusFile(String pid) {\n    try {\n      String s = \"/proc/\" + pid + \"/status\";\n      _processStatus = readFile(new File(s));\n    }\n    catch (Exception ignore) {}\n  }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/**\n   * Main is purely for command-line testing.\n   */\n  public static void main(String[] args) {\n    final String sysTestData =\n            \"cpu  43559117 24094 1632164 1033740407 245624 29 200080 0 0 0\\n\"+\n                    \"cpu0 1630761 1762 62861 31960072 40486 15 10614 0 0 0\\n\"+\n                    \"cpu1 1531923 86 62987 32118372 13190 0 6806 0 0 0\\n\"+\n                    \"cpu2 1436788 332 66513 32210723 10867 0 6772 0 0 0\\n\"+\n                    \"cpu3 1428700 1001 64574 32223156 8751 0 6811 0 0 0\\n\"+\n                    \"cpu4 1424410 152 62649 32232602 6552 0 6836 0 0 0\\n\"+\n                    \"cpu5 1427172 1478 58744 32233938 5471 0 6708 0 0 0\\n\"+\n                    \"cpu6 1418433 348 60957 32241807 5301 0 6639 0 0 0\\n\"+\n                    \"cpu7 1404882 182 60640 32258150 3847 0 6632 0 0 0\\n\"+\n                    \"cpu8 1485698 3593 67154 32101739 38387 0 9016 0 0 0\\n\"+\n                    \"cpu9 1422404 1601 66489 32193865 15133 0 8800 0 0 0\\n\"+\n                    \"cpu10 1383939 3386 69151 32233567 11219 0 8719 0 0 0\\n\"+\n                    \"cpu11 1376904 3051 65256 32246197 8307 0 8519 0 0 0\\n\"+\n                    \"cpu12 1381437 1496 68003 32237894 6966 0 8676 0 0 0\\n\"+\n                    \"cpu13 1376250 1527 66598 32247951 7020 0 8554 0 0 0\\n\"+\n                    \"cpu14 1364352 1573 65520 32262764 5093 0 8531 0 0 0\\n\"+\n                    \"cpu15 1359076 1176 64380 32269336 5219 0 8593 0 0 0\\n\"+\n                    \"cpu16 1363844 6 29612 32344252 4830 2 4366 0 0 0\\n\"+\n                    \"cpu17 1477797 1019 70211 32190189 6278 0 3731 0 0 0\\n\"+\n                    \"cpu18 1285849 30 29219 32428612 3549 0 3557 0 0 0\\n\"+\n                    \"cpu19 1272308 0 27306 32445340 2089 0 3541 0 0 0\\n\"+\n                    \"cpu20 1326369 5 29152 32386824 2458 0 4416 0 0 0\\n\"+\n                    \"cpu21 1320883 28 31886 32384709 2327 1 4869 0 0 0\\n\"+\n                    \"cpu22 1259498 1 26954 32458931 2247 0 3511 0 0 0\\n\"+\n                    \"cpu23 1279464 0 26694 32439550 1914 0 3571 0 0 0\\n\"+\n                    \"cpu24 1229977 19 32308 32471217 4191 0 4732 0 0 0\\n\"+\n                    \"cpu25 1329079 92 79253 32324092 5267 0 4821 0 0 0\\n\"+\n                    \"cpu26 1225922 30 34837 32475220 4000 0 4711 0 0 0\\n\"+\n                    \"cpu27 1261848 56 43928 32397341 3552 0 5625 0 0 0\\n\"+\n                    \"cpu28 1226707 20 36281 32463498 3935 4 5943 0 0 0\\n\"+\n                    \"cpu29 1379751 19 35593 32317723 2872 4 5913 0 0 0\\n\"+\n                    \"cpu30 1247661 0 32636 32455845 2033 0 4775 0 0 0\\n\"+\n                    \"cpu31 1219016 10 33804 32484916 2254 0 4756 0 0 0\\n\"+\n                    \"intr 840450413 1194 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 55 0 0 0 0 0 0 45 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 593665 88058 57766 41441 62426 61320 39848 39787 522984 116724 99144 95021 113975 99093 78676 78144 0 168858 168858 168858 162 2986764 4720950 3610168 5059579 3251008 2765017 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\"+\n                    \"ctxt 1506565570\\n\"+\n                    \"btime 1385196580\\n\"+\n                    \"processes 1226464\\n\"+\n                    \"procs_running 21\\n\"+\n                    \"procs_blocked 0\\n\"+\n                    \"softirq 793917930 0 156954983 77578 492842649 1992553 0 7758971 51856558 228040 82206598\\n\";\n\n    final String procTestData = \"16790 (java) S 1 16789 16789 0 -1 4202496 6714145 0 0 0 4773058 5391 0 0 20 0 110 0 33573283 64362651648 6467228 18446744073709551615 1073741824 1073778376 140734614041280 140734614032416 140242897981768 0 0 3 16800972 18446744073709551615 0 0 17 27 0 0 0 0 0\\n\";\n\n    parseSystemProcFile(sysTestData);\n    parseProcessProcFile(procTestData);\n    System.out.println(\"System idle ticks: \" + getSystemIdleTicks());\n    System.out.println(\"System total ticks: \" + getSystemTotalTicks());\n    System.out.println(\"Process total ticks: \" + getProcessTotalTicks());\n    System.out.println(\"Process RSS: \" + getProcessRss());\n    System.out.println(\"Number of cpus: \" + getCpuTicks().length);\n  }","id":10246,"modified_method":"/**\n   * Main is purely for command-line testing.\n   */\n  public static void main(String[] args) {\n    final String sysTestData =\n            \"cpu  43559117 24094 1632164 1033740407 245624 29 200080 0 0 0\\n\"+\n                    \"cpu0 1630761 1762 62861 31960072 40486 15 10614 0 0 0\\n\"+\n                    \"cpu1 1531923 86 62987 32118372 13190 0 6806 0 0 0\\n\"+\n                    \"cpu2 1436788 332 66513 32210723 10867 0 6772 0 0 0\\n\"+\n                    \"cpu3 1428700 1001 64574 32223156 8751 0 6811 0 0 0\\n\"+\n                    \"cpu4 1424410 152 62649 32232602 6552 0 6836 0 0 0\\n\"+\n                    \"cpu5 1427172 1478 58744 32233938 5471 0 6708 0 0 0\\n\"+\n                    \"cpu6 1418433 348 60957 32241807 5301 0 6639 0 0 0\\n\"+\n                    \"cpu7 1404882 182 60640 32258150 3847 0 6632 0 0 0\\n\"+\n                    \"cpu8 1485698 3593 67154 32101739 38387 0 9016 0 0 0\\n\"+\n                    \"cpu9 1422404 1601 66489 32193865 15133 0 8800 0 0 0\\n\"+\n                    \"cpu10 1383939 3386 69151 32233567 11219 0 8719 0 0 0\\n\"+\n                    \"cpu11 1376904 3051 65256 32246197 8307 0 8519 0 0 0\\n\"+\n                    \"cpu12 1381437 1496 68003 32237894 6966 0 8676 0 0 0\\n\"+\n                    \"cpu13 1376250 1527 66598 32247951 7020 0 8554 0 0 0\\n\"+\n                    \"cpu14 1364352 1573 65520 32262764 5093 0 8531 0 0 0\\n\"+\n                    \"cpu15 1359076 1176 64380 32269336 5219 0 8593 0 0 0\\n\"+\n                    \"cpu16 1363844 6 29612 32344252 4830 2 4366 0 0 0\\n\"+\n                    \"cpu17 1477797 1019 70211 32190189 6278 0 3731 0 0 0\\n\"+\n                    \"cpu18 1285849 30 29219 32428612 3549 0 3557 0 0 0\\n\"+\n                    \"cpu19 1272308 0 27306 32445340 2089 0 3541 0 0 0\\n\"+\n                    \"cpu20 1326369 5 29152 32386824 2458 0 4416 0 0 0\\n\"+\n                    \"cpu21 1320883 28 31886 32384709 2327 1 4869 0 0 0\\n\"+\n                    \"cpu22 1259498 1 26954 32458931 2247 0 3511 0 0 0\\n\"+\n                    \"cpu23 1279464 0 26694 32439550 1914 0 3571 0 0 0\\n\"+\n                    \"cpu24 1229977 19 32308 32471217 4191 0 4732 0 0 0\\n\"+\n                    \"cpu25 1329079 92 79253 32324092 5267 0 4821 0 0 0\\n\"+\n                    \"cpu26 1225922 30 34837 32475220 4000 0 4711 0 0 0\\n\"+\n                    \"cpu27 1261848 56 43928 32397341 3552 0 5625 0 0 0\\n\"+\n                    \"cpu28 1226707 20 36281 32463498 3935 4 5943 0 0 0\\n\"+\n                    \"cpu29 1379751 19 35593 32317723 2872 4 5913 0 0 0\\n\"+\n                    \"cpu30 1247661 0 32636 32455845 2033 0 4775 0 0 0\\n\"+\n                    \"cpu31 1219016 10 33804 32484916 2254 0 4756 0 0 0\\n\"+\n                    \"intr 840450413 1194 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 55 0 0 0 0 0 0 45 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 593665 88058 57766 41441 62426 61320 39848 39787 522984 116724 99144 95021 113975 99093 78676 78144 0 168858 168858 168858 162 2986764 4720950 3610168 5059579 3251008 2765017 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0  0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 00 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\\n\"+\n                    \"ctxt 1506565570\\n\"+\n                    \"btime 1385196580\\n\"+\n                    \"processes 1226464\\n\"+\n                    \"procs_running 21\\n\"+\n                    \"procs_blocked 0\\n\"+\n                    \"softirq 793917930 0 156954983 77578 492842649 1992553 0 7758971 51856558 228040 82206598\\n\";\n\n    final String procTestData = \"16790 (java) S 1 16789 16789 0 -1 4202496 6714145 0 0 0 4773058 5391 0 0 20 0 110 0 33573283 64362651648 6467228 18446744073709551615 1073741824 1073778376 140734614041280 140734614032416 140242897981768 0 0 3 16800972 18446744073709551615 0 0 17 27 0 0 0 0 0\\n\";\n\n    LinuxProcFileReader lpfr = new LinuxProcFileReader();\n    lpfr.parseSystemProcFile(sysTestData);\n    lpfr.parseProcessProcFile(procTestData);\n    System.out.println(\"System idle ticks: \" + lpfr.getSystemIdleTicks());\n    System.out.println(\"System total ticks: \" + lpfr.getSystemTotalTicks());\n    System.out.println(\"Process total ticks: \" + lpfr.getProcessTotalTicks());\n    System.out.println(\"Process RSS: \" + lpfr.getProcessRss());\n    System.out.println(\"Number of cpus: \" + lpfr.getCpuTicks().length);\n  }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"private static int getProcessIdFromJMX() {\n    // Note: may fail in some JVM implementations therefore fallback has to be provided.\n    // Something like '<pid>@<hostname>', at least in SUN / Oracle JVMs\n    final String jvmName = java.lang.management.ManagementFactory.getRuntimeMXBean().getName();\n    final int index = jvmName.indexOf('@');\n    return index < 1 ? -1 // part before '@' empty (index = 0) / '@' not found (index = -1)\n      : Integer.parseInt(jvmName.substring(0, index));\n  }","id":10247,"modified_method":"private static String getProcessId() throws Exception {\n    // Note: may fail in some JVM implementations\n    // therefore fallback has to be provided\n\n    // something like '<pid>@<hostname>', at least in SUN / Oracle JVMs\n    final String jvmName = java.lang.management.ManagementFactory.getRuntimeMXBean().getName();\n    final int index = jvmName.indexOf('@');\n\n    if (index < 1) {\n      // part before '@' empty (index = 0) / '@' not found (index = -1)\n      throw new Exception (\"Can't get process Id\");\n    }\n\n    return Long.toString(Long.parseLong(jvmName.substring(0, index)));\n  }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return resident set size (RSS) of this process. */\n  public static long getProcessRss() { return _processRss; }","id":10248,"modified_method":"/**\n   * @return resident set size (RSS) of this process.\n   */\n  public long getProcessRss()        { assert _processRss > 0;         return _processRss; }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"private static String readSystemProcFile() {\n    try { return readFile(new File(\"/proc/stat\")); }\n    catch( IOException ignore ) { return null; }\n  }","id":10249,"modified_method":"private void readSystemProcFile() {\n    try {\n      _systemData = readFile(new File(\"/proc/stat\"));\n    }\n    catch (Exception ignore) {}\n  }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/**  Array of ticks:  [cpu number][tick type]\n   *\n   * tick types are:\n   * [0] user ticks\n   * [1] system ticks\n   * [2] other ticks (i/o)\n   * [3] idle ticks\n   *\n   * @return ticks array for each cpu of the system.\n   */\n  public static long[][] getCpuTicks() { return CPUTICKS; }","id":10250,"modified_method":"/**\n   * Array of ticks.\n   * [cpu number][tick type]\n   *\n   * tick types are:\n   *\n   * [0] user ticks\n   * [1] system ticks\n   * [2] other ticks (i/o)\n   * [3] idle ticks\n   *\n   * @return ticks array for each cpu of the system.\n   */\n  public long[][] getCpuTicks()      { assert _cpuTicks != null;       return _cpuTicks.toArray(new long[0][0]); }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"private static void readProcessNumOpenFds(int pid) {\n    if( pid == -1 ) return;\n    String[] arr = new File(\"/proc/\" + pid + \"/fd\").list();\n    _processNumOpenFds = arr == null ? 0 : arr.length;\n  }","id":10251,"modified_method":"private void readProcessNumOpenFds(String pid) {\n    try {\n      String s = \"/proc/\" + pid + \"/fd\";\n      File f = new File(s);\n      String[] arr = f.list();\n      if (arr != null) {\n        _processNumOpenFds = arr.length;\n      }\n    }\n    catch (Exception ignore) {}\n  }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return process id for this node  */\n  public static int getProcessID() { return PID; }","id":10252,"modified_method":"/**\n   * @return process id for this node as a String.\n   */\n  public String getProcessID() { return _pid; }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return ticks the system was idle.  in general:  idle + busy == 100% */\n  public static long getSystemIdleTicks() { return _systemIdleTicks; }","id":10253,"modified_method":"/**\n   * @return ticks the system was idle.  in general:  idle + busy == 100%\n   */\n  public long getSystemIdleTicks()   { assert _systemIdleTicks > 0;    return _systemIdleTicks; }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return number of set bits in hexadecimal string (chars must be 0-F) */\n  private static char numSetBitsHex(String s) {\n    // Look-up table for num set bits in 4-bit char\n    final int[] bits_set = {0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4};\n    char nset = 0;\n    for(int i = 0; i < s.length(); i++) {\n      Character ch = s.charAt(i);\n      if (ch == ',') continue;\n      int x = Integer.parseInt(ch.toString(), 16);\n      nset += bits_set[x];\n    }\n    return nset;\n  }","id":10254,"modified_method":"/**\n   * @return number of set bits in hexadecimal string (chars must be 0-F)\n   */\n  public static int numSetBitsHex(String s) {\n    // Look-up table for num set bits in 4-bit char\n    final int[] bits_set = {0, 1, 1, 2, 1, 2, 2, 3, 1, 2, 2, 3, 2, 3, 3, 4};\n\n    int nset = 0;\n    for(int i = 0; i < s.length(); i++) {\n      Character ch = s.charAt(i);\n      if (ch == ',') {\n        continue;\n      }\n      int x = Integer.parseInt(ch.toString(), 16);\n      nset += bits_set[x];\n    }\n    return nset;\n  }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return number of currently open fds of this process.  */\n  public static int getProcessNumOpenFds() { return _processNumOpenFds; }","id":10255,"modified_method":"/**\n   * @return number of currently open fds of this process.\n   */\n  public int getProcessNumOpenFds() { assert _processNumOpenFds > 0;  return _processNumOpenFds; }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return true if all the values are ok to use; false otherwise. */\n  private static boolean valid() {\n    return _systemIdleTicks >= 0 && _systemTotalTicks >= 0 && _processTotalTicks >= 0 && _processNumOpenFds >= 0;\n  }","id":10256,"modified_method":"/**\n   * @return true if all the values are ok to use; false otherwise.\n   */\n  public boolean valid() {\n    return ((_systemIdleTicks >= 0) && (_systemTotalTicks >= 0) && (_processTotalTicks >= 0) &&\n            (_processNumOpenFds >= 0));\n  }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"private static String readProcessProcFile(int pid) {\n    try { return pid == -1 ? null : readFile(new File(\"/proc/\"+pid+\"/stat\")); }\n    catch( IOException ignore ) { return null; }\n  }","id":10257,"modified_method":"private void readProcessProcFile(String pid) {\n    try {\n      String s = \"/proc/\" + pid + \"/stat\";\n      _processData = readFile(new File(s));\n    }\n    catch (Exception ignore) {}\n  }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"private static char parseProcessStatusFile(String s) {\n    char cpus = (char) Runtime.getRuntime().availableProcessors();\n    if(s == null) return cpus;\n    try {\n      Matcher m = Pattern.compile(\"Cpus_allowed:\\\\s+([A-Fa-f0-9,]+)\").matcher(s);\n      return m.find() ? numSetBitsHex(m.group(1)) : cpus;\n    }\n    catch( Exception ignore ) { return cpus; }\n  }","id":10258,"modified_method":"private void parseProcessStatusFile(String s) {\n    if(s == null) return;\n    try {\n      Pattern p = Pattern.compile(\"Cpus_allowed:\\\\s+([A-Fa-f0-9,]+)\");\n      Matcher m = p.matcher(s);\n      boolean b = m.find();\n      if (! b) {\n        return;\n      }\n      _processCpusAllowed = numSetBitsHex(m.group(1));\n    }\n    catch (Exception ignore) {}\n  }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return ticks this process was running. */\n  public static long getProcessTotalTicks() { return _processTotalTicks; }","id":10259,"modified_method":"/**\n   * @return ticks this process was running.\n   */\n  public long getProcessTotalTicks() { assert _processTotalTicks > 0;  return _processTotalTicks; }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"private static String readFile(File f) throws IOException {\n    int bytesRead = 0;\n    try(FileReader fr = new FileReader(f)) {\n        synchronized(buffer) {\n          while (true) {\n            int n = fr.read(buffer, bytesRead, buffer.length - bytesRead);\n            if( n < 0 ) return new String(buffer, 0, bytesRead);\n            bytesRead += n;\n            if( bytesRead >= buffer.length ) throw new IOException(\"LinuxProcFileReader readFile unexpected buffer full\");\n          }\n        }\n    }\n  }","id":10260,"modified_method":"private String readFile(File f) throws Exception {\n    char[] buffer = new char[16 * 1024];\n    FileReader fr = new FileReader(f);\n    int bytesRead = 0;\n    while (true) {\n      int n = fr.read(buffer, bytesRead, buffer.length - bytesRead);\n      if (n < 0) {\n        fr.close();\n        return new String (buffer, 0, bytesRead);\n      }\n      else if (n == 0) {\n        // This is weird.\n        fr.close();\n        throw new Exception(\"LinuxProcFileReader readFile read 0 bytes\");\n      }\n\n      bytesRead += n;\n\n      if (bytesRead >= buffer.length) {\n        fr.close();\n        throw new Exception(\"LinuxProcFileReader readFile unexpected buffer full\");\n      }\n    }\n  }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/** @return ticks the system was up. */\n  public static long getSystemTotalTicks() { return _systemTotalTicks; }","id":10261,"modified_method":"/**\n   * @return ticks the system was up.\n   */\n  public long getSystemTotalTicks()  { assert _systemTotalTicks > 0;   return _systemTotalTicks; }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public GetLogTask() {\n      super( H2O.MIN_HI_PRIORITY);\n      log = null;\n    }","id":10262,"modified_method":"public GetLogTask() {\n      super(H2O.GUI_PRIORITY);\n      log = null;\n    }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public void doIt() {\n      String logPathFilename = \"/undefined\";        // Satisfy IDEA inspection.\n      try {\n        if (name == null || name.equals(\"default\")) {\n          name = \"debug\";\n        }\n\n        if (name.equals(\"stdout\") || name.equals(\"stderr\")) {\n          if (! LinuxProcFileReader.refresh()) {\n            log = \"This option only works for Linux hosts\";\n          }\n          else {\n            int pid = LinuxProcFileReader.getProcessID();\n            String fdFileName = \"/proc/\" + pid + \"/fd/\" + (name.equals(\"stdout\") ? \"1\" : \"2\");\n            File f = new File(fdFileName);\n            logPathFilename = f.getCanonicalPath();\n            if (logPathFilename.startsWith(\"/dev\")) {\n              log = \"Unsupported when writing to console\";\n            }\n            if (logPathFilename.startsWith(\"socket\")) {\n              log = \"Unsupported when writing to a socket\";\n            }\n            if (logPathFilename.startsWith(\"pipe\")) {\n              log = \"Unsupported when writing to a pipe\";\n            }\n            if (logPathFilename.equals(fdFileName)) {\n              log = \"Unsupported when writing to a pipe\";\n            }\n            Log.trace(\"LogPathFilename calculation: \" + logPathFilename);\n          }\n        }\n        else if (  name.equals(\"trace\")\n                || name.equals(\"debug\")\n                || name.equals(\"info\")\n                || name.equals(\"warn\")\n                || name.equals(\"error\")\n                || name.equals(\"fatal\")\n                || name.equals(\"httpd\")\n                ) {\n          name = water.util.Log.getLogFileName(name);\n          try {\n            String logDir = Log.getLogDir();\n            logPathFilename = logDir + File.separator + name;\n          }\n          catch (Exception e) {\n            log = \"H2O logging not configured.\";\n          }\n        }\n        else {\n          throw new IllegalArgumentException(\"Illegal log file name requested (try 'default')\");\n        }\n\n        if (log == null) {\n          File f = new File(logPathFilename);\n          if (!f.exists()) {\n            throw new IllegalArgumentException(\"File \" + f + \" does not exist\");\n          }\n          if (!f.canRead()) {\n            throw new IllegalArgumentException(\"File \" + f + \" is not readable\");\n          }\n\n          BufferedReader reader = new BufferedReader(new FileReader(f));\n          String line;\n          StringBuilder sb = new StringBuilder();\n\n          line = reader.readLine();\n          while (line != null) {\n            sb.append(line);\n            sb.append(\"\\n\");\n            line = reader.readLine();\n          }\n          reader.close();\n\n          log = sb.toString();\n        }\n\n        success = true;\n      }\n      catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }","id":10263,"modified_method":"public void doIt() {\n      String logPathFilename = \"/undefined\";        // Satisfy IDEA inspection.\n      try {\n        if (name == null || name.equals(\"default\")) {\n          name = \"debug\";\n        }\n\n        if (name.equals(\"stdout\") || name.equals(\"stderr\")) {\n          LinuxProcFileReader lpfr = new LinuxProcFileReader();\n          lpfr.read();\n          if (! lpfr.valid()) {\n            log = \"This option only works for Linux hosts\";\n          }\n          else {\n            String pid = lpfr.getProcessID();\n            String fdFileName = \"/proc/\" + pid + \"/fd/\" + (name.equals(\"stdout\") ? \"1\" : \"2\");\n            File f = new File(fdFileName);\n            logPathFilename = f.getCanonicalPath();\n            if (logPathFilename.startsWith(\"/dev\")) {\n              log = \"Unsupported when writing to console\";\n            }\n            if (logPathFilename.startsWith(\"socket\")) {\n              log = \"Unsupported when writing to a socket\";\n            }\n            if (logPathFilename.startsWith(\"pipe\")) {\n              log = \"Unsupported when writing to a pipe\";\n            }\n            if (logPathFilename.equals(fdFileName)) {\n              log = \"Unsupported when writing to a pipe\";\n            }\n            Log.trace(\"LogPathFilename calculation: \" + logPathFilename);\n          }\n        }\n        else if (  name.equals(\"trace\")\n                || name.equals(\"debug\")\n                || name.equals(\"info\")\n                || name.equals(\"warn\")\n                || name.equals(\"error\")\n                || name.equals(\"fatal\")\n                || name.equals(\"httpd\")\n                ) {\n          name = water.util.Log.getLogFileName(name);\n          try {\n            String logDir = Log.getLogDir();\n            logPathFilename = logDir + File.separator + name;\n          }\n          catch (Exception e) {\n            log = \"H2O logging not configured.\";\n          }\n        }\n        else {\n          throw new IllegalArgumentException(\"Illegal log file name requested (try 'default')\");\n        }\n\n        if (log == null) {\n          File f = new File(logPathFilename);\n          if (!f.exists()) {\n            throw new IllegalArgumentException(\"File \" + f + \" does not exist\");\n          }\n          if (!f.canRead()) {\n            throw new IllegalArgumentException(\"File \" + f + \" is not readable\");\n          }\n\n          BufferedReader reader = new BufferedReader(new FileReader(f));\n          String line;\n          StringBuilder sb = new StringBuilder();\n\n          line = reader.readLine();\n          while (line != null) {\n            sb.append(line);\n            sb.append(\"\\n\");\n            line = reader.readLine();\n          }\n          reader.close();\n\n          log = sb.toString();\n        }\n\n        success = true;\n      }\n      catch (Exception e) {\n        throw new RuntimeException(e);\n      }\n    }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override public void compute2() {\n      // In the case where there isn't any tick information, the client\n      // receives a json response object containing an array of length 0;\n      // e.g. { cpuTicks: [] }\n      _cpuTicks = LinuxProcFileReader.refresh() ? LinuxProcFileReader.getCpuTicks() : new long[0][0];\n      tryComplete();\n    }","id":10264,"modified_method":"@Override public void compute2() {\n      LinuxProcFileReader lpfr = new LinuxProcFileReader();\n      lpfr.read();\n      if (lpfr.valid()) {\n        _cpuTicks = lpfr.getCpuTicks();\n      }\n      else {\n        // In the case where there isn't any tick information, the client receives a json\n        // response object containing an array of length 0.\n        //\n        // e.g.\n        // { cpuTicks: [] }\n        _cpuTicks = new long[0][0];\n      }\n\n      tryComplete();\n    }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"GetTicksTask() { super(H2O.GUI_PRIORITY); }","id":10265,"modified_method":"public GetTicksTask() {\n      super(H2O.GUI_PRIORITY);\n      _cpuTicks = null;\n    }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public void doIt() {\n    H2ONode node = H2O.CLOUD._memary[nodeidx];\n    // Synchronous RPC call to get ticks from remote (possibly this) node.\n    cpu_ticks = new RPC<>(node, new GetTicksTask()).call().get()._cpuTicks;\n  }","id":10266,"modified_method":"public void doIt() {\n    H2ONode node = H2O.CLOUD._memary[nodeidx];\n    GetTicksTask ppt = new GetTicksTask();\n    Log.trace(\"GetTicksTask starting to node \" + nodeidx + \"...\");\n    // Synchronous RPC call to get ticks from remote (possibly this) node.\n    new RPC<>(node, ppt).call().get();\n    Log.trace(\"GetTicksTask completed to node \" + nodeidx);\n    cpu_ticks = ppt._cpuTicks;\n  }","commit_id":"3fc426e62a2f377e56503f2af0e80206f9d2d300","url":"https://github.com/h2oai/h2o-3"},{"original_method":"public void updateSelectedTracks() {\n\t\tif (selectedTrack != null) {\n\t\t\tGpxSelectionHelper gpx = ((OsmandApplication) getApplication()).getSelectedGpxHelper();\n\t\t\tString vl = getString(R.string.selected_track);\n\t\t\tif (gpx.isShowingAnyGpxFiles()) {\n\t\t\t\tvl += \" (\" + gpx.getSelectedGPXFiles().size()\n\t\t\t\t\t\t+ \")\";\n\t\t\t} else {\n\t\t\t\tvl += \" (0)\";\n\t\t\t}\n\t\t\ttry {\n\t\t\t\t((TextView)tabHost.getTabWidget().getChildAt(2).findViewById(android.R.id.title)).setText(vl);\n\t\t\t} catch (Exception e) {\n\t\t\t}\n\t\t\tmTabsAdapter.notifyDataSetChanged();\n\t\t}\n\t}","id":10267,"modified_method":"public void updateSelectedTracks() {\n\t\tfor (WeakReference<Fragment> ref : fragList) {\n\t\t\tFragment f = ref.get();\n\t\t\tif (f instanceof SelectedGPXFragment && !f.isDetached()) {\n\t\t\t\tGpxSelectionHelper gpx = ((OsmandApplication) getApplication()).getSelectedGpxHelper();\n\t\t\t\tString vl = getString(R.string.selected_track);\n\t\t\t\tif (gpx.isShowingAnyGpxFiles()) {\n\t\t\t\t\tvl += \" (\" + gpx.getSelectedGPXFiles().size()\n\t\t\t\t\t\t\t+ \")\";\n\t\t\t\t} else {\n\t\t\t\t\tvl += \" (0)\";\n\t\t\t\t}\n\t\t\t\ttry{\n\t\t\t\t\t((TextView)f.getView().findViewById(android.R.id.title)).setText(vl);\n\t\t\t\t} catch (NullPointerException e) {\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"da816e8a9f0e1a0110d54597d00f58b16a33d86f","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\tpublic void onCreate(Bundle icicle) {\n        //This has to be called before setContentView and you must use the\n        //class in com.actionbarsherlock.view and NOT android.view\n\t\t((OsmandApplication) getApplication()).applyTheme(this);\n\t\tsuper.onCreate(icicle);\n\t\tsetSupportProgressBarIndeterminateVisibility(false);\n\t\tgetSupportActionBar().setDisplayHomeAsUpEnabled(true);\n\t\tgetSupportActionBar().setTitle(R.string.favorites_Button);\n//\t\tgetSupportActionBar().setTitle(\"\");\n\t\t// getSupportActionBar().setIcon(R.drawable.tab_search_favorites_icon);\n\t\tFile[] lf = ((OsmandApplication) getApplication()).getAppPath(TRACKS).listFiles();\n\t\tboolean hasGpx =  false;\n\t\tif(lf != null) {\n\t\t\tfor(File t : lf) {\n\t\t\t\tif(t.isDirectory() || (t.getName().toLowerCase().endsWith(\".gpx\"))) {\n\t\t\t\t\thasGpx = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(!hasGpx) {\n\t\t\tsetContentView(R.layout.search_activity_single);\n\t\t\tgetSupportFragmentManager().beginTransaction().add(R.id.layout, new FavouritesTreeFragment()).commit();\n\t\t} else {\n\t\t\tsetContentView(R.layout.tab_content);\n\t\t\ttabHost = (TabHost) findViewById(android.R.id.tabhost);\n\t\t\ttabHost.setup();\n\n\t\t\tOsmandSettings settings = ((OsmandApplication) getApplication()).getSettings();\n\t\t\tInteger tab = settings.FAVORITES_TAB.get();\n\t\t\tViewPager mViewPager = (ViewPager) findViewById(R.id.pager);\n\t\t\tmTabsAdapter = new TabsAdapter(this, tabHost, mViewPager, settings, true);\n\t\t\tmTabsAdapter.addTab(tabHost.newTabSpec(FAVOURITES_INFO).setIndicator(getString(R.string.my_favorites)),\n\t\t\t\t\tFavouritesTreeFragment.class, null);\n\t\t\tmTabsAdapter.addTab(tabHost.newTabSpec(TRACKS).setIndicator(getString(R.string.my_tracks)),\n\t\t\t\t\tAvailableGPXFragment.class, null);\n\t\t\tselectedTrack = mTabsAdapter.addTab(tabHost.newTabSpec(SELECTED_TRACK).setIndicator(getString(R.string.selected_track)),\n\t\t\t\t\tSelectedGPXFragment.class, null);\n\t\t\tIntent intent = getIntent();\n\t\t\tif(intent != null) {\n\t\t\t\tint tt = intent.getIntExtra(TAB_PARAM, -1);\n\t\t\t\tif(tt >= 0) {\n\t\t\t\t\ttabHost.setCurrentTab(tt);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\ttabHost.setCurrentTab(tab);\n\t\t\t}\n\t\t\tupdateSelectedTracks();\n\t\t}\n\t}","id":10268,"modified_method":"@Override\n\tpublic void onCreate(Bundle icicle) {\n        //This has to be called before setContentView and you must use the\n        //class in com.actionbarsherlock.view and NOT android.view\n\t\t((OsmandApplication) getApplication()).applyTheme(this);\n\t\tsuper.onCreate(icicle);\n\t\tsetSupportProgressBarIndeterminateVisibility(false);\n\t\tgetSupportActionBar().setDisplayHomeAsUpEnabled(true);\n\t\tgetSupportActionBar().setTitle(R.string.favorites_Button);\n//\t\tgetSupportActionBar().setTitle(\"\");\n\t\t// getSupportActionBar().setIcon(R.drawable.tab_search_favorites_icon);\n\t\tFile[] lf = ((OsmandApplication) getApplication()).getAppPath(TRACKS).listFiles();\n\t\tboolean hasGpx =  false;\n\t\tif(lf != null) {\n\t\t\tfor(File t : lf) {\n\t\t\t\tif(t.isDirectory() || (t.getName().toLowerCase().endsWith(\".gpx\"))) {\n\t\t\t\t\thasGpx = true;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t\n\t\tif(!hasGpx) {\n\t\t\tsetContentView(R.layout.search_activity_single);\n\t\t\tgetSupportFragmentManager().beginTransaction().add(R.id.layout, new FavouritesTreeFragment()).commit();\n\t\t} else {\n\t\t\tsetContentView(R.layout.search_main);\n\n\t\t\tPagerSlidingTabStrip mSlidingTabLayout = (PagerSlidingTabStrip) findViewById(R.id.sliding_tabs);\n\t\t\tOsmandSettings settings = ((OsmandApplication) getApplication()).getSettings();\n\t\t\tInteger tab = settings.FAVORITES_TAB.get();\n\t\t\tViewPager mViewPager = (ViewPager) findViewById(R.id.pager);\n\t\t\tmTabs.add(getTabIndicator(R.string.my_favorites, FavouritesTreeFragment.class));\n\t\t\tmTabs.add(getTabIndicator(R.string.my_tracks, AvailableGPXFragment.class));\n\t\t\tmTabs.add(getTabIndicator(R.string.selected_track, SelectedGPXFragment.class));\n\n\t\t\tsetViewPagerAdapter(mViewPager);\n\t\t\tmSlidingTabLayout.setViewPager(mViewPager);\n\n\n\t\t\tIntent intent = getIntent();\n\t\t\tif(intent != null) {\n\t\t\t\tint tt = intent.getIntExtra(TAB_PARAM, -1);\n\t\t\t\tif(tt >= 0) {\n\t\t\t\t\tmViewPager.setCurrentItem(tt);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tmViewPager.setCurrentItem(tab);\n\t\t\t}\n\t\t\tupdateSelectedTracks();\n\t\t}\n\t}","commit_id":"da816e8a9f0e1a0110d54597d00f58b16a33d86f","url":"https://github.com/osmandapp/Osmand"},{"original_method":"@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\t((OsmandApplication) getApplication()).applyTheme(this);\n\t\tsuper.onCreate(savedInstanceState);\n\t\tlong t = System.currentTimeMillis();\n\t\tgetSupportActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);\n\t\tsetContentView(R.layout.search_main);\n\t\tsettings = ((OsmandApplication) getApplication()).getSettings();\n\t\tInteger tab = settings.SEARCH_TAB.get();\n\t\tshowOnlyOneTab = getIntent() != null && getIntent().getBooleanExtra(SHOW_ONLY_ONE_TAB, false);\n\t\tgetSupportActionBar().setDisplayHomeAsUpEnabled(true);\n\t\tgetSupportActionBar().setTitle(\"\");\n\t\tgetSupportActionBar().setElevation(0);\n//\t\tgetSupportActionBar().setBackgroundDrawable(new ColorDrawable(Color.parseColor(\"#39464d\")));\n//\t\tgetSupportActionBar().setTitle(R.string.select_search_position);\n\n        \n\t\t\n\t\tif (!showOnlyOneTab) {\n\t\t\tViewPager mViewPager = (ViewPager) findViewById(R.id.pager);\n\t\t\tPagerSlidingTabStrip mSlidingTabLayout = (PagerSlidingTabStrip) findViewById(R.id.sliding_tabs);\n\n\t\t\tmTabs.add(getTabIndicator(R.drawable.tab_search_poi_icon, R.string.poi, getFragment(POI_TAB_INDEX)));\n\t\t\tmTabs.add(getTabIndicator(R.drawable.tab_search_address_icon, R.string.address, getFragment(ADDRESS_TAB_INDEX)));\n\t\t\tmTabs.add(getTabIndicator(R.drawable.tab_search_location_icon, R.string.search_tabs_location, getFragment(LOCATION_TAB_INDEX)));\n\t\t\tmTabs.add(getTabIndicator(R.drawable.tab_search_favorites_icon, R.string.favorite, getFragment(FAVORITES_TAB_INDEX)));\n\t\t\tmTabs.add(getTabIndicator(R.drawable.tab_search_history_icon, R.string.history, getFragment(HISTORY_TAB_INDEX)));\n\n\t\t\t\n\t\t\tmViewPager.setAdapter(new SearchFragmentPagerAdapter(getSupportFragmentManager()));\n\t\t\tmSlidingTabLayout.setViewPager(mViewPager);\n\t\t\t\n\t\t\tmViewPager.setCurrentItem(Math.min(tab, HISTORY_TAB_INDEX));\n\t\t\tmSlidingTabLayout.setOnPageChangeListener(new OnPageChangeListener() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onPageSelected(int arg0) {\n\t\t\t\t\tsettings.SEARCH_TAB.set(arg0);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onPageScrolled(int arg0, float arg1, int arg2) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onPageScrollStateChanged(int arg0) {\n\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tsetContentView(R.layout.search_activity_single);\n\t\t\tClass<?> cl = getFragment(tab);\n\t\t\ttry {\n\t\t\t\tgetSupportFragmentManager().beginTransaction().replace(R.id.layout, (Fragment) cl.newInstance()).commit();\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new IllegalStateException(e);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new IllegalStateException(e);\n\t\t\t}\n        }\n        setTopSpinner();\n\t\t\n\t\tLog.i(\"net.osmand\", \"Start on create \" + (System.currentTimeMillis() - t ));\n\t\t\n\t\tIntent intent = getIntent();\n\t\tOsmandSettings settings = ((OsmandApplication) getApplication()).getSettings();\n\t\tLatLon last = settings.getLastKnownMapLocation();\n\t\tif (intent != null) {\n\t\t\tdouble lat = intent.getDoubleExtra(SEARCH_LAT, 0);\n\t\t\tdouble lon = intent.getDoubleExtra(SEARCH_LON, 0);\n\t\t\tif (lat != 0 || lon != 0) {\n\t\t\t\tLatLon l = new LatLon(lat, lon);\n\t\t\t\tif(!Algorithms.objectEquals(reqSearchPoint, l)){\n\t\t\t\t\treqSearchPoint = l;\n\t\t\t\t\tif ((Math.abs(lat - last.getLatitude()) < 0.00001) && (Math.abs(lon - last.getLongitude()) < 0.00001)) {\n\t\t\t\t\t\tupdateSearchPoint(reqSearchPoint, getString(R.string.select_search_position) + \" \" + getString(R.string.search_position_map_view), false);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tupdateSearchPoint(reqSearchPoint, getString(R.string.select_search_position) + \" \", true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(searchPoint == null){\n\t\t\tif(!Algorithms.objectEquals(reqSearchPoint, last)){\n\t\t\t\treqSearchPoint = last;\n\t\t\t\tupdateSearchPoint(last, getString(R.string.select_search_position) + \" \" + getString(R.string.search_position_map_view), false);\n\t\t\t}\n\t\t}\n    }","id":10269,"modified_method":"@Override\n\tprotected void onCreate(Bundle savedInstanceState) {\n\t\t((OsmandApplication) getApplication()).applyTheme(this);\n\t\tsuper.onCreate(savedInstanceState);\n\t\tlong t = System.currentTimeMillis();\n\t\tgetSupportActionBar().setNavigationMode(ActionBar.NAVIGATION_MODE_LIST);\n\t\tsetContentView(R.layout.search_main);\n\t\tsettings = ((OsmandApplication) getApplication()).getSettings();\n\t\tInteger tab = settings.SEARCH_TAB.get();\n\t\tshowOnlyOneTab = getIntent() != null && getIntent().getBooleanExtra(SHOW_ONLY_ONE_TAB, false);\n\t\tgetSupportActionBar().setDisplayHomeAsUpEnabled(true);\n\t\tgetSupportActionBar().setTitle(\"\");\n\t\tgetSupportActionBar().setElevation(0);\n\n\t\tif (!showOnlyOneTab) {\n\t\t\tViewPager mViewPager = (ViewPager) findViewById(R.id.pager);\n\t\t\tPagerSlidingTabStrip mSlidingTabLayout = (PagerSlidingTabStrip) findViewById(R.id.sliding_tabs);\n\n\t\t\tmTabs.add(getTabIndicator(R.string.poi, getFragment(POI_TAB_INDEX)));\n\t\t\tmTabs.add(getTabIndicator(R.string.address, getFragment(ADDRESS_TAB_INDEX)));\n\t\t\tmTabs.add(getTabIndicator(R.string.search_tabs_location, getFragment(LOCATION_TAB_INDEX)));\n\t\t\tmTabs.add(getTabIndicator(R.string.favorite, getFragment(FAVORITES_TAB_INDEX)));\n\t\t\tmTabs.add(getTabIndicator(R.string.history, getFragment(HISTORY_TAB_INDEX)));\n\n\t\t\t\n\t\t\tsetViewPagerAdapter(mViewPager);\n\t\t\tmSlidingTabLayout.setViewPager(mViewPager);\n\t\t\t\n\t\t\tmViewPager.setCurrentItem(Math.min(tab, HISTORY_TAB_INDEX));\n\t\t\tmSlidingTabLayout.setOnPageChangeListener(new OnPageChangeListener() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onPageSelected(int arg0) {\n\t\t\t\t\tsettings.SEARCH_TAB.set(arg0);\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onPageScrolled(int arg0, float arg1, int arg2) {\n\t\t\t\t}\n\n\t\t\t\t@Override\n\t\t\t\tpublic void onPageScrollStateChanged(int arg0) {\n\n\t\t\t\t}\n\t\t\t});\n\t\t} else {\n\t\t\tsetContentView(R.layout.search_activity_single);\n\t\t\tClass<?> cl = getFragment(tab);\n\t\t\ttry {\n\t\t\t\tgetSupportFragmentManager().beginTransaction().replace(R.id.layout, (Fragment) cl.newInstance()).commit();\n\t\t\t} catch (InstantiationException e) {\n\t\t\t\tthrow new IllegalStateException(e);\n\t\t\t} catch (IllegalAccessException e) {\n\t\t\t\tthrow new IllegalStateException(e);\n\t\t\t}\n        }\n        setTopSpinner();\n\t\t\n\t\tLog.i(\"net.osmand\", \"Start on create \" + (System.currentTimeMillis() - t ));\n\t\t\n\t\tIntent intent = getIntent();\n\t\tOsmandSettings settings = ((OsmandApplication) getApplication()).getSettings();\n\t\tLatLon last = settings.getLastKnownMapLocation();\n\t\tif (intent != null) {\n\t\t\tdouble lat = intent.getDoubleExtra(SEARCH_LAT, 0);\n\t\t\tdouble lon = intent.getDoubleExtra(SEARCH_LON, 0);\n\t\t\tif (lat != 0 || lon != 0) {\n\t\t\t\tLatLon l = new LatLon(lat, lon);\n\t\t\t\tif(!Algorithms.objectEquals(reqSearchPoint, l)){\n\t\t\t\t\treqSearchPoint = l;\n\t\t\t\t\tif ((Math.abs(lat - last.getLatitude()) < 0.00001) && (Math.abs(lon - last.getLongitude()) < 0.00001)) {\n\t\t\t\t\t\tupdateSearchPoint(reqSearchPoint, getString(R.string.select_search_position) + \" \" + getString(R.string.search_position_map_view), false);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tupdateSearchPoint(reqSearchPoint, getString(R.string.select_search_position) + \" \", true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif(searchPoint == null){\n\t\t\tif(!Algorithms.objectEquals(reqSearchPoint, last)){\n\t\t\t\treqSearchPoint = last;\n\t\t\t\tupdateSearchPoint(last, getString(R.string.select_search_position) + \" \" + getString(R.string.search_position_map_view), false);\n\t\t\t}\n\t\t}\n    }","commit_id":"da816e8a9f0e1a0110d54597d00f58b16a33d86f","url":"https://github.com/osmandapp/Osmand"},{"original_method":"public JobEntryMssqlBulkLoad(String n)\n\t{\n\t\tsuper(n, \"\");\n\t\ttablename=null;\n\t\tschemaname=null;\n\t\tfilename=null;\n\t\tseparator=null;\n\t\tlineterminated=null;\n\t\ttakelines = \"0\";\n\t\torderby=null;\n\t\tconnection=null;\n\t\taddfiletoresult = false;\n\t\tsetID(-1L);\n\t\tsetJobEntryType(JobEntryType.MSSQL_BULK_LOAD);\n\t}","id":10270,"modified_method":"public JobEntryMssqlBulkLoad(String n)\n\t{\n\t\tsuper(n, \"\");\n\t\ttablename=null;\n\t\tschemaname=null;\n\t\tfilename=null;\r\n\t\tdatafiletype=\"char\";\n\t\tfieldterminator=null;\n\t\tlineterminated=null;\r\n\t\tcodepage=\"RAW\";\r\n\t\tspecificcodepage=null;\n\t\tstartfile = null;\r\n\t\tendfile= null;\n\t\torderby=null;\n\t\tconnection=null;\n\t\taddfiletoresult = false;\n\t\tsetID(-1L);\n\t\tsetJobEntryType(JobEntryType.MSSQL_BULK_LOAD);\n\t}","commit_id":"24b0cdb742699d152a5377294c1b08a8a181de81","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void loadRep(Repository rep, long id_jobentry, List<DatabaseMeta> databases, List<SlaveServer> slaveServers)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.loadRep(rep, id_jobentry, databases, slaveServers);\n\t\t\tschemaname      =      rep.getJobEntryAttributeString(id_jobentry,  \"schemaname\");\n\t\t\ttablename       =      rep.getJobEntryAttributeString(id_jobentry,  \"tablename\");\n\t\t\tfilename        =      rep.getJobEntryAttributeString(id_jobentry,  \"filename\");\n\t\t\tseparator       =      rep.getJobEntryAttributeString(id_jobentry,  \"separator\");\n\t\t\tlineterminated  =      rep.getJobEntryAttributeString(id_jobentry,  \"lineterminated\");\n\t\t\ttakelines     =      rep.getJobEntryAttributeString(id_jobentry,  \"takelines\");\n\t\t\torderby    =      rep.getJobEntryAttributeString(id_jobentry,  \"orderby\");\n\n\t\t\taddfiletoresult=rep.getJobEntryAttributeBoolean(id_jobentry, \"addfiletoresult\");\n\n\t\t\tlong id_db = rep.getJobEntryAttributeInteger(id_jobentry, \"id_database\");\n\t\t\tif (id_db>0)\n\t\t\t{\n\t\t\t\tconnection = DatabaseMeta.findDatabase(databases, id_db);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// This is were we end up in normally, the previous lines are for backward compatibility.\n\t\t\t\tconnection = DatabaseMeta.findDatabase(databases, rep.getJobEntryAttributeString(id_jobentry, \"connection\"));\n\t\t\t}\r\n\t\t\r\n\t\t\t\n\n\t\t}\n\t\tcatch(KettleDatabaseException dbe)\n\t\t{\n\t\t\tthrow new KettleException(\"Unable to load job entry of type 'Mysql bulk load' from the repository for id_jobentry=\"+id_jobentry, dbe);\n\t\t}\n\t}","id":10271,"modified_method":"public void loadRep(Repository rep, long id_jobentry, List<DatabaseMeta> databases, List<SlaveServer> slaveServers)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.loadRep(rep, id_jobentry, databases, slaveServers);\n\t\t\tschemaname      =      rep.getJobEntryAttributeString(id_jobentry,  \"schemaname\");\n\t\t\ttablename       =      rep.getJobEntryAttributeString(id_jobentry,  \"tablename\");\n\t\t\tfilename        =      rep.getJobEntryAttributeString(id_jobentry,  \"filename\");\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tdatafiletype       =      rep.getJobEntryAttributeString(id_jobentry,  \"datafiletype\");\n\t\t\tfieldterminator       =      rep.getJobEntryAttributeString(id_jobentry,  \"fieldterminator\");\r\n\t\t\t\n\t\t\tlineterminated  =      rep.getJobEntryAttributeString(id_jobentry,  \"lineterminated\");\r\n\t\t\tcodepage  =      rep.getJobEntryAttributeString(id_jobentry,  \"codepage\");\r\n\t\t\tspecificcodepage  =      rep.getJobEntryAttributeString(id_jobentry,  \"specificcodepage\");\r\n\t\t\t\n\t\t\tstartfile     =      rep.getJobEntryAttributeString(id_jobentry,  \"startfile\");\r\n\t\t\tendfile     =      rep.getJobEntryAttributeString(id_jobentry,  \"endfile\");\r\n\t\t\t\n\t\t\torderby    =      rep.getJobEntryAttributeString(id_jobentry,  \"orderby\");\n\n\t\t\taddfiletoresult=rep.getJobEntryAttributeBoolean(id_jobentry, \"addfiletoresult\");\n\n\t\t\tlong id_db = rep.getJobEntryAttributeInteger(id_jobentry, \"id_database\");\n\t\t\tif (id_db>0)\n\t\t\t{\n\t\t\t\tconnection = DatabaseMeta.findDatabase(databases, id_db);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// This is were we end up in normally, the previous lines are for backward compatibility.\n\t\t\t\tconnection = DatabaseMeta.findDatabase(databases, rep.getJobEntryAttributeString(id_jobentry, \"connection\"));\n\t\t\t}\r\n\t\t\r\n\t\t\t\n\n\t\t}\n\t\tcatch(KettleDatabaseException dbe)\n\t\t{\n\t\t\tthrow new KettleException(\"Unable to load job entry of type 'Mysql bulk load' from the repository for id_jobentry=\"+id_jobentry, dbe);\n\t\t}\n\t}","commit_id":"24b0cdb742699d152a5377294c1b08a8a181de81","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String getRealTakelines()\n\t{\n\t\treturn environmentSubstitute(getTakelines());\n\t}","id":10272,"modified_method":"public String getRealTakelines()\n\t{\n\t\treturn environmentSubstitute(getStartFile());\n\t}","commit_id":"24b0cdb742699d152a5377294c1b08a8a181de81","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void loadXML(Node entrynode, List<DatabaseMeta> databases, List<SlaveServer> slaveServers, Repository rep) throws KettleXMLException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.loadXML(entrynode, databases, slaveServers);\n\t\t\tschemaname  = XMLHandler.getTagValue(entrynode, \"schemaname\");\n\t\t\ttablename   = XMLHandler.getTagValue(entrynode, \"tablename\");\n\t\t\tfilename    = XMLHandler.getTagValue(entrynode, \"filename\");\n\t\t\tseparator   = XMLHandler.getTagValue(entrynode, \"separator\");\n\n\t\t\tlineterminated  = XMLHandler.getTagValue(entrynode, \"lineterminated\");\n\t\t\ttakelines     = XMLHandler.getTagValue(entrynode, \"takelines\");\n\t\t\torderby    = XMLHandler.getTagValue(entrynode, \"orderby\");\n\n\t\t\tString dbname   = XMLHandler.getTagValue(entrynode, \"connection\");\n\t\t\taddfiletoresult = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"addfiletoresult\"));\n\t\t\tconnection      = DatabaseMeta.findDatabase(databases, dbname);\r\n\n\t\t}\n\t\tcatch(KettleException e)\n\t\t{\n\t\t\tthrow new KettleXMLException(\"Unable to load job entry of type 'Mysql bulk load' from XML node\", e);\n\t\t}\n\t}","id":10273,"modified_method":"public void loadXML(Node entrynode, List<DatabaseMeta> databases, List<SlaveServer> slaveServers, Repository rep) throws KettleXMLException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.loadXML(entrynode, databases, slaveServers);\n\t\t\tschemaname  = XMLHandler.getTagValue(entrynode, \"schemaname\");\n\t\t\ttablename   = XMLHandler.getTagValue(entrynode, \"tablename\");\n\t\t\tfilename    = XMLHandler.getTagValue(entrynode, \"filename\");\r\n\t\t\t\r\n\t\t\t\r\n\t\t\tdatafiletype   = XMLHandler.getTagValue(entrynode, \"datafiletype\");\n\t\t\tfieldterminator   = XMLHandler.getTagValue(entrynode, \"fieldterminator\");\n\n\t\t\tlineterminated  = XMLHandler.getTagValue(entrynode, \"lineterminated\");\r\n\t\t\tcodepage  = XMLHandler.getTagValue(entrynode, \"codepage\");\r\n\t\t\tspecificcodepage  = XMLHandler.getTagValue(entrynode, \"specificcodepage\");\r\n\t\t\t\n\t\t\tstartfile     = XMLHandler.getTagValue(entrynode, \"startfile\");\r\n\t\t\tendfile     = XMLHandler.getTagValue(entrynode, \"endfile\");\r\n\t\t\t\n\t\t\torderby    = XMLHandler.getTagValue(entrynode, \"orderby\");\n\n\t\t\tString dbname   = XMLHandler.getTagValue(entrynode, \"connection\");\n\t\t\taddfiletoresult = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(entrynode, \"addfiletoresult\"));\n\t\t\tconnection      = DatabaseMeta.findDatabase(databases, dbname);\r\n\n\t\t}\n\t\tcatch(KettleException e)\n\t\t{\n\t\t\tthrow new KettleXMLException(\"Unable to load job entry of type 'Mysql bulk load' from XML node\", e);\n\t\t}\n\t}","commit_id":"24b0cdb742699d152a5377294c1b08a8a181de81","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public Result execute(Result previousResult, int nr, Repository rep, Job parentJob)\n\t{\r\n\t\tString TakeFirstNbrLines=null;\r\n\t\tString LineTerminatedby=null;\r\n\t\tString FieldTerminatedby=null;\r\n\r\n\t\tLogWriter log = LogWriter.getInstance();\n\r\n\t\tResult result = previousResult;\r\n\t\tresult.setResult(false);\n\n\t\tString vfsFilename = environmentSubstitute(filename);\n\n\t\t// Let's check the filename ...\r\n\t\tif (!Const.isEmpty(vfsFilename))\r\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// User has specified a file, We can continue ...\n\t\t\t\t//\n\t\t\t\t\n\t\t\t\t// This is running over VFS but we need a normal file.\n\t\t\t\t// As such, we're going to verify that it's a local file...\n\t\t\t\t// We're also going to convert VFS FileObject to File\n\t\t\t\t//\n\t\t\t\tFileObject fileObject = KettleVFS.getFileObject(vfsFilename);\n\t\t\t\tif (!(fileObject instanceof LocalFile)) {\n\t\t\t\t\t// MSSQL BUKL INSERT can only use local files, so that's what we limit ourselves to.\n\t\t\t\t\t//\n\t\t\t\t\tthrow new KettleException(Messages.getString(\"JobMssqlBulkLoad.Error.OnlyLocalFileSupported\",vfsFilename));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Convert it to a regular platform specific file name\n\t\t\t\t//\n\t\t\t\tString realFilename = KettleVFS.getFilename(fileObject);\n\t\t\t\t\n\t\t\t\t// Here we go... back to the regular scheduled program...\n\t\t\t\t//\n\t\t\t\tFile file = new File(realFilename);\n\t\t\t\tif (file.exists() && file.canRead())\r\n\t\t\t\t{\r\n\t\t\t\t\t// User has specified an existing file, We can continue ...\n\t\t\t\t\tif (log.isDetailed()) log.logDetailed(toString(), Messages.getString(\"JobMssqlBulkLoad.FileExists.Label\",realFilename));\n\t\n\t\t\t\t\tif (connection!=null)\r\n\t\t\t\t\t{\n\t\t\t\t\t\t// User has specified a connection, We can continue ...\n\t\t\t\t\t\tDatabase db = new Database(connection);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(db.getDatabaseMeta().getDatabaseType()!=DatabaseMeta.TYPE_DATABASE_MSSQL)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlog.logError(toString(),Messages.getString(\"JobMssqlBulkLoad.Error.DbNotMSSQL\",connection.getDatabaseName()));\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdb.shareVariablesWith(this);\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdb.connect();\r\n\t\t\t\t\t\t\t// Get schemaname\r\n\t\t\t\t\t\t\tString realSchemaname = environmentSubstitute(schemaname);\r\n\t\t\t\t\t\t\t// Get tablename\r\n\t\t\t\t\t\t\tString realTablename = environmentSubstitute(tablename);\r\n\t\r\n\t\t\t\t\t\t\tif (db.checkTableExists(realTablename))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// The table existe, We can continue ...\r\n\t\t\t\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobMssqlBulkLoad.TableExists.Label\",realTablename));\r\n\t\r\n\t\t\t\t\t\t\t\t// Add schemaname (Most the time Schemaname.Tablename)\r\n\t\t\t\t\t\t\t\tif (schemaname !=null)\r\n\t\t\t\t\t\t\t\t\trealTablename= realSchemaname + \".\" + realTablename;\r\n\t\r\n\t\t\t\t\t\t\t\t// Take the X first rows\r\n\t\t\t\t\t\t\t\tString nblinesTake=getRealTakelines();\r\n\t\t\t\t\t\t\t\tif(Const.toInt(nblinesTake,0)>0)\r\n\t\t\t\t\t\t\t\t\tTakeFirstNbrLines=\"FIRSTROW=\"+nblinesTake;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// FIELDTERMINATOR\r\n\t\t\t\t\t\t\t\tString Fieldterminator=getRealSeparator();\n\t\t\t\t\t\t\t\tif(!Const.isEmpty(Fieldterminator))\t\r\n\t\t\t\t\t\t\t\t\tFieldTerminatedby=\"FIELDTERMINATOR='\"+Fieldterminator+\"'\";\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// ROWTERMINATOR\r\n\t\t\t\t\t\t\t\tString Rowterminator=getRealLineterminated();\r\n\t\t\t\t\t\t\t\tif(!Const.isEmpty(Rowterminator))\t\r\n\t\t\t\t\t\t\t\t\tLineTerminatedby=\"ROWTERMINATOR='\"+Rowterminator+\"'\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// Build BULK Command\r\n\t\t\t\t\t\t\t\tString SQLBULKLOAD=\"BULK INSERT \" + realTablename + \" FROM \" + \"'\"+realFilename.replace('\\\\', '/')+\"'\" ;\r\n\t\t\t\t\t\t\t\tSQLBULKLOAD=SQLBULKLOAD+\" WITH (\";\r\n\t\t\t\t\t\t\t\tif(TakeFirstNbrLines!=null) SQLBULKLOAD=SQLBULKLOAD+TakeFirstNbrLines+\",\";\r\n\t\t\t\t\t\t\t\tif(FieldTerminatedby!=null)  SQLBULKLOAD=SQLBULKLOAD+FieldTerminatedby;//\" INTO TABLE \" + realTablename + \" \" + FieldTerminatedby + \" \" + LineTerminatedby + \" \" + IgnoreNbrLignes + \" \" +  ListOfColumn  + \";\";\r\n\t\t\t\t\t\t\t\tif(LineTerminatedby!=null) SQLBULKLOAD=SQLBULKLOAD+\",\"+LineTerminatedby;\r\n\t\t\t\t\t\t\t\tSQLBULKLOAD=SQLBULKLOAD+\")\";\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Run the SQL\r\n\t\t\t\t\t\t\t\t\tdb.execStatements(SQLBULKLOAD);\r\n\t\r\n\t\t\t\t\t\t\t\t\t// Everything is OK...we can disconnect now\r\n\t\t\t\t\t\t\t\t\tdb.disconnect();\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (isAddFileToResult())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// Add filename to output files\n\t\t\t\t\t                \tResultFile resultFile = new ResultFile(ResultFile.FILE_TYPE_GENERAL, KettleVFS.getFileObject(realFilename), parentJob.getName(), toString());\n\t\t\t\t\t                    result.getResultFiles().put(resultFile.getFile().toString(), resultFile);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tresult.setResult(true);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tcatch(KettleDatabaseException je)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tresult.setNrErrors(1);\r\n\t\t\t\t\t\t\t\t\tlog.logError(toString(), \"An error occurred executing this job entry : \"+je.getMessage());\r\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcatch (IOException e)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t       \t\t\tlog.logError(toString(), \"An error occurred executing this job entry : \" + e.getMessage());\n\t\t\t\t\t\t\t\t\tresult.setNrErrors(1);\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(db!=null)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tdb.disconnect();\r\n\t\t\t\t\t\t\t\t\t\tdb=null;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Of course, the table should have been created already before the bulk load operation\r\n\t\t\t\t\t\t\t\tdb.disconnect();\r\n\t\t\t\t\t\t\t\tresult.setNrErrors(1);\r\n\t\t\t\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobMssqlBulkLoad.Error.TableNotExists\",realTablename));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(KettleDatabaseException dbe)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdb.disconnect();\r\n\t\t\t\t\t\t\tresult.setNrErrors(1);\r\n\t\t\t\t\t\t\tlog.logError(toString(), \"An error occurred executing this entry: \"+dbe.getMessage());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// No database connection is defined\n\t\t\t\t\t\tresult.setNrErrors(1);\r\n\t\t\t\t\t\tlog.logError(toString(),  Messages.getString(\"JobMssqlBulkLoad.Nodatabase.Label\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// the file doesn't exist\n\t\t\t\t\tresult.setNrErrors(1);\r\n\t\t\t\t\tlog.logError(toString(),Messages.getString(\"JobMssqlBulkLoad.Error.FileNotExists\",realFilename));\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch(Exception e)\n\t\t\t{\n\t\t\t\t// An unexpected error occurred\n\t\t\t\tresult.setNrErrors(1);\n\t\t\t\tlog.logError(toString(), Messages.getString(\"JobMssqlBulkLoad.UnexpectedError.Label\"), e);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// No file was specified\n\t\t\tresult.setNrErrors(1);\r\n\t\t\tlog.logError(toString(), Messages.getString(\"JobMssqlBulkLoad.Nofilename.Label\"));\n\t\t}\n\t\treturn result;\n\t}","id":10274,"modified_method":"public Result execute(Result previousResult, int nr, Repository rep, Job parentJob)\n\t{\r\n\t\tString TakeFirstNbrLines=null;\r\n\t\tString LineTerminatedby=null;\r\n\t\tString FieldTerminatedby=null;\r\n\r\n\t\tLogWriter log = LogWriter.getInstance();\n\r\n\t\tResult result = previousResult;\r\n\t\tresult.setResult(false);\n\n\t\tString vfsFilename = environmentSubstitute(filename);\n\n\t\t// Let's check the filename ...\r\n\t\tif (!Const.isEmpty(vfsFilename))\r\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\t// User has specified a file, We can continue ...\n\t\t\t\t//\n\t\t\t\t\n\t\t\t\t// This is running over VFS but we need a normal file.\n\t\t\t\t// As such, we're going to verify that it's a local file...\n\t\t\t\t// We're also going to convert VFS FileObject to File\n\t\t\t\t//\n\t\t\t\tFileObject fileObject = KettleVFS.getFileObject(vfsFilename);\n\t\t\t\tif (!(fileObject instanceof LocalFile)) {\n\t\t\t\t\t// MSSQL BUKL INSERT can only use local files, so that's what we limit ourselves to.\n\t\t\t\t\t//\n\t\t\t\t\tthrow new KettleException(Messages.getString(\"JobMssqlBulkLoad.Error.OnlyLocalFileSupported\",vfsFilename));\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// Convert it to a regular platform specific file name\n\t\t\t\t//\n\t\t\t\tString realFilename = KettleVFS.getFilename(fileObject);\n\t\t\t\t\n\t\t\t\t// Here we go... back to the regular scheduled program...\n\t\t\t\t//\n\t\t\t\tFile file = new File(realFilename);\n\t\t\t\tif (file.exists() && file.canRead())\r\n\t\t\t\t{\r\n\t\t\t\t\t// User has specified an existing file, We can continue ...\n\t\t\t\t\tif (log.isDetailed()) log.logDetailed(toString(), Messages.getString(\"JobMssqlBulkLoad.FileExists.Label\",realFilename));\n\t\n\t\t\t\t\tif (connection!=null)\r\n\t\t\t\t\t{\n\t\t\t\t\t\t// User has specified a connection, We can continue ...\n\t\t\t\t\t\tDatabase db = new Database(connection);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tif(db.getDatabaseMeta().getDatabaseType()!=DatabaseMeta.TYPE_DATABASE_MSSQL)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tlog.logError(toString(),Messages.getString(\"JobMssqlBulkLoad.Error.DbNotMSSQL\",connection.getDatabaseName()));\r\n\t\t\t\t\t\t\treturn result;\r\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdb.shareVariablesWith(this);\n\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdb.connect();\r\n\t\t\t\t\t\t\t// Get schemaname\r\n\t\t\t\t\t\t\tString realSchemaname = environmentSubstitute(schemaname);\r\n\t\t\t\t\t\t\t// Get tablename\r\n\t\t\t\t\t\t\tString realTablename = environmentSubstitute(tablename);\r\n\t\r\n\t\t\t\t\t\t\tif (db.checkTableExists(realTablename))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t// The table existe, We can continue ...\r\n\t\t\t\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobMssqlBulkLoad.TableExists.Label\",realTablename));\r\n\t\r\n\t\t\t\t\t\t\t\t// Add schemaname (Most the time Schemaname.Tablename)\r\n\t\t\t\t\t\t\t\tif (schemaname !=null)\r\n\t\t\t\t\t\t\t\t\trealTablename= realSchemaname + \".\" + realTablename;\r\n\t\r\n\t\t\t\t\t\t\t\t// Take the X first rows\r\n\t\t\t\t\t\t\t\tString nblinesTake=getRealTakelines();\r\n\t\t\t\t\t\t\t\tif(Const.toInt(nblinesTake,0)>0)\r\n\t\t\t\t\t\t\t\t\tTakeFirstNbrLines=\"FIRSTROW=\"+nblinesTake;\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// FIELDTERMINATOR\r\n\t\t\t\t\t\t\t\tString Fieldterminator=getRealFieldTerminator();\n\t\t\t\t\t\t\t\tif(!Const.isEmpty(Fieldterminator))\t\r\n\t\t\t\t\t\t\t\t\tFieldTerminatedby=\"FIELDTERMINATOR='\"+Fieldterminator+\"'\";\r\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// ROWTERMINATOR\r\n\t\t\t\t\t\t\t\tString Rowterminator=getRealLineterminated();\r\n\t\t\t\t\t\t\t\tif(!Const.isEmpty(Rowterminator))\t\r\n\t\t\t\t\t\t\t\t\tLineTerminatedby=\"ROWTERMINATOR='\"+Rowterminator+\"'\";\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t// Build BULK Command\r\n\t\t\t\t\t\t\t\tString SQLBULKLOAD=\"BULK INSERT \" + realTablename + \" FROM \" + \"'\"+realFilename.replace('\\\\', '/')+\"'\" ;\r\n\t\t\t\t\t\t\t\tSQLBULKLOAD=SQLBULKLOAD+\" WITH (\";\r\n\t\t\t\t\t\t\t\tif(TakeFirstNbrLines!=null) SQLBULKLOAD=SQLBULKLOAD+TakeFirstNbrLines+\",\";\r\n\t\t\t\t\t\t\t\tif(FieldTerminatedby!=null)  SQLBULKLOAD=SQLBULKLOAD+FieldTerminatedby;//\" INTO TABLE \" + realTablename + \" \" + FieldTerminatedby + \" \" + LineTerminatedby + \" \" + IgnoreNbrLignes + \" \" +  ListOfColumn  + \";\";\r\n\t\t\t\t\t\t\t\tif(LineTerminatedby!=null) SQLBULKLOAD=SQLBULKLOAD+\",\"+LineTerminatedby;\r\n\t\t\t\t\t\t\t\tSQLBULKLOAD=SQLBULKLOAD+\")\";\n\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\ttry\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t// Run the SQL\r\n\t\t\t\t\t\t\t\t\tdb.execStatements(SQLBULKLOAD);\r\n\t\r\n\t\t\t\t\t\t\t\t\t// Everything is OK...we can disconnect now\r\n\t\t\t\t\t\t\t\t\tdb.disconnect();\n\t\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t\tif (isAddFileToResult())\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// Add filename to output files\n\t\t\t\t\t                \tResultFile resultFile = new ResultFile(ResultFile.FILE_TYPE_GENERAL, KettleVFS.getFileObject(realFilename), parentJob.getName(), toString());\n\t\t\t\t\t                    result.getResultFiles().put(resultFile.getFile().toString(), resultFile);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t\t\tresult.setResult(true);\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tcatch(KettleDatabaseException je)\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tresult.setNrErrors(1);\r\n\t\t\t\t\t\t\t\t\tlog.logError(toString(), \"An error occurred executing this job entry : \"+je.getMessage());\r\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tcatch (IOException e)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t       \t\t\tlog.logError(toString(), \"An error occurred executing this job entry : \" + e.getMessage());\n\t\t\t\t\t\t\t\t\tresult.setNrErrors(1);\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tfinally\r\n\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\tif(db!=null)\r\n\t\t\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\t\t\tdb.disconnect();\r\n\t\t\t\t\t\t\t\t\t\tdb=null;\r\n\t\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Of course, the table should have been created already before the bulk load operation\r\n\t\t\t\t\t\t\t\tdb.disconnect();\r\n\t\t\t\t\t\t\t\tresult.setNrErrors(1);\r\n\t\t\t\t\t\t\t\tlog.logDetailed(toString(), Messages.getString(\"JobMssqlBulkLoad.Error.TableNotExists\",realTablename));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tcatch(KettleDatabaseException dbe)\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tdb.disconnect();\r\n\t\t\t\t\t\t\tresult.setNrErrors(1);\r\n\t\t\t\t\t\t\tlog.logError(toString(), \"An error occurred executing this entry: \"+dbe.getMessage());\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// No database connection is defined\n\t\t\t\t\t\tresult.setNrErrors(1);\r\n\t\t\t\t\t\tlog.logError(toString(),  Messages.getString(\"JobMssqlBulkLoad.Nodatabase.Label\"));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t// the file doesn't exist\n\t\t\t\t\tresult.setNrErrors(1);\r\n\t\t\t\t\tlog.logError(toString(),Messages.getString(\"JobMssqlBulkLoad.Error.FileNotExists\",realFilename));\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch(Exception e)\n\t\t\t{\n\t\t\t\t// An unexpected error occurred\n\t\t\t\tresult.setNrErrors(1);\n\t\t\t\tlog.logError(toString(), Messages.getString(\"JobMssqlBulkLoad.UnexpectedError.Label\"), e);\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// No file was specified\n\t\t\tresult.setNrErrors(1);\r\n\t\t\tlog.logError(toString(), Messages.getString(\"JobMssqlBulkLoad.Nofilename.Label\"));\n\t\t}\n\t\treturn result;\n\t}","commit_id":"24b0cdb742699d152a5377294c1b08a8a181de81","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void setSeparator(String separator)\n\t{\n\t\tthis.separator = separator;\n\t}","id":10275,"modified_method":"public void setFieldTerminator(String fieldterminator)\n\t{\n\t\tthis.fieldterminator = fieldterminator;\n\t}","commit_id":"24b0cdb742699d152a5377294c1b08a8a181de81","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String getXML()\n\t{\n\t\tStringBuffer retval = new StringBuffer(200);\n\n\t\tretval.append(super.getXML());\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"schemaname\",      schemaname));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"tablename\",       tablename));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"filename\",        filename));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"separator\",       separator));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"lineterminated\",  lineterminated));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"takelines\",     takelines));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"orderby\",    orderby));\t\t\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"addfiletoresult\",  addfiletoresult));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"connection\",      connection==null?null:connection.getName()));\n\n\t\treturn retval.toString();\n\t}","id":10276,"modified_method":"public String getXML()\n\t{\n\t\tStringBuffer retval = new StringBuffer(200);\n\n\t\tretval.append(super.getXML());\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"schemaname\",      schemaname));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"tablename\",       tablename));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"filename\",        filename));\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"datafiletype\", datafiletype));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"fieldterminator\", fieldterminator));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"lineterminated\",  lineterminated));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"codepage\",  codepage));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"specificcodepage\",  specificcodepage));\r\n\t\t\r\n\t\t\r\n\t\t\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"startfile\",     startfile));\r\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"endfile\",     endfile));\r\n\t\t\r\n\t\t\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"orderby\",    orderby));\t\t\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"addfiletoresult\",  addfiletoresult));\n\t\tretval.append(\"      \").append(XMLHandler.addTagValue(\"connection\",      connection==null?null:connection.getName()));\n\n\t\treturn retval.toString();\n\t}","commit_id":"24b0cdb742699d152a5377294c1b08a8a181de81","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void saveRep(Repository rep, long id_job)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.saveRep(rep, id_job);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"schemaname\",     schemaname);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"tablename\",      tablename);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"filename\",       filename);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"separator\",      separator);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"lineterminated\", lineterminated);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"takelines\",    takelines);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"orderby\",   orderby);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"addfiletoresult\", addfiletoresult);\n\n\t\t\tif (connection!=null) rep.saveJobEntryAttribute(id_job, getID(), \"connection\", connection.getName());\r\n\n\t\t}\n\t\tcatch(KettleDatabaseException dbe)\n\t\t{\n\t\t\tthrow new KettleException(\"Unable to load job entry of type 'Mysql Bulk Load' to the repository for id_job=\"+id_job, dbe);\n\t\t}\n\t}","id":10277,"modified_method":"public void saveRep(Repository rep, long id_job)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tsuper.saveRep(rep, id_job);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"schemaname\",     schemaname);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"tablename\",      tablename);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"filename\",       filename);\r\n\t\t\t\r\n\t\t\t\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"datafiletype\",      datafiletype);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"fieldterminator\",      fieldterminator);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"lineterminated\", lineterminated);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"codepage\", codepage);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"specificcodepage\", specificcodepage);\r\n\t\t\t\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"startfile\",    startfile);\r\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"endfile\",    endfile);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"orderby\",   orderby);\n\t\t\trep.saveJobEntryAttribute(id_job, getID(), \"addfiletoresult\", addfiletoresult);\n\n\t\t\tif (connection!=null) rep.saveJobEntryAttribute(id_job, getID(), \"connection\", connection.getName());\r\n\n\t\t}\n\t\tcatch(KettleDatabaseException dbe)\n\t\t{\n\t\t\tthrow new KettleException(\"Unable to load job entry of type 'Mysql Bulk Load' to the repository for id_job=\"+id_job, dbe);\n\t\t}\n\t}","commit_id":"24b0cdb742699d152a5377294c1b08a8a181de81","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\n\t * Copy information from the meta-data input to the dialog fields.\n\t */\n\tpublic void getData()\n\t{\n\t\t// System.out.println(\"evaluates: \"+jobentry.evaluates());\n\n\t\tif (jobEntry.getName() != null)\n\t\t\twName.setText(jobEntry.getName());\n\t\tif (jobEntry.getSchemaname() != null)\n\t\t\twSchemaname.setText(jobEntry.getSchemaname());\n\t\tif (jobEntry.getTablename() != null)\n\t\t\twTablename.setText(jobEntry.getTablename());\n\t\tif (jobEntry.getFilename() != null)\n\t\t\twFilename.setText(jobEntry.getFilename());\n\t\tif (jobEntry.getSeparator() != null)\n\t\t\twSeparator.setText(jobEntry.getSeparator());\n\t\t\n\t\tif (jobEntry.getLineterminated() != null)\n\t\t\twLineterminated.setText(jobEntry.getLineterminated());\t\t\t\n\n\n\t\n\t\tif (jobEntry.getTakelines() != null)\n\t\t{\n\n\t\t\twTakelines.setText(jobEntry.getTakelines());\n\t\t}\n\t\telse\n\t\t\twTakelines.setText(\"0\");\n\t\t\n\t\tif (jobEntry.getOrderBy() != null)\n\t\t\twOrderBy.setText(jobEntry.getOrderBy());\n\t\t     \n\t\t\n\t\tif (jobEntry.getDatabase() != null)\n\t\t{\n\t\t\twConnection.setText(jobEntry.getDatabase().getName());\n\t\t}\n\t\t\n\t\twAddFileToResult.setSelection(jobEntry.isAddFileToResult());\n\t\t\n\t\twName.selectAll();\n\t}","id":10278,"modified_method":"/**\n\t * Copy information from the meta-data input to the dialog fields.\n\t */\n\tpublic void getData()\n\t{\n\t\t// System.out.println(\"evaluates: \"+jobentry.evaluates());\n\n\t\tif (jobEntry.getName() != null)\n\t\t\twName.setText(jobEntry.getName());\r\n\t\tif (jobEntry.getDatabase() != null)\r\n\t\t\twConnection.setText(jobEntry.getDatabase().getName());\n\t\tif (jobEntry.getSchemaname() != null)\n\t\t\twSchemaname.setText(jobEntry.getSchemaname());\n\t\tif (jobEntry.getTablename() != null)\n\t\t\twTablename.setText(jobEntry.getTablename());\n\t\tif (jobEntry.getFilename() != null)\n\t\t\twFilename.setText(jobEntry.getFilename());\r\n\t\tif (jobEntry.getDataFileType() != null)\r\n\t\t\twDataFiletype.setText(jobEntry.getDataFileType());\n\t\tif (jobEntry.getFieldTerminator() != null)\n\t\t\twFieldTerminator.setText(jobEntry.getFieldTerminator());\n\t\tif (jobEntry.getLineterminated() != null)\n\t\t\twLineterminated.setText(jobEntry.getLineterminated());\t\r\n\t\tif (jobEntry.getCodePage() != null)\r\n\t\t{\r\n\t\t\twCodePage.setText(jobEntry.getCodePage());\r\n\t\t}else\r\n\t\t\twCodePage.setText(\"RAW\");\n\t\tif (jobEntry.getSpecificCodePage() != null)\r\n\t\t\twSpecificCodePage.setText(jobEntry.getSpecificCodePage());\n\n\t\n\t\tif (jobEntry.getStartFile() != null)\n\t\t\twStartFile.setText(jobEntry.getStartFile());\n\t\tif (jobEntry.getEndFile() != null)\r\n\t\t\twEndFile.setText(jobEntry.getEndFile());\r\n\t\t\r\n\t\t\n\t\t\n\t\tif (jobEntry.getOrderBy() != null)\n\t\t\twOrderBy.setText(jobEntry.getOrderBy());\n\t\t     \n\n\t\twAddFileToResult.setSelection(jobEntry.isAddFileToResult());\n\t\t\n\t\twName.selectAll();\n\t}","commit_id":"24b0cdb742699d152a5377294c1b08a8a181de81","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void ok()\n\t{\n\t\tjobEntry.setName(wName.getText());\n\t\tjobEntry.setDatabase(jobMeta.findDatabase(wConnection.getText()));\n\t\tjobEntry.setSchemaname(wSchemaname.getText());\n\t\tjobEntry.setTablename(wTablename.getText());\n\t\tjobEntry.setFilename(wFilename.getText());\n\t\tjobEntry.setSeparator(wSeparator.getText());\n\t\tjobEntry.setLineterminated(wLineterminated.getText());\n\t\tjobEntry.setTakelines(wTakelines.getText());\n\t\tjobEntry.setOrderBy(wOrderBy.getText());\n\t\t\n\t\tjobEntry.setAddFileToResult(wAddFileToResult.getSelection());\n\t\t\n\t\tdispose();\n\t}","id":10279,"modified_method":"private void ok()\n\t{\n\t\tjobEntry.setName(wName.getText());\n\t\tjobEntry.setDatabase(jobMeta.findDatabase(wConnection.getText()));\n\t\tjobEntry.setSchemaname(wSchemaname.getText());\n\t\tjobEntry.setTablename(wTablename.getText());\n\t\tjobEntry.setFilename(wFilename.getText());\r\n\t\tjobEntry.setDataFileType(wDataFiletype.getText());\n\t\tjobEntry.setFieldTerminator(wFieldTerminator.getText());\n\t\tjobEntry.setLineterminated(wLineterminated.getText());\r\n\t\tjobEntry.setCodePage(wCodePage.getText());\r\n\t\tjobEntry.setSpecificCodePage(wSpecificCodePage.getText());\r\n\t\t\r\n\t\t\n\t\tjobEntry.setStartFile(wStartFile.getText());\r\n\t\tjobEntry.setEndFile(wEndFile.getText());\n\t\tjobEntry.setOrderBy(wOrderBy.getText());\n\t\t\n\t\tjobEntry.setAddFileToResult(wAddFileToResult.getSelection());\n\t\t\n\t\tdispose();\n\t}","commit_id":"24b0cdb742699d152a5377294c1b08a8a181de81","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public JobEntryInterface open()\n\t{\n\t\tShell parent = getParent();\n\t\tDisplay display = parent.getDisplay();\n\n\t\tshell = new Shell(parent, props.getJobsDialogStyle());\n\t\tprops.setLook(shell);\n\t\tJobDialog.setShellImage(shell, jobEntry);\n\n\t\tModifyListener lsMod = new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t};\n\t\tchanged = jobEntry.hasChanged();\n\n\t\tFormLayout formLayout = new FormLayout();\n\t\tformLayout.marginWidth = Const.FORM_MARGIN;\n\t\tformLayout.marginHeight = Const.FORM_MARGIN;\n\n\t\tshell.setLayout(formLayout);\n\t\tshell.setText(Messages.getString(\"JobMssqlBulkLoad.Title\"));\n\n\t\tint middle = props.getMiddlePct();\n\t\tint margin = Const.MARGIN;\n\n\t\t// Filename line\n\t\twlName = new Label(shell, SWT.RIGHT);\n\t\twlName.setText(Messages.getString(\"JobMssqlBulkLoad.Name.Label\"));\n\t\tprops.setLook(wlName);\n\t\tfdlName = new FormData();\n\t\tfdlName.left = new FormAttachment(0, 0);\n\t\tfdlName.right = new FormAttachment(middle, 0);\n\t\tfdlName.top = new FormAttachment(0, margin);\n\t\twlName.setLayoutData(fdlName);\n\t\twName = new Text(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wName);\n\t\twName.addModifyListener(lsMod);\n\t\tfdName = new FormData();\n\t\tfdName.left = new FormAttachment(middle, 0);\n\t\tfdName.top = new FormAttachment(0, margin);\n\t\tfdName.right = new FormAttachment(100, 0);\n\t\twName.setLayoutData(fdName);\r\n\t\t\t\r\n\t\t// Connection line\r\n\t\twConnection = addConnectionLine(shell, wName, middle, margin);\r\n\t\tif (jobEntry.getDatabase()==null && jobMeta.nrDatabases()==1) wConnection.select(0);\r\n\t\twConnection.addModifyListener(lsMod);\r\n\t\t\n\t\t// Schema name line\n\t\twlSchemaname = new Label(shell, SWT.RIGHT);\n\t\twlSchemaname.setText(Messages.getString(\"JobMssqlBulkLoad.Schemaname.Label\"));\n\t\tprops.setLook(wlSchemaname);\n\t\tfdlSchemaname = new FormData();\n\t\tfdlSchemaname.left = new FormAttachment(0, 0);\n\t\tfdlSchemaname.right = new FormAttachment(middle, 0);\n\t\tfdlSchemaname.top = new FormAttachment(wConnection, margin);\n\t\twlSchemaname.setLayoutData(fdlSchemaname);\n\n\t\twSchemaname = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wSchemaname);\n\t\twSchemaname.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.Schemaname.Tooltip\"));\n\t\twSchemaname.addModifyListener(lsMod);\n\t\tfdSchemaname = new FormData();\n\t\tfdSchemaname.left = new FormAttachment(middle, 0);\n\t\tfdSchemaname.top = new FormAttachment(wConnection, margin);\n\t\tfdSchemaname.right = new FormAttachment(100, 0);\n\t\twSchemaname.setLayoutData(fdSchemaname);\n\n\t\t// Table name line\n\t\twlTablename = new Label(shell, SWT.RIGHT);\n\t\twlTablename.setText(Messages.getString(\"JobMssqlBulkLoad.Tablename.Label\"));\n\t\tprops.setLook(wlTablename);\n\t\tfdlTablename = new FormData();\n\t\tfdlTablename.left = new FormAttachment(0, 0);\n\t\tfdlTablename.right = new FormAttachment(middle, 0);\n\t\tfdlTablename.top = new FormAttachment(wSchemaname, margin);\n\t\twlTablename.setLayoutData(fdlTablename);\n\n\t\twbTable=new Button(shell, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbTable);\n\t\twbTable.setText(Messages.getString(\"System.Button.Browse\"));\n\t\tFormData fdbTable = new FormData();\n\t\tfdbTable.right= new FormAttachment(100, 0);\n\t\tfdbTable.top  = new FormAttachment(wSchemaname, margin/2);\n\t\twbTable.setLayoutData(fdbTable);\n\t\twbTable.addSelectionListener( new SelectionAdapter() { public void widgetSelected(SelectionEvent e) { getTableName(); } } );\n\n\t\twTablename = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wTablename);\n\t\twTablename.addModifyListener(lsMod);\n\t\tfdTablename = new FormData();\n\t\tfdTablename.left = new FormAttachment(middle, 0);\n\t\tfdTablename.top = new FormAttachment(wSchemaname, margin);\n\t\tfdTablename.right = new FormAttachment(wbTable, -margin);\n\t\twTablename.setLayoutData(fdTablename);\n\n\t\t// Filename line\n\t\twlFilename = new Label(shell, SWT.RIGHT);\n\t\twlFilename.setText(Messages.getString(\"JobMssqlBulkLoad.Filename.Label\"));\n\t\tprops.setLook(wlFilename);\n\t\tfdlFilename = new FormData();\n\t\tfdlFilename.left = new FormAttachment(0, 0);\n\t\tfdlFilename.top = new FormAttachment(wTablename, margin);\n\t\tfdlFilename.right = new FormAttachment(middle, -margin);\n\t\twlFilename.setLayoutData(fdlFilename);\n\n\t\twbFilename = new Button(shell, SWT.PUSH | SWT.CENTER);\n\t\tprops.setLook(wbFilename);\n\t\twbFilename.setText(Messages.getString(\"System.Button.Browse\"));\n\t\tfdbFilename = new FormData();\n\t\tfdbFilename.right = new FormAttachment(100, 0);\n\t\tfdbFilename.top = new FormAttachment(wTablename, 0);\n\t\twbFilename.setLayoutData(fdbFilename);\n\n\t\twFilename = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wFilename);\n\t\twFilename.addModifyListener(lsMod);\n\t\tfdFilename = new FormData();\n\t\tfdFilename.left = new FormAttachment(middle, 0);\n\t\tfdFilename.top = new FormAttachment(wTablename, margin);\n\t\tfdFilename.right = new FormAttachment(wbFilename, -margin);\n\t\twFilename.setLayoutData(fdFilename);\n\n\t\t// Whenever something changes, set the tooltip to the expanded version:\n\t\twFilename.addModifyListener(new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\twFilename.setToolTipText(jobMeta.environmentSubstitute(wFilename.getText()));\n\t\t\t}\n\t\t});\n\n\t\twbFilename.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.OPEN);\n\t\t\t\tdialog.setFilterExtensions(new String[] { \"*.txt\", \"*.csv\", \"*\" });\n\t\t\t\tif (wFilename.getText() != null)\n\t\t\t\t{\n\t\t\t\t\tdialog.setFileName(jobMeta.environmentSubstitute(wFilename.getText()));\n\t\t\t\t}\n\t\t\t\tdialog.setFilterNames(FILETYPES);\n\t\t\t\tif (dialog.open() != null)\n\t\t\t\t{\n\t\t\t\t\twFilename.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR\n\t\t\t\t\t\t+ dialog.getFileName());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\t\t\n\n\t\t// Separator\n\t\twlSeparator = new Label(shell, SWT.RIGHT);\n\t\twlSeparator.setText(Messages.getString(\"JobMssqlBulkLoad.Separator.Label\"));\n\t\tprops.setLook(wlSeparator);\n\t\tfdlSeparator = new FormData();\n\t\tfdlSeparator.left = new FormAttachment(0, 0);\n\t\tfdlSeparator.right = new FormAttachment(middle, 0);\n\t\tfdlSeparator.top = new FormAttachment(wFilename, margin);\n\t\twlSeparator.setLayoutData(fdlSeparator);\n\n\t\twSeparator = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wSeparator);\n\t\twSeparator.addModifyListener(lsMod);\n\t\tfdSeparator = new FormData();\n\t\tfdSeparator.left = new FormAttachment(middle, 0);\n\t\tfdSeparator.top = new FormAttachment(wFilename, margin);\n\t\tfdSeparator.right = new FormAttachment(100, 0);\n\t\twSeparator.setLayoutData(fdSeparator);\n\n\t\t// Line terminated\n\t\twlLineterminated = new Label(shell, SWT.RIGHT);\n\t\twlLineterminated.setText(Messages.getString(\"JobMssqlBulkLoad.Lineterminated.Label\"));\n\t\tprops.setLook(wlLineterminated);\n\t\tfdlLineterminated = new FormData();\n\t\tfdlLineterminated.left = new FormAttachment(0, 0);\n\t\tfdlLineterminated.right = new FormAttachment(middle, 0);\n\t\tfdlLineterminated.top = new FormAttachment(wSeparator, margin);\n\t\twlLineterminated.setLayoutData(fdlLineterminated);\n\n\t\twLineterminated = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wLineterminated);\n\t\twLineterminated.addModifyListener(lsMod);\n\t\tfdLineterminated = new FormData();\n\t\tfdLineterminated.left = new FormAttachment(middle, 0);\n\t\tfdLineterminated.top = new FormAttachment(wSeparator, margin);\n\t\tfdLineterminated.right = new FormAttachment(100, 0);\n\t\twLineterminated.setLayoutData(fdLineterminated);\r\n\t\t\r\n\t\t\r\n\t\t// Data file type\r\n\t\twlDataFiletype = new Label(shell, SWT.RIGHT);\r\n\t\twlDataFiletype.setText(Messages.getString(\"JobMysqlBulkLoad.DataFiletype.Label\"));\r\n\t\tprops.setLook(wlDataFiletype);\r\n\t\tfdlDataFiletype = new FormData();\r\n\t\tfdlDataFiletype.left = new FormAttachment(0, 0);\r\n\t\tfdlDataFiletype.right = new FormAttachment(middle, 0);\r\n\t\tfdlDataFiletype.top = new FormAttachment(wLineterminated, margin);\r\n\t\twlDataFiletype.setLayoutData(fdlDataFiletype);\r\n\t\twDataFiletype = new CCombo(shell, SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);\r\n\t\t\t\t\twDataFiletype.add(\"char\");\r\n\t\t\t\t\twDataFiletype.add(\"native\");\r\n\t\t\t\t\twDataFiletype.add(\"widechar\");\r\n\t\t\t\t\twDataFiletype.select(0); // +1: starts at -1\r\n\r\n\t\tprops.setLook(wDataFiletype);\r\n\t\tfdDataFiletype= new FormData();\r\n\t\tfdDataFiletype.left = new FormAttachment(middle, 0);\r\n\t\tfdDataFiletype.top = new FormAttachment(wLineterminated, margin);\r\n\t\tfdDataFiletype.right = new FormAttachment(100, 0);\r\n\t\twDataFiletype.setLayoutData(fdDataFiletype);\r\n\t\t\r\n\t\t// CodePage\r\n\t\twlCodePage = new Label(shell, SWT.RIGHT);\r\n\t\twlCodePage.setText(Messages.getString(\"JobMysqlBulkLoad.CodePage.Label\"));\r\n\t\tprops.setLook(wlCodePage);\r\n\t\tfdlCodePage = new FormData();\r\n\t\tfdlCodePage.left = new FormAttachment(0, 0);\r\n\t\tfdlCodePage.right = new FormAttachment(middle, 0);\r\n\t\tfdlCodePage.top = new FormAttachment(wDataFiletype, margin);\r\n\t\twlCodePage.setLayoutData(fdlCodePage);\r\n\t\twCodePage = new CCombo(shell, SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);\r\n\t\t\t\t\twCodePage.add(\"ACP\");\r\n\t\t\t\t\twCodePage.add(\"OEM\");\r\n\t\t\t\t\twCodePage.add(\"RAW\");\r\n\t\t\t\t\twCodePage.add(Messages.getString(\"JobMssqlBulkLoad.CodePage.Specific\"));\r\n\t\t\t\t\twCodePage.select(0); // +1: starts at -1\r\n\r\n\t\tprops.setLook(wCodePage);\r\n\t\tfdCodePage= new FormData();\r\n\t\tfdCodePage.left = new FormAttachment(middle, 0);\r\n\t\tfdCodePage.top = new FormAttachment(wDataFiletype, margin);\r\n\t\tfdCodePage.right = new FormAttachment(100, 0);\r\n\t\twCodePage.setLayoutData(fdCodePage);\r\n\r\n\t\t// Specific CodePage\r\n\t\twlSpecificCodePage = new Label(shell, SWT.RIGHT);\r\n\t\twlSpecificCodePage.setText(Messages.getString(\"JobMssqlBulkLoad.SpecificCodePage.Label\"));\r\n\t\tprops.setLook(wlSpecificCodePage);\r\n\t\tfdlSpecificCodePage = new FormData();\r\n\t\tfdlSpecificCodePage.left = new FormAttachment(0, 0);\r\n\t\tfdlSpecificCodePage.right = new FormAttachment(middle, 0);\r\n\t\tfdlSpecificCodePage.top = new FormAttachment(wCodePage, margin);\r\n\t\twlSpecificCodePage.setLayoutData(fdlSpecificCodePage);\r\n\r\n\t\twSpecificCodePage = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\r\n\t\tprops.setLook(wSpecificCodePage);\r\n\t\twSpecificCodePage.addModifyListener(lsMod);\r\n\t\tfdSpecificCodePage = new FormData();\r\n\t\tfdSpecificCodePage.left = new FormAttachment(middle, 0);\r\n\t\tfdSpecificCodePage.top = new FormAttachment(wCodePage, margin);\r\n\t\tfdSpecificCodePage.right = new FormAttachment(100, 0);\r\n\t\twSpecificCodePage.setLayoutData(fdSpecificCodePage);\r\n\r\n\t\t// FortmatFilename line\r\n\t\twlFortmatFilename = new Label(shell, SWT.RIGHT);\r\n\t\twlFortmatFilename.setText(Messages.getString(\"JobMssqlBulkLoad.FortmatFilename.Label\"));\r\n\t\tprops.setLook(wlFortmatFilename);\r\n\t\tfdlFortmatFilename = new FormData();\r\n\t\tfdlFortmatFilename.left = new FormAttachment(0, 0);\r\n\t\tfdlFortmatFilename.top = new FormAttachment(wSpecificCodePage, margin);\r\n\t\tfdlFortmatFilename.right = new FormAttachment(middle, -margin);\r\n\t\twlFortmatFilename.setLayoutData(fdlFortmatFilename);\r\n\r\n\t\twbFortmatFilename = new Button(shell, SWT.PUSH | SWT.CENTER);\r\n\t\tprops.setLook(wbFortmatFilename);\r\n\t\twbFortmatFilename.setText(Messages.getString(\"System.Button.Browse\"));\r\n\t\tfdbFortmatFilename = new FormData();\r\n\t\tfdbFortmatFilename.right = new FormAttachment(100, 0);\r\n\t\tfdbFortmatFilename.top = new FormAttachment(wSpecificCodePage, 0);\r\n\t\twbFortmatFilename.setLayoutData(fdbFortmatFilename);\r\n\r\n\t\twFortmatFilename = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\r\n\t\tprops.setLook(wFortmatFilename);\r\n\t\twFortmatFilename.addModifyListener(lsMod);\r\n\t\tfdFortmatFilename = new FormData();\r\n\t\tfdFortmatFilename.left = new FormAttachment(middle, 0);\r\n\t\tfdFortmatFilename.top = new FormAttachment(wSpecificCodePage, margin);\r\n\t\tfdFortmatFilename.right = new FormAttachment(wbFortmatFilename, -margin);\r\n\t\twFortmatFilename.setLayoutData(fdFortmatFilename);\r\n\r\n\t\t// Whenever something changes, set the tooltip to the expanded version:\r\n\t\twFortmatFilename.addModifyListener(new ModifyListener()\r\n\t\t{\r\n\t\t\tpublic void modifyText(ModifyEvent e)\r\n\t\t\t{\r\n\t\t\t\twFortmatFilename.setToolTipText(jobMeta.environmentSubstitute(wFortmatFilename.getText()));\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\twbFortmatFilename.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.OPEN);\r\n\t\t\t\tdialog.setFilterExtensions(new String[] { \"*.txt\", \"*.csv\", \"*\" });\r\n\t\t\t\tif (wFortmatFilename.getText() != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tdialog.setFileName(jobMeta.environmentSubstitute(wFortmatFilename.getText()));\r\n\t\t\t\t}\r\n\t\t\t\tdialog.setFilterNames(FILETYPES);\r\n\t\t\t\tif (dialog.open() != null)\r\n\t\t\t\t{\r\n\t\t\t\t\twFortmatFilename.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR\r\n\t\t\t\t\t\t+ dialog.getFileName());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t//Fire Triggers?\r\n\t\twlFireTriggers = new Label(shell, SWT.RIGHT);\r\n\t\twlFireTriggers.setText(Messages.getString(\"JobMssqlBulkLoad.FireTriggers.Label\"));\r\n\t\tprops.setLook(wlFireTriggers);\r\n\t\tfdlFireTriggers = new FormData();\r\n\t\tfdlFireTriggers.left = new FormAttachment(0, 0);\r\n\t\tfdlFireTriggers.top = new FormAttachment(wFortmatFilename, margin);\r\n\t\tfdlFireTriggers.right = new FormAttachment(middle, -margin);\r\n\t\twlFireTriggers.setLayoutData(fdlFireTriggers);\r\n\t\twFireTriggers = new Button(shell, SWT.CHECK);\r\n\t\tprops.setLook(wFireTriggers);\r\n\t\twFireTriggers.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.FireTriggers.Tooltip\"));\r\n\t\tfdFireTriggers = new FormData();\r\n\t\tfdFireTriggers.left = new FormAttachment(middle, 0);\r\n\t\tfdFireTriggers.top = new FormAttachment(wFortmatFilename, margin);\r\n\t\tfdFireTriggers.right = new FormAttachment(100, 0);\r\n\t\twFireTriggers.setLayoutData(fdFireTriggers);\r\n\t\twFireTriggers.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\n\r\n\t\t// CHECK CONSTRAINTS\r\n\t\twlCheckConstraints = new Label(shell, SWT.RIGHT);\r\n\t\twlCheckConstraints.setText(Messages.getString(\"JobMssqlBulkLoad.CheckConstraints.Label\"));\r\n\t\tprops.setLook(wlCheckConstraints);\r\n\t\tfdlCheckConstraints = new FormData();\r\n\t\tfdlCheckConstraints.left = new FormAttachment(0, 0);\r\n\t\tfdlCheckConstraints.top = new FormAttachment(wFireTriggers, margin);\r\n\t\tfdlCheckConstraints.right = new FormAttachment(middle, -margin);\r\n\t\twlCheckConstraints.setLayoutData(fdlCheckConstraints);\r\n\t\twCheckConstraints = new Button(shell, SWT.CHECK);\r\n\t\tprops.setLook(wCheckConstraints);\r\n\t\twCheckConstraints.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.CheckConstraints.Tooltip\"));\r\n\t\tfdCheckConstraints = new FormData();\r\n\t\tfdCheckConstraints.left = new FormAttachment(middle, 0);\r\n\t\tfdCheckConstraints.top = new FormAttachment(wFireTriggers, margin);\r\n\t\tfdCheckConstraints.right = new FormAttachment(100, 0);\r\n\t\twCheckConstraints.setLayoutData(fdCheckConstraints);\r\n\t\twCheckConstraints.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t// Keep Nulls\r\n\t\twlKeepNulls = new Label(shell, SWT.RIGHT);\r\n\t\twlKeepNulls.setText(Messages.getString(\"JobMssqlBulkLoad.KeepNulls.Label\"));\r\n\t\tprops.setLook(wlKeepNulls);\r\n\t\tfdlKeepNulls = new FormData();\r\n\t\tfdlKeepNulls.left = new FormAttachment(0, 0);\r\n\t\tfdlKeepNulls.top = new FormAttachment(wCheckConstraints, margin);\r\n\t\tfdlKeepNulls.right = new FormAttachment(middle, -margin);\r\n\t\twlKeepNulls.setLayoutData(fdlKeepNulls);\r\n\t\twKeepNulls = new Button(shell, SWT.CHECK);\r\n\t\tprops.setLook(wKeepNulls);\r\n\t\twKeepNulls.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.KeepNulls.Tooltip\"));\r\n\t\tfdKeepNulls = new FormData();\r\n\t\tfdKeepNulls.left = new FormAttachment(middle, 0);\r\n\t\tfdKeepNulls.top = new FormAttachment(wCheckConstraints, margin);\r\n\t\tfdKeepNulls.right = new FormAttachment(100, 0);\r\n\t\twKeepNulls.setLayoutData(fdKeepNulls);\r\n\t\twKeepNulls.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t}\r\n\t\t});\n\t\t\r\n\t\t// TABBLOCK\r\n\t\twlTablock = new Label(shell, SWT.RIGHT);\r\n\t\twlTablock.setText(Messages.getString(\"JobMssqlBulkLoad.Tablock.Label\"));\r\n\t\tprops.setLook(wlTablock);\r\n\t\tfdlTablock = new FormData();\r\n\t\tfdlTablock.left = new FormAttachment(0, 0);\r\n\t\tfdlTablock.top = new FormAttachment(wKeepNulls, margin);\r\n\t\tfdlTablock.right = new FormAttachment(middle, -margin);\r\n\t\twlTablock.setLayoutData(fdlTablock);\r\n\t\twTablock = new Button(shell, SWT.CHECK);\r\n\t\tprops.setLook(wTablock);\r\n\t\twTablock.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.Tablock.Tooltip\"));\r\n\t\tfdTablock = new FormData();\r\n\t\tfdTablock.left = new FormAttachment(middle, 0);\r\n\t\tfdTablock.top = new FormAttachment(wKeepNulls, margin);\r\n\t\tfdTablock.right = new FormAttachment(100, 0);\r\n\t\twTablock.setLayoutData(fdTablock);\r\n\t\twTablock.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\n\t\t// Nbr of lines to take\n\t\twlTakelines = new Label(shell, SWT.RIGHT);\n\t\twlTakelines.setText(Messages.getString(\"JobMssqlBulkLoad.Takelines.Label\"));\n\t\tprops.setLook(wlTakelines);\n\t\tfdlTakelines = new FormData();\n\t\tfdlTakelines.left = new FormAttachment(0, 0);\n\t\tfdlTakelines.right = new FormAttachment(middle, 0);\n\t\tfdlTakelines.top = new FormAttachment(wTablock, margin);\n\t\twlTakelines.setLayoutData(fdlTakelines);\n\n\t\twTakelines = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wTakelines);\n\t\twTakelines.addModifyListener(lsMod);\n\t\tfdTakelines = new FormData();\n\t\tfdTakelines.left = new FormAttachment(middle, 0);\n\t\tfdTakelines.top = new FormAttachment(wTablock, margin);\n\t\tfdTakelines.right = new FormAttachment(100, 0);\n\t\twTakelines.setLayoutData(fdTakelines);\n\t\t\n\t\t\n\t\t// Specifies how the data in the data file is sorted\r\n\t\twlOrderBy = new Label(shell, SWT.RIGHT);\r\n\t\twlOrderBy.setText(Messages.getString(\"JobMssqlBulkLoad.OrderBy.Label\"));\r\n\t\tprops.setLook(wlOrderBy);\r\n\t\tfdlOrderBy = new FormData();\r\n\t\tfdlOrderBy.left = new FormAttachment(0, 0);\r\n\t\tfdlOrderBy.right = new FormAttachment(middle, 0);\r\n\t\tfdlOrderBy.top = new FormAttachment(wTakelines, margin);\r\n\t\twlOrderBy.setLayoutData(fdlOrderBy);\r\n\t\t\r\n\t\twbOrderBy=new Button(shell, SWT.PUSH| SWT.CENTER);\r\n\t\tprops.setLook(wbOrderBy);\r\n\t\twbOrderBy.setText(Messages.getString(\"System.Button.Edit\"));\r\n\t\tFormData fdbListattribut = new FormData();\r\n\t\tfdbListattribut.right= new FormAttachment(100, 0);\r\n\t\tfdbListattribut.top  = new FormAttachment(wTakelines, margin);\r\n\t\twbOrderBy.setLayoutData(fdbListattribut);\r\n\t\twbOrderBy.addSelectionListener( new SelectionAdapter() { public void widgetSelected(SelectionEvent e) { getListColumns(); } } );\r\n\r\n\t\twOrderBy = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\r\n\t\tprops.setLook(wOrderBy);\r\n\t\twOrderBy.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.OrderBy.Tooltip\"));\r\n\t\twOrderBy.addModifyListener(lsMod);\r\n\t\tfdOrderBy = new FormData();\r\n\t\tfdOrderBy.left = new FormAttachment(middle, 0);\r\n\t\tfdOrderBy.top = new FormAttachment(wTakelines, margin);\r\n\t\tfdOrderBy.right = new FormAttachment(wbOrderBy, -margin);\r\n\t\twOrderBy.setLayoutData(fdOrderBy);\r\n\t\t\r\n\t\t\r\n\t\t// Order Direction\r\n\t\twlOrderDirection = new Label(shell, SWT.RIGHT);\r\n\t\twlOrderDirection.setText(Messages.getString(\"JobMysqlBulkLoad.OrderDirection.Label\"));\r\n\t\tprops.setLook(wlOrderDirection);\r\n\t\tfdlOrderDirection = new FormData();\r\n\t\tfdlOrderDirection.left = new FormAttachment(0, 0);\r\n\t\tfdlOrderDirection.right = new FormAttachment(middle, 0);\r\n\t\tfdlOrderDirection.top = new FormAttachment(wOrderBy, margin);\r\n\t\twlOrderDirection.setLayoutData(fdlOrderDirection);\r\n\t\twOrderDirection = new CCombo(shell, SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);\r\n\t\t\t\t\twOrderDirection.add(Messages.getString(\"JobMysqlBulkLoad.OrderDirectionAsc.Label\"));\r\n\t\t\t\t\twOrderDirection.add(Messages.getString(\"JobMysqlBulkLoad.OrderDirectionDesc.Label\"));\r\n\t\t\t\t\twOrderDirection.select(0); // +1: starts at -1\r\n\r\n\t\tprops.setLook(wOrderDirection);\r\n\t\tfdOrderDirection= new FormData();\r\n\t\tfdOrderDirection.left = new FormAttachment(middle, 0);\r\n\t\tfdOrderDirection.top = new FormAttachment(wOrderBy, margin);\r\n\t\tfdOrderDirection.right = new FormAttachment(100, 0);\r\n\t\twOrderDirection.setLayoutData(fdOrderDirection);\r\n\t\t\r\n\t\t\n\t\t\n\t\t // fileresult grouping?\n\t     // ////////////////////////\n\t     // START OF FILE RESULT GROUP///\n\t     // /\n\t    wFileResult = new Group(shell, SWT.SHADOW_NONE);\n\t    props.setLook(wFileResult);\n\t    wFileResult.setText(Messages.getString(\"JobMssqlBulkLoad.FileResult.Group.Label\"));\n\n\t    FormLayout groupLayout = new FormLayout();\n\t    groupLayout.marginWidth = 10;\n\t    groupLayout.marginHeight = 10;\n\n\t    wFileResult.setLayout(groupLayout);\n\t      \n\t      \n\t  \t//Add file to result\n\t\twlAddFileToResult = new Label(wFileResult, SWT.RIGHT);\n\t\twlAddFileToResult.setText(Messages.getString(\"JobMssqlBulkLoad.AddFileToResult.Label\"));\n\t\tprops.setLook(wlAddFileToResult);\n\t\tfdlAddFileToResult = new FormData();\n\t\tfdlAddFileToResult.left = new FormAttachment(0, 0);\n\t\tfdlAddFileToResult.top = new FormAttachment(wOrderDirection, margin);\n\t\tfdlAddFileToResult.right = new FormAttachment(middle, -margin);\n\t\twlAddFileToResult.setLayoutData(fdlAddFileToResult);\n\t\twAddFileToResult = new Button(wFileResult, SWT.CHECK);\n\t\tprops.setLook(wAddFileToResult);\n\t\twAddFileToResult.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.AddFileToResult.Tooltip\"));\n\t\tfdAddFileToResult = new FormData();\n\t\tfdAddFileToResult.left = new FormAttachment(middle, 0);\n\t\tfdAddFileToResult.top = new FormAttachment(wOrderDirection, margin);\n\t\tfdAddFileToResult.right = new FormAttachment(100, 0);\n\t\twAddFileToResult.setLayoutData(fdAddFileToResult);\n\t\twAddFileToResult.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\n\t      \n\t      \n\t     fdFileResult = new FormData();\n\t     fdFileResult.left = new FormAttachment(0, margin);\n\t     fdFileResult.top = new FormAttachment(wOrderDirection, margin);\n\t     fdFileResult.right = new FormAttachment(100, -margin);\n\t     wFileResult.setLayoutData(fdFileResult);\n\t     // ///////////////////////////////////////////////////////////\n\t     // / END OF FilesRsult GROUP\n\t     // ///////////////////////////////////////////////////////////\n\n\t\t\n\n\t\twOK = new Button(shell, SWT.PUSH);\n\t\twOK.setText(Messages.getString(\"System.Button.OK\"));\n\n\t\twCancel = new Button(shell, SWT.PUSH);\n\t\twCancel.setText(Messages.getString(\"System.Button.Cancel\"));\r\n\t\t\r\n\t\tBaseStepDialog.positionBottomButtons(shell, new Button[] { wOK, wCancel }, margin, wFileResult);\n\t\t// Add listeners\r\n\t\tlsCancel   = new Listener() { public void handleEvent(Event e) { cancel(); } };\r\n\t\tlsOK       = new Listener() { public void handleEvent(Event e) { ok();     } };\r\n\t\t\r\n\t\twCancel.addListener(SWT.Selection, lsCancel);\r\n\t\twOK.addListener    (SWT.Selection, lsOK    );\r\n\t\t\r\n\t\tlsDef=new SelectionAdapter() { public void widgetDefaultSelected(SelectionEvent e) { ok(); } };\n\n\t\twName.addSelectionListener(lsDef);\n\t\twTablename.addSelectionListener(lsDef);\n\t\r\n\t\t// Detect X or ALT-F4 or something that kills this window...\r\n\t\tshell.addShellListener(\tnew ShellAdapter() { public void shellClosed(ShellEvent e) { cancel(); } } );\r\n\t\t\r\n\t\t\n\t\tgetData();\n\n\t\tBaseStepDialog.setSize(shell);\n\n\t\tshell.open();\n\t\tprops.setDialogSize(shell, \"JobMssqlBulkLoadDialogSize\");\n\t\twhile (!shell.isDisposed())\n\t\t{\n\t\t\tif (!display.readAndDispatch())\n\t\t\t\tdisplay.sleep();\n\t\t}\n\t\treturn jobEntry;\n\t}","id":10280,"modified_method":"public JobEntryInterface open()\n\t{\n\t\tShell parent = getParent();\n\t\tDisplay display = parent.getDisplay();\n\n\t\tshell = new Shell(parent, props.getJobsDialogStyle());\n\t\tprops.setLook(shell);\n\t\tJobDialog.setShellImage(shell, jobEntry);\n\n\t\tModifyListener lsMod = new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t};\n\t\tchanged = jobEntry.hasChanged();\n\n\t\tFormLayout formLayout = new FormLayout();\n\t\tformLayout.marginWidth = Const.FORM_MARGIN;\n\t\tformLayout.marginHeight = Const.FORM_MARGIN;\n\n\t\tshell.setLayout(formLayout);\n\t\tshell.setText(Messages.getString(\"JobMssqlBulkLoad.Title\"));\n\n\t\tint middle = props.getMiddlePct();\n\t\tint margin = Const.MARGIN;\n\n\t\t// Filename line\n\t\twlName = new Label(shell, SWT.RIGHT);\n\t\twlName.setText(Messages.getString(\"JobMssqlBulkLoad.Name.Label\"));\n\t\tprops.setLook(wlName);\n\t\tfdlName = new FormData();\n\t\tfdlName.left = new FormAttachment(0, 0);\n\t\tfdlName.right = new FormAttachment(middle, 0);\n\t\tfdlName.top = new FormAttachment(0, margin);\n\t\twlName.setLayoutData(fdlName);\n\t\twName = new Text(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wName);\n\t\twName.addModifyListener(lsMod);\n\t\tfdName = new FormData();\n\t\tfdName.left = new FormAttachment(middle, 0);\n\t\tfdName.top = new FormAttachment(0, margin);\n\t\tfdName.right = new FormAttachment(100, 0);\n\t\twName.setLayoutData(fdName);\r\n\t\t\t\r\n\t\t// Connection line\r\n\t\twConnection = addConnectionLine(shell, wName, middle, margin);\r\n\t\tif (jobEntry.getDatabase()==null && jobMeta.nrDatabases()==1) wConnection.select(0);\r\n\t\twConnection.addModifyListener(lsMod);\r\n\t\t\n\t\t// Schema name line\n\t\twlSchemaname = new Label(shell, SWT.RIGHT);\n\t\twlSchemaname.setText(Messages.getString(\"JobMssqlBulkLoad.Schemaname.Label\"));\n\t\tprops.setLook(wlSchemaname);\n\t\tfdlSchemaname = new FormData();\n\t\tfdlSchemaname.left = new FormAttachment(0, 0);\n\t\tfdlSchemaname.right = new FormAttachment(middle, 0);\n\t\tfdlSchemaname.top = new FormAttachment(wConnection, margin);\n\t\twlSchemaname.setLayoutData(fdlSchemaname);\n\n\t\twSchemaname = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wSchemaname);\n\t\twSchemaname.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.Schemaname.Tooltip\"));\n\t\twSchemaname.addModifyListener(lsMod);\n\t\tfdSchemaname = new FormData();\n\t\tfdSchemaname.left = new FormAttachment(middle, 0);\n\t\tfdSchemaname.top = new FormAttachment(wConnection, margin);\n\t\tfdSchemaname.right = new FormAttachment(100, 0);\n\t\twSchemaname.setLayoutData(fdSchemaname);\n\n\t\t// Table name line\n\t\twlTablename = new Label(shell, SWT.RIGHT);\n\t\twlTablename.setText(Messages.getString(\"JobMssqlBulkLoad.Tablename.Label\"));\n\t\tprops.setLook(wlTablename);\n\t\tfdlTablename = new FormData();\n\t\tfdlTablename.left = new FormAttachment(0, 0);\n\t\tfdlTablename.right = new FormAttachment(middle, 0);\n\t\tfdlTablename.top = new FormAttachment(wSchemaname, margin);\n\t\twlTablename.setLayoutData(fdlTablename);\n\n\t\twbTable=new Button(shell, SWT.PUSH| SWT.CENTER);\n\t\tprops.setLook(wbTable);\n\t\twbTable.setText(Messages.getString(\"System.Button.Browse\"));\n\t\tFormData fdbTable = new FormData();\n\t\tfdbTable.right= new FormAttachment(100, 0);\n\t\tfdbTable.top  = new FormAttachment(wSchemaname, margin/2);\n\t\twbTable.setLayoutData(fdbTable);\n\t\twbTable.addSelectionListener( new SelectionAdapter() { public void widgetSelected(SelectionEvent e) { getTableName(); } } );\n\n\t\twTablename = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wTablename);\n\t\twTablename.addModifyListener(lsMod);\n\t\tfdTablename = new FormData();\n\t\tfdTablename.left = new FormAttachment(middle, 0);\n\t\tfdTablename.top = new FormAttachment(wSchemaname, margin);\n\t\tfdTablename.right = new FormAttachment(wbTable, -margin);\n\t\twTablename.setLayoutData(fdTablename);\n\n\t\t// Filename line\n\t\twlFilename = new Label(shell, SWT.RIGHT);\n\t\twlFilename.setText(Messages.getString(\"JobMssqlBulkLoad.Filename.Label\"));\n\t\tprops.setLook(wlFilename);\n\t\tfdlFilename = new FormData();\n\t\tfdlFilename.left = new FormAttachment(0, 0);\n\t\tfdlFilename.top = new FormAttachment(wTablename, margin);\n\t\tfdlFilename.right = new FormAttachment(middle, -margin);\n\t\twlFilename.setLayoutData(fdlFilename);\n\n\t\twbFilename = new Button(shell, SWT.PUSH | SWT.CENTER);\n\t\tprops.setLook(wbFilename);\n\t\twbFilename.setText(Messages.getString(\"System.Button.Browse\"));\n\t\tfdbFilename = new FormData();\n\t\tfdbFilename.right = new FormAttachment(100, 0);\n\t\tfdbFilename.top = new FormAttachment(wTablename, 0);\n\t\twbFilename.setLayoutData(fdbFilename);\n\n\t\twFilename = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wFilename);\n\t\twFilename.addModifyListener(lsMod);\n\t\tfdFilename = new FormData();\n\t\tfdFilename.left = new FormAttachment(middle, 0);\n\t\tfdFilename.top = new FormAttachment(wTablename, margin);\n\t\tfdFilename.right = new FormAttachment(wbFilename, -margin);\n\t\twFilename.setLayoutData(fdFilename);\n\n\t\t// Whenever something changes, set the tooltip to the expanded version:\n\t\twFilename.addModifyListener(new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\twFilename.setToolTipText(jobMeta.environmentSubstitute(wFilename.getText()));\n\t\t\t}\n\t\t});\n\n\t\twbFilename.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.OPEN);\n\t\t\t\tdialog.setFilterExtensions(new String[] { \"*.txt\", \"*.csv\", \"*\" });\n\t\t\t\tif (wFilename.getText() != null)\n\t\t\t\t{\n\t\t\t\t\tdialog.setFileName(jobMeta.environmentSubstitute(wFilename.getText()));\n\t\t\t\t}\n\t\t\t\tdialog.setFilterNames(FILETYPES);\n\t\t\t\tif (dialog.open() != null)\n\t\t\t\t{\n\t\t\t\t\twFilename.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR\n\t\t\t\t\t\t+ dialog.getFileName());\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\n\r\n\t\t// Data file type\r\n\t\twlDataFiletype = new Label(shell, SWT.RIGHT);\r\n\t\twlDataFiletype.setText(Messages.getString(\"JobMysqlBulkLoad.DataFiletype.Label\"));\r\n\t\tprops.setLook(wlDataFiletype);\r\n\t\tfdlDataFiletype = new FormData();\r\n\t\tfdlDataFiletype.left = new FormAttachment(0, 0);\r\n\t\tfdlDataFiletype.right = new FormAttachment(middle, 0);\r\n\t\tfdlDataFiletype.top = new FormAttachment(wFilename, margin);\r\n\t\twlDataFiletype.setLayoutData(fdlDataFiletype);\r\n\t\twDataFiletype = new CCombo(shell, SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);\r\n\t\t\t\t\twDataFiletype.add(\"char\");\r\n\t\t\t\t\twDataFiletype.add(\"native\");\r\n\t\t\t\t\twDataFiletype.add(\"widechar\");\r\n\t\t\t\t\twDataFiletype.add(\"widenative\");\t\t\t\t\t\r\n\t\t\t\t\twDataFiletype.select(0); // +1: starts at -1\r\n\r\n\t\tprops.setLook(wDataFiletype);\r\n\t\tfdDataFiletype= new FormData();\r\n\t\tfdDataFiletype.left = new FormAttachment(middle, 0);\r\n\t\tfdDataFiletype.top = new FormAttachment(wFilename, margin);\r\n\t\tfdDataFiletype.right = new FormAttachment(100, 0);\r\n\t\twDataFiletype.setLayoutData(fdDataFiletype);\r\n\t\twDataFiletype.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tsetDataType();\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});\r\n\n\n\t\t// FieldTerminator\n\t\twlFieldTerminator = new Label(shell, SWT.RIGHT);\n\t\twlFieldTerminator.setText(Messages.getString(\"JobMssqlBulkLoad.FieldTerminator.Label\"));\n\t\tprops.setLook(wlFieldTerminator);\n\t\tfdlFieldTerminator = new FormData();\n\t\tfdlFieldTerminator.left = new FormAttachment(0, 0);\n\t\tfdlFieldTerminator.right = new FormAttachment(middle, 0);\n\t\tfdlFieldTerminator.top = new FormAttachment(wDataFiletype, margin);\n\t\twlFieldTerminator.setLayoutData(fdlFieldTerminator);\n\n\t\twFieldTerminator = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wFieldTerminator);\r\n\t\twFieldTerminator.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.FieldTerminator.Tooltip\"));\n\t\twFieldTerminator.addModifyListener(lsMod);\n\t\tfdFieldTerminator = new FormData();\n\t\tfdFieldTerminator.left = new FormAttachment(middle, 0);\n\t\tfdFieldTerminator.top = new FormAttachment(wDataFiletype, margin);\n\t\tfdFieldTerminator.right = new FormAttachment(100, 0);\n\t\twFieldTerminator.setLayoutData(fdFieldTerminator);\n\n\t\t// Line terminated\n\t\twlLineterminated = new Label(shell, SWT.RIGHT);\n\t\twlLineterminated.setText(Messages.getString(\"JobMssqlBulkLoad.Lineterminated.Label\"));\n\t\tprops.setLook(wlLineterminated);\n\t\tfdlLineterminated = new FormData();\n\t\tfdlLineterminated.left = new FormAttachment(0, 0);\n\t\tfdlLineterminated.right = new FormAttachment(middle, 0);\n\t\tfdlLineterminated.top = new FormAttachment(wFieldTerminator, margin);\n\t\twlLineterminated.setLayoutData(fdlLineterminated);\n\n\t\twLineterminated = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wLineterminated);\n\t\twLineterminated.addModifyListener(lsMod);\n\t\tfdLineterminated = new FormData();\n\t\tfdLineterminated.left = new FormAttachment(middle, 0);\n\t\tfdLineterminated.top = new FormAttachment(wFieldTerminator, margin);\n\t\tfdLineterminated.right = new FormAttachment(100, 0);\n\t\twLineterminated.setLayoutData(fdLineterminated);\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t// CodePage\r\n\t\twlCodePage = new Label(shell, SWT.RIGHT);\r\n\t\twlCodePage.setText(Messages.getString(\"JobMysqlBulkLoad.CodePage.Label\"));\r\n\t\tprops.setLook(wlCodePage);\r\n\t\tfdlCodePage = new FormData();\r\n\t\tfdlCodePage.left = new FormAttachment(0, 0);\r\n\t\tfdlCodePage.right = new FormAttachment(middle, 0);\r\n\t\tfdlCodePage.top = new FormAttachment(wLineterminated, margin);\r\n\t\twlCodePage.setLayoutData(fdlCodePage);\r\n\t\twCodePage = new CCombo(shell, SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);\r\n\t\t\t\t\twCodePage.add(\"ACP\");\r\n\t\t\t\t\twCodePage.add(\"OEM\");\r\n\t\t\t\t\twCodePage.add(\"RAW\");\r\n\t\t\t\t\twCodePage.add(Messages.getString(\"JobMssqlBulkLoad.CodePage.Specific\"));\r\n\t\t\t\t\twCodePage.select(0); // +1: starts at -1\r\n\r\n\t\tprops.setLook(wCodePage);\r\n\t\tfdCodePage= new FormData();\r\n\t\tfdCodePage.left = new FormAttachment(middle, 0);\r\n\t\tfdCodePage.top = new FormAttachment(wLineterminated, margin);\r\n\t\tfdCodePage.right = new FormAttachment(100, 0);\r\n\t\twCodePage.setLayoutData(fdCodePage);\r\n\t\twCodePage.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tsetCodeType();\r\n\t\t\t\t\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t// Specific CodePage\r\n\t\twlSpecificCodePage = new Label(shell, SWT.RIGHT);\r\n\t\twlSpecificCodePage.setText(Messages.getString(\"JobMssqlBulkLoad.SpecificCodePage.Label\"));\r\n\t\tprops.setLook(wlSpecificCodePage);\r\n\t\tfdlSpecificCodePage = new FormData();\r\n\t\tfdlSpecificCodePage.left = new FormAttachment(0, 0);\r\n\t\tfdlSpecificCodePage.right = new FormAttachment(middle, 0);\r\n\t\tfdlSpecificCodePage.top = new FormAttachment(wCodePage, margin);\r\n\t\twlSpecificCodePage.setLayoutData(fdlSpecificCodePage);\r\n\r\n\t\twSpecificCodePage = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\r\n\t\tprops.setLook(wSpecificCodePage);\r\n\t\twSpecificCodePage.addModifyListener(lsMod);\r\n\t\tfdSpecificCodePage = new FormData();\r\n\t\tfdSpecificCodePage.left = new FormAttachment(middle, 0);\r\n\t\tfdSpecificCodePage.top = new FormAttachment(wCodePage, margin);\r\n\t\tfdSpecificCodePage.right = new FormAttachment(100, 0);\r\n\t\twSpecificCodePage.setLayoutData(fdSpecificCodePage);\r\n\t\t\r\n\t\t\r\n\t\t\r\n\r\n\t\t// FortmatFilename line\r\n\t\twlFortmatFilename = new Label(shell, SWT.RIGHT);\r\n\t\twlFortmatFilename.setText(Messages.getString(\"JobMssqlBulkLoad.FortmatFilename.Label\"));\r\n\t\tprops.setLook(wlFortmatFilename);\r\n\t\tfdlFortmatFilename = new FormData();\r\n\t\tfdlFortmatFilename.left = new FormAttachment(0, 0);\r\n\t\tfdlFortmatFilename.top = new FormAttachment(wSpecificCodePage, margin);\r\n\t\tfdlFortmatFilename.right = new FormAttachment(middle, -margin);\r\n\t\twlFortmatFilename.setLayoutData(fdlFortmatFilename);\r\n\r\n\t\twbFortmatFilename = new Button(shell, SWT.PUSH | SWT.CENTER);\r\n\t\tprops.setLook(wbFortmatFilename);\r\n\t\twbFortmatFilename.setText(Messages.getString(\"System.Button.Browse\"));\r\n\t\tfdbFortmatFilename = new FormData();\r\n\t\tfdbFortmatFilename.right = new FormAttachment(100, 0);\r\n\t\tfdbFortmatFilename.top = new FormAttachment(wSpecificCodePage, 0);\r\n\t\twbFortmatFilename.setLayoutData(fdbFortmatFilename);\r\n\r\n\t\twFortmatFilename = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\r\n\t\tprops.setLook(wFortmatFilename);\r\n\t\twFortmatFilename.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.FortmatFilename.Tooltip\"));\r\n\t\twFortmatFilename.addModifyListener(lsMod);\r\n\t\tfdFortmatFilename = new FormData();\r\n\t\tfdFortmatFilename.left = new FormAttachment(middle, 0);\r\n\t\tfdFortmatFilename.top = new FormAttachment(wSpecificCodePage, margin);\r\n\t\tfdFortmatFilename.right = new FormAttachment(wbFortmatFilename, -margin);\r\n\t\twFortmatFilename.setLayoutData(fdFortmatFilename);\r\n\r\n\t\t// Whenever something changes, set the tooltip to the expanded version:\r\n\t\twFortmatFilename.addModifyListener(new ModifyListener()\r\n\t\t{\r\n\t\t\tpublic void modifyText(ModifyEvent e)\r\n\t\t\t{\r\n\t\t\t\twFortmatFilename.setToolTipText(jobMeta.environmentSubstitute(wFortmatFilename.getText()));\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\twbFortmatFilename.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.OPEN);\r\n\t\t\t\tdialog.setFilterExtensions(new String[] { \"*.txt\", \"*.csv\", \"*\" });\r\n\t\t\t\tif (wFortmatFilename.getText() != null)\r\n\t\t\t\t{\r\n\t\t\t\t\tdialog.setFileName(jobMeta.environmentSubstitute(wFortmatFilename.getText()));\r\n\t\t\t\t}\r\n\t\t\t\tdialog.setFilterNames(FILETYPES);\r\n\t\t\t\tif (dialog.open() != null)\r\n\t\t\t\t{\r\n\t\t\t\t\twFortmatFilename.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR\r\n\t\t\t\t\t\t+ dialog.getFileName());\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t});\r\n\r\n\t\t\r\n\t\t\r\n\t\t\r\n\t\t//Fire Triggers?\r\n\t\twlFireTriggers = new Label(shell, SWT.RIGHT);\r\n\t\twlFireTriggers.setText(Messages.getString(\"JobMssqlBulkLoad.FireTriggers.Label\"));\r\n\t\tprops.setLook(wlFireTriggers);\r\n\t\tfdlFireTriggers = new FormData();\r\n\t\tfdlFireTriggers.left = new FormAttachment(0, 0);\r\n\t\tfdlFireTriggers.top = new FormAttachment(wFortmatFilename, margin);\r\n\t\tfdlFireTriggers.right = new FormAttachment(middle, -margin);\r\n\t\twlFireTriggers.setLayoutData(fdlFireTriggers);\r\n\t\twFireTriggers = new Button(shell, SWT.CHECK);\r\n\t\tprops.setLook(wFireTriggers);\r\n\t\twFireTriggers.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.FireTriggers.Tooltip\"));\r\n\t\tfdFireTriggers = new FormData();\r\n\t\tfdFireTriggers.left = new FormAttachment(middle, 0);\r\n\t\tfdFireTriggers.top = new FormAttachment(wFortmatFilename, margin);\r\n\t\tfdFireTriggers.right = new FormAttachment(100, 0);\r\n\t\twFireTriggers.setLayoutData(fdFireTriggers);\r\n\t\twFireTriggers.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\n\r\n\t\t// CHECK CONSTRAINTS\r\n\t\twlCheckConstraints = new Label(shell, SWT.RIGHT);\r\n\t\twlCheckConstraints.setText(Messages.getString(\"JobMssqlBulkLoad.CheckConstraints.Label\"));\r\n\t\tprops.setLook(wlCheckConstraints);\r\n\t\tfdlCheckConstraints = new FormData();\r\n\t\tfdlCheckConstraints.left = new FormAttachment(0, 0);\r\n\t\tfdlCheckConstraints.top = new FormAttachment(wFireTriggers, margin);\r\n\t\tfdlCheckConstraints.right = new FormAttachment(middle, -margin);\r\n\t\twlCheckConstraints.setLayoutData(fdlCheckConstraints);\r\n\t\twCheckConstraints = new Button(shell, SWT.CHECK);\r\n\t\tprops.setLook(wCheckConstraints);\r\n\t\twCheckConstraints.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.CheckConstraints.Tooltip\"));\r\n\t\tfdCheckConstraints = new FormData();\r\n\t\tfdCheckConstraints.left = new FormAttachment(middle, 0);\r\n\t\tfdCheckConstraints.top = new FormAttachment(wFireTriggers, margin);\r\n\t\tfdCheckConstraints.right = new FormAttachment(100, 0);\r\n\t\twCheckConstraints.setLayoutData(fdCheckConstraints);\r\n\t\twCheckConstraints.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t// Keep Nulls\r\n\t\twlKeepNulls = new Label(shell, SWT.RIGHT);\r\n\t\twlKeepNulls.setText(Messages.getString(\"JobMssqlBulkLoad.KeepNulls.Label\"));\r\n\t\tprops.setLook(wlKeepNulls);\r\n\t\tfdlKeepNulls = new FormData();\r\n\t\tfdlKeepNulls.left = new FormAttachment(0, 0);\r\n\t\tfdlKeepNulls.top = new FormAttachment(wCheckConstraints, margin);\r\n\t\tfdlKeepNulls.right = new FormAttachment(middle, -margin);\r\n\t\twlKeepNulls.setLayoutData(fdlKeepNulls);\r\n\t\twKeepNulls = new Button(shell, SWT.CHECK);\r\n\t\tprops.setLook(wKeepNulls);\r\n\t\twKeepNulls.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.KeepNulls.Tooltip\"));\r\n\t\tfdKeepNulls = new FormData();\r\n\t\tfdKeepNulls.left = new FormAttachment(middle, 0);\r\n\t\tfdKeepNulls.top = new FormAttachment(wCheckConstraints, margin);\r\n\t\tfdKeepNulls.right = new FormAttachment(100, 0);\r\n\t\twKeepNulls.setLayoutData(fdKeepNulls);\r\n\t\twKeepNulls.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t}\r\n\t\t});\n\t\t\r\n\t\t// TABBLOCK\r\n\t\twlTablock = new Label(shell, SWT.RIGHT);\r\n\t\twlTablock.setText(Messages.getString(\"JobMssqlBulkLoad.Tablock.Label\"));\r\n\t\tprops.setLook(wlTablock);\r\n\t\tfdlTablock = new FormData();\r\n\t\tfdlTablock.left = new FormAttachment(0, 0);\r\n\t\tfdlTablock.top = new FormAttachment(wKeepNulls, margin);\r\n\t\tfdlTablock.right = new FormAttachment(middle, -margin);\r\n\t\twlTablock.setLayoutData(fdlTablock);\r\n\t\twTablock = new Button(shell, SWT.CHECK);\r\n\t\tprops.setLook(wTablock);\r\n\t\twTablock.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.Tablock.Tooltip\"));\r\n\t\tfdTablock = new FormData();\r\n\t\tfdTablock.left = new FormAttachment(middle, 0);\r\n\t\tfdTablock.top = new FormAttachment(wKeepNulls, margin);\r\n\t\tfdTablock.right = new FormAttachment(100, 0);\r\n\t\twTablock.setLayoutData(fdTablock);\r\n\t\twTablock.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\n\t\t// Start file\n\t\twlStartFile = new Label(shell, SWT.RIGHT);\n\t\twlStartFile.setText(Messages.getString(\"JobMssqlBulkLoad.StartFile.Label\"));\n\t\tprops.setLook(wlStartFile);\n\t\tfdlStartFile = new FormData();\n\t\tfdlStartFile.left = new FormAttachment(0, 0);\n\t\tfdlStartFile.right = new FormAttachment(middle, 0);\n\t\tfdlStartFile.top = new FormAttachment(wTablock, margin);\n\t\twlStartFile.setLayoutData(fdlStartFile);\n\n\t\twStartFile = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\tprops.setLook(wStartFile);\r\n\t\twStartFile.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.StartFile.Tooltip\"));\n\t\twStartFile.addModifyListener(lsMod);\n\t\tfdStartFile = new FormData();\n\t\tfdStartFile.left = new FormAttachment(middle, 0);\n\t\tfdStartFile.top = new FormAttachment(wTablock, margin);\n\t\tfdStartFile.right = new FormAttachment(100, 0);\n\t\twStartFile.setLayoutData(fdStartFile);\n\t\t\r\n\t\t\r\n\t\t// End file\r\n\t\twlEndFile = new Label(shell, SWT.RIGHT);\r\n\t\twlEndFile.setText(Messages.getString(\"JobMssqlBulkLoad.EndFile.Label\"));\r\n\t\tprops.setLook(wlEndFile);\r\n\t\tfdlEndFile = new FormData();\r\n\t\tfdlEndFile.left = new FormAttachment(0, 0);\r\n\t\tfdlEndFile.right = new FormAttachment(middle, 0);\r\n\t\tfdlEndFile.top = new FormAttachment(wStartFile, margin);\r\n\t\twlEndFile.setLayoutData(fdlEndFile);\r\n\r\n\t\twEndFile = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\r\n\t\tprops.setLook(wEndFile);\r\n\t\twEndFile.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.EndFile.Tooltip\"));\r\n\t\twEndFile.addModifyListener(lsMod);\r\n\t\tfdEndFile = new FormData();\r\n\t\tfdEndFile.left = new FormAttachment(middle, 0);\r\n\t\tfdEndFile.top = new FormAttachment(wStartFile, margin);\r\n\t\tfdEndFile.right = new FormAttachment(100, 0);\r\n\t\twEndFile.setLayoutData(fdEndFile);\n\t\t\n\t\t// Specifies how the data in the data file is sorted\r\n\t\twlOrderBy = new Label(shell, SWT.RIGHT);\r\n\t\twlOrderBy.setText(Messages.getString(\"JobMssqlBulkLoad.OrderBy.Label\"));\r\n\t\tprops.setLook(wlOrderBy);\r\n\t\tfdlOrderBy = new FormData();\r\n\t\tfdlOrderBy.left = new FormAttachment(0, 0);\r\n\t\tfdlOrderBy.right = new FormAttachment(middle, 0);\r\n\t\tfdlOrderBy.top = new FormAttachment(wEndFile, margin);\r\n\t\twlOrderBy.setLayoutData(fdlOrderBy);\r\n\t\t\r\n\t\twbOrderBy=new Button(shell, SWT.PUSH| SWT.CENTER);\r\n\t\tprops.setLook(wbOrderBy);\r\n\t\twbOrderBy.setText(Messages.getString(\"System.Button.Edit\"));\r\n\t\tFormData fdbListattribut = new FormData();\r\n\t\tfdbListattribut.right= new FormAttachment(100, 0);\r\n\t\tfdbListattribut.top  = new FormAttachment(wEndFile, margin);\r\n\t\twbOrderBy.setLayoutData(fdbListattribut);\r\n\t\twbOrderBy.addSelectionListener( new SelectionAdapter() { public void widgetSelected(SelectionEvent e) { getListColumns(); } } );\r\n\r\n\t\twOrderBy = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\r\n\t\tprops.setLook(wOrderBy);\r\n\t\twOrderBy.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.OrderBy.Tooltip\"));\r\n\t\twOrderBy.addModifyListener(lsMod);\r\n\t\tfdOrderBy = new FormData();\r\n\t\tfdOrderBy.left = new FormAttachment(middle, 0);\r\n\t\tfdOrderBy.top = new FormAttachment(wEndFile, margin);\r\n\t\tfdOrderBy.right = new FormAttachment(wbOrderBy, -margin);\r\n\t\twOrderBy.setLayoutData(fdOrderBy);\r\n\t\t\r\n\t\t\r\n\t\t// Order Direction\r\n\t\twlOrderDirection = new Label(shell, SWT.RIGHT);\r\n\t\twlOrderDirection.setText(Messages.getString(\"JobMysqlBulkLoad.OrderDirection.Label\"));\r\n\t\tprops.setLook(wlOrderDirection);\r\n\t\tfdlOrderDirection = new FormData();\r\n\t\tfdlOrderDirection.left = new FormAttachment(0, 0);\r\n\t\tfdlOrderDirection.right = new FormAttachment(middle, 0);\r\n\t\tfdlOrderDirection.top = new FormAttachment(wOrderBy, margin);\r\n\t\twlOrderDirection.setLayoutData(fdlOrderDirection);\r\n\t\twOrderDirection = new CCombo(shell, SWT.SINGLE | SWT.READ_ONLY | SWT.BORDER);\r\n\t\t\t\t\twOrderDirection.add(Messages.getString(\"JobMysqlBulkLoad.OrderDirectionAsc.Label\"));\r\n\t\t\t\t\twOrderDirection.add(Messages.getString(\"JobMysqlBulkLoad.OrderDirectionDesc.Label\"));\r\n\t\t\t\t\twOrderDirection.select(0); // +1: starts at -1\r\n\r\n\t\tprops.setLook(wOrderDirection);\r\n\t\tfdOrderDirection= new FormData();\r\n\t\tfdOrderDirection.left = new FormAttachment(middle, 0);\r\n\t\tfdOrderDirection.top = new FormAttachment(wOrderBy, margin);\r\n\t\tfdOrderDirection.right = new FormAttachment(100, 0);\r\n\t\twOrderDirection.setLayoutData(fdOrderDirection);\r\n\t\t\r\n\t\t\r\n\t\t// ErrorFilename line\r\n\t\twlErrorFilename=new Label(shell, SWT.RIGHT);\r\n\t\twlErrorFilename.setText(Messages.getString(\"JobMysqlBulkLoad.ErrorFilename.Label\"));\r\n \t\tprops.setLook(wlErrorFilename);\r\n\t\tfdlErrorFilename=new FormData();\r\n\t\tfdlErrorFilename.left = new FormAttachment(0, 0);\r\n\t\tfdlErrorFilename.top  = new FormAttachment(wOrderDirection, margin);\r\n\t\tfdlErrorFilename.right= new FormAttachment(middle, -margin);\r\n\t\twlErrorFilename.setLayoutData(fdlErrorFilename);\r\n\r\n\t\twbErrorFilename=new Button(shell, SWT.PUSH| SWT.CENTER);\r\n \t\tprops.setLook(wbErrorFilename);\r\n\t\twbErrorFilename.setText(Messages.getString(\"System.Button.Browse\"));\r\n\t\tfdbErrorFilename=new FormData();\r\n\t\tfdbErrorFilename.right= new FormAttachment(100, 0);\r\n\t\tfdbErrorFilename.top  = new FormAttachment(wOrderDirection, 0);\r\n\t\twbErrorFilename.setLayoutData(fdbErrorFilename);\r\n\r\n\t\twErrorFilename=new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\r\n \t\tprops.setLook(wErrorFilename);\r\n\t\twErrorFilename.addModifyListener(lsMod);\r\n\t\tfdErrorFilename=new FormData();\r\n\t\tfdErrorFilename.left = new FormAttachment(middle, 0);\r\n\t\tfdErrorFilename.top  = new FormAttachment(wOrderDirection, margin);\r\n\t\tfdErrorFilename.right= new FormAttachment(wbErrorFilename, -margin);\r\n\t\twErrorFilename.setLayoutData(fdErrorFilename);\r\n\r\n\t\t// Whenever something changes, set the tooltip to the expanded version:\r\n\t\twErrorFilename.addModifyListener(new ModifyListener()\r\n\t\t\t{\r\n\t\t\t\tpublic void modifyText(ModifyEvent e)\r\n\t\t\t\t{\r\n\t\t\t\t\twErrorFilename.setToolTipText(jobMeta.environmentSubstitute( wErrorFilename.getText() ) );\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\twbErrorFilename.addSelectionListener\r\n\t\t(\r\n\t\t\tnew SelectionAdapter()\r\n\t\t\t{\r\n\t\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t\t{\r\n\t\t\t\t\tDirectoryDialog dialog = new DirectoryDialog(shell, SWT.OPEN);\r\n\t\t\t\t\tif (wErrorFilename.getText()!=null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\tdialog.setFilterPath(jobMeta.environmentSubstitute(wErrorFilename.getText()) );\r\n\t\t\t\t\t}\r\n\t\t\t\t\r\n\t\t\t\t\tString dir=dialog.open();\r\n\t\t\t\t\tif(dir!=null)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\twErrorFilename.setText(dir);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t);\r\n\r\n\t\t// Add Date time\r\n\t\twlAddDateTime = new Label(shell, SWT.RIGHT);\r\n\t\twlAddDateTime.setText(Messages.getString(\"JobMssqlBulkLoad.AddDateTime.Label\"));\r\n\t\tprops.setLook(wlAddDateTime);\r\n\t\tfdlAddDateTime = new FormData();\r\n\t\tfdlAddDateTime.left = new FormAttachment(0, 0);\r\n\t\tfdlAddDateTime.top = new FormAttachment(wErrorFilename, margin);\r\n\t\tfdlAddDateTime.right = new FormAttachment(middle, -margin);\r\n\t\twlAddDateTime.setLayoutData(fdlAddDateTime);\r\n\t\twAddDateTime = new Button(shell, SWT.CHECK);\r\n\t\tprops.setLook(wAddDateTime);\r\n\t\twAddDateTime.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.AddDateTime.Tooltip\"));\r\n\t\tfdAddDateTime = new FormData();\r\n\t\tfdAddDateTime.left = new FormAttachment(middle, 0);\r\n\t\tfdAddDateTime.top = new FormAttachment(wErrorFilename, margin);\r\n\t\tfdAddDateTime.right = new FormAttachment(100, 0);\r\n\t\twAddDateTime.setLayoutData(fdAddDateTime);\r\n\t\twAddDateTime.addSelectionListener(new SelectionAdapter()\r\n\t\t{\r\n\t\t\tpublic void widgetSelected(SelectionEvent e)\r\n\t\t\t{\r\n\t\t\t\tjobEntry.setChanged();\r\n\t\t\t}\r\n\t\t});\r\n\t\t\r\n\t\t\r\n\r\n\r\n\t\t// Maximum errors allowed\r\n\t\twlMaxErrors = new Label(shell, SWT.RIGHT);\r\n\t\twlMaxErrors.setText(Messages.getString(\"JobMssqlBulkLoad.MaxErrors.Label\"));\r\n\t\tprops.setLook(wlMaxErrors);\r\n\t\tfdlMaxErrors = new FormData();\r\n\t\tfdlMaxErrors.left = new FormAttachment(0, 0);\r\n\t\tfdlMaxErrors.right = new FormAttachment(middle, 0);\r\n\t\tfdlMaxErrors.top = new FormAttachment(wAddDateTime, margin);\r\n\t\twlMaxErrors.setLayoutData(fdlMaxErrors);\r\n\r\n\t\twMaxErrors = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\r\n\t\tprops.setLook(wMaxErrors);\r\n\t\twlMaxErrors.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.MaxErrors.Tooltip\"));\r\n\t\twMaxErrors.addModifyListener(lsMod);\r\n\t\tfdMaxErrors = new FormData();\r\n\t\tfdMaxErrors.left = new FormAttachment(middle, 0);\r\n\t\tfdMaxErrors.top = new FormAttachment(wAddDateTime, margin);\r\n\t\tfdMaxErrors.right = new FormAttachment(100, 0);\r\n\t\twMaxErrors.setLayoutData(fdMaxErrors);\r\n\r\n\t\t// Batch Size\r\n\t\twlBatchSize = new Label(shell, SWT.RIGHT);\r\n\t\twlBatchSize.setText(Messages.getString(\"JobMssqlBulkLoad.BatchSize.Label\"));\r\n\t\tprops.setLook(wlBatchSize);\r\n\t\tfdlBatchSize = new FormData();\r\n\t\tfdlBatchSize.left = new FormAttachment(0, 0);\r\n\t\tfdlBatchSize.right = new FormAttachment(middle, 0);\r\n\t\tfdlBatchSize.top = new FormAttachment(wMaxErrors, margin);\r\n\t\twlBatchSize.setLayoutData(fdlBatchSize);\r\n\r\n\t\twBatchSize = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\r\n\t\tprops.setLook(wBatchSize);\r\n\t\twBatchSize.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.BatchSize.Tooltip\"));\r\n\t\twBatchSize.addModifyListener(lsMod);\r\n\t\tfdBatchSize = new FormData();\r\n\t\tfdBatchSize.left = new FormAttachment(middle, 0);\r\n\t\tfdBatchSize.top = new FormAttachment(wMaxErrors, margin);\r\n\t\tfdBatchSize.right = new FormAttachment(100, 0);\r\n\t\twBatchSize.setLayoutData(fdBatchSize);\r\n\r\n\r\n\r\n\t\t// Kilobytes per Batch\r\n\t\twlKiloPerBatch = new Label(shell, SWT.RIGHT);\r\n\t\twlKiloPerBatch.setText(Messages.getString(\"JobMssqlBulkLoad.KiloPerBatch.Label\"));\r\n\t\tprops.setLook(wlKiloPerBatch);\r\n\t\tfdlKiloPerBatch = new FormData();\r\n\t\tfdlKiloPerBatch.left = new FormAttachment(0, 0);\r\n\t\tfdlKiloPerBatch.right = new FormAttachment(middle, 0);\r\n\t\tfdlKiloPerBatch.top = new FormAttachment(wBatchSize, margin);\r\n\t\twlKiloPerBatch.setLayoutData(fdlKiloPerBatch);\r\n\r\n\t\twKiloPerBatch = new TextVar(jobMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\r\n\t\tprops.setLook(wKiloPerBatch);\r\n\t\twKiloPerBatch.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.KiloPerBatch.Label\"));\r\n\t\twKiloPerBatch.addModifyListener(lsMod);\r\n\t\tfdKiloPerBatch = new FormData();\r\n\t\tfdKiloPerBatch.left = new FormAttachment(middle, 0);\r\n\t\tfdKiloPerBatch.top = new FormAttachment(wBatchSize, margin);\r\n\t\tfdKiloPerBatch.right = new FormAttachment(100, 0);\r\n\t\twKiloPerBatch.setLayoutData(fdKiloPerBatch);\r\n\r\n\t\t\n\t\t\n\t\t // fileresult grouping?\n\t     // ////////////////////////\n\t     // START OF FILE RESULT GROUP///\n\t     // /\n\t    wFileResult = new Group(shell, SWT.SHADOW_NONE);\n\t    props.setLook(wFileResult);\n\t    wFileResult.setText(Messages.getString(\"JobMssqlBulkLoad.FileResult.Group.Label\"));\n\n\t    FormLayout groupLayout = new FormLayout();\n\t    groupLayout.marginWidth = 10;\n\t    groupLayout.marginHeight = 10;\n\n\t    wFileResult.setLayout(groupLayout);\n\t      \n\t      \n\t  \t//Add file to result\n\t\twlAddFileToResult = new Label(wFileResult, SWT.RIGHT);\n\t\twlAddFileToResult.setText(Messages.getString(\"JobMssqlBulkLoad.AddFileToResult.Label\"));\n\t\tprops.setLook(wlAddFileToResult);\n\t\tfdlAddFileToResult = new FormData();\n\t\tfdlAddFileToResult.left = new FormAttachment(0, 0);\n\t\tfdlAddFileToResult.top = new FormAttachment(wKiloPerBatch, margin);\n\t\tfdlAddFileToResult.right = new FormAttachment(middle, -margin);\n\t\twlAddFileToResult.setLayoutData(fdlAddFileToResult);\n\t\twAddFileToResult = new Button(wFileResult, SWT.CHECK);\n\t\tprops.setLook(wAddFileToResult);\n\t\twAddFileToResult.setToolTipText(Messages.getString(\"JobMssqlBulkLoad.AddFileToResult.Tooltip\"));\n\t\tfdAddFileToResult = new FormData();\n\t\tfdAddFileToResult.left = new FormAttachment(middle, 0);\n\t\tfdAddFileToResult.top = new FormAttachment(wKiloPerBatch, margin);\n\t\tfdAddFileToResult.right = new FormAttachment(100, 0);\n\t\twAddFileToResult.setLayoutData(fdAddFileToResult);\n\t\twAddFileToResult.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tjobEntry.setChanged();\n\t\t\t}\n\t\t});\r\n\t\t\n\t      \n\t      \n\t     fdFileResult = new FormData();\n\t     fdFileResult.left = new FormAttachment(0, margin);\n\t     fdFileResult.top = new FormAttachment(wKiloPerBatch, margin);\n\t     fdFileResult.right = new FormAttachment(100, -margin);\n\t     wFileResult.setLayoutData(fdFileResult);\n\t     // ///////////////////////////////////////////////////////////\n\t     // / END OF FilesRsult GROUP\n\t     // ///////////////////////////////////////////////////////////\n\n\t\t\n\n\t\twOK = new Button(shell, SWT.PUSH);\n\t\twOK.setText(Messages.getString(\"System.Button.OK\"));\n\n\t\twCancel = new Button(shell, SWT.PUSH);\n\t\twCancel.setText(Messages.getString(\"System.Button.Cancel\"));\r\n\t\t\r\n\t\tBaseStepDialog.positionBottomButtons(shell, new Button[] { wOK, wCancel }, margin, wFileResult);\n\t\t// Add listeners\r\n\t\tlsCancel   = new Listener() { public void handleEvent(Event e) { cancel(); } };\r\n\t\tlsOK       = new Listener() { public void handleEvent(Event e) { ok();     } };\r\n\t\t\r\n\t\twCancel.addListener(SWT.Selection, lsCancel);\r\n\t\twOK.addListener    (SWT.Selection, lsOK    );\r\n\t\t\r\n\t\tlsDef=new SelectionAdapter() { public void widgetDefaultSelected(SelectionEvent e) { ok(); } };\n\n\t\twName.addSelectionListener(lsDef);\n\t\twTablename.addSelectionListener(lsDef);\n\t\r\n\t\t// Detect X or ALT-F4 or something that kills this window...\r\n\t\tshell.addShellListener(\tnew ShellAdapter() { public void shellClosed(ShellEvent e) { cancel(); } } );\r\n\t\t\r\n\t\t\n\t\tgetData();\n\t\tsetDataType();\r\n\t\tsetCodeType();\n\t\tBaseStepDialog.setSize(shell);\n\n\t\tshell.open();\n\t\tprops.setDialogSize(shell, \"JobMssqlBulkLoadDialogSize\");\n\t\twhile (!shell.isDisposed())\n\t\t{\n\t\t\tif (!display.readAndDispatch())\n\t\t\t\tdisplay.sleep();\n\t\t}\n\t\treturn jobEntry;\n\t}","commit_id":"24b0cdb742699d152a5377294c1b08a8a181de81","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException\r\n\t{\r\n    \t\r\n\t\tString port=environmentSubstitute(meta.getPort());\r\n\t\tString hostname=environmentSubstitute(meta.getHost());\r\n\t\tString username=environmentSubstitute(meta.getUserName());\r\n\t\tString password=environmentSubstitute(meta.getPassword());\r\n        //Set the filter string.  The more exact of the search string\r\n\t\tString filter=environmentSubstitute(meta.getFilterString());\r\n\t\t//Set the Search base.This is the place where the search will\r\n\t\tString searchbase=environmentSubstitute(meta.getSearchBase());\r\n\t\r\n\t\t\r\n\t\tNamingEnumeration<SearchResult> results=null;\r\n\t\tDirContext ctx = null;\r\n\t\tdata.rownr=0;\r\n\t\tlinesInput=0;\r\n\t\t\r\n\t    String [] attrReturned = new String [meta.getInputFields().length];\r\n\t    Object[] outputRowData = null;\r\n        \r\n        if (first)\r\n        {\r\n            first = false;\r\n            // Create the output row meta-data\r\n            data.outputRowMeta = new RowMeta();\r\n            meta.getFields(data.outputRowMeta, getStepname(), null, null, this); // get the metadata populated\r\n            \r\n            \r\n            // Create convert meta-data objects that will contain Date & Number formatters\r\n            //\r\n            data.convertRowMeta = data.outputRowMeta.clone();\r\n            for (int i=0;i<data.convertRowMeta.size();i++) data.convertRowMeta.getValueMeta(i).setType(ValueMetaInterface.TYPE_STRING);\r\n\r\n            \r\n            \r\n            // For String to <type> conversions, we allocate a conversion meta data row as well...\r\n\t\t\t//\r\n\t\t\tdata.convertRowMeta = data.outputRowMeta.clone();\r\n\t\t\tfor (int i=0;i<data.convertRowMeta.size();i++) {\r\n\t\t\t\tdata.convertRowMeta.getValueMeta(i).setType(ValueMetaInterface.TYPE_STRING);           \r\n            \r\n\t\t\t}\r\n\t\t\t\r\n\t\t   // Get user selection attributes\r\n\t\t   for (int i=0;i<meta.getInputFields().length;i++)\r\n\t\t   {\r\n\t\t    \tattrReturned[i]=environmentSubstitute(meta.getInputFields()[i].getAttribute());\r\n\t\t\t\r\n\t\t   }\r\n        }\r\n\t\r\n\t\ttry \r\n\t\t{\t\r\n\r\n\t\t\t// Try to connect to LDAP server\r\n             ctx = connectServerLdap(hostname,username, password,port);\r\n\t\t     if (ctx==null)\r\n\t\t     {\r\n\t\t    \t logError(Messages.getString(\"LDAPInput.Error.UnableToConnectToServer\"));\r\n\t\t     }\r\n\t\t     \r\n\t\t     logBasic(Messages.getString(\"LDAPInput.ConnectedToServer.Message\",hostname,username));\r\n\t\t     if (log.isDetailed()) logDetailed(Messages.getString(\"LDAPInput.ClassUsed.Message\",ctx.getClass().getName()));\r\n\t\t     // Get the schema tree root\r\n\t\t     DirContext schema = ctx.getSchema(\"\");\r\n\t\t     \r\n\t\t     if (log.isDetailed()) logDetailed(Messages.getString(\"LDAPInput.SchemaList.Message\",\"\"+schema.list(\"\")));\r\n\t\t     \r\n \t\t     SearchControls controls = new SearchControls();\r\n\t\t     controls.setCountLimit(meta.getRowLimit());\r\n\t\t     //controls.setTimeLimit(0);\r\n\t\t    \r\n\t\t     // Limit returned attributes to user selection\r\n\t\t     controls.setReturningAttributes(attrReturned);\r\n\t\t     \r\n\t\t     \r\n\t\t     if(Const.isEmpty(searchbase))\r\n\t\t     {\r\n\t\t\t     // get Search Base\r\n\t\t\t     Attributes attrs = ctx.getAttributes(\"\", new String[] { \"namingContexts\" });\r\n\t\t\t\t Attribute attr = attrs.get(\"namingContexts\");\r\n\t\t\t\t  \r\n\t\t\t\t searchbase=attr.get().toString();\r\n\t\t\t\t if (log.isDetailed()) logBasic(Messages.getString(\"LDAPInput.SearchBaseFound\",searchbase) );\r\n\t\t     } \r\n\t\t\r\n\t         controls.setSearchScope(SearchControls.SUBTREE_SCOPE);\r\n\t         \r\n\t         results = ctx.search(searchbase,filter.replace(\"\\n\\r\", \"\").replace(\"\\n\", \"\"), controls);\r\n\t        \r\n\t         // Get value for attributes\r\n\r\n\t         Attribute attr=null; \r\n\t         String attrvalue=null;\r\n\t       \r\n\t\t       while (((meta.getRowLimit()>0 &&  data.rownr<meta.getRowLimit()) || meta.getRowLimit()==0)  && (results.hasMore()))  \r\n\t\t\t\t{\r\n\t\t    \t    \r\n\t                SearchResult searchResult = (SearchResult) results.next();\r\n\t                Attributes attributes = searchResult.getAttributes();      \r\n\t                \r\n\t\t\t\t\t// Create new row\t\t\t\t\r\n\t\t\t\t\toutputRowData = buildEmptyRow();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t// Execute for each Input field...\r\n\t\t\t\t\tfor (int i=0;i<meta.getInputFields().length;i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Get attribute value\r\n\t\t            \tattr = attributes.get(environmentSubstitute(meta.getInputFields()[i].getAttribute())); \r\n\t\t                if (attr!=null) attrvalue=(String) attr.get();\r\n\t\t               \r\n\t\t\t\t\t\t// DO Trimming!\r\n\t\t\t\t\t\tswitch (meta.getInputFields()[i].getTrimType())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\tcase LDAPInputField.TYPE_TRIM_LEFT:\r\n\t\t\t\t\t\t\tattrvalue = Const.ltrim(attrvalue);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase LDAPInputField.TYPE_TRIM_RIGHT:\r\n\t\t\t\t\t\t\tattrvalue = Const.rtrim(attrvalue);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase LDAPInputField.TYPE_TRIM_BOTH:\r\n\t\t\t\t\t\t\tattrvalue = Const.trim(attrvalue);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t      \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// DO CONVERSIONS...\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t\tValueMetaInterface targetValueMeta = data.outputRowMeta.getValueMeta(i);\r\n\t\t\t\t\t\tValueMetaInterface sourceValueMeta = data.convertRowMeta.getValueMeta(i);\r\n\t\t\t\t\t\toutputRowData[i] = targetValueMeta.convertData(sourceValueMeta, attrvalue);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// Do we need to repeat this field if it is null?\r\n\t\t\t\t\t\tif (meta.getInputFields()[i].isRepeated())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (data.previousRow!=null && Const.isEmpty(attrvalue))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\toutputRowData[i] = data.previousRow[i];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t            \r\n\t\t\t    \r\n\t\t\t \t\t\t\r\n\t\t\t\t\t}    // End of loop over fields...\r\n\t                    \r\n\t\t\t\t\tint rowIndex = meta.getInputFields().length;\r\n\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t        // See if we need to add the row number to the row...  \r\n\t\t\t        if (meta.includeRowNumber() && !Const.isEmpty(meta.getRowNumberField()))\r\n\t\t\t        {\r\n\t\t\t            outputRowData[rowIndex++] = new Long(data.rownr);\r\n\t\t\t        }\r\n\t\t\t        \r\n\t\t\t\t\t\r\n\t\t\t\t\tRowMetaInterface irow = getInputRowMeta();\r\n\t\t\t\t\t\r\n\t\t\t\t\tdata.previousRow = irow==null?outputRowData:(Object[])irow.cloneRow(outputRowData); // copy it to make\r\n\t\t\t\t\t// surely the next step doesn't change it in between...\r\n\t\t\t\t\tdata.rownr++;\r\n\t\t\t\t\tlinesInput++;\r\n\t\t           \r\n\t\t\t\t\tputRow(data.outputRowMeta, outputRowData);  // copy row to output rowset(s);\r\n\t            }\r\n\t\t        \r\n\t\t     \r\n\t\t\t    ctx.close();\r\n\t\t\t    log.logBasic(Messages.getString(\"LDAPInput.log.Deconnection\"),Messages.getString(\"LDAPInput.log.Deconnection.Done\"));\r\n\t\t\t     \r\n\t\t\t    if(log.isDebug()) log.logDebug(Messages.getString(\"LDAPInput.log.ReadRow\"), outputRowData.toString());\r\n\t\t\r\n\t\t\t    if ((linesInput > 0) && (linesInput % Const.ROWS_UPDATE) == 0) logBasic(Messages.getString(\"LDAPInput.log.LineRow\") + linesInput);\r\n\t\t\t     \r\n\t\t} \r\n\t\tcatch(Exception e)\r\n\t\t{\r\n\t\t\tlogError(Messages.getString(\"LDAPInput.log.Exception\"), e);\r\n\t\t\tstopAll();\r\n\t\t\tsetErrors(1);\r\n\t\t} \r\n\t\tfinally\r\n\t    {\r\n\t\t\t\r\n            if (results != null) {\r\n                try {\r\n                    results.close();\r\n                } catch (Exception e) {\r\n                }\r\n            }\r\n            if (ctx != null) {\r\n                try {\r\n                    ctx.close();\r\n                } catch (Exception e) {\r\n                }\r\n            }\r\n\t    }\r\n\t\r\n\t\t\t\r\n\r\n        \r\n        setOutputDone();  // signal end to receiver(s)\r\n        return false;     // This is the end of this step.\r\n\t}","id":10281,"modified_method":"public boolean processRow(StepMetaInterface smi, StepDataInterface sdi) throws KettleException\r\n\t{\r\n    \t\r\n\t\tString port=environmentSubstitute(meta.getPort());\r\n\t\tString hostname=environmentSubstitute(meta.getHost());\r\n\t\tString username=environmentSubstitute(meta.getUserName());\r\n\t\tString password=environmentSubstitute(meta.getPassword());\r\n        //Set the filter string.  The more exact of the search string\r\n\t\tString filter=environmentSubstitute(meta.getFilterString());\r\n\t\t//Set the Search base.This is the place where the search will\r\n\t\tString searchbase=environmentSubstitute(meta.getSearchBase());\r\n\t\r\n\t\t\r\n\t\tNamingEnumeration<SearchResult> results=null;\r\n\t\tDirContext ctx = null;\r\n\t\tdata.rownr=0;\r\n\t\tlinesInput=0;\r\n\t\t\r\n\t    String [] attrReturned = new String [meta.getInputFields().length];\r\n\t    Object[] outputRowData = null;\r\n        \r\n        if (first)\r\n        {\r\n            first = false;\r\n            // Create the output row meta-data\r\n            data.outputRowMeta = new RowMeta();\r\n            meta.getFields(data.outputRowMeta, getStepname(), null, null, this); // get the metadata populated\r\n            \r\n            \r\n            // Create convert meta-data objects that will contain Date & Number formatters\r\n            //\r\n            data.convertRowMeta = data.outputRowMeta.clone();\r\n            for (int i=0;i<data.convertRowMeta.size();i++) data.convertRowMeta.getValueMeta(i).setType(ValueMetaInterface.TYPE_STRING);\r\n\r\n            \r\n            \r\n            // For String to <type> conversions, we allocate a conversion meta data row as well...\r\n\t\t\t//\r\n\t\t\tdata.convertRowMeta = data.outputRowMeta.clone();\r\n\t\t\tfor (int i=0;i<data.convertRowMeta.size();i++) {\r\n\t\t\t\tdata.convertRowMeta.getValueMeta(i).setType(ValueMetaInterface.TYPE_STRING);           \r\n            \r\n\t\t\t}\r\n\t\t\t\r\n\t\t   // Get user selection attributes\r\n\t\t   for (int i=0;i<meta.getInputFields().length;i++)\r\n\t\t   {\r\n\t\t    \tattrReturned[i]=environmentSubstitute(meta.getInputFields()[i].getAttribute());\r\n\t\t\t\r\n\t\t   }\r\n        }\r\n\t\r\n\t\ttry \r\n\t\t{\t\r\n\r\n\t\t\t// Try to connect to LDAP server\r\n             ctx = connectServerLdap(hostname,username, password,port);\r\n\t\t     if (ctx==null)\r\n\t\t     {\r\n\t\t    \t logError(Messages.getString(\"LDAPInput.Error.UnableToConnectToServer\"));\r\n\t\t     }\r\n\t\t     \r\n\t\t     logBasic(Messages.getString(\"LDAPInput.ConnectedToServer.Message\",hostname,username));\r\n\t\t     if (log.isDetailed()) logDetailed(Messages.getString(\"LDAPInput.ClassUsed.Message\",ctx.getClass().getName()));\r\n\t\t     // Get the schema tree root\r\n\t\t     DirContext schema = ctx.getSchema(\"\");\r\n\t\t     \r\n\t\t     if (log.isDetailed()) logDetailed(Messages.getString(\"LDAPInput.SchemaList.Message\",\"\"+schema.list(\"\")));\r\n\t\t     \r\n \t\t     SearchControls controls = new SearchControls();\r\n\t\t     controls.setCountLimit(meta.getRowLimit());\r\n\t\t     \r\n\t\t     // Timeout\r\n\t\t     //controls.setTimeLimit(10 * 1000);\r\n\t\t    \r\n\t\t     // Limit returned attributes to user selection\r\n\t\t     controls.setReturningAttributes(attrReturned);\r\n\t\t     \r\n\t\t     \r\n\t\t     if(Const.isEmpty(searchbase))\r\n\t\t     {\r\n\t\t\t     // get Search Base\r\n\t\t\t     Attributes attrs = ctx.getAttributes(\"\", new String[] { \"namingContexts\" });\r\n\t\t\t\t Attribute attr = attrs.get(\"namingContexts\");\r\n\t\t\t\t  \r\n\t\t\t\t searchbase=attr.get().toString();\r\n\t\t\t\t if (log.isDetailed()) logBasic(Messages.getString(\"LDAPInput.SearchBaseFound\",searchbase) );\r\n\t\t     } \r\n\t\t\r\n\t         controls.setSearchScope(SearchControls.SUBTREE_SCOPE);\r\n\t         \r\n\t         results = ctx.search(searchbase,filter.replace(\"\\n\\r\", \"\").replace(\"\\n\", \"\"), controls);\r\n\t        \r\n\t         // Get value for attributes\r\n\r\n\t         Attribute attr=null; \r\n\t        \r\n\t       \r\n\t\t     while (((meta.getRowLimit()>0 &&  data.rownr<meta.getRowLimit()) || meta.getRowLimit()==0)  && (results.hasMoreElements()))  \r\n\t\t\t {\r\n\t\t    \t \r\n                SearchResult searchResult = (SearchResult) results.next();\r\n                Attributes attributes = null;\r\n                attributes=searchResult.getAttributes();      \r\n                \r\n                if(attributes!=null)\r\n                {\r\n\t\t\t\t\t// Create new row\t\t\t\t\r\n\t\t\t\t\toutputRowData = buildEmptyRow();\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t// Execute for each Input field...\r\n\t\t\t\t\tfor (int i=0;i<meta.getInputFields().length;i++)\r\n\t\t\t\t\t{\r\n\t\t\t\t\t\t// Get attribute value\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\tString attrvalue=null;\r\n\t\t            \tattr = attributes.get(environmentSubstitute(meta.getInputFields()[i].getAttribute())); \r\n\t\t                if (attr!=null) \r\n\t\t                {\r\n\t\t                \t//Let's try to get all values of for this field\r\n\t\t                \t\r\n\t\t                \tStringBuilder attrStr = new StringBuilder();\r\n\t\t\t\t\t\t\tfor (NamingEnumeration eattr = attr.getAll() ; eattr.hasMore();) \r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\tif (attrStr.length() > 0) {\r\n\t\t\t\t\t\t\t\t\tattrStr.append(\"$\"); //TODO : Let user specify the separator\r\n\t\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\tattrStr.append(eattr.next().toString());\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\tattrvalue = attrStr.toString(); \t\r\n\t\t                }\r\n\t\t               \r\n\t\t\t\t\t\t// DO Trimming!\r\n\t\t\t\t\t\tswitch (meta.getInputFields()[i].getTrimType())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\tcase LDAPInputField.TYPE_TRIM_LEFT:\r\n\t\t\t\t\t\t\tattrvalue = Const.ltrim(attrvalue);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase LDAPInputField.TYPE_TRIM_RIGHT:\r\n\t\t\t\t\t\t\tattrvalue = Const.rtrim(attrvalue);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tcase LDAPInputField.TYPE_TRIM_BOTH:\r\n\t\t\t\t\t\t\tattrvalue = Const.trim(attrvalue);\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\tdefault:\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t      \r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// DO CONVERSIONS...\r\n\t\t\t\t\t\t//\r\n\t\t\t\t\t\tValueMetaInterface targetValueMeta = data.outputRowMeta.getValueMeta(i);\r\n\t\t\t\t\t\tValueMetaInterface sourceValueMeta = data.convertRowMeta.getValueMeta(i);\r\n\t\t\t\t\t\toutputRowData[i] = targetValueMeta.convertData(sourceValueMeta, attrvalue);\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t// Do we need to repeat this field if it is null?\r\n\t\t\t\t\t\tif (meta.getInputFields()[i].isRepeated())\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\tif (data.previousRow!=null && Const.isEmpty(attrvalue))\r\n\t\t\t\t\t\t\t{\r\n\t\t\t\t\t\t\t\toutputRowData[i] = data.previousRow[i];\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t            \r\n\t\t\t    \r\n\t\t\t \t\t\t\r\n\t\t\t\t\t}    // End of loop over fields...\r\n\t                    \r\n\t\t\t\t\tint rowIndex = meta.getInputFields().length;\r\n\t\t\t\t\r\n\t\t\t\t\t\r\n\t\t\t        // See if we need to add the row number to the row...  \r\n\t\t\t        if (meta.includeRowNumber() && !Const.isEmpty(meta.getRowNumberField()))\r\n\t\t\t        {\r\n\t\t\t            outputRowData[rowIndex++] = new Long(data.rownr);\r\n\t\t\t        }\r\n\t\t\t        \r\n\t\t\t\t\t\r\n\t\t\t\t\tRowMetaInterface irow = getInputRowMeta();\r\n\t\t\t\t\t\r\n\t\t\t\t\tdata.previousRow = irow==null?outputRowData:(Object[])irow.cloneRow(outputRowData); // copy it to make\r\n\t\t\t\t\t// surely the next step doesn't change it in between...\r\n\t\t\t\t\tdata.rownr++;\r\n\t\t\t\t\tlinesInput++;\r\n\t\t           \r\n\t\t\t\t\tputRow(data.outputRowMeta, outputRowData);  // copy row to output rowset(s);\r\n                }\r\n            }\r\n\t\t        \r\n\t\t     \r\n\t\t\t    ctx.close();\r\n\t\t\t    log.logBasic(Messages.getString(\"LDAPInput.log.Deconnection\"),Messages.getString(\"LDAPInput.log.Deconnection.Done\"));\r\n\t\t\t     \r\n\t\t\t    if(log.isDebug()) log.logDebug(Messages.getString(\"LDAPInput.log.ReadRow\"), outputRowData.toString());\r\n\t\t\r\n\t\t\t    if ((linesInput > 0) && (linesInput % Const.ROWS_UPDATE) == 0) logBasic(Messages.getString(\"LDAPInput.log.LineRow\") + linesInput);\r\n\t\t\t     \r\n\t\t} \r\n\t\tcatch(Exception e)\r\n\t\t{\r\n\t\t\tlogError(Messages.getString(\"LDAPInput.log.Exception\"), e);\r\n\t\t\tstopAll();\r\n\t\t\tsetErrors(1);\r\n\t\t} \r\n\t\tfinally\r\n\t    {\r\n\t\t\t\r\n            if (results != null) {\r\n                try {\r\n                    results.close();\r\n                } catch (Exception e) {\r\n                }\r\n            }\r\n            if (ctx != null) {\r\n                try {\r\n                    ctx.close();\r\n                } catch (Exception e) {\r\n                }\r\n            }\r\n\t    }\r\n\t\r\n\t\t\t\r\n\r\n        \r\n        setOutputDone();  // signal end to receiver(s)\r\n        return false;     // This is the end of this step.\r\n\t}","commit_id":"24b0cdb742699d152a5377294c1b08a8a181de81","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public boolean init(StepMetaInterface smi, StepDataInterface sdi)\r\n    {\r\n        meta=(SSHMeta)smi;\r\n        data=(SSHData)sdi;\r\n\r\n        if (super.init(smi, sdi))\r\n        {\r\n        \tString servername=environmentSubstitute(meta.getServerName());\r\n    \t\tint nrPort=Const.toInt(environmentSubstitute(meta.getPort()), 22);\r\n    \t\tString username = environmentSubstitute(meta.getuserName());\r\n    \t\tString password = environmentSubstitute(meta.getpassword());\r\n    \t\tString keyFilename = environmentSubstitute(meta.getKeyFileName());\r\n    \t\tString passphrase = environmentSubstitute(meta.getPassphrase());\r\n    \t\tint timeOut = Const.toInt(environmentSubstitute(meta.getTimeOut()), 0);\r\n    \t\t\r\n        \t// Check target server\r\n    \t\tif(Const.isEmpty(servername)) {\r\n    \t\t\tlog.logError(toString(), BaseMessages.getString(PKG, \"SSH.MissingServerName\"));\r\n    \t\t}\r\n    \t\t\r\n    \t\t// Check if username field is provided\r\n\t\t\tif (Const.isEmpty(meta.getuserName())) {\r\n\t\t\t\tlog.logError(toString(),BaseMessages.getString(PKG, \"SSH.Error.UserNamedMissing\"));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Get output fields\r\n\t\t\tdata.stdOutField = environmentSubstitute(meta.getStdOutFieldName());\r\n\t\t\tif(Const.isEmpty(data.stdOutField)) {\r\n\t\t\t\tlog.logError(toString(),BaseMessages.getString(PKG, \"SSH.Error.StdOutFieldNameMissing\"));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdata.stdTypeField = environmentSubstitute(meta.getStdErrFieldName());\r\n\t\t\t\r\n    \t\ttry {\r\n    \t\t\t// Open connection\r\n    \t\t\tdata.conn = SSHMeta.OpenConnection(servername, nrPort, username, password, \r\n    \t\t\t\t\tmeta.isusePrivateKey(), keyFilename, passphrase, timeOut, this);\r\n\r\n    \t\t\tif(log.isDebug()) logDebug(BaseMessages.getString(PKG, \"SSH.Log.ConnectionOpened\"));\r\n\r\n    \t\t}catch(Exception e) {\r\n    \t\t\tlog.logError(toString(),BaseMessages.getString(PKG, \"SSH.Error.OpeningConnection\", e.getMessage()));\r\n    \t\t\treturn false;\r\n    \t\t}\r\n    \t\t\r\n            return true;\r\n        }\r\n        return false;\r\n    }","id":10282,"modified_method":"public boolean init(StepMetaInterface smi, StepDataInterface sdi)\r\n    {\r\n        meta=(SSHMeta)smi;\r\n        data=(SSHData)sdi;\r\n\r\n        if (super.init(smi, sdi))\r\n        {\r\n        \tString servername=environmentSubstitute(meta.getServerName());\r\n    \t\tint nrPort=Const.toInt(environmentSubstitute(meta.getPort()), 22);\r\n    \t\tString username = environmentSubstitute(meta.getuserName());\r\n    \t\tString password = environmentSubstitute(meta.getpassword());\r\n    \t\tString keyFilename = environmentSubstitute(meta.getKeyFileName());\r\n    \t\tString passphrase = environmentSubstitute(meta.getPassphrase());\r\n    \t\tint timeOut = Const.toInt(environmentSubstitute(meta.getTimeOut()), 0);\r\n       \t\tString proxyhost = environmentSubstitute(meta.getProxyHost());\r\n       \t\tint proxyport = Const.toInt(environmentSubstitute(meta.getProxyPort()), 0);\r\n       \t\tString proxyusername = environmentSubstitute(meta.getProxyUsername());\r\n       \t\tString proxypassword = environmentSubstitute(meta.getProxyPassword());\r\n       \t\t\r\n        \t// Check target server\r\n    \t\tif(Const.isEmpty(servername)) {\r\n    \t\t\tlog.logError(toString(), BaseMessages.getString(PKG, \"SSH.MissingServerName\"));\r\n    \t\t}\r\n    \t\t\r\n    \t\t// Check if username field is provided\r\n\t\t\tif (Const.isEmpty(meta.getuserName())) {\r\n\t\t\t\tlog.logError(toString(),BaseMessages.getString(PKG, \"SSH.Error.UserNamedMissing\"));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\r\n\t\t\t// Get output fields\r\n\t\t\tdata.stdOutField = environmentSubstitute(meta.getStdOutFieldName());\r\n\t\t\tif(Const.isEmpty(data.stdOutField)) {\r\n\t\t\t\tlog.logError(toString(),BaseMessages.getString(PKG, \"SSH.Error.StdOutFieldNameMissing\"));\r\n\t\t\t\treturn false;\r\n\t\t\t}\r\n\t\t\tdata.stdTypeField = environmentSubstitute(meta.getStdErrFieldName());\r\n\t\t\t\r\n    \t\ttry {\r\n    \t\t\t// Open connection\r\n    \t\t\tdata.conn = SSHMeta.OpenConnection(servername, nrPort, username, password, \r\n    \t\t\t\t\tmeta.isusePrivateKey(), keyFilename, passphrase, timeOut, this,\r\n    \t\t\t\t\tproxyhost, proxyport, proxyusername, proxypassword);\r\n\r\n    \t\t\tif(log.isDebug()) logDebug(BaseMessages.getString(PKG, \"SSH.Log.ConnectionOpened\"));\r\n\r\n    \t\t}catch(Exception e) {\r\n    \t\t\tlog.logError(toString(),BaseMessages.getString(PKG, \"SSH.Error.OpeningConnection\", e.getMessage()));\r\n    \t\t\treturn false;\r\n    \t\t}\r\n    \t\t\r\n            return true;\r\n        }\r\n        return false;\r\n    }","commit_id":"909e60a8a7f32d9e9baa7942cec7aa5ac494dbd4","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void test()\n    {\n    \tboolean testOK=false;\n    \tString errMsg=null;\n    \tString servername=transMeta.environmentSubstitute(wServerName.getText());\n\t\tint nrPort=Const.toInt(transMeta.environmentSubstitute(wPort.getText()), 22);\n\t\tString username = transMeta.environmentSubstitute(wUserName.getText());\n\t\tString password = transMeta.environmentSubstitute(wPassword.getText());\n\t\tString keyFilename = transMeta.environmentSubstitute(wPrivateKey.getText());\n\t\tString passphrase = transMeta.environmentSubstitute(wPassphrase.getText());\n   \t\tint timeOut = Const.toInt(transMeta.environmentSubstitute(wTimeOut.getText()), 0);\n   \t\t\n    \tConnection conn= null;\n    \ttry{\n\t\t\tconn = SSHMeta.OpenConnection(servername, nrPort, username, password, \n\t\t\t\t\twUseKey.getSelection(), keyFilename, passphrase, timeOut, transMeta);\n    \t\ttestOK=true;\n\t    \t\n    \t}catch(Exception e) {\n    \t\terrMsg=e.getMessage();\n    \t}finally {\n    \t\tif(conn!=null) try { conn.close();}catch(Exception e){};\n    \t}\n    \tif(testOK) {\n\t\t\tMessageBox mb = new MessageBox(shell, SWT.OK | SWT.ICON_INFORMATION );\n\t\t\tmb.setMessage(BaseMessages.getString(PKG, \"SSHDialog.Connected.OK\",servername, username) +Const.CR);\n\t\t\tmb.setText(BaseMessages.getString(PKG, \"SSHDialog.Connected.Title.Ok\"));\n\t\t\tmb.open();\n\t\t}else {\n\t\t\tMessageBox mb = new MessageBox(shell, SWT.OK | SWT.ICON_ERROR );\n\t\t\tmb.setMessage(BaseMessages.getString(PKG, \"SSHDialog.Connected.NOK.ConnectionBad\",servername, username) +Const.CR+errMsg+Const.CR);\n\t\t\tmb.setText(BaseMessages.getString(PKG, \"SSHDialog.Connected.Title.Bad\"));\n\t\t\tmb.open(); \n\t    }\n\t   \n    }","id":10283,"modified_method":"private void test()\n    {\n    \tboolean testOK=false;\n    \tString errMsg=null;\n    \tString servername=transMeta.environmentSubstitute(wServerName.getText());\n\t\tint nrPort=Const.toInt(transMeta.environmentSubstitute(wPort.getText()), 22);\n\t\tString username = transMeta.environmentSubstitute(wUserName.getText());\n\t\tString password = transMeta.environmentSubstitute(wPassword.getText());\n\t\tString keyFilename = transMeta.environmentSubstitute(wPrivateKey.getText());\n\t\tString passphrase = transMeta.environmentSubstitute(wPassphrase.getText());\n   \t\tint timeOut = Const.toInt(transMeta.environmentSubstitute(wTimeOut.getText()), 0);\n   \t\tString proxyhost = transMeta.environmentSubstitute(wProxyHost.getText());\n   \t\tint proxyport = Const.toInt(transMeta.environmentSubstitute(wProxyPort.getText()), 0);\n   \t\tString proxyusername = transMeta.environmentSubstitute(wProxyUsername.getText());\n   \t\tString proxypassword = transMeta.environmentSubstitute(wProxyPassword.getText());\n   \t\t\n   \t\t\n    \tConnection conn= null;\n    \ttry{\n\t\t\tconn = SSHMeta.OpenConnection(servername, nrPort, username, password, \n\t\t\t\t\twUseKey.getSelection(), keyFilename, passphrase, timeOut, transMeta,\n\t\t\t\t\tproxyhost, proxyport, proxyusername, proxypassword);\n    \t\ttestOK=true;\n\t    \t\n    \t}catch(Exception e) {\n    \t\terrMsg=e.getMessage();\n    \t}finally {\n    \t\tif(conn!=null) try { conn.close();}catch(Exception e){};\n    \t}\n    \tif(testOK) {\n\t\t\tMessageBox mb = new MessageBox(shell, SWT.OK | SWT.ICON_INFORMATION );\n\t\t\tmb.setMessage(BaseMessages.getString(PKG, \"SSHDialog.Connected.OK\",servername, username) +Const.CR);\n\t\t\tmb.setText(BaseMessages.getString(PKG, \"SSHDialog.Connected.Title.Ok\"));\n\t\t\tmb.open();\n\t\t}else {\n\t\t\tMessageBox mb = new MessageBox(shell, SWT.OK | SWT.ICON_ERROR );\n\t\t\tmb.setMessage(BaseMessages.getString(PKG, \"SSHDialog.Connected.NOK.ConnectionBad\",servername, username) +Const.CR+errMsg+Const.CR);\n\t\t\tmb.setText(BaseMessages.getString(PKG, \"SSHDialog.Connected.Title.Bad\"));\n\t\t\tmb.open(); \n\t    }\n\t   \n    }","commit_id":"909e60a8a7f32d9e9baa7942cec7aa5ac494dbd4","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void getInfo(SSHMeta in) throws KettleException\n\t{\n\t\tstepname = wStepname.getText(); // return value\n\t\t\n\t\tin.setDynamicCommand(wdynamicCommand.getSelection());\n\t\tin.setCommand(wCommand.getText());\n\t\tin.setcommandfieldname(wCommandField.getText());\n        in.setServerName(wServerName.getText());\n        in.setPort(wPort.getText());\n        in.setuserName(wUserName.getText());\n        in.setpassword(wPassword.getText());\n        in.usePrivateKey(wUseKey.getSelection());\n        in.setKeyFileName(wPrivateKey.getText());\n        in.setPassphrase(wPassphrase.getText());\n        in.setstdOutFieldName(wResultOutFieldName.getText());\n        in.setStdErrFieldName(wResultErrFieldName.getText());\n        in.setTimeOut(wTimeOut.getText());\n\n\t}","id":10284,"modified_method":"private void getInfo(SSHMeta in) throws KettleException\n\t{\n\t\tstepname = wStepname.getText(); // return value\n\t\t\n\t\tin.setDynamicCommand(wdynamicCommand.getSelection());\n\t\tin.setCommand(wCommand.getText());\n\t\tin.setcommandfieldname(wCommandField.getText());\n        in.setServerName(wServerName.getText());\n        in.setPort(wPort.getText());\n        in.setuserName(wUserName.getText());\n        in.setpassword(wPassword.getText());\n        in.usePrivateKey(wUseKey.getSelection());\n        in.setKeyFileName(wPrivateKey.getText());\n        in.setPassphrase(wPassphrase.getText());\n        in.setstdOutFieldName(wResultOutFieldName.getText());\n        in.setStdErrFieldName(wResultErrFieldName.getText());\n        in.setTimeOut(wTimeOut.getText());\n        in.setProxyHost(wProxyHost.getText());\n        in.setProxyPort(wProxyPort.getText());\n        in.setProxyUsername(wProxyUsername.getText());\n        in.setProxyPassword(wProxyPassword.getText());\n\t}","commit_id":"909e60a8a7f32d9e9baa7942cec7aa5ac494dbd4","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String open()\n\t{\n\t\tShell parent = getParent();\n\t\tDisplay display = parent.getDisplay();\n\n\t\tshell = new Shell(parent, SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX | SWT.MIN);\n \t\tprops.setLook(shell);\n        setShellImage(shell, input);\n\n\t\tModifyListener lsMod = new ModifyListener() \n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e) \n\t\t\t{\n\t\t\t\tinput.setChanged();\n\t\t\t}\n\t\t};\n\n        \n\t\tchanged = input.hasChanged();\n\n\t\tFormLayout formLayout = new FormLayout ();\n\t\tformLayout.marginWidth  = Const.FORM_MARGIN;\n\t\tformLayout.marginHeight = Const.FORM_MARGIN;\n\n\t\tshell.setLayout(formLayout);\n\t\tshell.setText(BaseMessages.getString(PKG, \"SSHDialog.Shell.Title\")); //$NON-NLS-1$\n\t\t\n\t\tint middle = props.getMiddlePct();\n\t\tint margin=Const.MARGIN;\n\n\t\t// Stepname line\n\t\twlStepname=new Label(shell, SWT.RIGHT);\n\t\twlStepname.setText(BaseMessages.getString(PKG, \"SSHDialog.Stepname.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlStepname);\n\t\tfdlStepname=new FormData();\n\t\tfdlStepname.left = new FormAttachment(0, 0);\n\t\tfdlStepname.right= new FormAttachment(middle, -margin);\n\t\tfdlStepname.top  = new FormAttachment(0, margin);\n\t\twlStepname.setLayoutData(fdlStepname);\n\t\twStepname=new Text(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\twStepname.setText(stepname);\n \t\tprops.setLook(wStepname);\n\t\twStepname.addModifyListener(lsMod);\n\t\tfdStepname=new FormData();\n\t\tfdStepname.left = new FormAttachment(middle, 0);\n\t\tfdStepname.top  = new FormAttachment(0, margin);\n\t\tfdStepname.right= new FormAttachment(100, 0);\n\t\twStepname.setLayoutData(fdStepname);\n\t\t\n\t\t\n\t\twTabFolder = new CTabFolder(shell, SWT.BORDER);\n \t\tprops.setLook(wTabFolder, PropsUI.WIDGET_STYLE_TAB);\n\n\t\t//////////////////////////\n\t\t// START OF GENERAL TAB   ///\n\t\t//////////////////////////\n\t\twGeneralTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twGeneralTab.setText(BaseMessages.getString(PKG, \"SSHDialog.General.Tab\"));\n\t\t\n\t\twGeneralComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wGeneralComp);\n\n\t\tFormLayout fileLayout = new FormLayout();\n\t\tfileLayout.marginWidth  = 3;\n\t\tfileLayout.marginHeight = 3;\n\t\twGeneralComp.setLayout(fileLayout);\n\t\t\n\t\t///////////////////////////////// \n\t\t// START OF Settings GROUP  //\n\t\t///////////////////////////////// \n\n\t\twSettingsGroup = new Group(wGeneralComp, SWT.SHADOW_NONE);\n\t\tprops.setLook(wSettingsGroup);\n\t\twSettingsGroup.setText(BaseMessages.getString(PKG, \"SSHDialog.wSettingsGroup.Label\"));\n\t\t\n\t\tFormLayout settingGroupLayout = new FormLayout();\n\t\tsettingGroupLayout.marginWidth = 10;\n\t\tsettingGroupLayout.marginHeight = 10;\n\t\twSettingsGroup.setLayout(settingGroupLayout);\n\t\t\n\t\t // Server port line\n        wServerName = new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.Server.Label\"), BaseMessages.getString(PKG, \"SSHDialog.Server.Tooltip\"));\n        props.setLook(wServerName);\n        wServerName.addModifyListener(lsMod);\n        fdServerName = new FormData();\n        fdServerName.left \t= new FormAttachment(0, 0);\n        fdServerName.top  \t= new FormAttachment(wStepname, margin);\n        fdServerName.right\t= new FormAttachment(100, 0);\n        wServerName.setLayoutData(fdServerName);\n        \n        // Server port line\n        wPort = new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.Port.Label\"), BaseMessages.getString(PKG, \"SSHDialog.Port.Tooltip\"));\n        props.setLook(wPort);\n        wPort.addModifyListener(lsMod);\n        fdPort = new FormData();\n        fdPort.left \t= new FormAttachment(0, 0);\n        fdPort.top  \t= new FormAttachment(wServerName, margin);\n        fdPort.right\t= new FormAttachment(100, 0);\n        wPort.setLayoutData(fdPort);\n        \n        // Server TimeOut line\n        wTimeOut = new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.TimeOut.Label\"), BaseMessages.getString(PKG, \"SSHDialog.TimeOut.Tooltip\"));\n        props.setLook(wTimeOut);\n        wTimeOut.addModifyListener(lsMod);\n        fdTimeOut = new FormData();\n        fdTimeOut.left \t= new FormAttachment(0, 0);\n        fdTimeOut.top  \t= new FormAttachment(wPort, margin);\n        fdTimeOut.right\t= new FormAttachment(100, 0);\n        wTimeOut.setLayoutData(fdTimeOut);\n\t\t\n\t\t// Usernameline\n        wUserName = new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.UserName.Label\"), BaseMessages.getString(PKG, \"SSHDialog.UserName.Tooltip\"));\n        props.setLook(wUserName);\n        wUserName.addModifyListener(lsMod);\n        fdUserName = new FormData();\n        fdUserName.left \t= new FormAttachment(0, 0);\n        fdUserName.top  \t= new FormAttachment(wTimeOut, margin);\n        fdUserName.right\t= new FormAttachment(100, 0);\n        wUserName.setLayoutData(fdUserName);\n        \n\t\t\n\t\t// Passwordline\n        wPassword = new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.Password.Label\"), BaseMessages.getString(PKG, \"SSHDialog.Password.Tooltip\"));\n        props.setLook(wPassword);\n        wPassword.addModifyListener(lsMod);\n        fdPassword = new FormData();\n        fdPassword.left \t= new FormAttachment(0, 0);\n        fdPassword.top  \t= new FormAttachment(wUserName, margin);\n        fdPassword.right\t= new FormAttachment(100, 0);\n        wPassword.setLayoutData(fdPassword);\n\t    \n\n        // Use key?\n        wlUseKey = new Label(wSettingsGroup, SWT.RIGHT);\n        wlUseKey.setText(BaseMessages.getString(PKG, \"SSHDialog.UseKey.Label\"));\n        props.setLook(wlUseKey);\n        fdlUseKey = new FormData();\n        fdlUseKey.left = new FormAttachment(0, 0);\n        fdlUseKey.top = new FormAttachment(wPassword,margin);\n        fdlUseKey.right = new FormAttachment(middle, -margin);\n        wlUseKey.setLayoutData(fdlUseKey);\n        wUseKey = new Button(wSettingsGroup, SWT.CHECK);\n        props.setLook(wUseKey);\n        wUseKey.setToolTipText(BaseMessages.getString(PKG, \"SSHDialog.UseKey.Tooltip\"));\n        fdUseKey = new FormData();\n        fdUseKey.left = new FormAttachment(middle, margin);\n        fdUseKey.top = new FormAttachment(wPassword, margin);\n        fdUseKey.right = new FormAttachment(100, 0);\n        wUseKey.setLayoutData(fdUseKey);\n        wUseKey.addSelectionListener(new SelectionAdapter()\n        {\n            public void widgetSelected(SelectionEvent e)\n            {\n                input.setChanged();\n                activateKey();\n            }\n        });\n        \n        wbFilename=new Button(wSettingsGroup, SWT.PUSH| SWT.CENTER);\n \t\tprops.setLook(wbFilename);\n\t\twbFilename.setText(BaseMessages.getString(PKG, \"System.Button.Browse\"));\n\t\tfdbFilename=new FormData();\n\t\tfdbFilename.right= new FormAttachment(100, -margin);\n\t\tfdbFilename.top  = new FormAttachment(wUseKey, margin);\n\t\twbFilename.setLayoutData(fdbFilename);\n\t\twbFilename.addSelectionListener\n\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t\t{\n\t\t\t\tpublic void widgetSelected(SelectionEvent e) \n\t\t\t\t{\n\t\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.SAVE);\n\t\t\t\t\tdialog.setFilterExtensions(new String[] {\"*.pem\", \"*\"});\n\t\t\t\t\tif (wPrivateKey.getText()!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\tdialog.setFileName(transMeta.environmentSubstitute(wPrivateKey.getText()));\n\t\t\t\t\t}\n\t\t\t\t\tdialog.setFilterNames(new String[] {BaseMessages.getString(PKG, \"System.FileType.PEMFiles\"), \n\t\t\t\t\t\t\tBaseMessages.getString(PKG, \"System.FileType.AllFiles\")});\n\t\t\t\t\tif (dialog.open()!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\twPrivateKey.setText(dialog.getFilterPath()+System.getProperty(\"file.separator\")+dialog.getFileName());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\t\n\t\t// Private key\n        wPrivateKey= new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.PrivateKey.Label\"), BaseMessages.getString(PKG, \"SSHDialog.PrivateKey.Tooltip\"));\n        props.setLook(wPassword);\n        wPrivateKey.addModifyListener(lsMod);\n        fdPrivateKey= new FormData();\n        fdPrivateKey.left \t= new FormAttachment(0, 5*margin);\n        fdPrivateKey.top  \t= new FormAttachment(wUseKey, margin);\n        fdPrivateKey.right\t= new FormAttachment(wbFilename, -margin);\n        wPrivateKey.setLayoutData(fdPrivateKey);\n        \n\t    \n\t\t// Passphraseline\n        wPassphrase= new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.Passphrase.Label\"), BaseMessages.getString(PKG, \"SSHDialog.Passphrase.Tooltip\"));\n        props.setLook(wPassphrase);\n        wPassphrase.addModifyListener(lsMod);\n        fdPassphrase= new FormData();\n        fdPassphrase.left \t= new FormAttachment(0, 0);\n        fdPassphrase.top  \t= new FormAttachment(wbFilename, margin);\n        fdPassphrase.right\t= new FormAttachment(100, 0);\n        wPassphrase.setLayoutData(fdPassphrase);\n\t    \n        \n\t\t\n\t\t// Test connection button\n\t\twTest=new Button(wSettingsGroup,SWT.PUSH);\n\t\twTest.setText(BaseMessages.getString(PKG, \"SSHDialog.TestConnection.Label\"));\n \t\tprops.setLook(wTest);\n\t\tfdTest=new FormData();\n\t\twTest.setToolTipText(BaseMessages.getString(PKG, \"SSHDialog.TestConnection.Tooltip\"));\n\t\tfdTest.top  = new FormAttachment(wPassphrase, 2*margin);\n\t\tfdTest.right= new FormAttachment(100, 0);\n\t\twTest.setLayoutData(fdTest);\n        \n\t\tfdSettingsGroup = new FormData();\n\t\tfdSettingsGroup.left = new FormAttachment(0, margin);\n\t\tfdSettingsGroup.top = new FormAttachment(wStepname, margin);\n\t\tfdSettingsGroup.right = new FormAttachment(100, -margin);\n\t\twSettingsGroup.setLayoutData(fdSettingsGroup);\n\t\t\n\t\t///////////////////////////////// \n\t\t// END OF Settings Fields GROUP  //\n\t\t\n\t\t\n\t\tfdGeneralComp=new FormData();\n\t\tfdGeneralComp.left  = new FormAttachment(0, 0);\n\t\tfdGeneralComp.top   = new FormAttachment(0, 0);\n\t\tfdGeneralComp.right = new FormAttachment(100, 0);\n\t\tfdGeneralComp.bottom= new FormAttachment(100, 0);\n\t\twGeneralComp.setLayoutData(fdGeneralComp);\n\t\n\t\twGeneralComp.layout();\n\t\twGeneralTab.setControl(wGeneralComp);\n\t\t\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF GENERAL TAB\n\t\t/////////////////////////////////////////////////////////////\n\n\t\t\n\t\t//////////////////////////\n\t\t// START OF Settings TAB///\n\t\t///\n\t\twSettingsTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twSettingsTab.setText(BaseMessages.getString(PKG, \"SSHDialog.Settings.Tab\"));\n\n\t\tFormLayout SettingsLayout = new FormLayout ();\n\t\tSettingsLayout.marginWidth  = 3;\n\t\tSettingsLayout.marginHeight = 3;\n\t\t\n\t\twSettingsComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wSettingsComp);\n\t\twSettingsComp.setLayout(SettingsLayout);\n\t\t\n\t\t\n\t\t///////////////////////////////// \n\t\t// START OF Output GROUP  //\n\t\t///////////////////////////////// \n\n\t\twOutput = new Group(wSettingsComp, SWT.SHADOW_NONE);\n\t\tprops.setLook(wOutput);\n\t\twOutput.setText(BaseMessages.getString(PKG, \"SSHDialog.wOutput.Label\"));\n\t\t\n\t\tFormLayout outputGroupLayout = new FormLayout();\n\t\toutputGroupLayout.marginWidth = 10;\n\t\toutputGroupLayout.marginHeight = 10;\n\t\twOutput.setLayout(outputGroupLayout);\n\t\t\n\t\t// ResultOutFieldNameline\n        wResultOutFieldName= new LabelTextVar(transMeta, wOutput, BaseMessages.getString(PKG, \"SSHDialog.ResultOutFieldName.Label\"), BaseMessages.getString(PKG, \"SSHDialog.ResultOutFieldName.Tooltip\"));\n        props.setLook(wResultOutFieldName);\n        wResultOutFieldName.addModifyListener(lsMod);\n        fdResultOutFieldName= new FormData();\n        fdResultOutFieldName.left \t= new FormAttachment(0, 0);\n        fdResultOutFieldName.top  \t= new FormAttachment(wStepname, margin);\n        fdResultOutFieldName.right\t= new FormAttachment(100, 0);\n        wResultOutFieldName.setLayoutData(fdResultOutFieldName);\n        \n    \t// ResultErrFieldNameline\n        wResultErrFieldName= new LabelTextVar(transMeta, wOutput, BaseMessages.getString(PKG, \"SSHDialog.ResultErrFieldName.Label\"), BaseMessages.getString(PKG, \"SSHDialog.ResultErrFieldName.Tooltip\"));\n        props.setLook(wResultErrFieldName);\n        wResultErrFieldName.addModifyListener(lsMod);\n        fdResultErrFieldName= new FormData();\n        fdResultErrFieldName.left \t= new FormAttachment(0, 0);\n        fdResultErrFieldName.top  \t= new FormAttachment(wResultOutFieldName, margin);\n        fdResultErrFieldName.right\t= new FormAttachment(100, 0);\n        wResultErrFieldName.setLayoutData(fdResultErrFieldName);\n\n\t\tfdOutput = new FormData();\n\t\tfdOutput.left = new FormAttachment(0, margin);\n\t\tfdOutput.top = new FormAttachment(wStepname, margin);\n\t\tfdOutput.right = new FormAttachment(100, -margin);\n\t\twOutput.setLayoutData(fdOutput);\n\t\t\n\t\t///////////////////////////////// \n\t\t// END OF Output Fields GROUP  //\n\t\t\n\t\t\n\t\t// ////////////////////////\n\t    // START OF Commands SETTINGS GROUP///\n\t    // /\n\t    wCommands = new Group(wSettingsComp, SWT.SHADOW_NONE);\n\t    props.setLook(wCommands);\n\t    wCommands.setText(BaseMessages.getString(PKG, \"SSHDialog.LogSettings.Group.Label\"));\n\n\t    FormLayout LogSettingsgroupLayout = new FormLayout();\n\t    LogSettingsgroupLayout.marginWidth = 10;\n\t    LogSettingsgroupLayout.marginHeight = 10;\n\n\t    wCommands.setLayout(LogSettingsgroupLayout);\n\t    \n\n\t\t//Is command defined in a Field\t\t\n\t\twldynamicCommand= new Label(wCommands, SWT.RIGHT);\n\t\twldynamicCommand.setText(BaseMessages.getString(PKG, \"SSHDialog.dynamicCommand.Label\"));\n\t\tprops.setLook(wldynamicCommand);\n\t\tfdlynamicBase= new FormData();\n\t\tfdlynamicBase.left = new FormAttachment(0, margin);\n\t\tfdlynamicBase.top = new FormAttachment(wOutput, margin);\n\t\tfdlynamicBase.right = new FormAttachment(middle, -margin);\n\t\twldynamicCommand.setLayoutData(fdlynamicBase);\n\t\t\n\t\twdynamicCommand= new Button(wCommands, SWT.CHECK);\n\t\tprops.setLook(wdynamicCommand);\n\t\twdynamicCommand.setToolTipText(BaseMessages.getString(PKG, \"SSHDialog.dynamicCommand.Tooltip\"));\n\t\tfdynamicCommand= new FormData();\n\t\tfdynamicCommand.left = new FormAttachment(middle, margin);\n\t\tfdynamicCommand.top = new FormAttachment(wOutput, margin);\n\t\twdynamicCommand.setLayoutData(fdynamicCommand);\t\t\n\t\tSelectionAdapter ldynamicCommand= new SelectionAdapter()\n        {\n            public void widgetSelected(SelectionEvent arg0)\n            {\n            \tactivateDynamicCommand();\n            \tinput.setChanged();\n            }\n        };\n        wdynamicCommand.addSelectionListener(ldynamicCommand);\n\t  \n\n\t\t// CommandField field\n\t\twlCommandField=new Label(wCommands, SWT.RIGHT);\n\t\twlCommandField.setText(BaseMessages.getString(PKG, \"SSHDialog.MessageNameField.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlCommandField);\n\t\tfdlCommandField=new FormData();\n\t\tfdlCommandField.left = new FormAttachment(0, margin);\n\t\tfdlCommandField.right= new FormAttachment(middle, -margin);\n\t\tfdlCommandField.top  = new FormAttachment(wdynamicCommand, margin);\n\t\twlCommandField.setLayoutData(fdlCommandField);\n\t\n\t\twCommandField=new CCombo(wCommands, SWT.BORDER | SWT.READ_ONLY);\n \t\tprops.setLook(wCommandField);\n \t\twCommandField.setEditable(true);\n \t\twCommandField.addModifyListener(lsMod);\n\t\tfdCommandField=new FormData();\n\t\tfdCommandField.left = new FormAttachment(middle,margin);\n\t\tfdCommandField.top  = new FormAttachment(wdynamicCommand, margin);\n\t\tfdCommandField.right= new FormAttachment(100, 0);\n\t\twCommandField.setLayoutData(fdCommandField);\n\t\twCommandField.addFocusListener(new FocusListener()\n        {\n            public void focusLost(org.eclipse.swt.events.FocusEvent e)\n            {\n            }\n        \n            public void focusGained(org.eclipse.swt.events.FocusEvent e)\n            {\n                get();\n            }\n        }\n    );\n\n\t\t\n\t\t\n\t\t// Command String\n        wlCommand = new Label(wCommands, SWT.RIGHT);\n        wlCommand.setText(BaseMessages.getString(PKG, \"SSHDialog.Command.Label\"));\n        props.setLook(wlCommand);\n        fdlCommand = new FormData();\n        fdlCommand.left = new FormAttachment(0, margin);\n        fdlCommand.top = new FormAttachment(wCommandField, margin);\n        fdlCommand.right = new FormAttachment(middle, -2*margin);\n        wlCommand.setLayoutData(fdlCommand);\n\n        wCommand=new StyledTextComp(wCommands, SWT.MULTI | SWT.LEFT | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL, \"\");\n        wCommand.setToolTipText(BaseMessages.getString(PKG, \"SSHDialog.Command.Tooltip\"));\n        props.setLook(wCommand);\n        wCommand.addModifyListener(lsMod);\n        fdCommand = new FormData();\n        fdCommand.left = new FormAttachment(middle, margin);\n        fdCommand.top = new FormAttachment(wCommandField,margin);\n        fdCommand.right = new FormAttachment(100, 0);\n        fdCommand.bottom = new FormAttachment(100, -margin);\n        wCommand.setLayoutData(fdCommand);\n\t\t\n\t\t\n\t\t\n\t    fdLogSettings = new FormData();\n\t    fdLogSettings.left = new FormAttachment(0, margin);\n\t    fdLogSettings.top = new FormAttachment(wOutput, margin);\n\t    fdLogSettings.right = new FormAttachment(100, -margin);\n\t    fdLogSettings.bottom = new FormAttachment(100, -margin);\n\t    wCommands.setLayoutData(fdLogSettings);\n\t    // ///////////////////////////////////////////////////////////\n\t    // / END OF Log SETTINGS GROUP\n\t    // ///////////////////////////////////////////////////////////\n\n\t\tfdSettingsComp=new FormData();\n\t\tfdSettingsComp.left  = new FormAttachment(0, 0);\n\t\tfdSettingsComp.top   = new FormAttachment(0, 0);\n\t\tfdSettingsComp.right = new FormAttachment(100, 0);\n\t\tfdSettingsComp.bottom= new FormAttachment(100, 0);\n\t\twSettingsComp.setLayoutData(fdSettingsComp);\n\t\n\t\twSettingsComp.layout();\n\t\twSettingsTab.setControl(wSettingsComp);\n\t\t\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF Settings TAB\n\t\t/////////////////////////////////////////////////////////////\n\n\n\t\tfdTabFolder = new FormData();\n\t\tfdTabFolder.left  = new FormAttachment(0, 0);\n\t\tfdTabFolder.top   = new FormAttachment(wStepname, margin);\n\t\tfdTabFolder.right = new FormAttachment(100, 0);\n\t\tfdTabFolder.bottom= new FormAttachment(100, -50);\n\t\twTabFolder.setLayoutData(fdTabFolder);\n\t\t\n\n\t\t// THE BUTTONS\n\t\twOK=new Button(shell, SWT.PUSH);\n\t\twOK.setText(BaseMessages.getString(PKG, \"System.Button.OK\")); //$NON-NLS-1$\n\t\twPreview=new Button(shell, SWT.PUSH);\n\t\twPreview.setText(BaseMessages.getString(PKG, \"SSHDialog.Button.PreviewRows\"));\n\t\twCancel=new Button(shell, SWT.PUSH);\n\t\twCancel.setText(BaseMessages.getString(PKG, \"System.Button.Cancel\")); //$NON-NLS-1$\n\n\t\tsetButtonPositions(new Button[] { wOK, wPreview, wCancel }, margin, wTabFolder);\n\n\t\t// Add listeners\n\t\tlsOK       = new Listener() { public void handleEvent(Event e) { ok();        } };\n\t\tlsPreview  = new Listener() { public void handleEvent(Event e) { preview();   } };\n\t\tlsCancel   = new Listener() { public void handleEvent(Event e) { cancel();    } };\n\t\tlsTest     = new Listener() { public void handleEvent(Event e) { test(); } };\n\t\t\n\t\twOK.addListener    (SWT.Selection, lsOK    );\n\t\twCancel.addListener(SWT.Selection, lsCancel);\n\t\twPreview.addListener    (SWT.Selection, lsPreview    );\n\t\twTest.addListener    (SWT.Selection, lsTest    );\n\t\t\n\t\tlsDef=new SelectionAdapter() { public void widgetDefaultSelected(SelectionEvent e) { ok(); } };\n\t\t\n\t\twStepname.addSelectionListener( lsDef );\n\t\t\n\t\t// Detect X or ALT-F4 or something that kills this window...\n\t\tshell.addShellListener(\tnew ShellAdapter() { public void shellClosed(ShellEvent e) { cancel(); } } );\n\t\twTabFolder.setSelection(0);\n\t\t// Set the shell size, based upon previous time...\n\t\tsetSize();\n\t\tgetData();\n\t\tactivateKey();\n\t\tactivateDynamicCommand();\n\t\tinput.setChanged(changed);\n\n\t\tshell.open();\n\t\twhile (!shell.isDisposed())\n\t\t{\n\t\t\t\tif (!display.readAndDispatch()) display.sleep();\n\t\t}\n\t\treturn stepname;\n\t}","id":10285,"modified_method":"public String open()\n\t{\n\t\tShell parent = getParent();\n\t\tDisplay display = parent.getDisplay();\n\n\t\tshell = new Shell(parent, SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX | SWT.MIN);\n \t\tprops.setLook(shell);\n        setShellImage(shell, input);\n\n\t\tModifyListener lsMod = new ModifyListener() \n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e) \n\t\t\t{\n\t\t\t\tinput.setChanged();\n\t\t\t}\n\t\t};\n\n        \n\t\tchanged = input.hasChanged();\n\n\t\tFormLayout formLayout = new FormLayout ();\n\t\tformLayout.marginWidth  = Const.FORM_MARGIN;\n\t\tformLayout.marginHeight = Const.FORM_MARGIN;\n\n\t\tshell.setLayout(formLayout);\n\t\tshell.setText(BaseMessages.getString(PKG, \"SSHDialog.Shell.Title\")); //$NON-NLS-1$\n\t\t\n\t\tint middle = props.getMiddlePct();\n\t\tint margin=Const.MARGIN;\n\n\t\t// Stepname line\n\t\twlStepname=new Label(shell, SWT.RIGHT);\n\t\twlStepname.setText(BaseMessages.getString(PKG, \"SSHDialog.Stepname.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlStepname);\n\t\tfdlStepname=new FormData();\n\t\tfdlStepname.left = new FormAttachment(0, 0);\n\t\tfdlStepname.right= new FormAttachment(middle, -margin);\n\t\tfdlStepname.top  = new FormAttachment(0, margin);\n\t\twlStepname.setLayoutData(fdlStepname);\n\t\twStepname=new Text(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\twStepname.setText(stepname);\n \t\tprops.setLook(wStepname);\n\t\twStepname.addModifyListener(lsMod);\n\t\tfdStepname=new FormData();\n\t\tfdStepname.left = new FormAttachment(middle, 0);\n\t\tfdStepname.top  = new FormAttachment(0, margin);\n\t\tfdStepname.right= new FormAttachment(100, 0);\n\t\twStepname.setLayoutData(fdStepname);\n\t\t\n\t\t\n\t\twTabFolder = new CTabFolder(shell, SWT.BORDER);\n \t\tprops.setLook(wTabFolder, PropsUI.WIDGET_STYLE_TAB);\n\n\t\t//////////////////////////\n\t\t// START OF GENERAL TAB   ///\n\t\t//////////////////////////\n\t\twGeneralTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twGeneralTab.setText(BaseMessages.getString(PKG, \"SSHDialog.General.Tab\"));\n\t\t\n\t\twGeneralComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wGeneralComp);\n\n\t\tFormLayout fileLayout = new FormLayout();\n\t\tfileLayout.marginWidth  = 3;\n\t\tfileLayout.marginHeight = 3;\n\t\twGeneralComp.setLayout(fileLayout);\n\t\t\n\t\t///////////////////////////////// \n\t\t// START OF Settings GROUP  //\n\t\t///////////////////////////////// \n\n\t\twSettingsGroup = new Group(wGeneralComp, SWT.SHADOW_NONE);\n\t\tprops.setLook(wSettingsGroup);\n\t\twSettingsGroup.setText(BaseMessages.getString(PKG, \"SSHDialog.wSettingsGroup.Label\"));\n\t\t\n\t\tFormLayout settingGroupLayout = new FormLayout();\n\t\tsettingGroupLayout.marginWidth = 10;\n\t\tsettingGroupLayout.marginHeight = 10;\n\t\twSettingsGroup.setLayout(settingGroupLayout);\n\t\t\n\t\t // Server port line\n        wServerName = new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.Server.Label\"), BaseMessages.getString(PKG, \"SSHDialog.Server.Tooltip\"));\n        props.setLook(wServerName);\n        wServerName.addModifyListener(lsMod);\n        fdServerName = new FormData();\n        fdServerName.left \t= new FormAttachment(0, 0);\n        fdServerName.top  \t= new FormAttachment(wStepname, margin);\n        fdServerName.right\t= new FormAttachment(100, 0);\n        wServerName.setLayoutData(fdServerName);\n        \n        // Server port line\n        wPort = new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.Port.Label\"), BaseMessages.getString(PKG, \"SSHDialog.Port.Tooltip\"));\n        props.setLook(wPort);\n        wPort.addModifyListener(lsMod);\n        fdPort = new FormData();\n        fdPort.left \t= new FormAttachment(0, 0);\n        fdPort.top  \t= new FormAttachment(wServerName, margin);\n        fdPort.right\t= new FormAttachment(100, 0);\n        wPort.setLayoutData(fdPort);\n        \n        // Server TimeOut line\n        wTimeOut = new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.TimeOut.Label\"), BaseMessages.getString(PKG, \"SSHDialog.TimeOut.Tooltip\"));\n        props.setLook(wTimeOut);\n        wTimeOut.addModifyListener(lsMod);\n        fdTimeOut = new FormData();\n        fdTimeOut.left \t= new FormAttachment(0, 0);\n        fdTimeOut.top  \t= new FormAttachment(wPort, margin);\n        fdTimeOut.right\t= new FormAttachment(100, 0);\n        wTimeOut.setLayoutData(fdTimeOut);\n\t\t\n\t\t// Usernameline\n        wUserName = new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.UserName.Label\"), BaseMessages.getString(PKG, \"SSHDialog.UserName.Tooltip\"));\n        props.setLook(wUserName);\n        wUserName.addModifyListener(lsMod);\n        fdUserName = new FormData();\n        fdUserName.left \t= new FormAttachment(0, 0);\n        fdUserName.top  \t= new FormAttachment(wTimeOut, margin);\n        fdUserName.right\t= new FormAttachment(100, 0);\n        wUserName.setLayoutData(fdUserName);\n        \n\t\t\n\t\t// Passwordline\n        wPassword = new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.Password.Label\"), BaseMessages.getString(PKG, \"SSHDialog.Password.Tooltip\"));\n        props.setLook(wPassword);\n        wPassword.addModifyListener(lsMod);\n        fdPassword = new FormData();\n        fdPassword.left \t= new FormAttachment(0, 0);\n        fdPassword.top  \t= new FormAttachment(wUserName, margin);\n        fdPassword.right\t= new FormAttachment(100, 0);\n        wPassword.setLayoutData(fdPassword);\n        wPassword.setEchoChar('*');\n\n        // Use key?\n        wlUseKey = new Label(wSettingsGroup, SWT.RIGHT);\n        wlUseKey.setText(BaseMessages.getString(PKG, \"SSHDialog.UseKey.Label\"));\n        props.setLook(wlUseKey);\n        fdlUseKey = new FormData();\n        fdlUseKey.left = new FormAttachment(0, 0);\n        fdlUseKey.top = new FormAttachment(wPassword,margin);\n        fdlUseKey.right = new FormAttachment(middle, -margin);\n        wlUseKey.setLayoutData(fdlUseKey);\n        wUseKey = new Button(wSettingsGroup, SWT.CHECK);\n        props.setLook(wUseKey);\n        wUseKey.setToolTipText(BaseMessages.getString(PKG, \"SSHDialog.UseKey.Tooltip\"));\n        fdUseKey = new FormData();\n        fdUseKey.left = new FormAttachment(middle, margin);\n        fdUseKey.top = new FormAttachment(wPassword, margin);\n        fdUseKey.right = new FormAttachment(100, 0);\n        wUseKey.setLayoutData(fdUseKey);\n        wUseKey.addSelectionListener(new SelectionAdapter()\n        {\n            public void widgetSelected(SelectionEvent e)\n            {\n                input.setChanged();\n                activateKey();\n            }\n        });\n        \n        wbFilename=new Button(wSettingsGroup, SWT.PUSH| SWT.CENTER);\n \t\tprops.setLook(wbFilename);\n\t\twbFilename.setText(BaseMessages.getString(PKG, \"System.Button.Browse\"));\n\t\tfdbFilename=new FormData();\n\t\tfdbFilename.right= new FormAttachment(100, -margin);\n\t\tfdbFilename.top  = new FormAttachment(wUseKey, margin);\n\t\twbFilename.setLayoutData(fdbFilename);\n\t\twbFilename.addSelectionListener\n\t\t(\n\t\t\tnew SelectionAdapter()\n\t\t\t{\n\t\t\t\tpublic void widgetSelected(SelectionEvent e) \n\t\t\t\t{\n\t\t\t\t\tFileDialog dialog = new FileDialog(shell, SWT.SAVE);\n\t\t\t\t\tdialog.setFilterExtensions(new String[] {\"*.pem\", \"*\"});\n\t\t\t\t\tif (wPrivateKey.getText()!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\tdialog.setFileName(transMeta.environmentSubstitute(wPrivateKey.getText()));\n\t\t\t\t\t}\n\t\t\t\t\tdialog.setFilterNames(new String[] {BaseMessages.getString(PKG, \"System.FileType.PEMFiles\"), \n\t\t\t\t\t\t\tBaseMessages.getString(PKG, \"System.FileType.AllFiles\")});\n\t\t\t\t\tif (dialog.open()!=null)\n\t\t\t\t\t{\n\t\t\t\t\t\twPrivateKey.setText(dialog.getFilterPath()+System.getProperty(\"file.separator\")+dialog.getFileName());\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t);\n\t\t\n\t\t// Private key\n        wPrivateKey= new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.PrivateKey.Label\"), BaseMessages.getString(PKG, \"SSHDialog.PrivateKey.Tooltip\"));\n        props.setLook(wPassword);\n        wPrivateKey.addModifyListener(lsMod);\n        fdPrivateKey= new FormData();\n        fdPrivateKey.left \t= new FormAttachment(0, 5*margin);\n        fdPrivateKey.top  \t= new FormAttachment(wUseKey, margin);\n        fdPrivateKey.right\t= new FormAttachment(wbFilename, -margin);\n        wPrivateKey.setLayoutData(fdPrivateKey);\n        \n\t    \n\t\t// Passphraseline\n        wPassphrase= new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.Passphrase.Label\"), BaseMessages.getString(PKG, \"SSHDialog.Passphrase.Tooltip\"));\n        props.setLook(wPassphrase);\n        wPassphrase.addModifyListener(lsMod);\n        fdPassphrase= new FormData();\n        fdPassphrase.left \t= new FormAttachment(0, 0);\n        fdPassphrase.top  \t= new FormAttachment(wbFilename, margin);\n        fdPassphrase.right\t= new FormAttachment(100, 0);\n        wPassphrase.setLayoutData(fdPassphrase);\n        \n     // ProxyHostline\n        wProxyHost = new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.ProxyHost.Label\"), BaseMessages.getString(PKG, \"SSHDialog.ProxyHost.Tooltip\"));\n        props.setLook(wProxyHost);\n        wProxyHost.addModifyListener(lsMod);\n        fdProxyHost = new FormData();\n        fdProxyHost.left \t= new FormAttachment(0, 0);\n        fdProxyHost.top  \t= new FormAttachment(wPassphrase, 2*margin);\n        fdProxyHost.right\t= new FormAttachment(100, 0);\n        wProxyHost.setLayoutData(fdProxyHost);\n        \n\t\t// ProxyPortline\n        wProxyPort = new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.ProxyPort.Label\"), BaseMessages.getString(PKG, \"SSHDialog.ProxyPort.Tooltip\"));\n        props.setLook(wProxyPort);\n        wProxyPort.addModifyListener(lsMod);\n        fdProxyPort = new FormData();\n        fdProxyPort.left \t= new FormAttachment(0, 0);\n        fdProxyPort.top  \t= new FormAttachment(wProxyHost, margin);\n        fdProxyPort.right\t= new FormAttachment(100, 0);\n        wProxyPort.setLayoutData(fdProxyPort);\n        \n\t\t// ProxyUsernameline\n        wProxyUsername = new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.ProxyUsername.Label\"), BaseMessages.getString(PKG, \"SSHDialog.ProxyUsername.Tooltip\"));\n        props.setLook(wProxyUsername);\n        wProxyUsername.addModifyListener(lsMod);\n        fdProxyUsername = new FormData();\n        fdProxyUsername.left \t= new FormAttachment(0, 0);\n        fdProxyUsername.top  \t= new FormAttachment(wProxyPort, margin);\n        fdProxyUsername.right\t= new FormAttachment(100, 0);\n        wProxyUsername.setLayoutData(fdProxyUsername);\n        \n\t\t// ProxyUsernameline\n        wProxyPassword= new LabelTextVar(transMeta, wSettingsGroup, BaseMessages.getString(PKG, \"SSHDialog.ProxyPassword.Label\"), BaseMessages.getString(PKG, \"SSHDialog.ProxyPassword.Tooltip\"));\n        props.setLook(wProxyUsername);\n        wProxyPassword.addModifyListener(lsMod);\n        fdProxyPassword= new FormData();\n        fdProxyPassword.left \t= new FormAttachment(0, 0);\n        fdProxyPassword.top  \t= new FormAttachment(wProxyUsername, margin);\n        fdProxyPassword.right\t= new FormAttachment(100, 0);\n        wProxyPassword.setLayoutData(fdProxyPassword);\n        wProxyPassword.setEchoChar('*');\n        \n\t\t\n\t\t// Test connection button\n\t\twTest=new Button(wSettingsGroup,SWT.PUSH);\n\t\twTest.setText(BaseMessages.getString(PKG, \"SSHDialog.TestConnection.Label\"));\n \t\tprops.setLook(wTest);\n\t\tfdTest=new FormData();\n\t\twTest.setToolTipText(BaseMessages.getString(PKG, \"SSHDialog.TestConnection.Tooltip\"));\n\t\tfdTest.top  = new FormAttachment(wProxyPassword, 2*margin);\n\t\tfdTest.right= new FormAttachment(100, 0);\n\t\twTest.setLayoutData(fdTest);\n        \n\t\tfdSettingsGroup = new FormData();\n\t\tfdSettingsGroup.left = new FormAttachment(0, margin);\n\t\tfdSettingsGroup.top = new FormAttachment(wStepname, margin);\n\t\tfdSettingsGroup.right = new FormAttachment(100, -margin);\n\t\twSettingsGroup.setLayoutData(fdSettingsGroup);\n\t\t\n\t\t///////////////////////////////// \n\t\t// END OF Settings Fields GROUP  //\n\t\t\n\t\t\n\t\tfdGeneralComp=new FormData();\n\t\tfdGeneralComp.left  = new FormAttachment(0, 0);\n\t\tfdGeneralComp.top   = new FormAttachment(0, 0);\n\t\tfdGeneralComp.right = new FormAttachment(100, 0);\n\t\tfdGeneralComp.bottom= new FormAttachment(100, 0);\n\t\twGeneralComp.setLayoutData(fdGeneralComp);\n\t\n\t\twGeneralComp.layout();\n\t\twGeneralTab.setControl(wGeneralComp);\n\t\t\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF GENERAL TAB\n\t\t/////////////////////////////////////////////////////////////\n\n\t\t\n\t\t//////////////////////////\n\t\t// START OF Settings TAB///\n\t\t///\n\t\twSettingsTab=new CTabItem(wTabFolder, SWT.NONE);\n\t\twSettingsTab.setText(BaseMessages.getString(PKG, \"SSHDialog.Settings.Tab\"));\n\n\t\tFormLayout SettingsLayout = new FormLayout ();\n\t\tSettingsLayout.marginWidth  = 3;\n\t\tSettingsLayout.marginHeight = 3;\n\t\t\n\t\twSettingsComp = new Composite(wTabFolder, SWT.NONE);\n \t\tprops.setLook(wSettingsComp);\n\t\twSettingsComp.setLayout(SettingsLayout);\n\t\t\n\t\t\n\t\t///////////////////////////////// \n\t\t// START OF Output GROUP  //\n\t\t///////////////////////////////// \n\n\t\twOutput = new Group(wSettingsComp, SWT.SHADOW_NONE);\n\t\tprops.setLook(wOutput);\n\t\twOutput.setText(BaseMessages.getString(PKG, \"SSHDialog.wOutput.Label\"));\n\t\t\n\t\tFormLayout outputGroupLayout = new FormLayout();\n\t\toutputGroupLayout.marginWidth = 10;\n\t\toutputGroupLayout.marginHeight = 10;\n\t\twOutput.setLayout(outputGroupLayout);\n\t\t\n\t\t// ResultOutFieldNameline\n        wResultOutFieldName= new LabelTextVar(transMeta, wOutput, BaseMessages.getString(PKG, \"SSHDialog.ResultOutFieldName.Label\"), BaseMessages.getString(PKG, \"SSHDialog.ResultOutFieldName.Tooltip\"));\n        props.setLook(wResultOutFieldName);\n        wResultOutFieldName.addModifyListener(lsMod);\n        fdResultOutFieldName= new FormData();\n        fdResultOutFieldName.left \t= new FormAttachment(0, 0);\n        fdResultOutFieldName.top  \t= new FormAttachment(wStepname, margin);\n        fdResultOutFieldName.right\t= new FormAttachment(100, 0);\n        wResultOutFieldName.setLayoutData(fdResultOutFieldName);\n        \n    \t// ResultErrFieldNameline\n        wResultErrFieldName= new LabelTextVar(transMeta, wOutput, BaseMessages.getString(PKG, \"SSHDialog.ResultErrFieldName.Label\"), BaseMessages.getString(PKG, \"SSHDialog.ResultErrFieldName.Tooltip\"));\n        props.setLook(wResultErrFieldName);\n        wResultErrFieldName.addModifyListener(lsMod);\n        fdResultErrFieldName= new FormData();\n        fdResultErrFieldName.left \t= new FormAttachment(0, 0);\n        fdResultErrFieldName.top  \t= new FormAttachment(wResultOutFieldName, margin);\n        fdResultErrFieldName.right\t= new FormAttachment(100, 0);\n        wResultErrFieldName.setLayoutData(fdResultErrFieldName);\n\n\t\tfdOutput = new FormData();\n\t\tfdOutput.left = new FormAttachment(0, margin);\n\t\tfdOutput.top = new FormAttachment(wStepname, margin);\n\t\tfdOutput.right = new FormAttachment(100, -margin);\n\t\twOutput.setLayoutData(fdOutput);\n\t\t\n\t\t///////////////////////////////// \n\t\t// END OF Output Fields GROUP  //\n\t\t\n\t\t\n\t\t// ////////////////////////\n\t    // START OF Commands SETTINGS GROUP///\n\t    // /\n\t    wCommands = new Group(wSettingsComp, SWT.SHADOW_NONE);\n\t    props.setLook(wCommands);\n\t    wCommands.setText(BaseMessages.getString(PKG, \"SSHDialog.LogSettings.Group.Label\"));\n\n\t    FormLayout LogSettingsgroupLayout = new FormLayout();\n\t    LogSettingsgroupLayout.marginWidth = 10;\n\t    LogSettingsgroupLayout.marginHeight = 10;\n\n\t    wCommands.setLayout(LogSettingsgroupLayout);\n\t    \n\n\t\t//Is command defined in a Field\t\t\n\t\twldynamicCommand= new Label(wCommands, SWT.RIGHT);\n\t\twldynamicCommand.setText(BaseMessages.getString(PKG, \"SSHDialog.dynamicCommand.Label\"));\n\t\tprops.setLook(wldynamicCommand);\n\t\tfdlynamicBase= new FormData();\n\t\tfdlynamicBase.left = new FormAttachment(0, margin);\n\t\tfdlynamicBase.top = new FormAttachment(wOutput, margin);\n\t\tfdlynamicBase.right = new FormAttachment(middle, -margin);\n\t\twldynamicCommand.setLayoutData(fdlynamicBase);\n\t\t\n\t\twdynamicCommand= new Button(wCommands, SWT.CHECK);\n\t\tprops.setLook(wdynamicCommand);\n\t\twdynamicCommand.setToolTipText(BaseMessages.getString(PKG, \"SSHDialog.dynamicCommand.Tooltip\"));\n\t\tfdynamicCommand= new FormData();\n\t\tfdynamicCommand.left = new FormAttachment(middle, margin);\n\t\tfdynamicCommand.top = new FormAttachment(wOutput, margin);\n\t\twdynamicCommand.setLayoutData(fdynamicCommand);\t\t\n\t\tSelectionAdapter ldynamicCommand= new SelectionAdapter()\n        {\n            public void widgetSelected(SelectionEvent arg0)\n            {\n            \tactivateDynamicCommand();\n            \tinput.setChanged();\n            }\n        };\n        wdynamicCommand.addSelectionListener(ldynamicCommand);\n\t  \n\n\t\t// CommandField field\n\t\twlCommandField=new Label(wCommands, SWT.RIGHT);\n\t\twlCommandField.setText(BaseMessages.getString(PKG, \"SSHDialog.MessageNameField.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlCommandField);\n\t\tfdlCommandField=new FormData();\n\t\tfdlCommandField.left = new FormAttachment(0, margin);\n\t\tfdlCommandField.right= new FormAttachment(middle, -margin);\n\t\tfdlCommandField.top  = new FormAttachment(wdynamicCommand, margin);\n\t\twlCommandField.setLayoutData(fdlCommandField);\n\t\n\t\twCommandField=new CCombo(wCommands, SWT.BORDER | SWT.READ_ONLY);\n \t\tprops.setLook(wCommandField);\n \t\twCommandField.setEditable(true);\n \t\twCommandField.addModifyListener(lsMod);\n\t\tfdCommandField=new FormData();\n\t\tfdCommandField.left = new FormAttachment(middle,margin);\n\t\tfdCommandField.top  = new FormAttachment(wdynamicCommand, margin);\n\t\tfdCommandField.right= new FormAttachment(100, 0);\n\t\twCommandField.setLayoutData(fdCommandField);\n\t\twCommandField.addFocusListener(new FocusListener()\n        {\n            public void focusLost(org.eclipse.swt.events.FocusEvent e)\n            {\n            }\n        \n            public void focusGained(org.eclipse.swt.events.FocusEvent e)\n            {\n                get();\n            }\n        }\n    );\n\n\t\t\n\t\t\n\t\t// Command String\n        wlCommand = new Label(wCommands, SWT.RIGHT);\n        wlCommand.setText(BaseMessages.getString(PKG, \"SSHDialog.Command.Label\"));\n        props.setLook(wlCommand);\n        fdlCommand = new FormData();\n        fdlCommand.left = new FormAttachment(0, margin);\n        fdlCommand.top = new FormAttachment(wCommandField, margin);\n        fdlCommand.right = new FormAttachment(middle, -2*margin);\n        wlCommand.setLayoutData(fdlCommand);\n\n        wCommand=new StyledTextComp(wCommands, SWT.MULTI | SWT.LEFT | SWT.BORDER | SWT.H_SCROLL | SWT.V_SCROLL, \"\");\n        wCommand.setToolTipText(BaseMessages.getString(PKG, \"SSHDialog.Command.Tooltip\"));\n        props.setLook(wCommand);\n        wCommand.addModifyListener(lsMod);\n        fdCommand = new FormData();\n        fdCommand.left = new FormAttachment(middle, margin);\n        fdCommand.top = new FormAttachment(wCommandField,margin);\n        fdCommand.right = new FormAttachment(100, 0);\n        fdCommand.bottom = new FormAttachment(100, -margin);\n        wCommand.setLayoutData(fdCommand);\n\t\t\n\t\t\n\t\t\n\t    fdLogSettings = new FormData();\n\t    fdLogSettings.left = new FormAttachment(0, margin);\n\t    fdLogSettings.top = new FormAttachment(wOutput, margin);\n\t    fdLogSettings.right = new FormAttachment(100, -margin);\n\t    fdLogSettings.bottom = new FormAttachment(100, -margin);\n\t    wCommands.setLayoutData(fdLogSettings);\n\t    // ///////////////////////////////////////////////////////////\n\t    // / END OF Log SETTINGS GROUP\n\t    // ///////////////////////////////////////////////////////////\n\n\t\tfdSettingsComp=new FormData();\n\t\tfdSettingsComp.left  = new FormAttachment(0, 0);\n\t\tfdSettingsComp.top   = new FormAttachment(0, 0);\n\t\tfdSettingsComp.right = new FormAttachment(100, 0);\n\t\tfdSettingsComp.bottom= new FormAttachment(100, 0);\n\t\twSettingsComp.setLayoutData(fdSettingsComp);\n\t\n\t\twSettingsComp.layout();\n\t\twSettingsTab.setControl(wSettingsComp);\n\t\t\n\t\t/////////////////////////////////////////////////////////////\n\t\t/// END OF Settings TAB\n\t\t/////////////////////////////////////////////////////////////\n\n\n\t\tfdTabFolder = new FormData();\n\t\tfdTabFolder.left  = new FormAttachment(0, 0);\n\t\tfdTabFolder.top   = new FormAttachment(wStepname, margin);\n\t\tfdTabFolder.right = new FormAttachment(100, 0);\n\t\tfdTabFolder.bottom= new FormAttachment(100, -50);\n\t\twTabFolder.setLayoutData(fdTabFolder);\n\t\t\n\n\t\t// THE BUTTONS\n\t\twOK=new Button(shell, SWT.PUSH);\n\t\twOK.setText(BaseMessages.getString(PKG, \"System.Button.OK\")); //$NON-NLS-1$\n\t\twPreview=new Button(shell, SWT.PUSH);\n\t\twPreview.setText(BaseMessages.getString(PKG, \"SSHDialog.Button.PreviewRows\"));\n\t\twCancel=new Button(shell, SWT.PUSH);\n\t\twCancel.setText(BaseMessages.getString(PKG, \"System.Button.Cancel\")); //$NON-NLS-1$\n\n\t\tsetButtonPositions(new Button[] { wOK, wPreview, wCancel }, margin, wTabFolder);\n\n\t\t// Add listeners\n\t\tlsOK       = new Listener() { public void handleEvent(Event e) { ok();        } };\n\t\tlsPreview  = new Listener() { public void handleEvent(Event e) { preview();   } };\n\t\tlsCancel   = new Listener() { public void handleEvent(Event e) { cancel();    } };\n\t\tlsTest     = new Listener() { public void handleEvent(Event e) { test(); } };\n\t\t\n\t\twOK.addListener    (SWT.Selection, lsOK    );\n\t\twCancel.addListener(SWT.Selection, lsCancel);\n\t\twPreview.addListener    (SWT.Selection, lsPreview    );\n\t\twTest.addListener    (SWT.Selection, lsTest    );\n\t\t\n\t\tlsDef=new SelectionAdapter() { public void widgetDefaultSelected(SelectionEvent e) { ok(); } };\n\t\t\n\t\twStepname.addSelectionListener( lsDef );\n\t\t\n\t\t// Detect X or ALT-F4 or something that kills this window...\n\t\tshell.addShellListener(\tnew ShellAdapter() { public void shellClosed(ShellEvent e) { cancel(); } } );\n\t\twTabFolder.setSelection(0);\n\t\t// Set the shell size, based upon previous time...\n\t\tsetSize();\n\t\tgetData();\n\t\tactivateKey();\n\t\tactivateDynamicCommand();\n\t\tinput.setChanged(changed);\n\n\t\tshell.open();\n\t\twhile (!shell.isDisposed())\n\t\t{\n\t\t\t\tif (!display.readAndDispatch()) display.sleep();\n\t\t}\n\t\treturn stepname;\n\t}","commit_id":"909e60a8a7f32d9e9baa7942cec7aa5ac494dbd4","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\n\t * Copy information from the meta-data input to the dialog fields.\n\t */ \n\tpublic void getData()\n\t{\n\t\twdynamicCommand.setSelection(input.isDynamicCommand());\n\t\tif(input.getCommand()!=null) wCommand.setText(input.getCommand());\n\t\tif(input.getcommandfieldname()!=null) wCommandField.setText(input.getcommandfieldname());\n\t\tif(input.getServerName()!=null) wServerName.setText(input.getServerName());\n\t\tif(input.getPort()!=null) wPort.setText(input.getPort());\n\t\tif(input.getuserName() !=null)   wUserName.setText(input.getuserName());\n\t\tif(input.getpassword() !=null)   wPassword.setText(input.getpassword());\n        wUseKey.setSelection(input.isusePrivateKey());\n        if(input.getKeyFileName()!=null) wPrivateKey.setText(input.getKeyFileName());\n        if(input.getPassphrase()!=null) wPassphrase.setText(input.getPassphrase());\n        if(input.getStdOutFieldName()!=null) wResultOutFieldName.setText(input.getStdOutFieldName());\n        if(input.getStdErrFieldName()!=null) wResultErrFieldName.setText(input.getStdErrFieldName());\n        wTimeOut.setText(Const.NVL(input.getTimeOut(), \"0\"));\n\t\twStepname.selectAll();\n\t}","id":10286,"modified_method":"/**\n\t * Copy information from the meta-data input to the dialog fields.\n\t */ \n\tpublic void getData()\n\t{\n\t\twdynamicCommand.setSelection(input.isDynamicCommand());\n\t\tif(input.getCommand()!=null) wCommand.setText(input.getCommand());\n\t\tif(input.getcommandfieldname()!=null) wCommandField.setText(input.getcommandfieldname());\n\t\tif(input.getServerName()!=null) wServerName.setText(input.getServerName());\n\t\tif(input.getPort()!=null) wPort.setText(input.getPort());\n\t\tif(input.getuserName() !=null)   wUserName.setText(input.getuserName());\n\t\tif(input.getpassword() !=null)   wPassword.setText(input.getpassword());\n        wUseKey.setSelection(input.isusePrivateKey());\n        if(input.getKeyFileName()!=null) wPrivateKey.setText(input.getKeyFileName());\n        if(input.getPassphrase()!=null) wPassphrase.setText(input.getPassphrase());\n        if(input.getStdOutFieldName()!=null) wResultOutFieldName.setText(input.getStdOutFieldName());\n        if(input.getStdErrFieldName()!=null) wResultErrFieldName.setText(input.getStdErrFieldName());\n        wTimeOut.setText(Const.NVL(input.getTimeOut(), \"0\"));\n        if(input.getProxyHost()!=null) wProxyHost.setText(input.getProxyHost());\n        if(input.getProxyPort()!=null) wProxyPort.setText(input.getProxyPort());\n        if(input.getProxyUsername()!=null) wProxyUsername.setText(input.getProxyUsername());\n        if(input.getProxyPassword()!=null) wProxyPassword.setText(input.getProxyPassword());\n        \n\t\twStepname.selectAll();\n\t}","commit_id":"909e60a8a7f32d9e9baa7942cec7aa5ac494dbd4","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void saveRep(Repository rep, ObjectId id_transformation, ObjectId id_step) throws KettleException\n\t{\n        try\n        {\n        \trep.saveJobEntryAttribute(id_transformation, id_step, \"dynamicCommandField\", dynamicCommandField);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"command\",      command);\n            rep.saveStepAttribute(id_transformation, id_step, \"commandfieldname\", commandfieldname); //$NON-NLS-1$\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"port\",      port);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"servername\",      serverName);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"userName\",      userName);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"password\",      password);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"usePrivateKey\", usePrivateKey);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"keyFileName\", keyFileName);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"passPhrase\", passPhrase);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"stdOutFieldName\", stdOutFieldName);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"stdErrFieldName\", stdErrFieldName);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"timeOut\", timeOut);\n        }\n        catch (Exception e)\n        {\n            throw new KettleException(BaseMessages.getString(PKG, \"SSHMeta.Exception.UnableToSaveStepInfo\") + id_step, e); //$NON-NLS-1$\n        }\n    }","id":10287,"modified_method":"public void saveRep(Repository rep, ObjectId id_transformation, ObjectId id_step) throws KettleException\n\t{\n        try\n        {\n        \trep.saveJobEntryAttribute(id_transformation, id_step, \"dynamicCommandField\", dynamicCommandField);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"command\",      command);\n            rep.saveStepAttribute(id_transformation, id_step, \"commandfieldname\", commandfieldname); //$NON-NLS-1$\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"port\",      port);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"servername\",      serverName);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"userName\",      userName);\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"password\", Encr.encryptPasswordIfNotUsingVariables(password));\n\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"usePrivateKey\", usePrivateKey);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"keyFileName\", keyFileName);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"passPhrase\", passPhrase);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"stdOutFieldName\", stdOutFieldName);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"stdErrFieldName\", stdErrFieldName);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"timeOut\", timeOut);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"proxyHost\", proxyHost);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"proxyPort\", proxyPort);\n\t\t\trep.saveJobEntryAttribute(id_transformation, id_step, \"proxyUsername\", proxyUsername);\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"proxyPassword\", Encr.encryptPasswordIfNotUsingVariables(proxyPassword));\n\n        }\n        catch (Exception e)\n        {\n            throw new KettleException(BaseMessages.getString(PKG, \"SSHMeta.Exception.UnableToSaveStepInfo\") + id_step, e); //$NON-NLS-1$\n        }\n    }","commit_id":"909e60a8a7f32d9e9baa7942cec7aa5ac494dbd4","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void readRep(Repository rep, ObjectId id_step, List<DatabaseMeta> databases, Map<String, Counter> counters) throws KettleException {\n    \t\n        try\n        {\n        \tdynamicCommandField=rep.getJobEntryAttributeBoolean(id_step, \"dynamicCommandField\");\n\t\t\tcommand       = rep.getJobEntryAttributeString(id_step, \"command\");\n        \tcommandfieldname = rep.getStepAttributeString(id_step, \"commandfieldname\"); //$NON-NLS-1$\n\t\t\tserverName    = rep.getJobEntryAttributeString(id_step, \"servername\");\n        \tport          = rep.getJobEntryAttributeString(id_step, \"port\");\n\t\t\tuserName      = rep.getJobEntryAttributeString(id_step, \"userName\");\n\t\t\tpassword      = rep.getJobEntryAttributeString(id_step, \"password\");\n\n\t\t\tusePrivateKey=rep.getJobEntryAttributeBoolean(id_step, \"usePrivateKey\");\n\t\t\tkeyFileName=rep.getJobEntryAttributeString(id_step, \"keyFileName\");\n\t\t\tpassPhrase=rep.getJobEntryAttributeString(id_step, \"passPhrase\");\n\t\t\tstdOutFieldName=rep.getJobEntryAttributeString(id_step, \"stdOutFieldName\");\n\t\t\tstdErrFieldName=rep.getJobEntryAttributeString(id_step, \"stdErrFieldName\");\n\t\t\ttimeOut=rep.getJobEntryAttributeString(id_step, \"timeOut\");\n        }\n        catch (Exception e)\n        {\n            throw new KettleException(BaseMessages.getString(PKG, \"SSHMeta.Exception.UnexpectedErrorReadingStepInfo\"), e); //$NON-NLS-1$\n        }\n    }","id":10288,"modified_method":"public void readRep(Repository rep, ObjectId id_step, List<DatabaseMeta> databases, Map<String, Counter> counters) throws KettleException {\n    \t\n        try\n        {\n        \tdynamicCommandField=rep.getJobEntryAttributeBoolean(id_step, \"dynamicCommandField\");\n\t\t\tcommand       = rep.getJobEntryAttributeString(id_step, \"command\");\n        \tcommandfieldname = rep.getStepAttributeString(id_step, \"commandfieldname\"); //$NON-NLS-1$\n\t\t\tserverName    = rep.getJobEntryAttributeString(id_step, \"servername\");\n        \tport          = rep.getJobEntryAttributeString(id_step, \"port\");\n\t\t\tuserName      = rep.getJobEntryAttributeString(id_step, \"userName\");\n\t\t\tpassword              = Encr.decryptPasswordOptionallyEncrypted( rep.getStepAttributeString (id_step, \"password\") );\t\n\t\t\t\n\t\t\tusePrivateKey=rep.getJobEntryAttributeBoolean(id_step, \"usePrivateKey\");\n\t\t\tkeyFileName=rep.getJobEntryAttributeString(id_step, \"keyFileName\");\n\t\t\tpassPhrase=rep.getJobEntryAttributeString(id_step, \"passPhrase\");\n\t\t\tstdOutFieldName=rep.getJobEntryAttributeString(id_step, \"stdOutFieldName\");\n\t\t\tstdErrFieldName=rep.getJobEntryAttributeString(id_step, \"stdErrFieldName\");\n\t\t\ttimeOut=rep.getJobEntryAttributeString(id_step, \"timeOut\");\n\t\t\tproxyHost=rep.getJobEntryAttributeString(id_step, \"proxyHost\");\n\t\t\tproxyPort=rep.getJobEntryAttributeString(id_step, \"proxyPort\");\n\t\t\tproxyUsername=rep.getJobEntryAttributeString(id_step, \"proxyUsername\");\n\t\t\tproxyPassword              = Encr.decryptPasswordOptionallyEncrypted( rep.getStepAttributeString (id_step, \"proxyPassword\") );\t\n\t\t\t\n        }\n        catch (Exception e)\n        {\n            throw new KettleException(BaseMessages.getString(PKG, \"SSHMeta.Exception.UnexpectedErrorReadingStepInfo\"), e); //$NON-NLS-1$\n        }\n    }","commit_id":"909e60a8a7f32d9e9baa7942cec7aa5ac494dbd4","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public static Connection OpenConnection(String serveur, int port, \n\t\t\tString username, String password, boolean useKey, String keyFilename, String passPhrase, int timeOut,\n\t\t\tVariableSpace space)\n\tthrows KettleException {\n\t\tConnection conn = null;\n\t\tboolean isAuthenticated= false;\n\t\tFile keyFile=null;\n\t\ttry {\n\t\t\t   // perform some checks\n\t\t\t   if(useKey)  {\n\t\t\t\t\tif(Const.isEmpty(keyFilename)) {\n\t\t\t\t\t\tthrow new KettleException(BaseMessages.getString(PKG, \"SSH.Error.PrivateKeyFileMissing\"));\n\t\t\t\t\t}\n\t\t\t\t\tkeyFile = new File(keyFilename);\n\t\t\t\t\tif(!keyFile.exists()) {\n\t\t\t\t\t\tthrow new KettleException(BaseMessages.getString(PKG, \"SSH.Error.PrivateKeyNotExist\", keyFilename));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Create a new connection\n\t\t\t\tconn = new Connection(serveur, port);\n\t\t\t\t// and connect\n\t\t\t\tif(timeOut==0)\n\t\t\t\t\tconn.connect();\n\t\t\t\telse\n\t\t\t\t\tconn.connect(null, 0,timeOut*1000);\n\t\t\t\t// authenticate\n\t\t\t\tif(useKey)  {\n\t\t\t\t\tisAuthenticated = conn.authenticateWithPublicKey(username, keyFile,\n\t\t\t\t\t\t\tspace.environmentSubstitute(passPhrase));\n\t\t\t\t} else {\n\t\t\t\t\tisAuthenticated = conn.authenticateWithPassword(username, password);\n\t\t\t\t}\n\t\t\t\tif (isAuthenticated == false) throw new KettleException(BaseMessages.getString(PKG, \"SSH.Error.AuthenticationFailed\", username));\t\n\t\t\t}catch(Exception e) { \n\t\t\t\t// Something wrong happened\n\t\t\t\t// do not forget to disconnect if connected\n\t\t\t\tif(conn!=null) conn.close();\n\t\t\t\tthrow new KettleException(BaseMessages.getString(PKG, \"SSH.Error.ErrorConnecting\", serveur, username), e);\n\t\t\t}\n\t\t\treturn conn;\n\t  }","id":10289,"modified_method":"public static Connection OpenConnection(String serveur, int port, \n\t\t\tString username, String password, boolean useKey, String keyFilename, String passPhrase, int timeOut,\n\t\t\tVariableSpace space,\n\t\t\tString proxyhost, int proxyport, String proxyusername, String proxypassword)\n\tthrows KettleException {\n\t\tConnection conn = null;\n\t\tboolean isAuthenticated= false;\n\t\tFile keyFile=null;\n\t\ttry {\n\t\t\t   // perform some checks\n\t\t\t   if(useKey)  {\n\t\t\t\t\tif(Const.isEmpty(keyFilename)) {\n\t\t\t\t\t\tthrow new KettleException(BaseMessages.getString(PKG, \"SSH.Error.PrivateKeyFileMissing\"));\n\t\t\t\t\t}\n\t\t\t\t\tkeyFile = new File(keyFilename);\n\t\t\t\t\tif(!keyFile.exists()) {\n\t\t\t\t\t\tthrow new KettleException(BaseMessages.getString(PKG, \"SSH.Error.PrivateKeyNotExist\", keyFilename));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// Create a new connection\n\t\t\t\tconn = new Connection(serveur, port);\n\t\t\t\t\n\t\t\t\t/* We want to connect through a HTTP proxy */\n\t\t\t\tif(!Const.isEmpty(proxyhost)) {\n\t\t\t\t\t/* Now connect */\n\t\t\t\t\t// if the proxy requires basic authentication:\n\t\t\t\t\tif(!Const.isEmpty(proxyusername)) {\n\t\t\t\t\t\tconn.setProxyData(new HTTPProxyData(proxyhost, proxyport, proxyusername, proxypassword));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tconn.setProxyData(new HTTPProxyData(proxyhost, proxyport));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\t// and connect\n\t\t\t\tif(timeOut==0)\n\t\t\t\t\tconn.connect();\n\t\t\t\telse\n\t\t\t\t\tconn.connect(null, 0,timeOut*1000);\n\t\t\t\t// authenticate\n\t\t\t\tif(useKey)  {\n\t\t\t\t\tisAuthenticated = conn.authenticateWithPublicKey(username, keyFile,\n\t\t\t\t\t\t\tspace.environmentSubstitute(passPhrase));\n\t\t\t\t} else {\n\t\t\t\t\tisAuthenticated = conn.authenticateWithPassword(username, password);\n\t\t\t\t}\n\t\t\t\tif (isAuthenticated == false) throw new KettleException(BaseMessages.getString(PKG, \"SSH.Error.AuthenticationFailed\", username));\t\n\t\t\t}catch(Exception e) { \n\t\t\t\t// Something wrong happened\n\t\t\t\t// do not forget to disconnect if connected\n\t\t\t\tif(conn!=null) conn.close();\n\t\t\t\tthrow new KettleException(BaseMessages.getString(PKG, \"SSH.Error.ErrorConnecting\", serveur, username), e);\n\t\t\t}\n\t\t\treturn conn;\n\t  }","commit_id":"909e60a8a7f32d9e9baa7942cec7aa5ac494dbd4","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void setDefault()\n    {\n    \tdynamicCommandField=false;\n    \tcommand=null;\n        commandfieldname=null;\n\t\tport=String.valueOf(DEFAULT_PORT);\n\t\tserverName=null;\n\t\tuserName=null;\n\t\tpassword=null;\n\t\tusePrivateKey=true;\n\t\tkeyFileName=null;\n\t\tstdOutFieldName=\"stdOut\";\n\t\tstdErrFieldName=\"stdErr\";\n\t\ttimeOut=\"0\";\n    }","id":10290,"modified_method":"public void setDefault()\n    {\n    \tdynamicCommandField=false;\n    \tcommand=null;\n        commandfieldname=null;\n\t\tport=String.valueOf(DEFAULT_PORT);\n\t\tserverName=null;\n\t\tuserName=null;\n\t\tpassword=null;\n\t\tusePrivateKey=true;\n\t\tkeyFileName=null;\n\t\tstdOutFieldName=\"stdOut\";\n\t\tstdErrFieldName=\"stdErr\";\n\t\ttimeOut=\"0\";\n\t\tproxyHost=null;\n\t\tproxyPort=null;\n\t\tproxyUsername=null;\n\t\tproxyPassword=null;\n    }","commit_id":"909e60a8a7f32d9e9baa7942cec7aa5ac494dbd4","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void readData(Node stepnode)\n\tthrows KettleXMLException\n\t{\n\t\ttry\n\t\t{\n\t\t\tdynamicCommandField = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(stepnode, \"dynamicCommandField\"));\n\t\t\tcommand = XMLHandler.getTagValue(stepnode, \"command\"); \n\t\t\tcommandfieldname = XMLHandler.getTagValue(stepnode, \"commandfieldname\"); \n\t      \tport          = XMLHandler.getTagValue(stepnode, \"port\");\n\t\t\tserverName   = XMLHandler.getTagValue(stepnode, \"servername\");\n\t\t\tuserName          = XMLHandler.getTagValue(stepnode, \"userName\");\n\t\t\tpassword          = XMLHandler.getTagValue(stepnode, \"password\");\n\t\t\tusePrivateKey = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(stepnode, \"usePrivateKey\"));\n\t\t\tkeyFileName = XMLHandler.getTagValue(stepnode, \"keyFileName\");\n\t\t\tpassPhrase = XMLHandler.getTagValue(stepnode, \"passPhrase\");\n\t\t\tstdOutFieldName = XMLHandler.getTagValue(stepnode, \"stdOutFieldName\");\n\t\t\tstdErrFieldName = XMLHandler.getTagValue(stepnode, \"stdErrFieldName\");\n\t\t\ttimeOut = XMLHandler.getTagValue(stepnode, \"timeOut\");\n\t\t}\n\t    catch (Exception e)\n\t    {\n\t        throw new KettleXMLException(BaseMessages.getString(PKG, \"SSHMeta.Exception.UnableToReadStepInfo\"), e); //$NON-NLS-1$\n\t    }\n    }","id":10291,"modified_method":"private void readData(Node stepnode)\n\tthrows KettleXMLException\n\t{\n\t\ttry\n\t\t{\n\t\t\tdynamicCommandField = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(stepnode, \"dynamicCommandField\"));\n\t\t\tcommand = XMLHandler.getTagValue(stepnode, \"command\"); \n\t\t\tcommandfieldname = XMLHandler.getTagValue(stepnode, \"commandfieldname\"); \n\t      \tport          = XMLHandler.getTagValue(stepnode, \"port\");\n\t\t\tserverName   = XMLHandler.getTagValue(stepnode, \"servername\");\n\t\t\tuserName          = XMLHandler.getTagValue(stepnode, \"userName\");\n\t\t\tpassword=\tEncr.decryptPasswordOptionallyEncrypted(XMLHandler.getTagValue(stepnode, \"password\"));\n\n\t\t\tusePrivateKey = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(stepnode, \"usePrivateKey\"));\n\t\t\tkeyFileName = XMLHandler.getTagValue(stepnode, \"keyFileName\");\n\t\t\tpassPhrase = XMLHandler.getTagValue(stepnode, \"passPhrase\");\n\t\t\tstdOutFieldName = XMLHandler.getTagValue(stepnode, \"stdOutFieldName\");\n\t\t\tstdErrFieldName = XMLHandler.getTagValue(stepnode, \"stdErrFieldName\");\n\t\t\ttimeOut = XMLHandler.getTagValue(stepnode, \"timeOut\");\n\t\t\tproxyHost = XMLHandler.getTagValue(stepnode, \"proxyHost\");\n\t\t\tproxyPort = XMLHandler.getTagValue(stepnode, \"proxyPort\");\n\t\t\tproxyUsername = XMLHandler.getTagValue(stepnode, \"proxyUsername\");\n\t\t\tproxyPassword=\tEncr.decryptPasswordOptionallyEncrypted(XMLHandler.getTagValue(stepnode, \"proxyPassword\"));\n\n\t\t}\n\t    catch (Exception e)\n\t    {\n\t        throw new KettleXMLException(BaseMessages.getString(PKG, \"SSHMeta.Exception.UnableToReadStepInfo\"), e); //$NON-NLS-1$\n\t    }\n    }","commit_id":"909e60a8a7f32d9e9baa7942cec7aa5ac494dbd4","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String getXML()\n    {\n        StringBuffer retval = new StringBuffer();\n\n        \n        retval.append(\"    \" + XMLHandler.addTagValue(\"dynamicCommandField\",   dynamicCommandField));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"command\",   command));\n        retval.append(\"    \" + XMLHandler.addTagValue(\"commandfieldname\", commandfieldname)); //$NON-NLS-1$ //$NON-NLS-2$\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"port\",   port));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"servername\",   serverName));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"userName\",   userName));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"password\",   password));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"usePrivateKey\",   usePrivateKey));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"keyFileName\",   keyFileName));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"passPhrase\",   passPhrase));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"stdOutFieldName\",   stdOutFieldName));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"stdErrFieldName\",   stdErrFieldName));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"timeOut\",   timeOut));\n        return retval.toString();\n    }","id":10292,"modified_method":"public String getXML()\n    {\n        StringBuffer retval = new StringBuffer();\n\n        \n        retval.append(\"    \" + XMLHandler.addTagValue(\"dynamicCommandField\",   dynamicCommandField));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"command\",   command));\n        retval.append(\"    \" + XMLHandler.addTagValue(\"commandfieldname\", commandfieldname)); //$NON-NLS-1$ //$NON-NLS-2$\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"port\",   port));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"servername\",   serverName));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"userName\",   userName));\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"password\", Encr.encryptPasswordIfNotUsingVariables(password)));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"usePrivateKey\",   usePrivateKey));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"keyFileName\",   keyFileName));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"passPhrase\",   passPhrase));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"stdOutFieldName\",   stdOutFieldName));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"stdErrFieldName\",   stdErrFieldName));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"timeOut\",   timeOut));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"proxyHost\",   proxyHost));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"proxyPort\",   proxyPort));\n\t\tretval.append(\"    \" + XMLHandler.addTagValue(\"proxyUsername\",   proxyUsername));\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"proxyPassword\", Encr.encryptPasswordIfNotUsingVariables(proxyPassword)));\n        return retval.toString();\n    }","commit_id":"909e60a8a7f32d9e9baa7942cec7aa5ac494dbd4","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(AddressTable.class, \"typeId\", \"LONG\");\n\t}","id":10293,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tAddressTable.class,\n\t\t\tnew AlterColumnType(\"typeId\", \"LONG\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(AnnouncementsEntryTable.class, \"content\", \"TEXT null\");\n\t}","id":10294,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tAnnouncementsEntryTable.class,\n\t\t\tnew AlterColumnType(\"content\", \"TEXT null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(\n\t\t\tAssetEntryTable.class, new String[] {\"description\", \"TEXT null\"},\n\t\t\tnew String[] {\"summary\", \"TEXT null\"});\n\n\t\tupdateAssetEntries();\n\t\tupdateAssetVocabularies();\n\t}","id":10295,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tAssetEntryTable.class,\n\t\t\tnew AlterColumnType(\"description\", \"TEXT null\"),\n\t\t\tnew AlterColumnType(\"summary\", \"TEXT null\"));\n\n\t\tupdateAssetEntries();\n\t\tupdateAssetVocabularies();\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(AssetEntryTable.class, \"title\", \"STRING null\");\n\n\t\tupdateAssetClassTypeId();\n\t\tupdateIGImageClassName();\n\t}","id":10296,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tAssetEntryTable.class, new AlterColumnType(\"title\", \"STRING null\"));\n\n\t\tupdateAssetClassTypeId();\n\t\tupdateIGImageClassName();\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(BlogsEntryTable.class, \"smallImageURL\", \"STRING null\");\n\t}","id":10297,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tBlogsEntryTable.class,\n\t\t\tnew AlterColumnType(\"smallImageURL\", \"STRING null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void updateEntries() throws Exception {\n\t\ttry (LoggingTimer loggingTimer = new LoggingTimer()) {\n\t\t\talterColumnType(\n\t\t\t\tBlogsEntryTable.class, \"description\", \"STRING null\");\n\t\t}\n\t}","id":10298,"modified_method":"protected void updateEntries() throws Exception {\n\t\ttry (LoggingTimer loggingTimer = new LoggingTimer()) {\n\t\t\talter(\n\t\t\t\tBlogsEntryTable.class,\n\t\t\t\tnew AlterColumnType(\"description\", \"STRING null\"));\n\t\t}\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\ttry {\n\t\t\trunSQL(\"drop index IX_E0D90212 on BlogsEntry\");\n\t\t\trunSQL(\"drop index IX_DA53AFD4 on BlogsEntry\");\n\t\t\trunSQL(\"drop index IX_B88E740E on BlogsEntry\");\n\n\t\t\trunSQL(\"alter table BlogsEntry drop column draft\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t}\n\n\t\talterColumnType(BlogsEntryTable.class, \"smallImageURL\", \"STRING null\");\n\t}","id":10299,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\ttry {\n\t\t\trunSQL(\"drop index IX_E0D90212 on BlogsEntry\");\n\t\t\trunSQL(\"drop index IX_DA53AFD4 on BlogsEntry\");\n\t\t\trunSQL(\"drop index IX_B88E740E on BlogsEntry\");\n\n\t\t\trunSQL(\"alter table BlogsEntry drop column draft\");\n\t\t}\n\t\tcatch (Exception e) {\n\t\t}\n\n\t\talter(\n\t\t\tBlogsEntryTable.class,\n\t\t\tnew AlterColumnType(\"smallImageURL\", \"STRING null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(CalendarBookingTable.class, \"description\", \"TEXT null\");\n\t}","id":10300,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tCalendarBookingTable.class,\n\t\t\tnew AlterColumnType(\"description\", \"TEXT null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\n\t\t// DLFileEntry\n\n\t\tupdateFileEntryFileNames();\n\n\t\t// DLFileEntryType\n\n\t\tupdateFileEntryTypeNamesAndDescriptions();\n\n\t\tupdateFileEntryTypeDDMStructureLinks();\n\n\t\t// DLFileVersion\n\n\t\tupdateFileVersionFileNames();\n\n\t\t// DLFolder\n\n\t\talterColumnType(DLFolderTable.class, \"name\", \"VARCHAR(255) null\");\n\n\t\tupdateRepositoryClassNameIds();\n\t}","id":10301,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\n\t\t// DLFileEntry\n\n\t\tupdateFileEntryFileNames();\n\n\t\t// DLFileEntryType\n\n\t\tupdateFileEntryTypeNamesAndDescriptions();\n\n\t\tupdateFileEntryTypeDDMStructureLinks();\n\n\t\t// DLFileVersion\n\n\t\tupdateFileVersionFileNames();\n\n\t\t// DLFolder\n\n\t\talter(\n\t\t\tDLFolderTable.class,\n\t\t\tnew AlterColumnType(\"name\", \"VARCHAR(255) null\"));\n\n\t\tupdateRepositoryClassNameIds();\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(DLFileEntryTable.class, \"size_\", \"LONG\");\n\n\t\talterColumnType(DLFileVersionTable.class, \"size_\", \"LONG\");\n\t}","id":10302,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(DLFileEntryTable.class, new AlterColumnType(\"size_\", \"LONG\"));\n\n\t\talter(DLFileVersionTable.class, new AlterColumnType(\"size_\", \"LONG\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(EmailAddressTable.class, \"typeId\", \"LONG\");\n\t}","id":10303,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(EmailAddressTable.class, new AlterColumnType(\"typeId\", \"LONG\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(ExpandoColumnTable.class, \"defaultData\", \"TEXT null\");\n\n\t\talterColumnType(ExpandoValueTable.class, \"data_\", \"TEXT null\");\n\t}","id":10304,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tExpandoColumnTable.class,\n\t\t\tnew AlterColumnType(\"defaultData\", \"TEXT null\"));\n\n\t\talter(\n\t\t\tExpandoValueTable.class, new AlterColumnType(\"data_\", \"TEXT null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(\n\t\t\tGroupTable.class, new String[] {\"typeSettings\", \"TEXT null\"},\n\t\t\tnew String[] {\"friendlyURL\", \"VARCHAR(255) null\"});\n\n\t\tlong classNameId = PortalUtil.getClassNameId(\n\t\t\t\"com.liferay.portal.model.Company\");\n\n\t\trunSQL(\n\t\t\t\"update Group_ set site = TRUE where classNameId = \" + classNameId);\n\t}","id":10305,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tGroupTable.class, new AlterColumnType(\"typeSettings\", \"TEXT null\"),\n\t\t\tnew AlterColumnType(\"friendlyURL\", \"VARCHAR(255) null\"));\n\n\t\tlong classNameId = PortalUtil.getClassNameId(\n\t\t\t\"com.liferay.portal.model.Company\");\n\n\t\trunSQL(\n\t\t\t\"update Group_ set site = TRUE where classNameId = \" + classNameId);\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(GroupTable.class, \"name\", \"VARCHAR(150) null\");\n\n\t\tupdateName();\n\t\tupdateSite();\n\t}","id":10306,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tGroupTable.class,\n\t\t\tnew AlterColumnType(\"name\", \"VARCHAR(150) null\"));\n\n\t\tupdateName();\n\t\tupdateSite();\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(GroupTable.class, \"name\", \"STRING null\");\n\t}","id":10307,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(GroupTable.class, new AlterColumnType(\"name\", \"STRING null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(JournalArticleTable.class, \"title\", \"STRING null\");\n\n\t\talterColumnType(\n\t\t\tJournalStructureTable.class, new String[] {\"name\", \"STRING null\"},\n\t\t\tnew String[] {\"description\", \"STRING null\"});\n\n\t\talterColumnType(\n\t\t\tJournalTemplateTable.class, new String[] {\"name\", \"STRING null\"},\n\t\t\tnew String[] {\"description\", \"STRING null\"});\n\n\t\tupdateStructureXsd();\n\t}","id":10308,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tJournalArticleTable.class,\n\t\t\tnew AlterColumnType(\"title\", \"STRING null\"));\n\n\t\talter(\n\t\t\tJournalStructureTable.class,\n\t\t\tnew AlterColumnType(\"name\", \"STRING null\"),\n\t\t\tnew AlterColumnType(\"description\", \"STRING null\"));\n\n\t\talter(\n\t\t\tJournalTemplateTable.class,\n\t\t\tnew AlterColumnType(\"name\", \"STRING null\"),\n\t\t\tnew AlterColumnType(\"description\", \"STRING null\"));\n\n\t\tupdateStructureXsd();\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(\n\t\t\tJournalArticleTable.class, \"smallImageURL\", \"STRING null\");\n\n\t\talterColumnType(\n\t\t\tJournalFeedTable.class, \"targetLayoutFriendlyUrl\",\n\t\t\t\"VARCHAR(255) null\");\n\n\t\talterColumnType(\n\t\t\tJournalTemplateTable.class, \"smallImageURL\", \"STRING null\");\n\t}","id":10309,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tJournalArticleTable.class,\n\t\t\tnew AlterColumnType(\"smallImageURL\", \"STRING null\"));\n\n\t\talter(\n\t\t\tJournalFeedTable.class,\n\t\t\tnew AlterColumnType(\n\t\t\t\t\"targetLayoutFriendlyUrl\", \"VARCHAR(255) null\"));\n\n\t\talter(\n\t\t\tJournalTemplateTable.class,\n\t\t\tnew AlterColumnType(\"smallImageURL\", \"STRING null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(\n\t\t\tJournalArticleTable.class, \"title\", \"VARCHAR(300) null\");\n\t}","id":10310,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tJournalArticleTable.class,\n\t\t\tnew AlterColumnType(\"title\", \"VARCHAR(300) null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(KaleoLogTable.class, \"comment_\", \"TEXT null\");\n\t}","id":10311,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tKaleoLogTable.class, new AlterColumnType(\"comment_\", \"TEXT null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(LayoutTable.class, \"css\", \"TEXT null\");\n\t}","id":10312,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(LayoutTable.class, new AlterColumnType(\"css\", \"TEXT null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(LayoutTable.class, \"friendlyURL\", \"VARCHAR(255) null\");\n\t}","id":10313,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tLayoutTable.class,\n\t\t\tnew AlterColumnType(\"friendlyURL\", \"VARCHAR(255) null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(LayoutRevisionTable.class, \"css\", \"TEXT null\");\n\t}","id":10314,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tLayoutRevisionTable.class, new AlterColumnType(\"css\", \"TEXT null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(\n\t\t\tLayoutSetTable.class, new String[] {\"css\", \"TEXT null\"},\n\t\t\tnew String[] {\"settings_\", \"TEXT null\"});\n\t}","id":10315,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tLayoutSetTable.class, new AlterColumnType(\"css\", \"TEXT null\"),\n\t\t\tnew AlterColumnType(\"settings_\", \"TEXT null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(\n\t\t\tLayoutSetBranchTable.class, new String[] {\"css\", \"TEXT null\"},\n\t\t\tnew String[] {\"settings_\", \"TEXT null\"});\n\t}","id":10316,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tLayoutSetBranchTable.class, new AlterColumnType(\"css\", \"TEXT null\"),\n\t\t\tnew AlterColumnType(\"settings_\", \"TEXT null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(ListTypeTable.class, \"listTypeId\", \"LONG\");\n\t}","id":10317,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(ListTypeTable.class, new AlterColumnType(\"listTypeId\", \"LONG\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(LockTable.class, \"owner\", \"VARCHAR(1024) null\");\n\t}","id":10318,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tLockTable.class,\n\t\t\tnew AlterColumnType(\"owner\", \"VARCHAR(1024) null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(LockTable.class, \"owner\", \"VARCHAR(300) null\");\n\t}","id":10319,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tLockTable.class,\n\t\t\tnew AlterColumnType(\"owner\", \"VARCHAR(300) null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(MembershipRequestTable.class, \"statusId\", \"LONG\");\n\t}","id":10320,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tMembershipRequestTable.class,\n\t\t\tnew AlterColumnType(\"statusId\", \"LONG\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(OrgLaborTable.class, \"typeId\", \"LONG\");\n\t}","id":10321,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(OrgLaborTable.class, new AlterColumnType(\"typeId\", \"LONG\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(OrganizationTable.class, \"statusId\", \"LONG\");\n\t}","id":10322,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(OrganizationTable.class, new AlterColumnType(\"statusId\", \"LONG\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(PhoneTable.class, \"typeId\", \"LONG\");\n\t}","id":10323,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(PhoneTable.class, new AlterColumnType(\"typeId\", \"LONG\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(PollsChoiceTable.class, \"description\", \"STRING null\");\n\t\talterColumnType(PollsQuestionTable.class, \"title\", \"STRING null\");\n\t}","id":10324,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tPollsChoiceTable.class,\n\t\t\tnew AlterColumnType(\"description\", \"STRING null\"));\n\t\talter(\n\t\t\tPollsQuestionTable.class,\n\t\t\tnew AlterColumnType(\"title\", \"STRING null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(\n\t\t\tPortletItemTable.class, \"portletId\", \"VARCHAR(200) null\");\n\t}","id":10325,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tPortletItemTable.class,\n\t\t\tnew AlterColumnType(\"portletId\", \"VARCHAR(200) null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(\n\t\t\tRepositoryTable.class, \"portletId\", \"VARCHAR(200) null\");\n\t}","id":10326,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tRepositoryTable.class,\n\t\t\tnew AlterColumnType(\"portletId\", \"VARCHAR(200) null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(\n\t\t\tRepositoryEntryTable.class, \"mappedId\", \"VARCHAR(255) null\");\n\t}","id":10327,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tRepositoryEntryTable.class,\n\t\t\tnew AlterColumnType(\"mappedId\", \"VARCHAR(255) null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(ResourceActionTable.class, \"name\", \"VARCHAR(255) null\");\n\t}","id":10328,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tResourceActionTable.class,\n\t\t\tnew AlterColumnType(\"name\", \"VARCHAR(255) null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\ttry (LoggingTimer loggingTimer = new LoggingTimer(\n\t\t\t\t\"runSQLTemplateString\")) {\n\n\t\t\tString template = StringUtil.read(\n\t\t\t\tUpgradeSchema.class.getResourceAsStream(\n\t\t\t\t\t\"dependencies/update.sql\"));\n\n\t\t\trunSQLTemplateString(template, false, false);\n\t\t}\n\n\t\ttry (LoggingTimer loggingTimer = new LoggingTimer(\"alterColumnName\")) {\n\t\t\trunSQL(\"alter_column_name DDMContent xml data_ TEXT null\");\n\n\t\t\trunSQL(\"alter_column_name DDMStructure xsd definition TEXT null\");\n\t\t}\n\t\tcatch (SQLException sqle) {\n\n\t\t\t// DDMContent\n\n\t\t\tupgradeTable(\n\t\t\t\tDDMContentTable.TABLE_NAME, DDMContentTable.TABLE_COLUMNS,\n\t\t\t\tDDMContentTable.TABLE_SQL_CREATE,\n\t\t\t\tDDMContentTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\t// DDMStructure\n\n\t\t\tupgradeTable(\n\t\t\t\tDDMStructureTable.TABLE_NAME, DDMStructureTable.TABLE_COLUMNS,\n\t\t\t\tDDMStructureTable.TABLE_SQL_CREATE,\n\t\t\t\tDDMStructureTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\n\t\talterColumnType(DDMStructureTable.class, \"description\", \"TEXT null\");\n\n\t\talterColumnType(DDMTemplateTable.class, \"description\", \"TEXT null\");\n\t}","id":10329,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\ttry (LoggingTimer loggingTimer = new LoggingTimer(\n\t\t\t\t\"runSQLTemplateString\")) {\n\n\t\t\tString template = StringUtil.read(\n\t\t\t\tUpgradeSchema.class.getResourceAsStream(\n\t\t\t\t\t\"dependencies/update.sql\"));\n\n\t\t\trunSQLTemplateString(template, false, false);\n\t\t}\n\n\t\ttry (LoggingTimer loggingTimer = new LoggingTimer(\"alterColumnName\")) {\n\t\t\trunSQL(\"alter_column_name DDMContent xml data_ TEXT null\");\n\n\t\t\trunSQL(\"alter_column_name DDMStructure xsd definition TEXT null\");\n\t\t}\n\t\tcatch (SQLException sqle) {\n\n\t\t\t// DDMContent\n\n\t\t\tupgradeTable(\n\t\t\t\tDDMContentTable.TABLE_NAME, DDMContentTable.TABLE_COLUMNS,\n\t\t\t\tDDMContentTable.TABLE_SQL_CREATE,\n\t\t\t\tDDMContentTable.TABLE_SQL_ADD_INDEXES);\n\n\t\t\t// DDMStructure\n\n\t\t\tupgradeTable(\n\t\t\t\tDDMStructureTable.TABLE_NAME, DDMStructureTable.TABLE_COLUMNS,\n\t\t\t\tDDMStructureTable.TABLE_SQL_CREATE,\n\t\t\t\tDDMStructureTable.TABLE_SQL_ADD_INDEXES);\n\t\t}\n\n\t\talter(\n\t\t\tDDMStructureTable.class,\n\t\t\tnew AlterColumnType(\"description\", \"TEXT null\"));\n\n\t\talter(\n\t\t\tDDMTemplateTable.class,\n\t\t\tnew AlterColumnType(\"description\", \"TEXT null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(ShoppingCartTable.class, \"itemIds\", \"TEXT null\");\n\n\t\talterColumnType(ShoppingOrderTable.class, \"comments\", \"TEXT null\");\n\n\t\talterColumnType(ShoppingOrderItemTable.class, \"itemId\", \"TEXT null\");\n\t}","id":10330,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tShoppingCartTable.class,\n\t\t\tnew AlterColumnType(\"itemIds\", \"TEXT null\"));\n\n\t\talter(\n\t\t\tShoppingOrderTable.class,\n\t\t\tnew AlterColumnType(\"comments\", \"TEXT null\"));\n\n\t\talter(\n\t\t\tShoppingOrderItemTable.class,\n\t\t\tnew AlterColumnType(\"itemId\", \"TEXT null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tStringBundler sb = new StringBundler(3);\n\n\t\tsb.append(\"update ShoppingItem set groupId = (select groupId from \");\n\t\tsb.append(\"ShoppingCategory where ShoppingCategory.categoryId = \");\n\t\tsb.append(\"ShoppingItem.categoryId)\");\n\n\t\trunSQL(sb.toString());\n\n\t\talterColumnType(\n\t\t\tShoppingItemTable.class,\n\t\t\tnew String[] {\"smallImageURL\", \"STRING null\"},\n\t\t\tnew String[] {\"mediumImageURL\", \"STRING null\"},\n\t\t\tnew String[] {\"largeImageURL\", \"STRING null\"});\n\t}","id":10331,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\tStringBundler sb = new StringBundler(3);\n\n\t\tsb.append(\"update ShoppingItem set groupId = (select groupId from \");\n\t\tsb.append(\"ShoppingCategory where ShoppingCategory.categoryId = \");\n\t\tsb.append(\"ShoppingItem.categoryId)\");\n\n\t\trunSQL(sb.toString());\n\n\t\talter(\n\t\t\tShoppingItemTable.class,\n\t\t\tnew AlterColumnType(\"smallImageURL\", \"STRING null\"),\n\t\t\tnew AlterColumnType(\"mediumImageURL\", \"STRING null\"),\n\t\t\tnew AlterColumnType(\"largeImageURL\", \"STRING null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(WebsiteTable.class, \"typeId\", \"LONG\");\n\t}","id":10332,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(WebsiteTable.class, new AlterColumnType(\"typeId\", \"LONG\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(\n\t\t\tWikiPageTable.class,\n\t\t\tnew String[] {\"parentTitle\", \"VARCHAR(255) null\"},\n\t\t\tnew String[] {\"redirectTitle\", \"VARCHAR(255) null\"});\n\n\t\talterColumnType(\n\t\t\tWikiPageResourceTable.class, \"title\", \"VARCHAR(255) null\");\n\t}","id":10333,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tWikiPageTable.class,\n\t\t\tnew AlterColumnType(\"parentTitle\", \"VARCHAR(255) null\"),\n\t\t\tnew AlterColumnType(\"redirectTitle\", \"VARCHAR(255) null\"));\n\n\t\talter(\n\t\t\tWikiPageResourceTable.class,\n\t\t\tnew AlterColumnType(\"title\", \"VARCHAR(255) null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talterColumnType(\n\t\t\tWikiPageTable.class,\n\t\t\tnew String[] {\"parentTitle\", \"VARCHAR(255) null\"},\n\t\t\tnew String[] {\"redirectTitle\", \"VARCHAR(255) null\"});\n\n\t\talterColumnType(\n\t\t\tWikiPageResourceTable.class, \"title\", \"VARCHAR(255) null\");\n\t}","id":10334,"modified_method":"@Override\n\tprotected void doUpgrade() throws Exception {\n\t\talter(\n\t\t\tWikiPageTable.class,\n\t\t\tnew AlterColumnType(\"parentTitle\", \"VARCHAR(255) null\"),\n\t\t\tnew AlterColumnType(\"redirectTitle\", \"VARCHAR(255) null\"));\n\n\t\talter(\n\t\t\tWikiPageResourceTable.class,\n\t\t\tnew AlterColumnType(\"title\", \"VARCHAR(255) null\"));\n\t}","commit_id":"462f45621b3b82c3820b0d2fc614627a10a405cc","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic boolean accept(\n\t\tObject returnValue, Throwable t, Map<String, String> propertyMap) {\n\n\t\tif (t == null) {\n\t\t\treturn false;\n\t\t}\n\n\t\tString name = propertyMap.get(EXCEPTION_NAME);\n\n\t\tClass clazz = null;\n\n\t\ttry {\n\t\t\tclazz = t.getClass();\n\n\t\t\tClassLoader classLoader = clazz.getClassLoader();\n\n\t\t\tclazz = classLoader.loadClass(name);\n\t\t}\n\t\tcatch (ClassNotFoundException cnfe) {\n\t\t\treturn false;\n\t\t}\n\n\t\tThrowable cause = t.getCause();\n\n\t\twhile (t != cause) {\n\t\t\tif (clazz.isInstance(t)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\tif (cause == null) {\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tt = cause;\n\n\t\t\tcause = t.getCause();\n\t\t}\n\n\t\treturn false;\n\t}","id":10335,"modified_method":"@Override\n\tpublic boolean acceptResult(\n\t\tObject returnValue, Map<String, String> propertyMap) {\n\n\t\treturn false;\n\t}","commit_id":"475775a2cab2e20d6c987354e471537c4adcf8a2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic Object invoke(MethodInvocation methodInvocation) throws Throwable {\n\t\tRetry retry = findAnnotation(methodInvocation);\n\n\t\tif (retry == _nullRetry) {\n\t\t\treturn methodInvocation.proceed();\n\t\t}\n\n\t\tint retries = retry.retries();\n\n\t\tif (retries < 0) {\n\t\t\tretries = GetterUtil.getInteger(\n\t\t\t\tPropsValues.RETRY_ADVICE_MAX_RETRIES, retries);\n\t\t}\n\n\t\tint totalRetries = retries;\n\n\t\tif (retries >= 0) {\n\t\t\tretries++;\n\t\t}\n\n\t\tMap<String, String> propertyMap = new HashMap<>();\n\n\t\tfor (Property property : retry.properties()) {\n\t\t\tpropertyMap.put(property.name(), property.value());\n\t\t}\n\n\t\tClass<? extends RetryAcceptor> clazz = retry.acceptor();\n\n\t\tRetryAcceptor retryAcceptor = clazz.newInstance();\n\n\t\tServiceBeanMethodInvocation serviceBeanMethodInvocation =\n\t\t\t(ServiceBeanMethodInvocation)methodInvocation;\n\n\t\tserviceBeanMethodInvocation.mark();\n\n\t\tObject returnValue = null;\n\n\t\tThrowable throwable = null;\n\n\t\twhile ((retries < 0) || (retries-- > 0)) {\n\t\t\ttry {\n\t\t\t\treturnValue = serviceBeanMethodInvocation.proceed();\n\n\t\t\t\tif (!retryAcceptor.accept(returnValue, null, propertyMap)) {\n\t\t\t\t\treturn returnValue;\n\t\t\t\t}\n\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(\n\t\t\t\t\t\t\"Unsatisfactory result from \" +\n\t\t\t\t\t\t\tmethodInvocation.getMethod() + \". Retrying \" +\n\t\t\t\t\t\t\t\tretries + \" more times.\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Throwable t) {\n\t\t\t\tthrowable = t;\n\n\t\t\t\tif (!retryAcceptor.accept(null, t, propertyMap)) {\n\t\t\t\t\tthrow t;\n\t\t\t\t}\n\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.error(\n\t\t\t\t\t\t\"Exception thrown from \" +\n\t\t\t\t\t\t\tmethodInvocation.getMethod() + \". Retrying \" +\n\t\t\t\t\t\t\t\tretries + \" more times.\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tserviceBeanMethodInvocation.reset();\n\t\t}\n\n\t\tif (_log.isWarnEnabled()) {\n\t\t\t_log.warn(\n\t\t\t\t\"Unable to get a result after \" + totalRetries + \" retries.\");\n\t\t}\n\n\t\tif (throwable != null) {\n\t\t\tthrow throwable;\n\t\t}\n\n\t\treturn returnValue;\n\t}","id":10336,"modified_method":"@Override\n\tpublic Object invoke(MethodInvocation methodInvocation) throws Throwable {\n\t\tRetry retry = findAnnotation(methodInvocation);\n\n\t\tif (retry == _nullRetry) {\n\t\t\treturn methodInvocation.proceed();\n\t\t}\n\n\t\tint retries = retry.retries();\n\n\t\tif (retries < 0) {\n\t\t\tretries = GetterUtil.getInteger(\n\t\t\t\tPropsValues.RETRY_ADVICE_MAX_RETRIES, retries);\n\t\t}\n\n\t\tint totalRetries = retries;\n\n\t\tif (retries >= 0) {\n\t\t\tretries++;\n\t\t}\n\n\t\tMap<String, String> propertyMap = new HashMap<>();\n\n\t\tfor (Property property : retry.properties()) {\n\t\t\tpropertyMap.put(property.name(), property.value());\n\t\t}\n\n\t\tClass<? extends RetryAcceptor> clazz = retry.acceptor();\n\n\t\tRetryAcceptor retryAcceptor = clazz.newInstance();\n\n\t\tServiceBeanMethodInvocation serviceBeanMethodInvocation =\n\t\t\t(ServiceBeanMethodInvocation)methodInvocation;\n\n\t\tserviceBeanMethodInvocation.mark();\n\n\t\tObject returnValue = null;\n\n\t\tThrowable throwable = null;\n\n\t\twhile ((retries < 0) || (retries-- > 0)) {\n\t\t\ttry {\n\t\t\t\treturnValue = serviceBeanMethodInvocation.proceed();\n\n\t\t\t\tif (!retryAcceptor.acceptResult(returnValue, propertyMap)) {\n\t\t\t\t\treturn returnValue;\n\t\t\t\t}\n\n\t\t\t\tif (_log.isWarnEnabled() && (retries != 0)) {\n\t\t\t\t\tString number = String.valueOf(retries);\n\n\t\t\t\t\tif (retries < 0) {\n\t\t\t\t\t\tnumber = \"unlimited\";\n\t\t\t\t\t}\n\n\t\t\t\t\t_log.warn(\n\t\t\t\t\t\t\"Retry on \" + methodInvocation + \" for \" + number +\n\t\t\t\t\t\t\t\" more times, due to result: \" + returnValue);\n\t\t\t\t}\n\t\t\t}\n\t\t\tcatch (Throwable t) {\n\t\t\t\tthrowable = t;\n\n\t\t\t\tif (!retryAcceptor.acceptException(t, propertyMap)) {\n\t\t\t\t\tthrow t;\n\t\t\t\t}\n\n\t\t\t\tif (_log.isWarnEnabled() && (retries != 0)) {\n\t\t\t\t\tString number = String.valueOf(retries);\n\n\t\t\t\t\tif (retries < 0) {\n\t\t\t\t\t\tnumber = \"unlimited\";\n\t\t\t\t\t}\n\n\t\t\t\t\t_log.warn(\n\t\t\t\t\t\t\"Retry on \" + methodInvocation + \" for \" + number +\n\t\t\t\t\t\t\t\" more times, due to exception: \" + throwable,\n\t\t\t\t\t\tthrowable);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tserviceBeanMethodInvocation.reset();\n\t\t}\n\n\t\tif (throwable != null) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"Give up retrying on \" + methodInvocation + \" after \" +\n\t\t\t\t\t\ttotalRetries + \" retries. Rethrowing last retry's \" +\n\t\t\t\t\t\t\t\"exception: \" + throwable,\n\t\t\t\t\tthrowable);\n\t\t\t}\n\n\t\t\tthrow throwable;\n\t\t}\n\n\t\tif (_log.isWarnEnabled()) {\n\t\t\t_log.warn(\n\t\t\t\t\"Give up retrying on \" + methodInvocation + \" after \" +\n\t\t\t\t\ttotalRetries + \" retries. Returning with last retry's \" +\n\t\t\t\t\t\t\"result: \" + returnValue);\n\t\t}\n\n\t\treturn returnValue;\n\t}","commit_id":"475775a2cab2e20d6c987354e471537c4adcf8a2","url":"https://github.com/liferay/liferay-portal"},{"original_method":"private void _calculateStartAndEnd() {\n\t\t_start = (_cur - 1) * _delta;\n\t\t_end = _start + _delta;\n\n\t\t_resultEnd = _end;\n\n\t\tif (_total == null) {\n\t\t\t_resultEnd = 0;\n\t\t}\n\t\telse if (_resultEnd > _total) {\n\t\t\t_resultEnd = _total;\n\t\t}\n\t}","id":10337,"modified_method":"private void _calculateStartAndEnd() {\n\t\t_start = (_cur - 1) * _delta;\n\t\t_end = _start + _delta;\n\n\t\t_resultEnd = _end;\n\n\t\tif ((_total != -1) && (_resultEnd > _total)) {\n\t\t\t_resultEnd = _total;\n\t\t}\n\t}","commit_id":"ed6ab537e41a49cfd7b2417abb2e05186e11dc8a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public int getStart() {\n\t\tif (_total == null) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\tPortletURL iteratorURL = _iteratorURL;\n\n\t\t\t\tString strutsAction = MapUtil.getString(\n\t\t\t\t\titeratorURL.getParameterMap(), \"struts_action\");\n\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"strutsAction=\" + strutsAction + \" has a searchContainer \" +\n\t\t\t\t\t\t\"where you must call setTotal before calling getStart\");\n\t\t\t}\n\t\t}\n\n\t\treturn _start;\n\t}","id":10338,"modified_method":"public int getStart() {\n\t\tif ((_total == -1) && _log.isWarnEnabled()) {\n\t\t\t_log.warn(\"total must be set first\");\n\t\t}\n\n\t\treturn _start;\n\t}","commit_id":"ed6ab537e41a49cfd7b2417abb2e05186e11dc8a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public int getEnd() {\n\t\tif (_total == null) {\n\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\tPortletURL iteratorURL = _iteratorURL;\n\n\t\t\t\tString strutsAction = MapUtil.getString(\n\t\t\t\t\titeratorURL.getParameterMap(), \"struts_action\");\n\n\t\t\t\t_log.warn(\n\t\t\t\t\t\"strutsAction=\" + strutsAction + \" has a searchContainer \" +\n\t\t\t\t\t\t\"where you must call setTotal before calling getEnd\");\n\t\t\t}\n\t\t}\n\n\t\treturn _end;\n\t}","id":10339,"modified_method":"public int getEnd() {\n\t\tif ((_total == -1) && _log.isWarnEnabled()) {\n\t\t\t_log.warn(\"total must be set first\");\n\t\t}\n\n\t\treturn _end;\n\t}","commit_id":"ed6ab537e41a49cfd7b2417abb2e05186e11dc8a","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void addPortletBreadcrumbEntries(\n\t\t\tFolder folder, HttpServletRequest request,\n\t\t\tLiferayPortletResponse liferayPortletResponse)\n\t\tthrows Exception {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tPortletURL portletURL = liferayPortletResponse.createRenderURL();\n\n\t\tportletURL.setParameter(\n\t\t\t\"mvcRenderCommandName\", \"/document_library/view\");\n\n\t\tMap<String, Object> data = new HashMap<>();\n\n\t\tdata.put(\"direction-right\", Boolean.TRUE.toString());\n\n\t\tPortletDisplay portletDisplay = themeDisplay.getPortletDisplay();\n\n\t\tDLPortletInstanceSettings dlPortletInstanceSettings =\n\t\t\tDLPortletInstanceSettings.getInstance(\n\t\t\t\tthemeDisplay.getLayout(), portletDisplay.getId());\n\n\t\tdata.put(\"folder-id\", dlPortletInstanceSettings.getDefaultFolderId());\n\n\t\tPortalUtil.addPortletBreadcrumbEntry(\n\t\t\trequest, themeDisplay.translate(\"home\"), portletURL.toString(),\n\t\t\tdata);\n\n\t\taddPortletBreadcrumbEntries(folder, request, portletURL);\n\t}","id":10340,"modified_method":"public static void addPortletBreadcrumbEntries(\n\t\t\tFolder folder, HttpServletRequest request,\n\t\t\tLiferayPortletResponse liferayPortletResponse)\n\t\tthrows Exception {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)request.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tPortletURL portletURL = liferayPortletResponse.createRenderURL();\n\n\t\tportletURL.setParameter(\n\t\t\t\"mvcRenderCommandName\", \"/document_library/view_folder\");\n\n\t\tMap<String, Object> data = new HashMap<>();\n\n\t\tdata.put(\"direction-right\", Boolean.TRUE.toString());\n\n\t\tPortletDisplay portletDisplay = themeDisplay.getPortletDisplay();\n\n\t\tDLPortletInstanceSettings dlPortletInstanceSettings =\n\t\t\tDLPortletInstanceSettings.getInstance(\n\t\t\t\tthemeDisplay.getLayout(), portletDisplay.getId());\n\n\t\tdata.put(\"folder-id\", dlPortletInstanceSettings.getDefaultFolderId());\n\n\t\tPortalUtil.addPortletBreadcrumbEntry(\n\t\t\trequest, themeDisplay.translate(\"home\"), portletURL.toString(),\n\t\t\tdata);\n\n\t\taddPortletBreadcrumbEntries(folder, request, portletURL);\n\t}","commit_id":"14cc967ebf5a22a765f7563f177ba2b6b30c0081","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void addPortletBreadcrumbEntries(\n\t\t\tFolder folder, HttpServletRequest request,\n\t\t\tRenderResponse renderResponse)\n\t\tthrows Exception {\n\n\t\tString mvcRenderCommandName = ParamUtil.getString(\n\t\t\trequest, \"mvcRenderCommandName\");\n\n\t\tlong groupId = ParamUtil.getLong(request, \"groupId\");\n\t\tboolean ignoreRootFolder = ParamUtil.getBoolean(\n\t\t\trequest, \"ignoreRootFolder\");\n\n\t\tPortletURL portletURL = renderResponse.createRenderURL();\n\n\t\tif (mvcRenderCommandName.equals(\n\t\t\t\t\"/document_library/select_file_entry\") ||\n\t\t\tmvcRenderCommandName.equals(\"/document_library/select_folder\")) {\n\n\t\t\t_addPortletBreadcrumbEntry(\n\t\t\t\trequest, \"mvcRenderCommandName\", mvcRenderCommandName, groupId,\n\t\t\t\tignoreRootFolder, portletURL);\n\t\t}\n\t\telse {\n\t\t\tportletURL.setParameter(\n\t\t\t\t\"mvcRenderCommandName\", \"/document_library/view\");\n\t\t}\n\n\t\taddPortletBreadcrumbEntries(folder, request, portletURL);\n\t}","id":10341,"modified_method":"public static void addPortletBreadcrumbEntries(\n\t\t\tFolder folder, HttpServletRequest request,\n\t\t\tRenderResponse renderResponse)\n\t\tthrows Exception {\n\n\t\tString mvcRenderCommandName = ParamUtil.getString(\n\t\t\trequest, \"mvcRenderCommandName\");\n\n\t\tlong groupId = ParamUtil.getLong(request, \"groupId\");\n\t\tboolean ignoreRootFolder = ParamUtil.getBoolean(\n\t\t\trequest, \"ignoreRootFolder\");\n\n\t\tPortletURL portletURL = renderResponse.createRenderURL();\n\n\t\tif (mvcRenderCommandName.equals(\n\t\t\t\t\"/document_library/select_file_entry\") ||\n\t\t\tmvcRenderCommandName.equals(\"/document_library/select_folder\")) {\n\n\t\t\t_addPortletBreadcrumbEntry(\n\t\t\t\trequest, \"mvcRenderCommandName\", mvcRenderCommandName, groupId,\n\t\t\t\tignoreRootFolder, portletURL);\n\t\t}\n\t\telse {\n\t\t\tlong folderId = DLFolderConstants.DEFAULT_PARENT_FOLDER_ID;\n\n\t\t\tif (folder != null) {\n\t\t\t\tfolderId = folder.getFolderId();\n\t\t\t}\n\n\t\t\tif (folderId != DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\t\tportletURL.setParameter(\n\t\t\t\t\t\"mvcRenderCommandName\", \"/document_library/view_folder\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\tportletURL.setParameter(\n\t\t\t\t\t\"mvcRenderCommandName\", \"/document_library/view\");\n\t\t\t}\n\t\t}\n\n\t\taddPortletBreadcrumbEntries(folder, request, portletURL);\n\t}","commit_id":"14cc967ebf5a22a765f7563f177ba2b6b30c0081","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic String getURLView(\n\t\t\tLiferayPortletResponse liferayPortletResponse,\n\t\t\tWindowState windowState)\n\t\tthrows Exception {\n\n\t\tAssetRendererFactory<Folder> assetRendererFactory =\n\t\t\tgetAssetRendererFactory();\n\n\t\tPortletURL portletURL = assetRendererFactory.getURLView(\n\t\t\tliferayPortletResponse, windowState);\n\n\t\tportletURL.setParameter(\n\t\t\t\"mvcRenderCommandName\", \"/document_library/view\");\n\t\tportletURL.setParameter(\n\t\t\t\"folderId\", String.valueOf(_folder.getFolderId()));\n\t\tportletURL.setWindowState(windowState);\n\n\t\treturn portletURL.toString();\n\t}","id":10342,"modified_method":"@Override\n\tpublic String getURLView(\n\t\t\tLiferayPortletResponse liferayPortletResponse,\n\t\t\tWindowState windowState)\n\t\tthrows Exception {\n\n\t\tAssetRendererFactory<Folder> assetRendererFactory =\n\t\t\tgetAssetRendererFactory();\n\n\t\tPortletURL portletURL = assetRendererFactory.getURLView(\n\t\t\tliferayPortletResponse, windowState);\n\n\t\tportletURL.setParameter(\n\t\t\t\"mvcRenderCommandName\", \"/document_library/view_folder\");\n\t\tportletURL.setParameter(\n\t\t\t\"folderId\", String.valueOf(_folder.getFolderId()));\n\t\tportletURL.setWindowState(windowState);\n\n\t\treturn portletURL.toString();\n\t}","commit_id":"14cc967ebf5a22a765f7563f177ba2b6b30c0081","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic String getURL() {\n\t\tPortletURL portletURL = PortalUtil.getControlPanelPortletURL(\n\t\t\tportletRequest, DLPortletKeys.DOCUMENT_LIBRARY_ADMIN,\n\t\t\tPortletRequest.ACTION_PHASE);\n\n\t\tportletURL.setParameter(\n\t\t\tActionRequest.ACTION_NAME, \"/document_library/edit_file_entry\");\n\n\t\tif (isTrashEnabled(themeDisplay.getScopeGroupId())) {\n\t\t\tportletURL.setParameter(Constants.CMD, Constants.MOVE_TO_TRASH);\n\t\t}\n\t\telse {\n\t\t\tportletURL.setParameter(Constants.CMD, Constants.DELETE);\n\t\t}\n\n\t\tPortletURL redirectURL = PortalUtil.getControlPanelPortletURL(\n\t\t\tportletRequest, DLPortletKeys.DOCUMENT_LIBRARY_ADMIN,\n\t\t\tPortletRequest.RENDER_PHASE);\n\n\t\tredirectURL.setParameter(\n\t\t\t\"mvcRenderCommandName\", \"/document_library/view\");\n\t\tredirectURL.setParameter(\n\t\t\t\"folderId\", String.valueOf(_fileEntry.getFolderId()));\n\n\t\tportletURL.setParameter(\"redirect\", redirectURL.toString());\n\t\tportletURL.setParameter(\n\t\t\t\"fileEntryId\", String.valueOf(_fileEntry.getFileEntryId()));\n\n\t\treturn portletURL.toString();\n\t}","id":10343,"modified_method":"@Override\n\tpublic String getURL() {\n\t\tPortletURL portletURL = PortalUtil.getControlPanelPortletURL(\n\t\t\tportletRequest, DLPortletKeys.DOCUMENT_LIBRARY_ADMIN,\n\t\t\tPortletRequest.ACTION_PHASE);\n\n\t\tportletURL.setParameter(\n\t\t\tActionRequest.ACTION_NAME, \"/document_library/edit_file_entry\");\n\n\t\tif (isTrashEnabled(themeDisplay.getScopeGroupId())) {\n\t\t\tportletURL.setParameter(Constants.CMD, Constants.MOVE_TO_TRASH);\n\t\t}\n\t\telse {\n\t\t\tportletURL.setParameter(Constants.CMD, Constants.DELETE);\n\t\t}\n\n\t\tPortletURL redirectURL = PortalUtil.getControlPanelPortletURL(\n\t\t\tportletRequest, DLPortletKeys.DOCUMENT_LIBRARY_ADMIN,\n\t\t\tPortletRequest.RENDER_PHASE);\n\n\t\tlong folderId = _fileEntry.getFolderId();\n\n\t\tif (folderId == DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\tredirectURL.setParameter(\n\t\t\t\t\"mvcRenderCommandName\", \"/document_library/view\");\n\t\t}\n\t\telse {\n\t\t\tredirectURL.setParameter(\n\t\t\t\t\"mvcRenderCommandName\", \"/document_library/view_folder\");\n\t\t}\n\n\t\tredirectURL.setParameter(\"folderId\", String.valueOf(folderId));\n\n\t\tportletURL.setParameter(\"redirect\", redirectURL.toString());\n\t\tportletURL.setParameter(\n\t\t\t\"fileEntryId\", String.valueOf(_fileEntry.getFileEntryId()));\n\n\t\treturn portletURL.toString();\n\t}","commit_id":"14cc967ebf5a22a765f7563f177ba2b6b30c0081","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic String getURL() {\n\t\tPortletURL portletURL = PortalUtil.getControlPanelPortletURL(\n\t\t\tportletRequest, DLPortletKeys.DOCUMENT_LIBRARY_ADMIN,\n\t\t\tPortletRequest.RENDER_PHASE);\n\n\t\tportletURL.setParameter(\n\t\t\t\"mvcRenderCommandName\", \"/document_library/move_entry\");\n\n\t\tPortletURL redirectURL = PortalUtil.getControlPanelPortletURL(\n\t\t\tportletRequest, DLPortletKeys.DOCUMENT_LIBRARY_ADMIN,\n\t\t\tPortletRequest.RENDER_PHASE);\n\n\t\tredirectURL.setParameter(\n\t\t\t\"mvcRenderCommandName\", \"/document_library/view\");\n\t\tredirectURL.setParameter(\n\t\t\t\"folderId\", String.valueOf(_fileEntry.getFolderId()));\n\n\t\tportletURL.setParameter(\"redirect\", redirectURL.toString());\n\n\t\tportletURL.setParameter(\n\t\t\t\"rowIdsFileEntry\", String.valueOf(_fileEntry.getFileEntryId()));\n\n\t\treturn portletURL.toString();\n\t}","id":10344,"modified_method":"@Override\n\tpublic String getURL() {\n\t\tPortletURL portletURL = PortalUtil.getControlPanelPortletURL(\n\t\t\tportletRequest, DLPortletKeys.DOCUMENT_LIBRARY_ADMIN,\n\t\t\tPortletRequest.RENDER_PHASE);\n\n\t\tportletURL.setParameter(\n\t\t\t\"mvcRenderCommandName\", \"/document_library/move_entry\");\n\n\t\tPortletURL redirectURL = PortalUtil.getControlPanelPortletURL(\n\t\t\tportletRequest, DLPortletKeys.DOCUMENT_LIBRARY_ADMIN,\n\t\t\tPortletRequest.RENDER_PHASE);\n\n\t\tlong folderId = _fileEntry.getFolderId();\n\n\t\tif (folderId == DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\tredirectURL.setParameter(\n\t\t\t\t\"mvcRenderCommandName\", \"/document_library/view\");\n\t\t}\n\t\telse {\n\t\t\tredirectURL.setParameter(\n\t\t\t\t\"mvcRenderCommandName\", \"/document_library/view_folder\");\n\t\t}\n\n\t\tredirectURL.setParameter(\"folderId\", String.valueOf(folderId));\n\n\t\tportletURL.setParameter(\"redirect\", redirectURL.toString());\n\n\t\tportletURL.setParameter(\n\t\t\t\"rowIdsFileEntry\", String.valueOf(_fileEntry.getFileEntryId()));\n\n\t\treturn portletURL.toString();\n\t}","commit_id":"14cc967ebf5a22a765f7563f177ba2b6b30c0081","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addMoveToTheRecycleBinToolbarItem(\n\t\t\tList<ToolbarItem> toolbarItems)\n\t\tthrows PortalException {\n\n\t\tif (!isMoveToTheRecycleBinActionAvailable()) {\n\t\t\treturn;\n\t\t}\n\n\t\tLiferayPortletResponse liferayPortletResponse =\n\t\t\t_getLiferayPortletResponse();\n\n\t\tPortletURL portletURL = liferayPortletResponse.createRenderURL();\n\n\t\tportletURL.setParameter(\n\t\t\t\"mvcRenderCommandName\", \"/document_library/view\");\n\t\tportletURL.setParameter(\n\t\t\t\"folderId\", String.valueOf(_fileEntry.getFolderId()));\n\n\t\t_addJavaScriptUIItem(\n\t\t\tnew JavaScriptToolbarItem(), toolbarItems,\n\t\t\tDLUIItemKeys.MOVE_TO_THE_RECYCLE_BIN,\n\t\t\tLanguageUtil.get(_request, \"move-to-the-recycle-bin\"),\n\t\t\tgetSubmitFormJavaScript(\n\t\t\t\tConstants.MOVE_TO_TRASH, portletURL.toString()));\n\t}","id":10345,"modified_method":"public void addMoveToTheRecycleBinToolbarItem(\n\t\t\tList<ToolbarItem> toolbarItems)\n\t\tthrows PortalException {\n\n\t\tif (!isMoveToTheRecycleBinActionAvailable()) {\n\t\t\treturn;\n\t\t}\n\n\t\tLiferayPortletResponse liferayPortletResponse =\n\t\t\t_getLiferayPortletResponse();\n\n\t\tPortletURL portletURL = liferayPortletResponse.createRenderURL();\n\n\t\tlong folderId = _fileEntry.getFolderId();\n\n\t\tif (folderId == DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\tportletURL.setParameter(\n\t\t\t\t\"mvcRenderCommandName\", \"/document_library/view\");\n\t\t}\n\t\telse {\n\t\t\tportletURL.setParameter(\n\t\t\t\t\"mvcRenderCommandName\", \"/document_library/view_folder\");\n\t\t}\n\n\t\tportletURL.setParameter(\"folderId\", String.valueOf(folderId));\n\t\tportletURL.setParameter(\n\t\t\t\"folderId\", String.valueOf(_fileEntry.getFolderId()));\n\n\t\t_addJavaScriptUIItem(\n\t\t\tnew JavaScriptToolbarItem(), toolbarItems,\n\t\t\tDLUIItemKeys.MOVE_TO_THE_RECYCLE_BIN,\n\t\t\tLanguageUtil.get(_request, \"move-to-the-recycle-bin\"),\n\t\t\tgetSubmitFormJavaScript(\n\t\t\t\tConstants.MOVE_TO_TRASH, portletURL.toString()));\n\t}","commit_id":"14cc967ebf5a22a765f7563f177ba2b6b30c0081","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addMoveMenuItem(List<MenuItem> menuItems)\n\t\tthrows PortalException {\n\n\t\tif (!_fileEntryDisplayContextHelper.isMoveActionAvailable()) {\n\t\t\treturn;\n\t\t}\n\n\t\tLiferayPortletResponse liferayPortletResponse =\n\t\t\t_getLiferayPortletResponse();\n\n\t\tPortletURL portletURL = liferayPortletResponse.createRenderURL();\n\n\t\tportletURL.setParameter(\n\t\t\t\"mvcRenderCommandName\", \"/document_library/move_entry\");\n\n\t\tPortletURL redirectURL = liferayPortletResponse.createRenderURL();\n\n\t\tredirectURL.setParameter(\n\t\t\t\"mvcRenderCommandName\", \"/document_library/view\");\n\t\tredirectURL.setParameter(\"folderId\", String.valueOf(_folderId));\n\n\t\tportletURL.setParameter(\"redirect\", redirectURL.toString());\n\n\t\tportletURL.setParameter(\n\t\t\t\"rowIdsFileEntry\", String.valueOf(_fileEntry.getFileEntryId()));\n\n\t\t_addURLUIItem(\n\t\t\tnew URLMenuItem(), menuItems, DLUIItemKeys.MOVE, \"move\",\n\t\t\tportletURL.toString());\n\t}","id":10346,"modified_method":"public void addMoveMenuItem(List<MenuItem> menuItems)\n\t\tthrows PortalException {\n\n\t\tif (!_fileEntryDisplayContextHelper.isMoveActionAvailable()) {\n\t\t\treturn;\n\t\t}\n\n\t\tLiferayPortletResponse liferayPortletResponse =\n\t\t\t_getLiferayPortletResponse();\n\n\t\tPortletURL portletURL = liferayPortletResponse.createRenderURL();\n\n\t\tportletURL.setParameter(\n\t\t\t\"mvcRenderCommandName\", \"/document_library/move_entry\");\n\n\t\tPortletURL redirectURL = liferayPortletResponse.createRenderURL();\n\n\t\tlong folderId = _fileEntry.getFolderId();\n\n\t\tif (folderId == DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\tportletURL.setParameter(\n\t\t\t\t\"mvcRenderCommandName\", \"/document_library/view\");\n\t\t}\n\t\telse {\n\t\t\tportletURL.setParameter(\n\t\t\t\t\"mvcRenderCommandName\", \"/document_library/view_folder\");\n\t\t}\n\n\t\tportletURL.setParameter(\"folderId\", String.valueOf(folderId));\n\t\tportletURL.setParameter(\"redirect\", redirectURL.toString());\n\n\t\tportletURL.setParameter(\n\t\t\t\"rowIdsFileEntry\", String.valueOf(_fileEntry.getFileEntryId()));\n\n\t\t_addURLUIItem(\n\t\t\tnew URLMenuItem(), menuItems, DLUIItemKeys.MOVE, \"move\",\n\t\t\tportletURL.toString());\n\t}","commit_id":"14cc967ebf5a22a765f7563f177ba2b6b30c0081","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addDeleteToolbarItem(List<ToolbarItem> toolbarItems)\n\t\tthrows PortalException {\n\n\t\tif (!isDeleteActionAvailable()) {\n\t\t\treturn;\n\t\t}\n\n\t\tLiferayPortletResponse liferayPortletResponse =\n\t\t\t_getLiferayPortletResponse();\n\n\t\tPortletURL portletURL = liferayPortletResponse.createRenderURL();\n\n\t\tportletURL.setParameter(\n\t\t\t\"mvcRenderCommandName\", \"/document_library/view\");\n\t\tportletURL.setParameter(\n\t\t\t\"folderId\", String.valueOf(_fileEntry.getFolderId()));\n\n\t\tStringBundler sb = new StringBundler(5);\n\n\t\tsb.append(\"if (confirm('\");\n\t\tsb.append(\n\t\t\tUnicodeLanguageUtil.get(\n\t\t\t\t_request, \"are-you-sure-you-want-to-delete-this\"));\n\t\tsb.append(\"')) {\");\n\t\tsb.append(\n\t\t\tgetSubmitFormJavaScript(Constants.DELETE, portletURL.toString()));\n\t\tsb.append(\"}\");\n\n\t\t_addJavaScriptUIItem(\n\t\t\tnew JavaScriptToolbarItem(), toolbarItems, DLUIItemKeys.DELETE,\n\t\t\tLanguageUtil.get(_request, \"delete\"), sb.toString());\n\t}","id":10347,"modified_method":"public void addDeleteToolbarItem(List<ToolbarItem> toolbarItems)\n\t\tthrows PortalException {\n\n\t\tif (!isDeleteActionAvailable()) {\n\t\t\treturn;\n\t\t}\n\n\t\tLiferayPortletResponse liferayPortletResponse =\n\t\t\t_getLiferayPortletResponse();\n\n\t\tPortletURL portletURL = liferayPortletResponse.createRenderURL();\n\n\t\tlong folderId = _fileEntry.getFolderId();\n\n\t\tif (folderId == DLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\t\t\tportletURL.setParameter(\n\t\t\t\t\"mvcRenderCommandName\", \"/document_library/view\");\n\t\t}\n\t\telse {\n\t\t\tportletURL.setParameter(\n\t\t\t\t\"mvcRenderCommandName\", \"/document_library/view_folder\");\n\t\t}\n\n\t\tportletURL.setParameter(\"folderId\", String.valueOf(folderId));\n\n\t\tStringBundler sb = new StringBundler(5);\n\n\t\tsb.append(\"if (confirm('\");\n\t\tsb.append(\n\t\t\tUnicodeLanguageUtil.get(\n\t\t\t\t_request, \"are-you-sure-you-want-to-delete-this\"));\n\t\tsb.append(\"')) {\");\n\t\tsb.append(\n\t\t\tgetSubmitFormJavaScript(Constants.DELETE, portletURL.toString()));\n\t\tsb.append(\"}\");\n\n\t\t_addJavaScriptUIItem(\n\t\t\tnew JavaScriptToolbarItem(), toolbarItems, DLUIItemKeys.DELETE,\n\t\t\tLanguageUtil.get(_request, \"delete\"), sb.toString());\n\t}","commit_id":"14cc967ebf5a22a765f7563f177ba2b6b30c0081","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n    public void testLongMetadata() throws SQLException\n    {\n        Statement stmt = con.createStatement();\n        stmt.executeUpdate(\"UPDATE JdbcLong SET 1=111, 2=222 WHERE KEY = 'Long'\");\n        ResultSet rs = stmt.executeQuery(\"SELECT 1, 2 from JdbcLong WHERE KEY = 'Long'\");\n        assert rs.next();\n        assert rs.getLong(\"1\") == 111;\n        assert rs.getLong(\"2\") == 222;\n        \n        ResultSetMetaData md = rs.getMetaData();\n        assert md.getColumnCount() == 2;\n        expectedMetaData(md, 1, Long.class.getName(), \"JdbcLong\", \"Keyspace1\", \"1\", Types.BIGINT, LongType.class.getSimpleName(), true, false);\n        expectedMetaData(md, 2, Long.class.getName(), \"JdbcLong\", \"Keyspace1\", \"2\", Types.BIGINT, LongType.class.getSimpleName(), true, false);\n        \n        CassandraResultSetMetaData cmd = md.unwrap(CassandraResultSetMetaData.class);\n        for (int i = 0; i < md.getColumnCount(); i++)\n            expectedMetaData(\n                    cmd, i+1,\n                    Long.class.getName(), Types.BIGINT, LongType.class.getSimpleName(), true, false,\n                    Long.class.getName(), Types.BIGINT, LongType.class.getSimpleName(), true, false);\n    }","id":10348,"modified_method":"@Test\n    public void testLongMetadata() throws SQLException\n    {\n        String key = FBUtilities.bytesToHex(\"Long\".getBytes());\n        Statement stmt = con.createStatement();\n        stmt.executeUpdate(\"UPDATE JdbcLong SET 1=111, 2=222 WHERE KEY = '\" + key + \"'\");\n        ResultSet rs = stmt.executeQuery(\"SELECT 1, 2 from JdbcLong WHERE KEY = '\" + key + \"'\");\n        assert rs.next();\n        assert rs.getLong(\"1\") == 111;\n        assert rs.getLong(\"2\") == 222;\n        \n        ResultSetMetaData md = rs.getMetaData();\n        assert md.getColumnCount() == 2;\n        expectedMetaData(md, 1, Long.class.getName(), \"JdbcLong\", \"Keyspace1\", \"1\", Types.BIGINT, LongType.class.getSimpleName(), true, false);\n        expectedMetaData(md, 2, Long.class.getName(), \"JdbcLong\", \"Keyspace1\", \"2\", Types.BIGINT, LongType.class.getSimpleName(), true, false);\n        \n        CassandraResultSetMetaData cmd = md.unwrap(CassandraResultSetMetaData.class);\n        for (int i = 0; i < md.getColumnCount(); i++)\n            expectedMetaData(\n                    cmd, i+1,\n                    Long.class.getName(), Types.BIGINT, LongType.class.getSimpleName(), true, false,\n                    Long.class.getName(), Types.BIGINT, LongType.class.getSimpleName(), true, false);\n    }","commit_id":"8f6eee0eae78b265387805822b6477b348765500","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testStringMetadata() throws SQLException\n    {\n        Statement stmt = con.createStatement();\n        stmt.executeUpdate(\"UPDATE JdbcAscii SET 'a'='aa', 'b'='bb' WHERE KEY = 'ascii'\");\n        stmt.executeUpdate(\"UPDATE JdbcUtf8 SET 'a'='aa', 'b'='bb' WHERE KEY = 'utf8'\");\n        ResultSet rs0 = stmt.executeQuery(\"SELECT 'a', 'b' FROM JdbcAscii WHERE KEY = 'ascii'\");\n        ResultSet rs1 = stmt.executeQuery(\"SELECT 'a', 'b' FROM JdbcUtf8 WHERE KEY = 'utf8'\");\n        for (ResultSet rs : new ResultSet[] { rs0, rs1 }) \n        {\n            assert rs.next();\n            assert rs.getString(\"a\").equals(\"aa\");\n            assert rs.getString(\"b\").equals(\"bb\");\n        }\n        \n        ResultSetMetaData md = rs0.getMetaData();\n        assert md.getColumnCount() == 2;\n        expectedMetaData(md, 1, String.class.getName(), \"JdbcAscii\", \"Keyspace1\", \"a\", Types.VARCHAR, AsciiType.class.getSimpleName(), false, true);\n        expectedMetaData(md, 2, String.class.getName(), \"JdbcAscii\", \"Keyspace1\", \"b\", Types.VARCHAR, AsciiType.class.getSimpleName(), false, true);\n        md = rs1.getMetaData();\n        assert md.getColumnCount() == 2;\n        expectedMetaData(md, 1, String.class.getName(), \"JdbcUtf8\", \"Keyspace1\", \"a\", Types.VARCHAR, UTF8Type.class.getSimpleName(), false, true);\n        expectedMetaData(md, 2, String.class.getName(), \"JdbcUtf8\", \"Keyspace1\", \"b\", Types.VARCHAR, UTF8Type.class.getSimpleName(), false, true);\n        \n        CassandraResultSetMetaData cmd0 = rs0.getMetaData().unwrap(CassandraResultSetMetaData.class);\n        CassandraResultSetMetaData cmd1 = rs1.getMetaData().unwrap(CassandraResultSetMetaData.class);\n        for (int i = 0; i < 2; i++)\n        {\n            expectedMetaData(cmd0, i+1,\n                    String.class.getName(), Types.VARCHAR, AsciiType.class.getSimpleName(), false, true,\n                    String.class.getName(), Types.VARCHAR, AsciiType.class.getSimpleName(), false, true);\n            expectedMetaData(cmd1, i+1,\n                    String.class.getName(), Types.VARCHAR, UTF8Type.class.getSimpleName(), false, true,\n                    String.class.getName(), Types.VARCHAR, UTF8Type.class.getSimpleName(), false, true);\n            \n        }\n    }","id":10349,"modified_method":"@Test\n    public void testStringMetadata() throws SQLException\n    {\n        String aKey = FBUtilities.bytesToHex(\"ascii\".getBytes());\n        String uKey = FBUtilities.bytesToHex(\"utf8\".getBytes());\n        Statement stmt = con.createStatement();\n        stmt.executeUpdate(\"UPDATE JdbcAscii SET 'a'='aa', 'b'='bb' WHERE KEY = '\" + aKey + \"'\");\n        stmt.executeUpdate(\"UPDATE JdbcUtf8 SET 'a'='aa', 'b'='bb' WHERE KEY = '\" + uKey + \"'\");\n        ResultSet rs0 = stmt.executeQuery(\"SELECT 'a', 'b' FROM JdbcAscii WHERE KEY = '\" + aKey + \"'\");\n        ResultSet rs1 = stmt.executeQuery(\"SELECT 'a', 'b' FROM JdbcUtf8 WHERE KEY = '\" + uKey + \"'\");\n        for (ResultSet rs : new ResultSet[] { rs0, rs1 }) \n        {\n            assert rs.next();\n            assert rs.getString(\"a\").equals(\"aa\");\n            assert rs.getString(\"b\").equals(\"bb\");\n        }\n        \n        ResultSetMetaData md = rs0.getMetaData();\n        assert md.getColumnCount() == 2;\n        expectedMetaData(md, 1, String.class.getName(), \"JdbcAscii\", \"Keyspace1\", \"a\", Types.VARCHAR, AsciiType.class.getSimpleName(), false, true);\n        expectedMetaData(md, 2, String.class.getName(), \"JdbcAscii\", \"Keyspace1\", \"b\", Types.VARCHAR, AsciiType.class.getSimpleName(), false, true);\n        md = rs1.getMetaData();\n        assert md.getColumnCount() == 2;\n        expectedMetaData(md, 1, String.class.getName(), \"JdbcUtf8\", \"Keyspace1\", \"a\", Types.VARCHAR, UTF8Type.class.getSimpleName(), false, true);\n        expectedMetaData(md, 2, String.class.getName(), \"JdbcUtf8\", \"Keyspace1\", \"b\", Types.VARCHAR, UTF8Type.class.getSimpleName(), false, true);\n        \n        CassandraResultSetMetaData cmd0 = rs0.getMetaData().unwrap(CassandraResultSetMetaData.class);\n        CassandraResultSetMetaData cmd1 = rs1.getMetaData().unwrap(CassandraResultSetMetaData.class);\n        for (int i = 0; i < 2; i++)\n        {\n            expectedMetaData(cmd0, i+1,\n                    String.class.getName(), Types.VARCHAR, AsciiType.class.getSimpleName(), false, true,\n                    String.class.getName(), Types.VARCHAR, AsciiType.class.getSimpleName(), false, true);\n            expectedMetaData(cmd1, i+1,\n                    String.class.getName(), Types.VARCHAR, UTF8Type.class.getSimpleName(), false, true,\n                    String.class.getName(), Types.VARCHAR, UTF8Type.class.getSimpleName(), false, true);\n            \n        }\n    }","commit_id":"8f6eee0eae78b265387805822b6477b348765500","url":"https://github.com/apache/cassandra"},{"original_method":"/** SetUp */\n    @BeforeClass\n    public static void startServer() throws Exception\n    {\n        startCassandraServer();\n        Class.forName(\"org.apache.cassandra.cql.jdbc.CassandraDriver\");\n        con = DriverManager.getConnection(\"jdbc:cassandra:root/root@localhost:9170/Keyspace1\");\n        String[] inserts = \n        {\n            String.format(\"UPDATE Standard1 SET '%s' = '%s', '%s' = '%s' WHERE KEY = 'jsmith'\", first, firstrec, last, lastrec),    \n            \"UPDATE JdbcInteger SET 1 = 11, 2 = 22 WHERE KEY = 'jsmith'\",\n            \"UPDATE JdbcInteger SET 3 = 33, 4 = 44 WHERE KEY = 'jsmith'\",\n            \"UPDATE JdbcLong SET 1 = 11, 2 = 22 WHERE KEY = 'jsmith'\",\n            \"UPDATE JdbcAscii SET 'first' = 'firstrec', 'last' = 'lastrec' WHERE key = 'jsmith'\",\n            String.format(\"UPDATE JdbcBytes SET '%s' = '%s', '%s' = '%s' WHERE key = 'jsmith'\", first, firstrec, last, lastrec),\n            \"UPDATE JdbcUtf8 SET 'first' = 'firstrec', 'last' = 'lastrec' WHERE key = 'jsmith'\",\n        };\n        for (String q : inserts)\n            executeNoResults(con, q);\n    }","id":10350,"modified_method":"/** SetUp */\n    @BeforeClass\n    public static void startServer() throws Exception\n    {\n        startCassandraServer();\n        Class.forName(\"org.apache.cassandra.cql.jdbc.CassandraDriver\");\n        con = DriverManager.getConnection(\"jdbc:cassandra:root/root@localhost:9170/Keyspace1\");\n        String[] inserts = \n        {\n            String.format(\"UPDATE Standard1 SET '%s' = '%s', '%s' = '%s' WHERE KEY = '%s'\", first, firstrec, last, lastrec, jsmith),    \n            \"UPDATE JdbcInteger SET 1 = 11, 2 = 22 WHERE KEY = '\" + jsmith + \"'\",\n            \"UPDATE JdbcInteger SET 3 = 33, 4 = 44 WHERE KEY = '\" + jsmith + \"'\",\n            \"UPDATE JdbcLong SET 1 = 11, 2 = 22 WHERE KEY = '\" + jsmith + \"'\",\n            \"UPDATE JdbcAscii SET 'first' = 'firstrec', 'last' = 'lastrec' WHERE key = '\" + jsmith + \"'\",\n            String.format(\"UPDATE JdbcBytes SET '%s' = '%s', '%s' = '%s' WHERE key = '%s'\", first, firstrec, last, lastrec, jsmith),\n            \"UPDATE JdbcUtf8 SET 'first' = 'firstrec', 'last' = 'lastrec' WHERE key = '\" + jsmith + \"'\",\n        };\n        for (String q : inserts)\n        {\n            try \n            {\n                executeNoResults(con, q);\n            }\n            catch (SQLException ex)\n            {\n                throw new AssertionError(ex.getMessage() + \", query:\" + q);\n            }\n        }\n    }","commit_id":"8f6eee0eae78b265387805822b6477b348765500","url":"https://github.com/apache/cassandra"},{"original_method":"/** Method to test statement. */\n    @Test\n    public void testWithStatement() throws SQLException\n    {\n        Statement stmt = con.createStatement();\n        \n        String selectQ = String.format(\"SELECT '%s', '%s' FROM Standard1 WHERE KEY='jsmith'\", first, last);\n        checkResultSet(stmt.executeQuery(selectQ), \"Bytes\", 1, first, last);\n        \n        selectQ = \"SELECT 1, 2 FROM JdbcInteger WHERE KEY='jsmith'\";\n        checkResultSet(stmt.executeQuery(selectQ), \"Int\", 1, \"1\", \"2\");\n        \n        selectQ = \"SELECT 3, 4 FROM JdbcInteger WHERE KEY='jsmith'\";\n        checkResultSet(stmt.executeQuery(selectQ), \"Int\", 1, \"3\", \"4\");\n        \n        selectQ = \"SELECT 1, 2, 3, 4 FROM JdbcInteger WHERE KEY='jsmith'\";\n        checkResultSet(stmt.executeQuery(selectQ), \"Int\", 1, \"1\", \"2\", \"3\", \"4\");\n        \n        selectQ = \"SELECT 1, 2 FROM JdbcLong WHERE KEY='jsmith'\";\n        checkResultSet(stmt.executeQuery(selectQ), \"Long\", 1, \"1\", \"2\");\n        \n        selectQ = \"SELECT 'first', 'last' FROM JdbcAscii WHERE KEY='jsmith'\";\n        checkResultSet(stmt.executeQuery(selectQ), \"String\", 1, \"first\", \"last\");\n        \n        selectQ = String.format(\"SELECT '%s', '%s' FROM JdbcBytes WHERE KEY='jsmith'\", first, last);\n        checkResultSet(stmt.executeQuery(selectQ), \"Bytes\", 1, first, last);\n        \n        selectQ = \"SELECT 'first', 'last' FROM JdbcUtf8 WHERE KEY='jsmith'\";\n        checkResultSet(stmt.executeQuery(selectQ), \"String\", 1, \"first\", \"last\");\n    }","id":10351,"modified_method":"/** Method to test statement. */\n    @Test\n    public void testWithStatement() throws SQLException\n    {\n        Statement stmt = con.createStatement();\n        \n        String selectQ = String.format(\"SELECT '%s', '%s' FROM Standard1 WHERE KEY='%s'\", first, last, jsmith);\n        checkResultSet(stmt.executeQuery(selectQ), \"Bytes\", 1, first, last);\n        \n        selectQ = \"SELECT 1, 2 FROM JdbcInteger WHERE KEY='\" + jsmith + \"'\";\n        checkResultSet(stmt.executeQuery(selectQ), \"Int\", 1, \"1\", \"2\");\n        \n        selectQ = \"SELECT 3, 4 FROM JdbcInteger WHERE KEY='\" + jsmith + \"'\";\n        checkResultSet(stmt.executeQuery(selectQ), \"Int\", 1, \"3\", \"4\");\n        \n        selectQ = \"SELECT 1, 2, 3, 4 FROM JdbcInteger WHERE KEY='\" + jsmith + \"'\";\n        checkResultSet(stmt.executeQuery(selectQ), \"Int\", 1, \"1\", \"2\", \"3\", \"4\");\n        \n        selectQ = \"SELECT 1, 2 FROM JdbcLong WHERE KEY='\" + jsmith + \"'\";\n        checkResultSet(stmt.executeQuery(selectQ), \"Long\", 1, \"1\", \"2\");\n        \n        selectQ = \"SELECT 'first', 'last' FROM JdbcAscii WHERE KEY='\" + jsmith + \"'\";\n        checkResultSet(stmt.executeQuery(selectQ), \"String\", 1, \"first\", \"last\");\n        \n        selectQ = String.format(\"SELECT '%s', '%s' FROM JdbcBytes WHERE KEY='%s'\", first, last, jsmith);\n        checkResultSet(stmt.executeQuery(selectQ), \"Bytes\", 1, first, last);\n        \n        selectQ = \"SELECT 'first', 'last' FROM JdbcUtf8 WHERE KEY='\" + jsmith + \"'\";\n        checkResultSet(stmt.executeQuery(selectQ), \"String\", 1, \"first\", \"last\");\n    }","commit_id":"8f6eee0eae78b265387805822b6477b348765500","url":"https://github.com/apache/cassandra"},{"original_method":"@Test \n    public void testIntegerMetadata() throws SQLException\n    {\n        Statement stmt = con.createStatement();\n        stmt.executeUpdate(\"UPDATE JdbcInteger SET 1=111, 2=222 WHERE KEY = 'Integer'\");\n        ResultSet rs = stmt.executeQuery(\"SELECT 1, 2 from JdbcInteger WHERE KEY = 'Integer'\");\n        assert rs.next();\n        assert rs.getInt(\"1\") == 111;\n        assert rs.getInt(\"2\") == 222;\n        \n        ResultSetMetaData md = rs.getMetaData();\n        assert md.getColumnCount() == 2;\n        expectedMetaData(md, 1, BigInteger.class.getName(), \"JdbcInteger\", \"Keyspace1\", \"1\", Types.BIGINT, IntegerType.class.getSimpleName(), true, false);\n        expectedMetaData(md, 2, BigInteger.class.getName(), \"JdbcInteger\", \"Keyspace1\", \"2\", Types.BIGINT, IntegerType.class.getSimpleName(), true, false);\n\n        CassandraResultSetMetaData cmd = md.unwrap(CassandraResultSetMetaData.class);\n        for (int i = 0; i < md.getColumnCount(); i++)\n            expectedMetaData(\n                    cmd, i+1, \n                    BigInteger.class.getName(), Types.BIGINT, IntegerType.class.getSimpleName(), true, false,\n                    BigInteger.class.getName(), Types.BIGINT, IntegerType.class.getSimpleName(), true, false);\n        \n    }","id":10352,"modified_method":"@Test \n    public void testIntegerMetadata() throws SQLException\n    {\n        String key = FBUtilities.bytesToHex(\"Integer\".getBytes());\n        Statement stmt = con.createStatement();\n        stmt.executeUpdate(\"UPDATE JdbcInteger SET 1=111, 2=222 WHERE KEY = '\" + key + \"'\");\n        ResultSet rs = stmt.executeQuery(\"SELECT 1, 2 from JdbcInteger WHERE KEY = '\" + key + \"'\");\n        assert rs.next();\n        assert rs.getInt(\"1\") == 111;\n        assert rs.getInt(\"2\") == 222;\n        \n        ResultSetMetaData md = rs.getMetaData();\n        assert md.getColumnCount() == 2;\n        expectedMetaData(md, 1, BigInteger.class.getName(), \"JdbcInteger\", \"Keyspace1\", \"1\", Types.BIGINT, IntegerType.class.getSimpleName(), true, false);\n        expectedMetaData(md, 2, BigInteger.class.getName(), \"JdbcInteger\", \"Keyspace1\", \"2\", Types.BIGINT, IntegerType.class.getSimpleName(), true, false);\n\n        CassandraResultSetMetaData cmd = md.unwrap(CassandraResultSetMetaData.class);\n        for (int i = 0; i < md.getColumnCount(); i++)\n            expectedMetaData(\n                    cmd, i+1, \n                    BigInteger.class.getName(), Types.BIGINT, IntegerType.class.getSimpleName(), true, false,\n                    BigInteger.class.getName(), Types.BIGINT, IntegerType.class.getSimpleName(), true, false);\n        \n    }","commit_id":"8f6eee0eae78b265387805822b6477b348765500","url":"https://github.com/apache/cassandra"},{"original_method":"/** Method to test with prepared statement.*/\n   @Test\n    public void testWithPreparedStatement() throws SQLException\n    {\n        String selectQ = String.format(\"SELECT '%s', '%s' FROM Standard1 WHERE KEY='jsmith'\", first, last);\n        checkResultSet(executePreparedStatementWithResults(con, selectQ), \"Bytes\", 1, first, last);\n        \n        selectQ = \"SELECT 1, 2 FROM JdbcInteger WHERE KEY='jsmith'\";\n        checkResultSet(executePreparedStatementWithResults(con, selectQ), \"Int\", 1, \"1\", \"2\");\n        \n        selectQ = \"SELECT 3, 4 FROM JdbcInteger WHERE KEY='jsmith'\";\n        checkResultSet(executePreparedStatementWithResults(con, selectQ), \"Int\", 1, \"3\", \"4\");\n        \n        selectQ = \"SELECT 1, 2, 3, 4 FROM JdbcInteger WHERE KEY='jsmith'\";\n        checkResultSet(executePreparedStatementWithResults(con, selectQ), \"Int\", 1, \"1\", \"2\", \"3\", \"4\");\n        \n        selectQ = \"SELECT 1, 2 FROM JdbcLong WHERE KEY='jsmith'\";\n        checkResultSet(executePreparedStatementWithResults(con, selectQ), \"Long\", 1, \"1\", \"2\");\n        \n        selectQ = \"SELECT 'first', 'last' FROM JdbcAscii WHERE KEY='jsmith'\";\n        checkResultSet(executePreparedStatementWithResults(con, selectQ), \"String\", 1, \"first\", \"last\");\n        \n        selectQ = String.format(\"SELECT '%s', '%s' FROM JdbcBytes WHERE KEY='jsmith'\", first, last);\n        checkResultSet(executePreparedStatementWithResults(con, selectQ), \"Bytes\", 1, first, last);\n        \n        selectQ = \"SELECT 'first', 'last' FROM JdbcUtf8 WHERE KEY='jsmith'\";\n        checkResultSet(executePreparedStatementWithResults(con, selectQ), \"String\", 1, \"first\", \"last\");\n    }","id":10353,"modified_method":"/** Method to test with prepared statement.*/\n   @Test\n    public void testWithPreparedStatement() throws SQLException\n    {\n        String selectQ = String.format(\"SELECT '%s', '%s' FROM Standard1 WHERE KEY='%s'\", first, last, jsmith);\n        checkResultSet(executePreparedStatementWithResults(con, selectQ), \"Bytes\", 1, first, last);\n        \n        selectQ = \"SELECT 1, 2 FROM JdbcInteger WHERE KEY='\" + jsmith + \"'\";\n        checkResultSet(executePreparedStatementWithResults(con, selectQ), \"Int\", 1, \"1\", \"2\");\n        \n        selectQ = \"SELECT 3, 4 FROM JdbcInteger WHERE KEY='\" + jsmith + \"'\";\n        checkResultSet(executePreparedStatementWithResults(con, selectQ), \"Int\", 1, \"3\", \"4\");\n        \n        selectQ = \"SELECT 1, 2, 3, 4 FROM JdbcInteger WHERE KEY='\" + jsmith + \"'\";\n        checkResultSet(executePreparedStatementWithResults(con, selectQ), \"Int\", 1, \"1\", \"2\", \"3\", \"4\");\n        \n        selectQ = \"SELECT 1, 2 FROM JdbcLong WHERE KEY='\" + jsmith + \"'\";\n        checkResultSet(executePreparedStatementWithResults(con, selectQ), \"Long\", 1, \"1\", \"2\");\n        \n        selectQ = \"SELECT 'first', 'last' FROM JdbcAscii WHERE KEY='\" + jsmith + \"'\";\n        checkResultSet(executePreparedStatementWithResults(con, selectQ), \"String\", 1, \"first\", \"last\");\n        \n        selectQ = String.format(\"SELECT '%s', '%s' FROM JdbcBytes WHERE KEY='%s'\", first, last, jsmith);\n        checkResultSet(executePreparedStatementWithResults(con, selectQ), \"Bytes\", 1, first, last);\n        \n        selectQ = \"SELECT 'first', 'last' FROM JdbcUtf8 WHERE KEY='\" + jsmith + \"'\";\n        checkResultSet(executePreparedStatementWithResults(con, selectQ), \"String\", 1, \"first\", \"last\");\n    }","commit_id":"8f6eee0eae78b265387805822b6477b348765500","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testBytesMetadata() throws SQLException \n    {\n        Statement stmt = con.createStatement();\n        byte[] a = \"a_\".getBytes();\n        byte[] b = \"b_\".getBytes();\n        byte[] aa = \"_aa_\".getBytes();\n        byte[] bb = \"_bb_\".getBytes();\n        stmt.executeUpdate(String.format(\n                \"UPDATE JdbcBytes set '%s'='%s', '%s'='%s' WHERE KEY = 'bytes'\",\n                FBUtilities.bytesToHex(a),\n                FBUtilities.bytesToHex(aa),\n                FBUtilities.bytesToHex(b),\n                FBUtilities.bytesToHex(bb)));\n        ResultSet rs = stmt.executeQuery(String.format(\n                \"SELECT '%s', '%s' from JdbcBytes WHERE KEY = 'bytes'\",\n                FBUtilities.bytesToHex(a),\n                FBUtilities.bytesToHex(b)));\n        assert rs.next();\n        assert Arrays.equals(aa, rs.getBytes(0));\n        assert Arrays.equals(bb, rs.getBytes(1));\n        assert Arrays.equals(aa, rs.getBytes(FBUtilities.bytesToHex(a)));\n        assert Arrays.equals(bb, rs.getBytes(FBUtilities.bytesToHex(b)));\n        ResultSetMetaData md = rs.getMetaData();\n        assert md.getColumnCount() == 2;\n        expectedMetaData(md, 1, ByteBuffer.class.getName(), \"JdbcBytes\", \"Keyspace1\", FBUtilities.bytesToHex(a), Types.BINARY, BytesType.class.getSimpleName(), false, false);\n        expectedMetaData(md, 2, ByteBuffer.class.getName(), \"JdbcBytes\", \"Keyspace1\", FBUtilities.bytesToHex(b), Types.BINARY, BytesType.class.getSimpleName(), false, false);\n        \n        CassandraResultSetMetaData cmd = md.unwrap(CassandraResultSetMetaData.class);\n        for (int i = 0; i < md.getColumnCount(); i++)\n            expectedMetaData(cmd, i+1,\n                    ByteBuffer.class.getName(), Types.BINARY, BytesType.class.getSimpleName(), false, false,\n                    ByteBuffer.class.getName(), Types.BINARY, BytesType.class.getSimpleName(), false, false);\n    }","id":10354,"modified_method":"@Test\n    public void testBytesMetadata() throws SQLException \n    {\n        String key = FBUtilities.bytesToHex(\"bytes\".getBytes());\n        Statement stmt = con.createStatement();\n        byte[] a = \"a_\".getBytes();\n        byte[] b = \"b_\".getBytes();\n        byte[] aa = \"_aa_\".getBytes();\n        byte[] bb = \"_bb_\".getBytes();\n        stmt.executeUpdate(String.format(\n                \"UPDATE JdbcBytes set '%s'='%s', '%s'='%s' WHERE KEY = '\" + key + \"'\",\n                FBUtilities.bytesToHex(a),\n                FBUtilities.bytesToHex(aa),\n                FBUtilities.bytesToHex(b),\n                FBUtilities.bytesToHex(bb)));\n        ResultSet rs = stmt.executeQuery(String.format(\n                \"SELECT '%s', '%s' from JdbcBytes WHERE KEY = '\" + key + \"'\",\n                FBUtilities.bytesToHex(a),\n                FBUtilities.bytesToHex(b)));\n        assert rs.next();\n        assert Arrays.equals(aa, rs.getBytes(0));\n        assert Arrays.equals(bb, rs.getBytes(1));\n        assert Arrays.equals(aa, rs.getBytes(FBUtilities.bytesToHex(a)));\n        assert Arrays.equals(bb, rs.getBytes(FBUtilities.bytesToHex(b)));\n        ResultSetMetaData md = rs.getMetaData();\n        assert md.getColumnCount() == 2;\n        expectedMetaData(md, 1, ByteBuffer.class.getName(), \"JdbcBytes\", \"Keyspace1\", FBUtilities.bytesToHex(a), Types.BINARY, BytesType.class.getSimpleName(), false, false);\n        expectedMetaData(md, 2, ByteBuffer.class.getName(), \"JdbcBytes\", \"Keyspace1\", FBUtilities.bytesToHex(b), Types.BINARY, BytesType.class.getSimpleName(), false, false);\n        \n        CassandraResultSetMetaData cmd = md.unwrap(CassandraResultSetMetaData.class);\n        for (int i = 0; i < md.getColumnCount(); i++)\n            expectedMetaData(cmd, i+1,\n                    ByteBuffer.class.getName(), Types.BINARY, BytesType.class.getSimpleName(), false, false,\n                    ByteBuffer.class.getName(), Types.BINARY, BytesType.class.getSimpleName(), false, false);\n    }","commit_id":"8f6eee0eae78b265387805822b6477b348765500","url":"https://github.com/apache/cassandra"},{"original_method":"@Test\n    public void testWithDeleteStatement() throws SQLException\n    {\n        // the pattern: 0) a deltion, 1) ensure deletion 2) ensure deletion wasn't over-eager.\n        String[] statements = \n        {\n                String.format(\"DELETE '%s', '%s' FROM Standard1 WHERE KEY='jsmith'\",\n                              FBUtilities.bytesToHex(\"firstN\".getBytes()),\n                              FBUtilities.bytesToHex(\"lastN\".getBytes())),\n                String.format(\"SELECT '%s', '%s' FROM Standard1 WHERE KEY='jsmith'\",\n                              FBUtilities.bytesToHex(\"firstN\".getBytes()),\n                              FBUtilities.bytesToHex(\"lastN\".getBytes())),\n                String.format(\"SELECT '%s' FROM Standard1 WHERE KEY='jsmith'\",\n                              first),\n                \n                \"DELETE 1, 3 FROM JdbcInteger WHERE KEY='jsmith'\",\n                \"SELECT 1, 3 FROM JdbcInteger WHERE KEY='jsmith'\", // fails.\n                \"SELECT 2, 4 FROM JdbcInteger WHERE KEY='jsmith'\",\n                \n                \"DELETE 1 FROM JdbcLong WHERE KEY='jsmith'\",\n                \"SELECT 1 FROM JdbcLong WHERE KEY='jsmith'\",\n                \"SELECT 2 FROM JdbcLong WHERE KEY='jsmith'\",\n                \n                \"DELETE 'first' FROM JdbcAscii WHERE KEY='jsmith'\",\n                \"SELECT 'first' FROM JdbcAscii WHERE KEY='jsmith'\",\n                \"SELECT 'last' FROM JdbcAscii WHERE KEY='jsmith'\",\n                \n                String.format(\"DELETE '%s' FROM JdbcBytes WHERE KEY='jsmith'\", first),\n                String.format(\"SELECT '%s' FROM JdbcBytes WHERE KEY='jsmith'\", first),\n                String.format(\"SELECT '%s' FROM JdbcBytes WHERE KEY='jsmith'\", last),\n                \n                \"DELETE 'first' FROM JdbcUtf8 WHERE KEY='jsmith'\",\n                \"SELECT 'first' FROM JdbcUtf8 WHERE KEY='jsmith'\",\n                \"SELECT 'last' FROM JdbcUtf8 WHERE KEY='jsmith'\",\n        };\n        \n        for (int i = 0; i < statements.length/3; i++) \n        {\n            executeNoResults(con, statements[3*i]);\n            ResultSet rs = executePreparedStatementWithResults(con, statements[3*i+1]);\n            assert !rs.next() : statements[3*i+1];\n            rs.close();\n            rs = executePreparedStatementWithResults(con, statements[3*i+2]);\n            assert rs.next() : statements[3*i+2];\n        }\n    }","id":10355,"modified_method":"@Test\n    public void testWithDeleteStatement() throws SQLException\n    {\n        // the pattern: 0) a deltion, 1) ensure deletion 2) ensure deletion wasn't over-eager.\n        String[] statements = \n        {\n                String.format(\"DELETE '%s', '%s' FROM Standard1 WHERE KEY='%s'\",\n                              FBUtilities.bytesToHex(\"firstN\".getBytes()),\n                              FBUtilities.bytesToHex(\"lastN\".getBytes()),\n                              jsmith),\n                String.format(\"SELECT '%s', '%s' FROM Standard1 WHERE KEY='%s'\",\n                              FBUtilities.bytesToHex(\"firstN\".getBytes()),\n                              FBUtilities.bytesToHex(\"lastN\".getBytes()),\n                              jsmith),\n                String.format(\"SELECT '%s' FROM Standard1 WHERE KEY='%s'\",\n                              first,\n                              jsmith),\n                \n                \"DELETE 1, 3 FROM JdbcInteger WHERE KEY='\" + jsmith + \"'\",\n                \"SELECT 1, 3 FROM JdbcInteger WHERE KEY='\" + jsmith + \"'\",\n                \"SELECT 2, 4 FROM JdbcInteger WHERE KEY='\" + jsmith + \"'\",\n                \n                \"DELETE 1 FROM JdbcLong WHERE KEY='\" + jsmith + \"'\",\n                \"SELECT 1 FROM JdbcLong WHERE KEY='\" + jsmith + \"'\",\n                \"SELECT 2 FROM JdbcLong WHERE KEY='\" + jsmith + \"'\",\n                \n                \"DELETE 'first' FROM JdbcAscii WHERE KEY='\" + jsmith + \"'\",\n                \"SELECT 'first' FROM JdbcAscii WHERE KEY='\" + jsmith + \"'\",\n                \"SELECT 'last' FROM JdbcAscii WHERE KEY='\" + jsmith + \"'\",\n                \n                String.format(\"DELETE '%s' FROM JdbcBytes WHERE KEY='%s'\", first, jsmith),\n                String.format(\"SELECT '%s' FROM JdbcBytes WHERE KEY='%s'\", first, jsmith),\n                String.format(\"SELECT '%s' FROM JdbcBytes WHERE KEY='%s'\", last, jsmith),\n                \n                \"DELETE 'first' FROM JdbcUtf8 WHERE KEY='\" + jsmith + \"'\",\n                \"SELECT 'first' FROM JdbcUtf8 WHERE KEY='\" + jsmith + \"'\",\n                \"SELECT 'last' FROM JdbcUtf8 WHERE KEY='\" + jsmith + \"'\",\n        };\n        \n        for (int i = 0; i < statements.length/3; i++) \n        {\n            executeNoResults(con, statements[3*i]);\n            ResultSet rs = executePreparedStatementWithResults(con, statements[3*i+1]);\n            assert !rs.next() : statements[3*i+1];\n            rs.close();\n            rs = executePreparedStatementWithResults(con, statements[3*i+2]);\n            assert rs.next() : statements[3*i+2];\n        }\n    }","commit_id":"8f6eee0eae78b265387805822b6477b348765500","url":"https://github.com/apache/cassandra"},{"original_method":"@SuppressForbidden(reason = \"system out is ok for a command line tool\")\n    public final void run(String[] args) throws Exception {\n        if (args.length < 6) {\n            System.err.println(\n                \"usage: benchmarkTargetHostIp indexFilePath indexName typeName numberOfDocuments bulkSize [search request body]\");\n            System.exit(1);\n        }\n        String benchmarkTargetHost = args[0];\n        String indexFilePath = args[1];\n        String indexName = args[2];\n        String typeName = args[3];\n        int totalDocs = Integer.valueOf(args[4]);\n        int bulkSize = Integer.valueOf(args[5]);\n\n        int totalIterationCount = (int) Math.floor(totalDocs / bulkSize);\n        // consider 40% of all iterations as warmup iterations\n        int warmupIterations = (int) (0.4d * totalIterationCount);\n        int iterations = totalIterationCount - warmupIterations;\n        String searchBody = (args.length == 7) ? args[6] : null;\n\n        T client = client(benchmarkTargetHost);\n\n        BenchmarkRunner benchmark = new BenchmarkRunner(warmupIterations, iterations,\n            new BulkBenchmarkTask(\n                bulkRequestExecutor(client, indexName, typeName), indexFilePath, warmupIterations + iterations, bulkSize));\n\n        try {\n            benchmark.run();\n            if (searchBody != null) {\n                for (int run = 1; run <= 5; run++) {\n                    System.out.println(\"=============\");\n                    System.out.println(\" Trial run \" + run);\n                    System.out.println(\"=============\");\n\n                    for (int throughput = 100; throughput <= 100_000; throughput *= 10) {\n                        //GC between trials to reduce the likelihood of a GC occurring in the middle of a trial.\n                        runGc();\n                        BenchmarkRunner searchBenchmark = new BenchmarkRunner(SEARCH_BENCHMARK_ITERATIONS, SEARCH_BENCHMARK_ITERATIONS,\n                            new SearchBenchmarkTask(\n                                searchRequestExecutor(client, indexName), searchBody, 2 * SEARCH_BENCHMARK_ITERATIONS, throughput));\n                        System.out.printf(\"Target throughput = %d ops / s%n\", throughput);\n                        searchBenchmark.run();\n                    }\n                }\n            }\n        } finally {\n            client.close();\n        }\n    }","id":10356,"modified_method":"@SuppressForbidden(reason = \"system out is ok for a command line tool\")\n    public final void run(String[] args) throws Exception {\n        if (args.length < 1) {\n            System.err.println(\"usage: [search|bulk]\");\n            System.exit(1);\n        }\n        switch (args[0]) {\n            case \"search\":\n                runSearchBenchmark(args);\n                break;\n            case \"bulk\":\n                runBulkIndexBenchmark(args);\n                break;\n            default:\n                System.err.println(\"Unknown benchmark type [\" + args[0] + \"]\");\n                System.exit(1);\n\n        }\n\n    }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@SuppressForbidden(reason = \"system out is ok for a command line tool\")\n    public static void main(String[] args) throws Exception {\n        String type = args[0];\n        AbstractBenchmark<?> benchmark = null;\n        switch (type) {\n            case \"transport\":\n                benchmark = new TransportClientBenchmark();\n                break;\n            case \"rest\":\n                benchmark = new RestClientBenchmark();\n                break;\n            default:\n                System.err.println(\"Unknown benchmark type [\" + type + \"]\");\n                System.exit(1);\n        }\n        benchmark.run(Arrays.copyOfRange(args, 1, args.length));\n    }","id":10357,"modified_method":"@SuppressForbidden(reason = \"system out is ok for a command line tool\")\n    public static void main(String[] args) throws Exception {\n        String type = args[0];\n        AbstractBenchmark<?> benchmark = null;\n        switch (type) {\n            case \"transport\":\n                benchmark = new TransportClientBenchmark();\n                break;\n            case \"rest\":\n                benchmark = new RestClientBenchmark();\n                break;\n            default:\n                System.err.println(\"Unknown client type [\" + type + \"]\");\n                System.exit(1);\n        }\n        benchmark.run(Arrays.copyOfRange(args, 1, args.length));\n    }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@SuppressForbidden(reason = \"system out is ok for a command line tool\")\n    public void run() throws Exception {\n        SampleRecorder recorder = new SampleRecorder(warmupIterations, iterations);\n        System.out.printf(\"Running %s with %d warmup iterations and %d iterations.%n\",\n            task.getClass().getSimpleName(), warmupIterations, iterations);\n\n        try {\n            task.setUp(recorder);\n            task.run();\n            task.tearDown();\n        } catch (InterruptedException ex) {\n            Thread.currentThread().interrupt();\n            return;\n        }\n\n        List<Sample> samples = recorder.getSamples();\n        final List<Metrics> summaryMetrics = MetricsCalculator.calculate(samples);\n\n        if (summaryMetrics.isEmpty()) {\n            System.out.println(\"No results.\");\n        }\n\n        for (Metrics metrics : summaryMetrics) {\n            System.out.printf(Locale.ROOT, \"Operation: %s%n\", metrics.operation);\n            String stats = String.format(Locale.ROOT,\n                \"Throughput = %f ops/s, p90 = %f ms, p95 = %f ms, p99 = %f ms, p99.9 = %f ms, p99.99 = %f ms\",\n                metrics.throughput,\n                metrics.serviceTimeP90, metrics.serviceTimeP95,\n                metrics.serviceTimeP99, metrics.serviceTimeP999,\n                metrics.serviceTimeP9999);\n            System.out.println(repeat(stats.length(), '-'));\n            System.out.println(stats);\n            System.out.printf(\"success count = %d, error count = %d%n\", metrics.successCount, metrics.errorCount);\n            System.out.println(repeat(stats.length(), '-'));\n        }\n    }","id":10358,"modified_method":"@SuppressForbidden(reason = \"system out is ok for a command line tool\")\n    public void run() {\n        SampleRecorder recorder = new SampleRecorder(iterations);\n        System.out.printf(\"Running %s with %d warmup iterations and %d iterations.%n\",\n            task.getClass().getSimpleName(), warmupIterations, iterations);\n\n        try {\n            task.setUp(recorder);\n            task.run();\n            task.tearDown();\n        } catch (InterruptedException ex) {\n            Thread.currentThread().interrupt();\n            return;\n        } catch (Exception ex) {\n            throw new RuntimeException(ex);\n        }\n\n        List<Sample> samples = recorder.getSamples();\n        final List<Metrics> summaryMetrics = MetricsCalculator.calculate(samples);\n\n        if (summaryMetrics.isEmpty()) {\n            System.out.println(\"No results.\");\n        }\n\n        for (Metrics metrics : summaryMetrics) {\n            String throughput = String.format(Locale.ROOT, \"Throughput [ops/s]: %f\", metrics.throughput);\n            String serviceTimes = String.format(Locale.ROOT,\n                \"Service time [ms]: p50 = %f, p90 = %f, p95 = %f, p99 = %f, p99.9 = %f, p99.99 = %f\",\n                metrics.serviceTimeP50, metrics.serviceTimeP90, metrics.serviceTimeP95,\n                metrics.serviceTimeP99, metrics.serviceTimeP999, metrics.serviceTimeP9999);\n            String latencies = String.format(Locale.ROOT,\n                \"Latency [ms]:      p50 = %f, p90 = %f, p95 = %f, p99 = %f, p99.9 = %f, p99.99 = %f\",\n                metrics.latencyP50, metrics.latencyP90, metrics.latencyP95,\n                metrics.latencyP99, metrics.latencyP999, metrics.latencyP9999);\n\n            int lineLength = Math.max(serviceTimes.length(), latencies.length());\n\n            System.out.println(repeat(lineLength, '-'));\n            System.out.println(throughput);\n            System.out.println(serviceTimes);\n            System.out.println(latencies);\n            System.out.printf(\"success count = %d, error count = %d%n\", metrics.successCount, metrics.errorCount);\n            System.out.println(repeat(lineLength, '-'));\n        }\n    }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public BulkBenchmarkTask(BulkRequestExecutor requestExecutor, String indexFilePath, int totalIterations, int bulkSize) {\n        this.requestExecutor = requestExecutor;\n        this.indexFilePath = indexFilePath;\n        this.totalIterations = totalIterations;\n        this.bulkSize = bulkSize;\n    }","id":10359,"modified_method":"public BulkBenchmarkTask(BulkRequestExecutor requestExecutor, String indexFilePath, int warmupIterations, int measurementIterations,\n                             int bulkSize) {\n        this.requestExecutor = requestExecutor;\n        this.indexFilePath = indexFilePath;\n        this.warmupIterations = warmupIterations;\n        this.measurementIterations = measurementIterations;\n        this.bulkSize = bulkSize;\n    }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n        public void run() {\n            for (int iteration = 0; iteration < totalIterations; iteration++) {\n                boolean success = false;\n                List<String> currentBulk;\n                try {\n                    currentBulk = bulkData.take();\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    return;\n                }\n                // Yes, this approach is prone to coordinated omission *but* we have to consider that we want to benchmark a closed system\n                // with backpressure here instead of an open system. So this is actually correct in this case.\n                long start = System.nanoTime();\n                try {\n                    success = bulkRequestExecutor.bulkIndex(currentBulk);\n                } catch (Exception ex) {\n                    logger.warn(\"Error while executing bulk request\", ex);\n                }\n                long stop = System.nanoTime();\n                sampleRecorder.addSample(new Sample(\"bulk\", start, stop, success));\n            }\n        }","id":10360,"modified_method":"@Override\n        public void run() {\n            for (int iteration = 0; iteration < warmupIterations + measurementIterations; iteration++) {\n                boolean success = false;\n                List<String> currentBulk;\n                try {\n                    currentBulk = bulkData.take();\n                } catch (InterruptedException e) {\n                    Thread.currentThread().interrupt();\n                    return;\n                }\n                //measure only service time, latency is not that interesting for a throughput benchmark\n                long start = System.nanoTime();\n                try {\n                    success = bulkRequestExecutor.bulkIndex(currentBulk);\n                } catch (Exception ex) {\n                    logger.warn(\"Error while executing bulk request\", ex);\n                }\n                long stop = System.nanoTime();\n                if (iteration < warmupIterations) {\n                    sampleRecorder.addSample(new Sample(\"bulk\", start, start, stop, success));\n                }\n            }\n        }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    @SuppressForbidden(reason = \"PathUtils#get is fine - we don't have environment here\")\n    public void setUp(SampleRecorder sampleRecorder) {\n        BlockingQueue<List<String>> bulkQueue = new ArrayBlockingQueue<>(256);\n\n        BulkIndexer runner = new BulkIndexer(bulkQueue, totalIterations, sampleRecorder, requestExecutor);\n\n        executorService = Executors.newSingleThreadExecutor((r) -> new Thread(r, \"bulk-index-runner\"));\n        executorService.submit(runner);\n\n        generator = new LoadGenerator(PathUtils.get(indexFilePath), bulkQueue, bulkSize);\n    }","id":10361,"modified_method":"@Override\n    @SuppressForbidden(reason = \"PathUtils#get is fine - we don't have environment here\")\n    public void setUp(SampleRecorder sampleRecorder) {\n        BlockingQueue<List<String>> bulkQueue = new ArrayBlockingQueue<>(256);\n\n        BulkIndexer runner = new BulkIndexer(bulkQueue, warmupIterations, measurementIterations, sampleRecorder, requestExecutor);\n\n        executorService = Executors.newSingleThreadExecutor((r) -> new Thread(r, \"bulk-index-runner\"));\n        executorService.submit(runner);\n\n        generator = new LoadGenerator(PathUtils.get(indexFilePath), bulkQueue, bulkSize);\n    }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public BulkIndexer(BlockingQueue<List<String>> bulkData, int totalIterations, SampleRecorder sampleRecorder,\n                           BulkRequestExecutor bulkRequestExecutor) {\n            this.bulkData = bulkData;\n            this.totalIterations = totalIterations;\n            this.bulkRequestExecutor = bulkRequestExecutor;\n            this.sampleRecorder = sampleRecorder;\n        }","id":10362,"modified_method":"public BulkIndexer(BlockingQueue<List<String>> bulkData, int warmupIterations, int measurementIterations,\n                           SampleRecorder sampleRecorder, BulkRequestExecutor bulkRequestExecutor) {\n            this.bulkData = bulkData;\n            this.warmupIterations = warmupIterations;\n            this.measurementIterations = measurementIterations;\n            this.bulkRequestExecutor = bulkRequestExecutor;\n            this.sampleRecorder = sampleRecorder;\n        }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public Metrics(String operation, long successCount, long errorCount, double throughput,\n                   double serviceTimeP90, double serviceTimeP95, double serviceTimeP99,\n                   double serviceTimeP999, double serviceTimeP9999) {\n        this.operation = operation;\n        this.successCount = successCount;\n        this.errorCount = errorCount;\n        this.throughput = throughput;\n        this.serviceTimeP90 = serviceTimeP90;\n        this.serviceTimeP95 = serviceTimeP95;\n        this.serviceTimeP99 = serviceTimeP99;\n        this.serviceTimeP999 = serviceTimeP999;\n        this.serviceTimeP9999 = serviceTimeP9999;\n    }","id":10363,"modified_method":"public Metrics(String operation, long successCount, long errorCount, double throughput,\n                   double serviceTimeP50, double serviceTimeP90, double serviceTimeP95, double serviceTimeP99,\n                   double serviceTimeP999, double serviceTimeP9999, double latencyP50, double latencyP90,\n                   double latencyP95, double latencyP99, double latencyP999, double latencyP9999) {\n        this.operation = operation;\n        this.successCount = successCount;\n        this.errorCount = errorCount;\n        this.throughput = throughput;\n        this.serviceTimeP50 = serviceTimeP50;\n        this.serviceTimeP90 = serviceTimeP90;\n        this.serviceTimeP95 = serviceTimeP95;\n        this.serviceTimeP99 = serviceTimeP99;\n        this.serviceTimeP999 = serviceTimeP999;\n        this.serviceTimeP9999 = serviceTimeP9999;\n        this.latencyP50 = latencyP50;\n        this.latencyP90 = latencyP90;\n        this.latencyP95 = latencyP95;\n        this.latencyP99 = latencyP99;\n        this.latencyP999 = latencyP999;\n        this.latencyP9999 = latencyP9999;\n    }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private static List<Metrics> calculateMetricsPerOperation(Map<String, List<Sample>> samplesPerOperation) {\n        List<Metrics> metrics = new ArrayList<>();\n        for (Map.Entry<String, List<Sample>> operationAndMetrics : samplesPerOperation.entrySet()) {\n            List<Sample> samples = operationAndMetrics.getValue();\n            double[] serviceTimes = new double[samples.size()];\n            int it = 0;\n            long firstStart = Long.MAX_VALUE;\n            long latestEnd = Long.MIN_VALUE;\n            for (Sample sample : samples) {\n                firstStart = Math.min(sample.getStartTimestamp(), firstStart);\n                latestEnd = Math.max(sample.getStopTimestamp(), latestEnd);\n                serviceTimes[it++] = sample.getServiceTime();\n            }\n\n            metrics.add(new Metrics(operationAndMetrics.getKey(),\n                samples.stream().filter((r) -> r.isSuccess()).count(),\n                samples.stream().filter((r) -> !r.isSuccess()).count(),\n                // throughput calculation is based on the total (Wall clock) time it took to generate all samples\n                calculateThroughput(samples.size(), latestEnd - firstStart),\n                // convert ns -> ms without losing precision\n                StatUtils.percentile(serviceTimes, 90.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                StatUtils.percentile(serviceTimes, 95.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                StatUtils.percentile(serviceTimes, 99.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                StatUtils.percentile(serviceTimes, 99.9d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                StatUtils.percentile(serviceTimes, 99.99d) / TimeUnit.MILLISECONDS.toNanos(1L)));\n        }\n        return metrics;\n    }","id":10364,"modified_method":"private static List<Metrics> calculateMetricsPerOperation(Map<String, List<Sample>> samplesPerOperation) {\n        List<Metrics> metrics = new ArrayList<>();\n        for (Map.Entry<String, List<Sample>> operationAndMetrics : samplesPerOperation.entrySet()) {\n            List<Sample> samples = operationAndMetrics.getValue();\n            double[] serviceTimes = new double[samples.size()];\n            double[] latencies = new double[samples.size()];\n            int it = 0;\n            long firstStart = Long.MAX_VALUE;\n            long latestEnd = Long.MIN_VALUE;\n            for (Sample sample : samples) {\n                firstStart = Math.min(sample.getStartTimestamp(), firstStart);\n                latestEnd = Math.max(sample.getStopTimestamp(), latestEnd);\n                serviceTimes[it] = sample.getServiceTime();\n                latencies[it] = sample.getLatency();\n                it++;\n            }\n\n            metrics.add(new Metrics(operationAndMetrics.getKey(),\n                samples.stream().filter((r) -> r.isSuccess()).count(),\n                samples.stream().filter((r) -> !r.isSuccess()).count(),\n                // throughput calculation is based on the total (Wall clock) time it took to generate all samples\n                calculateThroughput(samples.size(), latestEnd - firstStart),\n                // convert ns -> ms without losing precision\n                StatUtils.percentile(serviceTimes, 50.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                StatUtils.percentile(serviceTimes, 90.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                StatUtils.percentile(serviceTimes, 95.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                StatUtils.percentile(serviceTimes, 99.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                StatUtils.percentile(serviceTimes, 99.9d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                StatUtils.percentile(serviceTimes, 99.99d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                StatUtils.percentile(latencies, 50.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                StatUtils.percentile(latencies, 90.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                StatUtils.percentile(latencies, 95.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                StatUtils.percentile(latencies, 99.0d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                StatUtils.percentile(latencies, 99.9d) / TimeUnit.MILLISECONDS.toNanos(1L),\n                StatUtils.percentile(latencies, 99.99d) / TimeUnit.MILLISECONDS.toNanos(1L)));\n        }\n        return metrics;\n    }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n        public boolean bulkIndex(List<String> bulkData) {\n            StringBuilder bulkRequestBody = new StringBuilder();\n            for (String bulkItem : bulkData) {\n                bulkRequestBody.append(actionMetaData);\n                bulkRequestBody.append(bulkItem);\n                bulkRequestBody.append(\"\\n\");\n            }\n            HttpEntity entity = new NStringEntity(bulkRequestBody.toString(), ContentType.APPLICATION_JSON);\n            try {\n                Response response = client.performRequest(\"POST\", \"/geonames/type/_bulk\", Collections.emptyMap(), entity);\n                return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK;\n            } catch (Exception e) {\n                throw new ElasticsearchException(e);\n            }\n        }","id":10365,"modified_method":"@Override\n        public boolean bulkIndex(List<String> bulkData) {\n            StringBuilder bulkRequestBody = new StringBuilder();\n            for (String bulkItem : bulkData) {\n                bulkRequestBody.append(actionMetaData);\n                bulkRequestBody.append(bulkItem);\n                bulkRequestBody.append(\"\\n\");\n            }\n            HttpEntity entity = new NStringEntity(bulkRequestBody.toString(), ContentType.APPLICATION_JSON);\n            try {\n                Response response = client.performRequest(\"POST\", \"/geonames/type/_noop_bulk\", Collections.emptyMap(), entity);\n                return response.getStatusLine().getStatusCode() == HttpStatus.SC_OK;\n            } catch (Exception e) {\n                throw new ElasticsearchException(e);\n            }\n        }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected RestClient client(String benchmarkTargetHost) {\n        return RestClient.builder(new HttpHost(benchmarkTargetHost, 9200)).build();\n    }","id":10366,"modified_method":"@Override\n    protected RestClient client(String benchmarkTargetHost) {\n        return RestClient\n            .builder(new HttpHost(benchmarkTargetHost, 9200))\n            .setHttpClientConfigCallback(b -> b.setDefaultHeaders(\n                Collections.singleton(new BasicHeader(HttpHeaders.ACCEPT_ENCODING, \"gzip\"))))\n            .setRequestConfigCallback(b -> b.setContentCompressionEnabled(true))\n            .build();\n    }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private RestSearchRequestExecutor(RestClient client, String indexName) {\n            this.client = client;\n            this.endpoint = \"/\" + indexName + \"/_search\";\n        }","id":10367,"modified_method":"private RestSearchRequestExecutor(RestClient client, String indexName) {\n            this.client = client;\n            this.endpoint = \"/\" + indexName + \"/_noop_search\";\n        }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public Sample(String operation, long startTimestamp, long stopTimestamp, boolean success) {\n        this.operation = operation;\n        this.startTimestamp = startTimestamp;\n        this.stopTimestamp = stopTimestamp;\n        this.success = success;\n    }","id":10368,"modified_method":"public Sample(String operation, long expectedStartTimestamp, long startTimestamp, long stopTimestamp, boolean success) {\n        this.operation = operation;\n        this.expectedStartTimestamp = expectedStartTimestamp;\n        this.startTimestamp = startTimestamp;\n        this.stopTimestamp = stopTimestamp;\n        this.success = success;\n    }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void addSample(Sample sample) {\n        currentIteration++;\n        // only add samples after warmup\n        if (currentIteration > warmupIterations) {\n            samples.add(sample);\n        }\n    }","id":10369,"modified_method":"public void addSample(Sample sample) {\n        samples.add(sample);\n    }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public SampleRecorder(int warmupIterations, int iterations) {\n        this.warmupIterations = warmupIterations;\n        this.samples = new ArrayList<>(iterations);\n    }","id":10370,"modified_method":"public SampleRecorder(int iterations) {\n        this.samples = new ArrayList<>(iterations);\n    }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public SearchBenchmarkTask(SearchRequestExecutor searchRequestExecutor, String body, int iterations, int targetThroughput) {\n        this.searchRequestExecutor = searchRequestExecutor;\n        this.searchRequestBody = body;\n        this.iterations = iterations;\n        this.targetThroughput = targetThroughput;\n    }","id":10371,"modified_method":"public SearchBenchmarkTask(SearchRequestExecutor searchRequestExecutor, String body, int warmupIterations,\n                               int measurementIterations, int targetThroughput) {\n        this.searchRequestExecutor = searchRequestExecutor;\n        this.searchRequestBody = body;\n        this.warmupIterations = warmupIterations;\n        this.measurementIterations = measurementIterations;\n        this.targetThroughput = targetThroughput;\n    }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    public void run() throws Exception {\n        for (int iteration = 0; iteration < this.iterations; iteration++) {\n            final long start = System.nanoTime();\n            boolean success = searchRequestExecutor.search(searchRequestBody);\n            final long stop = System.nanoTime();\n            sampleRecorder.addSample(new Sample(\"search\", start, stop, success));\n\n            int waitTime = (int) Math.floor(MICROS_PER_SEC / targetThroughput - (stop - start) / NANOS_PER_MICRO);\n            if (waitTime > 0) {\n                waitMicros(waitTime);\n            }\n        }\n    }","id":10372,"modified_method":"@Override\n    public void run() throws Exception {\n        runIterations(warmupIterations, false);\n        runIterations(measurementIterations, true);\n    }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected TransportClient client(String benchmarkTargetHost) throws Exception {\n        TransportClient client = new PreBuiltTransportClient(Settings.EMPTY);\n        client.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(benchmarkTargetHost), 9300));\n        return client;\n    }","id":10373,"modified_method":"@Override\n    protected TransportClient client(String benchmarkTargetHost) throws Exception {\n        TransportClient client = new PreBuiltTransportClient(Settings.EMPTY, NoopPlugin.class);\n        client.addTransportAddress(new InetSocketTransportAddress(InetAddress.getByName(benchmarkTargetHost), 9300));\n        return client;\n    }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n        public boolean search(String source) {\n            final SearchResponse response;\n            try {\n                response = client.prepareSearch(indexName).setQuery(QueryBuilders.wrapperQuery(source)).execute().get();\n                return response.status() == RestStatus.OK;\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                return false;\n            } catch (ExecutionException e) {\n                throw new ElasticsearchException(e);\n            }\n        }","id":10374,"modified_method":"@Override\n        public boolean search(String source) {\n            final SearchResponse response;\n            NoopSearchRequestBuilder builder = NoopSearchAction.INSTANCE.newRequestBuilder(client);\n            try {\n                builder.setIndices(indexName);\n                builder.setQuery(QueryBuilders.wrapperQuery(source));\n                response = client.execute(NoopSearchAction.INSTANCE, builder.request()).get();\n                return response.status() == RestStatus.OK;\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                return false;\n            } catch (ExecutionException e) {\n                throw new ElasticsearchException(e);\n            }\n        }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n        public boolean bulkIndex(List<String> bulkData) {\n            BulkRequestBuilder builder = client.prepareBulk();\n            for (String bulkItem : bulkData) {\n                builder.add(new IndexRequest(indexName, typeName).source(bulkItem.getBytes(StandardCharsets.UTF_8)));\n            }\n            BulkResponse bulkResponse;\n            try {\n                bulkResponse = builder.execute().get();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                return false;\n            } catch (ExecutionException e) {\n                throw new ElasticsearchException(e);\n            }\n            return !bulkResponse.hasFailures();\n        }","id":10375,"modified_method":"@Override\n        public boolean bulkIndex(List<String> bulkData) {\n            NoopBulkRequestBuilder builder = NoopBulkAction.INSTANCE.newRequestBuilder(client);\n            for (String bulkItem : bulkData) {\n                builder.add(new IndexRequest(indexName, typeName).source(bulkItem.getBytes(StandardCharsets.UTF_8)));\n            }\n            BulkResponse bulkResponse;\n            try {\n                bulkResponse = builder.execute().get();\n            } catch (InterruptedException e) {\n                Thread.currentThread().interrupt();\n                return false;\n            } catch (ExecutionException e) {\n                throw new ElasticsearchException(e);\n            }\n            return !bulkResponse.hasFailures();\n        }","commit_id":"7b81c4ca59fb209cecc87b3a4ea482faa3c88518","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void setUseAnt(boolean useAnt) {\n        this.useAnt = useAnt;\n    }","id":10376,"modified_method":"public void setUseAnt(boolean useAnt) {\n        this.useAnt = useAnt;\n        if (!useAnt) {\n            setFork(true);\n        }\n    }","commit_id":"8ff0a58854953e01a934b8e2049925a96e4a3d7b","url":"https://github.com/gradle/gradle"},{"original_method":"public org.gradle.api.internal.tasks.compile.Compiler<ScalaJavaJointCompileSpec> create(ScalaCompileOptions scalaOptions, CompileOptions javaOptions) {\n        if (scalaOptions.isUseAnt()) {\n            Compiler<ScalaCompileSpec> scalaCompiler = new AntScalaCompiler(antBuilder);\n            Compiler<JavaCompileSpec> javaCompiler = new AntJavaCompiler(antBuilderFactory);\n            return new DefaultScalaJavaJointCompiler(scalaCompiler, javaCompiler);\n        }\n\n        // for now, we leave it to ZincScalaCompiler to also compile the Java code\n        Compiler<ScalaJavaJointCompileSpec> scalaCompiler;\n        try {\n            scalaCompiler = (Compiler<ScalaJavaJointCompileSpec>) getClass().getClassLoader().loadClass(\"org.gradle.api.internal.tasks.scala.jdk6.ZincScalaCompiler\").newInstance();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to dynamically load ZincScalaCompiler\", e);\n        }\n        CompilerDaemonFactory daemonFactory;\n        if (scalaOptions.isFork()) {\n            daemonFactory = CompilerDaemonManager.getInstance();\n        } else {\n            daemonFactory = InProcessCompilerDaemonFactory.getInstance();\n        }\n        scalaCompiler = new DaemonScalaCompiler(project, scalaCompiler, daemonFactory);\n        return new NormalizingScalaCompiler(scalaCompiler);\n    }","id":10377,"modified_method":"public org.gradle.api.internal.tasks.compile.Compiler<ScalaJavaJointCompileSpec> create(ScalaCompileOptions scalaOptions, CompileOptions javaOptions) {\n        if (scalaOptions.isUseAnt()) {\n            Compiler<ScalaCompileSpec> scalaCompiler = new AntScalaCompiler(antBuilder);\n            Compiler<JavaCompileSpec> javaCompiler = new AntJavaCompiler(antBuilderFactory);\n            return new DefaultScalaJavaJointCompiler(scalaCompiler, javaCompiler);\n        }\n\n        if (!scalaOptions.isFork()) {\n            throw new GradleException(\"The Zinc based Scala compiler ('scalaCompileOptions.useAnt=false') \"\n                    + \"requires forking ('scalaCompileOptions.fork=true'), but the latter is set to 'false'.\");\n        }\n\n        // currently, we leave it to ZincScalaCompiler to also compile the Java code\n        Compiler<ScalaJavaJointCompileSpec> scalaCompiler;\n        try {\n            scalaCompiler = (Compiler<ScalaJavaJointCompileSpec>) getClass().getClassLoader()\n                    .loadClass(\"org.gradle.api.internal.tasks.scala.jdk6.ZincScalaCompiler\").newInstance();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Internal error: Failed to load org.gradle.api.internal.tasks.scala.jdk6.ZincScalaCompiler\", e);\n        }\n\n        CompilerDaemonFactory daemonFactory = CompilerDaemonManager.getInstance();\n        scalaCompiler = new DaemonScalaCompiler(project, scalaCompiler, daemonFactory);\n        return new NormalizingScalaCompiler(scalaCompiler);\n    }","commit_id":"8ff0a58854953e01a934b8e2049925a96e4a3d7b","url":"https://github.com/gradle/gradle"},{"original_method":"public void setUseAnt(boolean useAnt) {\n        this.useAnt = useAnt;\n    }","id":10378,"modified_method":"public void setUseAnt(boolean useAnt) {\n        this.useAnt = useAnt;\n        if (!useAnt) {\n            setFork(true);\n        }\n    }","commit_id":"8f8b7b4ae671e68855fc54cbc69f33b3aa4e6de4","url":"https://github.com/gradle/gradle"},{"original_method":"public org.gradle.api.internal.tasks.compile.Compiler<ScalaJavaJointCompileSpec> create(ScalaCompileOptions scalaOptions, CompileOptions javaOptions) {\n        if (scalaOptions.isUseAnt()) {\n            Compiler<ScalaCompileSpec> scalaCompiler = new AntScalaCompiler(antBuilder);\n            Compiler<JavaCompileSpec> javaCompiler = new AntJavaCompiler(antBuilderFactory);\n            return new DefaultScalaJavaJointCompiler(scalaCompiler, javaCompiler);\n        }\n\n        // for now, we leave it to ZincScalaCompiler to also compile the Java code\n        Compiler<ScalaJavaJointCompileSpec> scalaCompiler;\n        try {\n            scalaCompiler = (Compiler<ScalaJavaJointCompileSpec>) getClass().getClassLoader().loadClass(\"org.gradle.api.internal.tasks.scala.jdk6.ZincScalaCompiler\").newInstance();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to dynamically load ZincScalaCompiler\", e);\n        }\n        CompilerDaemonFactory daemonFactory;\n        if (scalaOptions.isFork()) {\n            daemonFactory = CompilerDaemonManager.getInstance();\n        } else {\n            daemonFactory = InProcessCompilerDaemonFactory.getInstance();\n        }\n        scalaCompiler = new DaemonScalaCompiler(project, scalaCompiler, daemonFactory);\n        return new NormalizingScalaCompiler(scalaCompiler);\n    }","id":10379,"modified_method":"public org.gradle.api.internal.tasks.compile.Compiler<ScalaJavaJointCompileSpec> create(ScalaCompileOptions scalaOptions, CompileOptions javaOptions) {\n        if (scalaOptions.isUseAnt()) {\n            Compiler<ScalaCompileSpec> scalaCompiler = new AntScalaCompiler(antBuilder);\n            Compiler<JavaCompileSpec> javaCompiler = new AntJavaCompiler(antBuilderFactory);\n            return new DefaultScalaJavaJointCompiler(scalaCompiler, javaCompiler);\n        }\n\n        if (!scalaOptions.isFork()) {\n            throw new GradleException(\"The Zinc based Scala compiler ('scalaCompileOptions.useAnt=false') \"\n                    + \"requires forking ('scalaCompileOptions.fork=true'), but the latter is set to 'false'.\");\n        }\n\n        // currently, we leave it to ZincScalaCompiler to also compile the Java code\n        Compiler<ScalaJavaJointCompileSpec> scalaCompiler;\n        try {\n            scalaCompiler = (Compiler<ScalaJavaJointCompileSpec>) getClass().getClassLoader()\n                    .loadClass(\"org.gradle.api.internal.tasks.scala.jdk6.ZincScalaCompiler\").newInstance();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Internal error: Failed to load org.gradle.api.internal.tasks.scala.jdk6.ZincScalaCompiler\", e);\n        }\n\n        CompilerDaemonFactory daemonFactory = CompilerDaemonManager.getInstance();\n        scalaCompiler = new DaemonScalaCompiler(project, scalaCompiler, daemonFactory);\n        return new NormalizingScalaCompiler(scalaCompiler);\n    }","commit_id":"8f8b7b4ae671e68855fc54cbc69f33b3aa4e6de4","url":"https://github.com/gradle/gradle"},{"original_method":"public void setUseAnt(boolean useAnt) {\n        this.useAnt = useAnt;\n    }","id":10380,"modified_method":"public void setUseAnt(boolean useAnt) {\n        this.useAnt = useAnt;\n        if (!useAnt) {\n            setFork(true);\n        }\n    }","commit_id":"0fc922218130d79439db58730da23def20ee38e2","url":"https://github.com/gradle/gradle"},{"original_method":"public org.gradle.api.internal.tasks.compile.Compiler<ScalaJavaJointCompileSpec> create(ScalaCompileOptions scalaOptions, CompileOptions javaOptions) {\n        if (scalaOptions.isUseAnt()) {\n            Compiler<ScalaCompileSpec> scalaCompiler = new AntScalaCompiler(antBuilder);\n            Compiler<JavaCompileSpec> javaCompiler = new AntJavaCompiler(antBuilderFactory);\n            return new DefaultScalaJavaJointCompiler(scalaCompiler, javaCompiler);\n        }\n\n        // for now, we leave it to ZincScalaCompiler to also compile the Java code\n        Compiler<ScalaJavaJointCompileSpec> scalaCompiler;\n        try {\n            scalaCompiler = (Compiler<ScalaJavaJointCompileSpec>) getClass().getClassLoader().loadClass(\"org.gradle.api.internal.tasks.scala.jdk6.ZincScalaCompiler\").newInstance();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Failed to dynamically load ZincScalaCompiler\", e);\n        }\n        CompilerDaemonFactory daemonFactory;\n        if (scalaOptions.isFork()) {\n            daemonFactory = CompilerDaemonManager.getInstance();\n        } else {\n            daemonFactory = InProcessCompilerDaemonFactory.getInstance();\n        }\n        scalaCompiler = new DaemonScalaCompiler(project, scalaCompiler, daemonFactory);\n        return new NormalizingScalaCompiler(scalaCompiler);\n    }","id":10381,"modified_method":"public org.gradle.api.internal.tasks.compile.Compiler<ScalaJavaJointCompileSpec> create(ScalaCompileOptions scalaOptions, CompileOptions javaOptions) {\n        if (scalaOptions.isUseAnt()) {\n            Compiler<ScalaCompileSpec> scalaCompiler = new AntScalaCompiler(antBuilder);\n            Compiler<JavaCompileSpec> javaCompiler = new AntJavaCompiler(antBuilderFactory);\n            return new DefaultScalaJavaJointCompiler(scalaCompiler, javaCompiler);\n        }\n\n        if (!scalaOptions.isFork()) {\n            throw new GradleException(\"The Zinc based Scala compiler ('scalaCompileOptions.useAnt=false') \"\n                    + \"requires forking ('scalaCompileOptions.fork=true'), but the latter is set to 'false'.\");\n        }\n\n        // currently, we leave it to ZincScalaCompiler to also compile the Java code\n        Compiler<ScalaJavaJointCompileSpec> scalaCompiler;\n        try {\n            scalaCompiler = (Compiler<ScalaJavaJointCompileSpec>) getClass().getClassLoader()\n                    .loadClass(\"org.gradle.api.internal.tasks.scala.jdk6.ZincScalaCompiler\").newInstance();\n        } catch (Exception e) {\n            throw new RuntimeException(\"Internal error: Failed to load org.gradle.api.internal.tasks.scala.jdk6.ZincScalaCompiler\", e);\n        }\n\n        CompilerDaemonFactory daemonFactory = CompilerDaemonManager.getInstance();\n        scalaCompiler = new DaemonScalaCompiler(project, scalaCompiler, daemonFactory);\n        return new NormalizingScalaCompiler(scalaCompiler);\n    }","commit_id":"0fc922218130d79439db58730da23def20ee38e2","url":"https://github.com/gradle/gradle"},{"original_method":"public IssueTrackingResult track(SourceHashHolder sourceHashHolder, Collection<IssueDto> dbIssues, Collection<DefaultIssue> newIssues) {\n    IssueTrackingResult result = new IssueTrackingResult();\n\n    setChecksumOnNewIssues(newIssues, sourceHashHolder);\n\n    // Map new issues with old ones\n    mapIssues(newIssues, dbIssues, sourceHashHolder, result);\n    return result;\n  }","id":10382,"modified_method":"/**\n   * @param sourceHashHolder Null when working on resource that is not a file (directory/project)\n   */\n  public IssueTrackingResult track(@Nullable SourceHashHolder sourceHashHolder, Collection<IssueDto> dbIssues, Collection<DefaultIssue> newIssues) {\n    IssueTrackingResult result = new IssueTrackingResult();\n\n    if (sourceHashHolder != null) {\n      setChecksumOnNewIssues(newIssues, sourceHashHolder);\n    }\n\n    // Map new issues with old ones\n    mapIssues(newIssues, dbIssues, sourceHashHolder, result);\n    return result;\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void mapNewissues(SourceHashHolder sourceHashHolder, Collection<DefaultIssue> newIssues, IssueTrackingResult result) {\n\n    HashedSequenceComparator<StringText> hashedComparator = new HashedSequenceComparator<StringText>(StringTextComparator.IGNORE_WHITESPACE);\n    IssueTrackingBlocksRecognizer rec = new IssueTrackingBlocksRecognizer(sourceHashHolder.getHashedReference(), sourceHashHolder.getHashedSource(), hashedComparator);\n\n    RollingHashSequence<HashedSequence<StringText>> a = RollingHashSequence.wrap(sourceHashHolder.getHashedReference(), hashedComparator, 5);\n    RollingHashSequence<HashedSequence<StringText>> b = RollingHashSequence.wrap(sourceHashHolder.getHashedSource(), hashedComparator, 5);\n    RollingHashSequenceComparator<HashedSequence<StringText>> cmp = new RollingHashSequenceComparator<HashedSequence<StringText>>(hashedComparator);\n\n    Multimap<Integer, DefaultIssue> newIssuesByLines = newIssuesByLines(newIssues, rec, result);\n    Multimap<Integer, IssueDto> lastIssuesByLines = lastIssuesByLines(result.unmatched(), rec);\n\n    Map<Integer, HashOccurrence> map = Maps.newHashMap();\n\n    for (Integer line : lastIssuesByLines.keySet()) {\n      int hash = cmp.hash(a, line - 1);\n      HashOccurrence hashOccurrence = map.get(hash);\n      if (hashOccurrence == null) {\n        // first occurrence in A\n        hashOccurrence = new HashOccurrence();\n        hashOccurrence.lineA = line;\n        hashOccurrence.countA = 1;\n        map.put(hash, hashOccurrence);\n      } else {\n        hashOccurrence.countA++;\n      }\n    }\n\n    for (Integer line : newIssuesByLines.keySet()) {\n      int hash = cmp.hash(b, line - 1);\n      HashOccurrence hashOccurrence = map.get(hash);\n      if (hashOccurrence != null) {\n        hashOccurrence.lineB = line;\n        hashOccurrence.countB++;\n      }\n    }\n\n    for (HashOccurrence hashOccurrence : map.values()) {\n      if (hashOccurrence.countA == 1 && hashOccurrence.countB == 1) {\n        // Guaranteed that lineA has been moved to lineB, so we can map all issues on lineA to all issues on lineB\n        map(newIssuesByLines.get(hashOccurrence.lineB), lastIssuesByLines.get(hashOccurrence.lineA), result);\n        lastIssuesByLines.removeAll(hashOccurrence.lineA);\n        newIssuesByLines.removeAll(hashOccurrence.lineB);\n      }\n    }\n\n    // Check if remaining number of lines exceeds threshold\n    if (lastIssuesByLines.keySet().size() * newIssuesByLines.keySet().size() < 250000) {\n      List<LinePair> possibleLinePairs = Lists.newArrayList();\n      for (Integer oldLine : lastIssuesByLines.keySet()) {\n        for (Integer newLine : newIssuesByLines.keySet()) {\n          int weight = rec.computeLengthOfMaximalBlock(oldLine - 1, newLine - 1);\n          possibleLinePairs.add(new LinePair(oldLine, newLine, weight));\n        }\n      }\n      Collections.sort(possibleLinePairs, LINE_PAIR_COMPARATOR);\n      for (LinePair linePair : possibleLinePairs) {\n        // High probability that lineA has been moved to lineB, so we can map all Issues on lineA to all Issues on lineB\n        map(newIssuesByLines.get(linePair.lineB), lastIssuesByLines.get(linePair.lineA), result);\n      }\n    }\n  }","id":10383,"modified_method":"private void mapNewissues(SourceHashHolder sourceHashHolder, Collection<DefaultIssue> newIssues, IssueTrackingResult result) {\n\n    IssueTrackingBlocksRecognizer rec = new IssueTrackingBlocksRecognizer(sourceHashHolder.getHashedReference(), sourceHashHolder.getHashedSource());\n\n    RollingFileHashes a = RollingFileHashes.create(sourceHashHolder.getHashedReference(), 5);\n    RollingFileHashes b = RollingFileHashes.create(sourceHashHolder.getHashedSource(), 5);\n\n    Multimap<Integer, DefaultIssue> newIssuesByLines = newIssuesByLines(newIssues, rec, result);\n    Multimap<Integer, IssueDto> lastIssuesByLines = lastIssuesByLines(result.unmatched(), rec);\n\n    Map<Integer, HashOccurrence> map = Maps.newHashMap();\n\n    for (Integer line : lastIssuesByLines.keySet()) {\n      int hash = a.getHash(line);\n      HashOccurrence hashOccurrence = map.get(hash);\n      if (hashOccurrence == null) {\n        // first occurrence in A\n        hashOccurrence = new HashOccurrence();\n        hashOccurrence.lineA = line;\n        hashOccurrence.countA = 1;\n        map.put(hash, hashOccurrence);\n      } else {\n        hashOccurrence.countA++;\n      }\n    }\n\n    for (Integer line : newIssuesByLines.keySet()) {\n      int hash = b.getHash(line);\n      HashOccurrence hashOccurrence = map.get(hash);\n      if (hashOccurrence != null) {\n        hashOccurrence.lineB = line;\n        hashOccurrence.countB++;\n      }\n    }\n\n    for (HashOccurrence hashOccurrence : map.values()) {\n      if (hashOccurrence.countA == 1 && hashOccurrence.countB == 1) {\n        // Guaranteed that lineA has been moved to lineB, so we can map all issues on lineA to all issues on lineB\n        map(newIssuesByLines.get(hashOccurrence.lineB), lastIssuesByLines.get(hashOccurrence.lineA), result);\n        lastIssuesByLines.removeAll(hashOccurrence.lineA);\n        newIssuesByLines.removeAll(hashOccurrence.lineB);\n      }\n    }\n\n    // Check if remaining number of lines exceeds threshold\n    if (lastIssuesByLines.keySet().size() * newIssuesByLines.keySet().size() < 250000) {\n      List<LinePair> possibleLinePairs = Lists.newArrayList();\n      for (Integer oldLine : lastIssuesByLines.keySet()) {\n        for (Integer newLine : newIssuesByLines.keySet()) {\n          int weight = rec.computeLengthOfMaximalBlock(oldLine, newLine);\n          possibleLinePairs.add(new LinePair(oldLine, newLine, weight));\n        }\n      }\n      Collections.sort(possibleLinePairs, LINE_PAIR_COMPARATOR);\n      for (LinePair linePair : possibleLinePairs) {\n        // High probability that lineA has been moved to lineB, so we can map all Issues on lineA to all Issues on lineB\n        map(newIssuesByLines.get(linePair.lineB), lastIssuesByLines.get(linePair.lineA), result);\n      }\n    }\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@VisibleForTesting\n  void mapIssues(Collection<DefaultIssue> newIssues, @Nullable Collection<IssueDto> lastIssues, SourceHashHolder sourceHashHolder, IssueTrackingResult result) {\n    boolean hasLastScan = false;\n\n    if (lastIssues != null) {\n      hasLastScan = true;\n      mapLastIssues(newIssues, lastIssues, result);\n    }\n\n    // If each new issue matches an old one we can stop the matching mechanism\n    if (result.matched().size() != newIssues.size()) {\n      if (sourceHashHolder.hasBothReferenceAndCurrentSource() && hasLastScan) {\n        mapNewissues(sourceHashHolder, newIssues, result);\n      }\n      mapIssuesOnSameRule(newIssues, result);\n    }\n  }","id":10384,"modified_method":"@VisibleForTesting\n  void mapIssues(Collection<DefaultIssue> newIssues, @Nullable Collection<IssueDto> lastIssues, SourceHashHolder sourceHashHolder, IssueTrackingResult result) {\n    boolean hasLastScan = false;\n\n    if (lastIssues != null) {\n      hasLastScan = true;\n      mapLastIssues(newIssues, lastIssues, result);\n    }\n\n    // If each new issue matches an old one we can stop the matching mechanism\n    if (result.matched().size() != newIssues.size()) {\n      if (sourceHashHolder != null && sourceHashHolder.getHashedReference() != null && hasLastScan) {\n        mapNewissues(sourceHashHolder, newIssues, result);\n      }\n      mapIssuesOnSameRule(newIssues, result);\n    }\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void setChecksumOnNewIssues(Collection<DefaultIssue> issues, SourceHashHolder sourceHashHolder) {\n    if (issues.isEmpty()) {\n      return;\n    }\n    List<String> checksums = SourceChecksum.lineChecksumsOfFile(sourceHashHolder.getSource());\n    for (DefaultIssue issue : issues) {\n      issue.setChecksum(SourceChecksum.getChecksumForLine(checksums, issue.line()));\n    }\n  }","id":10385,"modified_method":"private void setChecksumOnNewIssues(Collection<DefaultIssue> issues, SourceHashHolder sourceHashHolder) {\n    if (issues.isEmpty()) {\n      return;\n    }\n    for (DefaultIssue issue : issues) {\n      if (issue.line() != null) {\n        issue.setChecksum(sourceHashHolder.getHashedSource().getHash(issue.line()));\n      }\n    }\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * @param startA number of line from first version of text (numbering starts from 0)\n   * @param startB number of line from second version of text (numbering starts from 0)\n   */\n  public int computeLengthOfMaximalBlock(int startA, int startB) {\n    if (!cmp.equals(a, startA, b, startB)) {\n      return 0;\n    }\n    int length = 0;\n    int ai = startA;\n    int bi = startB;\n    while (ai < a.length() && bi < b.length() && cmp.equals(a, ai, b, bi)) {\n      ai++;\n      bi++;\n      length++;\n    }\n    ai = startA;\n    bi = startB;\n    while (ai >= 0 && bi >= 0 && cmp.equals(a, ai, b, bi)) {\n      ai--;\n      bi--;\n      length++;\n    }\n    // Note that position (startA, startB) was counted twice\n    return length - 1;\n  }","id":10386,"modified_method":"/**\n   * @param startA number of line from first version of text (numbering starts from 1)\n   * @param startB number of line from second version of text (numbering starts from 1)\n   */\n  public int computeLengthOfMaximalBlock(int startA, int startB) {\n    if (!a.getHash(startA).equals(b.getHash(startB))) {\n      return 0;\n    }\n    int length = 0;\n    int ai = startA;\n    int bi = startB;\n    while (ai <= a.length() && bi <= b.length() && a.getHash(ai).equals(b.getHash(bi))) {\n      ai++;\n      bi++;\n      length++;\n    }\n    ai = startA;\n    bi = startB;\n    while (ai > 0 && bi > 0 && a.getHash(ai).equals(b.getHash(bi))) {\n      ai--;\n      bi--;\n      length++;\n    }\n    // Note that position (startA, startB) was counted twice\n    return length - 1;\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@VisibleForTesting\n  public IssueTrackingBlocksRecognizer(String referenceSource, String source) {\n    this.a = HashedSequence.wrap(new StringText(referenceSource), StringTextComparator.IGNORE_WHITESPACE);\n    this.b = HashedSequence.wrap(new StringText(source), StringTextComparator.IGNORE_WHITESPACE);\n    this.cmp = new HashedSequenceComparator<StringText>(StringTextComparator.IGNORE_WHITESPACE);\n  }","id":10387,"modified_method":"public IssueTrackingBlocksRecognizer(FileHashes a, FileHashes b) {\n    this.a = a;\n    this.b = b;\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void test() {\n    assertThat(compute(t(\"abcde\"), t(\"abcde\"), 3, 3)).isEqualTo(5);\n    assertThat(compute(t(\"abcde\"), t(\"abcd\"), 3, 3)).isEqualTo(4);\n    assertThat(compute(t(\"bcde\"), t(\"abcde\"), 3, 3)).isEqualTo(0);\n    assertThat(compute(t(\"bcde\"), t(\"abcde\"), 2, 3)).isEqualTo(4);\n  }","id":10388,"modified_method":"@Test\n  public void test() {\n    assertThat(compute(t(\"abcde\"), t(\"abcde\"), 4, 4)).isEqualTo(5);\n    assertThat(compute(t(\"abcde\"), t(\"abcd\"), 4, 4)).isEqualTo(4);\n    assertThat(compute(t(\"bcde\"), t(\"abcde\"), 4, 4)).isEqualTo(0);\n    assertThat(compute(t(\"bcde\"), t(\"abcde\"), 3, 4)).isEqualTo(4);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private static String t(String text) {\n    StringBuilder sb = new StringBuilder();\n    for (int i = 0; i < text.length(); i++) {\n      sb.append(text.charAt(i)).append('\\n');\n    }\n    return sb.toString();\n  }","id":10389,"modified_method":"private static FileHashes t(String text) {\n    String[] array = new String[text.length()];\n    for (int i = 0; i < text.length(); i++) {\n      array[i] = \"\" + text.charAt(i);\n    }\n    return FileHashes.create(array);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@VisibleForTesting\n  void doDecorate(Resource resource) {\n    Collection<DefaultIssue> issues = Lists.newArrayList();\n    for (Issue issue : issueCache.byComponent(resource.getEffectiveKey())) {\n      issues.add((DefaultIssue) issue);\n    }\n    issueCache.clear(resource.getEffectiveKey());\n    // issues = all the issues created by rule engines during this module scan and not excluded by filters\n\n    // all the issues that are not closed in db before starting this module scan, including manual issues\n    Collection<IssueDto> dbOpenIssues = initialOpenIssues.selectAndRemoveIssues(resource.getEffectiveKey());\n\n    SourceHashHolder sourceHashHolder = new SourceHashHolder(index, lastSnapshots, resource);\n\n    IssueTrackingResult trackingResult = tracking.track(sourceHashHolder, dbOpenIssues, issues);\n\n    // unmatched = issues that have been resolved + issues on disabled/removed rules + manual issues\n    addUnmatched(trackingResult.unmatched(), sourceHashHolder, issues);\n\n    mergeMatched(trackingResult);\n\n    if (ResourceUtils.isProject(resource)) {\n      // issues that relate to deleted components\n      addIssuesOnDeletedComponents(issues);\n    }\n\n    for (DefaultIssue issue : issues) {\n      workflow.doAutomaticTransition(issue, changeContext);\n      handlers.execute(issue, changeContext);\n      issueCache.put(issue);\n    }\n  }","id":10390,"modified_method":"@VisibleForTesting\n  void doDecorate(Resource resource) {\n    Collection<DefaultIssue> issues = Lists.newArrayList();\n    for (Issue issue : issueCache.byComponent(resource.getEffectiveKey())) {\n      issues.add((DefaultIssue) issue);\n    }\n    issueCache.clear(resource.getEffectiveKey());\n    // issues = all the issues created by rule engines during this module scan and not excluded by filters\n\n    // all the issues that are not closed in db before starting this module scan, including manual issues\n    Collection<IssueDto> dbOpenIssues = initialOpenIssues.selectAndRemoveIssues(resource.getEffectiveKey());\n\n    SourceHashHolder sourceHashHolder = null;\n    if (ResourceUtils.isFile(resource)) {\n      File sonarFile = (File) resource;\n      InputFile file = inputPathCache.getFile(project.getEffectiveKey(), sonarFile.getPath());\n      sourceHashHolder = new SourceHashHolder((DefaultInputFile) file, lastLineHashes);\n    }\n\n    IssueTrackingResult trackingResult = tracking.track(sourceHashHolder, dbOpenIssues, issues);\n\n    // unmatched = issues that have been resolved + issues on disabled/removed rules + manual issues\n    addUnmatched(trackingResult.unmatched(), sourceHashHolder, issues);\n\n    mergeMatched(trackingResult);\n\n    if (ResourceUtils.isProject(resource)) {\n      // issues that relate to deleted components\n      addIssuesOnDeletedComponents(issues);\n    }\n\n    for (DefaultIssue issue : issues) {\n      workflow.doAutomaticTransition(issue, changeContext);\n      handlers.execute(issue, changeContext);\n      issueCache.put(issue);\n    }\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public IssueTrackingDecorator(IssueCache issueCache, InitialOpenIssuesStack initialOpenIssues, IssueTracking tracking,\n    LastSnapshots lastSnapshots, SonarIndex index,\n    IssueHandlers handlers, IssueWorkflow workflow,\n    IssueUpdater updater,\n    Project project,\n    ResourcePerspectives perspectives,\n    RulesProfile rulesProfile,\n    RuleFinder ruleFinder) {\n    this.issueCache = issueCache;\n    this.initialOpenIssues = initialOpenIssues;\n    this.tracking = tracking;\n    this.lastSnapshots = lastSnapshots;\n    this.index = index;\n    this.handlers = handlers;\n    this.workflow = workflow;\n    this.updater = updater;\n    this.changeContext = IssueChangeContext.createScan(project.getAnalysisDate());\n    this.perspectives = perspectives;\n    this.rulesProfile = rulesProfile;\n    this.ruleFinder = ruleFinder;\n  }","id":10391,"modified_method":"public IssueTrackingDecorator(IssueCache issueCache, InitialOpenIssuesStack initialOpenIssues, IssueTracking tracking,\n    LastLineHashes lastLineHashes,\n    IssueHandlers handlers, IssueWorkflow workflow,\n    IssueUpdater updater,\n    Project project,\n    ResourcePerspectives perspectives,\n    RulesProfile rulesProfile,\n    RuleFinder ruleFinder, InputPathCache inputPathCache) {\n    this.issueCache = issueCache;\n    this.initialOpenIssues = initialOpenIssues;\n    this.tracking = tracking;\n    this.lastLineHashes = lastLineHashes;\n    this.handlers = handlers;\n    this.workflow = workflow;\n    this.updater = updater;\n    this.project = project;\n    this.inputPathCache = inputPathCache;\n    this.changeContext = IssueChangeContext.createScan(project.getAnalysisDate());\n    this.perspectives = perspectives;\n    this.rulesProfile = rulesProfile;\n    this.ruleFinder = ruleFinder;\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void manual_issues_should_be_kept_if_matching_line_not_found() throws Exception {\n    // \"Unmatched\" issues existed in previous scan but not in current one -> they have to be closed\n    Resource file = new File(\"Action.java\").setEffectiveKey(\"struts:Action.java\").setId(123);\n\n    // INPUT : one issue existing during previous scan\n    final int issueOnLine = 6;\n    IssueDto unmatchedIssue = new IssueDto().setKee(\"ABCDE\").setReporter(\"freddy\").setLine(issueOnLine).setStatus(\"OPEN\").setRuleKey(\"manual\", \"Performance\");\n    when(ruleFinder.findByKey(RuleKey.of(\"manual\", \"Performance\"))).thenReturn(new Rule(\"manual\", \"Performance\"));\n\n    IssueTrackingResult trackingResult = new IssueTrackingResult();\n    trackingResult.addUnmatched(unmatchedIssue);\n\n    String originalSource = \"public interface Action {\\n\"\n      + \"   void method1();\\n\"\n      + \"   void method2();\\n\"\n      + \"   void method3();\\n\"\n      + \"   void method4();\\n\"\n      + \"   void method5();\\n\" // Original issue here\n      + \"}\";\n    String newSource = \"public interface Action {\\n\"\n      + \"   void method1();\\n\"\n      + \"   void method2();\\n\"\n      + \"   void method3();\\n\"\n      + \"   void method4();\\n\"\n      + \"   void method6();\\n\" // Poof, no method5 anymore\n      + \"}\";\n    when(index.getSource(file)).thenReturn(newSource);\n    when(lastSnapshots.getSource(file)).thenReturn(originalSource);\n\n    when(tracking.track(isA(SourceHashHolder.class), anyCollection(), anyCollection())).thenReturn(trackingResult);\n\n    decorator.doDecorate(file);\n\n    verify(workflow, times(1)).doAutomaticTransition(any(DefaultIssue.class), any(IssueChangeContext.class));\n    verify(handlers, times(1)).execute(any(DefaultIssue.class), any(IssueChangeContext.class));\n\n    ArgumentCaptor<DefaultIssue> argument = ArgumentCaptor.forClass(DefaultIssue.class);\n    verify(issueCache).put(argument.capture());\n\n    DefaultIssue issue = argument.getValue();\n    assertThat(issue.line()).isEqualTo(issueOnLine);\n    assertThat(issue.key()).isEqualTo(\"ABCDE\");\n    assertThat(issue.isNew()).isFalse();\n    assertThat(issue.isEndOfLife()).isFalse();\n    assertThat(issue.isOnDisabledRule()).isFalse();\n  }","id":10392,"modified_method":"@Test\n  public void manual_issues_should_be_kept_if_matching_line_not_found() throws Exception {\n    // \"Unmatched\" issues existed in previous scan but not in current one -> they have to be closed\n\n    // INPUT : one issue existing during previous scan\n    final int issueOnLine = 6;\n    IssueDto unmatchedIssue = new IssueDto().setKee(\"ABCDE\").setReporter(\"freddy\").setLine(issueOnLine).setStatus(\"OPEN\").setRuleKey(\"manual\", \"Performance\");\n    when(ruleFinder.findByKey(RuleKey.of(\"manual\", \"Performance\"))).thenReturn(new Rule(\"manual\", \"Performance\"));\n\n    IssueTrackingResult trackingResult = new IssueTrackingResult();\n    trackingResult.addUnmatched(unmatchedIssue);\n\n    String originalSource = \"public interface Action {\\n\"\n      + \"   void method1();\\n\"\n      + \"   void method2();\\n\"\n      + \"   void method3();\\n\"\n      + \"   void method4();\\n\"\n      + \"   void method5();\\n\" // Original issue here\n      + \"}\";\n    String newSource = \"public interface Action {\\n\"\n      + \"   void method1();\\n\"\n      + \"   void method2();\\n\"\n      + \"   void method3();\\n\"\n      + \"   void method4();\\n\"\n      + \"   void method6();\\n\" // Poof, no method5 anymore\n      + \"}\";\n\n    Resource file = mockHashes(originalSource, newSource);\n\n    when(tracking.track(isA(SourceHashHolder.class), anyCollection(), anyCollection())).thenReturn(trackingResult);\n\n    decorator.doDecorate(file);\n\n    verify(workflow, times(1)).doAutomaticTransition(any(DefaultIssue.class), any(IssueChangeContext.class));\n    verify(handlers, times(1)).execute(any(DefaultIssue.class), any(IssueChangeContext.class));\n\n    ArgumentCaptor<DefaultIssue> argument = ArgumentCaptor.forClass(DefaultIssue.class);\n    verify(issueCache).put(argument.capture());\n\n    DefaultIssue issue = argument.getValue();\n    assertThat(issue.line()).isEqualTo(issueOnLine);\n    assertThat(issue.key()).isEqualTo(\"ABCDE\");\n    assertThat(issue.isNew()).isFalse();\n    assertThat(issue.isEndOfLife()).isFalse();\n    assertThat(issue.isOnDisabledRule()).isFalse();\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void manual_issues_should_be_closed_if_manual_rule_is_removed() throws Exception {\n    // \"Unmatched\" issues existed in previous scan but not in current one -> they have to be closed\n    Resource file = new File(\"Action.java\").setEffectiveKey(\"struts:Action.java\").setId(123);\n\n    // INPUT : one issue existing during previous scan\n    IssueDto unmatchedIssue = new IssueDto().setKee(\"ABCDE\").setReporter(\"freddy\").setLine(1).setStatus(\"OPEN\").setRuleKey(\"manual\", \"Performance\");\n    when(ruleFinder.findByKey(RuleKey.of(\"manual\", \"Performance\"))).thenReturn(new Rule(\"manual\", \"Performance\").setStatus(Rule.STATUS_REMOVED));\n\n    IssueTrackingResult trackingResult = new IssueTrackingResult();\n    trackingResult.addUnmatched(unmatchedIssue);\n\n    String source = \"public interface Action {}\";\n    when(index.getSource(file)).thenReturn(source);\n    when(lastSnapshots.getSource(file)).thenReturn(source);\n\n    when(tracking.track(isA(SourceHashHolder.class), anyCollection(), anyCollection())).thenReturn(trackingResult);\n\n    decorator.doDecorate(file);\n\n    verify(workflow, times(1)).doAutomaticTransition(any(DefaultIssue.class), any(IssueChangeContext.class));\n    verify(handlers, times(1)).execute(any(DefaultIssue.class), any(IssueChangeContext.class));\n\n    ArgumentCaptor<DefaultIssue> argument = ArgumentCaptor.forClass(DefaultIssue.class);\n    verify(issueCache).put(argument.capture());\n\n    DefaultIssue issue = argument.getValue();\n    assertThat(issue.key()).isEqualTo(\"ABCDE\");\n    assertThat(issue.isNew()).isFalse();\n    assertThat(issue.isEndOfLife()).isTrue();\n    assertThat(issue.isOnDisabledRule()).isTrue();\n  }","id":10393,"modified_method":"@Test\n  public void manual_issues_should_be_closed_if_manual_rule_is_removed() throws Exception {\n    // \"Unmatched\" issues existed in previous scan but not in current one -> they have to be closed\n\n    // INPUT : one issue existing during previous scan\n    IssueDto unmatchedIssue = new IssueDto().setKee(\"ABCDE\").setReporter(\"freddy\").setLine(1).setStatus(\"OPEN\").setRuleKey(\"manual\", \"Performance\");\n    when(ruleFinder.findByKey(RuleKey.of(\"manual\", \"Performance\"))).thenReturn(new Rule(\"manual\", \"Performance\").setStatus(Rule.STATUS_REMOVED));\n\n    IssueTrackingResult trackingResult = new IssueTrackingResult();\n    trackingResult.addUnmatched(unmatchedIssue);\n\n    String source = \"public interface Action {}\";\n    Resource file = mockHashes(source, source);\n\n    when(tracking.track(isA(SourceHashHolder.class), anyCollection(), anyCollection())).thenReturn(trackingResult);\n\n    decorator.doDecorate(file);\n\n    verify(workflow, times(1)).doAutomaticTransition(any(DefaultIssue.class), any(IssueChangeContext.class));\n    verify(handlers, times(1)).execute(any(DefaultIssue.class), any(IssueChangeContext.class));\n\n    ArgumentCaptor<DefaultIssue> argument = ArgumentCaptor.forClass(DefaultIssue.class);\n    verify(issueCache).put(argument.capture());\n\n    DefaultIssue issue = argument.getValue();\n    assertThat(issue.key()).isEqualTo(\"ABCDE\");\n    assertThat(issue.isNew()).isFalse();\n    assertThat(issue.isEndOfLife()).isTrue();\n    assertThat(issue.isOnDisabledRule()).isTrue();\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void manual_issues_should_be_kept_if_multiple_matching_lines_found() throws Exception {\n    // \"Unmatched\" issues existed in previous scan but not in current one -> they have to be closed\n    Resource file = new File(\"Action.java\").setEffectiveKey(\"struts:Action.java\").setId(123);\n\n    // INPUT : one issue existing during previous scan\n    final int issueOnLine = 3;\n    IssueDto unmatchedIssue = new IssueDto().setKee(\"ABCDE\").setReporter(\"freddy\").setLine(issueOnLine).setStatus(\"OPEN\").setRuleKey(\"manual\", \"Performance\");\n    when(ruleFinder.findByKey(RuleKey.of(\"manual\", \"Performance\"))).thenReturn(new Rule(\"manual\", \"Performance\"));\n\n    IssueTrackingResult trackingResult = new IssueTrackingResult();\n    trackingResult.addUnmatched(unmatchedIssue);\n\n    String originalSource = \"public class Action {\\n\"\n      + \"   void method1() {\\n\"\n      + \"     notify();\\n\" // initial issue\n      + \"   }\\n\"\n      + \"}\";\n    String newSource = \"public class Action {\\n\"\n      + \"   \\n\"\n      + \"   void method1() {\\n\" // new issue will appear here\n      + \"     notify();\\n\"\n      + \"   }\\n\"\n      + \"   void method2() {\\n\"\n      + \"     notify();\\n\"\n      + \"   }\\n\"\n      + \"}\";\n    when(index.getSource(file)).thenReturn(newSource);\n    when(lastSnapshots.getSource(file)).thenReturn(originalSource);\n\n    when(tracking.track(isA(SourceHashHolder.class), anyCollection(), anyCollection())).thenReturn(trackingResult);\n\n    decorator.doDecorate(file);\n\n    verify(workflow, times(1)).doAutomaticTransition(any(DefaultIssue.class), any(IssueChangeContext.class));\n    verify(handlers, times(1)).execute(any(DefaultIssue.class), any(IssueChangeContext.class));\n\n    ArgumentCaptor<DefaultIssue> argument = ArgumentCaptor.forClass(DefaultIssue.class);\n    verify(issueCache).put(argument.capture());\n\n    DefaultIssue issue = argument.getValue();\n    assertThat(issue.line()).isEqualTo(issueOnLine);\n    assertThat(issue.key()).isEqualTo(\"ABCDE\");\n    assertThat(issue.isNew()).isFalse();\n    assertThat(issue.isEndOfLife()).isFalse();\n    assertThat(issue.isOnDisabledRule()).isFalse();\n  }","id":10394,"modified_method":"@Test\n  public void manual_issues_should_be_kept_if_multiple_matching_lines_found() throws Exception {\n    // \"Unmatched\" issues existed in previous scan but not in current one -> they have to be closed\n\n    // INPUT : one issue existing during previous scan\n    final int issueOnLine = 3;\n    IssueDto unmatchedIssue = new IssueDto().setKee(\"ABCDE\").setReporter(\"freddy\").setLine(issueOnLine).setStatus(\"OPEN\").setRuleKey(\"manual\", \"Performance\");\n    when(ruleFinder.findByKey(RuleKey.of(\"manual\", \"Performance\"))).thenReturn(new Rule(\"manual\", \"Performance\"));\n\n    IssueTrackingResult trackingResult = new IssueTrackingResult();\n    trackingResult.addUnmatched(unmatchedIssue);\n\n    String originalSource = \"public class Action {\\n\"\n      + \"   void method1() {\\n\"\n      + \"     notify();\\n\" // initial issue\n      + \"   }\\n\"\n      + \"}\";\n    String newSource = \"public class Action {\\n\"\n      + \"   \\n\"\n      + \"   void method1() {\\n\" // new issue will appear here\n      + \"     notify();\\n\"\n      + \"   }\\n\"\n      + \"   void method2() {\\n\"\n      + \"     notify();\\n\"\n      + \"   }\\n\"\n      + \"}\";\n    Resource file = mockHashes(originalSource, newSource);\n\n    when(tracking.track(isA(SourceHashHolder.class), anyCollection(), anyCollection())).thenReturn(trackingResult);\n\n    decorator.doDecorate(file);\n\n    verify(workflow, times(1)).doAutomaticTransition(any(DefaultIssue.class), any(IssueChangeContext.class));\n    verify(handlers, times(1)).execute(any(DefaultIssue.class), any(IssueChangeContext.class));\n\n    ArgumentCaptor<DefaultIssue> argument = ArgumentCaptor.forClass(DefaultIssue.class);\n    verify(issueCache).put(argument.capture());\n\n    DefaultIssue issue = argument.getValue();\n    assertThat(issue.line()).isEqualTo(issueOnLine);\n    assertThat(issue.key()).isEqualTo(\"ABCDE\");\n    assertThat(issue.isNew()).isFalse();\n    assertThat(issue.isEndOfLife()).isFalse();\n    assertThat(issue.isOnDisabledRule()).isFalse();\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void manual_issues_should_be_moved_if_matching_line_found() throws Exception {\n    Resource file = new File(\"Action.java\").setEffectiveKey(\"struts:Action.java\").setId(123);\n\n    // INPUT : one issue existing during previous scan\n    IssueDto unmatchedIssue = new IssueDto().setKee(\"ABCDE\").setReporter(\"freddy\").setLine(6).setStatus(\"OPEN\").setRuleKey(\"manual\", \"Performance\");\n    when(ruleFinder.findByKey(RuleKey.of(\"manual\", \"Performance\"))).thenReturn(new Rule(\"manual\", \"Performance\"));\n\n    IssueTrackingResult trackingResult = new IssueTrackingResult();\n    trackingResult.addUnmatched(unmatchedIssue);\n\n    String originalSource = \"public interface Action {\\n\"\n      + \"   void method1();\\n\"\n      + \"   void method2();\\n\"\n      + \"   void method3();\\n\"\n      + \"   void method4();\\n\"\n      + \"   void method5();\\n\" // Original issue here\n      + \"}\";\n    String newSource = \"public interface Action {\\n\"\n      + \"   void method5();\\n\" // New issue here\n      + \"   void method1();\\n\"\n      + \"   void method2();\\n\"\n      + \"   void method3();\\n\"\n      + \"   void method4();\\n\"\n      + \"}\";\n    when(index.getSource(file)).thenReturn(newSource);\n    when(lastSnapshots.getSource(file)).thenReturn(originalSource);\n\n    when(tracking.track(isA(SourceHashHolder.class), anyCollection(), anyCollection())).thenReturn(trackingResult);\n\n    decorator.doDecorate(file);\n\n    verify(workflow, times(1)).doAutomaticTransition(any(DefaultIssue.class), any(IssueChangeContext.class));\n    verify(handlers, times(1)).execute(any(DefaultIssue.class), any(IssueChangeContext.class));\n\n    ArgumentCaptor<DefaultIssue> argument = ArgumentCaptor.forClass(DefaultIssue.class);\n    verify(issueCache).put(argument.capture());\n\n    DefaultIssue issue = argument.getValue();\n    assertThat(issue.line()).isEqualTo(2);\n    assertThat(issue.key()).isEqualTo(\"ABCDE\");\n    assertThat(issue.isNew()).isFalse();\n    assertThat(issue.isEndOfLife()).isFalse();\n    assertThat(issue.isOnDisabledRule()).isFalse();\n  }","id":10395,"modified_method":"@Test\n  public void manual_issues_should_be_moved_if_matching_line_found() throws Exception {\n    // INPUT : one issue existing during previous scan\n    IssueDto unmatchedIssue = new IssueDto().setKee(\"ABCDE\").setReporter(\"freddy\").setLine(6).setStatus(\"OPEN\").setRuleKey(\"manual\", \"Performance\");\n    when(ruleFinder.findByKey(RuleKey.of(\"manual\", \"Performance\"))).thenReturn(new Rule(\"manual\", \"Performance\"));\n\n    IssueTrackingResult trackingResult = new IssueTrackingResult();\n    trackingResult.addUnmatched(unmatchedIssue);\n\n    String originalSource = \"public interface Action {\\n\"\n      + \"   void method1();\\n\"\n      + \"   void method2();\\n\"\n      + \"   void method3();\\n\"\n      + \"   void method4();\\n\"\n      + \"   void method5();\\n\" // Original issue here\n      + \"}\";\n    String newSource = \"public interface Action {\\n\"\n      + \"   void method5();\\n\" // New issue here\n      + \"   void method1();\\n\"\n      + \"   void method2();\\n\"\n      + \"   void method3();\\n\"\n      + \"   void method4();\\n\"\n      + \"}\";\n    Resource file = mockHashes(originalSource, newSource);\n\n    when(tracking.track(isA(SourceHashHolder.class), anyCollection(), anyCollection())).thenReturn(trackingResult);\n\n    decorator.doDecorate(file);\n\n    verify(workflow, times(1)).doAutomaticTransition(any(DefaultIssue.class), any(IssueChangeContext.class));\n    verify(handlers, times(1)).execute(any(DefaultIssue.class), any(IssueChangeContext.class));\n\n    ArgumentCaptor<DefaultIssue> argument = ArgumentCaptor.forClass(DefaultIssue.class);\n    verify(issueCache).put(argument.capture());\n\n    DefaultIssue issue = argument.getValue();\n    assertThat(issue.line()).isEqualTo(2);\n    assertThat(issue.key()).isEqualTo(\"ABCDE\");\n    assertThat(issue.isNew()).isFalse();\n    assertThat(issue.isEndOfLife()).isFalse();\n    assertThat(issue.isOnDisabledRule()).isFalse();\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void manual_issues_should_be_untouched_if_line_is_null() throws Exception {\n    Resource file = new File(\"Action.java\").setEffectiveKey(\"struts:Action.java\").setId(123);\n\n    // INPUT : one issue existing during previous scan\n    IssueDto unmatchedIssue = new IssueDto().setKee(\"ABCDE\").setReporter(\"freddy\").setLine(null).setStatus(\"OPEN\").setRuleKey(\"manual\", \"Performance\");\n    when(ruleFinder.findByKey(RuleKey.of(\"manual\", \"Performance\"))).thenReturn(new Rule(\"manual\", \"Performance\"));\n\n    IssueTrackingResult trackingResult = new IssueTrackingResult();\n    trackingResult.addUnmatched(unmatchedIssue);\n\n    String originalSource = \"public interface Action {}\";\n    when(index.getSource(file)).thenReturn(originalSource);\n    when(lastSnapshots.getSource(file)).thenReturn(originalSource);\n\n    when(tracking.track(isA(SourceHashHolder.class), anyCollection(), anyCollection())).thenReturn(trackingResult);\n\n    decorator.doDecorate(file);\n\n    verify(workflow, times(1)).doAutomaticTransition(any(DefaultIssue.class), any(IssueChangeContext.class));\n    verify(handlers, times(1)).execute(any(DefaultIssue.class), any(IssueChangeContext.class));\n\n    ArgumentCaptor<DefaultIssue> argument = ArgumentCaptor.forClass(DefaultIssue.class);\n    verify(issueCache).put(argument.capture());\n\n    DefaultIssue issue = argument.getValue();\n    assertThat(issue.line()).isEqualTo(null);\n    assertThat(issue.key()).isEqualTo(\"ABCDE\");\n    assertThat(issue.isNew()).isFalse();\n    assertThat(issue.isEndOfLife()).isFalse();\n    assertThat(issue.isOnDisabledRule()).isFalse();\n    assertThat(issue.status()).isEqualTo(\"OPEN\");\n  }","id":10396,"modified_method":"@Test\n  public void manual_issues_should_be_untouched_if_line_is_null() throws Exception {\n\n    // INPUT : one issue existing during previous scan\n    IssueDto unmatchedIssue = new IssueDto().setKee(\"ABCDE\").setReporter(\"freddy\").setLine(null).setStatus(\"OPEN\").setRuleKey(\"manual\", \"Performance\");\n    when(ruleFinder.findByKey(RuleKey.of(\"manual\", \"Performance\"))).thenReturn(new Rule(\"manual\", \"Performance\"));\n\n    IssueTrackingResult trackingResult = new IssueTrackingResult();\n    trackingResult.addUnmatched(unmatchedIssue);\n\n    String originalSource = \"public interface Action {}\";\n    Resource file = mockHashes(originalSource, originalSource);\n\n    when(tracking.track(isA(SourceHashHolder.class), anyCollection(), anyCollection())).thenReturn(trackingResult);\n\n    decorator.doDecorate(file);\n\n    verify(workflow, times(1)).doAutomaticTransition(any(DefaultIssue.class), any(IssueChangeContext.class));\n    verify(handlers, times(1)).execute(any(DefaultIssue.class), any(IssueChangeContext.class));\n\n    ArgumentCaptor<DefaultIssue> argument = ArgumentCaptor.forClass(DefaultIssue.class);\n    verify(issueCache).put(argument.capture());\n\n    DefaultIssue issue = argument.getValue();\n    assertThat(issue.line()).isEqualTo(null);\n    assertThat(issue.key()).isEqualTo(\"ABCDE\");\n    assertThat(issue.isNew()).isFalse();\n    assertThat(issue.isEndOfLife()).isFalse();\n    assertThat(issue.isOnDisabledRule()).isFalse();\n    assertThat(issue.status()).isEqualTo(\"OPEN\");\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void manual_issues_should_be_closed_if_manual_rule_is_not_found() throws Exception {\n    // \"Unmatched\" issues existed in previous scan but not in current one -> they have to be closed\n    Resource file = new File(\"Action.java\").setEffectiveKey(\"struts:Action.java\").setId(123);\n\n    // INPUT : one issue existing during previous scan\n    IssueDto unmatchedIssue = new IssueDto().setKee(\"ABCDE\").setReporter(\"freddy\").setLine(1).setStatus(\"OPEN\").setRuleKey(\"manual\", \"Performance\");\n    when(ruleFinder.findByKey(RuleKey.of(\"manual\", \"Performance\"))).thenReturn(null);\n\n    IssueTrackingResult trackingResult = new IssueTrackingResult();\n    trackingResult.addUnmatched(unmatchedIssue);\n\n    String source = \"public interface Action {}\";\n    when(index.getSource(file)).thenReturn(source);\n    when(lastSnapshots.getSource(file)).thenReturn(source);\n\n    when(tracking.track(isA(SourceHashHolder.class), anyCollection(), anyCollection())).thenReturn(trackingResult);\n\n    decorator.doDecorate(file);\n\n    verify(workflow, times(1)).doAutomaticTransition(any(DefaultIssue.class), any(IssueChangeContext.class));\n    verify(handlers, times(1)).execute(any(DefaultIssue.class), any(IssueChangeContext.class));\n\n    ArgumentCaptor<DefaultIssue> argument = ArgumentCaptor.forClass(DefaultIssue.class);\n    verify(issueCache).put(argument.capture());\n\n    DefaultIssue issue = argument.getValue();\n    assertThat(issue.key()).isEqualTo(\"ABCDE\");\n    assertThat(issue.isNew()).isFalse();\n    assertThat(issue.isEndOfLife()).isTrue();\n    assertThat(issue.isOnDisabledRule()).isTrue();\n  }","id":10397,"modified_method":"@Test\n  public void manual_issues_should_be_closed_if_manual_rule_is_not_found() throws Exception {\n    // \"Unmatched\" issues existed in previous scan but not in current one -> they have to be closed\n\n    // INPUT : one issue existing during previous scan\n    IssueDto unmatchedIssue = new IssueDto().setKee(\"ABCDE\").setReporter(\"freddy\").setLine(1).setStatus(\"OPEN\").setRuleKey(\"manual\", \"Performance\");\n    when(ruleFinder.findByKey(RuleKey.of(\"manual\", \"Performance\"))).thenReturn(null);\n\n    IssueTrackingResult trackingResult = new IssueTrackingResult();\n    trackingResult.addUnmatched(unmatchedIssue);\n\n    String source = \"public interface Action {}\";\n    Resource file = mockHashes(source, source);\n\n    when(tracking.track(isA(SourceHashHolder.class), anyCollection(), anyCollection())).thenReturn(trackingResult);\n\n    decorator.doDecorate(file);\n\n    verify(workflow, times(1)).doAutomaticTransition(any(DefaultIssue.class), any(IssueChangeContext.class));\n    verify(handlers, times(1)).execute(any(DefaultIssue.class), any(IssueChangeContext.class));\n\n    ArgumentCaptor<DefaultIssue> argument = ArgumentCaptor.forClass(DefaultIssue.class);\n    verify(issueCache).put(argument.capture());\n\n    DefaultIssue issue = argument.getValue();\n    assertThat(issue.key()).isEqualTo(\"ABCDE\");\n    assertThat(issue.isNew()).isFalse();\n    assertThat(issue.isEndOfLife()).isTrue();\n    assertThat(issue.isOnDisabledRule()).isTrue();\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void manual_issues_should_be_closed_if_new_source_is_shorter() throws Exception {\n    // \"Unmatched\" issues existed in previous scan but not in current one -> they have to be closed\n    Resource file = new File(\"Action.java\").setEffectiveKey(\"struts:Action.java\").setId(123);\n\n    // INPUT : one issue existing during previous scan\n    IssueDto unmatchedIssue = new IssueDto().setKee(\"ABCDE\").setReporter(\"freddy\").setLine(6).setStatus(\"OPEN\").setRuleKey(\"manual\", \"Performance\");\n    when(ruleFinder.findByKey(RuleKey.of(\"manual\", \"Performance\"))).thenReturn(null);\n\n    IssueTrackingResult trackingResult = new IssueTrackingResult();\n    trackingResult.addUnmatched(unmatchedIssue);\n\n    String originalSource = \"public interface Action {\\n\"\n      + \"   void method1();\\n\"\n      + \"   void method2();\\n\"\n      + \"   void method3();\\n\"\n      + \"   void method4();\\n\"\n      + \"   void method5();\\n\"\n      + \"}\";\n    String newSource = \"public interface Action {\\n\"\n      + \"   void method1();\\n\"\n      + \"   void method2();\\n\"\n      + \"}\";\n    when(index.getSource(file)).thenReturn(newSource);\n    when(lastSnapshots.getSource(file)).thenReturn(originalSource);\n\n    when(tracking.track(isA(SourceHashHolder.class), anyCollection(), anyCollection())).thenReturn(trackingResult);\n\n    decorator.doDecorate(file);\n\n    verify(workflow, times(1)).doAutomaticTransition(any(DefaultIssue.class), any(IssueChangeContext.class));\n    verify(handlers, times(1)).execute(any(DefaultIssue.class), any(IssueChangeContext.class));\n\n    ArgumentCaptor<DefaultIssue> argument = ArgumentCaptor.forClass(DefaultIssue.class);\n    verify(issueCache).put(argument.capture());\n\n    DefaultIssue issue = argument.getValue();\n    verify(updater).setResolution(eq(issue), eq(Issue.RESOLUTION_REMOVED), any(IssueChangeContext.class));\n    verify(updater).setStatus(eq(issue), eq(Issue.STATUS_CLOSED), any(IssueChangeContext.class));\n\n    assertThat(issue.key()).isEqualTo(\"ABCDE\");\n    assertThat(issue.isNew()).isFalse();\n    assertThat(issue.isEndOfLife()).isTrue();\n    assertThat(issue.isOnDisabledRule()).isTrue();\n  }","id":10398,"modified_method":"@Test\n  public void manual_issues_should_be_closed_if_new_source_is_shorter() throws Exception {\n    // \"Unmatched\" issues existed in previous scan but not in current one -> they have to be closed\n\n    // INPUT : one issue existing during previous scan\n    IssueDto unmatchedIssue = new IssueDto().setKee(\"ABCDE\").setReporter(\"freddy\").setLine(6).setStatus(\"OPEN\").setRuleKey(\"manual\", \"Performance\");\n    when(ruleFinder.findByKey(RuleKey.of(\"manual\", \"Performance\"))).thenReturn(null);\n\n    IssueTrackingResult trackingResult = new IssueTrackingResult();\n    trackingResult.addUnmatched(unmatchedIssue);\n\n    String originalSource = \"public interface Action {\\n\"\n      + \"   void method1();\\n\"\n      + \"   void method2();\\n\"\n      + \"   void method3();\\n\"\n      + \"   void method4();\\n\"\n      + \"   void method5();\\n\"\n      + \"}\";\n    String newSource = \"public interface Action {\\n\"\n      + \"   void method1();\\n\"\n      + \"   void method2();\\n\"\n      + \"}\";\n    Resource file = mockHashes(originalSource, newSource);\n\n    when(tracking.track(isA(SourceHashHolder.class), anyCollection(), anyCollection())).thenReturn(trackingResult);\n\n    decorator.doDecorate(file);\n\n    verify(workflow, times(1)).doAutomaticTransition(any(DefaultIssue.class), any(IssueChangeContext.class));\n    verify(handlers, times(1)).execute(any(DefaultIssue.class), any(IssueChangeContext.class));\n\n    ArgumentCaptor<DefaultIssue> argument = ArgumentCaptor.forClass(DefaultIssue.class);\n    verify(issueCache).put(argument.capture());\n\n    DefaultIssue issue = argument.getValue();\n    verify(updater).setResolution(eq(issue), eq(Issue.RESOLUTION_REMOVED), any(IssueChangeContext.class));\n    verify(updater).setStatus(eq(issue), eq(Issue.STATUS_CLOSED), any(IssueChangeContext.class));\n\n    assertThat(issue.key()).isEqualTo(\"ABCDE\");\n    assertThat(issue.isNew()).isFalse();\n    assertThat(issue.isEndOfLife()).isTrue();\n    assertThat(issue.isOnDisabledRule()).isTrue();\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void init() {\n    decorator = new IssueTrackingDecorator(\n      issueCache,\n      initialOpenIssues,\n      tracking,\n      lastSnapshots,\n      index,\n      handlers,\n      workflow,\n      updater,\n      mock(Project.class),\n      perspectives,\n      profile,\n      ruleFinder);\n  }","id":10399,"modified_method":"@Before\n  public void init() {\n    decorator = new IssueTrackingDecorator(\n      issueCache,\n      initialOpenIssues,\n      tracking,\n      lastSnapshots,\n      handlers,\n      workflow,\n      updater,\n      new Project(\"foo\"),\n      perspectives,\n      profile,\n      ruleFinder,\n      inputPathCache);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void manual_issues_should_be_untouched_if_already_closed() throws Exception {\n    Resource file = new File(\"Action.java\").setEffectiveKey(\"struts:Action.java\").setId(123);\n\n    // INPUT : one issue existing during previous scan\n    IssueDto unmatchedIssue = new IssueDto().setKee(\"ABCDE\").setReporter(\"freddy\").setLine(1).setStatus(\"CLOSED\").setRuleKey(\"manual\", \"Performance\");\n    when(ruleFinder.findByKey(RuleKey.of(\"manual\", \"Performance\"))).thenReturn(new Rule(\"manual\", \"Performance\"));\n\n    IssueTrackingResult trackingResult = new IssueTrackingResult();\n    trackingResult.addUnmatched(unmatchedIssue);\n\n    String originalSource = \"public interface Action {}\";\n    when(index.getSource(file)).thenReturn(originalSource);\n    when(lastSnapshots.getSource(file)).thenReturn(originalSource);\n\n    when(tracking.track(isA(SourceHashHolder.class), anyCollection(), anyCollection())).thenReturn(trackingResult);\n\n    decorator.doDecorate(file);\n\n    verify(workflow, times(1)).doAutomaticTransition(any(DefaultIssue.class), any(IssueChangeContext.class));\n    verify(handlers, times(1)).execute(any(DefaultIssue.class), any(IssueChangeContext.class));\n\n    ArgumentCaptor<DefaultIssue> argument = ArgumentCaptor.forClass(DefaultIssue.class);\n    verify(issueCache).put(argument.capture());\n\n    DefaultIssue issue = argument.getValue();\n    assertThat(issue.line()).isEqualTo(1);\n    assertThat(issue.key()).isEqualTo(\"ABCDE\");\n    assertThat(issue.isNew()).isFalse();\n    assertThat(issue.isEndOfLife()).isFalse();\n    assertThat(issue.isOnDisabledRule()).isFalse();\n    assertThat(issue.status()).isEqualTo(\"CLOSED\");\n  }","id":10400,"modified_method":"@Test\n  public void manual_issues_should_be_untouched_if_already_closed() throws Exception {\n\n    // INPUT : one issue existing during previous scan\n    IssueDto unmatchedIssue = new IssueDto().setKee(\"ABCDE\").setReporter(\"freddy\").setLine(1).setStatus(\"CLOSED\").setRuleKey(\"manual\", \"Performance\");\n    when(ruleFinder.findByKey(RuleKey.of(\"manual\", \"Performance\"))).thenReturn(new Rule(\"manual\", \"Performance\"));\n\n    IssueTrackingResult trackingResult = new IssueTrackingResult();\n    trackingResult.addUnmatched(unmatchedIssue);\n\n    String originalSource = \"public interface Action {}\";\n    Resource file = mockHashes(originalSource, originalSource);\n\n    when(tracking.track(isA(SourceHashHolder.class), anyCollection(), anyCollection())).thenReturn(trackingResult);\n\n    decorator.doDecorate(file);\n\n    verify(workflow, times(1)).doAutomaticTransition(any(DefaultIssue.class), any(IssueChangeContext.class));\n    verify(handlers, times(1)).execute(any(DefaultIssue.class), any(IssueChangeContext.class));\n\n    ArgumentCaptor<DefaultIssue> argument = ArgumentCaptor.forClass(DefaultIssue.class);\n    verify(issueCache).put(argument.capture());\n\n    DefaultIssue issue = argument.getValue();\n    assertThat(issue.line()).isEqualTo(1);\n    assertThat(issue.key()).isEqualTo(\"ABCDE\");\n    assertThat(issue.isNew()).isFalse();\n    assertThat(issue.isEndOfLife()).isFalse();\n    assertThat(issue.isOnDisabledRule()).isFalse();\n    assertThat(issue.status()).isEqualTo(\"CLOSED\");\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void past_issue_not_associated_with_line_should_not_cause_npe() throws Exception {\n    when(lastSnapshots.getSource(project)).thenReturn(load(\"example2-v1\"));\n    when(index.getSource(project)).thenReturn(load(\"example2-v2\"));\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, project);\n\n    DefaultIssue newIssue = newDefaultIssue(\"Indentation\", 9, RuleKey.of(\"squid\", \"AvoidCycle\"), \"foo\");\n    IssueDto referenceIssue = newReferenceIssue(\"2 branches need to be covered\", null, \"squid\", \"AvoidCycle\", null);\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), sourceHashHolder, result);\n\n    assertThat(result.matched()).isEmpty();\n  }","id":10401,"modified_method":"@Test\n  public void past_issue_not_associated_with_line_should_not_cause_npe() throws Exception {\n    initLastHashes(\"example2-v1\", \"example2-v2\");\n\n    DefaultIssue newIssue = newDefaultIssue(\"Indentation\", 9, RuleKey.of(\"squid\", \"AvoidCycle\"), \"foo\");\n    IssueDto referenceIssue = newReferenceIssue(\"2 branches need to be covered\", null, \"squid\", \"AvoidCycle\", null);\n\n    IssueTrackingResult result = tracking.track(sourceHashHolder, newArrayList(referenceIssue), newArrayList(newIssue));\n\n    assertThat(result.matched()).isEmpty();\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_not_track_issue_if_different_rule() {\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, null);\n\n    DefaultIssue newIssue = newDefaultIssue(\"message\", 1, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    IssueDto referenceIssue = newReferenceIssue(\"message\", 1, \"squid\", \"NullDeref\", \"checksum1\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), sourceHashHolder, result);\n    assertThat(result.matching(newIssue)).isNull();\n  }","id":10402,"modified_method":"@Test\n  public void should_not_track_issue_if_different_rule() {\n    DefaultIssue newIssue = newDefaultIssue(\"message\", 1, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    IssueDto referenceIssue = newReferenceIssue(\"message\", 1, \"squid\", \"NullDeref\", \"checksum1\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), null, result);\n    assertThat(result.matching(newIssue)).isNull();\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void same_rule_and_message_and_checksum_but_different_line() {\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, null);\n\n    DefaultIssue newIssue = newDefaultIssue(\"message\", 1, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    IssueDto referenceIssue = newReferenceIssue(\"message\", 2, \"squid\", \"AvoidCycle\", \"checksum1\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), sourceHashHolder, result);\n    assertThat(result.matching(newIssue)).isSameAs(referenceIssue);\n  }","id":10403,"modified_method":"@Test\n  public void same_rule_and_message_and_checksum_but_different_line() {\n    DefaultIssue newIssue = newDefaultIssue(\"message\", 1, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    IssueDto referenceIssue = newReferenceIssue(\"message\", 2, \"squid\", \"AvoidCycle\", \"checksum1\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), null, result);\n    assertThat(result.matching(newIssue)).isSameAs(referenceIssue);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_track_issues_based_on_blocks_recognition_on_example3() throws Exception {\n    when(lastSnapshots.getSource(project)).thenReturn(load(\"example3-v1\"));\n    when(index.getSource(project)).thenReturn(load(\"example3-v2\"));\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, project);\n\n    IssueDto referenceIssue1 = newReferenceIssue(\"Avoid unused local variables such as 'j'.\", 6, \"squid\", \"AvoidCycle\", \"63c11570fc0a76434156be5f8138fa03\");\n    IssueDto referenceIssue2 = newReferenceIssue(\"Avoid unused private methods such as 'myMethod()'.\", 13, \"squid\", \"NullDeref\", \"ef23288705d1ef1e512448ace287586e\");\n    IssueDto referenceIssue3 = newReferenceIssue(\"Method 'avoidUtilityClass' is not designed for extension - needs to be abstract, final or empty.\", 9, \"pmd\",\n      \"UnusedLocalVariable\", \"ed5cdd046fda82727d6fedd1d8e3a310\");\n\n    // New issue\n    DefaultIssue newIssue1 = newDefaultIssue(\"Avoid unused local variables such as 'msg'.\", 18, RuleKey.of(\"squid\", \"AvoidCycle\"), \"a24254126be2bf1a9b9a8db43f633733\");\n    // Same as referenceIssue2\n    DefaultIssue newIssue2 = newDefaultIssue(\"Avoid unused private methods such as 'myMethod()'.\", 13, RuleKey.of(\"squid\", \"NullDeref\"), \"ef23288705d1ef1e512448ace287586e\");\n    // Same as referenceIssue3\n    DefaultIssue newIssue3 = newDefaultIssue(\"Method 'avoidUtilityClass' is not designed for extension - needs to be abstract, final or empty.\", 9,\n      RuleKey.of(\"pmd\", \"UnusedLocalVariable\"), \"ed5cdd046fda82727d6fedd1d8e3a310\");\n    // New issue\n    DefaultIssue newIssue4 = newDefaultIssue(\"Method 'newViolation' is not designed for extension - needs to be abstract, final or empty.\", 17,\n      RuleKey.of(\"pmd\", \"UnusedLocalVariable\"), \"7d58ac9040c27e4ca2f11a0269e251e2\");\n    // Same as referenceIssue1\n    DefaultIssue newIssue5 = newDefaultIssue(\"Avoid unused local variables such as 'j'.\", 6, RuleKey.of(\"squid\", \"AvoidCycle\"), \"4432a2675ec3e1620daefe38386b51ef\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(\n      Arrays.asList(newIssue1, newIssue2, newIssue3, newIssue4, newIssue5),\n      Arrays.asList(referenceIssue1, referenceIssue2, referenceIssue3),\n      sourceHashHolder, result);\n\n    assertThat(result.matching(newIssue1)).isNull();\n    assertThat(result.matching(newIssue2)).isSameAs(referenceIssue2);\n    assertThat(result.matching(newIssue3)).isSameAs(referenceIssue3);\n    assertThat(result.matching(newIssue4)).isNull();\n    assertThat(result.matching(newIssue5)).isSameAs(referenceIssue1);\n  }","id":10404,"modified_method":"@Test\n  public void should_track_issues_based_on_blocks_recognition_on_example3() throws Exception {\n    initLastHashes(\"example3-v1\", \"example3-v2\");\n\n    IssueDto referenceIssue1 = newReferenceIssue(\"Avoid unused local variables such as 'j'.\", 6, \"squid\", \"AvoidCycle\", \"63c11570fc0a76434156be5f8138fa03\");\n    IssueDto referenceIssue2 = newReferenceIssue(\"Avoid unused private methods such as 'myMethod()'.\", 13, \"squid\", \"NullDeref\", \"ef23288705d1ef1e512448ace287586e\");\n    IssueDto referenceIssue3 = newReferenceIssue(\"Method 'avoidUtilityClass' is not designed for extension - needs to be abstract, final or empty.\", 9, \"pmd\",\n      \"UnusedLocalVariable\", \"ed5cdd046fda82727d6fedd1d8e3a310\");\n\n    // New issue\n    DefaultIssue newIssue1 = newDefaultIssue(\"Avoid unused local variables such as 'msg'.\", 18, RuleKey.of(\"squid\", \"AvoidCycle\"), \"a24254126be2bf1a9b9a8db43f633733\");\n    // Same as referenceIssue2\n    DefaultIssue newIssue2 = newDefaultIssue(\"Avoid unused private methods such as 'myMethod()'.\", 13, RuleKey.of(\"squid\", \"NullDeref\"), \"ef23288705d1ef1e512448ace287586e\");\n    // Same as referenceIssue3\n    DefaultIssue newIssue3 = newDefaultIssue(\"Method 'avoidUtilityClass' is not designed for extension - needs to be abstract, final or empty.\", 9,\n      RuleKey.of(\"pmd\", \"UnusedLocalVariable\"), \"ed5cdd046fda82727d6fedd1d8e3a310\");\n    // New issue\n    DefaultIssue newIssue4 = newDefaultIssue(\"Method 'newViolation' is not designed for extension - needs to be abstract, final or empty.\", 17,\n      RuleKey.of(\"pmd\", \"UnusedLocalVariable\"), \"7d58ac9040c27e4ca2f11a0269e251e2\");\n    // Same as referenceIssue1\n    DefaultIssue newIssue5 = newDefaultIssue(\"Avoid unused local variables such as 'j'.\", 6, RuleKey.of(\"squid\", \"AvoidCycle\"), \"4432a2675ec3e1620daefe38386b51ef\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(\n      Arrays.asList(newIssue1, newIssue2, newIssue3, newIssue4, newIssue5),\n      Arrays.asList(referenceIssue1, referenceIssue2, referenceIssue3),\n      sourceHashHolder, result);\n\n    assertThat(result.matching(newIssue1)).isNull();\n    assertThat(result.matching(newIssue2)).isSameAs(referenceIssue2);\n    assertThat(result.matching(newIssue3)).isSameAs(referenceIssue3);\n    assertThat(result.matching(newIssue4)).isNull();\n    assertThat(result.matching(newIssue5)).isSameAs(referenceIssue1);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void checksum_should_have_greater_priority_than_line() {\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, null);\n\n    IssueDto referenceIssue1 = newReferenceIssue(\"message\", 1, \"squid\", \"AvoidCycle\", \"checksum1\");\n    IssueDto referenceIssue2 = newReferenceIssue(\"message\", 3, \"squid\", \"AvoidCycle\", \"checksum2\");\n\n    DefaultIssue newIssue1 = newDefaultIssue(\"message\", 3, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    DefaultIssue newIssue2 = newDefaultIssue(\"message\", 5, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum2\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue1, newIssue2), newArrayList(referenceIssue1, referenceIssue2), sourceHashHolder, result);\n    assertThat(result.matching(newIssue1)).isSameAs(referenceIssue1);\n    assertThat(result.matching(newIssue2)).isSameAs(referenceIssue2);\n  }","id":10405,"modified_method":"@Test\n  public void checksum_should_have_greater_priority_than_line() {\n    IssueDto referenceIssue1 = newReferenceIssue(\"message\", 1, \"squid\", \"AvoidCycle\", \"checksum1\");\n    IssueDto referenceIssue2 = newReferenceIssue(\"message\", 3, \"squid\", \"AvoidCycle\", \"checksum2\");\n\n    DefaultIssue newIssue1 = newDefaultIssue(\"message\", 3, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    DefaultIssue newIssue2 = newDefaultIssue(\"message\", 5, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum2\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue1, newIssue2), newArrayList(referenceIssue1, referenceIssue2), null, result);\n    assertThat(result.matching(newIssue1)).isSameAs(referenceIssue1);\n    assertThat(result.matching(newIssue2)).isSameAs(referenceIssue2);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void same_rule_and_line_message() {\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, null);\n\n    DefaultIssue newIssue = newDefaultIssue(\"message\", 1, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    IssueDto referenceIssue = newReferenceIssue(\"message\", 1, \"squid\", \"AvoidCycle\", \"checksum2\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), sourceHashHolder, result);\n    assertThat(result.matching(newIssue)).isSameAs(referenceIssue);\n  }","id":10406,"modified_method":"@Test\n  public void same_rule_and_line_message() {\n    DefaultIssue newIssue = newDefaultIssue(\"message\", 1, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    IssueDto referenceIssue = newReferenceIssue(\"message\", 1, \"squid\", \"AvoidCycle\", \"checksum2\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), null, result);\n    assertThat(result.matching(newIssue)).isSameAs(referenceIssue);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * SONAR-2928\n   */\n  @Test\n  public void same_rule_and_null_line_and_checksum_but_different_messages() {\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, null);\n\n    DefaultIssue newIssue = newDefaultIssue(\"new message\", null, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    IssueDto referenceIssue = newReferenceIssue(\"old message\", null, \"squid\", \"AvoidCycle\", \"checksum1\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), sourceHashHolder, result);\n    assertThat(result.matching(newIssue)).isSameAs(referenceIssue);\n  }","id":10407,"modified_method":"/**\n   * SONAR-2928\n   */\n  @Test\n  public void same_rule_and_null_line_and_checksum_but_different_messages() {\n    DefaultIssue newIssue = newDefaultIssue(\"new message\", null, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    IssueDto referenceIssue = newReferenceIssue(\"old message\", null, \"squid\", \"AvoidCycle\", \"checksum1\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), null, result);\n    assertThat(result.matching(newIssue)).isSameAs(referenceIssue);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_create_new_issue_when_same_rule_same_message_but_different_line_and_checksum() {\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, null);\n\n    DefaultIssue newIssue = newDefaultIssue(\"message\", 1, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    IssueDto referenceIssue = newReferenceIssue(\"message\", 2, \"squid\", \"AvoidCycle\", \"checksum2\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), sourceHashHolder, result);\n    assertThat(result.matching(newIssue)).isNull();\n  }","id":10408,"modified_method":"@Test\n  public void should_create_new_issue_when_same_rule_same_message_but_different_line_and_checksum() {\n    DefaultIssue newIssue = newDefaultIssue(\"message\", 1, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    IssueDto referenceIssue = newReferenceIssue(\"message\", 2, \"squid\", \"AvoidCycle\", \"checksum2\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), null, result);\n    assertThat(result.matching(newIssue)).isNull();\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void before() {\n    index = mock(SonarIndex.class);\n    lastSnapshots = mock(LastSnapshots.class);\n\n    project = mock(Project.class);\n    tracking = new IssueTracking();\n  }","id":10409,"modified_method":"@Before\n  public void before() {\n    lastSnapshots = mock(LastLineHashes.class);\n\n    project = mock(Project.class);\n    tracking = new IssueTracking();\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * SONAR-3072\n   */\n  @Test\n  public void should_track_issues_based_on_blocks_recognition_on_example2() throws Exception {\n    when(lastSnapshots.getSource(project)).thenReturn(load(\"example2-v1\"));\n    when(index.getSource(project)).thenReturn(load(\"example2-v2\"));\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, project);\n\n    IssueDto referenceIssue1 = newReferenceIssue(\"SystemPrintln\", 5, \"squid\", \"AvoidCycle\", null);\n\n    DefaultIssue newIssue1 = newDefaultIssue(\"SystemPrintln\", 6, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n    DefaultIssue newIssue2 = newDefaultIssue(\"SystemPrintln\", 10, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n    DefaultIssue newIssue3 = newDefaultIssue(\"SystemPrintln\", 14, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(\n      Arrays.asList(newIssue1, newIssue2, newIssue3),\n      Arrays.asList(referenceIssue1),\n      sourceHashHolder, result);\n\n    assertThat(result.matching(newIssue1)).isNull();\n    assertThat(result.matching(newIssue2)).isSameAs(referenceIssue1);\n    assertThat(result.matching(newIssue3)).isNull();\n  }","id":10410,"modified_method":"/**\n   * SONAR-3072\n   */\n  @Test\n  public void should_track_issues_based_on_blocks_recognition_on_example2() throws Exception {\n    initLastHashes(\"example2-v1\", \"example2-v2\");\n\n    IssueDto referenceIssue1 = newReferenceIssue(\"SystemPrintln\", 5, \"squid\", \"AvoidCycle\", null);\n\n    DefaultIssue newIssue1 = newDefaultIssue(\"SystemPrintln\", 6, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n    DefaultIssue newIssue2 = newDefaultIssue(\"SystemPrintln\", 10, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n    DefaultIssue newIssue3 = newDefaultIssue(\"SystemPrintln\", 14, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(\n      Arrays.asList(newIssue1, newIssue2, newIssue3),\n      Arrays.asList(referenceIssue1),\n      sourceHashHolder, result);\n\n    assertThat(result.matching(newIssue1)).isNull();\n    assertThat(result.matching(newIssue2)).isSameAs(referenceIssue1);\n    assertThat(result.matching(newIssue3)).isNull();\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_ignore_reference_measure_without_checksum() {\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, null);\n\n    DefaultIssue newIssue = newDefaultIssue(\"message\", 1, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n    IssueDto referenceIssue = newReferenceIssue(\"message\", 1, \"squid\", \"NullDeref\", null);\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), sourceHashHolder, result);\n    assertThat(result.matching(newIssue)).isNull();\n  }","id":10411,"modified_method":"@Test\n  public void should_ignore_reference_measure_without_checksum() {\n    DefaultIssue newIssue = newDefaultIssue(\"message\", 1, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n    IssueDto referenceIssue = newReferenceIssue(\"message\", 1, \"squid\", \"NullDeref\", null);\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), null, result);\n    assertThat(result.matching(newIssue)).isNull();\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_compare_issues_with_database_format() {\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, null);\n\n    // issue messages are trimmed and can be abbreviated when persisted in database.\n    // Comparing issue messages must use the same format.\n    DefaultIssue newIssue = newDefaultIssue(\"      message    \", 1, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    IssueDto referenceIssue = newReferenceIssue(\"message\", 1, \"squid\", \"AvoidCycle\", \"checksum2\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), sourceHashHolder, result);\n    assertThat(result.matching(newIssue)).isSameAs(referenceIssue);\n  }","id":10412,"modified_method":"@Test\n  public void should_compare_issues_with_database_format() {\n    // issue messages are trimmed and can be abbreviated when persisted in database.\n    // Comparing issue messages must use the same format.\n    DefaultIssue newIssue = newDefaultIssue(\"      message    \", 1, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    IssueDto referenceIssue = newReferenceIssue(\"message\", 1, \"squid\", \"AvoidCycle\", \"checksum2\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), null, result);\n    assertThat(result.matching(newIssue)).isSameAs(referenceIssue);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * SONAR-3072\n   */\n  @Test\n  public void should_track_issues_based_on_blocks_recognition_on_example1() throws Exception {\n    when(lastSnapshots.getSource(project)).thenReturn(load(\"example1-v1\"));\n    when(index.getSource(project)).thenReturn(load(\"example1-v2\"));\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, project);\n\n    IssueDto referenceIssue1 = newReferenceIssue(\"Indentation\", 7, \"squid\", \"AvoidCycle\", null);\n    IssueDto referenceIssue2 = newReferenceIssue(\"Indentation\", 11, \"squid\", \"AvoidCycle\", null);\n\n    DefaultIssue newIssue1 = newDefaultIssue(\"Indentation\", 9, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n    DefaultIssue newIssue2 = newDefaultIssue(\"Indentation\", 13, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n    DefaultIssue newIssue3 = newDefaultIssue(\"Indentation\", 17, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n    DefaultIssue newIssue4 = newDefaultIssue(\"Indentation\", 21, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(Arrays.asList(newIssue1, newIssue2, newIssue3, newIssue4), Arrays.asList(referenceIssue1, referenceIssue2), sourceHashHolder, result);\n\n    assertThat(result.matching(newIssue1)).isNull();\n    assertThat(result.matching(newIssue2)).isNull();\n    assertThat(result.matching(newIssue3)).isSameAs(referenceIssue1);\n    assertThat(result.matching(newIssue4)).isSameAs(referenceIssue2);\n  }","id":10413,"modified_method":"/**\n   * SONAR-3072\n   */\n  @Test\n  public void should_track_issues_based_on_blocks_recognition_on_example1() throws Exception {\n    initLastHashes(\"example1-v1\", \"example1-v2\");\n\n    IssueDto referenceIssue1 = newReferenceIssue(\"Indentation\", 7, \"squid\", \"AvoidCycle\", null);\n    IssueDto referenceIssue2 = newReferenceIssue(\"Indentation\", 11, \"squid\", \"AvoidCycle\", null);\n\n    DefaultIssue newIssue1 = newDefaultIssue(\"Indentation\", 9, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n    DefaultIssue newIssue2 = newDefaultIssue(\"Indentation\", 13, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n    DefaultIssue newIssue3 = newDefaultIssue(\"Indentation\", 17, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n    DefaultIssue newIssue4 = newDefaultIssue(\"Indentation\", 21, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n\n    IssueTrackingResult result = tracking.track(sourceHashHolder, Arrays.asList(referenceIssue1, referenceIssue2), Arrays.asList(newIssue1, newIssue2, newIssue3, newIssue4));\n\n    assertThat(result.matching(newIssue1)).isNull();\n    assertThat(result.matching(newIssue2)).isNull();\n    assertThat(result.matching(newIssue3)).isSameAs(referenceIssue1);\n    assertThat(result.matching(newIssue4)).isSameAs(referenceIssue2);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * SONAR-2928\n   */\n  @Test\n  public void issue_not_associated_with_line() throws Exception {\n    when(lastSnapshots.getSource(project)).thenReturn(load(\"example2-v1\"));\n    when(index.getSource(project)).thenReturn(load(\"example2-v2\"));\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, project);\n\n    DefaultIssue newIssue = newDefaultIssue(\"1 branch need to be covered\", null, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n    IssueDto referenceIssue = newReferenceIssue(\"2 branches need to be covered\", null, \"squid\", \"AvoidCycle\", null);\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), sourceHashHolder, result);\n\n    assertThat(result.matching(newIssue)).isEqualTo(referenceIssue);\n  }","id":10414,"modified_method":"/**\n   * SONAR-2928\n   */\n  @Test\n  public void issue_not_associated_with_line() throws Exception {\n    initLastHashes(\"example2-v1\", \"example2-v2\");\n\n    DefaultIssue newIssue = newDefaultIssue(\"1 branch need to be covered\", null, RuleKey.of(\"squid\", \"AvoidCycle\"), null);\n    IssueDto referenceIssue = newReferenceIssue(\"2 branches need to be covered\", null, \"squid\", \"AvoidCycle\", null);\n\n    IssueTrackingResult result = tracking.track(sourceHashHolder, newArrayList(referenceIssue), newArrayList(newIssue));\n\n    assertThat(result.matching(newIssue)).isEqualTo(referenceIssue);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void same_rule_and_line_and_checksum_but_different_messages() {\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, null);\n\n    DefaultIssue newIssue = newDefaultIssue(\"new message\", 1, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    IssueDto referenceIssue = newReferenceIssue(\"old message\", 1, \"squid\", \"AvoidCycle\", \"checksum1\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), sourceHashHolder, result);\n    assertThat(result.matching(newIssue)).isSameAs(referenceIssue);\n  }","id":10415,"modified_method":"@Test\n  public void same_rule_and_line_and_checksum_but_different_messages() {\n    DefaultIssue newIssue = newDefaultIssue(\"new message\", 1, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    IssueDto referenceIssue = newReferenceIssue(\"old message\", 1, \"squid\", \"AvoidCycle\", \"checksum1\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), null, result);\n    assertThat(result.matching(newIssue)).isSameAs(referenceIssue);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void new_issue_not_associated_with_line_should_not_cause_npe() throws Exception {\n    when(lastSnapshots.getSource(project)).thenReturn(load(\"example2-v1\"));\n    when(index.getSource(project)).thenReturn(load(\"example2-v2\"));\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, project);\n\n    DefaultIssue newIssue = newDefaultIssue(\"1 branch need to be covered\", null, RuleKey.of(\"squid\", \"AvoidCycle\"), \"foo\");\n    IssueDto referenceIssue = newReferenceIssue(\"Indentationd\", 7, \"squid\", \"AvoidCycle\", null);\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), sourceHashHolder, result);\n\n    assertThat(result.matched()).isEmpty();\n  }","id":10416,"modified_method":"@Test\n  public void new_issue_not_associated_with_line_should_not_cause_npe() throws Exception {\n    initLastHashes(\"example2-v1\", \"example2-v2\");\n\n    DefaultIssue newIssue = newDefaultIssue(\"1 branch need to be covered\", null, RuleKey.of(\"squid\", \"AvoidCycle\"), \"foo\");\n    IssueDto referenceIssue = newReferenceIssue(\"Indentationd\", 7, \"squid\", \"AvoidCycle\", null);\n\n    IssueTrackingResult result = tracking.track(sourceHashHolder, newArrayList(referenceIssue), newArrayList(newIssue));\n\n    assertThat(result.matched()).isEmpty();\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * SONAR-2812\n   */\n  @Test\n  public void same_checksum_and_rule_but_different_line_and_different_message() {\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, null);\n\n    DefaultIssue newIssue = newDefaultIssue(\"new message\", 1, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    IssueDto referenceIssue = newReferenceIssue(\"old message\", 2, \"squid\", \"AvoidCycle\", \"checksum1\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), sourceHashHolder, result);\n    assertThat(result.matching(newIssue)).isSameAs(referenceIssue);\n  }","id":10417,"modified_method":"/**\n   * SONAR-2812\n   */\n  @Test\n  public void same_checksum_and_rule_but_different_line_and_different_message() {\n    DefaultIssue newIssue = newDefaultIssue(\"new message\", 1, RuleKey.of(\"squid\", \"AvoidCycle\"), \"checksum1\");\n    IssueDto referenceIssue = newReferenceIssue(\"old message\", 2, \"squid\", \"AvoidCycle\", \"checksum1\");\n\n    IssueTrackingResult result = new IssueTrackingResult();\n    tracking.mapIssues(newArrayList(newIssue), newArrayList(referenceIssue), null, result);\n    assertThat(result.matching(newIssue)).isSameAs(referenceIssue);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void addBatchComponents() {\n    add(\n      new ProjectReferentialsProvider(),\n      DefaultResourceCreationLock.class,\n      DefaultPersistenceManager.class,\n      DependencyPersister.class,\n      EventPersister.class,\n      LinkPersister.class,\n      MeasurePersister.class,\n      DuplicationPersister.class,\n      DefaultResourcePersister.class,\n      SourcePersister.class,\n      CodeColorizers.class,\n      DefaultNotificationManager.class,\n      MetricProvider.class,\n      ProjectConfigurator.class,\n      DefaultIndex.class,\n      ResourceKeyMigration.class,\n      DefaultFileLinesContextFactory.class,\n      ProjectLock.class,\n      LastSnapshots.class,\n      Caches.class,\n      SnapshotCache.class,\n      ResourceCache.class,\n      ComponentDataCache.class,\n      ComponentDataPersister.class,\n      DefaultUserFinder.class,\n\n      // file system\n      InputPathCache.class,\n      PathResolver.class,\n\n      // issues\n      IssueUpdater.class,\n      FunctionExecutor.class,\n      IssueWorkflow.class,\n      DeprecatedViolations.class,\n      IssueCache.class,\n      ScanIssueStorage.class,\n      IssuePersister.class,\n      IssueNotifications.class,\n      DefaultProjectIssues.class,\n      IssueChangelogDebtCalculator.class,\n\n      // tests\n      TestPlanPerspectiveLoader.class,\n      TestablePerspectiveLoader.class,\n      TestPlanBuilder.class,\n      TestableBuilder.class,\n      ScanGraph.create(),\n      GraphPersister.class,\n\n      // lang\n      Languages.class,\n      DefaultLanguagesReferential.class,\n      HighlightableBuilder.class,\n      SymbolizableBuilder.class,\n\n      // technical debt\n      DefaultTechnicalDebtModel.class,\n\n      // Differential periods\n      PeriodsDefinition.class,\n\n      // Measures\n      MeasureCache.class,\n\n      // Rules\n      new RulesProvider(),\n      new DebtModelProvider(),\n\n      // Duplications\n      BlockCache.class,\n      DuplicationCache.class,\n\n      ProjectSettings.class);\n  }","id":10418,"modified_method":"private void addBatchComponents() {\n    add(\n      new ProjectReferentialsProvider(),\n      DefaultResourceCreationLock.class,\n      DefaultPersistenceManager.class,\n      DependencyPersister.class,\n      EventPersister.class,\n      LinkPersister.class,\n      MeasurePersister.class,\n      DuplicationPersister.class,\n      DefaultResourcePersister.class,\n      SourcePersister.class,\n      CodeColorizers.class,\n      DefaultNotificationManager.class,\n      MetricProvider.class,\n      ProjectConfigurator.class,\n      DefaultIndex.class,\n      ResourceKeyMigration.class,\n      DefaultFileLinesContextFactory.class,\n      ProjectLock.class,\n      LastLineHashes.class,\n      Caches.class,\n      SnapshotCache.class,\n      ResourceCache.class,\n      ComponentDataCache.class,\n      ComponentDataPersister.class,\n      DefaultUserFinder.class,\n\n      // file system\n      InputPathCache.class,\n      PathResolver.class,\n\n      // issues\n      IssueUpdater.class,\n      FunctionExecutor.class,\n      IssueWorkflow.class,\n      DeprecatedViolations.class,\n      IssueCache.class,\n      ScanIssueStorage.class,\n      IssuePersister.class,\n      IssueNotifications.class,\n      DefaultProjectIssues.class,\n      IssueChangelogDebtCalculator.class,\n\n      // tests\n      TestPlanPerspectiveLoader.class,\n      TestablePerspectiveLoader.class,\n      TestPlanBuilder.class,\n      TestableBuilder.class,\n      ScanGraph.create(),\n      GraphPersister.class,\n\n      // lang\n      Languages.class,\n      DefaultLanguagesReferential.class,\n      HighlightableBuilder.class,\n      SymbolizableBuilder.class,\n\n      // technical debt\n      DefaultTechnicalDebtModel.class,\n\n      // Differential periods\n      PeriodsDefinition.class,\n\n      // Measures\n      MeasureCache.class,\n\n      // Rules\n      new RulesProvider(),\n      new DebtModelProvider(),\n\n      // Duplications\n      BlockCache.class,\n      DuplicationCache.class,\n\n      ProjectSettings.class);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void initHashes() {\n    hashedReference = HashedSequence.wrap(new StringText(getReferenceSource()), StringTextComparator.IGNORE_WHITESPACE);\n    hashedSource = HashedSequence.wrap(new StringText(getSource()), StringTextComparator.IGNORE_WHITESPACE);\n  }","id":10419,"modified_method":"private void initHashes() {\n    if (hashedSource == null) {\n      hashedSource = FileHashes.create(inputFile.lineHashes());\n      Status status = inputFile.status();\n      if (status == Status.ADDED) {\n        hashedReference = null;\n      } else if (status == Status.SAME) {\n        hashedReference = hashedSource;\n      } else {\n        String[] lineHashes = lastSnapshots.getLineHashes(inputFile.key());\n        hashedReference = lineHashes != null ? FileHashes.create(lineHashes) : null;\n      }\n    }\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public HashedSequence<StringText> getHashedReference() {\n    initHashesIfNull(hashedReference);\n    return hashedReference;\n  }","id":10420,"modified_method":"@CheckForNull\n  public FileHashes getHashedReference() {\n    initHashes();\n    return hashedReference;\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public HashedSequence<StringText> getHashedSource() {\n    initHashesIfNull(hashedSource);\n    return hashedSource;\n  }","id":10421,"modified_method":"public FileHashes getHashedSource() {\n    initHashes();\n    return hashedSource;\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_lazy_load_reference_source() {\n    final String source = \"source\";\n    when(lastSnapshots.getSource(resource)).thenReturn(source);\n\n    assertThat(sourceHashHolder.getReferenceSource()).isEqualTo(source);\n    verify(lastSnapshots).getSource(resource);\n\n    assertThat(sourceHashHolder.getReferenceSource()).isEqualTo(source);\n    Mockito.verifyNoMoreInteractions(lastSnapshots);\n  }","id":10422,"modified_method":"@Test\n  public void should_lazy_load_reference_hashes_when_status_changed() {\n    final String source = \"source\";\n    String key = \"foo:src/Foo.java\";\n    when(file.lineHashes()).thenReturn(new byte[][] {md5(source)});\n    when(file.key()).thenReturn(key);\n    when(file.status()).thenReturn(InputFile.Status.CHANGED);\n    when(lastSnapshots.getLineHashes(key)).thenReturn(new String[] {md5Hex(source)});\n\n    assertThat(sourceHashHolder.getHashedReference().getHash(1)).isEqualTo(md5Hex(source));\n    verify(lastSnapshots).getLineHashes(key);\n\n    assertThat(sourceHashHolder.getHashedReference().getHash(1)).isEqualTo(md5Hex(source));\n    Mockito.verifyNoMoreInteractions(lastSnapshots);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_lazy_load_source() {\n    final String source = \"source\";\n    when(index.getSource(resource)).thenReturn(source);\n\n    assertThat(sourceHashHolder.getSource()).isEqualTo(source);\n    verify(index).getSource(resource);\n\n    assertThat(sourceHashHolder.getSource()).isEqualTo(source);\n    Mockito.verifyNoMoreInteractions(index);\n  }","id":10423,"modified_method":"@Test\n  public void should_lazy_load_line_hashes() {\n    final String source = \"source\";\n    when(file.lineHashes()).thenReturn(new byte[][] {md5(source), null});\n\n    assertThat(sourceHashHolder.getHashedSource().getHash(1)).isEqualTo(md5Hex(source));\n    assertThat(sourceHashHolder.getHashedSource().getHash(2)).isEqualTo(\"\");\n    verify(file).lineHashes();\n    verify(file).key();\n    verify(file).status();\n\n    assertThat(sourceHashHolder.getHashedSource().getHash(1)).isEqualTo(md5Hex(source));\n    Mockito.verifyNoMoreInteractions(file);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Before\n  public void setUp() {\n    index = mock(SonarIndex.class);\n    lastSnapshots = mock(LastSnapshots.class);\n    resource = mock(Resource.class);\n\n    sourceHashHolder = new SourceHashHolder(index, lastSnapshots, resource);\n  }","id":10424,"modified_method":"@Before\n  public void setUp() {\n    lastSnapshots = mock(LastLineHashes.class);\n    file = mock(DefaultInputFile.class);\n\n    sourceHashHolder = new SourceHashHolder(file, lastSnapshots);\n  }","commit_id":"0c8e5f2b0a7e36bdc7e0ee67b28982c0e7749995","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void start( BundleContext bundleContext ) throws Exception\n    {\n        ExampleHostService hortonCommunicator = new ExampleHostService() {\n            public String askHorton( String aQuestion )\n            {\n                return \"a person is a person, no matter how small\";\n            }\n        };\n        hortonCommRegistration = bundleContext.registerService(\n            ExampleHostService.class.getName(), hortonCommunicator, null);\n\n        System.out.println(\"Horton is listening to the Whos\");\n    }","id":10425,"modified_method":"public void start( BundleContext bundleContext ) throws Exception\n    {\n        ExampleHostService hortonCommunicator = new ExampleHostService() {\n            public String askHorton( String aQuestion )\n            {\n                System.out.println(\"100 percent!\");\n                whovilleCommunicationCount++;\n                return \"a person is a person, no matter how small\";\n            }\n        };\n        hortonCommRegistration = bundleContext.registerService(\n            ExampleHostService.class.getName(), hortonCommunicator, null);\n\n        System.out.println(\"Horton is listening to the Whos\");\n    }","commit_id":"45d441172ecf599d24f7cc886c48f6ce4f961b4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldAllowAccessToOSGiServices() throws Exception\n    {\n        String expectedBundleSymbolicName = \"OSGiServiceProviderBundle\";\n        InputStream bundleStream = newBundle()\n                .add( ServiceProviderActivator.class )\n                .add( ExampleServiceImpl.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.service\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.service, org.neo4j.server.osgi.services, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, ServiceProviderActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"service-impl.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        Bundle serviceProviderBundle = container.getBundles()[1];\n        assertNotNull( serviceProviderBundle );\n        assertThat( serviceProviderBundle.getState(), is( Bundle.ACTIVE ) );\n        assertThat( (String) serviceProviderBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        // should have 1 registered service\n        BundleContext bundleContext = serviceProviderBundle.getBundleContext();\n        ServiceReference[] registeredServices = bundleContext.getServiceReferences(\n                ExampleBundleService.class.getName(), null );\n        ExampleBundleService service = (ExampleBundleService) bundleContext.getService( registeredServices[0] );\n        assertThat( service, is( notNullValue() ) );\n\n        container.shutdown();\n    }","id":10426,"modified_method":"@Test\n    public void shouldAllowAccessToOSGiServices() throws Exception\n    {\n        createContainer();\n        String expectedBundleSymbolicName = \"OSGiServiceProviderBundle\";\n        InputStream bundleStream = newBundle()\n                .add( ServiceProviderActivator.class )\n                .add( ExampleServiceImpl.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.service\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.service, org.neo4j.server.osgi.services, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, ServiceProviderActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"service-impl.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        Bundle serviceProviderBundle = container.getBundles()[1];\n        assertNotNull( serviceProviderBundle );\n        assertThat( serviceProviderBundle.getState(), is( Bundle.ACTIVE ) );\n        assertThat( (String) serviceProviderBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        // should have 1 registered service\n        BundleContext bundleContext = serviceProviderBundle.getBundleContext();\n        ServiceReference[] registeredServices = bundleContext.getServiceReferences(\n                ExampleBundleService.class.getName(), null );\n        ExampleBundleService service = (ExampleBundleService) bundleContext.getService( registeredServices[0] );\n        assertThat( service, is( notNullValue() ) );\n\n        container.shutdown();\n    }","commit_id":"45d441172ecf599d24f7cc886c48f6ce4f961b4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateFrameworkDuringConstruction() throws Exception\n    {\n        assertThat( container.getFramework(), is( notNullValue() ) );\n        assertThat( container.getFramework().getState(), is( Bundle.INSTALLED ) );\n\n    }","id":10427,"modified_method":"@Test\n    public void shouldCreateFrameworkDuringConstruction() throws Exception\n    {\n        createContainer();\n        assertThat( container.getFramework(), is( notNullValue() ) );\n        assertThat( container.getFramework().getState(), is( Bundle.INSTALLED ) );\n\n    }","commit_id":"45d441172ecf599d24f7cc886c48f6ce4f961b4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateSystemBundle() throws Exception\n    {\n        container.start();\n\n        // The system bundle should always be bundle zero,\n        // and can otherwise be identified by the system\n        // packages it provides\n        Bundle systemBundle = container.getBundles()[0];\n\n        assertThat( (String) systemBundle.getHeaders().get( Constants.EXPORT_PACKAGE ), containsString( \"org.osgi.framework\" ) );\n\n        container.shutdown();\n    }","id":10428,"modified_method":"@Test\n    public void shouldCreateSystemBundle() throws Exception\n    {\n        createContainer();\n        container.start();\n\n        // The system bundle should always be bundle zero,\n        // and can otherwise be identified by the system\n        // packages it provides\n        Bundle systemBundle = container.getBundles()[0];\n\n        assertThat( (String) systemBundle.getHeaders().get( Constants.EXPORT_PACKAGE ), containsString( \"org.osgi.framework\" ) );\n\n        container.shutdown();\n    }","commit_id":"45d441172ecf599d24f7cc886c48f6ce4f961b4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldActivateOSGiAwareBundles() throws Exception\n    {\n        String expectedBundleSymbolicName = \"OSGiAwareBundle\";\n        InputStream bundleStream = newBundle()\n                .add( LifecycleActivator.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.aware\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.aware, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, LifecycleActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"aware.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        Bundle awareBundle = container.getBundles()[1];\n\n        assertNotNull( awareBundle );\n\n        assertThat( awareBundle.getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","id":10429,"modified_method":"@Test\n    public void shouldActivateOSGiAwareBundles() throws Exception\n    {\n        createContainer();\n        String expectedBundleSymbolicName = \"OSGiAwareBundle\";\n        InputStream bundleStream = newBundle()\n                .add( LifecycleActivator.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.aware\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.aware, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, LifecycleActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"aware.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        Bundle awareBundle = container.getBundles()[1];\n\n        assertNotNull( awareBundle );\n\n        assertThat( awareBundle.getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","commit_id":"45d441172ecf599d24f7cc886c48f6ce4f961b4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    @Ignore(\"until it works\")\n    public void shouldProvideHostServiceToOSGiBundles() throws IOException, BundleException, InvalidSyntaxException, InterruptedException\n    {\n        String expectedBundleSymbolicName = \"ServiceConsumerBundle\";\n        InputStream bundleStream = newBundle()\n                .add( WhovilleActivator.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.consumer\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.consumer, org.neo4j.server.osgi.services, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, WhovilleActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"consumer-impl.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        ServiceReference[] registeredServices = container.getFramework().getRegisteredServices();\n        assertNotNull( registeredServices );\n\n        Bundle serviceConsumerBundle = container.getBundles()[1];\n        BundleContext bundleContext = serviceConsumerBundle.getBundleContext();\n        assertThat( serviceConsumerBundle.getState(), is( Bundle.ACTIVE ) );\n        assertThat( (String) serviceConsumerBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n\n        ServiceReference[] hostServices = bundleContext.getServiceReferences(\n                ExampleHostService.class.getName(), null );\n        ExampleHostService service = (ExampleHostService) bundleContext.getService( hostServices[0] );\n        assertNotNull( service );\n\n        container.shutdown();\n    }","id":10430,"modified_method":"@Test\n    public void shouldProvideHostServiceToOSGiBundles() throws IOException, BundleException, InvalidSyntaxException, InterruptedException\n    {\n        HortonActivator hortonActivator = new HortonActivator();\n        createContainer( hortonActivator );\n        String expectedBundleSymbolicName = \"WhovilleBundle\";\n        InputStream bundleStream = newBundle()\n                .add( WhovilleActivator.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.consumer\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.consumer, org.neo4j.server.osgi.services, org.osgi.framework, org.osgi.util.tracker\" )\n                .set( Constants.BUNDLE_ACTIVATOR, WhovilleActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"whoville.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        ServiceReference[] registeredServices = container.getFramework().getRegisteredServices();\n        assertNotNull( registeredServices );\n\n        Bundle serviceConsumerBundle = container.getBundles()[1];\n        BundleContext bundleContext = serviceConsumerBundle.getBundleContext();\n        assertThat( (String) serviceConsumerBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        assertThat( serviceConsumerBundle.getState(), is( Bundle.ACTIVE ) );\n\n        ServiceReference[] hostServices = bundleContext.getServiceReferences(\n                ExampleHostService.class.getName(), null );\n        ExampleHostService service = (ExampleHostService) bundleContext.getService( hostServices[0] );\n        assertNotNull( service );\n\n        assertThat( hortonActivator.whovilleCommunicationCount, is( 1 ) );\n\n        container.shutdown();\n    }","commit_id":"45d441172ecf599d24f7cc886c48f6ce4f961b4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Before\n    public void cleanupFrameworkDirectories() throws IOException\n    {\n        // set up the logging\n        logAppender = new InMemoryAppender( OSGiContainer.log );\n\n        // Don't assume that target directory exists (like when running in an IDE)\n        File targetDirectory = new File( \"target\" + File.separator + \"osgi\" );\n        if ( !targetDirectory.exists() )\n            targetDirectory.mkdirs();\n\n        File bundleDirectory = new File( targetDirectory, OSGiContainer.DEFAULT_BUNDLE_DIRECTORY );\n        FileUtils.deleteDirectory( bundleDirectory );\n\n        File cacheDirectory = new File( targetDirectory, OSGiContainer.DEFAULT_CACHE_DIRECTORY );\n        FileUtils.deleteDirectory( cacheDirectory );\n\n        this.container = new OSGiContainer( bundleDirectory.getPath(), cacheDirectory.getPath(), new HostBridge(), new HortonActivator() );\n    }","id":10431,"modified_method":"@Before\n    public void cleanupFrameworkDirectories() throws IOException\n    {\n        // set up the logging\n        logAppender = new InMemoryAppender( OSGiContainer.log );\n\n        // Don't assume that target directory exists (like when running in an IDE)\n        File targetDirectory = new File( \"target\" + File.separator + \"osgi\" );\n        if ( !targetDirectory.exists() )\n            targetDirectory.mkdirs();\n\n        bundleDirectory = new File( targetDirectory, OSGiContainer.DEFAULT_BUNDLE_DIRECTORY );\n        FileUtils.deleteDirectory( bundleDirectory );\n\n        cacheDirectory = new File( targetDirectory, OSGiContainer.DEFAULT_CACHE_DIRECTORY );\n        FileUtils.deleteDirectory( cacheDirectory );\n\n    }","commit_id":"45d441172ecf599d24f7cc886c48f6ce4f961b4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateBundleDirectoryDuringConstructionIfItDoesntExist() throws BundleException, InterruptedException\n    {\n        File bundleDirectory = new File( container.getBundleDirectory() );\n\n        assertTrue( bundleDirectory.exists() );\n\n        container.shutdown();\n    }","id":10432,"modified_method":"@Test\n    public void shouldCreateBundleDirectoryDuringConstructionIfItDoesntExist() throws BundleException, InterruptedException\n    {\n        createContainer();\n        File bundleDirectory = new File( container.getBundleDirectory() );\n\n        assertTrue( bundleDirectory.exists() );\n\n        container.shutdown();\n    }","commit_id":"45d441172ecf599d24f7cc886c48f6ce4f961b4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldStartMinimalFramework() throws Exception\n    {\n        container.start();\n\n        assertThat( container.getFramework().getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","id":10433,"modified_method":"@Test\n    public void shouldStartMinimalFramework() throws Exception\n    {\n        createContainer();\n        container.start();\n\n        assertThat( container.getFramework().getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","commit_id":"45d441172ecf599d24f7cc886c48f6ce4f961b4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldLoadLibraryBundle() throws Exception\n    {\n        String expectedBundleSymbolicName = \"HelloTinyBundle\";\n        InputStream bundleStream = newBundle()\n                .add( Hello.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.hello\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.hello\" )\n                .build( withBnd() );\n        File helloJar = new File( container.getBundleDirectory(), \"hello.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( helloJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        // should be bundle 1\n        Bundle helloBundle = container.getBundles()[1];\n\n        assertThat( (String) helloBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        assertThat( container.getFramework().getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","id":10434,"modified_method":"@Test\n    public void shouldLoadLibraryBundle() throws Exception\n    {\n        createContainer();\n        String expectedBundleSymbolicName = \"HelloTinyBundle\";\n        InputStream bundleStream = newBundle()\n                .add( Hello.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.hello\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.hello\" )\n                .build( withBnd() );\n        File helloJar = new File( container.getBundleDirectory(), \"hello.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( helloJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        // should be bundle 1\n        Bundle helloBundle = container.getBundles()[1];\n\n        assertThat( (String) helloBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        assertThat( container.getFramework().getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","commit_id":"45d441172ecf599d24f7cc886c48f6ce4f961b4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void start( BundleContext bundleContext ) throws Exception\n    {\n        hortonCommunicator = (ExampleHostService)bundleContext.getService( bundleContext.getServiceReference( ExampleHostService.class.toString()) );\n\n        System.out.println( \"OSGi service consumer bundle started\" );\n    }","id":10435,"modified_method":"public void start( BundleContext bundleContext ) throws Exception\n    {\n        this.bundleContext = bundleContext;\n\n        synchronized (this)\n        {\n            bundleContext.addServiceListener(this);\n\n            ServiceReference[] refs = bundleContext.getServiceReferences(\n                ExampleHostService.class.getName(), null);\n\n            if (refs != null)\n            {\n                hortonCommunicator = (ExampleHostService) bundleContext.getService(refs[0]);\n                hortonCommunicator.askHorton( \"Can you hear us?\" );\n            }\n        }\n\n\n        System.out.println( \"Whoville is looking for Horton\" );\n    }","commit_id":"45d441172ecf599d24f7cc886c48f6ce4f961b4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void stop( BundleContext bundleContext ) throws Exception\n    {\n        System.out.println( \"OSGi service consumer bundle stopped\" );\n    }","id":10436,"modified_method":"public void stop( BundleContext bundleContext ) throws Exception\n    {\n        System.out.println( \"Whoville has given up on Horton\" );\n    }","commit_id":"45d441172ecf599d24f7cc886c48f6ce4f961b4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void start( BundleContext bundleContext ) throws Exception\n    {\n        ExampleHostService hortonCommunicator = new ExampleHostService() {\n            public String askHorton( String aQuestion )\n            {\n                return \"a person is a person, no matter how small\";\n            }\n        };\n        hortonCommRegistration = bundleContext.registerService(\n            ExampleHostService.class.getName(), hortonCommunicator, null);\n\n        System.out.println(\"Horton is listening to the Whos\");\n    }","id":10437,"modified_method":"public void start( BundleContext bundleContext ) throws Exception\n    {\n        ExampleHostService hortonCommunicator = new ExampleHostService() {\n            public String askHorton( String aQuestion )\n            {\n                System.out.println(\"100 percent!\");\n                whovilleCommunicationCount++;\n                return \"a person is a person, no matter how small\";\n            }\n        };\n        hortonCommRegistration = bundleContext.registerService(\n            ExampleHostService.class.getName(), hortonCommunicator, null);\n\n        System.out.println(\"Horton is listening to the Whos\");\n    }","commit_id":"68932acb5f96ae38a8c6378d576c431a666012d4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Before\n    public void cleanupFrameworkDirectories() throws IOException\n    {\n        // set up the logging\n        logAppender = new InMemoryAppender( OSGiContainer.log );\n\n        // Don't assume that target directory exists (like when running in an IDE)\n        File targetDirectory = new File( \"target\" + File.separator + \"osgi\" );\n        if ( !targetDirectory.exists() )\n            targetDirectory.mkdirs();\n\n        File bundleDirectory = new File( targetDirectory, OSGiContainer.DEFAULT_BUNDLE_DIRECTORY );\n        FileUtils.deleteDirectory( bundleDirectory );\n\n        File cacheDirectory = new File( targetDirectory, OSGiContainer.DEFAULT_CACHE_DIRECTORY );\n        FileUtils.deleteDirectory( cacheDirectory );\n\n        this.container = new OSGiContainer( bundleDirectory.getPath(), cacheDirectory.getPath(), new HostBridge(), new HortonActivator() );\n    }","id":10438,"modified_method":"@Before\n    public void cleanupFrameworkDirectories() throws IOException\n    {\n        // set up the logging\n        logAppender = new InMemoryAppender( OSGiContainer.log );\n\n        // Don't assume that target directory exists (like when running in an IDE)\n        File targetDirectory = new File( \"target\" + File.separator + \"osgi\" );\n        if ( !targetDirectory.exists() )\n            targetDirectory.mkdirs();\n\n        bundleDirectory = new File( targetDirectory, OSGiContainer.DEFAULT_BUNDLE_DIRECTORY );\n        FileUtils.deleteDirectory( bundleDirectory );\n\n        cacheDirectory = new File( targetDirectory, OSGiContainer.DEFAULT_CACHE_DIRECTORY );\n        FileUtils.deleteDirectory( cacheDirectory );\n\n    }","commit_id":"68932acb5f96ae38a8c6378d576c431a666012d4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldStartMinimalFramework() throws Exception\n    {\n        container.start();\n\n        assertThat( container.getFramework().getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","id":10439,"modified_method":"@Test\n    public void shouldStartMinimalFramework() throws Exception\n    {\n        createContainer();\n        container.start();\n\n        assertThat( container.getFramework().getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","commit_id":"68932acb5f96ae38a8c6378d576c431a666012d4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldLoadLibraryBundle() throws Exception\n    {\n        String expectedBundleSymbolicName = \"HelloTinyBundle\";\n        InputStream bundleStream = newBundle()\n                .add( Hello.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.hello\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.hello\" )\n                .build( withBnd() );\n        File helloJar = new File( container.getBundleDirectory(), \"hello.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( helloJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        // should be bundle 1\n        Bundle helloBundle = container.getBundles()[1];\n\n        assertThat( (String) helloBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        assertThat( container.getFramework().getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","id":10440,"modified_method":"@Test\n    public void shouldLoadLibraryBundle() throws Exception\n    {\n        createContainer();\n        String expectedBundleSymbolicName = \"HelloTinyBundle\";\n        InputStream bundleStream = newBundle()\n                .add( Hello.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.hello\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.hello\" )\n                .build( withBnd() );\n        File helloJar = new File( container.getBundleDirectory(), \"hello.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( helloJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        // should be bundle 1\n        Bundle helloBundle = container.getBundles()[1];\n\n        assertThat( (String) helloBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        assertThat( container.getFramework().getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","commit_id":"68932acb5f96ae38a8c6378d576c431a666012d4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    @Ignore(\"until it works\")\n    public void shouldProvideHostServiceToOSGiBundles() throws IOException, BundleException, InvalidSyntaxException, InterruptedException\n    {\n        String expectedBundleSymbolicName = \"ServiceConsumerBundle\";\n        InputStream bundleStream = newBundle()\n                .add( WhovilleActivator.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.consumer\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.consumer, org.neo4j.server.osgi.services, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, WhovilleActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"consumer-impl.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        ServiceReference[] registeredServices = container.getFramework().getRegisteredServices();\n        assertNotNull( registeredServices );\n\n        Bundle serviceConsumerBundle = container.getBundles()[1];\n        BundleContext bundleContext = serviceConsumerBundle.getBundleContext();\n        assertThat( serviceConsumerBundle.getState(), is( Bundle.ACTIVE ) );\n        assertThat( (String) serviceConsumerBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n\n        ServiceReference[] hostServices = bundleContext.getServiceReferences(\n                ExampleHostService.class.getName(), null );\n        ExampleHostService service = (ExampleHostService) bundleContext.getService( hostServices[0] );\n        assertNotNull( service );\n\n        container.shutdown();\n    }","id":10441,"modified_method":"@Test\n    public void shouldProvideHostServiceToOSGiBundles() throws IOException, BundleException, InvalidSyntaxException, InterruptedException\n    {\n        HortonActivator hortonActivator = new HortonActivator();\n        createContainer( hortonActivator );\n        String expectedBundleSymbolicName = \"WhovilleBundle\";\n        InputStream bundleStream = newBundle()\n                .add( WhovilleActivator.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.consumer\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.consumer, org.neo4j.server.osgi.services, org.osgi.framework, org.osgi.util.tracker\" )\n                .set( Constants.BUNDLE_ACTIVATOR, WhovilleActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"whoville.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        ServiceReference[] registeredServices = container.getFramework().getRegisteredServices();\n        assertNotNull( registeredServices );\n\n        Bundle serviceConsumerBundle = container.getBundles()[1];\n        BundleContext bundleContext = serviceConsumerBundle.getBundleContext();\n        assertThat( (String) serviceConsumerBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        assertThat( serviceConsumerBundle.getState(), is( Bundle.ACTIVE ) );\n\n        ServiceReference[] hostServices = bundleContext.getServiceReferences(\n                ExampleHostService.class.getName(), null );\n        ExampleHostService service = (ExampleHostService) bundleContext.getService( hostServices[0] );\n        assertNotNull( service );\n\n        assertThat( hortonActivator.whovilleCommunicationCount, is( 1 ) );\n\n        container.shutdown();\n    }","commit_id":"68932acb5f96ae38a8c6378d576c431a666012d4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldActivateOSGiAwareBundles() throws Exception\n    {\n        String expectedBundleSymbolicName = \"OSGiAwareBundle\";\n        InputStream bundleStream = newBundle()\n                .add( LifecycleActivator.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.aware\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.aware, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, LifecycleActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"aware.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        Bundle awareBundle = container.getBundles()[1];\n\n        assertNotNull( awareBundle );\n\n        assertThat( awareBundle.getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","id":10442,"modified_method":"@Test\n    public void shouldActivateOSGiAwareBundles() throws Exception\n    {\n        createContainer();\n        String expectedBundleSymbolicName = \"OSGiAwareBundle\";\n        InputStream bundleStream = newBundle()\n                .add( LifecycleActivator.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.aware\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.aware, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, LifecycleActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"aware.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        Bundle awareBundle = container.getBundles()[1];\n\n        assertNotNull( awareBundle );\n\n        assertThat( awareBundle.getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","commit_id":"68932acb5f96ae38a8c6378d576c431a666012d4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldAllowAccessToOSGiServices() throws Exception\n    {\n        String expectedBundleSymbolicName = \"OSGiServiceProviderBundle\";\n        InputStream bundleStream = newBundle()\n                .add( ServiceProviderActivator.class )\n                .add( ExampleServiceImpl.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.service\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.service, org.neo4j.server.osgi.services, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, ServiceProviderActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"service-impl.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        Bundle serviceProviderBundle = container.getBundles()[1];\n        assertNotNull( serviceProviderBundle );\n        assertThat( serviceProviderBundle.getState(), is( Bundle.ACTIVE ) );\n        assertThat( (String) serviceProviderBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        // should have 1 registered service\n        BundleContext bundleContext = serviceProviderBundle.getBundleContext();\n        ServiceReference[] registeredServices = bundleContext.getServiceReferences(\n                ExampleBundleService.class.getName(), null );\n        ExampleBundleService service = (ExampleBundleService) bundleContext.getService( registeredServices[0] );\n        assertThat( service, is( notNullValue() ) );\n\n        container.shutdown();\n    }","id":10443,"modified_method":"@Test\n    public void shouldAllowAccessToOSGiServices() throws Exception\n    {\n        createContainer();\n        String expectedBundleSymbolicName = \"OSGiServiceProviderBundle\";\n        InputStream bundleStream = newBundle()\n                .add( ServiceProviderActivator.class )\n                .add( ExampleServiceImpl.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.service\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.service, org.neo4j.server.osgi.services, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, ServiceProviderActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"service-impl.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        Bundle serviceProviderBundle = container.getBundles()[1];\n        assertNotNull( serviceProviderBundle );\n        assertThat( serviceProviderBundle.getState(), is( Bundle.ACTIVE ) );\n        assertThat( (String) serviceProviderBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        // should have 1 registered service\n        BundleContext bundleContext = serviceProviderBundle.getBundleContext();\n        ServiceReference[] registeredServices = bundleContext.getServiceReferences(\n                ExampleBundleService.class.getName(), null );\n        ExampleBundleService service = (ExampleBundleService) bundleContext.getService( registeredServices[0] );\n        assertThat( service, is( notNullValue() ) );\n\n        container.shutdown();\n    }","commit_id":"68932acb5f96ae38a8c6378d576c431a666012d4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateBundleDirectoryDuringConstructionIfItDoesntExist() throws BundleException, InterruptedException\n    {\n        File bundleDirectory = new File( container.getBundleDirectory() );\n\n        assertTrue( bundleDirectory.exists() );\n\n        container.shutdown();\n    }","id":10444,"modified_method":"@Test\n    public void shouldCreateBundleDirectoryDuringConstructionIfItDoesntExist() throws BundleException, InterruptedException\n    {\n        createContainer();\n        File bundleDirectory = new File( container.getBundleDirectory() );\n\n        assertTrue( bundleDirectory.exists() );\n\n        container.shutdown();\n    }","commit_id":"68932acb5f96ae38a8c6378d576c431a666012d4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateSystemBundle() throws Exception\n    {\n        container.start();\n\n        // The system bundle should always be bundle zero,\n        // and can otherwise be identified by the system\n        // packages it provides\n        Bundle systemBundle = container.getBundles()[0];\n\n        assertThat( (String) systemBundle.getHeaders().get( Constants.EXPORT_PACKAGE ), containsString( \"org.osgi.framework\" ) );\n\n        container.shutdown();\n    }","id":10445,"modified_method":"@Test\n    public void shouldCreateSystemBundle() throws Exception\n    {\n        createContainer();\n        container.start();\n\n        // The system bundle should always be bundle zero,\n        // and can otherwise be identified by the system\n        // packages it provides\n        Bundle systemBundle = container.getBundles()[0];\n\n        assertThat( (String) systemBundle.getHeaders().get( Constants.EXPORT_PACKAGE ), containsString( \"org.osgi.framework\" ) );\n\n        container.shutdown();\n    }","commit_id":"68932acb5f96ae38a8c6378d576c431a666012d4","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateFrameworkDuringConstruction() throws Exception\n    {\n        assertThat( container.getFramework(), is( notNullValue() ) );\n        assertThat( container.getFramework().getState(), is( Bundle.INSTALLED ) );\n\n    }","id":10446,"modified_method":"@Test\n    public void shouldCreateFrameworkDuringConstruction() throws Exception\n    {\n        createContainer();\n        assertThat( container.getFramework(), is( notNullValue() ) );\n        assertThat( container.getFramework().getState(), is( Bundle.INSTALLED ) );\n\n    }","commit_id":"68932acb5f96ae38a8c6378d576c431a666012d4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void start( BundleContext bundleContext ) throws Exception\n    {\n        hortonCommunicator = (ExampleHostService)bundleContext.getService( bundleContext.getServiceReference( ExampleHostService.class.toString()) );\n\n        System.out.println( \"OSGi service consumer bundle started\" );\n    }","id":10447,"modified_method":"public void start( BundleContext bundleContext ) throws Exception\n    {\n        this.bundleContext = bundleContext;\n\n        synchronized (this)\n        {\n            bundleContext.addServiceListener(this);\n\n            ServiceReference[] refs = bundleContext.getServiceReferences(\n                ExampleHostService.class.getName(), null);\n\n            if (refs != null)\n            {\n                hortonCommunicator = (ExampleHostService) bundleContext.getService(refs[0]);\n                hortonCommunicator.askHorton( \"Can you hear us?\" );\n            }\n        }\n\n\n        System.out.println( \"Whoville is looking for Horton\" );\n    }","commit_id":"68932acb5f96ae38a8c6378d576c431a666012d4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void stop( BundleContext bundleContext ) throws Exception\n    {\n        System.out.println( \"OSGi service consumer bundle stopped\" );\n    }","id":10448,"modified_method":"public void stop( BundleContext bundleContext ) throws Exception\n    {\n        System.out.println( \"Whoville has given up on Horton\" );\n    }","commit_id":"68932acb5f96ae38a8c6378d576c431a666012d4","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void start( BundleContext bundleContext ) throws Exception\n    {\n        ExampleHostService hortonCommunicator = new ExampleHostService() {\n            public String askHorton( String aQuestion )\n            {\n                return \"a person is a person, no matter how small\";\n            }\n        };\n        hortonCommRegistration = bundleContext.registerService(\n            ExampleHostService.class.getName(), hortonCommunicator, null);\n\n        System.out.println(\"Horton is listening to the Whos\");\n    }","id":10449,"modified_method":"public void start( BundleContext bundleContext ) throws Exception\n    {\n        ExampleHostService hortonCommunicator = new ExampleHostService() {\n            public String askHorton( String aQuestion )\n            {\n                System.out.println(\"100 percent!\");\n                whovilleCommunicationCount++;\n                return \"a person is a person, no matter how small\";\n            }\n        };\n        hortonCommRegistration = bundleContext.registerService(\n            ExampleHostService.class.getName(), hortonCommunicator, null);\n\n        System.out.println(\"Horton is listening to the Whos\");\n    }","commit_id":"5edd16990870ca60dad55c58a9646751893f7abb","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Before\n    public void cleanupFrameworkDirectories() throws IOException\n    {\n        // set up the logging\n        logAppender = new InMemoryAppender( OSGiContainer.log );\n\n        // Don't assume that target directory exists (like when running in an IDE)\n        File targetDirectory = new File( \"target\" + File.separator + \"osgi\" );\n        if ( !targetDirectory.exists() )\n            targetDirectory.mkdirs();\n\n        File bundleDirectory = new File( targetDirectory, OSGiContainer.DEFAULT_BUNDLE_DIRECTORY );\n        FileUtils.deleteDirectory( bundleDirectory );\n\n        File cacheDirectory = new File( targetDirectory, OSGiContainer.DEFAULT_CACHE_DIRECTORY );\n        FileUtils.deleteDirectory( cacheDirectory );\n\n        this.container = new OSGiContainer( bundleDirectory.getPath(), cacheDirectory.getPath(), new HostBridge(), new HortonActivator() );\n    }","id":10450,"modified_method":"@Before\n    public void cleanupFrameworkDirectories() throws IOException\n    {\n        // set up the logging\n        logAppender = new InMemoryAppender( OSGiContainer.log );\n\n        // Don't assume that target directory exists (like when running in an IDE)\n        File targetDirectory = new File( \"target\" + File.separator + \"osgi\" );\n        if ( !targetDirectory.exists() )\n            targetDirectory.mkdirs();\n\n        bundleDirectory = new File( targetDirectory, OSGiContainer.DEFAULT_BUNDLE_DIRECTORY );\n        FileUtils.deleteDirectory( bundleDirectory );\n\n        cacheDirectory = new File( targetDirectory, OSGiContainer.DEFAULT_CACHE_DIRECTORY );\n        FileUtils.deleteDirectory( cacheDirectory );\n\n    }","commit_id":"5edd16990870ca60dad55c58a9646751893f7abb","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateFrameworkDuringConstruction() throws Exception\n    {\n        assertThat( container.getFramework(), is( notNullValue() ) );\n        assertThat( container.getFramework().getState(), is( Bundle.INSTALLED ) );\n\n    }","id":10451,"modified_method":"@Test\n    public void shouldCreateFrameworkDuringConstruction() throws Exception\n    {\n        createContainer();\n        assertThat( container.getFramework(), is( notNullValue() ) );\n        assertThat( container.getFramework().getState(), is( Bundle.INSTALLED ) );\n\n    }","commit_id":"5edd16990870ca60dad55c58a9646751893f7abb","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldActivateOSGiAwareBundles() throws Exception\n    {\n        String expectedBundleSymbolicName = \"OSGiAwareBundle\";\n        InputStream bundleStream = newBundle()\n                .add( LifecycleActivator.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.aware\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.aware, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, LifecycleActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"aware.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        Bundle awareBundle = container.getBundles()[1];\n\n        assertNotNull( awareBundle );\n\n        assertThat( awareBundle.getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","id":10452,"modified_method":"@Test\n    public void shouldActivateOSGiAwareBundles() throws Exception\n    {\n        createContainer();\n        String expectedBundleSymbolicName = \"OSGiAwareBundle\";\n        InputStream bundleStream = newBundle()\n                .add( LifecycleActivator.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.aware\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.aware, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, LifecycleActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"aware.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        Bundle awareBundle = container.getBundles()[1];\n\n        assertNotNull( awareBundle );\n\n        assertThat( awareBundle.getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","commit_id":"5edd16990870ca60dad55c58a9646751893f7abb","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldAllowAccessToOSGiServices() throws Exception\n    {\n        String expectedBundleSymbolicName = \"OSGiServiceProviderBundle\";\n        InputStream bundleStream = newBundle()\n                .add( ServiceProviderActivator.class )\n                .add( ExampleServiceImpl.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.service\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.service, org.neo4j.server.osgi.services, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, ServiceProviderActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"service-impl.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        Bundle serviceProviderBundle = container.getBundles()[1];\n        assertNotNull( serviceProviderBundle );\n        assertThat( serviceProviderBundle.getState(), is( Bundle.ACTIVE ) );\n        assertThat( (String) serviceProviderBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        // should have 1 registered service\n        BundleContext bundleContext = serviceProviderBundle.getBundleContext();\n        ServiceReference[] registeredServices = bundleContext.getServiceReferences(\n                ExampleBundleService.class.getName(), null );\n        ExampleBundleService service = (ExampleBundleService) bundleContext.getService( registeredServices[0] );\n        assertThat( service, is( notNullValue() ) );\n\n        container.shutdown();\n    }","id":10453,"modified_method":"@Test\n    public void shouldAllowAccessToOSGiServices() throws Exception\n    {\n        createContainer();\n        String expectedBundleSymbolicName = \"OSGiServiceProviderBundle\";\n        InputStream bundleStream = newBundle()\n                .add( ServiceProviderActivator.class )\n                .add( ExampleServiceImpl.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.service\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.service, org.neo4j.server.osgi.services, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, ServiceProviderActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"service-impl.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        Bundle serviceProviderBundle = container.getBundles()[1];\n        assertNotNull( serviceProviderBundle );\n        assertThat( serviceProviderBundle.getState(), is( Bundle.ACTIVE ) );\n        assertThat( (String) serviceProviderBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        // should have 1 registered service\n        BundleContext bundleContext = serviceProviderBundle.getBundleContext();\n        ServiceReference[] registeredServices = bundleContext.getServiceReferences(\n                ExampleBundleService.class.getName(), null );\n        ExampleBundleService service = (ExampleBundleService) bundleContext.getService( registeredServices[0] );\n        assertThat( service, is( notNullValue() ) );\n\n        container.shutdown();\n    }","commit_id":"5edd16990870ca60dad55c58a9646751893f7abb","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateBundleDirectoryDuringConstructionIfItDoesntExist() throws BundleException, InterruptedException\n    {\n        File bundleDirectory = new File( container.getBundleDirectory() );\n\n        assertTrue( bundleDirectory.exists() );\n\n        container.shutdown();\n    }","id":10454,"modified_method":"@Test\n    public void shouldCreateBundleDirectoryDuringConstructionIfItDoesntExist() throws BundleException, InterruptedException\n    {\n        createContainer();\n        File bundleDirectory = new File( container.getBundleDirectory() );\n\n        assertTrue( bundleDirectory.exists() );\n\n        container.shutdown();\n    }","commit_id":"5edd16990870ca60dad55c58a9646751893f7abb","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    @Ignore(\"until it works\")\n    public void shouldProvideHostServiceToOSGiBundles() throws IOException, BundleException, InvalidSyntaxException, InterruptedException\n    {\n        String expectedBundleSymbolicName = \"ServiceConsumerBundle\";\n        InputStream bundleStream = newBundle()\n                .add( WhovilleActivator.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.consumer\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.consumer, org.neo4j.server.osgi.services, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, WhovilleActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"consumer-impl.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        ServiceReference[] registeredServices = container.getFramework().getRegisteredServices();\n        assertNotNull( registeredServices );\n\n        Bundle serviceConsumerBundle = container.getBundles()[1];\n        BundleContext bundleContext = serviceConsumerBundle.getBundleContext();\n        assertThat( serviceConsumerBundle.getState(), is( Bundle.ACTIVE ) );\n        assertThat( (String) serviceConsumerBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n\n        ServiceReference[] hostServices = bundleContext.getServiceReferences(\n                ExampleHostService.class.getName(), null );\n        ExampleHostService service = (ExampleHostService) bundleContext.getService( hostServices[0] );\n        assertNotNull( service );\n\n        container.shutdown();\n    }","id":10455,"modified_method":"@Test\n    public void shouldProvideHostServiceToOSGiBundles() throws IOException, BundleException, InvalidSyntaxException, InterruptedException\n    {\n        HortonActivator hortonActivator = new HortonActivator();\n        createContainer( hortonActivator );\n        String expectedBundleSymbolicName = \"WhovilleBundle\";\n        InputStream bundleStream = newBundle()\n                .add( WhovilleActivator.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.consumer\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.consumer, org.neo4j.server.osgi.services, org.osgi.framework, org.osgi.util.tracker\" )\n                .set( Constants.BUNDLE_ACTIVATOR, WhovilleActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"whoville.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        ServiceReference[] registeredServices = container.getFramework().getRegisteredServices();\n        assertNotNull( registeredServices );\n\n        Bundle serviceConsumerBundle = container.getBundles()[1];\n        BundleContext bundleContext = serviceConsumerBundle.getBundleContext();\n        assertThat( (String) serviceConsumerBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        assertThat( serviceConsumerBundle.getState(), is( Bundle.ACTIVE ) );\n\n        ServiceReference[] hostServices = bundleContext.getServiceReferences(\n                ExampleHostService.class.getName(), null );\n        ExampleHostService service = (ExampleHostService) bundleContext.getService( hostServices[0] );\n        assertNotNull( service );\n\n        assertThat( hortonActivator.whovilleCommunicationCount, is( 1 ) );\n\n        container.shutdown();\n    }","commit_id":"5edd16990870ca60dad55c58a9646751893f7abb","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldStartMinimalFramework() throws Exception\n    {\n        container.start();\n\n        assertThat( container.getFramework().getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","id":10456,"modified_method":"@Test\n    public void shouldStartMinimalFramework() throws Exception\n    {\n        createContainer();\n        container.start();\n\n        assertThat( container.getFramework().getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","commit_id":"5edd16990870ca60dad55c58a9646751893f7abb","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldLoadLibraryBundle() throws Exception\n    {\n        String expectedBundleSymbolicName = \"HelloTinyBundle\";\n        InputStream bundleStream = newBundle()\n                .add( Hello.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.hello\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.hello\" )\n                .build( withBnd() );\n        File helloJar = new File( container.getBundleDirectory(), \"hello.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( helloJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        // should be bundle 1\n        Bundle helloBundle = container.getBundles()[1];\n\n        assertThat( (String) helloBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        assertThat( container.getFramework().getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","id":10457,"modified_method":"@Test\n    public void shouldLoadLibraryBundle() throws Exception\n    {\n        createContainer();\n        String expectedBundleSymbolicName = \"HelloTinyBundle\";\n        InputStream bundleStream = newBundle()\n                .add( Hello.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.hello\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.hello\" )\n                .build( withBnd() );\n        File helloJar = new File( container.getBundleDirectory(), \"hello.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( helloJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        // should be bundle 1\n        Bundle helloBundle = container.getBundles()[1];\n\n        assertThat( (String) helloBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        assertThat( container.getFramework().getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","commit_id":"5edd16990870ca60dad55c58a9646751893f7abb","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateSystemBundle() throws Exception\n    {\n        container.start();\n\n        // The system bundle should always be bundle zero,\n        // and can otherwise be identified by the system\n        // packages it provides\n        Bundle systemBundle = container.getBundles()[0];\n\n        assertThat( (String) systemBundle.getHeaders().get( Constants.EXPORT_PACKAGE ), containsString( \"org.osgi.framework\" ) );\n\n        container.shutdown();\n    }","id":10458,"modified_method":"@Test\n    public void shouldCreateSystemBundle() throws Exception\n    {\n        createContainer();\n        container.start();\n\n        // The system bundle should always be bundle zero,\n        // and can otherwise be identified by the system\n        // packages it provides\n        Bundle systemBundle = container.getBundles()[0];\n\n        assertThat( (String) systemBundle.getHeaders().get( Constants.EXPORT_PACKAGE ), containsString( \"org.osgi.framework\" ) );\n\n        container.shutdown();\n    }","commit_id":"5edd16990870ca60dad55c58a9646751893f7abb","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void start( BundleContext bundleContext ) throws Exception\n    {\n        hortonCommunicator = (ExampleHostService)bundleContext.getService( bundleContext.getServiceReference( ExampleHostService.class.toString()) );\n\n        System.out.println( \"OSGi service consumer bundle started\" );\n    }","id":10459,"modified_method":"public void start( BundleContext bundleContext ) throws Exception\n    {\n        this.bundleContext = bundleContext;\n\n        synchronized (this)\n        {\n            bundleContext.addServiceListener(this);\n\n            ServiceReference[] refs = bundleContext.getServiceReferences(\n                ExampleHostService.class.getName(), null);\n\n            if (refs != null)\n            {\n                hortonCommunicator = (ExampleHostService) bundleContext.getService(refs[0]);\n                hortonCommunicator.askHorton( \"Can you hear us?\" );\n            }\n        }\n\n\n        System.out.println( \"Whoville is looking for Horton\" );\n    }","commit_id":"5edd16990870ca60dad55c58a9646751893f7abb","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void stop( BundleContext bundleContext ) throws Exception\n    {\n        System.out.println( \"OSGi service consumer bundle stopped\" );\n    }","id":10460,"modified_method":"public void stop( BundleContext bundleContext ) throws Exception\n    {\n        System.out.println( \"Whoville has given up on Horton\" );\n    }","commit_id":"5edd16990870ca60dad55c58a9646751893f7abb","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void start( BundleContext bundleContext ) throws Exception\n    {\n        ExampleHostService hortonCommunicator = new ExampleHostService() {\n            public String askHorton( String aQuestion )\n            {\n                return \"a person is a person, no matter how small\";\n            }\n        };\n        hortonCommRegistration = bundleContext.registerService(\n            ExampleHostService.class.getName(), hortonCommunicator, null);\n\n        System.out.println(\"Horton is listening to the Whos\");\n    }","id":10461,"modified_method":"public void start( BundleContext bundleContext ) throws Exception\n    {\n        ExampleHostService hortonCommunicator = new ExampleHostService() {\n            public String askHorton( String aQuestion )\n            {\n                System.out.println(\"100 percent!\");\n                whovilleCommunicationCount++;\n                return \"a person is a person, no matter how small\";\n            }\n        };\n        hortonCommRegistration = bundleContext.registerService(\n            ExampleHostService.class.getName(), hortonCommunicator, null);\n\n        System.out.println(\"Horton is listening to the Whos\");\n    }","commit_id":"87908363d27babf29459d228abd51a4c2d326635","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldActivateOSGiAwareBundles() throws Exception\n    {\n        String expectedBundleSymbolicName = \"OSGiAwareBundle\";\n        InputStream bundleStream = newBundle()\n                .add( LifecycleActivator.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.aware\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.aware, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, LifecycleActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"aware.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        Bundle awareBundle = container.getBundles()[1];\n\n        assertNotNull( awareBundle );\n\n        assertThat( awareBundle.getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","id":10462,"modified_method":"@Test\n    public void shouldActivateOSGiAwareBundles() throws Exception\n    {\n        createContainer();\n        String expectedBundleSymbolicName = \"OSGiAwareBundle\";\n        InputStream bundleStream = newBundle()\n                .add( LifecycleActivator.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.aware\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.aware, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, LifecycleActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"aware.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        Bundle awareBundle = container.getBundles()[1];\n\n        assertNotNull( awareBundle );\n\n        assertThat( awareBundle.getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","commit_id":"87908363d27babf29459d228abd51a4c2d326635","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Before\n    public void cleanupFrameworkDirectories() throws IOException\n    {\n        // set up the logging\n        logAppender = new InMemoryAppender( OSGiContainer.log );\n\n        // Don't assume that target directory exists (like when running in an IDE)\n        File targetDirectory = new File( \"target\" + File.separator + \"osgi\" );\n        if ( !targetDirectory.exists() )\n            targetDirectory.mkdirs();\n\n        File bundleDirectory = new File( targetDirectory, OSGiContainer.DEFAULT_BUNDLE_DIRECTORY );\n        FileUtils.deleteDirectory( bundleDirectory );\n\n        File cacheDirectory = new File( targetDirectory, OSGiContainer.DEFAULT_CACHE_DIRECTORY );\n        FileUtils.deleteDirectory( cacheDirectory );\n\n        this.container = new OSGiContainer( bundleDirectory.getPath(), cacheDirectory.getPath(), new HostBridge(), new HortonActivator() );\n    }","id":10463,"modified_method":"@Before\n    public void cleanupFrameworkDirectories() throws IOException\n    {\n        // set up the logging\n        logAppender = new InMemoryAppender( OSGiContainer.log );\n\n        // Don't assume that target directory exists (like when running in an IDE)\n        File targetDirectory = new File( \"target\" + File.separator + \"osgi\" );\n        if ( !targetDirectory.exists() )\n            targetDirectory.mkdirs();\n\n        bundleDirectory = new File( targetDirectory, OSGiContainer.DEFAULT_BUNDLE_DIRECTORY );\n        FileUtils.deleteDirectory( bundleDirectory );\n\n        cacheDirectory = new File( targetDirectory, OSGiContainer.DEFAULT_CACHE_DIRECTORY );\n        FileUtils.deleteDirectory( cacheDirectory );\n\n    }","commit_id":"87908363d27babf29459d228abd51a4c2d326635","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldAllowAccessToOSGiServices() throws Exception\n    {\n        String expectedBundleSymbolicName = \"OSGiServiceProviderBundle\";\n        InputStream bundleStream = newBundle()\n                .add( ServiceProviderActivator.class )\n                .add( ExampleServiceImpl.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.service\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.service, org.neo4j.server.osgi.services, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, ServiceProviderActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"service-impl.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        Bundle serviceProviderBundle = container.getBundles()[1];\n        assertNotNull( serviceProviderBundle );\n        assertThat( serviceProviderBundle.getState(), is( Bundle.ACTIVE ) );\n        assertThat( (String) serviceProviderBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        // should have 1 registered service\n        BundleContext bundleContext = serviceProviderBundle.getBundleContext();\n        ServiceReference[] registeredServices = bundleContext.getServiceReferences(\n                ExampleBundleService.class.getName(), null );\n        ExampleBundleService service = (ExampleBundleService) bundleContext.getService( registeredServices[0] );\n        assertThat( service, is( notNullValue() ) );\n\n        container.shutdown();\n    }","id":10464,"modified_method":"@Test\n    public void shouldAllowAccessToOSGiServices() throws Exception\n    {\n        createContainer();\n        String expectedBundleSymbolicName = \"OSGiServiceProviderBundle\";\n        InputStream bundleStream = newBundle()\n                .add( ServiceProviderActivator.class )\n                .add( ExampleServiceImpl.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.service\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.service, org.neo4j.server.osgi.services, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, ServiceProviderActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"service-impl.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        Bundle serviceProviderBundle = container.getBundles()[1];\n        assertNotNull( serviceProviderBundle );\n        assertThat( serviceProviderBundle.getState(), is( Bundle.ACTIVE ) );\n        assertThat( (String) serviceProviderBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        // should have 1 registered service\n        BundleContext bundleContext = serviceProviderBundle.getBundleContext();\n        ServiceReference[] registeredServices = bundleContext.getServiceReferences(\n                ExampleBundleService.class.getName(), null );\n        ExampleBundleService service = (ExampleBundleService) bundleContext.getService( registeredServices[0] );\n        assertThat( service, is( notNullValue() ) );\n\n        container.shutdown();\n    }","commit_id":"87908363d27babf29459d228abd51a4c2d326635","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateBundleDirectoryDuringConstructionIfItDoesntExist() throws BundleException, InterruptedException\n    {\n        File bundleDirectory = new File( container.getBundleDirectory() );\n\n        assertTrue( bundleDirectory.exists() );\n\n        container.shutdown();\n    }","id":10465,"modified_method":"@Test\n    public void shouldCreateBundleDirectoryDuringConstructionIfItDoesntExist() throws BundleException, InterruptedException\n    {\n        createContainer();\n        File bundleDirectory = new File( container.getBundleDirectory() );\n\n        assertTrue( bundleDirectory.exists() );\n\n        container.shutdown();\n    }","commit_id":"87908363d27babf29459d228abd51a4c2d326635","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateFrameworkDuringConstruction() throws Exception\n    {\n        assertThat( container.getFramework(), is( notNullValue() ) );\n        assertThat( container.getFramework().getState(), is( Bundle.INSTALLED ) );\n\n    }","id":10466,"modified_method":"@Test\n    public void shouldCreateFrameworkDuringConstruction() throws Exception\n    {\n        createContainer();\n        assertThat( container.getFramework(), is( notNullValue() ) );\n        assertThat( container.getFramework().getState(), is( Bundle.INSTALLED ) );\n\n    }","commit_id":"87908363d27babf29459d228abd51a4c2d326635","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldCreateSystemBundle() throws Exception\n    {\n        container.start();\n\n        // The system bundle should always be bundle zero,\n        // and can otherwise be identified by the system\n        // packages it provides\n        Bundle systemBundle = container.getBundles()[0];\n\n        assertThat( (String) systemBundle.getHeaders().get( Constants.EXPORT_PACKAGE ), containsString( \"org.osgi.framework\" ) );\n\n        container.shutdown();\n    }","id":10467,"modified_method":"@Test\n    public void shouldCreateSystemBundle() throws Exception\n    {\n        createContainer();\n        container.start();\n\n        // The system bundle should always be bundle zero,\n        // and can otherwise be identified by the system\n        // packages it provides\n        Bundle systemBundle = container.getBundles()[0];\n\n        assertThat( (String) systemBundle.getHeaders().get( Constants.EXPORT_PACKAGE ), containsString( \"org.osgi.framework\" ) );\n\n        container.shutdown();\n    }","commit_id":"87908363d27babf29459d228abd51a4c2d326635","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    @Ignore(\"until it works\")\n    public void shouldProvideHostServiceToOSGiBundles() throws IOException, BundleException, InvalidSyntaxException, InterruptedException\n    {\n        String expectedBundleSymbolicName = \"ServiceConsumerBundle\";\n        InputStream bundleStream = newBundle()\n                .add( WhovilleActivator.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.consumer\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.consumer, org.neo4j.server.osgi.services, org.osgi.framework\" )\n                .set( Constants.BUNDLE_ACTIVATOR, WhovilleActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"consumer-impl.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        ServiceReference[] registeredServices = container.getFramework().getRegisteredServices();\n        assertNotNull( registeredServices );\n\n        Bundle serviceConsumerBundle = container.getBundles()[1];\n        BundleContext bundleContext = serviceConsumerBundle.getBundleContext();\n        assertThat( serviceConsumerBundle.getState(), is( Bundle.ACTIVE ) );\n        assertThat( (String) serviceConsumerBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n\n        ServiceReference[] hostServices = bundleContext.getServiceReferences(\n                ExampleHostService.class.getName(), null );\n        ExampleHostService service = (ExampleHostService) bundleContext.getService( hostServices[0] );\n        assertNotNull( service );\n\n        container.shutdown();\n    }","id":10468,"modified_method":"@Test\n    public void shouldProvideHostServiceToOSGiBundles() throws IOException, BundleException, InvalidSyntaxException, InterruptedException\n    {\n        HortonActivator hortonActivator = new HortonActivator();\n        createContainer( hortonActivator );\n        String expectedBundleSymbolicName = \"WhovilleBundle\";\n        InputStream bundleStream = newBundle()\n                .add( WhovilleActivator.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.consumer\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.consumer, org.neo4j.server.osgi.services, org.osgi.framework, org.osgi.util.tracker\" )\n                .set( Constants.BUNDLE_ACTIVATOR, WhovilleActivator.class.getName() )\n                .build( withBnd() );\n        File awareJar = new File( container.getBundleDirectory(), \"whoville.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( awareJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        ServiceReference[] registeredServices = container.getFramework().getRegisteredServices();\n        assertNotNull( registeredServices );\n\n        Bundle serviceConsumerBundle = container.getBundles()[1];\n        BundleContext bundleContext = serviceConsumerBundle.getBundleContext();\n        assertThat( (String) serviceConsumerBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        assertThat( serviceConsumerBundle.getState(), is( Bundle.ACTIVE ) );\n\n        ServiceReference[] hostServices = bundleContext.getServiceReferences(\n                ExampleHostService.class.getName(), null );\n        ExampleHostService service = (ExampleHostService) bundleContext.getService( hostServices[0] );\n        assertNotNull( service );\n\n        assertThat( hortonActivator.whovilleCommunicationCount, is( 1 ) );\n\n        container.shutdown();\n    }","commit_id":"87908363d27babf29459d228abd51a4c2d326635","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldLoadLibraryBundle() throws Exception\n    {\n        String expectedBundleSymbolicName = \"HelloTinyBundle\";\n        InputStream bundleStream = newBundle()\n                .add( Hello.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.hello\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.hello\" )\n                .build( withBnd() );\n        File helloJar = new File( container.getBundleDirectory(), \"hello.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( helloJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        // should be bundle 1\n        Bundle helloBundle = container.getBundles()[1];\n\n        assertThat( (String) helloBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        assertThat( container.getFramework().getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","id":10469,"modified_method":"@Test\n    public void shouldLoadLibraryBundle() throws Exception\n    {\n        createContainer();\n        String expectedBundleSymbolicName = \"HelloTinyBundle\";\n        InputStream bundleStream = newBundle()\n                .add( Hello.class )\n                .set( Constants.BUNDLE_SYMBOLICNAME, expectedBundleSymbolicName )\n                .set( Constants.EXPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.hello\" )\n                .set( Constants.IMPORT_PACKAGE, \"org.neo4j.server.osgi.bundles.hello\" )\n                .build( withBnd() );\n        File helloJar = new File( container.getBundleDirectory(), \"hello.jar\" );\n        OutputStream jarOutputStream = new FileOutputStream( helloJar );\n        StreamUtils.copyStream( bundleStream, jarOutputStream, true );\n\n        container.start();\n\n        // should be bundle 1\n        Bundle helloBundle = container.getBundles()[1];\n\n        assertThat( (String) helloBundle.getHeaders().get( Constants.BUNDLE_SYMBOLICNAME ), is( expectedBundleSymbolicName ) );\n        assertThat( container.getFramework().getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","commit_id":"87908363d27babf29459d228abd51a4c2d326635","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldStartMinimalFramework() throws Exception\n    {\n        container.start();\n\n        assertThat( container.getFramework().getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","id":10470,"modified_method":"@Test\n    public void shouldStartMinimalFramework() throws Exception\n    {\n        createContainer();\n        container.start();\n\n        assertThat( container.getFramework().getState(), is( Bundle.ACTIVE ) );\n\n        container.shutdown();\n    }","commit_id":"87908363d27babf29459d228abd51a4c2d326635","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void stop( BundleContext bundleContext ) throws Exception\n    {\n        System.out.println( \"OSGi service consumer bundle stopped\" );\n    }","id":10471,"modified_method":"public void stop( BundleContext bundleContext ) throws Exception\n    {\n        System.out.println( \"Whoville has given up on Horton\" );\n    }","commit_id":"87908363d27babf29459d228abd51a4c2d326635","url":"https://github.com/neo4j/neo4j"},{"original_method":"public void start( BundleContext bundleContext ) throws Exception\n    {\n        hortonCommunicator = (ExampleHostService)bundleContext.getService( bundleContext.getServiceReference( ExampleHostService.class.toString()) );\n\n        System.out.println( \"OSGi service consumer bundle started\" );\n    }","id":10472,"modified_method":"public void start( BundleContext bundleContext ) throws Exception\n    {\n        this.bundleContext = bundleContext;\n\n        synchronized (this)\n        {\n            bundleContext.addServiceListener(this);\n\n            ServiceReference[] refs = bundleContext.getServiceReferences(\n                ExampleHostService.class.getName(), null);\n\n            if (refs != null)\n            {\n                hortonCommunicator = (ExampleHostService) bundleContext.getService(refs[0]);\n                hortonCommunicator.askHorton( \"Can you hear us?\" );\n            }\n        }\n\n\n        System.out.println( \"Whoville is looking for Horton\" );\n    }","commit_id":"87908363d27babf29459d228abd51a4c2d326635","url":"https://github.com/neo4j/neo4j"},{"original_method":"private XpandExecutionContext createExecutionContext() {\n\t\t// configure outlets\n\t\tOutputImpl output = new OutputImpl();\n\n\t\toutput.addOutlet(new Outlet(false, getEncoding(), PLUGIN_RT, false, getPathRtProject()));\n\t\toutput.addOutlet(new Outlet(false, getEncoding(), SRC, false, getPathRtProject() + getSrcPath()));\n\t\toutput.addOutlet(new Outlet(false, getEncoding(), SRC_GEN, true, getPathRtProject() + getSrcGenPath()));\n\t\tif (getPathUiProject() != null) {\n\t\t\toutput.addOutlet(new Outlet(false, getEncoding(), PLUGIN_UI, false, getPathUiProject()));\n\t\t\toutput.addOutlet(new Outlet(false, getEncoding(), SRC_UI, false, getPathUiProject() + getSrcPath()));\n\t\t\toutput.addOutlet(new Outlet(false, getEncoding(), SRC_GEN_UI, true, getPathUiProject() + getSrcGenPath()));\n\t\t} else {\n\t\t\toutput.addOutlet(new Outlet(false, getEncoding(), PLUGIN_UI, false, getPathRtProject()));\n\t\t\toutput.addOutlet(new Outlet(false, getEncoding(), SRC_UI, false, getPathRtProject() + getSrcPath()));\n\t\t\toutput.addOutlet(new Outlet(false, getEncoding(), SRC_GEN_UI, true, getPathRtProject() + getSrcGenPath()));\n\t\t}\n\t\t// initialize global vars\n\t\tMap<String,Variable> globalVars = Maps.newHashMap();\n\t\tglobalVars.put(Naming.GLOBAL_VAR_NAME, new Variable(Naming.GLOBAL_VAR_NAME,naming));\n\t\t\n\t\t// create execution context\n\t\tXpandExecutionContextImpl execCtx = new XpandExecutionContextImpl(output, null,globalVars,null,null);\n\t\t//since our templates are all encoded in ISO-8859-1, we have to fix it here.\n\t\texecCtx.getResourceManager().setFileEncoding(\"ISO-8859-1\");\n\t\t\n\t\texecCtx.registerMetaModel(new JavaBeansMetaModel());\n\t\t// add default value for 'modelPluginID' for generated GenModel required\n\t\t// for further .edit/.editor generation\n\t\texecCtx = (XpandExecutionContextImpl) execCtx.cloneWithVariable(new Variable(\"modelPluginID\", getProjectNameRt()));\n\t\treturn execCtx;\n\t}","id":10473,"modified_method":"private XpandExecutionContext createExecutionContext() {\n\t\t// configure outlets\n\t\tOutputImpl output = new OutputImpl();\n\n\t\toutput.addOutlet(createOutlet(false, getEncoding(), PLUGIN_RT, false, getPathRtProject()));\n\t\toutput.addOutlet(createOutlet(false, getEncoding(), SRC, false, getPathRtProject() + getSrcPath()));\n\t\toutput.addOutlet(createOutlet(false, getEncoding(), SRC_GEN, true, getPathRtProject() + getSrcGenPath()));\n\t\tif (getPathUiProject() != null) {\n\t\t\toutput.addOutlet(createOutlet(false, getEncoding(), PLUGIN_UI, false, getPathUiProject()));\n\t\t\toutput.addOutlet(createOutlet(false, getEncoding(), SRC_UI, false, getPathUiProject() + getSrcPath()));\n\t\t\toutput.addOutlet(createOutlet(false, getEncoding(), SRC_GEN_UI, true, getPathUiProject() + getSrcGenPath()));\n\t\t} else {\n\t\t\toutput.addOutlet(createOutlet(false, getEncoding(), PLUGIN_UI, false, getPathRtProject()));\n\t\t\toutput.addOutlet(createOutlet(false, getEncoding(), SRC_UI, false, getPathRtProject() + getSrcPath()));\n\t\t\toutput.addOutlet(createOutlet(false, getEncoding(), SRC_GEN_UI, true, getPathRtProject() + getSrcGenPath()));\n\t\t}\n\t\t// initialize global vars\n\t\tMap<String,Variable> globalVars = Maps.newHashMap();\n\t\tglobalVars.put(Naming.GLOBAL_VAR_NAME, new Variable(Naming.GLOBAL_VAR_NAME,naming));\n\t\t\n\t\t// create execution context\n\t\tXpandExecutionContextImpl execCtx = new XpandExecutionContextImpl(output, null,globalVars,null,null);\n\t\t//since our templates are all encoded in ISO-8859-1, we have to fix it here.\n\t\texecCtx.getResourceManager().setFileEncoding(\"ISO-8859-1\");\n\t\t\n\t\texecCtx.registerMetaModel(new JavaBeansMetaModel());\n\t\t// add default value for 'modelPluginID' for generated GenModel required\n\t\t// for further .edit/.editor generation\n\t\texecCtx = (XpandExecutionContextImpl) execCtx.cloneWithVariable(new Variable(\"modelPluginID\", getProjectNameRt()));\n\t\treturn execCtx;\n\t}","commit_id":"98291145a964996ad9faa3f8a180888fee869789","url":"https://github.com/eclipse/xtext"},{"original_method":"public OnmsForeignSource get(String foreignSourceName) throws ForeignSourceRepositoryException {\n        File inputFile = new File(m_foreignSourcePath, foreignSourceName + \".xml\");\n        return get(inputFile);\n    }","id":10474,"modified_method":"public OnmsForeignSource get(String foreignSourceName) throws ForeignSourceRepositoryException {\n        File inputFile = encodeFileName(m_foreignSourcePath, foreignSourceName);\n        if (inputFile != null && inputFile.exists()) {\n            return get(inputFile);\n        } else {\n            OnmsForeignSource fs = getDefaultForeignSource();\n            fs.setName(foreignSourceName);\n            return fs;\n        }\n    }","commit_id":"c22468a6a2deb992233537e68b3eab80bf4a157f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private File getOutputFileForRequisition(OnmsRequisition requisition) throws ForeignSourceRepositoryException {\n        File reqPath = new File(m_requisitionPath);\n        createPath(reqPath);\n        File outputFile = new File(reqPath, requisition.getForeignSource() + \".xml\");\n        return outputFile;\n    }","id":10475,"modified_method":"private File getOutputFileForRequisition(OnmsRequisition requisition) throws ForeignSourceRepositoryException {\n        File reqPath = new File(m_requisitionPath);\n        createPath(reqPath);\n        File outputFile = encodeFileName(m_requisitionPath, requisition.getForeignSource());\n        return outputFile;\n    }","commit_id":"c22468a6a2deb992233537e68b3eab80bf4a157f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Set<OnmsForeignSource> getAll() throws ForeignSourceRepositoryException {\n        File directory = new File(m_foreignSourcePath);\n        FilenameFilter filter = new FilenameFilter() {\n            public boolean accept(File dir, String name) {\n                if (name.endsWith(\".xml\")) {\n                    return true;\n                }\n                return false;\n            }\n        };\n        Set<OnmsForeignSource> foreignSources = new TreeSet<OnmsForeignSource>();\n        for (File file : directory.listFiles(filter)) {\n            foreignSources.add(get(file));\n        }\n        return foreignSources;\n    }","id":10476,"modified_method":"public Set<OnmsForeignSource> getAll() throws ForeignSourceRepositoryException {\n        File directory = new File(m_foreignSourcePath);\n        FilenameFilter filter = new FilenameFilter() {\n            public boolean accept(File dir, String name) {\n                if (name.endsWith(\".xml\")) {\n                    return true;\n                }\n                return false;\n            }\n        };\n        TreeSet<OnmsForeignSource> foreignSources = new TreeSet<OnmsForeignSource>();\n        for (File file : directory.listFiles(filter)) {\n            foreignSources.add(get(file));\n        }\n        return foreignSources;\n    }","commit_id":"c22468a6a2deb992233537e68b3eab80bf4a157f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OnmsRequisition getRequisition(String foreignSourceName) throws ForeignSourceRepositoryException {\n        File inputFile = new File(m_requisitionPath, foreignSourceName + \".xml\");\n        try {\n            OnmsRequisition req = new OnmsRequisition();\n            req.loadResource(new FileSystemResource(inputFile));\n            return req;\n        } catch (Exception e) {\n            throw new ForeignSourceRepositoryException(\"unable to unmarshal \" + inputFile.getPath(), e);\n        }\n    }","id":10477,"modified_method":"public OnmsRequisition getRequisition(String foreignSourceName) throws ForeignSourceRepositoryException {\n        File inputFile = encodeFileName(m_requisitionPath, foreignSourceName);\n        try {\n            OnmsRequisition req = new OnmsRequisition();\n            req.loadResource(new FileSystemResource(inputFile));\n            return req;\n        } catch (Exception e) {\n            throw new ForeignSourceRepositoryException(\"unable to unmarshal \" + inputFile.getPath(), e);\n        }\n    }","commit_id":"c22468a6a2deb992233537e68b3eab80bf4a157f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private File getOutputFileForForeignSource(OnmsForeignSource foreignSource) throws ForeignSourceRepositoryException {\n        File fsPath = new File(m_foreignSourcePath);\n        createPath(fsPath);\n        File outputFile = new File(fsPath, foreignSource.getName() + \".xml\");\n        return outputFile;\n    }","id":10478,"modified_method":"private File getOutputFileForForeignSource(OnmsForeignSource foreignSource) throws ForeignSourceRepositoryException {\n        File fsPath = new File(m_foreignSourcePath);\n        createPath(fsPath);\n        File outputFile = encodeFileName(m_foreignSourcePath, foreignSource.getName());\n        return outputFile;\n    }","commit_id":"c22468a6a2deb992233537e68b3eab80bf4a157f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testForeignSource() throws Exception {\n        createRequisition();\n        OnmsForeignSource foreignSource = createForeignSource(m_defaultForeignSourceName);\n        List<OnmsForeignSource> foreignSources = new ArrayList<OnmsForeignSource>(m_foreignSourceRepository.getAll());\n        assertEquals(\"number of foreign sources\", 1, foreignSources.size());\n        assertEquals(\"getAll() foreign source name matches\", m_defaultForeignSourceName, foreignSources.get(0).getName());\n        assertEquals(\"get() returns the foreign source\", foreignSource, m_foreignSourceRepository.get(m_defaultForeignSourceName));\n    }","id":10479,"modified_method":"@Test\n    public void testForeignSource() throws Exception {\n        createRequisition();\n        OnmsForeignSource foreignSource = createForeignSource(m_defaultForeignSourceName);\n        Set<OnmsForeignSource> foreignSources = m_foreignSourceRepository.getAll();\n        assertEquals(\"number of foreign sources must be 1\", 1, foreignSources.size());\n        assertEquals(\"getAll() foreign source name must match\", m_defaultForeignSourceName, foreignSources.iterator().next().getName());\n        assertEquals(\"get() must return the foreign source\", foreignSource, m_foreignSourceRepository.get(m_defaultForeignSourceName));\n    }","commit_id":"c22468a6a2deb992233537e68b3eab80bf4a157f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testGetRequisition() throws Exception {\n        OnmsRequisition requisition = createRequisition();\n        OnmsForeignSource foreignSource = createForeignSource(m_defaultForeignSourceName);\n        assertEquals(\"requisitions match\", m_foreignSourceRepository.getRequisition(m_defaultForeignSourceName), m_foreignSourceRepository.getRequisition(foreignSource));\n        assertEquals(\"foreign source is expected one\", requisition, m_foreignSourceRepository.getRequisition(foreignSource));\n    }","id":10480,"modified_method":"@Test\n    public void testGetRequisition() throws Exception {\n        OnmsRequisition requisition = createRequisition();\n        OnmsForeignSource foreignSource = createForeignSource(m_defaultForeignSourceName);\n        assertEquals(\"requisitions must match\", m_foreignSourceRepository.getRequisition(m_defaultForeignSourceName), m_foreignSourceRepository.getRequisition(foreignSource));\n        assertEquals(\"foreign source is the expected one\", requisition, m_foreignSourceRepository.getRequisition(foreignSource));\n    }","commit_id":"c22468a6a2deb992233537e68b3eab80bf4a157f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Before\n    public void setUp() throws JAXBException {\n        fsr = new MockForeignSourceRepository();\n        fsr.save(new OnmsForeignSource(\"cheese\"));\n\n        fs = fsr.get(\"cheese\");\n//        fs.setScanInterval(scanInterval)\n\n        List<PluginConfig> detectors = new ArrayList<PluginConfig>();\n        final PluginConfig detector = new PluginConfig(\"food\", \"org.opennms.netmgt.provision.persist.detectors.FoodDetector\");\n        detector.addParameter(\"type\", \"cheese\");\n        detector.addParameter(\"density\", \"soft\");\n        detector.addParameter(\"sharpness\", \"mild\");\n        detectors.add(detector);\n        fs.setDetectors(detectors);\n\n        List<PluginConfig> policies = new ArrayList<PluginConfig>();\n        PluginConfig policy = new PluginConfig(\"lower-case-node\", \"org.opennms.netmgt.provision.persist.policies.NodeCategoryPolicy\");\n        policy.addParameter(\"label\", \"~^[a-z]$\");\n        policy.addParameter(\"category\", \"Lower-Case-Nodes\");\n        policies.add(policy);\n        policy = new PluginConfig(\"all-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.InclusiveInterfacePolicy\");\n        policies.add(policy);\n        policy = new PluginConfig(\"10-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingInterfacePolicy\");\n        policy.addParameter(\"ipaddress\", \"~^10\\\\..*$\");\n        policies.add(policy);\n        policy = new PluginConfig(\"cisco-snmp-interfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingSnmpInterfacePolicy\");\n        policy.addParameter(\"ifdescr\", \"~^(?i:LEC).*$\");\n        policies.add(policy);\n        fs.setPolicies(policies);\n\n        fsw = new ForeignSourceWrapper(fsr.getAll());\n        c = JAXBContext.newInstance(ForeignSourceWrapper.class, OnmsForeignSource.class);\n\n        m = c.createMarshaller();\n        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n        \n        XMLUnit.setIgnoreWhitespace(true);\n        XMLUnit.setIgnoreAttributeOrder(true);\n        XMLUnit.setNormalize(true);\n    }","id":10481,"modified_method":"@Before\n    public void setUp() throws JAXBException {\n        fsr = new MockForeignSourceRepository();\n        fsr.save(new OnmsForeignSource(\"cheese\"));\n\n        fs = fsr.get(\"cheese\");\n//        fs.setScanInterval(scanInterval)\n\n        ArrayList<PluginConfig> detectors = new ArrayList<PluginConfig>();\n        final PluginConfig detector = new PluginConfig(\"food\", \"org.opennms.netmgt.provision.persist.detectors.FoodDetector\");\n        detector.addParameter(\"type\", \"cheese\");\n        detector.addParameter(\"density\", \"soft\");\n        detector.addParameter(\"sharpness\", \"mild\");\n        detectors.add(detector);\n        fs.setDetectors(detectors);\n\n        ArrayList<PluginConfig> policies = new ArrayList<PluginConfig>();\n        PluginConfig policy = new PluginConfig(\"lower-case-node\", \"org.opennms.netmgt.provision.persist.policies.NodeCategoryPolicy\");\n        policy.addParameter(\"label\", \"~^[a-z]$\");\n        policy.addParameter(\"category\", \"Lower-Case-Nodes\");\n        policies.add(policy);\n        policy = new PluginConfig(\"all-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.InclusiveInterfacePolicy\");\n        policies.add(policy);\n        policy = new PluginConfig(\"10-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingInterfacePolicy\");\n        policy.addParameter(\"ipaddress\", \"~^10\\\\..*$\");\n        policies.add(policy);\n        policy = new PluginConfig(\"cisco-snmp-interfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingSnmpInterfacePolicy\");\n        policy.addParameter(\"ifdescr\", \"~^(?i:LEC).*$\");\n        policies.add(policy);\n        fs.setPolicies(policies);\n\n        fsw = new ForeignSourceWrapper(fsr.getAll());\n        c = JAXBContext.newInstance(ForeignSourceWrapper.class, OnmsForeignSource.class);\n\n        m = c.createMarshaller();\n        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n        \n        XMLUnit.setIgnoreWhitespace(true);\n        XMLUnit.setIgnoreAttributeOrder(true);\n        XMLUnit.setNormalize(true);\n    }","commit_id":"c22468a6a2deb992233537e68b3eab80bf4a157f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public boolean equals(Object obj) {\n        if (obj instanceof OnmsForeignSource) {\n            OnmsForeignSource other = (OnmsForeignSource) obj;\n            return new EqualsBuilder()\n                .append(getName(), other.getName())\n                .append(getScanInterval(), other.getScanInterval())\n                .append(getDetectors(), other.getDetectors())\n                .append(getPolicies(), other.getPolicies())\n                .isEquals();\n        }\n        return false;\n    }","id":10482,"modified_method":"@Override\n    public boolean equals(Object obj) {\n        if (obj instanceof OnmsForeignSource) {\n            OnmsForeignSource other = (OnmsForeignSource) obj;\n            return new EqualsBuilder()\n                .append(getName(), other.getName())\n                .append(getScanInterval(), other.getScanInterval())\n                .append(getDetectors().toArray(new PluginConfig[0]), other.getDetectors().toArray(new PluginConfig[0]))\n                .append(getPolicies().toArray(new PluginConfig[0]), other.getPolicies().toArray(new PluginConfig[0]))\n                .append(isDefault(), other.isDefault())\n                .isEquals();\n        }\n        return false;\n    }","commit_id":"c22468a6a2deb992233537e68b3eab80bf4a157f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public int hashCode() {\n        return new HashCodeBuilder()\n            .append(getName())\n            .append(getScanInterval())\n            .append(getDetectors())\n            .append(getPolicies())\n            .toHashCode();\n      }","id":10483,"modified_method":"@Override\n    public int hashCode() {\n        return new HashCodeBuilder()\n            .append(getName())\n            .append(getScanInterval())\n            .append(getDetectors().toArray(new PluginConfig[0]))\n            .append(getPolicies().toArray(new PluginConfig[0]))\n            .append(isDefault())\n            .toHashCode();\n      }","commit_id":"c22468a6a2deb992233537e68b3eab80bf4a157f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"name\", getName())\n            .append(\"scan-interval\", getScanInterval())\n            .append(\"detectors\", getDetectors())\n            .append(\"policies\", getPolicies())\n            .toString();\n    }","id":10484,"modified_method":"@Override\n    public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"name\", getName())\n            .append(\"scan-interval\", getScanInterval())\n            .append(\"detectors\", getDetectors().toArray(new PluginConfig[0]))\n            .append(\"policies\", getPolicies().toArray(new PluginConfig[0]))\n            .toString();\n    }","commit_id":"c22468a6a2deb992233537e68b3eab80bf4a157f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"name\", getName())\n            .append(\"plugin-class\", getPluginClass())\n            .append(\"parameters\", getParameters())\n            .toString();\n    }","id":10485,"modified_method":"@Override\n    public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"name\", getName())\n            .append(\"plugin-class\", getPluginClass())\n            .append(\"parameters\", getParametersAsString())\n            .toString();\n    }","commit_id":"c22468a6a2deb992233537e68b3eab80bf4a157f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public int hashCode() {\n        return new HashCodeBuilder()\n            .append(getName())\n            .append(getPluginClass())\n            .append(getParameters())\n            .toHashCode();\n      }","id":10486,"modified_method":"@Override\n    public int hashCode() {\n        return new HashCodeBuilder()\n            .append(getName())\n            .append(getPluginClass())\n            .append(getParametersAsString())\n            .toHashCode();\n      }","commit_id":"c22468a6a2deb992233537e68b3eab80bf4a157f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public boolean equals(Object obj) {\n        if (obj instanceof PluginConfig) {\n            PluginConfig other = (PluginConfig) obj;\n            return new EqualsBuilder()\n                .append(getName(), other.getName())\n                .append(getPluginClass(), other.getPluginClass())\n                .append(getParameters(), other.getParameters())\n                .isEquals();\n        }\n        return false;\n    }","id":10487,"modified_method":"@Override\n    public boolean equals(Object obj) {\n        if (obj instanceof PluginConfig) {\n            PluginConfig other = (PluginConfig) obj;\n            return new EqualsBuilder()\n                .append(getName(), other.getName())\n                .append(getPluginClass(), other.getPluginClass())\n                .append(getParametersAsString(), other.getParametersAsString())\n                .isEquals();\n        }\n        return false;\n    }","commit_id":"c22468a6a2deb992233537e68b3eab80bf4a157f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OnmsRequisition getRequisition(String foreignSourceName) throws ForeignSourceRepositoryException {\n        File inputFile = new File(m_requisitionPath, foreignSourceName + \".xml\");\n        try {\n            OnmsRequisition req = new OnmsRequisition();\n            req.loadResource(new FileSystemResource(inputFile));\n            return req;\n        } catch (Exception e) {\n            throw new ForeignSourceRepositoryException(\"unable to unmarshal \" + inputFile.getPath(), e);\n        }\n    }","id":10488,"modified_method":"public OnmsRequisition getRequisition(String foreignSourceName) throws ForeignSourceRepositoryException {\n        File inputFile = encodeFileName(m_requisitionPath, foreignSourceName);\n        try {\n            OnmsRequisition req = new OnmsRequisition();\n            req.loadResource(new FileSystemResource(inputFile));\n            return req;\n        } catch (Exception e) {\n            throw new ForeignSourceRepositoryException(\"unable to unmarshal \" + inputFile.getPath(), e);\n        }\n    }","commit_id":"e0ccae1763a03938429c91d9fc567029c5c031d9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OnmsForeignSource get(String foreignSourceName) throws ForeignSourceRepositoryException {\n        File inputFile = new File(m_foreignSourcePath, foreignSourceName + \".xml\");\n        return get(inputFile);\n    }","id":10489,"modified_method":"public OnmsForeignSource get(String foreignSourceName) throws ForeignSourceRepositoryException {\n        File inputFile = encodeFileName(m_foreignSourcePath, foreignSourceName);\n        if (inputFile != null && inputFile.exists()) {\n            return get(inputFile);\n        } else {\n            OnmsForeignSource fs = getDefaultForeignSource();\n            fs.setName(foreignSourceName);\n            return fs;\n        }\n    }","commit_id":"e0ccae1763a03938429c91d9fc567029c5c031d9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Set<OnmsForeignSource> getAll() throws ForeignSourceRepositoryException {\n        File directory = new File(m_foreignSourcePath);\n        FilenameFilter filter = new FilenameFilter() {\n            public boolean accept(File dir, String name) {\n                if (name.endsWith(\".xml\")) {\n                    return true;\n                }\n                return false;\n            }\n        };\n        Set<OnmsForeignSource> foreignSources = new TreeSet<OnmsForeignSource>();\n        for (File file : directory.listFiles(filter)) {\n            foreignSources.add(get(file));\n        }\n        return foreignSources;\n    }","id":10490,"modified_method":"public Set<OnmsForeignSource> getAll() throws ForeignSourceRepositoryException {\n        File directory = new File(m_foreignSourcePath);\n        FilenameFilter filter = new FilenameFilter() {\n            public boolean accept(File dir, String name) {\n                if (name.endsWith(\".xml\")) {\n                    return true;\n                }\n                return false;\n            }\n        };\n        TreeSet<OnmsForeignSource> foreignSources = new TreeSet<OnmsForeignSource>();\n        for (File file : directory.listFiles(filter)) {\n            foreignSources.add(get(file));\n        }\n        return foreignSources;\n    }","commit_id":"e0ccae1763a03938429c91d9fc567029c5c031d9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private File getOutputFileForForeignSource(OnmsForeignSource foreignSource) throws ForeignSourceRepositoryException {\n        File fsPath = new File(m_foreignSourcePath);\n        createPath(fsPath);\n        File outputFile = new File(fsPath, foreignSource.getName() + \".xml\");\n        return outputFile;\n    }","id":10491,"modified_method":"private File getOutputFileForForeignSource(OnmsForeignSource foreignSource) throws ForeignSourceRepositoryException {\n        File fsPath = new File(m_foreignSourcePath);\n        createPath(fsPath);\n        File outputFile = encodeFileName(m_foreignSourcePath, foreignSource.getName());\n        return outputFile;\n    }","commit_id":"e0ccae1763a03938429c91d9fc567029c5c031d9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private File getOutputFileForRequisition(OnmsRequisition requisition) throws ForeignSourceRepositoryException {\n        File reqPath = new File(m_requisitionPath);\n        createPath(reqPath);\n        File outputFile = new File(reqPath, requisition.getForeignSource() + \".xml\");\n        return outputFile;\n    }","id":10492,"modified_method":"private File getOutputFileForRequisition(OnmsRequisition requisition) throws ForeignSourceRepositoryException {\n        File reqPath = new File(m_requisitionPath);\n        createPath(reqPath);\n        File outputFile = encodeFileName(m_requisitionPath, requisition.getForeignSource());\n        return outputFile;\n    }","commit_id":"e0ccae1763a03938429c91d9fc567029c5c031d9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testForeignSource() throws Exception {\n        createRequisition();\n        OnmsForeignSource foreignSource = createForeignSource(m_defaultForeignSourceName);\n        List<OnmsForeignSource> foreignSources = new ArrayList<OnmsForeignSource>(m_foreignSourceRepository.getAll());\n        assertEquals(\"number of foreign sources\", 1, foreignSources.size());\n        assertEquals(\"getAll() foreign source name matches\", m_defaultForeignSourceName, foreignSources.get(0).getName());\n        assertEquals(\"get() returns the foreign source\", foreignSource, m_foreignSourceRepository.get(m_defaultForeignSourceName));\n    }","id":10493,"modified_method":"@Test\n    public void testForeignSource() throws Exception {\n        createRequisition();\n        OnmsForeignSource foreignSource = createForeignSource(m_defaultForeignSourceName);\n        Set<OnmsForeignSource> foreignSources = m_foreignSourceRepository.getAll();\n        assertEquals(\"number of foreign sources must be 1\", 1, foreignSources.size());\n        assertEquals(\"getAll() foreign source name must match\", m_defaultForeignSourceName, foreignSources.iterator().next().getName());\n        assertEquals(\"get() must return the foreign source\", foreignSource, m_foreignSourceRepository.get(m_defaultForeignSourceName));\n    }","commit_id":"e0ccae1763a03938429c91d9fc567029c5c031d9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testGetRequisition() throws Exception {\n        OnmsRequisition requisition = createRequisition();\n        OnmsForeignSource foreignSource = createForeignSource(m_defaultForeignSourceName);\n        assertEquals(\"requisitions match\", m_foreignSourceRepository.getRequisition(m_defaultForeignSourceName), m_foreignSourceRepository.getRequisition(foreignSource));\n        assertEquals(\"foreign source is expected one\", requisition, m_foreignSourceRepository.getRequisition(foreignSource));\n    }","id":10494,"modified_method":"@Test\n    public void testGetRequisition() throws Exception {\n        OnmsRequisition requisition = createRequisition();\n        OnmsForeignSource foreignSource = createForeignSource(m_defaultForeignSourceName);\n        assertEquals(\"requisitions must match\", m_foreignSourceRepository.getRequisition(m_defaultForeignSourceName), m_foreignSourceRepository.getRequisition(foreignSource));\n        assertEquals(\"foreign source is the expected one\", requisition, m_foreignSourceRepository.getRequisition(foreignSource));\n    }","commit_id":"e0ccae1763a03938429c91d9fc567029c5c031d9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Before\n    public void setUp() throws JAXBException {\n        fsr = new MockForeignSourceRepository();\n        fsr.save(new OnmsForeignSource(\"cheese\"));\n\n        fs = fsr.get(\"cheese\");\n//        fs.setScanInterval(scanInterval)\n\n        List<PluginConfig> detectors = new ArrayList<PluginConfig>();\n        final PluginConfig detector = new PluginConfig(\"food\", \"org.opennms.netmgt.provision.persist.detectors.FoodDetector\");\n        detector.addParameter(\"type\", \"cheese\");\n        detector.addParameter(\"density\", \"soft\");\n        detector.addParameter(\"sharpness\", \"mild\");\n        detectors.add(detector);\n        fs.setDetectors(detectors);\n\n        List<PluginConfig> policies = new ArrayList<PluginConfig>();\n        PluginConfig policy = new PluginConfig(\"lower-case-node\", \"org.opennms.netmgt.provision.persist.policies.NodeCategoryPolicy\");\n        policy.addParameter(\"label\", \"~^[a-z]$\");\n        policy.addParameter(\"category\", \"Lower-Case-Nodes\");\n        policies.add(policy);\n        policy = new PluginConfig(\"all-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.InclusiveInterfacePolicy\");\n        policies.add(policy);\n        policy = new PluginConfig(\"10-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingInterfacePolicy\");\n        policy.addParameter(\"ipaddress\", \"~^10\\\\..*$\");\n        policies.add(policy);\n        policy = new PluginConfig(\"cisco-snmp-interfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingSnmpInterfacePolicy\");\n        policy.addParameter(\"ifdescr\", \"~^(?i:LEC).*$\");\n        policies.add(policy);\n        fs.setPolicies(policies);\n\n        fsw = new ForeignSourceWrapper(fsr.getAll());\n        c = JAXBContext.newInstance(ForeignSourceWrapper.class, OnmsForeignSource.class);\n\n        m = c.createMarshaller();\n        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n        \n        XMLUnit.setIgnoreWhitespace(true);\n        XMLUnit.setIgnoreAttributeOrder(true);\n        XMLUnit.setNormalize(true);\n    }","id":10495,"modified_method":"@Before\n    public void setUp() throws JAXBException {\n        fsr = new MockForeignSourceRepository();\n        fsr.save(new OnmsForeignSource(\"cheese\"));\n\n        fs = fsr.get(\"cheese\");\n//        fs.setScanInterval(scanInterval)\n\n        ArrayList<PluginConfig> detectors = new ArrayList<PluginConfig>();\n        final PluginConfig detector = new PluginConfig(\"food\", \"org.opennms.netmgt.provision.persist.detectors.FoodDetector\");\n        detector.addParameter(\"type\", \"cheese\");\n        detector.addParameter(\"density\", \"soft\");\n        detector.addParameter(\"sharpness\", \"mild\");\n        detectors.add(detector);\n        fs.setDetectors(detectors);\n\n        ArrayList<PluginConfig> policies = new ArrayList<PluginConfig>();\n        PluginConfig policy = new PluginConfig(\"lower-case-node\", \"org.opennms.netmgt.provision.persist.policies.NodeCategoryPolicy\");\n        policy.addParameter(\"label\", \"~^[a-z]$\");\n        policy.addParameter(\"category\", \"Lower-Case-Nodes\");\n        policies.add(policy);\n        policy = new PluginConfig(\"all-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.InclusiveInterfacePolicy\");\n        policies.add(policy);\n        policy = new PluginConfig(\"10-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingInterfacePolicy\");\n        policy.addParameter(\"ipaddress\", \"~^10\\\\..*$\");\n        policies.add(policy);\n        policy = new PluginConfig(\"cisco-snmp-interfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingSnmpInterfacePolicy\");\n        policy.addParameter(\"ifdescr\", \"~^(?i:LEC).*$\");\n        policies.add(policy);\n        fs.setPolicies(policies);\n\n        fsw = new ForeignSourceWrapper(fsr.getAll());\n        c = JAXBContext.newInstance(ForeignSourceWrapper.class, OnmsForeignSource.class);\n\n        m = c.createMarshaller();\n        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n        \n        XMLUnit.setIgnoreWhitespace(true);\n        XMLUnit.setIgnoreAttributeOrder(true);\n        XMLUnit.setNormalize(true);\n    }","commit_id":"e0ccae1763a03938429c91d9fc567029c5c031d9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public int hashCode() {\n        return new HashCodeBuilder()\n            .append(getName())\n            .append(getScanInterval())\n            .append(getDetectors())\n            .append(getPolicies())\n            .toHashCode();\n      }","id":10496,"modified_method":"@Override\n    public int hashCode() {\n        return new HashCodeBuilder()\n            .append(getName())\n            .append(getScanInterval())\n            .append(getDetectors().toArray(new PluginConfig[0]))\n            .append(getPolicies().toArray(new PluginConfig[0]))\n            .append(isDefault())\n            .toHashCode();\n      }","commit_id":"e0ccae1763a03938429c91d9fc567029c5c031d9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public boolean equals(Object obj) {\n        if (obj instanceof OnmsForeignSource) {\n            OnmsForeignSource other = (OnmsForeignSource) obj;\n            return new EqualsBuilder()\n                .append(getName(), other.getName())\n                .append(getScanInterval(), other.getScanInterval())\n                .append(getDetectors(), other.getDetectors())\n                .append(getPolicies(), other.getPolicies())\n                .isEquals();\n        }\n        return false;\n    }","id":10497,"modified_method":"@Override\n    public boolean equals(Object obj) {\n        if (obj instanceof OnmsForeignSource) {\n            OnmsForeignSource other = (OnmsForeignSource) obj;\n            return new EqualsBuilder()\n                .append(getName(), other.getName())\n                .append(getScanInterval(), other.getScanInterval())\n                .append(getDetectors().toArray(new PluginConfig[0]), other.getDetectors().toArray(new PluginConfig[0]))\n                .append(getPolicies().toArray(new PluginConfig[0]), other.getPolicies().toArray(new PluginConfig[0]))\n                .append(isDefault(), other.isDefault())\n                .isEquals();\n        }\n        return false;\n    }","commit_id":"e0ccae1763a03938429c91d9fc567029c5c031d9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"name\", getName())\n            .append(\"scan-interval\", getScanInterval())\n            .append(\"detectors\", getDetectors())\n            .append(\"policies\", getPolicies())\n            .toString();\n    }","id":10498,"modified_method":"@Override\n    public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"name\", getName())\n            .append(\"scan-interval\", getScanInterval())\n            .append(\"detectors\", getDetectors().toArray(new PluginConfig[0]))\n            .append(\"policies\", getPolicies().toArray(new PluginConfig[0]))\n            .toString();\n    }","commit_id":"e0ccae1763a03938429c91d9fc567029c5c031d9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"name\", getName())\n            .append(\"plugin-class\", getPluginClass())\n            .append(\"parameters\", getParameters())\n            .toString();\n    }","id":10499,"modified_method":"@Override\n    public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"name\", getName())\n            .append(\"plugin-class\", getPluginClass())\n            .append(\"parameters\", getParametersAsString())\n            .toString();\n    }","commit_id":"e0ccae1763a03938429c91d9fc567029c5c031d9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public int hashCode() {\n        return new HashCodeBuilder()\n            .append(getName())\n            .append(getPluginClass())\n            .append(getParameters())\n            .toHashCode();\n      }","id":10500,"modified_method":"@Override\n    public int hashCode() {\n        return new HashCodeBuilder()\n            .append(getName())\n            .append(getPluginClass())\n            .append(getParametersAsString())\n            .toHashCode();\n      }","commit_id":"e0ccae1763a03938429c91d9fc567029c5c031d9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public boolean equals(Object obj) {\n        if (obj instanceof PluginConfig) {\n            PluginConfig other = (PluginConfig) obj;\n            return new EqualsBuilder()\n                .append(getName(), other.getName())\n                .append(getPluginClass(), other.getPluginClass())\n                .append(getParameters(), other.getParameters())\n                .isEquals();\n        }\n        return false;\n    }","id":10501,"modified_method":"@Override\n    public boolean equals(Object obj) {\n        if (obj instanceof PluginConfig) {\n            PluginConfig other = (PluginConfig) obj;\n            return new EqualsBuilder()\n                .append(getName(), other.getName())\n                .append(getPluginClass(), other.getPluginClass())\n                .append(getParametersAsString(), other.getParametersAsString())\n                .isEquals();\n        }\n        return false;\n    }","commit_id":"e0ccae1763a03938429c91d9fc567029c5c031d9","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OnmsRequisition getRequisition(String foreignSourceName) throws ForeignSourceRepositoryException {\n        File inputFile = new File(m_requisitionPath, foreignSourceName + \".xml\");\n        try {\n            OnmsRequisition req = new OnmsRequisition();\n            req.loadResource(new FileSystemResource(inputFile));\n            return req;\n        } catch (Exception e) {\n            throw new ForeignSourceRepositoryException(\"unable to unmarshal \" + inputFile.getPath(), e);\n        }\n    }","id":10502,"modified_method":"public OnmsRequisition getRequisition(String foreignSourceName) throws ForeignSourceRepositoryException {\n        File inputFile = encodeFileName(m_requisitionPath, foreignSourceName);\n        try {\n            OnmsRequisition req = new OnmsRequisition();\n            req.loadResource(new FileSystemResource(inputFile));\n            return req;\n        } catch (Exception e) {\n            throw new ForeignSourceRepositoryException(\"unable to unmarshal \" + inputFile.getPath(), e);\n        }\n    }","commit_id":"3b15d034525a17805955306656b4898e8a8fc70f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public OnmsForeignSource get(String foreignSourceName) throws ForeignSourceRepositoryException {\n        File inputFile = new File(m_foreignSourcePath, foreignSourceName + \".xml\");\n        return get(inputFile);\n    }","id":10503,"modified_method":"public OnmsForeignSource get(String foreignSourceName) throws ForeignSourceRepositoryException {\n        File inputFile = encodeFileName(m_foreignSourcePath, foreignSourceName);\n        if (inputFile != null && inputFile.exists()) {\n            return get(inputFile);\n        } else {\n            OnmsForeignSource fs = getDefaultForeignSource();\n            fs.setName(foreignSourceName);\n            return fs;\n        }\n    }","commit_id":"3b15d034525a17805955306656b4898e8a8fc70f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private File getOutputFileForForeignSource(OnmsForeignSource foreignSource) throws ForeignSourceRepositoryException {\n        File fsPath = new File(m_foreignSourcePath);\n        createPath(fsPath);\n        File outputFile = new File(fsPath, foreignSource.getName() + \".xml\");\n        return outputFile;\n    }","id":10504,"modified_method":"private File getOutputFileForForeignSource(OnmsForeignSource foreignSource) throws ForeignSourceRepositoryException {\n        File fsPath = new File(m_foreignSourcePath);\n        createPath(fsPath);\n        File outputFile = encodeFileName(m_foreignSourcePath, foreignSource.getName());\n        return outputFile;\n    }","commit_id":"3b15d034525a17805955306656b4898e8a8fc70f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public Set<OnmsForeignSource> getAll() throws ForeignSourceRepositoryException {\n        File directory = new File(m_foreignSourcePath);\n        FilenameFilter filter = new FilenameFilter() {\n            public boolean accept(File dir, String name) {\n                if (name.endsWith(\".xml\")) {\n                    return true;\n                }\n                return false;\n            }\n        };\n        Set<OnmsForeignSource> foreignSources = new TreeSet<OnmsForeignSource>();\n        for (File file : directory.listFiles(filter)) {\n            foreignSources.add(get(file));\n        }\n        return foreignSources;\n    }","id":10505,"modified_method":"public Set<OnmsForeignSource> getAll() throws ForeignSourceRepositoryException {\n        File directory = new File(m_foreignSourcePath);\n        FilenameFilter filter = new FilenameFilter() {\n            public boolean accept(File dir, String name) {\n                if (name.endsWith(\".xml\")) {\n                    return true;\n                }\n                return false;\n            }\n        };\n        TreeSet<OnmsForeignSource> foreignSources = new TreeSet<OnmsForeignSource>();\n        for (File file : directory.listFiles(filter)) {\n            foreignSources.add(get(file));\n        }\n        return foreignSources;\n    }","commit_id":"3b15d034525a17805955306656b4898e8a8fc70f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private File getOutputFileForRequisition(OnmsRequisition requisition) throws ForeignSourceRepositoryException {\n        File reqPath = new File(m_requisitionPath);\n        createPath(reqPath);\n        File outputFile = new File(reqPath, requisition.getForeignSource() + \".xml\");\n        return outputFile;\n    }","id":10506,"modified_method":"private File getOutputFileForRequisition(OnmsRequisition requisition) throws ForeignSourceRepositoryException {\n        File reqPath = new File(m_requisitionPath);\n        createPath(reqPath);\n        File outputFile = encodeFileName(m_requisitionPath, requisition.getForeignSource());\n        return outputFile;\n    }","commit_id":"3b15d034525a17805955306656b4898e8a8fc70f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testForeignSource() throws Exception {\n        createRequisition();\n        OnmsForeignSource foreignSource = createForeignSource(m_defaultForeignSourceName);\n        List<OnmsForeignSource> foreignSources = new ArrayList<OnmsForeignSource>(m_foreignSourceRepository.getAll());\n        assertEquals(\"number of foreign sources\", 1, foreignSources.size());\n        assertEquals(\"getAll() foreign source name matches\", m_defaultForeignSourceName, foreignSources.get(0).getName());\n        assertEquals(\"get() returns the foreign source\", foreignSource, m_foreignSourceRepository.get(m_defaultForeignSourceName));\n    }","id":10507,"modified_method":"@Test\n    public void testForeignSource() throws Exception {\n        createRequisition();\n        OnmsForeignSource foreignSource = createForeignSource(m_defaultForeignSourceName);\n        Set<OnmsForeignSource> foreignSources = m_foreignSourceRepository.getAll();\n        assertEquals(\"number of foreign sources must be 1\", 1, foreignSources.size());\n        assertEquals(\"getAll() foreign source name must match\", m_defaultForeignSourceName, foreignSources.iterator().next().getName());\n        assertEquals(\"get() must return the foreign source\", foreignSource, m_foreignSourceRepository.get(m_defaultForeignSourceName));\n    }","commit_id":"3b15d034525a17805955306656b4898e8a8fc70f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testGetRequisition() throws Exception {\n        OnmsRequisition requisition = createRequisition();\n        OnmsForeignSource foreignSource = createForeignSource(m_defaultForeignSourceName);\n        assertEquals(\"requisitions match\", m_foreignSourceRepository.getRequisition(m_defaultForeignSourceName), m_foreignSourceRepository.getRequisition(foreignSource));\n        assertEquals(\"foreign source is expected one\", requisition, m_foreignSourceRepository.getRequisition(foreignSource));\n    }","id":10508,"modified_method":"@Test\n    public void testGetRequisition() throws Exception {\n        OnmsRequisition requisition = createRequisition();\n        OnmsForeignSource foreignSource = createForeignSource(m_defaultForeignSourceName);\n        assertEquals(\"requisitions must match\", m_foreignSourceRepository.getRequisition(m_defaultForeignSourceName), m_foreignSourceRepository.getRequisition(foreignSource));\n        assertEquals(\"foreign source is the expected one\", requisition, m_foreignSourceRepository.getRequisition(foreignSource));\n    }","commit_id":"3b15d034525a17805955306656b4898e8a8fc70f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Before\n    public void setUp() throws JAXBException {\n        fsr = new MockForeignSourceRepository();\n        fsr.save(new OnmsForeignSource(\"cheese\"));\n\n        fs = fsr.get(\"cheese\");\n//        fs.setScanInterval(scanInterval)\n\n        List<PluginConfig> detectors = new ArrayList<PluginConfig>();\n        final PluginConfig detector = new PluginConfig(\"food\", \"org.opennms.netmgt.provision.persist.detectors.FoodDetector\");\n        detector.addParameter(\"type\", \"cheese\");\n        detector.addParameter(\"density\", \"soft\");\n        detector.addParameter(\"sharpness\", \"mild\");\n        detectors.add(detector);\n        fs.setDetectors(detectors);\n\n        List<PluginConfig> policies = new ArrayList<PluginConfig>();\n        PluginConfig policy = new PluginConfig(\"lower-case-node\", \"org.opennms.netmgt.provision.persist.policies.NodeCategoryPolicy\");\n        policy.addParameter(\"label\", \"~^[a-z]$\");\n        policy.addParameter(\"category\", \"Lower-Case-Nodes\");\n        policies.add(policy);\n        policy = new PluginConfig(\"all-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.InclusiveInterfacePolicy\");\n        policies.add(policy);\n        policy = new PluginConfig(\"10-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingInterfacePolicy\");\n        policy.addParameter(\"ipaddress\", \"~^10\\\\..*$\");\n        policies.add(policy);\n        policy = new PluginConfig(\"cisco-snmp-interfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingSnmpInterfacePolicy\");\n        policy.addParameter(\"ifdescr\", \"~^(?i:LEC).*$\");\n        policies.add(policy);\n        fs.setPolicies(policies);\n\n        fsw = new ForeignSourceWrapper(fsr.getAll());\n        c = JAXBContext.newInstance(ForeignSourceWrapper.class, OnmsForeignSource.class);\n\n        m = c.createMarshaller();\n        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n        \n        XMLUnit.setIgnoreWhitespace(true);\n        XMLUnit.setIgnoreAttributeOrder(true);\n        XMLUnit.setNormalize(true);\n    }","id":10509,"modified_method":"@Before\n    public void setUp() throws JAXBException {\n        fsr = new MockForeignSourceRepository();\n        fsr.save(new OnmsForeignSource(\"cheese\"));\n\n        fs = fsr.get(\"cheese\");\n//        fs.setScanInterval(scanInterval)\n\n        ArrayList<PluginConfig> detectors = new ArrayList<PluginConfig>();\n        final PluginConfig detector = new PluginConfig(\"food\", \"org.opennms.netmgt.provision.persist.detectors.FoodDetector\");\n        detector.addParameter(\"type\", \"cheese\");\n        detector.addParameter(\"density\", \"soft\");\n        detector.addParameter(\"sharpness\", \"mild\");\n        detectors.add(detector);\n        fs.setDetectors(detectors);\n\n        ArrayList<PluginConfig> policies = new ArrayList<PluginConfig>();\n        PluginConfig policy = new PluginConfig(\"lower-case-node\", \"org.opennms.netmgt.provision.persist.policies.NodeCategoryPolicy\");\n        policy.addParameter(\"label\", \"~^[a-z]$\");\n        policy.addParameter(\"category\", \"Lower-Case-Nodes\");\n        policies.add(policy);\n        policy = new PluginConfig(\"all-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.InclusiveInterfacePolicy\");\n        policies.add(policy);\n        policy = new PluginConfig(\"10-ipinterfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingInterfacePolicy\");\n        policy.addParameter(\"ipaddress\", \"~^10\\\\..*$\");\n        policies.add(policy);\n        policy = new PluginConfig(\"cisco-snmp-interfaces\", \"org.opennms.netmgt.provision.persist.policies.MatchingSnmpInterfacePolicy\");\n        policy.addParameter(\"ifdescr\", \"~^(?i:LEC).*$\");\n        policies.add(policy);\n        fs.setPolicies(policies);\n\n        fsw = new ForeignSourceWrapper(fsr.getAll());\n        c = JAXBContext.newInstance(ForeignSourceWrapper.class, OnmsForeignSource.class);\n\n        m = c.createMarshaller();\n        m.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, true);\n        \n        XMLUnit.setIgnoreWhitespace(true);\n        XMLUnit.setIgnoreAttributeOrder(true);\n        XMLUnit.setNormalize(true);\n    }","commit_id":"3b15d034525a17805955306656b4898e8a8fc70f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public int hashCode() {\n        return new HashCodeBuilder()\n            .append(getName())\n            .append(getScanInterval())\n            .append(getDetectors())\n            .append(getPolicies())\n            .toHashCode();\n      }","id":10510,"modified_method":"@Override\n    public int hashCode() {\n        return new HashCodeBuilder()\n            .append(getName())\n            .append(getScanInterval())\n            .append(getDetectors().toArray(new PluginConfig[0]))\n            .append(getPolicies().toArray(new PluginConfig[0]))\n            .append(isDefault())\n            .toHashCode();\n      }","commit_id":"3b15d034525a17805955306656b4898e8a8fc70f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"name\", getName())\n            .append(\"scan-interval\", getScanInterval())\n            .append(\"detectors\", getDetectors())\n            .append(\"policies\", getPolicies())\n            .toString();\n    }","id":10511,"modified_method":"@Override\n    public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"name\", getName())\n            .append(\"scan-interval\", getScanInterval())\n            .append(\"detectors\", getDetectors().toArray(new PluginConfig[0]))\n            .append(\"policies\", getPolicies().toArray(new PluginConfig[0]))\n            .toString();\n    }","commit_id":"3b15d034525a17805955306656b4898e8a8fc70f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public boolean equals(Object obj) {\n        if (obj instanceof OnmsForeignSource) {\n            OnmsForeignSource other = (OnmsForeignSource) obj;\n            return new EqualsBuilder()\n                .append(getName(), other.getName())\n                .append(getScanInterval(), other.getScanInterval())\n                .append(getDetectors(), other.getDetectors())\n                .append(getPolicies(), other.getPolicies())\n                .isEquals();\n        }\n        return false;\n    }","id":10512,"modified_method":"@Override\n    public boolean equals(Object obj) {\n        if (obj instanceof OnmsForeignSource) {\n            OnmsForeignSource other = (OnmsForeignSource) obj;\n            return new EqualsBuilder()\n                .append(getName(), other.getName())\n                .append(getScanInterval(), other.getScanInterval())\n                .append(getDetectors().toArray(new PluginConfig[0]), other.getDetectors().toArray(new PluginConfig[0]))\n                .append(getPolicies().toArray(new PluginConfig[0]), other.getPolicies().toArray(new PluginConfig[0]))\n                .append(isDefault(), other.isDefault())\n                .isEquals();\n        }\n        return false;\n    }","commit_id":"3b15d034525a17805955306656b4898e8a8fc70f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public int hashCode() {\n        return new HashCodeBuilder()\n            .append(getName())\n            .append(getPluginClass())\n            .append(getParameters())\n            .toHashCode();\n      }","id":10513,"modified_method":"@Override\n    public int hashCode() {\n        return new HashCodeBuilder()\n            .append(getName())\n            .append(getPluginClass())\n            .append(getParametersAsString())\n            .toHashCode();\n      }","commit_id":"3b15d034525a17805955306656b4898e8a8fc70f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public boolean equals(Object obj) {\n        if (obj instanceof PluginConfig) {\n            PluginConfig other = (PluginConfig) obj;\n            return new EqualsBuilder()\n                .append(getName(), other.getName())\n                .append(getPluginClass(), other.getPluginClass())\n                .append(getParameters(), other.getParameters())\n                .isEquals();\n        }\n        return false;\n    }","id":10514,"modified_method":"@Override\n    public boolean equals(Object obj) {\n        if (obj instanceof PluginConfig) {\n            PluginConfig other = (PluginConfig) obj;\n            return new EqualsBuilder()\n                .append(getName(), other.getName())\n                .append(getPluginClass(), other.getPluginClass())\n                .append(getParametersAsString(), other.getParametersAsString())\n                .isEquals();\n        }\n        return false;\n    }","commit_id":"3b15d034525a17805955306656b4898e8a8fc70f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"name\", getName())\n            .append(\"plugin-class\", getPluginClass())\n            .append(\"parameters\", getParameters())\n            .toString();\n    }","id":10515,"modified_method":"@Override\n    public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"name\", getName())\n            .append(\"plugin-class\", getPluginClass())\n            .append(\"parameters\", getParametersAsString())\n            .toString();\n    }","commit_id":"3b15d034525a17805955306656b4898e8a8fc70f","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void removeFrom(ObjectContainer container) {\n\t\tcm.removeFrom(container);\n\t\tctx.removeFrom(container);\n\t\ttargetURI.removeFrom(container);\n\t\tif(uri != null)\n\t\t\turi.removeFrom(container);\n\t\tsuper.removeFrom(container);\n\t}","id":10516,"modified_method":"public void removeFrom(ObjectContainer container) {\n\t\tcontainer.activate(cm, 2);\n\t\tcm.removeFrom(container);\n\t\tcontainer.activate(ctx, 1);\n\t\tctx.removeFrom(container);\n\t\tcontainer.activate(targetURI, 5);\n\t\tif(targetURI != FreenetURI.EMPTY_CHK_URI)\n\t\t\ttargetURI.removeFrom(container);\n\t\tif(uri != null) {\n\t\t\tcontainer.activate(uri, 5);\n\t\t\turi.removeFrom(container);\n\t\t}\n\t\tsuper.removeFrom(container);\n\t}","commit_id":"8d09eddac2fd0b38fcf98322a596dfbe8b34b98e","url":"https://github.com/freenet/fred"},{"original_method":"@Override\n\tpublic boolean restart(boolean filterData, ObjectContainer container, ClientContext context) {\n\t\tif(!canRestart()) return false;\n\t\tFreenetURI redirect;\n\t\tsynchronized(this) {\n\t\t\tfinished = false;\n\t\t\tredirect =\n\t\t\t\tgetFailedMessage == null ? null : getFailedMessage.redirectURI;\n\t\t\tif(persistenceType == PERSIST_FOREVER && getFailedMessage != null)\n\t\t\t\tgetFailedMessage.removeFrom(container);\n\t\t\tthis.getFailedMessage = null;\n\t\t\tif(persistenceType == PERSIST_FOREVER && allDataPending != null)\n\t\t\t\tallDataPending.removeFrom(container);\n\t\t\tthis.allDataPending = null;\n\t\t\tif(persistenceType == PERSIST_FOREVER && postFetchProtocolErrorMessage != null)\n\t\t\t\tpostFetchProtocolErrorMessage.removeFrom(container);\n\t\t\tthis.postFetchProtocolErrorMessage = null;\n\t\t\tif(persistenceType == PERSIST_FOREVER && progressPending != null)\n\t\t\t\tprogressPending.removeFrom(container);\n\t\t\tthis.progressPending = null;\n\t\t\tif(persistenceType == PERSIST_FOREVER && compatMessage != null)\n\t\t\t\tcompatMessage.removeFrom(container);\n\t\t\tcompatMessage = null;\n\t\t\tif(persistenceType == PERSIST_FOREVER && expectedHashes != null)\n\t\t\t\texpectedHashes.removeFrom(container);\n\t\t\t\texpectedHashes = null;\n\t\t\tstarted = false;\n\t\t\tif(persistenceType == PERSIST_FOREVER) {\n\t\t\t\tcontainer.activate(fctx, 1);\n\t\t\t\tcontainer.activate(fctx.filterData, 1);\n\t\t\t}\n\t\t\tfctx.filterData = filterData;\n\t\t}\n\t\tif(persistenceType == PERSIST_FOREVER)\n\t\t\tcontainer.store(this);\n\t\ttry {\n\t\t\tif(getter.restart(redirect, filterData, container, context)) {\n\t\t\t\tsynchronized(this) {\n\t\t\t\t\tif(redirect != null) {\n\t\t\t\t\t\tif(persistenceType == PERSIST_FOREVER)\n\t\t\t\t\t\t\turi.removeFrom(container);\n\t\t\t\t\t\tthis.uri = redirect;\n\t\t\t\t\t}\n\t\t\t\t\tstarted = true;\n\t\t\t\t}\n\t\t\t\tif(persistenceType == PERSIST_FOREVER)\n\t\t\t\t\tcontainer.store(this);\n\t\t\t}\n\t\t\treturn true;\n\t\t} catch (FetchException e) {\n\t\t\tonFailure(e, null, container);\n\t\t\treturn false;\n\t\t}\n\t}","id":10517,"modified_method":"@Override\n\tpublic boolean restart(boolean filterData, ObjectContainer container, ClientContext context) {\n\t\tif(!canRestart()) return false;\n\t\tFreenetURI redirect;\n\t\tsynchronized(this) {\n\t\t\tfinished = false;\n\t\t\tredirect =\n\t\t\t\tgetFailedMessage == null ? null : getFailedMessage.redirectURI;\n\t\t\tif(persistenceType == PERSIST_FOREVER && getFailedMessage != null) {\n\t\t\t\tcontainer.activate(getFailedMessage, 1);\n\t\t\t\tgetFailedMessage.removeFrom(container);\n\t\t\t}\n\t\t\tthis.getFailedMessage = null;\n\t\t\tif(persistenceType == PERSIST_FOREVER && allDataPending != null) {\n\t\t\t\tcontainer.activate(allDataPending, 1);\n\t\t\t\tallDataPending.removeFrom(container);\n\t\t\t}\n\t\t\tthis.allDataPending = null;\n\t\t\tif(persistenceType == PERSIST_FOREVER && postFetchProtocolErrorMessage != null) {\n\t\t\t\tcontainer.activate(postFetchProtocolErrorMessage, 1);\n\t\t\t\tpostFetchProtocolErrorMessage.removeFrom(container);\n\t\t\t}\n\t\t\tthis.postFetchProtocolErrorMessage = null;\n\t\t\tif(persistenceType == PERSIST_FOREVER && progressPending != null) {\n\t\t\t\tcontainer.activate(progressPending, 1);\n\t\t\t\tprogressPending.removeFrom(container);\n\t\t\t}\n\t\t\tthis.progressPending = null;\n\t\t\tif(persistenceType == PERSIST_FOREVER && compatMessage != null) {\n\t\t\t\tcontainer.activate(compatMessage, 1);\n\t\t\t\tcompatMessage.removeFrom(container);\n\t\t\t}\n\t\t\tcompatMessage = null;\n\t\t\tif(persistenceType == PERSIST_FOREVER && expectedHashes != null) {\n\t\t\t\tcontainer.activate(expectedHashes, 1);\n\t\t\t\texpectedHashes.removeFrom(container);\n\t\t\t}\n\t\t\t\texpectedHashes = null;\n\t\t\tstarted = false;\n\t\t\tif(persistenceType == PERSIST_FOREVER) {\n\t\t\t\tcontainer.activate(fctx, 1);\n\t\t\t\tcontainer.activate(fctx.filterData, 1);\n\t\t\t}\n\t\t\tfctx.filterData = filterData;\n\t\t}\n\t\tif(persistenceType == PERSIST_FOREVER)\n\t\t\tcontainer.store(this);\n\t\ttry {\n\t\t\tif(getter.restart(redirect, filterData, container, context)) {\n\t\t\t\tsynchronized(this) {\n\t\t\t\t\tif(redirect != null) {\n\t\t\t\t\t\tif(persistenceType == PERSIST_FOREVER)\n\t\t\t\t\t\t\turi.removeFrom(container);\n\t\t\t\t\t\tthis.uri = redirect;\n\t\t\t\t\t}\n\t\t\t\t\tstarted = true;\n\t\t\t\t}\n\t\t\t\tif(persistenceType == PERSIST_FOREVER)\n\t\t\t\t\tcontainer.store(this);\n\t\t\t}\n\t\t\treturn true;\n\t\t} catch (FetchException e) {\n\t\t\tonFailure(e, null, container);\n\t\t\treturn false;\n\t\t}\n\t}","commit_id":"c0f4aa081c0b0c7bbc8dacfd226da658a945db25","url":"https://github.com/freenet/fred"},{"original_method":"public void requestWasRemoved(ObjectContainer container) {\n\t\t// if request is still running, send a GetFailed with code=cancelled\n\t\tif( !finished ) {\n\t\t\tsynchronized(this) {\n\t\t\t\tsucceeded = false;\n\t\t\t\tfinished = true;\n\t\t\t\tFetchException cancelled = new FetchException(FetchException.CANCELLED);\n\t\t\t\tgetFailedMessage = new GetFailedMessage(cancelled, identifier, global);\n\t\t\t}\n\t\t\ttrySendDataFoundOrGetFailed(null, container);\n\t\t}\n\t\t// notify client that request was removed\n\t\tFCPMessage msg = new PersistentRequestRemovedMessage(getIdentifier(), global);\n\t\tclient.queueClientRequestMessage(msg, 0, container);\n\n\t\tfreeData(container);\n\t\t\n\t\tif(persistenceType == PERSIST_FOREVER) {\n\t\t\tcontainer.delete(fctx);\n\t\t\tgetter.removeFrom(container);\n\t\t\tif(targetFile != null)\n\t\t\t\tcontainer.delete(targetFile);\n\t\t\tif(tempFile != null)\n\t\t\t\tcontainer.delete(tempFile);\n\t\t\tif(getFailedMessage != null)\n\t\t\t\tgetFailedMessage.removeFrom(container);\n\t\t\tif(postFetchProtocolErrorMessage != null)\n\t\t\t\tpostFetchProtocolErrorMessage.removeFrom(container);\n\t\t\tif(allDataPending != null)\n\t\t\t\tallDataPending.removeFrom(container);\n\t\t}\n\t\tsuper.requestWasRemoved(container);\n\t}","id":10518,"modified_method":"public void requestWasRemoved(ObjectContainer container) {\n\t\t// if request is still running, send a GetFailed with code=cancelled\n\t\tif( !finished ) {\n\t\t\tsynchronized(this) {\n\t\t\t\tsucceeded = false;\n\t\t\t\tfinished = true;\n\t\t\t\tFetchException cancelled = new FetchException(FetchException.CANCELLED);\n\t\t\t\tgetFailedMessage = new GetFailedMessage(cancelled, identifier, global);\n\t\t\t}\n\t\t\ttrySendDataFoundOrGetFailed(null, container);\n\t\t}\n\t\t// notify client that request was removed\n\t\tFCPMessage msg = new PersistentRequestRemovedMessage(getIdentifier(), global);\n\t\tclient.queueClientRequestMessage(msg, 0, container);\n\n\t\tfreeData(container);\n\t\t\n\t\tif(persistenceType == PERSIST_FOREVER) {\n\t\t\tcontainer.delete(fctx);\n\t\t\tgetter.removeFrom(container);\n\t\t\tif(targetFile != null)\n\t\t\t\tcontainer.delete(targetFile);\n\t\t\tif(tempFile != null)\n\t\t\t\tcontainer.delete(tempFile);\n\t\t\tif(getFailedMessage != null) {\n\t\t\t\tcontainer.activate(getFailedMessage, 5);\n\t\t\t\tgetFailedMessage.removeFrom(container);\n\t\t\t}\n\t\t\tif(postFetchProtocolErrorMessage != null) {\n\t\t\t\tcontainer.activate(postFetchProtocolErrorMessage, 5);\n\t\t\t\tpostFetchProtocolErrorMessage.removeFrom(container);\n\t\t\t}\n\t\t\tif(allDataPending != null) {\n\t\t\t\tcontainer.activate(allDataPending, 5);\n\t\t\t\tallDataPending.removeFrom(container);\n\t\t\t}\n\t\t}\n\t\tsuper.requestWasRemoved(container);\n\t}","commit_id":"0774a479522500056e4ad9d0e73d1dc76d963462","url":"https://github.com/freenet/fred"},{"original_method":"public void showHelp(OutputStream out) {\n        try {\n            parser.printHelpOn(out);\n        } catch (IOException e) {\n            throw new UncheckedIOException(e);\n        }\n    }","id":10519,"modified_method":"public void showHelp(OutputStream out) {\n        parser.printUsage(out);\n    }","commit_id":"35dea848603395a4787a54c71d5438a3efce4ce3","url":"https://github.com/gradle/gradle"},{"original_method":"public void convert(String[] args, StartParameter startParameter) {\n        OptionSet options;\n        try {\n            options = parser.parse(args);\n        } catch (OptionException e) {\n            throw new CommandLineArgumentException(e.getMessage());\n        }\n\n        if (options.has(HELP)) {\n            startParameter.setShowHelp(true);\n            return;\n        }\n\n        if (options.has(VERSION)) {\n            startParameter.setShowVersion(true);\n            return;\n        }\n\n        if (options.has(GUI)) {\n            startParameter.setLaunchGUI(true);\n        }\n\n        if (options.has(SYSTEM_PROP)) {\n            List<String> props = (List<String>) options.valuesOf(SYSTEM_PROP);\n            for (String keyValueExpression : props) {\n                String[] elements = keyValueExpression.split(\"=\");\n                startParameter.getSystemPropertiesArgs().put(elements[0], elements.length == 1 ? \"\" : elements[1]);\n            }\n        }\n\n        if (options.has(PROJECT_PROP)) {\n            List<String> props = (List<String>) options.valuesOf(PROJECT_PROP);\n            for (String keyValueExpression : props) {\n                String[] elements = keyValueExpression.split(\"=\");\n                startParameter.getProjectProperties().put(elements[0], elements.length == 1 ? \"\" : elements[1]);\n            }\n        }\n\n        if (options.has(NO_SEARCH_UPWARDS)) {\n            startParameter.setSearchUpwards(false);\n        }\n\n        if (options.has(PROJECT_DIR)) {\n            startParameter.setProjectDir(new File((String) options.valueOf(PROJECT_DIR)));\n        }\n        if (options.hasArgument(GRADLE_USER_HOME)) {\n            startParameter.setGradleUserHomeDir(new File((String) options.valueOf(GRADLE_USER_HOME)));\n        }\n        if (options.hasArgument(BUILD_FILE)) {\n            startParameter.setBuildFile(new File((String) options.valueOf(BUILD_FILE)));\n        }\n        if (options.hasArgument(SETTINGS_FILE)) {\n            startParameter.setSettingsFile(new File((String) options.valueOf(SETTINGS_FILE)));\n        }\n\n        for (String script : (List<String>) options.valuesOf(INIT_SCRIPT)) {\n            startParameter.addInitScript(new File(script));\n        }\n\n        if (options.has(CACHE)) {\n            try {\n                startParameter.setCacheUsage(CacheUsage.fromString(options.valueOf(CACHE).toString()));\n            } catch (InvalidUserDataException e) {\n                throw new CommandLineArgumentException(e.getMessage());\n            }\n        }\n\n        if (options.has(EMBEDDED_SCRIPT)) {\n            if (options.has(BUILD_FILE) || options.has(NO_SEARCH_UPWARDS) || options.has(SETTINGS_FILE)) {\n                System.err.println(String.format(\n                        \"Error: The -%s option can't be used together with the -%s, -%s or -%s options.\",\n                        EMBEDDED_SCRIPT, BUILD_FILE, SETTINGS_FILE, NO_SEARCH_UPWARDS));\n                throw new CommandLineArgumentException(String.format(\n                        \"Error: The -%s option can't be used together with the -%s, -%s or -%s options.\",\n                        EMBEDDED_SCRIPT, BUILD_FILE, SETTINGS_FILE, NO_SEARCH_UPWARDS));\n            }\n            startParameter.useEmbeddedBuildFile((String) options.valueOf(EMBEDDED_SCRIPT));\n        }\n\n        if (options.has(FULL_STACKTRACE)) {\n            if (options.has(STACKTRACE)) {\n                throw new CommandLineArgumentException(String.format(\n                        \"Error: The -%s option can't be used together with the -%s option.\", FULL_STACKTRACE,\n                        STACKTRACE));\n            }\n            startParameter.setShowStacktrace(StartParameter.ShowStacktrace.ALWAYS_FULL);\n        } else if (options.has(STACKTRACE)) {\n            startParameter.setShowStacktrace(StartParameter.ShowStacktrace.ALWAYS);\n        }\n\n        if (options.has(TASKS) && options.has(PROPERTIES)) {\n            throw new CommandLineArgumentException(String.format(\n                    \"Error: The -%s and -%s options cannot be used together.\", TASKS, PROPERTIES));\n        }\n\n        if (options.has(PROJECT_DEPENDENCY_TASK_NAMES) && options.has(NO_PROJECT_DEPENDENCY_REBUILD)) {\n            throw new CommandLineArgumentException(String.format(\n                    \"Error: The -%s and -%s options cannot be used together.\", PROJECT_DEPENDENCY_TASK_NAMES,\n                    NO_PROJECT_DEPENDENCY_REBUILD));\n        } else if (options.has(NO_PROJECT_DEPENDENCY_REBUILD)) {\n            startParameter.setProjectDependenciesBuildInstruction(new ProjectDependenciesBuildInstruction(null));\n        } else if (options.has(PROJECT_DEPENDENCY_TASK_NAMES)) {\n            List<String> normalizedTaskNames = new ArrayList<String>();\n            for (Object o : options.valuesOf(PROJECT_DEPENDENCY_TASK_NAMES)) {\n                String taskName = (String) o;\n                normalizedTaskNames.add(taskName.trim());\n            }\n            startParameter.setProjectDependenciesBuildInstruction(new ProjectDependenciesBuildInstruction(\n                    normalizedTaskNames));\n        }\n\n        if (options.has(TASKS)) {\n            startParameter.setBuildExecuter(new TaskReportBuildExecuter((String) options.valueOf(TASKS), options.has(ALL)));\n        } else if (options.has(PROPERTIES)) {\n            startParameter.setBuildExecuter(new PropertyReportBuildExecuter((String) options.valueOf(PROPERTIES)));\n        } else if (options.has(DEPENDENCIES)) {\n            startParameter.setBuildExecuter(new DependencyReportBuildExecuter((String) options.valueOf(DEPENDENCIES)));\n        } else if (!options.nonOptionArguments().isEmpty()) {\n            startParameter.setTaskNames(options.nonOptionArguments());\n        }\n\n        if (options.has(DRY_RUN)) {\n            startParameter.setDryRun(true);\n        }\n\n        if (options.has(NO_OPT)) {\n            startParameter.setNoOpt(true);\n        }\n\n        if (options.has(EXCLUDE_TASK)) {\n            startParameter.setExcludedTaskNames((List<String>) options.valuesOf(EXCLUDE_TASK));\n        }\n\n        startParameter.setLogLevel(getLogLevel(options));\n        if (options.has(NO_COLOR)) {\n            startParameter.setColorOutput(false);\n        }\n\n        if (options.has(PROFILE)) {\n            startParameter.setProfile(true);\n        }\n    }","id":10520,"modified_method":"public void convert(String[] args, StartParameter startParameter) {\n        ParsedCommandLine options = parser.parse(args);\n\n        if (options.hasOption(HELP)) {\n            startParameter.setShowHelp(true);\n            return;\n        }\n\n        if (options.hasOption(VERSION)) {\n            startParameter.setShowVersion(true);\n            return;\n        }\n\n        if (options.hasOption(GUI)) {\n            startParameter.setLaunchGUI(true);\n        }\n\n        for (String keyValueExpression : options.option(SYSTEM_PROP).getValues()) {\n            String[] elements = keyValueExpression.split(\"=\");\n            startParameter.getSystemPropertiesArgs().put(elements[0], elements.length == 1 ? \"\" : elements[1]);\n        }\n\n        for (String keyValueExpression : options.option(PROJECT_PROP).getValues()) {\n            String[] elements = keyValueExpression.split(\"=\");\n            startParameter.getProjectProperties().put(elements[0], elements.length == 1 ? \"\" : elements[1]);\n        }\n\n        if (options.hasOption(NO_SEARCH_UPWARDS)) {\n            startParameter.setSearchUpwards(false);\n        }\n\n        if (options.hasOption(PROJECT_DIR)) {\n            startParameter.setProjectDir(new File(options.option(PROJECT_DIR).getValue()));\n        }\n        if (options.hasOption(GRADLE_USER_HOME)) {\n            startParameter.setGradleUserHomeDir(new File(options.option(GRADLE_USER_HOME).getValue()));\n        }\n        if (options.hasOption(BUILD_FILE)) {\n            startParameter.setBuildFile(new File(options.option(BUILD_FILE).getValue()));\n        }\n        if (options.hasOption(SETTINGS_FILE)) {\n            startParameter.setSettingsFile(new File(options.option(SETTINGS_FILE).getValue()));\n        }\n\n        for (String script : options.option(INIT_SCRIPT).getValues()) {\n            startParameter.addInitScript(new File(script));\n        }\n\n        if (options.hasOption(CACHE)) {\n            try {\n                startParameter.setCacheUsage(CacheUsage.fromString(options.option(CACHE).getValue()));\n            } catch (InvalidUserDataException e) {\n                throw new CommandLineArgumentException(e.getMessage());\n            }\n        }\n\n        if (options.hasOption(EMBEDDED_SCRIPT)) {\n            if (options.hasOption(BUILD_FILE) || options.hasOption(NO_SEARCH_UPWARDS) || options.hasOption(SETTINGS_FILE)) {\n                System.err.println(String.format(\n                        \"Error: The -%s option can't be used together with the -%s, -%s or -%s options.\",\n                        EMBEDDED_SCRIPT, BUILD_FILE, SETTINGS_FILE, NO_SEARCH_UPWARDS));\n                throw new CommandLineArgumentException(String.format(\n                        \"Error: The -%s option can't be used together with the -%s, -%s or -%s options.\",\n                        EMBEDDED_SCRIPT, BUILD_FILE, SETTINGS_FILE, NO_SEARCH_UPWARDS));\n            }\n            startParameter.useEmbeddedBuildFile(options.option(EMBEDDED_SCRIPT).getValue());\n        }\n\n        if (options.hasOption(FULL_STACKTRACE)) {\n            if (options.hasOption(STACKTRACE)) {\n                throw new CommandLineArgumentException(String.format(\n                        \"Error: The -%s option can't be used together with the -%s option.\", FULL_STACKTRACE,\n                        STACKTRACE));\n            }\n            startParameter.setShowStacktrace(StartParameter.ShowStacktrace.ALWAYS_FULL);\n        } else if (options.hasOption(STACKTRACE)) {\n            startParameter.setShowStacktrace(StartParameter.ShowStacktrace.ALWAYS);\n        }\n\n        if (options.hasOption(TASKS) && options.hasOption(PROPERTIES)) {\n            throw new CommandLineArgumentException(String.format(\n                    \"Error: The -%s and -%s options cannot be used together.\", TASKS, PROPERTIES));\n        }\n\n        if (options.hasOption(PROJECT_DEPENDENCY_TASK_NAMES) && options.hasOption(NO_PROJECT_DEPENDENCY_REBUILD)) {\n            throw new CommandLineArgumentException(String.format(\n                    \"Error: The -%s and -%s options cannot be used together.\", PROJECT_DEPENDENCY_TASK_NAMES,\n                    NO_PROJECT_DEPENDENCY_REBUILD));\n        } else if (options.hasOption(NO_PROJECT_DEPENDENCY_REBUILD)) {\n            startParameter.setProjectDependenciesBuildInstruction(new ProjectDependenciesBuildInstruction(null));\n        } else if (options.hasOption(PROJECT_DEPENDENCY_TASK_NAMES)) {\n            List<String> normalizedTaskNames = new ArrayList<String>();\n            for (String taskName : options.option(PROJECT_DEPENDENCY_TASK_NAMES).getValues()) {\n                normalizedTaskNames.add(taskName);\n            }\n            startParameter.setProjectDependenciesBuildInstruction(new ProjectDependenciesBuildInstruction(\n                    normalizedTaskNames));\n        }\n\n        if (options.hasOption(TASKS)) {\n            startParameter.setBuildExecuter(new TaskReportBuildExecuter(getSingleArgument(options), options.hasOption(ALL)));\n        } else if (options.hasOption(PROPERTIES)) {\n            startParameter.setBuildExecuter(new PropertyReportBuildExecuter(getSingleArgument(options)));\n        } else if (options.hasOption(DEPENDENCIES)) {\n            startParameter.setBuildExecuter(new DependencyReportBuildExecuter(getSingleArgument(options)));\n        } else if (!options.getExtraArguments().isEmpty()) {\n            startParameter.setTaskNames(options.getExtraArguments());\n        }\n\n        if (options.hasOption(DRY_RUN)) {\n            startParameter.setDryRun(true);\n        }\n\n        if (options.hasOption(NO_OPT)) {\n            startParameter.setNoOpt(true);\n        }\n\n        if (options.hasOption(EXCLUDE_TASK)) {\n            startParameter.setExcludedTaskNames(options.option(EXCLUDE_TASK).getValues());\n        }\n\n        startParameter.setLogLevel(getLogLevel(options));\n        if (options.hasOption(NO_COLOR)) {\n            startParameter.setColorOutput(false);\n        }\n\n        if (options.hasOption(PROFILE)) {\n            startParameter.setProfile(true);\n        }\n    }","commit_id":"35dea848603395a4787a54c71d5438a3efce4ce3","url":"https://github.com/gradle/gradle"},{"original_method":"@Test\n    public void withShowDependenciesAndPath() {\n        String somePath = \":SomeProject\";\n        checkConversion(false, true, \"-n\" + somePath);\n        BuildExecuter expectedExecuter = new DependencyReportBuildExecuter(somePath);\n        assertThat(actualStartParameter.getBuildExecuter(), Matchers.reflectionEquals(expectedExecuter));\n    }","id":10521,"modified_method":"@Test\n    public void withShowDependenciesAndPath() {\n        String somePath = \":SomeProject\";\n        checkConversion(false, true, \"-n\", somePath);\n        BuildExecuter expectedExecuter = new DependencyReportBuildExecuter(somePath);\n        assertThat(actualStartParameter.getBuildExecuter(), Matchers.reflectionEquals(expectedExecuter));\n    }","commit_id":"35dea848603395a4787a54c71d5438a3efce4ce3","url":"https://github.com/gradle/gradle"},{"original_method":"@Test\n    public void withShowPropertiesAndPath() {\n        String somePath = \":SomeProject\";\n        checkConversion(false, true, \"-r\" + somePath);\n        BuildExecuter expectedExecuter = new PropertyReportBuildExecuter(somePath);\n        assertThat(actualStartParameter.getBuildExecuter(), Matchers.reflectionEquals(expectedExecuter));\n    }","id":10522,"modified_method":"@Test\n    public void withShowPropertiesAndPath() {\n        String somePath = \":SomeProject\";\n        checkConversion(false, true, \"-r\", somePath);\n        BuildExecuter expectedExecuter = new PropertyReportBuildExecuter(somePath);\n        assertThat(actualStartParameter.getBuildExecuter(), Matchers.reflectionEquals(expectedExecuter));\n    }","commit_id":"35dea848603395a4787a54c71d5438a3efce4ce3","url":"https://github.com/gradle/gradle"},{"original_method":"@Test\n    public void withProjectDependencyTaskNames() {\n        expectedProjectDependenciesBuildInstruction = new ProjectDependenciesBuildInstruction(WrapUtil.toList(\"task1\",\n                \"task2\"));\n        checkConversion(\"-Atask1\", \"-A task2\");\n    }","id":10523,"modified_method":"@Test\n    public void withProjectDependencyTaskNames() {\n        expectedProjectDependenciesBuildInstruction = new ProjectDependenciesBuildInstruction(WrapUtil.toList(\"task1\",\n                \"task2\"));\n        checkConversion(\"-Atask1\", \"-A\", \"task2\");\n    }","commit_id":"35dea848603395a4787a54c71d5438a3efce4ce3","url":"https://github.com/gradle/gradle"},{"original_method":"@Test\n    public void withShowTasksAndPath() {\n        String somePath = \":SomeProject\";\n        checkConversion(false, true, \"-t\" + somePath);\n        BuildExecuter expectedExecuter = new TaskReportBuildExecuter(somePath, false);\n        assertThat(actualStartParameter.getBuildExecuter(), Matchers.reflectionEquals(expectedExecuter));\n    }","id":10524,"modified_method":"@Test\n    public void withShowTasksAndPath() {\n        String somePath = \":SomeProject\";\n        checkConversion(false, true, \"-t\", somePath);\n        BuildExecuter expectedExecuter = new TaskReportBuildExecuter(somePath, false);\n        assertThat(actualStartParameter.getBuildExecuter(), Matchers.reflectionEquals(expectedExecuter));\n    }","commit_id":"35dea848603395a4787a54c71d5438a3efce4ce3","url":"https://github.com/gradle/gradle"},{"original_method":"@Test(expected = CommandLineArgumentException.class)\n    public void withUpperAAndLowerAParameter() {\n        checkConversion(\"-a -Atask1\");\n    }","id":10525,"modified_method":"@Test(expected = CommandLineArgumentException.class)\n    public void withUpperAAndLowerAParameter() {\n        checkConversion(\"-a\", \"-Atask1\");\n    }","commit_id":"35dea848603395a4787a54c71d5438a3efce4ce3","url":"https://github.com/gradle/gradle"},{"original_method":"public void execute() {\n        Clock buildTimeClock = new Clock();\n\n        StartParameter startParameter = null;\n\n        try {\n            startParameter = parameterConverter.convert(args);\n        } catch (Exception e) {\n            System.err.println(e.getMessage());\n            showUsage(System.err);\n            buildCompleter.exit(e);\n        }\n\n        if (startParameter.isShowHelp()) {\n            showUsage(System.out);\n            buildCompleter.exit(null);\n        }\n\n        if (startParameter.isShowVersion()) {\n            System.out.println(new GradleVersion().prettyPrint());\n            buildCompleter.exit(null);\n        }\n\n        if (startParameter.isLaunchGUI()) {\n            try {\n                BlockingApplication.launchAndBlock();\n            } catch (Throwable e) {\n                logger.error(\"Failed to run the UI.\", e);\n                buildCompleter.exit(e);\n            }\n\n            buildCompleter.exit(null);\n        }\n\n        BuildListener resultLogger = new BuildLogger(logger, buildTimeClock, startParameter);\n        try {\n            GradleLauncher gradleLauncher = GradleLauncher.newInstance(startParameter);\n\n            gradleLauncher.useLogger(resultLogger);\n\n            BuildResult buildResult = gradleLauncher.run();\n            if (buildResult.getFailure() != null) {\n                buildCompleter.exit(buildResult.getFailure());\n            }\n        } catch (Throwable e) {\n            resultLogger.buildFinished(new BuildResult(null, e));\n            buildCompleter.exit(e);\n        }\n        buildCompleter.exit(null);\n    }","id":10526,"modified_method":"public void execute() {\n        Clock buildTimeClock = new Clock();\n\n        StartParameter startParameter = null;\n\n        try {\n            startParameter = parameterConverter.convert(args);\n        } catch (Exception e) {\n            System.err.println();\n            System.err.println(e.getMessage());\n            showUsage(System.err);\n            buildCompleter.exit(e);\n        }\n\n        if (startParameter.isShowHelp()) {\n            showUsage(System.out);\n            buildCompleter.exit(null);\n        }\n\n        if (startParameter.isShowVersion()) {\n            System.out.println(new GradleVersion().prettyPrint());\n            buildCompleter.exit(null);\n        }\n\n        if (startParameter.isLaunchGUI()) {\n            try {\n                BlockingApplication.launchAndBlock();\n            } catch (Throwable e) {\n                logger.error(\"Failed to run the UI.\", e);\n                buildCompleter.exit(e);\n            }\n\n            buildCompleter.exit(null);\n        }\n\n        BuildListener resultLogger = new BuildLogger(logger, buildTimeClock, startParameter);\n        try {\n            GradleLauncher gradleLauncher = GradleLauncher.newInstance(startParameter);\n\n            gradleLauncher.useLogger(resultLogger);\n\n            BuildResult buildResult = gradleLauncher.run();\n            if (buildResult.getFailure() != null) {\n                buildCompleter.exit(buildResult.getFailure());\n            }\n        } catch (Throwable e) {\n            resultLogger.buildFinished(new BuildResult(null, e));\n            buildCompleter.exit(e);\n        }\n        buildCompleter.exit(null);\n    }","commit_id":"35dea848603395a4787a54c71d5438a3efce4ce3","url":"https://github.com/gradle/gradle"},{"original_method":"private void showUsage(PrintStream out) {\n        String appName = System.getProperty(\"org.gradle.appname\", \"gradle\");\n        out.println();\n        out.print(\"USAGE: \");\n        new GradleLauncherMetaData().describeCommand(out, \"[option...]\", \"[task...]\");\n        out.println();\n        out.println();\n        parameterConverter.showHelp(out);\n    }","id":10527,"modified_method":"private void showUsage(PrintStream out) {\n        out.println();\n        out.print(\"USAGE: \");\n        new GradleLauncherMetaData().describeCommand(out, \"[option...]\", \"[task...]\");\n        out.println();\n        out.println();\n        parameterConverter.showHelp(out);\n        out.println();\n    }","commit_id":"35dea848603395a4787a54c71d5438a3efce4ce3","url":"https://github.com/gradle/gradle"},{"original_method":"public void testParseXContentForAnalyzeRequestWithInvalidStringExplainParamThrowsException() throws Exception {\n        AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n        BytesReference invalidExplain = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"explain\", \"fals\")\n            .endObject().bytes();\n        try {\n            RestAnalyzeAction.buildFromContent(invalidExplain, analyzeRequest, new ParseFieldMatcher(Settings.EMPTY));\n            fail(\"shouldn't get here\");\n        } catch (Exception e) {\n            assertThat(e, instanceOf(IllegalArgumentException.class));\n            assertThat(e.getMessage(), startsWith(\"explain must be either 'true' or 'false'\"));\n        }\n    }","id":10528,"modified_method":"public void testParseXContentForAnalyzeRequestWithInvalidStringExplainParamThrowsException() throws Exception {\n        AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n        BytesReference invalidExplain = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"explain\", \"fals\")\n            .endObject().bytes();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n            () -> RestAnalyzeAction.buildFromContent(invalidExplain, analyzeRequest, new ParseFieldMatcher(Settings.EMPTY)));\n        assertThat(e.getMessage(), startsWith(\"explain must be either 'true' or 'false'\"));\n    }","commit_id":"aef2e5d90ef99b4ede25804ef9b3b024146f5d88","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testDeprecatedParamException() throws Exception {\n        BytesReference content =  XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"text\", \"THIS IS A TEST\")\n            .field(\"tokenizer\", \"keyword\")\n            .array(\"filters\", \"lowercase\")\n            .endObject().bytes();\n\n        AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n\n        try {\n            RestAnalyzeAction.buildFromContent(content, analyzeRequest, new ParseFieldMatcher(Settings.EMPTY));\n        } catch (Exception e) {\n            assertThat(e, instanceOf(IllegalArgumentException.class));\n            assertThat(e.getMessage(), startsWith(\"Unknown parameter [filters]\"));\n        }\n\n        content =  XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"text\", \"THIS IS A TEST\")\n            .field(\"tokenizer\", \"keyword\")\n            .array(\"token_filters\", \"lowercase\")\n            .endObject().bytes();\n\n        analyzeRequest = new AnalyzeRequest(\"for test\");\n\n        try {\n            RestAnalyzeAction.buildFromContent(content, analyzeRequest, new ParseFieldMatcher(Settings.EMPTY));\n        } catch (Exception e) {\n            assertThat(e, instanceOf(IllegalArgumentException.class));\n            assertThat(e.getMessage(), startsWith(\"Unknown parameter [token_filters]\"));\n        }\n\n        content =  XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"text\", \"THIS IS A TEST\")\n            .field(\"tokenizer\", \"keyword\")\n            .array(\"char_filters\", \"lowercase\")\n            .endObject().bytes();\n\n        analyzeRequest = new AnalyzeRequest(\"for test\");\n\n        try {\n            RestAnalyzeAction.buildFromContent(content, analyzeRequest, new ParseFieldMatcher(Settings.EMPTY));\n        } catch (Exception e) {\n            assertThat(e, instanceOf(IllegalArgumentException.class));\n            assertThat(e.getMessage(), startsWith(\"Unknown parameter [char_filters]\"));\n        }\n\n        content =  XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"text\", \"THIS IS A TEST\")\n            .field(\"tokenizer\", \"keyword\")\n            .array(\"token_filter\", \"lowercase\")\n            .endObject().bytes();\n\n        analyzeRequest = new AnalyzeRequest(\"for test\");\n\n        try {\n            RestAnalyzeAction.buildFromContent(content, analyzeRequest, new ParseFieldMatcher(Settings.EMPTY));\n        } catch (Exception e) {\n            assertThat(e, instanceOf(IllegalArgumentException.class));\n            assertThat(e.getMessage(), startsWith(\"Unknown parameter [token_filter]\"));\n        }\n    }","id":10529,"modified_method":"public void testDeprecatedParamException() throws Exception {\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n            () -> RestAnalyzeAction.buildFromContent(\n                XContentFactory.jsonBuilder()\n                    .startObject()\n                    .field(\"text\", \"THIS IS A TEST\")\n                    .field(\"tokenizer\", \"keyword\")\n                    .array(\"filters\", \"lowercase\")\n                    .endObject().bytes(),\n                new AnalyzeRequest(\"for test\"), new ParseFieldMatcher(Settings.EMPTY)));\n        assertThat(e.getMessage(), startsWith(\"Unknown parameter [filters]\"));\n\n\n        e = expectThrows(IllegalArgumentException.class,\n            () -> RestAnalyzeAction.buildFromContent(\n                XContentFactory.jsonBuilder()\n                    .startObject()\n                    .field(\"text\", \"THIS IS A TEST\")\n                    .field(\"tokenizer\", \"keyword\")\n                    .array(\"token_filters\", \"lowercase\")\n                    .endObject().bytes(),\n                new AnalyzeRequest(\"for test\"), new ParseFieldMatcher(Settings.EMPTY)));\n        assertThat(e.getMessage(), startsWith(\"Unknown parameter [token_filters]\"));\n\n\n        e = expectThrows(IllegalArgumentException.class,\n            () -> RestAnalyzeAction.buildFromContent(\n                XContentFactory.jsonBuilder()\n                    .startObject()\n                    .field(\"text\", \"THIS IS A TEST\")\n                    .field(\"tokenizer\", \"keyword\")\n                    .array(\"char_filters\", \"lowercase\")\n                    .endObject().bytes(),\n                new AnalyzeRequest(\"for test\"), new ParseFieldMatcher(Settings.EMPTY)));\n        assertThat(e.getMessage(), startsWith(\"Unknown parameter [char_filters]\"));\n\n        e = expectThrows(IllegalArgumentException.class,\n            () -> RestAnalyzeAction.buildFromContent(\n                XContentFactory.jsonBuilder()\n                    .startObject()\n                    .field(\"text\", \"THIS IS A TEST\")\n                    .field(\"tokenizer\", \"keyword\")\n                    .array(\"token_filter\", \"lowercase\")\n                    .endObject().bytes()\n                , new AnalyzeRequest(\"for test\"), new ParseFieldMatcher(Settings.EMPTY)));\n        assertThat(e.getMessage(), startsWith(\"Unknown parameter [token_filter]\"));\n    }","commit_id":"aef2e5d90ef99b4ede25804ef9b3b024146f5d88","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testParseXContentForAnalyzeRequestWithInvalidJsonThrowsException() throws Exception {\n        AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n\n        try {\n            RestAnalyzeAction.buildFromContent(new BytesArray(\"{invalid_json}\"), analyzeRequest, new ParseFieldMatcher(Settings.EMPTY));\n            fail(\"shouldn't get here\");\n        } catch (Exception e) {\n            assertThat(e, instanceOf(IllegalArgumentException.class));\n            assertThat(e.getMessage(), equalTo(\"Failed to parse request body\"));\n        }\n    }","id":10530,"modified_method":"public void testParseXContentForAnalyzeRequestWithInvalidJsonThrowsException() throws Exception {\n        AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n            () -> RestAnalyzeAction.buildFromContent(\n                new BytesArray(\"{invalid_json}\"), analyzeRequest, new ParseFieldMatcher(Settings.EMPTY)));\n        assertThat(e.getMessage(), equalTo(\"Failed to parse request body\"));\n    }","commit_id":"aef2e5d90ef99b4ede25804ef9b3b024146f5d88","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testParseXContentForAnalyzeRequestWithUnknownParamThrowsException() throws Exception {\n        AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n        BytesReference invalidContent = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"text\", \"THIS IS A TEST\")\n            .field(\"unknown\", \"keyword\")\n            .endObject().bytes();\n\n        try {\n            RestAnalyzeAction.buildFromContent(invalidContent, analyzeRequest, new ParseFieldMatcher(Settings.EMPTY));\n            fail(\"shouldn't get here\");\n        } catch (Exception e) {\n            assertThat(e, instanceOf(IllegalArgumentException.class));\n            assertThat(e.getMessage(), startsWith(\"Unknown parameter [unknown]\"));\n        }\n    }","id":10531,"modified_method":"public void testParseXContentForAnalyzeRequestWithUnknownParamThrowsException() throws Exception {\n        AnalyzeRequest analyzeRequest = new AnalyzeRequest(\"for test\");\n        BytesReference invalidContent = XContentFactory.jsonBuilder()\n            .startObject()\n            .field(\"text\", \"THIS IS A TEST\")\n            .field(\"unknown\", \"keyword\")\n            .endObject().bytes();\n        IllegalArgumentException e = expectThrows(IllegalArgumentException.class,\n            () -> RestAnalyzeAction.buildFromContent(invalidContent, analyzeRequest, new ParseFieldMatcher(Settings.EMPTY)));\n        assertThat(e.getMessage(), startsWith(\"Unknown parameter [unknown]\"));\n    }","commit_id":"aef2e5d90ef99b4ede25804ef9b3b024146f5d88","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private int deleteInstance(String instanceName) throws IOException {\n    HttpDelete delete = new HttpDelete(getUrl(\"/data/instances/\" + instanceName));\n    HttpResponse response = new DefaultHttpClient().execute(delete);\n    return response.getStatusLine().getStatusCode();\n  }","id":10532,"modified_method":"private int deleteInstance(String instanceName) throws IOException {\n    return HttpRequests.delete(getUrl(\"/data/instances/\" + instanceName)).getResponseCode();\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"private Response<List<DatasetSpecification>> getInstances() throws IOException {\n    HttpGet get = new HttpGet(getUrl(\"/data/instances\"));\n    DefaultHttpClient client = new DefaultHttpClient();\n    return parseResponse(client.execute(get), new TypeToken<List<DatasetSpecification>>() { }.getType());\n  }","id":10533,"modified_method":"private ObjectResponse<List<DatasetSpecification>> getInstances() throws IOException {\n    return ObjectResponse.fromJsonBody(HttpRequests.get(getUrl(\"/data/instances\")),\n                                       new TypeToken<List<DatasetSpecification>>() {\n                                       }.getType());\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testBasics() throws Exception {\n\n    // nothing has been created, modules and types list is empty\n    List<DatasetSpecification> instances = getInstances().value;\n\n    // nothing in the beginning\n    Assert.assertEquals(0, instances.size());\n\n    // create dataset instance with type that is not yet known to the system should fail\n    DatasetProperties props = DatasetProperties.builder().add(\"prop1\", \"val1\").build();\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, createInstance(\"dataset1\", \"datasetType2\", props));\n\n    // deploy modules\n    deployModule(\"module1\", TestModule1.class);\n    deployModule(\"module2\", TestModule2.class);\n\n    // create dataset instance\n    Assert.assertEquals(HttpStatus.SC_OK, createInstance(\"dataset1\", \"datasetType2\", props));\n\n    // verify instance was created\n    instances = getInstances().value;\n    Assert.assertEquals(1, instances.size());\n    // verifying spec is same as expected\n    DatasetSpecification dataset1Spec = createSpec(\"dataset1\", \"datasetType2\", props);\n    Assert.assertEquals(dataset1Spec, instances.get(0));\n\n    // verify created instance info can be retrieved\n    DatasetInstanceMeta datasetInfo = getInstance(\"dataset1\").value;\n    Assert.assertEquals(dataset1Spec, datasetInfo.getSpec());\n    Assert.assertEquals(dataset1Spec.getType(), datasetInfo.getType().getName());\n    // type meta should have 2 modules that has to be loaded to create type's class and in the order they must be loaded\n    List<DatasetModuleMeta> modules = datasetInfo.getType().getModules();\n    Assert.assertEquals(2, modules.size());\n    DatasetTypeHandlerTest.verify(modules.get(0), \"module1\", TestModule1.class, ImmutableList.of(\"datasetType1\"),\n                                  Collections.<String>emptyList(), ImmutableList.of(\"module2\"));\n    DatasetTypeHandlerTest.verify(modules.get(1), \"module2\", TestModule2.class, ImmutableList.of(\"datasetType2\"),\n                                  ImmutableList.of(\"module1\"), Collections.<String>emptyList());\n\n    // try to retrieve non-existed instance\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, getInstance(\"non-existing-dataset\").status);\n\n    // cannot create instance with same name again\n    Assert.assertEquals(HttpStatus.SC_CONFLICT, createInstance(\"dataset1\", \"datasetType2\", props));\n    Assert.assertEquals(1, getInstances().value.size());\n\n    // cannot delete non-existing dataset instance\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, deleteInstance(\"non-existing-dataset\"));\n    Assert.assertEquals(1, getInstances().value.size());\n\n    // delete dataset instance\n    Assert.assertEquals(HttpStatus.SC_OK, deleteInstance(\"dataset1\"));\n    Assert.assertEquals(0, getInstances().value.size());\n\n    // delete dataset modules\n    Assert.assertEquals(HttpStatus.SC_OK, deleteModule(\"module2\"));\n    Assert.assertEquals(HttpStatus.SC_OK, deleteModule(\"module1\"));\n  }","id":10534,"modified_method":"@Test\n  public void testBasics() throws Exception {\n\n    // nothing has been created, modules and types list is empty\n    List<DatasetSpecification> instances = getInstances().getResponseObject();\n\n    // nothing in the beginning\n    Assert.assertEquals(0, instances.size());\n\n    // create dataset instance with type that is not yet known to the system should fail\n    DatasetProperties props = DatasetProperties.builder().add(\"prop1\", \"val1\").build();\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, createInstance(\"dataset1\", \"datasetType2\", props));\n\n    // deploy modules\n    deployModule(\"module1\", TestModule1.class);\n    deployModule(\"module2\", TestModule2.class);\n\n    // create dataset instance\n    Assert.assertEquals(HttpStatus.SC_OK, createInstance(\"dataset1\", \"datasetType2\", props));\n\n    // verify instance was created\n    instances = getInstances().getResponseObject();\n    Assert.assertEquals(1, instances.size());\n    // verifying spec is same as expected\n    DatasetSpecification dataset1Spec = createSpec(\"dataset1\", \"datasetType2\", props);\n    Assert.assertEquals(dataset1Spec, instances.get(0));\n\n    // verify created instance info can be retrieved\n    DatasetInstanceMeta datasetInfo = getInstance(\"dataset1\").getResponseObject();\n    Assert.assertEquals(dataset1Spec, datasetInfo.getSpec());\n    Assert.assertEquals(dataset1Spec.getType(), datasetInfo.getType().getName());\n    // type meta should have 2 modules that has to be loaded to create type's class and in the order they must be loaded\n    List<DatasetModuleMeta> modules = datasetInfo.getType().getModules();\n    Assert.assertEquals(2, modules.size());\n    DatasetTypeHandlerTest.verify(modules.get(0), \"module1\", TestModule1.class, ImmutableList.of(\"datasetType1\"),\n                                  Collections.<String>emptyList(), ImmutableList.of(\"module2\"));\n    DatasetTypeHandlerTest.verify(modules.get(1), \"module2\", TestModule2.class, ImmutableList.of(\"datasetType2\"),\n                                  ImmutableList.of(\"module1\"), Collections.<String>emptyList());\n\n    // try to retrieve non-existed instance\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, getInstance(\"non-existing-dataset\").getResponseCode());\n\n    // cannot create instance with same name again\n    Assert.assertEquals(HttpStatus.SC_CONFLICT, createInstance(\"dataset1\", \"datasetType2\", props));\n    Assert.assertEquals(1, getInstances().getResponseObject().size());\n\n    // cannot delete non-existing dataset instance\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, deleteInstance(\"non-existing-dataset\"));\n    Assert.assertEquals(1, getInstances().getResponseObject().size());\n\n    // delete dataset instance\n    Assert.assertEquals(HttpStatus.SC_OK, deleteInstance(\"dataset1\"));\n    Assert.assertEquals(0, getInstances().getResponseObject().size());\n\n    // delete dataset modules\n    Assert.assertEquals(HttpStatus.SC_OK, deleteModule(\"module2\"));\n    Assert.assertEquals(HttpStatus.SC_OK, deleteModule(\"module1\"));\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testCreateDelete() throws Exception {\n    ReactorDatasetNamespace dsNameSpace =\n      new ReactorDatasetNamespace(CConfiguration.create(), DataSetAccessor.Namespace.USER);\n\n    // NOTE: we need to use namespace so that we can later get access thru dsFramework that is namespaced\n    String table1Name = dsNameSpace.namespace(\"myTable1\");\n    String table2Name = dsNameSpace.namespace(\"myTable2\");\n\n    deployModule(\"default-orderedTable\", InMemoryOrderedTableModule.class);\n    deployModule(\"default-core\", CoreDatasetsModule.class);\n\n    // cannot create instance with same name again\n    Assert.assertEquals(HttpStatus.SC_OK, createInstance(table1Name, \"table\", DatasetProperties.EMPTY));\n    Assert.assertEquals(HttpStatus.SC_OK, createInstance(table2Name, \"table\", DatasetProperties.EMPTY));\n    Assert.assertEquals(2, getInstances().value.size());\n\n    // we want to verify that data is also gone, so we write smth to tables first\n    final Table table1 = dsFramework.getDataset(\"myTable1\", null);\n    final Table table2 = dsFramework.getDataset(\"myTable2\", null);\n    TransactionExecutor txExecutor =\n      new DefaultTransactionExecutor(new InMemoryTxSystemClient(txManager),\n                                     ImmutableList.of((TransactionAware) table1, (TransactionAware) table2));\n\n    txExecutor.execute(new TransactionExecutor.Subroutine() {\n      @Override\n      public void apply() throws Exception {\n        table1.put(new Put(\"key1\", \"col1\", \"val1\"));\n        table2.put(new Put(\"key2\", \"col2\", \"val2\"));\n      }\n    });\n\n    // verify that we can read the data\n    txExecutor.execute(new TransactionExecutor.Subroutine() {\n      @Override\n      public void apply() throws Exception {\n        Assert.assertEquals(\"val1\", table1.get(new Get(\"key1\", \"col1\")).getString(\"col1\"));\n        Assert.assertEquals(\"val2\", table2.get(new Get(\"key2\", \"col2\")).getString(\"col2\"));\n      }\n    });\n\n    // delete table, check that it is deleted, create again and verify that it is empty\n    Assert.assertEquals(HttpStatus.SC_OK, deleteInstance(table1Name));\n    Response<List<DatasetSpecification>> instances = getInstances();\n    Assert.assertEquals(1, instances.value.size());\n    Assert.assertEquals(table2Name, instances.value.get(0).getName());\n    Assert.assertEquals(HttpStatus.SC_OK, createInstance(table1Name, \"table\", DatasetProperties.EMPTY));\n    Assert.assertEquals(2, getInstances().value.size());\n\n    // verify that table1 is empty. Note: it is ok for test purpose to re-use the table clients\n    txExecutor.execute(new TransactionExecutor.Subroutine() {\n      @Override\n      public void apply() throws Exception {\n        Assert.assertTrue(table1.get(new Get(\"key1\", \"col1\")).isEmpty());\n        Assert.assertEquals(\"val2\", table2.get(new Get(\"key2\", \"col2\")).getString(\"col2\"));\n        // writing smth to table1 for subsequent test\n        table1.put(new Put(\"key3\", \"col3\", \"val3\"));\n      }\n    });\n\n    // delete all tables, check that they deleted, create again and verify that they are empty\n    Assert.assertEquals(HttpStatus.SC_OK, deleteInstances());\n    Assert.assertEquals(0, getInstances().value.size());\n    Assert.assertEquals(HttpStatus.SC_OK, createInstance(table1Name, \"table\", DatasetProperties.EMPTY));\n    Assert.assertEquals(HttpStatus.SC_OK, createInstance(table2Name, \"table\", DatasetProperties.EMPTY));\n    Assert.assertEquals(2, getInstances().value.size());\n\n    // verify that tables are empty. Note: it is ok for test purpose to re-use the table clients\n    txExecutor.execute(new TransactionExecutor.Subroutine() {\n      @Override\n      public void apply() throws Exception {\n        Assert.assertTrue(table1.get(new Get(\"key3\", \"col3\")).isEmpty());\n        Assert.assertTrue(table2.get(new Get(\"key2\", \"col2\")).isEmpty());\n      }\n    });\n\n    // cleanup\n    Assert.assertEquals(HttpStatus.SC_OK, deleteInstances());\n    Assert.assertEquals(HttpStatus.SC_OK, deleteModules());\n  }","id":10535,"modified_method":"@Test\n  public void testCreateDelete() throws Exception {\n    ReactorDatasetNamespace dsNameSpace =\n      new ReactorDatasetNamespace(CConfiguration.create(), DataSetAccessor.Namespace.USER);\n\n    // NOTE: we need to use namespace so that we can later get access thru dsFramework that is namespaced\n    String table1Name = dsNameSpace.namespace(\"myTable1\");\n    String table2Name = dsNameSpace.namespace(\"myTable2\");\n\n    deployModule(\"default-orderedTable\", InMemoryOrderedTableModule.class);\n    deployModule(\"default-core\", CoreDatasetsModule.class);\n\n    // cannot create instance with same name again\n    Assert.assertEquals(HttpStatus.SC_OK, createInstance(table1Name, \"table\", DatasetProperties.EMPTY));\n    Assert.assertEquals(HttpStatus.SC_OK, createInstance(table2Name, \"table\", DatasetProperties.EMPTY));\n    Assert.assertEquals(2, getInstances().getResponseObject().size());\n\n    // we want to verify that data is also gone, so we write smth to tables first\n    final Table table1 = dsFramework.getDataset(\"myTable1\", null);\n    final Table table2 = dsFramework.getDataset(\"myTable2\", null);\n    TransactionExecutor txExecutor =\n      new DefaultTransactionExecutor(new InMemoryTxSystemClient(txManager),\n                                     ImmutableList.of((TransactionAware) table1, (TransactionAware) table2));\n\n    txExecutor.execute(new TransactionExecutor.Subroutine() {\n      @Override\n      public void apply() throws Exception {\n        table1.put(new Put(\"key1\", \"col1\", \"val1\"));\n        table2.put(new Put(\"key2\", \"col2\", \"val2\"));\n      }\n    });\n\n    // verify that we can read the data\n    txExecutor.execute(new TransactionExecutor.Subroutine() {\n      @Override\n      public void apply() throws Exception {\n        Assert.assertEquals(\"val1\", table1.get(new Get(\"key1\", \"col1\")).getString(\"col1\"));\n        Assert.assertEquals(\"val2\", table2.get(new Get(\"key2\", \"col2\")).getString(\"col2\"));\n      }\n    });\n\n    // delete table, check that it is deleted, create again and verify that it is empty\n    Assert.assertEquals(HttpStatus.SC_OK, deleteInstance(table1Name));\n    ObjectResponse<List<DatasetSpecification>> instances = getInstances();\n    Assert.assertEquals(1, instances.getResponseObject().size());\n    Assert.assertEquals(table2Name, instances.getResponseObject().get(0).getName());\n    Assert.assertEquals(HttpStatus.SC_OK, createInstance(table1Name, \"table\", DatasetProperties.EMPTY));\n    Assert.assertEquals(2, getInstances().getResponseObject().size());\n\n    // verify that table1 is empty. Note: it is ok for test purpose to re-use the table clients\n    txExecutor.execute(new TransactionExecutor.Subroutine() {\n      @Override\n      public void apply() throws Exception {\n        Assert.assertTrue(table1.get(new Get(\"key1\", \"col1\")).isEmpty());\n        Assert.assertEquals(\"val2\", table2.get(new Get(\"key2\", \"col2\")).getString(\"col2\"));\n        // writing smth to table1 for subsequent test\n        table1.put(new Put(\"key3\", \"col3\", \"val3\"));\n      }\n    });\n\n    // delete all tables, check that they deleted, create again and verify that they are empty\n    Assert.assertEquals(HttpStatus.SC_OK, deleteInstances());\n    Assert.assertEquals(0, getInstances().getResponseObject().size());\n    Assert.assertEquals(HttpStatus.SC_OK, createInstance(table1Name, \"table\", DatasetProperties.EMPTY));\n    Assert.assertEquals(HttpStatus.SC_OK, createInstance(table2Name, \"table\", DatasetProperties.EMPTY));\n    Assert.assertEquals(2, getInstances().getResponseObject().size());\n\n    // verify that tables are empty. Note: it is ok for test purpose to re-use the table clients\n    txExecutor.execute(new TransactionExecutor.Subroutine() {\n      @Override\n      public void apply() throws Exception {\n        Assert.assertTrue(table1.get(new Get(\"key3\", \"col3\")).isEmpty());\n        Assert.assertTrue(table2.get(new Get(\"key2\", \"col2\")).isEmpty());\n      }\n    });\n\n    // cleanup\n    Assert.assertEquals(HttpStatus.SC_OK, deleteInstances());\n    Assert.assertEquals(HttpStatus.SC_OK, deleteModules());\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"private int deleteInstances() throws IOException {\n    HttpDelete delete = new HttpDelete(getUrl(\"/data/instances\"));\n    HttpResponse response = new DefaultHttpClient().execute(delete);\n    return response.getStatusLine().getStatusCode();\n  }","id":10536,"modified_method":"private int deleteInstances() throws IOException {\n    return HttpRequests.delete(getUrl(\"/data/instances\")).getResponseCode();\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"private Response<DatasetInstanceMeta> getInstance(String instanceName) throws IOException {\n    HttpGet get = new HttpGet(getUrl(\"/data/instances/\" + instanceName));\n    DefaultHttpClient client = new DefaultHttpClient();\n    return parseResponse(client.execute(get), DatasetInstanceMeta.class);\n  }","id":10537,"modified_method":"private ObjectResponse<DatasetInstanceMeta> getInstance(String instanceName) throws IOException {\n    return ObjectResponse.fromJsonBody(HttpRequests.get(getUrl(\"/data/instances/\" + instanceName)),\n                                       DatasetInstanceMeta.class);\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"private int createInstance(String instanceName, String typeName, DatasetProperties props) throws IOException {\n    HttpPost post = new HttpPost(getUrl(\"/data/instances/\" + instanceName));\n    post.addHeader(\"type-name\", typeName);\n    post.setEntity(new StringEntity(new Gson().toJson(props)));\n\n    DefaultHttpClient client = new DefaultHttpClient();\n    HttpResponse response = client.execute(post);\n\n    return response.getStatusLine().getStatusCode();\n  }","id":10538,"modified_method":"private int createInstance(String instanceName, String typeName, DatasetProperties props) throws IOException {\n    return HttpRequests.put(getUrl(\"/data/instances/\" + instanceName),\n                             new Gson().toJson(props),\n                             \"X-Continuuity-Type-Name\", typeName).getResponseCode();\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"public void addInstance(String datasetInstanceName, String datasetType, DatasetProperties props)\n    throws DatasetManagementException {\n\n    HttpResponse response = doPost(\"instances/\" + datasetInstanceName,\n                                   GSON.toJson(props),\n                                   ImmutableMap.of(\"type-name\", datasetType));\n    if (HttpResponseStatus.CONFLICT.getCode() == response.getResponseCode()) {\n      throw new InstanceConflictException(String.format(\"Failed to add instance %s due to conflict, details: %s\",\n                                                        datasetInstanceName, getDetails(response)));\n    }\n    if (HttpResponseStatus.OK.getCode() != response.getResponseCode()) {\n      throw new DatasetManagementException(String.format(\"Failed to add instance %s, details: %s\",\n                                                         datasetInstanceName, getDetails(response)));\n    }\n  }","id":10539,"modified_method":"public void addInstance(String datasetInstanceName, String datasetType, DatasetProperties props)\n    throws DatasetManagementException {\n\n    HttpResponse response = doPut(\"instances/\" + datasetInstanceName,\n                                   GSON.toJson(props),\n                                   ImmutableMap.of(\"X-Continuuity-Type-Name\", datasetType));\n    if (HttpResponseStatus.CONFLICT.getCode() == response.getResponseCode()) {\n      throw new InstanceConflictException(String.format(\"Failed to add instance %s due to conflict, details: %s\",\n                                                        datasetInstanceName, getDetails(response)));\n    }\n    if (HttpResponseStatus.OK.getCode() != response.getResponseCode()) {\n      throw new DatasetManagementException(String.format(\"Failed to add instance %s, details: %s\",\n                                                         datasetInstanceName, getDetails(response)));\n    }\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"public void addModule(String moduleName, String className, Location jarLocation)\n    throws DatasetManagementException {\n\n    InputStream is;\n    try {\n      is = jarLocation.getInputStream();\n    } catch (IOException e) {\n      throw new DatasetManagementException(String.format(\"Failed to read jar of module %s at %s\",\n                                                         moduleName, jarLocation));\n    }\n    HttpResponse response;\n    try {\n      response = doRequest(\"modules/\" + moduleName,\n                       \"POST\",\n                       ImmutableMap.of(\"class-name\", className),\n                       null, is);\n    } finally {\n      Closeables.closeQuietly(is);\n    }\n\n    if (HttpResponseStatus.CONFLICT.getCode() == response.getResponseCode()) {\n      throw new ModuleConflictException(String.format(\"Failed to add module %s due to conflict, details: %s\",\n                                                      moduleName, getDetails(response)));\n    }\n    if (HttpResponseStatus.OK.getCode() != response.getResponseCode()) {\n      throw new DatasetManagementException(String.format(\"Failed to add module %s, details: %s\",\n                                                      moduleName, getDetails(response)));\n    }\n  }","id":10540,"modified_method":"public void addModule(String moduleName, String className, Location jarLocation)\n    throws DatasetManagementException {\n\n    InputStream is;\n    try {\n      is = jarLocation.getInputStream();\n    } catch (IOException e) {\n      throw new DatasetManagementException(String.format(\"Failed to read jar of module %s at %s\",\n                                                         moduleName, jarLocation));\n    }\n    HttpResponse response;\n    try {\n      response = doRequest(\"modules/\" + moduleName,\n                       \"PUT\",\n                       ImmutableMap.of(\"X-Continuuity-Class-Name\", className),\n                       null, is);\n    } finally {\n      Closeables.closeQuietly(is);\n    }\n\n    if (HttpResponseStatus.CONFLICT.getCode() == response.getResponseCode()) {\n      throw new ModuleConflictException(String.format(\"Failed to add module %s due to conflict, details: %s\",\n                                                      moduleName, getDetails(response)));\n    }\n    if (HttpResponseStatus.OK.getCode() != response.getResponseCode()) {\n      throw new DatasetManagementException(String.format(\"Failed to add module %s, details: %s\",\n                                                      moduleName, getDetails(response)));\n    }\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"private HttpResponse doPost(String resource, String body, Map<String, String> headers)\n    throws DatasetManagementException {\n\n    return doRequest(resource, \"POST\", headers, body, null);\n  }","id":10541,"modified_method":"private HttpResponse doPut(String resource, String body, Map<String, String> headers)\n    throws DatasetManagementException {\n\n    return doRequest(resource, \"PUT\", headers, body, null);\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"protected int deployModule(String moduleName, Class moduleClass) throws IOException {\n    String jarPath = JarFinder.getJar(moduleClass);\n\n    HttpPost post = new HttpPost(getUrl(\"/data/modules/\" + moduleName));\n    post.setEntity(new FileEntity(new File(jarPath), \"application/octet-stream\"));\n    post.addHeader(\"class-name\", moduleClass.getName());\n\n    DefaultHttpClient client = new DefaultHttpClient();\n    HttpResponse response = client.execute(post);\n\n    return response.getStatusLine().getStatusCode();\n  }","id":10542,"modified_method":"protected int deployModule(String moduleName, Class moduleClass) throws Exception {\n    String jarPath = JarFinder.getJar(moduleClass);\n\n    FileInputStream is = new FileInputStream(jarPath);\n    try {\n      return HttpRequests.doRequest(\"PUT\", getUrl(\"/data/modules/\" + moduleName),\n                                    ImmutableMap.of(\"X-Continuuity-Class-Name\", moduleClass.getName()),\n                                    null, is).getResponseCode();\n    } finally {\n      is.close();\n    }\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"protected String getUrl(String resource) {\n    return \"http://\" + \"localhost\" + \":\" + port + Constants.Gateway.GATEWAY_VERSION + resource;\n  }","id":10543,"modified_method":"protected URL getUrl(String resource) throws MalformedURLException {\n    return new URL(\"http://\" + \"localhost\" + \":\" + port + Constants.Gateway.GATEWAY_VERSION + resource);\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"protected int deleteModules() throws IOException {\n    HttpDelete delete = new HttpDelete(getUrl(\"/data/modules\"));\n    HttpResponse response = new DefaultHttpClient().execute(delete);\n    return response.getStatusLine().getStatusCode();\n  }","id":10544,"modified_method":"protected int deleteModules() throws IOException {\n    return HttpRequests.delete(getUrl(\"/data/modules/\")).getResponseCode();\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"protected int deleteModule(String moduleName) throws IOException {\n    HttpDelete delete = new HttpDelete(getUrl(\"/data/modules/\" + moduleName));\n    HttpResponse response = new DefaultHttpClient().execute(delete);\n    return response.getStatusLine().getStatusCode();\n  }","id":10545,"modified_method":"protected int deleteModule(String moduleName) throws Exception {\n    return HttpRequests.delete(getUrl(\"/data/modules/\" + moduleName)).getResponseCode();\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"private Response<List<DatasetTypeMeta>> getTypes() throws IOException {\n    HttpGet get = new HttpGet(getUrl(\"/data/types\"));\n    DefaultHttpClient client = new DefaultHttpClient();\n    return parseResponse(client.execute(get), new TypeToken<List<DatasetTypeMeta>>() { }.getType());\n  }","id":10546,"modified_method":"private ObjectResponse<List<DatasetTypeMeta>> getTypes() throws IOException {\n    return ObjectResponse.fromJsonBody(HttpRequests.get(getUrl(\"/data/types\")),\n                                       new TypeToken<List<DatasetTypeMeta>>() {\n                                       }.getType());\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"private Response<DatasetTypeMeta> getType(String typeName) throws IOException {\n    HttpGet get = new HttpGet(getUrl(\"/data/types/\" + typeName));\n    DefaultHttpClient client = new DefaultHttpClient();\n    return parseResponse(client.execute(get), DatasetTypeMeta.class);\n  }","id":10547,"modified_method":"private ObjectResponse<DatasetTypeMeta> getType(String typeName) throws IOException {\n    return ObjectResponse.fromJsonBody(HttpRequests.get(getUrl(\"/data/types/\" + typeName)),\n                                       DatasetTypeMeta.class);\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testBasics() throws Exception {\n    cleanModules();\n\n    // nothing has been deployed, modules and types list is empty\n    List<DatasetModuleMeta> modules = getModules().value;\n    Assert.assertEquals(0, modules.size());\n    List<DatasetTypeMeta> types = getTypes().value;\n    Assert.assertEquals(0, types.size());\n\n    // deploy module\n    Assert.assertEquals(HttpStatus.SC_OK, deployModule(\"module1\", TestModule1.class));\n\n    // verify deployed module present in a list\n    modules = getModules().value;\n    Assert.assertEquals(1, modules.size());\n    verify(modules.get(0),\n           \"module1\", TestModule1.class, ImmutableList.of(\"datasetType1\"),\n           Collections.<String>emptyList(), Collections.<String>emptyList());\n\n    // verify deployed module info can be retrieved\n    verify(getModule(\"module1\").value, \"module1\", TestModule1.class, ImmutableList.of(\"datasetType1\"),\n           Collections.<String>emptyList(), Collections.<String>emptyList());\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, getType(\"datasetType2\").status);\n\n    // verify type information can be retrieved\n    verify(getType(\"datasetType1\").value, \"datasetType1\", ImmutableList.of(\"module1\"));\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, getType(\"datasetType2\").status);\n\n    types = getTypes().value;\n    Assert.assertEquals(1, types.size());\n    verify(types.get(0), \"datasetType1\", ImmutableList.of(\"module1\"));\n\n\n    // cannot deploy same module again\n    Assert.assertEquals(HttpStatus.SC_CONFLICT, deployModule(\"module1\", TestModule1.class));\n    \n    // deploy another module which depends on the first one\n    Assert.assertEquals(HttpStatus.SC_OK, deployModule(\"module2\", TestModule2.class));\n\n    // verify deployed module present in a list\n    modules = getModules().value;\n    Assert.assertEquals(2, modules.size());\n    for (DatasetModuleMeta module : modules) {\n      if (\"module1\".equals(module.getName())) {\n        verify(module, \"module1\", TestModule1.class, ImmutableList.of(\"datasetType1\"),\n               Collections.<String>emptyList(), ImmutableList.of(\"module2\"));\n      } else if (\"module2\".equals(module.getName())) {\n        verify(module, \"module2\", TestModule2.class, ImmutableList.of(\"datasetType2\"),\n               ImmutableList.of(\"module1\"), Collections.<String>emptyList());\n      } else {\n        Assert.fail(\"unexpected module: \" + module);\n      }\n    }\n\n    // verify deployed module info can be retrieved\n    verify(getModule(\"module2\").value, \"module2\", TestModule2.class, ImmutableList.of(\"datasetType2\"),\n           ImmutableList.of(\"module1\"), Collections.<String>emptyList());\n\n    // verify type information can be retrieved\n    verify(getType(\"datasetType1\").value, \"datasetType1\", ImmutableList.of(\"module1\"));\n    verify(getType(\"datasetType2\").value, \"datasetType2\", ImmutableList.of(\"module1\", \"module2\"));\n\n    types = getTypes().value;\n    Assert.assertEquals(2, types.size());\n    for (DatasetTypeMeta type : types) {\n      if (\"datasetType1\".equals(type.getName())) {\n        verify(type, \"datasetType1\", ImmutableList.of(\"module1\"));\n      } else if (\"datasetType2\".equals(type.getName())) {\n        verify(type, \"datasetType2\", ImmutableList.of(\"module1\", \"module2\"));\n      } else {\n        Assert.fail(\"unexpected type: \" + type);\n      }\n    }\n\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, deleteModule(\"non-existing-module\"));\n    // cannot delete module1 since module2 depends on it, verify that nothing has been deleted\n    Assert.assertEquals(HttpStatus.SC_CONFLICT, deleteModule(\"module1\"));\n    verify(getModule(\"module1\").value, \"module1\", TestModule1.class, ImmutableList.of(\"datasetType1\"),\n           Collections.<String>emptyList(), ImmutableList.of(\"module2\"));\n    verify(getType(\"datasetType1\").value, \"datasetType1\", ImmutableList.of(\"module1\"));\n    Assert.assertEquals(2, getTypes().value.size());\n\n    // delete module2, should be removed from usedBy list everywhere and all its types should no longer be available\n    Assert.assertEquals(HttpStatus.SC_OK, deleteModule(\"module2\"));\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, getType(\"datasetType2\").status);\n    verify(getModule(\"module1\").value, \"module1\", TestModule1.class, ImmutableList.of(\"datasetType1\"),\n           Collections.<String>emptyList(), Collections.<String>emptyList());\n\n    Assert.assertEquals(1, getModules().value.size());\n    Assert.assertEquals(1, getTypes().value.size());\n\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, deleteModule(\"module2\"));\n    Assert.assertEquals(HttpStatus.SC_OK, deleteModules());\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, getType(\"datasetType1\").status);\n\n    Assert.assertEquals(0, getModules().value.size());\n    Assert.assertEquals(0, getTypes().value.size());\n  }","id":10548,"modified_method":"@Test\n  public void testBasics() throws Exception {\n    cleanModules();\n\n    // nothing has been deployed, modules and types list is empty\n    List<DatasetModuleMeta> modules = getModules().getResponseObject();\n    Assert.assertEquals(0, modules.size());\n    List<DatasetTypeMeta> types = getTypes().getResponseObject();\n    Assert.assertEquals(0, types.size());\n\n    // deploy module\n    Assert.assertEquals(HttpStatus.SC_OK, deployModule(\"module1\", TestModule1.class));\n\n    // verify deployed module present in a list\n    modules = getModules().getResponseObject();\n    Assert.assertEquals(1, modules.size());\n    verify(modules.get(0),\n           \"module1\", TestModule1.class, ImmutableList.of(\"datasetType1\"),\n           Collections.<String>emptyList(), Collections.<String>emptyList());\n\n    // verify deployed module info can be retrieved\n    verify(getModule(\"module1\").getResponseObject(), \"module1\", TestModule1.class, ImmutableList.of(\"datasetType1\"),\n           Collections.<String>emptyList(), Collections.<String>emptyList());\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, getType(\"datasetType2\").getResponseCode());\n\n    // verify type information can be retrieved\n    verify(getType(\"datasetType1\").getResponseObject(), \"datasetType1\", ImmutableList.of(\"module1\"));\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, getType(\"datasetType2\").getResponseCode());\n\n    types = getTypes().getResponseObject();\n    Assert.assertEquals(1, types.size());\n    verify(types.get(0), \"datasetType1\", ImmutableList.of(\"module1\"));\n\n\n    // cannot deploy same module again\n    Assert.assertEquals(HttpStatus.SC_CONFLICT, deployModule(\"module1\", TestModule1.class));\n    \n    // deploy another module which depends on the first one\n    Assert.assertEquals(HttpStatus.SC_OK, deployModule(\"module2\", TestModule2.class));\n\n    // verify deployed module present in a list\n    modules = getModules().getResponseObject();\n    Assert.assertEquals(2, modules.size());\n    for (DatasetModuleMeta module : modules) {\n      if (\"module1\".equals(module.getName())) {\n        verify(module, \"module1\", TestModule1.class, ImmutableList.of(\"datasetType1\"),\n               Collections.<String>emptyList(), ImmutableList.of(\"module2\"));\n      } else if (\"module2\".equals(module.getName())) {\n        verify(module, \"module2\", TestModule2.class, ImmutableList.of(\"datasetType2\"),\n               ImmutableList.of(\"module1\"), Collections.<String>emptyList());\n      } else {\n        Assert.fail(\"unexpected module: \" + module);\n      }\n    }\n\n    // verify deployed module info can be retrieved\n    verify(getModule(\"module2\").getResponseObject(), \"module2\", TestModule2.class, ImmutableList.of(\"datasetType2\"),\n           ImmutableList.of(\"module1\"), Collections.<String>emptyList());\n\n    // verify type information can be retrieved\n    verify(getType(\"datasetType1\").getResponseObject(), \"datasetType1\", ImmutableList.of(\"module1\"));\n    verify(getType(\"datasetType2\").getResponseObject(), \"datasetType2\", ImmutableList.of(\"module1\", \"module2\"));\n\n    types = getTypes().getResponseObject();\n    Assert.assertEquals(2, types.size());\n    for (DatasetTypeMeta type : types) {\n      if (\"datasetType1\".equals(type.getName())) {\n        verify(type, \"datasetType1\", ImmutableList.of(\"module1\"));\n      } else if (\"datasetType2\".equals(type.getName())) {\n        verify(type, \"datasetType2\", ImmutableList.of(\"module1\", \"module2\"));\n      } else {\n        Assert.fail(\"unexpected type: \" + type);\n      }\n    }\n\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, deleteModule(\"non-existing-module\"));\n    // cannot delete module1 since module2 depends on it, verify that nothing has been deleted\n    Assert.assertEquals(HttpStatus.SC_CONFLICT, deleteModule(\"module1\"));\n    verify(getModule(\"module1\").getResponseObject(), \"module1\", TestModule1.class, ImmutableList.of(\"datasetType1\"),\n           Collections.<String>emptyList(), ImmutableList.of(\"module2\"));\n    verify(getType(\"datasetType1\").getResponseObject(), \"datasetType1\", ImmutableList.of(\"module1\"));\n    Assert.assertEquals(2, getTypes().getResponseObject().size());\n\n    // delete module2, should be removed from usedBy list everywhere and all its types should no longer be available\n    Assert.assertEquals(HttpStatus.SC_OK, deleteModule(\"module2\"));\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, getType(\"datasetType2\").getResponseCode());\n    verify(getModule(\"module1\").getResponseObject(), \"module1\", TestModule1.class, ImmutableList.of(\"datasetType1\"),\n           Collections.<String>emptyList(), Collections.<String>emptyList());\n\n    Assert.assertEquals(1, getModules().getResponseObject().size());\n    Assert.assertEquals(1, getTypes().getResponseObject().size());\n\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, deleteModule(\"module2\"));\n    Assert.assertEquals(HttpStatus.SC_OK, deleteModules());\n    Assert.assertEquals(HttpStatus.SC_NOT_FOUND, getType(\"datasetType1\").getResponseCode());\n\n    Assert.assertEquals(0, getModules().getResponseObject().size());\n    Assert.assertEquals(0, getTypes().getResponseObject().size());\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"private Response<DatasetModuleMeta> getModule(String moduleName) throws IOException {\n    HttpGet get = new HttpGet(getUrl(\"/data/modules/\" + moduleName));\n    DefaultHttpClient client = new DefaultHttpClient();\n    return parseResponse(client.execute(get), DatasetModuleMeta.class);\n  }","id":10549,"modified_method":"private ObjectResponse<DatasetModuleMeta> getModule(String moduleName) throws IOException {\n    return ObjectResponse.fromJsonBody(HttpRequests.get(getUrl(\"/data/modules/\" + moduleName)),\n                                       DatasetModuleMeta.class);\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"private Response<List<DatasetModuleMeta>> getModules() throws IOException {\n    HttpGet get = new HttpGet(getUrl(\"/data/modules\"));\n    DefaultHttpClient client = new DefaultHttpClient();\n    return parseResponse(client.execute(get), new TypeToken<List<DatasetModuleMeta>>() {\n    }.getType());\n  }","id":10550,"modified_method":"private ObjectResponse<List<DatasetModuleMeta>> getModules() throws IOException {\n    return ObjectResponse.fromJsonBody(HttpRequests.get(getUrl(\"/data/modules\")),\n                                       new TypeToken<List<DatasetModuleMeta>>() {\n                                       }.getType());\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"private void cleanModules() throws Exception {\n    List<DatasetModuleMeta> modules = getModules().value;\n    for (DatasetModuleMeta moduleMeta : modules) {\n      Assert.assertEquals(HttpStatus.SC_OK, deleteModule(moduleMeta.getName()));\n    }\n  }","id":10551,"modified_method":"private void cleanModules() throws Exception {\n    List<DatasetModuleMeta> modules = getModules().getResponseObject();\n    for (DatasetModuleMeta moduleMeta : modules) {\n      Assert.assertEquals(HttpStatus.SC_OK, deleteModule(moduleMeta.getName()));\n    }\n  }","commit_id":"b63bc9d91d54bd8b6014bbf41da94adc0a66671f","url":"https://github.com/caskdata/cdap"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a0b0a0jm0b(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(java.lang.String)\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","id":10552,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a0b0a0bm0b(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(java.lang.String)\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a362a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.insertChild(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.smodel.SNode):void\")));\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_10, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_8.addChild(\"type\", quotedNode_10);\n    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_8.addChild(\"expression\", quotedNode_11);\n    quotedNode_5.addChild(\"expression\", quotedNode_8);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_5);\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_6, \"value\", \"\");\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_6);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9.addChild(\"expression\", quotedNode_12);\n    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_13.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_13, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_9.addChild(\"type\", quotedNode_13);\n    quotedNode_7.addChild(\"expression\", quotedNode_9);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_7);\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","id":10553,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a362a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    SNode quotedNode_14 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.insertChild(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.smodel.SNode,boolean):void\")));\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9.addChild(\"expression\", quotedNode_11);\n    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_12.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_12, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_9.addChild(\"type\", quotedNode_12);\n    quotedNode_5.addChild(\"expression\", quotedNode_9);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_5);\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_6, \"value\", \"\");\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_6);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_13.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_13, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_10.addChild(\"type\", quotedNode_13);\n    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10.addChild(\"expression\", quotedNode_14);\n    quotedNode_7.addChild(\"expression\", quotedNode_10);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_7);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.BooleanConstant\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_8, \"value\", \"true\");\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_8);\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a861a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"1958256073813024441\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","id":10554,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a861a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getChildren():java.util.List\")));\n    quotedNode_2.addChild(\"operation\", quotedNode_3);\n    quotedNode_4 = (SNode) parameter_1;\n    if (quotedNode_4 != null) {\n      quotedNode_2.addChild(\"operand\", HUtil.copyIfNecessary(quotedNode_4));\n    }\n    return quotedNode_2;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a882a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.isDeleted():boolean\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","id":10555,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a882a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getResolveInfo():java.lang.String\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a403a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getDebugText():java.lang.String\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","id":10556,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a403a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_3);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_4, \"value\", \"concept\");\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_4);\n    quotedNode_1.addChild(\"creator\", quotedNode_2);\n    return quotedNode_1;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a213a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_3);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_4, \"value\", \"concept\");\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_4);\n    quotedNode_1.addChild(\"creator\", quotedNode_2);\n    return quotedNode_1;\n  }","id":10557,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a213a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String,boolean)\")));\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_3);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_4, \"value\", \"concept\");\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_4);\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.BooleanConstant\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_5, \"value\", \"false\");\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_5);\n    quotedNode_1.addChild(\"creator\", quotedNode_2);\n    return quotedNode_1;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a1a0a272a1(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4, Object parameter_5) {\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_6.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_6, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_6.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_6, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"3395068133255551311\")));\n    quotedNode_7 = (SNode) parameter_1;\n    if (quotedNode_7 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_7));\n    }\n    quotedNode_8 = (SNode) parameter_2;\n    if (quotedNode_8 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_8));\n    }\n    quotedNode_9 = (SNode) parameter_3;\n    if (quotedNode_9 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_9));\n    }\n    quotedNode_10 = (SNode) parameter_4;\n    if (quotedNode_10 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_10));\n    }\n    quotedNode_11 = (SNode) parameter_5;\n    if (quotedNode_11 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_11));\n    }\n    return quotedNode_6;\n  }","id":10558,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a372a1(Object parameter_1, Object parameter_2) {\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = (SNode) parameter_1;\n    if (quotedNode_4 != null) {\n      quotedNode_3.addChild(\"operand\", HUtil.copyIfNecessary(quotedNode_4));\n    }\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_5, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNode.setReferenceTarget(java.lang.String,org.jetbrains.mps.openapi.model.SNode):void\")));\n    quotedNode_7 = (SNode) parameter_2;\n    if (quotedNode_7 != null) {\n      quotedNode_5.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_7));\n    }\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.addChild(\"actualArgument\", quotedNode_8);\n    quotedNode_3.addChild(\"operation\", quotedNode_5);\n    return quotedNode_3;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a972a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.removeReferent(java.lang.String):void\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","id":10559,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a082a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.isDeleted():boolean\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a792a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"6792623998776975955\")));\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","id":10560,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a792a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNodeUtil.getDebugText(org.jetbrains.mps.openapi.model.SNode):java.lang.String\")));\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNodeUtil\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a313a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(java.lang.String)\")));\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.util(MPS.Core/jetbrains.mps.util@java_stub)\"), SNodeId.fromString(\"~InternUtil.intern(java.lang.String):java.lang.String\")));\n    quotedNode_3.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.util(MPS.Core/jetbrains.mps.util@java_stub)\"), SNodeId.fromString(\"~InternUtil\")));\n    quotedNode_4 = (SNode) parameter_1;\n    if (quotedNode_4 != null) {\n      quotedNode_3.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_4));\n    }\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_3);\n    return quotedNode_2;\n  }","id":10561,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a1a0a313a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(java.lang.String)\")));\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.util(MPS.Core/jetbrains.mps.util@java_stub)\"), SNodeId.fromString(\"~InternUtil\")));\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.util(MPS.Core/jetbrains.mps.util@java_stub)\"), SNodeId.fromString(\"~InternUtil.intern(java.lang.String):java.lang.String\")));\n    quotedNode_4 = (SNode) parameter_1;\n    if (quotedNode_4 != null) {\n      quotedNode_3.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_4));\n    }\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_3);\n    return quotedNode_2;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a182a1(Object parameter_1, Object parameter_2) {\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = (SNode) parameter_1;\n    if (quotedNode_4 != null) {\n      quotedNode_3.addChild(\"operand\", HUtil.copyIfNecessary(quotedNode_4));\n    }\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_5, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNode.setReferenceTarget(java.lang.String,org.jetbrains.mps.openapi.model.SNode):void\")));\n    quotedNode_7 = (SNode) parameter_2;\n    if (quotedNode_7 != null) {\n      quotedNode_5.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_7));\n    }\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.addChild(\"actualArgument\", quotedNode_8);\n    quotedNode_3.addChild(\"operation\", quotedNode_5);\n    return quotedNode_3;\n  }","id":10562,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a182a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.EqualsExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_5, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNode.getContainingModel():org.jetbrains.mps.openapi.model.SModel\")));\n    quotedNode_3.addChild(\"operation\", quotedNode_5);\n    quotedNode_6 = (SNode) parameter_1;\n    if (quotedNode_6 != null) {\n      quotedNode_3.addChild(\"operand\", HUtil.copyIfNecessary(quotedNode_6));\n    }\n    quotedNode_2.addChild(\"leftExpression\", quotedNode_3);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.addChild(\"rightExpression\", quotedNode_4);\n    return quotedNode_2;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a652a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"1958256073813316681\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","id":10563,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a1a0a652a1(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    SNode quotedNode_14 = null;\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_6 = (SNode) parameter_1;\n    if (quotedNode_6 != null) {\n      quotedNode_5.addChild(\"operand\", HUtil.copyIfNecessary(quotedNode_6));\n    }\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_7.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_7, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNode.insertChild(java.lang.String,org.jetbrains.mps.openapi.model.SNode,org.jetbrains.mps.openapi.model.SNode):void\")));\n    quotedNode_9 = (SNode) parameter_2;\n    if (quotedNode_9 != null) {\n      quotedNode_7.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_9));\n    }\n    quotedNode_10 = (SNode) parameter_3;\n    if (quotedNode_10 != null) {\n      quotedNode_7.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_10));\n    }\n    quotedNode_11 = (SNode) parameter_4;\n    if (quotedNode_11 != null) {\n      quotedNode_7.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_11));\n    }\n    quotedNode_5.addChild(\"operation\", quotedNode_7);\n    return quotedNode_5;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a982a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.EqualsExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_5.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_5, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNode.getContainingModel():org.jetbrains.mps.openapi.model.SModel\")));\n    quotedNode_3.addChild(\"operation\", quotedNode_5);\n    quotedNode_6 = (SNode) parameter_1;\n    if (quotedNode_6 != null) {\n      quotedNode_3.addChild(\"operand\", HUtil.copyIfNecessary(quotedNode_6));\n    }\n    quotedNode_2.addChild(\"leftExpression\", quotedNode_3);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.addChild(\"rightExpression\", quotedNode_4);\n    return quotedNode_2;\n  }","id":10564,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a982a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"6792623998776975955\")));\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a172a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    SNode quotedNode_14 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.insertChild(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.smodel.SNode,boolean):void\")));\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9.addChild(\"expression\", quotedNode_11);\n    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_12.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_12, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_9.addChild(\"type\", quotedNode_12);\n    quotedNode_5.addChild(\"expression\", quotedNode_9);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_5);\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_6, \"value\", \"\");\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_6);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_13.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_13, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_10.addChild(\"type\", quotedNode_13);\n    quotedNode_14 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10.addChild(\"expression\", quotedNode_14);\n    quotedNode_7.addChild(\"expression\", quotedNode_10);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_7);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.BooleanConstant\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_8, \"value\", \"true\");\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_8);\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","id":10565,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a172a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.removeReferent(java.lang.String):void\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a842a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"1958256073813024441\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","id":10566,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a842a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"1958256073813316681\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"public List<Tuples._3<String, SNode, _FunctionTypes._void_P1_E0<? super SNode>>> getTransformations() {\n    List<Tuples._3<String, SNode, _FunctionTypes._void_P1_E0<? super SNode>>> transformations = ListSequence.fromList(new ArrayList<Tuples._3<String, SNode, _FunctionTypes._void_P1_E0<? super SNode>>>());\n\n    // ----------------- \n\n    String cat = \"getConceptFqName()->getConcept().getId()\";\n    SNode md = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a5a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a6a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat, md, transformer));\n\n    // ----------------- \n\n    String cat3 = \"setReferent()->setReferenceTarget()\";\n    SNode md3 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a31a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer3 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a41a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat3, md3, transformer3));\n\n    // ----------------- \n\n    String cat4 = \"isAncestor()->SNodeOperations.isAncestor()\";\n    SNode md4 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a12a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer4 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a22a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat4, md4, transformer4));\n\n    // ----------------- \n\n    String cat5 = \"getId()->getSNodeId().toString()\";\n    SNode md5 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a92a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer5 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a03a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat5, md5, transformer5));\n\n    // ----------------- \n\n    String cat7 = \"addReference()->setReference()\";\n    SNode md7 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a73a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer7 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        SNode replacer = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first();\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a1a0a83a1(replacer, replacer, SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat7, md7, transformer7));\n\n    // ----------------- \n\n    String cat8 = \"getRole_()->getRoleInParent()\";\n    SNode md8 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a54a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> transVerifier8 = new _FunctionTypes._return_P1_E0<Boolean, SNode>() {\n      public Boolean invoke(SNode n) {\n        return SNodeOperations.isInstanceOf(n, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(n), \"jetbrains.mps.baseLanguage.structure.DotExpression\") && (SNodeOperations.getAncestor(n, \"jetbrains.mps.lang.quotation.structure.Quotation\", false, false) == null);\n      }\n    };\n    _FunctionTypes._void_P1_E0<? super SNode> transformer8 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a74a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat8, md8, transformer8));\n\n    // ----------------- \n\n    String cat9 = \"isRegistered()->getModel()!=null\";\n    SNode md9 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a45a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer9 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a55a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat9, md9, transformer9));\n\n    // ----------------- \n\n    String cat10 = \"isDisposed()->SNodeOperations.isDisposed()\";\n    SNode md10 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a26a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer10 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a36a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat10, md10, transformer10));\n\n    // ----------------- \n\n    String cat12 = \"getContainingRoot()->getTopmostAncestor()\";\n    SNode md12 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a07a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer12 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a17a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat12, md12, transformer12));\n\n    // ----------------- \n\n    String cat13 = \"isRoot()->SNodeOperation.isRoot()\";\n    SNode md13 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a87a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer13 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a97a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat13, md13, transformer13));\n\n    // ----------------- \n\n    String cat14 = \"getConceptShortName()->getConcept().getShortName()\";\n    SNode md14 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a68a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer14 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a78a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat14, md14, transformer14));\n\n    // ----------------- \n\n    String cat15 = \"getChildren(boolean)->SNodeOperations.getChildren()\";\n    SNode md15 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a49a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer15 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a59a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat15, md15, transformer15));\n\n    // ----------------- \n\n    String cat16 = \"findParent(condition)->SNodeOperations.findParent(condition)\";\n    SNode md16 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a201a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer16 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a301a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat16, md16, transformer16));\n\n    // ----------------- \n\n    String cat17 = \"getDescendants()->.descendants\";\n    SNode md17 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a111a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer17 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        SNode rep;\n        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), \"jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression\")) {\n          rep = _quotation_createNode_f4dkew_a0a0b0a0ie0b(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), \"jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression\"), \"leftExpression\", true));\n        } else {\n          rep = _quotation_createNode_f4dkew_a0a0a1a0a211a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true));\n        }\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), rep);\n\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat17, md17, transformer17));\n\n    // ----------------- \n\n    String cat18 = \"getDescendants(condition)->SNodeOperations.getDescendants(condition)\";\n    SNode md18 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a911a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer18 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a021a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat18, md18, transformer18));\n\n    // ----------------- \n\n    String cat19 = \"replaceChild(n1,n2)->n1.replace with(n2)\";\n    SNode md19 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a721a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer19 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a821a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).getElement(0), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).getElement(1)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat19, md19, transformer19));\n\n    // ----------------- \n\n    String cat20 = \"getProperties()->SNodeOperations.getProperties()\";\n    SNode md20 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a531a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer20 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a631a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat20, md20, transformer20));\n\n    // ----------------- \n\n    String cat22 = \"n.isInstanceOfConcept(c)->n.getConcept().isSubConceptOf(c)\";\n    SNode md22 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a341a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer22 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a441a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first(), SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat22, md22, transformer22));\n\n    // ----------------- \n\n    String cat23 = \"n.isInstanceOfConcept(string)->n.getConcept().isSubConceptOf(SNodeOperations.getConcept(string))\";\n    SNode md23 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a151a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer23 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a251a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first(), SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat23, md23, transformer23));\n\n    // ----------------- \n\n    String cat24 = \"toString()->getPresentation()\";\n    SNode md24 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a951a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer24 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a061a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat24, md24, transformer24));\n\n    // ----------------- \n\n    String cat25 = \"n.getChildrenIterable()->SNodeOperations.getChildren()\";\n    SNode md25 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a761a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer25 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a861a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat25, md25, transformer25));\n\n    // ----------------- \n\n    String cat26 = \"getConceptLanguage()->((Language)((node<>)n).concept/.getModel.?getModule()).getModuleReference()\";\n    SNode md26 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a571a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer26 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a671a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat26, md26, transformer26));\n\n    // ----------------- \n\n    String cat27 = \"getLanguageNamespace()->((Language)((node<>)n).concept/.getModel.?getModule()).getModuleFqName()\";\n    SNode md27 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a381a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer27 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a481a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat27, md27, transformer27));\n\n    // ----------------- \n\n    String cat28 = \"getLanguage()->(Language)((node<>)n).concept/.getModel.?getModule()\";\n    SNode md28 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a191a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer28 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a291a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat28, md28, transformer28));\n\n    // ----------------- \n\n    String cat30 = \"getNodeLanguage()->(Language)((node<>)n).concept/.getModel.?getModule()\";\n    SNode md30 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a991a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer30 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a002a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat30, md30, transformer30));\n\n    // ----------------- \n\n    String cat31 = \"getConceptProperty()->(Language)((node<>)n).concept/.getModel.?getModule()\";\n    SNode md31 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a702a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer31 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a802a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first(), SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat31, md31, transformer31));\n\n    // ----------------- \n\n    String cat32 = \"getDescendantsIterable()->SNodeOperations.getDescendants()\";\n    SNode md32 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a512a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer32 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a612a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).getElement(0), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).getElement(1)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat32, md32, transformer32));\n\n    // ----------------- \n\n    String cat33 = \"getReferencesIterable()->SNodeOperations.getReferences()\";\n    SNode md33 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a322a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer33 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a422a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat33, md33, transformer33));\n\n    // ----------------- \n\n    String cat34 = \"getDebugText()->SNodeOperations.getDebugText()\";\n    SNode md34 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a132a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer34 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a232a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat34, md34, transformer34));\n\n    // ----------------- \n\n    String cat35 = \"getChildRoles()->SNodeOperations.getChildRoles()\";\n    SNode md35 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a932a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer35 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a042a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat35, md35, transformer35));\n\n    // ----------------- \n\n    String cat36 = \"n.getChildren()->SNodeOperations.getChildren()\";\n    SNode md36 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a742a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer36 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a842a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat36, md36, transformer36));\n\n    // ----------------- \n\n    String cat38 = \"n.getReferenceRoles()->SNodeOperations.getReferenceRoles()\";\n    SNode md38 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a552a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer38 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a652a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat38, md38, transformer38));\n\n    // ----------------- \n\n    String cat39 = \"insertChild(a,r,c)->insertChild()\";\n    SNode md39 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a362a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer39 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        List<SNode> arg = SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true);\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a1a0a462a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(arg).getElement(1), ListSequence.fromList(arg).getElement(2), ListSequence.fromList(arg).getElement(0)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat39, md39, transformer39));\n\n    // ----------------- \n\n    String cat40 = \"insertChild(a,r,c,b)->SNodeOperations.insertChild()\";\n    SNode md40 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a172a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer40 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        List<SNode> arg = SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true);\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a1a0a272a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(arg).getElement(1), ListSequence.fromList(arg).getElement(2), ListSequence.fromList(arg).getElement(0), ListSequence.fromList(arg).getElement(3)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat40, md40, transformer40));\n\n    // ----------------- \n\n    String cat41 = \"removeReferent()->setReferenceTarget(null)\";\n    SNode md41 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a972a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> transVerifier41 = new _FunctionTypes._return_P1_E0<Boolean, SNode>() {\n      public Boolean invoke(SNode n) {\n        return SNodeOperations.isInstanceOf(n, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(n), \"jetbrains.mps.baseLanguage.structure.DotExpression\") && (SNodeOperations.getAncestor(n, \"jetbrains.mps.lang.quotation.structure.Quotation\", false, false) == null);\n      }\n    };\n    _FunctionTypes._void_P1_E0<? super SNode> transformer41 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a182a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat41, md41, transformer41));\n\n    // ----------------- \n\n    String cat42 = \"isDeleted()->getModel()==null\";\n    SNode md42 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a882a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer42 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a982a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat42, md42, transformer42));\n\n    // ----------------- \n\n    String cat43 = \"n.getResolveInfo()->SNodeOperations.getResolveInfo()\";\n    SNode md43 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a692a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer43 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a792a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat43, md43, transformer43));\n\n    // ----------------- \n\n    String cat44 = \"n.getDebugText()->SNodeUtil.getDebugText()\";\n    SNode md44 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a403a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer44 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a503a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat44, md44, transformer44));\n\n    // ----------------- \n\n    String cat45 = \"new SNode(model,concept)-new SNode(InternUtil.intern(concept))\";\n    SNode md45 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a213a1(), \"creator\", true), \"jetbrains.mps.baseLanguage.structure.ClassCreator\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer45 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(usage, _quotation_createNode_f4dkew_a0a0a0a313a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.ClassCreator\"), \"actualArgument\", true)).getElement(1)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat45, md45, transformer45));\n\n    // ----------------- \n\n    String cat46 = \"new SNode(model,concept,true-false)-new SNode(InternUtil.intern(concept))\";\n    SNode md46 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a023a1(), \"creator\", true), \"jetbrains.mps.baseLanguage.structure.ClassCreator\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer46 = new _FunctionTypes._void_P1_E0<SNode>() {\n      public void invoke(SNode usage) {\n        SNode intern = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.ClassCreator\"), \"actualArgument\", true)).getElement(2);\n        if (SNodeOperations.isInstanceOf(intern, \"jetbrains.mps.baseLanguage.structure.BooleanConstant\")) {\n          if (SPropertyOperations.getBoolean(SNodeOperations.cast(intern, \"jetbrains.mps.baseLanguage.structure.BooleanConstant\"), \"value\")) {\n            SNodeOperations.replaceWithAnother(usage, _quotation_createNode_f4dkew_a0a0a0a1a0a123a1(intern));\n          } else {\n            SNodeOperations.replaceWithAnother(usage, _quotation_createNode_f4dkew_a0a0a0a0b0a0jm0b(intern));\n          }\n        } else {\n          // do not migrate usages where intern is an expr \n        }\n      }\n    };\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat46, md46, transformer46));\n\n    // ----------------- \n\n    return transformations;\n  }","id":10567,"modified_method":"public List<Tuples._3<String, SNode, _FunctionTypes._void_P1_E0<? super SNode>>> getTransformations() {\n    List<Tuples._3<String, SNode, _FunctionTypes._void_P1_E0<? super SNode>>> transformations = ListSequence.fromList(new ArrayList<Tuples._3<String, SNode, _FunctionTypes._void_P1_E0<? super SNode>>>());\n\n    // ----------------- \n\n    String cat = \"getConceptFqName()->getConcept().getId()\";\n    SNode md = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a5a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a6a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat, md, transformer));\n\n    // ----------------- \n\n    String cat3 = \"setReferent()->setReferenceTarget()\";\n    SNode md3 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a31a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer3 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a41a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat3, md3, transformer3));\n\n    // ----------------- \n\n    String cat4 = \"isAncestor()->SNodeOperations.isAncestor()\";\n    SNode md4 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a12a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer4 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a22a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat4, md4, transformer4));\n\n    // ----------------- \n\n    String cat5 = \"getId()->getSNodeId().toString()\";\n    SNode md5 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a92a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer5 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a03a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat5, md5, transformer5));\n\n    // ----------------- \n\n    String cat7 = \"addReference()->setReference()\";\n    SNode md7 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a73a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer7 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        SNode replacer = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first();\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a1a0a83a1(replacer, replacer, SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat7, md7, transformer7));\n\n    // ----------------- \n\n    String cat8 = \"getRole_()->getRoleInParent()\";\n    SNode md8 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a54a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> transVerifier8 = new _FunctionTypes._return_P1_E0<Boolean, SNode>() {\n      public Boolean invoke(SNode n) {\n        return SNodeOperations.isInstanceOf(n, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(n), \"jetbrains.mps.baseLanguage.structure.DotExpression\") && (SNodeOperations.getAncestor(n, \"jetbrains.mps.lang.quotation.structure.Quotation\", false, false) == null);\n      }\n    };\n    _FunctionTypes._void_P1_E0<? super SNode> transformer8 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a74a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat8, md8, transformer8));\n\n    // ----------------- \n\n    String cat9 = \"isRegistered()->getModel()!=null\";\n    SNode md9 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a45a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer9 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a55a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat9, md9, transformer9));\n\n    // ----------------- \n\n    String cat10 = \"isDisposed()->SNodeOperations.isDisposed()\";\n    SNode md10 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a26a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer10 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a36a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat10, md10, transformer10));\n\n    // ----------------- \n\n    String cat12 = \"getContainingRoot()->getTopmostAncestor()\";\n    SNode md12 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a07a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer12 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a17a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat12, md12, transformer12));\n\n    // ----------------- \n\n    String cat13 = \"isRoot()->SNodeOperation.isRoot()\";\n    SNode md13 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a87a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer13 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a97a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat13, md13, transformer13));\n\n    // ----------------- \n\n    String cat14 = \"getConceptShortName()->getConcept().getShortName()\";\n    SNode md14 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a68a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer14 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a78a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat14, md14, transformer14));\n\n    // ----------------- \n\n    String cat15 = \"getChildren(boolean)->SNodeOperations.getChildren()\";\n    SNode md15 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a49a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer15 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a59a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat15, md15, transformer15));\n\n    // ----------------- \n\n    String cat16 = \"findParent(condition)->SNodeOperations.findParent(condition)\";\n    SNode md16 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a201a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer16 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a301a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat16, md16, transformer16));\n\n    // ----------------- \n\n    String cat17 = \"getDescendants()->.descendants\";\n    SNode md17 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a111a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer17 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        SNode rep;\n        if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), \"jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression\")) {\n          rep = _quotation_createNode_f4dkew_a0a0b0a0ie0b(SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), \"jetbrains.mps.lang.smodel.structure.SemanticDowncastExpression\"), \"leftExpression\", true));\n        } else {\n          rep = _quotation_createNode_f4dkew_a0a0a1a0a211a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true));\n        }\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), rep);\n\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat17, md17, transformer17));\n\n    // ----------------- \n\n    String cat18 = \"getDescendants(condition)->SNodeOperations.getDescendants(condition)\";\n    SNode md18 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a911a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer18 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a021a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat18, md18, transformer18));\n\n    // ----------------- \n\n    String cat19 = \"replaceChild(n1,n2)->n1.replace with(n2)\";\n    SNode md19 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a721a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer19 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a821a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).getElement(0), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).getElement(1)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat19, md19, transformer19));\n\n    // ----------------- \n\n    String cat20 = \"getProperties()->SNodeOperations.getProperties()\";\n    SNode md20 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a531a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer20 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a631a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat20, md20, transformer20));\n\n    // ----------------- \n\n    String cat22 = \"n.isInstanceOfConcept(c)->n.getConcept().isSubConceptOf(c)\";\n    SNode md22 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a341a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer22 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a441a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first(), SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat22, md22, transformer22));\n\n    // ----------------- \n\n    String cat23 = \"n.isInstanceOfConcept(string)->n.getConcept().isSubConceptOf(SNodeOperations.getConcept(string))\";\n    SNode md23 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a151a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer23 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a251a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first(), SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat23, md23, transformer23));\n\n    // ----------------- \n\n    String cat24 = \"toString()->getPresentation()\";\n    SNode md24 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a951a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer24 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a061a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat24, md24, transformer24));\n\n    // ----------------- \n\n    String cat25 = \"getChildrenIterable()->getChildren()\";\n    SNode md25 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a761a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer25 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a861a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat25, md25, transformer25));\n\n    // ----------------- \n\n    String cat26 = \"getConceptLanguage()->((Language)((node<>)n).concept/.getModel.?getModule()).getModuleReference()\";\n    SNode md26 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a571a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer26 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a671a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat26, md26, transformer26));\n\n    // ----------------- \n\n    String cat27 = \"getLanguageNamespace()->((Language)((node<>)n).concept/.getModel.?getModule()).getModuleFqName()\";\n    SNode md27 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a381a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer27 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a481a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat27, md27, transformer27));\n\n    // ----------------- \n\n    String cat28 = \"getLanguage()->(Language)((node<>)n).concept/.getModel.?getModule()\";\n    SNode md28 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a191a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer28 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a291a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat28, md28, transformer28));\n\n    // ----------------- \n\n    String cat30 = \"getNodeLanguage()->(Language)((node<>)n).concept/.getModel.?getModule()\";\n    SNode md30 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a991a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer30 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a002a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat30, md30, transformer30));\n\n    // ----------------- \n\n    String cat31 = \"getConceptProperty()->(Language)((node<>)n).concept/.getModel.?getModule()\";\n    SNode md31 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a702a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer31 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a802a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first(), SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat31, md31, transformer31));\n\n    // ----------------- \n\n    String cat32 = \"getDescendantsIterable()->SNodeOperations.getDescendants()\";\n    SNode md32 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a512a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer32 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a612a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).getElement(0), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).getElement(1)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat32, md32, transformer32));\n\n    // ----------------- \n\n    String cat33 = \"getReferencesIterable()->SNodeOperations.getReferences()\";\n    SNode md33 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a322a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer33 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a422a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat33, md33, transformer33));\n\n    // ----------------- \n\n    String cat34 = \"getDebugText()->SNodeOperations.getDebugText()\";\n    SNode md34 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a132a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer34 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a232a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat34, md34, transformer34));\n\n    // ----------------- \n\n    String cat35 = \"getChildRoles()->SNodeOperations.getChildRoles()\";\n    SNode md35 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a932a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer35 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a042a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat35, md35, transformer35));\n\n    // ----------------- \n\n    String cat38 = \"n.getReferenceRoles()->SNodeOperations.getReferenceRoles()\";\n    SNode md38 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a742a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer38 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a842a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat38, md38, transformer38));\n\n    // ----------------- \n\n    String cat39 = \"insertChild(a,r,c)->insertChild()\";\n    SNode md39 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a552a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer39 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        List<SNode> arg = SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true);\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a1a0a652a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(arg).getElement(1), ListSequence.fromList(arg).getElement(2), ListSequence.fromList(arg).getElement(0)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat39, md39, transformer39));\n\n    // ----------------- \n\n    String cat40 = \"insertChild(a,r,c,b)->SNodeOperations.insertChild()\";\n    SNode md40 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a362a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer40 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        List<SNode> arg = SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true);\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a1a0a462a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(arg).getElement(1), ListSequence.fromList(arg).getElement(2), ListSequence.fromList(arg).getElement(0), ListSequence.fromList(arg).getElement(3)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat40, md40, transformer40));\n\n    // ----------------- \n\n    String cat41 = \"removeReferent()->setReferenceTarget(null)\";\n    SNode md41 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a172a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._return_P1_E0<? extends Boolean, ? super SNode> transVerifier41 = new _FunctionTypes._return_P1_E0<Boolean, SNode>() {\n      public Boolean invoke(SNode n) {\n        return SNodeOperations.isInstanceOf(n, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\") && SNodeOperations.isInstanceOf(SNodeOperations.getParent(n), \"jetbrains.mps.baseLanguage.structure.DotExpression\") && (SNodeOperations.getAncestor(n, \"jetbrains.mps.lang.quotation.structure.Quotation\", false, false) == null);\n      }\n    };\n    _FunctionTypes._void_P1_E0<? super SNode> transformer41 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a372a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true), ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"actualArgument\", true)).first()));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat41, md41, transformer41));\n\n    // ----------------- \n\n    String cat42 = \"isDeleted()->getModel()==null\";\n    SNode md42 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a082a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer42 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a182a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat42, md42, transformer42));\n\n    // ----------------- \n\n    String cat43 = \"n.getResolveInfo()->SNodeOperations.getResolveInfo()\";\n    SNode md43 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a882a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer43 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a982a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat43, md43, transformer43));\n\n    // ----------------- \n\n    String cat44 = \"n.getDebugText()->SNodeUtil.getDebugText()\";\n    SNode md44 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a692a1(), \"operation\", true), \"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer44 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(SNodeOperations.getParent(usage), _quotation_createNode_f4dkew_a0a0a0a792a1(SLinkOperations.getTarget(SNodeOperations.cast(SNodeOperations.getParent(usage), \"jetbrains.mps.baseLanguage.structure.DotExpression\"), \"operand\", true)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat44, md44, transformer44));\n\n    // ----------------- \n\n    String cat45 = \"new SNode(model,concept)-new SNode(InternUtil.intern(concept))\";\n    SNode md45 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a403a1(), \"creator\", true), \"jetbrains.mps.baseLanguage.structure.ClassCreator\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer45 = new _Adapters._return_P1_E0_to__void_P1_E0_adapter<SNode>(new _FunctionTypes._return_P1_E0<SNode, SNode>() {\n      public SNode invoke(SNode usage) {\n        return SNodeOperations.replaceWithAnother(usage, _quotation_createNode_f4dkew_a0a0a0a503a1(ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.ClassCreator\"), \"actualArgument\", true)).getElement(1)));\n      }\n    });\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat45, md45, transformer45));\n\n    // ----------------- \n\n    String cat46 = \"new SNode(model,concept,true-false)-new SNode(InternUtil.intern(concept))\";\n    SNode md46 = SLinkOperations.getTarget(SNodeOperations.cast(SLinkOperations.getTarget(_quotation_createNode_f4dkew_a0a0a213a1(), \"creator\", true), \"jetbrains.mps.baseLanguage.structure.ClassCreator\"), \"baseMethodDeclaration\", false);\n    _FunctionTypes._void_P1_E0<? super SNode> transformer46 = new _FunctionTypes._void_P1_E0<SNode>() {\n      public void invoke(SNode usage) {\n        SNode intern = ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(usage, \"jetbrains.mps.baseLanguage.structure.ClassCreator\"), \"actualArgument\", true)).getElement(2);\n        if (SNodeOperations.isInstanceOf(intern, \"jetbrains.mps.baseLanguage.structure.BooleanConstant\")) {\n          if (SPropertyOperations.getBoolean(SNodeOperations.cast(intern, \"jetbrains.mps.baseLanguage.structure.BooleanConstant\"), \"value\")) {\n            SNodeOperations.replaceWithAnother(usage, _quotation_createNode_f4dkew_a0a0a0a1a0a313a1(intern));\n          } else {\n            SNodeOperations.replaceWithAnother(usage, _quotation_createNode_f4dkew_a0a0a0a0b0a0bm0b(intern));\n          }\n        } else {\n          // do not migrate usages where intern is an expr \n        }\n      }\n    };\n\n    ListSequence.fromList(transformations).addElement(MultiTuple.<String,SNode,_FunctionTypes._void_P1_E0<? super SNode>>from(cat46, md46, transformer46));\n\n    // ----------------- \n\n    return transformations;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a552a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getReferenceRoles():java.util.Set\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","id":10568,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a552a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.insertChild(jetbrains.mps.smodel.SNode,java.lang.String,jetbrains.mps.smodel.SNode):void\")));\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_8 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_10.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_10, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_8.addChild(\"type\", quotedNode_10);\n    quotedNode_11 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_8.addChild(\"expression\", quotedNode_11);\n    quotedNode_5.addChild(\"expression\", quotedNode_8);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_5);\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StringLiteral\", null, null, GlobalScope.getInstance(), false);\n    SNodeAccessUtil.setProperty(quotedNode_6, \"value\", \"\");\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_6);\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.CastExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_12 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.NullLiteral\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_9.addChild(\"expression\", quotedNode_12);\n    quotedNode_13 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassifierType\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_13.setReference(\"classifier\", SReference.create(\"classifier\", quotedNode_13, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode\")));\n    quotedNode_9.addChild(\"type\", quotedNode_13);\n    quotedNode_7.addChild(\"expression\", quotedNode_9);\n    quotedNode_3.addChild(\"actualArgument\", quotedNode_7);\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a742a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getChildren():java.util.List\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","id":10569,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a742a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getReferenceRoles():java.util.Set\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a1a0a462a1(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4) {\n    SNode quotedNode_5 = null;\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    SNode quotedNode_12 = null;\n    SNode quotedNode_13 = null;\n    SNode quotedNode_14 = null;\n    quotedNode_5 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_6 = (SNode) parameter_1;\n    if (quotedNode_6 != null) {\n      quotedNode_5.addChild(\"operand\", HUtil.copyIfNecessary(quotedNode_6));\n    }\n    quotedNode_7 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_7.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_7, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNode.insertChild(java.lang.String,org.jetbrains.mps.openapi.model.SNode,org.jetbrains.mps.openapi.model.SNode):void\")));\n    quotedNode_9 = (SNode) parameter_2;\n    if (quotedNode_9 != null) {\n      quotedNode_7.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_9));\n    }\n    quotedNode_10 = (SNode) parameter_3;\n    if (quotedNode_10 != null) {\n      quotedNode_7.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_10));\n    }\n    quotedNode_11 = (SNode) parameter_4;\n    if (quotedNode_11 != null) {\n      quotedNode_7.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_11));\n    }\n    quotedNode_5.addChild(\"operation\", quotedNode_7);\n    return quotedNode_5;\n  }","id":10570,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a1a0a462a1(Object parameter_1, Object parameter_2, Object parameter_3, Object parameter_4, Object parameter_5) {\n    SNode quotedNode_6 = null;\n    SNode quotedNode_7 = null;\n    SNode quotedNode_8 = null;\n    SNode quotedNode_9 = null;\n    SNode quotedNode_10 = null;\n    SNode quotedNode_11 = null;\n    quotedNode_6 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_6.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_6, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"2089287822043606602\")));\n    quotedNode_6.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_6, SModelReference.fromString(\"r:61e3d524-8c49-4491-b5e3-f6d6e9364527(jetbrains.mps.util)\"), SNodeId.fromString(\"3395068133255551311\")));\n    quotedNode_7 = (SNode) parameter_1;\n    if (quotedNode_7 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_7));\n    }\n    quotedNode_8 = (SNode) parameter_2;\n    if (quotedNode_8 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_8));\n    }\n    quotedNode_9 = (SNode) parameter_3;\n    if (quotedNode_9 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_9));\n    }\n    quotedNode_10 = (SNode) parameter_4;\n    if (quotedNode_10 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_10));\n    }\n    quotedNode_11 = (SNode) parameter_5;\n    if (quotedNode_11 != null) {\n      quotedNode_6.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_11));\n    }\n    return quotedNode_6;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a503a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNodeUtil.getDebugText(org.jetbrains.mps.openapi.model.SNode):java.lang.String\")));\n    quotedNode_2.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_2, SModelReference.fromString(\"f:java_stub#8865b7a8-5271-43d3-884c-6fd1d9cfdd34#org.jetbrains.mps.openapi.model(MPS.OpenAPI/org.jetbrains.mps.openapi.model@java_stub)\"), SNodeId.fromString(\"~SNodeUtil\")));\n    quotedNode_3 = (SNode) parameter_1;\n    if (quotedNode_3 != null) {\n      quotedNode_2.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_3));\n    }\n    return quotedNode_2;\n  }","id":10571,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a0a503a1(Object parameter_1) {\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(java.lang.String)\")));\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.StaticMethodCall\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.util(MPS.Core/jetbrains.mps.util@java_stub)\"), SNodeId.fromString(\"~InternUtil.intern(java.lang.String):java.lang.String\")));\n    quotedNode_3.setReference(\"classConcept\", SReference.create(\"classConcept\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.util(MPS.Core/jetbrains.mps.util@java_stub)\"), SNodeId.fromString(\"~InternUtil\")));\n    quotedNode_4 = (SNode) parameter_1;\n    if (quotedNode_4 != null) {\n      quotedNode_3.addChild(\"actualArgument\", HUtil.copyIfNecessary(quotedNode_4));\n    }\n    quotedNode_2.addChild(\"actualArgument\", quotedNode_3);\n    return quotedNode_2;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode _quotation_createNode_f4dkew_a0a0a692a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_2.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_3.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_3, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getResolveInfo():java.lang.String\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_3);\n    return quotedNode_1;\n  }","id":10572,"modified_method":"private static SNode _quotation_createNode_f4dkew_a0a0a692a1() {\n    SNode quotedNode_1 = null;\n    SNode quotedNode_2 = null;\n    SNode quotedNode_3 = null;\n    SNode quotedNode_4 = null;\n    quotedNode_1 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.DotExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.InstanceMethodCallOperation\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_2.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_2, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.getDebugText():java.lang.String\")));\n    quotedNode_1.addChild(\"operation\", quotedNode_2);\n    quotedNode_3 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.GenericNewExpression\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4 = SModelUtil_new.instantiateConceptDeclaration(\"jetbrains.mps.baseLanguage.structure.ClassCreator\", null, null, GlobalScope.getInstance(), false);\n    quotedNode_4.setReference(\"baseMethodDeclaration\", SReference.create(\"baseMethodDeclaration\", quotedNode_4, SModelReference.fromString(\"f:java_stub#6ed54515-acc8-4d1e-a16c-9fd6cfe951ea#jetbrains.mps.smodel(MPS.Core/jetbrains.mps.smodel@java_stub)\"), SNodeId.fromString(\"~SNode.<init>(jetbrains.mps.smodel.SModel,java.lang.String)\")));\n    quotedNode_3.addChild(\"creator\", quotedNode_4);\n    quotedNode_1.addChild(\"operand\", quotedNode_3);\n    return quotedNode_1;\n  }","commit_id":"486b3e7763c7c4c84f7fd3a3e5d661556a9d08d9","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if (player == null) {\r\n            return false;\r\n        }\r\n\r\n        Cards cards = new CardsImpl(Zone.PICK);\r\n        for (int i = 0; i < 5; i++) {\r\n            Card card = player.getLibrary().removeFromTop(game);\r\n            if (card != null) {\r\n                cards.add(card);\r\n                game.setZone(card.getId(), Zone.PICK);\r\n            }\r\n        }\r\n        player.revealCards(\"Fact or Fiction\", cards, game);\r\n\r\n        Set<UUID> opponents = game.getOpponents(source.getControllerId());\r\n        if (!opponents.isEmpty()) {\r\n            Player opponent = game.getPlayer(opponents.iterator().next());\r\n            TargetCard target = new TargetCard(0, cards.size(), Zone.PICK, new FilterCard(\"cards to put in the first pile\"));\r\n\r\n            Cards pile1 = new CardsImpl();\r\n            if (opponent.choose(Outcome.Neutral, cards, target, game)) {\r\n                List<UUID> targets = target.getTargets();\r\n                for (UUID targetId : targets) {\r\n                    Card card = cards.get(targetId, game);\r\n                    if (card != null) {\r\n                        pile1.add(card);\r\n                        cards.remove(card);\r\n                    }\r\n                }\r\n            }\r\n\r\n            player.revealCards(\"Pile 1 (Fact or Fiction)\", pile1, game);\r\n            player.revealCards(\"Pile 2 (Fact or Fiction)\", cards, game);\r\n\r\n            Choice choice = new ChoiceImpl(true);\r\n            choice.setMessage(\"Select a pile of cards to put into your hand:\");\r\n\r\n            StringBuilder sb = new StringBuilder(\"Pile 1: \");\r\n            for (UUID cardId : pile1) {\r\n                Card card = pile1.get(cardId, game);\r\n                if (card != null) {\r\n                    sb.append(card.getName()).append(\"; \");\r\n                }\r\n            }\r\n            sb.delete(sb.length() - 2, sb.length());\r\n            choice.getChoices().add(sb.toString());\r\n\r\n            sb = new StringBuilder(\"Pile 2: \");\r\n            for (UUID cardId : cards) {\r\n                Card card = cards.get(cardId, game);\r\n                if (card != null) {\r\n                    sb.append(card.getName()).append(\"; \");\r\n                }\r\n            }\r\n            sb.delete(sb.length() - 2, sb.length());\r\n            choice.getChoices().add(sb.toString());\r\n\r\n            Zone pile1Zone = Zone.GRAVEYARD;\r\n            Zone pile2Zone = Zone.HAND;\r\n            if (player.choose(Outcome.Neutral, choice, game)) {\r\n                if (choice.getChoice().startsWith(\"Pile 1\")) {\r\n                    pile1Zone = Zone.HAND;\r\n                    pile2Zone = Zone.GRAVEYARD;\r\n                }\r\n            }\r\n\r\n            for (UUID cardUuid : pile1) {\r\n                Card card = pile1.get(cardUuid, game);\r\n                if (card != null) {\r\n                    card.moveToZone(pile1Zone, source.getId(), game, false);\r\n                }\r\n            }\r\n            for (UUID cardUuid : cards) {\r\n                Card card = cards.get(cardUuid, game);\r\n                if (card != null) {\r\n                    card.moveToZone(pile2Zone, source.getId(), game, false);\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","id":10573,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if (player == null) {\r\n            return false;\r\n        }\r\n\r\n        Cards cards = new CardsImpl(Zone.PICK);\r\n\t\tint count = Math.min(player.getLibrary().size(), 5);\r\n        for (int i = 0; i < count; i++) {\r\n            Card card = player.getLibrary().removeFromTop(game);\r\n            if (card != null) {\r\n                cards.add(card);\r\n                game.setZone(card.getId(), Zone.PICK);\r\n            }\r\n        }\r\n        player.revealCards(\"Fact or Fiction\", cards, game);\r\n\r\n        Set<UUID> opponents = game.getOpponents(source.getControllerId());\r\n        if (!opponents.isEmpty()) {\r\n            Player opponent = game.getPlayer(opponents.iterator().next());\r\n            TargetCard target = new TargetCard(0, cards.size(), Zone.PICK, new FilterCard(\"cards to put in the first pile\"));\r\n\r\n            Cards pile1 = new CardsImpl();\r\n\r\n\t\t\twhile (opponent.choose(Outcome.Neutral, cards, target, game));\r\n\r\n\t\t\tList<UUID> targets = target.getTargets();\r\n\t\t\tfor (UUID targetId : targets) {\r\n\t\t\t\tCard card = cards.get(targetId, game);\r\n\t\t\t\tif (card != null) {\r\n\t\t\t\t\tpile1.add(card);\r\n\t\t\t\t\tcards.remove(card);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n            player.revealCards(\"Pile 1 (Fact or Fiction)\", pile1, game);\r\n            player.revealCards(\"Pile 2 (Fact or Fiction)\", cards, game);\r\n\r\n            Choice choice = new ChoiceImpl(true);\r\n            choice.setMessage(\"Select a pile of cards to put into your hand:\");\r\n\r\n            StringBuilder sb = new StringBuilder(\"Pile 1: \");\r\n            for (UUID cardId : pile1) {\r\n                Card card = pile1.get(cardId, game);\r\n                if (card != null) {\r\n                    sb.append(card.getName()).append(\"; \");\r\n                }\r\n            }\r\n            sb.delete(sb.length() - 2, sb.length());\r\n            choice.getChoices().add(sb.toString());\r\n\r\n            sb = new StringBuilder(\"Pile 2: \");\r\n            for (UUID cardId : cards) {\r\n                Card card = cards.get(cardId, game);\r\n                if (card != null) {\r\n                    sb.append(card.getName()).append(\"; \");\r\n                }\r\n            }\r\n            sb.delete(sb.length() - 2, sb.length());\r\n            choice.getChoices().add(sb.toString());\r\n\r\n            Zone pile1Zone = Zone.GRAVEYARD;\r\n            Zone pile2Zone = Zone.HAND;\r\n            if (player.choose(Outcome.Neutral, choice, game)) {\r\n                if (choice.getChoice().startsWith(\"Pile 1\")) {\r\n                    pile1Zone = Zone.HAND;\r\n                    pile2Zone = Zone.GRAVEYARD;\r\n                }\r\n            }\r\n\r\n            for (UUID cardUuid : pile1) {\r\n                Card card = pile1.get(cardUuid, game);\r\n                if (card != null) {\r\n                    card.moveToZone(pile1Zone, source.getId(), game, false);\r\n                }\r\n            }\r\n            for (UUID cardUuid : cards) {\r\n                Card card = cards.get(cardUuid, game);\r\n                if (card != null) {\r\n                    card.moveToZone(pile2Zone, source.getId(), game, false);\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","commit_id":"a052a921a140f4a546d5f561de5e49a11e3414dd","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if (player == null) {\r\n            return false;\r\n        }\r\n\r\n        Cards cards = new CardsImpl(Zone.PICK);\r\n        for (int i = 0; i < 5; i++) {\r\n            Card card = player.getLibrary().removeFromTop(game);\r\n            if (card != null) {\r\n                cards.add(card);\r\n                game.setZone(card.getId(), Zone.PICK);\r\n            }\r\n        }\r\n        player.revealCards(\"Sphinx of Uthuun\", cards, game);\r\n\r\n        Set<UUID> opponents = game.getOpponents(source.getControllerId());\r\n        if (!opponents.isEmpty()) {\r\n            Player opponent = game.getPlayer(opponents.iterator().next());\r\n            TargetCard target = new TargetCard(0, cards.size(), Zone.PICK, new FilterCard(\"cards to put in the first pile\"));\r\n\r\n            Cards pile1 = new CardsImpl();\r\n            if (opponent.choose(Outcome.Neutral, cards, target, game)) {\r\n                List<UUID> targets = target.getTargets();\r\n                for (UUID targetId : targets) {\r\n                    Card card = cards.get(targetId, game);\r\n                    if (card != null) {\r\n                        pile1.add(card);\r\n                        cards.remove(card);\r\n                    }\r\n                }\r\n            }\r\n\r\n            player.revealCards(\"Pile 1 (Sphinx of Uthuun)\", pile1, game);\r\n            player.revealCards(\"Pile 2 (Sphinx of Uthuun)\", cards, game);\r\n\r\n            Choice choice = new ChoiceImpl(true);\r\n            choice.setMessage(\"Select a pile of cards to put into your hand:\");\r\n\r\n            StringBuilder sb = new StringBuilder(\"Pile 1: \");\r\n            for (UUID cardId : pile1) {\r\n                Card card = pile1.get(cardId, game);\r\n                if (card != null) {\r\n                    sb.append(card.getName()).append(\"; \");\r\n                }\r\n            }\r\n            sb.delete(sb.length() - 2, sb.length());\r\n            choice.getChoices().add(sb.toString());\r\n\r\n            sb = new StringBuilder(\"Pile 2: \");\r\n            for (UUID cardId : cards) {\r\n                Card card = cards.get(cardId, game);\r\n                if (card != null) {\r\n                    sb.append(card.getName()).append(\"; \");\r\n                }\r\n            }\r\n            sb.delete(sb.length() - 2, sb.length());\r\n            choice.getChoices().add(sb.toString());\r\n\r\n            Zone pile1Zone = Zone.GRAVEYARD;\r\n            Zone pile2Zone = Zone.HAND;\r\n            if (player.choose(Outcome.Neutral, choice, game)) {\r\n                if (choice.getChoice().startsWith(\"Pile 1\")) {\r\n                    pile1Zone = Zone.HAND;\r\n                    pile2Zone = Zone.GRAVEYARD;\r\n                }\r\n            }\r\n\r\n            for (UUID cardUuid : pile1) {\r\n                Card card = pile1.get(cardUuid, game);\r\n                if (card != null) {\r\n                    card.moveToZone(pile1Zone, source.getId(), game, false);\r\n                }\r\n            }\r\n            for (UUID cardUuid : cards) {\r\n                Card card = cards.get(cardUuid, game);\r\n                if (card != null) {\r\n                    card.moveToZone(pile2Zone, source.getId(), game, false);\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","id":10574,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Player player = game.getPlayer(source.getControllerId());\r\n        if (player == null) {\r\n            return false;\r\n        }\r\n\r\n        Cards cards = new CardsImpl(Zone.PICK);\r\n\t\tint count = Math.min(player.getLibrary().size(), 5);\r\n        for (int i = 0; i < count; i++) {\r\n            Card card = player.getLibrary().removeFromTop(game);\r\n            if (card != null) {\r\n                cards.add(card);\r\n                game.setZone(card.getId(), Zone.PICK);\r\n            }\r\n        }\r\n        player.revealCards(\"Sphinx of Uthuun\", cards, game);\r\n\r\n        Set<UUID> opponents = game.getOpponents(source.getControllerId());\r\n        if (!opponents.isEmpty()) {\r\n            Player opponent = game.getPlayer(opponents.iterator().next());\r\n            TargetCard target = new TargetCard(0, cards.size(), Zone.PICK, new FilterCard(\"cards to put in the first pile\"));\r\n\r\n            Cards pile1 = new CardsImpl();\r\n\r\n\t\t\twhile (opponent.choose(Outcome.Neutral, cards, target, game));\r\n\r\n\t\t\tList<UUID> targets = target.getTargets();\r\n\t\t\tfor (UUID targetId : targets) {\r\n\t\t\t\tCard card = cards.get(targetId, game);\r\n\t\t\t\tif (card != null) {\r\n\t\t\t\t\tpile1.add(card);\r\n\t\t\t\t\tcards.remove(card);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tplayer.revealCards(\"Pile 1 (Sphinx of Uthuun)\", pile1, game);\r\n            player.revealCards(\"Pile 2 (Sphinx of Uthuun)\", cards, game);\r\n\r\n            Choice choice = new ChoiceImpl(true);\r\n            choice.setMessage(\"Select a pile of cards to put into your hand:\");\r\n\r\n            StringBuilder sb = new StringBuilder(\"Pile 1: \");\r\n            for (UUID cardId : pile1) {\r\n                Card card = pile1.get(cardId, game);\r\n                if (card != null) {\r\n                    sb.append(card.getName()).append(\"; \");\r\n                }\r\n            }\r\n            sb.delete(sb.length() - 2, sb.length());\r\n            choice.getChoices().add(sb.toString());\r\n\r\n            sb = new StringBuilder(\"Pile 2: \");\r\n            for (UUID cardId : cards) {\r\n                Card card = cards.get(cardId, game);\r\n                if (card != null) {\r\n                    sb.append(card.getName()).append(\"; \");\r\n                }\r\n            }\r\n            sb.delete(sb.length() - 2, sb.length());\r\n            choice.getChoices().add(sb.toString());\r\n\r\n            Zone pile1Zone = Zone.GRAVEYARD;\r\n            Zone pile2Zone = Zone.HAND;\r\n            if (player.choose(Outcome.Neutral, choice, game)) {\r\n                if (choice.getChoice().startsWith(\"Pile 1\")) {\r\n                    pile1Zone = Zone.HAND;\r\n                    pile2Zone = Zone.GRAVEYARD;\r\n                }\r\n            }\r\n\r\n            for (UUID cardUuid : pile1) {\r\n                Card card = pile1.get(cardUuid, game);\r\n                if (card != null) {\r\n                    card.moveToZone(pile1Zone, source.getId(), game, false);\r\n                }\r\n            }\r\n            for (UUID cardUuid : cards) {\r\n                Card card = cards.get(cardUuid, game);\r\n                if (card != null) {\r\n                    card.moveToZone(pile2Zone, source.getId(), game, false);\r\n                }\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }","commit_id":"a052a921a140f4a546d5f561de5e49a11e3414dd","url":"https://github.com/magefree/mage"},{"original_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Card card = game.getCard(source.getFirstTarget());\r\n        Player player = game.getPlayer(source.getControllerId());\r\n\r\n        if (card != null && player != null) {\r\n            Player targetPlayer = game.getPlayer(card.getOwnerId());\r\n            if (targetPlayer != null) {\r\n                FilterCard filter = new FilterCard(\"card named \" + card.getName());\r\n                filter.getName().add(card.getName());\r\n\r\n                Cards cardsInLibrary = new CardsImpl(Zone.LIBRARY);\r\n                cardsInLibrary.addAll(targetPlayer.getLibrary().getCards(game));\r\n\r\n                // cards in Graveyard\r\n                int cardsCount = targetPlayer.getGraveyard().count(filter, game);\r\n                if (cardsCount > 0) {\r\n                    filter.setMessage(\"card named \" + card.getName() + \" in the graveyard of \" + targetPlayer.getName());\r\n                    TargetCardInGraveyard target = new TargetCardInGraveyard(0, cardsCount, filter);\r\n                    if (player.choose(Outcome.Exile, targetPlayer.getGraveyard(), target, game)) {\r\n                        List<UUID> targets = target.getTargets();\r\n                        for (UUID targetId : targets) {\r\n                            Card targetCard = targetPlayer.getGraveyard().get(targetId, game);\r\n                            if (targetCard != null) {\r\n                                targetPlayer.getGraveyard().remove(targetCard);\r\n                                targetCard.moveToZone(Zone.EXILED, source.getId(), game, false);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n\r\n                // cards in Hand\r\n                cardsCount = targetPlayer.getHand().count(filter, game);\r\n                if (cardsCount > 0) {\r\n                    filter.setMessage(\"card named \" + card.getName() + \" in the hand of \" + targetPlayer.getName());\r\n                    TargetCardInHand target = new TargetCardInHand(0, cardsCount, filter);\r\n                    if (player.choose(Outcome.Exile, targetPlayer.getHand(), target, game)) {\r\n                        List<UUID> targets = target.getTargets();\r\n                        for (UUID targetId : targets) {\r\n                            Card targetCard = targetPlayer.getHand().get(targetId, game);\r\n                            if (targetCard != null) {\r\n                                targetPlayer.getHand().remove(targetCard);\r\n                                targetCard.moveToZone(Zone.EXILED, source.getId(), game, false);\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    player.lookAtCards(targetPlayer.getName() + \" hand\", targetPlayer.getHand(), game);\r\n                }\r\n\r\n                // cards in Library\r\n                cardsCount = cardsInLibrary.count(filter, game);\r\n                if (cardsCount > 0) {\r\n                    filter.setMessage(\"card named \" + card.getName() + \" in the library of \" + targetPlayer.getName());\r\n                    TargetCardInLibrary target = new TargetCardInLibrary(0, cardsCount, filter);\r\n                    if (player.choose(Outcome.Exile, cardsInLibrary, target, game)) {\r\n                        List<UUID> targets = target.getTargets();\r\n                        for (UUID targetId : targets) {\r\n                            Card targetCard = targetPlayer.getLibrary().remove(targetId, game);\r\n                            if (targetCard != null) {\r\n                                targetCard.moveToZone(Zone.EXILED, source.getId(), game, false);\r\n                            }\r\n                        }\r\n                    }\r\n                } else {\r\n                    player.lookAtCards(targetPlayer.getName() + \" library\", cardsInLibrary, game);\r\n                }\r\n            }\r\n\r\n            targetPlayer.shuffleLibrary(game);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }","id":10575,"modified_method":"@Override\r\n    public boolean apply(Game game, Ability source) {\r\n        Card card = game.getCard(source.getFirstTarget());\r\n        Player player = game.getPlayer(source.getControllerId());\r\n\r\n        if (card != null && player != null) {\r\n            Player targetPlayer = game.getPlayer(card.getOwnerId());\r\n            if (targetPlayer != null) {\r\n                FilterCard filter = new FilterCard(\"card named \" + card.getName());\r\n                filter.getName().add(card.getName());\r\n\r\n                Cards cardsInLibrary = new CardsImpl(Zone.LIBRARY);\r\n                cardsInLibrary.addAll(targetPlayer.getLibrary().getCards(game));\r\n\r\n                // cards in Graveyard\r\n                int cardsCount = targetPlayer.getGraveyard().count(filter, game);\r\n                if (cardsCount > 0) {\r\n                    filter.setMessage(\"card named \" + card.getName() + \" in the graveyard of \" + targetPlayer.getName());\r\n                    TargetCardInGraveyard target = new TargetCardInGraveyard(0, cardsCount, filter);\r\n\r\n\t\t\t\t\twhile (target.canChoose(player.getId(), game)) {\r\n\t\t\t\t\t\tif (!player.choose(Outcome.Exile, targetPlayer.getGraveyard(), target, game)) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (UUID targetId : target.getTargets()) {\r\n\t\t\t\t\t\tCard targetCard = targetPlayer.getGraveyard().get(targetId, game);\r\n\t\t\t\t\t\tif (targetCard != null) {\r\n\t\t\t\t\t\t\ttargetPlayer.getGraveyard().remove(targetCard);\r\n\t\t\t\t\t\t\ttargetCard.moveToZone(Zone.EXILED, source.getId(), game, false);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n                // cards in Hand\r\n                cardsCount = targetPlayer.getHand().count(filter, game);\r\n                if (cardsCount > 0) {\r\n                    filter.setMessage(\"card named \" + card.getName() + \" in the hand of \" + targetPlayer.getName());\r\n                    TargetCardInHand target = new TargetCardInHand(0, cardsCount, filter);\r\n\r\n\t\t\t\t\twhile (target.canChoose(player.getId(), game)) {\r\n\t\t\t\t\t\tif (!player.choose(Outcome.Exile, targetPlayer.getHand(), target, game)) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (UUID targetId : target.getTargets()) {\r\n\t\t\t\t\t\tCard targetCard = targetPlayer.getHand().get(targetId, game);\r\n\t\t\t\t\t\tif (targetCard != null) {\r\n\t\t\t\t\t\t\ttargetPlayer.getHand().remove(targetCard);\r\n\t\t\t\t\t\t\ttargetCard.moveToZone(Zone.EXILED, source.getId(), game, false);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t} else {\r\n                    player.lookAtCards(targetPlayer.getName() + \" hand\", targetPlayer.getHand(), game);\r\n                }\r\n\r\n                // cards in Library\r\n                cardsCount = cardsInLibrary.count(filter, game);\r\n                if (cardsCount > 0) {\r\n                    filter.setMessage(\"card named \" + card.getName() + \" in the library of \" + targetPlayer.getName());\r\n                    TargetCardInLibrary target = new TargetCardInLibrary(0, cardsCount, filter);\r\n\r\n\t\t\t\t\twhile (target.canChoose(player.getId(), game)) {\r\n\t\t\t\t\t\tif (!player.choose(Outcome.Exile, cardsInLibrary, target, game)) {\r\n\t\t\t\t\t\t\tbreak;\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\r\n\t\t\t\t\tfor (UUID targetId : target.getTargets()) {\r\n\t\t\t\t\t\tCard targetCard = targetPlayer.getLibrary().remove(targetId, game);\r\n\t\t\t\t\t\tif (targetCard != null) {\r\n\t\t\t\t\t\t\ttargetCard.moveToZone(Zone.EXILED, source.getId(), game, false);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n                } else {\r\n                    player.lookAtCards(targetPlayer.getName() + \" library\", cardsInLibrary, game);\r\n                }\r\n            }\r\n\r\n            targetPlayer.shuffleLibrary(game);\r\n\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }","commit_id":"a052a921a140f4a546d5f561de5e49a11e3414dd","url":"https://github.com/magefree/mage"},{"original_method":"public void readModels() {\n    if (!myModelsRead) {\n      myModelsRead = true;\n      SModelRepository.getInstance().readModelDescriptors(getModelRoots(), this);\n      for (IModule im : MPSModuleRepository.getInstance().getModules(this)) {\n        im.readModels();\n      }\n//      SModelRepository.getInstance().readModelDescriptors(getModelRoots(), this);\n    }\n  }","id":10576,"modified_method":"public void readModels() {\n    if (!myModelsRead) {\n      myModelsRead = true;\n      for (IModule im : MPSModuleRepository.getInstance().getModules(this)) {\n        im.readModels();\n      }\n      SModelRepository.getInstance().readModelDescriptors(getModelRoots(), this);\n    }\n  }","commit_id":"fb218d0de2939d09d120babb111b9d822fd3e257","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SModelDescriptor getHelginsTypesystemModelDescriptor() {\n    if (getLanguageDescriptor().getHelginsTypesystemModel() != null) {\n      SModelUID modelUID = SModelUID.fromString(getLanguageDescriptor().getHelginsTypesystemModel().getName());\n      return SModelRepository.getInstance().getModelDescriptor(modelUID, this);\n    }\n    return null;\n  }","id":10577,"modified_method":"public SModelDescriptor getHelginsTypesystemModelDescriptor() {\n    if (getLanguageDescriptor().getHelginsTypesystemModel() != null) {\n      SModelUID modelUID = SModelUID.fromString(getLanguageDescriptor().getHelginsTypesystemModel().getName());\n      SModelDescriptor modelDescriptor = SModelRepository.getInstance().getModelDescriptor(modelUID, this);\n      if (modelDescriptor == null) {\n        LOG.error(\"Couldn't get helgins-typesystem model \\\"\" + modelUID + \"\\\"\");\n      }\n      return modelDescriptor;\n    }\n    return null;\n  }","commit_id":"fb218d0de2939d09d120babb111b9d822fd3e257","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SModelDescriptor getTypesystemModelDescriptor() {\n    if (getLanguageDescriptor().getTypeSystem() != null) {\n      SModelUID modelUID = SModelUID.fromString(getLanguageDescriptor().getTypeSystem().getName());\n      return SModelRepository.getInstance().getModelDescriptor(modelUID, this);\n    }\n    return null;\n  }","id":10578,"modified_method":"public SModelDescriptor getTypesystemModelDescriptor() {\n    if (getLanguageDescriptor().getTypeSystem() != null) {\n      SModelUID modelUID = SModelUID.fromString(getLanguageDescriptor().getTypeSystem().getName());\n      SModelDescriptor modelDescriptor = SModelRepository.getInstance().getModelDescriptor(modelUID, this);\n      if (modelDescriptor == null) {\n        LOG.errorWithTrace(\"Couldn't get typesystem model \\\"\" + modelUID + \"\\\"\");\n      }\n      return modelDescriptor;\n    }\n    return null;\n  }","commit_id":"fb218d0de2939d09d120babb111b9d822fd3e257","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SModelDescriptor getEditorModelDescriptor(String stereotype) {\n    if (stereotype == null) stereotype = SModelStereotype.NONE;\n    String editorUID = getEditorUID(stereotype);\n    if (editorUID == null) {\n      return null;\n    }\n    return SModelRepository.getInstance().getModelDescriptor(SModelUID.fromString(editorUID), this);\n  }","id":10579,"modified_method":"public SModelDescriptor getEditorModelDescriptor(String stereotype) {\n    if (stereotype == null) stereotype = SModelStereotype.NONE;\n    String editorUID = getEditorUID(stereotype);\n    if (editorUID == null) {\n      return null;\n    }\n    SModelDescriptor modelDescriptor = SModelRepository.getInstance().getModelDescriptor(SModelUID.fromString(editorUID), this);\n    if (modelDescriptor == null) {\n      LOG.error(\"Couldn't get editor model \\\"\" + editorUID + \"\\\"\");\n    }\n    return modelDescriptor;\n  }","commit_id":"fb218d0de2939d09d120babb111b9d822fd3e257","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SModelDescriptor getActionsModelDescriptor() {\n    if (getLanguageDescriptor().getActionsModel() != null) {\n      SModelUID modelUID = SModelUID.fromString(getLanguageDescriptor().getActionsModel().getName());\n      return SModelRepository.getInstance().getModelDescriptor(modelUID, this);\n    }\n    return null;\n  }","id":10580,"modified_method":"public SModelDescriptor getActionsModelDescriptor() {\n    if (getLanguageDescriptor().getActionsModel() != null) {\n      SModelUID modelUID = SModelUID.fromString(getLanguageDescriptor().getActionsModel().getName());\n      SModelDescriptor modelDescriptor = SModelRepository.getInstance().getModelDescriptor(modelUID, this);\n      if (modelDescriptor == null) {\n        LOG.error(\"Couldn't get actions model \\\"\" + modelUID + \"\\\"\");\n      }\n      return modelDescriptor;\n    }\n    return null;\n  }","commit_id":"fb218d0de2939d09d120babb111b9d822fd3e257","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SModelDescriptor getStructureModelDescriptor() {\n    if (getLanguageDescriptor().getStructureModel() != null) {\n      SModelUID modelUID = SModelUID.fromString(getLanguageDescriptor().getStructureModel().getName());\n      SModelDescriptor structureModelDescriptor = SModelRepository.getInstance().getModelDescriptor(modelUID, this);\n      if (structureModelDescriptor == null) {\n        LOG.errorWithTrace(\"Couldn't get structure model \\\"\" + modelUID + \"\\\"\");\n      } else if (!myRegisteredInFindUsagesManager) {\n        myRegisteredInFindUsagesManager = true;\n        //register cache invalidation\n        FindUsagesManager.registerStructureModel(structureModelDescriptor);\n      }\n      return structureModelDescriptor;\n    }\n    return null;\n  }","id":10581,"modified_method":"public SModelDescriptor getStructureModelDescriptor() {\n    if (getLanguageDescriptor().getStructureModel() != null) {\n      SModelUID modelUID = SModelUID.fromString(getLanguageDescriptor().getStructureModel().getName());\n      SModelDescriptor structureModelDescriptor = SModelRepository.getInstance().getModelDescriptor(modelUID, this);\n      if (structureModelDescriptor == null) {\n        LOG.error(\"Couldn't get structure model \\\"\" + modelUID + \"\\\"\");\n      } else if (!myRegisteredInFindUsagesManager) {\n        myRegisteredInFindUsagesManager = true;\n        //register cache invalidation\n        FindUsagesManager.registerStructureModel(structureModelDescriptor);\n      }\n      return structureModelDescriptor;\n    }\n    return null;\n  }","commit_id":"fb218d0de2939d09d120babb111b9d822fd3e257","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SModelDescriptor getConstraintsModelDescriptor() {\n    if (getLanguageDescriptor().getConstraintsModel() != null) {\n      SModelUID modelUID = SModelUID.fromString(getLanguageDescriptor().getConstraintsModel().getName());\n      return SModelRepository.getInstance().getModelDescriptor(modelUID, this);\n    }\n    return null;\n  }","id":10582,"modified_method":"public SModelDescriptor getConstraintsModelDescriptor() {\n    if (getLanguageDescriptor().getConstraintsModel() != null) {\n      SModelUID modelUID = SModelUID.fromString(getLanguageDescriptor().getConstraintsModel().getName());\n      SModelDescriptor modelDescriptor = SModelRepository.getInstance().getModelDescriptor(modelUID, this);\n      if (modelDescriptor == null) {\n        LOG.error(\"Couldn't get constraints model \\\"\" + modelUID + \"\\\"\");\n      }\n      return modelDescriptor;\n    }\n    return null;\n  }","commit_id":"fb218d0de2939d09d120babb111b9d822fd3e257","url":"https://github.com/JetBrains/MPS"},{"original_method":"/**\n     * Runs as long as there are 2 members and more. Determines the member to be monitored and fetches its\n     * server socket address (if n/a, sends a message to obtain it). The creates a client socket and listens on\n     * it until the connection breaks. If it breaks, emits a SUSPECT message. It the connection is closed regularly,\n     * nothing happens. In both cases, a new member to be monitored will be chosen and monitoring continues (unless\n     * there are fewer than 2 members).\n     */\n    public void run() {\n        Address tmp_ping_dest;\n        IpAddress ping_addr;\n\n        // 1. Broadcast my own addr:sock to all members so they can update their cache\n        if(!srv_sock_sent) {\n            if(srv_sock_addr != null) {\n                sendIHaveSockMessage(null, // send to all members\n                                     local_addr,\n                                     srv_sock_addr);\n                srv_sock_sent=true;\n            }\n            else\n            if(log.isWarnEnabled()) log.warn(\"(VIEW_CHANGE): srv_sock_addr == null\");\n        }\n\n        // 2. Get the addr:pid cache from the coordinator (only if not already fetched)\n        if(!got_cache_from_coord) {\n            getCacheFromCoordinator();\n            got_cache_from_coord=true;\n        }\n\n\n\n        if(log.isTraceEnabled()) log.trace(\"pinger_thread started\"); // +++ remove\n        while(pinger_thread != null && Thread.currentThread().equals(pinger_thread) && running) {\n            tmp_ping_dest=determinePingDest(); // gets the neighbor to our right\n            if(log.isDebugEnabled())\n                log.debug(\"determinePingDest()=\" + tmp_ping_dest + \", pingable_mbrs=\" + pingable_mbrs);\n            if(tmp_ping_dest == null) {\n                ping_dest=null;\n                synchronized(this) {\n                    pinger_thread=null;\n                }\n                break;\n            }\n            ping_dest=tmp_ping_dest;\n            ping_addr=fetchPingAddress(ping_dest);\n            if(ping_addr == null) {\n                if(!running)\n                    break;\n                if(log.isErrorEnabled()) log.error(\"socket address for \" + ping_dest + \" could not be fetched, retrying\");\n                Util.sleep(1000);\n                continue;\n            }\n\n            if(!setupPingSocket(ping_addr)) {\n                // covers use cases #7 and #8 in ManualTests.txt\n                if(log.isDebugEnabled()) log.debug(\"could not create socket to \" + ping_dest + \"; suspecting \" + ping_dest);\n                broadcastSuspectMessage(ping_dest);\n                pingable_mbrs.removeElement(ping_dest);\n                continue;\n            }\n\n            if(log.isDebugEnabled()) log.debug(\"ping_dest=\" + ping_dest + \", ping_sock=\" + ping_sock + \", cache=\" + cache);\n\n            // at this point ping_input must be non-null, otherwise setupPingSocket() would have thrown an exception\n            try {\n                if(ping_input != null) {\n                    int c=ping_input.read();\n                    switch(c) {\n                        case NORMAL_TERMINATION:\n                            if(log.isDebugEnabled())\n                                log.debug(\"peer closed socket normally\");\n                            synchronized(this) {\n                                pinger_thread=null;\n                            }\n                            break;\n                        case ABNORMAL_TERMINATION:\n                            handleSocketClose(null);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n            catch(IOException ex) {  // we got here when the peer closed the socket --> suspect peer and then continue\n                handleSocketClose(ex);\n            }\n            catch(Throwable catch_all_the_rest) {\n                log.error(\"exception\", catch_all_the_rest);\n            }\n        }\n        if(log.isDebugEnabled()) log.debug(\"pinger thread terminated\");\n        synchronized(this) {\n            pinger_thread=null;\n        }\n    }","id":10583,"modified_method":"/**\n     * Runs as long as there are 2 members and more. Determines the member to be monitored and fetches its\n     * server socket address (if n/a, sends a message to obtain it). The creates a client socket and listens on\n     * it until the connection breaks. If it breaks, emits a SUSPECT message. It the connection is closed regularly,\n     * nothing happens. In both cases, a new member to be monitored will be chosen and monitoring continues (unless\n     * there are fewer than 2 members).\n     */\n    public void run() {               \n        if(log.isTraceEnabled()) log.trace(\"pinger_thread started\"); \n        \n        // 1. Broadcast my own addr:sock to all members so they can update their cache\n        if(!srv_sock_sent) {\n            if(srv_sock_addr != null) {\n                sendIHaveSockMessage(null, // send to all members\n                                     local_addr,\n                                     srv_sock_addr);\n                srv_sock_sent=true;\n            }\n            else\n            if(log.isWarnEnabled()) log.warn(\"(VIEW_CHANGE): srv_sock_addr == null\");\n        }\n\n        // 2. Get the addr:pid cache from the coordinator (only if not already fetched)\n        if(!got_cache_from_coord) {\n            getCacheFromCoordinator();\n            got_cache_from_coord=true;\n        }\n        \n        while(pinger_thread != null && Thread.currentThread().equals(pinger_thread) && running) {\n            ping_dest=determinePingDest(); // gets the neighbor to our right\n            if(log.isDebugEnabled())\n                log.debug(\"determinePingDest()=\" + ping_dest);\n            if(ping_dest == null) {               \n                break;\n            }            \n            IpAddress ping_addr=fetchPingAddress(ping_dest);\n            if(ping_addr == null) {\n                if(!running)\n                    break;\n                if(log.isErrorEnabled()) log.error(\"socket address for \" + ping_dest + \" could not be fetched, retrying\");\n                Util.sleep(1000);\n                continue;\n            }\n\n            if(!setupPingSocket(ping_addr)) {\n                // covers use cases #7 and #8 in ManualTests.txt\n                if(log.isDebugEnabled()) log.debug(\"could not create socket to \" + ping_dest + \"; suspecting \" + ping_dest);\n                broadcastSuspectMessage(ping_dest);                \n                continue;\n            }\n\n            if(log.isDebugEnabled()) log.debug(\"ping_dest=\" + ping_dest + \", ping_sock=\" + ping_sock + \", cache=\" + cache);\n\n            // at this point ping_input must be non-null, otherwise setupPingSocket() would have thrown an exception\n            try {\n                if(ping_input != null) {\n                    int c=ping_input.read();\n                    switch(c) {\n                        case NORMAL_TERMINATION:\n                            if(log.isDebugEnabled())\n                                log.debug(\"peer closed socket normally\");\n                            synchronized(this) {\n                                pinger_thread=null;\n                            }\n                            break;\n                        case ABNORMAL_TERMINATION:\n                            handleSocketClose(null);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n            catch(IOException ex) {  // we got here when the peer closed the socket --> suspect peer and then continue\n                handleSocketClose(ex);\n            }\n            catch(Throwable catch_all_the_rest) {\n                log.error(\"exception\", catch_all_the_rest);\n            }\n        }\n        if(log.isDebugEnabled()) log.debug(\"pinger thread terminated\");\n        synchronized(this) {\n            pinger_thread=null;\n        }\n    }","commit_id":"07e6a55f4ea11d4a6896c8909d9c21f25ab4ac02","url":"https://github.com/belaban/JGroups"},{"original_method":"void sendPingSignal(int signal) {\n        if(ping_sock != null) {\n            try {\n                OutputStream out=ping_sock.getOutputStream();\n                if(out != null) {\n                    out.write(signal);\n                    out.flush();\n                }\n            }\n            catch(Throwable t) {\n                if(log.isTraceEnabled())\n                    log.trace(\"problem sending signal \" + signalToString(signal), t);\n            }\n        }\n    }","id":10584,"modified_method":"void sendPingSignal(int signal) {\n        synchronized(sock_mutex) {\n            if(ping_sock != null) {\n                try {\n                    OutputStream out=ping_sock.getOutputStream();\n                    if(out != null) {\n                        out.write(signal);\n                        out.flush();\n                    }\n                }\n                catch(Throwable t) {\n                    if(log.isTraceEnabled())\n                        log.trace(\"problem sending signal \" + signalToString(signal), t);\n                }\n            }\n        }\n    }","commit_id":"07e6a55f4ea11d4a6896c8909d9c21f25ab4ac02","url":"https://github.com/belaban/JGroups"},{"original_method":"void startServerSocket() {\n        if(srv_sock_handler != null) {\n            srv_sock_handler.start(); // won't start if already running            \n        }\n    }","id":10585,"modified_method":"void startServerSocket() {\n        srv_sock=Util.createServerSocket(bind_addr, start_port); // grab a random unused port above 10000\n        srv_sock_addr=new IpAddress(bind_addr, srv_sock.getLocalPort());\n        if(srv_sock_handler != null) {\n            srv_sock_handler.start(); // won't start if already running            \n        }\n    }","commit_id":"07e6a55f4ea11d4a6896c8909d9c21f25ab4ac02","url":"https://github.com/belaban/JGroups"},{"original_method":"void handleSocketClose(Exception ex) {\n        teardownPingSocket();     // make sure we have no leftovers\n        if(!regular_sock_close) { // only suspect if socket was not closed regularly (by interruptPingerThread())\n            if(log.isDebugEnabled())\n                log.debug(\"peer \" + ping_dest + \" closed socket (\" + (ex != null ? ex.getClass().getName() : \"eof\") + ')');\n            broadcastSuspectMessage(ping_dest);\n            pingable_mbrs.removeElement(ping_dest);\n        }\n        else {\n            if(log.isDebugEnabled()) log.debug(\"socket to \" + ping_dest + \" was reset\");\n            regular_sock_close=false;\n        }\n    }","id":10586,"modified_method":"void handleSocketClose(Exception ex) {\n        teardownPingSocket();     // make sure we have no leftovers\n        if(!regular_sock_close) { // only suspect if socket was not closed regularly (by interruptPingerThread())\n            if(log.isDebugEnabled())\n                log.debug(\"peer \" + ping_dest + \" closed socket (\" + (ex != null ? ex.getClass().getName() : \"eof\") + ')');\n            broadcastSuspectMessage(ping_dest);            \n        }\n        else {\n            if(log.isDebugEnabled()) log.debug(\"socket to \" + ping_dest + \" was reset\");\n            regular_sock_close=false;\n        }\n    }","commit_id":"07e6a55f4ea11d4a6896c8909d9c21f25ab4ac02","url":"https://github.com/belaban/JGroups"},{"original_method":"private Address determinePingDest() {\n        Address tmp;\n\n        if(pingable_mbrs == null || pingable_mbrs.size() < 2 || local_addr == null)\n            return null;\n        for(int i=0; i < pingable_mbrs.size(); i++) {\n            tmp=pingable_mbrs.elementAt(i);\n            if(local_addr.equals(tmp)) {\n                if(i + 1 >= pingable_mbrs.size())\n                    return pingable_mbrs.elementAt(0);\n                else\n                    return pingable_mbrs.elementAt(i + 1);\n            }\n        }\n        return null;\n    }","id":10587,"modified_method":"private synchronized Address determinePingDest() {\n        Address neighbor=determineRightNeighbor();\n        return neighbor != null && !bcast_task.isSuspectedMember(neighbor)?neighbor:null;          \n    }","commit_id":"07e6a55f4ea11d4a6896c8909d9c21f25ab4ac02","url":"https://github.com/belaban/JGroups"},{"original_method":"public Object down(Event evt) {\n        switch(evt.getType()) {\n\n            case Event.UNSUSPECT:\n                bcast_task.removeSuspectedMember((Address)evt.getArg());\n                break;\n\n            case Event.CONNECT:\n            case Event.CONNECT_WITH_STATE_TRANSFER:    \n                Object ret=down_prot.down(evt);\n                srv_sock=Util.createServerSocket(bind_addr, start_port); // grab a random unused port above 10000\n                srv_sock_addr=new IpAddress(bind_addr, srv_sock.getLocalPort());\n                startServerSocket();\n                return ret;\n\n            case Event.DISCONNECT:                \n                stopServerSocket(true); // graceful close\n                break;\n\n            case Event.SHUTDOWN:\n                stopServerSocket(false);\n                break;\n\n            case Event.VIEW_CHANGE:\n                View v=(View) evt.getArg();\n                final Vector<Address> new_mbrs=v.getMembers();\n\n                Runnable reshuffleSockets=new Runnable() {\n                    public void run() {\n                        synchronized(FD_SOCK.this) {\n                            members.removeAllElements();\n                            members.addAll(new_mbrs);\n                            cache.keySet().retainAll(members); // remove all entries in 'cache' which are not in the new membership\n                            bcast_task.adjustSuspectedMembers(members);\n                            pingable_mbrs.removeAllElements();\n                            pingable_mbrs.addAll(members);\n                            if(log.isDebugEnabled()) log.debug(\"VIEW_CHANGE received: \" + members);\n\n                            if(members.size() > 1) {\n                                if(pinger_thread != null && pinger_thread.isAlive()) {\n                                    Address tmp_ping_dest=determinePingDest();\n                                    if(ping_dest != null && tmp_ping_dest != null && !ping_dest.equals(tmp_ping_dest)) {\n                                        interruptPingerThread(); // allows the thread to use the new socket\n                                    }\n                                }\n                                else\n                                    startPingerThread(); // only starts if not yet running\n                            }\n                            else {\n                                ping_dest=null;\n                                stopPingerThread();\n                            }\n                        }\n                    }\n                };\n                timer.submit(reshuffleSockets);\n                break;\n\n            default:\n                return down_prot.down(evt);\n        }\n\n        return down_prot.down(evt);\n    }","id":10588,"modified_method":"public Object down(Event evt) {\n        switch(evt.getType()) {\n\n            case Event.UNSUSPECT:\n                bcast_task.removeSuspectedMember((Address)evt.getArg());\n                break;\n\n            case Event.CONNECT:\n            case Event.CONNECT_WITH_STATE_TRANSFER:    \n                Object ret=down_prot.down(evt);                \n                startServerSocket();\n                return ret;\n\n            case Event.DISCONNECT:                \n                stopServerSocket(true); // graceful close\n                break;\n\n            case Event.SHUTDOWN:\n                stopServerSocket(false);\n                break;\n\n            case Event.VIEW_CHANGE:\n                View v=(View) evt.getArg();\n                final Vector<Address> new_mbrs=v.getMembers();\n\n                Runnable reshuffleSockets=new Runnable() {\n                    public void run() {\n                        synchronized(FD_SOCK.this) {\n                            members.removeAllElements();\n                            members.addAll(new_mbrs);\n                            cache.keySet().retainAll(members); // remove all entries in 'cache' which are not in the new membership\n                            bcast_task.adjustSuspectedMembers(members);                            \n                            if(log.isDebugEnabled()) log.debug(\"VIEW_CHANGE received: \" + members);\n\n                            if(members.size() > 1) {\n                                if(pinger_thread != null && pinger_thread.isAlive()) {\n                                    Address tmp_ping_dest=determinePingDest();\n                                    if(ping_dest != null && tmp_ping_dest != null && !ping_dest.equals(tmp_ping_dest)) {\n                                        interruptPingerThread(); // allows the thread to use the new socket\n                                    }\n                                }\n                                else\n                                    startPingerThread(); // only starts if not yet running\n                            }\n                            else {\n                                ping_dest=null;\n                                stopPingerThread();\n                            }\n                        }\n                    }\n                };\n                timer.submit(reshuffleSockets);\n                break;\n\n            default:\n                return down_prot.down(evt);\n        }\n\n        return down_prot.down(evt);\n    }","commit_id":"07e6a55f4ea11d4a6896c8909d9c21f25ab4ac02","url":"https://github.com/belaban/JGroups"},{"original_method":"private Address determinePingDest() {\n        Address tmp;\n\n        if(pingable_mbrs == null || pingable_mbrs.size() < 2 || local_addr == null)\n            return null;\n        for(int i=0; i < pingable_mbrs.size(); i++) {\n            tmp=pingable_mbrs.elementAt(i);\n            if(local_addr.equals(tmp)) {\n                if(i + 1 >= pingable_mbrs.size())\n                    return pingable_mbrs.elementAt(0);\n                else\n                    return pingable_mbrs.elementAt(i + 1);\n            }\n        }\n        return null;\n    }","id":10589,"modified_method":"private synchronized Address determinePingDest() {\n        Address neighbor=determineRightNeighbor();\n        return neighbor != null && !bcast_task.isSuspectedMember(neighbor)?neighbor:null;          \n    }","commit_id":"7b6472301352d20b57e8badad5664acf5bbd90c1","url":"https://github.com/belaban/JGroups"},{"original_method":"void handleSocketClose(Exception ex) {\n        teardownPingSocket();     // make sure we have no leftovers\n        if(!regular_sock_close) { // only suspect if socket was not closed regularly (by interruptPingerThread())\n            if(log.isDebugEnabled())\n                log.debug(\"peer \" + ping_dest + \" closed socket (\" + (ex != null ? ex.getClass().getName() : \"eof\") + ')');\n            broadcastSuspectMessage(ping_dest);\n            pingable_mbrs.removeElement(ping_dest);\n        }\n        else {\n            if(log.isDebugEnabled()) log.debug(\"socket to \" + ping_dest + \" was reset\");\n            regular_sock_close=false;\n        }\n    }","id":10590,"modified_method":"void handleSocketClose(Exception ex) {\n        teardownPingSocket();     // make sure we have no leftovers\n        if(!regular_sock_close) { // only suspect if socket was not closed regularly (by interruptPingerThread())\n            if(log.isDebugEnabled())\n                log.debug(\"peer \" + ping_dest + \" closed socket (\" + (ex != null ? ex.getClass().getName() : \"eof\") + ')');\n            broadcastSuspectMessage(ping_dest);            \n        }\n        else {\n            if(log.isDebugEnabled()) log.debug(\"socket to \" + ping_dest + \" was reset\");\n            regular_sock_close=false;\n        }\n    }","commit_id":"7b6472301352d20b57e8badad5664acf5bbd90c1","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Runs as long as there are 2 members and more. Determines the member to be monitored and fetches its\n     * server socket address (if n/a, sends a message to obtain it). The creates a client socket and listens on\n     * it until the connection breaks. If it breaks, emits a SUSPECT message. It the connection is closed regularly,\n     * nothing happens. In both cases, a new member to be monitored will be chosen and monitoring continues (unless\n     * there are fewer than 2 members).\n     */\n    public void run() {\n        Address tmp_ping_dest;\n        IpAddress ping_addr;\n\n        // 1. Broadcast my own addr:sock to all members so they can update their cache\n        if(!srv_sock_sent) {\n            if(srv_sock_addr != null) {\n                sendIHaveSockMessage(null, // send to all members\n                                     local_addr,\n                                     srv_sock_addr);\n                srv_sock_sent=true;\n            }\n            else\n            if(log.isWarnEnabled()) log.warn(\"(VIEW_CHANGE): srv_sock_addr == null\");\n        }\n\n        // 2. Get the addr:pid cache from the coordinator (only if not already fetched)\n        if(!got_cache_from_coord) {\n            getCacheFromCoordinator();\n            got_cache_from_coord=true;\n        }\n\n\n\n        if(log.isTraceEnabled()) log.trace(\"pinger_thread started\"); // +++ remove\n        while(pinger_thread != null && Thread.currentThread().equals(pinger_thread) && running) {\n            tmp_ping_dest=determinePingDest(); // gets the neighbor to our right\n            if(log.isDebugEnabled())\n                log.debug(\"determinePingDest()=\" + tmp_ping_dest + \", pingable_mbrs=\" + pingable_mbrs);\n            if(tmp_ping_dest == null) {\n                ping_dest=null;\n                synchronized(this) {\n                    pinger_thread=null;\n                }\n                break;\n            }\n            ping_dest=tmp_ping_dest;\n            ping_addr=fetchPingAddress(ping_dest);\n            if(ping_addr == null) {\n                if(!running)\n                    break;\n                if(log.isErrorEnabled()) log.error(\"socket address for \" + ping_dest + \" could not be fetched, retrying\");\n                Util.sleep(1000);\n                continue;\n            }\n\n            if(!setupPingSocket(ping_addr)) {\n                // covers use cases #7 and #8 in ManualTests.txt\n                if(log.isDebugEnabled()) log.debug(\"could not create socket to \" + ping_dest + \"; suspecting \" + ping_dest);\n                broadcastSuspectMessage(ping_dest);\n                pingable_mbrs.removeElement(ping_dest);\n                continue;\n            }\n\n            if(log.isDebugEnabled()) log.debug(\"ping_dest=\" + ping_dest + \", ping_sock=\" + ping_sock + \", cache=\" + cache);\n\n            // at this point ping_input must be non-null, otherwise setupPingSocket() would have thrown an exception\n            try {\n                if(ping_input != null) {\n                    int c=ping_input.read();\n                    switch(c) {\n                        case NORMAL_TERMINATION:\n                            if(log.isDebugEnabled())\n                                log.debug(\"peer closed socket normally\");\n                            synchronized(this) {\n                                pinger_thread=null;\n                            }\n                            break;\n                        case ABNORMAL_TERMINATION:\n                            handleSocketClose(null);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n            catch(IOException ex) {  // we got here when the peer closed the socket --> suspect peer and then continue\n                handleSocketClose(ex);\n            }\n            catch(Throwable catch_all_the_rest) {\n                log.error(\"exception\", catch_all_the_rest);\n            }\n        }\n        if(log.isDebugEnabled()) log.debug(\"pinger thread terminated\");\n        synchronized(this) {\n            pinger_thread=null;\n        }\n    }","id":10591,"modified_method":"/**\n     * Runs as long as there are 2 members and more. Determines the member to be monitored and fetches its\n     * server socket address (if n/a, sends a message to obtain it). The creates a client socket and listens on\n     * it until the connection breaks. If it breaks, emits a SUSPECT message. It the connection is closed regularly,\n     * nothing happens. In both cases, a new member to be monitored will be chosen and monitoring continues (unless\n     * there are fewer than 2 members).\n     */\n    public void run() {               \n        if(log.isTraceEnabled()) log.trace(\"pinger_thread started\"); \n        \n        // 1. Broadcast my own addr:sock to all members so they can update their cache\n        if(!srv_sock_sent) {\n            if(srv_sock_addr != null) {\n                sendIHaveSockMessage(null, // send to all members\n                                     local_addr,\n                                     srv_sock_addr);\n                srv_sock_sent=true;\n            }\n            else\n            if(log.isWarnEnabled()) log.warn(\"(VIEW_CHANGE): srv_sock_addr == null\");\n        }\n\n        // 2. Get the addr:pid cache from the coordinator (only if not already fetched)\n        if(!got_cache_from_coord) {\n            getCacheFromCoordinator();\n            got_cache_from_coord=true;\n        }\n        \n        while(pinger_thread != null && Thread.currentThread().equals(pinger_thread) && running) {\n            ping_dest=determinePingDest(); // gets the neighbor to our right\n            if(log.isDebugEnabled())\n                log.debug(\"determinePingDest()=\" + ping_dest);\n            if(ping_dest == null) {               \n                break;\n            }            \n            IpAddress ping_addr=fetchPingAddress(ping_dest);\n            if(ping_addr == null) {\n                if(!running)\n                    break;\n                if(log.isErrorEnabled()) log.error(\"socket address for \" + ping_dest + \" could not be fetched, retrying\");\n                Util.sleep(1000);\n                continue;\n            }\n\n            if(!setupPingSocket(ping_addr)) {\n                // covers use cases #7 and #8 in ManualTests.txt\n                if(log.isDebugEnabled()) log.debug(\"could not create socket to \" + ping_dest + \"; suspecting \" + ping_dest);\n                broadcastSuspectMessage(ping_dest);                \n                continue;\n            }\n\n            if(log.isDebugEnabled()) log.debug(\"ping_dest=\" + ping_dest + \", ping_sock=\" + ping_sock + \", cache=\" + cache);\n\n            // at this point ping_input must be non-null, otherwise setupPingSocket() would have thrown an exception\n            try {\n                if(ping_input != null) {\n                    int c=ping_input.read();\n                    switch(c) {\n                        case NORMAL_TERMINATION:\n                            if(log.isDebugEnabled())\n                                log.debug(\"peer closed socket normally\");\n                            synchronized(this) {\n                                pinger_thread=null;\n                            }\n                            break;\n                        case ABNORMAL_TERMINATION:\n                            handleSocketClose(null);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n            catch(IOException ex) {  // we got here when the peer closed the socket --> suspect peer and then continue\n                handleSocketClose(ex);\n            }\n            catch(Throwable catch_all_the_rest) {\n                log.error(\"exception\", catch_all_the_rest);\n            }\n        }\n        if(log.isDebugEnabled()) log.debug(\"pinger thread terminated\");\n        synchronized(this) {\n            pinger_thread=null;\n        }\n    }","commit_id":"7b6472301352d20b57e8badad5664acf5bbd90c1","url":"https://github.com/belaban/JGroups"},{"original_method":"void sendPingSignal(int signal) {\n        if(ping_sock != null) {\n            try {\n                OutputStream out=ping_sock.getOutputStream();\n                if(out != null) {\n                    out.write(signal);\n                    out.flush();\n                }\n            }\n            catch(Throwable t) {\n                if(log.isTraceEnabled())\n                    log.trace(\"problem sending signal \" + signalToString(signal), t);\n            }\n        }\n    }","id":10592,"modified_method":"void sendPingSignal(int signal) {\n        synchronized(sock_mutex) {\n            if(ping_sock != null) {\n                try {\n                    OutputStream out=ping_sock.getOutputStream();\n                    if(out != null) {\n                        out.write(signal);\n                        out.flush();\n                    }\n                }\n                catch(Throwable t) {\n                    if(log.isTraceEnabled())\n                        log.trace(\"problem sending signal \" + signalToString(signal), t);\n                }\n            }\n        }\n    }","commit_id":"7b6472301352d20b57e8badad5664acf5bbd90c1","url":"https://github.com/belaban/JGroups"},{"original_method":"public Object down(Event evt) {\n        switch(evt.getType()) {\n\n            case Event.UNSUSPECT:\n                bcast_task.removeSuspectedMember((Address)evt.getArg());\n                break;\n\n            case Event.CONNECT:\n            case Event.CONNECT_WITH_STATE_TRANSFER:    \n                Object ret=down_prot.down(evt);\n                srv_sock=Util.createServerSocket(bind_addr, start_port); // grab a random unused port above 10000\n                srv_sock_addr=new IpAddress(bind_addr, srv_sock.getLocalPort());\n                startServerSocket();\n                return ret;\n\n            case Event.DISCONNECT:                \n                stopServerSocket(true); // graceful close\n                break;\n\n            case Event.SHUTDOWN:\n                stopServerSocket(false);\n                break;\n\n            case Event.VIEW_CHANGE:\n                View v=(View) evt.getArg();\n                final Vector<Address> new_mbrs=v.getMembers();\n\n                Runnable reshuffleSockets=new Runnable() {\n                    public void run() {\n                        synchronized(FD_SOCK.this) {\n                            members.removeAllElements();\n                            members.addAll(new_mbrs);\n                            cache.keySet().retainAll(members); // remove all entries in 'cache' which are not in the new membership\n                            bcast_task.adjustSuspectedMembers(members);\n                            pingable_mbrs.removeAllElements();\n                            pingable_mbrs.addAll(members);\n                            if(log.isDebugEnabled()) log.debug(\"VIEW_CHANGE received: \" + members);\n\n                            if(members.size() > 1) {\n                                if(pinger_thread != null && pinger_thread.isAlive()) {\n                                    Address tmp_ping_dest=determinePingDest();\n                                    if(ping_dest != null && tmp_ping_dest != null && !ping_dest.equals(tmp_ping_dest)) {\n                                        interruptPingerThread(); // allows the thread to use the new socket\n                                    }\n                                }\n                                else\n                                    startPingerThread(); // only starts if not yet running\n                            }\n                            else {\n                                ping_dest=null;\n                                stopPingerThread();\n                            }\n                        }\n                    }\n                };\n                timer.submit(reshuffleSockets);\n                break;\n\n            default:\n                return down_prot.down(evt);\n        }\n\n        return down_prot.down(evt);\n    }","id":10593,"modified_method":"public Object down(Event evt) {\n        switch(evt.getType()) {\n\n            case Event.UNSUSPECT:\n                bcast_task.removeSuspectedMember((Address)evt.getArg());\n                break;\n\n            case Event.CONNECT:\n            case Event.CONNECT_WITH_STATE_TRANSFER:    \n                Object ret=down_prot.down(evt);                \n                startServerSocket();\n                return ret;\n\n            case Event.DISCONNECT:                \n                stopServerSocket(true); // graceful close\n                break;\n\n            case Event.SHUTDOWN:\n                stopServerSocket(false);\n                break;\n\n            case Event.VIEW_CHANGE:\n                View v=(View) evt.getArg();\n                final Vector<Address> new_mbrs=v.getMembers();\n\n                Runnable reshuffleSockets=new Runnable() {\n                    public void run() {\n                        synchronized(FD_SOCK.this) {\n                            members.removeAllElements();\n                            members.addAll(new_mbrs);\n                            cache.keySet().retainAll(members); // remove all entries in 'cache' which are not in the new membership\n                            bcast_task.adjustSuspectedMembers(members);                            \n                            if(log.isDebugEnabled()) log.debug(\"VIEW_CHANGE received: \" + members);\n\n                            if(members.size() > 1) {\n                                if(pinger_thread != null && pinger_thread.isAlive()) {\n                                    Address tmp_ping_dest=determinePingDest();\n                                    if(ping_dest != null && tmp_ping_dest != null && !ping_dest.equals(tmp_ping_dest)) {\n                                        interruptPingerThread(); // allows the thread to use the new socket\n                                    }\n                                }\n                                else\n                                    startPingerThread(); // only starts if not yet running\n                            }\n                            else {\n                                ping_dest=null;\n                                stopPingerThread();\n                            }\n                        }\n                    }\n                };\n                timer.submit(reshuffleSockets);\n                break;\n\n            default:\n                return down_prot.down(evt);\n        }\n\n        return down_prot.down(evt);\n    }","commit_id":"7b6472301352d20b57e8badad5664acf5bbd90c1","url":"https://github.com/belaban/JGroups"},{"original_method":"void startServerSocket() {\n        if(srv_sock_handler != null) {\n            srv_sock_handler.start(); // won't start if already running            \n        }\n    }","id":10594,"modified_method":"void startServerSocket() {\n        srv_sock=Util.createServerSocket(bind_addr, start_port); // grab a random unused port above 10000\n        srv_sock_addr=new IpAddress(bind_addr, srv_sock.getLocalPort());\n        if(srv_sock_handler != null) {\n            srv_sock_handler.start(); // won't start if already running            \n        }\n    }","commit_id":"7b6472301352d20b57e8badad5664acf5bbd90c1","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Determines coordinator C. If C is null and we are the first member, return. Else loop: send GET_CACHE message\n     * to coordinator and wait for GET_CACHE_RSP response. Loop until valid response has been received.\n     */\n    void getCacheFromCoordinator() {\n        Address coord;\n        int attempts=num_tries;\n        Message msg;\n        FdHeader hdr;\n        Map<Address,IpAddress> result;\n\n        get_cache_promise.reset();\n        while(attempts > 0 && running) {\n            if((coord=determineCoordinator()) != null) {\n                if(coord.equals(local_addr)) { // we are the first member --> empty cache\n                    if(log.isDebugEnabled()) log.debug(\"first member; cache is empty\");\n                    return;\n                }\n                hdr=new FdHeader(FdHeader.GET_CACHE);\n                msg=new Message(coord, null, null);\n                msg.setFlag(Message.OOB);\n                msg.putHeader(name, hdr);\n                down_prot.down(new Event(Event.MSG, msg));\n                result=get_cache_promise.getResult(get_cache_timeout);\n                if(result != null) {\n                    cache.putAll(result);\n                    if(log.isTraceEnabled()) log.trace(\"got cache from \" + coord + \": cache is \" + cache);\n                    return;\n                }\n                else {\n                    if(log.isWarnEnabled()) log.warn(\"received null cache; retrying\");\n                }\n            }\n\n            --attempts;\n        }\n    }","id":10595,"modified_method":"/**\n     * Determines coordinator C. If C is null and we are the first member, return. Else loop: send GET_CACHE message\n     * to coordinator and wait for GET_CACHE_RSP response. Loop until valid response has been received.\n     */\n    void getCacheFromCoordinator() {\n        Address coord;\n        int attempts=num_tries;\n        Message msg;\n        FdHeader hdr;\n        Map<Address,IpAddress> result;\n\n        get_cache_promise.reset();\n        while(attempts > 0 && isPingerThreadRunning()) {\n            if((coord=determineCoordinator()) != null) {\n                if(coord.equals(local_addr)) { // we are the first member --> empty cache\n                    if(log.isDebugEnabled()) log.debug(\"first member; cache is empty\");\n                    return;\n                }\n                hdr=new FdHeader(FdHeader.GET_CACHE);\n                msg=new Message(coord, null, null);\n                msg.setFlag(Message.OOB);\n                msg.putHeader(name, hdr);\n                down_prot.down(new Event(Event.MSG, msg));\n                result=get_cache_promise.getResult(get_cache_timeout);\n                if(result != null) {\n                    cache.putAll(result);\n                    if(log.isTraceEnabled()) log.trace(\"got cache from \" + coord + \": cache is \" + cache);\n                    return;\n                }\n                else {\n                    if(log.isWarnEnabled()) log.warn(\"received null cache; retrying\");\n                }\n            }\n\n            --attempts;\n        }\n    }","commit_id":"cb53b1c26bb106feca9a36e3ea4997d1f4967153","url":"https://github.com/belaban/JGroups"},{"original_method":"public void start() throws Exception {\n        super.start();\n        running=true;\n    }","id":10596,"modified_method":"public void start() throws Exception {\n        super.start();       \n    }","commit_id":"cb53b1c26bb106feca9a36e3ea4997d1f4967153","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     Attempts to obtain the ping_addr first from the cache, then by unicasting q request to <code>mbr<\/code>,\n     then by multicasting a request to all members.\n     */\n    private IpAddress fetchPingAddress(Address mbr) {\n        IpAddress ret;\n        Message ping_addr_req;\n        FdHeader hdr;\n\n        if(mbr == null) {\n            if(log.isErrorEnabled()) log.error(\"mbr == null\");\n            return null;\n        }\n        // 1. Try to get the server socket address from the cache\n        if((ret=cache.get(mbr)) != null)\n            return ret;\n\n        // 2. Try to get the server socket address from mbr\n        ping_addr_promise.reset();\n        ping_addr_req=new Message(mbr, null, null); // unicast\n        ping_addr_req.setFlag(Message.OOB);\n        hdr=new FdHeader(FdHeader.WHO_HAS_SOCK);\n        hdr.mbr=mbr;\n        ping_addr_req.putHeader(name, hdr);\n        down_prot.down(new Event(Event.MSG, ping_addr_req));\n        if(!running) return null;\n        ret=ping_addr_promise.getResult(500);\n        if(ret != null) {\n            return ret;\n        }\n\n        // 3. Try to get the server socket address from all members\n        ping_addr_req=new Message(null); // multicast\n        ping_addr_req.setFlag(Message.OOB);\n        hdr=new FdHeader(FdHeader.WHO_HAS_SOCK);\n        hdr.mbr=mbr;\n        ping_addr_req.putHeader(name, hdr);\n        down_prot.down(new Event(Event.MSG, ping_addr_req));\n        ret=ping_addr_promise.getResult(500);\n        return ret;\n    }","id":10597,"modified_method":"/**\n     Attempts to obtain the ping_addr first from the cache, then by unicasting q request to <code>mbr<\/code>,\n     then by multicasting a request to all members.\n     */\n    private IpAddress fetchPingAddress(Address mbr) {\n        IpAddress ret;\n        Message ping_addr_req;\n        FdHeader hdr;\n\n        if(mbr == null) {\n            if(log.isErrorEnabled()) log.error(\"mbr == null\");\n            return null;\n        }\n        // 1. Try to get the server socket address from the cache\n        if((ret=cache.get(mbr)) != null)\n            return ret;\n\n        if(!isPingerThreadRunning()) return null;\n        \n        // 2. Try to get the server socket address from mbr\n        ping_addr_promise.reset();\n        ping_addr_req=new Message(mbr, null, null); // unicast\n        ping_addr_req.setFlag(Message.OOB);\n        hdr=new FdHeader(FdHeader.WHO_HAS_SOCK);\n        hdr.mbr=mbr;\n        ping_addr_req.putHeader(name, hdr);\n        down_prot.down(new Event(Event.MSG, ping_addr_req));        \n        ret=ping_addr_promise.getResult(500);\n        if(ret != null) {\n            return ret;\n        }\n\n        if(!isPingerThreadRunning()) return null;\n        \n        // 3. Try to get the server socket address from all members\n        ping_addr_req=new Message(null); // multicast\n        ping_addr_req.setFlag(Message.OOB);\n        hdr=new FdHeader(FdHeader.WHO_HAS_SOCK);\n        hdr.mbr=mbr;\n        ping_addr_req.putHeader(name, hdr);\n        down_prot.down(new Event(Event.MSG, ping_addr_req));\n        ret=ping_addr_promise.getResult(500);\n        return ret;\n    }","commit_id":"cb53b1c26bb106feca9a36e3ea4997d1f4967153","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Runs as long as there are 2 members and more. Determines the member to be monitored and fetches its\n     * server socket address (if n/a, sends a message to obtain it). The creates a client socket and listens on\n     * it until the connection breaks. If it breaks, emits a SUSPECT message. It the connection is closed regularly,\n     * nothing happens. In both cases, a new member to be monitored will be chosen and monitoring continues (unless\n     * there are fewer than 2 members).\n     */\n    public void run() {\n        Address tmp_ping_dest;\n        IpAddress ping_addr;\n\n        // 1. Broadcast my own addr:sock to all members so they can update their cache\n        if(!srv_sock_sent) {\n            if(srv_sock_addr != null) {\n                sendIHaveSockMessage(null, // send to all members\n                                     local_addr,\n                                     srv_sock_addr);\n                srv_sock_sent=true;\n            }\n            else\n            if(log.isWarnEnabled()) log.warn(\"(VIEW_CHANGE): srv_sock_addr == null\");\n        }\n\n        // 2. Get the addr:pid cache from the coordinator (only if not already fetched)\n        if(!got_cache_from_coord) {\n            getCacheFromCoordinator();\n            got_cache_from_coord=true;\n        }\n\n\n\n        if(log.isTraceEnabled()) log.trace(\"pinger_thread started\"); // +++ remove\n        while(pinger_thread != null && Thread.currentThread().equals(pinger_thread) && running) {\n            tmp_ping_dest=determinePingDest(); // gets the neighbor to our right\n            if(log.isDebugEnabled())\n                log.debug(\"determinePingDest()=\" + tmp_ping_dest + \", pingable_mbrs=\" + pingable_mbrs);\n            if(tmp_ping_dest == null) {\n                ping_dest=null;\n                synchronized(this) {\n                    pinger_thread=null;\n                }\n                break;\n            }\n            ping_dest=tmp_ping_dest;\n            ping_addr=fetchPingAddress(ping_dest);\n            \n            if(!running)\n                break;\n            \n            if(ping_addr == null) {                \n                if(log.isErrorEnabled()) log.error(\"socket address for \" + ping_dest + \" could not be fetched, retrying\");\n                Util.sleep(1000);\n                continue;\n            }\n\n            if(!setupPingSocket(ping_addr)) {\n                // covers use cases #7 and #8 in ManualTests.txt\n                if(log.isDebugEnabled()) log.debug(\"could not create socket to \" + ping_dest + \"; suspecting \" + ping_dest);\n                broadcastSuspectMessage(ping_dest);\n                pingable_mbrs.removeElement(ping_dest);\n                continue;\n            }\n\n            if(log.isDebugEnabled()) log.debug(\"ping_dest=\" + ping_dest + \", ping_sock=\" + ping_sock + \", cache=\" + cache);\n\n            // at this point ping_input must be non-null, otherwise setupPingSocket() would have thrown an exception\n            try {\n                if(ping_input != null) {\n                    int c=ping_input.read();\n                    switch(c) {\n                        case NORMAL_TERMINATION:\n                            if(log.isDebugEnabled())\n                                log.debug(\"peer closed socket normally\");\n                            synchronized(this) {\n                                pinger_thread=null;\n                            }\n                            break;\n                        case ABNORMAL_TERMINATION:\n                            handleSocketClose(null);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n            catch(IOException ex) {  // we got here when the peer closed the socket --> suspect peer and then continue\n                handleSocketClose(ex);\n            }\n            catch(Throwable catch_all_the_rest) {\n                log.error(\"exception\", catch_all_the_rest);\n            }\n        }\n        if(log.isDebugEnabled()) log.debug(\"pinger thread terminated\");\n        synchronized(this) {\n            pinger_thread=null;\n        }\n    }","id":10598,"modified_method":"/**\n     * Runs as long as there are 2 members and more. Determines the member to be monitored and fetches its\n     * server socket address (if n/a, sends a message to obtain it). The creates a client socket and listens on\n     * it until the connection breaks. If it breaks, emits a SUSPECT message. It the connection is closed regularly,\n     * nothing happens. In both cases, a new member to be monitored will be chosen and monitoring continues (unless\n     * there are fewer than 2 members).\n     */\n    public void run() {               \n\n        // 1. Broadcast my own addr:sock to all members so they can update their cache\n        if(!srv_sock_sent) {\n            if(srv_sock_addr != null) {\n                sendIHaveSockMessage(null, // send to all members\n                                     local_addr,\n                                     srv_sock_addr);\n                srv_sock_sent=true;\n            }\n            else\n            if(log.isWarnEnabled()) log.warn(\"(VIEW_CHANGE): srv_sock_addr == null\");\n        }\n\n        // 2. Get the addr:pid cache from the coordinator (only if not already fetched)\n        if(!got_cache_from_coord) {\n            getCacheFromCoordinator();\n            got_cache_from_coord=true;\n        }\n\n\n\n        if(log.isTraceEnabled()) log.trace(\"pinger_thread started\"); // +++ remove\n        while(isPingerThreadRunning()) {\n            ping_dest=determinePingDest(); // gets the neighbor to our right\n            \n            if(log.isDebugEnabled())\n                log.debug(\"determinePingDest()=\" + ping_dest + \", pingable_mbrs=\" + pingable_mbrs);           \n           \n            if(ping_dest == null)\n                break;\n            \n            IpAddress ping_addr=fetchPingAddress(ping_dest);\n            \n            if(!isPingerThreadRunning())\n                break;\n            \n            if(ping_addr == null) {                \n                if(log.isErrorEnabled()) log.error(\"socket address for \" + ping_dest + \" could not be fetched, retrying\");\n                Util.sleep(1000);\n                continue;\n            }\n\n            if(!isPingerThreadRunning())\n                break;\n            \n            if(!setupPingSocket(ping_addr)) {\n                // covers use cases #7 and #8 in ManualTests.txt\n                if(log.isDebugEnabled()) log.debug(\"could not create socket to \" + ping_dest + \"; suspecting \" + ping_dest);\n                broadcastSuspectMessage(ping_dest);\n                pingable_mbrs.removeElement(ping_dest);\n                continue;\n            }\n\n            if(log.isDebugEnabled()) log.debug(\"ping_dest=\" + ping_dest + \", ping_sock=\" + ping_sock + \", cache=\" + cache);\n\n            // at this point ping_input must be non-null, otherwise setupPingSocket() would have thrown an exception\n            try {\n                if(ping_input != null) {\n                    int c=ping_input.read();\n                    switch(c) {\n                        case NORMAL_TERMINATION:\n                            if(log.isDebugEnabled())\n                                log.debug(\"peer closed socket normally\");                            \n                            break;\n                        case ABNORMAL_TERMINATION:\n                            handleSocketClose(null);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n            catch(IOException ex) {  // we got here when the peer closed the socket --> suspect peer and then continue\n                handleSocketClose(ex);\n            }\n            catch(Throwable catch_all_the_rest) {\n                log.error(\"exception\", catch_all_the_rest);\n            }\n        }\n        if(log.isDebugEnabled()) log.debug(\"pinger thread terminated\");\n        synchronized(this) {\n            pinger_thread=null;\n        }\n    }","commit_id":"cb53b1c26bb106feca9a36e3ea4997d1f4967153","url":"https://github.com/belaban/JGroups"},{"original_method":"public void stop() {\n        running=false;\n        bcast_task.removeAll();\n        synchronized(this) {\n            stopPingerThread();\n        }\n        stopServerSocket(true); // graceful close\n    }","id":10599,"modified_method":"public void stop() {       \n        bcast_task.removeAll();\n        synchronized(this) {\n            stopPingerThread();\n        }\n        stopServerSocket(true); // graceful close\n    }","commit_id":"cb53b1c26bb106feca9a36e3ea4997d1f4967153","url":"https://github.com/belaban/JGroups"},{"original_method":"public Object down(Event evt) {\n        switch(evt.getType()) {\n\n            case Event.UNSUSPECT:\n                bcast_task.removeSuspectedMember((Address)evt.getArg());\n                break;\n\n            case Event.CONNECT:\n            case Event.CONNECT_WITH_STATE_TRANSFER:    \n                Object ret=down_prot.down(evt);                \n                startServerSocket();\n                return ret;\n\n            case Event.DISCONNECT:                \n                stopServerSocket(true); // graceful close\n                break;\n\n            case Event.SHUTDOWN:\n                stopServerSocket(false);\n                break;\n\n            case Event.VIEW_CHANGE:\n                View v=(View) evt.getArg();\n                final Vector<Address> new_mbrs=v.getMembers();\n\n                Runnable reshuffleSockets=new Runnable() {\n                    public void run() {\n                        synchronized(FD_SOCK.this) {\n                            members.removeAllElements();\n                            members.addAll(new_mbrs);\n                            cache.keySet().retainAll(members); // remove all entries in 'cache' which are not in the new membership\n                            bcast_task.adjustSuspectedMembers(members);\n                            pingable_mbrs.removeAllElements();\n                            pingable_mbrs.addAll(members);\n                            if(log.isDebugEnabled()) log.debug(\"VIEW_CHANGE received: \" + members);\n\n                            if(members.size() > 1) {\n                                if(pinger_thread != null && pinger_thread.isAlive()) {\n                                    Address tmp_ping_dest=determinePingDest();\n                                    if(ping_dest != null && tmp_ping_dest != null && !ping_dest.equals(tmp_ping_dest)) {\n                                        interruptPingerThread(); // allows the thread to use the new socket\n                                    }\n                                }\n                                else\n                                    startPingerThread(); // only starts if not yet running\n                            }\n                            else {\n                                ping_dest=null;\n                                stopPingerThread();\n                            }\n                        }\n                    }\n                };\n                timer.submit(reshuffleSockets);\n                break;\n\n            default:\n                return down_prot.down(evt);\n        }\n\n        return down_prot.down(evt);\n    }","id":10600,"modified_method":"public Object down(Event evt) {\n        switch(evt.getType()) {\n\n            case Event.UNSUSPECT:\n                bcast_task.removeSuspectedMember((Address)evt.getArg());\n                break;\n\n            case Event.CONNECT:\n            case Event.CONNECT_WITH_STATE_TRANSFER:    \n                Object ret=down_prot.down(evt);                \n                startServerSocket();\n                return ret;\n\n            case Event.DISCONNECT:                \n                stopServerSocket(true); // graceful close\n                break;\n\n            case Event.SHUTDOWN:\n                stopServerSocket(false);\n                break;\n\n            case Event.VIEW_CHANGE:\n                View v=(View) evt.getArg();\n                final Vector<Address> new_mbrs=v.getMembers();\n\n                Runnable reshuffleSockets=new Runnable() {\n                    public void run() {\n                        synchronized(FD_SOCK.this) {\n                            members.removeAllElements();\n                            members.addAll(new_mbrs);\n                            cache.keySet().retainAll(members); // remove all entries in 'cache' which are not in the new membership\n                            bcast_task.adjustSuspectedMembers(members);\n                            pingable_mbrs.removeAllElements();\n                            pingable_mbrs.addAll(members);\n                            if(log.isDebugEnabled()) log.debug(\"VIEW_CHANGE received: \" + members);\n\n                            if(members.size() > 1) {\n                                if(isPingerThreadRunning()) {\n                                    Address tmp_ping_dest=determinePingDest();\n                                    boolean hasNewPingDest = ping_dest != null && tmp_ping_dest != null && !ping_dest.equals(tmp_ping_dest);\n                                    if(hasNewPingDest) {\n                                        interruptPingerThread(); // allows the thread to use the new socket\n                                    }\n                                }\n                                else\n                                    startPingerThread(); // only starts if not yet running\n                            }\n                            else {\n                                ping_dest=null;\n                                stopPingerThread();\n                            }\n                        }\n                    }\n                };\n                timer.submit(reshuffleSockets);\n                break;\n\n            default:\n                return down_prot.down(evt);\n        }\n\n        return down_prot.down(evt);\n    }","commit_id":"cb53b1c26bb106feca9a36e3ea4997d1f4967153","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Interrupts the pinger thread. The Thread.interrupt() method doesn't seem to work under Linux with JDK 1.3.1\n     * (JDK 1.2.2 had no problems here), therefore we close the socket (setSoLinger has to be set !) if we are\n     * running under Linux. This should be tested under Windows. (Solaris 8 and JDK 1.3.1 definitely works).<p>\n     * Oct 29 2001 (bela): completely removed Thread.interrupt(), but used socket close on all OSs. This makes this\n     * code portable and we don't have to check for OSs.<p/>\n     * Does *not* need to be synchronized on pinger_mutex because the caller (down()) already has the mutex acquired\n     * @see {@link org.jgroups.tests.InterruptTest} to determine whether Thread.interrupt() works for InputStream.read().\n     */\n    void interruptPingerThread() {\n        if(pinger_thread != null && pinger_thread.isAlive()) {\n            regular_sock_close=true;\n            sendPingInterrupt();  // PATCH by Bruce Schuchardt (http://jira.jboss.com/jira/browse/JGRP-246)\n            teardownPingSocket(); // will wake up the pinger thread. less elegant than Thread.interrupt(), but does the job\n        }\n    }","id":10601,"modified_method":"/**\n     * Interrupts the pinger thread. The Thread.interrupt() method doesn't seem to work under Linux with JDK 1.3.1\n     * (JDK 1.2.2 had no problems here), therefore we close the socket (setSoLinger has to be set !) if we are\n     * running under Linux. This should be tested under Windows. (Solaris 8 and JDK 1.3.1 definitely works).<p>\n     * Oct 29 2001 (bela): completely removed Thread.interrupt(), but used socket close on all OSs. This makes this\n     * code portable and we don't have to check for OSs.<p/>\n     * Does *not* need to be synchronized on pinger_mutex because the caller (down()) already has the mutex acquired\n     * @see {@link org.jgroups.tests.InterruptTest} to determine whether Thread.interrupt() works for InputStream.read().\n     */\n    void interruptPingerThread() {\n        if(isPingerThreadRunning()) {\n            regular_sock_close=true;\n            sendPingInterrupt();  // PATCH by Bruce Schuchardt (http://jira.jboss.com/jira/browse/JGRP-246)\n            teardownPingSocket(); // will wake up the pinger thread. less elegant than Thread.interrupt(), but does the job\n        }\n    }","commit_id":"cb53b1c26bb106feca9a36e3ea4997d1f4967153","url":"https://github.com/belaban/JGroups"},{"original_method":"void stopPingerThread() {\n        running=false;\n        if(pinger_thread != null && pinger_thread.isAlive()) {\n            regular_sock_close=true;\n            pinger_thread=null;\n            sendPingTermination(); // PATCH by Bruce Schuchardt (http://jira.jboss.com/jira/browse/JGRP-246)\n            teardownPingSocket();\n            ping_addr_promise.setResult(null);\n            get_cache_promise.setResult(null);\n        }\n\n    }","id":10602,"modified_method":"void stopPingerThread() {        \n        if(isPingerThreadRunning()) {                 \n            regular_sock_close=true;            \n            sendPingTermination(); // PATCH by Bruce Schuchardt (http://jira.jboss.com/jira/browse/JGRP-246)\n            teardownPingSocket();\n            \n            try {\n                pinger_thread.interrupt();\n                pinger_thread.join(Global.THREAD_SHUTDOWN_WAIT_TIME);\n            }\n            catch(InterruptedException ignored) {\n                Thread.currentThread().interrupt();\n            }    \n            pinger_thread=null;           \n            ping_addr_promise.setResult(null);\n            get_cache_promise.setResult(null);\n        }\n    }","commit_id":"cb53b1c26bb106feca9a36e3ea4997d1f4967153","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Does *not* need to be synchronized on pinger_mutex because the caller (down()) already has the mutex acquired\n     */\n    void startPingerThread() {\n        running=true;\n        if(pinger_thread == null) {\n            ThreadFactory factory=getThreadFactory();\n            pinger_thread=factory.newThread(this, \"FD_SOCK pinger\");            \n            pinger_thread.setDaemon(true);            \n            pinger_thread.start();            \n        }\n    }","id":10603,"modified_method":"/**\n     * Does *not* need to be synchronized on pinger_mutex because the caller (down()) already has the mutex acquired\n     */\n    void startPingerThread() {        \n        if(pinger_thread == null) {\n            ThreadFactory factory=getThreadFactory();\n            pinger_thread=factory.newThread(this, \"FD_SOCK pinger\");            \n            pinger_thread.setDaemon(true);            \n            pinger_thread.start();            \n        }\n    }","commit_id":"cb53b1c26bb106feca9a36e3ea4997d1f4967153","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Interrupts the pinger thread. The Thread.interrupt() method doesn't seem to work under Linux with JDK 1.3.1\n     * (JDK 1.2.2 had no problems here), therefore we close the socket (setSoLinger has to be set !) if we are\n     * running under Linux. This should be tested under Windows. (Solaris 8 and JDK 1.3.1 definitely works).<p>\n     * Oct 29 2001 (bela): completely removed Thread.interrupt(), but used socket close on all OSs. This makes this\n     * code portable and we don't have to check for OSs.<p/>\n     * Does *not* need to be synchronized on pinger_mutex because the caller (down()) already has the mutex acquired\n     * @see {@link org.jgroups.tests.InterruptTest} to determine whether Thread.interrupt() works for InputStream.read().\n     */\n    void interruptPingerThread() {\n        if(pinger_thread != null && pinger_thread.isAlive()) {\n            regular_sock_close=true;\n            sendPingInterrupt();  // PATCH by Bruce Schuchardt (http://jira.jboss.com/jira/browse/JGRP-246)\n            teardownPingSocket(); // will wake up the pinger thread. less elegant than Thread.interrupt(), but does the job\n        }\n    }","id":10604,"modified_method":"/**\n     * Interrupts the pinger thread. The Thread.interrupt() method doesn't seem to work under Linux with JDK 1.3.1\n     * (JDK 1.2.2 had no problems here), therefore we close the socket (setSoLinger has to be set !) if we are\n     * running under Linux. This should be tested under Windows. (Solaris 8 and JDK 1.3.1 definitely works).<p>\n     * Oct 29 2001 (bela): completely removed Thread.interrupt(), but used socket close on all OSs. This makes this\n     * code portable and we don't have to check for OSs.<p/>\n     * Does *not* need to be synchronized on pinger_mutex because the caller (down()) already has the mutex acquired\n     * @see {@link org.jgroups.tests.InterruptTest} to determine whether Thread.interrupt() works for InputStream.read().\n     */\n    void interruptPingerThread() {\n        if(isPingerThreadRunning()) {\n            regular_sock_close=true;\n            sendPingInterrupt();  // PATCH by Bruce Schuchardt (http://jira.jboss.com/jira/browse/JGRP-246)\n            teardownPingSocket(); // will wake up the pinger thread. less elegant than Thread.interrupt(), but does the job\n        }\n    }","commit_id":"48fcfdb5ee824bd64f1d510e4758be6347f8ad2e","url":"https://github.com/belaban/JGroups"},{"original_method":"public void start() throws Exception {\n        super.start();\n        running=true;\n    }","id":10605,"modified_method":"public void start() throws Exception {\n        super.start();       \n    }","commit_id":"48fcfdb5ee824bd64f1d510e4758be6347f8ad2e","url":"https://github.com/belaban/JGroups"},{"original_method":"public void stop() {\n        running=false;\n        bcast_task.removeAll();\n        synchronized(this) {\n            stopPingerThread();\n        }\n        stopServerSocket(true); // graceful close\n    }","id":10606,"modified_method":"public void stop() {       \n        bcast_task.removeAll();\n        synchronized(this) {\n            stopPingerThread();\n        }\n        stopServerSocket(true); // graceful close\n    }","commit_id":"48fcfdb5ee824bd64f1d510e4758be6347f8ad2e","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     Attempts to obtain the ping_addr first from the cache, then by unicasting q request to <code>mbr<\/code>,\n     then by multicasting a request to all members.\n     */\n    private IpAddress fetchPingAddress(Address mbr) {\n        IpAddress ret;\n        Message ping_addr_req;\n        FdHeader hdr;\n\n        if(mbr == null) {\n            if(log.isErrorEnabled()) log.error(\"mbr == null\");\n            return null;\n        }\n        // 1. Try to get the server socket address from the cache\n        if((ret=cache.get(mbr)) != null)\n            return ret;\n\n        // 2. Try to get the server socket address from mbr\n        ping_addr_promise.reset();\n        ping_addr_req=new Message(mbr, null, null); // unicast\n        ping_addr_req.setFlag(Message.OOB);\n        hdr=new FdHeader(FdHeader.WHO_HAS_SOCK);\n        hdr.mbr=mbr;\n        ping_addr_req.putHeader(name, hdr);\n        down_prot.down(new Event(Event.MSG, ping_addr_req));\n        if(!running) return null;\n        ret=ping_addr_promise.getResult(500);\n        if(ret != null) {\n            return ret;\n        }\n\n        // 3. Try to get the server socket address from all members\n        ping_addr_req=new Message(null); // multicast\n        ping_addr_req.setFlag(Message.OOB);\n        hdr=new FdHeader(FdHeader.WHO_HAS_SOCK);\n        hdr.mbr=mbr;\n        ping_addr_req.putHeader(name, hdr);\n        down_prot.down(new Event(Event.MSG, ping_addr_req));\n        ret=ping_addr_promise.getResult(500);\n        return ret;\n    }","id":10607,"modified_method":"/**\n     Attempts to obtain the ping_addr first from the cache, then by unicasting q request to <code>mbr<\/code>,\n     then by multicasting a request to all members.\n     */\n    private IpAddress fetchPingAddress(Address mbr) {\n        IpAddress ret;\n        Message ping_addr_req;\n        FdHeader hdr;\n\n        if(mbr == null) {\n            if(log.isErrorEnabled()) log.error(\"mbr == null\");\n            return null;\n        }\n        // 1. Try to get the server socket address from the cache\n        if((ret=cache.get(mbr)) != null)\n            return ret;\n\n        if(!isPingerThreadRunning()) return null;\n        \n        // 2. Try to get the server socket address from mbr\n        ping_addr_promise.reset();\n        ping_addr_req=new Message(mbr, null, null); // unicast\n        ping_addr_req.setFlag(Message.OOB);\n        hdr=new FdHeader(FdHeader.WHO_HAS_SOCK);\n        hdr.mbr=mbr;\n        ping_addr_req.putHeader(name, hdr);\n        down_prot.down(new Event(Event.MSG, ping_addr_req));        \n        ret=ping_addr_promise.getResult(500);\n        if(ret != null) {\n            return ret;\n        }\n\n        if(!isPingerThreadRunning()) return null;\n        \n        // 3. Try to get the server socket address from all members\n        ping_addr_req=new Message(null); // multicast\n        ping_addr_req.setFlag(Message.OOB);\n        hdr=new FdHeader(FdHeader.WHO_HAS_SOCK);\n        hdr.mbr=mbr;\n        ping_addr_req.putHeader(name, hdr);\n        down_prot.down(new Event(Event.MSG, ping_addr_req));\n        ret=ping_addr_promise.getResult(500);\n        return ret;\n    }","commit_id":"48fcfdb5ee824bd64f1d510e4758be6347f8ad2e","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Does *not* need to be synchronized on pinger_mutex because the caller (down()) already has the mutex acquired\n     */\n    void startPingerThread() {\n        running=true;\n        if(pinger_thread == null) {\n            ThreadFactory factory=getThreadFactory();\n            pinger_thread=factory.newThread(this, \"FD_SOCK pinger\");            \n            pinger_thread.setDaemon(true);            \n            pinger_thread.start();            \n        }\n    }","id":10608,"modified_method":"/**\n     * Does *not* need to be synchronized on pinger_mutex because the caller (down()) already has the mutex acquired\n     */\n    void startPingerThread() {        \n        if(pinger_thread == null) {\n            ThreadFactory factory=getThreadFactory();\n            pinger_thread=factory.newThread(this, \"FD_SOCK pinger\");            \n            pinger_thread.setDaemon(true);            \n            pinger_thread.start();            \n        }\n    }","commit_id":"48fcfdb5ee824bd64f1d510e4758be6347f8ad2e","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Runs as long as there are 2 members and more. Determines the member to be monitored and fetches its\n     * server socket address (if n/a, sends a message to obtain it). The creates a client socket and listens on\n     * it until the connection breaks. If it breaks, emits a SUSPECT message. It the connection is closed regularly,\n     * nothing happens. In both cases, a new member to be monitored will be chosen and monitoring continues (unless\n     * there are fewer than 2 members).\n     */\n    public void run() {\n        Address tmp_ping_dest;\n        IpAddress ping_addr;\n\n        // 1. Broadcast my own addr:sock to all members so they can update their cache\n        if(!srv_sock_sent) {\n            if(srv_sock_addr != null) {\n                sendIHaveSockMessage(null, // send to all members\n                                     local_addr,\n                                     srv_sock_addr);\n                srv_sock_sent=true;\n            }\n            else\n            if(log.isWarnEnabled()) log.warn(\"(VIEW_CHANGE): srv_sock_addr == null\");\n        }\n\n        // 2. Get the addr:pid cache from the coordinator (only if not already fetched)\n        if(!got_cache_from_coord) {\n            getCacheFromCoordinator();\n            got_cache_from_coord=true;\n        }\n\n\n\n        if(log.isTraceEnabled()) log.trace(\"pinger_thread started\"); // +++ remove\n        while(pinger_thread != null && Thread.currentThread().equals(pinger_thread) && running) {\n            tmp_ping_dest=determinePingDest(); // gets the neighbor to our right\n            if(log.isDebugEnabled())\n                log.debug(\"determinePingDest()=\" + tmp_ping_dest + \", pingable_mbrs=\" + pingable_mbrs);\n            if(tmp_ping_dest == null) {\n                ping_dest=null;\n                synchronized(this) {\n                    pinger_thread=null;\n                }\n                break;\n            }\n            ping_dest=tmp_ping_dest;\n            ping_addr=fetchPingAddress(ping_dest);\n            \n            if(!running)\n                break;\n            \n            if(ping_addr == null) {                \n                if(log.isErrorEnabled()) log.error(\"socket address for \" + ping_dest + \" could not be fetched, retrying\");\n                Util.sleep(1000);\n                continue;\n            }\n\n            if(!setupPingSocket(ping_addr)) {\n                // covers use cases #7 and #8 in ManualTests.txt\n                if(log.isDebugEnabled()) log.debug(\"could not create socket to \" + ping_dest + \"; suspecting \" + ping_dest);\n                broadcastSuspectMessage(ping_dest);\n                pingable_mbrs.removeElement(ping_dest);\n                continue;\n            }\n\n            if(log.isDebugEnabled()) log.debug(\"ping_dest=\" + ping_dest + \", ping_sock=\" + ping_sock + \", cache=\" + cache);\n\n            // at this point ping_input must be non-null, otherwise setupPingSocket() would have thrown an exception\n            try {\n                if(ping_input != null) {\n                    int c=ping_input.read();\n                    switch(c) {\n                        case NORMAL_TERMINATION:\n                            if(log.isDebugEnabled())\n                                log.debug(\"peer closed socket normally\");\n                            synchronized(this) {\n                                pinger_thread=null;\n                            }\n                            break;\n                        case ABNORMAL_TERMINATION:\n                            handleSocketClose(null);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n            catch(IOException ex) {  // we got here when the peer closed the socket --> suspect peer and then continue\n                handleSocketClose(ex);\n            }\n            catch(Throwable catch_all_the_rest) {\n                log.error(\"exception\", catch_all_the_rest);\n            }\n        }\n        if(log.isDebugEnabled()) log.debug(\"pinger thread terminated\");\n        synchronized(this) {\n            pinger_thread=null;\n        }\n    }","id":10609,"modified_method":"/**\n     * Runs as long as there are 2 members and more. Determines the member to be monitored and fetches its\n     * server socket address (if n/a, sends a message to obtain it). The creates a client socket and listens on\n     * it until the connection breaks. If it breaks, emits a SUSPECT message. It the connection is closed regularly,\n     * nothing happens. In both cases, a new member to be monitored will be chosen and monitoring continues (unless\n     * there are fewer than 2 members).\n     */\n    public void run() {               \n\n        // 1. Broadcast my own addr:sock to all members so they can update their cache\n        if(!srv_sock_sent) {\n            if(srv_sock_addr != null) {\n                sendIHaveSockMessage(null, // send to all members\n                                     local_addr,\n                                     srv_sock_addr);\n                srv_sock_sent=true;\n            }\n            else\n            if(log.isWarnEnabled()) log.warn(\"(VIEW_CHANGE): srv_sock_addr == null\");\n        }\n\n        // 2. Get the addr:pid cache from the coordinator (only if not already fetched)\n        if(!got_cache_from_coord) {\n            getCacheFromCoordinator();\n            got_cache_from_coord=true;\n        }\n\n\n\n        if(log.isTraceEnabled()) log.trace(\"pinger_thread started\"); // +++ remove\n        while(isPingerThreadRunning()) {\n            ping_dest=determinePingDest(); // gets the neighbor to our right\n            \n            if(log.isDebugEnabled())\n                log.debug(\"determinePingDest()=\" + ping_dest + \", pingable_mbrs=\" + pingable_mbrs);           \n           \n            if(ping_dest == null)\n                break;\n            \n            IpAddress ping_addr=fetchPingAddress(ping_dest);\n            \n            if(!isPingerThreadRunning())\n                break;\n            \n            if(ping_addr == null) {                \n                if(log.isErrorEnabled()) log.error(\"socket address for \" + ping_dest + \" could not be fetched, retrying\");\n                Util.sleep(1000);\n                continue;\n            }\n\n            if(!isPingerThreadRunning())\n                break;\n            \n            if(!setupPingSocket(ping_addr)) {\n                // covers use cases #7 and #8 in ManualTests.txt\n                if(log.isDebugEnabled()) log.debug(\"could not create socket to \" + ping_dest + \"; suspecting \" + ping_dest);\n                broadcastSuspectMessage(ping_dest);\n                pingable_mbrs.removeElement(ping_dest);\n                continue;\n            }\n\n            if(log.isDebugEnabled()) log.debug(\"ping_dest=\" + ping_dest + \", ping_sock=\" + ping_sock + \", cache=\" + cache);\n\n            // at this point ping_input must be non-null, otherwise setupPingSocket() would have thrown an exception\n            try {\n                if(ping_input != null) {\n                    int c=ping_input.read();\n                    switch(c) {\n                        case NORMAL_TERMINATION:\n                            if(log.isDebugEnabled())\n                                log.debug(\"peer closed socket normally\");                            \n                            break;\n                        case ABNORMAL_TERMINATION:\n                            handleSocketClose(null);\n                            break;\n                        default:\n                            break;\n                    }\n                }\n            }\n            catch(IOException ex) {  // we got here when the peer closed the socket --> suspect peer and then continue\n                handleSocketClose(ex);\n            }\n            catch(Throwable catch_all_the_rest) {\n                log.error(\"exception\", catch_all_the_rest);\n            }\n        }\n        if(log.isDebugEnabled()) log.debug(\"pinger thread terminated\");\n        synchronized(this) {\n            pinger_thread=null;\n        }\n    }","commit_id":"48fcfdb5ee824bd64f1d510e4758be6347f8ad2e","url":"https://github.com/belaban/JGroups"},{"original_method":"public Object down(Event evt) {\n        switch(evt.getType()) {\n\n            case Event.UNSUSPECT:\n                bcast_task.removeSuspectedMember((Address)evt.getArg());\n                break;\n\n            case Event.CONNECT:\n            case Event.CONNECT_WITH_STATE_TRANSFER:    \n                Object ret=down_prot.down(evt);                \n                startServerSocket();\n                return ret;\n\n            case Event.DISCONNECT:                \n                stopServerSocket(true); // graceful close\n                break;\n\n            case Event.SHUTDOWN:\n                stopServerSocket(false);\n                break;\n\n            case Event.VIEW_CHANGE:\n                View v=(View) evt.getArg();\n                final Vector<Address> new_mbrs=v.getMembers();\n\n                Runnable reshuffleSockets=new Runnable() {\n                    public void run() {\n                        synchronized(FD_SOCK.this) {\n                            members.removeAllElements();\n                            members.addAll(new_mbrs);\n                            cache.keySet().retainAll(members); // remove all entries in 'cache' which are not in the new membership\n                            bcast_task.adjustSuspectedMembers(members);\n                            pingable_mbrs.removeAllElements();\n                            pingable_mbrs.addAll(members);\n                            if(log.isDebugEnabled()) log.debug(\"VIEW_CHANGE received: \" + members);\n\n                            if(members.size() > 1) {\n                                if(pinger_thread != null && pinger_thread.isAlive()) {\n                                    Address tmp_ping_dest=determinePingDest();\n                                    if(ping_dest != null && tmp_ping_dest != null && !ping_dest.equals(tmp_ping_dest)) {\n                                        interruptPingerThread(); // allows the thread to use the new socket\n                                    }\n                                }\n                                else\n                                    startPingerThread(); // only starts if not yet running\n                            }\n                            else {\n                                ping_dest=null;\n                                stopPingerThread();\n                            }\n                        }\n                    }\n                };\n                timer.submit(reshuffleSockets);\n                break;\n\n            default:\n                return down_prot.down(evt);\n        }\n\n        return down_prot.down(evt);\n    }","id":10610,"modified_method":"public Object down(Event evt) {\n        switch(evt.getType()) {\n\n            case Event.UNSUSPECT:\n                bcast_task.removeSuspectedMember((Address)evt.getArg());\n                break;\n\n            case Event.CONNECT:\n            case Event.CONNECT_WITH_STATE_TRANSFER:    \n                Object ret=down_prot.down(evt);                \n                startServerSocket();\n                return ret;\n\n            case Event.DISCONNECT:                \n                stopServerSocket(true); // graceful close\n                break;\n\n            case Event.SHUTDOWN:\n                stopServerSocket(false);\n                break;\n\n            case Event.VIEW_CHANGE:\n                View v=(View) evt.getArg();\n                final Vector<Address> new_mbrs=v.getMembers();\n\n                Runnable reshuffleSockets=new Runnable() {\n                    public void run() {\n                        synchronized(FD_SOCK.this) {\n                            members.removeAllElements();\n                            members.addAll(new_mbrs);\n                            cache.keySet().retainAll(members); // remove all entries in 'cache' which are not in the new membership\n                            bcast_task.adjustSuspectedMembers(members);\n                            pingable_mbrs.removeAllElements();\n                            pingable_mbrs.addAll(members);\n                            if(log.isDebugEnabled()) log.debug(\"VIEW_CHANGE received: \" + members);\n\n                            if(members.size() > 1) {\n                                if(isPingerThreadRunning()) {\n                                    Address tmp_ping_dest=determinePingDest();\n                                    boolean hasNewPingDest = ping_dest != null && tmp_ping_dest != null && !ping_dest.equals(tmp_ping_dest);\n                                    if(hasNewPingDest) {\n                                        interruptPingerThread(); // allows the thread to use the new socket\n                                    }\n                                }\n                                else\n                                    startPingerThread(); // only starts if not yet running\n                            }\n                            else {\n                                ping_dest=null;\n                                stopPingerThread();\n                            }\n                        }\n                    }\n                };\n                timer.submit(reshuffleSockets);\n                break;\n\n            default:\n                return down_prot.down(evt);\n        }\n\n        return down_prot.down(evt);\n    }","commit_id":"48fcfdb5ee824bd64f1d510e4758be6347f8ad2e","url":"https://github.com/belaban/JGroups"},{"original_method":"void stopPingerThread() {\n        running=false;\n        if(pinger_thread != null && pinger_thread.isAlive()) {\n            regular_sock_close=true;\n            pinger_thread=null;\n            sendPingTermination(); // PATCH by Bruce Schuchardt (http://jira.jboss.com/jira/browse/JGRP-246)\n            teardownPingSocket();\n            ping_addr_promise.setResult(null);\n            get_cache_promise.setResult(null);\n        }\n\n    }","id":10611,"modified_method":"void stopPingerThread() {        \n        if(isPingerThreadRunning()) {                 \n            regular_sock_close=true;            \n            sendPingTermination(); // PATCH by Bruce Schuchardt (http://jira.jboss.com/jira/browse/JGRP-246)\n            teardownPingSocket();\n            \n            try {\n                pinger_thread.interrupt();\n                pinger_thread.join(Global.THREAD_SHUTDOWN_WAIT_TIME);\n            }\n            catch(InterruptedException ignored) {\n                Thread.currentThread().interrupt();\n            }    \n            pinger_thread=null;           \n            ping_addr_promise.setResult(null);\n            get_cache_promise.setResult(null);\n        }\n    }","commit_id":"48fcfdb5ee824bd64f1d510e4758be6347f8ad2e","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Determines coordinator C. If C is null and we are the first member, return. Else loop: send GET_CACHE message\n     * to coordinator and wait for GET_CACHE_RSP response. Loop until valid response has been received.\n     */\n    void getCacheFromCoordinator() {\n        Address coord;\n        int attempts=num_tries;\n        Message msg;\n        FdHeader hdr;\n        Map<Address,IpAddress> result;\n\n        get_cache_promise.reset();\n        while(attempts > 0 && running) {\n            if((coord=determineCoordinator()) != null) {\n                if(coord.equals(local_addr)) { // we are the first member --> empty cache\n                    if(log.isDebugEnabled()) log.debug(\"first member; cache is empty\");\n                    return;\n                }\n                hdr=new FdHeader(FdHeader.GET_CACHE);\n                msg=new Message(coord, null, null);\n                msg.setFlag(Message.OOB);\n                msg.putHeader(name, hdr);\n                down_prot.down(new Event(Event.MSG, msg));\n                result=get_cache_promise.getResult(get_cache_timeout);\n                if(result != null) {\n                    cache.putAll(result);\n                    if(log.isTraceEnabled()) log.trace(\"got cache from \" + coord + \": cache is \" + cache);\n                    return;\n                }\n                else {\n                    if(log.isWarnEnabled()) log.warn(\"received null cache; retrying\");\n                }\n            }\n\n            --attempts;\n        }\n    }","id":10612,"modified_method":"/**\n     * Determines coordinator C. If C is null and we are the first member, return. Else loop: send GET_CACHE message\n     * to coordinator and wait for GET_CACHE_RSP response. Loop until valid response has been received.\n     */\n    void getCacheFromCoordinator() {\n        Address coord;\n        int attempts=num_tries;\n        Message msg;\n        FdHeader hdr;\n        Map<Address,IpAddress> result;\n\n        get_cache_promise.reset();\n        while(attempts > 0 && isPingerThreadRunning()) {\n            if((coord=determineCoordinator()) != null) {\n                if(coord.equals(local_addr)) { // we are the first member --> empty cache\n                    if(log.isDebugEnabled()) log.debug(\"first member; cache is empty\");\n                    return;\n                }\n                hdr=new FdHeader(FdHeader.GET_CACHE);\n                msg=new Message(coord, null, null);\n                msg.setFlag(Message.OOB);\n                msg.putHeader(name, hdr);\n                down_prot.down(new Event(Event.MSG, msg));\n                result=get_cache_promise.getResult(get_cache_timeout);\n                if(result != null) {\n                    cache.putAll(result);\n                    if(log.isTraceEnabled()) log.trace(\"got cache from \" + coord + \": cache is \" + cache);\n                    return;\n                }\n                else {\n                    if(log.isWarnEnabled()) log.warn(\"received null cache; retrying\");\n                }\n            }\n\n            --attempts;\n        }\n    }","commit_id":"48fcfdb5ee824bd64f1d510e4758be6347f8ad2e","url":"https://github.com/belaban/JGroups"},{"original_method":"public XtendFunction getXtendFunction(final JvmOperation inferredOperation) {\n\t\treturn (XtendFunction) find(getAssociatedElements(inferredOperation), new Predicate<EObject>() {\n\t\t\tpublic boolean apply(EObject input) {\n\t\t\t\treturn input instanceof XtendFunction;\n\t\t\t}\n\t\t});\n\t}","id":10613,"modified_method":"public XtendFunction getXtendFunction(final JvmOperation inferredOperation) {\n\t\tfor (EObject element : getAssociatedElements(inferredOperation))\n\t\t\tif (element instanceof XtendFunction)\n\t\t\t\treturn (XtendFunction) element;\n\t\treturn null;\n\t}","commit_id":"e6516b2c1b6b13e07282612123fbbd6d4487df51","url":"https://github.com/eclipse/xtext"},{"original_method":"public Multimap<Pair<String, Integer>, JvmOperation> getDispatchMethods(JvmGenericType type) {\n\t\tMultimap<Pair<String, Integer>, JvmOperation> result = HashMultimap.create();\n\t\tcollectDispatchMethods(type, result);\n\t\treturn result;\n\t}","id":10614,"modified_method":"public Multimap<Pair<String, Integer>, JvmOperation> getDispatchMethods(JvmGenericType type) {\n\t\tMultimap<Pair<String, Integer>, JvmOperation> result = LinkedHashMultimap.create();\n\t\tcollectDispatchMethods(type, result);\n\t\treturn result;\n\t}","commit_id":"7ac781e661f279aab2e5f09cac6fb313234a0116","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n\t * @return a {@link JvmOperation} with common denominator argument types of all given operations\n\t */\n\tprotected JvmOperation deriveGenericDispatchOperationSignature(Collection<JvmOperation> operations) {\n\t\tif (operations.isEmpty())\n\t\t\treturn null;\n\t\tJvmOperation result = null;\n\t\tfinal Iterator<JvmOperation> iterator = operations.iterator();\n\t\tJvmOperation first = iterator.next();\n\t\tif (operations.size() == 1) {\n\t\t\tresult = EcoreUtil2.clone(first);\n\t\t} else {\n\t\t\tresult = typesFactory.createJvmOperation();\n\t\t\tfor (int i = 0; i < first.getParameters().size(); i++) {\n\t\t\t\tJvmFormalParameter parameter2 = first.getParameters().get(i);\n\t\t\t\tfinal int index = i;\n\t\t\t\tJvmTypeReference commonType = commonType(operations, new Function<JvmOperation, JvmTypeReference>() {\n\t\t\t\t\tpublic JvmTypeReference apply(JvmOperation from) {\n\t\t\t\t\t\treturn from.getParameters().get(index).getParameterType();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tJvmFormalParameter parameter = typesFactory.createJvmFormalParameter();\n\t\t\t\tparameter.setName(parameter2.getName());\n\t\t\t\tparameter.setParameterType(EcoreUtil2.cloneIfContained(commonType));\n\t\t\t\tresult.getParameters().add(parameter);\n\t\t\t}\n\t\t}\n\t\tfor (JvmOperation jvmOperation : operations) {\n\t\t\tIterable<XtendFunction> xtendFunction = associator.getAssociatedElements(jvmOperation, XtendFunction.class);\n\t\t\tfor (XtendFunction func : xtendFunction) {\n\t\t\t\tassociator.associate(func, result);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}","id":10615,"modified_method":"/**\n\t * @return a {@link JvmOperation} with common denominator argument types of all given operations\n\t */\n\tprotected JvmOperation deriveGenericDispatchOperationSignature(Collection<JvmOperation> operations) {\n\t\tif (operations.isEmpty())\n\t\t\treturn null;\n\t\tJvmOperation result = null;\n\t\tfinal Iterator<JvmOperation> iterator = operations.iterator();\n\t\tJvmOperation first = iterator.next();\n\t\tif (operations.size() == 1) {\n\t\t\tresult = EcoreUtil2.clone(first);\n\t\t} else {\n\t\t\tresult = typesFactory.createJvmOperation();\n\t\t\tfor (int i = 0; i < first.getParameters().size(); i++) {\n\t\t\t\tJvmFormalParameter parameter2 = first.getParameters().get(i);\n\t\t\t\tfinal int index = i;\n\t\t\t\tJvmTypeReference commonType = commonType(operations, new Function<JvmOperation, JvmTypeReference>() {\n\t\t\t\t\tpublic JvmTypeReference apply(JvmOperation from) {\n\t\t\t\t\t\treturn from.getParameters().get(index).getParameterType();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tJvmFormalParameter parameter = typesFactory.createJvmFormalParameter();\n\t\t\t\tparameter.setName(parameter2.getName());\n\t\t\t\tparameter.setParameterType(EcoreUtil2.cloneIfContained(commonType));\n\t\t\t\tresult.getParameters().add(parameter);\n\t\t\t}\n\t\t}\n\t\tfor (JvmOperation jvmOperation : operations) {\n\t\t\tIterable<XtendFunction> xtendFunctions = associator.getAssociatedElements(jvmOperation, XtendFunction.class);\n\t\t\tfor (XtendFunction func : xtendFunctions) {\n\t\t\t\tassociator.associate(func, result);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}","commit_id":"7ac781e661f279aab2e5f09cac6fb313234a0116","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic Object image(IEObjectDescription element) {\n\t\tEClass eClass = element.getEClass();\n\t\tif (eClass == XTEND_FILE)\n\t\t\treturn images.forFile();\n\t\telse if (eClass == XTEND_IMPORT)\n\t\t\treturn images.forImport();\n\t\telse if (eClass == XTEND_CLASS || eClass == TypesPackage.Literals.JVM_GENERIC_TYPE)\n\t\t\treturn images.forClass(0);\n\t\telse if (eClass == XTEND_FUNCTION || eClass == TypesPackage.Literals.JVM_OPERATION)\n\t\t\treturn images.forFunction(0);\n\t\telse\n\t\t\treturn super.image(element);\n\t}","id":10616,"modified_method":"@Override\n\tpublic Object image(IEObjectDescription element) {\n\t\tEClass eClass = element.getEClass();\n\t\tif (eClass == XTEND_FILE)\n\t\t\treturn images.forFile();\n\t\telse if (eClass == XTEND_IMPORT)\n\t\t\treturn images.forImport();\n\t\telse if (eClass == XTEND_CLASS || eClass == TypesPackage.Literals.JVM_GENERIC_TYPE)\n\t\t\treturn images.forClass(0);\n\t\telse if (eClass == XTEND_FUNCTION)\n\t\t\treturn images.forFunction(0);\n\t\telse if (eClass == TypesPackage.Literals.JVM_OPERATION)\n\t\t\treturn (descriptionFlags.isDispatcherOperation(element)) ? images.forDispatcherFunction(0) : images\n\t\t\t\t\t.forFunction(0);\n\t\telse\n\t\t\treturn super.image(element);\n\t}","commit_id":"7ac781e661f279aab2e5f09cac6fb313234a0116","url":"https://github.com/eclipse/xtext"},{"original_method":"public JvmOperation getDirectlyInferredOperation(final XtendFunction xtendFunction) {\n\t\tfinal String xtendName = xtendFunction.getSimpleName();\n\t\treturn (JvmOperation) find(getAssociatedElements(xtendFunction), new Predicate<EObject>() {\n\t\t\tpublic boolean apply(EObject input) {\n\t\t\t\treturn input instanceof JvmOperation\n\t\t\t\t\t\t&& !(xtendName.startsWith(\"_\") ^ ((JvmOperation) input).getSimpleName().startsWith(\"_\"));\n\t\t\t}\n\t\t});\n\t}","id":10617,"modified_method":"public JvmOperation getDirectlyInferredOperation(final XtendFunction xtendFunction) {\n\t\tfor(EObject element: getAssociatedElements(xtendFunction)) {\n\t\t\tif(element instanceof JvmOperation\n\t\t\t\t\t\t&& getAssociatedElements(element).size() == 1) \n\t\t\t\treturn (JvmOperation) element;\n\t\t}\n\t\treturn null;\n\t}","commit_id":"7ac781e661f279aab2e5f09cac6fb313234a0116","url":"https://github.com/eclipse/xtext"},{"original_method":"public Iterable<EObject> getInferredJvmElements(EObject xtendElement) {\n\t\treturn filter(getAssociatedElements(xtendElement), new Predicate<EObject>() {\n\t\t\tpublic boolean apply(EObject input) {\n\t\t\t\treturn input.eClass().getEPackage() == TypesPackage.eINSTANCE;\n\t\t\t}\n\t\t});\n\t}","id":10618,"modified_method":"public Set<EObject> getInferredJvmElements(EObject xtendElement) {\n\t\treturn filter(getAssociatedElements(xtendElement), new Predicate<EObject>() {\n\t\t\tpublic boolean apply(EObject input) {\n\t\t\t\treturn input.eClass().getEPackage() == TypesPackage.eINSTANCE;\n\t\t\t}\n\t\t});\n\t}","commit_id":"7ac781e661f279aab2e5f09cac6fb313234a0116","url":"https://github.com/eclipse/xtext"},{"original_method":"public <T> Iterable<T> getAssociatedElements(EObject inferredJvmOrXtendElement, Class<T> type) {\n\t\treturn filter(getAssociatedElements(inferredJvmOrXtendElement), type);\n\t}","id":10619,"modified_method":"@SuppressWarnings(\"unchecked\")\n\tpublic <T> Set<T> getAssociatedElements(EObject inferredJvmOrXtendElement, Class<T> type) {\n\t\treturn (Set<T>) Sets.filter(getAssociatedElements(inferredJvmOrXtendElement), Predicates.instanceOf(type));\n\t}","commit_id":"7ac781e661f279aab2e5f09cac6fb313234a0116","url":"https://github.com/eclipse/xtext"},{"original_method":"public Iterable<EObject> getXtendElements(EObject inferredJvmElement) {\n\t\treturn filter(getAssociatedElements(inferredJvmElement), new Predicate<EObject>() {\n\t\t\tpublic boolean apply(EObject input) {\n\t\t\t\treturn input.eClass().getEPackage() == Xtend2Package.eINSTANCE;\n\t\t\t}\n\t\t});\n\t}","id":10620,"modified_method":"public Set<EObject> getXtendElements(EObject inferredJvmElement) {\n\t\treturn filter(getAssociatedElements(inferredJvmElement), new Predicate<EObject>() {\n\t\t\tpublic boolean apply(EObject input) {\n\t\t\t\treturn input.eClass().getEPackage() == Xtend2Package.eINSTANCE;\n\t\t\t}\n\t\t});\n\t}","commit_id":"7ac781e661f279aab2e5f09cac6fb313234a0116","url":"https://github.com/eclipse/xtext"},{"original_method":"public String text(XtendFunction element) {\n\t\treturn text(xtend2jvmAssociations.getDirectlyInferredOperation(element));\n\t}","id":10621,"modified_method":"public String text(XtendFunction element) {\n\t\treturn signature(element.getSimpleName(), xtend2jvmAssociations.getDirectlyInferredOperation(element));\n\t}","commit_id":"7ac781e661f279aab2e5f09cac6fb313234a0116","url":"https://github.com/eclipse/xtext"},{"original_method":"public Image image(XtendFunction element) {\n\t\treturn dispatchUtil.isDispatcherFunction(element) ? images.forDispatcherFunction(0) : images.forFunction(0);\n\t}","id":10622,"modified_method":"public Image image(XtendFunction element) {\n\t\treturn images.forFunction(0);\n\t}","commit_id":"7ac781e661f279aab2e5f09cac6fb313234a0116","url":"https://github.com/eclipse/xtext"},{"original_method":"public String text(JvmOperation element) {\n\t\tJvmTypeReference returnType = typeProvider.getTypeForIdentifiable(element);\n\t\treturn element.getSimpleName() + uiStrings.parameters(element) + \" : \"\n\t\t\t\t+ ((returnType != null) ? returnType.getSimpleName() : \"void\");\n\t}","id":10623,"modified_method":"public String text(JvmOperation element) {\n\t\treturn signature(element.getSimpleName(), element);\n\t}","commit_id":"7ac781e661f279aab2e5f09cac6fb313234a0116","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void _createChildren(DocumentRootNode parentNode, XtendFile xtendFile) {\n\t\tif (xtendFile.getPackage() != null)\n\t\t\tcreateEStructuralFeatureNode(parentNode, xtendFile, Xtend2Package.Literals.XTEND_FILE__PACKAGE,\n\t\t\t\t\timages.forPackage(), xtendFile.getPackage(), true);\n\t\tcreateEStructuralFeatureNode(parentNode, xtendFile, Xtend2Package.Literals.XTEND_FILE__IMPORTS,\n\t\t\t\timages.forImportContainer(), \"import declarations\", false);\n\t\tif (xtendFile.getXtendClass() != null)\n\t\t\tcreateEObjectNode(parentNode, xtendFile.getXtendClass());\n\t}","id":10624,"modified_method":"protected void _createChildren(DocumentRootNode parentNode, XtendFile xtendFile) {\n\t\tif (xtendFile.getPackage() != null)\n\t\t\tcreateEStructuralFeatureNode(parentNode, xtendFile, Xtend2Package.Literals.XTEND_FILE__PACKAGE,\n\t\t\t\t\timages.forPackage(), xtendFile.getPackage(), true);\n\t\tif (!xtendFile.getImports().isEmpty())\n\t\t\tcreateEStructuralFeatureNode(parentNode, xtendFile, Xtend2Package.Literals.XTEND_FILE__IMPORTS,\n\t\t\t\t\timages.forImportContainer(), \"import declarations\", false);\n\t\tif (xtendFile.getXtendClass() != null)\n\t\t\tcreateEObjectNode(parentNode, xtendFile.getXtendClass());\n\t}","commit_id":"7ac781e661f279aab2e5f09cac6fb313234a0116","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void _createChildren(IOutlineNode parentNode, JvmOperation inferredOperation) {\n\t\tIterable<XtendFunction> xtendFunctions = associations.getAssociatedElements(inferredOperation,\n\t\t\t\tXtendFunction.class);\n\t\tfor (XtendFunction xtendFunction : xtendFunctions) {\n\t\t\tif (dispatchUtil.isDispatchFunction(xtendFunction))\n\t\t\t\tcreateEObjectNode(parentNode, xtendFunction);\n\t\t}\n\t}","id":10625,"modified_method":"protected void _createChildren(IOutlineNode parentNode, JvmOperation inferredOperation) {\n\t\tList<XtendFunction> xtendFunctions = newArrayList(associations.getAssociatedElements(inferredOperation,\n\t\t\t\tXtendFunction.class));\n\t\tsort(xtendFunctions, new Comparator<XtendFunction>() {\n\t\t\tpublic int compare(XtendFunction arg0, XtendFunction arg1) {\n\t\t\t\treturn index(arg0) - index(arg1);\n\t\t\t}\n\t\t});\n\t\tfor (XtendFunction xtendFunction : xtendFunctions) {\n\t\t\tif (xtendFunction.isDispatch())\n\t\t\t\tcreateEObjectNode(parentNode, xtendFunction);\n\t\t}\n\t}","commit_id":"7ac781e661f279aab2e5f09cac6fb313234a0116","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void _createChildren(IOutlineNode parentNode, XtendClass xtendClass) {\n\t\tJvmGenericType inferredType = associations.getInferredType(xtendClass);\n\t\tif (inferredType != null) {\n\t\t\tSet<XtendFunction> dispatchFunctions = newHashSet();\n\t\t\tfor (JvmOperation inferredOperation : inferredType.getDeclaredOperations()) {\n\t\t\t\tif (dispatchUtil.isDispatcherFunction(inferredOperation)) {\n\t\t\t\t\tcreateEObjectNode(parentNode, inferredOperation);\n\t\t\t\t\tdispatchFunctions.addAll(newArrayList(associations.getAssociatedElements(inferredOperation,\n\t\t\t\t\t\t\tXtendFunction.class)));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (XtendMember member : xtendClass.getMembers()) {\n\t\t\t\tif (!dispatchFunctions.contains(member))\n\t\t\t\t\tcreateEObjectNode(parentNode, member);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (XtendMember member : xtendClass.getMembers())\n\t\t\t\tcreateEObjectNode(parentNode, member);\n\t\t}\n\t}","id":10626,"modified_method":"protected void _createChildren(IOutlineNode parentNode, XtendClass xtendClass) {\n\t\tJvmGenericType inferredType = associations.getInferredType(xtendClass);\n\t\tif (inferredType != null) {\n\t\t\tSet<XtendFunction> dispatchFunctions = newHashSet();\n\t\t\tfor (XtendMember member : xtendClass.getMembers()) {\n\t\t\t\tif (!dispatchFunctions.contains(member) && member instanceof XtendFunction\n\t\t\t\t\t\t&& ((XtendFunction) member).isDispatch()) {\n\t\t\t\t\tfor (JvmOperation inferredOperation : associations\n\t\t\t\t\t\t\t.getAssociatedElements(member, JvmOperation.class)) {\n\t\t\t\t\t\tif (dispatchUtil.isDispatcherFunction(inferredOperation)) {\n\t\t\t\t\t\t\tcreateEObjectNode(parentNode, inferredOperation);\n\t\t\t\t\t\t\tdispatchFunctions.addAll(newArrayList(associations.getAssociatedElements(inferredOperation,\n\t\t\t\t\t\t\t\t\tXtendFunction.class)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (XtendMember member : xtendClass.getMembers()) {\n\t\t\t\tif (!dispatchFunctions.contains(member))\n\t\t\t\t\tcreateEObjectNode(parentNode, member);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (XtendMember member : xtendClass.getMembers())\n\t\t\t\tcreateEObjectNode(parentNode, member);\n\t\t}\n\t}","commit_id":"7ac781e661f279aab2e5f09cac6fb313234a0116","url":"https://github.com/eclipse/xtext"},{"original_method":"public boolean reject(IEObjectDescription element) {\n\t\tif (fileExtensionProvider.isValid(element.getEObjectURI().fileExtension())) {\n\t\t\treturn element.getEClass() == TypesPackage.Literals.JVM_GENERIC_TYPE\n\t\t\t\t\t|| TypesPackage.Literals.JVM_MEMBER.isSuperTypeOf(element.getEClass());\n\t\t}\n\t\treturn false;\n\t}","id":10627,"modified_method":"public boolean reject(IEObjectDescription element) {\n\t\tif (fileExtensionProvider.isValid(element.getEObjectURI().fileExtension())) {\n\t\t\treturn element.getEClass() == TypesPackage.Literals.JVM_GENERIC_TYPE\n\t\t\t\t|| (TypesPackage.Literals.JVM_MEMBER.isSuperTypeOf(element.getEClass()) && ! !descriptionFlags.isDispatcherOperation(element));\n\t\t}\n\t\treturn false;\n\t}","commit_id":"7ac781e661f279aab2e5f09cac6fb313234a0116","url":"https://github.com/eclipse/xtext"},{"original_method":"public Multimap<Pair<String, Integer>, JvmOperation> getDispatchMethods(JvmGenericType type) {\n\t\tMultimap<Pair<String, Integer>, JvmOperation> result = HashMultimap.create();\n\t\tcollectDispatchMethods(type, result);\n\t\treturn result;\n\t}","id":10628,"modified_method":"public Multimap<Pair<String, Integer>, JvmOperation> getDispatchMethods(JvmGenericType type) {\n\t\tMultimap<Pair<String, Integer>, JvmOperation> result = LinkedHashMultimap.create();\n\t\tcollectDispatchMethods(type, result);\n\t\treturn result;\n\t}","commit_id":"cb719184738a060f63a14be6480de25b88439339","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n\t * @return a {@link JvmOperation} with common denominator argument types of all given operations\n\t */\n\tprotected JvmOperation deriveGenericDispatchOperationSignature(Collection<JvmOperation> operations) {\n\t\tif (operations.isEmpty())\n\t\t\treturn null;\n\t\tJvmOperation result = null;\n\t\tfinal Iterator<JvmOperation> iterator = operations.iterator();\n\t\tJvmOperation first = iterator.next();\n\t\tif (operations.size() == 1) {\n\t\t\tresult = EcoreUtil2.clone(first);\n\t\t} else {\n\t\t\tresult = typesFactory.createJvmOperation();\n\t\t\tfor (int i = 0; i < first.getParameters().size(); i++) {\n\t\t\t\tJvmFormalParameter parameter2 = first.getParameters().get(i);\n\t\t\t\tfinal int index = i;\n\t\t\t\tJvmTypeReference commonType = commonType(operations, new Function<JvmOperation, JvmTypeReference>() {\n\t\t\t\t\tpublic JvmTypeReference apply(JvmOperation from) {\n\t\t\t\t\t\treturn from.getParameters().get(index).getParameterType();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tJvmFormalParameter parameter = typesFactory.createJvmFormalParameter();\n\t\t\t\tparameter.setName(parameter2.getName());\n\t\t\t\tparameter.setParameterType(EcoreUtil2.cloneIfContained(commonType));\n\t\t\t\tresult.getParameters().add(parameter);\n\t\t\t}\n\t\t}\n\t\tfor (JvmOperation jvmOperation : operations) {\n\t\t\tIterable<XtendFunction> xtendFunction = associator.getAssociatedElements(jvmOperation, XtendFunction.class);\n\t\t\tfor (XtendFunction func : xtendFunction) {\n\t\t\t\tassociator.associate(func, result);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}","id":10629,"modified_method":"/**\n\t * @return a {@link JvmOperation} with common denominator argument types of all given operations\n\t */\n\tprotected JvmOperation deriveGenericDispatchOperationSignature(Collection<JvmOperation> operations) {\n\t\tif (operations.isEmpty())\n\t\t\treturn null;\n\t\tJvmOperation result = null;\n\t\tfinal Iterator<JvmOperation> iterator = operations.iterator();\n\t\tJvmOperation first = iterator.next();\n\t\tif (operations.size() == 1) {\n\t\t\tresult = EcoreUtil2.clone(first);\n\t\t} else {\n\t\t\tresult = typesFactory.createJvmOperation();\n\t\t\tfor (int i = 0; i < first.getParameters().size(); i++) {\n\t\t\t\tJvmFormalParameter parameter2 = first.getParameters().get(i);\n\t\t\t\tfinal int index = i;\n\t\t\t\tJvmTypeReference commonType = commonType(operations, new Function<JvmOperation, JvmTypeReference>() {\n\t\t\t\t\tpublic JvmTypeReference apply(JvmOperation from) {\n\t\t\t\t\t\treturn from.getParameters().get(index).getParameterType();\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tJvmFormalParameter parameter = typesFactory.createJvmFormalParameter();\n\t\t\t\tparameter.setName(parameter2.getName());\n\t\t\t\tparameter.setParameterType(EcoreUtil2.cloneIfContained(commonType));\n\t\t\t\tresult.getParameters().add(parameter);\n\t\t\t}\n\t\t}\n\t\tfor (JvmOperation jvmOperation : operations) {\n\t\t\tIterable<XtendFunction> xtendFunctions = associator.getAssociatedElements(jvmOperation, XtendFunction.class);\n\t\t\tfor (XtendFunction func : xtendFunctions) {\n\t\t\t\tassociator.associate(func, result);\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}","commit_id":"cb719184738a060f63a14be6480de25b88439339","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic Object image(IEObjectDescription element) {\n\t\tEClass eClass = element.getEClass();\n\t\tif (eClass == XTEND_FILE)\n\t\t\treturn images.forFile();\n\t\telse if (eClass == XTEND_IMPORT)\n\t\t\treturn images.forImport();\n\t\telse if (eClass == XTEND_CLASS || eClass == TypesPackage.Literals.JVM_GENERIC_TYPE)\n\t\t\treturn images.forClass(0);\n\t\telse if (eClass == XTEND_FUNCTION || eClass == TypesPackage.Literals.JVM_OPERATION)\n\t\t\treturn images.forFunction(0);\n\t\telse\n\t\t\treturn super.image(element);\n\t}","id":10630,"modified_method":"@Override\n\tpublic Object image(IEObjectDescription element) {\n\t\tEClass eClass = element.getEClass();\n\t\tif (eClass == XTEND_FILE)\n\t\t\treturn images.forFile();\n\t\telse if (eClass == XTEND_IMPORT)\n\t\t\treturn images.forImport();\n\t\telse if (eClass == XTEND_CLASS || eClass == TypesPackage.Literals.JVM_GENERIC_TYPE)\n\t\t\treturn images.forClass(0);\n\t\telse if (eClass == XTEND_FUNCTION)\n\t\t\treturn images.forFunction(0);\n\t\telse if (eClass == TypesPackage.Literals.JVM_OPERATION)\n\t\t\treturn (descriptionFlags.isDispatcherOperation(element)) ? images.forDispatcherFunction(0) : images\n\t\t\t\t\t.forFunction(0);\n\t\telse\n\t\t\treturn super.image(element);\n\t}","commit_id":"cb719184738a060f63a14be6480de25b88439339","url":"https://github.com/eclipse/xtext"},{"original_method":"public JvmOperation getDirectlyInferredOperation(final XtendFunction xtendFunction) {\n\t\tfinal String xtendName = xtendFunction.getSimpleName();\n\t\treturn (JvmOperation) find(getAssociatedElements(xtendFunction), new Predicate<EObject>() {\n\t\t\tpublic boolean apply(EObject input) {\n\t\t\t\treturn input instanceof JvmOperation\n\t\t\t\t\t\t&& !(xtendName.startsWith(\"_\") ^ ((JvmOperation) input).getSimpleName().startsWith(\"_\"));\n\t\t\t}\n\t\t});\n\t}","id":10631,"modified_method":"public JvmOperation getDirectlyInferredOperation(final XtendFunction xtendFunction) {\n\t\tfor(EObject element: getAssociatedElements(xtendFunction)) {\n\t\t\tif(element instanceof JvmOperation\n\t\t\t\t\t\t&& getAssociatedElements(element).size() == 1) \n\t\t\t\treturn (JvmOperation) element;\n\t\t}\n\t\treturn null;\n\t}","commit_id":"cb719184738a060f63a14be6480de25b88439339","url":"https://github.com/eclipse/xtext"},{"original_method":"public Iterable<EObject> getXtendElements(EObject inferredJvmElement) {\n\t\treturn filter(getAssociatedElements(inferredJvmElement), new Predicate<EObject>() {\n\t\t\tpublic boolean apply(EObject input) {\n\t\t\t\treturn input.eClass().getEPackage() == Xtend2Package.eINSTANCE;\n\t\t\t}\n\t\t});\n\t}","id":10632,"modified_method":"public Set<EObject> getXtendElements(EObject inferredJvmElement) {\n\t\treturn filter(getAssociatedElements(inferredJvmElement), new Predicate<EObject>() {\n\t\t\tpublic boolean apply(EObject input) {\n\t\t\t\treturn input.eClass().getEPackage() == Xtend2Package.eINSTANCE;\n\t\t\t}\n\t\t});\n\t}","commit_id":"cb719184738a060f63a14be6480de25b88439339","url":"https://github.com/eclipse/xtext"},{"original_method":"public <T> Iterable<T> getAssociatedElements(EObject inferredJvmOrXtendElement, Class<T> type) {\n\t\treturn filter(getAssociatedElements(inferredJvmOrXtendElement), type);\n\t}","id":10633,"modified_method":"@SuppressWarnings(\"unchecked\")\n\tpublic <T> Set<T> getAssociatedElements(EObject inferredJvmOrXtendElement, Class<T> type) {\n\t\treturn (Set<T>) Sets.filter(getAssociatedElements(inferredJvmOrXtendElement), Predicates.instanceOf(type));\n\t}","commit_id":"cb719184738a060f63a14be6480de25b88439339","url":"https://github.com/eclipse/xtext"},{"original_method":"public Iterable<EObject> getInferredJvmElements(EObject xtendElement) {\n\t\treturn filter(getAssociatedElements(xtendElement), new Predicate<EObject>() {\n\t\t\tpublic boolean apply(EObject input) {\n\t\t\t\treturn input.eClass().getEPackage() == TypesPackage.eINSTANCE;\n\t\t\t}\n\t\t});\n\t}","id":10634,"modified_method":"public Set<EObject> getInferredJvmElements(EObject xtendElement) {\n\t\treturn filter(getAssociatedElements(xtendElement), new Predicate<EObject>() {\n\t\t\tpublic boolean apply(EObject input) {\n\t\t\t\treturn input.eClass().getEPackage() == TypesPackage.eINSTANCE;\n\t\t\t}\n\t\t});\n\t}","commit_id":"cb719184738a060f63a14be6480de25b88439339","url":"https://github.com/eclipse/xtext"},{"original_method":"public String text(XtendFunction element) {\n\t\treturn text(xtend2jvmAssociations.getDirectlyInferredOperation(element));\n\t}","id":10635,"modified_method":"public String text(XtendFunction element) {\n\t\treturn signature(element.getSimpleName(), xtend2jvmAssociations.getDirectlyInferredOperation(element));\n\t}","commit_id":"cb719184738a060f63a14be6480de25b88439339","url":"https://github.com/eclipse/xtext"},{"original_method":"public Image image(XtendFunction element) {\n\t\treturn dispatchUtil.isDispatcherFunction(element) ? images.forDispatcherFunction(0) : images.forFunction(0);\n\t}","id":10636,"modified_method":"public Image image(XtendFunction element) {\n\t\treturn images.forFunction(0);\n\t}","commit_id":"cb719184738a060f63a14be6480de25b88439339","url":"https://github.com/eclipse/xtext"},{"original_method":"public String text(JvmOperation element) {\n\t\tJvmTypeReference returnType = typeProvider.getTypeForIdentifiable(element);\n\t\treturn element.getSimpleName() + uiStrings.parameters(element) + \" : \"\n\t\t\t\t+ ((returnType != null) ? returnType.getSimpleName() : \"void\");\n\t}","id":10637,"modified_method":"public String text(JvmOperation element) {\n\t\treturn signature(element.getSimpleName(), element);\n\t}","commit_id":"cb719184738a060f63a14be6480de25b88439339","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void _createChildren(DocumentRootNode parentNode, XtendFile xtendFile) {\n\t\tif (xtendFile.getPackage() != null)\n\t\t\tcreateEStructuralFeatureNode(parentNode, xtendFile, Xtend2Package.Literals.XTEND_FILE__PACKAGE,\n\t\t\t\t\timages.forPackage(), xtendFile.getPackage(), true);\n\t\tcreateEStructuralFeatureNode(parentNode, xtendFile, Xtend2Package.Literals.XTEND_FILE__IMPORTS,\n\t\t\t\timages.forImportContainer(), \"import declarations\", false);\n\t\tif (xtendFile.getXtendClass() != null)\n\t\t\tcreateEObjectNode(parentNode, xtendFile.getXtendClass());\n\t}","id":10638,"modified_method":"protected void _createChildren(DocumentRootNode parentNode, XtendFile xtendFile) {\n\t\tif (xtendFile.getPackage() != null)\n\t\t\tcreateEStructuralFeatureNode(parentNode, xtendFile, Xtend2Package.Literals.XTEND_FILE__PACKAGE,\n\t\t\t\t\timages.forPackage(), xtendFile.getPackage(), true);\n\t\tif (!xtendFile.getImports().isEmpty())\n\t\t\tcreateEStructuralFeatureNode(parentNode, xtendFile, Xtend2Package.Literals.XTEND_FILE__IMPORTS,\n\t\t\t\t\timages.forImportContainer(), \"import declarations\", false);\n\t\tif (xtendFile.getXtendClass() != null)\n\t\t\tcreateEObjectNode(parentNode, xtendFile.getXtendClass());\n\t}","commit_id":"cb719184738a060f63a14be6480de25b88439339","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void _createChildren(IOutlineNode parentNode, XtendClass xtendClass) {\n\t\tJvmGenericType inferredType = associations.getInferredType(xtendClass);\n\t\tif (inferredType != null) {\n\t\t\tSet<XtendFunction> dispatchFunctions = newHashSet();\n\t\t\tfor (JvmOperation inferredOperation : inferredType.getDeclaredOperations()) {\n\t\t\t\tif (dispatchUtil.isDispatcherFunction(inferredOperation)) {\n\t\t\t\t\tcreateEObjectNode(parentNode, inferredOperation);\n\t\t\t\t\tdispatchFunctions.addAll(newArrayList(associations.getAssociatedElements(inferredOperation,\n\t\t\t\t\t\t\tXtendFunction.class)));\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (XtendMember member : xtendClass.getMembers()) {\n\t\t\t\tif (!dispatchFunctions.contains(member))\n\t\t\t\t\tcreateEObjectNode(parentNode, member);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (XtendMember member : xtendClass.getMembers())\n\t\t\t\tcreateEObjectNode(parentNode, member);\n\t\t}\n\t}","id":10639,"modified_method":"protected void _createChildren(IOutlineNode parentNode, XtendClass xtendClass) {\n\t\tJvmGenericType inferredType = associations.getInferredType(xtendClass);\n\t\tif (inferredType != null) {\n\t\t\tSet<XtendFunction> dispatchFunctions = newHashSet();\n\t\t\tfor (XtendMember member : xtendClass.getMembers()) {\n\t\t\t\tif (!dispatchFunctions.contains(member) && member instanceof XtendFunction\n\t\t\t\t\t\t&& ((XtendFunction) member).isDispatch()) {\n\t\t\t\t\tfor (JvmOperation inferredOperation : associations\n\t\t\t\t\t\t\t.getAssociatedElements(member, JvmOperation.class)) {\n\t\t\t\t\t\tif (dispatchUtil.isDispatcherFunction(inferredOperation)) {\n\t\t\t\t\t\t\tcreateEObjectNode(parentNode, inferredOperation);\n\t\t\t\t\t\t\tdispatchFunctions.addAll(newArrayList(associations.getAssociatedElements(inferredOperation,\n\t\t\t\t\t\t\t\t\tXtendFunction.class)));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tfor (XtendMember member : xtendClass.getMembers()) {\n\t\t\t\tif (!dispatchFunctions.contains(member))\n\t\t\t\t\tcreateEObjectNode(parentNode, member);\n\t\t\t}\n\t\t} else {\n\t\t\tfor (XtendMember member : xtendClass.getMembers())\n\t\t\t\tcreateEObjectNode(parentNode, member);\n\t\t}\n\t}","commit_id":"cb719184738a060f63a14be6480de25b88439339","url":"https://github.com/eclipse/xtext"},{"original_method":"protected void _createChildren(IOutlineNode parentNode, JvmOperation inferredOperation) {\n\t\tIterable<XtendFunction> xtendFunctions = associations.getAssociatedElements(inferredOperation,\n\t\t\t\tXtendFunction.class);\n\t\tfor (XtendFunction xtendFunction : xtendFunctions) {\n\t\t\tif (dispatchUtil.isDispatchFunction(xtendFunction))\n\t\t\t\tcreateEObjectNode(parentNode, xtendFunction);\n\t\t}\n\t}","id":10640,"modified_method":"protected void _createChildren(IOutlineNode parentNode, JvmOperation inferredOperation) {\n\t\tList<XtendFunction> xtendFunctions = newArrayList(associations.getAssociatedElements(inferredOperation,\n\t\t\t\tXtendFunction.class));\n\t\tsort(xtendFunctions, new Comparator<XtendFunction>() {\n\t\t\tpublic int compare(XtendFunction arg0, XtendFunction arg1) {\n\t\t\t\treturn index(arg0) - index(arg1);\n\t\t\t}\n\t\t});\n\t\tfor (XtendFunction xtendFunction : xtendFunctions) {\n\t\t\tif (xtendFunction.isDispatch())\n\t\t\t\tcreateEObjectNode(parentNode, xtendFunction);\n\t\t}\n\t}","commit_id":"cb719184738a060f63a14be6480de25b88439339","url":"https://github.com/eclipse/xtext"},{"original_method":"public boolean reject(IEObjectDescription element) {\n\t\tif (fileExtensionProvider.isValid(element.getEObjectURI().fileExtension())) {\n\t\t\treturn element.getEClass() == TypesPackage.Literals.JVM_GENERIC_TYPE\n\t\t\t\t\t|| TypesPackage.Literals.JVM_MEMBER.isSuperTypeOf(element.getEClass());\n\t\t}\n\t\treturn false;\n\t}","id":10641,"modified_method":"public boolean reject(IEObjectDescription element) {\n\t\tif (fileExtensionProvider.isValid(element.getEObjectURI().fileExtension())) {\n\t\t\treturn element.getEClass() == TypesPackage.Literals.JVM_GENERIC_TYPE\n\t\t\t\t|| (TypesPackage.Literals.JVM_MEMBER.isSuperTypeOf(element.getEClass()) && ! !descriptionFlags.isDispatcherOperation(element));\n\t\t}\n\t\treturn false;\n\t}","commit_id":"cb719184738a060f63a14be6480de25b88439339","url":"https://github.com/eclipse/xtext"},{"original_method":"public XtendFunction getXtendFunction(final JvmOperation inferredOperation) {\n\t\treturn (XtendFunction) find(getAssociatedElements(inferredOperation), new Predicate<EObject>() {\n\t\t\tpublic boolean apply(EObject input) {\n\t\t\t\treturn input instanceof XtendFunction;\n\t\t\t}\n\t\t});\n\t}","id":10642,"modified_method":"public XtendFunction getXtendFunction(final JvmOperation inferredOperation) {\n\t\tfor (EObject element : getAssociatedElements(inferredOperation))\n\t\t\tif (element instanceof XtendFunction)\n\t\t\t\treturn (XtendFunction) element;\n\t\treturn null;\n\t}","commit_id":"fc33b6bec4a5085c5de07d11f138282dc4df5aee","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n    protected void setUp() throws Exception {\n        deleteDirectory(\"target/multidir\");\n        super.setUp();\n        template.sendBodyAndHeader(fileUrl, \"Bye World\", Exchange.FILE_NAME, \"bye.txt\");\n        template.sendBodyAndHeader(fileUrl, \"Hello World\", Exchange.FILE_NAME, \"sub/hello.txt\");\n        template.sendBodyAndHeader(fileUrl, \"Godday World\", Exchange.FILE_NAME, \"sub/sub2/godday.txt\");\n    }","id":10643,"modified_method":"@Override\n    protected void setUp() throws Exception {\n        deleteDirectory(\"target/multidir\");\n        super.setUp();\n        template.sendBodyAndHeader(fileUrl, \"Bye World\", Exchange.FILE_NAME, \"bye.txt\");\n        template.sendBodyAndHeader(fileUrl, \"Hello World\", Exchange.FILE_NAME, \"sub/hello.txt\");\n        template.sendBodyAndHeader(fileUrl, \"Goodday World\", Exchange.FILE_NAME, \"sub/sub2/goodday.txt\");\n    }","commit_id":"bf15d11874f3fdc74e5b9120c58930ab5803c37f","url":"https://github.com/apache/camel"},{"original_method":"public void testMultiDir() throws Exception {\n        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Bye World\", \"Hello World\", \"Godday World\");\n\n        mock.expectedFileExists(\"target/multidir/.done/bye.txt.old\");\n        mock.expectedFileExists(\"target/multidir/.done/sub/hello.txt.old\");\n        mock.expectedFileExists(\"target/multidir/.done/sub/sub2/godday.txt.old\");\n\n        assertMockEndpointsSatisfied();\n\n    }","id":10644,"modified_method":"public void testMultiDir() throws Exception {\n        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceivedInAnyOrder(\"Bye World\", \"Hello World\", \"Goodday World\");\n\n        mock.expectedFileExists(\"target/multidir/.done/bye.txt.old\");\n        mock.expectedFileExists(\"target/multidir/.done/sub/hello.txt.old\");\n        mock.expectedFileExists(\"target/multidir/.done/sub/sub2/goodday.txt.old\");\n\n        assertMockEndpointsSatisfied();\n    }","commit_id":"bf15d11874f3fdc74e5b9120c58930ab5803c37f","url":"https://github.com/apache/camel"},{"original_method":"public void xxxTestPollEnrich() throws Exception {\n        getMockEndpoint(\"mock:start\").expectedBodiesReceived(\"Start\");\n\n        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceived(\"Big file\");\n\n        mock.expectedFileExists(\"target/enrich/.done/AAA.fin\");\n        mock.expectedFileExists(\"target/enrichdata/.done/AAA.dat\");\n\n        template.sendBodyAndHeader(\"file://target/enrichdata\", \"Big file\", Exchange.FILE_NAME, \"AAA.dat\");\n        template.sendBodyAndHeader(\"file://target/enrich\", \"Start\", Exchange.FILE_NAME, \"AAA.fin\");\n\n        assertMockEndpointsSatisfied();\n    }","id":10645,"modified_method":"public void testPollEnrich() throws Exception {\n        getMockEndpoint(\"mock:start\").expectedBodiesReceived(\"Start\");\n\n        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceived(\"Big file\");\n\n        mock.expectedFileExists(\"target/enrich/.done/AAA.fin\", \"Start\");\n        mock.expectedFileExists(\"target/enrichdata/.done/AAA.dat\", \"Big file\");\n\n        template.sendBodyAndHeader(\"file://target/enrichdata\", \"Big file\", Exchange.FILE_NAME, \"AAA.dat\");\n        template.sendBodyAndHeader(\"file://target/enrich\", \"Start\", Exchange.FILE_NAME, \"AAA.fin\");\n\n        assertMockEndpointsSatisfied();\n    }","commit_id":"bf15d11874f3fdc74e5b9120c58930ab5803c37f","url":"https://github.com/apache/camel"},{"original_method":"/**\n     * Creates a new GenericFile<File> based on the given file.\n     *\n     * @param endpointPath the starting directory the endpoint was configured with\n     * @param file the source file\n     * @return wrapped as a GenericFile\n     */\n    public static GenericFile<File> asGenericFile(String endpointPath, File file) {\n        GenericFile<File> answer = new GenericFile<File>();\n        // use file specific binding\n        answer.setBinding(new FileBinding());\n\n        answer.setEndpointPath(endpointPath);\n        answer.setFile(file);\n        answer.setFileName(file.getName());\n        answer.setFileNameOnly(file.getName());\n        answer.setFileLength(file.length());\n        // must use FileUtil.isAbsolute to have consistent check for whether the file is\n        // absolute or not. As windows do not consider \\ paths as absolute where as all\n        // other OS platforms will consider \\ as absolute. The logic in Camel mandates\n        // that we align this for all OS. That is why we must use FileUtil.isAbsolute\n        // to return a consistent answer for all OS platforms.\n        answer.setAbsolute(FileUtil.isAbsolute(file));\n        answer.setAbsoluteFilePath(file.getAbsolutePath());\n        answer.setLastModified(file.lastModified());\n        if (answer.isAbsolute()) {\n            // use absolute path as relative\n            answer.setRelativeFilePath(file.getAbsolutePath());\n        } else {\n            File path;\n            String endpointNormalized = FileUtil.normalizePath(endpointPath);\n            if (file.getPath().startsWith(endpointNormalized)) {\n                // skip duplicate endpoint path\n                path = new File(ObjectHelper.after(file.getPath(), endpointNormalized + File.separator));\n            } else {\n                path = new File(file.getPath());\n            }\n\n            if (path.getParent() != null) {\n                answer.setRelativeFilePath(path.getParent() + File.separator + file.getName());\n            } else {\n                answer.setRelativeFilePath(path.getName());\n            }\n        }\n\n        // use file as body as we have converters if needed as stream\n        answer.setBody(file);\n        return answer;\n    }","id":10646,"modified_method":"/**\n     * Creates a new GenericFile<File> based on the given file.\n     *\n     * @param endpointPath the starting directory the endpoint was configured with\n     * @param file the source file\n     * @return wrapped as a GenericFile\n     */\n    public static GenericFile<File> asGenericFile(String endpointPath, File file) {\n        GenericFile<File> answer = new GenericFile<File>();\n        // use file specific binding\n        answer.setBinding(new FileBinding());\n\n        answer.setEndpointPath(endpointPath);\n        answer.setFile(file);\n        answer.setFileNameOnly(file.getName());\n        answer.setFileLength(file.length());\n        // must use FileUtil.isAbsolute to have consistent check for whether the file is\n        // absolute or not. As windows do not consider \\ paths as absolute where as all\n        // other OS platforms will consider \\ as absolute. The logic in Camel mandates\n        // that we align this for all OS. That is why we must use FileUtil.isAbsolute\n        // to return a consistent answer for all OS platforms.\n        answer.setAbsolute(FileUtil.isAbsolute(file));\n        answer.setAbsoluteFilePath(file.getAbsolutePath());\n        answer.setLastModified(file.lastModified());\n        if (answer.isAbsolute()) {\n            // use absolute path as relative\n            answer.setRelativeFilePath(file.getAbsolutePath());\n        } else {\n            File path;\n            String endpointNormalized = FileUtil.normalizePath(endpointPath);\n            if (file.getPath().startsWith(endpointNormalized)) {\n                // skip duplicate endpoint path\n                path = new File(ObjectHelper.after(file.getPath(), endpointNormalized + File.separator));\n            } else {\n                path = new File(file.getPath());\n            }\n\n            if (path.getParent() != null) {\n                answer.setRelativeFilePath(path.getParent() + File.separator + file.getName());\n            } else {\n                answer.setRelativeFilePath(path.getName());\n            }\n        }\n\n        // the file name should be the relative path\n        answer.setFileName(answer.getRelativeFilePath());\n\n        // use file as body as we have converters if needed as stream\n        answer.setBody(file);\n        return answer;\n    }","commit_id":"bf15d11874f3fdc74e5b9120c58930ab5803c37f","url":"https://github.com/apache/camel"},{"original_method":"protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            public void configure() throws Exception {\n                from(\"file://\" + base + \"?move=\" + base + \"/done/${file:name}\").convertBodyTo(String.class).to(\"mock:report\");\n            }\n        };\n    }","id":10647,"modified_method":"protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            public void configure() throws Exception {\n                from(\"file://\" + base + \"?move=\" + base + \"/done/${file:onlyname}\").convertBodyTo(String.class).to(\"mock:report\");\n            }\n        };\n    }","commit_id":"bf15d11874f3fdc74e5b9120c58930ab5803c37f","url":"https://github.com/apache/camel"},{"original_method":"protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            public void configure() throws Exception {\n                from(\"file://\" + base + \"?move=../done/${file:name}\").convertBodyTo(String.class).to(\"mock:report\");\n            }\n        };\n    }","id":10648,"modified_method":"protected RouteBuilder createRouteBuilder() throws Exception {\n        return new RouteBuilder() {\n            public void configure() throws Exception {\n                from(\"file://\" + base + \"?move=../done/${file:onlyname}\").convertBodyTo(String.class).to(\"mock:report\");\n            }\n        };\n    }","commit_id":"bf15d11874f3fdc74e5b9120c58930ab5803c37f","url":"https://github.com/apache/camel"},{"original_method":"private RemoteFile<FTPFile> asRemoteFile(String absolutePath, FTPFile file) {\n        RemoteFile<FTPFile> answer = new RemoteFile<FTPFile>();\n\n        answer.setEndpointPath(endpointPath);\n        answer.setFile(file);\n        answer.setFileName(file.getName());\n        answer.setFileNameOnly(file.getName());\n        answer.setFileLength(file.getSize());\n        if (file.getTimestamp() != null) {\n            answer.setLastModified(file.getTimestamp().getTimeInMillis());\n        }\n        answer.setHostname(((RemoteFileConfiguration) endpoint.getConfiguration()).getHost());\n\n        // all ftp files is considered as relative\n        answer.setAbsolute(false);\n\n        // create a pseudo absolute name\n        String dir = FileUtil.stripTrailingSeparator(absolutePath);\n        String absoluteFileName = dir + \"/\" + file.getName();\n        answer.setAbsoluteFilePath(absoluteFileName);\n\n        // the relative filename, skip the leading endpoint configured path\n        String relativePath = ObjectHelper.after(absoluteFileName, endpointPath);\n        // skip leading /\n        relativePath = FileUtil.stripLeadingSeparator(relativePath);\n        answer.setRelativeFilePath(relativePath);\n\n        return answer;\n    }","id":10649,"modified_method":"private RemoteFile<FTPFile> asRemoteFile(String absolutePath, FTPFile file) {\n        RemoteFile<FTPFile> answer = new RemoteFile<FTPFile>();\n\n        answer.setEndpointPath(endpointPath);\n        answer.setFile(file);\n        answer.setFileNameOnly(file.getName());\n        answer.setFileLength(file.getSize());\n        if (file.getTimestamp() != null) {\n            answer.setLastModified(file.getTimestamp().getTimeInMillis());\n        }\n        answer.setHostname(((RemoteFileConfiguration) endpoint.getConfiguration()).getHost());\n\n        // all ftp files is considered as relative\n        answer.setAbsolute(false);\n\n        // create a pseudo absolute name\n        String dir = FileUtil.stripTrailingSeparator(absolutePath);\n        String absoluteFileName = dir + \"/\" + file.getName();\n        answer.setAbsoluteFilePath(absoluteFileName);\n\n        // the relative filename, skip the leading endpoint configured path\n        String relativePath = ObjectHelper.after(absoluteFileName, endpointPath);\n        // skip leading /\n        relativePath = FileUtil.stripLeadingSeparator(relativePath);\n        answer.setRelativeFilePath(relativePath);\n\n        // the file name should be the relative path\n        answer.setFileName(answer.getRelativeFilePath());\n\n        return answer;\n    }","commit_id":"bf15d11874f3fdc74e5b9120c58930ab5803c37f","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testMultiDir() throws Exception {\n        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceived(\"Bye World\", \"Hello World\", \"Goodday World\");\n\n        assertMockEndpointsSatisfied();\n\n        Exchange exchange = mock.getExchanges().get(0);\n        RemoteFile file = (RemoteFile) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE);\n        assertNotNull(file);\n        assertDirectoryEquals(\"multidir/bye.txt\", file.getAbsoluteFilePath());\n        assertDirectoryEquals(\"bye.txt\", file.getRelativeFilePath());\n        assertEquals(\"bye.txt\", file.getFileName());\n\n        exchange = mock.getExchanges().get(1);\n        file = (RemoteFile) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE);\n        assertNotNull(file);\n        assertDirectoryEquals(\"multidir/sub/hello.txt\", file.getAbsoluteFilePath());\n        assertDirectoryEquals(\"sub/hello.txt\", file.getRelativeFilePath());\n        assertEquals(\"hello.txt\", file.getFileName());\n\n        exchange = mock.getExchanges().get(2);\n        file = (RemoteFile) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE);\n        assertNotNull(file);\n        assertDirectoryEquals(\"multidir/sub/sub2/godday.txt\", file.getAbsoluteFilePath());\n        assertDirectoryEquals(\"sub/sub2/godday.txt\", file.getRelativeFilePath());\n        assertEquals(\"godday.txt\", file.getFileName());\n    }","id":10650,"modified_method":"@Test\n    public void testMultiDir() throws Exception {\n        MockEndpoint mock = getMockEndpoint(\"mock:result\");\n        mock.expectedBodiesReceived(\"Bye World\", \"Hello World\", \"Goodday World\");\n\n        assertMockEndpointsSatisfied();\n\n        Exchange exchange = mock.getExchanges().get(0);\n        RemoteFile file = (RemoteFile) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE);\n        assertNotNull(file);\n        assertDirectoryEquals(\"multidir/bye.txt\", file.getAbsoluteFilePath());\n        assertDirectoryEquals(\"bye.txt\", file.getRelativeFilePath());\n        assertEquals(\"bye.txt\", file.getFileName());\n\n        exchange = mock.getExchanges().get(1);\n        file = (RemoteFile) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE);\n        assertNotNull(file);\n        assertDirectoryEquals(\"multidir/sub/hello.txt\", file.getAbsoluteFilePath());\n        assertDirectoryEquals(\"sub/hello.txt\", file.getRelativeFilePath());\n        assertEquals(\"sub/hello.txt\", file.getFileName());\n        assertEquals(\"hello.txt\", file.getFileNameOnly());\n\n        exchange = mock.getExchanges().get(2);\n        file = (RemoteFile) exchange.getProperty(FileComponent.FILE_EXCHANGE_FILE);\n        assertNotNull(file);\n        assertDirectoryEquals(\"multidir/sub/sub2/godday.txt\", file.getAbsoluteFilePath());\n        assertDirectoryEquals(\"sub/sub2/godday.txt\", file.getRelativeFilePath());\n        assertEquals(\"sub/sub2/godday.txt\", file.getFileName());\n        assertEquals(\"godday.txt\", file.getFileNameOnly());\n    }","commit_id":"bf15d11874f3fdc74e5b9120c58930ab5803c37f","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    public void rollback(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, Exchange exchange, GenericFile<T> file) throws Exception {\n        // must invoke super\n        super.rollback(operations, endpoint, exchange, file);\n\n        // moved the failed file if specifying the moveFailed option\n        if (failureRenamer != null) {\n            GenericFile<T> newName = failureRenamer.renameFile(exchange, file);\n            renameFile(operations, file, newName);\n        }\n    }","id":10651,"modified_method":"@Override\n    public void rollback(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, Exchange exchange, GenericFile<T> file) throws Exception {\n        // must invoke super\n        super.rollback(operations, endpoint, exchange, file);\n\n        // moved the failed file if specifying the moveFailed option\n        if (failureRenamer != null) {\n            // create a copy and bind the file to the exchange to be used by the renamer to evaluate the file name\n            Exchange copy = exchange.copy();\n            file.bindToExchange(copy);\n            // must preserve message id\n            copy.getIn().setMessageId(exchange.getIn().getMessageId());\n            copy.setExchangeId(exchange.getExchangeId());\n\n            GenericFile<T> newName = failureRenamer.renameFile(copy, file);\n            renameFile(operations, file, newName);\n        }\n    }","commit_id":"bf15d11874f3fdc74e5b9120c58930ab5803c37f","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    public void commit(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, Exchange exchange, GenericFile<T> file) throws Exception {\n        // must invoke super\n        super.commit(operations, endpoint, exchange, file);\n\n        if (commitRenamer != null) {\n            GenericFile<T> newName = commitRenamer.renameFile(exchange, file);\n            renameFile(operations, file, newName);\n        }\n    }","id":10652,"modified_method":"@Override\n    public void commit(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, Exchange exchange, GenericFile<T> file) throws Exception {\n        // must invoke super\n        super.commit(operations, endpoint, exchange, file);\n\n        if (commitRenamer != null) {\n            // create a copy and bind the file to the exchange to be used by the renamer to evaluate the file name\n            Exchange copy = exchange.copy();\n            file.bindToExchange(copy);\n            // must preserve message id\n            copy.getIn().setMessageId(exchange.getIn().getMessageId());\n            copy.setExchangeId(exchange.getExchangeId());\n\n            GenericFile<T> newName = commitRenamer.renameFile(copy, file);\n            renameFile(operations, file, newName);\n        }\n    }","commit_id":"bf15d11874f3fdc74e5b9120c58930ab5803c37f","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    public void rollback(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, Exchange exchange, GenericFile<T> file) throws Exception {\n        // must invoke super\n        super.rollback(operations, endpoint, exchange, file);\n\n        if (failureRenamer != null) {\n            GenericFile<T> newName = failureRenamer.renameFile(exchange, file);\n            renameFile(operations, file, newName);\n        }\n    }","id":10653,"modified_method":"@Override\n    public void rollback(GenericFileOperations<T> operations, GenericFileEndpoint<T> endpoint, Exchange exchange, GenericFile<T> file) throws Exception {\n        // must invoke super\n        super.rollback(operations, endpoint, exchange, file);\n\n        if (failureRenamer != null) {\n            // create a copy and bind the file to the exchange to be used by the renamer to evaluate the file name\n            Exchange copy = exchange.copy();\n            file.bindToExchange(copy);\n            // must preserve message id\n            copy.getIn().setMessageId(exchange.getIn().getMessageId());\n            copy.setExchangeId(exchange.getExchangeId());\n\n            GenericFile<T> newName = failureRenamer.renameFile(copy, file);\n            renameFile(operations, file, newName);\n        }\n    }","commit_id":"bf15d11874f3fdc74e5b9120c58930ab5803c37f","url":"https://github.com/apache/camel"},{"original_method":"/**\n     * Strategy to pre check polling.\n     * <p/>\n     * Is currently used to prevent doing poll enrich from a file based endpoint when the current route also\n     * started from a file based endpoint as that is not currently supported.\n     *\n     * @param exchange the current exchange\n     */\n    protected void preCheckPoll(Exchange exchange) throws Exception {\n        // cannot poll a file endpoint if already consuming from a file endpoint (CAMEL-1895)\n        if (consumer instanceof EventDrivenPollingConsumer) {\n            EventDrivenPollingConsumer edpc = (EventDrivenPollingConsumer) consumer;\n            boolean fileBasedConsumer = edpc.getEndpoint().getEndpointKey().startsWith(\"file\") || edpc.getEndpoint().getEndpointKey().startsWith(\"ftp\");\n            boolean fileBasedExchange = exchange.getFromEndpoint() != null\n                    && (exchange.getFromEndpoint().getEndpointUri().startsWith(\"file\") || exchange.getFromEndpoint().getEndpointUri().startsWith(\"ftp\"));\n            if (fileBasedConsumer && fileBasedExchange) {\n                throw new IllegalArgumentException(\"Camel currently does not support pollEnrich from a file/ftp endpoint\"\n                        + \" when the route also started from a file/ftp endpoint.\"\n                        + \" Started from: \" + exchange.getFromEndpoint().getEndpointUri() + \" pollEnrich: \" + edpc.getEndpoint().getEndpointUri());\n            }\n        }\n    }","id":10654,"modified_method":"/**\n     * Strategy to pre check polling.\n     * <p/>\n     * Is currently used to prevent doing poll enrich from a file based endpoint when the current route also\n     * started from a file based endpoint as that is not currently supported.\n     *\n     * @param exchange the current exchange\n     */\n    protected void preCheckPoll(Exchange exchange) throws Exception {\n        // noop\n    }","commit_id":"bf15d11874f3fdc74e5b9120c58930ab5803c37f","url":"https://github.com/apache/camel"},{"original_method":"private RemoteFile<ChannelSftp.LsEntry> asRemoteFile(String directory, ChannelSftp.LsEntry file) {\n        RemoteFile<ChannelSftp.LsEntry> answer = new RemoteFile<ChannelSftp.LsEntry>();\n\n        answer.setEndpointPath(endpointPath);\n        answer.setFile(file);\n        answer.setFileName(file.getFilename());\n        answer.setFileNameOnly(file.getFilename());\n        answer.setFileLength(file.getAttrs().getSize());\n        answer.setLastModified(file.getAttrs().getMTime() * 1000L);\n        answer.setHostname(((RemoteFileConfiguration) endpoint.getConfiguration()).getHost());\n\n        // all ftp files is considered as relative\n        answer.setAbsolute(false);\n\n        // create a pseudo absolute name\n        String absoluteFileName = (ObjectHelper.isNotEmpty(directory) ? directory + \"/\" : \"\") + file.getFilename();\n        answer.setAbsoluteFilePath(absoluteFileName);\n\n        // the relative filename, skip the leading endpoint configured path\n        String relativePath = ObjectHelper.after(absoluteFileName, endpointPath);\n        // skip trailing /\n        relativePath = FileUtil.stripLeadingSeparator(relativePath);\n        answer.setRelativeFilePath(relativePath);\n\n        return answer;\n    }","id":10655,"modified_method":"private RemoteFile<ChannelSftp.LsEntry> asRemoteFile(String directory, ChannelSftp.LsEntry file) {\n        RemoteFile<ChannelSftp.LsEntry> answer = new RemoteFile<ChannelSftp.LsEntry>();\n\n        answer.setEndpointPath(endpointPath);\n        answer.setFile(file);\n        answer.setFileNameOnly(file.getFilename());\n        answer.setFileLength(file.getAttrs().getSize());\n        answer.setLastModified(file.getAttrs().getMTime() * 1000L);\n        answer.setHostname(((RemoteFileConfiguration) endpoint.getConfiguration()).getHost());\n\n        // all ftp files is considered as relative\n        answer.setAbsolute(false);\n\n        // create a pseudo absolute name\n        String absoluteFileName = (ObjectHelper.isNotEmpty(directory) ? directory + \"/\" : \"\") + file.getFilename();\n        answer.setAbsoluteFilePath(absoluteFileName);\n\n        // the relative filename, skip the leading endpoint configured path\n        String relativePath = ObjectHelper.after(absoluteFileName, endpointPath);\n        // skip trailing /\n        relativePath = FileUtil.stripLeadingSeparator(relativePath);\n        answer.setRelativeFilePath(relativePath);\n\n        // the file name should be the relative path\n        answer.setFileName(answer.getRelativeFilePath());\n\n        return answer;\n    }","commit_id":"bf15d11874f3fdc74e5b9120c58930ab5803c37f","url":"https://github.com/apache/camel"},{"original_method":"private void readDependenciesFromXml() {\n        for (Node orderEntry : findOrderEntries()) {\n            Object orderEntryType = orderEntry.attribute(\"type\");\n            if (\"module-library\".equals(orderEntryType)) {\n                Set<Path> classes = Sets.newLinkedHashSet();\n                Set<Path> javadoc = Sets.newLinkedHashSet();\n                Set<Path> sources = Sets.newLinkedHashSet();\n                Set<JarDirectory> jarDirectories = Sets.newLinkedHashSet();\n                for (Node library : getChildren(orderEntry, \"library\")) {\n                    Node classesNode = findFirstChildNamed(library, \"CLASSES\");\n                    for (Node classesRoot : getChildren(classesNode, \"root\")) {\n                        classes.add(pathFactory.path((String) classesRoot.attribute(\"url\")));\n                    }\n                    Node javadocNode = findFirstChildNamed(library, \"JAVADOC\");\n                    for (Node javadocRoot : getChildren(javadocNode, \"root\")) {\n                        javadoc.add(pathFactory.path((String) javadocRoot.attribute(\"url\")));\n                    }\n                    Node sourcesNode = findFirstChildNamed(library, \"SOURCES\");\n                    for (Node sourcesRoot : getChildren(sourcesNode, \"root\")) {\n                        sources.add(pathFactory.path((String) sourcesRoot.attribute(\"url\")));\n                    }\n                    for (Node jarDirNode : getChildren(library, \"jarDirectory\")) {\n                        jarDirectories.add(new JarDirectory(pathFactory.path((String) jarDirNode.attribute(\"url\")), Boolean.parseBoolean((String) jarDirNode.attribute(\"recursive\"))));\n                    }\n                }\n                ModuleLibrary moduleLibrary = new ModuleLibrary(classes, javadoc, sources, jarDirectories, (String) orderEntry.attribute(\"scope\"));\n                dependencies.add(moduleLibrary);\n            } else if (\"module\".equals(orderEntryType)) {\n                dependencies.add(new ModuleDependency((String) orderEntry.attribute(\"module-name\"), (String) orderEntry.attribute(\"scope\")));\n            }\n        }\n    }","id":10656,"modified_method":"private void readDependenciesFromXml() {\n        for (Node orderEntry : findOrderEntries()) {\n            Object orderEntryType = orderEntry.attribute(\"type\");\n            if (\"module-library\".equals(orderEntryType)) {\n                Set<Path> classes = Sets.newLinkedHashSet();\n                Set<Path> javadoc = Sets.newLinkedHashSet();\n                Set<Path> sources = Sets.newLinkedHashSet();\n                Set<JarDirectory> jarDirectories = Sets.newLinkedHashSet();\n                for (Node library : getChildren(orderEntry, \"library\")) {\n                    for (Node classesNode : getChildren(library, \"CLASSES\")) {\n                        readDependenciesPathsFromXml(classes, classesNode);\n                    }\n                    for (Node javadocNode : getChildren(library, \"JAVADOC\")) {\n                        readDependenciesPathsFromXml(javadoc, javadocNode);\n                    }\n                    for (Node sourcesNode : getChildren(library, \"SOURCES\")) {\n                        readDependenciesPathsFromXml(sources, sourcesNode);\n                    }\n                    for (Node jarDirNode : getChildren(library, \"jarDirectory\")) {\n                        jarDirectories.add(new JarDirectory(pathFactory.path((String) jarDirNode.attribute(\"url\")), Boolean.parseBoolean((String) jarDirNode.attribute(\"recursive\"))));\n                    }\n                }\n                ModuleLibrary moduleLibrary = new ModuleLibrary(classes, javadoc, sources, jarDirectories, (String) orderEntry.attribute(\"scope\"));\n                dependencies.add(moduleLibrary);\n            } else if (\"module\".equals(orderEntryType)) {\n                dependencies.add(new ModuleDependency((String) orderEntry.attribute(\"module-name\"), (String) orderEntry.attribute(\"scope\")));\n            }\n        }\n    }","commit_id":"c1af1ed1f813f826e0f42a9c0ecb3258a818ad68","url":"https://github.com/gradle/gradle"},{"original_method":"private int getScopeHash() {\n        return scope != null && !scope.equals(\"COMPILE\") ? scope.hashCode() : 0;\n    }","id":10657,"modified_method":"private int getScopeHash() {\n        return !isNullOrEmpty(scope) && !scope.equals(\"COMPILE\") ? scope.hashCode() : 0;\n    }","commit_id":"c1af1ed1f813f826e0f42a9c0ecb3258a818ad68","url":"https://github.com/gradle/gradle"},{"original_method":"private boolean scopeEquals(String lhs, String rhs) {\n        if (isNullOrEmpty(lhs) || lhs.equals(\"COMPILE\")) {\n            return isNullOrEmpty(rhs) || rhs.equals(\"COMPILE\");\n        } else if (isNullOrEmpty(rhs) || rhs.equals(\"COMPILE\")) {\n            return isNullOrEmpty(lhs) || lhs.equals(\"COMPILE\");\n        } else {\n            return lhs.equals(rhs);\n        }\n    }","id":10658,"modified_method":"private boolean scopeEquals(String lhs, String rhs) {\n        if (\"COMPILE\".equals(lhs)) {\n            return isNullOrEmpty(rhs) || \"COMPILE\".equals(rhs);\n        } else if (\"COMPILE\".equals(rhs)) {\n            return isNullOrEmpty(lhs) || \"COMPILE\".equals(lhs);\n        } else {\n            return Objects.equal(lhs, rhs);\n        }\n    }","commit_id":"c1af1ed1f813f826e0f42a9c0ecb3258a818ad68","url":"https://github.com/gradle/gradle"},{"original_method":"@Test\n    public void testListenerAddedFromListener() throws Exception\n    {\n        final AtomicInteger completes = new AtomicInteger();\n        String path = \"/path\";\n        prepare(path, new HttpServlet()\n        {\n            @Override\n            protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                AsyncContext asyncContext = request.startAsync(request, response);\n                asyncContext.addListener(new AsyncListener()\n                {\n                    @Override\n                    public void onStartAsync(AsyncEvent event) throws IOException\n                    {\n                        // This method should not be invoked because we add the\n                        // listener *after* having called startAsync(), but we\n                        // add a listener to be sure it's not called (it will\n                        // screw up the completes count and test will fail).\n                        event.getAsyncContext().addListener(this);\n                    }\n\n                    @Override\n                    public void onComplete(AsyncEvent event) throws IOException\n                    {\n                        completes.incrementAndGet();\n                    }\n\n                    @Override\n                    public void onTimeout(AsyncEvent event) throws IOException\n                    {\n                    }\n\n                    @Override\n                    public void onError(AsyncEvent event) throws IOException\n                    {\n                    }\n                });\n                asyncContext.complete();\n            }\n        });\n\n        try (Socket socket = new Socket(\"localhost\", _connector.getLocalPort()))\n        {\n            OutputStream output = socket.getOutputStream();\n\n            String request = \"\" +\n                    \"GET \" + path + \" HTTP/1.1\\r\\n\" +\n                    \"Host: localhost\\r\\n\" +\n                    \"\\r\\n\";\n            output.write(request.getBytes(StandardCharsets.UTF_8));\n            output.flush();\n\n            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));\n            SimpleHttpParser parser = new SimpleHttpParser();\n            SimpleHttpResponse response = parser.readResponse(reader);\n            Assert.assertEquals(\"200\", response.getCode());\n            Assert.assertEquals(1, completes.get());\n\n            // Send a second request\n            completes.set(0);\n            output.write(request.getBytes(StandardCharsets.UTF_8));\n            output.flush();\n\n            response = parser.readResponse(reader);\n            Assert.assertEquals(\"200\", response.getCode());\n            Assert.assertEquals(1, completes.get());\n        }\n    }","id":10659,"modified_method":"@Test\n    public void testListenerAddedFromListener() throws Exception\n    {\n        final AtomicReference<CountDownLatch> completes = new AtomicReference<>(new CountDownLatch(1));\n        String path = \"/path\";\n        prepare(path, new HttpServlet()\n        {\n            @Override\n            protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                AsyncContext asyncContext = request.startAsync(request, response);\n                asyncContext.addListener(new AsyncListener()\n                {\n                    @Override\n                    public void onStartAsync(AsyncEvent event) throws IOException\n                    {\n                        // This method should not be invoked because we add the\n                        // listener *after* having called startAsync(), but we\n                        // add a listener to be sure it's not called (it will\n                        // screw up the completes count and test will fail).\n                        event.getAsyncContext().addListener(this);\n                    }\n\n                    @Override\n                    public void onComplete(AsyncEvent event) throws IOException\n                    {\n                        completes.get().countDown();\n                    }\n\n                    @Override\n                    public void onTimeout(AsyncEvent event) throws IOException\n                    {\n                    }\n\n                    @Override\n                    public void onError(AsyncEvent event) throws IOException\n                    {\n                    }\n                });\n                asyncContext.complete();\n            }\n        });\n\n        try (Socket socket = new Socket(\"localhost\", _connector.getLocalPort()))\n        {\n            OutputStream output = socket.getOutputStream();\n\n            String request = \"\" +\n                    \"GET \" + path + \" HTTP/1.1\\r\\n\" +\n                    \"Host: localhost\\r\\n\" +\n                    \"\\r\\n\";\n            output.write(request.getBytes(StandardCharsets.UTF_8));\n            output.flush();\n\n            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));\n            SimpleHttpParser parser = new SimpleHttpParser();\n            SimpleHttpResponse response = parser.readResponse(reader);\n            Assert.assertEquals(\"200\", response.getCode());\n            completes.get().await(10,TimeUnit.SECONDS);\n\n            // Send a second request\n            completes.set(new CountDownLatch(1));\n            output.write(request.getBytes(StandardCharsets.UTF_8));\n            output.flush();\n\n            response = parser.readResponse(reader);\n            Assert.assertEquals(\"200\", response.getCode());\n            completes.get().await(10,TimeUnit.SECONDS);\n        }\n    }","commit_id":"108821aacbd363d8eb1cf5a9eeed1476dbec49e9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testAsyncDispatchAsyncCompletePreservesListener() throws Exception\n    {\n        final AtomicInteger completes = new AtomicInteger();\n        final String path = \"/path\";\n        prepare(path + \"/*\", new HttpServlet()\n        {\n            @Override\n            protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                String requestURI = request.getRequestURI();\n                if (requestURI.endsWith(\"/one\"))\n                {\n                    AsyncContext asyncContext = request.startAsync(request, response);\n                    asyncContext.addListener(new AsyncListener()\n                    {\n                        @Override\n                        public void onStartAsync(AsyncEvent event) throws IOException\n                        {\n                            event.getAsyncContext().addListener(this);\n                        }\n\n                        @Override\n                        public void onComplete(AsyncEvent event) throws IOException\n                        {\n                            completes.incrementAndGet();\n                        }\n\n                        @Override\n                        public void onTimeout(AsyncEvent event) throws IOException\n                        {\n                        }\n\n                        @Override\n                        public void onError(AsyncEvent event) throws IOException\n                        {\n                        }\n                    });\n                    // This dispatch() will call startAsync() again which will\n                    // clear the previous listeners (as per the specification)\n                    // but add a new listener from onStartAsync().\n                    asyncContext.dispatch(path + \"/two\");\n                }\n                else if (requestURI.endsWith(\"/two\"))\n                {\n                    AsyncContext asyncContext = request.startAsync(request, response);\n                    asyncContext.complete();\n                }\n            }\n        });\n\n        try (Socket socket = new Socket(\"localhost\", _connector.getLocalPort()))\n        {\n            OutputStream output = socket.getOutputStream();\n\n            String request = \"\" +\n                    \"GET \" + path + \"/one HTTP/1.1\\r\\n\" +\n                    \"Host: localhost\\r\\n\" +\n                    \"\\r\\n\";\n            output.write(request.getBytes(StandardCharsets.UTF_8));\n            output.flush();\n\n            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));\n            SimpleHttpParser parser = new SimpleHttpParser();\n            SimpleHttpResponse response = parser.readResponse(reader);\n            Assert.assertEquals(\"200\", response.getCode());\n            Assert.assertEquals(1, completes.get());\n\n            // Send a second request\n            completes.set(0);\n            output.write(request.getBytes(StandardCharsets.UTF_8));\n            output.flush();\n\n            response = parser.readResponse(reader);\n            Assert.assertEquals(\"200\", response.getCode());\n            Assert.assertEquals(1, completes.get());\n        }\n    }","id":10660,"modified_method":"@Test\n    public void testAsyncDispatchAsyncCompletePreservesListener() throws Exception\n    {\n        final AtomicReference<CountDownLatch> completes = new AtomicReference<>(new CountDownLatch(1));\n        final String path = \"/path\";\n        prepare(path + \"/*\", new HttpServlet()\n        {\n            @Override\n            protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                String requestURI = request.getRequestURI();\n                if (requestURI.endsWith(\"/one\"))\n                {\n                    AsyncContext asyncContext = request.startAsync(request, response);\n                    asyncContext.addListener(new AsyncListener()\n                    {\n                        @Override\n                        public void onStartAsync(AsyncEvent event) throws IOException\n                        {\n                            event.getAsyncContext().addListener(this);\n                        }\n\n                        @Override\n                        public void onComplete(AsyncEvent event) throws IOException\n                        {\n                            completes.get().countDown();\n                        }\n\n                        @Override\n                        public void onTimeout(AsyncEvent event) throws IOException\n                        {\n                        }\n\n                        @Override\n                        public void onError(AsyncEvent event) throws IOException\n                        {\n                        }\n                    });\n                    // This dispatch() will call startAsync() again which will\n                    // clear the previous listeners (as per the specification)\n                    // but add a new listener from onStartAsync().\n                    asyncContext.dispatch(path + \"/two\");\n                }\n                else if (requestURI.endsWith(\"/two\"))\n                {\n                    AsyncContext asyncContext = request.startAsync(request, response);\n                    asyncContext.complete();\n                }\n            }\n        });\n\n        try (Socket socket = new Socket(\"localhost\", _connector.getLocalPort()))\n        {\n            OutputStream output = socket.getOutputStream();\n\n            String request = \"\" +\n                    \"GET \" + path + \"/one HTTP/1.1\\r\\n\" +\n                    \"Host: localhost\\r\\n\" +\n                    \"\\r\\n\";\n            output.write(request.getBytes(StandardCharsets.UTF_8));\n            output.flush();\n\n            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));\n            SimpleHttpParser parser = new SimpleHttpParser();\n            SimpleHttpResponse response = parser.readResponse(reader);\n            Assert.assertEquals(\"200\", response.getCode());\n            completes.get().await(10,TimeUnit.SECONDS);\n\n            // Send a second request\n            completes.set(new CountDownLatch(1));\n            output.write(request.getBytes(StandardCharsets.UTF_8));\n            output.flush();\n\n            response = parser.readResponse(reader);\n            Assert.assertEquals(\"200\", response.getCode());\n            completes.get().await(10,TimeUnit.SECONDS);\n        }\n    }","commit_id":"108821aacbd363d8eb1cf5a9eeed1476dbec49e9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testListenerClearedOnSecondRequest() throws Exception\n    {\n        final AtomicInteger completes = new AtomicInteger();\n        String path = \"/path\";\n        prepare(path, new HttpServlet()\n        {\n            @Override\n            protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                AsyncContext asyncContext = request.startAsync(request, response);\n                asyncContext.addListener(new AsyncListener()\n                {\n                    @Override\n                    public void onStartAsync(AsyncEvent event) throws IOException\n                    {\n                    }\n\n                    @Override\n                    public void onComplete(AsyncEvent event) throws IOException\n                    {\n                        completes.incrementAndGet();\n                    }\n\n                    @Override\n                    public void onTimeout(AsyncEvent event) throws IOException\n                    {\n                    }\n\n                    @Override\n                    public void onError(AsyncEvent event) throws IOException\n                    {\n                    }\n                });\n                asyncContext.complete();\n            }\n        });\n\n        try (Socket socket = new Socket(\"localhost\", _connector.getLocalPort()))\n        {\n            OutputStream output = socket.getOutputStream();\n\n            String request = \"\" +\n                    \"GET \" + path + \" HTTP/1.1\\r\\n\" +\n                    \"Host: localhost\\r\\n\" +\n                    \"\\r\\n\";\n            output.write(request.getBytes(StandardCharsets.UTF_8));\n            output.flush();\n\n            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));\n            SimpleHttpParser parser = new SimpleHttpParser();\n            SimpleHttpResponse response = parser.readResponse(reader);\n            Assert.assertEquals(\"200\", response.getCode());\n            Assert.assertEquals(1, completes.get());\n\n            // Send a second request\n            completes.set(0);\n            output.write(request.getBytes(StandardCharsets.UTF_8));\n            output.flush();\n\n            response = parser.readResponse(reader);\n            Assert.assertEquals(\"200\", response.getCode());\n            Assert.assertEquals(1, completes.get());\n        }\n    }","id":10661,"modified_method":"@Test\n    public void testListenerClearedOnSecondRequest() throws Exception\n    {\n        final AtomicReference<CountDownLatch> completes = new AtomicReference<>(new CountDownLatch(1));\n        String path = \"/path\";\n        prepare(path, new HttpServlet()\n        {\n            @Override\n            protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                AsyncContext asyncContext = request.startAsync(request, response);\n                asyncContext.addListener(new AsyncListener()\n                {\n                    @Override\n                    public void onStartAsync(AsyncEvent event) throws IOException\n                    {\n                    }\n\n                    @Override\n                    public void onComplete(AsyncEvent event) throws IOException\n                    {\n                        completes.get().countDown();\n                    }\n\n                    @Override\n                    public void onTimeout(AsyncEvent event) throws IOException\n                    {\n                    }\n\n                    @Override\n                    public void onError(AsyncEvent event) throws IOException\n                    {\n                    }\n                });\n                asyncContext.complete();\n            }\n        });\n\n        try (Socket socket = new Socket(\"localhost\", _connector.getLocalPort()))\n        {\n            OutputStream output = socket.getOutputStream();\n\n            String request = \"\" +\n                    \"GET \" + path + \" HTTP/1.1\\r\\n\" +\n                    \"Host: localhost\\r\\n\" +\n                    \"\\r\\n\";\n            output.write(request.getBytes(StandardCharsets.UTF_8));\n            output.flush();\n\n            BufferedReader reader = new BufferedReader(new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8));\n            SimpleHttpParser parser = new SimpleHttpParser();\n            SimpleHttpResponse response = parser.readResponse(reader);\n            Assert.assertEquals(\"200\", response.getCode());\n            completes.get().await(10,TimeUnit.SECONDS);\n\n            // Send a second request\n            completes.set(new CountDownLatch(1));\n            output.write(request.getBytes(StandardCharsets.UTF_8));\n            output.flush();\n\n            response = parser.readResponse(reader);\n            Assert.assertEquals(\"200\", response.getCode());\n            completes.get().await(10,TimeUnit.SECONDS);\n        }\n    }","commit_id":"108821aacbd363d8eb1cf5a9eeed1476dbec49e9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testOnErrorThrows() throws Exception\n    {\n        final AtomicInteger errors = new AtomicInteger();\n        startServer(new HttpServlet()\n        {\n            @Override\n            protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                final AsyncContext asyncContext = request.startAsync(request, response);\n                request.getInputStream().setReadListener(new ReadListener()\n                {\n                    @Override\n                    public void onDataAvailable() throws IOException\n                    {\n                        throw new NullPointerException(\"explicitly_thrown_by_test_1\");\n                    }\n\n                    @Override\n                    public void onAllDataRead() throws IOException\n                    {\n                    }\n\n                    @Override\n                    public void onError(final Throwable t)\n                    {\n                        errors.incrementAndGet();\n                        throw new NullPointerException(\"explicitly_thrown_by_test_2\"){{this.initCause(t);}};\n                    }\n                });\n            }\n        });\n\n        String data = \"0123456789\";\n        String request = \"GET \" + path + \" HTTP/1.1\\r\\n\" +\n                \"Host: localhost:\" + connector.getLocalPort() + \"\\r\\n\" +\n                \"Content-Length: \" + data.length() + \"\\r\\n\" +\n                \"\\r\\n\" +\n                data;\n\n        try (Socket client = new Socket(\"localhost\", connector.getLocalPort()))\n        {\n            OutputStream output = client.getOutputStream();\n            output.write(request.getBytes(\"UTF-8\"));\n            output.flush();\n\n            SimpleHttpParser parser = new SimpleHttpParser();\n            SimpleHttpResponse response = parser.readResponse(new BufferedReader(new InputStreamReader(client.getInputStream(), \"UTF-8\")));\n\n            Assert.assertEquals(\"500\", response.getCode());\n            Assert.assertEquals(1, errors.get());\n        }\n    }","id":10662,"modified_method":"@Test\n    public void testOnErrorThrows() throws Exception\n    {\n        final AtomicInteger errors = new AtomicInteger();\n        startServer(new HttpServlet()\n        {\n            @Override\n            protected void service(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException\n            {\n                if (request.getDispatcherType()==DispatcherType.ERROR)\n                {\n                    response.flushBuffer();\n                    return;\n                }\n                \n                final AsyncContext asyncContext = request.startAsync(request, response);\n                request.getInputStream().setReadListener(new ReadListener()\n                {\n                    @Override\n                    public void onDataAvailable() throws IOException\n                    {\n                        throw new NullPointerException(\"explicitly_thrown_by_test_1\");\n                    }\n\n                    @Override\n                    public void onAllDataRead() throws IOException\n                    {\n                    }\n\n                    @Override\n                    public void onError(final Throwable t)\n                    {\n                        errors.incrementAndGet();\n                        throw new NullPointerException(\"explicitly_thrown_by_test_2\"){{this.initCause(t);}};\n                    }\n                });\n            }\n        });\n\n        String data = \"0123456789\";\n        String request = \"GET \" + path + \" HTTP/1.1\\r\\n\" +\n                \"Host: localhost:\" + connector.getLocalPort() + \"\\r\\n\" +\n                \"Content-Length: \" + data.length() + \"\\r\\n\" +\n                \"\\r\\n\" +\n                data;\n\n        try (Socket client = new Socket(\"localhost\", connector.getLocalPort()))\n        {\n            OutputStream output = client.getOutputStream();\n            output.write(request.getBytes(\"UTF-8\"));\n            output.flush();\n\n            SimpleHttpParser parser = new SimpleHttpParser();\n            SimpleHttpResponse response = parser.readResponse(new BufferedReader(new InputStreamReader(client.getInputStream(), \"UTF-8\")));\n\n            Assert.assertEquals(\"500\", response.getCode());\n            Assert.assertEquals(1, errors.get());\n        }\n    }","commit_id":"108821aacbd363d8eb1cf5a9eeed1476dbec49e9","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public synchronized void createCounter (String counterName) throws Exception {\n        Connection con = RDBMServices.getConnection();\n        try {\n            RDBMServices.setAutoCommit(con, false);\n            Statement stmt = con.createStatement();\n            try {\n                String sInsert = \"INSERT INTO UP_SEQUENCE (SEQUENCE_NAME,SEQUENCE_VALUE) VALUES ('\" + counterName + \"',0)\";\n                LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::createCounter(): \" + sInsert);\n                stmt.executeUpdate(sInsert);\n                RDBMServices.commit(con);\n            } catch (Exception e) {\n                RDBMServices.rollback(con);\n                throw e;\n            } finally {\n                stmt.close();\n            }\n        } finally {\n            RDBMServices.releaseConnection(con);\n        }\n    }","id":10663,"modified_method":"/**\n     * Creates a new counter with an initial value of 0. Does not check to\n     * see if the counter already exists.\n     * \n     * @see org.jasig.portal.utils.ICounterStore#createCounter(java.lang.String)\n     */\n    public synchronized void createCounter (String counterName) throws Exception {\n        Connection con = RDBMServices.getConnection();\n        PreparedStatement createCounterPstmt = null;\n        \n        try {\n            RDBMServices.setAutoCommit(con, false);\n            \n            String createCounterInsert =\n                \"INSERT INTO UP_SEQUENCE (SEQUENCE_NAME, SEQUENCE_VALUE) \" +\n                \"VALUES (?, 0)\";\n            \n            createCounterPstmt = con.prepareStatement(createCounterInsert);\n            createCounterPstmt.setString(1, counterName);\n            \n            LogService.log(LogService.DEBUG, \"RDBMCounterStore::createCounter(\" + counterName + \"): \" + createCounterInsert);\n            int updateCount = createCounterPstmt.executeUpdate();\n            \n            if (updateCount <= 0) {\n                PortalException pe = new PortalException(\"RDBMCounterStore::createCounter(): An error occured while creating the counter named: \" + counterName + \".\\nNo rows were created.\");\n                LogService.log(LogService.ERROR, pe); \n                throw pe;\n            }\n            \n            RDBMServices.commit(con);\n        }\n        catch (SQLException sqle) {\n            RDBMServices.rollback(con);\n            \n            PortalException pe = new PortalException(\"RDBMCounterStore::createCounter(): An error occured while creating the counter named: \" + counterName, sqle);\n            LogService.log(LogService.ERROR, pe); \n            throw pe;\n        } \n        finally {\n            try { createCounterPstmt.close(); } catch (Exception e) {};\n       \n            RDBMServices.releaseConnection(con);\n        }\n    }","commit_id":"8a2842fc02a70a076ae18bf85ceed9faed61a9c3","url":"https://github.com/Jasig/uPortal"},{"original_method":"public synchronized int getIncrementIntegerId (String counterName) throws Exception {\n        Connection con = RDBMServices.getConnection();\n        Statement stmt = null;\n        ResultSet rs = null;\n        try {\n            stmt = con.createStatement();\n            try {\n                String sQuery = \"SELECT SEQUENCE_VALUE FROM UP_SEQUENCE WHERE SEQUENCE_NAME='\" + counterName + \"'\";\n                for (int i = 0; i < 25; i++) \n                {\n                    try \n                    {\n                        LogService.log(LogService.DEBUG, \"RDBMCounterStore::getIncrementInteger(): \" + sQuery);\n                        rs = stmt.executeQuery(sQuery);\n                        int origId;\n                        int nextId;\n                        rs.next();\n                        origId = rs.getInt(1);\n                        nextId = origId + 1;\n                        String sUpdate = \"UPDATE UP_SEQUENCE SET SEQUENCE_VALUE=\" + nextId + \" WHERE SEQUENCE_NAME='\" + counterName + \"'\" +\n                            \" AND SEQUENCE_VALUE=\" + origId;\n                        LogService.log(LogService.DEBUG, \"RDBMCounterStore::getIncrementInteger(): \" + sUpdate);\n                        int rowsUpdated = stmt.executeUpdate(sUpdate);\n                        if (rowsUpdated > 0) \n                            { return nextId; }\n                        else \n                        {\n                            // Assume concurrent update (from other server). Try again after some random amount of milliseconds. \n                            Thread.sleep(java.lang.Math.round(java.lang.Math.random()* 3 * 1000)); // Retry in up to 3 seconds\n                        }\n                    }  // end try\n                    finally\n                    {\n                        if ( rs != null )\n                            { rs.close(); } \n                    }\n                }      // end for\n            }          // end try \n            finally \n            {\n                if (stmt != null)\n                    { stmt.close(); } \n            }\n        } catch (Exception e) {\n            LogService.log(LogService.ERROR, e);\n        } finally {\n            RDBMServices.releaseConnection(con);\n        }\n        throw new Exception(\"Unable to increment counter for \" + counterName);\n    }","id":10664,"modified_method":"/**\n     * Gets the next number in the sequence. If the counter does not exist\n     * it is first created.\n     * \n     * @see org.jasig.portal.utils.ICounterStore#getIncrementIntegerId(java.lang.String)\n     */\n    public synchronized int getIncrementIntegerId (String counterName) throws Exception {\n        Connection con = RDBMServices.getConnection();\n        \n        PreparedStatement getCounterPstmt = null;\n        PreparedStatement updateCounterPstmt = null;\n        ResultSet rs = null;\n        \n        try {\n            String getCounterQuery =\n                \"SELECT SEQUENCE_VALUE \" +\n                \"FROM UP_SEQUENCE \" +\n                \"WHERE SEQUENCE_NAME=?\";\n            \n            String updateCounterQuery =\n                \"UPDATE UP_SEQUENCE \" +\n                \"SET SEQUENCE_VALUE=? \" +\n                \"WHERE SEQUENCE_NAME=? AND SEQUENCE_VALUE=?\";\n            \n            getCounterPstmt = con.prepareStatement(getCounterQuery);\n            getCounterPstmt.setString(1, counterName);\n            \n            updateCounterPstmt = con.prepareStatement(updateCounterQuery);\n            updateCounterPstmt.setString(2, counterName);\n            \n            for (int i = 0; i < 25; i++) \n            {\n                LogService.log(LogService.DEBUG, \"RDBMCounterStore::getIncrementInteger(\" + counterName + \"): \" + getCounterQuery);\n                rs = getCounterPstmt.executeQuery();\n                \n                if (!rs.next()) {\n                    try {\n                        createCounter(counterName);\n                    }\n                    catch (Exception e) {\n                        throw new PortalException(\"RDBMCounterStore::getIncrementInteger(): Could not create new counter for name: \" + counterName, e);\n                    }\n                    \n                    rs = getCounterPstmt.executeQuery();\n                    \n                    if (!rs.next()) {\n                        throw new PortalException(\"RDBMCounterStore::getIncrementInteger(): Counter should have been created but was not found, name: \" + counterName);\n                    }\n                }\n                \n                int origId = rs.getInt(1);\n                int nextId = origId + 1;\n                \n                updateCounterPstmt.setInt(1, nextId);\n                updateCounterPstmt.setInt(3, origId);\n                \n                LogService.log(LogService.DEBUG, \"RDBMCounterStore::getIncrementInteger(\" + counterName + \", \" + nextId + \", \" + origId + \"): \" + updateCounterQuery);\n                int rowsUpdated = updateCounterPstmt.executeUpdate();\n                \n                if (rowsUpdated > 0) { \n                    return nextId;\n                }\n                else {\n                    // Assume concurrent update (from other server). Try again after some random amount of milliseconds. \n                    Thread.sleep(java.lang.Math.round(java.lang.Math.random()* 3 * 1000)); // Retry in up to 3 seconds\n                }\n            }          // end try \n        } \n        catch (SQLException sqle) {\n            PortalException pe = new PortalException(\"RDBMCounterStore::getIncrementInteger(): An error occured while updating the counter, name: \" + counterName, sqle);\n            LogService.log(LogService.ERROR, pe);\n            throw pe;\n        } \n        finally {\n            try { getCounterPstmt.close(); } catch (Exception e) {}\n            try { updateCounterPstmt.close(); } catch (Exception e) {}\n            try { rs.close(); } catch (Exception e) {}\n            \n            RDBMServices.releaseConnection(con);\n        }\n        \n        PortalException pe = new PortalException(\"RDBMCounterStore::getIncrementInteger(): Unable to increment counter for \" + counterName);\n        LogService.log(LogService.ERROR, pe);\n        throw pe;\n    }","commit_id":"8a2842fc02a70a076ae18bf85ceed9faed61a9c3","url":"https://github.com/Jasig/uPortal"},{"original_method":"public synchronized void setCounter (String counterName, int value) throws Exception {\n        Connection con = RDBMServices.getConnection();\n        try {\n            RDBMServices.setAutoCommit(con, false);\n            Statement stmt = con.createStatement();\n            try {\n                String sUpdate = \"UPDATE UP_SEQUENCE SET SEQUENCE_VALUE=\" + value + \"WHERE SEQUENCE_NAME='\" + counterName + \"'\";\n                LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::setCounter(): \" + sUpdate);\n                stmt.executeUpdate(sUpdate);\n                RDBMServices.commit(con);\n            } catch (Exception e) {\n                RDBMServices.rollback(con);\n                throw e;\n            } finally {\n                stmt.close();\n            }\n        } finally {\n            RDBMServices.releaseConnection(con);\n        }\n    }","id":10665,"modified_method":"/**\n     * Sets the counter to the specified value. Does not check to make\n     * sure the counter already exists.\n     * \n     * @see org.jasig.portal.utils.ICounterStore#setCounter(java.lang.String, int)\n     */\n    public synchronized void setCounter (String counterName, int value) throws Exception {\n        Connection con = RDBMServices.getConnection();\n        \n        PreparedStatement setCounterPstmt = null;\n        \n        try {\n            RDBMServices.setAutoCommit(con, false);\n            \n            String setCounterUpdate = \n                \"UPDATE UP_SEQUENCE \" +\n                \"SET SEQUENCE_VALUE=? \" +\n                \"WHERE SEQUENCE_NAME=?\";\n            \n            setCounterPstmt = con.prepareStatement(setCounterUpdate);\n            setCounterPstmt.setInt(1, value);\n            setCounterPstmt.setString(2, counterName);\n            \n            LogService.log(LogService.DEBUG, \"RDBMCounterStore::setCounter(\" + counterName + \", \" + value + \"): \" + setCounterUpdate);\n            int updateCount = setCounterPstmt.executeUpdate();\n            \n            if (updateCount <= 0) {\n                PortalException pe = new PortalException(\"RDBMCounterStore::setCounter(): An error occured while setting the counter named: \" + counterName + \".\\nNo rows were updated.\");\n                LogService.log(LogService.ERROR, pe); \n                throw pe;\n            }            \n            \n            RDBMServices.commit(con);\n        } \n        catch (SQLException sqle) {\n            RDBMServices.rollback(con);\n            \n            PortalException pe = new PortalException(\"RDBMCounterStore::createCounter(): An error occured while creating the counter named: \" + counterName, sqle);\n            LogService.log(LogService.ERROR, pe); \n            throw pe;\n            \n        }\n        finally {\n            try { setCounterPstmt.close(); } catch (Exception e) {};\n            \n            RDBMServices.releaseConnection(con);\n        }\n    }","commit_id":"8a2842fc02a70a076ae18bf85ceed9faed61a9c3","url":"https://github.com/Jasig/uPortal"},{"original_method":"public Document getUserLayout (IPerson person, UserProfile profile) throws Exception {\n    int userId = person.getID();\n    int realUserId = userId;\n    ResultSet rs;\n    Connection con = RDBMServices.getConnection();\n    LocaleManager localeManager = profile.getLocaleManager();\n\n    RDBMServices.setAutoCommit(con, false);          // May speed things up, can't hurt\n\n    try {\n      Document doc = DocumentFactory.getNewDocument();\n      Element root = doc.createElement(\"layout\");\n      Statement stmt = con.createStatement();\n      // A separate statement is needed so as not to interfere with ResultSet\n      // of statements used for queries\n      Statement insertStmt = con.createStatement();\n      try {\n        long startTime = System.currentTimeMillis();\n        // eventually, we need to fix template layout implementations so you can just do this:\n        //        int layoutId=profile.getLayoutId();\n        // but for now:\n        String subSelectString = \"SELECT LAYOUT_ID FROM UP_USER_PROFILE WHERE USER_ID=\" + userId + \" AND PROFILE_ID=\" + profile.getProfileId();\n        LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + subSelectString);\n        int layoutId = 0;\n        rs = stmt.executeQuery(subSelectString);\n        try {\n            if (rs.next()) {\n              layoutId = rs.getInt(1);\n              if (rs.wasNull()) {\n                  layoutId = 0;\n              }\n            }\n        } finally {\n            rs.close();\n        }\n\n       if (layoutId == 0) { // First time, grab the default layout for this user\n          String sQuery = \"SELECT USER_DFLT_USR_ID, USER_DFLT_LAY_ID FROM UP_USER WHERE USER_ID=\" + userId;\n          LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sQuery);\n          rs = stmt.executeQuery(sQuery);\n          try {\n            rs.next();\n            userId = rs.getInt(1);\n            layoutId = rs.getInt(2);\n          } finally {\n            rs.close();\n          }\n\n          // Make sure the next struct id is set in case the user adds a channel\n          sQuery = \"SELECT NEXT_STRUCT_ID FROM UP_USER WHERE USER_ID=\" + userId;\n          LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sQuery);\n          int nextStructId;\n          rs = stmt.executeQuery(sQuery);\n          try {\n            rs.next();\n            nextStructId = rs.getInt(1);\n          } finally {\n            rs.close();\n          }\n          sQuery = \"UPDATE UP_USER SET NEXT_STRUCT_ID=\" + nextStructId + \" WHERE USER_ID=\" + realUserId;\n          LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sQuery);\n          stmt.executeUpdate(sQuery);\n\n          /* insert row(s) into up_ss_user_atts */\n          sQuery = \"DELETE FROM UP_SS_USER_ATTS WHERE USER_ID=\" + realUserId;\n          LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sQuery);\n          stmt.executeUpdate(sQuery);\n          // modifed INSERT INTO SELECT statement for MySQL support\n          sQuery = \" SELECT \"+realUserId+\", PROFILE_ID, SS_ID, SS_TYPE, STRUCT_ID, PARAM_NAME, PARAM_TYPE, PARAM_VAL \"+\n            \" FROM UP_SS_USER_ATTS WHERE USER_ID=\"+userId;\n          rs = stmt.executeQuery(sQuery);\n\n          while (rs.next()) {\n             String Insert = \"INSERT INTO UP_SS_USER_ATTS (USER_ID, PROFILE_ID, SS_ID, SS_TYPE, STRUCT_ID, PARAM_NAME, PARAM_TYPE, PARAM_VAL) \" +\n             \"VALUES(\"+realUserId+\",\"+\n              rs.getInt(\"PROFILE_ID\")+\",\"+\n              rs.getInt(\"SS_ID\")+\",\" +\n              rs.getInt(\"SS_TYPE\")+\",\" +\n              rs.getInt(\"STRUCT_ID\")+\",\" +\n              \"'\"+rs.getString(\"PARAM_NAME\")+\"',\" +\n              rs.getInt(\"PARAM_TYPE\")+\",\" +\n              \"'\"+rs.getString(\"PARAM_VAL\")+\"')\";\n\n          LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + Insert);\n          insertStmt.executeUpdate(Insert);\n         }\n\n          // Close Result Set\n          if ( rs != null ) rs.close();\n\n          RDBMServices.commit(con); // Make sure it appears in the store\n        }\n\n        int firstStructId = -1;\n        String sQuery = \"SELECT INIT_STRUCT_ID FROM UP_USER_LAYOUT WHERE USER_ID=\" + userId + \" AND LAYOUT_ID = \" + layoutId;\n        LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sQuery);\n        rs = stmt.executeQuery(sQuery);\n        try {\n          if (rs.next()) {\n            firstStructId = rs.getInt(1);\n          } else {\n            throw new Exception(\"RDBMUserLayoutStore::getUserLayout(): No INIT_STRUCT_ID in UP_USER_LAYOUT for \" + userId + \" and LAYOUT_ID \" + layoutId);\n          }\n        } finally {\n          rs.close();\n        }\n\n        String sql;\n        if (localeAware) {\n            sql = \"SELECT ULS.STRUCT_ID,ULS.NEXT_STRUCT_ID,ULS.CHLD_STRUCT_ID,ULS.CHAN_ID,ULS.NAME,ULS.TYPE,ULS.HIDDEN,\"+\n          \"ULS.UNREMOVABLE,ULS.IMMUTABLE,ULS.LOCALE\";\n        }  else {\n            sql = \"SELECT ULS.STRUCT_ID,ULS.NEXT_STRUCT_ID,ULS.CHLD_STRUCT_ID,ULS.CHAN_ID,ULS.NAME,ULS.TYPE,ULS.HIDDEN,\"+\n          \"ULS.UNREMOVABLE,ULS.IMMUTABLE\";\n        }\n        if (RDBMServices.supportsOuterJoins) {\n          sql += \",USP.STRUCT_PARM_NM,USP.STRUCT_PARM_VAL FROM \" + RDBMServices.joinQuery.getQuery(\"layout\");\n        } else {\n          sql += \" FROM UP_LAYOUT_STRUCT ULS WHERE \";\n        }\n        sql += \" ULS.USER_ID=\" + userId + \" AND ULS.LAYOUT_ID=\" + layoutId + \" ORDER BY ULS.STRUCT_ID\";\n        HashMap layoutStructure = new HashMap();\n        LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sql);\n        StringBuffer structChanIds = new StringBuffer();\n        rs = stmt.executeQuery(sql);\n        try {\n          int lastStructId = 0;\n          LayoutStructure ls = null;\n          String sepChar = \"\";\n          if (rs.next()) {\n            int structId = rs.getInt(1);\n            // Result Set returns 0 by default if structId was null\n            // Except if you are using poolman 2.0.4 in which case you get -1 back\n            if (rs.wasNull()) {\n              structId = 0;\n            }\n            readLayout: while (true) {\n              if (DEBUG > 1) System.err.println(\"Found layout structureID \" + structId);\n\n              int nextId = rs.getInt(2);\n              if (rs.wasNull()) {\n                nextId = 0;\n              }\n              int childId = rs.getInt(3);\n              if (rs.wasNull()) {\n                childId = 0;\n              }\n              int chanId = rs.getInt(4);\n              if (rs.wasNull()) {\n                chanId = 0;\n              }\n              String temp5=rs.getString(5); // Some JDBC drivers require columns accessed in order\n              String temp6=rs.getString(6); // Access 5 and 6 now, save till needed.\n\n              // uPortal i18n \n              int name_index, value_index;\n              if (localeAware) {\n                  ls = new LayoutStructure(structId, nextId, childId, chanId, rs.getString(7),rs.getString(8),rs.getString(9),localeManager.getLocale(rs.getString(10)));\n                  name_index=11;\n                  value_index=12;\n              }  else {\n                  ls = new LayoutStructure(structId, nextId, childId, chanId, rs.getString(7),rs.getString(8),rs.getString(9));\n                  name_index=10;\n                  value_index=11;\n              }\n              layoutStructure.put(new Integer(structId), ls);\n              lastStructId = structId;\n              if (!ls.isChannel()) {\n                ls.addFolderData(temp5, temp6); // Plug in saved column values\n              }\n              if (RDBMServices.supportsOuterJoins) {\n                do {\n                  String name = rs.getString(name_index);\n                  String value = rs.getString(value_index); // Oracle JDBC requires us to do this for longs\n                  if (name != null) { // may not be there because of the join\n                    ls.addParameter(name, value);\n                  }\n                  if (!rs.next()) {\n                    break readLayout;\n                  }\n                  structId = rs.getInt(1);\n                  if (rs.wasNull()) {\n                    structId = 0;\n                  }\n                } while (structId == lastStructId);\n              } else { // Do second SELECT later on for structure parameters\n                if (ls.isChannel()) {\n                  structChanIds.append(sepChar + ls.chanId);\n                  sepChar = \",\";\n                }\n                if (rs.next()) {\n                  structId = rs.getInt(1);\n                  if (rs.wasNull()) {\n                    structId = 0;\n                  }\n                } else {\n                  break readLayout;\n                }\n              }\n            } // while\n          }\n        } finally {\n          rs.close();\n        }\n\n        if (!RDBMServices.supportsOuterJoins) { // Pick up structure parameters\n          // first, get the struct ids for the channels\n          sql = \"SELECT STRUCT_ID FROM UP_LAYOUT_STRUCT WHERE USER_ID=\" + userId +\n            \" AND LAYOUT_ID=\" + layoutId +\n            \" AND CHAN_ID IN (\" + structChanIds.toString() + \") ORDER BY STRUCT_ID\";\n\n          LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sql);\n          StringBuffer structIdsSB = new StringBuffer( \"\" );\n          String sep = \"\";\n          rs = stmt.executeQuery(sql);\n          try {\n            // use the results to build a correct list of struct ids to look for\n            while( rs.next()) {\n              structIdsSB.append(sep + rs.getString(1));\n              sep = \",\";\n            }// while\n          } finally {\n            rs.close();\n          } // be a good doobie\n\n\n          sql = \"SELECT STRUCT_ID, STRUCT_PARM_NM,STRUCT_PARM_VAL FROM UP_LAYOUT_PARAM WHERE USER_ID=\" + userId + \" AND LAYOUT_ID=\" + layoutId +\n            \" AND STRUCT_ID IN (\" + structIdsSB.toString() + \") ORDER BY STRUCT_ID\";\n          LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sql);\n          rs = stmt.executeQuery(sql);\n          try {\n            if (rs.next()) {\n              int structId = rs.getInt(1);\n              readParm: while(true) {\n                LayoutStructure ls = (LayoutStructure)layoutStructure.get(new Integer(structId));\n                int lastStructId = structId;\n                do {\n                  ls.addParameter(rs.getString(2), rs.getString(3));\n                  if (!rs.next()) {\n                    break readParm;\n                  }\n                } while ((structId = rs.getInt(1)) == lastStructId);\n              }\n            }\n          } finally {\n            rs.close();\n          }\n        }\n\n        if (layoutStructure.size() > 0) { // We have a layout to work with\n          createLayout(layoutStructure, doc, root, firstStructId);\n          layoutStructure.clear();\n\n          long stopTime = System.currentTimeMillis();\n          LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): Layout document for user \" + userId + \" took \" +\n            (stopTime - startTime) + \" milliseconds to create\");\n          doc.appendChild(root);\n\n          if (DEBUG > 1) {\n            System.err.println(\"--> created document\");\n            dumpDoc(doc, \"\");\n            System.err.println(\"<--\");\n          }\n        }\n      } finally {\n        stmt.close();\n        insertStmt.close();\n      }\n      return  doc;\n    } finally {\n      RDBMServices.releaseConnection(con);\n    }\n  }","id":10666,"modified_method":"public Document getUserLayout (IPerson person, UserProfile profile) throws Exception {\n    int userId = person.getID();\n    int realUserId = userId;\n    ResultSet rs;\n    Connection con = RDBMServices.getConnection();\n    LocaleManager localeManager = profile.getLocaleManager();\n\n    RDBMServices.setAutoCommit(con, false);          // May speed things up, can't hurt\n\n    try {\n      Document doc = DocumentFactory.getNewDocument();\n      Element root = doc.createElement(\"layout\");\n      Statement stmt = con.createStatement();\n      // A separate statement is needed so as not to interfere with ResultSet\n      // of statements used for queries\n      Statement insertStmt = con.createStatement();\n      try {\n        long startTime = System.currentTimeMillis();\n        // eventually, we need to fix template layout implementations so you can just do this:\n        //        int layoutId=profile.getLayoutId();\n        // but for now:\n        String subSelectString = \"SELECT LAYOUT_ID FROM UP_USER_PROFILE WHERE USER_ID=\" + userId + \" AND PROFILE_ID=\" + profile.getProfileId();\n        LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + subSelectString);\n        int layoutId = 0;\n        rs = stmt.executeQuery(subSelectString);\n        try {\n            if (rs.next()) {\n              layoutId = rs.getInt(1);\n              if (rs.wasNull()) {\n                  layoutId = 0;\n              }\n            }\n        } finally {\n            rs.close();\n        }\n\n       if (layoutId == 0) { // First time, grab the default layout for this user\n          String sQuery = \"SELECT USER_DFLT_USR_ID, USER_DFLT_LAY_ID FROM UP_USER WHERE USER_ID=\" + userId;\n          LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sQuery);\n          rs = stmt.executeQuery(sQuery);\n          try {\n            rs.next();\n            userId = rs.getInt(1);\n            layoutId = rs.getInt(2);\n          } finally {\n            rs.close();\n          }\n\n          // Make sure the next struct id is set in case the user adds a channel\n          sQuery = \"SELECT NEXT_STRUCT_ID FROM UP_USER WHERE USER_ID=\" + userId;\n          LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sQuery);\n          int nextStructId;\n          rs = stmt.executeQuery(sQuery);\n          try {\n            rs.next();\n            nextStructId = rs.getInt(1);\n          } finally {\n            rs.close();\n          }\n          \n          int realNextStructId = 0;\n\n          if (realUserId != userId) {\n            // But never make the existing value SMALLER, change it only to make it LARGER\n            // (so, get existing value)\n            sQuery = \"SELECT NEXT_STRUCT_ID FROM UP_USER WHERE USER_ID=\" + realUserId;\n            LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sQuery);\n            rs = stmt.executeQuery(sQuery);\n            try {\n              rs.next();\n              realNextStructId = rs.getInt(1);\n            } finally {\n              rs.close();\n            }\n          }\n\n          if (nextStructId > realNextStructId) {\n            sQuery = \"UPDATE UP_USER SET NEXT_STRUCT_ID=\" + nextStructId + \" WHERE USER_ID=\" + realUserId;\n            LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sQuery);\n            stmt.executeUpdate(sQuery);\n          }\n          \n          /* insert row(s) into up_ss_user_atts */\n          sQuery = \"DELETE FROM UP_SS_USER_ATTS WHERE USER_ID=\" + realUserId;\n          LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sQuery);\n          stmt.executeUpdate(sQuery);\n          // modifed INSERT INTO SELECT statement for MySQL support\n          sQuery = \" SELECT \"+realUserId+\", PROFILE_ID, SS_ID, SS_TYPE, STRUCT_ID, PARAM_NAME, PARAM_TYPE, PARAM_VAL \"+\n            \" FROM UP_SS_USER_ATTS WHERE USER_ID=\"+userId;\n          rs = stmt.executeQuery(sQuery);\n\n          while (rs.next()) {\n             String Insert = \"INSERT INTO UP_SS_USER_ATTS (USER_ID, PROFILE_ID, SS_ID, SS_TYPE, STRUCT_ID, PARAM_NAME, PARAM_TYPE, PARAM_VAL) \" +\n             \"VALUES(\"+realUserId+\",\"+\n              rs.getInt(\"PROFILE_ID\")+\",\"+\n              rs.getInt(\"SS_ID\")+\",\" +\n              rs.getInt(\"SS_TYPE\")+\",\" +\n              rs.getInt(\"STRUCT_ID\")+\",\" +\n              \"'\"+rs.getString(\"PARAM_NAME\")+\"',\" +\n              rs.getInt(\"PARAM_TYPE\")+\",\" +\n              \"'\"+rs.getString(\"PARAM_VAL\")+\"')\";\n\n          LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + Insert);\n          insertStmt.executeUpdate(Insert);\n         }\n\n          // Close Result Set\n          if ( rs != null ) rs.close();\n\n          RDBMServices.commit(con); // Make sure it appears in the store\n        }\n\n        int firstStructId = -1;\n        String sQuery = \"SELECT INIT_STRUCT_ID FROM UP_USER_LAYOUT WHERE USER_ID=\" + userId + \" AND LAYOUT_ID = \" + layoutId;\n        LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sQuery);\n        rs = stmt.executeQuery(sQuery);\n        try {\n          if (rs.next()) {\n            firstStructId = rs.getInt(1);\n          } else {\n            throw new Exception(\"RDBMUserLayoutStore::getUserLayout(): No INIT_STRUCT_ID in UP_USER_LAYOUT for \" + userId + \" and LAYOUT_ID \" + layoutId);\n          }\n        } finally {\n          rs.close();\n        }\n\n        String sql;\n        if (localeAware) {\n            sql = \"SELECT ULS.STRUCT_ID,ULS.NEXT_STRUCT_ID,ULS.CHLD_STRUCT_ID,ULS.CHAN_ID,ULS.NAME,ULS.TYPE,ULS.HIDDEN,\"+\n          \"ULS.UNREMOVABLE,ULS.IMMUTABLE,ULS.LOCALE\";\n        }  else {\n            sql = \"SELECT ULS.STRUCT_ID,ULS.NEXT_STRUCT_ID,ULS.CHLD_STRUCT_ID,ULS.CHAN_ID,ULS.NAME,ULS.TYPE,ULS.HIDDEN,\"+\n          \"ULS.UNREMOVABLE,ULS.IMMUTABLE\";\n        }\n        if (RDBMServices.supportsOuterJoins) {\n          sql += \",USP.STRUCT_PARM_NM,USP.STRUCT_PARM_VAL FROM \" + RDBMServices.joinQuery.getQuery(\"layout\");\n        } else {\n          sql += \" FROM UP_LAYOUT_STRUCT ULS WHERE \";\n        }\n        sql += \" ULS.USER_ID=\" + userId + \" AND ULS.LAYOUT_ID=\" + layoutId + \" ORDER BY ULS.STRUCT_ID\";\n        HashMap layoutStructure = new HashMap();\n        LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sql);\n        StringBuffer structChanIds = new StringBuffer();\n        rs = stmt.executeQuery(sql);\n        try {\n          int lastStructId = 0;\n          LayoutStructure ls = null;\n          String sepChar = \"\";\n          if (rs.next()) {\n            int structId = rs.getInt(1);\n            // Result Set returns 0 by default if structId was null\n            // Except if you are using poolman 2.0.4 in which case you get -1 back\n            if (rs.wasNull()) {\n              structId = 0;\n            }\n            readLayout: while (true) {\n              if (DEBUG > 1) System.err.println(\"Found layout structureID \" + structId);\n\n              int nextId = rs.getInt(2);\n              if (rs.wasNull()) {\n                nextId = 0;\n              }\n              int childId = rs.getInt(3);\n              if (rs.wasNull()) {\n                childId = 0;\n              }\n              int chanId = rs.getInt(4);\n              if (rs.wasNull()) {\n                chanId = 0;\n              }\n              String temp5=rs.getString(5); // Some JDBC drivers require columns accessed in order\n              String temp6=rs.getString(6); // Access 5 and 6 now, save till needed.\n\n              // uPortal i18n \n              int name_index, value_index;\n              if (localeAware) {\n                  ls = new LayoutStructure(structId, nextId, childId, chanId, rs.getString(7),rs.getString(8),rs.getString(9),localeManager.getLocale(rs.getString(10)));\n                  name_index=11;\n                  value_index=12;\n              }  else {\n                  ls = new LayoutStructure(structId, nextId, childId, chanId, rs.getString(7),rs.getString(8),rs.getString(9));\n                  name_index=10;\n                  value_index=11;\n              }\n              layoutStructure.put(new Integer(structId), ls);\n              lastStructId = structId;\n              if (!ls.isChannel()) {\n                ls.addFolderData(temp5, temp6); // Plug in saved column values\n              }\n              if (RDBMServices.supportsOuterJoins) {\n                do {\n                  String name = rs.getString(name_index);\n                  String value = rs.getString(value_index); // Oracle JDBC requires us to do this for longs\n                  if (name != null) { // may not be there because of the join\n                    ls.addParameter(name, value);\n                  }\n                  if (!rs.next()) {\n                    break readLayout;\n                  }\n                  structId = rs.getInt(1);\n                  if (rs.wasNull()) {\n                    structId = 0;\n                  }\n                } while (structId == lastStructId);\n              } else { // Do second SELECT later on for structure parameters\n                if (ls.isChannel()) {\n                  structChanIds.append(sepChar + ls.chanId);\n                  sepChar = \",\";\n                }\n                if (rs.next()) {\n                  structId = rs.getInt(1);\n                  if (rs.wasNull()) {\n                    structId = 0;\n                  }\n                } else {\n                  break readLayout;\n                }\n              }\n            } // while\n          }\n        } finally {\n          rs.close();\n        }\n\n        if (!RDBMServices.supportsOuterJoins) { // Pick up structure parameters\n          // first, get the struct ids for the channels\n          sql = \"SELECT STRUCT_ID FROM UP_LAYOUT_STRUCT WHERE USER_ID=\" + userId +\n            \" AND LAYOUT_ID=\" + layoutId +\n            \" AND CHAN_ID IN (\" + structChanIds.toString() + \") ORDER BY STRUCT_ID\";\n\n          LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sql);\n          StringBuffer structIdsSB = new StringBuffer( \"\" );\n          String sep = \"\";\n          rs = stmt.executeQuery(sql);\n          try {\n            // use the results to build a correct list of struct ids to look for\n            while( rs.next()) {\n              structIdsSB.append(sep + rs.getString(1));\n              sep = \",\";\n            }// while\n          } finally {\n            rs.close();\n          } // be a good doobie\n\n\n          sql = \"SELECT STRUCT_ID, STRUCT_PARM_NM,STRUCT_PARM_VAL FROM UP_LAYOUT_PARAM WHERE USER_ID=\" + userId + \" AND LAYOUT_ID=\" + layoutId +\n            \" AND STRUCT_ID IN (\" + structIdsSB.toString() + \") ORDER BY STRUCT_ID\";\n          LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): \" + sql);\n          rs = stmt.executeQuery(sql);\n          try {\n            if (rs.next()) {\n              int structId = rs.getInt(1);\n              readParm: while(true) {\n                LayoutStructure ls = (LayoutStructure)layoutStructure.get(new Integer(structId));\n                int lastStructId = structId;\n                do {\n                  ls.addParameter(rs.getString(2), rs.getString(3));\n                  if (!rs.next()) {\n                    break readParm;\n                  }\n                } while ((structId = rs.getInt(1)) == lastStructId);\n              }\n            }\n          } finally {\n            rs.close();\n          }\n        }\n\n        if (layoutStructure.size() > 0) { // We have a layout to work with\n          createLayout(layoutStructure, doc, root, firstStructId);\n          layoutStructure.clear();\n\n          long stopTime = System.currentTimeMillis();\n          LogService.log(LogService.DEBUG, \"RDBMUserLayoutStore::getUserLayout(): Layout document for user \" + userId + \" took \" +\n            (stopTime - startTime) + \" milliseconds to create\");\n          doc.appendChild(root);\n\n          if (DEBUG > 1) {\n            System.err.println(\"--> created document\");\n            dumpDoc(doc, \"\");\n            System.err.println(\"<--\");\n          }\n        }\n      } finally {\n        stmt.close();\n        insertStmt.close();\n      }\n      return  doc;\n    } finally {\n      RDBMServices.releaseConnection(con);\n    }\n  }","commit_id":"09b7d47a46f0bf7aeab008f48901d50eeb59d82d","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n\t * Constructor for ContentExplorer application.  This sets up the swing elements and listeners for the GUI.\n\t * The constructor also initializes the CCNHandle and name enumeration.\n\t */\n\tpublic ContentExplorer() {\n\t\tsuper(\"CCN Content Explorer\");\n\t\tif (userName != null) this.setTitle(\"CCN Content Explorer for \" + userName);\n\t\t\n\t\t//vlcSupported = checkVLCsupport();\n\n\t\tsetupNameEnumerator();\n\n\t\tsetSize(400, 300);\n\n\t\tContentName slash = null;\n\t\tslash = ContentName.ROOT;\n\n\t\tDefaultMutableTreeNode top = new DefaultMutableTreeNode(new IconData(\n\t\t\t\tICON_FOLDER, null, new Name(slash.component(0), null, true)));\n\n\t\tDefaultMutableTreeNode node = top;\n\t\tDefaultMutableTreeNode newNode = null;\n\t\t// add each component of the root\n\t\tLog.fine(\"root = \" + root.toString());\n\t\tfor (int i = 0; i < root.count(); i++) {\n\t\t\tLog.fine(\"adding component: \" + root.stringComponent(i));\n\t\t\t// add each component to the tree\n\t\t\tnewNode = new DefaultMutableTreeNode(new IconData(ICON_FOLDER,\n\t\t\t\t\tnull, new Name(root.component(i), root.cut(i), true)));\n\t\t\tnode.add(newNode);\n\t\t\tnode = newNode;\n\t\t}\n\n\t\tusableRoot = top;\n\n\t\tm_model = new DefaultTreeModel(top);\n\t\ttree = new JTree(m_model);\n\n\t\ttree.putClientProperty(\"JTree.lineStyle\", \"Angled\");\n\n\t\tTreeCellRenderer renderer = new IconCellRenderer();\n\t\ttree.setCellRenderer(renderer);\n\n\t\tdirExpansionListener = new DirExpansionListener();\n\t\ttree.addTreeExpansionListener(dirExpansionListener);\n\t\tdirSelectionListener = new DirSelectionListener();\n\t\ttree.addTreeSelectionListener(dirSelectionListener);\n\n\t\ttree_popup = new JPopupMenu();\n\t\ttree_popupaction = new AbstractAction() {\n\n\t\t\tprivate static final long serialVersionUID = 9114007083621952181L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\t\tTreePath p = (TreePath)(tree_popupaction.getValue(\"PATH\"));\n\t\t\t\tif(p==null) {\n\t\t\t\t\t//System.err.println(\"path is null\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse if(tree.isExpanded(p)) {\n\t\t\t\t\ttree.collapsePath(p);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (e.getActionCommand().equals(\"Expand\")) {\n\t\t\t\t\t\tTreeExpansionEvent t = new TreeExpansionEvent(tree, p);\n\t\t\t\t\t\tdirExpansionListener.treeExpanded(t);\n\t\t\t\t\t\ttree.expandPath(p);\n\t\t\t\t\t} else if (e.getActionCommand().equals(\"Select\")) {\n\t\t\t\t\t\ttree.setSelectionPath(p);\n\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t}\n\t\t};\n\t\ttree_popup.add(tree_popupaction);\n\t\ttree_popup.addSeparator();\n\t\t\n\t\t\n\t\tAction displayName = new AbstractAction(\"Display Full Prefix\") {\n\n\t\t\tprivate static final long serialVersionUID = 6373543410642021178L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\t\ttree.repaint();\n\t\t\t\t\n\t\t\t\tTreePath p = (TreePath)(tree_popupaction.getValue(\"PATH\"));\n\n\t\t\t\tName node = getNameNode((DefaultMutableTreeNode) p.getLastPathComponent());\n\n\t\t\t\tContentName n = null;\n\t\t\t\t\n\t\t\t\tif(node.name == null && node.path == null)\n\t\t\t\t\tn = new ContentName();\n\t\t\t\telse\n\t\t\t\t\tn = new ContentName(node.path, node.name);\n\t\t\t\t\n\t\t\t\thtmlPane.setText(n.toString());\n\t\t\t}\n\t\t};\n\t\t\n\t\ttree_popup.add(displayName);\n\t\t\n\t\tAction saveFile = new AbstractAction(\"Save File\") {\n\n\t\t\tprivate static final long serialVersionUID = -3770094703319020441L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\t\ttree.repaint();\n\n\t\t\t\tTreePath p = (TreePath)(tree_popupaction.getValue(\"PATH\"));\n\n\t\t\t\tName node = getNameNode((DefaultMutableTreeNode) p.getLastPathComponent());\n\t\t\t\t\t\n\t\t\t\tContentName name = null;\n\t\t\t\t\n\t\t\t\tif(node.name == null && node.path == null)\n\t\t\t\t\tname = new ContentName();\n\t\t\t\telse\n\t\t\t\t\tname = new ContentName(node.path, node.name);\n\t\t\t\tLocalSaveContentRetriever localsave = new LocalSaveContentRetriever(_handle, name, htmlPane);\n\t\t\t\tThread t = new Thread(localsave);\n\t\t\t\tt.start();\n\t\t\t\n\t\t\t}\n\t\t};\n\t\t\n\t\ttree_popup.add(saveFile);\n\t\t\n\t\tAction playFile = new AbstractAction(\"Play File\") {\n\n\t\t\tprivate static final long serialVersionUID = -2932828512965050415L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\t\ttree.repaint();\n\t\t\t\thtmlPane.setText(\"play file with VLC not implemented yet\");\n\t\t\t\t\n\t\t\t}\n\t\t};\n\t\tif(vlcSupported)\n\t\t\ttree_popup.add(playFile);\n\t\t\n\t\tAction showVersions = new AbstractAction(\"Show Versions\") {\n\n\t\t\tprivate static final long serialVersionUID = -827879841202976452L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\t\ttree.repaint();\n\t\t\t\thtmlPane.setText(\"display versions of file not implemented yet\");\n\t\t\t\tString toDisplay = \"\";\n\t\t\t\tTreePath p = (TreePath)(tree_popupaction.getValue(\"PATH\"));\n\n\t\t\t\tName node = getNameNode((DefaultMutableTreeNode) p.getLastPathComponent());\n\t\t\t\tSet<ContentName> versions = node.getVersions();\n\t\t\t\tsynchronized(versions) {\n\t\t\t\t\tfor(ContentName c: versions) {\n\t\t\t\t\t\ttoDisplay = toDisplay+c.toString()+\"\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tif (toDisplay.equals(\"\")) {\n\t\t\t\t\thtmlPane.setText(\"Version numbers are currently not available for this name. \\nThis can occur if the node was not previously selected.\");\n\t\t\t\t} else {\n\t\t\t\t\thtmlPane.setText(toDisplay);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\t\n\t\ttree_popup.add(showVersions);\n\t\t\n\t\ttree.add(tree_popup);\n\t\t\n\t\ttree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);\n\t\ttree.setShowsRootHandles(true);\n\t\ttree.setEditable(false);\n\n\t\tString filename = \"~/\";\n\t\tJFileChooser fc = new JFileChooser(new File(filename));\n\n\t\tclass OpenFileAction extends AbstractAction {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tJFrame frame;\n\n\t\t\tJFileChooser chooser;\n\n\t\t\tOpenFileAction(JFrame frame, JFileChooser chooser) {\n\t\t\t\tsuper(\"Send to Repo...\");\n\t\t\t\tthis.chooser = chooser;\n\t\t\t\tthis.frame = frame;\n\t\t\t}\n\n\t\t\tpublic void actionPerformed(ActionEvent evt) {\n\n\t\t\t\t// if we don't have a file then we should show a file chooser\n\t\t\t\t// otherwise give an error message \"Please select a folder\"\n\n\t\t\t\t//commented out this behavior.  we have many things that do have a . in them.  also\n\t\t\t\t//when showing versions, they may have characters that are interpreted as a .\n\t\t\t\t\n\t\t\t\t/*if (((selectedPrefix.toString()).split(\"\\\\.\")).length > 2) {\n\t\t\t\t*\tJOptionPane.showMessageDialog(this.frame,\n\t\t\t\t*\t\t\t\"Please Select a Directory to add a file\",\n\t\t\t\t  *\t\t\t\"Select Directory\", JOptionPane.ERROR_MESSAGE);\n\t\t\t\t * } else {\n\t\t\t\t * \n\t\t\t\t */\n\t\t\t\t\t// Show dialog; this method does not return until dialog is\n\t\t\t\t\t// closed\n\n\t\t\t\t\tint returnVal = chooser.showOpenDialog(frame);\n\n\t\t\t\t\t// Get the selected file\n\t\t\t\t\tFile file = chooser.getSelectedFile();\n\t\t\t\t\tif (file == null || file.getName().equals(\"\")) {\n\t\t\t\t\t\tLog.fine(\"the user did not select a file\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// what if the user hits cancel...\n\t\t\t\t\tif (returnVal != JFileChooser.APPROVE_OPTION) {\n\t\t\t\t\t\tLog.fine(\"user cancelled the send to repo option...  returning\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tLog.info(\"Writing a file to the repo \" + file.getAbsolutePath() + \" \" + file.getName());\n\t\t\t\t\tLog.fine(\"Selected Node is \" + selectedPrefix);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tContentName contentName = ContentName.fromURI(selectedPrefix).append(file.getName());\n\t\t\t\t\t\tContentName temp = null;\n\t\t\t\t\t\twhile (temp==null) {\n\t\t\t\t\t\t\tString name = JOptionPane.showInputDialog(\"Send File to Repo As:\", contentName.toString());\n\t\t\t\t\t\t\tif (name == null) {\n\t\t\t\t\t\t\t\tLog.fine(\"user selected cancel, returning\");\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tLog.info(\"user entered [{0}]\", name);\n\t\t\t\t\t\t\t//System.out.println(\"user entered [\"+name+\"]\");\n\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tif (name.startsWith(\"ccnx:/\"))\n\t\t\t\t\t\t\t\t\tname = name.replaceFirst(\"ccnx:/\", \"/\");\n\t\t\t\t\t\t\t\ttemp = ContentName.fromURI(name);\n\t\t\t\t\t\t\t\t//temp = ContentName.fromNative(name);\n\t\t\t\t\t\t\t\tcontentName = temp;\n\t\t\t\t\t\t\t\tLog.info(\"saving as [{0}]\", contentName);\n\t\t\t\t\t\t\t\t//System.out.println(\"saving as [\"+contentName+\"]\");\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\t\t\tLog.fine(\"User entered invalid name for save: {0}\", e.getMessage());\n\t\t\t\t\t\t\t\tif(name.equals(\"\"))\n\t\t\t\t\t\t\t\t\tJOptionPane.showMessageDialog(chooser, \"Please enter a CCNx name for the content that starts with \\\"/\\\".\");\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tJOptionPane.showMessageDialog(chooser, (name + \" is not a valid CCNx name.  Please be sure it starts with \\\"/\\\"\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tsendFile(file, contentName);\n\t\t\t\t\t} catch (MalformedContentNameStringException e) {\n\t\t\t\t\t\tLog.logException(\"could not create content name for selected file: \"+file.getName(), e);\n\t\t\t\t\t//}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t;\n\n\t\tAction openAction = new OpenFileAction(this, fc);\n\t\tJButton openButton = new JButton(openAction);\n\n\t\topenACL = new JButton(\"Manage Permissions\");\n\t\topenACL.addActionListener(this);\n\n\t\topenGroup = new JButton(\"Open Group Manager\");\n\t\topenGroup.addActionListener(this);\n\n\t\t// Create the scroll pane and add the tree to it.\n\t\tJScrollPane treeView = new JScrollPane(tree);\n\n\t\t// Create the HTML viewing pane.\n\t\thtmlPane = new JEditorPane();\n\t\thtmlPane.setEditable(false);\n\t\tinitHelp();\n\t\tJScrollPane htmlView = new JScrollPane(htmlPane);\n\n\t\ttextArea = new JTextField();\n\t\ttextArea.setEditable(false);\n\t\ttextArea.setText(\"here is where names will appear\");\n\t\t\n\t\t//Component c1 = new ExplorerPanel();\n\t\t//Component c2 = new TextPanel();\n\t\t\n\t\t// Add the scroll panes to a split pane.\n\t\tJSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);\n\t\tsplitPane.setContinuousLayout(true);\n\t\tsplitPane.setOneTouchExpandable(true);\n\t\tsplitPane.setTopComponent(treeView);\n\t\tsplitPane.setBottomComponent(htmlView);\n\t\t//splitPane.setBottomComponent(textArea);\n\t\tDimension minimumSize = new Dimension(100, 50);\n\t\thtmlView.setMinimumSize(minimumSize);\n\t\ttreeView.setMinimumSize(minimumSize);\n\t\tsplitPane.setDividerLocation(250);\n\t\tsplitPane.setPreferredSize(new Dimension(500, 300));\n\n\t\tsetLayout(new GridBagLayout());\n\t\tGridBagConstraints c = new GridBagConstraints();\n\n\t\tc.fill = GridBagConstraints.BOTH;\n\t\tc.gridx = 0;\n\t\tc.gridy = 1;\n\t\tif (accessControlOn)\n\t\t\tgetContentPane().add(openACL, c);\n\n\t\tc.fill = GridBagConstraints.BOTH;\n\t\tc.gridx = 1;\n\t\tc.gridy = 1;\n\t\tif (accessControlOn)\n\t\t\tgetContentPane().add(openGroup, c);\n\n\t\tc.fill = GridBagConstraints.BOTH;\n\t\tc.gridwidth = 2;\n\t\tc.gridx = 0;\n\t\tc.gridy = 0;\n\t\tgetContentPane().add(openButton, c);\n\n\t\tc.weightx = 1;\n\t\tc.weighty = 1;\n\t\tc.fill = GridBagConstraints.BOTH;\n\t\tc.gridwidth = 2;\n\t\tc.gridx = 0;\n\t\tc.gridy = 2;\n\t\tgetContentPane().add(splitPane, c);\n\n\t\tpack();\n\n\t\tLog.fine(\"setting selectionPath: \" + node.getPath()+ \" node: \" + node.toString());\n\t\ttree.expandPath(new TreePath(node.getPath()));\n\t\ttree.setSelectionPath(new TreePath(node.getPath()));\n\n\t\ttree.addMouseListener(new MouseActions());\n\n\t\tWindowListener wndCloser = new WindowAdapter() {\n\t\t\tpublic void windowClosing(WindowEvent e) {\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t};\n\t\taddWindowListener(wndCloser);\n\n\t\tsetVisible(true);\n\n\t}","id":10667,"modified_method":"/**\n\t * Constructor for ContentExplorer application.  This sets up the swing elements and listeners for the GUI.\n\t * The constructor also initializes the CCNHandle and name enumeration.\n\t */\n\tpublic ContentExplorer() {\n\t\tsuper(\"CCN Content Explorer\");\n\t\tif (userName != null) this.setTitle(\"CCN Content Explorer for \" + userName);\n\n\t\t//vlcSupported = checkVLCsupport();\n\n\t\tsetupNameEnumerator();\n\n\t\tsetSize(400, 300);\n\n\t\tContentName slash = null;\n\t\tslash = ContentName.ROOT;\n\n\t\tDefaultMutableTreeNode top = new DefaultMutableTreeNode(new IconData(\n\t\t\t\tICON_FOLDER, null, new Name(slash.component(0), null, true)));\n\n\t\tDefaultMutableTreeNode node = top;\n\t\tDefaultMutableTreeNode newNode = null;\n\t\t// add each component of the root\n\t\tLog.fine(\"root = \" + root.toString());\n\t\tfor (int i = 0; i < root.count(); i++) {\n\t\t\tLog.fine(\"adding component: \" + root.stringComponent(i));\n\t\t\t// add each component to the tree\n\t\t\tnewNode = new DefaultMutableTreeNode(new IconData(ICON_FOLDER,\n\t\t\t\t\tnull, new Name(root.component(i), root.cut(i), true)));\n\t\t\tnode.add(newNode);\n\t\t\tnode = newNode;\n\t\t}\n\n\t\tusableRoot = top;\n\n\t\tm_model = new DefaultTreeModel(top);\n\t\ttree = new JTree(m_model);\n\n\t\ttree.putClientProperty(\"JTree.lineStyle\", \"Angled\");\n\n\t\tTreeCellRenderer renderer = new IconCellRenderer();\n\t\ttree.setCellRenderer(renderer);\n\n\t\tdirExpansionListener = new DirExpansionListener();\n\t\ttree.addTreeExpansionListener(dirExpansionListener);\n\t\tdirSelectionListener = new DirSelectionListener();\n\t\ttree.addTreeSelectionListener(dirSelectionListener);\n\n\t\ttree_popup = new JPopupMenu();\n\t\ttree_popupaction = new AbstractAction() {\n\n\t\t\tprivate static final long serialVersionUID = 9114007083621952181L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\t\tTreePath p = (TreePath)(tree_popupaction.getValue(\"PATH\"));\n\t\t\t\tif(p==null) {\n\t\t\t\t\t//System.err.println(\"path is null\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse if(tree.isExpanded(p)) {\n\t\t\t\t\ttree.collapsePath(p);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tif (e.getActionCommand().equals(\"Expand\")) {\n\t\t\t\t\t\tTreeExpansionEvent t = new TreeExpansionEvent(tree, p);\n\t\t\t\t\t\tdirExpansionListener.treeExpanded(t);\n\t\t\t\t\t\ttree.expandPath(p);\n\t\t\t\t\t} else if (e.getActionCommand().equals(\"Select\")) {\n\t\t\t\t\t\ttree.setSelectionPath(p);\n\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t}\n\t\t};\n\t\ttree_popup.add(tree_popupaction);\n\t\ttree_popup.addSeparator();\n\n\n\t\tAction displayName = new AbstractAction(\"Display Full Prefix\") {\n\n\t\t\tprivate static final long serialVersionUID = 6373543410642021178L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\t\ttree.repaint();\n\n\t\t\t\tTreePath p = (TreePath)(tree_popupaction.getValue(\"PATH\"));\n\n\t\t\t\tName node = getNameNode((DefaultMutableTreeNode) p.getLastPathComponent());\n\n\t\t\t\tContentName n = null;\n\n\t\t\t\tif(node.name == null && node.path == null)\n\t\t\t\t\tn = new ContentName();\n\t\t\t\telse\n\t\t\t\t\tn = new ContentName(node.path, node.name);\n\n\t\t\t\thtmlPane.setText(n.toString());\n\t\t\t}\n\t\t};\n\n\t\ttree_popup.add(displayName);\n\n\t\tAction saveFile = new AbstractAction(\"Save File\") {\n\n\t\t\tprivate static final long serialVersionUID = -3770094703319020441L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\t\ttree.repaint();\n\n\t\t\t\tTreePath p = (TreePath)(tree_popupaction.getValue(\"PATH\"));\n\n\t\t\t\tName node = getNameNode((DefaultMutableTreeNode) p.getLastPathComponent());\n\n\t\t\t\tContentName name = null;\n\n\t\t\t\tif(node.name == null && node.path == null)\n\t\t\t\t\tname = new ContentName();\n\t\t\t\telse\n\t\t\t\t\tname = new ContentName(node.path, node.name);\n\t\t\t\tLocalSaveContentRetriever localsave = new LocalSaveContentRetriever(_handle, name, htmlPane);\n\t\t\t\tThread t = new Thread(localsave);\n\t\t\t\tt.start();\n\n\t\t\t}\n\t\t};\n\n\t\ttree_popup.add(saveFile);\n\n\t\tAction playFile = new AbstractAction(\"Play File\") {\n\n\t\t\tprivate static final long serialVersionUID = -2932828512965050415L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\t\ttree.repaint();\n\t\t\t\thtmlPane.setText(\"play file with VLC not implemented yet\");\n\n\t\t\t}\n\t\t};\n\t\tif(vlcSupported)\n\t\t\ttree_popup.add(playFile);\n\n\t\tAction showVersions = new AbstractAction(\"Show Versions\") {\n\n\t\t\tprivate static final long serialVersionUID = -827879841202976452L;\n\n\t\t\tpublic void actionPerformed(ActionEvent e){\n\t\t\t\ttree.repaint();\n\t\t\t\thtmlPane.setText(\"display versions of file not implemented yet\");\n\t\t\t\tString toDisplay = \"\";\n\t\t\t\tTreePath p = (TreePath)(tree_popupaction.getValue(\"PATH\"));\n\n\t\t\t\tName node = getNameNode((DefaultMutableTreeNode) p.getLastPathComponent());\n\t\t\t\tSet<ContentName> versions = node.getVersions();\n\t\t\t\tsynchronized(versions) {\n\t\t\t\t\tfor(ContentName c: versions) {\n\t\t\t\t\t\ttoDisplay = toDisplay+c.toString()+\"\\n\";\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (toDisplay.equals(\"\")) {\n\t\t\t\t\thtmlPane.setText(\"Version numbers are currently not available for this name. \\nThis can occur if the node was not previously selected.\");\n\t\t\t\t} else {\n\t\t\t\t\thtmlPane.setText(toDisplay);\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\n\t\ttree_popup.add(showVersions);\n\n\t\ttree.add(tree_popup);\n\n\t\ttree.getSelectionModel().setSelectionMode(TreeSelectionModel.SINGLE_TREE_SELECTION);\n\t\ttree.setShowsRootHandles(true);\n\t\ttree.setEditable(false);\n\n\t\tString filename = \"~/\";\n\t\tJFileChooser fc = new JFileChooser(new File(filename));\n\n\t\tclass OpenFileAction extends AbstractAction {\n\n\t\t\tprivate static final long serialVersionUID = 1L;\n\t\t\tJFrame frame;\n\n\t\t\tJFileChooser chooser;\n\n\t\t\tOpenFileAction(JFrame frame, JFileChooser chooser) {\n\t\t\t\tsuper(\"Send to Repo...\");\n\t\t\t\tthis.chooser = chooser;\n\t\t\t\tthis.frame = frame;\n\t\t\t}\n\n\t\t\tpublic void actionPerformed(ActionEvent evt) {\n\n\t\t\t\t// if we don't have a file then we should show a file chooser\n\t\t\t\t// otherwise give an error message \"Please select a folder\"\n\n\t\t\t\t//commented out this behavior.  we have many things that do have a . in them.  also\n\t\t\t\t//when showing versions, they may have characters that are interpreted as a .\n\n\t\t\t\t/*if (((selectedPrefix.toString()).split(\"\\\\.\")).length > 2) {\n\t\t\t\t*\tJOptionPane.showMessageDialog(this.frame,\n\t\t\t\t*\t\t\t\"Please Select a Directory to add a file\",\n\t\t\t\t  *\t\t\t\"Select Directory\", JOptionPane.ERROR_MESSAGE);\n\t\t\t\t * } else {\n\t\t\t\t *\n\t\t\t\t */\n\t\t\t\t\t// Show dialog; this method does not return until dialog is\n\t\t\t\t\t// closed\n\n\t\t\t\t\tint returnVal = chooser.showOpenDialog(frame);\n\n\t\t\t\t\t// Get the selected file\n\t\t\t\t\tFile file = chooser.getSelectedFile();\n\t\t\t\t\tif (file == null || file.getName().equals(\"\")) {\n\t\t\t\t\t\tLog.fine(\"the user did not select a file\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\t// what if the user hits cancel...\n\t\t\t\t\tif (returnVal != JFileChooser.APPROVE_OPTION) {\n\t\t\t\t\t\tLog.fine(\"user cancelled the send to repo option...  returning\");\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tLog.info(\"Writing a file to the repo \" + file.getAbsolutePath() + \" \" + file.getName());\n\t\t\t\t\tLog.fine(\"Selected Node is \" + selectedPrefix);\n\n\t\t\t\t\ttry {\n\t\t\t\t\t\tContentName contentName = ContentName.fromURI(selectedPrefix).append(file.getName());\n\t\t\t\t\t\tContentName temp = null;\n\t\t\t\t\t\twhile (temp==null) {\n\t\t\t\t\t\t\tString name = JOptionPane.showInputDialog(\"Send File to Repo As:\", contentName.toString());\n\t\t\t\t\t\t\tif (name == null) {\n\t\t\t\t\t\t\t\tLog.fine(\"user selected cancel, returning\");\n\t\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tLog.info(\"user entered [{0}]\", name);\n\t\t\t\t\t\t\t//System.out.println(\"user entered [\"+name+\"]\");\n\n\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tif (name.startsWith(\"ccnx:/\"))\n\t\t\t\t\t\t\t\t\tname = name.replaceFirst(\"ccnx:/\", \"/\");\n\t\t\t\t\t\t\t\ttemp = ContentName.fromURI(name);\n\t\t\t\t\t\t\t\t//temp = ContentName.fromNative(name);\n\t\t\t\t\t\t\t\tcontentName = temp;\n\t\t\t\t\t\t\t\tLog.info(\"saving as [{0}]\", contentName);\n\t\t\t\t\t\t\t\t//System.out.println(\"saving as [\"+contentName+\"]\");\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tcatch (Exception e) {\n\t\t\t\t\t\t\t\tLog.fine(\"User entered invalid name for save: {0}\", e.getMessage());\n\t\t\t\t\t\t\t\tif(name.equals(\"\"))\n\t\t\t\t\t\t\t\t\tJOptionPane.showMessageDialog(chooser, \"Please enter a CCNx name for the content that starts with \\\"/\\\".\");\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\tJOptionPane.showMessageDialog(chooser, (name + \" is not a valid CCNx name.  Please be sure it starts with \\\"/\\\"\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tsendFile(file, contentName);\n\t\t\t\t\t} catch (MalformedContentNameStringException e) {\n\t\t\t\t\t\tLog.logException(\"could not create content name for selected file: \"+file.getName(), e);\n\t\t\t\t\t//}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t;\n\n\t\tAction openAction = new OpenFileAction(this, fc);\n\t\tJButton openButton = new JButton(openAction);\n\n\t\topenACL = new JButton(\"Manage Permissions\");\n\t\topenACL.addActionListener(this);\n\n\t\topenGroup = new JButton(\"Open Group Manager\");\n\t\topenGroup.addActionListener(this);\n\n\t\t// Create the scroll pane and add the tree to it.\n\t\tJScrollPane treeView = new JScrollPane(tree);\n\n\t\t// Create the HTML viewing pane.\n\t\thtmlPane = new JEditorPane();\n\t\thtmlPane.setEditable(false);\n\t\tinitHelp();\n\t\tJScrollPane htmlView = new JScrollPane(htmlPane);\n\n\t\ttextArea = new JTextField();\n\t\ttextArea.setEditable(false);\n\t\ttextArea.setText(\"here is where names will appear\");\n\n\t\t//Component c1 = new ExplorerPanel();\n\t\t//Component c2 = new TextPanel();\n\n\t\t// Add the scroll panes to a split pane.\n\t\tJSplitPane splitPane = new JSplitPane(JSplitPane.VERTICAL_SPLIT);\n\t\tsplitPane.setContinuousLayout(true);\n\t\tsplitPane.setOneTouchExpandable(true);\n\t\tsplitPane.setTopComponent(treeView);\n\t\tsplitPane.setBottomComponent(htmlView);\n\t\t//splitPane.setBottomComponent(textArea);\n\t\tDimension minimumSize = new Dimension(100, 50);\n\t\thtmlView.setMinimumSize(minimumSize);\n\t\ttreeView.setMinimumSize(minimumSize);\n\t\tsplitPane.setDividerLocation(250);\n\t\tsplitPane.setPreferredSize(new Dimension(500, 300));\n\n\t\tsetLayout(new GridBagLayout());\n\t\tGridBagConstraints c = new GridBagConstraints();\n\n\t\tc.fill = GridBagConstraints.BOTH;\n\t\tc.gridx = 0;\n\t\tc.gridy = 1;\n\t\tif (accessControlOn)\n\t\t\tgetContentPane().add(openACL, c);\n\n\t\tc.fill = GridBagConstraints.BOTH;\n\t\tc.gridx = 1;\n\t\tc.gridy = 1;\n\t\tif (accessControlOn)\n\t\t\tgetContentPane().add(openGroup, c);\n\n\t\tc.fill = GridBagConstraints.BOTH;\n\t\tc.gridwidth = 2;\n\t\tc.gridx = 0;\n\t\tc.gridy = 0;\n\t\tgetContentPane().add(openButton, c);\n\n\t\tc.weightx = 1;\n\t\tc.weighty = 1;\n\t\tc.fill = GridBagConstraints.BOTH;\n\t\tc.gridwidth = 2;\n\t\tc.gridx = 0;\n\t\tc.gridy = 2;\n\t\tgetContentPane().add(splitPane, c);\n\n\t\tpack();\n\n\t\tLog.fine(\"setting selectionPath: \" + node.getPath()+ \" node: \" + node.toString());\n\t\ttree.expandPath(new TreePath(node.getPath()));\n\t\ttree.setSelectionPath(new TreePath(node.getPath()));\n\n\t\ttree.addMouseListener(new MouseActions());\n\n\t\tWindowListener wndCloser = new WindowAdapter() {\n\t\t\t@Override\n\t\t\tpublic void windowClosing(WindowEvent e) {\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t};\n\t\taddWindowListener(wndCloser);\n\n\t\tsetVisible(true);\n\n\t}","commit_id":"8ad78b64e339a360482425ac2d10a206fbe3b23f","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Main method for the ContentExplorer GUI.  The GUI defaults to exploring \"/\" but takes a -root option for exploring\n\t * alternate namespaces.\n\t * \n\t * @param args String[] of the arguments for the GUI.  (path to explore and optional experimental access control GUI)\n\t */\n\tpublic static void main(String[] args) {\n\t\tLog.setDefaultLevel(Level.WARNING);\n\t\tif (args.length > 0) {\n\t\t\t// we have some options\n\t\t\tfor (int i = 0; i < args.length; i++) {\n\t\t\t\tString s = args[i];\n\t\t\t\tif (s.equalsIgnoreCase(\"-root\")) {\n\t\t\t\t\ti++;\n\t\t\t\t\ttry {\n\t\t\t\t\t\troot = ContentName.fromURI(args[i]);\n\t\t\t\t\t} catch (MalformedContentNameStringException e) {\n\t\t\t\t\t\tLog.warning(\"Could not parse root path: \" + args[i]\t+ \" (exiting)\");\n\t\t\t\t\t\tSystem.err.println(\"Could not parse root path: \" + args[i] + \" (exiting)\");\n\t\t\t\t\t\tSystem.exit(1);\n\t\t\t\t\t}\n\t\t\t\t} else if (s.equals(\"-accessControl\")) {\n\t\t\t\t\taccessControlOn = true;\n\t\t\t\t} else if (s.equals(\"-showVersions\")) {\n\t\t\t\t\tshowVersions = true;\n\t\t\t\t} else if (s.equals(\"-debugMode\")) {\n\t\t\t\t\tdebugMode = true;\n\t\t\t\t} else {\n\t\t\t\t\tusage();\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (root == null) {\n\t\t\ttry {\n\t\t\t\troot = ContentName.fromNative(\"/\");\n\t\t\t} catch (MalformedContentNameStringException e) {\n\t\t\t\tLog.warning(\"Could not parse root path: / (exiting)\");\n\t\t\t\tSystem.err.println(\"Could not parse root path: / (exiting)\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t}\n\n\t\tjavax.swing.SwingUtilities.invokeLater(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tcreateAndShowGUI();\n\t\t\t}\n\t\t});\n\t}","id":10668,"modified_method":"/**\n\t * Main method for the ContentExplorer GUI.  The GUI defaults to exploring \"/\" but takes a -root option for exploring\n\t * alternate namespaces.\n\t *\n\t * @param args String[] of the arguments for the GUI.  (path to explore and optional experimental access control GUI)\n\t */\n\tpublic static void main(String[] args) {\n\t\tLog.setDefaultLevel(Level.WARNING);\n\t\tif (args.length > 0) {\n\t\t\t// we have some options\n\t\t\tString extraUsage = \"\";\n\t\t\tfor (int i = 0; i < args.length; i++) {\n\t\t\t\tif (i == 0 && args[0].startsWith(\"[\")) {\n\t\t\t\t\textraUsage = args[0];\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (args[i].equals(\"-h\")) {\n\t\t\t\t\tusage(extraUsage);\n\t\t\t\t}\n\t\t\t\tString s = args[i];\n\t\t\t\tif (s.equalsIgnoreCase(\"-root\")) {\n\t\t\t\t\ti++;\n\t\t\t\t\ttry {\n\t\t\t\t\t\troot = ContentName.fromURI(args[i]);\n\t\t\t\t\t} catch (MalformedContentNameStringException e) {\n\t\t\t\t\t\tLog.warning(\"Could not parse root path: \" + args[i]\t+ \" (exiting)\");\n\t\t\t\t\t\tSystem.err.println(\"Could not parse root path: \" + args[i] + \" (exiting)\");\n\t\t\t\t\t\tSystem.exit(1);\n\t\t\t\t\t}\n\t\t\t\t} else if (s.equals(\"-accessControl\")) {\n\t\t\t\t\taccessControlOn = true;\n\t\t\t\t} else if (s.equals(\"-showVersions\")) {\n\t\t\t\t\tshowVersions = true;\n\t\t\t\t} else if (s.equals(\"-debugMode\")) {\n\t\t\t\t\tdebugMode = true;\n\t\t\t\t} else {\n\t\t\t\t\tusage(extraUsage);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tif (root == null) {\n\t\t\ttry {\n\t\t\t\troot = ContentName.fromNative(\"/\");\n\t\t\t} catch (MalformedContentNameStringException e) {\n\t\t\t\tLog.warning(\"Could not parse root path: / (exiting)\");\n\t\t\t\tSystem.err.println(\"Could not parse root path: / (exiting)\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t}\n\n\t\tjavax.swing.SwingUtilities.invokeLater(new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\tcreateAndShowGUI();\n\t\t\t}\n\t\t});\n\t}","commit_id":"8ad78b64e339a360482425ac2d10a206fbe3b23f","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t\t * Method to handle selection events.  If a node is selected for the first time and is a folder,\n\t\t * name enumeration will begin under that prefix.  This event is also triggered as the tree is collapsed.\n\t\t * In this case, we do not want to reselect nodes that were already canceled since\n\t\t * enumeration will be started again.  To avoid this, the method checks if the path has any parent collapsed,\n\t\t * if so, the event is not processed so name enumeration will not be restarted.\n\t\t * \n\t\t * @param event TreeSelectionEvent object to handle.\n\t\t * @return void\n\t\t */\n\t\tpublic void valueChanged(TreeSelectionEvent event) {\n\n\t\t\tfinal DefaultMutableTreeNode node = getTreeNode(event.getPath());\n\n\t\t\t// if the tree is not collapsed already, it is already being\n\t\t\t// enumerated, so we don't need to reselect it\n\t\t\t// if the row is -1, that means a parent is collapsed and this node\n\t\t\t// is being\n\t\t\t// selected as part of a collapse, so we don't want to re-register\n\t\t\t// it for enumerating\n\t\t\t\n\t\t\tif (tree.getRowForPath(event.getPath()) > -1) {\n\t\t\t\ttree.setSelectionPath(event.getPath());\n\t\t\t\tThread runner = new Thread() {\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tLog.fine(\"getting name node: \" + node.toString());\n\t\t\t\t\t\tName fnode = getNameNode(node);\n\n\t\t\t\t\t\tif (fnode == null) {\n\t\t\t\t\t\t\tLog.fine(\"fnode path is null...\");\n\t\t\t\t\t\t\t// selected top component, switch to top\n\t\t\t\t\t\t\t// usable node\n\t\t\t\t\t\t\tfnode = getNameNode(usableRoot);\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\tLog.fine(\"In the tree selection listener with \"\t+ fnode.name + \" and \" + node.toString());\n\t\t\t\t\t\tString p = getNodes(fnode);\n\t\t\t\t\t\tselectedPath = p;\n\t\t\t\t\t\tselectedPrefix = p;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\trunner.start();\n\t\t\t}\n\t\t}","id":10669,"modified_method":"/**\n\t\t * Method to handle selection events.  If a node is selected for the first time and is a folder,\n\t\t * name enumeration will begin under that prefix.  This event is also triggered as the tree is collapsed.\n\t\t * In this case, we do not want to reselect nodes that were already canceled since\n\t\t * enumeration will be started again.  To avoid this, the method checks if the path has any parent collapsed,\n\t\t * if so, the event is not processed so name enumeration will not be restarted.\n\t\t *\n\t\t * @param event TreeSelectionEvent object to handle.\n\t\t * @return void\n\t\t */\n\t\tpublic void valueChanged(TreeSelectionEvent event) {\n\n\t\t\tfinal DefaultMutableTreeNode node = getTreeNode(event.getPath());\n\n\t\t\t// if the tree is not collapsed already, it is already being\n\t\t\t// enumerated, so we don't need to reselect it\n\t\t\t// if the row is -1, that means a parent is collapsed and this node\n\t\t\t// is being\n\t\t\t// selected as part of a collapse, so we don't want to re-register\n\t\t\t// it for enumerating\n\n\t\t\tif (tree.getRowForPath(event.getPath()) > -1) {\n\t\t\t\ttree.setSelectionPath(event.getPath());\n\t\t\t\tThread runner = new Thread() {\n\t\t\t\t\t@Override\n\t\t\t\t\tpublic void run() {\n\t\t\t\t\t\tLog.fine(\"getting name node: \" + node.toString());\n\t\t\t\t\t\tName fnode = getNameNode(node);\n\n\t\t\t\t\t\tif (fnode == null) {\n\t\t\t\t\t\t\tLog.fine(\"fnode path is null...\");\n\t\t\t\t\t\t\t// selected top component, switch to top\n\t\t\t\t\t\t\t// usable node\n\t\t\t\t\t\t\tfnode = getNameNode(usableRoot);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tLog.fine(\"In the tree selection listener with \"\t+ fnode.name + \" and \" + node.toString());\n\t\t\t\t\t\tString p = getNodes(fnode);\n\t\t\t\t\t\tselectedPath = p;\n\t\t\t\t\t\tselectedPrefix = p;\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\t\trunner.start();\n\t\t\t}\n\t\t}","commit_id":"8ad78b64e339a360482425ac2d10a206fbe3b23f","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public static boolean parseArguments(String[] args, int i, Usage u) {\n\t\tboolean ret = true;\n\t\tif (args[i].equals(\"-unversioned\")) {\n\t\t\tCommonParameters.unversioned = true;\n\t\t} else if (args[i].equals(\"-timeout\")) {\n\t\t\tif (args.length < (i + 2)) {\n\t\t\t\tu.usage();\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tCommonParameters.timeout = Integer.parseInt(args[++i]);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tu.usage();\n\t\t\t}\n\t\t} else if (args[i].equals(\"-log\")) {\n\t\t\tLevel level = null;\n\t\t\tif (args.length < (i + 2)) {\n\t\t\t\tu.usage();\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tlevel = Level.parse(args[++i]);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tu.usage();\n\t\t\t}\n\t\t\tLog.setLevel(Log.FAC_ALL, level);\n\t\t} else if (args[i].equals(\"-v\")) {\n\t\t\tCommonParameters.verbose = true;\n\t\t} else if (args[i].equals(\"-as\")) {\n\t\t\tif (args.length < (i + 2)) {\n\t\t\t\tu.usage();\n\t\t\t}\n\t\t\tCommonSecurity.setUser(args[++i]);\n\t\t} else if (args[i].equals(\"-ac\")) {\n\t\t\tCommonSecurity.setAccessControl();\n\t\t} else {\n\t\t\tret = false;\n\t\t}\n\t\tif (CommonParameters.startArg < i + 1)\n\t\t\tCommonParameters.startArg = i + 1;\n\t\treturn ret;\n\t}","id":10670,"modified_method":"public static boolean parseArguments(String[] args, int i, Usage u) {\n\t\tboolean ret = true;\n\t\tif (i == 0 && args[0].startsWith(\"[\")) {\n\t\t\t_extraUsage = args[0];\n\t\t} else if (args[i].equals(\"-h\") || args[i].equals(\"-help\")) {\n\t\t\tu.usage(_extraUsage);\n\t\t} else if (args[i].equals(\"-unversioned\")) {\n\t\t\tCommonParameters.unversioned = true;\n\t\t} else if (args[i].equals(\"-timeout\")) {\n\t\t\tif (args.length < (i + 2)) {\n\t\t\t\tu.usage(_extraUsage);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tCommonParameters.timeout = Integer.parseInt(args[++i]);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tu.usage(_extraUsage);\n\t\t\t}\n\t\t} else if (args[i].equals(\"-log\")) {\n\t\t\tLevel level = null;\n\t\t\tif (args.length < (i + 2)) {\n\t\t\t\tu.usage(_extraUsage);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tlevel = Level.parse(args[++i]);\n\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\tu.usage(_extraUsage);\n\t\t\t}\n\t\t\tLog.setLevel(Log.FAC_ALL, level);\n\t\t} else if (args[i].equals(\"-v\")) {\n\t\t\tCommonParameters.verbose = true;\n\t\t} else if (args[i].equals(\"-as\")) {\n\t\t\tif (args.length < (i + 2)) {\n\t\t\t\tu.usage(_extraUsage);\n\t\t\t}\n\t\t\tCommonSecurity.setUser(args[++i]);\n\t\t} else if (args[i].equals(\"-ac\")) {\n\t\t\tCommonSecurity.setAccessControl();\n\t\t} else {\n\t\t\tret = false;\n\t\t}\n\t\tif (CommonParameters.startArg < i + 1)\n\t\t\tCommonParameters.startArg = i + 1;\n\t\treturn ret;\n\t}","commit_id":"99c2e114f047bab7072badf6448f9c0c05d90f61","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"protected CCNTime doPut(CCNHandle handle, String fileName,\n\t\t\tContentName nodeName) throws IOException, InvalidKeyException, ConfigurationException {\n\t\tInputStream is;\n\t\tif (CommonParameters.verbose)\n\t\t\tSystem.out.printf(\"filename %s\\n\", fileName);\n\t\tif (fileName.startsWith(\"http://\")) {\n\t\t\tif (CommonParameters.verbose)\n\t\t\t\tSystem.out.printf(\"filename is http\\n\");\t\t\t\n\t\t\tis = new URL(fileName).openStream();\n\t\t} else {\n\t\t\tif (CommonParameters.verbose)\n\t\t\t\tSystem.out.printf(\"filename is file\\n\");\t\t\t\n\t\t\tFile theFile = new File(fileName);\n\t\n\t\t\tif (!theFile.exists()) {\n\t\t\t\tSystem.out.println(\"No such file: \" + theFile.getName());\n\t\t\t\tusage();\n\t\t\t}\n\t\t\tis = new FileInputStream(theFile);\n\t\t}\n\n\t\tCCNOutputStream ostream;\n\t\t\n\t\t// Use file stream in both cases to match behavior. CCNOutputStream doesn't do\n\t\t// versioning and neither it nor CCNVersionedOutputStream add headers.\n\t\tif (CommonParameters.rawMode) {\n\t\t\tif (CommonParameters.unversioned)\n\t\t\t\tostream = new CCNOutputStream(nodeName, handle);\n\t\t\telse\n\t\t\t\tostream = new CCNFileOutputStream(nodeName, handle);\n\t\t} else {\n\t\t\tif (CommonParameters.unversioned)\n\t\t\t\tostream = new RepositoryOutputStream(nodeName, handle, CommonParameters.local);\n\t\t\telse\n\t\t\t\tostream = new RepositoryFileOutputStream(nodeName, handle, CommonParameters.local);\n\t\t}\n\t\tif (CommonParameters.timeout != null)\n\t\t\tostream.setTimeout(CommonParameters.timeout);\n\t\tdo_write(ostream, is);\n\t\t\n\t\treturn ostream.getVersion();\n\t}","id":10671,"modified_method":"protected CCNTime doPut(CCNHandle handle, String fileName,\n\t\t\tContentName nodeName) throws IOException, InvalidKeyException, ConfigurationException {\n\t\tInputStream is;\n\t\tif (CommonParameters.verbose)\n\t\t\tSystem.out.printf(\"filename %s\\n\", fileName);\n\t\tif (fileName.startsWith(\"http://\")) {\n\t\t\tif (CommonParameters.verbose)\n\t\t\t\tSystem.out.printf(\"filename is http\\n\");\n\t\t\tis = new URL(fileName).openStream();\n\t\t} else {\n\t\t\tif (CommonParameters.verbose)\n\t\t\t\tSystem.out.printf(\"filename is file\\n\");\n\t\t\tFile theFile = new File(fileName);\n\n\t\t\tif (!theFile.exists()) {\n\t\t\t\tSystem.out.println(\"No such file: \" + theFile.getName());\n\t\t\t\tusage(CommonArguments.getExtraUsage());\n\t\t\t}\n\t\t\tis = new FileInputStream(theFile);\n\t\t}\n\n\t\tCCNOutputStream ostream;\n\n\t\t// Use file stream in both cases to match behavior. CCNOutputStream doesn't do\n\t\t// versioning and neither it nor CCNVersionedOutputStream add headers.\n\t\tif (CommonParameters.rawMode) {\n\t\t\tif (CommonParameters.unversioned)\n\t\t\t\tostream = new CCNOutputStream(nodeName, handle);\n\t\t\telse\n\t\t\t\tostream = new CCNFileOutputStream(nodeName, handle);\n\t\t} else {\n\t\t\tif (CommonParameters.unversioned)\n\t\t\t\tostream = new RepositoryOutputStream(nodeName, handle, CommonParameters.local);\n\t\t\telse\n\t\t\t\tostream = new RepositoryFileOutputStream(nodeName, handle, CommonParameters.local);\n\t\t}\n\t\tif (CommonParameters.timeout != null)\n\t\t\tostream.setTimeout(CommonParameters.timeout);\n\t\tdo_write(ostream, is);\n\n\t\treturn ostream.getVersion();\n\t}","commit_id":"99c2e114f047bab7072badf6448f9c0c05d90f61","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public static void showACL(String nodeName) {\n\t\ttry{\n\t\t\tContentName baseNode = ContentName.fromNative(\"/\");\n\t\t\tGroupAccessControlManager acm = new GroupAccessControlManager(baseNode, groupStorage, userStorage, CCNHandle.open());\n\t\t\tContentName node = ContentName.fromNative(nodeName);\n\t\t\tACL acl = acm.getEffectiveACLObject(node).acl();\n\t\t\tSystem.out.println(\"ACL for node: \" + nodeName);\n\t\t\tfor (int j=0; j<acl.size(); j++) {\n\t\t\t\tLink lk = (Link) acl.get(j);\n\t\t\t\tSystem.out.println(lk.targetName() + \" : \" + lk.targetLabel());\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\tSystem.exit(0);\n\t}","id":10672,"modified_method":"public static void showACL(String nodeName) {\n\t\ttry{\n\t\t\tContentName baseNode = ContentName.fromNative(\"/\");\n\t\t\tGroupAccessControlManager acm = new GroupAccessControlManager(baseNode, groupStorage, userStorage, CCNHandle.open());\n\t\t\tContentName node = ContentName.fromNative(nodeName);\n\t\t\tACL acl = acm.getEffectiveACLObject(node).acl();\n\t\t\tSystem.out.println(\"ACL for node: \" + nodeName);\n\t\t\tfor (int j=0; j<acl.size(); j++) {\n\t\t\t\tLink lk = acl.get(j);\n\t\t\t\tSystem.out.println(lk.targetName() + \" : \" + lk.targetLabel());\n\t\t\t}\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\tSystem.exit(0);\n\t}","commit_id":"99c2e114f047bab7072badf6448f9c0c05d90f61","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// silence logging\n\t\tLog.setDefaultLevel(Level.WARNING);\n\t\t\n\t\tif ((args == null) || (args.length == 0)) {\n\t\t\tusage();\n\t\t}\n\t\t\n\t\tint pos = 0;\n\t\tif (args[pos].equals(\"-as\")) {\n\t\t\tif (args.length < pos+2) usage();\n\t\t\tpos++;\n\t\t\tsetUser(args[pos]);\n\t\t\tpos++;\n\t\t}\n\t\t\n\t\tif (args[pos].equals(\"-show\")) {\n\t\t\tif (args.length < pos + 2) {\n\t\t\t\tusage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tpos++;\n\t\t\tString nodeName = args[pos];\n\t\t\tshowACL(nodeName);\n\t\t}\n\t\telse if (args[pos].equals(\"-edit\")) {\n\t\t\tif (args.length < pos + 4) {\n\t\t\t\tusage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tString nodeName = args[pos + 1];\n\t\t\tString principalName = args[pos + 2];\n\t\t\tString role = args[pos + 3];\n\t\t\tif (! (role.equals(\"none\") || role.equals(ACL.LABEL_READER) || role.equals(ACL.LABEL_WRITER) || role.equals(ACL.LABEL_MANAGER))) {\n\t\t\t\tusage();\n\t\t\t}\n\t\t\teditACL(nodeName, principalName, role);\n\t\t}\n\t\telse if (args[pos].equals(\"-init\")) {\n\t\t\tif (args.length < pos + 5) {\n\t\t\t\tusage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tString domain = args[pos + 1];\n\t\t\tString userNamespace = args[pos + 2];\n\t\t\tString groupNamespace = args[pos + 3];\n\t\t\tString principalName = args[pos + 4];\n\t\t\tinitACL(domain, userNamespace, groupNamespace, principalName);\n\t\t}\n\t}","id":10673,"modified_method":"/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\n\t\tString extraUsage = \"\";\n\n\t\t// silence logging\n\t\tLog.setDefaultLevel(Level.WARNING);\n\n\t\tif ((args == null) || (args.length == 0)) {\n\t\t\tusage(extraUsage);\n\t\t}\n\n\t\tint pos = 0;\n\t\tif (args[0].startsWith(\"[\")) {\n\t\t\textraUsage = args[0];\n\t\t\tpos++;\n\t\t}\n\t\tif (args[pos].equals(\"-h\")) {\n\t\t\tusage(extraUsage);\n\t\t}\n\t\tif (args[pos].equals(\"-as\")) {\n\t\t\tif (args.length < pos+2) usage(extraUsage);\n\t\t\tpos++;\n\t\t\tsetUser(args[pos]);\n\t\t\tpos++;\n\t\t}\n\n\t\tif (args[pos].equals(\"-show\")) {\n\t\t\tif (args.length < pos + 2) {\n\t\t\t\tusage(extraUsage);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tpos++;\n\t\t\tString nodeName = args[pos];\n\t\t\tshowACL(nodeName);\n\t\t}\n\t\telse if (args[pos].equals(\"-edit\")) {\n\t\t\tif (args.length < pos + 4) {\n\t\t\t\tusage(extraUsage);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tString nodeName = args[pos + 1];\n\t\t\tString principalName = args[pos + 2];\n\t\t\tString role = args[pos + 3];\n\t\t\tif (! (role.equals(\"none\") || role.equals(ACL.LABEL_READER) || role.equals(ACL.LABEL_WRITER) || role.equals(ACL.LABEL_MANAGER))) {\n\t\t\t\tusage(extraUsage);\n\t\t\t}\n\t\t\teditACL(nodeName, principalName, role);\n\t\t}\n\t\telse if (args[pos].equals(\"-init\")) {\n\t\t\tif (args.length < pos + 5) {\n\t\t\t\tusage(extraUsage);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tString domain = args[pos + 1];\n\t\t\tString userNamespace = args[pos + 2];\n\t\t\tString groupNamespace = args[pos + 3];\n\t\t\tString principalName = args[pos + 4];\n\t\t\tinitACL(domain, userNamespace, groupNamespace, principalName);\n\t\t}\n\t}","commit_id":"99c2e114f047bab7072badf6448f9c0c05d90f61","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public static void editACL(String nodeName, String principalName, String role) {\n\t\ttry{\n\t\t\tContentName baseNode = ContentName.fromNative(\"/\");\n\t\t\tGroupAccessControlManager acm = new GroupAccessControlManager(baseNode, groupStorage, userStorage, CCNHandle.open());\n\t\t\tContentName node = ContentName.fromNative(nodeName);\n\t\t\t\n\t\t\tACLObject initialACLObject = acm.getEffectiveACLObject(node);\n\t\t\tACL initialACL = initialACLObject.acl();\n\t\t\tif (! initialACLObject.getBaseName().equals(GroupAccessControlProfile.aclName(node))) {\n\t\t\t\t// There is no actual ACL at this node.\n\t\t\t\t// So we copy the effective ACL to this node before updating it.\n\t\t\t\tacm.setACL(node, initialACL);\n\t\t\t}\n\t\t\t\t\t\t\n\t\t\t// initial role\n\t\t\tContentName principal = ContentName.fromNative(principalName);\n\t\t\tLink plk = new Link(principal);\n\t\t\tString initialRole = null;\n\t\t\tfor (int j=0; j<initialACL.size(); j++) {\n\t\t\t\tLink lk = (Link) initialACL.get(j);\n\t\t\t\tif (principal.compareTo(lk.targetName()) == 0) {\n\t\t\t\t\tinitialRole = lk.targetLabel();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// update\n\t\t\tArrayList<ACLOperation> ACLUpdates = new ArrayList<ACLOperation>();\n\t\t\tif (initialRole == null) {\n\t\t\t\tif (role.equals(ACL.LABEL_READER)) ACLUpdates.add(ACLOperation.addReaderOperation(plk));\n\t\t\t\telse if (role.equals(ACL.LABEL_WRITER)) ACLUpdates.add(ACLOperation.addWriterOperation(plk));\n\t\t\t\telse if (role.equals(ACL.LABEL_MANAGER)) ACLUpdates.add(ACLOperation.addManagerOperation(plk));\n\t\t\t}\n\t\t\telse if (initialRole.equals(ACL.LABEL_READER)) {\n\t\t\t\tif (role.equals(\"none\")) ACLUpdates.add(ACLOperation.removeReaderOperation(plk));\n\t\t\t\telse if (role.equals(ACL.LABEL_WRITER)) ACLUpdates.add(ACLOperation.addWriterOperation(plk));\n\t\t\t\telse if (role.equals(ACL.LABEL_MANAGER)) ACLUpdates.add(ACLOperation.addManagerOperation(plk));\n\t\t\t}\n\t\t\telse if (initialRole.equals(ACL.LABEL_WRITER)) {\n\t\t\t\tif (role.equals(\"none\")) ACLUpdates.add(ACLOperation.removeWriterOperation(plk));\n\t\t\t\telse if (role.equals(ACL.LABEL_READER)) {\n\t\t\t\t\tACLUpdates.add(ACLOperation.removeWriterOperation(plk));\n\t\t\t\t\tACLUpdates.add(ACLOperation.addReaderOperation(plk));\n\t\t\t\t}\n\t\t\t\telse if (role.equals(ACL.LABEL_MANAGER)) ACLUpdates.add(ACLOperation.addManagerOperation(plk));\n\t\t\t}\n\t\t\telse if (initialRole.equals(ACL.LABEL_MANAGER)) {\n\t\t\t\tif (role.equals(\"none\")) ACLUpdates.add(ACLOperation.removeManagerOperation(plk));\n\t\t\t\telse if (role.equals(ACL.LABEL_READER)) {\n\t\t\t\t\tACLUpdates.add(ACLOperation.removeManagerOperation(plk));\n\t\t\t\t\tACLUpdates.add(ACLOperation.addReaderOperation(plk));\n\t\t\t\t}\n\t\t\t\telse if (role.equals(ACL.LABEL_WRITER)) {\n\t\t\t\t\tACLUpdates.add(ACLOperation.removeManagerOperation(plk));\n\t\t\t\t\tACLUpdates.add(ACLOperation.addWriterOperation(plk));\n\t\t\t\t}\n\t\t\t}\t\t\t\n\t\t\t\n\t\t\tacm.updateACL(node, ACLUpdates);\n\t\t\t\n\t\t\tSystem.out.println(\"ACL for node: \" + nodeName + \" updated to assign role \" + role + \" to principal \" + principalName);\n\t\t}\n\t\tcatch (AccessDeniedException ade) {\n\t\t\tSystem.out.println(\"You do not have the permission to edit the acl at node: \" + nodeName);\n\t\t\tSystem.exit(1);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\tSystem.exit(0);\n\t}","id":10674,"modified_method":"public static void editACL(String nodeName, String principalName, String role) {\n\t\ttry{\n\t\t\tContentName baseNode = ContentName.fromNative(\"/\");\n\t\t\tGroupAccessControlManager acm = new GroupAccessControlManager(baseNode, groupStorage, userStorage, CCNHandle.open());\n\t\t\tContentName node = ContentName.fromNative(nodeName);\n\n\t\t\tACLObject initialACLObject = acm.getEffectiveACLObject(node);\n\t\t\tACL initialACL = initialACLObject.acl();\n\t\t\tif (! initialACLObject.getBaseName().equals(GroupAccessControlProfile.aclName(node))) {\n\t\t\t\t// There is no actual ACL at this node.\n\t\t\t\t// So we copy the effective ACL to this node before updating it.\n\t\t\t\tacm.setACL(node, initialACL);\n\t\t\t}\n\n\t\t\t// initial role\n\t\t\tContentName principal = ContentName.fromNative(principalName);\n\t\t\tLink plk = new Link(principal);\n\t\t\tString initialRole = null;\n\t\t\tfor (int j=0; j<initialACL.size(); j++) {\n\t\t\t\tLink lk = initialACL.get(j);\n\t\t\t\tif (principal.compareTo(lk.targetName()) == 0) {\n\t\t\t\t\tinitialRole = lk.targetLabel();\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// update\n\t\t\tArrayList<ACLOperation> ACLUpdates = new ArrayList<ACLOperation>();\n\t\t\tif (initialRole == null) {\n\t\t\t\tif (role.equals(ACL.LABEL_READER)) ACLUpdates.add(ACLOperation.addReaderOperation(plk));\n\t\t\t\telse if (role.equals(ACL.LABEL_WRITER)) ACLUpdates.add(ACLOperation.addWriterOperation(plk));\n\t\t\t\telse if (role.equals(ACL.LABEL_MANAGER)) ACLUpdates.add(ACLOperation.addManagerOperation(plk));\n\t\t\t}\n\t\t\telse if (initialRole.equals(ACL.LABEL_READER)) {\n\t\t\t\tif (role.equals(\"none\")) ACLUpdates.add(ACLOperation.removeReaderOperation(plk));\n\t\t\t\telse if (role.equals(ACL.LABEL_WRITER)) ACLUpdates.add(ACLOperation.addWriterOperation(plk));\n\t\t\t\telse if (role.equals(ACL.LABEL_MANAGER)) ACLUpdates.add(ACLOperation.addManagerOperation(plk));\n\t\t\t}\n\t\t\telse if (initialRole.equals(ACL.LABEL_WRITER)) {\n\t\t\t\tif (role.equals(\"none\")) ACLUpdates.add(ACLOperation.removeWriterOperation(plk));\n\t\t\t\telse if (role.equals(ACL.LABEL_READER)) {\n\t\t\t\t\tACLUpdates.add(ACLOperation.removeWriterOperation(plk));\n\t\t\t\t\tACLUpdates.add(ACLOperation.addReaderOperation(plk));\n\t\t\t\t}\n\t\t\t\telse if (role.equals(ACL.LABEL_MANAGER)) ACLUpdates.add(ACLOperation.addManagerOperation(plk));\n\t\t\t}\n\t\t\telse if (initialRole.equals(ACL.LABEL_MANAGER)) {\n\t\t\t\tif (role.equals(\"none\")) ACLUpdates.add(ACLOperation.removeManagerOperation(plk));\n\t\t\t\telse if (role.equals(ACL.LABEL_READER)) {\n\t\t\t\t\tACLUpdates.add(ACLOperation.removeManagerOperation(plk));\n\t\t\t\t\tACLUpdates.add(ACLOperation.addReaderOperation(plk));\n\t\t\t\t}\n\t\t\t\telse if (role.equals(ACL.LABEL_WRITER)) {\n\t\t\t\t\tACLUpdates.add(ACLOperation.removeManagerOperation(plk));\n\t\t\t\t\tACLUpdates.add(ACLOperation.addWriterOperation(plk));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tacm.updateACL(node, ACLUpdates);\n\n\t\t\tSystem.out.println(\"ACL for node: \" + nodeName + \" updated to assign role \" + role + \" to principal \" + principalName);\n\t\t}\n\t\tcatch (AccessDeniedException ade) {\n\t\t\tSystem.out.println(\"You do not have the permission to edit the acl at node: \" + nodeName);\n\t\t\tSystem.exit(1);\n\t\t}\n\t\tcatch (Exception e) {\n\t\t\te.printStackTrace();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\tSystem.exit(0);\n\t}","commit_id":"99c2e114f047bab7072badf6448f9c0c05d90f61","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Main function for the ccndcontrol tool.  Initializes the tool, reads the argument list\n\t * and constructs face to be added.\n\t * \n\t * @param args Command line arguments: \n\t * \n\t * @return void\n\t */\n\t@SuppressWarnings(\"unused\")\n\tpublic static void main(String[] args) {\n\t\tboolean dynamic = false;\n\t\tString configFile = null;\t\n\t\tint startArg = 0;\n\t\tLevel logLevel = Level.SEVERE;\n\t\tverbose = false;\n\t\t\n\t\tfor (int i = 0; i < args.length - 1; i++) {\n\t\t\tif (args[i].equals((\"-v\"))) {\n\t\t\t\tif (startArg <= i)\n\t\t\t\t\tstartArg = i + 1;\n\t\t\t\tverbose = true;\n\t\t\t\tlogLevel = Level.INFO;\n\t\t\t} else if (args[i].equals((\"-vv\"))) {\n\t\t\t\tif (startArg <= i)\n\t\t\t\t\tstartArg = i + 1;\n\t\t\t\tlogLevel = Level.ALL;\n\t\t\t} else if (args[i].equals((\"-d\"))) {\n\t\t\t\tif (startArg <= i)\n\t\t\t\t\tstartArg = i + 1;\n\t\t\t\tdynamic = true; // never read\n\t\t\t} else if (args[i].equals(\"-f\")) {\n\t\t\t\tif (args.length < (i + 2)) {\n\t\t\t\t\tusage();\n\t\t\t\t\tSystem.exit(1);\t\t\t\t\t\n\t\t\t\t}\n\t\t\t\tconfigFile = args[++i];\n\t\t\t\tif (startArg <= i) {\n\t\t\t\t\tstartArg = i + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tLog.setDefaultLevel(logLevel);\n\t\t\n\t\tif (null == configFile && args.length < startArg + 2) {\n\t\t\tusage();\n\t\t\tSystem.exit(1);\t\t\t\t\t\n\t\t}\n\t\t\n\t\tif (null != configFile) {\n\t\t\tprocessConfigFile(configFile);\n\t\t} else {\n\t\t\tparseFromTokens(args, startArg, args.length);\n\t\t}\n\t\t\n\t\tint nReg = regList.size();\n\t\tfor (int i = 0; i < nReg; i++) {\n\t\t\tRegEntry entry = regList.get(i);\n\t\t\tCCNHandle ccnHandle = null;\n\t\t\tFaceManager fHandle = null;\n\t\t\tInteger faceID = null;\t\t\n\t\t\ttry {\n\t\t\t\tccnHandle = CCNHandle.open();\n\t\t\t\tfHandle = new FaceManager(ccnHandle);\n\t\t\t\tif (entry.command == Command.Add) {\n\t\t\t\t\tfaceID = fHandle.createFace(entry.protocol, entry.host, entry.port);\n\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\tSystem.out.println(\"Created face \" + faceID.toString());\n\t\t\t\t\t}\n\t\t\t\t\tPrefixRegistrationManager pre = new PrefixRegistrationManager(ccnHandle);\n\t\t\t\t\tpre.registerPrefix(entry.uri, faceID, entry.flags);\n\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\tSystem.out.println(\"Added registration for \" + entry.uri);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (entry.command == Command.Delete) {\n\t\t\t\t\tfHandle.deleteFace(entry.faceID);\n\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\tSystem.out.println(\"Deleted face \" + entry.faceID.toString() + \" in local ccnd\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/* This really can't happen unless the check above was wrong. */\n\t\t\t\t\tSystem.err.println(\"Internal error.  command (\" + entry.command + \") not add or del\");\n\t\t\t\t\tSystem.exit(1);\t\t\t\n\t\t\t\t}\n\n\t\t\t} catch (ConfigurationException e) {\n\t\t\t\tString m = e.getMessage();\n\t\t\t\tSystem.err.println(m);\n\t\t\t\tSystem.exit(1);\t\t\t\n\t\t\t} catch (IOException e) {\n\t\t\t\tString m = e.getMessage();\n\t\t\t\tSystem.err.println(m);\n\t\t\t\tSystem.exit(1);\t\t\t\n\t\t\t}catch (CCNDaemonException e) {\n\t\t\t\tString m = e.getMessage();\n\t\t\t\tSystem.err.println(m);\n\t\t\t\tSystem.exit(1);\t\t\t\n\t\t\t}\n\t\t}\n\n\t\tSystem.exit(0);\n\t}","id":10675,"modified_method":"/**\n\t * Main function for the ccndcontrol tool.  Initializes the tool, reads the argument list\n\t * and constructs face to be added.\n\t *\n\t * @param args Command line arguments:\n\t *\n\t * @return void\n\t */\n\t@SuppressWarnings(\"unused\")\n\tpublic static void main(String[] args) {\n\t\tboolean dynamic = false;\n\t\tString configFile = null;\n\t\tint startArg = 0;\n\t\tLevel logLevel = Level.SEVERE;\n\t\tverbose = false;\n\n\t\tfor (int i = 0; i < args.length; i++) {\n\t\t\tif (i == 0 && args[0].startsWith(\"[\")) {\n\t\t\t\t_extraUsage = args[0];\n\t\t\t} else if (args[i].equals(\"-h\")) {\n\t\t\t\tusage(_extraUsage);\n\t\t\t\tSystem.exit(0);\n\t\t\t} else if (args[i].equals((\"-v\"))) {\n\t\t\t\tif (startArg <= i)\n\t\t\t\t\tstartArg = i + 1;\n\t\t\t\tverbose = true;\n\t\t\t\tlogLevel = Level.INFO;\n\t\t\t} else if (args[i].equals((\"-vv\"))) {\n\t\t\t\tif (startArg <= i)\n\t\t\t\t\tstartArg = i + 1;\n\t\t\t\tlogLevel = Level.ALL;\n\t\t\t} else if (args[i].equals((\"-d\"))) {\n\t\t\t\tif (startArg <= i)\n\t\t\t\t\tstartArg = i + 1;\n\t\t\t\tdynamic = true; // never read\n\t\t\t} else if (args[i].equals(\"-f\")) {\n\t\t\t\tif (args.length < (i + 2)) {\n\t\t\t\t\tusage(_extraUsage);\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t\tconfigFile = args[++i];\n\t\t\t\tif (startArg <= i) {\n\t\t\t\t\tstartArg = i + 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tLog.setDefaultLevel(logLevel);\n\n\t\tif (null == configFile && args.length < startArg + 2) {\n\t\t\tusage(_extraUsage);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tif (null != configFile) {\n\t\t\tprocessConfigFile(configFile);\n\t\t} else {\n\t\t\tparseFromTokens(args, startArg, args.length);\n\t\t}\n\n\t\tint nReg = regList.size();\n\t\tfor (int i = 0; i < nReg; i++) {\n\t\t\tRegEntry entry = regList.get(i);\n\t\t\tCCNHandle ccnHandle = null;\n\t\t\tFaceManager fHandle = null;\n\t\t\tInteger faceID = null;\n\t\t\ttry {\n\t\t\t\tccnHandle = CCNHandle.open();\n\t\t\t\tfHandle = new FaceManager(ccnHandle);\n\t\t\t\tif (entry.command == Command.Add) {\n\t\t\t\t\tfaceID = fHandle.createFace(entry.protocol, entry.host, entry.port);\n\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\tSystem.out.println(\"Created face \" + faceID.toString());\n\t\t\t\t\t}\n\t\t\t\t\tPrefixRegistrationManager pre = new PrefixRegistrationManager(ccnHandle);\n\t\t\t\t\tpre.registerPrefix(entry.uri, faceID, entry.flags);\n\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\tSystem.out.println(\"Added registration for \" + entry.uri);\n\t\t\t\t\t}\n\n\t\t\t\t} else if (entry.command == Command.Delete) {\n\t\t\t\t\tfHandle.deleteFace(entry.faceID);\n\t\t\t\t\tif (verbose) {\n\t\t\t\t\t\tSystem.out.println(\"Deleted face \" + entry.faceID.toString() + \" in local ccnd\");\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\t/* This really can't happen unless the check above was wrong. */\n\t\t\t\t\tSystem.err.println(\"Internal error.  command (\" + entry.command + \") not add or del\");\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\n\t\t\t} catch (ConfigurationException e) {\n\t\t\t\tString m = e.getMessage();\n\t\t\t\tSystem.err.println(m);\n\t\t\t\tSystem.exit(1);\n\t\t\t} catch (IOException e) {\n\t\t\t\tString m = e.getMessage();\n\t\t\t\tSystem.err.println(m);\n\t\t\t\tSystem.exit(1);\n\t\t\t}catch (CCNDaemonException e) {\n\t\t\t\tString m = e.getMessage();\n\t\t\t\tSystem.err.println(m);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t}\n\n\t\tSystem.exit(0);\n\t}","commit_id":"99c2e114f047bab7072badf6448f9c0c05d90f61","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"private static void parseFromTokens(String [] tokens, int start, int nTokens) {\n\t\tRegEntry entry = new ccndcontrol.RegEntry();\n\t\tif (nTokens < 1) {\n\t\t\tusage();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\tString tmp = tokens[start];\n\t\tif (null == tmp || tmp.length() == 0) {\n\t\t\tSystem.err.println(\"Command token either null or of 0 length.\");\n\t\t\tusage();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\t/******** add command **********/\n\t\tif (tmp.equalsIgnoreCase(\"add\")) {\n\t\t\tentry.command = Command.Add;\n\t\t\tif (nTokens < 3) {\n\t\t\t\tusage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\ttmp = tokens[start + 1];\n\t\t\tif (null == tmp || tmp.length() == 0) {\n\t\t\t\tSystem.err.println(\"URI token either null or of 0 length.\");\n\t\t\t\tusage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tentry.uri = tokens[start + 1];\n\t\t\t\n\t\t\ttmp = tokens[start + 2];\n\t\t\tif (null == tmp || tmp.length() == 0) {\n\t\t\t\tSystem.err.println(\"Protocol token either null or of 0 length.\");\n\t\t\t\tusage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tentry.protocol = null;\n\t\t\tfor (NetworkProtocol p : NetworkProtocol.values()) {\n\t\t\t\tString pAsString = p.toString();\n\t\t\t\tif (tmp.equalsIgnoreCase(pAsString)) {\n\t\t\t\t\tentry.protocol = p;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (null == entry.protocol) {\n\t\t\t\tSystem.err.println(\"Protocol (\" + tmp + \") not valid.\");\n\t\t\t\tusage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\t\n\t\t\ttmp = tokens[start + 3];\n\t\t\tif (null == tmp || tmp.length() == 0) {\n\t\t\t\tSystem.err.println(\"Host name either null or of 0 length.\");\n\t\t\t\tusage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tString hostNameNumeric = null;\n\t\t\ttry {\n\t\t\t\tInetAddress ipAddr = InetAddress.getByName(tmp);\n\t\t\t\thostNameNumeric = ipAddr.getHostAddress();\n\t\t\t} catch (UnknownHostException e) {\n\t\t\t\tString reason = e.getMessage();\n\t\t\t\tSystem.err.println(\"Host name (\" + tmp + \") not found.  reason: \" + reason);\n\t\t\t\tusage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tentry.hostName = tmp;\n\t\t\tentry.host = hostNameNumeric;\n\t\t\t\t\n\t\t\tif (start + 4 < nTokens && null != tokens[start + 4]) {\n\t\t\t\ttry {\n\t\t\t\t\tentry.port = Integer.valueOf(tokens[start + 4]);\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\tSystem.err.println(\"Port (\" + tokens[start + 4] + \") not valid.\");\n\t\t\t\t\tusage();\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tentry.port = CCNNetworkManager.DEFAULT_AGENT_PORT;\n\t\t\t}\n\t\t\tif (start + 5 < nTokens && null != tokens[start + 5]) {\n\t\t\t\ttry {\n\t\t\t\t\tentry.flags = Integer.valueOf(tokens[start + 5]);\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\tSystem.err.println(\"Flags (\" + tokens[start + 5] + \") not valid.\");\n\t\t\t\t\tusage();\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (6 < nTokens && null != tokens[start + 6]) {\n\t\t\t\ttry {\n\t\t\t\t\tentry.multicastTTL = Integer.valueOf(tokens[start + 6]);\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\tSystem.err.println(\"Multicast TTL (\" + tokens[start + 6] + \") not valid.\");\n\t\t\t\t\tusage();\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (7 < nTokens && null != tokens[start + 7]) {\n\t\t\t\tentry.multicastInterface = tokens[start + 7];\n\t\t\t}\n\t\t\t\n\t\t} /* add */\n\t\t\n\t\t/******** delete command **********/\n\t\telse if ((tmp.equalsIgnoreCase(\"delete\") || tmp.equalsIgnoreCase(\"del\"))) {\n\t\t\tentry.command = Command.Delete;\n\t\t\tif (nTokens < 1) {\n\t\t\t\tSystem.err.println(\"Exiting because nTokens < 1 and command is \" + tmp + \"nTokens: \" + nTokens);\n\t\t\t\tusage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\ttmp = tokens[start + 1];\n\t\t\tif (null == tmp || tmp.length() == 0) {\n\t\t\t\tSystem.err.println(\"FaceID token either null or of 0 length.\");\n\t\t\t\tusage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tentry.faceID = Integer.valueOf(tmp);\n\t\t\t} catch (NumberFormatException e) {\n\t\t\t\tSystem.err.println(\"Face ID (\" + tokens[start + 1] + \") not valid.\");\n\t\t\t\tusage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t} /* del */\n\t\t\n\t\telse {\n\t\t\tSystem.err.println(\"Command (\" + tmp + \") not valid.\");\n\t\t\tusage();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\t\n\t\tregList.add(entry);\n\t}","id":10676,"modified_method":"private static void parseFromTokens(String [] tokens, int start, int nTokens) {\n\t\tRegEntry entry = new ccndcontrol.RegEntry();\n\t\tif (nTokens < 1) {\n\t\t\tusage(_extraUsage);\n\t\t\tSystem.exit(1);\n\t\t}\n\t\tString tmp = tokens[start];\n\t\tif (null == tmp || tmp.length() == 0) {\n\t\t\tSystem.err.println(\"Command token either null or of 0 length.\");\n\t\t\tusage(_extraUsage);\n\t\t\tSystem.exit(1);\n\t\t}\n\t\t/******** add command **********/\n\t\tif (tmp.equalsIgnoreCase(\"add\")) {\n\t\t\tentry.command = Command.Add;\n\t\t\tif (nTokens < 3) {\n\t\t\t\tusage(_extraUsage);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\ttmp = tokens[start + 1];\n\t\t\tif (null == tmp || tmp.length() == 0) {\n\t\t\t\tSystem.err.println(\"URI token either null or of 0 length.\");\n\t\t\t\tusage(_extraUsage);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tentry.uri = tokens[start + 1];\n\n\t\t\ttmp = tokens[start + 2];\n\t\t\tif (null == tmp || tmp.length() == 0) {\n\t\t\t\tSystem.err.println(\"Protocol token either null or of 0 length.\");\n\t\t\t\tusage(_extraUsage);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tentry.protocol = null;\n\t\t\tfor (NetworkProtocol p : NetworkProtocol.values()) {\n\t\t\t\tString pAsString = p.toString();\n\t\t\t\tif (tmp.equalsIgnoreCase(pAsString)) {\n\t\t\t\t\tentry.protocol = p;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (null == entry.protocol) {\n\t\t\t\tSystem.err.println(\"Protocol (\" + tmp + \") not valid.\");\n\t\t\t\tusage(_extraUsage);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\n\t\t\ttmp = tokens[start + 3];\n\t\t\tif (null == tmp || tmp.length() == 0) {\n\t\t\t\tSystem.err.println(\"Host name either null or of 0 length.\");\n\t\t\t\tusage(_extraUsage);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tString hostNameNumeric = null;\n\t\t\ttry {\n\t\t\t\tInetAddress ipAddr = InetAddress.getByName(tmp);\n\t\t\t\thostNameNumeric = ipAddr.getHostAddress();\n\t\t\t} catch (UnknownHostException e) {\n\t\t\t\tString reason = e.getMessage();\n\t\t\t\tSystem.err.println(\"Host name (\" + tmp + \") not found.  reason: \" + reason);\n\t\t\t\tusage(_extraUsage);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tentry.hostName = tmp;\n\t\t\tentry.host = hostNameNumeric;\n\n\t\t\tif (start + 4 < nTokens && null != tokens[start + 4]) {\n\t\t\t\ttry {\n\t\t\t\t\tentry.port = Integer.valueOf(tokens[start + 4]);\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\tSystem.err.println(\"Port (\" + tokens[start + 4] + \") not valid.\");\n\t\t\t\t\tusage(_extraUsage);\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tentry.port = CCNNetworkManager.DEFAULT_AGENT_PORT;\n\t\t\t}\n\t\t\tif (start + 5 < nTokens && null != tokens[start + 5]) {\n\t\t\t\ttry {\n\t\t\t\t\tentry.flags = Integer.valueOf(tokens[start + 5]);\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\tSystem.err.println(\"Flags (\" + tokens[start + 5] + \") not valid.\");\n\t\t\t\t\tusage(_extraUsage);\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (6 < nTokens && null != tokens[start + 6]) {\n\t\t\t\ttry {\n\t\t\t\t\tentry.multicastTTL = Integer.valueOf(tokens[start + 6]);\n\t\t\t\t} catch (NumberFormatException e) {\n\t\t\t\t\tSystem.err.println(\"Multicast TTL (\" + tokens[start + 6] + \") not valid.\");\n\t\t\t\t\tusage(_extraUsage);\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (7 < nTokens && null != tokens[start + 7]) {\n\t\t\t\tentry.multicastInterface = tokens[start + 7];\n\t\t\t}\n\n\t\t} /* add */\n\n\t\t/******** delete command **********/\n\t\telse if ((tmp.equalsIgnoreCase(\"delete\") || tmp.equalsIgnoreCase(\"del\"))) {\n\t\t\tentry.command = Command.Delete;\n\t\t\tif (nTokens < 1) {\n\t\t\t\tSystem.err.println(\"Exiting because nTokens < 1 and command is \" + tmp + \"nTokens: \" + nTokens);\n\t\t\t\tusage(_extraUsage);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\ttmp = tokens[start + 1];\n\t\t\tif (null == tmp || tmp.length() == 0) {\n\t\t\t\tSystem.err.println(\"FaceID token either null or of 0 length.\");\n\t\t\t\tusage(_extraUsage);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\ttry {\n\t\t\t\tentry.faceID = Integer.valueOf(tmp);\n\t\t\t} catch (NumberFormatException e) {\n\t\t\t\tSystem.err.println(\"Face ID (\" + tokens[start + 1] + \") not valid.\");\n\t\t\t\tusage(_extraUsage);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t} /* del */\n\n\t\telse {\n\t\t\tSystem.err.println(\"Command (\" + tmp + \") not valid.\");\n\t\t\tusage(_extraUsage);\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tregList.add(entry);\n\t}","commit_id":"99c2e114f047bab7072badf6448f9c0c05d90f61","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tLog.setDefaultLevel(Level.WARNING);\n\n\t\tfor (int i = 0; i < args.length - 2; i++) {\n\t\t\tif (!CommonArguments.parseArguments(args, i, u)) {\n\t\t\t\tu.usage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tif (CommonParameters.startArg > (i + 1))\n\t\t\t\ti = CommonParameters.startArg - 1;\n\t\t}\n\n\t\tif (args.length < CommonParameters.startArg + 2) {\n\t\t\tu.usage();\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\ttry {\n\t\t\tint readsize = 1024; // make an argument for testing...\n\t\t\t// If we get one file name, put as the specific name given.\n\t\t\t// If we get more than one, put underneath the first as parent.\n\t\t\t// Ideally want to use newVersion to get latest version. Start\n\t\t\t// with random version.\n\t\t\tContentName argName = ContentName.fromURI(args[CommonParameters.startArg]);\n\n\t\t\tCCNHandle handle = CCNHandle.open();\n\n\t\t\tFile theFile = new File(args[CommonParameters.startArg + 1]);\n\t\t\tif (theFile.exists()) {\n\t\t\t\tSystem.out.println(\"Overwriting file: \" + args[CommonParameters.startArg + 1]);\n\t\t\t}\n\t\t\tFileOutputStream output = new FileOutputStream(theFile);\n\n\t\t\tlong starttime = System.currentTimeMillis();\n\t\t\tCCNInputStream input;\n\t\t\tif (CommonParameters.unversioned)\n\t\t\t\tinput = new CCNInputStream(argName, handle);\n\t\t\telse\n\t\t\t\tinput = new CCNFileInputStream(argName, handle);\n\t\t\tif (CommonParameters.timeout != null) {\n\t\t\t\tinput.setTimeout(CommonParameters.timeout);\n\t\t\t}\n\t\t\tbyte [] buffer = new byte[readsize];\n\n\t\t\tint readcount = 0;\n\t\t\tlong readtotal = 0;\n\t\t\t//while (!input.eof()) {\n\t\t\twhile ((readcount = input.read(buffer)) != -1){\n\t\t\t\t//readcount = input.read(buffer);\n\t\t\t\treadtotal += readcount;\n\t\t\t\toutput.write(buffer, 0, readcount);\n\t\t\t\toutput.flush();\n\t\t\t}\n\t\t\tif (CommonParameters.verbose)\n\t\t\t\tSystem.out.println(\"ccngetfile took: \"+(System.currentTimeMillis() - starttime)+\"ms\");\n\t\t\tSystem.out.println(\"Retrieved content \" + args[CommonParameters.startArg + 1] + \" got \" + readtotal + \" bytes.\");\n\t\t\tSystem.exit(0);\n\n\t\t} catch (ConfigurationException e) {\n\t\t\tSystem.out.println(\"Configuration exception in ccngetfile: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (MalformedContentNameStringException e) {\n\t\t\tSystem.out.println(\"Malformed name: \" + args[CommonParameters.startArg] + \" \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Cannot write file or read content. \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.exit(1);\n\t}","id":10677,"modified_method":"/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tLog.setDefaultLevel(Level.WARNING);\n\n\t\tfor (int i = 0; i < args.length; i++) {\n\t\t\tif (!CommonArguments.parseArguments(args, i, u)) {\n\t\t\t\tu.usage(CommonArguments.getExtraUsage());\n\t\t\t}\n\t\t\tif (CommonParameters.startArg > (i + 1))\n\t\t\t\ti = CommonParameters.startArg - 1;\n\t\t\tif (i >= args.length - 2)\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (args.length < CommonParameters.startArg + 2) {\n\t\t\tu.usage(CommonArguments.getExtraUsage());\n\t\t}\n\n\t\ttry {\n\t\t\tint readsize = 1024; // make an argument for testing...\n\t\t\t// If we get one file name, put as the specific name given.\n\t\t\t// If we get more than one, put underneath the first as parent.\n\t\t\t// Ideally want to use newVersion to get latest version. Start\n\t\t\t// with random version.\n\t\t\tContentName argName = ContentName.fromURI(args[CommonParameters.startArg]);\n\n\t\t\tCCNHandle handle = CCNHandle.open();\n\n\t\t\tFile theFile = new File(args[CommonParameters.startArg + 1]);\n\t\t\tif (theFile.exists()) {\n\t\t\t\tSystem.out.println(\"Overwriting file: \" + args[CommonParameters.startArg + 1]);\n\t\t\t}\n\t\t\tFileOutputStream output = new FileOutputStream(theFile);\n\n\t\t\tlong starttime = System.currentTimeMillis();\n\t\t\tCCNInputStream input;\n\t\t\tif (CommonParameters.unversioned)\n\t\t\t\tinput = new CCNInputStream(argName, handle);\n\t\t\telse\n\t\t\t\tinput = new CCNFileInputStream(argName, handle);\n\t\t\tif (CommonParameters.timeout != null) {\n\t\t\t\tinput.setTimeout(CommonParameters.timeout);\n\t\t\t}\n\t\t\tbyte [] buffer = new byte[readsize];\n\n\t\t\tint readcount = 0;\n\t\t\tlong readtotal = 0;\n\t\t\t//while (!input.eof()) {\n\t\t\twhile ((readcount = input.read(buffer)) != -1){\n\t\t\t\t//readcount = input.read(buffer);\n\t\t\t\treadtotal += readcount;\n\t\t\t\toutput.write(buffer, 0, readcount);\n\t\t\t\toutput.flush();\n\t\t\t}\n\t\t\tif (CommonParameters.verbose)\n\t\t\t\tSystem.out.println(\"ccngetfile took: \"+(System.currentTimeMillis() - starttime)+\"ms\");\n\t\t\tSystem.out.println(\"Retrieved content \" + args[CommonParameters.startArg + 1] + \" got \" + readtotal + \" bytes.\");\n\t\t\tSystem.exit(0);\n\n\t\t} catch (ConfigurationException e) {\n\t\t\tSystem.out.println(\"Configuration exception in ccngetfile: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (MalformedContentNameStringException e) {\n\t\t\tSystem.out.println(\"Malformed name: \" + args[CommonParameters.startArg] + \" \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Cannot write file or read content. \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.exit(1);\n\t}","commit_id":"99c2e114f047bab7072badf6448f9c0c05d90f61","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tUsage u = new ccngetmeta();\n\t\t\n\t\tfor (int i = 0; i < args.length - 3; i++) {\n\t\t\tif (!CommonArguments.parseArguments(args, i, u)) {\n\t\t\t\tu.usage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tif (CommonParameters.startArg > i + 1)\n\t\t\t\ti = CommonParameters.startArg - 1;\n\t\t}\n\t\t\n\t\tif (args.length != CommonParameters.startArg + 3) {\n\t\t\tu.usage();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\tint readsize = 1024; // make an argument for testing...\n\t\t\t\n\t\t\tCCNHandle handle = CCNHandle.open();\n\n\t\t\tString metaArg = args[CommonParameters.startArg + 1];\n\t\t\tif (!metaArg.startsWith(\"/\"))\n\t\t\t\tmetaArg = \"/\" + metaArg;\n\t\t\tContentName fileName = MetadataProfile.getLatestVersion(ContentName.fromURI(args[CommonParameters.startArg]), \n\t\t\t\t\tContentName.fromNative(metaArg), CommonParameters.timeout, handle);\n\t\t\n\t\t\tif (fileName == null) {\n\t\t\t\t//This base content does not exist...  cannot get metadata associated with the base name.\n\t\t\t\tSystem.out.println(\"File \" + args[CommonParameters.startArg] + \" does not exist\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\t\n\t\t\tif (VersioningProfile.hasTerminalVersion(fileName)) {\n\t\t\t\t//MetadataProfile has found a terminal version...  we have something to get!\n\t\t\t} else {\n\t\t\t\t//MetadataProfile could not find a terminal version...  nothing to get\n\t\t\t\tSystem.out.println(\"File \" + fileName + \" does not exist...  exiting\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\t\n\t\t\tFile theFile = new File(args[CommonParameters.startArg + 2]);\n\t\t\tif (theFile.exists()) {\n\t\t\t\tSystem.out.println(\"Overwriting file: \" + args[CommonParameters.startArg + 1]);\n\t\t\t}\n\t\t\tFileOutputStream output = new FileOutputStream(theFile);\n\t\t\t\n\t\t\tlong starttime = System.currentTimeMillis();\n\t\t\tCCNInputStream input;\n\t\t\tif (CommonParameters.unversioned)\n\t\t\t\tinput = new CCNInputStream(fileName, handle);\n\t\t\telse\n\t\t\t\tinput = new CCNFileInputStream(fileName, handle);\n\t\t\tif (CommonParameters.timeout != null) {\n\t\t\t\tinput.setTimeout(CommonParameters.timeout); \n\t\t\t}\n\t\t\tbyte [] buffer = new byte[readsize];\n\t\t\t\n\t\t\tint readcount = 0;\n\t\t\tlong readtotal = 0;\n\t\t\t//while (!input.eof()) {\n\t\t\twhile ((readcount = input.read(buffer)) != -1){\n\t\t\t\t//readcount = input.read(buffer);\n\t\t\t\treadtotal += readcount;\n\t\t\t\toutput.write(buffer, 0, readcount);\n\t\t\t\toutput.flush();\n\t\t\t}\n\t\t\tif (CommonParameters.verbose)\n\t\t\t\tSystem.out.println(\"ccngetfile took: \"+(System.currentTimeMillis() - starttime)+\"ms\");\n\t\t\tSystem.out.println(\"Retrieved content \" + args[CommonParameters.startArg + 1] + \" got \" + readtotal + \" bytes.\");\n\t\t\tSystem.exit(0);\n\n\t\t} catch (ConfigurationException e) {\n\t\t\tSystem.out.println(\"Configuration exception in ccngetfile: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (MalformedContentNameStringException e) {\n\t\t\tSystem.out.println(\"Malformed name: \" + args[CommonParameters.startArg] + \" \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Cannot write file or read content. \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.exit(1);\n\t}","id":10678,"modified_method":"/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tUsage u = new ccngetmeta();\n\n\t\tfor (int i = 0; i < args.length; i++) {\n\t\t\tif (!CommonArguments.parseArguments(args, i, u)) {\n\t\t\t\tu.usage(CommonArguments.getExtraUsage());\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tif (CommonParameters.startArg > i + 1)\n\t\t\t\ti = CommonParameters.startArg - 1;\n\t\t\tif (i >= args.length - 3)\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif (args.length != CommonParameters.startArg + 3) {\n\t\t\tu.usage(CommonArguments.getExtraUsage());\n\t\t}\n\n\t\ttry {\n\t\t\tint readsize = 1024; // make an argument for testing...\n\n\t\t\tCCNHandle handle = CCNHandle.open();\n\n\t\t\tString metaArg = args[CommonParameters.startArg + 1];\n\t\t\tif (!metaArg.startsWith(\"/\"))\n\t\t\t\tmetaArg = \"/\" + metaArg;\n\t\t\tContentName fileName = MetadataProfile.getLatestVersion(ContentName.fromURI(args[CommonParameters.startArg]),\n\t\t\t\t\tContentName.fromNative(metaArg), CommonParameters.timeout, handle);\n\n\t\t\tif (fileName == null) {\n\t\t\t\t//This base content does not exist...  cannot get metadata associated with the base name.\n\t\t\t\tSystem.out.println(\"File \" + args[CommonParameters.startArg] + \" does not exist\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\n\t\t\tif (VersioningProfile.hasTerminalVersion(fileName)) {\n\t\t\t\t//MetadataProfile has found a terminal version...  we have something to get!\n\t\t\t} else {\n\t\t\t\t//MetadataProfile could not find a terminal version...  nothing to get\n\t\t\t\tSystem.out.println(\"File \" + fileName + \" does not exist...  exiting\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\n\t\t\tFile theFile = new File(args[CommonParameters.startArg + 2]);\n\t\t\tif (theFile.exists()) {\n\t\t\t\tSystem.out.println(\"Overwriting file: \" + args[CommonParameters.startArg + 1]);\n\t\t\t}\n\t\t\tFileOutputStream output = new FileOutputStream(theFile);\n\n\t\t\tlong starttime = System.currentTimeMillis();\n\t\t\tCCNInputStream input;\n\t\t\tif (CommonParameters.unversioned)\n\t\t\t\tinput = new CCNInputStream(fileName, handle);\n\t\t\telse\n\t\t\t\tinput = new CCNFileInputStream(fileName, handle);\n\t\t\tif (CommonParameters.timeout != null) {\n\t\t\t\tinput.setTimeout(CommonParameters.timeout);\n\t\t\t}\n\t\t\tbyte [] buffer = new byte[readsize];\n\n\t\t\tint readcount = 0;\n\t\t\tlong readtotal = 0;\n\t\t\t//while (!input.eof()) {\n\t\t\twhile ((readcount = input.read(buffer)) != -1){\n\t\t\t\t//readcount = input.read(buffer);\n\t\t\t\treadtotal += readcount;\n\t\t\t\toutput.write(buffer, 0, readcount);\n\t\t\t\toutput.flush();\n\t\t\t}\n\t\t\tif (CommonParameters.verbose)\n\t\t\t\tSystem.out.println(\"ccngetfile took: \"+(System.currentTimeMillis() - starttime)+\"ms\");\n\t\t\tSystem.out.println(\"Retrieved content \" + args[CommonParameters.startArg + 1] + \" got \" + readtotal + \" bytes.\");\n\t\t\tSystem.exit(0);\n\n\t\t} catch (ConfigurationException e) {\n\t\t\tSystem.out.println(\"Configuration exception in ccngetfile: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (MalformedContentNameStringException e) {\n\t\t\tSystem.out.println(\"Malformed name: \" + args[CommonParameters.startArg] + \" \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Cannot write file or read content. \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.exit(1);\n\t}","commit_id":"99c2e114f047bab7072badf6448f9c0c05d90f61","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// silence logging\n\t\tLog.setDefaultLevel(Level.WARNING);\n\t\t\n\t\tif ((args == null) || (args.length == 0)) {\n\t\t\tusage();\n\t\t}\n\t\t\n\t\tint pos = 0;\n\t\tif (args[pos].equals(\"-as\")) {\n\t\t\tif (args.length < pos+2) usage();\n\t\t\tpos++;\n\t\t\tsetUser(args[pos]);\n\t\t\tpos++;\n\t\t}\n\t\t\n\t\tif (args[pos].equals(\"-list\")) {\n\t\t\tlistGroups();\n\t\t\tSystem.exit(0);\n\t\t}\n\t\telse if (args[pos].equals(\"-listmembers\")) {\n\t\t\tif (args.length < pos + 2) usage();\n\t\t\tpos++;\n\t\t\tString groupName = args[pos];\n\t\t\tlistMembers(groupName);\n\t\t\tSystem.exit(0);\n\t\t}\n\t\telse if (args[pos].equals(\"-delete\")) {\n\t\t\tif (args.length < pos + 2) usage();\n\t\t\tpos ++;\n\t\t\tString groupName = args[pos];\n\t\t\tdeleteGroup(groupName);\n\t\t\tSystem.exit(0);\n\t\t}\n\t\telse if (args[pos].equals(\"-create\") || args[pos].equals(\"-add\") || args[pos].equals(\"-remove\")) {\n\t\t\tif (args.length < pos + 2) usage();\n\t\t\tString command = args[pos];\n\t\t\tpos++;\n\t\t\tString groupName = args[pos];\n\t\t\tpos++;\n\t\t\tArrayList<Link> groupMembers = new ArrayList<Link>();\n\t\t\tfor (int i=pos; i<args.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tLink lk = new Link(ContentName.fromNative(args[i]));\n\t\t\t\t\tgroupMembers.add(lk);\n\t\t\t\t} \n\t\t\t\tcatch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (command.equals(\"-create\")) createGroup(groupName, groupMembers);\n\t\t\telse if (command.equals(\"-add\")) addMember(groupName, groupMembers);\n\t\t\telse if (command.equals(\"-remove\")) removeMember(groupName, groupMembers);\n\t\t\tSystem.exit(0);\n\t\t}\n\t\telse {\n\t\t\tusage();\n\t\t}\n\n\t}","id":10679,"modified_method":"/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\t// silence logging\n\t\tLog.setDefaultLevel(Level.WARNING);\n\t\tString extraUsage = \"\";\n\n\t\tif ((args == null) || (args.length == 0)) {\n\t\t\tusage(extraUsage);\n\t\t}\n\n\t\tint pos = 0;\n\t\tif (args[0].startsWith(\"[\")) {\n\t\t\textraUsage = args[0];\n\t\t\tpos++;\n\t\t}\n\t\tif (args[pos].equals(\"-h\")) {\n\t\t\tusage(extraUsage);\n\t\t}\n\t\tif (args[pos].equals(\"-as\")) {\n\t\t\tif (args.length < pos+2) usage(extraUsage);\n\t\t\tpos++;\n\t\t\tsetUser(args[pos]);\n\t\t\tpos++;\n\t\t}\n\n\t\tif (args[pos].equals(\"-list\")) {\n\t\t\tlistGroups();\n\t\t\tSystem.exit(0);\n\t\t}\n\t\telse if (args[pos].equals(\"-listmembers\")) {\n\t\t\tif (args.length < pos + 2) usage(extraUsage);\n\t\t\tpos++;\n\t\t\tString groupName = args[pos];\n\t\t\tlistMembers(groupName);\n\t\t\tSystem.exit(0);\n\t\t}\n\t\telse if (args[pos].equals(\"-delete\")) {\n\t\t\tif (args.length < pos + 2) usage(extraUsage);\n\t\t\tpos ++;\n\t\t\tString groupName = args[pos];\n\t\t\tdeleteGroup(groupName);\n\t\t\tSystem.exit(0);\n\t\t}\n\t\telse if (args[pos].equals(\"-create\") || args[pos].equals(\"-add\") || args[pos].equals(\"-remove\")) {\n\t\t\tif (args.length < pos + 2) usage(extraUsage);\n\t\t\tString command = args[pos];\n\t\t\tpos++;\n\t\t\tString groupName = args[pos];\n\t\t\tpos++;\n\t\t\tArrayList<Link> groupMembers = new ArrayList<Link>();\n\t\t\tfor (int i=pos; i<args.length; i++) {\n\t\t\t\ttry {\n\t\t\t\t\tLink lk = new Link(ContentName.fromNative(args[i]));\n\t\t\t\t\tgroupMembers.add(lk);\n\t\t\t\t}\n\t\t\t\tcatch (Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (command.equals(\"-create\")) createGroup(groupName, groupMembers);\n\t\t\telse if (command.equals(\"-add\")) addMember(groupName, groupMembers);\n\t\t\telse if (command.equals(\"-remove\")) removeMember(groupName, groupMembers);\n\t\t\tSystem.exit(0);\n\t\t}\n\t\telse {\n\t\t\tusage(extraUsage);\n\t\t}\n\n\t}","commit_id":"99c2e114f047bab7072badf6448f9c0c05d90f61","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\ttry {\n\n\t\t\tint offset = 0;\n\t\t\tSaveType type = SaveType.REPOSITORY;\n\n\t\t\tfor (int i = 0; i < args.length; i++) {\n\n\t\t\t\tif (!args[i].startsWith(\"-\"))\n\t\t\t\t\tbreak;\n\n\t\t\t\tif (args[i].equals(\"-q\")) {\n\t\t\t\t\tLog.setDefaultLevel(Level.WARNING);\n\t\t\t\t\toffset++;\n\t\t\t\t}\n\n\t\t\t\tif (args[i].equals(\"-r\")) {\n\t\t\t\t\ttype = SaveType.RAW;\n\t\t\t\t\toffset++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (args.length-offset < 2) {\n\t\t\t\tusage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\n\t\t\tboolean hasAs = false;\n\t\t\tif (args.length - offset > 2) {\n\t\t\t\tif (args[offset + 2].equals(\"-as\"))\n\t\t\t\t\thasAs = true;\n\t\t\t\telse {\n\t\t\t\t\tusage();\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tContentName linkName = ContentName.fromURI(args[offset++]);\n\t\t\tContentName targetName = ContentName.fromURI(args[offset++]);\n\n\t\t\tTuple<Integer, CCNHandle> tuple = null;\n\n\t\t\tif (hasAs) {\n\t\t\t\ttuple = CreateUserData.handleAs(args, offset);\n\t\t\t\tif (null == tuple) {\n\t\t\t\t\tusage();\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Can also use command line system properties and environment variables to\n\t\t\t// point this handle to the correct user.\n\t\t\tCCNHandle handle = ((null == tuple) || (null == tuple.second())) ? CCNHandle.getHandle() : tuple.second();\n\n\t\t\tLinkObject theLink = new LinkObject(linkName, new Link(targetName), type, handle);\n\t\t\ttheLink.save();\n\t\t\ttheLink.close();\n\n\t\t\tSystem.out.println(\"Created link: \" + theLink);\n\n\t\t\thandle.close();\n\n\t\t} catch (Exception e) {\n\t\t\thandleException(\"Error: cannot initialize device. \", e);\n\t\t\tSystem.exit(-3);\n\t\t}\n\t}","id":10680,"modified_method":"/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tString extraUsage = \"\";\n\n\t\ttry {\n\n\t\t\tint offset = 0;\n\t\t\tSaveType type = SaveType.REPOSITORY;\n\n\t\t\tfor (int i = 0; i < args.length; i++) {\n\t\t\t\tif (i == 0 && args[0].startsWith(\"[\")) {\n\t\t\t\t\textraUsage = args[0];\n\t\t\t\t} else if (args[i].equals(\"-h\")) {\n\t\t\t\t\tusage(extraUsage);\n\t\t\t\t\tSystem.exit(0);\n\t\t\t\t} else if (!args[i].startsWith(\"-\"))\n\t\t\t\t\tbreak;\n\t\t\t\tif (args[i].equals(\"-q\")) {\n\t\t\t\t\tLog.setDefaultLevel(Level.WARNING);\n\t\t\t\t\toffset++;\n\t\t\t\t}\n\n\t\t\t\tif (args[i].equals(\"-r\")) {\n\t\t\t\t\ttype = SaveType.RAW;\n\t\t\t\t\toffset++;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (args.length-offset < 2) {\n\t\t\t\tusage(extraUsage);\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\n\t\t\tboolean hasAs = false;\n\t\t\tif (args.length - offset > 2) {\n\t\t\t\tif (args[offset + 2].equals(\"-as\"))\n\t\t\t\t\thasAs = true;\n\t\t\t\telse {\n\t\t\t\t\tusage(extraUsage);\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tContentName linkName = ContentName.fromURI(args[offset++]);\n\t\t\tContentName targetName = ContentName.fromURI(args[offset++]);\n\n\t\t\tTuple<Integer, CCNHandle> tuple = null;\n\n\t\t\tif (hasAs) {\n\t\t\t\ttuple = CreateUserData.handleAs(args, offset);\n\t\t\t\tif (null == tuple) {\n\t\t\t\t\tusage(extraUsage);\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Can also use command line system properties and environment variables to\n\t\t\t// point this handle to the correct user.\n\t\t\tCCNHandle handle = ((null == tuple) || (null == tuple.second())) ? CCNHandle.getHandle() : tuple.second();\n\n\t\t\tLinkObject theLink = new LinkObject(linkName, new Link(targetName), type, handle);\n\t\t\ttheLink.save();\n\t\t\ttheLink.close();\n\n\t\t\tSystem.out.println(\"Created link: \" + theLink);\n\n\t\t\thandle.close();\n\n\t\t} catch (Exception e) {\n\t\t\thandleException(\"Error: cannot initialize device. \", e);\n\t\t\tSystem.exit(-3);\n\t\t}\n\t}","commit_id":"99c2e114f047bab7072badf6448f9c0c05d90f61","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * Initialization function for ccnlsrepo.  This method parses the command line input\n\t * and creates a ContentName for the supplied prefix (or creates a new ContentName for the default \"/\" prefix).\n\t * The program prints the usage and exits if the input is not correct.\n\t * \n\t * @param args Command line arguments.  Prefix to enumerate and timeout flags.\n\t * \n\t * @return void\n\t * \n\t * @throws org.ccnx.ccn.protocol.MalformedContentNameStringException Converting the input to a\n\t * ContentName can throw a MalformedContentNameException.\n\t * \n\t * @see org.ccnx.ccn.protocol.ContentName\n\t */\n\t\n\tprivate void init(String[] args) {\n\t\t// first look for prefix and timeout in the args list\n\t\tboolean tflag = false;\n\t\tboolean cflag = false;\n\t\tfor (int i = 0; i < args.length; i++) {\n\t\t\tif (!args[i].equals(\"-timeout\") && !args[i].equals(\"-c\") && !args[i].equals(\"-continuous\")) {\n\t\t\t\tprefix = args[i];\n\t\t\t} else if (args[i].equals(\"-timeout\")) {\n\t\t\t\tif (cflag) {\n\t\t\t\t\tSystem.err.println(\"please use either the -timeout or -c flags, not both\");\n\t\t\t\t\tusage();\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t\ttflag = true;\n\t\t\t\ti++;\n\t\t\t\tif (i >= args.length) {\n\t\t\t\t\tusage();\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttimeout = Long.parseLong(args[i]);\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tSystem.err.println(\"Could not parse timeout.  Please check and retry.\");\n\t\t\t\t\t\tusage();\n\t\t\t\t\t\tSystem.exit(1);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t}\n\t\t\t} else if (args[i].equals(\"-c\") || args[i].equals(\"-continuous\")) {\n\t\t\t\tcflag = true;\n\t\t\t\tif (tflag) {\n\t\t\t\t\tSystem.err.println(\"please use either the -timeout or -c flags, not both\");\n\t\t\t\t\tusage();\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t\ttimeout = 0;\n\t\t\t}\n\t\t\t\n\t\t}\n\n\t\ttry {\n\t\t\tif (prefix == null || prefix.equals(\"\"))\n\t\t\t\tname = ContentName.ROOT;\n\t\t\telse\n\t\t\t\tname = ContentName.fromURI(prefix);\n\t\t\tLog.fine(\"monitoring prefix \" + name.toString());\n\t\t} catch (MalformedContentNameStringException e) {\n\t\t\tSystem.err.println(e.toString());\n\t\t\tSystem.err.println(\"could not create parse prefix, please be sure it is a valid name prefix\");\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tif (timeout > 0)\n\t\t\tLog.fine(\"monitoring prefix for \" + timeout + \"ms\");\n\n\t\tallNames = new TreeSet<ContentName>();\n\t}","id":10681,"modified_method":"/**\n\t * Initialization function for ccnlsrepo.  This method parses the command line input\n\t * and creates a ContentName for the supplied prefix (or creates a new ContentName for the default \"/\" prefix).\n\t * The program prints the usage and exits if the input is not correct.\n\t *\n\t * @param args Command line arguments.  Prefix to enumerate and timeout flags.\n\t *\n\t * @return void\n\t *\n\t * @throws org.ccnx.ccn.protocol.MalformedContentNameStringException Converting the input to a\n\t * ContentName can throw a MalformedContentNameException.\n\t *\n\t * @see org.ccnx.ccn.protocol.ContentName\n\t */\n\n\tprivate void init(String[] args) {\n\t\t// first look for prefix and timeout in the args list\n\t\tboolean tflag = false;\n\t\tboolean cflag = false;\n\t\tString extraUsage = \"\";\n\n\t\tfor (int i = 0; i < args.length; i++) {\n\t\t\tif (i == 0 && args[0].startsWith(\"[\")) {\n\t\t\t\textraUsage = args[0];\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (args[i].equals(\"-h\")) {\n\t\t\t\tusage(extraUsage);\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t\tif (!args[i].equals(\"-timeout\") && !args[i].equals(\"-c\") && !args[i].equals(\"-continuous\")) {\n\t\t\t\tprefix = args[i];\n\t\t\t} else if (args[i].equals(\"-timeout\")) {\n\t\t\t\tif (cflag) {\n\t\t\t\t\tSystem.err.println(\"please use either the -timeout or -c flags, not both\");\n\t\t\t\t\tusage(extraUsage);\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t\ttflag = true;\n\t\t\t\ti++;\n\t\t\t\tif (i >= args.length) {\n\t\t\t\t\tusage(extraUsage);\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t} else {\n\t\t\t\t\ttry {\n\t\t\t\t\t\ttimeout = Long.parseLong(args[i]);\n\t\t\t\t\t} catch (Exception e) {\n\t\t\t\t\t\tSystem.err.println(\"Could not parse timeout.  Please check and retry.\");\n\t\t\t\t\t\tusage(extraUsage);\n\t\t\t\t\t\tSystem.exit(1);\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t} else if (args[i].equals(\"-c\") || args[i].equals(\"-continuous\")) {\n\t\t\t\tcflag = true;\n\t\t\t\tif (tflag) {\n\t\t\t\t\tSystem.err.println(\"please use either the -timeout or -c flags, not both\");\n\t\t\t\t\tusage(extraUsage);\n\t\t\t\t\tSystem.exit(1);\n\t\t\t\t}\n\t\t\t\ttimeout = 0;\n\t\t\t}\n\n\t\t}\n\n\t\ttry {\n\t\t\tif (prefix == null || prefix.equals(\"\"))\n\t\t\t\tname = ContentName.ROOT;\n\t\t\telse\n\t\t\t\tname = ContentName.fromURI(prefix);\n\t\t\tLog.fine(\"monitoring prefix \" + name.toString());\n\t\t} catch (MalformedContentNameStringException e) {\n\t\t\tSystem.err.println(e.toString());\n\t\t\tSystem.err.println(\"could not create parse prefix, please be sure it is a valid name prefix\");\n\t\t\tSystem.exit(1);\n\t\t}\n\n\t\tif (timeout > 0)\n\t\t\tLog.fine(\"monitoring prefix for \" + timeout + \"ms\");\n\n\t\tallNames = new TreeSet<ContentName>();\n\t}","commit_id":"99c2e114f047bab7072badf6448f9c0c05d90f61","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\ttry {\n\n\t\t\tif (args.length < 1) {\n\t\t\t\tusage();\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tCCNHandle handle = CCNHandle.getHandle();\n\n\t\t\tint offset = 0;\n\t\t\tif ((args.length > 1) && (args[0].equals(\"-q\"))) {\n\t\t\t\tLog.setDefaultLevel(Level.WARNING);\n\t\t\t\toffset++;\n\t\t\t}\n\n\t\t\tContentName linkName = null;\n\t\t\tLinkObject linkObject = null;\n\t\t\tfor (int i=offset; i < args.length; ++i) {\n\t\t\t\ttry {\n\t\t\t\tlinkName = ContentName.fromURI(args[i]);\n\t\t\t\tlinkObject = new LinkObject(linkName, handle);\n\t\t\t\tif (linkObject.available()) {\n\t\t\t\t\tSystem.out.println(\"Link: \" + linkObject);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"No data available at \" + linkName);\n\t\t\t\t}\n\t\t\t\t} catch (ContentDecodingException e) {\n\t\t\t\t\tSystem.out.println(linkName + \" is not a link: \" + e.getMessage());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thandle.close();\n\t\t} catch (Exception e) {\n\t\t\thandleException(\"Error: cannot initialize device. \", e);\n\t\t\tSystem.exit(-3);\n\t\t}\n\t}","id":10682,"modified_method":"/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tString extraUsage = \"\";\n\n\t\ttry {\n\n\t\t\tif (args == null || args.length == 0) {\n\t\t\t\tusage(extraUsage);\n\t\t\t}\n\n\t\t\tint offset = 0;\n\t\t\tif (args[0].startsWith(\"[\")) {\n\t\t\t\textraUsage = args[0];\n\t\t\t\toffset++;\n\t\t\t}\n\t\t\tif (args[offset].equals(\"-h\")) {\n\t\t\t\tusage(extraUsage);\n\t\t\t}\n\n\t\t\tif (args.length < 2) {\n\t\t\t\tusage(extraUsage);\n\t\t\t}\n\t\t\tCCNHandle handle = CCNHandle.getHandle();\n\n\t\t\tif ((args.length > 1) && (args[0].equals(\"-q\"))) {\n\t\t\t\tLog.setDefaultLevel(Level.WARNING);\n\t\t\t\toffset++;\n\t\t\t}\n\n\t\t\tContentName linkName = null;\n\t\t\tLinkObject linkObject = null;\n\t\t\tfor (int i=offset; i < args.length; ++i) {\n\t\t\t\ttry {\n\t\t\t\tlinkName = ContentName.fromURI(args[i]);\n\t\t\t\tlinkObject = new LinkObject(linkName, handle);\n\t\t\t\tif (linkObject.available()) {\n\t\t\t\t\tSystem.out.println(\"Link: \" + linkObject);\n\t\t\t\t} else {\n\t\t\t\t\tSystem.out.println(\"No data available at \" + linkName);\n\t\t\t\t}\n\t\t\t\t} catch (ContentDecodingException e) {\n\t\t\t\t\tSystem.out.println(linkName + \" is not a link: \" + e.getMessage());\n\t\t\t\t}\n\t\t\t}\n\n\t\t\thandle.close();\n\t\t} catch (Exception e) {\n\t\t\thandleException(\"Error: cannot initialize device. \", e);\n\t\t\tSystem.exit(-3);\n\t\t}\n\t}","commit_id":"99c2e114f047bab7072badf6448f9c0c05d90f61","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * @param args\n\t */\n\tpublic void write(String[] args) {\n\t\tLog.setDefaultLevel(Level.WARNING);\n\t\t\n\t\tfor (int i = 0; i < args.length - 2; i++) {\n\t\t\tif (args[i].equals(\"-local\")) {\n\t\t\t\tCommonParameters.local = true;\n\t\t\t} else if (args[i].equals((\"-allownonlocal\"))) {\n\t\t\t\tCommonParameters.local = false;\n\t\t\t} else if (args[i].equals((\"-raw\"))) {\n\t\t\t\tCommonParameters.rawMode = true;\n\t\t\t} else {\n\t\t\t\tif (!CommonArguments.parseArguments(args, i, ccnputfile)) {\n\t\t\t\t\tusage();\n\t\t\t\t}\n\t\t\t\tif (CommonParameters.startArg > i + 1)\n\t\t\t\t\ti = CommonParameters.startArg - 1;\n\t\t\t}\n\t\t\tif (CommonParameters.startArg <= i)\n\t\t\t\tCommonParameters.startArg = i + 1;\n\t\t}\n\t\t\n\t\tif (args.length < CommonParameters.startArg + 2) {\n\t\t\tusage();\n\t\t}\n\t\t\t\t\n\t\tlong starttime = System.currentTimeMillis();\n\t\ttry {\n\t\t\t// If we get one file name, put as the specific name given.\n\t\t\t// If we get more than one, put underneath the first as parent.\n\t\t\t// Ideally want to use newVersion to get latest version. Start\n\t\t\t// with random version.\n\t\t\tContentName argName = ContentName.fromURI(args[CommonParameters.startArg]);\n\t\t\t\n\t\t\tCCNHandle handle = CCNHandle.open();\n\t\t\t\n\t\t\tif (args.length == (CommonParameters.startArg + 2)) {\n\t\t\t\tif (CommonParameters.verbose)\n\t\t\t\t\tLog.info(\"ccnputfile: putting file \" + args[CommonParameters.startArg + 1]);\n\t\t\t\t\n\t\t\t\tdoPut(handle, args[CommonParameters.startArg + 1], argName);\n\t\t\t\tSystem.out.println(\"Inserted file \" + args[CommonParameters.startArg + 1] + \".\");\n\t\t\t\tif (CommonParameters.verbose)\n\t\t\t\t\tSystem.out.println(\"ccnputfile took: \"+(System.currentTimeMillis() - starttime)+\" ms\");\n\t\t\t\tSystem.exit(0);\n\t\t\t} else {\n\t\t\t\tfor (int i=CommonParameters.startArg + 1; i < args.length; ++i) {\n\t\t\t\t\t\n\t\t\t\t\t// put as child of name\n\t\t\t\t\tContentName nodeName = new ContentName(argName, args[i]);\n\t\t\t\t\t\n\t\t\t\t\tdoPut(handle, args[i], nodeName);\n\t\t\t\t\t// leave this one as always printing for now\n\t\t\t\t\tSystem.out.println(\"Inserted file \" + args[i] + \".\");\n\t\t\t\t}\n\t\t\t\tif (CommonParameters.verbose)\n\t\t\t\t\tSystem.out.println(\"ccnputfile took: \"+(System.currentTimeMillis() - starttime)+\" ms\");\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t} catch (ConfigurationException e) {\n\t\t\tSystem.out.println(\"Configuration exception in put: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (MalformedContentNameStringException e) {\n\t\t\tSystem.out.println(\"Malformed name: \" + args[CommonParameters.startArg] + \" \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Cannot put file. \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (InvalidKeyException e) {\n\t\t\tSystem.out.println(\"Cannot publish invalid key: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.exit(1);\n\n\t}","id":10683,"modified_method":"/**\n\t * @param args\n\t */\n\tpublic void write(String[] args) {\n\t\tLog.setDefaultLevel(Level.WARNING);\n\n\t\tfor (int i = 0; i < args.length; i++) {\n\t\t\tboolean ret = CommonArguments.parseArguments(args, i, ccnputfile);\n\t\t\tif (CommonParameters.startArg > i + 1) {\n\t\t\t\ti = CommonParameters.startArg - 1;\n\t\t\t}\n\t\t\tif ((i + 2) > args.length)\n\t\t\t\tbreak;\n\t\t\tif (args[i].equals(\"-local\")) {\n\t\t\t\tCommonParameters.local = true;\n\t\t\t} else if (args[i].equals((\"-allownonlocal\"))) {\n\t\t\t\tCommonParameters.local = false;\n\t\t\t} else if (args[i].equals((\"-raw\"))) {\n\t\t\t\tCommonParameters.rawMode = true;\n\t\t\t}\n\t\t\tif (!ret)\n\t\t\t\tusage(CommonArguments.getExtraUsage());\n\t\t}\n\n\t\tif (args.length < CommonParameters.startArg + 2) {\n\t\t\tusage(CommonArguments.getExtraUsage());\n\t\t}\n\n\t\tlong starttime = System.currentTimeMillis();\n\t\ttry {\n\t\t\t// If we get one file name, put as the specific name given.\n\t\t\t// If we get more than one, put underneath the first as parent.\n\t\t\t// Ideally want to use newVersion to get latest version. Start\n\t\t\t// with random version.\n\t\t\tContentName argName = ContentName.fromURI(args[CommonParameters.startArg]);\n\n\t\t\tCCNHandle handle = CCNHandle.open();\n\n\t\t\tif (args.length == (CommonParameters.startArg + 2)) {\n\t\t\t\tif (CommonParameters.verbose)\n\t\t\t\t\tLog.info(\"ccnputfile: putting file \" + args[CommonParameters.startArg + 1]);\n\n\t\t\t\tdoPut(handle, args[CommonParameters.startArg + 1], argName);\n\t\t\t\tSystem.out.println(\"Inserted file \" + args[CommonParameters.startArg + 1] + \".\");\n\t\t\t\tif (CommonParameters.verbose)\n\t\t\t\t\tSystem.out.println(\"ccnputfile took: \"+(System.currentTimeMillis() - starttime)+\" ms\");\n\t\t\t\tSystem.exit(0);\n\t\t\t} else {\n\t\t\t\tfor (int i=CommonParameters.startArg + 1; i < args.length; ++i) {\n\n\t\t\t\t\t// put as child of name\n\t\t\t\t\tContentName nodeName = new ContentName(argName, args[i]);\n\n\t\t\t\t\tdoPut(handle, args[i], nodeName);\n\t\t\t\t\t// leave this one as always printing for now\n\t\t\t\t\tSystem.out.println(\"Inserted file \" + args[i] + \".\");\n\t\t\t\t}\n\t\t\t\tif (CommonParameters.verbose)\n\t\t\t\t\tSystem.out.println(\"ccnputfile took: \"+(System.currentTimeMillis() - starttime)+\" ms\");\n\t\t\t\tSystem.exit(0);\n\t\t\t}\n\t\t} catch (ConfigurationException e) {\n\t\t\tSystem.out.println(\"Configuration exception in put: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (MalformedContentNameStringException e) {\n\t\t\tSystem.out.println(\"Malformed name: \" + args[CommonParameters.startArg] + \" \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Cannot put file. \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (InvalidKeyException e) {\n\t\t\tSystem.out.println(\"Cannot publish invalid key: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.exit(1);\n\n\t}","commit_id":"99c2e114f047bab7072badf6448f9c0c05d90f61","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * @param args\n\t */\n\tpublic void write(String[] args) {\n\t\tLog.setDefaultLevel(Level.WARNING);\n\t\tfor (int i = 0; i < args.length - 3; i++) {\n\t\t\tif (args[i].equals(\"-local\")) {\n\t\t\t\tCommonParameters.local = true;\n\t\t\t} else if (args[i].equals((\"-allownonlocal\"))) {\n\t\t\t\tCommonParameters.local = false;\n\t\t\t} else if (args[i].equals((\"-raw\"))) {\n\t\t\t\tCommonParameters.rawMode = true;\n\t\t\t} else {\n\t\t\t\tif (!CommonArguments.parseArguments(args, i, ccnputmeta)) {\n\t\t\t\t\tusage();\n\t\t\t\t}\n\t\t\t\tif (CommonParameters.startArg > i + 1)\n\t\t\t\t\ti = CommonParameters.startArg - 1;\n\t\t\t}\n\t\t\tif (CommonParameters.startArg <= i)\n\t\t\t\tCommonParameters.startArg = i + 1;\n\t\t}\n\t\t\n\t\tif (args.length != CommonParameters.startArg + 3) {\n\t\t\tusage();\n\t\t}\n\t\t\n\t\tlong starttime = System.currentTimeMillis();\n\t\ttry {\n\t\t\t// If we get one file name, put as the specific name given.\n\t\t\t// If we get more than one, put underneath the first as parent.\n\t\t\t// Ideally want to use newVersion to get latest version. Start\n\t\t\t// with random version.\n\t\t\t\n\t\t\tContentName baseName = ContentName.fromURI(args[CommonParameters.startArg]);\n\t\t\tString metaArg = args[CommonParameters.startArg + 1];\n\t\t\tif (!metaArg.startsWith(\"/\"))\n\t\t\t\tmetaArg = \"/\" + metaArg;\n\t\t\tContentName metaPath = ContentName.fromURI(metaArg);\n\t\t\tCCNHandle handle = CCNHandle.open();\n\t\t\tContentName prevFileName = MetadataProfile.getLatestVersion(baseName, metaPath, CommonParameters.timeout, handle);\n\t\t\tif (null == prevFileName) {\n\t\t\t\tSystem.out.println(\"File \" + baseName + \" does not exist\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tContentName fileName = VersioningProfile.updateVersion(prevFileName);\n\t\t\tif (CommonParameters.verbose)\n\t\t\t\tLog.info(\"ccnputmeta: putting metadata file \" + args[CommonParameters.startArg + 1]);\n\t\t\t\n\t\t\tdoPut(handle, args[CommonParameters.startArg + 2], fileName);\n\t\t\tSystem.out.println(\"Inserted metadata file: \" + args[CommonParameters.startArg + 1] + \" for file: \" + args[CommonParameters.startArg] + \".\");\n\t\t\tif (CommonParameters.verbose)\n\t\t\t\tSystem.out.println(\"ccnputmeta took: \"+(System.currentTimeMillis() - starttime)+\" ms\");\n\t\t\tSystem.exit(0);\n\t\t} catch (ConfigurationException e) {\n\t\t\tSystem.out.println(\"Configuration exception in put: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (MalformedContentNameStringException e) {\n\t\t\tSystem.out.println(\"Malformed name: \" + args[CommonParameters.startArg] + \" \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Cannot put metadata file. \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (InvalidKeyException e) {\n\t\t\tSystem.out.println(\"Cannot publish invalid key: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.exit(1);\n\n\t}","id":10684,"modified_method":"/**\n\t * @param args\n\t */\n\tpublic void write(String[] args) {\n\t\tLog.setDefaultLevel(Level.WARNING);\n\t\tfor (int i = 0; i < args.length; i++) {\n\t\t\tboolean ret = CommonArguments.parseArguments(args, i, ccnputmeta);\n\t\t\tif (CommonParameters.startArg > i + 1) {\n\t\t\t\ti = CommonParameters.startArg - 1;\n\t\t\t}\n\t\t\tif (CommonParameters.startArg <= i)\n\t\t\t\tCommonParameters.startArg = i + 1;\n\t\t\tif ((i + 3) > args.length)\n\t\t\t\tbreak;\n\t\t\tif (args[i].equals(\"-local\")) {\n\t\t\t\tCommonParameters.local = true;\n\t\t\t} else if (args[i].equals((\"-allownonlocal\"))) {\n\t\t\t\tCommonParameters.local = false;\n\t\t\t} else if (args[i].equals((\"-raw\"))) {\n\t\t\t\tCommonParameters.rawMode = true;\n\t\t\t}\n\t\t\tif (!ret)\n\t\t\t\tusage(CommonArguments.getExtraUsage());\n\t\t}\n\n\t\tif (args.length != CommonParameters.startArg + 3) {\n\t\t\tusage(CommonArguments.getExtraUsage());\n\t\t}\n\n\t\tlong starttime = System.currentTimeMillis();\n\t\ttry {\n\t\t\t// If we get one file name, put as the specific name given.\n\t\t\t// If we get more than one, put underneath the first as parent.\n\t\t\t// Ideally want to use newVersion to get latest version. Start\n\t\t\t// with random version.\n\n\t\t\tContentName baseName = ContentName.fromURI(args[CommonParameters.startArg]);\n\t\t\tString metaArg = args[CommonParameters.startArg + 1];\n\t\t\tif (!metaArg.startsWith(\"/\"))\n\t\t\t\tmetaArg = \"/\" + metaArg;\n\t\t\tContentName metaPath = ContentName.fromURI(metaArg);\n\t\t\tCCNHandle handle = CCNHandle.open();\n\t\t\tContentName prevFileName = MetadataProfile.getLatestVersion(baseName, metaPath, CommonParameters.timeout, handle);\n\t\t\tif (null == prevFileName) {\n\t\t\t\tSystem.out.println(\"File \" + baseName + \" does not exist\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\tContentName fileName = VersioningProfile.updateVersion(prevFileName);\n\t\t\tif (CommonParameters.verbose)\n\t\t\t\tLog.info(\"ccnputmeta: putting metadata file \" + args[CommonParameters.startArg + 1]);\n\n\t\t\tdoPut(handle, args[CommonParameters.startArg + 2], fileName);\n\t\t\tSystem.out.println(\"Inserted metadata file: \" + args[CommonParameters.startArg + 1] + \" for file: \" + args[CommonParameters.startArg] + \".\");\n\t\t\tif (CommonParameters.verbose)\n\t\t\t\tSystem.out.println(\"ccnputmeta took: \"+(System.currentTimeMillis() - starttime)+\" ms\");\n\t\t\tSystem.exit(0);\n\t\t} catch (ConfigurationException e) {\n\t\t\tSystem.out.println(\"Configuration exception in put: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (MalformedContentNameStringException e) {\n\t\t\tSystem.out.println(\"Malformed name: \" + args[CommonParameters.startArg] + \" \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Cannot put metadata file. \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (InvalidKeyException e) {\n\t\t\tSystem.out.println(\"Cannot publish invalid key: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.exit(1);\n\n\t}","commit_id":"99c2e114f047bab7072badf6448f9c0c05d90f61","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"/**\n\t * @param args\n\t */\n\tpublic static void main(String[] args) {\n\t\tint startArg = 0;\n\t\t\n\t\tfor (int i = 0; i < args.length - 2; i++) {\n\t\t\tif (args[i].equals(\"-timeout\")) {\n\t\t\t\tif (args.length < (i + 2)) {\n\t\t\t\t\tusage();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\ttimeout = Integer.parseInt(args[++i]);\n\t\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\t\tusage();\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tif (startArg <= i)\n\t\t\t\t\tstartArg = i + 1;\n\t\t\t} else if (args[i].equals(\"-log\")) {\n\t\t\t\tLevel level = null;\n\t\t\t\tif (args.length < (i + 2)) {\n\t\t\t\t\tusage();\n\t\t\t\t}\n\t\t\t\ttry {\n\t\t\t\t\tlevel = Level.parse(args[++i]);\n\t\t\t\t} catch (NumberFormatException nfe) {\n\t\t\t\t\tusage();\n\t\t\t\t}\n\t\t\t\tLog.setLevel(level);\n\t\t\t\tif (startArg <= i)\n\t\t\t\t\tstartArg = i + 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tusage();\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t}\n\t\t\n\t\tif (args.length < startArg + 2) {\n\t\t\tusage();\n\t\t\tSystem.exit(1);\n\t\t}\n\t\t\n\t\ttry {\n\t\t\t\n\t\t\tFile repoDir = new File(args[startArg]);\n\t\t\tif (!repoDir.exists()) {\n\t\t\t\tSystem.out.println(\"Repo at: \" + args[startArg + 1] + \" does not exist\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\t\n\t\t\tFile repoImportDir = new File(repoDir, LogStructRepoStoreProfile.REPO_IMPORT_DIR);\n\t\t\trepoImportDir.mkdir();\n\t\t\t\n\t\t\tFile theFile = new File(args[startArg + 1]);\n\t\t\tif (!theFile.exists()) {\n\t\t\t\tSystem.out.println(\"File: \" + args[startArg + 1] + \" does not exist\");\n\t\t\t\tSystem.exit(1);\n\t\t\t}\n\t\t\t\n\t\t\tFile importFile;\n\t\t\tString importName;\n\t\t\tint test = 0;\n\t\t\twhile (true) {\n\t\t\t\ttest++;\n\t\t\t\timportName = importFileName + test;\n\t\t\t\timportFile = new File(repoImportDir, importName);\n\t\t\t\tif (!importFile.exists()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tFileInputStream fis = new FileInputStream(theFile);\n\t\t\tFileOutputStream fos = new FileOutputStream(importFile);\n\t\t\tbyte[] buf = new byte[8192];\n\t\t\twhile (fis.available() > 0) {\n\t\t\t\tint len = fis.available() > buf.length ? buf.length : fis.available();\n\t\t\t\tfis.read(buf, 0, len);\n\t\t\t\tfos.write(buf, 0, len);\n\t\t\t}\n\t\t\tfis.close();\n\t\t\tfos.close();\n\t\t\t\n\t\t\tCCNHandle handle = CCNHandle.open();\n\t\t\t\n\t\t\tlong starttime = System.currentTimeMillis();\n\t\t\t\n\t\t\tboolean result = RepositoryBulkImport.bulkImport(handle, importName, timeout);\n\t\t\tSystem.out.println(\"Bulk import of \" + theFile + (result ? \" succeeded\" : \" failed\"));\n\t\t\tSystem.out.println(\"ccnrepoimport took: \"+(System.currentTimeMillis() - starttime)+\" ms\");\n\t\t\tSystem.exit(0);\n\n\t\t} catch (ConfigurationException e) {\n\t\t\tSystem.out.println(\"Configuration exception in ccnrepoimport: \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\tSystem.out.println(\"Cannot import file. \" + e.getMessage());\n\t\t\te.printStackTrace();\n\t\t}\n\t\tSystem.exit(1);\n\t}","id":10685,"modified_method":"public static void main(String[] args) {\n\t\tccnrepoimport.doimport(args);\n\t}","commit_id":"99c2e114f047bab7072badf6448f9c0c05d90f61","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public SNode getRawTypeFromContext(SNode node) {\n    return getEquationManager().getRepresentator(myNodesToTypesMap.get(node));\n  }","id":10686,"modified_method":"public SNode getRawTypeFromContext(SNode node) {\n    return myNodesToTypesMap.get(node);\n  }","commit_id":"ec5b557712473fe11b8c8de8c440d02a0873df36","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SNode typeOf(SNode node) {\n    if (node == null) return null;\n    SNode type;\n    NodeTypesComponent_new currentTypesComponent = myTypeChecker.getCurrentTypesComponent();   //first, in current component\n    if (currentTypesComponent != null) {\n      //--- for incremental algorithm:\n      currentTypesComponent.addNodeToFrontier(node);\n      currentTypesComponent.addDependcyOnCurrent(node);\n      //----\n      type = currentTypesComponent.getRawTypeFromContext(node);\n      if (type != null) return type;\n    }\n\n    NodeTypesComponent_new nodeTypesComponent = NodeTypesComponentsRepository.getInstance()  // then, in appropriate component\n            .getNodeTypesComponent(node.getContainingRoot());\n    if (nodeTypesComponent != null && nodeTypesComponent != currentTypesComponent) {\n      type = nodeTypesComponent.getType(node);\n      if (type != null) return type;\n    }\n\n    SNode var = createNewRuntimeTypesVariable(false);\n    type = TypeChecker.asType(var);\n    myTypeChecker.getMainContext().put(node, type);\n    return myTypeChecker.getEquationManager().getRepresentator(type);\n  }","id":10687,"modified_method":"public SNode typeOf(SNode node) {\n    if (node == null) return null;\n    SNode type;\n    NodeTypesComponent_new currentTypesComponent = myTypeChecker.getCurrentTypesComponent();   //first, in current component\n    if (currentTypesComponent != null) {\n      //--- for incremental algorithm:\n      currentTypesComponent.addNodeToFrontier(node);\n      currentTypesComponent.addDependcyOnCurrent(node);\n      //----\n      type = currentTypesComponent.getRawTypeFromContext(node);\n      if (type != null) return getRepresentatorIfNecessary(type, currentTypesComponent);\n    }\n\n    NodeTypesComponent_new nodeTypesComponent = NodeTypesComponentsRepository.getInstance()  // then, in appropriate component\n            .getNodeTypesComponent(node.getContainingRoot());\n    if (nodeTypesComponent != null && nodeTypesComponent != currentTypesComponent) {\n      type = nodeTypesComponent.getType(node);\n      if (type != null) return type;\n    }\n\n    SNode var = createNewRuntimeTypesVariable(false);\n    type = TypeChecker.asType(var);\n    myTypeChecker.getMainContext().put(node, type);\n    return getRepresentatorIfNecessary(type, currentTypesComponent);\n  }","commit_id":"ec5b557712473fe11b8c8de8c440d02a0873df36","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode argument) {\n    // generic check\n    TypeChecker.getInstance().getRuntimeSupport().check(SLinkOperations.getTarget(argument, \"body\", true), \"jetbrains.mps.baseLanguage.helgins\", \"1178655253666\");\n    // =============\n    SNode expectedRetType = ConceptFunction_Behavior.call_getExpectedReturnType_1178571276073(argument);\n    boolean noReturnExpected = ((expectedRetType == null) || TypeChecker.getInstance().getSubtypingManager().isSubtype(expectedRetType, new QuotationClass_76().createNode()));\n    if(SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(expectedRetType), \"jetbrains.mps.baseLanguage.structure.WildCardType\")) {\n      // function is expected to return value of any type\n      expectedRetType = null;\n    }\n    SNode leastCommonSupertype = null;\n    // =============\n    Iterable<SNode> returnStatements = RulesFunctions_BaseLanguage.collectReturnStatements(SLinkOperations.getTarget(argument, \"body\", true));\n    boolean somethingReturned = !(SequenceOperations.isEmpty(returnStatements));\n    if(noReturnExpected) {\n      // shouldn't return any values\n      {\n        ICursor<SNode> _zCursor3 = CursorFactory.createCursor(returnStatements);\n        try {\n          while(_zCursor3.moveToNext()) {\n            SNode returnStatement = _zCursor3.getCurrent();\n            if((SLinkOperations.getTarget(returnStatement, \"expression\", true) != null)) {\n              TypeChecker.getInstance().reportTypeError(returnStatement, \"no return value expected\", \"jetbrains.mps.baseLanguage.helgins\", \"1178645658195\");\n            }\n          }\n        } finally {\n          _zCursor3.release();\n        }\n      }\n    } else\n    {\n      // should return subtypes of the 'expected type'\n      // if 'expected type' is null - should still return some value (of any type)\n      {\n        ICursor<SNode> _zCursor4 = CursorFactory.createCursor(returnStatements);\n        try {\n          while(_zCursor4.moveToNext()) {\n            SNode returnStatement = _zCursor4.getCurrent();\n            if((SLinkOperations.getTarget(returnStatement, \"expression\", true) == null)) {\n              TypeChecker.getInstance().reportTypeError(returnStatement, \"should return value\", \"jetbrains.mps.baseLanguage.helgins\", \"1178645688864\");\n            } else\n            {\n              leastCommonSupertype = RulesFunctions_BaseLanguage.computeLeastCommonSupertype(SLinkOperations.getTarget(returnStatement, \"expression\", true), leastCommonSupertype, expectedRetType);\n            }\n          }\n        } finally {\n          _zCursor4.release();\n        }\n      }\n    }\n    // =============\n    if(noReturnExpected) {\n      TypeChecker.getInstance().getRuntimeSupport().givetype(null, argument, \"jetbrains.mps.baseLanguage.helgins\", \"1179436909754\");\n    } else\n    {\n      // last expression statement can serve as return statement\n      SNode lastStatement = SequenceOperations.getLast(SLinkOperations.getTargets(SLinkOperations.getTarget(argument, \"body\", true), \"statement\", true));\n      if(SNodeOperations.isInstanceOf(lastStatement, \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")) {\n        SNode expression = SLinkOperations.getTarget(lastStatement, \"expression\", true);\n        leastCommonSupertype = RulesFunctions_BaseLanguage.computeLeastCommonSupertype(expression, leastCommonSupertype, expectedRetType);\n        somethingReturned = true;\n      }\n      if(!(somethingReturned)) {\n        String whatExpected = ((expectedRetType == null) ?\n          \"some value\" :\n          \"\" + expectedRetType\n        );\n        TypeChecker.getInstance().reportTypeError(argument, \"function should return \" + whatExpected, \"jetbrains.mps.baseLanguage.helgins\", \"1179436928064\");\n      }\n      if(leastCommonSupertype == null) {\n        TypeChecker.getInstance().getRuntimeSupport().givetype(expectedRetType, argument, \"jetbrains.mps.baseLanguage.helgins\", \"1179436928073\");\n      } else\n      {\n        TypeChecker.getInstance().getRuntimeSupport().givetype(leastCommonSupertype, argument, \"jetbrains.mps.baseLanguage.helgins\", \"1179436928081\");\n      }\n    }\n  }","id":10688,"modified_method":"public void applyRule(final SNode argument) {\n    SNode expectedRetType = ConceptFunction_Behavior.call_getExpectedReturnType_1178571276073(argument);\n    boolean noReturnExpected = ((expectedRetType == null) || TypeChecker.getInstance().getSubtypingManager().isSubtype(expectedRetType, new QuotationClass_76().createNode()));\n    if(SConceptOperations.isExactly(SNodeOperations.getConceptDeclaration(expectedRetType), \"jetbrains.mps.baseLanguage.structure.WildCardType\")) {\n      // function is expected to return value of any type\n      expectedRetType = null;\n    }\n    // =============\n    Iterable<SNode> returnStatements = RulesFunctions_BaseLanguage.collectReturnStatements(SLinkOperations.getTarget(argument, \"body\", true));\n    boolean somethingReturned = !(SequenceOperations.isEmpty(returnStatements));\n    // =============\n    final SNode LCS_typevar_1186052624152 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);\n    if(noReturnExpected) {\n      // shouldn't return any values\n      {\n        ICursor<SNode> _zCursor3 = CursorFactory.createCursor(returnStatements);\n        try {\n          while(_zCursor3.moveToNext()) {\n            SNode returnStatement = _zCursor3.getCurrent();\n            if((SLinkOperations.getTarget(returnStatement, \"expression\", true) != null)) {\n              TypeChecker.getInstance().reportTypeError(returnStatement, \"no return value expected\", \"jetbrains.mps.baseLanguage.helgins\", \"1186053278842\");\n            }\n          }\n        } finally {\n          _zCursor3.release();\n        }\n      }\n      TypeChecker.getInstance().getRuntimeSupport().givetype(null, argument, \"jetbrains.mps.baseLanguage.helgins\", \"1179436909754\");\n    } else\n    {\n      // should return subtypes of the 'expected type'\n      // if 'expected type' is null - should still return some value (of any type)\n      {\n        ICursor<SNode> _zCursor4 = CursorFactory.createCursor(returnStatements);\n        try {\n          while(_zCursor4.moveToNext()) {\n            SNode returnStatement = _zCursor4.getCurrent();\n            if((SLinkOperations.getTarget(returnStatement, \"expression\", true) == null)) {\n              TypeChecker.getInstance().reportTypeError(returnStatement, \"should return value\", \"jetbrains.mps.baseLanguage.helgins\", \"1186053304501\");\n            } else\n            {\n              TypeChecker.getInstance().getRuntimeSupport().createGreaterThanInequation(TypeChecker.getInstance().getEquationManager().getRepresentator(LCS_typevar_1186052624152), TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(returnStatement, \"expression\", true)), SLinkOperations.getTarget(returnStatement, \"expression\", true), null, \"jetbrains.mps.baseLanguage.helgins\", \"1186053304511\");\n            }\n          }\n        } finally {\n          _zCursor4.release();\n        }\n      }\n      // last expression statement can serve as return statement\n      SNode lastStatement = SequenceOperations.getLast(SLinkOperations.getTargets(SLinkOperations.getTarget(argument, \"body\", true), \"statement\", true));\n      if(SNodeOperations.isInstanceOf(lastStatement, \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\")) {\n        SNode expression = SLinkOperations.getTarget(lastStatement, \"expression\", true);\n        TypeChecker.getInstance().getRuntimeSupport().createGreaterThanInequation(TypeChecker.getInstance().getEquationManager().getRepresentator(LCS_typevar_1186052624152), TypeChecker.getInstance().getRuntimeSupport().typeOf(expression), expression, null, \"jetbrains.mps.baseLanguage.helgins\", \"1186053063874\");\n        somethingReturned = true;\n      }\n      if(!(somethingReturned)) {\n        String whatExpected = ((expectedRetType == null) ?\n          \"some value\" :\n          \"\" + expectedRetType\n        );\n        TypeChecker.getInstance().reportTypeError(argument, \"function should return \" + whatExpected, \"jetbrains.mps.baseLanguage.helgins\", \"1179436928064\");\n      }\n      TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(argument), TypeChecker.getInstance().getEquationManager().getRepresentator(LCS_typevar_1186052624152), argument, null, \"jetbrains.mps.baseLanguage.helgins\", \"1186053174208\");\n      if((expectedRetType != null)) {\n        TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(argument), expectedRetType, argument, null, \"jetbrains.mps.baseLanguage.helgins\", \"1186053540847\");\n      }\n    }\n  }","commit_id":"ec5b557712473fe11b8c8de8c440d02a0873df36","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SNode coerceTo_SequenceType(SNode type) {\n    SNode sequenceType = TypeChecker.getInstance().getRuntimeSupport().coerce(type, HUtil.createMatchingPatternByConceptFQName(\"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType\"), true);\n    if(sequenceType != null) {\n      return sequenceType;\n    }\n    if(sequenceType == null) {\n      return null;\n    }\n    // the following code is not reachable \n    if(type == null) {\n      return null;\n    }\n    // ==========\n    // TEMP FIX FOR DNQ 1\n    if(\"jetbrains.teamsys.dnq.structure.PListType\".equals(type.getConceptFqName())) {\n      SNode classifierType = type.getChild(\"classifierType\");\n      return new QuotationClass_35().createNode(SNodeOperations.copyNode(classifierType));\n    }\n    // END TEMP FIX\n    // ==========\n    // ==========\n    // TEMP FIX FOR DNQ\n    // TODO: extract generics information\n    if(type != null) {\n      SModel model = TypeChecker.getInstance().getRuntimeTypesModel();\n      GlobalScope scope = GlobalScope.getInstance();\n      SNode entity = BaseAdapter.fromAdapter(SModelUtil_new.findNodeByFQName(\"com.jetbrains.teamsys.database.Entity\", Classifier.class, scope));\n      if(entity == null) {\n        return null;\n      }\n      SNode entityType = SModelOperations.createNewNode(model, \"jetbrains.mps.baseLanguage.structure.ClassifierType\", null);\n      SLinkOperations.setTarget(entityType, \"classifier\", entity, false);\n      SNode javaIterable = BaseAdapter.fromAdapter(SModelUtil_new.findNodeByFQName(\"java.lang.Iterable\", Classifier.class, scope));\n      SNode javaIterableType = SModelOperations.createNewNode(model, \"jetbrains.mps.baseLanguage.structure.ClassifierType\", null);\n      SLinkOperations.setTarget(javaIterableType, \"classifier\", javaIterable, false);\n      SLinkOperations.addChild(javaIterableType, \"parameter\", entityType);\n      if(TypeChecker.getInstance().getSubtypingManager().isSubtype(type, javaIterableType)) {\n        return new QuotationClass_36().createNode(SNodeOperations.copyNode(entity));\n      }\n      // ==========\n      SNode entityIterable = BaseAdapter.fromAdapter(SModelUtil_new.findNodeByFQName(\"com.jetbrains.teamsys.database.EntityIterable\", Classifier.class, scope));\n      SNode entityIterableType = SModelOperations.createNewNode(model, \"jetbrains.mps.baseLanguage.structure.ClassifierType\", null);\n      SLinkOperations.setTarget(entityIterableType, \"classifier\", entityIterable, false);\n      if(TypeChecker.getInstance().getSubtypingManager().isSubtype(type, entityIterableType)) {\n        return new QuotationClass_37().createNode(SNodeOperations.copyNode(entity));\n      }\n    }\n    // END FIX\n    // ==========\n    return null;\n  }","id":10689,"modified_method":"public static SNode coerceTo_SequenceType(SNode type) {\n    SNode sequenceType = TypeChecker.getInstance().getRuntimeSupport().coerce(type, HUtil.createMatchingPatternByConceptFQName(\"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceType\"), true);\n    if(sequenceType != null) {\n      return sequenceType;\n    }\n    if(sequenceType == null) {\n      return null;\n    }\n    // the following code is not reachable \n    if(type == null) {\n      return null;\n    }\n    // ==========\n    // TEMP FIX FOR DNQ 1\n    if(\"jetbrains.teamsys.dnq.structure.PListType\".equals(type.getConceptFqName())) {\n      SNode classifierType = type.getChild(\"classifierType\");\n      return new QuotationClass_41().createNode(SNodeOperations.copyNode(classifierType));\n    }\n    // END TEMP FIX\n    // ==========\n    // ==========\n    // TEMP FIX FOR DNQ\n    // TODO: extract generics information\n    if(type != null) {\n      SModel model = TypeChecker.getInstance().getRuntimeTypesModel();\n      GlobalScope scope = GlobalScope.getInstance();\n      SNode entity = BaseAdapter.fromAdapter(SModelUtil_new.findNodeByFQName(\"com.jetbrains.teamsys.database.Entity\", Classifier.class, scope));\n      if(entity == null) {\n        return null;\n      }\n      SNode entityType = SModelOperations.createNewNode(model, \"jetbrains.mps.baseLanguage.structure.ClassifierType\", null);\n      SLinkOperations.setTarget(entityType, \"classifier\", entity, false);\n      SNode javaIterable = BaseAdapter.fromAdapter(SModelUtil_new.findNodeByFQName(\"java.lang.Iterable\", Classifier.class, scope));\n      SNode javaIterableType = SModelOperations.createNewNode(model, \"jetbrains.mps.baseLanguage.structure.ClassifierType\", null);\n      SLinkOperations.setTarget(javaIterableType, \"classifier\", javaIterable, false);\n      SLinkOperations.addChild(javaIterableType, \"parameter\", entityType);\n      if(TypeChecker.getInstance().getSubtypingManager().isSubtype(type, javaIterableType)) {\n        return new QuotationClass_42().createNode(SNodeOperations.copyNode(entity));\n      }\n      // ==========\n      SNode entityIterable = BaseAdapter.fromAdapter(SModelUtil_new.findNodeByFQName(\"com.jetbrains.teamsys.database.EntityIterable\", Classifier.class, scope));\n      SNode entityIterableType = SModelOperations.createNewNode(model, \"jetbrains.mps.baseLanguage.structure.ClassifierType\", null);\n      SLinkOperations.setTarget(entityIterableType, \"classifier\", entityIterable, false);\n      if(TypeChecker.getInstance().getSubtypingManager().isSubtype(type, entityIterableType)) {\n        return new QuotationClass_43().createNode(SNodeOperations.copyNode(entity));\n      }\n    }\n    // END FIX\n    // ==========\n    return null;\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SNode getSubOrSuperType(SNode type) {\n    return new QuotationClass_34().createNode(this.myMatchingPattern.PatternVar1);\n  }","id":10690,"modified_method":"public SNode getSubOrSuperType(SNode type) {\n    return new QuotationClass_40().createNode(this.myMatchingPattern.PatternVar1);\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SNode getSubOrSuperType(SNode type) {\n    return new QuotationClass_33().createNode(this.myMatchingPattern.PatternVar);\n  }","id":10691,"modified_method":"public SNode getSubOrSuperType(SNode type) {\n    return new QuotationClass_39().createNode(this.myMatchingPattern.PatternVar);\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SNode getSubOrSuperType(SNode type) {\n    return new QuotationClass_32().createNode(SLinkOperations.getTarget(type, \"elementType\", true));\n  }","id":10692,"modified_method":"public SNode getSubOrSuperType(SNode type) {\n    return new QuotationClass_38().createNode(SLinkOperations.getTarget(type, \"elementType\", true));\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SNode getSubOrSuperType(SNode type) {\n    return new QuotationClass_39().createNode();\n  }","id":10693,"modified_method":"public SNode getSubOrSuperType(SNode type) {\n    return new QuotationClass_45().createNode();\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SNode getSubOrSuperType(SNode type) {\n    return new QuotationClass_31().createNode(SLinkOperations.getTarget(type, \"elementType\", true));\n  }","id":10694,"modified_method":"public SNode getSubOrSuperType(SNode type) {\n    return new QuotationClass_37().createNode(SLinkOperations.getTarget(type, \"elementType\", true));\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public SNode getSubOrSuperType(SNode type) {\n    return new QuotationClass_38().createNode(SLinkOperations.getTarget(type, \"elementType\", true));\n  }","id":10695,"modified_method":"public SNode getSubOrSuperType(SNode type) {\n    return new QuotationClass_44().createNode(SLinkOperations.getTarget(type, \"elementType\", true));\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(SNode argument) {\n    SNode expectedElementType = RulesFunctions_Collections.get_inputListType_elementType(argument);\n    if(!(expectedElementType != null)) {\n      TypeChecker.getInstance().reportTypeError(argument, \"couldn't define input list element type\");\n    }\n    // ==========\n    SNode arg = SLinkOperations.getTarget(argument, \"argument\", true);\n    if(arg != null && expectedElementType != null) {\n      SNode expectedArgumentType = new QuotationClass_22().createNode(expectedElementType);\n      SNode actualArgumentType = TypeChecker.getInstance().getRuntimeSupport().checkedTypeOf(arg);\n      if(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(actualArgumentType, expectedArgumentType))) {\n        TypeChecker.getInstance().reportTypeError(arg, \"\" + expectedArgumentType + \" is expected\");\n      }\n    }\n  }","id":10696,"modified_method":"public void applyRule(SNode argument) {\n    SNode input = RulesFunctions_Collections.getInput(argument);\n    SNode elementType_typevar_1184856504412 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);\n    SNode expectedElementType_typevar_1184856504413 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(input), new QuotationClass_22().createNode(elementType_typevar_1184856504412), input, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184856504414\");\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(argument, \"argument\", true)), new QuotationClass_23().createNode(expectedElementType_typevar_1184856504413), SLinkOperations.getTarget(argument, \"argument\", true), null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184856504422\");\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(expectedElementType_typevar_1184856504413, elementType_typevar_1184856504412, argument, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184856504432\");\n    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(argument), new QuotationClass_24().createNode(), argument, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184856504436\");\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(SNode argument) {\n    SNode expectedElementType = RulesFunctions_Collections.get_inputListType_elementType(argument);\n    SNode argumant = SLinkOperations.getTarget(argument, \"argument\", true);\n    if(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getRuntimeSupport().checkedTypeOf(argumant), expectedElementType))) {\n      TypeChecker.getInstance().reportTypeError(argumant, \"\" + expectedElementType + \" is expected\");\n    }\n  }","id":10697,"modified_method":"public void applyRule(SNode argument) {\n    RulesFunctions_Collections.isInputElementType(argument, SLinkOperations.getTarget(argument, \"argument\", true));\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(SNode argument) {\n    SNode lValue = RulesFunctions_Collections.getInput(argument);\n    SNode rValue = SLinkOperations.getTarget(argument, \"rightExpression\", true);\n    SNode elementType_typevar_1184848397564 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);\n    SNode sequenceType_typevar_1184848409899 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);\n    TypeChecker.getInstance().getRuntimeSupport().createEquation(sequenceType_typevar_1184848409899, new QuotationClass_30().createNode(elementType_typevar_1184848397564), argument, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184848442457\");\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(lValue), sequenceType_typevar_1184848409899, lValue, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184848544308\");\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(rValue), sequenceType_typevar_1184848409899, rValue, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184848553704\");\n    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(argument), sequenceType_typevar_1184848409899, argument, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184848565182\");\n  }","id":10698,"modified_method":"public void applyRule(SNode argument) {\n    SNode lValue = RulesFunctions_Collections.getInput(argument);\n    SNode rValue = SLinkOperations.getTarget(argument, \"rightExpression\", true);\n    SNode elementType_typevar_1184848397564 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);\n    SNode sequenceType_typevar_1184848409899 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);\n    TypeChecker.getInstance().getRuntimeSupport().createEquation(sequenceType_typevar_1184848409899, new QuotationClass_36().createNode(elementType_typevar_1184848397564), argument, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184848442457\");\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(lValue), sequenceType_typevar_1184848409899, lValue, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184848544308\");\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(rValue), sequenceType_typevar_1184848409899, rValue, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184848553704\");\n    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(argument), sequenceType_typevar_1184848409899, argument, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184848565182\");\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(SNode argument) {\n    SNode elementType = RulesFunctions_Collections.get_inputListType_elementType(argument);\n    SNode arg = SLinkOperations.getTarget(argument, \"argument\", true);\n    if(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getRuntimeSupport().checkedTypeOf(arg), new QuotationClass_23().createNode()))) {\n      TypeChecker.getInstance().reportTypeError(arg, \"integer is expected\");\n    }\n    TypeChecker.getInstance().getRuntimeSupport().givetype(elementType, argument);\n  }","id":10699,"modified_method":"public void applyRule(SNode argument) {\n    RulesFunctions_Collections.setInputElementType(argument, argument);\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(argument, \"argument\", true)), new QuotationClass_25().createNode(), SLinkOperations.getTarget(argument, \"argument\", true), null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184856469305\");\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(SNode argument) {\n    SNode expectedElementType = RulesFunctions_Collections.get_inputListType_elementType(argument);\n    SNode arg = SLinkOperations.getTarget(argument, \"argument\", true);\n    if(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getRuntimeSupport().checkedTypeOf(arg), expectedElementType))) {\n      TypeChecker.getInstance().reportTypeError(arg, \"\" + expectedElementType + \" is expected\");\n    }\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_26().createNode(), argument);\n  }","id":10700,"modified_method":"public void applyRule(SNode argument) {\n    SNode input = RulesFunctions_Collections.getInput(argument);\n    SNode elementType_typevar_1184856779488 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(input), new QuotationClass_28().createNode(elementType_typevar_1184856779488), input, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184856768419\");\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(argument, \"argument\", true)), elementType_typevar_1184856779488, SLinkOperations.getTarget(argument, \"argument\", true), null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184856809408\");\n    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(argument), new QuotationClass_29().createNode(), argument, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184856713865\");\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(SNode argument) {\n    SNode input = RulesFunctions_Collections.getInput(argument);\n    SNode elementType_typevar_1184847379888 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(input), new QuotationClass_24().createNode(elementType_typevar_1184847379888), input, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184847420828\");\n    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(argument), new QuotationClass_25().createNode(), argument, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184847367971\");\n  }","id":10701,"modified_method":"public void applyRule(SNode argument) {\n    SNode input = RulesFunctions_Collections.getInput(argument);\n    SNode elementType_typevar_1184847379888 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(input), new QuotationClass_26().createNode(elementType_typevar_1184847379888), input, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184847420828\");\n    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(argument), new QuotationClass_27().createNode(), argument, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184847367971\");\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(SNode argument) {\n    do {\n      SNode matchedNode_1178725705667 = SNodeOperations.getParent(argument, null, false, false);\n      {\n        boolean matches_1178725705671 = false;\n        matches_1178725705671 = SModelUtil_new.isAssignableConcept(SNodeOperations.getParent(argument, null, false, false).getConceptFqName(), \"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceOperationExpression\");\n        if(matches_1178725705671) {\n          TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_29().createNode(), argument);\n          break;\n        }\n      }\n      TypeChecker.getInstance().reportTypeError(argument, \"not expected here\");\n    } while(false);\n  }","id":10702,"modified_method":"public void applyRule(SNode argument) {\n    do {\n      SNode matchedNode_1178725705667 = SNodeOperations.getParent(argument, null, false, false);\n      {\n        boolean matches_1178725705671 = false;\n        matches_1178725705671 = SModelUtil_new.isAssignableConcept(SNodeOperations.getParent(argument, null, false, false).getConceptFqName(), \"jetbrains.mps.baseLanguage.ext.collections.lang.structure.SequenceOperationExpression\");\n        if(matches_1178725705671) {\n          TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_35().createNode(), argument);\n          break;\n        }\n      }\n      TypeChecker.getInstance().reportTypeError(argument, \"not expected here\");\n    } while(false);\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(SNode argument) {\n    SNode expectedElementType = RulesFunctions_Collections.get_inputListType_elementType(argument);\n    if(!(expectedElementType != null)) {\n      TypeChecker.getInstance().reportTypeError(argument, \"couldn't define input list element type\");\n    }\n    // ==========\n    SNode arg = SLinkOperations.getTarget(argument, \"argument\", true);\n    if(arg != null) {\n      SNode expectedArgumentType = new QuotationClass_27().createNode(expectedElementType);\n      SNode actualArgumentType = TypeChecker.getInstance().getRuntimeSupport().checkedTypeOf(arg);\n      if(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(actualArgumentType, expectedArgumentType))) {\n        TypeChecker.getInstance().reportTypeError(arg, \"\" + expectedArgumentType + \" is expected\");\n      }\n    }\n  }","id":10703,"modified_method":"public void applyRule(SNode argument) {\n    SNode input = RulesFunctions_Collections.getInput(argument);\n    SNode elementType_typevar_1184856319398 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);\n    SNode expectedElementType_typevar_1184856319399 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(input), new QuotationClass_30().createNode(elementType_typevar_1184856319398), input, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184856319401\");\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(argument, \"argument\", true)), new QuotationClass_31().createNode(expectedElementType_typevar_1184856319399), SLinkOperations.getTarget(argument, \"argument\", true), null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184856319409\");\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(expectedElementType_typevar_1184856319399, elementType_typevar_1184856319398, argument, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184856319417\");\n    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(argument), new QuotationClass_32().createNode(), argument, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184851898840\");\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(SNode argument) {\n    SNode expectedElementType = RulesFunctions_Collections.get_inputListType_elementType(argument);\n    SNode arg = SLinkOperations.getTarget(argument, \"argument\", true);\n    if(!(TypeChecker.getInstance().getSubtypingManager().isSubtype(TypeChecker.getInstance().getRuntimeSupport().checkedTypeOf(arg), expectedElementType))) {\n      TypeChecker.getInstance().reportTypeError(arg, \"\" + expectedElementType + \" is expected\");\n    }\n  }","id":10704,"modified_method":"public void applyRule(SNode argument) {\n    RulesFunctions_Collections.isInputElementType(argument, SLinkOperations.getTarget(argument, \"argument\", true));\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(SNode argument) {\n    SNode inputElementType = RulesFunctions_Collections.get_inputListType_elementType(argument);\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_28().createNode(inputElementType), argument);\n  }","id":10705,"modified_method":"public void applyRule(SNode argument) {\n    SNode elementType_typevar_1184856571984 = TypeChecker.getInstance().getRuntimeSupport().createNewRuntimeTypesVariable(false);\n    SNode input = RulesFunctions_Collections.getInput(argument);\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(input), new QuotationClass_33().createNode(elementType_typevar_1184856571984), input, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184856612680\");\n    TypeChecker.getInstance().getRuntimeSupport().createEquation(TypeChecker.getInstance().getRuntimeSupport().typeOf(argument), new QuotationClass_34().createNode(elementType_typevar_1184856571984), argument, null, \"jetbrains.mps.baseLanguage.ext.collections.lang.helgins\", \"1184856636291\");\n  }","commit_id":"38d3107859d8616abe146aaf4dd6ce243f9f1f4c","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ArtifactResolutionResult collect( Set artifacts, Artifact originatingArtifact,\n                                             ArtifactRepository localRepository, List remoteRepositories,\n                                             ArtifactMetadataSource source, ArtifactFilter filter,\n                                             ArtifactFactory artifactFactory )\n        throws ArtifactResolutionException\n    {\n        ArtifactResolutionResult result = new ArtifactResolutionResult();\n\n        Map resolvedArtifacts = new HashMap();\n\n        List queue = new LinkedList();\n\n        queue.add( artifacts );\n\n        while ( !queue.isEmpty() )\n        {\n            Set currentArtifacts = (Set) queue.remove( 0 );\n\n            for ( Iterator i = currentArtifacts.iterator(); i.hasNext(); )\n            {\n                Artifact newArtifact = (Artifact) i.next();\n\n                String id = newArtifact.getDependencyConflictId();\n\n                if ( resolvedArtifacts.containsKey( id ) )\n                {\n                    Artifact knownArtifact = (Artifact) resolvedArtifacts.get( id );\n\n                    String newVersion = newArtifact.getVersion();\n\n                    String knownVersion = knownArtifact.getVersion();\n\n                    if ( !newVersion.equals( knownVersion ) )\n                    {\n                        addConflict( result, knownArtifact, newArtifact );\n                    }\n\n                    // TODO: scope handler\n                    boolean updateScope = false;\n                    if ( Artifact.SCOPE_RUNTIME.equals( newArtifact.getScope() ) &&\n                        Artifact.SCOPE_TEST.equals( knownArtifact.getScope() ) )\n                    {\n                        updateScope = true;\n                    }\n\n                    if ( Artifact.SCOPE_COMPILE.equals( newArtifact.getScope() ) &&\n                        !Artifact.SCOPE_COMPILE.equals( knownArtifact.getScope() ) )\n                    {\n                        updateScope = true;\n                    }\n\n                    if ( updateScope )\n                    {\n                        Artifact artifact = artifactFactory.createArtifact( knownArtifact.getGroupId(),\n                                                                            knownArtifact.getArtifactId(), knownVersion,\n                                                                            newArtifact.getScope(),\n                                                                            knownArtifact.getType() );\n                        resolvedArtifacts.put( artifact.getDependencyConflictId(), artifact );\n                    }\n                }\n                else\n                {\n                    // ----------------------------------------------------------------------\n                    // It's the first time we have encountered this artifact\n                    // ----------------------------------------------------------------------\n\n                    if ( filter != null && !filter.include( newArtifact ) )\n                    {\n                        continue;\n                    }\n\n                    resolvedArtifacts.put( id, newArtifact );\n\n                    Set referencedDependencies = null;\n\n                    try\n                    {\n                        referencedDependencies = source.retrieve( newArtifact, localRepository, remoteRepositories );\n                    }\n                    catch ( ArtifactMetadataRetrievalException e )\n                    {\n                        throw new TransitiveArtifactResolutionException( e.getMessage(), newArtifact,\n                                                                         remoteRepositories, e );\n                    }\n\n                    // the pom for given dependency exisit we will add it to the\n                    // queue\n                    queue.add( referencedDependencies );\n                }\n            }\n        }\n\n        result.setArtifacts( new HashSet( resolvedArtifacts.values() ) );\n\n        return result;\n    }","id":10706,"modified_method":"public ArtifactResolutionResult collect( Set artifacts, Artifact originatingArtifact,\n                                             ArtifactRepository localRepository, List remoteRepositories,\n                                             ArtifactMetadataSource source, ArtifactFilter filter,\n                                             ArtifactFactory artifactFactory )\n        throws ArtifactResolutionException\n    {\n        return collect( artifacts, originatingArtifact, Collections.EMPTY_SET, localRepository, remoteRepositories,\n                        source, filter, artifactFactory );\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"public void testResolveCompileScopeOverTestScope()\n        throws ArtifactResolutionException\n    {\n        ArtifactSpec a = createArtifact( \"a\", \"1.0\" );\n        ArtifactSpec b = a.addDependency( \"b\", \"1.0\" );\n        a.addDependency( \"c\", \"3.0\", Artifact.SCOPE_TEST );\n\n        b.addDependency( \"c\", \"2.0\", Artifact.SCOPE_COMPILE );\n\n        Artifact modifiedC = createArtifact( \"c\", \"3.0\", Artifact.SCOPE_COMPILE ).artifact;\n\n        ArtifactResolutionResult res = collect( a );\n        assertEquals( \"Check artifact list\",\n                      new HashSet( Arrays.asList( new Object[]{a.artifact, b.artifact, modifiedC} ) ),\n                      res.getArtifacts() );\n    }","id":10707,"modified_method":"public void testResolveCompileScopeOverTestScope()\n        throws ArtifactResolutionException\n    {\n        ArtifactSpec a = createArtifact( \"a\", \"1.0\" );\n        ArtifactSpec c = createArtifact( \"c\", \"3.0\", Artifact.SCOPE_TEST );\n\n        a.addDependency( \"c\", \"2.0\", Artifact.SCOPE_COMPILE );\n\n        Artifact modifiedC = createArtifact( \"c\", \"3.0\", Artifact.SCOPE_COMPILE ).artifact;\n\n        ArtifactResolutionResult res = collect( createSet( new Object[]{a.artifact, c.artifact} ) );\n        assertEquals( \"Check artifact list\", createSet( new Object[]{a.artifact, modifiedC} ), res.getArtifacts() );\n        Artifact artifact = getArtifact( \"c\", res.getArtifacts() );\n        assertEquals( \"Check scope\", Artifact.SCOPE_COMPILE, artifact.getScope() );\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"public void testCircularDependencyIncludingCurrentProject()\n        throws ArtifactResolutionException\n    {\n        ArtifactSpec a = createArtifact( \"a\", \"1.0\" );\n        ArtifactSpec b = a.addDependency( \"b\", \"1.0\" );\n        b.addDependency( \"project\", \"1.0\" );\n        try\n        {\n            collect( a );\n//            fail( \"Should have failed on cyclic dependency involving project\" );\n        }\n        catch ( CyclicDependencyException expected )\n        {\n            assertTrue( true );\n        }\n    }","id":10708,"modified_method":"public void disabledtestCircularDependencyIncludingCurrentProject()\n        throws ArtifactResolutionException\n    {\n        ArtifactSpec a = createArtifact( \"a\", \"1.0\" );\n        ArtifactSpec b = a.addDependency( \"b\", \"1.0\" );\n        b.addDependency( \"project\", \"1.0\" );\n        try\n        {\n            collect( a );\n            fail( \"Should have failed on cyclic dependency involving project\" );\n        }\n        catch ( CyclicDependencyException expected )\n        {\n            assertTrue( true );\n        }\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"private ArtifactSpec createArtifact( String id, String version )\n    {\n        return createArtifact( id, version, null );\n    }","id":10709,"modified_method":"private ArtifactSpec createArtifact( String id, String version )\n    {\n        return createArtifact( id, version, Artifact.SCOPE_COMPILE );\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"public void testResolveNearest()\n        throws ArtifactResolutionException\n    {\n        ArtifactSpec a = createArtifact( \"a\", \"1.0\" );\n        ArtifactSpec b = a.addDependency( \"b\", \"1.0\" );\n        ArtifactSpec c = a.addDependency( \"c\", \"3.0\" );\n\n        b.addDependency( \"c\", \"2.0\" );\n\n        ArtifactResolutionResult res = collect( a );\n        assertEquals( \"Check artifact list\",\n                      new HashSet( Arrays.asList( new Object[]{a.artifact, b.artifact, c.artifact} ) ),\n                      res.getArtifacts() );\n    }","id":10710,"modified_method":"public void testResolveNearest()\n        throws ArtifactResolutionException\n    {\n        ArtifactSpec a = createArtifact( \"a\", \"1.0\" );\n        ArtifactSpec b = a.addDependency( \"b\", \"1.0\" );\n        ArtifactSpec c = a.addDependency( \"c\", \"3.0\" );\n\n        b.addDependency( \"c\", \"2.0\" );\n\n        ArtifactResolutionResult res = collect( a );\n        assertEquals( \"Check artifact list\", createSet( new Object[]{a.artifact, b.artifact, c.artifact} ),\n                      res.getArtifacts() );\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"public void testCircularDependencyNotIncludingCurrentProject()\n        throws ArtifactResolutionException\n    {\n        ArtifactSpec a = createArtifact( \"a\", \"1.0\" );\n        ArtifactSpec b = a.addDependency( \"b\", \"1.0\" );\n        b.addDependency( \"a\", \"1.0\" );\n        try\n        {\n            collect( a );\n//            fail( \"Should have failed on cyclic dependency not involving project\" );\n        }\n        catch ( CyclicDependencyException expected )\n        {\n            assertTrue( true );\n        }\n    }","id":10711,"modified_method":"public void disabledtestCircularDependencyNotIncludingCurrentProject()\n        throws ArtifactResolutionException\n    {\n        ArtifactSpec a = createArtifact( \"a\", \"1.0\" );\n        ArtifactSpec b = a.addDependency( \"b\", \"1.0\" );\n        b.addDependency( \"a\", \"1.0\" );\n        try\n        {\n            collect( a );\n            fail( \"Should have failed on cyclic dependency not involving project\" );\n        }\n        catch ( CyclicDependencyException expected )\n        {\n            assertTrue( true );\n        }\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"private ArtifactSpec createArtifact( String id, String version, String scope )\n    {\n        ArtifactSpec spec = new ArtifactSpec();\n        spec.artifact = artifactFactory.createArtifact( \"test\", id, version, scope, \"jar\" );\n        source.artifacts.put( spec.artifact.getId(), spec );\n        return spec;\n    }","id":10712,"modified_method":"private ArtifactSpec createArtifact( String id, String version, String scope )\n    {\n        ArtifactSpec spec = new ArtifactSpec();\n        spec.artifact = artifactFactory.createArtifact( GROUP_ID, id, version, scope, \"jar\" );\n        source.artifacts.put( spec.artifact.getId(), spec );\n        return spec;\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"public void testResolveCompileScopeOverRuntimeScope()\n        throws ArtifactResolutionException\n    {\n        ArtifactSpec a = createArtifact( \"a\", \"1.0\" );\n        ArtifactSpec b = a.addDependency( \"b\", \"1.0\" );\n        a.addDependency( \"c\", \"3.0\", Artifact.SCOPE_RUNTIME );\n\n        b.addDependency( \"c\", \"2.0\", Artifact.SCOPE_COMPILE );\n\n        Artifact modifiedC = createArtifact( \"c\", \"3.0\", Artifact.SCOPE_COMPILE ).artifact;\n\n        ArtifactResolutionResult res = collect( a );\n        assertEquals( \"Check artifact list\",\n                      new HashSet( Arrays.asList( new Object[]{a.artifact, b.artifact, modifiedC} ) ),\n                      res.getArtifacts() );\n    }","id":10713,"modified_method":"public void testResolveCompileScopeOverRuntimeScope()\n        throws ArtifactResolutionException\n    {\n        ArtifactSpec a = createArtifact( \"a\", \"1.0\" );\n        ArtifactSpec c = createArtifact( \"c\", \"3.0\", Artifact.SCOPE_RUNTIME );\n\n        a.addDependency( \"c\", \"2.0\", Artifact.SCOPE_COMPILE );\n\n        Artifact modifiedC = createArtifact( \"c\", \"3.0\", Artifact.SCOPE_COMPILE ).artifact;\n\n        ArtifactResolutionResult res = collect( createSet( new Object[]{a.artifact, c.artifact} ) );\n        assertEquals( \"Check artifact list\", createSet( new Object[]{a.artifact, modifiedC} ), res.getArtifacts() );\n        Artifact artifact = getArtifact( \"c\", res.getArtifacts() );\n        assertEquals( \"Check scope\", Artifact.SCOPE_COMPILE, artifact.getScope() );\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"public Set retrieve( Artifact artifact, ArtifactRepository localRepository, List remoteRepositories )\n            throws ArtifactMetadataRetrievalException, ArtifactResolutionException\n        {\n            ArtifactSpec a = (ArtifactSpec) artifacts.get( artifact.getId() );\n            return a.dependencies;\n        }","id":10714,"modified_method":"public Set retrieve( Artifact artifact, ArtifactRepository localRepository, List remoteRepositories )\n            throws ArtifactMetadataRetrievalException, ArtifactResolutionException\n        {\n            ArtifactSpec a = (ArtifactSpec) artifacts.get( artifact.getId() );\n            return createArtifacts( artifactFactory, a.dependencies, artifact.getScope(),\n                                    artifact.getDependencyFilter() );\n        }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"public void testResolveRuntimeScopeOverTestScope()\n        throws ArtifactResolutionException\n    {\n        ArtifactSpec a = createArtifact( \"a\", \"1.0\" );\n        ArtifactSpec b = a.addDependency( \"b\", \"1.0\" );\n        a.addDependency( \"c\", \"3.0\", Artifact.SCOPE_TEST );\n\n        b.addDependency( \"c\", \"2.0\", Artifact.SCOPE_RUNTIME );\n\n        Artifact modifiedC = createArtifact( \"c\", \"3.0\", Artifact.SCOPE_RUNTIME ).artifact;\n\n        ArtifactResolutionResult res = collect( a );\n        assertEquals( \"Check artifact list\",\n                      new HashSet( Arrays.asList( new Object[]{a.artifact, b.artifact, modifiedC} ) ),\n                      res.getArtifacts() );\n    }","id":10715,"modified_method":"public void testResolveRuntimeScopeOverTestScope()\n        throws ArtifactResolutionException\n    {\n        ArtifactSpec a = createArtifact( \"a\", \"1.0\" );\n        ArtifactSpec c = createArtifact( \"c\", \"3.0\", Artifact.SCOPE_TEST );\n\n        a.addDependency( \"c\", \"2.0\", Artifact.SCOPE_RUNTIME );\n\n        Artifact modifiedC = createArtifact( \"c\", \"3.0\", Artifact.SCOPE_RUNTIME ).artifact;\n\n        ArtifactResolutionResult res = collect( createSet( new Object[]{a.artifact, c.artifact} ) );\n        assertEquals( \"Check artifact list\", createSet( new Object[]{a.artifact, modifiedC} ), res.getArtifacts() );\n        Artifact artifact = getArtifact( \"c\", res.getArtifacts() );\n        assertEquals( \"Check scope\", Artifact.SCOPE_RUNTIME, artifact.getScope() );\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"protected void setUp()\n        throws Exception\n    {\n        super.setUp();\n\n        this.source = new Source();\n        this.artifactFactory = (ArtifactFactory) lookup( ArtifactFactory.ROLE );\n        this.artifactCollector = new DefaultArtifactCollector();\n\n        this.projectArtifact = createArtifact( \"project\", \"1.0\" );\n    }","id":10716,"modified_method":"protected void setUp()\n        throws Exception\n    {\n        super.setUp();\n\n        this.source = new Source();\n        this.artifactFactory = (ArtifactFactory) lookup( ArtifactFactory.ROLE );\n        this.artifactCollector = new DefaultArtifactCollector();\n\n        this.projectArtifact = createArtifact( \"project\", \"1.0\", null );\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"private MavenProject assembleLineage( Model model, LinkedList lineage, List aggregatedRemoteWagonRepositories,\n                                          ArtifactRepository localRepository )\n        throws ProjectBuildingException, ArtifactResolutionException\n    {\n        if ( !model.getRepositories().isEmpty() )\n        {\n            List respositories = ProjectUtils.buildArtifactRepositories( model.getRepositories(),\n                                                                         artifactRepositoryFactory, container );\n            aggregatedRemoteWagonRepositories.addAll( respositories );\n        }\n\n        MavenProject project = new MavenProject( model );\n\n        lineage.addFirst( project );\n\n        Parent parentModel = model.getParent();\n\n        if ( parentModel != null )\n        {\n            if ( StringUtils.isEmpty( parentModel.getGroupId() ) )\n            {\n                throw new ProjectBuildingException( \"Missing groupId element from parent element\" );\n            }\n            else if ( StringUtils.isEmpty( parentModel.getArtifactId() ) )\n            {\n                throw new ProjectBuildingException( \"Missing artifactId element from parent element\" );\n            }\n            else if ( StringUtils.isEmpty( parentModel.getVersion() ) )\n            {\n                throw new ProjectBuildingException( \"Missing version element from parent element\" );\n            }\n\n            //!! (**)\n            // ----------------------------------------------------------------------\n            // Do we have the necessary information to actually find the parent\n            // POMs here?? I don't think so ... Say only one remote repository is\n            // specified and that is ibiblio then this model that we just read doesn't\n            // have any repository information ... I think we might have to inherit\n            // as we go in order to do this.\n            // ----------------------------------------------------------------------\n\n            Artifact artifact = artifactFactory.createArtifact( parentModel.getGroupId(), parentModel.getArtifactId(),\n                                                                parentModel.getVersion(), null, \"pom\", null );\n\n            model = findModelFromRepository( artifact, aggregatedRemoteWagonRepositories, localRepository );\n\n            MavenProject parent = assembleLineage( model, lineage, aggregatedRemoteWagonRepositories, localRepository );\n\n            project.setParent( parent );\n\n            project.setParentArtifact( artifact );\n        }\n\n        return project;\n    }","id":10717,"modified_method":"private MavenProject assembleLineage( Model model, LinkedList lineage, List aggregatedRemoteWagonRepositories,\n                                          ArtifactRepository localRepository )\n        throws ProjectBuildingException, ArtifactResolutionException\n    {\n        if ( !model.getRepositories().isEmpty() )\n        {\n            List respositories = ProjectUtils.buildArtifactRepositories( model.getRepositories(),\n                                                                         artifactRepositoryFactory, container );\n            aggregatedRemoteWagonRepositories.addAll( respositories );\n        }\n\n        MavenProject project = new MavenProject( model );\n\n        lineage.addFirst( project );\n\n        Parent parentModel = model.getParent();\n\n        if ( parentModel != null )\n        {\n            if ( StringUtils.isEmpty( parentModel.getGroupId() ) )\n            {\n                throw new ProjectBuildingException( \"Missing groupId element from parent element\" );\n            }\n            else if ( StringUtils.isEmpty( parentModel.getArtifactId() ) )\n            {\n                throw new ProjectBuildingException( \"Missing artifactId element from parent element\" );\n            }\n            else if ( StringUtils.isEmpty( parentModel.getVersion() ) )\n            {\n                throw new ProjectBuildingException( \"Missing version element from parent element\" );\n            }\n\n            //!! (**)\n            // ----------------------------------------------------------------------\n            // Do we have the necessary information to actually find the parent\n            // POMs here?? I don't think so ... Say only one remote repository is\n            // specified and that is ibiblio then this model that we just read doesn't\n            // have any repository information ... I think we might have to inherit\n            // as we go in order to do this.\n            // ----------------------------------------------------------------------\n\n            Artifact artifact = artifactFactory.createArtifact( parentModel.getGroupId(), parentModel.getArtifactId(),\n                                                                parentModel.getVersion(), null, \"pom\" );\n\n            model = findModelFromRepository( artifact, aggregatedRemoteWagonRepositories, localRepository );\n\n            MavenProject parent = assembleLineage( model, lineage, aggregatedRemoteWagonRepositories, localRepository );\n\n            project.setParent( parent );\n\n            project.setParentArtifact( artifact );\n        }\n\n        return project;\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"protected Set createArtifacts( List dependencies )\n    {\n        // TODO: merge with MavenMetadataSource properly\n        return new MavenMetadataSource( artifactResolver, this, artifactFactory ).createArtifacts( dependencies, null,\n                                                                                                   null );\n    }","id":10718,"modified_method":"protected Set createArtifacts( List dependencies )\n    {\n        return MavenMetadataSource.createArtifacts( artifactFactory, dependencies, null, null );\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"/**\n     * @todo can this take in a model instead of a project and still be successful?\n     * @todo In fact, does project REALLY need a MavenProject as a parent? Couldn't it have just a wrapper around a\n     * model that supported parents which were also the wrapper so that inheritence was assembled. We don't really need\n     * the resolved source roots, etc for the parent - that occurs for the parent when it is constructed independently\n     * and projects are not cached or reused\n     */\n    private MavenProject processProjectLogic( String pomLocation, MavenProject project, List remoteRepositories,\n                                              List externalProfiles )\n        throws ProjectBuildingException, ModelInterpolationException\n    {\n        Model model = project.getModel();\n        String key = createCacheKey( model.getGroupId(), model.getArtifactId(), model.getVersion() );\n        Model cachedModel = (Model) modelCache.get( key );\n        if ( cachedModel == null )\n        {\n            modelCache.put( key, model );\n        }\n\n        List activeProfiles = new ArrayList( externalProfiles );\n\n        List activePomProfiles = profileActivationCalculator.calculateActiveProfiles( model.getProfiles() );\n\n        activeProfiles.addAll( activePomProfiles );\n\n        Properties profileProperties = new Properties();\n\n        for ( Iterator it = activeProfiles.iterator(); it.hasNext(); )\n        {\n            Profile profile = (Profile) it.next();\n\n            modelInheritanceAssembler.mergeProfileWithModel( model, profile );\n\n            profileProperties.putAll( profile.getProperties() );\n        }\n\n        // TODO: Clean this up...we're using this to 'jump' the interpolation step for model properties not expressed in XML.\n\n        model = modelInterpolator.interpolate( model );\n\n        // interpolation is before injection, because interpolation is off-limits in the injected variables\n        modelDefaultsInjector.injectDefaults( model );\n\n        MavenProject parentProject = project.getParent();\n\n        project = new MavenProject( model );\n\n        project.addProfileProperties( profileProperties );\n\n        project.setActiveProfiles( activeProfiles );\n\n        project.setPluginArtifactRepositories(\n            ProjectUtils.buildArtifactRepositories( model.getPluginRepositories(), artifactRepositoryFactory,\n                                                    container ) );\n\n        DistributionManagement dm = model.getDistributionManagement();\n        if ( dm != null )\n        {\n            project.setDistributionManagementArtifactRepository(\n                ProjectUtils.buildArtifactRepository( dm.getRepository(), artifactRepositoryFactory, container ) );\n        }\n\n        project.setParent( parentProject );\n\n        if ( parentProject != null )\n        {\n            Artifact parentArtifact = artifactFactory.createArtifact( parentProject.getGroupId(),\n                                                                      parentProject.getArtifactId(),\n                                                                      parentProject.getVersion(), null, \"pom\", null );\n            project.setParentArtifact( parentArtifact );\n        }\n\n        project.setRemoteArtifactRepositories( remoteRepositories );\n        project.setDependencyArtifacts( createArtifacts( project.getDependencies() ) );\n        project.setPluginArtifacts( createPluginArtifacts( project.getBuildPlugins() ) );\n\n        ModelValidationResult validationResult = validator.validate( model );\n\n        if ( validationResult.getMessageCount() > 0 )\n        {\n            throw new ProjectBuildingException(\n                \"Failed to validate POM for \\'\" + pomLocation + \"\\'.\\n\\n  Reason(s):\\n\" +\n                    validationResult.render( \"  \" ) );\n        }\n\n        return project;\n    }","id":10719,"modified_method":"/**\n     * @todo can this take in a model instead of a project and still be successful?\n     * @todo In fact, does project REALLY need a MavenProject as a parent? Couldn't it have just a wrapper around a\n     * model that supported parents which were also the wrapper so that inheritence was assembled. We don't really need\n     * the resolved source roots, etc for the parent - that occurs for the parent when it is constructed independently\n     * and projects are not cached or reused\n     */\n    private MavenProject processProjectLogic( String pomLocation, MavenProject project, List remoteRepositories,\n                                              List externalProfiles )\n        throws ProjectBuildingException, ModelInterpolationException\n    {\n        Model model = project.getModel();\n        String key = createCacheKey( model.getGroupId(), model.getArtifactId(), model.getVersion() );\n        Model cachedModel = (Model) modelCache.get( key );\n        if ( cachedModel == null )\n        {\n            modelCache.put( key, model );\n        }\n\n        List activeProfiles = new ArrayList( externalProfiles );\n\n        List activePomProfiles = profileActivationCalculator.calculateActiveProfiles( model.getProfiles() );\n\n        activeProfiles.addAll( activePomProfiles );\n\n        Properties profileProperties = new Properties();\n\n        for ( Iterator it = activeProfiles.iterator(); it.hasNext(); )\n        {\n            Profile profile = (Profile) it.next();\n\n            modelInheritanceAssembler.mergeProfileWithModel( model, profile );\n\n            profileProperties.putAll( profile.getProperties() );\n        }\n\n        // TODO: Clean this up...we're using this to 'jump' the interpolation step for model properties not expressed in XML.\n\n        model = modelInterpolator.interpolate( model );\n\n        // interpolation is before injection, because interpolation is off-limits in the injected variables\n        modelDefaultsInjector.injectDefaults( model );\n\n        MavenProject parentProject = project.getParent();\n\n        project = new MavenProject( model );\n\n        project.addProfileProperties( profileProperties );\n\n        project.setActiveProfiles( activeProfiles );\n\n        project.setPluginArtifactRepositories(\n            ProjectUtils.buildArtifactRepositories( model.getPluginRepositories(), artifactRepositoryFactory,\n                                                    container ) );\n\n        DistributionManagement dm = model.getDistributionManagement();\n        if ( dm != null )\n        {\n            project.setDistributionManagementArtifactRepository(\n                ProjectUtils.buildArtifactRepository( dm.getRepository(), artifactRepositoryFactory, container ) );\n        }\n\n        project.setParent( parentProject );\n\n        if ( parentProject != null )\n        {\n            Artifact parentArtifact = artifactFactory.createArtifact( parentProject.getGroupId(),\n                                                                      parentProject.getArtifactId(),\n                                                                      parentProject.getVersion(), null, \"pom\" );\n            project.setParentArtifact( parentArtifact );\n        }\n\n        project.setRemoteArtifactRepositories( remoteRepositories );\n        project.setDependencyArtifacts( createArtifacts( project.getDependencies() ) );\n        project.setPluginArtifacts( createPluginArtifacts( project.getBuildPlugins() ) );\n\n        ModelValidationResult validationResult = validator.validate( model );\n\n        if ( validationResult.getMessageCount() > 0 )\n        {\n            throw new ProjectBuildingException(\n                \"Failed to validate POM for \\'\" + pomLocation + \"\\'.\\n\\n  Reason(s):\\n\" +\n                    validationResult.render( \"  \" ) );\n        }\n\n        return project;\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"protected Set createPluginArtifacts( List plugins )\n    {\n        Set pluginArtifacts = new HashSet();\n\n        for ( Iterator i = plugins.iterator(); i.hasNext(); )\n        {\n            Plugin p = (Plugin) i.next();\n\n            String version;\n            if ( StringUtils.isEmpty( p.getVersion() ) )\n            {\n                version = \"RELEASE\";\n            }\n            else\n            {\n                version = p.getVersion();\n            }\n\n            Artifact artifact = artifactFactory.createArtifact( p.getGroupId(), p.getArtifactId(), version, null,\n                                                                \"maven-plugin\", null );\n            if ( artifact != null )\n            {\n                pluginArtifacts.add( artifact );\n            }\n        }\n\n        return pluginArtifacts;\n    }","id":10720,"modified_method":"protected Set createPluginArtifacts( List plugins )\n    {\n        Set pluginArtifacts = new HashSet();\n\n        for ( Iterator i = plugins.iterator(); i.hasNext(); )\n        {\n            Plugin p = (Plugin) i.next();\n\n            String version;\n            if ( StringUtils.isEmpty( p.getVersion() ) )\n            {\n                version = \"RELEASE\";\n            }\n            else\n            {\n                version = p.getVersion();\n            }\n\n            Artifact artifact = artifactFactory.createArtifact( p.getGroupId(), p.getArtifactId(), version, null,\n                                                                \"maven-plugin\" );\n            if ( artifact != null )\n            {\n                pluginArtifacts.add( artifact );\n            }\n        }\n\n        return pluginArtifacts;\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"public PluginDescriptor verifyPlugin( String groupId, String artifactId, String version, MavenProject project,\n                                          Settings settings, ArtifactRepository localRepository )\n        throws ArtifactResolutionException, PluginManagerException, PluginVersionResolutionException\n    {\n        String pluginKey = groupId + \":\" + artifactId;\n\n        // TODO: this should be possibly outside\n        // [HTTP-301] All version-resolution logic has been moved to DefaultPluginVersionManager. :)\n        if ( version == null )\n        {\n            PluginVersionManager pluginVersionManager = null;\n\n            try\n            {\n                pluginVersionManager = (PluginVersionManager) container.lookup( PluginVersionManager.ROLE );\n\n                version = pluginVersionManager.resolvePluginVersion( groupId, artifactId, project, settings,\n                                                                     localRepository );\n            }\n            catch ( ComponentLookupException e )\n            {\n                throw new PluginVersionResolutionException( groupId, artifactId,\n                                                            \"Cannot retrieve an instance of the PluginVersionManager\",\n                                                            e );\n            }\n            finally\n            {\n                releaseComponent( pluginVersionManager );\n            }\n        }\n\n        // TODO: this might result in an artifact \"RELEASE\" being resolved continuously\n        if ( !isPluginInstalled( pluginKey ) )\n        {\n            ArtifactFactory artifactFactory = null;\n            try\n            {\n                artifactFactory = (ArtifactFactory) container.lookup( ArtifactFactory.ROLE );\n\n                Artifact pluginArtifact = artifactFactory.createArtifact( groupId, artifactId, version,\n                                                                          Artifact.SCOPE_RUNTIME,\n                                                                          MojoDescriptor.MAVEN_PLUGIN, null );\n\n                addPlugin( pluginKey, pluginArtifact, project, localRepository );\n\n                version = pluginArtifact.getBaseVersion();\n            }\n            catch ( PlexusContainerException e )\n            {\n                throw new PluginManagerException(\n                    \"Error occurred in the artifact container attempting to download plugin \" + groupId + \":\" +\n                        artifactId, e );\n            }\n            catch ( ArtifactResolutionException e )\n            {\n                if (\n                    ( groupId == null || artifactId == null || version == null ||\n                        ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() ) &&\n                            version.equals( e.getVersion() ) ) ) && \"maven-plugin\".equals( e.getType() ) )\n                {\n                    throw new PluginNotFoundException( e );\n                }\n                else\n                {\n                    throw e;\n                }\n            }\n            catch ( ComponentLookupException e )\n            {\n                throw new PluginManagerException(\n                    \"Internal configuration error while retrieving \" + groupId + \":\" + artifactId, e );\n            }\n            finally\n            {\n                if ( artifactFactory != null )\n                {\n                    releaseComponent( artifactFactory );\n                }\n\n            }\n        }\n        return getPluginDescriptor( groupId, artifactId, version );\n    }","id":10721,"modified_method":"public PluginDescriptor verifyPlugin( String groupId, String artifactId, String version, MavenProject project,\n                                          Settings settings, ArtifactRepository localRepository )\n        throws ArtifactResolutionException, PluginManagerException, PluginVersionResolutionException\n    {\n        String pluginKey = groupId + \":\" + artifactId;\n\n        // TODO: this should be possibly outside\n        // [HTTP-301] All version-resolution logic has been moved to DefaultPluginVersionManager. :)\n        if ( version == null )\n        {\n            PluginVersionManager pluginVersionManager = null;\n\n            try\n            {\n                pluginVersionManager = (PluginVersionManager) container.lookup( PluginVersionManager.ROLE );\n\n                version = pluginVersionManager.resolvePluginVersion( groupId, artifactId, project, settings,\n                                                                     localRepository );\n            }\n            catch ( ComponentLookupException e )\n            {\n                throw new PluginVersionResolutionException( groupId, artifactId,\n                                                            \"Cannot retrieve an instance of the PluginVersionManager\",\n                                                            e );\n            }\n            finally\n            {\n                releaseComponent( pluginVersionManager );\n            }\n        }\n\n        // TODO: this might result in an artifact \"RELEASE\" being resolved continuously\n        if ( !isPluginInstalled( pluginKey ) )\n        {\n            ArtifactFactory artifactFactory = null;\n            try\n            {\n                artifactFactory = (ArtifactFactory) container.lookup( ArtifactFactory.ROLE );\n\n                Artifact pluginArtifact = artifactFactory.createArtifact( groupId, artifactId, version,\n                                                                          Artifact.SCOPE_RUNTIME,\n                                                                          MojoDescriptor.MAVEN_PLUGIN );\n\n                addPlugin( pluginKey, pluginArtifact, project, localRepository );\n\n                version = pluginArtifact.getBaseVersion();\n            }\n            catch ( PlexusContainerException e )\n            {\n                throw new PluginManagerException(\n                    \"Error occurred in the artifact container attempting to download plugin \" + groupId + \":\" +\n                        artifactId, e );\n            }\n            catch ( ArtifactResolutionException e )\n            {\n                if (\n                    ( groupId == null || artifactId == null || version == null ||\n                        ( groupId.equals( e.getGroupId() ) && artifactId.equals( e.getArtifactId() ) &&\n                            version.equals( e.getVersion() ) ) ) && \"maven-plugin\".equals( e.getType() ) )\n                {\n                    throw new PluginNotFoundException( e );\n                }\n                else\n                {\n                    throw e;\n                }\n            }\n            catch ( ComponentLookupException e )\n            {\n                throw new PluginManagerException(\n                    \"Internal configuration error while retrieving \" + groupId + \":\" + artifactId, e );\n            }\n            finally\n            {\n                if ( artifactFactory != null )\n                {\n                    releaseComponent( artifactFactory );\n                }\n\n            }\n        }\n        return getPluginDescriptor( groupId, artifactId, version );\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"private void ensurePluginContainerIsComplete( PluginDescriptor pluginDescriptor, PlexusContainer pluginContainer,\n                                                  MavenProject project, MavenSession session )\n        throws PluginConfigurationException, ComponentLookupException\n    {\n        // if the plugin's already been used once, don't re-do this step...\n        // otherwise, we have to finish resolving the plugin's classpath and start the container.\n        if ( pluginDescriptor.getArtifacts() != null && pluginDescriptor.getArtifacts().size() == 1 )\n        {\n            // TODO: this is a little shady...\n            Artifact pluginArtifact = (Artifact) pluginDescriptor.getArtifacts().get( 0 );\n\n            ArtifactResolver artifactResolver = null;\n            MavenProjectBuilder mavenProjectBuilder = null;\n            ArtifactFactory artifactFactory = null;\n\n            try\n            {\n                artifactResolver = (ArtifactResolver) container.lookup( ArtifactResolver.ROLE );\n                mavenProjectBuilder = (MavenProjectBuilder) container.lookup( MavenProjectBuilder.ROLE );\n                artifactFactory = (ArtifactFactory) container.lookup( ArtifactFactory.ROLE );\n\n                MavenMetadataSource metadataSource = new MavenMetadataSource( artifactResolver, mavenProjectBuilder,\n                                                                              artifactFactory );\n\n                List remoteArtifactRepositories = project.getRemoteArtifactRepositories();\n                ArtifactResolutionResult result = artifactResolver.resolveTransitively( pluginArtifact,\n                                                                                        remoteArtifactRepositories,\n                                                                                        session.getLocalRepository(),\n                                                                                        metadataSource,\n                                                                                        artifactFilter );\n\n                Set resolved = result.getArtifacts();\n\n                for ( Iterator it = resolved.iterator(); it.hasNext(); )\n                {\n                    Artifact artifact = (Artifact) it.next();\n\n                    if ( artifact != pluginArtifact )\n                    {\n                        pluginContainer.addJarResource( artifact.getFile() );\n                    }\n                }\n\n                pluginDescriptor.setClassRealm( pluginContainer.getContainerRealm() );\n\n                // TODO: this is probably overkill as it is rarely used - can we use a mojo tag to signal this will be\n                // used or check its configuration? Also, when it is used, perhaps it is more effecient to resolve\n                // everything at once and apply the exclusion filter when constructing the plugin container above.\n                // Check this out with yourkit\n                ArtifactFilter distroProvidedFilter = new InversionArtifactFilter( artifactFilter );\n\n                ArtifactResolutionResult distroProvidedResult = artifactResolver\n                    .resolveTransitively( pluginArtifact, remoteArtifactRepositories, session.getLocalRepository(),\n                                          metadataSource, distroProvidedFilter );\n\n                Set distroProvided = distroProvidedResult.getArtifacts();\n\n                List unfilteredArtifactList = new ArrayList( resolved.size() + distroProvided.size() );\n\n                unfilteredArtifactList.addAll( resolved );\n                unfilteredArtifactList.addAll( distroProvided );\n\n                pluginDescriptor.setArtifacts( unfilteredArtifactList );\n            }\n            catch ( ArtifactResolutionException e )\n            {\n                throw new PluginConfigurationException( \"Cannot resolve plugin dependencies\", e );\n            }\n            catch ( PlexusContainerException e )\n            {\n                throw new PluginConfigurationException( \"Cannot start plugin container\", e );\n            }\n            finally\n            {\n                if ( artifactFactory != null )\n                {\n                    releaseComponent( artifactFactory );\n                }\n                if ( artifactResolver != null )\n                {\n                    releaseComponent( artifactResolver );\n                }\n                if ( mavenProjectBuilder != null )\n                {\n                    releaseComponent( mavenProjectBuilder );\n                }\n            }\n        }\n    }","id":10722,"modified_method":"private void ensurePluginContainerIsComplete( PluginDescriptor pluginDescriptor, PlexusContainer pluginContainer,\n                                                  MavenProject project, MavenSession session )\n        throws PluginConfigurationException, ComponentLookupException\n    {\n        // if the plugin's already been used once, don't re-do this step...\n        // otherwise, we have to finish resolving the plugin's classpath and start the container.\n        if ( pluginDescriptor.getArtifacts() != null && pluginDescriptor.getArtifacts().size() == 1 )\n        {\n            // TODO: this is a little shady...\n            Artifact pluginArtifact = (Artifact) pluginDescriptor.getArtifacts().get( 0 );\n\n            ArtifactResolver artifactResolver = null;\n            MavenProjectBuilder mavenProjectBuilder = null;\n            ArtifactFactory artifactFactory = null;\n\n            try\n            {\n                artifactResolver = (ArtifactResolver) container.lookup( ArtifactResolver.ROLE );\n                mavenProjectBuilder = (MavenProjectBuilder) container.lookup( MavenProjectBuilder.ROLE );\n                artifactFactory = (ArtifactFactory) container.lookup( ArtifactFactory.ROLE );\n\n                MavenMetadataSource metadataSource = new MavenMetadataSource( artifactResolver, mavenProjectBuilder,\n                                                                              artifactFactory );\n\n                List remoteArtifactRepositories = project.getRemoteArtifactRepositories();\n                ArtifactRepository localRepository = session.getLocalRepository();\n                Set dependencies = metadataSource.retrieve( pluginArtifact, localRepository,\n                                                            remoteArtifactRepositories );\n\n                ArtifactResolutionResult result = artifactResolver.resolveTransitively( dependencies, pluginArtifact,\n                                                                                        remoteArtifactRepositories,\n                                                                                        localRepository, metadataSource,\n                                                                                        artifactFilter );\n\n                Set resolved = result.getArtifacts();\n\n                for ( Iterator it = resolved.iterator(); it.hasNext(); )\n                {\n                    Artifact artifact = (Artifact) it.next();\n\n                    if ( artifact != pluginArtifact )\n                    {\n                        pluginContainer.addJarResource( artifact.getFile() );\n                    }\n                }\n\n                pluginDescriptor.setClassRealm( pluginContainer.getContainerRealm() );\n\n                // TODO: this is probably overkill as it is rarely used - can we use a mojo tag to signal this will be\n                // used or check its configuration? Also, when it is used, perhaps it is more effecient to resolve\n                // everything at once and apply the exclusion filter when constructing the plugin container above.\n                // Check this out with yourkit\n                ArtifactFilter distroProvidedFilter = new InversionArtifactFilter( artifactFilter );\n\n                ArtifactResolutionResult distroProvidedResult = artifactResolver\n                    .resolveTransitively( dependencies, pluginArtifact, remoteArtifactRepositories, localRepository,\n                                          metadataSource, distroProvidedFilter );\n\n                Set distroProvided = distroProvidedResult.getArtifacts();\n\n                List unfilteredArtifactList = new ArrayList( resolved.size() + distroProvided.size() );\n\n                unfilteredArtifactList.addAll( resolved );\n                unfilteredArtifactList.addAll( distroProvided );\n\n                pluginDescriptor.setArtifacts( unfilteredArtifactList );\n            }\n            catch ( ArtifactResolutionException e )\n            {\n                throw new PluginConfigurationException( \"Cannot resolve plugin dependencies\", e );\n            }\n            catch ( PlexusContainerException e )\n            {\n                throw new PluginConfigurationException( \"Cannot start plugin container\", e );\n            }\n            catch ( ArtifactMetadataRetrievalException e )\n            {\n                throw new PluginConfigurationException( \"Cannot resolve plugin dependencies\", e );\n            }\n            finally\n            {\n                if ( artifactFactory != null )\n                {\n                    releaseComponent( artifactFactory );\n                }\n                if ( artifactResolver != null )\n                {\n                    releaseComponent( artifactResolver );\n                }\n                if ( mavenProjectBuilder != null )\n                {\n                    releaseComponent( mavenProjectBuilder );\n                }\n            }\n        }\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"public void execute()\n    {\n        ArtifactRepository localRepo = createLocalArtifactRepository();\n\n        ArtifactResolver resolver = (ArtifactResolver) lookup( ArtifactResolver.ROLE );\n        MavenProjectBuilder projectBuilder = (MavenProjectBuilder) lookup( MavenProjectBuilder.ROLE );\n        ArtifactFactory artifactFactory = (ArtifactFactory) lookup( ArtifactFactory.ROLE );\n        MavenMetadataSource metadataSource = new MavenMetadataSource( resolver, projectBuilder, artifactFactory );\n\n        List dependencies = this.dependencies;\n\n        Pom pom = buildPom( projectBuilder, localRepo );\n        if ( pom != null )\n        {\n            if ( !dependencies.isEmpty() )\n            {\n                throw new BuildException( \"You cannot specify both dependencies and a pom in the dependencies task\" );\n            }\n\n            dependencies = pom.getDependencies();\n\n            for ( Iterator i = pom.getRepositories().iterator(); i.hasNext(); )\n            {\n                org.apache.maven.model.Repository pomRepository = (org.apache.maven.model.Repository) i.next();\n\n                remoteRepositories.add( createAntRemoteRepository( pomRepository ) );\n            }\n        }\n        else\n        {\n            // we have to have some sort of Pom object in order to satisfy the requirements for building the\n            // originating Artifact below...\n            pom = createDummyPom();\n        }\n\n        Set artifacts = metadataSource.createArtifacts( dependencies, null, null );\n\n        log( \"Resolving dependencies...\" );\n\n        WagonManager wagonManager = (WagonManager) lookup( WagonManager.ROLE );\n        wagonManager.setDownloadMonitor( new AntDownloadMonitor() );\n\n        ArtifactResolutionResult result;\n        try\n        {\n            Artifact pomArtifact = artifactFactory.createArtifact( pom.getGroupId(), pom.getArtifactId(),\n                                                                   pom.getVersion(), null, pom.getPackaging() );\n\n            List remoteArtifactRepositories = createRemoteArtifactRepositories( getRemoteRepositories() );\n            result = resolver.resolveTransitively( artifacts, pomArtifact, remoteArtifactRepositories, localRepo,\n                                                   metadataSource );\n        }\n        catch ( ArtifactResolutionException e )\n        {\n            throw new BuildException( \"Unable to resolve artifact\", e );\n        }\n\n        if ( pathId != null && getProject().getReference( pathId ) != null )\n        {\n            throw new BuildException( \"Reference ID \" + pathId + \" already exists\" );\n        }\n\n        if ( filesetId != null && getProject().getReference( filesetId ) != null )\n        {\n            throw new BuildException( \"Reference ID \" + filesetId + \" already exists\" );\n        }\n\n        FileList fileList = new FileList();\n        fileList.setDir( getLocalRepository().getLocation() );\n\n        FileSet fileSet = new FileSet();\n        fileSet.setDir( fileList.getDir( getProject() ) );\n\n        for ( Iterator i = result.getArtifacts().iterator(); i.hasNext(); )\n        {\n            Artifact artifact = (Artifact) i.next();\n            String filename = localRepo.pathOf( artifact );\n\n            FileList.FileName file = new FileList.FileName();\n            file.setName( filename );\n\n            fileList.addConfiguredFile( file );\n\n            fileSet.createInclude().setName( filename );\n        }\n\n        if ( pathId != null )\n        {\n            Path path = new Path( getProject() );\n            path.addFilelist( fileList );\n            getProject().addReference( pathId, path );\n        }\n\n        if ( filesetId != null )\n        {\n            getProject().addReference( filesetId, fileSet );\n        }\n    }","id":10723,"modified_method":"public void execute()\n    {\n        ArtifactRepository localRepo = createLocalArtifactRepository();\n\n        ArtifactResolver resolver = (ArtifactResolver) lookup( ArtifactResolver.ROLE );\n        MavenProjectBuilder projectBuilder = (MavenProjectBuilder) lookup( MavenProjectBuilder.ROLE );\n        ArtifactFactory artifactFactory = (ArtifactFactory) lookup( ArtifactFactory.ROLE );\n        MavenMetadataSource metadataSource = new MavenMetadataSource( resolver, projectBuilder, artifactFactory );\n\n        List dependencies = this.dependencies;\n\n        Pom pom = buildPom( projectBuilder, localRepo );\n        if ( pom != null )\n        {\n            if ( !dependencies.isEmpty() )\n            {\n                throw new BuildException( \"You cannot specify both dependencies and a pom in the dependencies task\" );\n            }\n\n            dependencies = pom.getDependencies();\n\n            for ( Iterator i = pom.getRepositories().iterator(); i.hasNext(); )\n            {\n                org.apache.maven.model.Repository pomRepository = (org.apache.maven.model.Repository) i.next();\n\n                remoteRepositories.add( createAntRemoteRepository( pomRepository ) );\n            }\n        }\n        else\n        {\n            // we have to have some sort of Pom object in order to satisfy the requirements for building the\n            // originating Artifact below...\n            pom = createDummyPom();\n        }\n\n        Set artifacts = MavenMetadataSource.createArtifacts( artifactFactory, dependencies, null, null );\n\n        log( \"Resolving dependencies...\" );\n\n        WagonManager wagonManager = (WagonManager) lookup( WagonManager.ROLE );\n        wagonManager.setDownloadMonitor( new AntDownloadMonitor() );\n\n        ArtifactResolutionResult result;\n        try\n        {\n            Artifact pomArtifact = artifactFactory.createArtifact( pom.getGroupId(), pom.getArtifactId(),\n                                                                   pom.getVersion(), null, pom.getPackaging() );\n\n            List remoteArtifactRepositories = createRemoteArtifactRepositories( getRemoteRepositories() );\n            result = resolver.resolveTransitively( artifacts, pomArtifact, remoteArtifactRepositories, localRepo,\n                                                   metadataSource );\n        }\n        catch ( ArtifactResolutionException e )\n        {\n            throw new BuildException( \"Unable to resolve artifact\", e );\n        }\n\n        if ( pathId != null && getProject().getReference( pathId ) != null )\n        {\n            throw new BuildException( \"Reference ID \" + pathId + \" already exists\" );\n        }\n\n        if ( filesetId != null && getProject().getReference( filesetId ) != null )\n        {\n            throw new BuildException( \"Reference ID \" + filesetId + \" already exists\" );\n        }\n\n        FileList fileList = new FileList();\n        fileList.setDir( getLocalRepository().getLocation() );\n\n        FileSet fileSet = new FileSet();\n        fileSet.setDir( fileList.getDir( getProject() ) );\n\n        for ( Iterator i = result.getArtifacts().iterator(); i.hasNext(); )\n        {\n            Artifact artifact = (Artifact) i.next();\n            String filename = localRepo.pathOf( artifact );\n\n            FileList.FileName file = new FileList.FileName();\n            file.setName( filename );\n\n            fileList.addConfiguredFile( file );\n\n            fileSet.createInclude().setName( filename );\n        }\n\n        if ( pathId != null )\n        {\n            Path path = new Path( getProject() );\n            path.addFilelist( fileList );\n            getProject().addReference( pathId, path );\n        }\n\n        if ( filesetId != null )\n        {\n            getProject().addReference( filesetId, fileSet );\n        }\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"public Set retrieve( Artifact artifact, ArtifactRepository localRepository, List remoteRepositories )\n        throws ArtifactMetadataRetrievalException, ArtifactResolutionException\n    {\n        // TODO: only metadata is really needed - resolve as metadata\n        Artifact pomArtifact = artifactFactory.createArtifact( artifact.getGroupId(), artifact.getArtifactId(),\n                                                               artifact.getVersion(), artifact.getScope(), \"pom\" );\n\n        List dependencies = null;\n\n        // Use the ProjectBuilder, to enable post-processing and inheritance calculation before retrieving the\n        // associated artifacts.\n        if ( mavenProjectBuilder != null )\n        {\n            try\n            {\n                MavenProject p = mavenProjectBuilder.buildFromRepository( pomArtifact, remoteRepositories,\n                                                                          localRepository );\n                dependencies = p.getDependencies();\n                artifact.setDownloadUrl( pomArtifact.getDownloadUrl() );\n            }\n            catch ( ProjectBuildingException e )\n            {\n                throw new ArtifactMetadataRetrievalException( \"Unable to read the metadata file\", e );\n            }\n        }\n        else\n        {\n            // there is code in plexus that uses this (though it shouldn't) so we\n            // need to be able to not have a project builder\n            // TODO: remove - which then makes this a very thin wrapper around a project builder - is it needed?\n\n            artifactResolver.resolve( pomArtifact, remoteRepositories, localRepository );\n\n            FileReader reader = null;\n            try\n            {\n//                String path = localRepository.pathOfMetadata( new ProjectArtifactMetadata( artifact, null ) );\n//                File file = new File( localRepository.getBasedir(), path );\n                File file = pomArtifact.getFile();\n                reader = new FileReader( file );\n                Model model = this.reader.read( reader );\n                dependencies = model.getDependencies();\n            }\n            catch ( FileNotFoundException e )\n            {\n                throw new ArtifactMetadataRetrievalException( \"Unable to find the metadata file\", e );\n            }\n            catch ( IOException e )\n            {\n                throw new ArtifactMetadataRetrievalException( \"Unable to read the metadata file\", e );\n            }\n            catch ( XmlPullParserException e )\n            {\n                throw new ArtifactMetadataRetrievalException( \"Unable to parse the metadata file\", e );\n            }\n            finally\n            {\n                IOUtil.close( reader );\n            }\n        }\n        return createArtifacts( dependencies, artifact.getScope(), artifact.getDependencyFilter() );\n    }","id":10724,"modified_method":"public Set retrieve( Artifact artifact, ArtifactRepository localRepository, List remoteRepositories )\n        throws ArtifactMetadataRetrievalException, ArtifactResolutionException\n    {\n        // TODO: only metadata is really needed - resolve as metadata\n        Artifact pomArtifact = artifactFactory.createArtifact( artifact.getGroupId(), artifact.getArtifactId(),\n                                                               artifact.getVersion(), artifact.getScope(), \"pom\" );\n\n        List dependencies = null;\n\n        // Use the ProjectBuilder, to enable post-processing and inheritance calculation before retrieving the\n        // associated artifacts.\n        if ( mavenProjectBuilder != null )\n        {\n            try\n            {\n                MavenProject p = mavenProjectBuilder.buildFromRepository( pomArtifact, remoteRepositories,\n                                                                          localRepository );\n                dependencies = p.getDependencies();\n                artifact.setDownloadUrl( pomArtifact.getDownloadUrl() );\n            }\n            catch ( ProjectBuildingException e )\n            {\n                throw new ArtifactMetadataRetrievalException( \"Unable to read the metadata file\", e );\n            }\n        }\n        else\n        {\n            // there is code in plexus that uses this (though it shouldn't) so we\n            // need to be able to not have a project builder\n            // TODO: remove - which then makes this a very thin wrapper around a project builder - is it needed?\n\n            artifactResolver.resolve( pomArtifact, remoteRepositories, localRepository );\n\n            FileReader reader = null;\n            try\n            {\n//                String path = localRepository.pathOfMetadata( new ProjectArtifactMetadata( artifact, null ) );\n//                File file = new File( localRepository.getBasedir(), path );\n                File file = pomArtifact.getFile();\n                reader = new FileReader( file );\n                Model model = this.reader.read( reader );\n                dependencies = model.getDependencies();\n            }\n            catch ( FileNotFoundException e )\n            {\n                throw new ArtifactMetadataRetrievalException( \"Unable to find the metadata file\", e );\n            }\n            catch ( IOException e )\n            {\n                throw new ArtifactMetadataRetrievalException( \"Unable to read the metadata file\", e );\n            }\n            catch ( XmlPullParserException e )\n            {\n                throw new ArtifactMetadataRetrievalException( \"Unable to parse the metadata file\", e );\n            }\n            finally\n            {\n                IOUtil.close( reader );\n            }\n        }\n        return createArtifacts( artifactFactory, dependencies, artifact.getScope(), artifact.getDependencyFilter() );\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"public Set createArtifacts( List dependencies, String inheritedScope, ArtifactFilter dependencyFilter )\n    {\n        Set projectArtifacts = new HashSet();\n\n        for ( Iterator i = dependencies.iterator(); i.hasNext(); )\n        {\n            Dependency d = (Dependency) i.next();\n\n            Artifact artifact = artifactFactory.createArtifact( d.getGroupId(), d.getArtifactId(), d.getVersion(),\n                                                                d.getScope(), d.getType(), inheritedScope );\n\n            if ( artifact != null && ( dependencyFilter == null || dependencyFilter.include( artifact ) ) )\n            {\n                if ( d.getExclusions() != null && !d.getExclusions().isEmpty() )\n                {\n                    List exclusions = new ArrayList();\n                    for ( Iterator j = d.getExclusions().iterator(); j.hasNext(); )\n                    {\n                        Exclusion e = (Exclusion) j.next();\n                        exclusions.add( e.getGroupId() + \":\" + e.getArtifactId() );\n                    }\n\n                    ArtifactFilter newFilter = new ExcludesArtifactFilter( exclusions );\n\n                    if ( dependencyFilter != null )\n                    {\n                        AndArtifactFilter filter = new AndArtifactFilter();\n                        filter.add( dependencyFilter );\n                        filter.add( newFilter );\n                        dependencyFilter = filter;\n                    }\n                    else\n                    {\n                        dependencyFilter = newFilter;\n                    }\n                }\n\n                artifact.setDependencyFilter( dependencyFilter );\n\n                projectArtifacts.add( artifact );\n            }\n        }\n\n        return projectArtifacts;\n    }","id":10725,"modified_method":"public static Set createArtifacts( ArtifactFactory artifactFactory, List dependencies, String inheritedScope,\n                                       ArtifactFilter dependencyFilter )\n    {\n        Set projectArtifacts = new HashSet();\n\n        for ( Iterator i = dependencies.iterator(); i.hasNext(); )\n        {\n            Dependency d = (Dependency) i.next();\n\n            Artifact artifact = artifactFactory.createArtifact( d.getGroupId(), d.getArtifactId(), d.getVersion(),\n                                                                d.getScope(), d.getType(), inheritedScope );\n\n            if ( artifact != null && ( dependencyFilter == null || dependencyFilter.include( artifact ) ) )\n            {\n                if ( d.getExclusions() != null && !d.getExclusions().isEmpty() )\n                {\n                    List exclusions = new ArrayList();\n                    for ( Iterator j = d.getExclusions().iterator(); j.hasNext(); )\n                    {\n                        Exclusion e = (Exclusion) j.next();\n                        exclusions.add( e.getGroupId() + \":\" + e.getArtifactId() );\n                    }\n\n                    ArtifactFilter newFilter = new ExcludesArtifactFilter( exclusions );\n\n                    if ( dependencyFilter != null )\n                    {\n                        AndArtifactFilter filter = new AndArtifactFilter();\n                        filter.add( dependencyFilter );\n                        filter.add( newFilter );\n                        dependencyFilter = filter;\n                    }\n                    else\n                    {\n                        dependencyFilter = newFilter;\n                    }\n                }\n\n                artifact.setDependencyFilter( dependencyFilter );\n\n                projectArtifacts.add( artifact );\n            }\n        }\n\n        return projectArtifacts;\n    }","commit_id":"3f2f0d50a34ebb44714cd02cc40168dd2d05063f","url":"https://github.com/apache/maven"},{"original_method":"public void testErrors() throws Exception {\r\n        DroolsCompiler compiler = new DroolsCompiler();\r\n\r\n        PackageDescr packageDescr = new PackageDescr( \"p1\" );\r\n        RuleDescr ruleDescr = new RuleDescr( \"rule-1\" );\r\n        packageDescr.addRule( ruleDescr );\r\n\r\n        AndDescr lhs = new AndDescr();\r\n        ruleDescr.setLhs( lhs );\r\n\r\n        ColumnDescr column = new ColumnDescr( Cheese.class.getName(),\r\n                                              \"stilton\" );\r\n        lhs.addDescr( column );\r\n\r\n        FieldBindingDescr fieldBindingDescr = new FieldBindingDescr( \"price\",\r\n                                                                     \"x\" );\r\n        column.addDescr( fieldBindingDescr );\r\n        fieldBindingDescr = new FieldBindingDescr( \"price\",\r\n                                                   \"y\" );\r\n        column.addDescr( fieldBindingDescr );\r\n\r\n        packageDescr.addGlobal( \"map\",\r\n                                \"java.util.Map\" );\r\n\r\n        ReturnValueDescr returnValue = new ReturnValueDescr( \"price\",\r\n                                                             \"==\",\r\n                                                             \"x\" );\r\n        column.addDescr( returnValue );\r\n\r\n        // There is no m this should produce errors.\r\n        ruleDescr.setConsequence( \"drools.modifyObject(m);\" );\r\n\r\n        compiler.addPackage( packageDescr );\r\n\r\n        assertLength( 3,\r\n                      compiler.getErrors().values() );\r\n    }","id":10726,"modified_method":"public void testErrors() throws Exception {\r\n        RuleBaseManager manager = new RuleBaseManager();\r\n\r\n        PackageDescr packageDescr = new PackageDescr( \"p1\" );\r\n        RuleDescr ruleDescr = new RuleDescr( \"rule-1\" );\r\n        packageDescr.addRule( ruleDescr );\r\n\r\n        AndDescr lhs = new AndDescr();\r\n        ruleDescr.setLhs( lhs );\r\n\r\n        ColumnDescr column = new ColumnDescr( Cheese.class.getName(),\r\n                                              \"stilton\" );\r\n        lhs.addDescr( column );\r\n\r\n        FieldBindingDescr fieldBindingDescr = new FieldBindingDescr( \"price\",\r\n                                                                     \"x\" );\r\n        column.addDescr( fieldBindingDescr );\r\n        fieldBindingDescr = new FieldBindingDescr( \"price\",\r\n                                                   \"y\" );\r\n        column.addDescr( fieldBindingDescr );\r\n\r\n        packageDescr.addGlobal( \"map\",\r\n                                \"java.util.Map\" );\r\n\r\n        ReturnValueDescr returnValue = new ReturnValueDescr( \"price\",\r\n                                                             \"==\",\r\n                                                             \"x\" );\r\n        column.addDescr( returnValue );\r\n\r\n        // There is no m this should produce errors.\r\n        ruleDescr.setConsequence( \"modify(m);\" );\r\n\r\n        manager.addPackage( packageDescr );\r\n\r\n        assertLength( 2,\r\n                      manager.getCompilationResults().getErrors() );\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testLiteral() throws Exception {\r\n        DroolsCompiler compiler = new DroolsCompiler();\r\n\r\n        PackageDescr packageDescr = new PackageDescr( \"p1\" );\r\n        RuleDescr ruleDescr = new RuleDescr( \"rule-1\" );\r\n        packageDescr.addRule( ruleDescr );\r\n\r\n        AndDescr lhs = new AndDescr();\r\n        ruleDescr.setLhs( lhs );\r\n\r\n        ColumnDescr column = new ColumnDescr( Cheese.class.getName(),\r\n                                              \"stilton\" );\r\n        lhs.addDescr( column );\r\n\r\n        LiteralDescr listeralDescr = new LiteralDescr( \"type\",\r\n                                                       \"==\",\r\n                                                       \"stilton\" );\r\n\r\n        column.addDescr( listeralDescr );\r\n\r\n        ruleDescr.setConsequence( \"drools.modifyObject(stilton);\" );\r\n\r\n        compiler.addPackage( packageDescr );\r\n\r\n        assertLength( 0,\r\n                      compiler.getErrors().values() );\r\n    }","id":10727,"modified_method":"public void testLiteral() throws Exception {\r\n        RuleBaseManager manager = new RuleBaseManager();\r\n\r\n        PackageDescr packageDescr = new PackageDescr( \"p1\" );\r\n        RuleDescr ruleDescr = new RuleDescr( \"rule-1\" );\r\n        packageDescr.addRule( ruleDescr );\r\n\r\n        AndDescr lhs = new AndDescr();\r\n        ruleDescr.setLhs( lhs );\r\n\r\n        ColumnDescr column = new ColumnDescr( Cheese.class.getName(),\r\n                                              \"stilton\" );\r\n        lhs.addDescr( column );\r\n\r\n        LiteralDescr listeralDescr = new LiteralDescr( \"type\",\r\n                                                       \"==\",\r\n                                                       \"stilton\" );\r\n\r\n        column.addDescr( listeralDescr );\r\n\r\n        ruleDescr.setConsequence( \"modify(stilton);\" );\r\n\r\n        manager.addPackage( packageDescr );\r\n\r\n        assertLength( 0,\r\n                      manager.getCompilationResults().getErrors() );\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"private Rule t(ConditionalElementDescr ceDescr) throws Exception {\r\n        DroolsCompiler compiler = new DroolsCompiler();\r\n        \r\n        PackageDescr packageDescr = new PackageDescr( \"p1\" );\r\n        RuleDescr ruleDescr = new RuleDescr( \"rule-1\" );\r\n        packageDescr.addRule( ruleDescr );\r\n\r\n        AndDescr lhs = new AndDescr();\r\n        ruleDescr.setLhs( lhs );\r\n\r\n        lhs.addDescr( (PatternDescr) ceDescr );        \r\n\r\n        \r\n        ColumnDescr columnDescr = new ColumnDescr( Cheese.class.getName(),\r\n                                                   \"stilton\" );\r\n\r\n        LiteralDescr literalDescr = new LiteralDescr( \"type\",\r\n                                                      \"==\",\r\n                                                      \"stilton\" );\r\n        columnDescr.addDescr( literalDescr );\r\n\r\n        ceDescr.addDescr( columnDescr );\r\n\r\n        ruleDescr.setConsequence( \"drools.modifyObject(stilton);\" );\r\n\r\n        compiler.addPackage( packageDescr );\r\n\r\n        assertLength( 0,\r\n                      compiler.getErrors().values() );\r\n\r\n        Package pkg = (Package) compiler.getPackages().get( \"p1\" );\r\n        Rule rule = pkg.getRule( \"rule-1\" );\r\n        \r\n        return rule;\r\n    }","id":10728,"modified_method":"private Rule t(ConditionalElementDescr ceDescr) throws Exception {\r\n        RuleBaseManager manager = new RuleBaseManager();\r\n\r\n        PackageDescr packageDescr = new PackageDescr( \"p1\" );\r\n        RuleDescr ruleDescr = new RuleDescr( \"rule-1\" );\r\n        packageDescr.addRule( ruleDescr );\r\n\r\n        AndDescr lhs = new AndDescr();\r\n        ruleDescr.setLhs( lhs );\r\n\r\n        lhs.addDescr( (PatternDescr) ceDescr );\r\n\r\n        ColumnDescr columnDescr = new ColumnDescr( Cheese.class.getName(),\r\n                                                   \"stilton\" );\r\n\r\n        LiteralDescr literalDescr = new LiteralDescr( \"type\",\r\n                                                      \"==\",\r\n                                                      \"stilton\" );\r\n        columnDescr.addDescr( literalDescr );\r\n\r\n        ceDescr.addDescr( columnDescr );\r\n\r\n        ruleDescr.setConsequence( \"modify(stilton);\" );\r\n\r\n        manager.addPackage( packageDescr );\r\n\r\n        assertLength( 0,\r\n                      manager.getCompilationResults().getErrors() );\r\n\r\n        Package pkg = (Package) manager.getPackages().get( \"p1\" );\r\n        Rule rule = pkg.getRule( \"rule-1\" );\r\n\r\n        return rule;\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testPredicate() throws CheckedDroolsException,\r\n                               ClassNotFoundException {\r\n        DroolsCompiler compiler = new DroolsCompiler();\r\n\r\n        PackageDescr packageDescr = new PackageDescr( \"p1\" );\r\n        RuleDescr ruleDescr = new RuleDescr( \"rule-1\" );\r\n        packageDescr.addRule( ruleDescr );\r\n\r\n        AndDescr lhs = new AndDescr();\r\n        ruleDescr.setLhs( lhs );\r\n\r\n        ColumnDescr column = new ColumnDescr( Cheese.class.getName(),\r\n                                              \"stilton\" );\r\n        lhs.addDescr( column );\r\n\r\n        FieldBindingDescr fieldBindingDescr = new FieldBindingDescr( \"price\",\r\n                                                                     \"x\" );\r\n        column.addDescr( fieldBindingDescr );\r\n\r\n        packageDescr.addGlobal( \"map\",\r\n                                \"java.util.Map\" );\r\n\r\n        PredicateDescr predicate = new PredicateDescr( \"price\",\r\n                                                       \"y\",\r\n                                                       \"( ( Integer )map.get(x) ).intValue() == y.intValue()\" );\r\n        column.addDescr( predicate );\r\n\r\n        ruleDescr.setConsequence( \"drools.modifyObject(stilton);\" );\r\n\r\n        compiler.addPackage( packageDescr );\r\n\r\n        assertLength( 0,\r\n                      compiler.getErrors().values() );\r\n    }","id":10729,"modified_method":"public void testPredicate() throws Exception {\r\n        RuleBaseManager manager = new RuleBaseManager();\r\n\r\n        PackageDescr packageDescr = new PackageDescr( \"p1\" );\r\n        RuleDescr ruleDescr = new RuleDescr( \"rule-1\" );\r\n        packageDescr.addRule( ruleDescr );\r\n\r\n        AndDescr lhs = new AndDescr();\r\n        ruleDescr.setLhs( lhs );\r\n\r\n        ColumnDescr column = new ColumnDescr( Cheese.class.getName(),\r\n                                              \"stilton\" );\r\n        lhs.addDescr( column );\r\n\r\n        FieldBindingDescr fieldBindingDescr = new FieldBindingDescr( \"price\",\r\n                                                                     \"x\" );\r\n        column.addDescr( fieldBindingDescr );\r\n\r\n        packageDescr.addGlobal( \"map\",\r\n                                \"java.util.Map\" );\r\n\r\n        PredicateDescr predicate = new PredicateDescr( \"price\",\r\n                                                       \"y\",\r\n                                                       \"( ( Integer )map.get(x) ).intValue() == y.intValue()\" );\r\n        column.addDescr( predicate );\r\n\r\n        ruleDescr.setConsequence( \"modify(stilton);\" );\r\n\r\n        manager.addPackage( packageDescr );\r\n\r\n        assertLength( 0,\r\n                      manager.getCompilationResults().getErrors() );\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testReturnValue() throws Exception {\r\n        DroolsCompiler compiler = new DroolsCompiler();\r\n\r\n        PackageDescr packageDescr = new PackageDescr( \"p1\" );\r\n        RuleDescr ruleDescr = new RuleDescr( \"rule-1\" );\r\n        packageDescr.addRule( ruleDescr );\r\n\r\n        AndDescr lhs = new AndDescr();\r\n        ruleDescr.setLhs( lhs );\r\n\r\n        ColumnDescr column = new ColumnDescr( Cheese.class.getName(),\r\n                                              \"stilton\" );\r\n        lhs.addDescr( column );\r\n\r\n        FieldBindingDescr fieldBindingDescr = new FieldBindingDescr( \"price\",\r\n                                                                     \"x\" );\r\n        column.addDescr( fieldBindingDescr );\r\n        fieldBindingDescr = new FieldBindingDescr( \"price\",\r\n                                                   \"y\" );\r\n        column.addDescr( fieldBindingDescr );\r\n\r\n        packageDescr.addGlobal( \"map\",\r\n                                \"java.util.Map\" );\r\n\r\n        ReturnValueDescr returnValue = new ReturnValueDescr( \"price\",\r\n                                                             \"==\",\r\n                                                             \"new  Integer(( ( ( Integer )map.get(x) ).intValue() * y.intValue()))\" );\r\n        column.addDescr( returnValue );\r\n\r\n        ruleDescr.setConsequence( \"drools.modifyObject(stilton);\" );\r\n\r\n        compiler.addPackage( packageDescr );\r\n\r\n        assertLength( 0,\r\n                      compiler.getErrors().values() );\r\n    }","id":10730,"modified_method":"public void testReturnValue() throws Exception {\r\n        RuleBaseManager manager = new RuleBaseManager();\r\n\r\n        PackageDescr packageDescr = new PackageDescr( \"p1\" );\r\n        RuleDescr ruleDescr = new RuleDescr( \"rule-1\" );\r\n        packageDescr.addRule( ruleDescr );\r\n\r\n        AndDescr lhs = new AndDescr();\r\n        ruleDescr.setLhs( lhs );\r\n\r\n        ColumnDescr column = new ColumnDescr( Cheese.class.getName(),\r\n                                              \"stilton\" );\r\n        lhs.addDescr( column );\r\n\r\n        FieldBindingDescr fieldBindingDescr = new FieldBindingDescr( \"price\",\r\n                                                                     \"x\" );\r\n        column.addDescr( fieldBindingDescr );\r\n        fieldBindingDescr = new FieldBindingDescr( \"price\",\r\n                                                   \"y\" );\r\n        column.addDescr( fieldBindingDescr );\r\n\r\n        packageDescr.addGlobal( \"map\",\r\n                                \"java.util.Map\" );\r\n\r\n        ReturnValueDescr returnValue = new ReturnValueDescr( \"price\",\r\n                                                             \"==\",\r\n                                                             \"new  Integer(( ( ( Integer )map.get(x) ).intValue() * y.intValue()))\" );\r\n        column.addDescr( returnValue );\r\n\r\n        ruleDescr.setConsequence( \"modify(stilton);\" );\r\n\r\n        manager.addPackage( packageDescr );\r\n\r\n        assertLength( 0,\r\n                      manager.getCompilationResults().getErrors() );\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testEval() throws Exception {\r\n        DroolsCompiler compiler = new DroolsCompiler();\r\n\r\n        PackageDescr packageDescr = new PackageDescr( \"p1\" );\r\n        RuleDescr ruleDescr = new RuleDescr( \"rule-1\" );\r\n        packageDescr.addRule( ruleDescr );\r\n\r\n        AndDescr lhs = new AndDescr();\r\n        ruleDescr.setLhs( lhs );\r\n\r\n        ColumnDescr column = new ColumnDescr( Cheese.class.getName(),\r\n                                              \"stilton\" );\r\n        lhs.addDescr( column );\r\n\r\n        FieldBindingDescr fieldBindingDescr = new FieldBindingDescr( \"price\",\r\n                                                                     \"x\" );\r\n        column.addDescr( fieldBindingDescr );\r\n        fieldBindingDescr = new FieldBindingDescr( \"price\",\r\n                                                   \"y\" );\r\n        column.addDescr( fieldBindingDescr );\r\n\r\n        packageDescr.addGlobal( \"map\",\r\n                                \"java.util.Map\" );\r\n\r\n        EvalDescr evalDescr = new EvalDescr( \"( ( Integer )map.get(x) ).intValue() == y.intValue()\" );\r\n        lhs.addDescr( evalDescr );\r\n\r\n        ruleDescr.setConsequence( \"drools.modifyObject(stilton);\" );\r\n\r\n        compiler.addPackage( packageDescr );\r\n\r\n        assertLength( 0,\r\n                      compiler.getErrors().values() );\r\n    }","id":10731,"modified_method":"public void testEval() throws Exception {\r\n        RuleBaseManager manager = new RuleBaseManager();\r\n\r\n        PackageDescr packageDescr = new PackageDescr( \"p1\" );\r\n        RuleDescr ruleDescr = new RuleDescr( \"rule-1\" );\r\n        packageDescr.addRule( ruleDescr );\r\n\r\n        AndDescr lhs = new AndDescr();\r\n        ruleDescr.setLhs( lhs );\r\n\r\n        ColumnDescr column = new ColumnDescr( Cheese.class.getName(),\r\n                                              \"stilton\" );\r\n        lhs.addDescr( column );\r\n\r\n        FieldBindingDescr fieldBindingDescr = new FieldBindingDescr( \"price\",\r\n                                                                     \"x\" );\r\n        column.addDescr( fieldBindingDescr );\r\n        fieldBindingDescr = new FieldBindingDescr( \"price\",\r\n                                                   \"y\" );\r\n        column.addDescr( fieldBindingDescr );\r\n\r\n        packageDescr.addGlobal( \"map\",\r\n                                \"java.util.Map\" );\r\n\r\n        EvalDescr evalDescr = new EvalDescr( \"( ( Integer )map.get(x) ).intValue() == y.intValue()\" );\r\n        lhs.addDescr( evalDescr );\r\n\r\n        ruleDescr.setConsequence( \"modify(stilton);\" );\r\n\r\n        manager.addPackage( packageDescr );\r\n\r\n        assertLength( 0,\r\n                      manager.getCompilationResults().getErrors() );\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public RuleBuilder() {\r\n        cfg = new Configuration();\r\n        cfg.setClassForTemplateLoading( getClass(),\r\n                                        \"\" );\r\n    }","id":10732,"modified_method":"public RuleBuilder() {\r\n        this.results = new ArrayList();\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"private void build(Column column,\r\n                       LiteralDescr literalDescr) {\r\n\r\n        Class clazz = ((ClassObjectType) column.getObjectType()).getClassType();\r\n\r\n        FieldExtractor extractor = new ClassFieldExtractor( clazz,\r\n                                                            literalDescr.getFieldName() );\r\n\r\n        FieldValue field = FieldFactory.getFieldValue( literalDescr.getText(),\r\n                                                       extractor.getObjectType().getValueType() );\r\n\r\n        Evaluator evaluator = EvaluatorFactory.getEvaluator( extractor.getObjectType().getValueType(),\r\n                                                             literalDescr.getEvaluator() );\r\n\r\n        column.addConstraint( new LiteralConstraint( field,\r\n                                                     extractor,\r\n                                                     evaluator ) );\r\n    }","id":10733,"modified_method":"private void build(Column column,\r\n                       LiteralDescr literalDescr) {\r\n\r\n        Class clazz = ((ClassObjectType) column.getObjectType()).getClassType();\r\n\r\n        FieldExtractor extractor = getFieldExtractor( literalDescr,\r\n                                                      clazz,\r\n                                                      literalDescr.getFieldName() );\r\n        if ( extractor == null ) {\r\n            return;\r\n        }\r\n\r\n        FieldValue field = null;\r\n        try {\r\n            field = FieldFactory.getFieldValue( literalDescr.getText(),\r\n                                                extractor.getObjectType().getValueType() );\r\n        } catch ( Exception e ) {\r\n            this.results.add( new BuilderResult( literalDescr,\r\n                                                 e,\r\n                                                 \"Unable to create a Field value ofr type  '\" + extractor.getObjectType().getValueType() + \"' and value '\" + literalDescr.getText() + \"'\" ) );\r\n        }\r\n\r\n        Evaluator evaluator = getEvaluator( literalDescr,\r\n                                            extractor.getObjectType().getValueType(),\r\n                                            literalDescr.getEvaluator() );\r\n        if ( evaluator == null ) {\r\n            return;\r\n        }\r\n\r\n        column.addConstraint( new LiteralConstraint( field,\r\n                                                     extractor,\r\n                                                     evaluator ) );\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public synchronized Rule build(Package pkg,\r\n                                   RuleDescr ruleDescr) throws CheckedDroolsException {\r\n        this.pkg = pkg;\r\n        this.methods = new ArrayList();\r\n        this.invokeables = new HashMap();\r\n        this.referenceLookups = new HashMap();\r\n        this.declarations = ruleDescr.getDeclarations();\r\n\r\n        this.rule = new Rule( ruleDescr.getName() );\r\n        this.ruleDescr = ruleDescr;\r\n\r\n        // Assign attributes\r\n        setAttributes( rule,\r\n                       ruleDescr.getAttributes() );\r\n\r\n        try {\r\n            // Build the left hand side\r\n            // generate invokers, methods\r\n            build( rule,\r\n                   ruleDescr.getLhs(),\r\n                   rule.getLhs() );\r\n            // Build the consequence and generate it's invokers/methods\r\n            // generate the main rule from the previously generated methods.\r\n            build( rule,\r\n                   ruleDescr );\r\n        } catch ( Exception e ) {\r\n            e.printStackTrace();\r\n            throw new CheckedDroolsException( e );\r\n        }\r\n\r\n        return rule;\r\n    }","id":10734,"modified_method":"public synchronized Rule build(Package pkg,\r\n                                   RuleDescr ruleDescr) {\r\n        this.pkg = pkg;\r\n        this.methods = new ArrayList();\r\n        this.invokers = new HashMap();\r\n        this.invokerLookups = new HashMap();\r\n        this.declarations = new HashMap();\r\n\r\n        this.rule = new Rule( ruleDescr.getName() );\r\n        this.ruleDescr = ruleDescr;\r\n\r\n        // Assign attributes\r\n        setAttributes( rule,\r\n                       ruleDescr.getAttributes() );\r\n\r\n        // Build the left hand side\r\n        // generate invoker, methods\r\n        build( rule,\r\n               ruleDescr.getLhs(),\r\n               rule.getLhs() );\r\n        // Build the consequence and generate it's invoker/methods\r\n        // generate the main rule from the previously generated methods.\r\n        build( rule,\r\n               ruleDescr );\r\n\r\n        return rule;\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"private void build(Column column,\r\n                       PredicateDescr predicateDescr) throws TemplateException,\r\n                                                     IOException,\r\n                                                     TokenStreamException,\r\n                                                     RecognitionException {\r\n        // generate method\r\n        // generate invoker\r\n        Map root = new HashMap();\r\n\r\n        String classMethodName = \"predicate\" + counter++;\r\n        predicateDescr.setClassMethodName( classMethodName );\r\n\r\n        root.put( \"package\",\r\n                  this.pkg.getName() );\r\n        root.put( \"ruleClassName\",\r\n                  ucFirst( this.ruleDescr.getClassName() ) );\r\n        root.put( \"invokerClassName\",\r\n                  ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\" );\r\n        root.put( \"methodName\",\r\n                  classMethodName );\r\n\r\n        Class clazz = ((ClassObjectType) column.getObjectType()).getClassType();\r\n\r\n        FieldExtractor extractor = new ClassFieldExtractor( clazz,\r\n                                                            predicateDescr.getFieldName() );\r\n\r\n        Declaration declaration = column.addDeclaration( predicateDescr.getDeclaration(),\r\n                                                         extractor );\r\n\r\n        this.declarations.put( declaration.getIdentifier(),\r\n                               declaration );\r\n\r\n        List usedDeclarations = this.analyzer.analyze( predicateDescr.getText(),\r\n                                                       this.declarations.keySet() );\r\n\r\n        // Don't include the focus declaration, that hasn't been merged into the tuple yet.\r\n        usedDeclarations.remove( predicateDescr.getDeclaration() );\r\n\r\n        Declaration[] declarations = new Declaration[usedDeclarations.size()];\r\n        for ( int i = 0, size = usedDeclarations.size(); i < size; i++ ) {\r\n            declarations[i] = (Declaration) this.declarations.get( (String) usedDeclarations.get( i ) );\r\n        }\r\n\r\n        root.put( \"declarations\",\r\n                  declarations );\r\n\r\n        root.put( \"declaration\",\r\n                  declaration );\r\n\r\n        root.put( \"globals\",\r\n                  getUsedGlobals( predicateDescr.getText() ) );\r\n\r\n        root.put( \"globalTypes\",\r\n                  this.pkg.getGlobals() );\r\n\r\n        root.put( \"text\",\r\n                  predicateDescr.getText() );\r\n\r\n        PredicateConstraint predicateConstraint = new PredicateConstraint( declaration,\r\n                                                                           declarations );\r\n        column.addConstraint( predicateConstraint );\r\n\r\n        Template template = this.cfg.getTemplate( \"predicateMethod.ftl\" );\r\n        StringWriter string = new StringWriter();\r\n        template.process( root,\r\n                          string );\r\n        string.flush();\r\n        this.methods.add( string.toString() );\r\n\r\n        template = this.cfg.getTemplate( \"predicateInvoker.ftl\" );\r\n        string = new StringWriter();\r\n        template.process( root,\r\n                          string );\r\n        string.flush();\r\n\r\n        String invokerClassName = ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\";\r\n        this.invokeables.put( invokerClassName,\r\n                              string.toString() );\r\n        this.referenceLookups.put( this.pkg.getName() + \".\" + invokerClassName,\r\n                                   predicateConstraint );\r\n    }","id":10735,"modified_method":"private void build(Column column,\r\n                       PredicateDescr predicateDescr) {\r\n        // generate method\r\n        // generate Invoker\r\n        String classMethodName = \"predicate\" + counter++;\r\n        predicateDescr.setClassMethodName( classMethodName );\r\n\r\n        Class clazz = ((ClassObjectType) column.getObjectType()).getClassType();\r\n\r\n        FieldExtractor extractor = getFieldExtractor( predicateDescr,\r\n                                                      clazz,\r\n                                                      predicateDescr.getFieldName() );\r\n        if ( extractor == null ) {\r\n            return;\r\n        }\r\n\r\n        Declaration declaration = column.addDeclaration( predicateDescr.getDeclaration(),\r\n                                                         extractor );\r\n\r\n        this.declarations.put( declaration.getIdentifier(),\r\n                               declaration );\r\n\r\n        List usedDeclarations = getUsedDeclarations( predicateDescr,\r\n                                                     predicateDescr.getText() );\r\n        if ( usedDeclarations == null ) {\r\n            return;\r\n        }\r\n\r\n        // Don't include the focus declaration, that hasn't been merged into the tuple yet.\r\n        usedDeclarations.remove( predicateDescr.getDeclaration() );\r\n\r\n        Declaration[] declarations = new Declaration[usedDeclarations.size()];\r\n        for ( int i = 0, size = usedDeclarations.size(); i < size; i++ ) {\r\n            declarations[i] = (Declaration) this.declarations.get( (String) usedDeclarations.get( i ) );\r\n        }\r\n\r\n        PredicateConstraint predicateConstraint = new PredicateConstraint( declaration,\r\n                                                                           declarations );\r\n        column.addConstraint( predicateConstraint );\r\n\r\n        StringTemplate st = ruleGroup.getInstanceOf( \"predicateMethod\" );\r\n\r\n        st.setAttribute( \"declaration\",\r\n                         declaration );\r\n        st.setAttribute( \"declarationType\",\r\n                         ((ClassObjectType) declaration.getObjectType()).getClassType().getName().replace( '$',\r\n                                                                                                           '.' ) );\r\n\r\n        setStringTemplateAttributes( st,\r\n                                     declarations,\r\n                                     predicateDescr.getText() );\r\n\r\n        st.setAttribute( \"methodName\",\r\n                         classMethodName );\r\n        st.setAttribute( \"text\",\r\n                         predicateDescr.getText() );\r\n\r\n        this.methods.add( st.toString() );\r\n\r\n        st = invokerGroup.getInstanceOf( \"predicateInvoker\" );\r\n\r\n        st.setAttribute( \"package\",\r\n                         this.pkg.getName() );\r\n        st.setAttribute( \"ruleClassName\",\r\n                         ucFirst( this.ruleDescr.getClassName() ) );\r\n        st.setAttribute( \"invokerClassName\",\r\n                         ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\" );\r\n        st.setAttribute( \"methodName\",\r\n                         classMethodName );\r\n\r\n        st.setAttribute( \"declaration\",\r\n                         declaration );\r\n        st.setAttribute( \"declarationType\",\r\n                         ((ClassObjectType) declaration.getObjectType()).getClassType().getName().replace( '$',\r\n                                                                                                           '.' ) );\r\n\r\n        setStringTemplateAttributes( st,\r\n                                     declarations,\r\n                                     predicateDescr.getText() );\r\n\r\n        st.setAttribute( \"methodName\",\r\n                         classMethodName );\r\n        st.setAttribute( \"text\",\r\n                         predicateDescr.getText() );\r\n\r\n        String invokerClassName = ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\";\r\n        this.invokers.put( invokerClassName,\r\n                           st.toString() );\r\n        this.invokerLookups.put( this.pkg.getName() + \".\" + invokerClassName,\r\n                                 predicateConstraint );\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"private void build(Column column,\r\n                       FieldBindingDescr fieldBinding) throws ClassNotFoundException,\r\n                                                      IntrospectionException {\r\n        Class clazz = ((ClassObjectType) column.getObjectType()).getClassType();\r\n\r\n        FieldExtractor extractor = new ClassFieldExtractor( clazz,\r\n                                                            fieldBinding.getFieldName() );\r\n\r\n        Declaration declaration = column.addDeclaration( fieldBinding.getIdentifier(),\r\n                                                         extractor );\r\n\r\n        this.declarations.put( declaration.getIdentifier(),\r\n                               declaration );\r\n    }","id":10736,"modified_method":"private void build(Column column,\r\n                       FieldBindingDescr fieldBindingDescr) {\r\n        Class clazz = ((ClassObjectType) column.getObjectType()).getClassType();\r\n\r\n        FieldExtractor extractor = getFieldExtractor( fieldBindingDescr,\r\n                                                      clazz,\r\n                                                      fieldBindingDescr.getFieldName() );\r\n        if ( extractor == null ) {\r\n            return;\r\n        }\r\n\r\n        Declaration declaration = column.addDeclaration( fieldBindingDescr.getIdentifier(),\r\n                                                         extractor );\r\n\r\n        this.declarations.put( declaration.getIdentifier(),\r\n                               declaration );\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"private void build(Rule rule,\r\n                       RuleDescr ruleDescr) throws IOException,\r\n                                           TokenStreamException,\r\n                                           RecognitionException,\r\n                                           TemplateException {\r\n        // generate method\r\n        // generate invoker\r\n        Map root = new HashMap();\r\n\r\n        String classMethodName = \"consequence\";\r\n\r\n        root.put( \"package\",\r\n                  this.pkg.getName() );\r\n        root.put( \"ruleClassName\",\r\n                  ucFirst( this.ruleDescr.getClassName() ) );\r\n        root.put( \"invokerClassName\",\r\n                  ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\" );\r\n        root.put( \"methodName\",\r\n                  classMethodName );\r\n\r\n        root.put( \"declarations\",\r\n                  this.declarations.values() );\r\n\r\n        root.put( \"globals\",\r\n                  getUsedGlobals( ruleDescr.getConsequence() ) );\r\n\r\n        root.put( \"globalTypes\",\r\n                  this.pkg.getGlobals() );\r\n\r\n        // @todo: add in michael's regexpr to make modifies more efficient\r\n        root.put( \"text\",\r\n                  ruleDescr.getConsequence() );\r\n\r\n        Template template = this.cfg.getTemplate( \"consequenceMethod.ftl\" );\r\n        StringWriter string = new StringWriter();\r\n        template.process( root,\r\n                          string );\r\n        string.flush();\r\n        this.methods.add( string.toString() );\r\n\r\n        template = this.cfg.getTemplate( \"consequenceInvoker.ftl\" );\r\n        string = new StringWriter();\r\n        template.process( root,\r\n                          string );\r\n        string.flush();\r\n\r\n        String invokerClassName = ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\";\r\n        this.invokeables.put( invokerClassName,\r\n                              string.toString() );\r\n        this.referenceLookups.put( this.pkg.getName() + \".\" + invokerClassName,\r\n                                   this.rule );\r\n\r\n        template = this.cfg.getTemplate( \"ruleClass.ftl\" );\r\n        root.put( \"imports\",\r\n                  this.pkg.getImports() );\r\n        root.put( \"methods\",\r\n                  this.methods );\r\n        string = new StringWriter();\r\n        template.process( root,\r\n                          string );\r\n        string.flush();\r\n\r\n        this.ruleClass = string.toString();\r\n    }","id":10737,"modified_method":"private void build(Rule rule,\r\n                       RuleDescr ruleDescr) {\r\n        // generate method\r\n        // generate Invoker\r\n        Map root = new HashMap();\r\n\r\n        String classMethodName = \"consequence\";\r\n\r\n        root.put( \"package\",\r\n                  this.pkg.getName() );\r\n        root.put( \"ruleClassName\",\r\n                  ucFirst( this.ruleDescr.getClassName() ) );\r\n        root.put( \"invokerClassName\",\r\n                  ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\" );\r\n        root.put( \"methodName\",\r\n                  classMethodName );\r\n\r\n        root.put( \"declarations\",\r\n                  this.declarations.values() );\r\n\r\n        root.put( \"globals\",\r\n                  getUsedGlobals( ruleDescr.getConsequence() ) );\r\n\r\n        root.put( \"globalTypes\",\r\n                  this.pkg.getGlobals() );\r\n\r\n        StringTemplate st = ruleGroup.getInstanceOf( \"consequenceMethod\" );\r\n\r\n        st.setAttribute( \"methodName\",\r\n                         classMethodName );\r\n\r\n        Declaration[] declarations = (Declaration[]) this.declarations.values().toArray( new Declaration[this.declarations.size()] );\r\n        setStringTemplateAttributes( st,\r\n                                     declarations,\r\n                                     ruleDescr.getConsequence() );\r\n\r\n        st.setAttribute( \"text\",\r\n                         fixer.fix( ruleDescr.getConsequence() ) );\r\n\r\n        this.methods.add( st.toString() );\r\n\r\n        st = invokerGroup.getInstanceOf( \"consequenceInvoker\" );\r\n\r\n        st.setAttribute( \"package\",\r\n                         this.pkg.getName() );\r\n        st.setAttribute( \"ruleClassName\",\r\n                         ucFirst( this.ruleDescr.getClassName() ) );\r\n        st.setAttribute( \"invokerClassName\",\r\n                         ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\" );\r\n        st.setAttribute( \"methodName\",\r\n                         classMethodName );\r\n\r\n        setStringTemplateAttributes( st,\r\n                                     declarations,\r\n                                     ruleDescr.getConsequence() );\r\n\r\n        st.setAttribute( \"text\",\r\n                         ruleDescr.getConsequence() );\r\n\r\n        String invokerClassName = this.pkg.getName() + \".\" + ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\";\r\n        this.invokers.put( invokerClassName,\r\n                           st.toString() );\r\n        this.invokerLookups.put( invokerClassName,\r\n                                 this.rule );\r\n\r\n        st = ruleGroup.getInstanceOf( \"ruleClass\" );\r\n\r\n        st.setAttribute( \"package\",\r\n                         this.pkg.getName() );\r\n        st.setAttribute( \"ruleClassName\",\r\n                         ucFirst( this.ruleDescr.getClassName() ) );\r\n        st.setAttribute( \"imports\",\r\n                         this.pkg.getImports() );\r\n        st.setAttribute( \"methods\",\r\n                         this.methods );\r\n        \r\n        this.ruleClass = st.toString();\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public Map getInvokeables() {\r\n        return this.invokeables;\r\n    }","id":10738,"modified_method":"public Map getInvokers() {\r\n        return this.invokers;\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"private void build(Column column,\r\n                       ReturnValueDescr returnValueDescr) throws IOException,\r\n                                                         TemplateException,\r\n                                                         TokenStreamException,\r\n                                                         RecognitionException {\r\n        // generate method\r\n        // generate invoker\r\n        Map root = new HashMap();\r\n\r\n        String classMethodName = \"returnValue\" + counter++;\r\n        returnValueDescr.setClassMethodName( classMethodName );\r\n\r\n        root.put( \"package\",\r\n                  this.pkg.getName() );\r\n        root.put( \"ruleClassName\",\r\n                  ucFirst( this.ruleDescr.getClassName() ) );\r\n        root.put( \"invokerClassName\",\r\n                  ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\" );\r\n        root.put( \"methodName\",\r\n                  classMethodName );\r\n\r\n        List usedDeclarations = this.analyzer.analyze( returnValueDescr.getText(),\r\n                                                       this.declarations.keySet() );\r\n\r\n        Declaration[] declarations = new Declaration[usedDeclarations.size()];\r\n        for ( int i = 0, size = usedDeclarations.size(); i < size; i++ ) {\r\n            declarations[i] = (Declaration) this.declarations.get( (String) usedDeclarations.get( i ) );\r\n        }\r\n\r\n        root.put( \"declarations\",\r\n                  declarations );\r\n\r\n        root.put( \"globals\",\r\n                  getUsedGlobals( returnValueDescr.getText() ) );\r\n\r\n        root.put( \"globalTypes\",\r\n                  this.pkg.getGlobals() );\r\n\r\n        root.put( \"text\",\r\n                  returnValueDescr.getText() );\r\n\r\n        ClassFieldExtractor extractor = new ClassFieldExtractor( ((ClassObjectType) column.getObjectType()).getClassType(),\r\n                                                                 returnValueDescr.getFieldName() );\r\n\r\n        Evaluator evaluator = EvaluatorFactory.getEvaluator( extractor.getObjectType().getValueType(),\r\n                                                             returnValueDescr.getEvaluator() );\r\n\r\n        ReturnValueConstraint returnValueConstraint = new ReturnValueConstraint( extractor,\r\n                                                                                 declarations,\r\n                                                                                 evaluator );\r\n        column.addConstraint( returnValueConstraint );\r\n\r\n        Template template = this.cfg.getTemplate( \"returnValueMethod.ftl\" );\r\n        StringWriter string = new StringWriter();\r\n        template.process( root,\r\n                          string );\r\n        string.flush();\r\n\r\n        this.methods.add( string.toString() );\r\n\r\n        template = this.cfg.getTemplate( \"returnValueInvoker.ftl\" );\r\n        string = new StringWriter();\r\n        template.process( root,\r\n                          string );\r\n        string.flush();\r\n\r\n        String invokerClassName = ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\";\r\n        this.invokeables.put( invokerClassName,\r\n                              string.toString() );\r\n        this.referenceLookups.put( this.pkg.getName() + \".\" + invokerClassName,\r\n                                   returnValueConstraint );\r\n    }","id":10739,"modified_method":"private void build(Column column,\r\n                       ReturnValueDescr returnValueDescr) {\r\n        String classMethodName = \"returnValue\" + counter++;\r\n        returnValueDescr.setClassMethodName( classMethodName );\r\n\r\n        List usedDeclarations = getUsedDeclarations( returnValueDescr,\r\n                                                     returnValueDescr.getText() );\r\n        if ( usedDeclarations == null ) {\r\n            return;\r\n        }\r\n\r\n        Declaration[] declarations = new Declaration[usedDeclarations.size()];\r\n        for ( int i = 0, size = usedDeclarations.size(); i < size; i++ ) {\r\n            declarations[i] = (Declaration) this.declarations.get( (String) usedDeclarations.get( i ) );\r\n        }\r\n\r\n        Class clazz = ((ClassObjectType) column.getObjectType()).getClassType();\r\n        FieldExtractor extractor = getFieldExtractor( returnValueDescr,\r\n                                                      clazz,\r\n                                                      returnValueDescr.getFieldName() );\r\n        if ( extractor == null ) {\r\n            return;\r\n        }\r\n\r\n        Evaluator evaluator = getEvaluator( returnValueDescr,\r\n                                            extractor.getObjectType().getValueType(),\r\n                                            returnValueDescr.getEvaluator() );\r\n        if ( evaluator == null ) {\r\n            return;\r\n        }\r\n\r\n        ReturnValueConstraint returnValueConstraint = new ReturnValueConstraint( extractor,\r\n                                                                                 declarations,\r\n                                                                                 evaluator );\r\n        column.addConstraint( returnValueConstraint );\r\n\r\n        StringTemplate st = ruleGroup.getInstanceOf( \"returnValueMethod\" );\r\n\r\n        setStringTemplateAttributes( st,\r\n                                     declarations,\r\n                                     returnValueDescr.getText() );\r\n\r\n        st.setAttribute( \"methodName\",\r\n                         classMethodName );\r\n        st.setAttribute( \"text\",\r\n                         returnValueDescr.getText() );\r\n\r\n        this.methods.add( st.toString() );\r\n\r\n        st = invokerGroup.getInstanceOf( \"returnValueInvoker\" );\r\n\r\n        st.setAttribute( \"package\",\r\n                         this.pkg.getName() );\r\n        st.setAttribute( \"ruleClassName\",\r\n                         ucFirst( this.ruleDescr.getClassName() ) );\r\n        st.setAttribute( \"invokerClassName\",\r\n                         ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\" );\r\n        st.setAttribute( \"methodName\",\r\n                         classMethodName );\r\n\r\n        setStringTemplateAttributes( st,\r\n                                     declarations,\r\n                                     returnValueDescr.getText() );\r\n\r\n        st.setAttribute( \"methodName\",\r\n                         classMethodName );\r\n        st.setAttribute( \"text\",\r\n                         returnValueDescr.getText() );\r\n\r\n        String invokerClassName = ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\";\r\n        this.invokers.put( invokerClassName,\r\n                           st.toString() );\r\n        this.invokerLookups.put( this.pkg.getName() + \".\" + invokerClassName,\r\n                                 returnValueConstraint );\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"private void build(ConditionalElement ce,\r\n                       ColumnDescr columnDescr) throws IOException,\r\n                                               TemplateException,\r\n                                               TokenStreamException,\r\n                                               RecognitionException,\r\n                                               ClassNotFoundException,\r\n                                               IntrospectionException,\r\n                                               InvalidRuleException {\r\n        Class clazz = Class.forName( columnDescr.getObjectType() );\r\n        Column column;\r\n        if ( columnDescr.getIdentifier() != null && !columnDescr.getIdentifier().equals( \"\" ) ) {\r\n            column = new Column( columnCounter++,\r\n                                 new ClassObjectType( clazz ),\r\n                                 columnDescr.getIdentifier() );;\r\n            this.declarations.put( column.getDeclaration().getIdentifier(),\r\n                                   column.getDeclaration() );\r\n        } else {\r\n            column = new Column( columnCounter++,\r\n                                 new ClassObjectType( clazz ) );\r\n        }\r\n\r\n        for ( Iterator it = columnDescr.getDescrs().iterator(); it.hasNext(); ) {\r\n            Object object = it.next();\r\n            if ( object instanceof FieldBindingDescr ) {\r\n                build( column,\r\n                       (FieldBindingDescr) object );\r\n            } else if ( object instanceof LiteralDescr ) {\r\n                build( column,\r\n                       (LiteralDescr) object );\r\n            } else if ( object instanceof BoundVariableDescr ) {\r\n                build( column,\r\n                       (BoundVariableDescr) object );\r\n            } else if ( object instanceof ReturnValueDescr ) {\r\n                build( column,\r\n                       (ReturnValueDescr) object );\r\n            } else if ( object instanceof PredicateDescr ) {\r\n                build( column,\r\n                       (PredicateDescr) object );\r\n            }\r\n        }\r\n\r\n        ce.addChild( column );\r\n    }","id":10740,"modified_method":"private void build(ConditionalElement ce,\r\n                       ColumnDescr columnDescr) {\r\n        if ( columnDescr.getObjectType() == null || columnDescr.getObjectType().equals( \"\" ) ) {\r\n            this.results.add( new BuilderResult( columnDescr,\r\n                                                 null,\r\n                                                 \"ObjectType not correctly defined\" ) );\r\n            return;\r\n        }\r\n\r\n        Class clazz = null;\r\n\r\n        try {\r\n            clazz = Class.forName( columnDescr.getObjectType() );\r\n        } catch ( ClassNotFoundException e ) {\r\n            this.results.add( new BuilderResult( columnDescr,\r\n                                                 null,\r\n                                                 \"Unable to resolve ObjectType '\" + columnDescr.getObjectType() + \"'\" ) );\r\n            return;\r\n        }\r\n\r\n        Column column;\r\n        if ( columnDescr.getIdentifier() != null && !columnDescr.getIdentifier().equals( \"\" ) ) {\r\n            column = new Column( columnCounter++,\r\n                                 new ClassObjectType( clazz ),\r\n                                 columnDescr.getIdentifier() );;\r\n            this.declarations.put( column.getDeclaration().getIdentifier(),\r\n                                   column.getDeclaration() );\r\n        } else {\r\n            column = new Column( columnCounter++,\r\n                                 new ClassObjectType( clazz ) );\r\n        }\r\n\r\n        for ( Iterator it = columnDescr.getDescrs().iterator(); it.hasNext(); ) {\r\n            Object object = it.next();\r\n            if ( object instanceof FieldBindingDescr ) {\r\n                build( column,\r\n                       (FieldBindingDescr) object );\r\n            } else if ( object instanceof LiteralDescr ) {\r\n                build( column,\r\n                       (LiteralDescr) object );\r\n            } else if ( object instanceof BoundVariableDescr ) {\r\n                build( column,\r\n                       (BoundVariableDescr) object );\r\n            } else if ( object instanceof ReturnValueDescr ) {\r\n                build( column,\r\n                       (ReturnValueDescr) object );\r\n            } else if ( object instanceof PredicateDescr ) {\r\n                build( column,\r\n                       (PredicateDescr) object );\r\n            }\r\n        }\r\n\r\n        ce.addChild( column );\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"private void build(ConditionalElement ce,\r\n                       EvalDescr evalDescr) throws TokenStreamException,\r\n                                           RecognitionException,\r\n                                           IOException,\r\n                                           TemplateException,\r\n                                           InvalidRuleException {\r\n        // generate method\r\n        // generate invoker\r\n        Map root = new HashMap();\r\n\r\n        String classMethodName = \"eval\" + counter++;\r\n        evalDescr.setClassMethodName( classMethodName );\r\n\r\n        root.put( \"package\",\r\n                  this.pkg.getName() );\r\n        root.put( \"ruleClassName\",\r\n                  ucFirst( this.ruleDescr.getClassName() ) );\r\n        root.put( \"invokerClassName\",\r\n                  ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\" );\r\n        root.put( \"methodName\",\r\n                  classMethodName );\r\n\r\n        List usedDeclarations = this.analyzer.analyze( evalDescr.getText(),\r\n                                                       this.declarations.keySet() );\r\n\r\n        Declaration[] declarations = new Declaration[usedDeclarations.size()];\r\n        for ( int i = 0, size = usedDeclarations.size(); i < size; i++ ) {\r\n            declarations[i] = (Declaration) this.declarations.get( (String) usedDeclarations.get( i ) );\r\n        }\r\n\r\n        root.put( \"declarations\",\r\n                  declarations );\r\n\r\n        root.put( \"globals\",\r\n                  getUsedGlobals( evalDescr.getText() ) );\r\n\r\n        root.put( \"globalTypes\",\r\n                  this.pkg.getGlobals() );\r\n\r\n        root.put( \"text\",\r\n                  evalDescr.getText() );\r\n\r\n        EvalCondition eval = new EvalCondition( declarations );\r\n        ce.addChild( eval );\r\n\r\n        Template template = this.cfg.getTemplate( \"evalMethod.ftl\" );\r\n        StringWriter string = new StringWriter();\r\n        template.process( root,\r\n                          string );\r\n        string.flush();\r\n        this.methods.add( string.toString() );\r\n\r\n        template = this.cfg.getTemplate( \"evalInvoker.ftl\" );\r\n        string = new StringWriter();\r\n        template.process( root,\r\n                          string );\r\n        string.flush();\r\n\r\n        String invokerClassName = ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\";\r\n        this.invokeables.put( invokerClassName,\r\n                              string.toString() );\r\n        this.referenceLookups.put( this.pkg.getName() + \".\" + invokerClassName,\r\n                                   eval );\r\n    }","id":10741,"modified_method":"private void build(ConditionalElement ce,\r\n                       EvalDescr evalDescr) {\r\n\r\n        String classMethodName = \"eval\" + counter++;\r\n        evalDescr.setClassMethodName( classMethodName );\r\n\r\n        List usedDeclarations = getUsedDeclarations( evalDescr,\r\n                                                     evalDescr.getText() );\r\n        if ( usedDeclarations == null ) {\r\n            return;\r\n        }\r\n\r\n        Declaration[] declarations = new Declaration[usedDeclarations.size()];\r\n        for ( int i = 0, size = usedDeclarations.size(); i < size; i++ ) {\r\n            declarations[i] = (Declaration) this.declarations.get( (String) usedDeclarations.get( i ) );\r\n        }\r\n\r\n        EvalCondition eval = new EvalCondition( declarations );\r\n        ce.addChild( eval );\r\n\r\n        StringTemplate st = ruleGroup.getInstanceOf( \"evalMethod\" );\r\n\r\n        setStringTemplateAttributes( st,\r\n                                     declarations,\r\n                                     evalDescr.getText() );\r\n\r\n        st.setAttribute( \"methodName\",\r\n                         classMethodName );\r\n        st.setAttribute( \"text\",\r\n                         evalDescr.getText() );\r\n\r\n        this.methods.add( st.toString() );\r\n\r\n        st = invokerGroup.getInstanceOf( \"evalInvoker\" );\r\n\r\n        st.setAttribute( \"package\",\r\n                         this.pkg.getName() );\r\n        st.setAttribute( \"ruleClassName\",\r\n                         ucFirst( this.ruleDescr.getClassName() ) );\r\n        st.setAttribute( \"invokerClassName\",\r\n                         ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\" );\r\n        st.setAttribute( \"methodName\",\r\n                         classMethodName );\r\n\r\n        setStringTemplateAttributes( st,\r\n                                     declarations,\r\n                                     evalDescr.getText() );\r\n\r\n        st.setAttribute( \"methodName\",\r\n                         classMethodName );\r\n        st.setAttribute( \"text\",\r\n                         evalDescr.getText() );\r\n\r\n        String invokerClassName = ruleDescr.getClassName() + ucFirst( classMethodName ) + \"Invoker\";\r\n        this.invokers.put( invokerClassName,\r\n                           st.toString() );\r\n        this.invokerLookups.put( this.pkg.getName() + \".\" + invokerClassName,\r\n                                 eval );\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"private void build(Column column,\r\n                       BoundVariableDescr boundVariable) {\r\n\r\n        boundVariable.getDeclarationIdentifier();\r\n\r\n        Class clazz = ((ClassObjectType) column.getObjectType()).getClassType();\r\n\r\n        FieldExtractor extractor = new ClassFieldExtractor( clazz,\r\n                                                            boundVariable.getFieldName() );\r\n\r\n        Declaration declaration = (Declaration) this.declarations.get( boundVariable.getDeclarationIdentifier() );\r\n\r\n        Evaluator evaluator = EvaluatorFactory.getEvaluator( declaration.getObjectType().getValueType(),\r\n                                                             boundVariable.getEvaluator() );\r\n\r\n        column.addConstraint( new BoundVariableConstraint( extractor,\r\n                                                           declaration,\r\n                                                           evaluator ) );\r\n    }","id":10742,"modified_method":"private void build(Column column,\r\n                       BoundVariableDescr boundVariableDescr) {\r\n        if ( boundVariableDescr.getDeclarationIdentifier() == null || boundVariableDescr.getDeclarationIdentifier().equals( \"\" ) ) {\r\n            this.results.add( new BuilderResult( boundVariableDescr,\r\n                                                 null,\r\n                                                 \"Identifier not defined for binding field '\" + boundVariableDescr.getFieldName() ) + \"'\" );\r\n            return;\r\n        }\r\n\r\n        Class clazz = ((ClassObjectType) column.getObjectType()).getClassType();\r\n\r\n        FieldExtractor extractor = getFieldExtractor( boundVariableDescr,\r\n                                                      clazz,\r\n                                                      boundVariableDescr.getFieldName() );\r\n        if ( extractor == null ) {\r\n            return;\r\n        }\r\n\r\n        Declaration declaration = (Declaration) this.declarations.get( boundVariableDescr.getDeclarationIdentifier() );\r\n\r\n        if ( declaration == null ) {\r\n            this.results.add( new BuilderResult( boundVariableDescr,\r\n                                                 null,\r\n                                                 \"Unable to return Declaration for identifier '\" + boundVariableDescr.getDeclarationIdentifier() ) + \"'\" );\r\n            return;\r\n        }\r\n\r\n        Evaluator evaluator = getEvaluator( boundVariableDescr,\r\n                                            declaration.getObjectType().getValueType(),\r\n                                            boundVariableDescr.getEvaluator() );\r\n        if ( evaluator == null ) {\r\n            return;\r\n        }\r\n\r\n        column.addConstraint( new BoundVariableConstraint( extractor,\r\n                                                           declaration,\r\n                                                           evaluator ) );\r\n    }","commit_id":"828614d8b90b0dad4f5a52d0cb9dca07384b1935","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException {\n    PyIfStatement expression =\n          PsiTreeUtil.getParentOfType(file.findElementAt(editor.getCaretModel().getOffset()), PyIfStatement.class);\n    PyIfStatement ifStatement = getIfStatement(expression);\n\n    PyStatement firstStatement = getFirstStatement(ifStatement);\n\n    if (firstStatement != null && firstStatement instanceof PyIfStatement) {\n      PyExpression condition = ((PyIfStatement)firstStatement).getIfPart().getCondition();\n      PyElementGenerator elementGenerator = PyElementGenerator.getInstance(project);\n      PyExpression newCondition = elementGenerator.createExpressionFromText(\n                    ifStatement.getIfPart().getCondition().getText() + \" and \" + condition.getText());\n      ifStatement.getIfPart().getCondition().replace(newCondition);\n\n      PyStatementList stList = ((PyIfStatement)firstStatement).getIfPart().getStatementList();\n      PyStatementList ifStatementList = ifStatement.getIfPart().getStatementList();\n\n      List<PsiComment> comments = PsiTreeUtil.getChildrenOfTypeAsList(ifStatement.getIfPart(), PsiComment.class);\n      comments.addAll(PsiTreeUtil.getChildrenOfTypeAsList(((PyIfStatement)firstStatement).getIfPart(), PsiComment.class));\n      comments.addAll(PsiTreeUtil.getChildrenOfTypeAsList(ifStatementList, PsiComment.class));\n      comments.addAll(PsiTreeUtil.getChildrenOfTypeAsList(stList, PsiComment.class));\n\n      for (PsiElement comm : comments) {\n        ifStatement.getIfPart().addBefore(comm, ifStatementList);\n        comm.delete();\n      }\n      ifStatementList.replace(stList);\n    }\n  }","id":10743,"modified_method":"public void invoke(@NotNull Project project, Editor editor, PsiFile file) throws IncorrectOperationException {\n    PyIfStatement expression =\n          PsiTreeUtil.getParentOfType(file.findElementAt(editor.getCaretModel().getOffset()), PyIfStatement.class);\n    PyIfStatement ifStatement = getIfStatement(expression);\n\n    PyStatement firstStatement = getFirstStatement(ifStatement);\n    if (ifStatement == null) return;\n    if (firstStatement != null && firstStatement instanceof PyIfStatement) {\n      PyExpression condition = ((PyIfStatement)firstStatement).getIfPart().getCondition();\n      PyElementGenerator elementGenerator = PyElementGenerator.getInstance(project);\n      PyExpression ifCondition = ifStatement.getIfPart().getCondition();\n      if (ifCondition == null || condition == null) return;\n      StringBuilder replacementText = new StringBuilder(ifCondition.getText() + \" and \");\n      if (condition instanceof PyBinaryExpression && ((PyBinaryExpression)condition).getOperator() == PyTokenTypes.OR_KEYWORD) {\n        replacementText.append(\"(\").append(condition.getText()).append(\")\");\n      } else\n        replacementText.append(condition.getText());\n\n      PyExpression newCondition = elementGenerator.createExpressionFromText(replacementText.toString());\n      ifCondition.replace(newCondition);\n\n      PyStatementList stList = ((PyIfStatement)firstStatement).getIfPart().getStatementList();\n      PyStatementList ifStatementList = ifStatement.getIfPart().getStatementList();\n      if (ifStatementList == null || stList == null) return;\n      List<PsiComment> comments = PsiTreeUtil.getChildrenOfTypeAsList(ifStatement.getIfPart(), PsiComment.class);\n      comments.addAll(PsiTreeUtil.getChildrenOfTypeAsList(((PyIfStatement)firstStatement).getIfPart(), PsiComment.class));\n      comments.addAll(PsiTreeUtil.getChildrenOfTypeAsList(ifStatementList, PsiComment.class));\n      comments.addAll(PsiTreeUtil.getChildrenOfTypeAsList(stList, PsiComment.class));\n\n      for (PsiElement comm : comments) {\n        ifStatement.getIfPart().addBefore(comm, ifStatementList);\n        comm.delete();\n      }\n      ifStatementList.replace(stList);\n    }\n  }","commit_id":"d08bdb75bb1ec9cb14cf7b017245e9c0ac45703c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void startRefreshThread() {\n    refreshThread = new Thread(\"queue-cache-refresh\") {\n      @Override\n      public void run() {\n        while (!isInterrupted()) {\n          updateConfig();\n          long now = System.currentTimeMillis();\n          if (now > (lastUpdated + configCacheUpdateFrequency)) {\n            try {\n              updateCache();\n            } catch (TableNotFoundException e) {\n              // This is expected when the namespace goes away since there is one config table per namespace\n              // If the table is not found due to other situation, the region observer already\n              // has logic to get a new one through the getInstance method\n              LOG.warn(\"Queue config table not found: {}\", Bytes.toString(queueConfigTableName), e);\n              break;\n            } catch (IOException e) {\n              LOG.warn(\"Error updating queue consumer config cache\", e);\n            }\n          }\n          try {\n            Thread.sleep(1000);\n          } catch (InterruptedException ie) {\n            // reset status\n            interrupt();\n            break;\n          }\n        }\n        LOG.info(\"Config cache update for {} terminated.\", Bytes.toString(queueConfigTableName));\n        INSTANCES.remove(queueConfigTableName, this);\n      }\n    };\n    refreshThread.setDaemon(true);\n    refreshThread.start();\n  }","id":10744,"modified_method":"private void startRefreshThread() {\n    refreshThread = new Thread(\"queue-cache-refresh\") {\n      @Override\n      public void run() {\n        while (!isInterrupted()) {\n          updateConfig();\n          long now = System.currentTimeMillis();\n          if (now > (lastUpdated + configCacheUpdateFrequency)) {\n            try {\n              updateCache();\n            } catch (TableNotFoundException e) {\n              // This is expected when the namespace goes away since there is one config table per namespace\n              // If the table is not found due to other situation, the region observer already\n              // has logic to get a new one through the getInstance method\n              LOG.warn(\"Queue config table not found: {}\", queueConfigTableName, e);\n              break;\n            } catch (IOException e) {\n              LOG.warn(\"Error updating queue consumer config cache\", e);\n            }\n          }\n          try {\n            Thread.sleep(1000);\n          } catch (InterruptedException ie) {\n            // reset status\n            interrupt();\n            break;\n          }\n        }\n        LOG.info(\"Config cache update for {} terminated.\", queueConfigTableName);\n        INSTANCES.remove(queueConfigTableName, this);\n      }\n    };\n    refreshThread.setDaemon(true);\n    refreshThread.start();\n  }","commit_id":"02e5c3cff91f0b2044c9c7c7e7e57017de5f49b8","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * This forces an immediate update of the config cache. It should only be called from the refresh thread or from\n   * tests, to avoid having to add a sleep for the duration of the refresh interval.\n   *\n   * This method is synchronized to protect from race conditions if called directly from a test. Otherwise this is\n   * only called from the refresh thread, and there will not be concurrent invocations.\n   *\n   * @throws IOException if failed to update config cache\n   */\n  @VisibleForTesting\n  public synchronized void updateCache() throws IOException {\n    Map<byte[], QueueConsumerConfig> newCache = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n    long now = System.currentTimeMillis();\n    TransactionSnapshot txSnapshot = transactionSnapshotSupplier.get();\n    if (txSnapshot == null) {\n      LOG.debug(\"No transaction snapshot is available. Not updating the consumer config cache.\");\n      return;\n    }\n\n    HTable table = new HTable(hConf, queueConfigTableName);\n    try {\n      // Scan the table with the transaction snapshot\n      Scan scan = new Scan();\n      scan.addFamily(QueueEntryRow.COLUMN_FAMILY);\n      Transaction tx = TxUtils.createDummyTransaction(txSnapshot);\n      setScanAttribute(scan, TxConstants.TX_OPERATION_ATTRIBUTE_KEY, txCodec.encode(tx));\n      ResultScanner scanner = table.getScanner(scan);\n      int configCnt = 0;\n      for (Result result : scanner) {\n        if (!result.isEmpty()) {\n          NavigableMap<byte[], byte[]> familyMap = result.getFamilyMap(QueueEntryRow.COLUMN_FAMILY);\n          if (familyMap != null) {\n            configCnt++;\n            Map<ConsumerInstance, byte[]> consumerInstances = new HashMap<>();\n            // Gather the startRow of all instances across all consumer groups.\n            int numGroups = 0;\n            Long groupId = null;\n            for (Map.Entry<byte[], byte[]> entry : familyMap.entrySet()) {\n              if (entry.getKey().length != STATE_COLUMN_SIZE) {\n                continue;\n              }\n              long gid = Bytes.toLong(entry.getKey());\n              int instanceId = Bytes.toInt(entry.getKey(), Bytes.SIZEOF_LONG);\n              consumerInstances.put(new ConsumerInstance(gid, instanceId), entry.getValue());\n\n              // Columns are sorted by groupId, hence if it change, then numGroups would get +1\n              if (groupId == null || groupId != gid) {\n                numGroups++;\n                groupId = gid;\n              }\n            }\n            byte[] queueName = result.getRow();\n            newCache.put(queueName, new QueueConsumerConfig(consumerInstances, numGroups));\n          }\n        }\n      }\n      long elapsed = System.currentTimeMillis() - now;\n      this.configCache = newCache;\n      this.lastUpdated = now;\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Updated consumer config cache with {} entries, took {} msec\", configCnt, elapsed);\n      }\n    } finally {\n      try {\n        table.close();\n      } catch (IOException ioe) {\n        LOG.error(\"Error closing table {}\", Bytes.toString(queueConfigTableName), ioe);\n      }\n    }\n  }","id":10745,"modified_method":"/**\n   * This forces an immediate update of the config cache. It should only be called from the refresh thread or from\n   * tests, to avoid having to add a sleep for the duration of the refresh interval.\n   *\n   * This method is synchronized to protect from race conditions if called directly from a test. Otherwise this is\n   * only called from the refresh thread, and there will not be concurrent invocations.\n   *\n   * @throws IOException if failed to update config cache\n   */\n  @VisibleForTesting\n  public synchronized void updateCache() throws IOException {\n    Map<byte[], QueueConsumerConfig> newCache = Maps.newTreeMap(Bytes.BYTES_COMPARATOR);\n    long now = System.currentTimeMillis();\n    TransactionSnapshot txSnapshot = transactionSnapshotSupplier.get();\n    if (txSnapshot == null) {\n      LOG.debug(\"No transaction snapshot is available. Not updating the consumer config cache.\");\n      return;\n    }\n\n    HTableInterface table = hTableSupplier.getInput();\n    try {\n      // Scan the table with the transaction snapshot\n      Scan scan = new Scan();\n      scan.addFamily(QueueEntryRow.COLUMN_FAMILY);\n      Transaction tx = TxUtils.createDummyTransaction(txSnapshot);\n      setScanAttribute(scan, TxConstants.TX_OPERATION_ATTRIBUTE_KEY, txCodec.encode(tx));\n      ResultScanner scanner = table.getScanner(scan);\n      int configCnt = 0;\n      for (Result result : scanner) {\n        if (!result.isEmpty()) {\n          NavigableMap<byte[], byte[]> familyMap = result.getFamilyMap(QueueEntryRow.COLUMN_FAMILY);\n          if (familyMap != null) {\n            configCnt++;\n            Map<ConsumerInstance, byte[]> consumerInstances = new HashMap<>();\n            // Gather the startRow of all instances across all consumer groups.\n            int numGroups = 0;\n            Long groupId = null;\n            for (Map.Entry<byte[], byte[]> entry : familyMap.entrySet()) {\n              if (entry.getKey().length != STATE_COLUMN_SIZE) {\n                continue;\n              }\n              long gid = Bytes.toLong(entry.getKey());\n              int instanceId = Bytes.toInt(entry.getKey(), Bytes.SIZEOF_LONG);\n              consumerInstances.put(new ConsumerInstance(gid, instanceId), entry.getValue());\n\n              // Columns are sorted by groupId, hence if it change, then numGroups would get +1\n              if (groupId == null || groupId != gid) {\n                numGroups++;\n                groupId = gid;\n              }\n            }\n            byte[] queueName = result.getRow();\n            newCache.put(queueName, new QueueConsumerConfig(consumerInstances, numGroups));\n          }\n        }\n      }\n      long elapsed = System.currentTimeMillis() - now;\n      this.configCache = newCache;\n      this.lastUpdated = now;\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"Updated consumer config cache with {} entries, took {} msec\", configCnt, elapsed);\n      }\n    } finally {\n      try {\n        table.close();\n      } catch (IOException ioe) {\n        LOG.error(\"Error closing table {}\", queueConfigTableName, ioe);\n      }\n    }\n  }","commit_id":"02e5c3cff91f0b2044c9c7c7e7e57017de5f49b8","url":"https://github.com/caskdata/cdap"},{"original_method":"public static ConsumerConfigCache getInstance(Configuration hConf, byte[] tableName,\n                                                CConfigurationReader cConfReader,\n                                                Supplier<TransactionSnapshot> txSnapshotSupplier) {\n    ConsumerConfigCache cache = INSTANCES.get(tableName);\n    if (cache == null) {\n      cache = new ConsumerConfigCache(hConf, tableName, cConfReader, txSnapshotSupplier);\n      if (INSTANCES.putIfAbsent(tableName, cache) == null) {\n        // if another thread created an instance for the same table, that's ok, we only init the one saved\n        cache.init();\n      } else {\n        // discard our instance and re-retrieve, someone else set it\n        cache = INSTANCES.get(tableName);\n      }\n    }\n    return cache;\n  }","id":10746,"modified_method":"public static ConsumerConfigCache getInstance(TableName tableName,\n                                                CConfigurationReader cConfReader,\n                                                Supplier<TransactionSnapshot> txSnapshotSupplier,\n                                                InputSupplier<HTableInterface> hTableSupplier) {\n    ConsumerConfigCache cache = INSTANCES.get(tableName);\n    if (cache == null) {\n      cache = new ConsumerConfigCache(tableName, cConfReader, txSnapshotSupplier, hTableSupplier);\n      if (INSTANCES.putIfAbsent(tableName, cache) == null) {\n        // if another thread created an instance for the same table, that's ok, we only init the one saved\n        cache.init();\n      } else {\n        // discard our instance and re-retrieve, someone else set it\n        cache = INSTANCES.get(tableName);\n      }\n    }\n    return cache;\n  }","commit_id":"02e5c3cff91f0b2044c9c7c7e7e57017de5f49b8","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Constructs a new instance.\n   *\n   * @param hConf configuration for HBase\n   * @param queueConfigTableName table name that stores queue configuration\n   * @param cConfReader reader to read the latest {@link CConfiguration}\n   * @param transactionSnapshotSupplier A supplier for the latest {@link TransactionSnapshot}\n   */\n  ConsumerConfigCache(Configuration hConf, byte[] queueConfigTableName,\n                      CConfigurationReader cConfReader, Supplier<TransactionSnapshot> transactionSnapshotSupplier) {\n    this.hConf = hConf;\n    this.queueConfigTableName = queueConfigTableName;\n    this.cConfReader = cConfReader;\n    this.transactionSnapshotSupplier = transactionSnapshotSupplier;\n    this.txCodec = new TransactionCodec();\n  }","id":10747,"modified_method":"/**\n   * Constructs a new instance.\n   *\n   * @param queueConfigTableName table name that stores queue configuration\n   * @param cConfReader reader to read the latest {@link CConfiguration}\n   * @param transactionSnapshotSupplier A supplier for the latest {@link TransactionSnapshot}\n   * @param hTableSupplier A supplier for creating {@link HTableInterface}.\n   */\n  ConsumerConfigCache(TableName queueConfigTableName, CConfigurationReader cConfReader,\n                      Supplier<TransactionSnapshot> transactionSnapshotSupplier,\n                      InputSupplier<HTableInterface> hTableSupplier) {\n    this.queueConfigTableName = queueConfigTableName;\n    this.cConfReader = cConfReader;\n    this.transactionSnapshotSupplier = transactionSnapshotSupplier;\n    this.hTableSupplier = hTableSupplier;\n    this.txCodec = new TransactionCodec();\n  }","commit_id":"02e5c3cff91f0b2044c9c7c7e7e57017de5f49b8","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public boolean next(List<Cell> results, int limit) throws IOException {\n      boolean hasNext = scanner.next(results, limit);\n\n      while (!results.isEmpty()) {\n        totalRows++;\n        // Check if it is eligible for eviction.\n        Cell cell = results.get(0);\n\n        // If current queue is unknown or the row is not a queue entry of current queue,\n        // it either because it scans into next queue entry or simply current queue is not known.\n        // Hence needs to find the currentQueue\n        if (currentQueue == null || !QueueEntryRow.isQueueEntry(currentQueueRowPrefix, prefixBytes, cell.getRowArray(),\n                                                                cell.getRowOffset(), cell.getRowLength())) {\n          // If not eligible, it either because it scans into next queue entry or simply current queue is not known.\n          currentQueue = null;\n        }\n\n        // This row is a queue entry. If currentQueue is null, meaning it's a new queue encountered during scan.\n        if (currentQueue == null) {\n          QueueName queueName = QueueEntryRow.getQueueName(namespaceId, appName, flowName, prefixBytes,\n                                                           cell.getRowArray(), cell.getRowOffset(),\n                                                           cell.getRowLength());\n          currentQueue = queueName.toBytes();\n          currentQueueRowPrefix = QueueEntryRow.getQueueRowPrefix(queueName);\n          consumerConfig = getConfigCache().getConsumerConfig(currentQueue);\n        }\n\n        if (consumerConfig == null) {\n          // no config is present yet, so cannot evict\n          return hasNext;\n        }\n\n        if (canEvict(consumerConfig, results)) {\n          rowsEvicted++;\n          results.clear();\n          hasNext = scanner.next(results, limit);\n        } else {\n          break;\n        }\n      }\n\n      return hasNext;\n    }","id":10748,"modified_method":"@Override\n    public boolean next(List<Cell> results, int limit) throws IOException {\n      boolean hasNext = scanner.next(results, limit);\n\n      while (!results.isEmpty()) {\n        totalRows++;\n        // Check if it is eligible for eviction.\n        Cell cell = results.get(0);\n\n        // If current queue is unknown or the row is not a queue entry of current queue,\n        // it either because it scans into next queue entry or simply current queue is not known.\n        // Hence needs to find the currentQueue\n        if (currentQueue == null || !QueueEntryRow.isQueueEntry(currentQueueRowPrefix, prefixBytes, cell.getRowArray(),\n                                                                cell.getRowOffset(), cell.getRowLength())) {\n          // If not eligible, it either because it scans into next queue entry or simply current queue is not known.\n          currentQueue = null;\n        }\n\n        // This row is a queue entry. If currentQueue is null, meaning it's a new queue encountered during scan.\n        if (currentQueue == null) {\n          QueueName queueName = QueueEntryRow.getQueueName(namespaceId, appName, flowName, prefixBytes,\n                                                           cell.getRowArray(), cell.getRowOffset(),\n                                                           cell.getRowLength());\n          currentQueue = queueName.toBytes();\n          currentQueueRowPrefix = QueueEntryRow.getQueueRowPrefix(queueName);\n          consumerConfig = getConfigCache(env).getConsumerConfig(currentQueue);\n        }\n\n        if (consumerConfig == null) {\n          // no config is present yet, so cannot evict\n          return hasNext;\n        }\n\n        if (canEvict(consumerConfig, results)) {\n          rowsEvicted++;\n          results.clear();\n          hasNext = scanner.next(results, limit);\n        } else {\n          break;\n        }\n      }\n\n      return hasNext;\n    }","commit_id":"02e5c3cff91f0b2044c9c7c7e7e57017de5f49b8","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void start(CoprocessorEnvironment env) {\n    if (env instanceof RegionCoprocessorEnvironment) {\n      HTableDescriptor tableDesc = ((RegionCoprocessorEnvironment) env).getRegion().getTableDesc();\n      String hTableName = tableDesc.getNameAsString();\n\n      String prefixBytes = tableDesc.getValue(HBaseQueueAdmin.PROPERTY_PREFIX_BYTES);\n      try {\n        // Default to SALT_BYTES for the older salted queue implementation.\n        this.prefixBytes = prefixBytes == null ? SaltedHBaseQueueStrategy.SALT_BYTES : Integer.parseInt(prefixBytes);\n      } catch (NumberFormatException e) {\n        // Shouldn't happen for table created by cdap.\n        LOG.error(\"Unable to parse value of '\" + HBaseQueueAdmin.PROPERTY_PREFIX_BYTES + \"' property. \" +\n                    \"Default to \" + SaltedHBaseQueueStrategy.SALT_BYTES, e);\n        this.prefixBytes = SaltedHBaseQueueStrategy.SALT_BYTES;\n      }\n\n      HTable98NameConverter nameConverter = new HTable98NameConverter();\n      namespaceId = nameConverter.from(tableDesc).getNamespace().getId();\n      appName = HBaseQueueAdmin.getApplicationName(hTableName);\n      flowName = HBaseQueueAdmin.getFlowName(hTableName);\n\n      conf = env.getConfiguration();\n      String hbaseNamespacePrefix = nameConverter.getNamespacePrefix(tableDesc);\n      TableId queueConfigTableId = HBaseQueueAdmin.getConfigTableId(namespaceId);\n      final String sysConfigTablePrefix = nameConverter.getSysConfigTablePrefix(tableDesc);\n      txStateCache = new DefaultTransactionStateCacheSupplier(sysConfigTablePrefix, conf).get();\n      txSnapshotSupplier = new Supplier<TransactionSnapshot>() {\n        @Override\n        public TransactionSnapshot get() {\n          return txStateCache.getLatestState();\n        }\n      };\n      configTableNameBytes = nameConverter.toTableName(hbaseNamespacePrefix, queueConfigTableId).getName();\n      cConfReader = new CConfigurationReader(conf, sysConfigTablePrefix);\n      configCache = ConsumerConfigCache.getInstance(conf, configTableNameBytes, cConfReader, txSnapshotSupplier);\n    }\n  }","id":10749,"modified_method":"@Override\n  public void start(CoprocessorEnvironment env) {\n    if (env instanceof RegionCoprocessorEnvironment) {\n      HTableDescriptor tableDesc = ((RegionCoprocessorEnvironment) env).getRegion().getTableDesc();\n      String hTableName = tableDesc.getNameAsString();\n\n      String prefixBytes = tableDesc.getValue(HBaseQueueAdmin.PROPERTY_PREFIX_BYTES);\n      try {\n        // Default to SALT_BYTES for the older salted queue implementation.\n        this.prefixBytes = prefixBytes == null ? SaltedHBaseQueueStrategy.SALT_BYTES : Integer.parseInt(prefixBytes);\n      } catch (NumberFormatException e) {\n        // Shouldn't happen for table created by cdap.\n        LOG.error(\"Unable to parse value of '\" + HBaseQueueAdmin.PROPERTY_PREFIX_BYTES + \"' property. \" +\n                    \"Default to \" + SaltedHBaseQueueStrategy.SALT_BYTES, e);\n        this.prefixBytes = SaltedHBaseQueueStrategy.SALT_BYTES;\n      }\n\n      HTable98NameConverter nameConverter = new HTable98NameConverter();\n      namespaceId = nameConverter.from(tableDesc).getNamespace().getId();\n      appName = HBaseQueueAdmin.getApplicationName(hTableName);\n      flowName = HBaseQueueAdmin.getFlowName(hTableName);\n\n      Configuration conf = env.getConfiguration();\n      String hbaseNamespacePrefix = nameConverter.getNamespacePrefix(tableDesc);\n      TableId queueConfigTableId = HBaseQueueAdmin.getConfigTableId(namespaceId);\n      final String sysConfigTablePrefix = nameConverter.getSysConfigTablePrefix(tableDesc);\n      txStateCache = new DefaultTransactionStateCacheSupplier(sysConfigTablePrefix, conf).get();\n      txSnapshotSupplier = new Supplier<TransactionSnapshot>() {\n        @Override\n        public TransactionSnapshot get() {\n          return txStateCache.getLatestState();\n        }\n      };\n      configTableName = nameConverter.toTableName(hbaseNamespacePrefix, queueConfigTableId);\n      cConfReader = new CConfigurationReader(conf, sysConfigTablePrefix);\n      configCache = createConfigCache(env);\n    }\n  }","commit_id":"02e5c3cff91f0b2044c9c7c7e7e57017de5f49b8","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public boolean next(List<Cell> results, int limit) throws IOException {\n      boolean hasNext = scanner.next(results, limit);\n\n      while (!results.isEmpty()) {\n        totalRows++;\n        // Check if it is eligible for eviction.\n        Cell cell = results.get(0);\n\n        // If current queue is unknown or the row is not a queue entry of current queue,\n        // it either because it scans into next queue entry or simply current queue is not known.\n        // Hence needs to find the currentQueue\n        if (currentQueue == null || !QueueEntryRow.isQueueEntry(currentQueueRowPrefix, prefixBytes, cell.getRowArray(),\n                                                                cell.getRowOffset(), cell.getRowLength())) {\n          // If not eligible, it either because it scans into next queue entry or simply current queue is not known.\n          currentQueue = null;\n        }\n\n        // This row is a queue entry. If currentQueue is null, meaning it's a new queue encountered during scan.\n        if (currentQueue == null) {\n          QueueName queueName = QueueEntryRow.getQueueName(namespaceId, appName, flowName, prefixBytes,\n                                                           cell.getRowArray(), cell.getRowOffset(),\n                                                           cell.getRowLength());\n          currentQueue = queueName.toBytes();\n          currentQueueRowPrefix = QueueEntryRow.getQueueRowPrefix(queueName);\n          consumerConfig = getConfigCache().getConsumerConfig(currentQueue);\n        }\n\n        if (consumerConfig == null) {\n          // no config is present yet, so cannot evict\n          return hasNext;\n        }\n\n        if (canEvict(consumerConfig, results)) {\n          rowsEvicted++;\n          results.clear();\n          hasNext = scanner.next(results, limit);\n        } else {\n          break;\n        }\n      }\n\n      return hasNext;\n    }","id":10750,"modified_method":"@Override\n    public boolean next(List<Cell> results, int limit) throws IOException {\n      boolean hasNext = scanner.next(results, limit);\n\n      while (!results.isEmpty()) {\n        totalRows++;\n        // Check if it is eligible for eviction.\n        Cell cell = results.get(0);\n\n        // If current queue is unknown or the row is not a queue entry of current queue,\n        // it either because it scans into next queue entry or simply current queue is not known.\n        // Hence needs to find the currentQueue\n        if (currentQueue == null || !QueueEntryRow.isQueueEntry(currentQueueRowPrefix, prefixBytes, cell.getRowArray(),\n                                                                cell.getRowOffset(), cell.getRowLength())) {\n          // If not eligible, it either because it scans into next queue entry or simply current queue is not known.\n          currentQueue = null;\n        }\n\n        // This row is a queue entry. If currentQueue is null, meaning it's a new queue encountered during scan.\n        if (currentQueue == null) {\n          QueueName queueName = QueueEntryRow.getQueueName(namespaceId, appName, flowName, prefixBytes,\n                                                           cell.getRowArray(), cell.getRowOffset(),\n                                                           cell.getRowLength());\n          currentQueue = queueName.toBytes();\n          currentQueueRowPrefix = QueueEntryRow.getQueueRowPrefix(queueName);\n          consumerConfig = getConfigCache(env).getConsumerConfig(currentQueue);\n        }\n\n        if (consumerConfig == null) {\n          // no config is present yet, so cannot evict\n          return hasNext;\n        }\n\n        if (canEvict(consumerConfig, results)) {\n          rowsEvicted++;\n          results.clear();\n          hasNext = scanner.next(results, limit);\n        } else {\n          break;\n        }\n      }\n\n      return hasNext;\n    }","commit_id":"02e5c3cff91f0b2044c9c7c7e7e57017de5f49b8","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void start(CoprocessorEnvironment env) {\n    if (env instanceof RegionCoprocessorEnvironment) {\n      HTableDescriptor tableDesc = ((RegionCoprocessorEnvironment) env).getRegion().getTableDesc();\n      String hTableName = tableDesc.getNameAsString();\n\n      String prefixBytes = tableDesc.getValue(HBaseQueueAdmin.PROPERTY_PREFIX_BYTES);\n      try {\n        // Default to SALT_BYTES for the older salted queue implementation.\n        this.prefixBytes = prefixBytes == null ? SaltedHBaseQueueStrategy.SALT_BYTES : Integer.parseInt(prefixBytes);\n      } catch (NumberFormatException e) {\n        // Shouldn't happen for table created by cdap.\n        LOG.error(\"Unable to parse value of '\" + HBaseQueueAdmin.PROPERTY_PREFIX_BYTES + \"' property. \" +\n                    \"Default to \" + SaltedHBaseQueueStrategy.SALT_BYTES, e);\n        this.prefixBytes = SaltedHBaseQueueStrategy.SALT_BYTES;\n      }\n\n      HTable10CDHNameConverter nameConverter = new HTable10CDHNameConverter();\n      namespaceId = nameConverter.from(tableDesc).getNamespace().getId();\n      appName = HBaseQueueAdmin.getApplicationName(hTableName);\n      flowName = HBaseQueueAdmin.getFlowName(hTableName);\n\n      conf = env.getConfiguration();\n      String hbaseNamespacePrefix = nameConverter.getNamespacePrefix(tableDesc);\n      TableId queueConfigTableId = HBaseQueueAdmin.getConfigTableId(namespaceId);\n      final String sysConfigTablePrefix = nameConverter.getSysConfigTablePrefix(tableDesc);\n      txStateCache = new DefaultTransactionStateCacheSupplier(sysConfigTablePrefix, conf).get();\n      txSnapshotSupplier = new Supplier<TransactionSnapshot>() {\n        @Override\n        public TransactionSnapshot get() {\n          return txStateCache.getLatestState();\n        }\n      };\n      configTableNameBytes = nameConverter.toTableName(hbaseNamespacePrefix, queueConfigTableId).getName();\n      cConfReader = new CConfigurationReader(conf, sysConfigTablePrefix);\n      configCache = ConsumerConfigCache.getInstance(conf, configTableNameBytes, cConfReader, txSnapshotSupplier);\n    }\n  }","id":10751,"modified_method":"@Override\n  public void start(CoprocessorEnvironment env) {\n    if (env instanceof RegionCoprocessorEnvironment) {\n      HTableDescriptor tableDesc = ((RegionCoprocessorEnvironment) env).getRegion().getTableDesc();\n      String hTableName = tableDesc.getNameAsString();\n\n      String prefixBytes = tableDesc.getValue(HBaseQueueAdmin.PROPERTY_PREFIX_BYTES);\n      try {\n        // Default to SALT_BYTES for the older salted queue implementation.\n        this.prefixBytes = prefixBytes == null ? SaltedHBaseQueueStrategy.SALT_BYTES : Integer.parseInt(prefixBytes);\n      } catch (NumberFormatException e) {\n        // Shouldn't happen for table created by cdap.\n        LOG.error(\"Unable to parse value of '\" + HBaseQueueAdmin.PROPERTY_PREFIX_BYTES + \"' property. \" +\n                    \"Default to \" + SaltedHBaseQueueStrategy.SALT_BYTES, e);\n        this.prefixBytes = SaltedHBaseQueueStrategy.SALT_BYTES;\n      }\n\n      HTable10CDHNameConverter nameConverter = new HTable10CDHNameConverter();\n      namespaceId = nameConverter.from(tableDesc).getNamespace().getId();\n      appName = HBaseQueueAdmin.getApplicationName(hTableName);\n      flowName = HBaseQueueAdmin.getFlowName(hTableName);\n\n      Configuration conf = env.getConfiguration();\n      String hbaseNamespacePrefix = nameConverter.getNamespacePrefix(tableDesc);\n      TableId queueConfigTableId = HBaseQueueAdmin.getConfigTableId(namespaceId);\n      final String sysConfigTablePrefix = nameConverter.getSysConfigTablePrefix(tableDesc);\n      txStateCache = new DefaultTransactionStateCacheSupplier(sysConfigTablePrefix, conf).get();\n      txSnapshotSupplier = new Supplier<TransactionSnapshot>() {\n        @Override\n        public TransactionSnapshot get() {\n          return txStateCache.getLatestState();\n        }\n      };\n      configTableName = nameConverter.toTableName(hbaseNamespacePrefix, queueConfigTableId);\n      cConfReader = new CConfigurationReader(conf, sysConfigTablePrefix);\n      configCache = createConfigCache(env);\n    }\n  }","commit_id":"02e5c3cff91f0b2044c9c7c7e7e57017de5f49b8","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public boolean next(List<Cell> results, int limit) throws IOException {\n      boolean hasNext = scanner.next(results, limit);\n\n      while (!results.isEmpty()) {\n        totalRows++;\n        // Check if it is eligible for eviction.\n        Cell cell = results.get(0);\n\n        // If current queue is unknown or the row is not a queue entry of current queue,\n        // it either because it scans into next queue entry or simply current queue is not known.\n        // Hence needs to find the currentQueue\n        if (currentQueue == null || !QueueEntryRow.isQueueEntry(currentQueueRowPrefix, prefixBytes, cell.getRowArray(),\n                                                                cell.getRowOffset(), cell.getRowLength())) {\n          // If not eligible, it either because it scans into next queue entry or simply current queue is not known.\n          currentQueue = null;\n        }\n\n        // This row is a queue entry. If currentQueue is null, meaning it's a new queue encountered during scan.\n        if (currentQueue == null) {\n          QueueName queueName = QueueEntryRow.getQueueName(namespaceId, appName, flowName, prefixBytes,\n                                                           cell.getRowArray(), cell.getRowOffset(),\n                                                           cell.getRowLength());\n          currentQueue = queueName.toBytes();\n          currentQueueRowPrefix = QueueEntryRow.getQueueRowPrefix(queueName);\n          consumerConfig = getConfigCache().getConsumerConfig(currentQueue);\n        }\n\n        if (consumerConfig == null) {\n          // no config is present yet, so cannot evict\n          return hasNext;\n        }\n\n        if (canEvict(consumerConfig, results)) {\n          rowsEvicted++;\n          results.clear();\n          hasNext = scanner.next(results, limit);\n        } else {\n          break;\n        }\n      }\n\n      return hasNext;\n    }","id":10752,"modified_method":"@Override\n    public boolean next(List<Cell> results, int limit) throws IOException {\n      boolean hasNext = scanner.next(results, limit);\n\n      while (!results.isEmpty()) {\n        totalRows++;\n        // Check if it is eligible for eviction.\n        Cell cell = results.get(0);\n\n        // If current queue is unknown or the row is not a queue entry of current queue,\n        // it either because it scans into next queue entry or simply current queue is not known.\n        // Hence needs to find the currentQueue\n        if (currentQueue == null || !QueueEntryRow.isQueueEntry(currentQueueRowPrefix, prefixBytes, cell.getRowArray(),\n                                                                cell.getRowOffset(), cell.getRowLength())) {\n          // If not eligible, it either because it scans into next queue entry or simply current queue is not known.\n          currentQueue = null;\n        }\n\n        // This row is a queue entry. If currentQueue is null, meaning it's a new queue encountered during scan.\n        if (currentQueue == null) {\n          QueueName queueName = QueueEntryRow.getQueueName(namespaceId, appName, flowName, prefixBytes,\n                                                           cell.getRowArray(), cell.getRowOffset(),\n                                                           cell.getRowLength());\n          currentQueue = queueName.toBytes();\n          currentQueueRowPrefix = QueueEntryRow.getQueueRowPrefix(queueName);\n          consumerConfig = getConfigCache(env).getConsumerConfig(currentQueue);\n        }\n\n        if (consumerConfig == null) {\n          // no config is present yet, so cannot evict\n          return hasNext;\n        }\n\n        if (canEvict(consumerConfig, results)) {\n          rowsEvicted++;\n          results.clear();\n          hasNext = scanner.next(results, limit);\n        } else {\n          break;\n        }\n      }\n\n      return hasNext;\n    }","commit_id":"02e5c3cff91f0b2044c9c7c7e7e57017de5f49b8","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void start(CoprocessorEnvironment env) {\n    if (env instanceof RegionCoprocessorEnvironment) {\n      HTableDescriptor tableDesc = ((RegionCoprocessorEnvironment) env).getRegion().getTableDesc();\n      String hTableName = tableDesc.getNameAsString();\n\n      String prefixBytes = tableDesc.getValue(HBaseQueueAdmin.PROPERTY_PREFIX_BYTES);\n      try {\n        // Default to SALT_BYTES for the older salted queue implementation.\n        this.prefixBytes = prefixBytes == null ? SaltedHBaseQueueStrategy.SALT_BYTES : Integer.parseInt(prefixBytes);\n      } catch (NumberFormatException e) {\n        // Shouldn't happen for table created by cdap.\n        LOG.error(\"Unable to parse value of '\" + HBaseQueueAdmin.PROPERTY_PREFIX_BYTES + \"' property. \" +\n                    \"Default to \" + SaltedHBaseQueueStrategy.SALT_BYTES, e);\n        this.prefixBytes = SaltedHBaseQueueStrategy.SALT_BYTES;\n      }\n\n      HTable10NameConverter nameConverter = new HTable10NameConverter();\n      namespaceId = nameConverter.from(tableDesc).getNamespace().getId();\n      appName = HBaseQueueAdmin.getApplicationName(hTableName);\n      flowName = HBaseQueueAdmin.getFlowName(hTableName);\n\n      conf = env.getConfiguration();\n      String hbaseNamespacePrefix = nameConverter.getNamespacePrefix(tableDesc);\n      TableId queueConfigTableId = HBaseQueueAdmin.getConfigTableId(namespaceId);\n      final String sysConfigTablePrefix = nameConverter.getSysConfigTablePrefix(tableDesc);\n      txStateCache = new DefaultTransactionStateCacheSupplier(sysConfigTablePrefix, conf).get();\n      txSnapshotSupplier = new Supplier<TransactionSnapshot>() {\n        @Override\n        public TransactionSnapshot get() {\n          return txStateCache.getLatestState();\n        }\n      };\n      configTableNameBytes = nameConverter.toTableName(hbaseNamespacePrefix, queueConfigTableId).getName();\n      cConfReader = new CConfigurationReader(conf, sysConfigTablePrefix);\n      configCache = ConsumerConfigCache.getInstance(conf, configTableNameBytes, cConfReader, txSnapshotSupplier);\n    }\n  }","id":10753,"modified_method":"@Override\n  public void start(CoprocessorEnvironment env) {\n    if (env instanceof RegionCoprocessorEnvironment) {\n      HTableDescriptor tableDesc = ((RegionCoprocessorEnvironment) env).getRegion().getTableDesc();\n      String hTableName = tableDesc.getNameAsString();\n\n      String prefixBytes = tableDesc.getValue(HBaseQueueAdmin.PROPERTY_PREFIX_BYTES);\n      try {\n        // Default to SALT_BYTES for the older salted queue implementation.\n        this.prefixBytes = prefixBytes == null ? SaltedHBaseQueueStrategy.SALT_BYTES : Integer.parseInt(prefixBytes);\n      } catch (NumberFormatException e) {\n        // Shouldn't happen for table created by cdap.\n        LOG.error(\"Unable to parse value of '\" + HBaseQueueAdmin.PROPERTY_PREFIX_BYTES + \"' property. \" +\n                    \"Default to \" + SaltedHBaseQueueStrategy.SALT_BYTES, e);\n        this.prefixBytes = SaltedHBaseQueueStrategy.SALT_BYTES;\n      }\n\n      HTable10NameConverter nameConverter = new HTable10NameConverter();\n      namespaceId = nameConverter.from(tableDesc).getNamespace().getId();\n      appName = HBaseQueueAdmin.getApplicationName(hTableName);\n      flowName = HBaseQueueAdmin.getFlowName(hTableName);\n\n      Configuration conf = env.getConfiguration();\n      String hbaseNamespacePrefix = nameConverter.getNamespacePrefix(tableDesc);\n      TableId queueConfigTableId = HBaseQueueAdmin.getConfigTableId(namespaceId);\n      final String sysConfigTablePrefix = nameConverter.getSysConfigTablePrefix(tableDesc);\n      txStateCache = new DefaultTransactionStateCacheSupplier(sysConfigTablePrefix, conf).get();\n      txSnapshotSupplier = new Supplier<TransactionSnapshot>() {\n        @Override\n        public TransactionSnapshot get() {\n          return txStateCache.getLatestState();\n        }\n      };\n      configTableName = nameConverter.toTableName(hbaseNamespacePrefix, queueConfigTableId);\n      cConfReader = new CConfigurationReader(conf, sysConfigTablePrefix);\n      configCache = createConfigCache(env);\n    }\n  }","commit_id":"02e5c3cff91f0b2044c9c7c7e7e57017de5f49b8","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void start(CoprocessorEnvironment env) {\n    if (env instanceof RegionCoprocessorEnvironment) {\n      HTableDescriptor tableDesc = ((RegionCoprocessorEnvironment) env).getRegion().getTableDesc();\n      String hTableName = tableDesc.getNameAsString();\n\n      String prefixBytes = tableDesc.getValue(HBaseQueueAdmin.PROPERTY_PREFIX_BYTES);\n      try {\n        // Default to SALT_BYTES for the older salted queue implementation.\n        this.prefixBytes = prefixBytes == null ? SaltedHBaseQueueStrategy.SALT_BYTES : Integer.parseInt(prefixBytes);\n      } catch (NumberFormatException e) {\n        // Shouldn't happen for table created by cdap.\n        LOG.error(\"Unable to parse value of '\" + HBaseQueueAdmin.PROPERTY_PREFIX_BYTES + \"' property. \" +\n                    \"Default to \" + SaltedHBaseQueueStrategy.SALT_BYTES, e);\n        this.prefixBytes = SaltedHBaseQueueStrategy.SALT_BYTES;\n      }\n\n      HTable96NameConverter nameConverter = new HTable96NameConverter();\n      namespaceId = nameConverter.from(tableDesc).getNamespace().getId();\n      appName = HBaseQueueAdmin.getApplicationName(hTableName);\n      flowName = HBaseQueueAdmin.getFlowName(hTableName);\n\n      conf = env.getConfiguration();\n      String hbaseNamespacePrefix = nameConverter.getNamespacePrefix(tableDesc);\n      TableId queueConfigTableId = HBaseQueueAdmin.getConfigTableId(namespaceId);\n      final String sysConfigTablePrefix = nameConverter.getSysConfigTablePrefix(tableDesc);\n      txStateCache = new DefaultTransactionStateCacheSupplier(sysConfigTablePrefix, conf).get();\n      txSnapshotSupplier = new Supplier<TransactionSnapshot>() {\n        @Override\n        public TransactionSnapshot get() {\n          return txStateCache.getLatestState();\n        }\n      };\n      configTableNameBytes = nameConverter.toTableName(hbaseNamespacePrefix, queueConfigTableId).getName();\n      cConfReader = new CConfigurationReader(conf, sysConfigTablePrefix);\n      configCache = ConsumerConfigCache.getInstance(conf, configTableNameBytes, cConfReader, txSnapshotSupplier);\n    }\n  }","id":10754,"modified_method":"@Override\n  public void start(CoprocessorEnvironment env) {\n    if (env instanceof RegionCoprocessorEnvironment) {\n      HTableDescriptor tableDesc = ((RegionCoprocessorEnvironment) env).getRegion().getTableDesc();\n      String hTableName = tableDesc.getNameAsString();\n\n      String prefixBytes = tableDesc.getValue(HBaseQueueAdmin.PROPERTY_PREFIX_BYTES);\n      try {\n        // Default to SALT_BYTES for the older salted queue implementation.\n        this.prefixBytes = prefixBytes == null ? SaltedHBaseQueueStrategy.SALT_BYTES : Integer.parseInt(prefixBytes);\n      } catch (NumberFormatException e) {\n        // Shouldn't happen for table created by cdap.\n        LOG.error(\"Unable to parse value of '\" + HBaseQueueAdmin.PROPERTY_PREFIX_BYTES + \"' property. \" +\n                    \"Default to \" + SaltedHBaseQueueStrategy.SALT_BYTES, e);\n        this.prefixBytes = SaltedHBaseQueueStrategy.SALT_BYTES;\n      }\n\n      HTable96NameConverter nameConverter = new HTable96NameConverter();\n      namespaceId = nameConverter.from(tableDesc).getNamespace().getId();\n      appName = HBaseQueueAdmin.getApplicationName(hTableName);\n      flowName = HBaseQueueAdmin.getFlowName(hTableName);\n\n      Configuration conf = env.getConfiguration();\n      String hbaseNamespacePrefix = nameConverter.getNamespacePrefix(tableDesc);\n      TableId queueConfigTableId = HBaseQueueAdmin.getConfigTableId(namespaceId);\n      final String sysConfigTablePrefix = nameConverter.getSysConfigTablePrefix(tableDesc);\n      txStateCache = new DefaultTransactionStateCacheSupplier(sysConfigTablePrefix, conf).get();\n      txSnapshotSupplier = new Supplier<TransactionSnapshot>() {\n        @Override\n        public TransactionSnapshot get() {\n          return txStateCache.getLatestState();\n        }\n      };\n      configTableName = nameConverter.toTableName(hbaseNamespacePrefix, queueConfigTableId);\n      cConfReader = new CConfigurationReader(conf, sysConfigTablePrefix);\n      configCache = createConfigCache(env);\n    }\n  }","commit_id":"02e5c3cff91f0b2044c9c7c7e7e57017de5f49b8","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n    public boolean next(List<Cell> results, int limit) throws IOException {\n      boolean hasNext = scanner.next(results, limit);\n\n      while (!results.isEmpty()) {\n        totalRows++;\n        // Check if it is eligible for eviction.\n        Cell cell = results.get(0);\n\n        // If current queue is unknown or the row is not a queue entry of current queue,\n        // it either because it scans into next queue entry or simply current queue is not known.\n        // Hence needs to find the currentQueue\n        if (currentQueue == null || !QueueEntryRow.isQueueEntry(currentQueueRowPrefix, prefixBytes, cell.getRowArray(),\n                                                                cell.getRowOffset(), cell.getRowLength())) {\n          // If not eligible, it either because it scans into next queue entry or simply current queue is not known.\n          currentQueue = null;\n        }\n\n        // This row is a queue entry. If currentQueue is null, meaning it's a new queue encountered during scan.\n        if (currentQueue == null) {\n          QueueName queueName = QueueEntryRow.getQueueName(namespaceId, appName, flowName, prefixBytes,\n                                                           cell.getRowArray(), cell.getRowOffset(),\n                                                           cell.getRowLength());\n          currentQueue = queueName.toBytes();\n          currentQueueRowPrefix = QueueEntryRow.getQueueRowPrefix(queueName);\n          consumerConfig = getConfigCache().getConsumerConfig(currentQueue);\n        }\n\n        if (consumerConfig == null) {\n          // no config is present yet, so cannot evict\n          return hasNext;\n        }\n\n        if (canEvict(consumerConfig, results)) {\n          rowsEvicted++;\n          results.clear();\n          hasNext = scanner.next(results, limit);\n        } else {\n          break;\n        }\n      }\n\n      return hasNext;\n    }","id":10755,"modified_method":"@Override\n    public boolean next(List<Cell> results, int limit) throws IOException {\n      boolean hasNext = scanner.next(results, limit);\n\n      while (!results.isEmpty()) {\n        totalRows++;\n        // Check if it is eligible for eviction.\n        Cell cell = results.get(0);\n\n        // If current queue is unknown or the row is not a queue entry of current queue,\n        // it either because it scans into next queue entry or simply current queue is not known.\n        // Hence needs to find the currentQueue\n        if (currentQueue == null || !QueueEntryRow.isQueueEntry(currentQueueRowPrefix, prefixBytes, cell.getRowArray(),\n                                                                cell.getRowOffset(), cell.getRowLength())) {\n          // If not eligible, it either because it scans into next queue entry or simply current queue is not known.\n          currentQueue = null;\n        }\n\n        // This row is a queue entry. If currentQueue is null, meaning it's a new queue encountered during scan.\n        if (currentQueue == null) {\n          QueueName queueName = QueueEntryRow.getQueueName(namespaceId, appName, flowName, prefixBytes,\n                                                           cell.getRowArray(), cell.getRowOffset(),\n                                                           cell.getRowLength());\n          currentQueue = queueName.toBytes();\n          currentQueueRowPrefix = QueueEntryRow.getQueueRowPrefix(queueName);\n          consumerConfig = getConfigCache(env).getConsumerConfig(currentQueue);\n        }\n\n        if (consumerConfig == null) {\n          // no config is present yet, so cannot evict\n          return hasNext;\n        }\n\n        if (canEvict(consumerConfig, results)) {\n          rowsEvicted++;\n          results.clear();\n          hasNext = scanner.next(results, limit);\n        } else {\n          break;\n        }\n      }\n\n      return hasNext;\n    }","commit_id":"02e5c3cff91f0b2044c9c7c7e7e57017de5f49b8","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  protected void forceEviction(QueueName queueName, int numGroups) throws Exception {\n    TableId tableId = ((HBaseQueueAdmin) queueAdmin).getDataTableId(queueName);\n    byte[] tableName = tableUtil.getHTableDescriptor(testHBase.getHBaseAdmin(), tableId).getName();\n\n    // make sure consumer config cache is updated with the latest tx snapshot\n    takeTxSnapshot();\n    final Class coprocessorClass = tableUtil.getQueueRegionObserverClassForVersion();\n    testHBase.forEachRegion(tableName, new Function<HRegion, Object>() {\n      public Object apply(HRegion region) {\n        try {\n          Coprocessor cp = region.getCoprocessorHost().findCoprocessor(coprocessorClass.getName());\n          // calling cp.getConfigCache().updateConfig(), NOTE: cannot do normal cast and stuff because cp is loaded\n          // by different classloader (corresponds to a cp's jar)\n          LOG.info(\"forcing update of transaction state cache for HBaseQueueRegionObserver of region: {}\", region);\n          Method getTxStateCache = cp.getClass().getDeclaredMethod(\"getTxStateCache\");\n          getTxStateCache.setAccessible(true);\n          Object txStateCache = getTxStateCache.invoke(cp);\n          // the one returned is of type DefaultTransactionStateCache.\n          // The refreshState method is a private method of its parent, TransactionStateCache\n          Method refreshState = txStateCache.getClass().getSuperclass().getDeclaredMethod(\"refreshState\");\n          refreshState.setAccessible(true);\n          refreshState.invoke(txStateCache);\n\n          LOG.info(\"forcing update cache for HBaseQueueRegionObserver of region: {}\", region);\n          Method getConfigCacheMethod = cp.getClass().getDeclaredMethod(\"getConfigCache\");\n          getConfigCacheMethod.setAccessible(true);\n          Object configCache = getConfigCacheMethod.invoke(cp);\n          Method updateConfigMethod = configCache.getClass().getDeclaredMethod(\"updateCache\");\n          updateConfigMethod.setAccessible(true);\n          updateConfigMethod.invoke(configCache);\n        } catch (Exception e) {\n          throw Throwables.propagate(e);\n        }\n        return null;\n      }\n    });\n\n    // Force a table flush to trigger eviction\n    testHBase.forceRegionFlush(tableName);\n    testHBase.forceRegionCompact(tableName, true);\n  }","id":10756,"modified_method":"@Override\n  protected void forceEviction(QueueName queueName, int numGroups) throws Exception {\n    TableId tableId = ((HBaseQueueAdmin) queueAdmin).getDataTableId(queueName);\n    byte[] tableName = tableUtil.getHTableDescriptor(testHBase.getHBaseAdmin(), tableId).getName();\n\n    // make sure consumer config cache is updated with the latest tx snapshot\n    takeTxSnapshot();\n    final Class coprocessorClass = tableUtil.getQueueRegionObserverClassForVersion();\n    testHBase.forEachRegion(tableName, new Function<HRegion, Object>() {\n      public Object apply(HRegion region) {\n        try {\n          Coprocessor cp = region.getCoprocessorHost().findCoprocessor(coprocessorClass.getName());\n          // calling cp.updateCache(), NOTE: cannot do normal cast and stuff because cp is loaded\n          // by different classloader (corresponds to a cp's jar)\n          LOG.info(\"forcing update of transaction state cache for HBaseQueueRegionObserver of region: {}\", region);\n          Method getTxStateCache = cp.getClass().getDeclaredMethod(\"getTxStateCache\");\n          getTxStateCache.setAccessible(true);\n          Object txStateCache = getTxStateCache.invoke(cp);\n          // the one returned is of type DefaultTransactionStateCache.\n          // The refreshState method is a private method of its parent, TransactionStateCache\n          Method refreshState = txStateCache.getClass().getSuperclass().getDeclaredMethod(\"refreshState\");\n          refreshState.setAccessible(true);\n          refreshState.invoke(txStateCache);\n\n          LOG.info(\"forcing update cache for HBaseQueueRegionObserver of region: {}\", region);\n          Method updateCache = cp.getClass().getDeclaredMethod(\"updateCache\");\n          updateCache.setAccessible(true);\n          updateCache.invoke(cp);\n\n        } catch (Exception e) {\n          throw Throwables.propagate(e);\n        }\n        return null;\n      }\n    });\n\n    // Force a table flush to trigger eviction\n    testHBase.forceRegionFlush(tableName);\n    testHBase.forceRegionCompact(tableName, true);\n  }","commit_id":"02e5c3cff91f0b2044c9c7c7e7e57017de5f49b8","url":"https://github.com/caskdata/cdap"},{"original_method":"private ConsumerConfigCache getConsumerConfigCache(QueueName queueName) throws Exception {\n    TableId tableId = HBaseQueueAdmin.getConfigTableId(queueName);\n    HTableDescriptor htd = tableUtil.createHTable(hConf, tableId).getTableDescriptor();\n    String configTableName = htd.getNameAsString();\n    byte[] configTableNameBytes = Bytes.toBytes(configTableName);\n    HTableNameConverter nameConverter = new HTableNameConverterFactory().get();\n    CConfigurationReader cConfReader = new CConfigurationReader(hConf, nameConverter.getSysConfigTablePrefix(htd));\n    return ConsumerConfigCache.getInstance(hConf, configTableNameBytes,\n                                           cConfReader, new Supplier<TransactionSnapshot>() {\n      @Override\n      public TransactionSnapshot get() {\n        try {\n          return transactionManager.getSnapshot();\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n      }\n    });\n  }","id":10757,"modified_method":"private ConsumerConfigCache getConsumerConfigCache(QueueName queueName) throws Exception {\n    TableId tableId = HBaseQueueAdmin.getConfigTableId(queueName);\n    HTableDescriptor htd = tableUtil.createHTable(hConf, tableId).getTableDescriptor();\n    final TableName configTableName = htd.getTableName();\n    HTableNameConverter nameConverter = new HTableNameConverterFactory().get();\n    CConfigurationReader cConfReader = new CConfigurationReader(hConf, nameConverter.getSysConfigTablePrefix(htd));\n    return ConsumerConfigCache.getInstance(configTableName,\n                                           cConfReader, new Supplier<TransactionSnapshot>() {\n      @Override\n      public TransactionSnapshot get() {\n        try {\n          return transactionManager.getSnapshot();\n        } catch (IOException e) {\n          throw Throwables.propagate(e);\n        }\n      }\n    }, new InputSupplier<HTableInterface>() {\n      @Override\n      public HTableInterface getInput() throws IOException {\n        return new HTable(hConf, configTableName);\n      }\n    });\n  }","commit_id":"02e5c3cff91f0b2044c9c7c7e7e57017de5f49b8","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Count how many rows are there in the given HBase table.\n   */\n  private int countRows(TableId tableId) throws Exception {\n    HTable hTable = tableUtil.createHTable(hConf, tableId);\n    try {\n      ResultScanner scanner = hTable.getScanner(QueueEntryRow.COLUMN_FAMILY);\n      try {\n        return Iterables.size(scanner);\n      } finally {\n        scanner.close();\n      }\n    } finally {\n      hTable.close();\n    }\n  }","id":10758,"modified_method":"/**\n   * Count how many rows are there in the given HBase table.\n   */\n  private int countRows(TableId tableId) throws Exception {\n    try (\n      HTable hTable = tableUtil.createHTable(hConf, tableId);\n      ResultScanner scanner = hTable.getScanner(QueueEntryRow.COLUMN_FAMILY)\n    ) {\n      return Iterables.size(scanner);\n    }\n  }","commit_id":"02e5c3cff91f0b2044c9c7c7e7e57017de5f49b8","url":"https://github.com/caskdata/cdap"},{"original_method":"@BeforeClass\n  public static void init() throws Exception {\n    // Start hbase\n    testHBase = new HBaseTestFactory().get();\n    testHBase.startHBase();\n    hConf = testHBase.getConfiguration();\n\n    // Customize test configuration\n    cConf = CConfiguration.create();\n    cConf.set(Constants.Zookeeper.QUORUM, testHBase.getZkConnectionString());\n    cConf.set(TxConstants.Service.CFG_DATA_TX_BIND_PORT,\n              Integer.toString(Networks.getRandomPort()));\n    cConf.set(Constants.Dataset.TABLE_PREFIX, \"test\");\n    cConf.set(Constants.CFG_HDFS_USER, System.getProperty(\"user.name\"));\n    cConf.setLong(QueueConstants.QUEUE_CONFIG_UPDATE_FREQUENCY, 1L);\n\n    cConf.setLong(TxConstants.Manager.CFG_TX_TIMEOUT, 100000000L);\n\n    Module dataFabricModule = new DataFabricDistributedModule();\n    injector = Guice.createInjector(\n      dataFabricModule,\n      new ConfigModule(cConf, hConf),\n      new ZKClientModule(),\n      new LocationRuntimeModule().getDistributedModules(),\n      new DiscoveryRuntimeModule().getDistributedModules(),\n      new TransactionMetricsModule(),\n      new DataSetsModules().getInMemoryModules(),\n      new SystemDatasetRuntimeModule().getDistributedModules(),\n      new AbstractModule() {\n        @Override\n        protected void configure() {\n          bind(NotificationFeedManager.class).to(NoOpNotificationFeedManager.class).in(Scopes.SINGLETON);\n        }\n      }\n    );\n\n    //create HBase namespace\n    tableUtil = injector.getInstance(HBaseTableUtil.class);\n    tableUtil.createNamespaceIfNotExists(testHBase.getHBaseAdmin(), Constants.SYSTEM_NAMESPACE_ID);\n    tableUtil.createNamespaceIfNotExists(testHBase.getHBaseAdmin(), NAMESPACE_ID);\n    tableUtil.createNamespaceIfNotExists(testHBase.getHBaseAdmin(), NAMESPACE_ID1);\n\n    ConfigurationTable configTable = new ConfigurationTable(hConf);\n    configTable.write(ConfigurationTable.Type.DEFAULT, cConf);\n\n    zkClientService = injector.getInstance(ZKClientService.class);\n    zkClientService.startAndWait();\n\n    txService = injector.getInstance(TransactionService.class);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        txService.start();\n      }\n    };\n    t.start();\n\n    // The TransactionManager should be started by the txService.\n    // We just want a reference to that so that we can ask for tx snapshot\n    transactionManager = injector.getInstance(TransactionManager.class);\n    txSystemClient = injector.getInstance(TransactionSystemClient.class);\n    queueClientFactory = injector.getInstance(QueueClientFactory.class);\n    queueAdmin = injector.getInstance(QueueAdmin.class);\n    executorFactory = injector.getInstance(TransactionExecutorFactory.class);\n  }","id":10759,"modified_method":"@BeforeClass\n  public static void init() throws Exception {\n    // Start hbase\n    testHBase = new HBaseTestFactory().get();\n    testHBase.startHBase();\n    hConf = testHBase.getConfiguration();\n\n    // Customize test configuration\n    cConf = CConfiguration.create();\n    cConf.set(Constants.Zookeeper.QUORUM, testHBase.getZkConnectionString());\n    cConf.set(TxConstants.Service.CFG_DATA_TX_BIND_PORT,\n              Integer.toString(Networks.getRandomPort()));\n    cConf.set(Constants.Dataset.TABLE_PREFIX, \"test\");\n    cConf.set(Constants.CFG_HDFS_USER, System.getProperty(\"user.name\"));\n    cConf.setLong(QueueConstants.QUEUE_CONFIG_UPDATE_FREQUENCY, 10000L);\n\n    cConf.setLong(TxConstants.Manager.CFG_TX_TIMEOUT, 100000000L);\n\n    Module dataFabricModule = new DataFabricDistributedModule();\n    injector = Guice.createInjector(\n      dataFabricModule,\n      new ConfigModule(cConf, hConf),\n      new ZKClientModule(),\n      new LocationRuntimeModule().getDistributedModules(),\n      new DiscoveryRuntimeModule().getDistributedModules(),\n      new TransactionMetricsModule(),\n      new DataSetsModules().getInMemoryModules(),\n      new SystemDatasetRuntimeModule().getDistributedModules(),\n      new AbstractModule() {\n        @Override\n        protected void configure() {\n          bind(NotificationFeedManager.class).to(NoOpNotificationFeedManager.class).in(Scopes.SINGLETON);\n        }\n      }\n    );\n\n    //create HBase namespace\n    tableUtil = injector.getInstance(HBaseTableUtil.class);\n    tableUtil.createNamespaceIfNotExists(testHBase.getHBaseAdmin(), Constants.SYSTEM_NAMESPACE_ID);\n    tableUtil.createNamespaceIfNotExists(testHBase.getHBaseAdmin(), NAMESPACE_ID);\n    tableUtil.createNamespaceIfNotExists(testHBase.getHBaseAdmin(), NAMESPACE_ID1);\n\n    ConfigurationTable configTable = new ConfigurationTable(hConf);\n    configTable.write(ConfigurationTable.Type.DEFAULT, cConf);\n\n    zkClientService = injector.getInstance(ZKClientService.class);\n    zkClientService.startAndWait();\n\n    txService = injector.getInstance(TransactionService.class);\n    Thread t = new Thread() {\n      @Override\n      public void run() {\n        txService.start();\n      }\n    };\n    t.start();\n\n    // The TransactionManager should be started by the txService.\n    // We just want a reference to that so that we can ask for tx snapshot\n    transactionManager = injector.getInstance(TransactionManager.class);\n    txSystemClient = injector.getInstance(TransactionSystemClient.class);\n    queueClientFactory = injector.getInstance(QueueClientFactory.class);\n    queueAdmin = injector.getInstance(QueueAdmin.class);\n    executorFactory = injector.getInstance(TransactionExecutorFactory.class);\n  }","commit_id":"02e5c3cff91f0b2044c9c7c7e7e57017de5f49b8","url":"https://github.com/caskdata/cdap"},{"original_method":"public static serverObjects respond(httpHeader header, serverObjects post, serverSwitch<?> sb) {\r\n        // return variable that accumulates replacements\r\n        plasmaSwitchboard switchboard = (plasmaSwitchboard) sb;\r\n        serverObjects prop = new serverObjects();\r\n        File defaultSettingsFile = new File(switchboard.getRootPath(), \"defaults/yacy.init\");\r\n        if(post != null && post.containsKey(\"defaultFile\")) {\r\n            // TODO check file-path!\r\n            final File value = new File(switchboard.getRootPath(), post.get(\"defaultFile\", \"defaults/yacy.init\"));\r\n            // check if value is readable file\r\n            if(value.exists() && value.isFile() && value.canRead()) {\r\n                defaultSettingsFile = value;\r\n            }\r\n        }\r\n        Map<String, String> defaultSettings = ((post == null) || (!(post.containsKey(\"submitdefault\")))) ? null : serverFileUtils.loadHashMap(defaultSettingsFile);\r\n        Iterator<String> threads = switchboard.threadNames();\r\n        String threadName;\r\n        serverBusyThread thread;\r\n        \r\n        boolean xml = (header.get(\"PATH\")).endsWith(\".xml\");\r\n        prop.setLocalized(!xml);\r\n        \r\n        // calculate totals\r\n        long blocktime_total = 0, sleeptime_total = 0, exectime_total = 0;\r\n        while (threads.hasNext()) {\r\n            threadName = threads.next();\r\n            thread = switchboard.getThread(threadName);\r\n            blocktime_total += thread.getBlockTime();\r\n            sleeptime_total += thread.getSleepTime();\r\n            exectime_total += thread.getExecTime();\r\n        }   \r\n        if (blocktime_total == 0) blocktime_total = 1;\r\n        if (sleeptime_total == 0) sleeptime_total = 1;\r\n        if (exectime_total == 0) exectime_total = 1;\r\n        \r\n        // set templates for latest news from the threads\r\n        long blocktime, sleeptime, exectime;\r\n        long idlesleep, busysleep, memuse, memprereq;\r\n        int queuesize;\r\n        threads = switchboard.threadNames();\r\n        int c = 0;\r\n        long idleCycles, busyCycles, memshortageCycles;\r\n        // set profile?\r\n        final double multiplier = (post != null) && post.containsKey(\"multiplier\") ? post.getDouble(\"multiplier\", 1) : 1;\r\n        final boolean setProfile = (post != null && post.containsKey(\"submitdefault\"));\r\n        final boolean setDelay = (post != null) && (post.containsKey(\"submitdelay\"));\r\n        while (threads.hasNext()) {\r\n            threadName = threads.next();\r\n            thread = switchboard.getThread(threadName);\r\n            \r\n            // set values to templates\r\n            prop.put(\"table_\" + c + \"_threadname\", threadName);\r\n\r\n\t\t\tprop.putHTML(\"table_\" + c + \"_hasurl_shortdescr\", thread.getShortDescription(), xml);\r\n\t\t\tif(thread.getMonitorURL() == null) {\r\n\t\t\t\tprop.put(\"table_\"+c+\"_hasurl\", \"0\");\r\n\t\t\t}else{\r\n\t\t\t\tprop.put(\"table_\"+c+\"_hasurl\", \"1\");\r\n\t\t\t\tprop.put(\"table_\" + c + \"_hasurl_url\", thread.getMonitorURL());\r\n\t\t\t}\r\n            prop.putHTML(\"table_\" + c + \"_longdescr\", thread.getLongDescription(), xml);\r\n            queuesize = thread.getJobCount();\r\n            prop.put(\"table_\" + c + \"_queuesize\", (queuesize == Integer.MAX_VALUE) ? \"unlimited\" : yFormatter.number(queuesize, !xml));\r\n            \r\n            blocktime = thread.getBlockTime();\r\n            sleeptime = thread.getSleepTime();\r\n            exectime = thread.getExecTime();\r\n            memuse = thread.getMemoryUse();\r\n            idleCycles = thread.getIdleCycles();\r\n            busyCycles = thread.getBusyCycles();\r\n            memshortageCycles = thread.getOutOfMemoryCycles();\r\n            prop.putNum(\"table_\" + c + \"_blocktime\", blocktime / 1000);\r\n            prop.putNum(\"table_\" + c + \"_blockpercent\", 100 * blocktime / blocktime_total);\r\n            prop.putNum(\"table_\" + c + \"_sleeptime\", sleeptime / 1000);\r\n            prop.putNum(\"table_\" + c + \"_sleeppercent\", 100 * sleeptime / sleeptime_total);\r\n            prop.putNum(\"table_\" + c + \"_exectime\", exectime / 1000);\r\n            prop.putNum(\"table_\" + c + \"_execpercent\", 100 * exectime / exectime_total);\r\n            prop.putNum(\"table_\" + c + \"_totalcycles\", idleCycles + busyCycles + memshortageCycles);\r\n            prop.putNum(\"table_\" + c + \"_idlecycles\", idleCycles);\r\n            prop.putNum(\"table_\" + c + \"_busycycles\", busyCycles);\r\n            prop.putNum(\"table_\" + c + \"_memscycles\", memshortageCycles);\r\n            prop.putNum(\"table_\" + c + \"_sleeppercycle\", ((idleCycles + busyCycles) == 0) ? -1 : sleeptime / (idleCycles + busyCycles));\r\n            prop.putNum(\"table_\" + c + \"_execpercycle\", (busyCycles == 0) ? -1 : exectime / busyCycles);\r\n            prop.putNum(\"table_\" + c + \"_memusepercycle\", (busyCycles == 0) ? -1 : memuse / busyCycles / 1024);\r\n            \r\n            if (setDelay) {\r\n                // load with new values\r\n                idlesleep = post.getLong(threadName + \"_idlesleep\", 1000);\r\n                busysleep = post.getLong(threadName + \"_busysleep\",  100);\r\n                memprereq = post.getLong(threadName + \"_memprereq\",    0) * 1024;\r\n                if (memprereq == 0) memprereq = sb.getConfigLong(threadName + \"_memprereq\", 0);\r\n                    \r\n                // check values to prevent short-cut loops\r\n                if (idlesleep < 1000) idlesleep = 1000;\r\n                if (threadName.equals(\"10_httpd\")) { idlesleep = 0; busysleep = 0; memprereq = 0; }\r\n                \r\n                onTheFlyReconfiguration(switchboard, threadName, idlesleep, busysleep, memprereq);\r\n            } if (setProfile) {\r\n                // load with new values\r\n                idlesleep = (long) (Long.parseLong(d(defaultSettings.get(threadName + \"_idlesleep\"), \"1000\")) * multiplier);\r\n                busysleep = (long) (Long.parseLong(d(defaultSettings.get(threadName + \"_busysleep\"),  \"100\")) * multiplier);\r\n                memprereq = (long) (Long.parseLong(d(defaultSettings.get(threadName + \"_memprereq\"),    \"0\")) * multiplier);\r\n\r\n                // check values to prevent short-cut loops\r\n                if (idlesleep < 1000) idlesleep = 1000;\r\n                if (threadName.equals(\"10_httpd\")) { idlesleep = 0; busysleep = 0; memprereq = 0; }\r\n                if ((threadName.equals(\"50_localcrawl\")) && (busysleep < 100)) busysleep = 100;\r\n                if ((threadName.equals(\"61_globalcrawltrigger\")) && (busysleep < 100)) busysleep = 100;\r\n                if ((threadName.equals(\"62_remotetriggeredcrawl\")) && (busysleep < 100)) busysleep = 100;\r\n\r\n                onTheFlyReconfiguration(switchboard, threadName, idlesleep, busysleep, memprereq);\r\n            } else {\r\n                // load with old values\r\n                idlesleep = Long.parseLong(switchboard.getConfig(threadName + \"_idlesleep\" , \"1000\"));\r\n                busysleep = Long.parseLong(switchboard.getConfig(threadName + \"_busysleep\",   \"100\"));\r\n                memprereq = Long.parseLong(switchboard.getConfig(threadName + \"_memprereq\",     \"0\"));\r\n            }\r\n            prop.put(\"table_\" + c + \"_idlesleep\", idlesleep);\r\n            prop.put(\"table_\" + c + \"_busysleep\", busysleep);\r\n            prop.put(\"table_\" + c + \"_memprereq\", memprereq / 1024);\r\n            // disallow setting of memprereq for indexer to prevent db from throwing OOMs\r\n            prop.put(\"table_\" + c + \"_disabled\", /*(threadName.endsWith(\"_indexing\")) ? 1 :*/ \"0\");\r\n            prop.put(\"table_\" + c + \"_recommendation\", threadName.endsWith(\"_indexing\") ? \"1\" : \"0\");\r\n            prop.putNum(\"table_\" + c + \"_recommendation_value\", threadName.endsWith(\"_indexing\") ? (switchboard.webIndex.minMem() / 1024) : 0);\r\n            c++;\r\n        }\r\n        prop.put(\"table\", c);\r\n        \r\n        // performance profiles\r\n        c = 0;\r\n        for(String filename: performanceProfiles.keySet()) {\r\n            prop.put(\"profile_\" + c + \"_filename\", filename);\r\n            prop.put(\"profile_\" + c + \"_description\", performanceProfiles.get(filename));\r\n            c++;\r\n        }\r\n        prop.put(\"profile\", c);\r\n        \r\n        if ((post != null) && (post.containsKey(\"cacheSizeSubmit\"))) {\r\n            int wordCacheMaxCount = post.getInt(\"wordCacheMaxCount\", 20000);\r\n            switchboard.setConfig(plasmaSwitchboard.WORDCACHE_MAX_COUNT, Integer.toString(wordCacheMaxCount));\r\n            switchboard.webIndex.setMaxWordCount(wordCacheMaxCount);\r\n            \r\n            int wordCacheInitCount = post.getInt(plasmaSwitchboard.WORDCACHE_INIT_COUNT, 30000);\r\n            switchboard.setConfig(plasmaSwitchboard.WORDCACHE_INIT_COUNT, Integer.toString(wordCacheInitCount));\r\n        }\r\n        \r\n        if ((post != null) && (post.containsKey(\"poolConfig\"))) {\r\n            \r\n            /* \r\n             * configuring the crawler pool \r\n             */\r\n            // getting the current crawler pool configuration\r\n            int maxBusy = Integer.parseInt(post.get(\"Crawler Pool_maxActive\",\"8\"));\r\n            \r\n            // storing the new values into configfile\r\n            switchboard.setConfig(plasmaSwitchboard.CRAWLER_THREADS_ACTIVE_MAX,maxBusy);\r\n            //switchboard.setConfig(\"crawler.MinIdleThreads\",minIdle);\r\n            \r\n            /* \r\n             * configuring the http pool \r\n             */\r\n            serverThread httpd = switchboard.getThread(\"10_httpd\");\r\n            try {\r\n                maxBusy = Integer.parseInt(post.get(\"httpd Session Pool_maxActive\",\"8\"));\r\n            } catch (NumberFormatException e) {\r\n                maxBusy = 8;\r\n            }\r\n\r\n            ((serverCore)httpd).setMaxSessionCount(maxBusy);    \r\n            \r\n            // storing the new values into configfile\r\n            switchboard.setConfig(\"httpdMaxBusySessions\",maxBusy);\r\n\r\n        }        \r\n        \r\n        if ((post != null) && (post.containsKey(\"PrioritySubmit\"))) {\r\n        \tswitchboard.setConfig(\"javastart_priority\",post.get(\"YaCyPriority\",\"0\"));\r\n        }\r\n        \r\n        if ((post != null) && (post.containsKey(\"onlineCautionSubmit\"))) {\r\n            switchboard.setConfig(plasmaSwitchboard.PROXY_ONLINE_CAUTION_DELAY, Integer.toString(post.getInt(\"crawlPauseProxy\", 30000)));\r\n            switchboard.setConfig(plasmaSwitchboard.LOCALSEACH_ONLINE_CAUTION_DELAY, Integer.toString(post.getInt(\"crawlPauseLocalsearch\", 30000)));\r\n            switchboard.setConfig(plasmaSwitchboard.REMOTESEARCH_ONLINE_CAUTION_DELAY, Integer.toString(post.getInt(\"crawlPauseRemotesearch\", 30000)));\r\n        }\r\n        \r\n        // table cache settings\r\n        prop.putNum(\"urlCacheSize\", switchboard.webIndex.getURLwriteCacheSize());  \r\n        prop.putNum(\"wordCacheWSize\", switchboard.webIndex.dhtOutCacheSize());\r\n        prop.putNum(\"wordCacheKSize\", switchboard.webIndex.dhtInCacheSize());\r\n        prop.putNum(\"wordCacheWSizeKBytes\", switchboard.webIndex.dhtCacheSizeBytes(false)/1024);\r\n        prop.putNum(\"wordCacheKSizeKBytes\", switchboard.webIndex.dhtCacheSizeBytes(true)/1024);\r\n        prop.putNum(\"maxURLinWCache\", switchboard.webIndex.maxURLinDHTOutCache());\r\n        prop.putNum(\"maxURLinKCache\", switchboard.webIndex.maxURLinDHTInCache());\r\n        prop.putNum(\"maxAgeOfWCache\", switchboard.webIndex.maxAgeOfDHTOutCache() / 1000 / 60); // minutes\r\n        prop.putNum(\"maxAgeOfKCache\", switchboard.webIndex.maxAgeOfDHTInCache() / 1000 / 60); // minutes\r\n        prop.putNum(\"minAgeOfWCache\", switchboard.webIndex.minAgeOfDHTOutCache() / 1000 / 60); // minutes\r\n        prop.putNum(\"minAgeOfKCache\", switchboard.webIndex.minAgeOfDHTInCache() / 1000 / 60); // minutes\r\n        prop.putNum(\"maxWaitingWordFlush\", switchboard.getConfigLong(\"maxWaitingWordFlush\", 180));\r\n        prop.put(\"wordCacheMaxCount\", switchboard.getConfigLong(plasmaSwitchboard.WORDCACHE_MAX_COUNT, 20000));\r\n        prop.put(\"wordCacheInitCount\", switchboard.getConfigLong(plasmaSwitchboard.WORDCACHE_INIT_COUNT, 30000));\r\n        prop.put(\"crawlPauseProxy\", switchboard.getConfigLong(plasmaSwitchboard.PROXY_ONLINE_CAUTION_DELAY, 30000));\r\n        prop.put(\"crawlPauseLocalsearch\", switchboard.getConfigLong(plasmaSwitchboard.LOCALSEACH_ONLINE_CAUTION_DELAY, 30000));\r\n        prop.put(\"crawlPauseRemotesearch\", switchboard.getConfigLong(plasmaSwitchboard.REMOTESEARCH_ONLINE_CAUTION_DELAY, 30000));\r\n        prop.putNum(\"crawlPauseProxyCurrent\", (System.currentTimeMillis() - switchboard.proxyLastAccess) / 1000);\r\n        prop.putNum(\"crawlPauseLocalsearchCurrent\", (System.currentTimeMillis() - switchboard.localSearchLastAccess) / 1000);\r\n        prop.putNum(\"crawlPauseRemotesearchCurrent\", (System.currentTimeMillis() - switchboard.remoteSearchLastAccess) / 1000);\r\n        \r\n        // table thread pool settings\n        prop.put(\"pool_0_name\",\"Crawler Pool\");\r\n        prop.put(\"pool_0_maxActive\", switchboard.getConfigLong(\"crawler.MaxActiveThreads\", 0));\r\n        prop.put(\"pool_0_numActive\",switchboard.crawlQueues.size());\n        \r\n        serverThread httpd = switchboard.getThread(\"10_httpd\");\r\n        prop.put(\"pool_1_name\", \"httpd Session Pool\");\r\n        prop.put(\"pool_1_maxActive\", ((serverCore)httpd).getMaxSessionCount());\r\n        prop.put(\"pool_1_numActive\", ((serverCore)httpd).getJobCount());\r\n        \n        prop.put(\"pool\", \"2\");\n        \r\n        long curr_prio = switchboard.getConfigLong(\"javastart_priority\",0);\r\n        prop.put(\"priority_normal\",(curr_prio==0) ? \"1\" : \"0\");\r\n        prop.put(\"priority_below\",(curr_prio==10) ? \"1\" : \"0\");\r\n        prop.put(\"priority_low\",(curr_prio==20) ? \"1\" : \"0\");\r\n        \r\n        // return rewrite values for templates\r\n        return prop;\r\n    }","id":10760,"modified_method":"public static serverObjects respond(httpHeader header, serverObjects post, serverSwitch<?> sb) {\r\n        // return variable that accumulates replacements\r\n        plasmaSwitchboard switchboard = (plasmaSwitchboard) sb;\r\n        serverObjects prop = new serverObjects();\r\n        File defaultSettingsFile = new File(switchboard.getRootPath(), \"defaults/yacy.init\");\r\n        if(post != null && post.containsKey(\"defaultFile\")) {\r\n            // TODO check file-path!\r\n            final File value = new File(switchboard.getRootPath(), post.get(\"defaultFile\", \"defaults/yacy.init\"));\r\n            // check if value is readable file\r\n            if(value.exists() && value.isFile() && value.canRead()) {\r\n                defaultSettingsFile = value;\r\n            }\r\n        }\r\n        Map<String, String> defaultSettings = ((post == null) || (!(post.containsKey(\"submitdefault\")))) ? null : serverFileUtils.loadHashMap(defaultSettingsFile);\r\n        Iterator<String> threads = switchboard.threadNames();\r\n        String threadName;\r\n        serverBusyThread thread;\r\n        \r\n        boolean xml = (header.get(\"PATH\")).endsWith(\".xml\");\r\n        prop.setLocalized(!xml);\r\n        \r\n        // calculate totals\r\n        long blocktime_total = 0, sleeptime_total = 0, exectime_total = 0;\r\n        while (threads.hasNext()) {\r\n            threadName = threads.next();\r\n            thread = switchboard.getThread(threadName);\r\n            blocktime_total += thread.getBlockTime();\r\n            sleeptime_total += thread.getSleepTime();\r\n            exectime_total += thread.getExecTime();\r\n        }   \r\n        if (blocktime_total == 0) blocktime_total = 1;\r\n        if (sleeptime_total == 0) sleeptime_total = 1;\r\n        if (exectime_total == 0) exectime_total = 1;\r\n        \r\n        // set templates for latest news from the threads\r\n        long blocktime, sleeptime, exectime;\r\n        long idlesleep, busysleep, memuse, memprereq;\r\n        int queuesize;\r\n        threads = switchboard.threadNames();\r\n        int c = 0;\r\n        long idleCycles, busyCycles, memshortageCycles;\r\n        // set profile?\r\n        final double multiplier = (post != null) && post.containsKey(\"multiplier\") ? post.getDouble(\"multiplier\", 1) : 1;\r\n        final boolean setProfile = (post != null && post.containsKey(\"submitdefault\"));\r\n        final boolean setDelay = (post != null) && (post.containsKey(\"submitdelay\"));\r\n        while (threads.hasNext()) {\r\n            threadName = threads.next();\r\n            thread = switchboard.getThread(threadName);\r\n            \r\n            // set values to templates\r\n            prop.put(\"table_\" + c + \"_threadname\", threadName);\r\n\r\n\t\t\tprop.putHTML(\"table_\" + c + \"_hasurl_shortdescr\", thread.getShortDescription(), xml);\r\n\t\t\tif(thread.getMonitorURL() == null) {\r\n\t\t\t\tprop.put(\"table_\"+c+\"_hasurl\", \"0\");\r\n\t\t\t}else{\r\n\t\t\t\tprop.put(\"table_\"+c+\"_hasurl\", \"1\");\r\n\t\t\t\tprop.put(\"table_\" + c + \"_hasurl_url\", thread.getMonitorURL());\r\n\t\t\t}\r\n            prop.putHTML(\"table_\" + c + \"_longdescr\", thread.getLongDescription(), xml);\r\n            queuesize = thread.getJobCount();\r\n            prop.put(\"table_\" + c + \"_queuesize\", (queuesize == Integer.MAX_VALUE) ? \"unlimited\" : yFormatter.number(queuesize, !xml));\r\n            \r\n            blocktime = thread.getBlockTime();\r\n            sleeptime = thread.getSleepTime();\r\n            exectime = thread.getExecTime();\r\n            memuse = thread.getMemoryUse();\r\n            idleCycles = thread.getIdleCycles();\r\n            busyCycles = thread.getBusyCycles();\r\n            memshortageCycles = thread.getOutOfMemoryCycles();\r\n            prop.putNum(\"table_\" + c + \"_blocktime\", blocktime / 1000);\r\n            prop.putNum(\"table_\" + c + \"_blockpercent\", 100 * blocktime / blocktime_total);\r\n            prop.putNum(\"table_\" + c + \"_sleeptime\", sleeptime / 1000);\r\n            prop.putNum(\"table_\" + c + \"_sleeppercent\", 100 * sleeptime / sleeptime_total);\r\n            prop.putNum(\"table_\" + c + \"_exectime\", exectime / 1000);\r\n            prop.putNum(\"table_\" + c + \"_execpercent\", 100 * exectime / exectime_total);\r\n            prop.putNum(\"table_\" + c + \"_totalcycles\", idleCycles + busyCycles + memshortageCycles);\r\n            prop.putNum(\"table_\" + c + \"_idlecycles\", idleCycles);\r\n            prop.putNum(\"table_\" + c + \"_busycycles\", busyCycles);\r\n            prop.putNum(\"table_\" + c + \"_memscycles\", memshortageCycles);\r\n            prop.putNum(\"table_\" + c + \"_sleeppercycle\", ((idleCycles + busyCycles) == 0) ? -1 : sleeptime / (idleCycles + busyCycles));\r\n            prop.putNum(\"table_\" + c + \"_execpercycle\", (busyCycles == 0) ? -1 : exectime / busyCycles);\r\n            prop.putNum(\"table_\" + c + \"_memusepercycle\", (busyCycles == 0) ? -1 : memuse / busyCycles / 1024);\r\n            \r\n            // load with old values\r\n            idlesleep = switchboard.getConfigLong(threadName + \"_idlesleep\" , 1000);\r\n            busysleep = switchboard.getConfigLong(threadName + \"_busysleep\",   100);\r\n            memprereq = switchboard.getConfigLong(threadName + \"_memprereq\",     0);\r\n            if (setDelay) {\r\n                // load with new values\r\n                idlesleep = post.getLong(threadName + \"_idlesleep\", idlesleep);\r\n                busysleep = post.getLong(threadName + \"_busysleep\", busysleep);\r\n                memprereq = post.getLong(threadName + \"_memprereq\", memprereq) * 1024;\r\n                if (memprereq == 0) memprereq = switchboard.getConfigLong(threadName + \"_memprereq\", 0);\r\n                    \r\n                // check values to prevent short-cut loops\r\n                if (idlesleep < 1000) idlesleep = 1000;\r\n                if (threadName.equals(\"10_httpd\")) { idlesleep = 0; busysleep = 0; memprereq = 0; }\r\n                \r\n                onTheFlyReconfiguration(switchboard, threadName, idlesleep, busysleep, memprereq);\r\n            } if (setProfile) {\r\n                // load with new values\r\n                idlesleep = (long) (Long.parseLong(d(defaultSettings.get(threadName + \"_idlesleep\"), String.valueOf(idlesleep))) * multiplier);\r\n                busysleep = (long) (Long.parseLong(d(defaultSettings.get(threadName + \"_busysleep\"), String.valueOf(busysleep))) * multiplier);\r\n                memprereq = (long) (Long.parseLong(d(defaultSettings.get(threadName + \"_memprereq\"), String.valueOf(memprereq))) * multiplier);\r\n\r\n                // check values to prevent short-cut loops\r\n                if (idlesleep < 1000) idlesleep = 1000;\r\n                if (threadName.equals(\"10_httpd\")) { idlesleep = 0; busysleep = 0; memprereq = 0; }\r\n                if ((threadName.equals(\"50_localcrawl\")) && (busysleep < 100)) busysleep = 100;\r\n                if ((threadName.equals(\"61_globalcrawltrigger\")) && (busysleep < 100)) busysleep = 100;\r\n                if ((threadName.equals(\"62_remotetriggeredcrawl\")) && (busysleep < 100)) busysleep = 100;\r\n\r\n                onTheFlyReconfiguration(switchboard, threadName, idlesleep, busysleep, memprereq);\r\n            }\r\n            prop.put(\"table_\" + c + \"_idlesleep\", idlesleep);\r\n            prop.put(\"table_\" + c + \"_busysleep\", busysleep);\r\n            prop.put(\"table_\" + c + \"_memprereq\", memprereq / 1024);\r\n            // disallow setting of memprereq for indexer to prevent db from throwing OOMs\r\n            prop.put(\"table_\" + c + \"_disabled\", /*(threadName.endsWith(\"_indexing\")) ? 1 :*/ \"0\");\r\n            prop.put(\"table_\" + c + \"_recommendation\", threadName.endsWith(\"_indexing\") ? \"1\" : \"0\");\r\n            prop.putNum(\"table_\" + c + \"_recommendation_value\", threadName.endsWith(\"_indexing\") ? (switchboard.webIndex.minMem() / 1024) : 0);\r\n            c++;\r\n        }\r\n        prop.put(\"table\", c);\r\n        \r\n        // performance profiles\r\n        c = 0;\r\n        for(String filename: performanceProfiles.keySet()) {\r\n            prop.put(\"profile_\" + c + \"_filename\", filename);\r\n            prop.put(\"profile_\" + c + \"_description\", performanceProfiles.get(filename));\r\n            c++;\r\n        }\r\n        prop.put(\"profile\", c);\r\n        \r\n        if ((post != null) && (post.containsKey(\"cacheSizeSubmit\"))) {\r\n            int wordCacheMaxCount = post.getInt(\"wordCacheMaxCount\", 20000);\r\n            switchboard.setConfig(plasmaSwitchboard.WORDCACHE_MAX_COUNT, Integer.toString(wordCacheMaxCount));\r\n            switchboard.webIndex.setMaxWordCount(wordCacheMaxCount);\r\n            \r\n            int wordCacheInitCount = post.getInt(plasmaSwitchboard.WORDCACHE_INIT_COUNT, 30000);\r\n            switchboard.setConfig(plasmaSwitchboard.WORDCACHE_INIT_COUNT, Integer.toString(wordCacheInitCount));\r\n        }\r\n        \r\n        if ((post != null) && (post.containsKey(\"poolConfig\"))) {\r\n            \r\n            /* \r\n             * configuring the crawler pool \r\n             */\r\n            // getting the current crawler pool configuration\r\n            int maxBusy = Integer.parseInt(post.get(\"Crawler Pool_maxActive\",\"8\"));\r\n            \r\n            // storing the new values into configfile\r\n            switchboard.setConfig(plasmaSwitchboard.CRAWLER_THREADS_ACTIVE_MAX,maxBusy);\r\n            //switchboard.setConfig(\"crawler.MinIdleThreads\",minIdle);\r\n            \r\n            /* \r\n             * configuring the http pool \r\n             */\r\n            serverThread httpd = switchboard.getThread(\"10_httpd\");\r\n            try {\r\n                maxBusy = Integer.parseInt(post.get(\"httpd Session Pool_maxActive\",\"8\"));\r\n            } catch (NumberFormatException e) {\r\n                maxBusy = 8;\r\n            }\r\n\r\n            ((serverCore)httpd).setMaxSessionCount(maxBusy);    \r\n            \r\n            // storing the new values into configfile\r\n            switchboard.setConfig(\"httpdMaxBusySessions\",maxBusy);\r\n\r\n        }        \r\n        \r\n        if ((post != null) && (post.containsKey(\"PrioritySubmit\"))) {\r\n        \tswitchboard.setConfig(\"javastart_priority\",post.get(\"YaCyPriority\",\"0\"));\r\n        }\r\n        \r\n        if ((post != null) && (post.containsKey(\"onlineCautionSubmit\"))) {\r\n            switchboard.setConfig(plasmaSwitchboard.PROXY_ONLINE_CAUTION_DELAY, Integer.toString(post.getInt(\"crawlPauseProxy\", 30000)));\r\n            switchboard.setConfig(plasmaSwitchboard.LOCALSEACH_ONLINE_CAUTION_DELAY, Integer.toString(post.getInt(\"crawlPauseLocalsearch\", 30000)));\r\n            switchboard.setConfig(plasmaSwitchboard.REMOTESEARCH_ONLINE_CAUTION_DELAY, Integer.toString(post.getInt(\"crawlPauseRemotesearch\", 30000)));\r\n        }\r\n        \r\n        // table cache settings\r\n        prop.putNum(\"urlCacheSize\", switchboard.webIndex.getURLwriteCacheSize());  \r\n        prop.putNum(\"wordCacheWSize\", switchboard.webIndex.dhtOutCacheSize());\r\n        prop.putNum(\"wordCacheKSize\", switchboard.webIndex.dhtInCacheSize());\r\n        prop.putNum(\"wordCacheWSizeKBytes\", switchboard.webIndex.dhtCacheSizeBytes(false)/1024);\r\n        prop.putNum(\"wordCacheKSizeKBytes\", switchboard.webIndex.dhtCacheSizeBytes(true)/1024);\r\n        prop.putNum(\"maxURLinWCache\", switchboard.webIndex.maxURLinDHTOutCache());\r\n        prop.putNum(\"maxURLinKCache\", switchboard.webIndex.maxURLinDHTInCache());\r\n        prop.putNum(\"maxAgeOfWCache\", switchboard.webIndex.maxAgeOfDHTOutCache() / 1000 / 60); // minutes\r\n        prop.putNum(\"maxAgeOfKCache\", switchboard.webIndex.maxAgeOfDHTInCache() / 1000 / 60); // minutes\r\n        prop.putNum(\"minAgeOfWCache\", switchboard.webIndex.minAgeOfDHTOutCache() / 1000 / 60); // minutes\r\n        prop.putNum(\"minAgeOfKCache\", switchboard.webIndex.minAgeOfDHTInCache() / 1000 / 60); // minutes\r\n        prop.putNum(\"maxWaitingWordFlush\", switchboard.getConfigLong(\"maxWaitingWordFlush\", 180));\r\n        prop.put(\"wordCacheMaxCount\", switchboard.getConfigLong(plasmaSwitchboard.WORDCACHE_MAX_COUNT, 20000));\r\n        prop.put(\"wordCacheInitCount\", switchboard.getConfigLong(plasmaSwitchboard.WORDCACHE_INIT_COUNT, 30000));\r\n        prop.put(\"crawlPauseProxy\", switchboard.getConfigLong(plasmaSwitchboard.PROXY_ONLINE_CAUTION_DELAY, 30000));\r\n        prop.put(\"crawlPauseLocalsearch\", switchboard.getConfigLong(plasmaSwitchboard.LOCALSEACH_ONLINE_CAUTION_DELAY, 30000));\r\n        prop.put(\"crawlPauseRemotesearch\", switchboard.getConfigLong(plasmaSwitchboard.REMOTESEARCH_ONLINE_CAUTION_DELAY, 30000));\r\n        prop.putNum(\"crawlPauseProxyCurrent\", (System.currentTimeMillis() - switchboard.proxyLastAccess) / 1000);\r\n        prop.putNum(\"crawlPauseLocalsearchCurrent\", (System.currentTimeMillis() - switchboard.localSearchLastAccess) / 1000);\r\n        prop.putNum(\"crawlPauseRemotesearchCurrent\", (System.currentTimeMillis() - switchboard.remoteSearchLastAccess) / 1000);\r\n        \r\n        // table thread pool settings\n        prop.put(\"pool_0_name\",\"Crawler Pool\");\r\n        prop.put(\"pool_0_maxActive\", switchboard.getConfigLong(\"crawler.MaxActiveThreads\", 0));\r\n        prop.put(\"pool_0_numActive\",switchboard.crawlQueues.size());\n        \r\n        serverThread httpd = switchboard.getThread(\"10_httpd\");\r\n        prop.put(\"pool_1_name\", \"httpd Session Pool\");\r\n        prop.put(\"pool_1_maxActive\", ((serverCore)httpd).getMaxSessionCount());\r\n        prop.put(\"pool_1_numActive\", ((serverCore)httpd).getJobCount());\r\n        \n        prop.put(\"pool\", \"2\");\n        \r\n        long curr_prio = switchboard.getConfigLong(\"javastart_priority\",0);\r\n        prop.put(\"priority_normal\",(curr_prio==0) ? \"1\" : \"0\");\r\n        prop.put(\"priority_below\",(curr_prio==10) ? \"1\" : \"0\");\r\n        prop.put(\"priority_low\",(curr_prio==20) ? \"1\" : \"0\");\r\n        \r\n        // return rewrite values for templates\r\n        return prop;\r\n    }","commit_id":"01e9c7320ec6b02a4bfc4f3485670b4c6676b51c","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"protected void writeBufferToMonetDB() throws KettleException {\n    \tif (data.bufferIndex==0) return;\n    \t\n    \ttry {\n\t    \t// first write the COPY INTO command...\n\t    \t//\n    \t\tStringBuffer cmdBuff = new StringBuffer();\n    \t\tcmdBuff.append( \"COPY \" )\n    \t\t.append(data.bufferIndex)\n    \t\t.append(\" RECORDS INTO \")\n    \t\t.append(data.schemaTable)\n    \t\t.append(\" FROM STDIN USING DELIMITERS '\")\n    \t\t.append(new String(data.separator))\n    \t\t.append(\"','\" + Const.CR + \"','\")\n    \t\t.append(new String(data.quote))\n    \t\t.append(\"';\");\n    \t\tString cmd = cmdBuff.toString();\n\t    \tif (log.isDetailed()) logDetailed(cmd);\n\n        data.out.write('s');\n        data.out.write(cmdBuff.toString());\n        data.out.newLine();\n\n\t    \tfor (int i=0;i<data.bufferIndex;i++) {\n          String buffer = data.rowBuffer[i];\n          data.out.write(buffer);\n\t\t    \tif (log.isRowLevel()) logRowlevel(buffer);\n\t    \t}\n\t    \t\n        // wait for the prompt\n        String error = data.in.waitForPrompt();\n        if(error != null) {\n          throw new KettleException(\"Error loading data: \" + error);\n        }\n        // write an empty line, forces the flush of the stream\n        data.out.writeLine(\"\");\n\n        // again...\n        error = data.in.waitForPrompt();\n        if(error != null) {\n          throw new KettleException(\"Error loading data: \" + error);\n        }\n        data.out.writeLine(\"\");\n\n        // and again, making sure we commit all the records\n        error = data.in.waitForPrompt();\n        if(error != null) {\n          throw new KettleException(\"Error loading data: \" + error);\n        }\n\n\t    \tif (log.isRowLevel()) logRowlevel(Const.CR);\n\t    \t\n\t    \t// reset the buffer pointer...\n\t    \t//\n\t    \tdata.bufferIndex=0;\n    \t}\n    \tcatch(Exception e) {\n    \t\tthrow new KettleException(\"An error occurred writing data to the mclient process\", e);\n    \t}\n\t}","id":10761,"modified_method":"protected void writeBufferToMonetDB() throws KettleException {\n    \tif (data.bufferIndex==0) return;\n    \t\n    \ttry {\n    \t\tStringBuffer cmdBuff = new StringBuffer();\n    \t\t// If the truncate table checkbox is checked, we can to the truncate here.\n    \t\t// MonetDB doees not know the TRUNCATE keyword, but does understand DELETE FROM table\n    \t\tif(meta.isTruncate()) {\n    \t\t\tlogBasic(BaseMessages.getString(PKG, \"MonetDBBulkLoader.writeBufferToMonetDB - Truncating the destination table using SQL DELETE FROM syntax.\", \"\")); //$NON-NLS-1$\n    \t\t\tcmdBuff.append(\"DELETE FROM \" + data.schemaTable + \";\");\n    \t\t}\n    \t\t\n    \t\t\n\t    \t// first write the COPY INTO command...\n\t    \t//\n    \t\t\n    \t\tcmdBuff.append( \"COPY \" )\n    \t\t.append(data.bufferIndex)\n    \t\t.append(\" RECORDS INTO \")\n    \t\t.append(data.schemaTable)\n    \t\t.append(\" FROM STDIN USING DELIMITERS '\")\n    \t\t.append(new String(data.separator))\n    \t\t.append(\"','\" + Const.CR + \"','\")\n    \t\t.append(new String(data.quote))\n    \t\t.append(\"' NULL AS '\" + new String(data.nullrepresentation) + \";\");\n    \t\tString cmd = cmdBuff.toString();\n\t    \tif (log.isDetailed()) logDetailed(cmd);\n\n        data.out.write('s');\n        data.out.write(cmdBuff.toString());\n        data.out.newLine();\n\n\t    \tfor (int i=0;i<data.bufferIndex;i++) {\n          String buffer = data.rowBuffer[i];\n          data.out.write(buffer);\n\t\t    \tif (log.isRowLevel()) logRowlevel(buffer);\n\t    \t}\n\t    \t\n        // wait for the prompt\n        String error = data.in.waitForPrompt();\n        if(error != null) {\n          throw new KettleException(\"Error loading data: \" + error);\n        }\n        // write an empty line, forces the flush of the stream\n        data.out.writeLine(\"\");\n\n        // again...\n        error = data.in.waitForPrompt();\n        if(error != null) {\n          throw new KettleException(\"Error loading data: \" + error);\n        }\n        data.out.writeLine(\"\");\n\n        // and again, making sure we commit all the records\n        error = data.in.waitForPrompt();\n        if(error != null) {\n          throw new KettleException(\"Error loading data: \" + error);\n        }\n\n\t    \tif (log.isRowLevel()) logRowlevel(Const.CR);\n\t    \t\n\t    \t// reset the buffer pointer...\n\t    \t//\n\t    \tdata.bufferIndex=0;\n    \t}\n    \tcatch(Exception e) {\n    \t\tthrow new KettleException(\"An error occurred writing data to the MonetDB API (MAPI) process\", e);\n    \t}\n\t}","commit_id":"014ad80e24e5fba7ba88b602c954fd37492b234f","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public boolean init(StepMetaInterface smi, StepDataInterface sdi)\n\t{\n\t\tmeta=(MonetDBBulkLoaderMeta)smi;\n\t\tdata=(MonetDBBulkLoaderData)sdi;\n\n\t\tif (super.init(smi, sdi))\n\t\t{\t\t\t\n\t\t\tdata.quote = \"\\\"\".getBytes();\n\t\t\tdata.separator = \"|\".getBytes();\n\t\t\tdata.newline = Const.CR.getBytes();\n\n\t\t\tdata.monetDateMeta = new ValueMeta(\"dateMeta\", ValueMetaInterface.TYPE_DATE);\n\t\t\tdata.monetDateMeta.setConversionMask(\"yyyy/MM/dd HH:mm:ss\");\n\t\t\tdata.monetDateMeta.setStringEncoding(meta.getEncoding());\n\n\t\t\tdata.monetNumberMeta = new ValueMeta(\"numberMeta\", ValueMetaInterface.TYPE_NUMBER);\n\t\t\tdata.monetNumberMeta.setConversionMask(\"#.#\");\n\t\t\tdata.monetNumberMeta.setGroupingSymbol(\",\");\n\t\t\tdata.monetNumberMeta.setDecimalSymbol(\".\");\n\t\t\tdata.monetNumberMeta.setStringEncoding(meta.getEncoding());\n\n\t\t\tdata.bufferSize = Const.toInt(environmentSubstitute(meta.getBufferSize()), 100000);\n\n\t\t\t// Allocate the buffer\n\t\t\t// \n\t\t\tdata.rowBuffer = new String[data.bufferSize]; //new byte[data.bufferSize][];\n\t\t\tdata.bufferIndex = 0;\n\t\t\t\n\t\t\t//\n\t\t\tString connectionName = meta.getDbConnectionName();\n\t\t\tif (!Const.isEmpty(connectionName) && connectionName.startsWith(\"${\") && connectionName.endsWith(\"}\")) {\n\t\t\t\tmeta.setDatabaseMeta(localTransMeta.findDatabase(environmentSubstitute(connectionName)));\t\n\t\t\t}\n\t\t\t\n\t\t\t// Schema-table combination...\n\t\t\tdata.schemaTable = meta.getDatabaseMeta(this).getQuotedSchemaTableCombination(\n\t\t\t    environmentSubstitute(meta.getSchemaName()), \n\t\t\t    environmentSubstitute(meta.getTableName())\n\t\t\t  );\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}","id":10762,"modified_method":"public boolean init(StepMetaInterface smi, StepDataInterface sdi)\n\t{\n\t\tmeta=(MonetDBBulkLoaderMeta)smi;\n\t\tdata=(MonetDBBulkLoaderData)sdi;\n\n\t\tif (super.init(smi, sdi))\n\t\t{\t\t\t\n\t\t\tdata.quote = meta.getFieldEnclosure().getBytes();\n\t\t\tdata.separator = meta.getFieldSeparator().getBytes();\n\t\t\tdata.nullrepresentation = meta.getNULLrepresentation().getBytes();\n\t\t\tdata.newline = Const.CR.getBytes();\n\n\t\t\tdata.monetDateMeta = new ValueMeta(\"dateMeta\", ValueMetaInterface.TYPE_DATE);\n\t\t\tdata.monetDateMeta.setConversionMask(\"yyyy/MM/dd HH:mm:ss\");\n\t\t\tdata.monetDateMeta.setStringEncoding(meta.getEncoding());\n\n\t\t\tdata.monetNumberMeta = new ValueMeta(\"numberMeta\", ValueMetaInterface.TYPE_NUMBER);\n\t\t\tdata.monetNumberMeta.setConversionMask(\"#.#\");\n\t\t\tdata.monetNumberMeta.setGroupingSymbol(\",\");\n\t\t\tdata.monetNumberMeta.setDecimalSymbol(\".\");\n\t\t\tdata.monetNumberMeta.setStringEncoding(meta.getEncoding());\n\n\t\t\tdata.bufferSize = Const.toInt(environmentSubstitute(meta.getBufferSize()), 100000);\n\n\t\t\t// Allocate the buffer\n\t\t\t// \n\t\t\tdata.rowBuffer = new String[data.bufferSize]; //new byte[data.bufferSize][];\n\t\t\tdata.bufferIndex = 0;\n\t\t\t\n\t\t\t// Support parameterized database connection names\n\t\t\tString connectionName = meta.getDbConnectionName();\n\t\t\tif (!Const.isEmpty(connectionName) && connectionName.startsWith(\"${\") && connectionName.endsWith(\"}\")) {\n\t\t\t\tmeta.setDatabaseMeta(localTransMeta.findDatabase(environmentSubstitute(connectionName)));\t\n\t\t\t}\n\t\t\t\n\t\t\t// Schema-table combination...\n\t\t\tdata.schemaTable = meta.getDatabaseMeta(this).getQuotedSchemaTableCombination(\n\t\t\t    environmentSubstitute(meta.getSchemaName()), \n\t\t\t    environmentSubstitute(meta.getTableName())\n\t\t\t  );\n\t\t\t\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}","commit_id":"014ad80e24e5fba7ba88b602c954fd37492b234f","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"protected void addRowToBuffer(RowMetaInterface rowMeta, Object[] r) throws KettleException {\n\n    \tByteArrayOutputStream line = new ByteArrayOutputStream(25000);\n    \t\n    \ttry {\n\t    \t// So, we have this output stream to which we can write CSV data to.\n\t    \t// Basically, what we need to do is write the binary data (from strings to it as part of this proof of concept)\n\t    \t//\n    \t\t// The data format required is essentially:\n    \t\t//\n    \t\tfor (int i=0;i<data.keynrs.length;i++) {\n\t\t\t\tif (i>0) {\n\t\t    \t\t// Write a separator \n\t\t    \t\t//\n\t\t    \t\tline.write(data.separator);\n\t\t\t\t}\n\t\t\t\t\n\t    \t\tint index = data.keynrs[i];\n\t    \t\tValueMetaInterface valueMeta = rowMeta.getValueMeta(index);\n\t    \t\tObject valueData = r[index];\n\t    \t\t\n\t    \t\tif (valueData!=null) {\n\t\t    \t\tswitch(valueMeta.getType()) {\n\t\t    \t\tcase ValueMetaInterface.TYPE_STRING :\n\t\t    \t\t\tline.write(data.quote);\n\t\t    \t\t\t// we have to convert to strings to escape '\\'s\n\t    \t\t\t\tString str = valueMeta.getString(valueData);\n\t    \t\t\t\tif( str == null ) {\n\t    \t\t\t\t\tline.write(\"null\".getBytes());\n\t    \t\t\t\t} else {\n\t\t    \t\t\t\t// escape any backslashes\n\t\t\t    \t\t\tstr = str.replace(\"\\\\\", \"\\\\\\\\\");\n\t\t\t    \t\t\tstr = str.replace(\"\\\"\", \"\\\\\\\"\");\n\t\t\t    \t\t\tif(meta.isAutoStringWidths()) {\n\t\t\t    \t\t\t\tint len = valueMeta.getLength();\n\t\t\t    \t\t\t\tif( len < 1 ) {\n\t\t\t    \t\t\t\t\tlen = MonetDBDatabaseMeta.DEFAULT_VARCHAR_LENGTH;\n\t\t\t    \t\t\t\t}\n\t\t\t    \t\t\t\tif( str.length() > len ) {\n\t\t\t    \t\t\t\t\t// TODO log this event\n\t\t\t    \t\t\t\t\tstr = str.substring(0, len);\n\t\t\t    \t\t\t\t}\n\t\t\t    \t\t\t\tline.write(str.getBytes(meta.getEncoding()));\n\t\t\t    \t\t\t} else {\n\t\t\t    \t\t\t\tline.write(str.getBytes(meta.getEncoding()));\n\t\t\t    \t\t\t}\n\t    \t\t\t\t}\n\t\t    \t\t\tline.write(data.quote);\n\t\t    \t\t\tbreak;\n\t\t    \t\tcase ValueMetaInterface.TYPE_INTEGER:\n\t\t    \t\t\tif (valueMeta.isStorageBinaryString() && meta.getFieldFormatOk()[i]) {\n\t\t    \t\t\t\tline.write((byte[])valueData);\n\t\t    \t\t\t} else {\n\t\t    \t\t\t\tLong value = valueMeta.getInteger(valueData);\n\t\t    \t\t\t\tif( value == null ) {\n\t\t    \t\t\t\t\tline.write(\"null\".getBytes());\n\t\t    \t\t\t\t} else {\n\t\t    \t\t\t\t\tline.write(Long.toString(value).getBytes());\n\t\t    \t\t\t\t}\n\t\t    \t\t\t}\n\t\t    \t\t\tbreak;\n\t\t    \t\tcase ValueMetaInterface.TYPE_DATE:\n\t\t    \t\t\t// Keep the data format as indicated.\n\t\t    \t\t\t//\n\t\t    \t\t\tif (valueMeta.isStorageBinaryString() && meta.getFieldFormatOk()[i]) {\n\t\t    \t\t\t\tline.write((byte[])valueData);\n\t\t    \t\t\t} else {\n\t\t    \t\t\t\tDate value = valueMeta.getDate(valueData);\n\t\t    \t\t\t\t// Convert it to the MonetDB date format \"yyyy/MM/dd HH:mm:ss\"\n\t\t    \t\t\t\tif( value == null ) {\n\t\t    \t\t\t\t\tline.write(\"null\".getBytes());\n\t\t    \t\t\t\t} else {\n\t\t    \t\t\t\t\tline.write(data.monetDateMeta.getString(value).getBytes());\n\t\t    \t\t\t\t}\n\t\t    \t\t\t}\n\t\t    \t\t\tbreak;\n\t\t    \t\tcase ValueMetaInterface.TYPE_BOOLEAN:\n\t    \t\t\t\t{\n\t\t    \t\t\t\tBoolean value = valueMeta.getBoolean(valueData);\n\t\t    \t\t\t\tif( value == null ) {\n\t\t    \t\t\t\t\tline.write(\"null\".getBytes());\n\t\t    \t\t\t\t} else {\n\t\t    \t\t\t\t\tif( value.booleanValue() ) {\n\t\t    \t\t\t\t\t\tline.write(\"Y\".getBytes());\n\t\t    \t\t\t\t\t} else {\n\t\t    \t\t\t\t\t\tline.write(\"N\".getBytes());\n\t\t    \t\t\t\t\t}\n\t\t    \t\t\t\t}\n\t\t    \t\t\t}\n\t\t    \t\t\tbreak;\n\t\t    \t\tcase ValueMetaInterface.TYPE_NUMBER:\n\t\t    \t\t\tif (valueMeta.isStorageBinaryString() && meta.getFieldFormatOk()[i]) {\n\t\t    \t\t\t\tline.write((byte[])valueData);\n\t\t    \t\t\t} else {\n\t\t    \t\t\t\tDouble value = valueMeta.getNumber(valueData);\n\t\t    \t\t\t\tif( value == null ) {\n\t\t    \t\t\t\t\tline.write(\"null\".getBytes());\n\t\t    \t\t\t\t} else {\n\t\t    \t\t\t\t\tline.write(Double.toString(value).getBytes());\n\t\t    \t\t\t\t}\n\t\t    \t\t\t}\n\t\t    \t\t\tbreak;\n\t\t    \t\tcase ValueMetaInterface.TYPE_BIGNUMBER:\n\t\t    \t\t\tif (valueMeta.isStorageBinaryString() && meta.getFieldFormatOk()[i]) {\n\t\t    \t\t\t\tline.write((byte[])valueData);\n\t\t    \t\t\t} else {\n\t\t    \t\t\t\tString value = valueMeta.getString(valueData);\n\t\t    \t\t\t\tif( value == null ) {\n\t\t    \t\t\t\t\tline.write(\"null\".getBytes());\n\t\t    \t\t\t\t} else {\n\t\t    \t\t\t\t\tline.write(value.getBytes());\n\t\t    \t\t\t\t}\n\t\t    \t\t\t}\n\t\t    \t\t\tbreak;\n\t\t    \t\t}\n\t    \t\t} else {\n    \t\t\t\tline.write(\"null\".getBytes());\n\t    \t\t}\n\t    \t}\n\t\t\t\n\t\t\t// finally write a newline\n\t\t\t//\n\t\t\tline.write(data.newline);\n\n\t\t\t// Now that we have the line, grab the content and store it in the buffer...\n\t\t\t//\n\t\t\tdata.rowBuffer[data.bufferIndex] = line.toString(); //line.toByteArray();\n\t\t\tdata.bufferIndex++;\n    \t}\n    \tcatch(Exception e)\n    \t{\n    \t\tthrow new KettleException(\"Error serializing rows of data to the psql command\", e);\n    \t}\n\t\t\n\t}","id":10763,"modified_method":"protected void addRowToBuffer(RowMetaInterface rowMeta, Object[] r) throws KettleException {\n\n    \tByteArrayOutputStream line = new ByteArrayOutputStream(25000);\n    \t\n    \ttry {\n\t    \t// So, we have this output stream to which we can write CSV data to.\n\t    \t// Basically, what we need to do is write the binary data (from strings to it as part of this proof of concept)\n\t    \t//\n    \t\t// The data format required is essentially:\n    \t\t//\n    \t\tfor (int i=0;i<data.keynrs.length;i++) {\n\t\t\t\tif (i>0) {\n\t\t    \t\t// Write a separator \n\t\t    \t\t//\n\t\t    \t\tline.write(data.separator);\n\t\t\t\t}\n\t\t\t\t\n\t    \t\tint index = data.keynrs[i];\n\t    \t\tValueMetaInterface valueMeta = rowMeta.getValueMeta(index);\n\t    \t\tObject valueData = r[index];\n\t    \t\t\n\t    \t\tif (valueData!=null) {\n\t\t    \t\tswitch(valueMeta.getType()) {\n\t\t    \t\tcase ValueMetaInterface.TYPE_STRING :\n\t\t    \t\t\tline.write(data.quote);\n\t\t    \t\t\t// we have to convert to strings to escape '\\'s\n\t    \t\t\t\tString str = valueMeta.getString(valueData);\n\t    \t\t\t\tif( str == null ) {\n\t    \t\t\t\t\tline.write(\"null\".getBytes());\n\t    \t\t\t\t} else {\n\t\t    \t\t\t\t// escape any backslashes\n\t\t\t    \t\t\tstr = str.replace(\"\\\\\", \"\\\\\\\\\");\n\t\t\t    \t\t\tstr = str.replace(\"\\\"\", \"\\\\\\\"\");\n\t\t\t    \t\t\tif(meta.isAutoStringWidths()) {\n\t\t\t    \t\t\t\tint len = valueMeta.getLength();\n\t\t\t    \t\t\t\tif( len < 1 ) {\n\t\t\t    \t\t\t\t\tlen = MonetDBDatabaseMeta.DEFAULT_VARCHAR_LENGTH;\n\t\t\t    \t\t\t\t}\n\t\t\t    \t\t\t\tif( str.length() > len ) {\n\t\t\t    \t\t\t\t\t// TODO log this event\n\t\t\t    \t\t\t\t\tstr = str.substring(0, len);\n\t\t\t    \t\t\t\t}\n\t\t\t    \t\t\t\tline.write(str.getBytes(meta.getEncoding()));\n\t\t\t    \t\t\t} else {\n\t\t\t    \t\t\t\tline.write(str.getBytes(meta.getEncoding()));\n\t\t\t    \t\t\t}\n\t    \t\t\t\t}\n\t\t    \t\t\tline.write(data.quote);\n\t\t    \t\t\tbreak;\n\t\t    \t\tcase ValueMetaInterface.TYPE_INTEGER:\n\t\t    \t\t\tif (valueMeta.isStorageBinaryString() && meta.getFieldFormatOk()[i]) {\n\t\t    \t\t\t\tline.write((byte[])valueData);\n\t\t    \t\t\t} else {\n\t\t    \t\t\t\tLong value = valueMeta.getInteger(valueData);\n\t\t    \t\t\t\tif( value == null ) {\n\t\t    \t\t\t\t\tline.write(\"null\".getBytes());\n\t\t    \t\t\t\t} else {\n\t\t    \t\t\t\t\tline.write(Long.toString(value).getBytes());\n\t\t    \t\t\t\t}\n\t\t    \t\t\t}\n\t\t    \t\t\tbreak;\n\t\t    \t\t\t//\n\t\t    \t\t\t// TODO: Check MonetDB API for true column types and help set or suggest the correct formatter pattern to the user.\n\t\t    \t\t\t//\n\t\t    \t\tcase ValueMetaInterface.TYPE_DATE:\n\t\t    \t\t\t// Keep the data format as indicated.\n\t\t    \t\t\t//\n\t\t    \t\t\tif (valueMeta.isStorageBinaryString() && meta.getFieldFormatOk()[i]) {\n\t\t    \t\t\t\tline.write((byte[])valueData);\n\t\t    \t\t\t} else {\n\t\t    \t\t\t\t//Date value = valueMeta.getDate(valueData);\n\t\t    \t\t\t\t// Convert it to the MonetDB date format \"yyyy/MM/dd HH:mm:ss\"\n\t\t    \t\t\t\t//if( value == null ) {\n\t\t    \t\t\t\t//\tline.write(\"null\".getBytes());\n\t\t    \t\t\t\t//} else {\n\t\t    \t\t\t\t//\tline.write(data.monetDateMeta.getString(value).getBytes());\n\t\t    \t\t\t\t//}\n\n\t\t    \t\t\t\t// MonetDB makes a distinction between the acceptable incoming string formats for\n\t\t    \t\t\t\t// the type DATE and TIMESTAMP.\n\t\t    \t\t\t\t//\n\t\t    \t\t\t\t//    DATE - for date values (e.g., 2012-12-21)\n\t\t    \t\t\t\t//    TIME - for time values (e.g., 15:51:36)\n\t\t    \t\t\t\t//    TIMESTAMP - DATE and TIME put together (e.g., 2012-12-21  15:51:36)\n\t\t    \t\t\t\t// We throw this responsibility on the user for formatting.\n\t\t    \t\t\t\tString str1 = valueMeta.getString(valueData);\n\t\t    \t\t\t\tif( str1 == null ) {\n\t\t    \t\t\t\t\tline.write(\"null\".getBytes());\n\t\t    \t\t\t\t} else {\t\t    \t\t\t\t\n\t\t    \t\t\t\t\t// escape any backslashes\n\t\t\t\t    \t\t\tstr1 = str1.replace(\"\\\\\", \"\\\\\\\\\");\n\t\t\t\t    \t\t\tif(meta.isAutoStringWidths()) {\n\t\t\t\t    \t\t\t\tint len = valueMeta.getLength();\n\t\t\t\t    \t\t\t\tif( len < 1 ) {\n\t\t\t\t    \t\t\t\t\tlen = MonetDBDatabaseMeta.DEFAULT_VARCHAR_LENGTH;\n\t\t\t\t    \t\t\t\t}\n\t\t\t\t    \t\t\t\tif( str1.length() > len ) {\n\t\t\t\t    \t\t\t\t\t// TODO log this event\n\t\t\t\t    \t\t\t\t\tstr1 = str1.substring(0, len);\n\t\t\t\t    \t\t\t\t}\n\t\t\t\t    \t\t\t\tline.write(str1.getBytes(meta.getEncoding()));\n\t\t\t\t    \t\t\t} else {\n\t\t\t\t    \t\t\t\tline.write(str1.getBytes(meta.getEncoding()));\n\t\t\t\t    \t\t\t}\t\t    \t\t\t\t\t\n\t\t    \t\t\t\t}\n\t\t    \t\t\t}\n\t\t    \t\t\tbreak;\n\t\t    \t\tcase ValueMetaInterface.TYPE_BOOLEAN:\n\t    \t\t\t\t{\n\t\t    \t\t\t\tBoolean value = valueMeta.getBoolean(valueData);\n\t\t    \t\t\t\tif( value == null ) {\n\t\t    \t\t\t\t\tline.write(\"null\".getBytes());\n\t\t    \t\t\t\t} else {\n\t\t    \t\t\t\t\tif( value.booleanValue() ) {\n\t\t    \t\t\t\t\t\tline.write(\"Y\".getBytes());\n\t\t    \t\t\t\t\t} else {\n\t\t    \t\t\t\t\t\tline.write(\"N\".getBytes());\n\t\t    \t\t\t\t\t}\n\t\t    \t\t\t\t}\n\t\t    \t\t\t}\n\t\t    \t\t\tbreak;\n\t\t    \t\tcase ValueMetaInterface.TYPE_NUMBER:\n\t\t    \t\t\tif (valueMeta.isStorageBinaryString() && meta.getFieldFormatOk()[i]) {\n\t\t    \t\t\t\tline.write((byte[])valueData);\n\t\t    \t\t\t} else {\n\t\t    \t\t\t\tDouble value = valueMeta.getNumber(valueData);\n\t\t    \t\t\t\tif( value == null ) {\n\t\t    \t\t\t\t\tline.write(\"null\".getBytes());\n\t\t    \t\t\t\t} else {\n\t\t    \t\t\t\t\tline.write(Double.toString(value).getBytes());\n\t\t    \t\t\t\t}\n\t\t    \t\t\t}\n\t\t    \t\t\tbreak;\n\t\t    \t\tcase ValueMetaInterface.TYPE_BIGNUMBER:\n\t\t    \t\t\tif (valueMeta.isStorageBinaryString() && meta.getFieldFormatOk()[i]) {\n\t\t    \t\t\t\tline.write((byte[])valueData);\n\t\t    \t\t\t} else {\n\t\t    \t\t\t\tString value = valueMeta.getString(valueData);\n\t\t    \t\t\t\tif( value == null ) {\n\t\t    \t\t\t\t\tline.write(\"null\".getBytes());\n\t\t    \t\t\t\t} else {\n\t\t    \t\t\t\t\tline.write(value.getBytes());\n\t\t    \t\t\t\t}\n\t\t    \t\t\t}\n\t\t    \t\t\tbreak;\n\t\t    \t\t}\n\t    \t\t} else {\n    \t\t\t\tline.write(\"null\".getBytes());\n\t    \t\t}\n\t    \t}\n\t\t\t\n\t\t\t// finally write a newline\n\t\t\t//\n\t\t\tline.write(data.newline);\n\n\t\t\t// Now that we have the line, grab the content and store it in the buffer...\n\t\t\t//\n\t\t\tdata.rowBuffer[data.bufferIndex] = line.toString(); //line.toByteArray();\n\t\t\tdata.bufferIndex++;\n    \t}\n    \tcatch(Exception e)\n    \t{\n    \t\tthrow new KettleException(\"Error serializing rows of data to the MonetDB API (MAPI).\", e);\n    \t}\n\t\t\n\t}","commit_id":"014ad80e24e5fba7ba88b602c954fd37492b234f","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public ComboVar addConnectionLine(Composite parent, Control previous, int middle, int margin, \n    \t      final Class<? extends DatabaseInterface> databaseType, final TransMeta transMeta) {\n\t    final ComboVar wConnection;\n\t    final FormData fdlConnection, fdbConnection, fdeConnection, fdConnection;\n\n\t    wConnection = new ComboVar(transMeta, parent, SWT.BORDER );\n\t    props.setLook(wConnection);\n\n\t    addDatabases(wConnection, null);\n\n\t    Label wlConnection = new Label(parent, SWT.RIGHT);\n\t    wlConnection.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Connection.Label\")); //$NON-NLS-1$\n\t    props.setLook(wlConnection);\n\t    fdlConnection = new FormData();\n\t    fdlConnection.left = new FormAttachment(0, 0);\n\t    fdlConnection.right = new FormAttachment(middle, -margin);\n\t    if (previous != null)\n\t      fdlConnection.top = new FormAttachment(previous, margin);\n\t    else\n\t      fdlConnection.top = new FormAttachment(0, 0);\n\t    wlConnection.setLayoutData(fdlConnection);\n\n\t    // \n\t    // NEW button\n\t    //\n\t    Button wbnConnection = new Button(parent, SWT.RIGHT);\n\t    wbnConnection.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.NewConnectionButton.Label\")); //$NON-NLS-1$\n\t    wbnConnection.addSelectionListener(new SelectionAdapter() {\n\t      public void widgetSelected(SelectionEvent e) {\n\t        DatabaseMeta databaseMeta = new DatabaseMeta();\n\t        databaseMeta.shareVariablesWith(transMeta);\n\t        DatabaseDialog cid = getDatabaseDialog(shell);\n\t        cid.setDatabaseMeta(databaseMeta);\n\t        cid.setModalDialog(true);\n\t        if (cid.open() != null) {\n\t          transMeta.addDatabase(databaseMeta);\n\t          wConnection.removeAll();\n\t          addDatabases(wConnection, databaseType);\n\t          selectDatabase(wConnection, databaseMeta.getName());\n\t        }\n\t      }\n\t    });\n\t    fdbConnection = new FormData();\n\t    fdbConnection.right = new FormAttachment(100, 0);\n\t    if (previous != null)\n\t      fdbConnection.top = new FormAttachment(previous, margin);\n\t    else\n\t      fdbConnection.top = new FormAttachment(0, 0);\n\t    wbnConnection.setLayoutData(fdbConnection);\n\n\t    //\n\t    // Edit button\n\t    //\n\t    Button wbeConnection = new Button(parent, SWT.RIGHT);\n\t    wbeConnection.setText(BaseMessages.getString(PKG, \"BaseStepDialog.EditConnectionButton.Label\")); //$NON-NLS-1$\n\t    wbeConnection.addSelectionListener(new SelectionAdapter() {\n\t      public void widgetSelected(SelectionEvent e) {\n\t        DatabaseMeta databaseMeta = transMeta.findDatabase(wConnection.getText());\n\t        if (databaseMeta != null) {\n\t          databaseMeta.shareVariablesWith(transMeta);\n\t          \n\t          DatabaseDialog cid = getDatabaseDialog(shell);\n\t          cid.setDatabaseMeta(databaseMeta);\n\t          cid.setModalDialog(true);\n\t          if (cid.open() != null) {\n\t            wConnection.removeAll();\n\t            addDatabases(wConnection, null);\n\t            selectDatabase(wConnection, databaseMeta.getName());\n\t          }\n\t        }\n\t      }\n\t    });\n\t    fdeConnection = new FormData();\n\t    fdeConnection.right = new FormAttachment(wbnConnection, -margin);\n\t    if (previous != null)\n\t      fdeConnection.top = new FormAttachment(previous, margin);\n\t    else\n\t      fdeConnection.top = new FormAttachment(0, 0);\n\t    wbeConnection.setLayoutData(fdeConnection);\n\n\t    //\n\t    // what's left of the line: combo box\n\t    //\n\t    fdConnection = new FormData();\n\t    fdConnection.left = new FormAttachment(middle, 0);\n\t    if (previous != null)\n\t      fdConnection.top = new FormAttachment(previous, margin);\n\t    else\n\t      fdConnection.top = new FormAttachment(0, 0);\n\t    fdConnection.right = new FormAttachment(wbeConnection, -margin);\n\t    wConnection.setLayoutData(fdConnection);\n\n\t    return wConnection;\n\t  }","id":10764,"modified_method":"public ComboVar addConnectionLine(Composite parent, Control previous, int middle, int margin, \n    \t      final Class<? extends DatabaseInterface> databaseType, final TransMeta transMeta) {\n\t    final ComboVar wConnection;\n\t    final FormData fdlConnection, fdbConnection, fdeConnection, fdConnection;\n\t    \n\t    wConnection = new ComboVar(transMeta, parent, SWT.BORDER );\n\t    props.setLook(wConnection);\n\n\t    addDatabases(wConnection, null);\n\n\t    //\n\t    // Database connection (Label)\n\t    //\n\t    Label wlConnection = new Label(parent, SWT.LEFT);\n\t    wlConnection.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Connection.Label\")); //$NON-NLS-1$\n\t    props.setLook(wlConnection);\n\n\n\t    // \n\t    // New (Button)\n\t    //\n\t    Button wbnConnection = new Button(parent, SWT.RIGHT);\n\t    wbnConnection.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.NewConnectionButton.Label\")); //$NON-NLS-1$\n\t    wbnConnection.addSelectionListener(new SelectionAdapter() {\n\t      public void widgetSelected(SelectionEvent e) {\n\t        DatabaseMeta databaseMeta = new DatabaseMeta();\n\t        databaseMeta.shareVariablesWith(transMeta);\n\t        DatabaseDialog cid = getDatabaseDialog(shell);\n\t        cid.setDatabaseMeta(databaseMeta);\n\t        cid.setModalDialog(true);\n\t        if (cid.open() != null) {\n\t          transMeta.addDatabase(databaseMeta);\n\t          wConnection.removeAll();\n\t          addDatabases(wConnection, databaseType);\n\t          selectDatabase(wConnection, databaseMeta.getName());\n\t        }\n\t      }\n\t    });\n\n\t    //\n\t    // Edit (Button)\n\t    //\n\t    Button wbeConnection = new Button(parent, SWT.RIGHT);\n\t    wbeConnection.setText(BaseMessages.getString(PKG, \"BaseStepDialog.EditConnectionButton.Label\")); //$NON-NLS-1$\n\t    wbeConnection.addSelectionListener(new SelectionAdapter() {\n\t      public void widgetSelected(SelectionEvent e) {\n\t        DatabaseMeta databaseMeta = transMeta.findDatabase(wConnection.getText());\n\t        if (databaseMeta != null) {\n\t          databaseMeta.shareVariablesWith(transMeta);\n\t          \n\t          DatabaseDialog cid = getDatabaseDialog(shell);\n\t          cid.setDatabaseMeta(databaseMeta);\n\t          cid.setModalDialog(true);\n\t          if (cid.open() != null) {\n\t            wConnection.removeAll();\n\t            addDatabases(wConnection, null);\n\t            selectDatabase(wConnection, databaseMeta.getName());\n\t          }\n\t        }\n\t      }\n\t    });\n\t    \n\t    //\n\t    // Database connection (Label layout)\n\t    //\n\t    fdlConnection = new FormData();\n\t    fdlConnection.left = new FormAttachment(0, margin);  // attaches to the left of the bounding container\n\t    if (previous != null)\n\t      fdlConnection.top = new FormAttachment(previous, margin+10);\n\t    else\n\t      fdlConnection.top = new FormAttachment(0, 0);\n\t    wlConnection.setLayoutData(fdlConnection);\n\n\t    //\n\t    // New (Button layout)\n\t    // \n\t    fdbConnection = new FormData();\n\t    fdbConnection.right = new FormAttachment(100, -margin);\n\t    if (previous != null)\n\t      fdbConnection.top = new FormAttachment(previous, margin);\n\t    else\n\t      fdbConnection.top = new FormAttachment(0, 0);\n\t    wbnConnection.setLayoutData(fdbConnection);\n\t    \t    \n\t    //\n\t    // Edit (Button layout)\n\t    //\n\t    fdeConnection = new FormData();\n\t    fdeConnection.right = new FormAttachment(wbnConnection, -margin);\n\t    if (previous != null)\n\t      fdeConnection.top = new FormAttachment(previous, margin);\n\t    else\n\t      fdeConnection.top = new FormAttachment(0, 0);\n\t    wbeConnection.setLayoutData(fdeConnection);\n\n\t    //\n\t    // Connection (Combo Box layout)\n\t    //\n\t    //\tThe right side of the Combo Box is attached to the Edit button\n\t    //  The left side of the Combo Box is attached to the side of the database connection label\n\t    //  Effectively, it resizes the combo box between the two components.\n\t    fdConnection = new FormData();\n\t    //fdConnection.height = fieldHeight;\n\t    fdConnection.left = new FormAttachment(middle, margin);\n\t    fdConnection.right = new FormAttachment(wbeConnection, -margin);\n\t    if (previous != null)\n\t      fdConnection.top = new FormAttachment(previous, margin+10);\n\t    else\n\t      fdConnection.top = new FormAttachment(wlConnection, margin);\n\n\t    wConnection.setLayoutData(fdConnection);\n\n\t    return wConnection;\n\t  }","commit_id":"014ad80e24e5fba7ba88b602c954fd37492b234f","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"/**\n\t * Copy information from the meta-data input to the dialog fields.\n\t */\n\tpublic void getData()\n\t{\n\t\tint i;\n\t\tif(log.isDebug()) logDebug(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Log.GettingKeyInfo\")); //$NON-NLS-1$\n\n\t\twBufferSize.setText(\"\" + input.getBufferSize());   //$NON-NLS-1$\n\n\t\tif (input.getFieldTable() != null) {\n\t\t\tfor (i = 0; i < input.getFieldTable().length; i++)\n\t\t\t{\n\t\t\t\tTableItem item = wReturn.table.getItem(i);\n\t\t\t\tif (input.getFieldTable()[i] != null)\n\t\t\t\t\titem.setText(1, input.getFieldTable()[i]);\n\t\t\t\tif (input.getFieldStream()[i] != null)\n\t\t\t\t\titem.setText(2, input.getFieldStream()[i]);\n\t\t\t\titem.setText(3, input.getFieldFormatOk()[i]?\"Y\":\"N\");\n\t\t\t}\n\t\t}\n\n\t\tif (input.getDatabaseMeta() != null)\n\t\t\twConnection.setText(input.getDatabaseMeta().getName());\n\t\telse\n\t\t{\n\t\t\tif (transMeta.nrDatabases() == 1)\n\t\t\t{\n\t\t\t\twConnection.setText(transMeta.getDatabase(0).getName());\n\t\t\t}\n\t\t}\n        if (input.getSchemaName() != null) wSchema.setText(input.getSchemaName());\n\t\tif (input.getTableName() != null) wTable.setText(input.getTableName());\n\t\tif (input.getLogFile() != null) wLogFile.setText(input.getLogFile());\n\t\tif (input.getEncoding() != null) wEncoding.setText(input.getEncoding());\n\t\twTruncate.setSelection(input.isTruncate());\n//\t\twAutoSchema.setSelection(input.isAutoSchema());\n//\t\twAutoStringWidths.setSelection(input.isAutoStringWidths());\n\t\t\n\t\twStepname.selectAll();\n\t\twReturn.setRowNums();\n\t\twReturn.optWidth(true);\n\t}","id":10765,"modified_method":"/**\n\t * Copy information from the meta-data input to the dialog fields.\n\t */\n\tpublic void getData()\n\t{\n\t\tint i;\n\t\tif(log.isDebug()) logDebug(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Log.GettingKeyInfo\")); //$NON-NLS-1$\n\n\n\n\t\tif (input.getFieldTable() != null) {\n\t\t\tfor (i = 0; i < input.getFieldTable().length; i++)\n\t\t\t{\n\t\t\t\tTableItem item = wReturn.table.getItem(i);\n\t\t\t\tif (input.getFieldTable()[i] != null)\n\t\t\t\t\titem.setText(1, input.getFieldTable()[i]);\n\t\t\t\tif (input.getFieldStream()[i] != null)\n\t\t\t\t\titem.setText(2, input.getFieldStream()[i]);\n\t\t\t\titem.setText(3, input.getFieldFormatOk()[i]?\"Y\":\"N\");\n\t\t\t}\n\t\t}\n\n\t\tif (input.getDatabaseMeta() != null)\n\t\t\twConnection.setText(input.getDatabaseMeta().getName());\n\t\telse\n\t\t{\n\t\t\tif (transMeta.nrDatabases() == 1)\n\t\t\t{\n\t\t\t\twConnection.setText(transMeta.getDatabase(0).getName());\n\t\t\t}\n\t\t}\n\t\t// General Settings Tab values from step meta-data configuration.\n\t\tif (input.getSchemaName() != null) wSchema.setText(input.getSchemaName());\n\t\tif (input.getTableName() != null) wTable.setText(input.getTableName());\n\t\twBufferSize.setText(\"\" + input.getBufferSize());   //$NON-NLS-1$\n\t\tif (input.getLogFile() != null) wLogFile.setText(input.getLogFile());\n\t\twTruncate.setSelection(input.isTruncate());\t\t\n\t\t\n\t\t// MonetDB mclient Settings tab\n\t\tif (input.getFieldSeparator() != null) wFieldSeparator.setText(input.getFieldSeparator());\n\t\tif (input.getFieldEnclosure() != null) wFieldEnclosure.setText(input.getFieldEnclosure());\n\t\tif (input.getNULLrepresentation() != null) wNULLrepresentation.setText(input.getNULLrepresentation());\n\t\tif (input.getEncoding() != null) wEncoding.setText(input.getEncoding());\n\t\t\t\t\n\t\twStepname.selectAll();\n\t\twReturn.setRowNums();\n\t\twReturn.optWidth(true);\n\t}","commit_id":"014ad80e24e5fba7ba88b602c954fd37492b234f","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String open()\n\t{\n\t\tShell parent = getParent();\n\t\tDisplay display = parent.getDisplay();\n\n\t\tshell = new Shell(parent, SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX | SWT.MIN);\n \t\tprops.setLook(shell);\n        setShellImage(shell, input);\n\n\t\tModifyListener lsMod = new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\tinput.setChanged();\n\t\t\t}\n\t\t};\n\t\tFocusListener lsFocusLost = new FocusAdapter() {\n\t\t\tpublic void focusLost(FocusEvent arg0) {\n\t\t\t\tsetTableFieldCombo();\n\t\t\t}\n\t\t};\n\t\tchanged = input.hasChanged();\n\n\t\tFormLayout formLayout = new FormLayout();\n\t\tformLayout.marginWidth = Const.FORM_MARGIN;\n\t\tformLayout.marginHeight = Const.FORM_MARGIN;\n\n\t\tshell.setLayout(formLayout);\n\t\tshell.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Shell.Title\")); //$NON-NLS-1$\n\n\t\tint middle = props.getMiddlePct();\n\t\tint margin = Const.MARGIN;\n\n\t\t// Stepname line\n\t\twlStepname = new Label(shell, SWT.RIGHT);\n\t\twlStepname.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Stepname.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlStepname);\n\t\tfdlStepname = new FormData();\n\t\tfdlStepname.left = new FormAttachment(0, 0);\n\t\tfdlStepname.right = new FormAttachment(middle, -margin);\n\t\tfdlStepname.top = new FormAttachment(0, margin);\n\t\twlStepname.setLayoutData(fdlStepname);\n\t\twStepname = new Text(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\twStepname.setText(stepname);\n \t\tprops.setLook(wStepname);\n\t\twStepname.addModifyListener(lsMod);\n\t\tfdStepname = new FormData();\n\t\tfdStepname.left = new FormAttachment(middle, 0);\n\t\tfdStepname.top = new FormAttachment(0, margin);\n\t\tfdStepname.right = new FormAttachment(100, 0);\n\t\twStepname.setLayoutData(fdStepname);\n\n\t\t// Connection line\n\t\twConnection = addConnectionLine(shell, wStepname, middle, margin, null, transMeta);\n\t\tif (input.getDatabaseMeta()==null && transMeta.nrDatabases()==1) wConnection.select(0);\n\t\twConnection.addModifyListener(lsMod);\n\n        // Schema line...\n        wlSchema=new Label(shell, SWT.RIGHT);\n        wlSchema.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.TargetSchema.Label\")); //$NON-NLS-1$\n        props.setLook(wlSchema);\n        fdlSchema=new FormData();\n        fdlSchema.left = new FormAttachment(0, 0);\n        fdlSchema.right= new FormAttachment(middle, -margin);\n        fdlSchema.top  = new FormAttachment(wConnection, margin*2);\n        wlSchema.setLayoutData(fdlSchema);\n\n        wSchema=new TextVar(transMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n        props.setLook(wSchema);\n        wSchema.addModifyListener(lsMod);\n    \twSchema.addFocusListener(lsFocusLost);\n        fdSchema=new FormData();\n        fdSchema.left = new FormAttachment(middle, 0);\n        fdSchema.top  = new FormAttachment(wConnection, margin*2);\n        fdSchema.right= new FormAttachment(100, 0);\n        wSchema.setLayoutData(fdSchema);\n\n\t\t// Table line...\n\t\twlTable = new Label(shell, SWT.RIGHT);\n\t\twlTable.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.TargetTable.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlTable);\n\t\tfdlTable = new FormData();\n\t\tfdlTable.left = new FormAttachment(0, 0);\n\t\tfdlTable.right = new FormAttachment(middle, -margin);\n\t\tfdlTable.top = new FormAttachment(wSchema, margin);\n\t\twlTable.setLayoutData(fdlTable);\n\t\t\n\t\twbTable = new Button(shell, SWT.PUSH | SWT.CENTER);\n \t\tprops.setLook(wbTable);\n\t\twbTable.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Browse.Button\")); //$NON-NLS-1$\n\t\tfdbTable = new FormData();\n\t\tfdbTable.right = new FormAttachment(100, 0);\n\t\tfdbTable.top = new FormAttachment(wSchema, margin);\n\t\twbTable.setLayoutData(fdbTable);\n\t\twTable = new TextVar(transMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n \t\tprops.setLook(wTable);\n\t\twTable.addModifyListener(lsMod);\n\t\twTable.addFocusListener(lsFocusLost);\n\t\tfdTable = new FormData();\n\t\tfdTable.left = new FormAttachment(middle, 0);\n\t\tfdTable.top = new FormAttachment(wSchema, margin);\n\t\tfdTable.right = new FormAttachment(wbTable, -margin);\n\t\twTable.setLayoutData(fdTable);\n\n\t\t// Buffer size file line\n\t\twlBufferSize = new Label(shell, SWT.RIGHT);\n\t\twlBufferSize.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.BufferSize.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlBufferSize);\n\t\tfdlBufferSize = new FormData();\n\t\tfdlBufferSize.left = new FormAttachment(0, 0);\n\t\tfdlBufferSize.top = new FormAttachment(wbTable, margin);\n\t\tfdlBufferSize.right = new FormAttachment(middle, -margin);\n\t\twlBufferSize.setLayoutData(fdlBufferSize);\n\t\twBufferSize = new TextVar(transMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n \t\tprops.setLook(wBufferSize);\n\t\twBufferSize.addModifyListener(lsMod);\n\t\tfdBufferSize = new FormData();\n\t\tfdBufferSize.left = new FormAttachment(middle, 0);\n\t\tfdBufferSize.top = new FormAttachment(wbTable, margin);\n\t\tfdBufferSize.right = new FormAttachment(100, 0);\n\t\twBufferSize.setLayoutData(fdBufferSize);\t\t\t\t\t\t\n\n\t\t// Log file line\n\t\twlLogFile = new Label(shell, SWT.RIGHT);\n\t\twlLogFile.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.LogFile.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlLogFile);\n\t\tfdlLogFile = new FormData();\n\t\tfdlLogFile.left = new FormAttachment(0, 0);\n\t\tfdlLogFile.top = new FormAttachment(wBufferSize, margin);\n\t\tfdlLogFile.right = new FormAttachment(middle, -margin);\n\t\twlLogFile.setLayoutData(fdlLogFile);\n\t\twbLogFile = new Button(shell, SWT.PUSH | SWT.CENTER);\n \t\tprops.setLook(wbLogFile);\n\t\twbLogFile.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Browse.Button\")); //$NON-NLS-1$\n\t\tfdbLogFile = new FormData();\n\t\tfdbLogFile.right = new FormAttachment(100, 0);\n\t\tfdbLogFile.top = new FormAttachment(wBufferSize, margin);\n\t\twbLogFile.setLayoutData(fdbLogFile);\n\t\twLogFile = new TextVar(transMeta, shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n \t\tprops.setLook(wLogFile);\n\t\twLogFile.addModifyListener(lsMod);\n\t\tfdLogFile = new FormData();\n\t\tfdLogFile.left = new FormAttachment(middle, 0);\n\t\tfdLogFile.top = new FormAttachment(wBufferSize, margin);\n\t\tfdLogFile.right = new FormAttachment(wbLogFile, -margin);\n\t\twLogFile.setLayoutData(fdLogFile);\t\t\n\n\t\t//\n        // Control encoding line\n        //\n        // The drop down is editable as it may happen an encoding may not be present\n        // on one machine, but you may want to use it on your execution server\n        //\n        wlEncoding=new Label(shell, SWT.RIGHT);\n        wlEncoding.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Encoding.Label\"));\n        props.setLook(wlEncoding);\n        fdlEncoding=new FormData();\n        fdlEncoding.left  = new FormAttachment(0, 0);\n        fdlEncoding.top   = new FormAttachment(wLogFile, 3*margin);\n        fdlEncoding.right = new FormAttachment(middle, -margin);\n        wlEncoding.setLayoutData(fdlEncoding);\n        wEncoding=new Combo(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n        wEncoding.setToolTipText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Encoding.Tooltip\"));\n        wEncoding.setItems(encodings);\n        props.setLook(wEncoding);\n        fdEncoding=new FormData();\n        fdEncoding.left = new FormAttachment(middle, 0);\n        fdEncoding.top  = new FormAttachment(wlLogFile, 3*margin);\n        fdEncoding.right= new FormAttachment(100, 0);        \n        wEncoding.setLayoutData(fdEncoding);\n        wEncoding.addModifyListener(lsMod);\n\n\t\twlTruncate=new Label(shell, SWT.RIGHT);\n\t\twlTruncate.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Truncate.Label\"));\n \t\tprops.setLook(wlTruncate);\n\t\tfdlTruncate=new FormData();\n\t\tfdlTruncate.left  = new FormAttachment(0, 0);\n\t\tfdlTruncate.top   = new FormAttachment(wEncoding, margin);\n\t\tfdlTruncate.right = new FormAttachment(middle, -margin);\n\t\twlTruncate.setLayoutData(fdlTruncate);\n\t\twTruncate=new Button(shell, SWT.CHECK);\n \t\tprops.setLook(wTruncate);\n\t\tfdTruncate=new FormData();\n\t\tfdTruncate.left  = new FormAttachment(middle, 0);\n\t\tfdTruncate.top   = new FormAttachment(wlEncoding, margin);\n\t\tfdTruncate.right = new FormAttachment(100, 0);\n\t\twTruncate.setLayoutData(fdTruncate);\n\t\tSelectionAdapter lsSelMod = new SelectionAdapter()\n        {\n            public void widgetSelected(SelectionEvent arg0)\n            {\n                input.setChanged();\n            }\n        };\n\t\twTruncate.addSelectionListener(lsSelMod);\n\n/*\n\t\twlAutoSchema=new Label(shell, SWT.RIGHT);\n\t\twlAutoSchema.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.AutoSchema.Label\"));\n \t\tprops.setLook(wlAutoSchema);\n\t\tfdlAutoSchema=new FormData();\n\t\tfdlAutoSchema.left  = new FormAttachment(0, 0);\n\t\tfdlAutoSchema.top   = new FormAttachment(wTruncate, margin);\n\t\tfdlAutoSchema.right = new FormAttachment(middle, -margin);\n\t\twlAutoSchema.setLayoutData(fdlAutoSchema);\n\t\twAutoSchema=new Button(shell, SWT.CHECK);\n \t\tprops.setLook(wAutoSchema);\n\t\tfdAutoSchema=new FormData();\n\t\tfdAutoSchema.left  = new FormAttachment(middle, 0);\n\t\tfdAutoSchema.top   = new FormAttachment(wlTruncate, margin);\n\t\tfdAutoSchema.right = new FormAttachment(100, 0);\n\t\twAutoSchema.setLayoutData(fdAutoSchema);\n\t\twAutoSchema.addSelectionListener(lsSelMod);\n\t\t\n\t\twlAutoStringWidths=new Label(shell, SWT.RIGHT);\n\t\twlAutoStringWidths.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.AutoStringWidths.Label\"));\n \t\tprops.setLook(wlAutoStringWidths);\n\t\tfdlAutoStringWidths=new FormData();\n\t\tfdlAutoStringWidths.left  = new FormAttachment(0, 0);\n\t\tfdlAutoStringWidths.top   = new FormAttachment(wlAutoSchema, margin);\n\t\tfdlAutoStringWidths.right = new FormAttachment(middle, -margin);\n\t\twlAutoStringWidths.setLayoutData(fdlAutoStringWidths);\n\t\twAutoStringWidths=new Button(shell, SWT.CHECK);\n \t\tprops.setLook(wAutoStringWidths);\n\t\tfdAutoStringWidths=new FormData();\n\t\tfdAutoStringWidths.left  = new FormAttachment(middle, 0);\n\t\tfdAutoStringWidths.top   = new FormAttachment(wlAutoSchema, margin);\n\t\tfdAutoStringWidths.right = new FormAttachment(100, 0);\n\t\twAutoStringWidths.setLayoutData(fdAutoStringWidths);\n\t\twAutoStringWidths.addSelectionListener(lsSelMod);\t\t\n*/\t\t\n\t\t// THE BUTTONS\n\t\twOK = new Button(shell, SWT.PUSH);\n\t\twOK.setText(BaseMessages.getString(PKG, \"System.Button.OK\")); //$NON-NLS-1$\n\t\twSQL = new Button(shell, SWT.PUSH);\n\t\twSQL.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.SQL.Button\")); //$NON-NLS-1$\n\t\twCancel = new Button(shell, SWT.PUSH);\n\t\twCancel.setText(BaseMessages.getString(PKG, \"System.Button.Cancel\")); //$NON-NLS-1$\n\n\t\tsetButtonPositions(new Button[] { wOK, wCancel , wSQL }, margin, null);\n\n\t\t// The field Table\n\t\twlReturn = new Label(shell, SWT.NONE);\n\t\twlReturn.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Fields.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlReturn);\n\t\tfdlReturn = new FormData();\n\t\tfdlReturn.left = new FormAttachment(0, 0);\n\t\tfdlReturn.top = new FormAttachment(wTruncate, margin);\n\t\twlReturn.setLayoutData(fdlReturn);\n\n\t\tint UpInsCols = 3;\n\t\tint UpInsRows = (input.getFieldTable() != null ? input.getFieldTable().length : 1);\n\n\t\tciReturn = new ColumnInfo[UpInsCols];\n\t\tciReturn[0] = new ColumnInfo(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.ColumnInfo.TableField\"), ColumnInfo.COLUMN_TYPE_CCOMBO, new String[] { \"\" }, false); //$NON-NLS-1$\n\t\tciReturn[1] = new ColumnInfo(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.ColumnInfo.StreamField\"), ColumnInfo.COLUMN_TYPE_CCOMBO, new String[] { \"\" }, false); //$NON-NLS-1$\n\t\tciReturn[2] = new ColumnInfo(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.ColumnInfo.FormatOK\"), ColumnInfo.COLUMN_TYPE_CCOMBO, new String[] {\"Y\",\"N\",}, true); // $NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$\n\t\ttableFieldColumns.add(ciReturn[0]);\n\t\twReturn = new TableView(transMeta, shell, SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL,\n\t\t\t\tciReturn, UpInsRows, lsMod, props);\n\n\t\twGetLU = new Button(shell, SWT.PUSH);\n\t\twGetLU.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.GetFields.Label\")); //$NON-NLS-1$\n\t\tfdGetLU = new FormData();\n\t\tfdGetLU.top   = new FormAttachment(wlReturn, margin);\n\t\tfdGetLU.right = new FormAttachment(100, 0);\n\t\twGetLU.setLayoutData(fdGetLU);\n\n\t\twDoMapping = new Button(shell, SWT.PUSH);\n\t\twDoMapping.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.EditMapping.Label\")); //$NON-NLS-1$\n\t\tfdDoMapping = new FormData();\n\t\tfdDoMapping.top   = new FormAttachment(wGetLU, margin);\n\t\tfdDoMapping.right = new FormAttachment(100, 0);\n\t\twDoMapping.setLayoutData(fdDoMapping);\n\n\t\twDoMapping.addListener(SWT.Selection, new Listener() { \tpublic void handleEvent(Event arg0) { generateMappings();}});\n\n\t\tfdReturn = new FormData();\n\t\tfdReturn.left = new FormAttachment(0, 0);\n\t\tfdReturn.top = new FormAttachment(wlReturn, margin);\n\t\tfdReturn.right = new FormAttachment(wGetLU, -margin);\n\t\tfdReturn.bottom = new FormAttachment(wOK, -2*margin);\n\t\twReturn.setLayoutData(fdReturn);\n\t\t\n\t    // \n        // Search the fields in the background\n        //\n        \n        final Runnable runnable = new Runnable()\n        {\n            public void run()\n            {\n                StepMeta stepMeta = transMeta.findStep(stepname);\n                if (stepMeta!=null)\n                {\n                    try\n                    {\n                    \tRowMetaInterface row = transMeta.getPrevStepFields(stepMeta);\n                        \n                        // Remember these fields...\n                        for (int i=0;i<row.size();i++)\n                        {\n                        \tinputFields.put(row.getValueMeta(i).getName(), Integer.valueOf(i));\n                        }\n                        \n                        setComboBoxes(); \n                    }\n                    catch(KettleException e)\n                    {\n                        logError(BaseMessages.getString(PKG, \"System.Dialog.GetFieldsFailed.Message\"));\n                    }\n                }\n            }\n        };\n        new Thread(runnable).start();\n\n\t\twbLogFile.addSelectionListener(new SelectionAdapter()\n        {\n            public void widgetSelected(SelectionEvent e)\n            {\n                FileDialog dialog = new FileDialog(shell, SWT.OPEN);\n                dialog.setFilterExtensions(new String[] { \"*\" });\n                if (wLogFile.getText() != null)\n                {\n                    dialog.setFileName(wLogFile.getText());\n                }                \n                dialog.setFilterNames(ALL_FILETYPES);\n                if (dialog.open() != null)\n                {\n                \twLogFile.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR\n                                      + dialog.getFileName());\n                }\n            }\n        });\n\t\t\n\n\t\t// Add listeners\n\t\tlsOK = new Listener()\n\t\t{\n\t\t\tpublic void handleEvent(Event e)\n\t\t\t{\n\t\t\t\tok();\n\t\t\t}\n\t\t};\n\t\tlsGetLU = new Listener()\n\t\t{\n\t\t\tpublic void handleEvent(Event e)\n\t\t\t{\n\t\t\t\tgetUpdate();\n\t\t\t}\n\t\t};\n\t\tlsSQL = new Listener()\n\t\t{\n\t\t\tpublic void handleEvent(Event e)\n\t\t\t{\n\t\t\t\tcreate();\n\t\t\t}\n\t\t};\n\t\tlsCancel = new Listener()\n\t\t{\n\t\t\tpublic void handleEvent(Event e)\n\t\t\t{\n\t\t\t\tcancel();\n\t\t\t}\n\t\t};\n\n\t\twOK.addListener(SWT.Selection, lsOK);\n\t\twGetLU.addListener(SWT.Selection, lsGetLU);\n\t\twSQL.addListener(SWT.Selection, lsSQL);\n\t\twCancel.addListener(SWT.Selection, lsCancel);\n\n\t\tlsDef = new SelectionAdapter() { public void widgetDefaultSelected(SelectionEvent e) { ok(); } };\n\n\t\twStepname.addSelectionListener(lsDef);\n        wSchema.addSelectionListener(lsDef);\n        wTable.addSelectionListener(lsDef);\n        wBufferSize.addSelectionListener(lsDef);\n        wLogFile.addSelectionListener(lsDef);\n\n\n\t\t// Detect X or ALT-F4 or something that kills this window...\n\t\tshell.addShellListener(new ShellAdapter()\n\t\t{\n\t\t\tpublic void shellClosed(ShellEvent e)\n\t\t\t{\n\t\t\t\tcancel();\n\t\t\t}\n\t\t});\n\n\n\t\twbTable.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tgetTableName();\n\t\t\t}\n\t\t});\n\n\t\t// Set the shell size, based upon previous time...\n\t\tsetSize();\n\n\t\tgetData();\n\t\tsetTableFieldCombo();\n\t\tinput.setChanged(changed);\n\n\t\tshell.open();\n\t\twhile (!shell.isDisposed())\n\t\t{\n\t\t\tif (!display.readAndDispatch())\n\t\t\t\tdisplay.sleep();\n\t\t}\n\t\treturn stepname;\n\t}","id":10766,"modified_method":"public String open()\n\t{\n\t\tShell parent = getParent();\n\t\tDisplay display = parent.getDisplay();\n\n\t\tshell = new Shell(parent, SWT.DIALOG_TRIM | SWT.RESIZE | SWT.MAX | SWT.MIN);\n \t\tprops.setLook(shell);\n        setShellImage(shell, input);\n\n\t\tModifyListener lsMod = new ModifyListener()\n\t\t{\n\t\t\tpublic void modifyText(ModifyEvent e)\n\t\t\t{\n\t\t\t\tinput.setChanged();\n\t\t\t}\n\t\t};\n\t\tFocusListener lsFocusLost = new FocusAdapter() {\n\t\t\tpublic void focusLost(FocusEvent arg0) {\n\t\t\t\tsetTableFieldCombo();\n\t\t\t}\n\t\t};\n\t\tchanged = input.hasChanged();\n\n\t\tFormLayout formLayout = new FormLayout();\n\t\tformLayout.marginWidth = Const.FORM_MARGIN;\n\t\tformLayout.marginHeight = Const.FORM_MARGIN;\n\n\t\tshell.setLayout(formLayout);\n\t\tshell.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Shell.Title\")); //$NON-NLS-1$\n\n\t\t// The right side of all the labels is available as a user-defined percentage: props.getMiddlePct()\n\t\t// Page 610 - Pentaho Kettle Solutions\n\t\tint middle = props.getMiddlePct();\n\t\tint margin = Const.MARGIN;  // Default 4 pixel margin around components.\n\n\t\t//\n\t\t// Dialog Box Contents (Organized from dialog top to bottom, dialog left to right.) \n\t\t// Label - Step name \n\t\twlStepname = new Label(shell, SWT.LEFT);\n\t\twlStepname.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Stepname.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlStepname);             // Puts the user-selected background color and font on the widget.\n\t\t \t\t\t\t\t\t\n\t\t// Text box for editing the step name\n\t\twStepname = new Text(shell, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\twStepname.setText(stepname);\n \t\tprops.setLook(wStepname);\n\t\twStepname.addModifyListener(lsMod);\n\n\n\t\t////////////////////////////////////////////////\n\t\t// Prepare the Folder that will contain tabs. //\n\t\t////////////////////////////////////////////////\n\t\twTabFolder = new CTabFolder(shell, SWT.BORDER);\n\t\tprops.setLook(wTabFolder, Props.WIDGET_STYLE_TAB);\n\t\t\n\t\t//////////////////////////\n\t\t// General Settings tab //\n\t\t//////////////////////////\n    \n\t\twGeneralSettingsTab = new CTabItem(wTabFolder, SWT.NONE);\n\t\twGeneralSettingsTab.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Tab.GeneralSettings.Label\"));\n    \n\t\twGeneralSettingsComp = new Composite(wTabFolder, SWT.NONE);\n\t\tprops.setLook(wGeneralSettingsComp);\n\n\t\tFormLayout tabLayout = new FormLayout();\n\t\ttabLayout.marginWidth = 3;\n\t\ttabLayout.marginHeight = 3;\n\t\twGeneralSettingsComp.setLayout(tabLayout);\t\t\n\t\t\n\t\twGeneralSettingsComp.layout();\n\t\twGeneralSettingsTab.setControl(wGeneralSettingsComp);\n\n\t\t//////////////////////////////////\n\t\t// MonetDB Settings tab         //\n\t\t//////////////////////////////////\n    \n\t\twMonetDBmclientSettingsTab = new CTabItem(wTabFolder, SWT.NONE);\n\t\twMonetDBmclientSettingsTab.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Tab.MonetDBmclientSettings.Label\"));\n    \n\t\twMonetDBmclientSettingsComp = new Composite(wTabFolder, SWT.NONE);\n\t\tprops.setLook(wMonetDBmclientSettingsComp);\n\t\twMonetDBmclientSettingsComp.setLayout(tabLayout);\t\t\n\t\twMonetDBmclientSettingsComp.layout();\n\t\twMonetDBmclientSettingsTab.setControl(wMonetDBmclientSettingsComp);\t\t\n\n\t\twMonetDBmclientParamGroup = new Group(wMonetDBmclientSettingsComp, SWT.SHADOW_IN);\n\t\twMonetDBmclientParamGroup.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Tab.MonetDBmclientSettings.ParameterGroup\"));\n\t\tprops.setLook(wMonetDBmclientParamGroup);\n\t\twMonetDBmclientParamGroup.setLayout(tabLayout);\n\t\twMonetDBmclientParamGroup.layout();\n\t\t\n\n\t\t///////////////////////\n\t\t// Output Fields tab //\n\t\t///////////////////////\n    \n\t\twOutputFieldsTab = new CTabItem(wTabFolder, SWT.NONE);\n\t\twOutputFieldsTab.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Tab.OutputFields\"));\n    \n\t\twOutputFieldsComp = new Composite(wTabFolder, SWT.NONE);\n\t\tprops.setLook(wOutputFieldsComp);\n\n\t\twOutputFieldsComp.setLayout(tabLayout);\t\t\n\t\t\n\t\twOutputFieldsComp.layout();\n\t\twOutputFieldsTab.setControl(wOutputFieldsComp);\n\t\t\n\t\t// Activate the \"General Settings\" tab\n\t\twTabFolder.setSelection(0);\n\n\t\twTabFolder.addSelectionListener(new SelectionAdapter() {\n\t\t\t@Override\n\t\t\tpublic void widgetSelected(SelectionEvent arg0) {\n\t\t\t\twTabFolder.layout(true, true);\n\t\t\t}\n\t\t});\t\t\n\n\t\t//\n\t\t// Connection line (General Settings tab)\n\t\t//\n\t\twConnection = addConnectionLine(wGeneralSettingsComp, wTabFolder, middle, margin, null, transMeta);\n\t\tif (input.getDatabaseMeta()==null && transMeta.nrDatabases()==1) wConnection.select(0);\n\t\twConnection.addModifyListener(lsMod);\n\t\t\n\t\t//\n        // Schema line (General Settings tab)\n\t\t//\n        wlSchema=new Label(wGeneralSettingsComp, SWT.LEFT);\n        wlSchema.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.TargetSchema.Label\")); //$NON-NLS-1$\n        props.setLook(wlSchema);\n        wSchema=new TextVar(transMeta, wGeneralSettingsComp, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n        props.setLook(wSchema);\n        wSchema.addModifyListener(lsMod);\n    \twSchema.addFocusListener(lsFocusLost);\n\n    \t//\n\t\t// Table line (General Settings tab) \n    \t//\n\t\twlTable = new Label(wGeneralSettingsComp, SWT.LEFT);\n\t\twlTable.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.TargetTable.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlTable);\n\t\t\n\t\twbTable = new Button(wGeneralSettingsComp, SWT.PUSH | SWT.CENTER);\n \t\tprops.setLook(wbTable);\n\t\twbTable.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Browse.Button\")); //$NON-NLS-1$\n\n\t\twTable = new TextVar(transMeta, wGeneralSettingsComp, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n \t\tprops.setLook(wTable);\n\t\twTable.addModifyListener(lsMod);\n\t\twTable.addFocusListener(lsFocusLost);\n\n\t\t//\n\t\t// Buffer size line (General Settings tab)\n\t\t//\n\t\twlBufferSize = new Label(wGeneralSettingsComp, SWT.RIGHT);\n\t\twlBufferSize.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.BufferSize.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlBufferSize);\n\n \t\twBufferSize = new TextVar(transMeta, wGeneralSettingsComp, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n \t\tprops.setLook(wBufferSize);\n\t\twBufferSize.addModifyListener(lsMod);\n\n\t\t//\n\t\t// Log file line (General Settings tab)\n\t\t//\n\t\twlLogFile = new Label(wGeneralSettingsComp, SWT.LEFT);\n\t\twlLogFile.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.LogFile.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlLogFile);\n\n \t\twbLogFile = new Button(wGeneralSettingsComp, SWT.PUSH | SWT.CENTER);\n \t\tprops.setLook(wbLogFile);\n\t\twbLogFile.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Browse.Button\")); //$NON-NLS-1$\n\n\t\twLogFile = new TextVar(transMeta, wGeneralSettingsComp, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n \t\tprops.setLook(wLogFile);\n\t\twLogFile.addModifyListener(lsMod);\n\n\t\t//\n\t\t// Truncate before loading check box (General Settings tab)\n\t\t//\n\t\twlTruncate=new Label(wGeneralSettingsComp, SWT.LEFT);\n\t\twlTruncate.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Truncate.Label\"));\n\t\tprops.setLook(wlTruncate);\n\t\twTruncate=new Button(wGeneralSettingsComp, SWT.CHECK);\n\t\tprops.setLook(wTruncate);\n\t\tSelectionAdapter lsSelMod = new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent arg0)\n\t\t\t{\n\t\t\t\tinput.setChanged();\n\t\t\t}\n\t\t};\n\t\twTruncate.addSelectionListener(lsSelMod);\t\t\n\t\t\n\t\t///////////////////////////////////////////////////////////\n\t\t// MonetDB mclient Settings tab widget declarations follow\n\t\t///////////////////////////////////////////////////////////\n\n\t\t// (Sub-group within the \"MonetDB mclient Settings\" tab)\n\t\t// Widgets for setting the parameters that are sent to the mclient software when the step executes\n\t\twlFieldSeparator = new Label(wMonetDBmclientParamGroup, SWT.LEFT);\n\t\twlFieldSeparator.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Tab.MonetDBmclientSettings.ParameterGroup.FieldSeparator.Label\"));\n\t\tprops.setLook(wlFieldSeparator);\n\t\t\n\t\twFieldSeparator = new Combo(wMonetDBmclientParamGroup, SWT.SINGLE | SWT.CENTER | SWT.BORDER);\n\t\twFieldSeparator.setItems(fieldSeparators);\n\t\tprops.setLook(wFieldSeparator);\n\t\twFieldSeparator.addModifyListener(lsMod);\n\t\t\n\t\twlFieldEnclosure = new Label(wMonetDBmclientParamGroup, SWT.LEFT);\n\t\twlFieldEnclosure.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Tab.MonetDBmclientSettings.ParameterGroup.FieldEnclosure.Label\"));\n\t\tprops.setLook(wlFieldEnclosure);\n\t\t\n\t\twFieldEnclosure = new Combo(wMonetDBmclientParamGroup, SWT.SINGLE | SWT.CENTER | SWT.BORDER);\n\t\twFieldEnclosure.setItems(fieldEnclosures);\n\t\twFieldEnclosure.addModifyListener(lsMod);\n\t\t\n\t\twlNULLrepresentation = new Label(wMonetDBmclientParamGroup, SWT.LEFT);\n\t\twlNULLrepresentation.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Tab.MonetDBmclientSettings.ParameterGroup.NULLrepresentation.Label\"));\n\t\tprops.setLook(wlNULLrepresentation);\n\t\t\n\t\twNULLrepresentation = new Combo(wMonetDBmclientParamGroup, SWT.SINGLE | SWT.CENTER | SWT.BORDER);\n\t\twNULLrepresentation.setItems(nullRepresentations);\n\t\twNULLrepresentation.addModifyListener(lsMod);\n\t\t\n\t\t//\n\t\t// Control encoding line (MonetDB mclient Settings tab -> Parameter Group)\n\t\t//\n\t\t// The drop down is editable as it may happen an encoding may not be present\n\t\t// on one machine, but you may want to use it on your execution server\n\t\t//\n\t\twlEncoding=new Label(wMonetDBmclientParamGroup, SWT.RIGHT);\n\t\twlEncoding.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Encoding.Label\"));\n\t\tprops.setLook(wlEncoding);\n\n\t\twEncoding=new Combo(wMonetDBmclientParamGroup, SWT.SINGLE | SWT.LEFT | SWT.BORDER);\n\t\twEncoding.setToolTipText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Encoding.Tooltip\"));\n\t\twEncoding.setItems(encodings);\n\t\tprops.setLook(wEncoding);\n\t\twEncoding.addModifyListener(lsMod);\n\t\n\t\t//\n\t\t// OK (Button), Cancel (Button) and SQL (Button)\n\t\t// - these appear at the bottom of the dialog window.\n\t\twOK = new Button(shell, SWT.PUSH);\n\t\twOK.setText(BaseMessages.getString(PKG, \"System.Button.OK\")); //$NON-NLS-1$\n\t\twSQL = new Button(shell, SWT.PUSH);\n\t\twSQL.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.SQL.Button\")); //$NON-NLS-1$\n\t\twCancel = new Button(shell, SWT.PUSH);\n\t\twCancel.setText(BaseMessages.getString(PKG, \"System.Button.Cancel\")); //$NON-NLS-1$\n\n\t\tsetButtonPositions(new Button[] { wOK, wCancel , wSQL }, margin, null);\n\n\t\t// The field Table\n\t\twlReturn = new Label(wOutputFieldsComp, SWT.NONE);\n\t\twlReturn.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Fields.Label\")); //$NON-NLS-1$\n \t\tprops.setLook(wlReturn);\n\t\t\n\t\tint UpInsCols = 3;\n\t\tint UpInsRows = (input.getFieldTable() != null ? input.getFieldTable().length : 1);\n\n\t\tciReturn = new ColumnInfo[UpInsCols];\n\t\tciReturn[0] = new ColumnInfo(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.ColumnInfo.TableField\"), ColumnInfo.COLUMN_TYPE_CCOMBO, new String[] { \"\" }, false); //$NON-NLS-1$\n\t\tciReturn[1] = new ColumnInfo(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.ColumnInfo.StreamField\"), ColumnInfo.COLUMN_TYPE_CCOMBO, new String[] { \"\" }, false); //$NON-NLS-1$\n\t\tciReturn[2] = new ColumnInfo(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.ColumnInfo.FormatOK\"), ColumnInfo.COLUMN_TYPE_CCOMBO, new String[] {\"Y\",\"N\",}, true); // $NON-NLS-1$ $NON-NLS-2$ $NON-NLS-3$\n\t\ttableFieldColumns.add(ciReturn[0]);\n\t\twReturn = new TableView(transMeta, wOutputFieldsComp, SWT.BORDER | SWT.FULL_SELECTION | SWT.MULTI | SWT.V_SCROLL | SWT.H_SCROLL,\n\t\t\t\tciReturn, UpInsRows, lsMod, props);\n\n\t\twGetLU = new Button(wOutputFieldsComp, SWT.PUSH);\n\t\twGetLU.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.GetFields.Label\")); //$NON-NLS-1$\n\n\t\twDoMapping = new Button(wOutputFieldsComp, SWT.PUSH);\n\t\twDoMapping.setText(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.EditMapping.Label\")); //$NON-NLS-1$\n\n\t\twDoMapping.addListener(SWT.Selection, new Listener() { \tpublic void handleEvent(Event arg0) { generateMappings();}});\n\n\t//\n\t// Visual Layout Definition\n\t//\n\t// FormLayout (org.eclipse.swt.layout.FormLayout) is being used to compose the dialog box.\n\t//  The layout works by creating FormAttachments for each side of the widget and storing them in the layout data.\n\t//  An attachment 'attaches' a specific side of the widget either to a position in the parent Composite or to another\n\t//  widget within the layout.\n\n\t\t//\n\t\t//\tStep name (Label and Edit Box) \n\t\t//\t - Location: top of the dialog box\n\t\t//\n\t    fdlStepname = new FormData();\n\t    fdlStepname.top = new FormAttachment(0, 15);\n\t    fdlStepname.left = new FormAttachment(0, margin);\n\t    fdlStepname.right = new FormAttachment(20, 0);\n\t    wlStepname.setLayoutData(fdlStepname);\n\t      \n\t    fdStepname = new FormData();\n\t    fdStepname.top = new FormAttachment(0, 15);\n\t    fdStepname.left = new FormAttachment(wlStepname, margin);  // FormAttachment(middle, 0);\n\t    fdStepname.right = new FormAttachment(100, -margin);  // 100% of the form component (length of edit box)\n\t    wStepname.setLayoutData(fdStepname);\n\t\t\n\t\t\n\t\t//\n\t\t// Tabs will appear below the \"Step Name\" area and above the buttons at the bottom of the dialog.\n\t\t//\n\t\tFormData fdTabFolder = new FormData();\n\t\tfdTabFolder.left = new FormAttachment(0, 0);\n\t\tfdTabFolder.top = new FormAttachment(wStepname, margin+20);\n\t\tfdTabFolder.right = new FormAttachment(100, 0);\n\t\tfdTabFolder.bottom = new FormAttachment(100, -50);\n\t\twTabFolder.setLayoutData(fdTabFolder);\t\t\n\t\t\n\t\t//\n\t\t// Positioning for the Database Connection line happened above in the function call\n\t\t//  - wConnection = addConnectionLine(wGeneralSettingsComp, wTabFolder, middle, margin, null, transMeta);\n\t\t//\n\t\t\n\t\t\n\t\t// Database Schema Line - (General Settings Tab)\n\t    //\n\t\t// Database Schema (Label layout)  \n\t\tfdlSchema=new FormData();\n\t    fdlSchema.top  = new FormAttachment(wConnection, margin*2);\n\t\tfdlSchema.left = new FormAttachment(wGeneralSettingsComp, margin);\n\t    wlSchema.setLayoutData(fdlSchema);\n\t\t\n\t    // Database schema (Edit box layout)  \n\t\tfdSchema = new FormData();\n\t\tfdSchema.top  = new FormAttachment(wConnection, margin*2);\n\t\tfdSchema.left = new FormAttachment(middle, margin);\n\t\tfdSchema.right= new FormAttachment(100, -margin);\n\t\twSchema.setLayoutData(fdSchema);\n\n\t\t// Target Table Line - (General Settings Tab)\n\t\t//\n\t\t// Target table (Label layout)\n\t\t// - tied to the left wall of the general settings tab (composite)\n\t    fdlTable = new FormData();\n\t    fdlTable.top = new FormAttachment(wSchema, margin);\n\t    fdlTable.left = new FormAttachment(0, margin);\n\t    wlTable.setLayoutData(fdlTable);\n   \n\t\t// Target table browse (Button layout)\n\t    // - tied to the right wall of the general settings tab (composite)\n\t\tfdbTable = new FormData();\n\t\tfdbTable.top = new FormAttachment(wSchema, 0);\n\t\tfdbTable.right = new FormAttachment(100, -margin);\n\t\twbTable.setLayoutData(fdbTable);\n\n\t    // Target table (Edit box layout)\n\t\t// Between the label and button.\n\t\t// - tied to the right edge of the general Browse tables button\n\t    fdTable = new FormData();\n\t\tfdTable.top = new FormAttachment(wSchema, margin);\n\t\tfdTable.left = new FormAttachment(middle, margin);\n\t    fdTable.right = new FormAttachment(wbTable, -margin);\n\t    wTable.setLayoutData(fdTable);\n\n\t    // Buffer size (Label layout)\n\t    fdlBufferSize = new FormData();\n\t    fdlBufferSize.top = new FormAttachment(wTable, margin);\n\t    fdlBufferSize.left = new FormAttachment(0, margin);\n\t    wlBufferSize.setLayoutData(fdlBufferSize);\n\n\t    fdBufferSize = new FormData();\n\t    fdBufferSize.top = new FormAttachment(wTable, margin);\n\t    fdBufferSize.left = new FormAttachment(middle, margin);\n\t    fdBufferSize.right = new FormAttachment(100, -margin);\n\t    wBufferSize.setLayoutData(fdBufferSize);            \n\n\t    fdlLogFile = new FormData();\n\t    fdlLogFile.top = new FormAttachment(wBufferSize, margin);\n\t    fdlLogFile.left = new FormAttachment(0, margin);\n\t    wlLogFile.setLayoutData(fdlLogFile);\n\n\t    // Log file Browse (button)\n\t    fdbLogFile = new FormData();\n\t    fdbLogFile.top = new FormAttachment(wBufferSize, 0);\n\t    fdbLogFile.right = new FormAttachment(100, -margin);\n\t    wbLogFile.setLayoutData(fdbLogFile);\n\n\t    fdLogFile = new FormData();\n\t    fdLogFile.left = new FormAttachment(middle, margin);\n\t    fdLogFile.top = new FormAttachment(wBufferSize, margin);\n\t    fdLogFile.right = new FormAttachment(wbLogFile, -margin);\n\t    wLogFile.setLayoutData(fdLogFile);\n\n\t    fdlTruncate = new FormData();\n\t    fdlTruncate.left  = new FormAttachment(0, margin);\n\t    fdlTruncate.top   = new FormAttachment(wLogFile, margin);\n\t    wlTruncate.setLayoutData(fdlTruncate);\n\t    \n\t    fdTruncate = new FormData();\n\t    fdTruncate.top   = new FormAttachment(wLogFile, margin);\n\t    fdTruncate.left  = new FormAttachment(wlTruncate, margin);\n\t    fdTruncate.right = new FormAttachment(100, -margin);\n\t    wTruncate.setLayoutData(fdTruncate);\n\n\t    //\n\t    // MonetDB Settings tab layout\n\t    //\n\t    \n\t    //\n\t    // mclient parameter grouping (Group composite)\n\t    // - Visually we make it clear what is being fed to mclient as parameters.\n\t    fdgMonetDBmclientParamGroup = new FormData();\n\t    fdgMonetDBmclientParamGroup.top = new FormAttachment(wMonetDBmclientSettingsComp, margin*3);\n\t    fdgMonetDBmclientParamGroup.left = new FormAttachment(0, margin);\n\t    fdgMonetDBmclientParamGroup.right = new FormAttachment(100, -margin);\n\t    wMonetDBmclientParamGroup.setLayoutData(fdgMonetDBmclientParamGroup);\n\t    \n\t    // Figure out font width in pixels, then set the combo boxes to a standard width of 20 characters.\n\t    Text text = new Text(shell, SWT.NONE);\n\t    GC gc = new GC(text);\n\t    FontMetrics fm = gc.getFontMetrics();\n\t    int charWidth = fm.getAverageCharWidth();\n\t    int fieldWidth = text.computeSize(charWidth * 20, SWT.DEFAULT).x;\n\t    gc.dispose();\n\t    \n\t    fdlFieldSeparator = new FormData();\n\t    fdlFieldSeparator.top = new FormAttachment(wMonetDBmclientSettingsComp, 3*margin);\n\t    fdlFieldSeparator.left  = new FormAttachment(0, 3*margin);\n\t    wlFieldSeparator.setLayoutData(fdlFieldSeparator);\n\t    \n\t    fdFieldSeparator = new FormData();\n\t    fdFieldSeparator.top = new FormAttachment(wMonetDBmclientSettingsComp, 3*margin);\n\t    fdFieldSeparator.left = new FormAttachment(middle, margin);\n\t    fdFieldSeparator.width = fieldWidth;\n\t    wFieldSeparator.setLayoutData(fdFieldSeparator);\n\n\t    fdlFieldEnclosure = new FormData();\n\t    fdlFieldEnclosure.top = new FormAttachment(wFieldSeparator, 2*margin);\n\t    fdlFieldEnclosure.left = new FormAttachment(0, 3*margin);\n\t    wlFieldEnclosure.setLayoutData(fdlFieldEnclosure);\n\t    \t   \n\t    fdFieldEnclosure = new FormData();\n\t    fdFieldEnclosure.top = new FormAttachment(wFieldSeparator, 2*margin);\n\t    fdFieldEnclosure.left = new FormAttachment(middle, margin);\n\t    fdFieldEnclosure.width = fieldWidth;\n\t    wFieldEnclosure.setLayoutData(fdFieldEnclosure);\n\t    \n\t    fdlNULLrepresentation = new FormData();\n\t    fdlNULLrepresentation.top = new FormAttachment(wFieldEnclosure, 2*margin);\n\t    fdlNULLrepresentation.left = new FormAttachment(0, 3*margin);   \n\t    wlNULLrepresentation.setLayoutData(fdlNULLrepresentation);\n\t    \n\t    fdNULLrepresentation = new FormData();\n\t    fdNULLrepresentation.top = new FormAttachment(wFieldEnclosure, 2*margin);\n\t    fdNULLrepresentation.left = new FormAttachment(middle, margin);\n\t    fdNULLrepresentation.width = fieldWidth;\n\t    wNULLrepresentation.setLayoutData(fdNULLrepresentation);\n\t    \n\t    \n\t    // Stream encoding parameter sent to mclient (Label layout)\n\t    fdlEncoding=new FormData();\n\t    fdlEncoding.top   = new FormAttachment(wNULLrepresentation, 2*margin);\n\t    fdlEncoding.left  = new FormAttachment(0, 3*margin);\n\t    wlEncoding.setLayoutData(fdlEncoding);\n\n\t    fdEncoding=new FormData();\n\t    fdEncoding.top  = new FormAttachment(wNULLrepresentation, 2*margin);\n\t    fdEncoding.left = new FormAttachment(middle, margin);\n\t    fdEncoding.width = fieldWidth;\n\t    wEncoding.setLayoutData(fdEncoding);\n\n\t    //\n\t    // Output Fields tab layout     \n\t    //\n\t    fdlReturn = new FormData();\n\t    fdlReturn.top = new FormAttachment(wOutputFieldsComp, 2*margin);\n\t    fdlReturn.left = new FormAttachment(0, margin);\n\t    wlReturn.setLayoutData(fdlReturn);\n\n\t    fdDoMapping = new FormData();\n\t    fdDoMapping.top   = new FormAttachment(wOutputFieldsComp, 2*margin);\n\t    fdDoMapping.right = new FormAttachment(100, -margin);\n\t    wDoMapping.setLayoutData(fdDoMapping);\n\t    \n\t    fdGetLU = new FormData();\n\t    fdGetLU.top = new FormAttachment(wOutputFieldsComp, 2*margin);\n\t    fdGetLU.right = new FormAttachment(wDoMapping, -margin);\n\t    wGetLU.setLayoutData(fdGetLU);\n\n\t    fdReturn = new FormData();\n\t    fdReturn.top = new FormAttachment(wGetLU, 3*margin);\n\t    fdReturn.left = new FormAttachment(0, margin);\n\t    fdReturn.right = new FormAttachment(100, -margin);\n\t    fdReturn.bottom = new FormAttachment(100, -2*margin);\n\t    wReturn.setLayoutData(fdReturn);\n    \n    //\n    // Layout section ends    \n\n\t\t\n\t\t\n\t\t\n\t    // \n        // Search the fields in the background\n        //\n        \n        final Runnable runnable = new Runnable()\n        {\n            public void run()\n            {\n                StepMeta stepMeta = transMeta.findStep(stepname);\n                if (stepMeta!=null)\n                {\n                    try\n                    {\n                    \tRowMetaInterface row = transMeta.getPrevStepFields(stepMeta);\n                        \n                        // Remember these fields...\n                        for (int i=0;i<row.size();i++)\n                        {\n                        \tinputFields.put(row.getValueMeta(i).getName(), Integer.valueOf(i));\n                        }\n                        \n                        setComboBoxes(); \n                    }\n                    catch(KettleException e)\n                    {\n                        logError(BaseMessages.getString(PKG, \"System.Dialog.GetFieldsFailed.Message\"));\n                    }\n                }\n            }\n        };\n        new Thread(runnable).start();\n\t\t\t\n\t\twbLogFile.addSelectionListener(new SelectionAdapter()\n        {\n            public void widgetSelected(SelectionEvent e)\n            {\n                FileDialog dialog = new FileDialog(shell, SWT.OPEN);\n                dialog.setFilterExtensions(new String[] { \"*\" });\n                if (wLogFile.getText() != null)\n                {\n                    dialog.setFileName(wLogFile.getText());\n                }                \n                dialog.setFilterNames(ALL_FILETYPES);\n                if (dialog.open() != null)\n                {\n                \twLogFile.setText(dialog.getFilterPath() + Const.FILE_SEPARATOR\n                                      + dialog.getFileName());\n                }\n            }\n        });\n\t\t\n\n\t\t// Add listeners\n\t\tlsOK = new Listener()\n\t\t{\n\t\t\tpublic void handleEvent(Event e)\n\t\t\t{\n\t\t\t\tok();\n\t\t\t}\n\t\t};\n\t\tlsGetLU = new Listener()\n\t\t{\n\t\t\tpublic void handleEvent(Event e)\n\t\t\t{\n\t\t\t\tgetUpdate();\n\t\t\t}\n\t\t};\n\t\tlsSQL = new Listener()\n\t\t{\n\t\t\tpublic void handleEvent(Event e)\n\t\t\t{\n\t\t\t\tcreate();\n\t\t\t}\n\t\t};\n\t\tlsCancel = new Listener()\n\t\t{\n\t\t\tpublic void handleEvent(Event e)\n\t\t\t{\n\t\t\t\tcancel();\n\t\t\t}\n\t\t};\n\n\t\twOK.addListener(SWT.Selection, lsOK);\n\t\twGetLU.addListener(SWT.Selection, lsGetLU);\n\t\twSQL.addListener(SWT.Selection, lsSQL);\n\t\twCancel.addListener(SWT.Selection, lsCancel);\n\n\t\tlsDef = new SelectionAdapter() { public void widgetDefaultSelected(SelectionEvent e) { ok(); } };\n\n\t\twStepname.addSelectionListener(lsDef);\n        wSchema.addSelectionListener(lsDef);\n        wTable.addSelectionListener(lsDef);\n        wBufferSize.addSelectionListener(lsDef);\n        wLogFile.addSelectionListener(lsDef);\n\n        wFieldSeparator.addSelectionListener(lsDef);\n\n\t\t// Detect X or ALT-F4 or something that kills this window...\n\t\tshell.addShellListener(new ShellAdapter()\n\t\t{\n\t\t\tpublic void shellClosed(ShellEvent e)\n\t\t\t{\n\t\t\t\tcancel();\n\t\t\t}\n\t\t});\n\n\n\t\twbTable.addSelectionListener(new SelectionAdapter()\n\t\t{\n\t\t\tpublic void widgetSelected(SelectionEvent e)\n\t\t\t{\n\t\t\t\tgetTableName();\n\t\t\t}\n\t\t});\n\n\t\t// Set the shell size, based upon previous time...\n\t\tsetSize();\n\n\t\tgetData();\n\t\tsetTableFieldCombo();\n\t\tinput.setChanged(changed);\n\n\t\tshell.open();\n\t\twhile (!shell.isDisposed())\n\t\t{\n\t\t\tif (!display.readAndDispatch())\n\t\t\t\tdisplay.sleep();\n\t\t}\n\t\treturn stepname;\n\t}","commit_id":"014ad80e24e5fba7ba88b602c954fd37492b234f","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"protected void getInfo(MonetDBBulkLoaderMeta inf)\n\t{\n\t\tint nrfields = wReturn.nrNonEmpty();\n\n\t\tinf.allocate(nrfields);\n\n\t\tinf.setBufferSize( wBufferSize.getText() );\n\n\t\tif(log.isDebug()) logDebug(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Log.FoundFields\", \"\" + nrfields)); //$NON-NLS-1$ //$NON-NLS-2$\n\t\tfor (int i = 0; i < nrfields; i++)\n\t\t{\n\t\t\tTableItem item = wReturn.getNonEmpty(i);\n\t\t\tinf.getFieldTable()[i] = item.getText(1);\n\t\t\tinf.getFieldStream()[i] = item.getText(2);\n\t\t\tinf.getFieldFormatOk()[i] = \"Y\".equalsIgnoreCase(item.getText(3));\n\t\t}\n\n        inf.setSchemaName( wSchema.getText() );\n\t\tinf.setTableName( wTable.getText() );\n\t\tinf.setDatabaseMeta(  transMeta.findDatabase(wConnection.getText()) );\n\t\tinf.setLogFile( wLogFile.getText() );\n\t\tinf.setEncoding( wEncoding.getText() );\n\t\tinf.setTruncate(wTruncate.getSelection());\n\t\tinf.setAutoSchema(false);\n\t\tinf.setAutoStringWidths(false);\n\t\tinf.setDbConnectionName(wConnection.getText());\n//\t\tinf.setAutoSchema(wAutoSchema.getSelection());\n//\t\tinf.setAutoStringWidths(wAutoStringWidths.getSelection());\n\n\t\tstepname = wStepname.getText(); // return value\n\t}","id":10767,"modified_method":"protected void getInfo(MonetDBBulkLoaderMeta inf)\n\t{\n\t\tint nrfields = wReturn.nrNonEmpty();\n\n\t\tinf.allocate(nrfields);\n\n\t\tif(log.isDebug()) logDebug(BaseMessages.getString(PKG, \"MonetDBBulkLoaderDialog.Log.FoundFields\", \"\" + nrfields)); //$NON-NLS-1$ //$NON-NLS-2$\n\t\tfor (int i = 0; i < nrfields; i++)\n\t\t{\n\t\t\tTableItem item = wReturn.getNonEmpty(i);\n\t\t\tinf.getFieldTable()[i] = item.getText(1);\n\t\t\tinf.getFieldStream()[i] = item.getText(2);\n\t\t\tinf.getFieldFormatOk()[i] = \"Y\".equalsIgnoreCase(item.getText(3));\n\t\t}\n\t\t// General Settings Tab values from step meta-data configuration.\n\t\tinf.setDbConnectionName(wConnection.getText());\n\t\tinf.setSchemaName(wSchema.getText());\n\t\tinf.setTableName(wTable.getText());\n\t\tinf.setDatabaseMeta(transMeta.findDatabase(wConnection.getText()));\n\t\tinf.setBufferSize(wBufferSize.getText());\n\t\tinf.setLogFile(wLogFile.getText());\n\t\tinf.setTruncate(wTruncate.getSelection());\n\n\t\t// MonetDB mclient Settings tab\n\t\tinf.setFieldSeparator(wFieldSeparator.getText());\n\t\tinf.setFieldEnclosure(wFieldEnclosure.getText());\n\t\tinf.setNULLrepresentation(wNULLrepresentation.getText());\n\t\tinf.setEncoding( wEncoding.getText() );\n\n\t\tstepname = wStepname.getText(); // return value\n\t}","commit_id":"014ad80e24e5fba7ba88b602c954fd37492b234f","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String getEnclosure() {\n\t\treturn \"\\\"\";\n\t}","id":10768,"modified_method":"public String getFieldEnclosure() {\n\t\treturn fieldEnclosure;\n\t}","commit_id":"014ad80e24e5fba7ba88b602c954fd37492b234f","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public String getXML()\n\t{\n        StringBuffer retval = new StringBuffer(300);\n\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"connection\",   dbConnectionName)); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"buffer_size\",  bufferSize));     //$NON-NLS-1$ //$NON-NLS-2$\n        retval.append(\"    \").append(XMLHandler.addTagValue(\"schema\",       schemaName));    //$NON-NLS-1$ //$NON-NLS-2$\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"table\",        tableName));     //$NON-NLS-1$ //$NON-NLS-2$\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"log_file\",     logFile));       //$NON-NLS-1$ //$NON-NLS-2$\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"encoding\",     encoding));      //$NON-NLS-1$ //$NON-NLS-2$\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"truncate\",     truncate));      //$NON-NLS-1$ //$NON-NLS-2$\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"auto_schema\",     autoSchema));      //$NON-NLS-1$ //$NON-NLS-2$\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"auto_string_widths\",     autoStringWidths));      //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\n\t\tfor (int i=0;i<fieldTable.length;i++)\n\t\t{\n\t\t\tretval.append(\"      <mapping>\").append(Const.CR); //$NON-NLS-1$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"stream_name\", fieldTable[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"field_name\",  fieldStream[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"field_format_ok\",  fieldFormatOk[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"      <\/mapping>\").append(Const.CR); //$NON-NLS-1$\n\t\t}\n\n\t\treturn retval.toString();\n\t}","id":10769,"modified_method":"public String getXML()\n\t{\n        StringBuffer retval = new StringBuffer(300);\n\n        // General Settings Tab\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"connection\",   \t    dbConnectionName));     //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"buffer_size\",  \t    bufferSize));           //$NON-NLS-1$ //$NON-NLS-2$\n        retval.append(\"    \").append(XMLHandler.addTagValue(\"schema\",       \t    schemaName));   \t    //$NON-NLS-1$ //$NON-NLS-2$\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"table\",        \t    tableName));            //$NON-NLS-1$ //$NON-NLS-2$\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"log_file\",     \t    logFile));              //$NON-NLS-1$ //$NON-NLS-2$\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"truncate\",     \t    truncate));             //$NON-NLS-1$ //$NON-NLS-2$\n\n\t\t// MonetDB Settings Tab\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"field_separator\",      fieldSeparator));       //$NON-NLS-1$ //$NON-NLS-2$\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"field_enclosure\",      fieldEnclosure));       //$NON-NLS-1$ //$NON-NLS-2$\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"null_representation\",  NULLrepresentation));   //$NON-NLS-1$ //$NON-NLS-2$\n\t\tretval.append(\"    \").append(XMLHandler.addTagValue(\"encoding\",     \t    encoding));      \t\t//$NON-NLS-1$ //$NON-NLS-2$\n\t\t\n\t\t// Output Fields Tab\n\t\tfor (int i=0;i<fieldTable.length;i++)\n\t\t{\n\t\t\tretval.append(\"      <mapping>\").append(Const.CR); //$NON-NLS-1$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"stream_name\", fieldTable[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"field_name\",  fieldStream[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"        \").append(XMLHandler.addTagValue(\"field_format_ok\",  fieldFormatOk[i])); //$NON-NLS-1$ //$NON-NLS-2$\n\t\t\tretval.append(\"      <\/mapping>\").append(Const.CR); //$NON-NLS-1$\n\t\t}\n\n\t\treturn retval.toString();\n\t}","commit_id":"014ad80e24e5fba7ba88b602c954fd37492b234f","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void saveRep(Repository rep, ObjectId id_transformation, ObjectId id_step)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\trep.saveDatabaseMetaStepAttribute(id_transformation, id_step, \"id_connection\", databaseMeta);\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"buffer_size\",     bufferSize);     //$NON-NLS-1$\n\t\t\t rep.saveStepAttribute(id_transformation, id_step, \"db_connection_name\",          dbConnectionName);    //$NON-NLS-1$\n            rep.saveStepAttribute(id_transformation, id_step, \"schema\",          schemaName);    //$NON-NLS-1$\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"table\",           tableName);     //$NON-NLS-1$\n\t\t\t\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"log_file\",        logFile);       //$NON-NLS-1$\n\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"encoding\",        encoding);      //$NON-NLS-1$\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"truncate\",        truncate);      //$NON-NLS-1$\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"auto_schema\",     autoSchema);      //$NON-NLS-1$\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"auto_string_widths\",     autoStringWidths);      //$NON-NLS-1$\n\n\t\t\tfor (int i=0;i<fieldTable.length;i++)\n\t\t\t{\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"stream_name\", fieldTable[i]);  //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"field_name\",  fieldStream[i]); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"field_format_ok\",  fieldFormatOk[i]); //$NON-NLS-1$\n\t\t\t}\n\n\t\t\t// Also, save the step-database relationship!\n\t\t\tif (databaseMeta!=null) rep.insertStepDatabase(id_transformation, id_step, databaseMeta.getObjectId());\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tthrow new KettleException(BaseMessages.getString(PKG, \"MonetDBBulkLoaderMeta.Exception.UnableToSaveStepInfoToRepository\")+id_step, e); //$NON-NLS-1$\n\t\t}\n\t}","id":10770,"modified_method":"public void saveRep(Repository rep, ObjectId id_transformation, ObjectId id_step)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\trep.saveDatabaseMetaStepAttribute(id_transformation, id_step, \"id_connection\", databaseMeta);\n\t\t\t// General Settings Tab\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"db_connection_name\",     dbConnectionName);    //$NON-NLS-1$\n            rep.saveStepAttribute(id_transformation, id_step, \"schema\",          \t\tschemaName);          //$NON-NLS-1$\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"table\",           \t\ttableName);           //$NON-NLS-1$\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"buffer_size\",     \t\tbufferSize);          //$NON-NLS-1$\t\t\t\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"log_file\",        \t\tlogFile);             //$NON-NLS-1$\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"truncate\",               truncate);            //$NON-NLS-1$\n\t\t\t\n\t\t\t// MonetDB Settings Tab\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"field_separator\",        fieldSeparator);      //$NON-NLS-1$\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"field_enclosure\",        fieldEnclosure);      //$NON-NLS-1$\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"null_representation\",    NULLrepresentation);  //$NON-NLS-1$\n\t\t\trep.saveStepAttribute(id_transformation, id_step, \"encoding\",        \t\tencoding);            //$NON-NLS-1$\n\n\t\t\t// Output Fields Tab\n\t\t\tfor (int i=0;i<fieldTable.length;i++)\n\t\t\t{\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"stream_name\", fieldTable[i]);  //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"field_name\",  fieldStream[i]); //$NON-NLS-1$\n\t\t\t\trep.saveStepAttribute(id_transformation, id_step, i, \"field_format_ok\",  fieldFormatOk[i]); //$NON-NLS-1$\n\t\t\t}\n\n\t\t\t// Also, save the step-database relationship!\n\t\t\tif (databaseMeta!=null) rep.insertStepDatabase(id_transformation, id_step, databaseMeta.getObjectId());\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tthrow new KettleException(BaseMessages.getString(PKG, \"MonetDBBulkLoaderMeta.Exception.UnableToSaveStepInfoToRepository\")+id_step, e); //$NON-NLS-1$\n\t\t}\n\t}","commit_id":"014ad80e24e5fba7ba88b602c954fd37492b234f","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void readRep(Repository rep, ObjectId id_step, List<DatabaseMeta> databases, Map<String, Counter> counters)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tdatabaseMeta = rep.loadDatabaseMetaFromStepAttribute(id_step, \"id_connection\", databases);\n     \t\tbufferSize     =      rep.getStepAttributeString(id_step, \"buffer_size\");         //$NON-NLS-1$\n     \t\tdbConnectionName =      rep.getStepAttributeString(id_step,  \"db_connection_name\");         //$NON-NLS-1$\n            schemaName     =      rep.getStepAttributeString(id_step,  \"schema\");         //$NON-NLS-1$\n\t\t\ttableName      =      rep.getStepAttributeString(id_step,  \"table\");          //$NON-NLS-1$\n\t\t\tlogFile        =      rep.getStepAttributeString(id_step,  \"log_file\");       //$NON-NLS-1$\n\t\t\tencoding       =      rep.getStepAttributeString(id_step,  \"encoding\");       //$NON-NLS-1$\n\t\t\ttruncate       =      Boolean.parseBoolean(rep.getStepAttributeString(id_step,  \"truncate\"));       //$NON-NLS-1$\n\t\t\tautoSchema     =      Boolean.parseBoolean(rep.getStepAttributeString(id_step,  \"auto_schema\"));       //$NON-NLS-1$\n\t\t\tautoStringWidths =    Boolean.parseBoolean(rep.getStepAttributeString(id_step,  \"auto_string_widths\"));       //$NON-NLS-1$\n\t\t\t\n\t\t\tint nrvalues = rep.countNrStepAttributes(id_step, \"stream_name\");             //$NON-NLS-1$\n\n\t\t\tallocate(nrvalues);\n\n\t\t\tfor (int i=0;i<nrvalues;i++)\n\t\t\t{\n\t\t\t\tfieldTable[i]  = rep.getStepAttributeString(id_step, i, \"stream_name\");   //$NON-NLS-1$\n\t\t\t\tfieldStream[i] = rep.getStepAttributeString(id_step, i, \"field_name\");    //$NON-NLS-1$\n\t\t\t\tif (fieldStream[i]==null) fieldStream[i]=fieldTable[i];        \n\t\t\t\tfieldFormatOk[i] = rep.getStepAttributeBoolean(id_step, i, \"field_format_ok\");    //$NON-NLS-1$\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tthrow new KettleException(BaseMessages.getString(PKG, \"MonetDBBulkLoaderMeta.Exception.UnexpectedErrorReadingStepInfoFromRepository\"), e); //$NON-NLS-1$\n\t\t}\n\t}","id":10771,"modified_method":"public void readRep(Repository rep, ObjectId id_step, List<DatabaseMeta> databases, Map<String, Counter> counters)\n\t\tthrows KettleException\n\t{\n\t\ttry\n\t\t{\n\t\t\tdatabaseMeta = rep.loadDatabaseMetaFromStepAttribute(id_step, \"id_connection\", databases);\n     \t\tbufferSize     =      rep.getStepAttributeString(id_step, \"buffer_size\");         //$NON-NLS-1$\n     \t\tdbConnectionName =    rep.getStepAttributeString(id_step,  \"db_connection_name\"); //$NON-NLS-1$\n            schemaName     =      rep.getStepAttributeString(id_step,  \"schema\");             //$NON-NLS-1$\n\t\t\ttableName      =      rep.getStepAttributeString(id_step,  \"table\");              //$NON-NLS-1$\n\t\t\tlogFile        =      rep.getStepAttributeString(id_step,  \"log_file\");           //$NON-NLS-1$\n\t\t\tfieldSeparator = \t  rep.getStepAttributeString(id_step,  \"field_separator\");     //$NON-NLS-1$\n\t\t\tfieldEnclosure = \t  rep.getStepAttributeString(id_step,  \"field_enclosure\");     //$NON-NLS-1$\n\t\t\tNULLrepresentation =  rep.getStepAttributeString(id_step,  \"null_representation\"); //$NON-NLS-1$\n\t\t\tencoding       =      rep.getStepAttributeString(id_step,  \"encoding\");           //$NON-NLS-1$\n\t\t\ttruncate       =      Boolean.parseBoolean(rep.getStepAttributeString(id_step,  \"truncate\"));       //$NON-NLS-1$\n\t\t\t\n\t\t\tint nrvalues = rep.countNrStepAttributes(id_step, \"stream_name\");             //$NON-NLS-1$\n\n\t\t\tallocate(nrvalues);\n\n\t\t\tfor (int i=0;i<nrvalues;i++)\n\t\t\t{\n\t\t\t\tfieldTable[i]  = rep.getStepAttributeString(id_step, i, \"stream_name\");   //$NON-NLS-1$\n\t\t\t\tfieldStream[i] = rep.getStepAttributeString(id_step, i, \"field_name\");    //$NON-NLS-1$\n\t\t\t\tif (fieldStream[i]==null) fieldStream[i]=fieldTable[i];        \n\t\t\t\tfieldFormatOk[i] = rep.getStepAttributeBoolean(id_step, i, \"field_format_ok\");    //$NON-NLS-1$\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tthrow new KettleException(BaseMessages.getString(PKG, \"MonetDBBulkLoaderMeta.Exception.UnexpectedErrorReadingStepInfoFromRepository\"), e); //$NON-NLS-1$\n\t\t}\n\t}","commit_id":"014ad80e24e5fba7ba88b602c954fd37492b234f","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"private void readData(Node stepnode, List<? extends SharedObjectInterface> databases)\n\t\tthrows KettleXMLException\n\t{\n\t\ttry\n\t\t{\n\t\t\tdbConnectionName     = XMLHandler.getTagValue(stepnode, \"connection\");   //$NON-NLS-1$\n\t\t\tdatabaseMeta   = DatabaseMeta.findDatabase(databases, dbConnectionName);\n\n\t\t\tbufferSize = XMLHandler.getTagValue(stepnode, \"buffer_size\");       //$NON-NLS-1$\n\n            schemaName     = XMLHandler.getTagValue(stepnode, \"schema\");       //$NON-NLS-1$\n\t\t\ttableName      = XMLHandler.getTagValue(stepnode, \"table\");        //$NON-NLS-1$\n\t\t\t\n\t\t\tlogFile        = XMLHandler.getTagValue(stepnode, \"log_file\");     //$NON-NLS-1$\n\t\t\tencoding       = XMLHandler.getTagValue(stepnode, \"encoding\");         //$NON-NLS-1$\n\t\t\ttruncate       = \"Y\".equals(XMLHandler.getTagValue(stepnode, \"truncate\"));         //$NON-NLS-1$\n\t\t\tautoSchema     = \"Y\".equals(XMLHandler.getTagValue(stepnode, \"auto_schema\"));         //$NON-NLS-1$\n\t\t\tautoStringWidths = \"Y\".equals(XMLHandler.getTagValue(stepnode, \"auto_string_widths\"));         //$NON-NLS-1$\n\t\t\t\n\n\t\t\tint nrvalues = XMLHandler.countNodes(stepnode, \"mapping\");      //$NON-NLS-1$\n\t\t\tallocate(nrvalues);\n\n\t\t\tfor (int i=0;i<nrvalues;i++)\n\t\t\t{\n\t\t\t\tNode vnode = XMLHandler.getSubNodeByNr(stepnode, \"mapping\", i);    //$NON-NLS-1$\n\n\t\t\t\tfieldTable[i]      = XMLHandler.getTagValue(vnode, \"stream_name\"); //$NON-NLS-1$\n\t\t\t\tfieldStream[i]     = XMLHandler.getTagValue(vnode, \"field_name\");  //$NON-NLS-1$\n\t\t\t\tif (fieldStream[i]==null) fieldStream[i]=fieldTable[i];            // default: the same name!\n\t\t\t\tfieldFormatOk[i]  = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(vnode, \"field_format_ok\"));  //$NON-NLS-1$\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tthrow new KettleXMLException(BaseMessages.getString(PKG, \"MonetDBBulkLoaderMeta.Exception.UnableToReadStepInfoFromXML\"), e); //$NON-NLS-1$\n\t\t}\n\t}","id":10772,"modified_method":"private void readData(Node stepnode, List<? extends SharedObjectInterface> databases)\n\t\tthrows KettleXMLException\n\t{\n\t\ttry\n\t\t{\n\t\t\tdbConnectionName     = XMLHandler.getTagValue(stepnode, \"connection\");   //$NON-NLS-1$\n\t\t\tdatabaseMeta   = DatabaseMeta.findDatabase(databases, dbConnectionName);\n\n\n            schemaName     = XMLHandler.getTagValue(stepnode, \"schema\");       //$NON-NLS-1$\n\t\t\ttableName      = XMLHandler.getTagValue(stepnode, \"table\");        //$NON-NLS-1$\n\t\t\tbufferSize     = XMLHandler.getTagValue(stepnode, \"buffer_size\");  //$NON-NLS-1$\n\t\t\tlogFile        = XMLHandler.getTagValue(stepnode, \"log_file\");     //$NON-NLS-1$\n\t\t\ttruncate       = \"Y\".equals(XMLHandler.getTagValue(stepnode, \"truncate\"));         //$NON-NLS-1$\n\t\t\t\n\t\t\tfieldSeparator \t\t= XMLHandler.getTagValue(stepnode, \"field_separator\"); \t\t//$NON-NLS-1$\n\t\t\tfieldEnclosure \t\t= XMLHandler.getTagValue(stepnode, \"field_enclosure\"); \t\t//$NON-NLS-1$\n\t\t\tNULLrepresentation \t= XMLHandler.getTagValue(stepnode, \"null_representation\"); \t//$NON-NLS-1$\n\t\t\tencoding       \t\t= XMLHandler.getTagValue(stepnode, \"encoding\");         \t//$NON-NLS-1$\n\t\t\t//autoSchema     = \"Y\".equals(XMLHandler.getTagValue(stepnode, \"auto_schema\"));         //$NON-NLS-1$\n\t\t\t//autoStringWidths = \"Y\".equals(XMLHandler.getTagValue(stepnode, \"auto_string_widths\"));         //$NON-NLS-1$\n\t\t\t\n\n\t\t\tint nrvalues = XMLHandler.countNodes(stepnode, \"mapping\");      //$NON-NLS-1$\n\t\t\tallocate(nrvalues);\n\n\t\t\tfor (int i=0;i<nrvalues;i++)\n\t\t\t{\n\t\t\t\tNode vnode = XMLHandler.getSubNodeByNr(stepnode, \"mapping\", i);    //$NON-NLS-1$\n\n\t\t\t\tfieldTable[i]      = XMLHandler.getTagValue(vnode, \"stream_name\"); //$NON-NLS-1$\n\t\t\t\tfieldStream[i]     = XMLHandler.getTagValue(vnode, \"field_name\");  //$NON-NLS-1$\n\t\t\t\tif (fieldStream[i]==null) fieldStream[i]=fieldTable[i];            // default: the same name!\n\t\t\t\tfieldFormatOk[i]  = \"Y\".equalsIgnoreCase(XMLHandler.getTagValue(vnode, \"field_format_ok\"));  //$NON-NLS-1$\n\t\t\t}\n\t\t}\n\t\tcatch(Exception e)\n\t\t{\n\t\t\tthrow new KettleXMLException(BaseMessages.getString(PKG, \"MonetDBBulkLoaderMeta.Exception.UnableToReadStepInfoFromXML\"), e); //$NON-NLS-1$\n\t\t}\n\t}","commit_id":"014ad80e24e5fba7ba88b602c954fd37492b234f","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"public void setDefault()\n\t{\n\t\tfieldTable   = null;\n\t\tdatabaseMeta = null;\n\t\tbufferSize   = \"100000\";\n        schemaName   = \"\";                //$NON-NLS-1$\n\t\ttableName    = BaseMessages.getString(PKG, \"MonetDBBulkLoaderMeta.DefaultTableName\"); //$NON-NLS-1$\n\t\tlogFile      = \"\";                                    //$NON-NLS-1$\n        encoding     = \"\";                                    //$NON-NLS-1$\n        truncate \t = false;\n        autoSchema   = false;\n        autoStringWidths = false;\n        \n\t\tallocate(0);\n\t}","id":10773,"modified_method":"public void setDefault()\n\t{\n\t\tfieldTable   = null;\n\t\tdatabaseMeta = null;\n        schemaName   = \"\";                //$NON-NLS-1$\n\t\ttableName    = BaseMessages.getString(PKG, \"MonetDBBulkLoaderMeta.DefaultTableName\"); //$NON-NLS-1$\n\t\tbufferSize   = \"100000\";\n\t\tlogFile      = \"\";                //$NON-NLS-1$\n\t\ttruncate \t = false;\n\n        // MonetDB safe defaults.\n        fieldSeparator     = \"|\";\t      //$NON-NLS-1$\n        fieldEnclosure     = \"\\\\,\";\t      //$NON-NLS-1$\n        NULLrepresentation = \"\";\t      //$NON-NLS-1$\n        encoding     = \"UTF-8\";           //$NON-NLS-1$\n\t\tallocate(0);\n\t}","commit_id":"014ad80e24e5fba7ba88b602c954fd37492b234f","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"@Test\n    public void testUnconsumed() throws Exception\n    {\n        String response=null;\n        String requests=null;\n        int offset=0;\n\n        offset=0;\n        requests=\n        \"GET /R1?read=4 HTTP/1.1\\n\"+\n        \"Host: localhost\\n\"+\n        \"Transfer-Encoding: chunked\\n\"+\n        \"Content-Type: text/plain; charset=utf-8\\n\"+\n        \"\\015\\012\"+\n        \"5;\\015\\012\"+\n        \"12345\\015\\012\"+\n        \"5;\\015\\012\"+\n        \"67890\\015\\012\"+\n        \"0;\\015\\012\\015\\012\"+\n        \"GET /R2 HTTP/1.1\\n\"+\n        \"Host: localhost\\n\"+\n        \"Content-Type: text/plain; charset=utf-8\\n\"+\n        \"Content-Length: 10\\n\"+\n        \"Connection: close\\n\"+\n        \"\\n\"+\n        \"abcdefghij\\n\";\n\n        response=connector.getResponses(requests);\n        \n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        offset = checkContains(response,offset,\"pathInfo=/R1\");\n        offset = checkContains(response,offset,\"1234\");\n        checkNotContained(response,offset,\"56789\");\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        offset = checkContains(response,offset,\"pathInfo=/R2\");\n        offset = checkContains(response,offset,\"encoding=UTF-8\");\n        offset = checkContains(response,offset,\"abcdefghij\");\n    }","id":10774,"modified_method":"@Test\n    public void testUnconsumed() throws Exception\n    {\n        int offset=0;\n        String requests =\n        \"GET /R1?read=4 HTTP/1.1\\r\\n\" +\n        \"Host: localhost\\r\\n\" +\n        \"Transfer-Encoding: chunked\\r\\n\" +\n        \"Content-Type: text/plain; charset=utf-8\\r\\n\" +\n        \"\\r\\n\" +\n        \"5;\\r\\n\" +\n        \"12345\\r\\n\" +\n        \"5;\\r\\n\" +\n        \"67890\\r\\n\" +\n        \"0;\\r\\n\" +\n        \"\\r\\n\" +\n        \"GET /R2 HTTP/1.1\\r\\n\" +\n        \"Host: localhost\\r\\n\" +\n        \"Content-Type: text/plain; charset=utf-8\\r\\n\" +\n        \"Content-Length: 10\\r\\n\" +\n        \"Connection: close\\r\\n\" +\n        \"\\r\\n\" +\n        \"abcdefghij\\r\\n\";\n\n        String response = connector.getResponses(requests);\n\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        offset = checkContains(response,offset,\"pathInfo=/R1\");\n        offset = checkContains(response,offset,\"1234\");\n        checkNotContained(response,offset,\"56789\");\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        offset = checkContains(response,offset,\"pathInfo=/R2\");\n        offset = checkContains(response,offset,\"encoding=UTF-8\");\n        checkContains(response,offset,\"abcdefghij\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testSetDate() throws Exception\n    {\n        String response=connector.getResponses(\"GET /?date=1+Jan+1970 HTTP/1.1\\n\"+\n                \"Host: localhost:80\\n\"+\n                \"Connection: close\\n\"+\n                \"\\n\");\n\n        int offset=0;\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        offset = checkContains(response,offset,\"Date: 1 Jan 1970\");\n        checkContains(response,offset,\"pathInfo=/\");\n    }","id":10775,"modified_method":"@Test\n    public void testSetDate() throws Exception\n    {\n        String response=connector.getResponses(\"GET /?date=1+Jan+1970 HTTP/1.1\\r\\n\"+\n                \"Host: localhost:80\\r\\n\"+\n                \"Connection: close\\r\\n\"+\n                \"\\r\\n\");\n\n        int offset=0;\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        offset = checkContains(response,offset,\"Date: 1 Jan 1970\");\n        checkContains(response,offset,\"pathInfo=/\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testBadNoPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET http://localhost:80/../cheat HTTP/1.1\\n\"+\n                \"Host: localhost:80\\n\"+\n                \"\\n\");\n        int offset=0;\n        offset = checkContains(response,offset,\"HTTP/1.1 400\");\n    }","id":10776,"modified_method":"@Test\n    public void testBadNoPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET http://localhost:80/../cheat HTTP/1.1\\r\\n\"+\n                \"Host: localhost:80\\r\\n\"+\n                \"\\r\\n\");\n        checkContains(response,0,\"HTTP/1.1 400\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testBadPathEncodedDotDotPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET /ooops/%2e%2e/%2e%2e/path HTTP/1.0\\nHost: localhost:80\\n\\n\");\n        checkContains(response,0,\"HTTP/1.1 400 Bad URI\");\n    }","id":10777,"modified_method":"@Test\n    public void testBadPathEncodedDotDotPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET /ooops/%2e%2e/%2e%2e/path HTTP/1.0\\r\\nHost: localhost:80\\r\\n\\n\");\n        checkContains(response,0,\"HTTP/1.1 400 Bad URI\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testFragmentedChunk() throws Exception\n    {\n        String response=null;\n        try\n        {\n            int offset=0;\n\n            // Chunk last\n            offset=0;\n            response=connector.getResponses(\"GET /R1 HTTP/1.1\\n\"+\n                                           \"Host: localhost\\n\"+\n                                           \"Transfer-Encoding: chunked\\n\"+\n                                           \"Content-Type: text/plain\\n\"+\n                                           \"Connection: close\\n\"+\n                                           \"\\015\\012\"+\n                                           \"5;\\015\\012\"+\n                                           \"12345\\015\\012\"+\n                                           \"0;\\015\\012\\015\\012\");\n            offset = checkContains(response,offset,\"HTTP/1.1 200\");\n            offset = checkContains(response,offset,\"/R1\");\n            offset = checkContains(response,offset,\"12345\");\n\n            offset = 0;\n            response=connector.getResponses(\"GET /R2 HTTP/1.1\\n\"+\n                                           \"Host: localhost\\n\"+\n                                           \"Transfer-Encoding: chunked\\n\"+\n                                           \"Content-Type: text/plain\\n\"+\n                                           \"Connection: close\\n\"+\n                                           \"\\015\\012\"+\n                                           \"5;\\015\\012\"+\n                                           \"ABCDE\\015\\012\"+\n                                           \"0;\\015\\012\\015\\012\");\n            offset = checkContains(response,offset,\"HTTP/1.1 200\");\n            offset = checkContains(response,offset,\"/R2\");\n            offset = checkContains(response,offset,\"ABCDE\");\n        }\n        catch(Exception e)\n        {\n            if(response != null)\n                System.err.println(response);\n            throw e;\n        }\n    }","id":10778,"modified_method":"@Test\n    public void testFragmentedChunk() throws Exception\n    {\n        String response=null;\n        try\n        {\n            int offset=0;\n\n            // Chunk last\n            response=connector.getResponses(\"GET /R1 HTTP/1.1\\r\\n\"+\n                                           \"Host: localhost\\r\\n\"+\n                                           \"Transfer-Encoding: chunked\\r\\n\"+\n                                           \"Content-Type: text/plain\\r\\n\"+\n                                           \"Connection: close\\r\\n\"+\n                                           \"\\r\\n\"+\n                                           \"5;\\r\\n\"+\n                                           \"12345\\r\\n\"+\n                                           \"0;\\r\\n\" +\n                                           \"\\r\\n\");\n            offset = checkContains(response,offset,\"HTTP/1.1 200\");\n            offset = checkContains(response,offset,\"/R1\");\n            checkContains(response,offset,\"12345\");\n\n            offset = 0;\n            response=connector.getResponses(\"GET /R2 HTTP/1.1\\r\\n\"+\n                                           \"Host: localhost\\r\\n\"+\n                                           \"Transfer-Encoding: chunked\\r\\n\"+\n                                           \"Content-Type: text/plain\\r\\n\"+\n                                           \"Connection: close\\r\\n\"+\n                                           \"\\r\\n\"+\n                                           \"5;\\r\\n\"+\n                                           \"ABCDE\\r\\n\"+\n                                           \"0;\\r\\n\" +\n                                           \"\\r\\n\");\n            offset = checkContains(response,offset,\"HTTP/1.1 200\");\n            offset = checkContains(response,offset,\"/R2\");\n            checkContains(response,offset,\"ABCDE\");\n        }\n        catch(Exception e)\n        {\n            if(response != null)\n                System.err.println(response);\n            throw e;\n        }\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testBadHostPort() throws Exception\n    {\n        Log.getLogger(HttpParser.class).info(\"badMessage: Number formate exception expected ...\");\n        String response;\n\n        response=connector.getResponses(\"GET http://localhost:EXPECTED_NUMBER_FORMAT_EXCEPTION/ HTTP/1.1\\n\"+\n            \"Host: localhost\\n\"+\n            \"Connection: close\\015\\012\"+\n            \"\\015\\012\");\n        checkContains(response,0,\"HTTP/1.1 400\");\n    }","id":10779,"modified_method":"@Test\n    public void testBadHostPort() throws Exception\n    {\n        Log.getLogger(HttpParser.class).info(\"badMessage: Number formate exception expected ...\");\n        String response;\n\n        response=connector.getResponses(\"GET http://localhost:EXPECTED_NUMBER_FORMAT_EXCEPTION/ HTTP/1.1\\r\\n\"+\n            \"Host: localhost\\r\\n\"+\n            \"Connection: close\\r\\n\"+\n            \"\\r\\n\");\n        checkContains(response,0,\"HTTP/1.1 400\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testOKPathEncodedDotDotPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET /ooops/%2e%2e/path HTTP/1.0\\nHost: localhost:80\\n\\n\");\n        checkContains(response,0,\"HTTP/1.1 200 OK\");\n        checkContains(response,0,\"pathInfo=/path\");\n    }","id":10780,"modified_method":"@Test\n    public void testOKPathEncodedDotDotPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET /ooops/%2e%2e/path HTTP/1.0\\r\\nHost: localhost:80\\r\\n\\n\");\n        checkContains(response,0,\"HTTP/1.1 200 OK\");\n        checkContains(response,0,\"pathInfo=/path\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testBadUTF8FallsbackTo8859() throws Exception\n    {\n        Log.getLogger(HttpParser.class).info(\"badMessage: bad encoding expected ...\");\n        String response;\n\n        response=connector.getResponses(\"GET /foo/bar%c0%00 HTTP/1.1\\n\"+\n            \"Host: localhost\\n\"+\n            \"Connection: close\\n\"+\n            \"\\015\\012\");\n        checkContains(response,0,\"HTTP/1.1 200\"); //now fallback to iso-8859-1\n\n        response=connector.getResponses(\"GET /bad/utf8%c1 HTTP/1.1\\n\"+\n            \"Host: localhost\\n\"+\n            \"Connection: close\\n\"+\n            \"\\015\\012\");\n        checkContains(response,0,\"HTTP/1.1 200\"); //now fallback to iso-8859-1\n    }","id":10781,"modified_method":"@Test\n    public void testBadUTF8FallsbackTo8859() throws Exception\n    {\n        Log.getLogger(HttpParser.class).info(\"badMessage: bad encoding expected ...\");\n        String response;\n\n        response=connector.getResponses(\"GET /foo/bar%c0%00 HTTP/1.1\\r\\n\"+\n            \"Host: localhost\\r\\n\"+\n            \"Connection: close\\r\\n\"+\n            \"\\r\\n\");\n        checkContains(response,0,\"HTTP/1.1 200\"); //now fallback to iso-8859-1\n\n        response=connector.getResponses(\"GET /bad/utf8%c1 HTTP/1.1\\r\\n\"+\n            \"Host: localhost\\r\\n\"+\n            \"Connection: close\\r\\n\"+\n            \"\\r\\n\");\n        checkContains(response,0,\"HTTP/1.1 200\"); //now fallback to iso-8859-1\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testOversizedResponse() throws Exception\n    {\n        String str = \"thisisastringthatshouldreachover1kbytes-\";\n        for (int i=0;i<500;i++)\n            str+=\"xxxxxxxxxxxx\";\n        final String longstr = str;\n        final CountDownLatch checkError = new CountDownLatch(1);\n        String response = null;\n        server.stop();\n        server.setHandler(new DumpHandler()\n        {\n            @Override\n            public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException\n            {\n                baseRequest.setHandled(true);\n                response.setHeader(HttpHeader.CONTENT_TYPE.toString(),MimeTypes.Type.TEXT_HTML.toString());\n                response.setHeader(\"LongStr\", longstr);\n                PrintWriter writer = response.getWriter();\n                writer.write(\"<html><h1>FOO<\/h1><\/html>\");\n                writer.flush();\n                if (writer.checkError())\n                    checkError.countDown();\n                response.flushBuffer();\n            }\n        });\n        server.start();\n\n        try\n        {\n            ((AbstractLogger)Log.getLogger(HttpChannel.class)).info(\"Excpect IOException: Response header too large...\");\n            ((StdErrLog)Log.getLogger(HttpChannel.class)).setHideStacks(true);\n            int offset = 0;\n\n            response = connector.getResponses(\"GET / HTTP/1.1\\n\"+\n                \"Host: localhost\\n\" +\n                \"\\015\\012\"\n             );\n\n            checkContains(response, offset, \"HTTP/1.1 500\");\n            assertTrue(checkError.await(1,TimeUnit.SECONDS));\n        }\n        catch(Exception e)\n        {\n            if(response != null)\n                System.err.println(response);\n            throw e;\n        }\n        finally\n        {\n\n            ((StdErrLog)Log.getLogger(HttpChannel.class)).setHideStacks(false);\n        }\n    }","id":10782,"modified_method":"@Test\n    public void testOversizedResponse() throws Exception\n    {\n        String str = \"thisisastringthatshouldreachover1kbytes-\";\n        for (int i=0;i<500;i++)\n            str+=\"xxxxxxxxxxxx\";\n        final String longstr = str;\n        final CountDownLatch checkError = new CountDownLatch(1);\n        String response = null;\n        server.stop();\n        server.setHandler(new DumpHandler()\n        {\n            @Override\n            public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException\n            {\n                baseRequest.setHandled(true);\n                response.setHeader(HttpHeader.CONTENT_TYPE.toString(),MimeTypes.Type.TEXT_HTML.toString());\n                response.setHeader(\"LongStr\", longstr);\n                PrintWriter writer = response.getWriter();\n                writer.write(\"<html><h1>FOO<\/h1><\/html>\");\n                writer.flush();\n                if (writer.checkError())\n                    checkError.countDown();\n                response.flushBuffer();\n            }\n        });\n        server.start();\n\n        Logger logger = Log.getLogger(HttpChannel.class);\n        try\n        {\n            logger.info(\"Expect IOException: Response header too large...\");\n            ((StdErrLog)logger).setHideStacks(true);\n\n            response = connector.getResponses(\"GET / HTTP/1.1\\r\\n\"+\n                \"Host: localhost\\r\\n\" +\n                \"\\r\\n\"\n             );\n\n            checkContains(response, 0, \"HTTP/1.1 500\");\n            assertTrue(checkError.await(1,TimeUnit.SECONDS));\n        }\n        catch(Exception e)\n        {\n            if(response != null)\n                System.err.println(response);\n            throw e;\n        }\n        finally\n        {\n            ((StdErrLog)logger).setHideStacks(false);\n        }\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testDate() throws Exception\n    {\n        String response=connector.getResponses(\"GET / HTTP/1.1\\n\"+\n                \"Host: localhost:80\\n\"+\n                \"Connection: close\\n\"+\n                \"\\n\");\n\n        int offset=0;\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        offset = checkContains(response,offset,\"Date: \");\n        checkContains(response,offset,\"pathInfo=/\");\n    }","id":10783,"modified_method":"@Test\n    public void testDate() throws Exception\n    {\n        String response=connector.getResponses(\"GET / HTTP/1.1\\r\\n\"+\n                \"Host: localhost:80\\r\\n\"+\n                \"Connection: close\\r\\n\"+\n                \"\\r\\n\");\n\n        int offset=0;\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        offset = checkContains(response,offset,\"Date: \");\n        checkContains(response,offset,\"pathInfo=/\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testAsterisk() throws Exception\n    {\n        String response = null;\n\n        try\n        {\n            ((StdErrLog)HttpParser.LOG).setHideStacks(true);\n            int offset=0;\n\n            response=connector.getResponses(\"OPTIONS * HTTP/1.1\\n\"+\n                                           \"Host: localhost\\n\"+\n                                           \"Transfer-Encoding: chunked\\n\"+\n                                           \"Content-Type: text/plain; charset=utf-8\\n\"+\n                                           \"Connection: close\\n\"+\n                                           \"\\015\\012\"+\n                                           \"5;\\015\\012\"+\n                                           \"12345\\015\\012\"+\n                                           \"0;\\015\\012\\015\\012\");\n            offset = checkContains(response,offset,\"HTTP/1.1 200\");\n\n            offset=0;\n            response=connector.getResponses(\"GET * HTTP/1.1\\n\"+\n                                           \"Host: localhost\\n\"+\n                                           \"Transfer-Encoding: chunked\\n\"+\n                                           \"Content-Type: text/plain; charset=utf-8\\n\"+\n                                           \"Connection: close\\n\"+\n                                           \"\\015\\012\"+\n                                           \"5;\\015\\012\"+\n                                           \"12345\\015\\012\"+\n                                           \"0;\\015\\012\\015\\012\");\n            offset = checkContains(response,offset,\"HTTP/1.1 400\");\n\n            offset=0;\n            response=connector.getResponses(\"GET ** HTTP/1.1\\n\"+\n                                           \"Host: localhost\\n\"+\n                                           \"Transfer-Encoding: chunked\\n\"+\n                                           \"Content-Type: text/plain; charset=utf-8\\n\"+\n                                           \"Connection: close\\n\"+\n                                           \"\\015\\012\"+\n                                           \"5;\\015\\012\"+\n                                           \"12345\\015\\012\"+\n                                           \"0;\\015\\012\\015\\012\");\n            offset = checkContains(response,offset,\"HTTP/1.1 400 Bad Request\");\n        }\n        catch (Exception e)\n        {\n            if(response != null)\n                System.err.println(response);\n            throw e;\n        }\n        finally\n        {\n            ((StdErrLog)HttpParser.LOG).setHideStacks(false);\n        }\n\n    }","id":10784,"modified_method":"@Test\n    public void testAsterisk() throws Exception\n    {\n        String response = null;\n        try\n        {\n            ((StdErrLog)HttpParser.LOG).setHideStacks(true);\n            int offset=0;\n\n            response=connector.getResponses(\"OPTIONS * HTTP/1.1\\r\\n\"+\n                                           \"Host: localhost\\r\\n\"+\n                                           \"Transfer-Encoding: chunked\\r\\n\"+\n                                           \"Content-Type: text/plain; charset=utf-8\\r\\n\"+\n                                           \"Connection: close\\r\\n\"+\n                                           \"\\r\\n\"+\n                                           \"5;\\r\\n\"+\n                                           \"12345\\r\\n\"+\n                                           \"0;\\r\\n\" +\n                                           \"\\r\\n\");\n            checkContains(response,offset,\"HTTP/1.1 200\");\n\n            offset=0;\n            response=connector.getResponses(\"GET * HTTP/1.1\\r\\n\"+\n                                           \"Host: localhost\\r\\n\"+\n                                           \"Transfer-Encoding: chunked\\r\\n\"+\n                                           \"Content-Type: text/plain; charset=utf-8\\r\\n\"+\n                                           \"Connection: close\\r\\n\"+\n                                           \"\\r\\n\"+\n                                           \"5;\\r\\n\"+\n                                           \"12345\\r\\n\"+\n                                           \"0;\\r\\n\" +\n                                           \"\\r\\n\");\n            checkContains(response,offset,\"HTTP/1.1 400\");\n\n            offset=0;\n            response=connector.getResponses(\"GET ** HTTP/1.1\\r\\n\"+\n                                           \"Host: localhost\\r\\n\"+\n                                           \"Transfer-Encoding: chunked\\r\\n\"+\n                                           \"Content-Type: text/plain; charset=utf-8\\r\\n\"+\n                                           \"Connection: close\\r\\n\"+\n                                           \"\\r\\n\"+\n                                           \"5;\\r\\n\"+\n                                           \"12345\\r\\n\"+\n                                           \"0;\\r\\n\" +\n                                           \"\\r\\n\");\n            checkContains(response,offset,\"HTTP/1.1 400 Bad Request\");\n        }\n        catch (Exception e)\n        {\n            if(response != null)\n                System.err.println(response);\n            throw e;\n        }\n        finally\n        {\n            ((StdErrLog)HttpParser.LOG).setHideStacks(false);\n        }\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testBadDotDotPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET ../path HTTP/1.0\\nHost: localhost:80\\n\\n\");\n        checkContains(response,0,\"HTTP/1.1 400 Bad URI\");\n    }","id":10785,"modified_method":"@Test\n    public void testBadDotDotPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET ../path HTTP/1.0\\r\\nHost: localhost:80\\r\\n\\n\");\n        checkContains(response,0,\"HTTP/1.1 400 Bad URI\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\n     * Creates a request header with over 1000 entries.\n     * @throws Exception if test failure\n     */\n    @Test\n    public void testExcessiveHeader() throws Exception\n    {\n        String response = null;\n        int offset = 0;\n\n        StringBuilder request = new StringBuilder();\n        request.append(\"GET / HTTP/1.1\\n\");\n        request.append(\"Host: localhost\\n\");\n        request.append(\"Cookie: thisisastring\\n\");\n        for(int i=0; i<1000; i++) {\n            request.append(String.format(\"X-Header-%04d: %08x\\n\", i, i));\n        }\n        request.append(\"\\015\\012\");\n\n        response = connector.getResponses(request.toString());\n        offset = checkContains(response, offset, \"HTTP/1.1 413\");\n        checkContains(response, offset, \"<h1>Bad Message 413<\/h1><pre>reason: Request Entity Too Large<\/pre>\");\n    }","id":10786,"modified_method":"/**\n     * Creates a request header with over 1000 entries.\n     * @throws Exception if test failure\n     */\n    @Test\n    public void testExcessiveHeader() throws Exception\n    {\n        int offset = 0;\n\n        StringBuilder request = new StringBuilder();\n        request.append(\"GET / HTTP/1.1\\r\\n\");\n        request.append(\"Host: localhost\\r\\n\");\n        request.append(\"Cookie: thisisastring\\r\\n\");\n        for(int i=0; i<1000; i++) {\n            request.append(String.format(\"X-Header-%04d: %08x\\r\\n\", i, i));\n        }\n        request.append(\"\\r\\n\");\n\n        String response = connector.getResponses(request.toString());\n        offset = checkContains(response, offset, \"HTTP/1.1 413\");\n        checkContains(response, offset, \"<h1>Bad Message 413<\/h1><pre>reason: Request Entity Too Large<\/pre>\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testUnconsumedErrorStream() throws Exception\n    {\n        String response=null;\n        String requests=null;\n        int offset=0;\n\n        offset=0;\n        requests=\n        \"GET /R1?error=599 HTTP/1.1\\n\"+\n        \"Host: localhost\\n\"+\n        \"Transfer-Encoding: chunked\\n\"+\n        \"Content-Type: application/data; charset=utf-8\\n\"+\n        \"\\015\\012\"+\n        \"5;\\015\\012\"+\n        \"12345\\015\\012\"+\n        \"5;\\015\\012\"+\n        \"67890\\015\\012\"+\n        \"0;\\015\\012\\015\\012\"+\n        \"GET /R2 HTTP/1.1\\n\"+\n        \"Host: localhost\\n\"+\n        \"Content-Type: text/plain; charset=utf-8\\n\"+\n        \"Content-Length: 10\\n\"+\n        \"Connection: close\\n\"+\n        \"\\n\"+\n        \"abcdefghij\\n\";\n\n        response=connector.getResponses(requests);\n\n        offset = checkContains(response,offset,\"HTTP/1.1 599\");\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        offset = checkContains(response,offset,\"/R2\");\n        offset = checkContains(response,offset,\"encoding=UTF-8\");\n        offset = checkContains(response,offset,\"abcdefghij\");\n    }","id":10787,"modified_method":"@Test\n    public void testUnconsumedErrorStream() throws Exception\n    {\n        int offset=0;\n        String requests=\n        \"GET /R1?error=599 HTTP/1.1\\r\\n\"+\n        \"Host: localhost\\r\\n\"+\n        \"Transfer-Encoding: chunked\\r\\n\"+\n        \"Content-Type: application/data; charset=utf-8\\r\\n\"+\n        \"\\r\\n\"+\n        \"5;\\r\\n\"+\n        \"12345\\r\\n\"+\n        \"5;\\r\\n\"+\n        \"67890\\r\\n\"+\n        \"0;\\r\\n\" +\n        \"\\r\\n\"+\n        \"GET /R2 HTTP/1.1\\r\\n\"+\n        \"Host: localhost\\r\\n\"+\n        \"Content-Type: text/plain; charset=utf-8\\r\\n\"+\n        \"Content-Length: 10\\r\\n\"+\n        \"Connection: close\\r\\n\"+\n        \"\\r\\n\"+\n        \"abcdefghij\\r\\n\";\n\n        String response = connector.getResponses(requests);\n\n        offset = checkContains(response,offset,\"HTTP/1.1 599\");\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        offset = checkContains(response,offset,\"/R2\");\n        offset = checkContains(response,offset,\"encoding=UTF-8\");\n        checkContains(response,offset,\"abcdefghij\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testAutoFlush() throws Exception\n    {\n        String response=null;\n        int offset=0;\n\n        offset=0;\n        response=connector.getResponses(\"GET /R1 HTTP/1.1\\n\"+\n            \"Host: localhost\\n\"+\n            \"Transfer-Encoding: chunked\\n\"+\n            \"Content-Type: text/plain\\n\"+\n            \"Connection: close\\n\"+\n            \"\\015\\012\"+\n            \"5;\\015\\012\"+\n            \"12345\\015\\012\"+\n            \"0;\\015\\012\\015\\012\");\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        checkNotContained(response,offset,\"IgnoreMe\");\n        offset = checkContains(response,offset,\"/R1\");\n        offset = checkContains(response,offset,\"12345\");\n    }","id":10788,"modified_method":"@Test\n    public void testAutoFlush() throws Exception\n    {\n        int offset=0;\n\n        String response = connector.getResponses(\"GET /R1 HTTP/1.1\\r\\n\" +\n                \"Host: localhost\\r\\n\" +\n                \"Transfer-Encoding: chunked\\r\\n\" +\n                \"Content-Type: text/plain\\r\\n\" +\n                \"Connection: close\\r\\n\" +\n                \"\\r\\n\" +\n                \"5;\\r\\n\" +\n                \"12345\\r\\n\" +\n                \"0;\\r\\n\" +\n                \"\\r\\n\");\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        checkNotContained(response,offset,\"IgnoreMe\");\n        offset = checkContains(response,offset,\"/R1\");\n        checkContains(response,offset,\"12345\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testOKPathDotDotPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET /ooops/../path HTTP/1.0\\nHost: localhost:80\\n\\n\");\n        checkContains(response,0,\"HTTP/1.1 200 OK\");\n        checkContains(response,0,\"pathInfo=/path\");\n    }","id":10789,"modified_method":"@Test\n    public void testOKPathDotDotPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET /ooops/../path HTTP/1.0\\r\\nHost: localhost:80\\r\\n\\n\");\n        checkContains(response,0,\"HTTP/1.1 200 OK\");\n        checkContains(response,0,\"pathInfo=/path\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Before\n    public void init() throws Exception\n    {\n        server = new Server();\n\n        HttpConnectionFactory http = new HttpConnectionFactory();\n        http.getHttpConfiguration().setRequestHeaderSize(1024);\n        http.getHttpConfiguration().setResponseHeaderSize(1024);\n        \n        connector = new LocalConnector(server,http,null);\n        connector.setIdleTimeout(5000);\n        connector.getConnectionFactory(HttpConnectionFactory.class).getHttpConfiguration().setSendDateHeader(true);\n        server.addConnector(connector);\n        server.setHandler(new DumpHandler());\n        ErrorHandler eh=new ErrorHandler();\n        eh.setServer(server);\n        server.addBean(eh);\n        server.start();\n    }","id":10790,"modified_method":"@Before\n    public void init() throws Exception\n    {\n        server = new Server();\n\n        HttpConfiguration config = new HttpConfiguration();\n        config.setRequestHeaderSize(1024);\n        config.setResponseHeaderSize(1024);\n        config.setSendDateHeader(true);\n        HttpConnectionFactory http = new HttpConnectionFactory(config);\n\n        connector = new LocalConnector(server,http,null);\n        connector.setIdleTimeout(5000);\n        server.addConnector(connector);\n        server.setHandler(new DumpHandler());\n        ErrorHandler eh=new ErrorHandler();\n        eh.setServer(server);\n        server.addBean(eh);\n        server.start();\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\n     * Creates a request header over 1k in size, by creating a single header entry with an huge value.\n     * @throws Exception if test failure\n     */\n    @Test\n    public void testOversizedBuffer() throws Exception\n    {\n        String response = null;\n        try\n        {\n            int offset = 0;\n            String cookie = \"thisisastringthatshouldreachover1kbytes\";\n            for (int i=0;i<100;i++)\n                cookie+=\"xxxxxxxxxxxx\";\n            response = connector.getResponses(\"GET / HTTP/1.1\\n\"+\n                \"Host: localhost\\n\" +\n                \"Cookie: \"+cookie+\"\\n\"+\n                \"\\015\\012\"\n             );\n            checkContains(response, offset, \"HTTP/1.1 413\");\n        }\n        catch(Exception e)\n        {\n            if(response != null)\n                System.err.println(response);\n            throw e;\n        }\n    }","id":10791,"modified_method":"/**\n     * Creates a request header over 1k in size, by creating a single header entry with an huge value.\n     * @throws Exception if test failure\n     */\n    @Test\n    public void testOversizedBuffer() throws Exception\n    {\n        String response = null;\n        try\n        {\n            int offset = 0;\n            String cookie = \"thisisastringthatshouldreachover1kbytes\";\n            for (int i=0;i<100;i++)\n                cookie+=\"xxxxxxxxxxxx\";\n            response = connector.getResponses(\"GET / HTTP/1.1\\r\\n\"+\n                \"Host: localhost\\r\\n\" +\n                \"Cookie: \"+cookie+\"\\r\\n\"+\n                \"\\r\\n\"\n             );\n            checkContains(response, offset, \"HTTP/1.1 413\");\n        }\n        catch(Exception e)\n        {\n            if(response != null)\n                System.err.println(response);\n            throw e;\n        }\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testUnconsumedErrorRead() throws Exception\n    {\n        String response=null;\n        String requests=null;\n        int offset=0;\n\n        offset=0;\n        requests=\n        \"GET /R1?read=1&error=499 HTTP/1.1\\n\"+\n        \"Host: localhost\\n\"+\n        \"Transfer-Encoding: chunked\\n\"+\n        \"Content-Type: text/plain; charset=utf-8\\n\"+\n        \"\\015\\012\"+\n        \"5;\\015\\012\"+\n        \"12345\\015\\012\"+\n        \"5;\\015\\012\"+\n        \"67890\\015\\012\"+\n        \"0;\\015\\012\\015\\012\"+\n        \"GET /R2 HTTP/1.1\\n\"+\n        \"Host: localhost\\n\"+\n        \"Content-Type: text/plain; charset=utf-8\\n\"+\n        \"Content-Length: 10\\n\"+\n        \"Connection: close\\n\"+\n        \"\\n\"+\n        \"abcdefghij\\n\";\n\n        response=connector.getResponses(requests);\n\n        offset = checkContains(response,offset,\"HTTP/1.1 499\");\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        offset = checkContains(response,offset,\"/R2\");\n        offset = checkContains(response,offset,\"encoding=UTF-8\");\n        offset = checkContains(response,offset,\"abcdefghij\");\n    }","id":10792,"modified_method":"@Test\n    public void testUnconsumedErrorRead() throws Exception\n    {\n        int offset=0;\n        String requests=\n        \"GET /R1?read=1&error=499 HTTP/1.1\\r\\n\"+\n        \"Host: localhost\\r\\n\"+\n        \"Transfer-Encoding: chunked\\r\\n\"+\n        \"Content-Type: text/plain; charset=utf-8\\r\\n\"+\n        \"\\r\\n\"+\n        \"5;\\r\\n\"+\n        \"12345\\r\\n\"+\n        \"5;\\r\\n\"+\n        \"67890\\r\\n\"+\n        \"0;\\r\\n\" +\n        \"\\r\\n\"+\n        \"GET /R2 HTTP/1.1\\r\\n\"+\n        \"Host: localhost\\r\\n\"+\n        \"Content-Type: text/plain; charset=utf-8\\r\\n\"+\n        \"Content-Length: 10\\r\\n\"+\n        \"Connection: close\\r\\n\"+\n        \"\\r\\n\"+\n        \"abcdefghij\\r\\n\";\n\n        String response = connector.getResponses(requests);\n\n        offset = checkContains(response,offset,\"HTTP/1.1 499\");\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        offset = checkContains(response,offset,\"/R2\");\n        offset = checkContains(response,offset,\"encoding=UTF-8\");\n        checkContains(response,offset,\"abcdefghij\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testSimple() throws Exception\n    {\n        String response=connector.getResponses(\"GET /R1 HTTP/1.1\\n\"+\n                \"Host: localhost\\n\"+\n                \"Connection: close\\n\"+\n                \"\\n\");\n\n        int offset=0;\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        checkContains(response,offset,\"/R1\");\n    }","id":10793,"modified_method":"@Test\n    public void testSimple() throws Exception\n    {\n        String response=connector.getResponses(\"GET /R1 HTTP/1.1\\r\\n\"+\n                \"Host: localhost\\r\\n\"+\n                \"Connection: close\\r\\n\"+\n                \"\\r\\n\");\n\n        int offset=0;\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        checkContains(response,offset,\"/R1\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testBadPathDotDotPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET /ooops/../../path HTTP/1.0\\nHost: localhost:80\\n\\n\");\n        checkContains(response,0,\"HTTP/1.1 400 Bad URI\");\n    }","id":10794,"modified_method":"@Test\n    public void testBadPathDotDotPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET /ooops/../../path HTTP/1.0\\r\\nHost: localhost:80\\r\\n\\n\");\n        checkContains(response,0,\"HTTP/1.1 400 Bad URI\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testConnection() throws Exception\n    {\n        String response=null;\n        try\n        {\n            int offset=0;\n\n            offset=0;\n            response=connector.getResponses(\"GET /R1 HTTP/1.1\\n\"+\n                                           \"Host: localhost\\n\"+\n                                           \"Connection: TE, close\\n\"+\n                                           \"Transfer-Encoding: chunked\\n\"+\n                                           \"Content-Type: text/plain; charset=utf-8\\n\"+\n                                           \"\\015\\012\"+\n                                           \"5;\\015\\012\"+\n                                           \"12345\\015\\012\"+\n                                           \"0;\\015\\012\\015\\012\");\n            checkContains(response,offset,\"Connection: close\");\n        }\n        catch (Exception e)\n        {\n            if(response != null)\n                System.err.println(response);\n            throw e;\n        }\n    }","id":10795,"modified_method":"@Test\n    public void testConnection() throws Exception\n    {\n        String response=null;\n        try\n        {\n            int offset=0;\n            response=connector.getResponses(\"GET /R1 HTTP/1.1\\r\\n\"+\n                                           \"Host: localhost\\r\\n\"+\n                                           \"Connection: TE, close\\r\\n\"+\n                                           \"Transfer-Encoding: chunked\\r\\n\"+\n                                           \"Content-Type: text/plain; charset=utf-8\\r\\n\"+\n                                           \"\\r\\n\"+\n                                           \"5;\\r\\n\"+\n                                           \"12345\\r\\n\"+\n                                           \"0;\\r\\n\" +\n                                           \"\\r\\n\");\n            checkContains(response,offset,\"Connection: close\");\n        }\n        catch (Exception e)\n        {\n            if(response != null)\n                System.err.println(response);\n            throw e;\n        }\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testEncodedBadDotDotPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET %2e%2e/path HTTP/1.0\\nHost: localhost:80\\n\\n\");\n        checkContains(response,0,\"HTTP/1.1 400 Bad URI\");\n    }","id":10796,"modified_method":"@Test\n    public void testEncodedBadDotDotPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET %2e%2e/path HTTP/1.0\\r\\nHost: localhost:80\\r\\n\\n\");\n        checkContains(response,0,\"HTTP/1.1 400 Bad URI\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testNoPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET http://localhost:80 HTTP/1.1\\n\"+\n                \"Host: localhost:80\\n\"+\n                \"Connection: close\\n\"+\n                \"\\n\");\n\n        int offset=0;\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        checkContains(response,offset,\"pathInfo=/\");\n    }","id":10797,"modified_method":"@Test\n    public void testNoPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET http://localhost:80 HTTP/1.1\\r\\n\"+\n                \"Host: localhost:80\\r\\n\"+\n                \"Connection: close\\r\\n\"+\n                \"\\r\\n\");\n\n        int offset=0;\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        checkContains(response,offset,\"pathInfo=/\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testEmptyChunk() throws Exception\n    {\n        String response=connector.getResponses(\"GET /R1 HTTP/1.1\\n\"+\n                \"Host: localhost\\n\"+\n                \"Transfer-Encoding: chunked\\n\"+\n                \"Content-Type: text/plain\\n\"+\n                \"Connection: close\\n\"+\n                \"\\015\\012\"+\n        \"0\\015\\012\\015\\012\");\n\n        int offset=0;\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        checkContains(response,offset,\"/R1\");\n    }","id":10798,"modified_method":"@Test\n    public void testEmptyChunk() throws Exception\n    {\n        String response=connector.getResponses(\"GET /R1 HTTP/1.1\\r\\n\"+\n                \"Host: localhost\\r\\n\"+\n                \"Transfer-Encoding: chunked\\r\\n\"+\n                \"Content-Type: text/plain\\r\\n\"+\n                \"Connection: close\\r\\n\"+\n                \"\\r\\n\"+\n                \"0\\r\\n\" +\n                \"\\r\\n\");\n\n        int offset=0;\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        checkContains(response,offset,\"/R1\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testCONNECT() throws Exception\n    {\n        String response = null;\n\n        try\n        {\n            int offset=0;\n\n            response=connector.getResponses(\"CONNECT www.webtide.com:8080 HTTP/1.1\\n\"+\n                                           \"Host: myproxy:8888\\015\\012\"+\n                                           \"\\015\\012\",200,TimeUnit.MILLISECONDS);\n            checkContains(response,offset,\"HTTP/1.1 200\");\n\n        }\n        catch (Exception e)\n        {\n            if(response != null)\n                System.err.println(response);\n            throw e;\n        }\n\n    }","id":10799,"modified_method":"@Test\n    public void testCONNECT() throws Exception\n    {\n        String response = null;\n        try\n        {\n            int offset=0;\n\n            response=connector.getResponses(\"CONNECT www.webtide.com:8080 HTTP/1.1\\r\\n\"+\n                                           \"Host: myproxy:8888\\r\\n\"+\n                                           \"\\r\\n\",200,TimeUnit.MILLISECONDS);\n            checkContains(response,offset,\"HTTP/1.1 200\");\n        }\n        catch (Exception e)\n        {\n            if(response != null)\n                System.err.println(response);\n            throw e;\n        }\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testUnconsumedTimeout() throws Exception\n    {\n        connector.setIdleTimeout(500);\n        String response=null;\n        String requests=null;\n        int offset=0;\n\n        offset=0;\n        requests=\n        \"GET /R1?read=4 HTTP/1.1\\n\"+\n        \"Host: localhost\\n\"+\n        \"Transfer-Encoding: chunked\\n\"+\n        \"Content-Type: text/plain; charset=utf-8\\n\"+\n        \"\\015\\012\"+\n        \"5;\\015\\012\"+\n        \"12345\\015\\012\";\n\n        long start=System.currentTimeMillis();\n        response=connector.getResponses(requests,2000,TimeUnit.MILLISECONDS);\n        if ((System.currentTimeMillis()-start)>=2000)\n            Assert.fail();\n        \n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        offset = checkContains(response,offset,\"pathInfo=/R1\");\n        offset = checkContains(response,offset,\"1234\");\n        checkNotContained(response,offset,\"56789\");\n    }","id":10800,"modified_method":"@Test\n    public void testUnconsumedTimeout() throws Exception\n    {\n        connector.setIdleTimeout(500);\n        int offset=0;\n        String requests=\n        \"GET /R1?read=4 HTTP/1.1\\r\\n\"+\n        \"Host: localhost\\r\\n\"+\n        \"Transfer-Encoding: chunked\\r\\n\"+\n        \"Content-Type: text/plain; charset=utf-8\\r\\n\"+\n        \"\\r\\n\"+\n        \"5;\\r\\n\"+\n        \"12345\\r\\n\";\n\n        long start=System.currentTimeMillis();\n        String response = connector.getResponses(requests, 2000, TimeUnit.MILLISECONDS);\n        if ((System.currentTimeMillis()-start)>=2000)\n            Assert.fail();\n\n        offset = checkContains(response,offset,\"HTTP/1.1 200\");\n        offset = checkContains(response,offset,\"pathInfo=/R1\");\n        offset = checkContains(response,offset,\"1234\");\n        checkNotContained(response,offset,\"56789\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testBadURIencoding() throws Exception\n    {\n        Log.getLogger(HttpParser.class).info(\"badMessage: bad encoding expected ...\");\n        String response;\n\n        response=connector.getResponses(\"GET /bad/encoding%1 HTTP/1.1\\n\"+\n            \"Host: localhost\\n\"+\n            \"Connection: close\\n\"+\n            \"\\015\\012\");\n        checkContains(response,0,\"HTTP/1.1 400\");\n    }","id":10801,"modified_method":"@Test\n    public void testBadURIencoding() throws Exception\n    {\n        Log.getLogger(HttpParser.class).info(\"badMessage: bad encoding expected ...\");\n        String response;\n\n        response=connector.getResponses(\"GET /bad/encoding%1 HTTP/1.1\\r\\n\"+\n            \"Host: localhost\\r\\n\"+\n            \"Connection: close\\r\\n\"+\n            \"\\r\\n\");\n        checkContains(response,0,\"HTTP/1.1 400\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testBadSlashDotDotPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET /../path HTTP/1.0\\nHost: localhost:80\\n\\n\");\n        checkContains(response,0,\"HTTP/1.1 400 Bad URI\");\n    }","id":10802,"modified_method":"@Test\n    public void testBadSlashDotDotPath() throws Exception\n    {\n        String response=connector.getResponses(\"GET /../path HTTP/1.0\\r\\nHost: localhost:80\\r\\n\\n\");\n        checkContains(response,0,\"HTTP/1.1 400 Bad URI\");\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testEmptyFlush() throws Exception\n    {\n        server.stop();\n        server.setHandler(new AbstractHandler()\n        {\n            @Override\n            public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException\n            {\n                response.setStatus(200);\n                OutputStream out =response.getOutputStream();\n                out.flush();\n                out.flush();\n            }\n        });\n        server.start();\n        \n        String response=connector.getResponses(\"GET / HTTP/1.1\\n\"+\n            \"Host: localhost\\n\"+\n            \"Connection: close\\n\"+\n            \"\\n\");\n        \n        assertThat(response, Matchers.containsString(\"200 OK\"));\n    }","id":10803,"modified_method":"@Test\n    public void testEmptyFlush() throws Exception\n    {\n        server.stop();\n        server.setHandler(new AbstractHandler()\n        {\n            @Override\n            public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException\n            {\n                response.setStatus(200);\n                OutputStream out =response.getOutputStream();\n                out.flush();\n                out.flush();\n            }\n        });\n        server.start();\n\n        String response=connector.getResponses(\"GET / HTTP/1.1\\r\\n\"+\n            \"Host: localhost\\r\\n\"+\n            \"Connection: close\\r\\n\"+\n            \"\\r\\n\");\n\n        assertThat(response, Matchers.containsString(\"200 OK\"));\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testCharset() throws Exception\n    {\n\n        String response=null;\n        try\n        {\n            int offset=0;\n\n            offset=0;\n            response=connector.getResponses(\"GET /R1 HTTP/1.1\\n\"+\n                                           \"Host: localhost\\n\"+\n                                           \"Transfer-Encoding: chunked\\n\"+\n                                           \"Content-Type: text/plain; charset=utf-8\\n\"+\n                                           \"Connection: close\\n\"+\n                                           \"\\015\\012\"+\n                                           \"5;\\015\\012\"+\n                                           \"12345\\015\\012\"+\n                                           \"0;\\015\\012\\015\\012\");\n            offset = checkContains(response,offset,\"HTTP/1.1 200\");\n            offset = checkContains(response,offset,\"/R1\");\n            offset = checkContains(response,offset,\"encoding=UTF-8\");\n            offset = checkContains(response,offset,\"12345\");\n\n            offset=0;\n            response=connector.getResponses(\"GET /R1 HTTP/1.1\\n\"+\n                                           \"Host: localhost\\n\"+\n                                           \"Transfer-Encoding: chunked\\n\"+\n                                           \"Content-Type: text/plain; charset =  iso-8859-1 ; other=value\\n\"+\n                                           \"Connection: close\\n\"+\n                                           \"\\015\\012\"+\n                                           \"5;\\015\\012\"+\n                                           \"12345\\015\\012\"+\n                                           \"0;\\015\\012\\015\\012\");\n            offset = checkContains(response,offset,\"HTTP/1.1 200\");\n            offset = checkContains(response,offset,\"encoding=iso-8859-1\");\n            offset = checkContains(response,offset,\"/R1\");\n            offset = checkContains(response,offset,\"12345\");\n\n            offset=0;\n            response=connector.getResponses(\"GET /R1 HTTP/1.1\\n\"+\n                                           \"Host: localhost\\n\"+\n                                           \"Transfer-Encoding: chunked\\n\"+\n                                           \"Content-Type: text/plain; charset=unknown\\n\"+\n                                           \"Connection: close\\n\"+\n                                           \"\\015\\012\"+\n                                           \"5;\\015\\012\"+\n                                           \"12345\\015\\012\"+\n                                           \"0;\\015\\012\\015\\012\");\n            offset = checkContains(response,offset,\"HTTP/1.1 200\");\n            offset = checkContains(response,offset,\"encoding=unknown\");\n            offset = checkContains(response,offset,\"/R1\");\n            offset = checkContains(response,offset,\"UnsupportedEncodingException\");\n\n\n        }\n        catch(Exception e)\n        {\n            if(response != null)\n                System.err.println(response);\n            throw e;\n        }\n    }","id":10804,"modified_method":"@Test\n    public void testCharset() throws Exception\n    {\n        String response=null;\n        try\n        {\n            int offset=0;\n            response=connector.getResponses(\"GET /R1 HTTP/1.1\\r\\n\"+\n                                           \"Host: localhost\\r\\n\"+\n                                           \"Transfer-Encoding: chunked\\r\\n\"+\n                                           \"Content-Type: text/plain; charset=utf-8\\r\\n\"+\n                                           \"Connection: close\\r\\n\"+\n                                           \"\\r\\n\"+\n                                           \"5;\\r\\n\"+\n                                           \"12345\\r\\n\"+\n                                           \"0;\\r\\n\" +\n                                           \"\\r\\n\");\n            offset = checkContains(response,offset,\"HTTP/1.1 200\");\n            offset = checkContains(response,offset,\"/R1\");\n            offset = checkContains(response,offset,\"encoding=UTF-8\");\n            checkContains(response,offset,\"12345\");\n\n            offset=0;\n            response=connector.getResponses(\"GET /R1 HTTP/1.1\\r\\n\"+\n                                           \"Host: localhost\\r\\n\"+\n                                           \"Transfer-Encoding: chunked\\r\\n\"+\n                                           \"Content-Type: text/plain; charset =  iso-8859-1 ; other=value\\r\\n\"+\n                                           \"Connection: close\\r\\n\"+\n                                           \"\\r\\n\"+\n                                           \"5;\\r\\n\"+\n                                           \"12345\\r\\n\"+\n                                           \"0;\\r\\n\" +\n                                           \"\\r\\n\");\n            offset = checkContains(response,offset,\"HTTP/1.1 200\");\n            offset = checkContains(response,offset,\"encoding=iso-8859-1\");\n            offset = checkContains(response,offset,\"/R1\");\n            checkContains(response,offset,\"12345\");\n\n            offset=0;\n            response=connector.getResponses(\"GET /R1 HTTP/1.1\\r\\n\"+\n                                           \"Host: localhost\\r\\n\"+\n                                           \"Transfer-Encoding: chunked\\r\\n\"+\n                                           \"Content-Type: text/plain; charset=unknown\\r\\n\"+\n                                           \"Connection: close\\r\\n\"+\n                                           \"\\r\\n\"+\n                                           \"5;\\r\\n\"+\n                                           \"12345\\r\\n\"+\n                                           \"0;\\r\\n\" +\n                                           \"\\r\\n\");\n            offset = checkContains(response,offset,\"HTTP/1.1 200\");\n            offset = checkContains(response,offset,\"encoding=unknown\");\n            offset = checkContains(response,offset,\"/R1\");\n            checkContains(response,offset,\"UnsupportedEncodingException\");\n        }\n        catch(Exception e)\n        {\n            if(response != null)\n                System.err.println(response);\n            throw e;\n        }\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Test\n    public void testUnconsumedException() throws Exception\n    {\n        String response=null;\n        String requests=null;\n        int offset=0;\n\n        offset=0;\n        requests=\"GET /R1?read=1&ISE=true HTTP/1.1\\n\"+\n        \"Host: localhost\\n\"+\n        \"Transfer-Encoding: chunked\\n\"+\n        \"Content-Type: text/plain; charset=utf-8\\n\"+\n        \"\\015\\012\"+\n        \"5;\\015\\012\"+\n        \"12345\\015\\012\"+\n        \"5;\\015\\012\"+\n        \"67890\\015\\012\"+\n        \"0;\\015\\012\\015\\012\"+\n        \"GET /R2 HTTP/1.1\\n\"+\n        \"Host: localhost\\n\"+\n        \"Content-Type: text/plain; charset=utf-8\\n\"+\n        \"Content-Length: 10\\n\"+\n        \"\\n\"+\n        \"abcdefghij\\n\";\n\n        Logger logger = Log.getLogger(HttpChannel.class);\n        try\n        {\n            logger.info(\"EXPECTING: java.lang.IllegalStateException...\");\n            ((StdErrLog)logger).setHideStacks(true);\n            response=connector.getResponses(requests);\n            offset = checkContains(response,offset,\"HTTP/1.1 500\");\n            offset = checkContains(response,offset,\"Connection: close\");\n            checkNotContained(response,offset,\"HTTP/1.1 200\");\n        }\n        finally\n        {\n            ((StdErrLog)logger).setHideStacks(false);\n        }\n    }","id":10805,"modified_method":"@Test\n    public void testUnconsumedException() throws Exception\n    {\n        int offset=0;\n        String requests=\"GET /R1?read=1&ISE=true HTTP/1.1\\r\\n\"+\n        \"Host: localhost\\r\\n\"+\n        \"Transfer-Encoding: chunked\\r\\n\"+\n        \"Content-Type: text/plain; charset=utf-8\\r\\n\"+\n        \"\\r\\n\"+\n        \"5;\\r\\n\"+\n        \"12345\\r\\n\"+\n        \"5;\\r\\n\"+\n        \"67890\\r\\n\"+\n        \"0;\\r\\n\" +\n        \"\\r\\n\"+\n        \"GET /R2 HTTP/1.1\\r\\n\"+\n        \"Host: localhost\\r\\n\"+\n        \"Content-Type: text/plain; charset=utf-8\\r\\n\"+\n        \"Content-Length: 10\\r\\n\"+\n        \"\\r\\n\"+\n        \"abcdefghij\\r\\n\";\n\n        Logger logger = Log.getLogger(HttpChannel.class);\n        try\n        {\n            logger.info(\"EXPECTING: java.lang.IllegalStateException...\");\n            ((StdErrLog)logger).setHideStacks(true);\n            String response = connector.getResponses(requests);\n            offset = checkContains(response,offset,\"HTTP/1.1 500\");\n            offset = checkContains(response,offset,\"Connection: close\");\n            checkNotContained(response,offset,\"HTTP/1.1 200\");\n        }\n        finally\n        {\n            ((StdErrLog)logger).setHideStacks(false);\n        }\n    }","commit_id":"83baed0bfe8ecd577544d10b35f5882eca55cdcf","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"base\", m_base)\n            .append(\"last oid\", m_last)\n            .append(\"max repetitions\", m_maxRepetitions)\n            .append(\"finished?\", m_finished)\n            .toString();\n    }","id":10806,"modified_method":"public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"base\", m_base)\n            .append(\"last oid\", m_last)\n            .append(\"max repetitions\", m_maxRepetitions)\n            .append(\"row\", m_currentRow)\n            .append(\"finished?\", m_finished)\n            .toString();\n    }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        pduBuilder.addOid(m_last);\n        pduBuilder.setNonRepeaters(0);\n        pduBuilder.setMaxRepetitions(getMaxRepetitions());\n        \n        ResponseProcessor rp = new ResponseProcessor() {\n\n            public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n                if (val.isEndOfMib()) {\n                    receivedEndOfMib();\n                }\n\n                m_last = responseObjId;\n                if (m_base.isPrefixOf(responseObjId) && !m_base.equals(responseObjId)) {\n                    SnmpInstId inst = responseObjId.getInstance(m_base);\n                    if (inst != null) {\n                        storeResult(new SnmpResult(m_base, inst, val));\n                    }\n                }\n            }\n\n            public boolean processErrors(int errorStatus, int errorIndex) {\n                if (errorStatus == NO_ERR) {\n                    return false;\n                } else if (errorStatus == TOO_BIG_ERR) {\n                    throw new IllegalArgumentException(\"Unable to handle tooBigError for next oid request after \"+m_last);\n                } else if (errorStatus == GEN_ERR) {\n                    reportGenErr(\"Received genErr reqeusting next oid after \"+m_last+\". Marking column is finished.\");\n                    errorOccurred();\n                    return true;\n                } else if (errorStatus == NO_SUCH_NAME_ERR) {\n                    reportNoSuchNameErr(\"Received noSuchName reqeusting next oid after \"+m_last+\". Marking column is finished.\");\n                    errorOccurred();\n                    return true;\n                } else {\n                    throw new IllegalArgumentException(\"Unexpected error processing next oid after \"+m_last+\". Aborting!\");\n                }\n            }\n        };\n        \n        return rp;\n    }","id":10807,"modified_method":"public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        pduBuilder.addOid(m_last);\n        pduBuilder.setNonRepeaters(0);\n        pduBuilder.setMaxRepetitions(getMaxRepetitions());\n        \n        ResponseProcessor rp = new ResponseProcessor() {\n\n            public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n                if (val.isEndOfMib()) {\n                    receivedEndOfMib();\n                }\n\n                m_last = responseObjId;\n                if (m_base.isPrefixOf(responseObjId) && !m_base.equals(responseObjId)) {\n                    m_currentRow++;\n                    SnmpInstId inst = responseObjId.getInstance(m_base);\n                    if (inst != null) {\n                        storeResult(new SnmpResult(m_base, inst, val));\n                    }\n                }\n            }\n\n            public boolean processErrors(int errorStatus, int errorIndex) {\n                if (errorStatus == NO_ERR) {\n                    return false;\n                } else if (errorStatus == TOO_BIG_ERR) {\n                    throw new IllegalArgumentException(\"Unable to handle tooBigError for next oid request after \"+m_last);\n                } else if (errorStatus == GEN_ERR) {\n                    reportGenErr(\"Received genErr reqeusting next oid after \"+m_last+\". Marking column is finished.\");\n                    errorOccurred();\n                    return true;\n                } else if (errorStatus == NO_SUCH_NAME_ERR) {\n                    reportNoSuchNameErr(\"Received noSuchName reqeusting next oid after \"+m_last+\". Marking column is finished.\");\n                    errorOccurred();\n                    return true;\n                } else {\n                    throw new IllegalArgumentException(\"Unexpected error processing next oid after \"+m_last+\". Aborting!\");\n                }\n            }\n        };\n        \n        return rp;\n    }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public int hashCode() {\n        return 0;\n    }","id":10808,"modified_method":"@Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37)\n            .append(getIds())\n            .toHashCode();\n    }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public int compareTo(Object o) {\n        if (o == null) throw new NullPointerException(\"o is null\");\n        SnmpObjId other = (SnmpObjId)o;\n\n        // compare each element in order for as much length as they have in common\n        // which is the entire length of one or both oids\n        int minLen = Math.min(length(), other.length());\n        for(int i = 0; i < minLen; i++) {\n            int diff = m_ids[i] - other.m_ids[i];\n            // the first one that is not equal indicates which is bigger\n            if (diff != 0)\n                return diff;\n        }\n        \n        // if they get to hear then both are identifical for their common length\n        // so which ever is longer is then greater\n        return length() - other.length();\n    }","id":10809,"modified_method":"public int compareTo(SnmpObjId o) {\n        if (o == null) {\n            throw new NullPointerException(\"o is null\");\n        }\n        return new CompareToBuilder()\n            .append(getIds(), o.getIds())\n            .toComparison();\n    }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public boolean equals(Object obj) {\n        if (obj instanceof SnmpObjId)\n            return compareTo(obj) == 0;\n        else\n            return false;\n    }","id":10810,"modified_method":"@Override\n    public boolean equals(Object obj) {\n        if (obj == null) { return false; }\n        if (obj == this) { return true; }\n        if (obj.getClass() != getClass()) {\n          return false;\n        }\n        \n        return new EqualsBuilder()\n            .appendSuper(super.equals(obj))\n            .append(getIds(), ((SnmpObjId)obj).getIds())\n            .isEquals();\n    }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void rowCompleted(List<SnmpResult> results) {\n            m_responses.add(results);\n        }","id":10811,"modified_method":"public void rowCompleted(SnmpRowResult row) {\n            m_responses.add(row);\n        }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public List<List<SnmpResult>> getResponses() {\n            return m_responses;\n        }","id":10812,"modified_method":"public List<SnmpRowResult> getResponses() {\n            return m_responses;\n        }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testTableTracker() throws Exception {\n        /*\n        * .1.3.6.1.2.1.2.2.1.1.1 = INTEGER: 1\n        * .1.3.6.1.2.1.2.2.1.1.2 = INTEGER: 2\n        * .1.3.6.1.2.1.2.2.1.1.3 = INTEGER: 3\n        * .1.3.6.1.2.1.2.2.1.1.4 = INTEGER: 4\n        * .1.3.6.1.2.1.2.2.1.1.5 = INTEGER: 5\n        * .1.3.6.1.2.1.2.2.1.1.6 = INTEGER: 6\n        * .1.3.6.1.2.1.2.2.1.2.1 = STRING: lo0\n        * .1.3.6.1.2.1.2.2.1.2.2 = STRING: gif0\n        * .1.3.6.1.2.1.2.2.1.2.3 = STRING: stf0\n        * .1.3.6.1.2.1.2.2.1.2.4 = STRING: en0\n        * .1.3.6.1.2.1.2.2.1.2.5 = STRING: en1\n        * .1.3.6.1.2.1.2.2.1.2.6 = STRING: fw0\n        * .1.3.6.1.2.1.2.2.1.10.1 = Counter32: 6808986\n        * .1.3.6.1.2.1.2.2.1.10.2 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.3 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.4 = Counter32: 6561336\n        * .1.3.6.1.2.1.2.2.1.10.5 = Counter32: 1241157\n        * .1.3.6.1.2.1.2.2.1.10.6 = Counter32: 0\n        */\n        \n        SnmpObjId base = SnmpObjId.get(\".1.3.6.1.2.1.2.2.1\");\n        TestRowCallback rc = new TestRowCallback();\n        TableTracker tt = new TableTracker(rc, SnmpObjId.get(base, \"1\"), SnmpObjId.get(base, \"2\"), SnmpObjId.get(base, \"10\"));\n\n        walk(tt, 2, 10);\n\n        List<List<SnmpResult>> responses = rc.getResponses();\n        assertEquals(\"number of rows must match test data\", 6, responses.size());\n        assertEquals(\"number of columns must match test data\", 3, responses.get(0).size());\n        assertEquals(\"row 4, column 0 must be 5\", 5, responses.get(4).get(0).getValue().toInt());\n        assertEquals(\"row 1, column 1 must be gif0\", \"gif0\", responses.get(1).get(1).getValue().toString());\n        assertEquals(\"row 3, column 2 must be 6561336\", 6561336, responses.get(3).get(2).getValue().toLong());\n        System.err.println(responses);\n    }","id":10813,"modified_method":"@Test\n    public void testTableTracker() throws Exception {\n        /*\n        * .1.3.6.1.2.1.2.2.1.1.1 = INTEGER: 1\n        * .1.3.6.1.2.1.2.2.1.1.2 = INTEGER: 2\n        * .1.3.6.1.2.1.2.2.1.1.3 = INTEGER: 3\n        * .1.3.6.1.2.1.2.2.1.1.4 = INTEGER: 4\n        * .1.3.6.1.2.1.2.2.1.1.5 = INTEGER: 5\n        * .1.3.6.1.2.1.2.2.1.1.6 = INTEGER: 6\n        * .1.3.6.1.2.1.2.2.1.2.1 = STRING: lo0\n        * .1.3.6.1.2.1.2.2.1.2.2 = STRING: gif0\n        * .1.3.6.1.2.1.2.2.1.2.3 = STRING: stf0\n        * .1.3.6.1.2.1.2.2.1.2.4 = STRING: en0\n        * .1.3.6.1.2.1.2.2.1.2.5 = STRING: en1\n        * .1.3.6.1.2.1.2.2.1.2.6 = STRING: fw0\n        * .1.3.6.1.2.1.2.2.1.10.1 = Counter32: 6808986\n        * .1.3.6.1.2.1.2.2.1.10.2 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.3 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.4 = Counter32: 6561336\n        * .1.3.6.1.2.1.2.2.1.10.5 = Counter32: 1241157\n        * .1.3.6.1.2.1.2.2.1.10.6 = Counter32: 0\n        */\n        \n        SnmpObjId base = SnmpObjId.get(\".1.3.6.1.2.1.2.2.1\");\n        TestRowCallback rc = new TestRowCallback();\n        TableTracker tt = new TableTracker(rc, SnmpObjId.get(base, \"1\"), SnmpObjId.get(base, \"2\"), SnmpObjId.get(base, \"10\"));\n\n        walk(tt, 1, 10);\n\n        List<SnmpRowResult> responses = rc.getResponses();\n        assertEquals(\"number of rows must match test data\", 6, responses.size());\n        assertEquals(\"number of columns must match test data\", 3, responses.get(0).getColumns());\n        assertEquals(\"row 4, column 0 must be 5\", 5, responses.get(4).get(1).getValue().toInt());\n        assertEquals(\"row 1, column 1 must be gif0\", \"gif0\", responses.get(1).get(2).getValue().toString());\n        assertEquals(\"row 3, column 2 must be 6561336\", 6561336, responses.get(3).get(10).getValue().toLong());\n        assertTrue(\"tracker must be finished\", tt.isFinished());\n        System.err.println(responses);\n    }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private List<ColumnTracker> getTrackers(int max) {\n        List<ColumnTracker> trackers = new ArrayList<ColumnTracker>(max);\n        \n        for (int i = 0; i < m_columnTrackerTrackers.size(); i++) {\n            if (trackers.size() >= max) {\n                return trackers;\n            }\n            ColumnTrackerTracker ctt = m_columnTrackerTrackers.get(i);\n            ColumnTracker ct = ctt.getTracker();\n            if (!ct.isFinished() && ctt.getUses() < m_columnUses) {\n                trackers.add(ct);\n                ctt.use();\n            }\n        }\n        if (trackers.size() == 0) {\n            for (int i = 0; i < m_columnTrackerTrackers.size(); i++) {\n                if (trackers.size() >= max) {\n                    return trackers;\n                }\n                ColumnTrackerTracker ctt = m_columnTrackerTrackers.get(i);\n                ColumnTracker ct = ctt.getTracker();\n                if (!ct.isFinished()) {\n                    trackers.add(ct);\n                    ctt.use();\n                }\n            }\n        }\n\n        return trackers;\n    }","id":10814,"modified_method":"private List<ColumnTracker> getTrackers(int max) {\n        List<ColumnTracker> trackers = new ArrayList<ColumnTracker>(max);\n        List<ColumnTracker> trackerList = new ArrayList<ColumnTracker>(m_columnTrackers);\n\n        Collections.sort(trackerList, new Comparator<ColumnTracker>() {\n            public int compare(ColumnTracker o1, ColumnTracker o2) {\n                return new CompareToBuilder()\n                    .append(o1.getCurrentRow(), o2.getCurrentRow())\n                    .append(o1.getBase(), o2.getBase())\n                    .toComparison();\n            }\n        });\n\n        for (int i = 0; i < trackerList.size(); i++) {\n            if (trackers.size() >= max) {\n                return trackers;\n            }\n            ColumnTracker ct = trackerList.get(i);\n            if (!ct.isFinished()) {\n                System.err.println(String.format(\"index %d: using tracker %s\", i, ct));\n                trackers.add(ct);\n            }\n        }\n\n        return trackers;\n    }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public boolean isFinished() {\n        for (ColumnTrackerTracker ctt : m_columnTrackerTrackers) {\n            if (!ctt.getTracker().isFinished()) {\n                return false;\n            }\n        }\n        return true;\n    }","id":10815,"modified_method":"@Override\n    public boolean isFinished() {\n        for (ColumnTracker ct : m_columnTrackers) {\n            if (!ct.isFinished()) {\n                return false;\n            }\n        }\n        return true;\n    }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private List<SnmpResult> getRow() {\n        List<SnmpResult> l = new ArrayList<SnmpResult>(m_columnTrackerTrackers.size());\n        for (Queue<SnmpResult> q : m_pendingData) {\n            if (q.isEmpty()) {\n                l.add(null);\n            } else {\n                l.add(q.poll());\n            }\n        }\n        return l;\n    }","id":10816,"modified_method":"private SnmpRowResult getNextRow() {\n        for (SnmpInstId id : m_pendingData.keySet()) {\n            if (m_pendingData.get(id).isComplete() || isFinished()) {\n                return m_pendingData.remove(id);\n            }\n        }\n        return null;\n    }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public TableTracker(RowCallback rc, int maxRepetitions, SnmpObjId... ids) {\n        m_pendingData = new ArrayList<Queue<SnmpResult>>(ids.length);\n        m_columnTrackerTrackers = new ArrayList<ColumnTrackerTracker>(ids.length);\n        for (SnmpObjId id : ids) {\n            m_pendingData.add(new LinkedBlockingQueue<SnmpResult>());\n            \n            ColumnTracker ct = new ColumnTracker(id);\n            ct.setParent(this);\n            m_columnTrackerTrackers.add(new ColumnTrackerTracker(ct));\n        }\n\n        setMaxRepetitions(maxRepetitions);\n        m_callback = rc;\n    }","id":10817,"modified_method":"public TableTracker(RowCallback rc, int maxRepetitions, SnmpObjId... ids) {\n        m_pendingData = new TreeMap<SnmpInstId,SnmpRowResult>();\n        m_columnTrackers = new ArrayList<ColumnTracker>(ids.length);\n        for (SnmpObjId id : ids) {\n            ColumnTracker ct = new ColumnTracker(id);\n            ct.setParent(this);\n            m_columnTrackers.add(ct);\n        }\n\n        setMaxRepetitions(maxRepetitions);\n        m_callback = rc;\n    }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        Map<SnmpObjId, ResponseProcessor> processors = new HashMap<SnmpObjId,ResponseProcessor>(pduBuilder.getMaxVarsPerPdu());\n\n        for (ColumnTracker ct : getTrackers(pduBuilder.getMaxVarsPerPdu())) {\n            System.err.println(\"scheduling \" + ct);\n            processors.put(ct.getBase(), ct.buildNextPdu(pduBuilder));\n        }\n        \n        ResponseProcessor rp = new CombinedColumnResponseProcessor(processors);\n        System.err.println(\"got response processor\");\n        return rp;\n    }","id":10818,"modified_method":"@Override\n    public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        List<ResponseProcessorTracker> processors = new ArrayList<ResponseProcessorTracker>(pduBuilder.getMaxVarsPerPdu());\n\n        for (ColumnTracker ct : getTrackers(pduBuilder.getMaxVarsPerPdu())) {\n            processors.add(new ResponseProcessorTracker(ct, ct.buildNextPdu(pduBuilder)));\n        }\n\n        ResponseProcessor rp = new CombinedColumnResponseProcessor(processors);\n        return rp;\n    }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public boolean processErrors(int errorStatus, int errorIndex) {\n            return false;\n        }","id":10819,"modified_method":"public boolean processErrors(int errorStatus, int errorIndex) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex).getResponseProcessor();\n            ColumnTracker ct = m_processors.get(m_currentIndex).getColumnTracker();\n            \n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            System.err.println(String.format(\"processError: trying: index(%d): tracker=%s, errorStatus=%d, errorIndex=%d\", m_currentIndex, ct, errorStatus, errorIndex));\n            return rp.processErrors(errorStatus, errorIndex);\n        }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public CombinedColumnResponseProcessor(Map<SnmpObjId, ResponseProcessor> processors) {\n            m_processors = processors;\n        }","id":10820,"modified_method":"public CombinedColumnResponseProcessor(List<ResponseProcessorTracker> processors) {\n            m_processors = processors;\n        }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void storeResult(SnmpResult res) {\n        System.err.println(String.format(\"TableTracker store result: %s\", res));\n        if (m_callback != null) {\n            for (int i = 0; i < m_columnTrackerTrackers.size(); i++) {\n                if (m_columnTrackerTrackers.get(i).getTracker().getBase() == res.getBase()) {\n                    m_pendingData.get(i).add(res);\n                }\n            }\n            while (hasRow()) {\n                List<SnmpResult> row = getRow();\n                System.err.println(String.format(\"row completed: %s\", row));\n                m_callback.rowCompleted(row);\n            }\n        }\n        \n        super.storeResult(res);\n    }","id":10821,"modified_method":"public void storeResult(SnmpResult res) {\n        super.storeResult(res);\n\n        System.err.println(String.format(\"storeResult: %s\", res));\n        if (m_callback != null) {\n\n            int columnInstance = res.getBase().getLastSubId();\n            if (!m_pendingData.containsKey(res.getInstance())) {\n                m_pendingData.put(res.getInstance(), new SnmpRowResult(m_columnTrackers.size()));\n            }\n            SnmpRowResult row = m_pendingData.get(res.getInstance());\n            row.setResult(columnInstance, res);\n\n            while (hasRow()) {\n                row = getNextRow();\n                if (row != null) {\n                    System.err.println(String.format(\"rowCompleted: %s\", row));\n                    m_callback.rowCompleted(row);\n                }\n            }\n        }\n    }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n            System.err.println(String.format(\"processResponse: %s/%s\", responseObjId, val));\n\n            for (SnmpObjId id : m_processors.keySet()) {\n                if (id.isPrefixOf(responseObjId) && !id.equals(responseObjId)) {\n                    System.err.println(String.format(\"matched base %s with response object %s\", id, responseObjId));\n                    ResponseProcessor rp = m_processors.get(id);\n                    rp.processResponse(responseObjId, val);\n                    return;\n                }\n            }\n            \n            System.err.println(\"no match\");\n            throw new RuntimeException(\"holy crap, no match!\");\n        }","id":10822,"modified_method":"public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex).getResponseProcessor();\n            ColumnTracker ct = m_processors.get(m_currentIndex).getColumnTracker();\n            \n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            System.err.println(String.format(\"processResponse: trying: index(%d): tracker=%s, responseObj=%s, value=%s\", m_currentIndex, ct, responseObjId, val));\n            rp.processResponse(responseObjId, val);\n        }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private boolean hasRow() {\n        if (isFinished()) {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (!q.isEmpty()) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (q.isEmpty()) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }","id":10823,"modified_method":"private boolean hasRow() {\n        if (isFinished()) {\n            if (!m_pendingData.isEmpty()) {\n                return true;\n            }\n            return false;\n        } else {\n            for (SnmpRowResult rr : m_pendingData.values()) {\n                if (rr.isComplete()) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }","commit_id":"be9059873360cc9daf37195cabe071eb9bcc1a67","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        pduBuilder.addOid(m_last);\n        pduBuilder.setNonRepeaters(0);\n        pduBuilder.setMaxRepetitions(getMaxRepetitions());\n        \n        ResponseProcessor rp = new ResponseProcessor() {\n\n            public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n                if (val.isEndOfMib()) {\n                    receivedEndOfMib();\n                }\n\n                m_last = responseObjId;\n                if (m_base.isPrefixOf(responseObjId) && !m_base.equals(responseObjId)) {\n                    SnmpInstId inst = responseObjId.getInstance(m_base);\n                    if (inst != null) {\n                        storeResult(new SnmpResult(m_base, inst, val));\n                    }\n                }\n            }\n\n            public boolean processErrors(int errorStatus, int errorIndex) {\n                if (errorStatus == NO_ERR) {\n                    return false;\n                } else if (errorStatus == TOO_BIG_ERR) {\n                    throw new IllegalArgumentException(\"Unable to handle tooBigError for next oid request after \"+m_last);\n                } else if (errorStatus == GEN_ERR) {\n                    reportGenErr(\"Received genErr reqeusting next oid after \"+m_last+\". Marking column is finished.\");\n                    errorOccurred();\n                    return true;\n                } else if (errorStatus == NO_SUCH_NAME_ERR) {\n                    reportNoSuchNameErr(\"Received noSuchName reqeusting next oid after \"+m_last+\". Marking column is finished.\");\n                    errorOccurred();\n                    return true;\n                } else {\n                    throw new IllegalArgumentException(\"Unexpected error processing next oid after \"+m_last+\". Aborting!\");\n                }\n            }\n        };\n        \n        return rp;\n    }","id":10824,"modified_method":"public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        pduBuilder.addOid(m_last);\n        pduBuilder.setNonRepeaters(0);\n        pduBuilder.setMaxRepetitions(getMaxRepetitions());\n        \n        ResponseProcessor rp = new ResponseProcessor() {\n\n            public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n                if (val.isEndOfMib()) {\n                    receivedEndOfMib();\n                }\n\n                m_last = responseObjId;\n                if (m_base.isPrefixOf(responseObjId) && !m_base.equals(responseObjId)) {\n                    m_currentRow++;\n                    SnmpInstId inst = responseObjId.getInstance(m_base);\n                    if (inst != null) {\n                        storeResult(new SnmpResult(m_base, inst, val));\n                    }\n                }\n            }\n\n            public boolean processErrors(int errorStatus, int errorIndex) {\n                if (errorStatus == NO_ERR) {\n                    return false;\n                } else if (errorStatus == TOO_BIG_ERR) {\n                    throw new IllegalArgumentException(\"Unable to handle tooBigError for next oid request after \"+m_last);\n                } else if (errorStatus == GEN_ERR) {\n                    reportGenErr(\"Received genErr reqeusting next oid after \"+m_last+\". Marking column is finished.\");\n                    errorOccurred();\n                    return true;\n                } else if (errorStatus == NO_SUCH_NAME_ERR) {\n                    reportNoSuchNameErr(\"Received noSuchName reqeusting next oid after \"+m_last+\". Marking column is finished.\");\n                    errorOccurred();\n                    return true;\n                } else {\n                    throw new IllegalArgumentException(\"Unexpected error processing next oid after \"+m_last+\". Aborting!\");\n                }\n            }\n        };\n        \n        return rp;\n    }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"base\", m_base)\n            .append(\"last oid\", m_last)\n            .append(\"max repetitions\", m_maxRepetitions)\n            .append(\"finished?\", m_finished)\n            .toString();\n    }","id":10825,"modified_method":"public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"base\", m_base)\n            .append(\"last oid\", m_last)\n            .append(\"max repetitions\", m_maxRepetitions)\n            .append(\"row\", m_currentRow)\n            .append(\"finished?\", m_finished)\n            .toString();\n    }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public int hashCode() {\n        return 0;\n    }","id":10826,"modified_method":"@Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37)\n            .append(getIds())\n            .toHashCode();\n    }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public int compareTo(Object o) {\n        if (o == null) throw new NullPointerException(\"o is null\");\n        SnmpObjId other = (SnmpObjId)o;\n\n        // compare each element in order for as much length as they have in common\n        // which is the entire length of one or both oids\n        int minLen = Math.min(length(), other.length());\n        for(int i = 0; i < minLen; i++) {\n            int diff = m_ids[i] - other.m_ids[i];\n            // the first one that is not equal indicates which is bigger\n            if (diff != 0)\n                return diff;\n        }\n        \n        // if they get to hear then both are identifical for their common length\n        // so which ever is longer is then greater\n        return length() - other.length();\n    }","id":10827,"modified_method":"public int compareTo(SnmpObjId o) {\n        if (o == null) {\n            throw new NullPointerException(\"o is null\");\n        }\n        return new CompareToBuilder()\n            .append(getIds(), o.getIds())\n            .toComparison();\n    }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public boolean equals(Object obj) {\n        if (obj instanceof SnmpObjId)\n            return compareTo(obj) == 0;\n        else\n            return false;\n    }","id":10828,"modified_method":"@Override\n    public boolean equals(Object obj) {\n        if (obj == null) { return false; }\n        if (obj == this) { return true; }\n        if (obj.getClass() != getClass()) {\n          return false;\n        }\n        \n        return new EqualsBuilder()\n            .appendSuper(super.equals(obj))\n            .append(getIds(), ((SnmpObjId)obj).getIds())\n            .isEquals();\n    }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testTableTracker() throws Exception {\n        /*\n        * .1.3.6.1.2.1.2.2.1.1.1 = INTEGER: 1\n        * .1.3.6.1.2.1.2.2.1.1.2 = INTEGER: 2\n        * .1.3.6.1.2.1.2.2.1.1.3 = INTEGER: 3\n        * .1.3.6.1.2.1.2.2.1.1.4 = INTEGER: 4\n        * .1.3.6.1.2.1.2.2.1.1.5 = INTEGER: 5\n        * .1.3.6.1.2.1.2.2.1.1.6 = INTEGER: 6\n        * .1.3.6.1.2.1.2.2.1.2.1 = STRING: lo0\n        * .1.3.6.1.2.1.2.2.1.2.2 = STRING: gif0\n        * .1.3.6.1.2.1.2.2.1.2.3 = STRING: stf0\n        * .1.3.6.1.2.1.2.2.1.2.4 = STRING: en0\n        * .1.3.6.1.2.1.2.2.1.2.5 = STRING: en1\n        * .1.3.6.1.2.1.2.2.1.2.6 = STRING: fw0\n        * .1.3.6.1.2.1.2.2.1.10.1 = Counter32: 6808986\n        * .1.3.6.1.2.1.2.2.1.10.2 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.3 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.4 = Counter32: 6561336\n        * .1.3.6.1.2.1.2.2.1.10.5 = Counter32: 1241157\n        * .1.3.6.1.2.1.2.2.1.10.6 = Counter32: 0\n        */\n        \n        SnmpObjId base = SnmpObjId.get(\".1.3.6.1.2.1.2.2.1\");\n        TestRowCallback rc = new TestRowCallback();\n        TableTracker tt = new TableTracker(rc, SnmpObjId.get(base, \"1\"), SnmpObjId.get(base, \"2\"), SnmpObjId.get(base, \"10\"));\n\n        walk(tt, 2, 10);\n\n        List<List<SnmpResult>> responses = rc.getResponses();\n        assertEquals(\"number of rows must match test data\", 6, responses.size());\n        assertEquals(\"number of columns must match test data\", 3, responses.get(0).size());\n        assertEquals(\"row 4, column 0 must be 5\", 5, responses.get(4).get(0).getValue().toInt());\n        assertEquals(\"row 1, column 1 must be gif0\", \"gif0\", responses.get(1).get(1).getValue().toString());\n        assertEquals(\"row 3, column 2 must be 6561336\", 6561336, responses.get(3).get(2).getValue().toLong());\n        System.err.println(responses);\n    }","id":10829,"modified_method":"@Test\n    public void testTableTracker() throws Exception {\n        /*\n        * .1.3.6.1.2.1.2.2.1.1.1 = INTEGER: 1\n        * .1.3.6.1.2.1.2.2.1.1.2 = INTEGER: 2\n        * .1.3.6.1.2.1.2.2.1.1.3 = INTEGER: 3\n        * .1.3.6.1.2.1.2.2.1.1.4 = INTEGER: 4\n        * .1.3.6.1.2.1.2.2.1.1.5 = INTEGER: 5\n        * .1.3.6.1.2.1.2.2.1.1.6 = INTEGER: 6\n        * .1.3.6.1.2.1.2.2.1.2.1 = STRING: lo0\n        * .1.3.6.1.2.1.2.2.1.2.2 = STRING: gif0\n        * .1.3.6.1.2.1.2.2.1.2.3 = STRING: stf0\n        * .1.3.6.1.2.1.2.2.1.2.4 = STRING: en0\n        * .1.3.6.1.2.1.2.2.1.2.5 = STRING: en1\n        * .1.3.6.1.2.1.2.2.1.2.6 = STRING: fw0\n        * .1.3.6.1.2.1.2.2.1.10.1 = Counter32: 6808986\n        * .1.3.6.1.2.1.2.2.1.10.2 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.3 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.4 = Counter32: 6561336\n        * .1.3.6.1.2.1.2.2.1.10.5 = Counter32: 1241157\n        * .1.3.6.1.2.1.2.2.1.10.6 = Counter32: 0\n        */\n        \n        SnmpObjId base = SnmpObjId.get(\".1.3.6.1.2.1.2.2.1\");\n        TestRowCallback rc = new TestRowCallback();\n        TableTracker tt = new TableTracker(rc, SnmpObjId.get(base, \"1\"), SnmpObjId.get(base, \"2\"), SnmpObjId.get(base, \"10\"));\n\n        walk(tt, 1, 10);\n\n        List<SnmpRowResult> responses = rc.getResponses();\n        assertEquals(\"number of rows must match test data\", 6, responses.size());\n        assertEquals(\"number of columns must match test data\", 3, responses.get(0).getColumns());\n        assertEquals(\"row 4, column 0 must be 5\", 5, responses.get(4).get(1).getValue().toInt());\n        assertEquals(\"row 1, column 1 must be gif0\", \"gif0\", responses.get(1).get(2).getValue().toString());\n        assertEquals(\"row 3, column 2 must be 6561336\", 6561336, responses.get(3).get(10).getValue().toLong());\n        assertTrue(\"tracker must be finished\", tt.isFinished());\n        System.err.println(responses);\n    }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void rowCompleted(List<SnmpResult> results) {\n            m_responses.add(results);\n        }","id":10830,"modified_method":"public void rowCompleted(SnmpRowResult row) {\n            m_responses.add(row);\n        }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public List<List<SnmpResult>> getResponses() {\n            return m_responses;\n        }","id":10831,"modified_method":"public List<SnmpRowResult> getResponses() {\n            return m_responses;\n        }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public boolean processErrors(int errorStatus, int errorIndex) {\n            return false;\n        }","id":10832,"modified_method":"public boolean processErrors(int errorStatus, int errorIndex) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex).getResponseProcessor();\n            ColumnTracker ct = m_processors.get(m_currentIndex).getColumnTracker();\n            \n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            System.err.println(String.format(\"processError: trying: index(%d): tracker=%s, errorStatus=%d, errorIndex=%d\", m_currentIndex, ct, errorStatus, errorIndex));\n            return rp.processErrors(errorStatus, errorIndex);\n        }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        Map<SnmpObjId, ResponseProcessor> processors = new HashMap<SnmpObjId,ResponseProcessor>(pduBuilder.getMaxVarsPerPdu());\n\n        for (ColumnTracker ct : getTrackers(pduBuilder.getMaxVarsPerPdu())) {\n            System.err.println(\"scheduling \" + ct);\n            processors.put(ct.getBase(), ct.buildNextPdu(pduBuilder));\n        }\n        \n        ResponseProcessor rp = new CombinedColumnResponseProcessor(processors);\n        System.err.println(\"got response processor\");\n        return rp;\n    }","id":10833,"modified_method":"@Override\n    public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        List<ResponseProcessorTracker> processors = new ArrayList<ResponseProcessorTracker>(pduBuilder.getMaxVarsPerPdu());\n\n        for (ColumnTracker ct : getTrackers(pduBuilder.getMaxVarsPerPdu())) {\n            processors.add(new ResponseProcessorTracker(ct, ct.buildNextPdu(pduBuilder)));\n        }\n\n        ResponseProcessor rp = new CombinedColumnResponseProcessor(processors);\n        return rp;\n    }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public boolean isFinished() {\n        for (ColumnTrackerTracker ctt : m_columnTrackerTrackers) {\n            if (!ctt.getTracker().isFinished()) {\n                return false;\n            }\n        }\n        return true;\n    }","id":10834,"modified_method":"@Override\n    public boolean isFinished() {\n        for (ColumnTracker ct : m_columnTrackers) {\n            if (!ct.isFinished()) {\n                return false;\n            }\n        }\n        return true;\n    }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public TableTracker(RowCallback rc, int maxRepetitions, SnmpObjId... ids) {\n        m_pendingData = new ArrayList<Queue<SnmpResult>>(ids.length);\n        m_columnTrackerTrackers = new ArrayList<ColumnTrackerTracker>(ids.length);\n        for (SnmpObjId id : ids) {\n            m_pendingData.add(new LinkedBlockingQueue<SnmpResult>());\n            \n            ColumnTracker ct = new ColumnTracker(id);\n            ct.setParent(this);\n            m_columnTrackerTrackers.add(new ColumnTrackerTracker(ct));\n        }\n\n        setMaxRepetitions(maxRepetitions);\n        m_callback = rc;\n    }","id":10835,"modified_method":"public TableTracker(RowCallback rc, int maxRepetitions, SnmpObjId... ids) {\n        m_pendingData = new TreeMap<SnmpInstId,SnmpRowResult>();\n        m_columnTrackers = new ArrayList<ColumnTracker>(ids.length);\n        for (SnmpObjId id : ids) {\n            ColumnTracker ct = new ColumnTracker(id);\n            ct.setParent(this);\n            m_columnTrackers.add(ct);\n        }\n\n        setMaxRepetitions(maxRepetitions);\n        m_callback = rc;\n    }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public CombinedColumnResponseProcessor(Map<SnmpObjId, ResponseProcessor> processors) {\n            m_processors = processors;\n        }","id":10836,"modified_method":"public CombinedColumnResponseProcessor(List<ResponseProcessorTracker> processors) {\n            m_processors = processors;\n        }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private List<SnmpResult> getRow() {\n        List<SnmpResult> l = new ArrayList<SnmpResult>(m_columnTrackerTrackers.size());\n        for (Queue<SnmpResult> q : m_pendingData) {\n            if (q.isEmpty()) {\n                l.add(null);\n            } else {\n                l.add(q.poll());\n            }\n        }\n        return l;\n    }","id":10837,"modified_method":"private SnmpRowResult getNextRow() {\n        for (SnmpInstId id : m_pendingData.keySet()) {\n            if (m_pendingData.get(id).isComplete() || isFinished()) {\n                return m_pendingData.remove(id);\n            }\n        }\n        return null;\n    }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private boolean hasRow() {\n        if (isFinished()) {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (!q.isEmpty()) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (q.isEmpty()) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }","id":10838,"modified_method":"private boolean hasRow() {\n        if (isFinished()) {\n            if (!m_pendingData.isEmpty()) {\n                return true;\n            }\n            return false;\n        } else {\n            for (SnmpRowResult rr : m_pendingData.values()) {\n                if (rr.isComplete()) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n            System.err.println(String.format(\"processResponse: %s/%s\", responseObjId, val));\n\n            for (SnmpObjId id : m_processors.keySet()) {\n                if (id.isPrefixOf(responseObjId) && !id.equals(responseObjId)) {\n                    System.err.println(String.format(\"matched base %s with response object %s\", id, responseObjId));\n                    ResponseProcessor rp = m_processors.get(id);\n                    rp.processResponse(responseObjId, val);\n                    return;\n                }\n            }\n            \n            System.err.println(\"no match\");\n            throw new RuntimeException(\"holy crap, no match!\");\n        }","id":10839,"modified_method":"public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex).getResponseProcessor();\n            ColumnTracker ct = m_processors.get(m_currentIndex).getColumnTracker();\n            \n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            System.err.println(String.format(\"processResponse: trying: index(%d): tracker=%s, responseObj=%s, value=%s\", m_currentIndex, ct, responseObjId, val));\n            rp.processResponse(responseObjId, val);\n        }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void storeResult(SnmpResult res) {\n        System.err.println(String.format(\"TableTracker store result: %s\", res));\n        if (m_callback != null) {\n            for (int i = 0; i < m_columnTrackerTrackers.size(); i++) {\n                if (m_columnTrackerTrackers.get(i).getTracker().getBase() == res.getBase()) {\n                    m_pendingData.get(i).add(res);\n                }\n            }\n            while (hasRow()) {\n                List<SnmpResult> row = getRow();\n                System.err.println(String.format(\"row completed: %s\", row));\n                m_callback.rowCompleted(row);\n            }\n        }\n        \n        super.storeResult(res);\n    }","id":10840,"modified_method":"public void storeResult(SnmpResult res) {\n        super.storeResult(res);\n\n        System.err.println(String.format(\"storeResult: %s\", res));\n        if (m_callback != null) {\n\n            int columnInstance = res.getBase().getLastSubId();\n            if (!m_pendingData.containsKey(res.getInstance())) {\n                m_pendingData.put(res.getInstance(), new SnmpRowResult(m_columnTrackers.size()));\n            }\n            SnmpRowResult row = m_pendingData.get(res.getInstance());\n            row.setResult(columnInstance, res);\n\n            while (hasRow()) {\n                row = getNextRow();\n                if (row != null) {\n                    System.err.println(String.format(\"rowCompleted: %s\", row));\n                    m_callback.rowCompleted(row);\n                }\n            }\n        }\n    }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private List<ColumnTracker> getTrackers(int max) {\n        List<ColumnTracker> trackers = new ArrayList<ColumnTracker>(max);\n        \n        for (int i = 0; i < m_columnTrackerTrackers.size(); i++) {\n            if (trackers.size() >= max) {\n                return trackers;\n            }\n            ColumnTrackerTracker ctt = m_columnTrackerTrackers.get(i);\n            ColumnTracker ct = ctt.getTracker();\n            if (!ct.isFinished() && ctt.getUses() < m_columnUses) {\n                trackers.add(ct);\n                ctt.use();\n            }\n        }\n        if (trackers.size() == 0) {\n            for (int i = 0; i < m_columnTrackerTrackers.size(); i++) {\n                if (trackers.size() >= max) {\n                    return trackers;\n                }\n                ColumnTrackerTracker ctt = m_columnTrackerTrackers.get(i);\n                ColumnTracker ct = ctt.getTracker();\n                if (!ct.isFinished()) {\n                    trackers.add(ct);\n                    ctt.use();\n                }\n            }\n        }\n\n        return trackers;\n    }","id":10841,"modified_method":"private List<ColumnTracker> getTrackers(int max) {\n        List<ColumnTracker> trackers = new ArrayList<ColumnTracker>(max);\n        List<ColumnTracker> trackerList = new ArrayList<ColumnTracker>(m_columnTrackers);\n\n        Collections.sort(trackerList, new Comparator<ColumnTracker>() {\n            public int compare(ColumnTracker o1, ColumnTracker o2) {\n                return new CompareToBuilder()\n                    .append(o1.getCurrentRow(), o2.getCurrentRow())\n                    .append(o1.getBase(), o2.getBase())\n                    .toComparison();\n            }\n        });\n\n        for (int i = 0; i < trackerList.size(); i++) {\n            if (trackers.size() >= max) {\n                return trackers;\n            }\n            ColumnTracker ct = trackerList.get(i);\n            if (!ct.isFinished()) {\n                System.err.println(String.format(\"index %d: using tracker %s\", i, ct));\n                trackers.add(ct);\n            }\n        }\n\n        return trackers;\n    }","commit_id":"20b2915e6ed56249f8573bf4be9b6c1fdd8e1581","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"base\", m_base)\n            .append(\"last oid\", m_last)\n            .append(\"max repetitions\", m_maxRepetitions)\n            .append(\"finished?\", m_finished)\n            .toString();\n    }","id":10842,"modified_method":"public String toString() {\n        return new ToStringBuilder(this)\n            .append(\"base\", m_base)\n            .append(\"last oid\", m_last)\n            .append(\"max repetitions\", m_maxRepetitions)\n            .append(\"row\", m_currentRow)\n            .append(\"finished?\", m_finished)\n            .toString();\n    }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        pduBuilder.addOid(m_last);\n        pduBuilder.setNonRepeaters(0);\n        pduBuilder.setMaxRepetitions(getMaxRepetitions());\n        \n        ResponseProcessor rp = new ResponseProcessor() {\n\n            public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n                if (val.isEndOfMib()) {\n                    receivedEndOfMib();\n                }\n\n                m_last = responseObjId;\n                if (m_base.isPrefixOf(responseObjId) && !m_base.equals(responseObjId)) {\n                    SnmpInstId inst = responseObjId.getInstance(m_base);\n                    if (inst != null) {\n                        storeResult(new SnmpResult(m_base, inst, val));\n                    }\n                }\n            }\n\n            public boolean processErrors(int errorStatus, int errorIndex) {\n                if (errorStatus == NO_ERR) {\n                    return false;\n                } else if (errorStatus == TOO_BIG_ERR) {\n                    throw new IllegalArgumentException(\"Unable to handle tooBigError for next oid request after \"+m_last);\n                } else if (errorStatus == GEN_ERR) {\n                    reportGenErr(\"Received genErr reqeusting next oid after \"+m_last+\". Marking column is finished.\");\n                    errorOccurred();\n                    return true;\n                } else if (errorStatus == NO_SUCH_NAME_ERR) {\n                    reportNoSuchNameErr(\"Received noSuchName reqeusting next oid after \"+m_last+\". Marking column is finished.\");\n                    errorOccurred();\n                    return true;\n                } else {\n                    throw new IllegalArgumentException(\"Unexpected error processing next oid after \"+m_last+\". Aborting!\");\n                }\n            }\n        };\n        \n        return rp;\n    }","id":10843,"modified_method":"public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        pduBuilder.addOid(m_last);\n        pduBuilder.setNonRepeaters(0);\n        pduBuilder.setMaxRepetitions(getMaxRepetitions());\n        \n        ResponseProcessor rp = new ResponseProcessor() {\n\n            public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n                if (val.isEndOfMib()) {\n                    receivedEndOfMib();\n                }\n\n                m_last = responseObjId;\n                if (m_base.isPrefixOf(responseObjId) && !m_base.equals(responseObjId)) {\n                    m_currentRow++;\n                    SnmpInstId inst = responseObjId.getInstance(m_base);\n                    if (inst != null) {\n                        storeResult(new SnmpResult(m_base, inst, val));\n                    }\n                }\n            }\n\n            public boolean processErrors(int errorStatus, int errorIndex) {\n                if (errorStatus == NO_ERR) {\n                    return false;\n                } else if (errorStatus == TOO_BIG_ERR) {\n                    throw new IllegalArgumentException(\"Unable to handle tooBigError for next oid request after \"+m_last);\n                } else if (errorStatus == GEN_ERR) {\n                    reportGenErr(\"Received genErr reqeusting next oid after \"+m_last+\". Marking column is finished.\");\n                    errorOccurred();\n                    return true;\n                } else if (errorStatus == NO_SUCH_NAME_ERR) {\n                    reportNoSuchNameErr(\"Received noSuchName reqeusting next oid after \"+m_last+\". Marking column is finished.\");\n                    errorOccurred();\n                    return true;\n                } else {\n                    throw new IllegalArgumentException(\"Unexpected error processing next oid after \"+m_last+\". Aborting!\");\n                }\n            }\n        };\n        \n        return rp;\n    }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public int hashCode() {\n        return 0;\n    }","id":10844,"modified_method":"@Override\n    public int hashCode() {\n        return new HashCodeBuilder(17, 37)\n            .append(getIds())\n            .toHashCode();\n    }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public boolean equals(Object obj) {\n        if (obj instanceof SnmpObjId)\n            return compareTo(obj) == 0;\n        else\n            return false;\n    }","id":10845,"modified_method":"@Override\n    public boolean equals(Object obj) {\n        if (obj == null) { return false; }\n        if (obj == this) { return true; }\n        if (obj.getClass() != getClass()) {\n          return false;\n        }\n        \n        return new EqualsBuilder()\n            .appendSuper(super.equals(obj))\n            .append(getIds(), ((SnmpObjId)obj).getIds())\n            .isEquals();\n    }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public int compareTo(Object o) {\n        if (o == null) throw new NullPointerException(\"o is null\");\n        SnmpObjId other = (SnmpObjId)o;\n\n        // compare each element in order for as much length as they have in common\n        // which is the entire length of one or both oids\n        int minLen = Math.min(length(), other.length());\n        for(int i = 0; i < minLen; i++) {\n            int diff = m_ids[i] - other.m_ids[i];\n            // the first one that is not equal indicates which is bigger\n            if (diff != 0)\n                return diff;\n        }\n        \n        // if they get to hear then both are identifical for their common length\n        // so which ever is longer is then greater\n        return length() - other.length();\n    }","id":10846,"modified_method":"public int compareTo(SnmpObjId o) {\n        if (o == null) {\n            throw new NullPointerException(\"o is null\");\n        }\n        return new CompareToBuilder()\n            .append(getIds(), o.getIds())\n            .toComparison();\n    }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public List<List<SnmpResult>> getResponses() {\n            return m_responses;\n        }","id":10847,"modified_method":"public List<SnmpRowResult> getResponses() {\n            return m_responses;\n        }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Test\n    public void testTableTracker() throws Exception {\n        /*\n        * .1.3.6.1.2.1.2.2.1.1.1 = INTEGER: 1\n        * .1.3.6.1.2.1.2.2.1.1.2 = INTEGER: 2\n        * .1.3.6.1.2.1.2.2.1.1.3 = INTEGER: 3\n        * .1.3.6.1.2.1.2.2.1.1.4 = INTEGER: 4\n        * .1.3.6.1.2.1.2.2.1.1.5 = INTEGER: 5\n        * .1.3.6.1.2.1.2.2.1.1.6 = INTEGER: 6\n        * .1.3.6.1.2.1.2.2.1.2.1 = STRING: lo0\n        * .1.3.6.1.2.1.2.2.1.2.2 = STRING: gif0\n        * .1.3.6.1.2.1.2.2.1.2.3 = STRING: stf0\n        * .1.3.6.1.2.1.2.2.1.2.4 = STRING: en0\n        * .1.3.6.1.2.1.2.2.1.2.5 = STRING: en1\n        * .1.3.6.1.2.1.2.2.1.2.6 = STRING: fw0\n        * .1.3.6.1.2.1.2.2.1.10.1 = Counter32: 6808986\n        * .1.3.6.1.2.1.2.2.1.10.2 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.3 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.4 = Counter32: 6561336\n        * .1.3.6.1.2.1.2.2.1.10.5 = Counter32: 1241157\n        * .1.3.6.1.2.1.2.2.1.10.6 = Counter32: 0\n        */\n        \n        SnmpObjId base = SnmpObjId.get(\".1.3.6.1.2.1.2.2.1\");\n        TestRowCallback rc = new TestRowCallback();\n        TableTracker tt = new TableTracker(rc, SnmpObjId.get(base, \"1\"), SnmpObjId.get(base, \"2\"), SnmpObjId.get(base, \"10\"));\n\n        walk(tt, 2, 10);\n\n        List<List<SnmpResult>> responses = rc.getResponses();\n        assertEquals(\"number of rows must match test data\", 6, responses.size());\n        assertEquals(\"number of columns must match test data\", 3, responses.get(0).size());\n        assertEquals(\"row 4, column 0 must be 5\", 5, responses.get(4).get(0).getValue().toInt());\n        assertEquals(\"row 1, column 1 must be gif0\", \"gif0\", responses.get(1).get(1).getValue().toString());\n        assertEquals(\"row 3, column 2 must be 6561336\", 6561336, responses.get(3).get(2).getValue().toLong());\n        System.err.println(responses);\n    }","id":10848,"modified_method":"@Test\n    public void testTableTracker() throws Exception {\n        /*\n        * .1.3.6.1.2.1.2.2.1.1.1 = INTEGER: 1\n        * .1.3.6.1.2.1.2.2.1.1.2 = INTEGER: 2\n        * .1.3.6.1.2.1.2.2.1.1.3 = INTEGER: 3\n        * .1.3.6.1.2.1.2.2.1.1.4 = INTEGER: 4\n        * .1.3.6.1.2.1.2.2.1.1.5 = INTEGER: 5\n        * .1.3.6.1.2.1.2.2.1.1.6 = INTEGER: 6\n        * .1.3.6.1.2.1.2.2.1.2.1 = STRING: lo0\n        * .1.3.6.1.2.1.2.2.1.2.2 = STRING: gif0\n        * .1.3.6.1.2.1.2.2.1.2.3 = STRING: stf0\n        * .1.3.6.1.2.1.2.2.1.2.4 = STRING: en0\n        * .1.3.6.1.2.1.2.2.1.2.5 = STRING: en1\n        * .1.3.6.1.2.1.2.2.1.2.6 = STRING: fw0\n        * .1.3.6.1.2.1.2.2.1.10.1 = Counter32: 6808986\n        * .1.3.6.1.2.1.2.2.1.10.2 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.3 = Counter32: 0\n        * .1.3.6.1.2.1.2.2.1.10.4 = Counter32: 6561336\n        * .1.3.6.1.2.1.2.2.1.10.5 = Counter32: 1241157\n        * .1.3.6.1.2.1.2.2.1.10.6 = Counter32: 0\n        */\n        \n        SnmpObjId base = SnmpObjId.get(\".1.3.6.1.2.1.2.2.1\");\n        TestRowCallback rc = new TestRowCallback();\n        TableTracker tt = new TableTracker(rc, SnmpObjId.get(base, \"1\"), SnmpObjId.get(base, \"2\"), SnmpObjId.get(base, \"10\"));\n\n        walk(tt, 1, 10);\n\n        List<SnmpRowResult> responses = rc.getResponses();\n        assertEquals(\"number of rows must match test data\", 6, responses.size());\n        assertEquals(\"number of columns must match test data\", 3, responses.get(0).getColumns());\n        assertEquals(\"row 4, column 0 must be 5\", 5, responses.get(4).get(1).getValue().toInt());\n        assertEquals(\"row 1, column 1 must be gif0\", \"gif0\", responses.get(1).get(2).getValue().toString());\n        assertEquals(\"row 3, column 2 must be 6561336\", 6561336, responses.get(3).get(10).getValue().toLong());\n        assertTrue(\"tracker must be finished\", tt.isFinished());\n        System.err.println(responses);\n    }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void rowCompleted(List<SnmpResult> results) {\n            m_responses.add(results);\n        }","id":10849,"modified_method":"public void rowCompleted(SnmpRowResult row) {\n            m_responses.add(row);\n        }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void storeResult(SnmpResult res) {\n        System.err.println(String.format(\"TableTracker store result: %s\", res));\n        if (m_callback != null) {\n            for (int i = 0; i < m_columnTrackerTrackers.size(); i++) {\n                if (m_columnTrackerTrackers.get(i).getTracker().getBase() == res.getBase()) {\n                    m_pendingData.get(i).add(res);\n                }\n            }\n            while (hasRow()) {\n                List<SnmpResult> row = getRow();\n                System.err.println(String.format(\"row completed: %s\", row));\n                m_callback.rowCompleted(row);\n            }\n        }\n        \n        super.storeResult(res);\n    }","id":10850,"modified_method":"public void storeResult(SnmpResult res) {\n        super.storeResult(res);\n\n        System.err.println(String.format(\"storeResult: %s\", res));\n        if (m_callback != null) {\n\n            int columnInstance = res.getBase().getLastSubId();\n            if (!m_pendingData.containsKey(res.getInstance())) {\n                m_pendingData.put(res.getInstance(), new SnmpRowResult(m_columnTrackers.size()));\n            }\n            SnmpRowResult row = m_pendingData.get(res.getInstance());\n            row.setResult(columnInstance, res);\n\n            while (hasRow()) {\n                row = getNextRow();\n                if (row != null) {\n                    System.err.println(String.format(\"rowCompleted: %s\", row));\n                    m_callback.rowCompleted(row);\n                }\n            }\n        }\n    }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public boolean isFinished() {\n        for (ColumnTrackerTracker ctt : m_columnTrackerTrackers) {\n            if (!ctt.getTracker().isFinished()) {\n                return false;\n            }\n        }\n        return true;\n    }","id":10851,"modified_method":"@Override\n    public boolean isFinished() {\n        for (ColumnTracker ct : m_columnTrackers) {\n            if (!ct.isFinished()) {\n                return false;\n            }\n        }\n        return true;\n    }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public TableTracker(RowCallback rc, int maxRepetitions, SnmpObjId... ids) {\n        m_pendingData = new ArrayList<Queue<SnmpResult>>(ids.length);\n        m_columnTrackerTrackers = new ArrayList<ColumnTrackerTracker>(ids.length);\n        for (SnmpObjId id : ids) {\n            m_pendingData.add(new LinkedBlockingQueue<SnmpResult>());\n            \n            ColumnTracker ct = new ColumnTracker(id);\n            ct.setParent(this);\n            m_columnTrackerTrackers.add(new ColumnTrackerTracker(ct));\n        }\n\n        setMaxRepetitions(maxRepetitions);\n        m_callback = rc;\n    }","id":10852,"modified_method":"public TableTracker(RowCallback rc, int maxRepetitions, SnmpObjId... ids) {\n        m_pendingData = new TreeMap<SnmpInstId,SnmpRowResult>();\n        m_columnTrackers = new ArrayList<ColumnTracker>(ids.length);\n        for (SnmpObjId id : ids) {\n            ColumnTracker ct = new ColumnTracker(id);\n            ct.setParent(this);\n            m_columnTrackers.add(ct);\n        }\n\n        setMaxRepetitions(maxRepetitions);\n        m_callback = rc;\n    }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n            System.err.println(String.format(\"processResponse: %s/%s\", responseObjId, val));\n\n            for (SnmpObjId id : m_processors.keySet()) {\n                if (id.isPrefixOf(responseObjId) && !id.equals(responseObjId)) {\n                    System.err.println(String.format(\"matched base %s with response object %s\", id, responseObjId));\n                    ResponseProcessor rp = m_processors.get(id);\n                    rp.processResponse(responseObjId, val);\n                    return;\n                }\n            }\n            \n            System.err.println(\"no match\");\n            throw new RuntimeException(\"holy crap, no match!\");\n        }","id":10853,"modified_method":"public void processResponse(SnmpObjId responseObjId, SnmpValue val) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex).getResponseProcessor();\n            ColumnTracker ct = m_processors.get(m_currentIndex).getColumnTracker();\n            \n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            System.err.println(String.format(\"processResponse: trying: index(%d): tracker=%s, responseObj=%s, value=%s\", m_currentIndex, ct, responseObjId, val));\n            rp.processResponse(responseObjId, val);\n        }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public boolean processErrors(int errorStatus, int errorIndex) {\n            return false;\n        }","id":10854,"modified_method":"public boolean processErrors(int errorStatus, int errorIndex) {\n            ResponseProcessor rp = m_processors.get(m_currentIndex).getResponseProcessor();\n            ColumnTracker ct = m_processors.get(m_currentIndex).getColumnTracker();\n            \n            if (++m_currentIndex == m_processors.size()) {\n                m_currentIndex = 0;\n            }\n\n            System.err.println(String.format(\"processError: trying: index(%d): tracker=%s, errorStatus=%d, errorIndex=%d\", m_currentIndex, ct, errorStatus, errorIndex));\n            return rp.processErrors(errorStatus, errorIndex);\n        }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"@Override\n    public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        Map<SnmpObjId, ResponseProcessor> processors = new HashMap<SnmpObjId,ResponseProcessor>(pduBuilder.getMaxVarsPerPdu());\n\n        for (ColumnTracker ct : getTrackers(pduBuilder.getMaxVarsPerPdu())) {\n            System.err.println(\"scheduling \" + ct);\n            processors.put(ct.getBase(), ct.buildNextPdu(pduBuilder));\n        }\n        \n        ResponseProcessor rp = new CombinedColumnResponseProcessor(processors);\n        System.err.println(\"got response processor\");\n        return rp;\n    }","id":10855,"modified_method":"@Override\n    public ResponseProcessor buildNextPdu(PduBuilder pduBuilder) {\n        if (pduBuilder.getMaxVarsPerPdu() < 1) {\n            throw new IllegalArgumentException(\"maxVarsPerPdu < 1\");\n        }\n\n        List<ResponseProcessorTracker> processors = new ArrayList<ResponseProcessorTracker>(pduBuilder.getMaxVarsPerPdu());\n\n        for (ColumnTracker ct : getTrackers(pduBuilder.getMaxVarsPerPdu())) {\n            processors.add(new ResponseProcessorTracker(ct, ct.buildNextPdu(pduBuilder)));\n        }\n\n        ResponseProcessor rp = new CombinedColumnResponseProcessor(processors);\n        return rp;\n    }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private boolean hasRow() {\n        if (isFinished()) {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (!q.isEmpty()) {\n                    return true;\n                }\n            }\n            return false;\n        } else {\n            for (Queue<SnmpResult> q : m_pendingData) {\n                if (q.isEmpty()) {\n                    return false;\n                }\n            }\n            return true;\n        }\n    }","id":10856,"modified_method":"private boolean hasRow() {\n        if (isFinished()) {\n            if (!m_pendingData.isEmpty()) {\n                return true;\n            }\n            return false;\n        } else {\n            for (SnmpRowResult rr : m_pendingData.values()) {\n                if (rr.isComplete()) {\n                    return true;\n                }\n            }\n            return false;\n        }\n    }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private List<ColumnTracker> getTrackers(int max) {\n        List<ColumnTracker> trackers = new ArrayList<ColumnTracker>(max);\n        \n        for (int i = 0; i < m_columnTrackerTrackers.size(); i++) {\n            if (trackers.size() >= max) {\n                return trackers;\n            }\n            ColumnTrackerTracker ctt = m_columnTrackerTrackers.get(i);\n            ColumnTracker ct = ctt.getTracker();\n            if (!ct.isFinished() && ctt.getUses() < m_columnUses) {\n                trackers.add(ct);\n                ctt.use();\n            }\n        }\n        if (trackers.size() == 0) {\n            for (int i = 0; i < m_columnTrackerTrackers.size(); i++) {\n                if (trackers.size() >= max) {\n                    return trackers;\n                }\n                ColumnTrackerTracker ctt = m_columnTrackerTrackers.get(i);\n                ColumnTracker ct = ctt.getTracker();\n                if (!ct.isFinished()) {\n                    trackers.add(ct);\n                    ctt.use();\n                }\n            }\n        }\n\n        return trackers;\n    }","id":10857,"modified_method":"private List<ColumnTracker> getTrackers(int max) {\n        List<ColumnTracker> trackers = new ArrayList<ColumnTracker>(max);\n        List<ColumnTracker> trackerList = new ArrayList<ColumnTracker>(m_columnTrackers);\n\n        Collections.sort(trackerList, new Comparator<ColumnTracker>() {\n            public int compare(ColumnTracker o1, ColumnTracker o2) {\n                return new CompareToBuilder()\n                    .append(o1.getCurrentRow(), o2.getCurrentRow())\n                    .append(o1.getBase(), o2.getBase())\n                    .toComparison();\n            }\n        });\n\n        for (int i = 0; i < trackerList.size(); i++) {\n            if (trackers.size() >= max) {\n                return trackers;\n            }\n            ColumnTracker ct = trackerList.get(i);\n            if (!ct.isFinished()) {\n                System.err.println(String.format(\"index %d: using tracker %s\", i, ct));\n                trackers.add(ct);\n            }\n        }\n\n        return trackers;\n    }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"public CombinedColumnResponseProcessor(Map<SnmpObjId, ResponseProcessor> processors) {\n            m_processors = processors;\n        }","id":10858,"modified_method":"public CombinedColumnResponseProcessor(List<ResponseProcessorTracker> processors) {\n            m_processors = processors;\n        }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"private List<SnmpResult> getRow() {\n        List<SnmpResult> l = new ArrayList<SnmpResult>(m_columnTrackerTrackers.size());\n        for (Queue<SnmpResult> q : m_pendingData) {\n            if (q.isEmpty()) {\n                l.add(null);\n            } else {\n                l.add(q.poll());\n            }\n        }\n        return l;\n    }","id":10859,"modified_method":"private SnmpRowResult getNextRow() {\n        for (SnmpInstId id : m_pendingData.keySet()) {\n            if (m_pendingData.get(id).isComplete() || isFinished()) {\n                return m_pendingData.remove(id);\n            }\n        }\n        return null;\n    }","commit_id":"78bff38184ea5e4fa1218e30ce66ab52be6e4d77","url":"https://github.com/OpenNMS/opennms"},{"original_method":"static int printUsage() {\n    System.out.println(\"sampler -r <reduces>\\n\" +\n      \"      [-inFormat <input format class>]\\n\" +\n      \"      [-keyClass <map input & output key class>]\\n\" +\n      \"      [-splitRandom <double pcnt> <numSamples> <maxsplits> | \" +\n      \"// Sample from random splits at random (general)\\n\" +\n      \"       -splitSample <numSamples> <maxsplits> | \" +\n      \"             // Sample from first records in splits (random data)\\n\"+\n      \"       -splitInterval <double pcnt> <maxsplits>]\" +\n      \"             // Sample from splits at intervals (sorted data)\");\n    System.out.println(\"Default sampler: -splitRandom 0.1 10000 10\");\n    ToolRunner.printGenericCommandUsage(System.out);\n    return -1;\n  }","id":10860,"modified_method":"static int printUsage() {\n    System.out.println(\"sampler -r <reduces>\\n\" +\n      \"      [-inFormat <input format class>]\\n\" +\n      \"      [-keyClass <map input & output key class>]\\n\" +\n      \"      [-splitRandom <double pcnt> <numSamples> <maxsplits> | \" +\n      \"             // Sample from random splits at random (general)\\n\" +\n      \"       -splitSample <numSamples> <maxsplits> | \" +\n      \"             // Sample from first records in splits (random data)\\n\"+\n      \"       -splitInterval <double pcnt> <maxsplits>]\" +\n      \"             // Sample from splits at intervals (sorted data)\");\n    System.out.println(\"Default sampler: -splitRandom 0.1 10000 10\");\n    ToolRunner.printGenericCommandUsage(System.out);\n    return -1;\n  }","commit_id":"46a56a74db2a423557584c3ed1c2027299204326","url":"https://github.com/apache/hbase"},{"original_method":"/**\n     * For each split sampled, emit when the ratio of the number of records\n     * retained to the total record count is less than the specified\n     * frequency.\n     */\n    @SuppressWarnings(\"unchecked\") // ArrayList::toArray doesn't preserve type\n    public K[] getSample(InputFormat<K,V> inf, Job job) \n        throws IOException, InterruptedException {\n      List<InputSplit> splits = inf.getSplits(job);\n      ArrayList<K> samples = new ArrayList<K>();\n      int splitsToSample = Math.min(maxSplitsSampled, splits.size());\n      int splitStep = splits.size() / splitsToSample;\n      long records = 0;\n      long kept = 0;\n      for (int i = 0; i < splitsToSample; ++i) {\n        RecordReader<K,V> reader = inf.createRecordReader(\n          splits.get(i * splitStep),\n          new TaskAttemptContext(job.getConfiguration(), \n                                 new TaskAttemptID()));\n        while (reader.nextKeyValue()) {\n          ++records;\n          if ((double) kept / records < freq) {\n            ++kept;\n            samples.add(reader.getCurrentKey());\n          }\n        }\n        reader.close();\n      }\n      return (K[])samples.toArray();\n    }","id":10861,"modified_method":"/**\n     * For each split sampled, emit when the ratio of the number of records\n     * retained to the total record count is less than the specified\n     * frequency.\n     */\n    @SuppressWarnings(\"unchecked\") // ArrayList::toArray doesn't preserve type\n    public K[] getSample(InputFormat<K,V> inf, Job job) \n        throws IOException, InterruptedException {\n      List<InputSplit> splits = inf.getSplits(job);\n      ArrayList<K> samples = new ArrayList<K>();\n      int splitsToSample = Math.min(maxSplitsSampled, splits.size());\n      long records = 0;\n      long kept = 0;\n      for (int i = 0; i < splitsToSample; ++i) {\n        TaskAttemptContext samplingContext = new TaskAttemptContext(\n            job.getConfiguration(), new TaskAttemptID());\n        RecordReader<K,V> reader = inf.createRecordReader(\n            splits.get(i), samplingContext);\n        reader.initialize(splits.get(i), samplingContext);\n        while (reader.nextKeyValue()) {\n          ++records;\n          if ((double) kept / records < freq) {\n            samples.add(ReflectionUtils.copy(job.getConfiguration(),\n                                 reader.getCurrentKey(), null));\n            ++kept;\n          }\n        }\n        reader.close();\n      }\n      return (K[])samples.toArray();\n    }","commit_id":"46a56a74db2a423557584c3ed1c2027299204326","url":"https://github.com/apache/hbase"},{"original_method":"/**\n     * From each split sampled, take the first numSamples / numSplits records.\n     */\n    @SuppressWarnings(\"unchecked\") // ArrayList::toArray doesn't preserve type\n    public K[] getSample(InputFormat<K,V> inf, Job job) \n        throws IOException, InterruptedException {\n      List<InputSplit> splits = inf.getSplits(job);\n      ArrayList<K> samples = new ArrayList<K>(numSamples);\n      int splitsToSample = Math.min(maxSplitsSampled, splits.size());\n      int splitStep = splits.size() / splitsToSample;\n      int samplesPerSplit = numSamples / splitsToSample;\n      long records = 0;\n      for (int i = 0; i < splitsToSample; ++i) {\n        RecordReader<K,V> reader = inf.createRecordReader(\n          splits.get(i * splitStep), \n          new TaskAttemptContext(job.getConfiguration(), \n                                 new TaskAttemptID()));\n        while (reader.nextKeyValue()) {\n          samples.add(reader.getCurrentKey());\n          ++records;\n          if ((i+1) * samplesPerSplit <= records) {\n            break;\n          }\n        }\n        reader.close();\n      }\n      return (K[])samples.toArray();\n    }","id":10862,"modified_method":"/**\n     * From each split sampled, take the first numSamples / numSplits records.\n     */\n    @SuppressWarnings(\"unchecked\") // ArrayList::toArray doesn't preserve type\n    public K[] getSample(InputFormat<K,V> inf, Job job) \n        throws IOException, InterruptedException {\n      List<InputSplit> splits = inf.getSplits(job);\n      ArrayList<K> samples = new ArrayList<K>(numSamples);\n      int splitsToSample = Math.min(maxSplitsSampled, splits.size());\n      int samplesPerSplit = numSamples / splitsToSample;\n      long records = 0;\n      for (int i = 0; i < splitsToSample; ++i) {\n        TaskAttemptContext samplingContext = new TaskAttemptContext(\n            job.getConfiguration(), new TaskAttemptID());\n        RecordReader<K,V> reader = inf.createRecordReader(\n            splits.get(i), samplingContext);\n        reader.initialize(splits.get(i), samplingContext);\n        while (reader.nextKeyValue()) {\n          samples.add(ReflectionUtils.copy(job.getConfiguration(),\n                                           reader.getCurrentKey(), null));\n          ++records;\n          if ((i+1) * samplesPerSplit <= records) {\n            break;\n          }\n        }\n        reader.close();\n      }\n      return (K[])samples.toArray();\n    }","commit_id":"46a56a74db2a423557584c3ed1c2027299204326","url":"https://github.com/apache/hbase"},{"original_method":"/**\n     * Randomize the split order, then take the specified number of keys from\n     * each split sampled, where each key is selected with the specified\n     * probability and possibly replaced by a subsequently selected key when\n     * the quota of keys from that split is satisfied.\n     */\n    @SuppressWarnings(\"unchecked\") // ArrayList::toArray doesn't preserve type\n    public K[] getSample(InputFormat<K,V> inf, Job job) \n        throws IOException, InterruptedException {\n      List<InputSplit> splits = inf.getSplits(job);\n      ArrayList<K> samples = new ArrayList<K>(numSamples);\n      int splitsToSample = Math.min(maxSplitsSampled, splits.size());\n\n      Random r = new Random();\n      long seed = r.nextLong();\n      r.setSeed(seed);\n      LOG.debug(\"seed: \" + seed);\n      // shuffle splits\n      for (int i = 0; i < splits.size(); ++i) {\n        InputSplit tmp = splits.get(i);\n        int j = r.nextInt(splits.size());\n        splits.set(i, splits.get(j));\n        splits.set(j, tmp);\n      }\n      // our target rate is in terms of the maximum number of sample splits,\n      // but we accept the possibility of sampling additional splits to hit\n      // the target sample keyset\n      for (int i = 0; i < splitsToSample ||\n                     (i < splits.size() && samples.size() < numSamples); ++i) {\n        RecordReader<K,V> reader = inf.createRecordReader(splits.get(i), \n          new TaskAttemptContext(job.getConfiguration(), \n                                 new TaskAttemptID()));\n        while (reader.nextKeyValue()) {\n          if (r.nextDouble() <= freq) {\n            if (samples.size() < numSamples) {\n              samples.add(reader.getCurrentKey());\n            } else {\n              // When exceeding the maximum number of samples, replace a\n              // random element with this one, then adjust the frequency\n              // to reflect the possibility of existing elements being\n              // pushed out\n              int ind = r.nextInt(numSamples);\n              if (ind != numSamples) {\n                samples.set(ind, reader.getCurrentKey());\n              }\n              freq *= (numSamples - 1) / (double) numSamples;\n            }\n          }\n        }\n        reader.close();\n      }\n      return (K[])samples.toArray();\n    }","id":10863,"modified_method":"/**\n     * Randomize the split order, then take the specified number of keys from\n     * each split sampled, where each key is selected with the specified\n     * probability and possibly replaced by a subsequently selected key when\n     * the quota of keys from that split is satisfied.\n     */\n    @SuppressWarnings(\"unchecked\") // ArrayList::toArray doesn't preserve type\n    public K[] getSample(InputFormat<K,V> inf, Job job) \n        throws IOException, InterruptedException {\n      List<InputSplit> splits = inf.getSplits(job);\n      ArrayList<K> samples = new ArrayList<K>(numSamples);\n      int splitsToSample = Math.min(maxSplitsSampled, splits.size());\n\n      Random r = new Random();\n      long seed = r.nextLong();\n      r.setSeed(seed);\n      LOG.debug(\"seed: \" + seed);\n      // shuffle splits\n      for (int i = 0; i < splits.size(); ++i) {\n        InputSplit tmp = splits.get(i);\n        int j = r.nextInt(splits.size());\n        splits.set(i, splits.get(j));\n        splits.set(j, tmp);\n      }\n      // our target rate is in terms of the maximum number of sample splits,\n      // but we accept the possibility of sampling additional splits to hit\n      // the target sample keyset\n      for (int i = 0; i < splitsToSample ||\n                     (i < splits.size() && samples.size() < numSamples); ++i) {\n        TaskAttemptContext samplingContext = new TaskAttemptContext(\n            job.getConfiguration(), new TaskAttemptID());\n        RecordReader<K,V> reader = inf.createRecordReader(\n            splits.get(i), samplingContext);\n        reader.initialize(splits.get(i), samplingContext);\n        while (reader.nextKeyValue()) {\n          if (r.nextDouble() <= freq) {\n            if (samples.size() < numSamples) {\n              samples.add(ReflectionUtils.copy(job.getConfiguration(),\n                                               reader.getCurrentKey(), null));\n            } else {\n              // When exceeding the maximum number of samples, replace a\n              // random element with this one, then adjust the frequency\n              // to reflect the possibility of existing elements being\n              // pushed out\n              int ind = r.nextInt(numSamples);\n              if (ind != numSamples) {\n                samples.set(ind, ReflectionUtils.copy(job.getConfiguration(),\n                                 reader.getCurrentKey(), null));\n              }\n              freq *= (numSamples - 1) / (double) numSamples;\n            }\n          }\n        }\n        reader.close();\n      }\n      return (K[])samples.toArray();\n    }","commit_id":"46a56a74db2a423557584c3ed1c2027299204326","url":"https://github.com/apache/hbase"},{"original_method":"@Override\n    public HighlightField highlight(HighlighterContext highlighterContext) {\n        SearchContextHighlight.Field field = highlighterContext.field;\n        SearchContext context = highlighterContext.context;\n        FetchSubPhase.HitContext hitContext = highlighterContext.hitContext;\n        FieldMapper<?> mapper = highlighterContext.mapper;\n\n        if (!(mapper.fieldType().storeTermVectors() && mapper.fieldType().storeTermVectorOffsets() && mapper.fieldType().storeTermVectorPositions())) {\n            throw new ElasticSearchIllegalArgumentException(\"the field [\" + field.field() + \"] should be indexed with term vector with position offsets to be used with fast vector highlighter\");\n        }\n\n        Encoder encoder = field.encoder().equals(\"html\") ? Encoders.HTML : Encoders.DEFAULT;\n\n        if (!hitContext.cache().containsKey(CACHE_KEY)) {\n            hitContext.cache().put(CACHE_KEY, new HighlighterEntry());\n        }\n        HighlighterEntry cache = (HighlighterEntry) hitContext.cache().get(CACHE_KEY);\n\n        try {\n            MapperHighlightEntry entry = cache.mappers.get(mapper);\n            FieldQuery fieldQuery = null;\n            if (entry == null) {\n                FragListBuilder fragListBuilder;\n                BaseFragmentsBuilder fragmentsBuilder;\n\n                BoundaryScanner boundaryScanner = SimpleBoundaryScanner2.DEFAULT;\n                if (field.boundaryMaxScan() != SimpleBoundaryScanner2.DEFAULT_MAX_SCAN || field.boundaryChars() != SimpleBoundaryScanner2.DEFAULT_BOUNDARY_CHARS) {\n                    boundaryScanner = new SimpleBoundaryScanner2(field.boundaryMaxScan(), field.boundaryChars());\n                }\n\n                if (field.numberOfFragments() == 0) {\n                    fragListBuilder = new SingleFragListBuilder();\n\n                    if (mapper.fieldType().stored()) {\n                        fragmentsBuilder = new SimpleFragmentsBuilder(field.preTags(), field.postTags(), boundaryScanner);\n                    } else {\n                        fragmentsBuilder = new SourceSimpleFragmentsBuilder(mapper, context, field.preTags(), field.postTags(), boundaryScanner);\n                    }\n                } else {\n                    fragListBuilder = field.fragmentOffset() == -1 ? new SimpleFragListBuilder() : new SimpleFragListBuilder(field.fragmentOffset());\n                    if (field.scoreOrdered()) {\n                        if (mapper.fieldType().stored()) {\n                            fragmentsBuilder = new ScoreOrderFragmentsBuilder(field.preTags(), field.postTags(), boundaryScanner);\n                        } else {\n                            fragmentsBuilder = new SourceScoreOrderFragmentsBuilder(mapper, context, field.preTags(), field.postTags(), boundaryScanner);\n                        }\n                    } else {\n                        if (mapper.fieldType().stored()) {\n                            fragmentsBuilder = new SimpleFragmentsBuilder(field.preTags(), field.postTags(), boundaryScanner);\n                        } else {\n                            fragmentsBuilder = new SourceSimpleFragmentsBuilder(mapper, context, field.preTags(), field.postTags(), boundaryScanner);\n                        }\n                    }\n                }\n                fragmentsBuilder.setDiscreteMultiValueHighlighting(termVectorMultiValue);\n                entry = new MapperHighlightEntry();\n                entry.fragListBuilder = fragListBuilder;\n                entry.fragmentsBuilder = fragmentsBuilder;\n                if (cache.fvh == null) {\n                    // parameters to FVH are not requires since:\n                    // first two booleans are not relevant since they are set on the CustomFieldQuery (phrase and fieldMatch)\n                    // fragment builders are used explicitly\n                    cache.fvh = new org.apache.lucene.search.vectorhighlight.FastVectorHighlighter();\n                }\n                CustomFieldQuery.highlightFilters.set(field.highlightFilter());\n                if (field.requireFieldMatch()) {\n                    if (cache.fieldMatchFieldQuery == null) {\n                        // we use top level reader to rewrite the query against all readers, with use caching it across hits (and across readers...)\n                        cache.fieldMatchFieldQuery = new CustomFieldQuery(context.parsedQuery().query(), hitContext.topLevelReader(), true, field.requireFieldMatch());\n                    }\n                    fieldQuery = cache.fieldMatchFieldQuery;\n                } else {\n                    if (cache.noFieldMatchFieldQuery == null) {\n                        // we use top level reader to rewrite the query against all readers, with use caching it across hits (and across readers...)\n                        cache.noFieldMatchFieldQuery = new CustomFieldQuery(context.parsedQuery().query(), hitContext.topLevelReader(), true, field.requireFieldMatch());\n                    }\n                    fieldQuery = cache.noFieldMatchFieldQuery;\n                }\n                cache.mappers.put(mapper, entry);\n            }\n\n            String[] fragments;\n\n            // a HACK to make highlighter do highlighting, even though its using the single frag list builder\n            int numberOfFragments = field.numberOfFragments() == 0 ? Integer.MAX_VALUE : field.numberOfFragments();\n            int fragmentCharSize = field.numberOfFragments() == 0 ? Integer.MAX_VALUE : field.fragmentCharSize();\n            // we highlight against the low level reader and docId, because if we load source, we want to reuse it if possible\n            fragments = cache.fvh.getBestFragments(fieldQuery, hitContext.reader(), hitContext.docId(), mapper.names().indexName(), fragmentCharSize, numberOfFragments,\n                    entry.fragListBuilder, entry.fragmentsBuilder, field.preTags(), field.postTags(), encoder);\n\n            if (fragments != null && fragments.length > 0) {\n                return new HighlightField(field.field(), StringText.convertFromStringArray(fragments));\n            }\n        } catch (Exception e) {\n            throw new FetchPhaseExecutionException(context, \"Failed to highlight field [\" + highlighterContext.fieldName + \"]\", e);\n        }\n\n        return null;\n    }","id":10864,"modified_method":"@Override\n    public HighlightField highlight(HighlighterContext highlighterContext) {\n        SearchContextHighlight.Field field = highlighterContext.field;\n        SearchContext context = highlighterContext.context;\n        FetchSubPhase.HitContext hitContext = highlighterContext.hitContext;\n        FieldMapper<?> mapper = highlighterContext.mapper;\n\n        if (!(mapper.fieldType().storeTermVectors() && mapper.fieldType().storeTermVectorOffsets() && mapper.fieldType().storeTermVectorPositions())) {\n            throw new ElasticSearchIllegalArgumentException(\"the field [\" + field.field() + \"] should be indexed with term vector with position offsets to be used with fast vector highlighter\");\n        }\n\n        Encoder encoder = field.encoder().equals(\"html\") ? Encoders.HTML : Encoders.DEFAULT;\n\n        if (!hitContext.cache().containsKey(CACHE_KEY)) {\n            hitContext.cache().put(CACHE_KEY, new HighlighterEntry());\n        }\n        HighlighterEntry cache = (HighlighterEntry) hitContext.cache().get(CACHE_KEY);\n\n        try {\n            MapperHighlightEntry entry = cache.mappers.get(mapper);\n            FieldQuery fieldQuery = null;\n            if (entry == null) {\n                FragListBuilder fragListBuilder;\n                BaseFragmentsBuilder fragmentsBuilder;\n\n                BoundaryScanner boundaryScanner = SimpleBoundaryScanner2.DEFAULT;\n                if (field.boundaryMaxScan() != SimpleBoundaryScanner2.DEFAULT_MAX_SCAN || field.boundaryChars() != SimpleBoundaryScanner2.DEFAULT_BOUNDARY_CHARS) {\n                    boundaryScanner = new SimpleBoundaryScanner2(field.boundaryMaxScan(), field.boundaryChars());\n                }\n\n                if (field.numberOfFragments() == 0) {\n                    fragListBuilder = new SingleFragListBuilder();\n\n                    if (mapper.fieldType().stored()) {\n                        fragmentsBuilder = new SimpleFragmentsBuilder(mapper, field.preTags(), field.postTags(), boundaryScanner);\n                    } else {\n                        fragmentsBuilder = new SourceSimpleFragmentsBuilder(mapper, context, field.preTags(), field.postTags(), boundaryScanner);\n                    }\n                } else {\n                    fragListBuilder = field.fragmentOffset() == -1 ? new SimpleFragListBuilder() : new SimpleFragListBuilder(field.fragmentOffset());\n                    if (field.scoreOrdered()) {\n                        if (mapper.fieldType().stored()) {\n                            fragmentsBuilder = new ScoreOrderFragmentsBuilder(field.preTags(), field.postTags(), boundaryScanner);\n                        } else {\n                            fragmentsBuilder = new SourceScoreOrderFragmentsBuilder(mapper, context, field.preTags(), field.postTags(), boundaryScanner);\n                        }\n                    } else {\n                        if (mapper.fieldType().stored()) {\n                            fragmentsBuilder = new SimpleFragmentsBuilder(mapper, field.preTags(), field.postTags(), boundaryScanner);\n                        } else {\n                            fragmentsBuilder = new SourceSimpleFragmentsBuilder(mapper, context, field.preTags(), field.postTags(), boundaryScanner);\n                        }\n                    }\n                }\n                fragmentsBuilder.setDiscreteMultiValueHighlighting(termVectorMultiValue);\n                entry = new MapperHighlightEntry();\n                entry.fragListBuilder = fragListBuilder;\n                entry.fragmentsBuilder = fragmentsBuilder;\n                if (cache.fvh == null) {\n                    // parameters to FVH are not requires since:\n                    // first two booleans are not relevant since they are set on the CustomFieldQuery (phrase and fieldMatch)\n                    // fragment builders are used explicitly\n                    cache.fvh = new org.apache.lucene.search.vectorhighlight.FastVectorHighlighter();\n                }\n                CustomFieldQuery.highlightFilters.set(field.highlightFilter());\n                if (field.requireFieldMatch()) {\n                    if (cache.fieldMatchFieldQuery == null) {\n                        // we use top level reader to rewrite the query against all readers, with use caching it across hits (and across readers...)\n                        cache.fieldMatchFieldQuery = new CustomFieldQuery(context.parsedQuery().query(), hitContext.topLevelReader(), true, field.requireFieldMatch());\n                    }\n                    fieldQuery = cache.fieldMatchFieldQuery;\n                } else {\n                    if (cache.noFieldMatchFieldQuery == null) {\n                        // we use top level reader to rewrite the query against all readers, with use caching it across hits (and across readers...)\n                        cache.noFieldMatchFieldQuery = new CustomFieldQuery(context.parsedQuery().query(), hitContext.topLevelReader(), true, field.requireFieldMatch());\n                    }\n                    fieldQuery = cache.noFieldMatchFieldQuery;\n                }\n                cache.mappers.put(mapper, entry);\n            }\n\n            String[] fragments;\n\n            // a HACK to make highlighter do highlighting, even though its using the single frag list builder\n            int numberOfFragments = field.numberOfFragments() == 0 ? Integer.MAX_VALUE : field.numberOfFragments();\n            int fragmentCharSize = field.numberOfFragments() == 0 ? Integer.MAX_VALUE : field.fragmentCharSize();\n            // we highlight against the low level reader and docId, because if we load source, we want to reuse it if possible\n            fragments = cache.fvh.getBestFragments(fieldQuery, hitContext.reader(), hitContext.docId(), mapper.names().indexName(), fragmentCharSize, numberOfFragments,\n                    entry.fragListBuilder, entry.fragmentsBuilder, field.preTags(), field.postTags(), encoder);\n\n            if (fragments != null && fragments.length > 0) {\n                return new HighlightField(field.field(), StringText.convertFromStringArray(fragments));\n            }\n        } catch (Exception e) {\n            throw new FetchPhaseExecutionException(context, \"Failed to highlight field [\" + highlighterContext.fieldName + \"]\", e);\n        }\n\n        return null;\n    }","commit_id":"f995c9c130b9af1c591e7e8be3b0727bcd573481","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Test\n    public void testNgramHighlightingPreLucene42() throws ElasticSearchException, IOException {\n        client().admin().indices().prepareCreate(\"test\")\n        .addMapping(\"test\", jsonBuilder()\n                .startObject()\n                    .startObject(\"test\")\n                        .startObject(\"properties\")\n                            .startObject(\"name\")\n                                .field(\"type\", \"string\")\n                                .field(\"index_analyzer\", \"name_index_analyzer\")\n                                .field(\"search_analyzer\", \"name_search_analyzer\")\n                                .field(\"term_vector\", \"with_positions_offsets\")\n                            .endObject()\n                            .startObject(\"name2\")\n                                .field(\"type\", \"string\")\n                                .field(\"index_analyzer\", \"name2_index_analyzer\")\n                                .field(\"search_analyzer\", \"name_search_analyzer\")\n                                .field(\"term_vector\", \"with_positions_offsets\")\n                            .endObject()\n                        .endObject()\n                    .endObject()\n                .endObject())\n        .setSettings(ImmutableSettings.settingsBuilder()\n                .put(\"index.number_of_shards\", 2)\n                .put(\"analysis.filter.my_ngram.max_gram\", 20)\n                .put(\"analysis.filter.my_ngram.version\", \"4.1\")\n                .put(\"analysis.filter.my_ngram.min_gram\", 1)\n                .put(\"analysis.filter.my_ngram.type\", \"ngram\")\n                .put(\"analysis.tokenizer.my_ngramt.max_gram\", 20)\n                .put(\"analysis.tokenizer.my_ngramt.version\", \"4.1\")\n                .put(\"analysis.tokenizer.my_ngramt.min_gram\", 1)\n                .put(\"analysis.tokenizer.my_ngramt.type\", \"ngram\")\n                .put(\"analysis.analyzer.name_index_analyzer.tokenizer\", \"my_ngramt\")\n                .put(\"analysis.analyzer.name2_index_analyzer.tokenizer\", \"whitespace\")\n                .put(\"analysis.analyzer.name2_index_analyzer.filter\", \"my_ngram\")\n                .put(\"analysis.analyzer.name_search_analyzer.tokenizer\", \"whitespace\"))\n        .execute().actionGet();\n        client().admin().cluster().prepareHealth().setWaitForEvents(Priority.LANGUID).setWaitForYellowStatus().execute().actionGet();\n        client().prepareIndex(\"test\", \"test\", \"1\")\n            .setSource(XContentFactory.jsonBuilder()\n                    .startObject()\n                        .field(\"name\", \"logicacmg ehemals avinci - the know how company\")\n                        .field(\"name2\", \"logicacmg ehemals avinci - the know how company\")\n                    .endObject())\n            .setRefresh(true).execute().actionGet();\n        SearchResponse search = client().prepareSearch().setQuery(matchQuery(\"name\", \"logica m\")).addHighlightedField(\"name\").execute().actionGet();\n        assertHighlight(search, 0, \"name\", 0, equalTo(\"<em>logica<\/em>c<em>m<\/em>g ehe<em>m<\/em>als avinci - the know how co<em>m<\/em>pany\"));\n        \n        search = client().prepareSearch().setQuery(matchQuery(\"name\", \"logica ma\")).addHighlightedField(\"name\").execute()\n                .actionGet();\n        assertHighlight(search, 0, \"name\", 0, equalTo(\"<em>logica<\/em>cmg ehe<em>ma<\/em>ls avinci - the know how company\"));\n\n        search = client().prepareSearch().setQuery(matchQuery(\"name\", \"logica\")).addHighlightedField(\"name\").execute().actionGet();\n        assertHighlight(search, 0, \"name\", 0, equalTo(\"<em>logica<\/em>cmg ehemals avinci - the know how company\"));\n        \n        search = client().prepareSearch().setQuery(matchQuery(\"name2\", \"logica m\")).addHighlightedField(\"name2\").execute().actionGet();\n        assertHighlight(search, 0, \"name2\", 0, equalTo(\"<em>logica<\/em>c<em>m<\/em>g ehe<em>m<\/em>als avinci - the know how co<em>m<\/em>pany\"));\n        \n        search = client().prepareSearch().setQuery(matchQuery(\"name2\", \"logica ma\")).addHighlightedField(\"name2\").execute()\n                .actionGet();\n        assertHighlight(search, 0, \"name2\", 0, equalTo(\"<em>logica<\/em>cmg ehe<em>ma<\/em>ls avinci - the know how company\"));\n\n        search = client().prepareSearch().setQuery(matchQuery(\"name2\", \"logica\")).addHighlightedField(\"name2\").execute().actionGet();\n        assertHighlight(search, 0, \"name2\", 0, equalTo(\"<em>logica<\/em>cmg ehemals avinci - the know how company\"));\n    }","id":10865,"modified_method":"@Test\n    public void testNgramHighlightingPreLucene42() throws ElasticSearchException, IOException {\n        boolean[] doStore = {true, false};\n        for (boolean store : doStore) {\n            wipeIndex(\"test\");\n            client().admin().indices().prepareCreate(\"test\")\n            .addMapping(\"test\", jsonBuilder()\n                    .startObject()\n                        .startObject(\"test\")\n                            .startObject(\"properties\")\n                                .startObject(\"name\")\n                                    .field(\"type\", \"string\")\n                                    .field(\"index_analyzer\", \"name_index_analyzer\")\n                                    .field(\"search_analyzer\", \"name_search_analyzer\")\n                                    .field(\"term_vector\", \"with_positions_offsets\")\n                                    .field(\"store\", store ? \"yes\" : \"no\")\n                                .endObject()\n                                .startObject(\"name2\")\n                                    .field(\"type\", \"string\")\n                                    .field(\"index_analyzer\", \"name2_index_analyzer\")\n                                    .field(\"search_analyzer\", \"name_search_analyzer\")\n                                    .field(\"term_vector\", \"with_positions_offsets\")\n                                    .field(\"store\", store ? \"yes\" : \"no\")\n                                .endObject()\n                            .endObject()\n                        .endObject()\n                    .endObject())\n            .setSettings(ImmutableSettings.settingsBuilder()\n                    .put(\"index.number_of_shards\", 2)\n                    .put(\"analysis.filter.my_ngram.max_gram\", 20)\n                    .put(\"analysis.filter.my_ngram.version\", \"4.1\")\n                    .put(\"analysis.filter.my_ngram.min_gram\", 1)\n                    .put(\"analysis.filter.my_ngram.type\", \"ngram\")\n                    .put(\"analysis.tokenizer.my_ngramt.max_gram\", 20)\n                    .put(\"analysis.tokenizer.my_ngramt.version\", \"4.1\")\n                    .put(\"analysis.tokenizer.my_ngramt.min_gram\", 1)\n                    .put(\"analysis.tokenizer.my_ngramt.type\", \"ngram\")\n                    .put(\"analysis.analyzer.name_index_analyzer.tokenizer\", \"my_ngramt\")\n                    .put(\"analysis.analyzer.name2_index_analyzer.tokenizer\", \"whitespace\")\n                    .putArray(\"analysis.analyzer.name2_index_analyzer.filter\", \"lowercase\", \"my_ngram\")\n                    .put(\"analysis.analyzer.name_search_analyzer.tokenizer\", \"whitespace\")\n                    .put(\"analysis.analyzer.name_search_analyzer.filter\", \"lowercase\"))\n            .execute().actionGet();\n            ensureYellow();\n            client().prepareIndex(\"test\", \"test\", \"1\")\n                .setSource(XContentFactory.jsonBuilder()\n                        .startObject()\n                            .field(\"name\", \"logicacmg ehemals avinci - the know how company\")\n                            .field(\"name2\", \"logicacmg ehemals avinci - the know how company\")\n                        .endObject())\n                .execute().actionGet();\n            \n            client().prepareIndex(\"test\", \"test\", \"2\")\n            .setSource(XContentFactory.jsonBuilder()\n                    .startObject()\n                        .field(\"name\", \"avinci, unilog avinci, logicacmg, logica\" )\n                        .field(\"name2\", \"avinci, unilog avinci, logicacmg, logica\")\n                    .endObject())\n            .execute().actionGet();\n            refresh();\n           \n            SearchResponse search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery(\"name\", \"logica m\"))).addHighlightedField(\"name\").execute().actionGet();\n            assertHighlight(search, 0, \"name\", 0, equalTo(\"<em>logica<\/em>c<em>m<\/em>g ehe<em>m<\/em>als avinci - the know how co<em>m<\/em>pany\"));\n            assertHighlight(search, 1, \"name\", 0, equalTo(\"avinci, unilog avinci, <em>logica<\/em>c<em>m<\/em>g, <em>logica<\/em>\"));\n            \n            search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery(\"name\", \"logica ma\"))).addHighlightedField(\"name\").execute()\n                    .actionGet();\n            assertHighlight(search, 0, \"name\", 0, equalTo(\"<em>logica<\/em>cmg ehe<em>ma<\/em>ls avinci - the know how company\"));\n            assertHighlight(search, 1, \"name\", 0, equalTo(\"avinci, unilog avinci, <em>logica<\/em>cmg, <em>logica<\/em>\"));\n    \n            search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery(\"name\", \"logica\"))).addHighlightedField(\"name\").execute().actionGet();\n            assertHighlight(search, 0, \"name\", 0, equalTo(\"<em>logica<\/em>cmg ehemals avinci - the know how company\"));\n            \n            search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery(\"name2\", \"logica m\"))).addHighlightedField(\"name2\").execute().actionGet();\n            assertHighlight(search, 0, \"name2\", 0, equalTo(\"<em>logica<\/em>c<em>m<\/em>g ehe<em>m<\/em>als avinci - the know how co<em>m<\/em>pany\"));\n            assertHighlight(search, 1, \"name2\", 0, equalTo(\"avinci, unilog avinci, <em>logica<\/em>c<em>m<\/em>g, <em>logica<\/em>\"));\n    \n            search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery(\"name2\", \"logica ma\"))).addHighlightedField(\"name2\").execute()\n                    .actionGet();\n            assertHighlight(search, 0, \"name2\", 0, equalTo(\"<em>logica<\/em>cmg ehe<em>ma<\/em>ls avinci - the know how company\"));\n            assertHighlight(search, 1, \"name2\", 0, equalTo(\"avinci, unilog avinci, <em>logica<\/em>cmg, <em>logica<\/em>\"));\n    \n    \n            search = client().prepareSearch().setQuery(constantScoreQuery(matchQuery(\"name2\", \"logica\"))).addHighlightedField(\"name2\").execute().actionGet();\n            assertHighlight(search, 0, \"name2\", 0, equalTo(\"<em>logica<\/em>cmg ehemals avinci - the know how company\"));\n            assertHighlight(search, 1, \"name2\", 0, equalTo(\"avinci, unilog avinci, <em>logica<\/em>cmg, <em>logica<\/em>\"));\n        }\n\n    }","commit_id":"f995c9c130b9af1c591e7e8be3b0727bcd573481","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public SourceSimpleFragmentsBuilder(FieldMapper<?> mapper, SearchContext searchContext,\n                                        String[] preTags, String[] postTags, BoundaryScanner boundaryScanner) {\n        super(preTags, postTags, boundaryScanner);\n        this.mapper = mapper;\n        this.searchContext = searchContext;\n    }","id":10866,"modified_method":"public SourceSimpleFragmentsBuilder(FieldMapper<?> mapper, SearchContext searchContext,\n                                        String[] preTags, String[] postTags, BoundaryScanner boundaryScanner) {\n        super(mapper, preTags, postTags, boundaryScanner);\n        this.searchContext = searchContext;\n    }","commit_id":"f995c9c130b9af1c591e7e8be3b0727bcd573481","url":"https://github.com/elastic/elasticsearch"},{"original_method":"void add(VirtualFile file) {\n      add(file, false);\n    }","id":10867,"modified_method":"/**\n     * Adds files to the collection of files and directories - to the collection of directories (which are handled recursively).\n     */\n    void add(VirtualFile file) {\n      add(file, false);\n    }","commit_id":"0cb27275ba5986a2d292dcb4363e38688f3742e0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void after(List<? extends VFileEvent> events) {\n    final FileAndDirsCollector dirtyFilesAndDirs = new FileAndDirsCollector();\n\n    for (VFileEvent event : events) {\n      if (event instanceof VFileContentChangeEvent) {\n        final VirtualFile file = ((VFileContentChangeEvent)event).getFile();\n        dirtyFilesAndDirs.addToFiles(file);\n      } else if (event instanceof VFileCopyEvent) {\n        final VirtualFile file = ((VFileCopyEvent)event).getFile();\n        dirtyFilesAndDirs.addToFiles(file);\n      } else if (event instanceof VFileCreateEvent) {\n        final VFileCreateEvent ce = ((VFileCreateEvent)event);\n        final VirtualFile file = ce.getParent().findChild(ce.getChildName());\n        dirtyFilesAndDirs.addToFiles(file);\n      } else if (event instanceof VFileMoveEvent) {\n        dirtyFilesAndDirs.add(((VFileMoveEvent)event).getFile());\n      } else if (event instanceof VFilePropertyChangeEvent) {\n        final VFilePropertyChangeEvent pce = (VFilePropertyChangeEvent) event;\n        VirtualFile file = pce.getFile();\n        // if file was renamed, then mark dirty the file and its parent directory\n        if (pce.getPropertyName().equals(VirtualFile.PROP_NAME)) {\n          if (file.getParent() != null) {\n            file = file.getParent();\n          }\n          dirtyFilesAndDirs.add(file);\n        } else {\n          dirtyFilesAndDirs.addToFiles(file);\n        }\n      }\n    }\n    dirtyFilesAndDirs.markDirty();\n  }","id":10868,"modified_method":"@Override\n  public void after(List<? extends VFileEvent> events) {\n    final FileAndDirsCollector dirtyFilesAndDirs = new FileAndDirsCollector();\n    // collect files and directories - sources of events\n    for (VFileEvent event : events) {\n      final VirtualFile file = getFileForEvent(event);\n      if (file == null) { continue; }\n\n      if (event instanceof VFileContentChangeEvent || event instanceof VFileCopyEvent || event instanceof VFileCreateEvent) {\n        dirtyFilesAndDirs.addToFiles(file);\n      } else if (event instanceof VFilePropertyChangeEvent) {\n        final VFilePropertyChangeEvent pce = (VFilePropertyChangeEvent) event;\n\n        if (pce.getPropertyName().equals(VirtualFile.PROP_NAME)) {\n          // if a file was renamed, then the file is dirty and its parent directory is dirty too;\n          // if a directory was renamed, all its children are recursively dirty, the parent dir is also dirty but not recursively.\n          dirtyFilesAndDirs.add(file);   // the file is dirty recursively\n          dirtyFilesAndDirs.addToFiles(file.getParent()); // directory is dirty alone. if parent is null - is checked in the method\n        } else {\n          dirtyFilesAndDirs.addToFiles(file);\n        }\n      }\n    }\n    // and notify VCSDirtyScopeManager\n    dirtyFilesAndDirs.markDirty();\n  }","commit_id":"0cb27275ba5986a2d292dcb4363e38688f3742e0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"void addToFiles(VirtualFile file) {\n      add(file, true);\n    }","id":10869,"modified_method":"/**\n     * Adds to the collection of files. A file (even if it is a directory) is marked dirty alone (not recursively).\n     * Use this method, when you want directory not to be marked dirty recursively.\n     */\n    void addToFiles(VirtualFile file) {\n      add(file, true);\n    }","commit_id":"0cb27275ba5986a2d292dcb4363e38688f3742e0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * For the given VirtualFile constructs a FilePathImpl object without referring to the initial VirtualFile object\n     * and adds this FilePathImpl to the set of files for proper VcsDirtyScopeManager - to mark these files dirty\n     * when the set will be populated.\n     * @param file        file which path is to be added.\n     * @param addToFiles  If true, then add to dirty files even if it is a directory. Otherwise add to the proper set.\n     */\n    private void add(VirtualFile file, boolean addToFiles) {\n      final boolean isDirectory = file.isDirectory();\n      // need to create FilePath explicitly without referring to VirtualFile because the path of VirtualFile may change\n      final FilePathImpl path = new FilePathImpl(new File(file.getPath()), isDirectory);\n\n      final Collection<VcsDirtyScopeManager> managers = getManagers(file);\n      for (VcsDirtyScopeManager manager : managers) {\n        Pair<HashSet<FilePath>, HashSet<FilePath>> filesAndDirs = map.get(manager);\n        if (filesAndDirs == null) {\n          filesAndDirs = Pair.create(new HashSet<FilePath>(), new HashSet<FilePath>());\n          map.put(manager, filesAndDirs);\n        }\n\n        if (addToFiles || isDirectory) {\n          filesAndDirs.first.add(path);\n        } else {\n          filesAndDirs.second.add(path);\n        }\n      }\n    }","id":10870,"modified_method":"/**\n     * For the given VirtualFile constructs a FilePathImpl object without referring to the initial VirtualFile object\n     * and adds this FilePathImpl to the set of files for proper VcsDirtyScopeManager - to mark these files dirty\n     * when the set will be populated.\n     * @param file        file which path is to be added.\n     * @param addToFiles  If true, then add to dirty files even if it is a directory. Otherwise add to the proper set.\n     */\n    private void add(VirtualFile file, boolean addToFiles) {\n      if (file == null) { return; }\n      final boolean isDirectory = file.isDirectory();\n      // need to create FilePath explicitly without referring to VirtualFile because the path of VirtualFile may change\n      final FilePathImpl path = new FilePathImpl(new File(file.getPath()), isDirectory);\n\n      final Collection<VcsDirtyScopeManager> managers = getManagers(file);\n      for (VcsDirtyScopeManager manager : managers) {\n        Pair<HashSet<FilePath>, HashSet<FilePath>> filesAndDirs = map.get(manager);\n        if (filesAndDirs == null) {\n          filesAndDirs = Pair.create(new HashSet<FilePath>(), new HashSet<FilePath>());\n          map.put(manager, filesAndDirs);\n        }\n\n        if (addToFiles || !isDirectory) {\n          filesAndDirs.first.add(path);\n        } else {\n          filesAndDirs.second.add(path);\n        }\n      }\n    }","commit_id":"0cb27275ba5986a2d292dcb4363e38688f3742e0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void before(List<? extends VFileEvent> events) {\n    final FileAndDirsCollector dirtyFilesAndDirs = new FileAndDirsCollector();\n    // collect files and directories - sources of events\n    for (VFileEvent event : events) {\n      final String path = event.getPath();\n      if (event instanceof VFileDeleteEvent) {\n        final VirtualFile file = ((VFileDeleteEvent)event).getFile();\n        if (!file.isInLocalFileSystem()) { return; }\n        dirtyFilesAndDirs.add(file);\n      } else if (event instanceof VFileMoveEvent) {\n        final VirtualFile file = ((VFileMoveEvent)event).getFile();\n        dirtyFilesAndDirs.addToFiles(file);\n      } else if (event instanceof VFilePropertyChangeEvent) {\n        final VirtualFile file = ((VFilePropertyChangeEvent)event).getFile();\n        dirtyFilesAndDirs.addToFiles(file);\n      }\n    }\n    dirtyFilesAndDirs.markDirty();\n  }","id":10871,"modified_method":"@Override\n  public void before(List<? extends VFileEvent> events) {\n    final FileAndDirsCollector dirtyFilesAndDirs = new FileAndDirsCollector();\n    // collect files and directories - sources of events\n    for (VFileEvent event : events) {\n      final VirtualFile file = getFileForEvent(event);\n      if (file == null) { continue; }\n\n      if (event instanceof VFileDeleteEvent) {\n        if (!file.isInLocalFileSystem()) { continue; }\n        dirtyFilesAndDirs.add(file);\n      } else if (event instanceof VFileMoveEvent || event instanceof VFilePropertyChangeEvent) {\n        dirtyFilesAndDirs.addToFiles(file);\n      }\n    }\n    // and notify VCSDirtyScopeManager\n    dirtyFilesAndDirs.markDirty();\n  }","commit_id":"0cb27275ba5986a2d292dcb4363e38688f3742e0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public UserGroup getUserGroup(long userGroupId)\n\t\tthrows PortalException, SystemException {\n\n\t\tUserGroupPermission.check(\n\t\t\tgetPermissionChecker(), userGroupId, ActionKeys.VIEW);\n\n\t\treturn UserGroupLocalServiceUtil.getUserGroup(userGroupId);\n\t}","id":10872,"modified_method":"public UserGroup getUserGroup(long userGroupId)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (!UserGroupPermission.contains(\n\t\t\t\tgetPermissionChecker(), userGroupId, ActionKeys.VIEW) &&\n\t\t\t!UserGroupPermission.contains(\n\t\t\t\tgetPermissionChecker(), userGroupId, ActionKeys.ASSIGN_USERS)) {\n\n\t\t\tthrow new PrincipalException();\n\t\t}\n\n\t\treturn UserGroupLocalServiceUtil.getUserGroup(userGroupId);\n\t}","commit_id":"7d02d4fb973b6a5e553efdeae8da3a42c399e307","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void addUserGroupUsers(long userGroupId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tUserGroupPermission.check(\n\t\t\tgetPermissionChecker(), userGroupId, ActionKeys.UPDATE);\n\n\t\tUserLocalServiceUtil.addUserGroupUsers(userGroupId, userIds);\n\t}","id":10873,"modified_method":"public void addUserGroupUsers(long userGroupId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (!UserGroupPermission.contains(\n\t\t\t\tgetPermissionChecker(), userGroupId, ActionKeys.UPDATE) &&\n\t\t\t!UserGroupPermission.contains(\n\t\t\t\tgetPermissionChecker(), userGroupId, ActionKeys.ASSIGN_USERS)) {\n\n\t\t\tthrow new PrincipalException();\n\t\t}\n\n\t\tUserLocalServiceUtil.addUserGroupUsers(userGroupId, userIds);\n\t}","commit_id":"7d02d4fb973b6a5e553efdeae8da3a42c399e307","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void unsetUserGroupUsers(long userGroupId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tUserGroupPermission.check(\n\t\t\tgetPermissionChecker(), userGroupId, ActionKeys.UPDATE);\n\n\t\tUserLocalServiceUtil.unsetUserGroupUsers(userGroupId, userIds);\n\t}","id":10874,"modified_method":"public void unsetUserGroupUsers(long userGroupId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (!UserGroupPermission.contains(\n\t\t\t\tgetPermissionChecker(), userGroupId, ActionKeys.UPDATE) &&\n\t\t\t!UserGroupPermission.contains(\n\t\t\t\tgetPermissionChecker(), userGroupId, ActionKeys.ASSIGN_USERS)) {\n\n\t\t\tthrow new PrincipalException();\n\t\t}\n\n\t\tUserLocalServiceUtil.unsetUserGroupUsers(userGroupId, userIds);\n\t}","commit_id":"7d02d4fb973b6a5e553efdeae8da3a42c399e307","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void setUserGroupUsers(long userGroupId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tUserGroupPermissionUtil.check(\n\t\t\tgetPermissionChecker(), userGroupId, ActionKeys.UPDATE);\n\n\t\tuserLocalService.setUserGroupUsers(userGroupId, userIds);\n\t}","id":10875,"modified_method":"public void setUserGroupUsers(long userGroupId, long[] userIds)\n\t\tthrows PortalException, SystemException {\n\n\t\tif (!UserGroupPermissionUtil.contains(\n\t\t\t\tgetPermissionChecker(), userGroupId, ActionKeys.UPDATE) &&\n\t\t\t!UserGroupPermissionUtil.contains(\n\t\t\t\tgetPermissionChecker(), userGroupId, ActionKeys.ASSIGN_USERS)) {\n\n\t\t\tthrow new PrincipalException();\n\t\t}\n\n\t\tuserLocalService.setUserGroupUsers(userGroupId, userIds);\n\t}","commit_id":"af85959d2febae8d760197b99c31dd1502c2bfd8","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Caption self = (Caption) comp;\n\t\tfinal String uuid = self.getUuid();\n\t\tfinal String zcls = self.getZclass();\n\t\tfinal String imgTag = self.getImgTag();\n\n\t\tif (self.isLegend()) {\n\t\t\twh.write(\"<legend>\").write(imgTag);\n\t\t\tnew Out(self.getLabel()).render(out);\n\t\t\twh.writeChildren(self);\n\t\t\twh.writeln(\"<\/legend>\");\n\t\t} else {\n\t\t\twh.write(\"<table id=\\\"\").write(uuid).write(\"\\\" \");\n\t\t\twh.write(\"z.type=\\\"zul.widget.Capt\\\"\").write(self.getOuterAttrs())\n\t\t\t\t\t.write(self.getInnerAttrs());\n\t\t\twh.writeln(\" width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\");\n\t\t\twh.writeln(\"<tr valign=\\\"middle\\\">\");\n\t\t\twh.write(\"<td align=\\\"left\\\" class=\\\"\").write(zcls).write(\"-l\\\">\").write(imgTag);\n\t\t\tnew Out(self.getCompoundLabel()).setNbsp(true).render(out);\n\t\t\twh.writeln(\"<\/td>\");\n\n\t\t\twh.write(\"<td align=\\\"right\\\" class=\\\"\").write(zcls).write(\"-r\\\" id=\\\"\").write(uuid).write(\"!cave\\\">\")\n\t\t\t\t.writeChildren(self)\n\t\t\t\t.writeln(\"<\/td>\");\n\n\t\t\tif (self.isClosableVisible()) {\n\t\t\t\tfinal String pzcls = ((HtmlBasedComponent)self.getParent()).getZclass();\n\t\t\t\twh.write(\"<td width=\\\"16\\\"><div id=\\\"\")\n\t\t\t\t\t.write(self.getParent().getUuid())\n\t\t\t\t\t.write(\"!close\\\" class=\\\"\")\n\t\t\t\t\t.write(pzcls).write(\"-tool \").write(pzcls)\n\t\t\t\t\t.write(\"-close\\\"><\/div><\/td>\");\n\t\t\t}\n\n\t\t\twh.write(\"<\/tr><\/table>\");\n\t\t}\n\t}","id":10876,"modified_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Caption self = (Caption) comp;\n\t\tfinal String uuid = self.getUuid();\n\t\tfinal String zcls = self.getZclass();\n\t\tfinal String imgTag = self.getImgTag();\n\n\t\tif (self.isLegend()) {\n\t\t\twh.write(\"<legend>\").write(imgTag);\n\t\t\tnew Out(self.getLabel()).render(out);\n\t\t\twh.writeChildren(self);\n\t\t\twh.writeln(\"<\/legend>\");\n\t\t} else {\n\t\t\tfinal String pzcls = ((HtmlBasedComponent)self.getParent()).getZclass();\n\t\t\tfinal String puuid = self.getParent().getUuid();\n\t\t\twh.write(\"<table id=\\\"\").write(uuid).write(\"\\\" \");\n\t\t\twh.write(\"z.type=\\\"zul.widget.Capt\\\"\").write(self.getOuterAttrs())\n\t\t\t\t\t.write(self.getInnerAttrs());\n\t\t\twh.writeln(\" width=\\\"100%\\\" border=\\\"0\\\" cellpadding=\\\"0\\\" cellspacing=\\\"0\\\">\");\n\t\t\twh.writeln(\"<tr valign=\\\"middle\\\">\");\n\t\t\twh.write(\"<td align=\\\"left\\\" class=\\\"\").write(zcls).write(\"-l\\\">\").write(imgTag);\n\t\t\tnew Out(self.getCompoundLabel()).setNbsp(true).render(out);\n\t\t\twh.writeln(\"<\/td>\");\n\n\t\t\twh.write(\"<td align=\\\"right\\\" class=\\\"\").write(zcls).write(\"-r\\\" id=\\\"\").write(uuid).write(\"!cave\\\">\")\n\t\t\t\t.writeChildren(self)\n\t\t\t\t.writeln(\"<\/td>\");\n\t\t\tif (self.isMinimizableVisible()) {\n\t\t\t\twh.write(\"<td width=\\\"16\\\"><div id=\\\"\")\n\t\t\t\t\t.write(puuid)\n\t\t\t\t\t.write(\"!minimize\\\" class=\\\"\")\n\t\t\t\t\t.write(pzcls).write(\"-tool \").write(pzcls)\n\t\t\t\t\t.write(\"-minimize\\\"><\/div><\/td>\");\n\t\t\t}\n\t\t\tif (self.isMaximizableVisible()) {\n\t\t\t\twh.write(\"<td width=\\\"16\\\"><div id=\\\"\")\n\t\t\t\t\t.write(puuid)\n\t\t\t\t\t.write(\"!maximize\\\" class=\\\"\")\n\t\t\t\t\t.write(pzcls).write(\"-tool \").write(pzcls)\n\t\t\t\t\t.write(\"-maximize\");\n\t\t\t\tif (((Window)self.getParent()).isMaximized())\n\t\t\t\t\twh.write(\" \").write(pzcls).write(\"-maximized\");\n\t\t\t\twh.write(\"\\\"><\/div><\/td>\");\n\t\t\t}\n\t\t\tif (self.isClosableVisible()) {\n\t\t\t\twh.write(\"<td width=\\\"16\\\"><div id=\\\"\")\n\t\t\t\t\t.write(puuid)\n\t\t\t\t\t.write(\"!close\\\" class=\\\"\")\n\t\t\t\t\t.write(pzcls).write(\"-tool \").write(pzcls)\n\t\t\t\t\t.write(\"-close\\\"><\/div><\/td>\");\n\t\t\t}\n\t\t\twh.write(\"<\/tr><\/table>\");\n\t\t}\n\t}","commit_id":"e4a809f83ec4240731681d8d80d248fda6b53c3d","url":"https://github.com/zkoss/zk"},{"original_method":"/** Returns the style class used for the content block of the groupbox.\n\t * Used only if {@link #getMold} is not default.\n\t *\n\t * <ul>\n\t * <li>If {@link #setContentSclass} is called with non-null string,\n\t * this method returns it.<\/li>\n\t * <li>If {@link #getSclass} is null, \"gc-default\" is returned,<\/li>\n\t * <li>Otherwise, \"gc-<i>sclass<\/i>\",\n\t * where <i>sclass<\/i> is the value returned by {@link #getSclass}.<\/li>\n\t * <\/ul>\n\t */\n\tpublic String getContentSclass() {\n\t\tString cntscls = _cntscls;\n\t\tif (cntscls != null)\n\t\t\treturn cntscls;\n\n\t\tcntscls = getSclass();\n\t\treturn cntscls == null ? \"gc-default\": \"gc-\" + cntscls;\n\t}","id":10877,"modified_method":"/** Returns the style class used for the content block of the groupbox.\n\t * Used only if {@link #getMold} is not default.\n\t *\n\t * <ul>\n\t * <li>If {@link #setContentSclass} is called with non-null string,\n\t * this method returns it.<\/li>\n\t * <li>If {@link #getSclass} is null, \"gc-default\" is returned,<\/li>\n\t * <li>Otherwise, \"gc-<i>sclass<\/i>\",\n\t * where <i>sclass<\/i> is the value returned by {@link #getSclass}.<\/li>\n\t * <\/ul>\n\t */\n\tpublic String getContentSclass() {\n\t\tString cntscls = _cntscls;\n\t\tif (cntscls != null)\n\t\t\treturn cntscls;\n\t\t\n\t\tcntscls = getSclass();\n\t\treturn \"3d\".equals(getMold()) ? cntscls == null ? \"gc-default\": \"gc-\" + cntscls\n\t\t\t\t\t: cntscls == null ? \"fieldset-bwrap\" : \"fieldset-bwrap \" + cntscls;\n\t}","commit_id":"8b594d96a1ab39e44de275fd9731d37a4c3bf9ce","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Groupbox self = (Groupbox) comp;\n\t\twh.write(\"<fieldset id=\\\"\").write(self.getUuid()).write(\"\\\"\");\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).writeln(\">\");\n\t\twh.write(self.getCaption());\n\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\n\t\t\tfinal Component child = (Component) it.next();\n\t\t\tif(self.getCaption() != child)\n\t\t\t\tchild.redraw(out);\n\t\t}\n\n\t\twh.writeln(\"<\/fieldset>\");\n\t}","id":10878,"modified_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Groupbox self = (Groupbox) comp;\n\t\tfinal String uuid = self.getUuid();\n\t\twh.write(\"<fieldset id=\\\"\").write(uuid).write(\"\\\" z.type=\\\"zul.widget.Grfs\\\"\");\n\t\twh.write(self.getOuterAttrs()).write(self.getInnerAttrs()).writeln(\">\");\n\t\twh.write(self.getCaption());\n\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"!cave\\\" class=\\\"\")\n\t\t\t.write(self.getContentSclass()).write(\"\\\"\")\n\t\t\t.writeAttr(\"style\", self.getContentStyle()).write(\">\");\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\n\t\t\tfinal Component child = (Component) it.next();\n\t\t\tif(self.getCaption() != child)\n\t\t\t\tchild.redraw(out);\n\t\t}\n\n\t\twh.writeln(\"<\/div><\/fieldset>\");\n\t}","commit_id":"8b594d96a1ab39e44de275fd9731d37a4c3bf9ce","url":"https://github.com/zkoss/zk"},{"original_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Toolbar self = (Toolbar) comp;\n\t\tboolean shallBreak = self.getOrient().equals(\"vertical\"), follow = false;\n\t\t\n\t\twh.write(\"<div id=\\\"\").write(self.getUuid()).write('\"')\n\t\t\t.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write('>');\n\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\n\t\t\tif (shallBreak)\n\t\t\t\tif (follow) wh.writeln(\"<br/>\");\n\t\t\t\telse follow = true;\n\t\t\t((Component)it.next()).redraw(out);\n\t\t}\n\n\t\twh.write(\"<\/div>\");\n\t}","id":10879,"modified_method":"public void render(Component comp, Writer out) throws IOException {\n\t\tfinal SmartWriter wh = new SmartWriter(out);\n\t\tfinal Toolbar self = (Toolbar) comp;\n\t\tboolean shallBreak = self.getOrient().equals(\"vertical\"), follow = false;\n\t\tfinal String sclass = self.getSclass(), uuid = self.getUuid();\n\t\twh.write(\"<div id=\\\"\").write(uuid).write('\"')\n\t\t\t.write(self.getOuterAttrs()).write(self.getInnerAttrs()).write('>');\n\t\twh.write(\"<div id=\\\"\").write(uuid).write(\"!cave\\\" class=\\\"\")\n\t\t\t.write(sclass).write(\"-body \").write(sclass).write('-').write(self.getAlign())\n\t\t\t.write(\"\\\">\");\n\t\tfor (Iterator it = self.getChildren().iterator(); it.hasNext();) {\n\t\t\tif (shallBreak)\n\t\t\t\tif (follow) wh.writeln(\"<br/>\");\n\t\t\t\telse follow = true;\n\t\t\t((Component)it.next()).redraw(out);\n\t\t}\n\n\t\twh.write(\"<\/div><div class=\\\"z-clear\\\"><\/div><\/div>\");\n\t}","commit_id":"180cb927ff6e4a9128ac427262ce8cee17eba951","url":"https://github.com/zkoss/zk"},{"original_method":"@Override\n    public void render(BinarySpec binary, TextReportBuilder builder) {\n        StyledTextOutput textOutput = builder.getOutput();\n\n        textOutput.append(StringUtils.capitalize(binary.getDisplayName()));\n        if (!binary.isBuildable()) {\n            textOutput.append(\" (not buildable)\");\n        }\n        textOutput.println();\n\n        textOutput.formatln(\"    build using task: %s\", binary.getBuildTask().getPath());\n        if (binary instanceof NativeExecutableBinarySpec) {\n            NativeExecutableBinarySpec executableBinary = (NativeExecutableBinarySpec) binary;\n            textOutput.formatln(\"    install using task: %s\", executableBinary.getTasks().getInstall().getPath());\n        }\n        if (binary instanceof NativeTestSuiteBinarySpec) {\n            NativeTestSuiteBinarySpec executableBinary = (NativeTestSuiteBinarySpec) binary;\n            textOutput.formatln(\"    run using task: %s\", executableBinary.getTasks().getRun().getPath());\n        }\n\n        if (binary instanceof NativeBinarySpec) {\n            NativeBinarySpec nativeBinary = (NativeBinarySpec) binary;\n            textOutput.formatln(\"    platform: %s\", nativeBinary.getTargetPlatform().getName());\n            textOutput.formatln(\"    build type: %s\", nativeBinary.getBuildType().getName());\n            textOutput.formatln(\"    flavor: %s\", nativeBinary.getFlavor().getName());\n            textOutput.formatln(\"    tool chain: %s\", nativeBinary.getToolChain().getDisplayName());\n            if (binary instanceof NativeExecutableBinarySpec) {\n                NativeExecutableBinarySpec executableBinary = (NativeExecutableBinarySpec) binary;\n                textOutput.formatln(\"    executable file: %s\", fileResolver.resolveAsRelativePath(executableBinary.getExecutableFile()));\n            }\n            if (binary instanceof NativeTestSuiteBinarySpec) {\n                NativeTestSuiteBinarySpec executableBinary = (NativeTestSuiteBinarySpec) binary;\n                textOutput.formatln(\"    executable file: %s\", fileResolver.resolveAsRelativePath(executableBinary.getExecutableFile()));\n            }\n            if (binary instanceof SharedLibraryBinarySpec) {\n                SharedLibraryBinarySpec libraryBinary = (SharedLibraryBinarySpec) binary;\n                textOutput.formatln(\"    shared library file: %s\", fileResolver.resolveAsRelativePath(libraryBinary.getSharedLibraryFile()));\n            }\n            if (binary instanceof StaticLibraryBinarySpec) {\n                StaticLibraryBinarySpec libraryBinary = (StaticLibraryBinarySpec) binary;\n                textOutput.formatln(\"    static library file: %s\", fileResolver.resolveAsRelativePath(libraryBinary.getStaticLibraryFile()));\n            }\n        }\n\n        if (binary instanceof JvmBinarySpec) {\n            JvmBinarySpec jvmBinary = (JvmBinarySpec) binary;\n            textOutput.formatln(\"    platform: %s\", jvmBinary.getTargetPlatform().getName());\n            textOutput.formatln(\"    tool chain: %s\", jvmBinary.getToolChain().getDisplayName());\n            if (binary instanceof JarBinarySpec) {\n                JarBinarySpec jarBinary = (JarBinarySpec) binary;\n                textOutput.formatln(\"    Jar file: %s\", fileResolver.resolveAsRelativePath(jarBinary.getJarFile()));\n            }\n            if (binary instanceof ClassDirectoryBinarySpec) {\n                ClassDirectoryBinarySpec classDirectoryBinary = (ClassDirectoryBinarySpec) binary;\n                textOutput.formatln(\"    classes dir: %s\", fileResolver.resolveAsRelativePath(classDirectoryBinary.getClassesDir()));\n                textOutput.formatln(\"    resources dir: %s\", fileResolver.resolveAsRelativePath(classDirectoryBinary.getResourcesDir()));\n            }\n        }\n\n        if (binary instanceof PlayApplicationBinarySpec) {\n            PlayApplicationBinarySpec playBinary = (PlayApplicationBinarySpec) binary;\n            textOutput.formatln(\"    platform: %s\", playBinary.getTargetPlatform().getName());\n            textOutput.formatln(\"    tool chain: %s\", playBinary.getToolChain().getDisplayName());\n        }\n    }","id":10880,"modified_method":"@Override\n    public void render(BinarySpec binary, TextReportBuilder builder) {\n        StyledTextOutput textOutput = builder.getOutput();\n\n        textOutput.append(StringUtils.capitalize(binary.getDisplayName()));\n        if (!binary.isBuildable()) {\n            textOutput.append(\" (not buildable)\");\n        }\n        textOutput.println();\n\n        builder.item(\"build using task\", binary.getBuildTask().getPath());\n        if (binary instanceof NativeExecutableBinarySpec) {\n            NativeExecutableBinarySpec executableBinary = (NativeExecutableBinarySpec) binary;\n            builder.item(\"install using task\", executableBinary.getTasks().getInstall().getPath());\n        }\n        if (binary instanceof NativeTestSuiteBinarySpec) {\n            NativeTestSuiteBinarySpec executableBinary = (NativeTestSuiteBinarySpec) binary;\n            builder.item(\"run using task\", executableBinary.getTasks().getRun().getPath());\n        }\n\n        if (binary instanceof NativeBinarySpec) {\n            NativeBinarySpec nativeBinary = (NativeBinarySpec) binary;\n            builder.item(\"platform\", nativeBinary.getTargetPlatform().getName());\n            builder.item(\"build type\", nativeBinary.getBuildType().getName());\n            builder.item(\"flavor\", nativeBinary.getFlavor().getName());\n            builder.item(\"tool chain\", nativeBinary.getToolChain().getDisplayName());\n            if (binary instanceof NativeExecutableBinarySpec) {\n                NativeExecutableBinarySpec executableBinary = (NativeExecutableBinarySpec) binary;\n                builder.item(\"executable file\", executableBinary.getExecutableFile());\n            }\n            if (binary instanceof NativeTestSuiteBinarySpec) {\n                NativeTestSuiteBinarySpec executableBinary = (NativeTestSuiteBinarySpec) binary;\n                builder.item(\"executable file\", executableBinary.getExecutableFile());\n            }\n            if (binary instanceof SharedLibraryBinarySpec) {\n                SharedLibraryBinarySpec libraryBinary = (SharedLibraryBinarySpec) binary;\n                builder.item(\"shared library file\", libraryBinary.getSharedLibraryFile());\n            }\n            if (binary instanceof StaticLibraryBinarySpec) {\n                StaticLibraryBinarySpec libraryBinary = (StaticLibraryBinarySpec) binary;\n                builder.item(\"static library file\", libraryBinary.getStaticLibraryFile());\n            }\n        }\n\n        if (binary instanceof JvmBinarySpec) {\n            JvmBinarySpec jvmBinary = (JvmBinarySpec) binary;\n            builder.item(\"platform\", jvmBinary.getTargetPlatform().getName());\n            builder.item(\"tool chain\", jvmBinary.getToolChain().getDisplayName());\n            if (binary instanceof JarBinarySpec) {\n                JarBinarySpec jarBinary = (JarBinarySpec) binary;\n                builder.item(\"Jar file\", jarBinary.getJarFile());\n            }\n            if (binary instanceof ClassDirectoryBinarySpec) {\n                ClassDirectoryBinarySpec classDirectoryBinary = (ClassDirectoryBinarySpec) binary;\n                builder.item(\"classes dir\", classDirectoryBinary.getClassesDir());\n                builder.item(\"resources dir\", classDirectoryBinary.getResourcesDir());\n            }\n        }\n\n        if (binary instanceof PlayApplicationBinarySpec) {\n            PlayApplicationBinarySpec playBinary = (PlayApplicationBinarySpec) binary;\n            builder.item(\"platform\", playBinary.getTargetPlatform().getName());\n            builder.item(\"tool chain\", playBinary.getToolChain().getDisplayName());\n        }\n    }","commit_id":"0c21f301fb55943098e2e3ca074f46cc6e5c808a","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public void render(ComponentSpec component, TextReportBuilder builder) {\n        builder.subheading(StringUtils.capitalize(component.getDisplayName()));\n        builder.getOutput().println();\n        builder.collection(\"Source sets\", component.getSource(), sourceSetRenderer, \"source sets\");\n        builder.getOutput().println();\n        builder.collection(\"Binaries\", CollectionUtils.sort(component.getBinaries(), new Comparator<BinarySpec>() {\n            public int compare(BinarySpec binary1, BinarySpec binary2) {\n                return binary1.getName().compareTo(binary2.getName());\n            }\n        }), renderer, \"binaries\");\n    }","id":10881,"modified_method":"@Override\n    public void render(ComponentSpec component, TextReportBuilder builder) {\n        builder.subheading(StringUtils.capitalize(component.getDisplayName()));\n        builder.getOutput().println();\n        builder.collection(\"Source sets\", component.getSource(), sourceSetRenderer, \"source sets\");\n        builder.getOutput().println();\n        builder.collection(\"Binaries\", CollectionUtils.sort(component.getBinaries(), new Comparator<BinarySpec>() {\n            public int compare(BinarySpec binary1, BinarySpec binary2) {\n                return binary1.getName().compareTo(binary2.getName());\n            }\n        }), binaryRenderer, \"binaries\");\n    }","commit_id":"0c21f301fb55943098e2e3ca074f46cc6e5c808a","url":"https://github.com/gradle/gradle"},{"original_method":"public ComponentReportRenderer(FileResolver fileResolver) {\n        componentRenderer = new ComponentRenderer(fileResolver);\n        sourceSetRenderer = new SourceSetRenderer(fileResolver);\n        binaryRenderer = new BinaryRenderer(fileResolver);\n    }","id":10882,"modified_method":"public ComponentReportRenderer(FileResolver fileResolver) {\n        setFileResolver(fileResolver);\n        sourceSetRenderer = new SourceSetRenderer();\n        binaryRenderer = new BinaryRenderer();\n        componentRenderer = new ComponentRenderer(sourceSetRenderer, binaryRenderer);\n    }","commit_id":"0c21f301fb55943098e2e3ca074f46cc6e5c808a","url":"https://github.com/gradle/gradle"},{"original_method":"public DefaultTextReportBuilder(StyledTextOutput textOutput) {\n        this.textOutput = textOutput;\n    }","id":10883,"modified_method":"public DefaultTextReportBuilder(StyledTextOutput textOutput, FileResolver fileResolver) {\n        this.textOutput = textOutput;\n        this.fileResolver = fileResolver;\n    }","commit_id":"0c21f301fb55943098e2e3ca074f46cc6e5c808a","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public void render(LanguageSourceSet sourceSet, TextReportBuilder builder) {\n        StyledTextOutput textOutput = builder.getOutput();\n        textOutput.println(StringUtils.capitalize(sourceSet.getDisplayName()));\n        Set<File> srcDirs = sourceSet.getSource().getSrcDirs();\n        if (srcDirs.isEmpty()) {\n            textOutput.println(\"    No source directories\");\n        } else {\n            for (File file : srcDirs) {\n                textOutput.formatln(\"    %s\", fileResolver.resolveAsRelativePath(file));\n            }\n        }\n    }","id":10884,"modified_method":"@Override\n    public void render(LanguageSourceSet sourceSet, TextReportBuilder builder) {\n        StyledTextOutput textOutput = builder.getOutput();\n        textOutput.println(StringUtils.capitalize(sourceSet.getDisplayName()));\n        Set<File> srcDirs = sourceSet.getSource().getSrcDirs();\n        if (srcDirs.isEmpty()) {\n            textOutput.println(\"    No source directories\");\n        } else {\n            for (File file : srcDirs) {\n                builder.item(file);\n            }\n        }\n    }","commit_id":"0c21f301fb55943098e2e3ca074f46cc6e5c808a","url":"https://github.com/gradle/gradle"},{"original_method":"private void setWriter(StyledTextOutput styledTextOutput, boolean close) {\n        this.textOutput = styledTextOutput;\n        this.builder = new DefaultTextReportBuilder(textOutput);\n        this.close = close;\n    }","id":10885,"modified_method":"private void setWriter(StyledTextOutput styledTextOutput, boolean close) {\n        this.textOutput = styledTextOutput;\n        this.builder = new DefaultTextReportBuilder(textOutput, fileResolver);\n        this.close = close;\n    }","commit_id":"0c21f301fb55943098e2e3ca074f46cc6e5c808a","url":"https://github.com/gradle/gradle"},{"original_method":"private void buildDependencies(Map<String, DefaultIdeaModule> modules, IdeaModule ideaModule) {\n        ideaModule.setOffline(offlineDependencyResolution);\n        Set<Dependency> resolved = ideaModule.resolveDependencies();\n        List<DefaultIdeaDependency> dependencies = new LinkedList<DefaultIdeaDependency>();\n        for (Dependency dependency : resolved) {\n            if (dependency instanceof SingleEntryModuleLibrary) {\n                SingleEntryModuleLibrary d = (SingleEntryModuleLibrary) dependency;\n                DefaultIdeaSingleEntryLibraryDependency defaultDependency = new org.gradle.tooling.internal.idea.DefaultIdeaSingleEntryLibraryDependency()\n                    .setFile(d.getLibraryFile())\n                    .setSource(d.getSourceFile())\n                    .setJavadoc(d.getJavadocFile())\n                    .setScope(new DefaultIdeaDependencyScope(d.getScope()))\n                    .setExported(d.isExported());\n\n                if (d.getModuleVersion() != null) {\n                    defaultDependency.setGradleModuleVersion(new DefaultGradleModuleVersion(d.getModuleVersion()));\n                }\n                dependencies.add(defaultDependency);\n            } else if (dependency instanceof ModuleDependency) {\n                ModuleDependency d = (ModuleDependency) dependency;\n                DefaultIdeaModule targetModule = modules.get(d.getName());\n                File targetProjectDirectory = targetModule == null\n                    ? compositeProjectMapper.getProjectDirectory(d.getGradlePath())\n                    : targetModule.getGradleProject().getProjectDirectory();\n                DefaultIdeaModuleDependency defaultDependency = new org.gradle.tooling.internal.idea.DefaultIdeaModuleDependency()\n                    .setExported(d.isExported())\n                    .setScope(new DefaultIdeaDependencyScope(d.getScope()))\n                    .setDependencyModule(targetModule)\n                    .setProjectDirectory(targetProjectDirectory);\n                dependencies.add(defaultDependency);\n            }\n        }\n        modules.get(ideaModule.getName()).setDependencies(dependencies);\n    }","id":10886,"modified_method":"private void buildDependencies(Map<String, DefaultIdeaModule> modules, IdeaModule ideaModule) {\n        ideaModule.setOffline(offlineDependencyResolution);\n        Set<Dependency> resolved = ideaModule.resolveDependencies();\n        List<DefaultIdeaDependency> dependencies = new LinkedList<DefaultIdeaDependency>();\n        for (Dependency dependency : resolved) {\n            if (dependency instanceof SingleEntryModuleLibrary) {\n                SingleEntryModuleLibrary d = (SingleEntryModuleLibrary) dependency;\n                DefaultIdeaSingleEntryLibraryDependency defaultDependency = new DefaultIdeaSingleEntryLibraryDependency()\n                    .setFile(d.getLibraryFile())\n                    .setSource(d.getSourceFile())\n                    .setJavadoc(d.getJavadocFile())\n                    .setScope(new DefaultIdeaDependencyScope(d.getScope()))\n                    .setExported(d.isExported());\n\n                if (d.getModuleVersion() != null) {\n                    defaultDependency.setGradleModuleVersion(new DefaultGradleModuleVersion(d.getModuleVersion()));\n                }\n                dependencies.add(defaultDependency);\n            } else if (dependency instanceof ModuleDependency) {\n                ModuleDependency d = (ModuleDependency) dependency;\n                DefaultIdeaModule targetModule = modules.get(d.getName());\n                File targetProjectDirectory = targetModule == null\n                    ? compositeProjectMapper.getProjectDirectory(d.getGradlePath())\n                    : targetModule.getGradleProject().getProjectDirectory();\n                DefaultIdeaModuleDependency defaultDependency = new DefaultIdeaModuleDependency()\n                    .setExported(d.isExported())\n                    .setScope(new DefaultIdeaDependencyScope(d.getScope()))\n                    .setDependencyModule(targetModule)\n                    .setProjectDirectory(targetProjectDirectory);\n                dependencies.add(defaultDependency);\n            }\n        }\n        modules.get(ideaModule.getName()).setDependencies(dependencies);\n    }","commit_id":"8ca89543890d41219be50a2840ea9ffbdccd642f","url":"https://github.com/gradle/gradle"},{"original_method":"private void buildDependencies(Map<String, DefaultIdeaModule> modules, IdeaModule ideaModule) {\n        ideaModule.setOffline(offlineDependencyResolution);\n        Set<Dependency> resolved = ideaModule.resolveDependencies();\n        List<DefaultIdeaDependency> dependencies = new LinkedList<DefaultIdeaDependency>();\n        for (Dependency dependency : resolved) {\n            if (dependency instanceof SingleEntryModuleLibrary) {\n                SingleEntryModuleLibrary d = (SingleEntryModuleLibrary) dependency;\n                DefaultIdeaSingleEntryLibraryDependency defaultDependency = new org.gradle.tooling.internal.idea.DefaultIdeaSingleEntryLibraryDependency()\n                    .setFile(d.getLibraryFile())\n                    .setSource(d.getSourceFile())\n                    .setJavadoc(d.getJavadocFile())\n                    .setScope(new DefaultIdeaDependencyScope(d.getScope()))\n                    .setExported(d.isExported());\n\n                if (d.getModuleVersion() != null) {\n                    defaultDependency.setGradleModuleVersion(new DefaultGradleModuleVersion(d.getModuleVersion()));\n                }\n                dependencies.add(defaultDependency);\n            } else if (dependency instanceof ModuleDependency) {\n                ModuleDependency d = (ModuleDependency) dependency;\n                DefaultIdeaModule targetModule = modules.get(d.getName());\n                File targetProjectDirectory = targetModule == null\n                    ? compositeProjectMapper.getProjectDirectory(d.getGradlePath())\n                    : targetModule.getGradleProject().getProjectDirectory();\n                DefaultIdeaModuleDependency defaultDependency = new org.gradle.tooling.internal.idea.DefaultIdeaModuleDependency()\n                    .setExported(d.isExported())\n                    .setScope(new DefaultIdeaDependencyScope(d.getScope()))\n                    .setDependencyModule(targetModule)\n                    .setProjectDirectory(targetProjectDirectory);\n                dependencies.add(defaultDependency);\n            }\n        }\n        modules.get(ideaModule.getName()).setDependencies(dependencies);\n    }","id":10887,"modified_method":"private void buildDependencies(Map<String, DefaultIdeaModule> modules, IdeaModule ideaModule) {\n        ideaModule.setOffline(offlineDependencyResolution);\n        Set<Dependency> resolved = ideaModule.resolveDependencies();\n        List<DefaultIdeaDependency> dependencies = new LinkedList<DefaultIdeaDependency>();\n        for (Dependency dependency : resolved) {\n            if (dependency instanceof SingleEntryModuleLibrary) {\n                SingleEntryModuleLibrary d = (SingleEntryModuleLibrary) dependency;\n                DefaultIdeaSingleEntryLibraryDependency defaultDependency = new DefaultIdeaSingleEntryLibraryDependency()\n                    .setFile(d.getLibraryFile())\n                    .setSource(d.getSourceFile())\n                    .setJavadoc(d.getJavadocFile())\n                    .setScope(new DefaultIdeaDependencyScope(d.getScope()))\n                    .setExported(d.isExported());\n\n                if (d.getModuleVersion() != null) {\n                    defaultDependency.setGradleModuleVersion(new DefaultGradleModuleVersion(d.getModuleVersion()));\n                }\n                dependencies.add(defaultDependency);\n            } else if (dependency instanceof ModuleDependency) {\n                ModuleDependency d = (ModuleDependency) dependency;\n                DefaultIdeaModule targetModule = modules.get(d.getName());\n                File targetProjectDirectory = targetModule == null\n                    ? compositeProjectMapper.getProjectDirectory(d.getGradlePath())\n                    : targetModule.getGradleProject().getProjectDirectory();\n                DefaultIdeaModuleDependency defaultDependency = new DefaultIdeaModuleDependency()\n                    .setExported(d.isExported())\n                    .setScope(new DefaultIdeaDependencyScope(d.getScope()))\n                    .setDependencyModule(targetModule)\n                    .setProjectDirectory(targetProjectDirectory);\n                dependencies.add(defaultDependency);\n            }\n        }\n        modules.get(ideaModule.getName()).setDependencies(dependencies);\n    }","commit_id":"f56ce5c444437ee81d5d6044483cce4c544254ae","url":"https://github.com/gradle/gradle"},{"original_method":"public ConsumerTargetTypeProvider() {\n        configuredTargetTypes.put(IdeaSingleEntryLibraryDependency.class.getCanonicalName(), IdeaSingleEntryLibraryDependency.class);\n        configuredTargetTypes.put(IdeaModuleDependency.class.getCanonicalName(), IdeaModuleDependency.class);\n        configuredTargetTypes.put(GradleFileBuildOutcome.class.getCanonicalName(), GradleFileBuildOutcome.class);\n    }","id":10888,"modified_method":"public ConsumerTargetTypeProvider() {\n        configuredTargetTypes.put(GradleFileBuildOutcome.class.getCanonicalName(), GradleFileBuildOutcome.class);\n    }","commit_id":"54d284abd2f2c6f983390b06ea8fb60053f9491a","url":"https://github.com/gradle/gradle"},{"original_method":"private void buildDependencies(Map<String, DefaultIdeaModule> modules, IdeaModule ideaModule) {\n        ideaModule.setOffline(offlineDependencyResolution);\n        Set<Dependency> resolved = ideaModule.resolveDependencies();\n        List<DefaultIdeaDependency> dependencies = new LinkedList<DefaultIdeaDependency>();\n        for (Dependency dependency : resolved) {\n            if (dependency instanceof SingleEntryModuleLibrary) {\n                SingleEntryModuleLibrary d = (SingleEntryModuleLibrary) dependency;\n                DefaultIdeaSingleEntryLibraryDependency defaultDependency = new org.gradle.tooling.internal.idea.DefaultIdeaSingleEntryLibraryDependency()\n                    .setFile(d.getLibraryFile())\n                    .setSource(d.getSourceFile())\n                    .setJavadoc(d.getJavadocFile())\n                    .setScope(new DefaultIdeaDependencyScope(d.getScope()))\n                    .setExported(d.isExported());\n\n                if (d.getModuleVersion() != null) {\n                    defaultDependency.setGradleModuleVersion(new DefaultGradleModuleVersion(d.getModuleVersion()));\n                }\n                dependencies.add(defaultDependency);\n            } else if (dependency instanceof ModuleDependency) {\n                ModuleDependency d = (ModuleDependency) dependency;\n                DefaultIdeaModule targetModule = modules.get(d.getName());\n                File targetProjectDirectory = targetModule == null\n                    ? compositeProjectMapper.getProjectDirectory(d.getGradlePath())\n                    : targetModule.getGradleProject().getProjectDirectory();\n                DefaultIdeaModuleDependency defaultDependency = new org.gradle.tooling.internal.idea.DefaultIdeaModuleDependency()\n                    .setExported(d.isExported())\n                    .setScope(new DefaultIdeaDependencyScope(d.getScope()))\n                    .setDependencyModule(targetModule)\n                    .setProjectDirectory(targetProjectDirectory);\n                dependencies.add(defaultDependency);\n            }\n        }\n        modules.get(ideaModule.getName()).setDependencies(dependencies);\n    }","id":10889,"modified_method":"private void buildDependencies(Map<String, DefaultIdeaModule> modules, IdeaModule ideaModule) {\n        ideaModule.setOffline(offlineDependencyResolution);\n        Set<Dependency> resolved = ideaModule.resolveDependencies();\n        List<DefaultIdeaDependency> dependencies = new LinkedList<DefaultIdeaDependency>();\n        for (Dependency dependency : resolved) {\n            if (dependency instanceof SingleEntryModuleLibrary) {\n                SingleEntryModuleLibrary d = (SingleEntryModuleLibrary) dependency;\n                DefaultIdeaSingleEntryLibraryDependency defaultDependency = new DefaultIdeaSingleEntryLibraryDependency()\n                    .setFile(d.getLibraryFile())\n                    .setSource(d.getSourceFile())\n                    .setJavadoc(d.getJavadocFile())\n                    .setScope(new DefaultIdeaDependencyScope(d.getScope()))\n                    .setExported(d.isExported());\n\n                if (d.getModuleVersion() != null) {\n                    defaultDependency.setGradleModuleVersion(new DefaultGradleModuleVersion(d.getModuleVersion()));\n                }\n                dependencies.add(defaultDependency);\n            } else if (dependency instanceof ModuleDependency) {\n                ModuleDependency d = (ModuleDependency) dependency;\n                DefaultIdeaModule targetModule = modules.get(d.getName());\n                File targetProjectDirectory = targetModule == null\n                    ? compositeProjectMapper.getProjectDirectory(d.getGradlePath())\n                    : targetModule.getGradleProject().getProjectDirectory();\n                DefaultIdeaModuleDependency defaultDependency = new DefaultIdeaModuleDependency()\n                    .setExported(d.isExported())\n                    .setScope(new DefaultIdeaDependencyScope(d.getScope()))\n                    .setDependencyModule(targetModule)\n                    .setProjectDirectory(targetProjectDirectory);\n                dependencies.add(defaultDependency);\n            }\n        }\n        modules.get(ideaModule.getName()).setDependencies(dependencies);\n    }","commit_id":"54d284abd2f2c6f983390b06ea8fb60053f9491a","url":"https://github.com/gradle/gradle"},{"original_method":"public int getOrCreate( TransactionManager txManager, EntityIdGenerator idGenerator,\n            PersistenceManager persistence, String name )\n    {\n        RelTypeCreater createrThread = new RelTypeCreater( name, txManager, idGenerator,\n                persistence );\n        synchronized ( createrThread )\n        {\n            createrThread.start();\n            while ( createrThread.isAlive() )\n            {\n                try\n                {\n                    createrThread.wait( 50 );\n                }\n                catch ( InterruptedException e )\n                { \n                    Thread.interrupted();\n                }\n            }\n        }\n        if ( createrThread.succeded() )\n        {\n            return createrThread.getRelTypeId();\n        }\n        throw new TransactionFailureException( \n                \"Unable to create relationship type \" + name );\n    }","id":10890,"modified_method":"public int getOrCreate( TransactionManager txManager, EntityIdGenerator idGenerator,\n            PersistenceManager persistence, RelationshipTypeHolder relTypeHolder, String name )\n    {\n        RelTypeCreater createrThread = new RelTypeCreater( name, txManager, idGenerator,\n                persistence );\n        synchronized ( createrThread )\n        {\n            createrThread.start();\n            while ( createrThread.isAlive() )\n            {\n                try\n                {\n                    createrThread.wait( 50 );\n                }\n                catch ( InterruptedException e )\n                { \n                    Thread.interrupted();\n                }\n            }\n        }\n        if ( createrThread.succeded() )\n        {\n            int id = createrThread.getRelTypeId();\n            relTypeHolder.addRawRelationshipType( new RelationshipTypeData( id, name ) );\n            return id;\n        }\n        throw new TransactionFailureException( \n                \"Unable to create relationship type \" + name );\n    }","commit_id":"73229c8c73307d894634b75ae88d91cc67ac7a4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"void addRawRelationshipTypes( RelationshipTypeData[] types )\n    {\n        for ( int i = 0; i < types.length; i++ )\n        {\n            relTypes.put( types[i].getName(), types[i].getId() );\n            relTranslation.put( types[i].getId(), types[i].getName() );\n        }\n    }","id":10891,"modified_method":"void addRawRelationshipTypes( RelationshipTypeData[] types )\n    {\n        for ( int i = 0; i < types.length; i++ )\n        {\n            addRawRelationshipType( types[i] );\n        }\n    }","commit_id":"73229c8c73307d894634b75ae88d91cc67ac7a4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"void addRawRelationshipType( RelationshipTypeData type )\n    {\n        relTypes.put( type.getName(), type.getId() );\n        relTranslation.put( type.getId(), type.getName() );\n    }","id":10892,"modified_method":"void addRawRelationshipType( RelationshipTypeData type )\n    {\n        relTypes.put( type.getName(), type.getId() );\n        relTranslation.put( type.getId(), type.getName() );\n        printIt( type.getId(), type.getName() );\n    }","commit_id":"73229c8c73307d894634b75ae88d91cc67ac7a4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"private synchronized int createRelationshipType( String name )\n    {\n        Integer id = relTypes.get( name );\n        if ( id != null )\n        {\n            return id;\n        }\n        id = relTypeCreator.getOrCreate( transactionManager, idGenerator, persistenceManager, name );\n        addRelType( name, id );\n        return id;\n    }","id":10893,"modified_method":"private synchronized int createRelationshipType( String name )\n    {\n        Integer id = relTypes.get( name );\n        if ( id != null )\n        {\n            return id;\n        }\n        id = relTypeCreator.getOrCreate( transactionManager, idGenerator,\n                persistenceManager, this, name );\n        addRelType( name, id );\n        return id;\n    }","commit_id":"73229c8c73307d894634b75ae88d91cc67ac7a4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"public RelationshipType addValidRelationshipType( String name,\n        boolean create )\n    {\n        if ( relTypes.get( name ) == null )\n        {\n            if ( !create )\n            {\n                return null;\n            }\n            int id = createRelationshipType( name );\n            relTranslation.put( id, name );\n        }\n        else\n        {\n            relTranslation.put( relTypes.get( name ), name );\n        }\n        return new RelationshipTypeImpl( name );\n    }","id":10894,"modified_method":"public RelationshipType addValidRelationshipType( String name,\n        boolean create )\n    {\n        if ( relTypes.get( name ) == null )\n        {\n            if ( !create )\n            {\n                return null;\n            }\n            int id = createRelationshipType( name );\n            relTranslation.put( id, name );\n            printIt( id, name );\n        }\n        else\n        {\n            relTranslation.put( relTypes.get( name ), name );\n            printIt( relTypes.get( name ), name );\n        }\n        return new RelationshipTypeImpl( name );\n    }","commit_id":"73229c8c73307d894634b75ae88d91cc67ac7a4c","url":"https://github.com/neo4j/neo4j"},{"original_method":"public int getOrCreate( TransactionManager txManager, EntityIdGenerator idGenerator,\n            PersistenceManager persistence, String name )\n    {\n        RelTypeCreater createrThread = new RelTypeCreater( name, txManager, idGenerator,\n                persistence );\n        synchronized ( createrThread )\n        {\n            createrThread.start();\n            while ( createrThread.isAlive() )\n            {\n                try\n                {\n                    createrThread.wait( 50 );\n                }\n                catch ( InterruptedException e )\n                { \n                    Thread.interrupted();\n                }\n            }\n        }\n        if ( createrThread.succeded() )\n        {\n            return createrThread.getRelTypeId();\n        }\n        throw new TransactionFailureException( \n                \"Unable to create relationship type \" + name );\n    }","id":10895,"modified_method":"public int getOrCreate( TransactionManager txManager, EntityIdGenerator idGenerator,\n            PersistenceManager persistence, RelationshipTypeHolder relTypeHolder, String name )\n    {\n        RelTypeCreater createrThread = new RelTypeCreater( name, txManager, idGenerator,\n                persistence );\n        synchronized ( createrThread )\n        {\n            createrThread.start();\n            while ( createrThread.isAlive() )\n            {\n                try\n                {\n                    createrThread.wait( 50 );\n                }\n                catch ( InterruptedException e )\n                { \n                    Thread.interrupted();\n                }\n            }\n        }\n        if ( createrThread.succeded() )\n        {\n            int id = createrThread.getRelTypeId();\n            relTypeHolder.addRawRelationshipType( new RelationshipTypeData( id, name ) );\n            return id;\n        }\n        throw new TransactionFailureException( \n                \"Unable to create relationship type \" + name );\n    }","commit_id":"b3475abf02c69fcac03ee1961ea49d6481cf49dd","url":"https://github.com/neo4j/neo4j"},{"original_method":"public RelationshipType addValidRelationshipType( String name,\n        boolean create )\n    {\n        if ( relTypes.get( name ) == null )\n        {\n            if ( !create )\n            {\n                return null;\n            }\n            int id = createRelationshipType( name );\n            relTranslation.put( id, name );\n        }\n        else\n        {\n            relTranslation.put( relTypes.get( name ), name );\n        }\n        return new RelationshipTypeImpl( name );\n    }","id":10896,"modified_method":"public RelationshipType addValidRelationshipType( String name,\n        boolean create )\n    {\n        if ( relTypes.get( name ) == null )\n        {\n            if ( !create )\n            {\n                return null;\n            }\n            int id = createRelationshipType( name );\n            relTranslation.put( id, name );\n            printIt( id, name );\n        }\n        else\n        {\n            relTranslation.put( relTypes.get( name ), name );\n            printIt( relTypes.get( name ), name );\n        }\n        return new RelationshipTypeImpl( name );\n    }","commit_id":"b3475abf02c69fcac03ee1961ea49d6481cf49dd","url":"https://github.com/neo4j/neo4j"},{"original_method":"void addRawRelationshipTypes( RelationshipTypeData[] types )\n    {\n        for ( int i = 0; i < types.length; i++ )\n        {\n            relTypes.put( types[i].getName(), types[i].getId() );\n            relTranslation.put( types[i].getId(), types[i].getName() );\n        }\n    }","id":10897,"modified_method":"void addRawRelationshipTypes( RelationshipTypeData[] types )\n    {\n        for ( int i = 0; i < types.length; i++ )\n        {\n            addRawRelationshipType( types[i] );\n        }\n    }","commit_id":"b3475abf02c69fcac03ee1961ea49d6481cf49dd","url":"https://github.com/neo4j/neo4j"},{"original_method":"private synchronized int createRelationshipType( String name )\n    {\n        Integer id = relTypes.get( name );\n        if ( id != null )\n        {\n            return id;\n        }\n        id = relTypeCreator.getOrCreate( transactionManager, idGenerator, persistenceManager, name );\n        addRelType( name, id );\n        return id;\n    }","id":10898,"modified_method":"private synchronized int createRelationshipType( String name )\n    {\n        Integer id = relTypes.get( name );\n        if ( id != null )\n        {\n            return id;\n        }\n        id = relTypeCreator.getOrCreate( transactionManager, idGenerator,\n                persistenceManager, this, name );\n        addRelType( name, id );\n        return id;\n    }","commit_id":"b3475abf02c69fcac03ee1961ea49d6481cf49dd","url":"https://github.com/neo4j/neo4j"},{"original_method":"void addRawRelationshipType( RelationshipTypeData type )\n    {\n        relTypes.put( type.getName(), type.getId() );\n        relTranslation.put( type.getId(), type.getName() );\n    }","id":10899,"modified_method":"void addRawRelationshipType( RelationshipTypeData type )\n    {\n        relTypes.put( type.getName(), type.getId() );\n        relTranslation.put( type.getId(), type.getName() );\n        printIt( type.getId(), type.getName() );\n    }","commit_id":"b3475abf02c69fcac03ee1961ea49d6481cf49dd","url":"https://github.com/neo4j/neo4j"},{"original_method":"public int getOrCreate( TransactionManager txManager, EntityIdGenerator idGenerator,\n            PersistenceManager persistence, String name )\n    {\n        RelTypeCreater createrThread = new RelTypeCreater( name, txManager, idGenerator,\n                persistence );\n        synchronized ( createrThread )\n        {\n            createrThread.start();\n            while ( createrThread.isAlive() )\n            {\n                try\n                {\n                    createrThread.wait( 50 );\n                }\n                catch ( InterruptedException e )\n                { \n                    Thread.interrupted();\n                }\n            }\n        }\n        if ( createrThread.succeded() )\n        {\n            return createrThread.getRelTypeId();\n        }\n        throw new TransactionFailureException( \n                \"Unable to create relationship type \" + name );\n    }","id":10900,"modified_method":"public int getOrCreate( TransactionManager txManager, EntityIdGenerator idGenerator,\n            PersistenceManager persistence, RelationshipTypeHolder relTypeHolder, String name )\n    {\n        RelTypeCreater createrThread = new RelTypeCreater( name, txManager, idGenerator,\n                persistence );\n        synchronized ( createrThread )\n        {\n            createrThread.start();\n            while ( createrThread.isAlive() )\n            {\n                try\n                {\n                    createrThread.wait( 50 );\n                }\n                catch ( InterruptedException e )\n                { \n                    Thread.interrupted();\n                }\n            }\n        }\n        if ( createrThread.succeded() )\n        {\n            int id = createrThread.getRelTypeId();\n            relTypeHolder.addRawRelationshipType( new RelationshipTypeData( id, name ) );\n            return id;\n        }\n        throw new TransactionFailureException( \n                \"Unable to create relationship type \" + name );\n    }","commit_id":"bfbad608a1ed7f382fe8f15c3b5cece31f8f6da6","url":"https://github.com/neo4j/neo4j"},{"original_method":"void addRawRelationshipType( RelationshipTypeData type )\n    {\n        relTypes.put( type.getName(), type.getId() );\n        relTranslation.put( type.getId(), type.getName() );\n    }","id":10901,"modified_method":"void addRawRelationshipType( RelationshipTypeData type )\n    {\n        relTypes.put( type.getName(), type.getId() );\n        relTranslation.put( type.getId(), type.getName() );\n        printIt( type.getId(), type.getName() );\n    }","commit_id":"bfbad608a1ed7f382fe8f15c3b5cece31f8f6da6","url":"https://github.com/neo4j/neo4j"},{"original_method":"private synchronized int createRelationshipType( String name )\n    {\n        Integer id = relTypes.get( name );\n        if ( id != null )\n        {\n            return id;\n        }\n        id = relTypeCreator.getOrCreate( transactionManager, idGenerator, persistenceManager, name );\n        addRelType( name, id );\n        return id;\n    }","id":10902,"modified_method":"private synchronized int createRelationshipType( String name )\n    {\n        Integer id = relTypes.get( name );\n        if ( id != null )\n        {\n            return id;\n        }\n        id = relTypeCreator.getOrCreate( transactionManager, idGenerator,\n                persistenceManager, this, name );\n        addRelType( name, id );\n        return id;\n    }","commit_id":"bfbad608a1ed7f382fe8f15c3b5cece31f8f6da6","url":"https://github.com/neo4j/neo4j"},{"original_method":"void addRawRelationshipTypes( RelationshipTypeData[] types )\n    {\n        for ( int i = 0; i < types.length; i++ )\n        {\n            relTypes.put( types[i].getName(), types[i].getId() );\n            relTranslation.put( types[i].getId(), types[i].getName() );\n        }\n    }","id":10903,"modified_method":"void addRawRelationshipTypes( RelationshipTypeData[] types )\n    {\n        for ( int i = 0; i < types.length; i++ )\n        {\n            addRawRelationshipType( types[i] );\n        }\n    }","commit_id":"bfbad608a1ed7f382fe8f15c3b5cece31f8f6da6","url":"https://github.com/neo4j/neo4j"},{"original_method":"public RelationshipType addValidRelationshipType( String name,\n        boolean create )\n    {\n        if ( relTypes.get( name ) == null )\n        {\n            if ( !create )\n            {\n                return null;\n            }\n            int id = createRelationshipType( name );\n            relTranslation.put( id, name );\n        }\n        else\n        {\n            relTranslation.put( relTypes.get( name ), name );\n        }\n        return new RelationshipTypeImpl( name );\n    }","id":10904,"modified_method":"public RelationshipType addValidRelationshipType( String name,\n        boolean create )\n    {\n        if ( relTypes.get( name ) == null )\n        {\n            if ( !create )\n            {\n                return null;\n            }\n            int id = createRelationshipType( name );\n            relTranslation.put( id, name );\n            printIt( id, name );\n        }\n        else\n        {\n            relTranslation.put( relTypes.get( name ), name );\n            printIt( relTypes.get( name ), name );\n        }\n        return new RelationshipTypeImpl( name );\n    }","commit_id":"bfbad608a1ed7f382fe8f15c3b5cece31f8f6da6","url":"https://github.com/neo4j/neo4j"},{"original_method":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    protected void copyParamsFromPreviousRequest(RequestAttributes previousRequestAttributes, GrailsWebRequest requestAttributes) {\n        if (!(previousRequestAttributes instanceof GrailsWebRequest)) {\n            return;\n        }\n\n        Map previousParams = ((GrailsWebRequest)previousRequestAttributes).getParams();\n        Map params =  requestAttributes.getParams();\n        for (Object o : previousParams.keySet()) {\n            String name = (String) o;\n            params.put(name, previousParams.get(name));\n        }\n    }","id":10905,"modified_method":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    protected void copyParamsFromPreviousRequest(RequestAttributes previousRequestAttributes, GrailsWebRequest requestAttributes) {\n        if (!(previousRequestAttributes instanceof GrailsWebRequest)) {\n            return;\n        }\n\n        requestAttributes.addParametersFrom(((GrailsWebRequest)previousRequestAttributes).getParams());\n    }","commit_id":"d9cb13c84a02524054e56dd919d6db8e70861902","url":"https://github.com/grails/grails-core"},{"original_method":"/**\n     * Overriden to return the GrailsParameterMap instance,\n     *\n     * @return An instance of GrailsParameterMap\n     */\n    @Override\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public Map getParameterMap() {\n        if (params == null) {\n            params = new GrailsParameterMap(getCurrentRequest());\n        }\n        return params;\n    }","id":10906,"modified_method":"/**\n     * Overriden to return the GrailsParameterMap instance,\n     *\n     * @return An instance of GrailsParameterMap\n     */\n    @Override\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public Map getParameterMap() {\n        if (params == null) {\n            resetParams();\n        }\n        return params;\n    }","commit_id":"d9cb13c84a02524054e56dd919d6db8e70861902","url":"https://github.com/grails/grails-core"},{"original_method":"/**\n     * Reset params by re-reading & initializing parameters from request\n     */\n    public void resetParams() {\n        params = new GrailsParameterMap(getCurrentRequest());\n    }","id":10907,"modified_method":"/**\n     * Reset params by re-reading & initializing parameters from request\n     */\n    public void resetParams() {\n        if(originalParams == null) {\n            originalParams = new GrailsParameterMap(getCurrentRequest());\n        }\n        params = (GrailsParameterMap)originalParams.clone();\n    }","commit_id":"d9cb13c84a02524054e56dd919d6db8e70861902","url":"https://github.com/grails/grails-core"},{"original_method":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    protected void copyParamsFromPreviousRequest(RequestAttributes previousRequestAttributes, GrailsWebRequest requestAttributes) {\n        if (!(previousRequestAttributes instanceof GrailsWebRequest)) {\n            return;\n        }\n\n        Map previousParams = ((GrailsWebRequest)previousRequestAttributes).getParams();\n        Map params =  requestAttributes.getParams();\n        for (Object o : previousParams.keySet()) {\n            String name = (String) o;\n            params.put(name, previousParams.get(name));\n        }\n    }","id":10908,"modified_method":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    protected void copyParamsFromPreviousRequest(RequestAttributes previousRequestAttributes, GrailsWebRequest requestAttributes) {\n        if (!(previousRequestAttributes instanceof GrailsWebRequest)) {\n            return;\n        }\n\n        requestAttributes.addParametersFrom(((GrailsWebRequest)previousRequestAttributes).getParams());\n    }","commit_id":"b0f37f1b82831c416bdb74ca89aebabf79729191","url":"https://github.com/grails/grails-core"},{"original_method":"public GrailsWebRequest(HttpServletRequest request, HttpServletResponse response, ServletContext servletContext, ApplicationContext applicationContext) {\n        this(request, response, servletContext);\n        this.applicationContext = applicationContext;\n    }","id":10909,"modified_method":"public GrailsWebRequest(HttpServletRequest request, HttpServletResponse response, ServletContext servletContext, ApplicationContext applicationContext) {\n        this(request, response, servletContext);\n        this.applicationContext = applicationContext;\n        initialize();\n    }","commit_id":"b0f37f1b82831c416bdb74ca89aebabf79729191","url":"https://github.com/grails/grails-core"},{"original_method":"/**\n     * Overriden to return the GrailsParameterMap instance,\n     *\n     * @return An instance of GrailsParameterMap\n     */\n    @Override\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public Map getParameterMap() {\n        if (params == null) {\n            params = new GrailsParameterMap(getCurrentRequest());\n        }\n        return params;\n    }","id":10910,"modified_method":"/**\n     * Overriden to return the GrailsParameterMap instance,\n     *\n     * @return An instance of GrailsParameterMap\n     */\n    @Override\n    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    public Map getParameterMap() {\n        if (params == null) {\n            resetParams();\n        }\n        return params;\n    }","commit_id":"b0f37f1b82831c416bdb74ca89aebabf79729191","url":"https://github.com/grails/grails-core"},{"original_method":"/**\n     * Reset params by re-reading & initializing parameters from request\n     */\n    public void resetParams() {\n        params = new GrailsParameterMap(getCurrentRequest());\n    }","id":10911,"modified_method":"/**\n     * Reset params by re-reading & initializing parameters from request\n     */\n    public void resetParams() {\n        params = (GrailsParameterMap)originalParams.clone();\n    }","commit_id":"b0f37f1b82831c416bdb74ca89aebabf79729191","url":"https://github.com/grails/grails-core"},{"original_method":"public GrailsWebRequest(HttpServletRequest request, HttpServletResponse response, GrailsApplicationAttributes attributes) {\n        super(request, response);\n        this.attributes = attributes;\n    }","id":10912,"modified_method":"public GrailsWebRequest(HttpServletRequest request, HttpServletResponse response, GrailsApplicationAttributes attributes) {\n        super(request, response);\n        this.attributes = attributes;\n        initialize();\n    }","commit_id":"b0f37f1b82831c416bdb74ca89aebabf79729191","url":"https://github.com/grails/grails-core"},{"original_method":"public GrailsWebRequest(HttpServletRequest request, HttpServletResponse response, ServletContext servletContext) {\n        super(request, response);\n        attributes = new DefaultGrailsApplicationAttributes(servletContext);\n    }","id":10913,"modified_method":"public GrailsWebRequest(HttpServletRequest request, HttpServletResponse response, ServletContext servletContext) {\n        super(request, response);\n        attributes = new DefaultGrailsApplicationAttributes(servletContext);\n        initialize();\n    }","commit_id":"b0f37f1b82831c416bdb74ca89aebabf79729191","url":"https://github.com/grails/grails-core"},{"original_method":"@Override\n    protected void doDispatch(final HttpServletRequest request, HttpServletResponse response) throws Exception {\n\n        request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, localeResolver);\n\n        HttpServletRequest processedRequest = request;\n        HandlerExecutionChain mappedHandler = null;\n        int interceptorIndex = -1;\n\n        // Expose current LocaleResolver and request as LocaleContext.\n        LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();\n        LocaleContextHolder.setLocaleContext(new LocaleContext() {\n            public Locale getLocale() {\n                return localeResolver.resolveLocale(request);\n            }\n        });\n\n        // If the request is an include we need to try to use the original wrapped sitemesh\n        // response, otherwise layouts won't work properly\n        if (WebUtils.isIncludeRequest(request)) {\n            response = useWrappedOrOriginalResponse(response);\n        }\n\n        GrailsWebRequest requestAttributes = null;\n        RequestAttributes previousRequestAttributes = null;\n        Exception handlerException = null;\n        boolean isAsyncRequest = processedRequest.getAttribute(\"javax.servlet.async.request_uri\") != null;\n        try {\n            ModelAndView mv;\n            boolean errorView = false;\n            try {\n                Object exceptionAttribute = request.getAttribute(EXCEPTION_ATTRIBUTE);\n                // only process multipart requests if an exception hasn't occured\n                if (exceptionAttribute == null) {\n                    processedRequest = checkMultipart(request);\n                }\n                // Expose current RequestAttributes to current thread.\n                previousRequestAttributes = RequestContextHolder.currentRequestAttributes();\n                requestAttributes = new GrailsWebRequest(processedRequest, response, getServletContext());\n                if( previousRequestAttributes != null) {\n                    copyParamsFromPreviousRequest(previousRequestAttributes, requestAttributes);\n                }\n\n                // Update the current web request.\n                WebUtils.storeGrailsWebRequest(requestAttributes);\n\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Bound request context to thread: \" + request);\n                    logger.debug(\"Using response object: \" + response.getClass());\n                }\n\n                // Determine handler for the current request.\n                mappedHandler = getHandler(processedRequest);\n                Object handler = mappedHandler.getHandler();\n                if (mappedHandler == null || handler == null) {\n                    noHandlerFound(processedRequest, response);\n                    return;\n                }\n\n                HandlerInterceptor[] interceptors = mappedHandler.getInterceptors();\n\n                // Apply preHandle methods of registered interceptors.\n                if (interceptors != null) {\n                    int i = 0;\n                    for (HandlerInterceptor interceptor : interceptors) {\n                        if (!interceptor.preHandle(processedRequest, response, handler)) {\n                            triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, null);\n                            return;\n                        }\n                        interceptorIndex = i;\n                        i++;\n                    }\n                }\n\n                // if this is an async request that has been resumed, then don't execute the action again instead try get the model and view and continue\n\n                if (isAsyncRequest) {\n                    Object modelAndViewO = processedRequest.getAttribute(GrailsApplicationAttributes.MODEL_AND_VIEW);\n                    if (modelAndViewO != null) {\n                        mv = (ModelAndView) modelAndViewO;\n                    }\n                    else {\n                        mv = null;\n                    }\n                }else {\n                    // Actually invoke the handler.\n                    HandlerAdapter ha = getHandlerAdapter(handler);\n                    mv = ha.handle(processedRequest, response, handler);\n                    // if an async request was started simply return\n                    if (processedRequest.getAttribute(GrailsApplicationAttributes.ASYNC_STARTED) != null) {\n                        processedRequest.setAttribute(GrailsApplicationAttributes.MODEL_AND_VIEW, mv);\n                        return;\n                    }\n\n                    // Do we need view name translation?\n                    if ((ha instanceof AnnotationMethodHandlerAdapter || ha instanceof RequestMappingHandlerAdapter) && mv != null && !mv.hasView()) {\n                        mv.setViewName(getDefaultViewName(request));\n                    }\n                }\n\n                // Apply postHandle methods of registered interceptors.\n                if (interceptors != null) {\n                    for (int i = interceptors.length - 1; i >= 0; i--) {\n                        interceptors[i].postHandle(processedRequest, response, handler, mv);\n                    }\n                }\n            }\n            catch (ModelAndViewDefiningException ex) {\n                handlerException = ex;\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"ModelAndViewDefiningException encountered\", ex);\n                }\n                mv = ex.getModelAndView();\n            }\n            catch (Exception ex) {\n                handlerException = ex;\n                Object handler = mappedHandler == null ? null : mappedHandler.getHandler();\n                mv = processHandlerException(request, response, handler, ex);\n                errorView = (mv != null);\n            }\n\n            // Did the handler return a view to render?\n            if (mv != null && !mv.wasCleared()) {\n                // If an exception occurs in here, like a bad closing tag,\n                // we have nothing to render.\n\n                try {\n                    render(mv, processedRequest, response);\n                    if (isAsyncRequest && (response instanceof GrailsContentBufferingResponse)) {\n                        GroovyPageLayoutFinder groovyPageLayoutFinder = getWebApplicationContext().getBean(\"groovyPageLayoutFinder\", GroovyPageLayoutFinder.class);\n                        GrailsContentBufferingResponse bufferingResponse = (GrailsContentBufferingResponse) response;\n                        HttpServletResponse targetResponse = bufferingResponse.getTargetResponse();\n                        Content content = bufferingResponse.getContent();\n                        if (content != null) {\n                            Decorator decorator = groovyPageLayoutFinder.findLayout(request, content);\n                            SiteMeshWebAppContext webAppContext = new SiteMeshWebAppContext(request, targetResponse, getServletContext());\n                            if (decorator != null) {\n                                if (decorator instanceof com.opensymphony.sitemesh.Decorator) {\n                                    ((com.opensymphony.sitemesh.Decorator)decorator).render(content, webAppContext);\n                                } else {\n                                    new OldDecorator2NewDecorator(decorator).render(content, webAppContext);\n                                }\n                            } else {\n                                content.writeOriginal(targetResponse.getWriter());\n                            }\n                        }\n                    }\n                    if (errorView) {\n                        WebUtils.clearErrorRequestAttributes(request);\n                    }\n                } catch (Exception e) {\n                    // Only render the error view if we're not already trying to render it.\n                    // This prevents a recursion if the error page itself has errors.\n                    if (request.getAttribute(GrailsApplicationAttributes.RENDERING_ERROR_ATTRIBUTE) == null) {\n                        request.setAttribute(GrailsApplicationAttributes.RENDERING_ERROR_ATTRIBUTE, Boolean.TRUE);\n\n                        mv = super.processHandlerException(processedRequest, response, mappedHandler, e);\n                        handlerException = e;\n                        if (mv != null) render(mv, processedRequest, response);\n                    }\n                    else {\n                        request.removeAttribute(GrailsApplicationAttributes.RENDERING_ERROR_ATTRIBUTE);\n                        logger.warn(\"Recursive rendering of error view detected.\", e);\n\n                        try {\n                            response.setContentType(\"text/plain\");\n                            response.getWriter().write(\"Internal server error\");\n                            response.flushBuffer();\n                        } catch (Exception e2) {\n                            logger.error(\"Internal server error - problem rendering error view\", e2);\n                        }\n\n                        requestAttributes.setRenderView(false);\n                        return;\n                    }\n                }\n            }\n            else {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Null ModelAndView returned to DispatcherServlet with name '\" +\n                            getServletName() + \"': assuming HandlerAdapter completed request handling\");\n                }\n            }\n\n            // Trigger after-completion for successful outcome.\n            triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, handlerException);\n        }\n        catch (Exception ex) {\n            // Trigger after-completion for thrown exception.\n            triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex);\n            throw ex;\n        }\n        catch (Error err) {\n            ServletException ex = new NestedServletException(\"Handler processing failed\", err);\n            // Trigger after-completion for thrown exception.\n            triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex);\n            throw ex;\n        }\n        finally {\n            // Clean up any resources used by a multipart request.\n            if (processedRequest instanceof MultipartHttpServletRequest) {\n                if (multipartResolver != null) {\n                    multipartResolver.cleanupMultipart((MultipartHttpServletRequest) processedRequest);\n                }\n            }\n            request.removeAttribute(MultipartHttpServletRequest.class.getName());\n\n            // Reset thread-bound holders\n            if (requestAttributes != null) {\n                requestAttributes.requestCompleted();\n                if (previousRequestAttributes instanceof GrailsWebRequest) {\n                    WebUtils.storeGrailsWebRequest((GrailsWebRequest) previousRequestAttributes);\n                }\n                else {\n                    RequestContextHolder.setRequestAttributes(previousRequestAttributes);\n                }\n            }\n\n            LocaleContextHolder.setLocaleContext(previousLocaleContext);\n\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Cleared thread-bound request context: \" + request);\n            }\n        }\n    }","id":10914,"modified_method":"@Override\n    protected void doDispatch(final HttpServletRequest request, HttpServletResponse response) throws Exception {\n\n        request.setAttribute(LOCALE_RESOLVER_ATTRIBUTE, localeResolver);\n\n        HttpServletRequest processedRequest = request;\n        HandlerExecutionChain mappedHandler = null;\n        int interceptorIndex = -1;\n\n        // Expose current LocaleResolver and request as LocaleContext.\n        LocaleContext previousLocaleContext = LocaleContextHolder.getLocaleContext();\n        LocaleContextHolder.setLocaleContext(new LocaleContext() {\n            public Locale getLocale() {\n                return localeResolver.resolveLocale(request);\n            }\n        });\n\n        // If the request is an include we need to try to use the original wrapped sitemesh\n        // response, otherwise layouts won't work properly\n        if (WebUtils.isIncludeRequest(request)) {\n            response = useWrappedOrOriginalResponse(response);\n        }\n\n        GrailsWebRequest requestAttributes = null;\n        RequestAttributes previousRequestAttributes = null;\n        Exception handlerException = null;\n        boolean isAsyncRequest = processedRequest.getAttribute(\"javax.servlet.async.request_uri\") != null;\n        try {\n            ModelAndView mv;\n            boolean errorView = false;\n            try {\n                Object exceptionAttribute = request.getAttribute(EXCEPTION_ATTRIBUTE);\n                // only process multipart requests if an exception hasn't occured\n                if (exceptionAttribute == null) {\n                    processedRequest = checkMultipart(request);\n                }\n                // Expose current RequestAttributes to current thread.\n                previousRequestAttributes = RequestContextHolder.currentRequestAttributes();\n                if(previousRequestAttributes instanceof GrailsWebRequest) {\n                    requestAttributes = new GrailsWebRequest(processedRequest, response, ((GrailsWebRequest)previousRequestAttributes).getAttributes());\n                } else {\n                    requestAttributes = new GrailsWebRequest(processedRequest, response, getServletContext());\n                }\n                if( previousRequestAttributes != null) {\n                    copyParamsFromPreviousRequest(previousRequestAttributes, requestAttributes);\n                }\n\n                // Update the current web request.\n                WebUtils.storeGrailsWebRequest(requestAttributes);\n\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Bound request context to thread: \" + request);\n                    logger.debug(\"Using response object: \" + response.getClass());\n                }\n\n                // Determine handler for the current request.\n                mappedHandler = getHandler(processedRequest);\n                Object handler = mappedHandler.getHandler();\n                if (mappedHandler == null || handler == null) {\n                    noHandlerFound(processedRequest, response);\n                    return;\n                }\n\n                HandlerInterceptor[] interceptors = mappedHandler.getInterceptors();\n\n                // Apply preHandle methods of registered interceptors.\n                if (interceptors != null) {\n                    int i = 0;\n                    for (HandlerInterceptor interceptor : interceptors) {\n                        if (!interceptor.preHandle(processedRequest, response, handler)) {\n                            triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, null);\n                            return;\n                        }\n                        interceptorIndex = i;\n                        i++;\n                    }\n                }\n\n                // if this is an async request that has been resumed, then don't execute the action again instead try get the model and view and continue\n\n                if (isAsyncRequest) {\n                    Object modelAndViewO = processedRequest.getAttribute(GrailsApplicationAttributes.MODEL_AND_VIEW);\n                    if (modelAndViewO != null) {\n                        mv = (ModelAndView) modelAndViewO;\n                    }\n                    else {\n                        mv = null;\n                    }\n                }else {\n                    // Actually invoke the handler.\n                    HandlerAdapter ha = getHandlerAdapter(handler);\n                    mv = ha.handle(processedRequest, response, handler);\n                    // if an async request was started simply return\n                    if (processedRequest.getAttribute(GrailsApplicationAttributes.ASYNC_STARTED) != null) {\n                        processedRequest.setAttribute(GrailsApplicationAttributes.MODEL_AND_VIEW, mv);\n                        return;\n                    }\n\n                    // Do we need view name translation?\n                    if ((ha instanceof AnnotationMethodHandlerAdapter || ha instanceof RequestMappingHandlerAdapter) && mv != null && !mv.hasView()) {\n                        mv.setViewName(getDefaultViewName(request));\n                    }\n                }\n\n                // Apply postHandle methods of registered interceptors.\n                if (interceptors != null) {\n                    for (int i = interceptors.length - 1; i >= 0; i--) {\n                        interceptors[i].postHandle(processedRequest, response, handler, mv);\n                    }\n                }\n            }\n            catch (ModelAndViewDefiningException ex) {\n                handlerException = ex;\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"ModelAndViewDefiningException encountered\", ex);\n                }\n                mv = ex.getModelAndView();\n            }\n            catch (Exception ex) {\n                handlerException = ex;\n                Object handler = mappedHandler == null ? null : mappedHandler.getHandler();\n                mv = processHandlerException(request, response, handler, ex);\n                errorView = (mv != null);\n            }\n\n            // Did the handler return a view to render?\n            if (mv != null && !mv.wasCleared()) {\n                // If an exception occurs in here, like a bad closing tag,\n                // we have nothing to render.\n\n                try {\n                    render(mv, processedRequest, response);\n                    if (isAsyncRequest && (response instanceof GrailsContentBufferingResponse)) {\n                        GroovyPageLayoutFinder groovyPageLayoutFinder = getWebApplicationContext().getBean(\"groovyPageLayoutFinder\", GroovyPageLayoutFinder.class);\n                        GrailsContentBufferingResponse bufferingResponse = (GrailsContentBufferingResponse) response;\n                        HttpServletResponse targetResponse = bufferingResponse.getTargetResponse();\n                        Content content = bufferingResponse.getContent();\n                        if (content != null) {\n                            Decorator decorator = groovyPageLayoutFinder.findLayout(request, content);\n                            SiteMeshWebAppContext webAppContext = new SiteMeshWebAppContext(request, targetResponse, getServletContext());\n                            if (decorator != null) {\n                                if (decorator instanceof com.opensymphony.sitemesh.Decorator) {\n                                    ((com.opensymphony.sitemesh.Decorator)decorator).render(content, webAppContext);\n                                } else {\n                                    new OldDecorator2NewDecorator(decorator).render(content, webAppContext);\n                                }\n                            } else {\n                                content.writeOriginal(targetResponse.getWriter());\n                            }\n                        }\n                    }\n                    if (errorView) {\n                        WebUtils.clearErrorRequestAttributes(request);\n                    }\n                } catch (Exception e) {\n                    // Only render the error view if we're not already trying to render it.\n                    // This prevents a recursion if the error page itself has errors.\n                    if (request.getAttribute(GrailsApplicationAttributes.RENDERING_ERROR_ATTRIBUTE) == null) {\n                        request.setAttribute(GrailsApplicationAttributes.RENDERING_ERROR_ATTRIBUTE, Boolean.TRUE);\n\n                        mv = super.processHandlerException(processedRequest, response, mappedHandler, e);\n                        handlerException = e;\n                        if (mv != null) render(mv, processedRequest, response);\n                    }\n                    else {\n                        request.removeAttribute(GrailsApplicationAttributes.RENDERING_ERROR_ATTRIBUTE);\n                        logger.warn(\"Recursive rendering of error view detected.\", e);\n\n                        try {\n                            response.setContentType(\"text/plain\");\n                            response.getWriter().write(\"Internal server error\");\n                            response.flushBuffer();\n                        } catch (Exception e2) {\n                            logger.error(\"Internal server error - problem rendering error view\", e2);\n                        }\n\n                        requestAttributes.setRenderView(false);\n                        return;\n                    }\n                }\n            }\n            else {\n                if (logger.isDebugEnabled()) {\n                    logger.debug(\"Null ModelAndView returned to DispatcherServlet with name '\" +\n                            getServletName() + \"': assuming HandlerAdapter completed request handling\");\n                }\n            }\n\n            // Trigger after-completion for successful outcome.\n            triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, handlerException);\n        }\n        catch (Exception ex) {\n            // Trigger after-completion for thrown exception.\n            triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex);\n            throw ex;\n        }\n        catch (Error err) {\n            ServletException ex = new NestedServletException(\"Handler processing failed\", err);\n            // Trigger after-completion for thrown exception.\n            triggerAfterCompletion(mappedHandler, interceptorIndex, processedRequest, response, ex);\n            throw ex;\n        }\n        finally {\n            // Clean up any resources used by a multipart request.\n            if (processedRequest instanceof MultipartHttpServletRequest) {\n                if (multipartResolver != null) {\n                    multipartResolver.cleanupMultipart((MultipartHttpServletRequest) processedRequest);\n                }\n            }\n            request.removeAttribute(MultipartHttpServletRequest.class.getName());\n\n            // Reset thread-bound holders\n            if (requestAttributes != null) {\n                requestAttributes.requestCompleted();\n                if (previousRequestAttributes instanceof GrailsWebRequest) {\n                    WebUtils.storeGrailsWebRequest((GrailsWebRequest) previousRequestAttributes);\n                }\n                else {\n                    RequestContextHolder.setRequestAttributes(previousRequestAttributes);\n                }\n            }\n\n            LocaleContextHolder.setLocaleContext(previousLocaleContext);\n\n            if (logger.isDebugEnabled()) {\n                logger.debug(\"Cleared thread-bound request context: \" + request);\n            }\n        }\n    }","commit_id":"4d41456aee5c10ce76d35ffbdd2e4c9c5373c499","url":"https://github.com/grails/grails-core"},{"original_method":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    protected void copyParamsFromPreviousRequest(RequestAttributes previousRequestAttributes, GrailsWebRequest requestAttributes) {\n        if (!(previousRequestAttributes instanceof GrailsWebRequest)) {\n            return;\n        }\n\n        Map previousParams = ((GrailsWebRequest)previousRequestAttributes).getParams();\n        Map params =  requestAttributes.getParams();\n        for (Object o : previousParams.keySet()) {\n            String name = (String) o;\n            params.put(name, previousParams.get(name));\n        }\n    }","id":10915,"modified_method":"@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n    protected void copyParamsFromPreviousRequest(RequestAttributes previousRequestAttributes, GrailsWebRequest requestAttributes) {\n        if (!(previousRequestAttributes instanceof GrailsWebRequest)) {\n            return;\n        }\n        requestAttributes.copyParamsFrom(((GrailsWebRequest)previousRequestAttributes).getParams());\n    }","commit_id":"4d41456aee5c10ce76d35ffbdd2e4c9c5373c499","url":"https://github.com/grails/grails-core"},{"original_method":"@Override\n    public Object clone() {\n        return new GrailsParameterMap(new LinkedHashMap(wrappedMap), request);\n    }","id":10916,"modified_method":"@Override\n    public Object clone() {\n        if(wrappedMap.size()==0) {\n            return new GrailsParameterMap(new LinkedHashMap(), request);\n        } else {\n            Map clonedMap = new LinkedHashMap(wrappedMap);\n            // deep clone nested entries\n            for(Iterator it=clonedMap.entrySet().iterator();it.hasNext();) {\n                Map.Entry entry = (Map.Entry)it.next();\n                if(entry.getValue() instanceof GrailsParameterMap) {\n                    entry.setValue(((GrailsParameterMap)entry.getValue()).clone());\n                }\n            }\n            return new GrailsParameterMap(clonedMap, request);\n        }\n    }","commit_id":"4d41456aee5c10ce76d35ffbdd2e4c9c5373c499","url":"https://github.com/grails/grails-core"},{"original_method":"public void forgetContactFingerprint(Contact contact)\r\n    {\r\n        if (contact == null)\r\n            return;\r\n\r\n        String id = getSessionNS(getSessionID(contact), \"publicKey.verified\");\r\n        if (id == null || id.length() < 1)\r\n            return; // TODO provide error handling.\r\n\r\n        OtrActivator.configService.removeProperty(id);\r\n\r\n    }","id":10917,"modified_method":"public void forgetContactFingerprint(Contact contact)\r\n    {\r\n        if (contact == null)\r\n            return;\r\n\r\n        this.configurator.removeProperty(getSessionID(contact) + \"publicKey.verified\");\r\n\r\n    }","commit_id":"e844ac803ff48640e81e806731b159c9c3131173","url":"https://github.com/jitsi/jitsi"},{"original_method":"private PublicKey loadPublicKey(String userID)\r\n    {\r\n        String idPubKey;\r\n        try\r\n        {\r\n            idPubKey =\r\n                \"net.java.sip.comunicator.plugin.otr.\"\r\n                    + URLEncoder.encode(userID, \"UTF-8\") + \".publicKey\";\r\n        }\r\n        catch (UnsupportedEncodingException e)\r\n        {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n\r\n        Object b64PubKey = OtrActivator.configService.getProperty(idPubKey);\r\n        if (b64PubKey == null)\r\n            return null;\r\n\r\n        X509EncodedKeySpec publicKeySpec =\r\n            new X509EncodedKeySpec(Base64.decode((String) b64PubKey));\r\n\r\n        // Generate KeyPair.\r\n        KeyFactory keyFactory;\r\n        try\r\n        {\r\n            keyFactory = KeyFactory.getInstance(\"DSA\");\r\n            return keyFactory.generatePublic(publicKeySpec);\r\n        }\r\n        catch (NoSuchAlgorithmException e)\r\n        {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n        catch (InvalidKeySpecException e)\r\n        {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }","id":10918,"modified_method":"private PublicKey loadPublicKey(String userID)\r\n    {\r\n        byte[] b64PubKey = this.configurator.getPropertyBytes(userID + \".publicKey\");\r\n        if (b64PubKey == null)\r\n            return null;\r\n\r\n        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(b64PubKey);\r\n\r\n        // Generate KeyPair.\r\n        KeyFactory keyFactory;\r\n        try\r\n        {\r\n            keyFactory = KeyFactory.getInstance(\"DSA\");\r\n            return keyFactory.generatePublic(publicKeySpec);\r\n        }\r\n        catch (NoSuchAlgorithmException e)\r\n        {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n        catch (InvalidKeySpecException e)\r\n        {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n    }","commit_id":"e844ac803ff48640e81e806731b159c9c3131173","url":"https://github.com/jitsi/jitsi"},{"original_method":"public void verifyContactFingerprint(Contact contact)\r\n    {\r\n        if (contact == null)\r\n            return;\r\n\r\n        String id = getSessionNS(getSessionID(contact), \"publicKey.verified\");\r\n        if (id == null || id.length() < 1)\r\n            return; // TODO provide error handling.\r\n\r\n        OtrActivator.configService.setProperty(id, true);\r\n    }","id":10919,"modified_method":"public void verifyContactFingerprint(Contact contact)\r\n    {\r\n        if (contact == null)\r\n            return;\r\n        \r\n        this.configurator.setProperty(getSessionID(contact) + \"publicKey.verified\", true);\r\n    }","commit_id":"e844ac803ff48640e81e806731b159c9c3131173","url":"https://github.com/jitsi/jitsi"},{"original_method":"private void savePublicKey(String userID, PublicKey pubKey)\r\n    {\r\n        String idPubKey;\r\n        try\r\n        {\r\n            idPubKey =\r\n                \"net.java.sip.comunicator.plugin.otr.\"\r\n                    + URLEncoder.encode(userID, \"UTF-8\") + \".publicKey\";\r\n        }\r\n        catch (UnsupportedEncodingException e)\r\n        {\r\n            e.printStackTrace();\r\n            return;\r\n        }\r\n        X509EncodedKeySpec x509EncodedKeySpec =\r\n            new X509EncodedKeySpec(pubKey.getEncoded());\r\n\r\n        OtrActivator.configService.setProperty(idPubKey, new String(Base64\r\n            .encode(x509EncodedKeySpec.getEncoded())));\r\n\r\n        OtrActivator.configService.removeProperty(idPubKey + \".verified\");\r\n    }","id":10920,"modified_method":"private void savePublicKey(String userID, PublicKey pubKey)\r\n    {\r\n        X509EncodedKeySpec x509EncodedKeySpec =\r\n            new X509EncodedKeySpec(pubKey.getEncoded());\r\n\r\n        this.configurator.setProperty(userID + \".publicKey\", x509EncodedKeySpec.getEncoded());\r\n\r\n        this.configurator.removeProperty(userID + \".publicKey.verified\");\r\n    }","commit_id":"e844ac803ff48640e81e806731b159c9c3131173","url":"https://github.com/jitsi/jitsi"},{"original_method":"public void setContactPolicy(Contact contact, OtrPolicy policy)\r\n    {\r\n        String id = getSessionNS(getSessionID(contact), \"policy\");\r\n        if (id == null || id.length() < 1)\r\n            return;\r\n\r\n        if (policy == null)\r\n            OtrActivator.configService.removeProperty(id);\r\n        else\r\n            OtrActivator.configService.setProperty(id, policy.getPolicy());\r\n\r\n        for (ScOtrEngineListener l : listeners)\r\n            l.contactPolicyChanged(contact);\r\n\r\n    }","id":10921,"modified_method":"public void setContactPolicy(Contact contact, OtrPolicy policy)\r\n    {\r\n    \tString propertyID = getSessionID(contact) + \"policy\";\r\n        if (policy == null)\r\n        \tthis.configurator.removeProperty(propertyID);\r\n        else\r\n        \tthis.configurator.setProperty(propertyID, policy.getPolicy());\r\n\r\n        for (ScOtrEngineListener l : listeners)\r\n            l.contactPolicyChanged(contact);\r\n\r\n    }","commit_id":"e844ac803ff48640e81e806731b159c9c3131173","url":"https://github.com/jitsi/jitsi"},{"original_method":"public OtrPolicy getGlobalPolicy()\r\n    {\r\n        return new OtrPolicyImpl(OtrActivator.configService.getInt(\r\n            \"net.java.sip.comunicator.plugin.otr.POLICY\",\r\n            OtrPolicy.OTRL_POLICY_DEFAULT));\r\n    }","id":10922,"modified_method":"public OtrPolicy getGlobalPolicy()\r\n    {\r\n        return new OtrPolicyImpl(this.configurator\r\n        \t\t.getPropertyInt(\"POLICY\", OtrPolicy.OTRL_POLICY_DEFAULT));\r\n    }","commit_id":"e844ac803ff48640e81e806731b159c9c3131173","url":"https://github.com/jitsi/jitsi"},{"original_method":"public OtrPolicy getContactPolicy(Contact contact)\r\n    {\r\n        String id = getSessionNS(getSessionID(contact), \"policy\");\r\n        if (id == null || id.length() < 1)\r\n            return getGlobalPolicy();\r\n\r\n        int policy = OtrActivator.configService.getInt(id, -1);\r\n        if (policy < 0)\r\n            return getGlobalPolicy();\r\n        else\r\n            return new OtrPolicyImpl(policy);\r\n    }","id":10923,"modified_method":"public OtrPolicy getContactPolicy(Contact contact)\r\n    {\r\n        int policy = this.configurator.getPropertyInt(getSessionID(contact) + \"policy\", -1);\r\n        if (policy < 0)\r\n            return getGlobalPolicy();\r\n        else\r\n            return new OtrPolicyImpl(policy);\r\n    }","commit_id":"e844ac803ff48640e81e806731b159c9c3131173","url":"https://github.com/jitsi/jitsi"},{"original_method":"private KeyPair loadKeyPair(String accountID)\r\n    {\r\n        // Load Private Key.\r\n        String idPrivKey;\r\n        try\r\n        {\r\n            idPrivKey =\r\n                \"net.java.sip.comunicator.plugin.otr.\"\r\n                    + URLEncoder.encode(accountID, \"UTF-8\") + \".privateKey\";\r\n        }\r\n        catch (UnsupportedEncodingException e1)\r\n        {\r\n            e1.printStackTrace();\r\n            return null;\r\n        }\r\n        Object b64PrivKey = OtrActivator.configService.getProperty(idPrivKey);\r\n        if (b64PrivKey == null)\r\n            return null;\r\n\r\n        PKCS8EncodedKeySpec privateKeySpec =\r\n            new PKCS8EncodedKeySpec(Base64.decode((String) b64PrivKey));\r\n\r\n        // Load Public Key.\r\n        String idPubKey;\r\n        try\r\n        {\r\n            idPubKey =\r\n                \"net.java.sip.comunicator.plugin.otr.\"\r\n                    + URLEncoder.encode(accountID, \"UTF-8\") + \".publicKey\";\r\n        }\r\n        catch (UnsupportedEncodingException e1)\r\n        {\r\n            e1.printStackTrace();\r\n            return null;\r\n        }\r\n        Object b64PubKey = OtrActivator.configService.getProperty(idPubKey);\r\n        if (b64PubKey == null)\r\n            return null;\r\n\r\n        X509EncodedKeySpec publicKeySpec =\r\n            new X509EncodedKeySpec(Base64.decode((String) b64PubKey));\r\n\r\n        PublicKey publicKey;\r\n        PrivateKey privateKey;\r\n\r\n        // Generate KeyPair.\r\n        KeyFactory keyFactory;\r\n        try\r\n        {\r\n            keyFactory = KeyFactory.getInstance(\"DSA\");\r\n            publicKey = keyFactory.generatePublic(publicKeySpec);\r\n            privateKey = keyFactory.generatePrivate(privateKeySpec);\r\n        }\r\n        catch (NoSuchAlgorithmException e)\r\n        {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n        catch (InvalidKeySpecException e)\r\n        {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n\r\n        return new KeyPair(publicKey, privateKey);\r\n    }","id":10924,"modified_method":"private KeyPair loadKeyPair(String accountID)\r\n    {\r\n        // Load Private Key.\r\n        byte[] b64PrivKey = this.configurator.getPropertyBytes(accountID + \".privateKey\");\r\n        if (b64PrivKey == null)\r\n            return null;\r\n\r\n        PKCS8EncodedKeySpec privateKeySpec = new PKCS8EncodedKeySpec(b64PrivKey);\r\n\r\n        // Load Public Key.\r\n        byte[] b64PubKey = this.configurator.getPropertyBytes(accountID + \".publicKey\");\r\n        if (b64PubKey == null)\r\n            return null;\r\n\r\n        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(b64PubKey);\r\n\r\n        PublicKey publicKey;\r\n        PrivateKey privateKey;\r\n\r\n        // Generate KeyPair.\r\n        KeyFactory keyFactory;\r\n        try\r\n        {\r\n            keyFactory = KeyFactory.getInstance(\"DSA\");\r\n            publicKey = keyFactory.generatePublic(publicKeySpec);\r\n            privateKey = keyFactory.generatePrivate(privateKeySpec);\r\n        }\r\n        catch (NoSuchAlgorithmException e)\r\n        {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n        catch (InvalidKeySpecException e)\r\n        {\r\n            e.printStackTrace();\r\n            return null;\r\n        }\r\n\r\n        return new KeyPair(publicKey, privateKey);\r\n    }","commit_id":"e844ac803ff48640e81e806731b159c9c3131173","url":"https://github.com/jitsi/jitsi"},{"original_method":"public void setGlobalPolicy(OtrPolicy policy)\r\n    {\r\n        if (policy == null)\r\n            OtrActivator.configService\r\n                .removeProperty(\"net.java.sip.comunicator.plugin.otr.POLICY\");\r\n        else\r\n            OtrActivator.configService.setProperty(\r\n                \"net.java.sip.comunicator.plugin.otr.POLICY\", policy\r\n                    .getPolicy());\r\n\r\n        for (ScOtrEngineListener l : listeners)\r\n            l.globalPolicyChanged();\r\n    }","id":10925,"modified_method":"public void setGlobalPolicy(OtrPolicy policy)\r\n    {\r\n        if (policy == null)\r\n            this.configurator.removeProperty(\"POLICY\");\r\n        else\r\n            this.configurator.setProperty(\"POLICY\", policy.getPolicy());\r\n\r\n        for (ScOtrEngineListener l : listeners)\r\n            l.globalPolicyChanged();\r\n    }","commit_id":"e844ac803ff48640e81e806731b159c9c3131173","url":"https://github.com/jitsi/jitsi"},{"original_method":"public boolean isContactVerified(Contact contact)\r\n    {\r\n        String id = getSessionNS(getSessionID(contact), \"publicKey.verified\");\r\n        if (id == null || id.length() < 1)\r\n            return false;\r\n\r\n        return OtrActivator.configService.getBoolean(id, false);\r\n    }","id":10926,"modified_method":"public boolean isContactVerified(Contact contact)\r\n    {\r\n        return this.configurator.getPropertyBoolean(getSessionID(contact) + \"publicKey.verified\", false);\r\n    }","commit_id":"e844ac803ff48640e81e806731b159c9c3131173","url":"https://github.com/jitsi/jitsi"},{"original_method":"public void generateKeyPair(String accountID)\r\n    {\r\n        KeyPair keyPair;\r\n        try\r\n        {\r\n            keyPair = KeyPairGenerator.getInstance(\"DSA\").genKeyPair();\r\n        }\r\n        catch (NoSuchAlgorithmException e)\r\n        {\r\n            e.printStackTrace();\r\n            return;\r\n        }\r\n\r\n        // Store Public Key.\r\n        String idPubKey;\r\n        try\r\n        {\r\n            idPubKey =\r\n                \"net.java.sip.comunicator.plugin.otr.\"\r\n                    + URLEncoder.encode(accountID, \"UTF-8\") + \".publicKey\";\r\n        }\r\n        catch (UnsupportedEncodingException e1)\r\n        {\r\n            e1.printStackTrace();\r\n            return;\r\n        }\r\n        PublicKey pubKey = keyPair.getPublic();\r\n        X509EncodedKeySpec x509EncodedKeySpec =\r\n            new X509EncodedKeySpec(pubKey.getEncoded());\r\n        OtrActivator.configService.setProperty(idPubKey, new String(Base64\r\n            .encode(x509EncodedKeySpec.getEncoded())));\r\n\r\n        // Store Private Key.\r\n        String idPrivKey;\r\n        try\r\n        {\r\n            idPrivKey =\r\n                \"net.java.sip.comunicator.plugin.otr.\"\r\n                    + URLEncoder.encode(accountID, \"UTF-8\") + \".privateKey\";\r\n        }\r\n        catch (UnsupportedEncodingException e1)\r\n        {\r\n            e1.printStackTrace();\r\n            return;\r\n        }\r\n\r\n        PrivateKey privKey = keyPair.getPrivate();\r\n        PKCS8EncodedKeySpec pkcs8EncodedKeySpec =\r\n            new PKCS8EncodedKeySpec(privKey.getEncoded());\r\n        OtrActivator.configService.setProperty(idPrivKey, new String(Base64\r\n            .encode(pkcs8EncodedKeySpec.getEncoded())));\r\n    }","id":10927,"modified_method":"public void generateKeyPair(String accountID)\r\n    {\r\n        KeyPair keyPair;\r\n        try\r\n        {\r\n            keyPair = KeyPairGenerator.getInstance(\"DSA\").genKeyPair();\r\n        }\r\n        catch (NoSuchAlgorithmException e)\r\n        {\r\n            e.printStackTrace();\r\n            return;\r\n        }\r\n\r\n        // Store Public Key.\r\n        PublicKey pubKey = keyPair.getPublic();\r\n        X509EncodedKeySpec x509EncodedKeySpec =\r\n            new X509EncodedKeySpec(pubKey.getEncoded());\r\n        \r\n        this.configurator.setProperty(accountID + \".publicKey\", x509EncodedKeySpec.getEncoded());\r\n\r\n        // Store Private Key.\r\n        PrivateKey privKey = keyPair.getPrivate();\r\n        PKCS8EncodedKeySpec pkcs8EncodedKeySpec =\r\n            new PKCS8EncodedKeySpec(privKey.getEncoded());\r\n        \r\n        this.configurator.setProperty(accountID + \".privateKey\", pkcs8EncodedKeySpec.getEncoded());\r\n    }","commit_id":"e844ac803ff48640e81e806731b159c9c3131173","url":"https://github.com/jitsi/jitsi"},{"original_method":"private void startLevel1Container(ServletContext servletContext) {\n    level1Container = new ComponentContainer();\n    level1Container.addSingleton(this);\n    level1Container.addSingleton(servletContext);\n    level1Container.addSingleton(new BaseConfiguration());\n    level1Container.addSingleton(ServerSettings.class);\n    level1Container.addSingleton(ServerImpl.class);\n    level1Container.addSingleton(Logback.class);\n    level1Container.addSingleton(Profiling.class);\n    level1Container.addSingleton(JRubyProfiling.class);\n    level1Container.addSingleton(EmbeddedDatabaseFactory.class);\n    level1Container.addSingleton(DefaultDatabase.class);\n    level1Container.addSingleton(MyBatis.class);\n    level1Container.addSingleton(DefaultServerUpgradeStatus.class);\n    level1Container.addSingleton(DatabaseServerCompatibility.class);\n    for (Class<? extends DatabaseMigration> migrationClass : DatabaseMigrations.CLASSES) {\n      level1Container.addSingleton(migrationClass);\n    }\n    level1Container.addSingleton(DatabaseMigrator.class);\n    level1Container.addSingleton(DatabaseVersion.class);\n    for (Class daoClass : DaoUtils.getDaoClasses()) {\n      level1Container.addSingleton(daoClass);\n    }\n    level1Container.addComponent(RulesDao.class, false);\n    level1Container.addComponent(MeasuresDao.class, false);\n    level1Container.addComponent(ProfilesDao.class, false);\n    level1Container.addSingleton(PurgeProfiler.class);\n    level1Container.addSingleton(PluginDeployer.class);\n    level1Container.addSingleton(ServerPluginInstaller.class);\n    level1Container.addSingleton(InstalledPluginReferentialFactory.class);\n    level1Container.addSingleton(DefaultServerPluginRepository.class);\n    level1Container.addSingleton(DefaultServerFileSystem.class);\n    level1Container.addSingleton(ApplicationDeployer.class);\n    level1Container.addSingleton(JRubyI18n.class);\n    level1Container.addSingleton(DefaultI18n.class);\n    level1Container.addSingleton(RuleI18nManager.class);\n    level1Container.addSingleton(GwtI18n.class);\n    level1Container.addSingleton(Durations.class);\n    level1Container.addSingleton(PreviewDatabaseFactory.class);\n    level1Container.addSingleton(SemaphoreUpdater.class);\n    level1Container.addSingleton(SemaphoresImpl.class);\n    level1Container.addPicoAdapter(new TempFolderProvider());\n    level1Container.addSingleton(TempFolderCleaner.class);\n    level1Container.startComponents();\n  }","id":10928,"modified_method":"private void startLevel1Container(ServletContext servletContext) {\n    level1Container = new ComponentContainer();\n    level1Container.addSingleton(this);\n    level1Container.addSingleton(servletContext);\n    level1Container.addSingleton(new BaseConfiguration());\n    level1Container.addSingleton(ServerSettings.class);\n    level1Container.addSingleton(ServerImpl.class);\n    level1Container.addSingleton(Logback.class);\n    level1Container.addSingleton(Profiling.class);\n    level1Container.addSingleton(JRubyProfiling.class);\n    level1Container.addSingleton(EmbeddedDatabaseFactory.class);\n    level1Container.addSingleton(DefaultDatabase.class);\n    level1Container.addSingleton(MyBatis.class);\n    level1Container.addSingleton(DefaultServerUpgradeStatus.class);\n    level1Container.addSingleton(DatabaseServerCompatibility.class);\n    for (Class<? extends DatabaseMigration> migrationClass : DatabaseMigrations.CLASSES) {\n      level1Container.addSingleton(migrationClass);\n    }\n    level1Container.addSingleton(DatabaseMigrator.class);\n    level1Container.addSingleton(DatabaseVersion.class);\n    for (Class daoClass : DaoUtils.getDaoClasses()) {\n      level1Container.addSingleton(daoClass);\n    }\n    level1Container.addSingleton(PurgeProfiler.class);\n    level1Container.addSingleton(PluginDeployer.class);\n    level1Container.addSingleton(ServerPluginInstaller.class);\n    level1Container.addSingleton(InstalledPluginReferentialFactory.class);\n    level1Container.addSingleton(DefaultServerPluginRepository.class);\n    level1Container.addSingleton(DefaultServerFileSystem.class);\n    level1Container.addSingleton(ApplicationDeployer.class);\n    level1Container.addSingleton(JRubyI18n.class);\n    level1Container.addSingleton(DefaultI18n.class);\n    level1Container.addSingleton(RuleI18nManager.class);\n    level1Container.addSingleton(GwtI18n.class);\n    level1Container.addSingleton(Durations.class);\n    level1Container.addSingleton(PreviewDatabaseFactory.class);\n    level1Container.addSingleton(SemaphoreUpdater.class);\n    level1Container.addSingleton(SemaphoresImpl.class);\n    level1Container.addPicoAdapter(new TempFolderProvider());\n    level1Container.addSingleton(TempFolderCleaner.class);\n    level1Container.startComponents();\n  }","commit_id":"563ad6f6c0f1b90bdfbb28a74dbf95f107c793ff","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n   * Components listed here are never restarted\n   */\n  private void startLevel2Container() {\n    level2Container = level1Container.createChild();\n    level2Container.addSingleton(PersistentSettings.class);\n    level2Container.addSingleton(DefaultDatabaseConnector.class);\n    level2Container.addSingleton(ServerExtensionInstaller.class);\n    level2Container.addSingleton(ThreadLocalDatabaseSessionFactory.class);\n    level2Container.addPicoAdapter(new DatabaseSessionProvider());\n    level2Container.addSingleton(ServerMetadataPersister.class);\n    level2Container.addSingleton(ESNode.class);\n    level2Container.addSingleton(HttpDownloader.class);\n    level2Container.addSingleton(UriReader.class);\n    level2Container.addSingleton(ServerIdGenerator.class);\n\n    // quality profile\n    level2Container.addSingleton(XMLProfileParser.class);\n    level2Container.addSingleton(XMLProfileSerializer.class);\n\n    // rule\n    level2Container.addSingleton(AnnotationRuleParser.class);\n    level2Container.addSingleton(XMLRuleParser.class);\n\n    // ws\n    level2Container.addSingleton(RestartHandler.class);\n    level2Container.addSingleton(PlatformWs.class);\n\n    level2Container.startComponents();\n\n    restartLevel3Container();\n  }","id":10929,"modified_method":"/**\n   * Components listed here are never restarted\n   */\n  private void startLevel2Container() {\n    level2Container = level1Container.createChild();\n    level2Container.addSingleton(PersistentSettings.class);\n    level2Container.addSingleton(DefaultDatabaseConnector.class);\n    level2Container.addSingleton(ServerExtensionInstaller.class);\n    level2Container.addSingleton(ThreadLocalDatabaseSessionFactory.class);\n    level2Container.addPicoAdapter(new DatabaseSessionProvider());\n    level2Container.addSingleton(ServerMetadataPersister.class);\n    level2Container.addSingleton(ESNode.class);\n    level2Container.addSingleton(HttpDownloader.class);\n    level2Container.addSingleton(UriReader.class);\n    level2Container.addSingleton(ServerIdGenerator.class);\n\n    // ws\n    level2Container.addSingleton(RestartHandler.class);\n    level2Container.addSingleton(PlatformWs.class);\n\n    level2Container.startComponents();\n\n    restartLevel3Container();\n  }","commit_id":"563ad6f6c0f1b90bdfbb28a74dbf95f107c793ff","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void registerComponents(ComponentContainer pico) {\n    pico.addSingleton(ESIndex.class);\n    pico.addSingleton(UpdateCenterClient.class);\n    pico.addSingleton(UpdateCenterMatrixFactory.class);\n    pico.addSingleton(PluginDownloader.class);\n    pico.addSingleton(ChartFactory.class);\n    pico.addSingleton(Languages.class);\n    pico.addSingleton(Views.class);\n    pico.addSingleton(CodeColorizers.class);\n    pico.addComponent(ProfilesManager.class, false);\n    pico.addSingleton(SecurityRealmFactory.class);\n    pico.addSingleton(ServerLifecycleNotifier.class);\n    pico.addSingleton(AnnotationProfileParser.class);\n    pico.addSingleton(DefaultRuleFinder.class);\n    pico.addSingleton(DefaultMetricFinder.class);\n    pico.addSingleton(ResourceTypes.class);\n    pico.addSingleton(SettingsChangeNotifier.class);\n    pico.addSingleton(PageDecorations.class);\n    pico.addSingleton(MeasureFilterFactory.class);\n    pico.addSingleton(MeasureFilterExecutor.class);\n    pico.addSingleton(MeasureFilterEngine.class);\n    pico.addSingleton(PreviewCache.class);\n    pico.addSingleton(DefaultResourcePermissions.class);\n    pico.addSingleton(Periods.class);\n\n    // web services\n    pico.addSingleton(WebServiceEngine.class);\n    pico.addSingleton(ListingWs.class);\n\n    // quality profiles\n    pico.addSingleton(QProfileRuleLookup.class);\n    pico.addSingleton(QProfiles.class);\n    pico.addSingleton(QProfileLookup.class);\n    pico.addSingleton(QProfileOperations.class);\n    pico.addSingleton(QProfileActiveRuleOperations.class);\n    pico.addSingleton(QProfileProjectOperations.class);\n    pico.addSingleton(QProfileProjectLookup.class);\n    pico.addSingleton(QProfileBackup.class);\n    pico.addSingleton(QProfileRepositoryExporter.class);\n    pico.addSingleton(ESActiveRule.class);\n\n    // quality gates\n    pico.addSingleton(QualityGateDao.class);\n    pico.addSingleton(QualityGateConditionDao.class);\n    pico.addSingleton(QualityGates.class);\n    pico.addSingleton(ProjectQgateAssociationDao.class);\n    pico.addSingleton(QgateProjectFinder.class);\n    pico.addSingleton(QgateAppHandler.class);\n    pico.addSingleton(QualityGatesWs.class);\n\n    // users\n    pico.addSingleton(HibernateUserFinder.class);\n    pico.addSingleton(NewUserNotifier.class);\n    pico.addSingleton(DefaultUserFinder.class);\n    pico.addSingleton(DefaultUserService.class);\n\n    // groups\n    pico.addSingleton(GroupMembershipService.class);\n    pico.addSingleton(GroupMembershipFinder.class);\n\n    // permissions\n    pico.addSingleton(PermissionFacade.class);\n    pico.addSingleton(InternalPermissionService.class);\n    pico.addSingleton(InternalPermissionTemplateService.class);\n    pico.addSingleton(PermissionFinder.class);\n\n    // components\n    pico.addSingleton(DefaultComponentFinder.class);\n    pico.addSingleton(DefaultRubyComponentService.class);\n    pico.addSingleton(ComponentDao.class);\n\n    // issues\n    pico.addSingleton(ServerIssueStorage.class);\n    pico.addSingleton(IssueUpdater.class);\n    pico.addSingleton(FunctionExecutor.class);\n    pico.addSingleton(IssueWorkflow.class);\n    pico.addSingleton(IssueService.class);\n    pico.addSingleton(IssueCommentService.class);\n    pico.addSingleton(DefaultIssueFinder.class);\n    pico.addSingleton(IssueStatsFinder.class);\n    pico.addSingleton(PublicRubyIssueService.class);\n    pico.addSingleton(InternalRubyIssueService.class);\n    pico.addSingleton(ActionPlanService.class);\n    pico.addSingleton(IssueChangelogService.class);\n    pico.addSingleton(IssueNotifications.class);\n    pico.addSingleton(ActionService.class);\n    pico.addSingleton(Actions.class);\n    pico.addSingleton(IssueFilterSerializer.class);\n    pico.addSingleton(IssueFilterService.class);\n    pico.addSingleton(IssueBulkChangeService.class);\n    pico.addSingleton(IssueChangelogFormatter.class);\n    pico.addSingleton(IssueFilterWs.class);\n    pico.addSingleton(IssueShowWsHandler.class);\n    pico.addSingleton(IssuesWs.class);\n\n    // issues actions\n    pico.addSingleton(AssignAction.class);\n    pico.addSingleton(PlanAction.class);\n    pico.addSingleton(SetSeverityAction.class);\n    pico.addSingleton(CommentAction.class);\n    pico.addSingleton(TransitionAction.class);\n\n    // rules\n    pico.addSingleton(Rules.class);\n    pico.addSingleton(RuleOperations.class);\n    pico.addSingleton(RuleRegistry.class);\n    pico.addSingleton(RubyRuleService.class);\n    pico.addSingleton(RuleRepositories.class);\n    pico.addSingleton(RulesWs.class);\n    pico.addSingleton(RuleShowWsHandler.class);\n    pico.addSingleton(RuleSearchWsHandler.class);\n    pico.addSingleton(AddTagsWsHandler.class);\n    pico.addSingleton(RemoveTagsWsHandler.class);\n\n    // rule tags\n    pico.addSingleton(ESRuleTags.class);\n    pico.addSingleton(RuleTagLookup.class);\n    pico.addSingleton(RuleTagOperations.class);\n    pico.addSingleton(RuleTags.class);\n    pico.addSingleton(RuleTagsWs.class);\n\n    // technical debt\n    pico.addSingleton(DebtService.class);\n    pico.addSingleton(TechnicalDebtModelSynchronizer.class);\n    pico.addSingleton(DebtModelSynchronizer.class);\n    pico.addSingleton(TechnicalDebtModelRepository.class);\n    pico.addSingleton(TechnicalDebtXMLImporter.class);\n    pico.addSingleton(DebtRulesXMLImporter.class);\n    pico.addSingleton(DebtCharacteristicsXMLImporter.class);\n    pico.addSingleton(DefaultTechnicalDebtManager.class);\n\n    // source\n    pico.addSingleton(HtmlSourceDecorator.class);\n    pico.addSingleton(DeprecatedSourceDecorator.class);\n    pico.addSingleton(SourceService.class);\n    pico.addSingleton(SourcesWs.class);\n    pico.addSingleton(SourcesShowWsHandler.class);\n\n    // text\n    pico.addSingleton(MacroInterpreter.class);\n    pico.addSingleton(RubyTextService.class);\n\n    // Notifications\n    pico.addSingleton(EmailSettings.class);\n    pico.addSingleton(NotificationService.class);\n    pico.addSingleton(NotificationCenter.class);\n    pico.addSingleton(DefaultNotificationManager.class);\n\n    // graphs and perspective related classes\n    pico.addSingleton(TestablePerspectiveLoader.class);\n    pico.addSingleton(TestPlanPerspectiveLoader.class);\n    pico.addSingleton(SnapshotPerspectives.class);\n\n    // Type validation\n    pico.addSingleton(TypeValidations.class);\n    pico.addSingleton(IntegerTypeValidation.class);\n    pico.addSingleton(FloatTypeValidation.class);\n    pico.addSingleton(BooleanTypeValidation.class);\n    pico.addSingleton(TextTypeValidation.class);\n    pico.addSingleton(StringTypeValidation.class);\n    pico.addSingleton(StringListTypeValidation.class);\n\n    ServerExtensionInstaller extensionRegistrar = pico.getComponentByType(ServerExtensionInstaller.class);\n    extensionRegistrar.registerExtensions(pico);\n  }","id":10930,"modified_method":"private void registerComponents(ComponentContainer pico) {\n    pico.addSingleton(ESIndex.class);\n    pico.addSingleton(UpdateCenterClient.class);\n    pico.addSingleton(UpdateCenterMatrixFactory.class);\n    pico.addSingleton(PluginDownloader.class);\n    pico.addSingleton(ChartFactory.class);\n    pico.addSingleton(Languages.class);\n    pico.addSingleton(Views.class);\n    pico.addSingleton(CodeColorizers.class);\n    pico.addSingleton(ResourceTypes.class);\n    pico.addSingleton(SettingsChangeNotifier.class);\n    pico.addSingleton(PageDecorations.class);\n    pico.addSingleton(PreviewCache.class);\n    pico.addSingleton(DefaultResourcePermissions.class);\n    pico.addSingleton(Periods.class);\n\n    // quality profile\n    pico.addSingleton(XMLProfileParser.class);\n    pico.addSingleton(XMLProfileSerializer.class);\n    pico.addComponent(ProfilesDao.class, false);\n    pico.addComponent(ProfilesManager.class, false);\n    pico.addSingleton(AnnotationProfileParser.class);\n    pico.addSingleton(QProfileRuleLookup.class);\n    pico.addSingleton(QProfiles.class);\n    pico.addSingleton(QProfileLookup.class);\n    pico.addSingleton(QProfileOperations.class);\n    pico.addSingleton(QProfileActiveRuleOperations.class);\n    pico.addSingleton(QProfileProjectOperations.class);\n    pico.addSingleton(QProfileProjectLookup.class);\n    pico.addSingleton(QProfileBackup.class);\n    pico.addSingleton(QProfileRepositoryExporter.class);\n    pico.addSingleton(ESActiveRule.class);\n\n    // rule\n    pico.addSingleton(AnnotationRuleParser.class);\n    pico.addSingleton(XMLRuleParser.class);\n    pico.addComponent(RulesDao.class, false);\n    pico.addSingleton(DefaultRuleFinder.class);\n    pico.addSingleton(Rules.class);\n    pico.addSingleton(RuleOperations.class);\n    pico.addSingleton(RuleRegistry.class);\n    pico.addSingleton(RubyRuleService.class);\n    pico.addSingleton(RuleRepositories.class);\n    pico.addSingleton(RulesWs.class);\n    pico.addSingleton(RuleShowWsHandler.class);\n    pico.addSingleton(RuleSearchWsHandler.class);\n    pico.addSingleton(AddTagsWsHandler.class);\n    pico.addSingleton(RemoveTagsWsHandler.class);\n\n    // rule tags\n    pico.addSingleton(ESRuleTags.class);\n    pico.addSingleton(RuleTagLookup.class);\n    pico.addSingleton(RuleTagOperations.class);\n    pico.addSingleton(RuleTags.class);\n    pico.addSingleton(RuleTagsWs.class);\n\n    // measure\n    pico.addComponent(MeasuresDao.class, false);\n    pico.addSingleton(MeasureFilterFactory.class);\n    pico.addSingleton(MeasureFilterExecutor.class);\n    pico.addSingleton(MeasureFilterEngine.class);\n    pico.addSingleton(DefaultMetricFinder.class);\n    pico.addSingleton(ServerLifecycleNotifier.class);\n\n    // quality gates\n    pico.addSingleton(QualityGateDao.class);\n    pico.addSingleton(QualityGateConditionDao.class);\n    pico.addSingleton(QualityGates.class);\n    pico.addSingleton(ProjectQgateAssociationDao.class);\n    pico.addSingleton(QgateProjectFinder.class);\n    pico.addSingleton(QgateAppHandler.class);\n    pico.addSingleton(QualityGatesWs.class);\n\n    // web services\n    pico.addSingleton(WebServiceEngine.class);\n    pico.addSingleton(ListingWs.class);\n\n    // users\n    pico.addSingleton(SecurityRealmFactory.class);\n    pico.addSingleton(HibernateUserFinder.class);\n    pico.addSingleton(NewUserNotifier.class);\n    pico.addSingleton(DefaultUserFinder.class);\n    pico.addSingleton(DefaultUserService.class);\n\n    // groups\n    pico.addSingleton(GroupMembershipService.class);\n    pico.addSingleton(GroupMembershipFinder.class);\n\n    // permissions\n    pico.addSingleton(PermissionFacade.class);\n    pico.addSingleton(InternalPermissionService.class);\n    pico.addSingleton(InternalPermissionTemplateService.class);\n    pico.addSingleton(PermissionFinder.class);\n\n    // components\n    pico.addSingleton(DefaultComponentFinder.class);\n    pico.addSingleton(DefaultRubyComponentService.class);\n    pico.addSingleton(ComponentDao.class);\n\n    // issues\n    pico.addSingleton(ServerIssueStorage.class);\n    pico.addSingleton(IssueUpdater.class);\n    pico.addSingleton(FunctionExecutor.class);\n    pico.addSingleton(IssueWorkflow.class);\n    pico.addSingleton(IssueService.class);\n    pico.addSingleton(IssueCommentService.class);\n    pico.addSingleton(DefaultIssueFinder.class);\n    pico.addSingleton(IssueStatsFinder.class);\n    pico.addSingleton(PublicRubyIssueService.class);\n    pico.addSingleton(InternalRubyIssueService.class);\n    pico.addSingleton(ActionPlanService.class);\n    pico.addSingleton(IssueChangelogService.class);\n    pico.addSingleton(IssueNotifications.class);\n    pico.addSingleton(ActionService.class);\n    pico.addSingleton(Actions.class);\n    pico.addSingleton(IssueFilterSerializer.class);\n    pico.addSingleton(IssueFilterService.class);\n    pico.addSingleton(IssueBulkChangeService.class);\n    pico.addSingleton(IssueChangelogFormatter.class);\n    pico.addSingleton(IssueFilterWs.class);\n    pico.addSingleton(IssueShowWsHandler.class);\n    pico.addSingleton(IssuesWs.class);\n\n    // issues actions\n    pico.addSingleton(AssignAction.class);\n    pico.addSingleton(PlanAction.class);\n    pico.addSingleton(SetSeverityAction.class);\n    pico.addSingleton(CommentAction.class);\n    pico.addSingleton(TransitionAction.class);\n\n    // technical debt\n    pico.addSingleton(DebtService.class);\n    pico.addSingleton(TechnicalDebtModelSynchronizer.class);\n    pico.addSingleton(DebtModelSynchronizer.class);\n    pico.addSingleton(TechnicalDebtModelRepository.class);\n    pico.addSingleton(TechnicalDebtXMLImporter.class);\n    pico.addSingleton(DebtRulesXMLImporter.class);\n    pico.addSingleton(DebtCharacteristicsXMLImporter.class);\n    pico.addSingleton(DefaultTechnicalDebtManager.class);\n\n    // source\n    pico.addSingleton(HtmlSourceDecorator.class);\n    pico.addSingleton(DeprecatedSourceDecorator.class);\n    pico.addSingleton(SourceService.class);\n    pico.addSingleton(SourcesWs.class);\n    pico.addSingleton(SourcesShowWsHandler.class);\n\n    // text\n    pico.addSingleton(MacroInterpreter.class);\n    pico.addSingleton(RubyTextService.class);\n\n    // Notifications\n    pico.addSingleton(EmailSettings.class);\n    pico.addSingleton(NotificationService.class);\n    pico.addSingleton(NotificationCenter.class);\n    pico.addSingleton(DefaultNotificationManager.class);\n\n    // graphs and perspective related classes\n    pico.addSingleton(TestablePerspectiveLoader.class);\n    pico.addSingleton(TestPlanPerspectiveLoader.class);\n    pico.addSingleton(SnapshotPerspectives.class);\n\n    // Type validation\n    pico.addSingleton(TypeValidations.class);\n    pico.addSingleton(IntegerTypeValidation.class);\n    pico.addSingleton(FloatTypeValidation.class);\n    pico.addSingleton(BooleanTypeValidation.class);\n    pico.addSingleton(TextTypeValidation.class);\n    pico.addSingleton(StringTypeValidation.class);\n    pico.addSingleton(StringListTypeValidation.class);\n\n    ServerExtensionInstaller extensionRegistrar = pico.getComponentByType(ServerExtensionInstaller.class);\n    extensionRegistrar.registerExtensions(pico);\n  }","commit_id":"563ad6f6c0f1b90bdfbb28a74dbf95f107c793ff","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"/**\n     * Creates a query string of the format \"key1=value1&amp;key2=value2\" for\n     * each parameter in the given <code>HttpServletRequest<\/code> and key in\n     * given <code>Map<\/code> that is not listed in the ignore list.\n     * \n     * @param request\n     *            the <code>HttpServletRequest<\/code> to read the parameters\n     *            from\n     * @param additions\n     *            a mapping of strings to strings or string arrays to be\n     *            included in the query string\n     * @param ignores\n     *            the list of parameters and map entries not to include\n     * @return A string in the <em>x-www-form-urlencoded<\/em> format that is\n     *         suitable for adding to a URL as a query string.\n     */\n    public static String makeQueryString(HttpServletRequest request, Map additions, String[] ignores, IgnoreType ignoreType) {\n        if (request == null || additions == null || ignores == null || ignoreType == null) {\n            throw new IllegalArgumentException(\"Cannot take null parameters.\");\n        }\n\n        StringBuffer buffer = new StringBuffer();\n\n        ArrayList<String> ignoreList = new ArrayList<String>();\n        for (int i = 0; i < ignores.length; i++) {\n            ignoreList.add(ignores[i]);\n        }\n\n        Enumeration names = request.getParameterNames();\n\n        while (names.hasMoreElements()) {\n            String name = (String) names.nextElement();\n            String[] values = request.getParameterValues(name);\n\n            if ((ignoreType == IgnoreType.ADDITIONS_ONLY || !ignoreList.contains(name)) && values != null) {\n                for (int i = 0; i < values.length; i++) {\n                    buffer.append(\"&\");\n                    buffer.append(name);\n                    buffer.append(\"=\");\n                    buffer.append(Util.encode(values[i]));\n                }\n            }\n        }\n\n        Set keySet = additions.keySet();\n        Iterator keys = keySet.iterator();\n\n        while (keys.hasNext()) {\n            String name = (String) keys.next();\n\n            // handle both a String value or a String[] value\n            Object tmp = additions.get(name);\n            String[] values;\n            if (tmp instanceof String[]) {\n                values = (String[]) tmp;\n            } else if (tmp instanceof String) {\n                values = new String[] { (String) tmp };\n            } else {\n                throw new IllegalArgumentException(\"addition \\\"\" + name + \"\\\" is not of type String or String[], but is of type: \"\n                                                   + tmp.getClass().getName());\n            }\n\n            if ((ignoreType == IgnoreType.REQUEST_ONLY || !ignoreList.contains(name)) && values != null) {\n                for (int i = 0; i < values.length; i++) {\n                    buffer.append(\"&\");\n                    buffer.append(name);\n                    buffer.append(\"=\");\n                    buffer.append(Util.encode(values[i]));\n                }\n            }\n        }\n\n        // removes the first & from the buffer\n        buffer.deleteCharAt(0);\n\n        return (buffer.toString());\n    }","id":10931,"modified_method":"/**\n     * Creates a query string of the format \"key1=value1&amp;key2=value2\" for\n     * each parameter in the given <code>HttpServletRequest<\/code> and key in\n     * given <code>Map<\/code> that is not listed in the ignore list.\n     * \n     * @param request\n     *            the <code>HttpServletRequest<\/code> to read the parameters\n     *            from\n     * @param additions\n     *            a mapping of strings to strings or string arrays to be\n     *            included in the query string\n     * @param ignores\n     *            the list of parameters and map entries not to include\n     * @return A string in the <em>x-www-form-urlencoded<\/em> format that is\n     *         suitable for adding to a URL as a query string.\n     */\n    public static String makeQueryString(HttpServletRequest request, Map additions, String[] ignores, IgnoreType ignoreType) {\n        if (request == null || additions == null || ignores == null || ignoreType == null) {\n            throw new IllegalArgumentException(\"Cannot take null parameters.\");\n        }\n\n        StringBuffer buffer = new StringBuffer();\n\n        ArrayList<String> ignoreList = new ArrayList<String>();\n        for (int i = 0; i < ignores.length; i++) {\n            ignoreList.add(ignores[i]);\n        }\n\n        Enumeration names = request.getParameterNames();\n\n        while (names.hasMoreElements()) {\n            String name = (String) names.nextElement();\n            String[] values = request.getParameterValues(name);\n\n            if ((ignoreType == IgnoreType.ADDITIONS_ONLY || !ignoreList.contains(name)) && values != null) {\n                for (int i = 0; i < values.length; i++) {\n                    buffer.append(\"&\");\n                    buffer.append(name);\n                    buffer.append(\"=\");\n                    buffer.append(Util.encode(values[i]));\n                }\n            }\n        }\n\n        Set keySet = additions.keySet();\n        Iterator keys = keySet.iterator();\n\n        while (keys.hasNext()) {\n            String name = (String) keys.next();\n\n            // handle both a String value or a String[] value\n            Object tmp = additions.get(name);\n            String[] values;\n            if (tmp instanceof String[]) {\n                values = (String[]) tmp;\n            } else if (tmp instanceof String) {\n                values = new String[] { (String) tmp };\n            } else {\n                throw new IllegalArgumentException(\"addition \\\"\" + name + \"\\\" is not of type String or String[], but is of type: \"\n                                                   + tmp.getClass().getName());\n            }\n\n            if ((ignoreType == IgnoreType.REQUEST_ONLY || !ignoreList.contains(name)) && values != null) {\n                for (int i = 0; i < values.length; i++) {\n                    buffer.append(\"&\");\n                    buffer.append(name);\n                    buffer.append(\"=\");\n                    buffer.append(Util.encode(values[i]));\n                }\n            }\n        }\n\n        // removes the first & from the buffer\n        if (buffer.length() > 0 && buffer.charAt(0) == '&') {\n            buffer.deleteCharAt(0);\n        }\n\n        return buffer.toString();\n    }","commit_id":"214f3e0c59d99d2459459d64929be4e6b105e4fe","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Creates a query string of the format \"key1=value1&amp;key2=value2\" for\n     * each parameter in the given <code>HttpServletRequest<\/code> and key in\n     * given <code>Map<\/code> that is not listed in the ignore list.\n     * \n     * @param request\n     *            the <code>HttpServletRequest<\/code> to read the parameters\n     *            from\n     * @param additions\n     *            a mapping of strings to strings or string arrays to be\n     *            included in the query string\n     * @param ignores\n     *            the list of parameters and map entries not to include\n     * @return A string in the <em>x-www-form-urlencoded<\/em> format that is\n     *         suitable for adding to a URL as a query string.\n     */\n    public static String makeQueryString(HttpServletRequest request, Map additions, String[] ignores, IgnoreType ignoreType) {\n        if (request == null || additions == null || ignores == null || ignoreType == null) {\n            throw new IllegalArgumentException(\"Cannot take null parameters.\");\n        }\n\n        StringBuffer buffer = new StringBuffer();\n\n        ArrayList<String> ignoreList = new ArrayList<String>();\n        for (int i = 0; i < ignores.length; i++) {\n            ignoreList.add(ignores[i]);\n        }\n\n        Enumeration names = request.getParameterNames();\n\n        while (names.hasMoreElements()) {\n            String name = (String) names.nextElement();\n            String[] values = request.getParameterValues(name);\n\n            if ((ignoreType == IgnoreType.ADDITIONS_ONLY || !ignoreList.contains(name)) && values != null) {\n                for (int i = 0; i < values.length; i++) {\n                    buffer.append(\"&\");\n                    buffer.append(name);\n                    buffer.append(\"=\");\n                    buffer.append(Util.encode(values[i]));\n                }\n            }\n        }\n\n        Set keySet = additions.keySet();\n        Iterator keys = keySet.iterator();\n\n        while (keys.hasNext()) {\n            String name = (String) keys.next();\n\n            // handle both a String value or a String[] value\n            Object tmp = additions.get(name);\n            String[] values;\n            if (tmp instanceof String[]) {\n                values = (String[]) tmp;\n            } else if (tmp instanceof String) {\n                values = new String[] { (String) tmp };\n            } else {\n                throw new IllegalArgumentException(\"addition \\\"\" + name + \"\\\" is not of type String or String[], but is of type: \"\n                                                   + tmp.getClass().getName());\n            }\n\n            if ((ignoreType == IgnoreType.REQUEST_ONLY || !ignoreList.contains(name)) && values != null) {\n                for (int i = 0; i < values.length; i++) {\n                    buffer.append(\"&\");\n                    buffer.append(name);\n                    buffer.append(\"=\");\n                    buffer.append(Util.encode(values[i]));\n                }\n            }\n        }\n\n        // removes the first & from the buffer\n        buffer.deleteCharAt(0);\n\n        return (buffer.toString());\n    }","id":10932,"modified_method":"/**\n     * Creates a query string of the format \"key1=value1&amp;key2=value2\" for\n     * each parameter in the given <code>HttpServletRequest<\/code> and key in\n     * given <code>Map<\/code> that is not listed in the ignore list.\n     * \n     * @param request\n     *            the <code>HttpServletRequest<\/code> to read the parameters\n     *            from\n     * @param additions\n     *            a mapping of strings to strings or string arrays to be\n     *            included in the query string\n     * @param ignores\n     *            the list of parameters and map entries not to include\n     * @return A string in the <em>x-www-form-urlencoded<\/em> format that is\n     *         suitable for adding to a URL as a query string.\n     */\n    public static String makeQueryString(HttpServletRequest request, Map additions, String[] ignores, IgnoreType ignoreType) {\n        if (request == null || additions == null || ignores == null || ignoreType == null) {\n            throw new IllegalArgumentException(\"Cannot take null parameters.\");\n        }\n\n        StringBuffer buffer = new StringBuffer();\n\n        ArrayList<String> ignoreList = new ArrayList<String>();\n        for (int i = 0; i < ignores.length; i++) {\n            ignoreList.add(ignores[i]);\n        }\n\n        Enumeration names = request.getParameterNames();\n\n        while (names.hasMoreElements()) {\n            String name = (String) names.nextElement();\n            String[] values = request.getParameterValues(name);\n\n            if ((ignoreType == IgnoreType.ADDITIONS_ONLY || !ignoreList.contains(name)) && values != null) {\n                for (int i = 0; i < values.length; i++) {\n                    buffer.append(\"&\");\n                    buffer.append(name);\n                    buffer.append(\"=\");\n                    buffer.append(Util.encode(values[i]));\n                }\n            }\n        }\n\n        Set keySet = additions.keySet();\n        Iterator keys = keySet.iterator();\n\n        while (keys.hasNext()) {\n            String name = (String) keys.next();\n\n            // handle both a String value or a String[] value\n            Object tmp = additions.get(name);\n            String[] values;\n            if (tmp instanceof String[]) {\n                values = (String[]) tmp;\n            } else if (tmp instanceof String) {\n                values = new String[] { (String) tmp };\n            } else {\n                throw new IllegalArgumentException(\"addition \\\"\" + name + \"\\\" is not of type String or String[], but is of type: \"\n                                                   + tmp.getClass().getName());\n            }\n\n            if ((ignoreType == IgnoreType.REQUEST_ONLY || !ignoreList.contains(name)) && values != null) {\n                for (int i = 0; i < values.length; i++) {\n                    buffer.append(\"&\");\n                    buffer.append(name);\n                    buffer.append(\"=\");\n                    buffer.append(Util.encode(values[i]));\n                }\n            }\n        }\n\n        // removes the first & from the buffer\n        if (buffer.length() > 0 && buffer.charAt(0) == '&') {\n            buffer.deleteCharAt(0);\n        }\n\n        return buffer.toString();\n    }","commit_id":"ed6ee14157420d0200a8dccc7f5c7db13d5329a2","url":"https://github.com/OpenNMS/opennms"},{"original_method":"/**\n     * Creates a query string of the format \"key1=value1&amp;key2=value2\" for\n     * each parameter in the given <code>HttpServletRequest<\/code> and key in\n     * given <code>Map<\/code> that is not listed in the ignore list.\n     * \n     * @param request\n     *            the <code>HttpServletRequest<\/code> to read the parameters\n     *            from\n     * @param additions\n     *            a mapping of strings to strings or string arrays to be\n     *            included in the query string\n     * @param ignores\n     *            the list of parameters and map entries not to include\n     * @return A string in the <em>x-www-form-urlencoded<\/em> format that is\n     *         suitable for adding to a URL as a query string.\n     */\n    public static String makeQueryString(HttpServletRequest request, Map additions, String[] ignores, IgnoreType ignoreType) {\n        if (request == null || additions == null || ignores == null || ignoreType == null) {\n            throw new IllegalArgumentException(\"Cannot take null parameters.\");\n        }\n\n        StringBuffer buffer = new StringBuffer();\n\n        ArrayList<String> ignoreList = new ArrayList<String>();\n        for (int i = 0; i < ignores.length; i++) {\n            ignoreList.add(ignores[i]);\n        }\n\n        Enumeration names = request.getParameterNames();\n\n        while (names.hasMoreElements()) {\n            String name = (String) names.nextElement();\n            String[] values = request.getParameterValues(name);\n\n            if ((ignoreType == IgnoreType.ADDITIONS_ONLY || !ignoreList.contains(name)) && values != null) {\n                for (int i = 0; i < values.length; i++) {\n                    buffer.append(\"&\");\n                    buffer.append(name);\n                    buffer.append(\"=\");\n                    buffer.append(Util.encode(values[i]));\n                }\n            }\n        }\n\n        Set keySet = additions.keySet();\n        Iterator keys = keySet.iterator();\n\n        while (keys.hasNext()) {\n            String name = (String) keys.next();\n\n            // handle both a String value or a String[] value\n            Object tmp = additions.get(name);\n            String[] values;\n            if (tmp instanceof String[]) {\n                values = (String[]) tmp;\n            } else if (tmp instanceof String) {\n                values = new String[] { (String) tmp };\n            } else {\n                throw new IllegalArgumentException(\"addition \\\"\" + name + \"\\\" is not of type String or String[], but is of type: \"\n                                                   + tmp.getClass().getName());\n            }\n\n            if ((ignoreType == IgnoreType.REQUEST_ONLY || !ignoreList.contains(name)) && values != null) {\n                for (int i = 0; i < values.length; i++) {\n                    buffer.append(\"&\");\n                    buffer.append(name);\n                    buffer.append(\"=\");\n                    buffer.append(Util.encode(values[i]));\n                }\n            }\n        }\n\n        // removes the first & from the buffer\n        buffer.deleteCharAt(0);\n\n        return (buffer.toString());\n    }","id":10933,"modified_method":"/**\n     * Creates a query string of the format \"key1=value1&amp;key2=value2\" for\n     * each parameter in the given <code>HttpServletRequest<\/code> and key in\n     * given <code>Map<\/code> that is not listed in the ignore list.\n     * \n     * @param request\n     *            the <code>HttpServletRequest<\/code> to read the parameters\n     *            from\n     * @param additions\n     *            a mapping of strings to strings or string arrays to be\n     *            included in the query string\n     * @param ignores\n     *            the list of parameters and map entries not to include\n     * @return A string in the <em>x-www-form-urlencoded<\/em> format that is\n     *         suitable for adding to a URL as a query string.\n     */\n    public static String makeQueryString(HttpServletRequest request, Map additions, String[] ignores, IgnoreType ignoreType) {\n        if (request == null || additions == null || ignores == null || ignoreType == null) {\n            throw new IllegalArgumentException(\"Cannot take null parameters.\");\n        }\n\n        StringBuffer buffer = new StringBuffer();\n\n        ArrayList<String> ignoreList = new ArrayList<String>();\n        for (int i = 0; i < ignores.length; i++) {\n            ignoreList.add(ignores[i]);\n        }\n\n        Enumeration names = request.getParameterNames();\n\n        while (names.hasMoreElements()) {\n            String name = (String) names.nextElement();\n            String[] values = request.getParameterValues(name);\n\n            if ((ignoreType == IgnoreType.ADDITIONS_ONLY || !ignoreList.contains(name)) && values != null) {\n                for (int i = 0; i < values.length; i++) {\n                    buffer.append(\"&\");\n                    buffer.append(name);\n                    buffer.append(\"=\");\n                    buffer.append(Util.encode(values[i]));\n                }\n            }\n        }\n\n        Set keySet = additions.keySet();\n        Iterator keys = keySet.iterator();\n\n        while (keys.hasNext()) {\n            String name = (String) keys.next();\n\n            // handle both a String value or a String[] value\n            Object tmp = additions.get(name);\n            String[] values;\n            if (tmp instanceof String[]) {\n                values = (String[]) tmp;\n            } else if (tmp instanceof String) {\n                values = new String[] { (String) tmp };\n            } else {\n                throw new IllegalArgumentException(\"addition \\\"\" + name + \"\\\" is not of type String or String[], but is of type: \"\n                                                   + tmp.getClass().getName());\n            }\n\n            if ((ignoreType == IgnoreType.REQUEST_ONLY || !ignoreList.contains(name)) && values != null) {\n                for (int i = 0; i < values.length; i++) {\n                    buffer.append(\"&\");\n                    buffer.append(name);\n                    buffer.append(\"=\");\n                    buffer.append(Util.encode(values[i]));\n                }\n            }\n        }\n\n        // removes the first & from the buffer\n        if (buffer.length() > 0 && buffer.charAt(0) == '&') {\n            buffer.deleteCharAt(0);\n        }\n\n        return buffer.toString();\n    }","commit_id":"fafe313e65364b50f68f4b484e8475824e00c260","url":"https://github.com/OpenNMS/opennms"},{"original_method":"protected <T> void waitForFutures(final Queue<Tuple<File, Future<T>>> futures, final ConcurrentMap<File, T> results) {\n        while (!futures.isEmpty()) {\n            final Tuple<File, Future<T>> future = futures.poll();\n            processResult(results, future);\n        }\n    }","id":10934,"modified_method":"protected <T> void waitForFutures(final Queue<Tuple<File, Future<T>>> futures, final ConcurrentMap<File, T> results) {\n        while (!futures.isEmpty()) {\n            final Tuple<File, Future<T>> future = futures.poll();\n            try {\n                processResult(results, future);\n            }\n            catch (InterruptedException e) {\n                Thread.interrupted();\n                return;\n            }\n        }\n    }","commit_id":"3f12430a19c38286c8a911a6039c65ca8b959217","url":"https://github.com/Jasig/uPortal"},{"original_method":"protected <T> void processResult(final ConcurrentMap<File, T> results, final Tuple<File, Future<T>> future) {\n        final T result;\n        try {\n            if (maxWait < 0) {\n                result = future.second.get();\n            }\n            else {\n                result = future.second.get(maxWait, maxWaitTimeUnit);\n            }\n            \n            logger.debug(\"processing complete: {}\", future.first);\n        }\n        catch (InterruptedException e) {\n            throw new RuntimeException(\"Timeout waiting for file: \" + future.first, e);\n        }\n        catch (ExecutionException e) {\n            throw new RuntimeException(\"Exception processing for file: \" + future.first, e);\n        }\n        catch (TimeoutException e) {\n            throw new RuntimeException(\"Timeout waiting for file: \" + future.first, e);\n        }\n            \n        if (results != null && result != null) {\n            results.put(future.first, result);\n        }\n    }","id":10935,"modified_method":"protected <T> void processResult(final ConcurrentMap<File, T> results, final Tuple<File, Future<T>> future) throws InterruptedException {\n        final T result;\n        try {\n            if (maxWait < 0) {\n                result = future.second.get();\n            }\n            else {\n                result = future.second.get(maxWait, maxWaitTimeUnit);\n            }\n            \n            logger.debug(\"processing complete: {}\", future.first);\n        }\n        catch (ExecutionException e) {\n            throw new RuntimeException(\"Exception processing for file: \" + future.first, e.getCause());\n        }\n        catch (TimeoutException e) {\n            throw new RuntimeException(\"Timeout waiting for file: \" + future.first, e);\n        }\n            \n        if (results != null && result != null) {\n            results.put(future.first, result);\n        }\n    }","commit_id":"3f12430a19c38286c8a911a6039c65ca8b959217","url":"https://github.com/Jasig/uPortal"},{"original_method":"protected <T> void cleanFutures(final Queue<Tuple<File, Future<T>>> futures, final ConcurrentMap<File, T> results) {\n        for (final Iterator<Tuple<File, Future<T>>> futureItr = futures.iterator(); futureItr.hasNext(); ) {\n            final Tuple<File, Future<T>> future = futureItr.next();\n            if (future.second.isDone()) {\n                futureItr.remove();\n                \n                processResult(results, future);\n            }\n        }\n    }","id":10936,"modified_method":"protected <T> void cleanFutures(final Queue<Tuple<File, Future<T>>> futures, final ConcurrentMap<File, T> results) {\n        for (final Iterator<Tuple<File, Future<T>>> futureItr = futures.iterator(); futureItr.hasNext(); ) {\n            final Tuple<File, Future<T>> future = futureItr.next();\n            if (future.second.isDone()) {\n                futureItr.remove();\n                \n                try {\n                    processResult(results, future);\n                }\n                catch (InterruptedException e) {\n                    Thread.interrupted();\n                    return;\n                }\n            }\n        }\n    }","commit_id":"3f12430a19c38286c8a911a6039c65ca8b959217","url":"https://github.com/Jasig/uPortal"},{"original_method":"public ImportFuture(Future<T> future, Resource resource) {\n            super(future);\n            this.resource = resource;\n        }","id":10937,"modified_method":"public ImportFuture(Future<T> future, Resource resource, PortalDataKey dataKey, AtomicLong importTime) {\n            super(future, importTime);\n            this.resource = resource;\n            this.dataKey = dataKey;\n        }","commit_id":"3f12430a19c38286c8a911a6039c65ca8b959217","url":"https://github.com/Jasig/uPortal"},{"original_method":"/**\n     * Used by batch import and export to wait for queued tasks to complete. Handles fail-fast behavior\n     * if any of the tasks threw and exception by canceling all queued futures and logging a summary of\n     * the failures. All completed futures are removed from the queue.\n     * \n     * @param futures Queued futures to check for completeness\n     * @param failOnError If true and any {@link Future#get()} throws an exception all Futures in the Queue will be canceled and an exception will be thrown.\n     * @param wait If true it will wait for all futures to complete, if false only check for completed futures\n     */\n    protected void waitForFutures(\n            final Queue<? extends FutureHolder<?>> futures, final AtomicBoolean failed,\n            final boolean failOnError, final boolean wait) {\n        \n        List<FutureHolder<?>> failedFutures = null;\n        \n        for (Iterator<? extends FutureHolder<?>> futuresItr = futures.iterator(); futuresItr.hasNext();) {\n            final FutureHolder<?> futureHolder = futuresItr.next();\n             \n            //If waiting, or if not waiting but the future is already done do the get\n            final Future<?> future = futureHolder.getFuture();\n            if (wait || failedFutures != null || (!wait && future.isDone())) {\n                try {\n                    //Don't bother doing a get() on canceled futures\n                    if (!future.isCancelled()) {\n                        //If there has been an exception and the future isn't done try canceling it\n                        if (failed.get() && !future.isDone()) {\n                            future.cancel(true);\n                        }\n                        \n                        if (this.maxWait > 0) {\n                            future.get(this.maxWait, this.maxWaitTimeUnit);\n                        }\n                        else {\n                            future.get();\n                        }\n                    }\n                    \n                    futuresItr.remove();\n                }\n                catch (CancellationException e) {\n                    //Ignore cancellation exceptions\n                }\n                catch (Exception e) {\n                    futuresItr.remove();\n                    \n                    if (failOnError) {\n                        //If this is the first exception reset the iterator to the start of the futures list\n                        if (failedFutures == null) {\n                            //Reset the iterator since we now need to wait for ALL futures to complete\n                            futuresItr = futures.iterator();\n                            \n                            //Create List used to track failed imports\n                            failedFutures = new LinkedList<FutureHolder<?>>();\n                        }\n                        \n                        //Add resource to the list of failed tasks \n                        failedFutures.add(futureHolder);\n                        \n                        //Log the import error\n                        this.logger.error(\"Exception while \" + futureHolder, e);\n                    }\n                    else {\n                        if (this.logger.isDebugEnabled()) {\n                            this.logger.warn(\"Exception while '\" + futureHolder + \"', file will be ignored\" , e);\n                        }\n                        else {\n                            this.logger.warn(\"Exception while '{}', file will be ignored: {}\", futureHolder, e.getCause().getMessage());\n                        }\n                    }\n                }\n            }\n        }\n        \n        //If any of the Futures threw an exception report details and fail\n        if (failedFutures != null) {\n            final StringBuilder msg = new StringBuilder(\"Halted due to \").append(failedFutures.size()).append(\" failures, see previous exceptions for causes.\\n\");\n            for (final FutureHolder<?> failedResource : failedFutures) {\n                msg.append(\"\\t\").append(failedResource.getDescription()).append(\"\\n\");\n            }\n             \n            throw new RuntimeException(msg.toString());\n        }\n    }","id":10938,"modified_method":"/**\n     * Used by batch import and export to wait for queued tasks to complete. Handles fail-fast behavior\n     * if any of the tasks threw and exception by canceling all queued futures and logging a summary of\n     * the failures. All completed futures are removed from the queue.\n     * \n     * @param futures Queued futures to check for completeness\n     * @param wait If true it will wait for all futures to complete, if false only check for completed futures\n     * @return a list of futures that either threw exceptions or timed out\n     */\n    protected List<FutureHolder<?>> waitForFutures(\n            final Queue<? extends FutureHolder<?>> futures,\n            final PrintWriter reportWriter, final File reportDirectory, \n            final boolean wait) throws InterruptedException {\n        \n        final List<FutureHolder<?>> failedFutures = new LinkedList<FutureHolder<?>>();\n        \n        for (Iterator<? extends FutureHolder<?>> futuresItr = futures.iterator(); futuresItr.hasNext();) {\n            final FutureHolder<?> futureHolder = futuresItr.next();\n             \n            //If waiting, or if not waiting but the future is already done do the get\n            final Future<?> future = futureHolder.getFuture();\n            if (wait || (!wait && future.isDone())) {\n                try {\n                    //Don't bother doing a get() on canceled futures\n                    if (!future.isCancelled()) {\n                        if (this.maxWait > 0) {\n                            future.get(this.maxWait, this.maxWaitTimeUnit);\n                        }\n                        else {\n                            future.get();\n                        }\n                        \n                        reportWriter.printf(REPORT_FORMAT, \"SUCCESS\", futureHolder.getDescription(), futureHolder.getExecutionTimeMillis());\n                    }\n                    \n                    futuresItr.remove();\n                }\n                catch (CancellationException e) {\n                    //Ignore cancellation exceptions\n                }\n                catch (ExecutionException e) {\n                    logger.error(\"Failed: \" + futureHolder);\n                    \n                    futureHolder.setError(e);\n                    failedFutures.add(futureHolder);\n                    reportWriter.printf(REPORT_FORMAT, \"FAIL\", futureHolder.getDescription(), futureHolder.getExecutionTimeMillis());\n\n                    try {\n                        final String dataReportName = SafeFilenameUtils.makeSafeFilename(futureHolder.getDataType() + \"_\" + futureHolder.getDataName() + \".txt\");\n                        final File dataReportFile = new File(reportDirectory, dataReportName);\n                        final PrintWriter dataReportWriter = new PrintWriter(new BufferedWriter(new FileWriter(dataReportFile)));\n                        try {\n                            dataReportWriter.println(\"FAIL: \" + futureHolder.getDataType() + \" - \" + futureHolder.getDataName());\n                            dataReportWriter.println(\"--------------------------------------------------------------------------------\");\n                            e.getCause().printStackTrace(dataReportWriter);\n                        }\n                        finally {\n                            IOUtils.closeQuietly(dataReportWriter);\n                        }\n                    }\n                    catch (Exception re) {\n                        logger.warn(\"Failed to write error report for failed \" + futureHolder + \", logging root failure here\", e.getCause());\n                    }\n                }\n                catch (TimeoutException e) {\n                    logger.warn(\"Failed: \" + futureHolder);\n                    \n                    futureHolder.setError(e);\n                    failedFutures.add(futureHolder);\n                    future.cancel(true);\n                    reportWriter.printf(REPORT_FORMAT, \"TIMEOUT\", futureHolder.getDescription(), futureHolder.getExecutionTimeMillis());\n                }\n            }\n        }\n        \n        return failedFutures;\n    }","commit_id":"3f12430a19c38286c8a911a6039c65ca8b959217","url":"https://github.com/Jasig/uPortal"},{"original_method":"public ExportFuture(Future<T> future, String typeId, String dataId) {\n            super(future);\n            this.typeId = typeId;\n            this.dataId = dataId;\n        }","id":10939,"modified_method":"public ExportFuture(Future<T> future, String typeId, String dataId, AtomicLong exportTime) {\n            super(future, exportTime);\n            this.typeId = typeId;\n            this.dataId = dataId;\n        }","commit_id":"3f12430a19c38286c8a911a6039c65ca8b959217","url":"https://github.com/Jasig/uPortal"},{"original_method":"public FutureHolder(Future<T> future) {\n            this.future = future;\n        }","id":10940,"modified_method":"public FutureHolder(Future<T> future, AtomicLong time) {\n            this.future = future;\n            this.time = time;\n        }","commit_id":"3f12430a19c38286c8a911a6039c65ca8b959217","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n    public void exportAllData(File directory) {\n    \tfinal Set<IPortalDataType> portalDataTypes;\n    \tif (this.exportAllPortalDataTypes != null) {\n    \t\tportalDataTypes = this.exportAllPortalDataTypes;\n    \t}\n    \telse {\n    \t\tportalDataTypes = this.exportPortalDataTypes;\n    \t}\n    \t\n        final Set<String> typeIds = new LinkedHashSet<String>();\n\t\tfor (final IPortalDataType portalDataType : portalDataTypes) {\n            typeIds.add(portalDataType.getTypeId());\n        }\n        this.exportAllDataOfType(typeIds, directory);\n    }","id":10941,"modified_method":"@Override\n    public void exportAllData(File directory, BatchExportOptions options) {\n    \tfinal Set<IPortalDataType> portalDataTypes;\n    \tif (this.exportAllPortalDataTypes != null) {\n    \t\tportalDataTypes = this.exportAllPortalDataTypes;\n    \t}\n    \telse {\n    \t\tportalDataTypes = this.exportPortalDataTypes;\n    \t}\n    \t\n        final Set<String> typeIds = new LinkedHashSet<String>();\n\t\tfor (final IPortalDataType portalDataType : portalDataTypes) {\n            typeIds.add(portalDataType.getTypeId());\n        }\n        this.exportAllDataOfType(typeIds, directory, options);\n    }","commit_id":"3f12430a19c38286c8a911a6039c65ca8b959217","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n    public void importData(File directory, String pattern, final BatchImportOptions options) {\n        if (!directory.exists()) {\n            throw new IllegalArgumentException(\"The specified directory '\" + directory + \"' does not exist\");\n        }\n        \n        //Create the file filter to use when searching for files to import\n        final FileFilter fileFilter;\n        if (pattern != null) {\n            fileFilter = new AntPatternFileFilter(true, false, pattern, this.dataFileExcludes);\n        }\n        else {\n            fileFilter = new AntPatternFileFilter(true, false, this.dataFileIncludes, this.dataFileExcludes);\n        }\n        \n        //Convert directory to URI String to provide better logging output\n    \tfinal URI directoryUri = directory.toURI();\n        final String directoryUriStr = directoryUri.toString();\n\t\tIMPORT_BASE_DIR.set(directoryUriStr);\n        try {\n\t        //Scan the specified directory for files to import\n\t        logger.info(\"Scanning for files to Import from: {}\", directory);\n\t        final PortalDataKeyFileProcessor fileProcessor = new PortalDataKeyFileProcessor(this.dataKeyTypes, options);\n\t\t\tthis.directoryScanner.scanDirectoryNoResults(directory, fileFilter, fileProcessor);\n\t        final long resourceCount = fileProcessor.getResourceCount();\n\t\t\tlogger.info(\"Found {} files to Import from: {}\", resourceCount, directory);\n\t        \n\t        final boolean failOnError = options != null ? options.isFailOnError() : true;\n\t        final AtomicBoolean failed = new AtomicBoolean(false);\n\t        \n\t        //Map of files to import, grouped by type\n\t        final ConcurrentMap<PortalDataKey, Queue<Resource>> dataToImport = fileProcessor.getDataToImport();\n\t        \n\t        //Import the data files\n\t        for (final PortalDataKey portalDataKey : this.dataKeyImportOrder) {\n\t            final Queue<Resource> files = dataToImport.remove(portalDataKey);\n\t            if (files == null) {\n\t                continue;\n\t            }\n\t\n\t            final Queue<ImportFuture<?>> importFutures = new ConcurrentLinkedQueue<ImportFuture<?>>();\n\t            \n\t            final int fileCount = files.size();\n\t            logger.info(\"Importing {} files of type {}\", fileCount, portalDataKey);\n\t            \n\t            \n\t            for (final Resource file : files) {\n\t                //Check for completed futures on every iteration, needed to fail as fast as possible on an import exception\n\t                waitForFutures(importFutures, failed, failOnError, false);\n\t                \n\t                //Create import task\n\t                Callable<Object> task = new Callable<Object>() {\n\t                    @Override\n\t                    public Object call() {\n\t                    \tIMPORT_BASE_DIR.set(directoryUriStr);\n\t                        try {\n\t                        \timportData(file, portalDataKey);\n\t                        }\n\t                        finally {\n\t                        \tIMPORT_BASE_DIR.remove();\n\t                        }\n\t                        return null;\n\t                    }\n\t                };\n\t                \n\t                //If fail on error wrap in exception handling task\n\t                if (failOnError) {\n\t                    task = new ErrorReportingCallable<Object>(importFutures, failed, task);\n\t                }\n\t                \n\t                //If an exception has been reported stop immediately\n\t                if (failOnError && failed.get()) {\n\t                    break;\n\t                }\n\t                \n\t                //Submit the import task\n\t                final Future<?> importFuture = this.importExportThreadPool.submit(task);\n\t                \n\t                //Set a reference to the new future in the callable, needed for error handling\n\t                if (task instanceof ErrorReportingCallable) {\n\t                    ((ErrorReportingCallable)task).setSelf(importFuture);\n\t                }\n\t                \n\t                //Add the future for tracking\n\t                importFutures.offer(new ImportFuture(importFuture, file));\n\t            }\n\t            \n\t            //Wait for all of the imports on of this type to complete\n\t            waitForFutures(importFutures, failed, failOnError, true);\n\t        }\n\t        \n\t        if (!dataToImport.isEmpty()) {\n\t            throw new IllegalStateException(\"The following PortalDataKeys are not listed in the dataTypeImportOrder List: \" + dataToImport.keySet());\n\t        }\n        }\n        finally {\n        \tIMPORT_BASE_DIR.remove();\n        }\n    }","id":10942,"modified_method":"@Override\n    public void importData(File directory, String pattern, final BatchImportOptions options) {\n        if (!directory.exists()) {\n            throw new IllegalArgumentException(\"The specified directory '\" + directory + \"' does not exist\");\n        }\n        \n        //Create the file filter to use when searching for files to import\n        final FileFilter fileFilter;\n        if (pattern != null) {\n            fileFilter = new AntPatternFileFilter(true, false, pattern, this.dataFileExcludes);\n        }\n        else {\n            fileFilter = new AntPatternFileFilter(true, false, this.dataFileIncludes, this.dataFileExcludes);\n        }\n\n        \n        //Determine the parent directory to log to\n        final File logDirectory = determineLogDirectory(options, \"import\");\n\n        //Setup reporting file\n        final File importReport = new File(logDirectory, \"data-import.txt\");\n        final PrintWriter reportWriter;\n        try {\n            reportWriter = new PrintWriter(new BufferedWriter(new FileWriter(importReport)));\n        }\n        catch (IOException e) {\n            throw new RuntimeException(\"Failed to create FileWriter for: \" + importReport, e);\n        }\n        \n        \n        //Convert directory to URI String to provide better logging output\n    \tfinal URI directoryUri = directory.toURI();\n        final String directoryUriStr = directoryUri.toString();\n\t\tIMPORT_BASE_DIR.set(directoryUriStr);\n        try {\n\t        //Scan the specified directory for files to import\n\t        logger.info(\"Scanning for files to Import from: {}\", directory);\n\t        final PortalDataKeyFileProcessor fileProcessor = new PortalDataKeyFileProcessor(this.dataKeyTypes, options);\n\t\t\tthis.directoryScanner.scanDirectoryNoResults(directory, fileFilter, fileProcessor);\n\t        final long resourceCount = fileProcessor.getResourceCount();\n\t\t\tlogger.info(\"Found {} files to Import from: {}\", resourceCount, directory);\n\n\t\t\t//See if the import should fail on error\n\t        final boolean failOnError = options != null ? options.isFailOnError() : true;\n\t        \n\t        //Map of files to import, grouped by type\n\t        final ConcurrentMap<PortalDataKey, Queue<Resource>> dataToImport = fileProcessor.getDataToImport();\n\t        \n\t        //Import the data files\n\t        for (final PortalDataKey portalDataKey : this.dataKeyImportOrder) {\n\t            final Queue<Resource> files = dataToImport.remove(portalDataKey);\n\t            if (files == null) {\n\t                continue;\n\t            }\n\t\n\t            final Queue<ImportFuture<?>> importFutures = new LinkedList<ImportFuture<?>>();\n\t            final List<FutureHolder<?>> failedFutures = new LinkedList<FutureHolder<?>>();\n\t            \n\t            final int fileCount = files.size();\n\t            logger.info(\"Importing {} files of type {}\", fileCount, portalDataKey);\n                reportWriter.println(portalDataKey + \",\" + fileCount);\n\t            \n\t            for (final Resource file : files) {\n\t                //Check for completed futures on every iteration, needed to fail as fast as possible on an import exception\n\t                final List<FutureHolder<?>> newFailed = waitForFutures(importFutures, reportWriter, logDirectory, false);\n\t                failedFutures.addAll(newFailed);\n\t                \n\t                final AtomicLong importTime = new AtomicLong(-1);\n\t                \n\t                //Create import task\n\t                Callable<Object> task = new CallableWithoutResult() {\n                        @Override\n                        protected void callWithoutResult() {\n\t                    \tIMPORT_BASE_DIR.set(directoryUriStr);\n\t                    \timportTime.set(System.nanoTime());\n\t                        try {\n\t                        \timportData(file, portalDataKey);\n\t                        }\n\t                        finally {\n\t                            importTime.set(System.nanoTime() - importTime.get());\n\t                        \tIMPORT_BASE_DIR.remove();\n\t                        }\n\t                    }\n\t                };\n\t                \n\t                //Submit the import task\n\t                final Future<?> importFuture = this.importExportThreadPool.submit(task);\n\t                \n\t                //Add the future for tracking\n\t                importFutures.offer(new ImportFuture(importFuture, file, portalDataKey, importTime));\n\t            }\n\t            \n\t            //Wait for all of the imports on of this type to complete\n\t            final List<FutureHolder<?>> newFailed = waitForFutures(importFutures, reportWriter, logDirectory, true);\n                failedFutures.addAll(newFailed);\n                \n                if (failOnError && !failedFutures.isEmpty()) {\n                    throw new RuntimeException(failedFutures.size() + \" \" + portalDataKey + \" entities failed to import.\\n\\n\" +\n                    \t\t\"\\tPer entity exception logs and a full report can be found in \" + logDirectory + \"\\n\");\n                }\n                \n                reportWriter.flush();\n\t        }\n\t        \n\t        if (!dataToImport.isEmpty()) {\n\t            throw new IllegalStateException(\"The following PortalDataKeys are not listed in the dataTypeImportOrder List: \" + dataToImport.keySet());\n\t        }\n\t        \n\t        logger.info(\"For a detailed report on the data import see \" + importReport);\n        }\n        catch (InterruptedException e) {\n            throw new RuntimeException(\"Interrupted while waiting for entities to import\", e);\n        }\n        finally {\n            IOUtils.closeQuietly(reportWriter);\n        \tIMPORT_BASE_DIR.remove();\n        }\n    }","commit_id":"3f12430a19c38286c8a911a6039c65ca8b959217","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n    public void exportAllDataOfType(Set<String> typeIds, File directory) {\n        final Queue<ExportFuture<?>> exportFutures = new ConcurrentLinkedQueue<ExportFuture<?>>();\n        final boolean failOnError = true; //options != null ? options.isFailOnError() : true;\n        \n        final AtomicBoolean failed = new AtomicBoolean(false);\n        try {\n\t        for (final String typeId : typeIds) {\n\t            final File typeDir = new File(directory, typeId);\n\t            logger.info(\"Adding all data of type {} to export queue: {}\", typeId, typeDir);\n\t            \n\t            final Iterable<? extends IPortalData> dataForType = this.getPortalData(typeId);\n\t            for (final IPortalData data : dataForType) {\n\t                final String dataId = data.getDataId();\n\t\n\t                //Check for completed futures on every iteration, needed to fail as fast as possible on an import exception\n\t                waitForFutures(exportFutures, failed, failOnError, false);\n\t                \n\t                //Create export task\n\t                Callable<Object> task = new Callable<Object>() {\n\t                    @Override\n\t                    public Object call() throws Exception {\n\t                        exportData(typeId, dataId, typeDir);\n\t                        return null;\n\t                    }\n\t                };\n\t                \n\t                //If failing on error add exception handling wrapper\n\t                if (failOnError) {\n\t                    task = new ErrorReportingCallable<Object>(exportFutures, failed, task);\n\t                }\n\t                \n\t                //If an exception has been reported stop immediately\n\t                if (failOnError && failed.get()) {\n\t                    break;\n\t                }\n\t                \n\t                //Submit the export task\n\t                final Future<?> exportFuture = this.importExportThreadPool.submit(task);\n\t                \n\t                //Set a reference to the new future in the callable, needed for error handling\n\t                if (task instanceof ErrorReportingCallable) {\n\t                    ((ErrorReportingCallable)task).setSelf(exportFuture);\n\t                }\n\t                \n\t                //Add the future for tracking\n\t                final ExportFuture futureHolder = new ExportFuture(exportFuture, typeId, dataId);\n\t                exportFutures.offer(futureHolder);\n\t            }\n\t            \n\t            //If an exception has been reported stop immediately\n\t            if (failOnError && failed.get()) {\n\t                break;\n\t            }\n\t        }\n        }\n        catch (RuntimeException e) {\n        \tif (!failed.getAndSet(true)) {\n        \t\tthrow new RuntimeException(\"Halted due to failures\", e);\n        \t}\n\n        \tthrow e;\n        }\n        finally {\n\t        //Wait for all futures to complete\n\t        waitForFutures(exportFutures, failed, failOnError, true);\n        }\n    }","id":10943,"modified_method":"@Override\n    public void exportAllDataOfType(Set<String> typeIds, File directory, BatchExportOptions options) {\n        final Queue<ExportFuture<?>> exportFutures = new ConcurrentLinkedQueue<ExportFuture<?>>();\n        final boolean failOnError = options != null ? options.isFailOnError() : true;\n        \n        //Determine the parent directory to log to\n        final File logDirectory = determineLogDirectory(options, \"export\");\n\n        //Setup reporting file\n        final File exportReport = new File(logDirectory, \"data-export.txt\");\n        final PrintWriter reportWriter;\n        try {\n            reportWriter = new PrintWriter(new BufferedWriter(new FileWriter(exportReport)));\n        }\n        catch (IOException e) {\n            throw new RuntimeException(\"Failed to create FileWriter for: \" + exportReport, e);\n        }\n        \n        try {\n\t        for (final String typeId : typeIds) {\n\t            final List<FutureHolder<?>> failedFutures = new LinkedList<FutureHolder<?>>();\n\t            \n\t            final File typeDir = new File(directory, typeId);\n\t            logger.info(\"Adding all data of type {} to export queue: {}\", typeId, typeDir);\n\t            \n\t            reportWriter.println(typeId + \",\" + typeDir);\n\t            \n\t            final Iterable<? extends IPortalData> dataForType = this.getPortalData(typeId);\n\t            for (final IPortalData data : dataForType) {\n\t                final String dataId = data.getDataId();\n\t\n\t                //Check for completed futures on every iteration, needed to fail as fast as possible on an import exception\n\t                final List<FutureHolder<?>> newFailed = waitForFutures(exportFutures, reportWriter, logDirectory, false);\n\t                failedFutures.addAll(newFailed);\n\t                \n\t                final AtomicLong exportTime = new AtomicLong(-1);\n\t                \n\t                //Create export task\n\t                Callable<Object> task = new CallableWithoutResult() {\n                        @Override\n                        protected void callWithoutResult() {\n                            exportTime.set(System.nanoTime());\n                            try {\n                                exportData(typeId, dataId, typeDir);\n                            }\n                            finally {\n                                exportTime.set(System.nanoTime() - exportTime.get());\n                            }\n\t                    }\n\t                };\n\t                \n\t                //Submit the export task\n\t                final Future<?> exportFuture = this.importExportThreadPool.submit(task);\n\t                \n\t                //Add the future for tracking\n\t                final ExportFuture futureHolder = new ExportFuture(exportFuture, typeId, dataId, exportTime);\n\t                exportFutures.offer(futureHolder);\n\t            }\n\t            \n\t            final List<FutureHolder<?>> newFailed = waitForFutures(exportFutures, reportWriter, logDirectory, true);\n                failedFutures.addAll(newFailed);\n                \n                reportWriter.flush();\n                \n                if (failOnError && !failedFutures.isEmpty()) {\n                    throw new RuntimeException(failedFutures.size() + \" \" + typeId + \" entities failed to export.\\n\" +\n                            \"\\tPer entity exception logs and a full report can be found in \" + logDirectory);\n                }\n\t        }\n        }\n        catch (InterruptedException e) {\n            throw new RuntimeException(\"Interrupted while waiting for entities to export\", e);\n        }\n        finally {\n            IOUtils.closeQuietly(reportWriter);\n        }\n    }","commit_id":"3f12430a19c38286c8a911a6039c65ca8b959217","url":"https://github.com/Jasig/uPortal"},{"original_method":"@Override\n    public Object apply(Resource input) {\n        final InputStream fis;\n        try {\n            fis = input.getInputStream();\n        }\n        catch (IOException e) {\n            if (this.options == null || this.options.isFailOnError()) {\n                throw new RuntimeException(\"Failed to create InputStream for: \" + input, e);\n            }\n\n            logger.warn(\"Failed to create InputStream, resource will be ignored: {}\", input);\n            return null;\n        }\n        \n        final PortalDataKey portalDataKey;\n        final BufferedXMLEventReader xmlEventReader;\n        try {\n            xmlEventReader = new BufferedXMLEventReader(this.xmlInputFactory.createXMLEventReader(fis), -1);\n            \n            final StartElement rootElement = StaxUtils.getRootElement(xmlEventReader);\n            portalDataKey = new PortalDataKey(rootElement);\n        }\n        catch (XMLStreamException e) {\n            if (this.options != null && !this.options.isIngoreNonDataFiles()) {\n                throw new RuntimeException(\"Failed to parse: \" + input, e);\n            }\n\n            logger.warn(\"Failed to parse resource, it will be ignored: {}\", input);\n            return null;\n        }\n        finally {\n            IOUtils.closeQuietly(fis);\n        }\n        xmlEventReader.reset();\n        \n        final IPortalDataType portalDataType = this.dataKeyTypes.get(portalDataKey);\n        if (portalDataType == null) {\n            logger.warn(\"No IPortalDataType configured for {}, the resource will be ignored: {}\", portalDataKey, input);\n            return null;\n        }\n        \n        //Allow the PortalDataType to do any necessary post-processing of the input, needed as some types require extra work\n        final String resourceUri = ResourceUtils.getResourceUri(input);\n        final Set<PortalDataKey> processedPortalDataKeys = portalDataType.postProcessPortalDataKey(resourceUri, portalDataKey, xmlEventReader);\n        xmlEventReader.reset();\n        \n        for (final PortalDataKey processedPortalDataKey : processedPortalDataKeys) {\n            //Add the PortalDataKey and File into the map\n            Queue<Resource> queue = this.dataToImport.get(processedPortalDataKey);\n            if (queue == null) {\n                queue = ConcurrentMapUtils.putIfAbsent(this.dataToImport, processedPortalDataKey, new ConcurrentLinkedQueue<Resource>());\n            }\n            queue.offer(input);\n            count.incrementAndGet();\n        }\n        \n        return null;\n    }","id":10944,"modified_method":"@Override\n    public Object apply(Resource input) {\n        final InputStream fis;\n        try {\n            fis = input.getInputStream();\n        }\n        catch (IOException e) {\n            if (this.options == null || this.options.isFailOnError()) {\n                throw new RuntimeException(\"Failed to create InputStream for: \" + input, e);\n            }\n\n            logger.warn(\"Failed to create InputStream, resource will be ignored: {}\", input);\n            return null;\n        }\n        \n        final PortalDataKey portalDataKey;\n        final BufferedXMLEventReader xmlEventReader;\n        try {\n            xmlEventReader = new BufferedXMLEventReader(this.xmlInputFactory.createXMLEventReader(fis), -1);\n            \n            final StartElement rootElement = StaxUtils.getRootElement(xmlEventReader);\n            portalDataKey = new PortalDataKey(rootElement);\n        }\n        catch (Exception e) {\n            if (this.options != null && !this.options.isIngoreNonDataFiles()) {\n                throw new RuntimeException(\"Failed to parse: \" + input, e);\n            }\n\n            logger.warn(\"Failed to parse resource, it will be ignored: {}\", input);\n            return null;\n        }\n        finally {\n            IOUtils.closeQuietly(fis);\n        }\n        xmlEventReader.reset();\n        \n        final IPortalDataType portalDataType = this.dataKeyTypes.get(portalDataKey);\n        if (portalDataType == null) {\n            logger.warn(\"No IPortalDataType configured for {}, the resource will be ignored: {}\", portalDataKey, input);\n            return null;\n        }\n        \n        //Allow the PortalDataType to do any necessary post-processing of the input, needed as some types require extra work\n        final String resourceUri = ResourceUtils.getResourceUri(input);\n        final Set<PortalDataKey> processedPortalDataKeys = portalDataType.postProcessPortalDataKey(resourceUri, portalDataKey, xmlEventReader);\n        xmlEventReader.reset();\n        \n        for (final PortalDataKey processedPortalDataKey : processedPortalDataKeys) {\n            //Add the PortalDataKey and File into the map\n            Queue<Resource> queue = this.dataToImport.get(processedPortalDataKey);\n            if (queue == null) {\n                queue = ConcurrentMapUtils.putIfAbsent(this.dataToImport, processedPortalDataKey, new ConcurrentLinkedQueue<Resource>());\n            }\n            queue.offer(input);\n            count.incrementAndGet();\n        }\n        \n        return null;\n    }","commit_id":"3f12430a19c38286c8a911a6039c65ca8b959217","url":"https://github.com/Jasig/uPortal"},{"original_method":"private boolean hasLocalHelp() {\n        final Element element = containingDocument.getStaticState().getHelpElement(prefixedId);\n        return element != null && element.attributeValue(\"for\") == null;\n    }","id":10945,"modified_method":"private final boolean hasLocalHelp() {\n        final XFormsStaticState staticState = containingDocument.getStaticState();\n        return hasLocalElement(staticState, staticState.getHelpElement(prefixedId));\n    }","commit_id":"196508fbd8b5402e620afe4d4f90053f2b71d93b","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private boolean hasLocalHint() {\n        final Element element = containingDocument.getStaticState().getHintElement(prefixedId);\n        return element != null && element.attributeValue(\"for\") == null;\n    }","id":10946,"modified_method":"private final boolean hasLocalHint() {\n        final XFormsStaticState staticState = containingDocument.getStaticState();\n        return hasLocalElement(staticState, staticState.getHintElement(prefixedId));\n    }","commit_id":"196508fbd8b5402e620afe4d4f90053f2b71d93b","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private boolean hasLocalAlert() {\n        final Element element = containingDocument.getStaticState().getAlertElement(prefixedId);\n        return element != null && element.attributeValue(\"for\") == null;\n    }","id":10947,"modified_method":"private final boolean hasLocalAlert() {\n        final XFormsStaticState staticState = containingDocument.getStaticState();\n        return hasLocalElement(staticState, staticState.getAlertElement(prefixedId));\n    }","commit_id":"196508fbd8b5402e620afe4d4f90053f2b71d93b","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private boolean hasLocalLabel() {\n        final Element element = containingDocument.getStaticState().getLabelElement(prefixedId);\n        return element != null && element.attributeValue(\"for\") == null;\n    }","id":10948,"modified_method":"private final boolean hasLocalLabel() {\n        final XFormsStaticState staticState = containingDocument.getStaticState();\n        return hasLocalElement(staticState, staticState.getLabelElement(prefixedId));\n    }","commit_id":"196508fbd8b5402e620afe4d4f90053f2b71d93b","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"protected void doFix(Project project, ProblemDescriptor descriptor)\n                throws IncorrectOperationException {\n            final PsiElement element = descriptor.getPsiElement();\n            final PsiStatement statement = (PsiStatement)element.getParent();\n            @NonNls final String elementText = element.getText();\n            final String statementText;\n            final PsiStatement statementWithoutBraces;\n            if (statement instanceof PsiDoWhileStatement) {\n                final PsiDoWhileStatement doWhileStatement = (PsiDoWhileStatement)statement;\n                final PsiStatement body = doWhileStatement.getBody();\n                statementText = body.getText();\n                statementWithoutBraces = body;\n            } else if (statement instanceof PsiForeachStatement) {\n                final PsiForeachStatement foreachStatement = (PsiForeachStatement)statement;\n                final PsiStatement body = foreachStatement.getBody();\n                statementText = body.getText();\n                statementWithoutBraces = body;\n            } else if (statement instanceof PsiForStatement) {\n                final PsiForStatement forStatement = (PsiForStatement)statement;\n                final PsiStatement body = forStatement.getBody();\n                statementText = body.getText();\n                statementWithoutBraces = body;\n            } else if (statement instanceof PsiIfStatement) {\n                final PsiIfStatement ifStatement = (PsiIfStatement)statement;\n                if (\"if\".equals(elementText)) {\n                    final PsiStatement thenBranch = ifStatement.getThenBranch();\n                    statementText = thenBranch.getText();\n                    statementWithoutBraces = thenBranch;\n                } else {\n                    final PsiStatement elseBranch = ifStatement.getElseBranch();\n                    statementText = elseBranch.getText();\n                    statementWithoutBraces = elseBranch;\n                }\n            } else if (statement instanceof PsiWhileStatement) {\n                final PsiWhileStatement whileStatement = (PsiWhileStatement)statement;\n                final PsiStatement body = whileStatement.getBody();\n                statementText = body.getText();\n                statementWithoutBraces = body;\n            } else {\n                assert false;\n                statementText = null;\n                statementWithoutBraces = null;\n            }\n            final PsiElement whiteSpace = statementWithoutBraces.getPrevSibling();\n            assert whiteSpace != null;\n            final String whiteSpaceText = whiteSpace.getText();\n            final String leftBrace;\n            if (whiteSpaceText.indexOf('\\n') >= 0) {\n                leftBrace = \"{\\n\";\n            } else {\n                leftBrace = \"{\";\n            }\n            final String rightBrace;\n            if (statementWithoutBraces.getLastChild() instanceof PsiComment) {\n                rightBrace = \"\\n}\";\n            } else {\n                rightBrace = \"}\";\n            }\n            replaceStatement(statementWithoutBraces, leftBrace + statementText + rightBrace);\n        }","id":10949,"modified_method":"protected void doFix(Project project, ProblemDescriptor descriptor)\n                throws IncorrectOperationException {\n            final PsiElement element = descriptor.getPsiElement();\n            final PsiStatement statement = (PsiStatement)element.getParent();\n            @NonNls final String elementText = element.getText();\n            final PsiStatement statementWithoutBraces;\n            if (statement instanceof PsiDoWhileStatement) {\n                final PsiDoWhileStatement doWhileStatement =\n                        (PsiDoWhileStatement)statement;\n                statementWithoutBraces = doWhileStatement.getBody();\n            } else if (statement instanceof PsiForeachStatement) {\n                final PsiForeachStatement foreachStatement =\n                        (PsiForeachStatement)statement;\n                statementWithoutBraces = foreachStatement.getBody();\n            } else if (statement instanceof PsiForStatement) {\n                final PsiForStatement forStatement = (PsiForStatement)statement;\n                statementWithoutBraces = forStatement.getBody();\n            } else if (statement instanceof PsiIfStatement) {\n                final PsiIfStatement ifStatement = (PsiIfStatement)statement;\n                if (\"if\".equals(elementText)) {\n                    statementWithoutBraces = ifStatement.getThenBranch();\n                } else {\n                    statementWithoutBraces = ifStatement.getElseBranch();\n                }\n            } else if (statement instanceof PsiWhileStatement) {\n                final PsiWhileStatement whileStatement =\n                        (PsiWhileStatement)statement;\n                statementWithoutBraces = whileStatement.getBody();\n            } else {\n                assert false;\n                statementWithoutBraces = null;\n            }\n            if (statementWithoutBraces == null) {\n                return;\n            }\n            final String statementText = statementWithoutBraces.getText();\n            final PsiElement whiteSpace =\n                    statementWithoutBraces.getPrevSibling();\n            assert whiteSpace != null;\n            replaceStatement(statementWithoutBraces,\n                    \"{\\n\" + statementText + \"\\n}\");\n        }","commit_id":"b9e8a6dfa96ae56a2dfa108cc22f725d03e6d8d2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitClass(@NotNull PsiClass aClass) {\n            if (!m_isInClass) {\n                m_isInClass = true;\n                super.visitClass(aClass);\n                checkForMissortedModifiers(aClass);\n                m_isInClass = false;\n            }\n        }","id":10950,"modified_method":"public void visitClass(@NotNull PsiClass aClass) {\n            super.visitClass(aClass);\n            checkForMissortedModifiers(aClass);\n        }","commit_id":"b9e8a6dfa96ae56a2dfa108cc22f725d03e6d8d2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean isModifierListMissorted(PsiModifierList modifierList) {\n            if (modifierList == null) {\n                return false;\n            }\n            final List<PsiElement> simpleModifiers =\n                    new ArrayList<PsiElement>();\n            final PsiElement[] children = modifierList.getChildren();\n            for (final PsiElement child : children) {\n                if (child instanceof PsiJavaToken) {\n                    simpleModifiers.add(child);\n                }\n                if (child instanceof PsiAnnotation) {\n                    if (m_requireAnnotationsFirst &&\n                            simpleModifiers.size() != 0) {\n                        //things aren't in order, since annotations come first\n                        return true;\n                    }\n                }\n            }\n            int currentModifierIndex = -1;\n            for (Object simpleModifier : simpleModifiers) {\n                final PsiJavaToken token = (PsiJavaToken)simpleModifier;\n                final String text = token.getText();\n                final Integer modifierIndex = s_modifierOrder.get(text);\n                if (modifierIndex == null) {\n                    return false;\n                }\n                if (currentModifierIndex >= modifierIndex.intValue()) {\n                    return true;\n                }\n                currentModifierIndex = modifierIndex.intValue();\n            }\n            return false;\n        }","id":10951,"modified_method":"private boolean isModifierListMissorted(PsiModifierList modifierList) {\n            if (modifierList == null) {\n                return false;\n            }\n            final PsiElement[] children = modifierList.getChildren();\n            int currentModifierIndex = -1;\n            for (final PsiElement child : children) {\n                if (child instanceof PsiJavaToken) {\n                    final String text = child.getText();\n                    final Integer modifierIndex = s_modifierOrder.get(text);\n                    if (modifierIndex == null) {\n                        return false;\n                    }\n                    if (currentModifierIndex >= modifierIndex.intValue()) {\n                        return true;\n                    }\n                    currentModifierIndex = modifierIndex.intValue();\n                }\n                if (child instanceof PsiAnnotation) {\n                    if (m_requireAnnotationsFirst &&\n                        currentModifierIndex != -1) {\n                        //things aren't in order, since annotations come first\n                        return true;\n                    }\n                }\n            }\n            return false;\n        }","commit_id":"b9e8a6dfa96ae56a2dfa108cc22f725d03e6d8d2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void checkForMissortedModifiers(\n                PsiModifierListOwner listOwner) {\n            final PsiModifierList modifierList = listOwner.getModifierList();\n            if (isModifierListMissorted(modifierList)) {\n                registerError(modifierList);\n            }\n        }","id":10952,"modified_method":"private void checkForMissortedModifiers(\n                PsiModifierListOwner listOwner) {\n            final PsiModifierList modifierList = listOwner.getModifierList();\n            if (!isModifierListMissorted(modifierList)) {\n                return;\n            }\n            registerError(modifierList);\n        }","commit_id":"b9e8a6dfa96ae56a2dfa108cc22f725d03e6d8d2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"static void registerTransformers111(ResourceTransformationDescriptionBuilder parentBuilder) {\n            parentBuilder.addChildResource(PATH_CONNECTION_PROPERTY)\n             .getAttributeBuilder()\n                    .addRejectCheck(RejectAttributeChecker.UNDEFINED, Constants.CONNECTION_PROPERTY_VALUE)\n                    .end();\n\n        }","id":10953,"modified_method":"static void registerTransformers11x(ResourceTransformationDescriptionBuilder parentBuilder) {\n            parentBuilder.addChildResource(PATH_CONNECTION_PROPERTY)\n             .getAttributeBuilder()\n                    .addRejectCheck(RejectAttributeChecker.UNDEFINED, Constants.CONNECTION_PROPERTY_VALUE)\n                    .end();\n\n        }","commit_id":"a246e22a4650a86c4a2d3422798c986930cc8340","url":"https://github.com/wildfly/wildfly"},{"original_method":"static void registerTransformers111(ResourceTransformationDescriptionBuilder parentBuilder) {\n        ResourceTransformationDescriptionBuilder builder = parentBuilder.addChildResource(PATH_DATASOURCE);\n                builder.getAttributeBuilder()\n                .setDiscard(DiscardAttributeChecker.UNDEFINED, org.jboss.as.connector.subsystems.common.pool.Constants.INITIAL_POOL_SIZE,\n                        CONNECTION_LISTENER_CLASS, CONNECTION_LISTENER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_CLASS, org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_PROPERTIES, org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_PROPERTIES)\n                        .setDiscard(new DiscardAttributeChecker() {\n\n                            @Override\n                            public boolean isDiscardExpressions() {\n                                return false;\n                            }\n\n                            @Override\n                            public boolean isDiscardUndefined() {\n                                return true;\n                            }\n\n                            @Override\n                            public boolean isOperationParameterDiscardable(PathAddress address, String attributeName,\n                                                                           ModelNode attributeValue, ModelNode operation, TransformationContext context) {\n                                return false;\n                            }\n\n                            @Override\n                            public boolean isResourceAttributeDiscardable(PathAddress address, String attributeName,\n                                                                          ModelNode attributeValue, TransformationContext context) {\n                                return true;\n                            }\n                        }, ENABLED)\n                .addRejectCheck(RejectAttributeChecker.DEFINED, org.jboss.as.connector.subsystems.common.pool.Constants.INITIAL_POOL_SIZE,\n                        CONNECTION_LISTENER_CLASS, CONNECTION_LISTENER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_CLASS, org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_PROPERTIES, org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_PROPERTIES)\n                .end();\n        builder.addOperationTransformationOverride(ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION)\n                .inheritResourceAttributeDefinitions()\n                .setCustomOperationTransformer(ENABLE_TRANSFORMER)\n                .end()\n                .addOperationTransformationOverride(ModelDescriptionConstants.UNDEFINE_ATTRIBUTE_OPERATION)\n                .inheritResourceAttributeDefinitions()\n                .setCustomOperationTransformer(ENABLE_TRANSFORMER)\n                .end();\n        ConnectionPropertyDefinition.registerTransformers111(builder);\n    }","id":10954,"modified_method":"static void registerTransformers111(ResourceTransformationDescriptionBuilder parentBuilder) {\n        ResourceTransformationDescriptionBuilder builder = parentBuilder.addChildResource(PATH_DATASOURCE);\n                builder.getAttributeBuilder()\n                .setDiscard(DiscardAttributeChecker.UNDEFINED,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_PROPERTIES, CONNECTION_LISTENER_CLASS,\n                        CONNECTION_LISTENER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.INITIAL_POOL_SIZE\n                        )\n                .addRejectCheck(RejectAttributeChecker.DEFINED,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_PROPERTIES, CONNECTION_LISTENER_CLASS,\n                        CONNECTION_LISTENER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.INITIAL_POOL_SIZE\n                        )\n                //Reject expressions for enabled, since if they are used we don't know their value for the operation transformer override\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, Constants.ENABLED)\n                .end()\n                .addOperationTransformationOverride(ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION)\n                .inheritResourceAttributeDefinitions()\n                .setCustomOperationTransformer(ENABLE_TRANSFORMER)\n                .end()\n                .addOperationTransformationOverride(ModelDescriptionConstants.UNDEFINE_ATTRIBUTE_OPERATION)\n                .inheritResourceAttributeDefinitions()\n                .setCustomOperationTransformer(ENABLE_TRANSFORMER)\n                .end();\n        ConnectionPropertyDefinition.registerTransformers11x(builder);\n    }","commit_id":"a246e22a4650a86c4a2d3422798c986930cc8340","url":"https://github.com/wildfly/wildfly"},{"original_method":"static void registerTransformers110(ResourceTransformationDescriptionBuilder parentBuilder) {\n        parentBuilder.addChildResource(PATH_DATASOURCE)\n                .getAttributeBuilder().setDiscard(DiscardAttributeChecker.UNDEFINED, org.jboss.as.connector.subsystems.common.pool.Constants.INITIAL_POOL_SIZE,\n                URL_DELIMITER, CONNECTION_LISTENER_CLASS, CONNECTION_LISTENER_PROPERTIES,\n                org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_CLASS, org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_CLASS,\n                org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_PROPERTIES, org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_PROPERTIES)\n                .setDiscard(DiscardAttributeChecker.ALWAYS, ENABLED)\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, DATASOURCE_PROPERTIES_ATTRIBUTES)\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, DATASOURCE_PROPERTIES_ATTRIBUTES)\n                .end();\n    }","id":10955,"modified_method":"static void registerTransformers110(ResourceTransformationDescriptionBuilder parentBuilder) {\n        ResourceTransformationDescriptionBuilder builder = parentBuilder.addChildResource(PATH_DATASOURCE)\n                .getAttributeBuilder()\n                .setDiscard(DiscardAttributeChecker.UNDEFINED,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_PROPERTIES, CONNECTION_LISTENER_CLASS,\n                        CONNECTION_LISTENER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.INITIAL_POOL_SIZE\n                        )\n                .addRejectCheck(RejectAttributeChecker.DEFINED,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_PROPERTIES, CONNECTION_LISTENER_CLASS,\n                        CONNECTION_LISTENER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.INITIAL_POOL_SIZE\n                        )\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, DATASOURCE_PROPERTIES_ATTRIBUTES)\n                //These are not nillable in the old model\n                .addRejectCheck(RejectAttributeChecker.UNDEFINED, Constants.EXCEPTION_SORTER_PROPERTIES, Constants.REAUTHPLUGIN_PROPERTIES, Constants.STALE_CONNECTION_CHECKER_PROPERTIES, Constants.VALID_CONNECTION_CHECKER_PROPERTIES)\n                //Reject expressions for enabled, since if they are used we don't know their value for the operation transformer override\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, Constants.ENABLED)\n                .end()\n                .addOperationTransformationOverride(ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION)\n                .inheritResourceAttributeDefinitions()\n                .setCustomOperationTransformer(ENABLE_TRANSFORMER)\n                .end()\n                .addOperationTransformationOverride(ModelDescriptionConstants.UNDEFINE_ATTRIBUTE_OPERATION)\n                .inheritResourceAttributeDefinitions()\n                .setCustomOperationTransformer(ENABLE_TRANSFORMER)\n                .end();\n        ConnectionPropertyDefinition.registerTransformers11x(builder);\n    }","commit_id":"a246e22a4650a86c4a2d3422798c986930cc8340","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Tests transformation of model from latest version into one passed into modelVersion parameter.\n     *\n     * @throws Exception\n     */\n    private void testTransformer(String subsystemXml, ModelTestControllerVersion controllerVersion, final ModelVersion modelVersion) throws Exception {\n        //Use the non-runtime version of the extension which will happen on the HC\n        KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)\n                .setSubsystemXmlResource(subsystemXml);\n\n        // Add legacy subsystems\n        builder.createLegacyKernelServicesBuilder(null, controllerVersion, modelVersion)\n                  .addMavenResourceURL(\"org.jboss.as:jboss-as-connector:\" + controllerVersion.getMavenGavVersion())\n                  .setExtensionClassName(\"org.jboss.as.connector.subsystems.datasources.DataSourcesExtension\")\n                  .configureReverseControllerCheck(AdditionalInitialization.MANAGEMENT, null)\n                  .excludeFromParent(SingleClassFilter.createFilter(ConnectorLogger.class));\n\n        KernelServices mainServices = builder.build();\n        Assert.assertTrue(mainServices.isSuccessfulBoot());\n        KernelServices legacyServices = mainServices.getLegacyServices(modelVersion);\n        Assert.assertTrue(legacyServices.isSuccessfulBoot());\n        Assert.assertNotNull(legacyServices);\n\n        checkSubsystemModelTransformation(mainServices, modelVersion, new ModelFixer() {\n\n            @Override\n            public ModelNode fixModel(ModelNode modelNode) {\n                Assert.assertTrue(modelNode.get(Constants.XA_DATASOURCE).get(\"complexXaDs_Pool\").get(Constants.JTA.getName()).asBoolean());\n                //Replace the value used in the xml\n                modelNode.get(Constants.XA_DATASOURCE).get(\"complexXaDs_Pool\").remove(Constants.JTA.getName());\n                //if (modelVersion.equals(ModelVersion.create(1, 1, 0))) {\n\n                    modelNode.get(Constants.DATA_SOURCE).get(\"complexDs_Pool\").remove(Constants.ENABLED.getName());\n\n                    modelNode.get(Constants.XA_DATASOURCE).get(\"complexXaDs_Pool\").remove(Constants.ENABLED.getName());\n                //}\n                return modelNode;\n\n            }\n        });\n    }","id":10956,"modified_method":"/**\n     * Tests transformation of model from latest version into one passed into modelVersion parameter.\n     *\n     * @throws Exception\n     */\n    private void testTransformer(String subsystemXml, ModelTestControllerVersion controllerVersion, final ModelVersion modelVersion) throws Exception {\n        //Use the non-runtime version of the extension which will happen on the HC\n        KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)\n                .setSubsystemXmlResource(subsystemXml);\n\n        // Add legacy subsystems\n        builder.createLegacyKernelServicesBuilder(null, controllerVersion, modelVersion)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-connector:\" + controllerVersion.getMavenGavVersion())\n                .setExtensionClassName(\"org.jboss.as.connector.subsystems.datasources.DataSourcesExtension\")\n                .configureReverseControllerCheck(AdditionalInitialization.MANAGEMENT, null)\n                .excludeFromParent(SingleClassFilter.createFilter(ConnectorLogger.class))\n                .configureReverseControllerCheck(null, new ModelFixer() {\n                    @Override\n                    public ModelNode fixModel(ModelNode modelNode) {\n                        //Replace the value used in the xml\n                        modelNode.get(Constants.XA_DATASOURCE).get(\"complexXaDs_Pool\").remove(Constants.JTA.getName());\n                        modelNode.get(Constants.DATA_SOURCE).get(\"complexDs_Pool\").remove(Constants.ENABLED.getName());\n                        modelNode.get(Constants.XA_DATASOURCE).get(\"complexXaDs_Pool\").remove(Constants.ENABLED.getName());\n                        return modelNode;\n\n                    }\n                });\n\n        KernelServices mainServices = builder.build();\n        Assert.assertTrue(mainServices.isSuccessfulBoot());\n        KernelServices legacyServices = mainServices.getLegacyServices(modelVersion);\n        Assert.assertTrue(legacyServices.isSuccessfulBoot());\n        Assert.assertNotNull(legacyServices);\n\n        checkSubsystemModelTransformation(mainServices, modelVersion, new ModelFixer() {\n\n            @Override\n            public ModelNode fixModel(ModelNode modelNode) {\n                Assert.assertTrue(modelNode.get(Constants.XA_DATASOURCE).get(\"complexXaDs_Pool\").get(Constants.JTA.getName()).asBoolean());\n                //Replace the value used in the xml\n                modelNode.get(Constants.XA_DATASOURCE).get(\"complexXaDs_Pool\").remove(Constants.JTA.getName());\n                modelNode.get(Constants.DATA_SOURCE).get(\"complexDs_Pool\").set(Constants.ENABLED.getName());\n                modelNode.get(Constants.XA_DATASOURCE).get(\"complexXaDs_Pool\").remove(Constants.ENABLED.getName());\n                return modelNode;\n\n            }\n        });\n    }","commit_id":"a246e22a4650a86c4a2d3422798c986930cc8340","url":"https://github.com/wildfly/wildfly"},{"original_method":"static void registerTransformers110(ResourceTransformationDescriptionBuilder parentBuilder) {\n        ResourceTransformationDescriptionBuilder builder = parentBuilder.addChildResource(PathElement.pathElement(RESOURCEADAPTER_NAME)).getAttributeBuilder()\n                .setDiscard(DiscardAttributeChecker.UNDEFINED, WM_SECURITY_MAPPING_USER, WM_SECURITY_MAPPING_GROUP,\n                        WM_SECURITY_MAPPING_GROUPS, WM_SECURITY_MAPPING_USERS, WM_SECURITY_DEFAULT_GROUP,\n                        WM_SECURITY_DEFAULT_GROUPS, WM_SECURITY_DEFAULT_PRINCIPAL)\n                .setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false, true, new ModelNode(false)), WM_SECURITY, WM_SECURITY_MAPPING_REQUIRED)\n                .setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false, true, new ModelNode(\"other\")), WM_SECURITY_DOMAIN)\n                .addRejectCheck(RejectAttributeChecker.DEFINED, WM_SECURITY, WM_SECURITY_MAPPING_USER, WM_SECURITY_MAPPING_GROUP,\n                        WM_SECURITY_MAPPING_GROUPS, WM_SECURITY_MAPPING_USERS, WM_SECURITY_DEFAULT_GROUP,\n                        WM_SECURITY_DEFAULT_GROUPS, WM_SECURITY_DEFAULT_PRINCIPAL, WM_SECURITY_MAPPING_REQUIRED,\n                        WM_SECURITY_DOMAIN)\n                //If these have some implied value in the old model, we should check those and discard rather than just if undefined ?????\n                .setDiscard(DiscardAttributeChecker.UNDEFINED, Constants.MODULE)\n                .addRejectCheck(RejectAttributeChecker.DEFINED, Constants.MODULE)\n                //These used to be non-nillable so reject if undefined\n                .addRejectCheck(RejectAttributeChecker.UNDEFINED, Constants.BEANVALIDATION_GROUPS, Constants.ARCHIVE)\n                //Expressions not allowed\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, Constants.BEANVALIDATION_GROUPS, Constants.ARCHIVE)\n                .end()\n            .addChildResource(ConnectionDefinitionResourceDefinition.PATH).getAttributeBuilder()\n                //If these have some implied value in the old model, we should check those rather than just discarding undefined ?????\n                .setDiscard(DiscardAttributeChecker.UNDEFINED, ENLISTMENT, SHARABLE, CAPACITY_DECREMENTER_CLASS, CAPACITY_INCREMENTER_CLASS,\n                        INITIAL_POOL_SIZE, CAPACITY_DECREMENTER_PROPERTIES, CAPACITY_INCREMENTER_PROPERTIES)\n                .addRejectCheck(RejectAttributeChecker.DEFINED, ENLISTMENT, SHARABLE, CAPACITY_DECREMENTER_CLASS, CAPACITY_INCREMENTER_CLASS,\n                        INITIAL_POOL_SIZE, CAPACITY_DECREMENTER_PROPERTIES, CAPACITY_INCREMENTER_PROPERTIES)\n                 //Did not use to be nillable\n                .addRejectCheck(RejectAttributeChecker.UNDEFINED, Constants.RECOVERLUGIN_PROPERTIES)\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, Constants.RECOVERLUGIN_PROPERTIES)\n                .end();\n\n        ConnectionDefinitionResourceDefinition.registerTransformer110(builder);\n    }","id":10957,"modified_method":"static void registerTransformers110(ResourceTransformationDescriptionBuilder parentBuilder) {\n        ResourceTransformationDescriptionBuilder builder = parentBuilder.addChildResource(PathElement.pathElement(RESOURCEADAPTER_NAME)).getAttributeBuilder()\n                .setDiscard(DiscardAttributeChecker.UNDEFINED, WM_SECURITY_MAPPING_USER, WM_SECURITY_MAPPING_GROUP,\n                        WM_SECURITY_MAPPING_GROUPS, WM_SECURITY_MAPPING_USERS, WM_SECURITY_DEFAULT_GROUP,\n                        WM_SECURITY_DEFAULT_GROUPS, WM_SECURITY_DEFAULT_PRINCIPAL)\n                .setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false, true, new ModelNode(false)), WM_SECURITY, WM_SECURITY_MAPPING_REQUIRED)\n                .setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false, true, new ModelNode(\"other\")), WM_SECURITY_DOMAIN)\n                .addRejectCheck(RejectAttributeChecker.DEFINED, WM_SECURITY, WM_SECURITY_MAPPING_USER, WM_SECURITY_MAPPING_GROUP,\n                        WM_SECURITY_MAPPING_GROUPS, WM_SECURITY_MAPPING_USERS, WM_SECURITY_DEFAULT_GROUP,\n                        WM_SECURITY_DEFAULT_GROUPS, WM_SECURITY_DEFAULT_PRINCIPAL, WM_SECURITY_MAPPING_REQUIRED,\n                        WM_SECURITY_DOMAIN)\n                .setDiscard(DiscardAttributeChecker.UNDEFINED, Constants.MODULE)\n                .addRejectCheck(RejectAttributeChecker.DEFINED, Constants.MODULE)\n                //These used to be non-nillable so reject if undefined\n                .addRejectCheck(RejectAttributeChecker.UNDEFINED, Constants.BEANVALIDATIONGROUP, Constants.ARCHIVE)\n                //Expressions not allowed\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, Constants.BEANVALIDATIONGROUP, Constants.ARCHIVE)\n                .end()\n                .addChildResource(ConnectionDefinitionResourceDefinition.PATH).getAttributeBuilder()\n                        .setDiscard(DiscardAttributeChecker.UNDEFINED, Constants.SECURITY_DOMAIN, Constants.SECURITY_DOMAIN_AND_APPLICATION, Constants.APPLICATION,\n                                CAPACITY_DECREMENTER_CLASS, CAPACITY_INCREMENTER_CLASS,\n                                INITIAL_POOL_SIZE, CAPACITY_DECREMENTER_PROPERTIES, CAPACITY_INCREMENTER_PROPERTIES)\n                        .setDiscard(new DiscardAttributeChecker.DiscardAttributeValueChecker(false, false, new ModelNode(false)), ENLISTMENT, SHARABLE)\n                                .addRejectCheck(RejectAttributeChecker.DEFINED, Constants.SECURITY_DOMAIN, Constants.SECURITY_DOMAIN_AND_APPLICATION, Constants.APPLICATION,\n                                        CAPACITY_DECREMENTER_CLASS, CAPACITY_INCREMENTER_CLASS,\n                                        INITIAL_POOL_SIZE, CAPACITY_DECREMENTER_PROPERTIES, CAPACITY_INCREMENTER_PROPERTIES)\n                                .addRejectCheck(RejectAttributeChecker.UNDEFINED, ENLISTMENT, SHARABLE)\n                                .addRejectCheck(new RejectAttributeChecker.SimpleAcceptAttributeChecker(new ModelNode(true)), ENLISTMENT, SHARABLE)\n                                        //Did not use to be nillable\n                                .addRejectCheck(RejectAttributeChecker.UNDEFINED, Constants.RECOVERLUGIN_PROPERTIES)\n                                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, Constants.RECOVERLUGIN_PROPERTIES)\n                                .end();\n\n    }","commit_id":"a246e22a4650a86c4a2d3422798c986930cc8340","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testExpressionsAS72() throws Exception {\n        //this file contain expression for all supported fields except bean-validation-groups and recovery-plugin-properties\n        // for a limitation in test suite not permitting to have expression in type LIST or OBJECT for legacyServices\n        testTransformer(\"resource-adapters-xapool-expression2.xml\", ModelTestControllerVersion.V7_2_0_FINAL, ModelVersion.create(1, 2, 0));\n    }","id":10958,"modified_method":"@Test\n    public void testExpressionsAS72() throws Exception {\n        //this file contain expression for all supported fields except bean-validation-groups and recovery-plugin-properties\n        // for a limitation in test suite not permitting to have expression in type LIST or OBJECT for legacyServices\n        testTransformer(\"resource-adapters-xapool-expression.xml\", ModelTestControllerVersion.V7_2_0_FINAL, ModelVersion.create(1, 2, 0));\n    }","commit_id":"a246e22a4650a86c4a2d3422798c986930cc8340","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Tests transformation of model from current to passed one\n     *\n     * @throws Exception\n     */\n    private void testTransformer(String subsystemXml, ModelTestControllerVersion controllerVersion, ModelVersion modelVersion) throws Exception {\n        //Use the non-runtime version of the extension which will happen on the HC\n        KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)\n                .setSubsystemXmlResource(subsystemXml);\n\n        // Add legacy subsystems\n        builder.createLegacyKernelServicesBuilder(null, controllerVersion, modelVersion)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-connector:\" + controllerVersion.getMavenGavVersion())\n                .setExtensionClassName(\"org.jboss.as.connector.subsystems.resourceadapters.ResourceAdaptersExtension\")\n                .addOperationValidationResolve(\"add\", PathAddress.pathAddress(\n                        PathElement.pathElement(SUBSYSTEM, mainSubsystemName),\n                        PathElement.pathElement(\"resource-adapter\", \"*\"),\n                        PathElement.pathElement(\"connection-definitions\", \"*\")))\n                .excludeFromParent(SingleClassFilter.createFilter(ConnectorLogger.class));\n\n        KernelServices mainServices = builder.build();\n        org.junit.Assert.assertTrue(mainServices.isSuccessfulBoot());\n        KernelServices legacyServices = mainServices.getLegacyServices(modelVersion);\n        org.junit.Assert.assertTrue(legacyServices.isSuccessfulBoot());\n        org.junit.Assert.assertNotNull(legacyServices);\n\n\n        checkSubsystemModelTransformation(mainServices, modelVersion);\n\n    }","id":10959,"modified_method":"/**\n     * Tests transformation of model from current to passed one\n     *\n     * @throws Exception\n     */\n    private void testTransformer(String subsystemXml, ModelTestControllerVersion controllerVersion, ModelVersion modelVersion) throws Exception {\n        //Use the non-runtime version of the extension which will happen on the HC\n        KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)\n                .setSubsystemXmlResource(subsystemXml);\n\n        // Add legacy subsystems\n        builder.createLegacyKernelServicesBuilder(null, controllerVersion, modelVersion)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-connector:\" + controllerVersion.getMavenGavVersion())\n                .setExtensionClassName(\"org.jboss.as.connector.subsystems.resourceadapters.ResourceAdaptersExtension\")\n                .addOperationValidationResolve(\"add\", PathAddress.pathAddress(\n                        PathElement.pathElement(SUBSYSTEM, mainSubsystemName),\n                        PathElement.pathElement(\"resource-adapter\", \"*\"),\n                        PathElement.pathElement(\"connection-definitions\", \"*\")))\n                .excludeFromParent(SingleClassFilter.createFilter(ConnectorLogger.class))\n                .configureReverseControllerCheck(null, new ModelFixer() {\n\n                    @Override\n                    public ModelNode fixModel(ModelNode modelNode) {\n                        //Replace the value used in the xml\n                        if (modelNode.get(Constants.RESOURCEADAPTER_NAME).hasDefined(\"myRA\")) {\n                            if (modelNode.get(Constants.RESOURCEADAPTER_NAME).get(\"myRA\").get(Constants.CONNECTIONDEFINITIONS_NAME).get(\"poolName\").get(Constants.ENLISTMENT.getName()).isDefined())\n                                modelNode.get(Constants.RESOURCEADAPTER_NAME).get(\"myRA\").get(Constants.CONNECTIONDEFINITIONS_NAME).get(\"poolName\").get(Constants.ENLISTMENT.getName()).set(false);\n                            if (modelNode.get(Constants.RESOURCEADAPTER_NAME).get(\"myRA\").get(Constants.CONNECTIONDEFINITIONS_NAME).get(\"poolName\").get(Constants.SHARABLE.getName()).isDefined())\n                                modelNode.get(Constants.RESOURCEADAPTER_NAME).get(\"myRA\").get(Constants.CONNECTIONDEFINITIONS_NAME).get(\"poolName\").get(Constants.SHARABLE.getName()).set(false);\n\n                        }\n                        return modelNode;\n\n                    }\n                });\n\n        KernelServices mainServices = builder.build();\n        org.junit.Assert.assertTrue(mainServices.isSuccessfulBoot());\n        KernelServices legacyServices = mainServices.getLegacyServices(modelVersion);\n        org.junit.Assert.assertTrue(legacyServices.isSuccessfulBoot());\n        org.junit.Assert.assertNotNull(legacyServices);\n\n\n        checkSubsystemModelTransformation(mainServices, modelVersion, new ModelFixer() {\n\n                            @Override\n                            public ModelNode fixModel(ModelNode modelNode) {\n                                //Replace the value used in the xml\n                                if (modelNode.get(Constants.RESOURCEADAPTER_NAME).get(\"myRA\").get(Constants.CONNECTIONDEFINITIONS_NAME).get(\"poolName\").isDefined()) {\n                                    if(! modelNode.get(Constants.RESOURCEADAPTER_NAME).get(\"myRA\").get(Constants.CONNECTIONDEFINITIONS_NAME).get(\"poolName\").hasDefined(Constants.APPLICATION.getName()))\n                                        modelNode.get(Constants.RESOURCEADAPTER_NAME).get(\"myRA\").get(Constants.CONNECTIONDEFINITIONS_NAME).get(\"poolName\").get(Constants.APPLICATION.getName()).set(false);\n                                }\n\n                                return modelNode;\n\n                            }\n                        });\n\n    }","commit_id":"a246e22a4650a86c4a2d3422798c986930cc8340","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Tests transformation of model from current to passed one\n     *\n     * @throws Exception\n     */\n    private void testRejectingTransformer(String subsystemXml, ModelTestControllerVersion controllerVersion, ModelVersion modelVersion) throws Exception {\n        //Use the non-runtime version of the extension which will happen on the HC\n        KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);\n        //.setSubsystemXmlResource(subsystemXml);\n\n        // Add legacy subsystems\n        builder.createLegacyKernelServicesBuilder(null, controllerVersion, modelVersion)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-connector:\" + controllerVersion.getMavenGavVersion())\n                .setExtensionClassName(\"org.jboss.as.connector.subsystems.resourceadapters.ResourceAdaptersExtension\")\n                .addOperationValidationResolve(\"add\", PathAddress.pathAddress(\n                        PathElement.pathElement(SUBSYSTEM, mainSubsystemName),\n                        PathElement.pathElement(\"resource-adapter\", \"*\"),\n                        PathElement.pathElement(\"connection-definitions\", \"*\")))\n                .excludeFromParent(SingleClassFilter.createFilter(ConnectorLogger.class));\n\n        KernelServices mainServices = builder.build();\n        org.junit.Assert.assertTrue(mainServices.isSuccessfulBoot());\n        KernelServices legacyServices = mainServices.getLegacyServices(modelVersion);\n        org.junit.Assert.assertTrue(legacyServices.isSuccessfulBoot());\n        org.junit.Assert.assertNotNull(legacyServices);\n\n        List<ModelNode> ops = builder.parseXmlResource(subsystemXml);\n        PathAddress subsystemAddress = PathAddress.pathAddress(ResourceAdaptersExtension.SUBSYSTEM_PATH);\n        ModelTestUtils.checkFailedTransformedBootOperations(mainServices, modelVersion, ops, new FailedOperationTransformationConfig()\n                .addFailedAttribute(subsystemAddress.append(PathElement.pathElement(RESOURCEADAPTER_NAME)),\n                        new FailedOperationTransformationConfig.AttributesPathAddressConfig(WM_SECURITY.getName(), WM_SECURITY_MAPPING_REQUIRED.getName(), WM_SECURITY_DOMAIN.getName()) {\n                            @Override\n                            protected boolean isAttributeWritable(String attributeName) {\n                                return false;\n                            }\n\n                            @Override\n                            protected boolean checkValue(String attrName, ModelNode attribute, boolean isWriteAttribute) {\n                                if (attribute.isDefined()) {\n                                    return true;\n                                } else {\n                                    return false;\n                                }\n                            }\n\n                            @Override\n                            protected ModelNode correctValue(ModelNode toResolve, boolean isWriteAttribute) {\n                                return new ModelNode();\n                            }\n\n\n                        })\n\n        );\n }","id":10960,"modified_method":"/**\n     * Tests transformation of model from current to passed one\n     *\n     * @throws Exception\n     */\n    private void testRejectingTransformer(String subsystemXml, ModelTestControllerVersion controllerVersion, ModelVersion modelVersion) throws Exception {\n        //Use the non-runtime version of the extension which will happen on the HC\n        KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);\n        //.setSubsystemXmlResource(subsystemXml);\n\n        // Add legacy subsystems\n        builder.createLegacyKernelServicesBuilder(null, controllerVersion, modelVersion)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-connector:\" + controllerVersion.getMavenGavVersion())\n                .setExtensionClassName(\"org.jboss.as.connector.subsystems.resourceadapters.ResourceAdaptersExtension\")\n                .addOperationValidationResolve(\"add\", PathAddress.pathAddress(\n                        PathElement.pathElement(SUBSYSTEM, mainSubsystemName),\n                        PathElement.pathElement(\"resource-adapter\", \"*\"),\n                        PathElement.pathElement(\"connection-definitions\", \"*\")))\n                .excludeFromParent(SingleClassFilter.createFilter(ConnectorLogger.class));\n\n        KernelServices mainServices = builder.build();\n        org.junit.Assert.assertTrue(mainServices.isSuccessfulBoot());\n        KernelServices legacyServices = mainServices.getLegacyServices(modelVersion);\n        org.junit.Assert.assertTrue(legacyServices.isSuccessfulBoot());\n        org.junit.Assert.assertNotNull(legacyServices);\n\n        List<ModelNode> ops = builder.parseXmlResource(subsystemXml);\n        PathAddress subsystemAddress = PathAddress.pathAddress(ResourceAdaptersExtension.SUBSYSTEM_PATH);\n        ModelTestUtils.checkFailedTransformedBootOperations(mainServices, modelVersion, ops, new FailedOperationTransformationConfig()\n                .addFailedAttribute(subsystemAddress.append(PathElement.pathElement(RESOURCEADAPTER_NAME)),\n                        new FailedOperationTransformationConfig.AttributesPathAddressConfig(WM_SECURITY.getName(), WM_SECURITY_MAPPING_REQUIRED.getName(),\n                                WM_SECURITY_DOMAIN.getName(), MODULE.getName()) {\n                            @Override\n                            protected boolean isAttributeWritable(String attributeName) {\n                                return false;\n                            }\n\n                            @Override\n                            protected boolean checkValue(String attrName, ModelNode attribute, boolean isWriteAttribute) {\n                                if (attribute.isDefined()) {\n                                    return true;\n                                } else {\n                                    return false;\n                                }\n                            }\n\n                            @Override\n                            protected ModelNode correctValue(ModelNode toResolve, boolean isWriteAttribute) {\n                                return new ModelNode();\n                            }\n\n\n                        })\n\n        );\n }","commit_id":"a246e22a4650a86c4a2d3422798c986930cc8340","url":"https://github.com/wildfly/wildfly"},{"original_method":"static void registerTransformers111(ResourceTransformationDescriptionBuilder parentBuilder) {\n        ResourceTransformationDescriptionBuilder builder = parentBuilder.addChildResource(PATH_XA_DATASOURCE);\n        builder.getAttributeBuilder()\n                .setDiscard(DiscardAttributeChecker.UNDEFINED, org.jboss.as.connector.subsystems.common.pool.Constants.INITIAL_POOL_SIZE,\n                        CONNECTION_LISTENER_CLASS, CONNECTION_LISTENER_PROPERTIES, URL_PROPERTY,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_CLASS, org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_PROPERTIES, org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_PROPERTIES)\n                .setDiscard(new DiscardAttributeChecker() {\n\n                    @Override\n                    public boolean isDiscardExpressions() {\n                        return false;\n                    }\n\n                    @Override\n                    public boolean isDiscardUndefined() {\n                        return true;\n                    }\n\n                    @Override\n                    public boolean isOperationParameterDiscardable(PathAddress address, String attributeName,\n                                                                   ModelNode attributeValue, ModelNode operation, TransformationContext context) {\n                        return false;\n                    }\n\n                    @Override\n                    public boolean isResourceAttributeDiscardable(PathAddress address, String attributeName,\n                                                                  ModelNode attributeValue, TransformationContext context) {\n                        return true;\n                    }\n                }, ENABLED)\n                .addRejectCheck(RejectAttributeChecker.DEFINED, org.jboss.as.connector.subsystems.common.pool.Constants.INITIAL_POOL_SIZE,\n                        CONNECTION_LISTENER_CLASS, CONNECTION_LISTENER_PROPERTIES, URL_PROPERTY,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_CLASS, org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_PROPERTIES, org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_PROPERTIES)\n                .end();\n        builder.addOperationTransformationOverride(ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION)\n                .inheritResourceAttributeDefinitions()\n                .setCustomOperationTransformer(ENABLE_TRANSFORMER)\n                .end()\n                .addOperationTransformationOverride(ModelDescriptionConstants.UNDEFINE_ATTRIBUTE_OPERATION)\n                .inheritResourceAttributeDefinitions()\n                .setCustomOperationTransformer(ENABLE_TRANSFORMER)\n                .end();\n    }","id":10961,"modified_method":"static void registerTransformers111(ResourceTransformationDescriptionBuilder parentBuilder) {\n        ResourceTransformationDescriptionBuilder builder = parentBuilder.addChildResource(PATH_XA_DATASOURCE);\n        builder.getAttributeBuilder()\n                .setDiscard(DiscardAttributeChecker.UNDEFINED,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_PROPERTIES, CONNECTION_LISTENER_CLASS,\n                        CONNECTION_LISTENER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_CLASS,\n                        Constants.CONNECTION_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.INITIAL_POOL_SIZE\n                )\n                .addRejectCheck(RejectAttributeChecker.DEFINED,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_PROPERTIES, CONNECTION_LISTENER_CLASS,\n                        CONNECTION_LISTENER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_CLASS,\n                        Constants.CONNECTION_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.INITIAL_POOL_SIZE\n                )\n                        //Reject expressions for enabled, since if they are used we don't know their value for the operation transformer override\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, Constants.ENABLED)\n                .end()\n                .addOperationTransformationOverride(ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION)\n                .inheritResourceAttributeDefinitions()\n                .setCustomOperationTransformer(ENABLE_TRANSFORMER)\n                .end()\n                .addOperationTransformationOverride(ModelDescriptionConstants.UNDEFINE_ATTRIBUTE_OPERATION)\n                .inheritResourceAttributeDefinitions()\n                .setCustomOperationTransformer(ENABLE_TRANSFORMER)\n                .end();\n        ConnectionPropertyDefinition.registerTransformers11x(builder);\n    }","commit_id":"a246e22a4650a86c4a2d3422798c986930cc8340","url":"https://github.com/wildfly/wildfly"},{"original_method":"static void registerTransformers110(ResourceTransformationDescriptionBuilder parentBuilder) {\n        parentBuilder.addChildResource(PATH_XA_DATASOURCE)\n                .getAttributeBuilder().setDiscard(DiscardAttributeChecker.UNDEFINED, org.jboss.as.connector.subsystems.common.pool.Constants.INITIAL_POOL_SIZE,\n                URL_DELIMITER, URL_PROPERTY, CONNECTION_LISTENER_CLASS, CONNECTION_LISTENER_PROPERTIES,\n                org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_CLASS, org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_CLASS,\n                org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_PROPERTIES, org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_PROPERTIES)\n                .setDiscard(DiscardAttributeChecker.ALWAYS, ENABLED)\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, DATASOURCE_PROPERTIES_ATTRIBUTES)\n                        //.setValueConverter(AttributeConverter.Factory.createHardCoded(new ModelNode(false)), JTA)\n                .end();\n    }","id":10962,"modified_method":"static void registerTransformers110(ResourceTransformationDescriptionBuilder parentBuilder) {\n        ResourceTransformationDescriptionBuilder builder = parentBuilder.addChildResource(PATH_XA_DATASOURCE)\n                .getAttributeBuilder()\n                .setDiscard(DiscardAttributeChecker.UNDEFINED,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_PROPERTIES, CONNECTION_LISTENER_CLASS,\n                        CONNECTION_LISTENER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.INITIAL_POOL_SIZE\n                )\n                .addRejectCheck(RejectAttributeChecker.DEFINED,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_PROPERTIES, CONNECTION_LISTENER_CLASS,\n                        CONNECTION_LISTENER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_INCREMENTER_CLASS,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.CAPACITY_DECREMENTER_PROPERTIES,\n                        org.jboss.as.connector.subsystems.common.pool.Constants.INITIAL_POOL_SIZE\n                )\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, DATASOURCE_PROPERTIES_ATTRIBUTES)\n                        //These are not nillable in the old model\n                .addRejectCheck(RejectAttributeChecker.UNDEFINED, Constants.EXCEPTION_SORTER_PROPERTIES, Constants.REAUTHPLUGIN_PROPERTIES, Constants.STALE_CONNECTION_CHECKER_PROPERTIES, Constants.VALID_CONNECTION_CHECKER_PROPERTIES)\n                        //Reject expressions for enabled, since if they are used we don't know their value for the operation transformer override\n                .addRejectCheck(RejectAttributeChecker.SIMPLE_EXPRESSIONS, Constants.ENABLED)\n                .end()\n                .addOperationTransformationOverride(ModelDescriptionConstants.WRITE_ATTRIBUTE_OPERATION)\n                .inheritResourceAttributeDefinitions()\n                .setCustomOperationTransformer(ENABLE_TRANSFORMER)\n                .end()\n                .addOperationTransformationOverride(ModelDescriptionConstants.UNDEFINE_ATTRIBUTE_OPERATION)\n                .inheritResourceAttributeDefinitions()\n                .setCustomOperationTransformer(ENABLE_TRANSFORMER)\n                .end();\n        ConnectionPropertyDefinition.registerTransformers11x(builder);\n    }","commit_id":"a246e22a4650a86c4a2d3422798c986930cc8340","url":"https://github.com/wildfly/wildfly"},{"original_method":"private static Chunk loadChunk(CountingDataInputStream din, byte[] bytes) throws IOException {\r\n\t\tint id = din.readInt();\r\n\t\tint payloadSize = din.readInt();\r\n\t\tint numChildren = din.readInt();\t\r\n\t\tdin.skipBytes(payloadSize);\t\t\t\t\r\n\t\tChunk chunk = new Chunk(id, null, bytes, din.getReadBytes(), payloadSize);\r\n\t\tfor(int i = 0; i < numChildren; i++) {\r\n\t\t\tChunk child = loadChunk(din, bytes);\r\n\t\t\tchild.parent = chunk;\r\n\t\t\tchunk.children.add(child);\r\n\t\t}\r\n\t\treturn chunk;\r\n\t}","id":10963,"modified_method":"private static Chunk loadChunk(CountingDataInputStream din, byte[] bytes) throws IOException {\r\n\t\tint id = din.readInt();\r\n\t\tint payloadSize = din.readInt();\r\n\t\tint numChildren = din.readInt();\t\r\n\t\tint offset = din.getReadBytes();\r\n\t\tdin.skipBytes(payloadSize);\t\t\t\t\r\n\t\tChunk chunk = new Chunk(id, null, bytes, offset, payloadSize);\r\n\t\tfor(int i = 0; i < numChildren; i++) {\r\n\t\t\tChunk child = loadChunk(din, bytes);\r\n\t\t\tchild.parent = chunk;\r\n\t\t\tchunk.children.add(child);\r\n\t\t}\r\n\t\treturn chunk;\r\n\t}","commit_id":"14c9c8f89062250c10d8cf94dac03004529dbdcc","url":"https://github.com/libgdx/libgdx"},{"original_method":"public static void printChunks(Chunk chunk, int level) {\r\n\t\tString id = null;\r\n\t\tString payload = null;\r\n\t\tswitch(chunk.getId()) {\r\n\t\t\tcase G3D_ROOT: \r\n\t\t\t\tid = \"G3D_ROOT\"; \r\n\t\t\t\tbreak;\r\n\t\t\tcase VERSION_INFO: \r\n\t\t\t\tid = \"VERSION_INFO\";\r\n\t\t\t\tint major = chunk.readByte();\r\n\t\t\t\tint minor = chunk.readByte();\r\n\t\t\t\tpayload = rep(\"   \", level + 1) + \"major: \" + major + \", minor: \" + minor;\r\n\t\t\t\tbreak;\r\n\t\t\tcase STILL_MODEL: \r\n\t\t\t\tid = \"STILL_MODEL\";\r\n\t\t\t\tint subMeshes = chunk.readInt();\r\n\t\t\t\tpayload = rep(\"   \", level + 1) + \"#submeshes: \" + subMeshes;\r\n\t\t\t\tbreak;\r\n\t\t\tcase STILL_SUBMESH: \r\n\t\t\t\tid = \"STILL_SUBMESH\"; \r\n\t\t\t\tbreak;\r\n\t\t\tcase VERTEX_ATTRIBUTE: \r\n\t\t\t\tid = \"VERTEX_ATTRIBUTE\";\r\n\t\t\t\tint usage = chunk.readInt();\r\n\t\t\t\tint components = chunk.readInt();\r\n\t\t\t\tString name = chunk.readString();\r\n\t\t\t\tpayload = rep(\"   \", level + 1) + \"usage: \" + usage + \", components: \" + components + \", name: \" + name;\r\n\t\t\t\tbreak;\r\n\t\t\tcase VERTEX_ATTRIBUTES: \r\n\t\t\t\tid = \"VERTEX_ATTRIBUTES\"; \r\n\t\t\t\tint numAttributes = chunk.readInt();\r\n\t\t\t\tpayload = rep(\"   \", level + 1) + \"#attributes: \" + numAttributes;\r\n\t\t\t\tbreak;\r\n\t\t\tcase VERTEX_LIST: \r\n\t\t\t\tid = \"VERTEX_LIST\";\r\n\t\t\t\tfloat[] vertices = chunk.readFloats();\r\n\t\t\t\tpayload = rep(\"   \", level + 1) + Arrays.toString(vertices);\r\n\t\t\t\tbreak;\r\n\t\t\tcase INDEX_LIST: \r\n\t\t\t\tid = \"INDEX_LIST\";\r\n\t\t\t\tshort[] indices = chunk.readShorts();\r\n\t\t\t\tpayload = rep(\"   \", level + 1) + Arrays.toString(indices);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault: \r\n\t\t\t\tid =\"unknown [\" + id + \"]\";\r\n\t\t\t\tpayload = rep(\"   \", level + 1) + \"unknown\";\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(rep(\"   \", level) + id + \" {\");\r\n\t\tif(payload != null) System.out.println(payload);\r\n\t\tfor(Chunk child: chunk.getChildren()) {\r\n\t\t\tprintChunks(child, level+1);\r\n\t\t}\r\n\t\tSystem.out.println(rep(\"   \", level) + \"}\");\r\n\t}","id":10964,"modified_method":"public static void printChunks(Chunk chunk, int level) {\r\n\t\tString id = null;\r\n\t\tString payload = null;\r\n\t\tswitch(chunk.getId()) {\r\n\t\t\tcase G3D_ROOT: \r\n\t\t\t\tid = \"G3D_ROOT\"; \r\n\t\t\t\tbreak;\r\n\t\t\tcase VERSION_INFO: \r\n\t\t\t\tid = \"VERSION_INFO\";\r\n\t\t\t\tint major = chunk.readByte();\r\n\t\t\t\tint minor = chunk.readByte();\r\n\t\t\t\tpayload = rep(\"   \", level + 1) + \"major: \" + major + \", minor: \" + minor;\r\n\t\t\t\tbreak;\r\n\t\t\tcase STILL_MODEL: \r\n\t\t\t\tid = \"STILL_MODEL\";\r\n\t\t\t\tint subMeshes = chunk.readInt();\r\n\t\t\t\tpayload = rep(\"   \", level + 1) + \"#submeshes: \" + subMeshes;\r\n\t\t\t\tbreak;\r\n\t\t\tcase STILL_SUBMESH: \r\n\t\t\t\tid = \"STILL_SUBMESH\"; \r\n\t\t\t\tpayload = rep(\"   \", level + 1) + \"name: \" + chunk.readString();\r\n\t\t\t\tbreak;\r\n\t\t\tcase VERTEX_ATTRIBUTE: \r\n\t\t\t\tid = \"VERTEX_ATTRIBUTE\";\r\n\t\t\t\tint usage = chunk.readInt();\r\n\t\t\t\tint components = chunk.readInt();\r\n\t\t\t\tString name = chunk.readString();\r\n\t\t\t\tpayload = rep(\"   \", level + 1) + \"usage: \" + usage + \", components: \" + components + \", name: \" + name;\r\n\t\t\t\tbreak;\r\n\t\t\tcase VERTEX_ATTRIBUTES: \r\n\t\t\t\tid = \"VERTEX_ATTRIBUTES\"; \r\n\t\t\t\tint numAttributes = chunk.readInt();\r\n\t\t\t\tpayload = rep(\"   \", level + 1) + \"#attributes: \" + numAttributes;\r\n\t\t\t\tbreak;\r\n\t\t\tcase VERTEX_LIST: \r\n\t\t\t\tid = \"VERTEX_LIST\";\r\n\t\t\t\tfloat[] vertices = chunk.readFloats();\r\n\t\t\t\tpayload = rep(\"   \", level + 1) + Arrays.toString(vertices);\r\n\t\t\t\tbreak;\r\n\t\t\tcase INDEX_LIST: \r\n\t\t\t\tid = \"INDEX_LIST\";\r\n\t\t\t\tshort[] indices = chunk.readShorts();\r\n\t\t\t\tpayload = rep(\"   \", level + 1) + Arrays.toString(indices);\r\n\t\t\t\tbreak;\r\n\t\t\tdefault: \r\n\t\t\t\tid =\"unknown [\" + id + \"]\";\r\n\t\t\t\tpayload = rep(\"   \", level + 1) + \"unknown\";\r\n\t\t\t\tbreak;\r\n\t\t}\r\n\t\t\r\n\t\tSystem.out.println(rep(\"   \", level) + id + \" {\");\r\n\t\tif(payload != null) System.out.println(payload);\r\n\t\tfor(Chunk child: chunk.getChildren()) {\r\n\t\t\tprintChunks(child, level+1);\r\n\t\t}\r\n\t\tSystem.out.println(rep(\"   \", level) + \"}\");\r\n\t}","commit_id":"14c9c8f89062250c10d8cf94dac03004529dbdcc","url":"https://github.com/libgdx/libgdx"},{"original_method":"public static void main(String[] argv) throws IOException {\r\n\t\tChunkWriter writer = new ChunkWriter();\t\t\r\n\t\twriter.newChunk(VERSION_INFO);\r\n\t\t\twriter.writeByte(MAJOR_VERSION);\r\n\t\t\twriter.writeByte(MINOR_VERSION);\r\n\t\twriter.endChunk();\t\t\t\r\n\t\twriter.newChunk(STILL_MODEL);\t\t\t\r\n\t\t\twriter.writeInt(1);\t\t\t\t\t\t\t\t\r\n\t\t\twriter.newChunk(STILL_SUBMESH);\t\t\t\t\t\r\n\t\t\t\twriter.writeString(\"triangle\");\r\n\t\t\t\twriter.newChunk(VERTEX_ATTRIBUTES);\r\n\t\t\t\t\twriter.writeInt(1);\r\n\t\t\t\t\twriter.newChunk(VERTEX_ATTRIBUTE);\r\n\t\t\t\t\t\twriter.writeInt(Usage.Position);\r\n\t\t\t\t\t\twriter.writeInt(2);\r\n\t\t\t\t\t\twriter.writeString(\"a_pos\");\r\n\t\t\t\t\twriter.endChunk();\r\n\t\t\t\twriter.endChunk();\r\n\t\t\t\twriter.newChunk(VERTEX_LIST);\r\n\t\t\t\t\twriter.writeInt(6);\r\n\t\t\t\t\twriter.writeFloats(new float[] { -1, -1, 0, 1, 1, -1 } );\r\n\t\t\t\twriter.endChunk();\r\n\t\t\t\twriter.newChunk(INDEX_LIST);\r\n\t\t\t\t\twriter.writeInt(0);\r\n\t\t\t\twriter.endChunk();\r\n\t\t\twriter.endChunk();\t\t\t\t\r\n\t\twriter.endChunk();\t\t\r\n\t\t\r\n\t\tByteArrayOutputStream bytes = new ByteArrayOutputStream();\r\n\t\twriter.writeToStream(bytes);\r\n\t\tSystem.out.println(\"bytes: \" + bytes.toByteArray().length);\r\n\t\t\r\n\t\tChunk root = ChunkReader.readChunks(new ByteArrayInputStream(bytes.toByteArray()));\r\n\t\tprintChunks(root, 0);\r\n\t\t\r\n\t\tChunk version = root.getChild(VERSION_INFO);\r\n\t\tChunk stillModel = root.getChild(STILL_MODEL);\r\n\t}","id":10965,"modified_method":"public static void main(String[] argv) throws IOException {\r\n\t\tChunkWriter writer = new ChunkWriter();\t\t\r\n\t\twriter.newChunk(VERSION_INFO);\r\n\t\t\twriter.writeByte(MAJOR_VERSION);\r\n\t\t\twriter.writeByte(MINOR_VERSION);\r\n\t\twriter.endChunk();\t\t\t\r\n\t\twriter.newChunk(STILL_MODEL);\t\t\t\r\n\t\t\twriter.writeInt(2);\r\n\t\t\tfor(int i = 0; i < 2; i++) {\r\n\t\t\t\twriter.newChunk(STILL_SUBMESH);\t\t\t\t\t\r\n\t\t\t\t\twriter.writeString(\"triangle\" + i);\r\n\t\t\t\t\twriter.newChunk(VERTEX_ATTRIBUTES);\r\n\t\t\t\t\t\twriter.writeInt(1);\r\n\t\t\t\t\t\twriter.newChunk(VERTEX_ATTRIBUTE);\r\n\t\t\t\t\t\t\twriter.writeInt(Usage.Position);\r\n\t\t\t\t\t\t\twriter.writeInt(2);\r\n\t\t\t\t\t\t\twriter.writeString(\"a_pos\");\r\n\t\t\t\t\t\twriter.endChunk();\r\n\t\t\t\t\twriter.endChunk();\r\n\t\t\t\t\twriter.newChunk(VERTEX_LIST);\t\t\t\t\t\r\n\t\t\t\t\t\twriter.writeFloats(new float[] { -1, -1, 0, 1, 1, -1 } );\r\n\t\t\t\t\twriter.endChunk();\r\n\t\t\t\t\twriter.newChunk(INDEX_LIST);\r\n\t\t\t\t\t\twriter.writeShorts(new short[] { 0, 1, 2 } );\r\n\t\t\t\t\twriter.endChunk();\r\n\t\t\t\twriter.endChunk();\t\t\t\t\r\n\t\t\t}\r\n\t\twriter.endChunk();\t\t\r\n\t\t\r\n\t\tByteArrayOutputStream bytes = new ByteArrayOutputStream();\r\n\t\twriter.writeToStream(bytes);\r\n\t\tSystem.out.println(\"bytes: \" + bytes.toByteArray().length);\r\n\t\t\r\n\t\tChunk root = ChunkReader.readChunks(new ByteArrayInputStream(bytes.toByteArray()));\r\n\t\tprintChunks(root, 0);\r\n\t\t\r\n\t\tChunk version = root.getChild(VERSION_INFO);\r\n\t\tChunk stillModel = root.getChild(STILL_MODEL);\r\n\t}","commit_id":"14c9c8f89062250c10d8cf94dac03004529dbdcc","url":"https://github.com/libgdx/libgdx"},{"original_method":"static void fireCreateEvent( final Volume t ) {\n    try {\n      ListenerRegistry.getInstance( ).fireEvent( new StorageEvent( StorageEvent.EventType.EbsVolume, true, t.getSize( ),\n                                                                   t.getOwnerUserId( ), t.getOwnerUserName( ),\n                                                                   t.getOwnerAccountNumber( ), t.getOwnerAccountName( ),\n                                                                   t.getScName( ), t.getPartition( ) ) );\n    } catch ( final Exception ex ) {\n      LOG.error( ex );\n      Logs.extreme( ).error( ex, ex );\n    }\n  }","id":10966,"modified_method":"static void fireCreateEvent( final Volume t ) {\n    try {\n      final String userId = t.getOwnerUserId();\n      final String accountId = t.getOwnerAccountNumber();\n      final String userName = Accounts.lookupUserById(userId).getName();\n      final String accountName = Accounts.lookupAccountById(accountId).getName();\n\n      ListenerRegistry.getInstance( ).fireEvent( new StorageEvent( StorageEvent.EventType.EbsVolume, true, t.getSize( ),\n                                                                   userId, userName, accountId, accountName,\n                                                                   t.getScName( ), t.getPartition( ) ) );\n    } catch ( final Exception ex ) {\n      LOG.error( ex );\n      Logs.extreme( ).error( ex, ex );\n    }\n  }","commit_id":"0034969a5a26a26ab62199af72b8940a4d0a027e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"static void fireDeleteEvent( final Volume v ) {\n    try {\n      ListenerRegistry.getInstance( ).fireEvent( new StorageEvent( StorageEvent.EventType.EbsVolume, false, v.getSize( ),\n                                                                   v.getOwnerUserId( ), v.getOwnerUserName( ),\n                                                                   v.getOwnerAccountNumber( ), v.getOwnerAccountName( ),\n                                                                   v.getScName( ), v.getPartition( ) ) );\n    } catch ( final EventFailedException ex ) {\n      LOG.error( ex );\n      Logs.extreme( ).error( ex, ex );\n    }\n  }","id":10967,"modified_method":"static void fireDeleteEvent( final Volume v ) {\n    try {\n      final String userId = v.getOwnerUserId();\n      final String accountId = v.getOwnerAccountNumber();\n      final String userName = Accounts.lookupUserById(userId).getName();\n      final String accountName = Accounts.lookupAccountById(accountId).getName();\n\n      ListenerRegistry.getInstance( ).fireEvent( new StorageEvent( StorageEvent.EventType.EbsVolume, false, v.getSize( ),\n                                                                   userId, userName, accountId, accountName,\n                                                                   v.getScName( ), v.getPartition( ) ) );\n    } catch ( final Exception ex ) {\n      LOG.error( ex );\n      Logs.extreme( ).error( ex, ex );\n    }\n  }","commit_id":"0034969a5a26a26ab62199af72b8940a4d0a027e","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static void fireCreateEvent( final Snapshot snap ) {\n    try {\n      ListenerRegistry.getInstance( ).fireEvent( new StorageEvent( StorageEvent.EventType.EbsSnapshot, true, snap.getVolumeSize( ),\n                                                                   snap.getOwnerUserId( ), snap.getOwnerUserName( ),\n                                                                   snap.getOwnerAccountNumber( ), snap.getOwnerAccountName( ),\n                                                                   snap.getVolumeCluster( ), snap.getVolumePartition( ) ) );\n    } catch ( EventFailedException ex ) {\n      LOG.error( ex, ex );\n    }\n  }","id":10968,"modified_method":"public static void fireCreateEvent( final Snapshot snap ) {\n    try {\n      final String userId = snap.getOwnerUserId();\n      final String accountId = snap.getOwnerAccountNumber();\n      /*\n       * NOTE: We must lookup the account name and username for each event sent. This is for several reasons.\n       * First, the reporting subsystem keeps a historical record of all account names and usernames, so we\n       * need the account name and user name at each specific time. Second, the reporting subsystem is\n       * completely decoupled from the rest of the system and may run on a separate box with a different\n       * database (data warehouse configuration), so it will not have access to the Accounts class and cannot\n       * perform lookups, so it needs all information in the event. Third, the reporting subsystem could not\n       * perform lookups anyways, since the account or user may have been deleted but we wish to generate a\n       * historical report of his usage. For these reasons, we must provide all reporting information in the\n       * event, and must look it up every time to detect changes. -tw\n       */\n      final String userName = Accounts.lookupUserById(userId).getName();\n      final String accountName = Accounts.lookupAccountById(accountId).getName();\n\n      ListenerRegistry.getInstance( ).fireEvent( new StorageEvent( StorageEvent.EventType.EbsSnapshot, true, snap.getVolumeSize( ),\n                                                                   userId, userName, accountId, accountName,\n                                                                   snap.getVolumeCluster( ), snap.getVolumePartition( ) ) );\n    } catch ( Exception ex ) {\n      LOG.error( ex );\n    }\n  }","commit_id":"83dd12b64ef5cbc9e3fedf78d992d32c75bc38b2","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"public static void fireDeleteEvent( Snapshot snap ) {\n    try {\n      ListenerRegistry.getInstance( ).fireEvent( new StorageEvent( StorageEvent.EventType.EbsSnapshot, false, snap.getVolumeSize( ),\n                                                                   snap.getOwnerUserId( ), snap.getOwnerUserName( ),\n                                                                   snap.getOwnerAccountNumber( ), snap.getOwnerAccountName( ),\n                                                                   snap.getVolumeCluster( ), snap.getVolumePartition( ) ) );\n    } catch ( Exception ex ) {\n      SnapshotManager.LOG.error( ex );\n      Logs.extreme( ).error( ex, ex );\n    }\n  }","id":10969,"modified_method":"public static void fireDeleteEvent( Snapshot snap ) {\n    try {\n      final String userId = snap.getOwnerUserId();\n      final String accountId = snap.getOwnerAccountNumber();\n      /* NOTE: see comment in fireCreateEvent method above */\n      final String userName = Accounts.lookupUserById(userId).getName();\n      final String accountName = Accounts.lookupAccountById(accountId).getName();\n\n      ListenerRegistry.getInstance( ).fireEvent( new StorageEvent( StorageEvent.EventType.EbsSnapshot, false, snap.getVolumeSize( ),\n                                                                   userId, userName, accountId, accountName,\n                                                                   snap.getVolumeCluster( ), snap.getVolumePartition( ) ) );\n    } catch ( Exception ex ) {\n      LOG.error( ex );\n    }\n  }","commit_id":"83dd12b64ef5cbc9e3fedf78d992d32c75bc38b2","url":"https://github.com/eucalyptus/eucalyptus"},{"original_method":"private static VCFHeader createVCFHeader(VariantContext vc) {\n        return new VCFHeader(new HashSet<VCFHeaderLine>(), vc.getGenotypes().getSampleNamesSorted());\n    }","id":10970,"modified_method":"private static VCFHeader createVCFHeader(VariantContext vc) {\n        return new VCFHeader(new HashSet<VCFHeaderLine>(), vc.getGenotypes().getSampleNamesOrderedByName());\n    }","commit_id":"4ff8225d787bbb96cfd472a186068a4d01e66802","url":"https://github.com/broadgsa/gatk"},{"original_method":"private void parseGenotypes(VCFCodec codec, Operation op, SubContextOp subop ) {\n        try {\n            InputStream is = new ByteArrayInputStream(INPUT_STRING.getBytes());\n            AsciiLineReader lineReader = new AsciiLineReader(is);\n            codec.readHeader(lineReader);\n\n            int counter = 0;\n            List<String> samples = null;\n            while (counter++ < linesToRead ) {\n                String line = lineReader.readLine();\n                if ( line == null )\n                    break;\n\n                VariantContext vc = (VariantContext)codec.decode(line);\n                if ( samples == null ) {\n                    samples = new ArrayList<String>(vc.getSampleNames()).subList(0, nSamplesToTake);\n                }\n\n                if ( op == Operation.READ_SUBSET)\n                    processOneVC(vc, samples, subop);\n            }\n        } catch (Exception e) {\n            System.out.println(\"Benchmarking run failure because of \" + e.getMessage());\n        }\n    }","id":10971,"modified_method":"private void parseGenotypes(VCFCodec codec, Operation op, SubContextOp subop ) {\n        try {\n            InputStream is = new ByteArrayInputStream(INPUT_STRING.getBytes());\n            AsciiLineReader lineReader = new AsciiLineReader(is);\n            codec.readHeader(lineReader);\n\n            int counter = 0;\n            Set<String> samples = null;\n            while (counter++ < linesToRead ) {\n                String line = lineReader.readLine();\n                if ( line == null )\n                    break;\n\n                VariantContext vc = (VariantContext)codec.decode(line);\n                if ( samples == null ) {\n                    samples = new HashSet<String>(new ArrayList<String>(vc.getSampleNames()).subList(0, nSamplesToTake));\n                }\n\n                if ( op == Operation.READ_SUBSET)\n                    processOneVC(vc, samples, subop);\n            }\n        } catch (Exception e) {\n            System.out.println(\"Benchmarking run failure because of \" + e.getMessage());\n        }\n    }","commit_id":"4ff8225d787bbb96cfd472a186068a4d01e66802","url":"https://github.com/broadgsa/gatk"},{"original_method":"private static final void processOneVC(VariantContext vc, List<String> samples, SubContextOp subop) {\n        VariantContext sub;\n\n        switch ( subop ) {\n            case OF_GENOTYPES:\n                sub = vc.subContextFromGenotypes(vc.getGenotypes(samples).values(), vc.getAlleles());\n                break;\n            case OF_SAMPLES:\n                sub = vc.subContextFromSamples(samples, vc.getAlleles());\n                break;\n            default:\n                throw new RuntimeException(\"Unexpected op: \" + subop);\n        }\n\n        sub.getNSamples();\n    }","id":10972,"modified_method":"private static final void processOneVC(VariantContext vc, Set<String> samples, SubContextOp subop) {\n        VariantContext sub;\n\n        switch ( subop ) {\n            case OF_SAMPLES:\n                sub = vc.subContextFromSamples(samples, vc.getAlleles());\n                break;\n            default:\n                throw new RuntimeException(\"Unexpected op: \" + subop);\n        }\n\n        sub.getNSamples();\n    }","commit_id":"4ff8225d787bbb96cfd472a186068a4d01e66802","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Test\n    public void testVCromGenotypes() {\n        List<Allele> alleles = Arrays.asList(Aref, T, del);\n        Genotype g1 = new Genotype(\"AA\", Arrays.asList(Aref, Aref), 10);\n        Genotype g2 = new Genotype(\"AT\", Arrays.asList(Aref, T), 10);\n        Genotype g3 = new Genotype(\"TT\", Arrays.asList(T, T), 10);\n        Genotype g4 = new Genotype(\"..\", Arrays.asList(Allele.NO_CALL, Allele.NO_CALL), 10);\n        Genotype g5 = new Genotype(\"--\", Arrays.asList(del, del), 10);\n        VariantContext vc = new VariantContext(\"test\", snpLoc,snpLocStart, snpLocStop , alleles, Arrays.asList(g1,g2,g3,g4,g5));\n\n        VariantContext vc12 = vc.subContextFromGenotypes(Arrays.asList(g1,g2));\n        VariantContext vc1 = vc.subContextFromGenotypes(Arrays.asList(g1));\n        VariantContext vc23 = vc.subContextFromGenotypes(Arrays.asList(g2, g3));\n        VariantContext vc4 = vc.subContextFromGenotypes(Arrays.asList(g4));\n        VariantContext vc14 = vc.subContextFromGenotypes(Arrays.asList(g1, g4));\n        VariantContext vc5 = vc.subContextFromGenotypes(Arrays.asList(g5));\n\n        Assert.assertTrue(vc12.isPolymorphic());\n        Assert.assertTrue(vc23.isPolymorphic());\n        Assert.assertTrue(vc1.isMonomorphic());\n        Assert.assertTrue(vc4.isMonomorphic());\n        Assert.assertTrue(vc14.isMonomorphic());\n        Assert.assertTrue(vc5.isPolymorphic());\n\n        Assert.assertTrue(vc12.isSNP());\n        Assert.assertTrue(vc12.isVariant());\n        Assert.assertTrue(vc12.isBiallelic());\n\n        Assert.assertFalse(vc1.isSNP());\n        Assert.assertFalse(vc1.isVariant());\n        Assert.assertFalse(vc1.isBiallelic());\n\n        Assert.assertTrue(vc23.isSNP());\n        Assert.assertTrue(vc23.isVariant());\n        Assert.assertTrue(vc23.isBiallelic());\n\n        Assert.assertFalse(vc4.isSNP());\n        Assert.assertFalse(vc4.isVariant());\n        Assert.assertFalse(vc4.isBiallelic());\n\n        Assert.assertFalse(vc14.isSNP());\n        Assert.assertFalse(vc14.isVariant());\n        Assert.assertFalse(vc14.isBiallelic());\n\n        Assert.assertTrue(vc5.isIndel());\n        Assert.assertTrue(vc5.isSimpleDeletion());\n        Assert.assertTrue(vc5.isVariant());\n        Assert.assertTrue(vc5.isBiallelic());\n\n        Assert.assertEquals(3, vc12.getChromosomeCount(Aref));\n        Assert.assertEquals(1, vc23.getChromosomeCount(Aref));\n        Assert.assertEquals(2, vc1.getChromosomeCount(Aref));\n        Assert.assertEquals(0, vc4.getChromosomeCount(Aref));\n        Assert.assertEquals(2, vc14.getChromosomeCount(Aref));\n        Assert.assertEquals(0, vc5.getChromosomeCount(Aref));\n    }","id":10973,"modified_method":"@Test\n    public void testVCromGenotypes() {\n        List<Allele> alleles = Arrays.asList(Aref, T, del);\n        Genotype g1 = new Genotype(\"AA\", Arrays.asList(Aref, Aref), 10);\n        Genotype g2 = new Genotype(\"AT\", Arrays.asList(Aref, T), 10);\n        Genotype g3 = new Genotype(\"TT\", Arrays.asList(T, T), 10);\n        Genotype g4 = new Genotype(\"..\", Arrays.asList(Allele.NO_CALL, Allele.NO_CALL), 10);\n        Genotype g5 = new Genotype(\"--\", Arrays.asList(del, del), 10);\n        VariantContext vc = new VariantContext(\"test\", snpLoc,snpLocStart, snpLocStop , alleles, Arrays.asList(g1,g2,g3,g4,g5));\n\n        VariantContext vc12 = vc.subContextFromSamples(new HashSet<String>(Arrays.asList(g1.getSampleName(),g2.getSampleName())));\n        VariantContext vc1 = vc.subContextFromSamples(new HashSet<String>(Arrays.asList(g1.getSampleName())));\n        VariantContext vc23 = vc.subContextFromSamples(new HashSet<String>(Arrays.asList(g2.getSampleName(), g3.getSampleName())));\n        VariantContext vc4 = vc.subContextFromSamples(new HashSet<String>(Arrays.asList(g4.getSampleName())));\n        VariantContext vc14 = vc.subContextFromSamples(new HashSet<String>(Arrays.asList(g1.getSampleName(), g4.getSampleName())));\n        VariantContext vc5 = vc.subContextFromSamples(new HashSet<String>(Arrays.asList(g5.getSampleName())));\n\n        Assert.assertTrue(vc12.isPolymorphic());\n        Assert.assertTrue(vc23.isPolymorphic());\n        Assert.assertTrue(vc1.isMonomorphic());\n        Assert.assertTrue(vc4.isMonomorphic());\n        Assert.assertTrue(vc14.isMonomorphic());\n        Assert.assertTrue(vc5.isPolymorphic());\n\n        Assert.assertTrue(vc12.isSNP());\n        Assert.assertTrue(vc12.isVariant());\n        Assert.assertTrue(vc12.isBiallelic());\n\n        Assert.assertFalse(vc1.isSNP());\n        Assert.assertFalse(vc1.isVariant());\n        Assert.assertFalse(vc1.isBiallelic());\n\n        Assert.assertTrue(vc23.isSNP());\n        Assert.assertTrue(vc23.isVariant());\n        Assert.assertTrue(vc23.isBiallelic());\n\n        Assert.assertFalse(vc4.isSNP());\n        Assert.assertFalse(vc4.isVariant());\n        Assert.assertFalse(vc4.isBiallelic());\n\n        Assert.assertFalse(vc14.isSNP());\n        Assert.assertFalse(vc14.isVariant());\n        Assert.assertFalse(vc14.isBiallelic());\n\n        Assert.assertTrue(vc5.isIndel());\n        Assert.assertTrue(vc5.isSimpleDeletion());\n        Assert.assertTrue(vc5.isVariant());\n        Assert.assertTrue(vc5.isBiallelic());\n\n        Assert.assertEquals(3, vc12.getChromosomeCount(Aref));\n        Assert.assertEquals(1, vc23.getChromosomeCount(Aref));\n        Assert.assertEquals(2, vc1.getChromosomeCount(Aref));\n        Assert.assertEquals(0, vc4.getChromosomeCount(Aref));\n        Assert.assertEquals(2, vc14.getChromosomeCount(Aref));\n        Assert.assertEquals(0, vc5.getChromosomeCount(Aref));\n    }","commit_id":"4ff8225d787bbb96cfd472a186068a4d01e66802","url":"https://github.com/broadgsa/gatk"},{"original_method":"@Override\n\tpublic void setDocument(IDocument document, IAnnotationModel annotationModel) {\n\t\tsuper.setDocument(document, annotationModel);\n\t\t((IXtextDocument) getDocument()).addModelListener(this);\n\t}","id":10974,"modified_method":"@Override\n\tpublic void setDocument(IDocument document, IAnnotationModel annotationModel) {\n\t\tif (getDocument() != null)\n\t\t\t((IXtextDocument) getDocument()).removeModelListener(this);\n\t\tsuper.setDocument(document, annotationModel);\n\t\tif (document != null)\n\t\t\t((IXtextDocument) getDocument()).addModelListener(this);\n\t}","commit_id":"a7767133eb2b233dee6573336493897b9e432e4a","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic void setDocument(IDocument document, int visibleRegionOffset, int visibleRegionLength) {\n\t\tsuper.setDocument(document, visibleRegionOffset, visibleRegionLength);\n\t\t((IXtextDocument) getDocument()).addModelListener(this);\n\t}","id":10975,"modified_method":"@Override\n\tpublic void setDocument(IDocument document, int visibleRegionOffset, int visibleRegionLength) {\n\t\tif (getDocument() != null)\n\t\t\t((IXtextDocument) getDocument()).removeModelListener(this);\n\t\tsuper.setDocument(document, visibleRegionOffset, visibleRegionLength);\n\t\tif (document != null)\n\t\t\t((IXtextDocument) getDocument()).addModelListener(this);\n\t}","commit_id":"a7767133eb2b233dee6573336493897b9e432e4a","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic void setDocument(IDocument document, IAnnotationModel annotationModel, int modelRangeOffset,\n\t\t\tint modelRangeLength) {\n\t\tsuper.setDocument(document, annotationModel, modelRangeOffset, modelRangeLength);\n\t\t((IXtextDocument) getDocument()).addModelListener(this);\n\t}","id":10976,"modified_method":"@Override\n\tpublic void setDocument(IDocument document, IAnnotationModel annotationModel, int modelRangeOffset,\n\t\t\tint modelRangeLength) {\n\t\tif (getDocument() != null)\n\t\t\t((IXtextDocument) getDocument()).removeModelListener(this);\n\t\tsuper.setDocument(document, annotationModel, modelRangeOffset, modelRangeLength);\n\t\tif (document != null)\n\t\t\t((IXtextDocument) getDocument()).addModelListener(this);\n\t}","commit_id":"a7767133eb2b233dee6573336493897b9e432e4a","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic void setDocument(IDocument document, IAnnotationModel annotationModel, int modelRangeOffset,\n\t\t\tint modelRangeLength) {\n\t\tsuper.setDocument(document, annotationModel, modelRangeOffset, modelRangeLength);\n\t\t((IXtextDocument) getDocument()).addModelListener(this);\n\t}","id":10977,"modified_method":"@Override\n\tpublic void setDocument(IDocument document, IAnnotationModel annotationModel, int modelRangeOffset,\n\t\t\tint modelRangeLength) {\n\t\tif (getDocument() != null)\n\t\t\t((IXtextDocument) getDocument()).removeModelListener(this);\n\t\tsuper.setDocument(document, annotationModel, modelRangeOffset, modelRangeLength);\n\t\tif (document != null)\n\t\t\t((IXtextDocument) getDocument()).addModelListener(this);\n\t}","commit_id":"34c6425f47028d82d87ebfb1076502a575517b37","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic void setDocument(IDocument document, IAnnotationModel annotationModel) {\n\t\tsuper.setDocument(document, annotationModel);\n\t\t((IXtextDocument) getDocument()).addModelListener(this);\n\t}","id":10978,"modified_method":"@Override\n\tpublic void setDocument(IDocument document, IAnnotationModel annotationModel) {\n\t\tif (getDocument() != null)\n\t\t\t((IXtextDocument) getDocument()).removeModelListener(this);\n\t\tsuper.setDocument(document, annotationModel);\n\t\tif (document != null)\n\t\t\t((IXtextDocument) getDocument()).addModelListener(this);\n\t}","commit_id":"34c6425f47028d82d87ebfb1076502a575517b37","url":"https://github.com/eclipse/xtext"},{"original_method":"@Override\n\tpublic void setDocument(IDocument document, int visibleRegionOffset, int visibleRegionLength) {\n\t\tsuper.setDocument(document, visibleRegionOffset, visibleRegionLength);\n\t\t((IXtextDocument) getDocument()).addModelListener(this);\n\t}","id":10979,"modified_method":"@Override\n\tpublic void setDocument(IDocument document, int visibleRegionOffset, int visibleRegionLength) {\n\t\tif (getDocument() != null)\n\t\t\t((IXtextDocument) getDocument()).removeModelListener(this);\n\t\tsuper.setDocument(document, visibleRegionOffset, visibleRegionLength);\n\t\tif (document != null)\n\t\t\t((IXtextDocument) getDocument()).addModelListener(this);\n\t}","commit_id":"34c6425f47028d82d87ebfb1076502a575517b37","url":"https://github.com/eclipse/xtext"},{"original_method":"/**\n\t * Construct. Lenient is false.\n\t */\n\tpublic DateConverter()\n\t{\n\t\tsuper();\n\t\tlenient = false;\n\t}","id":10980,"modified_method":"/**\n\t * Construct.\n\t */\n\tpublic DateConverter()\n\t{\n\t}","commit_id":"796b74925c767f2443beade30c886fe0c6dc8202","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @param locale \n\t * @return Returns the date format.\n\t */\n\tpublic DateFormat getDateFormat(Locale locale)\n\t{\n\t\tif (locale == null)\n\t\t{\n\t\t\tlocale = Locale.getDefault();\n\t\t}\n\n\t\tDateFormat dateFormat = (DateFormat)dateFormats.get(locale);\n\t\tif (dateFormat == null)\n\t\t{\n\t\t\tdateFormat = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n\t\t\tdateFormat.setLenient(lenient);\n\t\t\tdateFormats.put(locale, dateFormat);\n\t\t}\n\t\treturn dateFormat;\n\t}","id":10981,"modified_method":"/**\n\t * @param locale\n\t * @return Returns the date format.\n\t */\n\tpublic DateFormat getDateFormat(Locale locale)\n\t{\n\t\tif (locale == null)\n\t\t{\n\t\t\tlocale = Locale.getDefault();\n\t\t}\n\n\t\treturn DateFormat.getDateInstance(DateFormat.SHORT, locale);\n\t}","commit_id":"796b74925c767f2443beade30c886fe0c6dc8202","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @param locale \n\t * @return Returns the dateFormat.\n\t */\n\tpublic final DateFormat getDateFormat(Locale locale)\n\t{\n\t\tDateFormat dateFormat = (DateFormat)dateFormats.get(locale);\n\t\tif (dateFormat == null)\n\t\t{\n\t\t\tdateFormat = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n\t\t\tdateFormats.put(locale, dateFormat);\n\t\t}\n\t\treturn dateFormat;\n\t}","id":10982,"modified_method":"/**\n\t * @param locale\n\t * @return Returns the dateFormat.\n\t */\n\tpublic DateFormat getDateFormat(Locale locale)\n\t{\n\t\treturn DateFormat.getDateInstance(DateFormat.SHORT, locale);\n\t}","commit_id":"0049ed17887a6ef986784a2ac5112db80ef81f3c","url":"https://github.com/apache/wicket"},{"original_method":"protected Class getTargetType()\n\t{\n\t\treturn String.class;\n\t}","id":10983,"modified_method":"/**\n\t * @see wicket.util.convert.converters.AbstractConverter#getTargetType()\n\t */\n\tprotected Class getTargetType()\n\t{\n\t\treturn String.class;\n\t}","commit_id":"0049ed17887a6ef986784a2ac5112db80ef81f3c","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @param locale\n\t * @return Returns the date format.\n\t */\n\tpublic DateFormat getDateFormat(Locale locale)\n\t{\n\t\tif (locale == null)\n\t\t{\n\t\t\tlocale = Locale.getDefault();\n\t\t}\n\n\t\tDateFormat dateFormat = dateFormats.get(locale);\n\t\tif (dateFormat == null)\n\t\t{\n\t\t\tdateFormat = DateFormat.getDateInstance(DateFormat.SHORT, locale);\n\t\t\tdateFormat.setLenient(lenient);\n\t\t\tdateFormats.put(locale, dateFormat);\n\t\t}\n\t\treturn dateFormat;\n\t}","id":10984,"modified_method":"/**\n\t * @param locale\n\t * @return Returns the date format.\n\t */\n\tpublic DateFormat getDateFormat(Locale locale)\n\t{\n\t\tif (locale == null)\n\t\t{\n\t\t\tlocale = Locale.getDefault();\n\t\t}\n\n\t\treturn DateFormat.getDateInstance(DateFormat.SHORT, locale);\n\t}","commit_id":"c0e31b502becc63f9596123a46df3ac84c6e25a6","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Construct. Lenient is false.\n\t */\n\tpublic DateConverter()\n\t{\n\t\tsuper();\n\t\tlenient = false;\n\t}","id":10985,"modified_method":"/**\n\t * Construct.\n\t */\n\tpublic DateConverter()\n\t{\n\t}","commit_id":"c0e31b502becc63f9596123a46df3ac84c6e25a6","url":"https://github.com/apache/wicket"},{"original_method":"public void warn(String msg, Throwable th)\n    {\n        String d=_dateCache.now();\n        int ms=_dateCache.lastMs();  \n        synchronized(_buffer)\n        {\n            tag(d,ms,\":WARN:\");\n            format(msg);\n            if (_hideStacks)\n                format(String.valueOf(th));\n            else\n                format(th);\n            System.err.println(_buffer.toString());\n        }    \n    }","id":10986,"modified_method":"public void warn(String msg, Throwable th)\n    {\n        String d = _dateCache.now();\n        int ms = _dateCache.lastMs();\n        StringBuilder buffer = new StringBuilder(64);\n        tag(buffer,d,ms, \":WARN:\");\n        format(buffer, msg);\n        if (_hideStacks)\n            format(buffer, String.valueOf(th));\n        else\n            format(th, buffer);\n        System.err.println(buffer);\n\n    }","commit_id":"e0d07733bd3f03c1337f200523bf9fec220d0cad","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void info(String msg)\n    {\n        String d=_dateCache.now();\n        int ms=_dateCache.lastMs();\n        synchronized(_buffer)\n        {\n            tag(d,ms,\":INFO:\");\n            format(msg);\n            System.err.println(_buffer.toString());\n        }\n    }","id":10987,"modified_method":"public void info(String msg)\n    {\n        String d = _dateCache.now();\n        int ms = _dateCache.lastMs();\n        StringBuilder buffer = new StringBuilder(64);\n        tag(buffer,d,ms, \":INFO:\");\n        format(buffer, msg);\n        System.err.println(buffer);\n\n    }","commit_id":"e0d07733bd3f03c1337f200523bf9fec220d0cad","url":"https://github.com/eclipse/jetty.project"},{"original_method":"private void format(String msg)\n    {\n        if (msg == null)\n            _buffer.append(\"null\");\n        else\n            for (int i=0;i<msg.length();i++)\n            {\n                char c=msg.charAt(i);\n                if (Character.isISOControl(c))\n                {\n                    if (c=='\\n')\n                        _buffer.append('|');\n                    else if (c=='\\r')\n                        _buffer.append('<');\n                    else\n                        _buffer.append('?');\n                }\n                else\n                    _buffer.append(c);\n            }\n    }","id":10988,"modified_method":"private void format(StringBuilder buffer, String msg)\n    {\n        if (msg == null)\n            buffer.append(\"null\");\n        else\n            for (int i = 0; i < msg.length(); i++)\n            {\n                char c = msg.charAt(i);\n                if (Character.isISOControl(c))\n                {\n                    if (c == '\\n')\n                        buffer.append('|');\n                    else if (c == '\\r')\n                        buffer.append('<');\n                    else\n                        buffer.append('?');\n                }\n                else\n                    buffer.append(c);\n            }\n    }","commit_id":"e0d07733bd3f03c1337f200523bf9fec220d0cad","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void warn(String msg)\n    {\n        String d=_dateCache.now();\n        int ms=_dateCache.lastMs();\n        synchronized(_buffer)\n        {\n            tag(d,ms,\":WARN:\");\n            format(msg);\n            System.err.println(_buffer.toString());\n        }\n    }","id":10989,"modified_method":"public void warn(String msg)\n    {\n        String d = _dateCache.now();\n        int ms = _dateCache.lastMs();\n        StringBuilder buffer = new StringBuilder(64);\n        tag(buffer,d,ms, \":WARN:\");\n        format(buffer, msg);\n        System.err.println(buffer);\n    }","commit_id":"e0d07733bd3f03c1337f200523bf9fec220d0cad","url":"https://github.com/eclipse/jetty.project"},{"original_method":"private void format(Throwable th)\n    {\n        if (th == null)\n            _buffer.append(\"null\");\n        else\n        {\n            _buffer.append('\\n');\n            format(th.toString());\n            StackTraceElement[] elements = th.getStackTrace();\n            for (int i=0;elements!=null && i<elements.length;i++)\n            {\n                _buffer.append(\"\\n\\tat \");\n                format(elements[i].toString());\n            }\n        }\n    }","id":10990,"modified_method":"private void format(Throwable th, StringBuilder buffer)\n    {\n        if (th == null)\n            buffer.append(\"null\");\n        else\n        {\n            buffer.append('\\n');\n            format(buffer, th.toString());\n            StackTraceElement[] elements = th.getStackTrace();\n            for (int i = 0; elements != null && i < elements.length; i++)\n            {\n                buffer.append(\"\\n\\tat \");\n                format(buffer, elements[i].toString());\n            }\n        }\n    }","commit_id":"e0d07733bd3f03c1337f200523bf9fec220d0cad","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void info(String msg,Object arg0, Object arg1)\n    {\n        String d=_dateCache.now();\n        int ms=_dateCache.lastMs();\n        synchronized(_buffer)\n        {\n            tag(d,ms,\":INFO:\");\n            format(msg,arg0,arg1);\n            System.err.println(_buffer.toString());\n        }\n    }","id":10991,"modified_method":"public void info(String msg, Object arg0, Object arg1)\n    {\n        String d = _dateCache.now();\n        int ms = _dateCache.lastMs();\n        StringBuilder buffer = new StringBuilder(64);\n        tag(buffer,d,ms, \":INFO:\");\n        format(buffer,msg,arg0, arg1);\n        System.err.println(buffer);\n\n    }","commit_id":"e0d07733bd3f03c1337f200523bf9fec220d0cad","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void debug(String msg,Throwable th)\n    {\n        if (_debug)\n        {\n            String d=_dateCache.now();\n            int ms=_dateCache.lastMs();\n            synchronized(_buffer)\n            {\n                tag(d,ms,\":DBUG:\");\n                format(msg);\n                if (_hideStacks)\n                    format(String.valueOf(th));\n                else\n                    format(th);\n                System.err.println(_buffer.toString());\n            }\n        }\n    }","id":10992,"modified_method":"public void debug(String msg, Throwable th)\n    {\n        if (_debug)\n        {\n            String d = _dateCache.now();\n            int ms = _dateCache.lastMs();\n            StringBuilder buffer = new StringBuilder(64);\n            tag(buffer,d,ms, \":DBUG:\");\n            format(buffer, msg);\n            if (_hideStacks)\n                format(buffer, String.valueOf(th));\n            else\n                format(th, buffer);\n            System.err.println(buffer);\n        }\n    }","commit_id":"e0d07733bd3f03c1337f200523bf9fec220d0cad","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void debug(String msg,Object arg0, Object arg1)\n    {\n        if (_debug)\n        {\n            String d=_dateCache.now();\n            int ms=_dateCache.lastMs();\n            synchronized(_buffer)\n            {\n                tag(d,ms,\":DBUG:\");\n                format(msg,arg0,arg1);\n                System.err.println(_buffer.toString());\n            }\n        }\n    }","id":10993,"modified_method":"public void debug(String msg, Object arg0, Object arg1)\n    {\n        if (_debug)\n        {\n            String d = _dateCache.now();\n            int ms = _dateCache.lastMs();\n            StringBuilder buffer = new StringBuilder(64);\n            tag(buffer,d,ms, \":DBUG:\");\n            format(buffer,msg,arg0, arg1);\n            System.err.println(buffer);\n        }\n    }","commit_id":"e0d07733bd3f03c1337f200523bf9fec220d0cad","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void warn(String msg,Object arg0, Object arg1)\n    {\n        String d=_dateCache.now();\n        int ms=_dateCache.lastMs();\n        synchronized(_buffer)\n        {\n            tag(d,ms,\":WARN:\");\n            format(msg,arg0,arg1);\n            System.err.println(_buffer.toString());\n        }\n    }","id":10994,"modified_method":"public void warn(String msg, Object arg0, Object arg1)\n    {\n        String d = _dateCache.now();\n        int ms = _dateCache.lastMs();\n        StringBuilder buffer = new StringBuilder(64);\n        tag(buffer,d,ms, \":WARN:\");\n        format(buffer,msg,arg0, arg1);\n        System.err.println(buffer);\n    }","commit_id":"e0d07733bd3f03c1337f200523bf9fec220d0cad","url":"https://github.com/eclipse/jetty.project"},{"original_method":"private void format(String msg, Object arg0, Object arg1)\n    {\n        int i0=msg==null?-1:msg.indexOf(\"{}\");\n        int i1=i0<0?-1:msg.indexOf(\"{}\",i0+2);\n        \n        if (i0>=0)\n        {\n            format(msg.substring(0,i0));\n            format(String.valueOf(arg0==null?\"null\":arg0));\n            \n            if (i1>=0)\n            {\n                format(msg.substring(i0+2,i1));\n                format(String.valueOf(arg1==null?\"null\":arg1));\n                format(msg.substring(i1+2));\n            }\n            else\n            {\n                format(msg.substring(i0+2));\n                if (arg1!=null)\n                {\n                    _buffer.append(' ');\n                    format(String.valueOf(arg1));\n                }\n            }\n        }\n        else\n        {\n            format(msg);\n            if (arg0!=null)\n            {\n                _buffer.append(' ');\n                format(String.valueOf(arg0));\n            }\n            if (arg1!=null)\n            {\n                _buffer.append(' ');\n                format(String.valueOf(arg1));\n            }\n        }\n    }","id":10995,"modified_method":"private void format(StringBuilder buffer, String msg, Object arg0, Object arg1)\n    {\n        int i0 = msg == null?-1:msg.indexOf(\"{}\");\n        int i1 = i0 < 0?-1:msg.indexOf(\"{}\",i0 + 2);\n\n        if (i0 >= 0)\n        {\n            format(buffer, msg.substring(0,i0));\n            format(buffer, String.valueOf(arg0 == null?\"null\":arg0));\n\n            if (i1 >= 0)\n            {\n                format(buffer, msg.substring(i0 + 2,i1));\n                format(buffer, String.valueOf(arg1 == null?\"null\":arg1));\n                format(buffer, msg.substring(i1 + 2));\n            }\n            else\n            {\n                format(buffer, msg.substring(i0 + 2));\n                if (arg1 != null)\n                {\n                    buffer.append(' ');\n                    format(buffer, String.valueOf(arg1));\n                }\n            }\n        }\n        else\n        {\n            format(buffer, msg);\n            if (arg0 != null)\n            {\n                buffer.append(' ');\n                format(buffer, String.valueOf(arg0));\n            }\n            if (arg1 != null)\n            {\n                buffer.append(' ');\n                format(buffer, String.valueOf(arg1));\n            }\n        }\n    }","commit_id":"e0d07733bd3f03c1337f200523bf9fec220d0cad","url":"https://github.com/eclipse/jetty.project"},{"original_method":"private void tag(String d,int ms,String tag)\n    {\n        _buffer.setLength(0);\n        _buffer.append(d);\n        if (ms>99)\n            _buffer.append('.');\n        else if (ms>9)\n            _buffer.append(\".0\");\n        else\n            _buffer.append(\".00\");\n        _buffer.append(ms).append(tag).append(_name).append(':');\n    }","id":10996,"modified_method":"private void tag(StringBuilder buffer, String d, int ms, String tag)\n    {\n        buffer.setLength(0);\n        buffer.append(d);\n        if (ms > 99)\n            buffer.append('.');\n        else if (ms > 9)\n            buffer.append(\".0\");\n        else\n            buffer.append(\".00\");\n        buffer.append(ms).append(tag).append(_name).append(':');\n    }","commit_id":"e0d07733bd3f03c1337f200523bf9fec220d0cad","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void debug(String msg)\n    {\n        if (_debug)\n        {\n            String d=_dateCache.now();\n            int ms=_dateCache.lastMs();\n            synchronized(_buffer)\n            {\n                tag(d,ms,\":DBUG:\");\n                format(msg);\n                System.err.println(_buffer.toString());\n            }\n        }\n    }","id":10997,"modified_method":"public void debug(String msg)\n    {\n        if (_debug)\n        {\n            String d = _dateCache.now();\n            int ms = _dateCache.lastMs();\n            StringBuilder buffer = new StringBuilder(64);\n            tag(buffer,d,ms, \":DBUG:\");\n            format(buffer, msg);\n            System.err.println(buffer);\n        }\n    }","commit_id":"e0d07733bd3f03c1337f200523bf9fec220d0cad","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public Map<String, Object> annotate(RefMetaDataTracker tracker, AnnotatorCompatibleWalker walker, ReferenceContext ref, Map<String, AlignmentContext> stratifiedContexts, VariantContext vc) {\n        if ( stratifiedContexts.size() == 0 )\n            return null;\n\n        int depth = 0;\n        for ( Map.Entry<String, AlignmentContext> sample : stratifiedContexts.entrySet() )\n            depth += sample.getValue().hasBasePileup() ? sample.getValue().getBasePileup().depthOfCoverage() : sample.getValue().getExtendedEventPileup().depthOfCoverage();\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(getKeyNames().get(0), String.format(\"%d\", depth));\n        return map;\n    }","id":10998,"modified_method":"public Map<String, Object> annotate(RefMetaDataTracker tracker, AnnotatorCompatibleWalker walker, ReferenceContext ref, Map<String, AlignmentContext> stratifiedContexts, VariantContext vc) {\n        if ( stratifiedContexts.size() == 0 )\n            return null;\n\n        int depth = 0;\n        for ( Map.Entry<String, AlignmentContext> sample : stratifiedContexts.entrySet() )\n            depth += sample.getValue().hasBasePileup() ? sample.getValue().getBasePileup().depthOfCoverage() : 0;\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(getKeyNames().get(0), String.format(\"%d\", depth));\n        return map;\n    }","commit_id":"44ac49aa346d6757b41fe99d40930dd271df7fcd","url":"https://github.com/broadgsa/gatk"},{"original_method":"private Map<String,Object> annotateIndel(AlignmentContext stratifiedContext, VariantContext vc) {\n\n        if ( ! stratifiedContext.hasExtendedEventPileup() ) {\n            return null;\n        }\n\n        ReadBackedExtendedEventPileup pileup = stratifiedContext.getExtendedEventPileup();\n        if ( pileup == null )\n            return null;\n\n        HashMap<String, Integer> alleleCounts = new HashMap<String, Integer>();\n        alleleCounts.put(REF_ALLELE,0);\n        Allele refAllele = vc.getReference();\n\n        for ( Allele allele : vc.getAlternateAlleles() ) {\n\n            if ( allele.isNoCall() ) {\n                continue; // this does not look so good, should we die???\n            }\n\n            alleleCounts.put(getAlleleRepresentation(allele), 0);\n        }\n\n        for ( ExtendedEventPileupElement e : pileup.toExtendedIterable() ) {\n            if ( e.isInsertion() ) {\n\n                final String b =  e.getEventBases();\n                if ( alleleCounts.containsKey(b) ) {\n                    alleleCounts.put(b, alleleCounts.get(b)+1);\n                }\n\n            } else {\n                if ( e.isDeletion() ) {\n                    if ( e.getEventLength() == refAllele.length() ) {\n                        // this is indeed the deletion allele recorded in VC\n                        final String b = DEL;\n                        if ( alleleCounts.containsKey(b) ) {\n                            alleleCounts.put(b, alleleCounts.get(b)+1);\n                        }\n                    }\n//                    else {\n//                        System.out.print(\"   deletion of WRONG length found\");\n//                    }\n                }\n                else {\n                    if ( e.getRead().getAlignmentEnd() <= vc.getStart() ) {\n                        continue;\n                    }\n                    alleleCounts.put(REF_ALLELE,alleleCounts.get(REF_ALLELE)+1);\n                }\n            }\n        }\n\n        Integer[] counts = new Integer[alleleCounts.size()];\n        counts[0] = alleleCounts.get(REF_ALLELE);\n        for (int i = 0; i < vc.getAlternateAlleles().size(); i++)\n            counts[i+1] = alleleCounts.get( getAlleleRepresentation(vc.getAlternateAllele(i)) );\n\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(getKeyNames().get(0), counts);\n\n        //map.put(getKeyNames().get(0), counts);\n        return map;\n    }","id":10999,"modified_method":"private Map<String,Object> annotateIndel(AlignmentContext stratifiedContext, VariantContext vc) {\n\n        if ( ! stratifiedContext.hasBasePileup() )\n            return null;\n\n        ReadBackedPileup pileup = stratifiedContext.getBasePileup();\n        if ( pileup == null )\n            return null;\n\n        final HashMap<String, Integer> alleleCounts = new HashMap<String, Integer>();\n        alleleCounts.put(REF_ALLELE, 0);\n        final Allele refAllele = vc.getReference();\n\n        for ( Allele allele : vc.getAlternateAlleles() ) {\n\n            if ( allele.isNoCall() ) {\n                continue; // this does not look so good, should we die???\n            }\n\n            alleleCounts.put(getAlleleRepresentation(allele), 0);\n        }\n\n        for ( PileupElement p : pileup ) {\n            if ( p.isBeforeInsertion() ) {\n\n                final String b = p.getEventBases();\n                if ( alleleCounts.containsKey(b) ) {\n                    alleleCounts.put(b, alleleCounts.get(b)+1);\n                }\n\n            } else if ( p.isBeforeDeletionStart() ) {\n                    if ( p.getEventLength() == refAllele.length() ) {\n                        // this is indeed the deletion allele recorded in VC\n                        final String b = DEL;\n                        if ( alleleCounts.containsKey(b) ) {\n                            alleleCounts.put(b, alleleCounts.get(b)+1);\n                        }\n                    }\n            } else if ( p.getRead().getAlignmentEnd() > vc.getStart() ) {\n                alleleCounts.put(REF_ALLELE, alleleCounts.get(REF_ALLELE)+1);\n            }\n        }\n\n        Integer[] counts = new Integer[alleleCounts.size()];\n        counts[0] = alleleCounts.get(REF_ALLELE);\n        for (int i = 0; i < vc.getAlternateAlleles().size(); i++)\n            counts[i+1] = alleleCounts.get( getAlleleRepresentation(vc.getAlternateAllele(i)) );\n\n        Map<String, Object> map = new HashMap<String, Object>();\n        map.put(getKeyNames().get(0), counts);\n\n        //map.put(getKeyNames().get(0), counts);\n        return map;\n    }","commit_id":"44ac49aa346d6757b41fe99d40930dd271df7fcd","url":"https://github.com/broadgsa/gatk"}]