[{"original_method":"public static List<INodeSubstituteAction> sideTransform_ActionsFactory_SNotationPart_146911029171910602(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      SNode concept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.lang.core.structure.BaseConcept\");\n      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {\n        public SNode doSubstitute(String pattern) {\n          SNode outer = SNotationActionUtil.getLeftOutermostNotation(_context.getSourceNode());\n          SNode mapping = SNodeFactoryOperations.createNewNode(_context.getModel(), \"jetbrains.mps.core.notation.structure.SNotationMapping\", null);\n          SNodeOperations.replaceWithAnother(outer, mapping);\n          SLinkOperations.setTarget(mapping, \"presentation\", outer, true);\n          return mapping;\n        }\n\n        public String getMatchingText(String pattern) {\n          return \"=\";\n        }\n\n        public String getVisibleMatchingText(String pattern) {\n          return this.getMatchingText(pattern);\n        }\n      });\n    }\n    return result;\n  }","id":96000,"modified_method":"public static List<INodeSubstituteAction> sideTransform_ActionsFactory_SNotationPart_146911029171910602(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      SNode concept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.lang.core.structure.BaseConcept\");\n      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {\n        public SNode doSubstitute(String pattern) {\n          SNode outer = SNodeOperations.cast(SNotationActionUtil.getLeftOutermostNotation(_context.getSourceNode()), \"jetbrains.mps.core.notation.structure.SNotationCorePart\");\n          SNode mapping = SNodeFactoryOperations.createNewNode(_context.getModel(), \"jetbrains.mps.core.notation.structure.SNotationMapping\", null);\n          SNodeOperations.replaceWithAnother(outer, mapping);\n          SLinkOperations.setTarget(mapping, \"presentation\", outer, true);\n          return mapping;\n        }\n\n        public String getMatchingText(String pattern) {\n          return \"=\";\n        }\n\n        public String getVisibleMatchingText(String pattern) {\n          return this.getMatchingText(pattern);\n        }\n      });\n    }\n    return result;\n  }","commit_id":"892e770a5d2a2429d5966ccbeca390e40ad0c6e5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_SNotationPart_3129031437528344799(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {\n    if (!(SNotationActionUtil.canWrap(_context.getSourceNode(), 10))) {\n      return false;\n    }\n    if (SNodeOperations.isInstanceOf(_context.getSourceNode(), \"jetbrains.mps.core.notation.structure.SNotationQuantifier\") || SNodeOperations.isInstanceOf(SNodeOperations.getParent(_context.getSourceNode()), \"jetbrains.mps.core.notation.structure.SNotationQuantifier\")) {\n      return false;\n    }\n    if (SNodeOperations.isInstanceOf(_context.getSourceNode(), \"jetbrains.mps.core.notation.structure.SNotationStyle\")) {\n      return false;\n    }\n    if (SNodeOperations.isInstanceOf(_context.getSourceNode(), \"jetbrains.mps.core.notation.structure.SNotationMapping\")) {\n      SNode presentation = SLinkOperations.getTarget(SNodeOperations.cast(_context.getSourceNode(), \"jetbrains.mps.core.notation.structure.SNotationMapping\"), \"presentation\", true);\n      return presentation != null;\n    }\n    return true;\n  }","id":96001,"modified_method":"public static boolean sideTransformHintSubstituteActionsBuilder_Precondition_SNotationPart_3129031437528344799(final IOperationContext operationContext, final SideTransformPreconditionContext _context) {\n    SNode outer = SNotationActionUtil.getTargetForQuantifier(_context.getSourceNode());\n    return outer != null;\n  }","commit_id":"892e770a5d2a2429d5966ccbeca390e40ad0c6e5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static List<INodeSubstituteAction> sideTransform_ActionsFactory_SNotationPart_3129031437528344794(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      SNode concept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.core.notation.structure.SNotationQuantifier\");\n      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {\n        public SNode doSubstitute(String pattern) {\n          SNode q = SNodeFactoryOperations.createNewNode(_context.getModel(), \"jetbrains.mps.core.notation.structure.SNotationQuantifier\", null);\n          SPropertyOperations.set(q, \"kind\", \"optional\");\n          SNodeOperations.replaceWithAnother(_context.getSourceNode(), q);\n          return SLinkOperations.setTarget(q, \"inner\", _context.getSourceNode(), true);\n        }\n\n        public String getMatchingText(String pattern) {\n          return \"?\";\n        }\n\n        public String getVisibleMatchingText(String pattern) {\n          return this.getMatchingText(pattern);\n        }\n\n        public String getDescriptionText(String pattern) {\n          return \"optional\";\n        }\n      });\n    }\n    {\n      SNode concept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.core.notation.structure.SNotationQuantifier\");\n      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {\n        public SNode doSubstitute(String pattern) {\n          SNode q = SNodeFactoryOperations.createNewNode(_context.getModel(), \"jetbrains.mps.core.notation.structure.SNotationQuantifier\", null);\n          SPropertyOperations.set(q, \"kind\", \"list\");\n          SNodeOperations.replaceWithAnother(_context.getSourceNode(), q);\n          return SLinkOperations.setTarget(q, \"inner\", _context.getSourceNode(), true);\n        }\n\n        public String getMatchingText(String pattern) {\n          return \"*\";\n        }\n\n        public String getVisibleMatchingText(String pattern) {\n          return this.getMatchingText(pattern);\n        }\n\n        public String getDescriptionText(String pattern) {\n          return \"optional\";\n        }\n      });\n    }\n    {\n      SNode concept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.core.notation.structure.SNotationQuantifier\");\n      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {\n        public SNode doSubstitute(String pattern) {\n          SNode q = SNodeFactoryOperations.createNewNode(_context.getModel(), \"jetbrains.mps.core.notation.structure.SNotationQuantifier\", null);\n          SPropertyOperations.set(q, \"kind\", \"nonempty-list\");\n          SNodeOperations.replaceWithAnother(_context.getSourceNode(), q);\n          return SLinkOperations.setTarget(q, \"inner\", _context.getSourceNode(), true);\n        }\n\n        public String getMatchingText(String pattern) {\n          return \"+\";\n        }\n\n        public String getVisibleMatchingText(String pattern) {\n          return this.getMatchingText(pattern);\n        }\n\n        public String getDescriptionText(String pattern) {\n          return \"optional\";\n        }\n      });\n    }\n    return result;\n  }","id":96002,"modified_method":"public static List<INodeSubstituteAction> sideTransform_ActionsFactory_SNotationPart_3129031437528344794(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      SNode concept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.core.notation.structure.SNotationQuantifier\");\n      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {\n        public SNode doSubstitute(String pattern) {\n          SNode outer = SNotationActionUtil.getTargetForQuantifier(_context.getSourceNode());\n          SNode q = SNodeFactoryOperations.createNewNode(_context.getModel(), \"jetbrains.mps.core.notation.structure.SNotationQuantifier\", null);\n          SPropertyOperations.set(q, \"kind\", \"optional\");\n          SNodeOperations.replaceWithAnother(outer, q);\n          return SLinkOperations.setTarget(q, \"inner\", outer, true);\n        }\n\n        public String getMatchingText(String pattern) {\n          return \"?\";\n        }\n\n        public String getVisibleMatchingText(String pattern) {\n          return this.getMatchingText(pattern);\n        }\n\n        public String getDescriptionText(String pattern) {\n          return \"optional\";\n        }\n      });\n    }\n    {\n      SNode concept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.core.notation.structure.SNotationQuantifier\");\n      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {\n        public SNode doSubstitute(String pattern) {\n          SNode q = SNodeFactoryOperations.createNewNode(_context.getModel(), \"jetbrains.mps.core.notation.structure.SNotationQuantifier\", null);\n          SPropertyOperations.set(q, \"kind\", \"list\");\n          SNodeOperations.replaceWithAnother(_context.getSourceNode(), q);\n          return SLinkOperations.setTarget(q, \"inner\", _context.getSourceNode(), true);\n        }\n\n        public String getMatchingText(String pattern) {\n          return \"*\";\n        }\n\n        public String getVisibleMatchingText(String pattern) {\n          return this.getMatchingText(pattern);\n        }\n\n        public String getDescriptionText(String pattern) {\n          return \"optional\";\n        }\n      });\n    }\n    {\n      SNode concept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.core.notation.structure.SNotationQuantifier\");\n      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {\n        public SNode doSubstitute(String pattern) {\n          SNode q = SNodeFactoryOperations.createNewNode(_context.getModel(), \"jetbrains.mps.core.notation.structure.SNotationQuantifier\", null);\n          SPropertyOperations.set(q, \"kind\", \"nonempty-list\");\n          SNodeOperations.replaceWithAnother(_context.getSourceNode(), q);\n          return SLinkOperations.setTarget(q, \"inner\", _context.getSourceNode(), true);\n        }\n\n        public String getMatchingText(String pattern) {\n          return \"+\";\n        }\n\n        public String getVisibleMatchingText(String pattern) {\n          return this.getMatchingText(pattern);\n        }\n\n        public String getDescriptionText(String pattern) {\n          return \"one or more\";\n        }\n      });\n    }\n    return result;\n  }","commit_id":"892e770a5d2a2429d5966ccbeca390e40ad0c6e5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static List<INodeSubstituteAction> sideTransform_ActionsFactory_SNotationMapping_3129031437528328600(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      SNode concept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.lang.core.structure.BaseConcept\");\n      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {\n        public SNode doSubstitute(String pattern) {\n          SNodeFactoryOperations.setNewChild(_context.getSourceNode(), \"presentation\", \"jetbrains.mps.core.notation.structure.SNotationPart\");\n          return SLinkOperations.getTarget(_context.getSourceNode(), \"presentation\", true);\n        }\n\n        public String getMatchingText(String pattern) {\n          return \"=\";\n        }\n\n        public String getVisibleMatchingText(String pattern) {\n          return this.getMatchingText(pattern);\n        }\n      });\n    }\n    return result;\n  }","id":96003,"modified_method":"public static List<INodeSubstituteAction> sideTransform_ActionsFactory_SNotationMapping_3129031437528328600(final IOperationContext operationContext, final SideTransformActionsBuilderContext _context) {\n    List<INodeSubstituteAction> result = ListSequence.fromList(new ArrayList<INodeSubstituteAction>());\n    {\n      SNode concept = SConceptOperations.findConceptDeclaration(\"jetbrains.mps.lang.core.structure.BaseConcept\");\n      ListSequence.fromList(result).addElement(new AbstractSideTransformHintSubstituteAction(concept, _context.getSourceNode()) {\n        public SNode doSubstitute(String pattern) {\n          SNodeFactoryOperations.setNewChild(_context.getSourceNode(), \"presentation\", \"jetbrains.mps.core.notation.structure.SNotationCorePart\");\n          return SLinkOperations.getTarget(_context.getSourceNode(), \"presentation\", true);\n        }\n\n        public String getMatchingText(String pattern) {\n          return \"=\";\n        }\n\n        public String getVisibleMatchingText(String pattern) {\n          return this.getMatchingText(pattern);\n        }\n\n        public String getDescriptionText(String pattern) {\n          return \"customize presentation\";\n        }\n      });\n    }\n    return result;\n  }","commit_id":"892e770a5d2a2429d5966ccbeca390e40ad0c6e5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SNode getLeftOutermostNotation(SNode part) {\n    SNode parent = SNodeOperations.getParent(part);\n    if (SNodeOperations.isInstanceOf(parent, \"jetbrains.mps.core.notation.structure.SNotationWrapper\") && !(SNotationWrapper_Behavior.call_hasPrefix_8379004527113948625(SNodeOperations.cast(parent, \"jetbrains.mps.core.notation.structure.SNotationWrapper\")))) {\n      return getLeftOutermostNotation(SNodeOperations.cast(parent, \"jetbrains.mps.core.notation.structure.SNotationPart\"));\n    }\n    return part;\n  }","id":96004,"modified_method":"public static SNode getLeftOutermostNotation(SNode part) {\n    SNode parent = SNodeOperations.getParent(part);\n    if (SNodeOperations.isInstanceOf(parent, \"jetbrains.mps.core.notation.structure.SNotationQuantifier\")) {\n      return getLeftOutermostNotation(SNodeOperations.cast(parent, \"jetbrains.mps.core.notation.structure.SNotationPart\"));\n    }\n    if (SNodeOperations.isInstanceOf(parent, \"jetbrains.mps.core.notation.structure.SNotationUnorderedGroup\") && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(parent, \"jetbrains.mps.core.notation.structure.SNotationUnorderedGroup\"), \"parts\", true)).first() == part) {\n      return getLeftOutermostNotation(SNodeOperations.cast(parent, \"jetbrains.mps.core.notation.structure.SNotationPart\"));\n    }\n    return part;\n  }","commit_id":"892e770a5d2a2429d5966ccbeca390e40ad0c6e5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static SNode getRightOutermostNotation(SNode part) {\n    SNode parent = SNodeOperations.getParent(part);\n    if (SNodeOperations.isInstanceOf(parent, \"jetbrains.mps.core.notation.structure.SNotationWrapper\") && !(SNotationWrapper_Behavior.call_hasSuffix_8379004527113948621(SNodeOperations.cast(parent, \"jetbrains.mps.core.notation.structure.SNotationWrapper\")))) {\n      return getRightOutermostNotation(SNodeOperations.cast(parent, \"jetbrains.mps.core.notation.structure.SNotationPart\"));\n    }\n    if (SNodeOperations.isInstanceOf(parent, \"jetbrains.mps.core.notation.structure.SNotationMapping\") && \"presentation\".equals(SNodeOperations.getContainingLinkRole(part))) {\n      return getRightOutermostNotation(SNodeOperations.cast(parent, \"jetbrains.mps.core.notation.structure.SNotationPart\"));\n    }\n    return part;\n  }","id":96005,"modified_method":"public static SNode getRightOutermostNotation(SNode part) {\n    SNode parent = SNodeOperations.getParent(part);\n    if (SNodeOperations.isInstanceOf(parent, \"jetbrains.mps.core.notation.structure.SNotationMapping\") && \"presentation\".equals(SNodeOperations.getContainingLinkRole(part))) {\n      return getRightOutermostNotation(SNodeOperations.cast(parent, \"jetbrains.mps.core.notation.structure.SNotationPart\"));\n    }\n    if (SNodeOperations.isInstanceOf(parent, \"jetbrains.mps.core.notation.structure.SNotationUnorderedGroup\") && ListSequence.fromList(SLinkOperations.getTargets(SNodeOperations.cast(parent, \"jetbrains.mps.core.notation.structure.SNotationUnorderedGroup\"), \"parts\", true)).last() == part) {\n      return getRightOutermostNotation(SNodeOperations.cast(parent, \"jetbrains.mps.core.notation.structure.SNotationPart\"));\n    }\n    return part;\n  }","commit_id":"892e770a5d2a2429d5966ccbeca390e40ad0c6e5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static boolean static_canBeAParent(SNode node, SNode childNode, SNode childConcept, SNode link, final IOperationContext operationContext) {\n    if (SConceptOperations.isSubConceptOf(childConcept, \"jetbrains.mps.core.notation.structure.SNotationMapping\")) {\n      return false;\n    }\n    if (SConceptOperations.isSubConceptOf(childConcept, \"jetbrains.mps.core.notation.structure.SNotationQuantifier\")) {\n      return false;\n    }\n    return true;\n  }","id":96006,"modified_method":"public static boolean static_canBeAParent(SNode node, SNode childNode, SNode childConcept, SNode link, final IOperationContext operationContext) {\n    if (SConceptOperations.isSubConceptOf(childConcept, \"jetbrains.mps.core.notation.structure.SNotationMapping\")) {\n      return false;\n    }\n    if (SConceptOperations.isSubConceptOf(childConcept, \"jetbrains.mps.core.notation.structure.SNotationQuantifier\")) {\n      return false;\n    }\n    if (SConceptOperations.isSubConceptOf(childConcept, \"jetbrains.mps.core.notation.structure.SNotationUnorderedGroup\")) {\n      return false;\n    }\n    return true;\n  }","commit_id":"892e770a5d2a2429d5966ccbeca390e40ad0c6e5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public ConceptDescriptor getDescriptor(String conceptFqName) {\n    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {\n      case 0:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotation\", \"jetbrains.mps.core.structure.structure.SStructurePart\", false, new String[]{\"jetbrains.mps.core.structure.structure.SStructurePart\", \"jetbrains.mps.core.notation.structure.SNotationPartsContainer\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{\"id\"}, new String[]{\"element\"});\n      case 1:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationBreak\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\"}, new String[]{}, new String[]{});\n      case 2:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationCall\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\"}, new String[]{\"id\"}, new String[]{\"element\"});\n      case 3:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationLabel\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\", \"jetbrains.mps.core.notation.structure.SNotationPartWithStyle\"}, new String[]{\"text\"}, new String[]{});\n      case 4:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationMapping\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\", \"jetbrains.mps.core.notation.structure.SNotationPartWithStyle\"}, new String[]{}, new String[]{});\n      case 5:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationNewLine\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\"}, new String[]{}, new String[]{});\n      case 6:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationNospace\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\"}, new String[]{}, new String[]{});\n      case 7:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationParentheses\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\", \"jetbrains.mps.core.notation.structure.SNotationPartsContainer\", \"jetbrains.mps.core.notation.structure.SNotationPartWithStyle\"}, new String[]{}, new String[]{});\n      case 8:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationPart\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 9:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationPartList\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 10:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationPartWithStyle\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 11:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationPartsContainer\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 12:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationQuantifier\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\", \"jetbrains.mps.core.notation.structure.SNotationWrapper\", \"jetbrains.mps.core.notation.structure.SNotationPartWithStyle\"}, new String[]{\"kind\"}, new String[]{});\n      case 13:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationStyle\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\"}, new String[]{}, new String[]{});\n      case 14:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationStyleIndent\", \"jetbrains.mps.core.notation.structure.SNotationStylePart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationStylePart\"}, new String[]{}, new String[]{});\n      case 15:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationStylePart\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 16:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationStyleSeparator\", \"jetbrains.mps.core.notation.structure.SNotationStylePart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationStylePart\"}, new String[]{}, new String[]{});\n      case 17:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationTab\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\"}, new String[]{}, new String[]{});\n      case 18:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationWrapper\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 19:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SStructureEntityRef\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 20:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SStructureLinkRef\", \"jetbrains.mps.core.notation.structure.SStructureEntityRef\", false, new String[]{\"jetbrains.mps.core.notation.structure.SStructureEntityRef\"}, new String[]{}, new String[]{\"link\"});\n      case 21:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SStructurePropertyRef\", \"jetbrains.mps.core.notation.structure.SStructureEntityRef\", false, new String[]{\"jetbrains.mps.core.notation.structure.SStructureEntityRef\"}, new String[]{}, new String[]{\"property\"});\n      default:\n        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);\n    }\n  }","id":96007,"modified_method":"public ConceptDescriptor getDescriptor(String conceptFqName) {\n    switch (Arrays.binarySearch(stringSwitchCases_1htk8d_a0a0a, conceptFqName)) {\n      case 0:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotation\", \"jetbrains.mps.core.structure.structure.SStructurePart\", false, new String[]{\"jetbrains.mps.core.structure.structure.SStructurePart\", \"jetbrains.mps.core.notation.structure.SNotationPartsContainer\", \"jetbrains.mps.lang.core.structure.ScopeProvider\"}, new String[]{\"id\"}, new String[]{\"element\"});\n      case 1:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationBreak\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\"}, new String[]{}, new String[]{});\n      case 2:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationCall\", \"jetbrains.mps.core.notation.structure.SNotationCorePart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationCorePart\"}, new String[]{\"id\"}, new String[]{\"element\"});\n      case 3:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationCorePart\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\"}, new String[]{}, new String[]{});\n      case 4:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationLabel\", \"jetbrains.mps.core.notation.structure.SNotationCorePart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationCorePart\", \"jetbrains.mps.core.notation.structure.SNotationPartWithStyle\"}, new String[]{\"text\"}, new String[]{});\n      case 5:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationMapping\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\", \"jetbrains.mps.core.notation.structure.SNotationPartWithStyle\"}, new String[]{}, new String[]{});\n      case 6:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationNewLine\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\"}, new String[]{}, new String[]{});\n      case 7:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationNospace\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\"}, new String[]{}, new String[]{});\n      case 8:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationParentheses\", \"jetbrains.mps.core.notation.structure.SNotationCorePart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationCorePart\", \"jetbrains.mps.core.notation.structure.SNotationPartsContainer\", \"jetbrains.mps.core.notation.structure.SNotationPartWithStyle\"}, new String[]{}, new String[]{});\n      case 9:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationPart\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 10:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationPartList\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 11:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationPartWithStyle\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 12:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationPartsContainer\", null, true, new String[]{}, new String[]{}, new String[]{});\n      case 13:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationQuantifier\", \"jetbrains.mps.core.notation.structure.SNotationCorePart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationCorePart\", \"jetbrains.mps.core.notation.structure.SNotationPartWithStyle\"}, new String[]{\"kind\"}, new String[]{});\n      case 14:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationStyle\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\"}, new String[]{}, new String[]{});\n      case 15:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationStyleIndent\", \"jetbrains.mps.core.notation.structure.SNotationStylePart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationStylePart\"}, new String[]{}, new String[]{});\n      case 16:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationStylePart\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 17:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationStyleSeparator\", \"jetbrains.mps.core.notation.structure.SNotationStylePart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationStylePart\"}, new String[]{}, new String[]{});\n      case 18:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationTab\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\"}, new String[]{}, new String[]{});\n      case 19:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SNotationUnorderedGroup\", \"jetbrains.mps.core.notation.structure.SNotationPart\", false, new String[]{\"jetbrains.mps.core.notation.structure.SNotationPart\"}, new String[]{}, new String[]{});\n      case 20:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SStructureEntityRef\", \"jetbrains.mps.lang.core.structure.BaseConcept\", false, new String[]{\"jetbrains.mps.lang.core.structure.BaseConcept\"}, new String[]{}, new String[]{});\n      case 21:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SStructureLinkRef\", \"jetbrains.mps.core.notation.structure.SStructureEntityRef\", false, new String[]{\"jetbrains.mps.core.notation.structure.SStructureEntityRef\"}, new String[]{}, new String[]{\"link\"});\n      case 22:\n        return new CompiledConceptDescriptor(\"jetbrains.mps.core.notation.structure.SStructurePropertyRef\", \"jetbrains.mps.core.notation.structure.SStructureEntityRef\", false, new String[]{\"jetbrains.mps.core.notation.structure.SStructureEntityRef\"}, new String[]{}, new String[]{\"property\"});\n      default:\n        return StructureAspectInterpreted.getInstance().getDescriptor(conceptFqName);\n    }\n  }","commit_id":"892e770a5d2a2429d5966ccbeca390e40ad0c6e5","url":"https://github.com/JetBrains/MPS"},{"original_method":"public TypesystemDescriptor() {\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_SNotationStyle_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n  }","id":96008,"modified_method":"public TypesystemDescriptor() {\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_SNotationStyle_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n    {\n      NonTypesystemRule_Runtime nonTypesystemRule = new check_SNotationUnorderedGroup_NonTypesystemRule();\n      this.myNonTypesystemRules.add(nonTypesystemRule);\n    }\n  }","commit_id":"892e770a5d2a2429d5966ccbeca390e40ad0c6e5","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public void testMethodImpl() throws Exception {\n      final Editor editor = TestBody.this.initEditor(\"1236013323503\", \"1236013384899\");\n      EditorComponent editorComponent = (EditorComponent) editor.getCurrentEditorComponent();\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.Backspace_Action\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.Backspace_Action\");\n      BaseEditorTestBody.typeString(editorComponent, \"(\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.MoveLeft_Action\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.MoveLeft_Action\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.MoveLeft_Action\");\n      BaseEditorTestBody.typeString(editorComponent, \"!\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.MoveLeft_Action\");\n    }","id":96009,"modified_method":"@Override\n    public void testMethodImpl() throws Exception {\n      final Editor editor = TestBody.this.initEditor(\"1236013323503\", \"1236013384899\");\n      EditorComponent editorComponent = (EditorComponent) editor.getCurrentEditorComponent();\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.Backspace_Action\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.Backspace_Action\");\n      BaseEditorTestBody.typeString(editorComponent, \"(\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.MoveRight_Action\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.MoveRight_Action\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.MoveRight_Action\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.MoveRight_Action\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.MoveRight_Action\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.MoveRight_Action\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.MoveRight_Action\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.MoveRight_Action\");\n      BaseEditorTestBody.typeString(editorComponent, \")\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.MoveLeft_Action\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.MoveLeft_Action\");\n      BaseEditorTestBody.typeString(editorComponent, \"!\");\n      BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.MoveLeft_Action\");\n    }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Override\n    public void testMethodImpl() throws Exception {\n      final Editor editor = TestBody.this.initEditor(\"6042072087468737362\", \"6042072087468737385\");\n      EditorComponent editorComponent = (EditorComponent) editor.getCurrentEditorComponent();\n      BaseEditorTestBody.typeString(editorComponent, \"(\");\n      BaseEditorTestBody.pressKeys(editorComponent, ListSequence.fromListAndArray(new ArrayList<String>(), \"ctrl SPACE\"));\n      BaseEditorTestBody.pressKeys(editorComponent, ListSequence.fromListAndArray(new ArrayList<String>(), \" ENTER\"));\n    }","id":96010,"modified_method":"@Override\n    public void testMethodImpl() throws Exception {\n      final Editor editor = TestBody.this.initEditor(\"6042072087468737362\", \"6042072087468737385\");\n      EditorComponent editorComponent = (EditorComponent) editor.getCurrentEditorComponent();\n      BaseEditorTestBody.typeString(editorComponent, \"(\");\n      for (int i = 0; i < 12; i++) {\n        BaseEditorTestBody.invokeAction(editorComponent, \"jetbrains.mps.ide.editor.actions.MoveRight_Action\");\n      }\n      BaseEditorTestBody.typeString(editorComponent, \")\");\n    }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0d0j0h(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":96011,"modified_method":"private static boolean eq_a65dpo_a0a0d0j0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0d0j0h(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":96012,"modified_method":"private static boolean eq_a65dpo_a0d0j0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean neq_a65dpo_a0e0y0h(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","id":96013,"modified_method":"private static boolean neq_a65dpo_a0e0y0g(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a4a3a9a7_0(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":96014,"modified_method":"private static boolean eq_a65dpo_a0a4a3a9a6_0(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a0a2a51(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":96015,"modified_method":"private static boolean eq_a65dpo_a0a0a0a2a41(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a1a0a2a51(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":96016,"modified_method":"private static boolean eq_a65dpo_a0a1a0a2a41(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a0j0d0j0h(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":96017,"modified_method":"private static boolean eq_a65dpo_a0a0j0d0j0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a9a3a9a7(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":96018,"modified_method":"private static boolean eq_a65dpo_a0a0a9a3a9a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0u0h(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":96019,"modified_method":"private static boolean eq_a65dpo_a0a0u0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0j0d0j0h(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":96020,"modified_method":"private static boolean eq_a65dpo_a0a0a0j0d0j0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean neq_a65dpo_a0c0p(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","id":96021,"modified_method":"private static boolean neq_a65dpo_a0c0o(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean neq_a65dpo_a0a0a11a7(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","id":96022,"modified_method":"private static boolean neq_a65dpo_a0a0a11a6(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a4a42a7(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":96023,"modified_method":"private static boolean eq_a65dpo_a0a0a4a42a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0u0h(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":96024,"modified_method":"private static boolean eq_a65dpo_a0u0g(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean neq_a65dpo_a0y0h(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","id":96025,"modified_method":"private static boolean neq_a65dpo_a0y0g(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a9a3a9a7_0(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":96026,"modified_method":"private static boolean eq_a65dpo_a0a0a9a3a9a6_0(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean neq_a65dpo_a0e0ab0h(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","id":96027,"modified_method":"private static boolean neq_a65dpo_a0e0ab0g(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode createParenthesisNew(@NotNull SNode myExpression, final boolean completingByRightParen) {\n    List<SNode> myParentPath = parentPath(myExpression);\n    SNode topExp = ListSequence.fromList(myParentPath).last();\n    List<SNode> otherParentedNodes = ListSequence.fromList(SNodeOperations.getDescendants(topExp, \"jetbrains.mps.baseLanguage.structure.Expression\", false, new String[]{})).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return (completingByRightParen && (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\")) != null)) || (!(completingByRightParen) && (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\")) != null));\n      }\n    }).toListSequence();\n\n    int index = ListSequence.fromList(otherParentedNodes).count() - 1;\n    SNode otherExpression = null;\n    final Wrappers._T<List<SNode>> otherParentPath = new Wrappers._T<List<SNode>>(null);\n    SNode firstCommon = null;\n\n    while (index >= 0) {\n      otherExpression = ListSequence.fromList(otherParentedNodes).getElement(index);\n      otherParentPath.value = parentPath(otherExpression);\n\n      if (eq_a65dpo_a0d0j0h(ListSequence.fromList(otherParentPath.value).last(), topExp)) {\n        if (eq_a65dpo_a0a0d0j0h(otherExpression, myExpression)) {\n          // they are both the same node \n          ParenthesisUtil.clearIncompleteParens(otherExpression, completingByRightParen);\n          SNode parens = SNodeFactoryOperations.replaceWithNewChild(otherExpression, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n          SLinkOperations.setTarget(parens, \"expression\", otherExpression, true);\n          return parens;\n        }\n\n        firstCommon = ListSequence.fromList(myParentPath).findFirst(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return ListSequence.fromList(otherParentPath.value).contains(it);\n          }\n        });\n        assert firstCommon != null;\n        if (eq_a65dpo_a0a4a3a9a7_0(firstCommon, otherExpression) || eq_a65dpo_a0a4a3a9a7(firstCommon, myExpression)) {\n          // one of the parenthesised nodes is the common ancestor \n          ParenthesisUtil.clearIncompleteParens(otherExpression, completingByRightParen);\n          SNode parens = SNodeFactoryOperations.replaceWithNewChild(firstCommon, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n          SLinkOperations.setTarget(parens, \"expression\", firstCommon, true);\n          return parens;\n        }\n\n        SNode otherPredecesor = ListSequence.fromList(otherParentPath.value).getElement(ListSequence.fromList(otherParentPath.value).indexOf(firstCommon) - 1);\n        SNode myPredecesor = ListSequence.fromList(myParentPath).getElement(ListSequence.fromList(myParentPath).indexOf(firstCommon) - 1);\n        // Does left parented node come from the left and right parented node from the right? \n        if ((completingByRightParen && eq_a65dpo_a0a0a0j0d0j0h(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), otherPredecesor) && eq_a65dpo_a0a0a9a3a9a7(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), myPredecesor)) || !(completingByRightParen) && eq_a65dpo_a0a0a9a3a9a7_0(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), myPredecesor) && eq_a65dpo_a0a0j0d0j0h(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), otherPredecesor)) {\n          break;\n        }\n      }\n      index--;\n    }\n\n    if (index == -1 || (otherParentPath.value != null && neq_a65dpo_a0a0a11a7(ListSequence.fromList(otherParentPath.value).last(), topExp))) {\n      // no common ancestor or swapped left-right -> can't parenthesise \n      if (completingByRightParen) {\n        AttributeOperations.setAttribute(myExpression, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\"), SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\", null));\n      } else {\n        AttributeOperations.setAttribute(myExpression, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\"), SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\", null));\n      }\n      return myExpression;\n    }\n\n    clearIncompleteParens(otherExpression, completingByRightParen);\n\n    SNode leftExpression = (completingByRightParen ? otherExpression : myExpression);\n    SNode rightExpression = (completingByRightParen ? myExpression : otherExpression);\n\n    SNode leftTurn = findLeftTurn(leftExpression, SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"));\n    SNode rightTurn = findRightTurn(rightExpression, SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"));\n    if (eq_a65dpo_a0u0h(leftTurn, rightTurn)) {\n      assert eq_a65dpo_a0a0u0h(leftTurn, firstCommon);\n      SNode parens = SNodeFactoryOperations.replaceWithNewChild(leftTurn, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n      SLinkOperations.setTarget(parens, \"expression\", leftTurn, true);\n      return parens;\n    }\n\n    SNode leftAccumulator;\n    SNode rightAccumulator;\n    if (neq_a65dpo_a0y0h(leftTurn, firstCommon)) {\n      leftAccumulator = SLinkOperations.getTarget(leftTurn, \"rightExpression\", true);\n      SNodeOperations.detachNode(leftAccumulator);\n      SNode current = SNodeOperations.cast(SNodeOperations.getParent(leftTurn), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      SNode previous = leftTurn;\n      while (neq_a65dpo_a0e0y0h(current, firstCommon)) {\n        if (SNodeOperations.isInstanceOf(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") && eq_a65dpo_a0a0a4a42a7(SLinkOperations.getTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), previous)) {\n          SNodeOperations.replaceWithAnother(current, previous);\n          SLinkOperations.setTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", leftAccumulator, true);\n          leftAccumulator = current;\n        } else {\n          previous = current;\n        }\n        current = SNodeOperations.cast(SNodeOperations.getParent(previous), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      }\n    } else {\n      leftAccumulator = SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true);\n      SNodeOperations.detachNode(leftAccumulator);\n    }\n\n    if (neq_a65dpo_a0ab0h(rightTurn, firstCommon)) {\n      rightAccumulator = SLinkOperations.getTarget(rightTurn, \"leftExpression\", true);\n      SNodeOperations.detachNode(rightAccumulator);\n      SNode current = SNodeOperations.cast(SNodeOperations.getParent(rightTurn), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      SNode previous = rightTurn;\n      while (neq_a65dpo_a0e0ab0h(current, firstCommon)) {\n        if (SNodeOperations.isInstanceOf(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") && eq_a65dpo_a0a0a4a62a7(SLinkOperations.getTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), previous)) {\n          SNodeOperations.replaceWithAnother(current, previous);\n          SLinkOperations.setTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", rightAccumulator, true);\n          rightAccumulator = current;\n        } else {\n          previous = current;\n        }\n        current = SNodeOperations.cast(SNodeOperations.getParent(previous), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      }\n    } else {\n      rightAccumulator = SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true);\n      SNodeOperations.detachNode(rightAccumulator);\n    }\n\n    SNode parens = SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null);\n    if ((SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true) != null)) {\n      SNodeOperations.replaceWithAnother(firstCommon, SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true));\n      if ((SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true) != null)) {\n        SLinkOperations.setTarget(rightTurn, \"leftExpression\", SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), true);\n        SLinkOperations.setTarget(leftTurn, \"rightExpression\", parens, true);\n      } else {\n        SLinkOperations.setTarget(rightTurn, \"leftExpression\", parens, true);\n      }\n    } else {\n      SNodeOperations.replaceWithAnother(firstCommon, SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true));\n      SLinkOperations.setTarget(leftTurn, \"rightExpression\", parens, true);\n    }\n\n    SLinkOperations.setTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", rightAccumulator, true);\n    SLinkOperations.setTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", leftAccumulator, true);\n    SLinkOperations.setTarget(parens, \"expression\", firstCommon, true);\n    return parens;\n  }","id":96028,"modified_method":"private static SNode createParenthesisNew(@NotNull SNode myExpression, final boolean completingByRightParen) {\n    List<SNode> myParentPath = parentPath(myExpression);\n    SNode topExp = ListSequence.fromList(myParentPath).last();\n    List<SNode> otherParentedNodes = ListSequence.fromList(SNodeOperations.getDescendants(topExp, \"jetbrains.mps.baseLanguage.structure.Expression\", true, new String[]{})).where(new IWhereFilter<SNode>() {\n      public boolean accept(SNode it) {\n        return (completingByRightParen && (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\")) != null)) || (!(completingByRightParen) && (AttributeOperations.getAttribute(it, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\")) != null));\n      }\n    }).toListSequence();\n\n    int index = ListSequence.fromList(otherParentedNodes).count() - 1;\n    SNode otherExpression = null;\n    final Wrappers._T<List<SNode>> otherParentPath = new Wrappers._T<List<SNode>>(null);\n    SNode firstCommon = null;\n\n    while (index >= 0) {\n      otherExpression = ListSequence.fromList(otherParentedNodes).getElement(index);\n      otherParentPath.value = parentPath(otherExpression);\n\n      if (eq_a65dpo_a0d0j0g(ListSequence.fromList(otherParentPath.value).last(), topExp)) {\n        if (eq_a65dpo_a0a0d0j0g(otherExpression, myExpression)) {\n          // they are both the same node \n          ParenthesisUtil.clearIncompleteParens(otherExpression, completingByRightParen);\n          SNode parens = SNodeFactoryOperations.replaceWithNewChild(otherExpression, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n          SLinkOperations.setTarget(parens, \"expression\", otherExpression, true);\n          return parens;\n        }\n\n        firstCommon = ListSequence.fromList(myParentPath).findFirst(new IWhereFilter<SNode>() {\n          public boolean accept(SNode it) {\n            return ListSequence.fromList(otherParentPath.value).contains(it);\n          }\n        });\n        assert firstCommon != null;\n        if (eq_a65dpo_a0a4a3a9a6_0(firstCommon, otherExpression) || eq_a65dpo_a0a4a3a9a6(firstCommon, myExpression)) {\n          // one of the parenthesised nodes is the common ancestor \n          ParenthesisUtil.clearIncompleteParens(otherExpression, completingByRightParen);\n          SNode parens = SNodeFactoryOperations.replaceWithNewChild(firstCommon, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n          SLinkOperations.setTarget(parens, \"expression\", firstCommon, true);\n          return parens;\n        }\n\n        SNode otherPredecesor = ListSequence.fromList(otherParentPath.value).getElement(ListSequence.fromList(otherParentPath.value).indexOf(firstCommon) - 1);\n        SNode myPredecesor = ListSequence.fromList(myParentPath).getElement(ListSequence.fromList(myParentPath).indexOf(firstCommon) - 1);\n        // Does left parented node come from the left and right parented node from the right? \n        if ((completingByRightParen && eq_a65dpo_a0a0a0j0d0j0g(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), otherPredecesor) && eq_a65dpo_a0a0a9a3a9a6(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), myPredecesor)) || !(completingByRightParen) && eq_a65dpo_a0a0a9a3a9a6_0(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), myPredecesor) && eq_a65dpo_a0a0j0d0j0g(SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), otherPredecesor)) {\n          break;\n        }\n      }\n      index--;\n    }\n\n    if (index == -1 || (otherParentPath.value != null && neq_a65dpo_a0a0a11a6(ListSequence.fromList(otherParentPath.value).last(), topExp))) {\n      // no common ancestor or swapped left-right -> can't parenthesise \n      if (completingByRightParen) {\n        AttributeOperations.setAttribute(myExpression, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\"), SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.IncompleteRightParen\", null));\n      } else {\n        AttributeOperations.setAttribute(myExpression, new IAttributeDescriptor.NodeAttribute(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\"), SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.IncompleteLeftParen\", null));\n      }\n      return myExpression;\n    }\n\n    clearIncompleteParens(otherExpression, completingByRightParen);\n\n    SNode leftExpression = (completingByRightParen ? otherExpression : myExpression);\n    SNode rightExpression = (completingByRightParen ? myExpression : otherExpression);\n\n    SNode leftTurn = findLeftTurn(leftExpression, SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"));\n    SNode rightTurn = findRightTurn(rightExpression, SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"));\n    if (eq_a65dpo_a0u0g(leftTurn, rightTurn)) {\n      assert eq_a65dpo_a0a0u0g(leftTurn, firstCommon);\n      SNode parens = SNodeFactoryOperations.replaceWithNewChild(leftTurn, \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\");\n      SLinkOperations.setTarget(parens, \"expression\", leftTurn, true);\n      return parens;\n    }\n\n    SNode leftAccumulator;\n    SNode rightAccumulator;\n    if (neq_a65dpo_a0y0g(leftTurn, firstCommon)) {\n      leftAccumulator = SLinkOperations.getTarget(leftTurn, \"rightExpression\", true);\n      SNodeOperations.detachNode(leftAccumulator);\n      SNode current = SNodeOperations.cast(SNodeOperations.getParent(leftTurn), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      SNode previous = leftTurn;\n      while (neq_a65dpo_a0e0y0g(current, firstCommon)) {\n        if (SNodeOperations.isInstanceOf(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") && eq_a65dpo_a0a0a4a42a6(SLinkOperations.getTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), previous)) {\n          SNodeOperations.replaceWithAnother(current, previous);\n          SLinkOperations.setTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", leftAccumulator, true);\n          leftAccumulator = current;\n        } else {\n          previous = current;\n        }\n        current = SNodeOperations.cast(SNodeOperations.getParent(previous), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      }\n    } else {\n      leftAccumulator = SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true);\n      SNodeOperations.detachNode(leftAccumulator);\n    }\n\n    if (neq_a65dpo_a0ab0g(rightTurn, firstCommon)) {\n      rightAccumulator = SLinkOperations.getTarget(rightTurn, \"leftExpression\", true);\n      SNodeOperations.detachNode(rightAccumulator);\n      SNode current = SNodeOperations.cast(SNodeOperations.getParent(rightTurn), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      SNode previous = rightTurn;\n      while (neq_a65dpo_a0e0ab0g(current, firstCommon)) {\n        if (SNodeOperations.isInstanceOf(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\") && eq_a65dpo_a0a0a4a62a6(SLinkOperations.getTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), previous)) {\n          SNodeOperations.replaceWithAnother(current, previous);\n          SLinkOperations.setTarget(SNodeOperations.cast(current, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", rightAccumulator, true);\n          rightAccumulator = current;\n        } else {\n          previous = current;\n        }\n        current = SNodeOperations.cast(SNodeOperations.getParent(previous), \"jetbrains.mps.baseLanguage.structure.Expression\");\n      }\n    } else {\n      rightAccumulator = SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true);\n      SNodeOperations.detachNode(rightAccumulator);\n    }\n\n    SNode parens = SNodeFactoryOperations.createNewNode(\"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\", null);\n    if ((SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true) != null)) {\n      SNodeOperations.replaceWithAnother(firstCommon, SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true));\n      if ((SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true) != null)) {\n        SLinkOperations.setTarget(rightTurn, \"leftExpression\", SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), true);\n        SLinkOperations.setTarget(leftTurn, \"rightExpression\", parens, true);\n      } else {\n        SLinkOperations.setTarget(rightTurn, \"leftExpression\", parens, true);\n      }\n    } else {\n      SNodeOperations.replaceWithAnother(firstCommon, SLinkOperations.getTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true));\n      SLinkOperations.setTarget(leftTurn, \"rightExpression\", parens, true);\n    }\n\n    SLinkOperations.setTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", rightAccumulator, true);\n    SLinkOperations.setTarget(SNodeOperations.cast(firstCommon, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", leftAccumulator, true);\n    SLinkOperations.setTarget(parens, \"expression\", firstCommon, true);\n    return parens;\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a4a3a9a7(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":96029,"modified_method":"private static boolean eq_a65dpo_a0a4a3a9a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean eq_a65dpo_a0a0a4a62a7(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","id":96030,"modified_method":"private static boolean eq_a65dpo_a0a0a4a62a6(Object a, Object b) {\n    return (a != null ? a.equals(b) : a == b);\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static SNode findTurn(SNode leaf, SNode stopNode, boolean leftTurn) {\n    SNode currentNode = SNodeOperations.getParent(leaf);\n    SNode previous = leaf;\n    while (neq_a65dpo_a0c0p(previous, stopNode)) {\n      if (SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\")) {\n        if (leftTurn && eq_a65dpo_a0a0a0a2a51(SLinkOperations.getTarget(SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), previous)) {\n          return SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\");\n        }\n        if (!(leftTurn) && eq_a65dpo_a0a1a0a2a51(SLinkOperations.getTarget(SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), previous)) {\n          return SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\");\n        }\n      }\n      previous = currentNode;\n      currentNode = SNodeOperations.getParent(currentNode);\n    }\n    return stopNode;\n  }","id":96031,"modified_method":"private static SNode findTurn(SNode leaf, SNode stopNode, boolean leftTurn) {\n    SNode currentNode = SNodeOperations.getParent(leaf);\n    SNode previous = leaf;\n    while (neq_a65dpo_a0c0o(previous, stopNode)) {\n      if (SNodeOperations.isInstanceOf(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\")) {\n        if (leftTurn && eq_a65dpo_a0a0a0a2a41(SLinkOperations.getTarget(SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"rightExpression\", true), previous)) {\n          return SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\");\n        }\n        if (!(leftTurn) && eq_a65dpo_a0a1a0a2a41(SLinkOperations.getTarget(SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\"), \"leftExpression\", true), previous)) {\n          return SNodeOperations.cast(currentNode, \"jetbrains.mps.baseLanguage.structure.BinaryOperation\");\n        }\n      }\n      previous = currentNode;\n      currentNode = SNodeOperations.getParent(currentNode);\n    }\n    return stopNode;\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static boolean neq_a65dpo_a0ab0h(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","id":96032,"modified_method":"private static boolean neq_a65dpo_a0ab0g(Object a, Object b) {\n    return !((a != null ? a.equals(b) : a == b));\n  }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_thereIsAlreadyParenthesis() throws Exception {\n      this.addNodeById(\"3852894662483077200\");\n      this.addNodeById(\"3852894662483077206\");\n      this.addNodeById(\"3852894662483228699\");\n      this.addNodeById(\"3852894662483230132\");\n      this.addNodeById(\"3852894662483240397\");\n      this.addNodeById(\"3852894662483240422\");\n      ParenthesisUtil.createParenthesis(SNodeOperations.cast(this.getNodeById(\"3852894662483230127\"), \"jetbrains.mps.baseLanguage.structure.IntegerConstant\"), true);\n      {\n        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"3852894662483230135\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\"));\n        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"3852894662483230126\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\"));\n        Assert.assertNull(\"nodes '\" + nodesBefore + \"' and '\" + nodesAfter + \"' do not match!\", NodesMatcher.matchNodes(nodesBefore, nodesAfter));\n      }\n    }","id":96033,"modified_method":"public void test_thereIsAlreadyParenthesis() throws Exception {\n      this.addNodeById(\"3852894662483077200\");\n      this.addNodeById(\"3852894662483077206\");\n      this.addNodeById(\"3852894662483228699\");\n      this.addNodeById(\"3852894662483230132\");\n      ParenthesisUtil.createParenthesisNewLeft(SNodeOperations.cast(this.getNodeById(\"3852894662483230127\"), \"jetbrains.mps.baseLanguage.structure.IntegerConstant\"));\n      ParenthesisUtil.createParenthesisNewRight(SNodeOperations.cast(this.getNodeById(\"3852894662483230127\"), \"jetbrains.mps.baseLanguage.structure.IntegerConstant\"));\n      {\n        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"3852894662483230135\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\"));\n        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"3852894662483230126\"), \"jetbrains.mps.baseLanguage.structure.ExpressionStatement\"));\n        Assert.assertNull(\"nodes '\" + nodesBefore + \"' and '\" + nodesAfter + \"' do not match!\", NodesMatcher.matchNodes(nodesBefore, nodesAfter));\n      }\n    }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void test_noBinaryOperation() throws Exception {\n      this.addNodeById(\"3852894662483077200\");\n      this.addNodeById(\"3852894662483077206\");\n      this.addNodeById(\"3852894662483228699\");\n      this.addNodeById(\"3852894662483230132\");\n      this.addNodeById(\"3852894662483240397\");\n      this.addNodeById(\"3852894662483240422\");\n      SNode result = ParenthesisUtil.createParenthesis(SNodeOperations.cast(this.getNodeById(\"3852894662483077204\"), \"jetbrains.mps.baseLanguage.structure.IntegerConstant\"), true);\n      {\n        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"3852894662483077210\"), \"jetbrains.mps.baseLanguage.structure.ParenthesizedExpression\"));\n        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), result);\n        Assert.assertNull(\"nodes '\" + nodesBefore + \"' and '\" + nodesAfter + \"' do not match!\", NodesMatcher.matchNodes(nodesBefore, nodesAfter));\n      }\n    }","id":96034,"modified_method":"public void test_noBinaryOperation() throws Exception {\n      this.addNodeById(\"3852894662483077200\");\n      this.addNodeById(\"3852894662483077206\");\n      this.addNodeById(\"3852894662483228699\");\n      this.addNodeById(\"3852894662483230132\");\n      ParenthesisUtil.createParenthesisNewLeft(SNodeOperations.cast(this.getNodeById(\"2329139814027568804\"), \"jetbrains.mps.baseLanguage.structure.IntegerConstant\"));\n      ParenthesisUtil.createParenthesisNewRight(SNodeOperations.cast(this.getNodeById(\"2329139814027568804\"), \"jetbrains.mps.baseLanguage.structure.IntegerConstant\"));\n\n      {\n        List<SNode> nodesBefore = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"2329139814027569571\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\"));\n        List<SNode> nodesAfter = ListSequence.fromListAndArray(new ArrayList<SNode>(), SNodeOperations.cast(this.getNodeById(\"2329139814027568774\"), \"jetbrains.mps.baseLanguage.structure.LocalVariableDeclaration\"));\n        Assert.assertNull(\"nodes '\" + nodesBefore + \"' and '\" + nodesAfter + \"' do not match!\", NodesMatcher.matchNodes(nodesBefore, nodesAfter));\n      }\n    }","commit_id":"9a701ec68baf4a626f6f8bfbfd014183e9418a27","url":"https://github.com/JetBrains/MPS"},{"original_method":"@Test\n\tpublic void testThemeBuilderStyled() throws IOException {\n\t\tThemeBuilder themeBuilder = new ThemeBuilder(\n\t\t\t_diffsDir, _NAME, temporaryFolder.getRoot(), _styledJarFile,\n\t\t\tThemeBuilder.STYLED, \"ftl\", _unstyledJarFile);\n\n\t\tthemeBuilder.build();\n\n\t\t_assertEquals(\"css/custom.scss\", \".text { color: black; }\");\n\t\t_assertExists(\"images/thumbnail.png\");\n\t\t_assertExists(\"templates/init.ftl\");\n\t\t_assertNotExists(\"templates/init.vm\");\n\t\t_assertExists(\"WEB-INF/liferay-look-and-feel.xml\");\n\t}","id":96035,"modified_method":"@Test\n\tpublic void testThemeBuilderStyled() throws Exception {\n\t\tbuildTheme(\n\t\t\t_diffsDir, _NAME, temporaryFolder.getRoot(), _styledJarFile,\n\t\t\tThemeBuilder.STYLED, \"ftl\", _unstyledJarFile);\n\n\t\t_assertEquals(\"css/custom.scss\", \".text { color: black; }\");\n\t\t_assertExists(\"images/thumbnail.png\");\n\t\t_assertExists(\"templates/init.ftl\");\n\t\t_assertNotExists(\"templates/init.vm\");\n\t\t_assertExists(\"WEB-INF/liferay-look-and-feel.xml\");\n\t}","commit_id":"0ecb676d86d1e8072b878d81124836c1984ffd93","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testThemeBuilderUnstyled() throws IOException {\n\t\tThemeBuilder themeBuilder = new ThemeBuilder(\n\t\t\t_diffsDir, _NAME, temporaryFolder.getRoot(), null,\n\t\t\tThemeBuilder.UNSTYLED, \"vm\", _unstyledJarFile);\n\n\t\tthemeBuilder.build();\n\n\t\t_assertEquals(\"css/custom.scss\", \".text { color: black; }\");\n\t\t_assertNotExists(\"templates/init.ftl\");\n\t\t_assertExists(\"templates/init.vm\");\n\t\t_assertExists(\"WEB-INF/liferay-look-and-feel.xml\");\n\t}","id":96036,"modified_method":"@Test\n\tpublic void testThemeBuilderUnstyled() throws Exception {\n\t\tbuildTheme(\n\t\t\t_diffsDir, _NAME, temporaryFolder.getRoot(), null,\n\t\t\tThemeBuilder.UNSTYLED, \"vm\", _unstyledJarFile);\n\n\t\t_assertEquals(\"css/custom.scss\", \".text { color: black; }\");\n\t\t_assertNotExists(\"templates/init.ftl\");\n\t\t_assertExists(\"templates/init.vm\");\n\t\t_assertExists(\"WEB-INF/liferay-look-and-feel.xml\");\n\t}","commit_id":"0ecb676d86d1e8072b878d81124836c1984ffd93","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n  public void cancar() {\n    Frame tfr = null;\n    DeepLearningModel dl = null;\n\n    Scope.enter();\n    try {\n      tfr = parse_test_file(\"smalldata/glm_test/cancar_logIn.csv\");\n      for (String s : new String[]{\n              \"Merit\", \"Class\"\n      }) {\n        Scope.track(tfr.replace(tfr.find(s), tfr.vec(s).toEnum())._key);\n      }\n      DKV.put(tfr);\n\n      Random rng = new Random(0xDECAF);\n      int count=0;\n      int failedcount=0;\n      double maxRelErr = 0;\n      double meanRelErr = 0;\n      for (Distribution.Family dist : new Distribution.Family[]{\n              Distribution.Family.gaussian,\n              Distribution.Family.laplace,\n              Distribution.Family.huber,\n              Distribution.Family.gamma,\n              Distribution.Family.poisson,\n              Distribution.Family.tweedie,\n              Distribution.Family.multinomial,\n      }) {\n        for (DeepLearningParameters.Activation act : new DeepLearningParameters.Activation[]{\n                DeepLearningParameters.Activation.Tanh,\n                DeepLearningParameters.Activation.Rectifier,\n//                DeepLearningParameters.Activation.Maxout,\n        }) {\n          for (String response : new String[]{\n                  \"Class\", //classification\n                  \"Cost\", //regression\n          }) {\n            for (boolean adaptive : new boolean[]{\n                    true,\n                    false\n            }) {\n              for (int miniBatchSize : new int[]{\n                      1,\n              }) {\n                boolean classification = response.equals(\"Class\");\n                if (classification && dist != Distribution.Family.multinomial) continue;\n                if (!classification && dist == Distribution.Family.multinomial) continue;\n\n                DeepLearningParameters parms = new DeepLearningParameters();\n                parms._train = tfr._key;\n                parms._epochs = 100; //converge to a reasonable model to avoid too large gradients\n//            parms._l1 = 1e-3; //FIXME\n//            parms._l2 = 1e-3; //FIXME\n                parms._reproducible = true;\n                parms._hidden = new int[]{10, 10, 10};\n                parms._fast_mode = false; //otherwise we introduce small bprop errors\n                parms._response_column = response;\n                parms._distribution = dist;\n                parms._max_w2 = 10;\n                parms._seed = 0xaaabbb;\n                parms._activation = act;\n                parms._adaptive_rate = adaptive;\n                parms._rate = 1e-4;\n                parms._momentum_start = 0.9;\n                parms._momentum_stable = 0.99;\n                parms._model_id = Key.make();\n                DeepLearningModelInfo.gradientCheck = null;\n\n                // Build a first model; all remaining models should be equal\n                DeepLearning job = new DeepLearning(parms);\n                try {\n                  dl = job.trainModel().get();\n\n                  if (!classification) {\n                    dl.score(tfr);\n                    hex.ModelMetrics mm = hex.ModelMetrics.getFromDKV(dl, tfr);\n                    double resdev = ((ModelMetricsRegression) mm)._mean_residual_deviance;\n                    Log.info(\"Mean residual deviance: \" + resdev);\n                  }\n\n                  DeepLearningModelInfo modelInfo = dl.model_info().deep_clone(); //golden version\n//                Log.info(modelInfo.toStringAll());\n                  long before = dl.model_info().checksum_impl();\n\n                  float meanLoss = 0;\n\n                  // loop over every row in the dataset and check that the predictions\n                  for (int rId = 0; rId < tfr.numRows(); rId+=1 /*miniBatchSize*/) {\n                    // start from scratch - with a clean model\n                    dl.set_model_info(modelInfo.deep_clone());\n\n                    final DataInfo di = dl.model_info().data_info();\n\n                    // populate miniBatch (consecutive rows)\n                    final DataInfo.Row[] miniBatch = new DataInfo.Row[miniBatchSize];\n                    for (int i=0; i<miniBatch.length; ++i) {\n                      if (0 <= rId+i && rId+i < tfr.numRows()) {\n                        miniBatch[i] = new FrameTask.ExtractDenseRow(di, rId+i).doAll(di._adaptedFrame)._row;\n                      }\n                    }\n\n                    // loss at weight\n                    long cs = dl.model_info().checksum_impl();\n                    double loss = dl.loss(miniBatch);\n                    assert(cs == before);\n                    assert(before == dl.model_info().checksum_impl());\n                    meanLoss += loss;\n\n                    for (int layer = 0; layer <= parms._hidden.length; ++layer) {\n                      int rows = dl.model_info().get_weights(layer).rows();\n                      for (int row = 0; row < rows; ++row) {\n                        int cols = dl.model_info().get_weights(layer).cols();\n                        for (int col = 0; col < cols; ++col) {\n                          if (rng.nextFloat() >= SAMPLE_RATE) continue;\n\n                          // start from scratch - with a clean model\n                          dl.set_model_info(modelInfo.deep_clone());\n\n                          // do one forward propagation pass (and fill the mini-batch gradients -> set training=true)\n                          Neurons[] neurons = DeepLearningTask.makeNeuronsForTraining(dl.model_info());\n                          for (DataInfo.Row myRow : miniBatch) {\n                            if (myRow == null) continue;\n                            ((Neurons.Input) neurons[0]).setInput(-1, myRow.numVals, myRow.nBins, myRow.binIds);\n                            DeepLearningTask.step(-1 /*seed doesn't matter*/, neurons, dl.model_info(), null, true /*training*/, new double[]{myRow.response[0]}, myRow.offset);\n                          }\n\n                          // check that we didn't change the model's weights/biases\n                          long after = dl.model_info().checksum_impl();\n                          assert (after == before);\n\n                          // record the gradient since gradientChecking is enabled\n                          DeepLearningModelInfo.gradientCheck = new DeepLearningModelInfo.GradientCheck(layer, row, col); //tell it what gradient to collect\n                          DeepLearningTask.applyModelUpdates(neurons); //update the weights\n                          assert (before != dl.model_info().checksum_impl());\n\n                          // reset the model back to the trained model\n                          dl.set_model_info(modelInfo.deep_clone());\n                          assert (before == dl.model_info().checksum_impl());\n\n                          double bpropGradient = DeepLearningModelInfo.gradientCheck.gradient;\n                          DeepLearningModelInfo.gradientCheck = null;\n\n                          // FIXME: re-enable this once the loss is computed from the de-standardized prediction/response\n//                    double actualResponse=myRow.response[0];\n//                    double predResponseLinkSpace = neurons[neurons.length-1]._a.get(0);\n//                    if (di._normRespMul != null) {\n//                      bpropGradient /= di._normRespMul[0]; //no shift for gradient\n//                      actualResponse = (actualResponse / di._normRespMul[0] + di._normRespSub[0]);\n//                      predResponseLinkSpace = (predResponseLinkSpace / di._normRespMul[0] + di._normRespSub[0]);\n//                    }\n//                    bpropGradient *= new Distribution(parms._distribution).gradient(actualResponse, predResponseLinkSpace);\n\n                          final float weight = dl.model_info().get_weights(layer).get(row, col);\n\n                          double eps = 1e-4 * Math.abs(weight); //don't make the weight deltas too small, or the float weights \"won't notice\"\n                          if (eps == 0)\n                            eps = 1e-6;\n\n                          // loss at weight + eps\n                          dl.model_info().get_weights(layer).set(row, col, (float)(weight + eps));\n                          double up = dl.loss(miniBatch);\n\n                          // loss at weight - eps\n                          dl.model_info().get_weights(layer).set(row, col, (float)(weight - eps));\n                          double down = dl.loss(miniBatch);\n\n                          if (Math.abs(up-down)/Math.abs(up+down) < 1e-8) {\n                            continue; //relative change in loss function is too small -> skip\n                          }\n\n                          double gradient = ((up - down) / (2. * eps));\n\n                          double relError = 2 * Math.abs(bpropGradient - gradient) / (Math.abs(gradient) + Math.abs(bpropGradient));\n\n                          count++;\n\n                          // if either gradient is tiny, check if both are tiny\n                          if (Math.abs(gradient) < 1e-8 || Math.abs(bpropGradient) < 1e-8) {\n                            if (Math.abs(bpropGradient-gradient) < 1e-8) continue; //all good\n                          }\n\n                          meanRelErr += relError;\n\n                          // if both gradients are tiny - numerically unstable relative error computation is not needed, since absolute error is small\n\n                          if (relError > MAX_TOLERANCE) {\n                            Log.info(\"\\nRow: \" + rId);\n                            Log.info(\"weight (layer \" + layer + \", row \" + row + \", col \" + col + \"): \" + weight + \" +/- \" + eps);\n                            Log.info(\"loss: \" + loss);\n                            Log.info(\"losses up/down: \" + up + \" / \" + down);\n                            Log.info(\"=> Finite differences gradient: \" + gradient);\n                            Log.info(\"=> Back-propagation gradient  : \" + bpropGradient);\n                            Log.info(\"=> Relative error             : \" + PrettyPrint.formatPct(relError));\n                            failedcount++;\n                          }\n\n                          maxRelErr = Math.max(maxRelErr, relError);\n                          assert(!Double.isNaN(maxRelErr));\n                        }\n                      }\n                    }\n                  }\n                  meanLoss /= tfr.numRows();\n                  Log.info(\"Mean loss: \" + meanLoss);\n\n//                  // FIXME: re-enable this\n//                  if (parms._l1 == 0 && parms._l2 == 0) {\n//                    assert(Math.abs(meanLoss-resdev)/Math.abs(resdev) < 1e-5);\n//                  }\n                } catch(RuntimeException ex) {\n                  dl = DKV.getGet(parms._model_id);\n                  if (dl != null)\n                    Assert.assertTrue(dl.model_info().unstable());\n                  else\n                    Assert.assertTrue(job.isCancelledOrCrashed());\n                } finally {\n                  job.remove();\n                  if (dl != null) dl.delete();\n                }\n              }\n            }\n          }\n        }\n      }\n      Log.info(\"Number of tests: \" + count);\n      Log.info(\"Number of failed tests: \" + failedcount);\n      Log.info(\"Mean. relative error: \" + meanRelErr/count);\n      Log.info(\"Max. relative error: \" + PrettyPrint.formatPct(maxRelErr));\n      Assert.assertTrue(\"Error too large: \" + maxRelErr + \" >= \" + MAX_TOLERANCE, maxRelErr < MAX_TOLERANCE);\n\n    } finally {\n      if (tfr != null) tfr.remove();\n      Scope.exit();\n    }\n  }","id":96037,"modified_method":"@Test\n  public void cancar() {\n    Frame tfr = null;\n    DeepLearningModel dl = null;\n\n    try {\n      tfr = parse_test_file(\"smalldata/glm_test/cancar_logIn.csv\");\n      for (String s : new String[]{\n              \"Merit\", \"Class\"\n      }) {\n        Vec f = tfr.vec(s).toEnum();\n        tfr.remove(s).remove();\n        tfr.add(s, f);\n      }\n      DKV.put(tfr);\n\n      Random rng = new Random(0xDECAF);\n      int count=0;\n      int failedcount=0;\n      double maxRelErr = 0;\n      double meanRelErr = 0;\n      for (Distribution.Family dist : new Distribution.Family[]{\n              Distribution.Family.gaussian,\n              Distribution.Family.laplace,\n              Distribution.Family.huber,\n              Distribution.Family.gamma,\n              Distribution.Family.poisson,\n              Distribution.Family.tweedie,\n              Distribution.Family.multinomial,\n      }) {\n        for (DeepLearningParameters.Activation act : new DeepLearningParameters.Activation[]{\n                DeepLearningParameters.Activation.Tanh,\n                DeepLearningParameters.Activation.Rectifier,\n//                DeepLearningParameters.Activation.Maxout,\n        }) {\n          for (String response : new String[]{\n                  \"Class\", //classification\n                  \"Cost\", //regression\n          }) {\n            for (boolean adaptive : new boolean[]{\n                    true,\n                    false\n            }) {\n              for (int miniBatchSize : new int[]{\n                      1,\n              }) {\n                boolean classification = response.equals(\"Class\");\n                if (classification && dist != Distribution.Family.multinomial) continue;\n                if (!classification && dist == Distribution.Family.multinomial) continue;\n\n                DeepLearningParameters parms = new DeepLearningParameters();\n                parms._train = tfr._key;\n                parms._epochs = 100; //converge to a reasonable model to avoid too large gradients\n//            parms._l1 = 1e-3; //FIXME\n//            parms._l2 = 1e-3; //FIXME\n                parms._reproducible = true;\n                parms._hidden = new int[]{10, 10, 10};\n                parms._fast_mode = false; //otherwise we introduce small bprop errors\n                parms._response_column = response;\n                parms._distribution = dist;\n                parms._max_w2 = 10;\n                parms._seed = 0xaaabbb;\n                parms._activation = act;\n                parms._adaptive_rate = adaptive;\n                parms._rate = 1e-4;\n                parms._momentum_start = 0.9;\n                parms._momentum_stable = 0.99;\n                parms._model_id = Key.make();\n                DeepLearningModelInfo.gradientCheck = null;\n\n                // Build a first model; all remaining models should be equal\n                DeepLearning job = new DeepLearning(parms);\n                try {\n                  dl = job.trainModel().get();\n\n                  if (!classification) {\n                    Frame p = dl.score(tfr);\n                    hex.ModelMetrics mm = hex.ModelMetrics.getFromDKV(dl, tfr);\n                    double resdev = ((ModelMetricsRegression) mm)._mean_residual_deviance;\n                    Log.info(\"Mean residual deviance: \" + resdev);\n                    p.delete();\n                  }\n\n                  DeepLearningModelInfo modelInfo = dl.model_info().deep_clone(); //golden version\n//                Log.info(modelInfo.toStringAll());\n                  long before = dl.model_info().checksum_impl();\n\n                  float meanLoss = 0;\n\n                  // loop over every row in the dataset and check that the predictions\n                  for (int rId = 0; rId < tfr.numRows(); rId+=1 /*miniBatchSize*/) {\n                    // start from scratch - with a clean model\n                    dl.set_model_info(modelInfo.deep_clone());\n\n                    final DataInfo di = dl.model_info().data_info();\n\n                    // populate miniBatch (consecutive rows)\n                    final DataInfo.Row[] miniBatch = new DataInfo.Row[miniBatchSize];\n                    for (int i=0; i<miniBatch.length; ++i) {\n                      if (0 <= rId+i && rId+i < tfr.numRows()) {\n                        miniBatch[i] = new FrameTask.ExtractDenseRow(di, rId+i).doAll(di._adaptedFrame)._row;\n                      }\n                    }\n\n                    // loss at weight\n                    long cs = dl.model_info().checksum_impl();\n                    double loss = dl.loss(miniBatch);\n                    assert(cs == before);\n                    assert(before == dl.model_info().checksum_impl());\n                    meanLoss += loss;\n\n                    for (int layer = 0; layer <= parms._hidden.length; ++layer) {\n                      int rows = dl.model_info().get_weights(layer).rows();\n                      for (int row = 0; row < rows; ++row) {\n                        int cols = dl.model_info().get_weights(layer).cols();\n                        for (int col = 0; col < cols; ++col) {\n                          if (rng.nextFloat() >= SAMPLE_RATE) continue;\n\n                          // start from scratch - with a clean model\n                          dl.set_model_info(modelInfo.deep_clone());\n\n                          // do one forward propagation pass (and fill the mini-batch gradients -> set training=true)\n                          Neurons[] neurons = DeepLearningTask.makeNeuronsForTraining(dl.model_info());\n                          for (DataInfo.Row myRow : miniBatch) {\n                            if (myRow == null) continue;\n                            ((Neurons.Input) neurons[0]).setInput(-1, myRow.numVals, myRow.nBins, myRow.binIds);\n                            DeepLearningTask.step(-1 /*seed doesn't matter*/, neurons, dl.model_info(), null, true /*training*/, new double[]{myRow.response[0]}, myRow.offset);\n                          }\n\n                          // check that we didn't change the model's weights/biases\n                          long after = dl.model_info().checksum_impl();\n                          assert (after == before);\n\n                          // record the gradient since gradientChecking is enabled\n                          DeepLearningModelInfo.gradientCheck = new DeepLearningModelInfo.GradientCheck(layer, row, col); //tell it what gradient to collect\n                          DeepLearningTask.applyModelUpdates(neurons); //update the weights\n                          assert (before != dl.model_info().checksum_impl());\n\n                          // reset the model back to the trained model\n                          dl.set_model_info(modelInfo.deep_clone());\n                          assert (before == dl.model_info().checksum_impl());\n\n                          double bpropGradient = DeepLearningModelInfo.gradientCheck.gradient;\n                          DeepLearningModelInfo.gradientCheck = null;\n\n                          // FIXME: re-enable this once the loss is computed from the de-standardized prediction/response\n//                    double actualResponse=myRow.response[0];\n//                    double predResponseLinkSpace = neurons[neurons.length-1]._a.get(0);\n//                    if (di._normRespMul != null) {\n//                      bpropGradient /= di._normRespMul[0]; //no shift for gradient\n//                      actualResponse = (actualResponse / di._normRespMul[0] + di._normRespSub[0]);\n//                      predResponseLinkSpace = (predResponseLinkSpace / di._normRespMul[0] + di._normRespSub[0]);\n//                    }\n//                    bpropGradient *= new Distribution(parms._distribution).gradient(actualResponse, predResponseLinkSpace);\n\n                          final float weight = dl.model_info().get_weights(layer).get(row, col);\n\n                          double eps = 1e-4 * Math.abs(weight); //don't make the weight deltas too small, or the float weights \"won't notice\"\n                          if (eps == 0)\n                            eps = 1e-6;\n\n                          // loss at weight + eps\n                          dl.model_info().get_weights(layer).set(row, col, (float)(weight + eps));\n                          double up = dl.loss(miniBatch);\n\n                          // loss at weight - eps\n                          dl.model_info().get_weights(layer).set(row, col, (float)(weight - eps));\n                          double down = dl.loss(miniBatch);\n\n                          if (Math.abs(up-down)/Math.abs(up+down) < 1e-8) {\n                            continue; //relative change in loss function is too small -> skip\n                          }\n\n                          double gradient = ((up - down) / (2. * eps));\n\n                          double relError = 2 * Math.abs(bpropGradient - gradient) / (Math.abs(gradient) + Math.abs(bpropGradient));\n\n                          count++;\n\n                          // if either gradient is tiny, check if both are tiny\n                          if (Math.abs(gradient) < 1e-8 || Math.abs(bpropGradient) < 1e-8) {\n                            if (Math.abs(bpropGradient-gradient) < 1e-8) continue; //all good\n                          }\n\n                          meanRelErr += relError;\n\n                          // if both gradients are tiny - numerically unstable relative error computation is not needed, since absolute error is small\n\n                          if (relError > MAX_TOLERANCE) {\n                            Log.info(\"\\nRow: \" + rId);\n                            Log.info(\"weight (layer \" + layer + \", row \" + row + \", col \" + col + \"): \" + weight + \" +/- \" + eps);\n                            Log.info(\"loss: \" + loss);\n                            Log.info(\"losses up/down: \" + up + \" / \" + down);\n                            Log.info(\"=> Finite differences gradient: \" + gradient);\n                            Log.info(\"=> Back-propagation gradient  : \" + bpropGradient);\n                            Log.info(\"=> Relative error             : \" + PrettyPrint.formatPct(relError));\n                            failedcount++;\n                          }\n\n                          maxRelErr = Math.max(maxRelErr, relError);\n                          assert(!Double.isNaN(maxRelErr));\n                        }\n                      }\n                    }\n                  }\n                  meanLoss /= tfr.numRows();\n                  Log.info(\"Mean loss: \" + meanLoss);\n\n//                  // FIXME: re-enable this\n//                  if (parms._l1 == 0 && parms._l2 == 0) {\n//                    assert(Math.abs(meanLoss-resdev)/Math.abs(resdev) < 1e-5);\n//                  }\n                } catch(RuntimeException ex) {\n                  dl = DKV.getGet(parms._model_id);\n                  if (dl != null)\n                    Assert.assertTrue(dl.model_info().unstable());\n                  else\n                    Assert.assertTrue(job.isCancelledOrCrashed());\n                } finally {\n                  job.remove();\n                  if (dl != null) dl.delete();\n                }\n              }\n            }\n          }\n        }\n      }\n      Log.info(\"Number of tests: \" + count);\n      Log.info(\"Number of failed tests: \" + failedcount);\n      Log.info(\"Mean. relative error: \" + meanRelErr/count);\n      Log.info(\"Max. relative error: \" + PrettyPrint.formatPct(maxRelErr));\n      Assert.assertTrue(\"Error too large: \" + maxRelErr + \" >= \" + MAX_TOLERANCE, maxRelErr < MAX_TOLERANCE);\n\n    } finally {\n      if (tfr != null) tfr.remove();\n    }\n  }","commit_id":"28e761ae2d132bf63853c6c45aa3c19c2f421a3d","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override protected void compute2() {\n      try {\n        long cs = _parms.checksum();\n\n        Scope.enter();\n        // Init parameters\n        init(true);\n        // Read lock input\n        _parms.read_lock_frames(DeepLearning.this);\n        // Something goes wrong\n        if (error_count() > 0){\n          DeepLearning.this.updateValidationMessages();\n          throw H2OModelBuilderIllegalArgumentException.makeFromBuilder(DeepLearning.this);\n        }\n        buildModel();\n        //check that _parms isn't changed during DL model training\n        long cs2 = _parms.checksum();\n        assert(cs == cs2);\n        Job thisJob = DKV.getGet(_key);\n        if (thisJob != null && thisJob._state == JobState.CANCELLED) {\n          Log.info(\"Job cancelled by user.\");\n        } else {\n          done();                 // Job done!\n        }\n//      if (n_folds > 0) CrossValUtils.crossValidate(this);\n      } finally {\n        updateModelOutput();\n        _parms.read_unlock_frames(DeepLearning.this);\n        Scope.exit();\n      }\n      tryComplete();\n    }","id":96038,"modified_method":"@Override protected void compute2() {\n      try {\n        long cs = _parms.checksum();\n        init(true);\n        // Read lock input\n        _parms.read_lock_frames(DeepLearning.this);\n        // Something goes wrong\n        if (error_count() > 0){\n          DeepLearning.this.updateValidationMessages();\n          throw H2OModelBuilderIllegalArgumentException.makeFromBuilder(DeepLearning.this);\n        }\n        buildModel();\n        //check that _parms isn't changed during DL model training\n        long cs2 = _parms.checksum();\n        assert(cs == cs2);\n        Job thisJob = DKV.getGet(_key);\n        if (thisJob != null && thisJob._state == JobState.CANCELLED) {\n          Log.info(\"Job cancelled by user.\");\n        } else {\n          done();                 // Job done!\n        }\n      } finally {\n        updateModelOutput();\n        _parms.read_unlock_frames(DeepLearning.this);\n      }\n      tryComplete();\n    }","commit_id":"90b630fa28dc6ec184e27193906c316c62212368","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/**\n     * Train a Deep Learning model, assumes that all members are populated\n     * If checkpoint == null, then start training a new model, otherwise continue from a checkpoint\n     */\n    public final void buildModel() {\n      Scope.enter();\n      DeepLearningModel cp = null;\n      if (_parms._checkpoint == null) {\n        cp = new DeepLearningModel(dest(), _parms, new DeepLearningModel.DeepLearningModelOutput(DeepLearning.this), _train, _valid, nclasses());\n        cp.model_info().initializeMembers();\n      } else {\n        final DeepLearningModel previous = DKV.getGet(_parms._checkpoint);\n        if (previous == null) throw new IllegalArgumentException(\"Checkpoint not found.\");\n        Log.info(\"Resuming from checkpoint.\");\n        new ProgressUpdate(\"Resuming from checkpoint\").fork(_progressKey);\n\n        if( isClassifier() != previous._output.isClassifier() )\n          throw new IllegalArgumentException(\"Response type must be the same as for the checkpointed model.\");\n        if( isSupervised() != previous._output.isSupervised() )\n          throw new IllegalArgumentException(\"Model type must be the same as for the checkpointed model.\");\n\n        // check the user-given arguments for consistency\n        DeepLearningParameters oldP = previous._parms; //user-given parameters for checkpointed model\n        DeepLearningParameters newP = _parms; //user-given parameters for restart\n        DeepLearningParameters.Sanity.checkpoint(oldP, newP);\n\n        try {\n          final DataInfo dinfo = makeDataInfo(_train, _valid, _parms);\n          DKV.put(dinfo);\n          cp = new DeepLearningModel(dest(), _parms, previous, false, dinfo);\n          cp.write_lock(self());\n\n          if (!Arrays.equals(cp._output._names, previous._output._names)) {\n            throw new IllegalArgumentException(\"Number of (non-constant) predictor columns of the training data must be the same as for the checkpointed model. Check ignored columns (or disable ignore_const_cols).\");\n          }\n          if (!Arrays.deepEquals(cp._output._domains, previous._output._domains)) {\n            throw new IllegalArgumentException(\"Categorical factor levels of the training data must be the same as for the checkpointed model.\");\n          }\n          if (dinfo.fullN() != previous.model_info().data_info().fullN()) {\n            throw new IllegalArgumentException(\"Total number of predictors is different than for the checkpointed model.\");\n          }\n\n          // these are the mutable parameters that are to be used by the model (stored in model_info._parms)\n          final DeepLearningParameters actualNewP = cp.model_info().get_params(); //actually used parameters for model building (defaults filled in, etc.)\n          assert (actualNewP != previous.model_info().get_params());\n          assert (actualNewP != newP);\n          assert (actualNewP != oldP);\n          DeepLearningParameters.Sanity.update(actualNewP, newP, nclasses());\n\n          Log.info(\"Adding \" + String.format(\"%.3f\", previous.epoch_counter) + \" epochs from the checkpointed model.\");\n          cp.update(self());\n        } finally {\n          if (cp != null) cp.unlock(self());\n        }\n      }\n      trainModel(cp);\n\n      // clean up, but don't delete the model and the training/validation model metrics\n      List<Key> keep = new ArrayList<>();\n      try {\n        keep.add(dest());\n        keep.add(cp.model_info().data_info()._key);\n        // Do not remove training metrics\n        keep.add(cp._output._training_metrics._key);\n        // And validation model metrics\n        if (cp._output._validation_metrics != null) {\n          keep.add(cp._output._validation_metrics._key);\n        }\n        if (cp._output.weights != null && cp._output.biases != null) {\n          for (Key k : Arrays.asList(cp._output.weights)) {\n            keep.add(k);\n            for (Vec vk : ((Frame) DKV.getGet(k)).vecs()) {\n              keep.add(vk._key);\n            }\n          }\n          for (Key k : Arrays.asList(cp._output.biases)) {\n            keep.add(k);\n            for (Vec vk : ((Frame) DKV.getGet(k)).vecs()) {\n              keep.add(vk._key);\n            }\n          }\n        }\n      } catch(NullPointerException npe) {\n\n      } finally {\n        Scope.exit(keep.toArray(new Key[0]));\n      }\n    }","id":96039,"modified_method":"/**\n     * Train a Deep Learning model, assumes that all members are populated\n     * If checkpoint == null, then start training a new model, otherwise continue from a checkpoint\n     */\n    public final void buildModel() {\n      Scope.enter();\n      DeepLearningModel cp = null;\n      if (_parms._checkpoint == null) {\n        cp = new DeepLearningModel(dest(), _parms, new DeepLearningModel.DeepLearningModelOutput(DeepLearning.this), _train, _valid, nclasses());\n        cp.model_info().initializeMembers();\n      } else {\n        final DeepLearningModel previous = DKV.getGet(_parms._checkpoint);\n        if (previous == null) throw new IllegalArgumentException(\"Checkpoint not found.\");\n        Log.info(\"Resuming from checkpoint.\");\n        new ProgressUpdate(\"Resuming from checkpoint\").fork(_progressKey);\n\n        if( isClassifier() != previous._output.isClassifier() )\n          throw new IllegalArgumentException(\"Response type must be the same as for the checkpointed model.\");\n        if( isSupervised() != previous._output.isSupervised() )\n          throw new IllegalArgumentException(\"Model type must be the same as for the checkpointed model.\");\n\n        // check the user-given arguments for consistency\n        DeepLearningParameters oldP = previous._parms; //user-given parameters for checkpointed model\n        DeepLearningParameters newP = _parms; //user-given parameters for restart\n        DeepLearningParameters.Sanity.checkpoint(oldP, newP);\n\n        try {\n          final DataInfo dinfo = makeDataInfo(_train, _valid, _parms);\n          DKV.put(dinfo);\n          cp = new DeepLearningModel(dest(), _parms, previous, false, dinfo);\n          cp.write_lock(self());\n\n          if (!Arrays.equals(cp._output._names, previous._output._names)) {\n            throw new IllegalArgumentException(\"Number of (non-constant) predictor columns of the training data must be the same as for the checkpointed model. Check ignored columns (or disable ignore_const_cols).\");\n          }\n          if (!Arrays.deepEquals(cp._output._domains, previous._output._domains)) {\n            throw new IllegalArgumentException(\"Categorical factor levels of the training data must be the same as for the checkpointed model.\");\n          }\n          if (dinfo.fullN() != previous.model_info().data_info().fullN()) {\n            throw new IllegalArgumentException(\"Total number of predictors is different than for the checkpointed model.\");\n          }\n\n          // these are the mutable parameters that are to be used by the model (stored in model_info._parms)\n          final DeepLearningParameters actualNewP = cp.model_info().get_params(); //actually used parameters for model building (defaults filled in, etc.)\n          assert (actualNewP != previous.model_info().get_params());\n          assert (actualNewP != newP);\n          assert (actualNewP != oldP);\n          DeepLearningParameters.Sanity.update(actualNewP, newP, nclasses());\n\n          Log.info(\"Adding \" + String.format(\"%.3f\", previous.epoch_counter) + \" epochs from the checkpointed model.\");\n          cp.update(self());\n        } finally {\n          if (cp != null) cp.unlock(self());\n        }\n      }\n      trainModel(cp);\n\n      // clean up, but don't delete the model and the training/validation model metrics\n      List<Key> keep = new ArrayList<>();\n      try {\n        keep.add(dest());\n        keep.add(cp.model_info().data_info()._key);\n        // Do not remove training metrics\n        keep.add(cp._output._training_metrics._key);\n        // And validation model metrics\n        if (cp._output._validation_metrics != null) {\n          keep.add(cp._output._validation_metrics._key);\n        }\n        if (cp._output.weights != null && cp._output.biases != null) {\n          for (Key k : Arrays.asList(cp._output.weights)) {\n            keep.add(k);\n            for (Vec vk : ((Frame) DKV.getGet(k)).vecs()) {\n              keep.add(vk._key);\n            }\n          }\n          for (Key k : Arrays.asList(cp._output.biases)) {\n            keep.add(k);\n            for (Vec vk : ((Frame) DKV.getGet(k)).vecs()) {\n              keep.add(vk._key);\n            }\n          }\n        }\n      } finally {\n        Scope.exit(keep.toArray(new Key[0]));\n      }\n    }","commit_id":"90b630fa28dc6ec184e27193906c316c62212368","url":"https://github.com/h2oai/h2o-3"},{"original_method":"void runFraction(float fraction) {\n    long seed0 = 0xDECAF;\n    int num_runs = 0;\n\n    Frame frame = null;\n    try {\n      frame = parse_test_file(Key.make(\"iris.hex\"),PATH);\n\n      for (int repeat = 0; repeat < 5; ++repeat) {\n        // Testing different things\n        // Note: Microsoft reference implementation is only for Tanh + MSE.\n        // Note: Rectifier and MCE are implemented by H2O.ai (trivial).\n        // Note: Initial weight distributions are copied, but what is tested is the stability behavior.\n\n        Activation[] activations = {Activation.Tanh, Activation.Rectifier};\n        Loss[] losses = {Loss.MeanSquare, Loss.CrossEntropy};\n        InitialWeightDistribution[] dists = {\n                InitialWeightDistribution.Normal,\n                InitialWeightDistribution.Uniform,\n                InitialWeightDistribution.UniformAdaptive\n        };\n        final long seed = seed0 + repeat;\n        Random rng = new Random(seed);\n\n        double[] initial_weight_scales = {1e-4 + rng.nextDouble()};\n        double[] holdout_ratios = {0.1 + rng.nextDouble() * 0.8};\n        double[] momenta = {rng.nextDouble() * 0.99};\n        int[] hiddens = {1, 2 + rng.nextInt(50)};\n        int[] epochs = {1, 2 + rng.nextInt(50)};\n        double[] rates = {0.01, 1e-5 + rng.nextDouble() * .1};\n\n        for (Activation activation : activations) {\n          for (Loss loss : losses) {\n            for (InitialWeightDistribution dist : dists) {\n              for (double scale : initial_weight_scales) {\n                for (double holdout_ratio : holdout_ratios) {\n                  for (double momentum : momenta) {\n                    for (int hidden : hiddens) {\n                      for (int epoch : epochs) {\n                        for (double rate : rates) {\n                          Scope.enter();\n                          DeepLearningModel mymodel = null;\n                          Frame trainPredict = null;\n                          Frame testPredict = null;\n                          try {\n                            num_runs++;\n                            if (fraction < rng.nextFloat()) continue;\n                            Log.info(\"\");\n                            Log.info(\"STARTING.\");\n                            Log.info(\"Running with \" + activation.name() + \" activation function and \" + loss.name() + \" loss function.\");\n                            Log.info(\"Initialization with \" + dist.name() + \" distribution and \" + scale + \" scale, holdout ratio \" + holdout_ratio);\n                            Log.info(\"Using \" + hidden + \" hidden layer neurons and momentum: \" + momentum);\n                            Log.info(\"Using seed \" + seed);\n\n                            Random rand;\n\n                            int trial = 0;\n                            do {\n                              Log.info(\"Trial #\" + ++trial);\n                              if (_train != null) _train.delete();\n                              if (_test  != null) _test .delete();\n\n                              rand = RandomUtils.getRNG(seed);\n\n                              double[][] rows = new double[(int) frame.numRows()][frame.numCols()];\n                              String[] names = new String[frame.numCols()];\n                              for (int c = 0; c < frame.numCols(); c++) {\n                                names[c] = \"ColumnName\" + c;\n                                for (int r = 0; r < frame.numRows(); r++)\n                                  rows[r][c] = frame.vecs()[c].at(r);\n                              }\n\n                              for (int i = rows.length - 1; i >= 0; i--) {\n                                int shuffle = rand.nextInt(i + 1);\n                                double[] row = rows[shuffle];\n                                rows[shuffle] = rows[i];\n                                rows[i] = row;\n                              }\n\n                              int limit = (int) (frame.numRows() * holdout_ratio);\n                              _train = frame(names, water.util.ArrayUtils.subarray(rows, 0, limit));\n                              _test  = frame(names, water.util.ArrayUtils.subarray(rows, limit, (int) frame.numRows() - limit));\n\n                              // Must have all output classes in training\n                              // data (since that's what the reference\n                              // implementation has hardcoded).  But count\n                              // of classes is not known unless we visit\n                              // all the response data - force that now.\n                              _train.replace(_train.numCols()-1,_train.lastVec().toEnum());\n                              _test .replace(_train.numCols()-1,_test .lastVec().toEnum());\n                              DKV.put(_train._key,_train);\n                              DKV.put(_test ._key,_test );\n                            }\n                            while( _train.lastVec().cardinality() < 3);\n\n                            // use the same seed for the reference implementation\n                            DeepLearningMLPReference ref = new DeepLearningMLPReference();\n                            ref.init(activation, RandomUtils.getRNG(seed), holdout_ratio, hidden);\n\n                            DeepLearningParameters p = new DeepLearningParameters();\n                            p._train = _train._key;\n                            p._response_column = _train.lastVecName();\n                            assert _train.lastVec().isEnum();\n                            p._ignored_columns = null;\n\n                            p._seed = seed;\n                            p._hidden = new int[]{hidden};\n                            p._adaptive_rate = false;\n                            p._rho = 0;\n                            p._epsilon = 0;\n                            p._rate = rate / (1 - momentum); //adapt to (1-m) correction that's done inside (only for constant momentum!)\n                            p._activation = activation;\n                            p._max_w2 = Float.POSITIVE_INFINITY;\n                            p._input_dropout_ratio = 0;\n                            p._rate_annealing = 0; //do not change - not implemented in reference\n                            p._l1 = 0;\n                            p._loss = loss;\n                            p._l2 = 0;\n                            p._momentum_stable = momentum; //reference only supports constant momentum\n                            p._momentum_start = p._momentum_stable; //do not change - not implemented in reference\n                            p._momentum_ramp = 0; //do not change - not implemented in reference\n                            p._initial_weight_distribution = dist;\n                            p._initial_weight_scale = scale;\n                            p._valid = null;\n                            p._quiet_mode = true;\n                            p._fast_mode = false; //to be the same as reference\n//                            p._fast_mode = true; //to be the same as old NeuralNet code\n                            p._nesterov_accelerated_gradient = false; //to be the same as reference\n//                            p._nesterov_accelerated_gradient = true; //to be the same as old NeuralNet code\n                            p._train_samples_per_iteration = 0; //sync once per period\n                            p._ignore_const_cols = false;\n                            p._shuffle_training_data = false;\n                            p._classification_stop = -1; //don't stop early -> need to compare against reference, which doesn't stop either\n                            p._force_load_balance = false; //keep just 1 chunk for reproducibility\n                            p._overwrite_with_best_model = false;\n                            p._replicate_training_data = false;\n                            p._single_node_mode = true;\n                            p._epochs = 0;\n                            p._elastic_averaging = false;\n                            DeepLearning dl = new DeepLearning(p);\n                            try {\n                              mymodel = dl.trainModel().get();\n                            } finally {\n                              dl.remove();\n                            }\n                            p._epochs = epoch;\n\n                            Neurons[] neurons = DeepLearningTask.makeNeuronsForTraining(mymodel.model_info());\n\n                            // use the same random weights for the reference implementation\n                            Neurons l = neurons[1];\n                            for (int o = 0; o < l._a.size(); o++) {\n                              for (int i = 0; i < l._previous._a.size(); i++) {\n//                                System.out.println(\"initial weight[\" + o + \"]=\" + l._w[o * l._previous._a.length + i]);\n                                ref._nn.ihWeights[i][o] = l._w.get(o, i);\n                              }\n                              ref._nn.hBiases[o] = l._b.get(o);\n//                              System.out.println(\"initial bias[\" + o + \"]=\" + l._b[o]);\n                            }\n                            l = neurons[2];\n                            for (int o = 0; o < l._a.size(); o++) {\n                              for (int i = 0; i < l._previous._a.size(); i++) {\n//                                System.out.println(\"initial weight[\" + o + \"]=\" + l._w[o * l._previous._a.length + i]);\n                                ref._nn.hoWeights[i][o] = l._w.get(o, i);\n                              }\n                              ref._nn.oBiases[o] = l._b.get(o);\n//                              System.out.println(\"initial bias[\" + o + \"]=\" + l._b[o]);\n                            }\n\n                            // Train the Reference\n                            ref.train((int) p._epochs, rate, p._momentum_stable, loss, seed);\n\n                            // Train H2O\n                            mymodel.delete();\n                            dl = new DeepLearning(p);\n                            try {\n                              mymodel = dl.trainModel().get();\n                            } finally {\n                              dl.remove();\n                            }\n                            Assert.assertTrue(mymodel.model_info().get_processed_total() == epoch * dl.train().numRows());\n\n                            /**\n                             * Tolerances (should ideally be super tight -> expect the same double/float precision math inside both algos)\n                             */\n                            final double abseps = 1e-6;\n                            final double releps = 1e-6;\n\n                            /**\n                             * Compare weights and biases in hidden layer\n                             */\n                            neurons = DeepLearningTask.makeNeuronsForTesting(mymodel.model_info()); //link the weights to the neurons, for easy access\n                            l = neurons[1];\n                            for (int o = 0; o < l._a.size(); o++) {\n                              for (int i = 0; i < l._previous._a.size(); i++) {\n                                double a = ref._nn.ihWeights[i][o];\n                                double b = l._w.get(o, i);\n                                compareVal(a, b, abseps, releps);\n//                                System.out.println(\"weight[\" + o + \"]=\" + b);\n                              }\n                              double ba = ref._nn.hBiases[o];\n                              double bb = l._b.get(o);\n                              compareVal(ba, bb, abseps, releps);\n                            }\n                            Log.info(\"Weights and biases for hidden layer: PASS\");\n\n                            /**\n                             * Compare weights and biases for output layer\n                             */\n                            l = neurons[2];\n                            for (int o = 0; o < l._a.size(); o++) {\n                              for (int i = 0; i < l._previous._a.size(); i++) {\n                                double a = ref._nn.hoWeights[i][o];\n                                double b = l._w.get(o, i);\n                                compareVal(a, b, abseps, releps);\n                              }\n                              double ba = ref._nn.oBiases[o];\n                              double bb = l._b.get(o);\n                              compareVal(ba, bb, abseps, releps);\n                            }\n                            Log.info(\"Weights and biases for output layer: PASS\");\n\n                            /**\n                             * Compare predictions\n                             * Note: Reference and H2O each do their internal data normalization,\n                             * so we must use their \"own\" test data, which is assumed to be created correctly.\n                             */\n                            // H2O predictions\n                            Frame fpreds = mymodel.score(_test); //[0] is label, [1]...[4] are the probabilities\n\n                            try {\n                              for (int i = 0; i < _test.numRows(); ++i) {\n                                // Reference predictions\n                                double[] xValues = new double[neurons[0]._a.size()];\n                                System.arraycopy(ref._testData[i], 0, xValues, 0, xValues.length);\n                                double[] ref_preds = ref._nn.ComputeOutputs(xValues);\n\n                                // find the label\n                                // do the same as H2O here (compare float values and break ties based on row number)\n                                double[] preds = new double[ref_preds.length + 1];\n                                for (int j = 0; j < ref_preds.length; ++j) preds[j + 1] = ref_preds[j];\n                                preds[0] = GenModel.getPrediction(preds, null, xValues, 0.5);\n\n                                // compare predicted label\n                                Assert.assertTrue(preds[0] == (int) fpreds.vecs()[0].at(i));\n//                                // compare predicted probabilities\n//                                for (int j=0; j<ref_preds.length; ++j) {\n//                                  compareVal((float)(ref_preds[j]), fpreds.vecs()[1+j].at(i), abseps, releps);\n//                                }\n                              }\n                            } finally {\n                              if (fpreds != null) fpreds.delete();\n                            }\n                            Log.info(\"Predicted values: PASS\");\n\n                            /**\n                             * Compare (self-reported) scoring\n                             */\n                            final double trainErr = ref._nn.Accuracy(ref._trainData);\n                            final double  testErr = ref._nn.Accuracy(ref. _testData);\n                            trainPredict = mymodel.score(_train);\n                            testPredict  = mymodel.score(_test );\n                            hex.ModelMetrics mmtrain = hex.ModelMetrics.getFromDKV(mymodel,_train);\n                            hex.ModelMetrics mmtest  = hex.ModelMetrics.getFromDKV(mymodel,_test );\n                            final double myTrainErr = mmtrain.cm().err();\n                            final double  myTestErr = mmtest .cm().err();\n                            Log.info(\"H2O  training error : \" + myTrainErr * 100 + \"%, test error: \" + myTestErr * 100 + \"%\");\n                            Log.info(\"REF  training error : \" +   trainErr * 100 + \"%, test error: \" +   testErr * 100 + \"%\");\n                            compareVal(trainErr, myTrainErr, abseps, releps);\n                            compareVal( testErr,  myTestErr, abseps, releps);\n                            Log.info(\"Scoring: PASS\");\n\n                            // get the actual best error on training data\n                            float best_err = Float.MAX_VALUE;\n                            for (DeepLearningScoring err : mymodel.scoring_history()) {\n                              best_err = Math.min(best_err, (float) (Double.isNaN(err.scored_train._classError) ? best_err : err.scored_train._classError)); //multi-class classification\n                            }\n                            Log.info(\"Actual best error : \" + best_err * 100 + \"%.\");\n\n                            // this is enabled by default\n                            if (p._overwrite_with_best_model) {\n                              Frame bestPredict = null;\n                              try {\n                                bestPredict = mymodel.score(_train);\n                                hex.ModelMetrics mmbest = hex.ModelMetrics.getFromDKV(mymodel,_train);\n                                final double bestErr = mmbest.cm().err();\n                                Log.info(\"Best_model's error : \" + bestErr * 100 + \"%.\");\n                                compareVal(bestErr, best_err, abseps, releps);\n                              } finally {\n                                if (bestPredict != null) bestPredict.delete();\n                              }\n                            }\n                            Log.info(\"Parameters combination \" + num_runs + \": PASS\");\n\n                          } finally {\n                            // cleanup\n                            if (mymodel != null) {\n                              mymodel.delete();\n                            }\n                            if (_train != null) _train.delete();\n                            if (_test != null) _test.delete();\n                            if (trainPredict != null) trainPredict.delete();\n                            if (testPredict != null) testPredict.delete();\n                            Scope.exit();\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch(Throwable t) {\n      t.printStackTrace();\n      throw new RuntimeException(t);\n    } finally {\n      if (frame != null) frame.delete();\n    }\n  }","id":96040,"modified_method":"void runFraction(float fraction) {\n    long seed0 = 0xDECAF;\n    int num_runs = 0;\n\n    Frame frame = null;\n    try {\n      frame = parse_test_file(Key.make(\"iris.hex\"),PATH);\n\n      for (int repeat = 0; repeat < 5; ++repeat) {\n        // Testing different things\n        // Note: Microsoft reference implementation is only for Tanh + MSE.\n        // Note: Rectifier and MCE are implemented by H2O.ai (trivial).\n        // Note: Initial weight distributions are copied, but what is tested is the stability behavior.\n\n        Activation[] activations = {Activation.Tanh, Activation.Rectifier};\n        Loss[] losses = {Loss.MeanSquare, Loss.CrossEntropy};\n        InitialWeightDistribution[] dists = {\n                InitialWeightDistribution.Normal,\n                InitialWeightDistribution.Uniform,\n                InitialWeightDistribution.UniformAdaptive\n        };\n        final long seed = seed0 + repeat;\n        Random rng = new Random(seed);\n\n        double[] initial_weight_scales = {1e-4 + rng.nextDouble()};\n        double[] holdout_ratios = {0.1 + rng.nextDouble() * 0.8};\n        double[] momenta = {rng.nextDouble() * 0.99};\n        int[] hiddens = {1, 2 + rng.nextInt(50)};\n        int[] epochs = {1, 2 + rng.nextInt(50)};\n        double[] rates = {0.01, 1e-5 + rng.nextDouble() * .1};\n\n        for (Activation activation : activations) {\n          for (Loss loss : losses) {\n            for (InitialWeightDistribution dist : dists) {\n              for (double scale : initial_weight_scales) {\n                for (double holdout_ratio : holdout_ratios) {\n                  for (double momentum : momenta) {\n                    for (int hidden : hiddens) {\n                      for (int epoch : epochs) {\n                        for (double rate : rates) {\n                          DeepLearningModel mymodel = null;\n                          Frame trainPredict = null;\n                          Frame testPredict = null;\n                          try {\n                            num_runs++;\n                            if (fraction < rng.nextFloat()) continue;\n                            Log.info(\"\");\n                            Log.info(\"STARTING.\");\n                            Log.info(\"Running with \" + activation.name() + \" activation function and \" + loss.name() + \" loss function.\");\n                            Log.info(\"Initialization with \" + dist.name() + \" distribution and \" + scale + \" scale, holdout ratio \" + holdout_ratio);\n                            Log.info(\"Using \" + hidden + \" hidden layer neurons and momentum: \" + momentum);\n                            Log.info(\"Using seed \" + seed);\n\n                            Random rand;\n\n                            int trial = 0;\n                            do {\n                              Log.info(\"Trial #\" + ++trial);\n                              if (_train != null) _train.delete();\n                              if (_test  != null) _test .delete();\n\n                              rand = RandomUtils.getRNG(seed);\n\n                              double[][] rows = new double[(int) frame.numRows()][frame.numCols()];\n                              String[] names = new String[frame.numCols()];\n                              for (int c = 0; c < frame.numCols(); c++) {\n                                names[c] = \"ColumnName\" + c;\n                                for (int r = 0; r < frame.numRows(); r++)\n                                  rows[r][c] = frame.vecs()[c].at(r);\n                              }\n\n                              for (int i = rows.length - 1; i >= 0; i--) {\n                                int shuffle = rand.nextInt(i + 1);\n                                double[] row = rows[shuffle];\n                                rows[shuffle] = rows[i];\n                                rows[i] = row;\n                              }\n\n                              int limit = (int) (frame.numRows() * holdout_ratio);\n                              _train = frame(names, water.util.ArrayUtils.subarray(rows, 0, limit));\n                              _test  = frame(names, water.util.ArrayUtils.subarray(rows, limit, (int) frame.numRows() - limit));\n\n                              // Must have all output classes in training\n                              // data (since that's what the reference\n                              // implementation has hardcoded).  But count\n                              // of classes is not known unless we visit\n                              // all the response data - force that now.\n                              String respname = _train.lastVecName();\n                              Vec resp = _train.lastVec().toEnum();\n                              _train.remove(respname).remove();\n                              _train.add(respname, resp);\n\n                              Vec vresp = _test.lastVec().toEnum();\n                              _test.remove(respname).remove();\n                              _test.add(respname, vresp);\n                            }\n                            while( _train.lastVec().cardinality() < 3);\n\n                            // use the same seed for the reference implementation\n                            DeepLearningMLPReference ref = new DeepLearningMLPReference();\n                            ref.init(activation, RandomUtils.getRNG(seed), holdout_ratio, hidden);\n\n                            DeepLearningParameters p = new DeepLearningParameters();\n                            p._train = _train._key;\n                            p._response_column = _train.lastVecName();\n                            assert _train.lastVec().isEnum();\n                            p._ignored_columns = null;\n\n                            p._seed = seed;\n                            p._hidden = new int[]{hidden};\n                            p._adaptive_rate = false;\n                            p._rho = 0;\n                            p._epsilon = 0;\n                            p._rate = rate / (1 - momentum); //adapt to (1-m) correction that's done inside (only for constant momentum!)\n                            p._activation = activation;\n                            p._max_w2 = Float.POSITIVE_INFINITY;\n                            p._input_dropout_ratio = 0;\n                            p._rate_annealing = 0; //do not change - not implemented in reference\n                            p._l1 = 0;\n                            p._loss = loss;\n                            p._l2 = 0;\n                            p._momentum_stable = momentum; //reference only supports constant momentum\n                            p._momentum_start = p._momentum_stable; //do not change - not implemented in reference\n                            p._momentum_ramp = 0; //do not change - not implemented in reference\n                            p._initial_weight_distribution = dist;\n                            p._initial_weight_scale = scale;\n                            p._valid = null;\n                            p._quiet_mode = true;\n                            p._fast_mode = false; //to be the same as reference\n//                            p._fast_mode = true; //to be the same as old NeuralNet code\n                            p._nesterov_accelerated_gradient = false; //to be the same as reference\n//                            p._nesterov_accelerated_gradient = true; //to be the same as old NeuralNet code\n                            p._train_samples_per_iteration = 0; //sync once per period\n                            p._ignore_const_cols = false;\n                            p._shuffle_training_data = false;\n                            p._classification_stop = -1; //don't stop early -> need to compare against reference, which doesn't stop either\n                            p._force_load_balance = false; //keep just 1 chunk for reproducibility\n                            p._overwrite_with_best_model = false;\n                            p._replicate_training_data = false;\n                            p._single_node_mode = true;\n                            p._epochs = 0;\n                            p._elastic_averaging = false;\n                            DeepLearning dl = new DeepLearning(p);\n                            try {\n                              mymodel = dl.trainModel().get();\n                            } finally {\n                              dl.remove();\n                            }\n                            p._epochs = epoch;\n\n                            Neurons[] neurons = DeepLearningTask.makeNeuronsForTraining(mymodel.model_info());\n\n                            // use the same random weights for the reference implementation\n                            Neurons l = neurons[1];\n                            for (int o = 0; o < l._a.size(); o++) {\n                              for (int i = 0; i < l._previous._a.size(); i++) {\n//                                System.out.println(\"initial weight[\" + o + \"]=\" + l._w[o * l._previous._a.length + i]);\n                                ref._nn.ihWeights[i][o] = l._w.get(o, i);\n                              }\n                              ref._nn.hBiases[o] = l._b.get(o);\n//                              System.out.println(\"initial bias[\" + o + \"]=\" + l._b[o]);\n                            }\n                            l = neurons[2];\n                            for (int o = 0; o < l._a.size(); o++) {\n                              for (int i = 0; i < l._previous._a.size(); i++) {\n//                                System.out.println(\"initial weight[\" + o + \"]=\" + l._w[o * l._previous._a.length + i]);\n                                ref._nn.hoWeights[i][o] = l._w.get(o, i);\n                              }\n                              ref._nn.oBiases[o] = l._b.get(o);\n//                              System.out.println(\"initial bias[\" + o + \"]=\" + l._b[o]);\n                            }\n\n                            // Train the Reference\n                            ref.train((int) p._epochs, rate, p._momentum_stable, loss, seed);\n\n                            // Train H2O\n                            mymodel.delete();\n                            dl = new DeepLearning(p);\n                            try {\n                              mymodel = dl.trainModel().get();\n                            } finally {\n                              dl.remove();\n                            }\n                            Assert.assertTrue(mymodel.model_info().get_processed_total() == epoch * dl.train().numRows());\n\n                            /**\n                             * Tolerances (should ideally be super tight -> expect the same double/float precision math inside both algos)\n                             */\n                            final double abseps = 1e-6;\n                            final double releps = 1e-6;\n\n                            /**\n                             * Compare weights and biases in hidden layer\n                             */\n                            neurons = DeepLearningTask.makeNeuronsForTesting(mymodel.model_info()); //link the weights to the neurons, for easy access\n                            l = neurons[1];\n                            for (int o = 0; o < l._a.size(); o++) {\n                              for (int i = 0; i < l._previous._a.size(); i++) {\n                                double a = ref._nn.ihWeights[i][o];\n                                double b = l._w.get(o, i);\n                                compareVal(a, b, abseps, releps);\n//                                System.out.println(\"weight[\" + o + \"]=\" + b);\n                              }\n                              double ba = ref._nn.hBiases[o];\n                              double bb = l._b.get(o);\n                              compareVal(ba, bb, abseps, releps);\n                            }\n                            Log.info(\"Weights and biases for hidden layer: PASS\");\n\n                            /**\n                             * Compare weights and biases for output layer\n                             */\n                            l = neurons[2];\n                            for (int o = 0; o < l._a.size(); o++) {\n                              for (int i = 0; i < l._previous._a.size(); i++) {\n                                double a = ref._nn.hoWeights[i][o];\n                                double b = l._w.get(o, i);\n                                compareVal(a, b, abseps, releps);\n                              }\n                              double ba = ref._nn.oBiases[o];\n                              double bb = l._b.get(o);\n                              compareVal(ba, bb, abseps, releps);\n                            }\n                            Log.info(\"Weights and biases for output layer: PASS\");\n\n                            /**\n                             * Compare predictions\n                             * Note: Reference and H2O each do their internal data normalization,\n                             * so we must use their \"own\" test data, which is assumed to be created correctly.\n                             */\n                            // H2O predictions\n                            Frame fpreds = mymodel.score(_test); //[0] is label, [1]...[4] are the probabilities\n\n                            try {\n                              for (int i = 0; i < _test.numRows(); ++i) {\n                                // Reference predictions\n                                double[] xValues = new double[neurons[0]._a.size()];\n                                System.arraycopy(ref._testData[i], 0, xValues, 0, xValues.length);\n                                double[] ref_preds = ref._nn.ComputeOutputs(xValues);\n\n                                // find the label\n                                // do the same as H2O here (compare float values and break ties based on row number)\n                                double[] preds = new double[ref_preds.length + 1];\n                                for (int j = 0; j < ref_preds.length; ++j) preds[j + 1] = ref_preds[j];\n                                preds[0] = GenModel.getPrediction(preds, null, xValues, 0.5);\n\n                                // compare predicted label\n                                Assert.assertTrue(preds[0] == (int) fpreds.vecs()[0].at(i));\n//                                // compare predicted probabilities\n//                                for (int j=0; j<ref_preds.length; ++j) {\n//                                  compareVal((float)(ref_preds[j]), fpreds.vecs()[1+j].at(i), abseps, releps);\n//                                }\n                              }\n                            } finally {\n                              if (fpreds != null) fpreds.delete();\n                            }\n                            Log.info(\"Predicted values: PASS\");\n\n                            /**\n                             * Compare (self-reported) scoring\n                             */\n                            final double trainErr = ref._nn.Accuracy(ref._trainData);\n                            final double  testErr = ref._nn.Accuracy(ref. _testData);\n                            trainPredict = mymodel.score(_train);\n                            testPredict  = mymodel.score(_test );\n                            hex.ModelMetrics mmtrain = hex.ModelMetrics.getFromDKV(mymodel,_train);\n                            hex.ModelMetrics mmtest  = hex.ModelMetrics.getFromDKV(mymodel,_test );\n                            final double myTrainErr = mmtrain.cm().err();\n                            final double  myTestErr = mmtest .cm().err();\n                            Log.info(\"H2O  training error : \" + myTrainErr * 100 + \"%, test error: \" + myTestErr * 100 + \"%\");\n                            Log.info(\"REF  training error : \" +   trainErr * 100 + \"%, test error: \" +   testErr * 100 + \"%\");\n                            compareVal(trainErr, myTrainErr, abseps, releps);\n                            compareVal( testErr,  myTestErr, abseps, releps);\n                            Log.info(\"Scoring: PASS\");\n\n                            // get the actual best error on training data\n                            float best_err = Float.MAX_VALUE;\n                            for (DeepLearningScoring err : mymodel.scoring_history()) {\n                              best_err = Math.min(best_err, (float) (Double.isNaN(err.scored_train._classError) ? best_err : err.scored_train._classError)); //multi-class classification\n                            }\n                            Log.info(\"Actual best error : \" + best_err * 100 + \"%.\");\n\n                            // this is enabled by default\n                            if (p._overwrite_with_best_model) {\n                              Frame bestPredict = null;\n                              try {\n                                bestPredict = mymodel.score(_train);\n                                hex.ModelMetrics mmbest = hex.ModelMetrics.getFromDKV(mymodel,_train);\n                                final double bestErr = mmbest.cm().err();\n                                Log.info(\"Best_model's error : \" + bestErr * 100 + \"%.\");\n                                compareVal(bestErr, best_err, abseps, releps);\n                              } finally {\n                                if (bestPredict != null) bestPredict.delete();\n                              }\n                            }\n                            Log.info(\"Parameters combination \" + num_runs + \": PASS\");\n\n                          } finally {\n                            // cleanup\n                            if (mymodel != null) {\n                              mymodel.delete();\n                            }\n                            if (_train != null) _train.delete();\n                            if (_test != null) _test.delete();\n                            if (trainPredict != null) trainPredict.delete();\n                            if (testPredict != null) testPredict.delete();\n                          }\n                        }\n                      }\n                    }\n                  }\n                }\n              }\n            }\n          }\n        }\n      }\n    } catch(Throwable t) {\n      t.printStackTrace();\n      throw new RuntimeException(t);\n    } finally {\n      if (frame != null) frame.delete();\n    }\n  }","commit_id":"90b630fa28dc6ec184e27193906c316c62212368","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/**\n   * Helper to reconstruct original data into preds array and compute the reconstruction error (MSE)\n   * @param data Original data (unexpanded)\n   * @param preds Reconstruction (potentially expanded)\n   * @return reconstruction error\n   */\n  private double score_autoencoder(double[] data, double[] preds, Neurons[] neurons) {\n    assert(model_info().get_params()._autoencoder);\n    throw new UnsupportedOperationException(unstable_msg);\n//    if (model_info().unstable()) {\n//      throw new UnsupportedOperationException(unstable_msg);\n//    }\n//    ((Neurons.Input)neurons[0]).setInput(-1, data); // FIXME - no weights yet\n//    DeepLearningTask.step(-1, neurons, model_info, null, false, null, 0 /*no offset*/); // reconstructs data in expanded space\n//    double[] in  = neurons[0]._a.raw(); //input (expanded)\n//    double[] out = neurons[neurons.length - 1]._a.raw(); //output (expanded)\n//    assert(in.length == out.length);\n//\n//    // First normalize categorical reconstructions to be probabilities\n//    // (such that they can be better compared to the input where one factor was 1 and the rest was 0)\n////    model_info().data_info().softMaxCategoricals(out,out); //only modifies the categoricals\n//\n//    // Compute MSE of reconstruction in expanded space (with categorical probabilities)\n//    double l2 = 0;\n//    for (int i = 0; i < in.length; ++i)\n//      l2 += Math.pow((out[i] - in[i]), 2);\n//    l2 /= in.length;\n//\n//    if (preds!=null) {\n//      // Now scale back numerical columns to original data space (scale + shift)\n//      model_info().data_info().unScaleNumericals(out, out); //only modifies the numericals\n//      System.arraycopy(out, 0, preds, 0, out.length); //copy reconstruction into preds\n//    }\n//    return l2;\n  }","id":96041,"modified_method":"/**\n   * Helper to reconstruct original data into preds array and compute the reconstruction error (MSE)\n   * @param data Original data (unexpanded)\n   * @param preds Reconstruction (potentially expanded)\n   * @return reconstruction error\n   */\n  private double score_autoencoder(double[] data, double[] preds, Neurons[] neurons) {\n    assert(model_info().get_params()._autoencoder);\n    if (model_info().unstable()) {\n      throw new UnsupportedOperationException(unstable_msg);\n    }\n    ((Neurons.Input)neurons[0]).setInput(-1, data); // FIXME - no weights yet\n    DeepLearningTask.step(-1, neurons, model_info, null, false, null, 0 /*no offset*/); // reconstructs data in expanded space\n    double[] in  = neurons[0]._a.raw(); //input (expanded)\n    double[] out = neurons[neurons.length - 1]._a.raw(); //output (expanded)\n    assert(in.length == out.length);\n\n    // First normalize categorical reconstructions to be probabilities\n    // (such that they can be better compared to the input where one factor was 1 and the rest was 0)\n//    model_info().data_info().softMaxCategoricals(out,out); //only modifies the categoricals\n\n    // Compute MSE of reconstruction in expanded space (with categorical probabilities)\n    double l2 = 0;\n    for (int i = 0; i < in.length; ++i)\n      l2 += Math.pow((out[i] - in[i]), 2);\n    l2 /= in.length;\n\n    if (preds!=null) {\n      // Now scale back numerical columns to original data space (scale + shift)\n      model_info().data_info().unScaleNumericals(out, out); //only modifies the numericals\n      System.arraycopy(out, 0, preds, 0, out.length); //copy reconstruction into preds\n    }\n    return l2;\n  }","commit_id":"90b630fa28dc6ec184e27193906c316c62212368","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/**\n   * Predict from raw double values representing the data\n   * @param data raw array containing categorical values (horizontalized to 1,0,0,1,0,0 etc.) and numerical values (0.35,1.24,5.3234,etc), both can contain NaNs\n   * @param preds predicted label and per-class probabilities (for classification), predicted target (regression), can contain NaNs\n   * @return preds, can contain NaNs\n   */\n  @Override\n  public double[] score0(double[] data, double[] preds, double weight, double offset) {\n    throw new UnsupportedOperationException(unstable_msg);\n//    if (model_info().unstable()) {\n//      throw new UnsupportedOperationException(unstable_msg);\n//    }\n//    Neurons[] neurons = DeepLearningTask.makeNeuronsForTesting(model_info);\n//    ((Neurons.Input)neurons[0]).setInput(-1, data);\n//    DeepLearningTask.step(-1, neurons, model_info, null, false, null, offset);\n//    double[] out = neurons[neurons.length - 1]._a.raw();\n//    if (_output.isClassifier()) {\n//      assert (preds.length == out.length + 1);\n//      for (int i = 0; i < preds.length - 1; ++i) {\n//        preds[i + 1] = out[i];\n//        if (Double.isNaN(preds[i + 1])) throw new RuntimeException(\"Predicted class probability NaN!\");\n//      }\n//      // label assignment happens later - explicitly mark it as invalid here\n//      preds[0] = -1;\n//    } else {\n//      if (model_info().data_info()._normRespMul != null) //either both are null or none\n//        preds[0] = ((double)out[0] / model_info().data_info()._normRespMul[0] + model_info().data_info()._normRespSub[0]);\n//      else\n//        preds[0] = (double)out[0];\n//      // transform prediction to response space\n//      preds[0] = new Distribution(model_info.get_params()._distribution, model_info.get_params()._tweedie_power).linkInv(preds[0]);\n//      if (Double.isNaN(preds[0])) throw new RuntimeException(\"Predicted regression target NaN!\");\n//    }\n//    return preds;\n  }","id":96042,"modified_method":"/**\n   * Predict from raw double values representing the data\n   * @param data raw array containing categorical values (horizontalized to 1,0,0,1,0,0 etc.) and numerical values (0.35,1.24,5.3234,etc), both can contain NaNs\n   * @param preds predicted label and per-class probabilities (for classification), predicted target (regression), can contain NaNs\n   * @return preds, can contain NaNs\n   */\n  @Override\n  public double[] score0(double[] data, double[] preds, double weight, double offset) {\n    if (model_info().unstable()) {\n      throw new UnsupportedOperationException(unstable_msg);\n    }\n    Neurons[] neurons = DeepLearningTask.makeNeuronsForTesting(model_info);\n    ((Neurons.Input)neurons[0]).setInput(-1, data);\n    DeepLearningTask.step(-1, neurons, model_info, null, false, null, offset);\n    double[] out = neurons[neurons.length - 1]._a.raw();\n    if (_output.isClassifier()) {\n      assert (preds.length == out.length + 1);\n      for (int i = 0; i < preds.length - 1; ++i) {\n        preds[i + 1] = out[i];\n        if (Double.isNaN(preds[i + 1])) throw new RuntimeException(\"Predicted class probability NaN!\");\n      }\n      // label assignment happens later - explicitly mark it as invalid here\n      preds[0] = -1;\n    } else {\n      if (model_info().data_info()._normRespMul != null) //either both are null or none\n        preds[0] = ((double)out[0] / model_info().data_info()._normRespMul[0] + model_info().data_info()._normRespSub[0]);\n      else\n        preds[0] = (double)out[0];\n      // transform prediction to response space\n      preds[0] = new Distribution(model_info.get_params()._distribution, model_info.get_params()._tweedie_power).linkInv(preds[0]);\n      if (Double.isNaN(preds[0])) throw new RuntimeException(\"Predicted regression target NaN!\");\n    }\n    return preds;\n  }","commit_id":"90b630fa28dc6ec184e27193906c316c62212368","url":"https://github.com/h2oai/h2o-3"},{"original_method":"/**\n     * Transform the detyped operation parameters into the hornetQ configuration.\n     *\n     * @param context the operation context\n     * @param serverName the name of the HornetQServer instance\n     * @param model the subsystem root resource model\n     * @return the hornetQ configuration\n     */\n    private Configuration transformConfig(final OperationContext context, String serverName, final ModelNode model) throws OperationFailedException {\n\n        Configuration configuration = new ConfigurationImpl();\n\n        configuration.setName(serverName);\n\n        // --\n        configuration.setAllowAutoFailBack(ALLOW_FAILBACK.resolveModelAttribute(context, model).asBoolean());\n        configuration.setEnabledAsyncConnectionExecution(ASYNC_CONNECTION_EXECUTION_ENABLED.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setBackupGroupName(BACKUP_GROUP_NAME.resolveModelAttribute(context, model).asString());\n        configuration.setReplicationClustername(REPLICATION_CLUSTERNAME.resolveModelAttribute(context, model).asString());\n        configuration.setCheckForLiveServer(CHECK_FOR_LIVE_SERVER.resolveModelAttribute(context, model).asBoolean());\n        configuration.setBackup(BACKUP.resolveModelAttribute(context, model).asBoolean());\n        configuration.setClusterPassword(CLUSTER_PASSWORD.resolveModelAttribute(context, model).asString());\n        configuration.setClusterUser(CLUSTER_USER.resolveModelAttribute(context, model).asString());\n        configuration.setConnectionTTLOverride(CONNECTION_TTL_OVERRIDE.resolveModelAttribute(context, model).asInt());\n        configuration.setCreateBindingsDir(CREATE_BINDINGS_DIR.resolveModelAttribute(context, model).asBoolean());\n        configuration.setCreateJournalDir(CREATE_JOURNAL_DIR.resolveModelAttribute(context, model).asBoolean());\n        configuration.setFailbackDelay(FAILBACK_DELAY.resolveModelAttribute(context, model).asLong());\n        configuration.setFailoverOnServerShutdown(FAILOVER_ON_SHUTDOWN.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setIDCacheSize(ID_CACHE_SIZE.resolveModelAttribute(context, model).asInt());\n        // TODO do we want to allow the jmx configuration ?\n        configuration.setJMXDomain(JMX_DOMAIN.resolveModelAttribute(context, model).asString());\n        configuration.setJMXManagementEnabled(JMX_MANAGEMENT_ENABLED.resolveModelAttribute(context, model).asBoolean());\n        // Journal\n        final JournalType journalType = JournalType.valueOf(JOURNAL_TYPE.resolveModelAttribute(context, model).asString());\n        configuration.setJournalType(journalType);\n\n        // AIO Journal\n        configuration.setJournalBufferSize_AIO(JOURNAL_BUFFER_SIZE.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.DEFAULT_JOURNAL_BUFFER_SIZE_AIO));\n        configuration.setJournalBufferTimeout_AIO(JOURNAL_BUFFER_TIMEOUT.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.DEFAULT_JOURNAL_BUFFER_TIMEOUT_AIO));\n        configuration.setJournalMaxIO_AIO(JOURNAL_MAX_IO.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.DEFAULT_JOURNAL_MAX_IO_AIO));\n        // NIO Journal\n        configuration.setJournalBufferSize_NIO(JOURNAL_BUFFER_SIZE.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.DEFAULT_JOURNAL_BUFFER_SIZE_NIO));\n        configuration.setJournalBufferTimeout_NIO(JOURNAL_BUFFER_TIMEOUT.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.DEFAULT_JOURNAL_BUFFER_TIMEOUT_NIO));\n        configuration.setJournalMaxIO_NIO(JOURNAL_MAX_IO.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.DEFAULT_JOURNAL_MAX_IO_NIO));\n        //\n        configuration.setJournalCompactMinFiles(JOURNAL_COMPACT_MIN_FILES.resolveModelAttribute(context, model).asInt());\n        configuration.setJournalCompactPercentage(JOURNAL_COMPACT_PERCENTAGE.resolveModelAttribute(context, model).asInt());\n        configuration.setJournalFileSize(JOURNAL_FILE_SIZE.resolveModelAttribute(context, model).asInt());\n        configuration.setJournalMinFiles(JOURNAL_MIN_FILES.resolveModelAttribute(context, model).asInt());\n        configuration.setJournalSyncNonTransactional(JOURNAL_SYNC_NON_TRANSACTIONAL.resolveModelAttribute(context, model).asBoolean());\n        configuration.setJournalSyncTransactional(JOURNAL_SYNC_TRANSACTIONAL.resolveModelAttribute(context, model).asBoolean());\n        configuration.setLogJournalWriteRate(LOG_JOURNAL_WRITE_RATE.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setManagementAddress(SimpleString.toSimpleString(MANAGEMENT_ADDRESS.resolveModelAttribute(context, model).asString()));\n        configuration.setManagementNotificationAddress(SimpleString.toSimpleString(MANAGEMENT_NOTIFICATION_ADDRESS.resolveModelAttribute(context, model).asString()));\n\n        configuration.setMemoryMeasureInterval(MEMORY_MEASURE_INTERVAL.resolveModelAttribute(context, model).asLong());\n        configuration.setMemoryWarningThreshold(MEMORY_WARNING_THRESHOLD.resolveModelAttribute(context, model).asInt());\n\n        configuration.setMessageCounterEnabled(MESSAGE_COUNTER_ENABLED.resolveModelAttribute(context, model).asBoolean());\n        configuration.setMessageCounterSamplePeriod(MESSAGE_COUNTER_SAMPLE_PERIOD.resolveModelAttribute(context, model).asInt());\n        configuration.setMessageCounterMaxDayHistory(MESSAGE_COUNTER_MAX_DAY_HISTORY.resolveModelAttribute(context, model).asInt());\n        configuration.setMessageExpiryScanPeriod(MESSAGE_EXPIRY_SCAN_PERIOD.resolveModelAttribute(context, model).asLong());\n        configuration.setMessageExpiryThreadPriority(MESSAGE_EXPIRY_THREAD_PRIORITY.resolveModelAttribute(context, model).asInt());\n\n        configuration.setJournalPerfBlastPages(PERF_BLAST_PAGES.resolveModelAttribute(context, model).asInt());\n        configuration.setPersistDeliveryCountBeforeDelivery(PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setPageMaxConcurrentIO(PAGE_MAX_CONCURRENT_IO.resolveModelAttribute(context, model).asInt());\n\n        configuration.setPersistenceEnabled(PERSISTENCE_ENABLED.resolveModelAttribute(context, model).asBoolean());\n        configuration.setPersistIDCache(PERSIST_ID_CACHE.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setRunSyncSpeedTest(RUN_SYNC_SPEED_TEST.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setScheduledThreadPoolMaxSize(SCHEDULED_THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt());\n        configuration.setSecurityEnabled(SECURITY_ENABLED.resolveModelAttribute(context, model).asBoolean());\n        configuration.setSecurityInvalidationInterval(SECURITY_INVALIDATION_INTERVAL.resolveModelAttribute(context, model).asLong());\n        configuration.setServerDumpInterval(SERVER_DUMP_INTERVAL.resolveModelAttribute(context, model).asLong());\n        configuration.setSharedStore(SHARED_STORE.resolveModelAttribute(context, model).asBoolean());\n        configuration.setThreadPoolMaxSize(THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt());\n        configuration.setTransactionTimeout(TRANSACTION_TIMEOUT.resolveModelAttribute(context, model).asLong());\n        configuration.setTransactionTimeoutScanPeriod(TRANSACTION_TIMEOUT_SCAN_PERIOD.resolveModelAttribute(context, model).asLong());\n        configuration.setWildcardRoutingEnabled(WILD_CARD_ROUTING_ENABLED.resolveModelAttribute(context, model).asBoolean());\n\n        processAddressSettings(context, configuration, model);\n        processSecuritySettings(context, configuration, model);\n        //process deprecated interceptors\n        processRemotingInterceptors(context, configuration, model);\n        //process new interceptors\n        processRemotingIncomingInterceptors(context, configuration, model);\n        processRemotingOutgoingInterceptors(context, configuration, model);\n\n        // Add in items from child resources\n        GroupingHandlerAdd.addGroupingHandlerConfig(context,configuration, model);\n        BroadcastGroupAdd.addBroadcastGroupConfigs(context, configuration, model);\n        DiscoveryGroupAdd.addDiscoveryGroupConfigs(context, configuration, model);\n        DivertAdd.addDivertConfigs(context, configuration, model);\n        QueueAdd.addQueueConfigs(context, configuration, model);\n        BridgeAdd.addBridgeConfigs(context, configuration, model);\n        ClusterConnectionAdd.addClusterConnectionConfigs(context, configuration, model);\n        ConnectorServiceAdd.addConnectorServiceConfigs(context, configuration, model);\n\n        return configuration;\n    }","id":96043,"modified_method":"/**\n     * Transform the detyped operation parameters into the hornetQ configuration.\n     *\n     * @param context the operation context\n     * @param serverName the name of the HornetQServer instance\n     * @param model the subsystem root resource model\n     * @return the hornetQ configuration\n     */\n    private Configuration transformConfig(final OperationContext context, String serverName, final ModelNode model) throws OperationFailedException {\n\n        Configuration configuration = new ConfigurationImpl();\n\n        configuration.setName(serverName);\n\n        // --\n        configuration.setAllowAutoFailBack(ALLOW_FAILBACK.resolveModelAttribute(context, model).asBoolean());\n        configuration.setEnabledAsyncConnectionExecution(ASYNC_CONNECTION_EXECUTION_ENABLED.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setBackupGroupName(BACKUP_GROUP_NAME.resolveModelAttribute(context, model).asString());\n        ModelNode replicationClusterName = REPLICATION_CLUSTERNAME.resolveModelAttribute(context, model);\n        if (replicationClusterName.isDefined()) {\n            configuration.setReplicationClustername(replicationClusterName.asString());\n        }\n        configuration.setCheckForLiveServer(CHECK_FOR_LIVE_SERVER.resolveModelAttribute(context, model).asBoolean());\n        configuration.setBackup(BACKUP.resolveModelAttribute(context, model).asBoolean());\n        configuration.setClusterPassword(CLUSTER_PASSWORD.resolveModelAttribute(context, model).asString());\n        configuration.setClusterUser(CLUSTER_USER.resolveModelAttribute(context, model).asString());\n        configuration.setConnectionTTLOverride(CONNECTION_TTL_OVERRIDE.resolveModelAttribute(context, model).asInt());\n        configuration.setCreateBindingsDir(CREATE_BINDINGS_DIR.resolveModelAttribute(context, model).asBoolean());\n        configuration.setCreateJournalDir(CREATE_JOURNAL_DIR.resolveModelAttribute(context, model).asBoolean());\n        configuration.setFailbackDelay(FAILBACK_DELAY.resolveModelAttribute(context, model).asLong());\n        configuration.setFailoverOnServerShutdown(FAILOVER_ON_SHUTDOWN.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setIDCacheSize(ID_CACHE_SIZE.resolveModelAttribute(context, model).asInt());\n        // TODO do we want to allow the jmx configuration ?\n        configuration.setJMXDomain(JMX_DOMAIN.resolveModelAttribute(context, model).asString());\n        configuration.setJMXManagementEnabled(JMX_MANAGEMENT_ENABLED.resolveModelAttribute(context, model).asBoolean());\n        // Journal\n        final JournalType journalType = JournalType.valueOf(JOURNAL_TYPE.resolveModelAttribute(context, model).asString());\n        configuration.setJournalType(journalType);\n\n        // AIO Journal\n        configuration.setJournalBufferSize_AIO(JOURNAL_BUFFER_SIZE.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.DEFAULT_JOURNAL_BUFFER_SIZE_AIO));\n        configuration.setJournalBufferTimeout_AIO(JOURNAL_BUFFER_TIMEOUT.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.DEFAULT_JOURNAL_BUFFER_TIMEOUT_AIO));\n        configuration.setJournalMaxIO_AIO(JOURNAL_MAX_IO.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.DEFAULT_JOURNAL_MAX_IO_AIO));\n        // NIO Journal\n        configuration.setJournalBufferSize_NIO(JOURNAL_BUFFER_SIZE.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.DEFAULT_JOURNAL_BUFFER_SIZE_NIO));\n        configuration.setJournalBufferTimeout_NIO(JOURNAL_BUFFER_TIMEOUT.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.DEFAULT_JOURNAL_BUFFER_TIMEOUT_NIO));\n        configuration.setJournalMaxIO_NIO(JOURNAL_MAX_IO.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.DEFAULT_JOURNAL_MAX_IO_NIO));\n        //\n        configuration.setJournalCompactMinFiles(JOURNAL_COMPACT_MIN_FILES.resolveModelAttribute(context, model).asInt());\n        configuration.setJournalCompactPercentage(JOURNAL_COMPACT_PERCENTAGE.resolveModelAttribute(context, model).asInt());\n        configuration.setJournalFileSize(JOURNAL_FILE_SIZE.resolveModelAttribute(context, model).asInt());\n        configuration.setJournalMinFiles(JOURNAL_MIN_FILES.resolveModelAttribute(context, model).asInt());\n        configuration.setJournalSyncNonTransactional(JOURNAL_SYNC_NON_TRANSACTIONAL.resolveModelAttribute(context, model).asBoolean());\n        configuration.setJournalSyncTransactional(JOURNAL_SYNC_TRANSACTIONAL.resolveModelAttribute(context, model).asBoolean());\n        configuration.setLogJournalWriteRate(LOG_JOURNAL_WRITE_RATE.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setManagementAddress(SimpleString.toSimpleString(MANAGEMENT_ADDRESS.resolveModelAttribute(context, model).asString()));\n        configuration.setManagementNotificationAddress(SimpleString.toSimpleString(MANAGEMENT_NOTIFICATION_ADDRESS.resolveModelAttribute(context, model).asString()));\n\n        configuration.setMemoryMeasureInterval(MEMORY_MEASURE_INTERVAL.resolveModelAttribute(context, model).asLong());\n        configuration.setMemoryWarningThreshold(MEMORY_WARNING_THRESHOLD.resolveModelAttribute(context, model).asInt());\n\n        configuration.setMessageCounterEnabled(MESSAGE_COUNTER_ENABLED.resolveModelAttribute(context, model).asBoolean());\n        configuration.setMessageCounterSamplePeriod(MESSAGE_COUNTER_SAMPLE_PERIOD.resolveModelAttribute(context, model).asInt());\n        configuration.setMessageCounterMaxDayHistory(MESSAGE_COUNTER_MAX_DAY_HISTORY.resolveModelAttribute(context, model).asInt());\n        configuration.setMessageExpiryScanPeriod(MESSAGE_EXPIRY_SCAN_PERIOD.resolveModelAttribute(context, model).asLong());\n        configuration.setMessageExpiryThreadPriority(MESSAGE_EXPIRY_THREAD_PRIORITY.resolveModelAttribute(context, model).asInt());\n\n        configuration.setJournalPerfBlastPages(PERF_BLAST_PAGES.resolveModelAttribute(context, model).asInt());\n        configuration.setPersistDeliveryCountBeforeDelivery(PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setPageMaxConcurrentIO(PAGE_MAX_CONCURRENT_IO.resolveModelAttribute(context, model).asInt());\n\n        configuration.setPersistenceEnabled(PERSISTENCE_ENABLED.resolveModelAttribute(context, model).asBoolean());\n        configuration.setPersistIDCache(PERSIST_ID_CACHE.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setRunSyncSpeedTest(RUN_SYNC_SPEED_TEST.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setScheduledThreadPoolMaxSize(SCHEDULED_THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt());\n        configuration.setSecurityEnabled(SECURITY_ENABLED.resolveModelAttribute(context, model).asBoolean());\n        configuration.setSecurityInvalidationInterval(SECURITY_INVALIDATION_INTERVAL.resolveModelAttribute(context, model).asLong());\n        configuration.setServerDumpInterval(SERVER_DUMP_INTERVAL.resolveModelAttribute(context, model).asLong());\n        configuration.setSharedStore(SHARED_STORE.resolveModelAttribute(context, model).asBoolean());\n        configuration.setThreadPoolMaxSize(THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt());\n        configuration.setTransactionTimeout(TRANSACTION_TIMEOUT.resolveModelAttribute(context, model).asLong());\n        configuration.setTransactionTimeoutScanPeriod(TRANSACTION_TIMEOUT_SCAN_PERIOD.resolveModelAttribute(context, model).asLong());\n        configuration.setWildcardRoutingEnabled(WILD_CARD_ROUTING_ENABLED.resolveModelAttribute(context, model).asBoolean());\n\n        processAddressSettings(context, configuration, model);\n        processSecuritySettings(context, configuration, model);\n        //process deprecated interceptors\n        processRemotingInterceptors(context, configuration, model);\n        //process new interceptors\n        processRemotingIncomingInterceptors(context, configuration, model);\n        processRemotingOutgoingInterceptors(context, configuration, model);\n\n        // Add in items from child resources\n        GroupingHandlerAdd.addGroupingHandlerConfig(context,configuration, model);\n        BroadcastGroupAdd.addBroadcastGroupConfigs(context, configuration, model);\n        DiscoveryGroupAdd.addDiscoveryGroupConfigs(context, configuration, model);\n        DivertAdd.addDivertConfigs(context, configuration, model);\n        QueueAdd.addQueueConfigs(context, configuration, model);\n        BridgeAdd.addBridgeConfigs(context, configuration, model);\n        ClusterConnectionAdd.addClusterConnectionConfigs(context, configuration, model);\n        ConnectorServiceAdd.addConnectorServiceConfigs(context, configuration, model);\n\n        return configuration;\n    }","commit_id":"a995c9545f6fa4425a771381cc490528703ec355","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    AbstractListenerService<? extends AbstractListenerService> createService(String name, final String serverName, final OperationContext context, ModelNode model, long maxUploadSize) throws OperationFailedException {\n        String scheme = AjpListenerResourceDefinition.SCHEME.resolveModelAttribute(context, model).asString();\n        return new AjpListenerService(name, scheme, maxUploadSize);\n    }","id":96044,"modified_method":"@Override\n    AbstractListenerService<? extends AbstractListenerService> createService(String name, final String serverName, final OperationContext context, ModelNode model, long maxUploadSize) throws OperationFailedException {\n        ModelNode schemeNode = AjpListenerResourceDefinition.SCHEME.resolveModelAttribute(context, model);\n        String scheme = null;\n        if(schemeNode.isDefined()) {\n            scheme = schemeNode.asString();\n        }\n        return new AjpListenerService(name, scheme, maxUploadSize);\n    }","commit_id":"e10930dd208891bc5f1aba6bd51e1bf95d834f5f","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static void addSso(ModelControllerClient client) throws Exception {\n        final List<ModelNode> updates = new ArrayList<ModelNode>();\n\n        // SSO element name must be 'configuration'\n        ModelNode op = createOpNode(\"subsystem=undertow/server=default-server/host=default-host/setting=single-sign-on\", ADD);\n        op.get(\"domain\").set(\"${jboss.bind.address:127.0.0.1}\");\n        updates.add(op);\n\n        applyUpdates(updates, client);\n    }","id":96045,"modified_method":"public static void addSso(ModelControllerClient client) throws Exception {\n        final List<ModelNode> updates = new ArrayList<ModelNode>();\n\n        // SSO element name must be 'configuration'\n        updates.add(createOpNode(\"subsystem=undertow/server=default-server/host=default-host/setting=single-sign-on\", ADD));\n\n        applyUpdates(updates, client);\n    }","commit_id":"fdf944997dc6f557ea3cffe2e831aa3ce334009c","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static void removeSso(final ModelControllerClient client) throws Exception {\n        final List<ModelNode> updates = new ArrayList<ModelNode>();\n\n        ModelNode op = createOpNode(\"subsystem=undertow/server=default-server/host=default-host/setting=single-sign-on\", REMOVE);\n        op.get(\"domain\").set(\"${jboss.bind.address:127.0.0.1}\");\n        updates.add(op);\n\n        applyUpdates(updates, client);\n    }","id":96046,"modified_method":"public static void removeSso(final ModelControllerClient client) throws Exception {\n        final List<ModelNode> updates = new ArrayList<ModelNode>();\n\n        updates.add(createOpNode(\"subsystem=undertow/server=default-server/host=default-host/setting=single-sign-on\", REMOVE));\n\n        applyUpdates(updates, client);\n    }","commit_id":"fdf944997dc6f557ea3cffe2e831aa3ce334009c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void performRuntime(final OperationContext context, final ModelNode operation, final ModelNode model, final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> newControllers) throws OperationFailedException {\n        final PathAddress address = PathAddress.pathAddress(operation.get(OP_ADDR));\n                final PathAddress hostAddress = address.subAddress(0, address.size() - 1);\n                final PathAddress serverAddress = hostAddress.subAddress(0, hostAddress.size() - 1);\n\n        final String domain = SingleSignOnDefinition.DOMAIN.resolveModelAttribute(context, model).asString();\n\n        final String serverName = serverAddress.getLastElement().getValue();\n        final String hostName = hostAddress.getLastElement().getValue();\n        final ServiceName serviceName = UndertowService.ssoServiceName(serverName, hostName);\n        final ServiceName virtualHostServiceName = UndertowService.virtualHostName(serverName, hostName);\n\n        final ServiceTarget target = context.getServiceTarget();\n\n        ServiceName managerServiceName = serviceName.append(\"manager\");\n        ServiceController<?> factoryController = SingleSignOnManagerService.build(target, managerServiceName, virtualHostServiceName).setInitialMode(ServiceController.Mode.ON_DEMAND).install();\n        if (newControllers != null) {\n            newControllers.add(factoryController);\n        }\n\n        final SingleSignOnService service = new SingleSignOnService(domain);\n        final ServiceController<?> sc = target.addService(serviceName, service)\n                .addDependency(virtualHostServiceName, Host.class, service.getHost())\n                .addDependency(managerServiceName, SingleSignOnManager.class, service.getSingleSignOnSessionManager())\n                .setInitialMode(ServiceController.Mode.ACTIVE)\n                .install();\n\n        if (newControllers != null) {\n            newControllers.add(sc);\n        }\n    }","id":96047,"modified_method":"@Override\n    protected void performRuntime(final OperationContext context, final ModelNode operation, final ModelNode model, final ServiceVerificationHandler verificationHandler, final List<ServiceController<?>> newControllers) throws OperationFailedException {\n        final PathAddress address = PathAddress.pathAddress(operation.get(OP_ADDR));\n                final PathAddress hostAddress = address.subAddress(0, address.size() - 1);\n                final PathAddress serverAddress = hostAddress.subAddress(0, hostAddress.size() - 1);\n\n        ModelNode domainModelNode = SingleSignOnDefinition.DOMAIN.resolveModelAttribute(context, model);\n        String domain = domainModelNode.isDefined() ? domainModelNode.asString() : null;\n        final String serverName = serverAddress.getLastElement().getValue();\n        final String hostName = hostAddress.getLastElement().getValue();\n        final ServiceName serviceName = UndertowService.ssoServiceName(serverName, hostName);\n        final ServiceName virtualHostServiceName = UndertowService.virtualHostName(serverName, hostName);\n\n        final ServiceTarget target = context.getServiceTarget();\n\n        ServiceName managerServiceName = serviceName.append(\"manager\");\n        ServiceController<?> factoryController = SingleSignOnManagerService.build(target, managerServiceName, virtualHostServiceName).setInitialMode(ServiceController.Mode.ON_DEMAND).install();\n        if (newControllers != null) {\n            newControllers.add(factoryController);\n        }\n\n        final SingleSignOnService service = new SingleSignOnService(domain);\n        final ServiceController<?> sc = target.addService(serviceName, service)\n                .addDependency(virtualHostServiceName, Host.class, service.getHost())\n                .addDependency(managerServiceName, SingleSignOnManager.class, service.getSingleSignOnSessionManager())\n                .setInitialMode(ServiceController.Mode.ACTIVE)\n                .install();\n\n        if (newControllers != null) {\n            newControllers.add(sc);\n        }\n    }","commit_id":"fdf944997dc6f557ea3cffe2e831aa3ce334009c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void stop(StopContext stopContext) {\n        this.host.getValue().unregisterAdditionalAuthenticationMechanism(AUTHENTICATION_MECHANISM_NAME);\n    }","id":96048,"modified_method":"@Override\n    public void stop(StopContext stopContext) {\n        Host host = this.host.getValue();\n        host.unregisterAdditionalAuthenticationMechanism(AUTHENTICATION_MECHANISM_NAME);\n    }","commit_id":"fdf944997dc6f557ea3cffe2e831aa3ce334009c","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void start(StartContext startContext) {\n        SingleSignOnAuthenticationMechanism mechanism = new SingleSignOnAuthenticationMechanism(this.manager.getValue());\n        if (this.domain != null) {\n            mechanism.setDomain(this.domain);\n        }\n\n        this.host.getValue().registerAdditionalAuthenticationMechanism(AUTHENTICATION_MECHANISM_NAME, mechanism);\n    }","id":96049,"modified_method":"@Override\n    public void start(StartContext startContext) {\n        Host host = this.host.getValue();\n        SingleSignOnAuthenticationMechanism mechanism = new SingleSignOnAuthenticationMechanism(this.manager.getValue());\n        mechanism.setDomain((this.domain != null) ? this.domain : host.getName());\n\n        host.registerAdditionalAuthenticationMechanism(AUTHENTICATION_MECHANISM_NAME, mechanism);\n    }","commit_id":"fdf944997dc6f557ea3cffe2e831aa3ce334009c","url":"https://github.com/wildfly/wildfly"},{"original_method":"public JSPConfig getConfig(final OperationContext context, final ModelNode model, final boolean developmentMode) throws OperationFailedException {\n        if (!model.isDefined()) {\n            return null;\n        }\n        boolean disabled = DISABLED.resolveModelAttribute(context, model).asBoolean();\n        boolean keepGenerated = KEEP_GENERATED.resolveModelAttribute(context, model).asBoolean();\n        boolean trimSpaces = TRIM_SPACES.resolveModelAttribute(context, model).asBoolean();\n        boolean tagPooling = TAG_POOLING.resolveModelAttribute(context, model).asBoolean();\n        boolean mappedFile = MAPPED_FILE.resolveModelAttribute(context, model).asBoolean();\n        int checkInterval = CHECK_INTERVAL.resolveModelAttribute(context, model).asInt();\n        int modificationTestInterval = MODIFICATION_TEST_INTERVAL.resolveModelAttribute(context, model).asInt();\n        boolean recompileOnFile = RECOMPILE_ON_FAIL.resolveModelAttribute(context, model).asBoolean();\n        boolean snap = SMAP.resolveModelAttribute(context, model).asBoolean();\n        boolean dumpSnap = DUMP_SMAP.resolveModelAttribute(context, model).asBoolean();\n        boolean generateStringsAsCharArrays = GENERATE_STRINGS_AS_CHAR_ARRAYS.resolveModelAttribute(context, model).asBoolean();\n        boolean errorOnUseBeanInvalidClassAttribute = ERROR_ON_USE_BEAN_INVALID_CLASS_ATTRIBUTE.resolveModelAttribute(context, model).asBoolean();\n        String scratchDir = SCRATCH_DIR.resolveModelAttribute(context, model).asString();\n        String sourceVm = SOURCE_VM.resolveModelAttribute(context, model).asString();\n        String targetVm = TARGET_VM.resolveModelAttribute(context, model).asString();\n        String javaEncoding = JAVA_ENCODING.resolveModelAttribute(context, model).asString();\n        boolean xPoweredBy = X_POWERED_BY.resolveModelAttribute(context, model).asBoolean();\n        boolean displaySourceFragment = DISPLAY_SOURCE_FRAGMENT.resolveModelAttribute(context, model).asBoolean();\n\n        return new JSPConfig(developmentMode, disabled, keepGenerated, trimSpaces, tagPooling, mappedFile, checkInterval, modificationTestInterval,\n                recompileOnFile, snap, dumpSnap, generateStringsAsCharArrays, errorOnUseBeanInvalidClassAttribute, scratchDir,\n                sourceVm, targetVm, javaEncoding, xPoweredBy, displaySourceFragment);\n    }","id":96050,"modified_method":"public JSPConfig getConfig(final OperationContext context, final ModelNode model, final boolean developmentMode) throws OperationFailedException {\n        if (!model.isDefined()) {\n            return null;\n        }\n        boolean disabled = DISABLED.resolveModelAttribute(context, model).asBoolean();\n        boolean keepGenerated = KEEP_GENERATED.resolveModelAttribute(context, model).asBoolean();\n        boolean trimSpaces = TRIM_SPACES.resolveModelAttribute(context, model).asBoolean();\n        boolean tagPooling = TAG_POOLING.resolveModelAttribute(context, model).asBoolean();\n        boolean mappedFile = MAPPED_FILE.resolveModelAttribute(context, model).asBoolean();\n        int checkInterval = CHECK_INTERVAL.resolveModelAttribute(context, model).asInt();\n        int modificationTestInterval = MODIFICATION_TEST_INTERVAL.resolveModelAttribute(context, model).asInt();\n        boolean recompileOnFile = RECOMPILE_ON_FAIL.resolveModelAttribute(context, model).asBoolean();\n        boolean snap = SMAP.resolveModelAttribute(context, model).asBoolean();\n        boolean dumpSnap = DUMP_SMAP.resolveModelAttribute(context, model).asBoolean();\n        boolean generateStringsAsCharArrays = GENERATE_STRINGS_AS_CHAR_ARRAYS.resolveModelAttribute(context, model).asBoolean();\n        boolean errorOnUseBeanInvalidClassAttribute = ERROR_ON_USE_BEAN_INVALID_CLASS_ATTRIBUTE.resolveModelAttribute(context, model).asBoolean();\n        final ModelNode scratchDirValue = SCRATCH_DIR.resolveModelAttribute(context, model);\n        String scratchDir = scratchDirValue.isDefined() ? scratchDirValue.asString() : null;\n        String sourceVm = SOURCE_VM.resolveModelAttribute(context, model).asString();\n        String targetVm = TARGET_VM.resolveModelAttribute(context, model).asString();\n        String javaEncoding = JAVA_ENCODING.resolveModelAttribute(context, model).asString();\n        boolean xPoweredBy = X_POWERED_BY.resolveModelAttribute(context, model).asBoolean();\n        boolean displaySourceFragment = DISPLAY_SOURCE_FRAGMENT.resolveModelAttribute(context, model).asBoolean();\n\n        return new JSPConfig(developmentMode, disabled, keepGenerated, trimSpaces, tagPooling, mappedFile, checkInterval, modificationTestInterval,\n                recompileOnFile, snap, dumpSnap, generateStringsAsCharArrays, errorOnUseBeanInvalidClassAttribute, scratchDir,\n                sourceVm, targetVm, javaEncoding, xPoweredBy, displaySourceFragment);\n    }","commit_id":"c8384e8735a7245a0d8e7faaf15e5ffa7386017b","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void performBoottime(OperationContext context, ModelNode baseOperation, ModelNode model,\n                                   ServiceVerificationHandler verificationHandler,\n                                   List<ServiceController<?>> newControllers) throws OperationFailedException {\n        ModelNode fullModel = Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));\n        final ModelNode config = resolveConfiguration(context, fullModel.get(Constants.CONFIGURATION));\n        final String defaultVirtualServer = WebDefinition.DEFAULT_VIRTUAL_SERVER.resolveModelAttribute(context, fullModel).asString();\n\n        final boolean useNative = WebDefinition.NATIVE.resolveModelAttribute(context, fullModel).asBoolean();\n        final String instanceId = WebDefinition.INSTANCE_ID.resolveModelAttribute(context, fullModel).asString();\n\n        context.addStep(new AbstractDeploymentChainStep() {\n            @Override\n            protected void execute(DeploymentProcessorTarget processorTarget) {\n\n                final SharedWebMetaDataBuilder sharedWebBuilder = new SharedWebMetaDataBuilder(config.clone());\n                final SharedTldsMetaDataBuilder sharedTldsBuilder = new SharedTldsMetaDataBuilder(config.clone());\n\n                processorTarget.addDeploymentProcessor(Phase.STRUCTURE, Phase.STRUCTURE_WAR_DEPLOYMENT_INIT, new WarDeploymentInitializingProcessor());\n                processorTarget.addDeploymentProcessor(Phase.STRUCTURE, Phase.STRUCTURE_WAR, new WarStructureDeploymentProcessor(sharedWebBuilder.create(), sharedTldsBuilder));\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEB_DEPLOYMENT, new WebParsingDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEB_DEPLOYMENT_FRAGMENT, new WebFragmentParsingDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_JSF_VERSION, new JsfVersionProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_JBOSS_WEB_DEPLOYMENT, new JBossWebParsingDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_TLD_DEPLOYMENT, new TldParsingDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_ANNOTATION_WAR, new WarAnnotationDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEB_COMPONENTS, new WebComponentProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_EAR_CONTEXT_ROOT, new EarContextRootProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEB_MERGE_METADATA, new WarMetaDataProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.POST_MODULE_JSF_MANAGED_BEANS, new JsfManagedBeanProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEB_INITIALIZE_IN_ORDER, new WebInitializeInOrderProcessor(defaultVirtualServer));\n\n                processorTarget.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_WAR_MODULE, new WarClassloadingDependencyProcessor());\n\n                processorTarget.addDeploymentProcessor(Phase.POST_MODULE, Phase.POST_MODULE_JSF_MANAGED_BEANS, new JsfManagedBeanProcessor());\n                processorTarget.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_SERVLET_INIT_DEPLOYMENT, new ServletContainerInitializerDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_JSF_ANNOTATIONS, new JsfAnnotationProcessor());\n                processorTarget.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_WAR_DEPLOYMENT, new WarDeploymentProcessor(defaultVirtualServer));\n            }\n        }, OperationContext.Stage.RUNTIME);\n\n        final WebServerService service = new WebServerService(defaultVirtualServer, useNative, instanceId);\n        newControllers.add(context.getServiceTarget().addService(WebSubsystemServices.JBOSS_WEB, service)\n                .addDependency(AbstractPathService.pathNameOf(TEMP_DIR), String.class, service.getPathInjector())\n                .addDependency(DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"mbean\", \"server\"), MBeanServer.class, service.getMbeanServer())\n                .setInitialMode(Mode.ON_DEMAND)\n                .install());\n\n    }","id":96051,"modified_method":"@Override\n    protected void performBoottime(OperationContext context, ModelNode baseOperation, ModelNode model,\n                                   ServiceVerificationHandler verificationHandler,\n                                   List<ServiceController<?>> newControllers) throws OperationFailedException {\n        ModelNode fullModel = Resource.Tools.readModel(context.readResource(PathAddress.EMPTY_ADDRESS));\n        final ModelNode config = resolveConfiguration(context, fullModel.get(Constants.CONFIGURATION));\n        final String defaultVirtualServer = WebDefinition.DEFAULT_VIRTUAL_SERVER.resolveModelAttribute(context, fullModel).asString();\n\n        final boolean useNative = WebDefinition.NATIVE.resolveModelAttribute(context, fullModel).asBoolean();\n        final ModelNode instanceIdModel = WebDefinition.INSTANCE_ID.resolveModelAttribute(context, fullModel);\n        final String instanceId = instanceIdModel.isDefined() ? instanceIdModel.asString() : null;\n\n        context.addStep(new AbstractDeploymentChainStep() {\n            @Override\n            protected void execute(DeploymentProcessorTarget processorTarget) {\n\n                final SharedWebMetaDataBuilder sharedWebBuilder = new SharedWebMetaDataBuilder(config.clone());\n                final SharedTldsMetaDataBuilder sharedTldsBuilder = new SharedTldsMetaDataBuilder(config.clone());\n\n                processorTarget.addDeploymentProcessor(Phase.STRUCTURE, Phase.STRUCTURE_WAR_DEPLOYMENT_INIT, new WarDeploymentInitializingProcessor());\n                processorTarget.addDeploymentProcessor(Phase.STRUCTURE, Phase.STRUCTURE_WAR, new WarStructureDeploymentProcessor(sharedWebBuilder.create(), sharedTldsBuilder));\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEB_DEPLOYMENT, new WebParsingDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEB_DEPLOYMENT_FRAGMENT, new WebFragmentParsingDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_JSF_VERSION, new JsfVersionProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_JBOSS_WEB_DEPLOYMENT, new JBossWebParsingDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_TLD_DEPLOYMENT, new TldParsingDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_ANNOTATION_WAR, new WarAnnotationDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEB_COMPONENTS, new WebComponentProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_EAR_CONTEXT_ROOT, new EarContextRootProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEB_MERGE_METADATA, new WarMetaDataProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.POST_MODULE_JSF_MANAGED_BEANS, new JsfManagedBeanProcessor());\n                processorTarget.addDeploymentProcessor(Phase.PARSE, Phase.PARSE_WEB_INITIALIZE_IN_ORDER, new WebInitializeInOrderProcessor(defaultVirtualServer));\n\n                processorTarget.addDeploymentProcessor(Phase.DEPENDENCIES, Phase.DEPENDENCIES_WAR_MODULE, new WarClassloadingDependencyProcessor());\n\n                processorTarget.addDeploymentProcessor(Phase.POST_MODULE, Phase.POST_MODULE_JSF_MANAGED_BEANS, new JsfManagedBeanProcessor());\n                processorTarget.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_SERVLET_INIT_DEPLOYMENT, new ServletContainerInitializerDeploymentProcessor());\n                processorTarget.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_JSF_ANNOTATIONS, new JsfAnnotationProcessor());\n                processorTarget.addDeploymentProcessor(Phase.INSTALL, Phase.INSTALL_WAR_DEPLOYMENT, new WarDeploymentProcessor(defaultVirtualServer));\n            }\n        }, OperationContext.Stage.RUNTIME);\n\n        final WebServerService service = new WebServerService(defaultVirtualServer, useNative, instanceId);\n        newControllers.add(context.getServiceTarget().addService(WebSubsystemServices.JBOSS_WEB, service)\n                .addDependency(AbstractPathService.pathNameOf(TEMP_DIR), String.class, service.getPathInjector())\n                .addDependency(DependencyType.OPTIONAL, ServiceName.JBOSS.append(\"mbean\", \"server\"), MBeanServer.class, service.getMbeanServer())\n                .setInitialMode(Mode.ON_DEMAND)\n                .install());\n\n    }","commit_id":"bb233e7a5f391a1a50e1ff621eaa13d1c9fc1d1f","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * Transform the detyped operation parameters into the hornetQ configuration.\n     *\n     * @param context the operation context\n     * @param serverName the name of the HornetQServer instance\n     * @param model the subsystem root resource model\n     * @return the hornetQ configuration\n     */\n    private Configuration transformConfig(final OperationContext context, String serverName, final ModelNode model) throws OperationFailedException {\n\n        Configuration configuration = new ConfigurationImpl();\n\n        configuration.setName(serverName);\n\n        // --\n        configuration.setAllowAutoFailBack(ALLOW_FAILBACK.resolveModelAttribute(context, model).asBoolean());\n        configuration.setEnabledAsyncConnectionExecution(ASYNC_CONNECTION_EXECUTION_ENABLED.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setBackupGroupName(BACKUP_GROUP_NAME.resolveModelAttribute(context, model).asString());\n        ModelNode replicationClusterName = REPLICATION_CLUSTERNAME.resolveModelAttribute(context, model);\n        if (replicationClusterName.isDefined()) {\n            configuration.setReplicationClustername(replicationClusterName.asString());\n        }\n        configuration.setCheckForLiveServer(CHECK_FOR_LIVE_SERVER.resolveModelAttribute(context, model).asBoolean());\n        configuration.setBackup(BACKUP.resolveModelAttribute(context, model).asBoolean());\n        configuration.setClusterPassword(CLUSTER_PASSWORD.resolveModelAttribute(context, model).asString());\n        configuration.setClusterUser(CLUSTER_USER.resolveModelAttribute(context, model).asString());\n        configuration.setConnectionTTLOverride(CONNECTION_TTL_OVERRIDE.resolveModelAttribute(context, model).asInt());\n        configuration.setCreateBindingsDir(CREATE_BINDINGS_DIR.resolveModelAttribute(context, model).asBoolean());\n        configuration.setCreateJournalDir(CREATE_JOURNAL_DIR.resolveModelAttribute(context, model).asBoolean());\n        configuration.setFailbackDelay(FAILBACK_DELAY.resolveModelAttribute(context, model).asLong());\n        configuration.setFailoverOnServerShutdown(FAILOVER_ON_SHUTDOWN.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setIDCacheSize(ID_CACHE_SIZE.resolveModelAttribute(context, model).asInt());\n        // TODO do we want to allow the jmx configuration ?\n        configuration.setJMXDomain(JMX_DOMAIN.resolveModelAttribute(context, model).asString());\n        configuration.setJMXManagementEnabled(JMX_MANAGEMENT_ENABLED.resolveModelAttribute(context, model).asBoolean());\n        // Journal\n        final JournalType journalType = JournalType.valueOf(JOURNAL_TYPE.resolveModelAttribute(context, model).asString());\n        configuration.setJournalType(journalType);\n\n        // AIO Journal\n        configuration.setJournalBufferSize_AIO(JOURNAL_BUFFER_SIZE.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.getDefaultJournalBufferSizeAio()));\n        configuration.setJournalBufferTimeout_AIO(JOURNAL_BUFFER_TIMEOUT.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.getDefaultJournalBufferTimeoutAio()));\n        configuration.setJournalMaxIO_AIO(JOURNAL_MAX_IO.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.getDefaultJournalMaxIoAio()));\n        // NIO Journal\n        configuration.setJournalBufferSize_NIO(JOURNAL_BUFFER_SIZE.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.getDefaultJournalBufferSizeNio()));\n        configuration.setJournalBufferTimeout_NIO(JOURNAL_BUFFER_TIMEOUT.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.getDefaultJournalBufferTimeoutNio()));\n        configuration.setJournalMaxIO_NIO(JOURNAL_MAX_IO.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.getDefaultJournalMaxIoNio()));\n        //\n        configuration.setJournalCompactMinFiles(JOURNAL_COMPACT_MIN_FILES.resolveModelAttribute(context, model).asInt());\n        configuration.setJournalCompactPercentage(JOURNAL_COMPACT_PERCENTAGE.resolveModelAttribute(context, model).asInt());\n        configuration.setJournalFileSize(JOURNAL_FILE_SIZE.resolveModelAttribute(context, model).asInt());\n        configuration.setJournalMinFiles(JOURNAL_MIN_FILES.resolveModelAttribute(context, model).asInt());\n        configuration.setJournalSyncNonTransactional(JOURNAL_SYNC_NON_TRANSACTIONAL.resolveModelAttribute(context, model).asBoolean());\n        configuration.setJournalSyncTransactional(JOURNAL_SYNC_TRANSACTIONAL.resolveModelAttribute(context, model).asBoolean());\n        configuration.setLogJournalWriteRate(LOG_JOURNAL_WRITE_RATE.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setManagementAddress(SimpleString.toSimpleString(MANAGEMENT_ADDRESS.resolveModelAttribute(context, model).asString()));\n        configuration.setManagementNotificationAddress(SimpleString.toSimpleString(MANAGEMENT_NOTIFICATION_ADDRESS.resolveModelAttribute(context, model).asString()));\n\n        configuration.setMemoryMeasureInterval(MEMORY_MEASURE_INTERVAL.resolveModelAttribute(context, model).asLong());\n        configuration.setMemoryWarningThreshold(MEMORY_WARNING_THRESHOLD.resolveModelAttribute(context, model).asInt());\n\n        configuration.setMessageCounterEnabled(MESSAGE_COUNTER_ENABLED.resolveModelAttribute(context, model).asBoolean());\n        configuration.setMessageCounterSamplePeriod(MESSAGE_COUNTER_SAMPLE_PERIOD.resolveModelAttribute(context, model).asInt());\n        configuration.setMessageCounterMaxDayHistory(MESSAGE_COUNTER_MAX_DAY_HISTORY.resolveModelAttribute(context, model).asInt());\n        configuration.setMessageExpiryScanPeriod(MESSAGE_EXPIRY_SCAN_PERIOD.resolveModelAttribute(context, model).asLong());\n        configuration.setMessageExpiryThreadPriority(MESSAGE_EXPIRY_THREAD_PRIORITY.resolveModelAttribute(context, model).asInt());\n\n        configuration.setJournalPerfBlastPages(PERF_BLAST_PAGES.resolveModelAttribute(context, model).asInt());\n        configuration.setPersistDeliveryCountBeforeDelivery(PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setPageMaxConcurrentIO(PAGE_MAX_CONCURRENT_IO.resolveModelAttribute(context, model).asInt());\n\n        configuration.setPersistenceEnabled(PERSISTENCE_ENABLED.resolveModelAttribute(context, model).asBoolean());\n        configuration.setPersistIDCache(PERSIST_ID_CACHE.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setRunSyncSpeedTest(RUN_SYNC_SPEED_TEST.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setScheduledThreadPoolMaxSize(SCHEDULED_THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt());\n        configuration.setSecurityEnabled(SECURITY_ENABLED.resolveModelAttribute(context, model).asBoolean());\n        configuration.setSecurityInvalidationInterval(SECURITY_INVALIDATION_INTERVAL.resolveModelAttribute(context, model).asLong());\n        configuration.setServerDumpInterval(SERVER_DUMP_INTERVAL.resolveModelAttribute(context, model).asLong());\n        configuration.setSharedStore(SHARED_STORE.resolveModelAttribute(context, model).asBoolean());\n        configuration.setThreadPoolMaxSize(THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt());\n        configuration.setTransactionTimeout(TRANSACTION_TIMEOUT.resolveModelAttribute(context, model).asLong());\n        configuration.setTransactionTimeoutScanPeriod(TRANSACTION_TIMEOUT_SCAN_PERIOD.resolveModelAttribute(context, model).asLong());\n        configuration.setWildcardRoutingEnabled(WILD_CARD_ROUTING_ENABLED.resolveModelAttribute(context, model).asBoolean());\n\n        processAddressSettings(context, configuration, model);\n        processSecuritySettings(context, configuration, model);\n        //process deprecated interceptors\n        processRemotingInterceptors(context, configuration, model);\n        //process new interceptors\n        processRemotingIncomingInterceptors(context, configuration, model);\n        processRemotingOutgoingInterceptors(context, configuration, model);\n\n        // Add in items from child resources\n        GroupingHandlerAdd.addGroupingHandlerConfig(context,configuration, model);\n        DiscoveryGroupAdd.addDiscoveryGroupConfigs(context, configuration, model);\n        DivertAdd.addDivertConfigs(context, configuration, model);\n        QueueAdd.addQueueConfigs(context, configuration, model);\n        BridgeAdd.addBridgeConfigs(context, configuration, model);\n        ClusterConnectionAdd.addClusterConnectionConfigs(context, configuration, model);\n        ConnectorServiceAdd.addConnectorServiceConfigs(context, configuration, model);\n\n        return configuration;\n    }","id":96052,"modified_method":"/**\n     * Transform the detyped operation parameters into the hornetQ configuration.\n     *\n     * @param context the operation context\n     * @param serverName the name of the HornetQServer instance\n     * @param model the subsystem root resource model\n     * @return the hornetQ configuration\n     */\n    private Configuration transformConfig(final OperationContext context, String serverName, final ModelNode model) throws OperationFailedException {\n\n        Configuration configuration = new ConfigurationImpl();\n\n        configuration.setName(serverName);\n\n        // --\n        configuration.setAllowAutoFailBack(ALLOW_FAILBACK.resolveModelAttribute(context, model).asBoolean());\n        configuration.setEnabledAsyncConnectionExecution(ASYNC_CONNECTION_EXECUTION_ENABLED.resolveModelAttribute(context, model).asBoolean());\n\n        ModelNode backupGroupName = BACKUP_GROUP_NAME.resolveModelAttribute(context, model);\n        if (backupGroupName.isDefined()) {\n            configuration.setBackupGroupName(backupGroupName.asString());\n        }\n        ModelNode replicationClusterName = REPLICATION_CLUSTERNAME.resolveModelAttribute(context, model);\n        if (replicationClusterName.isDefined()) {\n            configuration.setReplicationClustername(replicationClusterName.asString());\n        }\n        configuration.setCheckForLiveServer(CHECK_FOR_LIVE_SERVER.resolveModelAttribute(context, model).asBoolean());\n        configuration.setBackup(BACKUP.resolveModelAttribute(context, model).asBoolean());\n        configuration.setClusterPassword(CLUSTER_PASSWORD.resolveModelAttribute(context, model).asString());\n        configuration.setClusterUser(CLUSTER_USER.resolveModelAttribute(context, model).asString());\n        configuration.setConnectionTTLOverride(CONNECTION_TTL_OVERRIDE.resolveModelAttribute(context, model).asInt());\n        configuration.setCreateBindingsDir(CREATE_BINDINGS_DIR.resolveModelAttribute(context, model).asBoolean());\n        configuration.setCreateJournalDir(CREATE_JOURNAL_DIR.resolveModelAttribute(context, model).asBoolean());\n        configuration.setFailbackDelay(FAILBACK_DELAY.resolveModelAttribute(context, model).asLong());\n        configuration.setFailoverOnServerShutdown(FAILOVER_ON_SHUTDOWN.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setIDCacheSize(ID_CACHE_SIZE.resolveModelAttribute(context, model).asInt());\n        // TODO do we want to allow the jmx configuration ?\n        configuration.setJMXDomain(JMX_DOMAIN.resolveModelAttribute(context, model).asString());\n        configuration.setJMXManagementEnabled(JMX_MANAGEMENT_ENABLED.resolveModelAttribute(context, model).asBoolean());\n        // Journal\n        final JournalType journalType = JournalType.valueOf(JOURNAL_TYPE.resolveModelAttribute(context, model).asString());\n        configuration.setJournalType(journalType);\n\n        // AIO Journal\n        configuration.setJournalBufferSize_AIO(JOURNAL_BUFFER_SIZE.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.getDefaultJournalBufferSizeAio()));\n        configuration.setJournalBufferTimeout_AIO(JOURNAL_BUFFER_TIMEOUT.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.getDefaultJournalBufferTimeoutAio()));\n        configuration.setJournalMaxIO_AIO(JOURNAL_MAX_IO.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.getDefaultJournalMaxIoAio()));\n        // NIO Journal\n        configuration.setJournalBufferSize_NIO(JOURNAL_BUFFER_SIZE.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.getDefaultJournalBufferSizeNio()));\n        configuration.setJournalBufferTimeout_NIO(JOURNAL_BUFFER_TIMEOUT.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.getDefaultJournalBufferTimeoutNio()));\n        configuration.setJournalMaxIO_NIO(JOURNAL_MAX_IO.resolveModelAttribute(context, model).asInt(HornetQDefaultConfiguration.getDefaultJournalMaxIoNio()));\n        //\n        configuration.setJournalCompactMinFiles(JOURNAL_COMPACT_MIN_FILES.resolveModelAttribute(context, model).asInt());\n        configuration.setJournalCompactPercentage(JOURNAL_COMPACT_PERCENTAGE.resolveModelAttribute(context, model).asInt());\n        configuration.setJournalFileSize(JOURNAL_FILE_SIZE.resolveModelAttribute(context, model).asInt());\n        configuration.setJournalMinFiles(JOURNAL_MIN_FILES.resolveModelAttribute(context, model).asInt());\n        configuration.setJournalSyncNonTransactional(JOURNAL_SYNC_NON_TRANSACTIONAL.resolveModelAttribute(context, model).asBoolean());\n        configuration.setJournalSyncTransactional(JOURNAL_SYNC_TRANSACTIONAL.resolveModelAttribute(context, model).asBoolean());\n        configuration.setLogJournalWriteRate(LOG_JOURNAL_WRITE_RATE.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setManagementAddress(SimpleString.toSimpleString(MANAGEMENT_ADDRESS.resolveModelAttribute(context, model).asString()));\n        configuration.setManagementNotificationAddress(SimpleString.toSimpleString(MANAGEMENT_NOTIFICATION_ADDRESS.resolveModelAttribute(context, model).asString()));\n\n        configuration.setMemoryMeasureInterval(MEMORY_MEASURE_INTERVAL.resolveModelAttribute(context, model).asLong());\n        configuration.setMemoryWarningThreshold(MEMORY_WARNING_THRESHOLD.resolveModelAttribute(context, model).asInt());\n\n        configuration.setMessageCounterEnabled(MESSAGE_COUNTER_ENABLED.resolveModelAttribute(context, model).asBoolean());\n        configuration.setMessageCounterSamplePeriod(MESSAGE_COUNTER_SAMPLE_PERIOD.resolveModelAttribute(context, model).asInt());\n        configuration.setMessageCounterMaxDayHistory(MESSAGE_COUNTER_MAX_DAY_HISTORY.resolveModelAttribute(context, model).asInt());\n        configuration.setMessageExpiryScanPeriod(MESSAGE_EXPIRY_SCAN_PERIOD.resolveModelAttribute(context, model).asLong());\n        configuration.setMessageExpiryThreadPriority(MESSAGE_EXPIRY_THREAD_PRIORITY.resolveModelAttribute(context, model).asInt());\n\n        configuration.setJournalPerfBlastPages(PERF_BLAST_PAGES.resolveModelAttribute(context, model).asInt());\n        configuration.setPersistDeliveryCountBeforeDelivery(PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setPageMaxConcurrentIO(PAGE_MAX_CONCURRENT_IO.resolveModelAttribute(context, model).asInt());\n\n        configuration.setPersistenceEnabled(PERSISTENCE_ENABLED.resolveModelAttribute(context, model).asBoolean());\n        configuration.setPersistIDCache(PERSIST_ID_CACHE.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setRunSyncSpeedTest(RUN_SYNC_SPEED_TEST.resolveModelAttribute(context, model).asBoolean());\n\n        configuration.setScheduledThreadPoolMaxSize(SCHEDULED_THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt());\n        configuration.setSecurityEnabled(SECURITY_ENABLED.resolveModelAttribute(context, model).asBoolean());\n        configuration.setSecurityInvalidationInterval(SECURITY_INVALIDATION_INTERVAL.resolveModelAttribute(context, model).asLong());\n        configuration.setServerDumpInterval(SERVER_DUMP_INTERVAL.resolveModelAttribute(context, model).asLong());\n        configuration.setSharedStore(SHARED_STORE.resolveModelAttribute(context, model).asBoolean());\n        configuration.setThreadPoolMaxSize(THREAD_POOL_MAX_SIZE.resolveModelAttribute(context, model).asInt());\n        configuration.setTransactionTimeout(TRANSACTION_TIMEOUT.resolveModelAttribute(context, model).asLong());\n        configuration.setTransactionTimeoutScanPeriod(TRANSACTION_TIMEOUT_SCAN_PERIOD.resolveModelAttribute(context, model).asLong());\n        configuration.setWildcardRoutingEnabled(WILD_CARD_ROUTING_ENABLED.resolveModelAttribute(context, model).asBoolean());\n\n        processAddressSettings(context, configuration, model);\n        processSecuritySettings(context, configuration, model);\n        //process deprecated interceptors\n        processRemotingInterceptors(context, configuration, model);\n        //process new interceptors\n        processRemotingIncomingInterceptors(context, configuration, model);\n        processRemotingOutgoingInterceptors(context, configuration, model);\n\n        // Add in items from child resources\n        GroupingHandlerAdd.addGroupingHandlerConfig(context,configuration, model);\n        DiscoveryGroupAdd.addDiscoveryGroupConfigs(context, configuration, model);\n        DivertAdd.addDivertConfigs(context, configuration, model);\n        QueueAdd.addQueueConfigs(context, configuration, model);\n        BridgeAdd.addBridgeConfigs(context, configuration, model);\n        ClusterConnectionAdd.addClusterConnectionConfigs(context, configuration, model);\n        ConnectorServiceAdd.addConnectorServiceConfigs(context, configuration, model);\n\n        return configuration;\n    }","commit_id":"dc09e4b95c4f48cf68c8742b07df9076167ab630","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void fillComponents(UIContainer tofill, ViewParameters viewParams, ComponentChecker checker) {\n\n\t    // to do assignment/quiz, etc arguments are\n\t    //   sendingpage, itemid - reflect the item that the user clicked\n\t    //   source - URL to call\n\t    //   clearattr may be used for Samigo hack\n\t    //   return is to sendingpage, with path coming from current path retrieved from SimplePageBean\n\t    // to create a new assignment, quiz, etc\n\t    //   path non-null is what triggers this\n\t    //   sendingpage, itemid - these are arguments that we'll use to return to the \"add assignment\" page\n\t    //   source - URL to call\n\t    //   clearattr may be used for Samigo hack\n\t    //   returnview - viewID to return to\n\t    //   title - the string for the return button\n\n\t    // as far as I can see there are no permissions issues here. It just\n\t    // sticks things in an iframe. The stuff it sticks had better check though\n\n\t    GeneralViewParameters params = (GeneralViewParameters)viewParams;\n\n\t    UIOutput.make(tofill, \"html\").decorate(new UIFreeAttributeDecorator(\"lang\", localeGetter.get().getLanguage()))\n\t\t.decorate(new UIFreeAttributeDecorator(\"xml:lang\", localeGetter.get().getLanguage()));        \n\n\t    if (!simplePageBean.canReadPage()) {\n\t\tUIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.not_available\"));\n\t\treturn;\n\t    }\n\n\t    long sendingPage = params.getSendingPage();\n\n\t    // the following code should check whether it's an assessment. Currently I don't\n\t    // bother as I haven't put links in the other tools\n\t    Session session = SessionManager.getCurrentSession();\n\t    ToolSession toolSession = SessionManager.getCurrentToolSession();\n\t    ToolConfiguration toolConfiguration = SiteService.findTool(toolSession.getPlacementId());\n\t    SitePage sitePage = toolConfiguration.getContainingPage();\n\t    String clearAttr = params.getClearAttr();\n\t    if (clearAttr != null && !clearAttr.equals(\"\")) {\n\t\t// don't let users clear random attributes\n\t\tif (clearAttr.startsWith(\"LESSONBUILDER_RETURNURL\")) {\n\t\t    String toolUrl = ServerConfigurationService.getPortalUrl() + \"/site/\" + sitePage.getSiteId() + \"/page/\" + sitePage.getId() + \"?clearAttr=\" + clearAttr;\n\t\t    session.setAttribute(clearAttr, toolUrl);\n\t\t}\n\t    }\n\n\n\t    String pathOp = params.getPath();\n\t    // only pop is valid; we don't have the data for the other options\n\t    if (pathOp != null && !pathOp.equals(\"\"))\n\t\tsimplePageBean.adjustPath(pathOp, params.getSendingPage(), null, null);\n\n\t    List<SimplePageBean.PathEntry> breadcrumbs = simplePageBean.getHierarchy();\n\t    SimplePageItem item = simplePageBean.findItem (params.getItemId());\n\n\t    // precompute tests we'll need more than once\n\t    int type = 0;\n\t    boolean available = false;\n\t    if (item != null) {\n\t\ttype = item.getType();\n\t\tavailable = simplePageBean.isItemVisible(item) && simplePageBean.isItemAvailable(item, item.getPageId());\n\t    }\n\t    \n\t    // update permissions in tools if appropriate.\n\t    if (available) {\n\t\tif (type == SimplePageItem.RESOURCE || type == SimplePageItem.BLTI)\n\t\t    simplePageBean.track(params.getItemId(), null);\n\t\telse if (item.isPrerequisite() && (type == SimplePageItem.PAGE || type == SimplePageItem.ASSIGNMENT || type == SimplePageItem.ASSESSMENT || type == SimplePageItem.FORUM))\n\t\t    simplePageBean.checkItemPermissions(item, true); // set acl, etc\t\t\n\n\t    }\n\n\t    // this is a \"next\" page where we couldn't tell if the item is\n\t    // available. Need to check here in order to set ACLs. If not available,\n\t    // return to calling page\n\t    if (item != null && \"true\".equals(params.getRecheck())) {\n\t        if (!available) {\n\t\t    SimplePageBean.PathEntry containingPage = null;\n\t\t    if (breadcrumbs.size() > 0)  // shouldn't ever fail\n\t\t\tcontainingPage = breadcrumbs.get(breadcrumbs.size()-1);  // page we're on\n\t\t    if (containingPage != null) {  // shouldn't fail\n\t\t\tGeneralViewParameters view = new GeneralViewParameters(ShowPageProducer.VIEW_ID);\n\t\t\tview.setSendingPage(containingPage.pageId);\n\t\t\tview.setItemId(containingPage.pageItemId);\n\t\t\tview.setPath(\"next\");\n\t\t\tUIInternalLink.make(tofill, \"redirect-link\", containingPage.title, view);\n\t\t\tUIOutput.make(tofill, \"redirect\");\n\t\t    }\n\t\t    return;\n\t\t}\n\t    } else if (item != null && item.getType() == SimplePageItem.RESOURCE) {\n\t\t// other item types we depend upon the underlying tool, except\n\t\t// resources we have to do ourselves\n\t\t// NOTE: consider doing this for BLTI also\n\t\tif (!available) {\n\t\t    UIOutput.make(tofill, \"hiddenAlert\");\n\t\t    UIOutput.make(tofill, \"hidden-text\", messageLocator.getMessage(\"simplepage.complete_required\"));\n\t\t    return;\n\t\t}\n\t    }\n\n\t    String helpurl = (String)toolSession.getAttribute(\"sakai-portal:help-action\");\n\t    String reseturl = (String)toolSession.getAttribute(\"sakai-portal:reset-action\");\n\t    String skinName = null;\n\t    String skinRepo = null;\n\t    String iconBase = null;\n\n\t    Placement placement = ToolManager.getCurrentPlacement();\n\t    String toolId = placement.getToolId();\n\t    boolean inline = false;\n\n\t    if (httpServletRequest.getRequestURI().startsWith(\"/portal/site/\")) {\n\t\tinline = true;\n\t\tif (reseturl == null)\n\t\t    reseturl = \"/portal/site/\" + simplePageBean.getCurrentSiteId() + \"/tool-reset/\" + ((ToolConfiguration)placement).getPageId() + \"?panel=Main\";\n\t\tif (helpurl == null)\n\t\t    helpurl = \"/portal/help/main?help=\" + toolId;\n\t    } else if (httpServletRequest.getRequestURI().startsWith(\"/portal/pda/\")) {\n\t\treseturl = null;\n\t\thelpurl = null;\n\t    }\n\n\t    if (helpurl != null || reseturl != null) {\n\n\t\tskinRepo = ServerConfigurationService.getString(\"skin.repo\", \"/library/skin\");\n\t\ticonBase = skinRepo + \"/\" + CSSUtils.adjustCssSkinFolder(null) + \"/images\";\n\t\tUIVerbatim.make(tofill, \"iconstyle\", ICONSTYLE.replace(\"{}\", iconBase));\n\n\t    }\n\n\t    if (helpurl != null) {\n\t\tUILink.make(tofill, \"helpbutton2\", helpurl).\n\t\t    decorate(new UIFreeAttributeDecorator(\"onclick\",\n\t\t\t\t\t  \"openWindow('\" + helpurl + \"', 'Help', 'resizeable=yes,toolbar=no,scrollbars=yes,menubar=yes,width=800,height=600'); return false\")).\n\t\t    decorate(new UIFreeAttributeDecorator(\"title\",\n\t\t\t\t messageLocator.getMessage(\"simplepage.help-button\")));\n\t\tif (!inline)\n\t\tUIOutput.make(tofill, \"helpimage2\").\n\t\t    decorate(new UIFreeAttributeDecorator(\"alt\",\n\t\t\t\t messageLocator.getMessage(\"simplepage.help-button\")));\n\t\tUIOutput.make(tofill, \"helpnewwindow2\",\n\t\t    messageLocator.getMessage(\"simplepage.opens-in-new\"));\n\n\t\tUILink.make(tofill, \"directurl\").\n\t\t    decorate(new UIFreeAttributeDecorator(\"rel\", \"#Main\" + Web.escapeJavascript(placement.getId()) + \"_directurl\")).\n\t\t    decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.direct-link\")));\n\t\tif (inline) {\n\t\t    UIOutput.make(tofill, \"directurl-div\").\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"id\", \"Main\" + Web.escapeJavascript(placement.getId()) + \"_directurl\"));\n\t\t    UIOutput.make(tofill, \"directurl-input\").\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"onclick\", \"toggleShortUrlOutput('\" + myUrl() + \"/portal/directtool/\" + placement.getId() + \"/', this, 'Main\" + Web.escapeJavascript(placement.getId()) + \"_urlholder');\"));\n\t\t    UIOutput.make(tofill, \"directurl-textarea\", myUrl() + \"/portal/directtool/\" + placement.getId() + \"/\").\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"class\", \"portlet title-tools Main\" + Web.escapeJavascript(placement.getId()) + \"_urlholder\"));\n\t\t} else\n\t\t    UIOutput.make(tofill, \"directimage\").decorate(new UIFreeAttributeDecorator(\"alt\",\n\t\t\tmessageLocator.getMessage(\"simplepage.direct-link\")));\n\n\t    }\n\t    \n\t    if (reseturl != null) {\n\t\tUIComponent link = UILink.make(tofill, \"resetbutton2\", reseturl).\n\t\t    decorate(new UIFreeAttributeDecorator(\"title\",\n\t\t\t        messageLocator.getMessage(\"simplepage.reset-button\")));\n\t\tif (!inline)\n\t\t    link.decorate(new UIFreeAttributeDecorator(\"onclick\",\n\t\t\t\t\t\t\t       \"location.href='\" + reseturl + \"'; return false\"));\n\n\t\tif (!inline)\n\t\tUIOutput.make(tofill, \"resetimage2\").\n\t\t    decorate(new UIFreeAttributeDecorator(\"alt\",\n\t\t\t        messageLocator.getMessage(\"simplepage.reset-button\")));\n\t    }\n\n\t    if (item != null)\n\t\tsimplePageBean.adjustBackPath(params.getBackPath(), params.getSendingPage(), item.getId(), item.getName());\n\n\t    String returnView = params.getReturnView();\n\n\t    // return to lesson doesn't make sense for resources, since they aren't separate applications in\n\t    // the same sense. But we do want breadcrumbs.\n\t    if (sendingPage != -1 && breadcrumbs != null && breadcrumbs.size() > 0) {\n\t\tSimplePageBean.PathEntry entry = breadcrumbs.get(breadcrumbs.size()-1);\n\n\n\t\tif (item != null && item.getType() == SimplePageItem.RESOURCE) {\n\t\t    int index = 0;\n\t\t    for (SimplePageBean.PathEntry e : breadcrumbs) {\n\t\t\t// don't show current page. We already have a title. This was too much\n\t\t\tUIBranchContainer crumb = UIBranchContainer.make(tofill, \"crumb:\");\n\t\t\tGeneralViewParameters view = new GeneralViewParameters(ShowPageProducer.VIEW_ID);\n\t\t\tview.setSendingPage(e.pageId);\n\t\t\tview.setItemId(e.pageItemId);\n\t\t\tview.setPath(Integer.toString(index));\n\t\t\tUIInternalLink.make(crumb, \"crumb-link\", e.title, view);\n\t\t\tUIOutput.make(crumb, \"crumb-follow\", \" > \");\n\t\t\tif (index == breadcrumbs.size() - 1) {\n\t\t\t    UIBranchContainer finalcrumb = UIBranchContainer.make(tofill, \"crumb:\");\n\n\t\t\t    UIOutput.make(finalcrumb, \"crumb-follow\", item.getName()).decorate(new UIStyleDecorator(\"bold\"));\n\t\t\t}\n\t\t\tindex++;\n\t\t    }\n\t\t} else {\n\n\t\t    if (returnView == null || returnView.equals(\"\")) {\n\t\t\tGeneralViewParameters view = new GeneralViewParameters(ShowPageProducer.VIEW_ID);\n\t\t\tview.setSendingPage(entry.pageId);\n\t\t\tview.setItemId(entry.pageItemId);\n\t\t\t// path defaults to null, which is next\n\t\t\tUIInternalLink.make(tofill, \"return\", messageLocator.getMessage(\"simplepage.return\"), view);\n\t\t\tUIOutput.make(tofill, \"returnwarning\", messageLocator.getMessage(\"simplepage.return.warning\"));\n\t\t    } else {\n\t\t\tGeneralViewParameters view = new GeneralViewParameters(returnView);\n\t\t\tview.setSendingPage(sendingPage);;\n\t\t\tview.setItemId(((GeneralViewParameters) params).getItemId());\n\t\t\tUIInternalLink.make(tofill, \"return\", ((GeneralViewParameters) params).getTitle() , view);\n\t\t\tUIOutput.make(tofill, \"returnwarning\", messageLocator.getMessage(\"simplepage.return.warning\"));\n\t\t    }\n\t\t}\n\t    }\n\n\t    // see if we can add a next button\n\t    if (item != null && (returnView == null || returnView.equals(\"\"))) {\n\t\tsimplePageBean.addPrevLink(tofill, item);\n\t\tsimplePageBean.addNextLink(tofill, item);\n\t    }\n\n\t    UIComponent iframe = UILink.make(tofill, \"iframe1\", params.getSource());\n\t    if (item != null && item.getType() == SimplePageItem.BLTI) {\n\t\tString height = item.getHeight();\n\t\tif (height == null || height.equals(\"\"))\n\t\t    iframe.decorate(new UIFreeAttributeDecorator(\"height\", \"1200\"));\n\t\telse\n\t\t    iframe.decorate(new UIFreeAttributeDecorator(\"height\", height));\n\t\tiframe.decorate(new UIFreeAttributeDecorator(\"onload\", \"\"));\n\t    }\n\t}","id":96053,"modified_method":"public void fillComponents(UIContainer tofill, ViewParameters viewParams, ComponentChecker checker) {\n\n\t    // to do assignment/quiz, etc arguments are\n\t    //   sendingpage, itemid - reflect the item that the user clicked\n\t    //   source - URL to call\n\t    //   clearattr may be used for Samigo hack\n\t    //   return is to sendingpage, with path coming from current path retrieved from SimplePageBean\n\t    // to create a new assignment, quiz, etc\n\t    //   path non-null is what triggers this\n\t    //   sendingpage, itemid - these are arguments that we'll use to return to the \"add assignment\" page\n\t    //   source - URL to call\n\t    //   clearattr may be used for Samigo hack\n\t    //   returnview - viewID to return to\n\t    //   title - the string for the return button\n\n\t    // as far as I can see there are no permissions issues here. It just\n\t    // sticks things in an iframe. The stuff it sticks had better check though\n\n\t    GeneralViewParameters params = (GeneralViewParameters)viewParams;\n\n\t    UIOutput.make(tofill, \"html\").decorate(new UIFreeAttributeDecorator(\"lang\", localeGetter.get().getLanguage()))\n\t\t.decorate(new UIFreeAttributeDecorator(\"xml:lang\", localeGetter.get().getLanguage()));        \n\n\t    if (!simplePageBean.canReadPage()) {\n\t\tUIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.not_available\"));\n\t\treturn;\n\t    }\n\n\t    long sendingPage = params.getSendingPage();\n\n\t    // the following code should check whether it's an assessment. Currently I don't\n\t    // bother as I haven't put links in the other tools\n\t    Session session = SessionManager.getCurrentSession();\n\t    ToolSession toolSession = SessionManager.getCurrentToolSession();\n\t    ToolConfiguration toolConfiguration = SiteService.findTool(toolSession.getPlacementId());\n\t    SitePage sitePage = toolConfiguration.getContainingPage();\n\t    String clearAttr = params.getClearAttr();\n\t    if (clearAttr != null && !clearAttr.equals(\"\")) {\n\t\t// don't let users clear random attributes\n\t\tif (clearAttr.startsWith(\"LESSONBUILDER_RETURNURL\")) {\n\t\t    String toolUrl = ServerConfigurationService.getPortalUrl() + \"/site/\" + sitePage.getSiteId() + \"/page/\" + sitePage.getId() + \"?clearAttr=\" + clearAttr;\n\t\t    session.setAttribute(clearAttr, toolUrl);\n\t\t}\n\t    }\n\n\n\t    String pathOp = params.getPath();\n\t    // only pop is valid; we don't have the data for the other options\n\t    if (pathOp != null && !pathOp.equals(\"\"))\n\t\tsimplePageBean.adjustPath(pathOp, params.getSendingPage(), null, null);\n\n\t    List<SimplePageBean.PathEntry> breadcrumbs = simplePageBean.getHierarchy();\n\t    SimplePageItem item = simplePageBean.findItem (params.getItemId());\n\n\t    // precompute tests we'll need more than once\n\t    int type = 0;\n\t    boolean available = false;\n\t    if (item != null) {\n\t\ttype = item.getType();\n\t\tavailable = simplePageBean.isItemVisible(item) && simplePageBean.isItemAvailable(item, item.getPageId());\n\t    }\n\t    \n\t    // update permissions in tools if appropriate.\n\t    if (available) {\n\t\tif (type == SimplePageItem.RESOURCE || type == SimplePageItem.BLTI)\n\t\t    simplePageBean.track(params.getItemId(), null);\n\t\telse if (item.isPrerequisite() && (type == SimplePageItem.PAGE || type == SimplePageItem.ASSIGNMENT || type == SimplePageItem.ASSESSMENT || type == SimplePageItem.FORUM))\n\t\t    simplePageBean.checkItemPermissions(item, true); // set acl, etc\t\t\n\n\t    }\n\n\t    // this is a \"next\" page where we couldn't tell if the item is\n\t    // available. Need to check here in order to set ACLs. If not available,\n\t    // return to calling page\n\t    if (item != null && \"true\".equals(params.getRecheck())) {\n\t        if (!available) {\n\t\t    SimplePageBean.PathEntry containingPage = null;\n\t\t    if (breadcrumbs.size() > 0)  // shouldn't ever fail\n\t\t\tcontainingPage = breadcrumbs.get(breadcrumbs.size()-1);  // page we're on\n\t\t    if (containingPage != null) {  // shouldn't fail\n\t\t\tGeneralViewParameters view = new GeneralViewParameters(ShowPageProducer.VIEW_ID);\n\t\t\tview.setSendingPage(containingPage.pageId);\n\t\t\tview.setItemId(containingPage.pageItemId);\n\t\t\tview.setPath(\"next\");\n\t\t\tUIInternalLink.make(tofill, \"redirect-link\", containingPage.title, view);\n\t\t\tUIOutput.make(tofill, \"redirect\");\n\t\t    }\n\t\t    return;\n\t\t}\n\t    } else if (item != null && item.getType() == SimplePageItem.RESOURCE) {\n\t\t// other item types we depend upon the underlying tool, except\n\t\t// resources we have to do ourselves\n\t\t// NOTE: consider doing this for BLTI also\n\t\tif (!available) {\n\t\t    UIOutput.make(tofill, \"hiddenAlert\");\n\t\t    UIOutput.make(tofill, \"hidden-text\", messageLocator.getMessage(\"simplepage.complete_required\"));\n\t\t    return;\n\t\t}\n\t    }\n\n\t    String helpurl = (String)toolSession.getAttribute(\"sakai-portal:help-action\");\n\t    String reseturl = (String)toolSession.getAttribute(\"sakai-portal:reset-action\");\n\t    String skinName = null;\n\t    String skinRepo = null;\n\t    String iconBase = null;\n\n\t    Placement placement = ToolManager.getCurrentPlacement();\n\t    String toolId = placement.getToolId();\n\t    boolean inline = false;\n\t    String portalTemplates = ServerConfigurationService.getString(\"portal.templates\", \"\");\n\n\t    if (httpServletRequest.getRequestURI().startsWith(\"/portal/site/\")) {\n\t\tif (\"morpheus\".equals(portalTemplates))\n\t\t    inline = true;\n\t\tif (reseturl == null)\n\t\t    reseturl = \"/portal/site/\" + simplePageBean.getCurrentSiteId() + \"/tool-reset/\" + ((ToolConfiguration)placement).getPageId() + \"?panel=Main\";\n\t\tif (helpurl == null)\n\t\t    helpurl = \"/portal/help/main?help=\" + toolId;\n\t    } else if (httpServletRequest.getRequestURI().startsWith(\"/portal/pda/\")) {\n\t\treseturl = null;\n\t\thelpurl = null;\n\t    }\n\n\t    if (helpurl != null || reseturl != null) {\n\n\t\tskinRepo = ServerConfigurationService.getString(\"skin.repo\", \"/library/skin\");\n\t\ticonBase = skinRepo + \"/\" + CSSUtils.adjustCssSkinFolder(null) + \"/images\";\n\t\tUIVerbatim.make(tofill, \"iconstyle\", ICONSTYLE.replace(\"{}\", iconBase));\n\n\t    }\n\n\t    if (helpurl != null) {\n\t\tUILink.make(tofill, \"helpbutton2\", helpurl).\n\t\t    decorate(new UIFreeAttributeDecorator(\"onclick\",\n\t\t\t\t\t  \"openWindow('\" + helpurl + \"', 'Help', 'resizeable=yes,toolbar=no,scrollbars=yes,menubar=yes,width=800,height=600'); return false\")).\n\t\t    decorate(new UIFreeAttributeDecorator(\"title\",\n\t\t\t\t messageLocator.getMessage(\"simplepage.help-button\")));\n\t\tif (!inline)\n\t\tUIOutput.make(tofill, \"helpimage2\").\n\t\t    decorate(new UIFreeAttributeDecorator(\"alt\",\n\t\t\t\t messageLocator.getMessage(\"simplepage.help-button\")));\n\t\tUIOutput.make(tofill, \"helpnewwindow2\",\n\t\t    messageLocator.getMessage(\"simplepage.opens-in-new\"));\n\n\t\tUILink.make(tofill, \"directurl\").\n\t\t    decorate(new UIFreeAttributeDecorator(\"rel\", \"#Main\" + Web.escapeJavascript(placement.getId()) + \"_directurl\")).\n\t\t    decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.direct-link\")));\n\t\t//\t\tif (inline) {\n\t\t    UIOutput.make(tofill, \"directurl-div\").\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"id\", \"Main\" + Web.escapeJavascript(placement.getId()) + \"_directurl\"));\n\t\t    UIOutput.make(tofill, \"directurl-input\").\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"onclick\", \"toggleShortUrlOutput('\" + myUrl() + \"/portal/directtool/\" + placement.getId() + \"/', this, 'Main\" + Web.escapeJavascript(placement.getId()) + \"_urlholder');\"));\n\t\t    UIOutput.make(tofill, \"directurl-textarea\", myUrl() + \"/portal/directtool/\" + placement.getId() + \"/\").\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"class\", \"portlet title-tools Main\" + Web.escapeJavascript(placement.getId()) + \"_urlholder\"));\n\t\t    //\t\t} else\n\t\t    UIOutput.make(tofill, \"directimage\").decorate(new UIFreeAttributeDecorator(\"alt\",\n\t\t\tmessageLocator.getMessage(\"simplepage.direct-link\")));\n\n\t    }\n\t    \n\t    if (reseturl != null) {\n\t\tUIComponent link = UILink.make(tofill, \"resetbutton2\", reseturl).\n\t\t    decorate(new UIFreeAttributeDecorator(\"title\",\n\t\t\t        messageLocator.getMessage(\"simplepage.reset-button\")));\n\t\tif (!inline)\n\t\t    link.decorate(new UIFreeAttributeDecorator(\"onclick\",\n\t\t\t\t\t\t\t       \"location.href='\" + reseturl + \"'; return false\"));\n\n\t\tif (!inline)\n\t\tUIOutput.make(tofill, \"resetimage2\").\n\t\t    decorate(new UIFreeAttributeDecorator(\"alt\",\n\t\t\t        messageLocator.getMessage(\"simplepage.reset-button\")));\n\t    }\n\n\t    if (item != null)\n\t\tsimplePageBean.adjustBackPath(params.getBackPath(), params.getSendingPage(), item.getId(), item.getName());\n\n\t    String returnView = params.getReturnView();\n\n\t    // return to lesson doesn't make sense for resources, since they aren't separate applications in\n\t    // the same sense. But we do want breadcrumbs.\n\t    if (sendingPage != -1 && breadcrumbs != null && breadcrumbs.size() > 0) {\n\t\tSimplePageBean.PathEntry entry = breadcrumbs.get(breadcrumbs.size()-1);\n\n\n\t\tif (item != null && item.getType() == SimplePageItem.RESOURCE) {\n\t\t    int index = 0;\n\t\t    for (SimplePageBean.PathEntry e : breadcrumbs) {\n\t\t\t// don't show current page. We already have a title. This was too much\n\t\t\tUIBranchContainer crumb = UIBranchContainer.make(tofill, \"crumb:\");\n\t\t\tGeneralViewParameters view = new GeneralViewParameters(ShowPageProducer.VIEW_ID);\n\t\t\tview.setSendingPage(e.pageId);\n\t\t\tview.setItemId(e.pageItemId);\n\t\t\tview.setPath(Integer.toString(index));\n\t\t\tUIInternalLink.make(crumb, \"crumb-link\", e.title, view);\n\t\t\tUIOutput.make(crumb, \"crumb-follow\", \" > \");\n\t\t\tif (index == breadcrumbs.size() - 1) {\n\t\t\t    UIBranchContainer finalcrumb = UIBranchContainer.make(tofill, \"crumb:\");\n\n\t\t\t    UIOutput.make(finalcrumb, \"crumb-follow\", item.getName()).decorate(new UIStyleDecorator(\"bold\"));\n\t\t\t}\n\t\t\tindex++;\n\t\t    }\n\t\t} else {\n\n\t\t    if (returnView == null || returnView.equals(\"\")) {\n\t\t\tGeneralViewParameters view = new GeneralViewParameters(ShowPageProducer.VIEW_ID);\n\t\t\tview.setSendingPage(entry.pageId);\n\t\t\tview.setItemId(entry.pageItemId);\n\t\t\t// path defaults to null, which is next\n\t\t\tUIInternalLink.make(tofill, \"return\", messageLocator.getMessage(\"simplepage.return\"), view);\n\t\t\tUIOutput.make(tofill, \"returnwarning\", messageLocator.getMessage(\"simplepage.return.warning\"));\n\t\t    } else {\n\t\t\tGeneralViewParameters view = new GeneralViewParameters(returnView);\n\t\t\tview.setSendingPage(sendingPage);;\n\t\t\tview.setItemId(((GeneralViewParameters) params).getItemId());\n\t\t\tUIInternalLink.make(tofill, \"return\", ((GeneralViewParameters) params).getTitle() , view);\n\t\t\tUIOutput.make(tofill, \"returnwarning\", messageLocator.getMessage(\"simplepage.return.warning\"));\n\t\t    }\n\t\t}\n\t    }\n\n\t    // see if we can add a next button\n\t    if (item != null && (returnView == null || returnView.equals(\"\"))) {\n\t\tsimplePageBean.addPrevLink(tofill, item);\n\t\tsimplePageBean.addNextLink(tofill, item);\n\t    }\n\n\t    UIComponent iframe = UILink.make(tofill, \"iframe1\", params.getSource());\n\t    if (item != null && item.getType() == SimplePageItem.BLTI) {\n\t\tString height = item.getHeight();\n\t\tif (height == null || height.equals(\"\"))\n\t\t    iframe.decorate(new UIFreeAttributeDecorator(\"height\", \"1200\"));\n\t\telse\n\t\t    iframe.decorate(new UIFreeAttributeDecorator(\"height\", height));\n\t\tiframe.decorate(new UIFreeAttributeDecorator(\"onload\", \"\"));\n\t    }\n\t}","commit_id":"76615aa64af25fafd889a30c38755f09a1175edc","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public void fillComponents(UIContainer tofill, ViewParameters viewParams, ComponentChecker checker) {\n\t\tGeneralViewParameters params = (GeneralViewParameters) viewParams;\n\n                UIOutput.make(tofill, \"html\").decorate(new UIFreeAttributeDecorator(\"lang\", localegetter.get().getLanguage()))\n\t\t    .decorate(new UIFreeAttributeDecorator(\"xml:lang\", localegetter.get().getLanguage()));        \n\n\t\tUIOutput.make(tofill, \"datepicker\").decorate(new UIFreeAttributeDecorator(\"src\", \n\t\t  (majorVersion >= 10 ? \"/library\" : \"/lessonbuilder-tool\") + \"/js/lang-datepicker/lang-datepicker.js\"));\n\n\t\tboolean iframeJavascriptDone = false;\n\t\t\n\t\t// security model:\n\t\t// canEditPage and canReadPage are normal Sakai privileges. They apply\n\n\t\t// to all\n\t\t// pages in the site.\n\t\t// However when presented with a page, we need to make sure it's\n\t\t// actually in\n\t\t// this site, or users could get to pages in other sites. That's done\n\t\t// by updatePageObject. The model is that producers always work on the\n\t\t// current page, and updatePageObject makes sure that is in the current\n\t\t// site.\n\t\t// At that point we can safely use canEditPage.\n\n\t\t// somewhat misleading. sendingPage specifies the page we're supposed to\n\t\t// go to.  If path is \"none\", we don't want this page to be what we see\n\t\t// when we come back to the tool\n\t\tif (params.getSendingPage() != -1) {\n\t\t\t// will fail if page not in this site\n\t\t\t// security then depends upon making sure that we only deal with\n\t\t\t// this page\n\t\t\ttry {\n\t\t\t\tsimplePageBean.updatePageObject(params.getSendingPage(), !params.getPath().equals(\"none\"));\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.warn(\"ShowPage permission exception \" + e);\n\t\t\t\tUIOutput.make(tofill, \"error-div\");\n\t\t\t\tUIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.not_available\"));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tboolean canEditPage = simplePageBean.canEditPage();\n\t\tboolean canReadPage = simplePageBean.canReadPage();\n\t\tboolean canSeeAll = simplePageBean.canSeeAll();  // always on if caneditpage\n\t\t\n\t\tboolean cameFromGradingPane = params.getPath().equals(\"none\");\n\n\t\tif (!canReadPage) {\n\t\t\t// this code is intended for the situation where site permissions\n\t\t\t// haven't been set up.\n\t\t\t// So if the user can't read the page (which is pretty abnormal),\n\t\t\t// see if they have site.upd.\n\t\t\t// if so, give them some explanation and offer to call the\n\t\t\t// permissions helper\n\t\t\tString ref = \"/site/\" + simplePageBean.getCurrentSiteId();\n\t\t\tif (simplePageBean.canEditSite()) {\n\t\t\t\tSimplePage currentPage = simplePageBean.getCurrentPage();\n\t\t\t\tUIOutput.make(tofill, \"needPermissions\");\n\n\t\t\t\tGeneralViewParameters permParams = new GeneralViewParameters();\n\t\t\t\tpermParams.setSendingPage(-1L);\n\t\t\t\tcreateStandardToolBarLink(PermissionsHelperProducer.VIEW_ID, tofill, \"callpermissions\", \"simplepage.permissions\", permParams, \"simplepage.permissions.tooltip\");\n\n\t\t\t}\n\n\t\t\t// in any case, tell them they can't read the page\n\t\t\tUIOutput.make(tofill, \"error-div\");\n\t\t\tUIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.nopermissions\"));\n\t\t\treturn;\n\t\t}\n\n\t\tif (params.addTool == GeneralViewParameters.COMMENTS) {\n\t\t\tsimplePageBean.addCommentsSection();\n\t\t}else if(params.addTool == GeneralViewParameters.STUDENT_CONTENT) {\n\t\t\tsimplePageBean.addStudentContentSection();\n\t\t}else if(params.addTool == GeneralViewParameters.STUDENT_PAGE) {\n\t\t    simplePageBean.createStudentPage(params.studentItemId);\n\t\t\tcanEditPage = simplePageBean.canEditPage();\n\t\t}\n\n\t\t// Find the MSIE version, if we're running it.\n\t\tint ieVersion = checkIEVersion();\n\t\t// as far as I can tell, none of these supports fck or ck\n\t\t// we can make it configurable if necessary, or use WURFL\n\t\t// however this test is consistent with CKeditor's check.\n\t\t// that desireable, since if CKeditor is going to use a bare\n\t\t// text block, we want to handle it as noEditor\n\t\tString userAgent = httpServletRequest.getHeader(\"User-Agent\");\n\t\tif (userAgent == null)\n\t\t    userAgent = \"\";\n\t\tboolean noEditor = userAgent.toLowerCase().indexOf(\"mobile\") >= 0;\n\n\t\t// set up locale\n\t\tLocale M_locale = null;\n\t\tString langLoc[] = localegetter.get().toString().split(\"_\");\n\t\tif (langLoc.length >= 2) {\n\t\t\tif (\"en\".equals(langLoc[0]) && \"ZA\".equals(langLoc[1])) {\n\t\t\t\tM_locale = new Locale(\"en\", \"GB\");\n\t\t\t} else {\n\t\t\t\tM_locale = new Locale(langLoc[0], langLoc[1]);\n\t\t\t}\n\t\t} else {\n\t\t\tM_locale = new Locale(langLoc[0]);\n\t\t}\n\n\t\t// clear session attribute if necessary, after calling Samigo\n\t\tString clearAttr = params.getClearAttr();\n\n\t\tif (clearAttr != null && !clearAttr.equals(\"\")) {\n\t\t\tSession session = SessionManager.getCurrentSession();\n\t\t\t// don't let users clear random attributes\n\t\t\tif (clearAttr.startsWith(\"LESSONBUILDER_RETURNURL\")) {\n\t\t\t\tsession.setAttribute(clearAttr, null);\n\t\t\t}\n\t\t}\n\n\t\tif (htmlTypes == null) {\n\t\t\tString mmTypes = ServerConfigurationService.getString(\"lessonbuilder.html.types\", DEFAULT_HTML_TYPES);\n\t\t\thtmlTypes = mmTypes.split(\",\");\n\t\t\tfor (int i = 0; i < htmlTypes.length; i++) {\n\t\t\t\thtmlTypes[i] = htmlTypes[i].trim().toLowerCase();\n\t\t\t}\n\t\t\tArrays.sort(htmlTypes);\n\t\t}\n\n\t\tif (mp4Types == null) {\n\t\t\tString m4Types = ServerConfigurationService.getString(\"lessonbuilder.mp4.types\", DEFAULT_MP4_TYPES);\n\t\t\tmp4Types = m4Types.split(\",\");\n\t\t\tfor (int i = 0; i < mp4Types.length; i++) {\n\t\t\t\tmp4Types[i] = mp4Types[i].trim().toLowerCase();\n\t\t\t}\n\t\t\tArrays.sort(mp4Types);\n\t\t}\n\n\t\tif (html5Types == null) {\n\t\t\tString jTypes = ServerConfigurationService.getString(\"lessonbuilder.html5.types\", DEFAULT_HTML5_TYPES);\n\t\t\thtml5Types = jTypes.split(\",\");\n\t\t\tfor (int i = 0; i < html5Types.length; i++) {\n\t\t\t\thtml5Types[i] = html5Types[i].trim().toLowerCase();\n\t\t\t}\n\t\t\tArrays.sort(html5Types);\n\t\t}\n\n\t\t// remember that page tool was reset, so we need to give user the option\n\t\t// of going to the last page from the previous session\n\t\tSimplePageToolDao.PageData lastPage = simplePageBean.toolWasReset();\n\n\t\t// if this page was copied from another site we may have to update links\n\t\t// can only do the fixups if you can write. We could hack permissions, but\n\t\t// I assume a site owner will access the site first\n\t\tif (canEditPage)\n\t\t    simplePageBean.maybeUpdateLinks();\n\n\t\t// if starting the tool, sendingpage isn't set. the following call\n\t\t// will give us the top page.\n\t\tSimplePage currentPage = simplePageBean.getCurrentPage();\n\t\t\n\t\t// now we need to find our own item, for access checks, etc.\n\t\tSimplePageItem pageItem = null;\n\t\tif (currentPage != null) {\n\t\t\tpageItem = simplePageBean.getCurrentPageItem(params.getItemId());\n\t\t}\n\t\t// one more security check: make sure the item actually involves this\n\t\t// page.\n\t\t// otherwise someone could pass us an item from a different page in\n\t\t// another site\n\t\t// actually this normally happens if the page doesn't exist and we don't\n\t\t// have permission to create it\n\t\tif (currentPage == null || pageItem == null || \n\t\t    (pageItem.getType() != SimplePageItem.STUDENT_CONTENT &&Long.valueOf(pageItem.getSakaiId()) != currentPage.getPageId())) {\n\t\t\tlog.warn(\"ShowPage item not in page\");\n\t\t\tUIOutput.make(tofill, \"error-div\");\n\t\t\tif (currentPage == null)\n\t\t\t    // most likely tool was created by site info but no page\n\t\t\t    // has created. It will created the first time an item is created,\n\t\t\t    // so from a user point of view it looks like no item has been added\n\t\t\t    UIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.noitems_error_user\"));\n\t\t\telse\n\t\t\t    UIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.not_available\"));\n\t\t\treturn;\n\t\t}\n\n\t\t// the reason for a seaprate release date test is so we can show the date.\n\t\t// there are currently some issues. If the page is not released and the user doesn't have\n\t\t// access because of groups, this will show the not released data. That's misleading because\n\t\t// when the release date comes the user still won't be able to see it. Not sure if it's worth\n\t\t// creating a separate function that just checks the groups. It's easy to test hidden, so I do that. The idea is that\n\t\t// if it's both hidden and not released it makes sense to show hidden.\n\n\t\t// check two parts of isitemvisible where we want to give specific errors\n\t\t// potentially need time zone for setting release date\n\t\tif (!canSeeAll && currentPage.getReleaseDate() != null && currentPage.getReleaseDate().after(new Date()) && !currentPage.isHidden()) {\n\t\t\tDateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT, M_locale);\n\t\t\tTimeZone tz = timeService.getLocalTimeZone();\n\t\t\tdf.setTimeZone(tz);\n\t\t\tString releaseDate = df.format(currentPage.getReleaseDate());\n\t\t\tString releaseMessage = messageLocator.getMessage(\"simplepage.not_yet_available_releasedate\").replace(\"{}\", releaseDate);\n\n\t\t\tUIOutput.make(tofill, \"error-div\");\n\t\t\tUIOutput.make(tofill, \"error\", releaseMessage);\n\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// the only thing not already tested (or tested in release check below) in isItemVisible is groups. In theory\n\t\t// no one should have a URL to a page for which they aren't in the group,\n\t\t// so I'm not trying to give a better message than just hidden\n\t\tif (!canSeeAll && currentPage.isHidden() || !simplePageBean.isItemVisible(pageItem)) {\n\t\t    UIOutput.make(tofill, \"error-div\");\n\t\t    UIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.not_available_hidden\"));\n\t\t    return;\n\t\t}\n\n\n\n\t\t// I believe we've now checked all the args for permissions issues. All\n\t\t// other item and\n\t\t// page references are generated here based on the contents of the page\n\t\t// and items.\n\n\t\t// needed to process path arguments first, so refresh page goes the right page\n\t\tif (simplePageBean.getTopRefresh()) {\n\t\t    UIOutput.make(tofill, \"refresh\");\n\t\t    return;    // but there's no point doing anything more\n\t\t}\n\n\t\t// error from previous operation\n\t\t// consumes the message, so don't do it if refreshing\n\t\tList<String> errMessages = simplePageBean.errMessages();\n\t\tif (errMessages != null) {\n\t\t    UIOutput.make(tofill, \"error-div\");\n\t\t    for (String e: errMessages) {\n\t\t\tUIBranchContainer er = UIBranchContainer.make(tofill, \"errors:\");\n\t\t\tUIOutput.make(er, \"error-message\", e);\n\t\t    }\n\t\t}\n\n\n\t\tif (canEditPage) {\n\t\t    // special instructor-only javascript setup.\n\t\t    // but not if we're refreshing\n\t\t\tUIOutput.make(tofill, \"instructoronly\");\n\t\t\t// Chome and IE will abort a page if some on it was input from\n\t\t\t// a previous submit. I.e. if an HTML editor was used. In theory they\n\t\t\t// only do this if part of it is Javascript, but in practice they do\n\t\t\t// it for images as well. The protection isn't worthwhile, since it only\n\t\t\t// protects the first time. Since it will reesult in a garbled page, \n\t\t\t// people will just refresh the page, and then they'll get the new\n\t\t\t// contents. The Chrome guys refuse to fix this so it just applies to Javascript\n\t\t\thttpServletResponse.setHeader(\"X-XSS-Protection\", \"0\");\n\t\t}\n\t\t\n\t\t\n\t\tif (currentPage == null || pageItem == null) {\n\t\t\tUIOutput.make(tofill, \"error-div\");\n\t\t\tif (canEditPage) {\n\t\t\t\tUIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.impossible1\"));\n\t\t\t} else {\n\t\t\t\tUIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.not_available\"));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Set up customizable CSS\n\t\tContentResource cssLink = simplePageBean.getCssForCurrentPage();\n\t\tif(cssLink != null) {\n\t\t\tUIOutput.make(tofill, \"customCSS\").decorate(new UIFreeAttributeDecorator(\"href\", cssLink.getUrl()));\n\t\t}\n\n\t\t// offer to go to saved page if this is the start of a session, in case\n\t\t// user has logged off and logged on again.\n\t\t// need to offer to go to previous page? even if a new session, no need\n\t\t// if we're already on that page\n\t\tif (lastPage != null && lastPage.pageId != currentPage.getPageId()) {\n\t\t\tUIOutput.make(tofill, \"refreshAlert\");\n\t\t\tUIOutput.make(tofill, \"refresh-message\", messageLocator.getMessage(\"simplepage.last-visited\"));\n\t\t\t// Should simply refresh\n\t\t\tGeneralViewParameters p = new GeneralViewParameters(VIEW_ID);\n\t\t\tp.setSendingPage(lastPage.pageId);\n\t\t\tp.setItemId(lastPage.itemId);\n\t\t\t// reset the path to the saved one\n\t\t\tp.setPath(\"log\");\n\t\t\t\n\t\t\tString name = lastPage.name;\n\t\t\t\n\t\t\t// Titles are set oddly by Student Content Pages\n\t\t\tSimplePage lastPageObj = simplePageToolDao.getPage(lastPage.pageId);\n\t\t\tif(lastPageObj.getOwner() != null) {\n\t\t\t\tname = lastPageObj.getTitle();\n\t\t\t}\n\t\t\t\n\t\t\tUIInternalLink.make(tofill, \"refresh-link\", name, p);\n\t\t}\n\n\t\t// path is the breadcrumbs. Push, pop or reset depending upon path=\n\t\t// programmer documentation.\n\t\tString title;\n\t\tString ownerName = null;\n\t\tif(pageItem.getType() != SimplePageItem.STUDENT_CONTENT) {\n\t\t\ttitle = pageItem.getName();\n\t\t}else {\n\t\t\ttitle = currentPage.getTitle();\n\t\t\tif(!pageItem.isAnonymous() || canEditPage) {\n\t\t\t    try {\n\t\t\t\tString owner = currentPage.getOwner();\n\t\t\t\tString group = currentPage.getGroup();\n\t\t\t\tif (group != null)\n\t\t\t\t    ownerName = simplePageBean.getCurrentSite().getGroup(group).getTitle();\n\t\t\t\telse\n\t\t\t\t    ownerName = UserDirectoryService.getUser(owner).getDisplayName();\n\t\t\t\t\n\t\t\t    } catch (Exception ignore) {};\n\t\t\t    if (ownerName != null && !ownerName.equals(title))\n\t\t\t\ttitle += \" (\" + ownerName + \")\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tString newPath = null;\n\t\t\n\t\t// If the path is \"none\", then we don't want to record this page as being viewed, or set a path\n\t\tif(!params.getPath().equals(\"none\")) {\n\t\t\tnewPath = simplePageBean.adjustPath(params.getPath(), currentPage.getPageId(), pageItem.getId(), title);\n\t\t\tsimplePageBean.adjustBackPath(params.getBackPath(), currentPage.getPageId(), pageItem.getId(), pageItem.getName());\n\t\t}\n\t\t\n\t\t// put out link to index of pages\n\t\tGeneralViewParameters showAll = new GeneralViewParameters(PagePickerProducer.VIEW_ID);\n\t\tshowAll.setSource(\"summary\");\n\t\tUIInternalLink.make(tofill, \"print-view\", messageLocator.getMessage(\"simplepage.print_view\"), showAll);\n\t\tUIInternalLink.make(tofill, \"show-pages\", messageLocator.getMessage(\"simplepage.showallpages\"), showAll);\n\t\t\n\t\tif (canEditPage) {\n\t\t\t// show tool bar, but not if coming from grading pane\n\t\t\tif(!cameFromGradingPane) {\n\t\t\t\tcreateToolBar(tofill, currentPage, (pageItem.getType() == SimplePageItem.STUDENT_CONTENT));\n\t\t\t}\n\t\t\t\n\t\t\tUIOutput.make(tofill, \"title-descrip\");\n\t\t\tString label = null;\n\t\t\tif (pageItem.getType() == SimplePageItem.STUDENT_CONTENT)\n\t\t\t    label = messageLocator.getMessage(\"simplepage.editTitle\");\n\t\t\telse\n\t\t\t    label = messageLocator.getMessage(\"simplepage.title\");\n\t\t\tString descrip = null;\n\t\t\tif (pageItem.getType() == SimplePageItem.STUDENT_CONTENT)\n\t\t\t    descrip = messageLocator.getMessage(\"simplepage.title-student-descrip\");\n\t\t\telse if (pageItem.getPageId() == 0)\n\t\t\t    descrip = messageLocator.getMessage(\"simplepage.title-top-descrip\");\n\t\t\telse\n\t\t\t    descrip = messageLocator.getMessage(\"simplepage.title-descrip\");\n\n\t\t\tUIOutput.make(tofill, \"edit-title\").decorate(new UIFreeAttributeDecorator(\"title\", descrip));\n\t\t\tUIOutput.make(tofill, \"edit-title-text\", label);\n\t\t\tUIOutput.make(tofill, \"title-descrip-text\", descrip);\n\n\t\t\tif (pageItem.getPageId() == 0 && currentPage.getOwner() == null) { // top level page\n\t\t\t    // need dropdown \n\t\t\t\tUIOutput.make(tofill, \"dropdown\");\n\t\t\t\tUIOutput.make(tofill, \"moreDiv\");\n\t\t\t\tUIOutput.make(tofill, \"new-page\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.new-page-tooltip\")));\n\t\t\t\tUIOutput.make(tofill, \"import-cc\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.import_cc.tooltip\")));\n\t\t\t\tUIOutput.make(tofill, \"export-cc\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.export_cc.tooltip\")));\n\t\t\t}\n\t\t\t\n\t\t\t// Checks to see that user can edit and that this is either a top level page,\n\t\t\t// or a top level student page (not a subpage to a student page)\n\t\t\tif(simplePageBean.getEditPrivs() == 0 && (pageItem.getPageId() == 0)) {\n\t\t\t\tUIOutput.make(tofill, \"remove-li\");\n\t\t\t\tUIOutput.make(tofill, \"remove-page\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.remove-page-tooltip\")));\n\t\t\t\t\n\t\t\t\tif (allowDeleteOrphans) {\n\t\t\t\t    UIOutput.make(tofill, \"delete-orphan-li\");\n\t\t\t\t    UIForm orphan =  UIForm.make(tofill, \"delete-orphan-form\");\n\t\t\t\t    makeCsrf(orphan, \"csrf1\");\n\t\t\t\t    UICommand.make(orphan, \"delete-orphan\", \"#{simplePageBean.deleteOrphanPages}\");\n\t\t\t\t    UIOutput.make(orphan, \"delete-orphan-link\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.delete-orphan-pages-desc\")));\n\t\t\t\t}\n\n\t\t\t} else if (simplePageBean.getEditPrivs() == 0 && currentPage.getOwner() != null) {\n\t\t\t    // getEditPrivs < 2 if we want to let the student delete. Currently we don't. There can be comments\n\t\t\t    // from other students and the page can be shared\n\t\t\t\tSimpleStudentPage studentPage = simplePageToolDao.findStudentPage(currentPage.getTopParent());\n\t\t\t\tif (studentPage != null && studentPage.getPageId() == currentPage.getPageId()) {\n\t\t\t\t\tUIOutput.make(tofill, \"remove-student\");\n\t\t\t\t\tUIOutput.make(tofill, \"remove-page-student\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.remove-student-page-explanation\")));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tUIOutput.make(tofill, \"dialogDiv\");\n\t\t\tUIOutput.make(tofill, \"siteid\", simplePageBean.getCurrentSiteId());\n\t\t\tUIOutput.make(tofill, \"locale\", M_locale.toString());\n\n\t\t} else if (!canReadPage) {\n\t\t\treturn;\n\t\t} else if (!canSeeAll) {\n\t\t\t// see if there are any unsatisfied prerequisites\n\t\t        // if this isn't a top level page, this will check that the page above is\n\t\t        // accessible. That matters because we check visible, available and release\n\t\t        // only for this page but not for the containing page\n\t\t\tList<String> needed = simplePageBean.pagesNeeded(pageItem);\n\t\t\tif (needed.size() > 0) {\n\t\t\t\t// yes. error and abort\n\t\t\t\tif (pageItem.getPageId() != 0) {\n\t\t\t\t\t// not top level. This should only happen from a \"next\"\n\t\t\t\t\t// link.\n\t\t\t\t\t// at any rate, the best approach is to send the user back\n\t\t\t\t\t// to the calling page\n\t\t\t\t\tList<SimplePageBean.PathEntry> path = simplePageBean.getHierarchy();\n\t\t\t\t\tSimplePageBean.PathEntry containingPage = null;\n\t\t\t\t\tif (path.size() > 1) {\n\t\t\t\t\t\t// page above this. this page is on the top\n\t\t\t\t\t\tcontainingPage = path.get(path.size() - 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (containingPage != null) { // not a top level page, point\n\t\t\t\t\t\t// to containing page\n\t\t\t\t\t\tGeneralViewParameters view = new GeneralViewParameters(VIEW_ID);\n\t\t\t\t\t\tview.setSendingPage(containingPage.pageId);\n\t\t\t\t\t\tview.setItemId(containingPage.pageItemId);\n\t\t\t\t\t\tview.setPath(Integer.toString(path.size() - 2));\n\t\t\t\t\t\tUIInternalLink.make(tofill, \"redirect-link\", containingPage.title, view);\n\t\t\t\t\t\tUIOutput.make(tofill, \"redirect\");\n\t\t\t\t\t} else {\n\t\t\t\t\t    UIOutput.make(tofill, \"error-div\");\n\t\t\t\t\t    UIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.not_available\"));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// top level page where prereqs not satisified. Output list of\n\t\t\t\t// pages he needs to do first\n\t\t\t\tUIOutput.make(tofill, \"pagetitle\", currentPage.getTitle());\n\t\t\t\tUIOutput.make(tofill, \"error-div\");\n\t\t\t\tUIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.has_prerequistes\"));\n\t\t\t\tUIBranchContainer errorList = UIBranchContainer.make(tofill, \"error-list:\");\n\t\t\t\tfor (String errorItem : needed) {\n\t\t\t\t\tUIBranchContainer errorListItem = UIBranchContainer.make(errorList, \"error-item:\");\n\t\t\t\t\tUIOutput.make(errorListItem, \"error-item-text\", errorItem);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tToolSession toolSession = SessionManager.getCurrentToolSession();\n\t\tString helpurl = (String)toolSession.getAttribute(\"sakai-portal:help-action\");\n\t\tString reseturl = (String)toolSession.getAttribute(\"sakai-portal:reset-action\");\n\n\t\tPlacement placement = toolManager.getCurrentPlacement();\n\t\tString toolId = placement.getToolId();\n\t\tboolean inline = false;\n\n\t\t// this section shouldn't be needed, but the portal in trunk\n\t\t// isn't going this right\n\t\tif (httpServletRequest.getRequestURI().startsWith(\"/portal/site/\")) {\n\t\t    // inline without morpheus is weird, but it seems to work\n\t\t    // if I treat it like Sakai 10\n\t\t    if (\"morpheus\".equals(portalTemplates))\n\t\t\tinline = true;\n\t\t    if (reseturl == null)\n\t\t\treseturl = \"/portal/site/\" + simplePageBean.getCurrentSiteId() + \"/tool-reset/\" + ((ToolConfiguration)placement).getPageId() + \"?panel=Main\";\n\t\t    if (helpurl == null)\n\t\t\thelpurl = \"/portal/help/main?help=\" + toolId;\n\t\t} else if (httpServletRequest.getRequestURI().startsWith(\"/portal/pda/\")) {\n\t\t    reseturl = null;\n\t\t    helpurl = null;\n\t\t}\n\n\t\tString skinName = null;\n\t\tString skinRepo = null;\n\t\tString iconBase = null;\n\n\t\tUIComponent titlediv = UIOutput.make(tofill, \"titlediv\");\n\t\t// we need to do special CSS for old portal\n\t\tif (helpurl == null)\n\t\t    titlediv.decorate(new UIStyleDecorator(\"oldPortal\"));\t\t\n\n\t\tif (helpurl != null || reseturl != null) {\n\t\t    // these URLs are defined if we're in the neo portal\n\t\t    // in that case we need our own help and reset icons. We want\n\t\t    // to take them from the current skin, so find its prefix.\n\t\t    // unfortunately the neoportal tacks neo- on front of the skin\n\t\t    // name, so this is more complex than you might think.\n\n\t\t    skinRepo = ServerConfigurationService.getString(\"skin.repo\", \"/library/skin\");\n\t\t    iconBase = skinRepo + \"/\" + CSSUtils.adjustCssSkinFolder(null) + \"/images\";\n\n\t\t    UIVerbatim.make(tofill, \"iconstyle\", ICONSTYLE.replace(\"{}\", iconBase));\n\n\t\t}\n\n\t\tif (helpurl != null) {\n\t\t    UILink.make(tofill, (pageItem.getPageId() == 0 ? \"helpbutton\" : \"helpbutton2\"), helpurl).\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"onclick\",\n\t\t\t         \"openWindow('\" + helpurl + \"', 'Help', 'resizeable=yes,toolbar=no,scrollbars=yes,menubar=yes,width=800,height=600'); return false\")).\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"title\",\n\t\t\t\t messageLocator.getMessage(\"simplepage.help-button\")));\n\t\t    if (!inline)\n\t\t    UIOutput.make(tofill, (pageItem.getPageId() == 0 ? \"helpimage\" : \"helpimage2\")).\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"alt\",\n\t\t\t         messageLocator.getMessage(\"simplepage.help-button\")));\n\t\t    UIOutput.make(tofill, (pageItem.getPageId() == 0 ? \"helpnewwindow\" : \"helpnewwindow2\"), \n\t\t\t\t  messageLocator.getMessage(\"simplepage.opens-in-new\"));\n\t\t    UILink.make(tofill, \"directurl\").\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"rel\", \"#Main\" + Web.escapeJavascript(placement.getId()) + \"_directurl\")).\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.direct-link\")));\n\t\t    if (inline) {\n\t\t\tUIOutput.make(tofill, \"directurl-div\").\n\t\t\t    decorate(new UIFreeAttributeDecorator(\"id\", \"Main\" + Web.escapeJavascript(placement.getId()) + \"_directurl\"));\n\t\t\tUIOutput.make(tofill, \"directurl-input\").\n\t\t\t    decorate(new UIFreeAttributeDecorator(\"onclick\", \"toggleShortUrlOutput('\" + myUrl() + \"/portal/directtool/\" + placement.getId() + \"/', this, 'Main\" + Web.escapeJavascript(placement.getId()) + \"_urlholder');\"));\n\t\t\tUIOutput.make(tofill, \"directurl-textarea\", myUrl() + \"/portal/directtool/\" + placement.getId() + \"/\").\n\t\t\t    decorate(new UIFreeAttributeDecorator(\"class\", \"portlet title-tools Main\" + Web.escapeJavascript(placement.getId()) + \"_urlholder\"));\n\t\t    } else\n\t\t\tUIOutput.make(tofill, \"directimage\").decorate(new UIFreeAttributeDecorator(\"alt\",\n\t\t\t\tmessageLocator.getMessage(\"simplepage.direct-link\")));\n\t\t}\n\n\t\tif (reseturl != null) {\n\t\t    UILink.make(tofill, (pageItem.getPageId() == 0 ? \"resetbutton\" : \"resetbutton2\"), reseturl).\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"onclick\",\n\t\t\t\t\"location.href='\" + reseturl + \"'; return false\")).\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"title\",\n\t\t\t        messageLocator.getMessage(\"simplepage.reset-button\")));\n\t\t    UIOutput.make(tofill, (pageItem.getPageId() == 0 ? \"resetimage\" : \"resetimage2\")).\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"alt\",\n\t\t\t        messageLocator.getMessage(\"simplepage.reset-button\")));\n\t\t}\n\n\t\t// note page accessed. the code checks to see whether all the required\n\t\t// items on it have been finished, and if so marks it complete, else just updates\n\t\t// access date save the path because if user goes to it later we want to restore the\n\t\t// breadcrumbs\n\t\tif(newPath != null) {\n\t\t\tif(pageItem.getType() != SimplePageItem.STUDENT_CONTENT) {\n\t\t\t\tsimplePageBean.track(pageItem.getId(), newPath);\n\t\t\t}else {\n\t\t\t\tsimplePageBean.track(pageItem.getId(), newPath, currentPage.getPageId());\n\t\t\t}\n\t\t}\n\n\t\tif(currentPage.getOwner() != null && simplePageBean.getEditPrivs() == 0) {\n\t\t\tSimpleStudentPage student = simplePageToolDao.findStudentPageByPageId(currentPage.getPageId());\n\t\t\t\n\t\t\t// Make sure this is a top level student page\n\t\t\tif(student != null && pageItem.getGradebookId() != null) {\n\t\t\t\tUIOutput.make(tofill, \"gradingSpan\");\n\t\t\t\tUIOutput.make(tofill, \"commentsUUID\", String.valueOf(student.getId()));\n\t\t\t\tUIOutput.make(tofill, \"commentPoints\", String.valueOf((student.getPoints() != null? student.getPoints() : \"\")));\n\t\t\t\tUIOutput pointsBox = UIOutput.make(tofill, \"studentPointsBox\");\n\t\t\t\tUIOutput.make(tofill, \"topmaxpoints\", String.valueOf((pageItem.getGradebookPoints() != null? pageItem.getGradebookPoints():\"\")));\n\t\t\t\tif (ownerName != null)\n\t\t\t\t    pointsBox.decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.grade-for-student\").replace(\"{}\",ownerName)));\n\t\t\t\n\t\t\t\tList<SimpleStudentPage> studentPages = simplePageToolDao.findStudentPages(student.getItemId());\n\t\t\t\t\n\t\t\t\tCollections.sort(studentPages, new Comparator<SimpleStudentPage>() {\n\t\t\t\t\tpublic int compare(SimpleStudentPage o1, SimpleStudentPage o2) {\n\t\t\t\t\t\tString title1 = o1.getTitle();\n\t\t\t\t\t\tif (title1 == null)\n\t\t\t\t\t\t\ttitle1 = \"\";\n\t\t\t\t\t\tString title2 = o2.getTitle();\n\t\t\t\t\t\tif (title2 == null)\n\t\t\t\t\t\t\ttitle2 = \"\";\n\t\t\t\t\t\treturn title1.compareTo(title2);\n\t\t\t\t    }\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfor(int in = 0; in < studentPages.size(); in++) {\n\t\t\t\t\tif(studentPages.get(in).isDeleted()) {\n\t\t\t\t\t\tstudentPages.remove(in);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint i = -1;\n\t\t\t\n\t\t\t\tfor(int in = 0; in < studentPages.size(); in++) {\n\t\t\t\t\tif(student.getId() == studentPages.get(in).getId()) {\n\t\t\t\t\t\ti = in;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif(i > 0) {\n\t\t\t\t\tGeneralViewParameters eParams = new GeneralViewParameters(ShowPageProducer.VIEW_ID, studentPages.get(i-1).getPageId());\n\t\t\t\t\teParams.setItemId(studentPages.get(i-1).getItemId());\n\t\t\t\t\teParams.setPath(\"next\");\n\t\t\t\t\n\t\t\t\t\tUIInternalLink.make(tofill, \"gradingBack\", eParams);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif(i < studentPages.size() - 1) {\n\t\t\t\t\tGeneralViewParameters eParams = new GeneralViewParameters(ShowPageProducer.VIEW_ID, studentPages.get(i+1).getPageId());\n\t\t\t\t\teParams.setItemId(studentPages.get(i+1).getItemId());\n\t\t\t\t\teParams.setPath(\"next\");\n\t\t\t\t\n\t\t\t\t\tUIInternalLink.make(tofill, \"gradingForward\", eParams);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tprintGradingForm(tofill);\n\t\t\t}\n\t\t}\n\n\t\t// breadcrumbs\n\t\tif (pageItem.getPageId() != 0) {\n\t\t\t// Not top-level, so we have to show breadcrumbs\n\n\t\t\tList<SimplePageBean.PathEntry> breadcrumbs = simplePageBean.getHierarchy();\n\n\t\t\tint index = 0;\n\t\t\tif (breadcrumbs.size() > 1 || reseturl != null || helpurl !=  null) {\n\t\t\t\tUIOutput.make(tofill, \"crumbdiv\");\n\t\t\t\tif (breadcrumbs.size() > 1)\n\t\t\t\t    for (SimplePageBean.PathEntry e : breadcrumbs) {\n\t\t\t\t\t// don't show current page. We already have a title. This\n\t\t\t\t\t// was too much\n\t\t\t\t\tUIBranchContainer crumb = UIBranchContainer.make(tofill, \"crumb:\");\n\t\t\t\t\tGeneralViewParameters view = new GeneralViewParameters(VIEW_ID);\n\t\t\t\t\tview.setSendingPage(e.pageId);\n\t\t\t\t\tview.setItemId(e.pageItemId);\n\t\t\t\t\tview.setPath(Integer.toString(index));\n\t\t\t\t\tUIComponent link = null;\n\t\t\t\t\tif (index < breadcrumbs.size() - 1) {\n\t\t\t\t\t\t// Not the last item\n\t\t\t\t\t\tlink = UIInternalLink.make(crumb, \"crumb-link\", e.title, view);\n\t\t\t\t\t\tUIOutput.make(crumb, \"crumb-follow\", \" > \");\n\t\t\t\t\t} else {\n\t\t\t\t\t    if (inline)\n\t\t\t\t\t\tlink = UILink.make(crumb, \"crumb-link\", e.title, reseturl).\n\t\t\t\t\t\t    decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.reset-button\"))).\n\t\t\t\t\t\t    decorate(new UIFreeAttributeDecorator(\"class\", \"title-tools reset\"));\n\n\t\t\t\t\t    \n\t\t\t\t\t    else\n\t\t\t\t\t\tUIOutput.make(crumb, \"crumb-follow\", e.title).decorate(new UIStyleDecorator(\"bold\"));\n\t\t\t\t\t}\n\t\t\t\t\tif (index > 0 && inline)\n\t\t\t\t\t    link.decorate(new UIFreeAttributeDecorator(\"style\", \"font-size:1ex; font-weight:600; vertical-align:text-top\"));\n\n\t\t\t\t\tindex++;\n\t\t\t\t    }\n\t\t\t\telse {\n\t\t\t\t    UIBranchContainer crumb = UIBranchContainer.make(tofill, \"crumb:\");\n\t\t\t\t    UILink.make(crumb, \"crum-link\", currentPage.getTitle(), reseturl);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t    if (inline && reseturl != null)\n\t\t\t\tUILink.make(tofill, \"pagetitlelink\", currentPage.getTitle(), reseturl);\n\t\t\t    else\n\t\t\t\tUIOutput.make(tofill, \"pagetitle\", currentPage.getTitle());\n\t\t\t}\n\t\t} else {\n\t\t    if (inline && reseturl != null)\n\t\t\tUILink.make(tofill, \"pagetitlelink\", currentPage.getTitle(), reseturl);\n\t\t    else\n\t\t\tUIOutput.make(tofill, \"pagetitle\", currentPage.getTitle());\n\t\t}\n\n\t\t// see if there's a next item in sequence.\n\t\tsimplePageBean.addPrevLink(tofill, pageItem);\n\t\tsimplePageBean.addNextLink(tofill, pageItem);\n\n\t\t// swfObject is not currently used\n\t\tboolean shownSwfObject = false;\n\n\t\t// items to show\n\t\tList<SimplePageItem> itemList = (List<SimplePageItem>) simplePageBean.getItemsOnPage(currentPage.getPageId());\n\t\t\n\t\t// Move all items with sequence <= 0 to the end of the list.\n\t\t// Count is necessary to guarantee we don't infinite loop over a\n\t\t// list that only has items with sequence <= 0.\n\t\t// Becauses sequence number is < 0, these start out at the beginning\n\t\tint count = 1;\n\t\twhile(itemList.size() > count && itemList.get(0).getSequence() <= 0) {\n\t\t\titemList.add(itemList.remove(0));\n\t\t\tcount++;\n\t\t}\n\n\t\t// Make sure we only add the comments javascript file once,\n\t\t// even if there are multiple comments tools on the page.\n\t\tboolean addedCommentsScript = false;\n\t\tint commentsCount = 0;\n\n\t\t// Find the most recent comment on the page by current user\n\t\tlong postedCommentId = -1;\n\t\tif (params.postedComment) {\n\t\t\tpostedCommentId = findMostRecentComment();\n\t\t}\n\n\t\tboolean showDownloads = (simplePageBean.getCurrentSite().getProperties().getProperty(\"lessonbuilder-nodownloadlinks\") == null);\n\n\t\t//\n\t\t//\n\t\t// MAIN list of items\n\t\t//\n\t\t// produce the main table\n\n\t\t// Is anything visible?\n\t\t// Note that we don't need to check whether any item is available, since the first visible\n\t\t// item is always available.\n\t\tboolean anyItemVisible = false;\n\n\t\tif (itemList.size() > 0) {\n\t\t\tUIBranchContainer container = UIBranchContainer.make(tofill, \"itemContainer:\");\n\n\t\t\tboolean showRefresh = false;\n\t\t\tint textboxcount = 1;\n\n\t\t\tUIBranchContainer tableContainer = UIBranchContainer.make(container, \"itemTable:\");\n\n\t\t\t// formatting: two columns:\n\t\t\t// 1: edit buttons, omitted for student\n\t\t\t// 2: main content\n\t\t\t// For links, which have status icons, the main content is a flush\n\t\t\t// left div with the icon\n\t\t\t// followed by a div with margin-left:30px. That takes it beyond the\n\t\t\t// icon, and avoids the\n\t\t\t// wrap-around appearance you'd get without the margin.\n\t\t\t// Normally the description is shown as a second div with\n\t\t\t// indentation in the CSS.\n\t\t\t// That puts it below the link. However with a link that's a button,\n\t\t\t// we do float left\n\t\t\t// for the button so the text wraps around it. I think that's\n\t\t\t// probably what people would expect.\n\n\t\t\tUIOutput.make(tableContainer, \"colgroup\");\n\t\t\tif (canEditPage) {\n\t\t\t\tUIOutput.make(tableContainer, \"col1\");\n\t\t\t}\n\t\t\tUIOutput.make(tableContainer, \"col2\");\n\n\t\t\t// our accessiblity people say not to use TH for except for a data table\n\t\t\t// the table header is for accessibility tools only, so it's\n\t\t\t// positioned off screen\n\t\t\t//if (canEditPage) {\n\t\t\t//    \tUIOutput.make(tableContainer, \"header-edits\");\n\t\t\t// }\n\t\t\t\n\t\t\t// UIOutput.make(tableContainer, \"header-items\");\n\n\t\t\tfor (SimplePageItem i : itemList) {\n\t\t\t\t// listitem is mostly historical. it uses some shared HTML, but\n\t\t\t\t// if I were\n\t\t\t\t// doing it from scratch I wouldn't make this distinction. At\n\t\t\t\t// the moment it's\n\t\t\t\t// everything that isn't inline.\n\n\t\t\t\tboolean listItem = !(i.getType() == SimplePageItem.TEXT || i.getType() == SimplePageItem.MULTIMEDIA\n\t\t\t\t\t\t|| i.getType() == SimplePageItem.COMMENTS || i.getType() == SimplePageItem.STUDENT_CONTENT\n\t\t\t\t\t\t|| i.getType() == SimplePageItem.QUESTION || i.getType() == SimplePageItem.PEEREVAL);\n\t\t\t\t// (i.getType() == SimplePageItem.PAGE &&\n\t\t\t\t// \"button\".equals(i.getFormat())))\n\n\t\t\t\tif (!simplePageBean.isItemVisible(i, currentPage)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tanyItemVisible = true;\n\t\t\t\tUIBranchContainer tableRow = UIBranchContainer.make(tableContainer, \"item:\");\n\n\t\t\t\t// set class name showing what the type is, so people can do funky CSS\n\n\t\t\t\tString itemClassName = null;\n\n\t\t\t\tswitch (i.getType()) {\n\t\t\t\tcase SimplePageItem.RESOURCE: itemClassName = \"resourceType\"; break;\n\t\t\t\tcase SimplePageItem.PAGE: itemClassName = \"pageType\"; break;\n\t\t\t\tcase SimplePageItem.ASSIGNMENT: itemClassName = \"assignmentType\"; break;\n\t\t\t\tcase SimplePageItem.ASSESSMENT: itemClassName = \"assessmentType\"; break;\n\t\t\t\tcase SimplePageItem.TEXT: itemClassName = \"textType\"; break;\n\t\t\t\tcase SimplePageItem.URL: itemClassName = \"urlType\"; break;\n\t\t\t\tcase SimplePageItem.MULTIMEDIA: itemClassName = \"multimediaType\"; break;\n\t\t\t\tcase SimplePageItem.FORUM: itemClassName = \"forumType\"; break;\n\t\t\t\tcase SimplePageItem.COMMENTS: itemClassName = \"commentsType\"; break;\n\t\t\t\tcase SimplePageItem.STUDENT_CONTENT: itemClassName = \"studentContentType\"; break;\n\t\t\t\tcase SimplePageItem.QUESTION: itemClassName = \"question\"; break;\n\t\t\t\tcase SimplePageItem.BLTI: itemClassName = \"bltiType\"; break;\n\t\t\t\tcase SimplePageItem.PEEREVAL: itemClassName = \"peereval\"; break;\n\t\t\t\t}\n\n\n\n\t\t\t\tif (listItem){\n\t\t\t\t    itemClassName = itemClassName + \" listType\";\n\t\t\t\t}\n\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\titemClassName = itemClassName + \"  canEdit\";\n\t\t\t\t}\n\n\t\t\t\ttableRow.decorate(new UIFreeAttributeDecorator(\"class\", itemClassName));\n\n\t\t\t\t// you really need the HTML file open at the same time to make\n\t\t\t\t// sense of the following code\n\t\t\t\tif (listItem) { // Not an HTML Text, Element or Multimedia\n\t\t\t\t\t// Element\n\n\t\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\tUIOutput.make(tableRow, \"current-item-id2\", String.valueOf(i.getId()));\n\t\t\t\t\t}\n\n\t\t\t\t\t// users can declare a page item to be navigational. If so\n\t\t\t\t\t// we display\n\t\t\t\t\t// it to the left of the normal list items, and use a\n\t\t\t\t\t// button. This is\n\t\t\t\t\t// used for pages that are \"next\" pages, i.e. they replace\n\t\t\t\t\t// this page\n\t\t\t\t\t// rather than creating a new level in the breadcrumbs.\n\t\t\t\t\t// Since they can't\n\t\t\t\t\t// be required, they don't need the status image, which is\n\t\t\t\t\t// good because\n\t\t\t\t\t// they're displayed with colspan=2, so there's no space for\n\t\t\t\t\t// the image.\n\n\t\t\t\t\tboolean navButton = \"button\".equals(i.getFormat()) && !i.isRequired();\n\t\t\t\t\tboolean notDone = false;\n\t\t\t\t\tStatus status = Status.NOT_REQUIRED;\n\t\t\t\t\tif (!navButton) {\n\t\t\t\t\t\tstatus = handleStatusImage(tableRow, i);\n\t\t\t\t\t\tif (status == Status.REQUIRED) {\n\t\t\t\t\t\t\tnotDone = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tboolean isInline = (i.getType() == SimplePageItem.BLTI && \"inline\".equals(i.getFormat()));\n\n\t\t\t\t\tUIOutput linktd = UIOutput.make(tableRow, \"item-td\");\n\t\t\t\t\t\n\t\t\t\t\tUIOutput contentCol = UIOutput.make(tableRow, \"contentCol\");\n\t\t\t\t\t// BLTI seems to require explicit specificaiton for column width. Otherwise\n\t\t\t\t\t// we get 300 px wide. Don't know why. Doesn't happen to other iframes\n\t\t\t\t\tif (isInline)\n\t\t\t\t\t    contentCol.decorate(new UIFreeAttributeDecorator(\"style\", \"width:100%\"));\n\n\t\t\t\t\tUIBranchContainer linkdiv = null;\n\t\t\t\t\tif (!isInline) {\n\t\t\t\t\t    linkdiv = UIBranchContainer.make(tableRow, \"link-div:\");\n\t\t\t\t\t    UIOutput itemicon = UIOutput.make(linkdiv,\"item-icon\");\n\t\t\t\t\t    switch (i.getType()) {\n\t\t\t\t\t    case SimplePageItem.FORUM:\n\t\t\t\t\t\titemicon.decorate(new UIFreeAttributeDecorator(\"src\", \"/library/image/silk/comments.png\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t    case SimplePageItem.ASSIGNMENT:\n\t\t\t\t\t\titemicon.decorate(new UIFreeAttributeDecorator(\"src\", \"/library/image/silk/page_edit.png\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t    case SimplePageItem.ASSESSMENT:\n\t\t\t\t\t\titemicon.decorate(new UIFreeAttributeDecorator(\"src\", \"/library/image/silk/pencil.png\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t    case SimplePageItem.BLTI:\n\t\t\t\t\t\titemicon.decorate(new UIFreeAttributeDecorator(\"src\", \"/library/image/silk/application_go.png\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t    case SimplePageItem.PAGE:\n\t\t\t\t\t\titemicon.decorate(new UIFreeAttributeDecorator(\"src\", \"/library/image/silk/book_open.png\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t    case SimplePageItem.RESOURCE:\n\t\t\t\t\t\tString mimeType = i.getHtml();\n\n                        if(\"application/octet-stream\".equals(mimeType)) {\n                            // OS X reports octet stream for things like MS Excel documents.\n                            // Force a mimeType lookup so we get a decent icon.\n                            mimeType = null;\n                        }\n\n\t\t\t\t\t\tif (mimeType == null || mimeType.equals(\"\")) {\n\t\t\t\t\t\t    String s = i.getSakaiId();\n\t\t\t\t\t\t    int j = s.lastIndexOf(\".\");\n\t\t\t\t\t\t    if (j >= 0)\n\t\t\t\t\t\t\ts = s.substring(j+1);\n\t\t\t\t\t\t    mimeType = ContentTypeImageService.getContentType(s);\n\t\t\t\t\t\t    // System.out.println(\"type \" + s + \">\" + mimeType);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tString src = null;\n\t\t\t\t\t\tif (!useSakaiIcons)\n\t\t\t\t\t\t    src = imageToMimeMap.get(mimeType);\n\t\t\t\t\t\tif (src == null) {\n\t\t\t\t\t\t    String image = ContentTypeImageService.getContentTypeImage(mimeType);\n\t\t\t\t\t\t    if (image != null)\n\t\t\t\t\t\t\tsrc = \"/library/image/\" + image;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(src != null) {\n\t\t\t\t\t\t    itemicon.decorate(new UIFreeAttributeDecorator(\"src\", src));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tUIOutput descriptiondiv = null;\n\n\t\t\t\t\t// refresh isn't actually used anymore. We've changed the\n\t\t\t\t\t// way things are\n\t\t\t\t\t// done so the user never has to request a refresh.\n\t\t\t\t\t//   FYI: this actually puts in an IFRAME for inline BLTI items\n\t\t\t\t\tshowRefresh = !makeLink(tableRow, \"link\", i, canSeeAll, currentPage, notDone, status) || showRefresh;\n\t\t\t\t\tUILink.make(tableRow, \"copylink\", i.getName(), \"http://lessonbuilder.sakaiproject.org/\" + i.getId() + \"/\").\n\t\t\t\t\t    decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.copylink2\").replace(\"{}\", i.getName())));\n\n\t\t\t\t\t// dummy is used when an assignment, quiz, or forum item is\n\t\t\t\t\t// copied\n\t\t\t\t\t// from another site. The way the copy code works, our\n\t\t\t\t\t// import code\n\t\t\t\t\t// doesn't have access to the necessary info to use the item\n\t\t\t\t\t// from the\n\t\t\t\t\t// new site. So we add a dummy, which generates an\n\t\t\t\t\t// explanation that the\n\t\t\t\t\t// author is going to have to choose the item from the\n\t\t\t\t\t// current site\n\t\t\t\t\tif (i.getSakaiId().equals(SimplePageItem.DUMMY)) {\n\t\t\t\t\t\tString code = null;\n\t\t\t\t\t\tswitch (i.getType()) {\n\t\t\t\t\t\tcase SimplePageItem.ASSIGNMENT:\n\t\t\t\t\t\t\tcode = \"simplepage.copied.assignment\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase SimplePageItem.ASSESSMENT:\n\t\t\t\t\t\t\tcode = \"simplepage.copied.assessment\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase SimplePageItem.FORUM:\n\t\t\t\t\t\t\tcode = \"simplepage.copied.forum\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdescriptiondiv = UIOutput.make(tableRow, \"description\", messageLocator.getMessage(code));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdescriptiondiv = UIOutput.make(tableRow, \"description\", i.getDescription());\n\t\t\t\t\t}\n\t\t\t\t\tif (isInline)\n\t\t\t\t\t    descriptiondiv.decorate(new UIFreeAttributeDecorator(\"style\", \"margin-top: 4px\"));\n\n\t\t\t\t\tif (!isInline) {\n\t\t\t\t\t    // nav button gets float left so any description goes to its\n\t\t\t\t\t    // right. Otherwise the\n\t\t\t\t\t    // description block will display underneath\n\t\t\t\t\t    if (\"button\".equals(i.getFormat())) {\n\t\t\t\t\t\tlinkdiv.decorate(new UIFreeAttributeDecorator(\"style\", \"float:none\"));\n\t\t\t\t\t    }\n\t\t\t\t\t    // for accessibility\n\t\t\t\t\t    if (navButton) {\n\t\t\t\t\t\tlinkdiv.decorate(new UIFreeAttributeDecorator(\"role\", \"navigation\"));\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\t// note that a lot of the info here is used by the\n\t\t\t\t\t// javascript that prepares\n\t\t\t\t\t// the jQuery dialogs\n\t\t\t\t\tString itemGroupString = null;\n\t\t\t\t\tboolean entityDeleted = false;\n\t\t\t\t\tboolean notPublished = false;\n\t\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\tUIOutput.make(tableRow, \"edit-td\");\n\t\t\t\t\t\tUILink.make(tableRow, \"edit-link\", messageLocator.getMessage(\"simplepage.editItem\"), \"\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.generic\").replace(\"{}\", i.getName())));\n\n\t\t\t\t\t\t// the following information is displayed using <INPUT\n\t\t\t\t\t\t// type=hidden ...\n\t\t\t\t\t\t// it contains information needed to populate the \"edit\"\n\t\t\t\t\t\t// popup dialog\n\t\t\t\t\t\tUIOutput.make(tableRow, \"prerequisite-info\", String.valueOf(i.isPrerequisite()));\n\n\t\t\t\t\t\tif (i.getType() == SimplePageItem.ASSIGNMENT) {\n\t\t\t\t\t\t\t// the type indicates whether scoring is letter\n\t\t\t\t\t\t\t// grade, number, etc.\n\t\t\t\t\t\t\t// the javascript needs this to present the right\n\t\t\t\t\t\t\t// choices to the user\n\t\t\t\t\t\t\t// types 6 and 8 aren't legal scoring types, so they\n\t\t\t\t\t\t\t// are used as\n\t\t\t\t\t\t\t// markers for quiz or forum. I ran out of numbers\n\t\t\t\t\t\t\t// and started using\n\t\t\t\t\t\t\t// text for things that aren't scoring types. That's\n\t\t\t\t\t\t\t// better anyway\n\t\t\t\t\t\t\tint type = 4;\n\t\t\t\t\t\t\tLessonEntity assignment = null;\n\t\t\t\t\t\t\tif (!i.getSakaiId().equals(SimplePageItem.DUMMY)) {\n\t\t\t\t\t\t\t\tassignment = assignmentEntity.getEntity(i.getSakaiId(), simplePageBean);\n\t\t\t\t\t\t\t\tif (assignment != null) {\n\t\t\t\t\t\t\t\t\ttype = assignment.getTypeOfGrade();\n\t\t\t\t\t\t\t\t\tString editUrl = assignment.editItemUrl(simplePageBean);\n\t\t\t\t\t\t\t\t\tif (editUrl != null) {\n\t\t\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"edit-url\", editUrl);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, assignment, true);\n\t\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-groups\", itemGroupString);\n\t\t\t\t\t\t\t\t\tif (!assignment.objectExists())\n\t\t\t\t\t\t\t\t\t    entityDeleted = true;\n\t\t\t\t\t\t\t\t\telse if (assignment.notPublished())\n\t\t\t\t\t\t\t\t\t    notPublished = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"type\", String.valueOf(type));\n\t\t\t\t\t\t\tString requirement = String.valueOf(i.getSubrequirement());\n\t\t\t\t\t\t\tif ((type == SimplePageItem.PAGE || type == SimplePageItem.ASSIGNMENT) && i.getSubrequirement()) {\n\t\t\t\t\t\t\t\trequirement = i.getRequirementText();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"requirement-text\", requirement);\n\t\t\t\t\t\t} else if (i.getType() == SimplePageItem.ASSESSMENT) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"type\", \"6\"); // Not used by\n\t\t\t\t\t\t\t// assignments,\n\t\t\t\t\t\t\t// so it is\n\t\t\t\t\t\t\t// safe to dedicate to assessments\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"requirement-text\", (i.getSubrequirement() ? i.getRequirementText() : \"false\"));\n\t\t\t\t\t\t\tLessonEntity quiz = quizEntity.getEntity(i.getSakaiId(),simplePageBean);\n\t\t\t\t\t\t\tif (quiz != null) {\n\t\t\t\t\t\t\t\tString editUrl = quiz.editItemUrl(simplePageBean);\n\t\t\t\t\t\t\t\tif (editUrl != null) {\n\t\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"edit-url\", editUrl);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\teditUrl = quiz.editItemSettingsUrl(simplePageBean);\n\t\t\t\t\t\t\t\tif (editUrl != null) {\n\t\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"edit-settings-url\", editUrl);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, quiz, true);\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-groups\", itemGroupString);\n\t\t\t\t\t\t\t\tif (!quiz.objectExists())\n\t\t\t\t\t\t\t\t    entityDeleted = true;\n\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t    notPublished = quizEntity.notPublished(i.getSakaiId());\n\t\t\t\t\t\t} else if (i.getType() == SimplePageItem.BLTI) {\n\t\t\t\t\t\t    UIOutput.make(tableRow, \"type\", \"b\");\n\t\t\t\t\t\t    LessonEntity blti= (bltiEntity == null ? null : bltiEntity.getEntity(i.getSakaiId()));\n\t\t\t\t\t\t    if (blti != null) {\n\t\t\t\t\t\t\tString editUrl = blti.editItemUrl(simplePageBean);\n\t\t\t\t\t\t\tif (editUrl != null)\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"edit-url\", editUrl);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-format\", i.getFormat());\n\n\t\t\t\t\t\t\tif (i.getHeight() != null)\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"item-height\", i.getHeight());\n\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, null, true);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-groups\", itemGroupString );\n\t\t\t\t\t\t\tif (!blti.objectExists())\n\t\t\t\t\t\t\t    entityDeleted = true;\n\t\t\t\t\t\t\telse if (blti.notPublished())\n\t\t\t\t\t\t\t    notPublished = true;\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t} else if (i.getType() == SimplePageItem.FORUM) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"extra-info\");\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"type\", \"8\");\n\t\t\t\t\t\t\tLessonEntity forum = forumEntity.getEntity(i.getSakaiId());\n\t\t\t\t\t\t\tif (forum != null) {\n\t\t\t\t\t\t\t\tString editUrl = forum.editItemUrl(simplePageBean);\n\t\t\t\t\t\t\t\tif (editUrl != null) {\n\t\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"edit-url\", editUrl);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, forum, true);\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-groups\", itemGroupString);\n\t\t\t\t\t\t\t\tif (!forum.objectExists())\n\t\t\t\t\t\t\t\t    entityDeleted = true;\n\t\t\t\t\t\t\t\telse if (forum.notPublished())\n\t\t\t\t\t\t\t\t    notPublished = true;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (i.getType() == SimplePageItem.PAGE) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"type\", \"page\");\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"page-next\", Boolean.toString(i.getNextPage()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"page-button\", Boolean.toString(\"button\".equals(i.getFormat())));\n\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, null, true);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-groups\", itemGroupString);\n\t\t\t\t\t\t} else if (i.getType() == SimplePageItem.RESOURCE) {\n\t\t\t\t\t\t        try {\n\t\t\t\t\t\t\t    itemGroupString = simplePageBean.getItemGroupStringOrErr(i, null, true);\n\t\t\t\t\t\t\t} catch (IdUnusedException e) {\n\t\t\t\t\t\t\t    itemGroupString = \"\";\n\t\t\t\t\t\t\t    entityDeleted = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (simplePageBean.getInherited())\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"item-groups\", \"--inherited--\");\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"item-groups\", itemGroupString );\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-samewindow\", Boolean.toString(i.isSameWindow()));\n\n\t\t\t\t\t\t\tUIVerbatim.make(tableRow, \"item-path\", getItemPath(i));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // end of canEditPage\n\n\t\t\t\t\tif (canSeeAll) {\n\t\t\t\t\t\t// haven't set up itemgroupstring yet\n\t\t\t\t\t\tif (!canEditPage) {\n\t\t\t\t\t\t    if (!i.getSakaiId().equals(SimplePageItem.DUMMY)) {\n\t\t\t\t\t\t\tLessonEntity lessonEntity = null;\n\t\t\t\t\t\t\tswitch (i.getType()) {\n\t\t\t\t\t\t\tcase SimplePageItem.ASSIGNMENT:\n\t\t\t\t\t\t\t    lessonEntity = assignmentEntity.getEntity(i.getSakaiId(), simplePageBean);\n\t\t\t\t\t\t\t    if (lessonEntity != null)\n\t\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, lessonEntity, true);\n\t\t\t\t\t\t\t    if (!lessonEntity.objectExists())\n\t\t\t\t\t\t\t\tentityDeleted = true;\n\t\t\t\t\t\t\t    else if (lessonEntity.notPublished())\n\t\t\t\t\t\t\t\tnotPublished = true;\n\t\t\t\t\t\t\t    break;\n\t\t\t\t\t\t\tcase SimplePageItem.ASSESSMENT:\n\t\t\t\t\t\t\t    lessonEntity = quizEntity.getEntity(i.getSakaiId(),simplePageBean);\n\t\t\t\t\t\t\t    if (lessonEntity != null)\n\t\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, lessonEntity, true);\n\t\t\t\t\t\t\t    else \n\t\t\t\t\t\t\t\tnotPublished = quizEntity.notPublished(i.getSakaiId());\n\t\t\t\t\t\t\t    if (!lessonEntity.objectExists())\n\t\t\t\t\t\t\t\tentityDeleted = true;\n\t\t\t\t\t\t\t    break;\n\t\t\t\t\t\t\tcase SimplePageItem.FORUM:\n\t\t\t\t\t\t\t    lessonEntity = forumEntity.getEntity(i.getSakaiId());\n\t\t\t\t\t\t\t    if (lessonEntity != null)\n\t\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, lessonEntity, true);\n\t\t\t\t\t\t\t    if (!lessonEntity.objectExists())\n\t\t\t\t\t\t\t\tentityDeleted = true;\n\t\t\t\t\t\t\t    else if (lessonEntity.notPublished())\n\t\t\t\t\t\t\t\tnotPublished = true;\n\t\t\t\t\t\t\t    break;\n\t\t\t\t\t\t\tcase SimplePageItem.BLTI:\n\t\t\t\t\t\t\t    if (bltiEntity != null)\n\t\t\t\t\t\t\t\tlessonEntity = bltiEntity.getEntity(i.getSakaiId());\n\t\t\t\t\t\t\t    if (lessonEntity != null)\n\t\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, null, true);\n\t\t\t\t\t\t\t    if (!lessonEntity.objectExists())\n\t\t\t\t\t\t\t\tentityDeleted = true;\n\t\t\t\t\t\t\t    else if (lessonEntity.notPublished())\n\t\t\t\t\t\t\t\tnotPublished = true;\n\t\t\t\t\t\t\t    break;\n\t\t\t\t\t\t\tcase SimplePageItem.PAGE:\n\t\t\t\t\t\t\t    itemGroupString = simplePageBean.getItemGroupString(i, null, true);\n\t\t\t\t\t\t\t    break;\n\t\t\t\t\t\t\tcase SimplePageItem.RESOURCE:\n\t\t\t\t\t\t\t    try {\n\t\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupStringOrErr(i, null, true);\n\t\t\t\t\t\t\t    } catch (IdUnusedException e) {\n\t\t\t\t\t\t\t\titemGroupString = \"\";\n\t\t\t\t\t\t\t\tentityDeleted = true;\n\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t    break;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tString releaseString = simplePageBean.getReleaseString(i);\n\t\t\t\t\t\tif (itemGroupString != null || releaseString != null || entityDeleted || notPublished) {\n\t\t\t\t\t\t\tif (itemGroupString != null)\n\t\t\t\t\t\t\t    itemGroupString = simplePageBean.getItemGroupTitles(itemGroupString, i);\n\t\t\t\t\t\t\tif (itemGroupString != null) {\n\t\t\t\t\t\t\t    itemGroupString = \" [\" + itemGroupString + \"]\";\n\t\t\t\t\t\t\t    if (releaseString != null)\n\t\t\t\t\t\t\t\titemGroupString = \" \" + releaseString + itemGroupString;\n\t\t\t\t\t\t\t} else if (releaseString != null)\n\t\t\t\t\t\t\t    itemGroupString = \" \" + releaseString;\n\t\t\t\t\t\t\tif (notPublished) {\n\t\t\t\t\t\t\t    if (itemGroupString != null)\n\t\t\t\t\t\t\t\titemGroupString = itemGroupString + \" \" + \n\t\t\t\t\t\t\t\t    messageLocator.getMessage(\"simplepage.not-published\");\n\t\t\t\t\t\t\t    else\n\t\t\t\t\t\t\t\titemGroupString = messageLocator.getMessage(\"simplepage.not-published\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (entityDeleted) {\n\t\t\t\t\t\t\t    if (itemGroupString != null)\n\t\t\t\t\t\t\t\titemGroupString = itemGroupString + \" \" + \n\t\t\t\t\t\t\t\t    messageLocator.getMessage(\"simplepage.deleted-entity\");\n\t\t\t\t\t\t\t    else\n\t\t\t\t\t\t\t\titemGroupString = messageLocator.getMessage(\"simplepage.deleted-entity\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (itemGroupString != null)\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, (isInline ? \"item-group-titles-div\" : \"item-group-titles\"), itemGroupString);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // end of canSeeAll\n\n\t\t\t\t\t// the following are for the inline item types. Multimedia\n\t\t\t\t\t// is the most complex because\n\t\t\t\t\t// it can be IMG, IFRAME, or OBJECT, and Youtube is treated\n\t\t\t\t\t// separately\n\n\t\t\t\t} else if (i.getType() == SimplePageItem.MULTIMEDIA) {\n\t\t\t\t    // This code should be read together with the code in SimplePageBean\n\t\t\t\t    // that sets up this data, method addMultimedia.  Most display is set\n\t\t\t\t    // up here, but note that show-page.js invokes the jquery oembed on all\n\t\t\t\t    // <A> items with class=\"oembed\".\n\n\t\t\t\t    // historically this code was to display files ,and urls leading to things\n\t\t\t\t    // like MP4. as backup if we couldn't figure out what to do we'd put something\n\t\t\t\t    // in an iframe. The one exception is youtube, which we supposed explicitly.\n\t\t\t\t    //   However we now support several ways to embed content. We use the\n\t\t\t\t    // multimediaDisplayType code to indicate which. The codes are\n\t\t\t\t    // \t 1 -- embed code, 2 -- av type, 3 -- oembed, 4 -- iframe\n\t\t\t\t    // 2 is the original code: MP4, image, and as a special case youtube urls\n\t\t\t\t    // since we have old entries with no type code, and that behave the same as\n\t\t\t\t    // 2, we start by converting 2 to null.\n\t\t\t\t    //  then the logic is\n\t\t\t\t    //  if type == null & youtube, do youtube\n\t\t\t\t    //  if type == null & image, do iamge\n\t\t\t\t    //  if type == null & not HTML do MP4 or other player for file \n\t\t\t\t    //  final fallthrough to handel the new types, with IFRAME if all else fails\n\t\t\t\t    // the old code creates ojbects in ContentHosting for both files and URLs.\n\t\t\t\t    // The new code saves the embed code or URL itself as an atteibute of the item\n\t\t\t\t    // If I were doing it again, I wouldn't create the ContebtHosting item\n\t\t\t\t    //   Note that IFRAME is only used for something where the far end claims the MIME\n\t\t\t\t    // type is HTML. For weird stuff like MS Word files I use the file display code, which\n\t\t\t\t    // will end up producing <OBJECT>.\n\n\t\t\t\t\t// the reason this code is complex is that we try to choose\n\t\t\t\t\t// the best\n\t\t\t\t\t// HTML for displaying the particular type of object. We've\n\t\t\t\t\t// added complexities\n\t\t\t\t\t// over time as we get more experience with different\n\t\t\t\t\t// object types and browsers.\n\n\t\t\t\t \tString itemGroupString = null;\n\t\t\t\t\tString itemGroupTitles = null;\n\t\t\t\t\tboolean entityDeleted = false;\n\t\t\t\t\t// new format explicit display indication\n\t\t\t\t\tString mmDisplayType = i.getAttribute(\"multimediaDisplayType\");\n\t\t\t\t\t// 2 is the generic \"use old display\" so treat it as null\n\t\t\t\t\tif (\"\".equals(mmDisplayType) || \"2\".equals(mmDisplayType))\n\t\t\t\t\t    mmDisplayType = null;\n\t\t\t\t\tif (canSeeAll) {\n\t\t\t\t\t    try {\n\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupStringOrErr(i, null, true);\n\t\t\t\t\t    } catch (IdUnusedException e) {\n\t\t\t\t\t\titemGroupString = \"\";\n\t\t\t\t\t\tentityDeleted = true;\n\t\t\t\t\t    }\n\t\t\t\t\t    itemGroupTitles = simplePageBean.getItemGroupTitles(itemGroupString, i);\n\t\t\t\t\t    if (entityDeleted) {\n\t\t\t\t\t\tif (itemGroupTitles != null)\n\t\t\t\t\t\t    itemGroupTitles = itemGroupTitles + \" \" + messageLocator.getMessage(\"simplepage.deleted-entity\");\n\t\t\t\t\t\telse\n\t\t\t\t\t\t    itemGroupTitles = messageLocator.getMessage(\"simplepage.deleted-entity\");\n\t\t\t\t\t    }\n\t\t\t\t\t    if (itemGroupTitles != null) {\n\t\t\t\t\t\titemGroupTitles = \"[\" + itemGroupTitles + \"]\";\n\t\t\t\t\t    }\n\t\t\t\t\t    UIOutput.make(tableRow, \"item-groups\", itemGroupString);\n\t\t\t\t\t} else if (entityDeleted)\n\t\t\t\t\t    continue;\n\t\t\t\t\t\n\t\t\t\t\tif (!\"1\".equals(mmDisplayType) && !\"3\".equals(mmDisplayType))\n\t\t\t\t\t    UIVerbatim.make(tableRow, \"item-path\", getItemPath(i));\n\n\t\t\t\t\t// the reason this code is complex is that we try to choose\n\t\t\t\t\t// the best\n\t\t\t\t\t// HTML for displaying the particular type of object. We've\n\t\t\t\t\t// added complexities\n\t\t\t\t\t// over time as we get more experience with different\n\t\t\t\t\t// object types and browsers.\n\n\t\t\t\t\tStringTokenizer token = new StringTokenizer(i.getSakaiId(), \".\");\n\n\t\t\t\t\tString extension = \"\";\n\n\t\t\t\t\twhile (token.hasMoreTokens()) {\n\t\t\t\t\t\textension = token.nextToken().toLowerCase();\n\t\t\t\t\t}\n\n\t\t\t\t\t// the extension is almost never used. Normally we have\n\t\t\t\t\t// the MIME type and use it. Extension is used only if\n\t\t\t\t\t// for some reason we don't have the MIME type\n\t\t\t\t\tUIComponent item;\n\t\t\t\t\tString youtubeKey;\n\n\t\t\t\t\tLength width = null;\n\t\t\t\t\tif (i.getWidth() != null) {\n\t\t\t\t\t\twidth = new Length(i.getWidth());\n\t\t\t\t\t}\n\t\t\t\t\tLength height = null;\n\t\t\t\t\tif (i.getHeight() != null) {\n\t\t\t\t\t\theight = new Length(i.getHeight());\n\t\t\t\t\t}\n\n\t\t\t\t\t// Get the MIME type. For multimedia types is should be in\n\t\t\t\t\t// the html field.\n\t\t\t\t\t// The old code saved the URL there. So if it looks like a\n\t\t\t\t\t// URL ignore it.\n\t\t\t\t\tString mimeType = i.getHtml();\n\t\t\t\t\tif (mimeType != null && (mimeType.startsWith(\"http\") || mimeType.equals(\"\"))) {\n\t\t\t\t\t\tmimeType = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// here goes. dispatch on the type and produce the right tag\n\t\t\t\t\t// type,\n\t\t\t\t\t// followed by the hidden INPUT tags with information for the\n\t\t\t\t\t// edit dialog\n\t\t\t\t\tif (mmDisplayType == null && simplePageBean.isImageType(i)) {\n\n\t\t\t\t\t    if(canSeeAll || simplePageBean.isItemAvailable(i)) {\n\t\t\t\t\t\t    UIOutput.make(tableRow, \"imageSpan\");\n\n\t\t\t\t\t\t    if (itemGroupString != null) {\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"item-group-titles3\", itemGroupTitles);\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"item-groups3\", itemGroupString);\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    String imageName = i.getAlt();\n\t\t\t\t\t\t    if (imageName == null || imageName.equals(\"\")) {\n\t\t\t\t\t\t\t    imageName = abbrevUrl(i.getURL());\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    item = UIOutput.make(tableRow, \"image\").decorate(new UIFreeAttributeDecorator(\"src\", i.getItemURL(simplePageBean.getCurrentSiteId(),currentPage.getOwner()))).decorate(new UIFreeAttributeDecorator(\"alt\", imageName));\n\t\t\t\t\t\t    if (lengthOk(width)) {\n\t\t\t\t\t\t\t    item.decorate(new UIFreeAttributeDecorator(\"width\", width.getOld()));\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t\n\t\t\t\t\t\t    if(lengthOk(height)) {\n\t\t\t\t\t\t\t    item.decorate(new UIFreeAttributeDecorator(\"height\", height.getOld()));\n\t\t\t\t\t\t    }\n\t\t\t\t\t    } else {\n\t\t\t\t\t        UIComponent notAvailableText = UIOutput.make(tableRow, \"notAvailableText\", messageLocator.getMessage(\"simplepage.multimediaItemUnavailable\"));\n\t\t\t\t\t\t// Grey it out\n\t\t\t\t\t\t    notAvailableText.decorate(new UIFreeAttributeDecorator(\"class\", \"disabled-text-item\"));\n\t\t\t\t\t    }\n\n\t\t\t\t\t\t// stuff for the jquery dialog\n\t\t\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"imageHeight\", getOrig(height));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"imageWidth\", getOrig(width));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"mimetype2\", mimeType);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"current-item-id4\", Long.toString(i.getId()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-prereq3\", String.valueOf(i.isPrerequisite()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"editmm-td\");\n\t\t\t\t\t\t\tUILink.make(tableRow, \"iframe-edit\", messageLocator.getMessage(\"simplepage.editItem\"), \"\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.url\").replace(\"{}\", abbrevUrl(i.getURL()))));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tUIOutput.make(tableRow, \"description2\", i.getDescription());\n\n\t\t\t\t\t} else if (mmDisplayType == null && (youtubeKey = simplePageBean.getYoutubeKey(i)) != null) {\n\t\t\t\t\t\tString youtubeUrl = SimplePageBean.getYoutubeUrlFromKey(youtubeKey);\n\n\t\t\t\t\t\tif(canSeeAll || simplePageBean.isItemAvailable(i)) {\n\t\t\t\t\t\t    UIOutput.make(tableRow, \"youtubeSpan\");\n\n\t\t\t\t\t\t    if (itemGroupString != null) {\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"item-group-titles4\", itemGroupTitles);\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"item-groups4\", itemGroupString);\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    // if width is blank or 100% scale the height\n\t\t\t\t\t\t    if (width != null && height != null && !height.number.equals(\"\")) {\n\t\t\t\t\t\t\t    if (width.number.equals(\"\") && width.unit.equals(\"\") || width.number.equals(\"100\") && width.unit.equals(\"%\")) {\n\n\t\t\t\t\t\t\t\t    int h = Integer.parseInt(height.number);\n\t\t\t\t\t\t\t\t    if (h > 0) {\n\t\t\t\t\t\t\t\t\t    width.number = Integer.toString((int) Math.round(h * 1.641025641));\n\t\t\t\t\t\t\t\t\t    width.unit = height.unit;\n\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    // <object style=\"height: 390px; width: 640px\"><param\n\t\t\t\t\t\t    // name=\"movie\"\n\t\t\t\t\t\t    // value=\"http://www.youtube.com/v/AKIC7OQqBrA?version=3\"><param\n\t\t\t\t\t\t    // name=\"allowFullScreen\" value=\"true\"><param\n\t\t\t\t\t\t    // name=\"allowScriptAccess\" value=\"always\"><embed\n\t\t\t\t\t\t    // src=\"http://www.youtube.com/v/AKIC7OQqBrA?version=3\"\n\t\t\t\t\t\t    // type=\"application/x-shockwave-flash\"\n\t\t\t\t\t\t    // allowfullscreen=\"true\" allowScriptAccess=\"always\"\n\t\t\t\t\t\t    // width=\"640\" height=\"390\"><\/object>\n\n\t\t\t\t\t\t    item = UIOutput.make(tableRow, \"youtubeIFrame\");\n\t\t\t\t\t\t    // youtube seems ok with length and width\n\t\t\t\t\t\t    if(lengthOk(height)) {\n\t\t\t\t\t\t\t    item.decorate(new UIFreeAttributeDecorator(\"height\", height.getOld()));\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t\n\t\t\t\t\t\t    if(lengthOk(width)) {\n\t\t\t\t\t\t\t    item.decorate(new UIFreeAttributeDecorator(\"width\", width.getOld()));\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t\n\t\t\t\t\t\t    item.decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.youtube_player\")));\n\t\t\t\t\t\t    item.decorate(new UIFreeAttributeDecorator(\"src\", youtubeUrl));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t    UIComponent notAvailableText = UIOutput.make(tableRow, \"notAvailableText\", messageLocator.getMessage(\"simplepage.multimediaItemUnavailable\"));\n\t\t\t\t\t\t    // Grey it out\n\t\t\t\t\t\t    notAvailableText.decorate(new UIFreeAttributeDecorator(\"class\", \"disabled-text-item\"));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"youtubeId\", String.valueOf(i.getId()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"currentYoutubeURL\", youtubeUrl);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"currentYoutubeHeight\", getOrig(height));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"currentYoutubeWidth\", getOrig(width));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"current-item-id5\", Long.toString(i.getId()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-prereq4\", String.valueOf(i.isPrerequisite()));\n\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"youtube-td\");\n\t\t\t\t\t\t\tUILink.make(tableRow, \"youtube-edit\", messageLocator.getMessage(\"simplepage.editItem\"), \"\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.youtube\")));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tUIOutput.make(tableRow, \"description4\", i.getDescription());\n\t\t\t\t\t\t\n\t\t\t\t\t\t// as of Oct 28, 2010, we store the mime type. mimeType\n\t\t\t\t\t\t// null is an old entry.\n\t\t\t\t\t\t// For that use the old approach of checking the\n\t\t\t\t\t\t// extension.\n\t\t\t\t\t\t// Otherwise we want to use iframes for HTML and OBJECT\n\t\t\t\t\t\t// for everything else\n\t\t\t\t\t\t// We need the iframes because IE up through 8 doesn't\n\t\t\t\t\t\t// reliably display\n\t\t\t\t\t\t// HTML with OBJECT. Experiments show that everything\n\t\t\t\t\t\t// else works with OBJECT\n\t\t\t\t\t\t// for most browsers. Unfortunately IE, even IE 9,\n\t\t\t\t\t\t// doesn't reliably call the\n\t\t\t\t\t\t// right player with OBJECT. EMBED works. But it's not\n\t\t\t\t\t\t// as nice because you can't\n\t\t\t\t\t\t// nest error recovery code. So we use OBJECT for\n\t\t\t\t\t\t// everything except IE, where we\n\t\t\t\t\t\t// use EMBED. OBJECT does work with Flash.\n\t\t\t\t\t\t// application/xhtml+xml is XHTML.\n\n\t\t\t\t\t} else if (mmDisplayType == null && \n\t\t\t\t\t\t   ((mimeType != null && !mimeType.equals(\"text/html\") && !mimeType.equals(\"application/xhtml+xml\")) ||\n\t\t\t\t\t\t    // ((mimeType != null && (mimeType.startsWith(\"audio/\") || mimeType.startsWith(\"video/\"))) || \n\t\t\t\t\t\t    (mimeType == null && !(Arrays.binarySearch(htmlTypes, extension) >= 0)))) {\n\n                        // except where explicit display is set,\n\t\t\t// this code is used for everything that isn't an image,\n                        // Youtube, or HTML\n\t\t\t// This could be audio, video, flash, or something random like MS word.\n                        // Random stuff will turn into an object.\n                        // HTML is done with an IFRAME in the next \"if\" case\n\t\t        // The explicit display types are handled there as well\n\n\t\t\t\t\t    // in theory the things that fall through to iframe are\n\t\t\t\t\t    // html and random stuff without a defined mime type\n\t\t\t\t\t    // random stuff with mime type is displayed with object\n\n\t\t\t\t\t\tif (mimeType == null) {\n\t\t\t\t\t\t    mimeType = \"\";\n                        }\n\n                        String oMimeType = mimeType; // in case we change it for\n                        // FLV or others\n\n                        if (itemGroupString != null) {\n                            UIOutput.make(tableRow, \"item-group-titles5\", itemGroupTitles);\n                            UIOutput.make(tableRow, \"item-groups5\", itemGroupString);\n                        }\n\n\t\t\tUIOutput.make(tableRow, \"movieSpan\");\n\n                        if(canSeeAll || simplePageBean.isItemAvailable(i)) {\n\n\t\t\t\t\t\t    UIComponent item2;\n\n                            String movieUrl = i.getItemURL(simplePageBean.getCurrentSiteId(),currentPage.getOwner());\n                            // movieUrl = \"https://heidelberg.rutgers.edu\" + movieUrl;\n                            // Safari doens't always pass cookies to plugins, so we have to pass the arg\n                            // this requires session.parameter.allow=true in sakai.properties\n                            // don't pass the arg unless that is set, since the whole point of defaulting\n                            // off is to not expose the session id\n                            String sessionParameter = getSessionParameter(movieUrl);\n                            if (sessionParameter != null)\n                                movieUrl = movieUrl + \"?lb.session=\" + sessionParameter;\n\n\t\t\t    UIComponent movieLink = UIOutput.make(tableRow, \"movie-link-div\");\n\t\t\t    if (showDownloads)\n\t\t\t\tUILink.make(tableRow, \"movie-link-link\", messageLocator.getMessage(\"simplepage.download_file\"), movieUrl);\n\n                            //\tif (allowSessionId)\n                            //  movieUrl = movieUrl + \"?sakai.session=\" + SessionManager.getCurrentSession().getId();\n                            boolean useFlvPlayer = false;\n\n                            // isMp4 means we try the flash player (if not HTML5)\n                            // we also try the flash player for FLV but for mp4 we do an\n                            // additional backup if flash fails, but that doesn't make sense for FLV\n                            boolean isMp4 = Arrays.binarySearch(mp4Types, mimeType) >= 0;\n                            boolean isHtml5 = Arrays.binarySearch(html5Types, mimeType) >= 0;\n                            \n                            // wrap whatever stuff we decide to put out in HTML5 if appropriate\n                            // javascript is used to do the wrapping, because RSF can't really handle this\n                            if (isHtml5) {\n\t\t\t\t// flag for javascript\n                                boolean isAudio = mimeType.startsWith(\"audio/\");\n                                UIComponent h5video = UIOutput.make(tableRow, (isAudio? \"h5audio\" : \"h5video\"));\n                                UIComponent h5source = UIOutput.make(tableRow, (isAudio? \"h5asource\" : \"h5source\"));\n                                if (lengthOk(height) && height.getOld().indexOf(\"%\") < 0)\n                                h5video.decorate(new UIFreeAttributeDecorator(\"height\", height.getOld()));\n                                if (lengthOk(width) && width.getOld().indexOf(\"%\") < 0)\n                                h5video.decorate(new UIFreeAttributeDecorator(\"width\", width.getOld()));\n                                h5source.decorate(new UIFreeAttributeDecorator(\"src\", movieUrl)).\n                                decorate(new UIFreeAttributeDecorator(\"type\", mimeType));\n\t\t\t\tString caption = i.getAttribute(\"captionfile\");\n\t\t\t\tif (!isAudio && caption != null && caption.length() > 0) {\n\t\t\t\t    movieLink.decorate(new UIFreeAttributeDecorator(\"class\", \"has-caption allow-caption\"));\n\t\t\t\t    String captionUrl = \"/access/lessonbuilder/item/\" + i.getId() + caption;\n\t\t\t\t    sessionParameter = getSessionParameter(captionUrl);\n\t\t\t\t    // sessionParameter should always be non-null\n\t\t\t\t    // because this overrides all other checks in /access/lessonbuilder,\n\t\t\t\t    // we haven't adjusted it to handle these files otherwise\n\t\t\t\t    if (sessionParameter != null)\n\t\t\t\t\tcaptionUrl = captionUrl + \"?lb.session=\" + sessionParameter;\n\t\t\t\t    UIOutput.make(tableRow, \"h5track\").\n\t\t\t\t\tdecorate(new UIFreeAttributeDecorator(\"src\", captionUrl));\n\t\t\t\t} else if (!isAudio) {\n\t\t\t\t    movieLink.decorate(new UIFreeAttributeDecorator(\"class\", \"allow-caption\"));\n\t\t\t\t}\n                            }\n\n                            // FLV is special. There's no player for flash video in\n                            // the browser\n                            // it shows with a special flash program, which I\n                            // supply. For the moment MP4 is\n                            // shown with the same player so it uses much of the\n                            // same code\n                            if (mimeType != null && (mimeType.equals(\"video/x-flv\") || mimeType.equals(\"video/flv\") || isMp4)) {\n                                mimeType = \"application/x-shockwave-flash\";\n                                movieUrl = \"/lessonbuilder-tool/templates/StrobeMediaPlayback.swf\";\n                                useFlvPlayer = true;\n                            }\n                            // for IE, if we're not supplying a player it's safest\n                            // to use embed\n                            // otherwise Quicktime won't work. Oddly, with IE 9 only\n                            // it works if you set CLASSID to the MIME type,\n                            // but that's so unexpected that I hate to rely on it.\n                            // EMBED is in HTML 5, so I think we're OK\n                            // using it permanently for IE.\n                            // I prefer OBJECT where possible because of the nesting\n                            // ability.\n                            boolean useEmbed = ieVersion > 0 && !mimeType.equals(\"application/x-shockwave-flash\");\n\n                            if (useEmbed) {\n                                item2 = UIOutput.make(tableRow, \"movieEmbed\").decorate(new UIFreeAttributeDecorator(\"src\", movieUrl)).decorate(new UIFreeAttributeDecorator(\"alt\", messageLocator.getMessage(\"simplepage.mm_player\").replace(\"{}\", abbrevUrl(i.getURL()))));\n                            } else {\n                                item2 = UIOutput.make(tableRow, \"movieObject\").decorate(new UIFreeAttributeDecorator(\"data\", movieUrl)).decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.mm_player\").replace(\"{}\", abbrevUrl(i.getURL()))));\n                            }\n                            if (mimeType != null) {\n                                item2.decorate(new UIFreeAttributeDecorator(\"type\", mimeType));\n                            }\n                            if (canEditPage) {\n                                //item2.decorate(new UIFreeAttributeDecorator(\"style\", \"border: 1px solid black\"));\n                            }\n\n                            // some object types seem to need a specification, so supply our default if necessary\n                            if (lengthOk(height) && lengthOk(width)) {\n                                item2.decorate(new UIFreeAttributeDecorator(\"height\", height.getOld())).decorate(new UIFreeAttributeDecorator(\"width\", width.getOld()));\n                            } else {\n                                if (oMimeType.startsWith(\"audio/\"))\n                                item2.decorate(new UIFreeAttributeDecorator(\"height\", \"100\")).decorate(new UIFreeAttributeDecorator(\"width\", \"400\"));\n                                else\n                                item2.decorate(new UIFreeAttributeDecorator(\"height\", \"300\")).decorate(new UIFreeAttributeDecorator(\"width\", \"400\"));\n                            }\n                            if (!useEmbed) {\n                                if (useFlvPlayer) {\n                                    UIOutput.make(tableRow, \"flashvars\").decorate(new UIFreeAttributeDecorator(\"value\", \"src=\" + URLEncoder.encode(myUrl() + i.getItemURL(simplePageBean.getCurrentSiteId(),currentPage.getOwner()))));\n                                    // need wmode=opaque for player to stack properly with dialogs, etc.\n                                    // there is a performance impact, but I'm guessing in our application we don't \n                                    // need ultimate performance for embedded video. I'm setting it only for\n                                    // the player, so flash games and other applications will still get wmode=window\n                                    UIOutput.make(tableRow, \"wmode\");\n                                } else if (mimeType.equals(\"application/x-shockwave-flash\"))\n                                    UIOutput.make(tableRow, \"wmode\");\n\n                                UIOutput.make(tableRow, \"movieURLInject\").decorate(new UIFreeAttributeDecorator(\"value\", movieUrl));\n                                if (!isMp4 && showDownloads) {\n                                    UIOutput.make(tableRow, \"noplugin-p\", messageLocator.getMessage(\"simplepage.noplugin\"));\n                                    UIOutput.make(tableRow, \"noplugin-br\");\n                                    UILink.make(tableRow, \"noplugin\", i.getName(), movieUrl);\n                                }\n                            }\n\n                            if (isMp4) {\n                                // do fallback. for ie use EMBED\n                                if (ieVersion > 0) {\n                                    item2 = UIOutput.make(tableRow, \"mp4-embed\").decorate(new UIFreeAttributeDecorator(\"src\", i.getItemURL(simplePageBean.getCurrentSiteId(),currentPage.getOwner()))).decorate(new UIFreeAttributeDecorator(\"alt\", messageLocator.getMessage(\"simplepage.mm_player\").replace(\"{}\", abbrevUrl(i.getURL()))));\n                                } else {\n                                    item2 = UIOutput.make(tableRow, \"mp4-object\").decorate(new UIFreeAttributeDecorator(\"data\", i.getItemURL(simplePageBean.getCurrentSiteId(),currentPage.getOwner()))).decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.mm_player\").replace(\"{}\", abbrevUrl(i.getURL()))));\n                            }\n                                if (oMimeType != null) {\n                                    item2.decorate(new UIFreeAttributeDecorator(\"type\", oMimeType));\n                                }\n\n                                // some object types seem to need a specification, so give a default if needed\n                                if (lengthOk(height) && lengthOk(width)) {\n                                    item2.decorate(new UIFreeAttributeDecorator(\"height\", height.getOld())).decorate(new UIFreeAttributeDecorator(\"width\", width.getOld()));\n                                } else {\n                                    if (oMimeType.startsWith(\"audio/\"))\n                                    item2.decorate(new UIFreeAttributeDecorator(\"height\", \"100\")).decorate(new UIFreeAttributeDecorator(\"width\", \"100%\"));\n                                    else\n                                    item2.decorate(new UIFreeAttributeDecorator(\"height\", \"300\")).decorate(new UIFreeAttributeDecorator(\"width\", \"100%\"));\n                                }\n\n                                if (!useEmbed) {\n                                    UIOutput.make(tableRow, \"mp4-inject\").decorate(new UIFreeAttributeDecorator(\"value\", i.getItemURL(simplePageBean.getCurrentSiteId(),currentPage.getOwner())));\n\n\t\t\t\t    if (showDownloads) {\n\t\t\t\t\tUIOutput.make(tableRow, \"mp4-noplugin-p\", messageLocator.getMessage(\"simplepage.noplugin\"));\n\t\t\t\t\tUILink.make(tableRow, \"mp4-noplugin\", i.getName(), i.getItemURL(simplePageBean.getCurrentSiteId(),currentPage.getOwner()));\n\t\t\t\t    }\n                                }\n                            }\n\t\t\t    UIOutput.make(tableRow, \"description3\", i.getDescription());\n                        } else {\n\t\t\t\t\t        UIVerbatim notAvailableText = UIVerbatim.make(tableRow, \"notAvailableText\", messageLocator.getMessage(\"simplepage.multimediaItemUnavailable\"));\n                            // Grey it out\n\t\t\t\t\t\t    notAvailableText.decorate(new UIFreeAttributeDecorator(\"class\", \"disabled-multimedia-item\"));\n                        }\n\n\t\t\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"movieId\", String.valueOf(i.getId()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"movieHeight\", getOrig(height));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"movieWidth\", getOrig(width));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"mimetype5\", oMimeType);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"prerequisite\", (i.isPrerequisite()) ? \"true\" : \"false\");\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"current-item-id6\", Long.toString(i.getId()));\n\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"movie-td\");\n\t\t\t\t\t\t\tUILink.make(tableRow, \"edit-movie\", messageLocator.getMessage(\"simplepage.editItem\"), \"\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.url\").replace(\"{}\", abbrevUrl(i.getURL()))));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t    // this is fallthrough for html or an explicit mm display type (i.e. embed code)\n\t\t\t\t\t    // odd types such as MS word will be handled by the AV code, and presented as <OBJECT>\n\n\t\t\t\t\t    if(canSeeAll || simplePageBean.isItemAvailable(i)) {\n\t\t\t\t\t\t    \n\n\t\t\t\t\t\t// definition of resizeiframe, at top of page\n\t\t\t\t\t\tif (!iframeJavascriptDone && getOrig(height).equals(\"auto\")) {\n\t\t\t\t\t\t\tUIOutput.make(tofill, \"iframeJavascript\");\n\t\t\t\t\t\t\tiframeJavascriptDone = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tUIOutput.make(tableRow, \"iframeSpan\");\n\n\t\t\t\t\t\tif (itemGroupString != null) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-group-titles2\", itemGroupTitles);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-groups2\", itemGroupString);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tString itemUrl = i.getItemURL(simplePageBean.getCurrentSiteId(),currentPage.getOwner());\n\t\t\t\t\t\tif (\"1\".equals(mmDisplayType)) {\n\t\t\t\t\t\t    // embed\n\t\t\t\t\t\t    item = UIVerbatim.make(tableRow, \"mm-embed\", i.getAttribute(\"multimediaEmbedCode\"));\n\t\t\t\t\t\t    //String style = getStyle(width, height);\n\t\t\t\t\t\t    //if (style != null)\n\t\t\t\t\t\t    //item.decorate(new UIFreeAttributeDecorator(\"style\", style));\n\t\t\t\t\t\t} else if (\"3\".equals(mmDisplayType)) {\n\t\t\t\t\t\t    item = UILink.make(tableRow, \"mm-oembed\", i.getAttribute(\"multimediaUrl\"), i.getAttribute(\"multimediaUrl\"));\n\t\t\t\t\t\t    if (lengthOk(width))\n\t\t\t\t\t\t\titem.decorate(new UIFreeAttributeDecorator(\"maxWidth\", width.getOld()));\n\t\t\t\t\t\t    if (lengthOk(height))\n\t\t\t\t\t\t\titem.decorate(new UIFreeAttributeDecorator(\"maxHeight\", height.getOld()));\n\t\t\t\t\t\t    // oembed\n\t\t\t\t\t\t} else  {\n\t\t\t\t\t\t    UIOutput.make(tableRow, \"iframe-link-div\");\n\t\t\t\t\t\t    UILink.make(tableRow, \"iframe-link-link\", messageLocator.getMessage(\"simplepage.open_new_window\"), itemUrl);\n\t\t\t\t\t\t    item = UIOutput.make(tableRow, \"iframe\").decorate(new UIFreeAttributeDecorator(\"src\", itemUrl));\n\t\t\t\t\t\t    // if user specifies auto, use Javascript to resize the\n\t\t\t\t\t\t    // iframe when the\n\t\t\t\t\t\t    // content changes. This only works for URLs with the\n\t\t\t\t\t\t    // same origin, i.e.\n\t\t\t\t\t\t    // URLs in this sakai system\n\t\t\t\t\t\t    if (getOrig(height).equals(\"auto\")) {\n\t\t\t\t\t\t\titem.decorate(new UIFreeAttributeDecorator(\"onload\", \"resizeiframe('\" + item.getFullID() + \"')\"));\n\t\t\t\t\t\t\tif (lengthOk(width)) {\n\t\t\t\t\t\t\t    item.decorate(new UIFreeAttributeDecorator(\"width\", width.getOld()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\titem.decorate(new UIFreeAttributeDecorator(\"height\", \"300\"));\n\t\t\t\t\t\t    } else {\n\t\t\t\t\t\t\t// we seem OK without a spec\n\t\t\t\t\t\t\tif (lengthOk(height) && lengthOk(width)) {\n\t\t\t\t\t\t\t\titem.decorate(new UIFreeAttributeDecorator(\"height\", height.getOld())).decorate(new UIFreeAttributeDecorator(\"width\", width.getOld()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\t\t\t\t\t\titem.decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.web_content\").replace(\"{}\", abbrevUrl(i.getURL()))));\n\n\t\t\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"iframeHeight\", getOrig(height));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"iframeWidth\", getOrig(width));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"mimetype3\", mimeType);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-prereq2\", String.valueOf(i.isPrerequisite()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"embedtype\", mmDisplayType);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"current-item-id3\", Long.toString(i.getId()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"editmm-td\");\n\t\t\t\t\t\t\tUILink.make(tableRow, \"iframe-edit\", messageLocator.getMessage(\"simplepage.editItem\"), \"\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.url\").replace(\"{}\", abbrevUrl(i.getURL()))));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tUIOutput.make(tableRow, \"description5\", i.getDescription());\n\t\t\t\t\t    } else {\n\n\t\t\t\t\t        UIVerbatim notAvailableText = UIVerbatim.make(tableRow, \"notAvailableText\", messageLocator.getMessage(\"simplepage.multimediaItemUnavailable\"));\n                            // Grey it out\n\t\t\t\t\t\tnotAvailableText.decorate(new UIFreeAttributeDecorator(\"class\", \"disabled-multimedia-item\"));\n\t\t\t\t\t    }\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// end of multimedia object\n\n\t\t\t\t} else if (i.getType() == SimplePageItem.COMMENTS) {\n\t\t\t\t\t// Load later using AJAX and CommentsProducer\n\n\t\t\t\t\tUIOutput.make(tableRow, \"commentsSpan\");\n\n\t\t\t\t\tboolean isAvailable = simplePageBean.isItemAvailable(i);\n\t\t\t\t\t// faculty missing preqs get warning but still see the comments\n\t\t\t\t\tif (!isAvailable && canSeeAll)\n\t\t\t\t\t    UIOutput.make(tableRow, \"missing-prereqs\", messageLocator.getMessage(\"simplepage.fake-missing-prereqs\"));\n\n\t\t\t\t\t// students get warning and not the content\n\t\t\t\t\tif (!isAvailable && !canSeeAll) {\n\t\t\t\t\t    UIOutput.make(tableRow, \"missing-prereqs\", messageLocator.getMessage(\"simplepage.missing-prereqs\"));\n\t\t\t\t\t}else {\n\t\t\t\t\t\tUIOutput.make(tableRow, \"commentsDiv\");\n\t\t\t\t\t\tUIOutput.make(tableRow, \"placementId\", placement.getId());\n\n\t\t\t\t\t        // note: the URL will be rewritten in comments.js to look like\n\t\t\t\t\t        //  /lessonbuilder-tool/faces/Comments...\n\t\t\t\t\t\tCommentsViewParameters eParams = new CommentsViewParameters(CommentsProducer.VIEW_ID);\n\t\t\t\t\t\teParams.itemId = i.getId();\n\t\t\t\t\t\teParams.placementId = placement.getId();\n\t\t\t\t\t\tif (params.postedComment) {\n\t\t\t\t\t\t\teParams.postedComment = postedCommentId;\n\t\t\t\t\t\t}\n\t\t\t\t\t\teParams.siteId = simplePageBean.getCurrentSiteId();\n\t\t\t\t\t\teParams.pageId = currentPage.getPageId();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(params.author != null && !params.author.equals(\"\")) {\n\t\t\t\t\t\t\teParams.author = params.author;\n\t\t\t\t\t\t\teParams.showAllComments = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tUIInternalLink.make(tableRow, \"commentsLink\", eParams);\n\n\t\t\t\t\t\tif (!addedCommentsScript) {\n\t\t\t\t\t\t\tUIOutput.make(tofill, \"comments-script\");\n\t\t\t\t\t\t\tUIOutput.make(tofill, \"fckScript\");\n\t\t\t\t\t\t\taddedCommentsScript = true;\n\t\t\t\t\t\t\tUIOutput.make(tofill, \"delete-dialog\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// forced comments have to be edited on the main page\n\t\t\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\t\t// Checks to make sure that the comments item isn't on a student page.\n\t\t\t\t\t\t\t// That it is graded.  And that we didn't just come from the grading pane.\n\t\t\t\t\t\t\tif(i.getPageId() > 0 && i.getGradebookId() != null && !cameFromGradingPane) {\n\t\t\t\t\t\t\t\tCommentsGradingPaneViewParameters gp = new CommentsGradingPaneViewParameters(CommentGradingPaneProducer.VIEW_ID);\n\t\t\t\t\t\t\t\tgp.placementId = toolManager.getCurrentPlacement().getId();\n\t\t\t\t\t\t\t\tgp.commentsItemId = i.getId();\n\t\t\t\t\t\t\t\tgp.pageId = currentPage.getPageId();\n\t\t\t\t\t\t\t\tgp.pageItemId = pageItem.getId();\n\t\t\t\t\t\t\t\tgp.siteId = simplePageBean.getCurrentSiteId();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tUIInternalLink.make(tableRow, \"gradingPaneLink\", messageLocator.getMessage(\"simplepage.show-grading-pane-comments\"), gp)\n\t\t\t\t\t\t\t\t    .decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.show-grading-pane-comments\")));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"comments-td\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (i.getSequence() > 0) {\n\t\t\t\t\t\t\t    UILink.make(tableRow, \"edit-comments\", messageLocator.getMessage(\"simplepage.editItem\"), \"\")\n\t\t\t\t\t\t\t\t\t.decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.comments\")));\n\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"commentsId\", String.valueOf(i.getId()));\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"commentsAnon\", String.valueOf(i.isAnonymous()));\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"commentsitem-required\", String.valueOf(i.isRequired()));\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"commentsitem-prerequisite\", String.valueOf(i.isPrerequisite()));\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"commentsGrade\", String.valueOf(i.getGradebookId() != null));\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"commentsMaxPoints\", String.valueOf(i.getGradebookPoints()));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t    String itemGroupString = simplePageBean.getItemGroupString(i, null, true);\n\t\t\t\t\t\t\t    if (itemGroupString != null) {\n\t\t\t\t\t\t\t    \tString itemGroupTitles = simplePageBean.getItemGroupTitles(itemGroupString, i);\n\t\t\t\t\t\t\t    \tif (itemGroupTitles != null) {\n\t\t\t\t\t\t\t    \t\titemGroupTitles = \"[\" + itemGroupTitles + \"]\";\n\t\t\t\t\t\t\t    \t}\n\t\t\t\t\t\t\t    \tUIOutput.make(tableRow, \"comments-groups\", itemGroupString);\n\t\t\t\t\t\t\t    \tUIOutput.make(tableRow, \"item-group-titles6\", itemGroupTitles);\n\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t    \t\n\t\t\t\t\t\t\t// Allows AJAX posting of comment grades\n\t\t\t\t\t    \tprintGradingForm(tofill);\n\t\t\t\t\t    }\n\n\t\t\t\t\t    UIForm form = UIForm.make(tableRow, \"comment-form\");\n\t\t\t\t\t    makeCsrf(form, \"csrf2\");\n\n\t\t\t\t\t    UIInput.make(form, \"comment-item-id\", \"#{simplePageBean.itemId}\", String.valueOf(i.getId()));\n\t\t\t\t\t    UIInput.make(form, \"comment-edit-id\", \"#{simplePageBean.editId}\");\n\n\t\t\t\t\t    // usage * image is required and not done\n\t\t\t\t\t    if (i.isRequired() && !simplePageBean.isItemComplete(i))\n\t\t\t\t\t\tUIOutput.make(tableRow, \"comment-required-image\");\n\n\t\t\t\t\t    UIOutput.make(tableRow, \"add-comment-link\");\n\t\t\t\t\t    UIOutput.make(tableRow, \"add-comment-text\", messageLocator.getMessage(\"simplepage.add-comment\"));\n\t\t\t\t\t    UIInput fckInput = UIInput.make(form, \"comment-text-area-evolved:\", \"#{simplePageBean.formattedComment}\");\n\t\t\t\t\t    fckInput.decorate(new UIFreeAttributeDecorator(\"height\", \"175\"));\n\t\t\t\t\t    fckInput.decorate(new UIFreeAttributeDecorator(\"width\", \"800\"));\n\t\t\t\t\t    fckInput.decorate(new UIStyleDecorator(\"evolved-box\"));\n\t\t\t\t\t    fckInput.decorate(new UIFreeAttributeDecorator(\"aria-label\", messageLocator.getMessage(\"simplepage.editor\")));\n\t\t\t\t\t    fckInput.decorate(new UIFreeAttributeDecorator(\"role\", \"dialog\"));\n\n\t\t\t\t\t    if (!noEditor) {\n\t\t\t\t\t\tfckInput.decorate(new UIStyleDecorator(\"using-editor\"));  // javascript needs to know\n\t\t\t\t\t\t((SakaiFCKTextEvolver) richTextEvolver).evolveTextInput(fckInput, \"\" + commentsCount);\n\t\t\t\t\t    }\n\t\t\t\t\t    UICommand.make(form, \"add-comment\", \"#{simplePageBean.addComment}\");\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t}else if (i.getType() == SimplePageItem.PEEREVAL){\n\t\t\t\t\t\n\t\t\t\t\tString owner=currentPage.getOwner();\n\t\t\t\t\tString currentUser=UserDirectoryService.getCurrentUser().getId();\n\t\t\t\t\tLong pageId=currentPage.getPageId();\n\t\t\t\t\t\n\t\t\t\t\tUIOutput.make(tableRow, \"peerReviewRubricStudent\");\n\t\t\t\t\tUIOutput.make(tableRow, \"peer-review-form\");\n\n\t\t\t\t\tmakePeerRubric(tableRow,i, makeStudentRubric);\n\t\t\t\t\t\n\t\t\t\t\tboolean isOpen = false;\n\t\t\t\t\tboolean isPastDue = false;\n\t\t\t\t\t\n\t\t\t\t\tString peerEvalDateOpenStr = i.getAttribute(\"rubricOpenDate\");\n\t\t\t\t\tString peerEvalDateDueStr  = i.getAttribute(\"rubricDueDate\");\n\t\t\t\t\tboolean peerEvalAllowSelfGrade = Boolean.parseBoolean(i.getAttribute(\"rubricAllowSelfGrade\"));\n\t\t\t\t\tboolean gradingSelf = owner.equals(currentUser) && peerEvalAllowSelfGrade;\n\t\t\t\t\n\t\t\t\t\tif (peerEvalDateOpenStr != null && peerEvalDateDueStr != null) {\n\t\t\t\t\t\tDate peerEvalNow = new Date();\n\t\t\t\t\t\tDate peerEvalOpen = new Date(Long.valueOf(peerEvalDateOpenStr));\n\t\t\t\t\t\tDate peerEvalDue = new Date(Long.valueOf(peerEvalDateDueStr));\n\t\t\t\t\t\t\n\t\t\t\t\t\tisOpen = peerEvalNow.after(peerEvalOpen);\n\t\t\t\t\t\tisPastDue = peerEvalNow.after(peerEvalDue);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(isOpen){\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(owner.equals(currentUser)){ //owner gets their own data\n\t\t\t\t\t\t\tclass PeerEvaluation{\n\t\t\t\t\t\t\t\tString category;\n\t\t\t\t\t\t\t\tpublic int grade, count;\n\t\t\t\t\t\t\t\tpublic PeerEvaluation(String category, int grade){this.category=category;this.grade=grade;count=1;}\n\t\t\t\t\t\t\t\tpublic void increment(){count++;}\n\t\t\t\t\t\t\t\tpublic boolean equals(Object o){\n\t\t\t\t\t\t\t\t\tif ( !(o instanceof PeerEvaluation) ) return false;\n\t\t\t\t\t\t\t\t\tPeerEvaluation pe = (PeerEvaluation)o;\n\t\t\t\t\t\t\t\t\treturn category.equals(pe.category) && grade==pe.grade;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpublic String toString(){return category + \" \" + grade + \" [\" + count + \"]\";}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tArrayList<PeerEvaluation> myEvaluations = new ArrayList<PeerEvaluation>(); \n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tList<SimplePagePeerEvalResult> evaluations = simplePageToolDao.findPeerEvalResultByOwner(pageId.longValue(), owner);\n\t\t\t\t\t\t\tif(evaluations!=null)\n\t\t\t\t\t\t\t\tfor(SimplePagePeerEvalResult eval : evaluations){\n\t\t\t\t\t\t\t\t\tPeerEvaluation target=new PeerEvaluation(eval.getRowText(), eval.getColumnValue());\n\t\t\t\t\t\t\t\t\tint targetIndex=myEvaluations.indexOf(target);\n\t\t\t\t\t\t\t\t\tif(targetIndex!=-1){\n\t\t\t\t\t\t\t\t\t\tmyEvaluations.get(targetIndex).increment();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tmyEvaluations.add(target);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"my-existing-peer-eval-data\");\n\t\t\t\t\t\t\tfor(PeerEvaluation eval: myEvaluations){\n\t\t\t\t\t\t\t\tUIBranchContainer evalData = UIBranchContainer.make(tableRow, \"my-peer-eval-data:\");\n\t\t\t\t\t\t\t\tUIOutput.make(evalData, \"peer-eval-row-text\", eval.category);\n\t\t\t\t\t\t\t\tUIOutput.make(evalData, \"peer-eval-grade\", String.valueOf(eval.grade));\n\t\t\t\t\t\t\t\tUIOutput.make(evalData, \"peer-eval-count\", String.valueOf(eval.count));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!owner.equals(currentUser) || gradingSelf){\n\t\t\t\t\t\t\tList<SimplePagePeerEvalResult> evaluations = simplePageToolDao.findPeerEvalResult(pageId, currentUser, owner);\n\t\t\t\t\t\t\t//existing evaluation data\n\t\t\t\t\t\t\tif(evaluations!=null && evaluations.size()!=0){\t\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"existing-peer-eval-data\");\n\t\t\t\t\t\t\t\tfor(SimplePagePeerEvalResult eval : evaluations){\n\t\t\t\t\t\t\t\t\tUIBranchContainer evalData = UIBranchContainer.make(tableRow, \"peer-eval-data:\");\n\t\t\t\t\t\t\t\t\tUIOutput.make(evalData, \"peer-eval-row-text\", eval.getRowText());\n\t\t\t\t\t\t\t\t\tUIOutput.make(evalData, \"peer-eval-grade\", String.valueOf(eval.getColumnValue()));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//form for peer evaluation results\n\t\t\t\t\t\t\tUIForm form = UIForm.make(tofill, \"rubricSelection\");\n\t\t\t\t\t\t\tmakeCsrf(form, \"csrf6\");\n\n\t\t\t\t\t\t\tUIInput.make(form, \"rubricPeerGrade\", \"#{simplePageBean.rubricPeerGrade}\");\n\t\t\t\t\t\t\tUICommand.make(form, \"update-peer-eval-grade\", messageLocator.getMessage(\"simplepage.edit\"), \"#{simplePageBean.savePeerEvalResult}\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//buttons\n\t\t\t\t\t\tUIOutput.make(tableRow, \"add-peereval-link\");\n\t\t\t\t\t\tUIOutput.make(tableRow, \"add-peereval-text\", messageLocator.getMessage(\"simplepage.view-peereval\"));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(isPastDue){\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-grade-directions\", messageLocator.getMessage(\"simplepage.peer-eval.past-due-date\"));\n\t\t\t\t\t\t}else if(!owner.equals(currentUser) || gradingSelf){\t\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"save-peereval-link\");\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"save-peereval-text\", messageLocator.getMessage(\"simplepage.save\"));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"cancel-peereval-link\");\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"cancel-peereval-text\", messageLocator.getMessage(\"simplepage.cancel\"));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-grade-directions\", messageLocator.getMessage(\"simplepage.peer-eval.click-on-cell\"));\n\t\t\t\t\t\t}else{ //owner who cannot grade himself\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-grade-directions\", messageLocator.getMessage(\"simplepage.peer-eval.cant-eval-yourself\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(canEditPage)\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peerReviewRubricStudent-edit\");//lines up rubric with edit btn column for users with editing privs\n\t\t\t\t\t}\n\t\t\t\t}else if(i.getType() == SimplePageItem.STUDENT_CONTENT) {\n\t\t\t\t\t\n\t\t\t\t\tUIOutput.make(tableRow, \"studentSpan\");\n\n\t\t\t\t\tboolean isAvailable = simplePageBean.isItemAvailable(i);\n\t\t\t\t\t// faculty missing preqs get warning but still see the comments\n\t\t\t\t\tif (!isAvailable && canSeeAll)\n\t\t\t\t\t    UIOutput.make(tableRow, \"student-missing-prereqs\", messageLocator.getMessage(\"simplepage.student-fake-missing-prereqs\"));\n\t\t\t\t\tif (!isAvailable && !canSeeAll)\n\t\t\t\t\t    UIOutput.make(tableRow, \"student-missing-prereqs\", messageLocator.getMessage(\"simplepage.student-missing-prereqs\"));\n\t\t\t\t\telse {\n\t\t\t\t\t\tUIOutput.make(tableRow, \"studentDiv\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tHashMap<Long, SimplePageLogEntry> cache = simplePageBean.cacheStudentPageLogEntries(i.getId());\n\t\t\t\t\t\tList<SimpleStudentPage> studentPages = simplePageToolDao.findStudentPages(i.getId());\n\t\t\t\t\t\n\t\t\t\t\t\tboolean hasOwnPage = false;\n\t\t\t\t\t\tString userId = UserDirectoryService.getCurrentUser().getId();\n\t\t\t\t\t\t\n\t\t\t\t\t    Collections.sort(studentPages, new Comparator<SimpleStudentPage>() {\n\t\t\t\t\t\t    public int compare(SimpleStudentPage o1, SimpleStudentPage o2) {\n\t\t\t\t\t\t\tString title1 = o1.getTitle();\n\t\t\t\t\t\t\tif (title1 == null)\n\t\t\t\t\t\t\t    title1 = \"\";\n\t\t\t\t\t\t\tString title2 = o2.getTitle();\n\t\t\t\t\t\t\tif (title2 == null)\n\t\t\t\t\t\t\t    title2 = \"\";\n\t\t\t\t\t\t\treturn title1.compareTo(title2);\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t});\t\t\t\t\t    \n\n\t\t\t\t\t        UIOutput contentList = UIOutput.make(tableRow, \"studentContentTable\");\n\t\t\t\t\t        UIOutput contentTitle = UIOutput.make(tableRow, \"studentContentTitle\", messageLocator.getMessage(\"simplepage.student\"));\n\t\t\t\t\t\tcontentList.decorate(new UIFreeAttributeDecorator(\"aria-labelledby\", contentTitle.getFullID()));\n\n\t\t\t\t\t\t// Print each row in the table\n\t\t\t\t\t\tfor(SimpleStudentPage page : studentPages) {\n\t\t\t\t\t\t\tif(page.isDeleted()) continue;\n\n\t\t\t\t\t\t\tSimplePageLogEntry entry = cache.get(page.getPageId());\n\t\t\t\t\t\t\tUIBranchContainer row = UIBranchContainer.make(tableRow, \"studentRow:\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// There's content they haven't seen\n\t\t\t\t\t\t\tif(entry == null || entry.getLastViewed().compareTo(page.getLastUpdated()) < 0) {\n\t\t\t\t\t\t\t    UIOutput.make(row, \"newContentImg\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.new-student-content\")));\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t    UIOutput.make(row, \"newContentImgT\");\n \n\t\t\t\t\t\t\t// The comments tool exists, so we might have to show the icon\n\t\t\t\t\t\t\tif(i.getShowComments() != null && i.getShowComments()) {\n \t\t\t\t\t\t\n\t\t\t\t\t\t\t    // New comments have been added since they last viewed the page\n\t\t\t\t\t\t\t    if(page.getLastCommentChange() != null && (entry == null || entry.getLastViewed().compareTo(page.getLastCommentChange()) < 0)) {\n\t\t\t\t\t\t\t\tUIOutput.make(row, \"newCommentsImg\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.new-student-comments\")));\n\t\t\t\t\t\t\t    } else\n\t\t\t\t\t\t\t\tUIOutput.make(row, \"newCommentsImgT\");\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n \n\t\t\t\t\t\t\t// Never visited page\n\t\t\t\t\t\t\tif(entry == null) {\n\t\t\t\t\t\t\t    UIOutput.make(row, \"newPageImg\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.new-student-page\")));\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t    UIOutput.make(row, \"newPageImgT\");\n\n\t\t\t\t\t\t\tGeneralViewParameters eParams = new GeneralViewParameters(ShowPageProducer.VIEW_ID, page.getPageId());\n\t\t\t\t\t\t\teParams.setItemId(i.getId());\n\t\t\t\t\t\t\teParams.setPath(\"push\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tString studentTitle = page.getTitle();\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tString sownerName = null;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tif(!i.isAnonymous() || canEditPage) {\n\t\t\t\t\t\t\t\t\tif (page.getGroup() != null)\n\t\t\t\t\t\t\t\t\t    sownerName = simplePageBean.getCurrentSite().getGroup(page.getGroup()).getTitle();\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t    sownerName = UserDirectoryService.getUser(page.getOwner()).getDisplayName();\n\t\t\t\t\t\t\t\t\tif (sownerName != null && sownerName.equals(studentTitle))\n\t\t\t\t\t\t\t\t\t    studentTitle = \"(\" + sownerName + \")\";\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t    studentTitle += \" (\" + sownerName + \")\";\n\t\t\t\t\t\t\t\t}else if (simplePageBean.isPageOwner(page)) {\n\t\t\t\t\t\t\t\t\tstudentTitle += \" (\" + messageLocator.getMessage(\"simplepage.comment-you\") + \")\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (UserNotDefinedException e) {\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tUIInternalLink.make(row, \"studentLink\", studentTitle, eParams);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(simplePageBean.isPageOwner(page)) {\n\t\t\t\t\t\t\t\thasOwnPage = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(i.getGradebookId() != null && simplePageBean.getEditPrivs() == 0) {\n\t\t\t\t\t\t\t\tUIOutput.make(row, \"studentGradingCell\", String.valueOf((page.getPoints() != null? page.getPoints() : \"\")));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t    }\n\t\t\t\t\t\n\t\t\t\t\t\tif(!hasOwnPage && simplePageBean.myStudentPageGroupsOk(i)) {\n\t\t\t\t\t\t\tUIBranchContainer row = UIBranchContainer.make(tableRow, \"studentRow:\");\n\t\t\t\t\t\t\tUIOutput.make(row, \"linkRow\");\n\t\t\t\t\t\t\tUIOutput.make(row, \"linkCell\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (i.isRequired() && !simplePageBean.isItemComplete(i))\n\t\t\t\t\t\t\t\tUIOutput.make(row, \"student-required-image\");\n\t\t\t\t\t\t\tGeneralViewParameters eParams = new GeneralViewParameters(ShowPageProducer.VIEW_ID);\n\t\t\t\t\t\t\teParams.addTool = GeneralViewParameters.STUDENT_PAGE;\n\t\t\t\t\t\t\teParams.studentItemId = i.getId();\n\t\t\t\t\t\t\tUIInternalLink.make(row, \"linkLink\", messageLocator.getMessage(\"simplepage.add-page\"), eParams);\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\tString itemGroupString = null;\n\t\t\t\t\t\t// do before canEditAll because we need itemGroupString in it\n\t\t\t\t\t\tif (canSeeAll) {\n\t\t\t\t\t\t    itemGroupString = simplePageBean.getItemGroupString(i, null, true);\n\t\t\t\t\t\t    if (itemGroupString != null) {\n\t\t\t\t\t\t\tString itemGroupTitles = simplePageBean.getItemGroupTitles(itemGroupString, i);\n\t\t\t\t\t\t\tif (itemGroupTitles != null) {\n\t\t\t\t\t\t\t    itemGroupTitles = \"[\" + itemGroupTitles + \"]\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-group-titles7\", itemGroupTitles);\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(canEditPage) {\n\t\t\t\t\t\t\t// Checks to make sure that the comments are graded and that we didn't\n\t\t\t\t\t\t\t// just come from a grading pane (would be confusing)\n\t\t\t\t\t\t\tif(i.getAltGradebook() != null && !cameFromGradingPane) {\n\t\t\t\t\t\t\t\tCommentsGradingPaneViewParameters gp = new CommentsGradingPaneViewParameters(CommentGradingPaneProducer.VIEW_ID);\n\t\t\t\t\t\t\t\tgp.placementId = toolManager.getCurrentPlacement().getId();\n\t\t\t\t\t\t\t\tgp.commentsItemId = i.getId();\n\t\t\t\t\t\t\t\tgp.pageId = currentPage.getPageId(); \n\t\t\t\t\t\t\t\tgp.pageItemId = pageItem.getId();\n\t\t\t\t\t\t\t\tgp.studentContentItem = true;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tUIInternalLink.make(tableRow, \"studentGradingPaneLink\", messageLocator.getMessage(\"simplepage.show-grading-pane-content\"), gp)\n\t\t\t\t\t\t\t\t    .decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.show-grading-pane-content\")));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"student-td\");\n\t\t\t\t\t\t\tUILink.make(tableRow, \"edit-student\", messageLocator.getMessage(\"simplepage.editItem\"), \"\")\n\t\t\t\t\t\t\t\t\t.decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.student\")));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentId\", String.valueOf(i.getId()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentAnon\", String.valueOf(i.isAnonymous()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentComments\", String.valueOf(i.getShowComments()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"forcedAnon\", String.valueOf(i.getForcedCommentsAnonymous()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentGrade\", String.valueOf(i.getGradebookId() != null));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentMaxPoints\", String.valueOf(i.getGradebookPoints()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentGrade2\", String.valueOf(i.getAltGradebook() != null));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentMaxPoints2\", String.valueOf(i.getAltPoints()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentitem-required\", String.valueOf(i.isRequired()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentitem-prerequisite\", String.valueOf(i.isPrerequisite()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval\", String.valueOf(i.getShowPeerEval()));\n\t\t\t\t\t\t\tmakePeerRubric(tableRow,i, makeMaintainRubric);\n\t\t\t\t\t\t\tmakeSamplePeerEval(tableRow);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tString peerEvalDate = i.getAttribute(\"rubricOpenDate\");\n\t\t\t\t\t\t\tString peerDueDate = i.getAttribute(\"rubricDueDate\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tCalendar peerevalcal = Calendar.getInstance();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (peerEvalDate != null && peerDueDate != null) {\n\t\t\t\t\t\t\t\tDateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT, M_locale);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Open date from attribute string\n\t\t\t\t\t\t\t\tpeerevalcal.setTimeInMillis(Long.valueOf(peerEvalDate));\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tString dateStr = isoDateFormat.format(peerevalcal.getTime());\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-open-date\", dateStr);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Due date from attribute string\n\t\t\t\t\t\t\t\tpeerevalcal.setTimeInMillis(Long.valueOf(peerDueDate));\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tdateStr = isoDateFormat.format(peerevalcal.getTime());\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-due-date\", dateStr);\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-allow-self\", i.getAttribute(\"rubricAllowSelfGrade\"));\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t//Default open and due date\n\t\t\t\t\t\t\t\tDate now = new Date();\n\t\t\t\t\t\t\t\tpeerevalcal.setTime(now);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Default open date: now\n\t\t\t\t\t\t\t\tString dateStr = isoDateFormat.format(peerevalcal.getTime());\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-open-date\", dateStr);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Default due date: 7 days from now\n\t\t\t\t\t\t\t\tDate later = new Date(peerevalcal.getTimeInMillis() + 604800000);\n\t\t\t\t\t\t\t\tpeerevalcal.setTime(later);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tdateStr = isoDateFormat.format(peerevalcal.getTime());\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//System.out.println(\"Setting date to \" + dateStr + \" and time to \" + timeStr);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-due-date\", dateStr);\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-allow-self\", i.getAttribute(\"rubricAllowSelfGrade\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Peer Eval Stats link\n\t\t\t\t\t\t\tGeneralViewParameters view = new GeneralViewParameters(PeerEvalStatsProducer.VIEW_ID);\n\t\t\t\t\t\t\tview.setSendingPage(currentPage.getPageId());\n\t\t\t\t\t\t\tview.setItemId(i.getId());\n\t\t\t\t\t\t\tif(i.getShowPeerEval()){\n\t\t\t\t\t\t\t\tUILink link = UIInternalLink.make(tableRow, \"peer-eval-stats-link\", view);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (itemGroupString != null) {\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"student-groups\", itemGroupString);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"student-owner-groups\", simplePageBean.getItemOwnerGroupString(i));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"student-group-owned\", (i.isGroupOwned()?\"true\":\"false\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(i.getType() == SimplePageItem.QUESTION) {\n\t\t\t\t \tString itemGroupString = null;\n\t\t\t\t\tString itemGroupTitles = null;\n\t\t\t\t\tif (canSeeAll) {\n\t\t\t\t\t    itemGroupString = simplePageBean.getItemGroupString(i, null, true);\n\t\t\t\t\t    if (itemGroupString != null)\n\t\t\t\t\t\titemGroupTitles = simplePageBean.getItemGroupTitles(itemGroupString, i);\n\t\t\t\t\t    if (itemGroupTitles != null) {\n\t\t\t\t\t\titemGroupTitles = \"[\" + itemGroupTitles + \"]\";\n\t\t\t\t\t    }\n\t\t\t\t\t    if (canEditPage)\n\t\t\t\t\t\tUIOutput.make(tableRow, \"item-groups\", itemGroupString);\n\t\t\t\t\t    if (itemGroupTitles != null)\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionitem-group-titles\", itemGroupTitles);\n\t\t\t\t\t}\n\t\t\t\t\tSimplePageQuestionResponse response = simplePageToolDao.findQuestionResponse(i.getId(), simplePageBean.getCurrentUserId());\n\t\t\t\t\t\n\t\t\t\t\tUIOutput.make(tableRow, \"questionSpan\");\n\n\t\t\t\t\tboolean isAvailable = simplePageBean.isItemAvailable(i) || canSeeAll;\n\t\t\t\t\t\n\t\t\t\t\tUIOutput.make(tableRow, \"questionDiv\");\n\t\t\t\t\t\n\t\t\t\t\tUIOutput.make(tableRow, \"questionText\", i.getAttribute(\"questionText\"));\n\t\t\t\t\t\n\t\t\t\t\tList<SimplePageQuestionAnswer> answers = new ArrayList<SimplePageQuestionAnswer>();\n\t\t\t\t\tif(\"multipleChoice\".equals(i.getAttribute(\"questionType\"))) {\n\t\t\t\t\t\tanswers = simplePageToolDao.findAnswerChoices(i);\n\t\t\t\t\t\tUIOutput.make(tableRow, \"multipleChoiceDiv\");\n\t\t\t\t\t\tUIForm questionForm = UIForm.make(tableRow, \"multipleChoiceForm\");\n\t\t\t\t\t\tmakeCsrf(questionForm, \"csrf4\");\n\n\t\t\t\t\t\tUIInput.make(questionForm, \"multipleChoiceId\", \"#{simplePageBean.questionId}\", String.valueOf(i.getId()));\n\t\t\t\t\t\t\n\t\t\t\t\t\tString[] options = new String[answers.size()];\n\t\t\t\t\t\tString initValue = null;\n\t\t\t\t\t\tfor(int j = 0; j < answers.size(); j++) {\n\t\t\t\t\t\t\toptions[j] = String.valueOf(answers.get(j).getId());\n\t\t\t\t\t\t\tif(response != null && answers.get(j).getId() == response.getMultipleChoiceId()) {\n\t\t\t\t\t\t\t\tinitValue = String.valueOf(answers.get(j).getId());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tUISelect multipleChoiceSelect = UISelect.make(questionForm, \"multipleChoiceSelect:\", options, \"#{simplePageBean.questionResponse}\", initValue);\n\t\t\t\t\t\tif(!isAvailable || response != null) {\n\t\t\t\t\t\t\tmultipleChoiceSelect.decorate(new UIDisabledDecorator());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t \n\t\t\t\t\t\tfor(int j = 0; j < answers.size(); j++) {\n\t\t\t\t\t\t\tUIBranchContainer answerContainer = UIBranchContainer.make(questionForm, \"multipleChoiceAnswer:\", String.valueOf(j));\n\t\t\t\t\t\t\tUISelectChoice multipleChoiceInput = UISelectChoice.make(answerContainer, \"multipleChoiceAnswerRadio\", multipleChoiceSelect.getFullID(), j);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmultipleChoiceInput.decorate(new UIFreeAttributeDecorator(\"id\", multipleChoiceInput.getFullID()));\n\t\t\t\t\t\t\tUIOutput.make(answerContainer, \"multipleChoiceAnswerText\", answers.get(j).getText())\n\t\t\t\t\t\t\t\t.decorate(new UIFreeAttributeDecorator(\"for\", multipleChoiceInput.getFullID()));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(!isAvailable || response != null) {\n\t\t\t\t\t\t\t\tmultipleChoiceInput.decorate(new UIDisabledDecorator());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t \n\t\t\t\t\t\tUICommand answerButton = UICommand.make(questionForm, \"answerMultipleChoice\", messageLocator.getMessage(\"simplepage.answer_question\"), \"#{simplePageBean.answerMultipleChoiceQuestion}\");\n\t\t\t\t\t\tif(!isAvailable || response != null) {\n\t\t\t\t\t\t\tanswerButton.decorate(new UIDisabledDecorator());\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"shortanswer\".equals(i.getAttribute(\"questionType\"))) {\n\t\t\t\t\t\tUIOutput.make(tableRow, \"shortanswerDiv\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tUIForm questionForm = UIForm.make(tableRow, \"shortanswerForm\");\n\t\t\t\t\t\tmakeCsrf(questionForm, \"csrf5\");\n\n\t\t\t\t\t\tUIInput.make(questionForm, \"shortanswerId\", \"#{simplePageBean.questionId}\", String.valueOf(i.getId()));\n\t\t\t\t\t\t\n\t\t\t\t\t\tUIInput shortanswerInput = UIInput.make(questionForm, \"shortanswerInput\", \"#{simplePageBean.questionResponse}\");\n\t\t\t\t\t\tif(!isAvailable || response != null) {\n\t\t\t\t\t\t\tshortanswerInput.decorate(new UIDisabledDecorator());\n\t\t\t\t\t\t\tif(response != null && response.getShortanswer() != null) {\n\t\t\t\t\t\t\t\tshortanswerInput.setValue(response.getShortanswer());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tUICommand answerButton = UICommand.make(questionForm, \"answerShortanswer\", messageLocator.getMessage(\"simplepage.answer_question\"), \"#{simplePageBean.answerShortanswerQuestion}\");\n\t\t\t\t\t\tif(!isAvailable || response != null) {\n\t\t\t\t\t\t\tanswerButton.decorate(new UIDisabledDecorator());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tStatus questionStatus = getQuestionStatus(i, response);\n\t\t\t\t\taddStatusImage(questionStatus, tableRow, \"questionStatus\", null);\n\t\t\t\t\tString statusNote = getStatusNote(questionStatus);\n\t\t\t\t\tif (statusNote != null) // accessibility version of icon\n\t\t\t\t\t    UIOutput.make(tableRow, \"questionNote\", statusNote);\n\t\t\t\t\tString statusText = null;\n\t\t\t\t\tif(questionStatus == Status.COMPLETED)\n\t\t\t\t\t    statusText = i.getAttribute(\"questionCorrectText\");\n\t\t\t\t\telse if(questionStatus == Status.FAILED)\n\t\t\t\t\t    statusText = i.getAttribute(\"questionIncorrectText\");\n\t\t\t\t\tif (statusText != null && !\"\".equals(statusText.trim()))\n\t\t\t\t\t    UIOutput.make(tableRow, \"questionStatusText\", statusText);\n\t\t\t\t\t\n\t\t\t\t\t// Output the poll data\n\t\t\t\t\tif(\"multipleChoice\".equals(i.getAttribute(\"questionType\")) &&\n\t\t\t\t\t\t\t(canEditPage || (\"true\".equals(i.getAttribute(\"questionShowPoll\")) &&\n\t\t\t\t\t\t\t\t\t(questionStatus == Status.COMPLETED || questionStatus == Status.FAILED)))) {\n\t\t\t\t\t\tUIOutput.make(tableRow, \"showPollGraph\", messageLocator.getMessage(\"simplepage.show-poll\"));\n\t\t\t\t\t\tUIOutput questionGraph = UIOutput.make(tableRow, \"questionPollGraph\");\n\t\t\t\t\t\tquestionGraph.decorate(new UIFreeAttributeDecorator(\"id\", \"poll\" + i.getId()));\n\t\t\t\t\t\t\n\t\t\t\t\t\tList<SimplePageQuestionResponseTotals> totals = simplePageToolDao.findQRTotals(i.getId());\n\t\t\t\t\t\tHashMap<Long, Long> responseCounts = new HashMap<Long, Long>();\n\t\t\t\t\t\t// in theory we don't need the first loop, as there should be a total\n\t\t\t\t\t\t// entry for all possible answers. But in case things are out of sync ...\n\t\t\t\t\t\tfor(SimplePageQuestionAnswer answer : answers)\n\t\t\t\t\t\t    responseCounts.put(answer.getId(), 0L);\n\t\t\t\t\t\tfor(SimplePageQuestionResponseTotals total : totals)\n\t\t\t\t\t\t    responseCounts.put(total.getResponseId(), total.getCount());\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int j = 0; j < answers.size(); j++) {\n\t\t\t\t\t\t\tUIBranchContainer pollContainer = UIBranchContainer.make(tableRow, \"questionPollData:\", String.valueOf(j));\n\t\t\t\t\t\t\tUIOutput.make(pollContainer, \"questionPollText\", answers.get(j).getText());\n\t\t\t\t\t\t\tUIOutput.make(pollContainer, \"questionPollNumber\", String.valueOf(responseCounts.get(answers.get(j).getId())));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tif(canEditPage) {\n\t\t\t\t\t\tUIOutput.make(tableRow, \"question-td\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t// always show grading panel. Currently this is the only way to get feedback\n\t\t\t\t\t\tif( !cameFromGradingPane) {\n\t\t\t\t\t\t\tQuestionGradingPaneViewParameters gp = new QuestionGradingPaneViewParameters(QuestionGradingPaneProducer.VIEW_ID);\n\t\t\t\t\t\t\tgp.placementId = toolManager.getCurrentPlacement().getId();\n\t\t\t\t\t\t\tgp.questionItemId = i.getId();\n\t\t\t\t\t\t\tgp.pageId = currentPage.getPageId();\n\t\t\t\t\t\t\tgp.pageItemId = pageItem.getId();\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tUIInternalLink.make(tableRow, \"questionGradingPaneLink\", messageLocator.getMessage(\"simplepage.show-grading-pane\"), gp)\n\t\t\t\t\t\t\t    .decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.show-grading-pane\")));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tUILink.make(tableRow, \"edit-question\", messageLocator.getMessage(\"simplepage.editItem\"), \"\")\n\t\t\t\t\t\t\t.decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.question\")));\n\t\t\t\t\t\t\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionId\", String.valueOf(i.getId()));\n\t\t\t\t\t\tboolean graded = \"true\".equals(i.getAttribute(\"questionGraded\")) || i.getGradebookId() != null;\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionGrade\", String.valueOf(graded));\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionMaxPoints\", String.valueOf(i.getGradebookPoints()));\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionGradebookTitle\", String.valueOf(i.getGradebookTitle()));\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionitem-required\", String.valueOf(i.isRequired()));\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionitem-prerequisite\", String.valueOf(i.isPrerequisite()));\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionitem-groups\", itemGroupString);\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionCorrectText\", String.valueOf(i.getAttribute(\"questionCorrectText\")));\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionIncorrectText\", String.valueOf(i.getAttribute(\"questionIncorrectText\")));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(\"shortanswer\".equals(i.getAttribute(\"questionType\"))) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"questionType\", \"shortanswer\");\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"questionAnswer\", i.getAttribute(\"questionAnswer\"));\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"questionType\", \"multipleChoice\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor(int j = 0; j < answers.size(); j++) {\n\t\t\t\t\t\t\t\tUIBranchContainer answerContainer = UIBranchContainer.make(tableRow, \"questionMultipleChoiceAnswer:\", String.valueOf(j));\n\t\t\t\t\t\t\t\tUIOutput.make(answerContainer, \"questionMultipleChoiceAnswerId\", String.valueOf(answers.get(j).getId()));\n\t\t\t\t\t\t\t\tUIOutput.make(answerContainer, \"questionMultipleChoiceAnswerText\", answers.get(j).getText());\n\t\t\t\t\t\t\t\tUIOutput.make(answerContainer, \"questionMultipleChoiceAnswerCorrect\", String.valueOf(answers.get(j).isCorrect()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"questionShowPoll\", String.valueOf(i.getAttribute(\"questionShowPoll\")));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}  else {\n\t\t\t\t\t// remaining type must be a block of HTML\n\t\t\t\t\tUIOutput.make(tableRow, \"itemSpan\");\n\n\t\t\t\t\tif (canSeeAll) {\n\t\t\t\t\t    String itemGroupString = simplePageBean.getItemGroupString(i, null, true);\n\t\t\t\t\t    String itemGroupTitles = simplePageBean.getItemGroupTitles(itemGroupString, i);\n\t\t\t\t\t    if (itemGroupTitles != null) {\n\t\t\t\t\t\titemGroupTitles = \"[\" + itemGroupTitles + \"]\";\n\t\t\t\t\t    }\n\t\t\t\t\t    \n\t\t\t\t\t    UIOutput.make(tableRow, \"item-groups-titles-text\", itemGroupTitles);\n\t\t\t\t\t}\n\n\t\t\t\t\tif(canSeeAll || simplePageBean.isItemAvailable(i)) {\n\t\t\t\t\t    UIVerbatim.make(tableRow, \"content\", (i.getHtml() == null ? \"\" : i.getHtml()));\n\t\t\t\t\t} else {\n\t\t\t\t\t    UIComponent unavailableText = UIOutput.make(tableRow, \"content\", messageLocator.getMessage(\"simplepage.textItemUnavailable\"));\n\t\t\t\t\t    unavailableText.decorate(new UIFreeAttributeDecorator(\"class\", \"disabled-text-item\"));\n\t\t\t\t\t}\n\n\t\t\t\t\t// editing is done using a special producer that calls FCK.\n\t\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\tGeneralViewParameters eParams = new GeneralViewParameters();\n\t\t\t\t\t\teParams.setSendingPage(currentPage.getPageId());\n\t\t\t\t\t\teParams.setItemId(i.getId());\n\t\t\t\t\t\teParams.viewID = EditPageProducer.VIEW_ID;\n\t\t\t\t\t\tUIOutput.make(tableRow, \"edittext-td\");\n\t\t\t\t\t\tUIInternalLink.make(tableRow, \"edit-link\", messageLocator.getMessage(\"simplepage.editItem\"), eParams).decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.textbox\").replace(\"{}\", Integer.toString(textboxcount))));\n\n\t\t\t\t\t\ttextboxcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// end of items. This is the end for normal users. Following is\n\t\t\t// special\n\t\t\t// checks and putting out the dialogs for the popups, for\n\t\t\t// instructors.\n\n\t\t\tboolean showBreak = false;\n\n\t\t\t// I believe refresh is now done automatically in all cases\n\t\t\t// if (showRefresh) {\n\t\t\t// UIOutput.make(tofill, \"refreshAlert\");\n\t\t\t//\n\t\t\t// // Should simply refresh\n\t\t\t// GeneralViewParameters p = new GeneralViewParameters(VIEW_ID);\n\t\t\t// p.setSendingPage(currentPage.getPageId());\n\t\t\t// UIInternalLink.make(tofill, \"refreshLink\", p);\n\t\t\t// showBreak = true;\n\t\t\t// }\n\n\t\t\t// stuff goes on the page in the order in the HTML file. So the fact\n\t\t\t// that it's here doesn't mean it shows\n\t\t\t// up at the end. This code produces errors and other odd stuff.\n\n\t\t\tif (canSeeAll) {\n\t\t\t\t// if the page is hidden, warn the faculty [students get stopped\n\t\t\t\t// at\n\t\t\t\t// the top]\n\t\t\t\tif (currentPage.isHidden()) {\n\t\t\t\t\tUIOutput.make(tofill, \"hiddenAlert\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.pagehidden\")));\n\t\t\t\t\tUIVerbatim.make(tofill, \"hidden-text\", messageLocator.getMessage(\"simplepage.pagehidden.text\"));\n\n\t\t\t\t\tshowBreak = true;\n\t\t\t\t\t// similarly warn them if it isn't released yet\n\t\t\t\t} else if (currentPage.getReleaseDate() != null && currentPage.getReleaseDate().after(new Date())) {\n\t\t\t\t\tDateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT, M_locale);\n\t\t\t\t\tTimeZone tz = timeService.getLocalTimeZone();\n\t\t\t\t\tdf.setTimeZone(tz);\n\t\t\t\t\tString releaseDate = df.format(currentPage.getReleaseDate());\n\t\t\t\t\tUIOutput.make(tofill, \"hiddenAlert\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.notreleased\")));\n\t\t\t\t\tUIVerbatim.make(tofill, \"hidden-text\", messageLocator.getMessage(\"simplepage.notreleased.text\").replace(\"{}\", releaseDate));\n\t\t\t\t\tshowBreak = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (showBreak) {\n\t\t\t\tUIOutput.make(tofill, \"breakAfterWarnings\");\n\t\t\t}\n\t\t}\n\n\t\t// more warnings: if no item on the page, give faculty instructions,\n\t\t// students an error\n\t\tif (!anyItemVisible) {\n\t\t\tif (canEditPage) {\n\t\t\t\tUIOutput.make(tofill, \"startupHelp\")\n\t\t\t\t    .decorate(new UIFreeAttributeDecorator(\"src\", \n\t\t\t\t\tgetLocalizedURL((currentPage.getOwner() != null) ? \"student.html\" : \"general.html\")))\n\t\t\t\t    .decorate(new UIFreeAttributeDecorator(\"id\", \"iframe\"));\n\t\t\t\tif (!iframeJavascriptDone) {\n\t\t\t\t    UIOutput.make(tofill, \"iframeJavascript\");\n\t\t\t\t    iframeJavascriptDone = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tUIOutput.make(tofill, \"error-div\");\n\t\t\t\tUIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.noitems_error_user\"));\n\t\t\t}\n\t\t}\n\n\t\t// now output the dialogs. but only for faculty (to avoid making the\n\t\t// file bigger)\n\t\tif (canEditPage) {\n\t\t\tcreateSubpageDialog(tofill, currentPage);\n\t\t}\n\n\t\tcreateDialogs(tofill, currentPage, pageItem);\n\t}","id":96054,"modified_method":"public void fillComponents(UIContainer tofill, ViewParameters viewParams, ComponentChecker checker) {\n\t\tGeneralViewParameters params = (GeneralViewParameters) viewParams;\n\n                UIOutput.make(tofill, \"html\").decorate(new UIFreeAttributeDecorator(\"lang\", localegetter.get().getLanguage()))\n\t\t    .decorate(new UIFreeAttributeDecorator(\"xml:lang\", localegetter.get().getLanguage()));        \n\n\t\tUIOutput.make(tofill, \"datepicker\").decorate(new UIFreeAttributeDecorator(\"src\", \n\t\t  (majorVersion >= 10 ? \"/library\" : \"/lessonbuilder-tool\") + \"/js/lang-datepicker/lang-datepicker.js\"));\n\n\t\tboolean iframeJavascriptDone = false;\n\t\t\n\t\t// security model:\n\t\t// canEditPage and canReadPage are normal Sakai privileges. They apply\n\n\t\t// to all\n\t\t// pages in the site.\n\t\t// However when presented with a page, we need to make sure it's\n\t\t// actually in\n\t\t// this site, or users could get to pages in other sites. That's done\n\t\t// by updatePageObject. The model is that producers always work on the\n\t\t// current page, and updatePageObject makes sure that is in the current\n\t\t// site.\n\t\t// At that point we can safely use canEditPage.\n\n\t\t// somewhat misleading. sendingPage specifies the page we're supposed to\n\t\t// go to.  If path is \"none\", we don't want this page to be what we see\n\t\t// when we come back to the tool\n\t\tif (params.getSendingPage() != -1) {\n\t\t\t// will fail if page not in this site\n\t\t\t// security then depends upon making sure that we only deal with\n\t\t\t// this page\n\t\t\ttry {\n\t\t\t\tsimplePageBean.updatePageObject(params.getSendingPage(), !params.getPath().equals(\"none\"));\n\t\t\t} catch (Exception e) {\n\t\t\t\tlog.warn(\"ShowPage permission exception \" + e);\n\t\t\t\tUIOutput.make(tofill, \"error-div\");\n\t\t\t\tUIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.not_available\"));\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t\n\t\tboolean canEditPage = simplePageBean.canEditPage();\n\t\tboolean canReadPage = simplePageBean.canReadPage();\n\t\tboolean canSeeAll = simplePageBean.canSeeAll();  // always on if caneditpage\n\t\t\n\t\tboolean cameFromGradingPane = params.getPath().equals(\"none\");\n\n\t\tif (!canReadPage) {\n\t\t\t// this code is intended for the situation where site permissions\n\t\t\t// haven't been set up.\n\t\t\t// So if the user can't read the page (which is pretty abnormal),\n\t\t\t// see if they have site.upd.\n\t\t\t// if so, give them some explanation and offer to call the\n\t\t\t// permissions helper\n\t\t\tString ref = \"/site/\" + simplePageBean.getCurrentSiteId();\n\t\t\tif (simplePageBean.canEditSite()) {\n\t\t\t\tSimplePage currentPage = simplePageBean.getCurrentPage();\n\t\t\t\tUIOutput.make(tofill, \"needPermissions\");\n\n\t\t\t\tGeneralViewParameters permParams = new GeneralViewParameters();\n\t\t\t\tpermParams.setSendingPage(-1L);\n\t\t\t\tcreateStandardToolBarLink(PermissionsHelperProducer.VIEW_ID, tofill, \"callpermissions\", \"simplepage.permissions\", permParams, \"simplepage.permissions.tooltip\");\n\n\t\t\t}\n\n\t\t\t// in any case, tell them they can't read the page\n\t\t\tUIOutput.make(tofill, \"error-div\");\n\t\t\tUIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.nopermissions\"));\n\t\t\treturn;\n\t\t}\n\n\t\tif (params.addTool == GeneralViewParameters.COMMENTS) {\n\t\t\tsimplePageBean.addCommentsSection();\n\t\t}else if(params.addTool == GeneralViewParameters.STUDENT_CONTENT) {\n\t\t\tsimplePageBean.addStudentContentSection();\n\t\t}else if(params.addTool == GeneralViewParameters.STUDENT_PAGE) {\n\t\t    simplePageBean.createStudentPage(params.studentItemId);\n\t\t\tcanEditPage = simplePageBean.canEditPage();\n\t\t}\n\n\t\t// Find the MSIE version, if we're running it.\n\t\tint ieVersion = checkIEVersion();\n\t\t// as far as I can tell, none of these supports fck or ck\n\t\t// we can make it configurable if necessary, or use WURFL\n\t\t// however this test is consistent with CKeditor's check.\n\t\t// that desireable, since if CKeditor is going to use a bare\n\t\t// text block, we want to handle it as noEditor\n\t\tString userAgent = httpServletRequest.getHeader(\"User-Agent\");\n\t\tif (userAgent == null)\n\t\t    userAgent = \"\";\n\t\tboolean noEditor = userAgent.toLowerCase().indexOf(\"mobile\") >= 0;\n\n\t\t// set up locale\n\t\tLocale M_locale = null;\n\t\tString langLoc[] = localegetter.get().toString().split(\"_\");\n\t\tif (langLoc.length >= 2) {\n\t\t\tif (\"en\".equals(langLoc[0]) && \"ZA\".equals(langLoc[1])) {\n\t\t\t\tM_locale = new Locale(\"en\", \"GB\");\n\t\t\t} else {\n\t\t\t\tM_locale = new Locale(langLoc[0], langLoc[1]);\n\t\t\t}\n\t\t} else {\n\t\t\tM_locale = new Locale(langLoc[0]);\n\t\t}\n\n\t\t// clear session attribute if necessary, after calling Samigo\n\t\tString clearAttr = params.getClearAttr();\n\n\t\tif (clearAttr != null && !clearAttr.equals(\"\")) {\n\t\t\tSession session = SessionManager.getCurrentSession();\n\t\t\t// don't let users clear random attributes\n\t\t\tif (clearAttr.startsWith(\"LESSONBUILDER_RETURNURL\")) {\n\t\t\t\tsession.setAttribute(clearAttr, null);\n\t\t\t}\n\t\t}\n\n\t\tif (htmlTypes == null) {\n\t\t\tString mmTypes = ServerConfigurationService.getString(\"lessonbuilder.html.types\", DEFAULT_HTML_TYPES);\n\t\t\thtmlTypes = mmTypes.split(\",\");\n\t\t\tfor (int i = 0; i < htmlTypes.length; i++) {\n\t\t\t\thtmlTypes[i] = htmlTypes[i].trim().toLowerCase();\n\t\t\t}\n\t\t\tArrays.sort(htmlTypes);\n\t\t}\n\n\t\tif (mp4Types == null) {\n\t\t\tString m4Types = ServerConfigurationService.getString(\"lessonbuilder.mp4.types\", DEFAULT_MP4_TYPES);\n\t\t\tmp4Types = m4Types.split(\",\");\n\t\t\tfor (int i = 0; i < mp4Types.length; i++) {\n\t\t\t\tmp4Types[i] = mp4Types[i].trim().toLowerCase();\n\t\t\t}\n\t\t\tArrays.sort(mp4Types);\n\t\t}\n\n\t\tif (html5Types == null) {\n\t\t\tString jTypes = ServerConfigurationService.getString(\"lessonbuilder.html5.types\", DEFAULT_HTML5_TYPES);\n\t\t\thtml5Types = jTypes.split(\",\");\n\t\t\tfor (int i = 0; i < html5Types.length; i++) {\n\t\t\t\thtml5Types[i] = html5Types[i].trim().toLowerCase();\n\t\t\t}\n\t\t\tArrays.sort(html5Types);\n\t\t}\n\n\t\t// remember that page tool was reset, so we need to give user the option\n\t\t// of going to the last page from the previous session\n\t\tSimplePageToolDao.PageData lastPage = simplePageBean.toolWasReset();\n\n\t\t// if this page was copied from another site we may have to update links\n\t\t// can only do the fixups if you can write. We could hack permissions, but\n\t\t// I assume a site owner will access the site first\n\t\tif (canEditPage)\n\t\t    simplePageBean.maybeUpdateLinks();\n\n\t\t// if starting the tool, sendingpage isn't set. the following call\n\t\t// will give us the top page.\n\t\tSimplePage currentPage = simplePageBean.getCurrentPage();\n\t\t\n\t\t// now we need to find our own item, for access checks, etc.\n\t\tSimplePageItem pageItem = null;\n\t\tif (currentPage != null) {\n\t\t\tpageItem = simplePageBean.getCurrentPageItem(params.getItemId());\n\t\t}\n\t\t// one more security check: make sure the item actually involves this\n\t\t// page.\n\t\t// otherwise someone could pass us an item from a different page in\n\t\t// another site\n\t\t// actually this normally happens if the page doesn't exist and we don't\n\t\t// have permission to create it\n\t\tif (currentPage == null || pageItem == null || \n\t\t    (pageItem.getType() != SimplePageItem.STUDENT_CONTENT &&Long.valueOf(pageItem.getSakaiId()) != currentPage.getPageId())) {\n\t\t\tlog.warn(\"ShowPage item not in page\");\n\t\t\tUIOutput.make(tofill, \"error-div\");\n\t\t\tif (currentPage == null)\n\t\t\t    // most likely tool was created by site info but no page\n\t\t\t    // has created. It will created the first time an item is created,\n\t\t\t    // so from a user point of view it looks like no item has been added\n\t\t\t    UIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.noitems_error_user\"));\n\t\t\telse\n\t\t\t    UIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.not_available\"));\n\t\t\treturn;\n\t\t}\n\n\t\t// the reason for a seaprate release date test is so we can show the date.\n\t\t// there are currently some issues. If the page is not released and the user doesn't have\n\t\t// access because of groups, this will show the not released data. That's misleading because\n\t\t// when the release date comes the user still won't be able to see it. Not sure if it's worth\n\t\t// creating a separate function that just checks the groups. It's easy to test hidden, so I do that. The idea is that\n\t\t// if it's both hidden and not released it makes sense to show hidden.\n\n\t\t// check two parts of isitemvisible where we want to give specific errors\n\t\t// potentially need time zone for setting release date\n\t\tif (!canSeeAll && currentPage.getReleaseDate() != null && currentPage.getReleaseDate().after(new Date()) && !currentPage.isHidden()) {\n\t\t\tDateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT, M_locale);\n\t\t\tTimeZone tz = timeService.getLocalTimeZone();\n\t\t\tdf.setTimeZone(tz);\n\t\t\tString releaseDate = df.format(currentPage.getReleaseDate());\n\t\t\tString releaseMessage = messageLocator.getMessage(\"simplepage.not_yet_available_releasedate\").replace(\"{}\", releaseDate);\n\n\t\t\tUIOutput.make(tofill, \"error-div\");\n\t\t\tUIOutput.make(tofill, \"error\", releaseMessage);\n\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// the only thing not already tested (or tested in release check below) in isItemVisible is groups. In theory\n\t\t// no one should have a URL to a page for which they aren't in the group,\n\t\t// so I'm not trying to give a better message than just hidden\n\t\tif (!canSeeAll && currentPage.isHidden() || !simplePageBean.isItemVisible(pageItem)) {\n\t\t    UIOutput.make(tofill, \"error-div\");\n\t\t    UIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.not_available_hidden\"));\n\t\t    return;\n\t\t}\n\n\n\n\t\t// I believe we've now checked all the args for permissions issues. All\n\t\t// other item and\n\t\t// page references are generated here based on the contents of the page\n\t\t// and items.\n\n\t\t// needed to process path arguments first, so refresh page goes the right page\n\t\tif (simplePageBean.getTopRefresh()) {\n\t\t    UIOutput.make(tofill, \"refresh\");\n\t\t    return;    // but there's no point doing anything more\n\t\t}\n\n\t\t// error from previous operation\n\t\t// consumes the message, so don't do it if refreshing\n\t\tList<String> errMessages = simplePageBean.errMessages();\n\t\tif (errMessages != null) {\n\t\t    UIOutput.make(tofill, \"error-div\");\n\t\t    for (String e: errMessages) {\n\t\t\tUIBranchContainer er = UIBranchContainer.make(tofill, \"errors:\");\n\t\t\tUIOutput.make(er, \"error-message\", e);\n\t\t    }\n\t\t}\n\n\n\t\tif (canEditPage) {\n\t\t    // special instructor-only javascript setup.\n\t\t    // but not if we're refreshing\n\t\t\tUIOutput.make(tofill, \"instructoronly\");\n\t\t\t// Chome and IE will abort a page if some on it was input from\n\t\t\t// a previous submit. I.e. if an HTML editor was used. In theory they\n\t\t\t// only do this if part of it is Javascript, but in practice they do\n\t\t\t// it for images as well. The protection isn't worthwhile, since it only\n\t\t\t// protects the first time. Since it will reesult in a garbled page, \n\t\t\t// people will just refresh the page, and then they'll get the new\n\t\t\t// contents. The Chrome guys refuse to fix this so it just applies to Javascript\n\t\t\thttpServletResponse.setHeader(\"X-XSS-Protection\", \"0\");\n\t\t}\n\t\t\n\t\t\n\t\tif (currentPage == null || pageItem == null) {\n\t\t\tUIOutput.make(tofill, \"error-div\");\n\t\t\tif (canEditPage) {\n\t\t\t\tUIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.impossible1\"));\n\t\t\t} else {\n\t\t\t\tUIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.not_available\"));\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// Set up customizable CSS\n\t\tContentResource cssLink = simplePageBean.getCssForCurrentPage();\n\t\tif(cssLink != null) {\n\t\t\tUIOutput.make(tofill, \"customCSS\").decorate(new UIFreeAttributeDecorator(\"href\", cssLink.getUrl()));\n\t\t}\n\n\t\t// offer to go to saved page if this is the start of a session, in case\n\t\t// user has logged off and logged on again.\n\t\t// need to offer to go to previous page? even if a new session, no need\n\t\t// if we're already on that page\n\t\tif (lastPage != null && lastPage.pageId != currentPage.getPageId()) {\n\t\t\tUIOutput.make(tofill, \"refreshAlert\");\n\t\t\tUIOutput.make(tofill, \"refresh-message\", messageLocator.getMessage(\"simplepage.last-visited\"));\n\t\t\t// Should simply refresh\n\t\t\tGeneralViewParameters p = new GeneralViewParameters(VIEW_ID);\n\t\t\tp.setSendingPage(lastPage.pageId);\n\t\t\tp.setItemId(lastPage.itemId);\n\t\t\t// reset the path to the saved one\n\t\t\tp.setPath(\"log\");\n\t\t\t\n\t\t\tString name = lastPage.name;\n\t\t\t\n\t\t\t// Titles are set oddly by Student Content Pages\n\t\t\tSimplePage lastPageObj = simplePageToolDao.getPage(lastPage.pageId);\n\t\t\tif(lastPageObj.getOwner() != null) {\n\t\t\t\tname = lastPageObj.getTitle();\n\t\t\t}\n\t\t\t\n\t\t\tUIInternalLink.make(tofill, \"refresh-link\", name, p);\n\t\t}\n\n\t\t// path is the breadcrumbs. Push, pop or reset depending upon path=\n\t\t// programmer documentation.\n\t\tString title;\n\t\tString ownerName = null;\n\t\tif(pageItem.getType() != SimplePageItem.STUDENT_CONTENT) {\n\t\t\ttitle = pageItem.getName();\n\t\t}else {\n\t\t\ttitle = currentPage.getTitle();\n\t\t\tif(!pageItem.isAnonymous() || canEditPage) {\n\t\t\t    try {\n\t\t\t\tString owner = currentPage.getOwner();\n\t\t\t\tString group = currentPage.getGroup();\n\t\t\t\tif (group != null)\n\t\t\t\t    ownerName = simplePageBean.getCurrentSite().getGroup(group).getTitle();\n\t\t\t\telse\n\t\t\t\t    ownerName = UserDirectoryService.getUser(owner).getDisplayName();\n\t\t\t\t\n\t\t\t    } catch (Exception ignore) {};\n\t\t\t    if (ownerName != null && !ownerName.equals(title))\n\t\t\t\ttitle += \" (\" + ownerName + \")\";\n\t\t\t}\n\t\t}\n\t\t\n\t\tString newPath = null;\n\t\t\n\t\t// If the path is \"none\", then we don't want to record this page as being viewed, or set a path\n\t\tif(!params.getPath().equals(\"none\")) {\n\t\t\tnewPath = simplePageBean.adjustPath(params.getPath(), currentPage.getPageId(), pageItem.getId(), title);\n\t\t\tsimplePageBean.adjustBackPath(params.getBackPath(), currentPage.getPageId(), pageItem.getId(), pageItem.getName());\n\t\t}\n\t\t\n\t\t// put out link to index of pages\n\t\tGeneralViewParameters showAll = new GeneralViewParameters(PagePickerProducer.VIEW_ID);\n\t\tshowAll.setSource(\"summary\");\n\t\tUIInternalLink.make(tofill, \"print-view\", messageLocator.getMessage(\"simplepage.print_view\"), showAll);\n\t\tUIInternalLink.make(tofill, \"show-pages\", messageLocator.getMessage(\"simplepage.showallpages\"), showAll);\n\t\t\n\t\tif (canEditPage) {\n\t\t\t// show tool bar, but not if coming from grading pane\n\t\t\tif(!cameFromGradingPane) {\n\t\t\t\tcreateToolBar(tofill, currentPage, (pageItem.getType() == SimplePageItem.STUDENT_CONTENT));\n\t\t\t}\n\t\t\t\n\t\t\tUIOutput.make(tofill, \"title-descrip\");\n\t\t\tString label = null;\n\t\t\tif (pageItem.getType() == SimplePageItem.STUDENT_CONTENT)\n\t\t\t    label = messageLocator.getMessage(\"simplepage.editTitle\");\n\t\t\telse\n\t\t\t    label = messageLocator.getMessage(\"simplepage.title\");\n\t\t\tString descrip = null;\n\t\t\tif (pageItem.getType() == SimplePageItem.STUDENT_CONTENT)\n\t\t\t    descrip = messageLocator.getMessage(\"simplepage.title-student-descrip\");\n\t\t\telse if (pageItem.getPageId() == 0)\n\t\t\t    descrip = messageLocator.getMessage(\"simplepage.title-top-descrip\");\n\t\t\telse\n\t\t\t    descrip = messageLocator.getMessage(\"simplepage.title-descrip\");\n\n\t\t\tUIOutput.make(tofill, \"edit-title\").decorate(new UIFreeAttributeDecorator(\"title\", descrip));\n\t\t\tUIOutput.make(tofill, \"edit-title-text\", label);\n\t\t\tUIOutput.make(tofill, \"title-descrip-text\", descrip);\n\n\t\t\tif (pageItem.getPageId() == 0 && currentPage.getOwner() == null) { // top level page\n\t\t\t    // need dropdown \n\t\t\t\tUIOutput.make(tofill, \"dropdown\");\n\t\t\t\tUIOutput.make(tofill, \"moreDiv\");\n\t\t\t\tUIOutput.make(tofill, \"new-page\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.new-page-tooltip\")));\n\t\t\t\tUIOutput.make(tofill, \"import-cc\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.import_cc.tooltip\")));\n\t\t\t\tUIOutput.make(tofill, \"export-cc\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.export_cc.tooltip\")));\n\t\t\t}\n\t\t\t\n\t\t\t// Checks to see that user can edit and that this is either a top level page,\n\t\t\t// or a top level student page (not a subpage to a student page)\n\t\t\tif(simplePageBean.getEditPrivs() == 0 && (pageItem.getPageId() == 0)) {\n\t\t\t\tUIOutput.make(tofill, \"remove-li\");\n\t\t\t\tUIOutput.make(tofill, \"remove-page\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.remove-page-tooltip\")));\n\t\t\t\t\n\t\t\t\tif (allowDeleteOrphans) {\n\t\t\t\t    UIOutput.make(tofill, \"delete-orphan-li\");\n\t\t\t\t    UIForm orphan =  UIForm.make(tofill, \"delete-orphan-form\");\n\t\t\t\t    makeCsrf(orphan, \"csrf1\");\n\t\t\t\t    UICommand.make(orphan, \"delete-orphan\", \"#{simplePageBean.deleteOrphanPages}\");\n\t\t\t\t    UIOutput.make(orphan, \"delete-orphan-link\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.delete-orphan-pages-desc\")));\n\t\t\t\t}\n\n\t\t\t} else if (simplePageBean.getEditPrivs() == 0 && currentPage.getOwner() != null) {\n\t\t\t    // getEditPrivs < 2 if we want to let the student delete. Currently we don't. There can be comments\n\t\t\t    // from other students and the page can be shared\n\t\t\t\tSimpleStudentPage studentPage = simplePageToolDao.findStudentPage(currentPage.getTopParent());\n\t\t\t\tif (studentPage != null && studentPage.getPageId() == currentPage.getPageId()) {\n\t\t\t\t\tUIOutput.make(tofill, \"remove-student\");\n\t\t\t\t\tUIOutput.make(tofill, \"remove-page-student\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.remove-student-page-explanation\")));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tUIOutput.make(tofill, \"dialogDiv\");\n\t\t\tUIOutput.make(tofill, \"siteid\", simplePageBean.getCurrentSiteId());\n\t\t\tUIOutput.make(tofill, \"locale\", M_locale.toString());\n\n\t\t} else if (!canReadPage) {\n\t\t\treturn;\n\t\t} else if (!canSeeAll) {\n\t\t\t// see if there are any unsatisfied prerequisites\n\t\t        // if this isn't a top level page, this will check that the page above is\n\t\t        // accessible. That matters because we check visible, available and release\n\t\t        // only for this page but not for the containing page\n\t\t\tList<String> needed = simplePageBean.pagesNeeded(pageItem);\n\t\t\tif (needed.size() > 0) {\n\t\t\t\t// yes. error and abort\n\t\t\t\tif (pageItem.getPageId() != 0) {\n\t\t\t\t\t// not top level. This should only happen from a \"next\"\n\t\t\t\t\t// link.\n\t\t\t\t\t// at any rate, the best approach is to send the user back\n\t\t\t\t\t// to the calling page\n\t\t\t\t\tList<SimplePageBean.PathEntry> path = simplePageBean.getHierarchy();\n\t\t\t\t\tSimplePageBean.PathEntry containingPage = null;\n\t\t\t\t\tif (path.size() > 1) {\n\t\t\t\t\t\t// page above this. this page is on the top\n\t\t\t\t\t\tcontainingPage = path.get(path.size() - 2);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (containingPage != null) { // not a top level page, point\n\t\t\t\t\t\t// to containing page\n\t\t\t\t\t\tGeneralViewParameters view = new GeneralViewParameters(VIEW_ID);\n\t\t\t\t\t\tview.setSendingPage(containingPage.pageId);\n\t\t\t\t\t\tview.setItemId(containingPage.pageItemId);\n\t\t\t\t\t\tview.setPath(Integer.toString(path.size() - 2));\n\t\t\t\t\t\tUIInternalLink.make(tofill, \"redirect-link\", containingPage.title, view);\n\t\t\t\t\t\tUIOutput.make(tofill, \"redirect\");\n\t\t\t\t\t} else {\n\t\t\t\t\t    UIOutput.make(tofill, \"error-div\");\n\t\t\t\t\t    UIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.not_available\"));\n\t\t\t\t\t}\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\n\t\t\t\t// top level page where prereqs not satisified. Output list of\n\t\t\t\t// pages he needs to do first\n\t\t\t\tUIOutput.make(tofill, \"pagetitle\", currentPage.getTitle());\n\t\t\t\tUIOutput.make(tofill, \"error-div\");\n\t\t\t\tUIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.has_prerequistes\"));\n\t\t\t\tUIBranchContainer errorList = UIBranchContainer.make(tofill, \"error-list:\");\n\t\t\t\tfor (String errorItem : needed) {\n\t\t\t\t\tUIBranchContainer errorListItem = UIBranchContainer.make(errorList, \"error-item:\");\n\t\t\t\t\tUIOutput.make(errorListItem, \"error-item-text\", errorItem);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\n\t\tToolSession toolSession = SessionManager.getCurrentToolSession();\n\t\tString helpurl = (String)toolSession.getAttribute(\"sakai-portal:help-action\");\n\t\tString reseturl = (String)toolSession.getAttribute(\"sakai-portal:reset-action\");\n\n\t\tPlacement placement = toolManager.getCurrentPlacement();\n\t\tString toolId = placement.getToolId();\n\t\tboolean inline = false;\n\n\t\t// this section shouldn't be needed, but the portal in trunk\n\t\t// isn't going this right\n\t\tif (httpServletRequest.getRequestURI().startsWith(\"/portal/site/\")) {\n\t\t    // inline without morpheus is weird, but it seems to work\n\t\t    // if I treat it like Sakai 10\n\t\t    if (\"morpheus\".equals(portalTemplates))\n\t\t\tinline = true;\n\t\t    if (reseturl == null)\n\t\t\treseturl = \"/portal/site/\" + simplePageBean.getCurrentSiteId() + \"/tool-reset/\" + ((ToolConfiguration)placement).getPageId() + \"?panel=Main\";\n\t\t    if (helpurl == null)\n\t\t\thelpurl = \"/portal/help/main?help=\" + toolId;\n\t\t} else if (httpServletRequest.getRequestURI().startsWith(\"/portal/pda/\")) {\n\t\t    reseturl = null;\n\t\t    helpurl = null;\n\t\t}\n\n\t\tString skinName = null;\n\t\tString skinRepo = null;\n\t\tString iconBase = null;\n\n\t\tUIComponent titlediv = UIOutput.make(tofill, \"titlediv\");\n\t\t// we need to do special CSS for old portal\n\t\tif (helpurl == null)\n\t\t    titlediv.decorate(new UIStyleDecorator(\"oldPortal\"));\t\t\n\n\t\tif (helpurl != null || reseturl != null) {\n\t\t    // these URLs are defined if we're in the neo portal\n\t\t    // in that case we need our own help and reset icons. We want\n\t\t    // to take them from the current skin, so find its prefix.\n\t\t    // unfortunately the neoportal tacks neo- on front of the skin\n\t\t    // name, so this is more complex than you might think.\n\n\t\t    skinRepo = ServerConfigurationService.getString(\"skin.repo\", \"/library/skin\");\n\t\t    iconBase = skinRepo + \"/\" + CSSUtils.adjustCssSkinFolder(null) + \"/images\";\n\n\t\t    UIVerbatim.make(tofill, \"iconstyle\", ICONSTYLE.replace(\"{}\", iconBase));\n\n\t\t}\n\n\t\tif (helpurl != null) {\n\t\t    UILink.make(tofill, (pageItem.getPageId() == 0 ? \"helpbutton\" : \"helpbutton2\"), helpurl).\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"onclick\",\n\t\t\t         \"openWindow('\" + helpurl + \"', 'Help', 'resizeable=yes,toolbar=no,scrollbars=yes,menubar=yes,width=800,height=600'); return false\")).\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"title\",\n\t\t\t\t messageLocator.getMessage(\"simplepage.help-button\")));\n\t\t    if (!inline)\n\t\t    UIOutput.make(tofill, (pageItem.getPageId() == 0 ? \"helpimage\" : \"helpimage2\")).\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"alt\",\n\t\t\t         messageLocator.getMessage(\"simplepage.help-button\")));\n\t\t    UIOutput.make(tofill, (pageItem.getPageId() == 0 ? \"helpnewwindow\" : \"helpnewwindow2\"), \n\t\t\t\t  messageLocator.getMessage(\"simplepage.opens-in-new\"));\n\t\t    UILink.make(tofill, \"directurl\").\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"rel\", \"#Main\" + Web.escapeJavascript(placement.getId()) + \"_directurl\")).\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.direct-link\")));\n\t\t    // if (inline) {\n\t\t\tUIOutput.make(tofill, \"directurl-div\").\n\t\t\t    decorate(new UIFreeAttributeDecorator(\"id\", \"Main\" + Web.escapeJavascript(placement.getId()) + \"_directurl\"));\n\t\t\tUIOutput.make(tofill, \"directurl-input\").\n\t\t\t    decorate(new UIFreeAttributeDecorator(\"onclick\", \"toggleShortUrlOutput('\" + myUrl() + \"/portal/directtool/\" + placement.getId() + \"/', this, 'Main\" + Web.escapeJavascript(placement.getId()) + \"_urlholder');\"));\n\t\t\tUIOutput.make(tofill, \"directurl-textarea\", myUrl() + \"/portal/directtool/\" + placement.getId() + \"/\").\n\t\t\t    decorate(new UIFreeAttributeDecorator(\"class\", \"portlet title-tools Main\" + Web.escapeJavascript(placement.getId()) + \"_urlholder\"));\n\t\t\t// } else\n\t\t\tUIOutput.make(tofill, \"directimage\").decorate(new UIFreeAttributeDecorator(\"alt\",\n\t\t\t\tmessageLocator.getMessage(\"simplepage.direct-link\")));\n\t\t}\n\n\t\tif (reseturl != null) {\n\t\t    UILink.make(tofill, (pageItem.getPageId() == 0 ? \"resetbutton\" : \"resetbutton2\"), reseturl).\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"onclick\",\n\t\t\t\t\"location.href='\" + reseturl + \"'; return false\")).\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"title\",\n\t\t\t        messageLocator.getMessage(\"simplepage.reset-button\")));\n\t\t    UIOutput.make(tofill, (pageItem.getPageId() == 0 ? \"resetimage\" : \"resetimage2\")).\n\t\t\tdecorate(new UIFreeAttributeDecorator(\"alt\",\n\t\t\t        messageLocator.getMessage(\"simplepage.reset-button\")));\n\t\t}\n\n\t\t// note page accessed. the code checks to see whether all the required\n\t\t// items on it have been finished, and if so marks it complete, else just updates\n\t\t// access date save the path because if user goes to it later we want to restore the\n\t\t// breadcrumbs\n\t\tif(newPath != null) {\n\t\t\tif(pageItem.getType() != SimplePageItem.STUDENT_CONTENT) {\n\t\t\t\tsimplePageBean.track(pageItem.getId(), newPath);\n\t\t\t}else {\n\t\t\t\tsimplePageBean.track(pageItem.getId(), newPath, currentPage.getPageId());\n\t\t\t}\n\t\t}\n\n\t\tif(currentPage.getOwner() != null && simplePageBean.getEditPrivs() == 0) {\n\t\t\tSimpleStudentPage student = simplePageToolDao.findStudentPageByPageId(currentPage.getPageId());\n\t\t\t\n\t\t\t// Make sure this is a top level student page\n\t\t\tif(student != null && pageItem.getGradebookId() != null) {\n\t\t\t\tUIOutput.make(tofill, \"gradingSpan\");\n\t\t\t\tUIOutput.make(tofill, \"commentsUUID\", String.valueOf(student.getId()));\n\t\t\t\tUIOutput.make(tofill, \"commentPoints\", String.valueOf((student.getPoints() != null? student.getPoints() : \"\")));\n\t\t\t\tUIOutput pointsBox = UIOutput.make(tofill, \"studentPointsBox\");\n\t\t\t\tUIOutput.make(tofill, \"topmaxpoints\", String.valueOf((pageItem.getGradebookPoints() != null? pageItem.getGradebookPoints():\"\")));\n\t\t\t\tif (ownerName != null)\n\t\t\t\t    pointsBox.decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.grade-for-student\").replace(\"{}\",ownerName)));\n\t\t\t\n\t\t\t\tList<SimpleStudentPage> studentPages = simplePageToolDao.findStudentPages(student.getItemId());\n\t\t\t\t\n\t\t\t\tCollections.sort(studentPages, new Comparator<SimpleStudentPage>() {\n\t\t\t\t\tpublic int compare(SimpleStudentPage o1, SimpleStudentPage o2) {\n\t\t\t\t\t\tString title1 = o1.getTitle();\n\t\t\t\t\t\tif (title1 == null)\n\t\t\t\t\t\t\ttitle1 = \"\";\n\t\t\t\t\t\tString title2 = o2.getTitle();\n\t\t\t\t\t\tif (title2 == null)\n\t\t\t\t\t\t\ttitle2 = \"\";\n\t\t\t\t\t\treturn title1.compareTo(title2);\n\t\t\t\t    }\n\t\t\t\t});\n\t\t\t\t\n\t\t\t\tfor(int in = 0; in < studentPages.size(); in++) {\n\t\t\t\t\tif(studentPages.get(in).isDeleted()) {\n\t\t\t\t\t\tstudentPages.remove(in);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n\t\t\t\tint i = -1;\n\t\t\t\n\t\t\t\tfor(int in = 0; in < studentPages.size(); in++) {\n\t\t\t\t\tif(student.getId() == studentPages.get(in).getId()) {\n\t\t\t\t\t\ti = in;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif(i > 0) {\n\t\t\t\t\tGeneralViewParameters eParams = new GeneralViewParameters(ShowPageProducer.VIEW_ID, studentPages.get(i-1).getPageId());\n\t\t\t\t\teParams.setItemId(studentPages.get(i-1).getItemId());\n\t\t\t\t\teParams.setPath(\"next\");\n\t\t\t\t\n\t\t\t\t\tUIInternalLink.make(tofill, \"gradingBack\", eParams);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tif(i < studentPages.size() - 1) {\n\t\t\t\t\tGeneralViewParameters eParams = new GeneralViewParameters(ShowPageProducer.VIEW_ID, studentPages.get(i+1).getPageId());\n\t\t\t\t\teParams.setItemId(studentPages.get(i+1).getItemId());\n\t\t\t\t\teParams.setPath(\"next\");\n\t\t\t\t\n\t\t\t\t\tUIInternalLink.make(tofill, \"gradingForward\", eParams);\n\t\t\t\t}\n\t\t\t\n\t\t\t\tprintGradingForm(tofill);\n\t\t\t}\n\t\t}\n\n\t\t// breadcrumbs\n\t\tif (pageItem.getPageId() != 0) {\n\t\t\t// Not top-level, so we have to show breadcrumbs\n\n\t\t\tList<SimplePageBean.PathEntry> breadcrumbs = simplePageBean.getHierarchy();\n\n\t\t\tint index = 0;\n\t\t\tif (breadcrumbs.size() > 1 || reseturl != null || helpurl !=  null) {\n\t\t\t\tUIOutput.make(tofill, \"crumbdiv\");\n\t\t\t\tif (breadcrumbs.size() > 1)\n\t\t\t\t    for (SimplePageBean.PathEntry e : breadcrumbs) {\n\t\t\t\t\t// don't show current page. We already have a title. This\n\t\t\t\t\t// was too much\n\t\t\t\t\tUIBranchContainer crumb = UIBranchContainer.make(tofill, \"crumb:\");\n\t\t\t\t\tGeneralViewParameters view = new GeneralViewParameters(VIEW_ID);\n\t\t\t\t\tview.setSendingPage(e.pageId);\n\t\t\t\t\tview.setItemId(e.pageItemId);\n\t\t\t\t\tview.setPath(Integer.toString(index));\n\t\t\t\t\tUIComponent link = null;\n\t\t\t\t\tif (index < breadcrumbs.size() - 1) {\n\t\t\t\t\t\t// Not the last item\n\t\t\t\t\t\tlink = UIInternalLink.make(crumb, \"crumb-link\", e.title, view);\n\t\t\t\t\t\tUIOutput.make(crumb, \"crumb-follow\", \" > \");\n\t\t\t\t\t} else {\n\t\t\t\t\t    if (inline)\n\t\t\t\t\t\tlink = UILink.make(crumb, \"crumb-link\", e.title, reseturl).\n\t\t\t\t\t\t    decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.reset-button\"))).\n\t\t\t\t\t\t    decorate(new UIFreeAttributeDecorator(\"class\", \"title-tools reset\"));\n\n\t\t\t\t\t    \n\t\t\t\t\t    else\n\t\t\t\t\t\tUIOutput.make(crumb, \"crumb-follow\", e.title).decorate(new UIStyleDecorator(\"bold\"));\n\t\t\t\t\t}\n\t\t\t\t\tif (index > 0 && inline)\n\t\t\t\t\t    link.decorate(new UIFreeAttributeDecorator(\"style\", \"font-size:1ex; font-weight:600; vertical-align:text-top\"));\n\n\t\t\t\t\tindex++;\n\t\t\t\t    }\n\t\t\t\telse {\n\t\t\t\t    UIBranchContainer crumb = UIBranchContainer.make(tofill, \"crumb:\");\n\t\t\t\t    UILink.make(crumb, \"crum-link\", currentPage.getTitle(), reseturl);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t    if (inline && reseturl != null)\n\t\t\t\tUILink.make(tofill, \"pagetitlelink\", currentPage.getTitle(), reseturl);\n\t\t\t    else\n\t\t\t\tUIOutput.make(tofill, \"pagetitle\", currentPage.getTitle());\n\t\t\t}\n\t\t} else {\n\t\t    if (inline && reseturl != null)\n\t\t\tUILink.make(tofill, \"pagetitlelink\", currentPage.getTitle(), reseturl);\n\t\t    else\n\t\t\tUIOutput.make(tofill, \"pagetitle\", currentPage.getTitle());\n\t\t}\n\n\t\t// see if there's a next item in sequence.\n\t\tsimplePageBean.addPrevLink(tofill, pageItem);\n\t\tsimplePageBean.addNextLink(tofill, pageItem);\n\n\t\t// swfObject is not currently used\n\t\tboolean shownSwfObject = false;\n\n\t\t// items to show\n\t\tList<SimplePageItem> itemList = (List<SimplePageItem>) simplePageBean.getItemsOnPage(currentPage.getPageId());\n\t\t\n\t\t// Move all items with sequence <= 0 to the end of the list.\n\t\t// Count is necessary to guarantee we don't infinite loop over a\n\t\t// list that only has items with sequence <= 0.\n\t\t// Becauses sequence number is < 0, these start out at the beginning\n\t\tint count = 1;\n\t\twhile(itemList.size() > count && itemList.get(0).getSequence() <= 0) {\n\t\t\titemList.add(itemList.remove(0));\n\t\t\tcount++;\n\t\t}\n\n\t\t// Make sure we only add the comments javascript file once,\n\t\t// even if there are multiple comments tools on the page.\n\t\tboolean addedCommentsScript = false;\n\t\tint commentsCount = 0;\n\n\t\t// Find the most recent comment on the page by current user\n\t\tlong postedCommentId = -1;\n\t\tif (params.postedComment) {\n\t\t\tpostedCommentId = findMostRecentComment();\n\t\t}\n\n\t\tboolean showDownloads = (simplePageBean.getCurrentSite().getProperties().getProperty(\"lessonbuilder-nodownloadlinks\") == null);\n\n\t\t//\n\t\t//\n\t\t// MAIN list of items\n\t\t//\n\t\t// produce the main table\n\n\t\t// Is anything visible?\n\t\t// Note that we don't need to check whether any item is available, since the first visible\n\t\t// item is always available.\n\t\tboolean anyItemVisible = false;\n\n\t\tif (itemList.size() > 0) {\n\t\t\tUIBranchContainer container = UIBranchContainer.make(tofill, \"itemContainer:\");\n\n\t\t\tboolean showRefresh = false;\n\t\t\tint textboxcount = 1;\n\n\t\t\tUIBranchContainer tableContainer = UIBranchContainer.make(container, \"itemTable:\");\n\n\t\t\t// formatting: two columns:\n\t\t\t// 1: edit buttons, omitted for student\n\t\t\t// 2: main content\n\t\t\t// For links, which have status icons, the main content is a flush\n\t\t\t// left div with the icon\n\t\t\t// followed by a div with margin-left:30px. That takes it beyond the\n\t\t\t// icon, and avoids the\n\t\t\t// wrap-around appearance you'd get without the margin.\n\t\t\t// Normally the description is shown as a second div with\n\t\t\t// indentation in the CSS.\n\t\t\t// That puts it below the link. However with a link that's a button,\n\t\t\t// we do float left\n\t\t\t// for the button so the text wraps around it. I think that's\n\t\t\t// probably what people would expect.\n\n\t\t\tUIOutput.make(tableContainer, \"colgroup\");\n\t\t\tif (canEditPage) {\n\t\t\t\tUIOutput.make(tableContainer, \"col1\");\n\t\t\t}\n\t\t\tUIOutput.make(tableContainer, \"col2\");\n\n\t\t\t// our accessiblity people say not to use TH for except for a data table\n\t\t\t// the table header is for accessibility tools only, so it's\n\t\t\t// positioned off screen\n\t\t\t//if (canEditPage) {\n\t\t\t//    \tUIOutput.make(tableContainer, \"header-edits\");\n\t\t\t// }\n\t\t\t\n\t\t\t// UIOutput.make(tableContainer, \"header-items\");\n\n\t\t\tfor (SimplePageItem i : itemList) {\n\t\t\t\t// listitem is mostly historical. it uses some shared HTML, but\n\t\t\t\t// if I were\n\t\t\t\t// doing it from scratch I wouldn't make this distinction. At\n\t\t\t\t// the moment it's\n\t\t\t\t// everything that isn't inline.\n\n\t\t\t\tboolean listItem = !(i.getType() == SimplePageItem.TEXT || i.getType() == SimplePageItem.MULTIMEDIA\n\t\t\t\t\t\t|| i.getType() == SimplePageItem.COMMENTS || i.getType() == SimplePageItem.STUDENT_CONTENT\n\t\t\t\t\t\t|| i.getType() == SimplePageItem.QUESTION || i.getType() == SimplePageItem.PEEREVAL);\n\t\t\t\t// (i.getType() == SimplePageItem.PAGE &&\n\t\t\t\t// \"button\".equals(i.getFormat())))\n\n\t\t\t\tif (!simplePageBean.isItemVisible(i, currentPage)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tanyItemVisible = true;\n\t\t\t\tUIBranchContainer tableRow = UIBranchContainer.make(tableContainer, \"item:\");\n\n\t\t\t\t// set class name showing what the type is, so people can do funky CSS\n\n\t\t\t\tString itemClassName = null;\n\n\t\t\t\tswitch (i.getType()) {\n\t\t\t\tcase SimplePageItem.RESOURCE: itemClassName = \"resourceType\"; break;\n\t\t\t\tcase SimplePageItem.PAGE: itemClassName = \"pageType\"; break;\n\t\t\t\tcase SimplePageItem.ASSIGNMENT: itemClassName = \"assignmentType\"; break;\n\t\t\t\tcase SimplePageItem.ASSESSMENT: itemClassName = \"assessmentType\"; break;\n\t\t\t\tcase SimplePageItem.TEXT: itemClassName = \"textType\"; break;\n\t\t\t\tcase SimplePageItem.URL: itemClassName = \"urlType\"; break;\n\t\t\t\tcase SimplePageItem.MULTIMEDIA: itemClassName = \"multimediaType\"; break;\n\t\t\t\tcase SimplePageItem.FORUM: itemClassName = \"forumType\"; break;\n\t\t\t\tcase SimplePageItem.COMMENTS: itemClassName = \"commentsType\"; break;\n\t\t\t\tcase SimplePageItem.STUDENT_CONTENT: itemClassName = \"studentContentType\"; break;\n\t\t\t\tcase SimplePageItem.QUESTION: itemClassName = \"question\"; break;\n\t\t\t\tcase SimplePageItem.BLTI: itemClassName = \"bltiType\"; break;\n\t\t\t\tcase SimplePageItem.PEEREVAL: itemClassName = \"peereval\"; break;\n\t\t\t\t}\n\n\n\n\t\t\t\tif (listItem){\n\t\t\t\t    itemClassName = itemClassName + \" listType\";\n\t\t\t\t}\n\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\titemClassName = itemClassName + \"  canEdit\";\n\t\t\t\t}\n\n\t\t\t\ttableRow.decorate(new UIFreeAttributeDecorator(\"class\", itemClassName));\n\n\t\t\t\t// you really need the HTML file open at the same time to make\n\t\t\t\t// sense of the following code\n\t\t\t\tif (listItem) { // Not an HTML Text, Element or Multimedia\n\t\t\t\t\t// Element\n\n\t\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\tUIOutput.make(tableRow, \"current-item-id2\", String.valueOf(i.getId()));\n\t\t\t\t\t}\n\n\t\t\t\t\t// users can declare a page item to be navigational. If so\n\t\t\t\t\t// we display\n\t\t\t\t\t// it to the left of the normal list items, and use a\n\t\t\t\t\t// button. This is\n\t\t\t\t\t// used for pages that are \"next\" pages, i.e. they replace\n\t\t\t\t\t// this page\n\t\t\t\t\t// rather than creating a new level in the breadcrumbs.\n\t\t\t\t\t// Since they can't\n\t\t\t\t\t// be required, they don't need the status image, which is\n\t\t\t\t\t// good because\n\t\t\t\t\t// they're displayed with colspan=2, so there's no space for\n\t\t\t\t\t// the image.\n\n\t\t\t\t\tboolean navButton = \"button\".equals(i.getFormat()) && !i.isRequired();\n\t\t\t\t\tboolean notDone = false;\n\t\t\t\t\tStatus status = Status.NOT_REQUIRED;\n\t\t\t\t\tif (!navButton) {\n\t\t\t\t\t\tstatus = handleStatusImage(tableRow, i);\n\t\t\t\t\t\tif (status == Status.REQUIRED) {\n\t\t\t\t\t\t\tnotDone = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tboolean isInline = (i.getType() == SimplePageItem.BLTI && \"inline\".equals(i.getFormat()));\n\n\t\t\t\t\tUIOutput linktd = UIOutput.make(tableRow, \"item-td\");\n\t\t\t\t\t\n\t\t\t\t\tUIOutput contentCol = UIOutput.make(tableRow, \"contentCol\");\n\t\t\t\t\t// BLTI seems to require explicit specificaiton for column width. Otherwise\n\t\t\t\t\t// we get 300 px wide. Don't know why. Doesn't happen to other iframes\n\t\t\t\t\tif (isInline)\n\t\t\t\t\t    contentCol.decorate(new UIFreeAttributeDecorator(\"style\", \"width:100%\"));\n\n\t\t\t\t\tUIBranchContainer linkdiv = null;\n\t\t\t\t\tif (!isInline) {\n\t\t\t\t\t    linkdiv = UIBranchContainer.make(tableRow, \"link-div:\");\n\t\t\t\t\t    UIOutput itemicon = UIOutput.make(linkdiv,\"item-icon\");\n\t\t\t\t\t    switch (i.getType()) {\n\t\t\t\t\t    case SimplePageItem.FORUM:\n\t\t\t\t\t\titemicon.decorate(new UIFreeAttributeDecorator(\"src\", \"/library/image/silk/comments.png\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t    case SimplePageItem.ASSIGNMENT:\n\t\t\t\t\t\titemicon.decorate(new UIFreeAttributeDecorator(\"src\", \"/library/image/silk/page_edit.png\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t    case SimplePageItem.ASSESSMENT:\n\t\t\t\t\t\titemicon.decorate(new UIFreeAttributeDecorator(\"src\", \"/library/image/silk/pencil.png\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t    case SimplePageItem.BLTI:\n\t\t\t\t\t\titemicon.decorate(new UIFreeAttributeDecorator(\"src\", \"/library/image/silk/application_go.png\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t    case SimplePageItem.PAGE:\n\t\t\t\t\t\titemicon.decorate(new UIFreeAttributeDecorator(\"src\", \"/library/image/silk/book_open.png\"));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t    case SimplePageItem.RESOURCE:\n\t\t\t\t\t\tString mimeType = i.getHtml();\n\n                        if(\"application/octet-stream\".equals(mimeType)) {\n                            // OS X reports octet stream for things like MS Excel documents.\n                            // Force a mimeType lookup so we get a decent icon.\n                            mimeType = null;\n                        }\n\n\t\t\t\t\t\tif (mimeType == null || mimeType.equals(\"\")) {\n\t\t\t\t\t\t    String s = i.getSakaiId();\n\t\t\t\t\t\t    int j = s.lastIndexOf(\".\");\n\t\t\t\t\t\t    if (j >= 0)\n\t\t\t\t\t\t\ts = s.substring(j+1);\n\t\t\t\t\t\t    mimeType = ContentTypeImageService.getContentType(s);\n\t\t\t\t\t\t    // System.out.println(\"type \" + s + \">\" + mimeType);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tString src = null;\n\t\t\t\t\t\tif (!useSakaiIcons)\n\t\t\t\t\t\t    src = imageToMimeMap.get(mimeType);\n\t\t\t\t\t\tif (src == null) {\n\t\t\t\t\t\t    String image = ContentTypeImageService.getContentTypeImage(mimeType);\n\t\t\t\t\t\t    if (image != null)\n\t\t\t\t\t\t\tsrc = \"/library/image/\" + image;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(src != null) {\n\t\t\t\t\t\t    itemicon.decorate(new UIFreeAttributeDecorator(\"src\", src));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\tUIOutput descriptiondiv = null;\n\n\t\t\t\t\t// refresh isn't actually used anymore. We've changed the\n\t\t\t\t\t// way things are\n\t\t\t\t\t// done so the user never has to request a refresh.\n\t\t\t\t\t//   FYI: this actually puts in an IFRAME for inline BLTI items\n\t\t\t\t\tshowRefresh = !makeLink(tableRow, \"link\", i, canSeeAll, currentPage, notDone, status) || showRefresh;\n\t\t\t\t\tUILink.make(tableRow, \"copylink\", i.getName(), \"http://lessonbuilder.sakaiproject.org/\" + i.getId() + \"/\").\n\t\t\t\t\t    decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.copylink2\").replace(\"{}\", i.getName())));\n\n\t\t\t\t\t// dummy is used when an assignment, quiz, or forum item is\n\t\t\t\t\t// copied\n\t\t\t\t\t// from another site. The way the copy code works, our\n\t\t\t\t\t// import code\n\t\t\t\t\t// doesn't have access to the necessary info to use the item\n\t\t\t\t\t// from the\n\t\t\t\t\t// new site. So we add a dummy, which generates an\n\t\t\t\t\t// explanation that the\n\t\t\t\t\t// author is going to have to choose the item from the\n\t\t\t\t\t// current site\n\t\t\t\t\tif (i.getSakaiId().equals(SimplePageItem.DUMMY)) {\n\t\t\t\t\t\tString code = null;\n\t\t\t\t\t\tswitch (i.getType()) {\n\t\t\t\t\t\tcase SimplePageItem.ASSIGNMENT:\n\t\t\t\t\t\t\tcode = \"simplepage.copied.assignment\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase SimplePageItem.ASSESSMENT:\n\t\t\t\t\t\t\tcode = \"simplepage.copied.assessment\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\tcase SimplePageItem.FORUM:\n\t\t\t\t\t\t\tcode = \"simplepage.copied.forum\";\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tdescriptiondiv = UIOutput.make(tableRow, \"description\", messageLocator.getMessage(code));\n\t\t\t\t\t} else {\n\t\t\t\t\t\tdescriptiondiv = UIOutput.make(tableRow, \"description\", i.getDescription());\n\t\t\t\t\t}\n\t\t\t\t\tif (isInline)\n\t\t\t\t\t    descriptiondiv.decorate(new UIFreeAttributeDecorator(\"style\", \"margin-top: 4px\"));\n\n\t\t\t\t\tif (!isInline) {\n\t\t\t\t\t    // nav button gets float left so any description goes to its\n\t\t\t\t\t    // right. Otherwise the\n\t\t\t\t\t    // description block will display underneath\n\t\t\t\t\t    if (\"button\".equals(i.getFormat())) {\n\t\t\t\t\t\tlinkdiv.decorate(new UIFreeAttributeDecorator(\"style\", \"float:none\"));\n\t\t\t\t\t    }\n\t\t\t\t\t    // for accessibility\n\t\t\t\t\t    if (navButton) {\n\t\t\t\t\t\tlinkdiv.decorate(new UIFreeAttributeDecorator(\"role\", \"navigation\"));\n\t\t\t\t\t    }\n\t\t\t\t\t}\n\n\t\t\t\t\t// note that a lot of the info here is used by the\n\t\t\t\t\t// javascript that prepares\n\t\t\t\t\t// the jQuery dialogs\n\t\t\t\t\tString itemGroupString = null;\n\t\t\t\t\tboolean entityDeleted = false;\n\t\t\t\t\tboolean notPublished = false;\n\t\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\tUIOutput.make(tableRow, \"edit-td\");\n\t\t\t\t\t\tUILink.make(tableRow, \"edit-link\", messageLocator.getMessage(\"simplepage.editItem\"), \"\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.generic\").replace(\"{}\", i.getName())));\n\n\t\t\t\t\t\t// the following information is displayed using <INPUT\n\t\t\t\t\t\t// type=hidden ...\n\t\t\t\t\t\t// it contains information needed to populate the \"edit\"\n\t\t\t\t\t\t// popup dialog\n\t\t\t\t\t\tUIOutput.make(tableRow, \"prerequisite-info\", String.valueOf(i.isPrerequisite()));\n\n\t\t\t\t\t\tif (i.getType() == SimplePageItem.ASSIGNMENT) {\n\t\t\t\t\t\t\t// the type indicates whether scoring is letter\n\t\t\t\t\t\t\t// grade, number, etc.\n\t\t\t\t\t\t\t// the javascript needs this to present the right\n\t\t\t\t\t\t\t// choices to the user\n\t\t\t\t\t\t\t// types 6 and 8 aren't legal scoring types, so they\n\t\t\t\t\t\t\t// are used as\n\t\t\t\t\t\t\t// markers for quiz or forum. I ran out of numbers\n\t\t\t\t\t\t\t// and started using\n\t\t\t\t\t\t\t// text for things that aren't scoring types. That's\n\t\t\t\t\t\t\t// better anyway\n\t\t\t\t\t\t\tint type = 4;\n\t\t\t\t\t\t\tLessonEntity assignment = null;\n\t\t\t\t\t\t\tif (!i.getSakaiId().equals(SimplePageItem.DUMMY)) {\n\t\t\t\t\t\t\t\tassignment = assignmentEntity.getEntity(i.getSakaiId(), simplePageBean);\n\t\t\t\t\t\t\t\tif (assignment != null) {\n\t\t\t\t\t\t\t\t\ttype = assignment.getTypeOfGrade();\n\t\t\t\t\t\t\t\t\tString editUrl = assignment.editItemUrl(simplePageBean);\n\t\t\t\t\t\t\t\t\tif (editUrl != null) {\n\t\t\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"edit-url\", editUrl);\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, assignment, true);\n\t\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-groups\", itemGroupString);\n\t\t\t\t\t\t\t\t\tif (!assignment.objectExists())\n\t\t\t\t\t\t\t\t\t    entityDeleted = true;\n\t\t\t\t\t\t\t\t\telse if (assignment.notPublished())\n\t\t\t\t\t\t\t\t\t    notPublished = true;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"type\", String.valueOf(type));\n\t\t\t\t\t\t\tString requirement = String.valueOf(i.getSubrequirement());\n\t\t\t\t\t\t\tif ((type == SimplePageItem.PAGE || type == SimplePageItem.ASSIGNMENT) && i.getSubrequirement()) {\n\t\t\t\t\t\t\t\trequirement = i.getRequirementText();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"requirement-text\", requirement);\n\t\t\t\t\t\t} else if (i.getType() == SimplePageItem.ASSESSMENT) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"type\", \"6\"); // Not used by\n\t\t\t\t\t\t\t// assignments,\n\t\t\t\t\t\t\t// so it is\n\t\t\t\t\t\t\t// safe to dedicate to assessments\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"requirement-text\", (i.getSubrequirement() ? i.getRequirementText() : \"false\"));\n\t\t\t\t\t\t\tLessonEntity quiz = quizEntity.getEntity(i.getSakaiId(),simplePageBean);\n\t\t\t\t\t\t\tif (quiz != null) {\n\t\t\t\t\t\t\t\tString editUrl = quiz.editItemUrl(simplePageBean);\n\t\t\t\t\t\t\t\tif (editUrl != null) {\n\t\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"edit-url\", editUrl);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\teditUrl = quiz.editItemSettingsUrl(simplePageBean);\n\t\t\t\t\t\t\t\tif (editUrl != null) {\n\t\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"edit-settings-url\", editUrl);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, quiz, true);\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-groups\", itemGroupString);\n\t\t\t\t\t\t\t\tif (!quiz.objectExists())\n\t\t\t\t\t\t\t\t    entityDeleted = true;\n\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t    notPublished = quizEntity.notPublished(i.getSakaiId());\n\t\t\t\t\t\t} else if (i.getType() == SimplePageItem.BLTI) {\n\t\t\t\t\t\t    UIOutput.make(tableRow, \"type\", \"b\");\n\t\t\t\t\t\t    LessonEntity blti= (bltiEntity == null ? null : bltiEntity.getEntity(i.getSakaiId()));\n\t\t\t\t\t\t    if (blti != null) {\n\t\t\t\t\t\t\tString editUrl = blti.editItemUrl(simplePageBean);\n\t\t\t\t\t\t\tif (editUrl != null)\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"edit-url\", editUrl);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-format\", i.getFormat());\n\n\t\t\t\t\t\t\tif (i.getHeight() != null)\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"item-height\", i.getHeight());\n\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, null, true);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-groups\", itemGroupString );\n\t\t\t\t\t\t\tif (!blti.objectExists())\n\t\t\t\t\t\t\t    entityDeleted = true;\n\t\t\t\t\t\t\telse if (blti.notPublished())\n\t\t\t\t\t\t\t    notPublished = true;\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t} else if (i.getType() == SimplePageItem.FORUM) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"extra-info\");\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"type\", \"8\");\n\t\t\t\t\t\t\tLessonEntity forum = forumEntity.getEntity(i.getSakaiId());\n\t\t\t\t\t\t\tif (forum != null) {\n\t\t\t\t\t\t\t\tString editUrl = forum.editItemUrl(simplePageBean);\n\t\t\t\t\t\t\t\tif (editUrl != null) {\n\t\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"edit-url\", editUrl);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, forum, true);\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-groups\", itemGroupString);\n\t\t\t\t\t\t\t\tif (!forum.objectExists())\n\t\t\t\t\t\t\t\t    entityDeleted = true;\n\t\t\t\t\t\t\t\telse if (forum.notPublished())\n\t\t\t\t\t\t\t\t    notPublished = true;\n\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else if (i.getType() == SimplePageItem.PAGE) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"type\", \"page\");\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"page-next\", Boolean.toString(i.getNextPage()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"page-button\", Boolean.toString(\"button\".equals(i.getFormat())));\n\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, null, true);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-groups\", itemGroupString);\n\t\t\t\t\t\t} else if (i.getType() == SimplePageItem.RESOURCE) {\n\t\t\t\t\t\t        try {\n\t\t\t\t\t\t\t    itemGroupString = simplePageBean.getItemGroupStringOrErr(i, null, true);\n\t\t\t\t\t\t\t} catch (IdUnusedException e) {\n\t\t\t\t\t\t\t    itemGroupString = \"\";\n\t\t\t\t\t\t\t    entityDeleted = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (simplePageBean.getInherited())\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"item-groups\", \"--inherited--\");\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"item-groups\", itemGroupString );\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-samewindow\", Boolean.toString(i.isSameWindow()));\n\n\t\t\t\t\t\t\tUIVerbatim.make(tableRow, \"item-path\", getItemPath(i));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // end of canEditPage\n\n\t\t\t\t\tif (canSeeAll) {\n\t\t\t\t\t\t// haven't set up itemgroupstring yet\n\t\t\t\t\t\tif (!canEditPage) {\n\t\t\t\t\t\t    if (!i.getSakaiId().equals(SimplePageItem.DUMMY)) {\n\t\t\t\t\t\t\tLessonEntity lessonEntity = null;\n\t\t\t\t\t\t\tswitch (i.getType()) {\n\t\t\t\t\t\t\tcase SimplePageItem.ASSIGNMENT:\n\t\t\t\t\t\t\t    lessonEntity = assignmentEntity.getEntity(i.getSakaiId(), simplePageBean);\n\t\t\t\t\t\t\t    if (lessonEntity != null)\n\t\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, lessonEntity, true);\n\t\t\t\t\t\t\t    if (!lessonEntity.objectExists())\n\t\t\t\t\t\t\t\tentityDeleted = true;\n\t\t\t\t\t\t\t    else if (lessonEntity.notPublished())\n\t\t\t\t\t\t\t\tnotPublished = true;\n\t\t\t\t\t\t\t    break;\n\t\t\t\t\t\t\tcase SimplePageItem.ASSESSMENT:\n\t\t\t\t\t\t\t    lessonEntity = quizEntity.getEntity(i.getSakaiId(),simplePageBean);\n\t\t\t\t\t\t\t    if (lessonEntity != null)\n\t\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, lessonEntity, true);\n\t\t\t\t\t\t\t    else \n\t\t\t\t\t\t\t\tnotPublished = quizEntity.notPublished(i.getSakaiId());\n\t\t\t\t\t\t\t    if (!lessonEntity.objectExists())\n\t\t\t\t\t\t\t\tentityDeleted = true;\n\t\t\t\t\t\t\t    break;\n\t\t\t\t\t\t\tcase SimplePageItem.FORUM:\n\t\t\t\t\t\t\t    lessonEntity = forumEntity.getEntity(i.getSakaiId());\n\t\t\t\t\t\t\t    if (lessonEntity != null)\n\t\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, lessonEntity, true);\n\t\t\t\t\t\t\t    if (!lessonEntity.objectExists())\n\t\t\t\t\t\t\t\tentityDeleted = true;\n\t\t\t\t\t\t\t    else if (lessonEntity.notPublished())\n\t\t\t\t\t\t\t\tnotPublished = true;\n\t\t\t\t\t\t\t    break;\n\t\t\t\t\t\t\tcase SimplePageItem.BLTI:\n\t\t\t\t\t\t\t    if (bltiEntity != null)\n\t\t\t\t\t\t\t\tlessonEntity = bltiEntity.getEntity(i.getSakaiId());\n\t\t\t\t\t\t\t    if (lessonEntity != null)\n\t\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupString(i, null, true);\n\t\t\t\t\t\t\t    if (!lessonEntity.objectExists())\n\t\t\t\t\t\t\t\tentityDeleted = true;\n\t\t\t\t\t\t\t    else if (lessonEntity.notPublished())\n\t\t\t\t\t\t\t\tnotPublished = true;\n\t\t\t\t\t\t\t    break;\n\t\t\t\t\t\t\tcase SimplePageItem.PAGE:\n\t\t\t\t\t\t\t    itemGroupString = simplePageBean.getItemGroupString(i, null, true);\n\t\t\t\t\t\t\t    break;\n\t\t\t\t\t\t\tcase SimplePageItem.RESOURCE:\n\t\t\t\t\t\t\t    try {\n\t\t\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupStringOrErr(i, null, true);\n\t\t\t\t\t\t\t    } catch (IdUnusedException e) {\n\t\t\t\t\t\t\t\titemGroupString = \"\";\n\t\t\t\t\t\t\t\tentityDeleted = true;\n\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t    break;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tString releaseString = simplePageBean.getReleaseString(i);\n\t\t\t\t\t\tif (itemGroupString != null || releaseString != null || entityDeleted || notPublished) {\n\t\t\t\t\t\t\tif (itemGroupString != null)\n\t\t\t\t\t\t\t    itemGroupString = simplePageBean.getItemGroupTitles(itemGroupString, i);\n\t\t\t\t\t\t\tif (itemGroupString != null) {\n\t\t\t\t\t\t\t    itemGroupString = \" [\" + itemGroupString + \"]\";\n\t\t\t\t\t\t\t    if (releaseString != null)\n\t\t\t\t\t\t\t\titemGroupString = \" \" + releaseString + itemGroupString;\n\t\t\t\t\t\t\t} else if (releaseString != null)\n\t\t\t\t\t\t\t    itemGroupString = \" \" + releaseString;\n\t\t\t\t\t\t\tif (notPublished) {\n\t\t\t\t\t\t\t    if (itemGroupString != null)\n\t\t\t\t\t\t\t\titemGroupString = itemGroupString + \" \" + \n\t\t\t\t\t\t\t\t    messageLocator.getMessage(\"simplepage.not-published\");\n\t\t\t\t\t\t\t    else\n\t\t\t\t\t\t\t\titemGroupString = messageLocator.getMessage(\"simplepage.not-published\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (entityDeleted) {\n\t\t\t\t\t\t\t    if (itemGroupString != null)\n\t\t\t\t\t\t\t\titemGroupString = itemGroupString + \" \" + \n\t\t\t\t\t\t\t\t    messageLocator.getMessage(\"simplepage.deleted-entity\");\n\t\t\t\t\t\t\t    else\n\t\t\t\t\t\t\t\titemGroupString = messageLocator.getMessage(\"simplepage.deleted-entity\");\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tif (itemGroupString != null)\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, (isInline ? \"item-group-titles-div\" : \"item-group-titles\"), itemGroupString);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t} // end of canSeeAll\n\n\t\t\t\t\t// the following are for the inline item types. Multimedia\n\t\t\t\t\t// is the most complex because\n\t\t\t\t\t// it can be IMG, IFRAME, or OBJECT, and Youtube is treated\n\t\t\t\t\t// separately\n\n\t\t\t\t} else if (i.getType() == SimplePageItem.MULTIMEDIA) {\n\t\t\t\t    // This code should be read together with the code in SimplePageBean\n\t\t\t\t    // that sets up this data, method addMultimedia.  Most display is set\n\t\t\t\t    // up here, but note that show-page.js invokes the jquery oembed on all\n\t\t\t\t    // <A> items with class=\"oembed\".\n\n\t\t\t\t    // historically this code was to display files ,and urls leading to things\n\t\t\t\t    // like MP4. as backup if we couldn't figure out what to do we'd put something\n\t\t\t\t    // in an iframe. The one exception is youtube, which we supposed explicitly.\n\t\t\t\t    //   However we now support several ways to embed content. We use the\n\t\t\t\t    // multimediaDisplayType code to indicate which. The codes are\n\t\t\t\t    // \t 1 -- embed code, 2 -- av type, 3 -- oembed, 4 -- iframe\n\t\t\t\t    // 2 is the original code: MP4, image, and as a special case youtube urls\n\t\t\t\t    // since we have old entries with no type code, and that behave the same as\n\t\t\t\t    // 2, we start by converting 2 to null.\n\t\t\t\t    //  then the logic is\n\t\t\t\t    //  if type == null & youtube, do youtube\n\t\t\t\t    //  if type == null & image, do iamge\n\t\t\t\t    //  if type == null & not HTML do MP4 or other player for file \n\t\t\t\t    //  final fallthrough to handel the new types, with IFRAME if all else fails\n\t\t\t\t    // the old code creates ojbects in ContentHosting for both files and URLs.\n\t\t\t\t    // The new code saves the embed code or URL itself as an atteibute of the item\n\t\t\t\t    // If I were doing it again, I wouldn't create the ContebtHosting item\n\t\t\t\t    //   Note that IFRAME is only used for something where the far end claims the MIME\n\t\t\t\t    // type is HTML. For weird stuff like MS Word files I use the file display code, which\n\t\t\t\t    // will end up producing <OBJECT>.\n\n\t\t\t\t\t// the reason this code is complex is that we try to choose\n\t\t\t\t\t// the best\n\t\t\t\t\t// HTML for displaying the particular type of object. We've\n\t\t\t\t\t// added complexities\n\t\t\t\t\t// over time as we get more experience with different\n\t\t\t\t\t// object types and browsers.\n\n\t\t\t\t \tString itemGroupString = null;\n\t\t\t\t\tString itemGroupTitles = null;\n\t\t\t\t\tboolean entityDeleted = false;\n\t\t\t\t\t// new format explicit display indication\n\t\t\t\t\tString mmDisplayType = i.getAttribute(\"multimediaDisplayType\");\n\t\t\t\t\t// 2 is the generic \"use old display\" so treat it as null\n\t\t\t\t\tif (\"\".equals(mmDisplayType) || \"2\".equals(mmDisplayType))\n\t\t\t\t\t    mmDisplayType = null;\n\t\t\t\t\tif (canSeeAll) {\n\t\t\t\t\t    try {\n\t\t\t\t\t\titemGroupString = simplePageBean.getItemGroupStringOrErr(i, null, true);\n\t\t\t\t\t    } catch (IdUnusedException e) {\n\t\t\t\t\t\titemGroupString = \"\";\n\t\t\t\t\t\tentityDeleted = true;\n\t\t\t\t\t    }\n\t\t\t\t\t    itemGroupTitles = simplePageBean.getItemGroupTitles(itemGroupString, i);\n\t\t\t\t\t    if (entityDeleted) {\n\t\t\t\t\t\tif (itemGroupTitles != null)\n\t\t\t\t\t\t    itemGroupTitles = itemGroupTitles + \" \" + messageLocator.getMessage(\"simplepage.deleted-entity\");\n\t\t\t\t\t\telse\n\t\t\t\t\t\t    itemGroupTitles = messageLocator.getMessage(\"simplepage.deleted-entity\");\n\t\t\t\t\t    }\n\t\t\t\t\t    if (itemGroupTitles != null) {\n\t\t\t\t\t\titemGroupTitles = \"[\" + itemGroupTitles + \"]\";\n\t\t\t\t\t    }\n\t\t\t\t\t    UIOutput.make(tableRow, \"item-groups\", itemGroupString);\n\t\t\t\t\t} else if (entityDeleted)\n\t\t\t\t\t    continue;\n\t\t\t\t\t\n\t\t\t\t\tif (!\"1\".equals(mmDisplayType) && !\"3\".equals(mmDisplayType))\n\t\t\t\t\t    UIVerbatim.make(tableRow, \"item-path\", getItemPath(i));\n\n\t\t\t\t\t// the reason this code is complex is that we try to choose\n\t\t\t\t\t// the best\n\t\t\t\t\t// HTML for displaying the particular type of object. We've\n\t\t\t\t\t// added complexities\n\t\t\t\t\t// over time as we get more experience with different\n\t\t\t\t\t// object types and browsers.\n\n\t\t\t\t\tStringTokenizer token = new StringTokenizer(i.getSakaiId(), \".\");\n\n\t\t\t\t\tString extension = \"\";\n\n\t\t\t\t\twhile (token.hasMoreTokens()) {\n\t\t\t\t\t\textension = token.nextToken().toLowerCase();\n\t\t\t\t\t}\n\n\t\t\t\t\t// the extension is almost never used. Normally we have\n\t\t\t\t\t// the MIME type and use it. Extension is used only if\n\t\t\t\t\t// for some reason we don't have the MIME type\n\t\t\t\t\tUIComponent item;\n\t\t\t\t\tString youtubeKey;\n\n\t\t\t\t\tLength width = null;\n\t\t\t\t\tif (i.getWidth() != null) {\n\t\t\t\t\t\twidth = new Length(i.getWidth());\n\t\t\t\t\t}\n\t\t\t\t\tLength height = null;\n\t\t\t\t\tif (i.getHeight() != null) {\n\t\t\t\t\t\theight = new Length(i.getHeight());\n\t\t\t\t\t}\n\n\t\t\t\t\t// Get the MIME type. For multimedia types is should be in\n\t\t\t\t\t// the html field.\n\t\t\t\t\t// The old code saved the URL there. So if it looks like a\n\t\t\t\t\t// URL ignore it.\n\t\t\t\t\tString mimeType = i.getHtml();\n\t\t\t\t\tif (mimeType != null && (mimeType.startsWith(\"http\") || mimeType.equals(\"\"))) {\n\t\t\t\t\t\tmimeType = null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// here goes. dispatch on the type and produce the right tag\n\t\t\t\t\t// type,\n\t\t\t\t\t// followed by the hidden INPUT tags with information for the\n\t\t\t\t\t// edit dialog\n\t\t\t\t\tif (mmDisplayType == null && simplePageBean.isImageType(i)) {\n\n\t\t\t\t\t    if(canSeeAll || simplePageBean.isItemAvailable(i)) {\n\t\t\t\t\t\t    UIOutput.make(tableRow, \"imageSpan\");\n\n\t\t\t\t\t\t    if (itemGroupString != null) {\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"item-group-titles3\", itemGroupTitles);\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"item-groups3\", itemGroupString);\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    String imageName = i.getAlt();\n\t\t\t\t\t\t    if (imageName == null || imageName.equals(\"\")) {\n\t\t\t\t\t\t\t    imageName = abbrevUrl(i.getURL());\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    item = UIOutput.make(tableRow, \"image\").decorate(new UIFreeAttributeDecorator(\"src\", i.getItemURL(simplePageBean.getCurrentSiteId(),currentPage.getOwner()))).decorate(new UIFreeAttributeDecorator(\"alt\", imageName));\n\t\t\t\t\t\t    if (lengthOk(width)) {\n\t\t\t\t\t\t\t    item.decorate(new UIFreeAttributeDecorator(\"width\", width.getOld()));\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t\n\t\t\t\t\t\t    if(lengthOk(height)) {\n\t\t\t\t\t\t\t    item.decorate(new UIFreeAttributeDecorator(\"height\", height.getOld()));\n\t\t\t\t\t\t    }\n\t\t\t\t\t    } else {\n\t\t\t\t\t        UIComponent notAvailableText = UIOutput.make(tableRow, \"notAvailableText\", messageLocator.getMessage(\"simplepage.multimediaItemUnavailable\"));\n\t\t\t\t\t\t// Grey it out\n\t\t\t\t\t\t    notAvailableText.decorate(new UIFreeAttributeDecorator(\"class\", \"disabled-text-item\"));\n\t\t\t\t\t    }\n\n\t\t\t\t\t\t// stuff for the jquery dialog\n\t\t\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"imageHeight\", getOrig(height));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"imageWidth\", getOrig(width));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"mimetype2\", mimeType);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"current-item-id4\", Long.toString(i.getId()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-prereq3\", String.valueOf(i.isPrerequisite()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"editmm-td\");\n\t\t\t\t\t\t\tUILink.make(tableRow, \"iframe-edit\", messageLocator.getMessage(\"simplepage.editItem\"), \"\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.url\").replace(\"{}\", abbrevUrl(i.getURL()))));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tUIOutput.make(tableRow, \"description2\", i.getDescription());\n\n\t\t\t\t\t} else if (mmDisplayType == null && (youtubeKey = simplePageBean.getYoutubeKey(i)) != null) {\n\t\t\t\t\t\tString youtubeUrl = SimplePageBean.getYoutubeUrlFromKey(youtubeKey);\n\n\t\t\t\t\t\tif(canSeeAll || simplePageBean.isItemAvailable(i)) {\n\t\t\t\t\t\t    UIOutput.make(tableRow, \"youtubeSpan\");\n\n\t\t\t\t\t\t    if (itemGroupString != null) {\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"item-group-titles4\", itemGroupTitles);\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"item-groups4\", itemGroupString);\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    // if width is blank or 100% scale the height\n\t\t\t\t\t\t    if (width != null && height != null && !height.number.equals(\"\")) {\n\t\t\t\t\t\t\t    if (width.number.equals(\"\") && width.unit.equals(\"\") || width.number.equals(\"100\") && width.unit.equals(\"%\")) {\n\n\t\t\t\t\t\t\t\t    int h = Integer.parseInt(height.number);\n\t\t\t\t\t\t\t\t    if (h > 0) {\n\t\t\t\t\t\t\t\t\t    width.number = Integer.toString((int) Math.round(h * 1.641025641));\n\t\t\t\t\t\t\t\t\t    width.unit = height.unit;\n\t\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t    }\n\n\t\t\t\t\t\t    // <object style=\"height: 390px; width: 640px\"><param\n\t\t\t\t\t\t    // name=\"movie\"\n\t\t\t\t\t\t    // value=\"http://www.youtube.com/v/AKIC7OQqBrA?version=3\"><param\n\t\t\t\t\t\t    // name=\"allowFullScreen\" value=\"true\"><param\n\t\t\t\t\t\t    // name=\"allowScriptAccess\" value=\"always\"><embed\n\t\t\t\t\t\t    // src=\"http://www.youtube.com/v/AKIC7OQqBrA?version=3\"\n\t\t\t\t\t\t    // type=\"application/x-shockwave-flash\"\n\t\t\t\t\t\t    // allowfullscreen=\"true\" allowScriptAccess=\"always\"\n\t\t\t\t\t\t    // width=\"640\" height=\"390\"><\/object>\n\n\t\t\t\t\t\t    item = UIOutput.make(tableRow, \"youtubeIFrame\");\n\t\t\t\t\t\t    // youtube seems ok with length and width\n\t\t\t\t\t\t    if(lengthOk(height)) {\n\t\t\t\t\t\t\t    item.decorate(new UIFreeAttributeDecorator(\"height\", height.getOld()));\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t\n\t\t\t\t\t\t    if(lengthOk(width)) {\n\t\t\t\t\t\t\t    item.decorate(new UIFreeAttributeDecorator(\"width\", width.getOld()));\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t\n\t\t\t\t\t\t    item.decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.youtube_player\")));\n\t\t\t\t\t\t    item.decorate(new UIFreeAttributeDecorator(\"src\", youtubeUrl));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t    UIComponent notAvailableText = UIOutput.make(tableRow, \"notAvailableText\", messageLocator.getMessage(\"simplepage.multimediaItemUnavailable\"));\n\t\t\t\t\t\t    // Grey it out\n\t\t\t\t\t\t    notAvailableText.decorate(new UIFreeAttributeDecorator(\"class\", \"disabled-text-item\"));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"youtubeId\", String.valueOf(i.getId()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"currentYoutubeURL\", youtubeUrl);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"currentYoutubeHeight\", getOrig(height));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"currentYoutubeWidth\", getOrig(width));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"current-item-id5\", Long.toString(i.getId()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-prereq4\", String.valueOf(i.isPrerequisite()));\n\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"youtube-td\");\n\t\t\t\t\t\t\tUILink.make(tableRow, \"youtube-edit\", messageLocator.getMessage(\"simplepage.editItem\"), \"\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.youtube\")));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tUIOutput.make(tableRow, \"description4\", i.getDescription());\n\t\t\t\t\t\t\n\t\t\t\t\t\t// as of Oct 28, 2010, we store the mime type. mimeType\n\t\t\t\t\t\t// null is an old entry.\n\t\t\t\t\t\t// For that use the old approach of checking the\n\t\t\t\t\t\t// extension.\n\t\t\t\t\t\t// Otherwise we want to use iframes for HTML and OBJECT\n\t\t\t\t\t\t// for everything else\n\t\t\t\t\t\t// We need the iframes because IE up through 8 doesn't\n\t\t\t\t\t\t// reliably display\n\t\t\t\t\t\t// HTML with OBJECT. Experiments show that everything\n\t\t\t\t\t\t// else works with OBJECT\n\t\t\t\t\t\t// for most browsers. Unfortunately IE, even IE 9,\n\t\t\t\t\t\t// doesn't reliably call the\n\t\t\t\t\t\t// right player with OBJECT. EMBED works. But it's not\n\t\t\t\t\t\t// as nice because you can't\n\t\t\t\t\t\t// nest error recovery code. So we use OBJECT for\n\t\t\t\t\t\t// everything except IE, where we\n\t\t\t\t\t\t// use EMBED. OBJECT does work with Flash.\n\t\t\t\t\t\t// application/xhtml+xml is XHTML.\n\n\t\t\t\t\t} else if (mmDisplayType == null && \n\t\t\t\t\t\t   ((mimeType != null && !mimeType.equals(\"text/html\") && !mimeType.equals(\"application/xhtml+xml\")) ||\n\t\t\t\t\t\t    // ((mimeType != null && (mimeType.startsWith(\"audio/\") || mimeType.startsWith(\"video/\"))) || \n\t\t\t\t\t\t    (mimeType == null && !(Arrays.binarySearch(htmlTypes, extension) >= 0)))) {\n\n                        // except where explicit display is set,\n\t\t\t// this code is used for everything that isn't an image,\n                        // Youtube, or HTML\n\t\t\t// This could be audio, video, flash, or something random like MS word.\n                        // Random stuff will turn into an object.\n                        // HTML is done with an IFRAME in the next \"if\" case\n\t\t        // The explicit display types are handled there as well\n\n\t\t\t\t\t    // in theory the things that fall through to iframe are\n\t\t\t\t\t    // html and random stuff without a defined mime type\n\t\t\t\t\t    // random stuff with mime type is displayed with object\n\n\t\t\t\t\t\tif (mimeType == null) {\n\t\t\t\t\t\t    mimeType = \"\";\n                        }\n\n                        String oMimeType = mimeType; // in case we change it for\n                        // FLV or others\n\n                        if (itemGroupString != null) {\n                            UIOutput.make(tableRow, \"item-group-titles5\", itemGroupTitles);\n                            UIOutput.make(tableRow, \"item-groups5\", itemGroupString);\n                        }\n\n\t\t\tUIOutput.make(tableRow, \"movieSpan\");\n\n                        if(canSeeAll || simplePageBean.isItemAvailable(i)) {\n\n\t\t\t\t\t\t    UIComponent item2;\n\n                            String movieUrl = i.getItemURL(simplePageBean.getCurrentSiteId(),currentPage.getOwner());\n                            // movieUrl = \"https://heidelberg.rutgers.edu\" + movieUrl;\n                            // Safari doens't always pass cookies to plugins, so we have to pass the arg\n                            // this requires session.parameter.allow=true in sakai.properties\n                            // don't pass the arg unless that is set, since the whole point of defaulting\n                            // off is to not expose the session id\n                            String sessionParameter = getSessionParameter(movieUrl);\n                            if (sessionParameter != null)\n                                movieUrl = movieUrl + \"?lb.session=\" + sessionParameter;\n\n\t\t\t    UIComponent movieLink = UIOutput.make(tableRow, \"movie-link-div\");\n\t\t\t    if (showDownloads)\n\t\t\t\tUILink.make(tableRow, \"movie-link-link\", messageLocator.getMessage(\"simplepage.download_file\"), movieUrl);\n\n                            //\tif (allowSessionId)\n                            //  movieUrl = movieUrl + \"?sakai.session=\" + SessionManager.getCurrentSession().getId();\n                            boolean useFlvPlayer = false;\n\n                            // isMp4 means we try the flash player (if not HTML5)\n                            // we also try the flash player for FLV but for mp4 we do an\n                            // additional backup if flash fails, but that doesn't make sense for FLV\n                            boolean isMp4 = Arrays.binarySearch(mp4Types, mimeType) >= 0;\n                            boolean isHtml5 = Arrays.binarySearch(html5Types, mimeType) >= 0;\n                            \n                            // wrap whatever stuff we decide to put out in HTML5 if appropriate\n                            // javascript is used to do the wrapping, because RSF can't really handle this\n                            if (isHtml5) {\n\t\t\t\t// flag for javascript\n                                boolean isAudio = mimeType.startsWith(\"audio/\");\n                                UIComponent h5video = UIOutput.make(tableRow, (isAudio? \"h5audio\" : \"h5video\"));\n                                UIComponent h5source = UIOutput.make(tableRow, (isAudio? \"h5asource\" : \"h5source\"));\n                                if (lengthOk(height) && height.getOld().indexOf(\"%\") < 0)\n                                h5video.decorate(new UIFreeAttributeDecorator(\"height\", height.getOld()));\n                                if (lengthOk(width) && width.getOld().indexOf(\"%\") < 0)\n                                h5video.decorate(new UIFreeAttributeDecorator(\"width\", width.getOld()));\n                                h5source.decorate(new UIFreeAttributeDecorator(\"src\", movieUrl)).\n                                decorate(new UIFreeAttributeDecorator(\"type\", mimeType));\n\t\t\t\tString caption = i.getAttribute(\"captionfile\");\n\t\t\t\tif (!isAudio && caption != null && caption.length() > 0) {\n\t\t\t\t    movieLink.decorate(new UIFreeAttributeDecorator(\"class\", \"has-caption allow-caption\"));\n\t\t\t\t    String captionUrl = \"/access/lessonbuilder/item/\" + i.getId() + caption;\n\t\t\t\t    sessionParameter = getSessionParameter(captionUrl);\n\t\t\t\t    // sessionParameter should always be non-null\n\t\t\t\t    // because this overrides all other checks in /access/lessonbuilder,\n\t\t\t\t    // we haven't adjusted it to handle these files otherwise\n\t\t\t\t    if (sessionParameter != null)\n\t\t\t\t\tcaptionUrl = captionUrl + \"?lb.session=\" + sessionParameter;\n\t\t\t\t    UIOutput.make(tableRow, \"h5track\").\n\t\t\t\t\tdecorate(new UIFreeAttributeDecorator(\"src\", captionUrl));\n\t\t\t\t} else if (!isAudio) {\n\t\t\t\t    movieLink.decorate(new UIFreeAttributeDecorator(\"class\", \"allow-caption\"));\n\t\t\t\t}\n                            }\n\n                            // FLV is special. There's no player for flash video in\n                            // the browser\n                            // it shows with a special flash program, which I\n                            // supply. For the moment MP4 is\n                            // shown with the same player so it uses much of the\n                            // same code\n                            if (mimeType != null && (mimeType.equals(\"video/x-flv\") || mimeType.equals(\"video/flv\") || isMp4)) {\n                                mimeType = \"application/x-shockwave-flash\";\n                                movieUrl = \"/lessonbuilder-tool/templates/StrobeMediaPlayback.swf\";\n                                useFlvPlayer = true;\n                            }\n                            // for IE, if we're not supplying a player it's safest\n                            // to use embed\n                            // otherwise Quicktime won't work. Oddly, with IE 9 only\n                            // it works if you set CLASSID to the MIME type,\n                            // but that's so unexpected that I hate to rely on it.\n                            // EMBED is in HTML 5, so I think we're OK\n                            // using it permanently for IE.\n                            // I prefer OBJECT where possible because of the nesting\n                            // ability.\n                            boolean useEmbed = ieVersion > 0 && !mimeType.equals(\"application/x-shockwave-flash\");\n\n                            if (useEmbed) {\n                                item2 = UIOutput.make(tableRow, \"movieEmbed\").decorate(new UIFreeAttributeDecorator(\"src\", movieUrl)).decorate(new UIFreeAttributeDecorator(\"alt\", messageLocator.getMessage(\"simplepage.mm_player\").replace(\"{}\", abbrevUrl(i.getURL()))));\n                            } else {\n                                item2 = UIOutput.make(tableRow, \"movieObject\").decorate(new UIFreeAttributeDecorator(\"data\", movieUrl)).decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.mm_player\").replace(\"{}\", abbrevUrl(i.getURL()))));\n                            }\n                            if (mimeType != null) {\n                                item2.decorate(new UIFreeAttributeDecorator(\"type\", mimeType));\n                            }\n                            if (canEditPage) {\n                                //item2.decorate(new UIFreeAttributeDecorator(\"style\", \"border: 1px solid black\"));\n                            }\n\n                            // some object types seem to need a specification, so supply our default if necessary\n                            if (lengthOk(height) && lengthOk(width)) {\n                                item2.decorate(new UIFreeAttributeDecorator(\"height\", height.getOld())).decorate(new UIFreeAttributeDecorator(\"width\", width.getOld()));\n                            } else {\n                                if (oMimeType.startsWith(\"audio/\"))\n                                item2.decorate(new UIFreeAttributeDecorator(\"height\", \"100\")).decorate(new UIFreeAttributeDecorator(\"width\", \"400\"));\n                                else\n                                item2.decorate(new UIFreeAttributeDecorator(\"height\", \"300\")).decorate(new UIFreeAttributeDecorator(\"width\", \"400\"));\n                            }\n                            if (!useEmbed) {\n                                if (useFlvPlayer) {\n                                    UIOutput.make(tableRow, \"flashvars\").decorate(new UIFreeAttributeDecorator(\"value\", \"src=\" + URLEncoder.encode(myUrl() + i.getItemURL(simplePageBean.getCurrentSiteId(),currentPage.getOwner()))));\n                                    // need wmode=opaque for player to stack properly with dialogs, etc.\n                                    // there is a performance impact, but I'm guessing in our application we don't \n                                    // need ultimate performance for embedded video. I'm setting it only for\n                                    // the player, so flash games and other applications will still get wmode=window\n                                    UIOutput.make(tableRow, \"wmode\");\n                                } else if (mimeType.equals(\"application/x-shockwave-flash\"))\n                                    UIOutput.make(tableRow, \"wmode\");\n\n                                UIOutput.make(tableRow, \"movieURLInject\").decorate(new UIFreeAttributeDecorator(\"value\", movieUrl));\n                                if (!isMp4 && showDownloads) {\n                                    UIOutput.make(tableRow, \"noplugin-p\", messageLocator.getMessage(\"simplepage.noplugin\"));\n                                    UIOutput.make(tableRow, \"noplugin-br\");\n                                    UILink.make(tableRow, \"noplugin\", i.getName(), movieUrl);\n                                }\n                            }\n\n                            if (isMp4) {\n                                // do fallback. for ie use EMBED\n                                if (ieVersion > 0) {\n                                    item2 = UIOutput.make(tableRow, \"mp4-embed\").decorate(new UIFreeAttributeDecorator(\"src\", i.getItemURL(simplePageBean.getCurrentSiteId(),currentPage.getOwner()))).decorate(new UIFreeAttributeDecorator(\"alt\", messageLocator.getMessage(\"simplepage.mm_player\").replace(\"{}\", abbrevUrl(i.getURL()))));\n                                } else {\n                                    item2 = UIOutput.make(tableRow, \"mp4-object\").decorate(new UIFreeAttributeDecorator(\"data\", i.getItemURL(simplePageBean.getCurrentSiteId(),currentPage.getOwner()))).decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.mm_player\").replace(\"{}\", abbrevUrl(i.getURL()))));\n                            }\n                                if (oMimeType != null) {\n                                    item2.decorate(new UIFreeAttributeDecorator(\"type\", oMimeType));\n                                }\n\n                                // some object types seem to need a specification, so give a default if needed\n                                if (lengthOk(height) && lengthOk(width)) {\n                                    item2.decorate(new UIFreeAttributeDecorator(\"height\", height.getOld())).decorate(new UIFreeAttributeDecorator(\"width\", width.getOld()));\n                                } else {\n                                    if (oMimeType.startsWith(\"audio/\"))\n                                    item2.decorate(new UIFreeAttributeDecorator(\"height\", \"100\")).decorate(new UIFreeAttributeDecorator(\"width\", \"100%\"));\n                                    else\n                                    item2.decorate(new UIFreeAttributeDecorator(\"height\", \"300\")).decorate(new UIFreeAttributeDecorator(\"width\", \"100%\"));\n                                }\n\n                                if (!useEmbed) {\n                                    UIOutput.make(tableRow, \"mp4-inject\").decorate(new UIFreeAttributeDecorator(\"value\", i.getItemURL(simplePageBean.getCurrentSiteId(),currentPage.getOwner())));\n\n\t\t\t\t    if (showDownloads) {\n\t\t\t\t\tUIOutput.make(tableRow, \"mp4-noplugin-p\", messageLocator.getMessage(\"simplepage.noplugin\"));\n\t\t\t\t\tUILink.make(tableRow, \"mp4-noplugin\", i.getName(), i.getItemURL(simplePageBean.getCurrentSiteId(),currentPage.getOwner()));\n\t\t\t\t    }\n                                }\n                            }\n\t\t\t    UIOutput.make(tableRow, \"description3\", i.getDescription());\n                        } else {\n\t\t\t\t\t        UIVerbatim notAvailableText = UIVerbatim.make(tableRow, \"notAvailableText\", messageLocator.getMessage(\"simplepage.multimediaItemUnavailable\"));\n                            // Grey it out\n\t\t\t\t\t\t    notAvailableText.decorate(new UIFreeAttributeDecorator(\"class\", \"disabled-multimedia-item\"));\n                        }\n\n\t\t\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"movieId\", String.valueOf(i.getId()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"movieHeight\", getOrig(height));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"movieWidth\", getOrig(width));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"mimetype5\", oMimeType);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"prerequisite\", (i.isPrerequisite()) ? \"true\" : \"false\");\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"current-item-id6\", Long.toString(i.getId()));\n\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"movie-td\");\n\t\t\t\t\t\t\tUILink.make(tableRow, \"edit-movie\", messageLocator.getMessage(\"simplepage.editItem\"), \"\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.url\").replace(\"{}\", abbrevUrl(i.getURL()))));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t} else {\n\t\t\t\t\t    // this is fallthrough for html or an explicit mm display type (i.e. embed code)\n\t\t\t\t\t    // odd types such as MS word will be handled by the AV code, and presented as <OBJECT>\n\n\t\t\t\t\t    if(canSeeAll || simplePageBean.isItemAvailable(i)) {\n\t\t\t\t\t\t    \n\n\t\t\t\t\t\t// definition of resizeiframe, at top of page\n\t\t\t\t\t\tif (!iframeJavascriptDone && getOrig(height).equals(\"auto\")) {\n\t\t\t\t\t\t\tUIOutput.make(tofill, \"iframeJavascript\");\n\t\t\t\t\t\t\tiframeJavascriptDone = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tUIOutput.make(tableRow, \"iframeSpan\");\n\n\t\t\t\t\t\tif (itemGroupString != null) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-group-titles2\", itemGroupTitles);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-groups2\", itemGroupString);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tString itemUrl = i.getItemURL(simplePageBean.getCurrentSiteId(),currentPage.getOwner());\n\t\t\t\t\t\tif (\"1\".equals(mmDisplayType)) {\n\t\t\t\t\t\t    // embed\n\t\t\t\t\t\t    item = UIVerbatim.make(tableRow, \"mm-embed\", i.getAttribute(\"multimediaEmbedCode\"));\n\t\t\t\t\t\t    //String style = getStyle(width, height);\n\t\t\t\t\t\t    //if (style != null)\n\t\t\t\t\t\t    //item.decorate(new UIFreeAttributeDecorator(\"style\", style));\n\t\t\t\t\t\t} else if (\"3\".equals(mmDisplayType)) {\n\t\t\t\t\t\t    item = UILink.make(tableRow, \"mm-oembed\", i.getAttribute(\"multimediaUrl\"), i.getAttribute(\"multimediaUrl\"));\n\t\t\t\t\t\t    if (lengthOk(width))\n\t\t\t\t\t\t\titem.decorate(new UIFreeAttributeDecorator(\"maxWidth\", width.getOld()));\n\t\t\t\t\t\t    if (lengthOk(height))\n\t\t\t\t\t\t\titem.decorate(new UIFreeAttributeDecorator(\"maxHeight\", height.getOld()));\n\t\t\t\t\t\t    // oembed\n\t\t\t\t\t\t} else  {\n\t\t\t\t\t\t    UIOutput.make(tableRow, \"iframe-link-div\");\n\t\t\t\t\t\t    UILink.make(tableRow, \"iframe-link-link\", messageLocator.getMessage(\"simplepage.open_new_window\"), itemUrl);\n\t\t\t\t\t\t    item = UIOutput.make(tableRow, \"iframe\").decorate(new UIFreeAttributeDecorator(\"src\", itemUrl));\n\t\t\t\t\t\t    // if user specifies auto, use Javascript to resize the\n\t\t\t\t\t\t    // iframe when the\n\t\t\t\t\t\t    // content changes. This only works for URLs with the\n\t\t\t\t\t\t    // same origin, i.e.\n\t\t\t\t\t\t    // URLs in this sakai system\n\t\t\t\t\t\t    if (getOrig(height).equals(\"auto\")) {\n\t\t\t\t\t\t\titem.decorate(new UIFreeAttributeDecorator(\"onload\", \"resizeiframe('\" + item.getFullID() + \"')\"));\n\t\t\t\t\t\t\tif (lengthOk(width)) {\n\t\t\t\t\t\t\t    item.decorate(new UIFreeAttributeDecorator(\"width\", width.getOld()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\titem.decorate(new UIFreeAttributeDecorator(\"height\", \"300\"));\n\t\t\t\t\t\t    } else {\n\t\t\t\t\t\t\t// we seem OK without a spec\n\t\t\t\t\t\t\tif (lengthOk(height) && lengthOk(width)) {\n\t\t\t\t\t\t\t\titem.decorate(new UIFreeAttributeDecorator(\"height\", height.getOld())).decorate(new UIFreeAttributeDecorator(\"width\", width.getOld()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\t\t\t\t\t\titem.decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.web_content\").replace(\"{}\", abbrevUrl(i.getURL()))));\n\n\t\t\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"iframeHeight\", getOrig(height));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"iframeWidth\", getOrig(width));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"mimetype3\", mimeType);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-prereq2\", String.valueOf(i.isPrerequisite()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"embedtype\", mmDisplayType);\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"current-item-id3\", Long.toString(i.getId()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"editmm-td\");\n\t\t\t\t\t\t\tUILink.make(tableRow, \"iframe-edit\", messageLocator.getMessage(\"simplepage.editItem\"), \"\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.url\").replace(\"{}\", abbrevUrl(i.getURL()))));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tUIOutput.make(tableRow, \"description5\", i.getDescription());\n\t\t\t\t\t    } else {\n\n\t\t\t\t\t        UIVerbatim notAvailableText = UIVerbatim.make(tableRow, \"notAvailableText\", messageLocator.getMessage(\"simplepage.multimediaItemUnavailable\"));\n                            // Grey it out\n\t\t\t\t\t\tnotAvailableText.decorate(new UIFreeAttributeDecorator(\"class\", \"disabled-multimedia-item\"));\n\t\t\t\t\t    }\n\n\t\t\t\t\t}\n\n\t\t\t\t\t// end of multimedia object\n\n\t\t\t\t} else if (i.getType() == SimplePageItem.COMMENTS) {\n\t\t\t\t\t// Load later using AJAX and CommentsProducer\n\n\t\t\t\t\tUIOutput.make(tableRow, \"commentsSpan\");\n\n\t\t\t\t\tboolean isAvailable = simplePageBean.isItemAvailable(i);\n\t\t\t\t\t// faculty missing preqs get warning but still see the comments\n\t\t\t\t\tif (!isAvailable && canSeeAll)\n\t\t\t\t\t    UIOutput.make(tableRow, \"missing-prereqs\", messageLocator.getMessage(\"simplepage.fake-missing-prereqs\"));\n\n\t\t\t\t\t// students get warning and not the content\n\t\t\t\t\tif (!isAvailable && !canSeeAll) {\n\t\t\t\t\t    UIOutput.make(tableRow, \"missing-prereqs\", messageLocator.getMessage(\"simplepage.missing-prereqs\"));\n\t\t\t\t\t}else {\n\t\t\t\t\t\tUIOutput.make(tableRow, \"commentsDiv\");\n\t\t\t\t\t\tUIOutput.make(tableRow, \"placementId\", placement.getId());\n\n\t\t\t\t\t        // note: the URL will be rewritten in comments.js to look like\n\t\t\t\t\t        //  /lessonbuilder-tool/faces/Comments...\n\t\t\t\t\t\tCommentsViewParameters eParams = new CommentsViewParameters(CommentsProducer.VIEW_ID);\n\t\t\t\t\t\teParams.itemId = i.getId();\n\t\t\t\t\t\teParams.placementId = placement.getId();\n\t\t\t\t\t\tif (params.postedComment) {\n\t\t\t\t\t\t\teParams.postedComment = postedCommentId;\n\t\t\t\t\t\t}\n\t\t\t\t\t\teParams.siteId = simplePageBean.getCurrentSiteId();\n\t\t\t\t\t\teParams.pageId = currentPage.getPageId();\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(params.author != null && !params.author.equals(\"\")) {\n\t\t\t\t\t\t\teParams.author = params.author;\n\t\t\t\t\t\t\teParams.showAllComments = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tUIInternalLink.make(tableRow, \"commentsLink\", eParams);\n\n\t\t\t\t\t\tif (!addedCommentsScript) {\n\t\t\t\t\t\t\tUIOutput.make(tofill, \"comments-script\");\n\t\t\t\t\t\t\tUIOutput.make(tofill, \"fckScript\");\n\t\t\t\t\t\t\taddedCommentsScript = true;\n\t\t\t\t\t\t\tUIOutput.make(tofill, \"delete-dialog\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t// forced comments have to be edited on the main page\n\t\t\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\t\t// Checks to make sure that the comments item isn't on a student page.\n\t\t\t\t\t\t\t// That it is graded.  And that we didn't just come from the grading pane.\n\t\t\t\t\t\t\tif(i.getPageId() > 0 && i.getGradebookId() != null && !cameFromGradingPane) {\n\t\t\t\t\t\t\t\tCommentsGradingPaneViewParameters gp = new CommentsGradingPaneViewParameters(CommentGradingPaneProducer.VIEW_ID);\n\t\t\t\t\t\t\t\tgp.placementId = toolManager.getCurrentPlacement().getId();\n\t\t\t\t\t\t\t\tgp.commentsItemId = i.getId();\n\t\t\t\t\t\t\t\tgp.pageId = currentPage.getPageId();\n\t\t\t\t\t\t\t\tgp.pageItemId = pageItem.getId();\n\t\t\t\t\t\t\t\tgp.siteId = simplePageBean.getCurrentSiteId();\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tUIInternalLink.make(tableRow, \"gradingPaneLink\", messageLocator.getMessage(\"simplepage.show-grading-pane-comments\"), gp)\n\t\t\t\t\t\t\t\t    .decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.show-grading-pane-comments\")));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"comments-td\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (i.getSequence() > 0) {\n\t\t\t\t\t\t\t    UILink.make(tableRow, \"edit-comments\", messageLocator.getMessage(\"simplepage.editItem\"), \"\")\n\t\t\t\t\t\t\t\t\t.decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.comments\")));\n\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"commentsId\", String.valueOf(i.getId()));\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"commentsAnon\", String.valueOf(i.isAnonymous()));\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"commentsitem-required\", String.valueOf(i.isRequired()));\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"commentsitem-prerequisite\", String.valueOf(i.isPrerequisite()));\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"commentsGrade\", String.valueOf(i.getGradebookId() != null));\n\t\t\t\t\t\t\t    UIOutput.make(tableRow, \"commentsMaxPoints\", String.valueOf(i.getGradebookPoints()));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t    String itemGroupString = simplePageBean.getItemGroupString(i, null, true);\n\t\t\t\t\t\t\t    if (itemGroupString != null) {\n\t\t\t\t\t\t\t    \tString itemGroupTitles = simplePageBean.getItemGroupTitles(itemGroupString, i);\n\t\t\t\t\t\t\t    \tif (itemGroupTitles != null) {\n\t\t\t\t\t\t\t    \t\titemGroupTitles = \"[\" + itemGroupTitles + \"]\";\n\t\t\t\t\t\t\t    \t}\n\t\t\t\t\t\t\t    \tUIOutput.make(tableRow, \"comments-groups\", itemGroupString);\n\t\t\t\t\t\t\t    \tUIOutput.make(tableRow, \"item-group-titles6\", itemGroupTitles);\n\t\t\t\t\t\t\t    }\n\t\t\t\t\t\t\t}\n\t\t\t\t\t    \t\n\t\t\t\t\t\t\t// Allows AJAX posting of comment grades\n\t\t\t\t\t    \tprintGradingForm(tofill);\n\t\t\t\t\t    }\n\n\t\t\t\t\t    UIForm form = UIForm.make(tableRow, \"comment-form\");\n\t\t\t\t\t    makeCsrf(form, \"csrf2\");\n\n\t\t\t\t\t    UIInput.make(form, \"comment-item-id\", \"#{simplePageBean.itemId}\", String.valueOf(i.getId()));\n\t\t\t\t\t    UIInput.make(form, \"comment-edit-id\", \"#{simplePageBean.editId}\");\n\n\t\t\t\t\t    // usage * image is required and not done\n\t\t\t\t\t    if (i.isRequired() && !simplePageBean.isItemComplete(i))\n\t\t\t\t\t\tUIOutput.make(tableRow, \"comment-required-image\");\n\n\t\t\t\t\t    UIOutput.make(tableRow, \"add-comment-link\");\n\t\t\t\t\t    UIOutput.make(tableRow, \"add-comment-text\", messageLocator.getMessage(\"simplepage.add-comment\"));\n\t\t\t\t\t    UIInput fckInput = UIInput.make(form, \"comment-text-area-evolved:\", \"#{simplePageBean.formattedComment}\");\n\t\t\t\t\t    fckInput.decorate(new UIFreeAttributeDecorator(\"height\", \"175\"));\n\t\t\t\t\t    fckInput.decorate(new UIFreeAttributeDecorator(\"width\", \"800\"));\n\t\t\t\t\t    fckInput.decorate(new UIStyleDecorator(\"evolved-box\"));\n\t\t\t\t\t    fckInput.decorate(new UIFreeAttributeDecorator(\"aria-label\", messageLocator.getMessage(\"simplepage.editor\")));\n\t\t\t\t\t    fckInput.decorate(new UIFreeAttributeDecorator(\"role\", \"dialog\"));\n\n\t\t\t\t\t    if (!noEditor) {\n\t\t\t\t\t\tfckInput.decorate(new UIStyleDecorator(\"using-editor\"));  // javascript needs to know\n\t\t\t\t\t\t((SakaiFCKTextEvolver) richTextEvolver).evolveTextInput(fckInput, \"\" + commentsCount);\n\t\t\t\t\t    }\n\t\t\t\t\t    UICommand.make(form, \"add-comment\", \"#{simplePageBean.addComment}\");\n\t\t\t\t\t}\n\t\t\t\t\n\t\t\t\t}else if (i.getType() == SimplePageItem.PEEREVAL){\n\t\t\t\t\t\n\t\t\t\t\tString owner=currentPage.getOwner();\n\t\t\t\t\tString currentUser=UserDirectoryService.getCurrentUser().getId();\n\t\t\t\t\tLong pageId=currentPage.getPageId();\n\t\t\t\t\t\n\t\t\t\t\tUIOutput.make(tableRow, \"peerReviewRubricStudent\");\n\t\t\t\t\tUIOutput.make(tableRow, \"peer-review-form\");\n\n\t\t\t\t\tmakePeerRubric(tableRow,i, makeStudentRubric);\n\t\t\t\t\t\n\t\t\t\t\tboolean isOpen = false;\n\t\t\t\t\tboolean isPastDue = false;\n\t\t\t\t\t\n\t\t\t\t\tString peerEvalDateOpenStr = i.getAttribute(\"rubricOpenDate\");\n\t\t\t\t\tString peerEvalDateDueStr  = i.getAttribute(\"rubricDueDate\");\n\t\t\t\t\tboolean peerEvalAllowSelfGrade = Boolean.parseBoolean(i.getAttribute(\"rubricAllowSelfGrade\"));\n\t\t\t\t\tboolean gradingSelf = owner.equals(currentUser) && peerEvalAllowSelfGrade;\n\t\t\t\t\n\t\t\t\t\tif (peerEvalDateOpenStr != null && peerEvalDateDueStr != null) {\n\t\t\t\t\t\tDate peerEvalNow = new Date();\n\t\t\t\t\t\tDate peerEvalOpen = new Date(Long.valueOf(peerEvalDateOpenStr));\n\t\t\t\t\t\tDate peerEvalDue = new Date(Long.valueOf(peerEvalDateDueStr));\n\t\t\t\t\t\t\n\t\t\t\t\t\tisOpen = peerEvalNow.after(peerEvalOpen);\n\t\t\t\t\t\tisPastDue = peerEvalNow.after(peerEvalDue);\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tif(isOpen){\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(owner.equals(currentUser)){ //owner gets their own data\n\t\t\t\t\t\t\tclass PeerEvaluation{\n\t\t\t\t\t\t\t\tString category;\n\t\t\t\t\t\t\t\tpublic int grade, count;\n\t\t\t\t\t\t\t\tpublic PeerEvaluation(String category, int grade){this.category=category;this.grade=grade;count=1;}\n\t\t\t\t\t\t\t\tpublic void increment(){count++;}\n\t\t\t\t\t\t\t\tpublic boolean equals(Object o){\n\t\t\t\t\t\t\t\t\tif ( !(o instanceof PeerEvaluation) ) return false;\n\t\t\t\t\t\t\t\t\tPeerEvaluation pe = (PeerEvaluation)o;\n\t\t\t\t\t\t\t\t\treturn category.equals(pe.category) && grade==pe.grade;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tpublic String toString(){return category + \" \" + grade + \" [\" + count + \"]\";}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tArrayList<PeerEvaluation> myEvaluations = new ArrayList<PeerEvaluation>(); \n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tList<SimplePagePeerEvalResult> evaluations = simplePageToolDao.findPeerEvalResultByOwner(pageId.longValue(), owner);\n\t\t\t\t\t\t\tif(evaluations!=null)\n\t\t\t\t\t\t\t\tfor(SimplePagePeerEvalResult eval : evaluations){\n\t\t\t\t\t\t\t\t\tPeerEvaluation target=new PeerEvaluation(eval.getRowText(), eval.getColumnValue());\n\t\t\t\t\t\t\t\t\tint targetIndex=myEvaluations.indexOf(target);\n\t\t\t\t\t\t\t\t\tif(targetIndex!=-1){\n\t\t\t\t\t\t\t\t\t\tmyEvaluations.get(targetIndex).increment();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\tmyEvaluations.add(target);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"my-existing-peer-eval-data\");\n\t\t\t\t\t\t\tfor(PeerEvaluation eval: myEvaluations){\n\t\t\t\t\t\t\t\tUIBranchContainer evalData = UIBranchContainer.make(tableRow, \"my-peer-eval-data:\");\n\t\t\t\t\t\t\t\tUIOutput.make(evalData, \"peer-eval-row-text\", eval.category);\n\t\t\t\t\t\t\t\tUIOutput.make(evalData, \"peer-eval-grade\", String.valueOf(eval.grade));\n\t\t\t\t\t\t\t\tUIOutput.make(evalData, \"peer-eval-count\", String.valueOf(eval.count));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(!owner.equals(currentUser) || gradingSelf){\n\t\t\t\t\t\t\tList<SimplePagePeerEvalResult> evaluations = simplePageToolDao.findPeerEvalResult(pageId, currentUser, owner);\n\t\t\t\t\t\t\t//existing evaluation data\n\t\t\t\t\t\t\tif(evaluations!=null && evaluations.size()!=0){\t\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"existing-peer-eval-data\");\n\t\t\t\t\t\t\t\tfor(SimplePagePeerEvalResult eval : evaluations){\n\t\t\t\t\t\t\t\t\tUIBranchContainer evalData = UIBranchContainer.make(tableRow, \"peer-eval-data:\");\n\t\t\t\t\t\t\t\t\tUIOutput.make(evalData, \"peer-eval-row-text\", eval.getRowText());\n\t\t\t\t\t\t\t\t\tUIOutput.make(evalData, \"peer-eval-grade\", String.valueOf(eval.getColumnValue()));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//form for peer evaluation results\n\t\t\t\t\t\t\tUIForm form = UIForm.make(tofill, \"rubricSelection\");\n\t\t\t\t\t\t\tmakeCsrf(form, \"csrf6\");\n\n\t\t\t\t\t\t\tUIInput.make(form, \"rubricPeerGrade\", \"#{simplePageBean.rubricPeerGrade}\");\n\t\t\t\t\t\t\tUICommand.make(form, \"update-peer-eval-grade\", messageLocator.getMessage(\"simplepage.edit\"), \"#{simplePageBean.savePeerEvalResult}\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\t//buttons\n\t\t\t\t\t\tUIOutput.make(tableRow, \"add-peereval-link\");\n\t\t\t\t\t\tUIOutput.make(tableRow, \"add-peereval-text\", messageLocator.getMessage(\"simplepage.view-peereval\"));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(isPastDue){\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-grade-directions\", messageLocator.getMessage(\"simplepage.peer-eval.past-due-date\"));\n\t\t\t\t\t\t}else if(!owner.equals(currentUser) || gradingSelf){\t\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"save-peereval-link\");\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"save-peereval-text\", messageLocator.getMessage(\"simplepage.save\"));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"cancel-peereval-link\");\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"cancel-peereval-text\", messageLocator.getMessage(\"simplepage.cancel\"));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-grade-directions\", messageLocator.getMessage(\"simplepage.peer-eval.click-on-cell\"));\n\t\t\t\t\t\t}else{ //owner who cannot grade himself\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-grade-directions\", messageLocator.getMessage(\"simplepage.peer-eval.cant-eval-yourself\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(canEditPage)\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peerReviewRubricStudent-edit\");//lines up rubric with edit btn column for users with editing privs\n\t\t\t\t\t}\n\t\t\t\t}else if(i.getType() == SimplePageItem.STUDENT_CONTENT) {\n\t\t\t\t\t\n\t\t\t\t\tUIOutput.make(tableRow, \"studentSpan\");\n\n\t\t\t\t\tboolean isAvailable = simplePageBean.isItemAvailable(i);\n\t\t\t\t\t// faculty missing preqs get warning but still see the comments\n\t\t\t\t\tif (!isAvailable && canSeeAll)\n\t\t\t\t\t    UIOutput.make(tableRow, \"student-missing-prereqs\", messageLocator.getMessage(\"simplepage.student-fake-missing-prereqs\"));\n\t\t\t\t\tif (!isAvailable && !canSeeAll)\n\t\t\t\t\t    UIOutput.make(tableRow, \"student-missing-prereqs\", messageLocator.getMessage(\"simplepage.student-missing-prereqs\"));\n\t\t\t\t\telse {\n\t\t\t\t\t\tUIOutput.make(tableRow, \"studentDiv\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tHashMap<Long, SimplePageLogEntry> cache = simplePageBean.cacheStudentPageLogEntries(i.getId());\n\t\t\t\t\t\tList<SimpleStudentPage> studentPages = simplePageToolDao.findStudentPages(i.getId());\n\t\t\t\t\t\n\t\t\t\t\t\tboolean hasOwnPage = false;\n\t\t\t\t\t\tString userId = UserDirectoryService.getCurrentUser().getId();\n\t\t\t\t\t\t\n\t\t\t\t\t    Collections.sort(studentPages, new Comparator<SimpleStudentPage>() {\n\t\t\t\t\t\t    public int compare(SimpleStudentPage o1, SimpleStudentPage o2) {\n\t\t\t\t\t\t\tString title1 = o1.getTitle();\n\t\t\t\t\t\t\tif (title1 == null)\n\t\t\t\t\t\t\t    title1 = \"\";\n\t\t\t\t\t\t\tString title2 = o2.getTitle();\n\t\t\t\t\t\t\tif (title2 == null)\n\t\t\t\t\t\t\t    title2 = \"\";\n\t\t\t\t\t\t\treturn title1.compareTo(title2);\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t});\t\t\t\t\t    \n\n\t\t\t\t\t        UIOutput contentList = UIOutput.make(tableRow, \"studentContentTable\");\n\t\t\t\t\t        UIOutput contentTitle = UIOutput.make(tableRow, \"studentContentTitle\", messageLocator.getMessage(\"simplepage.student\"));\n\t\t\t\t\t\tcontentList.decorate(new UIFreeAttributeDecorator(\"aria-labelledby\", contentTitle.getFullID()));\n\n\t\t\t\t\t\t// Print each row in the table\n\t\t\t\t\t\tfor(SimpleStudentPage page : studentPages) {\n\t\t\t\t\t\t\tif(page.isDeleted()) continue;\n\n\t\t\t\t\t\t\tSimplePageLogEntry entry = cache.get(page.getPageId());\n\t\t\t\t\t\t\tUIBranchContainer row = UIBranchContainer.make(tableRow, \"studentRow:\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t// There's content they haven't seen\n\t\t\t\t\t\t\tif(entry == null || entry.getLastViewed().compareTo(page.getLastUpdated()) < 0) {\n\t\t\t\t\t\t\t    UIOutput.make(row, \"newContentImg\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.new-student-content\")));\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t    UIOutput.make(row, \"newContentImgT\");\n \n\t\t\t\t\t\t\t// The comments tool exists, so we might have to show the icon\n\t\t\t\t\t\t\tif(i.getShowComments() != null && i.getShowComments()) {\n \t\t\t\t\t\t\n\t\t\t\t\t\t\t    // New comments have been added since they last viewed the page\n\t\t\t\t\t\t\t    if(page.getLastCommentChange() != null && (entry == null || entry.getLastViewed().compareTo(page.getLastCommentChange()) < 0)) {\n\t\t\t\t\t\t\t\tUIOutput.make(row, \"newCommentsImg\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.new-student-comments\")));\n\t\t\t\t\t\t\t    } else\n\t\t\t\t\t\t\t\tUIOutput.make(row, \"newCommentsImgT\");\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}\n \n\t\t\t\t\t\t\t// Never visited page\n\t\t\t\t\t\t\tif(entry == null) {\n\t\t\t\t\t\t\t    UIOutput.make(row, \"newPageImg\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.new-student-page\")));\n\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t    UIOutput.make(row, \"newPageImgT\");\n\n\t\t\t\t\t\t\tGeneralViewParameters eParams = new GeneralViewParameters(ShowPageProducer.VIEW_ID, page.getPageId());\n\t\t\t\t\t\t\teParams.setItemId(i.getId());\n\t\t\t\t\t\t\teParams.setPath(\"push\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tString studentTitle = page.getTitle();\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tString sownerName = null;\n\t\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\t\tif(!i.isAnonymous() || canEditPage) {\n\t\t\t\t\t\t\t\t\tif (page.getGroup() != null)\n\t\t\t\t\t\t\t\t\t    sownerName = simplePageBean.getCurrentSite().getGroup(page.getGroup()).getTitle();\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t    sownerName = UserDirectoryService.getUser(page.getOwner()).getDisplayName();\n\t\t\t\t\t\t\t\t\tif (sownerName != null && sownerName.equals(studentTitle))\n\t\t\t\t\t\t\t\t\t    studentTitle = \"(\" + sownerName + \")\";\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t    studentTitle += \" (\" + sownerName + \")\";\n\t\t\t\t\t\t\t\t}else if (simplePageBean.isPageOwner(page)) {\n\t\t\t\t\t\t\t\t\tstudentTitle += \" (\" + messageLocator.getMessage(\"simplepage.comment-you\") + \")\";\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} catch (UserNotDefinedException e) {\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tUIInternalLink.make(row, \"studentLink\", studentTitle, eParams);\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(simplePageBean.isPageOwner(page)) {\n\t\t\t\t\t\t\t\thasOwnPage = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(i.getGradebookId() != null && simplePageBean.getEditPrivs() == 0) {\n\t\t\t\t\t\t\t\tUIOutput.make(row, \"studentGradingCell\", String.valueOf((page.getPoints() != null? page.getPoints() : \"\")));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t    }\n\t\t\t\t\t\n\t\t\t\t\t\tif(!hasOwnPage && simplePageBean.myStudentPageGroupsOk(i)) {\n\t\t\t\t\t\t\tUIBranchContainer row = UIBranchContainer.make(tableRow, \"studentRow:\");\n\t\t\t\t\t\t\tUIOutput.make(row, \"linkRow\");\n\t\t\t\t\t\t\tUIOutput.make(row, \"linkCell\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (i.isRequired() && !simplePageBean.isItemComplete(i))\n\t\t\t\t\t\t\t\tUIOutput.make(row, \"student-required-image\");\n\t\t\t\t\t\t\tGeneralViewParameters eParams = new GeneralViewParameters(ShowPageProducer.VIEW_ID);\n\t\t\t\t\t\t\teParams.addTool = GeneralViewParameters.STUDENT_PAGE;\n\t\t\t\t\t\t\teParams.studentItemId = i.getId();\n\t\t\t\t\t\t\tUIInternalLink.make(row, \"linkLink\", messageLocator.getMessage(\"simplepage.add-page\"), eParams);\n\t\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\tString itemGroupString = null;\n\t\t\t\t\t\t// do before canEditAll because we need itemGroupString in it\n\t\t\t\t\t\tif (canSeeAll) {\n\t\t\t\t\t\t    itemGroupString = simplePageBean.getItemGroupString(i, null, true);\n\t\t\t\t\t\t    if (itemGroupString != null) {\n\t\t\t\t\t\t\tString itemGroupTitles = simplePageBean.getItemGroupTitles(itemGroupString, i);\n\t\t\t\t\t\t\tif (itemGroupTitles != null) {\n\t\t\t\t\t\t\t    itemGroupTitles = \"[\" + itemGroupTitles + \"]\";\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"item-group-titles7\", itemGroupTitles);\n\t\t\t\t\t\t    }\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif(canEditPage) {\n\t\t\t\t\t\t\t// Checks to make sure that the comments are graded and that we didn't\n\t\t\t\t\t\t\t// just come from a grading pane (would be confusing)\n\t\t\t\t\t\t\tif(i.getAltGradebook() != null && !cameFromGradingPane) {\n\t\t\t\t\t\t\t\tCommentsGradingPaneViewParameters gp = new CommentsGradingPaneViewParameters(CommentGradingPaneProducer.VIEW_ID);\n\t\t\t\t\t\t\t\tgp.placementId = toolManager.getCurrentPlacement().getId();\n\t\t\t\t\t\t\t\tgp.commentsItemId = i.getId();\n\t\t\t\t\t\t\t\tgp.pageId = currentPage.getPageId(); \n\t\t\t\t\t\t\t\tgp.pageItemId = pageItem.getId();\n\t\t\t\t\t\t\t\tgp.studentContentItem = true;\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tUIInternalLink.make(tableRow, \"studentGradingPaneLink\", messageLocator.getMessage(\"simplepage.show-grading-pane-content\"), gp)\n\t\t\t\t\t\t\t\t    .decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.show-grading-pane-content\")));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"student-td\");\n\t\t\t\t\t\t\tUILink.make(tableRow, \"edit-student\", messageLocator.getMessage(\"simplepage.editItem\"), \"\")\n\t\t\t\t\t\t\t\t\t.decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.student\")));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentId\", String.valueOf(i.getId()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentAnon\", String.valueOf(i.isAnonymous()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentComments\", String.valueOf(i.getShowComments()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"forcedAnon\", String.valueOf(i.getForcedCommentsAnonymous()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentGrade\", String.valueOf(i.getGradebookId() != null));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentMaxPoints\", String.valueOf(i.getGradebookPoints()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentGrade2\", String.valueOf(i.getAltGradebook() != null));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentMaxPoints2\", String.valueOf(i.getAltPoints()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentitem-required\", String.valueOf(i.isRequired()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"studentitem-prerequisite\", String.valueOf(i.isPrerequisite()));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval\", String.valueOf(i.getShowPeerEval()));\n\t\t\t\t\t\t\tmakePeerRubric(tableRow,i, makeMaintainRubric);\n\t\t\t\t\t\t\tmakeSamplePeerEval(tableRow);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tString peerEvalDate = i.getAttribute(\"rubricOpenDate\");\n\t\t\t\t\t\t\tString peerDueDate = i.getAttribute(\"rubricDueDate\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tCalendar peerevalcal = Calendar.getInstance();\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (peerEvalDate != null && peerDueDate != null) {\n\t\t\t\t\t\t\t\tDateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT, M_locale);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Open date from attribute string\n\t\t\t\t\t\t\t\tpeerevalcal.setTimeInMillis(Long.valueOf(peerEvalDate));\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tString dateStr = isoDateFormat.format(peerevalcal.getTime());\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-open-date\", dateStr);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Due date from attribute string\n\t\t\t\t\t\t\t\tpeerevalcal.setTimeInMillis(Long.valueOf(peerDueDate));\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tdateStr = isoDateFormat.format(peerevalcal.getTime());\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-due-date\", dateStr);\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-allow-self\", i.getAttribute(\"rubricAllowSelfGrade\"));\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t}else{\n\t\t\t\t\t\t\t\t//Default open and due date\n\t\t\t\t\t\t\t\tDate now = new Date();\n\t\t\t\t\t\t\t\tpeerevalcal.setTime(now);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Default open date: now\n\t\t\t\t\t\t\t\tString dateStr = isoDateFormat.format(peerevalcal.getTime());\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-open-date\", dateStr);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//Default due date: 7 days from now\n\t\t\t\t\t\t\t\tDate later = new Date(peerevalcal.getTimeInMillis() + 604800000);\n\t\t\t\t\t\t\t\tpeerevalcal.setTime(later);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tdateStr = isoDateFormat.format(peerevalcal.getTime());\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t//System.out.println(\"Setting date to \" + dateStr + \" and time to \" + timeStr);\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-due-date\", dateStr);\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"peer-eval-allow-self\", i.getAttribute(\"rubricAllowSelfGrade\"));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t//Peer Eval Stats link\n\t\t\t\t\t\t\tGeneralViewParameters view = new GeneralViewParameters(PeerEvalStatsProducer.VIEW_ID);\n\t\t\t\t\t\t\tview.setSendingPage(currentPage.getPageId());\n\t\t\t\t\t\t\tview.setItemId(i.getId());\n\t\t\t\t\t\t\tif(i.getShowPeerEval()){\n\t\t\t\t\t\t\t\tUILink link = UIInternalLink.make(tableRow, \"peer-eval-stats-link\", view);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif (itemGroupString != null) {\n\t\t\t\t\t\t\t\tUIOutput.make(tableRow, \"student-groups\", itemGroupString);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"student-owner-groups\", simplePageBean.getItemOwnerGroupString(i));\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"student-group-owned\", (i.isGroupOwned()?\"true\":\"false\"));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}else if(i.getType() == SimplePageItem.QUESTION) {\n\t\t\t\t \tString itemGroupString = null;\n\t\t\t\t\tString itemGroupTitles = null;\n\t\t\t\t\tif (canSeeAll) {\n\t\t\t\t\t    itemGroupString = simplePageBean.getItemGroupString(i, null, true);\n\t\t\t\t\t    if (itemGroupString != null)\n\t\t\t\t\t\titemGroupTitles = simplePageBean.getItemGroupTitles(itemGroupString, i);\n\t\t\t\t\t    if (itemGroupTitles != null) {\n\t\t\t\t\t\titemGroupTitles = \"[\" + itemGroupTitles + \"]\";\n\t\t\t\t\t    }\n\t\t\t\t\t    if (canEditPage)\n\t\t\t\t\t\tUIOutput.make(tableRow, \"item-groups\", itemGroupString);\n\t\t\t\t\t    if (itemGroupTitles != null)\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionitem-group-titles\", itemGroupTitles);\n\t\t\t\t\t}\n\t\t\t\t\tSimplePageQuestionResponse response = simplePageToolDao.findQuestionResponse(i.getId(), simplePageBean.getCurrentUserId());\n\t\t\t\t\t\n\t\t\t\t\tUIOutput.make(tableRow, \"questionSpan\");\n\n\t\t\t\t\tboolean isAvailable = simplePageBean.isItemAvailable(i) || canSeeAll;\n\t\t\t\t\t\n\t\t\t\t\tUIOutput.make(tableRow, \"questionDiv\");\n\t\t\t\t\t\n\t\t\t\t\tUIOutput.make(tableRow, \"questionText\", i.getAttribute(\"questionText\"));\n\t\t\t\t\t\n\t\t\t\t\tList<SimplePageQuestionAnswer> answers = new ArrayList<SimplePageQuestionAnswer>();\n\t\t\t\t\tif(\"multipleChoice\".equals(i.getAttribute(\"questionType\"))) {\n\t\t\t\t\t\tanswers = simplePageToolDao.findAnswerChoices(i);\n\t\t\t\t\t\tUIOutput.make(tableRow, \"multipleChoiceDiv\");\n\t\t\t\t\t\tUIForm questionForm = UIForm.make(tableRow, \"multipleChoiceForm\");\n\t\t\t\t\t\tmakeCsrf(questionForm, \"csrf4\");\n\n\t\t\t\t\t\tUIInput.make(questionForm, \"multipleChoiceId\", \"#{simplePageBean.questionId}\", String.valueOf(i.getId()));\n\t\t\t\t\t\t\n\t\t\t\t\t\tString[] options = new String[answers.size()];\n\t\t\t\t\t\tString initValue = null;\n\t\t\t\t\t\tfor(int j = 0; j < answers.size(); j++) {\n\t\t\t\t\t\t\toptions[j] = String.valueOf(answers.get(j).getId());\n\t\t\t\t\t\t\tif(response != null && answers.get(j).getId() == response.getMultipleChoiceId()) {\n\t\t\t\t\t\t\t\tinitValue = String.valueOf(answers.get(j).getId());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tUISelect multipleChoiceSelect = UISelect.make(questionForm, \"multipleChoiceSelect:\", options, \"#{simplePageBean.questionResponse}\", initValue);\n\t\t\t\t\t\tif(!isAvailable || response != null) {\n\t\t\t\t\t\t\tmultipleChoiceSelect.decorate(new UIDisabledDecorator());\n\t\t\t\t\t\t}\n\t\t\t\t\t\t \n\t\t\t\t\t\tfor(int j = 0; j < answers.size(); j++) {\n\t\t\t\t\t\t\tUIBranchContainer answerContainer = UIBranchContainer.make(questionForm, \"multipleChoiceAnswer:\", String.valueOf(j));\n\t\t\t\t\t\t\tUISelectChoice multipleChoiceInput = UISelectChoice.make(answerContainer, \"multipleChoiceAnswerRadio\", multipleChoiceSelect.getFullID(), j);\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tmultipleChoiceInput.decorate(new UIFreeAttributeDecorator(\"id\", multipleChoiceInput.getFullID()));\n\t\t\t\t\t\t\tUIOutput.make(answerContainer, \"multipleChoiceAnswerText\", answers.get(j).getText())\n\t\t\t\t\t\t\t\t.decorate(new UIFreeAttributeDecorator(\"for\", multipleChoiceInput.getFullID()));\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tif(!isAvailable || response != null) {\n\t\t\t\t\t\t\t\tmultipleChoiceInput.decorate(new UIDisabledDecorator());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t \n\t\t\t\t\t\tUICommand answerButton = UICommand.make(questionForm, \"answerMultipleChoice\", messageLocator.getMessage(\"simplepage.answer_question\"), \"#{simplePageBean.answerMultipleChoiceQuestion}\");\n\t\t\t\t\t\tif(!isAvailable || response != null) {\n\t\t\t\t\t\t\tanswerButton.decorate(new UIDisabledDecorator());\n\t\t\t\t\t\t}\n\t\t\t\t\t}else if(\"shortanswer\".equals(i.getAttribute(\"questionType\"))) {\n\t\t\t\t\t\tUIOutput.make(tableRow, \"shortanswerDiv\");\n\t\t\t\t\t\t\n\t\t\t\t\t\tUIForm questionForm = UIForm.make(tableRow, \"shortanswerForm\");\n\t\t\t\t\t\tmakeCsrf(questionForm, \"csrf5\");\n\n\t\t\t\t\t\tUIInput.make(questionForm, \"shortanswerId\", \"#{simplePageBean.questionId}\", String.valueOf(i.getId()));\n\t\t\t\t\t\t\n\t\t\t\t\t\tUIInput shortanswerInput = UIInput.make(questionForm, \"shortanswerInput\", \"#{simplePageBean.questionResponse}\");\n\t\t\t\t\t\tif(!isAvailable || response != null) {\n\t\t\t\t\t\t\tshortanswerInput.decorate(new UIDisabledDecorator());\n\t\t\t\t\t\t\tif(response != null && response.getShortanswer() != null) {\n\t\t\t\t\t\t\t\tshortanswerInput.setValue(response.getShortanswer());\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tUICommand answerButton = UICommand.make(questionForm, \"answerShortanswer\", messageLocator.getMessage(\"simplepage.answer_question\"), \"#{simplePageBean.answerShortanswerQuestion}\");\n\t\t\t\t\t\tif(!isAvailable || response != null) {\n\t\t\t\t\t\t\tanswerButton.decorate(new UIDisabledDecorator());\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\tStatus questionStatus = getQuestionStatus(i, response);\n\t\t\t\t\taddStatusImage(questionStatus, tableRow, \"questionStatus\", null);\n\t\t\t\t\tString statusNote = getStatusNote(questionStatus);\n\t\t\t\t\tif (statusNote != null) // accessibility version of icon\n\t\t\t\t\t    UIOutput.make(tableRow, \"questionNote\", statusNote);\n\t\t\t\t\tString statusText = null;\n\t\t\t\t\tif(questionStatus == Status.COMPLETED)\n\t\t\t\t\t    statusText = i.getAttribute(\"questionCorrectText\");\n\t\t\t\t\telse if(questionStatus == Status.FAILED)\n\t\t\t\t\t    statusText = i.getAttribute(\"questionIncorrectText\");\n\t\t\t\t\tif (statusText != null && !\"\".equals(statusText.trim()))\n\t\t\t\t\t    UIOutput.make(tableRow, \"questionStatusText\", statusText);\n\t\t\t\t\t\n\t\t\t\t\t// Output the poll data\n\t\t\t\t\tif(\"multipleChoice\".equals(i.getAttribute(\"questionType\")) &&\n\t\t\t\t\t\t\t(canEditPage || (\"true\".equals(i.getAttribute(\"questionShowPoll\")) &&\n\t\t\t\t\t\t\t\t\t(questionStatus == Status.COMPLETED || questionStatus == Status.FAILED)))) {\n\t\t\t\t\t\tUIOutput.make(tableRow, \"showPollGraph\", messageLocator.getMessage(\"simplepage.show-poll\"));\n\t\t\t\t\t\tUIOutput questionGraph = UIOutput.make(tableRow, \"questionPollGraph\");\n\t\t\t\t\t\tquestionGraph.decorate(new UIFreeAttributeDecorator(\"id\", \"poll\" + i.getId()));\n\t\t\t\t\t\t\n\t\t\t\t\t\tList<SimplePageQuestionResponseTotals> totals = simplePageToolDao.findQRTotals(i.getId());\n\t\t\t\t\t\tHashMap<Long, Long> responseCounts = new HashMap<Long, Long>();\n\t\t\t\t\t\t// in theory we don't need the first loop, as there should be a total\n\t\t\t\t\t\t// entry for all possible answers. But in case things are out of sync ...\n\t\t\t\t\t\tfor(SimplePageQuestionAnswer answer : answers)\n\t\t\t\t\t\t    responseCounts.put(answer.getId(), 0L);\n\t\t\t\t\t\tfor(SimplePageQuestionResponseTotals total : totals)\n\t\t\t\t\t\t    responseCounts.put(total.getResponseId(), total.getCount());\n\t\t\t\t\t\t\n\t\t\t\t\t\tfor(int j = 0; j < answers.size(); j++) {\n\t\t\t\t\t\t\tUIBranchContainer pollContainer = UIBranchContainer.make(tableRow, \"questionPollData:\", String.valueOf(j));\n\t\t\t\t\t\t\tUIOutput.make(pollContainer, \"questionPollText\", answers.get(j).getText());\n\t\t\t\t\t\t\tUIOutput.make(pollContainer, \"questionPollNumber\", String.valueOf(responseCounts.get(answers.get(j).getId())));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t\n\t\t\t\t\t\n\t\t\t\t\tif(canEditPage) {\n\t\t\t\t\t\tUIOutput.make(tableRow, \"question-td\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t// always show grading panel. Currently this is the only way to get feedback\n\t\t\t\t\t\tif( !cameFromGradingPane) {\n\t\t\t\t\t\t\tQuestionGradingPaneViewParameters gp = new QuestionGradingPaneViewParameters(QuestionGradingPaneProducer.VIEW_ID);\n\t\t\t\t\t\t\tgp.placementId = toolManager.getCurrentPlacement().getId();\n\t\t\t\t\t\t\tgp.questionItemId = i.getId();\n\t\t\t\t\t\t\tgp.pageId = currentPage.getPageId();\n\t\t\t\t\t\t\tgp.pageItemId = pageItem.getId();\n\t\t\t\t\t\t\n\t\t\t\t\t\t\tUIInternalLink.make(tableRow, \"questionGradingPaneLink\", messageLocator.getMessage(\"simplepage.show-grading-pane\"), gp)\n\t\t\t\t\t\t\t    .decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.show-grading-pane\")));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\n\t\t\t\t\t\tUILink.make(tableRow, \"edit-question\", messageLocator.getMessage(\"simplepage.editItem\"), \"\")\n\t\t\t\t\t\t\t.decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.question\")));\n\t\t\t\t\t\t\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionId\", String.valueOf(i.getId()));\n\t\t\t\t\t\tboolean graded = \"true\".equals(i.getAttribute(\"questionGraded\")) || i.getGradebookId() != null;\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionGrade\", String.valueOf(graded));\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionMaxPoints\", String.valueOf(i.getGradebookPoints()));\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionGradebookTitle\", String.valueOf(i.getGradebookTitle()));\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionitem-required\", String.valueOf(i.isRequired()));\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionitem-prerequisite\", String.valueOf(i.isPrerequisite()));\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionitem-groups\", itemGroupString);\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionCorrectText\", String.valueOf(i.getAttribute(\"questionCorrectText\")));\n\t\t\t\t\t\tUIOutput.make(tableRow, \"questionIncorrectText\", String.valueOf(i.getAttribute(\"questionIncorrectText\")));\n\t\t\t\t\t\t\n\t\t\t\t\t\tif(\"shortanswer\".equals(i.getAttribute(\"questionType\"))) {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"questionType\", \"shortanswer\");\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"questionAnswer\", i.getAttribute(\"questionAnswer\"));\n\t\t\t\t\t\t}else {\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"questionType\", \"multipleChoice\");\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tfor(int j = 0; j < answers.size(); j++) {\n\t\t\t\t\t\t\t\tUIBranchContainer answerContainer = UIBranchContainer.make(tableRow, \"questionMultipleChoiceAnswer:\", String.valueOf(j));\n\t\t\t\t\t\t\t\tUIOutput.make(answerContainer, \"questionMultipleChoiceAnswerId\", String.valueOf(answers.get(j).getId()));\n\t\t\t\t\t\t\t\tUIOutput.make(answerContainer, \"questionMultipleChoiceAnswerText\", answers.get(j).getText());\n\t\t\t\t\t\t\t\tUIOutput.make(answerContainer, \"questionMultipleChoiceAnswerCorrect\", String.valueOf(answers.get(j).isCorrect()));\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\tUIOutput.make(tableRow, \"questionShowPoll\", String.valueOf(i.getAttribute(\"questionShowPoll\")));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}  else {\n\t\t\t\t\t// remaining type must be a block of HTML\n\t\t\t\t\tUIOutput.make(tableRow, \"itemSpan\");\n\n\t\t\t\t\tif (canSeeAll) {\n\t\t\t\t\t    String itemGroupString = simplePageBean.getItemGroupString(i, null, true);\n\t\t\t\t\t    String itemGroupTitles = simplePageBean.getItemGroupTitles(itemGroupString, i);\n\t\t\t\t\t    if (itemGroupTitles != null) {\n\t\t\t\t\t\titemGroupTitles = \"[\" + itemGroupTitles + \"]\";\n\t\t\t\t\t    }\n\t\t\t\t\t    \n\t\t\t\t\t    UIOutput.make(tableRow, \"item-groups-titles-text\", itemGroupTitles);\n\t\t\t\t\t}\n\n\t\t\t\t\tif(canSeeAll || simplePageBean.isItemAvailable(i)) {\n\t\t\t\t\t    UIVerbatim.make(tableRow, \"content\", (i.getHtml() == null ? \"\" : i.getHtml()));\n\t\t\t\t\t} else {\n\t\t\t\t\t    UIComponent unavailableText = UIOutput.make(tableRow, \"content\", messageLocator.getMessage(\"simplepage.textItemUnavailable\"));\n\t\t\t\t\t    unavailableText.decorate(new UIFreeAttributeDecorator(\"class\", \"disabled-text-item\"));\n\t\t\t\t\t}\n\n\t\t\t\t\t// editing is done using a special producer that calls FCK.\n\t\t\t\t\tif (canEditPage) {\n\t\t\t\t\t\tGeneralViewParameters eParams = new GeneralViewParameters();\n\t\t\t\t\t\teParams.setSendingPage(currentPage.getPageId());\n\t\t\t\t\t\teParams.setItemId(i.getId());\n\t\t\t\t\t\teParams.viewID = EditPageProducer.VIEW_ID;\n\t\t\t\t\t\tUIOutput.make(tableRow, \"edittext-td\");\n\t\t\t\t\t\tUIInternalLink.make(tableRow, \"edit-link\", messageLocator.getMessage(\"simplepage.editItem\"), eParams).decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.edit-title.textbox\").replace(\"{}\", Integer.toString(textboxcount))));\n\n\t\t\t\t\t\ttextboxcount++;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// end of items. This is the end for normal users. Following is\n\t\t\t// special\n\t\t\t// checks and putting out the dialogs for the popups, for\n\t\t\t// instructors.\n\n\t\t\tboolean showBreak = false;\n\n\t\t\t// I believe refresh is now done automatically in all cases\n\t\t\t// if (showRefresh) {\n\t\t\t// UIOutput.make(tofill, \"refreshAlert\");\n\t\t\t//\n\t\t\t// // Should simply refresh\n\t\t\t// GeneralViewParameters p = new GeneralViewParameters(VIEW_ID);\n\t\t\t// p.setSendingPage(currentPage.getPageId());\n\t\t\t// UIInternalLink.make(tofill, \"refreshLink\", p);\n\t\t\t// showBreak = true;\n\t\t\t// }\n\n\t\t\t// stuff goes on the page in the order in the HTML file. So the fact\n\t\t\t// that it's here doesn't mean it shows\n\t\t\t// up at the end. This code produces errors and other odd stuff.\n\n\t\t\tif (canSeeAll) {\n\t\t\t\t// if the page is hidden, warn the faculty [students get stopped\n\t\t\t\t// at\n\t\t\t\t// the top]\n\t\t\t\tif (currentPage.isHidden()) {\n\t\t\t\t\tUIOutput.make(tofill, \"hiddenAlert\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.pagehidden\")));\n\t\t\t\t\tUIVerbatim.make(tofill, \"hidden-text\", messageLocator.getMessage(\"simplepage.pagehidden.text\"));\n\n\t\t\t\t\tshowBreak = true;\n\t\t\t\t\t// similarly warn them if it isn't released yet\n\t\t\t\t} else if (currentPage.getReleaseDate() != null && currentPage.getReleaseDate().after(new Date())) {\n\t\t\t\t\tDateFormat df = DateFormat.getDateTimeInstance(DateFormat.MEDIUM, DateFormat.SHORT, M_locale);\n\t\t\t\t\tTimeZone tz = timeService.getLocalTimeZone();\n\t\t\t\t\tdf.setTimeZone(tz);\n\t\t\t\t\tString releaseDate = df.format(currentPage.getReleaseDate());\n\t\t\t\t\tUIOutput.make(tofill, \"hiddenAlert\").decorate(new UIFreeAttributeDecorator(\"title\", messageLocator.getMessage(\"simplepage.notreleased\")));\n\t\t\t\t\tUIVerbatim.make(tofill, \"hidden-text\", messageLocator.getMessage(\"simplepage.notreleased.text\").replace(\"{}\", releaseDate));\n\t\t\t\t\tshowBreak = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (showBreak) {\n\t\t\t\tUIOutput.make(tofill, \"breakAfterWarnings\");\n\t\t\t}\n\t\t}\n\n\t\t// more warnings: if no item on the page, give faculty instructions,\n\t\t// students an error\n\t\tif (!anyItemVisible) {\n\t\t\tif (canEditPage) {\n\t\t\t\tUIOutput.make(tofill, \"startupHelp\")\n\t\t\t\t    .decorate(new UIFreeAttributeDecorator(\"src\", \n\t\t\t\t\tgetLocalizedURL((currentPage.getOwner() != null) ? \"student.html\" : \"general.html\")))\n\t\t\t\t    .decorate(new UIFreeAttributeDecorator(\"id\", \"iframe\"));\n\t\t\t\tif (!iframeJavascriptDone) {\n\t\t\t\t    UIOutput.make(tofill, \"iframeJavascript\");\n\t\t\t\t    iframeJavascriptDone = true;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tUIOutput.make(tofill, \"error-div\");\n\t\t\t\tUIOutput.make(tofill, \"error\", messageLocator.getMessage(\"simplepage.noitems_error_user\"));\n\t\t\t}\n\t\t}\n\n\t\t// now output the dialogs. but only for faculty (to avoid making the\n\t\t// file bigger)\n\t\tif (canEditPage) {\n\t\t\tcreateSubpageDialog(tofill, currentPage);\n\t\t}\n\n\t\tcreateDialogs(tofill, currentPage, pageItem);\n\t}","commit_id":"76615aa64af25fafd889a30c38755f09a1175edc","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public boolean computeStatsFillModel(NaiveBayesModel model, DataInfo dinfo, NBTask tsk) {\n      model._output._levels = _response.domain();\n      model._output._rescnt = tsk._rescnt;\n      model._output._ncats = dinfo._cats;\n\n      if(stop_requested()) return false;\n      _job.update(1, \"Initializing arrays for model statistics\");\n      // String[][] domains = dinfo._adaptedFrame.domains();\n      String[][] domains = model._output._domains;\n      double[] apriori = new double[tsk._nrescat];\n      double[][][] pcond = new double[tsk._npreds][][];\n      for(int i = 0; i < pcond.length; i++) {\n        int ncnt = domains[i] == null ? 2 : domains[i].length;\n        pcond[i] = new double[tsk._nrescat][ncnt];\n      }\n\n      if(stop_requested()) return false;\n      _job.update(1, \"Computing probabilities for categorical cols\");\n      // A-priori probability of response y\n      for(int i = 0; i < apriori.length; i++)\n        apriori[i] = ((double)tsk._rescnt[i] + _parms._laplace)/(tsk._nobs + tsk._nrescat * _parms._laplace);\n        // apriori[i] = tsk._rescnt[i]/tsk._nobs;     // Note: R doesn't apply laplace smoothing to priors, even though this is textbook definition\n\n      // Probability of categorical predictor x_j conditional on response y\n      for(int col = 0; col < dinfo._cats; col++) {\n        assert pcond[col].length == tsk._nrescat;\n        for(int i = 0; i < pcond[col].length; i++) {\n          for(int j = 0; j < pcond[col][i].length; j++)\n            pcond[col][i][j] = ((double)tsk._jntcnt[col][i][j] + _parms._laplace)/((double)tsk._rescnt[i] + domains[col].length * _parms._laplace);\n        }\n      }\n\n      if(stop_requested()) return false;\n      _job.update(1, \"Computing mean and standard deviation for numeric cols\");\n      // Mean and standard deviation of numeric predictor x_j for every level of response y\n      for(int col = 0; col < dinfo._nums; col++) {\n        for(int i = 0; i < pcond[0].length; i++) {\n          int cidx = dinfo._cats + col;\n          double num = tsk._rescnt[i];\n          double pmean = tsk._jntsum[col][i][0]/num;\n\n          pcond[cidx][i][0] = pmean;\n          // double pvar = tsk._jntsum[col][i][1]/num - pmean * pmean;\n          double pvar = tsk._jntsum[col][i][1]/(num - 1) - pmean * pmean * num/(num - 1);\n          pcond[cidx][i][1] = Math.sqrt(pvar);\n        }\n      }\n      model._output._apriori_raw = apriori;\n      model._output._pcond_raw = pcond;\n\n      // Create table of conditional probabilities for every predictor\n      model._output._pcond = new TwoDimTable[pcond.length];\n      String[] rowNames = _response.domain();\n      for(int col = 0; col < dinfo._cats; col++) {\n        String[] colNames = _train.vec(col).domain();\n        String[] colTypes = new String[colNames.length];\n        String[] colFormats = new String[colNames.length];\n        Arrays.fill(colTypes, \"double\");\n        Arrays.fill(colFormats, \"%5f\");\n        model._output._pcond[col] = new TwoDimTable(_train.name(col), null, rowNames, colNames, colTypes, colFormats,\n                \"Y_by_\" + _train.name(col), new String[rowNames.length][], pcond[col]);\n      }\n\n      for(int col = 0; col < dinfo._nums; col++) {\n        int cidx = dinfo._cats + col;\n        model._output._pcond[cidx] = new TwoDimTable(_train.name(cidx), null, rowNames, new String[] {\"Mean\", \"Std_Dev\"},\n                new String[] {\"double\", \"double\"}, new String[] {\"%5f\", \"%5f\"}, \"Y_by_\" + _train.name(cidx),\n                new String[rowNames.length][], pcond[cidx]);\n      }\n\n      // Create table of a-priori probabilities for the response\n      String[] colTypes = new String[_response.cardinality()];\n      String[] colFormats = new String[_response.cardinality()];\n      Arrays.fill(colTypes, \"double\");\n      Arrays.fill(colFormats, \"%5f\");\n      model._output._apriori = new TwoDimTable(\"A Priori Response Probabilities\", null, new String[1], _response.domain(), colTypes, colFormats, \"\",\n              new String[1][], new double[][] {apriori});\n      model._output._model_summary = createModelSummaryTable(model._output);\n\n      if(stop_requested()) return false;\n      _job.update(1, \"Scoring and computing metrics on training data\");\n      if (_parms._compute_metrics) {\n        model.score(_parms.train()).delete(); // This scores on the training data and appends a ModelMetrics\n        model._output._training_metrics = ModelMetrics.getFromDKV(model,_parms.train());\n      }\n\n      // At the end: validation scoring (no need to gather scoring history)\n      if(stop_requested()) return false;\n      _job.update(1, \"Scoring and computing metrics on validation data\");\n      if (_valid != null) {\n        model.score(_parms.valid()).delete(); //this appends a ModelMetrics on the validation set\n        model._output._validation_metrics = ModelMetrics.getFromDKV(model,_parms.valid());\n      }\n\n      return true;\n    }","id":96055,"modified_method":"public boolean computeStatsFillModel(NaiveBayesModel model, DataInfo dinfo, NBTask tsk) {\n      model._output._levels = _response.domain();\n      model._output._rescnt = tsk._rescnt;\n      model._output._ncats = dinfo._cats;\n\n      if(stop_requested() && !timeout()) return false;\n      _job.update(1, \"Initializing arrays for model statistics\");\n      // String[][] domains = dinfo._adaptedFrame.domains();\n      String[][] domains = model._output._domains;\n      double[] apriori = new double[tsk._nrescat];\n      double[][][] pcond = new double[tsk._npreds][][];\n      for(int i = 0; i < pcond.length; i++) {\n        int ncnt = domains[i] == null ? 2 : domains[i].length;\n        pcond[i] = new double[tsk._nrescat][ncnt];\n      }\n\n      if(stop_requested() && !timeout()) return false;\n      _job.update(1, \"Computing probabilities for categorical cols\");\n      // A-priori probability of response y\n      for(int i = 0; i < apriori.length; i++)\n        apriori[i] = ((double)tsk._rescnt[i] + _parms._laplace)/(tsk._nobs + tsk._nrescat * _parms._laplace);\n        // apriori[i] = tsk._rescnt[i]/tsk._nobs;     // Note: R doesn't apply laplace smoothing to priors, even though this is textbook definition\n\n      // Probability of categorical predictor x_j conditional on response y\n      for(int col = 0; col < dinfo._cats; col++) {\n        assert pcond[col].length == tsk._nrescat;\n        for(int i = 0; i < pcond[col].length; i++) {\n          for(int j = 0; j < pcond[col][i].length; j++)\n            pcond[col][i][j] = ((double)tsk._jntcnt[col][i][j] + _parms._laplace)/((double)tsk._rescnt[i] + domains[col].length * _parms._laplace);\n        }\n      }\n\n      if(stop_requested() && !timeout()) return false;\n      _job.update(1, \"Computing mean and standard deviation for numeric cols\");\n      // Mean and standard deviation of numeric predictor x_j for every level of response y\n      for(int col = 0; col < dinfo._nums; col++) {\n        for(int i = 0; i < pcond[0].length; i++) {\n          int cidx = dinfo._cats + col;\n          double num = tsk._rescnt[i];\n          double pmean = tsk._jntsum[col][i][0]/num;\n\n          pcond[cidx][i][0] = pmean;\n          // double pvar = tsk._jntsum[col][i][1]/num - pmean * pmean;\n          double pvar = tsk._jntsum[col][i][1]/(num - 1) - pmean * pmean * num/(num - 1);\n          pcond[cidx][i][1] = Math.sqrt(pvar);\n        }\n      }\n      model._output._apriori_raw = apriori;\n      model._output._pcond_raw = pcond;\n\n      // Create table of conditional probabilities for every predictor\n      model._output._pcond = new TwoDimTable[pcond.length];\n      String[] rowNames = _response.domain();\n      for(int col = 0; col < dinfo._cats; col++) {\n        String[] colNames = _train.vec(col).domain();\n        String[] colTypes = new String[colNames.length];\n        String[] colFormats = new String[colNames.length];\n        Arrays.fill(colTypes, \"double\");\n        Arrays.fill(colFormats, \"%5f\");\n        model._output._pcond[col] = new TwoDimTable(_train.name(col), null, rowNames, colNames, colTypes, colFormats,\n                \"Y_by_\" + _train.name(col), new String[rowNames.length][], pcond[col]);\n      }\n\n      for(int col = 0; col < dinfo._nums; col++) {\n        int cidx = dinfo._cats + col;\n        model._output._pcond[cidx] = new TwoDimTable(_train.name(cidx), null, rowNames, new String[] {\"Mean\", \"Std_Dev\"},\n                new String[] {\"double\", \"double\"}, new String[] {\"%5f\", \"%5f\"}, \"Y_by_\" + _train.name(cidx),\n                new String[rowNames.length][], pcond[cidx]);\n      }\n\n      // Create table of a-priori probabilities for the response\n      String[] colTypes = new String[_response.cardinality()];\n      String[] colFormats = new String[_response.cardinality()];\n      Arrays.fill(colTypes, \"double\");\n      Arrays.fill(colFormats, \"%5f\");\n      model._output._apriori = new TwoDimTable(\"A Priori Response Probabilities\", null, new String[1], _response.domain(), colTypes, colFormats, \"\",\n              new String[1][], new double[][] {apriori});\n      model._output._model_summary = createModelSummaryTable(model._output);\n\n      if(stop_requested() && !timeout()) return false;\n      _job.update(1, \"Scoring and computing metrics on training data\");\n      if (_parms._compute_metrics) {\n        model.score(_parms.train()).delete(); // This scores on the training data and appends a ModelMetrics\n        model._output._training_metrics = ModelMetrics.getFromDKV(model,_parms.train());\n      }\n\n      // At the end: validation scoring (no need to gather scoring history)\n      if(stop_requested() && !timeout()) return false;\n      _job.update(1, \"Scoring and computing metrics on validation data\");\n      if (_valid != null) {\n        model.score(_parms.valid()).delete(); //this appends a ModelMetrics on the validation set\n        model._output._validation_metrics = ModelMetrics.getFromDKV(model,_parms.valid());\n      }\n\n      return true;\n    }","commit_id":"16b840f9ad0ba7bd5408f0d96d154d3f8b9b05de","url":"https://github.com/h2oai/h2o-3"},{"original_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tfinal PortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery folderActionableDynamicQuery =\n\t\t\tgetFolderActionableDynamicQuery(portletDataContext);\n\n\t\tlong folderCount = folderActionableDynamicQuery.performCount();\n\n\t\tmanifestSummary.addModelCount(Folder.class, folderCount);\n\n\t\tActionableDynamicQuery fileEntryActionableDynamicQuery =\n\t\t\tgetFileEntryActionableDynamicQuery(portletDataContext);\n\n\t\tlong entryCount = fileEntryActionableDynamicQuery.performCount();\n\n\t\tmanifestSummary.addModelCount(FileEntry.class, entryCount);\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"shortcuts\")) {\n\t\t\tActionableDynamicQuery fileShortcutActionableDynamicQuery =\n\t\t\t\tgetFileShortcutActionableDynamicQuery(portletDataContext);\n\n\t\t\tlong shortcutCount =\n\t\t\t\tfileShortcutActionableDynamicQuery.performCount();\n\n\t\t\tmanifestSummary.addModelCount(DLFileShortcut.class, shortcutCount);\n\t\t}\n\t}","id":96056,"modified_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tfinal PortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery folderActionableDynamicQuery =\n\t\t\tgetFolderActionableDynamicQuery(portletDataContext);\n\n\t\tlong folderCount = folderActionableDynamicQuery.performCount();\n\n\t\tmanifestSummary.addModelCount(Folder.class, folderCount);\n\n\t\tActionableDynamicQuery fileEntryActionableDynamicQuery =\n\t\t\tgetFileEntryActionableDynamicQuery(portletDataContext);\n\n\t\tlong entryCount = fileEntryActionableDynamicQuery.performCount();\n\n\t\tmanifestSummary.addModelCount(FileEntry.class, entryCount);\n\n\t\tActionableDynamicQuery fileShortcutActionableDynamicQuery =\n\t\t\tgetFileShortcutActionableDynamicQuery(portletDataContext);\n\n\t\tlong shortcutCount = fileShortcutActionableDynamicQuery.performCount();\n\n\t\tmanifestSummary.addModelCount(DLFileShortcut.class, shortcutCount);\n\t}","commit_id":"937570f7240743c4ec2570bc4b5d6271843af4ce","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery feedActionableDynamicQuery =\n\t\t\tnew JournalFeedExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tJournalFeed.class, feedActionableDynamicQuery.performCount());\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"web-content\")) {\n\t\t\tActionableDynamicQuery articleActionableDynamicQuery =\n\t\t\t\tgetArticleActionableDynamicQuery(portletDataContext);\n\n\t\t\tmanifestSummary.addModelCount(\n\t\t\t\tJournalArticle.class,\n\t\t\t\tarticleActionableDynamicQuery.performCount());\n\n\t\t\tActionableDynamicQuery folderActionableDynamicQuery =\n\t\t\t\tgetFolderActionableDynamicQuery(portletDataContext);\n\n\t\t\tmanifestSummary.addModelCount(\n\t\t\t\tJournalFolder.class,\n\t\t\t\tfolderActionableDynamicQuery.performCount());\n\t\t}\n\t}","id":96057,"modified_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery feedActionableDynamicQuery =\n\t\t\tnew JournalFeedExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tJournalFeed.class, feedActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery articleActionableDynamicQuery =\n\t\t\tgetArticleActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tJournalArticle.class, articleActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery folderActionableDynamicQuery =\n\t\t\tgetFolderActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tJournalFolder.class, folderActionableDynamicQuery.performCount());\n\t}","commit_id":"937570f7240743c4ec2570bc4b5d6271843af4ce","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery categoriesActionableDynamicQuery =\n\t\t\tnew MBCategoryExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tMBCategory.class, categoriesActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery messagesActionableDynamicQuery =\n\t\t\tnew MBMessageExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tMBMessage.class, messagesActionableDynamicQuery.performCount());\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"thread-flags\")) {\n\t\t\tActionableDynamicQuery threadFlagsActionableDynamicQuery =\n\t\t\t\tnew MBThreadFlagExportActionableDynamicQuery(\n\t\t\t\t\tportletDataContext);\n\n\t\t\tmanifestSummary.addModelCount(\n\t\t\t\tMBThreadFlag.class,\n\t\t\t\tthreadFlagsActionableDynamicQuery.performCount());\n\t\t}\n\n\t\tif (portletDataContext.getBooleanParameter(NAMESPACE, \"user-bans\")) {\n\t\t\tActionableDynamicQuery userBansActionableDynamicQuery =\n\t\t\t\tnew MBBanExportActionableDynamicQuery(portletDataContext);\n\n\t\t\tmanifestSummary.addModelCount(\n\t\t\t\tMBBan.class, userBansActionableDynamicQuery.performCount());\n\t\t}\n\t}","id":96058,"modified_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery categoriesActionableDynamicQuery =\n\t\t\tnew MBCategoryExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tMBCategory.class, categoriesActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery messagesActionableDynamicQuery =\n\t\t\tnew MBMessageExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tMBMessage.class, messagesActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery threadFlagsActionableDynamicQuery =\n\t\t\tnew MBThreadFlagExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tMBThreadFlag.class,\n\t\t\tthreadFlagsActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery userBansActionableDynamicQuery =\n\t\t\tnew MBBanExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tMBBan.class, userBansActionableDynamicQuery.performCount());\n\t}","commit_id":"937570f7240743c4ec2570bc4b5d6271843af4ce","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery choiceActionableDynamicQuery =\n\t\t\tnew PollsChoiceExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tPollsChoice.class, choiceActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery questionActionableDynamicQuery =\n\t\t\tnew PollsQuestionExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tPollsQuestion.class, questionActionableDynamicQuery.performCount());\n\n\t\tif (portletDataContext.getBooleanParameter(\n\t\t\t\tPollsPortletDataHandler.NAMESPACE, \"votes\")) {\n\n\t\t\tActionableDynamicQuery voteActionableDynamicQuery =\n\t\t\t\tnew PollsVoteExportActionableDynamicQuery(portletDataContext);\n\n\t\t\tmanifestSummary.addModelCount(\n\t\t\t\tPollsVote.class, voteActionableDynamicQuery.performCount());\n\t\t}\n\t}","id":96059,"modified_method":"@Override\n\tprotected void doPrepareManifestSummary(\n\t\t\tPortletDataContext portletDataContext)\n\t\tthrows Exception {\n\n\t\tManifestSummary manifestSummary =\n\t\t\tportletDataContext.getManifestSummary();\n\n\t\tActionableDynamicQuery choiceActionableDynamicQuery =\n\t\t\tnew PollsChoiceExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tPollsChoice.class, choiceActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery questionActionableDynamicQuery =\n\t\t\tnew PollsQuestionExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tPollsQuestion.class, questionActionableDynamicQuery.performCount());\n\n\t\tActionableDynamicQuery voteActionableDynamicQuery =\n\t\t\tnew PollsVoteExportActionableDynamicQuery(portletDataContext);\n\n\t\tmanifestSummary.addModelCount(\n\t\t\tPollsVote.class, voteActionableDynamicQuery.performCount());\n\t}","commit_id":"937570f7240743c4ec2570bc4b5d6271843af4ce","url":"https://github.com/liferay/liferay-portal"},{"original_method":"static FilePredicate fromDeprecatedAttribute(String key, Collection<String> value) {\n    if (\"TYPE\".equals(key)) {\n      return FilePredicates.or(Collections2.transform(value, new Function<String, FilePredicate>() {\n        @Override\n        public FilePredicate apply(@Nullable String s) {\n          return s == null ? FilePredicates.all() : FilePredicates.hasType(org.sonar.api.batch.fs.InputFile.Type.valueOf(s));\n        }\n      }));\n    }\n    if (\"STATUS\".equals(key)) {\n      return FilePredicates.or(Collections2.transform(value, new Function<String, FilePredicate>() {\n        @Override\n        public FilePredicate apply(@Nullable String s) {\n          return s == null ? FilePredicates.all() : FilePredicates.hasStatus(org.sonar.api.batch.fs.InputFile.Status.valueOf(s));\n        }\n      }));\n    }\n    if (\"LANG\".equals(key)) {\n      return FilePredicates.or(Collections2.transform(value, new Function<String, FilePredicate>() {\n        @Override\n        public FilePredicate apply(@Nullable String s) {\n          return s == null ? FilePredicates.all() : FilePredicates.hasLanguage(s);\n        }\n      }));\n    }\n    if (\"CMP_KEY\".equals(key)) {\n      return FilePredicates.or(Collections2.transform(value, new Function<String, FilePredicate>() {\n        @Override\n        public FilePredicate apply(@Nullable String s) {\n          return s == null ? FilePredicates.all() : new FilePredicateAdapters.KeyPredicate(s);\n        }\n      }));\n    }\n    if (\"CMP_DEPRECATED_KEY\".equals(key)) {\n      return FilePredicates.or(Collections2.transform(value, new Function<String, FilePredicate>() {\n        @Override\n        public FilePredicate apply(@Nullable String s) {\n          return s == null ? FilePredicates.all() : new FilePredicateAdapters.DeprecatedKeyPredicate(s);\n        }\n      }));\n    }\n    if (\"SRC_REL_PATH\".equals(key)) {\n      return FilePredicates.or(Collections2.transform(value, new Function<String, FilePredicate>() {\n        @Override\n        public FilePredicate apply(@Nullable String s) {\n          return s == null ? FilePredicates.all() : new FilePredicateAdapters.SourceRelativePathPredicate(s);\n        }\n      }));\n    }\n    if (\"SRC_DIR_PATH\".equals(key)) {\n      return FilePredicates.or(Collections2.transform(value, new Function<String, FilePredicate>() {\n        @Override\n        public FilePredicate apply(@Nullable String s) {\n          return s == null ? FilePredicates.all() : new FilePredicateAdapters.SourceDirPredicate(s);\n        }\n      }));\n    }\n    throw new IllegalArgumentException(\"Unsupported file attribute: \" + key);\n  }","id":96060,"modified_method":"static FilePredicate fromDeprecatedAttribute(String key, Collection<String> value) {\n    if (\"TYPE\".equals(key)) {\n      return FilePredicates.or(Collections2.transform(value, new Function<String, FilePredicate>() {\n        @Override\n        public FilePredicate apply(@Nullable String s) {\n          return s == null ? FilePredicates.all() : FilePredicates.hasType(org.sonar.api.batch.fs.InputFile.Type.valueOf(s));\n        }\n      }));\n    }\n    if (\"STATUS\".equals(key)) {\n      return FilePredicates.or(Collections2.transform(value, new Function<String, FilePredicate>() {\n        @Override\n        public FilePredicate apply(@Nullable String s) {\n          return s == null ? FilePredicates.all() : FilePredicates.hasStatus(org.sonar.api.batch.fs.InputFile.Status.valueOf(s));\n        }\n      }));\n    }\n    if (\"LANG\".equals(key)) {\n      return FilePredicates.or(Collections2.transform(value, new Function<String, FilePredicate>() {\n        @Override\n        public FilePredicate apply(@Nullable String s) {\n          return s == null ? FilePredicates.all() : FilePredicates.hasLanguage(s);\n        }\n      }));\n    }\n    if (\"CMP_KEY\".equals(key)) {\n      return FilePredicates.or(Collections2.transform(value, new Function<String, FilePredicate>() {\n        @Override\n        public FilePredicate apply(@Nullable String s) {\n          return s == null ? FilePredicates.all() : new AdditionalFilePredicates.KeyPredicate(s);\n        }\n      }));\n    }\n    if (\"CMP_DEPRECATED_KEY\".equals(key)) {\n      return FilePredicates.or(Collections2.transform(value, new Function<String, FilePredicate>() {\n        @Override\n        public FilePredicate apply(@Nullable String s) {\n          return s == null ? FilePredicates.all() : new AdditionalFilePredicates.DeprecatedKeyPredicate(s);\n        }\n      }));\n    }\n    if (\"SRC_REL_PATH\".equals(key)) {\n      return FilePredicates.or(Collections2.transform(value, new Function<String, FilePredicate>() {\n        @Override\n        public FilePredicate apply(@Nullable String s) {\n          return s == null ? FilePredicates.all() : new AdditionalFilePredicates.SourceRelativePathPredicate(s);\n        }\n      }));\n    }\n    if (\"SRC_DIR_PATH\".equals(key)) {\n      return FilePredicates.or(Collections2.transform(value, new Function<String, FilePredicate>() {\n        @Override\n        public FilePredicate apply(@Nullable String s) {\n          return s == null ? FilePredicates.all() : new AdditionalFilePredicates.SourceDirPredicate(s);\n        }\n      }));\n    }\n    throw new IllegalArgumentException(\"Unsupported file attribute: \" + key);\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public boolean accept(File ioFile, String relativePathFromBasedir, InputFile.Type type) {\n    PathPattern[] inclusionPatterns = null;\n    PathPattern[] exclusionPatterns = null;\n    if (InputFile.Type.MAIN==type) {\n      inclusionPatterns = sourceInclusions;\n      exclusionPatterns = sourceExclusions;\n    } else if (InputFile.Type.TEST==type) {\n      inclusionPatterns = testInclusions;\n      exclusionPatterns = testExclusions;\n    }\n    boolean matchInclusion = false;\n    if (inclusionPatterns != null && inclusionPatterns.length > 0) {\n      for (PathPattern pattern : inclusionPatterns) {\n        matchInclusion |= pattern.match(ioFile, relativePathFromBasedir);\n      }\n      if (!matchInclusion) {\n        return false;\n      }\n    }\n    if (exclusionPatterns != null && exclusionPatterns.length > 0) {\n      for (PathPattern pattern : exclusionPatterns) {\n        if (pattern.match(ioFile, relativePathFromBasedir)) {\n          return false;\n        }\n      }\n    }\n    return matchInclusion;\n  }","id":96061,"modified_method":"public boolean accept(InputFile inputFile, InputFile.Type type) {\n    PathPattern[] inclusionPatterns = null;\n    PathPattern[] exclusionPatterns = null;\n    if (InputFile.Type.MAIN==type) {\n      inclusionPatterns = sourceInclusions;\n      exclusionPatterns = sourceExclusions;\n    } else if (InputFile.Type.TEST==type) {\n      inclusionPatterns = testInclusions;\n      exclusionPatterns = testExclusions;\n    }\n    boolean matchInclusion = false;\n    if (inclusionPatterns != null && inclusionPatterns.length > 0) {\n      for (PathPattern pattern : inclusionPatterns) {\n        matchInclusion |= pattern.match(inputFile);\n      }\n      if (!matchInclusion) {\n        return false;\n      }\n    }\n    if (exclusionPatterns != null && exclusionPatterns.length > 0) {\n      for (PathPattern pattern : exclusionPatterns) {\n        if (pattern.match(inputFile)) {\n          return false;\n        }\n      }\n    }\n    return matchInclusion;\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_match_at_least_one_source_inclusion() throws IOException {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.PROJECT_INCLUSIONS_PROPERTY, \"**/*Dao.java,**/*Dto.java\");\n    ExclusionFilters filter = new ExclusionFilters(new FileExclusions(settings));\n\n    filter.prepare(fs);\n\n    java.io.File file = temp.newFile();\n\n    assertThat(filter.accept(file, \"src/main/java/com/mycompany/Foo.java\", InputFile.Type.MAIN)).isFalse();\n\n    assertThat(filter.accept(file, \"src/main/java/com/mycompany/FooDto.java\", InputFile.Type.MAIN)).isTrue();\n  }","id":96062,"modified_method":"@Test\n  public void should_match_at_least_one_source_inclusion() throws IOException {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.PROJECT_INCLUSIONS_PROPERTY, \"**/*Dao.java,**/*Dto.java\");\n    ExclusionFilters filter = new ExclusionFilters(new FileExclusions(settings));\n\n    filter.prepare(fs);\n\n    java.io.File file = temp.newFile();\n\n    DefaultInputFile inputFile = new DefaultInputFile(\"src/main/java/com/mycompany/Foo.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.MAIN)).isFalse();\n\n    inputFile = new DefaultInputFile(\"src/main/java/com/mycompany/FooDto.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.MAIN)).isTrue();\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_match_source_exclusions() throws IOException {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.PROJECT_INCLUSIONS_PROPERTY, \"src/main/java/**/*\");\n    settings.setProperty(CoreProperties.PROJECT_TEST_INCLUSIONS_PROPERTY, \"src/test/java/**/*\");\n    settings.setProperty(CoreProperties.PROJECT_EXCLUSIONS_PROPERTY, \"**/*Dao.java\");\n    ExclusionFilters filter = new ExclusionFilters(new FileExclusions(settings));\n\n    filter.prepare(fs);\n\n    java.io.File file = temp.newFile();\n    assertThat(filter.accept(file, \"src/main/java/com/mycompany/FooDao.java\", InputFile.Type.MAIN)).isFalse();\n\n    assertThat(filter.accept(file, \"src/main/java/com/mycompany/Foo.java\", InputFile.Type.MAIN)).isTrue();\n\n    // source exclusions do not apply to tests\n    assertThat(filter.accept(file, \"src/test/java/com/mycompany/FooDao.java\", InputFile.Type.TEST)).isTrue();\n  }","id":96063,"modified_method":"@Test\n  public void should_match_source_exclusions() throws IOException {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.PROJECT_INCLUSIONS_PROPERTY, \"src/main/java/**/*\");\n    settings.setProperty(CoreProperties.PROJECT_TEST_INCLUSIONS_PROPERTY, \"src/test/java/**/*\");\n    settings.setProperty(CoreProperties.PROJECT_EXCLUSIONS_PROPERTY, \"**/*Dao.java\");\n    ExclusionFilters filter = new ExclusionFilters(new FileExclusions(settings));\n\n    filter.prepare(fs);\n\n    java.io.File file = temp.newFile();\n    DefaultInputFile inputFile = new DefaultInputFile(\"src/main/java/com/mycompany/FooDao.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.MAIN)).isFalse();\n\n    inputFile = new DefaultInputFile(\"src/main/java/com/mycompany/Foo.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.MAIN)).isTrue();\n\n    // source exclusions do not apply to tests\n    inputFile = new DefaultInputFile(\"src/test/java/com/mycompany/FooDao.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.TEST)).isTrue();\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_include_source_folders_by_default() throws IOException {\n    Settings settings = new Settings();\n    ExclusionFilters filter = new ExclusionFilters(new FileExclusions(settings));\n    when(fs.sourceDirs()).thenReturn(Arrays.asList(new File(basedir, \"src/main/java\")));\n\n    filter.prepare(fs);\n\n    java.io.File file = temp.newFile();\n\n    assertThat(filter.accept(file, \"src/main/java/com/mycompany/Foo.java\", InputFile.Type.MAIN)).isTrue();\n\n    assertThat(filter.accept(file, \"src/main/java2/com/mycompany/FooDao.java\", InputFile.Type.MAIN)).isFalse();\n\n    // source inclusions do not apply to tests\n    assertThat(filter.accept(file, \"src/main/java/com/mycompany/Foo.java\", InputFile.Type.TEST)).isFalse();\n  }","id":96064,"modified_method":"@Test\n  public void should_include_source_folders_by_default() throws IOException {\n    Settings settings = new Settings();\n    ExclusionFilters filter = new ExclusionFilters(new FileExclusions(settings));\n    when(fs.sourceDirs()).thenReturn(Arrays.asList(new File(basedir, \"src/main/java\")));\n\n    filter.prepare(fs);\n\n    java.io.File file = temp.newFile();\n\n    DefaultInputFile inputFile = new DefaultInputFile(\"src/main/java/com/mycompany/Foo.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.MAIN)).isTrue();\n\n    inputFile = new DefaultInputFile(\"src/main/java2/com/mycompany/FooDao.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.MAIN)).isFalse();\n\n    // source inclusions do not apply to tests\n    inputFile = new DefaultInputFile(\"src/main/java/com/mycompany/FooDao.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.TEST)).isFalse();\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_include_source_and_test_folders_by_default() throws IOException {\n    Settings settings = new Settings();\n    ExclusionFilters filter = new ExclusionFilters(new FileExclusions(settings));\n    when(fs.sourceDirs()).thenReturn(Arrays.asList(new File(basedir, \"src/main/java\")));\n    when(fs.testDirs()).thenReturn(Arrays.asList(new File(basedir, \"src/test/java\")));\n\n    filter.prepare(fs);\n\n    java.io.File file = temp.newFile();\n\n    assertThat(filter.accept(file, \"src/main/java/com/mycompany/Foo.java\", InputFile.Type.MAIN)).isTrue();\n\n    assertThat(filter.accept(file, \"src/main/java/com/mycompany/Foo.java\", InputFile.Type.TEST)).isFalse();\n\n    assertThat(filter.accept(file, \"src/test/java/com/mycompany/Foo.java\", InputFile.Type.TEST)).isTrue();\n  }","id":96065,"modified_method":"@Test\n  public void should_include_source_and_test_folders_by_default() throws IOException {\n    Settings settings = new Settings();\n    ExclusionFilters filter = new ExclusionFilters(new FileExclusions(settings));\n    when(fs.sourceDirs()).thenReturn(Arrays.asList(new File(basedir, \"src/main/java\")));\n    when(fs.testDirs()).thenReturn(Arrays.asList(new File(basedir, \"src/test/java\")));\n\n    filter.prepare(fs);\n\n    java.io.File file = temp.newFile();\n\n    DefaultInputFile inputFile = new DefaultInputFile(\"src/main/java/com/mycompany/Foo.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.MAIN)).isTrue();\n    assertThat(filter.accept(inputFile, InputFile.Type.TEST)).isFalse();\n\n    inputFile = new DefaultInputFile(\"src/test/java/com/mycompany/Foo.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.TEST)).isTrue();\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_match_source_inclusion() throws IOException {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.PROJECT_INCLUSIONS_PROPERTY, \"**/*Dao.java\");\n    ExclusionFilters filter = new ExclusionFilters(new FileExclusions(settings));\n    filter.prepare(fs);\n\n    java.io.File file = temp.newFile();\n\n    assertThat(filter.accept(file, \"src/main/java/com/mycompany/Foo.java\", InputFile.Type.MAIN)).isFalse();\n\n    assertThat(filter.accept(file, \"src/main/java/com/mycompany/FooDao.java\", InputFile.Type.MAIN)).isTrue();\n\n    // test are excluded by default if no sonar.tests nor sonar.test.inclusions\n    assertThat(filter.accept(file, \"src/main/java/com/mycompany/Foo.java\", InputFile.Type.TEST)).isFalse();\n  }","id":96066,"modified_method":"@Test\n  public void should_match_source_inclusion() throws IOException {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.PROJECT_INCLUSIONS_PROPERTY, \"**/*Dao.java\");\n    ExclusionFilters filter = new ExclusionFilters(new FileExclusions(settings));\n    filter.prepare(fs);\n\n    java.io.File file = temp.newFile();\n    DefaultInputFile inputFile = new DefaultInputFile(\"src/main/java/com/mycompany/FooDao.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.MAIN)).isTrue();\n\n    // test are excluded by default if no sonar.tests nor sonar.test.inclusions\n    assertThat(filter.accept(inputFile, InputFile.Type.TEST)).isFalse();\n\n    inputFile = new DefaultInputFile(\"src/main/java/com/mycompany/Foo.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.MAIN)).isFalse();\n\n    // test are excluded by default if no sonar.tests nor sonar.test.inclusions\n    assertThat(filter.accept(inputFile, InputFile.Type.TEST)).isFalse();\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_ignore_source_folders_if_inclusion_defined() throws IOException {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.PROJECT_INCLUSIONS_PROPERTY, \"src/main/java2/**/*\");\n    ExclusionFilters filter = new ExclusionFilters(new FileExclusions(settings));\n    when(fs.sourceDirs()).thenReturn(Arrays.asList(new File(basedir, \"src/main/java\")));\n\n    filter.prepare(fs);\n\n    java.io.File file = temp.newFile();\n\n    assertThat(filter.accept(file, \"src/main/java/com/mycompany/Foo.java\", InputFile.Type.MAIN)).isFalse();\n\n    assertThat(filter.accept(file, \"src/main/java2/com/mycompany/FooDao.java\", InputFile.Type.MAIN)).isTrue();\n\n    // source inclusions do not apply to tests\n    assertThat(filter.accept(file, \"src/main/java/com/mycompany/Foo.java\", InputFile.Type.TEST)).isFalse();\n  }","id":96067,"modified_method":"@Test\n  public void should_ignore_source_folders_if_inclusion_defined() throws IOException {\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.PROJECT_INCLUSIONS_PROPERTY, \"src/main/java2/**/*\");\n    ExclusionFilters filter = new ExclusionFilters(new FileExclusions(settings));\n    when(fs.sourceDirs()).thenReturn(Arrays.asList(new File(basedir, \"src/main/java\")));\n\n    filter.prepare(fs);\n\n    java.io.File file = temp.newFile();\n\n    DefaultInputFile inputFile = new DefaultInputFile(\"src/main/java/com/mycompany/Foo.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.MAIN)).isFalse();\n\n    inputFile = new DefaultInputFile(\"src/main/java2/com/mycompany/FooDao.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.MAIN)).isTrue();\n\n    // source inclusions do not apply to tests\n    inputFile = new DefaultInputFile(\"src/main/java/com/mycompany/Foo.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.TEST)).isFalse();\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_include_test_folders_by_default() throws IOException {\n    Settings settings = new Settings();\n    ExclusionFilters filter = new ExclusionFilters(new FileExclusions(settings));\n    when(fs.testDirs()).thenReturn(Arrays.asList(new File(basedir, \"src/test/java\")));\n\n    filter.prepare(fs);\n\n    java.io.File file = temp.newFile();\n\n    // test inclusions do not apply to main code\n    assertThat(filter.accept(file, \"src/test/java/com/mycompany/Foo.java\", InputFile.Type.MAIN)).isFalse();\n\n    assertThat(filter.accept(file, \"src/test2/java/com/mycompany/FooTest.java\", InputFile.Type.TEST)).isFalse();\n\n    assertThat(filter.accept(file, \"src/test/java/com/mycompany/Foo.java\", InputFile.Type.TEST)).isTrue();\n  }","id":96068,"modified_method":"@Test\n  public void should_include_test_folders_by_default() throws IOException {\n    Settings settings = new Settings();\n    ExclusionFilters filter = new ExclusionFilters(new FileExclusions(settings));\n    when(fs.testDirs()).thenReturn(Arrays.asList(new File(basedir, \"src/test/java\")));\n\n    filter.prepare(fs);\n\n    java.io.File file = temp.newFile();\n\n    // test inclusions do not apply to main code\n    DefaultInputFile inputFile = new DefaultInputFile(\"src/test/java/com/mycompany/Foo.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.MAIN)).isFalse();\n\n    inputFile = new DefaultInputFile(\"src/test2/java/com/mycompany/FooTest.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.TEST)).isFalse();\n\n    inputFile = new DefaultInputFile(\"src/test/java/com/mycompany/Foo.java\").setFile(file);\n    assertThat(filter.accept(inputFile, InputFile.Type.TEST)).isTrue();\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_match_source_exclusion_by_absolute_path() throws IOException {\n    java.io.File includedFile = temp.newFile(\"Foo.java\");\n    java.io.File excludedFile = temp.newFile(\"Bar.java\");\n\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.PROJECT_INCLUSIONS_PROPERTY, \"src/main/java/**/*\");\n    settings.setProperty(CoreProperties.PROJECT_EXCLUSIONS_PROPERTY, \"file:\" + excludedFile.getCanonicalPath());\n    ExclusionFilters filter = new ExclusionFilters(new FileExclusions(settings));\n\n    filter.prepare(fs);\n\n    assertThat(filter.accept(includedFile, \"src/main/java/org/bar/Foo.java\", InputFile.Type.MAIN)).isTrue();\n\n    assertThat(filter.accept(excludedFile, \"src/main/java/org/bar/Bar.java\", InputFile.Type.MAIN)).isFalse();\n  }","id":96069,"modified_method":"@Test\n  public void should_match_source_exclusion_by_absolute_path() throws IOException {\n    java.io.File includedFile = temp.newFile(\"Foo.java\");\n    java.io.File excludedFile = temp.newFile(\"Bar.java\");\n\n    Settings settings = new Settings();\n    settings.setProperty(CoreProperties.PROJECT_INCLUSIONS_PROPERTY, \"src/main/java/**/*\");\n    settings.setProperty(CoreProperties.PROJECT_EXCLUSIONS_PROPERTY, \"file:\" + excludedFile.getCanonicalPath());\n    ExclusionFilters filter = new ExclusionFilters(new FileExclusions(settings));\n\n    filter.prepare(fs);\n\n    DefaultInputFile inputFile = new DefaultInputFile(\"src/main/java/org/bar/Foo.java\").setFile(includedFile);\n    assertThat(filter.accept(inputFile, InputFile.Type.MAIN)).isTrue();\n\n    inputFile = new DefaultInputFile(\"src/main/java/org/bar/Bar.java\").setFile(excludedFile);\n    assertThat(filter.accept(inputFile, InputFile.Type.MAIN)).isFalse();\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void indexDirectory(InputFileBuilder inputFileBuilder, DefaultModuleFileSystem fileSystem, Progress status, File dirToIndex) {\n    Collection<File> files = FileUtils.listFiles(dirToIndex, FILE_FILTER, DIR_FILTER);\n    for (File sourceFile : files) {\n      String path = pathResolver.relativePath(fileSystem.baseDir(), sourceFile);\n      if (path == null) {\n        LoggerFactory.getLogger(getClass()).warn(String.format(\n          FILE_IS_NOT_DECLARED_IN_MODULE_BASEDIR, sourceFile.getAbsoluteFile(), fileSystem.baseDir()\n          ));\n      } else {\n        if (exclusionFilters.accept(sourceFile, path, InputFile.Type.MAIN)) {\n          indexFile(inputFileBuilder, fileSystem, status, sourceFile, path, InputFile.Type.MAIN);\n        }\n        if (exclusionFilters.accept(sourceFile, path, InputFile.Type.TEST)) {\n          indexFile(inputFileBuilder, fileSystem, status, sourceFile, path, InputFile.Type.TEST);\n        }\n      }\n    }\n  }","id":96070,"modified_method":"private void indexDirectory(InputFileBuilder inputFileBuilder, DefaultModuleFileSystem fileSystem, Progress status, File dirToIndex) {\n    Collection<File> files = FileUtils.listFiles(dirToIndex, FILE_FILTER, DIR_FILTER);\n    for (File sourceFile : files) {\n      DefaultInputFile inputFile = inputFileBuilder.create(sourceFile);\n      if (inputFile != null) {\n        if (exclusionFilters.accept(inputFile, InputFile.Type.MAIN)) {\n          indexFile(inputFileBuilder, fileSystem, status, inputFile, InputFile.Type.MAIN);\n        }\n        if (exclusionFilters.accept(inputFile, InputFile.Type.TEST)) {\n          indexFile(inputFileBuilder, fileSystem, status, inputFile, InputFile.Type.TEST);\n        }\n      }\n    }\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void indexFiles(InputFileBuilder inputFileBuilder, DefaultModuleFileSystem fileSystem, Progress progress, List<File> sourceFiles, InputFile.Type type) {\n    for (File sourceFile : sourceFiles) {\n      String path = pathResolver.relativePath(fileSystem.baseDir(), sourceFile);\n      if (path == null) {\n        LoggerFactory.getLogger(getClass()).warn(String.format(\n          FILE_IS_NOT_DECLARED_IN_MODULE_BASEDIR, sourceFile.getAbsoluteFile(), fileSystem.baseDir()\n          ));\n      } else {\n        if (exclusionFilters.accept(sourceFile, path, type)) {\n          indexFile(inputFileBuilder, fileSystem, progress, sourceFile, path, type);\n        }\n      }\n    }\n  }","id":96071,"modified_method":"private void indexFiles(InputFileBuilder inputFileBuilder, DefaultModuleFileSystem fileSystem, Progress progress, List<File> sourceFiles, InputFile.Type type) {\n    for (File sourceFile : sourceFiles) {\n      DefaultInputFile inputFile = inputFileBuilder.create(sourceFile);\n      if (inputFile != null && exclusionFilters.accept(inputFile, type)) {\n        indexFile(inputFileBuilder, fileSystem, progress, inputFile, type);\n      }\n    }\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private void indexFile(InputFileBuilder inputFileBuilder, DefaultModuleFileSystem fs, Progress status, File file, String path, InputFile.Type type) {\n    InputFile inputFile = inputFileBuilder.create(file, type);\n    if (inputFile != null && accept(inputFile)) {\n      fs.add(inputFile);\n      status.markAsIndexed(inputFile);\n    }\n  }","id":96072,"modified_method":"private void indexFile(InputFileBuilder inputFileBuilder, DefaultModuleFileSystem fs,\n                         Progress status, DefaultInputFile inputFile, InputFile.Type type) {\n    inputFile = inputFileBuilder.complete(inputFile, type);\n    if (inputFile != null && accept(inputFile)) {\n      fs.add(inputFile);\n      status.markAsIndexed(inputFile);\n    }\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@CheckForNull\n  DefaultInputFile create(File file, InputFile.Type type) {\n    String relativePath = pathResolver.relativePath(fs.baseDir(), file);\n    if (relativePath == null) {\n      LoggerFactory.getLogger(getClass()).warn(\n        \"File '%s' is ignored. It is not in module basedir '%s'.\", file.getAbsolutePath(), fs.baseDir());\n      return null;\n    }\n    DefaultInputFile inputFile = new DefaultInputFile(relativePath);\n    inputFile.setType(type);\n    inputFile.setKey(new StringBuilder().append(moduleKey).append(\":\").append(inputFile.relativePath()).toString());\n    inputFile.setBasedir(fs.baseDir());\n    inputFile.setAbsolutePath(file.getAbsolutePath());\n    inputFile.setFile(file);\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(inputFile.file(), fs.encoding());\n    inputFile.setLines(metadata.lines);\n    inputFile.setHash(metadata.hash);\n    inputFile.setStatus(statusDetection.status(inputFile.relativePath(), metadata.hash));\n    if (analysisMode.isIncremental() && inputFile.status() == InputFile.Status.SAME) {\n      return null;\n    }\n    String lang = langDetection.language(inputFile);\n    if (lang == null) {\n      return null;\n    }\n    inputFile.setLanguage(lang);\n    fillDeprecatedData(inputFile);\n    return inputFile;\n  }","id":96073,"modified_method":"/**\n   * Optimization to not set all InputFile data if the file is excluded from analysis.\n   */\n  @CheckForNull\n  DefaultInputFile complete(DefaultInputFile inputFile, InputFile.Type type) {\n    inputFile.setType(type);\n    inputFile.setKey(new StringBuilder().append(moduleKey).append(\":\").append(inputFile.relativePath()).toString());\n    inputFile.setBasedir(fs.baseDir());\n    FileMetadata.Metadata metadata = FileMetadata.INSTANCE.read(inputFile.file(), fs.encoding());\n    inputFile.setLines(metadata.lines);\n    inputFile.setHash(metadata.hash);\n    inputFile.setStatus(statusDetection.status(inputFile.relativePath(), metadata.hash));\n    if (analysisMode.isIncremental() && inputFile.status() == InputFile.Status.SAME) {\n      return null;\n    }\n    String lang = langDetection.language(inputFile);\n    if (lang == null) {\n      return null;\n    }\n    inputFile.setLanguage(lang);\n    fillDeprecatedData(inputFile);\n    return inputFile;\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_null_if_language_not_detected() throws Exception {\n    // file system\n    File basedir = temp.newFolder();\n    File srcFile = new File(basedir, \"src/main/java/foo/Bar.java\");\n    FileUtils.touch(srcFile);\n    FileUtils.write(srcFile, \"single line\");\n    when(fs.baseDir()).thenReturn(basedir);\n    when(fs.encoding()).thenReturn(Charsets.UTF_8);\n\n    // lang\n    when(langDetection.language(any(InputFile.class))).thenReturn(null);\n\n    InputFileBuilder builder = new InputFileBuilder(\"struts\", new PathResolver(),\n      langDetection, statusDetection, fs, analysisMode);\n    DefaultInputFile inputFile = builder.create(srcFile, InputFile.Type.MAIN);\n\n    assertThat(inputFile).isNull();\n  }","id":96074,"modified_method":"@Test\n  public void return_null_if_language_not_detected() throws Exception {\n    // file system\n    File basedir = temp.newFolder();\n    File srcFile = new File(basedir, \"src/main/java/foo/Bar.java\");\n    FileUtils.touch(srcFile);\n    FileUtils.write(srcFile, \"single line\");\n    when(fs.baseDir()).thenReturn(basedir);\n    when(fs.encoding()).thenReturn(Charsets.UTF_8);\n\n    // lang\n    when(langDetection.language(any(InputFile.class))).thenReturn(null);\n\n    InputFileBuilder builder = new InputFileBuilder(\"struts\", new PathResolver(),\n      langDetection, statusDetection, fs, analysisMode);\n    DefaultInputFile inputFile = builder.create(srcFile);\n    inputFile = builder.complete(inputFile, InputFile.Type.MAIN);\n\n    assertThat(inputFile).isNull();\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void fill_deprecated_data_of_non_java_file() throws Exception {\n    // file system\n    File basedir = temp.newFolder();\n    File srcFile = new File(basedir, \"src/foo/Bar.php\");\n    FileUtils.touch(srcFile);\n    FileUtils.write(srcFile, \"single line\");\n    when(fs.baseDir()).thenReturn(basedir);\n    when(fs.encoding()).thenReturn(Charsets.UTF_8);\n    File sourceDir = new File(basedir, \"src\");\n    when(fs.sourceDirs()).thenReturn(Arrays.asList(sourceDir));\n\n    // lang\n    when(langDetection.language(any(InputFile.class))).thenReturn(\"php\");\n\n    // status\n    when(statusDetection.status(\"src/Bar.php\", \"6c1d64c0b3555892fe7273e954f6fb5a\"))\n      .thenReturn(InputFile.Status.ADDED);\n\n    InputFileBuilder builder = new InputFileBuilder(\"struts\", new PathResolver(),\n      langDetection, statusDetection, fs, analysisMode);\n    DefaultInputFile inputFile = builder.create(srcFile, InputFile.Type.MAIN);\n\n    assertThat(inputFile.pathRelativeToSourceDir()).isEqualTo(\"foo/Bar.php\");\n    assertThat(inputFile.sourceDirAbsolutePath()).isEqualTo(PathUtils.sanitize(sourceDir.getAbsolutePath()));\n    assertThat(inputFile.deprecatedKey()).isEqualTo(\"struts:foo/Bar.php\");\n\n  }","id":96075,"modified_method":"@Test\n  public void fill_deprecated_data_of_non_java_file() throws Exception {\n    // file system\n    File basedir = temp.newFolder();\n    File srcFile = new File(basedir, \"src/foo/Bar.php\");\n    FileUtils.touch(srcFile);\n    FileUtils.write(srcFile, \"single line\");\n    when(fs.baseDir()).thenReturn(basedir);\n    when(fs.encoding()).thenReturn(Charsets.UTF_8);\n    File sourceDir = new File(basedir, \"src\");\n    when(fs.sourceDirs()).thenReturn(Arrays.asList(sourceDir));\n\n    // lang\n    when(langDetection.language(any(InputFile.class))).thenReturn(\"php\");\n\n    // status\n    when(statusDetection.status(\"src/Bar.php\", \"6c1d64c0b3555892fe7273e954f6fb5a\"))\n      .thenReturn(InputFile.Status.ADDED);\n\n    InputFileBuilder builder = new InputFileBuilder(\"struts\", new PathResolver(),\n      langDetection, statusDetection, fs, analysisMode);\n    DefaultInputFile inputFile = builder.create(srcFile);\n    inputFile = builder.complete(inputFile, InputFile.Type.MAIN);\n\n    assertThat(inputFile.pathRelativeToSourceDir()).isEqualTo(\"foo/Bar.php\");\n    assertThat(inputFile.sourceDirAbsolutePath()).isEqualTo(PathUtils.sanitize(sourceDir.getAbsolutePath()));\n    assertThat(inputFile.deprecatedKey()).isEqualTo(\"struts:foo/Bar.php\");\n\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void create_input_file() throws Exception {\n    // file system\n    File basedir = temp.newFolder();\n    File srcFile = new File(basedir, \"src/main/java/foo/Bar.java\");\n    FileUtils.touch(srcFile);\n    FileUtils.write(srcFile, \"single line\");\n    when(fs.baseDir()).thenReturn(basedir);\n    when(fs.encoding()).thenReturn(Charsets.UTF_8);\n\n    // lang\n    when(langDetection.language(any(InputFile.class))).thenReturn(\"java\");\n\n    // status\n    when(statusDetection.status(\"src/main/java/foo/Bar.java\", \"6c1d64c0b3555892fe7273e954f6fb5a\"))\n      .thenReturn(InputFile.Status.ADDED);\n\n    InputFileBuilder builder = new InputFileBuilder(\"struts\", new PathResolver(),\n      langDetection, statusDetection, fs, analysisMode);\n    DefaultInputFile inputFile = builder.create(srcFile, InputFile.Type.MAIN);\n\n    assertThat(inputFile.file()).isEqualTo(srcFile.getAbsoluteFile());\n    assertThat(inputFile.absolutePath()).isEqualTo(PathUtils.sanitize(srcFile.getAbsolutePath()));\n    assertThat(inputFile.language()).isEqualTo(\"java\");\n    assertThat(inputFile.key()).isEqualTo(\"struts:src/main/java/foo/Bar.java\");\n    assertThat(inputFile.relativePath()).isEqualTo(\"src/main/java/foo/Bar.java\");\n    assertThat(inputFile.lines()).isEqualTo(1);\n    assertThat(inputFile.sourceDirAbsolutePath()).isNull();\n    assertThat(inputFile.pathRelativeToSourceDir()).isNull();\n    assertThat(inputFile.deprecatedKey()).isNull();\n  }","id":96076,"modified_method":"@Test\n  public void complete_input_file() throws Exception {\n    // file system\n    File basedir = temp.newFolder();\n    File srcFile = new File(basedir, \"src/main/java/foo/Bar.java\");\n    FileUtils.touch(srcFile);\n    FileUtils.write(srcFile, \"single line\");\n    when(fs.baseDir()).thenReturn(basedir);\n    when(fs.encoding()).thenReturn(Charsets.UTF_8);\n\n    // lang\n    when(langDetection.language(any(InputFile.class))).thenReturn(\"java\");\n\n    // status\n    when(statusDetection.status(\"src/main/java/foo/Bar.java\", \"6c1d64c0b3555892fe7273e954f6fb5a\"))\n      .thenReturn(InputFile.Status.ADDED);\n\n    InputFileBuilder builder = new InputFileBuilder(\"struts\", new PathResolver(),\n      langDetection, statusDetection, fs, analysisMode);\n    DefaultInputFile inputFile = builder.create(srcFile);\n    inputFile = builder.complete(inputFile, InputFile.Type.MAIN);\n\n    assertThat(inputFile.type()).isEqualTo(InputFile.Type.MAIN);\n    assertThat(inputFile.file()).isEqualTo(srcFile.getAbsoluteFile());\n    assertThat(inputFile.absolutePath()).isEqualTo(PathUtils.sanitize(srcFile.getAbsolutePath()));\n    assertThat(inputFile.language()).isEqualTo(\"java\");\n    assertThat(inputFile.key()).isEqualTo(\"struts:src/main/java/foo/Bar.java\");\n    assertThat(inputFile.relativePath()).isEqualTo(\"src/main/java/foo/Bar.java\");\n    assertThat(inputFile.lines()).isEqualTo(1);\n    assertThat(inputFile.sourceDirAbsolutePath()).isNull();\n    assertThat(inputFile.pathRelativeToSourceDir()).isNull();\n    assertThat(inputFile.deprecatedKey()).isNull();\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void return_null_if_file_outside_basedir() throws Exception {\n    // file system\n    File basedir = temp.newFolder();\n    File otherDir = temp.newFolder();\n    File srcFile = new File(otherDir, \"src/main/java/foo/Bar.java\");\n    FileUtils.touch(srcFile);\n    when(fs.baseDir()).thenReturn(basedir);\n\n    InputFileBuilder builder = new InputFileBuilder(\"struts\", new PathResolver(),\n      langDetection, statusDetection, fs, analysisMode);\n    DefaultInputFile inputFile = builder.create(srcFile, InputFile.Type.MAIN);\n\n    assertThat(inputFile).isNull();\n  }","id":96077,"modified_method":"@Test\n  public void return_null_if_file_outside_basedir() throws Exception {\n    // file system\n    File basedir = temp.newFolder();\n    File otherDir = temp.newFolder();\n    File srcFile = new File(otherDir, \"src/main/java/foo/Bar.java\");\n    FileUtils.touch(srcFile);\n    when(fs.baseDir()).thenReturn(basedir);\n\n    InputFileBuilder builder = new InputFileBuilder(\"struts\", new PathResolver(),\n      langDetection, statusDetection, fs, analysisMode);\n    DefaultInputFile inputFile = builder.create(srcFile);\n\n    assertThat(inputFile).isNull();\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void fill_deprecated_data_of_java_file() throws Exception {\n    // file system\n    File basedir = temp.newFolder();\n    File srcFile = new File(basedir, \"src/main/java/foo/Bar.java\");\n    FileUtils.touch(srcFile);\n    FileUtils.write(srcFile, \"single line\");\n    when(fs.baseDir()).thenReturn(basedir);\n    when(fs.encoding()).thenReturn(Charsets.UTF_8);\n    File sourceDir = new File(basedir, \"src/main/java\");\n    when(fs.sourceDirs()).thenReturn(Arrays.asList(sourceDir));\n\n    // lang\n    when(langDetection.language(any(InputFile.class))).thenReturn(\"java\");\n\n    // status\n    when(statusDetection.status(\"src/main/java/foo/Bar.java\", \"6c1d64c0b3555892fe7273e954f6fb5a\"))\n      .thenReturn(InputFile.Status.ADDED);\n\n    InputFileBuilder builder = new InputFileBuilder(\"struts\", new PathResolver(),\n      langDetection, statusDetection, fs, analysisMode);\n    DefaultInputFile inputFile = builder.create(srcFile, InputFile.Type.MAIN);\n\n    assertThat(inputFile.pathRelativeToSourceDir()).isEqualTo(\"foo/Bar.java\");\n    assertThat(inputFile.sourceDirAbsolutePath()).isEqualTo(PathUtils.sanitize(sourceDir.getAbsolutePath()));\n    assertThat(inputFile.deprecatedKey()).isEqualTo(\"struts:foo.Bar\");\n  }","id":96078,"modified_method":"@Test\n  public void fill_deprecated_data_of_java_file() throws Exception {\n    // file system\n    File basedir = temp.newFolder();\n    File srcFile = new File(basedir, \"src/main/java/foo/Bar.java\");\n    FileUtils.touch(srcFile);\n    FileUtils.write(srcFile, \"single line\");\n    when(fs.baseDir()).thenReturn(basedir);\n    when(fs.encoding()).thenReturn(Charsets.UTF_8);\n    File sourceDir = new File(basedir, \"src/main/java\");\n    when(fs.sourceDirs()).thenReturn(Arrays.asList(sourceDir));\n\n    // lang\n    when(langDetection.language(any(InputFile.class))).thenReturn(\"java\");\n\n    // status\n    when(statusDetection.status(\"src/main/java/foo/Bar.java\", \"6c1d64c0b3555892fe7273e954f6fb5a\"))\n      .thenReturn(InputFile.Status.ADDED);\n\n    InputFileBuilder builder = new InputFileBuilder(\"struts\", new PathResolver(),\n      langDetection, statusDetection, fs, analysisMode);\n    DefaultInputFile inputFile = builder.create(srcFile);\n    inputFile = builder.complete(inputFile, InputFile.Type.MAIN);\n\n    assertThat(inputFile.pathRelativeToSourceDir()).isEqualTo(\"foo/Bar.java\");\n    assertThat(inputFile.sourceDirAbsolutePath()).isEqualTo(PathUtils.sanitize(sourceDir.getAbsolutePath()));\n    assertThat(inputFile.deprecatedKey()).isEqualTo(\"struts:foo.Bar\");\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Test\n  public void should_add_input_file() throws Exception {\n    InputFileCache cache = new InputFileCache(caches);\n    cache.put(\"struts\", new DefaultInputFile(\"src/main/java/Foo.java\").setFile(temp.newFile(\"Foo.java\")));\n    cache.put(\"struts-core\", new DefaultInputFile(\"src/main/java/Bar.java\").setFile(temp.newFile(\"Bar.java\")));\n\n    assertThat(cache.byModule(\"struts\")).hasSize(1);\n    assertThat(cache.byModule(\"struts-core\")).hasSize(1);\n    assertThat(cache.all()).hasSize(2);\n    for (InputFile inputFile : cache.all()) {\n      assertThat(inputFile.relativePath()).startsWith(\"src/main/java/\");\n    }\n    cache.removeModule(\"struts\");\n    assertThat(cache.byModule(\"struts\")).hasSize(0);\n    assertThat(cache.byModule(\"struts-core\")).hasSize(1);\n    assertThat(cache.all()).hasSize(1);\n  }","id":96079,"modified_method":"@Test\n  public void should_add_input_file() throws Exception {\n    InputFileCache cache = new InputFileCache(caches);\n    DefaultInputFile fooFile = new DefaultInputFile(\"src/main/java/Foo.java\").setFile(temp.newFile(\"Foo.java\"));\n    cache.put(\"struts\", fooFile);\n    cache.put(\"struts-core\", new DefaultInputFile(\"src/main/java/Bar.java\").setFile(temp.newFile(\"Bar.java\")));\n\n    // index by relative path is automatically fed\n    assertThat(cache.get(\"struts\", RelativePathIndex.ID, \"src/main/java/Foo.java\").relativePath())\n      .isEqualTo(\"src/main/java/Foo.java\");\n\n    assertThat(cache.byModule(\"struts\")).hasSize(1);\n    assertThat(cache.byModule(\"struts-core\")).hasSize(1);\n    assertThat(cache.all()).hasSize(2);\n    for (InputFile inputFile : cache.all()) {\n      assertThat(inputFile.relativePath()).startsWith(\"src/main/java/\");\n    }\n\n    cache.remove(\"struts\", fooFile);\n    assertThat(cache.all()).hasSize(1);\n\n    cache.removeModule(\"struts\");\n    assertThat(cache.byModule(\"struts\")).hasSize(0);\n    assertThat(cache.byModule(\"struts-core\")).hasSize(1);\n    assertThat(cache.all()).hasSize(1);\n  }","commit_id":"e4810500228a85c72bf4937874de3f37dba39d48","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private static int addImportForClass(PsiFile file, int startOffset, int endOffset, PsiClass aClass) throws IncorrectOperationException {\n    SmartPsiElementPointer pointer = SmartPointerManager.getInstance(file.getProject()).createSmartPsiElementPointer(aClass);\n    LOG.assertTrue(CommandProcessor.getInstance().getCurrentCommand() != null);\n    LOG.assertTrue(ApplicationManager.getApplication().isUnitTestMode() || ApplicationManager.getApplication().getCurrentWriteAction(null) != null);\n\n    final PsiManager manager = file.getManager();\n    final PsiResolveHelper helper = manager.getResolveHelper();\n\n    final Document document = FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile());\n\n    CharSequence chars = document.getCharsSequence();\n    int length = document.getTextLength();\n    int newStartOffset = startOffset;\n\n    PsiElement element = file.findElementAt(startOffset);\n    String refText = chars.subSequence(startOffset, endOffset).toString();\n    PsiClass refClass = helper.resolveReferencedClass(refText, element);\n    if (refClass != null && (refClass.getQualifiedName() == null/* local classes and parameters*/\n                             || manager.areElementsEquivalent(aClass, refClass))) return newStartOffset;\n    boolean insertSpace = endOffset < length && Character.isJavaIdentifierPart(chars.charAt(endOffset));\n\n    if (insertSpace){\n      document.insertString(endOffset, \" \");\n    }\n    String name = aClass.getName();\n    document.replaceString(startOffset, endOffset, name);\n    endOffset = startOffset + name.length();\n\n    PsiDocumentManager.getInstance(manager.getProject()).commitAllDocuments();\n\n    element = file.findElementAt(startOffset);\n    if (element instanceof PsiIdentifier){\n      PsiElement parent = element.getParent();\n      if (parent instanceof PsiJavaCodeReferenceElement && !((PsiJavaCodeReferenceElement)parent).isQualified()){\n        PsiJavaCodeReferenceElement ref = (PsiJavaCodeReferenceElement)parent;\n        final PsiElement pointerElement = pointer.getElement();\n        if(pointerElement instanceof PsiClass){\n          if (!(ref instanceof PsiImportStaticReferenceElement)) {\n            PsiJavaCodeReferenceElement newRef = (PsiJavaCodeReferenceElement)ref.bindToElement(pointerElement);\n            newRef = CodeInsightUtil.forcePsiPostprocessAndRestoreElement(newRef);\n            final TextRange textRange = newRef.getTextRange();\n            endOffset = textRange.getEndOffset();\n            newStartOffset = textRange.getStartOffset();\n          }\n          else {\n            PsiImportStaticStatement statement = ((PsiImportStaticReferenceElement)ref).bindToTargetClass((PsiClass) pointerElement);\n            statement = CodeInsightUtil.forcePsiPostprocessAndRestoreElement(statement);\n            final TextRange textRange = statement.getTextRange();\n            endOffset = textRange.getEndOffset();\n            newStartOffset = textRange.getStartOffset();\n          }\n        }\n      }\n    }\n\n    if (insertSpace){\n      document.deleteString(endOffset, endOffset + 1);\n    }\n\n    return newStartOffset;\n  }","id":96080,"modified_method":"private static int addImportForClass(PsiFile file, int startOffset, int endOffset, PsiClass aClass) throws IncorrectOperationException {\n    SmartPsiElementPointer pointer = SmartPointerManager.getInstance(file.getProject()).createSmartPsiElementPointer(aClass);\n    LOG.assertTrue(CommandProcessor.getInstance().getCurrentCommand() != null);\n    LOG.assertTrue(ApplicationManager.getApplication().isUnitTestMode() || ApplicationManager.getApplication().getCurrentWriteAction(null) != null);\n\n    final PsiManager manager = file.getManager();\n    final PsiResolveHelper helper = manager.getResolveHelper();\n\n    final Document document = FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile());\n\n    CharSequence chars = document.getCharsSequence();\n    int length = document.getTextLength();\n    int newStartOffset = startOffset;\n\n    final PsiReference reference = file.findReferenceAt(startOffset);\n    if (reference != null) {\n      final PsiElement resolved = reference.resolve();\n      if (resolved instanceof PsiClass) {\n        if ((((PsiClass)resolved).getQualifiedName() == null/* local classes and parameters*/\n                                 || manager.areElementsEquivalent(aClass, resolved))) return newStartOffset;\n\n      }\n    }\n\n    boolean insertSpace = endOffset < length && Character.isJavaIdentifierPart(chars.charAt(endOffset));\n\n    if (insertSpace){\n      document.insertString(endOffset, \" \");\n    }\n    String name = aClass.getName();\n    document.replaceString(startOffset, endOffset, name);\n    endOffset = startOffset + name.length();\n\n    PsiDocumentManager.getInstance(manager.getProject()).commitAllDocuments();\n\n    PsiElement element = file.findElementAt(startOffset);\n    if (element instanceof PsiIdentifier){\n      PsiElement parent = element.getParent();\n      if (parent instanceof PsiJavaCodeReferenceElement && !((PsiJavaCodeReferenceElement)parent).isQualified()){\n        PsiJavaCodeReferenceElement ref = (PsiJavaCodeReferenceElement)parent;\n        final PsiElement pointerElement = pointer.getElement();\n        if(pointerElement instanceof PsiClass){\n          if (!(ref instanceof PsiImportStaticReferenceElement)) {\n            PsiJavaCodeReferenceElement newRef = (PsiJavaCodeReferenceElement)ref.bindToElement(pointerElement);\n            newRef = CodeInsightUtil.forcePsiPostprocessAndRestoreElement(newRef);\n            final TextRange textRange = newRef.getTextRange();\n            endOffset = textRange.getEndOffset();\n            newStartOffset = textRange.getStartOffset();\n          }\n          else {\n            PsiImportStaticStatement statement = ((PsiImportStaticReferenceElement)ref).bindToTargetClass((PsiClass) pointerElement);\n            statement = CodeInsightUtil.forcePsiPostprocessAndRestoreElement(statement);\n            final TextRange textRange = statement.getTextRange();\n            endOffset = textRange.getEndOffset();\n            newStartOffset = textRange.getStartOffset();\n          }\n        }\n      }\n    }\n\n    if (insertSpace){\n      document.deleteString(endOffset, endOffset + 1);\n    }\n\n    return newStartOffset;\n  }","commit_id":"7c4d9ea8736b90ea6bdb76bbb4c79e1738a5cd2f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static int addImportForItem(PsiFile file, int startOffset, LookupItem item) throws IncorrectOperationException {\n    PsiDocumentManager.getInstance(file.getProject()).commitAllDocuments();\n\n    Object o = item.getObject();\n    if (o instanceof PsiClass){\n      PsiClass aClass = (PsiClass)o;\n      int length = aClass.getName().length();\n      final int newOffset = addImportForClass(file, startOffset, startOffset + length, aClass);\n      shortenReference(file, newOffset);\n      return newOffset;\n    }\n    else if (o instanceof PsiType){\n      PsiType type = ((PsiType)o).getDeepComponentType();\n      if (type instanceof PsiClassType) {\n        PsiClass refClass = ((PsiClassType) type).resolve();\n        if (refClass != null){\n          int length = refClass.getName().length();\n          return addImportForClass(file, startOffset, startOffset + length, refClass);\n        }\n      }\n    }\n    else if (o instanceof PsiMethod){\n      PsiMethod method = (PsiMethod)o;\n      if (method.isConstructor()){\n        PsiClass aClass = (PsiClass)item.getAttribute(LookupItem.CONTAINING_CLASS_ATTR);\n        if (aClass == null){\n          aClass = method.getContainingClass();\n        }\n        if (aClass != null){\n          int length = method.getName().length();\n          return addImportForClass(file, startOffset, startOffset + length, aClass);\n        }\n      }\n    }\n\n    return startOffset;\n  }","id":96081,"modified_method":"private static int addImportForItem(PsiFile file, int startOffset, LookupItem item) throws IncorrectOperationException {\n    PsiDocumentManager.getInstance(file.getProject()).commitAllDocuments();\n\n    Object o = item.getObject();\n    if (o instanceof PsiClass){\n      PsiClass aClass = (PsiClass)o;\n      int length = item.getLookupString().length();\n      final int newOffset = addImportForClass(file, startOffset, startOffset + length, aClass);\n      shortenReference(file, newOffset);\n      return newOffset;\n    }\n    else if (o instanceof PsiType){\n      PsiType type = ((PsiType)o).getDeepComponentType();\n      if (type instanceof PsiClassType) {\n        PsiClass refClass = ((PsiClassType) type).resolve();\n        if (refClass != null){\n          int length = refClass.getName().length();\n          return addImportForClass(file, startOffset, startOffset + length, refClass);\n        }\n      }\n    }\n    else if (o instanceof PsiMethod){\n      PsiMethod method = (PsiMethod)o;\n      if (method.isConstructor()){\n        PsiClass aClass = (PsiClass)item.getAttribute(LookupItem.CONTAINING_CLASS_ATTR);\n        if (aClass == null){\n          aClass = method.getContainingClass();\n        }\n        if (aClass != null){\n          int length = method.getName().length();\n          return addImportForClass(file, startOffset, startOffset + length, aClass);\n        }\n      }\n    }\n\n    return startOffset;\n  }","commit_id":"7c4d9ea8736b90ea6bdb76bbb4c79e1738a5cd2f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static int addImportForClass(PsiFile file, int startOffset, int endOffset, PsiClass aClass) throws IncorrectOperationException {\n    SmartPsiElementPointer pointer = SmartPointerManager.getInstance(file.getProject()).createSmartPsiElementPointer(aClass);\n    LOG.assertTrue(CommandProcessor.getInstance().getCurrentCommand() != null);\n    LOG.assertTrue(ApplicationManager.getApplication().isUnitTestMode() || ApplicationManager.getApplication().getCurrentWriteAction(null) != null);\n\n    final PsiManager manager = file.getManager();\n    final PsiResolveHelper helper = manager.getResolveHelper();\n\n    final Document document = FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile());\n\n    CharSequence chars = document.getCharsSequence();\n    int length = document.getTextLength();\n    int newStartOffset = startOffset;\n\n    PsiElement element = file.findElementAt(startOffset);\n    String refText = chars.subSequence(startOffset, endOffset).toString();\n    PsiClass refClass = helper.resolveReferencedClass(refText, element);\n    if (refClass != null && (refClass.getQualifiedName() == null/* local classes and parameters*/\n                             || manager.areElementsEquivalent(aClass, refClass))) return newStartOffset;\n    boolean insertSpace = endOffset < length && Character.isJavaIdentifierPart(chars.charAt(endOffset));\n\n    if (insertSpace){\n      document.insertString(endOffset, \" \");\n    }\n    String name = aClass.getName();\n    document.replaceString(startOffset, endOffset, name);\n    endOffset = startOffset + name.length();\n\n    PsiDocumentManager.getInstance(manager.getProject()).commitAllDocuments();\n\n    element = file.findElementAt(startOffset);\n    if (element instanceof PsiIdentifier){\n      PsiElement parent = element.getParent();\n      if (parent instanceof PsiJavaCodeReferenceElement && !((PsiJavaCodeReferenceElement)parent).isQualified()){\n        PsiJavaCodeReferenceElement ref = (PsiJavaCodeReferenceElement)parent;\n        final PsiElement pointerElement = pointer.getElement();\n        if(pointerElement instanceof PsiClass){\n          if (!(ref instanceof PsiImportStaticReferenceElement)) {\n            PsiJavaCodeReferenceElement newRef = (PsiJavaCodeReferenceElement)ref.bindToElement(pointerElement);\n            newRef = CodeInsightUtil.forcePsiPostprocessAndRestoreElement(newRef);\n            final TextRange textRange = newRef.getTextRange();\n            endOffset = textRange.getEndOffset();\n            newStartOffset = textRange.getStartOffset();\n          }\n          else {\n            PsiImportStaticStatement statement = ((PsiImportStaticReferenceElement)ref).bindToTargetClass((PsiClass) pointerElement);\n            statement = CodeInsightUtil.forcePsiPostprocessAndRestoreElement(statement);\n            final TextRange textRange = statement.getTextRange();\n            endOffset = textRange.getEndOffset();\n            newStartOffset = textRange.getStartOffset();\n          }\n        }\n      }\n    }\n\n    if (insertSpace){\n      document.deleteString(endOffset, endOffset + 1);\n    }\n\n    return newStartOffset;\n  }","id":96082,"modified_method":"private static int addImportForClass(PsiFile file, int startOffset, int endOffset, PsiClass aClass) throws IncorrectOperationException {\n    SmartPsiElementPointer pointer = SmartPointerManager.getInstance(file.getProject()).createSmartPsiElementPointer(aClass);\n    LOG.assertTrue(CommandProcessor.getInstance().getCurrentCommand() != null);\n    LOG.assertTrue(ApplicationManager.getApplication().isUnitTestMode() || ApplicationManager.getApplication().getCurrentWriteAction(null) != null);\n\n    final PsiManager manager = file.getManager();\n    final PsiResolveHelper helper = manager.getResolveHelper();\n\n    final Document document = FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile());\n\n    CharSequence chars = document.getCharsSequence();\n    int length = document.getTextLength();\n    int newStartOffset = startOffset;\n\n    final PsiReference reference = file.findReferenceAt(startOffset);\n    if (reference != null) {\n      final PsiElement resolved = reference.resolve();\n      if (resolved instanceof PsiClass) {\n        if ((((PsiClass)resolved).getQualifiedName() == null/* local classes and parameters*/\n                                 || manager.areElementsEquivalent(aClass, resolved))) return newStartOffset;\n\n      }\n    }\n\n    boolean insertSpace = endOffset < length && Character.isJavaIdentifierPart(chars.charAt(endOffset));\n\n    if (insertSpace){\n      document.insertString(endOffset, \" \");\n    }\n    String name = aClass.getName();\n    document.replaceString(startOffset, endOffset, name);\n    endOffset = startOffset + name.length();\n\n    PsiDocumentManager.getInstance(manager.getProject()).commitAllDocuments();\n\n    PsiElement element = file.findElementAt(startOffset);\n    if (element instanceof PsiIdentifier){\n      PsiElement parent = element.getParent();\n      if (parent instanceof PsiJavaCodeReferenceElement && !((PsiJavaCodeReferenceElement)parent).isQualified()){\n        PsiJavaCodeReferenceElement ref = (PsiJavaCodeReferenceElement)parent;\n        final PsiElement pointerElement = pointer.getElement();\n        if(pointerElement instanceof PsiClass){\n          if (!(ref instanceof PsiImportStaticReferenceElement)) {\n            PsiJavaCodeReferenceElement newRef = (PsiJavaCodeReferenceElement)ref.bindToElement(pointerElement);\n            newRef = CodeInsightUtil.forcePsiPostprocessAndRestoreElement(newRef);\n            final TextRange textRange = newRef.getTextRange();\n            endOffset = textRange.getEndOffset();\n            newStartOffset = textRange.getStartOffset();\n          }\n          else {\n            PsiImportStaticStatement statement = ((PsiImportStaticReferenceElement)ref).bindToTargetClass((PsiClass) pointerElement);\n            statement = CodeInsightUtil.forcePsiPostprocessAndRestoreElement(statement);\n            final TextRange textRange = statement.getTextRange();\n            endOffset = textRange.getEndOffset();\n            newStartOffset = textRange.getStartOffset();\n          }\n        }\n      }\n    }\n\n    if (insertSpace){\n      document.deleteString(endOffset, endOffset + 1);\n    }\n\n    return newStartOffset;\n  }","commit_id":"94a8cb4764e76108ac1f93404959a2b2fe021c2e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static int addImportForItem(PsiFile file, int startOffset, LookupItem item) throws IncorrectOperationException {\n    PsiDocumentManager.getInstance(file.getProject()).commitAllDocuments();\n\n    Object o = item.getObject();\n    if (o instanceof PsiClass){\n      PsiClass aClass = (PsiClass)o;\n      int length = aClass.getName().length();\n      final int newOffset = addImportForClass(file, startOffset, startOffset + length, aClass);\n      shortenReference(file, newOffset);\n      return newOffset;\n    }\n    else if (o instanceof PsiType){\n      PsiType type = ((PsiType)o).getDeepComponentType();\n      if (type instanceof PsiClassType) {\n        PsiClass refClass = ((PsiClassType) type).resolve();\n        if (refClass != null){\n          int length = refClass.getName().length();\n          return addImportForClass(file, startOffset, startOffset + length, refClass);\n        }\n      }\n    }\n    else if (o instanceof PsiMethod){\n      PsiMethod method = (PsiMethod)o;\n      if (method.isConstructor()){\n        PsiClass aClass = (PsiClass)item.getAttribute(LookupItem.CONTAINING_CLASS_ATTR);\n        if (aClass == null){\n          aClass = method.getContainingClass();\n        }\n        if (aClass != null){\n          int length = method.getName().length();\n          return addImportForClass(file, startOffset, startOffset + length, aClass);\n        }\n      }\n    }\n\n    return startOffset;\n  }","id":96083,"modified_method":"private static int addImportForItem(PsiFile file, int startOffset, LookupItem item) throws IncorrectOperationException {\n    PsiDocumentManager.getInstance(file.getProject()).commitAllDocuments();\n\n    Object o = item.getObject();\n    if (o instanceof PsiClass){\n      PsiClass aClass = (PsiClass)o;\n      int length = item.getLookupString().length();\n      final int newOffset = addImportForClass(file, startOffset, startOffset + length, aClass);\n      shortenReference(file, newOffset);\n      return newOffset;\n    }\n    else if (o instanceof PsiType){\n      PsiType type = ((PsiType)o).getDeepComponentType();\n      if (type instanceof PsiClassType) {\n        PsiClass refClass = ((PsiClassType) type).resolve();\n        if (refClass != null){\n          int length = refClass.getName().length();\n          return addImportForClass(file, startOffset, startOffset + length, refClass);\n        }\n      }\n    }\n    else if (o instanceof PsiMethod){\n      PsiMethod method = (PsiMethod)o;\n      if (method.isConstructor()){\n        PsiClass aClass = (PsiClass)item.getAttribute(LookupItem.CONTAINING_CLASS_ATTR);\n        if (aClass == null){\n          aClass = method.getContainingClass();\n        }\n        if (aClass != null){\n          int length = method.getName().length();\n          return addImportForClass(file, startOffset, startOffset + length, aClass);\n        }\n      }\n    }\n\n    return startOffset;\n  }","commit_id":"94a8cb4764e76108ac1f93404959a2b2fe021c2e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static int addImportForItem(PsiFile file, int startOffset, LookupItem item) throws IncorrectOperationException {\n    PsiDocumentManager.getInstance(file.getProject()).commitAllDocuments();\n\n    Object o = item.getObject();\n    if (o instanceof PsiClass){\n      PsiClass aClass = (PsiClass)o;\n      int length = item.getLookupString().length();\n      final int newOffset = addImportForClass(file, startOffset, startOffset + length, aClass);\n      shortenReference(file, newOffset);\n      return newOffset;\n    }\n    else if (o instanceof PsiType){\n      PsiType type = ((PsiType)o).getDeepComponentType();\n      if (type instanceof PsiClassType) {\n        PsiClass refClass = ((PsiClassType) type).resolve();\n        if (refClass != null){\n          int length = refClass.getName().length();\n          return addImportForClass(file, startOffset, startOffset + length, refClass);\n        }\n      }\n    }\n    else if (o instanceof PsiMethod){\n      PsiMethod method = (PsiMethod)o;\n      if (method.isConstructor()){\n        PsiClass aClass = (PsiClass)item.getAttribute(LookupItem.CONTAINING_CLASS_ATTR);\n        if (aClass == null){\n          aClass = method.getContainingClass();\n        }\n        if (aClass != null){\n          int length = method.getName().length();\n          return addImportForClass(file, startOffset, startOffset + length, aClass);\n        }\n      }\n    }\n\n    return startOffset;\n  }","id":96084,"modified_method":"private static int addImportForItem(PsiFile file, int startOffset, LookupItem item) throws IncorrectOperationException {\n    PsiDocumentManager.getInstance(file.getProject()).commitAllDocuments();\n\n    Object o = item.getObject();\n    if (o instanceof PsiClass){\n      PsiClass aClass = (PsiClass)o;\n      int length = aClass.getName().length();\n      final int newOffset = addImportForClass(file, startOffset, startOffset + length, aClass);\n      shortenReference(file, newOffset);\n      return newOffset;\n    }\n    else if (o instanceof PsiType){\n      PsiType type = ((PsiType)o).getDeepComponentType();\n      if (type instanceof PsiClassType) {\n        PsiClass refClass = ((PsiClassType) type).resolve();\n        if (refClass != null){\n          int length = refClass.getName().length();\n          return addImportForClass(file, startOffset, startOffset + length, refClass);\n        }\n      }\n    }\n    else if (o instanceof PsiMethod){\n      PsiMethod method = (PsiMethod)o;\n      if (method.isConstructor()){\n        PsiClass aClass = (PsiClass)item.getAttribute(LookupItem.CONTAINING_CLASS_ATTR);\n        if (aClass == null){\n          aClass = method.getContainingClass();\n        }\n        if (aClass != null){\n          int length = method.getName().length();\n          return addImportForClass(file, startOffset, startOffset + length, aClass);\n        }\n      }\n    }\n\n    return startOffset;\n  }","commit_id":"0ef5047d18c6885a8454539d17f0756a039f423e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static int addImportForClass(PsiFile file, int startOffset, int endOffset, PsiClass aClass) throws IncorrectOperationException {\n    SmartPsiElementPointer pointer = SmartPointerManager.getInstance(file.getProject()).createSmartPsiElementPointer(aClass);\n    LOG.assertTrue(CommandProcessor.getInstance().getCurrentCommand() != null);\n    LOG.assertTrue(ApplicationManager.getApplication().isUnitTestMode() || ApplicationManager.getApplication().getCurrentWriteAction(null) != null);\n\n    final PsiManager manager = file.getManager();\n    final PsiResolveHelper helper = manager.getResolveHelper();\n\n    final Document document = FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile());\n\n    CharSequence chars = document.getCharsSequence();\n    int length = document.getTextLength();\n    int newStartOffset = startOffset;\n\n    final PsiReference reference = file.findReferenceAt(startOffset);\n    if (reference != null) {\n      final PsiElement resolved = reference.resolve();\n      if (resolved instanceof PsiClass) {\n        if ((((PsiClass)resolved).getQualifiedName() == null/* local classes and parameters*/\n                                 || manager.areElementsEquivalent(aClass, resolved))) return newStartOffset;\n\n      }\n    }\n\n    boolean insertSpace = endOffset < length && Character.isJavaIdentifierPart(chars.charAt(endOffset));\n\n    if (insertSpace){\n      document.insertString(endOffset, \" \");\n    }\n    String name = aClass.getName();\n    document.replaceString(startOffset, endOffset, name);\n    endOffset = startOffset + name.length();\n\n    PsiDocumentManager.getInstance(manager.getProject()).commitAllDocuments();\n\n    PsiElement element = file.findElementAt(startOffset);\n    if (element instanceof PsiIdentifier){\n      PsiElement parent = element.getParent();\n      if (parent instanceof PsiJavaCodeReferenceElement && !((PsiJavaCodeReferenceElement)parent).isQualified()){\n        PsiJavaCodeReferenceElement ref = (PsiJavaCodeReferenceElement)parent;\n        final PsiElement pointerElement = pointer.getElement();\n        if(pointerElement instanceof PsiClass){\n          if (!(ref instanceof PsiImportStaticReferenceElement)) {\n            PsiJavaCodeReferenceElement newRef = (PsiJavaCodeReferenceElement)ref.bindToElement(pointerElement);\n            newRef = CodeInsightUtil.forcePsiPostprocessAndRestoreElement(newRef);\n            final TextRange textRange = newRef.getTextRange();\n            endOffset = textRange.getEndOffset();\n            newStartOffset = textRange.getStartOffset();\n          }\n          else {\n            PsiImportStaticStatement statement = ((PsiImportStaticReferenceElement)ref).bindToTargetClass((PsiClass) pointerElement);\n            statement = CodeInsightUtil.forcePsiPostprocessAndRestoreElement(statement);\n            final TextRange textRange = statement.getTextRange();\n            endOffset = textRange.getEndOffset();\n            newStartOffset = textRange.getStartOffset();\n          }\n        }\n      }\n    }\n\n    if (insertSpace){\n      document.deleteString(endOffset, endOffset + 1);\n    }\n\n    return newStartOffset;\n  }","id":96085,"modified_method":"private static int addImportForClass(PsiFile file, int startOffset, int endOffset, PsiClass aClass) throws IncorrectOperationException {\n    SmartPsiElementPointer pointer = SmartPointerManager.getInstance(file.getProject()).createSmartPsiElementPointer(aClass);\n    LOG.assertTrue(CommandProcessor.getInstance().getCurrentCommand() != null);\n    LOG.assertTrue(ApplicationManager.getApplication().isUnitTestMode() || ApplicationManager.getApplication().getCurrentWriteAction(null) != null);\n\n    final PsiManager manager = file.getManager();\n    final PsiResolveHelper helper = manager.getResolveHelper();\n\n    final Document document = FileDocumentManager.getInstance().getDocument(file.getViewProvider().getVirtualFile());\n\n    CharSequence chars = document.getCharsSequence();\n    int length = document.getTextLength();\n    int newStartOffset = startOffset;\n\n    PsiElement element = file.findElementAt(startOffset);\n    String refText = chars.subSequence(startOffset, endOffset).toString();\n    PsiClass refClass = helper.resolveReferencedClass(refText, element);\n    if (refClass != null && (refClass.getQualifiedName() == null/* local classes and parameters*/\n                             || manager.areElementsEquivalent(aClass, refClass))) return newStartOffset;\n    boolean insertSpace = endOffset < length && Character.isJavaIdentifierPart(chars.charAt(endOffset));\n\n    if (insertSpace){\n      document.insertString(endOffset, \" \");\n    }\n    String name = aClass.getName();\n    document.replaceString(startOffset, endOffset, name);\n    endOffset = startOffset + name.length();\n\n    PsiDocumentManager.getInstance(manager.getProject()).commitAllDocuments();\n\n    element = file.findElementAt(startOffset);\n    if (element instanceof PsiIdentifier){\n      PsiElement parent = element.getParent();\n      if (parent instanceof PsiJavaCodeReferenceElement && !((PsiJavaCodeReferenceElement)parent).isQualified()){\n        PsiJavaCodeReferenceElement ref = (PsiJavaCodeReferenceElement)parent;\n        final PsiElement pointerElement = pointer.getElement();\n        if(pointerElement instanceof PsiClass){\n          if (!(ref instanceof PsiImportStaticReferenceElement)) {\n            PsiJavaCodeReferenceElement newRef = (PsiJavaCodeReferenceElement)ref.bindToElement(pointerElement);\n            newRef = CodeInsightUtil.forcePsiPostprocessAndRestoreElement(newRef);\n            final TextRange textRange = newRef.getTextRange();\n            endOffset = textRange.getEndOffset();\n            newStartOffset = textRange.getStartOffset();\n          }\n          else {\n            PsiImportStaticStatement statement = ((PsiImportStaticReferenceElement)ref).bindToTargetClass((PsiClass) pointerElement);\n            statement = CodeInsightUtil.forcePsiPostprocessAndRestoreElement(statement);\n            final TextRange textRange = statement.getTextRange();\n            endOffset = textRange.getEndOffset();\n            newStartOffset = textRange.getStartOffset();\n          }\n        }\n      }\n    }\n\n    if (insertSpace){\n      document.deleteString(endOffset, endOffset + 1);\n    }\n\n    return newStartOffset;\n  }","commit_id":"0ef5047d18c6885a8454539d17f0756a039f423e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Test\n  public void testContainerKill() throws Exception {\n    if (!shouldRun()) {\n      return;\n    }\n    \n    final ContainerId sleepId = getNextContainerId();   \n    Thread t = new Thread() {\n      public void run() {\n        try {\n          runAndBlock(sleepId, \"sleep\", \"100\");\n        } catch (IOException e) {\n          LOG.warn(\"Caught exception while running sleep\",e);\n        }\n      };\n    };\n    t.setDaemon(true); //If it does not exit we shouldn't block the test.\n    t.start();\n\n    assertTrue(t.isAlive());\n   \n    String pid = null;\n    int count = 10;\n    while ((pid = exec.getProcessId(sleepId)) == null && count > 0) {\n      LOG.info(\"Sleeping for 200 ms before checking for pid \");\n      Thread.sleep(200);\n      count--;\n    }\n    assertNotNull(pid);\n\n    LOG.info(\"Going to killing the process.\");\n    exec.signalContainer(appSubmitter, pid, Signal.TERM);\n    LOG.info(\"sleeping for 100ms to let the sleep be killed\");\n    Thread.sleep(100);\n    \n    assertFalse(t.isAlive());\n  }","id":96086,"modified_method":"@Test\n  public void testContainerKill() throws Exception {\n    Assume.assumeTrue(shouldRun());\n\n    final ContainerId sleepId = getNextContainerId();\n    Thread t = new Thread() {\n      public void run() {\n        try {\n          runAndBlock(sleepId, \"sleep\", \"100\");\n        } catch (IOException e) {\n          LOG.warn(\"Caught exception while running sleep\", e);\n        }\n      };\n    };\n    t.setDaemon(true); // If it does not exit we shouldn't block the test.\n    t.start();\n\n    assertTrue(t.isAlive());\n\n    String pid = null;\n    int count = 10;\n    while ((pid = exec.getProcessId(sleepId)) == null && count > 0) {\n      LOG.info(\"Sleeping for 200 ms before checking for pid \");\n      Thread.sleep(200);\n      count--;\n    }\n    assertNotNull(pid);\n\n    LOG.info(\"Going to killing the process.\");\n    exec.signalContainer(appSubmitter, pid, Signal.TERM);\n    LOG.info(\"sleeping for 100ms to let the sleep be killed\");\n    Thread.sleep(100);\n\n    assertFalse(t.isAlive());\n    cleanupAppFiles(appSubmitter);\n  }","commit_id":"b21c72777ae664b08fd1a93b4f88fa43f2478d94","url":"https://github.com/apache/hadoop"},{"original_method":"@Test\n  public void testContainerLocalizer() throws Exception {\n    if (!shouldRun()) {\n      return;\n    }\n    List<String> localDirs = dirsHandler.getLocalDirs();\n    List<String> logDirs = dirsHandler.getLogDirs();\n    for (String localDir : localDirs) {\n      Path userDir =\n          new Path(localDir, ContainerLocalizer.USERCACHE);\n      files.mkdir(userDir, new FsPermission(\"777\"), false);\n      // $local/filecache\n      Path fileDir =\n          new Path(localDir, ContainerLocalizer.FILECACHE);\n      files.mkdir(fileDir, new FsPermission(\"777\"), false);\n    }\n    String locId = \"container_01_01\";\n    Path nmPrivateContainerTokensPath =\n        dirsHandler.getLocalPathForWrite(\n            ResourceLocalizationService.NM_PRIVATE_DIR + Path.SEPARATOR\n              + String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT,\n                  locId));\n    files.create(nmPrivateContainerTokensPath, EnumSet.of(CREATE, OVERWRITE));\n    Configuration config = new YarnConfiguration(conf);\n    InetSocketAddress nmAddr = config.getSocketAddr(\n      YarnConfiguration.NM_BIND_HOST,\n      YarnConfiguration.NM_LOCALIZER_ADDRESS,\n      YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n      YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n    String appId = \"application_01_01\";\n    exec = new LinuxContainerExecutor() {\n      @Override\n      public void buildMainArgs(List<String> command, String user, String appId,\n          String locId, InetSocketAddress nmAddr, List<String> localDirs) {\n        MockContainerLocalizer.buildMainArgs(command, user, appId, locId, nmAddr,\n          localDirs);\n      }\n    };\n    exec.setConf(conf);\n\n    exec.startLocalizer(nmPrivateContainerTokensPath, nmAddr, appSubmitter,\n      appId, locId, dirsHandler);\n\n    String locId2 = \"container_01_02\";\n    Path nmPrivateContainerTokensPath2 =\n        dirsHandler\n          .getLocalPathForWrite(ResourceLocalizationService.NM_PRIVATE_DIR\n              + Path.SEPARATOR\n              + String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId2));\n    files.create(nmPrivateContainerTokensPath2, EnumSet.of(CREATE, OVERWRITE));\n    exec.startLocalizer(nmPrivateContainerTokensPath2, nmAddr, appSubmitter,\n      appId, locId2, dirsHandler);\n  }","id":96087,"modified_method":"@Test\n  public void testContainerLocalizer() throws Exception {\n\n    Assume.assumeTrue(shouldRun());\n\n    String locId = \"container_01_01\";\n    Path nmPrivateContainerTokensPath =\n        dirsHandler\n          .getLocalPathForWrite(ResourceLocalizationService.NM_PRIVATE_DIR\n              + Path.SEPARATOR\n              + String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId));\n    files.create(nmPrivateContainerTokensPath, EnumSet.of(CREATE, OVERWRITE));\n    Configuration config = new YarnConfiguration(conf);\n    InetSocketAddress nmAddr =\n        config.getSocketAddr(YarnConfiguration.NM_BIND_HOST,\n          YarnConfiguration.NM_LOCALIZER_ADDRESS,\n          YarnConfiguration.DEFAULT_NM_LOCALIZER_ADDRESS,\n          YarnConfiguration.DEFAULT_NM_LOCALIZER_PORT);\n    String appId = \"application_01_01\";\n    exec = new LinuxContainerExecutor() {\n      @Override\n      public void buildMainArgs(List<String> command, String user,\n          String appId, String locId, InetSocketAddress nmAddr,\n          List<String> localDirs) {\n        MockContainerLocalizer.buildMainArgs(command, user, appId, locId,\n          nmAddr, localDirs);\n      }\n    };\n    exec.setConf(conf);\n\n    exec.startLocalizer(nmPrivateContainerTokensPath, nmAddr, appSubmitter,\n      appId, locId, dirsHandler);\n\n    String locId2 = \"container_01_02\";\n    Path nmPrivateContainerTokensPath2 =\n        dirsHandler\n          .getLocalPathForWrite(ResourceLocalizationService.NM_PRIVATE_DIR\n              + Path.SEPARATOR\n              + String.format(ContainerLocalizer.TOKEN_FILE_NAME_FMT, locId2));\n    files.create(nmPrivateContainerTokensPath2, EnumSet.of(CREATE, OVERWRITE));\n    exec.startLocalizer(nmPrivateContainerTokensPath2, nmAddr, appSubmitter,\n      appId, locId2, dirsHandler);\n    cleanupUserAppCache(appSubmitter);\n  }","commit_id":"b21c72777ae664b08fd1a93b4f88fa43f2478d94","url":"https://github.com/apache/hadoop"},{"original_method":"@Test\n  public void testNonsecureUsernamePattern() throws Exception {\n    try {\n      //nonsecure default\n      Configuration conf = new YarnConfiguration();\n      conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n          \"simple\");\n      UserGroupInformation.setConfiguration(conf);\n      LinuxContainerExecutor lce = new LinuxContainerExecutor();\n      lce.setConf(conf);\n      lce.verifyUsernamePattern(\"foo\");\n      try {\n        lce.verifyUsernamePattern(\"foo/x\");\n        Assert.fail();\n      } catch (IllegalArgumentException ex) {\n        //NOP        \n      } catch (Throwable ex) {\n        Assert.fail(ex.toString());\n      }\n      \n      //nonsecure custom setting\n      conf.set(YarnConfiguration.NM_NONSECURE_MODE_USER_PATTERN_KEY, \"foo\");\n      lce = new LinuxContainerExecutor();\n      lce.setConf(conf);\n      lce.verifyUsernamePattern(\"foo\");\n      try {\n        lce.verifyUsernamePattern(\"bar\");\n        Assert.fail();\n      } catch (IllegalArgumentException ex) {\n        //NOP        \n      } catch (Throwable ex) {\n        Assert.fail(ex.toString());\n      }\n\n      //secure, pattern matching does not kick in.\n      conf = new YarnConfiguration();\n      conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n          \"kerberos\");\n      UserGroupInformation.setConfiguration(conf);\n      lce = new LinuxContainerExecutor();\n      lce.setConf(conf);\n      lce.verifyUsernamePattern(\"foo\");\n      lce.verifyUsernamePattern(\"foo/w\");\n    } finally {\n      Configuration conf = new YarnConfiguration();\n      conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n          \"simple\");\n      UserGroupInformation.setConfiguration(conf);\n    }\n  }","id":96088,"modified_method":"@Test\n  public void testNonsecureUsernamePattern() throws Exception {\n    Assume.assumeTrue(shouldRun());\n    try {\n      // nonsecure default\n      Configuration conf = new YarnConfiguration();\n      conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n        \"simple\");\n      UserGroupInformation.setConfiguration(conf);\n      LinuxContainerExecutor lce = new LinuxContainerExecutor();\n      lce.setConf(conf);\n      lce.verifyUsernamePattern(\"foo\");\n      try {\n        lce.verifyUsernamePattern(\"foo/x\");\n        fail();\n      } catch (IllegalArgumentException ex) {\n        // NOP\n      } catch (Throwable ex) {\n        fail(ex.toString());\n      }\n\n      // nonsecure custom setting\n      conf.set(YarnConfiguration.NM_NONSECURE_MODE_USER_PATTERN_KEY, \"foo\");\n      lce = new LinuxContainerExecutor();\n      lce.setConf(conf);\n      lce.verifyUsernamePattern(\"foo\");\n      try {\n        lce.verifyUsernamePattern(\"bar\");\n        fail();\n      } catch (IllegalArgumentException ex) {\n        // NOP\n      } catch (Throwable ex) {\n        fail(ex.toString());\n      }\n\n      // secure, pattern matching does not kick in.\n      conf = new YarnConfiguration();\n      conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n        \"kerberos\");\n      UserGroupInformation.setConfiguration(conf);\n      lce = new LinuxContainerExecutor();\n      lce.setConf(conf);\n      lce.verifyUsernamePattern(\"foo\");\n      lce.verifyUsernamePattern(\"foo/w\");\n    } finally {\n      Configuration conf = new YarnConfiguration();\n      conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n        \"simple\");\n      UserGroupInformation.setConfiguration(conf);\n    }\n  }","commit_id":"b21c72777ae664b08fd1a93b4f88fa43f2478d94","url":"https://github.com/apache/hadoop"},{"original_method":"@Test\n  public void testContainerLaunch() throws IOException {\n    if (!shouldRun()) {\n      return;\n    }\n\n    File touchFile = new File(workSpace, \"touch-file\");\n    int ret = runAndBlock(\"touch\", touchFile.getAbsolutePath());\n    \n    assertEquals(0, ret);\n    FileStatus fileStatus = FileContext.getLocalFSFileContext().getFileStatus(\n          new Path(touchFile.getAbsolutePath()));\n    assertEquals(appSubmitter, fileStatus.getOwner());\n  }","id":96089,"modified_method":"@Test\n  public void testContainerLaunch() throws Exception {\n    Assume.assumeTrue(shouldRun());\n    String expectedRunAsUser =\n        conf.get(YarnConfiguration.NM_NONSECURE_MODE_LOCAL_USER_KEY,\n          YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER);\n\n    File touchFile = new File(workSpace, \"touch-file\");\n    int ret = runAndBlock(\"touch\", touchFile.getAbsolutePath());\n\n    assertEquals(0, ret);\n    FileStatus fileStatus =\n        FileContext.getLocalFSFileContext().getFileStatus(\n          new Path(touchFile.getAbsolutePath()));\n    assertEquals(expectedRunAsUser, fileStatus.getOwner());\n    cleanupAppFiles(expectedRunAsUser);\n\n  }","commit_id":"b21c72777ae664b08fd1a93b4f88fa43f2478d94","url":"https://github.com/apache/hadoop"},{"original_method":"@Before\n  public void setup() throws Exception {\n    files = FileContext.getLocalFSFileContext();\n    Path workSpacePath = new Path(workSpace.getAbsolutePath());\n    files.mkdir(workSpacePath, null, true);\n    FileUtil.chmod(workSpace.getAbsolutePath(), \"777\");\n    File localDir = new File(workSpace.getAbsoluteFile(), \"localDir\");\n    files.mkdir(new Path(localDir.getAbsolutePath()),\n        new FsPermission(\"777\"), false);\n    File logDir = new File(workSpace.getAbsoluteFile(), \"logDir\");\n    files.mkdir(new Path(logDir.getAbsolutePath()),\n        new FsPermission(\"777\"), false);\n    String exec_path = System.getProperty(\"container-executor.path\");\n    if(exec_path != null && !exec_path.isEmpty()) {\n      conf = new Configuration(false);\n      conf.setClass(\"fs.AbstractFileSystem.file.impl\",\n        org.apache.hadoop.fs.local.LocalFs.class,\n        org.apache.hadoop.fs.AbstractFileSystem.class);\n      conf.set(YarnConfiguration.NM_NONSECURE_MODE_LOCAL_USER_KEY, \"xuan\");\n      LOG.info(\"Setting \"+YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH\n          +\"=\"+exec_path);\n      conf.set(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH, exec_path);\n      exec = new LinuxContainerExecutor();\n      exec.setConf(conf);\n      conf.set(YarnConfiguration.NM_LOCAL_DIRS, localDir.getAbsolutePath());\n      conf.set(YarnConfiguration.NM_LOG_DIRS, logDir.getAbsolutePath());\n      dirsHandler = new LocalDirsHandlerService();\n      dirsHandler.init(conf);\n    }\n    appSubmitter = System.getProperty(\"application.submitter\");\n    if(appSubmitter == null || appSubmitter.isEmpty()) {\n      appSubmitter = \"nobody\";\n    }\n  }","id":96090,"modified_method":"@Before\n  public void setup() throws Exception {\n    files = FileContext.getLocalFSFileContext();\n    Path workSpacePath = new Path(workSpace.getAbsolutePath());\n    files.mkdir(workSpacePath, null, true);\n    FileUtil.chmod(workSpace.getAbsolutePath(), \"777\");\n    File localDir = new File(workSpace.getAbsoluteFile(), \"localDir\");\n    files.mkdir(new Path(localDir.getAbsolutePath()), new FsPermission(\"777\"),\n      false);\n    File logDir = new File(workSpace.getAbsoluteFile(), \"logDir\");\n    files.mkdir(new Path(logDir.getAbsolutePath()), new FsPermission(\"777\"),\n      false);\n    String exec_path = System.getProperty(\"container-executor.path\");\n    if (exec_path != null && !exec_path.isEmpty()) {\n      conf = new Configuration(false);\n      conf.setClass(\"fs.AbstractFileSystem.file.impl\",\n        org.apache.hadoop.fs.local.LocalFs.class,\n        org.apache.hadoop.fs.AbstractFileSystem.class);\n\n      appSubmitter = System.getProperty(\"application.submitter\");\n      if (appSubmitter == null || appSubmitter.isEmpty()) {\n        appSubmitter = \"nobody\";\n      }\n\n      conf.set(YarnConfiguration.NM_NONSECURE_MODE_LOCAL_USER_KEY, appSubmitter);\n      LOG.info(\"Setting \" + YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH\n          + \"=\" + exec_path);\n      conf.set(YarnConfiguration.NM_LINUX_CONTAINER_EXECUTOR_PATH, exec_path);\n      exec = new LinuxContainerExecutor();\n      exec.setConf(conf);\n      conf.set(YarnConfiguration.NM_LOCAL_DIRS, localDir.getAbsolutePath());\n      conf.set(YarnConfiguration.NM_LOG_DIRS, logDir.getAbsolutePath());\n      dirsHandler = new LocalDirsHandlerService();\n      dirsHandler.init(conf);\n      List<String> localDirs = dirsHandler.getLocalDirs();\n      for (String dir : localDirs) {\n        Path userDir = new Path(dir, ContainerLocalizer.USERCACHE);\n        files.mkdir(userDir, new FsPermission(\"777\"), false);\n        // $local/filecache\n        Path fileDir = new Path(dir, ContainerLocalizer.FILECACHE);\n        files.mkdir(fileDir, new FsPermission(\"777\"), false);\n      }\n    }\n\n  }","commit_id":"b21c72777ae664b08fd1a93b4f88fa43f2478d94","url":"https://github.com/apache/hadoop"},{"original_method":"@Test\n  public void testLocalUser() throws Exception {\n    try {\n      //nonsecure default\n      Configuration conf = new YarnConfiguration();\n      conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n          \"simple\");\n      UserGroupInformation.setConfiguration(conf);\n      LinuxContainerExecutor lce = new LinuxContainerExecutor();\n      lce.setConf(conf);\n      Assert.assertEquals(YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER,\n          lce.getRunAsUser(\"foo\"));\n\n      //nonsecure custom setting\n      conf.set(YarnConfiguration.NM_NONSECURE_MODE_LOCAL_USER_KEY, \"bar\");\n      lce = new LinuxContainerExecutor();\n      lce.setConf(conf);\n      Assert.assertEquals(\"bar\", lce.getRunAsUser(\"foo\"));\n\n      //nonsecure without limits\n      conf.set(YarnConfiguration.NM_NONSECURE_MODE_LOCAL_USER_KEY, \"bar\");\n      conf.setBoolean(YarnConfiguration.NM_NONSECURE_MODE_LIMIT_USERS, false);\n      lce = new LinuxContainerExecutor();\n      lce.setConf(conf);\n      Assert.assertEquals(\"foo\", lce.getRunAsUser(\"foo\"));\n\n      //secure\n      conf = new YarnConfiguration();\n      conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n          \"kerberos\");\n      UserGroupInformation.setConfiguration(conf);\n      lce = new LinuxContainerExecutor();\n      lce.setConf(conf);\n      Assert.assertEquals(\"foo\", lce.getRunAsUser(\"foo\"));\n    } finally {\n      Configuration conf = new YarnConfiguration();\n      conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n          \"simple\");\n      UserGroupInformation.setConfiguration(conf);\n    }\n  }","id":96091,"modified_method":"@Test\n  public void testLocalUser() throws Exception {\n    Assume.assumeTrue(shouldRun());\n    try {\n      // nonsecure default\n      Configuration conf = new YarnConfiguration();\n      conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n        \"simple\");\n      UserGroupInformation.setConfiguration(conf);\n      LinuxContainerExecutor lce = new LinuxContainerExecutor();\n      lce.setConf(conf);\n      Assert.assertEquals(\n          YarnConfiguration.DEFAULT_NM_NONSECURE_MODE_LOCAL_USER,\n          lce.getRunAsUser(\"foo\"));\n\n      // nonsecure custom setting\n      conf.set(YarnConfiguration.NM_NONSECURE_MODE_LOCAL_USER_KEY, \"bar\");\n      lce = new LinuxContainerExecutor();\n      lce.setConf(conf);\n      Assert.assertEquals(\"bar\", lce.getRunAsUser(\"foo\"));\n\n      // nonsecure without limits\n      conf.set(YarnConfiguration.NM_NONSECURE_MODE_LOCAL_USER_KEY, \"bar\");\n      conf.setBoolean(YarnConfiguration.NM_NONSECURE_MODE_LIMIT_USERS, false);\n      lce = new LinuxContainerExecutor();\n      lce.setConf(conf);\n      Assert.assertEquals(\"foo\", lce.getRunAsUser(\"foo\"));\n\n      // secure\n      conf = new YarnConfiguration();\n      conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n        \"kerberos\");\n      UserGroupInformation.setConfiguration(conf);\n      lce = new LinuxContainerExecutor();\n      lce.setConf(conf);\n      Assert.assertEquals(\"foo\", lce.getRunAsUser(\"foo\"));\n    } finally {\n      Configuration conf = new YarnConfiguration();\n      conf.set(CommonConfigurationKeysPublic.HADOOP_SECURITY_AUTHENTICATION,\n        \"simple\");\n      UserGroupInformation.setConfiguration(conf);\n    }\n  }","commit_id":"b21c72777ae664b08fd1a93b4f88fa43f2478d94","url":"https://github.com/apache/hadoop"},{"original_method":"@Test(timeout=10000)\n  public void testPostExecuteAfterReacquisition() throws Exception {\n    // make up some bogus container ID\n    ApplicationId appId = ApplicationId.newInstance(12345, 67890);\n    ApplicationAttemptId attemptId =\n        ApplicationAttemptId.newInstance(appId, 54321);\n    ContainerId cid = ContainerId.newContainerId(attemptId, 9876);\n\n    Configuration conf = new YarnConfiguration();\n    conf.setClass(YarnConfiguration.NM_LINUX_CONTAINER_RESOURCES_HANDLER,\n        TestResourceHandler.class, LCEResourcesHandler.class);\n    LinuxContainerExecutor lce = new LinuxContainerExecutor();\n    lce.setConf(conf);\n    try {\n      lce.init();\n    } catch (IOException e) {\n      // expected if LCE isn't setup right, but not necessary for this test\n    }\n    lce.reacquireContainer(\"foouser\", cid);\n    Assert.assertTrue(\"postExec not called after reacquisition\",\n        TestResourceHandler.postExecContainers.contains(cid));\n  }","id":96092,"modified_method":"@Test(timeout = 10000)\n  public void testPostExecuteAfterReacquisition() throws Exception {\n    Assume.assumeTrue(shouldRun());\n    // make up some bogus container ID\n    ApplicationId appId = ApplicationId.newInstance(12345, 67890);\n    ApplicationAttemptId attemptId =\n        ApplicationAttemptId.newInstance(appId, 54321);\n    ContainerId cid = ContainerId.newContainerId(attemptId, 9876);\n\n    Configuration conf = new YarnConfiguration();\n    conf.setClass(YarnConfiguration.NM_LINUX_CONTAINER_RESOURCES_HANDLER,\n      TestResourceHandler.class, LCEResourcesHandler.class);\n    LinuxContainerExecutor lce = new LinuxContainerExecutor();\n    lce.setConf(conf);\n    try {\n      lce.init();\n    } catch (IOException e) {\n      // expected if LCE isn't setup right, but not necessary for this test\n    }\n    lce.reacquireContainer(\"foouser\", cid);\n    assertTrue(\"postExec not called after reacquisition\",\n        TestResourceHandler.postExecContainers.contains(cid));\n  }","commit_id":"b21c72777ae664b08fd1a93b4f88fa43f2478d94","url":"https://github.com/apache/hadoop"},{"original_method":"VerProtocolImpl getHighestSupportedProtocol(RpcKind rpcKind, \n       String protocolName) {    \n     Long highestVersion = 0L;\n     ProtoClassProtoImpl highest = null;\n System.out.println(\"Size of protoMap for \" + rpcKind + \" =\" + getProtocolImplMap(rpcKind).size());\n     for (Map.Entry<ProtoNameVer, ProtoClassProtoImpl> pv : \n           getProtocolImplMap(rpcKind).entrySet()) {\n       if (pv.getKey().protocol.equals(protocolName)) {\n         if ((highest == null) || (pv.getKey().version > highestVersion)) {\n           highest = pv.getValue();\n           highestVersion = pv.getKey().version;\n         } \n       }\n     }\n     if (highest == null) {\n       return null;\n     }\n     return new VerProtocolImpl(highestVersion,  highest);   \n   }","id":96093,"modified_method":"VerProtocolImpl getHighestSupportedProtocol(RpcKind rpcKind, \n       String protocolName) {    \n     Long highestVersion = 0L;\n     ProtoClassProtoImpl highest = null;\n     if (LOG.isDebugEnabled()) {\n       LOG.debug(\"Size of protoMap for \" + rpcKind + \" =\"\n           + getProtocolImplMap(rpcKind).size());\n     }\n     for (Map.Entry<ProtoNameVer, ProtoClassProtoImpl> pv : \n           getProtocolImplMap(rpcKind).entrySet()) {\n       if (pv.getKey().protocol.equals(protocolName)) {\n         if ((highest == null) || (pv.getKey().version > highestVersion)) {\n           highest = pv.getValue();\n           highestVersion = pv.getKey().version;\n         } \n       }\n     }\n     if (highest == null) {\n       return null;\n     }\n     return new VerProtocolImpl(highestVersion,  highest);   \n   }","commit_id":"a9002bfea1e02c4e565cc708dbf55607f5a6d458","url":"https://github.com/apache/hadoop"},{"original_method":"@Override\n    public void handle(final HttpServerRequest request) {\n        String uri = request.uri();\n        System.out.println(\"Proxying request: \" + uri);\n\n        // lets map the request URI to map to the service URI and then the renaming URI\n        // using mapping rules...\n        HttpClient client = null;\n\n        String remaining = null;\n        String prefix = null;\n\n        List<String> paths = serviceMap.getPaths();\n        for (String path : paths) {\n            if (uri.startsWith(path)) {\n                remaining = uri.substring(path.length());\n                // now lets pick a service for this path\n\n                List<ServiceDetails> services = serviceMap.getServices(path);\n                if (!services.isEmpty()) {\n                    ServiceDetails serviceDetails = chooser.chooseService(request, services);\n                    if (serviceDetails != null) {\n                        List<String> urlStrings = serviceDetails.getServices();\n                        if (urlStrings.size() > 0) {\n                            String urlText = urlStrings.get(0);\n                            if (Strings.notEmpty(urlText)) {\n                                // lets create a client for this request...\n                                try {\n                                    URL url = new URL(urlText);\n                                    client = createClient(url);\n                                    prefix = url.getPath();\n                                    break;\n                                } catch (MalformedURLException e) {\n                                    LOG.warn(\"Failed to parse URL: \" + urlText + \". \" + e, e);\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        if (client != null) {\n            String actualUrl = prefix != null ? prefix : \"\";\n            if (remaining != null) {\n                if (actualUrl.length() > 0 && !actualUrl.endsWith(\"/\")) {\n                    actualUrl += \"/\";\n                }\n                actualUrl += remaining;\n            }\n            final HttpClientRequest clientRequest = client.request(request.method(), actualUrl, new Handler<HttpClientResponse>() {\n                public void handle(HttpClientResponse clientResponse) {\n                    System.out.println(\"Proxying response: \" + clientResponse.statusCode());\n                    request.response().setStatusCode(clientResponse.statusCode());\n                    request.response().headers().set(clientResponse.headers());\n                    request.response().setChunked(true);\n                    clientResponse.dataHandler(new Handler<Buffer>() {\n                        public void handle(Buffer data) {\n                            System.out.println(\"Proxying response body:\" + data);\n                            request.response().write(data);\n                        }\n                    });\n                    clientResponse.endHandler(new VoidHandler() {\n                        public void handle() {\n                            request.response().end();\n                        }\n                    });\n                }\n            });\n            clientRequest.headers().set(request.headers());\n            clientRequest.setChunked(true);\n            request.dataHandler(new Handler<Buffer>() {\n                public void handle(Buffer data) {\n                    System.out.println(\"Proxying request body:\" + data);\n                    clientRequest.write(data);\n                }\n            });\n            request.endHandler(new VoidHandler() {\n                public void handle() {\n                    System.out.println(\"end of the request\");\n                    clientRequest.end();\n                }\n            });\n\n        } else {\n            //  lets return a 404\n            request.response().setStatusCode(404);\n            request.response().close();\n        }\n    }","id":96094,"modified_method":"@Override\n    public void handle(final HttpServerRequest request) {\n        String uri = request.uri();\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Proxying request: \" + uri);\n        }\n\n        // lets map the request URI to map to the service URI and then the renaming URI\n        // using mapping rules...\n        HttpClient client = null;\n\n        String remaining = null;\n        String prefix = null;\n\n        try {\n            List<String> paths = serviceMap.getPaths();\n            for (String path : paths) {\n                // lets remove the container name\n                int idx = path.lastIndexOf('/');\n                String pathPrefix = path;\n                if (idx > 0) {\n                    pathPrefix = pathPrefix.substring(0, idx + 1);\n                }\n                if (uri.startsWith(pathPrefix) || (uri + \"/\").startsWith(pathPrefix)) {\n                    int pathPrefixLength = pathPrefix.length();\n                    if (pathPrefixLength < uri.length()) {\n                        remaining = uri.substring(pathPrefixLength);\n                    }\n\n                    // now lets pick a service for this path\n                    List<ServiceDetails> services = serviceMap.getServices(path);\n                    if (!services.isEmpty()) {\n                        ServiceDetails serviceDetails = chooser.chooseService(request, services);\n                        if (serviceDetails != null) {\n                            List<String> urlStrings = serviceDetails.getServices();\n                            if (urlStrings.size() > 0) {\n                                String urlText = urlStrings.get(0);\n                                if (Strings.notEmpty(urlText)) {\n                                    // lets create a client for this request...\n                                    try {\n                                        URL url = new URL(urlText);\n                                        client = createClient(url);\n                                        prefix = url.getPath();\n                                        break;\n                                    } catch (MalformedURLException e) {\n                                        LOG.warn(\"Failed to parse URL: \" + urlText + \". \" + e, e);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n\n            if (client != null) {\n                String actualUrl = prefix != null ? prefix : \"\";\n                if (remaining != null) {\n                    if (actualUrl.length() > 0 && !actualUrl.endsWith(\"/\")) {\n                        actualUrl += \"/\";\n                    }\n                    actualUrl += remaining;\n                }\n                final HttpClientRequest clientRequest = client.request(request.method(), actualUrl, new Handler<HttpClientResponse>() {\n                    public void handle(HttpClientResponse clientResponse) {\n                        if (LOG.isDebugEnabled()) {\n                            LOG.debug(\"Proxying response: \" + clientResponse.statusCode());\n                        }\n                        request.response().setStatusCode(clientResponse.statusCode());\n                        request.response().headers().set(clientResponse.headers());\n                        request.response().setChunked(true);\n                        clientResponse.dataHandler(new Handler<Buffer>() {\n                            public void handle(Buffer data) {\n                                if (LOG.isDebugEnabled()) {\n                                    LOG.debug(\"Proxying response body:\" + data);\n                                }\n                                request.response().write(data);\n                            }\n                        });\n                        clientResponse.endHandler(new VoidHandler() {\n                            public void handle() {\n                                request.response().end();\n                            }\n                        });\n                    }\n                });\n                clientRequest.headers().set(request.headers());\n                clientRequest.setChunked(true);\n                request.dataHandler(new Handler<Buffer>() {\n                    public void handle(Buffer data) {\n                        if (LOG.isDebugEnabled()) {\n                            LOG.debug(\"Proxying request body:\" + data);\n                        }\n                        clientRequest.write(data);\n                    }\n                });\n                request.endHandler(new VoidHandler() {\n                    public void handle() {\n                        if (LOG.isDebugEnabled()) {\n                            LOG.debug(\"end of the request\");\n                        }\n                        clientRequest.end();\n                    }\n                });\n\n            } else {\n                //  lets return a 404\n                LOG.info(\"Could not find matching proxy path for \" + uri + \" from paths: \" + paths);\n                request.response().setStatusCode(404);\n                request.response().close();\n            }\n        } catch (Throwable e) {\n            LOG.error(\"Caught: \" + e, e);\n            request.response().setStatusCode(404);\n            StringWriter buffer = new StringWriter();\n            e.printStackTrace(new PrintWriter(buffer));\n            request.response().setStatusMessage(\"Error: \" + e + \"\\nStack Trace: \" + buffer);\n            request.response().close();\n        }\n    }","commit_id":"18b6f302bed6b3ea1a771e1b80e25753cd66202c","url":"https://github.com/fabric8io/fabric8"},{"original_method":"@Override\n    public void handle(final NetSocket socket) {\n        LOG.info(\"Proxying socket from: \" + socket);\n\n        NetClient client = null;\n        List<String> paths = serviceMap.getPaths();\n        String path = pathChooser.choose(paths);\n        if (path != null) {\n            List<ServiceDetails> services = serviceMap.getServices(path);\n            if (!services.isEmpty()) {\n                ServiceDetails serviceDetails = serviceChooser.chooseService(socket, services);\n                if (serviceDetails != null) {\n                    List<String> urlStrings = serviceDetails.getServices();\n                    if (urlStrings.size() > 0) {\n                        String urlText = urlStrings.get(0);\n                        if (Strings.notEmpty(urlText)) {\n                            // lets create a client for this request...\n                            try {\n                                URL url = new URL(urlText);\n                                Handler<AsyncResult<NetSocket>> handler = new Handler<AsyncResult<NetSocket>>() {\n                                    public void handle(final AsyncResult<NetSocket> asyncSocket) {\n                                        NetSocket clientSocket = asyncSocket.result();\n                                        Pump.createPump(clientSocket, socket).start();\n                                        Pump.createPump(socket, clientSocket).start();\n                                    }\n                                };\n                                client = createClient(url, handler);\n                            } catch (MalformedURLException e) {\n                                LOG.warn(\"Failed to parse URL: \" + urlText + \". \" + e, e);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (client == null) {\n            // fail to route\n            socket.close();\n        }\n    }","id":96095,"modified_method":"@Override\n    public void handle(final NetSocket socket) {\n        LOG.info(\"Proxying socket from: \" + socket);\n\n        NetClient client = null;\n        List<String> paths = serviceMap.getPaths();\n        String path = pathChooser.choose(paths);\n        if (path != null) {\n            List<ServiceDetails> services = serviceMap.getServices(path);\n            if (!services.isEmpty()) {\n                ServiceDetails serviceDetails = serviceChooser.chooseService(socket, services);\n                if (serviceDetails != null) {\n                    List<String> urlStrings = serviceDetails.getServices();\n                    if (urlStrings.size() > 0) {\n                        String urlText = urlStrings.get(0);\n                        if (Strings.notEmpty(urlText)) {\n                            // lets create a client for this request...\n                            try {\n                                URL url = new URL(urlText);\n                                Handler<AsyncResult<NetSocket>> handler = new Handler<AsyncResult<NetSocket>>() {\n                                    public void handle(final AsyncResult<NetSocket> asyncSocket) {\n                                        NetSocket clientSocket = asyncSocket.result();\n                                        Pump.createPump(clientSocket, socket).start();\n                                        Pump.createPump(socket, clientSocket).start();\n                                    }\n                                };\n                                client = createClient(url, handler);\n                                System.out.println(\"Created client \" + client);\n                            } catch (MalformedURLException e) {\n                                LOG.warn(\"Failed to parse URL: \" + urlText + \". \" + e, e);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (client == null) {\n            System.out.println(\"No connection available so closing\");\n            // fail to route\n            socket.close();\n        }\n    }","commit_id":"18b6f302bed6b3ea1a771e1b80e25753cd66202c","url":"https://github.com/fabric8io/fabric8"},{"original_method":"/**\n     * Returns all the current alive profiles for the given profile\n     */\n    private List<Container> containersForProfile(String profile) {\n        List<Container> answer = new ArrayList<Container>();\n        List<Container> containers = Containers.containersForProfile(fabricService.get().getContainers(), profile);\n        for (Container container : containers) {\n            boolean alive = container.isAlive();\n            boolean provisioningPending = container.isProvisioningPending();\n            if (alive || provisioningPending) {\n                System.out.println(\"Container \" + container.getId() + \" is alive \" + alive + \" provision is pending \" + provisioningPending);\n                answer.add(container);\n            }\n        }\n        return answer;\n    }","id":96096,"modified_method":"/**\n     * Returns all the current alive profiles for the given profile\n     */\n    private List<Container> containersForProfile(String profile) {\n        List<Container> answer = new ArrayList<Container>();\n        List<Container> containers = Containers.containersForProfile(fabricService.get().getContainers(), profile);\n        for (Container container : containers) {\n            boolean alive = container.isAlive();\n            boolean provisioningPending = container.isProvisioningPending();\n            if (alive || provisioningPending) {\n                if (LOGGER.isDebugEnabled()) {\n                    LOGGER.debug(\"Container \" + container.getId() + \" is alive \" + alive + \" provision is pending \" + provisioningPending);\n                }\n                answer.add(container);\n            }\n        }\n        return answer;\n    }","commit_id":"c6753cf4d6cf6bb75265c7d60fba3da192e12cb7","url":"https://github.com/fabric8io/fabric8"},{"original_method":"@Override\n  public void processNames(final Processor<String> processor, GlobalSearchScope scope, IdFilter filter) {\n    long started = System.currentTimeMillis();\n    FileBasedIndex.getInstance().processAllKeys(FilenameIndex.NAME, new Processor<String>() {\n      @Override\n      public boolean process(String s) {\n        return processor.process(s);\n      }\n    }, scope, filter);\n    System.out.println(\"All names retrieved:\" + (System.currentTimeMillis() - started));\n  }","id":96097,"modified_method":"@Override\n  public void processNames(final Processor<String> processor, GlobalSearchScope scope, IdFilter filter) {\n    long started = System.currentTimeMillis();\n    FileBasedIndex.getInstance().processAllKeys(FilenameIndex.NAME, new Processor<String>() {\n      @Override\n      public boolean process(String s) {\n        return processor.process(s);\n      }\n    }, scope, filter);\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"All names retrieved:\" + (System.currentTimeMillis() - started));\n    }\n  }","commit_id":"2bb8b9c046c1ea279eb3d51227d2451c6e5c1d86","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static IdFilter getFilter(Project project, boolean includeNonProjectItems) {\n    long started = System.currentTimeMillis();\n    final BitSet idSet = new BitSet();\n\n    ContentIterator iterator = new ContentIterator() {\n      @Override\n      public boolean processFile(VirtualFile fileOrDir) {\n        idSet.set(\n          ((VirtualFileWithId)fileOrDir).getId()\n        );\n        return true;\n      }\n    };\n\n    if (!includeNonProjectItems) {\n      ProjectRootManager.getInstance(project).getFileIndex().iterateContent(iterator);\n    } else {\n      FileBasedIndex.getInstance().iterateIndexableFiles(iterator, project, null);\n    }\n\n    System.out.println(\"Done filter \" + (System.currentTimeMillis()  -started) + \":\" + idSet.size());\n    return new IdFilter() {\n      @Override\n      public boolean contains(int id) {\n        return idSet.get(id);\n      }\n    };\n  }","id":96098,"modified_method":"public static IdFilter getFilter(Project project, boolean includeNonProjectItems) {\n    long started = System.currentTimeMillis();\n    final BitSet idSet = new BitSet();\n\n    ContentIterator iterator = new ContentIterator() {\n      @Override\n      public boolean processFile(VirtualFile fileOrDir) {\n        idSet.set(\n          ((VirtualFileWithId)fileOrDir).getId()\n        );\n        return true;\n      }\n    };\n\n    if (!includeNonProjectItems) {\n      ProjectRootManager.getInstance(project).getFileIndex().iterateContent(iterator);\n    } else {\n      FileBasedIndex.getInstance().iterateIndexableFiles(iterator, project, null);\n    }\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"Done filter \" + (System.currentTimeMillis()  -started) + \":\" + idSet.size());\n    }\n    return new IdFilter() {\n      @Override\n      public boolean contains(int id) {\n        return idSet.get(id);\n      }\n    };\n  }","commit_id":"2bb8b9c046c1ea279eb3d51227d2451c6e5c1d86","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  @NotNull\n  public String[] getNames(Project project, boolean includeNonProjectItems) {\n    if (FileBasedIndex.ourEnableTracingOfKeyHashToVirtualFileMapping) {\n      final THashSet<String> names = new THashSet<String>(1000);\n      IdFilter filter = getFilter(project, includeNonProjectItems);\n      processNames(new Processor<String>() {\n        @Override\n        public boolean process(String s) {\n          names.add(s);\n          return true;\n        }\n      }, getScope(project, includeNonProjectItems), filter);\n      System.out.println(\"All names retrieved2:\" + names.size());\n      return ArrayUtil.toStringArray(names);\n    } else {\n      return FilenameIndex.getAllFilenames(project);\n    }\n  }","id":96099,"modified_method":"@Override\n  @NotNull\n  public String[] getNames(Project project, boolean includeNonProjectItems) {\n    if (FileBasedIndex.ourEnableTracingOfKeyHashToVirtualFileMapping) {\n      final THashSet<String> names = new THashSet<String>(1000);\n      IdFilter filter = getFilter(project, includeNonProjectItems);\n      processNames(new Processor<String>() {\n        @Override\n        public boolean process(String s) {\n          names.add(s);\n          return true;\n        }\n      }, getScope(project, includeNonProjectItems), filter);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"All names retrieved2:\" + names.size());\n      }\n      return ArrayUtil.toStringArray(names);\n    } else {\n      return FilenameIndex.getAllFilenames(project);\n    }\n  }","commit_id":"2bb8b9c046c1ea279eb3d51227d2451c6e5c1d86","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean addLessonsLaunch(SimplePageItem thePage, String sakaiId, String nameStr, int startPos) \n\t{\n            System.out.println(\"Adding LTI content item \"+sakaiId);\n\t\t\tLong pageNum = Long.valueOf(thePage.getSakaiId());\n            System.out.println(\"Page =\"+thePage.getSakaiId()+\" title=\"+thePage.getName());\n\n\t\t\tSimplePageItem item = simplePageToolDao.makeItem(thePage.getPageId(), startPos, SimplePageItem.BLTI, sakaiId, nameStr);\n\t\t\titem.setHeight(\"\"); // default depends upon format, so it's supplied at runtime\n\t\t\titem.setPageId(pageNum.longValue());\n\n\t\t\tList<String>elist = new ArrayList<String>();\n            simplePageToolDao.saveItem(item,  elist, \"ERROR WAS HERE\", false);\n\t\t\tSystem.out.println(\"Saved \"+elist);\n\t\t\treturn true;\n\t}","id":96100,"modified_method":"public static boolean addLessonsLaunch(SimplePageItem thePage, String sakaiId, String nameStr, int startPos) \n\t{\n            M_log.debug(\"Adding LTI content item \"+sakaiId);\n\t\t\tLong pageNum = Long.valueOf(thePage.getSakaiId());\n            M_log.debug(\"Page =\"+thePage.getSakaiId()+\" title=\"+thePage.getName());\n\n\t\t\tSimplePageItem item = simplePageToolDao.makeItem(thePage.getPageId(), startPos, SimplePageItem.BLTI, sakaiId, nameStr);\n\t\t\titem.setHeight(\"\"); // default depends upon format, so it's supplied at runtime\n\t\t\titem.setPageId(pageNum.longValue());\n\n\t\t\tList<String>elist = new ArrayList<String>();\n            simplePageToolDao.saveItem(item,  elist, \"ERROR WAS HERE\", false);\n\t\t\tM_log.debug(\"Saved \"+elist);\n\t\t\treturn true;\n\t}","commit_id":"aaf0bf5f8919cc01e333c9d9dd7204c948a94263","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public static String doImportTool(String siteId, String launchUrl, String bltiTitle, String strXml, String custom)\n    {\n\t\tif ( ltiService == null ) return null;\n\n\t\tString toolUrl = launchUrl;\n\t\tint pos = toolUrl.indexOf(\"?\");\n\t\tif ( pos > 0 ) {\n\t\t\ttoolUrl = toolUrl.substring(0, pos);\n\t\t}\n\n\t\tString toolName = toolUrl;\n\t\ttry {\n\t\t\tURL launch = new URL(launchUrl);\n\t\t\ttoolName = launch.getProtocol() + \"://\" + launch.getAuthority();\n\t\t} catch ( Exception e ) {\n\t\t\ttoolName = toolUrl;\n\t\t}\n\n\t\tMap<String,Object> theTool = null;\n\t\tList<Map<String,Object>> tools = ltiService.getToolsDao(null,null,0,0,siteId);\n\t\tfor ( Map<String,Object> tool : tools ) {\n\t\t\tString toolLaunch = (String) tool.get(LTIService.LTI_LAUNCH);\n\t\t\tif ( launchUrl.startsWith(toolUrl) ) {\n\t\t\t\ttheTool = tool;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ( theTool == null ) {\n\t\t\tProperties props = new Properties ();\n\t\t\tprops.setProperty(LTIService.LTI_LAUNCH,launchUrl);\n\t\t\tprops.setProperty(LTIService.LTI_TITLE, toolName);\n\t\t\tprops.setProperty(LTIService.LTI_CONSUMERKEY, LTIService.LTI_SECRET_INCOMPLETE);\n\t\t\tprops.setProperty(LTIService.LTI_SECRET, LTIService.LTI_SECRET_INCOMPLETE);\n\n\t\t\tprops.setProperty(LTIService.LTI_ALLOWCUSTOM, \"1\");\n\t\t\tprops.setProperty(LTIService.LTI_SENDNAME, \"1\");\n\t\t\tprops.setProperty(LTIService.LTI_SENDEMAILADDR, \"1\");\n\t\t\tprops.setProperty(LTIService.LTI_ALLOWOUTCOMES, \"1\");\n\t\t\tprops.setProperty(LTIService.LTI_ALLOWROSTER, \"1\");\n\n\t\t\tprops.setProperty(LTIService.LTI_SITE_ID,siteId);\n\n\t\t\tObject result = ltiService.insertToolDao(props, siteId);\n\t\t\tif ( result instanceof String ) {\n\t\t\t\tM_log.error(\"Could not insert tool - \"+result);\n\t\t\t}\n\t\t\tif ( result instanceof Long ) theTool = ltiService.getToolDao((Long) result, siteId);\n\t\t}\n\t\n\t\tMap<String,Object> theContent = null;\n\t\tLong contentKey = null;\n\t\tif ( theTool != null ) {\n\t\t\tProperties props = new Properties ();\n\t\t\tprops.setProperty(LTIService.LTI_TOOL_ID,foorm.getLong(theTool.get(LTIService.LTI_ID)).toString());\n            props.setProperty(LTIService.LTI_PLACEMENTSECRET, UUID.randomUUID().toString());\n\t\t\tprops.setProperty(LTIService.LTI_TITLE, bltiTitle);\n\t\t\tprops.setProperty(LTIService.LTI_LAUNCH,launchUrl);\n\t\t\tif ( strXml != null) props.setProperty(LTIService.LTI_XMLIMPORT,strXml);\n\t\t\tif ( custom != null ) props.setProperty(LTIService.LTI_CUSTOM,custom);\n\t\t\tObject result = ltiService.insertContentDao(props, siteId);\n\t\t\tif ( result instanceof String ) {\n\t\t\t\tM_log.error(\"Could not insert content - \"+result);\n\t\t\t} else {\n\t\t\t\tSystem.out.println(\"Adding LTI tool \"+result);\n\t\t\t}\n\t\t\tif ( result instanceof Long ) theContent = ltiService.getContentDao((Long) result, siteId);\n\t\t}\n\t\n\t\tString sakaiId = null;\n\t\tif ( theContent != null ) {\n\t\t\tsakaiId = \"/blti/\" + theContent.get(LTIService.LTI_ID);\n\t\t}\n\t\treturn sakaiId;\n\t}","id":96101,"modified_method":"public static String doImportTool(String siteId, String launchUrl, String bltiTitle, String strXml, String custom)\n    {\n\t\tif ( ltiService == null ) return null;\n\n\t\tString toolUrl = launchUrl;\n\t\tint pos = toolUrl.indexOf(\"?\");\n\t\tif ( pos > 0 ) {\n\t\t\ttoolUrl = toolUrl.substring(0, pos);\n\t\t}\n\n\t\tString toolName = toolUrl;\n\t\ttry {\n\t\t\tURL launch = new URL(launchUrl);\n\t\t\ttoolName = launch.getProtocol() + \"://\" + launch.getAuthority();\n\t\t} catch ( Exception e ) {\n\t\t\ttoolName = toolUrl;\n\t\t}\n\n\t\tMap<String,Object> theTool = null;\n\t\tList<Map<String,Object>> tools = ltiService.getToolsDao(null,null,0,0,siteId);\n        String lastLaunch = \"\";\n\t\tfor ( Map<String,Object> tool : tools ) {\n\t\t\tString toolLaunch = (String) tool.get(LTIService.LTI_LAUNCH);\n\t\t\tif ( toolUrl.startsWith(toolLaunch) && toolLaunch.length() > lastLaunch.length()) {\n\t\t\t\ttheTool = tool;\n                lastLaunch = toolLaunch;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ( theTool == null ) {\n            M_log.debug(\"Inserting tool - \"+toolUrl);\n\t\t\tProperties props = new Properties ();\n\t\t\tprops.setProperty(LTIService.LTI_LAUNCH,toolUrl);\n\t\t\tprops.setProperty(LTIService.LTI_TITLE, toolName);\n\t\t\tprops.setProperty(LTIService.LTI_PAGETITLE, toolName);\n\t\t\tprops.setProperty(LTIService.LTI_CONSUMERKEY, LTIService.LTI_SECRET_INCOMPLETE);\n\t\t\tprops.setProperty(LTIService.LTI_SECRET, LTIService.LTI_SECRET_INCOMPLETE);\n\n\t\t\tprops.setProperty(LTIService.LTI_ALLOWCUSTOM, \"1\");\n\t\t\tprops.setProperty(LTIService.LTI_SENDNAME, \"1\");\n\t\t\tprops.setProperty(LTIService.LTI_SENDEMAILADDR, \"1\");\n\t\t\tprops.setProperty(LTIService.LTI_ALLOWOUTCOMES, \"1\");\n\t\t\tprops.setProperty(LTIService.LTI_ALLOWROSTER, \"1\");\n\n\t\t\tprops.setProperty(LTIService.LTI_SITE_ID,siteId);\n\n            // Go ahead and throw up...\n            Object result = ltiService.insertToolDao(props, siteId);\n\n\t\t\tif ( result instanceof String ) {\n\t\t\t\tM_log.error(\"Could not insert tool - \"+result);\n\t\t\t}\n\t\t\tif ( result instanceof Long ) theTool = ltiService.getToolDao((Long) result, siteId);\n\t\t}\n\t\n\t\tMap<String,Object> theContent = null;\n\t\tLong contentKey = null;\n\t\tif ( theTool != null ) {\n\t\t\tProperties props = new Properties ();\n\t\t\tprops.setProperty(LTIService.LTI_TOOL_ID,foorm.getLong(theTool.get(LTIService.LTI_ID)).toString());\n            props.setProperty(LTIService.LTI_PLACEMENTSECRET, UUID.randomUUID().toString());\n\t\t\tprops.setProperty(LTIService.LTI_TITLE, bltiTitle);\n\t\t\tprops.setProperty(LTIService.LTI_PAGETITLE, bltiTitle);\n\t\t\tprops.setProperty(LTIService.LTI_LAUNCH,launchUrl);\n\t\t\tif ( strXml != null) props.setProperty(LTIService.LTI_XMLIMPORT,strXml);\n\t\t\tif ( custom != null ) props.setProperty(LTIService.LTI_CUSTOM,custom);\n\n            // Throw upwards..\n            Object result = ltiService.insertContentDao(props, siteId);\n\t\t\tif ( result instanceof String ) {\n\t\t\t\tM_log.error(\"Could not insert content - \"+result);\n\t\t\t} else {\n\t\t\t\tM_log.debug(\"Adding LTI tool \"+result);\n\t\t\t}\n\t\t\tif ( result instanceof Long ) theContent = ltiService.getContentDao((Long) result, siteId);\n\t\t}\n\t\n\t\tString sakaiId = null;\n\t\tif ( theContent != null ) {\n\t\t\tsakaiId = \"/blti/\" + theContent.get(LTIService.LTI_ID);\n\t\t}\n\t\treturn sakaiId;\n\t}","commit_id":"aaf0bf5f8919cc01e333c9d9dd7204c948a94263","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public static String getCorrectProperty(Properties config,\n\t\t\tString propName, Placement placement)\n\t{\n\t\t// Check for global overrides in properties\n\t\tString allowSettings = ServerConfigurationService.getString(BASICLTI_SETTINGS_ENABLED, null);\n\t\tif ( \"allowsettings\".equals(propName) && ! \"true\".equals(allowSettings) ) return \"false\";\n\n\t\tString allowRoster = ServerConfigurationService.getString(BASICLTI_ROSTER_ENABLED, null);\n\t\tif ( \"allowroster\".equals(propName) && ! \"true\".equals(allowRoster) ) return \"false\";\n\n\t\tString allowContentLink = ServerConfigurationService.getString(BASICLTI_CONTENTLINK_ENABLED, null);\n\t\tif ( \"contentlink\".equals(propName) && ! \"true\".equals(allowContentLink) ) return null;\n\n\t\t// Check for explicit setting in properties\n\t\tString propertyName = placement.getToolId() + \".\" + propName;\n\t\tString propValue = ServerConfigurationService.getString(propertyName,null);\n\t\tif ( propValue != null && propValue.trim().length() > 0 ) {\n\t\t\t// System.out.println(\"Sakai.home \"+propName+\"=\"+propValue);\n\t\t\treturn propValue;\n\t\t}\n\n\t\t// Take it from the placement\n\t\treturn config.getProperty(\"imsti.\"+propName, null);\n\t}","id":96102,"modified_method":"public static String getCorrectProperty(Properties config,\n\t\t\tString propName, Placement placement)\n\t{\n\t\t// Check for global overrides in properties\n\t\tString allowSettings = ServerConfigurationService.getString(BASICLTI_SETTINGS_ENABLED, null);\n\t\tif ( \"allowsettings\".equals(propName) && ! \"true\".equals(allowSettings) ) return \"false\";\n\n\t\tString allowRoster = ServerConfigurationService.getString(BASICLTI_ROSTER_ENABLED, null);\n\t\tif ( \"allowroster\".equals(propName) && ! \"true\".equals(allowRoster) ) return \"false\";\n\n\t\tString allowLori = ServerConfigurationService.getString(BASICLTI_LORI_ENABLED, null);\n\t\tif ( \"allowlori\".equals(propName) && ! \"true\".equals(allowLori) ) return \"false\";\n\n\t\tString allowContentLink = ServerConfigurationService.getString(BASICLTI_CONTENTLINK_ENABLED, null);\n\t\tif ( \"contentlink\".equals(propName) && ! \"true\".equals(allowContentLink) ) return null;\n\n\t\t// Check for explicit setting in properties\n\t\tString propertyName = placement.getToolId() + \".\" + propName;\n\t\tString propValue = ServerConfigurationService.getString(propertyName,null);\n\t\tif ( propValue != null && propValue.trim().length() > 0 ) {\n\t\t\t// System.out.println(\"Sakai.home \"+propName+\"=\"+propValue);\n\t\t\treturn propValue;\n\t\t}\n\n\t\t// Take it from the placement\n\t\treturn config.getProperty(\"imsti.\"+propName, null);\n\t}","commit_id":"aaf0bf5f8919cc01e333c9d9dd7204c948a94263","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public static String[] postLaunchHTML(Map<String, Object> content, Map<String,Object> tool, ResourceLoader rb)\n\t{\n\t\tif ( content == null ) {\n\t\t\treturn postError(\"<p>\" + getRB(rb, \"error.content.missing\" ,\"Content item is missing or improperly configured.\")+\"<\/p>\" ); \n\t\t}\n\t\tif ( tool == null ) {\n\t\t\treturn postError(\"<p>\" + getRB(rb, \"error.tool.missing\" ,\"Tool item is missing or improperly configured.\")+\"<\/p>\" ); \n\t\t}\n\n\t\tint status = getInt(tool.get(\"status\"));\n\t\tif ( status == 1 ) return postError(\"<p>\" + getRB(rb, \"tool.disabled\" ,\"Tool is currently disabled\")+\"<\/p>\" ); \n\n\t\t// Go with the content url first\n\t\tString launch_url = (String) content.get(\"launch\");\n\t\tif ( launch_url == null ) launch_url = (String) tool.get(\"launch\");\n\t\tif ( launch_url == null ) return postError(\"<p>\" + getRB(rb, \"error.nolaunch\" ,\"This tool is not yet configured.\")+\"<\/p>\" );\n\n\t\tString context = (String) content.get(\"SITE_ID\");\n\t\tSite site = null;\n\t\ttry {\n\t\t\tsite = SiteService.getSite(context);\n\t\t} catch (Exception e) {\n\t\t\tdPrint(\"No site/page associated with Launch context=\"+context);\n\t\t\treturn postError(\"<p>\" + getRB(rb, \"error.site.missing\" ,\"Cannot load site.\")+context+\"<\/p>\" ); \n\t\t}\n\n\t\t// Start building up the properties\n\t\tProperties ltiProps = new Properties();\n\t\tProperties toolProps = new Properties();\n\t\taddGlobalData(ltiProps, rb);\n\t\taddSiteInfo(ltiProps, site);\n\t\taddRoleInfo(ltiProps, context);\n\n\t\tString resource_link_id = \"content:\"+content.get(\"id\");\n\t\tsetProperty(ltiProps,BasicLTIConstants.RESOURCE_LINK_ID,resource_link_id);\n\n\t\tsetProperty(toolProps, \"launch_url\", launch_url);\n\n\t\tString secret = (String) content.get(\"secret\");\n\t\tif ( secret == null ) secret = (String) tool.get(\"secret\");\n\t\tString key = (String) content.get(\"consumerkey\");\n\t\tif ( key == null ) key = (String) tool.get(\"consumerkey\");\n\n\t\tif ( \"-----\".equals(key) && \"-----\".equals(secret) ) {\n\t\t\treturn postError(\"<p>\" + getRB(rb, \"error.tool.partial\" ,\"Tool item is incomplete, missing a key and secret.\")+\"<\/p>\" ); \n\t\t}\n\n\t\tsetProperty(toolProps, \"secret\", secret );\n\t\tsetProperty(toolProps, \"key\", key );\n\n\t\tint debug = getInt(tool.get(\"debug\"));\n\t\tif ( debug == 2 ) debug = getInt(content.get(\"debug\"));\n\t\tsetProperty(toolProps, \"debug\", debug+\"\");\n\n\t\tint frameheight = getInt(tool.get(\"frameheight\"));\n\t\tif ( frameheight == 2 ) frameheight = getInt(content.get(\"frameheight\"));\n\t\tsetProperty(toolProps, \"frameheight\", frameheight+\"\" );\n\n\t\tint newpage = getInt(tool.get(\"newpage\"));\n\t\tif ( newpage == 2 ) newpage = getInt(content.get(\"newpage\"));\n\t\tsetProperty(toolProps, \"newpage\", newpage+\"\" );\n\n\t\tString title = (String) content.get(\"title\");\n\t\tif ( title == null ) title = (String) tool.get(\"title\");\n\t\tif ( title != null ) setProperty(ltiProps,BasicLTIConstants.RESOURCE_LINK_TITLE,title);\n\n\t\t// Pull in and parse the custom parameters\n\t\tint allowCustom = getInt(tool.get(\"allowcustom\"));\n\t\tif ( allowCustom == 1 ) parseCustom(ltiProps, (String) content.get(\"custom\"));\n\n\t\t// Tool custom parameters override content parameters\n\t\tparseCustom(ltiProps, (String) tool.get(\"custom\"));\n\n\t\tint releasename = getInt(tool.get(\"sendname\"));\n\t\tint releaseemail = getInt(tool.get(\"sendemailaddr\"));\n\n\t\tUser user = UserDirectoryService.getCurrentUser();\n\t\tif ( user != null )\n\t\t{\n\t\t\tsetProperty(ltiProps,BasicLTIConstants.USER_ID,user.getId());\n\t\t\tif ( releasename == 1 ) {\n\t\t\t\tsetProperty(ltiProps,BasicLTIConstants.LIS_PERSON_NAME_GIVEN,user.getFirstName());\n\t\t\t\tsetProperty(ltiProps,BasicLTIConstants.LIS_PERSON_NAME_FAMILY,user.getLastName());\n\t\t\t\tsetProperty(ltiProps,BasicLTIConstants.LIS_PERSON_NAME_FULL,user.getDisplayName());\n\t\t\t}\n\t\t\tif ( releaseemail == 1 ) {\n\t\t\t\tsetProperty(ltiProps,BasicLTIConstants.LIS_PERSON_CONTACT_EMAIL_PRIMARY,user.getEmail());\n\t\t\t\tsetProperty(ltiProps,BasicLTIConstants.LIS_PERSON_SOURCEDID,user.getEid());\n\t\t\t}\n\t\t}\n\n\t\tint allowoutcomes = getInt(tool.get(\"allowoutcomes\"));\n\t\tint allowroster = getInt(tool.get(\"allowroster\"));\n\t\tint allowsettings = getInt(tool.get(\"allowsettings\"));\n\t\tString placement_secret = (String) content.get(\"placementsecret\");\n\n\t\tString result_sourcedid = getSourceDID(user, resource_link_id, placement_secret);\n\t\tif ( result_sourcedid != null ) {\n\n\t\t\tif ( allowoutcomes == 1 ) {\n\t\t\t\tsetProperty(ltiProps,\"lis_result_sourcedid\", result_sourcedid);  \n\n\t\t\t\t// New Basic Outcomes URL\n\t\t\t\tString outcome_url = ServerConfigurationService.getString(\"basiclti.consumer.ext_ims_lis_basic_outcome_url\",null);\n\t\t\t\tif ( outcome_url == null ) outcome_url = getOurServerUrl() + \"/imsblis/service/\";  \n\t\t\t\tsetProperty(ltiProps,\"ext_ims_lis_basic_outcome_url\", outcome_url);  \n\t\t\t\toutcome_url = ServerConfigurationService.getString(\"basiclti.consumer.\"+BasicLTIConstants.LIS_OUTCOME_SERVICE_URL,null);\n\t\t\t\tif ( outcome_url == null ) outcome_url = getOurServerUrl() + \"/imsblis/service/\";  \n\t\t\t\tsetProperty(ltiProps,BasicLTIConstants.LIS_OUTCOME_SERVICE_URL, outcome_url);  \n\t\t\t}\n\n\t\t\tif ( allowsettings == 1 ) {\n\t\t\t\tsetProperty(ltiProps,\"ext_ims_lti_tool_setting_id\", result_sourcedid);  \n\n\t\t\t\tString setting = (String) content.get(\"settings\");\n\t\t\t\tif ( setting != null ) {\n\t\t\t\t\tsetProperty(ltiProps,\"ext_ims_lti_tool_setting\", setting);  \n\t\t\t\t}\n\t\t\t\tString service_url = ServerConfigurationService.getString(\"basiclti.consumer.ext_ims_lti_tool_setting_url\",null);\n\t\t\t\tif ( service_url == null ) service_url = getOurServerUrl() + \"/imsblis/service/\";  \n\t\t\t\tsetProperty(ltiProps,\"ext_ims_lti_tool_setting_url\", service_url);  \n\t\t\t}\n\n\t\t\tif ( allowroster == 1 ) {\n\t\t\t\tsetProperty(ltiProps,\"ext_ims_lis_memberships_id\", result_sourcedid);  \n\n\t\t\t\tString roster_url = ServerConfigurationService.getString(\"basiclti.consumer.ext_ims_lis_memberships_url\",null);\n\t\t\t\tif ( roster_url == null ) roster_url = getOurServerUrl() + \"/imsblis/service/\";  \n\t\t\t\tsetProperty(ltiProps,\"ext_ims_lis_memberships_url\", roster_url);  \n\t\t\t}\n\t\t}\n\n\t\t// System.out.println(\"ltiProps=\"+ltiProps);\n\t\t// System.out.println(\"toolProps=\"+toolProps);\n\n\t\treturn postLaunchHTML(toolProps, ltiProps, rb);\n\t}","id":96103,"modified_method":"public static String[] postLaunchHTML(Map<String, Object> content, Map<String,Object> tool, ResourceLoader rb)\n\t{\n\t\tif ( content == null ) {\n\t\t\treturn postError(\"<p>\" + getRB(rb, \"error.content.missing\" ,\"Content item is missing or improperly configured.\")+\"<\/p>\" ); \n\t\t}\n\t\tif ( tool == null ) {\n\t\t\treturn postError(\"<p>\" + getRB(rb, \"error.tool.missing\" ,\"Tool item is missing or improperly configured.\")+\"<\/p>\" ); \n\t\t}\n\n\t\tint status = getInt(tool.get(\"status\"));\n\t\tif ( status == 1 ) return postError(\"<p>\" + getRB(rb, \"tool.disabled\" ,\"Tool is currently disabled\")+\"<\/p>\" ); \n\n\t\t// Go with the content url first\n\t\tString launch_url = (String) content.get(\"launch\");\n\t\tif ( launch_url == null ) launch_url = (String) tool.get(\"launch\");\n\t\tif ( launch_url == null ) return postError(\"<p>\" + getRB(rb, \"error.nolaunch\" ,\"This tool is not yet configured.\")+\"<\/p>\" );\n\n\t\tString context = (String) content.get(\"SITE_ID\");\n\t\tSite site = null;\n\t\ttry {\n\t\t\tsite = SiteService.getSite(context);\n\t\t} catch (Exception e) {\n\t\t\tdPrint(\"No site/page associated with Launch context=\"+context);\n\t\t\treturn postError(\"<p>\" + getRB(rb, \"error.site.missing\" ,\"Cannot load site.\")+context+\"<\/p>\" ); \n\t\t}\n\n\t\t// Start building up the properties\n\t\tProperties ltiProps = new Properties();\n\t\tProperties toolProps = new Properties();\n\t\taddGlobalData(ltiProps, rb);\n\t\taddSiteInfo(ltiProps, site);\n\t\taddRoleInfo(ltiProps, context);\n\n\t\tString resource_link_id = \"content:\"+content.get(\"id\");\n\t\tsetProperty(ltiProps,BasicLTIConstants.RESOURCE_LINK_ID,resource_link_id);\n\n\t\tsetProperty(toolProps, \"launch_url\", launch_url);\n\n\t\tString secret = (String) content.get(\"secret\");\n\t\tif ( secret == null ) secret = (String) tool.get(\"secret\");\n\t\tString key = (String) content.get(\"consumerkey\");\n\t\tif ( key == null ) key = (String) tool.get(\"consumerkey\");\n\n\t\tif ( \"-----\".equals(key) && \"-----\".equals(secret) ) {\n\t\t\treturn postError(\"<p>\" + getRB(rb, \"error.tool.partial\" ,\"Tool item is incomplete, missing a key and secret.\")+\"<\/p>\" ); \n\t\t}\n\n\t\tsetProperty(toolProps, \"secret\", secret );\n\t\tsetProperty(toolProps, \"key\", key );\n\n\t\tint debug = getInt(tool.get(\"debug\"));\n\t\tif ( debug == 2 ) debug = getInt(content.get(\"debug\"));\n\t\tsetProperty(toolProps, \"debug\", debug+\"\");\n\n\t\tint frameheight = getInt(tool.get(\"frameheight\"));\n\t\tif ( frameheight == 2 ) frameheight = getInt(content.get(\"frameheight\"));\n\t\tsetProperty(toolProps, \"frameheight\", frameheight+\"\" );\n\n\t\tint newpage = getInt(tool.get(\"newpage\"));\n\t\tif ( newpage == 2 ) newpage = getInt(content.get(\"newpage\"));\n\t\tsetProperty(toolProps, \"newpage\", newpage+\"\" );\n\n\t\tString title = (String) content.get(\"title\");\n\t\tif ( title == null ) title = (String) tool.get(\"title\");\n\t\tif ( title != null ) setProperty(ltiProps,BasicLTIConstants.RESOURCE_LINK_TITLE,title);\n\n\t\t// Pull in and parse the custom parameters\n\t\tint allowCustom = getInt(tool.get(\"allowcustom\"));\n\t\tif ( allowCustom == 1 ) parseCustom(ltiProps, (String) content.get(\"custom\"));\n\n\t\t// Tool custom parameters override content parameters\n\t\tparseCustom(ltiProps, (String) tool.get(\"custom\"));\n\n\t\tint releasename = getInt(tool.get(\"sendname\"));\n\t\tint releaseemail = getInt(tool.get(\"sendemailaddr\"));\n\n\t\tUser user = UserDirectoryService.getCurrentUser();\n\t\tif ( user != null )\n\t\t{\n\t\t\tsetProperty(ltiProps,BasicLTIConstants.USER_ID,user.getId());\n\t\t\tif ( releasename == 1 ) {\n\t\t\t\tsetProperty(ltiProps,BasicLTIConstants.LIS_PERSON_NAME_GIVEN,user.getFirstName());\n\t\t\t\tsetProperty(ltiProps,BasicLTIConstants.LIS_PERSON_NAME_FAMILY,user.getLastName());\n\t\t\t\tsetProperty(ltiProps,BasicLTIConstants.LIS_PERSON_NAME_FULL,user.getDisplayName());\n\t\t\t}\n\t\t\tif ( releaseemail == 1 ) {\n\t\t\t\tsetProperty(ltiProps,BasicLTIConstants.LIS_PERSON_CONTACT_EMAIL_PRIMARY,user.getEmail());\n\t\t\t\tsetProperty(ltiProps,BasicLTIConstants.LIS_PERSON_SOURCEDID,user.getEid());\n\t\t\t}\n\t\t}\n\n\t\tint allowoutcomes = getInt(tool.get(\"allowoutcomes\"));\n\t\tint allowroster = getInt(tool.get(\"allowroster\"));\n\t\tint allowsettings = getInt(tool.get(\"allowsettings\"));\n\t\tint allowlori = getInt(tool.get(\"allowlori\"));\n\t\tString placement_secret = (String) content.get(\"placementsecret\");\n\n\t\tString result_sourcedid = getSourceDID(user, resource_link_id, placement_secret);\n\t\tif ( result_sourcedid != null ) {\n\n\t\t\tif ( allowoutcomes == 1 ) {\n\t\t\t\tsetProperty(ltiProps,\"lis_result_sourcedid\", result_sourcedid);  \n\n\t\t\t\t// New Basic Outcomes URL\n\t\t\t\tString outcome_url = ServerConfigurationService.getString(\"basiclti.consumer.ext_ims_lis_basic_outcome_url\",null);\n\t\t\t\tif ( outcome_url == null ) outcome_url = getOurServerUrl() + \"/imsblis/service/\";  \n\t\t\t\tsetProperty(ltiProps,\"ext_ims_lis_basic_outcome_url\", outcome_url);  \n\t\t\t\toutcome_url = ServerConfigurationService.getString(\"basiclti.consumer.\"+BasicLTIConstants.LIS_OUTCOME_SERVICE_URL,null);\n\t\t\t\tif ( outcome_url == null ) outcome_url = getOurServerUrl() + \"/imsblis/service/\";  \n\t\t\t\tsetProperty(ltiProps,BasicLTIConstants.LIS_OUTCOME_SERVICE_URL, outcome_url);  \n\t\t\t}\n\n\t\t\tif ( allowsettings == 1 ) {\n\t\t\t\tsetProperty(ltiProps,\"ext_ims_lti_tool_setting_id\", result_sourcedid);  \n\n\t\t\t\tString setting = (String) content.get(\"settings\");\n\t\t\t\tif ( setting != null ) {\n\t\t\t\t\tsetProperty(ltiProps,\"ext_ims_lti_tool_setting\", setting);  \n\t\t\t\t}\n\t\t\t\tString service_url = ServerConfigurationService.getString(\"basiclti.consumer.ext_ims_lti_tool_setting_url\",null);\n\t\t\t\tif ( service_url == null ) service_url = getOurServerUrl() + \"/imsblis/service/\";  \n\t\t\t\tsetProperty(ltiProps,\"ext_ims_lti_tool_setting_url\", service_url);  \n\t\t\t}\n\n\t\t\tif ( allowroster == 1 ) {\n\t\t\t\tsetProperty(ltiProps,\"ext_ims_lis_memberships_id\", result_sourcedid);  \n\n\t\t\t\tString roster_url = ServerConfigurationService.getString(\"basiclti.consumer.ext_ims_lis_memberships_url\",null);\n\t\t\t\tif ( roster_url == null ) roster_url = getOurServerUrl() + \"/imsblis/service/\";  \n\t\t\t\tsetProperty(ltiProps,\"ext_ims_lis_memberships_url\", roster_url);  \n\t\t\t}\n\n\t\t\tif ( allowlori == 1 ) {\n\t\t\t\tsetProperty(ltiProps,\"ext_lori_api_token\", result_sourcedid);  \n\t\t\t\tsetProperty(ltiProps,\"lis_result_sourcedid\", result_sourcedid);  \n\t\t\t\tString lori_url = ServerConfigurationService.getString(\"basiclti.consumer.ext_lori_api_url\",null);\n\t\t\t\tif ( lori_url == null ) lori_url = getOurServerUrl() + \"/imsblis/service/\";  \n\t\t\t\tString lori_url_xml = ServerConfigurationService.getString(\"basiclti.consumer.ext_lori_api_url_xml\",null);\n\t\t\t\tif ( lori_url_xml == null ) lori_url_xml = getOurServerUrl() + \"/imsblis/service/\";  \n\t\t\t\tsetProperty(ltiProps,\"ext_lori_api_url\", lori_url);  \n\t\t\t\tsetProperty(ltiProps,\"ext_lori_api_url_xml\", lori_url_xml);  \n\t\t\t}\n\t\t}\n\n\t\t// System.out.println(\"ltiProps=\"+ltiProps);\n\t\t// System.out.println(\"toolProps=\"+toolProps);\n\n\t\treturn postLaunchHTML(toolProps, ltiProps, rb);\n\t}","commit_id":"aaf0bf5f8919cc01e333c9d9dd7204c948a94263","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void recursivelyAddResourcesXML(String siteId, SimplePageItem thePage, NodeList nl, \n        int startPos, List<Map<String,String>> resultList)\n\t{\n\t\tfor(int i=0, cnt=nl.getLength(); i<cnt; i++)\n\t\t{\n\t\t\tNode node = nl.item(i);\n\t\t\tif ( node.getNodeType() != Node.ELEMENT_NODE ) continue;\n\t\t\tSystem.out.println(\"Node=\"+node.getNodeName());\n\n\t\t\tif ( ! \"resource\".equals(node.getNodeName()) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tString typeStr = null;\n\t\t\ttry {\n\t\t\t\ttypeStr = (String) LESSONS_TYPE_EXPR.evaluate(node);\n\t\t\t} catch (Exception e) {\n\t\t\t\ttypeStr = null;\n\t\t\t}\n\t\t\tString titleStr = null;\n\t\t\ttry {\n\t\t\t\ttitleStr = (String) LESSONS_TITLE_EXPR.evaluate(node);\n\t\t\t} catch (Exception e) {\n\t\t\t\ttitleStr = null;\n\t\t\t}\n\t\t\tString tempId = null;\n\t\t\ttry {\n\t\t\t\ttempId = (String) LESSONS_TEMPID_EXPR.evaluate(node);\n\t\t\t} catch (Exception e) {\n\t\t\t\ttempId = null;\n\t\t\t}\n\t\t\t\n\t\t\tif ( \"folder\".equals(typeStr) ) {\n\t\t\t\tSimplePageItem subPageItem = LessonsFacade.addLessonsFolder(thePage, titleStr, startPos);\n                if ( tempId != null ) {\n                    Map<String,String> result = new TreeMap<String,String> ();\n                    result.put(\"/tempId\",tempId);\n                    result.put(\"/id\", subPageItem.getSakaiId());\n                    resultList.add(result);\n                }\n\t\t\t\tstartPos++;\n\t\t\t\tNodeList childNodes = null;\n\t\t\t\ttry {\n\t\t\t\t\tObject result = LESSONS_FOLDER_EXPR.evaluate(node, XPathConstants.NODESET);\n\t\t\t\t\tchildNodes = (NodeList) result;\n\t\t\t\t\tSystem.out.println(\"children of the folder = \"+result+\" count=\"+childNodes.getLength());\n\t\t\t\t} catch(Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tnl = null;\n\t\t\t\t}\n\n\t\t\t\tSystem.out.println(\"===== DOWN THE RABIT HOLE ==========\");\n\t\t\t\trecursivelyAddResourcesXML(siteId, subPageItem, childNodes, 1, resultList);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( ! \"lti\".equals(typeStr) ) {\n\t\t\t\tM_log.warn(\"No support for type:\"+typeStr);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tString launchUrl = null;\n\t\t\ttry {\n\t\t\t\tlaunchUrl = (String) LESSONS_URL_EXPR.evaluate(node);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlaunchUrl = null;\n\t\t\t}\n\t\t\tString launchParams = null;\n\t\t\ttry {\n\t\t\t\tlaunchParams = (String) LESSONS_CUSTOM_EXPR.evaluate(node);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlaunchParams = null;\n\t\t\t}\n\n\t\t\tif ( titleStr == null || launchUrl == null || launchParams == null ) {\n\t\t\t\tM_log.warn(\"Missing required value type, name, url, launch, parms\");\n\t\t\t\tcontinue;\n\t\t\t}\n\nSystem.out.println(\"type=\"+typeStr+\" name=\"+titleStr+\" launchUrl=\"+launchUrl+\" lanchParams=\"+launchParams);\n\n\t\t\t// Time to add the launch tool\n\t\t\tString sakaiId = LessonsFacade.doImportTool(siteId, launchUrl, titleStr, null, launchParams);\n\n\t\t\tif ( sakaiId == null ) {\n\t\t\t\tM_log.warn(\"Unable to add LTI Placement \"+titleStr);\n\t\t\t\tcontinue;\n\t\t\t}\n\n            if ( tempId != null ) {\n                Map<String,String> result = new TreeMap<String,String> ();\n                result.put(\"/tempId\",tempId);\n                result.put(\"/id\", sakaiId);\n                resultList.add(result);\n            }\n\t\t\tLessonsFacade.addLessonsLaunch(thePage, sakaiId, titleStr, startPos);\n\t\t}\n\t}","id":96104,"modified_method":"protected void recursivelyAddResourcesXML(String siteId, SimplePageItem thePage, NodeList nl, \n        int startPos, List<Map<String,String>> resultList)\n\t{\n\t\tfor(int i=0, cnt=nl.getLength(); i<cnt; i++)\n\t\t{\n\t\t\tNode node = nl.item(i);\n\t\t\tif ( node.getNodeType() != Node.ELEMENT_NODE ) continue;\n\t\t\tM_log.debug(\"Node=\"+node.getNodeName());\n\n\t\t\tif ( ! \"resource\".equals(node.getNodeName()) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tString typeStr = null;\n\t\t\ttry {\n\t\t\t\ttypeStr = (String) LESSONS_TYPE_EXPR.evaluate(node);\n\t\t\t} catch (Exception e) {\n\t\t\t\ttypeStr = null;\n\t\t\t}\n\t\t\tString titleStr = null;\n\t\t\ttry {\n\t\t\t\ttitleStr = (String) LESSONS_TITLE_EXPR.evaluate(node);\n\t\t\t} catch (Exception e) {\n\t\t\t\ttitleStr = null;\n\t\t\t}\n\t\t\tString tempId = null;\n\t\t\ttry {\n\t\t\t\ttempId = (String) LESSONS_TEMPID_EXPR.evaluate(node);\n\t\t\t} catch (Exception e) {\n\t\t\t\ttempId = null;\n\t\t\t}\n\t\t\t\n\t\t\tif ( \"folder\".equals(typeStr) ) {\n\t\t\t\tSimplePageItem subPageItem = LessonsFacade.addLessonsFolder(thePage, titleStr, startPos);\n                if ( tempId != null ) {\n                    Map<String,String> result = new TreeMap<String,String> ();\n                    result.put(\"/tempId\",tempId);\n                    result.put(\"/id\", subPageItem.getSakaiId());\n                    resultList.add(result);\n                }\n\t\t\t\tstartPos++;\n\t\t\t\tNodeList childNodes = null;\n\t\t\t\ttry {\n\t\t\t\t\tObject result = LESSONS_FOLDER_EXPR.evaluate(node, XPathConstants.NODESET);\n\t\t\t\t\tchildNodes = (NodeList) result;\n\t\t\t\t\tM_log.debug(\"children of the folder = \"+result+\" count=\"+childNodes.getLength());\n\t\t\t\t} catch(Exception e) {\n\t\t\t\t\te.printStackTrace();\n\t\t\t\t\tnl = null;\n\t\t\t\t}\n\n\t\t\t\tM_log.debug(\"===== DOWN THE RABIT HOLE ==========\");\n\t\t\t\trecursivelyAddResourcesXML(siteId, subPageItem, childNodes, 1, resultList);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( ! \"lti\".equals(typeStr) ) {\n\t\t\t\tM_log.warn(\"No support for type:\"+typeStr);\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tString launchUrl = null;\n\t\t\ttry {\n\t\t\t\tlaunchUrl = (String) LESSONS_URL_EXPR.evaluate(node);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlaunchUrl = null;\n\t\t\t}\n\t\t\tString launchParams = null;\n\t\t\ttry {\n\t\t\t\tlaunchParams = (String) LESSONS_CUSTOM_EXPR.evaluate(node);\n\t\t\t} catch (Exception e) {\n\t\t\t\tlaunchParams = null;\n\t\t\t}\n\n\t\t\tif ( titleStr == null || launchUrl == null || launchParams == null ) {\n\t\t\t\tM_log.warn(\"Missing required value type, name, url, launch, parms\");\n\t\t\t\tcontinue;\n\t\t\t}\n\n            M_log.debug(\"type=\"+typeStr+\" name=\"+titleStr+\" launchUrl=\"+launchUrl+\" lanchParams=\"+launchParams);\n\n            Map<String,String> result = new TreeMap<String,String> ();\n            result.put(\"/tempId\",tempId);\n\n\t\t\t// Time to add the launch tool\n\t\t\tString sakaiId = null;\n            try {\n\t\t\t    sakaiId = LessonsFacade.doImportTool(siteId, launchUrl, titleStr, null, launchParams);\n                if ( sakaiId == null ) {\n                    result.put(\"/status\", \"failure\");\n                    result.put(\"/description\",\"doImportTool failed\");\n\t\t\t\t    M_log.warn(\"Unable to add LTI Placement \"+titleStr);\n                } else {\n                    result.put(\"/status\", \"success\");\n                    result.put(\"/description\",\"doImportTool success\");\n                    result.put(\"/id\", sakaiId);\n                }\n            } catch (Exception e) {\n                sakaiId = null;\n                e.printStackTrace();\n                result.put(\"/status\", \"failure\");\n                result.put(\"/description\", e.getMessage());\n            }\n            resultList.add(result);\n\n\t\t\tif ( sakaiId == null ) continue;\n\n\t\t\tLessonsFacade.addLessonsLaunch(thePage, sakaiId, titleStr, startPos);\n\t\t}\n\t}","commit_id":"aaf0bf5f8919cc01e333c9d9dd7204c948a94263","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@SuppressWarnings(\"unchecked\")\n\tprotected void doPostXml(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException \n\t{\n\n\t\t\tString ipAddress = request.getRemoteAddr();\n\n\t\t\tM_log.debug(\"LTI POX Service request from IP=\" + ipAddress);\n\n\t\t\tString allowOutcomes = ServerConfigurationService.getString(\n\t\t\t\t\tSakaiBLTIUtil.BASICLTI_OUTCOMES_ENABLED, null);\n\t\t\tif ( ! \"true\".equals(allowOutcomes) ) allowOutcomes = null;\n\n\t\t\tString allowLori = ServerConfigurationService.getString(\n\t\t\t\t\tSakaiBLTIUtil.BASICLTI_LORI_ENABLED, null);\n\t\t\tif ( ! \"true\".equals(allowLori) ) allowLori = null;\n\n\t\t\tif (allowOutcomes == null && allowLori == null ) {\n\t\t\t\tM_log.warn(\"LTI Services are disabled IP=\" + ipAddress);\n\t\t\t\tresponse.setStatus(HttpServletResponse.SC_FORBIDDEN);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tIMSPOXRequest pox = new IMSPOXRequest(request);\n\t\t\tif ( ! pox.valid ) {\n\t\t\t\tdoErrorXML(request, response, pox, \"pox.invalid\", pox.errorMessage, null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//check lti_message_type\n\t\t\tString lti_message_type = pox.getOperation();\n\n\t\t\tString sourcedid = null;\n\t\t\tString message_type = null;\n\t\t\tSystem.out.println(\"POST\\n\"+XMLMap.prettyPrint(pox.postBody));\n\t\t\tMap<String,String> bodyMap = pox.getBodyMap();\nSystem.out.println(\"MESSAGE=\"+lti_message_type);\n\t\t\tif ( ( \"replaceResultRequest\".equals(lti_message_type) || \"readResultRequest\".equals(lti_message_type) ||\n                   \"deleteResultRequest\".equals(lti_message_type) )  && allowOutcomes != null ) {\n\t\t\t\tsourcedid = bodyMap.get(\"/resultRecord/sourcedGUID/sourcedId\");\n\t\t\t\tmessage_type = \"basicoutcome\";\n\t\t\t} else if ( \"getCourseStructureRequest\".equals(lti_message_type) ) {\n                sourcedid = bodyMap.get(\"/params/sourcedGUID/sourcedId\");\n\t\t\t\tmessage_type = \"getstructure\";\n\t\t\t} else if ( \"addCourseResourcesRequest\".equals(lti_message_type) ) {\n                sourcedid = bodyMap.get(\"/params/sourcedGUID/sourcedId\");\n\t\t\t\tmessage_type = \"addstructure\";\n\t\t\t} else {\n\t\t\t\tString output = pox.getResponseUnsupported(\"Not supported \"+lti_message_type);\n\t\t\t\tresponse.setContentType(\"application/xml\");\n\t\t\t\tPrintWriter out = response.getWriter();\n\t\t\t\tout.println(output);\n\t\t\t\treturn;\n\t\t\t}\n\nSystem.out.println(\"sourcedid=\"+sourcedid);\n\n\t\t\t// No point continuing without a sourcedid\n\t\t\tif(BasicLTIUtil.isBlank(sourcedid)) {\n\t\t\t\tdoErrorXML(request, response, pox, \"outcomes.missing\", \"sourcedid\", null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Truncate this to the maximum length to insure no cruft at the end\n\t\t\tif ( sourcedid.length() > 2048) sourcedid = sourcedid.substring(0,2048);\n\n\t\t\t// Attempt to parse the sourcedid, any failure is fatal\n\t\t\tString placement_id = null;\n\t\t\tString signature = null;\n\t\t\tString user_id = null;\n\t\t\ttry {\n\t\t\t\tint pos = sourcedid.indexOf(\":::\");\n\t\t\t\tif ( pos > 0 ) {\n\t\t\t\t\tsignature = sourcedid.substring(0, pos);\n\t\t\t\t\tString dec2 = sourcedid.substring(pos+3);\n\t\t\t\t\tpos = dec2.indexOf(\":::\");\n\t\t\t\t\tuser_id = dec2.substring(0,pos);\n\t\t\t\t\tplacement_id = dec2.substring(pos+3);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\t// Log some detail for ourselves\n\t\t\t\tM_log.warn(\"Unable to decrypt result_sourcedid IP=\" + ipAddress + \" Error=\" + e.getMessage(),e);\n\t\t\t\tsignature = null;\n\t\t\t\tplacement_id = null;\n\t\t\t\tuser_id = null;\n\t\t\t}\n\n\t\t\t// Send a more generic message back to the caller\n\t\t\tif ( placement_id == null || user_id == null ) {\n\t\t\t\tdoErrorXML(request, response, pox, \"outcomes.sourcedid\", \"sourcedid\", null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tM_log.debug(\"signature=\"+signature);\n\t\t\tM_log.debug(\"user_id=\"+user_id);\n\t\t\tM_log.debug(\"placement_id=\"+placement_id);\n\n\t\t\tProperties pitch = getPropertiesFromPlacement(placement_id);\n\t\t\tif ( pitch == null ) {\n\t\t\t\tM_log.debug(\"Error retrieving result_sourcedid information\");\n\t\t\t\tdoError(request, response, null, \"outcomes.sourcedid\", \"sourcedid\", null);\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tString siteId = pitch.getProperty(LTIService.LTI_SITE_ID);\n\t\t\tSite site = null;\n\t\t\ttry { \n\t\t\t\tsite = SiteService.getSite(siteId);\n\t\t\t} catch (Exception e) {\n\t\t\t\tM_log.debug(\"Error retrieving result_sourcedid site: \"+e.getLocalizedMessage(), e);\n\t\t\t}\n\n\t\t\t// Send a more generic message back to the caller\n\t\t\tif (  site == null ) {\n\t\t\t\tdoError(request, response, null, \"outcomes.sourcedid\", \"sourcedid\", null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check the message signature using OAuth\n\t\t\tString oauth_consumer_key = pox.getOAuthConsumerKey();\n\t\t\tString oauth_secret = pitch.getProperty(LTIService.LTI_SECRET);\n\n\t\t\tpox.validateRequest(oauth_consumer_key, oauth_secret, request);\n\t\t\tif ( ! pox.valid ) {\n\t\t\t\tif (pox.base_string != null) {\n\t\t\t\t\tM_log.warn(pox.base_string);\n\t\t\t\t}\n\t\t\t\tdoErrorXML(request, response, pox, \"outcome.no.validate\", oauth_consumer_key, null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check the signature of the sourcedid to make sure it was not altered\n\t\t\tString placement_secret  = pitch.getProperty(LTIService.LTI_PLACEMENTSECRET);\n\n\t\t\t// Send a generic message back to the caller\n\t\t\tif ( placement_secret ==null ) {\n\t\t\t\tdoErrorXML(request, response, pox, \"outcomes.sourcedid\", \"sourcedid\", null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tString pre_hash = placement_secret + \":::\" + user_id + \":::\" + placement_id;\n\t\t\tString received_signature = ShaUtil.sha256Hash(pre_hash);\n\t\t\tM_log.debug(\"Received signature=\"+signature+\" received=\"+received_signature);\n\t\t\tboolean matched = signature.equals(received_signature);\n\n\t\t\tString old_placement_secret  = pitch.getProperty(LTIService.LTI_OLDPLACEMENTSECRET);\n\t\t\tif ( old_placement_secret != null && ! matched ) {\n\t\t\t\tpre_hash = placement_secret + \":::\" + user_id + \":::\" + placement_id;\n\t\t\t\treceived_signature = ShaUtil.sha256Hash(pre_hash);\n\t\t\t\tM_log.debug(\"Received signature II=\"+signature+\" received=\"+received_signature);\n\t\t\t\tmatched = signature.equals(received_signature);\n\t\t\t}\n\n\t\t\t// Send a message back to the caller\n\t\t\tif ( ! matched ) {\n\t\t\t\tdoErrorXML(request, response, pox, \"outcomes.sourcedid\", \"sourcedid\", null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tString placementLori = pitch.getProperty(\"allowlori\");\n\n\t\t\tif ( allowOutcomes != null && \"basicoutcome\".equals(message_type) ) {\n\t\t\t\tprocessOutcomeXml(request, response, lti_message_type, site, siteId, pitch, user_id, pox);\n\t\t\t} else if ( allowLori != null && \"on\".equals(placementLori) && \"getstructure\".equals(message_type) ) {\n\t\t\t\tprocessCourseStructureXml(request, response, lti_message_type, siteId, pox);\n\t\t\t} else if ( allowLori != null && \"on\".equals(placementLori) && \"addstructure\".equals(message_type) ) {\n\t\t\t\tprocessAddResourceXML(request, response, lti_message_type, siteId, pox);\n\t\t\t} else {\n\t\t\t\tresponse.setContentType(\"application/xml\");\n\t\t\t\tPrintWriter writer = response.getWriter();\n\t\t\t\tString desc = \"Message received and validated operation=\"+pox.getOperation();\n\t\t\t\tString output = pox.getResponseUnsupported(desc);\n\t\t\t\twriter.println(output);\n\t\t\t}\n\t\t}","id":96105,"modified_method":"@SuppressWarnings(\"unchecked\")\n\tprotected void doPostXml(HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException \n\t{\n\n\t\t\tString ipAddress = request.getRemoteAddr();\n\n\t\t\tM_log.debug(\"LTI POX Service request from IP=\" + ipAddress);\n\n\t\t\tString allowOutcomes = ServerConfigurationService.getString(\n\t\t\t\t\tSakaiBLTIUtil.BASICLTI_OUTCOMES_ENABLED, null);\n\t\t\tif ( ! \"true\".equals(allowOutcomes) ) allowOutcomes = null;\n\n\t\t\tString allowLori = ServerConfigurationService.getString(\n\t\t\t\t\tSakaiBLTIUtil.BASICLTI_LORI_ENABLED, null);\n\t\t\tif ( ! \"true\".equals(allowLori) ) allowLori = null;\n\n\t\t\tif (allowOutcomes == null && allowLori == null ) {\n\t\t\t\tM_log.warn(\"LTI Services are disabled IP=\" + ipAddress);\n\t\t\t\tresponse.setStatus(HttpServletResponse.SC_FORBIDDEN);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tIMSPOXRequest pox = new IMSPOXRequest(request);\n\t\t\tif ( ! pox.valid ) {\n\t\t\t\tdoErrorXML(request, response, pox, \"pox.invalid\", pox.errorMessage, null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t//check lti_message_type\n\t\t\tString lti_message_type = pox.getOperation();\n\n\t\t\tString sourcedid = null;\n\t\t\tString message_type = null;\n            if ( M_log.isDebugEnabled() ) M_log.debug(\"POST\\n\"+XMLMap.prettyPrint(pox.postBody));\n\t\t\tMap<String,String> bodyMap = pox.getBodyMap();\n\t\t\tif ( ( \"replaceResultRequest\".equals(lti_message_type) || \"readResultRequest\".equals(lti_message_type) ||\n                   \"deleteResultRequest\".equals(lti_message_type) )  && allowOutcomes != null ) {\n\t\t\t\tsourcedid = bodyMap.get(\"/resultRecord/sourcedGUID/sourcedId\");\n\t\t\t\tmessage_type = \"basicoutcome\";\n\t\t\t} else if ( \"getCourseStructureRequest\".equals(lti_message_type) ) {\n                sourcedid = bodyMap.get(\"/params/sourcedGUID/sourcedId\");\n\t\t\t\tmessage_type = \"getstructure\";\n\t\t\t} else if ( \"addCourseResourcesRequest\".equals(lti_message_type) ) {\n                sourcedid = bodyMap.get(\"/params/sourcedGUID/sourcedId\");\n\t\t\t\tmessage_type = \"addstructure\";\n\t\t\t} else {\n\t\t\t\tString output = pox.getResponseUnsupported(\"Not supported \"+lti_message_type);\n\t\t\t\tresponse.setContentType(\"application/xml\");\n\t\t\t\tPrintWriter out = response.getWriter();\n\t\t\t\tout.println(output);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// No point continuing without a sourcedid\n\t\t\tif(BasicLTIUtil.isBlank(sourcedid)) {\n\t\t\t\tdoErrorXML(request, response, pox, \"outcomes.missing\", \"sourcedid\", null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Truncate this to the maximum length to insure no cruft at the end\n\t\t\tif ( sourcedid.length() > 2048) sourcedid = sourcedid.substring(0,2048);\n\n\t\t\t// Attempt to parse the sourcedid, any failure is fatal\n\t\t\tString placement_id = null;\n\t\t\tString signature = null;\n\t\t\tString user_id = null;\n\t\t\ttry {\n\t\t\t\tint pos = sourcedid.indexOf(\":::\");\n\t\t\t\tif ( pos > 0 ) {\n\t\t\t\t\tsignature = sourcedid.substring(0, pos);\n\t\t\t\t\tString dec2 = sourcedid.substring(pos+3);\n\t\t\t\t\tpos = dec2.indexOf(\":::\");\n\t\t\t\t\tuser_id = dec2.substring(0,pos);\n\t\t\t\t\tplacement_id = dec2.substring(pos+3);\n\t\t\t\t}\n\t\t\t} catch (Exception e) {\n\t\t\t\t// Log some detail for ourselves\n\t\t\t\tM_log.warn(\"Unable to decrypt result_sourcedid IP=\" + ipAddress + \" Error=\" + e.getMessage(),e);\n\t\t\t\tsignature = null;\n\t\t\t\tplacement_id = null;\n\t\t\t\tuser_id = null;\n\t\t\t}\n\n\t\t\t// Send a more generic message back to the caller\n\t\t\tif ( placement_id == null || user_id == null ) {\n\t\t\t\tdoErrorXML(request, response, pox, \"outcomes.sourcedid\", \"sourcedid\", null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tM_log.debug(\"signature=\"+signature);\n\t\t\tM_log.debug(\"user_id=\"+user_id);\n\t\t\tM_log.debug(\"placement_id=\"+placement_id);\n\n\t\t\tProperties pitch = getPropertiesFromPlacement(placement_id);\n\t\t\tif ( pitch == null ) {\n\t\t\t\tM_log.debug(\"Error retrieving result_sourcedid information\");\n\t\t\t\tdoError(request, response, null, \"outcomes.sourcedid\", \"sourcedid\", null);\n\t\t\t\treturn;\n\t\t\t}\n\t\n\t\t\tString siteId = pitch.getProperty(LTIService.LTI_SITE_ID);\n\t\t\tSite site = null;\n\t\t\ttry { \n\t\t\t\tsite = SiteService.getSite(siteId);\n\t\t\t} catch (Exception e) {\n\t\t\t\tM_log.debug(\"Error retrieving result_sourcedid site: \"+e.getLocalizedMessage(), e);\n\t\t\t}\n\n\t\t\t// Send a more generic message back to the caller\n\t\t\tif (  site == null ) {\n\t\t\t\tdoError(request, response, null, \"outcomes.sourcedid\", \"sourcedid\", null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check the message signature using OAuth\n\t\t\tString oauth_consumer_key = pox.getOAuthConsumerKey();\n\t\t\tString oauth_secret = pitch.getProperty(LTIService.LTI_SECRET);\n\n\t\t\tpox.validateRequest(oauth_consumer_key, oauth_secret, request);\n\t\t\tif ( ! pox.valid ) {\n\t\t\t\tif (pox.base_string != null) {\n\t\t\t\t\tM_log.warn(pox.base_string);\n\t\t\t\t}\n\t\t\t\tdoErrorXML(request, response, pox, \"outcome.no.validate\", oauth_consumer_key, null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// Check the signature of the sourcedid to make sure it was not altered\n\t\t\tString placement_secret  = pitch.getProperty(LTIService.LTI_PLACEMENTSECRET);\n\n\t\t\t// Send a generic message back to the caller\n\t\t\tif ( placement_secret ==null ) {\n\t\t\t\tdoErrorXML(request, response, pox, \"outcomes.sourcedid\", \"sourcedid\", null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tString pre_hash = placement_secret + \":::\" + user_id + \":::\" + placement_id;\n\t\t\tString received_signature = ShaUtil.sha256Hash(pre_hash);\n\t\t\tM_log.debug(\"Received signature=\"+signature+\" received=\"+received_signature);\n\t\t\tboolean matched = signature.equals(received_signature);\n\n\t\t\tString old_placement_secret  = pitch.getProperty(LTIService.LTI_OLDPLACEMENTSECRET);\n\t\t\tif ( old_placement_secret != null && ! matched ) {\n\t\t\t\tpre_hash = placement_secret + \":::\" + user_id + \":::\" + placement_id;\n\t\t\t\treceived_signature = ShaUtil.sha256Hash(pre_hash);\n\t\t\t\tM_log.debug(\"Received signature II=\"+signature+\" received=\"+received_signature);\n\t\t\t\tmatched = signature.equals(received_signature);\n\t\t\t}\n\n\t\t\t// Send a message back to the caller\n\t\t\tif ( ! matched ) {\n\t\t\t\tdoErrorXML(request, response, pox, \"outcomes.sourcedid\", \"sourcedid\", null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tString placementLori = pitch.getProperty(\"allowlori\");\n\n\t\t\tif ( allowOutcomes != null && \"basicoutcome\".equals(message_type) ) {\n\t\t\t\tprocessOutcomeXml(request, response, lti_message_type, site, siteId, pitch, user_id, pox);\n\t\t\t} else if ( allowLori != null && \"on\".equals(placementLori) && \"getstructure\".equals(message_type) ) {\n\t\t\t\tprocessCourseStructureXml(request, response, lti_message_type, siteId, pox);\n\t\t\t} else if ( allowLori != null && \"on\".equals(placementLori) && \"addstructure\".equals(message_type) ) {\n\t\t\t\tprocessAddResourceXML(request, response, lti_message_type, siteId, pox);\n\t\t\t} else {\n\t\t\t\tresponse.setContentType(\"application/xml\");\n\t\t\t\tPrintWriter writer = response.getWriter();\n\t\t\t\tString desc = \"Message received and validated operation=\"+pox.getOperation();\n\t\t\t\tString output = pox.getResponseUnsupported(desc);\n\t\t\t\twriter.println(output);\n\t\t\t}\n\t\t}","commit_id":"aaf0bf5f8919cc01e333c9d9dd7204c948a94263","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void processAddResourceXML(HttpServletRequest request, HttpServletResponse response, \n\t\t\tString lti_message_type, String siteId, IMSPOXRequest pox)\n\t\tthrows java.io.IOException\n\t{\n            // userId is irrelevant because this is server to server\n\t\t\tMap<String,String> bodyMap = pox.getBodyMap();\n\t\t\tString context_id = bodyMap.get(\"/params/courseId\");\n\n\t\t\tif ( context_id == null || ! context_id.equals(siteId) ) {\n\t\t\t\tdoErrorXML(request, response, pox, \"outcomes.sourcedid\", \"sourcedid\", null);\n\t\t\t\tM_log.warn(\"mis-match courseId=\"+context_id+\" siteId=\"+siteId);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tString folder_id = bodyMap.get(\"/params/folderId\");\n\t\t\tLong folderId = null;\n\t\t\ttry { folderId = new Long(folder_id); }\n\t\t\tcatch (Exception e) { folderId = null; }\n\n\t\t\tList<Long> structureList = new ArrayList<Long>();\n\t\t\tList<SimplePageItem> sitePages = LessonsFacade.findItemsInSite(context_id);\n\t\t\tSimplePageItem thePage = LessonsFacade.findFolder(sitePages, folderId, structureList, 1);\n\n\t\t\t// Something wrong, add on the first page\n\t\t\tif ( thePage == null ) {\n\t\t\t\tSystem.out.println(\"Inserting at top...\");\n\t\t\t\tfor (SimplePageItem i : sitePages) {\n\t\t\t\t\tif (i.getType() != SimplePageItem.PAGE) continue;\n\t\t\t\t\t// System.out.println(\"item=\"+i.getName()+\"id=\"+i.getId()+\" sakaiId=\"+i.getSakaiId());\n\t\t\t\t\tthePage = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( thePage == null ) {\n\t\t\t\tdoErrorXML(request, response, pox, \"lessons.page.notfound\", \n\t\t\t\t\t\"Unable to find page in structure at \"+folderId, null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tElement bodyElement = pox.bodyElement;\n\t\t\t// System.out.println(XMLMap.nodeToString(bodyElement));\n\t\t\t// System.out.println(XMLMap.nodeToString(bodyElement, true));\n\t\t\tNodeList nl = null;\n\t\t\ttry {\n\t\t\t\tObject result = LESSONS_RESOURCES_EXPR.evaluate(bodyElement, XPathConstants.NODESET);\n\t\t\t\tnl = (NodeList) result;\n\t\t\t\t// System.out.println(\"result = \"+result+\" count=\"+nl.getLength());\n\t\t\t} catch(Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\tnl = null;\n\t\t\t}\n\n\t\t\tif ( nl == null || nl.getLength() < 1 ) {\n\t\t\t\tdoErrorXML(request, response, pox, \"lessons.page.noresources\", \n\t\t\t\t\t\"No resources to add\", null);\n\t\t\t\treturn;\n\t\t\t}\n\n\n            Long pageNum = Long.valueOf(thePage.getSakaiId());\n            List<SimplePageItem> items = LessonsFacade.findItemsOnPage(pageNum);\n\t\t\tint seq = items.size() + 1;\nSystem.out.println(\"seq=\"+seq);\n            List<Map<String,String>> resultList = new ArrayList<Map<String,String>>();\n\n\t\t\trecursivelyAddResourcesXML(context_id, thePage, nl, seq, resultList);\n\n            Map<String,Object> theMap = new TreeMap<String,Object>();\n            theMap.put(\"/addCourseResourcesResponse/resources/resource\",resultList);\n            String theXml = XMLMap.getXMLFragment(theMap, true);\n\n\t\t\tresponse.setContentType(\"application/xml\");\n\t\t\tString output = pox.getResponseSuccess(\"Items Added\",theXml);\n\n\t\t\tPrintWriter out = response.getWriter();\n\t\t\tout.println(output);\n\t\t\tSystem.out.println(output);\n\t}","id":96106,"modified_method":"protected void processAddResourceXML(HttpServletRequest request, HttpServletResponse response, \n\t\t\tString lti_message_type, String siteId, IMSPOXRequest pox)\n\t\tthrows java.io.IOException\n\t{\n            // userId is irrelevant because this is server to server\n\t\t\tMap<String,String> bodyMap = pox.getBodyMap();\n\t\t\tString context_id = bodyMap.get(\"/params/courseId\");\n\n\t\t\tif ( context_id == null || ! context_id.equals(siteId) ) {\n\t\t\t\tdoErrorXML(request, response, pox, \"outcomes.sourcedid\", \"sourcedid\", null);\n\t\t\t\tM_log.warn(\"mis-match courseId=\"+context_id+\" siteId=\"+siteId);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tString folder_id = bodyMap.get(\"/params/folderId\");\n\t\t\tLong folderId = null;\n\t\t\ttry { folderId = new Long(folder_id); }\n\t\t\tcatch (Exception e) { folderId = null; }\n\n\t\t\tList<Long> structureList = new ArrayList<Long>();\n\t\t\tList<SimplePageItem> sitePages = LessonsFacade.findItemsInSite(context_id);\n\t\t\tSimplePageItem thePage = LessonsFacade.findFolder(sitePages, folderId, structureList, 1);\n\n\t\t\t// Something wrong, add on the first page\n\t\t\tif ( thePage == null ) {\n\t\t\t\tM_log.debug(\"Inserting at top...\");\n\t\t\t\tfor (SimplePageItem i : sitePages) {\n\t\t\t\t\tif (i.getType() != SimplePageItem.PAGE) continue;\n\t\t\t\t\t// System.out.println(\"item=\"+i.getName()+\"id=\"+i.getId()+\" sakaiId=\"+i.getSakaiId());\n\t\t\t\t\tthePage = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( thePage == null ) {\n\t\t\t\tdoErrorXML(request, response, pox, \"lessons.page.notfound\", \n\t\t\t\t\t\"Unable to find page in structure at \"+folderId, null);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tElement bodyElement = pox.bodyElement;\n\t\t\t// System.out.println(XMLMap.nodeToString(bodyElement));\n\t\t\t// System.out.println(XMLMap.nodeToString(bodyElement, true));\n\t\t\tNodeList nl = null;\n\t\t\ttry {\n\t\t\t\tObject result = LESSONS_RESOURCES_EXPR.evaluate(bodyElement, XPathConstants.NODESET);\n\t\t\t\tnl = (NodeList) result;\n\t\t\t\t// System.out.println(\"result = \"+result+\" count=\"+nl.getLength());\n\t\t\t} catch(Exception e) {\n\t\t\t\te.printStackTrace();\n\t\t\t\tnl = null;\n\t\t\t}\n\n\t\t\tif ( nl == null || nl.getLength() < 1 ) {\n\t\t\t\tdoErrorXML(request, response, pox, \"lessons.page.noresources\", \n\t\t\t\t\t\"No resources to add\", null);\n\t\t\t\treturn;\n\t\t\t}\n\n\n            Long pageNum = Long.valueOf(thePage.getSakaiId());\n            List<SimplePageItem> items = LessonsFacade.findItemsOnPage(pageNum);\n\t\t\tint seq = items.size() + 1;\n            List<Map<String,String>> resultList = new ArrayList<Map<String,String>>();\n\n\t\t\trecursivelyAddResourcesXML(context_id, thePage, nl, seq, resultList);\n\n            Map<String,Object> theMap = new TreeMap<String,Object>();\n            theMap.put(\"/addCourseResourcesResponse/resources/resource\",resultList);\n            String theXml = XMLMap.getXMLFragment(theMap, true);\n\n\t\t\tresponse.setContentType(\"application/xml\");\n\t\t\tString output = pox.getResponseSuccess(\"Items Added\",theXml);\n\n\t\t\tPrintWriter out = response.getWriter();\n\t\t\tout.println(output);\n\t\t\tM_log.debug(output);\n\t}","commit_id":"aaf0bf5f8919cc01e333c9d9dd7204c948a94263","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void processCourseStructureXml(HttpServletRequest request, HttpServletResponse response, \n\t\t\tString lti_message_type, String siteId, IMSPOXRequest pox)\n\t\tthrows java.io.IOException\n\t{\n            // userId is irrelevant as this is server to server\n\t\t\tMap<String,String> bodyMap = pox.getBodyMap();\n\t\t\tString context_id = bodyMap.get(\"/params/courseId\");\n\t\t\tif ( context_id == null || ! context_id.equals(siteId) ) {\n\t\t\t\tdoErrorXML(request, response, pox, \"outcomes.sourcedid\", \"sourcedid\", null);\n\t\t\t\tM_log.warn(\"mis-match courseId=\"+context_id+\" siteId=\"+siteId);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tList<Long> structureList = new ArrayList<Long>();\n\n\t\t    List<SimplePageItem> sitePages = LessonsFacade.findItemsInSite(context_id);\n            List<Map<String,Object>> structureMap = iteratePagesXML(sitePages,structureList,0);\n\n\t\t\tresponse.setContentType(\"application/xml\");\n\t\t\tString output = pox.getResponseUnsupported(\"YO\");\n\t\t\tif ( structureMap.size() > 0 ) {\n\t\t\t\tMap<String,Object> theMap = new TreeMap<String,Object>();\n\t\t\t\ttheMap.put(\"/getCourseStructureResponse/resources/resource\",structureMap);\n\t\t\t\tString theXml = XMLMap.getXMLFragment(theMap, true);\n\t\t\t\toutput = pox.getResponseSuccess(\"Cool\", theXml);\n\t\t\t}\n\n\t\t\tPrintWriter out = response.getWriter();\n\t\t\tout.println(output);\n\t\t\tSystem.out.println(output);\n\t\t\treturn;\n\t}","id":96107,"modified_method":"protected void processCourseStructureXml(HttpServletRequest request, HttpServletResponse response, \n\t\t\tString lti_message_type, String siteId, IMSPOXRequest pox)\n\t\tthrows java.io.IOException\n\t{\n            // userId is irrelevant as this is server to server\n\t\t\tMap<String,String> bodyMap = pox.getBodyMap();\n\t\t\tString context_id = bodyMap.get(\"/params/courseId\");\n\t\t\tif ( context_id == null || ! context_id.equals(siteId) ) {\n\t\t\t\tdoErrorXML(request, response, pox, \"outcomes.sourcedid\", \"sourcedid\", null);\n\t\t\t\tM_log.warn(\"mis-match courseId=\"+context_id+\" siteId=\"+siteId);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tList<Long> structureList = new ArrayList<Long>();\n\n\t\t    List<SimplePageItem> sitePages = LessonsFacade.findItemsInSite(context_id);\n            List<Map<String,Object>> structureMap = iteratePagesXML(sitePages,structureList,0);\n\n\t\t\tresponse.setContentType(\"application/xml\");\n\t\t\tString output = pox.getResponseUnsupported(\"YO\");\n\t\t\tif ( structureMap.size() > 0 ) {\n\t\t\t\tMap<String,Object> theMap = new TreeMap<String,Object>();\n\t\t\t\ttheMap.put(\"/getCourseStructureResponse/resources/resource\",structureMap);\n\t\t\t\tString theXml = XMLMap.getXMLFragment(theMap, true);\n\t\t\t\toutput = pox.getResponseSuccess(\"Cool\", theXml);\n\t\t\t}\n\n\t\t\tPrintWriter out = response.getWriter();\n\t\t\tout.println(output);\n\t\t\tM_log.debug(output);\n\t\t\treturn;\n\t}","commit_id":"aaf0bf5f8919cc01e333c9d9dd7204c948a94263","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Override\n  public boolean filterElements(@NotNull final ChooseByNameBase base,\n                                @NotNull final String pattern,\n                                boolean everywhere,\n                                @NotNull ProgressIndicator indicator,\n                                @NotNull final Processor<Object> consumer) {\n    String namePattern = getNamePattern(base, pattern);\n    String qualifierPattern = getQualifierPattern(base, pattern);\n\n    if (removeModelSpecificMarkup(base, namePattern).isEmpty() && !base.canShowListForEmptyPattern()) return true;\n\n    final ChooseByNameModel model = base.getModel();\n    String matchingPattern = convertToMatchingPattern(base, namePattern);\n    List<MatchResult> namesList = new ArrayList<MatchResult>();\n\n    final CollectConsumer<MatchResult> collect = new SynchronizedCollectConsumer<MatchResult>(namesList);\n    long started;\n\n    if (model instanceof EfficientChooseByNameModel) {\n      indicator.checkCanceled();\n      started = System.currentTimeMillis();\n      final MinusculeMatcher matcher = buildPatternMatcher(matchingPattern, NameUtil.MatchingCaseSensitivity.NONE);\n      ((EfficientChooseByNameModel)model).processNames(new Processor<String>() {\n        @Override\n        public boolean process(String sequence) {\n          ProgressManager.checkCanceled();\n          MatchResult result = matches(base, pattern, matcher, sequence);\n          if (result != null) {\n            collect.consume(result);\n            return true;\n          }\n          return false;\n        }\n      }, everywhere);\n      System.out.println(\"loaded + matched:\"+ (System.currentTimeMillis() - started)+ \",\" + collect.getResult().size());\n    } else {\n      String[] names = base.getNames(everywhere);\n      started = System.currentTimeMillis();\n      processNamesByPattern(base, names, matchingPattern, indicator, collect);\n      System.out.println(\"matched:\"+ (System.currentTimeMillis() - started)+ \",\" + names.length);\n    }\n\n    indicator.checkCanceled();\n    started = System.currentTimeMillis();\n    List<MatchResult> results = (List<MatchResult>)collect.getResult();\n    sortNamesList(matchingPattern, results);\n\n    System.out.println(\"sorted:\"+ (System.currentTimeMillis() - started) + \",results:\" + results.size());\n    indicator.checkCanceled();\n\n    List<Object> sameNameElements = new SmartList<Object>();\n    final Map<Object, MatchResult> qualifierMatchResults = new THashMap<Object, MatchResult>();\n\n    Comparator<Object> weightComparator = new Comparator<Object>() {\n      Comparator<Object> modelComparator = model instanceof Comparator ? (Comparator<Object>)model : new PathProximityComparator(myContext.get());\n\n      @Override\n      public int compare(Object o1, Object o2) {\n        int result = modelComparator.compare(o1, o2);\n        return result != 0 ? result : qualifierMatchResults.get(o1).compareTo(qualifierMatchResults.get(o2));\n      }\n    };\n\n    List<Object> qualifierMiddleMatched = new ArrayList<Object>();\n\n    List<Pair<String, MinusculeMatcher>> patternsAndMatchers = getPatternsAndMatchers(qualifierPattern, base);\n\n    boolean sortedByMatchingDegree = !(base.getModel() instanceof CustomMatcherModel);\n    boolean afterStartMatch = false;\n\n    for (MatchResult result : namesList) {\n      indicator.checkCanceled();\n      String name = result.elementName;\n\n      boolean needSeparator = sortedByMatchingDegree && !result.startMatch && afterStartMatch;\n\n      // use interruptible call if possible\n      Object[] elements = model instanceof ContributorsBasedGotoByModel ?\n                                ((ContributorsBasedGotoByModel)model).getElementsByName(name, everywhere, namePattern, indicator)\n                                : model.getElementsByName(name, everywhere, namePattern);\n      if (elements.length > 1) {\n        sameNameElements.clear();\n        qualifierMatchResults.clear();\n        for (final Object element : elements) {\n          indicator.checkCanceled();\n          MatchResult qualifierResult = matchQualifier(element, base, patternsAndMatchers);\n          if (qualifierResult != null) {\n            sameNameElements.add(element);\n            qualifierMatchResults.put(element, qualifierResult);\n          }\n        }\n        Collections.sort(sameNameElements, weightComparator);\n        for (Object element : sameNameElements) {\n          if (!qualifierMatchResults.get(element).startMatch) {\n            qualifierMiddleMatched.add(element);\n            continue;\n          }\n\n          if (needSeparator && !startMiddleMatchVariants(qualifierMiddleMatched, consumer)) return false;\n          if (!consumer.process(element)) return false;\n          needSeparator = false;\n          afterStartMatch = result.startMatch;\n        }\n      }\n      else if (elements.length == 1 && matchQualifier(elements[0], base, patternsAndMatchers) != null) {\n        if (needSeparator && !startMiddleMatchVariants(qualifierMiddleMatched, consumer)) return false;\n        if (!consumer.process(elements[0])) return false;\n        afterStartMatch = result.startMatch;\n      }\n    }\n    return ContainerUtil.process(qualifierMiddleMatched, consumer);\n  }","id":96108,"modified_method":"@Override\n  public boolean filterElements(@NotNull final ChooseByNameBase base,\n                                @NotNull final String pattern,\n                                boolean everywhere,\n                                @NotNull ProgressIndicator indicator,\n                                @NotNull final Processor<Object> consumer) {\n    String namePattern = getNamePattern(base, pattern);\n    String qualifierPattern = getQualifierPattern(base, pattern);\n\n    if (removeModelSpecificMarkup(base, namePattern).isEmpty() && !base.canShowListForEmptyPattern()) return true;\n\n    final ChooseByNameModel model = base.getModel();\n    String matchingPattern = convertToMatchingPattern(base, namePattern);\n    List<MatchResult> namesList = new ArrayList<MatchResult>();\n\n    final CollectConsumer<MatchResult> collect = new SynchronizedCollectConsumer<MatchResult>(namesList);\n    long started;\n\n    if (model instanceof EfficientChooseByNameModel) {\n      indicator.checkCanceled();\n      started = System.currentTimeMillis();\n      final MinusculeMatcher matcher = buildPatternMatcher(matchingPattern, NameUtil.MatchingCaseSensitivity.NONE);\n      ((EfficientChooseByNameModel)model).processNames(new Processor<String>() {\n        @Override\n        public boolean process(String sequence) {\n          ProgressManager.checkCanceled();\n          MatchResult result = matches(base, pattern, matcher, sequence);\n          if (result != null) {\n            collect.consume(result);\n            return true;\n          }\n          return false;\n        }\n      }, everywhere);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"loaded + matched:\"+ (System.currentTimeMillis() - started)+ \",\" + collect.getResult().size());\n      }\n    } else {\n      String[] names = base.getNames(everywhere);\n      started = System.currentTimeMillis();\n      processNamesByPattern(base, names, matchingPattern, indicator, collect);\n      if (LOG.isDebugEnabled()) {\n        LOG.debug(\"matched:\"+ (System.currentTimeMillis() - started)+ \",\" + names.length);\n      }\n    }\n\n    indicator.checkCanceled();\n    started = System.currentTimeMillis();\n    List<MatchResult> results = (List<MatchResult>)collect.getResult();\n    sortNamesList(matchingPattern, results);\n\n    if (LOG.isDebugEnabled()) {\n      LOG.debug(\"sorted:\"+ (System.currentTimeMillis() - started) + \",results:\" + results.size());\n    }\n    indicator.checkCanceled();\n\n    List<Object> sameNameElements = new SmartList<Object>();\n    final Map<Object, MatchResult> qualifierMatchResults = new THashMap<Object, MatchResult>();\n\n    Comparator<Object> weightComparator = new Comparator<Object>() {\n      Comparator<Object> modelComparator = model instanceof Comparator ? (Comparator<Object>)model : new PathProximityComparator(myContext.get());\n\n      @Override\n      public int compare(Object o1, Object o2) {\n        int result = modelComparator.compare(o1, o2);\n        return result != 0 ? result : qualifierMatchResults.get(o1).compareTo(qualifierMatchResults.get(o2));\n      }\n    };\n\n    List<Object> qualifierMiddleMatched = new ArrayList<Object>();\n\n    List<Pair<String, MinusculeMatcher>> patternsAndMatchers = getPatternsAndMatchers(qualifierPattern, base);\n\n    boolean sortedByMatchingDegree = !(base.getModel() instanceof CustomMatcherModel);\n    boolean afterStartMatch = false;\n\n    for (MatchResult result : namesList) {\n      indicator.checkCanceled();\n      String name = result.elementName;\n\n      boolean needSeparator = sortedByMatchingDegree && !result.startMatch && afterStartMatch;\n\n      // use interruptible call if possible\n      Object[] elements = model instanceof ContributorsBasedGotoByModel ?\n                                ((ContributorsBasedGotoByModel)model).getElementsByName(name, everywhere, namePattern, indicator)\n                                : model.getElementsByName(name, everywhere, namePattern);\n      if (elements.length > 1) {\n        sameNameElements.clear();\n        qualifierMatchResults.clear();\n        for (final Object element : elements) {\n          indicator.checkCanceled();\n          MatchResult qualifierResult = matchQualifier(element, base, patternsAndMatchers);\n          if (qualifierResult != null) {\n            sameNameElements.add(element);\n            qualifierMatchResults.put(element, qualifierResult);\n          }\n        }\n        Collections.sort(sameNameElements, weightComparator);\n        for (Object element : sameNameElements) {\n          if (!qualifierMatchResults.get(element).startMatch) {\n            qualifierMiddleMatched.add(element);\n            continue;\n          }\n\n          if (needSeparator && !startMiddleMatchVariants(qualifierMiddleMatched, consumer)) return false;\n          if (!consumer.process(element)) return false;\n          needSeparator = false;\n          afterStartMatch = result.startMatch;\n        }\n      }\n      else if (elements.length == 1 && matchQualifier(elements[0], base, patternsAndMatchers) != null) {\n        if (needSeparator && !startMiddleMatchVariants(qualifierMiddleMatched, consumer)) return false;\n        if (!consumer.process(elements[0])) return false;\n        afterStartMatch = result.startMatch;\n      }\n    }\n    return ContainerUtil.process(qualifierMiddleMatched, consumer);\n  }","commit_id":"32d31e4915ef17b3ec6ec4e87923f017e8e41bce","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected RestUIContext createUIContext(String resourcePath) {\n        AddonRegistry addonRegistry = furnace.getAddonRegistry();\n        Imported<ResourceFactory> resourceFactoryImport = addonRegistry.getServices(ResourceFactory.class);\n        ResourceFactory resourceFactory = resourceFactoryImport.get();\n        Resource<?> selection = null;\n        if (Strings.isNotBlank(resourcePath) && resourceFactory != null) {\n            File file = new File(resourcePath);\n            if (!file.exists() && !resourcePath.startsWith(\"/\")) {\n                resourcePath = \"/\" + resourcePath;\n                file = new File(resourcePath);\n            }\n            if (file.exists()) {\n                selection = resourceFactory.create(file);\n            } else {\n                selection = resourceFactory.create(resourcePath);\n            }\n        }\n        return new RestUIContext(selection);\n    }","id":96109,"modified_method":"protected RestUIContext createUIContext(String resourcePath) {\n        AddonRegistry addonRegistry = furnace.getAddonRegistry();\n        Imported<ResourceFactory> resourceFactoryImport = addonRegistry.getServices(ResourceFactory.class);\n        ResourceFactory resourceFactory = resourceFactoryImport.get();\n        Resource<?> selection = null;\n        if (Strings.isNotBlank(resourcePath) && resourceFactory != null) {\n            // lets split out user repositories\n            String path = Strings.stripPrefix(resourcePath, \"/\");\n            String userFolder = \"user/\";\n            if (path.startsWith(userFolder)) {\n                path = Strings.stripPrefix(path, userFolder);\n                String[] userAndPath = path.split(\"/\", 2);\n                if (userAndPath.length < 2) {\n                    LOG.warn(\"Could not extract user name and path from resource: \" + resourcePath);\n                } else {\n                    String userId = userAndPath[0];\n                    String repositoryName = userAndPath[1];\n\n                    UserDetails userDetails = gitUserHelper.createUserDetails(request);\n\n\n                    File file = projectFileSystem.getOrCloneUserProjectFolder(userId, repositoryName, userDetails);\n                    selection = resourceFactory.create(file);\n                }\n            } else {\n                LOG.warn(\"Unknown path of the form user/{userId}/{repositoryName}\");\n            }\n        }\n        return new RestUIContext(selection);\n    }","commit_id":"48b052ffed3bbab27a4c009f51352546fd0da2fc","url":"https://github.com/fabric8io/fabric8"},{"original_method":"@Override\n    public void preprocessRequest(String name, ExecutionRequest executionRequest, HttpServletRequest request) {\n        UserDetails userDetails = gitUserHelper.createUserDetails(request);\n\n        if (Objects.equals(name, PROJECT_NEW_COMMAND)) {\n            List<Map<String, String>> inputList = executionRequest.getInputList();\n            if (inputList != null) {\n                Map<String, String> page1 = inputList.get(0);\n                if (page1 != null) {\n                    if (page1.containsKey(TARGET_LOCATION_PROPERTY)) {\n                        page1.put(TARGET_LOCATION_PROPERTY, getProjectFolderLocation(userDetails));\n                    }\n                }\n            }\n        }\n        System.out.println(\"preprocess has request \" + request);\n    }","id":96110,"modified_method":"@Override\n    public void preprocessRequest(String name, ExecutionRequest executionRequest, HttpServletRequest request) {\n        UserDetails userDetails = gitUserHelper.createUserDetails(request);\n\n        if (Objects.equals(name, PROJECT_NEW_COMMAND)) {\n            List<Map<String, String>> inputList = executionRequest.getInputList();\n            if (inputList != null) {\n                Map<String, String> page1 = inputList.get(0);\n                if (page1 != null) {\n                    if (page1.containsKey(TARGET_LOCATION_PROPERTY)) {\n                        page1.put(TARGET_LOCATION_PROPERTY, projectFileSystem.getUserProjectFolderLocation(userDetails));\n                    }\n                }\n            }\n        }\n    }","commit_id":"48b052ffed3bbab27a4c009f51352546fd0da2fc","url":"https://github.com/fabric8io/fabric8"},{"original_method":"@Inject\n    public GitCommandCompletePostProcessor(KubernetesClient kubernetes,\n                                           GitUserHelper gitUserHelper,\n                                           @Service(id =\"GOGS_HTTP_SERVICE\", protocol=\"http\") String gogsUrl,\n                                           @ConfigProperty(name = \"PROJECT_FOLDER\", defaultValue = \"/tmp\") String rootProjectFolder) {\n        this.kubernetes = kubernetes;\n        this.gitUserHelper = gitUserHelper;\n        this.gogsUrl = gogsUrl;\n        this.rootProjectFolder = rootProjectFolder;\n        this.address = gogsUrl.toString();\n        if (!address.endsWith(\"/\")) {\n            address += \"/\";\n        }\n    }","id":96111,"modified_method":"@Inject\n    public GitCommandCompletePostProcessor(KubernetesClient kubernetes,\n                                           GitUserHelper gitUserHelper,\n                                           ProjectFileSystem projectFileSystem) {\n        this.kubernetes = kubernetes;\n        this.gitUserHelper = gitUserHelper;\n        this.projectFileSystem = projectFileSystem;\n    }","commit_id":"48b052ffed3bbab27a4c009f51352546fd0da2fc","url":"https://github.com/fabric8io/fabric8"},{"original_method":"protected void handleKubernetesResourceCreation(String kind, Object entity, String results) {\n        System.out.println(\"Created \" + entity + \". Results: \" + results);\n    }","id":96112,"modified_method":"protected void handleKubernetesResourceCreation(String kind, Object entity, String results) {\n        LOG.warn(\"Created \" + entity + \". Results: \" + results);\n    }","commit_id":"48b052ffed3bbab27a4c009f51352546fd0da2fc","url":"https://github.com/fabric8io/fabric8"},{"original_method":"/**\n     * Lets create an ImageRegistry, BuildConfig and DeploymentConfig for the new project\n     */\n    protected void createKubernetesResources(String user, String buildName, String remote, String branch, GitRepoClient repoClient) throws Exception {\n        String imageTag = \"test\";\n        String secret = \"secret101\";\n        String builderImage = \"fabric8/java-main\";\n        String osapiVersion = \"v1beta1\";\n        String namespace = \"default\";\n        String gitServiceName = \"gogs-http-service\";\n\n\n        // TODO we should replace the remote with the actual service IP address???\n\n        String gitAddress = getServiceAddress(gitServiceName, namespace);\n        if (gitAddress == null) {\n            LOG.warn(\"Could not find service \" + gitServiceName + \" for namespace \" + namespace);\n            gitAddress = address;\n        }\n\n        String json = \"\\n\" +\n                \"{\\n\" +\n                \"   \\\"annotations\\\":{\\n\" +\n                \"      \\\"description\\\":\\\"This is an end to end example of a Continuous Delivery pipeline running on OpenShift v3\\\"\\n\" +\n                \"   },\\n\" +\n                \"   \\\"apiVersion\\\":\\\"\" + osapiVersion + \"\\\",\\n\" +\n                \"   \\\"kind\\\":\\\"List\\\",\\n\" +\n                \"   \\\"items\\\":[\\n\" +\n                \"      {\\n\" +\n                \"         \\\"apiVersion\\\":\\\"\" + osapiVersion + \"\\\",\\n\" +\n                \"         \\\"kind\\\":\\\"ImageRepository\\\",\\n\" +\n                \"         \\\"metadata\\\":{\\n\" +\n                \"            \\\"labels\\\":{\\n\" +\n                \"               \\\"name\\\":\\\"\" + buildName + \"\\\",\\n\" +\n                \"               \\\"user\\\":\\\"\" + user + \"\\\"\\n\" +\n                \"            },\\n\" +\n                \"            \\\"name\\\":\\\"\" + buildName + \"\\\"\\n\" +\n                \"         }\\n\" +\n                \"      },\\n\" +\n                \"      {\\n\" +\n                \"         \\\"apiVersion\\\":\\\"\" + osapiVersion + \"\\\",\\n\" +\n                \"         \\\"kind\\\":\\\"BuildConfig\\\",\\n\" +\n                \"         \\\"metadata\\\":{\\n\" +\n                \"            \\\"labels\\\":{\\n\" +\n                \"               \\\"name\\\":\\\"\" + buildName + \"\\\",\\n\" +\n                \"               \\\"user\\\":\\\"\" + user + \"\\\"\\n\" +\n                \"            },\\n\" +\n                \"            \\\"name\\\":\\\"\" + buildName + \"\\\"\\n\" +\n                \"         },\\n\" +\n                \"         \\\"parameters\\\":{\\n\" +\n                \"            \\\"output\\\":{\\n\" +\n                \"               \\\"to\\\":{\\n\" +\n                \"                  \\\"name\\\":\\\"\" + buildName + \"\\\"\\n\" +\n                \"               },\\n\" +\n                \"               \\\"tag\\\":\\\"test\\\"\\n\" +\n                \"            },\\n\" +\n                \"            \\\"source\\\":{\\n\" +\n                \"               \\\"git\\\":{\\n\" +\n                \"                  \\\"uri\\\":\\\"\" + gitAddress + \"/\" + user + \"/\" + buildName + \".git\\\"\\n\" +\n                \"               },\\n\" +\n                \"               \\\"type\\\":\\\"Git\\\"\\n\" +\n                \"            },\\n\" +\n                \"            \\\"strategy\\\":{\\n\" +\n                \"               \\\"stiStrategy\\\":{\\n\" +\n                \"                  \\\"builderImage\\\":\\\"\" + builderImage + \"\\\",\\n\" +\n                \"                  \\\"image\\\":\\\"\" + builderImage + \"\\\"\\n\" +\n                \"               },\\n\" +\n                \"               \\\"type\\\":\\\"STI\\\"\\n\" +\n                \"            }\\n\" +\n                \"         },\\n\" +\n                \"         \\\"triggers\\\":[\\n\" +\n                \"            {\\n\" +\n                \"               \\\"github\\\":{\\n\" +\n                \"                  \\\"secret\\\":\\\"\" + secret + \"\\\"\\n\" +\n                \"               },\\n\" +\n                \"               \\\"type\\\":\\\"github\\\"\\n\" +\n                \"            },\\n\" +\n                \"            {\\n\" +\n                \"               \\\"generic\\\":{\\n\" +\n                \"                  \\\"secret\\\":\\\"\" + secret + \"\\\"\\n\" +\n                \"               },\\n\" +\n                \"               \\\"type\\\":\\\"generic\\\"\\n\" +\n                \"            }\\n\" +\n                \"         ]\\n\" +\n                \"      },\\n\" +\n                \"      {\\n\" +\n                \"         \\\"apiVersion\\\":\\\"\" + osapiVersion + \"\\\",\\n\" +\n                \"         \\\"kind\\\":\\\"DeploymentConfig\\\",\\n\" +\n                \"         \\\"metadata\\\":{\\n\" +\n                \"            \\\"name\\\":\\\"\" + buildName + \"-deploy\\\"\\n\" +\n                \"         },\\n\" +\n                \"         \\\"template\\\":{\\n\" +\n                \"            \\\"controllerTemplate\\\":{\\n\" +\n                \"               \\\"podTemplate\\\":{\\n\" +\n                \"                  \\\"desiredState\\\":{\\n\" +\n                \"                     \\\"manifest\\\":{\\n\" +\n                \"                        \\\"containers\\\":[\\n\" +\n                \"                           {\\n\" +\n                \"                              \\\"image\\\":\\\"\" + buildName + \"\\\",\\n\" +\n                \"                              \\\"name\\\":\\\"\" + buildName + \"\\\",\\n\" +\n                \"                              \\\"ports\\\":[\\n\" +\n                \"                                 {\\n\" +\n                \"                                    \\\"containerPort\\\":8778\\n\" +\n                \"                                 }\\n\" +\n                \"                              ]\\n\" +\n                \"                           }\\n\" +\n                \"                        ],\\n\" +\n                \"                        \\\"version\\\":\\\"\" + imageTag + \"\\\"\\n\" +\n                \"                     }\\n\" +\n                \"                  },\\n\" +\n                \"                  \\\"labels\\\":{\\n\" +\n                \"                     \\\"name\\\":\\\"\" + buildName + \"\\\",\\n\" +\n                \"                     \\\"user\\\":\\\"\" + user + \"\\\"\\n\" +\n                \"                  }\\n\" +\n                \"               },\\n\" +\n                \"               \\\"replicaSelector\\\":{\\n\" +\n                \"                  \\\"name\\\":\\\"\" + buildName + \"\\\",\\n\" +\n                \"                  \\\"user\\\":\\\"\" + user + \"\\\"\\n\" +\n                \"               },\\n\" +\n                \"               \\\"replicas\\\":1\\n\" +\n                \"            },\\n\" +\n                \"            \\\"strategy\\\":{\\n\" +\n                \"               \\\"type\\\":\\\"Recreate\\\"\\n\" +\n                \"            }\\n\" +\n                \"         },\\n\" +\n                \"         \\\"triggers\\\":[\\n\" +\n                \"            {\\n\" +\n                \"               \\\"type\\\":\\\"ImageChange\\\",\\n\" +\n                \"               \\\"imageChangeParams\\\":{\\n\" +\n                \"                  \\\"automatic\\\":true,\\n\" +\n                \"                  \\\"containerNames\\\":[\\n\" +\n                \"                     \\\"\" + buildName + \"\\\"\\n\" +\n                \"                  ],\\n\" +\n                \"                  \\\"from\\\":{\\n\" +\n                \"                     \\\"name\\\":\\\"\" + buildName + \"\\\"\\n\" +\n                \"                  },\\n\" +\n                \"                  \\\"tag\\\":\\\"\" + imageTag + \"\\\"\\n\" +\n                \"               }\\n\" +\n                \"            }\\n\" +\n                \"         ]\\n\" +\n                \"      }\" +\n                \"   ]\\n\" +\n                \"}\";\n\n        Controller controller = new Controller(kubernetes);\n        controller.applyJson(json);\n\n\n        String type = \"generic\";\n\n        // TODO due to https://github.com/openshift/origin/issues/1317 we can't use the direct kube REST API\n        // so we need to use a workaround using the fabric8 console service's proxy which hides the payload for us\n        //String kubeAddress = getServiceAddress(\"kubernetes\", namespace);\n        String kubeAddress = getServiceAddress(\"fabric8-console-service\", namespace);\n        String webhookUrl;\n        if (kubeAddress != null) {\n            webhookUrl = URLUtils.pathJoin(kubeAddress, \"kubernetes\", \"osapi\", KubernetesHelper.defaultOsApiVersion, \"buildConfigHooks\", buildName, secret, type);\n        } else {\n            kubeAddress = kubernetes.getAddress();\n            webhookUrl = URLUtils.pathJoin(kubeAddress, \"osapi\", KubernetesHelper.defaultOsApiVersion, \"buildConfigHooks\", buildName, secret, type);\n        }\n\n\n        System.out.println(\"creating a web hook at: \" + webhookUrl);\n        try {\n            CreateWebhookDTO createWebhook = new CreateWebhookDTO();\n            createWebhook.setType(\"gogs\");\n            WebhookConfig config = createWebhook.getConfig();\n            config.setUrl(webhookUrl);\n            config.setSecret(secret);\n            WebHookDTO webhook = repoClient.createWebhook(user, buildName, createWebhook);\n            System.out.println(\"Got web hook: \" + toJson(webhook));\n        } catch (Exception e) {\n            LOG.warn(\"Failed to create web hook in git repo: \" + e, e);\n        }\n\n\n\n/*        Map<String,String> labels = new LinkedHashMap<>();\n        labels.put(\"name\", buildName);\n        labels.put(\"user\", user);\n\n        Map<String,String> to = new LinkedHashMap<>();\n        to.put(\"name\", buildName);\n\n        ImageRepository imageRepository = new ImageRepository();\n        imageRepository.setKind(\"ImageRepository\");\n        imageRepository.setApiVersion(osapiVersion);\n        imageRepository.setName(buildName);\n        imageRepository.setLabels(labels);\n        handleKubernetesResourceCreation(imageRepository.getKind(), imageRepository, kubernetes.createImageRepository(imageRepository));\n\n        BuildConfig buildConfig = new BuildConfig();\n        buildConfig.setKind(\"BuildConfig\");\n        buildConfig.setApiVersion(osapiVersion);\n        buildConfig.setName(buildName);\n        buildConfig.setLabels(labels);\n\n        BuildOutput output = new BuildOutput();\n        // TODO should be to: { labels }\n        //output.setRegistry(buildName);\n        output.getAdditionalProperties().put(\"to\", to);\n        output.setImageTag(imageTag);\n\n        BuildSource source = new BuildSource();\n        source.setType(\"Git\");\n        GitBuildSource git = new GitBuildSource();\n        git.setUri(remote);\n        source.setGit(git);\n\n        BuildStrategy strategy = new BuildStrategy();\n        strategy.setType(\"STI\");\n        STIBuildStrategy stiStrategy = new STIBuildStrategy();\n        stiStrategy.setImage(builderImage);\n        // TODO\n        //stiStrategy.setBuilderImage(builderImage);\n        stiStrategy.getAdditionalProperties().put(\"builderImage\", builderImage);\n        strategy.setStiStrategy(stiStrategy);\n\n        BuildParameters parameters = new BuildParameters();\n        parameters.setOutput(output);\n        parameters.setSource(source);\n        parameters.setStrategy(strategy);\n        buildConfig.setParameters(parameters);\n\n        BuildTriggerPolicy github = new BuildTriggerPolicy();\n        github.setType(\"github\");\n        WebHookTrigger githubTrigger = new WebHookTrigger();\n        githubTrigger.setSecret(secret);\n        github.setGithub(githubTrigger);\n\n        BuildTriggerPolicy generic = new BuildTriggerPolicy();\n        generic.setType(\"generic\");\n        WebHookTrigger genericTrigger = new WebHookTrigger();\n        genericTrigger.setSecret(secret);\n        generic.setGeneric(genericTrigger);\n\n        List<BuildTriggerPolicy> triggers = new ArrayList<>();\n        triggers.add(github);\n        triggers.add(generic);\n        buildConfig.setTriggers(triggers);\n        \n        handleKubernetesResourceCreation(buildConfig.getKind(), buildConfig, kubernetes.createBuildConfig(buildConfig));*/\n    }","id":96113,"modified_method":"/**\n     * Lets create an ImageRegistry, BuildConfig and DeploymentConfig for the new project\n     */\n    protected void createKubernetesResources(String user, String buildName, String remote, String branch, GitRepoClient repoClient, String address) throws Exception {\n        String imageTag = \"test\";\n        String secret = \"secret101\";\n        String builderImage = \"fabric8/java-main\";\n        String osapiVersion = \"v1beta1\";\n        String namespace = \"default\";\n        String gitServiceName = \"gogs-http-service\";\n\n\n        // TODO we should replace the remote with the actual service IP address???\n\n        String gitAddress = getServiceAddress(gitServiceName, namespace);\n        if (gitAddress == null) {\n            LOG.warn(\"Could not find service \" + gitServiceName + \" for namespace \" + namespace);\n            gitAddress = address;\n        }\n\n        String json = \"\\n\" +\n                \"{\\n\" +\n                \"   \\\"annotations\\\":{\\n\" +\n                \"      \\\"description\\\":\\\"This is an end to end example of a Continuous Delivery pipeline running on OpenShift v3\\\"\\n\" +\n                \"   },\\n\" +\n                \"   \\\"apiVersion\\\":\\\"\" + osapiVersion + \"\\\",\\n\" +\n                \"   \\\"kind\\\":\\\"List\\\",\\n\" +\n                \"   \\\"items\\\":[\\n\" +\n                \"      {\\n\" +\n                \"         \\\"apiVersion\\\":\\\"\" + osapiVersion + \"\\\",\\n\" +\n                \"         \\\"kind\\\":\\\"ImageRepository\\\",\\n\" +\n                \"         \\\"metadata\\\":{\\n\" +\n                \"            \\\"labels\\\":{\\n\" +\n                \"               \\\"name\\\":\\\"\" + buildName + \"\\\",\\n\" +\n                \"               \\\"user\\\":\\\"\" + user + \"\\\"\\n\" +\n                \"            },\\n\" +\n                \"            \\\"name\\\":\\\"\" + buildName + \"\\\"\\n\" +\n                \"         }\\n\" +\n                \"      },\\n\" +\n                \"      {\\n\" +\n                \"         \\\"apiVersion\\\":\\\"\" + osapiVersion + \"\\\",\\n\" +\n                \"         \\\"kind\\\":\\\"BuildConfig\\\",\\n\" +\n                \"         \\\"metadata\\\":{\\n\" +\n                \"            \\\"labels\\\":{\\n\" +\n                \"               \\\"name\\\":\\\"\" + buildName + \"\\\",\\n\" +\n                \"               \\\"user\\\":\\\"\" + user + \"\\\"\\n\" +\n                \"            },\\n\" +\n                \"            \\\"name\\\":\\\"\" + buildName + \"\\\"\\n\" +\n                \"         },\\n\" +\n                \"         \\\"parameters\\\":{\\n\" +\n                \"            \\\"output\\\":{\\n\" +\n                \"               \\\"to\\\":{\\n\" +\n                \"                  \\\"name\\\":\\\"\" + buildName + \"\\\"\\n\" +\n                \"               },\\n\" +\n                \"               \\\"tag\\\":\\\"test\\\"\\n\" +\n                \"            },\\n\" +\n                \"            \\\"source\\\":{\\n\" +\n                \"               \\\"git\\\":{\\n\" +\n                \"                  \\\"uri\\\":\\\"\" + gitAddress + \"/\" + user + \"/\" + buildName + \".git\\\"\\n\" +\n                \"               },\\n\" +\n                \"               \\\"type\\\":\\\"Git\\\"\\n\" +\n                \"            },\\n\" +\n                \"            \\\"strategy\\\":{\\n\" +\n                \"               \\\"stiStrategy\\\":{\\n\" +\n                \"                  \\\"builderImage\\\":\\\"\" + builderImage + \"\\\",\\n\" +\n                \"                  \\\"image\\\":\\\"\" + builderImage + \"\\\"\\n\" +\n                \"               },\\n\" +\n                \"               \\\"type\\\":\\\"STI\\\"\\n\" +\n                \"            }\\n\" +\n                \"         },\\n\" +\n                \"         \\\"triggers\\\":[\\n\" +\n                \"            {\\n\" +\n                \"               \\\"github\\\":{\\n\" +\n                \"                  \\\"secret\\\":\\\"\" + secret + \"\\\"\\n\" +\n                \"               },\\n\" +\n                \"               \\\"type\\\":\\\"github\\\"\\n\" +\n                \"            },\\n\" +\n                \"            {\\n\" +\n                \"               \\\"generic\\\":{\\n\" +\n                \"                  \\\"secret\\\":\\\"\" + secret + \"\\\"\\n\" +\n                \"               },\\n\" +\n                \"               \\\"type\\\":\\\"generic\\\"\\n\" +\n                \"            }\\n\" +\n                \"         ]\\n\" +\n                \"      },\\n\" +\n                \"      {\\n\" +\n                \"         \\\"apiVersion\\\":\\\"\" + osapiVersion + \"\\\",\\n\" +\n                \"         \\\"kind\\\":\\\"DeploymentConfig\\\",\\n\" +\n                \"         \\\"metadata\\\":{\\n\" +\n                \"            \\\"name\\\":\\\"\" + buildName + \"-deploy\\\"\\n\" +\n                \"         },\\n\" +\n                \"         \\\"template\\\":{\\n\" +\n                \"            \\\"controllerTemplate\\\":{\\n\" +\n                \"               \\\"podTemplate\\\":{\\n\" +\n                \"                  \\\"desiredState\\\":{\\n\" +\n                \"                     \\\"manifest\\\":{\\n\" +\n                \"                        \\\"containers\\\":[\\n\" +\n                \"                           {\\n\" +\n                \"                              \\\"image\\\":\\\"\" + buildName + \"\\\",\\n\" +\n                \"                              \\\"name\\\":\\\"\" + buildName + \"\\\",\\n\" +\n                \"                              \\\"ports\\\":[\\n\" +\n                \"                                 {\\n\" +\n                \"                                    \\\"containerPort\\\":8778\\n\" +\n                \"                                 }\\n\" +\n                \"                              ]\\n\" +\n                \"                           }\\n\" +\n                \"                        ],\\n\" +\n                \"                        \\\"version\\\":\\\"\" + imageTag + \"\\\"\\n\" +\n                \"                     }\\n\" +\n                \"                  },\\n\" +\n                \"                  \\\"labels\\\":{\\n\" +\n                \"                     \\\"name\\\":\\\"\" + buildName + \"\\\",\\n\" +\n                \"                     \\\"user\\\":\\\"\" + user + \"\\\"\\n\" +\n                \"                  }\\n\" +\n                \"               },\\n\" +\n                \"               \\\"replicaSelector\\\":{\\n\" +\n                \"                  \\\"name\\\":\\\"\" + buildName + \"\\\",\\n\" +\n                \"                  \\\"user\\\":\\\"\" + user + \"\\\"\\n\" +\n                \"               },\\n\" +\n                \"               \\\"replicas\\\":1\\n\" +\n                \"            },\\n\" +\n                \"            \\\"strategy\\\":{\\n\" +\n                \"               \\\"type\\\":\\\"Recreate\\\"\\n\" +\n                \"            }\\n\" +\n                \"         },\\n\" +\n                \"         \\\"triggers\\\":[\\n\" +\n                \"            {\\n\" +\n                \"               \\\"type\\\":\\\"ImageChange\\\",\\n\" +\n                \"               \\\"imageChangeParams\\\":{\\n\" +\n                \"                  \\\"automatic\\\":true,\\n\" +\n                \"                  \\\"containerNames\\\":[\\n\" +\n                \"                     \\\"\" + buildName + \"\\\"\\n\" +\n                \"                  ],\\n\" +\n                \"                  \\\"from\\\":{\\n\" +\n                \"                     \\\"name\\\":\\\"\" + buildName + \"\\\"\\n\" +\n                \"                  },\\n\" +\n                \"                  \\\"tag\\\":\\\"\" + imageTag + \"\\\"\\n\" +\n                \"               }\\n\" +\n                \"            }\\n\" +\n                \"         ]\\n\" +\n                \"      }\" +\n                \"   ]\\n\" +\n                \"}\";\n\n        Controller controller = new Controller(kubernetes);\n        controller.applyJson(json);\n\n\n        String type = \"generic\";\n\n        // TODO due to https://github.com/openshift/origin/issues/1317 we can't use the direct kube REST API\n        // so we need to use a workaround using the fabric8 console service's proxy which hides the payload for us\n        //String kubeAddress = getServiceAddress(\"kubernetes\", namespace);\n        String kubeAddress = getServiceAddress(\"fabric8-console-service\", namespace);\n        String webhookUrl;\n        if (kubeAddress != null) {\n            webhookUrl = URLUtils.pathJoin(kubeAddress, \"kubernetes\", \"osapi\", KubernetesHelper.defaultOsApiVersion, \"buildConfigHooks\", buildName, secret, type);\n        } else {\n            kubeAddress = kubernetes.getAddress();\n            webhookUrl = URLUtils.pathJoin(kubeAddress, \"osapi\", KubernetesHelper.defaultOsApiVersion, \"buildConfigHooks\", buildName, secret, type);\n        }\n\n\n        LOG.info(\"creating a web hook at: \" + webhookUrl);\n        try {\n            CreateWebhookDTO createWebhook = new CreateWebhookDTO();\n            createWebhook.setType(\"gogs\");\n            WebhookConfig config = createWebhook.getConfig();\n            config.setUrl(webhookUrl);\n            config.setSecret(secret);\n            WebHookDTO webhook = repoClient.createWebhook(user, buildName, createWebhook);\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Got web hook: \" + toJson(webhook));\n            }\n        } catch (Exception e) {\n            LOG.warn(\"Failed to create web hook in git repo: \" + e, e);\n        }\n\n\n\n/*        Map<String,String> labels = new LinkedHashMap<>();\n        labels.put(\"name\", buildName);\n        labels.put(\"user\", user);\n\n        Map<String,String> to = new LinkedHashMap<>();\n        to.put(\"name\", buildName);\n\n        ImageRepository imageRepository = new ImageRepository();\n        imageRepository.setKind(\"ImageRepository\");\n        imageRepository.setApiVersion(osapiVersion);\n        imageRepository.setName(buildName);\n        imageRepository.setLabels(labels);\n        handleKubernetesResourceCreation(imageRepository.getKind(), imageRepository, kubernetes.createImageRepository(imageRepository));\n\n        BuildConfig buildConfig = new BuildConfig();\n        buildConfig.setKind(\"BuildConfig\");\n        buildConfig.setApiVersion(osapiVersion);\n        buildConfig.setName(buildName);\n        buildConfig.setLabels(labels);\n\n        BuildOutput output = new BuildOutput();\n        // TODO should be to: { labels }\n        //output.setRegistry(buildName);\n        output.getAdditionalProperties().put(\"to\", to);\n        output.setImageTag(imageTag);\n\n        BuildSource source = new BuildSource();\n        source.setType(\"Git\");\n        GitBuildSource git = new GitBuildSource();\n        git.setUri(remote);\n        source.setGit(git);\n\n        BuildStrategy strategy = new BuildStrategy();\n        strategy.setType(\"STI\");\n        STIBuildStrategy stiStrategy = new STIBuildStrategy();\n        stiStrategy.setImage(builderImage);\n        // TODO\n        //stiStrategy.setBuilderImage(builderImage);\n        stiStrategy.getAdditionalProperties().put(\"builderImage\", builderImage);\n        strategy.setStiStrategy(stiStrategy);\n\n        BuildParameters parameters = new BuildParameters();\n        parameters.setOutput(output);\n        parameters.setSource(source);\n        parameters.setStrategy(strategy);\n        buildConfig.setParameters(parameters);\n\n        BuildTriggerPolicy github = new BuildTriggerPolicy();\n        github.setType(\"github\");\n        WebHookTrigger githubTrigger = new WebHookTrigger();\n        githubTrigger.setSecret(secret);\n        github.setGithub(githubTrigger);\n\n        BuildTriggerPolicy generic = new BuildTriggerPolicy();\n        generic.setType(\"generic\");\n        WebHookTrigger genericTrigger = new WebHookTrigger();\n        genericTrigger.setSecret(secret);\n        generic.setGeneric(genericTrigger);\n\n        List<BuildTriggerPolicy> triggers = new ArrayList<>();\n        triggers.add(github);\n        triggers.add(generic);\n        buildConfig.setTriggers(triggers);\n        \n        handleKubernetesResourceCreation(buildConfig.getKind(), buildConfig, kubernetes.createBuildConfig(buildConfig));*/\n    }","commit_id":"48b052ffed3bbab27a4c009f51352546fd0da2fc","url":"https://github.com/fabric8io/fabric8"},{"original_method":"@Override\n    public void firePostCompleteActions(String name, ExecutionRequest executionRequest, RestUIContext context, CommandController controller, ExecutionResult results, HttpServletRequest request) {\n        UserDetails userDetails = gitUserHelper.createUserDetails(request);\n\n        String user = userDetails.getUser();\n        String password = userDetails.getPassword();\n        String authorEmail = userDetails.getEmail();\n        String branch = \"master\";\n\n        System.out.println(\"execute has request \" + request);\n\n        try {\n            CredentialsProvider credentials = new UsernamePasswordCredentialsProvider(user, password);\n            PersonIdent personIdent = new PersonIdent(user, authorEmail);\n\n            if (name.equals(PROJECT_NEW_COMMAND)) {\n                String targetLocation = null;\n                String named = null;\n                List<Map<String, String>> inputList = executionRequest.getInputList();\n                for (Map<String, String> map : inputList) {\n                    if (Strings.isNullOrEmpty(targetLocation)) {\n                        targetLocation = map.get(\"targetLocation\");\n                    }\n                    if (Strings.isNullOrEmpty(named)) {\n                        named = map.get(\"named\");\n                    }\n                }\n                if (Strings.isNullOrEmpty(targetLocation)) {\n                    LOG.warn(\"No targetLocation could be found!\");\n                } else if (Strings.isNullOrEmpty(named)) {\n                    LOG.warn(\"No named could be found!\");\n                } else {\n                    File basedir = new File(targetLocation, named);\n                    if (!basedir.isDirectory() || !basedir.exists()) {\n                        LOG.warn(\"Generated project folder does not exist: \" + basedir.getAbsolutePath());\n                    } else {\n                        // lets git init...\n                        System.out.println(\"About to git init folder \" + basedir.getAbsolutePath());\n                        InitCommand initCommand = Git.init();\n                        initCommand.setDirectory(basedir);\n                        Git git = initCommand.call();\n                        LOG.info(\"Initialised an empty git configuration repo at {}\", basedir.getAbsolutePath());\n\n                        // lets create the repository\n                        GitRepoClient repoClient = new GitRepoClient(address, user, password);\n                        CreateRepositoryDTO createRepository = new CreateRepositoryDTO();\n                        createRepository.setName(named);\n\n                        String fullName = null;\n                        RepositoryDTO repository = repoClient.createRepository(createRepository);\n                        if (repository != null) {\n                            System.out.println(\"Got repository: \" + toJson(repository));\n                            fullName = repository.getFullName();\n                        }\n                        if (Strings.isNullOrEmpty(fullName)) {\n                            fullName = user + \"/\" + named;\n                        }\n                        String htmlUrl = address + user + \"/\" + named;\n                        String remote = address + user + \"/\" + named + \".git\";\n                        //results.appendOut(\"Created git repository \" + fullName + \" at: \" + htmlUrl);\n\n                        results.setOutputProperty(\"fullName\", fullName);\n                        results.setOutputProperty(\"cloneUrl\", remote);\n                        results.setOutputProperty(\"htmlUrl\", htmlUrl);\n\n                        // now lets import the code and publish\n                        LOG.info(\"Using remote: \" + remote);\n                        configureBranch(git, branch, remote);\n\n                        createKubernetesResources(user, named, remote, branch, repoClient);\n\n                        doAddCommitAndPushFiles(git, credentials, personIdent, remote, branch);\n                    }\n                }\n            } else {\n                File basedir = context.getInitialSelectionFile();\n                String absolutePath = basedir != null ? basedir.getAbsolutePath() : null;\n                System.out.println(\"===== added or mutated files in folder: \" + absolutePath);\n                if (basedir != null) {\n                    File gitFolder = new File(basedir, \".git\");\n                    if (gitFolder.exists() && gitFolder.isDirectory()) {\n                        System.out.println(\"======== has .git folder so lets add/commit files then push!\");\n                        FileRepositoryBuilder builder = new FileRepositoryBuilder();\n                        Repository repository = builder.setGitDir(gitFolder)\n                                .readEnvironment() // scan environment GIT_* variables\n                                .findGitDir() // scan up the file system tree\n                                .build();\n\n                        Git git = new Git(repository);\n                        String remote = getRemote(git, branch);\n                        if (remote == null) {\n                            LOG.warn(\"Could not find remote git URL for folder \" + basedir.getAbsolutePath());\n                        } else {\n                            doAddCommitAndPushFiles(git, credentials, personIdent, remote, branch);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            handleException(e);\n        }\n    }","id":96114,"modified_method":"@Override\n    public void firePostCompleteActions(String name, ExecutionRequest executionRequest, RestUIContext context, CommandController controller, ExecutionResult results, HttpServletRequest request) {\n        UserDetails userDetails = gitUserHelper.createUserDetails(request);\n\n        String user = userDetails.getUser();\n        String password = userDetails.getPassword();\n        String authorEmail = userDetails.getEmail();\n        String address = userDetails.getAddress();\n        String branch = \"master\";\n\n        try {\n            CredentialsProvider credentials = userDetails.createCredentialsProfivder();\n            PersonIdent personIdent = new PersonIdent(user, authorEmail);\n\n            if (name.equals(PROJECT_NEW_COMMAND)) {\n                String targetLocation = null;\n                String named = null;\n                List<Map<String, String>> inputList = executionRequest.getInputList();\n                for (Map<String, String> map : inputList) {\n                    if (Strings.isNullOrEmpty(targetLocation)) {\n                        targetLocation = map.get(\"targetLocation\");\n                    }\n                    if (Strings.isNullOrEmpty(named)) {\n                        named = map.get(\"named\");\n                    }\n                }\n                if (Strings.isNullOrEmpty(targetLocation)) {\n                    LOG.warn(\"No targetLocation could be found!\");\n                } else if (Strings.isNullOrEmpty(named)) {\n                    LOG.warn(\"No named could be found!\");\n                } else {\n                    File basedir = new File(targetLocation, named);\n                    if (!basedir.isDirectory() || !basedir.exists()) {\n                        LOG.warn(\"Generated project folder does not exist: \" + basedir.getAbsolutePath());\n                    } else {\n                        InitCommand initCommand = Git.init();\n                        initCommand.setDirectory(basedir);\n                        Git git = initCommand.call();\n                        LOG.info(\"Initialised an empty git configuration repo at {}\", basedir.getAbsolutePath());\n\n                        // lets create the repository\n                        GitRepoClient repoClient = userDetails.createRepoClient();\n                        CreateRepositoryDTO createRepository = new CreateRepositoryDTO();\n                        createRepository.setName(named);\n\n                        String fullName = null;\n                        RepositoryDTO repository = repoClient.createRepository(createRepository);\n                        if (repository != null) {\n                            if (LOG.isDebugEnabled()) {\n                                LOG.debug(\"Got repository: \" + toJson(repository));\n                            }\n                            fullName = repository.getFullName();\n                        }\n                        if (Strings.isNullOrEmpty(fullName)) {\n                            fullName = user + \"/\" + named;\n                        }\n                        String htmlUrl = address + user + \"/\" + named;\n                        String remote = address + user + \"/\" + named + \".git\";\n                        //results.appendOut(\"Created git repository \" + fullName + \" at: \" + htmlUrl);\n\n                        results.setOutputProperty(\"fullName\", fullName);\n                        results.setOutputProperty(\"cloneUrl\", remote);\n                        results.setOutputProperty(\"htmlUrl\", htmlUrl);\n\n                        // now lets import the code and publish\n                        LOG.info(\"Using remote: \" + remote);\n                        configureBranch(git, branch, remote);\n\n                        createKubernetesResources(user, named, remote, branch, repoClient, address);\n\n                        doAddCommitAndPushFiles(git, credentials, personIdent, remote, branch);\n                    }\n                }\n            } else {\n                File basedir = context.getInitialSelectionFile();\n                String absolutePath = basedir != null ? basedir.getAbsolutePath() : null;\n                if (basedir != null) {\n                    File gitFolder = new File(basedir, \".git\");\n                    if (gitFolder.exists() && gitFolder.isDirectory()) {\n                        FileRepositoryBuilder builder = new FileRepositoryBuilder();\n                        Repository repository = builder.setGitDir(gitFolder)\n                                .readEnvironment() // scan environment GIT_* variables\n                                .findGitDir() // scan up the file system tree\n                                .build();\n\n                        Git git = new Git(repository);\n                        String remote = getRemote(git, branch);\n                        if (remote == null) {\n                            LOG.warn(\"Could not find remote git URL for folder \" + basedir.getAbsolutePath());\n                        } else {\n                            doAddCommitAndPushFiles(git, credentials, personIdent, remote, branch);\n                        }\n                    }\n                }\n            }\n        } catch (Exception e) {\n            handleException(e);\n        }\n    }","commit_id":"48b052ffed3bbab27a4c009f51352546fd0da2fc","url":"https://github.com/fabric8io/fabric8"},{"original_method":"public UserDetails createUserDetails(HttpServletRequest request) {\n        String user = gitUser;\n        String password = gitPassword;\n        String authorization = request.getHeader(\"Authorization\");\n        if (!Strings.isNullOrEmpty(authorization)) {\n            String basicPrefix = \"basic\";\n            String lower = authorization.toLowerCase();\n            if (lower.startsWith(basicPrefix)) {\n                String base64Credentials = authorization.substring(basicPrefix.length()).trim();\n                String credentials = new String(Base64.decode(base64Credentials),\n                        Charset.forName(\"UTF-8\"));\n                // credentials = username:password\n                String[] values = credentials.split(\":\", 2);\n                if (values != null && values.length > 1) {\n                    user = values[0];\n                    password = values[1];\n                }\n            }\n        }\n        return new UserDetails(user, password);\n    }","id":96115,"modified_method":"public UserDetails createUserDetails(HttpServletRequest request) {\n        String user = gitUser;\n        String password = gitPassword;\n        String authorization = request.getHeader(\"Authorization\");\n        if (!Strings.isNullOrEmpty(authorization)) {\n            String basicPrefix = \"basic\";\n            String lower = authorization.toLowerCase();\n            if (lower.startsWith(basicPrefix)) {\n                String base64Credentials = authorization.substring(basicPrefix.length()).trim();\n                String credentials = new String(Base64.decode(base64Credentials),\n                        Charset.forName(\"UTF-8\"));\n                // credentials = username:password\n                String[] values = credentials.split(\":\", 2);\n                if (values != null && values.length > 1) {\n                    user = values[0];\n                    password = values[1];\n                }\n            }\n        }\n        return new UserDetails(address, user, password);\n    }","commit_id":"48b052ffed3bbab27a4c009f51352546fd0da2fc","url":"https://github.com/fabric8io/fabric8"},{"original_method":"@GET\n    public List<ProjectDTO> getProjects() {\n        return projectsModel.getProjects();\n    }","id":96116,"modified_method":"@GET\n    public List<ProjectDTO> getUserProjects() {\n        UserDetails userDetails = gitUserHelper.createUserDetails(request);\n        GitRepoClient repoClient = userDetails.createRepoClient();\n        LOG.debug(\"Listing repos for \" + userDetails.getUser());\n        List<RepositoryDTO> repositoryDTOs = repoClient.listRepositories();\n        repositoryCache.updateUserRepositories(repositoryDTOs);\n\n        List<ProjectDTO> answer = new ArrayList<>();\n        for (RepositoryDTO repositoryDTO : repositoryDTOs) {\n            ProjectDTO project = createProject(repositoryDTO);\n            if (project != null) {\n                answer.add(project);\n            }\n        }\n        return answer;\n    }","commit_id":"48b052ffed3bbab27a4c009f51352546fd0da2fc","url":"https://github.com/fabric8io/fabric8"},{"original_method":"public File getInitialSelectionFile() {\n        if (selection != null) {\n            String fullyQualifiedName = selection.getFullyQualifiedName();\n            if (fullyQualifiedName != null) {\n                return new File(fullyQualifiedName);\n            }\n            System.out.println(\"==== no fully qualified name!\");\n            String name = selection.getName();\n            if (name != null) {\n                return new File(name);\n            }\n            System.out.println(\"=========== Resource has no name! \" + selection);\n        } else {\n            System.out.println(\"============ no selection!\");\n        }\n        return null;\n    }","id":96117,"modified_method":"public File getInitialSelectionFile() {\n        if (selection != null) {\n            String fullyQualifiedName = selection.getFullyQualifiedName();\n            if (fullyQualifiedName != null) {\n                return new File(fullyQualifiedName);\n            }\n            String name = selection.getName();\n            if (name != null) {\n                return new File(name);\n            }\n        }\n        return null;\n    }","commit_id":"48b052ffed3bbab27a4c009f51352546fd0da2fc","url":"https://github.com/fabric8io/fabric8"},{"original_method":"public UserDetails(String user, String password) {\n        this.user = user;\n        this.password = password;\n    }","id":96118,"modified_method":"public UserDetails(String address, String user, String password) {\n        this.user = user;\n        this.password = password;\n        this.address = address;\n    }","commit_id":"48b052ffed3bbab27a4c009f51352546fd0da2fc","url":"https://github.com/fabric8io/fabric8"},{"original_method":"public BundleContextProvider(ServerInstanceWrapper wrapper)\n    {\n        _wrapper = wrapper;\n    }","id":96119,"modified_method":"public BundleContextProvider(ServerInstanceWrapper wrapper)\n    {\n        super(wrapper);\n    }","commit_id":"4a312f7cb6247b34fdf09ef1ce563d84e9ea2530","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\n     * @param bundle\n     * @param contextFiles\n     * @return\n     */\n    public boolean bundleAdded (Bundle bundle)\n    {\n        if (bundle == null)\n            return false;\n\n        String contextFiles  = (String)bundle.getHeaders().get(OSGiWebappConstants.JETTY_CONTEXT_FILE_PATH);\n        if (contextFiles == null)\n            return false;\n        \n        boolean added = false;\n        //bundle defines JETTY_CONTEXT_FILE_PATH header,\n        //a comma separated list of context xml files that each define a ContextHandler\n        //TODO: (could be WebAppContexts)       \n        String[] tmp = contextFiles.split(\",;\");\n        for (String contextFile : tmp)\n        {\n            String originId = bundle.getSymbolicName() + \"-\" + bundle.getVersion().toString() + \"-\"+contextFile;\n            BundleApp app = new BundleApp(_deploymentManager, this, originId, bundle, contextFile);\n            _appMap.put(originId,app);\n            List<App> apps = _bundleMap.get(bundle);\n            if (apps == null)\n            {\n                apps = new ArrayList<App>();\n                _bundleMap.put(bundle, apps);\n            }\n            apps.add(app);\n            _deploymentManager.addApp(app);\n        }\n        \n        return added; //true if even 1 context from this bundle was added\n    }","id":96120,"modified_method":"/**\n     * @param bundle\n     * @param contextFiles\n     * @return\n     */\n    public boolean bundleAdded (Bundle bundle)\n    {\n        if (bundle == null)\n            return false;\n\n        String contextFiles  = (String)bundle.getHeaders().get(OSGiWebappConstants.JETTY_CONTEXT_FILE_PATH);\n        if (contextFiles == null)\n            contextFiles = (String)bundle.getHeaders().get(OSGiWebappConstants.SERVICE_PROP_CONTEXT_FILE_PATH);\n        \n        if (contextFiles == null)\n            return false;\n        \n        boolean added = false;\n        //bundle defines JETTY_CONTEXT_FILE_PATH header,\n        //a comma separated list of context xml files that each define a ContextHandler\n        //TODO: (could be WebAppContexts)       \n        String[] tmp = contextFiles.split(\",;\");\n        for (String contextFile : tmp)\n        {\n            String originId = bundle.getSymbolicName() + \"-\" + bundle.getVersion().toString() + \"-\"+contextFile;\n            BundleApp app = new BundleApp(getDeploymentManager(), this, originId, bundle, contextFile);\n            _appMap.put(originId,app);\n            List<App> apps = _bundleMap.get(bundle);\n            if (apps == null)\n            {\n                apps = new ArrayList<App>();\n                _bundleMap.put(bundle, apps);\n            }\n            apps.add(app);\n            getDeploymentManager().addApp(app);\n        }\n        \n        return added; //true if even 1 context from this bundle was added\n    }","commit_id":"4a312f7cb6247b34fdf09ef1ce563d84e9ea2530","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Override\n    protected void doStart() throws Exception\n    {\n        //register as an osgi service for deploying contexts defined in a bundle, advertising the name of the jetty Server instance we are related to\n        Dictionary<String,String> properties = new Hashtable<String,String>();\n        properties.put(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME, _wrapper.getManagedServerName());\n        _serviceRegForBundles = FrameworkUtil.getBundle(this.getClass()).getBundleContext().registerService(BundleProvider.class.getName(), this, properties);\n        //register as an osgi service for deploying contexts, advertising the name of the jetty Server instance we are related to\n        _serviceRegForServices = FrameworkUtil.getBundle(this.getClass()).getBundleContext().registerService(ServiceProvider.class.getName(), this, properties);\n        super.doStart();\n    }","id":96121,"modified_method":"@Override\n    protected void doStart() throws Exception\n    {\n        //register as an osgi service for deploying contexts defined in a bundle, advertising the name of the jetty Server instance we are related to\n        Dictionary<String,String> properties = new Hashtable<String,String>();\n        properties.put(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME, getServerInstanceWrapper().getManagedServerName());\n        _serviceRegForBundles = FrameworkUtil.getBundle(this.getClass()).getBundleContext().registerService(BundleProvider.class.getName(), this, properties);\n        super.doStart();\n    }","commit_id":"4a312f7cb6247b34fdf09ef1ce563d84e9ea2530","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/** \n     * Bundle has been removed. If it was a context we deployed, undeploy it.\n     * @param bundle\n     * \n     * @return true if this was a context we had deployed, false otherwise\n     */\n    public boolean bundleRemoved (Bundle bundle)\n    {\n        List<App> apps = _bundleMap.remove(bundle);\n        boolean removed = false;\n        if (apps != null)\n        {\n            for (App app:apps)\n            {\n                _appMap.remove(app.getOriginId());\n                _deploymentManager.removeApp(app);\n                removed = true;\n            }\n        }\n        return removed; //true if even 1 context was removed associated with this bundle\n    }","id":96122,"modified_method":"/** \n     * Bundle has been removed. If it was a context we deployed, undeploy it.\n     * @param bundle\n     * \n     * @return true if this was a context we had deployed, false otherwise\n     */\n    public boolean bundleRemoved (Bundle bundle)\n    {\n        List<App> apps = _bundleMap.remove(bundle);\n        boolean removed = false;\n        if (apps != null)\n        {\n            for (App app:apps)\n            {\n                _appMap.remove(app.getOriginId());\n                getDeploymentManager().removeApp(app);\n                removed = true;\n            }\n        }\n        return removed; //true if even 1 context was removed associated with this bundle\n    }","commit_id":"4a312f7cb6247b34fdf09ef1ce563d84e9ea2530","url":"https://github.com/eclipse/jetty.project"},{"original_method":"@Override\n    protected void doStop() throws Exception\n    {\n        //unregister ourselves\n        if (_serviceRegForBundles != null)\n        {\n            try\n            {\n                _serviceRegForBundles.unregister();\n            }\n            catch (Exception e)\n            {\n                LOG.warn(e);\n            }\n        }\n        \n        if (_serviceRegForServices != null)\n        {\n            try\n            {\n                _serviceRegForServices.unregister();\n            }\n            catch (Exception e)\n            {\n                LOG.warn(e);\n            }\n        }\n        super.doStop();\n    }","id":96123,"modified_method":"@Override\n    protected void doStop() throws Exception\n    {\n        //unregister ourselves\n        if (_serviceRegForBundles != null)\n        {\n            try\n            {\n                _serviceRegForBundles.unregister();\n            }\n            catch (Exception e)\n            {\n                LOG.warn(e);\n            }\n        }\n    }","commit_id":"4a312f7cb6247b34fdf09ef1ce563d84e9ea2530","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\n     * Called by the JettyBootStrapActivator. If the system property jetty.home\n     * is defined and points to a folder, creates a corresponding jetty\n     * server.\n     * <p>\n     * If the system property jetty.home.bundle is defined and points to a\n     * bundle, look for the configuration of jetty inside that bundle.\n     * <\/p>\n     * <p>\n     * In both cases reads the system property 'jetty.etc.config.urls' to locate\n     * the configuration files for the deployed jetty. It is a comma separated\n     * list of URLs or relative paths inside the bundle or folder to the config\n     * files. If undefined it defaults to 'etc/jetty.xml'. In the case of the jetty.home.bundle,\n     * if no etc/jetty.xml file is found in the bundle, it will look for \n     * /jettyhome/etc/jetty-osgi-default.xml\n     * <\/p>\n     * <p>\n     * In both cases the system properties jetty.host, jetty.port and\n     * jetty.port.ssl are passed to the configuration files that might use them\n     * as part of their properties.\n     * <\/p>\n     */\n    public static void startJettyAtJettyHome(BundleContext bundleContext) throws Exception\n    {\n        String jettyHomeSysProp = System.getProperty(OSGiServerConstants.JETTY_HOME);\n        String jettyHomeBundleSysProp = System.getProperty(OSGiServerConstants.JETTY_HOME_BUNDLE);\n        File jettyHome = null;\n        Bundle jettyHomeBundle = null;\n        if (jettyHomeSysProp != null)\n        {\n            jettyHomeSysProp = resolvePropertyValue(jettyHomeSysProp);\n            // bug 329621\n            if (jettyHomeSysProp.startsWith(\"\\\"\") && jettyHomeSysProp.endsWith(\"\\\"\") || (jettyHomeSysProp.startsWith(\"'\") && jettyHomeSysProp.endsWith(\"'\")))\n            {\n                jettyHomeSysProp = jettyHomeSysProp.substring(1, jettyHomeSysProp.length() - 1);\n            }\n            if (jettyHomeBundleSysProp != null)\n            {\n                LOG.warn(\"Both jetty.home and jetty.home.bundle property defined: jetty.home.bundle ignored.\");\n            }\n            jettyHome = new File(jettyHomeSysProp);\n            if (!jettyHome.exists() || !jettyHome.isDirectory())\n            {\n                LOG.warn(\"Unable to locate the jetty.home folder \" + jettyHomeSysProp);\n                return;\n            }\n        }\n        else if (jettyHomeBundleSysProp != null)\n        {\n            jettyHomeBundleSysProp = resolvePropertyValue(jettyHomeBundleSysProp);\n            System.err.println(\"jetty home bundle sysprop = \"+jettyHomeBundleSysProp);\n            for (Bundle b : bundleContext.getBundles())\n            {\n                if (b.getSymbolicName().equals(jettyHomeBundleSysProp))\n                {\n                    jettyHomeBundle = b;\n                    break;\n                }\n            }\n            if (jettyHomeBundle == null)\n            {\n                LOG.warn(\"Unable to find the jetty.home.bundle named \" + jettyHomeSysProp);\n                return;\n            }\n\n        }\n        if (jettyHome == null && jettyHomeBundle == null)\n        {\n            LOG.warn(\"No default jetty created.\");\n            return;\n        }\n\n        Server server = new Server();\n        Dictionary<String,String> properties = new Hashtable<String,String>();\n        properties.put(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME, OSGiServerConstants.MANAGED_JETTY_SERVER_DEFAULT_NAME);\n\n        String configURLs = jettyHome != null ? getJettyConfigurationURLs(jettyHome) : getJettyConfigurationURLs(jettyHomeBundle);\n        properties.put(OSGiServerConstants.MANAGED_JETTY_XML_CONFIG_URLS, configURLs);\n\n        LOG.info(\"Configuring the default jetty server with \" + configURLs);\n\n        // these properties usually are the ones passed to this type of\n        // configuration.\n        setProperty(properties, OSGiServerConstants.JETTY_HOME, System.getProperty(OSGiServerConstants.JETTY_HOME));\n        setProperty(properties, OSGiServerConstants.JETTY_HOST, System.getProperty(OSGiServerConstants.JETTY_HOST));\n        setProperty(properties, OSGiServerConstants.JETTY_PORT, System.getProperty(OSGiServerConstants.JETTY_PORT));\n        setProperty(properties, OSGiServerConstants.JETTY_PORT_SSL, System.getProperty(OSGiServerConstants.JETTY_PORT_SSL));\n\n        //register the Server instance as an OSGi service.\n        bundleContext.registerService(Server.class.getName(), server, properties);\n    }","id":96124,"modified_method":"/**\n     * Called by the JettyBootStrapActivator. If the system property jetty.home\n     * is defined and points to a folder, creates a corresponding jetty\n     * server.\n     * <p>\n     * If the system property jetty.home.bundle is defined and points to a\n     * bundle, look for the configuration of jetty inside that bundle.\n     * <\/p>\n     * <p>\n     * In both cases reads the system property 'jetty.etc.config.urls' to locate\n     * the configuration files for the deployed jetty. It is a comma separated\n     * list of URLs or relative paths inside the bundle or folder to the config\n     * files. If undefined it defaults to 'etc/jetty.xml'. In the case of the jetty.home.bundle,\n     * if no etc/jetty.xml file is found in the bundle, it will look for \n     * /jettyhome/etc/jetty-osgi-default.xml\n     * <\/p>\n     * <p>\n     * In both cases the system properties jetty.host, jetty.port and\n     * jetty.port.ssl are passed to the configuration files that might use them\n     * as part of their properties.\n     * <\/p>\n     */\n    public static void startJettyAtJettyHome(BundleContext bundleContext) throws Exception\n    {\n        String jettyHomeSysProp = System.getProperty(OSGiServerConstants.JETTY_HOME);\n        String jettyHomeBundleSysProp = System.getProperty(OSGiServerConstants.JETTY_HOME_BUNDLE);\n        File jettyHome = null;\n        Bundle jettyHomeBundle = null;\n        if (jettyHomeSysProp != null)\n        {\n            jettyHomeSysProp = resolvePropertyValue(jettyHomeSysProp);\n            // bug 329621\n            if (jettyHomeSysProp.startsWith(\"\\\"\") && jettyHomeSysProp.endsWith(\"\\\"\") || (jettyHomeSysProp.startsWith(\"'\") && jettyHomeSysProp.endsWith(\"'\")))\n            {\n                jettyHomeSysProp = jettyHomeSysProp.substring(1, jettyHomeSysProp.length() - 1);\n            }\n            if (jettyHomeBundleSysProp != null)\n            {\n                LOG.warn(\"Both jetty.home and jetty.home.bundle property defined: jetty.home.bundle ignored.\");\n            }\n            jettyHome = new File(jettyHomeSysProp);\n            if (!jettyHome.exists() || !jettyHome.isDirectory())\n            {\n                LOG.warn(\"Unable to locate the jetty.home folder \" + jettyHomeSysProp);\n                return;\n            }\n        }\n        else if (jettyHomeBundleSysProp != null)\n        {\n            jettyHomeBundleSysProp = resolvePropertyValue(jettyHomeBundleSysProp);\n            for (Bundle b : bundleContext.getBundles())\n            {\n                if (b.getSymbolicName().equals(jettyHomeBundleSysProp))\n                {\n                    jettyHomeBundle = b;\n                    break;\n                }\n            }\n            if (jettyHomeBundle == null)\n            {\n                LOG.warn(\"Unable to find the jetty.home.bundle named \" + jettyHomeSysProp);\n                return;\n            }\n\n        }\n        if (jettyHome == null && jettyHomeBundle == null)\n        {\n            LOG.warn(\"No default jetty created.\");\n            return;\n        }\n\n        Server server = new Server();\n        Dictionary<String,String> properties = new Hashtable<String,String>();\n        properties.put(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME, OSGiServerConstants.MANAGED_JETTY_SERVER_DEFAULT_NAME);\n\n        String configURLs = jettyHome != null ? getJettyConfigurationURLs(jettyHome) : getJettyConfigurationURLs(jettyHomeBundle);\n        properties.put(OSGiServerConstants.MANAGED_JETTY_XML_CONFIG_URLS, configURLs);\n\n        LOG.info(\"Configuring the default jetty server with \" + configURLs);\n\n        // these properties usually are the ones passed to this type of\n        // configuration.\n        setProperty(properties, OSGiServerConstants.JETTY_HOME, System.getProperty(OSGiServerConstants.JETTY_HOME));\n        setProperty(properties, OSGiServerConstants.JETTY_HOST, System.getProperty(OSGiServerConstants.JETTY_HOST));\n        setProperty(properties, OSGiServerConstants.JETTY_PORT, System.getProperty(OSGiServerConstants.JETTY_PORT));\n        setProperty(properties, OSGiServerConstants.JETTY_PORT_SSL, System.getProperty(OSGiServerConstants.JETTY_PORT_SSL));\n\n        //register the Server instance as an OSGi service.\n        bundleContext.registerService(Server.class.getName(), server, properties);\n    }","commit_id":"4a312f7cb6247b34fdf09ef1ce563d84e9ea2530","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\n     * Minimum setup for the location of the configuration files given a\n     * configuration embedded inside a bundle. Reads the system property\n     * jetty.etc.config.urls and look for the corresponding jetty configuration\n     * files that will be used to setup the jetty server.\n     * \n     * @param jettyhome\n     * @return\n     */\n    private static String getJettyConfigurationURLs(Bundle configurationBundle)\n    {\n        System.err.println(\"GETTING JETTY PROPS FROM BUNDLE: \"+configurationBundle.getSymbolicName());\n        String files = System.getProperty(JETTY_ETC_FILES, DEFAULT_JETTY_ETC_FILES);\n       \n        StringTokenizer tokenizer = new StringTokenizer(files, \";,\", false);\n        StringBuilder res = new StringBuilder();\n\n        while (tokenizer.hasMoreTokens())\n        {\n            String etcFile = tokenizer.nextToken().trim();\n            if (etcFile.startsWith(\"/\") || etcFile.indexOf(\":\") != -1)\n            {\n                //file path is absolute\n                appendToCommaSeparatedList(res, etcFile);\n            }\n            else\n            {\n                //relative file path\n                System.err.println(\"Finding \"+etcFile+\" in bundle \"+configurationBundle);\n                Enumeration<URL> enUrls = BundleFileLocatorHelperFactory.getFactory().getHelper().findEntries(configurationBundle, etcFile);\n                \n              \n                // default for org.eclipse.osgi.boot where we look inside\n                // jettyhome for the default embedded configuration.\n                // default inside jettyhome. this way fragments to the bundle\n                // can define their own configuration.\n                if ((enUrls == null || !enUrls.hasMoreElements()))\n                {\n                    String tmp = DEFAULT_JETTYHOME+etcFile;\n                    enUrls = BundleFileLocatorHelperFactory.getFactory().getHelper().findEntries(configurationBundle, tmp);                    \n                    LOG.info(\"Configuring jetty from bundle: \"\n                                       + configurationBundle.getSymbolicName()\n                                       + \" with \"+tmp);\n                    \n                    System.err.println(configurationBundle.getEntry(tmp));\n                }\n                if (enUrls == null || !enUrls.hasMoreElements())\n                {\n                    throw new IllegalStateException (\"Unable to locate a jetty configuration file for \" + etcFile);\n                }\n                if (enUrls != null)\n                {\n                    while (enUrls.hasMoreElements())\n                    {\n                        URL url = BundleFileLocatorHelperFactory.getFactory().getHelper().getFileURL(enUrls.nextElement());\n                        System.err.println(\"Got url: \"+url +\" from \"+url.getClass().getName());\n                        appendToCommaSeparatedList(res, url.toString());\n                    }\n                }\n            }\n        }\n        return res.toString();\n    }","id":96125,"modified_method":"/**\n     * Minimum setup for the location of the configuration files given a\n     * configuration embedded inside a bundle. Reads the system property\n     * jetty.etc.config.urls and look for the corresponding jetty configuration\n     * files that will be used to setup the jetty server.\n     * \n     * @param jettyhome\n     * @return\n     */\n    private static String getJettyConfigurationURLs(Bundle configurationBundle)\n    {\n        String files = System.getProperty(JETTY_ETC_FILES, DEFAULT_JETTY_ETC_FILES);\n       \n        StringTokenizer tokenizer = new StringTokenizer(files, \";,\", false);\n        StringBuilder res = new StringBuilder();\n\n        while (tokenizer.hasMoreTokens())\n        {\n            String etcFile = tokenizer.nextToken().trim();\n            if (etcFile.startsWith(\"/\") || etcFile.indexOf(\":\") != -1)\n            {\n                //file path is absolute\n                appendToCommaSeparatedList(res, etcFile);\n            }\n            else\n            {\n                //relative file path\n                Enumeration<URL> enUrls = BundleFileLocatorHelperFactory.getFactory().getHelper().findEntries(configurationBundle, etcFile);\n                      \n                // default for org.eclipse.osgi.boot where we look inside\n                // jettyhome for the default embedded configuration.\n                // default inside jettyhome. this way fragments to the bundle\n                // can define their own configuration.\n                if ((enUrls == null || !enUrls.hasMoreElements()))\n                {\n                    String tmp = DEFAULT_JETTYHOME+etcFile;\n                    enUrls = BundleFileLocatorHelperFactory.getFactory().getHelper().findEntries(configurationBundle, tmp);                    \n                    LOG.info(\"Configuring jetty from bundle: \"\n                                       + configurationBundle.getSymbolicName()\n                                       + \" with \"+tmp);\n                }\n                if (enUrls == null || !enUrls.hasMoreElements())\n                {\n                    throw new IllegalStateException (\"Unable to locate a jetty configuration file for \" + etcFile);\n                }\n                if (enUrls != null)\n                {\n                    while (enUrls.hasMoreElements())\n                    {\n                        URL url = BundleFileLocatorHelperFactory.getFactory().getHelper().getFileURL(enUrls.nextElement());\n                        appendToCommaSeparatedList(res, url.toString());\n                    }\n                }\n            }\n        }\n        return res.toString();\n    }","commit_id":"4a312f7cb6247b34fdf09ef1ce563d84e9ea2530","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\n     * Stop the activator.\n     * \n     * @see\n     * org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)\n     */\n    public void stop(BundleContext context) throws Exception\n    {\n        try\n        {\n\n            if (_webBundleTracker != null)\n            {\n                _webBundleTracker.close();\n                _webBundleTracker = null;\n            }\n            if (_jettyContextHandlerTracker != null)\n            {\n                _jettyContextHandlerTracker.stop();\n                context.removeServiceListener(_jettyContextHandlerTracker);\n                _jettyContextHandlerTracker = null;\n            }\n            if (_jettyServerServiceTracker != null)\n            {\n                _jettyServerServiceTracker.stop();\n                context.removeServiceListener(_jettyServerServiceTracker);\n                _jettyServerServiceTracker = null;\n            }\n            if (_packageAdminServiceTracker != null)\n            {\n                _packageAdminServiceTracker.stop();\n                context.removeServiceListener(_packageAdminServiceTracker);\n                _packageAdminServiceTracker = null;\n            }\n            if (_registeredServer != null)\n            {\n                try\n                {\n                    _registeredServer.unregister();\n                }\n                catch (IllegalArgumentException ill)\n                {\n                    // already unregistered.\n                }\n                finally\n                {\n                    _registeredServer = null;\n                }\n            }\n        }\n        finally\n        {\n            INSTANCE = null;\n        }\n    }","id":96126,"modified_method":"/**\n     * Stop the activator.\n     * \n     * @see\n     * org.osgi.framework.BundleActivator#stop(org.osgi.framework.BundleContext)\n     */\n    public void stop(BundleContext context) throws Exception\n    {\n        try\n        {\n\n            if (_webBundleTracker != null)\n            {\n                _webBundleTracker.close();\n                _webBundleTracker = null;\n            }\n            if (_jettyContextHandlerTracker != null)\n            {\n                context.removeServiceListener(_jettyContextHandlerTracker);\n                _jettyContextHandlerTracker = null;\n            }\n            if (_jettyServerServiceTracker != null)\n            {\n                _jettyServerServiceTracker.stop();\n                context.removeServiceListener(_jettyServerServiceTracker);\n                _jettyServerServiceTracker = null;\n            }\n            if (_packageAdminServiceTracker != null)\n            {\n                _packageAdminServiceTracker.stop();\n                context.removeServiceListener(_packageAdminServiceTracker);\n                _packageAdminServiceTracker = null;\n            }\n            if (_registeredServer != null)\n            {\n                try\n                {\n                    _registeredServer.unregister();\n                }\n                catch (IllegalArgumentException ill)\n                {\n                    // already unregistered.\n                }\n                finally\n                {\n                    _registeredServer = null;\n                }\n            }\n        }\n        finally\n        {\n            INSTANCE = null;\n        }\n    }","commit_id":"4a312f7cb6247b34fdf09ef1ce563d84e9ea2530","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public Map<ServiceReference, ServiceProvider> getDeployers(String managedServerName)\n    {\n        if (managedServerName == null)\n            managedServerName = OSGiServerConstants.MANAGED_JETTY_SERVER_DEFAULT_NAME;\n        \n        Map<ServiceReference, ServiceProvider> candidates = new HashMap<ServiceReference, ServiceProvider>();\n        \n        ServiceReference[] references = _serviceTracker.getServiceReferences();\n        if (references != null)\n        {\n            for (ServiceReference ref:references)\n            {\n                String name = (String)ref.getProperty(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME);\n                if (managedServerName.equalsIgnoreCase(name))\n                {\n                    ServiceProvider candidate = (ServiceProvider)_serviceTracker.getService(ref);\n                    if (candidate != null)\n                        candidates.put(ref, candidate);\n                }\n            }\n        }\n       return candidates;\n    }","id":96127,"modified_method":"/**\n     * @param managedServerName\n     * @return\n     */\n    public Map<ServiceReference, ServiceProvider> getDeployers(String managedServerName)\n    {\n        if (managedServerName == null)\n            managedServerName = OSGiServerConstants.MANAGED_JETTY_SERVER_DEFAULT_NAME;\n        \n        Map<ServiceReference, ServiceProvider> candidates = new HashMap<ServiceReference, ServiceProvider>();\n        \n        ServiceReference[] references = _serviceTracker.getServiceReferences();\n        if (references != null)\n        {\n            for (ServiceReference ref:references)\n            {\n                String name = (String)ref.getProperty(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME);\n                if (managedServerName.equalsIgnoreCase(name))\n                {\n                    ServiceProvider candidate = (ServiceProvider)_serviceTracker.getService(ref);\n                    if (candidate != null)\n                        candidates.put(ref, candidate);\n                }\n            }\n        }\n       return candidates;\n    }","commit_id":"4a312f7cb6247b34fdf09ef1ce563d84e9ea2530","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/** \n     * @see org.osgi.framework.ServiceListener#serviceChanged(org.osgi.framework.ServiceEvent)\n     */\n    public void serviceChanged(ServiceEvent ev)\n    {\n        ServiceReference sr = ev.getServiceReference();\n        switch (ev.getType())\n        {\n            case ServiceEvent.MODIFIED:\n            case ServiceEvent.UNREGISTERING:\n            {\n                BundleContext context = FrameworkUtil.getBundle(JettyBootstrapActivator.class).getBundleContext();\n                ContextHandler contextHandler = (ContextHandler) context.getService(sr);\n              \n                \n                //Get a jetty deployer targetted to the named server instance, or the default one if not named\n                String serverName = (String)sr.getProperty(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME);    \n                Map<ServiceReference, ServiceProvider> candidates = getDeployers(serverName);\n                if (candidates != null)\n                {\n                    boolean removed = false;\n                    Iterator<Entry<ServiceReference, ServiceProvider>> itor = candidates.entrySet().iterator();\n                    while (!removed && itor.hasNext())\n                    {\n                        Entry<ServiceReference, ServiceProvider> e = itor.next();\n                        removed = e.getValue().serviceRemoved(sr, contextHandler);\n                    }\n                }\n            }\n            if (ev.getType() == ServiceEvent.UNREGISTERING)\n            {\n                break;\n            }\n            else\n            {\n                // modified, meaning: we reload it. now that we stopped it;\n                // we can register it.\n            }\n            case ServiceEvent.REGISTERED:\n            {\n                System.err.println(\"New Service registered that could be webapp/context\");\n                Bundle contributor = sr.getBundle();\n                BundleContext context = FrameworkUtil.getBundle(JettyBootstrapActivator.class).getBundleContext();\n                ContextHandler contextHandler = (ContextHandler) context.getService(sr);\n                if (contextHandler.getServer() != null)\n                {\n                    // is configured elsewhere.\n                    System.err.println(\"Already configured\");\n                    return;\n                }\n\n                System.err.println(\"Service registered from bundle: \"+contributor.getSymbolicName());\n                System.err.println(\"war=\"+sr.getProperty(\"war\"));\n                \n                //Get a jetty deployer targetted to the named server instance, or the default one if not named\n                String serverName = (String)sr.getProperty(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME);    \n                Map<ServiceReference, ServiceProvider> candidates = getDeployers(serverName);\n                if (candidates != null)\n                {\n                    System.err.println(\"Got some candidates\");\n                    boolean added = false;\n                    Iterator<Entry<ServiceReference, ServiceProvider>> itor = candidates.entrySet().iterator();\n                    while (!added && itor.hasNext())\n                    {\n                        Entry<ServiceReference, ServiceProvider> e = itor.next();\n                        System.err.println(\"Trying ServiceProvider \"+e.getValue());\n                        added = e.getValue().serviceAdded(sr, contextHandler);\n                    }\n                }\n                break;\n            }\n        }\n    }","id":96128,"modified_method":"/** \n     * @see org.osgi.framework.ServiceListener#serviceChanged(org.osgi.framework.ServiceEvent)\n     */\n    public void serviceChanged(ServiceEvent ev)\n    {\n        ServiceReference sr = ev.getServiceReference();\n        switch (ev.getType())\n        {\n            case ServiceEvent.MODIFIED:\n            case ServiceEvent.UNREGISTERING:\n            {\n                BundleContext context = FrameworkUtil.getBundle(JettyBootstrapActivator.class).getBundleContext();\n                ContextHandler contextHandler = (ContextHandler) context.getService(sr);\n              \n                \n                //Get a jetty deployer targetted to the named server instance, or the default one if not named\n                String serverName = (String)sr.getProperty(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME);    \n                Map<ServiceReference, ServiceProvider> candidates = getDeployers(serverName);\n                if (candidates != null)\n                {\n                    boolean removed = false;\n                    Iterator<Entry<ServiceReference, ServiceProvider>> itor = candidates.entrySet().iterator();\n                    while (!removed && itor.hasNext())\n                    {\n                        Entry<ServiceReference, ServiceProvider> e = itor.next();\n                        removed = e.getValue().serviceRemoved(sr, contextHandler);\n                    }\n                }\n            }\n            if (ev.getType() == ServiceEvent.UNREGISTERING)\n            {\n                break;\n            }\n            else\n            {\n                // modified, meaning: we reload it. now that we stopped it;\n                // we can register it.\n            }\n            case ServiceEvent.REGISTERED:\n            {\n                Bundle contributor = sr.getBundle();\n                BundleContext context = FrameworkUtil.getBundle(JettyBootstrapActivator.class).getBundleContext();\n                ContextHandler contextHandler = (ContextHandler) context.getService(sr);\n                if (contextHandler.getServer() != null)\n                {\n                    // is configured elsewhere.\n                    return;\n                }\n                \n                //Get a jetty deployer targetted to the named server instance, or the default one if not named\n                String serverName = (String)sr.getProperty(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME);    \n                Map<ServiceReference, ServiceProvider> candidates = getDeployers(serverName);\n                if (candidates != null)\n                {\n                    boolean added = false;\n                    Iterator<Entry<ServiceReference, ServiceProvider>> itor = candidates.entrySet().iterator();\n                    while (!added && itor.hasNext())\n                    {\n                        Entry<ServiceReference, ServiceProvider> e = itor.next();\n                        added = e.getValue().serviceAdded(sr, contextHandler);\n                        if (added && LOG.isDebugEnabled())\n                            LOG.debug(\"Provider \"+e.getValue()+\" deployed \"+contextHandler);\n                    }\n                }\n                break;\n            }\n        }\n    }","commit_id":"4a312f7cb6247b34fdf09ef1ce563d84e9ea2530","url":"https://github.com/eclipse/jetty.project"},{"original_method":"private void configure(Server server, Dictionary props) throws Exception\n    {\n        String jettyConfigurationUrls = (String) props.get(OSGiServerConstants.MANAGED_JETTY_XML_CONFIG_URLS);\n        List<URL> jettyConfigurations = jettyConfigurationUrls != null ? extractResources(jettyConfigurationUrls) : null;\n        if (jettyConfigurations == null || jettyConfigurations.isEmpty()) { return; }\n        Map<String, Object> id_map = new HashMap<String, Object>();\n        \n        //TODO need to put in the id of the server being configured\n        id_map.put(\"Server\", server);\n        Map<String, String> properties = new HashMap<String, String>();\n        Enumeration<Object> en = props.keys();\n        while (en.hasMoreElements())\n        {\n            Object key = en.nextElement();\n            Object value = props.get(key);\n            String keyStr = String.valueOf(key);\n            String valStr = String.valueOf(value);\n            properties.put(keyStr, valStr);\n            server.setAttribute(keyStr, valStr);\n        }\n\n        for (URL jettyConfiguration : jettyConfigurations)\n        {\n            InputStream is = null;\n            try\n            {\n                // Execute a Jetty configuration file\n                Resource r = Resource.newResource(jettyConfiguration);\n                is = r.getInputStream();\n                XmlConfiguration config = new XmlConfiguration(is);\n                config.getIdMap().putAll(id_map);\n\n                // #334062 compute the URL of the folder that contains the\n                // jetty.xml conf file\n                // and set it as a property so we can compute relative paths\n                // from it.\n                String urlPath = jettyConfiguration.toString();\n                int lastSlash = urlPath.lastIndexOf('/');\n                if (lastSlash > 4)\n                {\n                    urlPath = urlPath.substring(0, lastSlash);\n                    Map<String, String> properties2 = new HashMap<String, String>(properties);\n                    properties2.put(PROPERTY_THIS_JETTY_XML_FOLDER_URL, urlPath);\n                    config.getProperties().putAll(properties2);\n                }\n                else\n                {\n                    config.getProperties().putAll(properties);\n                }\n                config.configure();\n                id_map = config.getIdMap();\n            }\n            catch (SAXParseException saxparse)\n            {\n                LOG.warn(\"Unable to configure the jetty/etc file \" + jettyConfiguration, saxparse);\n                throw saxparse;\n            }\n            finally\n            {\n                IO.close(is);\n            }\n        }\n\n    }","id":96129,"modified_method":"private void configure(Server server, Dictionary props) throws Exception\n    {\n        String jettyConfigurationUrls = (String) props.get(OSGiServerConstants.MANAGED_JETTY_XML_CONFIG_URLS);\n        List<URL> jettyConfigurations = jettyConfigurationUrls != null ? extractResources(jettyConfigurationUrls) : null;\n        if (jettyConfigurations == null || jettyConfigurations.isEmpty()) { return; }\n        Map<String, Object> id_map = new HashMap<String, Object>();\n        \n        //Put in a mapping for the id \"Server\" and the name of the server as the instance being configured\n        id_map.put(\"Server\", server);\n        id_map.put((String)props.get(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME), server);\n        \n        Map<String, String> properties = new HashMap<String, String>();\n        Enumeration<Object> en = props.keys();\n        while (en.hasMoreElements())\n        {\n            Object key = en.nextElement();\n            Object value = props.get(key);\n            String keyStr = String.valueOf(key);\n            String valStr = String.valueOf(value);\n            properties.put(keyStr, valStr);\n            server.setAttribute(keyStr, valStr);\n        }\n\n        for (URL jettyConfiguration : jettyConfigurations)\n        {\n            InputStream is = null;\n            try\n            {\n                // Execute a Jetty configuration file\n                Resource r = Resource.newResource(jettyConfiguration);\n                is = r.getInputStream();\n                XmlConfiguration config = new XmlConfiguration(is);\n                config.getIdMap().putAll(id_map);\n\n                // #334062 compute the URL of the folder that contains the\n                // jetty.xml conf file\n                // and set it as a property so we can compute relative paths\n                // from it.\n                String urlPath = jettyConfiguration.toString();\n                int lastSlash = urlPath.lastIndexOf('/');\n                if (lastSlash > 4)\n                {\n                    urlPath = urlPath.substring(0, lastSlash);\n                    Map<String, String> properties2 = new HashMap<String, String>(properties);\n                    properties2.put(PROPERTY_THIS_JETTY_XML_FOLDER_URL, urlPath);\n                    config.getProperties().putAll(properties2);\n                }\n                else\n                {\n                    config.getProperties().putAll(properties);\n                }\n                config.configure();\n                id_map = config.getIdMap();\n            }\n            catch (SAXParseException saxparse)\n            {\n                LOG.warn(\"Unable to configure the jetty/etc file \" + jettyConfiguration, saxparse);\n                throw saxparse;\n            }\n            finally\n            {\n                IO.close(is);\n            }\n        }\n\n    }","commit_id":"4a312f7cb6247b34fdf09ef1ce563d84e9ea2530","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void start(Server server, Dictionary props) throws Exception\n    {\n        _server = server;\n        ClassLoader contextCl = Thread.currentThread().getContextClassLoader();\n        try\n        {\n            // passing this bundle's classloader as the context classloader\n            // makes sure there is access to all the jetty's bundles\n            ClassLoader libExtClassLoader = null;\n            String sharedURLs = (String) props.get(OSGiServerConstants.MANAGED_JETTY_SHARED_LIB_FOLDER_URLS);\n\n            List<File> shared = sharedURLs != null ? extractFiles(sharedURLs) : null;\n            libExtClassLoader = LibExtClassLoaderHelper.createLibExtClassLoader(shared, null, server, JettyBootstrapActivator.class.getClassLoader());\n\n            System.err.println(\"LibExtClassLoader = \"+libExtClassLoader);\n            \n            Thread.currentThread().setContextClassLoader(libExtClassLoader);\n\n            configure(server, props);\n\n            init();\n\n            // now that we have an app provider we can call the registration\n            // customizer.\n\n            URL[] jarsWithTlds = getJarsWithTlds();\n            _commonParentClassLoaderForWebapps = jarsWithTlds == null ? libExtClassLoader : new TldLocatableURLClassloader(libExtClassLoader, jarsWithTlds);\n            \n            System.err.println(\"common classloader = \"+_commonParentClassLoaderForWebapps);\n\n            server.start();\n            //_webBundleDeployerHelper = new WebBundleDeployerHelper(this);\n        }\n        catch (Exception e)\n        {\n            if (server != null)\n            {\n                try\n                {\n                    server.stop();\n                }\n                catch (Exception x)\n                {\n                    LOG.ignore(x);\n                }\n            }\n            throw e;\n        }\n        finally\n        {\n            Thread.currentThread().setContextClassLoader(contextCl);\n        }\n    }","id":96130,"modified_method":"public void start(Server server, Dictionary props) throws Exception\n    {\n        _server = server;\n        ClassLoader contextCl = Thread.currentThread().getContextClassLoader();\n        try\n        {\n            // passing this bundle's classloader as the context classloader\n            // makes sure there is access to all the jetty's bundles\n            ClassLoader libExtClassLoader = null;\n            String sharedURLs = (String) props.get(OSGiServerConstants.MANAGED_JETTY_SHARED_LIB_FOLDER_URLS);\n\n            List<File> shared = sharedURLs != null ? extractFiles(sharedURLs) : null;\n            libExtClassLoader = LibExtClassLoaderHelper.createLibExtClassLoader(shared, null, server, JettyBootstrapActivator.class.getClassLoader());\n\n            if (LOG.isDebugEnabled()) LOG.debug(\"LibExtClassLoader = \"+libExtClassLoader);\n            \n            Thread.currentThread().setContextClassLoader(libExtClassLoader);\n\n            configure(server, props);\n\n            init();\n\n            URL[] jarsWithTlds = getJarsWithTlds();\n            _commonParentClassLoaderForWebapps = jarsWithTlds == null ? libExtClassLoader : new TldLocatableURLClassloader(libExtClassLoader, jarsWithTlds);\n            \n            if (LOG.isDebugEnabled()) LOG.debug(\"common classloader = \"+_commonParentClassLoaderForWebapps);\n\n            server.start();\n        }\n        catch (Exception e)\n        {\n            if (server != null)\n            {\n                try\n                {\n                    server.stop();\n                }\n                catch (Exception x)\n                {\n                    LOG.ignore(x);\n                }\n            }\n            throw e;\n        }\n        finally\n        {\n            Thread.currentThread().setContextClassLoader(contextCl);\n        }\n    }","commit_id":"4a312f7cb6247b34fdf09ef1ce563d84e9ea2530","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\n     * Must be called after the server is configured. \n     * \n     * It is assumed the server has already been configured with the ContextHandlerCollection structure.\n     * \n     * The server must have an instance of OSGiAppProvider. If one is not provided, it is created.\n     */\n    private void init()\n    {\n        // Get the context handler\n        _ctxtCollection = (ContextHandlerCollection) _server.getChildHandlerByClass(ContextHandlerCollection.class);\n\n        if (_ctxtCollection == null) \n            throw new IllegalStateException(\"ERROR: No ContextHandlerCollection configured in Server\");\n        \n        List<String> providerClassNames = new ArrayList<String>();\n        \n        // get a deployerManager and some providers\n        List<DeploymentManager> deployers = _server.getBeans(DeploymentManager.class);\n        if (deployers != null && !deployers.isEmpty())\n        {\n            _deploymentManager = deployers.get(0);\n            \n            for (AppProvider provider : _deploymentManager.getAppProviders())\n            {\n               providerClassNames.add(provider.getClass().getName());\n            }\n        }\n        else\n        {\n            //add some kind of default\n            _deploymentManager = new DeploymentManager();\n            _deploymentManager.setContexts(_ctxtCollection);\n            _server.addBean(_deploymentManager);\n        }\n\n        if (!providerClassNames.contains(BundleWebAppProvider.class.getName()))\n        {\n            // create it on the fly with reasonable default values.\n            try\n            {\n                BundleWebAppProvider webAppProvider = new BundleWebAppProvider(this);\n                _deploymentManager.addAppProvider(webAppProvider);\n            }\n            catch (Exception e)\n            {\n                LOG.warn(e);\n            }\n        }\n\n        if (!providerClassNames.contains(ServiceWebAppProvider.class.getName()))\n        {\n            // create it on the fly with reasonable default values.\n            try\n            {\n                ServiceWebAppProvider webAppProvider = new ServiceWebAppProvider(this);\n                _deploymentManager.addAppProvider(webAppProvider);\n            }\n            catch (Exception e)\n            {\n                LOG.warn(e);\n            }\n        }\n\n        if (!providerClassNames.contains(BundleContextProvider.class.getName()))\n        {\n            try\n            {\n                BundleContextProvider contextProvider = new BundleContextProvider(this);\n                _deploymentManager.addAppProvider(contextProvider);\n            }\n            catch (Exception e)\n            {\n                LOG.warn(e);\n            }\n\n        }\n\n        //TODO add ServiceContextProvider\n    }","id":96131,"modified_method":"/**\n     * Must be called after the server is configured. \n     * \n     * It is assumed the server has already been configured with the ContextHandlerCollection structure.\n     * \n     * The server must have an instance of OSGiAppProvider. If one is not provided, it is created.\n     */\n    private void init()\n    {\n        // Get the context handler\n        _ctxtCollection = (ContextHandlerCollection) _server.getChildHandlerByClass(ContextHandlerCollection.class);\n\n        if (_ctxtCollection == null) \n            throw new IllegalStateException(\"ERROR: No ContextHandlerCollection configured in Server\");\n        \n        List<String> providerClassNames = new ArrayList<String>();\n        \n        // get a deployerManager and some providers\n        List<DeploymentManager> deployers = _server.getBeans(DeploymentManager.class);\n        if (deployers != null && !deployers.isEmpty())\n        {\n            _deploymentManager = deployers.get(0);\n            \n            for (AppProvider provider : _deploymentManager.getAppProviders())\n            {\n               providerClassNames.add(provider.getClass().getName());\n            }\n        }\n        else\n        {\n            //add some kind of default\n            _deploymentManager = new DeploymentManager();\n            _deploymentManager.setContexts(_ctxtCollection);\n            _server.addBean(_deploymentManager);\n        }\n\n        if (!providerClassNames.contains(BundleWebAppProvider.class.getName()))\n        {\n            // create it on the fly with reasonable default values.\n            try\n            {\n                BundleWebAppProvider webAppProvider = new BundleWebAppProvider(this);\n                _deploymentManager.addAppProvider(webAppProvider);\n            }\n            catch (Exception e)\n            {\n                LOG.warn(e);\n            }\n        }\n\n        if (!providerClassNames.contains(ServiceWebAppProvider.class.getName()))\n        {\n            // create it on the fly with reasonable default values.\n            try\n            {\n                ServiceWebAppProvider webAppProvider = new ServiceWebAppProvider(this);\n                _deploymentManager.addAppProvider(webAppProvider);\n            }\n            catch (Exception e)\n            {\n                LOG.warn(e);\n            }\n        }\n\n        if (!providerClassNames.contains(BundleContextProvider.class.getName()))\n        {\n            try\n            {\n                BundleContextProvider contextProvider = new BundleContextProvider(this);\n                _deploymentManager.addAppProvider(contextProvider);\n            }\n            catch (Exception e)\n            {\n                LOG.warn(e);\n            }\n        }\n\n        if (!providerClassNames.contains(ServiceContextProvider.class.getName()))\n        {\n            try\n            {\n                ServiceContextProvider contextProvider = new ServiceContextProvider(this);\n                _deploymentManager.addAppProvider(contextProvider);\n            }\n            catch (Exception e)\n            {\n                LOG.warn(e);\n            }\n        }\n    }","commit_id":"4a312f7cb6247b34fdf09ef1ce563d84e9ea2530","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\n     * A webapp that was deployed as an osgi service has been added,\n     * and we want to deploy it.\n     * \n     * @param context the webapp\n     */\n    public boolean serviceAdded (ServiceReference serviceRef, ContextHandler context)\n    {   \n        if (context == null || !(context instanceof WebAppContext))\n            return false;\n        \n        \n        WebAppContext webApp = (WebAppContext)context;\n        System.err.println(\"Casting to webapp\");\n        Dictionary properties = new Hashtable<String,String>();\n        \n        String contextPath = (String)serviceRef.getProperty(OSGiWebappConstants.RFC66_WEB_CONTEXTPATH);\n        if (contextPath == null)\n            contextPath = (String)serviceRef.getProperty(OSGiWebappConstants.SERVICE_PROP_CONTEXT_PATH);\n        if (contextPath == null)\n            return false; //No context path\n     \n        String base = (String)serviceRef.getProperty(OSGiWebappConstants.JETTY_WAR_FOLDER_PATH);\n        if (base == null)\n            base = (String)serviceRef.getProperty(OSGiWebappConstants.SERVICE_PROP_WAR);\n        \n       if (base == null)\n           return false; //No webapp base\n        \n        String webdefaultXml = (String)serviceRef.getProperty(OSGiWebappConstants.JETTY_DEFAULT_WEB_XML_PATH);\n        if (webdefaultXml == null)\n            webdefaultXml = (String)serviceRef.getProperty(OSGiWebappConstants.SERVICE_PROP_DEFAULT_WEB_XML_PATH);\n        if (webdefaultXml != null)\n            properties.put(OSGiWebappConstants.JETTY_DEFAULT_WEB_XML_PATH, webdefaultXml);\n\n        String webXml = (String)serviceRef.getProperty(OSGiWebappConstants.JETTY_WEB_XML_PATH);\n        if (webXml == null)\n            webXml = (String)serviceRef.getProperty(OSGiWebappConstants.SERVICE_PROP_WEB_XML_PATH);\n        if (webXml != null)\n            properties.put(OSGiWebappConstants.JETTY_WEB_XML_PATH, webXml);\n\n        String extraClassPath = (String)serviceRef.getProperty(OSGiWebappConstants.JETTY_EXTRA_CLASSPATH);\n        if (extraClassPath == null)\n            extraClassPath = (String)serviceRef.getProperty(OSGiWebappConstants.SERVICE_PROP_EXTRA_CLASSPATH);\n        if (extraClassPath != null)\n            properties.put(OSGiWebappConstants.JETTY_EXTRA_CLASSPATH, extraClassPath);\n\n        String bundleInstallOverride = (String)serviceRef.getProperty(OSGiWebappConstants.JETTY_BUNDLE_INSTALL_LOCATION_OVERRIDE);\n        if (bundleInstallOverride == null)\n            bundleInstallOverride = (String)serviceRef.getProperty(OSGiWebappConstants.SERVICE_PROP_BUNDLE_INSTALL_LOCATION_OVERRIDE);\n        if (bundleInstallOverride != null)\n            properties.put(OSGiWebappConstants.JETTY_BUNDLE_INSTALL_LOCATION_OVERRIDE, bundleInstallOverride);\n\n        String  requiredTlds = (String)serviceRef.getProperty(OSGiWebappConstants.REQUIRE_TLD_BUNDLE);\n        if (requiredTlds == null)\n            requiredTlds = (String)serviceRef.getProperty(OSGiWebappConstants.SERVICE_PROP_REQUIRE_TLD_BUNDLE);\n        if (requiredTlds != null)\n            properties.put(OSGiWebappConstants.REQUIRE_TLD_BUNDLE, requiredTlds);\n\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        Thread.currentThread().setContextClassLoader(getServerInstanceWrapper().getParentClassLoaderForWebapps());\n        try\n        {\n            String originId = getOriginId(serviceRef.getBundle(), base);\n            BundleApp app = new BundleApp(getDeploymentManager(), this, serviceRef.getBundle(), properties, originId);\n            app.setContextPath(contextPath);\n            app.setWebAppPath(base);\n            app.setWebAppContext(webApp); //set the pre=made webapp instance\n            _serviceMap.put(serviceRef, app);\n            getDeploymentManager().addApp(app);\n            return true;\n        }\n        finally\n        {\n            Thread.currentThread().setContextClassLoader(cl); \n        }\n    }","id":96132,"modified_method":"/**\n     * A webapp that was deployed as an osgi service has been added,\n     * and we want to deploy it.\n     * \n     * @param context the webapp\n     */\n    public boolean serviceAdded (ServiceReference serviceRef, ContextHandler context)\n    {   \n        if (context == null || !(context instanceof WebAppContext))\n            return false;\n        \n        \n        WebAppContext webApp = (WebAppContext)context;\n        Dictionary properties = new Hashtable<String,String>();\n        \n        String contextPath = (String)serviceRef.getProperty(OSGiWebappConstants.RFC66_WEB_CONTEXTPATH);\n        if (contextPath == null)\n            contextPath = (String)serviceRef.getProperty(OSGiWebappConstants.SERVICE_PROP_CONTEXT_PATH);\n        if (contextPath == null)\n            return false; //No context path\n     \n        String base = (String)serviceRef.getProperty(OSGiWebappConstants.JETTY_WAR_FOLDER_PATH);\n        if (base == null)\n            base = (String)serviceRef.getProperty(OSGiWebappConstants.SERVICE_PROP_WAR);\n        \n       if (base == null)\n           return false; //No webapp base\n        \n        String webdefaultXml = (String)serviceRef.getProperty(OSGiWebappConstants.JETTY_DEFAULT_WEB_XML_PATH);\n        if (webdefaultXml == null)\n            webdefaultXml = (String)serviceRef.getProperty(OSGiWebappConstants.SERVICE_PROP_DEFAULT_WEB_XML_PATH);\n        if (webdefaultXml != null)\n            properties.put(OSGiWebappConstants.JETTY_DEFAULT_WEB_XML_PATH, webdefaultXml);\n\n        String webXml = (String)serviceRef.getProperty(OSGiWebappConstants.JETTY_WEB_XML_PATH);\n        if (webXml == null)\n            webXml = (String)serviceRef.getProperty(OSGiWebappConstants.SERVICE_PROP_WEB_XML_PATH);\n        if (webXml != null)\n            properties.put(OSGiWebappConstants.JETTY_WEB_XML_PATH, webXml);\n\n        String extraClassPath = (String)serviceRef.getProperty(OSGiWebappConstants.JETTY_EXTRA_CLASSPATH);\n        if (extraClassPath == null)\n            extraClassPath = (String)serviceRef.getProperty(OSGiWebappConstants.SERVICE_PROP_EXTRA_CLASSPATH);\n        if (extraClassPath != null)\n            properties.put(OSGiWebappConstants.JETTY_EXTRA_CLASSPATH, extraClassPath);\n\n        String bundleInstallOverride = (String)serviceRef.getProperty(OSGiWebappConstants.JETTY_BUNDLE_INSTALL_LOCATION_OVERRIDE);\n        if (bundleInstallOverride == null)\n            bundleInstallOverride = (String)serviceRef.getProperty(OSGiWebappConstants.SERVICE_PROP_BUNDLE_INSTALL_LOCATION_OVERRIDE);\n        if (bundleInstallOverride != null)\n            properties.put(OSGiWebappConstants.JETTY_BUNDLE_INSTALL_LOCATION_OVERRIDE, bundleInstallOverride);\n\n        String  requiredTlds = (String)serviceRef.getProperty(OSGiWebappConstants.REQUIRE_TLD_BUNDLE);\n        if (requiredTlds == null)\n            requiredTlds = (String)serviceRef.getProperty(OSGiWebappConstants.SERVICE_PROP_REQUIRE_TLD_BUNDLE);\n        if (requiredTlds != null)\n            properties.put(OSGiWebappConstants.REQUIRE_TLD_BUNDLE, requiredTlds);\n\n        ClassLoader cl = Thread.currentThread().getContextClassLoader();\n        Thread.currentThread().setContextClassLoader(getServerInstanceWrapper().getParentClassLoaderForWebapps());\n        try\n        {\n            String originId = getOriginId(serviceRef.getBundle(), base);\n            BundleApp app = new BundleApp(getDeploymentManager(), this, serviceRef.getBundle(), properties, originId);\n            app.setContextPath(contextPath);\n            app.setWebAppPath(base);\n            app.setWebAppContext(webApp); //set the pre=made webapp instance\n            _serviceMap.put(serviceRef, app);\n            getDeploymentManager().addApp(app);\n            return true;\n        }\n        finally\n        {\n            Thread.currentThread().setContextClassLoader(cl); \n        }\n    }","commit_id":"4a312f7cb6247b34fdf09ef1ce563d84e9ea2530","url":"https://github.com/eclipse/jetty.project"},{"original_method":"/**\n     * @param bundle\n     * @return true if this bundle in indeed a web-bundle.\n     */\n    private boolean register(Bundle bundle)\n    {\n        if (bundle == null)\n            return false;\n\n        //It might be a bundle that we can deploy to our default jetty server instance\n        boolean deployed = false;\n        Object[] deployers = _serviceTracker.getServices();\n        if (deployers != null)\n        {\n            System.err.println(\"FOUND \"+deployers.length+\" FOR \"+bundle.getSymbolicName());\n            int i=0;\n            while (!deployed && i<deployers.length)\n            {\n                \n                BundleProvider p = (BundleProvider)deployers[i];\n                System.err.println(\"Trying deployer \"+p);\n                deployed = p.bundleAdded(bundle);\n                i++;\n                System.err.println(\"Deployer \"+p+\" returned \"+deployed);\n            }\n        }\n        else\n            System.err.println(\"NO DEPLOYER FOUND FOR \"+bundle.getSymbolicName());\n\n        return deployed;\n    }","id":96133,"modified_method":"/**\n     * @param bundle\n     * @return true if this bundle in indeed a web-bundle.\n     */\n    private boolean register(Bundle bundle)\n    {\n        if (bundle == null)\n            return false;\n\n        //It might be a bundle that we can deploy to our default jetty server instance\n        boolean deployed = false;\n        Object[] deployers = _serviceTracker.getServices();\n        if (deployers != null)\n        {\n            int i=0;\n            while (!deployed && i<deployers.length)\n            {\n                \n                BundleProvider p = (BundleProvider)deployers[i];\n                deployed = p.bundleAdded(bundle);\n                i++;\n            }\n        }\n\n        return deployed;\n    }","commit_id":"4a312f7cb6247b34fdf09ef1ce563d84e9ea2530","url":"https://github.com/eclipse/jetty.project"},{"original_method":"public void putResponse(Response response) {\n\t\tstatus = response.getAttribute(\"status\");\n\t\t//TODO: Listeners\n\t}","id":96134,"modified_method":"public void putResponse(Response response) {\n\t\tstatus = response.getAttribute(\"status\");\n\t\t\n\t\tfor (ResponseListener listener : listeners) {\n\t\t\tlistener.responseEvent(this, response);\n\t\t}\n\t}","commit_id":"0d8242ee1a83e5e482c05655ffeb94db56b05c9b","url":"https://github.com/eXist-db/exist"},{"original_method":"public static Command parse(IoSession session, String message) {\n\t\tSystem.out.println(\"get message = \"+message);\n\t\t\n\t\tint pos = message.indexOf(\" \");\n\t\tString command = message.substring(0, pos);\n\t\tString args = message.substring(command.length());\n\t\t\n\t\tif (command.equals(\"run\")) {\n\t\t\treturn new Run(session, args);\n\t\t\n\t\t} else if (command.equals(\"step_into\")) {\n\t\t\treturn new StepInto(session, args);\n\t\t\n\t\t} else if (command.equals(\"step_over\")) {\n\t\t\treturn new StepOver(session, args);\n\t\t\n\t\t} else if (command.equals(\"step_out\")) {\n\t\t\treturn new StepOut(session, args);\n\t\t\n\t\t} else if (command.equals(\"stack_get\")) {\n\t\t\treturn new StackGet(session, args);\n\t\t\n\t\t} else if (command.equals(\"property_get\")) {\n\t\t\treturn new PropertyGet(session, args);\n\t\t\n\t\t} else if (command.equals(\"context_get\")) {\n\t\t\treturn new ContextGet(session, args);\n\n        } else if (command.equals(\"context_names\")) {\n            return new ContextNames(session, args);\n            \n\t\t} else if (command.equals(\"breakpoint_set\")) {\n\t\t\treturn new BreakpointSet(session, args);\n\t\t\n\t\t} else if (command.equals(\"breakpoint_get\")) {\n\t\t\treturn new BreakpointGet(session, args);\n\t\t\n\t\t} else if (command.equals(\"breakpoint_update\")) {\n\t\t\treturn new BreakpointUpdate(session, args);\n\t\t\n\t\t} else if (command.equals(\"breakpoint_remove\")) {\n\t\t\treturn new BreakpointRemove(session, args);\n\t\t\n\t\t} else if (command.equals(\"breakpoint_list\")) {\n\t\t\treturn new BreakpointList(session, args);\n\t\t\n\t\t} else if (command.equals(\"status\")) {\n            return new Status(session, args);\n\n        } else if (command.equals(\"stdout\")) {\n            return new StdOut(session, args);\n\n        } else if (command.equals(\"stderr\")) {\n            return new StdErr(session, args);\n            \n        } else if (command.equals(\"source\")) {\n            return new Source(session, args);\n\n        } else if (command.equals(\"feature_set\")) {\n\t\t\treturn new FeatureSet(session, args);\n\n        } else if (command.equals(\"feature_get\")) {\n\t\t\treturn new FeatureGet(session, args);\n\n        }\n\t\t\t\n\t\treturn new Error(command, session, args);\n\t}","id":96135,"modified_method":"public static Command parse(IoSession session, String message) {\n\t\tif (LOG.isDebugEnabled())\n\t\t\tLOG.debug(\"get message = \"+message);\n\t\t\n\t\tint pos = message.indexOf(\" \");\n\t\tString command = message.substring(0, pos);\n\t\tString args = message.substring(command.length());\n\t\t\n\t\tif (command.equals(\"run\")) {\n\t\t\treturn new Run(session, args);\n\t\t\n\t\t} else if (command.equals(\"step_into\")) {\n\t\t\treturn new StepInto(session, args);\n\t\t\n\t\t} else if (command.equals(\"step_over\")) {\n\t\t\treturn new StepOver(session, args);\n\t\t\n\t\t} else if (command.equals(\"step_out\")) {\n\t\t\treturn new StepOut(session, args);\n\t\t\n\t\t} else if (command.equals(\"stack_get\")) {\n\t\t\treturn new StackGet(session, args);\n\t\t\n\t\t} else if (command.equals(\"property_get\")) {\n\t\t\treturn new PropertyGet(session, args);\n\t\t\n\t\t} else if (command.equals(\"context_get\")) {\n\t\t\treturn new ContextGet(session, args);\n\n        } else if (command.equals(\"context_names\")) {\n            return new ContextNames(session, args);\n            \n\t\t} else if (command.equals(\"breakpoint_set\")) {\n\t\t\treturn new BreakpointSet(session, args);\n\t\t\n\t\t} else if (command.equals(\"breakpoint_get\")) {\n\t\t\treturn new BreakpointGet(session, args);\n\t\t\n\t\t} else if (command.equals(\"breakpoint_update\")) {\n\t\t\treturn new BreakpointUpdate(session, args);\n\t\t\n\t\t} else if (command.equals(\"breakpoint_remove\")) {\n\t\t\treturn new BreakpointRemove(session, args);\n\t\t\n\t\t} else if (command.equals(\"breakpoint_list\")) {\n\t\t\treturn new BreakpointList(session, args);\n\t\t\n\t\t} else if (command.equals(\"status\")) {\n            return new Status(session, args);\n\n        } else if (command.equals(\"stdout\")) {\n            return new StdOut(session, args);\n\n        } else if (command.equals(\"stderr\")) {\n            return new StdErr(session, args);\n            \n        } else if (command.equals(\"source\")) {\n            return new Source(session, args);\n\n        } else if (command.equals(\"feature_set\")) {\n\t\t\treturn new FeatureSet(session, args);\n\n        } else if (command.equals(\"feature_get\")) {\n\t\t\treturn new FeatureGet(session, args);\n\n        }\n\t\t\t\n\t\treturn new Error(command, session, args);\n\t}","commit_id":"0d8242ee1a83e5e482c05655ffeb94db56b05c9b","url":"https://github.com/eXist-db/exist"},{"original_method":"public DebuggeeConnectionTCP(Debuggee debuggee) {\n\t\t// Create TCP/IP connector.\n\t\tconnector = new NioSocketConnector();\n\t\t\n\t\t// Set connect timeout for 30 seconds.\n\t\tconnector.setConnectTimeoutMillis(30*1000L);\n\n\t\tconnector.getFilterChain().addLast(\n\t\t\t\t\"protocol\", new ProtocolCodecFilter(new CodecFactory()));\n\t\t\n\t\t// Start communication.\n\t\tconnector.setHandler(new ProtocolHandler(debuggee));\n\t}","id":96136,"modified_method":"public DebuggeeConnectionTCP() {\n\t\t// Create TCP/IP connector.\n\t\tconnector = new NioSocketConnector();\n\t\t\n\t\t// Set connect timeout for 30 seconds.\n\t\tconnector.setConnectTimeoutMillis(30*1000L);\n\n\t\tconnector.getFilterChain().addLast(\n\t\t\t\t\"protocol\", new ProtocolCodecFilter(new CodecFactory()));\n\t\t\n\t\t// Start communication.\n\t\tconnector.setHandler(new ProtocolHandler());\n\t}","commit_id":"0d8242ee1a83e5e482c05655ffeb94db56b05c9b","url":"https://github.com/eXist-db/exist"},{"original_method":"public DebuggeeImpl() {\n\t\tconnection = new DebuggeeConnectionTCP(this);\n\t}","id":96137,"modified_method":"public DebuggeeImpl() {\n\t\tconnection = new DebuggeeConnectionTCP();\n\t}","commit_id":"0d8242ee1a83e5e482c05655ffeb94db56b05c9b","url":"https://github.com/eXist-db/exist"},{"original_method":"public void expressionStart(Expression expr) throws TerminatedException {\n\t\tSystem.out.println(\"expressionStart \" + expr.getLine() + \" expr = \"+ expr.toString());\n\t\t\n\t\tif (compiledXQuery == null)\n\t\t\treturn;\n\t\t\n\t\tif (firstExpression == null)\n\t\t\tfirstExpression = expr;\n\t\t\n\t\tstack.set(stackDepth, expr);\n\t\t\n\t\tString fileName = Command.getFileuri(expr.getSource());\n\t\tInteger lineNo = expr.getLine();\n\n\t\tMap<Integer, Breakpoint> fileBreakpoints = null;\n\n\t\twhile (true) {\n\t\t\t//didn't receive any command, wait for any \n\t\t\tif (command == null ||\n\t\t\t\t\t//the status is break, wait for changes\n\t\t\t\t\tcommand.isStatus(BREAK)) {\n\t\t\t\twaitCommand();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//wait for connection\n\t\t\tif (command.is(CommandContinuation.INIT) && command.isStatus(STARTING)) {\n\t\t\t\tInit init = (Init)command;\n\t\t\t\tinit.getSession().setAttribute(\"joint\", this);\n\t\t\t\tinit.setFileURI(compiledXQuery.getSource());\n\t\t\t\t\n\t\t\t\t//break on first line\n\t\t\t\tcommand.setStatus(BREAK);\n\t\t\t}\n\t\t\t\n\t\t\t//disconnected\n\t\t\tif (compiledXQuery == null)\n\t\t\t\treturn;\n\t\t\t\n\t\t\t//stop command, terminate\n\t\t\tif (command.is(CommandContinuation.STOP) && !command.isStatus(STOPPED)) {\n\t\t\t\tcommand.setStatus(STOPPED);\n\t            throw new TerminatedException(expr.getLine(), expr.getColumn(), \"Debuggee STOP command.\");\n\t\t\t}\n\n\t\t\t//step-into is done\n\t\t\tif (command.is(CommandContinuation.STEP_INTO) && command.isStatus(RUNNING)) {\n\t\t\t\tcommand.setStatus(BREAK);\n\n\t\t\t//step-over should stop on same call's stack depth\n\t\t\t} else if (command.is(CommandContinuation.STEP_OVER)  \n\t\t\t\t\t&& command.getCallStackDepth() == stackDepth\n\t\t\t\t\t&& command.isStatus(RUNNING)) {\n\t\t\t\tcommand.setStatus(BREAK);\n\n\t\t\t}\n\t\t\t\n\t\t\t//checking breakpoints\n\t\t\tsynchronized (breakpoints) {\n\t\t\t\tif (filesBreakpoints.containsKey(fileName)) {\n\t\t\t\t\tfileBreakpoints = filesBreakpoints.get(fileName);\n\t\t\t\t\t\n\t\t\t\t\tif (fileBreakpoints.containsKey(lineNo)) {\n\t\t\t\t\t\tBreakpoint breakpoint = fileBreakpoints.get(lineNo);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (breakpoint.getState() && breakpoint.getType().equals(Breakpoint.TYPE_LINE)) {\n\t\t\t\t\t\t\tcommand.setStatus(BREAK);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//RUS command with status RUNNING can be break only on breakpoints\n\t\t\tif (command.getType() >= CommandContinuation.RUN && command.isStatus(RUNNING)) {\n\t\t\t\tbreak;\n\n\t\t\t//any continuation command with status RUNNING\n\t\t\t} else if (command.getType() >= CommandContinuation.RUN && command.isStatus(STARTING)) {\n\t\t\t\tcommand.setStatus(RUNNING);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\twaitCommand();\n\t\t}\n\t}","id":96138,"modified_method":"public void expressionStart(Expression expr) throws TerminatedException {\n\t\tif (LOG.isDebugEnabled())\n\t\t\tLOG.debug(\"expressionStart \" + expr.getLine() + \" expr = \"+ expr.toString());\n\t\t\n\t\tif (compiledXQuery == null)\n\t\t\treturn;\n\t\t\n\t\tif (firstExpression == null)\n\t\t\tfirstExpression = expr;\n\t\t\n\t\tstack.set(stackDepth, expr);\n\t\t\n\t\tString fileName = Command.getFileuri(expr.getSource());\n\t\tInteger lineNo = expr.getLine();\n\n\t\tMap<Integer, Breakpoint> fileBreakpoints = null;\n\n\t\twhile (true) {\n\t\t\t//didn't receive any command, wait for any \n\t\t\tif (command == null ||\n\t\t\t\t\t//the status is break, wait for changes\n\t\t\t\t\tcommand.isStatus(BREAK)) {\n\t\t\t\twaitCommand();\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t//wait for connection\n\t\t\tif (command.is(CommandContinuation.INIT) && command.isStatus(STARTING)) {\n\t\t\t\tInit init = (Init)command;\n\t\t\t\tinit.getSession().setAttribute(\"joint\", this);\n\t\t\t\tinit.setFileURI(compiledXQuery.getSource());\n\t\t\t\t\n\t\t\t\t//break on first line\n\t\t\t\tcommand.setStatus(BREAK);\n\t\t\t}\n\t\t\t\n\t\t\t//disconnected\n\t\t\tif (compiledXQuery == null)\n\t\t\t\treturn;\n\t\t\t\n\t\t\t//stop command, terminate\n\t\t\tif (command.is(CommandContinuation.STOP) && !command.isStatus(STOPPED)) {\n\t\t\t\tcommand.setStatus(STOPPED);\n\t            throw new TerminatedException(expr.getLine(), expr.getColumn(), \"Debuggee STOP command.\");\n\t\t\t}\n\n\t\t\t//step-into is done\n\t\t\tif (command.is(CommandContinuation.STEP_INTO) && command.isStatus(RUNNING)) {\n\t\t\t\tcommand.setStatus(BREAK);\n\n\t\t\t//step-over should stop on same call's stack depth\n\t\t\t} else if (command.is(CommandContinuation.STEP_OVER)  \n\t\t\t\t\t&& command.getCallStackDepth() == stackDepth\n\t\t\t\t\t&& command.isStatus(RUNNING)) {\n\t\t\t\tcommand.setStatus(BREAK);\n\n\t\t\t}\n\t\t\t\n\t\t\t//checking breakpoints\n\t\t\tsynchronized (breakpoints) {\n\t\t\t\tif (filesBreakpoints.containsKey(fileName)) {\n\t\t\t\t\tfileBreakpoints = filesBreakpoints.get(fileName);\n\t\t\t\t\t\n\t\t\t\t\tif (fileBreakpoints.containsKey(lineNo)) {\n\t\t\t\t\t\tBreakpoint breakpoint = fileBreakpoints.get(lineNo);\n\t\t\t\t\t\t\n\t\t\t\t\t\tif (breakpoint.getState() && breakpoint.getType().equals(Breakpoint.TYPE_LINE)) {\n\t\t\t\t\t\t\tcommand.setStatus(BREAK);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t\n\t\t\t//RUS command with status RUNNING can be break only on breakpoints\n\t\t\tif (command.getType() >= CommandContinuation.RUN && command.isStatus(RUNNING)) {\n\t\t\t\tbreak;\n\n\t\t\t//any continuation command with status RUNNING\n\t\t\t} else if (command.getType() >= CommandContinuation.RUN && command.isStatus(STARTING)) {\n\t\t\t\tcommand.setStatus(RUNNING);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t\n\t\t\twaitCommand();\n\t\t}\n\t}","commit_id":"0d8242ee1a83e5e482c05655ffeb94db56b05c9b","url":"https://github.com/eXist-db/exist"},{"original_method":"public void stackEnter(Expression expr) {\n\t\tSystem.out.println(\"stackEnter \" + expr.getLine() + \" expr = \"+ expr.toString());\n\t\tstack.add(expr);\n\t\tstackDepth++;\n\t\t\n\t}","id":96139,"modified_method":"public void stackEnter(Expression expr) {\n\t\tif (LOG.isDebugEnabled())\n\t\t\tLOG.debug(\"stackEnter \" + expr.getLine() + \" expr = \"+ expr.toString());\n\t\t\n\t\tstack.add(expr);\n\t\tstackDepth++;\n\t\t\n\t}","commit_id":"0d8242ee1a83e5e482c05655ffeb94db56b05c9b","url":"https://github.com/eXist-db/exist"},{"original_method":"public synchronized void sessionClosed(boolean disconnect) {\n\t\tSystem.out.println(\"sessionClosed\");\n\n\t\t//disconnected already\n\t\tif (compiledXQuery == null)\n\t\t\treturn;\n\t\t\n\t\t//disconnect debuggee & compiled source\n\t\tXQueryContext context = compiledXQuery.getContext();\n\t\tcontext.setDebugMode(false);\n\t\tcontext.setDebuggeeJoint(null);\n\t\tcompiledXQuery = null;\n\t\t\n\t\tif (command != null && disconnect)\n\t\t\tcommand.disconnect();\n\t\t\n\t\tnotifyAll();\n\t}","id":96140,"modified_method":"public synchronized void sessionClosed(boolean disconnect) {\n\t\t//disconnected already\n\t\tif (compiledXQuery == null)\n\t\t\treturn;\n\t\t\n\t\t//disconnect debuggee & compiled source\n\t\tXQueryContext context = compiledXQuery.getContext();\n\t\tcontext.setDebugMode(false);\n\t\tcontext.setDebuggeeJoint(null);\n\t\tcompiledXQuery = null;\n\t\t\n\t\tif (command != null && disconnect)\n\t\t\tcommand.disconnect();\n\t\t\n\t\tnotifyAll();\n\t}","commit_id":"0d8242ee1a83e5e482c05655ffeb94db56b05c9b","url":"https://github.com/eXist-db/exist"},{"original_method":"public void expressionEnd(Expression expr) {\n\t\tSystem.out.println(\"expressionEnd expr = \"+expr.toString());\n\n\t\tif (firstExpression == expr) {\n\t\t\tfirstExpression = null;\n\t\t\t\n\t\t\tcommand.setStatus(STOPPED);\n\t\t\t\n\t\t\tsessionClosed(true);\n\t\t}\n\t\t\n\t}","id":96141,"modified_method":"public void expressionEnd(Expression expr) {\n\t\tif (LOG.isDebugEnabled())\n\t\t\tLOG.debug(\"expressionEnd expr = \"+expr.toString());\n\n\t\tif (firstExpression == expr) {\n\t\t\tfirstExpression = null;\n\t\t\t\n\t\t\tcommand.setStatus(STOPPED);\n\t\t\t\n\t\t\tsessionClosed(true);\n\t\t}\n\t\t\n\t}","commit_id":"0d8242ee1a83e5e482c05655ffeb94db56b05c9b","url":"https://github.com/eXist-db/exist"},{"original_method":"public void stackLeave(Expression expr) {\n\t\tSystem.out.println(\"stackLeave \" + expr.getLine() + \" expr = \"+ expr.toString());\n\t\tstack.remove(stack.size()-1);\n\t\tstackDepth--;\n\t\t\n\t\tif (command.is(CommandContinuation.STEP_OUT) \n\t\t\t\t&& command.getCallStackDepth() > stackDepth\n\t\t\t\t&& command.isStatus(RUNNING)) {\n\t\t\tcommand.setStatus(BREAK);\n\t\t}\n\t}","id":96142,"modified_method":"public void stackLeave(Expression expr) {\n\t\tif (LOG.isDebugEnabled())\n\t\t\tLOG.debug(\"stackLeave \" + expr.getLine() + \" expr = \"+ expr.toString());\n\t\t\n\t\tstack.remove(stack.size()-1);\n\t\tstackDepth--;\n\t\t\n\t\tif (command.is(CommandContinuation.STEP_OUT) \n\t\t\t\t&& command.getCallStackDepth() > stackDepth\n\t\t\t\t&& command.isStatus(RUNNING)) {\n\t\t\tcommand.setStatus(BREAK);\n\t\t}\n\t}","commit_id":"0d8242ee1a83e5e482c05655ffeb94db56b05c9b","url":"https://github.com/eXist-db/exist"},{"original_method":"@Test\n\tpublic void testDebugger() {\n\t\tassertNotNull(\"Database wasn't initilised.\", database);\n\t\t\n\t\tDebugger debugger;\n\t\t\n\t\ttry {\n\t\t\tdebugger = new DebuggerImpl();\n\n\t\t\tDebuggingSource source = debugger.init(\"http://127.0.0.1:8080/exist/admin/admin.xql\");\n\n\t\t\tassertNotNull(\"Debugging source can't be NULL.\", source);\n\t\t\t\n\t\t\ttry { //why???\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t}\n\t\t\t\n\t\t\tsource.stepInto();\n\t\t\tsource.stepOver();\n\t\t\tsource.stepOut();\n\n\t\t\tsource.run();\n\n\t\t} catch (IOException e) {\n\t\t\tassertNotNull(\"IO exception: \"+e.getMessage(), null);\n\t\t} catch (ExceptionTimeout e) {\n\t\t\tassertNotNull(\"Timeout exception: \"+e.getMessage(), null);\n\t\t}\n\t}","id":96143,"modified_method":"@Test\n\tpublic void testDebugger() {\n\t\tassertNotNull(\"Database wasn't initilised.\", database);\n\t\t\n\t\tDebugger debugger;\n\t\t\n\t\ttry {\n\t\t\tdebugger = new DebuggerImpl();\n\n\t\t\tDebuggingSource source = debugger.init(\"http://127.0.0.1:8080/exist/admin/admin.xql\");\n\n\t\t\tassertNotNull(\"Debugging source can't be NULL.\", source);\n\t\t\t\n\t\t\ttry { //why???\n\t\t\t\tThread.sleep(1000);\n\t\t\t} catch (InterruptedException e) {\n\t\t\t}\n\t\t\t\n\t\t\tsource.stepInto(this);\n\t\t\tsource.stepOver(this);\n\t\t\tsource.stepOut(this);\n\n\t\t\tsource.run(this);\n\n\t\t} catch (IOException e) {\n\t\t\tassertNotNull(\"IO exception: \"+e.getMessage(), null);\n\t\t} catch (ExceptionTimeout e) {\n\t\t\tassertNotNull(\"Timeout exception: \"+e.getMessage(), null);\n\t\t}\n\t}","commit_id":"0d8242ee1a83e5e482c05655ffeb94db56b05c9b","url":"https://github.com/eXist-db/exist"},{"original_method":"@Override\n\tpublic void sessionClosed(IoSession session) {\n\t\tDebugger debugger = (Debugger) session.getAttribute(\"debugger\");\n\t\tdebugger.sessionClosed();\n\n\t\t// Print out total number of bytes read from the remote peer.\n\t\tSystem.err.println(\"Total \" + session.getReadBytes() + \" byte(s)\");\n\t}","id":96144,"modified_method":"@Override\n\tpublic void sessionClosed(IoSession session) {\n\t\tDebugger debugger = (Debugger) session.getAttribute(\"debugger\");\n\t\tdebugger.sessionClosed();\n\n\t\tif (LOG.isDebugEnabled())\n\t\t\tLOG.debug(\"Total \" + session.getReadBytes() + \" byte(s) readed.\");\n\t}","commit_id":"0d8242ee1a83e5e482c05655ffeb94db56b05c9b","url":"https://github.com/eXist-db/exist"},{"original_method":"public ProtocolHandler(Debuggee debuggee) {\n\t\tsuper();\n\t\t\n\t\tthis.debuggee = debuggee;\n\t}","id":96145,"modified_method":"public ProtocolHandler() {\n\t\tsuper();\n\t}","commit_id":"0d8242ee1a83e5e482c05655ffeb94db56b05c9b","url":"https://github.com/eXist-db/exist"},{"original_method":"@Override\n\tpublic void sessionClosed(IoSession session) {\n\t\tDebuggeeJoint joint = (DebuggeeJoint) session.getAttribute(\"joint\");\n\t\tif (joint != null)\n\t\t\tjoint.sessionClosed(false);\n\n\t\t// Print out total number of bytes read from the remote peer.\n\t\tSystem.err.println(\"Total \" + session.getReadBytes() + \" byte(s)\");\n\t}","id":96146,"modified_method":"@Override\n\tpublic void sessionClosed(IoSession session) {\n\t\tDebuggeeJoint joint = (DebuggeeJoint) session.getAttribute(\"joint\");\n\t\tif (joint != null)\n\t\t\tjoint.sessionClosed(false);\n\n\t\tif (LOG.isDebugEnabled())\n\t\t\tLOG.debug(\"Total \" + session.getReadBytes() + \" byte(s) readed.\");\n\t}","commit_id":"0d8242ee1a83e5e482c05655ffeb94db56b05c9b","url":"https://github.com/eXist-db/exist"},{"original_method":"protected static boolean buildDirectory(FTPClient ftpClient, String dirName) throws IOException {\n        boolean atLeastOneSuccess = false;\n        final StringBuilder sb = new StringBuilder(dirName.length());\n        final String[] dirs = dirName.split(\"\\\\/\");\n        for (String dir : dirs) {\n            sb.append('/').append(dir);\n            final boolean success = ftpClient.makeDirectory(sb.toString());\n            System.out.println(sb.toString() + \" = \" + success);\n            if (!atLeastOneSuccess && success) {\n                atLeastOneSuccess = true;\n            }\n        }\n        return atLeastOneSuccess;\n    }","id":96147,"modified_method":"protected static boolean buildDirectory(FTPClient ftpClient, String dirName) throws IOException {\n        boolean atLeastOneSuccess = false;\n        final StringBuilder sb = new StringBuilder(dirName.length());\n        final String[] dirs = dirName.split(\"\\\\/\");\n        for (String dir : dirs) {\n            sb.append('/').append(dir);\n            final boolean success = ftpClient.makeDirectory(sb.toString());\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(sb.toString() + \" = \" + success);\n            }\n            if (!atLeastOneSuccess && success) {\n                atLeastOneSuccess = true;\n            }\n        }\n        return atLeastOneSuccess;\n    }","commit_id":"5df68494a8b11f94b8bc5f8b5b890e5f0da042cd","url":"https://github.com/apache/camel"},{"original_method":"@Override\n  public void run() {\n    String msg;\n    int numAgents = agentGroup.getNumAgents();\n    Agent agent = agentGroup.newAgent(agentId, numAgents);\n    int totalRuns = agentGroup.getTotalRuns() / numAgents;\n    int timeToRun = agentGroup.getSecondsToRun();\n    int runsPerSecond = agentGroup.getRunsPerSecond();\n\n    LOG.info(\"{} {} starting.\", agentGroup.getName(), agentId);\n    printConsole(String.format(\"%s %d starting.\", agentGroup.getName(), agentId));\n\n    long startTime = System.currentTimeMillis();\n    long endTime = timeToRun > 0 ? startTime + 1000 * timeToRun : 0;\n    long accumulatedTime = 0;\n\n    // for throttling\n    long roundStart = System.currentTimeMillis();\n    long runsInRound = 0;\n    long runs = 0;\n\n    for (; (totalRuns <= 0) || (runs < totalRuns); ++runs) {\n      // run one iteration\n      long thisTime = System.currentTimeMillis();\n      long delta;\n\n      try {\n        delta = agent.runOnce(runs + 1);\n      } catch (BenchmarkException e) {\n        throw new RuntimeException(\"Execution of runOnce failed\", e);\n      }\n\n\n      globalMetrics.increment(\"runs\", delta);\n\n      // if necessary, sleep to throttle runs per second\n      long currentTime = System.currentTimeMillis();\n      accumulatedTime += currentTime - thisTime;\n\n      if (runsPerSecond > 0) {\n        runsInRound++;\n        long expectedTime = 1000 * runsInRound / runsPerSecond;\n        long roundTime = currentTime - roundStart;\n        if (roundTime < expectedTime) {\n          try {\n            Thread.sleep(expectedTime - roundTime);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            LOG.debug(\"Sleep interrupted. Ignoring.\");\n          }\n          currentTime = System.currentTimeMillis();\n        }\n        // do we have to start a new round of runsPerSecond?\n        if (runsInRound >= runsPerSecond) {\n          runsInRound = 0;\n          roundStart = currentTime;\n        }\n      }\n      // if time limit is exceeded, break\n      if (endTime > 0 && currentTime >= endTime) {\n        break;\n      }\n    }\n\n    long runtime = System.currentTimeMillis() - startTime;\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(String.format(\"%s %s done: %d  runs in %d ms\", agentGroup.getName(), agentId, runs, runtime));\n    if (runtime != 0) {\n      sb.append(String.format(\", average %d/sec\", (runs * 1000L / runtime)));\n    }\n    if (runs != 0) {\n      sb.append(String.format(\", average %d ms/run\", (accumulatedTime / runs)));\n    }\n    msg = sb.toString();\n    LOG.info(msg);\n    printConsole(msg);\n\n    LOG.debug(\"Benchmark agent thread finished.\");\n  }","id":96148,"modified_method":"@Override\n  public void run() {\n    String msg;\n    int numAgents = agentGroup.getNumAgents();\n    Agent agent = agentGroup.newAgent(agentId, numAgents);\n    int totalRuns = agentGroup.getTotalRuns() / numAgents;\n    int timeToRun = agentGroup.getSecondsToRun();\n    int runsPerSecond = agentGroup.getRunsPerSecond();\n\n    LOG.info(\"{} {} starting.\", agentGroup.getName(), agentId);\n    printConsole(String.format(\"%s %d starting.\", agentGroup.getName(), agentId));\n\n    long startTime = System.currentTimeMillis();\n    long endTime = timeToRun > 0 ? startTime + 1000 * timeToRun : 0;\n    long accumulatedTime = 0;\n\n    // for throttling\n    long roundStart = System.currentTimeMillis();\n    long runsInRound = 0;\n    long runs = 0;\n\n    for (; (totalRuns <= 0) || (runs < totalRuns); ++runs) {\n      // run one iteration\n      long thisTime = System.currentTimeMillis();\n      long delta;\n\n      try {\n        delta = agent.runOnce(runs + 1);\n      } catch (BenchmarkException e) {\n        LOG.error(\"runOnce failed for run \" + (runs + 1) + \" of \" + agentGroup.getName() + \" \" + agentId, e);\n        throw new RuntimeException(\"Execution of runOnce failed\", e);\n      }\n\n      globalMetrics.increment(\"runs\", delta);\n\n      // if necessary, sleep to throttle runs per second\n      long currentTime = System.currentTimeMillis();\n      accumulatedTime += currentTime - thisTime;\n\n      if (runsPerSecond > 0) {\n        runsInRound++;\n        long expectedTime = 1000 * runsInRound / runsPerSecond;\n        long roundTime = currentTime - roundStart;\n        if (roundTime < expectedTime) {\n          try {\n            Thread.sleep(expectedTime - roundTime);\n          } catch (InterruptedException e) {\n            Thread.currentThread().interrupt();\n            LOG.debug(\"Sleep interrupted. Ignoring.\");\n          }\n          currentTime = System.currentTimeMillis();\n        }\n        // do we have to start a new round of runsPerSecond?\n        if (runsInRound >= runsPerSecond) {\n          runsInRound = 0;\n          roundStart = currentTime;\n        }\n      }\n      // if time limit is exceeded, break\n      if (endTime > 0 && currentTime >= endTime) {\n        break;\n      }\n    }\n\n    long runtime = System.currentTimeMillis() - startTime;\n\n    StringBuilder sb = new StringBuilder();\n    sb.append(String.format(\"%s %s done: %d  runs in %d ms\", agentGroup.getName(), agentId, runs, runtime));\n    if (runtime != 0) {\n      sb.append(String.format(\", average %d/sec\", (runs * 1000L / runtime)));\n    }\n    if (runs != 0) {\n      sb.append(String.format(\", average %d ms/run\", (accumulatedTime / runs)));\n    }\n    msg = sb.toString();\n    LOG.info(msg);\n    printConsole(msg);\n\n    LOG.debug(\"Benchmark agent thread finished.\");\n  }","commit_id":"270c47e0a3c8802b4109b10b5d0cbbe930ee516c","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  OperationExecutor create() {\n    Injector injector = Guice.createInjector (\n        new DataFabricModules().getInMemoryModules());\n    return injector.getInstance(OperationExecutor.class);\n  }","id":96149,"modified_method":"@Override\n  OperationExecutor create() {\n    Injector injector = Guice.createInjector (\n        new DataFabricModules().getInMemoryModules());\n    injector.getInstance(InMemoryTransactionManager.class).init();\n    return injector.getInstance(OperationExecutor.class);\n  }","commit_id":"270c47e0a3c8802b4109b10b5d0cbbe930ee516c","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void shutdown() {\n    LOG.debug(\"Shutting down opex provider.\");\n    this.opexProvider.shutdown(this.opex);\n  }","id":96150,"modified_method":"@Override\n  public void shutdown() {\n    LOG.debug(\"Shutting down opex provider.\");\n    if (this.opex != null) {\n      this.opexProvider.shutdown(this.opex);\n    }\n  }","commit_id":"270c47e0a3c8802b4109b10b5d0cbbe930ee516c","url":"https://github.com/caskdata/cdap"},{"original_method":"/**\n   * Get the pathname to the <code>patch<\/code> files.\n   * @param path Path to find.\n   * @return the pathname as a URL\n   */\n  private static String getWebAppsPath(final String path) throws IOException {\n    URL url = InfoServer.class.getClassLoader().getResource(path);\n    if (url == null) \n      throw new IOException(\"webapps not found in CLASSPATH\"); \n    return url.toString();\n  }","id":96151,"modified_method":"/**\n   * Get the pathname to the <code>patch<\/code> files.\n   * @param path Path to find.\n   * @return the pathname as a URL\n   */\n  private static String getWebAppsPath(final String path) throws IOException {\n    URL url = InfoServer.class.getClassLoader().getResource(path);\n    if (url == null) \n      throw new IOException(\"webapps not found in CLASSPATH: \" + path); \n    return url.toString();\n  }","commit_id":"39bff3580b018d0efe00ab39d78da6930c47c43c","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * Shut down the mini HBase cluster\n   */\n  public void shutdown() {\n    this.hbaseCluster.shutdown();\n    if (shutdownDFS) {\n      StaticTestEnvironment.shutdownDfs(cluster);\n    }\n    // Delete all DFS files\n    if(deleteOnExit) {\n      deleteFile(new File(System.getProperty(\n          StaticTestEnvironment.TEST_DIRECTORY_KEY), \"dfs\"));\n    }\n  }","id":96152,"modified_method":"/**\n   * Shut down the mini HBase cluster\n   */\n  public void shutdown() {\n    if (this.hbaseCluster != null) {\n      this.hbaseCluster.shutdown();\n    }\n    if (shutdownDFS) {\n      StaticTestEnvironment.shutdownDfs(cluster);\n    }\n    // Delete all DFS files\n    if(deleteOnExit) {\n      deleteFile(new File(System.getProperty(\n          StaticTestEnvironment.TEST_DIRECTORY_KEY), \"dfs\"));\n    }\n  }","commit_id":"39bff3580b018d0efe00ab39d78da6930c47c43c","url":"https://github.com/apache/hbase"},{"original_method":"public void testRepeatedEncodeAfterShutdownCrossSegment() throws InsertException, IOException, MissingKeyException, StorageFormatException, ChecksumFailedException, ResumeFailedException, MetadataUnresolvedException {\n        //if(!TestProperty.EXTENSIVE) return;\n        testRepeatedEncodeAfterShutdownCrossSegment(CHKBlock.DATA_LENGTH*128*21);\n    }","id":96153,"modified_method":"public void testRepeatedEncodeAfterShutdown() throws InsertException, IOException, MissingKeyException, StorageFormatException, ChecksumFailedException, ResumeFailedException, MetadataUnresolvedException {\n        testRepeatedEncodeAfterShutdownCrossSegment(CHKBlock.DATA_LENGTH*128*5); // Not cross-segment.\n        //if(!TestProperty.EXTENSIVE) return;\n        testRepeatedEncodeAfterShutdownCrossSegment(CHKBlock.DATA_LENGTH*128*21); // Cross-segment.\n    }","commit_id":"ca4dc791cd54df31e6582839f63e30ff4961593c","url":"https://github.com/freenet/fred"},{"original_method":"private void testRepeatedEncodeAfterShutdownCrossSegment(long size) throws InsertException, IOException, MissingKeyException, StorageFormatException, ChecksumFailedException, ResumeFailedException, MetadataUnresolvedException {\n        Random r = new Random(12121);\n        LockableRandomAccessThing data = generateData(r, size, bigRAFFactory);\n        HashResult[] hashes = getHashes(data);\n        MyCallback cb = new MyCallback();\n        MyKeysFetchingLocally keys = new MyKeysFetchingLocally();\n        // Only enough for one segment at a time.\n        MemoryLimitedJobRunner memoryLimitedJobRunner = new MemoryLimitedJobRunner(9*1024*1024L, 1, executor);\n        SplitFileInserterStorage storage = new SplitFileInserterStorage(data, size, cb, null,\n                new ClientMetadata(), false, null, smallRAFFactory, true, baseContext.clone(), \n                cryptoAlgorithm, cryptoKey, null, hashes, smallBucketFactory, checker, \n                r, memoryLimitedJobRunner, jobRunner, ticker, keys, false, 0, 0, 0, 0);\n        executor.waitForIdle();\n        // Has not encoded anything.\n        for(SplitFileInserterSegmentStorage segment : storage.segments)\n            assert(!segment.isFinishedEncoding());\n        SplitFileInserterStorage resumed = new SplitFileInserterStorage(storage.getRAF(), data, cb, r, \n                memoryLimitedJobRunner, jobRunner, ticker, keys, fg, persistentFileTracker);\n        resumed.start();\n        // The memoryLimitedJobRunner will only encode one segment at a time.\n        // Wait for it to encode one segment.\n        memoryLimitedJobRunner.shutdown();\n        memoryLimitedJobRunner.waitForShutdown();\n        assertEquals(countEncodedCrossSegments(resumed), 1);\n        memoryLimitedJobRunner = new MemoryLimitedJobRunner(9*1024*1024L, 1, executor);\n        resumed = new SplitFileInserterStorage(storage.getRAF(), data, cb, r, \n                memoryLimitedJobRunner, jobRunner, ticker, keys, fg, persistentFileTracker);\n        resumed.start();\n        cb.waitForFinishedEncode();\n        cb.waitForHasKeys();\n        executor.waitForIdle();\n        resumed.encodeMetadata();\n        assertTrue(resumed.getStatus() == Status.ENCODED);\n        resumed.originalData.free();\n        resumed.getRAF().free();\n    }","id":96154,"modified_method":"private void testRepeatedEncodeAfterShutdownCrossSegment(long size) throws InsertException, IOException, MissingKeyException, StorageFormatException, ChecksumFailedException, ResumeFailedException, MetadataUnresolvedException {\n        Random r = new Random(12121);\n        LockableRandomAccessThing data = generateData(r, size, bigRAFFactory);\n        HashResult[] hashes = getHashes(data);\n        MyCallback cb = new MyCallback();\n        MyKeysFetchingLocally keys = new MyKeysFetchingLocally();\n        // Only enough for one segment at a time.\n        MemoryLimitedJobRunner memoryLimitedJobRunner = new MemoryLimitedJobRunner(9*1024*1024L, 1, executor);\n        SplitFileInserterStorage storage = new SplitFileInserterStorage(data, size, cb, null,\n                new ClientMetadata(), false, null, smallRAFFactory, true, baseContext.clone(), \n                cryptoAlgorithm, cryptoKey, null, hashes, smallBucketFactory, checker, \n                r, memoryLimitedJobRunner, jobRunner, ticker, keys, false, 0, 0, 0, 0);\n        executor.waitForIdle();\n        // Has not encoded anything.\n        for(SplitFileInserterSegmentStorage segment : storage.segments)\n            assert(!segment.isFinishedEncoding());\n        SplitFileInserterStorage resumed = null;\n        if(storage.crossSegments != null) {\n            for(int i=0;i<storage.crossSegments.length;i++) {\n                memoryLimitedJobRunner = new MemoryLimitedJobRunner(9*1024*1024L, 1, executor);\n                resumed = new SplitFileInserterStorage(storage.getRAF(), data, cb, r, \n                        memoryLimitedJobRunner, jobRunner, ticker, keys, fg, persistentFileTracker);\n                assertEquals(i, countEncodedCrossSegments(resumed));\n                resumed.start();\n                // The memoryLimitedJobRunner will only encode one segment at a time.\n                // Wait for it to encode one segment.\n                memoryLimitedJobRunner.shutdown();\n                memoryLimitedJobRunner.waitForShutdown();\n                executor.waitForIdle();\n                assertEquals(i+1, countEncodedCrossSegments(resumed));\n            }\n        }\n        \n        for(int i=0;i<storage.segments.length;i++) {\n            memoryLimitedJobRunner = new MemoryLimitedJobRunner(9*1024*1024L, 1, executor);\n            resumed = new SplitFileInserterStorage(storage.getRAF(), data, cb, r, \n                    memoryLimitedJobRunner, jobRunner, ticker, keys, fg, persistentFileTracker);\n            assertEquals(i, countEncodedSegments(resumed));\n            if(storage.crossSegments != null) {\n                assertEquals(resumed.crossSegments.length, countEncodedCrossSegments(resumed));\n                assertTrue(resumed.getStatus() == Status.ENCODED_CROSS_SEGMENTS);\n            }\n            resumed.start();\n            // The memoryLimitedJobRunner will only encode one segment at a time.\n            // Wait for it to encode one segment.\n            memoryLimitedJobRunner.shutdown();\n            memoryLimitedJobRunner.waitForShutdown();\n            executor.waitForIdle();\n            assertEquals(i+1, countEncodedSegments(resumed));\n        }\n        \n        cb.waitForFinishedEncode();\n        cb.waitForHasKeys();\n        executor.waitForIdle();\n        resumed.encodeMetadata();\n        assertTrue(resumed.getStatus() == Status.ENCODED);\n        resumed.originalData.free();\n        resumed.getRAF().free();\n    }","commit_id":"ca4dc791cd54df31e6582839f63e30ff4961593c","url":"https://github.com/freenet/fred"},{"original_method":"public static int solrQuery(\r\n            final SearchEvent event,\r\n            final int offset,\r\n            final int count,\r\n            final long time,\r\n            final Seed target,\r\n            final Blacklist blacklist) {\r\n\r\n        final HandleSet wordhashes = event.getQuery().query_include_hashes;\r\n\r\n        if (event.getQuery().queryString == null || event.getQuery().queryString.length() == 0) {\r\n            return -1; // we cannot query solr only with word hashes, there is no clear text string\r\n        }\r\n        event.rankingProcess.addExpectedRemoteReferences(count);\r\n        SolrDocumentList docList = null;\r\n        final String solrQuerystring = event.getQuery().solrQueryString(false);\r\n        Log.logInfo(\"Protocol\", \"SOLR QUERY: \" + solrQuerystring);\r\n        boolean localsearch = target == null || target.equals(event.peers.mySeed());\r\n        if (localsearch) {\r\n            // search the local index\r\n            try {\r\n                docList = event.rankingProcess.getQuery().getSegment().fulltext().getSolr().query(solrQuerystring, offset, count);\r\n            } catch (SolrException e) {\r\n                Network.log.logInfo(\"SEARCH failed (solr), localpeer (\" + e.getMessage() + \")\");\r\n                return -1;\r\n            } catch (IOException e) {\r\n                Network.log.logInfo(\"SEARCH failed (solr), localpeer (\" + e.getMessage() + \")\");\r\n                return -1;\r\n            }\r\n        } else {\r\n            final String solrURL = \"http://\" + target.getPublicAddress() + \"/solr\";\r\n            try {\r\n                SolrConnector solrConnector = new RemoteSolrConnector(solrURL);\r\n                docList = solrConnector.query(solrQuerystring, offset, count);\r\n                // no need to close this here because that sends a commit to remote solr which is not wanted here\r\n            } catch (IOException e) {\r\n                Network.log.logInfo(\"SEARCH failed (solr), Peer: \" + target.hash + \":\" + target.getName() + \" (\" + e.getMessage() + \")\");\r\n                return -1;\r\n            }\r\n        }\r\n\r\n        // evaluate result\r\n\t\tif (docList.size() > 0) {// create containers\r\n            final List<ReferenceContainer<WordReference>> container = new ArrayList<ReferenceContainer<WordReference>>(wordhashes.size());\r\n            for (byte[] hash: wordhashes) {\r\n                try {\r\n                    container.add(ReferenceContainer.emptyContainer(\r\n                                Segment.wordReferenceFactory,\r\n                                hash,\r\n                                count));\r\n                } catch (SpaceExceededException e) {\r\n                } // throws SpaceExceededException\r\n            }\r\n\r\n        \tint term = count;\r\n            for (final SolrDocument doc: docList) {\r\n                if ( term-- <= 0 ) {\r\n                    break; // do not process more that requested (in case that evil peers fill us up with rubbish)\r\n                }\r\n                // get one single search result\r\n                if ( doc == null ) {\r\n                    continue;\r\n                }\r\n                URIMetadataNode urlEntry = new URIMetadataNode(doc);\r\n\r\n                if ( blacklist.isListed(BlacklistType.SEARCH, urlEntry) ) {\r\n                    if ( Network.log.isInfo() ) {\r\n                        if (localsearch) {\r\n                            Network.log.logInfo(\"local search (solr): filtered blacklisted url \" + urlEntry.url());\r\n                        } else {\r\n                            Network.log.logInfo(\"remote search (solr): filtered blacklisted url \" + urlEntry.url() + \" from peer \" + target.getName());\r\n                        }\r\n                    }\r\n                    continue; // block with backlist\r\n                }\r\n\r\n                final String urlRejectReason =\r\n                    Switchboard.getSwitchboard().crawlStacker.urlInAcceptedDomain(urlEntry.url());\r\n                if ( urlRejectReason != null ) {\r\n                    if ( Network.log.isInfo() ) {\r\n                        if (localsearch) {\r\n                            Network.log.logInfo(\"local search (solr): rejected url '\" + urlEntry.url() + \"' (\" + urlRejectReason + \")\");\r\n                        } else {\r\n                            Network.log.logInfo(\"remote search (solr): rejected url '\" + urlEntry.url() + \"' (\" + urlRejectReason + \") from peer \" + target.getName());\r\n                        }\r\n                    }\r\n                    continue; // reject url outside of our domain\r\n                }\r\n\r\n                // passed all checks, store url\r\n                if (!localsearch) {\r\n                    try {\r\n                        event.getQuery().getSegment().fulltext().putDocument(ClientUtils.toSolrInputDocument(doc));\r\n                        ResultURLs.stack(\r\n                            urlEntry,\r\n                            event.peers.mySeed().hash.getBytes(),\r\n                            UTF8.getBytes(target.hash),\r\n                            EventOrigin.QUERIES);\r\n                    } catch ( final IOException e ) {\r\n                        Network.log.logWarning(\"could not store search result\", e);\r\n                        continue; // db-error\r\n                    }\r\n                }\r\n\r\n                // we create virtual word references here which are necessary to feed search results into retrieval process\r\n                Reference entry = new WordReferenceVars(urlEntry);\r\n\r\n                // add the url entry to the word indexes\r\n                for ( final ReferenceContainer<WordReference> c : container ) {\r\n                    try {\r\n                        c.add(entry);\r\n                    } catch ( final SpaceExceededException e ) {\r\n                        Log.logException(e);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (localsearch) {\r\n                event.rankingProcess.add(container.get(0), true, \"localpeer\", docList.size(), time);\r\n                event.rankingProcess.addFinalize();\r\n                event.rankingProcess.addExpectedRemoteReferences(-count);\r\n                Network.log.logInfo(\"local search (solr): localpeer sent \" + container.get(0).size() + \"/\" + docList.size() + \" references\");\r\n            } else {\r\n                event.rankingProcess.add(container.get(0), false, target.getName() + \"/\" + target.hash, docList.size(), time);\r\n                event.rankingProcess.addFinalize();\r\n                event.rankingProcess.addExpectedRemoteReferences(-count);\r\n                Network.log.logInfo(\"remote search (solr): peer \" + target.getName() + \" sent \" + container.get(0).size() + \"/\" + docList.size() + \" references\");\r\n            }\r\n\t\t}\r\n        return docList.size();\r\n    }","id":96155,"modified_method":"public static int solrQuery(\r\n            final SearchEvent event,\r\n            final int offset,\r\n            final int count,\r\n            final long time,\r\n            final Seed target,\r\n            final Blacklist blacklist) {\r\n\r\n        final HandleSet wordhashes = event.getQuery().query_include_hashes;\r\n\r\n        if (event.getQuery().queryString == null || event.getQuery().queryString.length() == 0) {\r\n            return -1; // we cannot query solr only with word hashes, there is no clear text string\r\n        }\r\n        event.rankingProcess.addExpectedRemoteReferences(count);\r\n        SolrDocumentList docList = null;\r\n        final String solrQuerystring = event.getQuery().solrQueryString();\r\n        boolean localsearch = target == null || target.equals(event.peers.mySeed());\r\n        if (localsearch) {\r\n            // search the local index\r\n            try {\r\n                docList = event.rankingProcess.getQuery().getSegment().fulltext().getSolr().query(solrQuerystring, offset, count);\r\n            } catch (SolrException e) {\r\n                Network.log.logInfo(\"SEARCH failed (solr, 1), localpeer (\" + e.getMessage() + \")\", e);\r\n                return -1;\r\n            } catch (IOException e) {\r\n                Network.log.logInfo(\"SEARCH failed (solr, 2), localpeer (\" + e.getMessage() + \")\", e);\r\n                return -1;\r\n            }\r\n        } else {\r\n            final String solrURL = \"http://\" + target.getPublicAddress() + \"/solr\";\r\n            try {\r\n                SolrConnector solrConnector = new RemoteSolrConnector(solrURL);\r\n                docList = solrConnector.query(solrQuerystring, offset, count);\r\n                // no need to close this here because that sends a commit to remote solr which is not wanted here\r\n            } catch (IOException e) {\r\n                Network.log.logInfo(\"SEARCH failed (solr), Peer: \" + target.hash + \":\" + target.getName() + \" (\" + e.getMessage() + \")\", e);\r\n                return -1;\r\n            }\r\n        }\r\n\r\n        // evaluate result\r\n\t\tif (docList.size() > 0) {// create containers\r\n            Network.log.logInfo(\"SEARCH (solr), returned \" + docList.size() + \" documents from peer \" + target.hash + \":\" + target.getName());\r\n            final List<ReferenceContainer<WordReference>> container = new ArrayList<ReferenceContainer<WordReference>>(wordhashes.size());\r\n            for (byte[] hash: wordhashes) {\r\n                try {\r\n                    container.add(ReferenceContainer.emptyContainer(\r\n                                Segment.wordReferenceFactory,\r\n                                hash,\r\n                                count));\r\n                } catch (SpaceExceededException e) {\r\n                } // throws SpaceExceededException\r\n            }\r\n\r\n        \tint term = count;\r\n            for (final SolrDocument doc: docList) {\r\n                if ( term-- <= 0 ) {\r\n                    break; // do not process more that requested (in case that evil peers fill us up with rubbish)\r\n                }\r\n                // get one single search result\r\n                if ( doc == null ) {\r\n                    continue;\r\n                }\r\n                URIMetadataNode urlEntry = new URIMetadataNode(doc);\r\n\r\n                if ( blacklist.isListed(BlacklistType.SEARCH, urlEntry) ) {\r\n                    if ( Network.log.isInfo() ) {\r\n                        if (localsearch) {\r\n                            Network.log.logInfo(\"local search (solr): filtered blacklisted url \" + urlEntry.url());\r\n                        } else {\r\n                            Network.log.logInfo(\"remote search (solr): filtered blacklisted url \" + urlEntry.url() + \" from peer \" + target.getName());\r\n                        }\r\n                    }\r\n                    continue; // block with backlist\r\n                }\r\n\r\n                final String urlRejectReason =\r\n                    Switchboard.getSwitchboard().crawlStacker.urlInAcceptedDomain(urlEntry.url());\r\n                if ( urlRejectReason != null ) {\r\n                    if ( Network.log.isInfo() ) {\r\n                        if (localsearch) {\r\n                            Network.log.logInfo(\"local search (solr): rejected url '\" + urlEntry.url() + \"' (\" + urlRejectReason + \")\");\r\n                        } else {\r\n                            Network.log.logInfo(\"remote search (solr): rejected url '\" + urlEntry.url() + \"' (\" + urlRejectReason + \") from peer \" + target.getName());\r\n                        }\r\n                    }\r\n                    continue; // reject url outside of our domain\r\n                }\r\n\r\n                // passed all checks, store url\r\n                if (!localsearch) {\r\n                    try {\r\n                        event.getQuery().getSegment().fulltext().putDocument(ClientUtils.toSolrInputDocument(doc));\r\n                        ResultURLs.stack(\r\n                            urlEntry,\r\n                            event.peers.mySeed().hash.getBytes(),\r\n                            UTF8.getBytes(target.hash),\r\n                            EventOrigin.QUERIES);\r\n                    } catch ( final IOException e ) {\r\n                        Network.log.logWarning(\"could not store search result\", e);\r\n                        continue; // db-error\r\n                    }\r\n                }\r\n\r\n                // we create virtual word references here which are necessary to feed search results into retrieval process\r\n                Reference entry = new WordReferenceVars(urlEntry);\r\n\r\n                // add the url entry to the word indexes\r\n                for ( final ReferenceContainer<WordReference> c : container ) {\r\n                    try {\r\n                        c.add(entry);\r\n                    } catch ( final SpaceExceededException e ) {\r\n                        Log.logException(e);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (localsearch) {\r\n                event.rankingProcess.add(container.get(0), true, \"localpeer\", docList.size(), time);\r\n                event.rankingProcess.addFinalize();\r\n                event.rankingProcess.addExpectedRemoteReferences(-count);\r\n                Network.log.logInfo(\"local search (solr): localpeer sent \" + container.get(0).size() + \"/\" + docList.size() + \" references\");\r\n            } else {\r\n                event.rankingProcess.add(container.get(0), false, target.getName() + \"/\" + target.hash, docList.size(), time);\r\n                event.rankingProcess.addFinalize();\r\n                event.rankingProcess.addExpectedRemoteReferences(-count);\r\n                Network.log.logInfo(\"remote search (solr): peer \" + target.getName() + \" sent \" + container.get(0).size() + \"/\" + docList.size() + \" references\");\r\n            }\r\n\t\t}\r\n        return docList.size();\r\n    }","commit_id":"c913b2ba77506186c4fc24021882f0a103195d70","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public void terminate() {\n        this.client.getConnectionManager().shutdown();\n    }","id":96156,"modified_method":"public void terminate() {\n        if (this.client != null) this.client.getConnectionManager().shutdown();\n    }","commit_id":"c913b2ba77506186c4fc24021882f0a103195d70","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"@Override\n    public synchronized void close() {\n        try {\n            synchronized (this.server) {\n                this.server.commit();\n            }\n            this.server = null;\n        } catch (SolrServerException e) {\n            Log.logException(e);\n        } catch (IOException e) {\n            Log.logException(e);\n        }\n    }","id":96157,"modified_method":"@Override\n    public synchronized void close() {\n        try {\n            if (this.server != null) synchronized (this.server) {this.server.commit();}\n            this.server = null;\n        } catch (SolrServerException e) {\n            Log.logException(e);\n        } catch (IOException e) {\n            Log.logException(e);\n        }\n    }","commit_id":"c913b2ba77506186c4fc24021882f0a103195d70","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"/**\n     * Closes JOSM and optionally terminates the Java Virtual Machine (JVM).\n     * If there are some unsaved data layers, asks first for user confirmation.\n     * @param exit If {@code true}, the JVM is terminated by running {@link System#exit} with a given return code.\n     * @param exitCode The return code\n     * @return {@code true} if JOSM has been closed, {@code false} if the user has cancelled the operation.\n     * @since 3378\n     */\n    public static boolean exitJosm(boolean exit, int exitCode) {\n        if (Main.saveUnsavedModifications()) {\n            Main.main.shutdown();\n\n            if (exit) {\n                System.exit(exitCode);\n            }\n            return true;\n        }\n        return false;\n    }","id":96158,"modified_method":"/**\n     * Closes JOSM and optionally terminates the Java Virtual Machine (JVM).\n     * If there are some unsaved data layers, asks first for user confirmation.\n     * @param exit If {@code true}, the JVM is terminated by running {@link System#exit} with a given return code.\n     * @param exitCode The return code\n     * @return {@code true} if JOSM has been closed, {@code false} if the user has cancelled the operation.\n     * @since 3378\n     */\n    public static boolean exitJosm(boolean exit, int exitCode) {\n        if (Main.saveUnsavedModifications()) {\n            if (Main.main != null) {\n                Main.main.shutdown();\n            }\n\n            if (exit) {\n                System.exit(exitCode);\n            }\n            return true;\n        }\n        return false;\n    }","commit_id":"1d51f1cfc9a9da7533b59bc8cd4eb7b6ec3b487f","url":"https://github.com/openstreetmap/josm"},{"original_method":"/**\n   * Shut down the mini HBase cluster\n   */\n  public void shutdown() {\n    this.hbaseCluster.shutdown();\n\n    try {\n      if (shutdownDFS && cluster != null) {\n        FileSystem fs = cluster.getFileSystem();\n\n        LOG.info(\"Shutting down Mini DFS \");\n        cluster.shutdown();\n\n        if (fs != null) {\n          LOG.info(\"Shutting down FileSystem\");\n          fs.close();\n        }\n      }\n\n    } catch (IOException e) {\n      LOG.error(\"shutdown\", e);\n\n    } finally {\n      // Delete all DFS files\n      if(deleteOnExit) {\n        deleteFile(new File(System.getProperty(\n            StaticTestEnvironment.TEST_DIRECTORY_KEY), \"dfs\"));\n      }\n    }\n\n  }","id":96159,"modified_method":"/**\n   * Shut down the mini HBase cluster\n   */\n  public void shutdown() {\n    this.hbaseCluster.shutdown();\n    try {\n      if (shutdownDFS && cluster != null) {\n        FileSystem fs = cluster.getFileSystem();\n        if (fs != null) {\n          LOG.info(\"Shutting down FileSystem\");\n          fs.close();\n        }\n        if (this.cluster != null) {\n          LOG.info(\"Shutting down Mini DFS \");\n          cluster.shutdown();\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"shutdown\", e);\n    } finally {\n      // Delete all DFS files\n      if(deleteOnExit) {\n        deleteFile(new File(System.getProperty(\n            StaticTestEnvironment.TEST_DIRECTORY_KEY), \"dfs\"));\n      }\n    }\n  }","commit_id":"bf4262e220ca8b1710866571a969dd2377f896c8","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * @param snapshot descriptor of the snapshot to take\n   * @param masterServices master services provider\n   */\n  public DisabledTableSnapshotHandler(SnapshotDescription snapshot,\n      final MasterServices masterServices) {\n    super(snapshot, masterServices);\n\n    // setup the timer\n    timeoutInjector = getMasterTimerAndBindToMonitor(snapshot, conf, monitor);\n  }","id":96160,"modified_method":"/**\n   * @param snapshot descriptor of the snapshot to take\n   * @param masterServices master services provider\n   */\n  public DisabledTableSnapshotHandler(SnapshotDescription snapshot,\n      final MasterServices masterServices) {\n    super(snapshot, masterServices);\n  }","commit_id":"16ff57bea94645aae30ba9b6bf4375b2eec202f1","url":"https://github.com/apache/hbase"},{"original_method":"@Override\n  public void snapshotRegions(List<Pair<HRegionInfo, ServerName>> regionsAndLocations)\n      throws IOException, KeeperException {\n    try {\n      timeoutInjector.start();\n\n      // 1. get all the regions hosting this table.\n\n      // extract each pair to separate lists\n      Set<HRegionInfo> regions = new HashSet<HRegionInfo>();\n      for (Pair<HRegionInfo, ServerName> p : regionsAndLocations) {\n        // Don't include non-default regions\n        HRegionInfo hri = p.getFirst();\n        if (RegionReplicaUtil.isDefaultReplica(hri)) {\n          regions.add(hri);\n        }\n        // if it's the first region, add the mob region\n        if (Bytes.equals(hri.getStartKey(), HConstants.EMPTY_START_ROW)) {\n          HRegionInfo mobRegion = MobUtils.getMobRegionInfo(hri.getTable());\n          regions.add(mobRegion);\n        }\n      }\n\n      // 2. for each region, write all the info to disk\n      String msg = \"Starting to write region info and WALs for regions for offline snapshot:\"\n          + ClientSnapshotDescriptionUtils.toString(snapshot);\n      LOG.info(msg);\n      status.setStatus(msg);\n\n      ThreadPoolExecutor exec = SnapshotManifest.createExecutor(conf, \"DisabledTableSnapshot\");\n      try {\n        ModifyRegionUtils.editRegions(exec, regions, new ModifyRegionUtils.RegionEditTask() {\n          @Override\n          public void editRegion(final HRegionInfo regionInfo) throws IOException {\n            snapshotManifest.addRegion(FSUtils.getTableDir(rootDir, snapshotTable), regionInfo);\n          }\n        });\n      } finally {\n        exec.shutdown();\n      }\n    } catch (Exception e) {\n      // make sure we capture the exception to propagate back to the client later\n      String reason = \"Failed snapshot \" + ClientSnapshotDescriptionUtils.toString(snapshot)\n          + \" due to exception:\" + e.getMessage();\n      ForeignException ee = new ForeignException(reason, e);\n      monitor.receive(ee);\n      status.abort(\"Snapshot of table: \"+ snapshotTable + \" failed because \" + e.getMessage());\n    } finally {\n      LOG.debug(\"Marking snapshot\" + ClientSnapshotDescriptionUtils.toString(snapshot)\n          + \" as finished.\");\n\n      // 3. mark the timer as finished - even if we got an exception, we don't need to time the\n      // operation any further\n      timeoutInjector.complete();\n    }\n  }","id":96161,"modified_method":"@Override\n  public void snapshotRegions(List<Pair<HRegionInfo, ServerName>> regionsAndLocations)\n      throws IOException, KeeperException {\n    try {\n      // 1. get all the regions hosting this table.\n\n      // extract each pair to separate lists\n      Set<HRegionInfo> regions = new HashSet<HRegionInfo>();\n      for (Pair<HRegionInfo, ServerName> p : regionsAndLocations) {\n        // Don't include non-default regions\n        HRegionInfo hri = p.getFirst();\n        if (RegionReplicaUtil.isDefaultReplica(hri)) {\n          regions.add(hri);\n        }\n        // if it's the first region, add the mob region\n        if (Bytes.equals(hri.getStartKey(), HConstants.EMPTY_START_ROW)) {\n          HRegionInfo mobRegion = MobUtils.getMobRegionInfo(hri.getTable());\n          regions.add(mobRegion);\n        }\n      }\n\n      // 2. for each region, write all the info to disk\n      String msg = \"Starting to write region info and WALs for regions for offline snapshot:\"\n          + ClientSnapshotDescriptionUtils.toString(snapshot);\n      LOG.info(msg);\n      status.setStatus(msg);\n\n      ThreadPoolExecutor exec = SnapshotManifest.createExecutor(conf, \"DisabledTableSnapshot\");\n      try {\n        ModifyRegionUtils.editRegions(exec, regions, new ModifyRegionUtils.RegionEditTask() {\n          @Override\n          public void editRegion(final HRegionInfo regionInfo) throws IOException {\n            snapshotManifest.addRegion(FSUtils.getTableDir(rootDir, snapshotTable), regionInfo);\n          }\n        });\n      } finally {\n        exec.shutdown();\n      }\n    } catch (Exception e) {\n      // make sure we capture the exception to propagate back to the client later\n      String reason = \"Failed snapshot \" + ClientSnapshotDescriptionUtils.toString(snapshot)\n          + \" due to exception:\" + e.getMessage();\n      ForeignException ee = new ForeignException(reason, e);\n      monitor.receive(ee);\n      status.abort(\"Snapshot of table: \"+ snapshotTable + \" failed because \" + e.getMessage());\n    } finally {\n      LOG.debug(\"Marking snapshot\" + ClientSnapshotDescriptionUtils.toString(snapshot)\n          + \" as finished.\");\n    }\n  }","commit_id":"16ff57bea94645aae30ba9b6bf4375b2eec202f1","url":"https://github.com/apache/hbase"},{"original_method":"/**\n   * @param conf {@link Configuration} from which to check for the timeout\n   * @param type type of snapshot being taken\n   * @param defaultMaxWaitTime Default amount of time to wait, if none is in the configuration\n   * @return the max amount of time the master should wait for a snapshot to complete\n   */\n  public static long getMaxMasterTimeout(Configuration conf, SnapshotDescription.Type type,\n      long defaultMaxWaitTime) {\n    String confKey;\n    switch (type) {\n    case DISABLED:\n    default:\n      confKey = MASTER_SNAPSHOT_TIMEOUT_MILLIS;\n    }\n    return conf.getLong(confKey, defaultMaxWaitTime);\n  }","id":96162,"modified_method":"/**\n   * @param conf {@link Configuration} from which to check for the timeout\n   * @param type type of snapshot being taken\n   * @param defaultMaxWaitTime Default amount of time to wait, if none is in the configuration\n   * @return the max amount of time the master should wait for a snapshot to complete\n   */\n  public static long getMaxMasterTimeout(Configuration conf, SnapshotDescription.Type type,\n      long defaultMaxWaitTime) {\n    String confKey;\n    switch (type) {\n    case DISABLED:\n    default:\n      confKey = MASTER_SNAPSHOT_TIMEOUT_MILLIS;\n    }\n    return Math.max(conf.getLong(confKey, defaultMaxWaitTime),\n        conf.getLong(SNAPSHOT_TIMEOUT_MILLIS_KEY, defaultMaxWaitTime));\n  }","commit_id":"16ff57bea94645aae30ba9b6bf4375b2eec202f1","url":"https://github.com/apache/hbase"},{"original_method":"@Override\n  public void initialize(MasterServices master, MetricsMaster metricsMaster) throws KeeperException,\n      IOException, UnsupportedOperationException {\n    this.master = master;\n\n    this.rootDir = master.getMasterFileSystem().getRootDir();\n    checkSnapshotSupport(master.getConfiguration(), master.getMasterFileSystem());\n\n    // get the configuration for the coordinator\n    Configuration conf = master.getConfiguration();\n    long wakeFrequency = conf.getInt(SNAPSHOT_WAKE_MILLIS_KEY, SNAPSHOT_WAKE_MILLIS_DEFAULT);\n    long timeoutMillis = conf.getLong(SNAPSHOT_TIMEOUT_MILLIS_KEY, SNAPSHOT_TIMEOUT_MILLIS_DEFAULT);\n    int opThreads = conf.getInt(SNAPSHOT_POOL_THREADS_KEY, SNAPSHOT_POOL_THREADS_DEFAULT);\n\n    // setup the default procedure coordinator\n    String name = master.getServerName().toString();\n    ThreadPoolExecutor tpool = ProcedureCoordinator.defaultPool(name, opThreads);\n    ProcedureCoordinatorRpcs comms = new ZKProcedureCoordinatorRpcs(\n        master.getZooKeeper(), SnapshotManager.ONLINE_SNAPSHOT_CONTROLLER_DESCRIPTION, name);\n\n    this.coordinator = new ProcedureCoordinator(comms, tpool, timeoutMillis, wakeFrequency);\n    this.executorService = master.getExecutorService();\n    resetTempDir();\n  }","id":96163,"modified_method":"@Override\n  public void initialize(MasterServices master, MetricsMaster metricsMaster) throws KeeperException,\n      IOException, UnsupportedOperationException {\n    this.master = master;\n\n    this.rootDir = master.getMasterFileSystem().getRootDir();\n    checkSnapshotSupport(master.getConfiguration(), master.getMasterFileSystem());\n\n    // get the configuration for the coordinator\n    Configuration conf = master.getConfiguration();\n    long wakeFrequency = conf.getInt(SNAPSHOT_WAKE_MILLIS_KEY, SNAPSHOT_WAKE_MILLIS_DEFAULT);\n    long timeoutMillis = Math.max(conf.getLong(SnapshotDescriptionUtils.SNAPSHOT_TIMEOUT_MILLIS_KEY,\n                    SnapshotDescriptionUtils.SNAPSHOT_TIMEOUT_MILLIS_DEFAULT),\n            conf.getLong(SnapshotDescriptionUtils.MASTER_SNAPSHOT_TIMEOUT_MILLIS,\n                    SnapshotDescriptionUtils.DEFAULT_MAX_WAIT_TIME));\n    int opThreads = conf.getInt(SNAPSHOT_POOL_THREADS_KEY, SNAPSHOT_POOL_THREADS_DEFAULT);\n\n    // setup the default procedure coordinator\n    String name = master.getServerName().toString();\n    ThreadPoolExecutor tpool = ProcedureCoordinator.defaultPool(name, opThreads);\n    ProcedureCoordinatorRpcs comms = new ZKProcedureCoordinatorRpcs(\n        master.getZooKeeper(), SnapshotManager.ONLINE_SNAPSHOT_CONTROLLER_DESCRIPTION, name);\n\n    this.coordinator = new ProcedureCoordinator(comms, tpool, timeoutMillis, wakeFrequency);\n    this.executorService = master.getExecutorService();\n    resetTempDir();\n  }","commit_id":"16ff57bea94645aae30ba9b6bf4375b2eec202f1","url":"https://github.com/apache/hbase"},{"original_method":"private synchronized void rotateKey() {\n    long now = System.currentTimeMillis();\n    // create a new secret key\n    generateKey();\n    // clear out any expired keys\n    for (KeyIdentifier keyIdent : keyCache.getResources()) {\n      // we can only remove keys that expired prior to the oldest non-expired token\n      if (keyIdent.getExpiration() < (now - tokenExpiration)) {\n        LOG.info(\"Removing expired key: id={}, expiration={}\", keyIdent.getKeyId(), keyIdent.getExpiration());\n        keyCache.remove(Integer.toString(keyIdent.getKeyId()));\n      }\n    }\n    lastKeyUpdate = now;\n  }","id":96164,"modified_method":"private synchronized void rotateKey() {\n    long now = System.currentTimeMillis();\n    // create a new secret key\n    generateKey();\n    // clear out any expired keys\n    for (KeyIdentifier keyIdent : keyCache.getResources()) {\n      // we can only remove keys that expired prior to the oldest non-expired token\n      if (keyIdent.getExpiration() < (now - maxTokenExpiration)) {\n        LOG.info(\"Removing expired key: id={}, expiration={}\", keyIdent.getKeyId(), keyIdent.getExpiration());\n        keyCache.remove(Integer.toString(keyIdent.getKeyId()));\n      }\n    }\n    lastKeyUpdate = now;\n  }","commit_id":"75bef676de2d93f72f83287b7b03c4432c791822","url":"https://github.com/caskdata/cdap"},{"original_method":"public DistributedKeyManager(CConfiguration conf, Codec<KeyIdentifier> codec, ZKClient zookeeper) {\n    super(conf);\n    this.parentZNode = conf.get(Constants.Security.DIST_KEY_PARENT_ZNODE);\n    this.keyExpirationPeriod = conf.getLong(Constants.Security.TOKEN_DIGEST_KEY_EXPIRATION);\n    this.tokenExpiration = conf.getLong(Constants.Security.TOKEN_EXPIRATION);\n    this.zookeeper = ZKClients.namespace(zookeeper, parentZNode);\n    this.keyCache = new SharedResourceCache<KeyIdentifier>(zookeeper, codec, \"/keys\");\n  }","id":96165,"modified_method":"public DistributedKeyManager(CConfiguration conf, Codec<KeyIdentifier> codec, ZKClient zookeeper) {\n    super(conf);\n    this.parentZNode = conf.get(Constants.Security.DIST_KEY_PARENT_ZNODE);\n    this.keyExpirationPeriod = conf.getLong(Constants.Security.TOKEN_DIGEST_KEY_EXPIRATION);\n    this.maxTokenExpiration = Math.max(\n      conf.getLong(Constants.Security.EXTENDED_TOKEN_EXPIRATION),\n      conf.getLong(Constants.Security.TOKEN_EXPIRATION));\n    this.zookeeper = ZKClients.namespace(zookeeper, parentZNode);\n    this.keyCache = new SharedResourceCache<KeyIdentifier>(zookeeper, codec, \"/keys\");\n  }","commit_id":"75bef676de2d93f72f83287b7b03c4432c791822","url":"https://github.com/caskdata/cdap"},{"original_method":"@SuppressWarnings(\"unchecked\")\n  private void setInputDataSetIfNeeded(Job jobConf, BasicMapReduceContext mapReduceContext) throws IOException {\n    String inputDataSetName;\n    // whatever was set into mapReduceJob e.g. during beforeSubmit(..) takes precedence\n    BatchReadable batchReadable = mapReduceContext.getInputDataset();\n\n    if (batchReadable != null && batchReadable instanceof DataSet) {\n      inputDataSetName = ((DataSet) batchReadable).getName();\n    } else  {\n      // trying to init input dataset from spec\n      inputDataSetName = mapReduceContext.getSpecification().getInputDataSet();\n      if (inputDataSetName != null) {\n        // TODO: It's a hack for stream\n        if (inputDataSetName.startsWith(\"stream://\")) {\n          batchReadable = new StreamBatchReadable(inputDataSetName.substring(\"stream://\".length()));\n        } else {\n          BatchReadable inputDataSet = (BatchReadable) mapReduceContext.getDataSet(inputDataSetName);\n          // We checked on validation phase that it implements BatchReadable\n          mapReduceContext.setInput(inputDataSet, inputDataSet.getSplits());\n        }\n      }\n    }\n\n    if (inputDataSetName != null) {\n      LOG.debug(\"Using dataset {} as input for mapreduce job\", inputDataSetName);\n      DataSetInputFormat.setInput(jobConf, inputDataSetName);\n    } else if (batchReadable instanceof StreamBatchReadable) {\n      // TODO: It's a hack for stream\n      StreamBatchReadable stream = (StreamBatchReadable) batchReadable;\n      Location streamPath = streamAdmin.getConfig(stream.getStreamName()).getLocation();\n      LOG.info(\"Using stream as input from {}\", streamPath.toURI());\n\n      TextStreamInputFormat.setStreamPath(jobConf, streamPath.toURI());\n      TextStreamInputFormat.setTimeRange(jobConf, stream.getStartTime(), stream.getEndTime());\n      jobConf.setInputFormatClass(TextStreamInputFormat.class);\n    }\n  }","id":96166,"modified_method":"@SuppressWarnings(\"unchecked\")\n  private void setInputDataSetIfNeeded(Job jobConf, BasicMapReduceContext mapReduceContext) throws IOException {\n    String inputDataSetName;\n    // whatever was set into mapReduceJob e.g. during beforeSubmit(..) takes precedence\n    BatchReadable batchReadable = mapReduceContext.getInputDataset();\n\n    if (batchReadable != null && batchReadable instanceof DataSet) {\n      inputDataSetName = ((DataSet) batchReadable).getName();\n    } else  {\n      // trying to init input dataset from spec\n      inputDataSetName = mapReduceContext.getSpecification().getInputDataSet();\n      if (inputDataSetName != null) {\n        // TODO: It's a hack for stream\n        if (inputDataSetName.startsWith(\"stream://\")) {\n          batchReadable = new StreamBatchReadable(inputDataSetName.substring(\"stream://\".length()));\n        } else {\n          BatchReadable inputDataSet = (BatchReadable) mapReduceContext.getDataSet(inputDataSetName);\n          // We checked on validation phase that it implements BatchReadable\n          mapReduceContext.setInput(inputDataSet, inputDataSet.getSplits());\n        }\n      }\n    }\n\n    if (inputDataSetName != null) {\n      LOG.debug(\"Using dataset {} as input for mapreduce job\", inputDataSetName);\n      DataSetInputFormat.setInput(jobConf, inputDataSetName);\n    } else if (batchReadable instanceof StreamBatchReadable) {\n      // TODO: It's a hack for stream\n      StreamBatchReadable stream = (StreamBatchReadable) batchReadable;\n      StreamConfig streamConfig = streamAdmin.getConfig(stream.getStreamName());\n      Location streamPath = streamConfig.getLocation();\n      LOG.info(\"Using stream as input from {}\", streamPath.toURI());\n\n      TextStreamInputFormat.setTTL(jobConf, streamConfig.getTTL());\n      TextStreamInputFormat.setStreamPath(jobConf, streamPath.toURI());\n      TextStreamInputFormat.setTimeRange(jobConf, stream.getStartTime(), stream.getEndTime());\n      jobConf.setInputFormatClass(TextStreamInputFormat.class);\n    }\n  }","commit_id":"1952f641348f0c753f3a760a6163344bfa232802","url":"https://github.com/caskdata/cdap"},{"original_method":"private void writeEvents(StreamConfig streamConfig, String msgPrefix, int count) throws IOException {\n    Map<String, String> headers = ImmutableMap.of();\n    FileWriter<StreamEvent> writer = getFileWriterFactory().create(streamConfig.getName());\n    for (int i = 0; i < count; i++) {\n      String msg = msgPrefix + i;\n      writer.append(new DefaultStreamEvent(headers, Charsets.UTF_8.encode(msg), System.currentTimeMillis()));\n    }\n    writer.close();\n  }","id":96167,"modified_method":"private void writeEvents(StreamConfig streamConfig, String msgPrefix, int count) throws IOException {\n    this.writeEvents(streamConfig, msgPrefix, count, new Clock());\n  }","commit_id":"1952f641348f0c753f3a760a6163344bfa232802","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public List<InputSplit> getSplits(JobContext context) throws IOException, InterruptedException {\n    Configuration conf = context.getConfiguration();\n\n    long startTime = conf.getLong(EVENT_START_TIME, 0L);\n    long endTime = conf.getLong(EVENT_END_TIME, Long.MAX_VALUE);\n    Path path = new Path(URI.create(conf.get(STREAM_PATH)));\n    long maxSplitSize = conf.getLong(MAX_SPLIT_SIZE, Long.MAX_VALUE);\n    long minSplitSize = Math.min(conf.getLong(MIN_SPLIT_SIZE, 1L), maxSplitSize);\n\n    Preconditions.checkArgument(startTime >= 0, \"Invalid start time %s\", startTime);\n    Preconditions.checkArgument(endTime >= 0, \"Invalid end time %s\", endTime);\n\n    List<InputSplit> splits = Lists.newArrayList();\n\n    // Collects all stream event files timestamp, size and block locations information\n\n    // First grab all directories (partition) that matches with the time range.\n    FileSystem fs = path.getFileSystem(conf);\n    for (FileStatus partitionStatus : fs.listStatus(path)) {\n\n      // partition should be directory\n      if (!partitionStatus.isDirectory()) {\n        continue;\n      }\n\n      // Match the time range\n      long partitionStartTime = StreamUtils.getPartitionStartTime(partitionStatus.getPath().getName());\n      long partitionEndTime = StreamUtils.getPartitionEndTime(partitionStatus.getPath().getName());\n      if (partitionStartTime > endTime || partitionEndTime <= startTime) {\n        continue;\n      }\n\n      // Collects all bucket file status in the partition.\n      Collection<StreamDataFileSplitter> eventFiles = collectBuckets(fs, partitionStatus.getPath());\n\n      // For each bucket inside the partition directory, compute the splits\n      for (StreamDataFileSplitter splitter : eventFiles) {\n        splitter.computeSplits(fs, minSplitSize, maxSplitSize, startTime, endTime, splits);\n      }\n    }\n\n    return splits;\n  }","id":96168,"modified_method":"@Override\n  public List<InputSplit> getSplits(JobContext context) throws IOException, InterruptedException {\n    Configuration conf = context.getConfiguration();\n\n    long ttl = conf.getLong(STREAM_TTL, Long.MAX_VALUE);\n    long endTime = conf.getLong(EVENT_END_TIME, Long.MAX_VALUE);\n    long startTime = Math.max(conf.getLong(EVENT_START_TIME, 0L), getCurrentTime() - ttl);\n    Path path = new Path(URI.create(conf.get(STREAM_PATH)));\n    long maxSplitSize = conf.getLong(MAX_SPLIT_SIZE, Long.MAX_VALUE);\n    long minSplitSize = Math.min(conf.getLong(MIN_SPLIT_SIZE, 1L), maxSplitSize);\n\n    Preconditions.checkArgument(startTime >= 0, \"Invalid start time %s\", startTime);\n    Preconditions.checkArgument(endTime >= 0, \"Invalid end time %s\", endTime);\n\n    List<InputSplit> splits = Lists.newArrayList();\n\n    // Collects all stream event files timestamp, size and block locations information\n\n    // First grab all directories (partition) that matches with the time range.\n    FileSystem fs = path.getFileSystem(conf);\n    for (FileStatus partitionStatus : fs.listStatus(path)) {\n\n      // partition should be directory\n      if (!partitionStatus.isDirectory()) {\n        continue;\n      }\n\n      // Match the time range\n      long partitionStartTime = StreamUtils.getPartitionStartTime(partitionStatus.getPath().getName());\n      long partitionEndTime = StreamUtils.getPartitionEndTime(partitionStatus.getPath().getName());\n      if (partitionStartTime > endTime || partitionEndTime <= startTime) {\n        continue;\n      }\n\n      // Collects all bucket file status in the partition.\n      Collection<StreamDataFileSplitter> eventFiles = collectBuckets(fs, partitionStatus.getPath());\n\n      // For each bucket inside the partition directory, compute the splits\n      for (StreamDataFileSplitter splitter : eventFiles) {\n        splitter.computeSplits(fs, minSplitSize, maxSplitSize, startTime, endTime, splits);\n      }\n    }\n\n    return splits;\n  }","commit_id":"1952f641348f0c753f3a760a6163344bfa232802","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testTimeRange() throws Exception {\n    // Write 1000 events in one bucket under one partition.\n    File inputDir = tmpFolder.newFolder();\n    File outputDir = tmpFolder.newFolder();\n\n    outputDir.delete();\n\n    generateEvents(inputDir);\n    // Run a MapReduce on 1 timestamp only.\n    runMR(inputDir, outputDir, 1401, 1402, 1000);\n\n    // Verify the result. It should have 1 \"testing\", and 1 \"1\".\n    Map<String, Integer> output = loadMRResult(outputDir);\n    Assert.assertEquals(2, output.size());\n    Assert.assertEquals(1, output.get(\"Testing\").intValue());\n    Assert.assertEquals(1, output.get(\"1\").intValue());\n  }","id":96169,"modified_method":"@Test\n  public void testTimeRange() throws Exception {\n    // Write 1000 events in one bucket under one partition.\n    File inputDir = tmpFolder.newFolder();\n    File outputDir = tmpFolder.newFolder();\n\n    outputDir.delete();\n\n    generateEvents(inputDir);\n    // Run a MapReduce on 1 timestamp only.\n    runMR(inputDir, outputDir, 1401, 1402, 1000, Long.MAX_VALUE);\n\n    // Verify the result. It should have 1 \"testing\", and 1 \"1\".\n    Map<String, Integer> output = loadMRResult(outputDir);\n    Assert.assertEquals(2, output.size());\n    Assert.assertEquals(1, output.get(\"Testing\").intValue());\n    Assert.assertEquals(1, output.get(\"1\").intValue());\n  }","commit_id":"1952f641348f0c753f3a760a6163344bfa232802","url":"https://github.com/caskdata/cdap"},{"original_method":"private void generateEvents(File inputDir) throws IOException {\n    long baseTimestamp = 1000;\n    File partition = new File(inputDir, Long.toString(baseTimestamp / 1000) + \".1000\");\n    File eventFile = new File(partition, \"bucket.1.0.\" + StreamFileType.EVENT.getSuffix());\n    File indexFile = new File(partition, \"bucket.1.0.\" + StreamFileType.INDEX.getSuffix());\n\n    partition.mkdirs();\n\n    StreamDataFileWriter writer = new StreamDataFileWriter(Files.newOutputStreamSupplier(eventFile),\n                                                           Files.newOutputStreamSupplier(indexFile),\n                                                           100L);\n    // Write 1000 events\n    for (int i = 0; i < 1000; i++) {\n      writer.append(StreamFileTestUtils.createEvent(baseTimestamp + i, \"Testing \" + (i % 10)));\n    }\n\n    writer.close();\n  }","id":96170,"modified_method":"private void generateEvents(File inputDir) throws IOException {\n    generateEvents(inputDir, 1000, 1000, 1, new GenerateEvent() {\n      @Override\n      public String generate(int index, long timestamp) {\n        return \"Testing \" + (index % 10);\n      }\n    });\n  }","commit_id":"1952f641348f0c753f3a760a6163344bfa232802","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testLiveStream() throws Exception {\n    File inputDir = tmpFolder.newFolder();\n    File outputDir = tmpFolder.newFolder();\n\n    outputDir.delete();\n\n    // Write 2 events, and keep the writer open\n    File partition = new File(inputDir, \"0.1000\");\n    File eventFile = new File(partition, \"bucket.1.0.\" + StreamFileType.EVENT.getSuffix());\n    File indexFile = new File(partition, \"bucket.1.0.\" + StreamFileType.INDEX.getSuffix());\n\n    partition.mkdirs();\n\n    StreamDataFileWriter writer = new StreamDataFileWriter(Files.newOutputStreamSupplier(eventFile),\n                                                           Files.newOutputStreamSupplier(indexFile),\n                                                           100L);\n\n    writer.append(StreamFileTestUtils.createEvent(0, \"Testing 0\"));\n    writer.append(StreamFileTestUtils.createEvent(1, \"Testing 1\"));\n\n    writer.flush();\n\n    // Run MapReduce to process all data.\n    runMR(inputDir, outputDir, 0, Long.MAX_VALUE, 1000);\n    Map<String, Integer> output = loadMRResult(outputDir);\n\n    Assert.assertEquals(3, output.size());\n    Assert.assertEquals(2, output.get(\"Testing\").intValue());\n    Assert.assertEquals(1, output.get(\"0\").intValue());\n    Assert.assertEquals(1, output.get(\"1\").intValue());\n  }","id":96171,"modified_method":"@Test\n  public void testLiveStream() throws Exception {\n    File inputDir = tmpFolder.newFolder();\n    File outputDir = tmpFolder.newFolder();\n\n    outputDir.delete();\n\n    // Write 2 events, and keep the writer open\n    File partition = new File(inputDir, \"0.1000\");\n    File eventFile = new File(partition, \"bucket.1.0.\" + StreamFileType.EVENT.getSuffix());\n    File indexFile = new File(partition, \"bucket.1.0.\" + StreamFileType.INDEX.getSuffix());\n\n    partition.mkdirs();\n\n    StreamDataFileWriter writer = new StreamDataFileWriter(Files.newOutputStreamSupplier(eventFile),\n                                                           Files.newOutputStreamSupplier(indexFile),\n                                                           100L);\n\n    writer.append(StreamFileTestUtils.createEvent(0, \"Testing 0\"));\n    writer.append(StreamFileTestUtils.createEvent(1, \"Testing 1\"));\n\n    writer.flush();\n\n    // Run MapReduce to process all data.\n    runMR(inputDir, outputDir, 0, Long.MAX_VALUE, 1000, Long.MAX_VALUE);\n    Map<String, Integer> output = loadMRResult(outputDir);\n\n    Assert.assertEquals(3, output.size());\n    Assert.assertEquals(2, output.get(\"Testing\").intValue());\n    Assert.assertEquals(1, output.get(\"0\").intValue());\n    Assert.assertEquals(1, output.get(\"1\").intValue());\n  }","commit_id":"1952f641348f0c753f3a760a6163344bfa232802","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testAllEvents() throws Exception {\n    // Write 1000 events in one bucket under one partition.\n    File inputDir = tmpFolder.newFolder();\n    File outputDir = tmpFolder.newFolder();\n\n    outputDir.delete();\n\n    generateEvents(inputDir);\n    runMR(inputDir, outputDir, 0, Long.MAX_VALUE, 1000);\n\n    // Verify the result. It should have 1000 \"testing\", and 100 for each integers in 0..9.\n    Map<String, Integer> output = loadMRResult(outputDir);\n    Assert.assertEquals(11, output.size());\n    Assert.assertEquals(1000, output.get(\"Testing\").intValue());\n    for (int i = 0; i < 10; i++) {\n      Assert.assertEquals(100, output.get(Integer.toString(i)).intValue());\n    }\n  }","id":96172,"modified_method":"@Test\n  public void testAllEvents() throws Exception {\n    // Write 1000 events in one bucket under one partition.\n    File inputDir = tmpFolder.newFolder();\n    File outputDir = tmpFolder.newFolder();\n\n    outputDir.delete();\n\n    generateEvents(inputDir);\n    runMR(inputDir, outputDir, 0, Long.MAX_VALUE, 1000, Long.MAX_VALUE);\n\n    // Verify the result. It should have 1000 \"testing\", and 100 for each integers in 0..9.\n    Map<String, Integer> output = loadMRResult(outputDir);\n    Assert.assertEquals(11, output.size());\n    Assert.assertEquals(1000, output.get(\"Testing\").intValue());\n    for (int i = 0; i < 10; i++) {\n      Assert.assertEquals(100, output.get(Integer.toString(i)).intValue());\n    }\n  }","commit_id":"1952f641348f0c753f3a760a6163344bfa232802","url":"https://github.com/caskdata/cdap"},{"original_method":"private void runMR(File inputDir, File outputDir, long startTime, long endTime, long splitSize) throws Exception {\n    Configuration conf = new Configuration();\n    Job job = Job.getInstance(conf);\n\n    StreamInputFormat.setStreamPath(job, inputDir.toURI());\n    StreamInputFormat.setTimeRange(job, startTime, endTime);\n    StreamInputFormat.setMaxSplitSize(job, splitSize);\n    job.setInputFormatClass(TextStreamInputFormat.class);\n\n    TextOutputFormat.setOutputPath(job, new Path(outputDir.toURI()));\n    job.setOutputFormatClass(TextOutputFormat.class);\n\n    job.setJarByClass(StreamInputFormatTest.class);\n    job.setMapperClass(TokenizeMapper.class);\n    job.setReducerClass(AggregateReducer.class);\n    job.setOutputKeyClass(Text.class);\n    job.setOutputValueClass(LongWritable.class);\n    job.setMapOutputValueClass(IntWritable.class);\n\n    job.waitForCompletion(true);\n  }","id":96173,"modified_method":"private void runMR(File inputDir, File outputDir, long startTime, long endTime,\n                     long splitSize, long ttl) throws Exception {\n\n    Configuration conf = new Configuration();\n    Job job = Job.getInstance(conf);\n\n    StreamInputFormat.setTTL(job, ttl);\n    StreamInputFormat.setStreamPath(job, inputDir.toURI());\n    StreamInputFormat.setTimeRange(job, startTime, endTime);\n    StreamInputFormat.setMaxSplitSize(job, splitSize);\n    job.setInputFormatClass(TestStreamInputFormat.class);\n\n    TextOutputFormat.setOutputPath(job, new Path(outputDir.toURI()));\n    job.setOutputFormatClass(TextOutputFormat.class);\n\n    job.setJarByClass(StreamInputFormatTest.class);\n    job.setMapperClass(TokenizeMapper.class);\n    job.setReducerClass(AggregateReducer.class);\n    job.setOutputKeyClass(Text.class);\n    job.setOutputValueClass(LongWritable.class);\n    job.setMapOutputValueClass(IntWritable.class);\n\n    job.waitForCompletion(true);\n  }","commit_id":"1952f641348f0c753f3a760a6163344bfa232802","url":"https://github.com/caskdata/cdap"},{"original_method":"void stop() {\n            if(t != null && t.isAlive()) {\n                Thread tmp=t;\n                t=null;\n                tmp.interrupt();\n            }\n        }","id":96174,"modified_method":"void stop() {\n            if(t != null && t.isAlive()) {\n                Thread tmp=t;\n                t=null;\n                if(tmp != null)\n                    tmp.interrupt();\n            }\n        }","commit_id":"8d2271469aae13ca30a97a00f9c20b02036c9b11","url":"https://github.com/belaban/JGroups"},{"original_method":"void stop() {\n            if(t != null && t.isAlive()) {\n                Thread tmp=t;\n                t=null;\n                tmp.interrupt();\n            }\n        }","id":96175,"modified_method":"void stop() {\n            if(t != null && t.isAlive()) {\n                Thread tmp=t;\n                t=null;\n                if(tmp != null)\n                    tmp.interrupt();\n            }\n        }","commit_id":"88e2686b08875db821a49bf77b18b16fe0a6c02f","url":"https://github.com/belaban/JGroups"},{"original_method":"@Nullable\n  private static ProblemDescriptor[] checkSillyAssignment(PsiAssignmentExpression assignment, InspectionManager inspectionManager) {\n    if (assignment.getOperationSign().getTokenType() != JavaTokenType.EQ) return null;\n    PsiExpression lExpression = assignment.getLExpression();\n    PsiExpression rExpression = assignment.getRExpression();\n    if (rExpression == null) return null;\n    lExpression = PsiUtil.deparenthesizeExpression(lExpression);\n    rExpression = PsiUtil.deparenthesizeExpression(rExpression);\n    if (!(lExpression instanceof PsiReferenceExpression) || !(rExpression instanceof PsiReferenceExpression)) return null;\n    PsiReferenceExpression lRef = (PsiReferenceExpression)lExpression;\n    PsiReferenceExpression rRef = (PsiReferenceExpression)rExpression;\n    PsiManager manager = assignment.getManager();\n    if (!sameInstanceReferences(lRef, rRef, manager)) return null;\n    return new ProblemDescriptor[]{inspectionManager.createProblemDescriptor(assignment, JavaErrorMessages.message(\"assignment.to.itself\"), (LocalQuickFix [])null, ProblemHighlightType.LIKE_UNUSED_SYMBOL)};\n  }","id":96176,"modified_method":"private static void checkSillyAssignment(PsiAssignmentExpression assignment, ProblemsHolder holder) {\n    if (assignment.getOperationSign().getTokenType() != JavaTokenType.EQ) return;\n    PsiExpression lExpression = assignment.getLExpression();\n    PsiExpression rExpression = assignment.getRExpression();\n    if (rExpression == null) return;\n    lExpression = PsiUtil.deparenthesizeExpression(lExpression);\n    rExpression = PsiUtil.deparenthesizeExpression(rExpression);\n    if (!(lExpression instanceof PsiReferenceExpression) || !(rExpression instanceof PsiReferenceExpression)) return;\n    PsiReferenceExpression lRef = (PsiReferenceExpression)lExpression;\n    PsiReferenceExpression rRef = (PsiReferenceExpression)rExpression;\n    PsiManager manager = assignment.getManager();\n    if (!sameInstanceReferences(lRef, rRef, manager)) return;\n    holder.registerProblem(assignment, JavaErrorMessages.message(\"assignment.to.itself\"), ProblemHighlightType.LIKE_UNUSED_SYMBOL, (LocalQuickFix[])null);\n  }","commit_id":"2969132c98c22ceeb4255e576af74d517cc31725","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void initialize(RefElement refElement) {\n    ((RefElementImpl)refElement).setFlag(true, CAN_BE_FINAL_MASK);\n    if (refElement instanceof RefClass) {\n      final RefClass refClass = ((RefClass)refElement);\n      final PsiClass psiClass = refClass.getElement();\n      EjbClassRole role = EjbRolesUtil.getEjbRolesUtil().getEjbRole(psiClass);\n      if (role != null) {\n        ((RefClassImpl)refClass).setFlag(false, CAN_BE_FINAL_MASK);\n        return;\n      }\n      if (refClass.isAbstract() || refClass.isAnonymous() || refClass.isInterface()) {\n        ((RefClassImpl)refClass).setFlag(false, CAN_BE_FINAL_MASK);\n        return;\n      }\n      if (!refClass.isSelfInheritor(psiClass)) {\n        for (PsiClass psiSuperClass : psiClass.getSupers()) {\n          if (RefUtil.getInstance().belongsToScope(psiSuperClass, myManager)) {\n            RefClass refSuperClass = (RefClass)myManager.getReference(psiSuperClass);\n            if (refSuperClass != null) {\n              ((RefClassImpl)refSuperClass).setFlag(false, CAN_BE_FINAL_MASK);\n            }\n          }\n        }\n      }\n    }\n    else if (refElement instanceof RefMethod) {\n      final RefMethod refMethod = (RefMethod)refElement;\n      final PsiElement element = refMethod.getElement();\n      if (element instanceof PsiMethod) {\n        PsiMethod psiMethod = (PsiMethod)element;\n        if (refMethod.isConstructor() || refMethod.isAbstract() || refMethod.isStatic() ||\n            PsiModifier.PRIVATE.equals(refMethod.getAccessModifier()) || refMethod.getOwnerClass().isAnonymous() ||\n            refMethod.getOwnerClass().isInterface()) {\n          ((RefMethodImpl)refMethod).setFlag(false, CAN_BE_FINAL_MASK);\n        }\n        if (PsiModifier.PRIVATE.equals(refMethod.getAccessModifier()) && refMethod.getOwner() != null &&\n            !(refMethod.getOwnerClass().getOwner() instanceof RefElement)) {\n          ((RefMethodImpl)refMethod).setFlag(false, CAN_BE_FINAL_MASK);\n        }\n        for (PsiMethod psiSuperMethod : psiMethod.findSuperMethods()) {\n          if (RefUtil.getInstance().belongsToScope(psiSuperMethod, myManager)) {\n            RefMethod refSuperMethod = (RefMethod)myManager.getReference(psiSuperMethod);\n            if (refSuperMethod != null) {\n              ((RefMethodImpl)refSuperMethod).setFlag(false, CAN_BE_FINAL_MASK);\n            }\n          }\n        }\n      }\n    }\n  }","id":96177,"modified_method":"public void onInitialize(RefElement refElement) {\n    ((RefElementImpl)refElement).setFlag(true, CAN_BE_FINAL_MASK);\n    if (refElement instanceof RefClass) {\n      final RefClass refClass = ((RefClass)refElement);\n      final PsiClass psiClass = refClass.getElement();\n      EjbClassRole role = EjbRolesUtil.getEjbRolesUtil().getEjbRole(psiClass);\n      if (role != null) {\n        ((RefClassImpl)refClass).setFlag(false, CAN_BE_FINAL_MASK);\n        return;\n      }\n      if (refClass.isAbstract() || refClass.isAnonymous() || refClass.isInterface()) {\n        ((RefClassImpl)refClass).setFlag(false, CAN_BE_FINAL_MASK);\n        return;\n      }\n      if (!refClass.isSelfInheritor(psiClass)) {\n        for (PsiClass psiSuperClass : psiClass.getSupers()) {\n          if (RefUtil.getInstance().belongsToScope(psiSuperClass, myManager)) {\n            RefClass refSuperClass = (RefClass)myManager.getReference(psiSuperClass);\n            if (refSuperClass != null) {\n              ((RefClassImpl)refSuperClass).setFlag(false, CAN_BE_FINAL_MASK);\n            }\n          }\n        }\n      }\n    }\n    else if (refElement instanceof RefMethod) {\n      final RefMethod refMethod = (RefMethod)refElement;\n      final PsiElement element = refMethod.getElement();\n      if (element instanceof PsiMethod) {\n        PsiMethod psiMethod = (PsiMethod)element;\n        if (refMethod.isConstructor() || refMethod.isAbstract() || refMethod.isStatic() ||\n            PsiModifier.PRIVATE.equals(refMethod.getAccessModifier()) || refMethod.getOwnerClass().isAnonymous() ||\n            refMethod.getOwnerClass().isInterface()) {\n          ((RefMethodImpl)refMethod).setFlag(false, CAN_BE_FINAL_MASK);\n        }\n        if (PsiModifier.PRIVATE.equals(refMethod.getAccessModifier()) && refMethod.getOwner() != null &&\n            !(refMethod.getOwnerClass().getOwner() instanceof RefElement)) {\n          ((RefMethodImpl)refMethod).setFlag(false, CAN_BE_FINAL_MASK);\n        }\n        for (PsiMethod psiSuperMethod : psiMethod.findSuperMethods()) {\n          if (RefUtil.getInstance().belongsToScope(psiSuperMethod, myManager)) {\n            RefMethod refSuperMethod = (RefMethod)myManager.getReference(psiSuperMethod);\n            if (refSuperMethod != null) {\n              ((RefMethodImpl)refSuperMethod).setFlag(false, CAN_BE_FINAL_MASK);\n            }\n          }\n        }\n      }\n    }\n  }","commit_id":"f13ab45500d982502b743dfbf49e8376ff782c01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void markReferenced(RefElement refWhat, RefElement refFrom, boolean referencedFromClassInitializer) {\n    if (!(refWhat instanceof RefField)) return;\n    if (!(refFrom instanceof RefMethod) || !((RefMethod)refFrom).isConstructor() || ((PsiField)refWhat.getElement()).hasInitializer()) {\n      if (!referencedFromClassInitializer) {\n        ((RefFieldImpl)refWhat).setFlag(false, CAN_BE_FINAL_MASK);\n      }\n    }\n  }","id":96178,"modified_method":"public void onMarkReferenced(RefElement refWhat, RefElement refFrom, boolean referencedFromClassInitializer) {\n    if (!(refWhat instanceof RefField)) return;\n    if (!(refFrom instanceof RefMethod) || !((RefMethod)refFrom).isConstructor() || ((PsiField)refWhat.getElement()).hasInitializer()) {\n      if (!referencedFromClassInitializer) {\n        ((RefFieldImpl)refWhat).setFlag(false, CAN_BE_FINAL_MASK);\n      }\n    }\n  }","commit_id":"f13ab45500d982502b743dfbf49e8376ff782c01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void buildReferences(RefElement refElement) {\n    if (refElement instanceof RefClass) {\n      final PsiClass psiClass = (PsiClass)refElement.getElement();\n      if (psiClass != null) {\n\n        EjbClassRole role = EjbRolesUtil.getEjbRolesUtil().getEjbRole(psiClass);\n        if (role != null) {\n          ((RefClassImpl)refElement).setFlag(false, CAN_BE_FINAL_MASK);\n        }\n\n        PsiMethod[] psiMethods = psiClass.getMethods();\n        PsiField[] psiFields = psiClass.getFields();\n\n        HashSet<PsiVariable> allFields = new HashSet<PsiVariable>();\n        allFields.addAll(Arrays.asList(psiFields));\n        ArrayList<PsiVariable> instanceInitializerInitializedFields = new ArrayList<PsiVariable>();\n        boolean hasInitializers = false;\n        for (PsiClassInitializer initializer : psiClass.getInitializers()) {\n          PsiCodeBlock body = initializer.getBody();\n          hasInitializers = true;\n          ControlFlowAnalyzer analyzer = new ControlFlowAnalyzer(body, LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance());\n          ControlFlow flow;\n          try {\n            flow = analyzer.buildControlFlow();\n          }\n          catch (AnalysisCanceledException e) {\n            flow = ControlFlow.EMPTY;\n          }\n          PsiVariable[] ssaVariables = ControlFlowUtil.getSSAVariables(flow, false);\n          PsiVariable[] writtenVariables = ControlFlowUtil.getWrittenVariables(flow, 0, flow.getSize(), false);\n          for (int j = 0; j < ssaVariables.length; j++) {\n            PsiVariable psiVariable = writtenVariables[j];\n            if (allFields.contains(psiVariable)) {\n              if (instanceInitializerInitializedFields.contains(psiVariable)) {\n                allFields.remove(psiVariable);\n                instanceInitializerInitializedFields.remove(psiVariable);\n              }\n              else {\n                instanceInitializerInitializedFields.add(psiVariable);\n              }\n            }\n          }\n          for (PsiVariable psiVariable : writtenVariables) {\n            if (!instanceInitializerInitializedFields.contains(psiVariable)) {\n              allFields.remove(psiVariable);\n            }\n          }\n        }\n\n        for (PsiMethod psiMethod : psiMethods) {\n          if (psiMethod.isConstructor()) {\n            PsiCodeBlock body = psiMethod.getBody();\n            if (body != null) {\n              hasInitializers = true;\n              ControlFlowAnalyzer analyzer = new ControlFlowAnalyzer(body, LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance());\n              ControlFlow flow;\n              try {\n                flow = analyzer.buildControlFlow();\n              }\n              catch (AnalysisCanceledException e) {\n                flow = ControlFlow.EMPTY;\n              }\n\n              PsiVariable[] writtenVariables = ControlFlowUtil.getWrittenVariables(flow, 0, flow.getSize(), false);\n              for (PsiVariable psiVariable : writtenVariables) {\n                if (instanceInitializerInitializedFields.contains(psiVariable)) {\n                  allFields.remove(psiVariable);\n                  instanceInitializerInitializedFields.remove(psiVariable);\n                }\n              }\n              List<PsiMethod> redirectedConstructors = HighlightControlFlowUtil.getChainedConstructors(psiMethod);\n              if (redirectedConstructors == null || redirectedConstructors.isEmpty()) {\n                PsiVariable[] ssaVariables = ControlFlowUtil.getSSAVariables(flow, false);\n                ArrayList<PsiVariable> good = new ArrayList<PsiVariable>(Arrays.asList(ssaVariables));\n                good.addAll(instanceInitializerInitializedFields);\n                allFields.retainAll(good);\n              }\n              else {\n                allFields.removeAll(Arrays.asList(writtenVariables));\n              }\n            }\n          }\n        }\n\n        for (PsiField psiField : psiFields) {\n          if ((!hasInitializers || !allFields.contains(psiField)) && psiField.getInitializer() == null) {\n            ((RefFieldImpl)myManager.getReference(psiField)).setFlag(false, CAN_BE_FINAL_MASK);\n          }\n        }\n\n      }\n    }\n    else if (refElement instanceof RefMethod) {\n      final RefMethod refMethod = (RefMethod)refElement;\n      final PsiElement element = refMethod.getElement();\n      if (element instanceof PsiMethod) {\n        PsiMethod method = (PsiMethod)element;\n        final EjbRolesUtil ejbRolesUtil = EjbRolesUtil.getEjbRolesUtil();\n        EjbClassRole classRole = ejbRolesUtil.getEjbRole(method.getContainingClass());\n        if (classRole != null) {\n          if (!refMethod.getSuperMethods().isEmpty() || refMethod.isLibraryOverride()) {\n            ((RefMethodImpl)refMethod).setFlag(false, CAN_BE_FINAL_MASK);\n          }\n          EjbMethodRole role = ejbRolesUtil.getEjbRole(method);\n          if (role instanceof EjbDeclMethodRole || role instanceof EjbImplMethodRole) {\n            ((RefMethodImpl)refMethod).setFlag(false, CAN_BE_FINAL_MASK);\n          }\n        }\n      }\n    }\n  }","id":96179,"modified_method":"public void onReferencesBuild(RefElement refElement) {\n    if (refElement instanceof RefClass) {\n      final PsiClass psiClass = (PsiClass)refElement.getElement();\n      if (psiClass != null) {\n\n        EjbClassRole role = EjbRolesUtil.getEjbRolesUtil().getEjbRole(psiClass);\n        if (role != null) {\n          ((RefClassImpl)refElement).setFlag(false, CAN_BE_FINAL_MASK);\n        }\n\n        PsiMethod[] psiMethods = psiClass.getMethods();\n        PsiField[] psiFields = psiClass.getFields();\n\n        HashSet<PsiVariable> allFields = new HashSet<PsiVariable>();\n        allFields.addAll(Arrays.asList(psiFields));\n        ArrayList<PsiVariable> instanceInitializerInitializedFields = new ArrayList<PsiVariable>();\n        boolean hasInitializers = false;\n        for (PsiClassInitializer initializer : psiClass.getInitializers()) {\n          PsiCodeBlock body = initializer.getBody();\n          hasInitializers = true;\n          ControlFlowAnalyzer analyzer = new ControlFlowAnalyzer(body, LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance());\n          ControlFlow flow;\n          try {\n            flow = analyzer.buildControlFlow();\n          }\n          catch (AnalysisCanceledException e) {\n            flow = ControlFlow.EMPTY;\n          }\n          PsiVariable[] ssaVariables = ControlFlowUtil.getSSAVariables(flow, false);\n          PsiVariable[] writtenVariables = ControlFlowUtil.getWrittenVariables(flow, 0, flow.getSize(), false);\n          for (int j = 0; j < ssaVariables.length; j++) {\n            PsiVariable psiVariable = writtenVariables[j];\n            if (allFields.contains(psiVariable)) {\n              if (instanceInitializerInitializedFields.contains(psiVariable)) {\n                allFields.remove(psiVariable);\n                instanceInitializerInitializedFields.remove(psiVariable);\n              }\n              else {\n                instanceInitializerInitializedFields.add(psiVariable);\n              }\n            }\n          }\n          for (PsiVariable psiVariable : writtenVariables) {\n            if (!instanceInitializerInitializedFields.contains(psiVariable)) {\n              allFields.remove(psiVariable);\n            }\n          }\n        }\n\n        for (PsiMethod psiMethod : psiMethods) {\n          if (psiMethod.isConstructor()) {\n            PsiCodeBlock body = psiMethod.getBody();\n            if (body != null) {\n              hasInitializers = true;\n              ControlFlowAnalyzer analyzer = new ControlFlowAnalyzer(body, LocalsOrMyInstanceFieldsControlFlowPolicy.getInstance());\n              ControlFlow flow;\n              try {\n                flow = analyzer.buildControlFlow();\n              }\n              catch (AnalysisCanceledException e) {\n                flow = ControlFlow.EMPTY;\n              }\n\n              PsiVariable[] writtenVariables = ControlFlowUtil.getWrittenVariables(flow, 0, flow.getSize(), false);\n              for (PsiVariable psiVariable : writtenVariables) {\n                if (instanceInitializerInitializedFields.contains(psiVariable)) {\n                  allFields.remove(psiVariable);\n                  instanceInitializerInitializedFields.remove(psiVariable);\n                }\n              }\n              List<PsiMethod> redirectedConstructors = HighlightControlFlowUtil.getChainedConstructors(psiMethod);\n              if (redirectedConstructors == null || redirectedConstructors.isEmpty()) {\n                PsiVariable[] ssaVariables = ControlFlowUtil.getSSAVariables(flow, false);\n                ArrayList<PsiVariable> good = new ArrayList<PsiVariable>(Arrays.asList(ssaVariables));\n                good.addAll(instanceInitializerInitializedFields);\n                allFields.retainAll(good);\n              }\n              else {\n                allFields.removeAll(Arrays.asList(writtenVariables));\n              }\n            }\n          }\n        }\n\n        for (PsiField psiField : psiFields) {\n          if ((!hasInitializers || !allFields.contains(psiField)) && psiField.getInitializer() == null) {\n            ((RefFieldImpl)myManager.getReference(psiField)).setFlag(false, CAN_BE_FINAL_MASK);\n          }\n        }\n\n      }\n    }\n    else if (refElement instanceof RefMethod) {\n      final RefMethod refMethod = (RefMethod)refElement;\n      final PsiElement element = refMethod.getElement();\n      if (element instanceof PsiMethod) {\n        PsiMethod method = (PsiMethod)element;\n        final EjbRolesUtil ejbRolesUtil = EjbRolesUtil.getEjbRolesUtil();\n        EjbClassRole classRole = ejbRolesUtil.getEjbRole(method.getContainingClass());\n        if (classRole != null) {\n          if (!refMethod.getSuperMethods().isEmpty() || refMethod.isLibraryOverride()) {\n            ((RefMethodImpl)refMethod).setFlag(false, CAN_BE_FINAL_MASK);\n          }\n          EjbMethodRole role = ejbRolesUtil.getEjbRole(method);\n          if (role instanceof EjbDeclMethodRole || role instanceof EjbImplMethodRole) {\n            ((RefMethodImpl)refMethod).setFlag(false, CAN_BE_FINAL_MASK);\n          }\n        }\n      }\n    }\n  }","commit_id":"f13ab45500d982502b743dfbf49e8376ff782c01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void initialize(InspectionManagerEx manager) {\n    super.initialize(manager);\n    final RefManagerImpl refManager = (RefManagerImpl)getRefManager();\n    refManager.registerGraphAnnotator(new CanBeFinalAnnotator(refManager));\n  }","id":96180,"modified_method":"public void initialize(InspectionManagerEx manager) {\n    super.initialize(manager);\n    final RefManagerImpl refManager = (RefManagerImpl)getRefManager();\n    final CanBeFinalAnnotator annotator = new CanBeFinalAnnotator(refManager);\n    refManager.registerGraphAnnotator(annotator);\n    annotator.setMask(refManager.getLastUsedMask());\n  }","commit_id":"f13ab45500d982502b743dfbf49e8376ff782c01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"static ProblemDescriptor checkMethodOverridesDeprecated(MethodSignatureBackedByPsiMethod methodSignature,\n                                                          List<MethodSignatureBackedByPsiMethod> superMethodSignatures,\n                                                          InspectionManager manager) {\n    PsiMethod method = methodSignature.getMethod();\n    PsiElement methodName = method.getNameIdentifier();\n    for (MethodSignatureBackedByPsiMethod superMethodSignature : superMethodSignatures) {\n      PsiMethod superMethod = superMethodSignature.getMethod();\n      PsiClass aClass = superMethod.getContainingClass();\n      if (aClass == null) continue;\n      // do not show deprecated warning for class implementing deprecated methods\n      if (!aClass.isDeprecated() && superMethod.hasModifierProperty(PsiModifier.ABSTRACT)) continue;\n      if (superMethod.isDeprecated()) {\n        String description = JavaErrorMessages.message(\"overrides.deprecated.method\",\n                                                       HighlightMessageUtil.getSymbolName(aClass, PsiSubstitutor.EMPTY));\n        return manager.createProblemDescriptor(methodName, description, (LocalQuickFix [])null, ProblemHighlightType.LIKE_DEPRECATED);\n      }\n    }\n    return null;\n  }","id":96181,"modified_method":"static void checkMethodOverridesDeprecated(MethodSignatureBackedByPsiMethod methodSignature,\n                                                          List<MethodSignatureBackedByPsiMethod> superMethodSignatures,\n                                                          ProblemsHolder holder) {\n    PsiMethod method = methodSignature.getMethod();\n    PsiElement methodName = method.getNameIdentifier();\n    for (MethodSignatureBackedByPsiMethod superMethodSignature : superMethodSignatures) {\n      PsiMethod superMethod = superMethodSignature.getMethod();\n      PsiClass aClass = superMethod.getContainingClass();\n      if (aClass == null) continue;\n      // do not show deprecated warning for class implementing deprecated methods\n      if (!aClass.isDeprecated() && superMethod.hasModifierProperty(PsiModifier.ABSTRACT)) continue;\n      if (superMethod.isDeprecated()) {\n        String description = JavaErrorMessages.message(\"overrides.deprecated.method\",\n                                                       HighlightMessageUtil.getSymbolName(aClass, PsiSubstitutor.EMPTY));\n        holder.registerProblem(methodName, description, ProblemHighlightType.LIKE_DEPRECATED, (LocalQuickFix [])null);\n      }\n    }\n  }","commit_id":"f13ab45500d982502b743dfbf49e8376ff782c01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static ProblemDescriptor checkDeprecated(PsiElement refElement,\n                                                  PsiElement elementToHighlight,\n                                                  InspectionManager manager) {\n    if (!(refElement instanceof PsiDocCommentOwner)) return null;\n    if (!((PsiDocCommentOwner)refElement).isDeprecated()) return null;\n\n    String description = JavaErrorMessages.message(\"deprecated.symbol\",\n                                                   HighlightMessageUtil.getSymbolName(refElement, PsiSubstitutor.EMPTY));\n\n    return manager.createProblemDescriptor(elementToHighlight, description, (LocalQuickFix[])null, ProblemHighlightType.LIKE_DEPRECATED);\n  }","id":96182,"modified_method":"static void checkDeprecated(PsiElement refElement,\n                                                  PsiElement elementToHighlight,\n                                                  ProblemsHolder holder) {\n    if (!(refElement instanceof PsiDocCommentOwner)) return;\n    if (!((PsiDocCommentOwner)refElement).isDeprecated()) return;\n\n    String description = JavaErrorMessages.message(\"deprecated.symbol\",\n                                                   HighlightMessageUtil.getSymbolName(refElement, PsiSubstitutor.EMPTY));\n\n    holder.registerProblem(elementToHighlight, description, ProblemHighlightType.LIKE_DEPRECATED, (LocalQuickFix[])null);\n  }","commit_id":"f13ab45500d982502b743dfbf49e8376ff782c01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void markReferenced(RefElement refWhat,\n                             RefElement refFrom,\n                             boolean referencedFromClassInitializer){\n  }","id":96183,"modified_method":"public void onMarkReferenced(RefElement refWhat,\n                               RefElement refFrom,\n                               boolean referencedFromClassInitializer){\n  }","commit_id":"f13ab45500d982502b743dfbf49e8376ff782c01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void buildReferences(RefElement refElement){\n  }","id":96184,"modified_method":"public void onReferencesBuild(RefElement refElement){\n  }","commit_id":"f13ab45500d982502b743dfbf49e8376ff782c01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void initialize(RefElement refElement){\n  }","id":96185,"modified_method":"public void onInitialize(RefElement refElement){\n  }","commit_id":"f13ab45500d982502b743dfbf49e8376ff782c01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void fireNodeInitialized(RefElement refElement){\n    for (RefGraphAnnotator annotator : myGraphAnnotators) {\n      annotator.initialize(refElement);\n    }\n  }","id":96186,"modified_method":"public void fireNodeInitialized(RefElement refElement){\n    for (RefGraphAnnotator annotator : myGraphAnnotators) {\n      annotator.onInitialize(refElement);\n    }\n  }","commit_id":"f13ab45500d982502b743dfbf49e8376ff782c01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void fireNodeMarkedReferenced(RefElement refWhat,\n                                       RefElement refFrom,\n                                       boolean referencedFromClassInitializer){\n    for (RefGraphAnnotator annotator : myGraphAnnotators) {\n      annotator.markReferenced(refWhat, refFrom, referencedFromClassInitializer);\n    }\n  }","id":96187,"modified_method":"public void fireNodeMarkedReferenced(RefElement refWhat,\n                                       RefElement refFrom,\n                                       boolean referencedFromClassInitializer){\n    for (RefGraphAnnotator annotator : myGraphAnnotators) {\n      annotator.onMarkReferenced(refWhat, refFrom, referencedFromClassInitializer);\n    }\n  }","commit_id":"f13ab45500d982502b743dfbf49e8376ff782c01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void fireBuildReferences(RefElement refElement){\n    for (RefGraphAnnotator annotator : myGraphAnnotators) {\n      annotator.buildReferences(refElement);\n    }\n  }","id":96188,"modified_method":"public void fireBuildReferences(RefElement refElement){\n    for (RefGraphAnnotator annotator : myGraphAnnotators) {\n      annotator.onReferencesBuild(refElement);\n    }\n  }","commit_id":"f13ab45500d982502b743dfbf49e8376ff782c01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void registerGraphAnnotator(RefGraphAnnotator annotator){\n    myGraphAnnotators.add(annotator);\n    myLastUsedMask *= 2;\n    annotator.setMask(myLastUsedMask);\n  }","id":96189,"modified_method":"public void registerGraphAnnotator(RefGraphAnnotator annotator){\n    myGraphAnnotators.add(annotator);\n  }","commit_id":"f13ab45500d982502b743dfbf49e8376ff782c01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void markReferenced(RefElement refWhat, RefElement refFrom, boolean referencedFromClassInitializer) {\n    final PsiElement onElement = refWhat.getElement();\n    final PsiElement fromElement = refFrom.getElement();\n    if (onElement != null && fromElement!= null){\n      final Module onModule = ModuleUtil.findModuleForPsiElement(onElement);\n      final Module fromModule = ModuleUtil.findModuleForPsiElement(fromElement);\n      if (onModule != null && fromModule != null && onModule != fromModule){\n        final RefModule refModule = myManager.getRefModule(fromModule);\n        if (refModule != null) {\n          Set<Module> modules = refModule.getUserData(DEPENDENCIES);\n          if (modules == null){\n            modules = new HashSet<Module>();\n            refModule.putUserData(DEPENDENCIES, modules);\n          }\n          modules.add(onModule);\n        }\n      }\n    }\n  }","id":96190,"modified_method":"public void onMarkReferenced(RefElement refWhat, RefElement refFrom, boolean referencedFromClassInitializer) {\n    final PsiElement onElement = refWhat.getElement();\n    final PsiElement fromElement = refFrom.getElement();\n    if (onElement != null && fromElement!= null){\n      final Module onModule = ModuleUtil.findModuleForPsiElement(onElement);\n      final Module fromModule = ModuleUtil.findModuleForPsiElement(fromElement);\n      if (onModule != null && fromModule != null && onModule != fromModule){\n        final RefModule refModule = myManager.getRefModule(fromModule);\n        if (refModule != null) {\n          Set<Module> modules = refModule.getUserData(DEPENDENCIES);\n          if (modules == null){\n            modules = new HashSet<Module>();\n            refModule.putUserData(DEPENDENCIES, modules);\n          }\n          modules.add(onModule);\n        }\n      }\n    }\n  }","commit_id":"f13ab45500d982502b743dfbf49e8376ff782c01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, DDMStructure structure)\n\t\tthrows Exception {\n\n\t\tprepareLanguagesForImport(structure);\n\n\t\tlong userId = portletDataContext.getUserId(structure.getUserUuid());\n\n\t\tif (structure.getParentStructureId() !=\n\t\t\t\tDDMStructureConstants.DEFAULT_PARENT_STRUCTURE_ID) {\n\n\t\t\tElement structureElement =\n\t\t\t\tportletDataContext.getReferenceDataElement(\n\t\t\t\t\tstructure, DDMStructure.class,\n\t\t\t\t\tstructure.getParentStructureId());\n\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, structureElement);\n\t\t}\n\n\t\tMap<Long, Long> structureIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMStructure.class);\n\n\t\tlong parentStructureId = MapUtil.getLong(\n\t\t\tstructureIds, structure.getParentStructureId(),\n\t\t\tstructure.getParentStructureId());\n\n\t\tMap<String, String> structureKeys =\n\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMStructure.class + \".ddmStructureKey\");\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tstructure, DDMPortletDataHandler.NAMESPACE);\n\n\t\tDDMStructure importedStructure = null;\n\n\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\tElement element =\n\t\t\t\tportletDataContext.getImportDataStagedModelElement(structure);\n\n\t\t\tboolean preloaded = GetterUtil.getBoolean(\n\t\t\t\telement.attributeValue(\"preloaded\"));\n\n\t\t\tDDMStructure existingStructure = null;\n\n\t\t\tif (!preloaded) {\n\t\t\t\texistingStructure =\n\t\t\t\t\tDDMStructureLocalServiceUtil.\n\t\t\t\t\t\tfetchDDMStructureByUuidAndGroupId(\n\t\t\t\t\t\t\tstructure.getUuid(),\n\t\t\t\t\t\t\tportletDataContext.getScopeGroupId());\n\t\t\t}\n\t\t\telse {\n\t\t\t\texistingStructure = DDMStructureLocalServiceUtil.fetchStructure(\n\t\t\t\t\tportletDataContext.getScopeGroupId(),\n\t\t\t\t\tstructure.getClassNameId(), structure.getStructureKey());\n\t\t\t}\n\n\t\t\tif (existingStructure == null) {\n\t\t\t\texistingStructure =\n\t\t\t\t\tDDMStructureLocalServiceUtil.\n\t\t\t\t\t\tfetchDDMStructureByUuidAndGroupId(\n\t\t\t\t\t\t\tstructure.getUuid(),\n\t\t\t\t\t\t\tportletDataContext.getCompanyGroupId());\n\t\t\t}\n\n\t\t\tif (existingStructure == null) {\n\t\t\t\tserviceContext.setUuid(structure.getUuid());\n\n\t\t\t\timportedStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(),\n\t\t\t\t\tparentStructureId, structure.getClassNameId(),\n\t\t\t\t\tstructure.getStructureKey(), structure.getNameMap(),\n\t\t\t\t\tstructure.getDescriptionMap(), structure.getXsd(),\n\t\t\t\t\tstructure.getStorageType(), structure.getType(),\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t\telse if (portletDataContext.isCompanyStagedGroupedModel(\n\t\t\t\t\t\texistingStructure)) {\n\n\t\t\t\tstructureIds.put(\n\t\t\t\t\tstructure.getStructureId(),\n\t\t\t\t\texistingStructure.getStructureId());\n\n\t\t\t\tstructureKeys.put(\n\t\t\t\t\tstructure.getStructureKey(),\n\t\t\t\t\texistingStructure.getStructureKey());\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedStructure =\n\t\t\t\t\tDDMStructureLocalServiceUtil.updateStructure(\n\t\t\t\t\t\texistingStructure.getStructureId(), parentStructureId,\n\t\t\t\t\t\tstructure.getNameMap(), structure.getDescriptionMap(),\n\t\t\t\t\t\tstructure.getXsd(), serviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\timportedStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\t\tuserId, portletDataContext.getScopeGroupId(), parentStructureId,\n\t\t\t\tstructure.getClassNameId(), structure.getStructureKey(),\n\t\t\t\tstructure.getNameMap(), structure.getDescriptionMap(),\n\t\t\t\tstructure.getXsd(), structure.getStorageType(),\n\t\t\t\tstructure.getType(), serviceContext);\n\t\t}\n\n\t\tportletDataContext.importClassedModel(\n\t\t\tstructure, importedStructure, DDMPortletDataHandler.NAMESPACE);\n\n\t\tstructureKeys.put(\n\t\t\tstructure.getStructureKey(), importedStructure.getStructureKey());\n\t}","id":96191,"modified_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, DDMStructure structure)\n\t\tthrows Exception {\n\n\t\tprepareLanguagesForImport(structure);\n\n\t\tlong userId = portletDataContext.getUserId(structure.getUserUuid());\n\n\t\tif (structure.getParentStructureId() !=\n\t\t\t\tDDMStructureConstants.DEFAULT_PARENT_STRUCTURE_ID) {\n\n\t\t\tElement structureElement =\n\t\t\t\tportletDataContext.getReferenceDataElement(\n\t\t\t\t\tstructure, DDMStructure.class,\n\t\t\t\t\tstructure.getParentStructureId());\n\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, structureElement);\n\t\t}\n\n\t\tMap<Long, Long> structureIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMStructure.class);\n\n\t\tlong parentStructureId = MapUtil.getLong(\n\t\t\tstructureIds, structure.getParentStructureId(),\n\t\t\tstructure.getParentStructureId());\n\n\t\tMap<String, String> structureKeys =\n\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMStructure.class + \".ddmStructureKey\");\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tstructure, DDMPortletDataHandler.NAMESPACE);\n\n\t\tDDMStructure importedStructure = null;\n\n\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\tElement element =\n\t\t\t\tportletDataContext.getImportDataStagedModelElement(structure);\n\n\t\t\tboolean preloaded = GetterUtil.getBoolean(\n\t\t\t\telement.attributeValue(\"preloaded\"));\n\n\t\t\tDDMStructure existingStructure = null;\n\n\t\t\tif (!preloaded) {\n\t\t\t\texistingStructure =\n\t\t\t\t\tDDMStructureLocalServiceUtil.\n\t\t\t\t\t\tfetchDDMStructureByUuidAndGroupId(\n\t\t\t\t\t\t\tstructure.getUuid(),\n\t\t\t\t\t\t\tportletDataContext.getScopeGroupId());\n\t\t\t}\n\t\t\telse {\n\t\t\t\texistingStructure = DDMStructureLocalServiceUtil.fetchStructure(\n\t\t\t\t\tportletDataContext.getScopeGroupId(),\n\t\t\t\t\tstructure.getClassNameId(), structure.getStructureKey());\n\t\t\t}\n\n\t\t\tif (existingStructure == null) {\n\t\t\t\tserviceContext.setUuid(structure.getUuid());\n\n\t\t\t\timportedStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(),\n\t\t\t\t\tparentStructureId, structure.getClassNameId(),\n\t\t\t\t\tstructure.getStructureKey(), structure.getNameMap(),\n\t\t\t\t\tstructure.getDescriptionMap(), structure.getXsd(),\n\t\t\t\t\tstructure.getStorageType(), structure.getType(),\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedStructure =\n\t\t\t\t\tDDMStructureLocalServiceUtil.updateStructure(\n\t\t\t\t\t\texistingStructure.getStructureId(), parentStructureId,\n\t\t\t\t\t\tstructure.getNameMap(), structure.getDescriptionMap(),\n\t\t\t\t\t\tstructure.getXsd(), serviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\timportedStructure = DDMStructureLocalServiceUtil.addStructure(\n\t\t\t\tuserId, portletDataContext.getScopeGroupId(), parentStructureId,\n\t\t\t\tstructure.getClassNameId(), structure.getStructureKey(),\n\t\t\t\tstructure.getNameMap(), structure.getDescriptionMap(),\n\t\t\t\tstructure.getXsd(), structure.getStorageType(),\n\t\t\t\tstructure.getType(), serviceContext);\n\t\t}\n\n\t\tportletDataContext.importClassedModel(\n\t\t\tstructure, importedStructure, DDMPortletDataHandler.NAMESPACE);\n\n\t\tstructureKeys.put(\n\t\t\tstructure.getStructureKey(), importedStructure.getStructureKey());\n\t}","commit_id":"02d2f979245a750962738cb65881d32f199a5e8e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, DDMTemplate template)\n\t\tthrows Exception {\n\n\t\tlong userId = portletDataContext.getUserId(template.getUserUuid());\n\n\t\tlong classPK = template.getClassPK();\n\n\t\tElement structureElement = portletDataContext.getReferenceDataElement(\n\t\t\ttemplate, DDMStructure.class, classPK);\n\n\t\tif (structureElement != null) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, structureElement);\n\n\t\t\tMap<Long, Long> structureIds =\n\t\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tDDMStructure.class);\n\n\t\t\tclassPK = MapUtil.getLong(structureIds, classPK, classPK);\n\t\t}\n\n\t\tFile smallFile = null;\n\n\t\ttry {\n\t\t\tif (template.isSmallImage()) {\n\t\t\t\tElement element =\n\t\t\t\t\tportletDataContext.getImportDataStagedModelElement(\n\t\t\t\t\t\ttemplate);\n\n\t\t\t\tString smallImagePath = element.attributeValue(\n\t\t\t\t\t\"small-image-path\");\n\n\t\t\t\tif (Validator.isNotNull(template.getSmallImageURL())) {\n\t\t\t\t\tString smallImageURL =\n\t\t\t\t\t\tExportImportHelperUtil.replaceImportContentReferences(\n\t\t\t\t\t\t\tportletDataContext, element,\n\t\t\t\t\t\t\ttemplate.getSmallImageURL(), true);\n\n\t\t\t\t\ttemplate.setSmallImageURL(smallImageURL);\n\t\t\t\t}\n\t\t\t\telse if (Validator.isNotNull(smallImagePath)) {\n\t\t\t\t\tbyte[] bytes = portletDataContext.getZipEntryAsByteArray(\n\t\t\t\t\t\tsmallImagePath);\n\n\t\t\t\t\tif (bytes != null) {\n\t\t\t\t\t\tsmallFile = FileUtil.createTempFile(\n\t\t\t\t\t\t\ttemplate.getSmallImageType());\n\n\t\t\t\t\t\tFileUtil.write(smallFile, bytes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tServiceContext serviceContext =\n\t\t\t\tportletDataContext.createServiceContext(\n\t\t\t\t\ttemplate, DDMPortletDataHandler.NAMESPACE);\n\n\t\t\tDDMTemplate importedTemplate = null;\n\n\t\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\t\tDDMTemplate existingTemplate =\n\t\t\t\t\tDDMTemplateLocalServiceUtil.\n\t\t\t\t\t\tfetchDDMTemplateByUuidAndGroupId(\n\t\t\t\t\t\t\ttemplate.getUuid(),\n\t\t\t\t\t\t\tportletDataContext.getScopeGroupId());\n\n\t\t\t\tif (existingTemplate == null) {\n\t\t\t\t\texistingTemplate =\n\t\t\t\t\t\tDDMTemplateLocalServiceUtil.\n\t\t\t\t\t\t\tfetchDDMTemplateByUuidAndGroupId(\n\t\t\t\t\t\t\t\ttemplate.getUuid(),\n\t\t\t\t\t\t\t\tportletDataContext.getCompanyGroupId());\n\t\t\t\t}\n\n\t\t\t\tif (existingTemplate == null) {\n\t\t\t\t\tserviceContext.setUuid(template.getUuid());\n\n\t\t\t\t\timportedTemplate = addTemplate(\n\t\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), template,\n\t\t\t\t\t\tclassPK, smallFile, serviceContext);\n\t\t\t\t}\n\t\t\t\telse if (portletDataContext.isCompanyStagedGroupedModel(\n\t\t\t\t\t\t\texistingTemplate)) {\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\timportedTemplate =\n\t\t\t\t\t\tDDMTemplateLocalServiceUtil.updateTemplate(\n\t\t\t\t\t\t\texistingTemplate.getTemplateId(),\n\t\t\t\t\t\t\ttemplate.getClassPK(), template.getNameMap(),\n\t\t\t\t\t\t\ttemplate.getDescriptionMap(), template.getType(),\n\t\t\t\t\t\t\ttemplate.getMode(), template.getLanguage(),\n\t\t\t\t\t\t\ttemplate.getScript(), template.isCacheable(),\n\t\t\t\t\t\t\ttemplate.isSmallImage(),\n\t\t\t\t\t\t\ttemplate.getSmallImageURL(), smallFile,\n\t\t\t\t\t\t\tserviceContext);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedTemplate = addTemplate(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), template,\n\t\t\t\t\tclassPK, smallFile, serviceContext);\n\t\t\t}\n\n\t\t\tportletDataContext.importClassedModel(\n\t\t\t\ttemplate, importedTemplate, DDMPortletDataHandler.NAMESPACE);\n\n\t\t\tMap<String, String> ddmTemplateKeys =\n\t\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tDDMTemplate.class + \".ddmTemplateKey\");\n\n\t\t\tddmTemplateKeys.put(\n\t\t\t\ttemplate.getTemplateKey(), importedTemplate.getTemplateKey());\n\t\t}\n\t\tfinally {\n\t\t\tif (smallFile != null) {\n\t\t\t\tsmallFile.delete();\n\t\t\t}\n\t\t}\n\t}","id":96192,"modified_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, DDMTemplate template)\n\t\tthrows Exception {\n\n\t\tlong userId = portletDataContext.getUserId(template.getUserUuid());\n\n\t\tlong classPK = template.getClassPK();\n\n\t\tElement structureElement = portletDataContext.getReferenceDataElement(\n\t\t\ttemplate, DDMStructure.class, classPK);\n\n\t\tif (structureElement != null) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, structureElement);\n\n\t\t\tMap<Long, Long> structureIds =\n\t\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tDDMStructure.class);\n\n\t\t\tclassPK = MapUtil.getLong(structureIds, classPK, classPK);\n\t\t}\n\n\t\tFile smallFile = null;\n\n\t\ttry {\n\t\t\tif (template.isSmallImage()) {\n\t\t\t\tElement element =\n\t\t\t\t\tportletDataContext.getImportDataStagedModelElement(\n\t\t\t\t\t\ttemplate);\n\n\t\t\t\tString smallImagePath = element.attributeValue(\n\t\t\t\t\t\"small-image-path\");\n\n\t\t\t\tif (Validator.isNotNull(template.getSmallImageURL())) {\n\t\t\t\t\tString smallImageURL =\n\t\t\t\t\t\tExportImportHelperUtil.replaceImportContentReferences(\n\t\t\t\t\t\t\tportletDataContext, element,\n\t\t\t\t\t\t\ttemplate.getSmallImageURL(), true);\n\n\t\t\t\t\ttemplate.setSmallImageURL(smallImageURL);\n\t\t\t\t}\n\t\t\t\telse if (Validator.isNotNull(smallImagePath)) {\n\t\t\t\t\tbyte[] bytes = portletDataContext.getZipEntryAsByteArray(\n\t\t\t\t\t\tsmallImagePath);\n\n\t\t\t\t\tif (bytes != null) {\n\t\t\t\t\t\tsmallFile = FileUtil.createTempFile(\n\t\t\t\t\t\t\ttemplate.getSmallImageType());\n\n\t\t\t\t\t\tFileUtil.write(smallFile, bytes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tServiceContext serviceContext =\n\t\t\t\tportletDataContext.createServiceContext(\n\t\t\t\t\ttemplate, DDMPortletDataHandler.NAMESPACE);\n\n\t\t\tDDMTemplate importedTemplate = null;\n\n\t\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\t\tDDMTemplate existingTemplate =\n\t\t\t\t\tDDMTemplateLocalServiceUtil.\n\t\t\t\t\t\tfetchDDMTemplateByUuidAndGroupId(\n\t\t\t\t\t\t\ttemplate.getUuid(),\n\t\t\t\t\t\t\tportletDataContext.getScopeGroupId());\n\n\t\t\t\tif (existingTemplate == null) {\n\t\t\t\t\tserviceContext.setUuid(template.getUuid());\n\n\t\t\t\t\timportedTemplate = addTemplate(\n\t\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), template,\n\t\t\t\t\t\tclassPK, smallFile, serviceContext);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\timportedTemplate =\n\t\t\t\t\t\tDDMTemplateLocalServiceUtil.updateTemplate(\n\t\t\t\t\t\t\texistingTemplate.getTemplateId(),\n\t\t\t\t\t\t\ttemplate.getClassPK(), template.getNameMap(),\n\t\t\t\t\t\t\ttemplate.getDescriptionMap(), template.getType(),\n\t\t\t\t\t\t\ttemplate.getMode(), template.getLanguage(),\n\t\t\t\t\t\t\ttemplate.getScript(), template.isCacheable(),\n\t\t\t\t\t\t\ttemplate.isSmallImage(),\n\t\t\t\t\t\t\ttemplate.getSmallImageURL(), smallFile,\n\t\t\t\t\t\t\tserviceContext);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedTemplate = addTemplate(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), template,\n\t\t\t\t\tclassPK, smallFile, serviceContext);\n\t\t\t}\n\n\t\t\tportletDataContext.importClassedModel(\n\t\t\t\ttemplate, importedTemplate, DDMPortletDataHandler.NAMESPACE);\n\n\t\t\tMap<String, String> ddmTemplateKeys =\n\t\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tDDMTemplate.class + \".ddmTemplateKey\");\n\n\t\t\tddmTemplateKeys.put(\n\t\t\t\ttemplate.getTemplateKey(), importedTemplate.getTemplateKey());\n\t\t}\n\t\tfinally {\n\t\t\tif (smallFile != null) {\n\t\t\t\tsmallFile.delete();\n\t\t\t}\n\t\t}\n\t}","commit_id":"02d2f979245a750962738cb65881d32f199a5e8e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tDLFileEntryType fileEntryType)\n\t\tthrows Exception {\n\n\t\tlong userId = portletDataContext.getUserId(fileEntryType.getUserUuid());\n\n\t\tList<Element> ddmStructureElements =\n\t\t\tportletDataContext.getReferenceDataElements(\n\t\t\t\tfileEntryType, DDMStructure.class);\n\n\t\tfor (Element ddmStructureElement : ddmStructureElements) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, ddmStructureElement);\n\t\t}\n\n\t\tList<Element> ddmStructureReferenceElements =\n\t\t\tportletDataContext.getReferenceElements(\n\t\t\t\tfileEntryType, DDMStructure.class);\n\n\t\tlong[] ddmStructureIdsArray =\n\t\t\tnew long[ddmStructureReferenceElements.size()];\n\n\t\tMap<Long, Long> ddmStructureIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMStructure.class);\n\n\t\tfor (int i = 0; i < ddmStructureReferenceElements.size(); i++) {\n\t\t\tElement ddmStructureReferenceElement =\n\t\t\t\tddmStructureReferenceElements.get(i);\n\n\t\t\tlong ddmStructureId = GetterUtil.getLong(\n\t\t\t\tddmStructureReferenceElement.attributeValue(\"class-pk\"));\n\n\t\t\tddmStructureIdsArray[i] = MapUtil.getLong(\n\t\t\t\tddmStructureIds, ddmStructureId);\n\t\t}\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tfileEntryType, DLPortletDataHandler.NAMESPACE);\n\n\t\tDLFileEntryType importedDLFileEntryType = null;\n\n\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\tDLFileEntryType existingDLFileEntryType =\n\t\t\t\tDLFileEntryTypeLocalServiceUtil.\n\t\t\t\t\tfetchDLFileEntryTypeByUuidAndGroupId(\n\t\t\t\t\t\tfileEntryType.getUuid(),\n\t\t\t\t\t\tportletDataContext.getScopeGroupId());\n\n\t\t\tif (existingDLFileEntryType == null) {\n\t\t\t\texistingDLFileEntryType =\n\t\t\t\t\tDLFileEntryTypeLocalServiceUtil.\n\t\t\t\t\t\tfetchDLFileEntryTypeByUuidAndGroupId(\n\t\t\t\t\t\t\tfileEntryType.getUuid(),\n\t\t\t\t\t\t\tportletDataContext.getCompanyGroupId());\n\t\t\t}\n\n\t\t\tif (existingDLFileEntryType == null) {\n\t\t\t\tserviceContext.setUuid(fileEntryType.getUuid());\n\n\t\t\t\timportedDLFileEntryType =\n\t\t\t\t\tDLFileEntryTypeLocalServiceUtil.addFileEntryType(\n\t\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(),\n\t\t\t\t\t\tfileEntryType.getFileEntryTypeKey(),\n\t\t\t\t\t\tfileEntryType.getNameMap(),\n\t\t\t\t\t\tfileEntryType.getDescriptionMap(), ddmStructureIdsArray,\n\t\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t\telse if (portletDataContext.isCompanyStagedGroupedModel(\n\t\t\t\t\t\texistingDLFileEntryType)) {\n\n\t\t\t\treturn;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tDLFileEntryTypeLocalServiceUtil.updateFileEntryType(\n\t\t\t\t\tuserId, existingDLFileEntryType.getFileEntryTypeId(),\n\t\t\t\t\tfileEntryType.getNameMap(),\n\t\t\t\t\tfileEntryType.getDescriptionMap(), ddmStructureIdsArray,\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\timportedDLFileEntryType =\n\t\t\t\tDLFileEntryTypeLocalServiceUtil.addFileEntryType(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(),\n\t\t\t\t\tfileEntryType.getFileEntryTypeKey(),\n\t\t\t\t\tfileEntryType.getNameMap(),\n\t\t\t\t\tfileEntryType.getDescriptionMap(), ddmStructureIdsArray,\n\t\t\t\t\tserviceContext);\n\t\t}\n\n\t\tportletDataContext.importClassedModel(\n\t\t\tfileEntryType, importedDLFileEntryType,\n\t\t\tDLPortletDataHandler.NAMESPACE);\n\n\t\tString importedDLFileEntryDDMStructureKey = DLUtil.getDDMStructureKey(\n\t\t\timportedDLFileEntryType);\n\n\t\tList<DDMStructure> importedDDMStructures =\n\t\t\timportedDLFileEntryType.getDDMStructures();\n\n\t\tfor (DDMStructure importedDDMStructure : importedDDMStructures) {\n\t\t\tString ddmStructureKey = importedDDMStructure.getStructureKey();\n\n\t\t\tif (!DLUtil.isAutoGeneratedDLFileEntryTypeDDMStructureKey(\n\t\t\t\t\tddmStructureKey)) {\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ddmStructureKey.equals(importedDLFileEntryDDMStructureKey)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\timportedDDMStructure.setStructureKey(\n\t\t\t\timportedDLFileEntryDDMStructureKey);\n\n\t\t\tDDMStructureLocalServiceUtil.updateDDMStructure(\n\t\t\t\timportedDDMStructure);\n\t\t}\n\t}","id":96193,"modified_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext,\n\t\t\tDLFileEntryType fileEntryType)\n\t\tthrows Exception {\n\n\t\tlong userId = portletDataContext.getUserId(fileEntryType.getUserUuid());\n\n\t\tList<Element> ddmStructureElements =\n\t\t\tportletDataContext.getReferenceDataElements(\n\t\t\t\tfileEntryType, DDMStructure.class);\n\n\t\tfor (Element ddmStructureElement : ddmStructureElements) {\n\t\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\t\tportletDataContext, ddmStructureElement);\n\t\t}\n\n\t\tList<Element> ddmStructureReferenceElements =\n\t\t\tportletDataContext.getReferenceElements(\n\t\t\t\tfileEntryType, DDMStructure.class);\n\n\t\tlong[] ddmStructureIdsArray =\n\t\t\tnew long[ddmStructureReferenceElements.size()];\n\n\t\tMap<Long, Long> ddmStructureIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDDMStructure.class);\n\n\t\tfor (int i = 0; i < ddmStructureReferenceElements.size(); i++) {\n\t\t\tElement ddmStructureReferenceElement =\n\t\t\t\tddmStructureReferenceElements.get(i);\n\n\t\t\tlong ddmStructureId = GetterUtil.getLong(\n\t\t\t\tddmStructureReferenceElement.attributeValue(\"class-pk\"));\n\n\t\t\tddmStructureIdsArray[i] = MapUtil.getLong(\n\t\t\t\tddmStructureIds, ddmStructureId);\n\t\t}\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tfileEntryType, DLPortletDataHandler.NAMESPACE);\n\n\t\tDLFileEntryType importedDLFileEntryType = null;\n\n\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\tDLFileEntryType existingDLFileEntryType =\n\t\t\t\tDLFileEntryTypeLocalServiceUtil.\n\t\t\t\t\tfetchDLFileEntryTypeByUuidAndGroupId(\n\t\t\t\t\t\tfileEntryType.getUuid(),\n\t\t\t\t\t\tportletDataContext.getScopeGroupId());\n\n\t\t\tif (existingDLFileEntryType == null) {\n\t\t\t\tserviceContext.setUuid(fileEntryType.getUuid());\n\n\t\t\t\timportedDLFileEntryType =\n\t\t\t\t\tDLFileEntryTypeLocalServiceUtil.addFileEntryType(\n\t\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(),\n\t\t\t\t\t\tfileEntryType.getFileEntryTypeKey(),\n\t\t\t\t\t\tfileEntryType.getNameMap(),\n\t\t\t\t\t\tfileEntryType.getDescriptionMap(), ddmStructureIdsArray,\n\t\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tDLFileEntryTypeLocalServiceUtil.updateFileEntryType(\n\t\t\t\t\tuserId, existingDLFileEntryType.getFileEntryTypeId(),\n\t\t\t\t\tfileEntryType.getNameMap(),\n\t\t\t\t\tfileEntryType.getDescriptionMap(), ddmStructureIdsArray,\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\timportedDLFileEntryType =\n\t\t\t\tDLFileEntryTypeLocalServiceUtil.addFileEntryType(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(),\n\t\t\t\t\tfileEntryType.getFileEntryTypeKey(),\n\t\t\t\t\tfileEntryType.getNameMap(),\n\t\t\t\t\tfileEntryType.getDescriptionMap(), ddmStructureIdsArray,\n\t\t\t\t\tserviceContext);\n\t\t}\n\n\t\tportletDataContext.importClassedModel(\n\t\t\tfileEntryType, importedDLFileEntryType,\n\t\t\tDLPortletDataHandler.NAMESPACE);\n\n\t\tString importedDLFileEntryDDMStructureKey = DLUtil.getDDMStructureKey(\n\t\t\timportedDLFileEntryType);\n\n\t\tList<DDMStructure> importedDDMStructures =\n\t\t\timportedDLFileEntryType.getDDMStructures();\n\n\t\tfor (DDMStructure importedDDMStructure : importedDDMStructures) {\n\t\t\tString ddmStructureKey = importedDDMStructure.getStructureKey();\n\n\t\t\tif (!DLUtil.isAutoGeneratedDLFileEntryTypeDDMStructureKey(\n\t\t\t\t\tddmStructureKey)) {\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif (ddmStructureKey.equals(importedDLFileEntryDDMStructureKey)) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\timportedDDMStructure.setStructureKey(\n\t\t\t\timportedDLFileEntryDDMStructureKey);\n\n\t\t\tDDMStructureLocalServiceUtil.updateDDMStructure(\n\t\t\t\timportedDDMStructure);\n\t\t}\n\t}","commit_id":"02d2f979245a750962738cb65881d32f199a5e8e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void importMetaData(\n\t\t\tPortletDataContext portletDataContext, Element fileEntryElement,\n\t\t\tFileEntry fileEntry, ServiceContext serviceContext)\n\t\tthrows Exception {\n\n\t\tLiferayFileEntry liferayFileEntry = (LiferayFileEntry)fileEntry;\n\n\t\tDLFileEntry dlFileEntry = liferayFileEntry.getDLFileEntry();\n\n\t\tElement fileEntryTypeElement =\n\t\t\tportletDataContext.getReferenceDataElement(\n\t\t\t\tfileEntryElement, DLFileEntryType.class,\n\t\t\t\tdlFileEntry.getFileEntryTypeId());\n\n\t\tif (fileEntryTypeElement == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tString fileEntryTypePath = fileEntryTypeElement.attributeValue(\"path\");\n\n\t\tDLFileEntryType dlFileEntryType =\n\t\t\t(DLFileEntryType)portletDataContext.getZipEntryAsObject(\n\t\t\t\tfileEntryTypePath);\n\n\t\tDLFileEntryType existingDLFileEntryType =\n\t\t\tDLFileEntryTypeLocalServiceUtil.\n\t\t\t\tfetchDLFileEntryTypeByUuidAndGroupId(\n\t\t\t\t\tdlFileEntryType.getUuid(),\n\t\t\t\t\tportletDataContext.getScopeGroupId());\n\n\t\tif (existingDLFileEntryType == null) {\n\t\t\texistingDLFileEntryType =\n\t\t\t\tDLFileEntryTypeLocalServiceUtil.\n\t\t\t\t\tfetchDLFileEntryTypeByUuidAndGroupId(\n\t\t\t\t\t\tdlFileEntryType.getUuid(),\n\t\t\t\t\t\tportletDataContext.getCompanyGroupId());\n\t\t}\n\n\t\tif (existingDLFileEntryType == null) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, dlFileEntryType);\n\n\t\t\tMap<Long, Long> dlFileEntryTypeIds =\n\t\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tDLFileEntryType.class);\n\n\t\t\tlong dlFileEntryTypeId = MapUtil.getLong(\n\t\t\t\tdlFileEntryTypeIds, dlFileEntryType.getFileEntryTypeId(),\n\t\t\t\tdlFileEntryType.getFileEntryTypeId());\n\n\t\t\texistingDLFileEntryType =\n\t\t\t\tDLFileEntryTypeLocalServiceUtil.fetchDLFileEntryType(\n\t\t\t\t\tdlFileEntryTypeId);\n\t\t}\n\n\t\tif (existingDLFileEntryType == null) {\n\t\t\tserviceContext.setAttribute(\"fileEntryTypeId\", -1);\n\n\t\t\treturn;\n\t\t}\n\n\t\tserviceContext.setAttribute(\n\t\t\t\"fileEntryTypeId\", existingDLFileEntryType.getFileEntryTypeId());\n\n\t\tList<DDMStructure> ddmStructures =\n\t\t\texistingDLFileEntryType.getDDMStructures();\n\n\t\tfor (DDMStructure ddmStructure : ddmStructures) {\n\t\t\tElement structureFieldsElement =\n\t\t\t\t(Element)fileEntryElement.selectSingleNode(\n\t\t\t\t\t\"structure-fields[@structureUuid='\".concat(\n\t\t\t\t\t\tddmStructure.getUuid()).concat(\"']\"));\n\n\t\t\tif (structureFieldsElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tString path = structureFieldsElement.attributeValue(\"path\");\n\n\t\t\tFields fields = (Fields)portletDataContext.getZipEntryAsObject(\n\t\t\t\tpath);\n\n\t\t\tserviceContext.setAttribute(\n\t\t\t\tFields.class.getName() + ddmStructure.getStructureId(), fields);\n\t\t}\n\t}","id":96194,"modified_method":"protected void importMetaData(\n\t\t\tPortletDataContext portletDataContext, Element fileEntryElement,\n\t\t\tFileEntry fileEntry, ServiceContext serviceContext)\n\t\tthrows Exception {\n\n\t\tLiferayFileEntry liferayFileEntry = (LiferayFileEntry)fileEntry;\n\n\t\tDLFileEntry dlFileEntry = liferayFileEntry.getDLFileEntry();\n\n\t\tElement fileEntryTypeElement =\n\t\t\tportletDataContext.getReferenceDataElement(\n\t\t\t\tfileEntryElement, DLFileEntryType.class,\n\t\t\t\tdlFileEntry.getFileEntryTypeId());\n\n\t\tif (fileEntryTypeElement == null) {\n\t\t\treturn;\n\t\t}\n\n\t\tString fileEntryTypePath = fileEntryTypeElement.attributeValue(\"path\");\n\n\t\tDLFileEntryType dlFileEntryType =\n\t\t\t(DLFileEntryType)portletDataContext.getZipEntryAsObject(\n\t\t\t\tfileEntryTypePath);\n\n\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\tportletDataContext, dlFileEntryType);\n\n\t\tMap<Long, Long> dlFileEntryTypeIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDLFileEntryType.class);\n\n\t\tlong dlFileEntryTypeId = MapUtil.getLong(\n\t\t\tdlFileEntryTypeIds, dlFileEntryType.getFileEntryTypeId(),\n\t\t\tdlFileEntryType.getFileEntryTypeId());\n\n\t\tDLFileEntryType existingDLFileEntryType =\n\t\t\tDLFileEntryTypeLocalServiceUtil.fetchDLFileEntryType(\n\t\t\t\tdlFileEntryTypeId);\n\n\t\tif (existingDLFileEntryType == null) {\n\t\t\tserviceContext.setAttribute(\"fileEntryTypeId\", -1);\n\n\t\t\treturn;\n\t\t}\n\n\t\tserviceContext.setAttribute(\n\t\t\t\"fileEntryTypeId\", existingDLFileEntryType.getFileEntryTypeId());\n\n\t\tList<DDMStructure> ddmStructures =\n\t\t\texistingDLFileEntryType.getDDMStructures();\n\n\t\tfor (DDMStructure ddmStructure : ddmStructures) {\n\t\t\tElement structureFieldsElement =\n\t\t\t\t(Element)fileEntryElement.selectSingleNode(\n\t\t\t\t\t\"structure-fields[@structureUuid='\".concat(\n\t\t\t\t\t\tddmStructure.getUuid()).concat(\"']\"));\n\n\t\t\tif (structureFieldsElement == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tString path = structureFieldsElement.attributeValue(\"path\");\n\n\t\t\tFields fields = (Fields)portletDataContext.getZipEntryAsObject(\n\t\t\t\tpath);\n\n\t\t\tserviceContext.setAttribute(\n\t\t\t\tFields.class.getName() + ddmStructure.getStructureId(), fields);\n\t\t}\n\t}","commit_id":"02d2f979245a750962738cb65881d32f199a5e8e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void importFolderFileEntryTypes(\n\t\t\tPortletDataContext portletDataContext, Element folderElement,\n\t\t\tFolder folder, ServiceContext serviceContext)\n\t\tthrows Exception {\n\n\t\tList<Long> currentFolderFileEntryTypeIds = new ArrayList<Long>();\n\n\t\tMap<Long, Long> fileEntryTypeIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tDLFileEntryType.class);\n\n\t\tString defaultFileEntryTypeUuid = GetterUtil.getString(\n\t\t\tfolderElement.attributeValue(\"defaultFileEntryTypeUuid\"));\n\n\t\tlong defaultFileEntryTypeId = 0;\n\n\t\tList<Element> referenceDataElements =\n\t\t\tportletDataContext.getReferenceDataElements(\n\t\t\t\tfolderElement, DLFileEntryType.class);\n\n\t\tfor (Element referenceDataElement : referenceDataElements) {\n\t\t\tString referencePath = referenceDataElement.attributeValue(\"path\");\n\n\t\t\tDLFileEntryType referenceDLFileEntryType =\n\t\t\t\t(DLFileEntryType)portletDataContext.getZipEntryAsObject(\n\t\t\t\t\treferencePath);\n\n\t\t\tString fileEntryTypeUuid = referenceDLFileEntryType.getUuid();\n\n\t\t\tDLFileEntryType existingDLFileEntryType =\n\t\t\t\tDLFileEntryTypeLocalServiceUtil.\n\t\t\t\t\tfetchDLFileEntryTypeByUuidAndGroupId(\n\t\t\t\t\t\tfileEntryTypeUuid,\n\t\t\t\t\t\tportletDataContext.getScopeGroupId());\n\n\t\t\tif (existingDLFileEntryType == null) {\n\t\t\t\texistingDLFileEntryType =\n\t\t\t\t\tDLFileEntryTypeLocalServiceUtil.\n\t\t\t\t\t\tfetchDLFileEntryTypeByUuidAndGroupId(\n\t\t\t\t\t\t\tfileEntryTypeUuid,\n\t\t\t\t\t\t\tportletDataContext.getCompanyGroupId());\n\t\t\t}\n\n\t\t\tif (existingDLFileEntryType == null) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, referenceDLFileEntryType);\n\n\t\t\t\tlong dlFileEntryTypeId = MapUtil.getLong(\n\t\t\t\t\tfileEntryTypeIds,\n\t\t\t\t\treferenceDLFileEntryType.getFileEntryTypeId(),\n\t\t\t\t\treferenceDLFileEntryType.getFileEntryTypeId());\n\n\t\t\t\texistingDLFileEntryType =\n\t\t\t\t\tDLFileEntryTypeLocalServiceUtil.fetchDLFileEntryType(\n\t\t\t\t\t\tdlFileEntryTypeId);\n\t\t\t}\n\n\t\t\tif (existingDLFileEntryType == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcurrentFolderFileEntryTypeIds.add(\n\t\t\t\texistingDLFileEntryType.getFileEntryTypeId());\n\n\t\t\tif (defaultFileEntryTypeUuid.equals(fileEntryTypeUuid)) {\n\t\t\t\tdefaultFileEntryTypeId =\n\t\t\t\t\texistingDLFileEntryType.getFileEntryTypeId();\n\t\t\t}\n\t\t}\n\n\t\tif (GetterUtil.getBoolean(\n\t\t\t\tfolderElement.attributeValue(\"basic-document\"))) {\n\n\t\t\tcurrentFolderFileEntryTypeIds.add(\n\t\t\t\tDLFileEntryTypeConstants.FILE_ENTRY_TYPE_ID_BASIC_DOCUMENT);\n\t\t}\n\n\t\tif (!currentFolderFileEntryTypeIds.isEmpty()) {\n\t\t\tDLFolder dlFolder = (DLFolder)folder.getModel();\n\n\t\t\tdlFolder.setDefaultFileEntryTypeId(defaultFileEntryTypeId);\n\t\t\tdlFolder.setOverrideFileEntryTypes(true);\n\n\t\t\tDLFolderLocalServiceUtil.updateDLFolder(dlFolder);\n\n\t\t\tDLFileEntryTypeLocalServiceUtil.updateFolderFileEntryTypes(\n\t\t\t\tdlFolder, currentFolderFileEntryTypeIds, defaultFileEntryTypeId,\n\t\t\t\tserviceContext);\n\t\t}\n\t}","id":96195,"modified_method":"protected void importFolderFileEntryTypes(\n\t\t\tPortletDataContext portletDataContext, Element folderElement,\n\t\t\tFolder folder, ServiceContext serviceContext)\n\t\tthrows Exception {\n\n\t\tList<Long> currentFolderFileEntryTypeIds = new ArrayList<Long>();\n\n\t\tString defaultFileEntryTypeUuid = GetterUtil.getString(\n\t\t\tfolderElement.attributeValue(\"defaultFileEntryTypeUuid\"));\n\n\t\tlong defaultFileEntryTypeId = 0;\n\n\t\tList<Element> referenceDataElements =\n\t\t\tportletDataContext.getReferenceDataElements(\n\t\t\t\tfolderElement, DLFileEntryType.class);\n\n\t\tfor (Element referenceDataElement : referenceDataElements) {\n\t\t\tString referencePath = referenceDataElement.attributeValue(\"path\");\n\n\t\t\tDLFileEntryType referenceDLFileEntryType =\n\t\t\t\t(DLFileEntryType)portletDataContext.getZipEntryAsObject(\n\t\t\t\t\treferencePath);\n\n\t\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\t\tportletDataContext, referenceDLFileEntryType);\n\n\t\t\tMap<Long, Long> fileEntryTypeIds =\n\t\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tDLFileEntryType.class);\n\n\t\t\tlong dlFileEntryTypeId = MapUtil.getLong(\n\t\t\t\tfileEntryTypeIds, referenceDLFileEntryType.getFileEntryTypeId(),\n\t\t\t\treferenceDLFileEntryType.getFileEntryTypeId());\n\n\t\t\tDLFileEntryType existingDLFileEntryType =\n\t\t\t\tDLFileEntryTypeLocalServiceUtil.fetchDLFileEntryType(\n\t\t\t\t\tdlFileEntryTypeId);\n\n\t\t\tif (existingDLFileEntryType == null) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tcurrentFolderFileEntryTypeIds.add(\n\t\t\t\texistingDLFileEntryType.getFileEntryTypeId());\n\n\t\t\tif (defaultFileEntryTypeUuid.equals(\n\t\t\t\t\treferenceDLFileEntryType.getUuid())) {\n\n\t\t\t\tdefaultFileEntryTypeId =\n\t\t\t\t\texistingDLFileEntryType.getFileEntryTypeId();\n\t\t\t}\n\t\t}\n\n\t\tif (GetterUtil.getBoolean(\n\t\t\t\tfolderElement.attributeValue(\"basic-document\"))) {\n\n\t\t\tcurrentFolderFileEntryTypeIds.add(\n\t\t\t\tDLFileEntryTypeConstants.FILE_ENTRY_TYPE_ID_BASIC_DOCUMENT);\n\t\t}\n\n\t\tif (!currentFolderFileEntryTypeIds.isEmpty()) {\n\t\t\tDLFolder dlFolder = (DLFolder)folder.getModel();\n\n\t\t\tdlFolder.setDefaultFileEntryTypeId(defaultFileEntryTypeId);\n\t\t\tdlFolder.setOverrideFileEntryTypes(true);\n\n\t\t\tDLFolderLocalServiceUtil.updateDLFolder(dlFolder);\n\n\t\t\tDLFileEntryTypeLocalServiceUtil.updateFolderFileEntryTypes(\n\t\t\t\tdlFolder, currentFolderFileEntryTypeIds, defaultFileEntryTypeId,\n\t\t\t\tserviceContext);\n\t\t}\n\t}","commit_id":"02d2f979245a750962738cb65881d32f199a5e8e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, Folder folder)\n\t\tthrows Exception {\n\n\t\tlong userId = portletDataContext.getUserId(folder.getUserUuid());\n\n\t\tString path = ExportImportPathUtil.getModelPath(\n\t\t\tportletDataContext, Folder.class.getName(), folder.getFolderId());\n\n\t\tElement folderElement = portletDataContext.getImportDataElement(\n\t\t\tFolder.class.getSimpleName(), \"path\", path);\n\n\t\tElement referenceDataElement =\n\t\t\tportletDataContext.getReferenceDataElement(\n\t\t\t\tfolderElement, Repository.class, folder.getRepositoryId());\n\n\t\tif (referenceDataElement != null) {\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, referenceDataElement);\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (folder.getParentFolderId() !=\n\t\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tString parentFolderPath = ExportImportPathUtil.getModelPath(\n\t\t\t\tportletDataContext, Folder.class.getName(),\n\t\t\t\tfolder.getParentFolderId());\n\n\t\t\tFolder parentFolder =\n\t\t\t\t(Folder)portletDataContext.getZipEntryAsObject(\n\t\t\t\t\tparentFolderPath);\n\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, parentFolder);\n\t\t}\n\n\t\tMap<Long, Long> folderIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tFolder.class);\n\n\t\tlong parentFolderId = MapUtil.getLong(\n\t\t\tfolderIds, folder.getParentFolderId(), folder.getParentFolderId());\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tfolder, DLFolder.class, DLPortletDataHandler.NAMESPACE);\n\n\t\tserviceContext.setUserId(userId);\n\n\t\tFolder importedFolder = null;\n\n\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\tFolder existingFolder = FolderUtil.fetchByUUID_R(\n\t\t\t\tfolder.getUuid(), portletDataContext.getScopeGroupId());\n\n\t\t\tif (existingFolder == null) {\n\t\t\t\tString name = getFolderName(\n\t\t\t\t\tnull, portletDataContext.getScopeGroupId(), parentFolderId,\n\t\t\t\t\tfolder.getName(), 2);\n\n\t\t\t\tserviceContext.setUuid(folder.getUuid());\n\n\t\t\t\timportedFolder = DLAppLocalServiceUtil.addFolder(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(),\n\t\t\t\t\tparentFolderId, name, folder.getDescription(),\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString name = getFolderName(\n\t\t\t\t\tfolder.getUuid(), portletDataContext.getScopeGroupId(),\n\t\t\t\t\tparentFolderId, folder.getName(), 2);\n\n\t\t\t\timportedFolder = DLAppLocalServiceUtil.updateFolder(\n\t\t\t\t\texistingFolder.getFolderId(), parentFolderId, name,\n\t\t\t\t\tfolder.getDescription(), serviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tString name = getFolderName(\n\t\t\t\tnull, portletDataContext.getScopeGroupId(), parentFolderId,\n\t\t\t\tfolder.getName(), 2);\n\n\t\t\timportedFolder = DLAppLocalServiceUtil.addFolder(\n\t\t\t\tuserId, portletDataContext.getScopeGroupId(), parentFolderId,\n\t\t\t\tname, folder.getDescription(), serviceContext);\n\t\t}\n\n\t\timportFolderFileEntryTypes(\n\t\t\tportletDataContext, folderElement, folder, serviceContext);\n\n\t\tportletDataContext.importClassedModel(\n\t\t\tfolder, importedFolder, DLFolder.class,\n\t\t\tDLPortletDataHandler.NAMESPACE);\n\n\t\tfolderIds.put(folder.getFolderId(), importedFolder.getFolderId());\n\t}","id":96196,"modified_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, Folder folder)\n\t\tthrows Exception {\n\n\t\tlong userId = portletDataContext.getUserId(folder.getUserUuid());\n\n\t\tString path = ExportImportPathUtil.getModelPath(\n\t\t\tportletDataContext, Folder.class.getName(), folder.getFolderId());\n\n\t\tElement folderElement = portletDataContext.getImportDataElement(\n\t\t\tFolder.class.getSimpleName(), \"path\", path);\n\n\t\tElement referenceDataElement =\n\t\t\tportletDataContext.getReferenceDataElement(\n\t\t\t\tfolderElement, Repository.class, folder.getRepositoryId());\n\n\t\tif (referenceDataElement != null) {\n\t\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\t\tportletDataContext, referenceDataElement);\n\n\t\t\treturn;\n\t\t}\n\n\t\tif (folder.getParentFolderId() !=\n\t\t\t\tDLFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tString parentFolderPath = ExportImportPathUtil.getModelPath(\n\t\t\t\tportletDataContext, Folder.class.getName(),\n\t\t\t\tfolder.getParentFolderId());\n\n\t\t\tFolder parentFolder =\n\t\t\t\t(Folder)portletDataContext.getZipEntryAsObject(\n\t\t\t\t\tparentFolderPath);\n\n\t\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\t\tportletDataContext, parentFolder);\n\t\t}\n\n\t\tMap<Long, Long> folderIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tFolder.class);\n\n\t\tlong parentFolderId = MapUtil.getLong(\n\t\t\tfolderIds, folder.getParentFolderId(), folder.getParentFolderId());\n\n\t\tServiceContext serviceContext = portletDataContext.createServiceContext(\n\t\t\tfolder, DLFolder.class, DLPortletDataHandler.NAMESPACE);\n\n\t\tserviceContext.setUserId(userId);\n\n\t\tFolder importedFolder = null;\n\n\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\tFolder existingFolder = FolderUtil.fetchByUUID_R(\n\t\t\t\tfolder.getUuid(), portletDataContext.getScopeGroupId());\n\n\t\t\tif (existingFolder == null) {\n\t\t\t\tString name = getFolderName(\n\t\t\t\t\tnull, portletDataContext.getScopeGroupId(), parentFolderId,\n\t\t\t\t\tfolder.getName(), 2);\n\n\t\t\t\tserviceContext.setUuid(folder.getUuid());\n\n\t\t\t\timportedFolder = DLAppLocalServiceUtil.addFolder(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(),\n\t\t\t\t\tparentFolderId, name, folder.getDescription(),\n\t\t\t\t\tserviceContext);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tString name = getFolderName(\n\t\t\t\t\tfolder.getUuid(), portletDataContext.getScopeGroupId(),\n\t\t\t\t\tparentFolderId, folder.getName(), 2);\n\n\t\t\t\timportedFolder = DLAppLocalServiceUtil.updateFolder(\n\t\t\t\t\texistingFolder.getFolderId(), parentFolderId, name,\n\t\t\t\t\tfolder.getDescription(), serviceContext);\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tString name = getFolderName(\n\t\t\t\tnull, portletDataContext.getScopeGroupId(), parentFolderId,\n\t\t\t\tfolder.getName(), 2);\n\n\t\t\timportedFolder = DLAppLocalServiceUtil.addFolder(\n\t\t\t\tuserId, portletDataContext.getScopeGroupId(), parentFolderId,\n\t\t\t\tname, folder.getDescription(), serviceContext);\n\t\t}\n\n\t\timportFolderFileEntryTypes(\n\t\t\tportletDataContext, folderElement, folder, serviceContext);\n\n\t\tportletDataContext.importClassedModel(\n\t\t\tfolder, importedFolder, DLFolder.class,\n\t\t\tDLPortletDataHandler.NAMESPACE);\n\n\t\tfolderIds.put(folder.getFolderId(), importedFolder.getFolderId());\n\t}","commit_id":"02d2f979245a750962738cb65881d32f199a5e8e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, JournalArticle article)\n\t\tthrows Exception {\n\n\t\tprepareLanguagesForImport(article);\n\n\t\tlong userId = portletDataContext.getUserId(article.getUserUuid());\n\n\t\tJournalCreationStrategy creationStrategy =\n\t\t\tJournalCreationStrategyFactory.getInstance();\n\n\t\tlong authorId = creationStrategy.getAuthorUserId(\n\t\t\tportletDataContext, article);\n\n\t\tif (authorId != JournalCreationStrategy.USE_DEFAULT_USER_ID_STRATEGY) {\n\t\t\tuserId = authorId;\n\t\t}\n\n\t\tUser user = UserLocalServiceUtil.getUser(userId);\n\n\t\tMap<Long, Long> folderIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tJournalFolder.class);\n\n\t\tif (article.getFolderId() !=\n\t\t\t\tJournalFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tElement folderElement = portletDataContext.getReferenceDataElement(\n\t\t\t\tarticle, JournalFolder.class, article.getFolderId());\n\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, folderElement);\n\t\t}\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderIds, article.getFolderId(), article.getFolderId());\n\n\t\tString articleId = article.getArticleId();\n\n\t\tboolean autoArticleId = false;\n\n\t\tif (Validator.isNumber(articleId) ||\n\t\t\t(JournalArticleLocalServiceUtil.fetchArticle(\n\t\t\t\tportletDataContext.getScopeGroupId(), articleId,\n\t\t\t\tJournalArticleConstants.VERSION_DEFAULT) != null)) {\n\n\t\t\tautoArticleId = true;\n\t\t}\n\n\t\tMap<String, String> articleIds =\n\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tJournalArticle.class + \".articleId\");\n\n\t\tString newArticleId = articleIds.get(articleId);\n\n\t\tif (Validator.isNotNull(newArticleId)) {\n\n\t\t\t// A sibling of a different version was already assigned a new\n\t\t\t// article id\n\n\t\t\tarticleId = newArticleId;\n\t\t\tautoArticleId = false;\n\t\t}\n\n\t\tString content = article.getContent();\n\n\t\tElement articleElement =\n\t\t\tportletDataContext.getImportDataStagedModelElement(article);\n\n\t\tcontent = ExportImportHelperUtil.replaceImportContentReferences(\n\t\t\tportletDataContext, articleElement, content, true);\n\n\t\tarticle.setContent(content);\n\n\t\tString newContent = creationStrategy.getTransformedContent(\n\t\t\tportletDataContext, article);\n\n\t\tif (newContent != JournalCreationStrategy.ARTICLE_CONTENT_UNCHANGED) {\n\t\t\tarticle.setContent(newContent);\n\t\t}\n\n\t\tDate displayDate = article.getDisplayDate();\n\n\t\tint displayDateMonth = 0;\n\t\tint displayDateDay = 0;\n\t\tint displayDateYear = 0;\n\t\tint displayDateHour = 0;\n\t\tint displayDateMinute = 0;\n\n\t\tif (displayDate != null) {\n\t\t\tCalendar displayCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\tdisplayCal.setTime(displayDate);\n\n\t\t\tdisplayDateMonth = displayCal.get(Calendar.MONTH);\n\t\t\tdisplayDateDay = displayCal.get(Calendar.DATE);\n\t\t\tdisplayDateYear = displayCal.get(Calendar.YEAR);\n\t\t\tdisplayDateHour = displayCal.get(Calendar.HOUR);\n\t\t\tdisplayDateMinute = displayCal.get(Calendar.MINUTE);\n\n\t\t\tif (displayCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\tdisplayDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tDate expirationDate = article.getExpirationDate();\n\n\t\tint expirationDateMonth = 0;\n\t\tint expirationDateDay = 0;\n\t\tint expirationDateYear = 0;\n\t\tint expirationDateHour = 0;\n\t\tint expirationDateMinute = 0;\n\t\tboolean neverExpire = true;\n\n\t\tif (expirationDate != null) {\n\t\t\tCalendar expirationCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\texpirationCal.setTime(expirationDate);\n\n\t\t\texpirationDateMonth = expirationCal.get(Calendar.MONTH);\n\t\t\texpirationDateDay = expirationCal.get(Calendar.DATE);\n\t\t\texpirationDateYear = expirationCal.get(Calendar.YEAR);\n\t\t\texpirationDateHour = expirationCal.get(Calendar.HOUR);\n\t\t\texpirationDateMinute = expirationCal.get(Calendar.MINUTE);\n\t\t\tneverExpire = false;\n\n\t\t\tif (expirationCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\texpirationDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tDate reviewDate = article.getReviewDate();\n\n\t\tint reviewDateMonth = 0;\n\t\tint reviewDateDay = 0;\n\t\tint reviewDateYear = 0;\n\t\tint reviewDateHour = 0;\n\t\tint reviewDateMinute = 0;\n\t\tboolean neverReview = true;\n\n\t\tif (reviewDate != null) {\n\t\t\tCalendar reviewCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\treviewCal.setTime(reviewDate);\n\n\t\t\treviewDateMonth = reviewCal.get(Calendar.MONTH);\n\t\t\treviewDateDay = reviewCal.get(Calendar.DATE);\n\t\t\treviewDateYear = reviewCal.get(Calendar.YEAR);\n\t\t\treviewDateHour = reviewCal.get(Calendar.HOUR);\n\t\t\treviewDateMinute = reviewCal.get(Calendar.MINUTE);\n\t\t\tneverReview = false;\n\n\t\t\tif (reviewCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\treviewDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tString parentDDMStructureKey = StringPool.BLANK;\n\n\t\tlong ddmStructureId = 0;\n\n\t\tList<Element> structureElements =\n\t\t\tportletDataContext.getReferenceDataElements(\n\t\t\t\tarticle, DDMStructure.class);\n\n\t\tif (!structureElements.isEmpty()) {\n\t\t\tElement structureElement = structureElements.get(0);\n\n\t\t\tString structurePath = structureElement.attributeValue(\"path\");\n\n\t\t\tDDMStructure ddmStructure =\n\t\t\t\t(DDMStructure)portletDataContext.getZipEntryAsObject(\n\t\t\t\t\tstructurePath);\n\n\t\t\tDDMStructure existingDDMStructure =\n\t\t\t\tDDMStructureLocalServiceUtil.fetchDDMStructureByUuidAndGroupId(\n\t\t\t\t\tddmStructure.getUuid(),\n\t\t\t\t\tportletDataContext.getScopeGroupId());\n\n\t\t\tif (existingDDMStructure == null) {\n\t\t\t\texistingDDMStructure =\n\t\t\t\t\tDDMStructureLocalServiceUtil.\n\t\t\t\t\t\tfetchDDMStructureByUuidAndGroupId(\n\t\t\t\t\t\t\tddmStructure.getUuid(),\n\t\t\t\t\t\t\tportletDataContext.getCompanyGroupId());\n\t\t\t}\n\n\t\t\tif (existingDDMStructure == null) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, ddmStructure);\n\n\t\t\t\tMap<Long, Long> ddmStructureIds =\n\t\t\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\t\tDDMStructure.class);\n\n\t\t\t\tddmStructureId = MapUtil.getLong(\n\t\t\t\t\tddmStructureIds, ddmStructure.getStructureId(),\n\t\t\t\t\tddmStructure.getStructureId());\n\n\t\t\t\texistingDDMStructure =\n\t\t\t\t\tDDMStructureLocalServiceUtil.getDDMStructure(\n\t\t\t\t\t\tddmStructureId);\n\t\t\t}\n\n\t\t\tif (existingDDMStructure == null) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\tStringBundler sb = new StringBundler();\n\n\t\t\t\t\tsb.append(\"Structure \");\n\t\t\t\t\tsb.append(article.getStructureId());\n\t\t\t\t\tsb.append(\" is missing for article \");\n\t\t\t\t\tsb.append(article.getArticleId());\n\t\t\t\t\tsb.append(\", skipping this article.\");\n\n\t\t\t\t\t_log.warn(sb.toString());\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparentDDMStructureKey = existingDDMStructure.getStructureKey();\n\t\t}\n\n\t\tString parentDDMTemplateKey = StringPool.BLANK;\n\n\t\tList<Element> ddmTemplateElements =\n\t\t\tportletDataContext.getReferenceDataElements(\n\t\t\t\tarticle, DDMTemplate.class);\n\n\t\tif (!ddmTemplateElements.isEmpty()) {\n\t\t\tElement templateElement = ddmTemplateElements.get(0);\n\n\t\t\tString ddmTemplatePath = templateElement.attributeValue(\"path\");\n\n\t\t\tDDMTemplate ddmTemplate =\n\t\t\t\t(DDMTemplate)portletDataContext.getZipEntryAsObject(\n\t\t\t\t\tddmTemplatePath);\n\n\t\t\tDDMTemplate existingDDMTemplate =\n\t\t\t\tDDMTemplateLocalServiceUtil.fetchDDMTemplateByUuidAndGroupId(\n\t\t\t\t\tddmTemplate.getUuid(),\n\t\t\t\t\tportletDataContext.getScopeGroupId());\n\n\t\t\tif (existingDDMTemplate == null) {\n\t\t\t\texistingDDMTemplate =\n\t\t\t\t\tDDMTemplateLocalServiceUtil.\n\t\t\t\t\t\tfetchDDMTemplateByUuidAndGroupId(\n\t\t\t\t\t\t\tddmTemplate.getUuid(),\n\t\t\t\t\t\t\tportletDataContext.getCompanyGroupId());\n\t\t\t}\n\n\t\t\tif (existingDDMTemplate == null) {\n\t\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\t\tportletDataContext, ddmTemplate);\n\n\t\t\t\tMap<Long, Long> ddmTemplateIds =\n\t\t\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\t\tDDMTemplate.class);\n\n\t\t\t\tlong ddmTemplateId = MapUtil.getLong(\n\t\t\t\t\tddmTemplateIds, ddmTemplate.getTemplateId(),\n\t\t\t\t\tddmTemplate.getTemplateId());\n\n\t\t\t\texistingDDMTemplate =\n\t\t\t\t\tDDMTemplateLocalServiceUtil.getDDMTemplate(ddmTemplateId);\n\t\t\t}\n\n\t\t\tif (existingDDMTemplate == null) {\n\t\t\t\tif (_log.isWarnEnabled()) {\n\t\t\t\t\tStringBundler sb = new StringBundler();\n\n\t\t\t\t\tsb.append(\"Template \");\n\t\t\t\t\tsb.append(article.getTemplateId());\n\t\t\t\t\tsb.append(\" is missing for article \");\n\t\t\t\t\tsb.append(article.getArticleId());\n\t\t\t\t\tsb.append(\", skipping this article.\");\n\n\t\t\t\t\t_log.warn(sb.toString());\n\t\t\t\t}\n\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tparentDDMTemplateKey = existingDDMTemplate.getTemplateKey();\n\t\t}\n\n\t\tFile smallFile = null;\n\n\t\ttry {\n\t\t\tif (article.isSmallImage()) {\n\t\t\t\tString smallImagePath = articleElement.attributeValue(\n\t\t\t\t\t\"small-image-path\");\n\n\t\t\t\tif (Validator.isNotNull(article.getSmallImageURL())) {\n\t\t\t\t\tString smallImageURL =\n\t\t\t\t\t\tExportImportHelperUtil.replaceImportContentReferences(\n\t\t\t\t\t\t\tportletDataContext, articleElement,\n\t\t\t\t\t\t\tarticle.getSmallImageURL(), true);\n\n\t\t\t\t\tarticle.setSmallImageURL(smallImageURL);\n\t\t\t\t}\n\t\t\t\telse if (Validator.isNotNull(smallImagePath)) {\n\t\t\t\t\tbyte[] bytes = portletDataContext.getZipEntryAsByteArray(\n\t\t\t\t\t\tsmallImagePath);\n\n\t\t\t\t\tif (bytes != null) {\n\t\t\t\t\t\tsmallFile = FileUtil.createTempFile(\n\t\t\t\t\t\t\tarticle.getSmallImageType());\n\n\t\t\t\t\t\tFileUtil.write(smallFile, bytes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tMap<String, byte[]> images = new HashMap<String, byte[]>();\n\n\t\t\tList<Element> imagesElements =\n\t\t\t\tportletDataContext.getReferenceDataElements(\n\t\t\t\t\tarticle, Image.class);\n\n\t\t\tfor (Element imageElement : imagesElements) {\n\t\t\t\tString imagePath = imageElement.attributeValue(\"path\");\n\n\t\t\t\tString fileName = imageElement.attributeValue(\"file-name\");\n\n\t\t\t\timages.put(\n\t\t\t\t\tfileName,\n\t\t\t\t\tportletDataContext.getZipEntryAsByteArray(imagePath));\n\t\t\t}\n\n\t\t\tString articleURL = null;\n\n\t\t\tboolean addGroupPermissions = creationStrategy.addGroupPermissions(\n\t\t\t\tportletDataContext, article);\n\t\t\tboolean addGuestPermissions = creationStrategy.addGuestPermissions(\n\t\t\t\tportletDataContext, article);\n\n\t\t\tServiceContext serviceContext =\n\t\t\t\tportletDataContext.createServiceContext(\n\t\t\t\t\tarticle, JournalPortletDataHandler.NAMESPACE);\n\n\t\t\tserviceContext.setAddGroupPermissions(addGroupPermissions);\n\t\t\tserviceContext.setAddGuestPermissions(addGuestPermissions);\n\n\t\t\tif (article.getStatus() != WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\tserviceContext.setWorkflowAction(\n\t\t\t\t\tWorkflowConstants.ACTION_SAVE_DRAFT);\n\t\t\t}\n\n\t\t\tJournalArticle importedArticle = null;\n\n\t\t\tString articleResourceUuid = articleElement.attributeValue(\n\t\t\t\t\"article-resource-uuid\");\n\n\t\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\t\tJournalArticleResource articleResource =\n\t\t\t\t\tJournalArticleResourceLocalServiceUtil.\n\t\t\t\t\t\tfetchJournalArticleResourceByUuidAndGroupId(\n\t\t\t\t\t\t\tarticleResourceUuid,\n\t\t\t\t\t\t\tportletDataContext.getScopeGroupId());\n\n\t\t\t\tif (articleResource == null) {\n\t\t\t\t\tarticleResource =\n\t\t\t\t\t\tJournalArticleResourceLocalServiceUtil.\n\t\t\t\t\t\t\tfetchJournalArticleResourceByUuidAndGroupId(\n\t\t\t\t\t\t\t\tarticleResourceUuid,\n\t\t\t\t\t\t\t\tportletDataContext.getCompanyGroupId());\n\t\t\t\t}\n\n\t\t\t\tserviceContext.setUuid(articleResourceUuid);\n\t\t\t\tserviceContext.setAttribute(\"urlTitle\", article.getUrlTitle());\n\n\t\t\t\tJournalArticle existingArticle = null;\n\n\t\t\t\tif (articleResource != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\texistingArticle =\n\t\t\t\t\t\t\tJournalArticleLocalServiceUtil.getLatestArticle(\n\t\t\t\t\t\t\t\tarticleResource.getResourcePrimKey(),\n\t\t\t\t\t\t\t\tWorkflowConstants.STATUS_ANY, false);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NoSuchArticleException nsae) {\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (existingArticle == null) {\n\t\t\t\t\texistingArticle =\n\t\t\t\t\t\tJournalArticleLocalServiceUtil.fetchArticle(\n\t\t\t\t\t\t\tportletDataContext.getScopeGroupId(), newArticleId,\n\t\t\t\t\t\t\tarticle.getVersion());\n\t\t\t\t}\n\n\t\t\t\tif (existingArticle == null) {\n\t\t\t\t\timportedArticle =\n\t\t\t\t\t\tJournalArticleLocalServiceUtil.addArticle(\n\t\t\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(),\n\t\t\t\t\t\t\tfolderId, article.getClassNameId(), ddmStructureId,\n\t\t\t\t\t\t\tarticleId, autoArticleId, article.getVersion(),\n\t\t\t\t\t\t\tarticle.getTitleMap(), article.getDescriptionMap(),\n\t\t\t\t\t\t\tarticle.getContent(), article.getType(),\n\t\t\t\t\t\t\tparentDDMStructureKey, parentDDMTemplateKey,\n\t\t\t\t\t\t\tarticle.getLayoutUuid(), displayDateMonth,\n\t\t\t\t\t\t\tdisplayDateDay, displayDateYear, displayDateHour,\n\t\t\t\t\t\t\tdisplayDateMinute, expirationDateMonth,\n\t\t\t\t\t\t\texpirationDateDay, expirationDateYear,\n\t\t\t\t\t\t\texpirationDateHour, expirationDateMinute,\n\t\t\t\t\t\t\tneverExpire, reviewDateMonth, reviewDateDay,\n\t\t\t\t\t\t\treviewDateYear, reviewDateHour, reviewDateMinute,\n\t\t\t\t\t\t\tneverReview, article.isIndexable(),\n\t\t\t\t\t\t\tarticle.isSmallImage(), article.getSmallImageURL(),\n\t\t\t\t\t\t\tsmallFile, images, articleURL, serviceContext);\n\t\t\t\t}\n\t\t\t\telse if (portletDataContext.isCompanyStagedGroupedModel(\n\t\t\t\t\t\t\texistingArticle)) {\n\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\timportedArticle =\n\t\t\t\t\t\tJournalArticleLocalServiceUtil.updateArticle(\n\t\t\t\t\t\t\tuserId, existingArticle.getGroupId(), folderId,\n\t\t\t\t\t\t\texistingArticle.getArticleId(),\n\t\t\t\t\t\t\tarticle.getVersion(), article.getTitleMap(),\n\t\t\t\t\t\t\tarticle.getDescriptionMap(), article.getContent(),\n\t\t\t\t\t\t\tarticle.getType(), parentDDMStructureKey,\n\t\t\t\t\t\t\tparentDDMTemplateKey, article.getLayoutUuid(),\n\t\t\t\t\t\t\tdisplayDateMonth, displayDateDay, displayDateYear,\n\t\t\t\t\t\t\tdisplayDateHour, displayDateMinute,\n\t\t\t\t\t\t\texpirationDateMonth, expirationDateDay,\n\t\t\t\t\t\t\texpirationDateYear, expirationDateHour,\n\t\t\t\t\t\t\texpirationDateMinute, neverExpire, reviewDateMonth,\n\t\t\t\t\t\t\treviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\t\t\t\treviewDateMinute, neverReview,\n\t\t\t\t\t\t\tarticle.isIndexable(), article.isSmallImage(),\n\t\t\t\t\t\t\tarticle.getSmallImageURL(), smallFile, images,\n\t\t\t\t\t\t\tarticleURL, serviceContext);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedArticle = JournalArticleLocalServiceUtil.addArticle(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\tarticle.getClassNameId(), ddmStructureId, articleId,\n\t\t\t\t\tautoArticleId, article.getVersion(), article.getTitleMap(),\n\t\t\t\t\tarticle.getDescriptionMap(), article.getContent(),\n\t\t\t\t\tarticle.getType(), parentDDMStructureKey,\n\t\t\t\t\tparentDDMTemplateKey, article.getLayoutUuid(),\n\t\t\t\t\tdisplayDateMonth, displayDateDay, displayDateYear,\n\t\t\t\t\tdisplayDateHour, displayDateMinute, expirationDateMonth,\n\t\t\t\t\texpirationDateDay, expirationDateYear, expirationDateHour,\n\t\t\t\t\texpirationDateMinute, neverExpire, reviewDateMonth,\n\t\t\t\t\treviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\t\treviewDateMinute, neverReview, article.isIndexable(),\n\t\t\t\t\tarticle.isSmallImage(), article.getSmallImageURL(),\n\t\t\t\t\tsmallFile, images, articleURL, serviceContext);\n\t\t\t}\n\n\t\t\tportletDataContext.importClassedModel(\n\t\t\t\tarticle, importedArticle, JournalPortletDataHandler.NAMESPACE);\n\n\t\t\tif (Validator.isNull(newArticleId)) {\n\t\t\t\tarticleIds.put(\n\t\t\t\t\tarticle.getArticleId(), importedArticle.getArticleId());\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (smallFile != null) {\n\t\t\t\tsmallFile.delete();\n\t\t\t}\n\t\t}\n\t}","id":96197,"modified_method":"@Override\n\tprotected void doImportStagedModel(\n\t\t\tPortletDataContext portletDataContext, JournalArticle article)\n\t\tthrows Exception {\n\n\t\tprepareLanguagesForImport(article);\n\n\t\tlong userId = portletDataContext.getUserId(article.getUserUuid());\n\n\t\tJournalCreationStrategy creationStrategy =\n\t\t\tJournalCreationStrategyFactory.getInstance();\n\n\t\tlong authorId = creationStrategy.getAuthorUserId(\n\t\t\tportletDataContext, article);\n\n\t\tif (authorId != JournalCreationStrategy.USE_DEFAULT_USER_ID_STRATEGY) {\n\t\t\tuserId = authorId;\n\t\t}\n\n\t\tUser user = UserLocalServiceUtil.getUser(userId);\n\n\t\tMap<Long, Long> folderIds =\n\t\t\t(Map<Long, Long>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tJournalFolder.class);\n\n\t\tif (article.getFolderId() !=\n\t\t\t\tJournalFolderConstants.DEFAULT_PARENT_FOLDER_ID) {\n\n\t\t\tElement folderElement = portletDataContext.getReferenceDataElement(\n\t\t\t\tarticle, JournalFolder.class, article.getFolderId());\n\n\t\t\tStagedModelDataHandlerUtil.importStagedModel(\n\t\t\t\tportletDataContext, folderElement);\n\t\t}\n\n\t\tlong folderId = MapUtil.getLong(\n\t\t\tfolderIds, article.getFolderId(), article.getFolderId());\n\n\t\tString articleId = article.getArticleId();\n\n\t\tboolean autoArticleId = false;\n\n\t\tif (Validator.isNumber(articleId) ||\n\t\t\t(JournalArticleLocalServiceUtil.fetchArticle(\n\t\t\t\tportletDataContext.getScopeGroupId(), articleId,\n\t\t\t\tJournalArticleConstants.VERSION_DEFAULT) != null)) {\n\n\t\t\tautoArticleId = true;\n\t\t}\n\n\t\tMap<String, String> articleIds =\n\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\tJournalArticle.class + \".articleId\");\n\n\t\tString newArticleId = articleIds.get(articleId);\n\n\t\tif (Validator.isNotNull(newArticleId)) {\n\n\t\t\t// A sibling of a different version was already assigned a new\n\t\t\t// article id\n\n\t\t\tarticleId = newArticleId;\n\t\t\tautoArticleId = false;\n\t\t}\n\n\t\tString content = article.getContent();\n\n\t\tElement articleElement =\n\t\t\tportletDataContext.getImportDataStagedModelElement(article);\n\n\t\tcontent = ExportImportHelperUtil.replaceImportContentReferences(\n\t\t\tportletDataContext, articleElement, content, true);\n\n\t\tarticle.setContent(content);\n\n\t\tString newContent = creationStrategy.getTransformedContent(\n\t\t\tportletDataContext, article);\n\n\t\tif (newContent != JournalCreationStrategy.ARTICLE_CONTENT_UNCHANGED) {\n\t\t\tarticle.setContent(newContent);\n\t\t}\n\n\t\tDate displayDate = article.getDisplayDate();\n\n\t\tint displayDateMonth = 0;\n\t\tint displayDateDay = 0;\n\t\tint displayDateYear = 0;\n\t\tint displayDateHour = 0;\n\t\tint displayDateMinute = 0;\n\n\t\tif (displayDate != null) {\n\t\t\tCalendar displayCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\tdisplayCal.setTime(displayDate);\n\n\t\t\tdisplayDateMonth = displayCal.get(Calendar.MONTH);\n\t\t\tdisplayDateDay = displayCal.get(Calendar.DATE);\n\t\t\tdisplayDateYear = displayCal.get(Calendar.YEAR);\n\t\t\tdisplayDateHour = displayCal.get(Calendar.HOUR);\n\t\t\tdisplayDateMinute = displayCal.get(Calendar.MINUTE);\n\n\t\t\tif (displayCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\tdisplayDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tDate expirationDate = article.getExpirationDate();\n\n\t\tint expirationDateMonth = 0;\n\t\tint expirationDateDay = 0;\n\t\tint expirationDateYear = 0;\n\t\tint expirationDateHour = 0;\n\t\tint expirationDateMinute = 0;\n\t\tboolean neverExpire = true;\n\n\t\tif (expirationDate != null) {\n\t\t\tCalendar expirationCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\texpirationCal.setTime(expirationDate);\n\n\t\t\texpirationDateMonth = expirationCal.get(Calendar.MONTH);\n\t\t\texpirationDateDay = expirationCal.get(Calendar.DATE);\n\t\t\texpirationDateYear = expirationCal.get(Calendar.YEAR);\n\t\t\texpirationDateHour = expirationCal.get(Calendar.HOUR);\n\t\t\texpirationDateMinute = expirationCal.get(Calendar.MINUTE);\n\t\t\tneverExpire = false;\n\n\t\t\tif (expirationCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\texpirationDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tDate reviewDate = article.getReviewDate();\n\n\t\tint reviewDateMonth = 0;\n\t\tint reviewDateDay = 0;\n\t\tint reviewDateYear = 0;\n\t\tint reviewDateHour = 0;\n\t\tint reviewDateMinute = 0;\n\t\tboolean neverReview = true;\n\n\t\tif (reviewDate != null) {\n\t\t\tCalendar reviewCal = CalendarFactoryUtil.getCalendar(\n\t\t\t\tuser.getTimeZone());\n\n\t\t\treviewCal.setTime(reviewDate);\n\n\t\t\treviewDateMonth = reviewCal.get(Calendar.MONTH);\n\t\t\treviewDateDay = reviewCal.get(Calendar.DATE);\n\t\t\treviewDateYear = reviewCal.get(Calendar.YEAR);\n\t\t\treviewDateHour = reviewCal.get(Calendar.HOUR);\n\t\t\treviewDateMinute = reviewCal.get(Calendar.MINUTE);\n\t\t\tneverReview = false;\n\n\t\t\tif (reviewCal.get(Calendar.AM_PM) == Calendar.PM) {\n\t\t\t\treviewDateHour += 12;\n\t\t\t}\n\t\t}\n\n\t\tString parentDDMStructureKey = StringPool.BLANK;\n\n\t\tlong ddmStructureId = 0;\n\n\t\tList<Element> structureElements =\n\t\t\tportletDataContext.getReferenceDataElements(\n\t\t\t\tarticle, DDMStructure.class);\n\n\t\tif (!structureElements.isEmpty()) {\n\t\t\tElement structureElement = structureElements.get(0);\n\n\t\t\tString structurePath = structureElement.attributeValue(\"path\");\n\n\t\t\tDDMStructure ddmStructure =\n\t\t\t\t(DDMStructure)portletDataContext.getZipEntryAsObject(\n\t\t\t\t\tstructurePath);\n\n\t\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\t\tportletDataContext, ddmStructure);\n\n\t\t\tMap<String, String> structureKeys =\n\t\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tDDMStructure.class + \".ddmStructureKey\");\n\n\t\t\tparentDDMStructureKey = MapUtil.getString(\n\t\t\t\tstructureKeys, ddmStructure.getStructureKey(),\n\t\t\t\tddmStructure.getStructureKey());\n\t\t}\n\n\t\tString parentDDMTemplateKey = StringPool.BLANK;\n\n\t\tList<Element> ddmTemplateElements =\n\t\t\tportletDataContext.getReferenceDataElements(\n\t\t\t\tarticle, DDMTemplate.class);\n\n\t\tif (!ddmTemplateElements.isEmpty()) {\n\t\t\tElement templateElement = ddmTemplateElements.get(0);\n\n\t\t\tString ddmTemplatePath = templateElement.attributeValue(\"path\");\n\n\t\t\tDDMTemplate ddmTemplate =\n\t\t\t\t(DDMTemplate)portletDataContext.getZipEntryAsObject(\n\t\t\t\t\tddmTemplatePath);\n\n\t\t\tStagedModelDataHandlerUtil.importReferenceStagedModel(\n\t\t\t\tportletDataContext, ddmTemplate);\n\n\t\t\tMap<String, String> ddmTemplateKeys =\n\t\t\t\t(Map<String, String>)portletDataContext.getNewPrimaryKeysMap(\n\t\t\t\t\tDDMTemplate.class + \".ddmTemplateKey\");\n\n\t\t\tparentDDMTemplateKey = MapUtil.getString(\n\t\t\t\tddmTemplateKeys, ddmTemplate.getTemplateKey(),\n\t\t\t\tddmTemplate.getTemplateKey());\n\t\t}\n\n\t\tFile smallFile = null;\n\n\t\ttry {\n\t\t\tif (article.isSmallImage()) {\n\t\t\t\tString smallImagePath = articleElement.attributeValue(\n\t\t\t\t\t\"small-image-path\");\n\n\t\t\t\tif (Validator.isNotNull(article.getSmallImageURL())) {\n\t\t\t\t\tString smallImageURL =\n\t\t\t\t\t\tExportImportHelperUtil.replaceImportContentReferences(\n\t\t\t\t\t\t\tportletDataContext, articleElement,\n\t\t\t\t\t\t\tarticle.getSmallImageURL(), true);\n\n\t\t\t\t\tarticle.setSmallImageURL(smallImageURL);\n\t\t\t\t}\n\t\t\t\telse if (Validator.isNotNull(smallImagePath)) {\n\t\t\t\t\tbyte[] bytes = portletDataContext.getZipEntryAsByteArray(\n\t\t\t\t\t\tsmallImagePath);\n\n\t\t\t\t\tif (bytes != null) {\n\t\t\t\t\t\tsmallFile = FileUtil.createTempFile(\n\t\t\t\t\t\t\tarticle.getSmallImageType());\n\n\t\t\t\t\t\tFileUtil.write(smallFile, bytes);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tMap<String, byte[]> images = new HashMap<String, byte[]>();\n\n\t\t\tList<Element> imagesElements =\n\t\t\t\tportletDataContext.getReferenceDataElements(\n\t\t\t\t\tarticle, Image.class);\n\n\t\t\tfor (Element imageElement : imagesElements) {\n\t\t\t\tString imagePath = imageElement.attributeValue(\"path\");\n\n\t\t\t\tString fileName = imageElement.attributeValue(\"file-name\");\n\n\t\t\t\timages.put(\n\t\t\t\t\tfileName,\n\t\t\t\t\tportletDataContext.getZipEntryAsByteArray(imagePath));\n\t\t\t}\n\n\t\t\tString articleURL = null;\n\n\t\t\tboolean addGroupPermissions = creationStrategy.addGroupPermissions(\n\t\t\t\tportletDataContext, article);\n\t\t\tboolean addGuestPermissions = creationStrategy.addGuestPermissions(\n\t\t\t\tportletDataContext, article);\n\n\t\t\tServiceContext serviceContext =\n\t\t\t\tportletDataContext.createServiceContext(\n\t\t\t\t\tarticle, JournalPortletDataHandler.NAMESPACE);\n\n\t\t\tserviceContext.setAddGroupPermissions(addGroupPermissions);\n\t\t\tserviceContext.setAddGuestPermissions(addGuestPermissions);\n\n\t\t\tif (article.getStatus() != WorkflowConstants.STATUS_APPROVED) {\n\t\t\t\tserviceContext.setWorkflowAction(\n\t\t\t\t\tWorkflowConstants.ACTION_SAVE_DRAFT);\n\t\t\t}\n\n\t\t\tJournalArticle importedArticle = null;\n\n\t\t\tString articleResourceUuid = articleElement.attributeValue(\n\t\t\t\t\"article-resource-uuid\");\n\n\t\t\tif (portletDataContext.isDataStrategyMirror()) {\n\t\t\t\tJournalArticleResource articleResource =\n\t\t\t\t\tJournalArticleResourceLocalServiceUtil.\n\t\t\t\t\t\tfetchJournalArticleResourceByUuidAndGroupId(\n\t\t\t\t\t\t\tarticleResourceUuid,\n\t\t\t\t\t\t\tportletDataContext.getScopeGroupId());\n\n\t\t\t\tserviceContext.setUuid(articleResourceUuid);\n\t\t\t\tserviceContext.setAttribute(\"urlTitle\", article.getUrlTitle());\n\n\t\t\t\tJournalArticle existingArticle = null;\n\n\t\t\t\tif (articleResource != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\texistingArticle =\n\t\t\t\t\t\t\tJournalArticleLocalServiceUtil.getLatestArticle(\n\t\t\t\t\t\t\t\tarticleResource.getResourcePrimKey(),\n\t\t\t\t\t\t\t\tWorkflowConstants.STATUS_ANY, false);\n\t\t\t\t\t}\n\t\t\t\t\tcatch (NoSuchArticleException nsae) {\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (existingArticle == null) {\n\t\t\t\t\texistingArticle =\n\t\t\t\t\t\tJournalArticleLocalServiceUtil.fetchArticle(\n\t\t\t\t\t\t\tportletDataContext.getScopeGroupId(), newArticleId,\n\t\t\t\t\t\t\tarticle.getVersion());\n\t\t\t\t}\n\n\t\t\t\tif (existingArticle == null) {\n\t\t\t\t\timportedArticle =\n\t\t\t\t\t\tJournalArticleLocalServiceUtil.addArticle(\n\t\t\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(),\n\t\t\t\t\t\t\tfolderId, article.getClassNameId(), ddmStructureId,\n\t\t\t\t\t\t\tarticleId, autoArticleId, article.getVersion(),\n\t\t\t\t\t\t\tarticle.getTitleMap(), article.getDescriptionMap(),\n\t\t\t\t\t\t\tarticle.getContent(), article.getType(),\n\t\t\t\t\t\t\tparentDDMStructureKey, parentDDMTemplateKey,\n\t\t\t\t\t\t\tarticle.getLayoutUuid(), displayDateMonth,\n\t\t\t\t\t\t\tdisplayDateDay, displayDateYear, displayDateHour,\n\t\t\t\t\t\t\tdisplayDateMinute, expirationDateMonth,\n\t\t\t\t\t\t\texpirationDateDay, expirationDateYear,\n\t\t\t\t\t\t\texpirationDateHour, expirationDateMinute,\n\t\t\t\t\t\t\tneverExpire, reviewDateMonth, reviewDateDay,\n\t\t\t\t\t\t\treviewDateYear, reviewDateHour, reviewDateMinute,\n\t\t\t\t\t\t\tneverReview, article.isIndexable(),\n\t\t\t\t\t\t\tarticle.isSmallImage(), article.getSmallImageURL(),\n\t\t\t\t\t\t\tsmallFile, images, articleURL, serviceContext);\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\timportedArticle =\n\t\t\t\t\t\tJournalArticleLocalServiceUtil.updateArticle(\n\t\t\t\t\t\t\tuserId, existingArticle.getGroupId(), folderId,\n\t\t\t\t\t\t\texistingArticle.getArticleId(),\n\t\t\t\t\t\t\tarticle.getVersion(), article.getTitleMap(),\n\t\t\t\t\t\t\tarticle.getDescriptionMap(), article.getContent(),\n\t\t\t\t\t\t\tarticle.getType(), parentDDMStructureKey,\n\t\t\t\t\t\t\tparentDDMTemplateKey, article.getLayoutUuid(),\n\t\t\t\t\t\t\tdisplayDateMonth, displayDateDay, displayDateYear,\n\t\t\t\t\t\t\tdisplayDateHour, displayDateMinute,\n\t\t\t\t\t\t\texpirationDateMonth, expirationDateDay,\n\t\t\t\t\t\t\texpirationDateYear, expirationDateHour,\n\t\t\t\t\t\t\texpirationDateMinute, neverExpire, reviewDateMonth,\n\t\t\t\t\t\t\treviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\t\t\t\treviewDateMinute, neverReview,\n\t\t\t\t\t\t\tarticle.isIndexable(), article.isSmallImage(),\n\t\t\t\t\t\t\tarticle.getSmallImageURL(), smallFile, images,\n\t\t\t\t\t\t\tarticleURL, serviceContext);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\timportedArticle = JournalArticleLocalServiceUtil.addArticle(\n\t\t\t\t\tuserId, portletDataContext.getScopeGroupId(), folderId,\n\t\t\t\t\tarticle.getClassNameId(), ddmStructureId, articleId,\n\t\t\t\t\tautoArticleId, article.getVersion(), article.getTitleMap(),\n\t\t\t\t\tarticle.getDescriptionMap(), article.getContent(),\n\t\t\t\t\tarticle.getType(), parentDDMStructureKey,\n\t\t\t\t\tparentDDMTemplateKey, article.getLayoutUuid(),\n\t\t\t\t\tdisplayDateMonth, displayDateDay, displayDateYear,\n\t\t\t\t\tdisplayDateHour, displayDateMinute, expirationDateMonth,\n\t\t\t\t\texpirationDateDay, expirationDateYear, expirationDateHour,\n\t\t\t\t\texpirationDateMinute, neverExpire, reviewDateMonth,\n\t\t\t\t\treviewDateDay, reviewDateYear, reviewDateHour,\n\t\t\t\t\treviewDateMinute, neverReview, article.isIndexable(),\n\t\t\t\t\tarticle.isSmallImage(), article.getSmallImageURL(),\n\t\t\t\t\tsmallFile, images, articleURL, serviceContext);\n\t\t\t}\n\n\t\t\tportletDataContext.importClassedModel(\n\t\t\t\tarticle, importedArticle, JournalPortletDataHandler.NAMESPACE);\n\n\t\t\tif (Validator.isNull(newArticleId)) {\n\t\t\t\tarticleIds.put(\n\t\t\t\t\tarticle.getArticleId(), importedArticle.getArticleId());\n\t\t\t}\n\t\t}\n\t\tfinally {\n\t\t\tif (smallFile != null) {\n\t\t\t\tsmallFile.delete();\n\t\t\t}\n\t\t}\n\t}","commit_id":"02d2f979245a750962738cb65881d32f199a5e8e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"/**\n     * @see org.opencms.gwt.I_CmsClientMessageBundle#export(java.util.Locale)\n     */\n    public String export(Locale locale) {\n\n        JSONObject keys = new JSONObject();\n        try {\n            ResourceBundle resourceBundle = CmsResourceBundleLoader.getBundle(getBundleName(), locale);\n            Enumeration<String> bundleKeys = resourceBundle.getKeys();\n            while (bundleKeys.hasMoreElements()) {\n                String bundleKey = bundleKeys.nextElement();\n                String value = resourceBundle.getString(bundleKey);\n                if (value.startsWith(IMPORT_PREFIX)) {\n                    String importKey = value.replace(IMPORT_PREFIX, \"\");\n                    String importedValue = importMessage(importKey, locale);\n                    if (importedValue != null) {\n                        value = importedValue;\n                    }\n                }\n                keys.put(bundleKey, value);\n            }\n        } catch (Throwable e) {\n            LOG.error(e.getLocalizedMessage(), e);\n            try {\n                keys.put(\"error\", e.getLocalizedMessage());\n            } catch (JSONException e1) {\n                // ignore, should never happen\n                LOG.error(e1.getLocalizedMessage(), e1);\n            }\n        }\n        return getBundleName().replace('.', '_') + \"=\" + keys.toString() + \";\";\n    }","id":96198,"modified_method":"/**\n     * @see org.opencms.gwt.I_CmsClientMessageBundle#export(java.util.Locale)\n     */\n    public String export(Locale locale) {\n\n        JSONObject keys = new JSONObject();\n        try {\n            ResourceBundle resourceBundle = CmsResourceBundleLoader.getBundle(getBundleName(), locale);\n            Enumeration<String> bundleKeys = resourceBundle.getKeys();\n            while (bundleKeys.hasMoreElements()) {\n                String bundleKey = bundleKeys.nextElement();\n                String value = resourceBundle.getString(bundleKey);\n                if (value.startsWith(IMPORT_PREFIX)) {\n                    String importKey = value.replace(IMPORT_PREFIX, \"\");\n                    String importedValue = importMessage(importKey, locale);\n                    if (importedValue != null) {\n                        value = importedValue;\n                    }\n                }\n                keys.put(bundleKey, value);\n            }\n        } catch (Throwable e) {\n            LOG.error(e.getLocalizedMessage(), e);\n            try {\n                keys.put(\"error\", e.getLocalizedMessage());\n            } catch (JSONException e1) {\n                // ignore, should never happen\n                LOG.error(e1.getLocalizedMessage(), e1);\n            }\n        }\n        StringBuffer sb = new StringBuffer();\n        sb.append(getBundleName().replace('.', '_')).append(\"=\").append(keys.toString()).append(\";\");\n        CmsGwtActionElement.wrapScript(sb);\n        return sb.toString();\n    }","commit_id":"2b024077944df13cb9f4190e7ba7ab26ee6312f6","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.gwt.CmsGwtActionElement#export()\n     */\n    @Override\n    public String export() throws Exception {\n\n        StringBuffer sb = new StringBuffer();\n        sb.append(ClientMessages.get().export(getRequest()));\n        sb.append(org.opencms.gwt.seo.ClientMessages.get().export(getRequest()));\n        String prefetchedData = serializeForJavascript(\n            I_CmsContainerpageService.class.getMethod(\"prefetch\"),\n            getCntPageData());\n        sb.append(CmsCntPageData.DICT_NAME).append(\"='\").append(prefetchedData).append(\"';\");\n        sb.append(CmsContainer.KEY_CONTAINER_DATA).append(\"= new Array();\");\n        return wrapScript(sb).toString();\n    }","id":96199,"modified_method":"/**\n     * @see org.opencms.gwt.CmsGwtActionElement#export()\n     */\n    @Override\n    public String export() throws Exception {\n\n        StringBuffer sb = new StringBuffer();\n        sb.append(CmsContainer.KEY_CONTAINER_DATA).append(\"= new Array();\");\n        wrapScript(sb);\n        sb.append(ClientMessages.get().export(getRequest()));\n        sb.append(org.opencms.gwt.seo.ClientMessages.get().export(getRequest()));\n        String prefetchedData = exportDictionary(\n            CmsCntPageData.DICT_NAME,\n            I_CmsContainerpageService.class.getMethod(\"prefetch\"),\n            getCntPageData());\n        sb.append(prefetchedData);\n        return sb.toString();\n    }","commit_id":"2b024077944df13cb9f4190e7ba7ab26ee6312f6","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\r\n     * @see org.opencms.gwt.CmsGwtActionElement#export()\r\n     */\r\n    @Override\r\n    public String export() throws Exception {\r\n\r\n        StringBuffer sb = new StringBuffer();\r\n        sb.append(ClientMessages.get().export(getRequest()));\r\n        wrapScript(sb);\r\n        return sb.toString();\r\n    }","id":96200,"modified_method":"/**\r\n     * @see org.opencms.gwt.CmsGwtActionElement#export()\r\n     */\r\n    @Override\r\n    public String export() throws Exception {\r\n\r\n        return ClientMessages.get().export(getRequest());\r\n    }","commit_id":"2b024077944df13cb9f4190e7ba7ab26ee6312f6","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\r\n     * Returns the prefetch data include.<p>\r\n     * \r\n     * @return the prefetch data include\r\n     *  \r\n     * @throws Exception if something goes wrong\r\n     */\r\n    private String getPrefetch() throws Exception {\r\n\r\n        CmsContentDefinition definition = CmsContentService.newInstance(getRequest()).prefetch();\r\n        StringBuffer sb = new StringBuffer();\r\n        String prefetchedData = serializeForJavascript(I_CmsContentService.class.getMethod(\"prefetch\"), definition);\r\n        sb.append(I_CmsContentService.DICT_CONTENT_DEFINITION).append(\"='\").append(prefetchedData).append(\"';\\n\");\r\n        String backlink = getRequest().getParameter(CmsEditor.PARAM_BACKLINK);\r\n        if (CmsStringUtil.isEmptyOrWhitespaceOnly(backlink)) {\r\n            backlink = link(CmsFrameset.JSP_WORKPLACE_URI);\r\n        } else {\r\n            backlink = link(backlink);\r\n        }\r\n        sb.append(I_CmsContentService.PARAM_BACKLINK).append(\"='\").append(backlink).append(\"';\\n\");\r\n        wrapScript(sb);\r\n        addExternalResourceTags(sb, definition);\r\n        return sb.toString();\r\n    }","id":96201,"modified_method":"/**\r\n     * Returns the prefetch data include.<p>\r\n     * \r\n     * @return the prefetch data include\r\n     *  \r\n     * @throws Exception if something goes wrong\r\n     */\r\n    private String getPrefetch() throws Exception {\r\n\r\n        CmsContentDefinition definition = CmsContentService.newInstance(getRequest()).prefetch();\r\n        StringBuffer sb = new StringBuffer();\r\n        String backlink = getRequest().getParameter(CmsEditor.PARAM_BACKLINK);\r\n        if (CmsStringUtil.isEmptyOrWhitespaceOnly(backlink)) {\r\n            backlink = link(CmsFrameset.JSP_WORKPLACE_URI);\r\n        } else {\r\n            backlink = link(backlink);\r\n        }\r\n        sb.append(I_CmsContentService.PARAM_BACKLINK).append(\"='\").append(backlink).append(\"';\\n\");\r\n        wrapScript(sb);\r\n        String prefetchedData = exportDictionary(\r\n            I_CmsContentService.DICT_CONTENT_DEFINITION,\r\n            I_CmsContentService.class.getMethod(\"prefetch\"),\r\n            definition);\r\n        sb.append(prefetchedData);\r\n        addExternalResourceTags(sb, definition);\r\n        return sb.toString();\r\n    }","commit_id":"2b024077944df13cb9f4190e7ba7ab26ee6312f6","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\r\n     * @see org.opencms.gwt.CmsGwtActionElement#exportAll()\r\n     */\r\n    @Override\r\n    public String exportAll() throws Exception {\r\n\r\n        StringBuffer sb = new StringBuffer();\r\n        sb.append(getPrefetch());\r\n        sb.append(super.export());\r\n        sb.append(new CmsGalleryActionElement(null, getRequest(), null).exportWidget());\r\n        sb.append(export());\r\n        sb.append(createNoCacheScript(MODULE_NAME));\r\n        return sb.toString();\r\n    }","id":96202,"modified_method":"/**\r\n     * @see org.opencms.gwt.CmsGwtActionElement#exportAll()\r\n     */\r\n    @Override\r\n    public String exportAll() throws Exception {\r\n\r\n        StringBuffer sb = new StringBuffer();\r\n        sb.append(getPrefetch());\r\n        sb.append(super.export());\r\n        sb.append(new CmsGalleryActionElement(null, getRequest(), null).exportWidget());\r\n        sb.append(new CmsUploadActionElement(getJspContext(), getRequest(), getResponse()).export());\r\n        sb.append(export());\r\n        sb.append(createNoCacheScript(MODULE_NAME));\r\n        return sb.toString();\r\n    }","commit_id":"2b024077944df13cb9f4190e7ba7ab26ee6312f6","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Exports the gallery messages for widget use.<p>\n     * \n     * @return the gallery messages\n     */\n    public String exportWidget() {\n\n        StringBuffer sb = new StringBuffer();\n        sb.append(ClientMessages.get().export(getRequest()));\n        wrapScript(sb);\n        return sb.toString();\n    }","id":96203,"modified_method":"/**\n     * Exports the gallery messages for widget use.<p>\n     * \n     * @return the gallery messages\n     */\n    public String exportWidget() {\n\n        return ClientMessages.get().export(getRequest());\n    }","commit_id":"2b024077944df13cb9f4190e7ba7ab26ee6312f6","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the serialized initial data for gallery dialog depending on the given mode.<p>\n     * \n     * @param galleryMode the gallery mode\n     * \n     * @return the data\n     * \n     * @throws Exception if something goes wrong\n     */\n    private String export(GalleryMode galleryMode) throws Exception {\n\n        CmsGalleryService galleryService = CmsGalleryService.newInstance(getRequest());\n        CmsGalleryDataBean data = galleryService.getInitialSettings(\n            galleryMode,\n            getRequest().getParameter(ReqParam.resource.name()),\n            getRequest().getParameter(ReqParam.gallerypath.name()),\n            getRequest().getParameter(ReqParam.currentelement.name()),\n            getRequest().getParameter(ReqParam.types.name()),\n            getRequest().getParameter(ReqParam.gallerytypes.name()));\n        CmsGallerySearchBean search = null;\n        if (GalleryTabId.cms_tab_results.equals(data.getStartTab())) {\n            search = galleryService.getSearch(data);\n        }\n        if ((search != null) && (search.getScope() != null) && (search.getScope() != data.getScope())) {\n            // default selected scope option should be the one for which the search has been actually performed \n            data.setScope(search.getScope());\n        } else if ((search != null) && (search.getScope() == null)) {\n            data.setScope(CmsGallerySearchScope.everything);\n        }\n\n        StringBuffer sb = new StringBuffer();\n        sb.append(ClientMessages.get().export(getRequest()));\n        sb.append(CmsGalleryDataBean.DICT_NAME).append(\"='\");\n        sb.append(serializeForJavascript(I_CmsGalleryService.class.getMethod(\n            \"getInitialSettings\",\n            GalleryMode.class,\n            String.class,\n            String.class,\n            String.class,\n            String.class,\n            String.class), data));\n        sb.append(\"';\");\n        sb.append(CmsGallerySearchBean.DICT_NAME).append(\"='\").append(\n            serializeForJavascript(I_CmsGalleryService.class.getMethod(\"getSearch\", CmsGalleryDataBean.class), search));\n        sb.append(\"';\");\n        wrapScript(sb);\n        return sb.toString();\n    }","id":96204,"modified_method":"/**\n     * Returns the serialized initial data for gallery dialog depending on the given mode.<p>\n     * \n     * @param galleryMode the gallery mode\n     * \n     * @return the data\n     * \n     * @throws Exception if something goes wrong\n     */\n    private String export(GalleryMode galleryMode) throws Exception {\n\n        CmsGalleryService galleryService = CmsGalleryService.newInstance(getRequest());\n        CmsGalleryDataBean data = galleryService.getInitialSettings(\n            galleryMode,\n            getRequest().getParameter(ReqParam.resource.name()),\n            getRequest().getParameter(ReqParam.gallerypath.name()),\n            getRequest().getParameter(ReqParam.currentelement.name()),\n            getRequest().getParameter(ReqParam.types.name()),\n            getRequest().getParameter(ReqParam.gallerytypes.name()));\n        CmsGallerySearchBean search = null;\n        if (GalleryTabId.cms_tab_results.equals(data.getStartTab())) {\n            search = galleryService.getSearch(data);\n        }\n        if ((search != null) && (search.getScope() != null) && (search.getScope() != data.getScope())) {\n            // default selected scope option should be the one for which the search has been actually performed \n            data.setScope(search.getScope());\n        } else if ((search != null) && (search.getScope() == null)) {\n            data.setScope(CmsGallerySearchScope.everything);\n        }\n\n        StringBuffer sb = new StringBuffer();\n        sb.append(ClientMessages.get().export(getRequest()));\n        sb.append(exportDictionary(CmsGalleryDataBean.DICT_NAME, I_CmsGalleryService.class.getMethod(\n            \"getInitialSettings\",\n            GalleryMode.class,\n            String.class,\n            String.class,\n            String.class,\n            String.class,\n            String.class), data));\n        sb.append(exportDictionary(\n            CmsGallerySearchBean.DICT_NAME,\n            I_CmsGalleryService.class.getMethod(\"getSearch\", CmsGalleryDataBean.class),\n            search));\n        return sb.toString();\n    }","commit_id":"2b024077944df13cb9f4190e7ba7ab26ee6312f6","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Returns the serialized data for the core provider wrapped into a script tag.<p>\n     * \n     * @param iconCssClassPrefix the prefix for icon css class rules \n     * \n     * @return the data\n     * \n     * @throws Exception if something goes wrong\n     */\n    public String export(String iconCssClassPrefix) throws Exception {\n\n        // determine the workplace locale\n        String wpLocale = OpenCms.getWorkplaceManager().getWorkplaceLocale(getCmsObject()).getLanguage();\n        if (CmsStringUtil.isEmptyOrWhitespaceOnly(wpLocale)) {\n            // if no locale was found, take English as locale\n            wpLocale = Locale.ENGLISH.getLanguage();\n        }\n        StringBuffer sb = new StringBuffer();\n        String prefetchedData = serializeForJavascript(I_CmsCoreService.class.getMethod(\"prefetch\"), getCoreData());\n        sb.append(CmsCoreData.DICT_NAME).append(\"='\").append(prefetchedData).append(\"';\");\n        sb.append(ClientMessages.get().export(getRequest()));\n        wrapScript(sb);\n        sb.append(\"<style type=\\\"text/css\\\">\\n @import url(\\\"\").append(iconCssLink(iconCssClassPrefix)).append(\n            \"\\\");\\n<\/style>\\n\");\n        // append the workplace locale information\n        sb.append(\"<meta name=\\\"gwt:property\\\" content=\\\"locale=\").append(wpLocale).append(\"\\\" />\\n\");\n        // TODO: remove when GWT is compatible to IE10\n        // append meta tag to set the IE10 to IE9 compatibility mode\n        sb.append(\"<meta name=\\\"X-UA-Compatible\\\" content=\\\"IE=9; chrome=1\\\">\");\n        return sb.toString();\n    }","id":96205,"modified_method":"/**\n     * Returns the serialized data for the core provider wrapped into a script tag.<p>\n     * \n     * @param iconCssClassPrefix the prefix for icon css class rules \n     * \n     * @return the data\n     * \n     * @throws Exception if something goes wrong\n     */\n    public String export(String iconCssClassPrefix) throws Exception {\n\n        // determine the workplace locale\n        String wpLocale = OpenCms.getWorkplaceManager().getWorkplaceLocale(getCmsObject()).getLanguage();\n        if (CmsStringUtil.isEmptyOrWhitespaceOnly(wpLocale)) {\n            // if no locale was found, take English as locale\n            wpLocale = Locale.ENGLISH.getLanguage();\n        }\n        StringBuffer sb = new StringBuffer();\n        String prefetchedData = exportDictionary(\n            CmsCoreData.DICT_NAME,\n            I_CmsCoreService.class.getMethod(\"prefetch\"),\n            getCoreData());\n        sb.append(prefetchedData);\n        sb.append(ClientMessages.get().export(getRequest()));\n\n        sb.append(\"<style type=\\\"text/css\\\">\\n @import url(\\\"\").append(iconCssLink(iconCssClassPrefix)).append(\n            \"\\\");\\n<\/style>\\n\");\n        // append the workplace locale information\n        sb.append(\"<meta name=\\\"gwt:property\\\" content=\\\"locale=\").append(wpLocale).append(\"\\\" />\\n\");\n        // TODO: remove when GWT is compatible to IE10\n        // append meta tag to set the IE10 to IE9 compatibility mode\n        sb.append(\"<meta name=\\\"X-UA-Compatible\\\" content=\\\"IE=9; chrome=1\\\">\");\n        return sb.toString();\n    }","commit_id":"2b024077944df13cb9f4190e7ba7ab26ee6312f6","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Serializes the result of the given method for RPC-prefetching.<p>\n     * \n     * @param method the method\n     * @param data the result to serialize\n     * \n     * @return the serialized data\n     * \n     * @throws SerializationException if something goes wrong\n     */\n    public static String serialize(Method method, Object data) throws SerializationException {\n\n        String result = RPC.encodeResponseForSuccess(method, data, CmsPrefetchSerializationPolicy.instance());\n        return result;\n    }","id":96206,"modified_method":"/**\n     * Serializes the result of the given method for RPC-prefetching.<p>\n     * \n     * @param method the method\n     * @param data the result to serialize\n     * \n     * @return the serialized data\n     * \n     * @throws SerializationException if something goes wrong\n     */\n    public static String serialize(Method method, Object data) throws SerializationException {\n\n        String result = RPC.encodeResponseForSuccess(method, data, CmsPrefetchSerializationPolicy.instance());\n        result = CmsEncoder.escapeXml(result, true);\n        return result;\n    }","commit_id":"2b024077944df13cb9f4190e7ba7ab26ee6312f6","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Wraps the given buffer with surrounding script tags.<p> \n     * \n     * @param sb the string buffer to wrap\n     * \n     * @return the string buffer\n     */\n    protected StringBuffer wrapScript(StringBuffer sb) {\n\n        sb.insert(0, SCRIPT_TAG_OPEN);\n        sb.append(SCRIPT_TAG_CLOSE).append(\"\\n\");\n        return sb;\n    }","id":96207,"modified_method":"/**\n     * Wraps the given buffer with surrounding script tags.<p> \n     * \n     * @param sb the string buffer to wrap\n     * \n     * @return the string buffer\n     */\n    public static StringBuffer wrapScript(StringBuffer sb) {\n\n        sb.insert(0, SCRIPT_TAG_OPEN);\n        sb.append(SCRIPT_TAG_CLOSE).append(\"\\n\");\n        return sb;\n    }","commit_id":"2b024077944df13cb9f4190e7ba7ab26ee6312f6","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * Prints the opening element wrapper tag for the container page editor if we are in Offline mode.<p>\n     *  \n     * @param isOnline true if we are in Online mode \n     * @param cms the Cms context \n     * @param elementBean the element bean \n     * @param isGroupContainer true if the element is a group-container \n     * \n     * @throws Exception if something goes wrong\n     */\n    protected void printElementWrapperTagStart(\n        boolean isOnline,\n        CmsObject cms,\n        CmsContainerElementBean elementBean,\n        boolean isGroupContainer) throws Exception {\n\n        if (!isOnline) {\n            StringBuffer result = new StringBuffer(\"<div class='\");\n            if (isGroupContainer) {\n                result.append(CmsContainerElement.CLASS_GROUP_CONTAINER_ELEMENT_MARKER);\n            } else {\n                result.append(CmsContainerElement.CLASS_CONTAINER_ELEMENT_START_MARKER);\n            }\n            String serializedElement = getElementInfo(cms, elementBean);\n            result.append(\"'\");\n            String data = CmsEncoder.escapeXml(serializedElement);\n            result.append(\" rel='\").append(data);\n            if (isGroupContainer) {\n                result.append(\"'>\");\n            } else {\n                result.append(\"' style='display:none;'><\/div>\");\n            }\n            pageContext.getOut().print(result);\n        }\n    }","id":96208,"modified_method":"/**\n     * Prints the opening element wrapper tag for the container page editor if we are in Offline mode.<p>\n     *  \n     * @param isOnline true if we are in Online mode \n     * @param cms the Cms context \n     * @param elementBean the element bean \n     * @param isGroupContainer true if the element is a group-container \n     * \n     * @throws Exception if something goes wrong\n     */\n    protected void printElementWrapperTagStart(\n        boolean isOnline,\n        CmsObject cms,\n        CmsContainerElementBean elementBean,\n        boolean isGroupContainer) throws Exception {\n\n        if (!isOnline) {\n            StringBuffer result = new StringBuffer(\"<div class='\");\n            if (isGroupContainer) {\n                result.append(CmsContainerElement.CLASS_GROUP_CONTAINER_ELEMENT_MARKER);\n            } else {\n                result.append(CmsContainerElement.CLASS_CONTAINER_ELEMENT_START_MARKER);\n            }\n            String serializedElement = getElementInfo(cms, elementBean);\n            result.append(\"'\");\n            result.append(\" rel='\").append(serializedElement);\n            if (isGroupContainer) {\n                result.append(\"'>\");\n            } else {\n                result.append(\"' style='display:none;'><\/div>\");\n            }\n            pageContext.getOut().print(result);\n        }\n    }","commit_id":"2b024077944df13cb9f4190e7ba7ab26ee6312f6","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\r\n     * @see org.opencms.gwt.CmsGwtActionElement#export()\r\n     */\r\n    @Override\r\n    public String export() throws Exception {\r\n\r\n        StringBuffer sb = new StringBuffer();\r\n        String prefetchedData = serialize(I_CmsPostUploadDialogService.class.getMethod(\"prefetch\"), getDialogData());\r\n        sb.append(CmsPostUploadDialogBean.DICT_NAME).append(\"='\").append(prefetchedData).append(\"';\");\r\n        sb.append(ClientMessages.get().export(getRequest()));\r\n        wrapScript(sb);\r\n        return sb.toString();\r\n    }","id":96209,"modified_method":"/**\r\n     * @see org.opencms.gwt.CmsGwtActionElement#export()\r\n     */\r\n    @Override\r\n    public String export() throws Exception {\r\n\r\n        StringBuffer sb = new StringBuffer();\r\n        String prefetchedData = exportDictionary(\r\n            CmsPostUploadDialogBean.DICT_NAME,\r\n            I_CmsPostUploadDialogService.class.getMethod(\"prefetch\"),\r\n            getDialogData());\r\n        sb.append(prefetchedData);\r\n        sb.append(ClientMessages.get().export(getRequest()));\r\n        return sb.toString();\r\n    }","commit_id":"2b024077944df13cb9f4190e7ba7ab26ee6312f6","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.gwt.CmsGwtActionElement#exportAll()\n     */\n    @Override\n    public String exportAll() throws Exception {\n\n        StringBuffer sb = new StringBuffer();\n\n        CmsPublishData initData = CmsPublishService.newInstance(getRequest()).getInitData();\n        String prefetchedData = serializeForJavascript(I_CmsPublishService.class.getMethod(\"getInitData\"), initData);\n        sb.append(CmsPublishData.DICT_NAME).append(\"='\").append(prefetchedData).append(\"';\");\n        wrapScript(sb);\n        sb.append(super.export());\n        sb.append(export());\n        sb.append(createNoCacheScript(MODULE_NAME));\n        return sb.toString();\n    }","id":96210,"modified_method":"/**\n     * @see org.opencms.gwt.CmsGwtActionElement#exportAll()\n     */\n    @Override\n    public String exportAll() throws Exception {\n\n        StringBuffer sb = new StringBuffer();\n\n        CmsPublishData initData = CmsPublishService.newInstance(getRequest()).getInitData();\n        String prefetchedData = exportDictionary(\n            CmsPublishData.DICT_NAME,\n            I_CmsPublishService.class.getMethod(\"getInitData\"),\n            initData);\n        sb.append(prefetchedData);\n        sb.append(super.export());\n        sb.append(export());\n        sb.append(createNoCacheScript(MODULE_NAME));\n        return sb.toString();\n    }","commit_id":"2b024077944df13cb9f4190e7ba7ab26ee6312f6","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.gwt.CmsGwtActionElement#export()\n     */\n    @Override\n    public String export() throws Exception {\n\n        StringBuffer sb = new StringBuffer();\n        sb.append(ClientMessages.get().export(getRequest()));\n        return wrapScript(sb).toString();\n    }","id":96211,"modified_method":"/**\n     * @see org.opencms.gwt.CmsGwtActionElement#export()\n     */\n    @Override\n    public String export() throws Exception {\n\n        StringBuffer sb = new StringBuffer();\n        sb.append(ClientMessages.get().export(getRequest()));\n        return sb.toString();\n    }","commit_id":"2b024077944df13cb9f4190e7ba7ab26ee6312f6","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.gwt.CmsGwtActionElement#export()\n     */\n    @Override\n    public String export() throws Exception {\n\n        StringBuffer sb = new StringBuffer();\n        String prefetchedData = serializeForJavascript(\n            I_CmsSitemapService.class.getMethod(\"prefetch\", String.class),\n            getSitemapData());\n        sb.append(CmsSitemapData.DICT_NAME).append(\"='\").append(prefetchedData).append(\"';\");\n        sb.append(ClientMessages.get().export(getRequest()));\n        sb.append(org.opencms.gwt.seo.ClientMessages.get().export(getRequest()));\n        return wrapScript(sb).toString();\n    }","id":96212,"modified_method":"/**\n     * @see org.opencms.gwt.CmsGwtActionElement#export()\n     */\n    @Override\n    public String export() throws Exception {\n\n        StringBuffer sb = new StringBuffer();\n        String prefetchedData = exportDictionary(\n            CmsSitemapData.DICT_NAME,\n            I_CmsSitemapService.class.getMethod(\"prefetch\", String.class),\n            getSitemapData());\n        sb.append(prefetchedData);\n        sb.append(ClientMessages.get().export(getRequest()));\n        sb.append(org.opencms.gwt.seo.ClientMessages.get().export(getRequest()));\n        return sb.toString();\n    }","commit_id":"2b024077944df13cb9f4190e7ba7ab26ee6312f6","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n     * @see org.opencms.gwt.CmsGwtActionElement#export()\n     */\n    @Override\n    public String export() throws Exception {\n\n        StringBuffer sb = new StringBuffer();\n        String prefetchedData = serializeForJavascript(I_CmsUploadService.class.getMethod(\"prefetch\"), getUploadData());\n        sb.append(CmsUploadData.DICT_NAME).append(\"='\").append(prefetchedData).append(\"';\");\n        sb.append(ClientMessages.get().export(getRequest()));\n        wrapScript(sb);\n        return sb.toString();\n    }","id":96213,"modified_method":"/**\n     * @see org.opencms.gwt.CmsGwtActionElement#export()\n     */\n    @Override\n    public String export() throws Exception {\n\n        StringBuffer sb = new StringBuffer();\n        String prefetchedData = exportDictionary(\n            CmsUploadData.DICT_NAME,\n            I_CmsUploadService.class.getMethod(\"prefetch\"),\n            getUploadData());\n        sb.append(prefetchedData);\n        sb.append(ClientMessages.get().export(getRequest()));\n        return sb.toString();\n    }","commit_id":"2b024077944df13cb9f4190e7ba7ab26ee6312f6","url":"https://github.com/alkacon/opencms-core"},{"original_method":"public final synchronized String[] getLogLines(final boolean reversed, int lineCount) {\r\n\r\n        if ((lineCount > GuiHandler.count)||(lineCount < 0)) lineCount = GuiHandler.count;\r\n\r\n        final List<String> logMessages = new ArrayList<String>(GuiHandler.count);\r\n        final Formatter logFormatter = getFormatter();\r\n\r\n        try {\r\n            final int theStart = (reversed) ? GuiHandler.start+GuiHandler.count-1 : GuiHandler.start+GuiHandler.count-lineCount;\r\n            LogRecord record=null;\r\n            for (int i = 0; i < lineCount; i++) {\r\n                final int ix = (reversed) ?\r\n                    Math.abs((theStart-i)%GuiHandler.buffer.length) :\r\n                    (theStart + i) % GuiHandler.buffer.length;\r\n                record = GuiHandler.buffer[ix];\r\n                logMessages.add(logFormatter.format(record));\r\n            }\r\n            return logMessages.toArray(new String[logMessages.size()]);\r\n        } catch (final Exception ex) {\r\n            // We don't want to throw an exception here, but we\r\n            // report the exception to any registered ErrorManager.\r\n            reportError(null, ex, ErrorManager.FORMAT_FAILURE);\r\n            return new String[]{\"Error while formatting the logging message\"};\r\n        }\r\n    }","id":96214,"modified_method":"public final synchronized String[] getLogLines(final boolean reversed, int lineCount) {\r\n        if (lineCount > GuiHandler.count || lineCount < 0) lineCount = GuiHandler.count;\r\n        final List<String> logMessages = new ArrayList<String>(GuiHandler.count);\r\n        try {\r\n            final int theStart = (reversed) ? GuiHandler.start + GuiHandler.count - 1 : GuiHandler.start + GuiHandler.count - lineCount;\r\n            String record = null;\r\n            for (int i = 0; i < lineCount; i++) {\r\n                final int ix = (reversed) ? Math.abs((theStart - i) % GuiHandler.buffer.length) : (theStart + i) % GuiHandler.buffer.length;\r\n                record = GuiHandler.buffer[ix];\r\n                logMessages.add(record);\r\n            }\r\n            return logMessages.toArray(new String[logMessages.size()]);\r\n        } catch (final Exception ex) {\r\n            reportError(null, ex, ErrorManager.FORMAT_FAILURE);\r\n            return new String[]{\"Error while formatting the logging message\"};\r\n        }\r\n    }","commit_id":"3c3cb7855555d5b2712bb1bc05cddb5c3175ec45","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"private static Formatter makeFormatter(final String name) {\r\n        if (name == null) return null;\r\n\r\n        Formatter f = null;\r\n        try {\r\n            final Class<?> c = Class.forName(name);\r\n            f = (Formatter)c.newInstance();\r\n        } catch (final Exception e) {\r\n            f = new SimpleFormatter();\r\n        }\r\n        return f;\r\n    }","id":96215,"modified_method":"private static Formatter makeFormatter(final String name) {\r\n        if (name == null) return null;\r\n        try {\r\n            return (Formatter) Class.forName(name).newInstance();\r\n        } catch (final Exception e) {\r\n            return new SimpleFormatter();\r\n        }\r\n    }","commit_id":"3c3cb7855555d5b2712bb1bc05cddb5c3175ec45","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"private static Filter makeFilter(final String name) {\r\n        if (name == null) return null;\r\n\r\n        Filter f = null;\r\n        try {\r\n            final Class<?> c = Class.forName(name);\r\n            f = (Filter)c.newInstance();\r\n        } catch (final Exception e) {\r\n            System.err.println(\"Unable to load filter: \" + name);\r\n        }\r\n        return f;\r\n    }","id":96216,"modified_method":"private static Filter makeFilter(final String name) {\r\n        if (name == null) return null;\r\n        try {\r\n            return (Filter) Class.forName(name).newInstance();\r\n        } catch (final Exception e) {\r\n            System.err.println(\"Unable to load filter: \" + name);\r\n        }\r\n        return null;\r\n    }","commit_id":"3c3cb7855555d5b2712bb1bc05cddb5c3175ec45","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"@Override\r\n    public final void publish(final LogRecord record) {\r\n        if (!isLoggable(record)) return;\r\n\r\n        // write it to the buffer\r\n        final int ix = (GuiHandler.start+GuiHandler.count)%GuiHandler.buffer.length;\r\n        GuiHandler.buffer[ix] = record;\r\n        if (GuiHandler.count < GuiHandler.buffer.length) {\r\n            GuiHandler.count++;\r\n        } else {\r\n            GuiHandler.start++;\r\n        }\r\n        flush();\r\n        if (MemoryControl.shortStatus()) clear();\r\n    }","id":96217,"modified_method":"@Override\r\n    public final void publish(final LogRecord record) {\r\n        if (!isLoggable(record)) return;\r\n        final int ix = (GuiHandler.start + GuiHandler.count) % GuiHandler.buffer.length;\r\n        GuiHandler.buffer[ix] = getFormatter().format(record);\r\n        if (GuiHandler.count < GuiHandler.buffer.length) {\r\n            GuiHandler.count++;\r\n        } else {\r\n            GuiHandler.start++;\r\n        }\r\n        flush();\r\n        if (MemoryControl.shortStatus()) clear();\r\n    }","commit_id":"3c3cb7855555d5b2712bb1bc05cddb5c3175ec45","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"public GuiHandler() {\r\n        super();\r\n        configure();\r\n        init();\r\n    }","id":96218,"modified_method":"public GuiHandler() {\r\n        super();\r\n        final LogManager manager = LogManager.getLogManager();\r\n        final String className = getClass().getName();\r\n        final String level = manager.getProperty(className + \".level\");\r\n        setLevel((level == null) ? Level.INFO : Level.parse(level));\r\n        setFilter(makeFilter(manager.getProperty(className + \".filter\")));\r\n        setFormatter(makeFormatter(manager.getProperty(className + \".formatter\")));\r\n        try {\r\n            GuiHandler.size = Integer.parseInt(manager.getProperty(className + \".size\"));\r\n        } catch (final NumberFormatException e) {\r\n            GuiHandler.size = DEFAULT_SIZE;\r\n        }\r\n        GuiHandler.buffer = new String[GuiHandler.size];\r\n        GuiHandler.start = 0;\r\n        GuiHandler.count = 0;\r\n    }","commit_id":"3c3cb7855555d5b2712bb1bc05cddb5c3175ec45","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"/**\r\n\t * Re-Create any object if the class has a public constructor that accepts a String as unique parameter.\r\n\t */\r\n\tpublic Object fromStream(final byte[] iStream) throws IOException {\r\n\t\tif (iStream == null || iStream.length == 0)\r\n\t\t\t// NULL VALUE\r\n\t\t\treturn null;\r\n\r\n\t\tfinal int classNameSize = OBinaryProtocol.bytes2int(iStream);\r\n\t\tif (classNameSize <= 0)\r\n\t\t\tOLogManager.instance().error(this, \"Class signature not found in ANY element: \" + iStream, OSerializationException.class);\r\n\r\n\t\tfinal String className = OBinaryProtocol.bytes2string(iStream, 4, classNameSize);\r\n\r\n\t\ttry {\r\n\t\t\tClass<?> clazz = Class.forName(className);\r\n\r\n\t\t\t// CREATE THE OBJECT BY INVOKING THE EMPTY CONSTRUCTOR\r\n\t\t\tOSerializableStream stream = (OSerializableStream) clazz.newInstance();\r\n\r\n\t\t\treturn stream.fromStream(OArrays.copyOfRange(iStream, 4 + classNameSize, iStream.length));\r\n\r\n\t\t} catch (Exception e) {\r\n\t\t\tOLogManager.instance().error(this, \"Error on unmarshalling content. Class: \" + className, e, OSerializationException.class);\r\n\t\t}\r\n\t\treturn null;\r\n\t}","id":96219,"modified_method":"/**\r\n\t * Re-Create any object if the class has a public constructor that accepts a String as unique parameter.\r\n\t */\r\n\tpublic Object fromStream(final byte[] iStream) throws IOException {\r\n\t\tif (iStream == null || iStream.length == 0)\r\n\t\t\t// NULL VALUE\r\n\t\t\treturn null;\r\n\r\n\t\tfinal int classNameSize = OBinaryProtocol.bytes2int(iStream);\r\n\t\tif (classNameSize <= 0)\r\n\t\t\tOLogManager.instance().error(this, \"Class signature not found in ANY element: \" + iStream, OSerializationException.class);\r\n\r\n\t\tfinal String className = OBinaryProtocol.bytes2string(iStream, 4, classNameSize);\r\n\r\n\t\ttry {\r\n\t\t\tfinal OSerializableStream stream;\r\n\t\t\t// CHECK FOR ALIASES\r\n\t\t\tif (className.equalsIgnoreCase(\"q\"))\r\n\t\t\t\t// QUERY\r\n\t\t\t\tstream = new OSQLSynchQuery<Object>();\r\n\t\t\telse if (className.equalsIgnoreCase(\"c\"))\r\n\t\t\t\t// SQL COMMAND\r\n\t\t\t\tstream = new OCommandSQL();\r\n\t\t\telse\r\n\t\t\t\t// CREATE THE OBJECT BY INVOKING THE EMPTY CONSTRUCTOR\r\n\t\t\t\tstream = (OSerializableStream) Class.forName(className).newInstance();\r\n\r\n\t\t\treturn stream.fromStream(OArrays.copyOfRange(iStream, 4 + classNameSize, iStream.length));\r\n\r\n\t\t} catch (Exception e) {\r\n\t\t\tOLogManager.instance().error(this, \"Error on unmarshalling content. Class: \" + className, e, OSerializationException.class);\r\n\t\t}\r\n\t\treturn null;\r\n\t}","commit_id":"56d078e991175968ba9a6b8d0937a18e3e7da43a","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public InputStream encrypt(InputStream data, Object cryptInfo) throws CryptoFailureException\n    {\n        try\n        {\n            PGPCryptInfo pgpCryptInfo = this.safeGetCryptInfo(cryptInfo);\n            PGPPublicKey publicKey = pgpCryptInfo.getPublicKey();\n            return new LazyInputStream(new EncryptOutputStreamWriter(data, publicKey));\n        }\n        catch (Exception e)\n        {\n            throw new CryptoFailureException(this, e);\n        }\n    }","id":96220,"modified_method":"public InputStream encrypt(InputStream data, Object cryptInfo) throws CryptoFailureException\n    {\n        try\n        {\n            PGPCryptInfo pgpCryptInfo = this.safeGetCryptInfo(cryptInfo);\n            PGPPublicKey publicKey = pgpCryptInfo.getPublicKey();\n            StreamTransformer transformer = new EncryptStreamTransformer(data, publicKey);\n            return new LazyTransformedInputStream(new TransformContinuouslyPolicy(), transformer);\n        }\n        catch (Exception e)\n        {\n            throw new CryptoFailureException(this, e);\n        }\n    }","commit_id":"a06c2b589db5ca0acf11fd7fbf94564ef69be492","url":"https://github.com/mulesoft/mule"},{"original_method":"public InputStream decrypt(InputStream data, Object cryptInfo) throws CryptoFailureException\n    {\n        try\n        {\n            PGPCryptInfo pgpCryptInfo = this.safeGetCryptInfo(cryptInfo);\n            PGPPublicKey publicKey = pgpCryptInfo.getPublicKey();\n            return new LazyInputStream(new DecryptOutputStreamWriter(data, publicKey,\n                this.keyManager.getSecretKey(), this.keyManager.getSecretPassphrase()));\n        }\n        catch (Exception e)\n        {\n            throw new CryptoFailureException(this, e);\n        }\n    }","id":96221,"modified_method":"public InputStream decrypt(InputStream data, Object cryptInfo) throws CryptoFailureException\n    {\n        try\n        {\n            PGPCryptInfo pgpCryptInfo = this.safeGetCryptInfo(cryptInfo);\n            PGPPublicKey publicKey = pgpCryptInfo.getPublicKey();\n            StreamTransformer transformer = new DecryptStreamTransformer(data, publicKey,\n                this.keyManager.getSecretKey(), this.keyManager.getSecretPassphrase());\n            return new LazyTransformedInputStream(new TransformContinuouslyPolicy(), transformer);\n        }\n        catch (Exception e)\n        {\n            throw new CryptoFailureException(this, e);\n        }\n    }","commit_id":"a06c2b589db5ca0acf11fd7fbf94564ef69be492","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    protected void doInitialise() throws InitialisationException\n    {\n        if (strategyName != null)\n        {\n            strategy = endpoint.getMuleContext().getSecurityManager().getEncryptionStrategy(strategyName);\n        }\n\n        if (strategy == null)\n        {\n            throw new InitialisationException(PGPMessages.encryptionStrategyNotSet(), this);\n        }\n    }","id":96222,"modified_method":"@Override\n    protected void doInitialise() throws InitialisationException\n    {\n        if (strategyName != null)\n        {\n            strategy = muleContext.getSecurityManager().getEncryptionStrategy(strategyName);\n        }\n\n        if (strategy == null)\n        {\n            throw new InitialisationException(PGPMessages.encryptionStrategyNotSet(), this);\n        }\n    }","commit_id":"a06c2b589db5ca0acf11fd7fbf94564ef69be492","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    protected void authenticateInbound(MuleEvent event)\n        throws SecurityException, UnauthorisedException, UnknownAuthenticationTypeException\n    {\n        MuleMessage message = event.getMessage();\n\n        String userId = (String)getCredentialsAccessor().getCredentials(event);\n\n        byte[] creds = null;\n        try\n        {\n            creds = message.getPayloadAsBytes();\n            creds = strategy.decrypt(creds, null);\n        }\n        catch (Exception e1)\n        {\n            throw new UnauthorisedException(CoreMessages.failedToReadPayload(), event, e1);\n        }\n\n        Authentication authentication;\n        try\n        {\n            authentication = new PGPAuthentication(userId, decodeMsgRaw(creds), event);\n        }\n        catch (Exception e1)\n        {\n            throw new UnauthorisedException(CoreMessages.failedToReadPayload(), event, e1);\n        }\n\n        final Authentication authResult;\n        try\n        {\n            authResult = getSecurityManager().authenticate(authentication);\n        }\n        catch (Exception e)\n        {\n            // Authentication failed\n            if (logger.isDebugEnabled())\n            {\n                logger.debug(\"Authentication request for user: \" + userId + \" failed: \" + e.toString());\n            }\n\n            throw new UnauthorisedException(CoreMessages.authFailedForUser(userId), event, e);\n        }\n\n        // Authentication success\n        if (logger.isDebugEnabled())\n        {\n            logger.debug(\"Authentication success: \" + authResult.toString());\n        }\n\n        SecurityContext context = getSecurityManager().createSecurityContext(authResult);\n        event.getSession().setSecurityContext(context);\n\n        try\n        {\n            updatePayload(message, getUnencryptedMessageWithoutSignature((PGPAuthentication)authResult), event);\n//            TODO RequestContext.rewriteEvent(new DefaultMuleMessage(\n//                getUnencryptedMessageWithoutSignature((PGPAuthentication)authResult)));\n        }\n        catch (Exception e2)\n        {\n            throw new UnauthorisedException(event, context, endpoint.getEndpointURI().getUri(), this);\n        }\n    }","id":96223,"modified_method":"@Override\n    protected void authenticateInbound(MuleEvent event)\n        throws SecurityException, UnauthorisedException, UnknownAuthenticationTypeException\n    {\n        MuleMessage message = event.getMessage();\n\n        String userId = (String)getCredentialsAccessor().getCredentials(event);\n\n        byte[] creds = null;\n        try\n        {\n            creds = message.getPayloadAsBytes();\n            creds = strategy.decrypt(creds, null);\n        }\n        catch (Exception e1)\n        {\n            throw new UnauthorisedException(CoreMessages.failedToReadPayload(), event, e1);\n        }\n\n        Authentication authentication;\n        try\n        {\n            authentication = new PGPAuthentication(userId, decodeMsgRaw(creds), event);\n        }\n        catch (Exception e1)\n        {\n            throw new UnauthorisedException(CoreMessages.failedToReadPayload(), event, e1);\n        }\n\n        final Authentication authResult;\n        try\n        {\n            authResult = getSecurityManager().authenticate(authentication);\n        }\n        catch (Exception e)\n        {\n            // Authentication failed\n            if (logger.isDebugEnabled())\n            {\n                logger.debug(\"Authentication request for user: \" + userId + \" failed: \" + e.toString());\n            }\n\n            throw new UnauthorisedException(CoreMessages.authFailedForUser(userId), event, e);\n        }\n\n        // Authentication success\n        if (logger.isDebugEnabled())\n        {\n            logger.debug(\"Authentication success: \" + authResult.toString());\n        }\n\n        SecurityContext context = getSecurityManager().createSecurityContext(authResult);\n        event.getSession().setSecurityContext(context);\n\n        try\n        {\n            updatePayload(message, getUnencryptedMessageWithoutSignature((PGPAuthentication)authResult), event);\n//            TODO RequestContext.rewriteEvent(new DefaultMuleMessage(\n//                getUnencryptedMessageWithoutSignature((PGPAuthentication)authResult)));\n        }\n        catch (Exception e2)\n        {\n            throw new UnauthorisedException(event, context, this);\n        }\n    }","commit_id":"a06c2b589db5ca0acf11fd7fbf94564ef69be492","url":"https://github.com/mulesoft/mule"},{"original_method":"@Test\n    public void testAuthenticationNotAuthorised() throws Exception\n    {\n        MuleClient client = new MuleClient(muleContext);\n\n        MuleMessage reply = client.send(\"vm://echo\", \"An unsigned message\", null);\n\n        assertNotNull(reply.getExceptionPayload());\n        ExceptionPayload excPayload = reply.getExceptionPayload();\n        assertEquals(MESSAGE_EXCEPTION, excPayload.getMessage());\n    }","id":96224,"modified_method":"@Test\n    public void testAuthenticationNotAuthorised() throws Exception\n    {\n        Map<String, Object> props = createMessageProperties();\n        MuleMessage reply = muleContext.getClient().send(\"vm://echo\", \"An unsigned message\", props);\n        assertNotNull(reply.getExceptionPayload());\n        ExceptionPayload excPayload = reply.getExceptionPayload();\n        assertEquals(MESSAGE_EXCEPTION, excPayload.getMessage());\n    }","commit_id":"a06c2b589db5ca0acf11fd7fbf94564ef69be492","url":"https://github.com/mulesoft/mule"},{"original_method":"@Test\n    public void testAuthenticationAuthorised() throws Exception\n    {\n        byte[] msg = loadEncryptedMessage();\n\n        Map<String, String> props = new HashMap<String, String>();\n        props.put(\"TARGET_FILE\", TARGET);\n        props.put(MuleProperties.MULE_USER_PROPERTY, \"Mule server <mule_server@mule.com>\");\n\n        MuleClient client = new MuleClient(muleContext);\n        MuleMessage reply = client.send(\"vm://echo\", new String(msg), props);\n        assertNull(reply.getExceptionPayload());\n\n        // poll for the output file; wait for a max of 5 seconds\n        File pollingFile = null;\n        for (int i = 0; i < 5; i++)\n        {\n            pollingFile = new File(DIRECTORY + TARGET);\n            if (!pollingFile.exists())\n            {\n                Thread.sleep(1000);\n            }\n        }\n        pollingFile = null;\n\n        try\n        {\n            // check if file exists\n            FileReader outputFile = new FileReader(DIRECTORY + TARGET);\n            String fileContents = IOUtils.toString(outputFile);\n            outputFile.close();\n\n            // see the GenerateTestMessage class for the content of the message\n            assertTrue(fileContents.contains(\"This is a test message\"));\n\n            // delete file not to be confused with tests to be performed later\n            File f = FileUtils.newFile(DIRECTORY + TARGET);\n            assertTrue(\"Deleting the output file failed\", f.delete());\n        }\n        catch (FileNotFoundException fileNotFound)\n        {\n            fail(\"File not successfully created\");\n        }\n    }","id":96225,"modified_method":"@Test\n    public void testAuthenticationAuthorised() throws Exception\n    {\n        MuleClient client = muleContext.getClient();\n\n        byte[] msg = loadEncryptedMessage();\n        Map<String, Object> props = createMessageProperties();\n\n        client.dispatch(\"vm://echo\", new String(msg), props);\n\n        MuleMessage message = client.request(\"vm://output\", RECEIVE_TIMEOUT);\n        assertEquals(\"This is a test message.\\r\\nThis is another line.\\r\\n\", message.getPayloadAsString());\n    }","commit_id":"a06c2b589db5ca0acf11fd7fbf94564ef69be492","url":"https://github.com/mulesoft/mule"},{"original_method":"public SignedMessage(InputStream toBeDecrypted,\n                         PGPPublicKey publicKey,\n                         PGPSecretKey secretKey,\n                         String password) throws IOException\n    {\n        OutputStreamWriter writer = new DecryptOutputStreamWriter(toBeDecrypted, publicKey, secretKey,\n            password);\n        this.encryptedMessage = new LazyInputStream(writer);\n    }","id":96226,"modified_method":"public SignedMessage(InputStream toBeDecrypted,\n                         PGPPublicKey publicKey,\n                         PGPSecretKey secretKey,\n                         String password) throws IOException\n    {\n        StreamTransformer transformer = new DecryptStreamTransformer(toBeDecrypted, publicKey, secretKey,\n            password);\n        this.encryptedMessage = new LazyTransformedInputStream(new TransformContinuouslyPolicy(), transformer);\n    }","commit_id":"a06c2b589db5ca0acf11fd7fbf94564ef69be492","url":"https://github.com/mulesoft/mule"},{"original_method":"@Before\n    public void setUp() throws Exception\n    {\n        counter = 0;\n    }","id":96227,"modified_method":"@Before\n    public void setUp() throws Exception\n    {\n        connectionLatch = new CountDownLatch(TOTAL_CONCURRENT_REQUESTS);\n    }","commit_id":"6d4bf82485bf44034c1008dcaf9b105511b81b2d","url":"https://github.com/mulesoft/mule"},{"original_method":"@Override\n    public MuleEvent process(MuleEvent muleEvent) throws MuleException\n    {\n        DbConnection connection = null;\n\n        DbConfig dbConfig = dbConfigResolver.resolve(muleEvent);\n\n        try\n        {\n            connection = dbConfig.getConnectionFactory().createConnection(transactionalAction);\n\n            Object result = executeQuery(connection, muleEvent);\n\n            if (target == null || \"\".equals(target) || \"#[payload]\".equals(target))\n            {\n                muleEvent.getMessage().setPayload(result);\n            }\n            else\n            {\n                muleContext.getExpressionManager().enrich(target, muleEvent, result);\n            }\n\n            return processNext(muleEvent);\n        }\n        catch (SQLException e)\n        {\n            throw new MessagingException(muleEvent, e);\n        }\n        finally\n        {\n            if (connection != null && mustCloseConnection())\n            {\n                dbConfig.getConnectionFactory().releaseConnection(connection);\n            }\n        }\n    }","id":96228,"modified_method":"@Override\n    public MuleEvent process(MuleEvent muleEvent) throws MuleException\n    {\n        DbConnection connection = null;\n\n        DbConfig dbConfig = dbConfigResolver.resolve(muleEvent);\n\n        try\n        {\n            connection = dbConfig.getConnectionFactory().createConnection(transactionalAction);\n\n            Object result = executeQuery(connection, muleEvent);\n\n            if (mustCloseConnection())\n            {\n                try\n                {\n                    dbConfig.getConnectionFactory().releaseConnection(connection);\n                }\n                finally\n                {\n                    connection = null;\n                }\n            }\n\n            if (target == null || \"\".equals(target) || \"#[payload]\".equals(target))\n            {\n                muleEvent.getMessage().setPayload(result);\n            }\n            else\n            {\n                muleContext.getExpressionManager().enrich(target, muleEvent, result);\n            }\n\n            return processNext(muleEvent);\n        }\n        catch (SQLException e)\n        {\n            throw new MessagingException(muleEvent, e);\n        }\n        finally\n        {\n            if (connection != null && mustCloseConnection())\n            {\n                dbConfig.getConnectionFactory().releaseConnection(connection);\n            }\n        }\n    }","commit_id":"6d4bf82485bf44034c1008dcaf9b105511b81b2d","url":"https://github.com/mulesoft/mule"},{"original_method":"@Test\n    public void limitsConnections() throws Exception\n    {\n        LocalMuleClient client = muleContext.getClient();\n\n        MuleMessage response = client.send(\"vm://testIn\", TEST_MESSAGE, null);\n\n        assertTrue(response.getExceptionPayload().getException() instanceof MessagingException);\n        assertThat(counter, equalTo(1));\n    }","id":96229,"modified_method":"@Test\n    public void limitsConnections() throws Exception\n    {\n        try\n        {\n            LocalMuleClient client = muleContext.getClient();\n\n            client.dispatch(\"vm://testIn\", TEST_MESSAGE, null);\n            client.dispatch(\"vm://testIn\", TEST_MESSAGE, null);\n\n            MuleMessage response = client.request(\"vm://connectionError\", RECEIVE_TIMEOUT);\n            assertThat(response.getExceptionPayload().getException(), is(instanceOf(MessagingException.class)));\n        }\n        finally\n        {\n            connectionLatch.countDown();\n        }\n    }","commit_id":"6d4bf82485bf44034c1008dcaf9b105511b81b2d","url":"https://github.com/mulesoft/mule"},{"original_method":"@Test\n    public void providesMultipleConnections() throws Exception\n    {\n        LocalMuleClient client = muleContext.getClient();\n\n        MuleMessage response = client.send(\"vm://testIn\", TEST_MESSAGE, null);\n\n        assertThat(response.getExceptionPayload(), is(nullValue()));\n        assertThat(counter, equalTo(2));\n    }","id":96230,"modified_method":"@Test\n    public void providesMultipleConnections() throws Exception\n    {\n        LocalMuleClient client = muleContext.getClient();\n\n        client.dispatch(\"vm://testIn\", TEST_MESSAGE, null);\n        client.dispatch(\"vm://testIn\", TEST_MESSAGE, null);\n\n        MuleMessage response = client.request(\"vm://testOut\", RECEIVE_TIMEOUT);\n        assertThat(response.getExceptionPayload(), is(nullValue()));\n\n        response = client.request(\"vm://testOut\", RECEIVE_TIMEOUT);\n        assertThat(response.getExceptionPayload(), is(nullValue()));\n    }","commit_id":"6d4bf82485bf44034c1008dcaf9b105511b81b2d","url":"https://github.com/mulesoft/mule"},{"original_method":"public void mute(MuteParticipantCommand mpc) {\n        String jobId = manager.getESLClient().sendAsyncApiCommand( mpc.getCommand(), mpc.getCommandArgs());\n\t}","id":96231,"modified_method":"public void mute(MuteParticipantCommand mpc) {\n\t\tClient c = manager.getESLClient();\n\t\tif (c.canSend()) {\n\t        c.sendAsyncApiCommand( mpc.getCommand(), mpc.getCommandArgs());\t\t\t\n\t\t}\n\t}","commit_id":"95dd42fb12f7c133bbcbde795fa05e4abd68d2f6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void start() {\n\t\tattemptConnect = true;\n\t\tRunnable sender = new Runnable() {\n\t\t\tpublic void run() {\n\t\t\t\twhile (attemptConnect) {\t\t\t\t\t\n\t\t\t\t\tconnect();\t\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t\tconnExec.scheduleWithFixedDelay(sender, 0, 5, TimeUnit.SECONDS);\t\n\t}","id":96232,"modified_method":"public void start() {\n\t\tlog.info(\"Starting FreeSWITCH ESL connection manager.\");\n\t\tSystem.out.println(\"***************** Starting FreeSWITCH ESL connection manager.\");\n\t\tConnectThread connector = new ConnectThread();\n\t\tconnectTask = (ScheduledFuture<ConnectThread>) connExec.scheduleAtFixedRate(connector, 5, 5, TimeUnit.SECONDS);\t\n\t}","commit_id":"95dd42fb12f7c133bbcbde795fa05e4abd68d2f6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void record(RecordConferenceCommand rcc) {\n    \tEslMessage response = manager.getESLClient().sendSyncApiCommand(rcc.getCommand(), rcc.getCommandArgs());\n        rcc.handleResponse(response, conferenceEventListener); \n\t}","id":96233,"modified_method":"public void record(RecordConferenceCommand rcc) {\n\t\tClient c = manager.getESLClient();\n\t\tif (c.canSend()) {\n\t    \tEslMessage response = c.sendSyncApiCommand(rcc.getCommand(), rcc.getCommandArgs());\n\t        rcc.handleResponse(response, conferenceEventListener); \t\t\t\n\t\t}\n\t}","commit_id":"95dd42fb12f7c133bbcbde795fa05e4abd68d2f6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void getUsers(PopulateRoomCommand prc) {\n        EslMessage response = manager.getESLClient().sendSyncApiCommand(prc.getCommand(), prc.getCommandArgs());\n        prc.handleResponse(response, conferenceEventListener); \n\t}","id":96234,"modified_method":"public void getUsers(PopulateRoomCommand prc) {\n\t\tClient c = manager.getESLClient();\n\t\tif (c.canSend()) {\n\t        EslMessage response = c.sendSyncApiCommand(prc.getCommand(), prc.getCommandArgs());\n\t        prc.handleResponse(response, conferenceEventListener); \t\t\t\n\t\t}\n\t}","commit_id":"95dd42fb12f7c133bbcbde795fa05e4abd68d2f6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void ejectAll(EjectAllUsersCommand mpc) {\n        String jobId = manager.getESLClient().sendAsyncApiCommand( mpc.getCommand(), mpc.getCommandArgs());\n\t}","id":96235,"modified_method":"public void ejectAll(EjectAllUsersCommand mpc) {\n\t\tClient c = manager.getESLClient();\n\t\tif (c.canSend()) {\n\t        c.sendAsyncApiCommand( mpc.getCommand(), mpc.getCommandArgs());\t\n\t\t}\n\t}","commit_id":"95dd42fb12f7c133bbcbde795fa05e4abd68d2f6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void eject(EjectParticipantCommand mpc) {\n        String jobId = manager.getESLClient().sendAsyncApiCommand( mpc.getCommand(), mpc.getCommandArgs());\n\t}","id":96236,"modified_method":"public void eject(EjectParticipantCommand mpc) {\n\t\tClient c = manager.getESLClient();\n\t\tif (c.canSend()) {\n\t\t\tc.sendAsyncApiCommand( mpc.getCommand(), mpc.getCommandArgs());\n\t\t}       \n\t}","commit_id":"95dd42fb12f7c133bbcbde795fa05e4abd68d2f6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void stop() {\n\t\tattemptConnect = false;\n\t}","id":96237,"modified_method":"public void stop() {\n\t\tif (connectTask != null) {\n\t\t\tconnectTask.cancel(true);\n\t\t}\t\t\n\t}","commit_id":"95dd42fb12f7c133bbcbde795fa05e4abd68d2f6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"public void broadcast(BroadcastConferenceCommand rcc) {\n    \tEslMessage response = manager.getESLClient().sendSyncApiCommand(rcc.getCommand(), rcc.getCommandArgs());\n        rcc.handleResponse(response, conferenceEventListener); \n\t}","id":96238,"modified_method":"public void broadcast(BroadcastConferenceCommand rcc) {\n\t\tClient c = manager.getESLClient();\n\t\tif (c.canSend()) {\n\t    \tEslMessage response = c.sendSyncApiCommand(rcc.getCommand(), rcc.getCommandArgs());\n\t        rcc.handleResponse(response, conferenceEventListener); \t\n\t\t}\n\t}","commit_id":"95dd42fb12f7c133bbcbde795fa05e4abd68d2f6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"private void connect() {\n    \ttry {\n    \t\tClient c = manager.getESLClient();\n    \t\tif (! c.canSend()) {\n    \t\t\tsubscribed = false;\n    \t\t\tmanager.disconnect();\n    \t\t\tmanager.connect();\n    \t\t} \n    \t\t\n    \t\tif (!subscribed) {\n                c.cancelEventSubscriptions();\n                c.setEventSubscriptions( \"plain\", \"all\" );\n                c.addEventFilter( EVENT_NAME, \"heartbeat\" );\n                c.addEventFilter( EVENT_NAME, \"custom\" );\n                c.addEventFilter( EVENT_NAME, \"background_job\" );\n                subscribed = true;\n    \t\t}\n    \t\t\n\t\t} catch (InboundConnectionFailure e) {\n\t\t\tlog.error(\"Failed to connect to ESL\");\n\t\t}\n    }","id":96239,"modified_method":"private void connect() {\n    \ttry {\n    \t\tClient c = manager.getESLClient();\n    \t\tif (! c.canSend()) {\n\t\t\t\tlog.info(\"Attempting to connect to FreeSWITCH ESL\");\n    \t\t\tsubscribed = false;\n    \t\t\tmanager.connect();\n    \t\t} else {\n\t    \t\tif (!subscribed) {\n\t    \t\t\tlog.info(\"Subscribing for ESL events.\");\n\t                c.cancelEventSubscriptions();\n\t                c.addEventListener(eslEventListener);\n\t                c.setEventSubscriptions( \"plain\", \"all\" );\n\t                c.addEventFilter( EVENT_NAME, \"heartbeat\" );\n\t                c.addEventFilter( EVENT_NAME, \"custom\" );\n\t                c.addEventFilter( EVENT_NAME, \"background_job\" );\n\t                subscribed = true;\n\t    \t\t} \n\t    \t}    \t\t\n\t\t} catch (InboundConnectionFailure e) {\n\t\t\tSystem.out.println(\"Failed to connect to ESL\");\n\t\t\tlog.error(\"Failed to connect to ESL\");\n\t\t}\n    }","commit_id":"95dd42fb12f7c133bbcbde795fa05e4abd68d2f6","url":"https://github.com/bigbluebutton/bigbluebutton"},{"original_method":"@Test\n\tpublic void testFormatFieldForAnnotationWithPlaceholdersAndFactoryBean() throws Exception {\n\t\tGenericApplicationContext context = new GenericApplicationContext();\n\t\tPropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();\n\t\tProperties props = new Properties();\n\t\tprops.setProperty(\"dateStyle\", \"S-\");\n\t\tprops.setProperty(\"datePattern\", \"M-d-yy\");\n\t\tppc.setProperties(props);\n\t\tcontext.registerBeanDefinition(\"formattingService\", new RootBeanDefinition(FormattingConversionServiceFactoryBean.class));\n\t\tcontext.getBeanFactory().registerSingleton(\"ppc\", ppc);\n\t\tcontext.refresh();\n\t\tformattingService = context.getBean(\"formattingService\", FormattingConversionService.class);\n\t\tdoTestFormatFieldForAnnotation(ModelWithPlaceholders.class);\n\t}","id":96240,"modified_method":"@Test\n\tpublic void testFormatFieldForAnnotationWithPlaceholdersAndFactoryBean() throws Exception {\n\t\tGenericApplicationContext context = new GenericApplicationContext();\n\t\tPropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();\n\t\tProperties props = new Properties();\n\t\tprops.setProperty(\"dateStyle\", \"S-\");\n\t\tprops.setProperty(\"datePattern\", \"M-d-yy\");\n\t\tppc.setProperties(props);\n\t\tcontext.registerBeanDefinition(\"formattingService\", new RootBeanDefinition(FormattingConversionServiceFactoryBean.class));\n\t\tcontext.getBeanFactory().registerSingleton(\"ppc\", ppc);\n\t\tcontext.refresh();\n\t\tformattingService = context.getBean(\"formattingService\", FormattingConversionService.class);\n\t\tdoTestFormatFieldForAnnotation(ModelWithPlaceholders.class, false);\n\t}","commit_id":"93304b5ff2370cfb6265fb2bd4d6773ca17d528e","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Test\n\tpublic void testFormatFieldForAnnotationWithPlaceholders() throws Exception {\n\t\tGenericApplicationContext context = new GenericApplicationContext();\n\t\tPropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();\n\t\tProperties props = new Properties();\n\t\tprops.setProperty(\"dateStyle\", \"S-\");\n\t\tprops.setProperty(\"datePattern\", \"M-d-yy\");\n\t\tppc.setProperties(props);\n\t\tcontext.getBeanFactory().registerSingleton(\"ppc\", ppc);\n\t\tcontext.refresh();\n\t\tcontext.getBeanFactory().initializeBean(formattingService, \"formattingService\");\n\t\tformattingService.addFormatterForFieldAnnotation(new JodaDateTimeFormatAnnotationFormatterFactory());\n\t\tdoTestFormatFieldForAnnotation(ModelWithPlaceholders.class);\n\t}","id":96241,"modified_method":"@Test\n\tpublic void testFormatFieldForAnnotationWithPlaceholders() throws Exception {\n\t\tGenericApplicationContext context = new GenericApplicationContext();\n\t\tPropertyPlaceholderConfigurer ppc = new PropertyPlaceholderConfigurer();\n\t\tProperties props = new Properties();\n\t\tprops.setProperty(\"dateStyle\", \"S-\");\n\t\tprops.setProperty(\"datePattern\", \"M-d-yy\");\n\t\tppc.setProperties(props);\n\t\tcontext.getBeanFactory().registerSingleton(\"ppc\", ppc);\n\t\tcontext.refresh();\n\t\tcontext.getBeanFactory().initializeBean(formattingService, \"formattingService\");\n\t\tformattingService.addFormatterForFieldAnnotation(new JodaDateTimeFormatAnnotationFormatterFactory());\n\t\tdoTestFormatFieldForAnnotation(ModelWithPlaceholders.class, false);\n\t}","commit_id":"93304b5ff2370cfb6265fb2bd4d6773ca17d528e","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Test\n\tpublic void testParseEmptyStringDefault() throws ParseException {\n\t\tassertNull(formattingService.convert(\"\", TypeDescriptor.valueOf(Integer.class)));\n\t}","id":96242,"modified_method":"@Test\n\tpublic void testParseEmptyStringDefault() throws ParseException {\n\t\tassertNull(formattingService.convert(\"\", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));\n\t}","commit_id":"93304b5ff2370cfb6265fb2bd4d6773ca17d528e","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Test\n\tpublic void testFormatFieldForAnnotation() throws Exception {\n\t\tformattingService.addFormatterForFieldAnnotation(new JodaDateTimeFormatAnnotationFormatterFactory());\n\t\tdoTestFormatFieldForAnnotation(Model.class);\n\t}","id":96243,"modified_method":"@Test\n\tpublic void testFormatFieldForAnnotation() throws Exception {\n\t\tformattingService.addFormatterForFieldAnnotation(new JodaDateTimeFormatAnnotationFormatterFactory());\n\t\tdoTestFormatFieldForAnnotation(Model.class, false);\n\t}","commit_id":"93304b5ff2370cfb6265fb2bd4d6773ca17d528e","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Test\n\tpublic void testParseEmptyString() throws ParseException {\n\t\tformattingService.addFormatterForFieldType(Number.class, new NumberFormatter());\n\t\tassertNull(formattingService.convert(\"\", TypeDescriptor.valueOf(Integer.class)));\n\t}","id":96244,"modified_method":"@Test\n\tpublic void testParseEmptyString() throws ParseException {\n\t\tformattingService.addFormatterForFieldType(Number.class, new NumberFormatter());\n\t\tassertNull(formattingService.convert(\"\", TypeDescriptor.valueOf(String.class), TypeDescriptor.valueOf(Integer.class)));\n\t}","commit_id":"93304b5ff2370cfb6265fb2bd4d6773ca17d528e","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"private void doTestFormatFieldForAnnotation(Class<?> modelClass) throws Exception {\n\t\tformattingService.addConverter(new Converter<Date, Long>() {\n\t\t\tpublic Long convert(Date source) {\n\t\t\t\treturn source.getTime();\n\t\t\t}\n\t\t});\n\t\tformattingService.addConverter(new Converter<DateTime, Date>() {\n\t\t\tpublic Date convert(DateTime source) {\n\t\t\t\treturn source.toDate();\n\t\t\t}\n\t\t});\n\n\t\tString formatted = (String) formattingService.convert(new LocalDate(2009, 10, 31).toDateTimeAtCurrentTime()\n\t\t\t\t.toDate(), new TypeDescriptor(modelClass.getField(\"date\")), TypeDescriptor.valueOf(String.class));\n\t\tassertEquals(\"10/31/09\", formatted);\n\t\tLocalDate date = new LocalDate(formattingService.convert(\"10/31/09\", TypeDescriptor.valueOf(String.class),\n\t\t\t\tnew TypeDescriptor(modelClass.getField(\"date\"))));\n\t\tassertEquals(new LocalDate(2009, 10, 31), date);\n\n\t\tList<Date> dates = new ArrayList<Date>();\n\t\tdates.add(new LocalDate(2009, 10, 31).toDateTimeAtCurrentTime().toDate());\n\t\tdates.add(new LocalDate(2009, 11, 1).toDateTimeAtCurrentTime().toDate());\n\t\tdates.add(new LocalDate(2009, 11, 2).toDateTimeAtCurrentTime().toDate());\n\t\tformatted = (String) formattingService.convert(dates,\n\t\t\t\tnew TypeDescriptor(modelClass.getField(\"dates\")), TypeDescriptor.valueOf(String.class));\n\t\tassertEquals(\"10-31-09,11-1-09,11-2-09\", formatted);\n\t\tdates = (List<Date>) formattingService.convert(\"10-31-09,11-1-09,11-2-09\",\n\t\t\t\tTypeDescriptor.valueOf(String.class), new TypeDescriptor(modelClass.getField(\"dates\")));\n\t\tassertEquals(new LocalDate(2009, 10, 31), new LocalDate(dates.get(0)));\n\t\tassertEquals(new LocalDate(2009, 11, 1), new LocalDate(dates.get(1)));\n\t\tassertEquals(new LocalDate(2009, 11, 2), new LocalDate(dates.get(2)));\n\n\t\tObject model = BeanUtils.instantiate(modelClass);\n\t\tBeanWrapper accessor = PropertyAccessorFactory.forBeanPropertyAccess(model);\n\t\taccessor.setConversionService(formattingService);\n\t\taccessor.setPropertyValue(\"dates\", \"10-31-09,11-1-09,11-2-09\");\n\t\tdates = (List<Date>) accessor.getPropertyValue(\"dates\");\n\t\tassertEquals(new LocalDate(2009, 10, 31), new LocalDate(dates.get(0)));\n\t\tassertEquals(new LocalDate(2009, 11, 1), new LocalDate(dates.get(1)));\n\t\tassertEquals(new LocalDate(2009, 11, 2), new LocalDate(dates.get(2)));\n\t\taccessor.setPropertyValue(\"dates[0]\", \"10-30-09\");\n\t\taccessor.setPropertyValue(\"dates[1]\", \"10-1-09\");\n\t\taccessor.setPropertyValue(\"dates[2]\", \"10-2-09\");\n\t\tdates = (List<Date>) accessor.getPropertyValue(\"dates\");\n\t\tassertEquals(new LocalDate(2009, 10, 30), new LocalDate(dates.get(0)));\n\t\tassertEquals(new LocalDate(2009, 10, 1), new LocalDate(dates.get(1)));\n\t\tassertEquals(new LocalDate(2009, 10, 2), new LocalDate(dates.get(2)));\n\t}","id":96245,"modified_method":"private void doTestFormatFieldForAnnotation(Class<?> modelClass, boolean directFieldAccess) throws Exception {\n\t\tformattingService.addConverter(new Converter<Date, Long>() {\n\t\t\tpublic Long convert(Date source) {\n\t\t\t\treturn source.getTime();\n\t\t\t}\n\t\t});\n\t\tformattingService.addConverter(new Converter<DateTime, Date>() {\n\t\t\tpublic Date convert(DateTime source) {\n\t\t\t\treturn source.toDate();\n\t\t\t}\n\t\t});\n\n\t\tString formatted = (String) formattingService.convert(new LocalDate(2009, 10, 31).toDateTimeAtCurrentTime()\n\t\t\t\t.toDate(), new TypeDescriptor(modelClass.getField(\"date\")), TypeDescriptor.valueOf(String.class));\n\t\tassertEquals(\"10/31/09\", formatted);\n\t\tLocalDate date = new LocalDate(formattingService.convert(\"10/31/09\", TypeDescriptor.valueOf(String.class),\n\t\t\t\tnew TypeDescriptor(modelClass.getField(\"date\"))));\n\t\tassertEquals(new LocalDate(2009, 10, 31), date);\n\n\t\tList<Date> dates = new ArrayList<Date>();\n\t\tdates.add(new LocalDate(2009, 10, 31).toDateTimeAtCurrentTime().toDate());\n\t\tdates.add(new LocalDate(2009, 11, 1).toDateTimeAtCurrentTime().toDate());\n\t\tdates.add(new LocalDate(2009, 11, 2).toDateTimeAtCurrentTime().toDate());\n\t\tformatted = (String) formattingService.convert(dates,\n\t\t\t\tnew TypeDescriptor(modelClass.getField(\"dates\")), TypeDescriptor.valueOf(String.class));\n\t\tassertEquals(\"10-31-09,11-1-09,11-2-09\", formatted);\n\t\tdates = (List<Date>) formattingService.convert(\"10-31-09,11-1-09,11-2-09\",\n\t\t\t\tTypeDescriptor.valueOf(String.class), new TypeDescriptor(modelClass.getField(\"dates\")));\n\t\tassertEquals(new LocalDate(2009, 10, 31), new LocalDate(dates.get(0)));\n\t\tassertEquals(new LocalDate(2009, 11, 1), new LocalDate(dates.get(1)));\n\t\tassertEquals(new LocalDate(2009, 11, 2), new LocalDate(dates.get(2)));\n\n\t\tObject model = BeanUtils.instantiate(modelClass);\n\t\tConfigurablePropertyAccessor accessor = directFieldAccess ? PropertyAccessorFactory.forDirectFieldAccess(model) :\n\t\t\t\tPropertyAccessorFactory.forBeanPropertyAccess(model);\n\t\taccessor.setConversionService(formattingService);\n\t\taccessor.setPropertyValue(\"dates\", \"10-31-09,11-1-09,11-2-09\");\n\t\tdates = (List<Date>) accessor.getPropertyValue(\"dates\");\n\t\tassertEquals(new LocalDate(2009, 10, 31), new LocalDate(dates.get(0)));\n\t\tassertEquals(new LocalDate(2009, 11, 1), new LocalDate(dates.get(1)));\n\t\tassertEquals(new LocalDate(2009, 11, 2), new LocalDate(dates.get(2)));\n\t\tif (!directFieldAccess) {\n\t\t\taccessor.setPropertyValue(\"dates[0]\", \"10-30-09\");\n\t\t\taccessor.setPropertyValue(\"dates[1]\", \"10-1-09\");\n\t\t\taccessor.setPropertyValue(\"dates[2]\", \"10-2-09\");\n\t\t\tdates = (List<Date>) accessor.getPropertyValue(\"dates\");\n\t\t\tassertEquals(new LocalDate(2009, 10, 30), new LocalDate(dates.get(0)));\n\t\t\tassertEquals(new LocalDate(2009, 10, 1), new LocalDate(dates.get(1)));\n\t\t\tassertEquals(new LocalDate(2009, 10, 2), new LocalDate(dates.get(2)));\n\t\t}\n\t}","commit_id":"93304b5ff2370cfb6265fb2bd4d6773ca17d528e","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n    public WorkResult execute(final GroovyJavaJointCompileSpec spec) {\n        GroovySystemLoaderFactory groovySystemLoaderFactory = new GroovySystemLoaderFactory();\n        ClassLoader compilerClassLoader = this.getClass().getClassLoader();\n        GroovySystemLoader compilerGroovyLoader = groovySystemLoaderFactory.forClassLoader(compilerClassLoader);\n\n        CompilerConfiguration configuration = new CompilerConfiguration();\n        configuration.setVerbose(spec.getGroovyCompileOptions().isVerbose());\n        configuration.setSourceEncoding(spec.getGroovyCompileOptions().getEncoding());\n        configuration.setTargetBytecode(spec.getTargetCompatibility());\n        configuration.setTargetDirectory(spec.getDestinationDir());\n        canonicalizeValues(spec.getGroovyCompileOptions().getOptimizationOptions());\n        if (spec.getGroovyCompileOptions().getConfigurationScript() != null) {\n            applyConfigurationScript(spec.getGroovyCompileOptions().getConfigurationScript(), configuration);\n        }\n        try {\n            configuration.setOptimizationOptions(spec.getGroovyCompileOptions().getOptimizationOptions());\n        } catch (NoSuchMethodError ignored) { /* method was only introduced in Groovy 1.8 */ }\n        Map<String, Object> jointCompilationOptions = new HashMap<String, Object>();\n        final File stubDir = spec.getGroovyCompileOptions().getStubDir();\n        stubDir.mkdirs();\n        jointCompilationOptions.put(\"stubDir\", stubDir);\n        jointCompilationOptions.put(\"keepStubs\", spec.getGroovyCompileOptions().isKeepStubs());\n        configuration.setJointCompilationOptions(jointCompilationOptions);\n\n        ClassLoader classPathLoader;\n        VersionNumber version = parseGroovyVersion();\n        if (version.compareTo(VersionNumber.parse(\"2.0\")) < 0) {\n            // using a transforming classloader is only required for older buggy Groovy versions\n            classPathLoader = new GroovyCompileTransformingClassLoader(getExtClassLoader(), new DefaultClassPath(spec.getClasspath()));\n        } else {\n            classPathLoader = new DefaultClassLoaderFactory().createIsolatedClassLoader(new DefaultClassPath(spec.getClasspath()));\n        }\n        GroovyClassLoader compileClasspathClassLoader = new GroovyClassLoader(classPathLoader, null);\n        GroovySystemLoader compileClasspathLoader = groovySystemLoaderFactory.forClassLoader(classPathLoader);\n\n        FilteringClassLoader groovyCompilerClassLoader = new FilteringClassLoader(GroovyClassLoader.class.getClassLoader());\n        groovyCompilerClassLoader.allowPackage(\"org.codehaus.groovy\");\n        groovyCompilerClassLoader.allowPackage(\"groovy\");\n        // Disallow classes from Groovy Jar that reference external classes. Such classes must be loaded from astTransformClassLoader,\n        // or a NoClassDefFoundError will occur. Essentially this is drawing a line between the Groovy compiler and the Groovy\n        // library, albeit only for selected classes that run a high risk of being statically referenced from a transform.\n        groovyCompilerClassLoader.disallowClass(\"groovy.util.GroovyTestCase\");\n        groovyCompilerClassLoader.disallowPackage(\"groovy.servlet\");\n\n        // AST transforms need their own class loader that shares compiler classes with the compiler itself\n        final GroovyClassLoader astTransformClassLoader = new GroovyClassLoader(groovyCompilerClassLoader, null);\n        // can't delegate to compileClasspathLoader because this would result in ASTTransformation interface\n        // (which is implemented by the transform class) being loaded by compileClasspathClassLoader (which is\n        // where the transform class is loaded from)\n        for (File file : spec.getClasspath()) {\n            astTransformClassLoader.addClasspath(file.getPath());\n        }\n        JavaAwareCompilationUnit unit = new JavaAwareCompilationUnit(configuration, compileClasspathClassLoader) {\n            @Override\n            public GroovyClassLoader getTransformLoader() {\n                return astTransformClassLoader;\n            }\n        };\n\n        final boolean shouldProcessAnnotations = shouldProcessAnnotations(astTransformClassLoader, spec);\n        if (shouldProcessAnnotations) {\n            // If an annotation processor is detected, we need to force Java stub generation, so the we can process annotations on Groovy classes\n            // We are forcing stub generation by tricking the groovy compiler into thinking there are java files to compile.\n            // All java files are just passed to the compile method of the JavaCompiler and aren't processed internally by the Groovy Compiler.\n            // Since we're maintaining our own list of Java files independent what's passed by the Groovy compiler, adding a non-existant java file\n            // to the sources won't cause any issues.\n            unit.addSources(new File[]{new File(\"ForceStubGeneration.java\")});\n        }\n\n        unit.addSources(Iterables.toArray(spec.getSource(), File.class));\n        unit.setCompilerFactory(new JavaCompilerFactory() {\n            public JavaCompiler createCompiler(final CompilerConfiguration config) {\n                return new JavaCompiler() {\n                    public void compile(List<String> files, CompilationUnit cu) {\n                        if (shouldProcessAnnotations) {\n                            // In order for the Groovy stubs to have annotation processors invoked against them, they must be compiled as source.\n                            // Classes compiled as a result of being on the -sourcepath do not have the annotation processor run against them\n                            spec.setSource(spec.getSource().plus(new SimpleFileCollection(stubDir).getAsFileTree()));\n                        } else {\n                            // When annotation processing isn't required, it's better to add the Groovy stubs as part of the source path.\n                            // This allows compilations to complete faster, because only the Groovy stubs that are needed by the java source are compiled.\n                            FileCollection sourcepath = new SimpleFileCollection(stubDir);\n                            if (spec.getCompileOptions().getSourcepath() != null) {\n                                sourcepath = spec.getCompileOptions().getSourcepath().plus(sourcepath);\n                            }\n                            spec.getCompileOptions().setSourcepath(sourcepath);\n                        }\n\n                        spec.setSource(spec.getSource().filter(new Spec<File>() {\n                            public boolean isSatisfiedBy(File file) {\n                                return hasExtension(file, \".java\");\n                            }\n                        }));\n\n                        try {\n                            javaCompiler.execute(spec);\n                        } catch (CompilationFailedException e) {\n                            cu.getErrorCollector().addFatalError(new SimpleMessage(e.getMessage(), cu));\n                        }\n                    }\n                };\n            }\n        });\n\n        try {\n            unit.compile();\n        } catch (org.codehaus.groovy.control.CompilationFailedException e) {\n            System.err.println(e.getMessage());\n            throw new CompilationFailedException();\n        } finally {\n            // Remove compile and AST types from the Groovy loader\n            compilerGroovyLoader.discardTypesFrom(classPathLoader);\n            compilerGroovyLoader.discardTypesFrom(astTransformClassLoader);\n            //Discard the compile loader\n            compileClasspathLoader.shutdown();\n        }\n\n        return new SimpleWorkResult(true);\n    }","id":96246,"modified_method":"@Override\n    public WorkResult execute(final GroovyJavaJointCompileSpec spec) {\n        GroovySystemLoaderFactory groovySystemLoaderFactory = new GroovySystemLoaderFactory();\n        ClassLoader compilerClassLoader = this.getClass().getClassLoader();\n        GroovySystemLoader compilerGroovyLoader = groovySystemLoaderFactory.forClassLoader(compilerClassLoader);\n\n        CompilerConfiguration configuration = new CompilerConfiguration();\n        configuration.setVerbose(spec.getGroovyCompileOptions().isVerbose());\n        configuration.setSourceEncoding(spec.getGroovyCompileOptions().getEncoding());\n        configuration.setTargetBytecode(spec.getTargetCompatibility());\n        configuration.setTargetDirectory(spec.getDestinationDir());\n        canonicalizeValues(spec.getGroovyCompileOptions().getOptimizationOptions());\n        if (spec.getGroovyCompileOptions().getConfigurationScript() != null) {\n            applyConfigurationScript(spec.getGroovyCompileOptions().getConfigurationScript(), configuration);\n        }\n        try {\n            configuration.setOptimizationOptions(spec.getGroovyCompileOptions().getOptimizationOptions());\n        } catch (NoSuchMethodError ignored) { /* method was only introduced in Groovy 1.8 */ }\n        Map<String, Object> jointCompilationOptions = new HashMap<String, Object>();\n        final File stubDir = spec.getGroovyCompileOptions().getStubDir();\n        stubDir.mkdirs();\n        jointCompilationOptions.put(\"stubDir\", stubDir);\n        jointCompilationOptions.put(\"keepStubs\", spec.getGroovyCompileOptions().isKeepStubs());\n        configuration.setJointCompilationOptions(jointCompilationOptions);\n\n        ClassLoader classPathLoader;\n        VersionNumber version = parseGroovyVersion();\n        if (version.compareTo(VersionNumber.parse(\"2.0\")) < 0) {\n            // using a transforming classloader is only required for older buggy Groovy versions\n            classPathLoader = new GroovyCompileTransformingClassLoader(getExtClassLoader(), new DefaultClassPath(spec.getClasspath()));\n        } else {\n            classPathLoader = new DefaultClassLoaderFactory().createIsolatedClassLoader(new DefaultClassPath(spec.getClasspath()));\n        }\n        GroovyClassLoader compileClasspathClassLoader = new GroovyClassLoader(classPathLoader, null);\n        GroovySystemLoader compileClasspathLoader = groovySystemLoaderFactory.forClassLoader(classPathLoader);\n\n        FilteringClassLoader.Spec groovyCompilerClassLoaderSpec = new FilteringClassLoader.Spec();\n        groovyCompilerClassLoaderSpec.allowPackage(\"org.codehaus.groovy\");\n        groovyCompilerClassLoaderSpec.allowPackage(\"groovy\");\n        // Disallow classes from Groovy Jar that reference external classes. Such classes must be loaded from astTransformClassLoader,\n        // or a NoClassDefFoundError will occur. Essentially this is drawing a line between the Groovy compiler and the Groovy\n        // library, albeit only for selected classes that run a high risk of being statically referenced from a transform.\n        groovyCompilerClassLoaderSpec.disallowClass(\"groovy.util.GroovyTestCase\");\n        groovyCompilerClassLoaderSpec.disallowPackage(\"groovy.servlet\");\n        FilteringClassLoader groovyCompilerClassLoader = new FilteringClassLoader(GroovyClassLoader.class.getClassLoader(), groovyCompilerClassLoaderSpec);\n\n        // AST transforms need their own class loader that shares compiler classes with the compiler itself\n        final GroovyClassLoader astTransformClassLoader = new GroovyClassLoader(groovyCompilerClassLoader, null);\n        // can't delegate to compileClasspathLoader because this would result in ASTTransformation interface\n        // (which is implemented by the transform class) being loaded by compileClasspathClassLoader (which is\n        // where the transform class is loaded from)\n        for (File file : spec.getClasspath()) {\n            astTransformClassLoader.addClasspath(file.getPath());\n        }\n        JavaAwareCompilationUnit unit = new JavaAwareCompilationUnit(configuration, compileClasspathClassLoader) {\n            @Override\n            public GroovyClassLoader getTransformLoader() {\n                return astTransformClassLoader;\n            }\n        };\n\n        final boolean shouldProcessAnnotations = shouldProcessAnnotations(astTransformClassLoader, spec);\n        if (shouldProcessAnnotations) {\n            // If an annotation processor is detected, we need to force Java stub generation, so the we can process annotations on Groovy classes\n            // We are forcing stub generation by tricking the groovy compiler into thinking there are java files to compile.\n            // All java files are just passed to the compile method of the JavaCompiler and aren't processed internally by the Groovy Compiler.\n            // Since we're maintaining our own list of Java files independent what's passed by the Groovy compiler, adding a non-existant java file\n            // to the sources won't cause any issues.\n            unit.addSources(new File[]{new File(\"ForceStubGeneration.java\")});\n        }\n\n        unit.addSources(Iterables.toArray(spec.getSource(), File.class));\n        unit.setCompilerFactory(new JavaCompilerFactory() {\n            public JavaCompiler createCompiler(final CompilerConfiguration config) {\n                return new JavaCompiler() {\n                    public void compile(List<String> files, CompilationUnit cu) {\n                        if (shouldProcessAnnotations) {\n                            // In order for the Groovy stubs to have annotation processors invoked against them, they must be compiled as source.\n                            // Classes compiled as a result of being on the -sourcepath do not have the annotation processor run against them\n                            spec.setSource(spec.getSource().plus(new SimpleFileCollection(stubDir).getAsFileTree()));\n                        } else {\n                            // When annotation processing isn't required, it's better to add the Groovy stubs as part of the source path.\n                            // This allows compilations to complete faster, because only the Groovy stubs that are needed by the java source are compiled.\n                            FileCollection sourcepath = new SimpleFileCollection(stubDir);\n                            if (spec.getCompileOptions().getSourcepath() != null) {\n                                sourcepath = spec.getCompileOptions().getSourcepath().plus(sourcepath);\n                            }\n                            spec.getCompileOptions().setSourcepath(sourcepath);\n                        }\n\n                        spec.setSource(spec.getSource().filter(new Spec<File>() {\n                            public boolean isSatisfiedBy(File file) {\n                                return hasExtension(file, \".java\");\n                            }\n                        }));\n\n                        try {\n                            javaCompiler.execute(spec);\n                        } catch (CompilationFailedException e) {\n                            cu.getErrorCollector().addFatalError(new SimpleMessage(e.getMessage(), cu));\n                        }\n                    }\n                };\n            }\n        });\n\n        try {\n            unit.compile();\n        } catch (org.codehaus.groovy.control.CompilationFailedException e) {\n            System.err.println(e.getMessage());\n            throw new CompilationFailedException();\n        } finally {\n            // Remove compile and AST types from the Groovy loader\n            compilerGroovyLoader.discardTypesFrom(classPathLoader);\n            compilerGroovyLoader.discardTypesFrom(astTransformClassLoader);\n            //Discard the compile loader\n            compileClasspathLoader.shutdown();\n        }\n\n        return new SimpleWorkResult(true);\n    }","commit_id":"18ee27f8561df18b19761ebd65f209eed88c19f5","url":"https://github.com/gradle/gradle"},{"original_method":"public FilteringClassLoader createFilteringClassLoader(ClassLoader parent) {\n        // See the comment for {@link #createIsolatedClassLoader} above\n        FilteringClassLoader classLoader = new FilteringClassLoader(parent);\n        if (needJaxpImpl()) {\n            makeServiceVisible(systemClassLoaderServiceLocator, classLoader, SAXParserFactory.class);\n            makeServiceVisible(systemClassLoaderServiceLocator, classLoader, DocumentBuilderFactory.class);\n            makeServiceVisible(systemClassLoaderServiceLocator, classLoader, DatatypeFactory.class);\n        }\n        return classLoader;\n    }","id":96247,"modified_method":"@Override\n    public FilteringClassLoader createFilteringClassLoader(ClassLoader parent, FilteringClassLoader.Spec spec) {\n        // See the comment for {@link #createIsolatedClassLoader} above\n        FilteringClassLoader.Spec classLoaderSpec = new FilteringClassLoader.Spec(spec);\n        if (needJaxpImpl()) {\n            makeServiceVisible(systemClassLoaderServiceLocator, classLoaderSpec, SAXParserFactory.class);\n            makeServiceVisible(systemClassLoaderServiceLocator, classLoaderSpec, DocumentBuilderFactory.class);\n            makeServiceVisible(systemClassLoaderServiceLocator, classLoaderSpec, DatatypeFactory.class);\n        }\n        return new FilteringClassLoader(parent, classLoaderSpec);\n    }","commit_id":"18ee27f8561df18b19761ebd65f209eed88c19f5","url":"https://github.com/gradle/gradle"},{"original_method":"private void makeServiceVisible(ServiceLocator locator, FilteringClassLoader classLoader, Class<?> serviceType) {\n        classLoader.allowClass(locator.getFactory(serviceType).getImplementationClass());\n        classLoader.allowResource(\"META-INF/services/\" + serviceType.getName());\n    }","id":96248,"modified_method":"private void makeServiceVisible(ServiceLocator locator, FilteringClassLoader.Spec classLoaderSpec, Class<?> serviceType) {\n        classLoaderSpec.allowClass(locator.getFactory(serviceType).getImplementationClass());\n        classLoaderSpec.allowResource(\"META-INF/services/\" + serviceType.getName());\n    }","commit_id":"18ee27f8561df18b19761ebd65f209eed88c19f5","url":"https://github.com/gradle/gradle"},{"original_method":"private ClassLoader restrictToGradleApi(ClassLoader classLoader) {\n        FilteringClassLoader rootClassLoader = classLoaderFactory.createFilteringClassLoader(classLoader);\n        rootClassLoader.allowPackage(\"org.gradle\");\n        rootClassLoader.allowResources(\"META-INF/gradle-plugins\");\n        rootClassLoader.allowPackage(\"org.apache.tools.ant\");\n        rootClassLoader.allowPackage(\"groovy\");\n        rootClassLoader.allowPackage(\"org.codehaus.groovy\");\n        rootClassLoader.allowPackage(\"groovyjarjarantlr\");\n        rootClassLoader.allowPackage(\"org.slf4j\");\n        rootClassLoader.allowPackage(\"org.apache.commons.logging\");\n        rootClassLoader.allowPackage(\"org.apache.log4j\");\n        rootClassLoader.allowPackage(\"javax.inject\");\n        return new CachingClassLoader(rootClassLoader);\n    }","id":96249,"modified_method":"private ClassLoader restrictToGradleApi(ClassLoader classLoader) {\n        FilteringClassLoader.Spec rootSpec = new FilteringClassLoader.Spec();\n        rootSpec.allowPackage(\"org.gradle\");\n        rootSpec.allowResources(\"META-INF/gradle-plugins\");\n        rootSpec.allowPackage(\"org.apache.tools.ant\");\n        rootSpec.allowPackage(\"groovy\");\n        rootSpec.allowPackage(\"org.codehaus.groovy\");\n        rootSpec.allowPackage(\"groovyjarjarantlr\");\n        rootSpec.allowPackage(\"org.slf4j\");\n        rootSpec.allowPackage(\"org.apache.commons.logging\");\n        rootSpec.allowPackage(\"org.apache.log4j\");\n        rootSpec.allowPackage(\"javax.inject\");\n        FilteringClassLoader rootClassLoader = classLoaderFactory.createFilteringClassLoader(classLoader, rootSpec);\n        return new CachingClassLoader(rootClassLoader);\n    }","commit_id":"18ee27f8561df18b19761ebd65f209eed88c19f5","url":"https://github.com/gradle/gradle"},{"original_method":"public DefaultIsolatedAntBuilder(ClassPathRegistry classPathRegistry, ClassLoaderFactory classLoaderFactory, ModuleRegistry moduleRegistry) {\n        this.classPathRegistry = classPathRegistry;\n        this.classLoaderFactory = classLoaderFactory;\n        this.moduleRegistry = moduleRegistry;\n        this.libClasspath = new DefaultClassPath();\n        GroovySystemLoaderFactory groovySystemLoaderFactory = new GroovySystemLoaderFactory();\n        this.classLoaderCache = new ClassPathToClassLoaderCache(groovySystemLoaderFactory);\n\n        List<File> antClasspath = Lists.newArrayList(classPathRegistry.getClassPath(\"ANT\").getAsFiles());\n        // Need tools.jar for compile tasks\n        File toolsJar = Jvm.current().getToolsJar();\n        if (toolsJar != null) {\n            antClasspath.add(toolsJar);\n        }\n\n        antLoader = classLoaderFactory.createIsolatedClassLoader(new DefaultClassPath(antClasspath));\n        FilteringClassLoader loggingLoader = new FilteringClassLoader(getClass().getClassLoader());\n        loggingLoader.allowPackage(\"org.slf4j\");\n        loggingLoader.allowPackage(\"org.apache.commons.logging\");\n        loggingLoader.allowPackage(\"org.apache.log4j\");\n        loggingLoader.allowClass(Logger.class);\n        loggingLoader.allowClass(LogLevel.class);\n\n        this.baseAntLoader = new CachingClassLoader(new MultiParentClassLoader(antLoader, loggingLoader));\n\n        // Need gradle core to pick up ant logging adapter, AntBuilder and such\n        ClassPath gradleCoreUrls = moduleRegistry.getModule(\"gradle-core\").getImplementationClasspath();\n        gradleCoreUrls = gradleCoreUrls.plus(moduleRegistry.getModule(\"gradle-logging\").getImplementationClasspath());\n        gradleCoreUrls = gradleCoreUrls.plus(moduleRegistry.getExternalModule(\"groovy-all\").getClasspath());\n\n        // Need Transformer (part of AntBuilder API) from base services\n        gradleCoreUrls = gradleCoreUrls.plus(moduleRegistry.getModule(\"gradle-base-services\").getImplementationClasspath());\n        this.antAdapterLoader = new VisitableURLClassLoader(baseAntLoader, gradleCoreUrls);\n\n        gradleApiGroovyLoader = groovySystemLoaderFactory.forClassLoader(this.getClass().getClassLoader());\n        antAdapterGroovyLoader = groovySystemLoaderFactory.forClassLoader(antAdapterLoader);\n    }","id":96250,"modified_method":"public DefaultIsolatedAntBuilder(ClassPathRegistry classPathRegistry, ClassLoaderFactory classLoaderFactory, ModuleRegistry moduleRegistry) {\n        this.classPathRegistry = classPathRegistry;\n        this.classLoaderFactory = classLoaderFactory;\n        this.moduleRegistry = moduleRegistry;\n        this.libClasspath = new DefaultClassPath();\n        GroovySystemLoaderFactory groovySystemLoaderFactory = new GroovySystemLoaderFactory();\n        this.classLoaderCache = new ClassPathToClassLoaderCache(groovySystemLoaderFactory);\n\n        List<File> antClasspath = Lists.newArrayList(classPathRegistry.getClassPath(\"ANT\").getAsFiles());\n        // Need tools.jar for compile tasks\n        File toolsJar = Jvm.current().getToolsJar();\n        if (toolsJar != null) {\n            antClasspath.add(toolsJar);\n        }\n\n        antLoader = classLoaderFactory.createIsolatedClassLoader(new DefaultClassPath(antClasspath));\n        FilteringClassLoader.Spec loggingLoaderSpec = new FilteringClassLoader.Spec();\n        loggingLoaderSpec.allowPackage(\"org.slf4j\");\n        loggingLoaderSpec.allowPackage(\"org.apache.commons.logging\");\n        loggingLoaderSpec.allowPackage(\"org.apache.log4j\");\n        loggingLoaderSpec.allowClass(Logger.class);\n        loggingLoaderSpec.allowClass(LogLevel.class);\n        FilteringClassLoader loggingLoader = new FilteringClassLoader(getClass().getClassLoader(), loggingLoaderSpec);\n\n        this.baseAntLoader = new CachingClassLoader(new MultiParentClassLoader(antLoader, loggingLoader));\n\n        // Need gradle core to pick up ant logging adapter, AntBuilder and such\n        ClassPath gradleCoreUrls = moduleRegistry.getModule(\"gradle-core\").getImplementationClasspath();\n        gradleCoreUrls = gradleCoreUrls.plus(moduleRegistry.getModule(\"gradle-logging\").getImplementationClasspath());\n        gradleCoreUrls = gradleCoreUrls.plus(moduleRegistry.getExternalModule(\"groovy-all\").getClasspath());\n\n        // Need Transformer (part of AntBuilder API) from base services\n        gradleCoreUrls = gradleCoreUrls.plus(moduleRegistry.getModule(\"gradle-base-services\").getImplementationClasspath());\n        this.antAdapterLoader = new VisitableURLClassLoader(baseAntLoader, gradleCoreUrls);\n\n        gradleApiGroovyLoader = groovySystemLoaderFactory.forClassLoader(this.getClass().getClassLoader());\n        antAdapterGroovyLoader = groovySystemLoaderFactory.forClassLoader(antAdapterLoader);\n    }","commit_id":"18ee27f8561df18b19761ebd65f209eed88c19f5","url":"https://github.com/gradle/gradle"},{"original_method":"private ClassLoader createImplementationClassLoader(Distribution distribution, ProgressLoggerFactory progressLoggerFactory, File userHomeDir, BuildCancellationToken cancellationToken) {\n        ClassPath implementationClasspath = distribution.getToolingImplementationClasspath(progressLoggerFactory, userHomeDir, cancellationToken);\n        LOGGER.debug(\"Using tooling provider classpath: {}\", implementationClasspath);\n        // On IBM JVM 5, ClassLoader.getResources() uses a combination of findResources() and getParent() and traverses the hierarchy rather than just calling getResources()\n        // Wrap our real classloader in one that hides the parent.\n        // TODO - move this into FilteringClassLoader\n        MultiParentClassLoader parentObfuscatingClassLoader = new MultiParentClassLoader(classLoader);\n        FilteringClassLoader filteringClassLoader = new FilteringClassLoader(parentObfuscatingClassLoader);\n        filteringClassLoader.allowPackage(\"org.gradle.tooling.internal.protocol\");\n        return new VisitableURLClassLoader(filteringClassLoader, implementationClasspath.getAsURLArray());\n    }","id":96251,"modified_method":"private ClassLoader createImplementationClassLoader(Distribution distribution, ProgressLoggerFactory progressLoggerFactory, File userHomeDir, BuildCancellationToken cancellationToken) {\n        ClassPath implementationClasspath = distribution.getToolingImplementationClasspath(progressLoggerFactory, userHomeDir, cancellationToken);\n        LOGGER.debug(\"Using tooling provider classpath: {}\", implementationClasspath);\n        // On IBM JVM 5, ClassLoader.getResources() uses a combination of findResources() and getParent() and traverses the hierarchy rather than just calling getResources()\n        // Wrap our real classloader in one that hides the parent.\n        // TODO - move this into FilteringClassLoader\n        MultiParentClassLoader parentObfuscatingClassLoader = new MultiParentClassLoader(classLoader);\n        FilteringClassLoader.Spec filterSpec = new FilteringClassLoader.Spec();\n        filterSpec.allowPackage(\"org.gradle.tooling.internal.protocol\");\n        FilteringClassLoader filteringClassLoader = new FilteringClassLoader(parentObfuscatingClassLoader, filterSpec);\n        return new VisitableURLClassLoader(filteringClassLoader, implementationClasspath.getAsURLArray());\n    }","commit_id":"18ee27f8561df18b19761ebd65f209eed88c19f5","url":"https://github.com/gradle/gradle"},{"original_method":"public FilteringClassLoader(ClassLoader parent, Spec spec) {\n        super(parent);\n        packageNames.addAll(spec.packageNames);\n        packagePrefixes.addAll(spec.packagePrefixes);\n        resourceNames.addAll(spec.resourceNames);\n        resourcePrefixes.addAll(spec.resourcePrefixes);\n        classNames.addAll(spec.classNames);\n        disallowedClassNames.addAll(spec.disallowedClassNames);\n        disallowedPackagePrefixes.addAll(spec.disallowedPackagePrefixes);\n    }","id":96252,"modified_method":"public FilteringClassLoader(ClassLoader parent, Spec spec) {\n        super(parent);\n        this.packageNames = ImmutableSet.copyOf(spec.packageNames);\n        this.packagePrefixes = ImmutableSet.copyOf(spec.packagePrefixes);\n        this.resourceNames = ImmutableSet.copyOf(spec.resourceNames);\n        this.resourcePrefixes = ImmutableSet.copyOf(spec.resourcePrefixes);\n        this.classNames = ImmutableSet.copyOf(spec.classNames);\n        this.disallowedClassNames = ImmutableSet.copyOf(spec.disallowedClassNames);\n        this.disallowedPackagePrefixes = ImmutableSet.copyOf(spec.disallowedPackagePrefixes);\n    }","commit_id":"18ee27f8561df18b19761ebd65f209eed88c19f5","url":"https://github.com/gradle/gradle"},{"original_method":"public void run() throws Exception {\n        DataInputStream instr = new DataInputStream(new EncodedStream.EncodedInput(System.in));\n\n        // Read shared packages\n        int sharedPackagesCount = instr.readInt();\n        List<String> sharedPackages = new ArrayList<String>(sharedPackagesCount);\n        for (int i = 0; i < sharedPackagesCount; i++) {\n            sharedPackages.add(instr.readUTF());\n        }\n\n        // Read worker implementation classpath\n        int classPathLength = instr.readInt();\n        URL[] implementationClassPath = new URL[classPathLength];\n        for (int i = 0; i < classPathLength; i++) {\n            String url = instr.readUTF();\n            implementationClassPath[i] = new URL(url);\n        }\n\n        // Set up worker ClassLoader\n        FilteringClassLoader filteringClassLoader = new FilteringClassLoader(getClass().getClassLoader());\n        for (String sharedPackage : sharedPackages) {\n            filteringClassLoader.allowPackage(sharedPackage);\n        }\n        URLClassLoader classLoader = new URLClassLoader(implementationClassPath, filteringClassLoader);\n\n        Class<? extends Callable> workerClass = classLoader.loadClass(\"org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker\").asSubclass(Callable.class);\n        Callable<Void> main = workerClass.getConstructor(DataInputStream.class).newInstance(instr);\n        main.call();\n    }","id":96253,"modified_method":"public void run() throws Exception {\n        DataInputStream instr = new DataInputStream(new EncodedStream.EncodedInput(System.in));\n\n        // Read shared packages\n        int sharedPackagesCount = instr.readInt();\n        List<String> sharedPackages = new ArrayList<String>(sharedPackagesCount);\n        for (int i = 0; i < sharedPackagesCount; i++) {\n            sharedPackages.add(instr.readUTF());\n        }\n\n        // Read worker implementation classpath\n        int classPathLength = instr.readInt();\n        URL[] implementationClassPath = new URL[classPathLength];\n        for (int i = 0; i < classPathLength; i++) {\n            String url = instr.readUTF();\n            implementationClassPath[i] = new URL(url);\n        }\n\n        // Set up worker ClassLoader\n        FilteringClassLoader.Spec filteringClassLoaderSpec = new FilteringClassLoader.Spec();\n        for (String sharedPackage : sharedPackages) {\n            filteringClassLoaderSpec.allowPackage(sharedPackage);\n        }\n        FilteringClassLoader filteringClassLoader = new FilteringClassLoader(getClass().getClassLoader(), filteringClassLoaderSpec);\n        URLClassLoader classLoader = new URLClassLoader(implementationClassPath, filteringClassLoader);\n\n        Class<? extends Callable> workerClass = classLoader.loadClass(\"org.gradle.process.internal.worker.child.SystemApplicationClassLoaderWorker\").asSubclass(Callable.class);\n        Callable<Void> main = workerClass.getConstructor(DataInputStream.class).newInstance(instr);\n        main.call();\n    }","commit_id":"18ee27f8561df18b19761ebd65f209eed88c19f5","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n    public CompilerDaemon getDaemon(File workingDir, final DaemonForkOptions forkOptions) {\n        return new CompilerDaemon() {\n            public <T extends CompileSpec> CompileResult execute(Compiler<T> compiler, T spec) {\n                ClassLoader groovyClassLoader = classLoaderFactory.createIsolatedClassLoader(new DefaultClassPath(forkOptions.getClasspath()));\n                GroovySystemLoader groovyLoader = groovySystemLoaderFactory.forClassLoader(groovyClassLoader);\n                FilteringClassLoader filteredGroovy = classLoaderFactory.createFilteringClassLoader(groovyClassLoader);\n                for (String packageName : forkOptions.getSharedPackages()) {\n                    filteredGroovy.allowPackage(packageName);\n                }\n\n                FilteringClassLoader loggingClassLoader = classLoaderFactory.createFilteringClassLoader(compiler.getClass().getClassLoader());\n                loggingClassLoader.allowPackage(\"org.slf4j\");\n                loggingClassLoader.allowClass(Logger.class);\n                loggingClassLoader.allowClass(LogLevel.class);\n\n                ClassLoader groovyAndLoggingClassLoader = new CachingClassLoader(new MultiParentClassLoader(loggingClassLoader, filteredGroovy));\n\n                ClassLoader workerClassLoader = new VisitableURLClassLoader(groovyAndLoggingClassLoader, ClasspathUtil.getClasspath(compiler.getClass().getClassLoader()));\n\n                try {\n                    byte[] serializedWorker = GUtil.serialize(new Worker<T>(compiler, spec, gradleUserHomeDir));\n                    ClassLoaderObjectInputStream inputStream = new ClassLoaderObjectInputStream(new ByteArrayInputStream(serializedWorker), workerClassLoader);\n                    Callable<?> worker = (Callable<?>) inputStream.readObject();\n                    Object result = worker.call();\n                    byte[] serializedResult = GUtil.serialize(result);\n                    inputStream = new ClassLoaderObjectInputStream(new ByteArrayInputStream(serializedResult), getClass().getClassLoader());\n                    return (CompileResult) inputStream.readObject();\n                } catch (Exception e) {\n                    throw UncheckedException.throwAsUncheckedException(e);\n                } finally {\n                    groovyLoader.shutdown();\n                }\n            }\n        };\n    }","id":96254,"modified_method":"@Override\n    public CompilerDaemon getDaemon(File workingDir, final DaemonForkOptions forkOptions) {\n        return new CompilerDaemon() {\n            public <T extends CompileSpec> CompileResult execute(Compiler<T> compiler, T spec) {\n                ClassLoader groovyClassLoader = classLoaderFactory.createIsolatedClassLoader(new DefaultClassPath(forkOptions.getClasspath()));\n                GroovySystemLoader groovyLoader = groovySystemLoaderFactory.forClassLoader(groovyClassLoader);\n                FilteringClassLoader.Spec filteredGroovySpec = new FilteringClassLoader.Spec();\n                for (String packageName : forkOptions.getSharedPackages()) {\n                    filteredGroovySpec.allowPackage(packageName);\n                }\n                FilteringClassLoader filteredGroovy = classLoaderFactory.createFilteringClassLoader(groovyClassLoader, filteredGroovySpec);\n\n                FilteringClassLoader.Spec loggingSpec = new FilteringClassLoader.Spec();\n                loggingSpec.allowPackage(\"org.slf4j\");\n                loggingSpec.allowClass(Logger.class);\n                loggingSpec.allowClass(LogLevel.class);\n                FilteringClassLoader loggingClassLoader = classLoaderFactory.createFilteringClassLoader(compiler.getClass().getClassLoader(), loggingSpec);\n\n                ClassLoader groovyAndLoggingClassLoader = new CachingClassLoader(new MultiParentClassLoader(loggingClassLoader, filteredGroovy));\n\n                ClassLoader workerClassLoader = new VisitableURLClassLoader(groovyAndLoggingClassLoader, ClasspathUtil.getClasspath(compiler.getClass().getClassLoader()));\n\n                try {\n                    byte[] serializedWorker = GUtil.serialize(new Worker<T>(compiler, spec, gradleUserHomeDir));\n                    ClassLoaderObjectInputStream inputStream = new ClassLoaderObjectInputStream(new ByteArrayInputStream(serializedWorker), workerClassLoader);\n                    Callable<?> worker = (Callable<?>) inputStream.readObject();\n                    Object result = worker.call();\n                    byte[] serializedResult = GUtil.serialize(result);\n                    inputStream = new ClassLoaderObjectInputStream(new ByteArrayInputStream(serializedResult), getClass().getClassLoader());\n                    return (CompileResult) inputStream.readObject();\n                } catch (Exception e) {\n                    throw UncheckedException.throwAsUncheckedException(e);\n                } finally {\n                    groovyLoader.shutdown();\n                }\n            }\n        };\n    }","commit_id":"18ee27f8561df18b19761ebd65f209eed88c19f5","url":"https://github.com/gradle/gradle"},{"original_method":"JdkTools(JavaInfo javaInfo) {\n        DefaultClassLoaderFactory defaultClassLoaderFactory = new DefaultClassLoaderFactory();\n        JavaVersion javaVersion = Jvm.current().getJavaVersion();\n        FilteringClassLoader filteringClassLoader = defaultClassLoaderFactory.createSystemFilteringClassLoader();\n        if (!javaVersion.isJava9Compatible()) {\n            File toolsJar = javaInfo.getToolsJar();\n            if (toolsJar == null) {\n                throw new IllegalStateException(\"Could not find tools.jar. Please check that \"\n                                                + javaInfo.getJavaHome().getAbsolutePath()\n                                                + \" contains a valid JDK installation.\");\n            }\n            DefaultClassPath defaultClassPath = new DefaultClassPath(toolsJar);\n            isolatedToolsLoader = new VisitableURLClassLoader(filteringClassLoader, defaultClassPath.getAsURLs());\n            isJava9Compatible = false;\n        } else {\n            filteringClassLoader.allowPackage(\"com.sun.tools\");\n            isolatedToolsLoader = filteringClassLoader;\n            isJava9Compatible = true;\n        }\n    }","id":96255,"modified_method":"JdkTools(JavaInfo javaInfo) {\n        DefaultClassLoaderFactory defaultClassLoaderFactory = new DefaultClassLoaderFactory();\n        JavaVersion javaVersion = Jvm.current().getJavaVersion();\n        boolean java9Compatible = javaVersion.isJava9Compatible();\n        FilteringClassLoader filteringClassLoader = getSystemFilteringClassLoader(defaultClassLoaderFactory, java9Compatible);\n        if (!java9Compatible) {\n            File toolsJar = javaInfo.getToolsJar();\n            if (toolsJar == null) {\n                throw new IllegalStateException(\"Could not find tools.jar. Please check that \"\n                                                + javaInfo.getJavaHome().getAbsolutePath()\n                                                + \" contains a valid JDK installation.\");\n            }\n            DefaultClassPath defaultClassPath = new DefaultClassPath(toolsJar);\n            isolatedToolsLoader = new VisitableURLClassLoader(filteringClassLoader, defaultClassPath.getAsURLs());\n            isJava9Compatible = false;\n        } else {\n            isolatedToolsLoader = filteringClassLoader;\n            isJava9Compatible = true;\n        }\n    }","commit_id":"18ee27f8561df18b19761ebd65f209eed88c19f5","url":"https://github.com/gradle/gradle"},{"original_method":"public ModelClassLoaderFactory(ClassLoaderFactory classLoaderFactory) {\n        this.classLoaderFactory = classLoaderFactory;\n        ClassLoader parent = getClass().getClassLoader();\n        FilteringClassLoader filter = new FilteringClassLoader(parent);\n        filter.allowPackage(\"org.gradle.tooling.internal.protocol\");\n        filter.allowClass(TaskExecutionRequest.class);\n        rootClassLoader = filter;\n    }","id":96256,"modified_method":"public ModelClassLoaderFactory(ClassLoaderFactory classLoaderFactory) {\n        this.classLoaderFactory = classLoaderFactory;\n        ClassLoader parent = getClass().getClassLoader();\n        FilteringClassLoader.Spec filterSpec = new FilteringClassLoader.Spec();\n        filterSpec.allowPackage(\"org.gradle.tooling.internal.protocol\");\n        filterSpec.allowClass(TaskExecutionRequest.class);\n        rootClassLoader = new FilteringClassLoader(parent, filterSpec);\n    }","commit_id":"18ee27f8561df18b19761ebd65f209eed88c19f5","url":"https://github.com/gradle/gradle"},{"original_method":"@Override\n\tpublic List<PersistentChosenBlock> makeBlocks(PersistentChosenRequest request, RequestScheduler sched, ObjectContainer container, ClientContext context) {\n\t\tPersistentChosenBlock block = new PersistentChosenBlock(true, request, getBlock(container, context, false), null, null, sched);\n\t\treturn Collections.singletonList(block);\n\t}","id":96257,"modified_method":"@Override\n\tpublic List<PersistentChosenBlock> makeBlocks(PersistentChosenRequest request, RequestScheduler sched, ObjectContainer container, ClientContext context) {\n\t\tClientKeyBlock encoded = getBlock(container, context, false);\n\t\tif(encoded == null) return null;\n\t\tPersistentChosenBlock block = new PersistentChosenBlock(true, request, encoded, null, null, sched);\n\t\treturn Collections.singletonList(block);\n\t}","commit_id":"6bfd19f40d893a492734c161716e45685fad6f28","url":"https://github.com/freenet/fred"},{"original_method":"private static boolean isEmpty(GroovyPsiElement body) {\n      if (!(body instanceof GrBlockStatement)) {\n        return false;\n      }\n      final GrBlockStatement block = (GrBlockStatement) body;\n      final GrStatement[] statements = block.getBlock().getStatements();\n      return statements.length == 0;\n    }","id":96258,"modified_method":"private static boolean isEmpty(GroovyPsiElement body) {\n      if (!(body instanceof GrBlockStatement)) {\n        return false;\n      }\n      final GrBlockStatement block = (GrBlockStatement)body;\n      final GrOpenBlock openBlock = block.getBlock();\n\n      final PsiElement brace = openBlock.getLBrace();\n      if (brace == null) return false;\n      final PsiElement nextNonWhitespace = PsiUtil.skipWhitespaces(brace.getNextSibling(), true);\n      return nextNonWhitespace == openBlock.getRBrace();\n    }","commit_id":"f37585170a65d22650c1c3db3aeef948d9ea7573","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public String buildErrorString(Object... args) {\n    if (args[0] instanceof GrIfStatement) {\n      return \"'#ref' Statement has empty branch\";\n    } else {\n      return \"'#ref' Statement has empty body\";\n    }\n  }","id":96259,"modified_method":"public String buildErrorString(Object... args) {\n    if (args[0] instanceof GrIfStatement) {\n      return \"'#ref' statement has empty branch\";\n    }\n    else {\n      return \"'#ref' statement has empty body\";\n    }\n  }","commit_id":"f37585170a65d22650c1c3db3aeef948d9ea7573","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void setupOverridingMethodBody(Project project, PsiMethod method, GrMethod result, FileTemplate template, PsiSubstitutor substitutor) {\n    final PsiType returnType = substitutor.substitute(method.getReturnType());\n\n    String returnTypeText = \"\";\n    if (returnType != null) {\n      returnTypeText = returnType.getPresentableText();\n    }\n    Properties properties = new Properties();\n\n    properties.setProperty(FileTemplate.ATTRIBUTE_RETURN_TYPE, returnTypeText);\n    properties.setProperty(FileTemplate.ATTRIBUTE_DEFAULT_RETURN_VALUE, PsiTypesUtil.getDefaultValueOfType(returnType));\n    properties.setProperty(FileTemplate.ATTRIBUTE_CALL_SUPER, callSuper(method, result));\n    FileTemplateUtil.setClassAndMethodNameProperties(properties, method.getContainingClass(), result);\n\n    try {\n      String bodyText = template.getText(properties);\n      final GrCodeBlock newBody = GroovyElementFactory.getInstance(project).createMetodBodyFormText(\"\\n\" + bodyText + \"\\n\");\n      result.getNode().replaceChild(result.getBlock().getNode(), newBody.getNode());\n\n    } catch (IOException e) {\n      LOG.error(e);\n    }\n  }","id":96260,"modified_method":"private static void setupOverridingMethodBody(Project project, PsiMethod method, GrMethod result, FileTemplate template, PsiSubstitutor substitutor) {\n    final PsiType returnType = substitutor.substitute(method.getReturnType());\n\n    String returnTypeText = \"\";\n    if (returnType != null) {\n      returnTypeText = returnType.getPresentableText();\n    }\n    Properties properties = new Properties();\n\n    properties.setProperty(FileTemplate.ATTRIBUTE_RETURN_TYPE, returnTypeText);\n    properties.setProperty(FileTemplate.ATTRIBUTE_DEFAULT_RETURN_VALUE, PsiTypesUtil.getDefaultValueOfType(returnType));\n    properties.setProperty(FileTemplate.ATTRIBUTE_CALL_SUPER, callSuper(method, result));\n    FileTemplateUtil.setClassAndMethodNameProperties(properties, method.getContainingClass(), result);\n\n    try {\n      String bodyText = template.getText(properties);\n      final GrCodeBlock newBody = GroovyElementFactory.getInstance(project).createMetodBodyFormText(\"\\n\" + bodyText + \"\\n\");\n\n      final ASTNode resultNode = result.getNode();\n      assert resultNode != null;\n      final GrOpenBlock resultBlock = result.getBlock();\n      if (resultBlock == null) return;\n\n      resultNode.replaceChild(resultBlock.getNode(), newBody.getNode());\n\n    } catch (IOException e) {\n      LOG.error(e);\n    }\n  }","commit_id":"2685ac7d8966a61f9974e72c733f0f1e39120b01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void invokeOverrideImplement(final Project project, final Editor editor, final PsiFile file, boolean isImplement) {\n    final int offset = editor.getCaretModel().getOffset();\n\n    PsiElement parent = file.findElementAt(offset);\n    if (parent == null) return;\n\n    while (!(parent instanceof PsiClass)) {\n      parent = parent.getParent();\n      if (parent == null) return;\n    }\n\n    final PsiClass aClass = (PsiClass) parent;\n\n    if (isImplement && aClass.isInterface()) return;\n\n    Collection<CandidateInfo> candidates = OverrideImplementUtil.getMethodsToOverrideImplement(aClass, isImplement);\n    if (candidates.isEmpty()) return;\n\n    List<PsiMethodMember> classMembers = new ArrayList<PsiMethodMember>();\n    for (CandidateInfo candidate : candidates) {\n      classMembers.add(new PsiMethodMember(candidate));\n    }\n\n\n    MemberChooser<PsiMethodMember> chooser = new MemberChooser<PsiMethodMember>(classMembers.toArray(new PsiMethodMember[classMembers.size()]), false, true, project);\n    chooser.setTitle(isImplement ? GroovyBundle.message(\"select.methods.to.override\") : GroovyBundle.message(\"select.methods.to.implement\"));\n    chooser.show();\n\n    final List<PsiMethodMember> selectedElements = chooser.getSelectedElements();\n    if (selectedElements == null || selectedElements.size() == 0) return;\n\n    for (PsiMethodMember methodMember : selectedElements) {\n      final PsiMethod method = methodMember.getElement();\n      final PsiSubstitutor substitutor = methodMember.getSubstitutor();\n\n      final boolean isAbstract = method.hasModifierProperty(PsiModifier.ABSTRACT);\n\n//      assert isAbstract == isImplement;\n      String templName = isAbstract ? FileTemplateManager.TEMPLATE_IMPLEMENTED_METHOD_BODY : FileTemplateManager.TEMPLATE_OVERRIDDEN_METHOD_BODY;\n\n      final FileTemplate template = FileTemplateManager.getInstance().getCodeTemplate(templName);\n      final GrMethod result = createOverrideImplementMethodSignature(project, method, substitutor, aClass);\n\n      ApplicationManager.getApplication().runWriteAction(new Runnable() {\n        public void run() {\n          try {\n            result.getModifierList().setModifierProperty(PsiModifier.ABSTRACT, false/*aClass.isInterface()*/);\n            result.getModifierList().setModifierProperty(PsiModifier.NATIVE, false);\n\n            setupOverridingMethodBody(project, method, result, template, substitutor);\n\n            final GrTypeDefinitionBody classBody = ((GrTypeDefinition) aClass).getBody();\n            final PsiMethod[] methods = aClass.getMethods();\n\n            ASTNode anchor = null;\n\n            final int caretPosition = editor.getCaretModel().getOffset();\n            final PsiElement thisCaretPsiElement = file.findElementAt(caretPosition);\n\n            final GrTopLevelDefintion previousTopLevelElement = PsiUtil.findPreviousTopLevelElementByThisElement(thisCaretPsiElement);\n\n            if (thisCaretPsiElement != null && thisCaretPsiElement.getParent() instanceof GrTypeDefinitionBody) {\n              anchor = thisCaretPsiElement.getNode();\n\n            } else if (previousTopLevelElement != null && previousTopLevelElement instanceof GrMethod) {\n              final PsiElement nextElement = previousTopLevelElement.getNextSibling();\n              if (nextElement != null) {\n                anchor = nextElement.getNode();\n              }\n            } else if (methods.length != 0) {\n              final PsiMethod lastMethod = methods[methods.length - 1];\n              if (lastMethod != null) {\n                final PsiElement nextSibling = lastMethod.getNextSibling();\n                if (nextSibling != null) {\n                  anchor = nextSibling.getNode();\n                }\n              }\n\n            } else {\n              anchor = classBody.getFirstChild().getNextSibling().getNode();\n            }\n\n            final ASTNode lineTerminator = GroovyElementFactory.getInstance(project).createLineTerminator().getNode();\n\n            assert lineTerminator != null;\n            final ASTNode resultNode = result.getNode();\n            assert resultNode != null;\n\n            classBody.getNode().addChild(lineTerminator, anchor);\n            classBody.getNode().addChild(resultNode, anchor);\n\n            final TextRange range = result.getTextRange();\n            CodeStyleManager.getInstance(project).reformatRange(result.getContainingFile(), range.getStartOffset(), range.getEndOffset());\n            PsiUtil.shortenReferences(result);\n          } catch (IncorrectOperationException e) {\n            LOG.error(e);\n          }\n        }\n      });\n\n    }\n  }","id":96261,"modified_method":"public static void invokeOverrideImplement(final Project project, final Editor editor, final PsiFile file, boolean isImplement) {\n    final int offset = editor.getCaretModel().getOffset();\n\n    PsiElement parent = file.findElementAt(offset);\n    if (parent == null) return;\n\n    while (!(parent instanceof PsiClass)) {\n      parent = parent.getParent();\n      if (parent == null) return;\n    }\n\n    final PsiClass aClass = (PsiClass) parent;\n\n    if (isImplement && aClass.isInterface()) return;\n\n    Collection<CandidateInfo> candidates = OverrideImplementUtil.getMethodsToOverrideImplement(aClass, isImplement);\n    if (candidates.isEmpty()) return;\n\n    List<PsiMethodMember> classMembers = new ArrayList<PsiMethodMember>();\n    for (CandidateInfo candidate : candidates) {\n      classMembers.add(new PsiMethodMember(candidate));\n    }\n\n\n    MemberChooser<PsiMethodMember> chooser = new MemberChooser<PsiMethodMember>(classMembers.toArray(new PsiMethodMember[classMembers.size()]), false, true, project);\n    chooser.setTitle(isImplement ? GroovyBundle.message(\"select.methods.to.override\") : GroovyBundle.message(\"select.methods.to.implement\"));\n    chooser.show();\n\n    final List<PsiMethodMember> selectedElements = chooser.getSelectedElements();\n    if (selectedElements == null || selectedElements.size() == 0) return;\n\n    for (PsiMethodMember methodMember : selectedElements) {\n      final PsiMethod method = methodMember.getElement();\n      final PsiSubstitutor substitutor = methodMember.getSubstitutor();\n\n      final boolean isAbstract = method.hasModifierProperty(PsiModifier.ABSTRACT);\n\n//      assert isAbstract == isImplement;\n      String templName = isAbstract ? FileTemplateManager.TEMPLATE_IMPLEMENTED_METHOD_BODY : FileTemplateManager.TEMPLATE_OVERRIDDEN_METHOD_BODY;\n\n      final FileTemplate template = FileTemplateManager.getInstance().getCodeTemplate(templName);\n      final GrMethod result = createOverrideImplementMethodSignature(project, method, substitutor, aClass);\n\n      ApplicationManager.getApplication().runWriteAction(new Runnable() {\n        public void run() {\n          try {\n            result.getModifierList().setModifierProperty(PsiModifier.ABSTRACT, false/*aClass.isInterface()*/);\n            result.getModifierList().setModifierProperty(PsiModifier.NATIVE, false);\n\n            setupOverridingMethodBody(project, method, result, template, substitutor);\n\n            final GrTypeDefinitionBody classBody = ((GrTypeDefinition) aClass).getBody();\n            final PsiMethod[] methods = aClass.getMethods();\n\n            ASTNode anchor = null;\n\n            final int caretPosition = editor.getCaretModel().getOffset();\n            final PsiElement thisCaretPsiElement = file.findElementAt(caretPosition);\n\n            final GrTopLevelDefintion previousTopLevelElement = PsiUtil.findPreviousTopLevelElementByThisElement(thisCaretPsiElement);\n\n            if (thisCaretPsiElement != null && thisCaretPsiElement.getParent() instanceof GrTypeDefinitionBody) {\n              anchor = thisCaretPsiElement.getNode();\n\n            } else if (previousTopLevelElement != null && previousTopLevelElement instanceof GrMethod) {\n              final PsiElement nextElement = previousTopLevelElement.getNextSibling();\n              if (nextElement != null) {\n                anchor = nextElement.getNode();\n              }\n            } else if (methods.length != 0) {\n              final PsiMethod lastMethod = methods[methods.length - 1];\n              if (lastMethod != null) {\n                final PsiElement nextSibling = lastMethod.getNextSibling();\n                if (nextSibling != null) {\n                  anchor = nextSibling.getNode();\n                }\n              }\n\n            } else {\n              final PsiElement firstChild = classBody.getFirstChild();\n              assert firstChild != null;\n              final PsiElement nextElement = firstChild.getNextSibling();\n              assert nextElement != null;\n              \n              anchor = nextElement.getNode();\n            }\n\n            final ASTNode lineTerminator = GroovyElementFactory.getInstance(project).createLineTerminator().getNode();\n\n            assert lineTerminator != null;\n            final ASTNode resultNode = result.getNode();\n            assert resultNode != null;\n\n            classBody.getNode().addChild(lineTerminator, anchor);\n            classBody.getNode().addChild(resultNode, anchor);\n\n            final TextRange range = result.getTextRange();\n            CodeStyleManager.getInstance(project).reformatRange(result.getContainingFile(), range.getStartOffset(), range.getEndOffset());\n            PsiUtil.shortenReferences(result);\n          } catch (IncorrectOperationException e) {\n            LOG.error(e);\n          }\n        }\n      });\n\n    }\n  }","commit_id":"2685ac7d8966a61f9974e72c733f0f1e39120b01","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected ContentObject getFirstBlock() throws IOException {\n\t\tif (null != _startingBlockIndex) {\n\t\t\treturn getBlock(_startingBlockIndex);\n\t\t} else {\n\t\t\tthrow new IOException(\"Stream does not have a valid starting block number.\");\n\t\t}\n\t}","id":96262,"modified_method":"protected ContentObject getFirstBlock() throws IOException {\n\t\tif (null != _startingBlockIndex) {\n\t\t\tContentObject firstBlock = getBlock(_startingBlockIndex);\n\t\t\tif ((null != firstBlock) && (firstBlock.signedInfo().getType().equals(ContentType.GONE))) {\n\t\t\t\t_goneBlock = firstBlock;\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn firstBlock;\n\t\t} else {\n\t\t\tthrow new IOException(\"Stream does not have a valid starting block number.\");\n\t\t}\n\t}","commit_id":"e96ec0a05d6d6ed6e555ea30185b137c45411287","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"protected ContentObject getNextBlock() throws IOException {\n\t\t\n\t\t// Check to see if finalBlockID is the current block. If so, there should\n\t\t// be no next block. (If the writer makes a mistake and guesses the wrong\n\t\t// value for finalBlockID, they won't put that wrong value in the block they're\n\t\t// guessing itself -- unless they want to try to extend a \"closed\" stream.\n\t\t// Normally by the time they write that block, they either know they're done or not.\n\t\tif (null != _currentBlock.signedInfo().getFinalBlockID()) {\n\t\t\tif (Arrays.equals(_currentBlock.signedInfo().getFinalBlockID(), _currentBlock.name().lastComponent())) {\n\t\t\t\tLibrary.logger().info(\"getNextBlock: there is no next block. We have block: \" + \n\t\t\t\t\t\tDataUtils.printHexBytes(_currentBlock.name().lastComponent()) + \" which is marked as the final block.\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t\n\t\tLibrary.logger().info(\"getNextBlock: getting block after \" + _currentBlock.name());\n\t\treturn getBlock(nextBlockIndex());\n\t}","id":96263,"modified_method":"protected ContentObject getNextBlock() throws IOException {\n\t\t\n\t\t// We're looking at content marked GONE\n\t\tif (null != _goneBlock) {\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t// Check to see if finalBlockID is the current block. If so, there should\n\t\t// be no next block. (If the writer makes a mistake and guesses the wrong\n\t\t// value for finalBlockID, they won't put that wrong value in the block they're\n\t\t// guessing itself -- unless they want to try to extend a \"closed\" stream.\n\t\t// Normally by the time they write that block, they either know they're done or not.\n\t\tif (null != _currentBlock.signedInfo().getFinalBlockID()) {\n\t\t\tif (Arrays.equals(_currentBlock.signedInfo().getFinalBlockID(), _currentBlock.name().lastComponent())) {\n\t\t\t\tLibrary.logger().info(\"getNextBlock: there is no next block. We have block: \" + \n\t\t\t\t\t\tDataUtils.printHexBytes(_currentBlock.name().lastComponent()) + \" which is marked as the final block.\");\n\t\t\t\treturn null;\n\t\t\t}\n\t\t}\n\t\t\n\t\tLibrary.logger().info(\"getNextBlock: getting block after \" + _currentBlock.name());\n\t\treturn getBlock(nextBlockIndex());\n\t}","commit_id":"e96ec0a05d6d6ed6e555ea30185b137c45411287","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public void update(CCNInputStream inputStream) throws IOException, XMLStreamException {\n\t\tsuper.update(inputStream);\n\t\t_currentName = inputStream.baseName();\n\t\t_flowControl.addNameSpace(_currentName);\n\t}","id":96264,"modified_method":"public void update(CCNInputStream inputStream) throws IOException, XMLStreamException {\n\t\ttry {\n\t\t\tsuper.update(inputStream);\n\t\t} catch (IOException ioex) {\n\t\t\tLibrary.logger().info(\"update: got IOException \" + ioex.getMessage() + \" is data actually just gone? \" + inputStream.isGone());\n\t\t\tif (inputStream.isGone()) {\n\t\t\t\t_isGone = true;\n\t\t\t\t_currentName = inputStream.deletionInformation().name();\n\t\t\t} else {\n\t\t\t\tthrow ioex;\n\t\t\t}\n\t\t} catch (XMLStreamException xsex) {\n\t\t\tLibrary.logger().info(\"update: got XMLStreamException \" + xsex.getMessage() + \" is data actually just gone? \" + inputStream.isGone());\n\t\t\tif (inputStream.isGone()) {\n\t\t\t\t_isGone = true;\n\t\t\t\t_currentName = inputStream.deletionInformation().name();\n\t\t\t} else {\n\t\t\t\tthrow xsex;\n\t\t\t}\n\t\t}\n\t\t_currentName = inputStream.baseName();\n\t\t_flowControl.addNameSpace(_currentName);\n\t}","commit_id":"e96ec0a05d6d6ed6e555ea30185b137c45411287","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"public Timestamp getVersion() {\n\t\tif ((null == _currentName) || (null == _lastSaved)) {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\treturn VersioningProfile.getVersionAsTimestamp(_currentName);\n\t\t} catch (VersionMissingException e) {\n\t\t\t// TODO Auto-generated catch block\n\t\t\te.printStackTrace();\n\t\t\treturn null;\n\t\t}\n\t}","id":96265,"modified_method":"public Timestamp getVersion() {\n\t\tif ((null == _currentName) || (null == _lastSaved)) {\n\t\t\treturn null;\n\t\t}\n\t\ttry {\n\t\t\treturn VersioningProfile.getVersionAsTimestamp(_currentName);\n\t\t} catch (VersionMissingException e) {\n\t\t\treturn null;\n\t\t}\n\t}","commit_id":"e96ec0a05d6d6ed6e555ea30185b137c45411287","url":"https://github.com/ProjectCCNx/ccnx"},{"original_method":"private Block getBlock(VcsFileRevision revision){\n    if (myRevisionToContentMap.containsKey(revision))\n      return myRevisionToContentMap.get(revision);\n\n    int index = myRevisions.indexOf(revision);\n\n    if (index == 0)\n      myRevisionToContentMap.put(revision, new Block(getContentOf(revision),  mySelectionStart, mySelectionEnd));\n    else {\n      Block prevBlock = getBlock(myRevisions.get(index - 1));\n      myRevisionToContentMap.put(revision, new FindBlock(getContentOf(revision), prevBlock).getBlockInThePrevVersion());\n    }\n    return myRevisionToContentMap.get(revision);\n  }","id":96266,"modified_method":"@Nullable\n  private Block getBlock(VcsFileRevision revision){\n    if (myRevisionToContentMap.containsKey(revision))\n      return myRevisionToContentMap.get(revision);\n\n    int index = myRevisions.indexOf(revision);\n\n    final String revisionContent = getContentOf(revision);\n    if (revisionContent == null) return null;\n    if (index == 0)\n      myRevisionToContentMap.put(revision, new Block(revisionContent,  mySelectionStart, mySelectionEnd));\n    else {\n      Block prevBlock = getBlock(myRevisions.get(index - 1));\n      if (prevBlock == null) return null;\n      myRevisionToContentMap.put(revision, new FindBlock(revisionContent, prevBlock).getBlockInThePrevVersion());\n    }\n    return myRevisionToContentMap.get(revision);\n  }","commit_id":"9cdce0e00ac81bdac40e355121082adbe62d7629","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected String getContentToShow(VcsFileRevision revision) {\n    return getBlock(revision).getBlockContent();\n  }","id":96267,"modified_method":"protected String getContentToShow(VcsFileRevision revision) {\n    final Block block = getBlock(revision);\n    if (block == null) return \"\";\n    return block.getBlockContent();\n  }","commit_id":"9cdce0e00ac81bdac40e355121082adbe62d7629","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private Set<? extends NodeMetadata> createServersWithRetry(final String group, final int count,\n\t\t\tfinal Template template)\n\t\t\tthrows RunNodesException {\n\t\tint retryAttempts = 0;\n\t\tboolean retry;\n\n\t\tSet<? extends NodeMetadata> nodes = null;\n\n\t\tdo {\n\t\t\tretry = false;\n\t\t\ttry {\n\t\t\t\tlogger.info(\"starting machine with template : \" + template);\n\t\t\t\tnodes = this.context.getComputeService().createNodesInGroup(\n\t\t\t\t\t\tgroup, count, template);\n\t\t\t} catch (final ResourceNotFoundException e) {\n\t\t\t\tif (retryAttempts < NUMBER_OF_RETRY_ATTEMPTS && e.getMessage() != null && e.getMessage().contains(\n\t\t\t\t\t\t\"The security group\") && e.getMessage().contains(\n\t\t\t\t\t\t\"does not exist\")) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(RETRY_SLEEP_TIMEOUT_IN_MILLIS);\n\t\t\t\t\t} catch (final InterruptedException e1) {\n\t\t\t\t\t\t/* do nothing */\n\t\t\t\t\t}\n\t\t\t\t\tretryAttempts += 1;\n\t\t\t\t\tretry = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t} while (retry);\n\n\t\treturn nodes;\n\t}","id":96268,"modified_method":"private Set<? extends NodeMetadata> createServersWithRetry(final String group, final int count,\n\t\t\tfinal Template template)\n\t\t\tthrows RunNodesException {\n\t\tint retryAttempts = 0;\n\t\tboolean retry;\n\n\t\tSet<? extends NodeMetadata> nodes = null;\n\n\t\tdo {\n\t\t\tretry = false;\n\t\t\ttry {\n\t\t\t\tif(logger.isLoggable(Level.FINE)) {\n\t\t\t\t\tlogger.fine(\"starting machine with template : \" + template);\n\t\t\t\t}\n\t\t\t\tnodes = this.context.getComputeService().createNodesInGroup(\n\t\t\t\t\t\tgroup, count, template);\n\t\t\t} catch (final ResourceNotFoundException e) {\n\t\t\t\tif (retryAttempts < NUMBER_OF_RETRY_ATTEMPTS && e.getMessage() != null && e.getMessage().contains(\n\t\t\t\t\t\t\"The security group\") && e.getMessage().contains(\n\t\t\t\t\t\t\"does not exist\")) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tThread.sleep(RETRY_SLEEP_TIMEOUT_IN_MILLIS);\n\t\t\t\t\t} catch (final InterruptedException e1) {\n\t\t\t\t\t\t/* do nothing */\n\t\t\t\t\t}\n\t\t\t\t\tretryAttempts += 1;\n\t\t\t\t\tretry = true;\n\t\t\t\t\tcontinue;\n\t\t\t\t} else {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t} while (retry);\n\n\t\treturn nodes;\n\t}","commit_id":"546ed5079077041e041b32ad633ddb1ebee153d6","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private synchronized void renewTokenIfNeeded() throws OpenstackJsonSerializationException {\n\t\tif (this.isTokenExpiredSoon()) {\n\t\t\tif (logger.isLoggable(Level.FINEST)) {\n\t\t\t\tlogger.finest(\"Token expired. Request a new token\");\n\t\t\t}\n\t\t\tthis.initToken();\n\t\t}\n\t}","id":96269,"modified_method":"private synchronized void renewTokenIfNeeded() throws OpenstackJsonSerializationException {\n\t\tif (this.isTokenExpiredSoon()) {\n\t\t\tif (logger.isLoggable(Level.FINEST)) {\n\t\t\t\tlogger.finest(\"Token not found or expired. Request a new token\");\n\t\t\t}\n\t\t\tthis.initToken();\n\t\t}\n\t}","commit_id":"bf7bb0e594b7de6f6d0b7dc8dc199b243c9e6c70","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\n\t * Initialize Openstack token.\n\t * \n\t * @throws OpenstackJsonSerializationException\n\t *             A problem occurs when requesting Openstack server.\n\t */\n\tprivate void initToken() throws OpenstackJsonSerializationException {\n\t\tfinal Client client = Client.create();\n\t\tif (WIRE_LOGGER.isLoggable(Level.FINE)) {\n\t\t\tthis.serviceClient.addFilter(new LoggingFilter(WIRE_LOGGER));\n\t\t}\n\t\ttry {\n\t\t\tlogger.info(\"Request openstack \" + this.getServiceName() + \" new token.\");\n\t\t\tfinal WebResource webResource = client.resource(this.endpoint);\n\t\t\tfinal String tokenJsonRequest = \"{\\\"auth\\\":{\\\"passwordCredentials\\\":\"\n\t\t\t\t\t+ \"{\\\"username\\\": \\\"%s\\\", \\\"password\\\":\\\"%s\\\"}, \\\"tenantName\\\":\\\"%s\\\"}}\";\n\t\t\tfinal String input = String.format(tokenJsonRequest, username, password, tenant);\n\t\t\tfinal String response = webResource.path(\"tokens\").accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t.type(MediaType.APPLICATION_JSON_TYPE).post(String.class, input);\n\t\t\tthis.token = JsonUtils.unwrapRootToObject(TokenAccess.class, response, false);\n\t\t} finally {\n\t\t\tif (client != null) {\n\t\t\t\tclient.destroy();\n\t\t\t}\n\t\t}\n\t}","id":96270,"modified_method":"/**\n\t * Initialize Openstack token.\n\t * \n\t * @throws OpenstackJsonSerializationException\n\t *             A problem occurs when requesting Openstack server.\n\t */\n\tprivate void initToken() throws OpenstackJsonSerializationException {\n\t\tfinal Client client = Client.create();\n\t\tif (WIRE_LOGGER.isLoggable(Level.FINE)) {\n\t\t\tthis.serviceClient.addFilter(new LoggingFilter(WIRE_LOGGER));\n\t\t}\n\t\ttry {\n\t\t\tif (logger.isLoggable(Level.FINE)) {\n\t\t\t\tlogger.fine(\"Request openstack \" + this.getServiceType() + \" new token.\");\n\t\t\t}\n\t\t\tfinal WebResource webResource = client.resource(this.endpoint);\n\t\t\tfinal String tokenJsonRequest = \"{\\\"auth\\\":{\\\"passwordCredentials\\\":\"\n\t\t\t\t\t+ \"{\\\"username\\\": \\\"%s\\\", \\\"password\\\":\\\"%s\\\"}, \\\"tenantName\\\":\\\"%s\\\"}}\";\n\t\t\tfinal String input = String.format(tokenJsonRequest, username, password, tenant);\n\t\t\tfinal String response = webResource.path(\"tokens\").accept(MediaType.APPLICATION_JSON)\n\t\t\t\t\t.type(MediaType.APPLICATION_JSON_TYPE).post(String.class, input);\n\t\t\tthis.token = JsonUtils.unwrapRootToObject(TokenAccess.class, response, false);\n\t\t} finally {\n\t\t\tif (client != null) {\n\t\t\t\tclient.destroy();\n\t\t\t}\n\t\t}\n\t}","commit_id":"bf7bb0e594b7de6f6d0b7dc8dc199b243c9e6c70","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\n\t * Return the WebResource pre configured with the endpoint.\n\t * \n\t * @return The pre configured WebResource.\n\t * @throws OpenstackException\n\t *             A problem occurs when requesting Openstack server.\n\t */\n\tprotected WebResource getWebResource() throws OpenstackException {\n\t\tsynchronized (this.webResourceMutex) {\n\t\t\tif (this.serviceWebResource == null) {\n\t\t\t\tthis.renewTokenIfNeeded();\n\t\t\t\tthis.endpoint = this.getEndpoint();\n\t\t\t\tthis.serviceClient = Client.create();\n\t\t\t\tif (WIRE_LOGGER.isLoggable(Level.FINE)) {\n\t\t\t\t\tthis.serviceClient.addFilter(new LoggingFilter(WIRE_LOGGER));\n\t\t\t\t}\n\t\t\t\tthis.serviceWebResource = this.serviceClient.resource(endpoint);\n\t\t\t\tlogger.info(\"Openstack endpoint: \" + endpoint);\n\t\t\t}\n\t\t\treturn serviceWebResource;\n\t\t}\n\t}","id":96271,"modified_method":"/**\n\t * Return the WebResource pre configured with the endpoint.\n\t * \n\t * @return The pre configured WebResource.\n\t * @throws OpenstackException\n\t *             A problem occurs when requesting Openstack server.\n\t */\n\tprotected WebResource getWebResource() throws OpenstackException {\n\t\tsynchronized (this.webResourceMutex) {\n\t\t\tif (this.serviceWebResource == null) {\n\t\t\t\tthis.renewTokenIfNeeded();\n\t\t\t\tthis.endpoint = this.getEndpoint();\n\t\t\t\tthis.serviceClient = Client.create();\n\t\t\t\tif (WIRE_LOGGER.isLoggable(Level.FINE)) {\n\t\t\t\t\tthis.serviceClient.addFilter(new LoggingFilter(WIRE_LOGGER));\n\t\t\t\t}\n\t\t\t\tthis.serviceWebResource = this.serviceClient.resource(endpoint);\n\t\t\t\tif (logger.isLoggable(Level.FINE)) {\n\t\t\t\t\tlogger.fine(\"Openstack endpoint: \" + endpoint);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn serviceWebResource;\n\t\t}\n\t}","commit_id":"bf7bb0e594b7de6f6d0b7dc8dc199b243c9e6c70","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Override\n\tpublic void validateCloudConfiguration(final ValidationContext validationContext)\n\t\t\tthrows CloudProvisioningException {\n\n\t\tString templateName;\n\t\tString cloudFolder = CLOUDS_FOLDER_PATH + FILE_SEPARATOR + cloud.getName();\n\t\tString groovyFile = cloudFolder + FILE_SEPARATOR + cloud.getName() + \"-cloud.groovy\";\n\t\tString propertiesFile = cloudFolder + FILE_SEPARATOR + cloud.getName() + \"-cloud.properties\";\n\n\t\tvalidationContext.validationEvent(ValidationMessageType.TOP_LEVEL_VALIDATION_MESSAGE,\n\t\t\t\tgetFormattedMessage(\"validating_all_templates\"));\n\n\t\tfinal Map<String, ComputeTemplate> templates = cloud.getCloudCompute().getTemplates();\n\t\tfor (Entry<String, ComputeTemplate> entry : templates.entrySet()) {\n\n\t\t\tfinal ComputeTemplate computeTemplate = entry.getValue();\n\t\t\ttemplateName = entry.getKey();\n\n\t\t\tvalidationContext.validationEvent(ValidationMessageType.GROUP_VALIDATION_MESSAGE,\n\t\t\t\t\tgetFormattedMessage(\"validating_template\", templateName));\n\n\t\t\tfinal String imageLocation = computeTemplate.getImageId();\n\t\t\tfinal String imageId = imageLocation.split(\"/\")[1];\n\t\t\tfinal String hardwareId = computeTemplate.getHardwareId().split(\"/\")[1];\n\t\t\tfinal String locationId = imageLocation.split(\"/\")[0];\n\n\t\t\tvalidationContext.validationOngoingEvent(ValidationMessageType.ENTRY_VALIDATION_MESSAGE,\n\t\t\t\t\tgetFormattedMessage(\"validating_image_hardware_location_combination\",\n\t\t\t\t\t\t\timageId == null ? \"\" : imageId, hardwareId == null ? \"\" : hardwareId,\n\t\t\t\t\t\t\tlocationId == null ? \"\" : locationId));\n\n\t\t\t// validating imageIds\n\t\t\ttry {\n\t\t\t\tif (imageId != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tcomputeApi.getImage(imageId);\n\t\t\t\t\t} catch (final OpenstackException e) {\n\t\t\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.ERROR);\n\t\t\t\t\t\tfinal String availableResources = this.formatResourceList(computeApi.getImages());\n\t\t\t\t\t\tthrow new CloudProvisioningException(\n\t\t\t\t\t\t\t\tgetFormattedMessage(\"error_image_id_validation\",\n\t\t\t\t\t\t\t\t\t\timageId == null ? \"\" : imageId, availableResources));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// validating hardwareId\n\t\t\t\tif (hardwareId != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tcomputeApi.getFlavor(hardwareId);\n\t\t\t\t\t} catch (final OpenstackException e) {\n\t\t\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.ERROR);\n\t\t\t\t\t\tfinal String availableResources = this.formatResourceList(computeApi.getFlavors());\n\t\t\t\t\t\tthrow new CloudProvisioningException(\n\t\t\t\t\t\t\t\tgetFormattedMessage(\"error_hardware_id_validation\",\n\t\t\t\t\t\t\t\t\t\thardwareId == null ? \"\" : hardwareId, availableResources));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (final OpenstackException ex) {\n\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.ERROR);\n\t\t\t\tthrow new CloudProvisioningException(\n\t\t\t\t\t\tgetFormattedMessage(\"error_image_hardware_location_combination_validation\",\n\t\t\t\t\t\t\t\timageId == null ? \"\" : imageId,\n\t\t\t\t\t\t\t\thardwareId == null ? \"\" : hardwareId, locationId == null ? \"\" : locationId,\n\t\t\t\t\t\t\t\tgroovyFile, propertiesFile), ex);\n\t\t\t}\n\n\t\t\tvalidationContext.validationEventEnd(ValidationResultType.OK);\n\n\t\t\t// validating static securityGroupNames\n\t\t\tfinal Map<String, Object> computeOptions = computeTemplate.getOptions();\n\t\t\tif (computeOptions != null) {\n\t\t\t\tObject securityGroups = computeOptions.get(\"securityGroupNames\");\n\t\t\t\tif (securityGroups == null) {\n\t\t\t\t\tsecurityGroups = computeOptions.get(\"securityGroups\");\n\t\t\t\t}\n\t\t\t\tif (securityGroups != null) {\n\t\t\t\t\tif (securityGroups instanceof String[] && ((String[]) securityGroups).length > 0) {\n\t\t\t\t\t\tfinal String[] scgArray = (String[]) securityGroups;\n\t\t\t\t\t\tif (scgArray.length == 1) {\n\t\t\t\t\t\t\tvalidationContext.validationOngoingEvent(ValidationMessageType.ENTRY_VALIDATION_MESSAGE,\n\t\t\t\t\t\t\t\t\tgetFormattedMessage(\"validating_security_group\", scgArray[0]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvalidationContext.validationOngoingEvent(\n\t\t\t\t\t\t\t\t\tValidationMessageType.ENTRY_VALIDATION_MESSAGE,\n\t\t\t\t\t\t\t\t\tgetFormattedMessage(\"validating_security_groups\",\n\t\t\t\t\t\t\t\t\t\t\torg.cloudifysource.esc.util.StringUtils.arrayToString(scgArray, \", \")));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tfinal List<SecurityGroup> existingList = networkApi.getSecurityGroups();\n\t\t\t\t\t\t\tfor (int i = 0; i < scgArray.length; i++) {\n\t\t\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\t\t\tif (existingList != null) {\n\t\t\t\t\t\t\t\t\tfor (final SecurityGroup existing : existingList) {\n\t\t\t\t\t\t\t\t\t\tif (scgArray[i].equals(existing.getName())) {\n\t\t\t\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (!found || existingList == null || existingList.isEmpty()) {\n\t\t\t\t\t\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.ERROR);\n\t\t\t\t\t\t\t\t\tthrow new CloudProvisioningException(\"The security group '\" + scgArray[i]\n\t\t\t\t\t\t\t\t\t\t\t+ \"' is not valid. Please check options in compute template '\"\n\t\t\t\t\t\t\t\t\t\t\t+ entry.getKey()\n\t\t\t\t\t\t\t\t\t\t\t+ \"'\");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} catch (final OpenstackException e) {\n\t\t\t\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.ERROR);\n\t\t\t\t\t\t\tthrow new CloudProvisioningException(\"Error requesting security groups.\", e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.OK);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// validating static network\n\t\t\tfinal List<String> networks = computeTemplate.getComputeNetwork().getNetworks();\n\t\t\tif (networks != null && !networks.isEmpty()) {\n\t\t\t\tvalidationContext.validationOngoingEvent(ValidationMessageType.ENTRY_VALIDATION_MESSAGE,\n\t\t\t\t\t\t\"Validating network(s): \" + networks.toString());\n\t\t\t\ttry {\n\t\t\t\t\tfinal List<Network> existingList = networkApi.getNetworks();\n\t\t\t\t\tfor (final String networkName : networks) {\n\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\tfor (final Network network : existingList) {\n\t\t\t\t\t\t\tif (networkName.equals(network.getName())) {\n\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!found || existingList == null || existingList.isEmpty()) {\n\t\t\t\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.ERROR);\n\t\t\t\t\t\t\tthrow new CloudProvisioningException(\"The Network group '\" + networkName\n\t\t\t\t\t\t\t\t\t+ \"' is not valid. Please check network name in compute template '\"\n\t\t\t\t\t\t\t\t\t+ entry.getKey()\n\t\t\t\t\t\t\t\t\t+ \"'\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} catch (final OpenstackException ex) {\n\t\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.ERROR);\n\t\t\t\t\tthrow new CloudProvisioningException(\"Error requesting networks.\", ex);\n\t\t\t\t}\n\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.OK);\n\t\t\t}\n\t\t}\n\t}","id":96272,"modified_method":"@Override\n\tpublic void validateCloudConfiguration(final ValidationContext validationContext)\n\t\t\tthrows CloudProvisioningException {\n\n\t\tString templateName;\n\t\tString cloudFolder = CLOUDS_FOLDER_PATH + FILE_SEPARATOR + cloud.getName();\n\t\tString groovyFile = cloudFolder + FILE_SEPARATOR + cloud.getName() + \"-cloud.groovy\";\n\t\tString propertiesFile = cloudFolder + FILE_SEPARATOR + cloud.getName() + \"-cloud.properties\";\n\n\t\tvalidationContext.validationEvent(ValidationMessageType.TOP_LEVEL_VALIDATION_MESSAGE,\n\t\t\t\tgetFormattedMessage(\"validating_all_templates\"));\n\n\t\tfinal Map<String, ComputeTemplate> templates = cloud.getCloudCompute().getTemplates();\n\t\tfor (Entry<String, ComputeTemplate> entry : templates.entrySet()) {\n\n\t\t\tfinal ComputeTemplate computeTemplate = entry.getValue();\n\t\t\ttemplateName = entry.getKey();\n\n\t\t\tvalidationContext.validationEvent(ValidationMessageType.GROUP_VALIDATION_MESSAGE,\n\t\t\t\t\tgetFormattedMessage(\"validating_template\", templateName));\n\n\t\t\tfinal String imageLocation = computeTemplate.getImageId();\n\t\t\tfinal String imageId = imageLocation.split(\"/\")[1];\n\t\t\tfinal String hardwareId = computeTemplate.getHardwareId().split(\"/\")[1];\n\t\t\tfinal String locationId = imageLocation.split(\"/\")[0];\n\n\t\t\tvalidationContext.validationOngoingEvent(ValidationMessageType.ENTRY_VALIDATION_MESSAGE,\n\t\t\t\t\tgetFormattedMessage(\"validating_image_hardware_location_combination\",\n\t\t\t\t\t\t\timageId == null ? \"\" : imageId, hardwareId == null ? \"\" : hardwareId,\n\t\t\t\t\t\t\tlocationId == null ? \"\" : locationId));\n\n\t\t\t// validating imageIds\n\t\t\ttry {\n\t\t\t\tif (imageId != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tcomputeApi.getImage(imageId);\n\t\t\t\t\t} catch (final OpenstackException e) {\n\t\t\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.ERROR);\n\t\t\t\t\t\tfinal String availableResources = this.formatResourceList(computeApi.getImages());\n\t\t\t\t\t\tthrow new CloudProvisioningException(\n\t\t\t\t\t\t\t\tgetFormattedMessage(\"error_image_id_validation\",\n\t\t\t\t\t\t\t\t\t\timageId == null ? \"\" : imageId, availableResources));\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// validating hardwareId\n\t\t\t\tif (hardwareId != null) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tcomputeApi.getFlavor(hardwareId);\n\t\t\t\t\t} catch (final OpenstackException e) {\n\t\t\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.ERROR);\n\t\t\t\t\t\tfinal String availableResources = this.formatResourceList(computeApi.getFlavors());\n\t\t\t\t\t\tthrow new CloudProvisioningException(\n\t\t\t\t\t\t\t\tgetFormattedMessage(\"error_hardware_id_validation\",\n\t\t\t\t\t\t\t\t\t\thardwareId == null ? \"\" : hardwareId, availableResources));\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} catch (final OpenstackException ex) {\n\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.ERROR);\n\t\t\t\tthrow new CloudProvisioningException(\n\t\t\t\t\t\tgetFormattedMessage(\"error_image_hardware_location_combination_validation\",\n\t\t\t\t\t\t\t\timageId == null ? \"\" : imageId,\n\t\t\t\t\t\t\t\thardwareId == null ? \"\" : hardwareId, locationId == null ? \"\" : locationId,\n\t\t\t\t\t\t\t\tgroovyFile, propertiesFile), ex);\n\t\t\t}\n\n\t\t\tvalidationContext.validationEventEnd(ValidationResultType.OK);\n\n\t\t\t// validating static securityGroupNames\n\t\t\tfinal Map<String, Object> computeOptions = computeTemplate.getOptions();\n\t\t\tif (computeOptions != null) {\n\t\t\t\tObject securityGroups = computeOptions.get(\"securityGroupNames\");\n\t\t\t\tif (securityGroups == null) {\n\t\t\t\t\tsecurityGroups = computeOptions.get(\"securityGroups\");\n\t\t\t\t}\n\t\t\t\tif (securityGroups != null) {\n\t\t\t\t\tif (securityGroups instanceof String[] && ((String[]) securityGroups).length > 0) {\n\t\t\t\t\t\tfinal String[] scgArray = (String[]) securityGroups;\n\t\t\t\t\t\tif (scgArray.length == 1) {\n\t\t\t\t\t\t\tvalidationContext.validationOngoingEvent(ValidationMessageType.ENTRY_VALIDATION_MESSAGE,\n\t\t\t\t\t\t\t\t\tgetFormattedMessage(\"validating_security_group\", scgArray[0]));\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tvalidationContext.validationOngoingEvent(\n\t\t\t\t\t\t\t\t\tValidationMessageType.ENTRY_VALIDATION_MESSAGE,\n\t\t\t\t\t\t\t\t\tgetFormattedMessage(\"validating_security_groups\",\n\t\t\t\t\t\t\t\t\t\t\torg.cloudifysource.esc.util.StringUtils.arrayToString(scgArray, \", \")));\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\ttry {\n\t\t\t\t\t\t\tfinal Set<String> missingList = new HashSet<String>();\n\t\t\t\t\t\t\tfinal List<SecurityGroup> existingList = networkApi.getSecurityGroups();\n\t\t\t\t\t\t\tfor (int i = 0; i < scgArray.length; i++) {\n\t\t\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\t\t\tif (existingList != null) {\n\t\t\t\t\t\t\t\t\tfor (final SecurityGroup existing : existingList) {\n\t\t\t\t\t\t\t\t\t\tif (scgArray[i].equals(existing.getName())) {\n\t\t\t\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tif (!found || existingList == null || existingList.isEmpty()) {\n\t\t\t\t\t\t\t\t\tmissingList.add(scgArray[i]);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tif (!missingList.isEmpty()) {\n\t\t\t\t\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.ERROR);\n\t\t\t\t\t\t\t\tif (missingList.size() == 1) {\n\t\t\t\t\t\t\t\t\tthrow new CloudProvisioningException(getFormattedMessage(\n\t\t\t\t\t\t\t\t\t\t\t\"error_security_group_validation\",\n\t\t\t\t\t\t\t\t\t\t\tmissingList.iterator().next(), groovyFile, propertiesFile));\n\t\t\t\t\t\t\t\t} else if (missingList.size() > 1) {\n\t\t\t\t\t\t\t\t\tthrow new CloudProvisioningException(getFormattedMessage(\n\t\t\t\t\t\t\t\t\t\t\t\"error_security_groups_validation\",\n\t\t\t\t\t\t\t\t\t\t\tArrays.toString(missingList.toArray()), groovyFile, propertiesFile));\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t} catch (final OpenstackException e) {\n\t\t\t\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.ERROR);\n\t\t\t\t\t\t\tthrow new CloudProvisioningException(\"Error requesting security groups.\", e);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.OK);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// validating static network\n\t\t\tfinal List<String> networks = computeTemplate.getComputeNetwork().getNetworks();\n\t\t\tif (networks != null && !networks.isEmpty()) {\n\t\t\t\tvalidationContext.validationOngoingEvent(ValidationMessageType.ENTRY_VALIDATION_MESSAGE,\n\t\t\t\t\t\t\"Validating network(s): \" + networks.toString());\n\t\t\t\ttry {\n\t\t\t\t\tfinal Set<String> missingList = new HashSet<String>();\n\t\t\t\t\tfinal List<Network> existingList = networkApi.getNetworks();\n\t\t\t\t\tfor (final String networkName : networks) {\n\t\t\t\t\t\tboolean found = false;\n\t\t\t\t\t\tif (existingList != null) {\n\t\t\t\t\t\t\tfor (final Network network : existingList) {\n\t\t\t\t\t\t\t\tif (networkName.equals(network.getName())) {\n\t\t\t\t\t\t\t\t\tfound = true;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (!found || existingList == null || existingList.isEmpty()) {\n\t\t\t\t\t\t\tmissingList.add(networkName);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\tif (!missingList.isEmpty()) {\n\t\t\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.ERROR);\n\t\t\t\t\t\tif (missingList.size() == 1) {\n\t\t\t\t\t\t\tthrow new CloudProvisioningException(String.format(\n\t\t\t\t\t\t\t\t\t\"Network \\\"%s\\\" does not exist. Please create it or rename in %s or in %s\",\n\t\t\t\t\t\t\t\t\tmissingList.iterator().next(), groovyFile, propertiesFile));\n\t\t\t\t\t\t} else if (missingList.size() > 1) {\n\t\t\t\t\t\t\tthrow new CloudProvisioningException(String.format(\n\t\t\t\t\t\t\t\t\t\"Networks %s do not exist. Please create them or rename in %s or in %s\",\n\t\t\t\t\t\t\t\t\tArrays.toString(missingList.toArray()), groovyFile, propertiesFile));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t} catch (final OpenstackException ex) {\n\t\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.ERROR);\n\t\t\t\t\tthrow new CloudProvisioningException(\"Error requesting networks.\", ex);\n\t\t\t\t}\n\t\t\t\tvalidationContext.validationEventEnd(ValidationResultType.OK);\n\t\t\t}\n\t\t}\n\t}","commit_id":"bf7bb0e594b7de6f6d0b7dc8dc199b243c9e6c70","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**********\n\t * Executes all of the registered stop detectors, stopping if one of them indicates that the service has stopped.\n\t * \n\t * @return true if a detector discovered that the service is stopped, false otherwise.\n\t */\n\tpublic boolean runStopDetection() {\n\t\tlogger.info(\"Running iteration of stop detection\");\n\t\tfor (final StopDetector detector : this.stopDetectors) {\n\n\t\t\ttry {\n\t\t\t\tif (detector.isServiceStopped()) {\n\t\t\t\t\tlogger.info(\"Stop detection - sevice has stopped!\");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} catch (final USMException e) {\n\t\t\t\tlogger.log(\n\t\t\t\t\t\tLevel.SEVERE, \"A Stop detector failed to execute. The detector was: \" + detector, e);\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}","id":96273,"modified_method":"/**********\n\t * Executes all of the registered stop detectors, stopping if one of them indicates that the service has stopped.\n\t * \n\t * @return true if a detector discovered that the service is stopped, false otherwise.\n\t */\n\tpublic boolean runStopDetection() {\n\t\tlogger.fine(\"Running iteration of stop detection\");\n\t\tfor (final StopDetector detector : this.stopDetectors) {\n\n\t\t\ttry {\n\t\t\t\tif (detector.isServiceStopped()) {\n\t\t\t\t\tlogger.info(\"Stop detection - sevice has stopped!\");\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t} catch (final USMException e) {\n\t\t\t\tlogger.log(\n\t\t\t\t\t\tLevel.SEVERE, \"A Stop detector failed to execute. The detector was: \" + detector, e);\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}","commit_id":"1dcff7f69dee313e3c4172cc83750612167c5e5d","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/********\n\t * Executes all start detection implementations, until all have passed or a timeout is reached. Once a start\n\t * detector passes, it is not executed again.\n\t * \n\t * @param launchedProcess the process launched by the service's 'start' implementation.\n\t * @return true if liveness test passed, false if the timeout is reached without the tests passing.\n\t * @throws USMException if a start detector failed, or if the 'start' process exited with a non-zero exit code.\n\t * @throws TimeoutException if a start detector implementation timed out.\n\t */\n\tpublic boolean isProcessLivenessTestPassed(final Process launchedProcess)\n\t\t\tthrows USMException, TimeoutException {\n\t\tif (this.livenessDetectors.length == 0) {\n\t\t\tlogger.warning(\"No Start Detectors have been set for this service. \"\n\t\t\t\t\t+ \"This may cause the USM to monitor an irrelevant process.\");\n\t\t\treturn true;\n\t\t}\n\n\t\tfinal long startTime = System.currentTimeMillis();\n\t\tfinal long endTime = startTime + configuration.getStartDetectionTimeoutMSecs();\n\t\tint currentTestIndex = 0;\n\n\t\tboolean processIsRunning = true;\n\t\twhile (System.currentTimeMillis() < endTime && currentTestIndex < this.livenessDetectors.length) {\n\n\t\t\t// first check if process ended\n\t\t\tif (processIsRunning) {\n\t\t\t\tprocessIsRunning = checkProcessIsRunning(launchedProcess);\n\t\t\t}\n\n\t\t\tlogger.info(\"Executing iteration of liveness detection test\");\n\t\t\tint index = currentTestIndex;\n\t\t\tlogger.info(\"Executing liveness detectors from index: \" + index);\n\t\t\tlogger.info(\"Liveness detectors: \" + Arrays.toString(this.livenessDetectors));\n\t\t\tlogger.info(\"detectors length: \" + this.livenessDetectors.length);\n\t\t\twhile (index < this.livenessDetectors.length) {\n\t\t\t\tlogger.info(\"getting detector at index: \" + index);\n\t\t\t\tfinal LivenessDetector detector = this.livenessDetectors[index];\n\n\t\t\t\tboolean testResult = false;\n\t\t\t\ttry {\n\t\t\t\t\ttestResult = detector.isProcessAlive();\n\t\t\t\t\tlogger.info(\"Detection Test results are: \" + testResult);\n\t\t\t\t} catch (final USMException e) {\n\t\t\t\t\t// may indicate that the underlying process has terminated\n\t\t\t\t\tif (e.getCause() instanceof InterruptedException) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t\tlogger.info(\"A start detector failed due to an InterruptedException\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (testResult) {\n\t\t\t\t\t// this liveness detector has succeeded.\n\t\t\t\t\t++index;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif (index == this.livenessDetectors.length) {\n\t\t\t\t// all tests passed\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tcurrentTestIndex = index;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tThread.sleep(configuration.getStartDetectionIntervalMSecs());\n\t\t\t} catch (final InterruptedException e) {\n\t\t\t\tthrow new USMException(\"Interruped while waiting for start detection\", e);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\n\t}","id":96274,"modified_method":"/********\n\t * Executes all start detection implementations, until all have passed or a timeout is reached. Once a start\n\t * detector passes, it is not executed again.\n\t * \n\t * @param launchedProcess the process launched by the service's 'start' implementation.\n\t * @return true if liveness test passed, false if the timeout is reached without the tests passing.\n\t * @throws USMException if a start detector failed, or if the 'start' process exited with a non-zero exit code.\n\t * @throws TimeoutException if a start detector implementation timed out.\n\t */\n\tpublic boolean isProcessLivenessTestPassed(final Process launchedProcess)\n\t\t\tthrows USMException, TimeoutException {\n\t\tif (this.livenessDetectors.length == 0) {\n\t\t\tlogger.warning(\"No Start Detectors have been set for this service. \"\n\t\t\t\t\t+ \"This may cause the USM to monitor an irrelevant process.\");\n\t\t\treturn true;\n\t\t}\n\n\t\tfinal long startTime = System.currentTimeMillis();\n\t\tfinal long endTime = startTime + configuration.getStartDetectionTimeoutMSecs();\n\t\tint currentTestIndex = 0;\n\n\t\tboolean processIsRunning = true;\n\t\twhile (System.currentTimeMillis() < endTime && currentTestIndex < this.livenessDetectors.length) {\n\n\t\t\t// first check if process ended\n\t\t\tif (processIsRunning) {\n\t\t\t\tprocessIsRunning = checkProcessIsRunning(launchedProcess);\n\t\t\t}\n\n\t\t\tint index = currentTestIndex;\n\t\t\tif (logger.isLoggable(Level.FINE)) {\n\t\t\t\tlogger.fine(\"Executing iteration of liveness detection test\");\n\t\t\t\tlogger.fine(\"Executing liveness detectors from index: \" + index);\n\t\t\t\tlogger.fine(\"Liveness detectors: \" + Arrays.toString(this.livenessDetectors));\n\t\t\t\tlogger.fine(\"detectors length: \" + this.livenessDetectors.length);\n\t\t\t}\n\t\t\twhile (index < this.livenessDetectors.length) {\n\t\t\t\tlogger.fine(\"getting detector at index: \" + index);\n\t\t\t\tfinal LivenessDetector detector = this.livenessDetectors[index];\n\n\t\t\t\tboolean testResult = false;\n\t\t\t\ttry {\n\t\t\t\t\ttestResult = detector.isProcessAlive();\n\t\t\t\t\tlogger.fine(\"Detection Test results are: \" + testResult);\n\t\t\t\t} catch (final USMException e) {\n\t\t\t\t\t// may indicate that the underlying process has terminated\n\t\t\t\t\tif (e.getCause() instanceof InterruptedException) {\n\t\t\t\t\t\t// ignore\n\t\t\t\t\t\tlogger.info(\"A start detector failed due to an InterruptedException\");\n\t\t\t\t\t} else {\n\t\t\t\t\t\tthrow e;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif (testResult) {\n\t\t\t\t\t// this liveness detector has succeeded.\n\t\t\t\t\t++index;\n\t\t\t\t} else {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\tif (index == this.livenessDetectors.length) {\n\t\t\t\t// all tests passed\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\tcurrentTestIndex = index;\n\t\t\t}\n\n\t\t\ttry {\n\t\t\t\tThread.sleep(configuration.getStartDetectionIntervalMSecs());\n\t\t\t} catch (final InterruptedException e) {\n\t\t\t\tthrow new USMException(\"Interruped while waiting for start detection\", e);\n\t\t\t}\n\t\t}\n\t\treturn false;\n\n\t}","commit_id":"1dcff7f69dee313e3c4172cc83750612167c5e5d","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private OutputStream getFileOutputString(final File destination)\n\t\t\tthrows ResourceDownloadException {\n\t\tdestination.getParentFile().mkdirs(); \n        try {\n        \tdestination.createNewFile();\n        \treturn new FileOutputStream(destination);\n        } catch (Exception e) {\n        \tthrow new ResourceDownloadException(\"Failed opening stream to dest file \" \n        \t\t\t\t\t\t\t+ destination.getAbsolutePath(), e);\n        }\n\t}","id":96275,"modified_method":"private OutputStream getFileOutputString(final File destination)\n\t\t\tthrows ResourceDownloadException {\n\t\tdestination.getParentFile().mkdirs();\n\t\ttry {\n\t\t\t// if (!destination.createNewFile()) {\n\t\t\t// throw new IllegalStateException(\"Failed to create a new file called \" + destination.getAbsolutePath()\n\t\t\t// + \": file already exists\");\n\t\t\t// }\n\t\t\treturn new FileOutputStream(destination);\n\t\t} catch (final IOException e) {\n\t\t\tthrow new ResourceDownloadException(\"Failed opening stream to dest file \"\n\t\t\t\t\t+ destination.getAbsolutePath(), e);\n\t\t}\n\t}","commit_id":"89a6dfa84e5fc2ded3799eae033d65535e6aca3a","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private void getResource(final URL downloadURL, final File destination) \n\t\t\tthrows ResourceDownloadException, TimeoutException {\n\n\t\tfinal long end = System.currentTimeMillis() + this.timeoutInMillis;\n\t\tfinal InputStream is = openConnectionInputStream(downloadURL);\n        if (is == null) {\n            logger.log(Level.WARNING, \"connection input stream failed to initialize\");\n            throw new ResourceDownloadException(\n            \t\t\t\t\t\"Failed getting \" + this.resourceUrl + \" to \" + destination.getAbsolutePath());\n        }\n        final OutputStream os = getFileOutputString(destination);\n        boolean finished = false;\n        try {\n            final byte[] buffer = new byte[BUFFER_SIZE];\n            int length;\n            logger.info(\"Downloading \" + downloadURL.toString() + \" to \" + this.resourceDest);\n            while ((length = is.read(buffer)) >= 0) {\n                os.write(buffer, 0, length);\n                if (end < System.currentTimeMillis()) {\n                \tthrow new TimeoutException();\n                }\n            }\n            finished = true;\n        } catch (IOException e) {\n        \tlogger.warning(\"Failed downloading resource from \" + downloadURL.toString() \n        \t\t\t+ \". Reason was: \" + e.getMessage());\n        \tthrow new ResourceDownloadException(\"Failed downloading resource. Reason was: \" \n        \t\t\t+ e.getMessage(), e);\n        } finally {\n        \tIOUtils.closeQuietly(os);\n        \tIOUtils.closeQuietly(is);\n        \t\n            if (!finished) {\n            \tlogger.log(Level.WARNING, \"Download did not complete successfully. deleting file.\");\n            \tdestination.delete();\n            }\n        }\n\t}","id":96276,"modified_method":"private void getResource(final URL downloadURL, final File destination)\n\t\t\tthrows ResourceDownloadException, TimeoutException {\n\n\t\tfinal long end = System.currentTimeMillis() + this.timeoutInMillis;\n\t\tfinal InputStream is = openConnectionInputStream(downloadURL);\n\t\tif (is == null) {\n\t\t\tlogger.log(Level.WARNING, \"connection input stream failed to initialize\");\n\t\t\tthrow new ResourceDownloadException(\n\t\t\t\t\t\"Failed getting \" + this.resourceUrl + \" to \" + destination.getAbsolutePath());\n\t\t}\n\n\t\tfinal File temporaryDestination = createTemporaryDestinationFile(destination);\n\n\t\tfinal OutputStream os = getFileOutputString(temporaryDestination);\n\t\tboolean finished = false;\n\t\ttry {\n\t\t\tfinal byte[] buffer = new byte[BUFFER_SIZE];\n\t\t\tint length;\n\t\t\tif (logger.isLoggable(Level.FINE)) {\n\t\t\t\tlogger.fine(\"Downloading \" + downloadURL.toString() + \" to \" + this.resourceDest);\n\t\t\t}\n\t\t\twhile ((length = is.read(buffer)) >= 0) {\n\t\t\t\tos.write(buffer, 0, length);\n\t\t\t\tif (end < System.currentTimeMillis()) {\n\t\t\t\t\tthrow new TimeoutException();\n\t\t\t\t}\n\t\t\t}\n\t\t\tfinished = true;\n\n\t\t} catch (IOException e) {\n\t\t\tlogger.warning(\"Failed downloading resource from \" + downloadURL.toString()\n\t\t\t\t\t+ \". Reason was: \" + e.getMessage());\n\t\t\tthrow new ResourceDownloadException(\"Failed downloading resource. Reason was: \"\n\t\t\t\t\t+ e.getMessage(), e);\n\t\t} finally {\n\t\t\tIOUtils.closeQuietly(os);\n\t\t\tIOUtils.closeQuietly(is);\n\n\t\t\tif (!finished) {\n\t\t\t\tlogger.log(Level.WARNING, \"Download did not complete successfully. deleting file.\");\n\t\t\t\tFileUtils.deleteQuietly(temporaryDestination);\n\t\t\t\tFileUtils.deleteQuietly(destination);\n\n\t\t\t}\n\t\t}\n\t\tif (finished) {\n\t\t\ttry {\n\n\t\t\t\tFileUtils.copyFile(temporaryDestination, destination);\n\n\t\t\t} catch (IOException e) {\n\t\t\t\tif (destination.exists()) {\n\t\t\t\t\tlogger.warning(\"Failed to write downloaded file to destination: \"\n\t\t\t\t\t\t\t+ destination\n\t\t\t\t\t\t\t+ \". Destination file already exists. \"\n\t\t\t\t\t\t\t+ \"This probably indicates a concurrent download of the same file.\");\n\t\t\t\t} else {\n\t\t\t\t\tthrow new ResourceDownloadException(\"Failed to copy downloaded file to target location: \"\n\t\t\t\t\t\t\t+ e.getMessage(), e);\n\t\t\t\t}\n\n\t\t\t} finally {\n\t\t\t\tFileUtils.deleteQuietly(temporaryDestination);\n\t\t\t}\n\t\t}\n\n\t}","commit_id":"89a6dfa84e5fc2ded3799eae033d65535e6aca3a","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"/**\n\t * \n\t * @throws ResourceDownloadException\n\t * \t\t\tif download fails.\n\t * @throws TimeoutException\n\t * \t\t\tif timeout exceeded.\n\t */\n    public void download()\n    \t\t\tthrows ResourceDownloadException, TimeoutException {\n    \t\n    \tif (this.resourceDest.exists() && this.skipExisting) {\n    \t\tlogger.log(Level.INFO, \"File already exists. \"\n    \t\t\t\t+ this.resourceDest.getAbsolutePath() + \" Skipping download.\");\n    \t\treturn;\n    \t}\n    \tfor (int attempt = 1; attempt <= this.numberOfRetries; attempt++) {\n    \t\ttry {\n    \t\t\tgetResource(this.resourceUrl, this.resourceDest);\n    \t\t\tif (this.hashUrl != null) {\n    \t\t\t\t//create checksum file destination.\n    \t\t\t\t//The checksum file extension determines the hashing algorithm used.\n    \t\t\t\tString resourceName = getResourceName(this.hashUrl);\n\t\t\t\t\tFile checksumFile = new File(this.resourceDest.getParent(), resourceName);\n\t\t\t\t\t\n    \t\t\t\tgetResource(this.hashUrl, checksumFile);\n    \t\t\t\tlogger.log(Level.FINE, \"Verifying resource checksum using checksum file \" \n    \t\t\t\t\t\t+ checksumFile.getAbsolutePath());\n    \t\t\t\tverifyResourceChecksum(checksumFile);\n    \t\t\t\treturn;\n    \t\t\t}\n    \t\t} catch (ResourceDownloadException e) {\n    \t\t\tlogger.log(Level.WARNING, \"Failed downloading resource on attempt \" + attempt\n    \t\t\t\t\t+ \". Reason was \" + e.getMessage());\n    \t\t\tif (attempt == numberOfRetries) {\n    \t\t\t\tthrow e;\n    \t\t\t}\n    \t\t}\n\t\t}\n    }","id":96277,"modified_method":"/**\n\t *\n\t * @throws ResourceDownloadException\n\t *             if download fails.\n\t * @throws TimeoutException\n\t *             if timeout exceeded.\n\t */\n\tpublic void download()\n\t\t\tthrows ResourceDownloadException, TimeoutException {\n\n\t\tif (this.resourceDest.exists() && this.skipExisting) {\n\t\t\tlogger.log(Level.INFO, \"File already exists. \"\n\t\t\t\t\t+ this.resourceDest.getAbsolutePath() + \" Skipping download.\");\n\t\t\treturn;\n\t\t}\n\n\t\tcreateDestinationDirectories();\n\n\t\tfor (int attempt = 1; attempt <= this.numberOfRetries; attempt++) {\n\t\t\ttry {\n\t\t\t\tgetResource(this.resourceUrl, this.resourceDest);\n\t\t\t\tif (this.hashUrl != null) {\n\t\t\t\t\t// create checksum file destination.\n\t\t\t\t\t// The checksum file extension determines the hashing algorithm used.\n\t\t\t\t\tString resourceName = getResourceName(this.hashUrl);\n\t\t\t\t\tFile checksumFile = new File(this.resourceDest.getParent(), resourceName);\n\n\t\t\t\t\tgetResource(this.hashUrl, checksumFile);\n\t\t\t\t\tlogger.log(Level.FINE, \"Verifying resource checksum using checksum file \"\n\t\t\t\t\t\t\t+ checksumFile.getAbsolutePath());\n\t\t\t\t\tverifyResourceChecksum(checksumFile);\n\t\t\t\t}\n\t\t\t\treturn;\n\t\t\t} catch (ResourceDownloadException e) {\n\t\t\t\tlogger.log(Level.WARNING, \"Failed downloading resource on attempt \" + attempt\n\t\t\t\t\t\t+ \". Reason was \" + e.getMessage());\n\t\t\t\tif (attempt == numberOfRetries) {\n\t\t\t\t\tthrow e;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}","commit_id":"89a6dfa84e5fc2ded3799eae033d65535e6aca3a","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"private void assertFilesDownloaded(final String resourceFileName, final String hashFileName) throws IOException {\n\t\t\n\t\tfinal File downloadedResourceFile = new File(DESTINATION_FOLDER, resourceFileName);\n\t\tfinal File downloadedHashFile = new File(DESTINATION_FOLDER, hashFileName);\n\t\tAssert.assertTrue(\"Resource file download failed\", downloadedResourceFile.exists());\n\t\tAssert.assertTrue(\"Hash file download failed\", downloadedHashFile.exists());\n\t\t\n\t\tfinal File originalResourceFile = new File(RESOURCE_FOLDER, resourceFileName);\n\t\tfinal File originalHashFile = new File(RESOURCE_FOLDER, hashFileName);\n\t\t//asserting file content is the same.\n\t\tAssert.assertTrue(\"Resource file was not downloaded properly\",\n\t\t\t\tFileUtils.readFileToString(downloadedResourceFile).\n\t\t\t\tequals(FileUtils.readFileToString(originalResourceFile)));\n\t\tAssert.assertTrue(\"Hash file was not downloaded properly\",\n\t\t\t\tFileUtils.readFileToString(downloadedHashFile).\n\t\t\t\tequals(FileUtils.readFileToString(originalHashFile)));\n\t\t\n\t}","id":96278,"modified_method":"private void assertFilesDownloaded(final String resourceFileName, final String hashFileName) throws IOException {\n\n\t\tfinal File downloadedResourceFile = new File(DESTINATION_FOLDER, resourceFileName);\n\t\tfinal File downloadedHashFile = new File(DESTINATION_FOLDER, hashFileName);\n\t\tAssert.assertTrue(\"Resource file download failed\", downloadedResourceFile.exists());\n\t\tAssert.assertTrue(\"Hash file download failed\", downloadedHashFile.exists());\n\n\t\tfinal File destinationFolder = new File(DESTINATION_FOLDER);\n\t\tFile[] partFiles = destinationFolder.listFiles(new FilenameFilter() {\n\n\t\t\t@Override\n\t\t\tpublic boolean accept(final File dir, final String name) {\n\t\t\t\treturn name.contains(\".part.\");\n\n\t\t\t}\n\t\t});\n\n\t\tAssert.assertEquals(\"Expected no part files to be found\", 0, partFiles.length);\n\n\t\tfinal File originalResourceFile = new File(RESOURCE_FOLDER, resourceFileName);\n\t\tfinal File originalHashFile = new File(RESOURCE_FOLDER, hashFileName);\n\t\t// asserting file content is the same.\n\t\tAssert.assertTrue(\"Resource file was not downloaded properly\",\n\t\t\t\tFileUtils.readFileToString(downloadedResourceFile).\n\t\t\t\t\t\tequals(FileUtils.readFileToString(originalResourceFile)));\n\t\tAssert.assertTrue(\"Hash file was not downloaded properly\",\n\t\t\t\tFileUtils.readFileToString(downloadedHashFile).\n\t\t\t\t\t\tequals(FileUtils.readFileToString(originalHashFile)));\n\n\t}","commit_id":"89a6dfa84e5fc2ded3799eae033d65535e6aca3a","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"@Test\n\tpublic void testResourceDownload() throws Exception {\n\t\t//test get with checksum verification. \n\t\t//Hashing algorithm determined by the checksum file extension.\n\t\trdf.get(RESOURCE_URL, \n\t\t\t\tRESOURCE_DESTINATION);\n\t\tcleanDownloadFolder();\n\t\tassertDownloadSuccess(RESOURCE_URL + \".md5\");\n\t\tcleanDownloadFolder();\n\t\tassertDownloadSuccess(RESOURCE_URL + \".sha1\");\n\t\tcleanDownloadFolder();\n\t\tassertDownloadSuccess(RESOURCE_URL + \".sha256\");\n\t\tcleanDownloadFolder();\n\t\tassertDownloadSuccess(RESOURCE_URL + \".sha384\");\n\t\tcleanDownloadFolder();\n\t\tassertDownloadSuccess(RESOURCE_URL + \".sha512\");\n\t\tcleanDownloadFolder();\n\t}","id":96279,"modified_method":"@Test\n\tpublic void testResourceDownload() throws Exception {\n\t\t// test get with checksum verification.\n\t\t// Hashing algorithm determined by the checksum file extension.\n\t\tcleanDownloadFolder();\n\t\trdf.get(RESOURCE_URL,\n\t\t\t\tRESOURCE_DESTINATION);\n\t\tcleanDownloadFolder();\n\t\tassertDownloadSuccess(RESOURCE_URL + \".md5\");\n\t\tcleanDownloadFolder();\n\t\tassertDownloadSuccess(RESOURCE_URL + \".sha1\");\n\t\tcleanDownloadFolder();\n\t\tassertDownloadSuccess(RESOURCE_URL + \".sha256\");\n\t\tcleanDownloadFolder();\n\t\tassertDownloadSuccess(RESOURCE_URL + \".sha384\");\n\t\tcleanDownloadFolder();\n\t\tassertDownloadSuccess(RESOURCE_URL + \".sha512\");\n\t\tcleanDownloadFolder();\n\t}","commit_id":"89a6dfa84e5fc2ded3799eae033d65535e6aca3a","url":"https://github.com/CloudifySource/cloudify"},{"original_method":"public void registerMBean() {\n    if (mbeanIsRegistered.compareAndSet(false, true)) {\n      try {\n        final MBeanServer server = ManagementFactory.getPlatformMBeanServer();\n        final ObjectName mbeanName = new ObjectName(getMBeanName());\n        server.registerMBean(this, mbeanName);\n      } catch (MalformedObjectNameException e) {\n        throw new OStorageException(\"Error during registration of atomic manager MBean.\", e);\n      } catch (InstanceAlreadyExistsException e) {\n        throw new OStorageException(\"Error during registration of atomic manager MBean.\", e);\n      } catch (MBeanRegistrationException e) {\n        throw new OStorageException(\"Error during registration of atomic manager MBean.\", e);\n      } catch (NotCompliantMBeanException e) {\n        throw new OStorageException(\"Error during registration of atomic manager MBean.\", e);\n      }\n    }\n  }","id":96280,"modified_method":"public void registerMBean() {\n    if (mbeanIsRegistered.compareAndSet(false, true)) {\n      try {\n        final MBeanServer server = ManagementFactory.getPlatformMBeanServer();\n        final ObjectName mbeanName = new ObjectName(getMBeanName());\n        if (!server.isRegistered(mbeanName))\n          server.registerMBean(this, mbeanName);\n\n      } catch (MalformedObjectNameException e) {\n        throw new OStorageException(\"Error during registration of atomic manager MBean.\", e);\n      } catch (InstanceAlreadyExistsException e) {\n        throw new OStorageException(\"Error during registration of atomic manager MBean.\", e);\n      } catch (MBeanRegistrationException e) {\n        throw new OStorageException(\"Error during registration of atomic manager MBean.\", e);\n      } catch (NotCompliantMBeanException e) {\n        throw new OStorageException(\"Error during registration of atomic manager MBean.\", e);\n      }\n    }\n  }","commit_id":"1bbfa07ad95a347ced0d98b9ec98a48002104dda","url":"https://github.com/orientechnologies/orientdb"},{"original_method":"public static ObjectName registerMBean(String objTypeName, String objInstanceName, Object mbean) \n    \tthrows MalformedObjectNameException, InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {\n\n        String name = \"com.cloud:type=\" + objTypeName;\n        if(objInstanceName != null && !objInstanceName.isEmpty())\n        \tname += \", name=\" + objInstanceName;\n        ObjectName objectName = new ObjectName(name);\n    \t\n        ArrayList<MBeanServer> server = MBeanServerFactory.findMBeanServer(null);\n        if (server.size() > 0) {\n            MBeanServer mBeanServer = server.get(0);\n            mBeanServer.registerMBean(mbean, objectName);\n            return objectName;\n        } else {\n        \tMBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n            mBeanServer.registerMBean(mbean, objectName);\n            return objectName;\n        }\n    }","id":96281,"modified_method":"public static ObjectName registerMBean(String objTypeName, String objInstanceName, Object mbean) \n    \tthrows MalformedObjectNameException, InstanceAlreadyExistsException, MBeanRegistrationException, NotCompliantMBeanException {\n\n        String name = \"com.cloud:type=\" + objTypeName;\n        if(objInstanceName != null && !objInstanceName.isEmpty())\n        \tname += \", name=\" + objInstanceName;\n        ObjectName objectName = new ObjectName(name);\n    \t\n        ArrayList<MBeanServer> server = MBeanServerFactory.findMBeanServer(null);\n        if (server.size() > 0) {\n            MBeanServer mBeanServer = server.get(0);\n            if(!mBeanServer.isRegistered(objectName))\n            \tmBeanServer.registerMBean(mbean, objectName);\n            return objectName;\n        } else {\n        \tMBeanServer mBeanServer = ManagementFactory.getPlatformMBeanServer();\n        \tif(!mBeanServer.isRegistered(objectName))\n        \t\tmBeanServer.registerMBean(mbean, objectName);\n            return objectName;\n        }\n    }","commit_id":"359dc18992b869e21ab9c3626eb044d65efb0e6f","url":"https://github.com/apache/cloudstack"},{"original_method":"public List<ObjectValuePair<String, Long>> restoreOverride(\n\t\t\tActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tlong trashEntryId = ParamUtil.getLong(actionRequest, \"trashEntryId\");\n\n\t\tlong duplicateEntryId = ParamUtil.getLong(\n\t\t\tactionRequest, \"duplicateEntryId\");\n\n\t\tTrashEntry entry = TrashEntryServiceUtil.restoreEntry(\n\t\t\ttrashEntryId, duplicateEntryId, null);\n\n\t\treturn getEntryOVPs(entry.getClassName(), entry.getClassPK());\n\t}","id":96282,"modified_method":"public void restoreOverride(\n\t\t\tActionRequest actionRequest, ActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tlong trashEntryId = ParamUtil.getLong(actionRequest, \"trashEntryId\");\n\n\t\tlong duplicateEntryId = ParamUtil.getLong(\n\t\t\tactionRequest, \"duplicateEntryId\");\n\n\t\tTrashEntry entry = TrashEntryServiceUtil.restoreEntry(\n\t\t\ttrashEntryId, duplicateEntryId, null);\n\n\t\taddRestoreData(\n\t\t\tactionRequest,\n\t\t\tgetEntryOVPs(entry.getClassName(), entry.getClassPK()));\n\n\t\tsendRedirect(actionRequest, actionResponse);\n\t}","commit_id":"1b0dd2398ff9cea7b92954de0c2809ac0dc9c4c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public List<ObjectValuePair<String, Long>> moveEntry(\n\t\t\tActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tlong containerModelId = ParamUtil.getLong(\n\t\t\tactionRequest, \"containerModelId\");\n\t\tString className = ParamUtil.getString(actionRequest, \"className\");\n\t\tlong classPK = ParamUtil.getLong(actionRequest, \"classPK\");\n\n\t\tServiceContext serviceContext = ServiceContextFactory.getInstance(\n\t\t\tclassName, actionRequest);\n\n\t\tTrashEntryServiceUtil.moveEntry(\n\t\t\tclassName, classPK, containerModelId, serviceContext);\n\n\t\treturn getEntryOVPs(className, classPK);\n\t}","id":96283,"modified_method":"public void moveEntry(\n\t\t\tActionRequest actionRequest, ActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tlong containerModelId = ParamUtil.getLong(\n\t\t\tactionRequest, \"containerModelId\");\n\t\tString className = ParamUtil.getString(actionRequest, \"className\");\n\t\tlong classPK = ParamUtil.getLong(actionRequest, \"classPK\");\n\n\t\tServiceContext serviceContext = ServiceContextFactory.getInstance(\n\t\t\tclassName, actionRequest);\n\n\t\tTrashEntryServiceUtil.moveEntry(\n\t\t\tclassName, classPK, containerModelId, serviceContext);\n\n\t\taddRestoreData(actionRequest, getEntryOVPs(className, classPK));\n\n\t\tsendRedirect(actionRequest, actionResponse);\n\t}","commit_id":"1b0dd2398ff9cea7b92954de0c2809ac0dc9c4c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected void addRestoreData(\n\t\t\tActionRequest actionRequest,\n\t\t\tList<ObjectValuePair<String, Long>> entryOVPs)\n\t\tthrows Exception {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)actionRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tif ((entryOVPs == null) || (entryOVPs.size() <= 0)) {\n\t\t\treturn;\n\t\t}\n\n\t\tList<String> restoreClassNames = new ArrayList<>();\n\t\tList<String> restoreEntryLinks = new ArrayList<>();\n\t\tList<String> restoreEntryMessages = new ArrayList<>();\n\t\tList<String> restoreLinks = new ArrayList<>();\n\t\tList<String> restoreMessages = new ArrayList<>();\n\n\t\tfor (int i = 0; i < entryOVPs.size(); i++) {\n\t\t\tObjectValuePair<String, Long> entryOVP = entryOVPs.get(i);\n\n\t\t\tTrashHandler trashHandler =\n\t\t\t\tTrashHandlerRegistryUtil.getTrashHandler(entryOVP.getKey());\n\n\t\t\tString restoreEntryLink = trashHandler.getRestoreContainedModelLink(\n\t\t\t\tactionRequest, entryOVP.getValue());\n\t\t\tString restoreLink = trashHandler.getRestoreContainerModelLink(\n\t\t\t\tactionRequest, entryOVP.getValue());\n\t\t\tString restoreMessage = trashHandler.getRestoreMessage(\n\t\t\t\tactionRequest, entryOVP.getValue());\n\n\t\t\tif (Validator.isNull(restoreLink) ||\n\t\t\t\tValidator.isNull(restoreMessage)) {\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\trestoreClassNames.add(trashHandler.getClassName());\n\t\t\trestoreEntryLinks.add(restoreEntryLink);\n\n\t\t\tTrashRenderer trashRenderer = trashHandler.getTrashRenderer(\n\t\t\t\tentryOVP.getValue());\n\n\t\t\tString restoreEntryTitle = trashRenderer.getTitle(\n\t\t\t\tthemeDisplay.getLocale());\n\n\t\t\trestoreEntryMessages.add(restoreEntryTitle);\n\n\t\t\trestoreLinks.add(restoreLink);\n\t\t\trestoreMessages.add(restoreMessage);\n\t\t}\n\n\t\tMap<String, List<String>> data = new HashMap<>();\n\n\t\tdata.put(\"restoreClassNames\", restoreClassNames);\n\t\tdata.put(\"restoreEntryLinks\", restoreEntryLinks);\n\t\tdata.put(\"restoreEntryMessages\", restoreEntryMessages);\n\t\tdata.put(\"restoreLinks\", restoreLinks);\n\t\tdata.put(\"restoreMessages\", restoreMessages);\n\n\t\tSessionMessages.add(\n\t\t\tactionRequest,\n\t\t\tPortalUtil.getPortletId(actionRequest) +\n\t\t\t\tSessionMessages.KEY_SUFFIX_DELETE_SUCCESS_DATA, data);\n\n\t\thideDefaultSuccessMessage(actionRequest);\n\t}","id":96284,"modified_method":"protected void addRestoreData(\n\t\t\tActionRequest actionRequest,\n\t\t\tList<ObjectValuePair<String, Long>> entryOVPs)\n\t\tthrows Exception {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)actionRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tif ((entryOVPs == null) || (entryOVPs.size() <= 0)) {\n\t\t\treturn;\n\t\t}\n\n\t\tList<String> restoreClassNames = new ArrayList<>();\n\t\tList<String> restoreEntryLinks = new ArrayList<>();\n\t\tList<String> restoreEntryMessages = new ArrayList<>();\n\t\tList<String> restoreLinks = new ArrayList<>();\n\t\tList<String> restoreMessages = new ArrayList<>();\n\n\t\tfor (int i = 0; i < entryOVPs.size(); i++) {\n\t\t\tObjectValuePair<String, Long> entryOVP = entryOVPs.get(i);\n\n\t\t\tTrashHandler trashHandler =\n\t\t\t\tTrashHandlerRegistryUtil.getTrashHandler(entryOVP.getKey());\n\n\t\t\tString restoreEntryLink = trashHandler.getRestoreContainedModelLink(\n\t\t\t\tactionRequest, entryOVP.getValue());\n\t\t\tString restoreLink = trashHandler.getRestoreContainerModelLink(\n\t\t\t\tactionRequest, entryOVP.getValue());\n\t\t\tString restoreMessage = trashHandler.getRestoreMessage(\n\t\t\t\tactionRequest, entryOVP.getValue());\n\n\t\t\tif (Validator.isNull(restoreLink) ||\n\t\t\t\tValidator.isNull(restoreMessage)) {\n\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\trestoreClassNames.add(trashHandler.getClassName());\n\t\t\trestoreEntryLinks.add(restoreEntryLink);\n\n\t\t\tTrashRenderer trashRenderer = trashHandler.getTrashRenderer(\n\t\t\t\tentryOVP.getValue());\n\n\t\t\tString restoreEntryTitle = trashRenderer.getTitle(\n\t\t\t\tthemeDisplay.getLocale());\n\n\t\t\trestoreEntryMessages.add(restoreEntryTitle);\n\n\t\t\trestoreLinks.add(restoreLink);\n\t\t\trestoreMessages.add(restoreMessage);\n\t\t}\n\n\t\tMap<String, List<String>> data = new HashMap<>();\n\n\t\tdata.put(\"restoreClassNames\", restoreClassNames);\n\t\tdata.put(\"restoreEntryLinks\", restoreEntryLinks);\n\t\tdata.put(\"restoreEntryMessages\", restoreEntryMessages);\n\t\tdata.put(\"restoreLinks\", restoreLinks);\n\t\tdata.put(\"restoreMessages\", restoreMessages);\n\n\t\tSessionMessages.add(\n\t\t\tactionRequest,\n\t\t\tPortalUtil.getPortletId(actionRequest) +\n\t\t\t\tSessionMessages.KEY_SUFFIX_DELETE_SUCCESS_DATA, data);\n\t}","commit_id":"1b0dd2398ff9cea7b92954de0c2809ac0dc9c4c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void deleteEntries(ActionRequest actionRequest) throws Exception {\n\t\tlong trashEntryId = ParamUtil.getLong(actionRequest, \"trashEntryId\");\n\n\t\tif (trashEntryId > 0) {\n\t\t\tTrashEntryServiceUtil.deleteEntry(trashEntryId);\n\n\t\t\treturn;\n\t\t}\n\n\t\tlong[] deleteEntryIds = StringUtil.split(\n\t\t\tParamUtil.getString(actionRequest, \"deleteThrashEntryIds\"), 0L);\n\n\t\tif (deleteEntryIds.length > 0) {\n\t\t\tfor (int i = 0; i < deleteEntryIds.length; i++) {\n\t\t\t\tTrashEntryServiceUtil.deleteEntry(deleteEntryIds[i]);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tString className = ParamUtil.getString(actionRequest, \"className\");\n\t\tlong classPK = ParamUtil.getLong(actionRequest, \"classPK\");\n\n\t\tif (Validator.isNotNull(className) && (classPK > 0)) {\n\t\t\tTrashEntryServiceUtil.deleteEntry(className, classPK);\n\t\t}\n\t}","id":96285,"modified_method":"public void deleteEntries(\n\t\t\tActionRequest actionRequest, ActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tlong trashEntryId = ParamUtil.getLong(actionRequest, \"trashEntryId\");\n\n\t\tif (trashEntryId > 0) {\n\t\t\tTrashEntryServiceUtil.deleteEntry(trashEntryId);\n\n\t\t\treturn;\n\t\t}\n\n\t\tlong[] deleteEntryIds = StringUtil.split(\n\t\t\tParamUtil.getString(actionRequest, \"deleteThrashEntryIds\"), 0L);\n\n\t\tif (deleteEntryIds.length > 0) {\n\t\t\tfor (int i = 0; i < deleteEntryIds.length; i++) {\n\t\t\t\tTrashEntryServiceUtil.deleteEntry(deleteEntryIds[i]);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\tString className = ParamUtil.getString(actionRequest, \"className\");\n\t\tlong classPK = ParamUtil.getLong(actionRequest, \"classPK\");\n\n\t\tif (Validator.isNotNull(className) && (classPK > 0)) {\n\t\t\tTrashEntryServiceUtil.deleteEntry(className, classPK);\n\t\t}\n\n\t\tsendRedirect(actionRequest, actionResponse);\n\t}","commit_id":"1b0dd2398ff9cea7b92954de0c2809ac0dc9c4c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public List<ObjectValuePair<String, Long>> restoreRename(\n\t\t\tActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)actionRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tlong trashEntryId = ParamUtil.getLong(actionRequest, \"trashEntryId\");\n\n\t\tString newName = ParamUtil.getString(actionRequest, \"newName\");\n\n\t\tif (Validator.isNull(newName)) {\n\t\t\tString oldName = ParamUtil.getString(actionRequest, \"oldName\");\n\n\t\t\tnewName = TrashUtil.getNewName(themeDisplay, null, 0, oldName);\n\t\t}\n\n\t\tTrashEntry entry = TrashEntryServiceUtil.restoreEntry(\n\t\t\ttrashEntryId, 0, newName);\n\n\t\treturn getEntryOVPs(entry.getClassName(), entry.getClassPK());\n\t}","id":96286,"modified_method":"public void restoreRename(\n\t\t\tActionRequest actionRequest, ActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)actionRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tlong trashEntryId = ParamUtil.getLong(actionRequest, \"trashEntryId\");\n\n\t\tString newName = ParamUtil.getString(actionRequest, \"newName\");\n\n\t\tif (Validator.isNull(newName)) {\n\t\t\tString oldName = ParamUtil.getString(actionRequest, \"oldName\");\n\n\t\t\tnewName = TrashUtil.getNewName(themeDisplay, null, 0, oldName);\n\t\t}\n\n\t\tTrashEntry entry = TrashEntryServiceUtil.restoreEntry(\n\t\t\ttrashEntryId, 0, newName);\n\n\t\taddRestoreData(\n\t\t\tactionRequest,\n\t\t\tgetEntryOVPs(entry.getClassName(), entry.getClassPK()));\n\n\t\tsendRedirect(actionRequest, actionResponse);\n\t}","commit_id":"1b0dd2398ff9cea7b92954de0c2809ac0dc9c4c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public List<ObjectValuePair<String, Long>> restoreEntries(\n\t\t\tActionRequest actionRequest)\n\t\tthrows Exception {\n\n\t\tlong trashEntryId = ParamUtil.getLong(actionRequest, \"trashEntryId\");\n\n\t\tif (trashEntryId > 0) {\n\t\t\tTrashEntry entry = TrashEntryServiceUtil.restoreEntry(trashEntryId);\n\n\t\t\treturn getEntryOVPs(entry.getClassName(), entry.getClassPK());\n\t\t}\n\n\t\tlong[] restoreEntryIds = StringUtil.split(\n\t\t\tParamUtil.getString(actionRequest, \"restoreTrashEntryIds\"), 0L);\n\n\t\tList<ObjectValuePair<String, Long>> entryOVPs = new ArrayList<>();\n\n\t\tfor (long restoreEntryId : restoreEntryIds) {\n\t\t\tTrashEntry entry = TrashEntryServiceUtil.restoreEntry(\n\t\t\t\trestoreEntryId);\n\n\t\t\tentryOVPs.addAll(\n\t\t\t\tgetEntryOVPs(entry.getClassName(), entry.getClassPK()));\n\t\t}\n\n\t\treturn entryOVPs;\n\t}","id":96287,"modified_method":"public void restoreEntries(\n\t\t\tActionRequest actionRequest, ActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tList<ObjectValuePair<String, Long>> entryOVPs = new ArrayList<>();\n\n\t\tlong trashEntryId = ParamUtil.getLong(actionRequest, \"trashEntryId\");\n\n\t\tif (trashEntryId > 0) {\n\t\t\tTrashEntry entry = TrashEntryServiceUtil.restoreEntry(trashEntryId);\n\n\t\t\tentryOVPs = getEntryOVPs(entry.getClassName(), entry.getClassPK());\n\t\t}\n\t\telse {\n\t\t\tlong[] restoreEntryIds = StringUtil.split(\n\t\t\t\tParamUtil.getString(actionRequest, \"restoreTrashEntryIds\"), 0L);\n\n\t\t\tfor (long restoreEntryId : restoreEntryIds) {\n\t\t\t\tTrashEntry entry = TrashEntryServiceUtil.restoreEntry(\n\t\t\t\t\trestoreEntryId);\n\n\t\t\t\tentryOVPs.addAll(\n\t\t\t\t\tgetEntryOVPs(entry.getClassName(), entry.getClassPK()));\n\t\t\t}\n\t\t}\n\n\t\taddRestoreData(actionRequest, entryOVPs);\n\n\t\tsendRedirect(actionRequest, actionResponse);\n\t}","commit_id":"1b0dd2398ff9cea7b92954de0c2809ac0dc9c4c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void emptyTrash(ActionRequest actionRequest) throws Exception {\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)actionRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tlong groupId = ParamUtil.getLong(\n\t\t\tactionRequest, \"groupId\", themeDisplay.getScopeGroupId());\n\n\t\tTrashEntryServiceUtil.deleteEntries(groupId);\n\t}","id":96288,"modified_method":"public void emptyTrash(\n\t\t\tActionRequest actionRequest, ActionResponse actionResponse)\n\t\tthrows Exception {\n\n\t\tThemeDisplay themeDisplay = (ThemeDisplay)actionRequest.getAttribute(\n\t\t\tWebKeys.THEME_DISPLAY);\n\n\t\tlong groupId = ParamUtil.getLong(\n\t\t\tactionRequest, \"groupId\", themeDisplay.getScopeGroupId());\n\n\t\tTrashEntryServiceUtil.deleteEntries(groupId);\n\t}","commit_id":"1b0dd2398ff9cea7b92954de0c2809ac0dc9c4c4","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public void visitReferenceExpression(\n                @NotNull PsiReferenceExpression ref){\n            if(!indexVariableUsedOnlyAsIndex){\n                return;\n            }\n            super.visitReferenceExpression(ref);\n\n            final PsiElement element = ref.resolve();\n            if(indexVariable.equals(element) && !isListIndexExpression(ref,\n                                                                       collection)){\n                indexVariableUsedOnlyAsIndex = false;\n            }\n            if(collection.equals(element) && !isListReferenceInIndexExpression(\n                    ref, collection)){\n                indexVariableUsedOnlyAsIndex = false;\n            }\n        }","id":96289,"modified_method":"public void visitReferenceExpression(\n                @NotNull PsiReferenceExpression reference){\n            if(!indexVariableUsedOnlyAsIndex){\n                return;\n            }\n            super.visitReferenceExpression(reference);\n            final PsiElement element = reference.resolve();\n            if(indexVariable.equals(element) &&\n                    !isListIndexExpression(reference, collection)) {\n                indexVariableUsedOnlyAsIndex = false;\n            }\n            if(collection.equals(element) &&\n                    !isListReferenceInIndexExpression(reference, collection)){\n                indexVariableUsedOnlyAsIndex = false;\n            }\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean isVariableAssigned(String arrayReference,\n                                              PsiStatement body){\n        final VariableAssignmentVisitor visitor =\n                new VariableAssignmentVisitor(arrayReference);\n        body.accept(visitor);\n        return visitor.isArrayAssigned();\n    }","id":96290,"modified_method":"private static boolean isVariableAssigned(String arrayName,\n                                              PsiStatement body){\n        if (body == null) {\n            return false;\n        }\n        final VariableAssignmentVisitor visitor =\n                new VariableAssignmentVisitor(arrayName);\n        body.accept(visitor);\n        return visitor.isArrayAssigned();\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private String createCollectionIterationText(\n                PsiForStatement forStatement,\n                Project project)\n                throws IncorrectOperationException{\n            final int length = forStatement.getText().length();\n            @NonNls final StringBuffer out = new StringBuffer(length);\n            final PsiStatement body = forStatement.getBody();\n            final PsiStatement firstStatement = getFirstStatement(body);\n            final PsiStatement initialization =\n                    forStatement.getInitialization();\n            final PsiDeclarationStatement declaration =\n                    (PsiDeclarationStatement) initialization;\n            final PsiLocalVariable iterator =\n                    (PsiLocalVariable) declaration.getDeclaredElements()[0];\n\n            final PsiClassType iteratorType = (PsiClassType) iterator.getType();\n            final PsiType[] iteratorTypeParameters = iteratorType\n                    .getParameters();\n            PsiType iteratedContentsType = null;\n            if(iteratorTypeParameters.length == 1){\n                final PsiType parameterType = iteratorTypeParameters[0];\n                if(parameterType instanceof PsiWildcardType){\n                    final PsiWildcardType wildcardType = (PsiWildcardType) parameterType;\n                    iteratedContentsType = wildcardType.getExtendsBound();\n                } else{\n                    iteratedContentsType = parameterType;\n                }\n            }\n            final PsiMethodCallExpression initializer =\n                    (PsiMethodCallExpression) iterator.getInitializer();\n            final PsiExpression collection =\n                    initializer.getMethodExpression().getQualifierExpression();\n            final PsiClassType collectionType = (PsiClassType) collection\n                    .getType();\n\n            final PsiType[] parameters = collectionType.getParameters();\n            final String collectionContentsTypeString;\n            if(parameters.length == 1){\n                final PsiType parameterType = parameters[0];\n                if(parameterType instanceof PsiWildcardType){\n                    final PsiWildcardType wildcardType = (PsiWildcardType) parameterType;\n                    final PsiType bound = wildcardType.getExtendsBound();\n                    collectionContentsTypeString = bound.getCanonicalText();\n                } else if(parameterType != null){\n                    collectionContentsTypeString = parameterType\n                            .getCanonicalText();\n                } else{\n                    collectionContentsTypeString = \"java.lang.Object\";\n                }\n            } else{\n                collectionContentsTypeString = \"java.lang.Object\";\n            }\n            final String contentTypeString;\n\n            if(iteratedContentsType != null){\n                contentTypeString = iteratedContentsType.getCanonicalText();\n            } else{\n                contentTypeString = collectionContentsTypeString;\n            }\n            final PsiManager psiManager = PsiManager.getInstance(project);\n            final PsiElementFactory elementFactory =\n                    psiManager.getElementFactory();\n            final PsiType contentType =\n                    elementFactory.createTypeFromText(contentTypeString,\n                                                      forStatement);\n            final String iteratorName = iterator.getName();\n            final boolean isDeclaration =\n                    isIteratorNextDeclaration(firstStatement, iteratorName,\n                                              contentTypeString);\n            final PsiStatement statementToSkip;\n            @NonNls final String finalString;\n            final String contentVariableName;\n            if(isDeclaration){\n                final PsiDeclarationStatement decl =\n                        (PsiDeclarationStatement) firstStatement;\n                assert decl != null;\n                final PsiElement[] declaredElements =\n                        decl.getDeclaredElements();\n                final PsiLocalVariable localVar =\n                        (PsiLocalVariable) declaredElements[0];\n                contentVariableName = localVar.getName();\n                statementToSkip = decl;\n                if(localVar.hasModifierProperty(PsiModifier.FINAL)){\n                    finalString = \"final \";\n                } else{\n                    finalString = \"\";\n                }\n            } else{\n                if(collection instanceof PsiReferenceExpression){\n                    final String collectionName =\n                            ((PsiReferenceExpression) collection)\n                                    .getReferenceName();\n                    contentVariableName = createNewVarName(project,\n                                                           forStatement,\n                                                           contentType,\n                                                           collectionName);\n                } else{\n                    contentVariableName = createNewVarName(project,\n                                                           forStatement,\n                                                           contentType, null);\n                }\n                if(CodeStyleSettingsManager\n                        .getSettings(project).GENERATE_FINAL_LOCALS){\n                    finalString = \"final \";\n                } else{\n                    finalString = \"\";\n                }\n                statementToSkip = null;\n            }\n\n            @NonNls final String iterableTypeString = \"java.lang.Iterable<\"\n                                              + contentTypeString + '>';\n            final PsiManager manager = forStatement.getManager();\n            final PsiElementFactory factory = manager.getElementFactory();\n            final PsiType collectionContentsType = factory\n                    .createTypeFromText(collectionContentsTypeString,\n                                        forStatement);\n            final String castString;\n\n            if(iteratedContentsType == null ||\n               iteratedContentsType\n                       .isAssignableFrom(collectionContentsType)){\n                castString = \"\";\n            } else{\n                castString = \"(\" + iterableTypeString + \")\";\n            }\n            out.append(\"for(\" + finalString + contentTypeString + ' ' +\n                       contentVariableName + \": \" + castString\n                       + collection.getText() + ')');\n            replaceIteratorNext(body, contentVariableName, iteratorName,\n                                statementToSkip, out, contentTypeString);\n            return out.toString();\n        }","id":96291,"modified_method":"@Nullable\n        private static String createCollectionIterationText(\n                @NotNull PsiForStatement forStatement)\n                throws IncorrectOperationException{\n            final String text = forStatement.getText();\n            final int length = text.length();\n            @NonNls final StringBuffer out = new StringBuffer(length);\n            final PsiStatement body = forStatement.getBody();\n            final PsiStatement firstStatement = getFirstStatement(body);\n            final PsiStatement initialization =\n                    forStatement.getInitialization();\n            final PsiDeclarationStatement declaration =\n                    (PsiDeclarationStatement) initialization;\n            if (declaration == null) {\n                return null;\n            }\n            final PsiLocalVariable iterator =\n                    (PsiLocalVariable) declaration.getDeclaredElements()[0];\n\n            final PsiClassType iteratorType = (PsiClassType) iterator.getType();\n            final PsiType[] iteratorTypeParameters = iteratorType\n                    .getParameters();\n            PsiType iteratedContentsType = null;\n            if(iteratorTypeParameters.length == 1){\n                final PsiType parameterType = iteratorTypeParameters[0];\n                if(parameterType instanceof PsiWildcardType){\n                    final PsiWildcardType wildcardType =\n                            (PsiWildcardType) parameterType;\n                    iteratedContentsType = wildcardType.getExtendsBound();\n                } else{\n                    iteratedContentsType = parameterType;\n                }\n            }\n            final PsiMethodCallExpression initializer =\n                    (PsiMethodCallExpression) iterator.getInitializer();\n            if (initializer == null) {\n                return null;\n            }\n            final PsiReferenceExpression methodExpression =\n                    initializer.getMethodExpression();\n            final PsiExpression collection =\n                    methodExpression.getQualifierExpression();\n            if (collection == null) {\n                return null;\n            }\n            final PsiClassType collectionType =\n                    (PsiClassType) collection.getType();\n            if (collectionType == null) {\n                return null;\n            }\n            final PsiType[] parameters = collectionType.getParameters();\n            final String collectionContentsTypeString;\n            if(parameters.length == 1){\n                final PsiType parameterType = parameters[0];\n                if(parameterType instanceof PsiWildcardType){\n                    final PsiWildcardType wildcardType =\n                            (PsiWildcardType) parameterType;\n                    final PsiType bound = wildcardType.getExtendsBound();\n                    collectionContentsTypeString = bound.getCanonicalText();\n                } else if(parameterType != null){\n                    collectionContentsTypeString = parameterType\n                            .getCanonicalText();\n                } else{\n                    collectionContentsTypeString = \"java.lang.Object\";\n                }\n            } else{\n                collectionContentsTypeString = \"java.lang.Object\";\n            }\n            final String contentTypeString;\n\n            if(iteratedContentsType != null){\n                contentTypeString = iteratedContentsType.getCanonicalText();\n            } else{\n                contentTypeString = collectionContentsTypeString;\n            }\n            final PsiManager psiManager = forStatement.getManager();\n            final PsiElementFactory elementFactory =\n                    psiManager.getElementFactory();\n            final PsiType contentType =\n                    elementFactory.createTypeFromText(contentTypeString,\n                            forStatement);\n            final String iteratorName = iterator.getName();\n            final boolean isDeclaration =\n                    isIteratorNextDeclaration(firstStatement, iteratorName,\n                            contentTypeString);\n            final PsiStatement statementToSkip;\n            @NonNls final String finalString;\n            final String contentVariableName;\n            if(isDeclaration){\n                final PsiDeclarationStatement decl =\n                        (PsiDeclarationStatement) firstStatement;\n                assert decl != null;\n                final PsiElement[] declaredElements =\n                        decl.getDeclaredElements();\n                final PsiLocalVariable localVar =\n                        (PsiLocalVariable) declaredElements[0];\n                contentVariableName = localVar.getName();\n                statementToSkip = decl;\n                if(localVar.hasModifierProperty(PsiModifier.FINAL)){\n                    finalString = \"final \";\n                } else{\n                    finalString = \"\";\n                }\n            } else{\n                if(collection instanceof PsiReferenceExpression){\n                    final PsiReferenceExpression referenceExpression =\n                            (PsiReferenceExpression)collection;\n                    final String collectionName =\n                            referenceExpression.getReferenceName();\n                    contentVariableName = createNewVarName(forStatement,\n                            contentType, collectionName);\n                } else{\n                    contentVariableName = createNewVarName(forStatement,\n                            contentType, null);\n                }\n                final Project project = forStatement.getProject();\n                final CodeStyleSettings codeStyleSettings =\n                        CodeStyleSettingsManager.getSettings(project);\n                if(codeStyleSettings.GENERATE_FINAL_LOCALS){\n                    finalString = \"final \";\n                } else{\n                    finalString = \"\";\n                }\n                statementToSkip = null;\n            }\n            @NonNls final String iterableTypeString = \"java.lang.Iterable<\"\n                    + contentTypeString + '>';\n            final PsiManager manager = forStatement.getManager();\n            final PsiElementFactory factory = manager.getElementFactory();\n            final PsiType collectionContentsType = factory\n                    .createTypeFromText(collectionContentsTypeString,\n                            forStatement);\n            final String castString;\n\n            if(iteratedContentsType == null ||\n                    iteratedContentsType\n                            .isAssignableFrom(collectionContentsType)){\n                castString = \"\";\n            } else{\n                castString = '(' + iterableTypeString + ')';\n            }\n            out.append(\"for(\");\n            out.append(finalString);\n            out.append(contentTypeString);\n            out.append(' ');\n            out.append(contentVariableName);\n            out.append(\": \");\n            out.append(castString);\n            out.append(collection.getText());\n            out.append(')');\n            replaceIteratorNext(body, contentVariableName, iteratorName,\n                    statementToSkip, out, contentTypeString);\n            return out.toString();\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean isListSizeComparison(PsiExpression condition,\n                                                PsiLocalVariable var){\n        final PsiExpression strippedCondition =\n                ParenthesesUtils.stripParentheses(condition);\n\n        if(!(strippedCondition instanceof PsiBinaryExpression)){\n            return false;\n        }\n        final PsiBinaryExpression binaryExp =\n                (PsiBinaryExpression) strippedCondition;\n        final PsiJavaToken sign = binaryExp.getOperationSign();\n        if(!sign.getTokenType().equals(JavaTokenType.LT)){\n            return false;\n        }\n        final PsiExpression lhs = binaryExp.getLOperand();\n        if(!expressionIsVariableLookup(lhs, var)){\n            return false;\n        }\n        final PsiExpression rhs = binaryExp.getROperand();\n        return expressionIsListSizeLookup(rhs);\n    }","id":96292,"modified_method":"private static boolean isListSizeComparison(PsiExpression condition,\n                                                PsiLocalVariable var){\n        final PsiExpression strippedCondition =\n                ParenthesesUtils.stripParentheses(condition);\n        if(!(strippedCondition instanceof PsiBinaryExpression)){\n            return false;\n        }\n        final PsiBinaryExpression binaryExp =\n                (PsiBinaryExpression) strippedCondition;\n        final PsiJavaToken sign = binaryExp.getOperationSign();\n        final IElementType tokenType = sign.getTokenType();\n        if(!tokenType.equals(JavaTokenType.LT)){\n            return false;\n        }\n        final PsiExpression lhs = binaryExp.getLOperand();\n        if(!expressionIsVariableLookup(lhs, var)){\n            return false;\n        }\n        final PsiExpression rhs = binaryExp.getROperand();\n        return expressionIsListSizeLookup(rhs);\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitMethodCallExpression(\n                @NotNull PsiMethodCallExpression expression){\n            if(removeCalled){\n                return;\n            }\n            super.visitMethodCallExpression(expression);\n            final PsiReferenceExpression methodExpression =\n                    expression.getMethodExpression();\n            final String name = methodExpression.getReferenceName();\n            if(!REMOVE_METHOD.equals(name)){\n                return;\n            }\n            final PsiExpression qualifier =\n                    methodExpression.getQualifierExpression();\n            if(qualifier != null){\n                final String qualifierText = qualifier.getText();\n                if(iteratorName.equals(qualifierText)){\n                    removeCalled = true;\n                }\n            }\n        }","id":96293,"modified_method":"public void visitMethodCallExpression(\n                @NotNull PsiMethodCallExpression expression){\n            if(removeCalled){\n                return;\n            }\n            super.visitMethodCallExpression(expression);\n            final PsiReferenceExpression methodExpression =\n                    expression.getMethodExpression();\n            final String name = methodExpression.getReferenceName();\n            if(!HardcodedMethodConstants.REMOVE.equals(name)){\n                return;\n            }\n            final PsiExpression qualifier =\n                    methodExpression.getQualifierExpression();\n            if(qualifier != null){\n                final String qualifierText = qualifier.getText();\n                if(iteratorName.equals(qualifierText)){\n                    removeCalled = true;\n                }\n            }\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean expressionIsArrayLengthLookup(\n            PsiExpression expression){\n        final PsiExpression strippedExpression =\n                ParenthesesUtils.stripParentheses(expression);\n        if(!(strippedExpression instanceof PsiReferenceExpression)){\n            return false;\n        }\n        final PsiReferenceExpression reference =\n                (PsiReferenceExpression) strippedExpression;\n        final String referenceName = reference.getReferenceName();\n        if(!LENGTH_METHOD.equals(referenceName)){\n            return false;\n        }\n        final PsiExpression qualifier = reference.getQualifierExpression();\n        if(!(qualifier instanceof PsiReferenceExpression)){\n            return false;\n        }\n        final PsiType type = qualifier.getType();\n        if(type == null){\n            return false;\n        }\n        return type.getArrayDimensions() > 0;\n    }","id":96294,"modified_method":"private static boolean expressionIsArrayLengthLookup(\n            PsiExpression expression){\n        final PsiExpression strippedExpression =\n                ParenthesesUtils.stripParentheses(expression);\n        if(!(strippedExpression instanceof PsiReferenceExpression)){\n            return false;\n        }\n        final PsiReferenceExpression reference =\n                (PsiReferenceExpression) strippedExpression;\n        final String referenceName = reference.getReferenceName();\n        if(!HardcodedMethodConstants.LENGTH.equals(referenceName)){\n            return false;\n        }\n        final PsiExpression qualifier = reference.getQualifierExpression();\n        if(!(qualifier instanceof PsiReferenceExpression)){\n            return false;\n        }\n        final PsiType type = qualifier.getType();\n        if(type == null){\n            return false;\n        }\n        return type.getArrayDimensions() > 0;\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void replaceArrayAccess(PsiElement element,\n                                        String contentVariableName,\n                                        String arrayName, String indexName,\n                                        PsiElement childToSkip,\n                                        StringBuffer out){\n            if(isArrayLookup(element, indexName, arrayName)){\n                out.append(contentVariableName);\n            } else{\n                final PsiElement[] children = element.getChildren();\n                if(children.length == 0){\n                    out.append(element.getText());\n                } else{\n                    boolean skippingWhiteSpace = false;\n                    for(final PsiElement child : children){\n                        if(child.equals(childToSkip)){\n                            skippingWhiteSpace = true;\n                        } else if(child instanceof PsiWhiteSpace &&\n                                  skippingWhiteSpace){\n                            //don't do anything\n                        } else{\n                            skippingWhiteSpace = false;\n                            replaceArrayAccess(child, contentVariableName,\n                                               arrayName, indexName,\n                                               childToSkip, out);\n                        }\n                    }\n                }\n            }\n        }","id":96295,"modified_method":"private static void replaceArrayAccess(\n                PsiElement element, String contentVariableName,\n                String arrayName, String indexName, PsiElement childToSkip,\n                StringBuffer out){\n            if(isArrayLookup(element, indexName, arrayName)){\n                out.append(contentVariableName);\n            } else{\n                final PsiElement[] children = element.getChildren();\n                if(children.length == 0){\n                    final String text = element.getText();\n                    if (PsiKeyword.INSTANCEOF.equals(text) &&\n                        out.charAt(out.length() - 1) != ' ') {\n                        out.append(' ');\n                    }\n                    out.append(text);\n                } else{\n                    boolean skippingWhiteSpace = false;\n                    for(final PsiElement child : children){\n                        if(child.equals(childToSkip)){\n                            skippingWhiteSpace = true;\n                        } else if(child instanceof PsiWhiteSpace &&\n                                skippingWhiteSpace){\n                            //don't do anything\n                        } else{\n                            skippingWhiteSpace = false;\n                            replaceArrayAccess(child, contentVariableName,\n                                    arrayName, indexName,\n                                    childToSkip, out);\n                        }\n                    }\n                }\n            }\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean isHasNext(PsiExpression condition, String iterator){\n        if(!(condition instanceof PsiMethodCallExpression)){\n            return false;\n        }\n        final PsiMethodCallExpression call =\n                (PsiMethodCallExpression) condition;\n        final PsiExpressionList argumentList = call.getArgumentList();\n        if(argumentList == null){\n            return false;\n        }\n        final PsiExpression[] args = argumentList.getExpressions();\n        if(args.length != 0){\n            return false;\n        }\n        final PsiReferenceExpression methodExpression =\n                call.getMethodExpression();\n        if(methodExpression == null){\n            return false;\n        }\n        final String methodName = methodExpression.getReferenceName();\n        if(!HAS_NEXT_METHOD.equals(methodName)){\n            return false;\n        }\n        final PsiExpression qualifier =\n                methodExpression.getQualifierExpression();\n        if(qualifier == null){\n            return true;\n        }\n        final String target = qualifier.getText();\n        return iterator.equals(target);\n    }","id":96296,"modified_method":"private static boolean isHasNext(PsiExpression condition, String iterator){\n        if(!(condition instanceof PsiMethodCallExpression)){\n            return false;\n        }\n        final PsiMethodCallExpression call =\n                (PsiMethodCallExpression) condition;\n        final PsiExpressionList argumentList = call.getArgumentList();\n        final PsiExpression[] args = argumentList.getExpressions();\n        if(args.length != 0){\n            return false;\n        }\n        final PsiReferenceExpression methodExpression =\n                call.getMethodExpression();\n        final String methodName = methodExpression.getReferenceName();\n        if(!HardcodedMethodConstants.HAS_NEXT.equals(methodName)){\n            return false;\n        }\n        final PsiExpression qualifier =\n                methodExpression.getQualifierExpression();\n        if(qualifier == null){\n            return true;\n        }\n        final String target = qualifier.getText();\n        return iterator.equals(target);\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean expressionIsListSizeLookup(PsiExpression expression){\n        return isListMethodCall(expression, SIZE_METHOD);\n    }","id":96297,"modified_method":"private static boolean expressionIsListSizeLookup(PsiExpression expression){\n        return isListMethodCall(expression, HardcodedMethodConstants.SIZE);\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static PsiReferenceExpression getVariableReferenceFromCondition(\n            PsiExpression condition){\n        final PsiExpression strippedCondition =\n                ParenthesesUtils.stripParentheses(condition);\n        final PsiBinaryExpression binaryExp =\n                (PsiBinaryExpression) strippedCondition;\n        PsiExpression rhs = ParenthesesUtils\n                .stripParentheses(binaryExp.getROperand());\n        if(rhs instanceof PsiMethodCallExpression){\n            rhs = ((PsiMethodCallExpression) rhs).getMethodExpression();\n        }\n        return (PsiReferenceExpression) ((PsiReferenceExpression) rhs)\n                .getQualifierExpression();\n    }","id":96298,"modified_method":"@Nullable\n    private static PsiReferenceExpression getVariableReferenceFromCondition(\n            PsiExpression condition){\n        final PsiExpression strippedCondition =\n                ParenthesesUtils.stripParentheses(condition);\n        final PsiBinaryExpression binaryExp =\n                (PsiBinaryExpression) strippedCondition;\n        if (binaryExp == null) {\n            return null;\n        }\n        final PsiExpression rhs = binaryExp.getROperand();\n        if (rhs == null) {\n            return null;\n        }\n        PsiExpression strippedRhs =\n                ParenthesesUtils.stripParentheses(rhs);\n        if(strippedRhs instanceof PsiMethodCallExpression){\n            final PsiMethodCallExpression methodCallExpression =\n                    (PsiMethodCallExpression)strippedRhs;\n            strippedRhs = methodCallExpression.getMethodExpression();\n        }\n        if (strippedRhs == null) {\n            return null;\n        }\n        final PsiReferenceExpression referenceExpression =\n                (PsiReferenceExpression)strippedRhs;\n        return (PsiReferenceExpression)\n                referenceExpression.getQualifierExpression();\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean isIncrement(PsiStatement statement,\n                                       PsiLocalVariable var){\n        if(!(statement instanceof PsiExpressionStatement)){\n            return false;\n        }\n        PsiExpression exp =\n                ((PsiExpressionStatement) statement).getExpression();\n        exp = ParenthesesUtils.stripParentheses(exp);\n        if(exp instanceof PsiPrefixExpression){\n            final PsiPrefixExpression prefixExp = (PsiPrefixExpression) exp;\n            final PsiJavaToken sign = prefixExp.getOperationSign();\n            if(sign == null){\n                return false;\n            }\n            final IElementType tokenType = sign.getTokenType();\n            if(!tokenType.equals(JavaTokenType.PLUSPLUS)){\n                return false;\n            }\n            final PsiExpression operand = prefixExp.getOperand();\n            return expressionIsVariableLookup(operand, var);\n        } else if(exp instanceof PsiPostfixExpression){\n            final PsiPostfixExpression postfixExp = (PsiPostfixExpression) exp;\n            final PsiJavaToken sign = postfixExp.getOperationSign();\n            if(sign == null){\n                return false;\n            }\n            final IElementType tokenType = sign.getTokenType();\n            if(!tokenType.equals(JavaTokenType.PLUSPLUS)){\n                return false;\n            }\n            final PsiExpression operand = postfixExp.getOperand();\n            return expressionIsVariableLookup(operand, var);\n        }\n        return false;\n    }","id":96299,"modified_method":"private static boolean isIncrement(PsiStatement statement,\n                                       PsiLocalVariable var){\n        if(!(statement instanceof PsiExpressionStatement)){\n            return false;\n        }\n        PsiExpression exp =\n                ((PsiExpressionStatement) statement).getExpression();\n        exp = ParenthesesUtils.stripParentheses(exp);\n        if(exp instanceof PsiPrefixExpression){\n            final PsiPrefixExpression prefixExp = (PsiPrefixExpression) exp;\n            final PsiJavaToken sign = prefixExp.getOperationSign();\n            final IElementType tokenType = sign.getTokenType();\n            if(!tokenType.equals(JavaTokenType.PLUSPLUS)){\n                return false;\n            }\n            final PsiExpression operand = prefixExp.getOperand();\n            return expressionIsVariableLookup(operand, var);\n        } else if(exp instanceof PsiPostfixExpression){\n            final PsiPostfixExpression postfixExp = (PsiPostfixExpression) exp;\n            final PsiJavaToken sign = postfixExp.getOperationSign();\n            final IElementType tokenType = sign.getTokenType();\n            if(!tokenType.equals(JavaTokenType.PLUSPLUS)){\n                return false;\n            }\n            final PsiExpression operand = postfixExp.getOperand();\n            return expressionIsVariableLookup(operand, var);\n        }\n        return false;\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean expressionIsVariableLookup(PsiExpression expression,\n                                                      PsiLocalVariable var){\n        if(expression == null)\n        {\n            return false;\n        }\n        final PsiExpression strippedExpression =\n                ParenthesesUtils.stripParentheses(expression);\n\n        final String expressionText = strippedExpression.getText();\n        final String varText = var.getName();\n        return expressionText.equals(varText);\n    }","id":96300,"modified_method":"private static boolean expressionIsVariableLookup(PsiExpression expression,\n                                                      PsiLocalVariable var){\n        if(expression == null){\n            return false;\n        }\n        final PsiExpression strippedExpression =\n                ParenthesesUtils.stripParentheses(expression);\n        if (strippedExpression == null) {\n            return false;\n        }\n        final String expressionText = strippedExpression.getText();\n        final String varText = var.getName();\n        return expressionText.equals(varText);\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private String createArrayIterationText(PsiForStatement forStatement,\n                                                Project project){\n            final int length = forStatement.getText().length();\n            @NonNls final StringBuffer out = new StringBuffer(length);\n            final PsiBinaryExpression condition =\n                    (PsiBinaryExpression) forStatement.getCondition();\n            final PsiExpression lhs = condition.getLOperand();\n            final String indexName = lhs.getText();\n            final PsiReferenceExpression arrayLengthExpression =\n                    (PsiReferenceExpression) condition.getROperand();\n            assert arrayLengthExpression != null;\n            final PsiReferenceExpression arrayReference =\n                    (PsiReferenceExpression) arrayLengthExpression\n                            .getQualifierExpression();\n            final PsiArrayType arrayType =\n                    (PsiArrayType) arrayReference.getType();\n            final PsiType componentType = arrayType.getComponentType();\n            final String type = componentType.getPresentableText();\n            final String arrayName = arrayReference.getText();\n            final PsiStatement body = forStatement.getBody();\n            final PsiStatement firstStatement = getFirstStatement(body);\n            final boolean isDeclaration =\n                    isArrayElementDeclaration(firstStatement, arrayName,\n                                              indexName);\n            final String contentVariableName;\n            @NonNls final String finalString;\n            final PsiStatement statementToSkip;\n            if(isDeclaration){\n                final PsiDeclarationStatement decl =\n                        (PsiDeclarationStatement) firstStatement;\n                assert decl != null;\n                final PsiElement[] declaredElements =\n                        decl.getDeclaredElements();\n                final PsiLocalVariable localVar =\n                        (PsiLocalVariable) declaredElements[0];\n                contentVariableName = localVar.getName();\n                statementToSkip = decl;\n                if(localVar.hasModifierProperty(PsiModifier.FINAL)){\n                    finalString = \"final \";\n                } else{\n                    finalString = \"\";\n                }\n            } else{\n                final String collectionName =\n                        arrayReference.getReferenceName();\n                contentVariableName = createNewVarName(project,\n                                                       forStatement,\n                                                       componentType,\n                                                       collectionName);\n                finalString = \"\";\n                statementToSkip = null;\n            }\n            out.append(\"for(\" + finalString + type + ' ' + contentVariableName +\n                       \": \" + arrayName + ')');\n            replaceArrayAccess(body, contentVariableName, arrayName, indexName,\n                               statementToSkip, out);\n            return out.toString();\n        }","id":96301,"modified_method":"@Nullable\n        private static String createArrayIterationText(\n                @NotNull PsiForStatement forStatement) {\n            final String text = forStatement.getText();\n            final int length = text.length();\n            @NonNls final StringBuffer out = new StringBuffer(length);\n            final PsiExpression condition = forStatement.getCondition();\n            if (condition == null) {\n                return null;\n            }\n            final PsiBinaryExpression strippedCondition =\n                    (PsiBinaryExpression)ParenthesesUtils.stripParentheses(\n                            condition);\n            if (strippedCondition == null) {\n                return null;\n            }\n            final PsiExpression lhs =\n                    ParenthesesUtils.stripParentheses(strippedCondition.getLOperand());\n            if (lhs == null) {\n                return null;\n            }\n            final String indexName = lhs.getText();\n            final PsiExpression rhs = strippedCondition.getROperand();\n            if (rhs == null) {\n                return null;\n            }\n            final PsiReferenceExpression arrayLengthExpression =\n                    (PsiReferenceExpression)ParenthesesUtils.stripParentheses(\n                            rhs);\n            assert arrayLengthExpression != null;\n            final PsiReferenceExpression arrayReference =\n                    (PsiReferenceExpression) arrayLengthExpression\n                            .getQualifierExpression();\n            if (arrayReference == null) {\n                return null;\n            }\n            final PsiArrayType arrayType =\n                    (PsiArrayType) arrayReference.getType();\n            if (arrayType == null) {\n                return null;\n            }\n            final PsiType componentType = arrayType.getComponentType();\n            final String type = componentType.getPresentableText();\n            final String arrayName = arrayReference.getText();\n            final PsiStatement body = forStatement.getBody();\n            final PsiStatement firstStatement = getFirstStatement(body);\n            final boolean isDeclaration =\n                    isArrayElementDeclaration(firstStatement, arrayName,\n                            indexName);\n            final String contentVariableName;\n            @NonNls final String finalString;\n            final PsiStatement statementToSkip;\n            if(isDeclaration){\n                final PsiDeclarationStatement decl =\n                        (PsiDeclarationStatement) firstStatement;\n                assert decl != null;\n                final PsiElement[] declaredElements =\n                        decl.getDeclaredElements();\n                final PsiLocalVariable localVar =\n                        (PsiLocalVariable) declaredElements[0];\n                contentVariableName = localVar.getName();\n                statementToSkip = decl;\n                if(localVar.hasModifierProperty(PsiModifier.FINAL)){\n                    finalString = \"final \";\n                } else{\n                    finalString = \"\";\n                }\n            } else{\n                final String collectionName =\n                        arrayReference.getReferenceName();\n                contentVariableName = createNewVarName(forStatement,\n                        componentType, collectionName);\n                finalString = \"\";\n                statementToSkip = null;\n            }\n            out.append(\"for(\");\n            out.append(finalString);\n            out.append(type);\n            out.append(' ');\n            out.append(contentVariableName);\n            out.append(\": \");\n            out.append(arrayName);\n            out.append(')');\n            if (body != null) {\n                replaceArrayAccess(body, contentVariableName, arrayName,\n                        indexName, statementToSkip, out);\n            }\n            return out.toString();\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static int calculateCallsToIteratorNext(String iteratorName,\n                                                    PsiStatement body){\n        final NumCallsToIteratorNextVisitor visitor =\n                new NumCallsToIteratorNextVisitor(iteratorName);\n        body.accept(visitor);\n        return visitor.getNumCallsToIteratorNext();\n    }","id":96302,"modified_method":"private static int calculateCallsToIteratorNext(String iteratorName,\n                                                    PsiStatement body){\n        if (body == null) {\n            return 0;\n        }\n        final NumCallsToIteratorNextVisitor visitor =\n                new NumCallsToIteratorNextVisitor(iteratorName);\n        body.accept(visitor);\n        return visitor.getNumCallsToIteratorNext();\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitMethodCallExpression(\n                @NotNull PsiMethodCallExpression expression){\n            if(hasNextCalled){\n                return;\n            }\n            super.visitMethodCallExpression(expression);\n            final PsiReferenceExpression methodExpression =\n                    expression.getMethodExpression();\n            final String name = methodExpression.getReferenceName();\n            if(!HAS_NEXT_METHOD.equals(name)){\n                return;\n            }\n            final PsiExpression qualifier =\n                    methodExpression.getQualifierExpression();\n            if(qualifier != null){\n                final String qualifierText = qualifier.getText();\n                if(iteratorName.equals(qualifierText)){\n                    hasNextCalled = true;\n                }\n            }\n        }","id":96303,"modified_method":"public void visitMethodCallExpression(\n                @NotNull PsiMethodCallExpression expression){\n            if(hasNextCalled){\n                return;\n            }\n            super.visitMethodCallExpression(expression);\n            final PsiReferenceExpression methodExpression =\n                    expression.getMethodExpression();\n            final String name = methodExpression.getReferenceName();\n            if(!HardcodedMethodConstants.HAS_NEXT.equals(name)){\n                return;\n            }\n            final PsiExpression qualifier =\n                    methodExpression.getQualifierExpression();\n            if(qualifier != null){\n                final String qualifierText = qualifier.getText();\n                if(iteratorName.equals(qualifierText)){\n                    hasNextCalled = true;\n                }\n            }\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void replaceCollectionGetAccess(PsiElement element,\n                                                String contentVariableName,\n                                                String arrayName,\n                                                String indexName,\n                                                PsiElement childToSkip,\n                                                StringBuffer out){\n            if(isListGetLookup(element, indexName, arrayName)){\n                out.append(contentVariableName);\n            } else{\n                final PsiElement[] children = element.getChildren();\n                if(children.length == 0){\n                    out.append(element.getText());\n                } else{\n                    boolean skippingWhiteSpace = false;\n                    for(final PsiElement child : children){\n                        if(child.equals(childToSkip)){\n                            skippingWhiteSpace = true;\n                        } else if(child instanceof PsiWhiteSpace &&\n                                  skippingWhiteSpace){\n                            //don't do anything\n                        } else{\n                            skippingWhiteSpace = false;\n                            replaceCollectionGetAccess(child,\n                                                       contentVariableName,\n                                                       arrayName, indexName,\n                                                       childToSkip, out);\n                        }\n                    }\n                }\n            }\n        }","id":96304,"modified_method":"private static void replaceCollectionGetAccess(\n                PsiElement element, String contentVariableName,\n                String arrayName, String indexName,\n                PsiElement childToSkip, StringBuffer out) {\n            if (isListGetLookup(element, indexName, arrayName)){\n                out.append(contentVariableName);\n            } else{\n                final PsiElement[] children = element.getChildren();\n                if(children.length == 0){\n                    final String text = element.getText();\n                    if (PsiKeyword.INSTANCEOF.equals(text) &&\n                        out.charAt(out.length() - 1) != ' ') {\n                        out.append(' ');\n                    }\n                    out.append(text);\n                } else{\n                    boolean skippingWhiteSpace = false;\n                    for(final PsiElement child : children){\n                        if(child.equals(childToSkip)){\n                            skippingWhiteSpace = true;\n                        } else if(child instanceof PsiWhiteSpace &&\n                                skippingWhiteSpace){\n                            //don't do anything\n                        } else{\n                            skippingWhiteSpace = false;\n                            replaceCollectionGetAccess(child,\n                                    contentVariableName,\n                                    arrayName, indexName,\n                                    childToSkip, out);\n                        }\n                    }\n                }\n            }\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitForStatement(@NotNull PsiForStatement forStatement){\n            super.visitForStatement(forStatement);\n            final PsiManager manager = forStatement.getManager();\n            final LanguageLevel languageLevel =\n                    manager.getEffectiveLanguageLevel();\n            if(languageLevel.compareTo(LanguageLevel.JDK_1_5) < 0) {\n                return;\n            }\n            if(isArrayLoopStatement(forStatement)\n               || isCollectionLoopStatement(forStatement)\n               || isIndexedListLoopStatement(forStatement)){\n                registerStatementError(forStatement);\n            }\n        }","id":96305,"modified_method":"public void visitForStatement(@NotNull PsiForStatement forStatement){\n            super.visitForStatement(forStatement);\n            final PsiManager manager = forStatement.getManager();\n            final LanguageLevel languageLevel =\n                    manager.getEffectiveLanguageLevel();\n            if(languageLevel.equals(LanguageLevel.JDK_1_3) ||\n                    languageLevel.equals(LanguageLevel.JDK_1_4)){\n                return;\n            }\n            if(isArrayLoopStatement(forStatement)\n                    || isCollectionLoopStatement(forStatement)\n                    || isIndexedListLoopStatement(forStatement)){\n                registerStatementError(forStatement);\n            }\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitReferenceExpression(\n                @NotNull PsiReferenceExpression ref){\n            if(!indexVariableUsedOnlyAsIndex){\n                return;\n            }\n            super.visitReferenceExpression(ref);\n\n            final PsiElement element = ref.resolve();\n            if(!indexVariable.equals(element)){\n                return;\n            }\n            final PsiElement parent = ref.getParent();\n            if(!(parent instanceof PsiArrayAccessExpression)){\n                indexVariableUsedOnlyAsIndex = false;\n                return;\n            }\n            final PsiArrayAccessExpression arrayAccess =\n                    (PsiArrayAccessExpression) parent;\n            final PsiExpression arrayExpression =\n                    arrayAccess.getArrayExpression();\n            if(!arrayExpression.getText().equals(arrayName)){\n                indexVariableUsedOnlyAsIndex = false;\n                return;\n            }\n            final PsiElement arrayExpressionContext = arrayAccess.getParent();\n            if(arrayExpressionContext instanceof PsiAssignmentExpression){\n                final PsiAssignmentExpression assignment =\n                        (PsiAssignmentExpression) arrayExpressionContext;\n                final PsiExpression lhs = assignment.getLExpression();\n                if(lhs.equals(arrayAccess)){\n                    indexVariableUsedOnlyAsIndex = false;\n                }\n            }\n        }","id":96306,"modified_method":"public void visitReferenceExpression(\n                @NotNull PsiReferenceExpression reference){\n            if(!indexVariableUsedOnlyAsIndex){\n                return;\n            }\n            super.visitReferenceExpression(reference);\n\n            final PsiElement element = reference.resolve();\n            if(!indexVariable.equals(element)){\n                return;\n            }\n            final PsiElement parent = reference.getParent();\n            if(!(parent instanceof PsiArrayAccessExpression)){\n                indexVariableUsedOnlyAsIndex = false;\n                return;\n            }\n            final PsiArrayAccessExpression arrayAccess =\n                    (PsiArrayAccessExpression) parent;\n            final PsiExpression arrayExpression =\n                    arrayAccess.getArrayExpression();\n            final String text = arrayExpression.getText();\n            if(!text.equals(arrayName)){\n                indexVariableUsedOnlyAsIndex = false;\n                return;\n            }\n            final PsiElement arrayExpressionContext = arrayAccess.getParent();\n            if(arrayExpressionContext instanceof PsiAssignmentExpression){\n                final PsiAssignmentExpression assignment =\n                        (PsiAssignmentExpression) arrayExpressionContext;\n                final PsiExpression lhs = assignment.getLExpression();\n                if(lhs.equals(arrayAccess)){\n                    indexVariableUsedOnlyAsIndex = false;\n                }\n            }\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean isArrayLoopStatement(PsiForStatement forStatement){\n        final PsiStatement initialization = forStatement.getInitialization();\n        if(!(initialization instanceof PsiDeclarationStatement)){\n            return false;\n        }\n        final PsiDeclarationStatement declaration =\n                (PsiDeclarationStatement) initialization;\n        if(declaration.getDeclaredElements().length != 1){\n            return false;\n        }\n        final PsiLocalVariable indexVar =\n                (PsiLocalVariable) declaration.getDeclaredElements()[0];\n        final PsiExpression initialValue = indexVar.getInitializer();\n        if(initialValue == null){\n            return false;\n        }\n        final String initializerText = initialValue.getText();\n        if(!\"0\".equals(initializerText)){\n            return false;\n        }\n        final PsiExpression condition = forStatement.getCondition();\n        if(!isArrayLengthComparison(condition, indexVar)){\n            return false;\n        }\n        final PsiStatement update = forStatement.getUpdate();\n        if(!isIncrement(update, indexVar)){\n            return false;\n        }\n        final PsiReferenceExpression arrayReference =\n                getVariableReferenceFromCondition(condition);\n        final PsiStatement body = forStatement.getBody();\n        if(body == null){\n            return false;\n        }\n        final String arrayName = arrayReference.getText();\n        if(!indexVarOnlyUsedAsIndex(arrayName, indexVar, body)){\n            return false;\n        }\n        return !isVariableAssigned(arrayName, body);\n    }","id":96307,"modified_method":"static boolean isArrayLoopStatement(PsiForStatement forStatement){\n        final PsiStatement initialization = forStatement.getInitialization();\n        if(!(initialization instanceof PsiDeclarationStatement)){\n            return false;\n        }\n        final PsiDeclarationStatement declaration =\n                (PsiDeclarationStatement) initialization;\n        if(declaration.getDeclaredElements().length != 1){\n            return false;\n        }\n        final PsiLocalVariable indexVar =\n                (PsiLocalVariable) declaration.getDeclaredElements()[0];\n        final PsiExpression initialValue = indexVar.getInitializer();\n        if(initialValue == null){\n            return false;\n        }\n        final PsiManager manager = initialValue.getManager();\n        final PsiConstantEvaluationHelper constantEvaluationHelper =\n                manager.getConstantEvaluationHelper();\n        final Object constant =\n                constantEvaluationHelper.computeConstantExpression(initialValue);\n        if (!(constant instanceof Integer)) {\n            return false;\n        }\n        final Integer integer = (Integer)constant;\n        if (integer.intValue() != 0) {\n            return false;\n        }\n        final PsiExpression condition = forStatement.getCondition();\n        if(!isArrayLengthComparison(condition, indexVar)){\n            return false;\n        }\n        final PsiStatement update = forStatement.getUpdate();\n        if(!isIncrement(update, indexVar)){\n            return false;\n        }\n        final PsiReferenceExpression arrayReference =\n                getVariableReferenceFromCondition(condition);\n        if (arrayReference == null) {\n            return false;\n        }\n        final String arrayName = arrayReference.getText();\n        final PsiStatement body = forStatement.getBody();\n        if(!indexVarOnlyUsedAsIndex(arrayName, indexVar, body)){\n            return false;\n        }\n        return !isVariableAssigned(arrayName, body);\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean indexVarOnlyUsedAsIndex(String arrayName,\n                                                   PsiLocalVariable indexVar,\n                                                   PsiStatement body){\n        final IndexOnlyUsedAsIndexVisitor visitor =\n                new IndexOnlyUsedAsIndexVisitor(arrayName, indexVar);\n        body.accept(visitor);\n        return visitor.isIndexVariableUsedOnlyAsIndex();\n    }","id":96308,"modified_method":"private static boolean indexVarOnlyUsedAsIndex(\n            String arrayName, PsiLocalVariable indexVar, PsiStatement body){\n        if (body == null) {\n            return true;\n        }\n        final IndexOnlyUsedAsIndexVisitor visitor =\n                new IndexOnlyUsedAsIndexVisitor(arrayName, indexVar);\n        body.accept(visitor);\n        return visitor.isIndexVariableUsedOnlyAsIndex();\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void doFix(Project project, ProblemDescriptor descriptor)\n                throws IncorrectOperationException{\n\n            final PsiElement forElement = descriptor.getPsiElement();\n            if(!(forElement.getParent() instanceof PsiForStatement)){\n                return;\n            }\n            final PsiForStatement forStatement =\n                    (PsiForStatement) forElement.getParent();\n            final String newExpression;\n            if(isArrayLoopStatement(forStatement)){\n                newExpression = createArrayIterationText(forStatement, project);\n            } else if(isCollectionLoopStatement(forStatement)){\n                newExpression = createCollectionIterationText(forStatement,\n                                                              project);\n            } else if(isIndexedListLoopStatement(forStatement)){\n                newExpression = createListIterationText(forStatement, project);\n            } else{\n                return;\n            }\n            replaceStatementAndShortenClassNames(forStatement, newExpression);\n        }","id":96309,"modified_method":"public void doFix(Project project, ProblemDescriptor descriptor)\n                throws IncorrectOperationException{\n\n            final PsiElement forElement = descriptor.getPsiElement();\n            if(!(forElement.getParent() instanceof PsiForStatement)){\n                return;\n            }\n            final PsiForStatement forStatement =\n                    (PsiForStatement) forElement.getParent();\n            final String newExpression;\n            if(isArrayLoopStatement(forStatement)){\n                newExpression = createArrayIterationText(forStatement);\n            } else if(isCollectionLoopStatement(forStatement)){\n                newExpression = createCollectionIterationText(forStatement\n                );\n            } else if(isIndexedListLoopStatement(forStatement)){\n                newExpression = createListIterationText(forStatement);\n            } else{\n                return;\n            }\n            if (newExpression == null) {\n                return;\n            }\n            replaceStatementAndShortenClassNames(forStatement, newExpression);\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean isListMethodCall(final PsiExpression expression,\n                                            final String methodName){\n        final PsiExpression strippedExpression = ParenthesesUtils\n                .stripParentheses(expression);\n        if(!(strippedExpression instanceof PsiMethodCallExpression)){\n            return false;\n        }\n        final PsiMethodCallExpression reference = (PsiMethodCallExpression) strippedExpression;\n        PsiReferenceExpression methodExpression = reference\n                .getMethodExpression();\n        if(methodExpression == null){\n            return false;\n        }\n        if(!(methodExpression\n                .getQualifierExpression() instanceof PsiReferenceExpression)){\n            return false;\n        }\n        PsiElement resolved = methodExpression.resolve();\n        if(!(resolved instanceof PsiMethod)){\n            return false;\n        }\n        final PsiMethod method = (PsiMethod) resolved;\n        if(!methodName.equals(method.getName())){\n            return false;\n        }\n        PsiClass aClass = method.getContainingClass();\n        if(aClass == null){\n            return false;\n        }\n        Project project = expression.getProject();\n        PsiClass javaUtilList = PsiManager.getInstance(project)\n                .findClass(\"java.util.List\",\n                           GlobalSearchScope.allScope(project));\n        if(javaUtilList == null){\n            return false;\n        }\n        return InheritanceUtil.isInheritorOrSelf(aClass, javaUtilList, true);\n    }","id":96310,"modified_method":"private static boolean isListMethodCall(PsiExpression expression,\n                                            String methodName){\n        final PsiExpression strippedExpression = ParenthesesUtils\n                .stripParentheses(expression);\n        if(!(strippedExpression instanceof PsiMethodCallExpression)){\n            return false;\n        }\n        final PsiMethodCallExpression reference =\n                (PsiMethodCallExpression) strippedExpression;\n        final PsiReferenceExpression methodExpression =\n                reference.getMethodExpression();\n        if(!(methodExpression\n                .getQualifierExpression() instanceof PsiReferenceExpression)){\n            return false;\n        }\n        final PsiElement resolved = methodExpression.resolve();\n        if(!(resolved instanceof PsiMethod)){\n            return false;\n        }\n        final PsiMethod method = (PsiMethod) resolved;\n        if(!methodName.equals(method.getName())){\n            return false;\n        }\n        final PsiClass aClass = method.getContainingClass();\n        if(aClass == null){\n            return false;\n        }\n        final Project project = expression.getProject();\n        final PsiManager manager = PsiManager.getInstance(project);\n        final PsiClass javaUtilList = manager.findClass(\"java.util.List\",\n                GlobalSearchScope.allScope(project));\n        if(javaUtilList == null){\n            return false;\n        }\n        return InheritanceUtil.isInheritorOrSelf(aClass, javaUtilList, true);\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean indexVarOnlyUsedAsListIndex(PsiVariable collection,\n                                                       PsiLocalVariable indexVar,\n                                                       PsiStatement body){\n        final VariableOnlyUsedAsListIndexVisitor visitor =\n                new VariableOnlyUsedAsListIndexVisitor(collection, indexVar);\n        body.accept(visitor);\n        return visitor.isIndexVariableUsedOnlyAsIndex();\n    }","id":96311,"modified_method":"private static boolean indexVarOnlyUsedAsListIndex(\n            PsiVariable collection, PsiLocalVariable indexVar,\n            PsiStatement body){\n        if (body == null) {\n            return true;\n        }\n        final VariableOnlyUsedAsListIndexVisitor visitor =\n                new VariableOnlyUsedAsListIndexVisitor(collection, indexVar);\n        body.accept(visitor);\n        return visitor.isIndexVariableUsedOnlyAsIndex();\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean isListGetLookup(PsiElement element,\n                                               String indexName,\n                                               String arrayName){\n            ForCanBeForeachFix.indexName = indexName;\n            if(!(element instanceof PsiExpression && expressionIsListGetLookup(\n                    (PsiExpression) element))){\n                return false;\n            }\n\n            final PsiExpression expression = (PsiExpression) element;\n            PsiMethodCallExpression methodCallExpression =\n                    (PsiMethodCallExpression) ParenthesesUtils.stripParentheses(expression);\n            if(!arrayName\n                    .equals(methodCallExpression.getMethodExpression()\n                            .getQualifierExpression().getText())){\n                return false;\n            }\n            final PsiExpressionList argumentList = methodCallExpression\n                    .getArgumentList();\n            if(argumentList == null){\n                return false;\n            }\n            PsiExpression[] expressions = argumentList.getExpressions();\n            if(expressions.length != 1){\n                return false;\n            }\n            return indexName.equals(expressions[0].getText());\n        }","id":96312,"modified_method":"private static boolean isListGetLookup(PsiElement element,\n                                               String indexName,\n                                               String arrayName){\n            if(!(element instanceof PsiExpression &&\n                    expressionIsListGetLookup((PsiExpression)element))){\n                return false;\n            }\n\n            final PsiExpression expression = (PsiExpression) element;\n            final PsiMethodCallExpression methodCallExpression =\n                    (PsiMethodCallExpression)\n                            ParenthesesUtils.stripParentheses(expression);\n            if (methodCallExpression == null) {\n                return false;\n            }\n            final PsiReferenceExpression methodExpression =\n                    methodCallExpression.getMethodExpression();\n            final PsiExpression qualifierExpression =\n                    methodExpression.getQualifierExpression();\n            if (qualifierExpression == null) {\n                return false;\n            }\n            final String text = qualifierExpression.getText();\n            if(!arrayName.equals(text)) {\n                return false;\n            }\n            final PsiExpressionList argumentList =\n                    methodCallExpression.getArgumentList();\n            final PsiExpression[] expressions = argumentList.getExpressions();\n            if(expressions.length != 1){\n                return false;\n            }\n            return indexName.equals(expressions[0].getText());\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void replaceIteratorNext(PsiElement element,\n                                         String contentVariableName,\n                                         String iteratorName,\n                                         PsiElement childToSkip,\n                                         StringBuffer out,\n                                         String contentType){\n\n            if(isIteratorNext(element, iteratorName, contentType)){\n                out.append(contentVariableName);\n            } else{\n                final PsiElement[] children = element.getChildren();\n                if(children.length == 0){\n                    out.append(element.getText());\n                } else{\n                    boolean skippingWhiteSpace = false;\n                    for(final PsiElement child : children){\n                        if(child.equals(childToSkip)){\n                            skippingWhiteSpace = true;\n                        } else if(child instanceof PsiWhiteSpace &&\n                                  skippingWhiteSpace){\n                            //don't do anything\n                        } else{\n                            skippingWhiteSpace = false;\n                            replaceIteratorNext(child, contentVariableName,\n                                                iteratorName,\n                                                childToSkip, out, contentType);\n                        }\n                    }\n                }\n            }\n        }","id":96313,"modified_method":"private static void replaceIteratorNext(\n                PsiElement element, String contentVariableName,\n                String iteratorName, PsiElement childToSkip,\n                StringBuffer out, String contentType) {\n            if (isIteratorNext(element, iteratorName, contentType)){\n                out.append(contentVariableName);\n            } else{\n                final PsiElement[] children = element.getChildren();\n                if(children.length == 0){\n                    final String text = element.getText();\n                    if (PsiKeyword.INSTANCEOF.equals(text) &&\n                        out.charAt(out.length() - 1) != ' ') {\n                        out.append(' ');\n                    }\n                    out.append(text);\n                } else{\n                    boolean skippingWhiteSpace = false;\n                    for(final PsiElement child : children){\n                        if(child.equals(childToSkip)){\n                            skippingWhiteSpace = true;\n                        } else if(child instanceof PsiWhiteSpace &&\n                                skippingWhiteSpace){\n                            //don't do anything\n                        } else{\n                            skippingWhiteSpace = false;\n                            replaceIteratorNext(child, contentVariableName,\n                                    iteratorName, childToSkip, out, contentType);\n                        }\n                    }\n                }\n            }\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private String createListIterationText(\n                final PsiForStatement forStatement, final Project project){\n            final int length = forStatement.getText().length();\n            @NonNls final StringBuffer out = new StringBuffer(length);\n            final PsiBinaryExpression condition =\n                    (PsiBinaryExpression) forStatement.getCondition();\n            final PsiExpression lhs = condition.getLOperand();\n            final String indexName = lhs.getText();\n            PsiExpression rOperand = condition.getROperand();\n            assert rOperand != null;\n            final PsiReferenceExpression listLengthExpression =\n                    ((PsiMethodCallExpression) rOperand).getMethodExpression();\n            assert listLengthExpression != null;\n            final PsiReferenceExpression listReference =\n                    (PsiReferenceExpression) listLengthExpression\n                            .getQualifierExpression();\n            final PsiClassType listType = (PsiClassType) listReference .getType();\n            PsiClassType.ClassResolveResult resolveResult = listType.resolveGenerics();\n            PsiClass listClass = resolveResult.getElement();\n            PsiType componentType = null;\n            if (listClass != null) {\n                PsiManager manager = forStatement.getManager();\n                PsiClass iterableClass = manager.findClass(\"java.lang.Iterable\", GlobalSearchScope.allScope(project));\n                if (iterableClass != null && iterableClass.getTypeParameters().length == 1) {\n                    PsiSubstitutor substitutor = TypeConversionUtil.getClassSubstitutor(iterableClass, listClass, resolveResult.getSubstitutor());\n                    if (substitutor != null) {\n                        componentType = substitutor.substitute(iterableClass.getTypeParameters()[0]);\n                    }\n                }\n            }\n\n            final String type = componentType == null?\"java.lang.Object\":\n                                componentType.getPresentableText();\n            final String listName = listReference.getText();\n            final PsiStatement body = forStatement.getBody();\n            final PsiStatement firstStatement = getFirstStatement(body);\n            final boolean isDeclaration = isListElementDeclaration(\n                    firstStatement, listName, indexName, componentType);\n            final String contentVariableName;\n            @NonNls final String finalString;\n            final PsiStatement statementToSkip;\n            if(isDeclaration){\n                final PsiDeclarationStatement decl = (PsiDeclarationStatement) firstStatement;\n                assert decl != null;\n                final PsiElement[] declaredElements = decl\n                        .getDeclaredElements();\n                final PsiLocalVariable localVar =\n                        (PsiLocalVariable) declaredElements[0];\n                contentVariableName = localVar.getName();\n                statementToSkip = decl;\n                if(localVar.hasModifierProperty(PsiModifier.FINAL)){\n                    finalString = \"final \";\n                } else{\n                    finalString = \"\";\n                }\n            } else{\n                final String collectionName =\n                        listReference.getReferenceName();\n                contentVariableName = createNewVarName(project,\n                                                       forStatement,\n                                                       componentType,\n                                                       collectionName);\n                finalString = \"\";\n                statementToSkip = null;\n            }\n            out.append(\"for(\" + finalString + type + ' ' + contentVariableName +\n                       \": \" + listName + ')');\n            replaceCollectionGetAccess(body, contentVariableName, listName,\n                                       indexName,\n                                       statementToSkip, out);\n            return out.toString();\n        }","id":96314,"modified_method":"@Nullable\n        private static String createListIterationText(\n                @NotNull PsiForStatement forStatement) {\n            final String text = forStatement.getText();\n            final int length = text.length();\n            @NonNls final StringBuffer out = new StringBuffer(length);\n            final PsiBinaryExpression condition =\n                    (PsiBinaryExpression)forStatement.getCondition();\n            if (condition == null) {\n                return null;\n            }\n            final PsiExpression lhs = condition.getLOperand();\n            final String indexName = lhs.getText();\n            final PsiExpression rOperand = condition.getROperand();\n            if (rOperand == null) {\n                return null;\n            }\n            final PsiReferenceExpression listLengthExpression =\n                    ((PsiMethodCallExpression)rOperand).getMethodExpression();\n            final PsiReferenceExpression listReference =\n                    (PsiReferenceExpression)\n                            listLengthExpression.getQualifierExpression();\n            if (listReference == null) {\n                return null;\n            }\n            final PsiClassType listType = (PsiClassType)listReference.getType();\n            if (listType == null) {\n                return null;\n            }\n            final PsiClassType.ClassResolveResult resolveResult =\n                    listType.resolveGenerics();\n            final PsiClass listClass = resolveResult.getElement();\n            PsiType componentType = null;\n            if (listClass != null) {\n                final Project project = forStatement.getProject();\n                final PsiManager manager = forStatement.getManager();\n                final PsiClass iterableClass =\n                        manager.findClass(\"java.lang.Iterable\",\n                                GlobalSearchScope.allScope(project));\n                if (iterableClass != null &&\n                        iterableClass.getTypeParameters().length == 1) {\n                    final PsiSubstitutor substitutor =\n                            TypeConversionUtil.getClassSubstitutor(\n                                    iterableClass, listClass,\n                                    resolveResult.getSubstitutor());\n                    if (substitutor != null) {\n                        componentType =\n                                substitutor.substitute(\n                                        iterableClass.getTypeParameters()[0]);\n                    }\n                }\n            }\n\n            final String type;\n            if (componentType == null) {\n                type = \"java.lang.Object\";\n            } else {\n                type = componentType.getPresentableText();\n            }\n            final String listName = listReference.getText();\n            final PsiStatement body = forStatement.getBody();\n            final PsiStatement firstStatement = getFirstStatement(body);\n            final boolean isDeclaration = isListElementDeclaration(\n                    firstStatement, listName, indexName, componentType);\n            final String contentVariableName;\n            @NonNls final String finalString;\n            final PsiStatement statementToSkip;\n            if (isDeclaration) {\n                final PsiDeclarationStatement decl =\n                        (PsiDeclarationStatement)firstStatement;\n                assert decl != null;\n                final PsiElement[] declaredElements = decl\n                        .getDeclaredElements();\n                final PsiLocalVariable localVar =\n                        (PsiLocalVariable)declaredElements[0];\n                contentVariableName = localVar.getName();\n                statementToSkip = decl;\n                if (localVar.hasModifierProperty(PsiModifier.FINAL)) {\n                    finalString = \"final \";\n                } else {\n                    finalString = \"\";\n                }\n            } else {\n                final String collectionName =\n                        listReference.getReferenceName();\n                contentVariableName = createNewVarName(forStatement,\n                        componentType, collectionName);\n                finalString = \"\";\n                statementToSkip = null;\n            }\n            out.append(\"for(\");\n            out.append(finalString);\n            out.append(type);\n            out.append(' ');\n            out.append(contentVariableName);\n            out.append(\": \");\n            out.append(listName);\n            out.append(')');\n            if (body != null) {\n                replaceCollectionGetAccess(body, contentVariableName, listName,\n                    indexName, statementToSkip, out);\n            }\n            return out.toString();\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static String createNewVarName(Project project,\n                                               PsiForStatement scope,\n                                               PsiType type,\n                                               String containerName){\n            final CodeStyleManager codeStyleManager =\n                    CodeStyleManager.getInstance(project);\n            @NonNls String baseName;\n            if(containerName != null){\n                baseName = StringUtils.createSingularFromName(containerName);\n            } else{\n\n                final SuggestedNameInfo suggestions =\n                        codeStyleManager\n                                .suggestVariableName(\n                                        VariableKind.LOCAL_VARIABLE,\n                                        null, null, type);\n                final String[] names = suggestions.names;\n                if(names != null && names.length > 0){\n                    baseName = names[0];\n                } else{\n                    baseName = \"value\";\n                }\n            }\n\n            if(baseName == null || baseName.length() == 0){\n                baseName = \"value\";\n            }\n            return codeStyleManager.suggestUniqueVariableName(baseName, scope,\n                                                              true);\n        }","id":96315,"modified_method":"private static String createNewVarName(\n                @NotNull PsiForStatement scope, PsiType type,\n                String containerName) {\n            final Project project = scope.getProject();\n            final CodeStyleManager codeStyleManager =\n                    CodeStyleManager.getInstance(project);\n            @NonNls String baseName;\n            if(containerName != null){\n                baseName = StringUtils.createSingularFromName(containerName);\n            } else{\n                final SuggestedNameInfo suggestions =\n                        codeStyleManager.suggestVariableName(\n                                VariableKind.LOCAL_VARIABLE, null, null, type);\n                final String[] names = suggestions.names;\n                if(names != null && names.length > 0){\n                    baseName = names[0];\n                } else{\n                    baseName = \"value\";\n                }\n            }\n            if(baseName == null || baseName.length() == 0){\n                baseName = \"value\";\n            }\n            return codeStyleManager.suggestUniqueVariableName(baseName, scope,\n                    true);\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean isArrayLengthComparison(PsiExpression condition,\n                                                   PsiLocalVariable var){\n        final PsiExpression strippedCondition =\n                ParenthesesUtils.stripParentheses(condition);\n\n        if(!(strippedCondition instanceof PsiBinaryExpression)){\n            return false;\n        }\n        final PsiBinaryExpression binaryExp =\n                (PsiBinaryExpression) strippedCondition;\n        final PsiJavaToken sign = binaryExp.getOperationSign();\n        if(!sign.getTokenType().equals(JavaTokenType.LT)){\n            return false;\n        }\n        final PsiExpression lhs = binaryExp.getLOperand();\n        if(!expressionIsVariableLookup(lhs, var)){\n            return false;\n        }\n        final PsiExpression rhs = binaryExp.getROperand();\n        return expressionIsArrayLengthLookup(rhs);\n    }","id":96316,"modified_method":"private static boolean isArrayLengthComparison(PsiExpression condition,\n                                                   PsiLocalVariable var){\n        final PsiExpression strippedCondition =\n                ParenthesesUtils.stripParentheses(condition);\n        if(!(strippedCondition instanceof PsiBinaryExpression)){\n            return false;\n        }\n        final PsiBinaryExpression binaryExp =\n                (PsiBinaryExpression) strippedCondition;\n        final PsiJavaToken sign = binaryExp.getOperationSign();\n        final IElementType tokenType = sign.getTokenType();\n        if(!tokenType.equals(JavaTokenType.LT)){\n            return false;\n        }\n        final PsiExpression lhs = binaryExp.getLOperand();\n        if(!expressionIsVariableLookup(lhs, var)){\n            return false;\n        }\n        final PsiExpression rhs = binaryExp.getROperand();\n        return expressionIsArrayLengthLookup(rhs);\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean expressionIsListGetLookup(PsiExpression expression){\n        return isListMethodCall(expression, GET_METHOD);\n    }","id":96317,"modified_method":"static boolean expressionIsListGetLookup(PsiExpression expression){\n        return isListMethodCall(expression, HardcodedMethodConstants.GET);\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean isIteratorNext(PsiElement element,\n                                              String iteratorName,\n                                              String contentType){\n            if(element == null){\n                return false;\n            }\n            if(element instanceof PsiTypeCastExpression){\n\n                final PsiTypeCastExpression castExpression = (PsiTypeCastExpression) element;\n                final PsiType type = castExpression.getType();\n                if(type == null){\n                    return false;\n                }\n                if(!type.getPresentableText().equals(contentType)){\n                    return false;\n                }\n                final PsiExpression operand =\n                        castExpression.getOperand();\n                return isIteratorNext(operand, iteratorName, contentType);\n            }\n            if(!(element instanceof PsiMethodCallExpression)){\n                return false;\n            }\n            final PsiMethodCallExpression callExpression =\n                    (PsiMethodCallExpression) element;\n            final PsiExpressionList argumentList =\n                    callExpression.getArgumentList();\n            if(argumentList == null){\n                return false;\n            }\n            final PsiExpression[] args = argumentList.getExpressions();\n            if(args == null || args.length != 0){\n                return false;\n            }\n            final PsiReferenceExpression reference =\n                    callExpression.getMethodExpression();\n            if(reference == null){\n                return false;\n            }\n            final PsiExpression qualifier = reference.getQualifierExpression();\n            if(qualifier == null){\n                return false;\n            }\n            if(!iteratorName.equals(qualifier.getText())){\n                return false;\n            }\n            final String referenceName = reference.getReferenceName();\n            return NEXT_METHOD.equals(referenceName);\n        }","id":96318,"modified_method":"private static boolean isIteratorNext(\n                PsiElement element, String iteratorName, String contentType){\n            if(element == null){\n                return false;\n            }\n            if(element instanceof PsiTypeCastExpression){\n\n                final PsiTypeCastExpression castExpression =\n                        (PsiTypeCastExpression) element;\n                final PsiType type = castExpression.getType();\n                if(type == null){\n                    return false;\n                }\n                final String presentableText = type.getPresentableText();\n                if(!presentableText.equals(contentType)){\n                    return false;\n                }\n                final PsiExpression operand =\n                        castExpression.getOperand();\n                return isIteratorNext(operand, iteratorName, contentType);\n            }\n            if(!(element instanceof PsiMethodCallExpression)){\n                return false;\n            }\n            final PsiMethodCallExpression callExpression =\n                    (PsiMethodCallExpression) element;\n            final PsiExpressionList argumentList =\n                    callExpression.getArgumentList();\n            final PsiExpression[] args = argumentList.getExpressions();\n            if(args.length != 0){\n                return false;\n            }\n            final PsiReferenceExpression reference =\n                    callExpression.getMethodExpression();\n            final PsiExpression qualifier = reference.getQualifierExpression();\n            if(qualifier == null){\n                return false;\n            }\n            if(!iteratorName.equals(qualifier.getText())){\n                return false;\n            }\n            final String referenceName = reference.getReferenceName();\n            return HardcodedMethodConstants.NEXT.equals(referenceName);\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n        private static PsiStatement getFirstStatement(PsiStatement body){\n            if(body instanceof PsiBlockStatement){\n                final PsiBlockStatement block = (PsiBlockStatement) body;\n                final PsiCodeBlock codeBlock = block.getCodeBlock();\n                final PsiStatement[] statements = codeBlock.getStatements();\n                if(statements.length > 0){\n                    return statements[0];\n                } else{\n                    return null;\n                }\n            } else{\n                return body;\n            }\n        }","id":96319,"modified_method":"@Nullable\n        private static PsiStatement getFirstStatement(PsiStatement body){\n            if (!(body instanceof PsiBlockStatement)) {\n                return body;\n            }\n            final PsiBlockStatement block = (PsiBlockStatement) body;\n            final PsiCodeBlock codeBlock = block.getCodeBlock();\n            final PsiStatement[] statements = codeBlock.getStatements();\n            if(statements.length <= 0){\n                return null;\n            }\n            return statements[0];\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean isIndexedListLoopStatement(\n            final PsiForStatement forStatement){\n        final PsiStatement initialization = forStatement.getInitialization();\n        if(!(initialization instanceof PsiDeclarationStatement)){\n            return false;\n        }\n        final PsiDeclarationStatement declaration = (PsiDeclarationStatement) initialization;\n        if(declaration.getDeclaredElements().length != 1){\n            return false;\n        }\n        final PsiLocalVariable indexVar = (PsiLocalVariable) declaration\n                .getDeclaredElements()[0];\n        final PsiExpression initialValue = indexVar.getInitializer();\n        if(initialValue == null){\n            return false;\n        }\n        final String initializerText = initialValue.getText();\n        if(!\"0\".equals(initializerText)){\n            return false;\n        }\n        final PsiExpression condition = forStatement.getCondition();\n        if(!isListSizeComparison(condition, indexVar)){\n            return false;\n        }\n        final PsiStatement update = forStatement.getUpdate();\n        if(!isIncrement(update, indexVar)){\n            return false;\n        }\n        final PsiReferenceExpression collectionReference = getVariableReferenceFromCondition(\n                condition);\n        final PsiStatement body = forStatement.getBody();\n        if(body == null){\n            return false;\n        }\n        PsiElement resolved = collectionReference.resolve();\n        if(!(resolved instanceof PsiVariable)){\n            return false;\n        }\n        if(!indexVarOnlyUsedAsListIndex((PsiVariable) resolved, indexVar,\n                                        body)){\n            return false;\n        }\n\n        final String collectionName = collectionReference.getText();\n        return !isVariableAssigned(collectionName, body);\n    }","id":96320,"modified_method":"static boolean isIndexedListLoopStatement(\n            PsiForStatement forStatement){\n        final PsiStatement initialization = forStatement.getInitialization();\n        if(!(initialization instanceof PsiDeclarationStatement)){\n            return false;\n        }\n        final PsiDeclarationStatement declaration =\n                (PsiDeclarationStatement) initialization;\n        if(declaration.getDeclaredElements().length != 1){\n            return false;\n        }\n        final PsiLocalVariable indexVar = (PsiLocalVariable) declaration\n                .getDeclaredElements()[0];\n        final PsiExpression initialValue = indexVar.getInitializer();\n        if(initialValue == null){\n            return false;\n        }\n        final String initializerText = initialValue.getText();\n        if(!\"0\".equals(initializerText)){\n            return false;\n        }\n        final PsiExpression condition = forStatement.getCondition();\n        if(!isListSizeComparison(condition, indexVar)){\n            return false;\n        }\n        final PsiStatement update = forStatement.getUpdate();\n        if(!isIncrement(update, indexVar)){\n            return false;\n        }\n        final PsiReferenceExpression collectionReference =\n                getVariableReferenceFromCondition(condition);\n        if (collectionReference == null) {\n            return false;\n        }\n        final PsiElement resolved = collectionReference.resolve();\n        if(!(resolved instanceof PsiVariable)){\n            return false;\n        }\n        final PsiVariable variable = (PsiVariable)resolved;\n        final PsiStatement body = forStatement.getBody();\n        if(!indexVarOnlyUsedAsListIndex(variable, indexVar, body)) {\n            return false;\n        }\n        final String collectionName = collectionReference.getText();\n        return !isVariableAssigned(collectionName, body);\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean isCollectionLoopStatement(\n            PsiForStatement forStatement){\n        final PsiStatement initialization = forStatement.getInitialization();\n        if(!(initialization instanceof PsiDeclarationStatement)){\n            return false;\n        }\n        final PsiDeclarationStatement declaration =\n                (PsiDeclarationStatement) initialization;\n        if(declaration.getDeclaredElements().length != 1){\n            return false;\n        }\n        final PsiLocalVariable declaredVar =\n                (PsiLocalVariable) declaration.getDeclaredElements()[0];\n        if(declaredVar == null){\n            return false;\n        }\n        final PsiType declaredVarType = declaredVar.getType();\n        if(!(declaredVarType instanceof PsiClassType)){\n            return false;\n        }\n        final PsiClassType classType = (PsiClassType) declaredVarType;\n        final PsiClass declaredClass = classType.resolve();\n        if(declaredClass == null){\n            return false;\n        }\n        if(!ClassUtils.isSubclass(declaredClass, \"java.util.Iterator\")){\n            return false;\n        }\n        final PsiExpression initialValue = declaredVar.getInitializer();\n        if(initialValue == null){\n            return false;\n        }\n        if(!(initialValue instanceof PsiMethodCallExpression)){\n            return false;\n        }\n        final PsiMethodCallExpression initialCall =\n                (PsiMethodCallExpression) initialValue;\n        final PsiReferenceExpression initialMethodExpression =\n                initialCall.getMethodExpression();\n        if(initialMethodExpression == null){\n            return false;\n        }\n        final String initialCallName =\n                initialMethodExpression.getReferenceName();\n        if(!ITERATOR_METHOD.equals(initialCallName)){\n            return false;\n        }\n        final PsiExpression qualifier = initialMethodExpression\n                .getQualifierExpression();\n        if(qualifier == null){\n            return false;\n        }\n        final PsiType qualifierType = qualifier.getType();\n        if(!(qualifierType instanceof PsiClassType)){\n            return false;\n        }\n\n        final PsiClass qualifierClass =\n                ((PsiClassType) qualifierType).resolve();\n        if(qualifierClass == null){\n            return false;\n        }\n        if(!ClassUtils.isSubclass(qualifierClass, \"java.lang.Iterable\") &&\n           !ClassUtils.isSubclass(qualifierClass,\n                                  \"java.util.Collection\")){\n\n            return false;\n        }\n        final String iteratorName = declaredVar.getName();\n        final PsiExpression condition = forStatement.getCondition();\n        if(!isHasNext(condition, iteratorName)){\n            return false;\n        }\n        final PsiStatement update = forStatement.getUpdate();\n        if(update != null && !(update instanceof PsiEmptyStatement)){\n            return false;\n        }\n        final PsiStatement body = forStatement.getBody();\n        if(body == null){\n            return false;\n        }\n        if(calculateCallsToIteratorNext(iteratorName, body) != 1){\n            return false;\n        }\n        if(isIteratorRemoveCalled(iteratorName, body)){\n            return false;\n        }\n        if(isIteratorHasNextCalled(iteratorName, body)){\n            return false;\n        }\n        return !isIteratorAssigned(iteratorName, body);\n    }","id":96321,"modified_method":"static boolean isCollectionLoopStatement(\n            PsiForStatement forStatement){\n        final PsiStatement initialization = forStatement.getInitialization();\n        if(!(initialization instanceof PsiDeclarationStatement)){\n            return false;\n        }\n        final PsiDeclarationStatement declaration =\n                (PsiDeclarationStatement) initialization;\n        if(declaration.getDeclaredElements().length != 1){\n            return false;\n        }\n        final PsiLocalVariable declaredVar =\n                (PsiLocalVariable) declaration.getDeclaredElements()[0];\n        if(declaredVar == null){\n            return false;\n        }\n        final PsiType declaredVarType = declaredVar.getType();\n        if(!(declaredVarType instanceof PsiClassType)){\n            return false;\n        }\n        final PsiClassType classType = (PsiClassType) declaredVarType;\n        final PsiClass declaredClass = classType.resolve();\n        if(declaredClass == null){\n            return false;\n        }\n        if(!ClassUtils.isSubclass(declaredClass, \"java.util.Iterator\")){\n            return false;\n        }\n        final PsiExpression initialValue = declaredVar.getInitializer();\n        if(initialValue == null){\n            return false;\n        }\n        if(!(initialValue instanceof PsiMethodCallExpression)){\n            return false;\n        }\n        final PsiMethodCallExpression initialCall =\n                (PsiMethodCallExpression) initialValue;\n        final PsiReferenceExpression initialMethodExpression =\n                initialCall.getMethodExpression();\n        final String initialCallName =\n                initialMethodExpression.getReferenceName();\n        if(!HardcodedMethodConstants.ITERATOR.equals(initialCallName)){\n            return false;\n        }\n        final PsiExpression qualifier = initialMethodExpression\n                .getQualifierExpression();\n        if(qualifier == null){\n            return false;\n        }\n        final PsiType qualifierType = qualifier.getType();\n        if(!(qualifierType instanceof PsiClassType)){\n            return false;\n        }\n        final PsiClass qualifierClass =\n                ((PsiClassType) qualifierType).resolve();\n        if(qualifierClass == null){\n            return false;\n        }\n        if(!ClassUtils.isSubclass(qualifierClass, \"java.lang.Iterable\") &&\n                !ClassUtils.isSubclass(qualifierClass, \"java.util.Collection\")){\n            return false;\n        }\n        final String iteratorName = declaredVar.getName();\n        final PsiExpression condition = forStatement.getCondition();\n        if(!isHasNext(condition, iteratorName)){\n            return false;\n        }\n        final PsiStatement update = forStatement.getUpdate();\n        if(update != null && !(update instanceof PsiEmptyStatement)){\n            return false;\n        }\n        final PsiStatement body = forStatement.getBody();\n        if(calculateCallsToIteratorNext(iteratorName, body) != 1){\n            return false;\n        }\n        if(isIteratorRemoveCalled(iteratorName, body)){\n            return false;\n        }\n        if(isIteratorHasNextCalled(iteratorName, body)){\n            return false;\n        }\n        return !isIteratorAssigned(iteratorName, body);\n    }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitMethodCallExpression(\n                @NotNull PsiMethodCallExpression callExpression){\n            super.visitMethodCallExpression(callExpression);\n            final PsiReferenceExpression methodExpression =\n                    callExpression.getMethodExpression();\n            if(methodExpression == null){\n                return;\n            }\n            final String methodName = methodExpression.getReferenceName();\n            if(!NEXT_METHOD.equals(methodName)){\n                return;\n            }\n\n            final PsiExpression qualifier =\n                    methodExpression.getQualifierExpression();\n            if(qualifier == null){\n                return;\n            }\n            final String qualifierText = qualifier.getText();\n            if(!iteratorName.equals(qualifierText)){\n                return;\n            }\n            numCallsToIteratorNext++;\n        }","id":96322,"modified_method":"public void visitMethodCallExpression(\n                @NotNull PsiMethodCallExpression callExpression){\n            super.visitMethodCallExpression(callExpression);\n            final PsiReferenceExpression methodExpression =\n                    callExpression.getMethodExpression();\n            final String methodName = methodExpression.getReferenceName();\n            if(!HardcodedMethodConstants.NEXT.equals(methodName)){\n                return;\n            }\n\n            final PsiExpression qualifier =\n                    methodExpression.getQualifierExpression();\n            if(qualifier == null){\n                return;\n            }\n            final String qualifierText = qualifier.getText();\n            if(!iteratorName.equals(qualifierText)){\n                return;\n            }\n            numCallsToIteratorNext++;\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void visitReferenceExpression(\n                @NotNull PsiReferenceExpression expression){\n            super.visitReferenceExpression(expression);\n            final PsiElement element = expression.resolve();\n            if(!(element instanceof PsiMethod || element instanceof PsiField)){\n                return;\n            }\n            final PsiMember member = (PsiMember) element;\n            if(!member.hasModifierProperty(PsiModifier.PRIVATE)){\n                return;\n            }\n            final PsiElement containingClass =\n                    getContainingContextClass(expression);\n            if(containingClass == null){\n                return;\n            }\n            final PsiClass memberClass =\n                    ClassUtils.getContainingClass(member);\n            if(memberClass == null){\n                return;\n            }\n            if(memberClass.equals(containingClass)){\n                return;\n            }\n            final String memberClassName = memberClass.getName();\n            registerError(expression, memberClassName);\n        }","id":96323,"modified_method":"public void visitReferenceExpression(\n                @NotNull PsiReferenceExpression expression){\n            super.visitReferenceExpression(expression);\n            final PsiElement containingClass =\n                    getContainingContextClass(expression);\n            if(containingClass == null){\n                return;\n            }\n            final PsiElement element = expression.resolve();\n            if(!(element instanceof PsiMethod || element instanceof PsiField)){\n                return;\n            }\n            final PsiMember member = (PsiMember) element;\n            if(!member.hasModifierProperty(PsiModifier.PRIVATE)){\n                return;\n            }\n            final PsiClass memberClass =\n                    ClassUtils.getContainingClass(member);\n            if(memberClass == null){\n                return;\n            }\n            if(memberClass.equals(containingClass)){\n                return;\n            }\n            final String memberClassName = memberClass.getName();\n            registerError(expression, memberClassName);\n        }","commit_id":"8629082a2f885120180c8da4e7204776468af6a2","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean hasUnnecessarySuperQualifier(PsiMethodCallExpression methodCallExpression) {\n            final PsiMethod superMethod =\n                    methodCallExpression.resolveMethod();\n            if (superMethod == null) {\n                return false;\n            }\n          // check that super.m() and m() resolve to the same method\n          PsiMethodCallExpression copy = (PsiMethodCallExpression)methodCallExpression.copy();\n          copy.getMethodExpression().getQualifier().delete(); //remove super\n          PsiExpression expression = JavaPsiFacade.getInstance(methodCallExpression.getProject()).getElementFactory()\n            .createExpressionFromText(copy.getText(), methodCallExpression);\n          PsiMethod noSuper = ((PsiMethodCallExpression)expression).resolveMethod();\n            return superMethod == noSuper;\n        }","id":96324,"modified_method":"private static boolean hasUnnecessarySuperQualifier(\n                PsiMethodCallExpression methodCallExpression) {\n            final PsiMethod superMethod =\n                    methodCallExpression.resolveMethod();\n            if (superMethod == null) {\n                return false;\n            }\n            // check that super.m() and m() resolve to the same method\n            final PsiMethodCallExpression copy =\n                    (PsiMethodCallExpression)methodCallExpression.copy();\n            final PsiReferenceExpression methodExpression =\n                    copy.getMethodExpression();\n            final PsiElement qualifier = methodExpression.getQualifier();\n            if (qualifier == null) {\n                return false;\n            }\n            qualifier.delete(); //remove super\n            return superMethod == copy.resolveMethod();\n        }","commit_id":"ff51897d1854b4c2eba27f00aed8c29341adc4b5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean hasUnnecessarySuperQualifier(\n                PsiReferenceExpression referenceExpression) {\n            final PsiClass parentClass =\n                    PsiTreeUtil.getParentOfType(referenceExpression,\n                            PsiClass.class);\n            if (parentClass == null) {\n                return false;\n            }\n            final PsiElement target = referenceExpression.resolve();\n            if (target == null) {\n                return false;\n            }\n            if (!(target instanceof PsiField)) {\n                return false;\n            }\n            final PsiField superField = (PsiField)target;\n            final String name = superField.getName();\n            final PsiField field = parentClass.findFieldByName(name, false);\n            return field == null;\n        }","id":96325,"modified_method":"private static boolean hasUnnecessarySuperQualifier(\n                PsiReferenceExpression referenceExpression) {\n            final PsiClass parentClass =\n                    PsiTreeUtil.getParentOfType(referenceExpression,\n                            PsiClass.class);\n            if (parentClass == null) {\n                return false;\n            }\n            final PsiElement target = referenceExpression.resolve();\n            if (target == null || !(target instanceof PsiField)) {\n                return false;\n            }\n            final PsiField superField = (PsiField)target;\n            final PsiReferenceExpression copy = (PsiReferenceExpression)\n                    referenceExpression.copy();\n            final PsiElement qualifier = copy.getQualifier();\n            if (qualifier ==  null) {\n                return false;\n            }\n            qualifier.delete(); // remove super\n            return superField == copy.resolve();\n        }","commit_id":"ff51897d1854b4c2eba27f00aed8c29341adc4b5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void chooseTargetClass(PsiClass[] classes, final Editor editor, final PsiFile file) {\n    final Project project = classes[0].getProject();\n\n    final JList list = new JList(classes);\n    PsiElementListCellRenderer renderer = new PsiClassListCellRenderer();\n    list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n    list.setCellRenderer(renderer);\n    renderer.installSpeedSearch(list);\n\n    Runnable runnable = new Runnable() {\n      public void run() {\n        int index = list.getSelectedIndex();\n        if (index < 0) return;\n        final PsiClass aClass = (PsiClass) list.getSelectedValue();\n        ApplicationManager.getApplication().runWriteAction(new Runnable() {\n          public void run() {\n            doInvoke(project, aClass);\n          }\n        });\n      }\n    };\n\n    new PopupChooserBuilder(list).\n      setTitle(QuickFixBundle.message(\"target.class.chooser.title\")).\n      setItemChoosenCallback(runnable).\n      createPopup().\n      showInBestPositionFor(editor);\n  }","id":96326,"modified_method":"protected void chooseTargetClass(PsiClass[] classes, final Editor editor, final PsiFile file) {\n    final Project project = classes[0].getProject();\n\n    final JList list = new JList(classes);\n    PsiElementListCellRenderer renderer = new PsiClassListCellRenderer();\n    list.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n    list.setCellRenderer(renderer);\n    renderer.installSpeedSearch(list);\n\n    Runnable runnable = new Runnable() {\n      public void run() {\n        int index = list.getSelectedIndex();\n        if (index < 0) return;\n        final PsiClass aClass = (PsiClass) list.getSelectedValue();\n        ApplicationManager.getApplication().runWriteAction(new Runnable() {\n          public void run() {\n            CommandProcessor.getInstance().executeCommand(project, new Runnable() {\n              public void run() {\n                doInvoke(project, aClass);\n              }\n            }, getText(), null);\n          }\n        });\n      }\n    };\n\n    new PopupChooserBuilder(list).\n      setTitle(QuickFixBundle.message(\"target.class.chooser.title\")).\n      setItemChoosenCallback(runnable).\n      createPopup().\n      showInBestPositionFor(editor);\n  }","commit_id":"aa022eab76df0c2324add6ef395b12532cf651e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected PsiClass[] getTargetClasses(PsiElement element) {\n    PsiClass psiClass = null;\n    PsiExpression qualifier = null;\n    if (element instanceof PsiNewExpression) {\n      PsiJavaCodeReferenceElement ref = ((PsiNewExpression) element).getClassReference();\n      if (ref instanceof PsiReferenceExpression) {\n        qualifier = ((PsiReferenceExpression) ref).getQualifierExpression();\n      } else if (ref != null) {\n        PsiElement refElement = ref.resolve();\n        if (refElement instanceof PsiClass) psiClass = (PsiClass) refElement;\n      }\n    } else if (element instanceof PsiReferenceExpression) {\n      qualifier = ((PsiReferenceExpression) element).getQualifierExpression();\n    } else if (element instanceof PsiMethodCallExpression) {\n      qualifier = ((PsiMethodCallExpression) element).getMethodExpression().getQualifierExpression();\n    }\n    if (qualifier != null) {\n      PsiType type = qualifier.getType();\n      if (type instanceof PsiClassType) {\n        psiClass = PsiUtil.resolveClassInType(type);\n      } else if (qualifier instanceof PsiReferenceExpression) {\n        PsiElement refElement = ((PsiReferenceExpression) qualifier).resolve();\n\n        if (refElement instanceof PsiClass) {\n          psiClass = (PsiClass) refElement;\n        }\n      }\n    } else if (psiClass == null) {\n      psiClass = PsiTreeUtil.getParentOfType(element, PsiClass.class);\n    }\n\n    if (!(element instanceof PsiMethodCallExpression)) {\n      while (psiClass instanceof PsiAnonymousClass) {\n        psiClass = PsiTreeUtil.getParentOfType(psiClass, PsiClass.class);\n      }\n    }\n    if (psiClass instanceof PsiTypeParameter) {\n      PsiClass[] supers = psiClass.getSupers();\n      List<PsiClass> filtered = new ArrayList<PsiClass>();\n      for (PsiClass aSuper : supers) {\n        if (!aSuper.getManager().isInProject(aSuper)) continue;\n        if (!(aSuper instanceof PsiTypeParameter)) filtered.add(aSuper);\n      }\n      return filtered.size() > 0 ? filtered.toArray(new PsiClass[filtered.size()]) : null;\n    }\n    else {\n      return psiClass != null && psiClass.getManager().isInProject(psiClass)? new PsiClass[]{psiClass} : null;\n    }\n  }","id":96327,"modified_method":"protected PsiClass[] getTargetClasses(PsiElement element) {\n    PsiClass psiClass = null;\n    PsiExpression qualifier = null;\n\n    boolean allowOuterClasses = false;\n    if (element instanceof PsiNewExpression) {\n      final PsiNewExpression newExpression = (PsiNewExpression)element;\n      qualifier = newExpression.getQualifier();\n\n      if (qualifier == null) {\n        PsiJavaCodeReferenceElement ref = newExpression.getClassReference();\n        if (ref != null) {\n          PsiElement refElement = ref.resolve();\n          if (refElement instanceof PsiClass) psiClass = (PsiClass) refElement;\n        }\n      }\n    } else if (element instanceof PsiReferenceExpression) {\n      qualifier = ((PsiReferenceExpression) element).getQualifierExpression();\n    } else if (element instanceof PsiMethodCallExpression) {\n      final PsiReferenceExpression methodExpression = ((PsiMethodCallExpression)element).getMethodExpression();\n      qualifier = methodExpression.getQualifierExpression();\n      final @NonNls String referenceName = methodExpression.getReferenceName();\n      if (referenceName == null) return null;\n    }\n    if (qualifier != null) {\n      PsiType type = qualifier.getType();\n      if (type instanceof PsiClassType) {\n        psiClass = ((PsiClassType)type).resolve();\n      }\n\n      if (qualifier instanceof PsiJavaCodeReferenceElement) {\n        final PsiElement resolved = ((PsiJavaCodeReferenceElement)qualifier).resolve();\n        if (resolved instanceof PsiClass) {\n          if (psiClass == null) psiClass = (PsiClass)resolved;\n        }\n      }\n    } else if (psiClass == null) {\n      psiClass = PsiTreeUtil.getParentOfType(element, PsiClass.class);\n      allowOuterClasses = true;\n    }\n\n    if (psiClass instanceof PsiTypeParameter) {\n      PsiClass[] supers = psiClass.getSupers();\n      List<PsiClass> filtered = new ArrayList<PsiClass>();\n      for (PsiClass aSuper : supers) {\n        if (!aSuper.getManager().isInProject(aSuper)) continue;\n        if (!(aSuper instanceof PsiTypeParameter)) filtered.add(aSuper);\n      }\n      return filtered.size() > 0 ? filtered.toArray(new PsiClass[filtered.size()]) : null;\n    }\n    else {\n      if (psiClass == null || !psiClass.getManager().isInProject(psiClass)) {\n        return null;\n      }\n\n      if (!allowOuterClasses || ApplicationManager.getApplication().isUnitTestMode())\n        return new PsiClass[]{psiClass};\n\n      List<PsiClass> result = new ArrayList<PsiClass>();\n\n      while (psiClass != null) {\n        result.add(psiClass);\n        if (psiClass.hasModifierProperty(PsiModifier.STATIC)) break;\n        psiClass = PsiTreeUtil.getParentOfType(psiClass, PsiClass.class);\n      }\n      return result.toArray(new PsiClass[result.size()]);\n    }\n  }","commit_id":"aa022eab76df0c2324add6ef395b12532cf651e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean isAvailable(Project project, Editor editor, PsiFile file) {\n    int offset = editor.getCaretModel().getOffset();\n    PsiElement element = getElement();\n    if (element == null) {\n      return false;\n    }\n\n    PsiClass[] targetClasses = getTargetClasses(element);\n    if (targetClasses == null) {\n      return false;\n    }\n\n    if (isValidElement(element)) {\n      return false;\n    }\n\n    return isAvailableImpl(offset);\n  }","id":96328,"modified_method":"public boolean isAvailable(Project project, Editor editor, PsiFile file) {\n    int offset = editor.getCaretModel().getOffset();\n    PsiElement element = getElement();\n    if (element == null) {\n      return false;\n    }\n\n    PsiClass[] targetClasses = getTargetClasses(element);\n    return targetClasses != null && !isValidElement(element) && isAvailableImpl(offset);\n\n  }","commit_id":"aa022eab76df0c2324add6ef395b12532cf651e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void invokeImpl(PsiClass targetClass) {\n    PsiManager psiManager = getMethodCall().getManager();\n    final Project project = psiManager.getProject();\n    PsiReferenceExpression ref = getMethodCall().getMethodExpression();\n\n    if (isValidElement(getMethodCall())) {\n      return;\n    }\n\n    PsiClass parentClass = PsiTreeUtil.getParentOfType(getMethodCall(), PsiClass.class);\n    PsiMember enclosingContext = PsiTreeUtil.getParentOfType(getMethodCall(),\n      PsiMethod.class,\n      PsiField.class,\n      PsiClassInitializer.class);\n\n    if (targetClass == null) {\n      return;\n    }\n\n    final PsiFile targetFile = targetClass.getContainingFile();\n\n    String methodName = ref.getReferenceName();\n\n    try {\n      PsiElementFactory factory = psiManager.getElementFactory();\n\n      PsiMethod method = factory.createMethod(methodName, PsiType.VOID);\n\n      if (targetClass.equals(parentClass)) {\n        method = (PsiMethod) targetClass.addAfter(method, enclosingContext);\n      } else {\n        PsiElement anchor = enclosingContext;\n\n        while (anchor != null && anchor.getParent() != null && !anchor.getParent().equals(targetClass)) {\n          anchor = anchor.getParent();\n        }\n\n        if (anchor != null && anchor.getParent() == null) anchor = null;\n\n        if (anchor != null) {\n          method = (PsiMethod) targetClass.addAfter(method, anchor);\n        } else {\n          method = (PsiMethod) targetClass.add(method);\n        }\n      }\n\n      final PsiCodeBlock body = method.getBody();\n      assert body != null;\n      if (targetClass.isInterface()) {\n        body.delete();\n      }\n\n      setupVisibility(parentClass, targetClass, method.getModifierList());\n\n      if (shouldCreateStaticMember(getMethodCall().getMethodExpression(), enclosingContext, targetClass) && !targetClass.isInterface()) {\n        method.getModifierList().setModifierProperty(PsiModifier.STATIC, true);\n      }\n\n      final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project);\n      final Document document = documentManager.getDocument(targetFile);\n\n\n      method = CodeInsightUtil.forcePsiPostprocessAndRestoreElement(method);\n      TemplateBuilder builder = new TemplateBuilder(method);\n\n      targetClass = (PsiClass)method.getParent();\n      final ExpectedTypeInfo[] expectedTypes = CreateFromUsageUtils.guessExpectedTypes(getMethodCall(), true);\n      final PsiSubstitutor substitutor = getTargetSubstitutor(getMethodCall());\n      final PsiElement context = PsiTreeUtil.getParentOfType(getMethodCall(), PsiClass.class, PsiMethod.class);\n\n      CreateFromUsageUtils.setupMethodParameters(method, builder, getMethodCall().getArgumentList(), substitutor);\n      new GuessTypeParameters(factory).setupTypeElement(method.getReturnTypeElement(), expectedTypes, substitutor, builder, context, targetClass);\n      builder.setEndVariableAfter(targetClass.isInterface() ? method : body.getLBrace());\n      method = CodeInsightUtil.forcePsiPostprocessAndRestoreElement(method);\n\n      RangeMarker rangeMarker = document.createRangeMarker(method.getTextRange());\n      final Editor newEditor = positionCursor(project, targetFile, method);\n      Template template = builder.buildTemplate();\n      newEditor.getCaretModel().moveToOffset(rangeMarker.getStartOffset());\n      newEditor.getDocument().deleteString(rangeMarker.getStartOffset(), rangeMarker.getEndOffset());\n\n      if (!targetClass.isInterface()) {\n        startTemplate(newEditor, template, project, new TemplateEditingAdapter() {\n          public void templateFinished(Template template) {\n            ApplicationManager.getApplication().runWriteAction(new Runnable() {\n              public void run() {\n                PsiDocumentManager.getInstance(project).commitDocument(newEditor.getDocument());\n                final int offset = newEditor.getCaretModel().getOffset();\n                PsiMethod method = PsiTreeUtil.findElementOfClassAtOffset(targetFile, offset, PsiMethod.class, false);\n\n                if (method != null) {\n                  try {\n                    CreateFromUsageUtils.setupMethodBody(method);\n                  } catch (IncorrectOperationException e) {\n                    LOG.error(e);\n                  }\n\n                  CreateFromUsageUtils.setupEditor(method, newEditor);\n                }\n              }\n            });\n          }\n        });\n      } else {\n        startTemplate(newEditor, template, project);\n      }\n    } catch (IncorrectOperationException e) {\n      LOG.error(e);\n    }\n  }","id":96329,"modified_method":"protected void invokeImpl(PsiClass targetClass) {\n    PsiManager psiManager = getMethodCall().getManager();\n    final Project project = psiManager.getProject();\n    PsiReferenceExpression ref = getMethodCall().getMethodExpression();\n\n    if (isValidElement(getMethodCall())) {\n      return;\n    }\n\n    PsiClass parentClass = PsiTreeUtil.getParentOfType(getMethodCall(), PsiClass.class);\n    PsiMember enclosingContext = PsiTreeUtil.getParentOfType(getMethodCall(),\n      PsiMethod.class,\n      PsiField.class,\n      PsiClassInitializer.class);\n\n    if (targetClass == null) {\n      return;\n    }\n\n    final PsiFile targetFile = targetClass.getContainingFile();\n\n    String methodName = ref.getReferenceName();\n\n    try {\n      PsiElementFactory factory = psiManager.getElementFactory();\n\n      PsiMethod method = factory.createMethod(methodName, PsiType.VOID);\n\n      if (targetClass.equals(parentClass)) {\n        method = (PsiMethod) targetClass.addAfter(method, enclosingContext);\n      } else {\n        PsiElement anchor = enclosingContext;\n\n        while (anchor != null && anchor.getParent() != null && !anchor.getParent().equals(targetClass)) {\n          anchor = anchor.getParent();\n        }\n\n        if (anchor != null && anchor.getParent() == null) anchor = null;\n\n        if (anchor != null) {\n          method = (PsiMethod) targetClass.addAfter(method, anchor);\n        } else {\n          method = (PsiMethod) targetClass.add(method);\n        }\n      }\n\n      final PsiCodeBlock body = method.getBody();\n      assert body != null;\n      if (targetClass.isInterface()) {\n        body.delete();\n      }\n\n      setupVisibility(parentClass, targetClass, method.getModifierList());\n\n      if (shouldCreateStaticMember(getMethodCall().getMethodExpression(), enclosingContext, targetClass) && !targetClass.isInterface()) {\n        method.getModifierList().setModifierProperty(PsiModifier.STATIC, true);\n      }\n\n      final PsiDocumentManager documentManager = PsiDocumentManager.getInstance(project);\n      final Document document = documentManager.getDocument(targetFile);\n\n\n      method = CodeInsightUtil.forcePsiPostprocessAndRestoreElement(method);\n      TemplateBuilder builder = new TemplateBuilder(method);\n\n      targetClass = (PsiClass)method.getParent();\n      final ExpectedTypeInfo[] expectedTypes = CreateFromUsageUtils.guessExpectedTypes(getMethodCall(), true);\n      final PsiSubstitutor substitutor = getTargetSubstitutor(getMethodCall());\n      final PsiElement context = PsiTreeUtil.getParentOfType(getMethodCall(), PsiClass.class, PsiMethod.class);\n\n      CreateFromUsageUtils.setupMethodParameters(method, builder, getMethodCall().getArgumentList(), substitutor);\n      new GuessTypeParameters(factory).setupTypeElement(method.getReturnTypeElement(), expectedTypes, substitutor, builder, context, targetClass);\n      builder.setEndVariableAfter(targetClass.isInterface() ? method : body.getLBrace());\n      method = CodeInsightUtil.forcePsiPostprocessAndRestoreElement(method);\n\n      RangeMarker rangeMarker = document.createRangeMarker(method.getTextRange());\n      final Editor newEditor = positionCursor(project, targetFile, method);\n      Template template = builder.buildTemplate();\n      newEditor.getCaretModel().moveToOffset(rangeMarker.getStartOffset());\n      newEditor.getDocument().deleteString(rangeMarker.getStartOffset(), rangeMarker.getEndOffset());\n\n      if (!targetClass.isInterface()) {\n        startTemplate(newEditor, template, project, new TemplateEditingAdapter() {\n          public void templateFinished(Template template) {\n            ApplicationManager.getApplication().runWriteAction(new Runnable() {\n              public void run() {\n                PsiDocumentManager.getInstance(project).commitDocument(newEditor.getDocument());\n                final int offset = newEditor.getCaretModel().getOffset();\n                PsiMethod method = PsiTreeUtil.findElementOfClassAtOffset(targetFile, offset - 1, PsiMethod.class, false);\n\n                if (method != null) {\n                  try {\n                    CreateFromUsageUtils.setupMethodBody(method);\n                  } catch (IncorrectOperationException e) {\n                    LOG.error(e);\n                  }\n\n                  CreateFromUsageUtils.setupEditor(method, newEditor);\n                }\n              }\n            });\n          }\n        });\n      } else {\n        startTemplate(newEditor, template, project);\n      }\n    } catch (IncorrectOperationException e) {\n      LOG.error(e);\n    }\n  }","commit_id":"aa022eab76df0c2324add6ef395b12532cf651e5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private String getRhnPost() {\n        log.debug(\"getRhnPost called.\");\n        StringBuilder retval = new StringBuilder();\n        retval.append(\"%\" + KickstartScript.TYPE_POST);\n        addLogBegin(retval, RHN_LOG_FILE, true);\n        retval.append(BEGINRHN_LOG_APPEND);\n\n        retval.append(renderKeys() + NEWLINE);\n\n        List<ActivationKey> tokens = generateActKeyTokens(this.ksdata,\n                this.session);\n\n        HashSet updatePackages = getUpdatePackages(tokens);\n        HashSet freshPackages = getFreshPackages(tokens);\n        boolean isFresh = freshPackages.size() > 0;\n        boolean isUpdate = updatePackages.size() > 0;\n\n        // update the required/optional packages needed for the kickstart\n        if (isUpdate || isFresh) {\n            log.debug(\"need latest up2date\");\n            //order matters, therfore multiple logic branches\n            retval.append(MKDIR_OPTIONAL + NEWLINE);\n            if (isUpdate) {\n                //wregglej - wget is broken, so workaround it.\n                retval.append(CHDIR_OPT_RPMS + NEWLINE);\n\n                retval.append(WGET_OPT_RPMS);\n                for (Iterator itr = updatePackages.iterator(); itr.hasNext();) {\n                    retval.append(itr.next().toString() + SPACE);\n                }\n                retval.append(NEWLINE);\n            }\n            if (isFresh) {\n                //wregglej - work around wget again.\n                retval.append(CHDIR_RPMS + NEWLINE);\n\n                retval.append(WGET_RPMS);\n                for (Iterator itr = freshPackages.iterator(); itr.hasNext();) {\n                    retval.append(itr.next().toString() + SPACE);\n                }\n                retval.append(NEWLINE);\n            }\n            if (isUpdate) {\n                retval.append(UPDATE_CMD);\n                for (int i = 0; i < UPDATE_PKG_NAMES.length; i++) {\n                    retval.append(UPDATE_OPT_PATH + UPDATE_PKG_NAMES[i] + \"* \");\n                }\n                retval.append(NEWLINE);\n            }\n            if (isFresh) {\n                retval.append(FRESH_CMD + NEWLINE);\n            }\n        }\n\n        if (this.ksdata.getKickstartDefaults().getVirtualizationType()\n                .getLabel().equals(\"para_host\")) {\n            retval.append(VIRT_HOST_GRUB_FIX);\n        }\n\n        // For rhel2,3,4 we import a different key.  otherwise we just\n        // rely on the cobbler snippet below to import the key.\n        if (this.ksdata.isRhel2()) {\n            retval.append(IMPORT_RHN_KEY2 + NEWLINE);\n        }\n        else if (this.ksdata.isRhel3() || this.ksdata.isRhel4()) {\n            retval.append(IMPORT_RHN_KEY34 + NEWLINE);\n        }\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"kickstart_host: [\" + XMLRPC_HOST + \"] kshost: [\" +\n                    this.ksHost + \"] indexof: \" +\n                    this.ksHost.indexOf(XMLRPC_HOST));\n        }\n\n        String up2datehost = REDHAT_MGMT_SERVER;\n        //check if server going through RHN Proxy, if so, register through proxy instead\n        if (this.session != null &&\n                this.session.getSystemRhnHost() != null &&\n                !this.session.getSystemRhnHost().equals(\"unknown\")) {\n            up2datehost = this.session.getSystemRhnHost();\n        }\n\n        log.debug(\"adding perl -npe for /etc/sysconfig/rhn/up2date\");\n        if (this.ksdata.isRhel2()) {\n            retval.append(\"perl -npe \" +\n                    \"'s|^(\\\\s*(noSSLS\\\\|s)erverURL\\\\s*=\\\\s*[^:]+://)[^/]*/|${1}\" +\n                     up2datehost +\n                     \"/|' -i /etc/sysconfig/rhn/rhn_register\" + NEWLINE);\n        }\n        // both rhel 2 and rhel3/4 need the following\n        retval.append(\"perl -npe \" +\n                \"'s|^(\\\\s*(noSSLS\\\\|s)erverURL\\\\s*=\\\\s*[^:]+://)[^/]*/|\\\\${1}\" +\n                up2datehost +\n                \"/|' -i /etc/sysconfig/rhn/up2date\" + NEWLINE);\n\n        if (this.ksdata.getVerboseUp2date()) {\n            retval.append(\"[ -r /etc/yum.conf ] && \" +\n                    \"perl -npe 's/debuglevel=2/debuglevel=5/' -i /etc/yum.conf\" +\n                     NEWLINE);\n            retval.append(\"[ -r /etc/sysconfig/rhn/up2date ] && \" +\n                    \"perl -npe 's/debug=0/debug=1/' -i /etc/sysconfig/rhn/up2date\" +\n                     NEWLINE);\n        }\n\n        if (this.ksdata.getKickstartDefaults().getRemoteCommandFlag().booleanValue()) {\n            retval.append(REMOTE_CMD + NEWLINE);\n        }\n\n        if (this.ksdata.getKickstartDefaults().getCfgManagementFlag().booleanValue()) {\n            retval.append(CONFIG_CMD + NEWLINE);\n        }\n\n        retval.append(NEWLINE);\n        retval.append(KSTREE);\n        retval.append(NEWLINE);\n\n        //RHEL 5u4 hack for bz 495680\n        if (ksdata.isRhel5()) {\n            retval.append(\"/etc/init.d/messagebus restart\" + NEWLINE);\n            retval.append(\"/etc/init.d/haldaemon restart\" + NEWLINE);\n        }\n        retval.append(\"# begin cobbler snippet\" + NEWLINE);\n        addCobblerSnippet(retval, DEFAULT_MOTD);\n        addCobblerSnippet(retval, REDHAT_REGISTER_SNIPPET);\n        retval.append(\"# end cobbler snippet\" + NEWLINE);\n\n        retval.append(NEWLINE);\n        retval.append(RHNCHECK + NEWLINE);\n        addLogEnd(retval, RHN_LOG_FILE, true);\n\n        retval.append(NEWLINE);\n        // Work around for bug #522251\n        if (!this.ksdata.getKickstartDefaults().getKstree().getChannel().\n             getChannelArch().getName().startsWith(\"s390\")) {\n            addCobblerSnippet(retval, \"post_install_network_config\");\n        }\n        addEnd(retval);\n        return retval.toString();\n    }","id":96330,"modified_method":"private String getRhnPost() {\n        log.debug(\"getRhnPost called.\");\n        StringBuilder retval = new StringBuilder();\n        retval.append(\"%\" + KickstartScript.TYPE_POST);\n        addLogBegin(retval, RHN_LOG_FILE, \"\");\n        retval.append(BEGINRHN_LOG_APPEND);\n\n        retval.append(renderKeys() + NEWLINE);\n\n        List<ActivationKey> tokens = generateActKeyTokens(this.ksdata,\n                this.session);\n\n        HashSet updatePackages = getUpdatePackages(tokens);\n        HashSet freshPackages = getFreshPackages(tokens);\n        boolean isFresh = freshPackages.size() > 0;\n        boolean isUpdate = updatePackages.size() > 0;\n\n        // update the required/optional packages needed for the kickstart\n        if (isUpdate || isFresh) {\n            log.debug(\"need latest up2date\");\n            //order matters, therfore multiple logic branches\n            retval.append(MKDIR_OPTIONAL + NEWLINE);\n            if (isUpdate) {\n                //wregglej - wget is broken, so workaround it.\n                retval.append(CHDIR_OPT_RPMS + NEWLINE);\n\n                retval.append(WGET_OPT_RPMS);\n                for (Iterator itr = updatePackages.iterator(); itr.hasNext();) {\n                    retval.append(itr.next().toString() + SPACE);\n                }\n                retval.append(NEWLINE);\n            }\n            if (isFresh) {\n                //wregglej - work around wget again.\n                retval.append(CHDIR_RPMS + NEWLINE);\n\n                retval.append(WGET_RPMS);\n                for (Iterator itr = freshPackages.iterator(); itr.hasNext();) {\n                    retval.append(itr.next().toString() + SPACE);\n                }\n                retval.append(NEWLINE);\n            }\n            if (isUpdate) {\n                retval.append(UPDATE_CMD);\n                for (int i = 0; i < UPDATE_PKG_NAMES.length; i++) {\n                    retval.append(UPDATE_OPT_PATH + UPDATE_PKG_NAMES[i] + \"* \");\n                }\n                retval.append(NEWLINE);\n            }\n            if (isFresh) {\n                retval.append(FRESH_CMD + NEWLINE);\n            }\n        }\n\n        if (this.ksdata.getKickstartDefaults().getVirtualizationType()\n                .getLabel().equals(\"para_host\")) {\n            retval.append(VIRT_HOST_GRUB_FIX);\n        }\n\n        // For rhel2,3,4 we import a different key.  otherwise we just\n        // rely on the cobbler snippet below to import the key.\n        if (this.ksdata.isRhel2()) {\n            retval.append(IMPORT_RHN_KEY2 + NEWLINE);\n        }\n        else if (this.ksdata.isRhel3() || this.ksdata.isRhel4()) {\n            retval.append(IMPORT_RHN_KEY34 + NEWLINE);\n        }\n\n        if (log.isDebugEnabled()) {\n            log.debug(\"kickstart_host: [\" + XMLRPC_HOST + \"] kshost: [\" +\n                    this.ksHost + \"] indexof: \" +\n                    this.ksHost.indexOf(XMLRPC_HOST));\n        }\n\n        String up2datehost = REDHAT_MGMT_SERVER;\n        //check if server going through RHN Proxy, if so, register through proxy instead\n        if (this.session != null &&\n                this.session.getSystemRhnHost() != null &&\n                !this.session.getSystemRhnHost().equals(\"unknown\")) {\n            up2datehost = this.session.getSystemRhnHost();\n        }\n\n        log.debug(\"adding perl -npe for /etc/sysconfig/rhn/up2date\");\n        if (this.ksdata.isRhel2()) {\n            retval.append(\"perl -npe \" +\n                    \"'s|^(\\\\s*(noSSLS\\\\|s)erverURL\\\\s*=\\\\s*[^:]+://)[^/]*/|${1}\" +\n                     up2datehost +\n                     \"/|' -i /etc/sysconfig/rhn/rhn_register\" + NEWLINE);\n        }\n        // both rhel 2 and rhel3/4 need the following\n        retval.append(\"perl -npe \" +\n                \"'s|^(\\\\s*(noSSLS\\\\|s)erverURL\\\\s*=\\\\s*[^:]+://)[^/]*/|\\\\${1}\" +\n                up2datehost +\n                \"/|' -i /etc/sysconfig/rhn/up2date\" + NEWLINE);\n\n        if (this.ksdata.getVerboseUp2date()) {\n            retval.append(\"[ -r /etc/yum.conf ] && \" +\n                    \"perl -npe 's/debuglevel=2/debuglevel=5/' -i /etc/yum.conf\" +\n                     NEWLINE);\n            retval.append(\"[ -r /etc/sysconfig/rhn/up2date ] && \" +\n                    \"perl -npe 's/debug=0/debug=1/' -i /etc/sysconfig/rhn/up2date\" +\n                     NEWLINE);\n        }\n\n        if (this.ksdata.getKickstartDefaults().getRemoteCommandFlag().booleanValue()) {\n            retval.append(REMOTE_CMD + NEWLINE);\n        }\n\n        if (this.ksdata.getKickstartDefaults().getCfgManagementFlag().booleanValue()) {\n            retval.append(CONFIG_CMD + NEWLINE);\n        }\n\n        retval.append(NEWLINE);\n        retval.append(KSTREE);\n        retval.append(NEWLINE);\n\n        //RHEL 5u4 hack for bz 495680\n        if (ksdata.isRhel5()) {\n            retval.append(\"/etc/init.d/messagebus restart\" + NEWLINE);\n            retval.append(\"/etc/init.d/haldaemon restart\" + NEWLINE);\n        }\n        retval.append(\"# begin cobbler snippet\" + NEWLINE);\n        addCobblerSnippet(retval, DEFAULT_MOTD);\n        addCobblerSnippet(retval, REDHAT_REGISTER_SNIPPET);\n        retval.append(\"# end cobbler snippet\" + NEWLINE);\n\n        retval.append(NEWLINE);\n        retval.append(RHNCHECK + NEWLINE);\n        addLogEnd(retval, RHN_LOG_FILE, \"\");\n\n        retval.append(NEWLINE);\n        // Work around for bug #522251\n        if (!this.ksdata.getKickstartDefaults().getKstree().getChannel().\n             getChannelArch().getName().startsWith(\"s390\")) {\n            addCobblerSnippet(retval, \"post_install_network_config\");\n        }\n        addEnd(retval);\n        return retval.toString();\n    }","commit_id":"76ce306d01e01c1499020621becccc2dcf3bebf9","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"/**\n     *\n     * @return string containing nochroot post contents\n     */\n    private String getNoChroot() {\n        StringBuilder retval = new StringBuilder();\n        if (this.ksdata.getScripts() != null) {\n            retval.append(\"%\" + KickstartScript.TYPE_POST + SPACE +\n                    NOCHROOT + NEWLINE);\n            retval.append(RHN_NOCHROOT + NEWLINE);\n            if (this.ksdata.getKsCfg()) {\n                retval.append(SAVE_KS_CFG + NEWLINE);\n            }\n            addEnd(retval);\n            for (KickstartScript kss : this.ksdata.getScripts()) {\n                if (kss.getScriptType().equals(KickstartScript.TYPE_POST) &&\n                        kss.getChroot().equals(\"N\")) {\n                    // Put a blank line in between the scripts\n                    retval.append(NEWLINE);\n                    if (!StringUtils.isBlank(kss.getInterpreter())) {\n                        retval.append(\"%\" + KickstartScript.TYPE_POST + SPACE +\n                                NOCHROOT  + SPACE + INTERPRETER_OPT + SPACE +\n                                kss.getInterpreter());\n                    }\n                    else {\n                        retval.append(\"%\" + KickstartScript.TYPE_POST + SPACE +\n                                NOCHROOT);\n                    }\n\n                    if (ksdata.getNonChrootPost()) {\n                        addLogBegin(retval, POST_LOG_NOCHROOT_FILE + \".\" +\n                                kss.getPosition(),\n                                StringUtils.isBlank(kss.getInterpreter()));\n                        retval.append(RHN_TRACE);\n                    }\n                    retval.append(NEWLINE);\n                    retval.append(kss.getDataContents() + NEWLINE);\n                    if (ksdata.getNonChrootPost()) {\n                        addLogEnd(retval, POST_LOG_NOCHROOT_FILE + \".\" + kss.getPosition(),\n                                  StringUtils.isBlank(kss.getInterpreter()));\n                    }\n                    addEnd(retval);\n                }\n            } // end iterator\n        } // end if we have scripts to process\n\n\n        return retval.toString();\n    }","id":96331,"modified_method":"/**\n     *\n     * @return string containing nochroot post contents\n     */\n    private String getNoChroot() {\n        StringBuilder retval = new StringBuilder();\n        if (this.ksdata.getScripts() != null) {\n            retval.append(\"%\" + KickstartScript.TYPE_POST + SPACE +\n                    NOCHROOT + NEWLINE);\n            retval.append(RHN_NOCHROOT + NEWLINE);\n            if (this.ksdata.getKsCfg()) {\n                retval.append(SAVE_KS_CFG + NEWLINE);\n            }\n            addEnd(retval);\n            for (KickstartScript kss : this.ksdata.getScripts()) {\n                if (kss.getScriptType().equals(KickstartScript.TYPE_POST) &&\n                        kss.getChroot().equals(\"N\")) {\n                    // Put a blank line in between the scripts\n                    retval.append(NEWLINE);\n                    if (!StringUtils.isBlank(kss.getInterpreter())) {\n                        retval.append(\"%\" + KickstartScript.TYPE_POST + SPACE +\n                                NOCHROOT  + SPACE + INTERPRETER_OPT + SPACE +\n                                kss.getInterpreter());\n                    }\n                    else {\n                        retval.append(\"%\" + KickstartScript.TYPE_POST + SPACE +\n                                NOCHROOT);\n                    }\n\n                    if (ksdata.getNonChrootPost()) {\n                        addLogBegin(retval, POST_LOG_NOCHROOT_FILE + \".\" +\n                                kss.getPosition(), kss.getInterpreter());\n                        retval.append(RHN_TRACE);\n                    }\n                    retval.append(NEWLINE);\n                    retval.append(kss.getDataContents() + NEWLINE);\n                    if (ksdata.getNonChrootPost()) {\n                        addLogEnd(retval, POST_LOG_NOCHROOT_FILE + \".\" + kss.getPosition(),\n                                  kss.getInterpreter());\n                    }\n                    addEnd(retval);\n                }\n            } // end iterator\n        } // end if we have scripts to process\n\n\n        return retval.toString();\n    }","commit_id":"76ce306d01e01c1499020621becccc2dcf3bebf9","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"/**\n     * @param typeIn type of script to render (pre or post)\n     * @return rendered script(s)\n     */\n    private String getPrePost(String typeIn) {\n        StringBuilder retval = new StringBuilder();\n        if (this.ksdata.getScripts() != null) {\n            List<KickstartScript> l =\n                new LinkedList<KickstartScript>(this.ksdata.getScripts());\n            Collections.sort(l);\n            Iterator<KickstartScript> i = l.iterator();\n            for (KickstartScript kss : l) {\n\n                // render either pre or chroot posts\n                if (kss.getScriptType().equals(typeIn)) {\n                    if (typeIn.equals(KickstartScript.TYPE_PRE) ||\n                            (typeIn.equals(KickstartScript.TYPE_POST) &&\n                                    (kss.getChroot().equals(\"Y\")))) {\n                        retval.append(NEWLINE);\n                        if (kss.getRaw()) {\n                            retval.append(RAW_START + NEWLINE);\n                        }\n                        if (!StringUtils.isBlank(kss.getInterpreter())) {\n                            retval.append(\"%\" + typeIn + SPACE + INTERPRETER_OPT + SPACE +\n                                    kss.getInterpreter());\n                        }\n                        else {\n                            retval.append(\"%\" + typeIn);\n                        }\n                        if (typeIn.equals(KickstartScript.TYPE_POST) &&\n                                ksdata.getPostLog()) {\n                            addLogBegin(retval, POST_LOG_FILE + \".\" + kss.getPosition(),\n                                        StringUtils.isBlank(kss.getInterpreter()));\n                        }\n                        else if (typeIn.equals(KickstartScript.TYPE_PRE) &&\n                                ksdata.getPreLog()) {\n                            addLogBegin(retval, PRE_LOG_FILE + \".\" + kss.getPosition(),\n                                        StringUtils.isBlank(kss.getInterpreter()));\n                        }\n                        else {\n                            retval.append(NEWLINE);\n                        }\n                        retval.append(kss.getDataContents() + NEWLINE);\n\n                        if (typeIn.equals(KickstartScript.TYPE_POST) &&\n                                ksdata.getPostLog()) {\n                            addLogEnd(retval, POST_LOG_FILE + \".\" + kss.getPosition(),\n                                      StringUtils.isBlank(kss.getInterpreter()));\n                        }\n                        else if (typeIn.equals(KickstartScript.TYPE_PRE) &&\n                                ksdata.getPreLog()) {\n                            addLogEnd(retval, PRE_LOG_FILE + \".\" + kss.getPosition(),\n                                      StringUtils.isBlank(kss.getInterpreter()));\n                        }\n                        if (kss.getRaw()) {\n                            retval.append(RAW_END + NEWLINE);\n                        }\n                        addEnd(retval);\n                    }\n                } // end script type and chroot = y\n\n            } // end iterator\n        } // end if have scripts\n        return retval.toString();\n    }","id":96332,"modified_method":"/**\n     * @param typeIn type of script to render (pre or post)\n     * @return rendered script(s)\n     */\n    private String getPrePost(String typeIn) {\n        StringBuilder retval = new StringBuilder();\n        if (this.ksdata.getScripts() != null) {\n            List<KickstartScript> l =\n                new LinkedList<KickstartScript>(this.ksdata.getScripts());\n            Collections.sort(l);\n            Iterator<KickstartScript> i = l.iterator();\n            for (KickstartScript kss : l) {\n\n                // render either pre or chroot posts\n                if (kss.getScriptType().equals(typeIn)) {\n                    if (typeIn.equals(KickstartScript.TYPE_PRE) ||\n                            (typeIn.equals(KickstartScript.TYPE_POST) &&\n                                    (kss.getChroot().equals(\"Y\")))) {\n                        retval.append(NEWLINE);\n                        if (kss.getRaw()) {\n                            retval.append(RAW_START + NEWLINE);\n                        }\n                        if (!StringUtils.isBlank(kss.getInterpreter())) {\n                            retval.append(\"%\" + typeIn + SPACE + INTERPRETER_OPT + SPACE +\n                                    kss.getInterpreter());\n                        }\n                        else {\n                            retval.append(\"%\" + typeIn);\n                        }\n                        if (typeIn.equals(KickstartScript.TYPE_POST) &&\n                                ksdata.getPostLog()) {\n                            addLogBegin(retval, POST_LOG_FILE + \".\" + kss.getPosition(),\n                                    kss.getInterpreter());\n                        }\n                        else if (typeIn.equals(KickstartScript.TYPE_PRE) &&\n                                ksdata.getPreLog()) {\n                            addLogBegin(retval, PRE_LOG_FILE + \".\" + kss.getPosition(),\n                                    kss.getInterpreter());\n                        }\n                        else {\n                            retval.append(NEWLINE);\n                        }\n                        retval.append(kss.getDataContents() + NEWLINE);\n\n                        if (typeIn.equals(KickstartScript.TYPE_POST) &&\n                                ksdata.getPostLog()) {\n                            addLogEnd(retval, POST_LOG_FILE + \".\" + kss.getPosition(),\n                                    kss.getInterpreter());\n                        }\n                        else if (typeIn.equals(KickstartScript.TYPE_PRE) &&\n                                ksdata.getPreLog()) {\n                            addLogEnd(retval, PRE_LOG_FILE + \".\" + kss.getPosition(),\n                                    kss.getInterpreter());\n                        }\n                        if (kss.getRaw()) {\n                            retval.append(RAW_END + NEWLINE);\n                        }\n                        addEnd(retval);\n                    }\n                } // end script type and chroot = y\n\n            } // end iterator\n        } // end if have scripts\n        return retval.toString();\n    }","commit_id":"76ce306d01e01c1499020621becccc2dcf3bebf9","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"private void addLogEnd(StringBuilder buff, String logFile, boolean bash) {\n        if (ksdata.isRhel6OrGreater()) {\n            //nothing\n        }\n        else if(bash){\n            buff.append(\") >> \" + logFile + \" 2>&1\" + NEWLINE);\n        }\n    }","id":96333,"modified_method":"private void addLogEnd(StringBuilder buff, String logFile, String interpreter) {\n        if (ksdata.isRhel6OrGreater()) {\n            //nothing\n        }\n        else if (isBashInterpreter(interpreter)) {\n            buff.append(\") >> \" + logFile + \" 2>&1\" + NEWLINE);\n        }\n    }","commit_id":"76ce306d01e01c1499020621becccc2dcf3bebf9","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"private void addLogBegin(StringBuilder buff, String logFile, boolean bash) {\n        if (ksdata.isRhel6OrGreater()) {\n            buff.append(\" --log \" + logFile);\n        }\n        else if (bash) {\n            buff.append(NEWLINE + \"(\");\n        }\n        buff.append(NEWLINE);\n    }","id":96334,"modified_method":"private void addLogBegin(StringBuilder buff, String logFile, String interpreter) {\n        if (ksdata.isRhel6OrGreater()) {\n            buff.append(\" --log \" + logFile);\n        }\n        else if (isBashInterpreter(interpreter)) {\n            buff.append(NEWLINE + \"(\");\n        }\n        buff.append(NEWLINE);\n    }","commit_id":"76ce306d01e01c1499020621becccc2dcf3bebf9","url":"https://github.com/spacewalkproject/spacewalk"},{"original_method":"private List getSectionTeachingAssistants(String sectionUuid) {\n\t\tGroup group = siteService.findGroup(sectionUuid);\n\t\tCourseSection section = getSection(sectionUuid);\n\t\tif(section == null) {\n\t\t\treturn new ArrayList();\n\t\t}\n\t\tif(log.isDebugEnabled()) log.debug(\"Getting section enrollments in \" + sectionUuid);\n\t\tSet sakaiUserUids = group.getUsersHasRole(getSectionTaRole(group));\n\t\tList sakaiUsers = userDirectoryService.getUsers(sakaiUserUids);\n\n        List membersList = new ArrayList();\n        for(Iterator iter = sakaiUsers.iterator(); iter.hasNext();) {\n        \tUser user = SakaiUtil.convertUser((org.sakaiproject.service.legacy.user.User) iter.next());\n    \t\tTeachingAssistantRecordImpl record = new TeachingAssistantRecordImpl(section, user);\n    \t\tmembersList.add(record);\n        }\n        return membersList;\n\t}","id":96335,"modified_method":"private List getSectionTeachingAssistants(String sectionUuid) {\n\t\tGroup group = siteService.findGroup(sectionUuid);\n\t\tCourseSection section = getSection(sectionUuid);\n\t\tif(section == null) {\n\t\t\treturn new ArrayList();\n\t\t}\n\t\tif(log.isDebugEnabled()) log.debug(\"Getting section enrollments in \" + sectionUuid);\n\t\tString taRole = getSectionTaRole(group);\n\t\tif(taRole == null) {\n\t\t\tif(log.isDebugEnabled()) log.debug(\"There is no role for TAs in this site... returning an empty list\");\n\t\t\treturn new ArrayList();\n\t\t}\n\t\tSet sakaiUserUids = group.getUsersHasRole(taRole);\n\t\tList sakaiUsers = userDirectoryService.getUsers(sakaiUserUids);\n\n        List membersList = new ArrayList();\n        for(Iterator iter = sakaiUsers.iterator(); iter.hasNext();) {\n        \tUser user = SakaiUtil.convertUser((org.sakaiproject.service.legacy.user.User) iter.next());\n    \t\tTeachingAssistantRecordImpl record = new TeachingAssistantRecordImpl(section, user);\n    \t\tmembersList.add(record);\n        }\n        return membersList;\n\t}","commit_id":"5a98815dfa672acc6ba01201670f352fbd2f3d29","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private String getSectionTaRole(Group group) {\n    \tSet roleStrings = group.getRolesIsAllowed(SectionAwareness.TA_MARKER);\n    \tif(roleStrings.size() != 1) {\n    \t\tString str = \"Group \" + group + \" must have one and only one role with permission \"\n\t\t\t+ SectionAwareness.TA_MARKER;\n    \t\tlog.error(str);\n    \t\tthrow new RuntimeException(str);\n    \t}\n    \treturn (String)roleStrings.iterator().next();\n    }","id":96336,"modified_method":"/**\n     * Gets the group-scoped role to use when adding a TA to a group.\n     * \n     * @param group The authzGroup\n     * @return The role id, or null if there is not role with the TA marker.\n     */\n    private String getSectionTaRole(Group group) {\n    \tSet roleStrings = group.getRolesIsAllowed(SectionAwareness.TA_MARKER);\n    \tif(roleStrings.size() != 1) {\n    \t\tif(log.isInfoEnabled()) log.info(\"Group \" + group +\n    \t\t\t\t\" must have one and only one role with permission \"\n    \t\t\t\t+ SectionAwareness.TA_MARKER);\n    \t\treturn null;\n    \t}\n    \treturn (String)roleStrings.iterator().next();\n    }","commit_id":"5a98815dfa672acc6ba01201670f352fbd2f3d29","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private String getSectionStudentRole(AuthzGroup group) {\n    \tSet roleStrings = group.getRolesIsAllowed(SectionAwareness.STUDENT_MARKER);\n    \tif(roleStrings.size() != 1) {\n    \t\tString str = \"Group \" + group + \" must have one and only one role with permission \"\n\t\t\t+ SectionAwareness.STUDENT_MARKER;\n    \t\tlog.error(str);\n    \t\tthrow new RuntimeException(str);\n    \t}\n    \treturn (String)roleStrings.iterator().next();\n    }","id":96337,"modified_method":"/**\n     * Gets the group-scoped role to use when adding a student to a group.\n     * \n     * @param group The authzGroup\n     * @return The role id, or null if there is not role with the student marker.\n     */\n\tprivate String getSectionStudentRole(AuthzGroup group) {\n    \tSet roleStrings = group.getRolesIsAllowed(SectionAwareness.STUDENT_MARKER);\n    \tif(roleStrings.size() != 1) {\n    \t\tif(log.isInfoEnabled()) log.info(\"Group \" + group +\n    \t\t\t\t\" must have one and only one role with permission \"\n    \t\t\t\t+ SectionAwareness.STUDENT_MARKER);\n    \t\treturn null;\n    \t}\n    \treturn (String)roleStrings.iterator().next();\n    }","commit_id":"5a98815dfa672acc6ba01201670f352fbd2f3d29","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private List getSectionEnrollments(String sectionUuid) {\n\t\tGroup group = siteService.findGroup(sectionUuid);\n\t\tCourseSection section = getSection(sectionUuid);\n\t\tif(section == null) {\n\t\t\treturn new ArrayList();\n\t\t}\n\t\tif(log.isDebugEnabled()) log.debug(\"Getting section enrollments in \" + sectionUuid);\n\t\tSet sakaiUserUids = group.getUsersHasRole(getSectionStudentRole(group));\n\t\tList sakaiUsers = userDirectoryService.getUsers(sakaiUserUids);\n\n        List membersList = new ArrayList();\n        for(Iterator iter = sakaiUsers.iterator(); iter.hasNext();) {\n        \tUser user = SakaiUtil.convertUser((org.sakaiproject.service.legacy.user.User) iter.next());\n    \t\tEnrollmentRecordImpl record = new EnrollmentRecordImpl(section, null, user);\n    \t\tmembersList.add(record);\n        }\n        return membersList;\n\t}","id":96338,"modified_method":"private List getSectionEnrollments(String sectionUuid) {\n\t\tGroup group = siteService.findGroup(sectionUuid);\n\t\tCourseSection section = getSection(sectionUuid);\n\t\tif(section == null) {\n\t\t\treturn new ArrayList();\n\t\t}\n\t\tif(log.isDebugEnabled()) log.debug(\"Getting section enrollments in \" + sectionUuid);\n\t\tString studentRole = getSectionStudentRole(group);\n\t\tif(studentRole == null) {\n\t\t\treturn new ArrayList();\n\t\t}\n\t\tSet sakaiUserUids = group.getUsersHasRole(studentRole);\n\t\tList sakaiUsers = userDirectoryService.getUsers(sakaiUserUids);\n\n        List membersList = new ArrayList();\n        for(Iterator iter = sakaiUsers.iterator(); iter.hasNext();) {\n        \tUser user = SakaiUtil.convertUser((org.sakaiproject.service.legacy.user.User) iter.next());\n    \t\tEnrollmentRecordImpl record = new EnrollmentRecordImpl(section, null, user);\n    \t\tmembersList.add(record);\n        }\n        return membersList;\n\t}","commit_id":"5a98815dfa672acc6ba01201670f352fbd2f3d29","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * @inheritDoc\n\t */\n\tpublic List getSectionMembers(final String sectionUuid) {\n\t\tGroup group = siteService.findGroup(sectionUuid);\n\t\tCourseSection section = new CourseSectionImpl(group);\n\t\tString taRole = getSectionTaRole(group);\n\t\tString studentRole = getSectionStudentRole(group);\n\t\tSet members = group.getMembers();\n\t\t\n\t\tList sectionMembershipRecords = new ArrayList();\n\t\tfor(Iterator iter = members.iterator(); iter.hasNext();) {\n\t\t\tMember member = (Member)iter.next();\n\t\t\tString roleString = member.getRole().getId();\n\t\t\tUser user = SakaiUtil.getUserFromSakai(member.getUserId());\n\t\t\tParticipationRecord record = null;\n\t\t\tif(roleString.equals(taRole)) {\n\t\t\t\trecord = new TeachingAssistantRecordImpl(section, user);\n\t\t\t} else if(roleString.equals(studentRole)) {\n\t\t\t\trecord = new EnrollmentRecordImpl(section, null, user);\n\t\t\t}\n\t\t\tif(record != null) {\n\t\t\t\tsectionMembershipRecords.add(record);\n\t\t\t}\n\t\t}\n\t\treturn sectionMembershipRecords;\t\t\n\t}","id":96339,"modified_method":"/**\n\t * @inheritDoc\n\t */\n\tpublic List getSectionMembers(final String sectionUuid) {\n\t\tGroup group = siteService.findGroup(sectionUuid);\n\t\tCourseSection section = new CourseSectionImpl(group);\n\t\tString taRole = getSectionTaRole(group);\n\t\tString studentRole = getSectionStudentRole(group);\n\t\tSet members = group.getMembers();\n\t\t\n\t\tList sectionMembershipRecords = new ArrayList();\n\t\tfor(Iterator iter = members.iterator(); iter.hasNext();) {\n\t\t\tMember member = (Member)iter.next();\n\t\t\tString roleString = member.getRole().getId();\n\t\t\tUser user = SakaiUtil.getUserFromSakai(member.getUserId());\n\t\t\tParticipationRecord record = null;\n\t\t\tif(roleString.equals(studentRole)) {\n\t\t\t\trecord = new EnrollmentRecordImpl(section, null, user);\n\t\t\t} else if(roleString.equals(taRole)) {\n\t\t\t\trecord = new TeachingAssistantRecordImpl(section, user);\n\t\t\t}\n\t\t\tif(record != null) {\n\t\t\t\tsectionMembershipRecords.add(record);\n\t\t\t}\n\t\t}\n\t\treturn sectionMembershipRecords;\t\t\n\t}","commit_id":"5a98815dfa672acc6ba01201670f352fbd2f3d29","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private ParticipationRecord addTaToSection(String userUid, String sectionUuid) {\n\t\tCourseSectionImpl section = (CourseSectionImpl)getSection(sectionUuid);\n\t\tGroup group = section.getGroup();\n\t\tUser user = SakaiUtil.getUserFromSakai(userUid);\n\n\t\t// Add the membership to the framework\n    \tString role = getSectionTaRole(group);\n\t\tgroup.addMember(userUid, role, true, false);\n\t\t\n\t\ttry {\n\t\t\tsiteService.saveGroupMembership(group.getContainingSite());\n\t\t\tpostEvent(\"Added \" + userUid + \" as a TA in section\", sectionUuid);\n\t\t} catch (IdUnusedException e) {\n\t\t\tlog.error(\"unable to find site: \", e);\n\t\t\treturn null;\n\t\t} catch (PermissionException e) {\n\t\t\tlog.error(\"access denied while attempting to save site: \", e);\n\t\t\treturn null;\n\t\t}\n\n\t\t// Return the enrollment record\n\t\treturn new TeachingAssistantRecordImpl(section, user);\n\t}","id":96340,"modified_method":"private ParticipationRecord addTaToSection(String userUid, String sectionUuid) {\n\t\tCourseSectionImpl section = (CourseSectionImpl)getSection(sectionUuid);\n\t\tGroup group = section.getGroup();\n\t\tUser user = SakaiUtil.getUserFromSakai(userUid);\n\n\t\t// Add the membership to the framework\n    \tString role = getSectionTaRole(group);\n    \tif(role == null) {\n    \t\tthrow new RuntimeException(\"Can't add a user to a section as a TA, since there is no TA-flagged role\");\n    \t}\n    \t\n    \tgroup.addMember(userUid, role, true, false);\n\t\t\n\t\ttry {\n\t\t\tsiteService.saveGroupMembership(group.getContainingSite());\n\t\t\tpostEvent(\"Added \" + userUid + \" as a TA in section\", sectionUuid);\n\t\t} catch (IdUnusedException e) {\n\t\t\tlog.error(\"unable to find site: \", e);\n\t\t\treturn null;\n\t\t} catch (PermissionException e) {\n\t\t\tlog.error(\"access denied while attempting to save site: \", e);\n\t\t\treturn null;\n\t\t}\n\n\t\t// Return the enrollment record\n\t\treturn new TeachingAssistantRecordImpl(section, user);\n\t}","commit_id":"5a98815dfa672acc6ba01201670f352fbd2f3d29","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * @inheritDoc\n\t */\n\tpublic void setSectionMemberships(Set userUids, Role role, String sectionUuid) {\n\t\tCourseSectionImpl section = (CourseSectionImpl)getSection(sectionUuid);\n\t\tGroup group = section.getGroup();\n\t\tString sakaiRoleString;\n\t\tif(role.isTeachingAssistant()) {\n\t\t\tsakaiRoleString = getSectionTaRole(group);\n\t\t} else if(role.isStudent()) {\n\t\t\tsakaiRoleString = getSectionStudentRole(group);\n\t\t} else {\n\t\t\tString str = \"Only students and TAs can be added to sections\";\n\t\t\tlog.error(str);\n\t\t\tthrow new RuntimeException(str);\n\t\t}\n\n\t\t// Remove the current members in this role\n\t\tSet currentUserIds = group.getUsersHasRole(sakaiRoleString);\n\t\tfor(Iterator iter = currentUserIds.iterator(); iter.hasNext();) {\n\t\t\tString userUid = (String)iter.next();\n\t\t\tgroup.removeMember(userUid);\n\t\t}\n\t\t\n\t\t// Add the new members (sure would be nice to have transactions here!)\n\t\tfor(Iterator iter = userUids.iterator(); iter.hasNext();) {\n\t\t\tString userUid = (String)iter.next();\n\t\t\tgroup.addMember(userUid, sakaiRoleString, true, false);\n\t\t}\n\n\t\ttry {\n\t\t\tsiteService.saveGroupMembership(group.getContainingSite());\n\t\t\tpostEvent(\"Redefined section memberships to include \" + userUids.size() +\n\t\t\t\t\t\" users in role \" + role.getDescription(), sectionUuid);\n\t\t} catch (IdUnusedException e) {\n\t\t\tlog.error(\"unable to find site: \", e);\n\t\t} catch (PermissionException e) {\n\t\t\tlog.error(\"access denied while attempting to save authz group: \", e);\n\t\t}\n\t}","id":96341,"modified_method":"/**\n\t * @inheritDoc\n\t */\n\tpublic void setSectionMemberships(Set userUids, Role role, String sectionUuid) {\n\t\tCourseSectionImpl section = (CourseSectionImpl)getSection(sectionUuid);\n\t\tGroup group = section.getGroup();\n\t\tString sakaiRoleString;\n\t\tif(role.isTeachingAssistant()) {\n\t\t\tsakaiRoleString = getSectionTaRole(group);\n\t\t} else if(role.isStudent()) {\n\t\t\tsakaiRoleString = getSectionStudentRole(group);\n\t\t} else {\n\t\t\tString str = \"Only students and TAs can be added to sections\";\n\t\t\tlog.error(str);\n\t\t\tthrow new RuntimeException(str);\n\t\t}\n\t\t\n\t\tif(sakaiRoleString == null) {\n\t\t\tthrow new RuntimeException(\"Can't set memberships for role \" + role +\n\t\t\t\t\t\".  No sakai role string can be found for this role.\");\n\t\t}\n\n\t\t// Remove the current members in this role\n\t\tSet currentUserIds = group.getUsersHasRole(sakaiRoleString);\n\t\tfor(Iterator iter = currentUserIds.iterator(); iter.hasNext();) {\n\t\t\tString userUid = (String)iter.next();\n\t\t\tgroup.removeMember(userUid);\n\t\t}\n\t\t\n\t\t// Add the new members (sure would be nice to have transactions here!)\n\t\tfor(Iterator iter = userUids.iterator(); iter.hasNext();) {\n\t\t\tString userUid = (String)iter.next();\n\t\t\tgroup.addMember(userUid, sakaiRoleString, true, false);\n\t\t}\n\n\t\ttry {\n\t\t\tsiteService.saveGroupMembership(group.getContainingSite());\n\t\t\tpostEvent(\"Redefined section memberships to include \" + userUids.size() +\n\t\t\t\t\t\" users in role \" + role.getDescription(), sectionUuid);\n\t\t} catch (IdUnusedException e) {\n\t\t\tlog.error(\"unable to find site: \", e);\n\t\t} catch (PermissionException e) {\n\t\t\tlog.error(\"access denied while attempting to save authz group: \", e);\n\t\t}\n\t}","commit_id":"5a98815dfa672acc6ba01201670f352fbd2f3d29","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * @inheritDoc\n\t */\n\tpublic List getSectionTeachingAssistants(String sectionUuid) {\n\t\tGroup group = siteService.findGroup(sectionUuid);\n\t\tCourseSection section = getSection(sectionUuid);\n\t\tif(section == null) {\n\t\t\treturn new ArrayList();\n\t\t}\n\t\tif(log.isDebugEnabled()) log.debug(\"Getting section enrollments in \" + sectionUuid);\n\t\tSet sakaiUserUids = group.getUsersHasRole(getSectionTaRole(group));\n\t\tList sakaiUsers = userDirectoryService.getUsers(sakaiUserUids);\n\n        List membersList = new ArrayList();\n        for(Iterator iter = sakaiUsers.iterator(); iter.hasNext();) {\n        \tUser user = SakaiUtil.convertUser((org.sakaiproject.service.legacy.user.User) iter.next());\n    \t\tTeachingAssistantRecordImpl record = new TeachingAssistantRecordImpl(section, user);\n    \t\tmembersList.add(record);\n        }\n        return membersList;\n\t}","id":96342,"modified_method":"/**\n\t * @inheritDoc\n\t */\n\tpublic List getSectionTeachingAssistants(String sectionUuid) {\n\t\tGroup group = siteService.findGroup(sectionUuid);\n\t\tCourseSection section = getSection(sectionUuid);\n\t\tif(section == null) {\n\t\t\treturn new ArrayList();\n\t\t}\n\t\tif(log.isDebugEnabled()) log.debug(\"Getting section enrollments in \" + sectionUuid);\n\t\tString taRole = getSectionTaRole(group);\n\t\tif(taRole == null) {\n\t\t\treturn new ArrayList();\n\t\t}\n\t\tSet sakaiUserUids = group.getUsersHasRole(taRole);\n\t\tList sakaiUsers = userDirectoryService.getUsers(sakaiUserUids);\n\n        List membersList = new ArrayList();\n        for(Iterator iter = sakaiUsers.iterator(); iter.hasNext();) {\n        \tUser user = SakaiUtil.convertUser((org.sakaiproject.service.legacy.user.User) iter.next());\n    \t\tTeachingAssistantRecordImpl record = new TeachingAssistantRecordImpl(section, user);\n    \t\tmembersList.add(record);\n        }\n        return membersList;\n\t}","commit_id":"5a98815dfa672acc6ba01201670f352fbd2f3d29","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * @inheritDoc\n\t */\n    public EnrollmentRecord joinSection(String sectionUuid) {\n    \tGroup group = siteService.findGroup(sectionUuid);\n    \tString role = getSectionStudentRole(group);\n\t\ttry {\n\t\t\tauthzGroupService.joinGroup(sectionUuid, role);\n\t\t\tpostEvent(\"User joined section\", sectionUuid);\n\t\t} catch (PermissionException e) {\n\t\t\tlog.error(\"access denied while attempting to join authz group: \", e);\n\t\t\treturn null;\n\t\t} catch (IdUnusedException e) {\n\t\t\tlog.error(\"can not find group while attempting to join authz group: \", e);\n\t\t\treturn null;\n\t\t}\n\n\t\t// Return the membership record that the app understands\n\t\tString userUid = sessionManager.getCurrentSessionUserId();\n\t\tUser user = SakaiUtil.getUserFromSakai(userUid);\n\t\tCourseSection section = getSection(sectionUuid);\n\n\t\treturn new EnrollmentRecordImpl(section, null, user);\n    }","id":96343,"modified_method":"/**\n\t * @inheritDoc\n\t */\n    public EnrollmentRecord joinSection(String sectionUuid) {\n    \tGroup group = siteService.findGroup(sectionUuid);\n    \tString role = getSectionStudentRole(group);\n    \tif(role == null) {\n    \t\tthrow new RuntimeException(\"Can not join section, since there is no student-flagged role\");\n    \t}\n\t\ttry {\n\t\t\tauthzGroupService.joinGroup(sectionUuid, role);\n\t\t\tpostEvent(\"User joined section\", sectionUuid);\n\t\t} catch (PermissionException e) {\n\t\t\tlog.error(\"access denied while attempting to join authz group: \", e);\n\t\t\treturn null;\n\t\t} catch (IdUnusedException e) {\n\t\t\tlog.error(\"can not find group while attempting to join authz group: \", e);\n\t\t\treturn null;\n\t\t}\n\n\t\t// Return the membership record that the app understands\n\t\tString userUid = sessionManager.getCurrentSessionUserId();\n\t\tUser user = SakaiUtil.getUserFromSakai(userUid);\n\t\tCourseSection section = getSection(sectionUuid);\n\n\t\treturn new EnrollmentRecordImpl(section, null, user);\n    }","commit_id":"5a98815dfa672acc6ba01201670f352fbd2f3d29","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * @inheritDoc\n\t */\n\tpublic int getTotalEnrollments(String learningContextUuid) {\n\t\tAuthzGroup authzGroup;\n\t\ttry {\n\t\t\tauthzGroup = authzGroupService.getAuthzGroup(learningContextUuid);\n\t\t} catch (IdUnusedException e) {\n\t\t\tlog.error(\"learning context \" + learningContextUuid + \" is neither a site nor a section\");\n\t\t\treturn 0;\n\t\t}\n\t\tSet users = authzGroup.getUsersHasRole(getSectionStudentRole(authzGroup));\n\t\treturn users.size();\n\t}","id":96344,"modified_method":"/**\n\t * @inheritDoc\n\t */\n\tpublic int getTotalEnrollments(String learningContextUuid) {\n\t\tAuthzGroup authzGroup;\n\t\ttry {\n\t\t\tauthzGroup = authzGroupService.getAuthzGroup(learningContextUuid);\n\t\t} catch (IdUnusedException e) {\n\t\t\tlog.error(\"learning context \" + learningContextUuid + \" is neither a site nor a section\");\n\t\t\treturn 0;\n\t\t}\n\t\tString studentRole = getSectionStudentRole(authzGroup);\n\t\tif(studentRole == null) {\n\t\t\tif(log.isInfoEnabled()) log.info(\"Can't get total enrollments, since there is no student-flagged role\");\n\t\t\treturn 0;\n\t\t}\n\t\tSet users = authzGroup.getUsersHasRole(studentRole);\n\t\treturn users.size();\n\t}","commit_id":"5a98815dfa672acc6ba01201670f352fbd2f3d29","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n\t * @inheritDoc\n\t */\n\tpublic List getSectionEnrollments(String sectionUuid) {\n\t\tGroup group = siteService.findGroup(sectionUuid);\n\t\tCourseSection section = getSection(sectionUuid);\n\t\tif(section == null) {\n\t\t\treturn new ArrayList();\n\t\t}\n\t\tif(log.isDebugEnabled()) log.debug(\"Getting section enrollments in \" + sectionUuid);\n\t\tSet sakaiUserUids = group.getUsersHasRole(getSectionStudentRole(group));\n\t\tList sakaiUsers = userDirectoryService.getUsers(sakaiUserUids);\n\n        List membersList = new ArrayList();\n        for(Iterator iter = sakaiUsers.iterator(); iter.hasNext();) {\n        \tUser user = SakaiUtil.convertUser((org.sakaiproject.service.legacy.user.User) iter.next());\n    \t\tEnrollmentRecordImpl record = new EnrollmentRecordImpl(section, null, user);\n    \t\tmembersList.add(record);\n        }\n        return membersList;\n\t}","id":96345,"modified_method":"/**\n\t * @inheritDoc\n\t */\n\tpublic List getSectionEnrollments(String sectionUuid) {\n\t\tGroup group = siteService.findGroup(sectionUuid);\n\t\tCourseSection section = getSection(sectionUuid);\n\t\tif(section == null) {\n\t\t\treturn new ArrayList();\n\t\t}\n\t\tif(log.isDebugEnabled()) log.debug(\"Getting section enrollments in \" + sectionUuid);\n\t\tString studentRole = getSectionStudentRole(group);\n\t\tif(studentRole == null) {\n\t\t\treturn new ArrayList();\n\t\t}\n\t\tSet sakaiUserUids = group.getUsersHasRole(studentRole);\n\t\tList sakaiUsers = userDirectoryService.getUsers(sakaiUserUids);\n\n        List membersList = new ArrayList();\n        for(Iterator iter = sakaiUsers.iterator(); iter.hasNext();) {\n        \tUser user = SakaiUtil.convertUser((org.sakaiproject.service.legacy.user.User) iter.next());\n    \t\tEnrollmentRecordImpl record = new EnrollmentRecordImpl(section, null, user);\n    \t\tmembersList.add(record);\n        }\n        return membersList;\n\t}","commit_id":"5a98815dfa672acc6ba01201670f352fbd2f3d29","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private String getSectionStudentRole(AuthzGroup group) {\n    \tSet roleStrings = group.getRolesIsAllowed(SectionAwareness.STUDENT_MARKER);\n    \tif(roleStrings.size() != 1) {\n    \t\tString str = \"Group \" + group + \" must have one and only one role with permission \"\n\t\t\t+ SectionAwareness.STUDENT_MARKER;\n    \t\tlog.error(str);\n    \t\tthrow new RuntimeException(str);\n    \t}\n    \treturn (String)roleStrings.iterator().next();\n    }","id":96346,"modified_method":"private String getSectionStudentRole(AuthzGroup group) {\n    \tSet roleStrings = group.getRolesIsAllowed(SectionAwareness.STUDENT_MARKER);\n    \tif(roleStrings.size() != 1) {\n    \t\tif(log.isInfoEnabled()) log.info(\"Group \" + group +\n    \t\t\t\" must have one and only one role with permission \" +\n    \t\t\tSectionAwareness.STUDENT_MARKER);\n    \t\treturn null;\n    \t}\n    \treturn (String)roleStrings.iterator().next();\n    }","commit_id":"5a98815dfa672acc6ba01201670f352fbd2f3d29","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private EnrollmentRecord addStudentToSection(String userUid, String sectionUuid) {\n\t\tUser user = SakaiUtil.getUserFromSakai(userUid);\n\n\t\tCourseSectionImpl newSection = (CourseSectionImpl)getSection(sectionUuid);\n\t\tGroup group = newSection.getGroup();\n\t\t\n\t\t// Remove any section membership for a section of the same category.\n\t\tdropEnrollmentFromCategory(userUid, newSection.getCourse().getSiteContext(), newSection.getCategory());\n\n\t\t// Add the membership to the framework\n\t\tgroup.addMember(userUid, getSectionStudentRole(group), true, false);\n\n\t\ttry {\n\t\t\tsiteService.saveGroupMembership(group.getContainingSite());\n\t\t\tpostEvent(\"Added \" + userUid + \" as a student in section\", sectionUuid);\n\t\t} catch (IdUnusedException e) {\n\t\t\tlog.error(\"unable to find site: \", e);\n\t\t\treturn null;\n\t\t} catch (PermissionException e) {\n\t\t\tlog.error(\"access denied while attempting to save site: \", e);\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t// Return the enrollment record\n\t\treturn new EnrollmentRecordImpl(newSection, null, user);\n    }","id":96347,"modified_method":"private EnrollmentRecord addStudentToSection(String userUid, String sectionUuid) {\n\t\tUser user = SakaiUtil.getUserFromSakai(userUid);\n\n\t\tCourseSectionImpl newSection = (CourseSectionImpl)getSection(sectionUuid);\n\t\tGroup group = newSection.getGroup();\n\t\t\n\t\t// Remove any section membership for a section of the same category.\n\t\tdropEnrollmentFromCategory(userUid, newSection.getCourse().getSiteContext(), newSection.getCategory());\n\n\t\t// Add the membership to the framework\n\t\tString studentRole = getSectionStudentRole(group);\n\t\tif(studentRole == null) {\n\t\t\tthrow new RuntimeException(\"Can't add a student to a section, since there is no student-flgagged role\");\n\t\t}\n\t\tgroup.addMember(userUid, studentRole, true, false);\n\n\t\ttry {\n\t\t\tsiteService.saveGroupMembership(group.getContainingSite());\n\t\t\tpostEvent(\"Added \" + userUid + \" as a student in section\", sectionUuid);\n\t\t} catch (IdUnusedException e) {\n\t\t\tlog.error(\"unable to find site: \", e);\n\t\t\treturn null;\n\t\t} catch (PermissionException e) {\n\t\t\tlog.error(\"access denied while attempting to save site: \", e);\n\t\t\treturn null;\n\t\t}\n\t\t\n\t\t// Return the enrollment record\n\t\treturn new EnrollmentRecordImpl(newSection, null, user);\n    }","commit_id":"5a98815dfa672acc6ba01201670f352fbd2f3d29","url":"https://github.com/sakaiproject/sakai"},{"original_method":"private String getSectionTaRole(Group group) {\n    \tSet roleStrings = group.getRolesIsAllowed(SectionAwareness.TA_MARKER);\n    \tif(roleStrings.size() != 1) {\n    \t\tString str = \"Group \" + group + \" must have one and only one role with permission \"\n\t\t\t+ SectionAwareness.TA_MARKER;\n    \t\tlog.error(str);\n    \t\tthrow new RuntimeException(str);\n    \t}\n    \treturn (String)roleStrings.iterator().next();\n    }","id":96348,"modified_method":"private String getSectionTaRole(Group group) {\n    \tSet roleStrings = group.getRolesIsAllowed(SectionAwareness.TA_MARKER);\n    \tif(roleStrings.size() != 1) {\n    \t\tif(log.isInfoEnabled()) log.info(\"Group \" + group +\n    \t\t\t\" must have one and only one role with permission \" +\n    \t\t\tSectionAwareness.TA_MARKER);\n    \t\treturn null;\n    \t}\n    \treturn (String)roleStrings.iterator().next();\n    }","commit_id":"5a98815dfa672acc6ba01201670f352fbd2f3d29","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n    * Test the stax parsing of the standalone-with-messaging.xml configuration\n    */\n   @Test\n   public void testStandaloneStaxParser() {\n      try {\n         final XMLMapper mapper = createXMLMapper();\n         URL configURL = getClass().getResource(\"/standalone-with-messaging.xml\");\n         Assert.assertNotNull(\"standalone-with-messaging.xml url is not null\", configURL);\n         System.out.println(\"configURL = \" + configURL);\n         BufferedReader reader = new BufferedReader(new InputStreamReader(configURL.openStream()));\n         List<AbstractServerModelUpdate<?>> updates = new ArrayList<AbstractServerModelUpdate<?>>();\n         mapper.parseDocument(updates, XMLInputFactory.newInstance().createXMLStreamReader(reader));\n\n         final ServerModel model = new ServerModel();\n         for(final AbstractServerModelUpdate<?> update : updates) {\n             model.update(update);\n         }\n         MessagingSubsystemElement subsystem = (MessagingSubsystemElement) model.getProfile().getSubsystem(Namespace.MESSAGING_1_0.getUriString());\n         Assert.assertNotNull(subsystem);\n\n         Assert.assertEquals(\"bindings-directory\", \"hornetq/bindings\", subsystem.getBindingsDirectory().getPath());\n         Assert.assertEquals(\"journal-type\", JournalType.NIO, subsystem.getJournalType());\n         Assert.assertEquals(\"journal-min-files\", 2, subsystem.getJournalMinFiles());\n         Assert.assertEquals(\"journal-file-size\", 102400, subsystem.getJournalFileSize());\n         Assert.assertEquals(\"paging-directory\", \"hornetq/paging\", subsystem.getPagingDirectory().getPath());\n         Map<String, Set<Role>> securityRoleMap = new HashMap<String, Set<Role>>();\n         for(SecuritySettingsElement sec : subsystem.getSecuritySettings()) {\n             securityRoleMap.put(sec.getMatch(), sec.getRoles());\n         }\n\n         // Security\n         Assert.assertEquals(\"1 security roles\", 1, securityRoleMap.size());\n         Set<Role> securityRoles = securityRoleMap.values().iterator().next();\n         Role expectedRole = new Role(\"guest\", true, true, false, false, true, true, false);\n         Set<Role> expectedRoles = new HashSet<Role>();\n         expectedRoles.add(expectedRole);\n         Assert.assertEquals(\"guest role\", expectedRoles, securityRoles);\n\n         // Connectors\n         final Map<String, AbstractTransportElement<?>> connectors = new HashMap<String, AbstractTransportElement<?>>();\n         for(AbstractTransportElement<?> connector : subsystem.getConnectors()) {\n             Assert.assertNotNull(connector.getName());\n             connectors.put(connector.getName(), connector);\n         }\n         Assert.assertEquals(\"4 connectors\", 4, connectors.size());\n\n         Assert.assertEquals(\"netty\", connectors.get(\"netty\").getSocketBindingRef());\n         Assert.assertEquals(\"netty-throughput\", connectors.get(\"netty-throughput\").getSocketBindingRef());\n         Assert.assertNull(connectors.get(\"in-vm\").getSocketBindingRef());\n\n         Assert.assertEquals(\"generic\", connectors.get(\"generic\").getSocketBindingRef());\n         Assert.assertEquals(\"org.jboss.test.ConnectorFactory\", connectors.get(\"generic\").getFactoryClassName());\n\n         // The expected acceptor configuration\n         final Map<String, AbstractTransportElement<?>> acceptors = new HashMap<String, AbstractTransportElement<?>>();\n         for(final AbstractTransportElement<?> acceptor : subsystem.getAcceptors()) {\n             Assert.assertNotNull(acceptor.getName());\n             acceptors.put(acceptor.getName(), acceptor);\n         }\n         Assert.assertEquals(\"4 acceptors\", 4, acceptors.size());\n\n         Assert.assertEquals(\"netty\", acceptors.get(\"netty\").getSocketBindingRef());\n         Assert.assertEquals(\"netty-throughput\", acceptors.get(\"netty-throughput\").getSocketBindingRef());\n         Assert.assertNull(acceptors.get(\"in-vm\").getSocketBindingRef());\n\n         Assert.assertEquals(\"generic\", acceptors.get(\"generic\").getSocketBindingRef());\n         Assert.assertEquals(\"org.jboss.test.AcceptorFactory\", acceptors.get(\"generic\").getFactoryClassName());\n      }\n      catch (Exception e) {\n         throw new RuntimeException(\"standalone-with-messaging.xml\", e);\n      }\n      finally {\n          //\n      }\n   }","id":96349,"modified_method":"/**\n    * Test the stax parsing of the standalone-with-messaging.xml configuration\n    */\n   @Test\n   public void testStandaloneStaxParser() {\n      try {\n         final XMLMapper mapper = createXMLMapper();\n         URL configURL = getClass().getResource(\"/standalone-with-messaging.xml\");\n         Assert.assertNotNull(\"standalone-with-messaging.xml url is not null\", configURL);\n         System.out.println(\"configURL = \" + configURL);\n         BufferedReader reader = new BufferedReader(new InputStreamReader(configURL.openStream()));\n         List<AbstractServerModelUpdate<?>> updates = new ArrayList<AbstractServerModelUpdate<?>>();\n         mapper.parseDocument(updates, XMLInputFactory.newInstance().createXMLStreamReader(reader));\n\n         final ServerModel model = new ServerModel();\n         for(final AbstractServerModelUpdate<?> update : updates) {\n             model.update(update);\n         }\n         MessagingSubsystemElement subsystem = (MessagingSubsystemElement) model.getProfile().getSubsystem(Namespace.MESSAGING_1_0.getUriString());\n         Assert.assertNotNull(subsystem);\n\n         Assert.assertFalse(subsystem.isPersistenceEnabled());\n         Assert.assertEquals(\"bindings-directory\", \"hornetq/bindings\", subsystem.getBindingsDirectory().getPath());\n         Assert.assertEquals(\"journal-type\", JournalType.NIO, subsystem.getJournalType());\n         Assert.assertEquals(\"journal-min-files\", 2, subsystem.getJournalMinFiles());\n         Assert.assertEquals(\"journal-file-size\", 102400, subsystem.getJournalFileSize());\n         Assert.assertEquals(\"paging-directory\", \"hornetq/paging\", subsystem.getPagingDirectory().getPath());\n         Map<String, Set<Role>> securityRoleMap = new HashMap<String, Set<Role>>();\n         for(SecuritySettingsElement sec : subsystem.getSecuritySettings()) {\n             securityRoleMap.put(sec.getMatch(), sec.getRoles());\n         }\n\n         // Security\n         Assert.assertEquals(\"1 security roles\", 1, securityRoleMap.size());\n         Set<Role> securityRoles = securityRoleMap.values().iterator().next();\n         Role expectedRole = new Role(\"guest\", true, true, false, false, true, true, false);\n         Set<Role> expectedRoles = new HashSet<Role>();\n         expectedRoles.add(expectedRole);\n         Assert.assertEquals(\"guest role\", expectedRoles, securityRoles);\n\n         // Connectors\n         final Map<String, AbstractTransportElement<?>> connectors = new HashMap<String, AbstractTransportElement<?>>();\n         for(AbstractTransportElement<?> connector : subsystem.getConnectors()) {\n             Assert.assertNotNull(connector.getName());\n             connectors.put(connector.getName(), connector);\n         }\n         Assert.assertEquals(\"4 connectors\", 4, connectors.size());\n\n         Assert.assertEquals(\"netty\", connectors.get(\"netty\").getSocketBindingRef());\n         Assert.assertEquals(\"netty-throughput\", connectors.get(\"netty-throughput\").getSocketBindingRef());\n         Assert.assertNull(connectors.get(\"in-vm\").getSocketBindingRef());\n\n         Assert.assertEquals(\"generic\", connectors.get(\"generic\").getSocketBindingRef());\n         Assert.assertEquals(\"org.jboss.test.ConnectorFactory\", connectors.get(\"generic\").getFactoryClassName());\n\n         // The expected acceptor configuration\n         final Map<String, AbstractTransportElement<?>> acceptors = new HashMap<String, AbstractTransportElement<?>>();\n         for(final AbstractTransportElement<?> acceptor : subsystem.getAcceptors()) {\n             Assert.assertNotNull(acceptor.getName());\n             acceptors.put(acceptor.getName(), acceptor);\n         }\n         Assert.assertEquals(\"4 acceptors\", 4, acceptors.size());\n\n         Assert.assertEquals(\"netty\", acceptors.get(\"netty\").getSocketBindingRef());\n         Assert.assertEquals(\"netty-throughput\", acceptors.get(\"netty-throughput\").getSocketBindingRef());\n         Assert.assertNull(acceptors.get(\"in-vm\").getSocketBindingRef());\n\n         Assert.assertEquals(\"generic\", acceptors.get(\"generic\").getSocketBindingRef());\n         Assert.assertEquals(\"org.jboss.test.AcceptorFactory\", acceptors.get(\"generic\").getFactoryClassName());\n      }\n      catch (Exception e) {\n         throw new RuntimeException(\"standalone-with-messaging.xml\", e);\n      }\n      finally {\n          //\n      }\n   }","commit_id":"6cdd64bc61fe51265cbb4e3f63583d6f1259b46d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected MessagingSubsystemElement createSubsystemElement() {\n        final MessagingSubsystemElement element = new MessagingSubsystemElement();\n        if (bindingsDirectory != null) element.setBindingsDirectory(getBindingsDirectory());\n        if (journalDirectory != null) element.setJournalDirectory(getJournalDirectory());\n        if (largeMessagesDirectory != null) element.setLargeMessagesDirectory(getLargeMessagesDirectory());\n        if (pagingDirectory != null) element.setPagingDirectory(getPagingDirectory());\n        if (clustered != null) element.setClustered(isClustered());\n        if (journalMinFiles != null) element.setJournalMinFiles(getJournalMinFiles());\n        if (journalFileSize != null) element.setJournalFileSize(getJournalFileSize());\n        if (journalType != null) element.setJournalType(getJournalType());\n\n        for (AbstractTransportElement<?> acceptorSpec : acceptors) {\n            element.addAcceptor(acceptorSpec);\n        }\n        for (AddressSettingsElement addressSpec : addressSettings) {\n            element.addAddressSettings(addressSpec);\n        }\n        for (AbstractTransportElement<?> connectorSpec : connectors) {\n            element.addConnector(connectorSpec);\n        }\n        for (SecuritySettingsElement securitySetting : securitySettings) {\n            element.addSecuritySetting(securitySetting);\n        }\n        for(QueueElement queue : queues) {\n            element.addQueue(queue);\n        }\n        return element;\n    }","id":96350,"modified_method":"@Override\n    protected MessagingSubsystemElement createSubsystemElement() {\n        final MessagingSubsystemElement element = new MessagingSubsystemElement();\n        if (bindingsDirectory != null) element.setBindingsDirectory(getBindingsDirectory());\n        if (journalDirectory != null) element.setJournalDirectory(getJournalDirectory());\n        if (largeMessagesDirectory != null) element.setLargeMessagesDirectory(getLargeMessagesDirectory());\n        if (pagingDirectory != null) element.setPagingDirectory(getPagingDirectory());\n        if (clustered != null) element.setClustered(isClustered());\n        if (persistenceEnabled != null) element.setPersistenceEnabled(persistenceEnabled);\n        if (journalMinFiles != null) element.setJournalMinFiles(getJournalMinFiles());\n        if (journalFileSize != null) element.setJournalFileSize(getJournalFileSize());\n        if (journalType != null) element.setJournalType(getJournalType());\n\n        for (AbstractTransportElement<?> acceptorSpec : acceptors) {\n            element.addAcceptor(acceptorSpec);\n        }\n        for (AddressSettingsElement addressSpec : addressSettings) {\n            element.addAddressSettings(addressSpec);\n        }\n        for (AbstractTransportElement<?> connectorSpec : connectors) {\n            element.addConnector(connectorSpec);\n        }\n        for (SecuritySettingsElement securitySetting : securitySettings) {\n            element.addSecuritySetting(securitySetting);\n        }\n        for(QueueElement queue : queues) {\n            element.addQueue(queue);\n        }\n        return element;\n    }","commit_id":"6cdd64bc61fe51265cbb4e3f63583d6f1259b46d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected <P> void applyUpdate(UpdateContext updateContext, UpdateResultHandler<? super Void, P> resultHandler, P param) {\n        final HornetQService hqservice = new HornetQService();\n        final Configuration hqConfig = new ConfigurationImpl();\n\n        if (clustered != null) {\n            hqConfig.setClustered(clustered);\n        }\n        if (journalMinFiles != null) {\n            hqConfig.setJournalMinFiles(journalMinFiles);\n        }\n        if (journalFileSize != null) {\n            hqConfig.setJournalFileSize(journalFileSize);\n        }\n        if (journalType != null) {\n            hqConfig.setJournalType(journalType);\n        }\n\n        // Configure address settings\n        final Map<String, AddressSettings> configAddressSettings = hqConfig.getAddressesSettings();\n        for(AddressSettingsElement addressSpec : addressSettings) {\n            final AddressSettings settings = new AddressSettings();\n            settings.setAddressFullMessagePolicy(addressSpec.getAddressFullMessagePolicy());\n            settings.setDeadLetterAddress(addressSpec.getDeadLetterAddress());\n            settings.setExpiryAddress(addressSpec.getExpiryAddress());\n            if (addressSpec.isLastValueQueue() != null) {\n                settings.setLastValueQueue(addressSpec.isLastValueQueue());\n            }\n            if (addressSpec.getMaxDeliveryAttempts() != null) {\n                settings.setMaxDeliveryAttempts(addressSpec.getMaxDeliveryAttempts());\n            }\n            if (addressSpec.getMaxSizeBytes() != null) {\n                settings.setMaxSizeBytes(addressSpec.getMaxSizeBytes());\n            }\n            if (addressSpec.getMessageCounterHistoryDayLimit() != null) {\n                settings.setMessageCounterHistoryDayLimit(addressSpec.getMessageCounterHistoryDayLimit());\n            }\n            if (addressSpec.getPageSizeBytes() != null) {\n                settings.setPageSizeBytes(addressSpec.getPageSizeBytes());\n            }\n            if (addressSpec.getRedeliveryDelay() != null) {\n                settings.setRedeliveryDelay(addressSpec.getRedeliveryDelay());\n            }\n            if (addressSpec.getRedistributionDelay() != null) {\n                settings.setRedistributionDelay(addressSpec.getRedistributionDelay());\n            }\n            if (addressSpec.isSendToDLAOnNoRoute() != null) {\n                settings.setSendToDLAOnNoRoute(addressSpec.isSendToDLAOnNoRoute());\n            }\n            configAddressSettings.put(addressSpec.getMatch(), settings);\n        }\n        //  Configure security roles\n        final Map<String, Set<Role>> hqSecurityRoles = hqConfig.getSecurityRoles();\n        for(SecuritySettingsElement securitySetting : securitySettings) {\n            hqSecurityRoles.put(securitySetting.getMatch(), securitySetting.getRoles());\n        }\n\n        // Configure queues\n        for(final QueueElement queue : queues) {\n            hqConfig.getQueueConfigurations().add(new CoreQueueConfiguration(queue.getAddress(), queue.getName(), queue.getFilter(), queue.isDurable()));\n        }\n\n        hqservice.setConfiguration(hqConfig);\n\n        final BatchBuilder batchBuilder = updateContext.getBatchBuilder();\n        final BatchServiceBuilder<HornetQServer> serviceBuilder = batchBuilder.addService(MessagingSubsystemElement.JBOSS_MESSAGING, hqservice);\n\n        // Create path services\n        createRelativePathService(\"bindings\", bindingsDirectory, batchBuilder);\n        addPathDependency(\"bindings\", hqservice, serviceBuilder);\n        createRelativePathService(\"journal\", journalDirectory, batchBuilder);\n        addPathDependency(\"journal\", hqservice, serviceBuilder);\n        createRelativePathService(\"largemessages\", largeMessagesDirectory, batchBuilder);\n        addPathDependency(\"largemessages\", hqservice, serviceBuilder);\n        createRelativePathService(\"paging\", pagingDirectory, batchBuilder);\n        addPathDependency(\"paging\", hqservice, serviceBuilder);\n\n        final Map<String, TransportConfiguration> connectors = hqConfig.getConnectorConfigurations();\n        for(AbstractTransportElement<?> connectorSpec : this.connectors) {\n            final TransportConfiguration transport = new TransportConfiguration(connectorSpec.getFactoryClassName(), new HashMap<String, Object>(), connectorSpec.getName());\n            // Process parameters\n            connectorSpec.processHQConfig(transport);\n            connectors.put(connectorSpec.getName(), transport);\n            // Add a dependency on a SocketBinding if there is a socket-ref\n            final String socketRef = connectorSpec.getSocketBindingRef();\n            if (socketRef != null) {\n                final ServiceName socketName = SocketBinding.JBOSS_BINDING_NAME.append(socketRef);\n                serviceBuilder.addDependency(socketName, SocketBinding.class, hqservice.getSocketBindingInjector(socketRef));\n            }\n        }\n\n        final Collection<TransportConfiguration> acceptors = hqConfig.getAcceptorConfigurations();\n        for(AbstractTransportElement<?> acceptorSpec : this.acceptors) {\n            final TransportConfiguration transport = new TransportConfiguration(acceptorSpec.getFactoryClassName(), new HashMap<String, Object>(), acceptorSpec.getName());\n            // Process parameters\n            acceptorSpec.processHQConfig(transport);\n            acceptors.add(transport);\n            // Add a dependency on a SocketBinding if there is a socket-ref\n            final String socketRef = acceptorSpec.getSocketBindingRef();\n            if (socketRef != null) {\n                final ServiceName socketName = SocketBinding.JBOSS_BINDING_NAME.append(socketRef);\n                serviceBuilder.addDependency(socketName, SocketBinding.class, hqservice.getSocketBindingInjector(socketRef));\n            }\n        }\n        serviceBuilder.setInitialMode(ServiceController.Mode.IMMEDIATE);\n    }","id":96351,"modified_method":"@Override\n    protected <P> void applyUpdate(UpdateContext updateContext, UpdateResultHandler<? super Void, P> resultHandler, P param) {\n        final HornetQService hqservice = new HornetQService();\n        final Configuration hqConfig = new ConfigurationImpl();\n\n        if (clustered != null) {\n            hqConfig.setClustered(clustered);\n        }\n        if (journalMinFiles != null) {\n            hqConfig.setJournalMinFiles(journalMinFiles);\n        }\n        if (journalFileSize != null) {\n            hqConfig.setJournalFileSize(journalFileSize);\n        }\n        if (journalType != null) {\n            hqConfig.setJournalType(journalType);\n        }\n        if(persistenceEnabled != null) {\n            hqConfig.setPersistenceEnabled(persistenceEnabled);\n        }\n\n        // Configure address settings\n        final Map<String, AddressSettings> configAddressSettings = hqConfig.getAddressesSettings();\n        for(AddressSettingsElement addressSpec : addressSettings) {\n            final AddressSettings settings = new AddressSettings();\n            settings.setAddressFullMessagePolicy(addressSpec.getAddressFullMessagePolicy());\n            settings.setDeadLetterAddress(addressSpec.getDeadLetterAddress());\n            settings.setExpiryAddress(addressSpec.getExpiryAddress());\n            if (addressSpec.isLastValueQueue() != null) {\n                settings.setLastValueQueue(addressSpec.isLastValueQueue());\n            }\n            if (addressSpec.getMaxDeliveryAttempts() != null) {\n                settings.setMaxDeliveryAttempts(addressSpec.getMaxDeliveryAttempts());\n            }\n            if (addressSpec.getMaxSizeBytes() != null) {\n                settings.setMaxSizeBytes(addressSpec.getMaxSizeBytes());\n            }\n            if (addressSpec.getMessageCounterHistoryDayLimit() != null) {\n                settings.setMessageCounterHistoryDayLimit(addressSpec.getMessageCounterHistoryDayLimit());\n            }\n            if (addressSpec.getPageSizeBytes() != null) {\n                settings.setPageSizeBytes(addressSpec.getPageSizeBytes());\n            }\n            if (addressSpec.getRedeliveryDelay() != null) {\n                settings.setRedeliveryDelay(addressSpec.getRedeliveryDelay());\n            }\n            if (addressSpec.getRedistributionDelay() != null) {\n                settings.setRedistributionDelay(addressSpec.getRedistributionDelay());\n            }\n            if (addressSpec.isSendToDLAOnNoRoute() != null) {\n                settings.setSendToDLAOnNoRoute(addressSpec.isSendToDLAOnNoRoute());\n            }\n            configAddressSettings.put(addressSpec.getMatch(), settings);\n        }\n        //  Configure security roles\n        final Map<String, Set<Role>> hqSecurityRoles = hqConfig.getSecurityRoles();\n        for(SecuritySettingsElement securitySetting : securitySettings) {\n            hqSecurityRoles.put(securitySetting.getMatch(), securitySetting.getRoles());\n        }\n\n        // Configure queues\n        for(final QueueElement queue : queues) {\n            hqConfig.getQueueConfigurations().add(new CoreQueueConfiguration(queue.getAddress(), queue.getName(), queue.getFilter(), queue.isDurable()));\n        }\n\n        hqservice.setConfiguration(hqConfig);\n\n        final BatchBuilder batchBuilder = updateContext.getBatchBuilder();\n        final BatchServiceBuilder<HornetQServer> serviceBuilder = batchBuilder.addService(MessagingSubsystemElement.JBOSS_MESSAGING, hqservice);\n\n        // Create path services\n        createRelativePathService(\"bindings\", bindingsDirectory, batchBuilder);\n        addPathDependency(\"bindings\", hqservice, serviceBuilder);\n        createRelativePathService(\"journal\", journalDirectory, batchBuilder);\n        addPathDependency(\"journal\", hqservice, serviceBuilder);\n        createRelativePathService(\"largemessages\", largeMessagesDirectory, batchBuilder);\n        addPathDependency(\"largemessages\", hqservice, serviceBuilder);\n        createRelativePathService(\"paging\", pagingDirectory, batchBuilder);\n        addPathDependency(\"paging\", hqservice, serviceBuilder);\n\n        final Map<String, TransportConfiguration> connectors = hqConfig.getConnectorConfigurations();\n        for(AbstractTransportElement<?> connectorSpec : this.connectors) {\n            final TransportConfiguration transport = new TransportConfiguration(connectorSpec.getFactoryClassName(), new HashMap<String, Object>(), connectorSpec.getName());\n            // Process parameters\n            connectorSpec.processHQConfig(transport);\n            connectors.put(connectorSpec.getName(), transport);\n            // Add a dependency on a SocketBinding if there is a socket-ref\n            final String socketRef = connectorSpec.getSocketBindingRef();\n            if (socketRef != null) {\n                final ServiceName socketName = SocketBinding.JBOSS_BINDING_NAME.append(socketRef);\n                serviceBuilder.addDependency(socketName, SocketBinding.class, hqservice.getSocketBindingInjector(socketRef));\n            }\n        }\n\n        final Collection<TransportConfiguration> acceptors = hqConfig.getAcceptorConfigurations();\n        for(AbstractTransportElement<?> acceptorSpec : this.acceptors) {\n            final TransportConfiguration transport = new TransportConfiguration(acceptorSpec.getFactoryClassName(), new HashMap<String, Object>(), acceptorSpec.getName());\n            // Process parameters\n            acceptorSpec.processHQConfig(transport);\n            acceptors.add(transport);\n            // Add a dependency on a SocketBinding if there is a socket-ref\n            final String socketRef = acceptorSpec.getSocketBindingRef();\n            if (socketRef != null) {\n                final ServiceName socketName = SocketBinding.JBOSS_BINDING_NAME.append(socketRef);\n                serviceBuilder.addDependency(socketName, SocketBinding.class, hqservice.getSocketBindingInjector(socketRef));\n            }\n        }\n        serviceBuilder.setInitialMode(ServiceController.Mode.IMMEDIATE);\n    }","commit_id":"6cdd64bc61fe51265cbb4e3f63583d6f1259b46d","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public void writeContent(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {\n\n        if (bindingsDirectory != null) {\n            streamWriter.writeEmptyElement(Element.BINDINGS_DIRECTORY.getLocalName());\n            bindingsDirectory.writeContent(streamWriter);\n        }\n        if (largeMessagesDirectory != null) {\n            streamWriter.writeEmptyElement(Element.LARGE_MESSAGES_DIRECTORY.getLocalName());\n            largeMessagesDirectory.writeContent(streamWriter);\n        }\n        if (pagingDirectory != null) {\n            streamWriter.writeEmptyElement(Element.PAGING_DIRECTORY.getLocalName());\n            pagingDirectory.writeContent(streamWriter);\n        }\n        if (journalDirectory != null) {\n            streamWriter.writeEmptyElement(Element.JOURNAL_DIRECTORY.getLocalName());\n            journalDirectory.writeContent(streamWriter);\n        }\n\n        // Note we have to write this even if it wasn't in the original content\n        // since the \"null\" possibility isn't preserved\n        ElementUtils.writeSimpleElement(Element.CLUSTERED, String.valueOf(isClustered()), streamWriter);\n\n        // Note we have to write this even if it wasn't in the original content\n        // since the \"null\" possibility isn't preserved\n        ElementUtils.writeSimpleElement(Element.JOURNAL_MIN_FILES, String.valueOf(getJournalMinFiles()), streamWriter);\n\n        JournalType jt = getJournalType();\n        if (jt != null) {\n            ElementUtils.writeSimpleElement(Element.JOURNAL_TYPE, jt.toString(), streamWriter);\n        }\n\n        // Note we have to write this even if it wasn't in the original content\n        // since the \"null\" possibility isn't preserved\n        ElementUtils.writeSimpleElement(Element.JOURNAL_FILE_SIZE, String.valueOf(getJournalFileSize()), streamWriter);\n\n        if (connectors.size() > 0) {\n            streamWriter.writeStartElement(Element.CONNECTORS.getLocalName());\n            for (AbstractTransportElement<?> connector : connectors.values()) {\n                streamWriter.writeStartElement(connector.getElement().getLocalName());\n                connector.writeContent(streamWriter);\n            }\n            streamWriter.writeEndElement();\n        }\n\n        if (acceptors.size() > 0) {\n            streamWriter.writeStartElement(Element.ACCEPTORS.getLocalName());\n            for (AbstractTransportElement<?> acceptor : acceptors.values()) {\n                streamWriter.writeStartElement(acceptor.getElement().getLocalName());\n                acceptor.writeContent(streamWriter);\n            }\n            streamWriter.writeEndElement();\n        }\n\n        if(queues.size() > 0) {\n            streamWriter.writeStartElement(Element.QUEUES.getLocalName());\n            for(QueueElement queue : queues.values()) {\n                streamWriter.writeStartElement(Element.QUEUE.getLocalName());\n                queue.writeContent(streamWriter);\n            }\n        }\n\n        if (addressSettings.size() > 0) {\n            streamWriter.writeStartElement(Element.ADDRESS_SETTINGS.getLocalName());\n            for (AddressSettingsElement addressSettingsElement : addressSettings.values()) {\n                streamWriter.writeStartElement(Element.ADDRESS_SETTING.getLocalName());\n                addressSettingsElement.writeContent(streamWriter);\n            }\n            streamWriter.writeEndElement();\n        }\n\n        if (securitySettings.size() > 0) {\n            streamWriter.writeStartElement(Element.SECURITY_SETTINGS.getLocalName());\n            for (SecuritySettingsElement securitySettingElement : securitySettings.values()) {\n                streamWriter.writeStartElement(Element.SECURITY_SETTING.getLocalName());\n                securitySettingElement.writeContent(streamWriter);\n            }\n            streamWriter.writeEndElement();\n        }\n\n        streamWriter.writeEndElement();\n    }","id":96352,"modified_method":"/**\n     * {@inheritDoc}\n     */\n    @Override\n    public void writeContent(final XMLExtendedStreamWriter streamWriter) throws XMLStreamException {\n\n        if (bindingsDirectory != null) {\n            streamWriter.writeEmptyElement(Element.BINDINGS_DIRECTORY.getLocalName());\n            bindingsDirectory.writeContent(streamWriter);\n        }\n        if (largeMessagesDirectory != null) {\n            streamWriter.writeEmptyElement(Element.LARGE_MESSAGES_DIRECTORY.getLocalName());\n            largeMessagesDirectory.writeContent(streamWriter);\n        }\n        if (pagingDirectory != null) {\n            streamWriter.writeEmptyElement(Element.PAGING_DIRECTORY.getLocalName());\n            pagingDirectory.writeContent(streamWriter);\n        }\n        if (journalDirectory != null) {\n            streamWriter.writeEmptyElement(Element.JOURNAL_DIRECTORY.getLocalName());\n            journalDirectory.writeContent(streamWriter);\n        }\n        if(persistenceEnabled != null) {\n            ElementUtils.writeSimpleElement(Element.PERSISTENCE_ENABLED, String.valueOf(persistenceEnabled), streamWriter);\n        }\n        if(clustered != null) {\n            ElementUtils.writeSimpleElement(Element.CLUSTERED, String.valueOf(isClustered()), streamWriter);\n        }\n\n        if(journalMinFiles != -1) {\n            ElementUtils.writeSimpleElement(Element.JOURNAL_MIN_FILES, String.valueOf(getJournalMinFiles()), streamWriter);\n        }\n\n        JournalType jt = getJournalType();\n        if (jt != null) {\n            ElementUtils.writeSimpleElement(Element.JOURNAL_TYPE, jt.toString(), streamWriter);\n        }\n\n        if(journalFileSize != -1) {\n            ElementUtils.writeSimpleElement(Element.JOURNAL_FILE_SIZE, String.valueOf(getJournalFileSize()), streamWriter);\n        }\n\n        if (connectors.size() > 0) {\n            streamWriter.writeStartElement(Element.CONNECTORS.getLocalName());\n            for (AbstractTransportElement<?> connector : connectors.values()) {\n                streamWriter.writeStartElement(connector.getElement().getLocalName());\n                connector.writeContent(streamWriter);\n            }\n            streamWriter.writeEndElement();\n        }\n\n        if (acceptors.size() > 0) {\n            streamWriter.writeStartElement(Element.ACCEPTORS.getLocalName());\n            for (AbstractTransportElement<?> acceptor : acceptors.values()) {\n                streamWriter.writeStartElement(acceptor.getElement().getLocalName());\n                acceptor.writeContent(streamWriter);\n            }\n            streamWriter.writeEndElement();\n        }\n\n        if(queues.size() > 0) {\n            streamWriter.writeStartElement(Element.QUEUES.getLocalName());\n            for(QueueElement queue : queues.values()) {\n                streamWriter.writeStartElement(Element.QUEUE.getLocalName());\n                queue.writeContent(streamWriter);\n            }\n        }\n\n        if (addressSettings.size() > 0) {\n            streamWriter.writeStartElement(Element.ADDRESS_SETTINGS.getLocalName());\n            for (AddressSettingsElement addressSettingsElement : addressSettings.values()) {\n                streamWriter.writeStartElement(Element.ADDRESS_SETTING.getLocalName());\n                addressSettingsElement.writeContent(streamWriter);\n            }\n            streamWriter.writeEndElement();\n        }\n\n        if (securitySettings.size() > 0) {\n            streamWriter.writeStartElement(Element.SECURITY_SETTINGS.getLocalName());\n            for (SecuritySettingsElement securitySettingElement : securitySettings.values()) {\n                streamWriter.writeStartElement(Element.SECURITY_SETTING.getLocalName());\n                securitySettingElement.writeContent(streamWriter);\n            }\n            streamWriter.writeEndElement();\n        }\n\n        streamWriter.writeEndElement();\n    }","commit_id":"6cdd64bc61fe51265cbb4e3f63583d6f1259b46d","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void readElement(final XMLExtendedStreamReader reader, final ParseResult<ExtensionContext.SubsystemConfiguration<MessagingSubsystemElement>> result) throws XMLStreamException {\n\n        final List<AbstractSubsystemUpdate<MessagingSubsystemElement, ?>> updates = new ArrayList<AbstractSubsystemUpdate<MessagingSubsystemElement,?>>();\n        final MessagingSubsystemAdd messagingSubsystemAdd = new MessagingSubsystemAdd();\n\n        // Handle elements\n        int tag = reader.getEventType();\n        String localName = null;\n        do {\n            tag = reader.nextTag();\n            localName = reader.getLocalName();\n            final Element element = Element.forName(reader.getLocalName());\n            log.tracef(\"%s -> %s, event=%s\", localName, element, ElementUtils.StaxEvent.tagToEvent(tag));\n            switch (element) {\n                case ACCEPTORS:\n                    // add acceptors\n                    processAcceptors(reader, messagingSubsystemAdd);\n                    break;\n                case ADDRESS_SETTINGS:\n                    // add address settings\n                    processAddressSettings(reader, messagingSubsystemAdd);\n                    break;\n                case ASYNC_CONNECTION_EXECUTION_ENABLED:\n                    unhandledElement(reader, element);\n                    break;\n                case BACKUP:\n                    unhandledElement(reader, element);\n                    break;\n                case BACKUP_CONNECTOR_REF:\n                    unhandledElement(reader, element);\n                    break;\n                case BINDINGS_DIRECTORY: {\n                    final DirectoryElement dir = parseDirectory(reader);\n                    messagingSubsystemAdd.setBindingsDirectory(dir);\n                }\n                    break;\n                case BROADCAST_PERIOD:\n                    unhandledElement(reader, element);\n                    break;\n                case CLUSTERED: {\n                    String text = reader.getElementText();\n                    if (text != null && text.length() > 0) {\n                        messagingSubsystemAdd.setClustered(Boolean.getBoolean(text.trim()));\n                    }\n                }\n                    break;\n                case CLUSTER_PASSWORD:\n                    unhandledElement(reader, element);\n                    break;\n                case CLUSTER_USER:\n                    unhandledElement(reader, element);\n                    break;\n                case CONNECTION_TTL_OVERRIDE:\n                    unhandledElement(reader, element);\n                    break;\n                case CONNECTORS:\n                    // process connectors\n                    processConnectors(reader, messagingSubsystemAdd);\n                    break;\n                case CONNECTOR_REF:\n                    unhandledElement(reader, element);\n                    break;\n                case CREATE_BINDINGS_DIR:\n                    unhandledElement(reader, element);\n                    break;\n                case CREATE_JOURNAL_DIR:\n                    unhandledElement(reader, element);\n                    break;\n                case FILE_DEPLOYMENT_ENABLED:\n                    unhandledElement(reader, element);\n                    break;\n                case GROUP_ADDRESS:\n                    unhandledElement(reader, element);\n                    break;\n                case GROUP_PORT:\n                    unhandledElement(reader, element);\n                    break;\n                case GROUPING_HANDLER:\n                    unhandledElement(reader, element);\n                    break;\n                case ID_CACHE_SIZE:\n                    unhandledElement(reader, element);\n                    break;\n                case JMX_DOMAIN:\n                    unhandledElement(reader, element);\n                    break;\n                case JMX_MANAGEMENT_ENABLED:\n                    unhandledElement(reader, element);\n                    break;\n                case JOURNAL_BUFFER_SIZE:\n                    unhandledElement(reader, element);\n                    break;\n                case JOURNAL_BUFFER_TIMEOUT:\n                    unhandledElement(reader, element);\n                    break;\n                case JOURNAL_COMPACT_MIN_FILES:\n                    unhandledElement(reader, element);\n                    break;\n                case JOURNAL_COMPACT_PERCENTAGE:\n                    unhandledElement(reader, element);\n                    break;\n                case JOURNAL_DIRECTORY: {\n                    final DirectoryElement dir = parseDirectory(reader);\n                    messagingSubsystemAdd.setJournalDirectory(dir);\n                }\n                    break;\n                case JOURNAL_MIN_FILES: {\n                    String text = reader.getElementText();\n                    if (text != null && text.length() > 0) {\n                        messagingSubsystemAdd.setJournalMinFiles(Integer.valueOf(text.trim()));\n                    }\n                }\n                    break;\n                case JOURNAL_SYNC_NON_TRANSACTIONAL:\n                    unhandledElement(reader, element);\n                    break;\n                case JOURNAL_SYNC_TRANSACTIONAL:\n                    unhandledElement(reader, element);\n                    break;\n                case JOURNAL_TYPE: {\n                    String text = reader.getElementText();\n                    if (text != null && text.length() > 0) {\n                        JournalType jtype = JournalType.valueOf(text.trim());\n                        messagingSubsystemAdd.setJournalType(jtype);\n                    }\n                }\n                    break;\n                case JOURNAL_FILE_SIZE: {\n                    String text = reader.getElementText();\n                    if (text != null && text.length() > 0) {\n                        int size = Integer.valueOf(text.trim());\n                        messagingSubsystemAdd.setJournalFileSize(size);\n                    }\n                }\n                    break;\n                case JOURNAL_MAX_IO:\n                    unhandledElement(reader, element);\n                    break;\n                case LARGE_MESSAGES_DIRECTORY: {\n                    final DirectoryElement dir = parseDirectory(reader);\n                    messagingSubsystemAdd.setLargeMessagesDirectory(dir);\n                }\n                    break;\n                case LOCAL_BIND_ADDRESS:\n                    unhandledElement(reader, element);\n                    break;\n                case LOCAL_BIND_PORT:\n                    unhandledElement(reader, element);\n                    break;\n                case LOG_JOURNAL_WRITE_RATE:\n                    unhandledElement(reader, element);\n                    break;\n                case MANAGEMENT_ADDRESS:\n                    unhandledElement(reader, element);\n                    break;\n                case MANAGEMENT_NOTIFICATION_ADDRESS:\n                    unhandledElement(reader, element);\n                    break;\n                case MEMORY_MEASURE_INTERVAL:\n                    unhandledElement(reader, element);\n                    break;\n                case MEMORY_WARNING_THRESHOLD:\n                    unhandledElement(reader, element);\n                    break;\n                case MESSAGE_COUNTER_ENABLED:\n                    unhandledElement(reader, element);\n                    break;\n                case MESSAGE_COUNTER_MAX_DAY_HISTORY:\n                    unhandledElement(reader, element);\n                    break;\n                case MESSAGE_COUNTER_SAMPLE_PERIOD:\n                    unhandledElement(reader, element);\n                    break;\n                case MESSAGE_EXPIRY_SCAN_PERIOD:\n                    unhandledElement(reader, element);\n                    break;\n                case MESSAGE_EXPIRY_THREAD_PRIORITY:\n                    unhandledElement(reader, element);\n                    break;\n                case PAGING_DIRECTORY: {\n                    final DirectoryElement dir = parseDirectory(reader);\n                    messagingSubsystemAdd.setPagingDirectory(dir);\n                }\n                    break;\n                case PERF_BLAST_PAGES:\n                    unhandledElement(reader, element);\n                    break;\n                case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:\n                    unhandledElement(reader, element);\n                    break;\n                case PERSIST_ID_CACHE:\n                    unhandledElement(reader, element);\n                    break;\n                case PERSISTENCE_ENABLED:\n                    unhandledElement(reader, element);\n                    break;\n                case REFRESH_TIMEOUT:\n                    unhandledElement(reader, element);\n                    break;\n                case REMOTING_INTERCEPTORS:\n                    unhandledElement(reader, element);\n                    break;\n                case RUN_SYNC_SPEED_TEST:\n                    unhandledElement(reader, element);\n                    break;\n                case SECURITY_ENABLED:\n                    unhandledElement(reader, element);\n                    break;\n                case SECURITY_INVALIDATION_INTERVAL:\n                    unhandledElement(reader, element);\n                    break;\n                case SECURITY_SETTINGS:\n                    // process security settings\n                    processSecuritySettings(reader, messagingSubsystemAdd);\n                    break;\n                case SERVER_DUMP_INTERVAL:\n                    unhandledElement(reader, element);\n                    break;\n                case SHARED_STORE:\n                    unhandledElement(reader, element);\n                    break;\n                case TRANSACTION_TIMEOUT:\n                    unhandledElement(reader, element);\n                    break;\n                case TRANSACTION_TIMEOUT_SCAN_PERIOD:\n                    unhandledElement(reader, element);\n                    break;\n                case WILD_CARD_ROUTING_ENABLED:\n                    unhandledElement(reader, element);\n                    break;\n                case DEAD_LETTER_ADDRESS_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case EXPIRY_ADDRESS_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case REDELIVERY_DELAY_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case MAX_DELIVERY_ATTEMPTS:\n                    unhandledElement(reader, element);\n                    break;\n                case MAX_SIZE_BYTES_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case PAGE_SIZE_BYTES_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case LVQ_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case REDISTRIBUTION_DELAY_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case SEND_TO_DLA_ON_NO_ROUTE:\n                    unhandledElement(reader, element);\n                    break;\n                case QUEUES:\n                    parseQueues(reader, messagingSubsystemAdd);\n                    break;\n                case SUBSYSTEM:\n                    // The end of the subsystem element\n                    break;\n                default:\n                    throw ParseUtils.unexpectedElement(reader);\n            }\n        } while (reader.hasNext() && localName.equals(\"subsystem\") == false);\n\n        result.setResult(new ExtensionContext.SubsystemConfiguration<MessagingSubsystemElement>(messagingSubsystemAdd, updates));\n\n        // Set the log delegate\n        // config.setLogDelegateFactoryClassName();\n        log.tracef(\"End %s:%s\", reader.getLocation(), reader.getLocalName());\n    }","id":96353,"modified_method":"public void readElement(final XMLExtendedStreamReader reader, final ParseResult<ExtensionContext.SubsystemConfiguration<MessagingSubsystemElement>> result) throws XMLStreamException {\n\n        final List<AbstractSubsystemUpdate<MessagingSubsystemElement, ?>> updates = new ArrayList<AbstractSubsystemUpdate<MessagingSubsystemElement,?>>();\n        final MessagingSubsystemAdd messagingSubsystemAdd = new MessagingSubsystemAdd();\n\n        // Handle elements\n        int tag = reader.getEventType();\n        String localName = null;\n        do {\n            tag = reader.nextTag();\n            localName = reader.getLocalName();\n            final Element element = Element.forName(reader.getLocalName());\n            log.tracef(\"%s -> %s, event=%s\", localName, element, ElementUtils.StaxEvent.tagToEvent(tag));\n            switch (element) {\n                case ACCEPTORS:\n                    // add acceptors\n                    processAcceptors(reader, messagingSubsystemAdd);\n                    break;\n                case ADDRESS_SETTINGS:\n                    // add address settings\n                    processAddressSettings(reader, messagingSubsystemAdd);\n                    break;\n                case ASYNC_CONNECTION_EXECUTION_ENABLED:\n                    unhandledElement(reader, element);\n                    break;\n                case BACKUP:\n                    unhandledElement(reader, element);\n                    break;\n                case BACKUP_CONNECTOR_REF:\n                    unhandledElement(reader, element);\n                    break;\n                case BINDINGS_DIRECTORY: {\n                    final DirectoryElement dir = parseDirectory(reader);\n                    messagingSubsystemAdd.setBindingsDirectory(dir);\n                }\n                    break;\n                case BROADCAST_PERIOD:\n                    unhandledElement(reader, element);\n                    break;\n                case CLUSTERED: {\n                    String text = reader.getElementText();\n                    if (text != null && text.length() > 0) {\n                        messagingSubsystemAdd.setClustered(Boolean.getBoolean(text.trim()));\n                    }\n                }\n                    break;\n                case CLUSTER_PASSWORD:\n                    unhandledElement(reader, element);\n                    break;\n                case CLUSTER_USER:\n                    unhandledElement(reader, element);\n                    break;\n                case CONNECTION_TTL_OVERRIDE:\n                    unhandledElement(reader, element);\n                    break;\n                case CONNECTORS:\n                    // process connectors\n                    processConnectors(reader, messagingSubsystemAdd);\n                    break;\n                case CONNECTOR_REF:\n                    unhandledElement(reader, element);\n                    break;\n                case CREATE_BINDINGS_DIR:\n                    unhandledElement(reader, element);\n                    break;\n                case CREATE_JOURNAL_DIR:\n                    unhandledElement(reader, element);\n                    break;\n                case FILE_DEPLOYMENT_ENABLED:\n                    unhandledElement(reader, element);\n                    break;\n                case GROUP_ADDRESS:\n                    unhandledElement(reader, element);\n                    break;\n                case GROUP_PORT:\n                    unhandledElement(reader, element);\n                    break;\n                case GROUPING_HANDLER:\n                    unhandledElement(reader, element);\n                    break;\n                case ID_CACHE_SIZE:\n                    unhandledElement(reader, element);\n                    break;\n                case JMX_DOMAIN:\n                    unhandledElement(reader, element);\n                    break;\n                case JMX_MANAGEMENT_ENABLED:\n                    unhandledElement(reader, element);\n                    break;\n                case JOURNAL_BUFFER_SIZE:\n                    unhandledElement(reader, element);\n                    break;\n                case JOURNAL_BUFFER_TIMEOUT:\n                    unhandledElement(reader, element);\n                    break;\n                case JOURNAL_COMPACT_MIN_FILES:\n                    unhandledElement(reader, element);\n                    break;\n                case JOURNAL_COMPACT_PERCENTAGE:\n                    unhandledElement(reader, element);\n                    break;\n                case JOURNAL_DIRECTORY: {\n                    final DirectoryElement dir = parseDirectory(reader);\n                    messagingSubsystemAdd.setJournalDirectory(dir);\n                }\n                    break;\n                case JOURNAL_MIN_FILES: {\n                    String text = reader.getElementText();\n                    if (text != null && text.length() > 0) {\n                        messagingSubsystemAdd.setJournalMinFiles(Integer.valueOf(text.trim()));\n                    }\n                }\n                    break;\n                case JOURNAL_SYNC_NON_TRANSACTIONAL:\n                    unhandledElement(reader, element);\n                    break;\n                case JOURNAL_SYNC_TRANSACTIONAL:\n                    unhandledElement(reader, element);\n                    break;\n                case JOURNAL_TYPE: {\n                    String text = reader.getElementText();\n                    if (text != null && text.length() > 0) {\n                        JournalType jtype = JournalType.valueOf(text.trim());\n                        messagingSubsystemAdd.setJournalType(jtype);\n                    }\n                }\n                    break;\n                case JOURNAL_FILE_SIZE: {\n                    String text = reader.getElementText();\n                    if (text != null && text.length() > 0) {\n                        int size = Integer.valueOf(text.trim());\n                        messagingSubsystemAdd.setJournalFileSize(size);\n                    }\n                }\n                    break;\n                case JOURNAL_MAX_IO:\n                    unhandledElement(reader, element);\n                    break;\n                case LARGE_MESSAGES_DIRECTORY: {\n                    final DirectoryElement dir = parseDirectory(reader);\n                    messagingSubsystemAdd.setLargeMessagesDirectory(dir);\n                }\n                    break;\n                case LOCAL_BIND_ADDRESS:\n                    unhandledElement(reader, element);\n                    break;\n                case LOCAL_BIND_PORT:\n                    unhandledElement(reader, element);\n                    break;\n                case LOG_JOURNAL_WRITE_RATE:\n                    unhandledElement(reader, element);\n                    break;\n                case MANAGEMENT_ADDRESS:\n                    unhandledElement(reader, element);\n                    break;\n                case MANAGEMENT_NOTIFICATION_ADDRESS:\n                    unhandledElement(reader, element);\n                    break;\n                case MEMORY_MEASURE_INTERVAL:\n                    unhandledElement(reader, element);\n                    break;\n                case MEMORY_WARNING_THRESHOLD:\n                    unhandledElement(reader, element);\n                    break;\n                case MESSAGE_COUNTER_ENABLED:\n                    unhandledElement(reader, element);\n                    break;\n                case MESSAGE_COUNTER_MAX_DAY_HISTORY:\n                    unhandledElement(reader, element);\n                    break;\n                case MESSAGE_COUNTER_SAMPLE_PERIOD:\n                    unhandledElement(reader, element);\n                    break;\n                case MESSAGE_EXPIRY_SCAN_PERIOD:\n                    unhandledElement(reader, element);\n                    break;\n                case MESSAGE_EXPIRY_THREAD_PRIORITY:\n                    unhandledElement(reader, element);\n                    break;\n                case PAGING_DIRECTORY: {\n                    final DirectoryElement dir = parseDirectory(reader);\n                    messagingSubsystemAdd.setPagingDirectory(dir);\n                }\n                    break;\n                case PERF_BLAST_PAGES:\n                    unhandledElement(reader, element);\n                    break;\n                case PERSIST_DELIVERY_COUNT_BEFORE_DELIVERY:\n                    unhandledElement(reader, element);\n                    break;\n                case PERSIST_ID_CACHE:\n                    unhandledElement(reader, element);\n                    break;\n                case PERSISTENCE_ENABLED: {\n                    final String value = reader.getElementText();\n                    if(value != null && value.length() > 0) {\n                        boolean enabled = Boolean.valueOf(value.trim());\n                        messagingSubsystemAdd.setPersistenceEnabled(enabled);\n                    }\n                    break;\n                } case REFRESH_TIMEOUT:\n                    unhandledElement(reader, element);\n                    break;\n                case REMOTING_INTERCEPTORS:\n                    unhandledElement(reader, element);\n                    break;\n                case RUN_SYNC_SPEED_TEST:\n                    unhandledElement(reader, element);\n                    break;\n                case SECURITY_ENABLED:\n                    unhandledElement(reader, element);\n                    break;\n                case SECURITY_INVALIDATION_INTERVAL:\n                    unhandledElement(reader, element);\n                    break;\n                case SECURITY_SETTINGS:\n                    // process security settings\n                    processSecuritySettings(reader, messagingSubsystemAdd);\n                    break;\n                case SERVER_DUMP_INTERVAL:\n                    unhandledElement(reader, element);\n                    break;\n                case SHARED_STORE:\n                    unhandledElement(reader, element);\n                    break;\n                case TRANSACTION_TIMEOUT:\n                    unhandledElement(reader, element);\n                    break;\n                case TRANSACTION_TIMEOUT_SCAN_PERIOD:\n                    unhandledElement(reader, element);\n                    break;\n                case WILD_CARD_ROUTING_ENABLED:\n                    unhandledElement(reader, element);\n                    break;\n                case DEAD_LETTER_ADDRESS_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case EXPIRY_ADDRESS_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case REDELIVERY_DELAY_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case MAX_DELIVERY_ATTEMPTS:\n                    unhandledElement(reader, element);\n                    break;\n                case MAX_SIZE_BYTES_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case ADDRESS_FULL_MESSAGE_POLICY_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case PAGE_SIZE_BYTES_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case MESSAGE_COUNTER_HISTORY_DAY_LIMIT_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case LVQ_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case REDISTRIBUTION_DELAY_NODE_NAME:\n                    unhandledElement(reader, element);\n                    break;\n                case SEND_TO_DLA_ON_NO_ROUTE:\n                    unhandledElement(reader, element);\n                    break;\n                case QUEUES:\n                    parseQueues(reader, messagingSubsystemAdd);\n                    break;\n                case SUBSYSTEM:\n                    // The end of the subsystem element\n                    break;\n                default:\n                    throw ParseUtils.unexpectedElement(reader);\n            }\n        } while (reader.hasNext() && localName.equals(\"subsystem\") == false);\n\n        result.setResult(new ExtensionContext.SubsystemConfiguration<MessagingSubsystemElement>(messagingSubsystemAdd, updates));\n\n        // Set the log delegate\n        // config.setLogDelegateFactoryClassName();\n        log.tracef(\"End %s:%s\", reader.getLocation(), reader.getLocalName());\n    }","commit_id":"6cdd64bc61fe51265cbb4e3f63583d6f1259b46d","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void serializeWithCSSPathAdjustments() throws Exception\n    {\n        FilesystemExportContext exportContext = new FilesystemExportContext();\n        exportContext.setExportDir(BASEDIR);\n        exportContext.pushCSSParentLevels(3);\n\n        Provider<FilesystemExportContext> exportContextProvider = this.mocker.getInstance(new DefaultParameterizedType(\n            null, Provider.class, FilesystemExportContext.class));\n        Mockito.when(exportContextProvider.get()).thenReturn(exportContext);\n\n        WebJarsResourceReference reference = new WebJarsResourceReference(Arrays.asList(\n            \"angular-paginate-anything\", \"2.5.3\", \"paginate-anything.js\"));\n\n        // Verify that the returned URL is ok\n        assertEquals(\"../../../webjars/angular-paginate-anything/2.5.3/paginate-anything.js\",\n            this.mocker.getComponentUnderTest().serialize(reference).serialize());\n\n        // Also verify that the resource has been copied!\n        assertTrue(new File(BASEDIR, \"webjars/angular-paginate-anything/2.5.3/paginate-anything.js\").exists());\n    }","id":96354,"modified_method":"@Test\n    public void serializeWithCSSPathAdjustments() throws Exception\n    {\n        FilesystemExportContext exportContext = new FilesystemExportContext();\n        exportContext.setExportDir(BASEDIR);\n        exportContext.pushCSSParentLevels(3);\n\n        Provider<FilesystemExportContext> exportContextProvider = this.mocker.getInstance(new DefaultParameterizedType(\n            null, Provider.class, FilesystemExportContext.class));\n        Mockito.when(exportContextProvider.get()).thenReturn(exportContext);\n\n        WebJarsResourceReference reference = new WebJarsResourceReference(\"wiki:wiki\", Arrays.asList(\n            \"angular-paginate-anything\", \"2.5.3\", \"paginate-anything.js\"));\n\n        // Verify that the returned URL is ok\n        assertEquals(\"../../../webjars/angular-paginate-anything/2.5.3/paginate-anything.js\",\n            this.mocker.getComponentUnderTest().serialize(reference).serialize());\n\n        // Also verify that the resource has been copied!\n        assertTrue(new File(BASEDIR, \"webjars/angular-paginate-anything/2.5.3/paginate-anything.js\").exists());\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void serialize() throws Exception\n    {\n        FilesystemExportContext exportContext = new FilesystemExportContext();\n        exportContext.setExportDir(BASEDIR);\n\n        Provider<FilesystemExportContext> exportContextProvider = this.mocker.getInstance(new DefaultParameterizedType(\n            null, Provider.class, FilesystemExportContext.class));\n        Mockito.when(exportContextProvider.get()).thenReturn(exportContext);\n\n        WebJarsResourceReference reference = new WebJarsResourceReference(Arrays.asList(\n            \"angular-paginate-anything\", \"2.5.3\", \"paginate-anything.js\"));\n\n        // Verify that the returned URL is ok\n        assertEquals(\"webjars/angular-paginate-anything/2.5.3/paginate-anything.js\",\n            this.mocker.getComponentUnderTest().serialize(reference).serialize());\n\n        // Also verify that the resource has been copied!\n        assertTrue(new File(BASEDIR, \"webjars/angular-paginate-anything/2.5.3/paginate-anything.js\").exists());\n    }","id":96355,"modified_method":"@Test\n    public void serialize() throws Exception\n    {\n        FilesystemExportContext exportContext = new FilesystemExportContext();\n        exportContext.setExportDir(BASEDIR);\n\n        Provider<FilesystemExportContext> exportContextProvider = this.mocker.getInstance(new DefaultParameterizedType(\n            null, Provider.class, FilesystemExportContext.class));\n        Mockito.when(exportContextProvider.get()).thenReturn(exportContext);\n\n        WebJarsResourceReference reference = new WebJarsResourceReference(\"wiki:wiki\", Arrays.asList(\n            \"angular-paginate-anything\", \"2.5.3\", \"paginate-anything.js\"));\n\n        // Verify that the returned URL is ok\n        assertEquals(\"webjars/angular-paginate-anything/2.5.3/paginate-anything.js\",\n            this.mocker.getComponentUnderTest().serialize(reference).serialize());\n\n        // Also verify that the resource has been copied!\n        assertTrue(new File(BASEDIR, \"webjars/angular-paginate-anything/2.5.3/paginate-anything.js\").exists());\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testEqualsAndHashCode()\n    {\n        WebJarsResourceReference reference1 = new WebJarsResourceReference(Arrays.asList(\"one\", \"two\"));\n        reference1.addParameter(\"key1\", \"value1\");\n        reference1.addParameter(\"key2\", new String[]{ \"value2\", \"value3\" });\n\n        WebJarsResourceReference reference2 = new WebJarsResourceReference(Arrays.asList(\"one\", \"two\"));\n        reference2.addParameter(\"key1\", \"value1\");\n        reference2.addParameter(\"key2\", new String[]{ \"value2\", \"value3\" });\n\n        WebJarsResourceReference reference3 = new WebJarsResourceReference(Arrays.asList(\"one\", \"two\"));\n\n        assertEquals(reference2, reference1);\n        assertEquals(reference2.hashCode(), reference1.hashCode());\n        assertFalse(reference3.equals(reference1));\n        assertFalse(reference3.hashCode() == reference1.hashCode());\n    }","id":96356,"modified_method":"@Test\n    public void testEqualsAndHashCode()\n    {\n        WebJarsResourceReference reference1 = new WebJarsResourceReference(\"namespace\", Arrays.asList(\"one\", \"two\"));\n        reference1.addParameter(\"key1\", \"value1\");\n        reference1.addParameter(\"key2\", new String[]{ \"value2\", \"value3\" });\n\n        WebJarsResourceReference reference2 = new WebJarsResourceReference(\"namespace\", Arrays.asList(\"one\", \"two\"));\n        reference2.addParameter(\"key1\", \"value1\");\n        reference2.addParameter(\"key2\", new String[]{ \"value2\", \"value3\" });\n\n        WebJarsResourceReference reference3 = new WebJarsResourceReference(\"namespace\", Arrays.asList(\"one\", \"two\"));\n\n        WebJarsResourceReference reference4 = new WebJarsResourceReference(\"namespace2\", Arrays.asList(\"one\", \"two\"));\n\n        assertEquals(reference2, reference1);\n        assertEquals(reference2.hashCode(), reference1.hashCode());\n\n        assertFalse(reference3.equals(reference1));\n        assertFalse(reference3.hashCode() == reference1.hashCode());\n\n        assertFalse(reference4.equals(reference3));\n        assertFalse(reference4.hashCode() == reference3.hashCode());\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public int hashCode()\n    {\n        return new HashCodeBuilder(5, 5)\n            .append(getResourceSegments())\n            .append(getType())\n            .append(getParameters())\n            .toHashCode();\n    }","id":96357,"modified_method":"@Override\n    public int hashCode()\n    {\n        return new HashCodeBuilder(5, 5)\n            .append(getResourceSegments())\n            .append(getType())\n            .append(getNamespace())\n            .append(getParameters())\n            .toHashCode();\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public boolean equals(Object object)\n    {\n        if (object == null) {\n            return false;\n        }\n        if (object == this) {\n            return true;\n        }\n        if (object.getClass() != getClass()) {\n            return false;\n        }\n        WebJarsResourceReference rhs = (WebJarsResourceReference) object;\n        return new EqualsBuilder()\n            .append(getResourceSegments(), rhs.getResourceSegments())\n            .append(getType(), rhs.getType())\n            .append(getParameters(), rhs.getParameters())\n            .isEquals();\n    }","id":96358,"modified_method":"@Override\n    public boolean equals(Object object)\n    {\n        if (object == null) {\n            return false;\n        }\n        if (object == this) {\n            return true;\n        }\n        if (object.getClass() != getClass()) {\n            return false;\n        }\n        WebJarsResourceReference rhs = (WebJarsResourceReference) object;\n        return new EqualsBuilder()\n            .append(getResourceSegments(), rhs.getResourceSegments())\n            .append(getType(), rhs.getType())\n            .append(getNamespace(), rhs.getNamespace())\n            .append(getParameters(), rhs.getParameters())\n            .isEquals();\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param resourceSegments see {@link #getResourceSegments()}\n     */\n    public WebJarsResourceReference(List<String> resourceSegments)\n    {\n        setType(TYPE);\n        this.resourceSegments = new ArrayList<>(resourceSegments);\n    }","id":96359,"modified_method":"/**\n     * @param namespace see {@link #getNamespace()}\n     * @param resourceSegments see {@link #getResourceSegments()}\n     */\n    public WebJarsResourceReference(String namespace, List<String> resourceSegments)\n    {\n        setType(TYPE);\n        this.namespace = namespace;\n        this.resourceSegments = new ArrayList<>(resourceSegments);\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public void handle(ResourceReference resourceReference, ResourceReferenceHandlerChain chain)\n        throws ResourceReferenceHandlerException\n    {\n        // This code only handles WebJars Resource References.\n        WebJarsResourceReference webJarsResourceReference = (WebJarsResourceReference) resourceReference;\n\n        // Set up an XWiki Context for 2 reasons:\n        // 1) so that we can serve a resource located in a webjar JAR installed in a Wiki Component Manager (CM). If no\n        //    Context is set up then the Context CM will fallback on the Root CM and thus the webjar JAR won't be found.\n        // 2) so that we can set the current user in the Context and at the same time verify that the current user has\n        //    View Rights on this wiki\n        this.contextInitializer.initialize(webJarsResourceReference.getWikiId());\n\n        if (!shouldBrowserUseCachedContent(webJarsResourceReference)) {\n            // If we get here then either the resource is not cached by the browser or the resource is dynamic.\n            InputStream resourceStream = getResourceStream(webJarsResourceReference);\n\n            if (resourceStream != null) {\n                try {\n                    serveResource(webJarsResourceReference, resourceStream);\n                } catch (ResourceReferenceHandlerException e) {\n                    this.logger.error(e.getMessage(), e);\n                    sendError(HttpStatus.SC_INTERNAL_SERVER_ERROR, e.getMessage());\n                }\n            } else {\n                sendError(HttpStatus.SC_NOT_FOUND, \"Resource not found [%s].\",\n                    getResourceName(webJarsResourceReference));\n            }\n        }\n\n        // Be a good citizen, continue the chain, in case some lower-priority Handler has something to do for this\n        // Resource Reference.\n        chain.handleNext(webJarsResourceReference);\n    }","id":96360,"modified_method":"@Override\n    public void handle(ResourceReference resourceReference, ResourceReferenceHandlerChain chain)\n        throws ResourceReferenceHandlerException\n    {\n        // This code only handles WebJars Resource References.\n        WebJarsResourceReference webJarsResourceReference = (WebJarsResourceReference) resourceReference;\n\n        if (!shouldBrowserUseCachedContent(webJarsResourceReference)) {\n            // If we get here then either the resource is not cached by the browser or the resource is dynamic.\n            InputStream resourceStream = getResourceStream(webJarsResourceReference);\n\n            if (resourceStream != null) {\n                try {\n                    serveResource(webJarsResourceReference, resourceStream);\n                } catch (ResourceReferenceHandlerException e) {\n                    this.logger.error(e.getMessage(), e);\n                    sendError(HttpStatus.SC_INTERNAL_SERVER_ERROR, e.getMessage());\n                }\n            } else {\n                sendError(HttpStatus.SC_NOT_FOUND, \"Resource not found [%s].\",\n                    getResourceName(webJarsResourceReference));\n            }\n        }\n\n        // Be a good citizen, continue the chain, in case some lower-priority Handler has something to do for this\n        // Resource Reference.\n        chain.handleNext(webJarsResourceReference);\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param resourceReference the reference to the WebJar resource to get\n     * @return the name of the specified resource, e.g. \"requirejs/2.1.15/require.min.js\"\n     */\n    private String getResourceName(WebJarsResourceReference resourceReference)\n    {\n        return resourceReference.getResourceName();\n    }","id":96361,"modified_method":"/**\n     * @return the Class Loader from which to look for WebJars resources\n     */\n    protected ClassLoader getClassLoader(String namespace)\n    {\n        return this.classLoaderManager.getURLClassLoader(namespace, true);\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param resourceReference the reference to the WebJar resource to get\n     * @return the stream that can be used to read the resource from the WebJar\n     */\n    private InputStream getResourceStream(WebJarsResourceReference resourceReference)\n    {\n        String resourcePath = String.format(\"%s%s\", WEBJARS_RESOURCE_PREFIX, getResourceName(resourceReference));\n        return getClassLoader().getResourceAsStream(resourcePath);\n    }","id":96362,"modified_method":"/**\n     * @param resourceReference the reference to the WebJar resource to get\n     * @return the stream that can be used to read the resource from the WebJar\n     */\n    private InputStream getResourceStream(WebJarsResourceReference resourceReference)\n    {\n        String resourcePath = String.format(\"%s%s\", WEBJARS_RESOURCE_PREFIX, getResourceName(resourceReference));\n        return getClassLoader(resourceReference.getNamespace()).getResourceAsStream(resourcePath);\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void evaluateResource() throws Exception\n    {\n        WebJarsResourceReference reference =\n            new WebJarsResourceReference(Arrays.asList(\"angular\", \"2.1.11\", \"angular.js\"));\n        reference.addParameter(\"evaluate\", true);\n\n        ByteArrayInputStream resourceStream = new ByteArrayInputStream(\"content\".getBytes());\n        when(this.classLoader.getResourceAsStream(\"META-INF/resources/webjars/angular/2.1.11/angular.js\")).thenReturn(\n            resourceStream);\n\n        VelocityManager velocityManager = this.componentManager.getInstance(VelocityManager.class);\n        VelocityEngine velocityEngine = mock(VelocityEngine.class);\n        when(velocityManager.getVelocityEngine()).thenReturn(velocityEngine);\n\n        doAnswer(new Answer<Void>()\n        {\n            public Void answer(InvocationOnMock invocation)\n            {\n                ((StringWriter) invocation.getArguments()[1]).write(\"evaluated content\");\n                return null;\n            }\n        }).when(velocityEngine).evaluate(any(VelocityContext.class), any(StringWriter.class),\n            eq(\"angular/2.1.11/angular.js\"), any(Reader.class));\n\n        this.handler.handle(reference, this.chain);\n\n        // Verify that the resource content has been evaluated and copied to the Response output stream.\n        assertEquals(\"evaluated content\", this.response.getOutputStream().toString());\n\n        // Verify that the correct Content Type has been set.\n        verify(this.response).setContentType(\"application/javascript\");\n\n        // Verify that the dynamic resource is not cached.\n        verify(this.response.getHttpServletResponse(), never()).setHeader(any(String.class), any(String.class));\n        verify(this.response.getHttpServletResponse(), never()).setDateHeader(any(String.class), any(Long.class));\n    }","id":96363,"modified_method":"@Test\n    public void evaluateResource() throws Exception\n    {\n        WebJarsResourceReference reference =\n            new WebJarsResourceReference(\"wiki:wiki\", Arrays.asList(\"angular\", \"2.1.11\", \"angular.js\"));\n        reference.addParameter(\"evaluate\", true);\n\n        ByteArrayInputStream resourceStream = new ByteArrayInputStream(\"content\".getBytes());\n        when(this.classLoader.getResourceAsStream(\"META-INF/resources/webjars/angular/2.1.11/angular.js\")).thenReturn(\n            resourceStream);\n\n        VelocityManager velocityManager = this.componentManager.getInstance(VelocityManager.class);\n        VelocityEngine velocityEngine = mock(VelocityEngine.class);\n        when(velocityManager.getVelocityEngine()).thenReturn(velocityEngine);\n\n        doAnswer(new Answer<Void>()\n        {\n            public Void answer(InvocationOnMock invocation)\n            {\n                ((StringWriter) invocation.getArguments()[1]).write(\"evaluated content\");\n                return null;\n            }\n        }).when(velocityEngine).evaluate(any(VelocityContext.class), any(StringWriter.class),\n            eq(\"angular/2.1.11/angular.js\"), any(Reader.class));\n\n        this.handler.handle(reference, this.chain);\n\n        // Verify that the resource content has been evaluated and copied to the Response output stream.\n        assertEquals(\"evaluated content\", this.response.getOutputStream().toString());\n\n        // Verify that the correct Content Type has been set.\n        verify(this.response).setContentType(\"application/javascript\");\n\n        // Verify that the dynamic resource is not cached.\n        verify(this.response.getHttpServletResponse(), never()).setHeader(any(String.class), any(String.class));\n        verify(this.response.getHttpServletResponse(), never()).setDateHeader(any(String.class), any(Long.class));\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void return304WhenIfModifiedSinceHeader() throws Exception\n    {\n        WebJarsResourceReference reference =\n            new WebJarsResourceReference(Arrays.asList(\"angular\", \"2.1.11\", \"angular.js\"));\n\n        when(this.request.getHttpServletRequest().getHeader(\"If-Modified-Since\")).thenReturn(\"some value\");\n\n        this.handler.handle(reference, this.chain);\n\n        // This the test: we verify that 304 is returned when the \"If-Modified-Since\" header is found in the request\n        verify(this.response.getHttpServletResponse()).setStatus(304);\n\n        verify(this.chain).handleNext(reference);\n    }","id":96364,"modified_method":"@Test\n    public void return304WhenIfModifiedSinceHeader() throws Exception\n    {\n        WebJarsResourceReference reference =\n            new WebJarsResourceReference(\"wiki:wiki\", Arrays.asList(\"angular\", \"2.1.11\", \"angular.js\"));\n\n        when(this.request.getHttpServletRequest().getHeader(\"If-Modified-Since\")).thenReturn(\"some value\");\n\n        this.handler.handle(reference, this.chain);\n\n        // This the test: we verify that 304 is returned when the \"If-Modified-Since\" header is found in the request\n        verify(this.response.getHttpServletResponse()).setStatus(304);\n\n        verify(this.chain).handleNext(reference);\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void failingResourceEvaluation() throws Exception\n    {\n        WebJarsResourceReference reference =\n            new WebJarsResourceReference(Arrays.asList(\"angular\", \"2.1.11\", \"angular.js\"));\n        reference.addParameter(\"evaluate\", \"true\");\n\n        ByteArrayInputStream resourceStream = new ByteArrayInputStream(\"content\".getBytes());\n        when(this.classLoader.getResourceAsStream(\"META-INF/resources/webjars/angular/2.1.11/angular.js\")).thenReturn(\n            resourceStream);\n\n        VelocityManager velocityManager = this.componentManager.getInstance(VelocityManager.class);\n        VelocityEngine velocityEngine = mock(VelocityEngine.class);\n        when(velocityManager.getVelocityEngine()).thenReturn(velocityEngine);\n\n        when(velocityEngine.evaluate(any(VelocityContext.class), any(StringWriter.class),\n            eq(\"angular/2.1.11/angular.js\"), any(Reader.class))).thenThrow(new VelocityException(\"Bad code!\"));\n\n        this.handler.handle(reference, this.chain);\n\n        // Verify the exception is logged.\n        verify(this.componentManager.getMockedLogger()).error(\n            eq(\"Failed to evaluate the Velocity code from WebJar resource [angular/2.1.11/angular.js]\"),\n            any(ResourceReferenceHandlerException.class));\n\n        // Verify that the client is properly notified about the failure.\n        verify(this.response.getHttpServletResponse()).sendError(500,\n            \"Failed to evaluate the Velocity code from WebJar resource [angular/2.1.11/angular.js]\");\n\n        // The next handlers are still called.\n        verify(this.chain).handleNext(reference);\n    }","id":96365,"modified_method":"@Test\n    public void failingResourceEvaluation() throws Exception\n    {\n        WebJarsResourceReference reference =\n            new WebJarsResourceReference(\"wiki:wiki\", Arrays.asList(\"angular\", \"2.1.11\", \"angular.js\"));\n        reference.addParameter(\"evaluate\", \"true\");\n\n        ByteArrayInputStream resourceStream = new ByteArrayInputStream(\"content\".getBytes());\n        when(this.classLoader.getResourceAsStream(\"META-INF/resources/webjars/angular/2.1.11/angular.js\")).thenReturn(\n            resourceStream);\n\n        VelocityManager velocityManager = this.componentManager.getInstance(VelocityManager.class);\n        VelocityEngine velocityEngine = mock(VelocityEngine.class);\n        when(velocityManager.getVelocityEngine()).thenReturn(velocityEngine);\n\n        when(velocityEngine.evaluate(any(VelocityContext.class), any(StringWriter.class),\n            eq(\"angular/2.1.11/angular.js\"), any(Reader.class))).thenThrow(new VelocityException(\"Bad code!\"));\n\n        this.handler.handle(reference, this.chain);\n\n        // Verify the exception is logged.\n        verify(this.componentManager.getMockedLogger()).error(\n            eq(\"Failed to evaluate the Velocity code from WebJar resource [angular/2.1.11/angular.js]\"),\n            any(ResourceReferenceHandlerException.class));\n\n        // Verify that the client is properly notified about the failure.\n        verify(this.response.getHttpServletResponse()).sendError(500,\n            \"Failed to evaluate the Velocity code from WebJar resource [angular/2.1.11/angular.js]\");\n\n        // The next handlers are still called.\n        verify(this.chain).handleNext(reference);\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void executeWhenResourceDoesntExist() throws Exception\n    {\n        WebJarsResourceReference reference =\n            new WebJarsResourceReference(Arrays.asList(\"angular\", \"2.1.11\", \"angular.js\"));\n\n        this.handler.handle(reference, this.chain);\n\n        verify(this.classLoader).getResourceAsStream(\"META-INF/resources/webjars/angular/2.1.11/angular.js\");\n        verify(this.response.getHttpServletResponse())\n            .sendError(404, \"Resource not found [angular/2.1.11/angular.js].\");\n        verify(this.chain).handleNext(reference);\n    }","id":96366,"modified_method":"@Test\n    public void executeWhenResourceDoesntExist() throws Exception\n    {\n        WebJarsResourceReference reference =\n            new WebJarsResourceReference(\"wiki:wiki\", Arrays.asList(\"angular\", \"2.1.11\", \"angular.js\"));\n\n        this.handler.handle(reference, this.chain);\n\n        verify(this.classLoader).getResourceAsStream(\"META-INF/resources/webjars/angular/2.1.11/angular.js\");\n        verify(this.response.getHttpServletResponse())\n            .sendError(404, \"Resource not found [angular/2.1.11/angular.js].\");\n        verify(this.chain).handleNext(reference);\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void executeWhenResourceExists() throws Exception\n    {\n        WebJarsResourceReference reference =\n            new WebJarsResourceReference(Arrays.asList(\"angular\", \"2.1.11\", \"angular.js\"));\n\n        ByteArrayInputStream resourceStream = new ByteArrayInputStream(\"content\".getBytes());\n        when(this.classLoader.getResourceAsStream(\"META-INF/resources/webjars/angular/2.1.11/angular.js\")).thenReturn(\n            resourceStream);\n\n        Long now = new Date().getTime();\n        this.handler.handle(reference, this.chain);\n\n        // Verify that the resource content has been copied to the Response output stream.\n        assertEquals(\"content\", this.response.getOutputStream().toString());\n        // Verify that the correct Content Type has been set.\n        verify(this.response).setContentType(\"application/javascript\");\n\n        // Verify that the static resource is cached permanently.\n        verify(this.response.getHttpServletResponse()).setHeader(\"Cache-Control\", \"public\");\n        ArgumentCaptor<Long> expireDate = ArgumentCaptor.forClass(Long.class);\n        verify(this.response.getHttpServletResponse()).setDateHeader(eq(\"Expires\"), expireDate.capture());\n        // The expiration date should be in one year from now.\n        assertTrue(expireDate.getValue() >= (now + 365 * 24 * 3600 * 1000L));\n\n        // Also verify that the \"Last-Modified\" header has been set in the response so that the browser will send\n        // an If-Modified-Since header for the next request and we can tell it to use its cache.\n        verify(this.response.getHttpServletResponse()).setDateHeader(eq(\"Last-Modified\"), anyLong());\n\n        verify(this.chain).handleNext(reference);\n    }","id":96367,"modified_method":"@Test\n    public void executeWhenResourceExists() throws Exception\n    {\n        WebJarsResourceReference reference =\n            new WebJarsResourceReference(\"wiki:wiki\", Arrays.asList(\"angular\", \"2.1.11\", \"angular.js\"));\n\n        ByteArrayInputStream resourceStream = new ByteArrayInputStream(\"content\".getBytes());\n        when(this.classLoader.getResourceAsStream(\"META-INF/resources/webjars/angular/2.1.11/angular.js\")).thenReturn(\n            resourceStream);\n\n        Long now = new Date().getTime();\n        this.handler.handle(reference, this.chain);\n\n        // Verify that the resource content has been copied to the Response output stream.\n        assertEquals(\"content\", this.response.getOutputStream().toString());\n        // Verify that the correct Content Type has been set.\n        verify(this.response).setContentType(\"application/javascript\");\n\n        // Verify that the static resource is cached permanently.\n        verify(this.response.getHttpServletResponse()).setHeader(\"Cache-Control\", \"public\");\n        ArgumentCaptor<Long> expireDate = ArgumentCaptor.forClass(Long.class);\n        verify(this.response.getHttpServletResponse()).setDateHeader(eq(\"Expires\"), expireDate.capture());\n        // The expiration date should be in one year from now.\n        assertTrue(expireDate.getValue() >= (now + 365 * 24 * 3600 * 1000L));\n\n        // Also verify that the \"Last-Modified\" header has been set in the response so that the browser will send\n        // an If-Modified-Since header for the next request and we can tell it to use its cache.\n        verify(this.response.getHttpServletResponse()).setDateHeader(eq(\"Last-Modified\"), anyLong());\n\n        verify(this.chain).handleNext(reference);\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Before\n    public void configure() throws Exception\n    {\n        Container container = this.componentManager.getInstance(Container.class);\n\n        this.response = mock(ServletResponse.class);\n        ByteArrayOutputStream responseOutputStream = new ByteArrayOutputStream();\n        when(this.response.getOutputStream()).thenReturn(responseOutputStream);\n\n        HttpServletResponse httpResponse = mock(HttpServletResponse.class);\n        when(this.response.getHttpServletResponse()).thenReturn(httpResponse);\n        when(container.getResponse()).thenReturn(this.response);\n\n        this.request = mock(ServletRequest.class);\n        HttpServletRequest httpRequest = mock(HttpServletRequest.class);\n        when(this.request.getHttpServletRequest()).thenReturn(httpRequest);\n        when(container.getRequest()).thenReturn(this.request);\n\n        this.handler = this.componentManager.getComponentUnderTest();\n        this.handler.setClassLoader(this.classLoader);\n    }","id":96368,"modified_method":"@Before\n    public void configure() throws Exception\n    {\n        Container container = this.componentManager.getInstance(Container.class);\n\n        this.response = mock(ServletResponse.class);\n        ByteArrayOutputStream responseOutputStream = new ByteArrayOutputStream();\n        when(this.response.getOutputStream()).thenReturn(responseOutputStream);\n\n        HttpServletResponse httpResponse = mock(HttpServletResponse.class);\n        when(this.response.getHttpServletResponse()).thenReturn(httpResponse);\n        when(container.getResponse()).thenReturn(this.response);\n\n        this.request = mock(ServletRequest.class);\n        HttpServletRequest httpRequest = mock(HttpServletRequest.class);\n        when(this.request.getHttpServletRequest()).thenReturn(httpRequest);\n        when(container.getRequest()).thenReturn(this.request);\n\n        this.handler = this.componentManager.getComponentUnderTest();\n\n        this.classLoader = mock(NamespaceURLClassLoader.class);\n        ClassLoaderManager clm = this.componentManager.getInstance(ClassLoaderManager.class);\n        when(clm.getURLClassLoader(\"wiki:wiki\", true)).thenReturn(this.classLoader);\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public WebJarsResourceReference resolve(ExtendedURL extendedURL, ResourceType resourceType,\n        Map<String, Object> parameters) throws CreateResourceReferenceException, UnsupportedResourceReferenceException\n    {\n        WebJarsResourceReference reference = new WebJarsResourceReference(extendedURL.getSegments());\n        copyParameters(extendedURL, reference);\n        return reference;\n    }","id":96369,"modified_method":"@Override\n    public WebJarsResourceReference resolve(ExtendedURL extendedURL, ResourceType resourceType,\n        Map<String, Object> parameters) throws CreateResourceReferenceException, UnsupportedResourceReferenceException\n    {\n        WebJarsResourceReference reference;\n        List<String> segments = extendedURL.getSegments();\n\n        if (segments.size() > 1) {\n            // The first segment is the namespace\n            String namespace = segments.get(0);\n\n            // The other segments point to the resource path\n            List<String> resourceSegments = segments.subList(1, segments.size());\n\n            reference = new WebJarsResourceReference(namespace, resourceSegments);\n            copyParameters(extendedURL, reference);\n        } else {\n            throw new CreateResourceReferenceException(String.format(\"Invalid WebJars URL format [%s]\",\n                extendedURL.toString()));\n        }\n        return reference;\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void resolve() throws Exception\n    {\n        Map<String, List<String>> parameters = new HashMap<>();\n        parameters.put(\"key1\", Arrays.asList(\"value1\"));\n        parameters.put(\"key2\", Arrays.asList(\"value2\", \"value3\"));\n        ExtendedURL extendedURL = new ExtendedURL(Arrays.asList(\"one\", \"two\"), parameters);\n\n        WebJarsResourceReference reference = this.mocker.getComponentUnderTest().resolve(extendedURL,\n            WebJarsResourceReference.TYPE, Collections.<String, Object>emptyMap());\n\n        assertEquals(\"one/two\", reference.getResourceName());\n        assertEquals(\"value1\", reference.getParameterValue(\"key1\"));\n        assertEquals(Arrays.asList(\"value2\", \"value3\"), reference.getParameterValues(\"key2\"));\n    }","id":96370,"modified_method":"@Test\n    public void resolve() throws Exception\n    {\n        Map<String, List<String>> parameters = new HashMap<>();\n        parameters.put(\"key1\", Arrays.asList(\"value1\"));\n        parameters.put(\"key2\", Arrays.asList(\"value2\", \"value3\"));\n        ExtendedURL extendedURL = new ExtendedURL(Arrays.asList(\"namespace\", \"one\", \"two\"), parameters);\n\n        WebJarsResourceReference reference = this.mocker.getComponentUnderTest().resolve(extendedURL,\n            WebJarsResourceReference.TYPE, Collections.<String, Object>emptyMap());\n\n        assertEquals(\"namespace\", reference.getNamespace());\n        assertEquals(\"one/two\", reference.getResourceName());\n        assertEquals(\"value1\", reference.getParameterValue(\"key1\"));\n        assertEquals(Arrays.asList(\"value2\", \"value3\"), reference.getParameterValues(\"key2\"));\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void serialize() throws Exception\n    {\n        URLNormalizer<ExtendedURL> normalizer = this.mocker.getInstance(\n            new DefaultParameterizedType(null, URLNormalizer.class, ExtendedURL.class), \"contextpath\");\n        Map<String, List<String>> parameters = new HashMap<>();\n        parameters.put(\"key1\", Arrays.asList(\"value1\"));\n        parameters.put(\"key2\", Arrays.asList(\"value2\", \"value3\"));\n        ExtendedURL partialURL = new ExtendedURL(Arrays.asList(\"webjars\", \"one\", \"two\"), parameters);\n        ExtendedURL expectedURL = new ExtendedURL(Arrays.asList(\"xwiki\", \"webjars\", \"one\", \"two\"), parameters);\n        when(normalizer.normalize(partialURL)).thenReturn(expectedURL);\n\n        WebJarsResourceReference reference = new WebJarsResourceReference(Arrays.asList(\"one\", \"two\"));\n        reference.addParameter(\"key1\", \"value1\");\n        reference.addParameter(\"key2\", new String[]{ \"value2\", \"value3\" });\n\n        assertEquals(expectedURL, this.mocker.getComponentUnderTest().serialize(reference));\n    }","id":96371,"modified_method":"@Test\n    public void serialize() throws Exception\n    {\n        URLNormalizer<ExtendedURL> normalizer = this.mocker.getInstance(\n            new DefaultParameterizedType(null, URLNormalizer.class, ExtendedURL.class), \"contextpath\");\n        Map<String, List<String>> parameters = new HashMap<>();\n        parameters.put(\"key1\", Arrays.asList(\"value1\"));\n        parameters.put(\"key2\", Arrays.asList(\"value2\", \"value3\"));\n        ExtendedURL partialURL = new ExtendedURL(Arrays.asList(\"webjars\", \"namespace\", \"one\", \"two\"), parameters);\n        ExtendedURL expectedURL = new ExtendedURL(\n            Arrays.asList(\"xwiki\", \"webjars\", \"namespace\", \"one\", \"two\"), parameters);\n        when(normalizer.normalize(partialURL)).thenReturn(expectedURL);\n\n        WebJarsResourceReference reference = new WebJarsResourceReference(\"namespace\", Arrays.asList(\"one\", \"two\"));\n        reference.addParameter(\"key1\", \"value1\");\n        reference.addParameter(\"key2\", new String[]{ \"value2\", \"value3\" });\n\n        assertEquals(expectedURL, this.mocker.getComponentUnderTest().serialize(reference));\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Compute an XWiki WebJar URL of the form {@code http://server/webjars?resource=(resource name)}.\n     * \n     * @param resourceName the resource asked (e.g. {@code angular/2.1.11/angular.js\"})\n     * @return the computed URL\n     */\n    public String url(String resourceName)\n    {\n        if (StringUtils.isEmpty(resourceName)) {\n            return null;\n        }\n\n        String[] parts = resourceName.split(RESOURCE_SEPARATOR, 3);\n        if (parts.length < 3) {\n            logger.warn(\"Invalid webjar resource name [{}]. Expected format is 'webjarId/version/path'\", resourceName);\n            return null;\n        }\n\n        // Prefix the webjarId with a fake groupId just to make sure that the colon character (:) is not interpreted as\n        // separator in the webjarId. This is required in order to ensure that the behavior of this method doesn't\n        // change. Note that the groupdId is ignored if the WebJar version is specified so the fake groupId won't have\n        // any effect.\n        return url(\"fakeGroupId:\" + parts[0], parts[2], Collections.singletonMap(VERSION, parts[1]));\n    }","id":96372,"modified_method":"/**\n     * Creates an URL that can be used to load a resource (JavaScript, CSS, etc.) from a WebJar in the current wiki.\n     *\n     * @param resourceName the resource asked using the format {@code <webjarId>/<version>/<path/to/resource>}\n     *                     (e.g. {@code angular/2.1.11/angular.js\"})\n     * @return the computed URL\n     */\n    public String url(String resourceName)\n    {\n        if (StringUtils.isEmpty(resourceName)) {\n            return null;\n        }\n\n        String[] parts = resourceName.split(RESOURCE_SEPARATOR, 3);\n        if (parts.length < 3) {\n            logger.warn(\"Invalid webjar resource name [{}]. Expected format is 'webjarId/version/path'\", resourceName);\n            return null;\n        }\n\n        // Prefix the webjarId with a fake groupId just to make sure that the colon character (:) is not interpreted as\n        // separator in the webjarId. This is required in order to ensure that the behavior of this method doesn't\n        // change. Note that the groupdId is ignored if the WebJar version is specified so the fake groupId won't have\n        // any effect.\n        return url(\"fakeGroupId:\" + parts[0], null, parts[2], Collections.singletonMap(VERSION, parts[1]));\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Creates an URL that can be used to load a resource (JavaScript, CSS, etc.) from a WebJar.\n     * \n     * @param webjarId the id of the WebJar that contains the resource; the format of the WebJar id is\n     *            {@code groupId:artifactId} (e.g. {@code org.xwiki.platform:xwiki-platform-job-webjar}), where the\n     *            {@code groupId} can be omitted if it is {@link #DEFAULT_WEBJAR_GROUP_ID} (i.e. {@code angular}\n     *            translates to {@code org.webjars:angular})\n     * @param path the path within the WebJar, starting from the version folder (e.g. you should pass just\n     *            {@code angular.js} if the actual path is {@code META-INF/resources/webjars/angular/2.1.11/angular.js})\n     * @param params additional query string parameters to add to the returned URL; there are two known (reserved)\n     *            parameters: {@code version} (the WebJar version) and {@code evaluate} (a boolean parameter that\n     *            specifies if the requested resource has Velocity code that needs to be evaluated); besides these you\n     *            can pass whatever parameters you like (they will be taken into account or not depending on the\n     *            resource)\n     * @return the URL to load the WebJar resource (relative to the context path of the web application)\n     */\n    public String url(String webjarId, String path, Map<String, ?> params)\n    {\n        if (StringUtils.isEmpty(webjarId)) {\n            return null;\n        }\n\n        String groupId = DEFAULT_WEBJAR_GROUP_ID;\n        String artifactId = webjarId;\n        int groupSeparatorPosition = webjarId.indexOf(':');\n        if (groupSeparatorPosition >= 0) {\n            // A different group id.\n            groupId = webjarId.substring(0, groupSeparatorPosition);\n            artifactId = webjarId.substring(groupSeparatorPosition + 1);\n        }\n\n        Map<String, Object> urlParams = new LinkedHashMap<>();\n        if (params != null) {\n            urlParams.putAll(params);\n        }\n\n        // Note that that if a wiki parameter has been specified, we pass it so that it appears in the generated URL so\n        // that the webjars URL handler will know in which wiki to get the webjars resource.\n        String wikiId = (String) urlParams.get(WIKI);\n\n        Object version = urlParams.remove(VERSION);\n        if (version == null) {\n            // Try to determine the version based on the extensions that are currently installed or provided by default.\n            version = getVersion(String.format(\"%s:%s\", groupId, artifactId), wikiId);\n        }\n\n        // Construct a WebJarsResourceReference so that we can serialize it!\n        WebJarsResourceReference resourceReference = getResourceReference(artifactId, version, path, urlParams);\n\n        ExtendedURL extendedURL;\n        try {\n            extendedURL = this.defaultResourceReferenceSerializer.serialize(resourceReference);\n        } catch (SerializeResourceReferenceException | UnsupportedResourceReferenceException e) {\n            this.logger.warn(\"Error while serializing WebJar URL for id [{}], path = [{}]. Root cause = [{}]\",\n                webjarId, path, ExceptionUtils.getRootCauseMessage(e));\n            return null;\n        }\n\n        return extendedURL.serialize();\n    }","id":96373,"modified_method":"/**\n     * Creates an URL that can be used to load a resource (JavaScript, CSS, etc.) from a WebJar.\n     * \n     * @param webjarId the id of the WebJar that contains the resource; the format of the WebJar id is\n     *            {@code groupId:artifactId} (e.g. {@code org.xwiki.platform:xwiki-platform-job-webjar}), where the\n     *            {@code groupId} can be omitted if it is {@link #DEFAULT_WEBJAR_GROUP_ID} (i.e. {@code angular}\n     *            translates to {@code org.webjars:angular})\n     * @param path the path within the WebJar, starting from the version folder (e.g. you should pass just\n     *            {@code angular.js} if the actual path is {@code META-INF/resources/webjars/angular/2.1.11/angular.js})\n     * @param params additional query string parameters to add to the returned URL; there are two known (reserved)\n     *            parameters: {@code version} (the WebJar version) and {@code evaluate} (a boolean parameter that\n     *            specifies if the requested resource has Velocity code that needs to be evaluated); besides these you\n     *            can pass whatever parameters you like (they will be taken into account or not depending on the\n     *            resource)\n     * @return the URL to load the WebJar resource (relative to the context path of the web application)\n     * @Deprecated since 8.1M2, use {@link #url(String, String, String, Map)}\n     */\n    @Deprecated\n    public String url(String webjarId, String path, Map<String, ?> params)\n    {\n        // Note that that if a wiki parameter has been specified, we pass it so that it appears in the generated URL so\n        // that the webjars URL handler will know in which wiki to get the webjars resource.\n        String namespace = null;\n        if (params != null) {\n            // For backward-compatibility reasons we still support passing the target wiki in parameters\n            String wikiId = (String) params.get(WIKI);\n            if (!StringUtils.isEmpty(wikiId)) {\n                namespace = constructNamespace(wikiId);\n            }\n        }\n\n        return url(webjarId, namespace, path, params);\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private String getVersion(String extensionId, String wikiId)\n    {\n        // Look for WebJars that are core extensions.\n        Extension extension = this.coreExtensionRepository.getCoreExtension(extensionId);\n        if (extension == null) {\n            // Look for WebJars that are installed on the passed wiki id (if defined), the current wiki or the main\n            // wiki.\n            String selectedWikiId;\n            if (StringUtils.isNotEmpty(wikiId)) {\n                selectedWikiId = wikiId;\n            } else {\n                selectedWikiId = this.wikiDescriptorManager.getCurrentWikiId();\n            }\n            String namespace = constructNamespace(selectedWikiId);\n            extension = this.installedExtensionRepository.getInstalledExtension(extensionId, namespace);\n            if (extension == null) {\n                // Fallback by looking in the main wiki\n                namespace = constructNamespace(this.wikiDescriptorManager.getMainWikiId());\n                extension = this.installedExtensionRepository.getInstalledExtension(extensionId, namespace);\n                if (extension == null) {\n                    return null;\n                }\n            }\n        }\n        return extension.getId().getVersion().getValue();\n    }","id":96374,"modified_method":"private String getVersion(String extensionId, String namespace)\n    {\n        // Look for WebJars that are core extensions.\n        Extension extension = this.coreExtensionRepository.getCoreExtension(extensionId);\n        if (extension == null) {\n            // Look for WebJars that are installed on the passed namespace (if defined), the current wiki or the main\n            // wiki.\n            String selectedNamespace = resolveNamespace(namespace);\n            extension = this.installedExtensionRepository.getInstalledExtension(extensionId, selectedNamespace);\n            if (extension == null) {\n                // Fallback by looking in the main wiki\n                selectedNamespace = constructNamespace(this.wikiDescriptorManager.getMainWikiId());\n                extension = this.installedExtensionRepository.getInstalledExtension(extensionId, selectedNamespace);\n                if (extension == null) {\n                    return null;\n                }\n            }\n        }\n        return extension.getId().getVersion().getValue();\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"private WebJarsResourceReference getResourceReference(String artifactId, Object version, String path,\n        Map<String, Object> urlParams)\n    {\n        List<String> segments = new ArrayList<>();\n        segments.add(artifactId);\n        // Don't include the version if it's not specified and there's no installed/core extension that matches the\n        // given WebJar id.\n        if (version != null) {\n            segments.add((String) version);\n        }\n        segments.addAll(Arrays.asList(path.split(RESOURCE_SEPARATOR)));\n\n        // When a JavaScript resource is loaded using RequireJS the resource URL must not include the \".js\" suffix (by\n        // default) if the URL is relative and doesn't have a query string. Before XWIKI-10881 (Introduce a proper\n        // \"webjars\" type instead of reusing the \"bin\" type) all WebJar URLs had a query string (the resource path) so\n        // we were forced to specify the \".js\" suffix when using RequireJS. The resource path is currently no longer\n        // part of the query string and thus the \".js\" suffix must now be omitted (otherwise RequireJS will ask for\n        // \".js.js\"), unless the resource has parameters (e.g. the resource is evaluated). In order to preserve\n        // backwards compatibility with existing extensions and also in order to fix this mess (the developer doesn't\n        // know when to put the \".js\" suffix and when not) we have decided to add a fake query string if the \".js\"\n        // suffix is specified and there is no query string (thus preventing RequireJS from requesting \".js.js\").\n        if (path.endsWith(\".js\") && urlParams.isEmpty()) {\n            urlParams.put(\"r\", \"1\");\n        }\n\n        WebJarsResourceReference resourceReference = new WebJarsResourceReference(segments);\n        for (Map.Entry<String, Object> parameterEntry : urlParams.entrySet()) {\n            resourceReference.addParameter(parameterEntry.getKey(), parameterEntry.getValue());\n        }\n\n        return resourceReference;\n    }","id":96375,"modified_method":"private WebJarsResourceReference getResourceReference(String artifactId, Object version, String namespace,\n        String path, Map<String, Object> urlParams)\n    {\n        List<String> segments = new ArrayList<>();\n        segments.add(artifactId);\n        // Don't include the version if it's not specified and there's no installed/core extension that matches the\n        // given WebJar id.\n        if (version != null) {\n            segments.add((String) version);\n        }\n        segments.addAll(Arrays.asList(path.split(RESOURCE_SEPARATOR)));\n\n        // When a JavaScript resource is loaded using RequireJS the resource URL must not include the \".js\" suffix (by\n        // default) if the URL is relative and doesn't have a query string. Before XWIKI-10881 (Introduce a proper\n        // \"webjars\" type instead of reusing the \"bin\" type) all WebJar URLs had a query string (the resource path) so\n        // we were forced to specify the \".js\" suffix when using RequireJS. The resource path is currently no longer\n        // part of the query string and thus the \".js\" suffix must now be omitted (otherwise RequireJS will ask for\n        // \".js.js\"), unless the resource has parameters (e.g. the resource is evaluated). In order to preserve\n        // backwards compatibility with existing extensions and also in order to fix this mess (the developer doesn't\n        // know when to put the \".js\" suffix and when not) we have decided to add a fake query string if the \".js\"\n        // suffix is specified and there is no query string (thus preventing RequireJS from requesting \".js.js\").\n        if (path.endsWith(\".js\") && urlParams.isEmpty()) {\n            urlParams.put(\"r\", \"1\");\n        }\n\n        WebJarsResourceReference resourceReference =\n            new WebJarsResourceReference(resolveNamespace(namespace), segments);\n        for (Map.Entry<String, Object> parameterEntry : urlParams.entrySet()) {\n            resourceReference.addParameter(parameterEntry.getKey(), parameterEntry.getValue());\n        }\n\n        return resourceReference;\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Creates an URL that can be used to load a resource (JavaScript, CSS, etc.) from a WebJar.\n     * \n     * @param webjarId the id of the WebJar that contains the resource; the format of the WebJar id is\n     *            {@code groupId:artifactId} (e.g. {@code org.xwiki.platform:xwiki-platform-job-webjar}), where the\n     *            {@code groupId} can be omitted if it is {@link #DEFAULT_WEBJAR_GROUP_ID} (i.e. {@code angular}\n     *            translates to {@code org.webjars:angular})\n     * @param path the path within the WebJar, starting from the version folder (e.g. you should pass just\n     *            {@code angular.js} if the actual path is {@code META-INF/resources/webjars/angular/2.1.11/angular.js})\n     * @return the URL to load the WebJar resource (relative to the context path of the web application)\n     */\n    public String url(String webjarId, String path)\n    {\n        return url(webjarId, path, null);\n    }","id":96376,"modified_method":"/**\n     * Creates an URL that can be used to load a resource (JavaScript, CSS, etc.) from a WebJar in the current wiki.\n     *\n     * @param webjarId the id of the WebJar that contains the resource; the format of the WebJar id is\n     *            {@code groupId:artifactId} (e.g. {@code org.xwiki.platform:xwiki-platform-job-webjar}), where the\n     *            {@code groupId} can be omitted if it is {@link #DEFAULT_WEBJAR_GROUP_ID} (i.e. {@code angular}\n     *            translates to {@code org.webjars:angular})\n     * @param path the path within the WebJar, starting from the version folder (e.g. you should pass just\n     *            {@code angular.js} if the actual path is {@code META-INF/resources/webjars/angular/2.1.11/angular.js})\n     * @return the URL to load the WebJar resource (relative to the context path of the web application)\n     */\n    public String url(String webjarId, String path)\n    {\n        return url(webjarId, null, path, null);\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void computeURLWithoutVersion() throws Exception\n    {\n        WikiDescriptorManager wikiDescriptorManager = this.mocker.getInstance(WikiDescriptorManager.class);\n        when(wikiDescriptorManager.getCurrentWikiId()).thenReturn(\"math\");\n\n        InstalledExtensionRepository installedExtensionRepository =\n            this.mocker.getInstance(InstalledExtensionRepository.class);\n        InstalledExtension extension = mock(InstalledExtension.class);\n        when(installedExtensionRepository.getInstalledExtension(\"org.webjars:angular\", \"wiki:math\")).thenReturn(\n            extension);\n        when(extension.getId()).thenReturn(new ExtensionId(\"bar\", \"2.1.11\"));\n\n        WebJarsResourceReference resourceReference = new WebJarsResourceReference(\n            Arrays.asList(\"angular\", \"2.1.11\", \"angular.css\"));\n        when(this.serializer.serialize(resourceReference)).thenReturn(\n            new ExtendedURL(Arrays.asList(\"xwiki\", \"angular\", \"2.1.11\", \"angular.css\")));\n\n        assertEquals(\"/xwiki/angular/2.1.11/angular.css\",\n            this.mocker.getComponentUnderTest().url(\"angular\", \"angular.css\"));\n    }","id":96377,"modified_method":"@Test\n    public void computeURLWithoutVersion() throws Exception\n    {\n        WikiDescriptorManager wikiDescriptorManager = this.mocker.getInstance(WikiDescriptorManager.class);\n        when(wikiDescriptorManager.getCurrentWikiId()).thenReturn(\"math\");\n\n        InstalledExtensionRepository installedExtensionRepository =\n            this.mocker.getInstance(InstalledExtensionRepository.class);\n        InstalledExtension extension = mock(InstalledExtension.class);\n        when(installedExtensionRepository.getInstalledExtension(\"org.webjars:angular\", \"wiki:math\")).thenReturn(\n            extension);\n        when(extension.getId()).thenReturn(new ExtensionId(\"bar\", \"2.1.11\"));\n\n        WebJarsResourceReference resourceReference = new WebJarsResourceReference(\"wiki:math\",\n            Arrays.asList(\"angular\", \"2.1.11\", \"angular.css\"));\n        when(this.serializer.serialize(resourceReference)).thenReturn(\n            new ExtendedURL(Arrays.asList(\"xwiki\", \"angular\", \"2.1.11\", \"angular.css\")));\n\n        assertEquals(\"/xwiki/angular/2.1.11/angular.css\",\n            this.mocker.getComponentUnderTest().url(\"angular\", \"angular.css\"));\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void computeURLWithoutVersionAndNoExtensionMatchingWebJarId() throws Exception\n    {\n        WebJarsResourceReference resourceReference =\n            new WebJarsResourceReference(Arrays.asList(\"angular\", \"angular.css\"));\n        when(this.serializer.serialize(resourceReference)).thenReturn(\n            new ExtendedURL(Arrays.asList(\"xwiki\", \"angular\", \"angular.css\")));\n\n        assertEquals(\"/xwiki/angular/angular.css\", this.mocker.getComponentUnderTest().url(\"angular\", \"angular.css\"));\n    }","id":96378,"modified_method":"@Test\n    public void computeURLWithoutVersionAndNoExtensionMatchingWebJarId() throws Exception\n    {\n        WikiDescriptorManager wikiDescriptorManager = this.mocker.getInstance(WikiDescriptorManager.class);\n        when(wikiDescriptorManager.getCurrentWikiId()).thenReturn(\"math\");\n\n        WebJarsResourceReference resourceReference =\n            new WebJarsResourceReference(\"wiki:math\", Arrays.asList(\"angular\", \"angular.css\"));\n        when(this.serializer.serialize(resourceReference)).thenReturn(\n            new ExtendedURL(Arrays.asList(\"xwiki\", \"angular\", \"angular.css\")));\n\n        assertEquals(\"/xwiki/angular/angular.css\", this.mocker.getComponentUnderTest().url(\"angular\", \"angular.css\"));\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void computeJavaScriptURLWithSuffixAndNoParameters() throws Exception\n    {\n        WebJarsResourceReference resourceReference =\n            new WebJarsResourceReference(Arrays.asList(\"angular\", \"angular.js\"));\n        resourceReference.addParameter(\"r\", \"1\");\n        when(this.serializer.serialize(resourceReference)).thenReturn(\n            new ExtendedURL(Arrays.asList(\"xwiki\", \"angular\", \"angular.js\"), resourceReference.getParameters()));\n\n        assertEquals(\"/xwiki/angular/angular.js?r=1\", this.mocker.getComponentUnderTest().url(\"angular\", \"angular.js\"));\n    }","id":96379,"modified_method":"@Test\n    public void computeJavaScriptURLWithSuffixAndNoParameters() throws Exception\n    {\n        WikiDescriptorManager wikiDescriptorManager = this.mocker.getInstance(WikiDescriptorManager.class);\n        when(wikiDescriptorManager.getCurrentWikiId()).thenReturn(\"math\");\n\n        WebJarsResourceReference resourceReference =\n            new WebJarsResourceReference(\"wiki:math\", Arrays.asList(\"angular\", \"angular.js\"));\n        resourceReference.addParameter(\"r\", \"1\");\n        when(this.serializer.serialize(resourceReference)).thenReturn(\n            new ExtendedURL(Arrays.asList(\"xwiki\", \"angular\", \"angular.js\"), resourceReference.getParameters()));\n\n        assertEquals(\"/xwiki/angular/angular.js?r=1\", this.mocker.getComponentUnderTest().url(\"angular\", \"angular.js\"));\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void computeURLWithParameters() throws Exception\n    {\n        WebJarsResourceReference resourceReference = new WebJarsResourceReference(\n            Arrays.asList(\"angular\", \"2.1.11\", \"angular.js\"));\n        resourceReference.addParameter(\"evaluate\", \"true\");\n        resourceReference.addParameter(\"list\", Arrays.asList(\"one\", \"two\"));\n        ExtendedURL extendedURL = new ExtendedURL(Arrays.asList(\"xwiki\", \"angular\", \"2.1.11\", \"angular.js\"),\n            resourceReference.getParameters());\n        when(this.serializer.serialize(resourceReference)).thenReturn(extendedURL);\n\n        Map<String, Object> params = new LinkedHashMap<>();\n        params.put(\"version\", \"2.1.11\");\n        params.put(\"evaluate\", true);\n        params.put(\"list\", new String[] {\"one\", \"two\"});\n        assertEquals(\"/xwiki/angular/2.1.11/angular.js?evaluate=true&list=one&list=two\",\n            this.mocker.getComponentUnderTest().url(\"angular\", \"angular.js\", params));\n    }","id":96380,"modified_method":"@Test\n    public void computeURLWithParameters() throws Exception\n    {\n        WebJarsResourceReference resourceReference = new WebJarsResourceReference(\"wiki:wiki\",\n            Arrays.asList(\"angular\", \"2.1.11\", \"angular.js\"));\n        resourceReference.addParameter(\"evaluate\", \"true\");\n        resourceReference.addParameter(\"list\", Arrays.asList(\"one\", \"two\"));\n        ExtendedURL extendedURL = new ExtendedURL(Arrays.asList(\"xwiki\", \"angular\", \"2.1.11\", \"angular.js\"),\n            resourceReference.getParameters());\n        when(this.serializer.serialize(resourceReference)).thenReturn(extendedURL);\n\n        Map<String, Object> params = new LinkedHashMap<>();\n        params.put(\"version\", \"2.1.11\");\n        params.put(\"evaluate\", true);\n        params.put(\"list\", new String[] {\"one\", \"two\"});\n        assertEquals(\"/xwiki/angular/2.1.11/angular.js?evaluate=true&list=one&list=two\",\n            this.mocker.getComponentUnderTest().url(\"angular\", \"wiki:wiki\", \"angular.js\", params));\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void computeURLWithVersion() throws Exception\n    {\n        WebJarsResourceReference resourceReference = new WebJarsResourceReference(\n            Arrays.asList(\"ang:ular\", \"2.1.11\", \"angular.css\"));\n        // Test that colon is not interpreted as groupId/artifactId separator (for backwards compatibility).\n        when(this.serializer.serialize(resourceReference)).thenReturn(\n            new ExtendedURL(Arrays.asList(\"xwiki\", \"ang:ular\", \"2.1.11\", \"angular.css\")));\n\n        assertEquals(\"/xwiki/ang%3Aular/2.1.11/angular.css\",\n            this.mocker.getComponentUnderTest().url(\"ang:ular/2.1.11/angular.css\"));\n    }","id":96381,"modified_method":"@Test\n    public void computeURLWithVersion() throws Exception\n    {\n        WikiDescriptorManager wikiDescriptorManager = this.mocker.getInstance(WikiDescriptorManager.class);\n        when(wikiDescriptorManager.getCurrentWikiId()).thenReturn(\"math\");\n\n        WebJarsResourceReference resourceReference = new WebJarsResourceReference(\"wiki:math\",\n            Arrays.asList(\"ang:ular\", \"2.1.11\", \"angular.css\"));\n        // Test that colon is not interpreted as groupId/artifactId separator (for backwards compatibility).\n        when(this.serializer.serialize(resourceReference)).thenReturn(\n            new ExtendedURL(Arrays.asList(\"xwiki\", \"ang:ular\", \"2.1.11\", \"angular.css\")));\n\n        assertEquals(\"/xwiki/ang%3Aular/2.1.11/angular.css\",\n            this.mocker.getComponentUnderTest().url(\"ang:ular/2.1.11/angular.css\"));\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Test\n    public void testWebJars() throws Exception\n    {\n        // Delete pages that we create in the test\n        getUtil().rest().deletePage(getTestClassName(), getTestMethodName());\n\n        // Create a page in which:\n        // - we install a webjar in the main wiki\n        // - we use the WebJars Script Service to generate a URL for a resource inside that webjar\n        // - we create a link to that resource\n        // Then we click that link and verify we get the resource content.\n        //\n        // This test validates both the ability to generate webjars URL, the serving of webjars through the webjars URL\n        // and the ability to access a webjars installed in a specific wiki.\n        String content = \"{{velocity}}\\n\"\n            + \"#set ($job = $services.extension.install('org.webjars:AjaxQ', '0.0.2', 'wiki:mywiki'))\\n\"\n            + \"#set ($discard = $job.join())\\n\"\n            + \"installed: $services.extension.installed.getInstalledExtension('org.webjars:AjaxQ', 'wiki:mywiki').id\\n\"\n            + \"[[AjaxQ>>path:$services.webjars.url('org.webjars:AjaxQ', 'ajaxq.js', {'wiki' : 'mywiki'})]]\\n\"\n            + \"{{/velocity}}\";\n        ViewPage vp = getUtil().createPage(getTestClassName(), getTestMethodName(), content, \"WebJars Test\");\n\n        assertTrue(vp.getContent().contains(\"installed: org.webjars:AjaxQ-0.0.2\"));\n\n        // Click the link!\n        WebElement link = getDriver().findElementWithoutWaiting(\n            By.xpath(\"//a[@href = '/xwiki/webjars/AjaxQ/0.0.2/ajaxq.js?wiki=mywiki']\"));\n        link.click();\n\n        // Verify that the served resource is the one from the webjars\n        assertTrue(getDriver().getPageSource().contains(\"// AjaxQ jQuery Plugin\"));\n    }","id":96382,"modified_method":"@Test\n    public void testWebJars() throws Exception\n    {\n        // Delete pages that we create in the test\n        getUtil().rest().deletePage(getTestClassName(), getTestMethodName());\n\n        // Create a page in which:\n        // - we install a webjar in the main wiki\n        // - we use the WebJars Script Service to generate a URL for a resource inside that webjar\n        // - we create a link to that resource\n        // Then we click that link and verify we get the resource content.\n        //\n        // This test validates both the ability to generate webjars URL, the serving of webjars through the webjars URL\n        // and the ability to access a webjars installed in a specific wiki.\n        String content = \"{{velocity}}\\n\"\n            + \"#set ($job = $services.extension.install('org.webjars:AjaxQ', '0.0.2', 'wiki:mywiki'))\\n\"\n            + \"#set ($discard = $job.join())\\n\"\n            + \"installed: $services.extension.installed.getInstalledExtension('org.webjars:AjaxQ', 'wiki:mywiki').id\\n\"\n            + \"[[AjaxQ>>path:$services.webjars.url('org.webjars:AjaxQ', 'ajaxq.js', {'wiki' : 'mywiki'})]]\\n\"\n            + \"{{/velocity}}\";\n        ViewPage vp = getUtil().createPage(getTestClassName(), getTestMethodName(), content, \"WebJars Test\");\n\n        assertTrue(vp.getContent().contains(\"installed: org.webjars:AjaxQ-0.0.2\"));\n\n        // Click the link!\n        // Note: For understanding why there's a r=1 query string, see WebJarsScriptService#getResourceReference()\n        WebElement link = getDriver().findElementWithoutWaiting(\n            By.xpath(\"//a[@href = '/xwiki/webjars/wiki%3Amywiki/AjaxQ/0.0.2/ajaxq.js?r=1']\"));\n        link.click();\n\n        // Verify that the served resource is the one from the webjars\n        assertTrue(getDriver().getPageSource().contains(\"// AjaxQ jQuery Plugin\"));\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n    public ExtendedURL serialize(WebJarsResourceReference resourceReference)\n        throws SerializeResourceReferenceException, UnsupportedResourceReferenceException\n    {\n        List<String> segments = new ArrayList<>();\n\n        // Add the resource type segment.\n        segments.add(\"webjars\");\n\n        // Add the resource name\n        segments.addAll(resourceReference.getResourceSegments());\n\n        // Add all optional parameters\n        ExtendedURL extendedURL = new ExtendedURL(segments, resourceReference.getParameters());\n\n        // Normalize the URL to add the Context Path since we want a full relative URL to be returned.\n        return this.extendedURLNormalizer.normalize(extendedURL);\n    }","id":96383,"modified_method":"@Override\n    public ExtendedURL serialize(WebJarsResourceReference resourceReference)\n        throws SerializeResourceReferenceException, UnsupportedResourceReferenceException\n    {\n        List<String> segments = new ArrayList<>();\n\n        // Add the resource type segment.\n        segments.add(\"webjars\");\n\n        // Add the namespace\n        segments.add(resourceReference.getNamespace());\n\n        // Add the resource path segments\n        segments.addAll(resourceReference.getResourceSegments());\n\n        // Add all optional parameters\n        ExtendedURL extendedURL = new ExtendedURL(segments, resourceReference.getParameters());\n\n        // Normalize the URL to add the Context Path since we want a full relative URL to be returned.\n        return this.extendedURLNormalizer.normalize(extendedURL);\n    }","commit_id":"dbf66e26a775169c659ee44a2beaa8302714fd85","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n\tprotected UrlInfo parseRequest(Request request)\n\t{\n\t\tif (matches(request))\n\t\t{\n\t\t\tUrl url = request.getUrl();\n\n\t\t\t// try to extract page and component information from URL\n\t\t\tPageComponentInfo info = getPageComponentInfo(url);\n\n\t\t\tList<String> segments = url.getSegments();\n\n\t\t\t// load the page class\n\t\t\tString className;\n\t\t\tif (segments.size() >= 3)\n\t\t\t{\n\t\t\t\tclassName = segments.get(2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tclassName = segments.get(1);\n\t\t\t}\n\n\t\t\tClass<? extends IRequestablePage> pageClass = getPageClass(className);\n\n\t\t\tif (pageClass != null && IRequestablePage.class.isAssignableFrom(pageClass))\n\t\t\t{\n\t\t\t\tif (Application.exists())\n\t\t\t\t{\n\t\t\t\t\tApplication application = Application.get();\n\n\t\t\t\t\tif (application.getSecuritySettings().getEnforceMounts())\n\t\t\t\t\t{\n\t\t\t\t\t\t// we make an exception if the homepage itself was mounted, see WICKET-1898\n\t\t\t\t\t\tif (!pageClass.equals(application.getHomePage()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// WICKET-5094 only enforce mount if page is mounted\n\t\t\t\t\t\t\tif (isPageMounted(pageClass, application.getRootRequestMapperAsCompound()))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// extract the PageParameters from URL if there are any\n\t\t\t\tPageParameters pageParameters = extractPageParameters(request, 3,\n\t\t\t\t\tpageParametersEncoder);\n\n\t\t\t\treturn new UrlInfo(info, pageClass, pageParameters);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","id":96384,"modified_method":"@Override\n\tprotected UrlInfo parseRequest(Request request)\n\t{\n\t\tif (matches(request))\n\t\t{\n\t\t\tUrl url = request.getUrl();\n\n\t\t\t// try to extract page and component information from URL\n\t\t\tPageComponentInfo info = getPageComponentInfo(url);\n\n\t\t\tList<String> segments = url.getSegments();\n\n\t\t\t// load the page class\n\t\t\tString className;\n\t\t\tif (segments.size() >= 3)\n\t\t\t{\n\t\t\t\tclassName = segments.get(2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tclassName = segments.get(1);\n\t\t\t}\n\n\t\t\tif (Strings.isEmpty(className))\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tClass<? extends IRequestablePage> pageClass = getPageClass(className);\n\n\t\t\tif (pageClass != null && IRequestablePage.class.isAssignableFrom(pageClass))\n\t\t\t{\n\t\t\t\tif (Application.exists())\n\t\t\t\t{\n\t\t\t\t\tApplication application = Application.get();\n\n\t\t\t\t\tif (application.getSecuritySettings().getEnforceMounts())\n\t\t\t\t\t{\n\t\t\t\t\t\t// we make an exception if the homepage itself was mounted, see WICKET-1898\n\t\t\t\t\t\tif (!pageClass.equals(application.getHomePage()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// WICKET-5094 only enforce mount if page is mounted\n\t\t\t\t\t\t\tif (isPageMounted(pageClass, application.getRootRequestMapperAsCompound()))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// extract the PageParameters from URL if there are any\n\t\t\t\tPageParameters pageParameters = extractPageParameters(request, 3,\n\t\t\t\t\tpageParametersEncoder);\n\n\t\t\t\treturn new UrlInfo(info, pageClass, pageParameters);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","commit_id":"fac99dd61b7324aa2b450617917735946f98bf0c","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * filter out invalid class names for package mapper. getting trash for class names\n\t * can e.g. happen when the home page is in the same package that is mounted by package mapper\n\t * but the request was previously mapped by e.g. {@link HomePageMapper}. We then get some\n\t * strange url like '/example/..' and wicket tries to look up class name '..'.\n\t * <p/>\n\t *  @see <a href=\"https://issues.apache.org/jira/browse/WICKET-4303\">WICKET-4303<\/a>\n\t *  <p/>\n\t */\n\tprivate boolean isValidClassName(String className)\n\t{\n\t\t// darn simple check - feel free to enhance this method to your needs\n\t\tif (className == null)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t// java class names never start with '.'\n\t\tif (className.startsWith(\".\"))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}","id":96385,"modified_method":"/**\n\t * filter out invalid class names for package mapper. getting trash for class names\n\t * can e.g. happen when the home page is in the same package that is mounted by package mapper\n\t * but the request was previously mapped by e.g. {@link HomePageMapper}. We then get some\n\t * strange url like '/example/..' and wicket tries to look up class name '..'.\n\t * <p/>\n\t *  @see <a href=\"https://issues.apache.org/jira/browse/WICKET-4303\">WICKET-4303<\/a>\n\t *  <p/>\n\t */\n\tprivate boolean isValidClassName(String className)\n\t{\n\t\t// darn simple check - feel free to enhance this method to your needs\n\t\tif (Strings.isEmpty(className))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\t// java class names never start with '.'\n\t\tif (className.startsWith(\".\"))\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}","commit_id":"fac99dd61b7324aa2b450617917735946f98bf0c","url":"https://github.com/apache/wicket"},{"original_method":"@Override\n\tprotected UrlInfo parseRequest(Request request)\n\t{\n\t\tUrl url = request.getUrl();\n\t\tif (urlStartsWithMountedSegments(url))\n\t\t{\n\t\t\t// try to extract page and component information from URL\n\t\t\tPageComponentInfo info = getPageComponentInfo(url);\n\n\t\t\t// load the page class\n\t\t\tString name = url.getSegments().get(mountSegments.length);\n\t\t\tString className = cleanClassName(name);\n\n\t\t\tif (isValidClassName(className) == false)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tclassName = transformFromUrl(className);\n\t\t\tString fullyQualifiedClassName = packageName.getName() + '.' + className;\n\t\t\tClass<? extends IRequestablePage> pageClass = getPageClass(fullyQualifiedClassName);\n\n\t\t\tif (pageClass != null && Modifier.isAbstract(pageClass.getModifiers()) == false &&\n\t\t\t\tIRequestablePage.class.isAssignableFrom(pageClass))\n\t\t\t{\n\t\t\t\t// extract the PageParameters from URL if there are any\n\t\t\t\tUrl urlWithoutPageSegment = new Url(url);\n\t\t\t\turlWithoutPageSegment.getSegments().remove(mountSegments.length);\n\t\t\t\tRequest requestWithoutPageSegment = request.cloneWithUrl(urlWithoutPageSegment);\n\t\t\t\tPageParameters pageParameters = extractPageParameters(requestWithoutPageSegment, urlWithoutPageSegment);\n\n\t\t\t\treturn new UrlInfo(info, pageClass, pageParameters);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","id":96386,"modified_method":"@Override\n\tprotected UrlInfo parseRequest(Request request)\n\t{\n\t\tUrl url = request.getUrl();\n\t\tif (urlStartsWithMountedSegments(url))\n\t\t{\n\t\t\t// try to extract page and component information from URL\n\t\t\tPageComponentInfo info = getPageComponentInfo(url);\n\n\t\t\tfinal List<String> segments = url.getSegments();\n\t\t\tif (segments.size() <= mountSegments.length)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\t// load the page class\n\t\t\tString name = segments.get(mountSegments.length);\n\n\t\t\tif (Strings.isEmpty(name))\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tString className = cleanClassName(name);\n\n\t\t\tif (isValidClassName(className) == false)\n\t\t\t{\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tclassName = transformFromUrl(className);\n\t\t\tString fullyQualifiedClassName = packageName.getName() + '.' + className;\n\t\t\tClass<? extends IRequestablePage> pageClass = getPageClass(fullyQualifiedClassName);\n\n\t\t\tif (pageClass != null && Modifier.isAbstract(pageClass.getModifiers()) == false &&\n\t\t\t\tIRequestablePage.class.isAssignableFrom(pageClass))\n\t\t\t{\n\t\t\t\t// extract the PageParameters from URL if there are any\n\t\t\t\tUrl urlWithoutPageSegment = new Url(url);\n\t\t\t\turlWithoutPageSegment.getSegments().remove(mountSegments.length);\n\t\t\t\tRequest requestWithoutPageSegment = request.cloneWithUrl(urlWithoutPageSegment);\n\t\t\t\tPageParameters pageParameters = extractPageParameters(requestWithoutPageSegment, urlWithoutPageSegment);\n\n\t\t\t\treturn new UrlInfo(info, pageClass, pageParameters);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","commit_id":"fac99dd61b7324aa2b450617917735946f98bf0c","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @see AbstractBookmarkableMapper#parseRequest(org.apache.wicket.request.Request)\n\t */\n\t@Override\n\tprotected UrlInfo parseRequest(Request request)\n\t{\n\t\tUrl url = request.getUrl();\n\t\tif (matches(url))\n\t\t{\n\t\t\t// try to extract page and component information from URL\n\t\t\tPageComponentInfo info = getPageComponentInfo(url);\n\n\t\t\t// load the page class\n\t\t\tString className = url.getSegments().get(2);\n\t\t\tClass<? extends IRequestablePage> pageClass = getPageClass(className);\n\n\t\t\tif (pageClass != null && IRequestablePage.class.isAssignableFrom(pageClass))\n\t\t\t{\n\t\t\t\tif (Application.exists())\n\t\t\t\t{\n\t\t\t\t\tApplication application = Application.get();\n\n\t\t\t\t\tif (application.getSecuritySettings().getEnforceMounts())\n\t\t\t\t\t{\n\t\t\t\t\t\t// we make an excepion if the homepage itself was mounted, see WICKET-1898\n\t\t\t\t\t\tif (!pageClass.equals(application.getHomePage()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// WICKET-5094 only enforce mount if page is mounted\n\t\t\t\t\t\t\tUrl reverseUrl = application.getRootRequestMapper().mapHandler(\n\t\t\t\t\t\t\t\tnew RenderPageRequestHandler(new PageProvider(pageClass)));\n\t\t\t\t\t\t\tif (!matches(reverseUrl))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// extract the PageParameters from URL if there are any\n\t\t\t\tPageParameters pageParameters = extractPageParameters(request, 3,\n\t\t\t\t\tpageParametersEncoder);\n\n\t\t\t\treturn new UrlInfo(info, pageClass, pageParameters);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","id":96387,"modified_method":"/**\n\t * @see AbstractBookmarkableMapper#parseRequest(org.apache.wicket.request.Request)\n\t */\n\t@Override\n\tprotected UrlInfo parseRequest(Request request)\n\t{\n\t\tif (matches(request))\n\t\t{\n\t\t\tUrl url = request.getUrl();\n\n\t\t\t// try to extract page and component information from URL\n\t\t\tPageComponentInfo info = getPageComponentInfo(url);\n\n\t\t\tList<String> segments = url.getSegments();\n\n\t\t\t// load the page class\n\t\t\tString className;\n\t\t\tif (segments.size() >= 3)\n\t\t\t{\n\t\t\t\tclassName = segments.get(2);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tclassName = segments.get(1);\n\t\t\t}\n\n\t\t\tClass<? extends IRequestablePage> pageClass = getPageClass(className);\n\n\t\t\tif (pageClass != null && IRequestablePage.class.isAssignableFrom(pageClass))\n\t\t\t{\n\t\t\t\tif (Application.exists())\n\t\t\t\t{\n\t\t\t\t\tApplication application = Application.get();\n\n\t\t\t\t\tif (application.getSecuritySettings().getEnforceMounts())\n\t\t\t\t\t{\n\t\t\t\t\t\t// we make an exception if the homepage itself was mounted, see WICKET-1898\n\t\t\t\t\t\tif (!pageClass.equals(application.getHomePage()))\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// WICKET-5094 only enforce mount if page is mounted\n\t\t\t\t\t\t\tUrl reverseUrl = application.getRootRequestMapper().mapHandler(\n\t\t\t\t\t\t\t\tnew RenderPageRequestHandler(new PageProvider(pageClass)));\n\t\t\t\t\t\t\tif (!matches(request.cloneWithUrl(reverseUrl)))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn null;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// extract the PageParameters from URL if there are any\n\t\t\t\tPageParameters pageParameters = extractPageParameters(request, 3,\n\t\t\t\t\tpageParametersEncoder);\n\n\t\t\t\treturn new UrlInfo(info, pageClass, pageParameters);\n\t\t\t}\n\t\t}\n\t\treturn null;\n\t}","commit_id":"6e794ad060af7512a6f0e9a0d445037047aad0e1","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * @see AbstractBookmarkableMapper#getCompatibilityScore(org.apache.wicket.request.Request)\n\t */\n\t@Override\n\tpublic int getCompatibilityScore(Request request)\n\t{\n\t\tint score = 0;\n\t\tUrl url = request.getUrl();\n\t\tif (matches(url))\n\t\t{\n\t\t\tscore = Integer.MAX_VALUE;\n\t\t}\n\t\treturn score;\n\t}","id":96388,"modified_method":"/**\n\t * @see AbstractBookmarkableMapper#getCompatibilityScore(org.apache.wicket.request.Request)\n\t */\n\t@Override\n\tpublic int getCompatibilityScore(Request request)\n\t{\n\t\tint score = 0;\n\t\tif (matches(request))\n\t\t{\n\t\t\tscore = Integer.MAX_VALUE;\n\t\t}\n\t\treturn score;\n\t}","commit_id":"6e794ad060af7512a6f0e9a0d445037047aad0e1","url":"https://github.com/apache/wicket"},{"original_method":"public DistributableSingleSignOn(SSO<Account, String, Void> sso, SessionManagerRegistry registry, Batcher batcher) {\n        this.sso = sso;\n        this.registry = registry;\n        this.batcher = batcher;\n    }","id":96389,"modified_method":"public DistributableSingleSignOn(SSO<Account, String, Void> sso, SessionManagerRegistry registry, Batch batch) {\n        this.sso = sso;\n        this.registry = registry;\n        this.batch = batch;\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void remove(Session session) {\n        try (Batch batch = this.batcher.startBatch()) {\n            this.sso.getSessions().removeSession(session.getSessionManager().getDeploymentName());\n        }\n    }","id":96390,"modified_method":"@Override\n    public void remove(Session session) {\n        this.sso.getSessions().removeSession(session.getSessionManager().getDeploymentName());\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void add(Session session) {\n        try (Batch batch = this.batcher.startBatch()) {\n            this.sso.getSessions().addSession(session.getSessionManager().getDeploymentName(), session.getId());\n        }\n    }","id":96391,"modified_method":"@Override\n    public void add(Session session) {\n        this.sso.getSessions().addSession(session.getSessionManager().getDeploymentName(), session.getId());\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void removeSingleSignOn(String id) {\n        Batcher batcher = this.manager.getBatcher();\n        try (Batch batch = batcher.startBatch()) {\n            SSO<Account, String, Void> sso = this.manager.findSSO(id);\n            if (sso != null) {\n                sso.invalidate();\n            }\n        }\n    }","id":96392,"modified_method":"@Override\n    public void removeSingleSignOn(String id) {\n        Batch batch = this.manager.getBatcher().startBatch();\n        SSO<Account, String, Void> sso = this.manager.findSSO(id);\n        if (sso != null) {\n            sso.invalidate();\n            batch.close();\n        } else {\n            batch.discard();\n        }\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public SingleSignOn findSingleSignOn(String id) {\n        Batcher batcher = this.manager.getBatcher();\n        try (Batch batch = batcher.startBatch()) {\n            SSO<Account, String, Void> sso = this.manager.findSSO(id);\n            return (sso != null) ? new DistributableSingleSignOn(sso, this.registry, batcher) : null;\n        }\n    }","id":96393,"modified_method":"@Override\n    public SingleSignOn findSingleSignOn(String id) {\n        Batch batch = this.manager.getBatcher().startBatch();\n        SSO<Account, String, Void> sso = this.manager.findSSO(id);\n        if (sso == null) {\n            batch.discard();\n            return null;\n        }\n        return new DistributableSingleSignOn(sso, this.registry, batch);\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public SingleSignOn createSingleSignOn(Account account, String mechanism) {\n        String id = this.manager.createIdentifier();\n        Batcher batcher = this.manager.getBatcher();\n        try (Batch batch = batcher.startBatch()) {\n            SSO<Account, String, Void> sso = this.manager.createSSO(id);\n            Authentication<Account> authentication = sso.getAuthentication();\n            authentication.setIdentity(account);\n            authentication.setType(AuthenticationType.valueOf(mechanism));\n            return new DistributableSingleSignOn(sso, this.registry, batcher);\n        }\n    }","id":96394,"modified_method":"@Override\n    public SingleSignOn createSingleSignOn(Account account, String mechanism) {\n        String id = this.manager.createIdentifier();\n        Batch batch = this.manager.getBatcher().startBatch();\n        SSO<Account, String, Void> sso = this.manager.createSSO(id);\n        Authentication<Account> authentication = sso.getAuthentication();\n        authentication.setIdentity(account);\n        authentication.setType(AuthenticationType.valueOf(mechanism));\n        return new DistributableSingleSignOn(sso, this.registry, batch);\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void createSingleSignOn() {\n        String id = \"sso\";\n        Batcher batcher = mock(Batcher.class);\n        Batch batch = mock(Batch.class);\n        Account account = mock(Account.class);\n        SSO<Account, String, Void> sso = mock(SSO.class);\n        Authentication<Account> authentication = mock(Authentication.class);\n        String authenticationType = HttpServletRequest.BASIC_AUTH;\n\n        when(this.manager.createIdentifier()).thenReturn(id);\n        when(this.manager.getBatcher()).thenReturn(batcher);\n        when(batcher.startBatch()).thenReturn(batch);\n        when(this.manager.createSSO(id)).thenReturn(sso);\n        when(sso.getAuthentication()).thenReturn(authentication);\n\n        SingleSignOn result = this.subject.createSingleSignOn(account, authenticationType);\n\n        assertNotNull(result);\n\n        verify(authentication).setIdentity(account);\n        verify(authentication).setType(AuthenticationType.BASIC);\n        verify(batch).close();\n    }","id":96395,"modified_method":"@Test\n    public void createSingleSignOn() {\n        String id = \"sso\";\n        Batcher batcher = mock(Batcher.class);\n        Batch batch = mock(Batch.class);\n        Account account = mock(Account.class);\n        SSO<Account, String, Void> sso = mock(SSO.class);\n        Authentication<Account> authentication = mock(Authentication.class);\n        String authenticationType = HttpServletRequest.BASIC_AUTH;\n\n        when(this.manager.createIdentifier()).thenReturn(id);\n        when(this.manager.getBatcher()).thenReturn(batcher);\n        when(batcher.startBatch()).thenReturn(batch);\n        when(this.manager.createSSO(id)).thenReturn(sso);\n        when(sso.getAuthentication()).thenReturn(authentication);\n\n        SingleSignOn result = this.subject.createSingleSignOn(account, authenticationType);\n\n        assertNotNull(result);\n\n        verify(authentication).setIdentity(account);\n        verify(authentication).setType(AuthenticationType.BASIC);\n        verifyNoMoreInteractions(batch);\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void findSingleSignOn() {\n        String id = \"sso\";\n        Batcher batcher = mock(Batcher.class);\n        Batch batch = mock(Batch.class);\n\n        when(this.manager.getBatcher()).thenReturn(batcher);\n        when(batcher.startBatch()).thenReturn(batch);\n        when(this.manager.findSSO(id)).thenReturn(null);\n\n        SingleSignOn result = this.subject.findSingleSignOn(id);\n\n        assertNull(result);\n\n        verify(batch).close();\n        reset(batch);\n\n        SSO<Account, String, Void> sso = mock(SSO.class);\n\n        when(this.manager.findSSO(id)).thenReturn(sso);\n\n        result = this.subject.findSingleSignOn(id);\n\n        assertNotNull(result);\n\n        verify(batch).close();\n    }","id":96396,"modified_method":"@Test\n    public void findSingleSignOn() {\n        String id = \"sso\";\n        Batcher batcher = mock(Batcher.class);\n        Batch batch = mock(Batch.class);\n\n        when(this.manager.getBatcher()).thenReturn(batcher);\n        when(batcher.startBatch()).thenReturn(batch);\n        when(this.manager.findSSO(id)).thenReturn(null);\n\n        SingleSignOn result = this.subject.findSingleSignOn(id);\n\n        assertNull(result);\n\n        verify(batch).discard();\n        reset(batch);\n\n        SSO<Account, String, Void> sso = mock(SSO.class);\n\n        when(this.manager.findSSO(id)).thenReturn(sso);\n\n        result = this.subject.findSingleSignOn(id);\n\n        assertNotNull(result);\n\n        verifyNoMoreInteractions(batch);\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void removeSingleSignOn() {\n        String id = \"sso\";\n        Batcher batcher = mock(Batcher.class);\n        Batch batch = mock(Batch.class);\n\n        when(this.manager.getBatcher()).thenReturn(batcher);\n        when(batcher.startBatch()).thenReturn(batch);\n        when(this.manager.findSSO(id)).thenReturn(null);\n\n        this.subject.removeSingleSignOn(id);\n\n        verify(batch).close();\n        reset(batch);\n\n        SSO<Account, String, Void> sso = mock(SSO.class);\n\n        when(this.manager.findSSO(id)).thenReturn(sso);\n\n        this.subject.removeSingleSignOn(id);\n\n        verify(sso).invalidate();\n        verify(batch).close();\n    }","id":96397,"modified_method":"@Test\n    public void removeSingleSignOn() {\n        String id = \"sso\";\n        Batcher batcher = mock(Batcher.class);\n        Batch batch = mock(Batch.class);\n\n        when(this.manager.getBatcher()).thenReturn(batcher);\n        when(batcher.startBatch()).thenReturn(batch);\n        when(this.manager.findSSO(id)).thenReturn(null);\n\n        this.subject.removeSingleSignOn(id);\n\n        verify(batch).discard();\n        reset(batch);\n\n        SSO<Account, String, Void> sso = mock(SSO.class);\n\n        when(this.manager.findSSO(id)).thenReturn(sso);\n\n        this.subject.removeSingleSignOn(id);\n\n        verify(sso).invalidate();\n        verify(batch).close();\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void iterator() {\n        Sessions<String> sessions = mock(Sessions.class);\n        SessionManager manager = mock(SessionManager.class);\n        Session session = mock(Session.class);\n        String deployment = \"deployment\";\n        String sessionId = \"session\";\n\n        when(this.sso.getSessions()).thenReturn(sessions);\n        when(sessions.getDeployments()).thenReturn(Collections.singleton(deployment));\n        when(sessions.getSession(deployment)).thenReturn(sessionId);\n        when(this.registry.getSessionManager(deployment)).thenReturn(manager);\n        when(manager.getSession(sessionId)).thenReturn(session);\n\n        Iterator<Session> result = this.subject.iterator();\n\n        assertTrue(result.hasNext());\n        assertSame(session, result.next());\n        assertFalse(result.hasNext());\n    }","id":96398,"modified_method":"@Test\n    public void iterator() {\n        Sessions<String> sessions = mock(Sessions.class);\n        SessionManager manager = mock(SessionManager.class);\n        Session session = mock(Session.class);\n        String deployment = \"deployment\";\n        String sessionId = \"session\";\n\n        when(this.sso.getSessions()).thenReturn(sessions);\n        when(sessions.getDeployments()).thenReturn(Collections.singleton(deployment));\n        when(sessions.getSession(deployment)).thenReturn(sessionId);\n        when(this.registry.getSessionManager(deployment)).thenReturn(manager);\n        when(manager.getSession(sessionId)).thenReturn(session);\n\n        Iterator<Session> result = this.subject.iterator();\n\n        assertTrue(result.hasNext());\n        assertSame(session, result.next());\n        assertFalse(result.hasNext());\n\n        verifyZeroInteractions(this.batch);\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void getSession() {\n        String deployment = \"deployment\";\n        String sessionId = \"session\";\n        Session session = mock(Session.class);\n        SessionManager manager = mock(SessionManager.class);\n        Sessions<String> sessions = mock(Sessions.class);\n\n        when(session.getSessionManager()).thenReturn(manager);\n        when(manager.getDeploymentName()).thenReturn(deployment);\n        when(this.sso.getSessions()).thenReturn(sessions);\n        when(sessions.getSession(deployment)).thenReturn(sessionId);\n        when(manager.getSession(sessionId)).thenReturn(session);\n\n        Session result = this.subject.getSession(manager);\n\n        assertSame(session, result);\n    }","id":96399,"modified_method":"@Test\n    public void getSession() {\n        String deployment = \"deployment\";\n        String sessionId = \"session\";\n        Session session = mock(Session.class);\n        SessionManager manager = mock(SessionManager.class);\n        Sessions<String> sessions = mock(Sessions.class);\n\n        when(session.getSessionManager()).thenReturn(manager);\n        when(manager.getDeploymentName()).thenReturn(deployment);\n        when(this.sso.getSessions()).thenReturn(sessions);\n        when(sessions.getSession(deployment)).thenReturn(sessionId);\n        when(manager.getSession(sessionId)).thenReturn(session);\n\n        Session result = this.subject.getSession(manager);\n\n        assertSame(session, result);\n\n        verifyZeroInteractions(this.batch);\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void add() {\n        String deployment = \"deployment\";\n        String sessionId = \"session\";\n        Session session = mock(Session.class);\n        SessionManager manager = mock(SessionManager.class);\n        Sessions<String> sessions = mock(Sessions.class);\n\n        when(session.getId()).thenReturn(sessionId);\n        when(session.getSessionManager()).thenReturn(manager);\n        when(manager.getDeploymentName()).thenReturn(deployment);\n        when(this.sso.getSessions()).thenReturn(sessions);\n\n        this.subject.add(session);\n\n        verify(sessions).addSession(deployment, sessionId);\n    }","id":96400,"modified_method":"@Test\n    public void add() {\n        String deployment = \"deployment\";\n        String sessionId = \"session\";\n        Session session = mock(Session.class);\n        SessionManager manager = mock(SessionManager.class);\n        Sessions<String> sessions = mock(Sessions.class);\n\n        when(session.getId()).thenReturn(sessionId);\n        when(session.getSessionManager()).thenReturn(manager);\n        when(manager.getDeploymentName()).thenReturn(deployment);\n        when(this.sso.getSessions()).thenReturn(sessions);\n\n        this.subject.add(session);\n\n        verify(sessions).addSession(deployment, sessionId);\n        verifyZeroInteractions(this.batch);\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void contains() {\n        String deployment = \"deployment\";\n        Session session = mock(Session.class);\n        SessionManager manager = mock(SessionManager.class);\n        Sessions<String> sessions = mock(Sessions.class);\n\n        when(session.getSessionManager()).thenReturn(manager);\n        when(manager.getDeploymentName()).thenReturn(deployment);\n        when(this.sso.getSessions()).thenReturn(sessions);\n        when(sessions.getDeployments()).thenReturn(Collections.<String>emptySet());\n\n        boolean result = this.subject.contains(session);\n\n        assertFalse(result);\n\n        when(sessions.getDeployments()).thenReturn(Collections.singleton(deployment));\n\n        result = this.subject.contains(session);\n\n        assertTrue(result);\n    }","id":96401,"modified_method":"@Test\n    public void contains() {\n        String deployment = \"deployment\";\n        Session session = mock(Session.class);\n        SessionManager manager = mock(SessionManager.class);\n        Sessions<String> sessions = mock(Sessions.class);\n\n        when(session.getSessionManager()).thenReturn(manager);\n        when(manager.getDeploymentName()).thenReturn(deployment);\n        when(this.sso.getSessions()).thenReturn(sessions);\n        when(sessions.getDeployments()).thenReturn(Collections.<String>emptySet());\n\n        boolean result = this.subject.contains(session);\n\n        assertFalse(result);\n\n        verifyZeroInteractions(this.batch);\n\n        when(sessions.getDeployments()).thenReturn(Collections.singleton(deployment));\n\n        result = this.subject.contains(session);\n\n        assertTrue(result);\n\n        verifyZeroInteractions(this.batch);\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void getMechanismName() {\n        AuthenticationType type = AuthenticationType.CLIENT_CERT;\n        Authentication<Account> authentication = mock(Authentication.class);\n\n        when(this.sso.getAuthentication()).thenReturn(authentication);\n        when(authentication.getType()).thenReturn(type);\n\n        String result = this.subject.getMechanismName();\n\n        assertEquals(HttpServletRequest.CLIENT_CERT_AUTH, result);\n    }","id":96402,"modified_method":"@Test\n    public void getMechanismName() {\n        AuthenticationType type = AuthenticationType.CLIENT_CERT;\n        Authentication<Account> authentication = mock(Authentication.class);\n\n        when(this.sso.getAuthentication()).thenReturn(authentication);\n        when(authentication.getType()).thenReturn(type);\n\n        String result = this.subject.getMechanismName();\n\n        assertEquals(HttpServletRequest.CLIENT_CERT_AUTH, result);\n\n        verifyZeroInteractions(this.batch);\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void getAccount() {\n        Account account = mock(Account.class);\n        Authentication<Account> authentication = mock(Authentication.class);\n\n        when(this.sso.getAuthentication()).thenReturn(authentication);\n        when(authentication.getIdentity()).thenReturn(account);\n\n        Account result = this.subject.getAccount();\n\n        assertSame(account, result);\n    }","id":96403,"modified_method":"@Test\n    public void getAccount() {\n        Account account = mock(Account.class);\n        Authentication<Account> authentication = mock(Authentication.class);\n\n        when(this.sso.getAuthentication()).thenReturn(authentication);\n        when(authentication.getIdentity()).thenReturn(account);\n\n        Account result = this.subject.getAccount();\n\n        assertSame(account, result);\n\n        verifyZeroInteractions(this.batch);\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void getId() {\n        String id = \"sso\";\n\n        when(this.sso.getId()).thenReturn(id);\n\n        String result = this.subject.getId();\n\n        assertSame(id, result);\n    }","id":96404,"modified_method":"@Test\n    public void getId() {\n        String id = \"sso\";\n\n        when(this.sso.getId()).thenReturn(id);\n\n        String result = this.subject.getId();\n\n        assertSame(id, result);\n\n        verifyZeroInteractions(this.batch);\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void remove() {\n        String deployment = \"deployment\";\n        Session session = mock(Session.class);\n        SessionManager manager = mock(SessionManager.class);\n        Sessions<String> sessions = mock(Sessions.class);\n\n        when(session.getSessionManager()).thenReturn(manager);\n        when(manager.getDeploymentName()).thenReturn(deployment);\n        when(this.sso.getSessions()).thenReturn(sessions);\n\n        this.subject.remove(session);\n\n        verify(sessions).removeSession(deployment);\n    }","id":96405,"modified_method":"@Test\n    public void remove() {\n        String deployment = \"deployment\";\n        Session session = mock(Session.class);\n        SessionManager manager = mock(SessionManager.class);\n        Sessions<String> sessions = mock(Sessions.class);\n\n        when(session.getSessionManager()).thenReturn(manager);\n        when(manager.getDeploymentName()).thenReturn(deployment);\n        when(this.sso.getSessions()).thenReturn(sessions);\n\n        this.subject.remove(session);\n\n        verify(sessions).removeSession(deployment);\n        verifyZeroInteractions(this.batch);\n    }","commit_id":"9c1e6c628f607b21b6fe33cf4d58b6edc9c201e1","url":"https://github.com/wildfly/wildfly"},{"original_method":"protected void checkRestrictedType(EObject context, final EStructuralFeature feature, final JvmDeclaredType typeToCheck) {\n\t\tIJavaProject javaProject = projectProvider.getJavaProject(context.eResource().getResourceSet());\n\t\tif(javaProject == null)\n\t\t\treturn;\n\t\tIJavaElement javaElement = javaElementFinder.findElementFor(typeToCheck);\n\t\tif(javaElement == null)\n\t\t\treturn;\n\t\tfinal IJavaProject declaringJavaProject = javaElement.getJavaProject();\n\t\tif(declaringJavaProject == null)\n\t\t\treturn;\n\t\tString packageName = typeToCheck.getPackageName();\n\t\tfinal String simpleName = typeToCheck.getSimpleName();\n\t\tif(!getContext().containsKey(typeToCheck)){\n\t\t\tIJavaSearchScope searchScope = SearchEngine.createJavaSearchScope(new IJavaElement[] { javaProject });\n\t\t\tBasicSearchEngine searchEngine = new BasicSearchEngine();\n\t\t\ttry {\n\t\t\t\tsearchEngine.searchAllTypeNames(packageName.toCharArray(), SearchPattern.R_EXACT_MATCH,\n\t\t\t\t\t\tsimpleName.toCharArray(), SearchPattern.R_EXACT_MATCH, IJavaSearchConstants.TYPE,\n\t\t\t\t\t\tsearchScope, new IRestrictedAccessTypeRequestor() {\n\t\t\t\t\t\t\tpublic void acceptType(int modifiers, char[] packageName, char[] simpleTypeName,\n\t\t\t\t\t\t\t\t\tchar[][] enclosingTypeNames, String path, AccessRestriction access) {\n\t\t\t\t\t\t\t\tif(access != null){\n\t\t\t\t\t\t\t\t\tif (access.getProblemId() == IProblem.ForbiddenReference) {\n\t\t\t\t\t\t\t\t\t\tgetContext().put(typeToCheck, FORBIDDENREFERENCEID);\n\t\t\t\t\t\t\t\t\t} else if (access.getProblemId() == IProblem.DiscouragedReference) {\n\t\t\t\t\t\t\t\t\t\tgetContext().put(typeToCheck, DISCOURAGEDREFERENCEID);\n\t\t\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\t\t\tgetContext().put(typeToCheck, VALIDREFERENCEID);\n\t\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\t\tgetContext().put(typeToCheck, VALIDREFERENCEID);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, new NullProgressMonitor());\n\t\t\t} catch (JavaModelException e) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\t\tObject element = getContext().get(typeToCheck);\n\t\tif(element != null){\n\t\t\tif(element.equals(FORBIDDENREFERENCEID)){\n\t\t\t\terror(\"Access restriction: The type \" + simpleName + \" is not accessible due to restriction on required project \" + declaringJavaProject.getElementName(), feature, FORBIDDEN_REFERENCE);\n\t\t\t} else if(element.equals(DISCOURAGEDREFERENCEID)){\n\t\t\t\twarning(\"Discouraged access: The type \" + simpleName + \" is not accessible due to restriction on required project \" + declaringJavaProject.getElementName(), feature, DISCOURAGED_REFERENCE);\n\t\t\t}\n\t\t}\n\t}","id":96406,"modified_method":"protected void checkRestrictedType(EObject context, final EStructuralFeature feature, final JvmDeclaredType typeToCheck) {\n\t\tIJavaProject javaProject = projectProvider.getJavaProject(context.eResource().getResourceSet());\n\t\tif(javaProject == null)\n\t\t\treturn;\n\t\tIJavaElement javaElement = javaElementFinder.findElementFor(typeToCheck);\n\t\tif(javaElement == null)\n\t\t\treturn;\n\t\tfinal IJavaProject declaringJavaProject = javaElement.getJavaProject();\n\t\tif(declaringJavaProject == null)\n\t\t\treturn;\n\t\tString packageName = typeToCheck.getPackageName();\n\t\tfinal String simpleName = typeToCheck.getSimpleName();\n\t\tif(!getContext().containsKey(typeToCheck)){\n\t\t\tIJavaSearchScope searchScope = SearchEngine.createJavaSearchScope(new IJavaElement[] { javaProject });\n\t\t\tBasicSearchEngine searchEngine = new BasicSearchEngine();\n\t\t\ttry {\n\t\t\t\tsearchEngine.searchAllTypeNames(packageName != null ? packageName.toCharArray() : CharOperation.NO_CHAR, SearchPattern.R_EXACT_MATCH,\n\t\t\t\t\t\tsimpleName.toCharArray(), SearchPattern.R_EXACT_MATCH, IJavaSearchConstants.TYPE,\n\t\t\t\t\t\tsearchScope, new IRestrictedAccessTypeRequestor() {\n\t\t\t\t\t\t\tpublic void acceptType(int modifiers, char[] packageName, char[] simpleTypeName,\n\t\t\t\t\t\t\t\t\tchar[][] enclosingTypeNames, String path, AccessRestriction access) {\n\t\t\t\t\t\t\t\tif(access != null){\n\t\t\t\t\t\t\t\t\tif (access.getProblemId() == IProblem.ForbiddenReference) {\n\t\t\t\t\t\t\t\t\t\tgetContext().put(typeToCheck, FORBIDDENREFERENCEID);\n\t\t\t\t\t\t\t\t\t} else if (access.getProblemId() == IProblem.DiscouragedReference) {\n\t\t\t\t\t\t\t\t\t\tgetContext().put(typeToCheck, DISCOURAGEDREFERENCEID);\n\t\t\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\t\t\tgetContext().put(typeToCheck, VALIDREFERENCEID);\n\t\t\t\t\t\t\t\t} else\n\t\t\t\t\t\t\t\t\tgetContext().put(typeToCheck, VALIDREFERENCEID);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}, IJavaSearchConstants.WAIT_UNTIL_READY_TO_SEARCH, new NullProgressMonitor());\n\t\t\t} catch (JavaModelException e) {\n\t\t\t\t// Ignore\n\t\t\t}\n\t\t}\n\t\tObject element = getContext().get(typeToCheck);\n\t\tif(element != null){\n\t\t\tif(element.equals(FORBIDDENREFERENCEID)){\n\t\t\t\terror(\"Access restriction: The type \" + simpleName + \" is not accessible due to restriction on required project \" + declaringJavaProject.getElementName(), feature, FORBIDDEN_REFERENCE);\n\t\t\t} else if(element.equals(DISCOURAGEDREFERENCEID)){\n\t\t\t\twarning(\"Discouraged access: The type \" + simpleName + \" is not accessible due to restriction on required project \" + declaringJavaProject.getElementName(), feature, DISCOURAGED_REFERENCE);\n\t\t\t}\n\t\t}\n\t}","commit_id":"d9054b47a0d6205699e4088bc0f833718c817a50","url":"https://github.com/eclipse/xtext"},{"original_method":"private KeyStore getStore(String type, String provider, String path,\n            String pass) throws IOException {\n\n        KeyStore ks = null;\n        InputStream istream = null;\n        try {\n            if (provider == null) {\n                ks = KeyStore.getInstance(type);\n            } else {\n                ks = KeyStore.getInstance(type, provider);\n            }\n            if(!(\"PKCS11\".equalsIgnoreCase(type) ||\n                    \"\".equalsIgnoreCase(path))) {\n                File keyStoreFile = new File(path);\n                if (!keyStoreFile.isAbsolute()) {\n                    keyStoreFile = new File(System.getProperty(\"catalina.base\"),\n                                            path);\n                }\n                istream = new FileInputStream(keyStoreFile);\n            }\n\n            ks.load(istream, pass.toCharArray());\n        } catch (FileNotFoundException fnfe) {\n            log.error(sm.getString(\"jsse.keystore_load_failed\", type, path,\n                    fnfe.getMessage()), fnfe);\n            throw fnfe;\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"jsse.keystore_load_failed\", type, path,\n                    ioe.getMessage()), ioe);\n            throw ioe;      \n        } catch(Exception ex) {\n            String msg = sm.getString(\"jsse.keystore_load_failed\", type, path,\n                    ex.getMessage());\n            log.error(msg, ex);\n            throw new IOException(msg);\n        } finally {\n            if (istream != null) {\n                try {\n                    istream.close();\n                } catch (IOException ioe) {\n                    // Do nothing\n                }\n            }\n        }\n\n        return ks;\n    }","id":96407,"modified_method":"private KeyStore getStore(String type, String provider, String path,\n            String pass) throws IOException {\n\n        KeyStore ks = null;\n        InputStream istream = null;\n        try {\n            if (provider == null) {\n                ks = KeyStore.getInstance(type);\n            } else {\n                ks = KeyStore.getInstance(type, provider);\n            }\n            if(!(\"PKCS11\".equalsIgnoreCase(type) ||\n                    \"\".equalsIgnoreCase(path))) {\n                File keyStoreFile = new File(path);\n                if (!keyStoreFile.isAbsolute()) {\n                    keyStoreFile = new File(System.getProperty(\"catalina.base\"),\n                                            path);\n                }\n                istream = new FileInputStream(keyStoreFile);\n            }\n            \n            char[] storePass = null;\n            if (pass != null) {\n                storePass = pass.toCharArray(); \n            }\n            ks.load(istream, storePass);\n        } catch (FileNotFoundException fnfe) {\n            log.error(sm.getString(\"jsse.keystore_load_failed\", type, path,\n                    fnfe.getMessage()), fnfe);\n            throw fnfe;\n        } catch (IOException ioe) {\n            log.error(sm.getString(\"jsse.keystore_load_failed\", type, path,\n                    ioe.getMessage()), ioe);\n            throw ioe;      \n        } catch(Exception ex) {\n            String msg = sm.getString(\"jsse.keystore_load_failed\", type, path,\n                    ex.getMessage());\n            log.error(msg, ex);\n            throw new IOException(msg);\n        } finally {\n            if (istream != null) {\n                try {\n                    istream.close();\n                } catch (IOException ioe) {\n                    // Do nothing\n                }\n            }\n        }\n\n        return ks;\n    }","commit_id":"cf857a0c18c87179f32b79e0784eb986263aec07","url":"https://github.com/apache/tomcat"},{"original_method":"protected KeyStore getTrustStore(String keystoreType,\n            String keystoreProvider) throws IOException {\n        KeyStore trustStore = null;\n\n        String truststoreFile = (String)attributes.get(\n                AbstractEndpoint.SSL_ATTR_TRUSTSTORE_FILE);\n        if(truststoreFile == null) {\n            truststoreFile = System.getProperty(\"javax.net.ssl.trustStore\");\n        }\n        if(log.isDebugEnabled()) {\n            log.debug(\"Truststore = \" + truststoreFile);\n        }\n\n        String truststorePassword = (String)attributes.get(\n                AbstractEndpoint.SSL_ATTR_TRUSTSTORE_PASS);\n        if( truststorePassword == null) {\n            truststorePassword =\n                System.getProperty(\"javax.net.ssl.trustStorePassword\");\n        }\n        if( truststorePassword == null ) {\n            truststorePassword = getKeystorePassword();\n        }\n        if(log.isDebugEnabled()) {\n            log.debug(\"TrustPass = \" + truststorePassword);\n        }\n\n        String truststoreType = (String)attributes.get(\n                AbstractEndpoint.SSL_ATTR_TRUSTSTORE_TYPE);\n        if( truststoreType == null) {\n            truststoreType = System.getProperty(\"javax.net.ssl.trustStoreType\");\n        }\n        if(truststoreType == null) {\n            truststoreType = keystoreType;\n        }\n        if(log.isDebugEnabled()) {\n            log.debug(\"trustType = \" + truststoreType);\n        }\n\n        String truststoreProvider =\n            (String)attributes.get(\n                    AbstractEndpoint.SSL_ATTR_TRUSTSTORE_PROVIDER);\n        if( truststoreProvider == null) {\n            truststoreProvider =\n                System.getProperty(\"javax.net.ssl.trustStoreProvider\");\n        }\n        if (truststoreProvider == null) {\n            truststoreProvider = keystoreProvider;\n        }\n        if(log.isDebugEnabled()) {\n            log.debug(\"trustProvider = \" + truststoreProvider);\n        }\n\n        if (truststoreFile != null && truststorePassword != null){\n            trustStore = getStore(truststoreType, truststoreProvider,\n                    truststoreFile, truststorePassword);\n        }\n\n        return trustStore;\n    }","id":96408,"modified_method":"protected KeyStore getTrustStore(String keystoreType,\n            String keystoreProvider) throws IOException {\n        KeyStore trustStore = null;\n\n        String truststoreFile = (String)attributes.get(\n                AbstractEndpoint.SSL_ATTR_TRUSTSTORE_FILE);\n        if(truststoreFile == null) {\n            truststoreFile = System.getProperty(\"javax.net.ssl.trustStore\");\n        }\n        if(log.isDebugEnabled()) {\n            log.debug(\"Truststore = \" + truststoreFile);\n        }\n\n        String truststorePassword = (String)attributes.get(\n                AbstractEndpoint.SSL_ATTR_TRUSTSTORE_PASS);\n        if( truststorePassword == null) {\n            truststorePassword =\n                System.getProperty(\"javax.net.ssl.trustStorePassword\");\n        }\n        if(log.isDebugEnabled()) {\n            log.debug(\"TrustPass = \" + truststorePassword);\n        }\n\n        String truststoreType = (String)attributes.get(\n                AbstractEndpoint.SSL_ATTR_TRUSTSTORE_TYPE);\n        if( truststoreType == null) {\n            truststoreType = System.getProperty(\"javax.net.ssl.trustStoreType\");\n        }\n        if(truststoreType == null) {\n            truststoreType = keystoreType;\n        }\n        if(log.isDebugEnabled()) {\n            log.debug(\"trustType = \" + truststoreType);\n        }\n\n        String truststoreProvider =\n            (String)attributes.get(\n                    AbstractEndpoint.SSL_ATTR_TRUSTSTORE_PROVIDER);\n        if( truststoreProvider == null) {\n            truststoreProvider =\n                System.getProperty(\"javax.net.ssl.trustStoreProvider\");\n        }\n        if (truststoreProvider == null) {\n            truststoreProvider = keystoreProvider;\n        }\n        if(log.isDebugEnabled()) {\n            log.debug(\"trustProvider = \" + truststoreProvider);\n        }\n\n        if (truststoreFile != null){\n            trustStore = getStore(truststoreType, truststoreProvider,\n                    truststoreFile, truststorePassword);\n        }\n\n        return trustStore;\n    }","commit_id":"cf857a0c18c87179f32b79e0784eb986263aec07","url":"https://github.com/apache/tomcat"},{"original_method":"protected char[] promptForCredential() throws IOException {\n    PasswordReader c = getPasswordReader();\n    if (c == null) {\n      throw new IOException(\"No console available for prompting user.\");\n    }\n    \n    char[] cred = null;\n\n    boolean noMatch;\n    do {\n      char[] newPassword1 = c.readPassword(\"Enter password: \");\n      char[] newPassword2 = c.readPassword(\"Enter password again: \");\n      noMatch = !Arrays.equals(newPassword1, newPassword2);\n      if (noMatch) {\n        Arrays.fill(newPassword1, ' ');\n        c.format(\"Passwords don't match. Try again.%n\");\n      } else {\n        cred = newPassword1;\n      }\n      Arrays.fill(newPassword2, ' ');\n    } while (noMatch);\n    return cred;\n  }","id":96409,"modified_method":"protected char[] promptForCredential() throws IOException {\n    PasswordReader c = getPasswordReader();\n    if (c == null) {\n      throw new IOException(\"No console available for prompting user.\");\n    }\n    \n    char[] cred = null;\n\n    boolean noMatch;\n    do {\n      char[] newPassword1 = c.readPassword(\"Enter password: \");\n      char[] newPassword2 = c.readPassword(\"Enter password again: \");\n      noMatch = !Arrays.equals(newPassword1, newPassword2);\n      if (noMatch) {\n        if (newPassword1 != null) Arrays.fill(newPassword1, ' ');\n        c.format(\"Passwords don't match. Try again.%n\");\n      } else {\n        cred = newPassword1;\n      }\n      if (newPassword2 != null) Arrays.fill(newPassword2, ' ');\n    } while (noMatch);\n    return cred;\n  }","commit_id":"1e7ce76bbab08a153b285739de51c3de924e3580","url":"https://github.com/apache/hadoop"},{"original_method":"@Override\n    public char[] readPassword(String prompt) {\n      if (passwords.size() == 0) return null;\n      String pass = passwords.remove(0);\n      return pass.toCharArray();\n    }","id":96410,"modified_method":"@Override\n    public char[] readPassword(String prompt) {\n      if (passwords.size() == 0) return null;\n      String pass = passwords.remove(0);\n      return pass == null ? null : pass.toCharArray();\n    }","commit_id":"1e7ce76bbab08a153b285739de51c3de924e3580","url":"https://github.com/apache/hadoop"},{"original_method":"public static AuthToken createFromMap( Map<String,Object> authTokenMap ) throws InvalidAuthTokenException\n    {\n        String principal = org.neo4j.kernel.api.security.AuthToken.safeCast( PRINCIPAL, authTokenMap );\n        String credentials = org.neo4j.kernel.api.security.AuthToken.safeCast( CREDENTIALS, authTokenMap );\n        Map<String,Object> parameters = org.neo4j.kernel.api.security.AuthToken.safeCastMap( PARAMETERS, authTokenMap );\n\n        return PluginApiAuthToken.of( principal, credentials.toCharArray(), parameters );\n    }","id":96411,"modified_method":"public static AuthToken createFromMap( Map<String,Object> authTokenMap ) throws InvalidAuthTokenException\n    {\n        String scheme = org.neo4j.kernel.api.security.AuthToken\n                .safeCast( org.neo4j.kernel.api.security.AuthToken.SCHEME_KEY, authTokenMap );\n\n        // Always require principal\n        String principal = org.neo4j.kernel.api.security.AuthToken.safeCast( PRINCIPAL, authTokenMap );\n\n        String credentials = null;\n        if ( scheme.equals( org.neo4j.kernel.api.security.AuthToken.BASIC_SCHEME ) )\n        {\n            // Basic scheme requires credentials\n            credentials = org.neo4j.kernel.api.security.AuthToken.safeCast( CREDENTIALS, authTokenMap );\n        }\n        else\n        {\n            // Otherwise credentials are optional\n            Object credentialsObject = authTokenMap.get( CREDENTIALS );\n            if ( credentialsObject instanceof String )\n            {\n                credentials = (String) credentialsObject;\n            }\n        }\n        Map<String,Object> parameters = org.neo4j.kernel.api.security.AuthToken.safeCastMap( PARAMETERS, authTokenMap );\n\n        return PluginApiAuthToken.of(\n                principal,\n                credentials != null ? credentials.toCharArray() : null,\n                parameters );\n    }","commit_id":"ccb3f8950aeac9de8a497fd4e3221026fb2e33d9","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void loadXmlConfig( File configDir )\n    {\n        for ( File configFile : getCandidateConfigFiles( configDir, \".xml\" ) )\n        {\n            try\n            {\n                XMLConfiguration xmlConfig = new XMLConfiguration( configFile );\n                serverConfiguration.addConfiguration( xmlConfig );\n            } catch ( Exception e )\n            {\n                logFailureToLoadConfigFile( configFile, e );\n            }\n        }\n    }","id":96412,"modified_method":"private void loadXmlConfig(File configDir) throws ConfigurationException {\n        for (File configFile : getCandidateConfigFiles(configDir, \".xml\")) {\n\n            XMLConfiguration xmlConfig = new XMLConfiguration(configFile);\n            if (validator.validate(serverConfiguration, xmlConfig)) {\n                serverConfiguration.addConfiguration(xmlConfig);\n            }\n        }\n    }","commit_id":"60d3b142a5bfce89e11f5c76265e94e4ed9d35b9","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void loadPropertiesConfig( File configDir )\n    {\n\n        for ( File configFile : getCandidateConfigFiles( configDir, \".properties\" ) )\n        {\n            try\n            {\n                PropertiesConfiguration propertiesConfig = new PropertiesConfiguration( configFile );\n                includeConfiguration( propertiesConfig );\n            } catch ( Exception e )\n            {\n                logFailureToLoadConfigFile( configFile, e );\n            }\n        }\n    }","id":96413,"modified_method":"private void loadPropertiesConfig(File configDir) throws ConfigurationException {\n\n        for (File configFile : getCandidateConfigFiles(configDir, \".properties\")) {\n\n            PropertiesConfiguration propertiesConfig = new PropertiesConfiguration(configFile);\n            if (validator.validate(serverConfiguration, propertiesConfig)) {\n                serverConfiguration.addConfiguration(propertiesConfig);\n            } else {\n                String failed = String.format(\"Error processing [%s], configuration file(s) corrupt or contains duplicates\", configFile.getAbsolutePath());\n                log.fatal(failed);\n                throw new InvalidServerConfigurationException(failed);\n            }\n        }\n    }","commit_id":"60d3b142a5bfce89e11f5c76265e94e4ed9d35b9","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Configurator( File configDir )\n    {\n        if ( configDir == null )\n        {\n            configDir = defaultConfigurationDirectory;\n        }\n\n        loadConfigFrom( configDir );\n    }","id":96414,"modified_method":"public Configurator(File configDir) {\n        if (configDir == null) {\n            configDir = defaultConfigurationDirectory;\n        }\n\n        try {\n            loadConfigFrom(configDir);\n        } catch(ConfigurationException ce) {\n            log.warn(ce);\n        }\n\n    }","commit_id":"60d3b142a5bfce89e11f5c76265e94e4ed9d35b9","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test(expected = InvalidServerConfigurationException.class)\n    public void shouldFailOnDuplicateKeysWithDifferentValues() throws IOException {\n        File configDir = createTempDir();\n        File configA = createTempPropertyFile(configDir);\n        File configB = createTempPropertyFile(configDir);\n        \n        BufferedWriter writer = new BufferedWriter(new FileWriter(configA));\n        writer.write(\"foo=bar\");\n        writer.close();\n        \n        writer = new BufferedWriter(new FileWriter(configB));\n        writer.write(\"foo=bar\");\n        writer.close();\n        \n        Configurator configurator = new Configurator(configDir);\n        Configuration testConf = configurator.configuration();\n\n    }","id":96415,"modified_method":"@Test(expected = InvalidServerConfigurationException.class)\n    public void shouldFailOnDuplicateKeysWithDifferentValues() throws IOException {\n\n        File configDir = createTempDir();\n        File configA = createTempPropertyFile(configDir);\n        File configB = createTempPropertyFile(configDir);\n\n        BufferedWriter writer = new BufferedWriter(new FileWriter(configA));\n        writer.write(\"foo=bar\");\n        writer.close();\n\n        writer = new BufferedWriter(new FileWriter(configB));\n        writer.write(\"foo=differentBar\");\n        writer.close();\n\n        new Configurator(configDir);\n    }","commit_id":"60d3b142a5bfce89e11f5c76265e94e4ed9d35b9","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldAcceptDuplicateKeysWithSameValueAndLogDuplication() throws IOException {\n        File configDir = createTempDir();\n        File configA = createTempPropertyFile( configDir );\n        File configB = createTempPropertyFile( configDir );\n        \n        BufferedWriter writer = new BufferedWriter(new FileWriter(configA));\n        writer.write(\"foo=bar\");\n        writer.close();\n        \n        writer = new BufferedWriter(new FileWriter(configB));\n        writer.write(\"foo=bar\");\n        writer.close();\n        \n        Configurator configurator = new Configurator(configDir);\n        Configuration testConf = configurator.configuration();\n        \n    }","id":96416,"modified_method":"@Test\n    public void shouldAcceptDuplicateKeysWithSameValue() throws IOException {\n        File configDir = createTempDir();\n        File configA = createTempPropertyFile(configDir);\n        File configB = createTempPropertyFile(configDir);\n\n        BufferedWriter writer = new BufferedWriter(new FileWriter(configA));\n        writer.write(\"foo=bar\");\n        writer.close();\n\n        writer = new BufferedWriter(new FileWriter(configB));\n        writer.write(\"foo=bar\");\n        writer.close();\n\n        Configurator configurator = new Configurator(configDir);\n        Configuration testConf = configurator.configuration();\n\n        assertNotNull(testConf);\n    }","commit_id":"60d3b142a5bfce89e11f5c76265e94e4ed9d35b9","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void loadXmlConfig( File configDir )\n    {\n        for ( File configFile : getCandidateConfigFiles( configDir, \".xml\" ) )\n        {\n            try\n            {\n                XMLConfiguration xmlConfig = new XMLConfiguration( configFile );\n                serverConfiguration.addConfiguration( xmlConfig );\n            } catch ( Exception e )\n            {\n                logFailureToLoadConfigFile( configFile, e );\n            }\n        }\n    }","id":96417,"modified_method":"private void loadXmlConfig(File configDir) throws ConfigurationException {\n        for (File configFile : getCandidateConfigFiles(configDir, \".xml\")) {\n\n            XMLConfiguration xmlConfig = new XMLConfiguration(configFile);\n            if (validator.validate(serverConfiguration, xmlConfig)) {\n                serverConfiguration.addConfiguration(xmlConfig);\n            }\n        }\n    }","commit_id":"79c9662fa100c6e4ed1df2a833bfa82ab3e9ab1d","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Configurator( File configDir )\n    {\n        if ( configDir == null )\n        {\n            configDir = defaultConfigurationDirectory;\n        }\n\n        loadConfigFrom( configDir );\n    }","id":96418,"modified_method":"public Configurator(File configDir) {\n        if (configDir == null) {\n            configDir = defaultConfigurationDirectory;\n        }\n\n        try {\n            loadConfigFrom(configDir);\n        } catch(ConfigurationException ce) {\n            log.warn(ce);\n        }\n\n    }","commit_id":"79c9662fa100c6e4ed1df2a833bfa82ab3e9ab1d","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void loadPropertiesConfig( File configDir )\n    {\n\n        for ( File configFile : getCandidateConfigFiles( configDir, \".properties\" ) )\n        {\n            try\n            {\n                PropertiesConfiguration propertiesConfig = new PropertiesConfiguration( configFile );\n                includeConfiguration( propertiesConfig );\n            } catch ( Exception e )\n            {\n                logFailureToLoadConfigFile( configFile, e );\n            }\n        }\n    }","id":96419,"modified_method":"private void loadPropertiesConfig(File configDir) throws ConfigurationException {\n\n        for (File configFile : getCandidateConfigFiles(configDir, \".properties\")) {\n\n            PropertiesConfiguration propertiesConfig = new PropertiesConfiguration(configFile);\n            if (validator.validate(serverConfiguration, propertiesConfig)) {\n                serverConfiguration.addConfiguration(propertiesConfig);\n            } else {\n                String failed = String.format(\"Error processing [%s], configuration file(s) corrupt or contains duplicates\", configFile.getAbsolutePath());\n                log.fatal(failed);\n                throw new InvalidServerConfigurationException(failed);\n            }\n        }\n    }","commit_id":"79c9662fa100c6e4ed1df2a833bfa82ab3e9ab1d","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldAcceptDuplicateKeysWithSameValueAndLogDuplication() throws IOException {\n        File configDir = createTempDir();\n        File configA = createTempPropertyFile( configDir );\n        File configB = createTempPropertyFile( configDir );\n        \n        BufferedWriter writer = new BufferedWriter(new FileWriter(configA));\n        writer.write(\"foo=bar\");\n        writer.close();\n        \n        writer = new BufferedWriter(new FileWriter(configB));\n        writer.write(\"foo=bar\");\n        writer.close();\n        \n        Configurator configurator = new Configurator(configDir);\n        Configuration testConf = configurator.configuration();\n        \n    }","id":96420,"modified_method":"@Test\n    public void shouldAcceptDuplicateKeysWithSameValue() throws IOException {\n        File configDir = createTempDir();\n        File configA = createTempPropertyFile(configDir);\n        File configB = createTempPropertyFile(configDir);\n\n        BufferedWriter writer = new BufferedWriter(new FileWriter(configA));\n        writer.write(\"foo=bar\");\n        writer.close();\n\n        writer = new BufferedWriter(new FileWriter(configB));\n        writer.write(\"foo=bar\");\n        writer.close();\n\n        Configurator configurator = new Configurator(configDir);\n        Configuration testConf = configurator.configuration();\n\n        assertNotNull(testConf);\n    }","commit_id":"79c9662fa100c6e4ed1df2a833bfa82ab3e9ab1d","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test(expected = InvalidServerConfigurationException.class)\n    public void shouldFailOnDuplicateKeysWithDifferentValues() throws IOException {\n        File configDir = createTempDir();\n        File configA = createTempPropertyFile(configDir);\n        File configB = createTempPropertyFile(configDir);\n        \n        BufferedWriter writer = new BufferedWriter(new FileWriter(configA));\n        writer.write(\"foo=bar\");\n        writer.close();\n        \n        writer = new BufferedWriter(new FileWriter(configB));\n        writer.write(\"foo=bar\");\n        writer.close();\n        \n        Configurator configurator = new Configurator(configDir);\n        Configuration testConf = configurator.configuration();\n\n    }","id":96421,"modified_method":"@Test(expected = InvalidServerConfigurationException.class)\n    public void shouldFailOnDuplicateKeysWithDifferentValues() throws IOException {\n\n        File configDir = createTempDir();\n        File configA = createTempPropertyFile(configDir);\n        File configB = createTempPropertyFile(configDir);\n\n        BufferedWriter writer = new BufferedWriter(new FileWriter(configA));\n        writer.write(\"foo=bar\");\n        writer.close();\n\n        writer = new BufferedWriter(new FileWriter(configB));\n        writer.write(\"foo=differentBar\");\n        writer.close();\n\n        new Configurator(configDir);\n    }","commit_id":"79c9662fa100c6e4ed1df2a833bfa82ab3e9ab1d","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void loadXmlConfig( File configDir )\n    {\n        for ( File configFile : getCandidateConfigFiles( configDir, \".xml\" ) )\n        {\n            try\n            {\n                XMLConfiguration xmlConfig = new XMLConfiguration( configFile );\n                serverConfiguration.addConfiguration( xmlConfig );\n            } catch ( Exception e )\n            {\n                logFailureToLoadConfigFile( configFile, e );\n            }\n        }\n    }","id":96422,"modified_method":"private void loadXmlConfig(File configDir) throws ConfigurationException {\n        for (File configFile : getCandidateConfigFiles(configDir, \".xml\")) {\n\n            XMLConfiguration xmlConfig = new XMLConfiguration(configFile);\n            if (validator.validate(serverConfiguration, xmlConfig)) {\n                serverConfiguration.addConfiguration(xmlConfig);\n            }\n        }\n    }","commit_id":"7dc9b8900cfefed66adb20e89edd394c3db3fbba","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Configurator( File configDir )\n    {\n        if ( configDir == null )\n        {\n            configDir = defaultConfigurationDirectory;\n        }\n\n        loadConfigFrom( configDir );\n    }","id":96423,"modified_method":"public Configurator(File configDir) {\n        if (configDir == null) {\n            configDir = defaultConfigurationDirectory;\n        }\n\n        try {\n            loadConfigFrom(configDir);\n        } catch(ConfigurationException ce) {\n            log.warn(ce);\n        }\n\n    }","commit_id":"7dc9b8900cfefed66adb20e89edd394c3db3fbba","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void loadPropertiesConfig( File configDir )\n    {\n\n        for ( File configFile : getCandidateConfigFiles( configDir, \".properties\" ) )\n        {\n            try\n            {\n                PropertiesConfiguration propertiesConfig = new PropertiesConfiguration( configFile );\n                includeConfiguration( propertiesConfig );\n            } catch ( Exception e )\n            {\n                logFailureToLoadConfigFile( configFile, e );\n            }\n        }\n    }","id":96424,"modified_method":"private void loadPropertiesConfig(File configDir) throws ConfigurationException {\n\n        for (File configFile : getCandidateConfigFiles(configDir, \".properties\")) {\n\n            PropertiesConfiguration propertiesConfig = new PropertiesConfiguration(configFile);\n            if (validator.validate(serverConfiguration, propertiesConfig)) {\n                serverConfiguration.addConfiguration(propertiesConfig);\n            } else {\n                String failed = String.format(\"Error processing [%s], configuration file(s) corrupt or contains duplicates\", configFile.getAbsolutePath());\n                log.fatal(failed);\n                throw new InvalidServerConfigurationException(failed);\n            }\n        }\n    }","commit_id":"7dc9b8900cfefed66adb20e89edd394c3db3fbba","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldAcceptDuplicateKeysWithSameValueAndLogDuplication() throws IOException {\n        File configDir = createTempDir();\n        File configA = createTempPropertyFile( configDir );\n        File configB = createTempPropertyFile( configDir );\n        \n        BufferedWriter writer = new BufferedWriter(new FileWriter(configA));\n        writer.write(\"foo=bar\");\n        writer.close();\n        \n        writer = new BufferedWriter(new FileWriter(configB));\n        writer.write(\"foo=bar\");\n        writer.close();\n        \n        Configurator configurator = new Configurator(configDir);\n        Configuration testConf = configurator.configuration();\n        \n    }","id":96425,"modified_method":"@Test\n    public void shouldAcceptDuplicateKeysWithSameValue() throws IOException {\n        File configDir = createTempDir();\n        File configA = createTempPropertyFile(configDir);\n        File configB = createTempPropertyFile(configDir);\n\n        BufferedWriter writer = new BufferedWriter(new FileWriter(configA));\n        writer.write(\"foo=bar\");\n        writer.close();\n\n        writer = new BufferedWriter(new FileWriter(configB));\n        writer.write(\"foo=bar\");\n        writer.close();\n\n        Configurator configurator = new Configurator(configDir);\n        Configuration testConf = configurator.configuration();\n\n        assertNotNull(testConf);\n    }","commit_id":"7dc9b8900cfefed66adb20e89edd394c3db3fbba","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test(expected = InvalidServerConfigurationException.class)\n    public void shouldFailOnDuplicateKeysWithDifferentValues() throws IOException {\n        File configDir = createTempDir();\n        File configA = createTempPropertyFile(configDir);\n        File configB = createTempPropertyFile(configDir);\n        \n        BufferedWriter writer = new BufferedWriter(new FileWriter(configA));\n        writer.write(\"foo=bar\");\n        writer.close();\n        \n        writer = new BufferedWriter(new FileWriter(configB));\n        writer.write(\"foo=bar\");\n        writer.close();\n        \n        Configurator configurator = new Configurator(configDir);\n        Configuration testConf = configurator.configuration();\n\n    }","id":96426,"modified_method":"@Test(expected = InvalidServerConfigurationException.class)\n    public void shouldFailOnDuplicateKeysWithDifferentValues() throws IOException {\n\n        File configDir = createTempDir();\n        File configA = createTempPropertyFile(configDir);\n        File configB = createTempPropertyFile(configDir);\n\n        BufferedWriter writer = new BufferedWriter(new FileWriter(configA));\n        writer.write(\"foo=bar\");\n        writer.close();\n\n        writer = new BufferedWriter(new FileWriter(configB));\n        writer.write(\"foo=differentBar\");\n        writer.close();\n\n        new Configurator(configDir);\n    }","commit_id":"7dc9b8900cfefed66adb20e89edd394c3db3fbba","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void loadPropertiesConfig( File configDir )\n    {\n\n        for ( File configFile : getCandidateConfigFiles( configDir, \".properties\" ) )\n        {\n            try\n            {\n                PropertiesConfiguration propertiesConfig = new PropertiesConfiguration( configFile );\n                includeConfiguration( propertiesConfig );\n            } catch ( Exception e )\n            {\n                logFailureToLoadConfigFile( configFile, e );\n            }\n        }\n    }","id":96427,"modified_method":"private void loadPropertiesConfig(File configDir) throws ConfigurationException {\n\n        for (File configFile : getCandidateConfigFiles(configDir, \".properties\")) {\n\n            PropertiesConfiguration propertiesConfig = new PropertiesConfiguration(configFile);\n            if (validator.validate(serverConfiguration, propertiesConfig)) {\n                serverConfiguration.addConfiguration(propertiesConfig);\n            } else {\n                String failed = String.format(\"Error processing [%s], configuration file(s) corrupt or contains duplicates\", configFile.getAbsolutePath());\n                log.fatal(failed);\n                throw new InvalidServerConfigurationException(failed);\n            }\n        }\n    }","commit_id":"b4e8021090368c1c04cdf5ac7444bad44fd2965f","url":"https://github.com/neo4j/neo4j"},{"original_method":"private void loadXmlConfig( File configDir )\n    {\n        for ( File configFile : getCandidateConfigFiles( configDir, \".xml\" ) )\n        {\n            try\n            {\n                XMLConfiguration xmlConfig = new XMLConfiguration( configFile );\n                serverConfiguration.addConfiguration( xmlConfig );\n            } catch ( Exception e )\n            {\n                logFailureToLoadConfigFile( configFile, e );\n            }\n        }\n    }","id":96428,"modified_method":"private void loadXmlConfig(File configDir) throws ConfigurationException {\n        for (File configFile : getCandidateConfigFiles(configDir, \".xml\")) {\n\n            XMLConfiguration xmlConfig = new XMLConfiguration(configFile);\n            if (validator.validate(serverConfiguration, xmlConfig)) {\n                serverConfiguration.addConfiguration(xmlConfig);\n            }\n        }\n    }","commit_id":"b4e8021090368c1c04cdf5ac7444bad44fd2965f","url":"https://github.com/neo4j/neo4j"},{"original_method":"public Configurator( File configDir )\n    {\n        if ( configDir == null )\n        {\n            configDir = defaultConfigurationDirectory;\n        }\n\n        loadConfigFrom( configDir );\n    }","id":96429,"modified_method":"public Configurator(File configDir) {\n        if (configDir == null) {\n            configDir = defaultConfigurationDirectory;\n        }\n\n        try {\n            loadConfigFrom(configDir);\n        } catch(ConfigurationException ce) {\n            log.warn(ce);\n        }\n\n    }","commit_id":"b4e8021090368c1c04cdf5ac7444bad44fd2965f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test\n    public void shouldAcceptDuplicateKeysWithSameValueAndLogDuplication() throws IOException {\n        File configDir = createTempDir();\n        File configA = createTempPropertyFile( configDir );\n        File configB = createTempPropertyFile( configDir );\n        \n        BufferedWriter writer = new BufferedWriter(new FileWriter(configA));\n        writer.write(\"foo=bar\");\n        writer.close();\n        \n        writer = new BufferedWriter(new FileWriter(configB));\n        writer.write(\"foo=bar\");\n        writer.close();\n        \n        Configurator configurator = new Configurator(configDir);\n        Configuration testConf = configurator.configuration();\n        \n    }","id":96430,"modified_method":"@Test\n    public void shouldAcceptDuplicateKeysWithSameValue() throws IOException {\n        File configDir = createTempDir();\n        File configA = createTempPropertyFile(configDir);\n        File configB = createTempPropertyFile(configDir);\n\n        BufferedWriter writer = new BufferedWriter(new FileWriter(configA));\n        writer.write(\"foo=bar\");\n        writer.close();\n\n        writer = new BufferedWriter(new FileWriter(configB));\n        writer.write(\"foo=bar\");\n        writer.close();\n\n        Configurator configurator = new Configurator(configDir);\n        Configuration testConf = configurator.configuration();\n\n        assertNotNull(testConf);\n    }","commit_id":"b4e8021090368c1c04cdf5ac7444bad44fd2965f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Test(expected = InvalidServerConfigurationException.class)\n    public void shouldFailOnDuplicateKeysWithDifferentValues() throws IOException {\n        File configDir = createTempDir();\n        File configA = createTempPropertyFile(configDir);\n        File configB = createTempPropertyFile(configDir);\n        \n        BufferedWriter writer = new BufferedWriter(new FileWriter(configA));\n        writer.write(\"foo=bar\");\n        writer.close();\n        \n        writer = new BufferedWriter(new FileWriter(configB));\n        writer.write(\"foo=bar\");\n        writer.close();\n        \n        Configurator configurator = new Configurator(configDir);\n        Configuration testConf = configurator.configuration();\n\n    }","id":96431,"modified_method":"@Test(expected = InvalidServerConfigurationException.class)\n    public void shouldFailOnDuplicateKeysWithDifferentValues() throws IOException {\n\n        File configDir = createTempDir();\n        File configA = createTempPropertyFile(configDir);\n        File configB = createTempPropertyFile(configDir);\n\n        BufferedWriter writer = new BufferedWriter(new FileWriter(configA));\n        writer.write(\"foo=bar\");\n        writer.close();\n\n        writer = new BufferedWriter(new FileWriter(configB));\n        writer.write(\"foo=differentBar\");\n        writer.close();\n\n        new Configurator(configDir);\n    }","commit_id":"b4e8021090368c1c04cdf5ac7444bad44fd2965f","url":"https://github.com/neo4j/neo4j"},{"original_method":"@Override\n    public Object getService(final Bundle bundle, final ServiceRegistration registration) {\n        synchronized (registry) {\n            return new HttpServiceImpl(context, webServer, virtualHost, bundle);\n        }\n    }","id":96432,"modified_method":"@Override\n    public Object getService(final Bundle bundle, final ServiceRegistration registration) {\n        synchronized (registry) {\n            return new HttpServiceImpl(serverEnvironment, webServer, virtualHost, bundle);\n        }\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"synchronized Registration register(String alias, Bundle bundle, Wrapper wrapper, Registration.Type type) throws NamespaceException {\n\n            if (exists(alias))\n                throw new NamespaceException(OSGiMessages.MESSAGES.aliasMappingAlreadyExists(alias));\n\n            LOGGER.infoRegisterHttpServiceAlias(alias);\n\n            Registration result = new Registration(alias, bundle, wrapper, type);\n            registrations.put(alias, result);\n\n            return result;\n        }","id":96433,"modified_method":"synchronized Registration register(String alias, Bundle bundle, StandardContext context, Wrapper wrapper, Registration.Type type) throws NamespaceException {\n            if (exists(alias))\n                throw new NamespaceException(OSGiMessages.MESSAGES.aliasMappingAlreadyExists(alias));\n\n            LOGGER.infoRegisterHttpServiceAlias(alias);\n\n            Registration result = new Registration(alias, bundle, context, wrapper, type);\n            registrations.put(alias, result);\n\n            return result;\n        }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"Registration(String alias, Bundle bundle, Wrapper wrapper, Type type) {\n            this.alias = alias;\n            this.bundle = bundle;\n            this.wrapper = wrapper;\n            this.type = type;\n        }","id":96434,"modified_method":"Registration(String alias, Bundle bundle, StandardContext context, Wrapper wrapper, Type type) {\n            this.alias = alias;\n            this.bundle = bundle;\n            this.context = context;\n            this.wrapper = wrapper;\n            this.type = type;\n        }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"HttpServiceFactory(WebServer webServer, Host virtualHost, StandardContext context) {\n        this.registry= GlobalRegistry.INSTANCE;\n        this.webServer = webServer;\n        this.virtualHost = virtualHost;\n        this.context = context;\n    }","id":96435,"modified_method":"HttpServiceFactory(WebServer webServer, Host virtualHost, ServerEnvironment serverEnvironment) {\n        this.registry= GlobalRegistry.INSTANCE;\n        this.webServer = webServer;\n        this.virtualHost = virtualHost;\n        this.serverEnvironment = serverEnvironment;\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void start(StartContext startContext) throws StartException {\n\n        ServerEnvironment env = injectedServerEnvironment.getValue();\n        Host virtualHost = injectedVirtualHost.getValue().getHost();\n        BundleContext syscontext = injectedSystemContext.getValue();\n        WebServer webServer = injectedWebServer.getValue();\n\n        File storageDir = new File(env.getServerTempDir() + File.separator + CONTEXT_NAME + File.separator + \"httpservice-root\");\n        context.setDocBase(storageDir.getPath());\n        storageDir.mkdirs();\n\n        context.setPath(CONTEXT_NAME);\n        context.addLifecycleListener(new ContextConfig());\n        Loader loader = new WebCtxLoader(getClass().getClassLoader());\n        loader.setContainer(virtualHost);\n        context.setLoader(loader);\n        context.setInstanceManager(new LocalInstanceManager());\n\n        context.addMimeMapping(\"html\", \"text/html\");\n        context.addMimeMapping(\"jpg\", \"image/jpeg\");\n        context.addMimeMapping(\"png\", \"image/png\");\n        context.addMimeMapping(\"gif\", \"image/gif\");\n        context.addMimeMapping(\"css\", \"text/css\");\n        context.addMimeMapping(\"js\", \"text/javascript\");\n\n        virtualHost.addChild(context);\n\n        WEB_LOGGER.registerWebapp(context.getName());\n        try {\n            context.create();\n        } catch (Exception ex) {\n            throw new StartException(WebMessages.MESSAGES.createContextFailed(), ex);\n        }\n        try {\n            context.start();\n        } catch (LifecycleException ex) {\n            throw new StartException(WebMessages.MESSAGES.startContextFailed(), ex);\n        }\n\n        Hashtable<String, Object> props = new Hashtable<String, Object>();\n        props.put(\"provider\", getClass().getPackage().getName());\n\n        ServiceFactory serviceFactory = new HttpServiceFactory(webServer, virtualHost, context);\n        registration = syscontext.registerService(HttpService.class.getName(), serviceFactory, props);\n    }","id":96436,"modified_method":"@Override\n    public void start(StartContext startContext) throws StartException {\n        ServerEnvironment serverEnvironment = injectedServerEnvironment.getValue();\n        Host virtualHost = injectedVirtualHost.getValue().getHost();\n        BundleContext syscontext = injectedSystemContext.getValue();\n        WebServer webServer = injectedWebServer.getValue();\n\n        Hashtable<String, Object> props = new Hashtable<String, Object>();\n        props.put(\"provider\", getClass().getPackage().getName());\n\n        ServiceFactory serviceFactory = new HttpServiceFactory(webServer, virtualHost, serverEnvironment);\n        registration = syscontext.registerService(HttpService.class.getName(), serviceFactory, props);\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void stop(StopContext stopContext) {\n        registration.unregister();\n        try {\n            context.stop();\n        } catch (LifecycleException e) {\n            WEB_LOGGER.stopContextFailed(e);\n        }\n        try {\n            context.destroy();\n        } catch (Exception e) {\n            WEB_LOGGER.destroyContextFailed(e);\n        }\n    }","id":96437,"modified_method":"@Override\n    public void stop(StopContext stopContext) {\n        registration.unregister();\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public StandardContext getValue() throws IllegalStateException {\n        return context;\n    }","id":96438,"modified_method":"@Override\n    public StandardContext getValue() throws IllegalStateException {\n        return null;\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"private HttpServiceFactoryService() {\n        this.context = new StandardContext();\n    }","id":96439,"modified_method":"private HttpServiceFactoryService() {\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void unregister(String alias) {\n\n        synchronized (registry) {\n\n            String error = validateAlias(alias, true);\n            if (error != null) {\n                WEB_LOGGER.errorf(error);\n                return;\n            }\n\n            Registration reg = registry.unregister(alias, bundle);\n            if (reg != null) {\n                unregisterInternal(reg);\n            }\n        }\n    }","id":96440,"modified_method":"@Override\n    public void unregister(String alias) {\n        try {\n            validateAlias(alias, true);\n        } catch (NamespaceException e) {\n            WEB_LOGGER.errorf(e, \"\");\n            return;\n        }\n\n        Registration reg = registry.unregister(alias, bundle);\n        if (reg != null) {\n            unregisterInternal(reg);\n        }\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"private String validateAlias(String alias, boolean exists) {\n\n        // An alias must begin with slash ('/') and must not end with slash ('/'), with the exception\n        // that an alias of the form \"/\" is used to denote the root alias\n        if (alias == null || !alias.startsWith(\"/\"))\n            return OSGiMessages.MESSAGES.invalidServletAlias(alias);\n        if (alias.length() > 1 && alias.endsWith(\"/\"))\n            return OSGiMessages.MESSAGES.invalidServletAlias(alias);\n\n        if (exists && !registry.exists(alias))\n            return OSGiMessages.MESSAGES.aliasMappingDoesNotExist(alias);\n        if (!exists && registry.exists(alias))\n            return OSGiMessages.MESSAGES.aliasMappingAlreadyExists(alias);\n\n        return null;\n    }","id":96441,"modified_method":"private void validateAlias(String alias, boolean exists) throws NamespaceException {\n        // An alias must begin with slash ('/') and must not end with slash ('/'), with the exception\n        // that an alias of the form \"/\" is used to denote the root alias\n        if (alias == null || !alias.startsWith(\"/\"))\n            throw new IllegalArgumentException(OSGiMessages.MESSAGES.invalidServletAlias(alias));\n        if (alias.length() > 1 && alias.endsWith(\"/\"))\n            throw new IllegalArgumentException(OSGiMessages.MESSAGES.invalidServletAlias(alias));\n\n        if (exists && !registry.exists(alias))\n            throw new IllegalArgumentException(OSGiMessages.MESSAGES.aliasMappingDoesNotExist(alias));\n        if (!exists && registry.exists(alias))\n            throw new NamespaceException(OSGiMessages.MESSAGES.aliasMappingAlreadyExists(alias));\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    @SuppressWarnings(\"rawtypes\")\n    public void registerServlet(String alias, Servlet servlet, Dictionary initparams, HttpContext httpContext) throws ServletException, NamespaceException {\n\n        synchronized (registry) {\n            String error = validateAlias(alias, false);\n            if (error != null)\n                throw new NamespaceException(error);\n\n            if (httpContext == null)\n                httpContext = createDefaultHttpContext();\n\n            String wrapperName = alias.substring(1);\n            Wrapper wrapper = context.createWrapper();\n            wrapper.setName(wrapperName);\n            wrapper.setServlet(servlet);\n            wrapper.setServletClass(servlet.getClass().getName());\n\n            // Init parameters\n            if (initparams != null) {\n                Enumeration keys = initparams.keys();\n                while(keys.hasMoreElements()) {\n                    String key = (String) keys.nextElement();\n                    String val = (String) initparams.get(key);\n                    wrapper.addInitParameter(key, val);\n                }\n            }\n\n            registerInternal(registry.register(alias, bundle, wrapper, Type.SERVLET));\n            wrapper.allocate(); // Causes servlet.init() to be called, which must be done before we return\n        }\n    }","id":96442,"modified_method":"@Override\n    @SuppressWarnings(\"rawtypes\")\n    public void registerServlet(String alias, Servlet servlet, Dictionary initparams, HttpContext httpContext) throws ServletException, NamespaceException {\n        validateAlias(alias, false);\n        validateServlet(servlet);\n\n        Wrapper wrapper = registerInternal(alias, servlet, initparams, httpContext, Type.SERVLET);\n        wrapper.allocate(); // Causes servlet.init() to be called, which must be done before we return\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"private String validateName(String name) {\n\n        // The name parameter must also not end with slash ('/') with the exception\n        // that a name of the form \"/\" is used to denote the root of the bundle.\n        if (name == null || (name.length() > 1 && name.endsWith(\"/\")))\n            return OSGiMessages.MESSAGES.invalidResourceName(name);\n\n        // [TODO] remove this restriction\n        if (!name.startsWith(\"/\"))\n            return OSGiMessages.MESSAGES.invalidResourceName(name);\n\n        return null;\n    }","id":96443,"modified_method":"private void validateName(String name) throws NamespaceException {\n        // The name parameter must also not end with slash ('/') with the exception\n        // that a name of the form \"/\" is used to denote the root of the bundle.\n        if (name == null || (name.length() > 1 && name.endsWith(\"/\")))\n            throw new NamespaceException(OSGiMessages.MESSAGES.invalidResourceName(name));\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerResources(String alias, String name, HttpContext httpContext) throws NamespaceException {\n\n        synchronized (registry) {\n            String error = validateAlias(alias, false);\n            if (error == null)\n                error = validateName(name);\n            if (error != null)\n                throw new NamespaceException(error);\n\n            if (httpContext == null)\n                httpContext = createDefaultHttpContext();\n\n            String wrapperName = alias.substring(1);\n            Wrapper wrapper = context.createWrapper();\n            wrapper.setName(wrapperName);\n            wrapper.setServlet(new ResourceServlet(name, httpContext));\n            wrapper.setServletClass(ResourceServlet.class.getName());\n\n            registerInternal(registry.register(alias, bundle, wrapper, Type.RESOURCE));\n        }\n    }","id":96444,"modified_method":"@Override\n    public void registerResources(String alias, String name, HttpContext httpContext) throws NamespaceException {\n        validateAlias(alias, false);\n        validateName(name);\n\n        if (httpContext == null)\n            httpContext = createDefaultHttpContext();\n        ResourceServlet servlet = new ResourceServlet(name, httpContext);\n\n        registerInternal(alias, servlet, null, null, Type.RESOURCE);\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"HttpServiceImpl(StandardContext context, WebServer webServer, Host virtualHost, Bundle bundle) {\n        this.registry = GlobalRegistry.INSTANCE;\n        this.virtualHost = virtualHost;\n        this.webServer = webServer;\n        this.context = context;\n        this.bundle = bundle;\n    }","id":96445,"modified_method":"HttpServiceImpl(ServerEnvironment serverEnvironment, WebServer webServer, Host virtualHost, Bundle bundle) {\n        this.registry = GlobalRegistry.INSTANCE;\n        this.virtualHost = virtualHost;\n        this.webServer = webServer;\n        this.serverEnvironment = serverEnvironment;\n        this.bundle = bundle;\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"void unregisterInternal(Registration reg) {\n\n        Wrapper wrapper = reg.getWrapper();\n        String alias = reg.getAlias() + \"/*\";\n\n        context.removeChild(wrapper);\n        context.removeServletMapping(alias);\n\n        Mapper mapper = webServer.getService().getMapper();\n        mapper.removeWrapper(virtualHost.getName(), context.getPath(), alias);\n    }","id":96446,"modified_method":"void unregisterInternal(Registration reg) {\n        StandardContext context = reg.getContext();\n        try {\n            context.stop();\n        } catch (LifecycleException e) {\n            WEB_LOGGER.stopContextFailed(e);\n        }\n        try {\n            context.destroy();\n        } catch (Exception e) {\n            WEB_LOGGER.destroyContextFailed(e);\n        }\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testResourceAccess() throws Exception {\n        BundleContext context = bundle.getBundleContext();\n        ServiceReference sref = FrameworkUtils.waitForServiceReference(context, HttpService.class);\n        HttpService httpService = (HttpService) context.getService(sref);\n        String reqspec = \"/httpservice/resource/message.txt\";\n        try {\n            // Verify that the alias is not yet available\n            assertNotAvailable(reqspec);\n\n            // Register the test resource and make a call\n            httpService.registerResources(\"/resource\", \"/res\", null);\n            Assert.assertEquals(\"Hello from Resource\", performCall(reqspec));\n\n            // Unregister the servlet alias\n            httpService.unregister(\"/resource\");\n\n            // Verify that the alias is not available any more\n            assertNotAvailable(reqspec);\n        } finally {\n            context.ungetService(sref);\n        }\n    }","id":96447,"modified_method":"@Test\n    public void testResourceAccess() throws Exception {\n        BundleContext context = bundle.getBundleContext();\n        ServiceReference sref = FrameworkUtils.waitForServiceReference(context, HttpService.class);\n        HttpService httpService = (HttpService) context.getService(sref);\n        String reqspec = \"/resource/message.txt\";\n        try {\n            // Verify that the alias is not yet available\n            assertNotAvailable(reqspec);\n\n            // Register the test resource and make a call\n            httpService.registerResources(\"/resource\", \"/res\", null);\n            Assert.assertEquals(\"Hello from Resource\", performCall(reqspec));\n\n            // Unregister the servlet alias\n            httpService.unregister(\"/resource\");\n\n            // Verify that the alias is not available any more\n            assertNotAvailable(reqspec);\n        } finally {\n            context.ungetService(sref);\n        }\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testServletContext() throws Exception {\n        BundleContext context = bundle.getBundleContext();\n        ServiceReference sref = FrameworkUtils.waitForServiceReference(context, HttpService.class);\n        HttpService httpService = (HttpService) context.getService(sref);\n        String reqspec = \"/httpservice/servlet2?test=param&param=Kermit\";\n        try {\n            // Verify that the alias is not yet available\n            assertNotAvailable(reqspec);\n\n            // Register the test servlet\n            HttpServiceServlet servlet = new HttpServiceServlet(bundle);\n            Dictionary<String, String> parms = new Hashtable<String, String>();\n            parms.put(\"foo\", \"bar\");\n            httpService.registerServlet(\"/servlet2\", servlet, parms, null);\n\n            // Check that the ServletContext is available\n            Assert.assertEquals(\"/httpservice\", servlet.getServletContext().getContextPath());\n\n            // Check that the ServletConfig is available\n            Assert.assertEquals(\"bar\", servlet.getServletConfig().getInitParameter(\"foo\"));\n\n            // Unregister the servlet alias\n            httpService.unregister(\"/servlet2\");\n            assertNotAvailable(reqspec);\n        } finally {\n            context.ungetService(sref);\n        }\n    }","id":96448,"modified_method":"@Test\n    public void testServletContext() throws Exception {\n        BundleContext context = bundle.getBundleContext();\n        ServiceReference sref = FrameworkUtils.waitForServiceReference(context, HttpService.class);\n        HttpService httpService = (HttpService) context.getService(sref);\n        String reqspec = \"/servlet2?test=param&param=Kermit\";\n        try {\n            // Verify that the alias is not yet available\n            assertNotAvailable(reqspec);\n\n            // Register the test servlet\n            HttpServiceServlet servlet = new HttpServiceServlet(bundle);\n            Dictionary<String, String> parms = new Hashtable<String, String>();\n            parms.put(\"foo\", \"bar\");\n            httpService.registerServlet(\"/servlet2\", servlet, parms, null);\n\n            // Check that the ServletContext is available\n            Assert.assertEquals(\"/servlet2\", servlet.getServletContext().getContextPath());\n\n            // Check that the ServletConfig is available\n            Assert.assertEquals(\"bar\", servlet.getServletConfig().getInitParameter(\"foo\"));\n\n            // Unregister the servlet alias\n            httpService.unregister(\"/servlet2\");\n            assertNotAvailable(reqspec);\n        } finally {\n            context.ungetService(sref);\n        }\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testServletAccess() throws Exception {\n        BundleContext context = bundle.getBundleContext();\n        ServiceReference sref = FrameworkUtils.waitForServiceReference(context, HttpService.class);\n        HttpService httpService = (HttpService) context.getService(sref);\n        String reqspec = \"/httpservice/servlet?test=param&param=Kermit\";\n        try {\n            // Verify that the alias is not yet available\n            assertNotAvailable(reqspec);\n\n            // Register the test servlet and make a call\n            httpService.registerServlet(\"/servlet\", new HttpServiceServlet(bundle), null, null);\n            Assert.assertEquals(\"Hello: Kermit\", performCall(reqspec));\n\n            // Unregister the servlet alias\n            httpService.unregister(\"/servlet\");\n            assertNotAvailable(reqspec);\n\n            // Verify that the alias is not available any more\n            assertNotAvailable(reqspec);\n        } finally {\n            context.ungetService(sref);\n        }\n    }","id":96449,"modified_method":"@Test\n    public void testServletAccess() throws Exception {\n        BundleContext context = bundle.getBundleContext();\n        ServiceReference sref = FrameworkUtils.waitForServiceReference(context, HttpService.class);\n        HttpService httpService = (HttpService) context.getService(sref);\n        String reqspec = \"/servlet?test=param&param=Kermit\";\n        try {\n            // Verify that the alias is not yet available\n            assertNotAvailable(reqspec);\n\n            // Register the test servlet and make a call\n            httpService.registerServlet(\"/servlet\", new HttpServiceServlet(bundle), null, null);\n            Assert.assertEquals(\"Hello: Kermit\", performCall(reqspec));\n\n            // Unregister the servlet alias\n            httpService.unregister(\"/servlet\");\n            assertNotAvailable(reqspec);\n\n            // Verify that the alias is not available any more\n            assertNotAvailable(reqspec);\n        } finally {\n            context.ungetService(sref);\n        }\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testServletInstance() throws Exception {\n        BundleContext context = bundle.getBundleContext();\n        ServiceReference sref = FrameworkUtils.waitForServiceReference(context, HttpService.class);\n        HttpService httpService = (HttpService) context.getService(sref);\n        String reqspec = \"/httpservice/servlet?test=instance\";\n        try {\n            // Verify that the alias is not yet available\n            assertNotAvailable(reqspec);\n\n            // Register the test servlet and make a call\n            httpService.registerServlet(\"/servlet\", new HttpServiceServlet(bundle), null, null);\n            Assert.assertEquals(\"http-service-example:0.0.0\", performCall(reqspec));\n        } finally {\n            context.ungetService(sref);\n        }\n        assertNotAvailable(reqspec);\n    }","id":96450,"modified_method":"@Test\n    public void testServletInstance() throws Exception {\n        BundleContext context = bundle.getBundleContext();\n        ServiceReference sref = FrameworkUtils.waitForServiceReference(context, HttpService.class);\n        HttpService httpService = (HttpService) context.getService(sref);\n        String reqspec = \"/servlet?test=instance\";\n        try {\n            // Verify that the alias is not yet available\n            assertNotAvailable(reqspec);\n\n            // Register the test servlet and make a call\n            httpService.registerServlet(\"/servlet\", new HttpServiceServlet(bundle), null, null);\n            Assert.assertEquals(\"http-service-example:0.0.0\", performCall(reqspec));\n        } finally {\n            context.ungetService(sref);\n        }\n        assertNotAvailable(reqspec);\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testServletInitProps() throws Exception {\n        BundleContext context = bundle.getBundleContext();\n        ServiceReference sref = FrameworkUtils.waitForServiceReference(context, HttpService.class);\n        HttpService httpService = (HttpService) context.getService(sref);\n        String reqspec = \"/httpservice/servlet?test=init&init=someKey\";\n        try {\n            // Verify that the alias is not yet available\n            assertNotAvailable(reqspec);\n\n            Properties initParams = new Properties();\n            initParams.setProperty(\"someKey\", \"someValue\");\n\n            // Register the test servlet and make a call\n            httpService.registerServlet(\"/servlet\", new HttpServiceServlet(bundle), initParams, null);\n            Assert.assertEquals(\"someKey=someValue\", performCall(reqspec));\n        } finally {\n            context.ungetService(sref);\n        }\n        assertNotAvailable(reqspec);\n    }","id":96451,"modified_method":"@Test\n    public void testServletInitProps() throws Exception {\n        BundleContext context = bundle.getBundleContext();\n        ServiceReference sref = FrameworkUtils.waitForServiceReference(context, HttpService.class);\n        HttpService httpService = (HttpService) context.getService(sref);\n        String reqspec = \"/servlet?test=init&init=someKey\";\n        try {\n            // Verify that the alias is not yet available\n            assertNotAvailable(reqspec);\n\n            Properties initParams = new Properties();\n            initParams.setProperty(\"someKey\", \"someValue\");\n\n            // Register the test servlet and make a call\n            httpService.registerServlet(\"/servlet\", new HttpServiceServlet(bundle), initParams, null);\n            Assert.assertEquals(\"someKey=someValue\", performCall(reqspec));\n        } finally {\n            context.ungetService(sref);\n        }\n        assertNotAvailable(reqspec);\n    }","commit_id":"a1d014d2ecd7ec07c2cee8d4c3a46fe43ef82c6e","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n   protected Toolbar createMainToolbar()\n   {\n      ToolbarPopupMenu moreMenu = new ToolbarPopupMenu();\n//      moreMenu.addItem(commands_.vcsIgnore().createMenuItem(false));\n//      moreMenu.addSeparator();\n      moreMenu.addItem(commands_.vcsShowHistory().createMenuItem(false));\n      moreMenu.addSeparator();\n      moreMenu.addItem(commands_.vcsPull().createMenuItem(false));\n      moreMenu.addItem(commands_.vcsPush().createMenuItem(false));\n      moreMenu.addSeparator();\n      moreMenu.addItem(commands_.showShellDialog().createMenuItem(false));\n\n      Toolbar toolbar = new Toolbar();\n      toolbar.addLeftWidget(commands_.vcsDiff().createToolbarButton());\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(commands_.vcsRevert().createToolbarButton());\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(commands_.vcsCommit().createToolbarButton());\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(new ToolbarButton(\n            \"More\",\n            StandardIcons.INSTANCE.more_actions(),\n            moreMenu));\n\n      toolbar.addRightWidget(branchToolbarButton_);\n      \n      toolbar.addRightWidget(new ToolbarButton(\n            commands_.vcsRefresh().getImageResource(),\n            new ClickHandler() {\n               @Override\n               public void onClick(ClickEvent event)\n               {\n                  table_.showProgress();\n                  commands_.vcsRefresh().execute();\n               }\n            }));\n      return toolbar;\n   }","id":96452,"modified_method":"@Override\n   protected Toolbar createMainToolbar()\n   {\n      ToolbarPopupMenu moreMenu = new ToolbarPopupMenu();\n      moreMenu.addItem(commands_.vcsPull().createMenuItem(false));\n      moreMenu.addItem(commands_.vcsPush().createMenuItem(false));\n      moreMenu.addSeparator();\n      moreMenu.addItem(commands_.vcsShowHistory().createMenuItem(false));\n      moreMenu.addSeparator();\n      moreMenu.addItem(commands_.showShellDialog().createMenuItem(false));\n\n      Toolbar toolbar = new Toolbar();\n      toolbar.addLeftWidget(commands_.vcsDiff().createToolbarButton());\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(commands_.vcsRevert().createToolbarButton());\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(commands_.vcsCommit().createToolbarButton());\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(new ToolbarButton(\n            \"More\",\n            StandardIcons.INSTANCE.more_actions(),\n            moreMenu));\n\n      toolbar.addRightWidget(branchToolbarButton_);\n      \n      toolbar.addRightWidget(new ToolbarButton(\n            commands_.vcsRefresh().getImageResource(),\n            new ClickHandler() {\n               @Override\n               public void onClick(ClickEvent event)\n               {\n                  table_.showProgress();\n                  commands_.vcsRefresh().execute();\n               }\n            }));\n      return toolbar;\n   }","commit_id":"a689594d1d1b6a12b2fa5cdb2fc86968d4b9999f","url":"https://github.com/rstudio/rstudio"},{"original_method":"public void setFilesCommandsEnabled(boolean enabled)\n   {\n      commands_.vcsAddFiles().setEnabled(enabled);\n      commands_.vcsRemoveFiles().setEnabled(enabled);\n      commands_.vcsRevert().setEnabled(enabled);\n   }","id":96453,"modified_method":"public void setFilesCommandsEnabled(boolean enabled)\n   {\n      commands_.vcsAddFiles().setEnabled(enabled);\n      commands_.vcsRemoveFiles().setEnabled(enabled);\n      commands_.vcsRevert().setEnabled(enabled);\n      commands_.vcsIgnore().setEnabled(enabled);\n   }","commit_id":"a689594d1d1b6a12b2fa5cdb2fc86968d4b9999f","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Override\n   protected Toolbar createMainToolbar()\n   {\n      Toolbar toolbar = new Toolbar();\n\n      toolbar.addLeftWidget(commands_.vcsDiff().createToolbarButton());\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(commands_.vcsAddFiles().createToolbarButton());\n      toolbar.addLeftWidget(commands_.vcsRemoveFiles().createToolbarButton());\n      toolbar.addLeftWidget(commands_.vcsRevert().createToolbarButton());\n      toolbar.addLeftSeparator();\n      \n      toolbar.addLeftWidget(commands_.vcsCommit().createToolbarButton());\n      \n      toolbar.addLeftSeparator();\n      \n      ToolbarPopupMenu moreMenu = new ToolbarPopupMenu();\n\n      moreMenu.addItem(commands_.vcsShowHistory().createMenuItem(false));\n      moreMenu.addSeparator();\n      moreMenu.addItem(commands_.vcsPull().createMenuItem(false));\n      moreMenu.addItem(commands_.vcsCleanup().createMenuItem(false));\n      moreMenu.addSeparator();\n      moreMenu.addItem(commands_.showShellDialog().createMenuItem(false));\n\n      toolbar.addLeftWidget(new ToolbarButton(\n          \"More\",\n          StandardIcons.INSTANCE.more_actions(),\n          moreMenu));\n\n      toolbar.addLeftSeparator();\n      toolbar.addRightWidget(commands_.vcsRefresh().createToolbarButton());\n\n      return toolbar;\n   }","id":96454,"modified_method":"@Override\n   protected Toolbar createMainToolbar()\n   {\n      Toolbar toolbar = new Toolbar();\n\n      toolbar.addLeftWidget(commands_.vcsDiff().createToolbarButton());\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(commands_.vcsAddFiles().createToolbarButton());\n      toolbar.addLeftWidget(commands_.vcsRemoveFiles().createToolbarButton());\n      toolbar.addLeftSeparator();\n      \n      toolbar.addLeftWidget(commands_.vcsCommit().createToolbarButton());\n      \n      toolbar.addLeftSeparator();\n      \n      ToolbarPopupMenu moreMenu = new ToolbarPopupMenu();\n\n      moreMenu.addItem(commands_.vcsRevert().createMenuItem(false));\n      moreMenu.addItem(commands_.vcsIgnore().createMenuItem(false));\n      moreMenu.addSeparator();\n      moreMenu.addItem(commands_.vcsPull().createMenuItem(false));\n      moreMenu.addItem(commands_.vcsCleanup().createMenuItem(false));\n      moreMenu.addSeparator();\n      moreMenu.addItem(commands_.vcsShowHistory().createMenuItem(false));\n      moreMenu.addSeparator();\n      moreMenu.addItem(commands_.showShellDialog().createMenuItem(false));\n\n      toolbar.addLeftWidget(new ToolbarButton(\n          \"More\",\n          StandardIcons.INSTANCE.more_actions(),\n          moreMenu));\n\n      toolbar.addLeftSeparator();\n      toolbar.addRightWidget(commands_.vcsRefresh().createToolbarButton());\n\n      return toolbar;\n   }","commit_id":"a689594d1d1b6a12b2fa5cdb2fc86968d4b9999f","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Override\n   public void showContextMenu(final int clientX, final int clientY)\n   {\n      final ToolbarPopupMenu menu = new ToolbarPopupMenu();\n      \n      menu.addItem(commands_.vcsDiff().createMenuItem(false));\n      menu.addSeparator();\n      menu.addItem(commands_.vcsAddFiles().createMenuItem(false));\n      menu.addItem(commands_.vcsRemoveFiles().createMenuItem(false));\n      menu.addItem(commands_.vcsRevert().createMenuItem(false));\n      menu.addSeparator();\n      menu.addItem(commands_.vcsOpen().createMenuItem(false));\n    \n      menu.setPopupPositionAndShow(new PositionCallback() {\n         @Override\n         public void setPosition(int offsetWidth, int offsetHeight)\n         {\n            menu.setPopupPosition(clientX, clientY);     \n         }\n      });\n   }","id":96455,"modified_method":"@Override\n   public void showContextMenu(final int clientX, final int clientY)\n   {\n      final ToolbarPopupMenu menu = new ToolbarPopupMenu();\n      \n      menu.addItem(commands_.vcsDiff().createMenuItem(false));\n      menu.addSeparator();\n      menu.addItem(commands_.vcsAddFiles().createMenuItem(false));\n      menu.addItem(commands_.vcsRemoveFiles().createMenuItem(false));\n      menu.addSeparator();\n      menu.addItem(commands_.vcsRevert().createMenuItem(false));\n      menu.addItem(commands_.vcsIgnore().createMenuItem(false));\n      menu.addSeparator();\n      menu.addItem(commands_.vcsOpen().createMenuItem(false));\n    \n      menu.setPopupPositionAndShow(new PositionCallback() {\n         @Override\n         public void setPosition(int offsetWidth, int offsetHeight)\n         {\n            menu.setPopupPosition(clientX, clientY);     \n         }\n      });\n   }","commit_id":"a689594d1d1b6a12b2fa5cdb2fc86968d4b9999f","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Inject\n   public SVNReviewPanel(SVNChangelistTablePresenter changelist,\n                         LineTableView diffPane,\n                         Commands commands)\n   {\n      commands_ = commands;\n      splitPanel_ = new SplitLayoutPanel(4);\n\n      changelist_ = changelist.getView();\n      lines_ = diffPane;\n      lines_.getElement().setTabIndex(-1);\n\n      overrideSizeWarning_ = new SizeWarningWidget(\"diff\");\n\n      changelist.setSelectFirstItemByDefault(true);\n\n      Widget widget = GWT.<Binder>create(Binder.class).createAndBindUi(this);\n      initWidget(widget);\n\n      topToolbar_.addStyleName(RES.styles().toolbar());\n\n      switchViewButton_ = new LeftRightToggleButton(\"Changes\", \"History\", true);\n      switchViewButton_.getElement().getStyle().setMarginRight(8, Unit.PX);\n      topToolbar_.addLeftWidget(switchViewButton_);\n      \n      topToolbar_.addLeftWidget(commands.vcsAddFiles().createToolbarButton());\n      topToolbar_.addLeftWidget(commands.vcsRemoveFiles().createToolbarButton());\n      topToolbar_.addLeftWidget(commands.vcsRevert().createToolbarButton());\n\n      topToolbar_.addLeftSeparator();\n      \n      topToolbar_.addLeftWidget(commands.vcsCommit().createToolbarButton());\n      \n/*\n      topToolbar_.addLeftSeparator();\n\n      ignoreButton_ = topToolbar_.addLeftWidget(new ToolbarButton(\n            \"Ignore\", RES.ignore(), (ClickHandler) null));\n*/\n\n    \n      topToolbar_.addRightWidget(commands.vcsRefresh().createToolbarButton());\n\n      topToolbar_.addRightSeparator();\n\n      commands.vcsPull().setButtonLabel(\"Update\");\n      commands.vcsPull().setMenuLabel(\"Update\");\n      topToolbar_.addRightWidget(commands.vcsPull().createToolbarButton());\n\n      diffToolbar_.addStyleName(RES.styles().toolbar());\n      diffToolbar_.addStyleName(RES.styles().diffToolbar());\n\n      diffToolbar_.addLeftSeparator();\n      discardAllButton_ = diffToolbar_.addLeftWidget(new ToolbarButton(\n            \"Discard All\", RES.discard(), (ClickHandler) null));\n\n      listBoxAdapter_ = new ListBoxAdapter(contextLines_);\n\n      new WidgetHandlerRegistration(this)\n      {\n         @Override\n         protected HandlerRegistration doRegister()\n         {\n            return Event.addNativePreviewHandler(new NativePreviewHandler()\n            {\n               @Override\n               public void onPreviewNativeEvent(NativePreviewEvent event)\n               {\n                  NativeEvent nativeEvent = event.getNativeEvent();\n                  if (event.getTypeInt() == Event.ONKEYDOWN\n                      && KeyboardShortcut.getModifierValue(nativeEvent) == KeyboardShortcut.CTRL)\n                  {\n                     switch (nativeEvent.getKeyCode())\n                     {\n                        case KeyCodes.KEY_DOWN:\n                           nativeEvent.preventDefault();\n                           scrollBy(diffScroll_, getLineScroll(diffScroll_), 0);\n                           break;\n                        case KeyCodes.KEY_UP:\n                           nativeEvent.preventDefault();\n                           scrollBy(diffScroll_,\n                                    -getLineScroll(diffScroll_),\n                                    0);\n                           break;\n                        case KeyCodes.KEY_PAGEDOWN:\n                           nativeEvent.preventDefault();\n                           scrollBy(diffScroll_, getPageScroll(diffScroll_), 0);\n                           break;\n                        case KeyCodes.KEY_PAGEUP:\n                           nativeEvent.preventDefault();\n                           scrollBy(diffScroll_,\n                                    -getPageScroll(diffScroll_),\n                                    0);\n                           break;\n                     }\n                  }\n               }\n            });\n         }\n      };\n   }","id":96456,"modified_method":"@Inject\n   public SVNReviewPanel(SVNChangelistTablePresenter changelist,\n                         LineTableView diffPane,\n                         Commands commands)\n   {\n      commands_ = commands;\n      splitPanel_ = new SplitLayoutPanel(4);\n\n      changelist_ = changelist.getView();\n      lines_ = diffPane;\n      lines_.getElement().setTabIndex(-1);\n\n      overrideSizeWarning_ = new SizeWarningWidget(\"diff\");\n\n      changelist.setSelectFirstItemByDefault(true);\n\n      Widget widget = GWT.<Binder>create(Binder.class).createAndBindUi(this);\n      initWidget(widget);\n\n      topToolbar_.addStyleName(RES.styles().toolbar());\n\n      switchViewButton_ = new LeftRightToggleButton(\"Changes\", \"History\", true);\n      switchViewButton_.getElement().getStyle().setMarginRight(8, Unit.PX);\n      topToolbar_.addLeftWidget(switchViewButton_);\n      \n      topToolbar_.addLeftWidget(commands.vcsAddFiles().createToolbarButton());\n      topToolbar_.addLeftWidget(commands.vcsRemoveFiles().createToolbarButton());\n      topToolbar_.addLeftSeparator();\n      topToolbar_.addLeftWidget(commands.vcsRevert().createToolbarButton());\n      topToolbar_.addLeftWidget(commands.vcsIgnore().createToolbarButton());\n      topToolbar_.addLeftSeparator();\n      topToolbar_.addLeftWidget(commands.vcsCommit().createToolbarButton());\n      \n      \n      topToolbar_.addRightWidget(commands.vcsRefresh().createToolbarButton());\n      topToolbar_.addRightSeparator();\n      commands.vcsPull().setButtonLabel(\"Update\");\n      commands.vcsPull().setMenuLabel(\"Update\");\n      topToolbar_.addRightWidget(commands.vcsPull().createToolbarButton());\n\n      diffToolbar_.addStyleName(RES.styles().toolbar());\n      diffToolbar_.addStyleName(RES.styles().diffToolbar());\n\n      diffToolbar_.addLeftSeparator();\n      discardAllButton_ = diffToolbar_.addLeftWidget(new ToolbarButton(\n            \"Discard All\", RES.discard(), (ClickHandler) null));\n\n      listBoxAdapter_ = new ListBoxAdapter(contextLines_);\n\n      new WidgetHandlerRegistration(this)\n      {\n         @Override\n         protected HandlerRegistration doRegister()\n         {\n            return Event.addNativePreviewHandler(new NativePreviewHandler()\n            {\n               @Override\n               public void onPreviewNativeEvent(NativePreviewEvent event)\n               {\n                  NativeEvent nativeEvent = event.getNativeEvent();\n                  if (event.getTypeInt() == Event.ONKEYDOWN\n                      && KeyboardShortcut.getModifierValue(nativeEvent) == KeyboardShortcut.CTRL)\n                  {\n                     switch (nativeEvent.getKeyCode())\n                     {\n                        case KeyCodes.KEY_DOWN:\n                           nativeEvent.preventDefault();\n                           scrollBy(diffScroll_, getLineScroll(diffScroll_), 0);\n                           break;\n                        case KeyCodes.KEY_UP:\n                           nativeEvent.preventDefault();\n                           scrollBy(diffScroll_,\n                                    -getLineScroll(diffScroll_),\n                                    0);\n                           break;\n                        case KeyCodes.KEY_PAGEDOWN:\n                           nativeEvent.preventDefault();\n                           scrollBy(diffScroll_, getPageScroll(diffScroll_), 0);\n                           break;\n                        case KeyCodes.KEY_PAGEUP:\n                           nativeEvent.preventDefault();\n                           scrollBy(diffScroll_,\n                                    -getPageScroll(diffScroll_),\n                                    0);\n                           break;\n                     }\n                  }\n               }\n            });\n         }\n      };\n   }","commit_id":"a689594d1d1b6a12b2fa5cdb2fc86968d4b9999f","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Override\n   public void showContextMenu(final int clientX, \n                               final int clientY)\n   {\n      final ToolbarPopupMenu menu = new ToolbarPopupMenu();\n      \n      menu.addItem(commands_.vcsAddFiles().createMenuItem(false));\n      menu.addItem(commands_.vcsRemoveFiles().createMenuItem(false));\n      menu.addItem(commands_.vcsRevert().createMenuItem(false));\n      menu.addSeparator();\n      menu.addItem(commands_.vcsOpen().createMenuItem(false));\n    \n      menu.setPopupPositionAndShow(new PositionCallback() {\n         @Override\n         public void setPosition(int offsetWidth, int offsetHeight)\n         {\n            menu.setPopupPosition(clientX, clientY);     \n         }\n      });\n   }","id":96457,"modified_method":"@Override\n   public void showContextMenu(final int clientX, \n                               final int clientY)\n   {\n      final ToolbarPopupMenu menu = new ToolbarPopupMenu();\n      \n      menu.addItem(commands_.vcsAddFiles().createMenuItem(false));\n      menu.addItem(commands_.vcsRemoveFiles().createMenuItem(false));\n      menu.addSeparator();\n      menu.addItem(commands_.vcsRevert().createMenuItem(false));\n      menu.addItem(commands_.vcsIgnore().createMenuItem(false));\n      menu.addSeparator();\n      menu.addItem(commands_.vcsOpen().createMenuItem(false));\n    \n      menu.setPopupPositionAndShow(new PositionCallback() {\n         @Override\n         public void setPosition(int offsetWidth, int offsetHeight)\n         {\n            menu.setPopupPosition(clientX, clientY);     \n         }\n      });\n   }","commit_id":"a689594d1d1b6a12b2fa5cdb2fc86968d4b9999f","url":"https://github.com/rstudio/rstudio"},{"original_method":"@Override\n   protected Toolbar createMainToolbar()\n   {\n      ToolbarPopupMenu moreMenu = new ToolbarPopupMenu();\n//      moreMenu.addItem(commands_.vcsIgnore().createMenuItem(false));\n//      moreMenu.addSeparator();\n      moreMenu.addItem(commands_.vcsPull().createMenuItem(false));\n      moreMenu.addItem(commands_.vcsPush().createMenuItem(false));\n      moreMenu.addSeparator();\n      moreMenu.addItem(commands_.vcsShowHistory().createMenuItem(false));\n\n      Toolbar toolbar = new Toolbar();\n      toolbar.addLeftWidget(commands_.vcsDiff().createToolbarButton());\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(commands_.vcsRevert().createToolbarButton());\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(commands_.vcsCommit().createToolbarButton());\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(new ToolbarButton(\n            \"More\",\n            StandardIcons.INSTANCE.more_actions(),\n            moreMenu));\n\n      toolbar.addRightWidget(branchToolbarButton_);\n      \n      toolbar.addRightWidget(new ToolbarButton(\n            commands_.vcsRefresh().getImageResource(),\n            new ClickHandler() {\n               @Override\n               public void onClick(ClickEvent event)\n               {\n                  table_.showProgress();\n                  commands_.vcsRefresh().execute();\n               }\n            }));\n      return toolbar;\n   }","id":96458,"modified_method":"@Override\n   protected Toolbar createMainToolbar()\n   {\n      ToolbarPopupMenu moreMenu = new ToolbarPopupMenu();\n//      moreMenu.addItem(commands_.vcsIgnore().createMenuItem(false));\n//      moreMenu.addSeparator();\n      moreMenu.addItem(commands_.vcsShowHistory().createMenuItem(false));\n      moreMenu.addSeparator();\n      moreMenu.addItem(commands_.vcsPull().createMenuItem(false));\n      moreMenu.addItem(commands_.vcsPush().createMenuItem(false));\n      moreMenu.addSeparator();\n      moreMenu.addItem(commands_.showShellDialog().createMenuItem(false));\n\n      Toolbar toolbar = new Toolbar();\n      toolbar.addLeftWidget(commands_.vcsDiff().createToolbarButton());\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(commands_.vcsRevert().createToolbarButton());\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(commands_.vcsCommit().createToolbarButton());\n      toolbar.addLeftSeparator();\n      toolbar.addLeftWidget(new ToolbarButton(\n            \"More\",\n            StandardIcons.INSTANCE.more_actions(),\n            moreMenu));\n\n      toolbar.addRightWidget(branchToolbarButton_);\n      \n      toolbar.addRightWidget(new ToolbarButton(\n            commands_.vcsRefresh().getImageResource(),\n            new ClickHandler() {\n               @Override\n               public void onClick(ClickEvent event)\n               {\n                  table_.showProgress();\n                  commands_.vcsRefresh().execute();\n               }\n            }));\n      return toolbar;\n   }","commit_id":"2cad676b6e41a032e024417ec5033c18fe26ce7c","url":"https://github.com/rstudio/rstudio"},{"original_method":"/**\n     * Generate java snippet for cache configuration with JDBC store and types metadata.\n     *\n     * @param pojos POJO descriptors.\n     * @param pkg Types package.\n     * @param includeKeys {@code true} if key fields should be included into value class.\n     * @param outFolder Output folder.\n     * @param askOverwrite Callback to ask user to confirm file overwrite.\n     * @throws IOException If generation failed.\n     */\n    public static void snippet(Collection<PojoDescriptor> pojos, String pkg, boolean includeKeys,\n        String outFolder, ConfirmCallable askOverwrite) throws IOException {\n        File pkgFolder = new File(outFolder, pkg.replace('.', File.separatorChar));\n\n        File cacheCfg = new File(pkgFolder, \"CacheConfig.java\");\n\n        if (cacheCfg.exists()) {\n            MessageBox.Result choice = askOverwrite.confirm(cacheCfg.getName());\n\n            if (CANCEL == choice)\n                throw new IllegalStateException(\"Java snippet generation was canceled!\");\n\n            if (NO == choice || NO_TO_ALL == choice)\n                return;\n        }\n\n        Collection<String> src = new ArrayList<>(256);\n\n        header(src, pkg, \"java.sql.*;java.util.*;\" +\n                \"org.apache.ignite.cache.*;org.apache.ignite.cache.store.jdbc.*;\" +\n                \"org.apache.ignite.configuration.*\",\n            \"CacheConfig\", \"CacheConfig\");\n\n        // Generate methods for each type in order to avoid compiler error \"java: code too large\".\n        for (PojoDescriptor pojo : pojos) {\n            String tbl = pojo.table();\n            String valClsName = pojo.valueClassName();\n\n            add1(src, \"/**\");\n            add1(src, \"* Create JDBC type for \" + tbl + \".\");\n            add1(src, \"*\");\n            add1(src, \"* @param cacheName Cache name.\");\n            add1(src, \"*/\");\n            add1(src, \"private static JdbcType jdbcType\" + valClsName + \"(String cacheName) {\");\n\n            add2(src, \"JdbcType jdbcType = new JdbcType();\");\n            add0(src, \"\");\n\n            add2(src, \"jdbcType.setCacheName(cacheName);\");\n\n            // Database info.\n            add2(src, \"jdbcType.setDatabaseSchema(\\\"\" + pojo.schema() + \"\\\");\");\n            add2(src, \"jdbcType.setDatabaseTable(\\\"\" + tbl + \"\\\");\");\n\n            // Java info.\n            add2(src, \"jdbcType.setKeyType(\\\"\" + pkg + \".\" + pojo.keyClassName() + \"\\\");\");\n            add2(src, \"jdbcType.setValueType(\\\"\" + pkg + \".\" + valClsName + \"\\\");\");\n            add0(src, \"\");\n\n            // Key fields.\n            add2(src, \"// Key fields for \" + tbl + \".\");\n            add2(src, \"Collection<JdbcTypeField> keys = new ArrayList<>();\");\n            addFields(src, \"keys\", pojo.keyFields());\n            add2(src, \"jdbcType.setKeyFields(keys.toArray(new JdbcTypeField[keys.size()]));\");\n            add0(src, \"\");\n\n            // Value fields.\n            add2(src, \"// Value fields for \" + tbl + \".\");\n            add2(src, \"Collection<JdbcTypeField> vals = new ArrayList<>();\");\n            addFields(src, \"vals\", pojo.valueFields(includeKeys));\n            add2(src, \"jdbcType.setValueFields(vals.toArray(new JdbcTypeField[vals.size()]));\");\n            add0(src, \"\");\n            add2(src, \"return jdbcType;\");\n            add1(src, \"}\");\n            add0(src, \"\");\n\n            add1(src, \"/**\");\n            add1(src, \"* Create SQL Query descriptor for \" + tbl + \".\");\n            add1(src, \"*/\");\n            add1(src, \"private static QueryEntity queryEntity\" + valClsName + \"() {\");\n\n            // Query entity.\n            add2(src, \"QueryEntity qryEntity = new QueryEntity();\");\n            add0(src, \"\");\n            add2(src, \"qryEntity.setKeyType(\\\"\" + pkg + \".\" + pojo.keyClassName() + \"\\\");\");\n            add2(src, \"qryEntity.setValueType(\\\"\" + pkg + \".\" + valClsName + \"\\\");\");\n\n            add0(src, \"\");\n\n            // Query fields.\n            add2(src, \"// Query fields for \" + tbl + \".\");\n            add2(src, \"LinkedHashMap<String, String> fields = new LinkedHashMap<>();\");\n            add0(src, \"\");\n\n            for (PojoField field : pojo.fields())\n                add2(src, \"fields.put(\\\"\" + field.javaName() + \"\\\", \\\"\" + javaTypeName(field) + \"\\\");\");\n\n            add0(src, \"\");\n            add2(src, \"qryEntity.setFields(fields);\");\n            add0(src, \"\");\n\n            // Indexes.\n            Collection<QueryIndex> idxs = pojo.indexes();\n\n            if (!idxs.isEmpty()) {\n                add2(src, \"// Indexes for \" + tbl + \".\");\n                add2(src, \"Collection<QueryIndex> idxs = new ArrayList<>();\");\n                add0(src, \"\");\n\n                boolean firstIdx = true;\n\n                for (QueryIndex idx : idxs) {\n                    if (idx.getFields().size() == 1) {\n                        Map.Entry<String, Boolean> fld = F.first(idx.getFields().entrySet());\n\n                        add2(src, \"idxs.add(new QueryIndex(\\\"\" + fld.getKey() + \"\\\", \" + fld.getValue() + \", \\\"\" +\n                            idx.getName() + \"\\\"));\");\n                        add0(src, \"\");\n                    }\n                    else {\n                        add2(src, (firstIdx ? \"QueryIndex \" : \"\") + \"idx = new QueryIndex();\");\n                        add0(src, \"\");\n\n                        add2(src, \"idx.setName(\\\"\" + idx.getName() + \"\\\");\");\n                        add0(src, \"\");\n\n                        add2(src, (firstIdx ? \"LinkedHashMap<String, Boolean> \" : \"\") +\n                            \"idxFlds = new LinkedHashMap<>();\");\n                        add0(src, \"\");\n\n                        for (Map.Entry<String, Boolean> idxFld : idx.getFields().entrySet())\n                            add2(src, \"idxFlds.put(\\\"\" + idxFld.getKey() + \"\\\", \" + idxFld.getValue() + \");\");\n\n                        add0(src, \"\");\n\n                        add2(src, \"idx.setFields(idxFlds);\");\n                        add0(src, \"\");\n\n                        add2(src, \"idxs.add(idx);\");\n                        add0(src, \"\");\n\n                        firstIdx = false;\n                    }\n                }\n\n                add2(src, \"qryEntity.setIndexes(idxs);\");\n                add0(src, \"\");\n            }\n\n            add2(src, \"return qryEntity;\");\n\n            add1(src, \"}\");\n            add0(src, \"\");\n        }\n\n        add1(src, \"/**\");\n        add1(src, \"* Configure cache.\");\n        add1(src, \"*\");\n        add1(src, \"* @param cacheName Cache name.\");\n        add1(src, \"* @param storeFactory Cache store factory.\");\n        add1(src, \"*/\");\n        add1(src, \"public static <K, V> CacheConfiguration<K, V> cache(String cacheName,\" +\n            \" CacheJdbcPojoStoreFactory<K, V> storeFactory) {\");\n        add2(src, \"if (storeFactory == null)\");\n        add3(src, \" throw new IllegalArgumentException(\\\"Cache store factory cannot be null.\\\");\");\n        add0(src, \"\");\n        add2(src, \"CacheConfiguration<K, V> ccfg = new CacheConfiguration<>(cacheName);\");\n        add0(src, \"\");\n        add2(src, \"ccfg.setCacheStoreFactory(storeFactory);\");\n        add2(src, \"ccfg.setReadThrough(true);\");\n        add2(src, \"ccfg.setWriteThrough(true);\");\n        add0(src, \"\");\n\n        add2(src, \"// Configure JDBC types. \");\n        add2(src, \"Collection<JdbcType> jdbcTypes = new ArrayList<>();\");\n        add0(src, \"\");\n\n        for (PojoDescriptor pojo : pojos)\n            add2(src, \"jdbcTypes.add(jdbcType\" + pojo.valueClassName() + \"(cacheName));\");\n\n        add0(src, \"\");\n\n        add2(src, \"storeFactory.setTypes(jdbcTypes.toArray(new JdbcType[jdbcTypes.size()]));\");\n        add0(src, \"\");\n\n\n        add2(src, \"// Configure query entities. \");\n        add2(src, \"Collection<QueryEntity> qryEntities = new ArrayList<>();\");\n        add0(src, \"\");\n\n        for (PojoDescriptor pojo : pojos)\n            add2(src, \"qryEntities.add(queryEntity\" + pojo.valueClassName() + \"());\");\n\n        add0(src, \"\");\n\n        add2(src, \"ccfg.setQueryEntities(qryEntities);\");\n        add0(src, \"\");\n\n        add2(src, \"return ccfg;\");\n        add1(src, \"}\");\n\n        add0(src, \"}\");\n\n        write(src, cacheCfg);\n    }","id":96459,"modified_method":"/**\n     * Generate java snippet for cache configuration with JDBC store and types metadata.\n     *\n     * @param pojos POJO descriptors.\n     * @param pkg Types package.\n     * @param includeKeys {@code true} if key fields should be included into value class.\n     * @param outFolder Output folder.\n     * @param askOverwrite Callback to ask user to confirm file overwrite.\n     * @throws IOException If generation failed.\n     */\n    public static void snippet(Collection<PojoDescriptor> pojos, String pkg, boolean includeKeys,\n        String outFolder, ConfirmCallable askOverwrite) throws IOException {\n        File pkgFolder = new File(outFolder, pkg.replace('.', File.separatorChar));\n\n        File cacheCfg = new File(pkgFolder, \"CacheConfig.java\");\n\n        if (cacheCfg.exists()) {\n            MessageBox.Result choice = askOverwrite.confirm(cacheCfg.getName());\n\n            if (CANCEL == choice)\n                throw new IllegalStateException(\"Java snippet generation was canceled!\");\n\n            if (NO == choice || NO_TO_ALL == choice)\n                return;\n        }\n\n        Collection<String> src = new ArrayList<>(256);\n\n        header(src, pkg, \"java.sql.*;java.util.*;\" +\n            \"org.apache.ignite.cache.*;org.apache.ignite.cache.store.jdbc.*;\" +\n            \"org.apache.ignite.configuration.*\",\n            \"CacheConfig\", \"CacheConfig\");\n\n        // Generate methods for each type in order to avoid compiler error \"java: code too large\".\n        for (PojoDescriptor pojo : pojos) {\n            String tbl = pojo.table();\n            String valClsName = pojo.valueClassName();\n\n            add1(src, \"/**\");\n            add1(src, \" * Create JDBC type for \" + tbl + \".\");\n            add1(src, \" *\");\n            add1(src, \" * @param cacheName Cache name.\");\n            add1(src, \" * @return Configured JDBC type.\");\n            add1(src, \" */\");\n            add1(src, \"private static JdbcType jdbcType\" + valClsName + \"(String cacheName) {\");\n\n            add2(src, \"JdbcType jdbcType = new JdbcType();\");\n            add0(src, \"\");\n\n            add2(src, \"jdbcType.setCacheName(cacheName);\");\n\n            // Database info.\n            add2(src, \"jdbcType.setDatabaseSchema(\\\"\" + pojo.schema() + \"\\\");\");\n            add2(src, \"jdbcType.setDatabaseTable(\\\"\" + tbl + \"\\\");\");\n\n            // Java info.\n            add2(src, \"jdbcType.setKeyType(\\\"\" + pkg + \".\" + pojo.keyClassName() + \"\\\");\");\n            add2(src, \"jdbcType.setValueType(\\\"\" + pkg + \".\" + valClsName + \"\\\");\");\n            add0(src, \"\");\n\n            // Key fields.\n            add2(src, \"// Key fields for \" + tbl + \".\");\n            add2(src, \"Collection<JdbcTypeField> keys = new ArrayList<>();\");\n            addFields(src, \"keys\", pojo.keyFields());\n            add2(src, \"jdbcType.setKeyFields(keys.toArray(new JdbcTypeField[keys.size()]));\");\n            add0(src, \"\");\n\n            // Value fields.\n            add2(src, \"// Value fields for \" + tbl + \".\");\n            add2(src, \"Collection<JdbcTypeField> vals = new ArrayList<>();\");\n            addFields(src, \"vals\", pojo.valueFields(includeKeys));\n            add2(src, \"jdbcType.setValueFields(vals.toArray(new JdbcTypeField[vals.size()]));\");\n            add0(src, \"\");\n            add2(src, \"return jdbcType;\");\n            add1(src, \"}\");\n            add0(src, \"\");\n\n            add1(src, \"/**\");\n            add1(src, \" * Create SQL Query descriptor for \" + tbl + \".\");\n            add1(src, \" *\");\n            add1(src, \" * @return Configured query entity.\");\n            add1(src, \" */\");\n            add1(src, \"private static QueryEntity queryEntity\" + valClsName + \"() {\");\n\n            // Query entity.\n            add2(src, \"QueryEntity qryEntity = new QueryEntity();\");\n            add0(src, \"\");\n            add2(src, \"qryEntity.setKeyType(\\\"\" + pkg + \".\" + pojo.keyClassName() + \"\\\");\");\n            add2(src, \"qryEntity.setValueType(\\\"\" + pkg + \".\" + valClsName + \"\\\");\");\n\n            add0(src, \"\");\n\n            // Query fields.\n            add2(src, \"// Query fields for \" + tbl + \".\");\n            add2(src, \"LinkedHashMap<String, String> fields = new LinkedHashMap<>();\");\n            add0(src, \"\");\n\n            for (PojoField field : pojo.fields())\n                add2(src, \"fields.put(\\\"\" + field.javaName() + \"\\\", \\\"\" + javaTypeName(field) + \"\\\");\");\n\n            add0(src, \"\");\n            add2(src, \"qryEntity.setFields(fields);\");\n            add0(src, \"\");\n\n            // Indexes.\n            Collection<QueryIndex> idxs = pojo.indexes();\n\n            if (!idxs.isEmpty()) {\n                add2(src, \"// Indexes for \" + tbl + \".\");\n                add2(src, \"Collection<QueryIndex> idxs = new ArrayList<>();\");\n                add0(src, \"\");\n\n                boolean firstIdx = true;\n\n                for (QueryIndex idx : idxs) {\n                    if (idx.getFields().size() == 1) {\n                        Map.Entry<String, Boolean> fld = F.first(idx.getFields().entrySet());\n\n                        add2(src, \"idxs.add(new QueryIndex(\\\"\" + fld.getKey() + \"\\\", \" + fld.getValue() + \", \\\"\" +\n                            idx.getName() + \"\\\"));\");\n                        add0(src, \"\");\n                    }\n                    else {\n                        add2(src, (firstIdx ? \"QueryIndex \" : \"\") + \"idx = new QueryIndex();\");\n                        add0(src, \"\");\n\n                        add2(src, \"idx.setName(\\\"\" + idx.getName() + \"\\\");\");\n                        add0(src, \"\");\n\n                        add2(src, (firstIdx ? \"LinkedHashMap<String, Boolean> \" : \"\") +\n                            \"idxFlds = new LinkedHashMap<>();\");\n                        add0(src, \"\");\n\n                        for (Map.Entry<String, Boolean> idxFld : idx.getFields().entrySet())\n                            add2(src, \"idxFlds.put(\\\"\" + idxFld.getKey() + \"\\\", \" + idxFld.getValue() + \");\");\n\n                        add0(src, \"\");\n\n                        add2(src, \"idx.setFields(idxFlds);\");\n                        add0(src, \"\");\n\n                        add2(src, \"idxs.add(idx);\");\n                        add0(src, \"\");\n\n                        firstIdx = false;\n                    }\n                }\n\n                add2(src, \"qryEntity.setIndexes(idxs);\");\n                add0(src, \"\");\n            }\n\n            add2(src, \"return qryEntity;\");\n\n            add1(src, \"}\");\n            add0(src, \"\");\n        }\n\n        add1(src, \"/**\");\n        add1(src, \" * Configure cache.\");\n        add1(src, \" *\");\n        add1(src, \" * @param cacheName Cache name.\");\n        add1(src, \" * @param storeFactory Cache store factory.\");\n        add1(src, \" * @return Cache configuration.\");\n        add1(src, \" */\");\n        add1(src, \"public static <K, V> CacheConfiguration<K, V> cache(String cacheName,\" +\n            \" CacheJdbcPojoStoreFactory<K, V> storeFactory) {\");\n        add2(src, \"if (storeFactory == null)\");\n        add3(src, \" throw new IllegalArgumentException(\\\"Cache store factory cannot be null.\\\");\");\n        add0(src, \"\");\n        add2(src, \"CacheConfiguration<K, V> ccfg = new CacheConfiguration<>(cacheName);\");\n        add0(src, \"\");\n        add2(src, \"ccfg.setCacheStoreFactory(storeFactory);\");\n        add2(src, \"ccfg.setReadThrough(true);\");\n        add2(src, \"ccfg.setWriteThrough(true);\");\n        add0(src, \"\");\n\n        add2(src, \"// Configure JDBC types. \");\n        add2(src, \"Collection<JdbcType> jdbcTypes = new ArrayList<>();\");\n        add0(src, \"\");\n\n        for (PojoDescriptor pojo : pojos)\n            add2(src, \"jdbcTypes.add(jdbcType\" + pojo.valueClassName() + \"(cacheName));\");\n\n        add0(src, \"\");\n\n        add2(src, \"storeFactory.setTypes(jdbcTypes.toArray(new JdbcType[jdbcTypes.size()]));\");\n        add0(src, \"\");\n\n\n        add2(src, \"// Configure query entities. \");\n        add2(src, \"Collection<QueryEntity> qryEntities = new ArrayList<>();\");\n        add0(src, \"\");\n\n        for (PojoDescriptor pojo : pojos)\n            add2(src, \"qryEntities.add(queryEntity\" + pojo.valueClassName() + \"());\");\n\n        add0(src, \"\");\n\n        add2(src, \"ccfg.setQueryEntities(qryEntities);\");\n        add0(src, \"\");\n\n        add2(src, \"return ccfg;\");\n        add1(src, \"}\");\n\n        add0(src, \"}\");\n\n        write(src, cacheCfg);\n    }","commit_id":"b541daf0bc9193dc0aa78b27efa610b26e49bec7","url":"https://github.com/apache/ignite"},{"original_method":"/**\n     * FLUSH protocol.\n     * Send to current mbrs - suspected_mbrs (not including new_mbrs, but including old_mbr)\n     * Send TMP_VIEW event down,\n     * this allows FLUSH/NAKACK to set membership correctly\n     */\n\n    public void flush(Vector flush_dest, Vector suspected_mbrs) {\n        Vector rebroadcast_msgs=new Vector();\n\n        if(suspected_mbrs == null)\n            suspected_mbrs=new Vector();\n\n        while(flush_dest.size() > 0) {\n            flush_rsp=null;\n            synchronized(flush_mutex) {\n                passDown(new Event(Event.FLUSH, flush_dest));  // send FLUSH to members in flush_dest\n                if(flush_rsp == null) {\n                    try {\n                        flush_mutex.wait(flush_timeout);\n                    }\n                    catch(Exception e) {\n                    }\n                }\n            }\n            if(flush_rsp == null) {\n                break;\n            }\n\n            if(rebroadcast_unstable_msgs && flush_rsp.unstable_msgs != null &&\n                    flush_rsp.unstable_msgs.size() > 0) {\n                Message m;\n                for(int i=0; i < flush_rsp.unstable_msgs.size(); i++) {\n                    m=(Message)flush_rsp.unstable_msgs.elementAt(i);\n\n                    // just add msg, NAKACK.RESEND will weed out duplicates based on\n                    // <sender:id> before re-broadcasting msgs\n                    rebroadcast_msgs.addElement(m);\n                }\n            }\n\n            if(flush_rsp.result == true)\n                break;\n            else {\n                if(flush_rsp.failed_mbrs != null) {\n                    for(int i=0; i < flush_rsp.failed_mbrs.size(); i++) {\n                        flush_dest.removeElement(flush_rsp.failed_mbrs.elementAt(i));\n                        suspected_mbrs.addElement(flush_rsp.failed_mbrs.elementAt(i));\n                    }\n                }\n            }\n        } // while\n         if(log.isInfoEnabled()) log.info(\"flushing completed.\");\n\n\n        // Rebroadcast unstable messages\n        if(rebroadcast_unstable_msgs && rebroadcast_msgs.size() > 0) {\n\n                if(log.isInfoEnabled()) log.info(\"re-broadcasting unstable messages (\" +\n                        rebroadcast_msgs.size() + ')');\n            // NAKACK layer will rebroadcast the msgs (using the same seqnos assigned earlier)\n            synchronized(rebroadcast_mutex) {\n                passDown(new Event(Event.REBROADCAST_MSGS, rebroadcast_msgs));\n                try {\n                    rebroadcast_mutex.wait(rebroadcast_timeout);\n                }\n                catch(Exception e) {\n                }\n            }\n             if(log.isInfoEnabled()) log.info(\"re-broadcasting messages completed\");\n        }\n    }","id":96460,"modified_method":"/**\n     * FLUSH protocol.\n     * Send to current mbrs - suspected_mbrs (not including new_mbrs, but including old_mbr)\n     * Send TMP_VIEW event down,\n     * this allows FLUSH/NAKACK to set membership correctly\n     */\n\n    public void flush(Vector flush_dest, Vector suspected_mbrs) {\n        Vector rebroadcast_msgs=new Vector();\n\n        if(suspected_mbrs == null)\n            suspected_mbrs=new Vector();\n\n        while(!flush_dest.isEmpty()) {\n            flush_rsp=null;\n            synchronized(flush_mutex) {\n                passDown(new Event(Event.FLUSH, flush_dest));  // send FLUSH to members in flush_dest\n                if(flush_rsp == null) {\n                    try {\n                        flush_mutex.wait(flush_timeout);\n                    }\n                    catch(Exception e) {\n                    }\n                }\n            }\n            if(flush_rsp == null) {\n                break;\n            }\n\n            if(rebroadcast_unstable_msgs && flush_rsp.unstable_msgs != null &&\n                    !flush_rsp.unstable_msgs.isEmpty()) {\n                Message m;\n                for(int i=0; i < flush_rsp.unstable_msgs.size(); i++) {\n                    m=(Message)flush_rsp.unstable_msgs.elementAt(i);\n\n                    // just add msg, NAKACK.RESEND will weed out duplicates based on\n                    // <sender:id> before re-broadcasting msgs\n                    rebroadcast_msgs.addElement(m);\n                }\n            }\n\n            if(flush_rsp.result == true)\n                break;\n            else {\n                if(flush_rsp.failed_mbrs != null) {\n                    for(int i=0; i < flush_rsp.failed_mbrs.size(); i++) {\n                        flush_dest.removeElement(flush_rsp.failed_mbrs.elementAt(i));\n                        suspected_mbrs.addElement(flush_rsp.failed_mbrs.elementAt(i));\n                    }\n                }\n            }\n        } // while\n         if(log.isInfoEnabled()) log.info(\"flushing completed.\");\n\n\n        // Rebroadcast unstable messages\n        if(rebroadcast_unstable_msgs && !rebroadcast_msgs.isEmpty()) {\n\n                if(log.isInfoEnabled()) log.info(\"re-broadcasting unstable messages (\" +\n                        rebroadcast_msgs.size() + ')');\n            // NAKACK layer will rebroadcast the msgs (using the same seqnos assigned earlier)\n            synchronized(rebroadcast_mutex) {\n                passDown(new Event(Event.REBROADCAST_MSGS, rebroadcast_msgs));\n                try {\n                    rebroadcast_mutex.wait(rebroadcast_timeout);\n                }\n                catch(Exception e) {\n                }\n            }\n             if(log.isInfoEnabled()) log.info(\"re-broadcasting messages completed\");\n        }\n    }","commit_id":"f6c39930c960bafdba2efeb69964968b7ccaf998","url":"https://github.com/belaban/JGroups"},{"original_method":"boolean checkForViewEnforcer(Protocol up_protocol) {\n        String prot_name;\n\n        if(up_protocol == null)\n            return false;\n        prot_name=up_protocol.getName();\n        if(prot_name != null && \"VIEW_ENFORCER\".equals(prot_name))\n            return true;\n        return checkForViewEnforcer(up_protocol.getUpProtocol());\n    }","id":96461,"modified_method":"boolean checkForViewEnforcer(Protocol up_protocol) {\n        String prot_name;\n\n        if(up_protocol == null)\n            return false;\n        prot_name=up_protocol.getName();\n        return prot_name != null && \"VIEW_ENFORCER\".equals(prot_name) || checkForViewEnforcer(up_protocol.getUpProtocol());\n    }","commit_id":"f6c39930c960bafdba2efeb69964968b7ccaf998","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Assigns the new ltime. Installs view and view_id. Changes role to coordinator if necessary.\n     * Sends VIEW_CHANGE event up and down the stack.\n     */\n    public void installView(ViewId new_view, Vector mbrs) {\n        Object coord;\n        int rc;\n\n        synchronized(view_mutex) {                    // serialize access to views\n            ltime=Math.max(new_view.getId(), ltime);  // compute Lamport logical time\n            if(log.isInfoEnabled()) log.info(\"received view change, vid=\" + new_view);\n\n            /* Check for self-inclusion: if I'm not part of the new membership, I just discard it.\n               This ensures that messages sent in view V1 are only received by members of V1 */\n            if(checkSelfInclusion(mbrs) == false) {\n                if(warn) log.warn(\"I'm not member of \" + mbrs + \", discarding\");\n                return;\n            }\n\n\n            if(view_id == null) {\n                view_id=(ViewId)new_view.clone();\n            }\n            else {\n                rc=new_view.compareTo(view_id);  // rc should always be a positive number\n                if(rc <= 0) {  // don't accept view id lower than our own\n                    if(warn) log.warn(\"received view <= current view; discarding it ! \" +\n                            \"(view_id: \" + view_id + \", new_view: \" + new_view + ')');\n                    return;\n                }\n                else {  // the check for vid equality was okay, assign new_view to view_id\n                    if(new_view.getCoordAddress() != null) {\n                        view_id=new ViewId(new_view.getCoordAddress(), new_view.getId());\n                    }\n                    else {\n                        view_id=new ViewId(view_id.getCoordAddress(), new_view.getId());\n                    }\n                }\n            }\n\n            if(mbrs != null && mbrs.size() > 0)\n                this.mbrs.set(mbrs);\n\n\n\n            // Send VIEW_CHANGE event up and down the stack:\n            Event view_event=new Event(Event.VIEW_CHANGE, makeView(this.mbrs.getMembers()));\n            passDown(view_event); // needed e.g. by failure detector or UDP\n            passUp(view_event);\n\n            coord=determineCoordinator();\n            if(coord != null && coord.equals(local_addr)) {\n               if (! haveCoordinatorRole())   // this avoids deadlock on coordinator - when suspect/join occurs simultaneously\n                   becomeCoordinator();\n            }\n            else {\n                if(haveCoordinatorRole() && !local_addr.equals(coord))\n                    becomeParticipant();\n            }\n        }\n    }","id":96462,"modified_method":"/**\n     * Assigns the new ltime. Installs view and view_id. Changes role to coordinator if necessary.\n     * Sends VIEW_CHANGE event up and down the stack.\n     */\n    public void installView(ViewId new_view, Vector mbrs) {\n        Object coord;\n        int rc;\n\n        synchronized(view_mutex) {                    // serialize access to views\n            ltime=Math.max(new_view.getId(), ltime);  // compute Lamport logical time\n            if(log.isInfoEnabled()) log.info(\"received view change, vid=\" + new_view);\n\n            /* Check for self-inclusion: if I'm not part of the new membership, I just discard it.\n               This ensures that messages sent in view V1 are only received by members of V1 */\n            if(checkSelfInclusion(mbrs) == false) {\n                if(warn) log.warn(\"I'm not member of \" + mbrs + \", discarding\");\n                return;\n            }\n\n\n            if(view_id == null) {\n                view_id=(ViewId)new_view.clone();\n            }\n            else {\n                rc=new_view.compareTo(view_id);  // rc should always be a positive number\n                if(rc <= 0) {  // don't accept view id lower than our own\n                    if(warn) log.warn(\"received view <= current view; discarding it ! \" +\n                            \"(view_id: \" + view_id + \", new_view: \" + new_view + ')');\n                    return;\n                }\n                else {  // the check for vid equality was okay, assign new_view to view_id\n                    if(new_view.getCoordAddress() != null) {\n                        view_id=new ViewId(new_view.getCoordAddress(), new_view.getId());\n                    }\n                    else {\n                        view_id=new ViewId(view_id.getCoordAddress(), new_view.getId());\n                    }\n                }\n            }\n\n            if(mbrs != null && !mbrs.isEmpty())\n                this.mbrs.set(mbrs);\n\n\n\n            // Send VIEW_CHANGE event up and down the stack:\n            Event view_event=new Event(Event.VIEW_CHANGE, makeView(this.mbrs.getMembers()));\n            passDown(view_event); // needed e.g. by failure detector or UDP\n            passUp(view_event);\n\n            coord=determineCoordinator();\n            if(coord != null && coord.equals(local_addr)) {\n               if (! haveCoordinatorRole())   // this avoids deadlock on coordinator - when suspect/join occurs simultaneously\n                   becomeCoordinator();\n            }\n            else {\n                if(haveCoordinatorRole() && !local_addr.equals(coord))\n                    becomeParticipant();\n            }\n        }\n    }","commit_id":"f6c39930c960bafdba2efeb69964968b7ccaf998","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Computes the next view. Returns a copy that has <code>old_mbrs<\/code> and\n     * <code>suspected_mbrs<\/code> removed and <code>new_mbrs<\/code> added.\n     */\n    public View getNextView(Vector new_mbrs, Vector old_mbrs, Vector suspected_mbrs) {\n        Vector members;\n        long vid;\n        View v;\n        Membership tmp_mbrs;\n        Vector mbrs_to_remove=new Vector();\n\n        if(old_mbrs != null && old_mbrs.size() > 0)\n            for(int i=0; i < old_mbrs.size(); i++)\n                mbrs_to_remove.addElement(old_mbrs.elementAt(i));\n        if(suspected_mbrs != null && suspected_mbrs.size() > 0)\n            for(int i=0; i < suspected_mbrs.size(); i++)\n                if(!mbrs_to_remove.contains(suspected_mbrs.elementAt(i)))\n                    mbrs_to_remove.addElement(suspected_mbrs.elementAt(i));\n\n        synchronized(view_mutex) {\n            vid=Math.max(view_id.getId(), ltime) + 1;\n            ltime=vid;\n            tmp_mbrs=this.mbrs.copy();\n            tmp_mbrs.merge(new_mbrs, mbrs_to_remove);\n            members=(Vector)tmp_mbrs.getMembers().clone();\n            v=new View(local_addr, vid, members);\n            return v;\n        }\n    }","id":96463,"modified_method":"/**\n     * Computes the next view. Returns a copy that has <code>old_mbrs<\/code> and\n     * <code>suspected_mbrs<\/code> removed and <code>new_mbrs<\/code> added.\n     */\n    public View getNextView(Vector new_mbrs, Vector old_mbrs, Vector suspected_mbrs) {\n        long vid;\n        View v;\n        Membership tmp_mbrs;\n        Vector mbrs_to_remove=new Vector();\n\n        if(old_mbrs != null && !old_mbrs.isEmpty())\n            for(int i=0; i < old_mbrs.size(); i++)\n                mbrs_to_remove.addElement(old_mbrs.elementAt(i));\n        if(suspected_mbrs != null && !suspected_mbrs.isEmpty())\n            for(int i=0; i < suspected_mbrs.size(); i++)\n                if(!mbrs_to_remove.contains(suspected_mbrs.elementAt(i)))\n                    mbrs_to_remove.addElement(suspected_mbrs.elementAt(i));\n\n        synchronized(view_mutex) {\n            vid=Math.max(view_id.getId(), ltime) + 1;\n            ltime=vid;\n            tmp_mbrs=this.mbrs.copy();\n            tmp_mbrs.merge(new_mbrs, mbrs_to_remove);\n            Vector tmp=(Vector)tmp_mbrs.getMembers().clone();\n            v=new View(local_addr, vid, tmp);\n            return v;\n        }\n    }","commit_id":"f6c39930c960bafdba2efeb69964968b7ccaf998","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Return a copy of the current membership minus the suspected members: FLUSH request is not sent\n     * to suspected members (because they won't respond, and not to joining members either.\n     * It IS sent to leaving members (before they are allowed to leave).\n     */\n    Vector computeFlushDestination(Vector suspected_mbrs) {\n        Vector ret=mbrs.getMembers(); // *copy* of current membership\n        if(suspected_mbrs != null && suspected_mbrs.size() > 0)\n            for(int i=0; i < suspected_mbrs.size(); i++)\n                ret.removeElement(suspected_mbrs.elementAt(i));\n        return ret;\n    }","id":96464,"modified_method":"/**\n     * Return a copy of the current membership minus the suspected members: FLUSH request is not sent\n     * to suspected members (because they won't respond, and not to joining members either.\n     * It IS sent to leaving members (before they are allowed to leave).\n     */\n    Vector computeFlushDestination(Vector suspected_mbrs) {\n        Vector ret=mbrs.getMembers(); // *copy* of current membership\n        if(suspected_mbrs != null && !suspected_mbrs.isEmpty())\n            for(int i=0; i < suspected_mbrs.size(); i++)\n                ret.removeElement(suspected_mbrs.elementAt(i));\n        return ret;\n    }","commit_id":"f6c39930c960bafdba2efeb69964968b7ccaf998","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Setup the Protocol instance acording to the configuration string\n     */\n    public boolean setProperties(Properties props) {\n        String str;\n\n        super.setProperties(props);\n        str=props.getProperty(\"join_timeout\");           // time to wait for JOIN\n        if(str != null) {\n            join_timeout=Long.parseLong(str);\n            props.remove(\"join_timeout\");\n        }\n\n        str=props.getProperty(\"print_local_addr\");\n        if(str != null) {\n            print_local_addr=Boolean.valueOf(str).booleanValue();\n            props.remove(\"print_local_addr\");\n        }\n\n        str=props.getProperty(\"view_change_timeout\");    // time to wait for VIEW_CHANGE\n        if(str != null) {\n            view_change_timeout=Long.parseLong(str);\n            props.remove(\"view_change_timeout\");\n        }\n\n        str=props.getProperty(\"join_retry_timeout\");     // time to wait between JOINs\n        if(str != null) {\n            join_retry_timeout=Long.parseLong(str);\n            props.remove(\"join_retry_timeout\");\n        }\n\n        str=props.getProperty(\"leave_timeout\");           // time to wait until coord responds to LEAVE req.\n        if(str != null) {\n            leave_timeout=Long.parseLong(str);\n            props.remove(\"leave_timeout\");\n        }\n\n        str=props.getProperty(\"flush_timeout\");           // time to wait until FLUSH completes (0=forever)\n        if(str != null) {\n            flush_timeout=Long.parseLong(str);\n            props.remove(\"flush_timeout\");\n        }\n\n        str=props.getProperty(\"rebroadcast_unstable_msgs\");  // bcast unstable msgs (recvd from FLUSH)\n        if(str != null) {\n            rebroadcast_unstable_msgs=Boolean.valueOf(str).booleanValue();\n            props.remove(\"rebroadcast_unstable_msgs\");\n        }\n\n        str=props.getProperty(\"rebroadcast_timeout\");     // time to wait until REBROADCAST_MSGS completes\n        if(str != null) {\n            rebroadcast_timeout=Long.parseLong(str);\n            props.remove(\"rebroadcast_timeout\");\n        }\n\n        str=props.getProperty(\"disable_initial_coord\");  // allow initial mbr to become coord or not\n        if(str != null) {\n            disable_initial_coord=Boolean.valueOf(str).booleanValue();\n            props.remove(\"disable_initial_coord\");\n        }\n\n        if(props.size() > 0) {\n            log.error(\"GMS.setProperties(): the following properties are not recognized: \" + props);\n\n            return false;\n        }\n        return true;\n    }","id":96465,"modified_method":"/**\n     * Setup the Protocol instance acording to the configuration string\n     */\n    public boolean setProperties(Properties props) {\n        String str;\n\n        super.setProperties(props);\n        str=props.getProperty(\"join_timeout\");           // time to wait for JOIN\n        if(str != null) {\n            join_timeout=Long.parseLong(str);\n            props.remove(\"join_timeout\");\n        }\n\n        str=props.getProperty(\"print_local_addr\");\n        if(str != null) {\n            print_local_addr=Boolean.valueOf(str).booleanValue();\n            props.remove(\"print_local_addr\");\n        }\n\n        str=props.getProperty(\"view_change_timeout\");    // time to wait for VIEW_CHANGE\n        if(str != null) {\n            view_change_timeout=Long.parseLong(str);\n            props.remove(\"view_change_timeout\");\n        }\n\n        str=props.getProperty(\"join_retry_timeout\");     // time to wait between JOINs\n        if(str != null) {\n            join_retry_timeout=Long.parseLong(str);\n            props.remove(\"join_retry_timeout\");\n        }\n\n        str=props.getProperty(\"leave_timeout\");           // time to wait until coord responds to LEAVE req.\n        if(str != null) {\n            leave_timeout=Long.parseLong(str);\n            props.remove(\"leave_timeout\");\n        }\n\n        str=props.getProperty(\"flush_timeout\");           // time to wait until FLUSH completes (0=forever)\n        if(str != null) {\n            flush_timeout=Long.parseLong(str);\n            props.remove(\"flush_timeout\");\n        }\n\n        str=props.getProperty(\"rebroadcast_unstable_msgs\");  // bcast unstable msgs (recvd from FLUSH)\n        if(str != null) {\n            rebroadcast_unstable_msgs=Boolean.valueOf(str).booleanValue();\n            props.remove(\"rebroadcast_unstable_msgs\");\n        }\n\n        str=props.getProperty(\"rebroadcast_timeout\");     // time to wait until REBROADCAST_MSGS completes\n        if(str != null) {\n            rebroadcast_timeout=Long.parseLong(str);\n            props.remove(\"rebroadcast_timeout\");\n        }\n\n        str=props.getProperty(\"disable_initial_coord\");  // allow initial mbr to become coord or not\n        if(str != null) {\n            disable_initial_coord=Boolean.valueOf(str).booleanValue();\n            props.remove(\"disable_initial_coord\");\n        }\n\n        if(!props.isEmpty()) {\n            log.error(\"GMS.setProperties(): the following properties are not recognized: \" + props);\n            return false;\n        }\n        return true;\n    }","commit_id":"f6c39930c960bafdba2efeb69964968b7ccaf998","url":"https://github.com/belaban/JGroups"},{"original_method":"public final void run() {\n    synchronized (myLock) {\n      final Bulk bulk = getNextCommandBulk();\n      if (bulk == null) return;\n\n      final Condition bulkExpire = myCommandToExpire.get(bulk);\n\n      if (bulk.myList.size() > 0) {\n        final FinalizableCommand command = (FinalizableCommand)bulk.myList.remove(0);\n        myCommandCount--;\n\n        final Condition expire = command.getExpired() != null ? command.getExpired() : bulkExpire;\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"CommandProcessor.run \" + command);\n        }\n        // max. I'm not actually quite sure this should have NON_MODAL modality but it should\n        // definitely have some since runnables in command list may (and do) request some PSI activity\n\n        final boolean queueNext = myCommandCount > 0;\n        ApplicationManager.getApplication().getInvokator().invokeLater(command, ModalityState.NON_MODAL, expire == null ? Condition.FALSE : expire).doWhenDone(new Runnable() {\n          public void run() {\n            if (queueNext) {\n              CommandProcessor.this.run();\n            }\n          }\n        });\n      }\n    }\n  }","id":96466,"modified_method":"public final void run() {\n    synchronized (myLock) {\n      final Bulk bulk = getNextCommandBulk();\n      if (bulk == null) return;\n\n      final Condition bulkExpire = myCommandToExpire.get(bulk);\n\n      if (!bulk.myList.isEmpty()) {\n        final FinalizableCommand command = bulk.myList.remove(0);\n        myCommandCount--;\n\n        final Condition expire = command.getExpired() != null ? command.getExpired() : bulkExpire;\n\n        if (LOG.isDebugEnabled()) {\n          LOG.debug(\"CommandProcessor.run \" + command);\n        }\n        // max. I'm not actually quite sure this should have NON_MODAL modality but it should\n        // definitely have some since runnables in command list may (and do) request some PSI activity\n\n        final boolean queueNext = myCommandCount > 0;\n        ApplicationManager.getApplication().getInvokator().invokeLater(command, ModalityState.NON_MODAL, expire == null ? Condition.FALSE : expire).doWhenDone(new Runnable() {\n          public void run() {\n            if (queueNext) {\n              CommandProcessor.this.run();\n            }\n          }\n        });\n      }\n    }\n  }","commit_id":"3e23c8196b4a65d60adcc867981e4ec77b1de17b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private Bulk getNextCommandBulk() {\n    while (myCommandList.size() > 0) {\n      final Bulk candidate = myCommandList.get(0);\n      if (candidate.myList.size() > 0) {\n        return candidate;\n      } else {\n        myCommandList.remove(0);\n        if (!myCommandList.contains(candidate)) {\n          myCommandToExpire.remove(candidate);\n        }\n      }\n    }\n\n    return null;\n  }","id":96467,"modified_method":"@Nullable\n  private Bulk getNextCommandBulk() {\n    while (!myCommandList.isEmpty()) {\n      final Bulk candidate = myCommandList.get(0);\n      if (!candidate.myList.isEmpty()) {\n        return candidate;\n      }\n      else {\n        myCommandList.remove(0);\n        if (!myCommandList.contains(candidate)) {\n          myCommandToExpire.remove(candidate);\n        }\n      }\n    }\n\n    return null;\n  }","commit_id":"3e23c8196b4a65d60adcc867981e4ec77b1de17b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void canceled() {\n      if (myPopup.getListStep() == this && !myDisposed) {\n        // Root canceled. Create new popup. This one cannot be reused.\n        myPopup = JBPopupFactory.getInstance().createListPopup(this);\n      }\n    }","id":96468,"modified_method":"public void canceled() {\n      if (myPopup.getListStep() == this && !myDisposed) {\n        // Root canceled. Create new popup. This one cannot be reused.\n        recreateMyPopup();\n      }\n    }","commit_id":"3e23c8196b4a65d60adcc867981e4ec77b1de17b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean updateActions(List<HighlightInfo.IntentionActionDescriptor> intentions, List<HighlightInfo.IntentionActionDescriptor> errorFixes,\n                               final List<HighlightInfo.IntentionActionDescriptor> inspectionFixes) {\n    if (myPopup.getContent() == null) {\n      // already disposed\n      return false;\n    }\n    if (!myFile.isValid()) return false;\n    IntentionListStep step = (IntentionListStep)myPopup.getListStep();\n    if (step.updateActions(intentions, errorFixes, inspectionFixes)) {\n      return true;\n    }\n    if (!myPopupShown) {\n      myPopup = JBPopupFactory.getInstance().createListPopup(step);\n      return true;\n    }\n    return false;\n\n  }","id":96469,"modified_method":"public boolean updateActions(List<HighlightInfo.IntentionActionDescriptor> intentions, List<HighlightInfo.IntentionActionDescriptor> errorFixes,\n                               final List<HighlightInfo.IntentionActionDescriptor> inspectionFixes) {\n    if (myPopup.getContent() == null) {\n      // already disposed\n      return false;\n    }\n    if (!myFile.isValid()) return false;\n    IntentionListStep step = (IntentionListStep)myPopup.getListStep();\n    if (step.updateActions(intentions, errorFixes, inspectionFixes)) {\n      return true;\n    }\n    if (!myPopupShown) {\n      step.recreateMyPopup();\n      return true;\n    }\n    return false;\n\n  }","commit_id":"3e23c8196b4a65d60adcc867981e4ec77b1de17b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private IntentionHintComponent(@NotNull Project project, @NotNull PsiFile file, @NotNull Editor editor, @NotNull List<HighlightInfo.IntentionActionDescriptor> intentions,\n                                 @NotNull List<HighlightInfo.IntentionActionDescriptor> errorFixes,\n                                 final List<HighlightInfo.IntentionActionDescriptor> inspectionFixes) {\n    ApplicationManager.getApplication().assertReadAccessAllowed();\n    myFile = file;\n    myProject = project;\n    myEditor = editor;\n\n    setLayout(new BorderLayout());\n    setOpaque(false);\n\n    boolean showFix = false;\n    for (final HighlightInfo.IntentionActionDescriptor pairs : errorFixes) {\n      IntentionAction fix = pairs.getAction();\n      if (IntentionManagerSettings.getInstance().isShowLightBulb(fix)) {\n        showFix = true;\n        break;\n      }\n    }\n    mySmartTagIcon = showFix ? ourQuickFixIcon : ourIntentionIcon;\n\n    myHighlightedIcon = new RowIcon(2);\n    myHighlightedIcon.setIcon(mySmartTagIcon, 0);\n    myHighlightedIcon.setIcon(ourArrowIcon, 1);\n\n    myButton = new JButton(mySmartTagIcon);\n    myButton.setFocusable(false);\n    myButton.setMargin(INACTIVE_MARGIN);\n    myButton.setBorderPainted(false);\n    myButton.setContentAreaFilled(false);\n\n    add(myButton, BorderLayout.CENTER);\n    setBorder(INACTIVE_BORDER);\n\n    myButton.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        showPopup();\n      }\n    });\n\n    myButton.addMouseListener(new MouseAdapter() {\n      public void mouseEntered(MouseEvent e) {\n        onMouseEnter();\n      }\n\n      public void mouseExited(MouseEvent e) {\n        onMouseExit();\n      }\n    });\n\n    myComponentHint = new MyComponentHint(this);\n    myPopup = JBPopupFactory.getInstance().createListPopup(new IntentionListStep(intentions, errorFixes, inspectionFixes));\n    Disposer.register(this, myPopup);\n  }","id":96470,"modified_method":"private IntentionHintComponent(@NotNull Project project, @NotNull PsiFile file, @NotNull Editor editor, @NotNull List<HighlightInfo.IntentionActionDescriptor> intentions,\n                                 @NotNull List<HighlightInfo.IntentionActionDescriptor> errorFixes,\n                                 final List<HighlightInfo.IntentionActionDescriptor> inspectionFixes) {\n    ApplicationManager.getApplication().assertReadAccessAllowed();\n    myFile = file;\n    myProject = project;\n    myEditor = editor;\n\n    setLayout(new BorderLayout());\n    setOpaque(false);\n\n    boolean showFix = false;\n    for (final HighlightInfo.IntentionActionDescriptor pairs : errorFixes) {\n      IntentionAction fix = pairs.getAction();\n      if (IntentionManagerSettings.getInstance().isShowLightBulb(fix)) {\n        showFix = true;\n        break;\n      }\n    }\n    mySmartTagIcon = showFix ? ourQuickFixIcon : ourIntentionIcon;\n\n    myHighlightedIcon = new RowIcon(2);\n    myHighlightedIcon.setIcon(mySmartTagIcon, 0);\n    myHighlightedIcon.setIcon(ourArrowIcon, 1);\n\n    myButton = new JButton(mySmartTagIcon);\n    myButton.setFocusable(false);\n    myButton.setMargin(INACTIVE_MARGIN);\n    myButton.setBorderPainted(false);\n    myButton.setContentAreaFilled(false);\n\n    add(myButton, BorderLayout.CENTER);\n    setBorder(INACTIVE_BORDER);\n\n    myButton.addActionListener(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        showPopup();\n      }\n    });\n\n    myButton.addMouseListener(new MouseAdapter() {\n      public void mouseEntered(MouseEvent e) {\n        onMouseEnter();\n      }\n\n      public void mouseExited(MouseEvent e) {\n        onMouseExit();\n      }\n    });\n\n    myComponentHint = new MyComponentHint(this);\n    IntentionListStep step = new IntentionListStep(intentions, errorFixes, inspectionFixes);\n    step.recreateMyPopup();\n    Disposer.register(this, myPopup);\n  }","commit_id":"3e23c8196b4a65d60adcc867981e4ec77b1de17b","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"boolean checkForViewEnforcer(Protocol up_protocol) {\n        String prot_name;\n\n        if(up_protocol == null)\n            return false;\n        prot_name=up_protocol.getName();\n        if(prot_name != null && \"VIEW_ENFORCER\".equals(prot_name))\n            return true;\n        return checkForViewEnforcer(up_protocol.getUpProtocol());\n    }","id":96471,"modified_method":"boolean checkForViewEnforcer(Protocol up_protocol) {\n        String prot_name;\n\n        if(up_protocol == null)\n            return false;\n        prot_name=up_protocol.getName();\n        return prot_name != null && \"VIEW_ENFORCER\".equals(prot_name) || checkForViewEnforcer(up_protocol.getUpProtocol());\n    }","commit_id":"72ce19fe39dc7c68bec44c8e105d2ad2e9de44f8","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Setup the Protocol instance acording to the configuration string\n     */\n    public boolean setProperties(Properties props) {\n        String str;\n\n        super.setProperties(props);\n        str=props.getProperty(\"join_timeout\");           // time to wait for JOIN\n        if(str != null) {\n            join_timeout=Long.parseLong(str);\n            props.remove(\"join_timeout\");\n        }\n\n        str=props.getProperty(\"print_local_addr\");\n        if(str != null) {\n            print_local_addr=Boolean.valueOf(str).booleanValue();\n            props.remove(\"print_local_addr\");\n        }\n\n        str=props.getProperty(\"view_change_timeout\");    // time to wait for VIEW_CHANGE\n        if(str != null) {\n            view_change_timeout=Long.parseLong(str);\n            props.remove(\"view_change_timeout\");\n        }\n\n        str=props.getProperty(\"join_retry_timeout\");     // time to wait between JOINs\n        if(str != null) {\n            join_retry_timeout=Long.parseLong(str);\n            props.remove(\"join_retry_timeout\");\n        }\n\n        str=props.getProperty(\"leave_timeout\");           // time to wait until coord responds to LEAVE req.\n        if(str != null) {\n            leave_timeout=Long.parseLong(str);\n            props.remove(\"leave_timeout\");\n        }\n\n        str=props.getProperty(\"flush_timeout\");           // time to wait until FLUSH completes (0=forever)\n        if(str != null) {\n            flush_timeout=Long.parseLong(str);\n            props.remove(\"flush_timeout\");\n        }\n\n        str=props.getProperty(\"rebroadcast_unstable_msgs\");  // bcast unstable msgs (recvd from FLUSH)\n        if(str != null) {\n            rebroadcast_unstable_msgs=Boolean.valueOf(str).booleanValue();\n            props.remove(\"rebroadcast_unstable_msgs\");\n        }\n\n        str=props.getProperty(\"rebroadcast_timeout\");     // time to wait until REBROADCAST_MSGS completes\n        if(str != null) {\n            rebroadcast_timeout=Long.parseLong(str);\n            props.remove(\"rebroadcast_timeout\");\n        }\n\n        str=props.getProperty(\"disable_initial_coord\");  // allow initial mbr to become coord or not\n        if(str != null) {\n            disable_initial_coord=Boolean.valueOf(str).booleanValue();\n            props.remove(\"disable_initial_coord\");\n        }\n\n        if(props.size() > 0) {\n            log.error(\"GMS.setProperties(): the following properties are not recognized: \" + props);\n\n            return false;\n        }\n        return true;\n    }","id":96472,"modified_method":"/**\n     * Setup the Protocol instance acording to the configuration string\n     */\n    public boolean setProperties(Properties props) {\n        String str;\n\n        super.setProperties(props);\n        str=props.getProperty(\"join_timeout\");           // time to wait for JOIN\n        if(str != null) {\n            join_timeout=Long.parseLong(str);\n            props.remove(\"join_timeout\");\n        }\n\n        str=props.getProperty(\"print_local_addr\");\n        if(str != null) {\n            print_local_addr=Boolean.valueOf(str).booleanValue();\n            props.remove(\"print_local_addr\");\n        }\n\n        str=props.getProperty(\"view_change_timeout\");    // time to wait for VIEW_CHANGE\n        if(str != null) {\n            view_change_timeout=Long.parseLong(str);\n            props.remove(\"view_change_timeout\");\n        }\n\n        str=props.getProperty(\"join_retry_timeout\");     // time to wait between JOINs\n        if(str != null) {\n            join_retry_timeout=Long.parseLong(str);\n            props.remove(\"join_retry_timeout\");\n        }\n\n        str=props.getProperty(\"leave_timeout\");           // time to wait until coord responds to LEAVE req.\n        if(str != null) {\n            leave_timeout=Long.parseLong(str);\n            props.remove(\"leave_timeout\");\n        }\n\n        str=props.getProperty(\"flush_timeout\");           // time to wait until FLUSH completes (0=forever)\n        if(str != null) {\n            flush_timeout=Long.parseLong(str);\n            props.remove(\"flush_timeout\");\n        }\n\n        str=props.getProperty(\"rebroadcast_unstable_msgs\");  // bcast unstable msgs (recvd from FLUSH)\n        if(str != null) {\n            rebroadcast_unstable_msgs=Boolean.valueOf(str).booleanValue();\n            props.remove(\"rebroadcast_unstable_msgs\");\n        }\n\n        str=props.getProperty(\"rebroadcast_timeout\");     // time to wait until REBROADCAST_MSGS completes\n        if(str != null) {\n            rebroadcast_timeout=Long.parseLong(str);\n            props.remove(\"rebroadcast_timeout\");\n        }\n\n        str=props.getProperty(\"disable_initial_coord\");  // allow initial mbr to become coord or not\n        if(str != null) {\n            disable_initial_coord=Boolean.valueOf(str).booleanValue();\n            props.remove(\"disable_initial_coord\");\n        }\n\n        if(!props.isEmpty()) {\n            log.error(\"GMS.setProperties(): the following properties are not recognized: \" + props);\n            return false;\n        }\n        return true;\n    }","commit_id":"72ce19fe39dc7c68bec44c8e105d2ad2e9de44f8","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * FLUSH protocol.\n     * Send to current mbrs - suspected_mbrs (not including new_mbrs, but including old_mbr)\n     * Send TMP_VIEW event down,\n     * this allows FLUSH/NAKACK to set membership correctly\n     */\n\n    public void flush(Vector flush_dest, Vector suspected_mbrs) {\n        Vector rebroadcast_msgs=new Vector();\n\n        if(suspected_mbrs == null)\n            suspected_mbrs=new Vector();\n\n        while(flush_dest.size() > 0) {\n            flush_rsp=null;\n            synchronized(flush_mutex) {\n                passDown(new Event(Event.FLUSH, flush_dest));  // send FLUSH to members in flush_dest\n                if(flush_rsp == null) {\n                    try {\n                        flush_mutex.wait(flush_timeout);\n                    }\n                    catch(Exception e) {\n                    }\n                }\n            }\n            if(flush_rsp == null) {\n                break;\n            }\n\n            if(rebroadcast_unstable_msgs && flush_rsp.unstable_msgs != null &&\n                    flush_rsp.unstable_msgs.size() > 0) {\n                Message m;\n                for(int i=0; i < flush_rsp.unstable_msgs.size(); i++) {\n                    m=(Message)flush_rsp.unstable_msgs.elementAt(i);\n\n                    // just add msg, NAKACK.RESEND will weed out duplicates based on\n                    // <sender:id> before re-broadcasting msgs\n                    rebroadcast_msgs.addElement(m);\n                }\n            }\n\n            if(flush_rsp.result == true)\n                break;\n            else {\n                if(flush_rsp.failed_mbrs != null) {\n                    for(int i=0; i < flush_rsp.failed_mbrs.size(); i++) {\n                        flush_dest.removeElement(flush_rsp.failed_mbrs.elementAt(i));\n                        suspected_mbrs.addElement(flush_rsp.failed_mbrs.elementAt(i));\n                    }\n                }\n            }\n        } // while\n         if(log.isInfoEnabled()) log.info(\"flushing completed.\");\n\n\n        // Rebroadcast unstable messages\n        if(rebroadcast_unstable_msgs && rebroadcast_msgs.size() > 0) {\n\n                if(log.isInfoEnabled()) log.info(\"re-broadcasting unstable messages (\" +\n                        rebroadcast_msgs.size() + ')');\n            // NAKACK layer will rebroadcast the msgs (using the same seqnos assigned earlier)\n            synchronized(rebroadcast_mutex) {\n                passDown(new Event(Event.REBROADCAST_MSGS, rebroadcast_msgs));\n                try {\n                    rebroadcast_mutex.wait(rebroadcast_timeout);\n                }\n                catch(Exception e) {\n                }\n            }\n             if(log.isInfoEnabled()) log.info(\"re-broadcasting messages completed\");\n        }\n    }","id":96473,"modified_method":"/**\n     * FLUSH protocol.\n     * Send to current mbrs - suspected_mbrs (not including new_mbrs, but including old_mbr)\n     * Send TMP_VIEW event down,\n     * this allows FLUSH/NAKACK to set membership correctly\n     */\n\n    public void flush(Vector flush_dest, Vector suspected_mbrs) {\n        Vector rebroadcast_msgs=new Vector();\n\n        if(suspected_mbrs == null)\n            suspected_mbrs=new Vector();\n\n        while(!flush_dest.isEmpty()) {\n            flush_rsp=null;\n            synchronized(flush_mutex) {\n                passDown(new Event(Event.FLUSH, flush_dest));  // send FLUSH to members in flush_dest\n                if(flush_rsp == null) {\n                    try {\n                        flush_mutex.wait(flush_timeout);\n                    }\n                    catch(Exception e) {\n                    }\n                }\n            }\n            if(flush_rsp == null) {\n                break;\n            }\n\n            if(rebroadcast_unstable_msgs && flush_rsp.unstable_msgs != null &&\n                    !flush_rsp.unstable_msgs.isEmpty()) {\n                Message m;\n                for(int i=0; i < flush_rsp.unstable_msgs.size(); i++) {\n                    m=(Message)flush_rsp.unstable_msgs.elementAt(i);\n\n                    // just add msg, NAKACK.RESEND will weed out duplicates based on\n                    // <sender:id> before re-broadcasting msgs\n                    rebroadcast_msgs.addElement(m);\n                }\n            }\n\n            if(flush_rsp.result == true)\n                break;\n            else {\n                if(flush_rsp.failed_mbrs != null) {\n                    for(int i=0; i < flush_rsp.failed_mbrs.size(); i++) {\n                        flush_dest.removeElement(flush_rsp.failed_mbrs.elementAt(i));\n                        suspected_mbrs.addElement(flush_rsp.failed_mbrs.elementAt(i));\n                    }\n                }\n            }\n        } // while\n         if(log.isInfoEnabled()) log.info(\"flushing completed.\");\n\n\n        // Rebroadcast unstable messages\n        if(rebroadcast_unstable_msgs && !rebroadcast_msgs.isEmpty()) {\n\n                if(log.isInfoEnabled()) log.info(\"re-broadcasting unstable messages (\" +\n                        rebroadcast_msgs.size() + ')');\n            // NAKACK layer will rebroadcast the msgs (using the same seqnos assigned earlier)\n            synchronized(rebroadcast_mutex) {\n                passDown(new Event(Event.REBROADCAST_MSGS, rebroadcast_msgs));\n                try {\n                    rebroadcast_mutex.wait(rebroadcast_timeout);\n                }\n                catch(Exception e) {\n                }\n            }\n             if(log.isInfoEnabled()) log.info(\"re-broadcasting messages completed\");\n        }\n    }","commit_id":"72ce19fe39dc7c68bec44c8e105d2ad2e9de44f8","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Computes the next view. Returns a copy that has <code>old_mbrs<\/code> and\n     * <code>suspected_mbrs<\/code> removed and <code>new_mbrs<\/code> added.\n     */\n    public View getNextView(Vector new_mbrs, Vector old_mbrs, Vector suspected_mbrs) {\n        Vector members;\n        long vid;\n        View v;\n        Membership tmp_mbrs;\n        Vector mbrs_to_remove=new Vector();\n\n        if(old_mbrs != null && old_mbrs.size() > 0)\n            for(int i=0; i < old_mbrs.size(); i++)\n                mbrs_to_remove.addElement(old_mbrs.elementAt(i));\n        if(suspected_mbrs != null && suspected_mbrs.size() > 0)\n            for(int i=0; i < suspected_mbrs.size(); i++)\n                if(!mbrs_to_remove.contains(suspected_mbrs.elementAt(i)))\n                    mbrs_to_remove.addElement(suspected_mbrs.elementAt(i));\n\n        synchronized(view_mutex) {\n            vid=Math.max(view_id.getId(), ltime) + 1;\n            ltime=vid;\n            tmp_mbrs=this.mbrs.copy();\n            tmp_mbrs.merge(new_mbrs, mbrs_to_remove);\n            members=(Vector)tmp_mbrs.getMembers().clone();\n            v=new View(local_addr, vid, members);\n            return v;\n        }\n    }","id":96474,"modified_method":"/**\n     * Computes the next view. Returns a copy that has <code>old_mbrs<\/code> and\n     * <code>suspected_mbrs<\/code> removed and <code>new_mbrs<\/code> added.\n     */\n    public View getNextView(Vector new_mbrs, Vector old_mbrs, Vector suspected_mbrs) {\n        long vid;\n        View v;\n        Membership tmp_mbrs;\n        Vector mbrs_to_remove=new Vector();\n\n        if(old_mbrs != null && !old_mbrs.isEmpty())\n            for(int i=0; i < old_mbrs.size(); i++)\n                mbrs_to_remove.addElement(old_mbrs.elementAt(i));\n        if(suspected_mbrs != null && !suspected_mbrs.isEmpty())\n            for(int i=0; i < suspected_mbrs.size(); i++)\n                if(!mbrs_to_remove.contains(suspected_mbrs.elementAt(i)))\n                    mbrs_to_remove.addElement(suspected_mbrs.elementAt(i));\n\n        synchronized(view_mutex) {\n            vid=Math.max(view_id.getId(), ltime) + 1;\n            ltime=vid;\n            tmp_mbrs=this.mbrs.copy();\n            tmp_mbrs.merge(new_mbrs, mbrs_to_remove);\n            Vector tmp=(Vector)tmp_mbrs.getMembers().clone();\n            v=new View(local_addr, vid, tmp);\n            return v;\n        }\n    }","commit_id":"72ce19fe39dc7c68bec44c8e105d2ad2e9de44f8","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Assigns the new ltime. Installs view and view_id. Changes role to coordinator if necessary.\n     * Sends VIEW_CHANGE event up and down the stack.\n     */\n    public void installView(ViewId new_view, Vector mbrs) {\n        Object coord;\n        int rc;\n\n        synchronized(view_mutex) {                    // serialize access to views\n            ltime=Math.max(new_view.getId(), ltime);  // compute Lamport logical time\n            if(log.isInfoEnabled()) log.info(\"received view change, vid=\" + new_view);\n\n            /* Check for self-inclusion: if I'm not part of the new membership, I just discard it.\n               This ensures that messages sent in view V1 are only received by members of V1 */\n            if(checkSelfInclusion(mbrs) == false) {\n                if(warn) log.warn(\"I'm not member of \" + mbrs + \", discarding\");\n                return;\n            }\n\n\n            if(view_id == null) {\n                view_id=(ViewId)new_view.clone();\n            }\n            else {\n                rc=new_view.compareTo(view_id);  // rc should always be a positive number\n                if(rc <= 0) {  // don't accept view id lower than our own\n                    if(warn) log.warn(\"received view <= current view; discarding it ! \" +\n                            \"(view_id: \" + view_id + \", new_view: \" + new_view + ')');\n                    return;\n                }\n                else {  // the check for vid equality was okay, assign new_view to view_id\n                    if(new_view.getCoordAddress() != null) {\n                        view_id=new ViewId(new_view.getCoordAddress(), new_view.getId());\n                    }\n                    else {\n                        view_id=new ViewId(view_id.getCoordAddress(), new_view.getId());\n                    }\n                }\n            }\n\n            if(mbrs != null && mbrs.size() > 0)\n                this.mbrs.set(mbrs);\n\n\n\n            // Send VIEW_CHANGE event up and down the stack:\n            Event view_event=new Event(Event.VIEW_CHANGE, makeView(this.mbrs.getMembers()));\n            passDown(view_event); // needed e.g. by failure detector or UDP\n            passUp(view_event);\n\n            coord=determineCoordinator();\n            if(coord != null && coord.equals(local_addr)) {\n               if (! haveCoordinatorRole())   // this avoids deadlock on coordinator - when suspect/join occurs simultaneously\n                   becomeCoordinator();\n            }\n            else {\n                if(haveCoordinatorRole() && !local_addr.equals(coord))\n                    becomeParticipant();\n            }\n        }\n    }","id":96475,"modified_method":"/**\n     * Assigns the new ltime. Installs view and view_id. Changes role to coordinator if necessary.\n     * Sends VIEW_CHANGE event up and down the stack.\n     */\n    public void installView(ViewId new_view, Vector mbrs) {\n        Object coord;\n        int rc;\n\n        synchronized(view_mutex) {                    // serialize access to views\n            ltime=Math.max(new_view.getId(), ltime);  // compute Lamport logical time\n            if(log.isInfoEnabled()) log.info(\"received view change, vid=\" + new_view);\n\n            /* Check for self-inclusion: if I'm not part of the new membership, I just discard it.\n               This ensures that messages sent in view V1 are only received by members of V1 */\n            if(checkSelfInclusion(mbrs) == false) {\n                if(warn) log.warn(\"I'm not member of \" + mbrs + \", discarding\");\n                return;\n            }\n\n\n            if(view_id == null) {\n                view_id=(ViewId)new_view.clone();\n            }\n            else {\n                rc=new_view.compareTo(view_id);  // rc should always be a positive number\n                if(rc <= 0) {  // don't accept view id lower than our own\n                    if(warn) log.warn(\"received view <= current view; discarding it ! \" +\n                            \"(view_id: \" + view_id + \", new_view: \" + new_view + ')');\n                    return;\n                }\n                else {  // the check for vid equality was okay, assign new_view to view_id\n                    if(new_view.getCoordAddress() != null) {\n                        view_id=new ViewId(new_view.getCoordAddress(), new_view.getId());\n                    }\n                    else {\n                        view_id=new ViewId(view_id.getCoordAddress(), new_view.getId());\n                    }\n                }\n            }\n\n            if(mbrs != null && !mbrs.isEmpty())\n                this.mbrs.set(mbrs);\n\n\n\n            // Send VIEW_CHANGE event up and down the stack:\n            Event view_event=new Event(Event.VIEW_CHANGE, makeView(this.mbrs.getMembers()));\n            passDown(view_event); // needed e.g. by failure detector or UDP\n            passUp(view_event);\n\n            coord=determineCoordinator();\n            if(coord != null && coord.equals(local_addr)) {\n               if (! haveCoordinatorRole())   // this avoids deadlock on coordinator - when suspect/join occurs simultaneously\n                   becomeCoordinator();\n            }\n            else {\n                if(haveCoordinatorRole() && !local_addr.equals(coord))\n                    becomeParticipant();\n            }\n        }\n    }","commit_id":"72ce19fe39dc7c68bec44c8e105d2ad2e9de44f8","url":"https://github.com/belaban/JGroups"},{"original_method":"/**\n     * Return a copy of the current membership minus the suspected members: FLUSH request is not sent\n     * to suspected members (because they won't respond, and not to joining members either.\n     * It IS sent to leaving members (before they are allowed to leave).\n     */\n    Vector computeFlushDestination(Vector suspected_mbrs) {\n        Vector ret=mbrs.getMembers(); // *copy* of current membership\n        if(suspected_mbrs != null && suspected_mbrs.size() > 0)\n            for(int i=0; i < suspected_mbrs.size(); i++)\n                ret.removeElement(suspected_mbrs.elementAt(i));\n        return ret;\n    }","id":96476,"modified_method":"/**\n     * Return a copy of the current membership minus the suspected members: FLUSH request is not sent\n     * to suspected members (because they won't respond, and not to joining members either.\n     * It IS sent to leaving members (before they are allowed to leave).\n     */\n    Vector computeFlushDestination(Vector suspected_mbrs) {\n        Vector ret=mbrs.getMembers(); // *copy* of current membership\n        if(suspected_mbrs != null && !suspected_mbrs.isEmpty())\n            for(int i=0; i < suspected_mbrs.size(); i++)\n                ret.removeElement(suspected_mbrs.elementAt(i));\n        return ret;\n    }","commit_id":"72ce19fe39dc7c68bec44c8e105d2ad2e9de44f8","url":"https://github.com/belaban/JGroups"},{"original_method":"@Override\n    protected ServletEndpoint createServletEndpoint(String endpointUri,\n            ServletComponent component, URI httpUri, HttpParams params,\n            ClientConnectionManager httpConnectionManager,\n            HttpClientConfigurer clientConfigurer) throws Exception {\n        return new GHttpEndpoint(endpointUri, component, httpUri, params,\n                httpConnectionManager, clientConfigurer);\n    }","id":96477,"modified_method":"@Override\n    protected ServletEndpoint createServletEndpoint(String endpointUri,\n            ServletComponent component, URI httpUri, HttpClientParams params,\n            HttpConnectionManager httpConnectionManager,\n            HttpClientConfigurer clientConfigurer) throws Exception {\n        return new GHttpEndpoint(endpointUri, component, httpUri, params,\n                httpConnectionManager, clientConfigurer);\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"public GHttpEndpoint(String endpointUri, ServletComponent component,\n            URI httpUri, HttpParams params,\n            ClientConnectionManager httpConnectionManager,\n            HttpClientConfigurer clientConfigurer) throws URISyntaxException {\n        super(endpointUri, component, httpUri, params, httpConnectionManager, clientConfigurer);\n        urlFetchService = URLFetchServiceFactory.getURLFetchService();\n    }","id":96478,"modified_method":"public GHttpEndpoint(String endpointUri, ServletComponent component,\n            URI httpUri, HttpClientParams params,\n            HttpConnectionManager httpConnectionManager,\n            HttpClientConfigurer clientConfigurer) throws URISyntaxException {\n        super(endpointUri, component, httpUri, params, httpConnectionManager, clientConfigurer);\n        urlFetchService = URLFetchServiceFactory.getURLFetchService();\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"/**\n     * @throws UnsupportedOperationException.\n     */\n    public Exchange readResponse(GMailEndpoint endpoint, Exchange exchange, Void response) {\n        throw new UnsupportedOperationException(\"gmail responses not supported\");\n    }","id":96479,"modified_method":"public Exchange readResponse(GMailEndpoint endpoint, Exchange exchange, Void response) {\n        throw new UnsupportedOperationException(\"gmail responses not supported\");\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    protected ServletEndpoint createServletEndpoint(String endpointUri,\n            ServletComponent component, URI httpUri, HttpParams params,\n            ClientConnectionManager httpConnectionManager,\n            HttpClientConfigurer clientConfigurer) throws Exception {\n        return new GTaskEndpoint(endpointUri, component, httpUri, params,\n                httpConnectionManager, clientConfigurer);\n    }","id":96480,"modified_method":"@Override\n    protected ServletEndpoint createServletEndpoint(String endpointUri,\n            ServletComponent component, URI httpUri, HttpClientParams params,\n            HttpConnectionManager httpConnectionManager,\n            HttpClientConfigurer clientConfigurer) throws Exception {\n        return new GTaskEndpoint(endpointUri, component, httpUri, params,\n                httpConnectionManager, clientConfigurer);\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"public GTaskEndpoint(String endpointUri, ServletComponent component,\n            URI httpUri, HttpParams params,\n            ClientConnectionManager httpConnectionManager,\n            HttpClientConfigurer clientConfigurer) throws URISyntaxException {\n        super(endpointUri, component, httpUri, params, httpConnectionManager, clientConfigurer);\n    }","id":96481,"modified_method":"public GTaskEndpoint(String endpointUri, ServletComponent component,\n            URI httpUri, HttpClientParams params,\n            HttpConnectionManager httpConnectionManager,\n            HttpClientConfigurer clientConfigurer) throws URISyntaxException {\n        super(endpointUri, component, httpUri, params, httpConnectionManager, clientConfigurer);\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testHttpClient() throws Exception {\n       \n\n        String response = template.requestBodyAndHeader(\"http://localhost:9090/test/hello\", new ByteArrayInputStream(\"This is a test\".getBytes()), \"Content-Type\", \"application/xml\", String.class);\n        \n        assertEquals(\"Get a wrong response\", \"/\", response);\n        \n        response = template.requestBody(\"http://localhost:9080/hello/world\", \"hello\", String.class);\n        \n        assertEquals(\"Get a wrong response\", \"/hello/world\", response);\n        \n        try {\n            template.requestBody(\"http://localhost:9090/hello/world\", \"hello\", String.class);\n            fail(\"Expect exception here!\");\n        } catch (Exception ex) {\n            assertTrue(\"We should get a RuntimeCamelException\", ex instanceof RuntimeCamelException);\n        }\n    }","id":96482,"modified_method":"@Test\n    public void testHttpClient() throws Exception {\n        String response = template.requestBodyAndHeader(\"http://localhost:9090/test/hello\", new ByteArrayInputStream(\"This is a test\".getBytes()), \"Content-Type\", \"application/xml\", String.class);\n        assertEquals(\"Get a wrong response\", \"/test/hello\", response);\n        \n        response = template.requestBody(\"http://localhost:9080/hello/world\", \"hello\", String.class);\n        assertEquals(\"Get a wrong response\", \"/hello/world\", response);\n        \n        try {\n            template.requestBody(\"http://localhost:9090/hello/world\", \"hello\", String.class);\n            fail(\"Expect exception here!\");\n        } catch (Exception ex) {\n            assertTrue(\"We should get a RuntimeCamelException\", ex instanceof RuntimeCamelException);\n        }\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testPostParameter() throws Exception {\n        List<NameValuePair> nameValuePairs = new ArrayList<NameValuePair>();\n        nameValuePairs.add(new BasicNameValuePair(\"request\", \"PostParameter\"));\n        nameValuePairs.add(new BasicNameValuePair(\"others\", \"bloggs\"));\n        HttpClient client = new DefaultHttpClient();\n        HttpPost post = new HttpPost(\"http://localhost:9080/parameter\");\n        UrlEncodedFormEntity entity = new UrlEncodedFormEntity(nameValuePairs);\n        post.setEntity(entity);\n        HttpResponse httpResponse = client.execute(post);\n        InputStream response = httpResponse.getEntity().getContent();\n        String out = context.getTypeConverter().convertTo(String.class, response);\n        assertEquals(\"Get a wrong output \", \"PostParameter\", out);\n    }","id":96483,"modified_method":"@Test\n    public void testPostParameter() throws Exception {\n        NameValuePair[] data = {new NameValuePair(\"request\", \"PostParameter\"),\n                                new NameValuePair(\"others\", \"bloggs\")};\n        HttpClient client = new HttpClient();\n        PostMethod post = new PostMethod(\"http://localhost:9080/parameter\");\n        post.setRequestBody(data);\n        client.executeMethod(post);\n        InputStream response = post.getResponseBodyAsStream();\n        String out = context.getTypeConverter().convertTo(String.class, response);\n        assertEquals(\"Get a wrong output \" , \"PostParameter\", out);\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testPostParameterInURI() throws Exception {\n        HttpClient client = new DefaultHttpClient();\n        HttpPost post = new HttpPost(\"http://localhost:9080/parameter?request=PostParameter&others=bloggs\");\n        StringEntity entity = new StringEntity(POST_MESSAGE, \"UTF-8\");\n        entity.setContentType(\"application/xml\" + HTTP.CHARSET_PARAM + \"UTF-8\");\n        post.setEntity(entity);\n        HttpResponse httpResponse = client.execute(post);\n        InputStream response = httpResponse.getEntity().getContent();\n        String out = context.getTypeConverter().convertTo(String.class, response);\n        assertEquals(\"Get a wrong output \", \"PostParameter\", out);\n    }","id":96484,"modified_method":"@Test\n    public void testPostParameterInURI() throws Exception {\n        HttpClient client = new HttpClient();\n        PostMethod post = new PostMethod(\"http://localhost:9080/parameter?request=PostParameter&others=bloggs\");\n        StringRequestEntity entity = new StringRequestEntity(POST_MESSAGE, \"application/xml\", \"UTF-8\");\n        post.setRequestEntity(entity);\n        client.executeMethod(post);\n        InputStream response = post.getResponseBodyAsStream();\n        String out = context.getTypeConverter().convertTo(String.class, response);\n        assertEquals(\"Get a wrong output \" , \"PostParameter\", out);\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testPostXMLMessage() throws Exception {\n        HttpClient client = new DefaultHttpClient();\n        HttpPost post = new HttpPost(\"http://localhost:9080/postxml\");\n        StringEntity entity = new StringEntity(POST_MESSAGE, \"UTF-8\");\n        entity.setContentType(\"application/xml\" + HTTP.CHARSET_PARAM + \"UTF-8\");\n        post.setEntity(entity);\n        HttpResponse httpResponse = client.execute(post);\n        InputStream response = httpResponse.getEntity().getContent();\n        String out = context.getTypeConverter().convertTo(String.class, response);\n        assertEquals(\"Get a wrong output \", \"OK\", out);\n    }","id":96485,"modified_method":"@Test\n    public void testPostXMLMessage() throws Exception {\n        HttpClient client = new HttpClient();\n        PostMethod post = new PostMethod(\"http://localhost:9080/postxml\");\n        StringRequestEntity entity = new StringRequestEntity(POST_MESSAGE, \"application/xml\", \"UTF-8\");\n        post.setRequestEntity(entity);\n        client.executeMethod(post);\n        InputStream response = post.getResponseBodyAsStream();\n        String out = context.getTypeConverter().convertTo(String.class, response);\n        assertEquals(\"Get a wrong output \" , \"OK\", out);\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testPutParameterInURI() throws Exception {\n        HttpClient client = new DefaultHttpClient();\n        HttpPut put = new HttpPut(\"http://localhost:9080/parameter?request=PutParameter&others=bloggs\");\n        StringEntity entity = new StringEntity(POST_MESSAGE, \"UTF-8\");\n        entity.setContentType(\"application/xml\" + HTTP.CHARSET_PARAM + \"UTF-8\");\n        put.setEntity(entity);\n        HttpResponse httpResponse = client.execute(put);\n        InputStream response = httpResponse.getEntity().getContent();\n        String out = context.getTypeConverter().convertTo(String.class, response);\n        assertEquals(\"Get a wrong output \", \"PutParameter\", out);\n    }","id":96486,"modified_method":"@Test\n    public void testPutParameterInURI() throws Exception {\n        HttpClient client = new HttpClient();\n        PutMethod put = new PutMethod(\"http://localhost:9080/parameter?request=PutParameter&others=bloggs\");\n        StringRequestEntity entity = new StringRequestEntity(POST_MESSAGE, \"application/xml\", \"UTF-8\");\n        put.setRequestEntity(entity);\n        client.executeMethod(put);\n        InputStream response = put.getResponseBodyAsStream();\n        String out = context.getTypeConverter().convertTo(String.class, response);\n        assertEquals(\"Get a wrong output \" , \"PutParameter\", out);\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testCustomHttpBinding() throws Exception {\n        // assert jetty was configured with our timeout\n        HttpEndpoint jettyEndpoint = context.getEndpoint(\"http://localhost:8080/myapp/myservice?httpClient.soTimeout=5555\", HttpEndpoint.class);\n        assertNotNull(\"Jetty endpoint should not be null \", jettyEndpoint);\n        HttpProducer producer = (HttpProducer) jettyEndpoint.createProducer();\n        assertEquals(\"Get the wrong http client parameter\", 5555, producer.getHttpClient().getParams().getIntParameter(CoreConnectionPNames.SO_TIMEOUT, -1));\n\n        // send and receive\n        Object out = template.requestBody(\"http://localhost:9080/myapp/myservice\", \"Hello World\");\n        assertEquals(\"Bye World\", context.getTypeConverter().convertTo(String.class, out));\n    }","id":96487,"modified_method":"@Test\n    public void testCustomHttpBinding() throws Exception {\n        // assert jetty was configured with our timeout\n        HttpEndpoint jettyEndpoint = context.getEndpoint(\"http://localhost:8080/myapp/myservice?httpClient.soTimeout=5555\", HttpEndpoint.class);\n        assertNotNull(\"Jetty endpoint should not be null \", jettyEndpoint);\n        HttpProducer producer = (HttpProducer)jettyEndpoint.createProducer();\n        assertEquals(\"Get the wrong http client parameter\", 5555, producer.getHttpClient().getParams().getSoTimeout());\n\n        // send and receive\n        Object out = template.requestBody(\"http://localhost:9080/myapp/myservice\", \"Hello World\");\n        assertEquals(\"Bye World\", context.getTypeConverter().convertTo(String.class, out));\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"protected JettyContentExchange createHttpExchange(Exchange exchange) throws Exception {\n        String url = HttpProducerHelper.createURL(exchange, getEndpoint());\n        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), exchange.getIn().getBody() != null);\n        String method = methodToUse.createMethod(url).getMethod();\n\n        JettyContentExchange httpExchange = new JettyContentExchange(exchange, getBinding(), client);\n        httpExchange.setMethod(method);\n        httpExchange.setURL(url);\n\n        // set query parameters\n        doSetQueryParameters(exchange, httpExchange);\n\n        // if we post then set data\n        if (HttpMethods.POST.equals(methodToUse)) {\n\n            String contentType = ExchangeHelper.getContentType(exchange);\n            if (contentType != null) {\n                httpExchange.setRequestContentType(contentType);\n            }\n\n            // try with String at first\n            String data = exchange.getIn().getBody(String.class);\n            if (data != null) {\n                String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);\n                if (charset != null) {\n                    httpExchange.setRequestContent(new ByteArrayBuffer(data, charset));\n                } else {\n                    httpExchange.setRequestContent(new ByteArrayBuffer(data));\n                }\n            } else {\n                // then fallback to input stream\n                InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, exchange.getIn().getBody());\n                httpExchange.setRequestContentSource(is);\n            }\n        }\n\n        // and copy headers from IN message\n        Message in = exchange.getIn();\n        HeaderFilterStrategy strategy = getEndpoint().getHeaderFilterStrategy();\n\n        // propagate headers as HTTP headers\n        for (String headerName : in.getHeaders().keySet()) {\n            String headerValue = in.getHeader(headerName, String.class);\n            if (strategy != null && !strategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)) {\n                httpExchange.addRequestHeader(headerName, headerValue);\n            }\n        }\n\n        return httpExchange;\n    }","id":96488,"modified_method":"protected JettyContentExchange createHttpExchange(Exchange exchange) throws Exception {\n        String url = HttpProducerHelper.createURL(exchange, getEndpoint());\n        HttpMethods methodToUse = HttpProducerHelper.createMethod(exchange, getEndpoint(), exchange.getIn().getBody() != null);\n        String method = methodToUse.createMethod(url).getName();\n\n        JettyContentExchange httpExchange = new JettyContentExchange(exchange, getBinding(), client);\n        httpExchange.setMethod(method);\n        httpExchange.setURL(url);\n\n        // set query parameters\n        doSetQueryParameters(exchange, httpExchange);\n\n        // if we post then set data\n        if (HttpMethods.POST.equals(methodToUse)) {\n\n            String contentType = ExchangeHelper.getContentType(exchange);\n            if (contentType != null) {\n                httpExchange.setRequestContentType(contentType);\n            }\n\n            // try with String at first\n            String data = exchange.getIn().getBody(String.class);\n            if (data != null) {\n                String charset = exchange.getProperty(Exchange.CHARSET_NAME, String.class);\n                if (charset != null) {\n                    httpExchange.setRequestContent(new ByteArrayBuffer(data, charset));\n                } else {\n                    httpExchange.setRequestContent(new ByteArrayBuffer(data));\n                }\n            } else {\n                // then fallback to input stream\n                InputStream is = exchange.getContext().getTypeConverter().mandatoryConvertTo(InputStream.class, exchange, exchange.getIn().getBody());\n                httpExchange.setRequestContentSource(is);\n            }\n        }\n\n        // and copy headers from IN message\n        Message in = exchange.getIn();\n        HeaderFilterStrategy strategy = getEndpoint().getHeaderFilterStrategy();\n\n        // propagate headers as HTTP headers\n        for (String headerName : in.getHeaders().keySet()) {\n            String headerValue = in.getHeader(headerName, String.class);\n            if (strategy != null && !strategy.applyFilterToCamelHeaders(headerName, headerValue, exchange)) {\n                httpExchange.addRequestHeader(headerName, headerValue);\n            }\n        }\n\n        return httpExchange;\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testSendMultiPartForm() throws Exception {\n        HttpClient httpclient = new DefaultHttpClient();\n\n        HttpPost httppost = new HttpPost(\"http://localhost:9080/test\");\n\n        FileBody bin = new FileBody(new File(\"src/main/resources/META-INF/NOTICE.txt\"));\n        StringBody comment = new StringBody(\"A binary file of some kind\");\n\n        MultipartEntity reqEntity = new MultipartEntity();\n        reqEntity.addPart(\"bin\", bin);\n        reqEntity.addPart(\"comment\", comment);\n        \n        httppost.setEntity(reqEntity);\n        \n        HttpResponse response = httpclient.execute(httppost);\n        HttpEntity resEntity = response.getEntity();\n\n        assertEquals(\"Get a wrong response status\", \"HTTP/1.1 200 OK\", response.getStatusLine().toString());\n        assertNotNull(\"resEntity should not be null\", resEntity);\n        \n        String result = context.getTypeConverter().convertTo(String.class, resEntity.getContent());\n        \n        assertEquals(\"Get a wrong result\", \"A binary file of some kind\", result);\n        \n    }","id":96489,"modified_method":"@Test\n    @Ignore(\"Fix me later\")\n    public void testSendMultiPartForm() throws Exception {\n        HttpClient httpclient = new HttpClient();\n\n        File file = new File(\"src/main/resources/META-INF/NOTICE.txt\");\n\n        PostMethod httppost = new PostMethod(\"http://localhost:9080/test\");\n        Part[] parts = {\n                new StringPart(\"param_name\", \"NOTICE.txt\"),\n                new FilePart(file.getName(), file)\n        };\n\n        MultipartRequestEntity reqEntity = new MultipartRequestEntity(parts, httppost.getParams());\n        httppost.setRequestEntity(reqEntity);\n\n        int status = httpclient.executeMethod(httppost);\n\n        assertEquals(\"Get a wrong response status\", 200, status);\n        String result = httppost.getResponseBodyAsString();\n\n        assertEquals(\"Get a wrong result\", \"A binary file of some kind\", result);\n\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testHttpGetWithoutConversion() throws Exception {\n\n        // This is needed as by default there are 2 parallel\n        // connections to some host and there is nothing that\n        // closes the http connection here.\n\n        String endpointName = \"seda:withoutConversion?concurrentConsumers=5\";\n        sendMessagesTo(endpointName, 5);\n    }","id":96490,"modified_method":"@Test\n    public void testHttpGetWithoutConversion() throws Exception {\n\n        // This is needed as by default there are 2 parallel\n        // connections to some host and there is nothing that\n        // closes the http connection here.\n\n        context.getComponent(\"http\", HttpComponent.class).getHttpConnectionManager().getParams()\n            .setDefaultMaxConnectionsPerHost(5);\n\n        String endpointName = \"seda:withoutConversion?concurrentConsumers=5\";\n        sendMessagesTo(endpointName, 5);\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"protected ServletEndpoint createServletEndpoint(String endpointUri,\n            ServletComponent component, URI httpUri, HttpParams params,\n            ClientConnectionManager httpConnectionManager,\n            HttpClientConfigurer clientConfigurer) throws Exception {\n        return new ServletEndpoint(endpointUri, component, httpUri, params,\n                httpConnectionManager, clientConfigurer);\n    }","id":96491,"modified_method":"protected ServletEndpoint createServletEndpoint(String endpointUri,\n            ServletComponent component, URI httpUri, HttpClientParams params,\n            HttpConnectionManager httpConnectionManager,\n            HttpClientConfigurer clientConfigurer) throws Exception {\n        return new ServletEndpoint(endpointUri, component, httpUri, params,\n                httpConnectionManager, clientConfigurer);\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {\n        uri = uri.startsWith(\"servlet:\") ? remaining : uri;\n\n        HttpParams clientParams = configureHttpParams(parameters);\n\n        // must extract well known parameters before we create the endpoint\n        HttpBinding binding = resolveAndRemoveReferenceParameter(parameters, \"httpBindingRef\", HttpBinding.class);\n        Boolean matchOnUriPrefix = getAndRemoveParameter(parameters, \"matchOnUriPrefix\", Boolean.class);\n\n        // restructure uri to be based on the parameters left as we dont want to include the Camel internal options\n        URI httpUri = URISupport.createRemainingURI(new URI(UnsafeUriCharactersEncoder.encode(uri)), CastUtils.cast(parameters));\n        uri = httpUri.toString();\n\n        ServletEndpoint endpoint = createServletEndpoint(uri, this, httpUri, clientParams, getClientConnectionManager(), httpClientConfigurer);\n        setEndpointHeaderFilterStrategy(endpoint);\n\n        // prefer to use endpoint configured over component configured\n        if (binding == null) {\n            // fallback to component configured\n            binding = getHttpBinding();\n        }\n        if (binding != null) {\n            endpoint.setBinding(binding);\n        }\n        if (matchOnUriPrefix != null) {\n            endpoint.setMatchOnUriPrefix(matchOnUriPrefix);\n        }\n\n        setProperties(endpoint, parameters);\n        return endpoint;\n    }","id":96492,"modified_method":"@Override\n    protected Endpoint createEndpoint(String uri, String remaining, Map<String, Object> parameters) throws Exception {\n        uri = uri.startsWith(\"servlet:\") ? remaining : uri;\n\n        HttpClientParams params = new HttpClientParams();\n        IntrospectionSupport.setProperties(params, parameters, \"httpClient.\");\n        // configure regular parameters\n        configureParameters(parameters);\n\n        // must extract well known parameters before we create the endpoint\n        HttpBinding binding = resolveAndRemoveReferenceParameter(parameters, \"httpBindingRef\", HttpBinding.class);\n        Boolean matchOnUriPrefix = getAndRemoveParameter(parameters, \"matchOnUriPrefix\", Boolean.class);\n\n        // restructure uri to be based on the parameters left as we dont want to include the Camel internal options\n        URI httpUri = URISupport.createRemainingURI(new URI(UnsafeUriCharactersEncoder.encode(uri)), CastUtils.cast(parameters));\n        uri = httpUri.toString();\n\n        ServletEndpoint endpoint = createServletEndpoint(uri, this, httpUri, params, getHttpConnectionManager(), httpClientConfigurer);\n        setEndpointHeaderFilterStrategy(endpoint);\n\n        // prefer to use endpoint configured over component configured\n        if (binding == null) {\n            // fallback to component configured\n            binding = getHttpBinding();\n        }\n        if (binding != null) {\n            endpoint.setBinding(binding);\n        }\n        if (matchOnUriPrefix != null) {\n            endpoint.setMatchOnUriPrefix(matchOnUriPrefix);\n        }\n\n        setProperties(endpoint, parameters);\n        return endpoint;\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"public ServletEndpoint(String endPointURI, ServletComponent component, URI httpUri, HttpParams params\n                           , ClientConnectionManager httpConnectionManager, HttpClientConfigurer clientConfigurer) throws URISyntaxException {\n        super(endPointURI, component, httpUri, params, httpConnectionManager, clientConfigurer);\n    }","id":96493,"modified_method":"public ServletEndpoint(String endPointURI, ServletComponent component, URI httpUri, HttpClientParams params\n                           , HttpConnectionManager httpConnectionManager, HttpClientConfigurer clientConfigurer) throws URISyntaxException {\n        super(endPointURI, component, httpUri, params, httpConnectionManager, clientConfigurer);\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testConnectionNotOk() throws Exception {\n        // stop Jetty so there should not be a connection\n        JettyHttpComponent jetty = context.getComponent(\"jetty\", JettyHttpComponent.class);\n        jetty.stop();\n\n        Exchange exchange = template.request(\"direct:start\", new Processor() {\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setBody(\"Moon\");\n            }\n        });\n\n        assertTrue(exchange.isFailed());\n\n        HttpHostConnectException cause = assertIsInstanceOf(HttpHostConnectException.class, exchange.getException());\n        assertIsInstanceOf(ConnectException.class, cause.getCause());\n\n        assertEquals(true, exchange.getIn().getHeader(Exchange.REDELIVERED));\n        assertEquals(4, exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER));\n    }","id":96494,"modified_method":"@Test\n    public void testConnectionNotOk() throws Exception {\n        // stop Jetty so there should not be a connection\n        JettyHttpComponent jetty = context.getComponent(\"jetty\", JettyHttpComponent.class);\n        jetty.stop();\n\n        Exchange exchange = template.request(\"direct:start\", new Processor() {\n            public void process(Exchange exchange) throws Exception {\n                exchange.getIn().setBody(\"Moon\");\n            }\n        });\n\n        assertTrue(exchange.isFailed());\n\n        assertIsInstanceOf(ConnectException.class, exchange.getException());\n\n        assertEquals(true, exchange.getIn().getHeader(Exchange.REDELIVERED));\n        assertEquals(4, exchange.getIn().getHeader(Exchange.REDELIVERY_COUNTER));\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"@Test\n    public void testConnectionNotOk() throws Exception {\n        // stop Jetty so there should not be a connection\n        JettyHttpComponent jetty = context.getComponent(\"jetty\", JettyHttpComponent.class);\n        jetty.stop();\n\n        try {\n            template.requestBody(\"direct:start\", \"Moon\", String.class);\n            fail(\"Should have thrown an exception\");\n        } catch (CamelExecutionException e) {\n            assertIsInstanceOf(HttpHostConnectException.class, e.getCause());\n            assertIsInstanceOf(ConnectException.class, e.getCause().getCause());\n        }\n    }","id":96495,"modified_method":"@Test\n    public void testConnectionNotOk() throws Exception {\n        // stop Jetty so there should not be a connection\n        JettyHttpComponent jetty = context.getComponent(\"jetty\", JettyHttpComponent.class);\n        jetty.stop();\n\n        try {\n            template.requestBody(\"direct:start\", \"Moon\", String.class);\n            fail(\"Should have thrown an exception\");\n        } catch (CamelExecutionException e) {\n            assertIsInstanceOf(ConnectException.class, e.getCause());\n        }\n    }","commit_id":"fc77dd66744ab6f1c16e8c0752666aac01a8bdad","url":"https://github.com/apache/camel"},{"original_method":"public void applyRule(final SNode fm) {\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(fm, \"expr\", true), \"jetbrains.mps.regexp.helgins\", \"1178179183657\", true), new QuotationClass_6().createNode(), SLinkOperations.getTarget(fm, \"expr\", true), null, \"jetbrains.mps.regexp.helgins\", \"1178179183656\", false);\n  }","id":96496,"modified_method":"public void applyRule(final SNode fm) {\n    {\n      SNode _nodeToCheck_1029348928467 = fm;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(fm, \"expr\", true), \"jetbrains.mps.regexp.helgins\", \"1178179183657\", true), new QuotationClass_6().createNode(), _nodeToCheck_1029348928467, null, \"jetbrains.mps.regexp.helgins\", \"1178179183656\", false, 0, intentionProvider);\n    }\n  }","commit_id":"94ac7c8add36987e0e22e1eba4acb8ce54ccf267","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode fm) {\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(fm, \"expr\", true), \"jetbrains.mps.regexp.helgins\", \"1178179183625\", true), new QuotationClass_2().createNode(), SLinkOperations.getTarget(fm, \"expr\", true), null, \"jetbrains.mps.regexp.helgins\", \"1178179183624\", false);\n  }","id":96497,"modified_method":"public void applyRule(final SNode fm) {\n    {\n      SNode _nodeToCheck_1029348928467 = fm;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(fm, \"expr\", true), \"jetbrains.mps.regexp.helgins\", \"1178179183625\", true), new QuotationClass_2().createNode(), _nodeToCheck_1029348928467, null, \"jetbrains.mps.regexp.helgins\", \"1178179183624\", false, 0, intentionProvider);\n    }\n  }","commit_id":"94ac7c8add36987e0e22e1eba4acb8ce54ccf267","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode mrs) {\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(mrs, \"expr\", true), \"jetbrains.mps.regexp.helgins\", \"1178179183616\", true), new QuotationClass_1().createNode(), SLinkOperations.getTarget(mrs, \"expr\", true), null, \"jetbrains.mps.regexp.helgins\", \"1178179183615\", false);\n  }","id":96498,"modified_method":"public void applyRule(final SNode mrs) {\n    {\n      SNode _nodeToCheck_1029348928467 = mrs;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(mrs, \"expr\", true), \"jetbrains.mps.regexp.helgins\", \"1178179183616\", true), new QuotationClass_1().createNode(), _nodeToCheck_1029348928467, null, \"jetbrains.mps.regexp.helgins\", \"1178179183615\", false, 0, intentionProvider);\n    }\n  }","commit_id":"94ac7c8add36987e0e22e1eba4acb8ce54ccf267","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Object referenceMacro_GetReferent_1174655509856(final IOperationContext operationContext, final ReferenceMacroContext _context) {\n    return GeneratorUtil.findOutputMatcher(_context.getGenerator(), _context.getNode());\n  }","id":96499,"modified_method":"public static Object referenceMacro_GetReferent_1174655509856(final IOperationContext operationContext, final ReferenceMacroContext _context) {\n    return _context.getOutputNodeByInputNodeAndMappingLabel(GeneratorUtil.findRegexpUsingConstructionFor(_context.getNode()), \"matcher\");\n  }","commit_id":"94ac7c8add36987e0e22e1eba4acb8ce54ccf267","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Object referenceMacro_GetReferent_1175155997041(final IOperationContext operationContext, final ReferenceMacroContext _context) {\n    return GeneratorUtil.findOutputMatcher(_context.getGenerator(), _context.getNode());\n  }","id":96500,"modified_method":"public static Object referenceMacro_GetReferent_1175155997041(final IOperationContext operationContext, final ReferenceMacroContext _context) {\n    return _context.getOutputNodeByInputNodeAndMappingLabel(GeneratorUtil.findRegexpUsingConstructionFor(_context.getNode()), \"matcher\");\n  }","commit_id":"94ac7c8add36987e0e22e1eba4acb8ce54ccf267","url":"https://github.com/JetBrains/MPS"},{"original_method":"public static Object referenceMacro_GetReferent_1175170026388(final IOperationContext operationContext, final ReferenceMacroContext _context) {\n    return GeneratorUtil.findOutputMatcher(_context.getGenerator(), _context.getNode());\n  }","id":96501,"modified_method":"public static Object referenceMacro_GetReferent_1175170026388(final IOperationContext operationContext, final ReferenceMacroContext _context) {\n    return _context.getOutputNodeByInputNodeAndMappingLabel(GeneratorUtil.findRegexpUsingConstructionFor(_context.getNode()), \"matcher\");\n  }","commit_id":"94ac7c8add36987e0e22e1eba4acb8ce54ccf267","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode rr) {\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(rr, \"expr\", true), \"jetbrains.mps.regexp.helgins\", \"1178179183634\", true), new QuotationClass_3().createNode(), SLinkOperations.getTarget(rr, \"expr\", true), null, \"jetbrains.mps.regexp.helgins\", \"1178179183633\", false);\n  }","id":96502,"modified_method":"public void applyRule(final SNode rr) {\n    {\n      SNode _nodeToCheck_1029348928467 = rr;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(rr, \"expr\", true), \"jetbrains.mps.regexp.helgins\", \"1178179183634\", true), new QuotationClass_3().createNode(), _nodeToCheck_1029348928467, null, \"jetbrains.mps.regexp.helgins\", \"1178179183633\", false, 0, intentionProvider);\n    }\n  }","commit_id":"94ac7c8add36987e0e22e1eba4acb8ce54ccf267","url":"https://github.com/JetBrains/MPS"},{"original_method":"public void applyRule(final SNode se) {\n    TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(se, \"expr\", true), \"jetbrains.mps.regexp.helgins\", \"1178179183643\", true), new QuotationClass_4().createNode(), SLinkOperations.getTarget(se, \"expr\", true), null, \"jetbrains.mps.regexp.helgins\", \"1178179183642\", false);\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_5().createNode(), se, \"jetbrains.mps.regexp.helgins\", \"1178179183649\");\n  }","id":96503,"modified_method":"public void applyRule(final SNode se) {\n    {\n      SNode _nodeToCheck_1029348928467 = se;\n      BaseIntentionProvider intentionProvider = null;\n      TypeChecker.getInstance().getRuntimeSupport().createLessThanInequation(TypeChecker.getInstance().getRuntimeSupport().typeOf(SLinkOperations.getTarget(se, \"expr\", true), \"jetbrains.mps.regexp.helgins\", \"1178179183643\", true), new QuotationClass_4().createNode(), _nodeToCheck_1029348928467, null, \"jetbrains.mps.regexp.helgins\", \"1178179183642\", false, 0, intentionProvider);\n    }\n    TypeChecker.getInstance().getRuntimeSupport().givetype(new QuotationClass_5().createNode(), se, \"jetbrains.mps.regexp.helgins\", \"1178179183649\");\n  }","commit_id":"94ac7c8add36987e0e22e1eba4acb8ce54ccf267","url":"https://github.com/JetBrains/MPS"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    @FallbackConverter\n    public static <T> T convertTo(Class<T> type, Exchange exchange, Object value, TypeConverterRegistry registry) {\n        // use fallback type converter, so we can probably convert into\n        // CxfPayloads from other types\n        if (type.isAssignableFrom(CxfPayload.class)) {\n            if (!value.getClass().isArray()) {\n                Source src = null;\n                // many of the common format that can have a Source created directly\n                if (value instanceof InputStream) {\n                    src = new StreamSource((InputStream) value);\n                } else if (value instanceof Reader) {\n                    src = new StreamSource((Reader) value);\n                } else if (value instanceof String) {\n                    src = new StreamSource(new StringReader((String) value));\n                } else if (value instanceof Node) {\n                    src = new DOMSource((Node) value);\n                } else if (value instanceof Source) {\n                    src = (Source) value;\n                }\n                if (src == null) {\n                    // assuming staxsource is preferred, otherwise use the one preferred\n                    TypeConverter tc = registry.lookup(javax.xml.transform.stax.StAXSource.class, value.getClass());\n                    if (tc == null) {\n                        tc = registry.lookup(Source.class, value.getClass());\n                    }\n                    if (tc != null) {\n                        src = tc.convertTo(Source.class, exchange, value);\n                    }\n                }\n                if (src != null) {\n                    return (T) sourceToCxfPayload(src, exchange);\n                }\n            }\n            TypeConverter tc = registry.lookup(NodeList.class, value.getClass());\n            if (tc != null) {\n                NodeList nodeList = tc.convertTo(NodeList.class, exchange, value);\n                return (T) nodeListToCxfPayload(nodeList, exchange);\n            }\n            tc = registry.lookup(Document.class, value.getClass());\n            if (tc != null) {\n                Document document = tc.convertTo(Document.class, exchange, value);\n                return (T) documentToCxfPayload(document, exchange);\n            }\n            // maybe we can convert via an InputStream\n            CxfPayload<?> p;\n            p = convertVia(InputStream.class, exchange, value, registry);\n            if (p != null) {\n                return (T) p;\n            }\n            // String is the converter of last resort\n            p = convertVia(String.class, exchange, value, registry);\n            if (p != null) {\n                return (T) p;\n            }\n            // no we could not do it currently\n            return (T) Void.TYPE;\n        }\n        // Convert a CxfPayload into something else\n        if (CxfPayload.class.isAssignableFrom(value.getClass())) {\n            CxfPayload<?> payload = (CxfPayload<?>) value;\n            int size = payload.getBodySources().size();\n            if (size == 1) {\n                if (type.isAssignableFrom(Document.class)) {\n                    Source s = payload.getBodySources().get(0);\n                    Document d;\n                    try {\n                        d = StaxUtils.read(s);\n                    } catch (XMLStreamException e) {\n                        throw new RuntimeException(e);\n                    }\n                    return type.cast(d);\n                }\n                // CAMEL-8410 Just make sure we get the Source object directly from the payload body source\n                Source s = payload.getBodySources().get(0);\n                if (type.isInstance(s)) {\n                    return type.cast(s);\n                }\n                TypeConverter tc = registry.lookup(type, Source.class);\n                if (tc != null) {\n                    XMLStreamReader r = null;\n                    if (payload.getNsMap() != null) {\n                        if (s instanceof StaxSource) {\n                            r = ((StaxSource) s).getXMLStreamReader();\n                        } else if (s instanceof StAXSource) {\n                            r = ((StAXSource) s).getXMLStreamReader();\n                        }\n                        if (r != null) {\n                            s = new StAXSource(new DelegatingXMLStreamReader(r, payload.getNsMap()));\n                        }\n                    }\n                    T t = tc.convertTo(type, s);\n                    return t;\n                }\n            }\n            TypeConverter tc = registry.lookup(type, NodeList.class);\n            if (tc != null) {\n                Object result = tc.convertTo(type, cxfPayloadToNodeList((CxfPayload<?>) value, exchange));\n                if (result == null) {\n                    // no we could not do it currently, and we just abort the convert here\n                    return (T) Void.TYPE;\n                } else {\n                    return (T) result;\n                }\n\n            }\n            // we cannot convert a node list, so we try the first item from the\n            // node list\n            tc = registry.lookup(type, Node.class);\n            if (tc != null) {\n                NodeList nodeList = cxfPayloadToNodeList((CxfPayload<?>) value, exchange);\n                if (nodeList.getLength() > 0) {\n                    return tc.convertTo(type, nodeList.item(0));\n                } else {\n                    // no we could not do it currently\n                    return (T) Void.TYPE;\n                }\n            } else {\n                if (size == 0) {\n                    // empty size so we cannot convert\n                    return (T) Void.TYPE;\n                }\n            }\n        }\n        return null;\n    }","id":96504,"modified_method":"@SuppressWarnings(\"unchecked\")\n    @FallbackConverter\n    public static <T> T convertTo(Class<T> type, Exchange exchange, Object value, TypeConverterRegistry registry) {\n        // use fallback type converter, so we can probably convert into\n        // CxfPayloads from other types\n        if (type.isAssignableFrom(CxfPayload.class)) {\n            if (!value.getClass().isArray()) {\n                Source src = null;\n                // many of the common format that can have a Source created directly\n                if (value instanceof InputStream) {\n                    src = new StreamSource((InputStream) value);\n                } else if (value instanceof Reader) {\n                    src = new StreamSource((Reader) value);\n                } else if (value instanceof String) {\n                    src = new StreamSource(new StringReader((String) value));\n                } else if (value instanceof Node) {\n                    src = new DOMSource((Node) value);\n                } else if (value instanceof Source) {\n                    src = (Source) value;\n                }\n                if (src == null) {\n                    // assuming staxsource is preferred, otherwise use the one preferred\n                    TypeConverter tc = registry.lookup(javax.xml.transform.stax.StAXSource.class, value.getClass());\n                    if (tc == null) {\n                        tc = registry.lookup(Source.class, value.getClass());\n                    }\n                    if (tc != null) {\n                        src = tc.convertTo(Source.class, exchange, value);\n                    }\n                }\n                if (src != null) {\n                    return (T) sourceToCxfPayload(src, exchange);\n                }\n            }\n            TypeConverter tc = registry.lookup(NodeList.class, value.getClass());\n            if (tc != null) {\n                NodeList nodeList = tc.convertTo(NodeList.class, exchange, value);\n                return (T) nodeListToCxfPayload(nodeList, exchange);\n            }\n            tc = registry.lookup(Document.class, value.getClass());\n            if (tc != null) {\n                Document document = tc.convertTo(Document.class, exchange, value);\n                return (T) documentToCxfPayload(document, exchange);\n            }\n            // maybe we can convert via an InputStream\n            CxfPayload<?> p;\n            p = convertVia(InputStream.class, exchange, value, registry);\n            if (p != null) {\n                return (T) p;\n            }\n            // String is the converter of last resort\n            p = convertVia(String.class, exchange, value, registry);\n            if (p != null) {\n                return (T) p;\n            }\n            // no we could not do it currently\n            return (T) Void.TYPE;\n        }\n        // Convert a CxfPayload into something else\n        if (CxfPayload.class.isAssignableFrom(value.getClass())) {\n            CxfPayload<?> payload = (CxfPayload<?>) value;\n            int size = payload.getBodySources().size();\n            if (size == 1) {\n                if (type.isAssignableFrom(Document.class)) {\n                    Source s = payload.getBodySources().get(0);\n                    Document d;\n                    try {\n                        d = StaxUtils.read(s);\n                    } catch (XMLStreamException e) {\n                        throw new RuntimeException(e);\n                    }\n                    return type.cast(d);\n                }\n                // CAMEL-8410 Just make sure we get the Source object directly from the payload body source\n                Source s = payload.getBodySources().get(0);\n                if (type.isInstance(s)) {\n                    return type.cast(s);\n                }\n                TypeConverter tc = registry.lookup(type, XMLStreamReader.class);\n                if (tc != null && (s instanceof StaxSource || s instanceof StAXSource)) {\n                    XMLStreamReader r = (s instanceof StAXSource)\n                            ? ((StAXSource)s).getXMLStreamReader() : ((StaxSource) s).getXMLStreamReader();\n                    if (payload.getNsMap() != null) {\n                        r = new DelegatingXMLStreamReader(r, payload.getNsMap());\n                    }\n                    return (T)tc.convertTo(type, r);\n                }\n                tc = registry.lookup(type, Source.class);\n                if (tc != null) {\n                    XMLStreamReader r = null;\n                    if (payload.getNsMap() != null) {\n                        if (s instanceof StaxSource) {\n                            r = ((StaxSource) s).getXMLStreamReader();\n                        } else if (s instanceof StAXSource) {\n                            r = ((StAXSource) s).getXMLStreamReader();\n                        }\n                        if (r != null) {\n                            s = new StAXSource(new DelegatingXMLStreamReader(r, payload.getNsMap()));\n                        }\n                    }\n                    return (T)tc.convertTo(type, s);\n                }\n            }\n            TypeConverter tc = registry.lookup(type, NodeList.class);\n            if (tc != null) {\n                Object result = tc.convertTo(type, cxfPayloadToNodeList((CxfPayload<?>) value, exchange));\n                if (result == null) {\n                    // no we could not do it currently, and we just abort the convert here\n                    return (T) Void.TYPE;\n                } else {\n                    return (T) result;\n                }\n\n            }\n            // we cannot convert a node list, so we try the first item from the\n            // node list\n            tc = registry.lookup(type, Node.class);\n            if (tc != null) {\n                NodeList nodeList = cxfPayloadToNodeList((CxfPayload<?>) value, exchange);\n                if (nodeList.getLength() > 0) {\n                    return tc.convertTo(type, nodeList.item(0));\n                } else {\n                    // no we could not do it currently\n                    return (T) Void.TYPE;\n                }\n            } else {\n                if (size == 0) {\n                    // empty size so we cannot convert\n                    return (T) Void.TYPE;\n                }\n            }\n        }\n        return null;\n    }","commit_id":"da0fc7bffac1f369697ba20796e3c4343d349754","url":"https://github.com/apache/camel"},{"original_method":"@Override\n    @Before\n    public void setUp() throws Exception {\n        super.setUp();\n        File file = new File(\"src/test/resources/org/apache/camel/component/cxf/converter/test.xml\");\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        documentBuilderFactory.setNamespaceAware(true);\n        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n        document = documentBuilder.parse(file);\n        document.getDocumentElement().normalize();\n        List<Source> body = new ArrayList<Source>();\n        body.add(new DOMSource(document.getDocumentElement()));\n        payload = new CxfPayload<String[]>(new ArrayList<String[]>(), body, null);\n        emptyPayload = new CxfPayload<String[]>(new ArrayList<String[]>(), new ArrayList<Source>(), null);\n        inputStream = new FileInputStream(file);\n    }","id":96505,"modified_method":"@Override\n    @Before\n    public void setUp() throws Exception {\n        super.setUp();\n        File file = new File(\"src/test/resources/org/apache/camel/component/cxf/converter/test.xml\");\n        DocumentBuilderFactory documentBuilderFactory = DocumentBuilderFactory.newInstance();\n        documentBuilderFactory.setNamespaceAware(true);\n        DocumentBuilder documentBuilder = documentBuilderFactory.newDocumentBuilder();\n        document = documentBuilder.parse(file);\n        document.getDocumentElement().normalize();\n        List<Source> body = new ArrayList<Source>();\n        body.add(new DOMSource(document.getDocumentElement()));\n        List<Source> staxbody = new ArrayList<Source>();\n        staxbody.add(new StAXSource(StaxUtils.createXMLStreamReader(new FileInputStream(file), \"utf-8\")));\n        payload = new CxfPayload<String[]>(new ArrayList<String[]>(), body, null);\n        emptyPayload = new CxfPayload<String[]>(new ArrayList<String[]>(), new ArrayList<Source>(), null);\n        staxpayload = new CxfPayload<String[]>(new ArrayList<String[]>(), staxbody, null);\n        inputStream = new FileInputStream(file);\n    }","commit_id":"da0fc7bffac1f369697ba20796e3c4343d349754","url":"https://github.com/apache/camel"},{"original_method":"public Sequence eval(\n\t\tSequence contextSequence,\n\t\tItem contextItem)\n\t\tthrows XPathException {\n\t\tSequence seq = expression.eval(contextSequence, contextItem);\n\t\tItem item;\n\t\tint type;\n\t\tfor(SequenceIterator i = seq.iterate(); i.hasNext(); ) {\n\t\t\titem = i.nextItem();\n\t\t\ttype = item.getType();\n\t\t\tif (type == Type.NODE &&\n\t\t\t\t\t((NodeValue) item).getImplementationType() == NodeValue.PERSISTENT_NODE) {\n\t\t\t\ttype = ((NodeProxy) item).getNodeType();\n\t\t\t\tif (type == NodeProxy.UNKNOWN_NODE_TYPE)\n\t\t\t\t\t//Retrieve the actual node\n\t\t\t\t\ttype= ((NodeProxy) item).getNode().getNodeType();\n\t\t\t}\n\t\t\tif(!Type.subTypeOf(type, requiredType)) {\n\t\t\t\tthrow new XPathException(expression.getASTNode(), \"Type error in expression\" +\n\t\t\t\t\t\": required type is \" + Type.getTypeName(requiredType) +\n\t\t\t\t\t\"; got: \" + Type.getTypeName(item.getType()) + \": \" + item.getStringValue());\n\t\t\t}\n\t\t}\n\t\treturn seq;\n\t}","id":96506,"modified_method":"public Sequence eval(\n\t\tSequence contextSequence,\n\t\tItem contextItem)\n\t\tthrows XPathException {\n\t\tSequence seq = expression.eval(contextSequence, contextItem);\n\t\tItem item;\n\t\tint type;\n\t\tfor(SequenceIterator i = seq.iterate(); i.hasNext(); ) {\n\t\t\titem = i.nextItem();\n\t\t\ttype = item.getType();\n\t\t\tif (type == Type.NODE &&\n\t\t\t\t\t((NodeValue) item).getImplementationType() == NodeValue.PERSISTENT_NODE) {\n\t\t\t\ttype = ((NodeProxy) item).getNodeType();\n\t\t\t\tif (type == NodeProxy.UNKNOWN_NODE_TYPE)\n\t\t\t\t\t//Retrieve the actual node\n\t\t\t\t\ttype= ((NodeProxy) item).getNode().getNodeType();\n\t\t\t}\n\t\t\tif(type != requiredType && !Type.subTypeOf(type, requiredType)) {\n\t\t\t\t//TODO : how to make this block more generic ? -pb\t\t\t\t\n\t\t\t\tif (type == Type.UNTYPED_ATOMIC) {\t\n\t\t\t\t\ttry {\n\t\t\t\t\t\titem = item.convertTo(requiredType);\n\t\t\t\t\t//No way\n\t\t\t\t\t} catch (XPathException e) {\n\t\t\t\t\t\tthrow new XPathException(expression.getASTNode(), \"FOCH0002: Required type is \" + \n\t\t\t\t\t\t\t\tType.getTypeName(requiredType) + \" but got '\" + Type.getTypeName(item.getType()) + \"(\" +\n\t\t\t\t\t\t\t\titem.getStringValue() + \")'\");\n\t\t\t\t\t}\n\t\t\t\t//Then, if numeric, try to refine the type\t\t\t\t\t\n\t\t\t\t} else if (Type.subTypeOf(requiredType, Type.NUMBER) && Type.subTypeOf(type, Type.NUMBER)) {\n\t\t\t\t\ttry {\n\t\t\t\t\t\titem = item.convertTo(requiredType);\n\t\t\t\t\t//No way\n\t\t\t\t\t} catch (XPathException e) {\n\t\t\t\t\t\tthrow new XPathException(expression.getASTNode(), \"FOCH0002: Required type is \" + \n\t\t\t\t\t\t\t\tType.getTypeName(requiredType) + \" but got '\" + Type.getTypeName(item.getType()) + \"(\" +\n\t\t\t\t\t\t\t\titem.getStringValue() + \")'\");\n\t\t\t\t\t}\n\t\t\t\t} else\n\t\t\t\t\tthrow new XPathException(expression.getASTNode(), \"FOCH0002: Required type is \" + \n\t\t\t\t\t\t\tType.getTypeName(requiredType) + \" but got '\" + Type.getTypeName(item.getType()) + \"(\" +\n\t\t\t\t\t\t\titem.getStringValue() + \")'\");\n\t\t\t}\n\t\t}\n\t\treturn seq;\n\t}","commit_id":"a88a2636aaffbfa571bc92920b258ad0e3a50f8d","url":"https://github.com/eXist-db/exist"},{"original_method":"public Sequence eval(Sequence[] args, Sequence contextSequence)\n\t\tthrows XPathException {\n\t\tRequestModule myModule = (RequestModule)context.getModule(RequestModule.NAMESPACE_URI);\n\t\t\n\t\t// request object is read from global variable $request\n\t\tVariable var = myModule.resolveVariable(RequestModule.REQUEST_VAR);\n\t\tif(var == null)\n\t\t\tthrow new XPathException(\"No request object found in the current XQuery context.\");\n\t\tif (var.getValue().getItemType() != Type.JAVA_OBJECT)\n\t\t\tthrow new XPathException(\"Variable $request is not bound to an Java object.\");\n\n\t\tJavaObjectValue value = (JavaObjectValue) var.getValue().itemAt(0);\n\t\t\n\t\tif (value.getObject() instanceof RequestWrapper)\n\t\t\treturn new StringValue(((RequestWrapper) value.getObject()).getRequestURI());\n\t\telse\n\t\t\tthrow new XPathException(\"Variable $request is not bound to a Request object.\");\n\t}","id":96507,"modified_method":"public Sequence eval(Sequence[] args, Sequence contextSequence)\n\t\tthrows XPathException {\n\t\tRequestModule myModule = (RequestModule)context.getModule(RequestModule.NAMESPACE_URI);\n\t\t\n\t\t// request object is read from global variable $request\n\t\tVariable var = myModule.resolveVariable(RequestModule.REQUEST_VAR);\n\t\tif(var == null)\n\t\t\tthrow new XPathException(\"No request object found in the current XQuery context.\");\n\t\tif (var.getValue().getItemType() != Type.JAVA_OBJECT)\n\t\t\tthrow new XPathException(\"Variable $request is not bound to an Java object.\");\n\n\t\tJavaObjectValue value = (JavaObjectValue) var.getValue().itemAt(0);\n\t\t\n\t\tif (value.getObject() instanceof RequestWrapper)\n\t\t\treturn new AnyURIValue(((RequestWrapper) value.getObject()).getRequestURI());\n\t\telse\n\t\t\tthrow new XPathException(\"Variable $request is not bound to a Request object.\");\n\t}","commit_id":"a88a2636aaffbfa571bc92920b258ad0e3a50f8d","url":"https://github.com/eXist-db/exist"},{"original_method":"public Sequence eval(Sequence contextSequence, Item contextItem) throws XPathException {\n        if (context.getProfiler().isEnabled()) {\n            context.getProfiler().start(this);       \n            context.getProfiler().message(this, Profiler.DEPENDENCIES, \"DEPENDENCIES\", Dependency.getDependenciesName(this.getDependencies()));\n            if (contextSequence != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES, \"CONTEXT SEQUENCE\", contextSequence);\n            if (contextItem != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES, \"CONTEXT ITEM\", contextItem.toSequence());\n        }\n        \n\t\tSequence seq = expression.eval(contextSequence, contextItem);\n\t\tValueSequence result = new ValueSequence();\n\t\tItem item;\n\t\tfor(SequenceIterator i = seq.iterate(); i.hasNext(); ) {\n\t\t\titem = i.nextItem();\n\t\t\t//System.out.println(item.getStringValue() + \" converting to \" + Type.getTypeName(requiredType));\n\t\t\ttry {\n\t\t\t\tresult.add(item.convertTo(requiredType));\n\t\t\t} catch (XPathException e) {\n                error.addArgs(ExpressionDumper.dump(expression), Type.getTypeName(requiredType),\n                        Type.getTypeName(item.getType()));\n                throw new XPathException(expression.getASTNode(), error.toString());\n\t\t\t}\n\t\t}\n\n        if (context.getProfiler().isEnabled()) \n            context.getProfiler().end(this, \"\", result);\n        \n        return result; \n\t}","id":96508,"modified_method":"public Sequence eval(Sequence contextSequence, Item contextItem) throws XPathException {\n        if (context.getProfiler().isEnabled()) {\n            context.getProfiler().start(this);       \n            context.getProfiler().message(this, Profiler.DEPENDENCIES, \"DEPENDENCIES\", Dependency.getDependenciesName(this.getDependencies()));\n            if (contextSequence != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES, \"CONTEXT SEQUENCE\", contextSequence);\n            if (contextItem != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES, \"CONTEXT ITEM\", contextItem.toSequence());\n        }\n        \n\t\tSequence seq = expression.eval(contextSequence, contextItem);\n\t\tValueSequence result = new ValueSequence();\n\t\tItem item;\n\t\tfor(SequenceIterator i = seq.iterate(); i.hasNext(); ) {\n\t\t\titem = i.nextItem();\n\t\t\t//System.out.println(item.getStringValue() + \" converting to \" + Type.getTypeName(requiredType));\n\t\t\t//Type untyped values or... refine existing type\n\t\t\tif (item.getType() == Type.UNTYPED_ATOMIC || Type.subTypeOf(requiredType, Type.NUMBER) && Type.subTypeOf(item.getType(), Type.NUMBER)) {\n\t\t\t\ttry {\n\t\t\t\t\titem = item.convertTo(requiredType);\n\t\t\t\t} catch (XPathException e) {\n\t                error.addArgs(ExpressionDumper.dump(expression), Type.getTypeName(requiredType),\n\t                        Type.getTypeName(item.getType()));\n\t                throw new XPathException(expression.getASTNode(), error.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.add(item);\t\t\t\n\t\t}\n\n        if (context.getProfiler().isEnabled()) \n            context.getProfiler().end(this, \"\", result);\n        \n        return result; \n\t}","commit_id":"a88a2636aaffbfa571bc92920b258ad0e3a50f8d","url":"https://github.com/eXist-db/exist"},{"original_method":"public Sequence eval(Sequence contextSequence, Item contextItem) throws XPathException {\n        if (context.getProfiler().isEnabled()) {\n            context.getProfiler().start(this);       \n            context.getProfiler().message(this, Profiler.DEPENDENCIES, \"DEPENDENCIES\", Dependency.getDependenciesName(this.getDependencies()));\n            if (contextSequence != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES, \"CONTEXT SEQUENCE\", contextSequence);\n            if (contextItem != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES, \"CONTEXT ITEM\", contextItem.toSequence());\n        }\n        \n\t\tSequence seq = expression.eval(contextSequence, contextItem);\n\t\tValueSequence result = new ValueSequence();\n\t\tItem item;\n\t\tfor(SequenceIterator i = seq.iterate(); i.hasNext(); ) {\n\t\t\titem = i.nextItem();\n\t\t\t//System.out.println(item.getStringValue() + \" converting to \" + Type.getTypeName(requiredType));\n\t\t\ttry {\n\t\t\t\tresult.add(item.convertTo(requiredType));\n\t\t\t} catch (XPathException e) {\n                error.addArgs(ExpressionDumper.dump(expression), Type.getTypeName(requiredType),\n                        Type.getTypeName(item.getType()));\n                throw new XPathException(expression.getASTNode(), error.toString());\n\t\t\t}\n\t\t}\n\n        if (context.getProfiler().isEnabled()) \n            context.getProfiler().end(this, \"\", result);\n        \n        return result; \n\t}","id":96509,"modified_method":"public Sequence eval(Sequence contextSequence, Item contextItem) throws XPathException {\n        if (context.getProfiler().isEnabled()) {\n            context.getProfiler().start(this);       \n            context.getProfiler().message(this, Profiler.DEPENDENCIES, \"DEPENDENCIES\", Dependency.getDependenciesName(this.getDependencies()));\n            if (contextSequence != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES, \"CONTEXT SEQUENCE\", contextSequence);\n            if (contextItem != null)\n                context.getProfiler().message(this, Profiler.START_SEQUENCES, \"CONTEXT ITEM\", contextItem.toSequence());\n        }\n        \n\t\tSequence seq = expression.eval(contextSequence, contextItem);\n\t\tValueSequence result = new ValueSequence();\n\t\tItem item;\n\t\tfor(SequenceIterator i = seq.iterate(); i.hasNext(); ) {\n\t\t\titem = i.nextItem();\n\t\t\t//System.out.println(item.getStringValue() + \" converting to \" + Type.getTypeName(requiredType));\n\t\t\t//Type untyped values or... refine existing type\n\t\t\tif (item.getType() == Type.UNTYPED_ATOMIC || Type.subTypeOf(requiredType, Type.NUMBER) && Type.subTypeOf(item.getType(), Type.NUMBER)) {\n\t\t\t\ttry {\n\t\t\t\t\titem = item.convertTo(requiredType);\n\t\t\t\t} catch (XPathException e) {\n\t                error.addArgs(ExpressionDumper.dump(expression), Type.getTypeName(requiredType),\n\t                        Type.getTypeName(item.getType()));\n\t                throw new XPathException(expression.getASTNode(), error.toString());\n\t\t\t\t}\n\t\t\t}\n\t\t\tresult.add(item);\t\t\t\n\t\t}\n\n        if (context.getProfiler().isEnabled()) \n            context.getProfiler().end(this, \"\", result);\n        \n        return result; \n\t}","commit_id":"1bdf301be3d4096ccd5d172665567f8297859d5b","url":"https://github.com/eXist-db/exist"},{"original_method":"/**\n     * Creates an instance of <tt>AddContactWizardPage1<\/tt>.\n     * \n     * @param newContact An object that collects all user choices through the\n     *            wizard.\n     * @param protocolProvidersList The list of available\n     *            <tt>ProtocolProviderServices<\/tt>, from which the user\n     *            could select.\n     */\n    public AddContactWizardPage1(   WizardContainer wizard,\n                                    NewContact newContact,\n                                    Iterator protocolProvidersList)\n    {\n\n        this.wizard = wizard;\n\n        selectAccountPanel\n            = new SelectAccountPanel(newContact, protocolProvidersList);\n        selectAccountPanel.addCheckBoxCellListener(this);\n    }","id":96510,"modified_method":"/**\n     * Creates an instance of <tt>AddContactWizardPage1<\/tt>.\n     * \n     * @param newContact An object that collects all user choices through the\n     *            wizard.\n     * @param providerList The list of available\n     *            <tt>ProtocolProviderServices<\/tt>, from which the user\n     *            could select.\n     */\n    public AddContactWizardPage1(WizardContainer wizard,\n                                 NewContact newContact,\n                                 Iterator<ProtocolProviderService> providerList)\n    {\n\n        this.wizard = wizard;\n\n        selectAccountPanel\n            = new SelectAccountPanel(newContact, providerList);\n        selectAccountPanel.addListSelectionListener(this);\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"public void commitPage()\n    {\n        selectAccountPanel.setSelectedAccounts();\n    }","id":96511,"modified_method":"public void commitPage()\n    {\n        selectAccountPanel.initSelectedAccount();\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Enables the next button when the user makes a choise and disables it if\n     * nothing is selected.\n     */\n    private void setNextButtonAccordingToCheckBox()\n    {\n        if (selectAccountPanel.isCheckBoxSelected())\n            this.wizard.setNextFinishButtonEnabled(true);\n        else\n            this.wizard.setNextFinishButtonEnabled(false);\n    }","id":96512,"modified_method":"/**\n     * Enables the next button when the user makes a choice and disables it if\n     * nothing is selected.\n     */\n    private void setNextButtonAccordingToCheckBox()\n    {\n        if (selectAccountPanel.isAccountSelected())\n            this.wizard.setNextFinishButtonEnabled(true);\n        else\n            this.wizard.setNextFinishButtonEnabled(false);\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes this chat room dialog.\n     */\n    private void init()\n    {\n        ChatRoomListUI chatRoomsListUI = new ChatRoomListUI(this);\n\n        JButton createChatRoomButton = new JButton(\n            GuiActivator.getResources()\n                .getI18NString(\"service.gui.CREATE_CHAT_ROOM\"));\n\n        JButton joinChatRoomButton = new JButton(\n            GuiActivator.getResources()\n                .getI18NString(\"service.gui.JOIN_CHAT_ROOM\"));\n\n        JButton cancelButton = new JButton(\n            GuiActivator.getResources().getI18NString(\"service.gui.CANCEL\"));\n\n        TransparentPanel buttonPanel = new TransparentPanel();\n\n        this.setTitle(GuiActivator.getResources()\n            .getI18NString(\"service.gui.MY_CHAT_ROOMS\"));\n\n        this.getContentPane().add(buttonPanel, BorderLayout.SOUTH);\n        this.getContentPane().add(chatRoomsListUI, BorderLayout.CENTER);\n\n        buttonPanel.add(joinChatRoomButton);\n        buttonPanel.add(createChatRoomButton);\n        buttonPanel.add(cancelButton);\n\n        createChatRoomButton.addActionListener(this);\n        joinChatRoomButton.addActionListener(this);\n        cancelButton.addActionListener(this);\n\n        createChatRoomButton.setName(CREATE_CHAT_ROOM);\n        joinChatRoomButton.setName(JOIN_CHAT_ROOM);\n        cancelButton.setName(CANCEL);\n\n        createChatRoomButton.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.CREATE_CHAT_ROOM\"));\n        joinChatRoomButton.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.JOIN_CHAT_ROOM\"));\n        cancelButton.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(\"service.gui.CANCEL\"));\n    }","id":96513,"modified_method":"/**\n     * Initializes this chat room dialog.\n     */\n    private void init()\n    {\n        ChatRoomListUI chatRoomsListUI = new ChatRoomListUI(this);\n\n        JButton createChatRoomButton = new JButton(\n            GuiActivator.getResources()\n                .getI18NString(CREATE_CHAT_ROOM));\n\n        JButton joinChatRoomButton = new JButton(\n            GuiActivator.getResources()\n                .getI18NString(JOIN_CHAT_ROOM));\n\n        JButton cancelButton = new JButton(\n            GuiActivator.getResources()\n                .getI18NString(CLOSE_CHAT_ROOM_DIALOG));\n\n        TransparentPanel buttonPanel = new TransparentPanel();\n\n        this.setTitle(GuiActivator.getResources()\n            .getI18NString(MY_CHAT_ROOMS));\n\n        this.getContentPane().add(buttonPanel, BorderLayout.SOUTH);\n        this.getContentPane().add(chatRoomsListUI, BorderLayout.CENTER);\n\n        buttonPanel.add(joinChatRoomButton);\n        buttonPanel.add(createChatRoomButton);\n        buttonPanel.add(cancelButton);\n\n        createChatRoomButton.addActionListener(this);\n        joinChatRoomButton.addActionListener(this);\n        cancelButton.addActionListener(this);\n\n        createChatRoomButton.setName(CREATE_CHAT_ROOM);\n        joinChatRoomButton.setName(JOIN_CHAT_ROOM);\n        cancelButton.setName(CLOSE_CHAT_ROOM_DIALOG);\n\n        createChatRoomButton.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(CREATE_CHAT_ROOM));\n        joinChatRoomButton.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(JOIN_CHAT_ROOM));\n        cancelButton.setMnemonic(GuiActivator.getResources()\n            .getI18nMnemonic(CLOSE_CHAT_ROOM_DIALOG));\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Handles <tt>ActionEvent<\/tt>s triggered by a button click.\n     */\n    public void actionPerformed(ActionEvent e)\n    {\n        JButton sourceButton = (JButton) e.getSource();\n        String buttonName = sourceButton.getName();\n\n        if (buttonName.equals(CREATE_CHAT_ROOM))\n        {\n            CreateChatRoomWizard createChatRoomWizard\n                = new CreateChatRoomWizard(mainFrame);\n\n            createChatRoomWizard.showDialog(false);\n        }\n        else if (buttonName.equals(JOIN_CHAT_ROOM))\n        {\n            JoinChatRoomWizard joinChatRoomWizard\n                = new JoinChatRoomWizard(mainFrame);\n\n            joinChatRoomWizard.showDialog(false);\n        }\n        else if (buttonName.equals(CANCEL))\n        {\n            this.dispose();\n        }\n    }","id":96514,"modified_method":"/**\n     * Handles <tt>ActionEvent<\/tt>s triggered by a button click.\n     */\n    public void actionPerformed(ActionEvent e)\n    {\n        JButton sourceButton = (JButton) e.getSource();\n        String buttonName = sourceButton.getName();\n\n        if (buttonName.equals(CREATE_CHAT_ROOM))\n        {\n            CreateChatRoomWizard createChatRoomWizard\n                = new CreateChatRoomWizard(mainFrame);\n\n            createChatRoomWizard.showDialog(false);\n        }\n        else if (buttonName.equals(JOIN_CHAT_ROOM))\n        {\n            JoinChatRoomWizard joinChatRoomWizard\n                = new JoinChatRoomWizard(mainFrame);\n\n            joinChatRoomWizard.showDialog(false);\n        }\n        else if (buttonName.equals(CLOSE_CHAT_ROOM_DIALOG))\n        {\n            this.dispose();\n        }\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Saves the selected account before going to the next page.\n     */\n    public void commitPage()\n    {\n        selectAccountPanel.setSelectedAccount();\n    }","id":96515,"modified_method":"/**\n     * Saves the selected account before going to the next page.\n     */\n    public void commitPage()\n    {\n        selectAccountPanel.initSelectedAccount();\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Enables the next button when the user makes a choice and disables it \n     * if nothing is selected.\n     */\n    private void setNextButtonAccordingToCheckBox()\n    {\n        if (selectAccountPanel.isRadioSelected())\n            this.wizard.setNextFinishButtonEnabled(true);\n        else\n            this.wizard.setNextFinishButtonEnabled(false);\n    }","id":96516,"modified_method":"/**\n     * Enables the next button when the user makes a choice and disables it \n     * if nothing is selected.\n     */\n    private void setNextButtonAccordingToRowSelection()\n    {\n        if (selectAccountPanel.isRowSelected())\n            this.wizard.setNextFinishButtonEnabled(true);\n        else\n            this.wizard.setNextFinishButtonEnabled(false);\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates an instance of <tt>JoinChatRoomWizardPage1<\/tt>.\n     * \n     * @param wizard the parent wizard container\n     * @param joinChatRoom the object that will collect the information through\n     * the wizard \n     * @param protocolProvidersList The list of available installed \n     * <tt>ProtocolProviderServices<\/tt>, from which the user could select.\n     */\n    public JoinChatRoomWizardPage1(\n        WizardContainer wizard,\n        NewChatRoom joinChatRoom,\n        Iterator<ChatRoomProviderWrapper> chatRoomProviders)\n    {\n        this.wizard = wizard;\n\n        selectAccountPanel\n            = new SelectAccountPanel(joinChatRoom, chatRoomProviders);\n\n        selectAccountPanel.addCheckBoxCellListener(this);\n    }","id":96517,"modified_method":"/**\n     * Creates an instance of <tt>JoinChatRoomWizardPage1<\/tt>.\n     * \n     * @param wizard the parent wizard container\n     * @param joinChatRoom the object that will collect the information through\n     * the wizard \n     * @param protocolProvidersList The list of available installed \n     * <tt>ProtocolProviderServices<\/tt>, from which the user could select.\n     */\n    public JoinChatRoomWizardPage1(\n        WizardContainer wizard,\n        NewChatRoom joinChatRoom,\n        Iterator<ChatRoomProviderWrapper> chatRoomProviders)\n    {\n        this.wizard = wizard;\n\n        selectAccountPanel\n            = new SelectAccountPanel(joinChatRoom, chatRoomProviders);\n\n        selectAccountPanel.addListSelectionListener(this);\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Before the panel is displayed checks the selections and enables the\n     * next button if a check box is already selected or disables it if \n     * nothing is selected.\n     */\n    public void pageShowing()\n    {\n        setNextButtonAccordingToCheckBox();\n    }","id":96518,"modified_method":"/**\n     * Before the panel is displayed checks the selections and enables the\n     * next button if a check box is already selected or disables it if \n     * nothing is selected.\n     */\n    public void pageShowing()\n    {\n        setNextButtonAccordingToRowSelection();\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes the accounts table.\n     */\n    private void tableInit()\n    {\n        accountsTable.setPreferredScrollableViewportSize(new Dimension(500, 70));\n\n        tableModel.addColumn(\"\");\n        tableModel.addColumn(\n            GuiActivator.getResources().getI18NString(\"service.gui.ACCOUNT\"));\n        tableModel.addColumn(\n            GuiActivator.getResources().getI18NString(\"service.gui.PROTOCOL\"));\n\n        while(protocolProvidersList.hasNext())\n        {\n            ProtocolProviderService pps \n                = (ProtocolProviderService)protocolProvidersList.next();\n\n            OperationSet opSet = pps.getOperationSet(\n                OperationSetMultiUserChat.class);\n\n            if(opSet == null)\n                continue;\n\n            String pName = pps.getProtocolDisplayName();\n\n            byte[] protocolImage = pps.getProtocolIcon()\n                        .getIcon(ProtocolIcon.ICON_SIZE_16x16);\n\n            JLabel protocolLabel = new JLabel();\n            protocolLabel.setText(pName);\n            protocolLabel.setIcon(new ImageIcon(protocolImage));\n\n            JRadioButton radioButton = new JRadioButton();\n\n            tableModel.addRow(new Object[]{radioButton,\n                    pps, protocolLabel});\n\n            radioButtonGroup.add(radioButton);\n        }\n\n        accountsTable.setRowHeight(22);\n\n        accountsTable.getColumnModel().getColumn(0).setPreferredWidth(30);\n        accountsTable.getColumnModel().getColumn(0).setCellRenderer(\n            new RadioButtonTableCellRenderer());\n\n        accountsTable.getColumnModel().getColumn(0).setCellEditor(\n            new RadioButtonCellEditor(new JCheckBox()));\n\n        accountsTable.getColumnModel().getColumn(2)\n            .setCellRenderer(new LabelTableCellRenderer());\n        accountsTable.getColumnModel().getColumn(1)\n            .setCellRenderer(new LabelTableCellRenderer());\n\n        this.tablePane.getViewport().add(accountsTable);\n\n        if (accountsTable.getModel().getRowCount() == 0)\n        {\n            JTextArea noAccountsTextArea = new JTextArea(\n                GuiActivator.getResources().getI18NString(\n                    \"service.gui.NO_GROUP_CHAT_ACCOUNT_AVAILABLE\"));\n\n            noAccountsTextArea.setLineWrap(true);\n            noAccountsTextArea.setPreferredSize(new Dimension(400, 200));\n            noAccountsTextArea.setOpaque(false);\n\n            this.rightPanel.add(noAccountsTextArea, BorderLayout.SOUTH);\n        }\n    }","id":96519,"modified_method":"/**\n     * Initializes the accounts table.\n     */\n    private void tableInit()\n    {\n        accountsTable.setPreferredScrollableViewportSize(new Dimension(500, 70));\n\n        tableModel.addColumn(\n            GuiActivator.getResources().getI18NString(\"service.gui.PROTOCOL\"));\n        tableModel.addColumn(\n            GuiActivator.getResources().getI18NString(\"service.gui.ACCOUNT\"));\n\n        while(protocolProvidersList.hasNext())\n        {\n            ProtocolProviderService pps \n                = (ProtocolProviderService)protocolProvidersList.next();\n\n            OperationSet opSet = pps.getOperationSet(\n                OperationSetMultiUserChat.class);\n\n            if(opSet == null)\n                continue;\n\n            String pName = pps.getProtocolDisplayName();\n\n            byte[] protocolImage = pps.getProtocolIcon()\n                        .getIcon(ProtocolIcon.ICON_SIZE_16x16);\n\n            JLabel protocolLabel = new JLabel();\n            protocolLabel.setText(pName);\n            protocolLabel.setIcon(new ImageIcon(protocolImage));\n\n            JRadioButton radioButton = new JRadioButton();\n\n            tableModel.addRow(new Object[]{radioButton,\n                    pps, protocolLabel});\n\n            radioButtonGroup.add(radioButton);\n        }\n\n        accountsTable.setRowHeight(22);\n\n        accountsTable.getColumnModel().getColumn(0).setPreferredWidth(30);\n        accountsTable.getColumnModel().getColumn(0).setCellRenderer(\n            new RadioButtonTableCellRenderer());\n\n        accountsTable.getColumnModel().getColumn(0).setCellEditor(\n            new RadioButtonCellEditor(new JCheckBox()));\n\n        accountsTable.getColumnModel().getColumn(2)\n            .setCellRenderer(new LabelTableCellRenderer());\n        accountsTable.getColumnModel().getColumn(1)\n            .setCellRenderer(new LabelTableCellRenderer());\n\n        this.tablePane.getViewport().add(accountsTable);\n\n        if (accountsTable.getModel().getRowCount() == 0)\n        {\n            JTextArea noAccountsTextArea = new JTextArea(\n                GuiActivator.getResources().getI18NString(\n                    \"service.gui.NO_GROUP_CHAT_ACCOUNT_AVAILABLE\"));\n\n            noAccountsTextArea.setLineWrap(true);\n            noAccountsTextArea.setPreferredSize(new Dimension(400, 200));\n            noAccountsTextArea.setOpaque(false);\n\n            this.rightPanel.add(noAccountsTextArea, BorderLayout.SOUTH);\n        }\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates and initializes the <tt>SelectAccountPanel<\/tt>.\n     * \n     * @param newChatRoom an object that collects all user choices through the\n     * wizard\n     * @param protocolProvidersList The list of available \n     * <tt>ProtocolProviderServices<\/tt>, from which the user could select.\n     */\n    public SelectAccountPanel(NewChatRoom newChatRoom, \n            Iterator protocolProvidersList)\n    {\n        super(new BorderLayout());\n\n        this.setBorder(BorderFactory\n            .createEmptyBorder(10, 10, 10, 10));\n\n        this.setPreferredSize(new Dimension(600, 400));\n\n        this.newChatRoom = newChatRoom;\n\n        this.protocolProvidersList = protocolProvidersList;\n\n        this.iconLabel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));\n\n        this.infoLabel.setEditable(false);\n\n        this.infoTitleLabel.setFont(Constants.FONT.deriveFont(Font.BOLD, 18));\n\n        this.labelsPanel.add(infoTitleLabel);\n        this.labelsPanel.add(infoLabel);\n\n        this.rightPanel.setBorder(\n            BorderFactory.createEmptyBorder(0, 10, 10, 10));\n\n        this.rightPanel.add(labelsPanel, BorderLayout.NORTH);\n        this.rightPanel.add(tablePane, BorderLayout.CENTER);\n\n        this.add(iconLabel, BorderLayout.WEST);\n\n        this.add(rightPanel, BorderLayout.CENTER);\n        \n        accountsTable = new JTable(tableModel)\n        {\n            public void tableChanged(TableModelEvent e)\n            {\n              super.tableChanged(e);\n              repaint();\n            }\n        };\n\n        this.tableInit();\n    }","id":96520,"modified_method":"/**\n     * Creates and initializes the <tt>SelectAccountPanel<\/tt>.\n     * \n     * @param newChatRoom an object that collects all user choices through the\n     * wizard\n     * @param protocolProvidersList The list of available \n     * <tt>ProtocolProviderServices<\/tt>, from which the user could select.\n     */\n    public SelectAccountPanel(NewChatRoom newChatRoom, \n            Iterator<ProtocolProviderService> protocolProvidersList)\n    {\n        super(new BorderLayout());\n\n        this.setBorder(BorderFactory\n            .createEmptyBorder(10, 10, 10, 10));\n\n        this.setPreferredSize(new Dimension(600, 400));\n\n        this.newChatRoom = newChatRoom;\n\n        this.protocolProvidersList = protocolProvidersList;\n\n        this.iconLabel.setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));\n\n        this.infoLabel.setEditable(false);\n\n        this.infoTitleLabel.setFont(Constants.FONT.deriveFont(Font.BOLD, 18));\n\n        this.labelsPanel.add(infoTitleLabel);\n        this.labelsPanel.add(infoLabel);\n\n        this.rightPanel.setBorder(\n            BorderFactory.createEmptyBorder(0, 10, 10, 10));\n\n        this.rightPanel.add(labelsPanel, BorderLayout.NORTH);\n        this.rightPanel.add(tablePane, BorderLayout.CENTER);\n\n        this.add(iconLabel, BorderLayout.WEST);\n\n        this.add(rightPanel, BorderLayout.CENTER);\n        \n        accountsTable = new JTable(tableModel)\n        {\n            public void tableChanged(TableModelEvent e)\n            {\n              super.tableChanged(e);\n              repaint();\n            }\n        };\n\n        this.tableInit();\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"public void serviceChanged(ServiceEvent event)\n    {\n        // if the event is caused by a bundle being stopped, we don't want to\n        // know\n        if (event.getServiceReference().getBundle().getState() == Bundle.STOPPING)\n        {\n            return;\n        }\n\n        Object sourceService =\n            GuiActivator.bundleContext.getService(event.getServiceReference());\n\n        // we don't care if the source service is not a protocol provider\n        if (!(sourceService instanceof ProtocolProviderService))\n        {\n            return;\n        }\n\n        ProtocolProviderService sourcePProvider =\n            (ProtocolProviderService) sourceService;\n\n        if (event.getType() == ServiceEvent.REGISTERED)\n        {\n            String pName = sourcePProvider.getProtocolDisplayName();\n\n            Image protocolImage = null;\n            try\n            {\n                protocolImage =\n                    ImageIO.read(new ByteArrayInputStream(sourcePProvider\n                        .getProtocolIcon()\n                        .getIcon(ProtocolIcon.ICON_SIZE_16x16)));\n            }\n            catch (IOException e)\n            {\n                logger.error(\"Could not read image.\", e);\n            }\n\n            JLabel protocolLabel = new JLabel();\n            protocolLabel.setText(pName);\n            protocolLabel.setIcon(new ImageIcon(protocolImage));\n\n            tableModel.addRow(new Object[]\n            { new Boolean(false), sourcePProvider, protocolLabel });\n        }\n        else if (event.getType() == ServiceEvent.UNREGISTERING)\n        {\n            for (int i = 0; i < tableModel.getRowCount(); i++)\n            {\n                ProtocolProviderService protocolProvider =\n                    (ProtocolProviderService) tableModel.getValueAt(i, 1);\n\n                if (protocolProvider.equals(sourcePProvider))\n                {\n                    tableModel.removeRow(i);\n                    break;\n                }\n            }\n        }\n    }","id":96521,"modified_method":"public void serviceChanged(ServiceEvent event)\n    {\n        // if the event is caused by a bundle being stopped, we don't want to\n        // know\n        if (event.getServiceReference().getBundle().getState() == Bundle.STOPPING)\n        {\n            return;\n        }\n\n        Object sourceService =\n            GuiActivator.bundleContext.getService(event.getServiceReference());\n\n        // we don't care if the source service is not a protocol provider\n        if (!(sourceService instanceof ProtocolProviderService))\n        {\n            return;\n        }\n\n        ProtocolProviderService sourcePProvider =\n            (ProtocolProviderService) sourceService;\n\n        if (event.getType() == ServiceEvent.REGISTERED)\n        {\n            String pName = sourcePProvider.getProtocolDisplayName();\n\n            Image protocolImage = null;\n            try\n            {\n                protocolImage =\n                    ImageIO.read(new ByteArrayInputStream(sourcePProvider\n                        .getProtocolIcon()\n                        .getIcon(ProtocolIcon.ICON_SIZE_16x16)));\n            }\n            catch (IOException e)\n            {\n                logger.error(\"Could not read image.\", e);\n            }\n\n            JLabel protocolLabel = new JLabel();\n            protocolLabel.setText(pName);\n            protocolLabel.setIcon(new ImageIcon(protocolImage));\n\n            tableModel.addRow(new Object[]{ protocolLabel, sourcePProvider });\n        }\n        else if (event.getType() == ServiceEvent.UNREGISTERING)\n        {\n            for (int i = 0; i < tableModel.getRowCount(); i++)\n            {\n                ProtocolProviderService protocolProvider =\n                    (ProtocolProviderService) tableModel\n                        .getValueAt(i,ACCOUNT_COLUMN_INDEX);\n\n                if (protocolProvider.equals(sourcePProvider))\n                {\n                    tableModel.removeRow(i);\n                    break;\n                }\n            }\n        }\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates and initializes the <tt>SelectAccountPanel<\/tt>.\n     * \n     * @param newContact An object that collects all user choices through the\n     *            wizard.\n     * @param protocolProvidersList The list of available\n     *            <tt>ProtocolProviderServices<\/tt>, from which the user\n     *            could select.\n     */\n    public SelectAccountPanel(NewContact newContact,\n        Iterator<ProtocolProviderService> protocolProvidersList)\n    {\n        super(new BorderLayout());\n\n        this.newContact = newContact;\n\n        this.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n\n        this.setPreferredSize(new Dimension(500, 200));\n\n        this.iconLabel\n            .setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));\n\n        this.infoLabel.setEditable(false);\n\n        this.infoTitleLabel.setFont(Constants.FONT.deriveFont(Font.BOLD, 18));\n\n        this.labelsPanel.add(infoTitleLabel);\n        this.labelsPanel.add(infoLabel);\n\n        this.rightPanel.add(labelsPanel, BorderLayout.NORTH);\n        this.rightPanel.add(tablePane, BorderLayout.CENTER);\n        this.rightPanel.add(buttonPanel, BorderLayout.SOUTH);\n\n        this.buttonPanel.add(addAccountButton);\n\n        this.addAccountButton.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent arg0)\n            {\n                NewAccountDialog.showNewAccountDialog();\n            }\n        });\n\n        this.add(iconLabel, BorderLayout.WEST);\n\n        this.rightPanel.setBorder(BorderFactory\n            .createEmptyBorder(0, 10, 10, 10));\n\n        this.add(rightPanel, BorderLayout.CENTER);\n\n        this.tableInit(protocolProvidersList);\n\n        GuiActivator.bundleContext.addServiceListener(this);\n    }","id":96522,"modified_method":"/**\n     * Creates and initializes the <tt>SelectAccountPanel<\/tt>.\n     * \n     * @param newContact An object that collects all user choices through the\n     *            wizard.\n     * @param protocolProvidersList The list of available\n     *            <tt>ProtocolProviderServices<\/tt>, from which the user\n     *            could select.\n     */\n    public SelectAccountPanel(NewContact newContact,\n        Iterator<ProtocolProviderService> protocolProvidersList)\n    {\n        super(new BorderLayout());\n\n        this.newContact = newContact;\n\n        this.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));\n\n        this.setPreferredSize(new Dimension(500, 200));\n\n        this.iconLabel\n            .setBorder(BorderFactory.createEmptyBorder(0, 10, 10, 10));\n\n        this.infoLabel.setEditable(false);\n\n        this.infoTitleLabel.setFont(Constants.FONT.deriveFont(Font.BOLD, 18));\n\n        this.labelsPanel.add(infoTitleLabel);\n        this.labelsPanel.add(infoLabel);\n        \n        accountsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);\n\n        this.rightPanel.add(labelsPanel, BorderLayout.NORTH);\n        this.rightPanel.add(tablePane, BorderLayout.CENTER);\n        this.rightPanel.add(buttonPanel, BorderLayout.SOUTH);\n\n        this.buttonPanel.add(addAccountButton);\n\n        this.addAccountButton.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent arg0)\n            {\n                NewAccountDialog.showNewAccountDialog();\n            }\n        });\n\n        this.add(iconLabel, BorderLayout.WEST);\n\n        this.rightPanel.setBorder(BorderFactory\n            .createEmptyBorder(0, 10, 10, 10));\n\n        this.add(rightPanel, BorderLayout.CENTER);\n\n        this.tableInit(protocolProvidersList);\n\n        GuiActivator.bundleContext.addServiceListener(this);\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes the accounts table.\n     */\n    private void tableInit(Iterator<ProtocolProviderService> protocolProvidersList)\n    {\n        accountsTable\n            .setPreferredScrollableViewportSize(new Dimension(500, 70));\n\n        tableModel.addColumn(\"\");\n        tableModel.addColumn(\n            GuiActivator.getResources().getI18NString(\"service.gui.ACCOUNT\"));\n        tableModel.addColumn(\n            GuiActivator.getResources().getI18NString(\"service.gui.PROTOCOL\"));\n\n        while (protocolProvidersList.hasNext())\n        {\n            ProtocolProviderService pps = protocolProvidersList.next();\n\n            OperationSet opSet =\n                pps.getOperationSet(OperationSetPresence.class);\n\n            if (opSet == null)\n                continue;\n\n            String pName = pps.getProtocolDisplayName();\n\n            Image protocolImage = null;\n            try\n            {\n                protocolImage =\n                    ImageIO.read(new ByteArrayInputStream(pps.getProtocolIcon()\n                        .getIcon(ProtocolIcon.ICON_SIZE_16x16)));\n            }\n            catch (IOException e)\n            {\n                logger.error(\"Could not read image.\", e);\n            }\n\n            JLabel protocolLabel = new JLabel();\n            protocolLabel.setText(pName);\n            protocolLabel.setIcon(new ImageIcon(protocolImage));\n\n            tableModel.addRow(new Object[]\n            { new Boolean(false), pps, protocolLabel });\n        }\n\n        accountsTable.setRowHeight(22);\n        accountsTable.setModel(tableModel);\n\n        accountsTable.getColumnModel().getColumn(0).sizeWidthToFit();\n        accountsTable.getColumnModel().getColumn(2).setCellRenderer(\n            new LabelTableCellRenderer());\n        accountsTable.getColumnModel().getColumn(1).setCellRenderer(\n            new LabelTableCellRenderer());\n\n        this.tablePane.getViewport().add(accountsTable);\n    }","id":96523,"modified_method":"/**\n     * Initializes the accounts table.\n     */\n    private void tableInit(Iterator<ProtocolProviderService> protocolProvidersList)\n    {\n        accountsTable\n            .setPreferredScrollableViewportSize(new Dimension(500, 70));\n\n        tableModel.addColumn(\n            GuiActivator.getResources().getI18NString(\"service.gui.PROTOCOL\"));\n        tableModel.addColumn(\n            GuiActivator.getResources().getI18NString(\"service.gui.ACCOUNT\"));\n\n        while (protocolProvidersList.hasNext())\n        {\n            ProtocolProviderService pps = protocolProvidersList.next();\n\n            OperationSet opSet =\n                pps.getOperationSet(OperationSetPresence.class);\n\n            if (opSet == null)\n                continue;\n\n            String pName = pps.getProtocolDisplayName();\n\n            Image protocolImage = null;\n            try\n            {\n                protocolImage = ImageIO.read(\n                                new ByteArrayInputStream(pps.getProtocolIcon()\n                                    .getIcon(ProtocolIcon.ICON_SIZE_16x16)));\n            }\n            catch (IOException e)\n            {\n                logger.error(\"Could not read image.\", e);\n            }\n\n            JLabel protocolLabel = new JLabel();\n            protocolLabel.setText(pName);\n            protocolLabel.setIcon(new ImageIcon(protocolImage));\n\n            tableModel.addRow(new Object[] { protocolLabel, pps });\n        }\n\n        accountsTable.setRowHeight(22);\n        accountsTable.setModel(tableModel);\n\n        accountsTable.getColumnModel().getColumn(PROTOCOL_COLUMN_INDEX)\n                        .setCellRenderer(new LabelTableCellRenderer());\n        accountsTable.getColumnModel()\n                        .getColumn(PROTOCOL_COLUMN_INDEX).sizeWidthToFit();\n        \n        accountsTable.getColumnModel().getColumn(ACCOUNT_COLUMN_INDEX)\n                        .setCellRenderer( new LabelTableCellRenderer());\n        \n        accountsTable.getColumnModel()\n                        .getColumn(ACCOUNT_COLUMN_INDEX).setPreferredWidth(300);\n        \n        this.tablePane.getViewport().add(accountsTable);\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"public void setSelectedAccounts()\n    {\n        TableModel model = accountsTable.getModel();\n\n        for (int i = 0; i < accountsTable.getRowCount(); i++)\n        {\n            Object value = model.getValueAt(i, 0);\n\n            if (value instanceof Boolean)\n            {\n                Boolean check = (Boolean) value;\n                if (check.booleanValue())\n                {\n                    newContact\n                        .addProtocolProvider((ProtocolProviderService) model\n                            .getValueAt(i, 1));\n                }\n            }\n        }\n    }","id":96524,"modified_method":"/**\n     * Determines if an account has been selected in the accounts table and \n     * sets it in <tt>newContact.<\/tt>\n     */\n    public void initSelectedAccount()\n    {\n        TableModel model = accountsTable.getModel();\n\n        int selectedRow = accountsTable.getSelectedRow();\n        if(selectedRow != -1)\n        {\n            newContact.addProtocolProvider((ProtocolProviderService) model\n                            .getValueAt(selectedRow, ACCOUNT_COLUMN_INDEX));\n        }\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes the accounts table.\n     */\n    private void tableInit()\n    {\n        accountsTable.setPreferredScrollableViewportSize(new Dimension(500, 70));\n\n        tableModel.addColumn(\"\");\n        tableModel.addColumn(\n            GuiActivator.getResources().getI18NString(\"service.gui.ACCOUNT\"));\n        tableModel.addColumn(\n            GuiActivator.getResources().getI18NString(\"service.gui.PROTOCOL\"));\n\n        while(chatRoomProvidersList.hasNext())\n        {\n            ChatRoomProviderWrapper provider \n                = (ChatRoomProviderWrapper) chatRoomProvidersList.next();\n\n            String pName = provider.getName();\n\n            JLabel protocolLabel = new JLabel();\n            protocolLabel.setText(pName);\n\n            byte[] providerImage = provider.getProtocolProvider()\n                .getProtocolIcon().getIcon(ProtocolIcon.ICON_SIZE_16x16);\n\n            if (providerImage != null)\n                protocolLabel.setIcon(new ImageIcon(providerImage));\n\n            JRadioButton radioButton = new JRadioButton();\n\n            tableModel.addRow(new Object[]{radioButton,\n                    provider, protocolLabel});\n\n            radioButtonGroup.add(radioButton);\n        }\n\n        accountsTable.setRowHeight(22);\n\n        accountsTable.getColumnModel().getColumn(0).setPreferredWidth(30);\n        accountsTable.getColumnModel().getColumn(0).setCellRenderer(\n            new RadioButtonTableCellRenderer());\n\n        accountsTable.getColumnModel().getColumn(0).setCellEditor(\n            new RadioButtonCellEditor(new JCheckBox()));\n\n        accountsTable.getColumnModel().getColumn(2)\n            .setCellRenderer(new LabelTableCellRenderer());\n        accountsTable.getColumnModel().getColumn(1)\n            .setCellRenderer(new LabelTableCellRenderer());\n\n        this.tablePane.getViewport().add(accountsTable);\n\n        if (accountsTable.getModel().getRowCount() == 0)\n        {\n            JTextArea noAccountsTextArea = new JTextArea(\n                GuiActivator.getResources()\n                .getI18NString(\"service.gui.NO_GROUP_CHAT_ACCOUNT_AVAILABLE\"));\n\n            noAccountsTextArea.setLineWrap(true);\n            noAccountsTextArea.setPreferredSize(new Dimension(400, 200));\n            noAccountsTextArea.setOpaque(false);\n\n            this.rightPanel.add(noAccountsTextArea, BorderLayout.SOUTH);\n        }\n    }","id":96525,"modified_method":"/**\n     * Initializes the accounts table.\n     */\n    private void tableInit()\n    {\n        accountsTable.setPreferredScrollableViewportSize(new Dimension(500, 70));\n\n        tableModel.addColumn(\n            GuiActivator.getResources().getI18NString(\"service.gui.PROTOCOL\"));\n        tableModel.addColumn(\n            GuiActivator.getResources().getI18NString(\"service.gui.ACCOUNT\"));\n\n        while(chatRoomProvidersList.hasNext())\n        {\n            ChatRoomProviderWrapper provider \n                = (ChatRoomProviderWrapper) chatRoomProvidersList.next();\n\n            String pName = provider.getName();\n\n            JLabel protocolLabel = new JLabel();\n            protocolLabel.setText(pName);\n\n            byte[] providerImage = provider.getProtocolProvider()\n                .getProtocolIcon().getIcon(ProtocolIcon.ICON_SIZE_16x16);\n\n            if (providerImage != null)\n                protocolLabel.setIcon(new ImageIcon(providerImage));\n\n            tableModel.addRow(new Object[]{protocolLabel, provider});\n\n        }\n\n        accountsTable.setRowHeight(22);\n\n        accountsTable.getColumnModel().getColumn(ACCOUNT_COLUMN_INDEX)\n            .setCellRenderer(new LabelTableCellRenderer());\n        accountsTable.getColumnModel()\n            .getColumn(PROTOCOL_COLUMN_INDEX).sizeWidthToFit();        \n        accountsTable.getColumnModel().getColumn(PROTOCOL_COLUMN_INDEX)\n            .setCellRenderer(new LabelTableCellRenderer());\n        accountsTable.getColumnModel()\n            .getColumn(ACCOUNT_COLUMN_INDEX).setPreferredWidth(300);\n\n        this.tablePane.getViewport().add(accountsTable);\n\n        if (accountsTable.getModel().getRowCount() == 0)\n        {\n            JTextArea noAccountsTextArea = new JTextArea(\n                GuiActivator.getResources()\n                .getI18NString(\"service.gui.NO_GROUP_CHAT_ACCOUNT_AVAILABLE\"));\n\n            noAccountsTextArea.setLineWrap(true);\n            noAccountsTextArea.setPreferredSize(new Dimension(400, 200));\n            noAccountsTextArea.setOpaque(false);\n\n            this.rightPanel.add(noAccountsTextArea, BorderLayout.SOUTH);\n        }\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates and initializes the <tt>SelectAccountPanel<\/tt>.\n     * \n     * @param joinChatRoom an object that collects all user choices through the\n     * wizard\n     * @param chatRoomProviders The list of available \n     * <tt>ChatRoomProviderWrapper<\/tt>s, from which the user could select.\n     */\n    public SelectAccountPanel(\n        NewChatRoom joinChatRoom, \n        Iterator<ChatRoomProviderWrapper> chatRoomProviders)\n    {\n        super(new BorderLayout());\n\n        this.setPreferredSize(new Dimension(600, 400));\n        this.joinChatRoom = joinChatRoom;\n\n        this.chatRoomProvidersList = chatRoomProviders;\n\n        this.iconLabel.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 10));\n\n        this.infoLabel.setEditable(false);\n\n        this.infoTitleLabel.setFont(Constants.FONT.deriveFont(Font.BOLD, 18));\n\n        this.labelsPanel.add(infoTitleLabel);\n        this.labelsPanel.add(infoLabel);\n\n        this.rightPanel.add(labelsPanel, BorderLayout.NORTH);\n        this.rightPanel.add(tablePane, BorderLayout.CENTER);\n\n        this.add(iconLabel, BorderLayout.WEST);\n\n        this.add(rightPanel, BorderLayout.CENTER);\n\n        accountsTable = new JTable(tableModel)\n        {\n            public void tableChanged(TableModelEvent e)\n            {\n              super.tableChanged(e);\n              repaint();\n            }\n        };\n\n        this.tableInit();\n    }","id":96526,"modified_method":"/**\n     * Creates and initializes the <tt>SelectAccountPanel<\/tt>.\n     * \n     * @param joinChatRoom an object that collects all user choices through the\n     * wizard\n     * @param chatRoomProviders The list of available \n     * <tt>ChatRoomProviderWrapper<\/tt>s, from which the user could select.\n     */\n    public SelectAccountPanel(\n        NewChatRoom joinChatRoom, \n        Iterator<ChatRoomProviderWrapper> chatRoomProviders)\n    {\n        super(new BorderLayout());\n\n        this.setPreferredSize(new Dimension(600, 400));\n        this.joinChatRoom = joinChatRoom;\n\n        this.chatRoomProvidersList = chatRoomProviders;\n\n        this.iconLabel.setBorder(BorderFactory.createEmptyBorder(5, 0, 5, 10));\n\n        this.infoLabel.setEditable(false);\n\n        this.infoTitleLabel.setFont(Constants.FONT.deriveFont(Font.BOLD, 18));\n\n        this.labelsPanel.add(infoTitleLabel);\n        this.labelsPanel.add(infoLabel);\n\n        this.rightPanel.add(labelsPanel, BorderLayout.NORTH);\n        this.rightPanel.add(tablePane, BorderLayout.CENTER);\n\n        this.add(iconLabel, BorderLayout.WEST);\n\n        this.add(rightPanel, BorderLayout.CENTER);\n\n        accountsTable = new JTable(tableModel)\n        {\n            /**\n             * An eclipse generated serial version uid.\n             */\n            private static final long serialVersionUID = 6321836989166142791L;\n\n            public void tableChanged(TableModelEvent e)\n            {\n              super.tableChanged(e);\n              repaint();\n            }\n        };\n\n        this.tableInit();\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Set the selected account, which will be used in the rest of the wizard.\n     */\n    public void setSelectedAccount()\n    {\n        TableModel model = accountsTable.getModel();\n\n        for (int i = 0; i < accountsTable.getRowCount(); i ++)\n        {\n            Object value = model.getValueAt(i, 0);\n\n            if (value instanceof JRadioButton)\n            {\n                JRadioButton radioButton = (JRadioButton) value;\n\n                if(radioButton.isSelected())\n                {\n                    joinChatRoom.setChatRoomProvider(\n                        (ChatRoomProviderWrapper) model.getValueAt(i, 1));\n                }\n            }\n        }\n    }","id":96527,"modified_method":"/**\n     * Determine the selected account, which will be used in the rest of the \n     * wizard.\n     */\n    public void initSelectedAccount()\n    {\n        TableModel model = accountsTable.getModel();\n\n        int selectedRow = accountsTable.getSelectedRow();\n        if(selectedRow != -1)\n        {\n            joinChatRoom.setChatRoomProvider((ChatRoomProviderWrapper) \n                        model.getValueAt(selectedRow, ACCOUNT_COLUMN_INDEX));\n        }\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Checks whether there is a selected radio button in the table.\n     * @return <code>true<\/code> if any of the check boxes is selected,\n     * <code>false<\/code> otherwise.\n     */\n    public boolean isRadioSelected()\n    {\n        TableModel model = accountsTable.getModel();\n\n        for (int i = 0; i < accountsTable.getRowCount(); i ++) {\n            Object value = model.getValueAt(i, 0);\n\n            if (value instanceof JRadioButton)\n            {\n                JRadioButton radioButton = (JRadioButton) value;\n\n                if(radioButton.isSelected())\n                    return true;\n            }\n        }\n        \n        return false;\n    }","id":96528,"modified_method":"/**\n     * Checks whether there is a selected row in the table.\n     * \n     * @return <tt>true<\/tt> if a row is selected and <tt>false<\/tt> otherwise.\n     */\n    public boolean isRowSelected()\n    {\n        return accountsTable.getSelectedRow() != -1;\n    }","commit_id":"1f9d38b8203e13253a41ad09c9655a8a8cc83591","url":"https://github.com/jitsi/jitsi"},{"original_method":"private static RequirementDto enabledRequirement(Collection<RequirementDto> requirementsForRule) {\n      return Iterables.find(requirementsForRule, new Predicate<RequirementDto>() {\n        @Override\n        public boolean apply(RequirementDto input) {\n          return input.isEnabled();\n        }\n      }, null);\n    }","id":96529,"modified_method":"private static RequirementDto enabledRequirement(Collection<RequirementDto> requirementsForRule) {\n      return Iterables.find(requirementsForRule, new Predicate<RequirementDto>() {\n        @Override\n        public boolean apply(@Nullable RequirementDto input) {\n          return input != null && input.isEnabled();\n        }\n      }, null);\n    }","commit_id":"0e1aeeb98b0458804682531ea27fe2afdf02ebfc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private ValidationMessages restoreXmlModel(String xml, @Nullable final String languageKey) {\n    checkPermission();\n\n    ValidationMessages validationMessages = ValidationMessages.create();\n    Date updateDate = new Date(system2.now());\n    SqlSession session = mybatis.openSession();\n    try {\n      List<CharacteristicDto> allCharacteristicDtos = restoreCharacteristics(characteristicsXMLImporter.importXML(xml), updateDate, session);\n      restoreRules(allCharacteristicDtos, rules(languageKey, session), rulesXMLImporter.importXML(xml, validationMessages), validationMessages, updateDate, session);\n\n      session.commit();\n    } catch (IllegalArgumentException e) {\n      validationMessages.addErrorText(e.getMessage());\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n    return validationMessages;\n  }","id":96530,"modified_method":"private ValidationMessages restoreXmlModel(String xml, @Nullable final String languageKey) {\n    checkPermission();\n\n    ValidationMessages validationMessages = ValidationMessages.create();\n    Date updateDate = new Date(system2.now());\n    SqlSession session = mybatis.openSession();\n    try {\n      List<CharacteristicDto> allCharacteristicDtos = restoreCharacteristics(characteristicsXMLImporter.importXML(xml), updateDate, session);\n      restoreRules(allCharacteristicDtos, rules(languageKey, session), rulesXMLImporter.importXML(xml, validationMessages), validationMessages, updateDate, session);\n\n      session.commit();\n    } catch (IllegalArgumentException e) {\n      LOG.debug(\"Error when restoring the model\", e);\n      validationMessages.addErrorText(e.getMessage());\n    } finally {\n      MyBatis.closeQuietly(session);\n    }\n    return validationMessages;\n  }","commit_id":"0e1aeeb98b0458804682531ea27fe2afdf02ebfc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@CheckForNull\n  private static RuleDebt toRuleDebt(RuleDto rule, DebtModel debtModel) {\n    RuleDebt ruleDebt = new RuleDebt().setRuleKey(RuleKey.of(rule.getRepositoryKey(), rule.getRuleKey()));\n    Integer effectiveSubCharacteristicId = rule.getSubCharacteristicId() != null ? rule.getSubCharacteristicId() : rule.getDefaultSubCharacteristicId();\n    DebtCharacteristic subCharacteristic = (effectiveSubCharacteristicId != null && !RuleDto.DISABLED_CHARACTERISTIC_ID.equals(effectiveSubCharacteristicId)) ?\n      debtModel.characteristicById(effectiveSubCharacteristicId) : null;\n    if (subCharacteristic != null) {\n      ruleDebt.setSubCharacteristicKey(subCharacteristic.key());\n      if (rule.getRemediationFunction() != null) {\n        ruleDebt.setFunction(rule.getRemediationFunction());\n        ruleDebt.setCoefficient(rule.getRemediationCoefficient());\n        ruleDebt.setOffset(rule.getRemediationOffset());\n        return ruleDebt;\n      } else if (rule.getDefaultRemediationFunction() != null) {\n        ruleDebt.setFunction(rule.getDefaultRemediationFunction());\n        ruleDebt.setCoefficient(rule.getDefaultRemediationCoefficient());\n        ruleDebt.setOffset(rule.getDefaultRemediationOffset());\n        return ruleDebt;\n      }\n    }\n    return null;\n  }","id":96531,"modified_method":"@CheckForNull\n  private static RuleDebt toRuleDebt(RuleDto rule, DebtModel debtModel) {\n    RuleDebt ruleDebt = new RuleDebt().setRuleKey(RuleKey.of(rule.getRepositoryKey(), rule.getRuleKey()));\n    Integer effectiveSubCharacteristicId = rule.getSubCharacteristicId() != null ? rule.getSubCharacteristicId() : rule.getDefaultSubCharacteristicId();\n    DebtCharacteristic subCharacteristic = (effectiveSubCharacteristicId != null && !RuleDto.DISABLED_CHARACTERISTIC_ID.equals(effectiveSubCharacteristicId)) ?\n      debtModel.characteristicById(effectiveSubCharacteristicId) : null;\n    if (subCharacteristic != null) {\n      ruleDebt.setSubCharacteristicKey(subCharacteristic.key());\n\n      String overriddenFunction = rule.getRemediationFunction();\n      String defaultFunction = rule.getDefaultRemediationFunction();\n      if (overriddenFunction != null) {\n        ruleDebt.setFunction(overriddenFunction);\n        ruleDebt.setCoefficient(rule.getRemediationCoefficient());\n        ruleDebt.setOffset(rule.getRemediationOffset());\n        return ruleDebt;\n      } else if (defaultFunction != null) {\n        ruleDebt.setFunction(defaultFunction);\n        ruleDebt.setCoefficient(rule.getDefaultRemediationCoefficient());\n        ruleDebt.setOffset(rule.getDefaultRemediationOffset());\n        return ruleDebt;\n      }\n    }\n    return null;\n  }","commit_id":"0e1aeeb98b0458804682531ea27fe2afdf02ebfc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public void reindex(RuleDto rule, SqlSession session) {\n    try {\n      Integer ruleId = rule.getId();\n      Integer effectiveSubCharacteristicId = rule.getSubCharacteristicId() != null ? rule.getSubCharacteristicId() : rule.getDefaultSubCharacteristicId();\n      CharacteristicDto subCharacteristic = effectiveSubCharacteristicId != null ? characteristicDao.selectById(effectiveSubCharacteristicId, session) : null;\n      // The parent id of the sub-characteristic should never be null\n      CharacteristicDto characteristic = (subCharacteristic != null && subCharacteristic.getParentId() != null) ?\n        characteristicDao.selectById(subCharacteristic.getParentId(), session) : null;\n      searchIndex.putSynchronous(INDEX_RULES, TYPE_RULE, Long.toString(ruleId), ruleDocument(rule,\n        characteristic, subCharacteristic,\n        ruleDao.selectParametersByRuleIds(newArrayList(ruleId), session),\n        ruleDao.selectTagsByRuleIds(newArrayList(ruleId), session)));\n    } catch (IOException ioexception) {\n      throw new IllegalStateException(\"Unable to index rule with id=\" + rule.getId(), ioexception);\n    }\n  }","id":96532,"modified_method":"public void reindex(RuleDto rule, SqlSession session) {\n    try {\n      Integer ruleId = rule.getId();\n      Integer effectiveSubCharacteristicId = rule.getSubCharacteristicId() != null ? rule.getSubCharacteristicId() : rule.getDefaultSubCharacteristicId();\n      CharacteristicDto subCharacteristic = effectiveSubCharacteristicId != null ? characteristicDao.selectById(effectiveSubCharacteristicId, session) : null;\n      // The parent id of the sub-characteristic should never be null\n      Integer parentId = subCharacteristic!= null ? subCharacteristic.getParentId() : null;\n      CharacteristicDto characteristic = (subCharacteristic != null && parentId != null) ?\n        characteristicDao.selectById(parentId, session) : null;\n      searchIndex.putSynchronous(INDEX_RULES, TYPE_RULE, Long.toString(ruleId), ruleDocument(rule,\n        characteristic, subCharacteristic,\n        ruleDao.selectParametersByRuleIds(newArrayList(ruleId), session),\n        ruleDao.selectTagsByRuleIds(newArrayList(ruleId), session)));\n    } catch (IOException ioexception) {\n      throw new IllegalStateException(\"Unable to index rule with id=\" + rule.getId(), ioexception);\n    }\n  }","commit_id":"0e1aeeb98b0458804682531ea27fe2afdf02ebfc","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"public static List<Configurable> buildConfigurablesList(final ConfigurableEP<Configurable>[] extensions,\n                                                          final Configurable[] components,\n                                                          @Nullable ConfigurableFilter filter,\n                                                          ExtensionPointName<ConfigurableEP<Configurable>> configurablesExtensionPoint) {\n    List<Configurable> result = new ArrayList<Configurable>();\n    Map<String, ConfigurableWrapper> idToConfigurable = new HashMap<String, ConfigurableWrapper>();\n    List<ConfigurableWrapper> orphans = new ArrayList<ConfigurableWrapper>();\n    for (ConfigurableEP<Configurable> ep : extensions) {\n      final Configurable configurable = ConfigurableWrapper.wrapConfigurable(ep);\n      if (configurable instanceof ConfigurableWrapper) {\n        ConfigurableWrapper wrapper = (ConfigurableWrapper)configurable;\n        if (wrapper.getParentId() != null) {\n          orphans.add(wrapper);\n        } else {\n          idToConfigurable.put(wrapper.getId(), wrapper);\n        }\n      }\n      else {\n//        dumpConfigurable(configurablesExtensionPoint, ep, configurable);\n        ContainerUtil.addIfNotNull(configurable, result);\n      }\n    }\n    ContainerUtil.addAll(result, components);\n\n    for (ConfigurableWrapper orphan : orphans) {\n      String parentId = orphan.getParentId();\n      ConfigurableWrapper parent = idToConfigurable.get(parentId);\n      LOG.assertTrue(parent != null, \"Can't find parent for \" + parentId + \" (\" + orphan + \")\");\n      idToConfigurable.put(parentId, parent.addChild(orphan));\n    }\n\n    ContainerUtil.addAll(result, idToConfigurable.values());\n\n    final ListIterator<Configurable> iterator = result.listIterator();\n    while (iterator.hasNext()) {\n      Configurable each = iterator.next();\n      if (each instanceof Configurable.Assistant\n          || each instanceof OptionalConfigurable && !((OptionalConfigurable) each).needDisplay()\n          || filter != null && !filter.isIncluded(each)) {\n        iterator.remove();\n      }\n    }\n\n    return result;\n  }","id":96533,"modified_method":"public static List<Configurable> buildConfigurablesList(final ConfigurableEP<Configurable>[] extensions,\n                                                          final Configurable[] components,\n                                                          @Nullable ConfigurableFilter filter,\n                                                          ExtensionPointName<ConfigurableEP<Configurable>> configurablesExtensionPoint) {\n    final List<Configurable> result = new ArrayList<Configurable>();\n    ContainerUtil.addAll(result, components);\n    final Map<String, ConfigurableWrapper> idToConfigurable = new HashMap<String, ConfigurableWrapper>();\n    for (ConfigurableEP<Configurable> ep : extensions) {\n      final Configurable configurable = ConfigurableWrapper.wrapConfigurable(ep);\n      if (configurable instanceof ConfigurableWrapper) {\n        final ConfigurableWrapper wrapper = (ConfigurableWrapper)configurable;\n        idToConfigurable.put(wrapper.getId(), wrapper);\n      }\n      else {\n//        dumpConfigurable(configurablesExtensionPoint, ep, configurable);\n        ContainerUtil.addIfNotNull(configurable, result);\n      }\n    }\n    //modify configurables (append children)\n    for (final String id : idToConfigurable.keySet()) {\n      final ConfigurableWrapper wrapper = idToConfigurable.get(id);\n      final String parentId = wrapper.getParentId();\n      if (parentId != null) {\n        final ConfigurableWrapper parent = idToConfigurable.get(parentId);\n        LOG.assertTrue(parent != null, \"Can't find parent for \" + parentId + \" (\" + wrapper + \")\");\n        idToConfigurable.put(parentId, parent.addChild(wrapper));\n      }\n    }\n    //leave only roots (i.e. configurables without parents)\n    for (final Iterator<String> iterator = idToConfigurable.keySet().iterator(); iterator.hasNext(); ) {\n      final String key = iterator.next();\n      final ConfigurableWrapper wrapper = idToConfigurable.get(key);\n      if (wrapper.getParentId() != null) {\n        iterator.remove();\n      }\n    }\n    ContainerUtil.addAll(result, idToConfigurable.values());\n\n    final ListIterator<Configurable> iterator = result.listIterator();\n    while (iterator.hasNext()) {\n      Configurable each = iterator.next();\n      if (each instanceof Configurable.Assistant\n          || each instanceof OptionalConfigurable && !((OptionalConfigurable) each).needDisplay()\n          || filter != null && !filter.isIncluded(each)) {\n        iterator.remove();\n      }\n    }\n\n    return result;\n  }","commit_id":"f505d090b0daeb9e7e2c3c741b0f8c5426262a5e","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public Object run() {\n    try {\n      //Get the Document's source from ctx\n      Map<String, Object> source = XContentMapValues.nodeMapValue(ctx.get(\"_source\"), \"source from context\");\n\n      //Get the Object for list update\n      Object fieldValue = source.get(field);\n\n      if (fieldValue == null && value != null) {\n        // 0. The field does not exist (this is a upsert then)\n        source.put(field, value);\n      } else if (!XContentMapValues.isArray(fieldValue) && value != null) {\n        // 1. The field is not yet a list\n        Map currentFieldValue = XContentMapValues.nodeMapValue(fieldValue, \"current FieldValue\");\n        if (XContentMapValues.nodeStringValue(currentFieldValue.get(idField), null).equals(idValue)) {\n          source.put(field, value);\n        } else {\n          source.put(field, ImmutableSet.of(fieldValue, value));\n        }\n      } else {\n        // 3. field is a list\n        Collection items = ((Collection) fieldValue);\n        Object target = null;\n        for (Object item : items) {\n          Map<String, Object> fields = (Map<String, Object>) item;\n          String itemIdValue = XContentMapValues.nodeStringValue(fields.get(idField), null);\n          if (itemIdValue != null && itemIdValue.equals(idValue)) {\n            target = item;\n            break;\n          }\n        }\n        if (target != null) {\n          items.remove(target);\n        }\n\n        //Supporting the update by NULL = deletion case\n        if (value != null) {\n          items.add(value);\n        }\n        source.put(field, items);\n      }\n    } catch (Exception e) {\n      throw new IllegalStateException(\"failed to execute listUpdate script\", e);\n    }\n    return null;\n\n  }","id":96534,"modified_method":"@Override\n  public Object run() {\n    try {\n      //Get the Document's source from ctx\n      Map<String, Object> source = XContentMapValues.nodeMapValue(ctx.get(\"_source\"), \"source from context\");\n\n      //Get the Object for list update\n      Object fieldValue = source.get(field);\n\n      if (fieldValue == null && value != null) {\n        // 0. The field does not exist (this is a upsert then)\n        source.put(field, value);\n      } else if (!XContentMapValues.isArray(fieldValue) && value != null) {\n        // 1. The field is not yet a list\n        Map currentFieldValue = XContentMapValues.nodeMapValue(fieldValue, \"current FieldValue\");\n        if (XContentMapValues.nodeStringValue(currentFieldValue.get(idField), null).equals(idValue)) {\n          source.put(field, value);\n        } else {\n          source.put(field, ImmutableSet.of(fieldValue, value));\n        }\n      } else {\n        // 3. field is a list\n        Collection items = (Collection) fieldValue;\n        Object target = null;\n        for (Object item : items) {\n          Map<String, Object> fields = (Map<String, Object>) item;\n          String itemIdValue = XContentMapValues.nodeStringValue(fields.get(idField), null);\n          if (itemIdValue != null && itemIdValue.equals(idValue)) {\n            target = item;\n            break;\n          }\n        }\n        if (target != null) {\n          items.remove(target);\n        }\n\n        //Supporting the update by NULL = deletion case\n        if (value != null) {\n          items.add(value);\n        }\n        source.put(field, items);\n      }\n    } catch (Exception e) {\n      throw new IllegalStateException(\"failed to execute listUpdate script\", e);\n    }\n    return null;\n\n  }","commit_id":"c067855053a2ed2f28326627ffd0718af3d61817","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"@Override\n  public List<UpdateRequest> normalize(RuleDto rule) {\n\n    DbSession session = db.openSession(false);\n    try {\n\n      /** Update Fields */\n      Map<String, Object> update = new HashMap<String, Object>();\n\n      update.put(RuleField.ID.field(), rule.getId());\n\n      update.put(RuleField.KEY.field(), rule.getKey().toString());\n      update.put(RuleField._KEY.field(), ImmutableList.of(rule.getKey().repository(), rule.getKey().rule()));\n\n      update.put(RuleField.REPOSITORY.field(), rule.getRepositoryKey());\n      update.put(RuleField.RULE_KEY.field(), rule.getRuleKey());\n      update.put(RuleField.NAME.field(), rule.getName());\n      update.put(RuleField.CREATED_AT.field(), rule.getCreatedAt());\n      update.put(RuleField.UPDATED_AT.field(), rule.getUpdatedAt());\n      update.put(RuleField.HTML_DESCRIPTION.field(), rule.getDescription());\n      update.put(RuleField.FIX_DESCRIPTION.field(), rule.getEffortToFixDescription());\n      update.put(RuleField.SEVERITY.field(), rule.getSeverityString());\n      update.put(RuleField.STATUS.field(), rule.getStatus().name());\n      update.put(RuleField.LANGUAGE.field(), rule.getLanguage());\n      update.put(RuleField.INTERNAL_KEY.field(), rule.getConfigKey());\n      update.put(RuleField.IS_TEMPLATE.field(), rule.isTemplate());\n\n      update.put(RuleField.NOTE.field(), rule.getNoteData());\n      update.put(RuleField.NOTE_LOGIN.field(), rule.getNoteUserLogin());\n      update.put(RuleField.NOTE_CREATED_AT.field(), rule.getNoteCreatedAt());\n      update.put(RuleField.NOTE_UPDATED_AT.field(), rule.getNoteUpdatedAt());\n\n      //TODO Legacy PARENT_ID in DTO should be parent_key\n      Integer templateId = rule.getTemplateId();\n      if (templateId != null) {\n        RuleDto templateRule = db.ruleDao().getById(session, templateId);\n        update.put(RuleField.TEMPLATE_KEY.field(), templateRule.getKey().toString());\n      } else {\n        update.put(RuleField.TEMPLATE_KEY.field(), null);\n      }\n\n      //TODO Legacy ID in DTO should be Key\n      update.put(RuleField.CHARACTERISTIC.field(), null);\n      update.put(RuleField.SUB_CHARACTERISTIC.field(), null);\n      update.put(RuleField.DEFAULT_CHARACTERISTIC.field(), null);\n      update.put(RuleField.DEFAULT_SUB_CHARACTERISTIC.field(), null);\n\n      update.put(RuleField.DEFAULT_CHARACTERISTIC.field(), null);\n      update.put(RuleField.DEFAULT_SUB_CHARACTERISTIC.field(), null);\n      if (rule.getDefaultSubCharacteristicId() != null) {\n        CharacteristicDto characteristic, subCharacteristic = null;\n        subCharacteristic = db.debtCharacteristicDao().selectById(rule.getDefaultSubCharacteristicId(), session);\n        if (subCharacteristic != null) {\n          characteristic = db.debtCharacteristicDao().selectById(subCharacteristic.getParentId());\n          update.put(RuleField.DEFAULT_CHARACTERISTIC.field(), characteristic.getKey());\n          update.put(RuleField.DEFAULT_SUB_CHARACTERISTIC.field(), subCharacteristic.getKey());\n        }\n      }\n\n      if (rule.getSubCharacteristicId() != null) {\n        if (rule.getSubCharacteristicId() == -1) {\n          update.put(RuleField.CHARACTERISTIC.field(), DebtCharacteristic.NONE);\n          update.put(RuleField.SUB_CHARACTERISTIC.field(), DebtCharacteristic.NONE);\n        } else {\n          CharacteristicDto characteristic, subCharacteristic = null;\n          subCharacteristic = db.debtCharacteristicDao().selectById(rule.getSubCharacteristicId(), session);\n          characteristic = db.debtCharacteristicDao().selectById(subCharacteristic.getParentId());\n          update.put(RuleField.CHARACTERISTIC.field(), characteristic.getKey());\n          update.put(RuleField.SUB_CHARACTERISTIC.field(), subCharacteristic.getKey());\n        }\n      } else {\n        update.put(RuleField.CHARACTERISTIC.field(), null);\n        update.put(RuleField.SUB_CHARACTERISTIC.field(), null);\n      }\n\n\n      if (rule.getDefaultRemediationFunction() != null) {\n        update.put(RuleField.DEFAULT_DEBT_FUNCTION_TYPE.field(), rule.getDefaultRemediationFunction());\n        update.put(RuleField.DEFAULT_DEBT_FUNCTION_COEFFICIENT.field(), rule.getDefaultRemediationCoefficient());\n        update.put(RuleField.DEFAULT_DEBT_FUNCTION_OFFSET.field(), rule.getDefaultRemediationOffset());\n      } else {\n        update.put(RuleField.DEFAULT_DEBT_FUNCTION_TYPE.field(), null);\n        update.put(RuleField.DEFAULT_DEBT_FUNCTION_COEFFICIENT.field(), null);\n        update.put(RuleField.DEFAULT_DEBT_FUNCTION_OFFSET.field(), null);\n      }\n\n      if (rule.getRemediationFunction() != null) {\n        update.put(RuleField.DEBT_FUNCTION_TYPE.field(), rule.getRemediationFunction());\n        update.put(RuleField.DEBT_FUNCTION_COEFFICIENT.field(), rule.getRemediationCoefficient());\n        update.put(RuleField.DEBT_FUNCTION_OFFSET.field(), rule.getRemediationOffset());\n      } else {\n        update.put(RuleField.DEBT_FUNCTION_TYPE.field(), null);\n        update.put(RuleField.DEBT_FUNCTION_COEFFICIENT.field(), null);\n        update.put(RuleField.DEBT_FUNCTION_OFFSET.field(), null);\n      }\n\n\n      update.put(RuleField.TAGS.field(), rule.getTags());\n      update.put(RuleField.SYSTEM_TAGS.field(), rule.getSystemTags());\n      update.put(RuleField._TAGS.field(), Sets.union(rule.getSystemTags(), rule.getTags()));\n\n\n      /** Upsert elements */\n      Map<String, Object> upsert = new HashMap<String, Object>(update);\n      upsert.put(RuleField.KEY.field(), rule.getKey().toString());\n      upsert.put(RuleField.PARAMS.field(), new ArrayList<String>());\n\n\n      /** Creating updateRequest */\n      return ImmutableList.of(new UpdateRequest()\n        .replicationType(ReplicationType.ASYNC)\n        .consistencyLevel(WriteConsistencyLevel.QUORUM)\n        .id(rule.getKey().toString())\n        .doc(update)\n        .upsert(upsert));\n\n    } finally {\n      session.close();\n    }\n  }","id":96535,"modified_method":"@Override\n  public List<UpdateRequest> normalize(RuleDto rule) {\n\n    DbSession session = db.openSession(false);\n    try {\n\n      /** Update Fields */\n      Map<String, Object> update = new HashMap<String, Object>();\n\n      update.put(RuleField.ID.field(), rule.getId());\n\n      update.put(RuleField.KEY.field(), rule.getKey().toString());\n      update.put(RuleField._KEY.field(), ImmutableList.of(rule.getKey().repository(), rule.getKey().rule()));\n\n      update.put(RuleField.REPOSITORY.field(), rule.getRepositoryKey());\n      update.put(RuleField.RULE_KEY.field(), rule.getRuleKey());\n      update.put(RuleField.NAME.field(), rule.getName());\n      update.put(RuleField.CREATED_AT.field(), rule.getCreatedAt());\n      update.put(RuleField.UPDATED_AT.field(), rule.getUpdatedAt());\n      update.put(RuleField.HTML_DESCRIPTION.field(), rule.getDescription());\n      update.put(RuleField.FIX_DESCRIPTION.field(), rule.getEffortToFixDescription());\n      update.put(RuleField.SEVERITY.field(), rule.getSeverityString());\n      update.put(RuleField.STATUS.field(), rule.getStatus().name());\n      update.put(RuleField.LANGUAGE.field(), rule.getLanguage());\n      update.put(RuleField.INTERNAL_KEY.field(), rule.getConfigKey());\n      update.put(RuleField.IS_TEMPLATE.field(), rule.isTemplate());\n\n      update.put(RuleField.NOTE.field(), rule.getNoteData());\n      update.put(RuleField.NOTE_LOGIN.field(), rule.getNoteUserLogin());\n      update.put(RuleField.NOTE_CREATED_AT.field(), rule.getNoteCreatedAt());\n      update.put(RuleField.NOTE_UPDATED_AT.field(), rule.getNoteUpdatedAt());\n\n      //TODO Legacy PARENT_ID in DTO should be parent_key\n      Integer templateId = rule.getTemplateId();\n      if (templateId != null) {\n        RuleDto templateRule = db.ruleDao().getById(session, templateId);\n        RuleKey templateKey = templateRule.getKey();\n        update.put(RuleField.TEMPLATE_KEY.field(), templateKey != null ? templateKey.toString() : null);\n      } else {\n        update.put(RuleField.TEMPLATE_KEY.field(), null);\n      }\n\n      //TODO Legacy ID in DTO should be Key\n      update.put(RuleField.CHARACTERISTIC.field(), null);\n      update.put(RuleField.SUB_CHARACTERISTIC.field(), null);\n      update.put(RuleField.DEFAULT_CHARACTERISTIC.field(), null);\n      update.put(RuleField.DEFAULT_SUB_CHARACTERISTIC.field(), null);\n\n      update.put(RuleField.DEFAULT_CHARACTERISTIC.field(), null);\n      update.put(RuleField.DEFAULT_SUB_CHARACTERISTIC.field(), null);\n\n      Integer defaultSubCharacteristicId = rule.getDefaultSubCharacteristicId();\n      if (defaultSubCharacteristicId != null) {\n        CharacteristicDto characteristic, subCharacteristic = null;\n        subCharacteristic = db.debtCharacteristicDao().selectById(defaultSubCharacteristicId, session);\n\n        if (subCharacteristic != null) {\n          Integer characteristicId = subCharacteristic.getParentId();\n          characteristic = db.debtCharacteristicDao().selectById(characteristicId);\n          if (characteristic != null) {\n            update.put(RuleField.DEFAULT_CHARACTERISTIC.field(), characteristic.getKey());\n            update.put(RuleField.DEFAULT_SUB_CHARACTERISTIC.field(), subCharacteristic.getKey());\n          }\n        }\n      }\n\n      Integer subCharacteristicId = rule.getSubCharacteristicId();\n      if (subCharacteristicId != null) {\n        if (subCharacteristicId == -1) {\n          update.put(RuleField.CHARACTERISTIC.field(), DebtCharacteristic.NONE);\n          update.put(RuleField.SUB_CHARACTERISTIC.field(), DebtCharacteristic.NONE);\n        } else {\n          CharacteristicDto characteristic, subCharacteristic = null;\n          subCharacteristic = db.debtCharacteristicDao().selectById(subCharacteristicId, session);\n          Integer characteristicId = subCharacteristic.getParentId();\n          characteristic = db.debtCharacteristicDao().selectById(characteristicId);\n          if (characteristic != null) {\n            update.put(RuleField.CHARACTERISTIC.field(), characteristic.getKey());\n            update.put(RuleField.SUB_CHARACTERISTIC.field(), subCharacteristic.getKey());\n          }\n        }\n      } else {\n        update.put(RuleField.CHARACTERISTIC.field(), null);\n        update.put(RuleField.SUB_CHARACTERISTIC.field(), null);\n      }\n\n\n      if (rule.getDefaultRemediationFunction() != null) {\n        update.put(RuleField.DEFAULT_DEBT_FUNCTION_TYPE.field(), rule.getDefaultRemediationFunction());\n        update.put(RuleField.DEFAULT_DEBT_FUNCTION_COEFFICIENT.field(), rule.getDefaultRemediationCoefficient());\n        update.put(RuleField.DEFAULT_DEBT_FUNCTION_OFFSET.field(), rule.getDefaultRemediationOffset());\n      } else {\n        update.put(RuleField.DEFAULT_DEBT_FUNCTION_TYPE.field(), null);\n        update.put(RuleField.DEFAULT_DEBT_FUNCTION_COEFFICIENT.field(), null);\n        update.put(RuleField.DEFAULT_DEBT_FUNCTION_OFFSET.field(), null);\n      }\n\n      if (rule.getRemediationFunction() != null) {\n        update.put(RuleField.DEBT_FUNCTION_TYPE.field(), rule.getRemediationFunction());\n        update.put(RuleField.DEBT_FUNCTION_COEFFICIENT.field(), rule.getRemediationCoefficient());\n        update.put(RuleField.DEBT_FUNCTION_OFFSET.field(), rule.getRemediationOffset());\n      } else {\n        update.put(RuleField.DEBT_FUNCTION_TYPE.field(), null);\n        update.put(RuleField.DEBT_FUNCTION_COEFFICIENT.field(), null);\n        update.put(RuleField.DEBT_FUNCTION_OFFSET.field(), null);\n      }\n\n\n      update.put(RuleField.TAGS.field(), rule.getTags());\n      update.put(RuleField.SYSTEM_TAGS.field(), rule.getSystemTags());\n      update.put(RuleField._TAGS.field(), Sets.union(rule.getSystemTags(), rule.getTags()));\n\n\n      /** Upsert elements */\n      Map<String, Object> upsert = new HashMap<String, Object>(update);\n      upsert.put(RuleField.KEY.field(), rule.getKey().toString());\n      upsert.put(RuleField.PARAMS.field(), new ArrayList<String>());\n\n\n      /** Creating updateRequest */\n      return ImmutableList.of(new UpdateRequest()\n        .replicationType(ReplicationType.ASYNC)\n        .consistencyLevel(WriteConsistencyLevel.QUORUM)\n        .id(rule.getKey().toString())\n        .doc(update)\n        .upsert(upsert));\n\n    } finally {\n      session.close();\n    }\n  }","commit_id":"c067855053a2ed2f28326627ffd0718af3d61817","url":"https://github.com/SonarSource/sonarqube"},{"original_method":"private static int getAttemptId(@NotNull final Project project, @NotNull Task task, @NotNull final String attempts) throws IOException {\n    final StepicWrappers.AttemptToPostWrapper attemptWrapper = new StepicWrappers.AttemptToPostWrapper(task.getStepicId());\n\n    final HttpPost post = new HttpPost(STEPIC_API_URL + attempts);\n    post.setEntity(new StringEntity(new Gson().toJson(attemptWrapper)));\n\n    final CloseableHttpClient client = getHttpClient(project);\n    setHeaders(post, CONTENT_TYPE_APPL_JSON);\n    final CloseableHttpResponse httpResponse = client.execute(post);\n    final StepicWrappers.AttemptContainer container =\n      new Gson().fromJson(EntityUtils.toString(httpResponse.getEntity()), StepicWrappers.AttemptContainer.class);\n    return container.attempts.get(0).id;\n  }","id":96536,"modified_method":"private static int getAttemptId(@NotNull final Project project, @NotNull Task task, @NotNull final String attempts) throws IOException {\n    final StepicWrappers.AttemptToPostWrapper attemptWrapper = new StepicWrappers.AttemptToPostWrapper(task.getStepicId());\n\n    final HttpPost post = new HttpPost(STEPIC_API_URL + attempts);\n    post.setEntity(new StringEntity(new Gson().toJson(attemptWrapper)));\n\n    final CloseableHttpClient client = getHttpClient(project);\n    setHeaders(post, CONTENT_TYPE_APPL_JSON);\n    final CloseableHttpResponse httpResponse = client.execute(post);\n    final StepicWrappers.AttemptContainer container =\n      new Gson().fromJson(EntityUtils.toString(httpResponse.getEntity()), StepicWrappers.AttemptContainer.class);\n    return (container.attempts != null && !container.attempts.isEmpty()) ? container.attempts.get(0).id : -1;\n  }","commit_id":"2c958c2b57fff0351d6656add7112e3e63eacd0d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  private static Task getTaskFromStep(@NotNull String name, int lessonID, @NotNull final StepicWrappers.Step step) {\n    final Task task = new Task();\n    task.setName(name);\n    task.setStepicId(lessonID);\n    task.setText(step.text);\n    if (step.options.test != null) {\n      for (StepicWrappers.TestFileWrapper wrapper : step.options.test) {\n        task.addTestsTexts(wrapper.name, wrapper.text);\n      }\n    }\n\n    task.taskFiles = new HashMap<String, TaskFile>();      // TODO: it looks like we don't need taskFiles as map anymore\n    if (step.options.files != null) {\n      for (TaskFile taskFile : step.options.files) {\n        task.taskFiles.put(taskFile.name, taskFile);\n      }\n    }\n    else {\n      final TaskFile taskFile = new TaskFile();\n      taskFile.name = \"code\";\n      taskFile.text = \"# write your answer here \\n\";\n      task.taskFiles.put(\"code.py\", taskFile);\n    }\n    return task;\n  }","id":96537,"modified_method":"@NotNull\n  private static Task getTaskFromStep(Project project,\n                                      int lessonID,\n                                      @NotNull final StepicWrappers.Step step, @NotNull String name) {\n    final Task task = new Task();\n    task.setName(name);\n    task.setStepicId(lessonID);\n    task.setText(step.text);\n    if (step.options.samples != null) {\n      final StringBuilder builder = new StringBuilder();\n      for (List<String> sample : step.options.samples) {\n        if (sample.size() == 2) {\n          builder.append(\"<b>Sample Input:<\/b><br>\");\n          builder.append(sample.get(0));\n          builder.append(\"<br>\");\n          builder.append(\"<b>Sample Output:<\/b><br>\");\n          builder.append(sample.get(1));\n          builder.append(\"<br><br>\");\n        }\n      }\n      task.setText(task.getText() + \"<br>\" + builder.toString());\n    }\n    if (step.options.test != null) {\n      for (StepicWrappers.TestFileWrapper wrapper : step.options.test) {\n        task.addTestsTexts(wrapper.name, wrapper.text);\n      }\n    }\n    else {\n      if (step.options.samples != null) {\n        createTestFileFromSamples(project, task, step.options.samples);\n      }\n    }\n\n    task.taskFiles = new HashMap<String, TaskFile>();      // TODO: it looks like we don't need taskFiles as map anymore\n    if (step.options.files != null) {\n      for (TaskFile taskFile : step.options.files) {\n        task.taskFiles.put(taskFile.name, taskFile);\n      }\n    }\n    else {\n      final TaskFile taskFile = new TaskFile();\n      taskFile.name = \"code\";\n      taskFile.text = \"# write your answer here \\n\";\n      task.taskFiles.put(\"code.py\", taskFile);\n    }\n    return task;\n  }","commit_id":"2c958c2b57fff0351d6656add7112e3e63eacd0d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static Task getNextRecommendation(@NotNull final Project project, @NotNull Course course) {\n    try {\n      final CloseableHttpClient client = getHttpClient(project);\n      final URI uri = new URIBuilder(STEPIC_API_URL + RECOMMENDATIONS_URL)\n        .addParameter(\"course\", String.valueOf(course.getId()))\n        .build();\n      final HttpGet request = new HttpGet(uri);\n      setHeaders(request, CONTENT_TYPE_APPL_JSON);\n\n      final CloseableHttpResponse response = client.execute(request);\n      final StatusLine statusLine = response.getStatusLine();\n      final HttpEntity responseEntity = response.getEntity();\n      final String responseString = responseEntity != null ? EntityUtils.toString(responseEntity) : \"\";\n\n      if (statusLine.getStatusCode() == HttpStatus.SC_OK) {\n        Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();\n        final StepicWrappers.RecommendationWrapper recomWrapper = gson.fromJson(responseString, StepicWrappers.RecommendationWrapper.class);\n\n        if (recomWrapper.recommendations.length != 0) {\n          final StepicWrappers.Recommendation recommendation = recomWrapper.recommendations[0];\n          final String lessonId = recommendation.lesson;\n          final StepicWrappers.LessonContainer\n            lessonContainer = EduStepicConnector.getFromStepic(LESSON_URL + lessonId, StepicWrappers.LessonContainer.class);\n          final Lesson realLesson = lessonContainer.lessons.get(0);\n          course.getLessons().get(0).id = Integer.parseInt(lessonId);\n\n          for (int stepId : realLesson.steps) {\n            final StepicWrappers.Step step = EduStepicConnector.getStep(stepId);\n            if (step.name.equals(\"code\")) {\n              return getTaskFromStep(realLesson.getName(), stepId, step);\n            }\n          }\n        }\n      }\n      else {\n        throw new IOException(\"Stepic returned non 200 status code: \" + responseString);\n      }\n    }\n    catch (IOException e) {\n      LOG.warn(e.getMessage());\n    }\n    catch (URISyntaxException e) {\n      LOG.warn(e.getMessage());\n    }\n    return null;\n  }","id":96538,"modified_method":"@Nullable\n  public static Task getNextRecommendation(@NotNull final Project project, @NotNull Course course) {\n    try {\n      final CloseableHttpClient client = getHttpClient(project);\n      final URI uri = new URIBuilder(STEPIC_API_URL + RECOMMENDATIONS_URL)\n        .addParameter(\"course\", String.valueOf(course.getId()))\n        .build();\n      final HttpGet request = new HttpGet(uri);\n      setHeaders(request, CONTENT_TYPE_APPL_JSON);\n\n      final CloseableHttpResponse response = client.execute(request);\n      final StatusLine statusLine = response.getStatusLine();\n      final HttpEntity responseEntity = response.getEntity();\n      final String responseString = responseEntity != null ? EntityUtils.toString(responseEntity) : \"\";\n\n      if (statusLine.getStatusCode() == HttpStatus.SC_OK) {\n        Gson gson = new GsonBuilder().setFieldNamingPolicy(FieldNamingPolicy.LOWER_CASE_WITH_UNDERSCORES).create();\n        final StepicWrappers.RecommendationWrapper recomWrapper = gson.fromJson(responseString, StepicWrappers.RecommendationWrapper.class);\n\n        if (recomWrapper.recommendations.length != 0) {\n          final StepicWrappers.Recommendation recommendation = recomWrapper.recommendations[0];\n          final String lessonId = recommendation.lesson;\n          final StepicWrappers.LessonContainer\n            lessonContainer = EduStepicConnector.getFromStepic(LESSON_URL + lessonId, StepicWrappers.LessonContainer.class);\n          final Lesson realLesson = lessonContainer.lessons.get(0);\n          course.getLessons().get(0).id = Integer.parseInt(lessonId);\n\n          for (int stepId : realLesson.steps) {\n            final StepicWrappers.Step step = EduStepicConnector.getStep(stepId);\n            if (step.name.equals(\"code\")) {\n              return getTaskFromStep(project, stepId, step, realLesson.getName());\n            }\n          }\n\n          LOG.warn(\"Got a lesson without code part as a recommendation\");\n        }\n      }\n      else {\n        throw new IOException(\"Stepic returned non 200 status code: \" + responseString);\n      }\n    }\n    catch (IOException e) {\n      LOG.warn(e.getMessage());\n    }\n    catch (URISyntaxException e) {\n      LOG.warn(e.getMessage());\n    }\n    return null;\n  }","commit_id":"2c958c2b57fff0351d6656add7112e3e63eacd0d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static Pair<Boolean, String> checkTask(@NotNull final Project project, @NotNull final Task task) {\n    try {\n      final int attemptId = getAttemptId(project, task, ATTEMPTS_URL);\n      final Editor editor = StudyUtils.getSelectedEditor(project);\n      String language = getLanguageString(task, project);\n      if (editor != null && language != null) {\n        final StepicWrappers.SubmissionToPostWrapper submissionToPostWrapper =\n          new StepicWrappers.SubmissionToPostWrapper(String.valueOf(attemptId), \"python3\", editor.getDocument().getText());\n        final HttpPost httpPost = new HttpPost(STEPIC_API_URL + SUBMISSION_URL);\n        httpPost.setEntity(new StringEntity(new Gson().toJson(submissionToPostWrapper)));\n        final CloseableHttpClient client = getHttpClient(project);\n        setHeaders(httpPost, CONTENT_TYPE_APPL_JSON);\n        final CloseableHttpResponse execute = client.execute(httpPost);\n        StepicWrappers.ResultSubmissionWrapper wrapper =\n          new Gson().fromJson(EntityUtils.toString(execute.getEntity()), StepicWrappers.ResultSubmissionWrapper.class);\n\n        final StepicUser user = StudyTaskManager.getInstance(project).getUser();\n        if (user != null) {\n          final int id = user.getId();\n          while (wrapper.submissions.length == 1 && wrapper.submissions[0].status.equals(\"evaluation\")) {\n            TimeUnit.MILLISECONDS.sleep(500);\n            final URI submissionURI = new URIBuilder(STEPIC_API_URL + SUBMISSION_URL)\n              .addParameter(\"attempt\", String.valueOf(attemptId))\n              .addParameter(\"order\", \"desc\")\n              .addParameter(\"user\", String.valueOf(id))\n              .build();\n            final HttpGet httpGet = new HttpGet(submissionURI);\n            setHeaders(httpGet, CONTENT_TYPE_APPL_JSON);\n            final CloseableHttpResponse httpResponse = client.execute(httpGet);\n            wrapper = new Gson().fromJson(EntityUtils.toString(httpResponse.getEntity()), StepicWrappers.ResultSubmissionWrapper.class);\n          }\n          if (wrapper.submissions.length == 1) {\n            final boolean isSolved = !wrapper.submissions[0].status.equals(\"wrong\");\n            return Pair.create(isSolved, wrapper.submissions[0].hint);\n          }\n        }\n      }\n    }\n    catch (ClientProtocolException e) {\n      LOG.warn(e.getMessage());\n    }\n    catch (IOException e) {\n      LOG.warn(e.getMessage());\n    }\n    catch (URISyntaxException e) {\n      LOG.warn(e.getMessage());\n    }\n    catch (InterruptedException e) {\n      LOG.warn(e.getMessage());\n    }\n    return Pair.create(false, \"\");\n  }","id":96539,"modified_method":"@Nullable\n  public static Pair<Boolean, String> checkTask(@NotNull final Project project, @NotNull final Task task) {\n    try {\n      final int attemptId = getAttemptId(project, task, ATTEMPTS_URL);\n      if (attemptId != -1) {\n        final Editor editor = StudyUtils.getSelectedEditor(project);\n        String language = getLanguageString(task, project);\n        if (editor != null && language != null) {\n          final StepicWrappers.SubmissionToPostWrapper submissionToPostWrapper =\n            new StepicWrappers.SubmissionToPostWrapper(String.valueOf(attemptId), language, editor.getDocument().getText());\n          final HttpPost httpPost = new HttpPost(STEPIC_API_URL + SUBMISSION_URL);\n          httpPost.setEntity(new StringEntity(new Gson().toJson(submissionToPostWrapper)));\n          final CloseableHttpClient client = getHttpClient(project);\n          setHeaders(httpPost, CONTENT_TYPE_APPL_JSON);\n          final CloseableHttpResponse execute = client.execute(httpPost);\n          StepicWrappers.ResultSubmissionWrapper wrapper =\n            new Gson().fromJson(EntityUtils.toString(execute.getEntity()), StepicWrappers.ResultSubmissionWrapper.class);\n\n          final StepicUser user = StudyTaskManager.getInstance(project).getUser();\n          if (user != null) {\n            final int id = user.getId();\n            while (wrapper.submissions.length == 1 && wrapper.submissions[0].status.equals(\"evaluation\")) {\n              TimeUnit.MILLISECONDS.sleep(500);\n              final URI submissionURI = new URIBuilder(STEPIC_API_URL + SUBMISSION_URL)\n                .addParameter(\"attempt\", String.valueOf(attemptId))\n                .addParameter(\"order\", \"desc\")\n                .addParameter(\"user\", String.valueOf(id))\n                .build();\n              final HttpGet httpGet = new HttpGet(submissionURI);\n              setHeaders(httpGet, CONTENT_TYPE_APPL_JSON);\n              final CloseableHttpResponse httpResponse = client.execute(httpGet);\n              wrapper = new Gson().fromJson(EntityUtils.toString(httpResponse.getEntity()), StepicWrappers.ResultSubmissionWrapper.class);\n            }\n            if (wrapper.submissions.length == 1) {\n              final boolean isSolved = !wrapper.submissions[0].status.equals(\"wrong\");\n              return Pair.create(isSolved, wrapper.submissions[0].hint);\n            }\n          }\n        }\n      }\n    }\n    catch (ClientProtocolException e) {\n      LOG.warn(e.getMessage());\n    }\n    catch (IOException e) {\n      LOG.warn(e.getMessage());\n    }\n    catch (URISyntaxException e) {\n      LOG.warn(e.getMessage());\n    }\n    catch (InterruptedException e) {\n      LOG.warn(e.getMessage());\n    }\n    return Pair.create(false, \"\");\n  }","commit_id":"2c958c2b57fff0351d6656add7112e3e63eacd0d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static String getLanguageString(@NotNull Task task, @NotNull Project project) {\n    final Sdk sdk = StudyUtils.findSdk(task, project);\n    if (sdk != null) {\n      if (sdk.getVersionString() != null && sdk.getVersionString().startsWith(\"3\")) {\n        return \"python3\";\n      }\n      else {\n        return \"python2\";\n      }\n    }\n    else {\n      StudyUtils.showNoSdkNotification(task, project);\n    }\n    return null;\n  }","id":96540,"modified_method":"@Nullable\n  private static String getLanguageString(@NotNull Task task, @NotNull Project project) {\n    final Sdk sdk = StudyUtils.findSdk(task, project);\n    if (sdk != null) {\n      final String versionString = sdk.getVersionString();\n      if (versionString != null ) {\n        final List<String> versionStringParts = StringUtil.split(versionString, \" \");\n        if (versionStringParts.size() == 2) {\n          return versionStringParts.get(1).startsWith(\"2\") ? PYTHON2 : PYTHON3;\n        }\n      }\n    }\n    else {\n      StudyUtils.showNoSdkNotification(task, project);\n    }\n    return null;\n  }","commit_id":"2c958c2b57fff0351d6656add7112e3e63eacd0d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  private StudyCheckTask getCheckTask(@NotNull final Project project,\n                                      final StudyState studyState,\n                                      final StudyTestRunner testRunner,\n                                      final Process testProcess,\n                                      final String commandLine) {\n    return new StudyCheckTask(project, studyState, myCheckInProgress, testProcess, commandLine) {\n            @Override\n            protected void onTaskFailed(String message) {\n              ApplicationManager.getApplication().invokeLater(() -> {\n                if (myTaskDir == null) return;\n                myTaskManger.setStatus(myTask, StudyStatus.Failed);\n                for (Map.Entry<String, TaskFile> entry : myTask.getTaskFiles().entrySet()) {\n                  final String name = entry.getKey();\n                  final TaskFile taskFile = entry.getValue();\n                  if (taskFile.getAnswerPlaceholders().size() < 2) {\n                    myTaskManger.setStatus(taskFile, StudyStatus.Failed);\n                    continue;\n                  }\n                  CommandProcessor.getInstance().runUndoTransparentAction(() -> ApplicationManager.getApplication().runWriteAction(() -> {\n                    StudyCheckUtils.runSmartTestProcess(myTaskDir, testRunner, name, taskFile, project);\n                  }));\n                }\n                StudyCheckUtils.showTestResultPopUp(message, MessageType.ERROR.getPopupBackground(), project);\n                StudyCheckUtils.navigateToFailedPlaceholder(myStudyState, myTask, myTaskDir, project);\n              });\n            }\n          };\n  }","id":96541,"modified_method":"@NotNull\n  private StudyCheckTask getCheckTask(@NotNull final Project project,\n                                      final StudyState studyState,\n                                      final StudyTestRunner testRunner,\n                                      final Process testProcess,\n                                      final String commandLine) {\n    return new StudyCheckTask(project, studyState, myCheckInProgress, testProcess, commandLine) {\n      @Override\n      protected void onTaskFailed(String message) {\n        ApplicationManager.getApplication().invokeLater(() -> {\n          if (myTaskDir == null) return;\n          myTaskManger.setStatus(myTask, StudyStatus.Failed);\n          for (Map.Entry<String, TaskFile> entry : myTask.getTaskFiles().entrySet()) {\n            final String name = entry.getKey();\n            final TaskFile taskFile = entry.getValue();\n            if (taskFile.getAnswerPlaceholders().size() < 2) {\n              myTaskManger.setStatus(taskFile, StudyStatus.Failed);\n              continue;\n            }\n            CommandProcessor.getInstance().runUndoTransparentAction(() -> ApplicationManager.getApplication().runWriteAction(() -> {\n              StudyCheckUtils.runSmartTestProcess(myTaskDir, testRunner, name, taskFile, project);\n            }));\n          }\n          final StudyToolWindow toolWindow = StudyUtils.getStudyToolWindow(project);\n          if (toolWindow != null) {\n            StudyCheckUtils.showTestResults(project, message);\n            StudyCheckUtils.navigateToFailedPlaceholder(myStudyState, myTask, myTaskDir, project);\n          }\n        });\n      }\n    };\n  }","commit_id":"2c958c2b57fff0351d6656add7112e3e63eacd0d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void check(@NotNull Project project) {\n    ApplicationManager.getApplication().runWriteAction(() -> {\n      CommandProcessor.getInstance().runUndoTransparentAction(() -> {\n        final StudyEditor selectedEditor = StudyUtils.getSelectedStudyEditor(project);\n        if (selectedEditor == null) return;\n        final StudyState studyState = new StudyState(selectedEditor);\n        if (!studyState.isValid()) {\n          LOG.info(\"StudyCheckAction was invoked outside study editor\");\n          return;\n        }\n        if (StudyCheckUtils.hasBackgroundProcesses(project)) return;\n\n\n        if (!runTask(project)) return;\n\n        final Task task = studyState.getTask();\n        final VirtualFile taskDir = studyState.getTaskDir();\n        StudyCheckUtils.flushWindows(task, taskDir);\n\n\n        ApplicationManager.getApplication().invokeLater(\n          () -> IdeFocusManager.getInstance(project).requestFocus(studyState.getEditor().getComponent(), true));\n\n        final StudyTestRunner testRunner = StudyUtils.getTestRunner(task, taskDir);\n        Process testProcess = null;\n        String commandLine = \"\";\n        try {\n          final VirtualFile executablePath = getTaskVirtualFile(studyState, task, taskDir);\n          if (executablePath != null) {\n            commandLine = executablePath.getPath();\n            testProcess = testRunner.createCheckProcess(project, commandLine);\n          }\n        }\n        catch (ExecutionException e) {\n          LOG.error(e);\n        }\n        if (testProcess == null) {\n          return;\n        }\n        myCheckInProgress.set(true);\n        StudyCheckTask checkTask = getCheckTask(project, studyState, testRunner, testProcess, commandLine);\n        ProgressManager.getInstance().run(checkTask);\n      });\n    });\n  }","id":96542,"modified_method":"public void check(@NotNull Project project) {\n    ApplicationManager.getApplication().runWriteAction(() -> {\n      CommandProcessor.getInstance().runUndoTransparentAction(() -> {\n        final StudyEditor selectedEditor = StudyUtils.getSelectedStudyEditor(project);\n        if (selectedEditor == null) return;\n        final StudyState studyState = new StudyState(selectedEditor);\n        if (!studyState.isValid()) {\n          LOG.info(\"StudyCheckAction was invoked outside study editor\");\n          return;\n        }\n        if (StudyCheckUtils.hasBackgroundProcesses(project)) return;\n\n        final Course course = StudyTaskManager.getInstance(project).getCourse();\n        if (course != null && !course.isAdaptive() && !runTask(project)) return;\n\n        final Task task = studyState.getTask();\n        final VirtualFile taskDir = studyState.getTaskDir();\n        StudyCheckUtils.flushWindows(task, taskDir);\n\n\n        ApplicationManager.getApplication().invokeLater(\n          () -> IdeFocusManager.getInstance(project).requestFocus(studyState.getEditor().getComponent(), true));\n\n        final StudyTestRunner testRunner = StudyUtils.getTestRunner(task, taskDir);\n        Process testProcess = null;\n        String commandLine = \"\";\n        try {\n          final VirtualFile executablePath = getTaskVirtualFile(studyState, task, taskDir);\n          if (executablePath != null) {\n            commandLine = executablePath.getPath();\n            testProcess = testRunner.createCheckProcess(project, commandLine);\n          }\n        }\n        catch (ExecutionException e) {\n          LOG.error(e);\n        }\n        if (testProcess == null) {\n          return;\n        }\n        myCheckInProgress.set(true);\n        StudyCheckTask checkTask = getCheckTask(project, studyState, testRunner, testProcess, commandLine);\n        ProgressManager.getInstance().run(checkTask);\n      });\n    });\n  }","commit_id":"2c958c2b57fff0351d6656add7112e3e63eacd0d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public FileEditorManagerListener getFileEditorManagerListener(@NotNull Project project, @NotNull StudyToolWindow toolWindow) {\n\n    return new FileEditorManagerListener() {\n\n      private static final String EMPTY_TASK_TEXT = \"Please, open any task to see task description\";\n\n      @Override\n      public void fileOpened(@NotNull FileEditorManager source, @NotNull VirtualFile file) {\n        Task task = getTask(file);\n        setTaskText(task, file.getParent());\n      }\n\n      @Override\n      public void fileClosed(@NotNull FileEditorManager source, @NotNull VirtualFile file) {\n        toolWindow.setTaskText(EMPTY_TASK_TEXT);\n      }\n\n      @Override\n      public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n        VirtualFile file = event.getNewFile();\n        if (file != null) {\n          Task task = getTask(file);\n          setTaskText(task, file.getParent());\n        }\n      }\n\n      @Nullable\n      private Task getTask(@NotNull VirtualFile file) {\n        TaskFile taskFile = StudyUtils.getTaskFile(project, file);\n        if (taskFile != null) {\n          return taskFile.getTask();\n        }\n        else {\n          return null;\n        }\n      }\n\n      private void setTaskText(@Nullable final Task task, @Nullable final VirtualFile taskDirectory) {\n        String text = StudyUtils.getTaskTextFromTask(task, taskDirectory);\n        if (text == null) {\n          toolWindow.setTaskText(EMPTY_TASK_TEXT);\n          return;\n        }\n        toolWindow.setTaskText(text);\n      }\n    };\n  }","id":96543,"modified_method":"@NotNull\n  @Override\n  public FileEditorManagerListener getFileEditorManagerListener(@NotNull Project project, @NotNull StudyToolWindow toolWindow) {\n\n    return new FileEditorManagerListener() {\n\n      private static final String EMPTY_TASK_TEXT = \"Please, open any task to see task description\";\n\n      @Override\n      public void fileOpened(@NotNull FileEditorManager source, @NotNull VirtualFile file) {\n        Task task = getTask(file);\n        setTaskText(task, file.getParent());\n      }\n\n      @Override\n      public void fileClosed(@NotNull FileEditorManager source, @NotNull VirtualFile file) {\n        toolWindow.setTaskText(EMPTY_TASK_TEXT);\n      }\n\n      @Override\n      public void selectionChanged(@NotNull FileEditorManagerEvent event) {\n        VirtualFile file = event.getNewFile();\n        if (file != null) {\n          Task task = getTask(file);\n          setTaskText(task, file.getParent());\n        }\n        toolWindow.setBottomComponent(null);\n      }\n\n      @Nullable\n      private Task getTask(@NotNull VirtualFile file) {\n        TaskFile taskFile = StudyUtils.getTaskFile(project, file);\n        if (taskFile != null) {\n          return taskFile.getTask();\n        }\n        else {\n          return null;\n        }\n      }\n\n      private void setTaskText(@Nullable final Task task, @Nullable final VirtualFile taskDirectory) {\n        String text = StudyUtils.getTaskTextFromTask(task, taskDirectory);\n        if (text == null) {\n          toolWindow.setTaskText(EMPTY_TASK_TEXT);\n          return;\n        }\n        toolWindow.setTaskText(text);\n      }\n    };\n  }","commit_id":"2c958c2b57fff0351d6656add7112e3e63eacd0d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void onTaskFailed( String message) {\n    myTaskManger.setStatus(myTask, StudyStatus.Failed);\n    ApplicationManager.getApplication().invokeLater(\n      () -> StudyCheckUtils.showTestResultPopUp(message, MessageType.ERROR.getPopupBackground(), myProject));\n  }","id":96544,"modified_method":"protected void onTaskFailed(String message) {\n    myTaskManger.setStatus(myTask, StudyStatus.Failed);\n    ApplicationManager.getApplication().invokeLater(\n      () -> StudyCheckUtils.showTestResults(myProject, message));\n  }","commit_id":"2c958c2b57fff0351d6656add7112e3e63eacd0d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void run(@NotNull ProgressIndicator indicator) {\n    final Course course = StudyTaskManager.getInstance(myProject).getCourse();\n    if (course != null && course.isAdaptive()) {\n      checkAdaptiveCourse(indicator);\n    }\n    else {\n      if (checkCourse(indicator)) return;\n    }\n    runAfterTaskSolvedActions();\n  }","id":96545,"modified_method":"@Override\n  public void run(@NotNull ProgressIndicator indicator) {\n    final Course course = StudyTaskManager.getInstance(myProject).getCourse();\n    if (course != null && course.isAdaptive()) {\n      checkForAdaptiveCourse(indicator);\n    }\n    else {\n      checkForEduCourse(indicator);\n    }\n  }","commit_id":"2c958c2b57fff0351d6656add7112e3e63eacd0d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void onTaskSolved(String message) {\n    myTaskManger.setStatus(myTask, StudyStatus.Solved);\n    ApplicationManager.getApplication().invokeLater(\n      () -> StudyCheckUtils.showTestResultPopUp(message, MessageType.INFO.getPopupBackground(), myProject));\n  }","id":96546,"modified_method":"protected void onTaskSolved(String message) {\n    myTaskManger.setStatus(myTask, StudyStatus.Solved);\n\n    ApplicationManager.getApplication().invokeLater(\n      () -> StudyCheckUtils.showTestResults(myProject, message));\n  }","commit_id":"2c958c2b57fff0351d6656add7112e3e63eacd0d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean checkCourse(@NotNull ProgressIndicator indicator) {\n    final CapturingProcessHandler handler = new CapturingProcessHandler(myTestProcess, null, myCommandLine);\n    final ProcessOutput output = handler.runProcessWithProgressIndicator(indicator);\n    if (indicator.isCanceled()) {\n      ApplicationManager.getApplication().invokeLater(\n        () -> StudyCheckUtils.showTestResultPopUp(\"Check cancelled\", MessageType.WARNING.getPopupBackground(), myProject));\n      return true;\n    }\n\n\n    final StudyTestsOutputParser.TestsOutput testsOutput = StudyTestsOutputParser.getTestsOutput(output);\n    String stderr = output.getStderr();\n    if (!stderr.isEmpty()) {\n      ApplicationManager.getApplication().invokeLater(() ->\n                                                        StudyCheckUtils.showTestResultPopUp(\"Failed to launch checking\",\n                                                                                            MessageType.WARNING.getPopupBackground(),\n                                                                                            myProject));\n      //log error output of tests\n      LOG.info(\"#educational \" + stderr);\n      return true;\n    }\n\n    postAttemptToStepic(testsOutput);\n\n\n    if (testsOutput.isSuccess()) {\n      onTaskSolved(testsOutput.getMessage());\n    }\n    else {\n      onTaskFailed(testsOutput.getMessage());\n    }\n    return false;\n  }","id":96547,"modified_method":"private void checkForEduCourse(@NotNull ProgressIndicator indicator) {\n    final StudyTestsOutputParser.TestsOutput testsOutput = getTestOutput(indicator);\n\n    postAttemptToStepic(testsOutput);\n\n    if (testsOutput != null) {\n      if (testsOutput.isSuccess()) {\n        onTaskSolved(testsOutput.getMessage());\n      }\n      else {\n        onTaskFailed(testsOutput.getMessage());\n      }\n      runAfterTaskCheckedActions();\n    }\n  }","commit_id":"2c958c2b57fff0351d6656add7112e3e63eacd0d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void checkAdaptiveCourse(ProgressIndicator indicator) {\n    ProgressManager.getInstance().runProcessWithProgressAsynchronously(new Backgroundable(myProject, \"Checking Task\") {\n      @Override\n      public void run(@NotNull ProgressIndicator indicator) {\n        final Pair<Boolean, String> pair = EduAdaptiveStepicConnector.checkTask(myProject, myTask);\n        if (pair != null) {\n          final String checkMessage = pair.getSecond();\n          if (pair.getFirst()) {\n            onTaskSolved(checkMessage);\n          }\n          else {\n            onTaskFailed(checkMessage);\n          }\n        }\n        else {\n          ApplicationManager.getApplication().invokeLater(() ->\n                                                            StudyCheckUtils.showTestResultPopUp(\"Failed to launch checking\",\n                                                                                                MessageType.WARNING.getPopupBackground(),\n                                                                                                myProject));\n        }\n      }\n    }, indicator);\n    \n  }","id":96548,"modified_method":"private void checkForAdaptiveCourse(ProgressIndicator indicator) {\n    ProgressManager.getInstance().runProcessWithProgressAsynchronously(new Backgroundable(myProject, \"Checking Task\") {\n      @Override\n      public void run(@NotNull ProgressIndicator indicator) {\n        final StudyTestsOutputParser.TestsOutput testOutput = getTestOutput(indicator);\n        if (testOutput != null) {\n          if (testOutput.isSuccess()) {\n            final Pair<Boolean, String> pair = EduAdaptiveStepicConnector.checkTask(myProject, myTask);\n            if (pair != null && !pair.getSecond().isEmpty()) {\n              final String checkMessage = pair.getSecond();\n              if (pair.getFirst()) {\n                onTaskSolved(checkMessage);\n              }\n              else {\n                onTaskFailed(checkMessage);\n              }\n              runAfterTaskCheckedActions();\n            }\n            else {\n              ApplicationManager.getApplication().invokeLater(() ->\n                                                                StudyCheckUtils.showTestResultPopUp(\"Failed to launch checking\",\n                                                                                                    MessageType.WARNING\n                                                                                                      .getPopupBackground(),\n                                                                                                    myProject));\n            }\n          }\n          else {\n            onTaskFailed(testOutput.getMessage());\n          }\n        }\n      }\n    }, indicator);\n  }","commit_id":"2c958c2b57fff0351d6656add7112e3e63eacd0d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void runAfterTaskSolvedActions() {\n    StudyPluginConfigurator configurator = StudyUtils.getConfigurator(myProject);\n    if (configurator != null) {\n      StudyAfterCheckAction[] checkActions = configurator.getAfterCheckActions();\n      if (checkActions != null) {\n        for (StudyAfterCheckAction action: checkActions) {\n          action.run(myProject, myTask, myStatusBeforeCheck);\n        }\n      }\n    }\n    else {\n      LOG.warn(\"No configurator is provided for the plugin\");\n    }\n  }","id":96549,"modified_method":"private void runAfterTaskCheckedActions() {\n    StudyPluginConfigurator configurator = StudyUtils.getConfigurator(myProject);\n    if (configurator != null) {\n      StudyAfterCheckAction[] checkActions = configurator.getAfterCheckActions();\n      if (checkActions != null) {\n        for (StudyAfterCheckAction action : checkActions) {\n          action.run(myProject, myTask, myStatusBeforeCheck);\n        }\n      }\n    }\n    else {\n      LOG.warn(\"No configurator is provided for the plugin\");\n    }\n  }","commit_id":"2c958c2b57fff0351d6656add7112e3e63eacd0d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  public static TestsOutput getTestsOutput(@NotNull final ProcessOutput processOutput) {\n    String congratulations = CONGRATULATIONS;\n    for (String line : processOutput.getStdoutLines()) {\n      if (line.startsWith(ourStudyPrefix)) {\n        if (line.contains(TEST_OK)) {\n          continue;\n        }\n\n        if (line.contains(CONGRATS_MESSAGE)) {\n          congratulations = line.substring(line.indexOf(CONGRATS_MESSAGE) + CONGRATS_MESSAGE.length());\n        }\n\n        if (line.contains(TEST_FAILED)) {\n          return new TestsOutput(false, line.substring(line.indexOf(TEST_FAILED) + TEST_FAILED.length()));\n        }\n      }\n    }\n\n    return new TestsOutput(true, congratulations);\n  }","id":96550,"modified_method":"@NotNull\n  public static TestsOutput getTestsOutput(@NotNull final ProcessOutput processOutput) {\n    String congratulations = CONGRATULATIONS;\n    for (String line : processOutput.getStdoutLines()) {\n      if (line.startsWith(STUDY_PREFIX)) {\n        if (line.contains(TEST_OK)) {\n          continue;\n        }\n\n        if (line.contains(CONGRATS_MESSAGE)) {\n          congratulations = line.substring(line.indexOf(CONGRATS_MESSAGE) + CONGRATS_MESSAGE.length());\n        }\n\n        if (line.contains(TEST_FAILED)) {\n          return new TestsOutput(false, line.substring(line.indexOf(TEST_FAILED) + TEST_FAILED.length()));\n        }\n      }\n    }\n\n    return new TestsOutput(true, congratulations);\n  }","commit_id":"2c958c2b57fff0351d6656add7112e3e63eacd0d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean canHave15Suppressions(final PsiElement file) {\n    final Module module = ModuleUtil.findModuleForPsiElement(file);\n    if (module == null) return false;\n    final Sdk jdk = ModuleRootManager.getInstance(module).getSdk();\n    if (jdk == null) return false;\n    final boolean is_1_5 = JavaSdk.getInstance().compareTo(jdk.getVersionString(), \"1.5\") >= 0;\n    return DaemonCodeAnalyzerSettings.getInstance().SUPPRESS_WARNINGS && is_1_5 && PsiUtil.isLanguageLevel5OrHigher(file);\n  }","id":96551,"modified_method":"public boolean canHave15Suppressions(final PsiElement file) {\n    final Module module = ModuleUtil.findModuleForPsiElement(file);\n    if (module == null) return false;\n    final Sdk jdk = ModuleRootManager.getInstance(module).getSdk();\n    if (jdk == null) return false;\n    final String jdkVersion = jdk.getVersionString();\n    if (jdkVersion == null) return false;\n    final boolean is_1_5 = JavaSdk.getInstance().compareTo(jdkVersion, \"1.5\") >= 0;\n    return DaemonCodeAnalyzerSettings.getInstance().SUPPRESS_WARNINGS && is_1_5 && PsiUtil.isLanguageLevel5OrHigher(file);\n  }","commit_id":"d7ac9651d3c7561627082354f59056286729e9a7","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void applyFix(@NotNull Project project, @NotNull final ProblemDescriptor descriptor) {\n    ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() {\n      public void run() {\n        ProgressManager.getInstance().getProgressIndicator().setIndeterminate(true);\n        List<String> assemblyRefs = collectAssemblyReferences(descriptor.getPsiElement().getContainingFile());\n        final PySkeletonRefresher refresher = new PySkeletonRefresher(mySdk, null, null);\n        refresher.generateSkeleton(myQualifiedName, \"\", assemblyRefs);\n        final VirtualFile skeletonDir;\n        skeletonDir = LocalFileSystem.getInstance().findFileByPath(refresher.getSkeletonPath());\n        if (skeletonDir != null) {\n          skeletonDir.refresh(true, true);\n        }\n      }\n    }, \"Generating skeletons for binary module\", false, project);\n  }","id":96552,"modified_method":"public void applyFix(@NotNull Project project, @NotNull final ProblemDescriptor descriptor) {\n    ProgressManager.getInstance().runProcessWithProgressSynchronously(new Runnable() {\n      public void run() {\n        ProgressManager.getInstance().getProgressIndicator().setIndeterminate(true);\n        List<String> assemblyRefs = collectAssemblyReferences(descriptor.getPsiElement().getContainingFile());\n        final PySkeletonRefresher refresher = new PySkeletonRefresher(mySdk, null, null);\n        refresher.generateSkeleton(myQualifiedName, \"\", assemblyRefs);\n        final VirtualFile skeletonDir;\n        skeletonDir = LocalFileSystem.getInstance().findFileByPath(refresher.getSkeletonsPath());\n        if (skeletonDir != null) {\n          skeletonDir.refresh(true, true);\n        }\n      }\n    }, \"Generating skeletons for binary module\", false, project);\n  }","commit_id":"28cb2050f6fa576a8c32c080bbc65e363780a317","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"List<String> regenerateSkeletons(\n    @Nullable SkeletonVersionChecker cached_checker,\n    @Nullable Ref<Boolean> migration_flag\n  ) {\n    List<String> error_list = new SmartList<String>();\n    String home_path = mySdk.getHomePath();\n    final File skel_dir = new File(mySkeletonsPath);\n    if (!skel_dir.exists()) skel_dir.mkdirs();\n    final String readable_path = PythonSdkType.shortenDirName(home_path);\n\n    myBlacklist = loadBlacklist();\n\n    indicate(PyBundle.message(\"sdk.gen.querying.$0\", readable_path));\n    // get generator version and binary libs list in one go\n\n    final List<String> binaries_output = listBinaries();\n    if (binaries_output.size() < 1) {\n      throw new InvalidSdkException(\"Empty output from \" + GENERATOR3 + \" for \" + home_path);\n    }\n    myGeneratorVersion = fromVersionString(binaries_output.get(0).trim());\n    myPregeneratedSkeletons = findPregeneratedSkeletons();\n\n    indicate(PyBundle.message(\"sdk.gen.reading.versions.file\"));\n    if (cached_checker != null) myVersionChecker = cached_checker.withDefaultVersionIfUnknown(myGeneratorVersion);\n    else myVersionChecker = new SkeletonVersionChecker(myGeneratorVersion);\n\n    // check builtins\n    String builtinsFileName = PythonSdkType.getBuiltinsFileName(mySdk);\n    File builtins_file = new File(skel_dir, builtinsFileName);\n\n    Matcher header_matcher = getParseHeader(builtins_file);\n    final boolean oldOrNonExisting = header_matcher == null || // no file\n                                        !header_matcher.matches(); // no version line\n    if (migration_flag != null && !migration_flag.get() && oldOrNonExisting) {\n      migration_flag.set(true);\n      Notifications.Bus.notify(\n        new Notification(\n          PythonSdkType.SKELETONS_TOPIC, PyBundle.message(\"sdk.gen.notify.converting.old.skels\"),\n          PyBundle.message(\"sdk.gen.notify.converting.text\"),\n          NotificationType.INFORMATION\n        )\n      );\n    }\n\n    if (myPregeneratedSkeletons != null && oldOrNonExisting) {\n      LOG.info(\"Unpacking pregenerated skeletons...\");\n      try {\n        ZipUtil.extract(new File(JarFileSystem.getInstance().getVirtualFileForJar(myPregeneratedSkeletons).getPath()),\n                        new File(mySkeletonsPath), null);\n      }\n      catch (IOException e) {\n        LOG.info(\"Error unpacking pregenerated skeletons\", e);\n      }\n    }\n    \n    if (myPregeneratedSkeletons == null && (oldOrNonExisting || fromVersionString(header_matcher.group(2)) < myVersionChecker.getBuiltinVersion())) {\n      indicate(PyBundle.message(\"sdk.gen.updating.builtins.$0\", readable_path));\n      generateBuiltinSkeletons();\n    }\n\n    if (!oldOrNonExisting) {\n      indicate(PyBundle.message(\"sdk.gen.cleaning.$0\", readable_path));\n      cleanUpSkeletons(skel_dir);\n    }\n\n    indicate(PyBundle.message(\"sdk.gen.updating.$0\", readable_path));\n    List<UpdateResult> skel_errors = updateOrCreateSkeletons(binaries_output);\n\n    if (skel_errors.size() > 0) {\n      indicateMinor(BLACKLIST_FILE_NAME);\n      for (UpdateResult error : skel_errors) {\n        if (error.isFresh()) error_list.add(error.getName());\n        myBlacklist.put(error.getPath(), new Pair<Integer, Long>(myGeneratorVersion, error.getTimestamp()));\n      }\n      storeBlacklist(skel_dir, myBlacklist);\n    }\n    else removeBlacklist(skel_dir);\n\n    indicate(PyBundle.message(\"sdk.gen.reloading\"));\n    VirtualFile skeletonsVFile = LocalFileSystem.getInstance().refreshAndFindFileByPath(mySkeletonsPath);\n    assert skeletonsVFile != null;\n    skeletonsVFile.refresh(false, true);\n    return error_list;\n  }","id":96553,"modified_method":"List<String> regenerateSkeletons(@Nullable SkeletonVersionChecker cached_checker,\n                                   @Nullable Ref<Boolean> migration_flag) {\n    final List<String> error_list = new SmartList<String>();\n    final String home_path = mySdk.getHomePath();\n    final String skeletonsPath = getSkeletonsPath();\n    final File skeletonsDir = new File(skeletonsPath);\n    if (!skeletonsDir.exists()) skeletonsDir.mkdirs();\n    final String readable_path = PythonSdkType.shortenDirName(home_path);\n\n    myBlacklist = loadBlacklist();\n\n    indicate(PyBundle.message(\"sdk.gen.querying.$0\", readable_path));\n    // get generator version and binary libs list in one go\n\n    final ListBinariesResult binaries = listBinaries(mySdk, getExtraSysPath(mySdk, getSkeletonsPath()));\n    myGeneratorVersion = binaries.generatorVersion;\n    myPregeneratedSkeletons = findPregeneratedSkeletons();\n\n    indicate(PyBundle.message(\"sdk.gen.reading.versions.file\"));\n    if (cached_checker != null) myVersionChecker = cached_checker.withDefaultVersionIfUnknown(myGeneratorVersion);\n    else myVersionChecker = new SkeletonVersionChecker(myGeneratorVersion);\n\n    // check builtins\n    final String builtinsFileName = PythonSdkType.getBuiltinsFileName(mySdk);\n    final File builtinsFile = new File(skeletonsPath, builtinsFileName);\n\n    final boolean oldOrNonExisting = getSkeletonVersion(builtinsFile) == null;\n\n    if (migration_flag != null && !migration_flag.get() && oldOrNonExisting) {\n      migration_flag.set(true);\n      Notifications.Bus.notify(\n        new Notification(\n          PythonSdkType.SKELETONS_TOPIC, PyBundle.message(\"sdk.gen.notify.converting.old.skels\"),\n          PyBundle.message(\"sdk.gen.notify.converting.text\"),\n          NotificationType.INFORMATION\n        )\n      );\n    }\n\n    if (myPregeneratedSkeletons != null && oldOrNonExisting) {\n      indicate(\"Unpacking pregenerated skeletons...\");\n      try {\n        final VirtualFile jar = JarFileSystem.getInstance().getVirtualFileForJar(myPregeneratedSkeletons);\n        if (jar != null) {\n          ZipUtil.extract(new File(jar.getPath()),\n                          new File(getSkeletonsPath()), null);\n        }\n      }\n      catch (IOException e) {\n        LOG.info(\"Error unpacking pregenerated skeletons\", e);\n      }\n    }\n\n    if (oldOrNonExisting) {\n      final Sdk base = PythonSdkType.getInstance().getVirtualEnvBaseSdk(mySdk);\n      if (base != null) {\n        indicate(\"Copying base SDK skeletons for virtualenv...\");\n        final String baseSkeletonsPath = PythonSdkType.getSkeletonsPath(base.getHomePath());\n        final ListBinariesResult baseBinaries = listBinaries(base, getExtraSysPath(base, baseSkeletonsPath));\n        for (Map.Entry<String, File> entry : binaries.modules.entrySet()) {\n          final String module = entry.getKey();\n          final File binary = entry.getValue();\n          final File baseBinary = baseBinaries.modules.get(module);\n          final File fromFile = getSkeleton(module, baseSkeletonsPath);\n          if (baseBinaries.modules.containsKey(module) &&\n              fromFile.exists() &&\n              binary.length() == baseBinary.length()) { // Weak binary modules equality check\n            final File toFile = fromFile.isDirectory() ?\n                                getPackageSkeleton(module, skeletonsPath) :\n                                getModuleSkeleton(module, skeletonsPath);\n            try {\n              FileUtil.copy(fromFile, toFile);\n            }\n            catch (IOException e) {\n              LOG.info(\"Error copying base virtualenv SDK skeleton for \" + module, e);\n            }\n          }\n        }\n      }\n    }\n\n    final Integer builtinVersion = getSkeletonVersion(builtinsFile);\n    if (myPregeneratedSkeletons == null && (builtinVersion == null || builtinVersion < myVersionChecker.getBuiltinVersion())) {\n      indicate(PyBundle.message(\"sdk.gen.updating.builtins.$0\", readable_path));\n      generateBuiltinSkeletons();\n    }\n\n    if (!oldOrNonExisting) {\n      indicate(PyBundle.message(\"sdk.gen.cleaning.$0\", readable_path));\n      cleanUpSkeletons(skeletonsDir);\n    }\n\n    indicate(PyBundle.message(\"sdk.gen.updating.$0\", readable_path));\n    List<UpdateResult> skel_errors = updateOrCreateSkeletons(binaries.modules);\n\n    if (skel_errors.size() > 0) {\n      indicateMinor(BLACKLIST_FILE_NAME);\n      for (UpdateResult error : skel_errors) {\n        if (error.isFresh()) error_list.add(error.getName());\n        myBlacklist.put(error.getPath(), new Pair<Integer, Long>(myGeneratorVersion, error.getTimestamp()));\n      }\n      storeBlacklist(skeletonsDir, myBlacklist);\n    }\n    else removeBlacklist(skeletonsDir);\n\n    indicate(PyBundle.message(\"sdk.gen.reloading\"));\n    VirtualFile skeletonsVFile = LocalFileSystem.getInstance().refreshAndFindFileByPath(mySkeletonsPath);\n    assert skeletonsVFile != null;\n    skeletonsVFile.refresh(false, true);\n    return error_list;\n  }","commit_id":"28cb2050f6fa576a8c32c080bbc65e363780a317","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean updateOrCreateSkeleton(String moduleName, String moduleLibName, List<UpdateResult> error_list) {\n    final String modulePath = moduleName.replace('.', '/');\n    String skeletonPath = getSkeletonPath(); // will create dirs as needed\n    File skeleton_file = new File(skeletonPath, modulePath + \".py\");\n    if (!skeleton_file.exists()) {\n      skeleton_file = new File(new File(skeletonPath, modulePath), PyNames.INIT_DOT_PY);\n    }\n    File lib_file = new File(moduleLibName);\n    Matcher matcher = getParseHeader(skeleton_file);\n    boolean must_rebuild = true; // guilty unless proven fresh enough\n    if (matcher != null && matcher.matches()) {\n      int file_version = SkeletonVersionChecker.fromVersionString(matcher.group(2));\n      int required_version = myVersionChecker.getRequiredVersion(moduleName);\n      must_rebuild = file_version < required_version;\n    }\n    final long lib_file_timestamp = lib_file.lastModified();\n    if (!must_rebuild) { // ...but what if the lib was updated?\n      must_rebuild = (lib_file.exists() && skeleton_file.exists() && lib_file_timestamp > skeleton_file.lastModified());\n      // really we can omit both exists() calls but I keep these to make the logic clear\n    }\n    if (myBlacklist != null) {\n      Pair<Integer, Long> version_info = myBlacklist.get(moduleLibName);\n      if (version_info != null) {\n        int failed_generator_version = version_info.getFirst();\n        long failed_timestamp = version_info.getSecond();\n        must_rebuild &= failed_generator_version < myGeneratorVersion || failed_timestamp < lib_file_timestamp;\n        if (! must_rebuild) { // we're still failing to rebuild, it, keep it in blacklist\n          error_list.add(new UpdateResult(moduleName, moduleLibName, lib_file_timestamp, false));\n        }\n      }\n    }\n    if (must_rebuild) {\n      indicateMinor(moduleName);\n      if (myPregeneratedSkeletons != null && copyPregeneratedSkeleton(moduleName)) {\n        return true;\n      }\n      LOG.info(\"Skeleton for \" + moduleName);\n      if (!generateSkeleton(moduleName, moduleLibName, null)) { // NOTE: are assembly refs always empty for built-ins?\n        error_list.add(new UpdateResult(moduleName, moduleLibName, lib_file_timestamp, true));\n      }\n    }\n    return false;\n  }","id":96554,"modified_method":"private boolean updateOrCreateSkeleton(String moduleName, String moduleLibName, List<UpdateResult> error_list) {\n    final File skeleton = getSkeleton(moduleName, getSkeletonsPath());\n    final File binary = new File(moduleLibName);\n    Matcher matcher = getParseHeader(skeleton);\n    boolean must_rebuild = true; // guilty unless proven fresh enough\n    if (matcher != null && matcher.matches()) {\n      int file_version = SkeletonVersionChecker.fromVersionString(matcher.group(2));\n      int required_version = myVersionChecker.getRequiredVersion(moduleName);\n      must_rebuild = file_version < required_version;\n    }\n    final long lib_file_timestamp = binary.lastModified();\n    if (!must_rebuild) { // ...but what if the lib was updated?\n      must_rebuild = (binary.exists() && skeleton.exists() && lib_file_timestamp > skeleton.lastModified());\n      // really we can omit both exists() calls but I keep these to make the logic clear\n    }\n    if (myBlacklist != null) {\n      Pair<Integer, Long> version_info = myBlacklist.get(moduleLibName);\n      if (version_info != null) {\n        int failed_generator_version = version_info.getFirst();\n        long failed_timestamp = version_info.getSecond();\n        must_rebuild &= failed_generator_version < myGeneratorVersion || failed_timestamp < lib_file_timestamp;\n        if (! must_rebuild) { // we're still failing to rebuild, it, keep it in blacklist\n          error_list.add(new UpdateResult(moduleName, moduleLibName, lib_file_timestamp, false));\n        }\n      }\n    }\n    if (must_rebuild) {\n      indicateMinor(moduleName);\n      if (myPregeneratedSkeletons != null && copyPregeneratedSkeleton(moduleName)) {\n        return true;\n      }\n      LOG.info(\"Skeleton for \" + moduleName);\n      if (!generateSkeleton(moduleName, moduleLibName, null)) { // NOTE: are assembly refs always empty for built-ins?\n        error_list.add(new UpdateResult(moduleName, moduleLibName, lib_file_timestamp, true));\n      }\n    }\n    return false;\n  }","commit_id":"28cb2050f6fa576a8c32c080bbc65e363780a317","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * (Re-)generates skeletons for all binary python modules. Up-to-date skeletons are not regenerated.\n   * Does one module at a time: slower, but avoids certain conflicts.\n   *\n   * @param binaries  output of generator3 -L, list of prospective binary modules\n   * @return blacklist data; whatever was not generated successfully is put here.\n   */\n  private List<UpdateResult> updateOrCreateSkeletons(List<String> binaries) {\n    final List<UpdateResult> error_list = new SmartList<UpdateResult>();\n    final Iterator<String> bin_iter = binaries.iterator();\n    bin_iter.next(); // skip version number. if it weren't here, we'd already die up in regenerateSkeletons()\n    final int count = Math.max(0, binaries.size() - 1);\n    int i = 0;\n    while (bin_iter.hasNext()) {\n      checkCanceled();\n      if (myIndicator != null) {\n        myIndicator.setFraction((double)i / count);\n      }\n      final String line = bin_iter.next(); // line = \"mod_name path\"\n      int cutpos = line.indexOf(' ');\n      if (cutpos < 0) LOG.error(\"Bad binaries line: '\" + line + \"', SDK \" + mySdk.getHomePath()); // but don't die yet\n      else {\n        String moduleName = line.substring(0, cutpos);\n        String module_lib_name = line.substring(cutpos+1);\n        if (updateOrCreateSkeleton(moduleName, module_lib_name, error_list)) continue;\n      }\n      i++;\n    }\n    return error_list;\n  }","id":96555,"modified_method":"/**\n   * (Re-)generates skeletons for all binary python modules. Up-to-date skeletons are not regenerated.\n   * Does one module at a time: slower, but avoids certain conflicts.\n   *\n   * @param modules output of generator3 -L\n   * @return blacklist data; whatever was not generated successfully is put here.\n   */\n  private List<UpdateResult> updateOrCreateSkeletons(Map<String, File> modules) {\n    final List<String> names = new ArrayList<String>(modules.keySet());\n    Collections.sort(names);\n    final List<UpdateResult> results = new ArrayList<UpdateResult>();\n    final int count = names.size();\n    for (int i = 0; i < count; i++) {\n      checkCanceled();\n      if (myIndicator != null) {\n        myIndicator.setFraction((double)i / count);\n      }\n      final String name = names.get(i);\n      final File module = modules.get(name);\n      if (module != null) {\n        updateOrCreateSkeleton(name, module.getPath(), results);\n      }\n    }\n    return results;\n  }","commit_id":"28cb2050f6fa576a8c32c080bbc65e363780a317","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Creates if needed all path(s) used to store skeletons of its SDK.\n   * @return path name of skeleton dir for the SDK, guaranteed to be already created.\n   */\n  @NotNull\n  public String getSkeletonPath() {\n    if (mySkeletonsPath == null) {\n      mySkeletonsPath = PythonSdkType.getSkeletonsPath(mySdk.getHomePath());\n      final File skeletonsDir = new File(mySkeletonsPath);\n      if (!skeletonsDir.exists() && !skeletonsDir.mkdirs()) {\n        throw new InvalidSdkException(\"Can't create skeleton dir \"+String.valueOf(mySkeletonsPath));\n      }\n    }\n    return mySkeletonsPath;\n  }","id":96556,"modified_method":"/**\n   * Creates if needed all path(s) used to store skeletons of its SDK.\n   * @return path name of skeleton dir for the SDK, guaranteed to be already created.\n   */\n  @NotNull\n  public String getSkeletonsPath() {\n    if (mySkeletonsPath == null) {\n      mySkeletonsPath = PythonSdkType.getSkeletonsPath(mySdk.getHomePath());\n      final File skeletonsDir = new File(mySkeletonsPath);\n      if (!skeletonsDir.exists() && !skeletonsDir.mkdirs()) {\n        throw new InvalidSdkException(\"Can't create skeleton dir \"+String.valueOf(mySkeletonsPath));\n      }\n    }\n    return mySkeletonsPath;\n  }","commit_id":"28cb2050f6fa576a8c32c080bbc65e363780a317","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Generates a skeleton for a particular binary module.\n   *\n   * @param modname name of the binary module as known to Python (e.g. 'foo.bar')\n   * @param modfilename name of file which defines the module, null for built-in modules\n   * @param assemblyRefs refs that generator wants to know in .net environment, if applicable\n   * @return true if generation completed successfully\n   */\n  public boolean generateSkeleton(\n    @NotNull String modname, @Nullable String modfilename, @Nullable List<String> assemblyRefs\n  ) {\n    boolean ret = true;\n    String binaryPath = mySdk.getHomePath();\n    final String parent_dir = new File(binaryPath).getParent();\n    List<String> commandLine = new ArrayList<String>();\n    commandLine.add(binaryPath);\n    commandLine.add(PythonHelpersLocator.getHelperPath(GENERATOR3));\n    commandLine.add(\"-d\");\n    commandLine.add(getSkeletonPath());\n    if (assemblyRefs != null && !assemblyRefs.isEmpty()) {\n      commandLine.add(\"-c\");\n      commandLine.add(StringUtil.join(assemblyRefs, \";\"));\n    }\n    if (ApplicationManagerEx.getApplicationEx().isInternal()) {\n      commandLine.add(\"-x\");\n    }\n    commandLine.add(\"-s\");\n    commandLine.add(getExtraSyspath());\n    commandLine.add(modname);\n    if (modfilename != null) commandLine.add(modfilename);\n\n    final ProcessOutput gen_result = SdkUtil.getProcessOutput(\n      parent_dir,\n      ArrayUtil.toStringArray(commandLine),\n      PythonSdkType.getVirtualEnvAdditionalEnv(binaryPath),\n      MINUTE * 10\n    );\n    if (gen_result.getExitCode() != 0) {\n      ret = false;\n      StringBuilder sb = new StringBuilder(\"Skeleton for \");\n      sb.append(modname).append(\" failed on \").append(binaryPath).append(\". stderr: --\\n\");\n      for (String err_line : gen_result.getStderrLines()) sb.append(err_line).append(\"\\n\");\n      sb.append(\"--\");\n      if (ApplicationManagerEx.getApplicationEx().isInternal()) {\n        LOG.warn(sb.toString());\n      }\n      else {\n        LOG.info(sb.toString());\n      }\n    }\n    return ret;\n  }","id":96557,"modified_method":"/**\n   * Generates a skeleton for a particular binary module.\n   *\n   * @param modname name of the binary module as known to Python (e.g. 'foo.bar')\n   * @param modfilename name of file which defines the module, null for built-in modules\n   * @param assemblyRefs refs that generator wants to know in .net environment, if applicable\n   * @return true if generation completed successfully\n   */\n  public boolean generateSkeleton(@NotNull String modname, @Nullable String modfilename, @Nullable List<String> assemblyRefs) {\n    boolean ret = true;\n    String binaryPath = mySdk.getHomePath();\n    if (myExtraSyspath == null) {\n      myExtraSyspath = getExtraSysPath(mySdk, mySkeletonsPath);\n    }\n    final String parent_dir = new File(binaryPath).getParent();\n    List<String> commandLine = new ArrayList<String>();\n    commandLine.add(binaryPath);\n    commandLine.add(PythonHelpersLocator.getHelperPath(GENERATOR3));\n    commandLine.add(\"-d\");\n    commandLine.add(getSkeletonsPath());\n    if (assemblyRefs != null && !assemblyRefs.isEmpty()) {\n      commandLine.add(\"-c\");\n      commandLine.add(StringUtil.join(assemblyRefs, \";\"));\n    }\n    if (ApplicationManagerEx.getApplicationEx().isInternal()) {\n      commandLine.add(\"-x\");\n    }\n    commandLine.add(\"-s\");\n    commandLine.add(myExtraSyspath);\n    commandLine.add(modname);\n    if (modfilename != null) commandLine.add(modfilename);\n\n    final ProcessOutput gen_result = SdkUtil.getProcessOutput(\n      parent_dir,\n      ArrayUtil.toStringArray(commandLine),\n      PythonSdkType.getVirtualEnvAdditionalEnv(binaryPath),\n      MINUTE * 10\n    );\n    if (gen_result.getExitCode() != 0) {\n      ret = false;\n      StringBuilder sb = new StringBuilder(\"Skeleton for \");\n      sb.append(modname).append(\" failed on \").append(binaryPath).append(\". stderr: --\\n\");\n      for (String err_line : gen_result.getStderrLines()) sb.append(err_line).append(\"\\n\");\n      sb.append(\"--\");\n      if (ApplicationManagerEx.getApplicationEx().isInternal()) {\n        LOG.warn(sb.toString());\n      }\n      else {\n        LOG.info(sb.toString());\n      }\n    }\n    return ret;\n  }","commit_id":"28cb2050f6fa576a8c32c080bbc65e363780a317","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean copyPregeneratedSkeleton(String moduleName) {\n    File targetDir;\n    final String modulePath = moduleName.replace('.', '/');\n    File skeletonsDir = new File(getSkeletonPath());\n    VirtualFile pregenerated = myPregeneratedSkeletons.findFileByRelativePath(modulePath + \".py\");\n    if (pregenerated == null) {\n      pregenerated = myPregeneratedSkeletons.findFileByRelativePath(modulePath + \"/\" + PyNames.INIT_DOT_PY);\n      targetDir = new File(skeletonsDir, modulePath);\n    }\n    else {\n      int pos = modulePath.lastIndexOf('/');\n      if (pos < 0) {\n        targetDir = skeletonsDir;\n      }\n      else {\n        final String moduleParentPath = modulePath.substring(0, pos);\n        targetDir = new File(skeletonsDir, moduleParentPath);\n      }\n    }\n    if (pregenerated != null && (targetDir.exists() || targetDir.mkdirs())) {\n      LOG.info(\"Pregenerated skeleton for \" + moduleName);\n      File target = new File(targetDir, pregenerated.getName());\n      try {\n        FileOutputStream fos = new FileOutputStream(target);\n        try {\n          FileUtil.copy(pregenerated.getInputStream(), fos);\n        }\n        finally {\n          fos.close();\n        }\n      }\n      catch (IOException e) {\n        LOG.info(\"Error copying pregenerated skeleton\", e);\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }","id":96558,"modified_method":"private boolean copyPregeneratedSkeleton(String moduleName) {\n    File targetDir;\n    final String modulePath = moduleName.replace('.', '/');\n    File skeletonsDir = new File(getSkeletonsPath());\n    VirtualFile pregenerated = myPregeneratedSkeletons.findFileByRelativePath(modulePath + \".py\");\n    if (pregenerated == null) {\n      pregenerated = myPregeneratedSkeletons.findFileByRelativePath(modulePath + \"/\" + PyNames.INIT_DOT_PY);\n      targetDir = new File(skeletonsDir, modulePath);\n    }\n    else {\n      int pos = modulePath.lastIndexOf('/');\n      if (pos < 0) {\n        targetDir = skeletonsDir;\n      }\n      else {\n        final String moduleParentPath = modulePath.substring(0, pos);\n        targetDir = new File(skeletonsDir, moduleParentPath);\n      }\n    }\n    if (pregenerated != null && (targetDir.exists() || targetDir.mkdirs())) {\n      LOG.info(\"Pregenerated skeleton for \" + moduleName);\n      File target = new File(targetDir, pregenerated.getName());\n      try {\n        FileOutputStream fos = new FileOutputStream(target);\n        try {\n          FileUtil.copy(pregenerated.getInputStream(), fos);\n        }\n        finally {\n          fos.close();\n        }\n      }\n      catch (IOException e) {\n        LOG.info(\"Error copying pregenerated skeleton\", e);\n        return false;\n      }\n      return true;\n    }\n    return false;\n  }","commit_id":"28cb2050f6fa576a8c32c080bbc65e363780a317","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private VirtualFile findPregeneratedSkeletons() {\n    final File root = findPregeneratedSkeletonsRoot();\n    if (root == null) {\n      return null;\n    }\n    LOG.info(\"Pregenerated skeletons root is \" + root);\n    String version = mySdk.getVersionString().toLowerCase().replace(\" \", \"-\");\n    File f;\n    if (SystemInfo.isMac) {\n      String osVersion = SystemInfo.OS_VERSION;\n      int dot = osVersion.indexOf('.');\n      if (dot >= 0) {\n        int secondDot = osVersion.indexOf('.', dot+1);\n        if (secondDot >= 0) {\n          osVersion = osVersion.substring(0, secondDot);\n        }          \n      }\n      f = new File(root, \"skeletons-mac-\" + myGeneratorVersion + \"-\" + osVersion + \"-\" + version + \".zip\");\n    }\n    else {\n      String os = SystemInfo.isWindows ? \"win\" : \"nix\";\n      f = new File(root, \"skeletons-\" + os + \"-\" + myGeneratorVersion + \"-\" + version + \".zip\");\n    }\n    if (f.exists()) {\n      LOG.info(\"Found pregenerated skeletons at \" + f.getPath());\n      final VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(f);\n      if (virtualFile == null) {\n        LOG.info(\"Could not find pregenerated skeletons in VFS\");\n        return null;\n      }\n      return JarFileSystem.getInstance().getJarRootForLocalFile(virtualFile);\n    }\n    else {\n      LOG.info(\"Not found pregenerated skeletons at \" + f.getPath());\n      return null;\n    }\n  }","id":96559,"modified_method":"@Nullable\n  private VirtualFile findPregeneratedSkeletons() {\n    final File root = findPregeneratedSkeletonsRoot();\n    if (root == null) {\n      return null;\n    }\n    LOG.info(\"Pregenerated skeletons root is \" + root);\n    final String versionString = mySdk.getVersionString();\n    if (versionString == null) {\n      return null;\n    }\n    String version = versionString.toLowerCase().replace(\" \", \"-\");\n    File f;\n    if (SystemInfo.isMac) {\n      String osVersion = SystemInfo.OS_VERSION;\n      int dot = osVersion.indexOf('.');\n      if (dot >= 0) {\n        int secondDot = osVersion.indexOf('.', dot+1);\n        if (secondDot >= 0) {\n          osVersion = osVersion.substring(0, secondDot);\n        }\n      }\n      f = new File(root, \"skeletons-mac-\" + myGeneratorVersion + \"-\" + osVersion + \"-\" + version + \".zip\");\n    }\n    else {\n      String os = SystemInfo.isWindows ? \"win\" : \"nix\";\n      f = new File(root, \"skeletons-\" + os + \"-\" + myGeneratorVersion + \"-\" + version + \".zip\");\n    }\n    if (f.exists()) {\n      LOG.info(\"Found pregenerated skeletons at \" + f.getPath());\n      final VirtualFile virtualFile = LocalFileSystem.getInstance().refreshAndFindFileByIoFile(f);\n      if (virtualFile == null) {\n        LOG.info(\"Could not find pregenerated skeletons in VFS\");\n        return null;\n      }\n      return JarFileSystem.getInstance().getJarRootForLocalFile(virtualFile);\n    }\n    else {\n      LOG.info(\"Not found pregenerated skeletons at \" + f.getPath());\n      return null;\n    }\n  }","commit_id":"28cb2050f6fa576a8c32c080bbc65e363780a317","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private String getExtraSyspath() {\n    if (myExtraSyspath == null) {\n      VirtualFile[] class_dirs = mySdk.getRootProvider().getFiles(OrderRootType.CLASSES);\n      StringBuilder arg_builder = new StringBuilder(\"\\\"\");\n      int i = 0;\n      while (i < class_dirs.length) {\n        if (i > 0) arg_builder.append(File.pathSeparator);\n        if (class_dirs[i].isInLocalFileSystem()) {\n          final String pathname = class_dirs[i].getPath();\n          if (!mySkeletonsPath.equals(pathname)) arg_builder.append(pathname);\n        }\n        i += 1;\n      }\n      arg_builder.append(\"\\\"\");\n      myExtraSyspath = arg_builder.toString();\n    }\n    return myExtraSyspath;\n  }","id":96560,"modified_method":"private static String getExtraSysPath(Sdk sdk, String skeletonsPath) {\n    final VirtualFile[] classDirs = sdk.getRootProvider().getFiles(OrderRootType.CLASSES);\n    final StringBuilder builder = new StringBuilder(\"\\\"\");\n    int i = 0;\n    while (i < classDirs.length) {\n      if (i > 0) {\n        builder.append(File.pathSeparator);\n      }\n      if (classDirs[i].isInLocalFileSystem()) {\n        final String pathname = classDirs[i].getPath();\n        if (!skeletonsPath.equals(pathname)) {\n          builder.append(pathname);\n        }\n      }\n      i += 1;\n    }\n    builder.append(\"\\\"\");\n    return builder.toString();\n  }","commit_id":"28cb2050f6fa576a8c32c080bbc65e363780a317","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private Map<String, Pair<Integer, Long>> loadBlacklist() {\n    Map<String, Pair<Integer, Long>> ret = new HashMap<String, Pair<Integer, Long>>();\n    File blacklist_file = new File(mySkeletonsPath, BLACKLIST_FILE_NAME);\n    if (blacklist_file.exists() && blacklist_file.canRead()) {\n      Reader input;\n      try {\n        input = new FileReader(blacklist_file);\n        LineNumberReader lines = new LineNumberReader(input);\n        try {\n          String line;\n          do {\n            line = lines.readLine();\n            if (line != null && line.length() > 0 && line.charAt(0) != '#') { // '#' begins a comment\n              Matcher matcher = BLACKLIST_LINE.matcher(line);\n              boolean not_parsed = true;\n              if (matcher.matches()) {\n                final int version = fromVersionString(matcher.group(2));\n                if (version > 0) {\n                  try {\n                    final long timestamp = Long.parseLong(matcher.group(3));\n                    final String filename = matcher.group(1);\n                    ret.put(filename, new Pair<Integer, Long>(version, timestamp));\n                    not_parsed = false;\n                  }\n                  catch (NumberFormatException ignore) {}\n                }\n              }\n              if (not_parsed) LOG.warn(\"In blacklist at \" + mySkeletonsPath + \" strange line '\" + line + \"'\");\n            }\n          } while (line != null);\n        }\n        catch (IOException ex) {\n          LOG.warn(\"Failed to read blacklist in \" + mySkeletonsPath, ex);\n        }\n        finally {\n          lines.close();\n        }\n      }\n      catch (IOException ignore) {  }\n    }\n    return ret;\n  }","id":96561,"modified_method":"@NotNull\n  private static ListBinariesResult listBinaries(Sdk sdk, String extraSysPath) {\n    final String homePath = sdk.getHomePath();\n    final String parentDir = new File(homePath).getParent();\n    final long startTime = System.currentTimeMillis();\n    final String[] cmd = new String[] {homePath, PythonHelpersLocator.getHelperPath(GENERATOR3), \"-v\", \"-L\", \"-s\", extraSysPath};\n    final ProcessOutput process = SdkUtil.getProcessOutput(parentDir,\n                                                           cmd,\n                                                           PythonSdkType.getVirtualEnvAdditionalEnv(homePath),\n                                                           MINUTE * 4); // see PY-3898\n    LOG.info(\"Retrieving binary module list took \" + (System.currentTimeMillis() - startTime) + \" ms\");\n    if (process.getExitCode() != 0) {\n      final StringBuilder sb = new StringBuilder(\"failed to run \").append(GENERATOR3).append(\" for \").append(homePath);\n      if (process.isTimeout()) {\n        sb.append(\": timed out.\");\n      }\n      else {\n        sb.append(\", exit code \")\n          .append(process.getExitCode())\n          .append(\", stderr: \\n-----\\n\");\n        for (String line : process.getStderrLines()) {\n          sb.append(line).append(\"\\n\");\n        }\n        sb.append(\"-----\");\n      }\n      throw new InvalidSdkException(sb.toString());\n    }\n    final List<String> lines = process.getStdoutLines();\n    if (lines.size() < 1) {\n      throw new InvalidSdkException(\"Empty output from \" + GENERATOR3 + \" for \" + homePath);\n    }\n    final Iterator<String> iter = lines.iterator();\n    final int generatorVersion = fromVersionString(iter.next().trim());\n    final Map<String, File> binaries = new HashMap<String, File>();\n    while (iter.hasNext()) {\n      final String line = iter.next();\n      int cutpos = line.indexOf(' ');\n      if (cutpos >= 0) {\n        String moduleName = line.substring(0, cutpos);\n        String path = line.substring(cutpos + 1);\n        binaries.put(moduleName, new File(path));\n      }\n      else {\n        LOG.error(\"Bad binaries line: '\" + line + \"', SDK \" + homePath); // but don't die yet\n      }\n    }\n    return new ListBinariesResult(generatorVersion, binaries);\n  }","commit_id":"28cb2050f6fa576a8c32c080bbc65e363780a317","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public final void initialize(TwillContext context) {\n    super.initialize(context);\n\n    name = context.getSpecification().getName();\n    Map<String, String> configs = context.getSpecification().getConfigs();\n\n    try {\n      // Load configuration\n      hConf = new Configuration();\n      hConf.clear();\n      hConf.addResource(new File(configs.get(\"hConf\")).toURI().toURL());\n\n      UserGroupInformation.setConfiguration(hConf);\n\n      cConf = CConfiguration.create();\n      cConf.clear();\n      cConf.addResource(new File(configs.get(\"cConf\")).toURI().toURL());\n\n      LOG.debug(\"{} cConf {}\", name, cConf);\n      LOG.debug(\"{} HBase conf {}\", name, hConf);\n\n      doInit(context);\n\n      services = Lists.newArrayList();\n      getServices(services);\n      Preconditions.checkArgument(!services.isEmpty(), \"Should have at least one service\");\n\n    } catch (Throwable t) {\n      throw Throwables.propagate(t);\n    }\n  }","id":96562,"modified_method":"@Override\n  public final void initialize(TwillContext context) {\n    super.initialize(context);\n\n    name = context.getSpecification().getName();\n    Map<String, String> configs = context.getSpecification().getConfigs();\n\n    try {\n      // Load configuration\n      hConf = new Configuration();\n      hConf.clear();\n      hConf.addResource(new File(configs.get(\"hConf\")).toURI().toURL());\n\n      UserGroupInformation.setConfiguration(hConf);\n\n      cConf = CConfiguration.create(new File(configs.get(\"cConf\")).toURI().toURL());\n\n      LOG.debug(\"{} cConf {}\", name, cConf);\n      LOG.debug(\"{} HBase conf {}\", name, hConf);\n\n      doInit(context);\n\n      services = Lists.newArrayList();\n      getServices(services);\n      Preconditions.checkArgument(!services.isEmpty(), \"Should have at least one service\");\n\n    } catch (Throwable t) {\n      throw Throwables.propagate(t);\n    }\n  }","commit_id":"1e23ec333ad2b747a22dc06e2a251ca5e2d79e05","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void initialize(TwillContext context) {\n    System.setSecurityManager(new RunnableSecurityManager(System.getSecurityManager()));\n\n    runlatch = new CountDownLatch(1);\n    name = context.getSpecification().getName();\n    Map<String, String> configs = context.getSpecification().getConfigs();\n\n    LOG.info(\"Initialize runnable: \" + name);\n    try {\n      CommandLine cmdLine = parseArgs(context.getApplicationArguments());\n\n      // Loads configurations\n      hConf = new Configuration();\n      hConf.clear();\n      hConf.addResource(new File(configs.get(\"hConf\")).toURI().toURL());\n\n      UserGroupInformation.setConfiguration(hConf);\n\n      cConf = CConfiguration.create();\n      cConf.clear();\n      cConf.addResource(new File(configs.get(\"cConf\")).toURI().toURL());\n\n      // Alter the template directory to only the name part in the container directory.\n      // It works in pair with the ProgramRunner.\n      // See AbstractDistributedProgramRunner\n      File templateDir = new File(cConf.get(Constants.AppFabric.APP_TEMPLATE_DIR));\n      cConf.set(Constants.AppFabric.APP_TEMPLATE_DIR, templateDir.getName());\n\n      injector = Guice.createInjector(createModule(context));\n\n      zkClientService = injector.getInstance(ZKClientService.class);\n      kafkaClientService = injector.getInstance(KafkaClientService.class);\n      metricsCollectionService = injector.getInstance(MetricsCollectionService.class);\n      streamCoordinatorClient = injector.getInstance(StreamCoordinatorClient.class);\n\n      // Initialize log appender\n      logAppenderInitializer = injector.getInstance(LogAppenderInitializer.class);\n      logAppenderInitializer.initialize();\n\n      try {\n        program = injector.getInstance(ProgramFactory.class)\n          .create(cmdLine.getOptionValue(RunnableOptions.JAR));\n      } catch (IOException e) {\n        throw Throwables.propagate(e);\n      }\n\n      programOpts = createProgramOptions(cmdLine, context, configs);\n      resourceReporter = new ProgramRunnableResourceReporter(program, metricsCollectionService, context);\n\n      LOG.info(\"Runnable initialized: \" + name);\n    } catch (Throwable t) {\n      LOG.error(t.getMessage(), t);\n      throw Throwables.propagate(t);\n    }\n  }","id":96563,"modified_method":"@Override\n  public void initialize(TwillContext context) {\n    System.setSecurityManager(new RunnableSecurityManager(System.getSecurityManager()));\n\n    runlatch = new CountDownLatch(1);\n    name = context.getSpecification().getName();\n    Map<String, String> configs = context.getSpecification().getConfigs();\n\n    LOG.info(\"Initialize runnable: \" + name);\n    try {\n      CommandLine cmdLine = parseArgs(context.getApplicationArguments());\n\n      // Loads configurations\n      hConf = new Configuration();\n      hConf.clear();\n      hConf.addResource(new File(configs.get(\"hConf\")).toURI().toURL());\n\n      UserGroupInformation.setConfiguration(hConf);\n\n      cConf = CConfiguration.create(new File(configs.get(\"cConf\")).toURI().toURL());\n\n      // Alter the template directory to only the name part in the container directory.\n      // It works in pair with the ProgramRunner.\n      // See AbstractDistributedProgramRunner\n      File templateDir = new File(cConf.get(Constants.AppFabric.APP_TEMPLATE_DIR));\n      cConf.set(Constants.AppFabric.APP_TEMPLATE_DIR, templateDir.getName());\n\n      injector = Guice.createInjector(createModule(context));\n\n      zkClientService = injector.getInstance(ZKClientService.class);\n      kafkaClientService = injector.getInstance(KafkaClientService.class);\n      metricsCollectionService = injector.getInstance(MetricsCollectionService.class);\n      streamCoordinatorClient = injector.getInstance(StreamCoordinatorClient.class);\n\n      // Initialize log appender\n      logAppenderInitializer = injector.getInstance(LogAppenderInitializer.class);\n      logAppenderInitializer.initialize();\n\n      try {\n        program = injector.getInstance(ProgramFactory.class)\n          .create(cmdLine.getOptionValue(RunnableOptions.JAR));\n      } catch (IOException e) {\n        throw Throwables.propagate(e);\n      }\n\n      programOpts = createProgramOptions(cmdLine, context, configs);\n      resourceReporter = new ProgramRunnableResourceReporter(program, metricsCollectionService, context);\n\n      LOG.info(\"Runnable initialized: \" + name);\n    } catch (Throwable t) {\n      LOG.error(t.getMessage(), t);\n      throw Throwables.propagate(t);\n    }\n  }","commit_id":"1e23ec333ad2b747a22dc06e2a251ca5e2d79e05","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public CConfiguration decode(byte[] data) throws IOException {\n    if (data == null) {\n      return CConfiguration.create();\n    }\n\n    ByteArrayInputStream bin = new ByteArrayInputStream(data);\n    CConfiguration cConfiguration = CConfiguration.create();\n    cConfiguration.clear();\n    cConfiguration.addResource(bin);\n    return cConfiguration;\n  }","id":96564,"modified_method":"@Override\n  public CConfiguration decode(byte[] data) throws IOException {\n    if (data == null) {\n      return CConfiguration.create();\n    }\n\n    ByteArrayInputStream bin = new ByteArrayInputStream(data);\n    return CConfiguration.create(bin);\n  }","commit_id":"1e23ec333ad2b747a22dc06e2a251ca5e2d79e05","url":"https://github.com/caskdata/cdap"},{"original_method":"@Test\n  public void testConfig() {\n\n    // cConf\n    CConfiguration cConf = CConfiguration.create();\n    cConf.clear();\n\n    String cConfResourceString =\n      \"<configuration>\\n\" +\n        \"\\n\" +\n        \"  <property>\\n\" +\n        \"    <name>stream.zz.threshold<\/name>\\n\" +\n        \"    <value>1<\/value>\\n\" +\n        \"    <description>Some description<\/description>\\n\" +\n        \"  <\/property>\\n\" +\n        \"\\n\" +\n        \"<\/configuration>\";\n    ReaderInputStream cConfResource = new ReaderInputStream(new StringReader(cConfResourceString));\n    cConf.addResource(cConfResource);\n\n    ConfigEntry cConfEntry = new ConfigEntry(\n      \"stream.zz.threshold\", \"1\", cConfResource.toString());\n\n    // hConf\n    Configuration hConf = new Configuration();\n    String hConfResourceString =\n      \"<configuration>\\n\" +\n      \"\\n\" +\n      \"  <property>\\n\" +\n      \"    <name>stream.notification.threshold<\/name>\\n\" +\n      \"    <value>3<\/value>\\n\" +\n      \"    <description>Some description<\/description>\\n\" +\n      \"  <\/property>\\n\" +\n      \"\\n\" +\n      \"<\/configuration>\";\n    ReaderInputStream hConfResource = new ReaderInputStream(new StringReader(hConfResourceString));\n    hConf.addResource(hConfResource);\n\n    ConfigEntry hConfEntry = new ConfigEntry(\n      \"stream.notification.threshold\", \"3\", hConfResource.toString());\n\n    // test\n    ConfigService configService = new ConfigService(cConf, hConf);\n    List<ConfigEntry> cConfEntries = configService.getCConf();\n    Assert.assertTrue(cConfEntries.contains(cConfEntry));\n\n    List<ConfigEntry> hConfEntries = configService.getHConf();\n    Assert.assertTrue(hConfEntries.contains(hConfEntry));\n  }","id":96565,"modified_method":"@Test\n  public void testConfig() {\n    String cConfResourceString =\n      \"<configuration>\\n\" +\n        \"\\n\" +\n        \"  <property>\\n\" +\n        \"    <name>stream.zz.threshold<\/name>\\n\" +\n        \"    <value>1<\/value>\\n\" +\n        \"    <description>Some description<\/description>\\n\" +\n        \"  <\/property>\\n\" +\n        \"\\n\" +\n        \"<\/configuration>\";\n    ReaderInputStream cConfResource = new ReaderInputStream(new StringReader(cConfResourceString));\n    CConfiguration cConf = CConfiguration.create(cConfResource);\n\n    ConfigEntry cConfEntry = new ConfigEntry(\n      \"stream.zz.threshold\", \"1\", cConfResource.toString());\n\n    // hConf\n    Configuration hConf = new Configuration();\n    String hConfResourceString =\n      \"<configuration>\\n\" +\n      \"\\n\" +\n      \"  <property>\\n\" +\n      \"    <name>stream.notification.threshold<\/name>\\n\" +\n      \"    <value>3<\/value>\\n\" +\n      \"    <description>Some description<\/description>\\n\" +\n      \"  <\/property>\\n\" +\n      \"\\n\" +\n      \"<\/configuration>\";\n    ReaderInputStream hConfResource = new ReaderInputStream(new StringReader(hConfResourceString));\n    hConf.addResource(hConfResource);\n\n    ConfigEntry hConfEntry = new ConfigEntry(\n      \"stream.notification.threshold\", \"3\", hConfResource.toString());\n\n    // test\n    ConfigService configService = new ConfigService(cConf, hConf);\n    List<ConfigEntry> cConfEntries = configService.getCConf();\n    Assert.assertTrue(cConfEntries.contains(cConfEntry));\n\n    List<ConfigEntry> hConfEntries = configService.getHConf();\n    Assert.assertTrue(hConfEntries.contains(hConfEntry));\n  }","commit_id":"1e23ec333ad2b747a22dc06e2a251ca5e2d79e05","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void initialize(TwillContext context) {\n    super.initialize(context);\n\n    completion = SettableFuture.create();\n    name = context.getSpecification().getName();\n    Map<String, String> configs = context.getSpecification().getConfigs();\n\n    LOG.info(\"Initialize runnable: \" + name);\n    try {\n      // Load configuration\n      Configuration hConf = new Configuration();\n      hConf.clear();\n      hConf.addResource(new File(configs.get(\"hConf\")).toURI().toURL());\n\n      UserGroupInformation.setConfiguration(hConf);\n\n      CConfiguration cConf = CConfiguration.create();\n      cConf.clear();\n      cConf.addResource(new File(configs.get(\"cConf\")).toURI().toURL());\n      cConf.set(Constants.LogSaver.ADDRESS, context.getHost().getCanonicalHostName());\n\n      // Initialize ZK client\n      String zookeeper = cConf.get(Constants.Zookeeper.QUORUM);\n      if (zookeeper == null) {\n        LOG.error(\"No ZooKeeper quorum provided.\");\n        throw new IllegalStateException(\"No ZooKeeper quorum provided.\");\n      }\n\n      Injector injector = createGuiceInjector(cConf, hConf);\n      zkClientService = injector.getInstance(ZKClientService.class);\n      kafkaClientService = injector.getInstance(KafkaClientService.class);\n      logSaverService = injector.getInstance(KafkaLogSaverService.class);\n\n      int numPartitions = Integer.parseInt(cConf.get(LoggingConfiguration.NUM_PARTITIONS,\n                                                     LoggingConfiguration.DEFAULT_NUM_PARTITIONS));\n      LOG.info(\"Num partitions = {}\", numPartitions);\n\n      logSaverStatusService = injector.getInstance(LogSaverStatusService.class);\n      metricsCollectionService = injector.getInstance(MetricsCollectionService.class);\n      LOG.info(\"Runnable initialized: \" + name);\n    } catch (Throwable t) {\n      LOG.error(t.getMessage(), t);\n      throw Throwables.propagate(t);\n    }\n  }","id":96566,"modified_method":"@Override\n  public void initialize(TwillContext context) {\n    super.initialize(context);\n\n    completion = SettableFuture.create();\n    name = context.getSpecification().getName();\n    Map<String, String> configs = context.getSpecification().getConfigs();\n\n    LOG.info(\"Initialize runnable: \" + name);\n    try {\n      // Load configuration\n      Configuration hConf = new Configuration();\n      hConf.clear();\n      hConf.addResource(new File(configs.get(\"hConf\")).toURI().toURL());\n\n      UserGroupInformation.setConfiguration(hConf);\n\n      CConfiguration cConf = CConfiguration.create(new File(configs.get(\"cConf\")).toURI().toURL());\n\n      cConf.set(Constants.LogSaver.ADDRESS, context.getHost().getCanonicalHostName());\n\n      // Initialize ZK client\n      String zookeeper = cConf.get(Constants.Zookeeper.QUORUM);\n      if (zookeeper == null) {\n        LOG.error(\"No ZooKeeper quorum provided.\");\n        throw new IllegalStateException(\"No ZooKeeper quorum provided.\");\n      }\n\n      Injector injector = createGuiceInjector(cConf, hConf);\n      zkClientService = injector.getInstance(ZKClientService.class);\n      kafkaClientService = injector.getInstance(KafkaClientService.class);\n      logSaverService = injector.getInstance(KafkaLogSaverService.class);\n\n      int numPartitions = Integer.parseInt(cConf.get(LoggingConfiguration.NUM_PARTITIONS,\n                                                     LoggingConfiguration.DEFAULT_NUM_PARTITIONS));\n      LOG.info(\"Num partitions = {}\", numPartitions);\n\n      logSaverStatusService = injector.getInstance(LogSaverStatusService.class);\n      metricsCollectionService = injector.getInstance(MetricsCollectionService.class);\n      LOG.info(\"Runnable initialized: \" + name);\n    } catch (Throwable t) {\n      LOG.error(t.getMessage(), t);\n      throw Throwables.propagate(t);\n    }\n  }","commit_id":"1e23ec333ad2b747a22dc06e2a251ca5e2d79e05","url":"https://github.com/caskdata/cdap"},{"original_method":"public CConfiguration getConf() {\n    CConfiguration conf = CConfiguration.createEmpty();\n    conf.addResource(new ByteArrayInputStream(hConf.get(HCONF_ATTR_CCONF).getBytes()));\n    return conf;\n  }","id":96567,"modified_method":"public CConfiguration getConf() {\n    return CConfiguration.create(new ByteArrayInputStream(Bytes.toBytes(hConf.get(HCONF_ATTR_CCONF))));\n  }","commit_id":"1e23ec333ad2b747a22dc06e2a251ca5e2d79e05","url":"https://github.com/caskdata/cdap"},{"original_method":"private static CConfiguration createCConf() throws MalformedURLException {\n    CConfiguration cConf = CConfiguration.create();\n    cConf.clear();\n    cConf.addResource(new File(CCONF_FILE_NAME).toURI().toURL());\n    return cConf;\n  }","id":96568,"modified_method":"private static CConfiguration createCConf() throws MalformedURLException {\n    return CConfiguration.create(new File(CCONF_FILE_NAME).toURI().toURL());\n  }","commit_id":"1e23ec333ad2b747a22dc06e2a251ca5e2d79e05","url":"https://github.com/caskdata/cdap"},{"original_method":"public static void warnUnavailableCrypto(RouterContext ctx) {\n        if (SystemVersion.isAndroid())\n            return;\n        boolean unavail = false;\n        Log log = null;\n        for (SigType t : SigType.values()) {\n            if (!t.isAvailable()) {\n                if (!unavail) {\n                    unavail = true;\n                    log = ctx.logManager().getLog(CryptoChecker.class);\n                }\n                String s = \"Crypto \" + t + \" is not available\";\n                log.logAlways(log.WARN, s);\n                System.out.println(\"Warning: \" + s);\n            }\n        }\n        if (unavail) {\n            if (!SystemVersion.isJava7()) {\n                String s = \"Java version: \" + System.getProperty(\"java.version\") + \" Please consider upgrading to Java 7\";\n                log.logAlways(log.WARN, s);\n                System.out.println(s);\n            }\n            if (!isUnlimited()) {\n                String s = \"Please consider installing the Java Cryptography Unlimited Strength Jurisdiction Policy Files from \";\n                //if (SystemVersion.isJava8())\n                //    s  += JRE8;\n                //else if (SystemVersion.isJava7())\n                //    s  += JRE7;\n                //else\n                    s  += JRE6;\n                log.logAlways(log.WARN, s);\n                System.out.println(s);\n            }\n            String s = \"This crypto will be required in a future release\";\n            log.logAlways(log.WARN, s);\n            System.out.println(\"Warning: \" + s);\n        }\n    }","id":96569,"modified_method":"/**\n     *  @param ctx if null, logs only to System.out (called from main)\n     */\n    public static void warnUnavailableCrypto(RouterContext ctx) {\n        if (SystemVersion.isAndroid())\n            return;\n        boolean unavail = false;\n        Log log = null;\n        for (SigType t : SigType.values()) {\n            if (!t.isAvailable()) {\n                if (!unavail) {\n                    unavail = true;\n                    if (ctx != null)\n                        log = ctx.logManager().getLog(CryptoChecker.class);\n                }\n                String s = \"Crypto \" + t + \" is not available\";\n                if (log != null)\n                    log.logAlways(log.WARN, s);\n                System.out.println(\"Warning: \" + s);\n            }\n        }\n        if (unavail) {\n            if (!SystemVersion.isJava7()) {\n                String s = \"Java version: \" + System.getProperty(\"java.version\") + \" Please consider upgrading to Java 7\";\n                if (log != null)\n                    log.logAlways(log.WARN, s);\n                System.out.println(s);\n            }\n            if (!isUnlimited()) {\n                String s = \"Please consider installing the Java Cryptography Unlimited Strength Jurisdiction Policy Files from \";\n                //if (SystemVersion.isJava8())\n                //    s  += JRE8;\n                //else if (SystemVersion.isJava7())\n                //    s  += JRE7;\n                //else\n                    s  += JRE6;\n                if (log != null)\n                    log.logAlways(log.WARN, s);\n                System.out.println(s);\n            }\n            String s = \"This crypto will be required in a future release\";\n            if (log != null)\n                log.logAlways(log.WARN, s);\n            System.out.println(\"Warning: \" + s);\n        } else if (ctx == null) {\n            // called from main()\n            System.out.println(\"All crypto available\");\n        }\n    }","commit_id":"ca7873eda78b58aa5a4874289a1ab456a62b8dd8","url":"https://github.com/i2p/i2p.i2p"},{"original_method":"@Nullable\n  private static String getSupportedProfiles(final String descriptorPath) {\n    final File descriptorFile = new File(descriptorPath);\n    if (descriptorFile.isFile()) {\n      try {\n        final Document document = JDOMUtil.loadDocument(descriptorFile);\n        final Element rootElement = document.getRootElement();\n        if (rootElement != null) {\n          return rootElement.getChildTextNormalize(\"supportedProfiles\", rootElement.getNamespace());\n        }\n      }\n      catch (JDOMException ignore) {/*ignore*/}\n      catch (IOException ignore) {/*ignore*/}\n    }\n\n    return null;\n  }","id":96570,"modified_method":"@Nullable\n  private static String getSupportedProfiles(final String descriptorPath) {\n    final File descriptorFile = new File(descriptorPath);\n    if (descriptorFile.isFile()) {\n      try {\n        return JDOMUtil.load(descriptorFile).getChildTextNormalize(\"supportedProfiles\", JDOMUtil.load(descriptorFile).getNamespace());\n      }\n      catch (JDOMException ignore) {/*ignore*/}\n      catch (IOException ignore) {/*ignore*/}\n    }\n\n    return null;\n  }","commit_id":"4f55240539ceb899e4fec22b796e887f4f0db714","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static String replaceMacros(final String wrapperText, final String outputFileName, final String targetPlayer,\n                                      final String mainClassPath) {\n    final Map<String, String> replacementMap = new THashMap<String, String>();\n\n    replacementMap.put(FlexCommonUtils.SWF_MACRO, outputFileName);\n    replacementMap.put(FlexCommonUtils.TITLE_MACRO, outputFileName);\n    replacementMap.put(FlexCommonUtils.APPLICATION_MACRO, outputFileName);\n    replacementMap.put(FlexCommonUtils.BG_COLOR_MACRO, \"#ffffff\");\n    replacementMap.put(FlexCommonUtils.WIDTH_MACRO, \"100%\");\n    replacementMap.put(FlexCommonUtils.HEIGHT_MACRO, \"100%\");\n\n    final List<String> versionParts = StringUtil.split(targetPlayer, \".\");\n    replacementMap.put(FlexCommonUtils.VERSION_MAJOR_MACRO, versionParts.size() >= 1 ? versionParts.get(0) : \"0\");\n    replacementMap.put(FlexCommonUtils.VERSION_MINOR_MACRO, versionParts.size() >= 2 ? versionParts.get(1) : \"0\");\n    replacementMap.put(FlexCommonUtils.VERSION_REVISION_MACRO, versionParts.size() >= 3 ? versionParts.get(2) : \"0\");\n\n    String swfMetadata = null;\n\n    final File mainClassFile = new File(mainClassPath);\n    if (mainClassFile.isFile()) {\n      try {\n        if (FileUtilRt.extensionEquals(mainClassPath, \"mxml\")) {\n          final Document document = JDOMUtil.loadDocument(mainClassFile);\n          final Element rootElement = document.getRootElement();\n          Element metadataElement = rootElement.getChild(\"Metadata\", Namespace.getNamespace(\"http://www.adobe.com/2006/mxml\"));\n          if (metadataElement == null) {\n            metadataElement = rootElement.getChild(\"Metadata\", Namespace.getNamespace(\"http://ns.adobe.com/mxml/2009\"));\n          }\n          if (metadataElement != null) {\n            swfMetadata = getSwfMetadata(metadataElement.getTextNormalize());\n          }\n        }\n        else if (FileUtilRt.extensionEquals(mainClassPath, \"as\")) {\n          swfMetadata = getSwfMetadata(FileUtil.loadFile(mainClassFile));\n        }\n      }\n      catch (JDOMException ignore) {/*unlucky*/}\n      catch (IOException ignore) {/*unlucky*/}\n    }\n\n    final Map<String, String> attributesMap = getAttributesMap(swfMetadata);\n\n    ContainerUtil.putIfNotNull(FlexCommonUtils.TITLE_MACRO, attributesMap.get(FlexCommonUtils.TITLE_ATTR), replacementMap);\n    ContainerUtil.putIfNotNull(FlexCommonUtils.BG_COLOR_MACRO, attributesMap.get(FlexCommonUtils.BG_COLOR_ATTR), replacementMap);\n    ContainerUtil.putIfNotNull(FlexCommonUtils.WIDTH_MACRO, attributesMap.get(FlexCommonUtils.WIDTH_ATTR), replacementMap);\n    ContainerUtil.putIfNotNull(FlexCommonUtils.HEIGHT_MACRO, attributesMap.get(FlexCommonUtils.HEIGHT_ATTR), replacementMap);\n\n    return FlexCommonUtils.replace(wrapperText, replacementMap);\n  }","id":96571,"modified_method":"private static String replaceMacros(final String wrapperText, final String outputFileName, final String targetPlayer,\n                                      final String mainClassPath) {\n    final Map<String, String> replacementMap = new THashMap<String, String>();\n\n    replacementMap.put(FlexCommonUtils.SWF_MACRO, outputFileName);\n    replacementMap.put(FlexCommonUtils.TITLE_MACRO, outputFileName);\n    replacementMap.put(FlexCommonUtils.APPLICATION_MACRO, outputFileName);\n    replacementMap.put(FlexCommonUtils.BG_COLOR_MACRO, \"#ffffff\");\n    replacementMap.put(FlexCommonUtils.WIDTH_MACRO, \"100%\");\n    replacementMap.put(FlexCommonUtils.HEIGHT_MACRO, \"100%\");\n\n    final List<String> versionParts = StringUtil.split(targetPlayer, \".\");\n    replacementMap.put(FlexCommonUtils.VERSION_MAJOR_MACRO, versionParts.size() >= 1 ? versionParts.get(0) : \"0\");\n    replacementMap.put(FlexCommonUtils.VERSION_MINOR_MACRO, versionParts.size() >= 2 ? versionParts.get(1) : \"0\");\n    replacementMap.put(FlexCommonUtils.VERSION_REVISION_MACRO, versionParts.size() >= 3 ? versionParts.get(2) : \"0\");\n\n    String swfMetadata = null;\n\n    final File mainClassFile = new File(mainClassPath);\n    if (mainClassFile.isFile()) {\n      try {\n        if (FileUtilRt.extensionEquals(mainClassPath, \"mxml\")) {\n          final Element rootElement = JDOMUtil.load(mainClassFile);\n          Element metadataElement = rootElement.getChild(\"Metadata\", Namespace.getNamespace(\"http://www.adobe.com/2006/mxml\"));\n          if (metadataElement == null) {\n            metadataElement = rootElement.getChild(\"Metadata\", Namespace.getNamespace(\"http://ns.adobe.com/mxml/2009\"));\n          }\n          if (metadataElement != null) {\n            swfMetadata = getSwfMetadata(metadataElement.getTextNormalize());\n          }\n        }\n        else if (FileUtilRt.extensionEquals(mainClassPath, \"as\")) {\n          swfMetadata = getSwfMetadata(FileUtil.loadFile(mainClassFile));\n        }\n      }\n      catch (JDOMException ignore) {/*unlucky*/}\n      catch (IOException ignore) {/*unlucky*/}\n    }\n\n    final Map<String, String> attributesMap = getAttributesMap(swfMetadata);\n\n    ContainerUtil.putIfNotNull(FlexCommonUtils.TITLE_MACRO, attributesMap.get(FlexCommonUtils.TITLE_ATTR), replacementMap);\n    ContainerUtil.putIfNotNull(FlexCommonUtils.BG_COLOR_MACRO, attributesMap.get(FlexCommonUtils.BG_COLOR_ATTR), replacementMap);\n    ContainerUtil.putIfNotNull(FlexCommonUtils.WIDTH_MACRO, attributesMap.get(FlexCommonUtils.WIDTH_ATTR), replacementMap);\n    ContainerUtil.putIfNotNull(FlexCommonUtils.HEIGHT_MACRO, attributesMap.get(FlexCommonUtils.HEIGHT_ATTR), replacementMap);\n\n    return FlexCommonUtils.replace(wrapperText, replacementMap);\n  }","commit_id":"4f55240539ceb899e4fec22b796e887f4f0db714","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"/**\n     * Create an instance of <tt>StatusConfigForm<\/tt>\n     */\n    public AutoAwayConfigurationPanel()\n    {\n        super(new BorderLayout());\n\n        add(GeneralConfigPluginActivator.createConfigSectionComponent(\n                Resources.getString(\"service.gui.STATUS\")),\n            BorderLayout.WEST);\n        add(createMainPanel());\n\n        initValues();\n    }","id":96572,"modified_method":"/**\n     * Create an instance of <tt>StatusConfigForm<\/tt>\n     */\n    public AutoAwayConfigurationPanel()\n    {\n        setLayout(new BoxLayout(this, BoxLayout.Y_AXIS));\n\n        JPanel pnlSection = GeneralConfigPluginActivator.\n            createConfigSectionComponent(\n                Resources.getString(\"service.gui.STATUS\"));\n        pnlSection.add(createMainPanel());\n        add(pnlSection);\n\n        initValues();\n    }","commit_id":"500005002fc845f5bc079561ca0e7379c584b525","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates a config section label from the given text.\n     * @param labelText the text of the label.\n     * @return the created label\n     */\n    public static Component createConfigSectionComponent(String labelText)\n    {\n        JLabel label = new JLabel(labelText);\n        label.setFont(label.getFont().deriveFont(Font.BOLD));\n        label.setAlignmentX(Component.RIGHT_ALIGNMENT);\n\n        JPanel parentPanel = new TransparentPanel(new BorderLayout());\n        parentPanel.add(label, BorderLayout.NORTH);\n        parentPanel.setPreferredSize(new Dimension(180, 25));\n\n        return parentPanel;\n    }","id":96573,"modified_method":"/**\n     * Creates a config section label from the given text.\n     * @param labelText the text of the label.\n     * @return the created label\n     */\n    public static JPanel createConfigSectionComponent(String labelText)\n    {\n        JLabel label = new JLabel(labelText);\n        label.setBorder(new EmptyBorder(0, 0, 0, 10));\n        label.setFont(label.getFont().deriveFont(Font.BOLD));\n\n        JPanel pnlSectionName = new TransparentPanel();\n        pnlSectionName.setLayout(new GridBagLayout());\n        GridBagConstraints c = new GridBagConstraints();\n        c.gridx = c.gridy = 0;\n        c.anchor = GridBagConstraints.LINE_START;\n        c.gridwidth = 2;\n        pnlSectionName.add(label, c);\n        c.gridx = 2;\n        c.weightx = 1;\n        c.fill = GridBagConstraints.HORIZONTAL;\n        pnlSectionName.add(new JSeparator(), c);\n\n        JPanel pnlSection = new TransparentPanel()\n        {\n            @Override\n            public Component add(Component comp)\n            {\n                if(comp instanceof JComponent)\n                    ((JComponent)comp).setAlignmentX(LEFT_ALIGNMENT);\n                return super.add(comp);\n            }\n        };\n        pnlSection.setLayout(new BoxLayout(pnlSection, BoxLayout.Y_AXIS));\n        pnlSection.add(pnlSectionName);\n\n        return pnlSection;\n    }","commit_id":"500005002fc845f5bc079561ca0e7379c584b525","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes the notification configuration panel.\n     * @return the created panel\n     */\n    private Component createNotificationConfigPanel()\n    {\n        ServiceReference[] handlerRefs = null;\n        BundleContext bc = GeneralConfigPluginActivator.bundleContext;\n        try\n        {\n            handlerRefs = bc.getServiceReferences(\n                PopupMessageHandler.class.getName(),\n                null);\n        }\n        catch (InvalidSyntaxException ex)\n        {\n            logger.warn(\"Error while retrieving service refs\", ex);\n        }\n\n        if (handlerRefs == null)\n            return null;\n\n        JPanel notifConfigPanel = new TransparentPanel(new BorderLayout());\n\n        notifConfigPanel.add(\n            GeneralConfigPluginActivator.createConfigSectionComponent(\n                Resources.getString(\n                    \"plugin.notificationconfig.POPUP_NOTIF_HANDLER\")),\n            BorderLayout.WEST);\n\n        final JComboBox notifConfigComboBox = new JComboBox();\n\n        String configuredHandler = (String) GeneralConfigPluginActivator\n            .getConfigurationService().getProperty(\"systray.POPUP_HANDLER\");\n\n        for (ServiceReference ref : handlerRefs)\n        {\n            PopupMessageHandler handler =\n                (PopupMessageHandler) bc.getService(ref);\n\n            notifConfigComboBox.addItem(handler);\n\n            if (configuredHandler != null && \n                configuredHandler.equals(handler.getClass().getName()))\n            {\n                notifConfigComboBox.setSelectedItem(handler);\n            }\n        }\n\n        // We need an entry in combo box that represents automatic\n        // popup handler selection in systray service. It is selected\n        // only if there is no user preference regarding which popup \n        // handler to use.\n        String auto = \"Auto\";\n        notifConfigComboBox.addItem(auto);\n        if (configuredHandler == null)\n        {\n            notifConfigComboBox.setSelectedItem(auto);\n        }\n\n        notifConfigComboBox.addItemListener(new ItemListener()\n        {\n            public void itemStateChanged(ItemEvent evt)\n            {\n                if (notifConfigComboBox.getSelectedItem() instanceof String)\n                {\n                    // \"Auto\" selected. Delete the user's preference and\n                    // select the best available handler.\n                    ConfigurationManager.setPopupHandlerConfig(null);\n                    GeneralConfigPluginActivator.getSystrayService()\n                        .selectBestPopupMessageHandler();\n                    \n                } else\n                {\n                    PopupMessageHandler handler =\n                        (PopupMessageHandler)\n                        notifConfigComboBox.getSelectedItem();\n\n                    ConfigurationManager.setPopupHandlerConfig(\n                        handler.getClass().getName());\n\n                    GeneralConfigPluginActivator.getSystrayService()\n                        .setActivePopupMessageHandler(handler);\n                }\n            }\n        });\n        notifConfigPanel.add(notifConfigComboBox);\n\n        return notifConfigPanel;\n    }","id":96574,"modified_method":"/**\n     * Initializes the notification configuration panel.\n     * @return the created panel\n     */\n    private Component createNotificationConfigPanel()\n    {\n        ServiceReference[] handlerRefs = null;\n        BundleContext bc = GeneralConfigPluginActivator.bundleContext;\n        try\n        {\n            handlerRefs = bc.getServiceReferences(\n                PopupMessageHandler.class.getName(),\n                null);\n        }\n        catch (InvalidSyntaxException ex)\n        {\n            logger.warn(\"Error while retrieving service refs\", ex);\n        }\n\n        if (handlerRefs == null)\n            return null;\n\n        JPanel notifConfigPanel = GeneralConfigPluginActivator.\n            createConfigSectionComponent(\n                Resources.getString(\n                    \"plugin.notificationconfig.POPUP_NOTIF_HANDLER\"));\n\n        final JComboBox notifConfigComboBox = new JComboBox();\n\n        String configuredHandler = (String) GeneralConfigPluginActivator\n            .getConfigurationService().getProperty(\"systray.POPUP_HANDLER\");\n\n        for (ServiceReference ref : handlerRefs)\n        {\n            PopupMessageHandler handler =\n                (PopupMessageHandler) bc.getService(ref);\n\n            notifConfigComboBox.addItem(handler);\n\n            if (configuredHandler != null && \n                configuredHandler.equals(handler.getClass().getName()))\n            {\n                notifConfigComboBox.setSelectedItem(handler);\n            }\n        }\n\n        // We need an entry in combo box that represents automatic\n        // popup handler selection in systray service. It is selected\n        // only if there is no user preference regarding which popup \n        // handler to use.\n        String auto = \"Auto\";\n        notifConfigComboBox.addItem(auto);\n        if (configuredHandler == null)\n        {\n            notifConfigComboBox.setSelectedItem(auto);\n        }\n\n        notifConfigComboBox.addItemListener(new ItemListener()\n        {\n            public void itemStateChanged(ItemEvent evt)\n            {\n                if (notifConfigComboBox.getSelectedItem() instanceof String)\n                {\n                    // \"Auto\" selected. Delete the user's preference and\n                    // select the best available handler.\n                    ConfigurationManager.setPopupHandlerConfig(null);\n                    GeneralConfigPluginActivator.getSystrayService()\n                        .selectBestPopupMessageHandler();\n                    \n                } else\n                {\n                    PopupMessageHandler handler =\n                        (PopupMessageHandler)\n                        notifConfigComboBox.getSelectedItem();\n\n                    ConfigurationManager.setPopupHandlerConfig(\n                        handler.getClass().getName());\n\n                    GeneralConfigPluginActivator.getSystrayService()\n                        .setActivePopupMessageHandler(handler);\n                }\n            }\n        });\n        notifConfigPanel.add(notifConfigComboBox);\n\n        return notifConfigPanel;\n    }","commit_id":"500005002fc845f5bc079561ca0e7379c584b525","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates the general configuration panel.\n     */\n    public GeneralConfigurationPanel()\n    {\n        super(new BorderLayout());\n\n        TransparentPanel mainPanel = new TransparentPanel();\n\n        BoxLayout boxLayout = new BoxLayout(mainPanel, BoxLayout.Y_AXIS);\n        mainPanel.setLayout(boxLayout);\n        this.add(mainPanel, BorderLayout.NORTH);\n\n        Component startupConfigPanel = createStartupConfigPanel();\n        if (startupConfigPanel != null)\n        {\n            mainPanel.add(startupConfigPanel);\n            mainPanel.add(Box.createVerticalStrut(10));\n            mainPanel.add(new JSeparator());\n        }\n\n        mainPanel.add(createMessageConfigPanel());\n        mainPanel.add(new JSeparator());\n\n        mainPanel.add(new AutoAwayConfigurationPanel());\n        mainPanel.add(new JSeparator());\n        mainPanel.add(Box.createVerticalStrut(10));\n\n        Component notifConfigPanel = createNotificationConfigPanel();\n        if (notifConfigPanel != null)\n        {\n            mainPanel.add(notifConfigPanel);\n            mainPanel.add(Box.createVerticalStrut(4));\n            mainPanel.add(new JSeparator());\n            mainPanel.add(Box.createVerticalStrut(10));\n        }\n\n        mainPanel.add(createLocaleConfigPanel());\n        mainPanel.add(Box.createVerticalStrut(4));\n        mainPanel.add(new JSeparator());\n        mainPanel.add(Box.createVerticalStrut(10));\n\n        mainPanel.add(createCallConfigPanel());\n        mainPanel.add(Box.createVerticalStrut(10));\n    }","id":96575,"modified_method":"/**\n     * Creates the general configuration panel.\n     */\n    public GeneralConfigurationPanel()\n    {\n        super(new BorderLayout());\n\n        TransparentPanel mainPanel = new TransparentPanel();\n        BoxLayout boxLayout = new BoxLayout(mainPanel, BoxLayout.Y_AXIS);\n        mainPanel.setLayout(boxLayout);\n        mainPanel.setBorder(new EmptyBorder(0, 0, 0, 10));\n\n        final JScrollPane scroller = new JScrollPane(mainPanel);\n        scroller.setOpaque(false);\n        scroller.getViewport().setOpaque(false);\n        scroller.setPreferredSize(new Dimension(500, 420));\n        scroller.setBorder(new EmptyBorder(0, 0, 0, 0));\n        this.add(scroller, BorderLayout.NORTH);\n\n        Component startupConfigPanel = createStartupConfigPanel();\n        if (startupConfigPanel != null)\n        {\n            mainPanel.add(startupConfigPanel);\n            mainPanel.add(Box.createVerticalStrut(10));\n        }\n\n        mainPanel.add(createMessageConfigPanel());\n        mainPanel.add(Box.createVerticalStrut(10));\n\n        mainPanel.add(new AutoAwayConfigurationPanel());\n        mainPanel.add(Box.createVerticalStrut(10));\n\n        Component notifConfigPanel = createNotificationConfigPanel();\n        if (notifConfigPanel != null)\n        {\n            mainPanel.add(notifConfigPanel);\n            mainPanel.add(Box.createVerticalStrut(10));\n        }\n\n        mainPanel.add(createLocaleConfigPanel());\n        mainPanel.add(Box.createVerticalStrut(10));\n\n        mainPanel.add(createCallConfigPanel());\n        mainPanel.add(Box.createVerticalStrut(10));\n\n        SwingUtilities.invokeLater(new Runnable()\n        {\n            public void run()\n            { \n                scroller.getVerticalScrollBar().setValue(0);\n                scroller.revalidate();\n                scroller.repaint();\n            }\n        });\n    }","commit_id":"500005002fc845f5bc079561ca0e7379c584b525","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates the message configuration panel.\n     * @return the created panel\n     */\n    private Component createMessageConfigPanel()\n    {\n        JPanel messagePanel = new TransparentPanel(new BorderLayout());\n        Component messageLabel\n            = GeneralConfigPluginActivator.createConfigSectionComponent(\n                Resources.getString(\"service.gui.MESSAGE\"));\n\n        JPanel configPanel = new TransparentPanel();\n        configPanel.setLayout(new BoxLayout(configPanel, BoxLayout.Y_AXIS));\n\n        configPanel.add(createGroupMessagesCheckbox());\n        configPanel.add(Box.createVerticalStrut(10));\n\n        configPanel.add(createHistoryPanel());\n        configPanel.add(Box.createVerticalStrut(10));\n\n        configPanel.add(createSendMessagePanel());\n        configPanel.add(Box.createVerticalStrut(10));\n\n        configPanel.add(createTypingNitificationsCheckBox());\n        configPanel.add(Box.createVerticalStrut(10));\n\n        configPanel.add(createBringToFrontCheckBox());\n        configPanel.add(Box.createVerticalStrut(10));\n\n        configPanel.add(createMultichatCheckbox());\n        configPanel.add(Box.createVerticalStrut(10));\n\n        messagePanel.add(messageLabel, BorderLayout.WEST);\n        messagePanel.add(configPanel);\n\n        return messagePanel;\n    }","id":96576,"modified_method":"/**\n     * Creates the message configuration panel.\n     * @return the created panel\n     */\n    private Component createMessageConfigPanel()\n    {\n        JPanel configPanel\n            = GeneralConfigPluginActivator.createConfigSectionComponent(\n                Resources.getString(\"service.gui.MESSAGE\"));\n\n        configPanel.add(createGroupMessagesCheckbox());\n        configPanel.add(createHistoryPanel());\n        configPanel.add(createSendMessagePanel());\n        configPanel.add(createTypingNitificationsCheckBox());\n        configPanel.add(createBringToFrontCheckBox());\n        configPanel.add(createMultichatCheckbox());\n\n        return configPanel;\n    }","commit_id":"500005002fc845f5bc079561ca0e7379c584b525","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes the local configuration panel.\n     * @return the created component\n     */\n    private Component createLocaleConfigPanel()\n    {\n        JPanel localeConfigPanel = new TransparentPanel(new BorderLayout());\n\n        localeConfigPanel.add(\n            GeneralConfigPluginActivator.createConfigSectionComponent(\n                Resources.getString(\n                \"plugin.generalconfig.DEFAULT_LANGUAGE\") + \":\"),\n                BorderLayout.WEST);\n\n        final JComboBox localesConfigComboBox = new JComboBox();\n\n        Iterator<Locale> iter =\n                Resources.getResources().getAvailableLocales();\n        while (iter.hasNext())\n        {\n            Locale locale = iter.next();\n            localesConfigComboBox.addItem(\n                locale.getDisplayLanguage(locale));\n        }\n        Locale currLocale =\n            ConfigurationManager.getCurrentLanguage();\n        localesConfigComboBox.setSelectedItem(currLocale\n            .getDisplayLanguage(currLocale));\n\n        localesConfigComboBox.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n                GeneralConfigPluginActivator.getUIService().getPopupDialog().\n                    showMessagePopupDialog(Resources.getString(\n                    \"plugin.generalconfig.DEFAULT_LANGUAGE_RESTART_WARN\"));\n\n                String language =\n                        (String)localesConfigComboBox.getSelectedItem();\n                Iterator<Locale> iter =\n                    Resources.getResources().getAvailableLocales();\n                while (iter.hasNext())\n                {\n                    Locale locale = iter.next();\n                    if(locale.getDisplayLanguage(locale)\n                        .equals(language))\n                    {\n                        ConfigurationManager.setLanguage(locale);\n                        break;\n                    }\n                }\n            }\n        });\n        localeConfigPanel.add(localesConfigComboBox, BorderLayout.CENTER);\n\n        String label = \"* \" +\n                Resources.getString(\n                        \"plugin.generalconfig.DEFAULT_LANGUAGE_RESTART_WARN\");\n        JLabel warnLabel = new JLabel(label);\n        warnLabel.setToolTipText(label);\n        warnLabel.setForeground(Color.GRAY);\n        warnLabel.setFont(warnLabel.getFont().deriveFont(8));\n        warnLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 8, 0));\n        warnLabel.setHorizontalAlignment(JLabel.RIGHT);\n        localeConfigPanel.add(warnLabel, BorderLayout.SOUTH);\n\n        return localeConfigPanel;\n    }","id":96577,"modified_method":"/**\n     * Initializes the local configuration panel.\n     * @return the created component\n     */\n    private Component createLocaleConfigPanel()\n    {\n        JPanel localeConfigPanel = GeneralConfigPluginActivator.\n            createConfigSectionComponent(\n                Resources.getString(\"plugin.generalconfig.DEFAULT_LANGUAGE\"));\n\n        final JComboBox localesConfigComboBox = new JComboBox();\n\n        Iterator<Locale> iter =\n                Resources.getResources().getAvailableLocales();\n        while (iter.hasNext())\n        {\n            Locale locale = iter.next();\n            localesConfigComboBox.addItem(\n                locale.getDisplayLanguage(locale));\n        }\n        Locale currLocale =\n            ConfigurationManager.getCurrentLanguage();\n        localesConfigComboBox.setSelectedItem(currLocale\n            .getDisplayLanguage(currLocale));\n\n        localesConfigComboBox.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n                GeneralConfigPluginActivator.getUIService().getPopupDialog().\n                    showMessagePopupDialog(Resources.getString(\n                    \"plugin.generalconfig.DEFAULT_LANGUAGE_RESTART_WARN\"));\n\n                String language =\n                        (String)localesConfigComboBox.getSelectedItem();\n                Iterator<Locale> iter =\n                    Resources.getResources().getAvailableLocales();\n                while (iter.hasNext())\n                {\n                    Locale locale = iter.next();\n                    if(locale.getDisplayLanguage(locale)\n                        .equals(language))\n                    {\n                        ConfigurationManager.setLanguage(locale);\n                        break;\n                    }\n                }\n            }\n        });\n        localeConfigPanel.add(localesConfigComboBox);\n\n        String label = \"* \" +\n                Resources.getString(\n                        \"plugin.generalconfig.DEFAULT_LANGUAGE_RESTART_WARN\");\n        JLabel warnLabel = new JLabel(label);\n        warnLabel.setToolTipText(label);\n        warnLabel.setForeground(Color.GRAY);\n        warnLabel.setFont(warnLabel.getFont().deriveFont(8));\n        warnLabel.setBorder(BorderFactory.createEmptyBorder(0, 0, 8, 0));\n        warnLabel.setHorizontalAlignment(JLabel.RIGHT);\n        localeConfigPanel.add(warnLabel);\n\n        return localeConfigPanel;\n    }","commit_id":"500005002fc845f5bc079561ca0e7379c584b525","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates the call configuration panel.\n     *\n     * @return the call configuration panel\n     */\n    private Component createCallConfigPanel()\n    {\n        JPanel callConfigPanel = new TransparentPanel(new BorderLayout());\n\n        callConfigPanel.add(\n            GeneralConfigPluginActivator.createConfigSectionComponent(\n                Resources.getString(\"service.gui.CALL\") + \":\"),\n            BorderLayout.WEST);\n\n        callConfigPanel.add(createNormalizeNumberCheckBox());\n\n        return callConfigPanel;\n    }","id":96578,"modified_method":"/**\n     * Creates the call configuration panel.\n     *\n     * @return the call configuration panel\n     */\n    private Component createCallConfigPanel()\n    {\n        JPanel callConfigPanel = GeneralConfigPluginActivator.\n            createConfigSectionComponent(\n                Resources.getString(\"service.gui.CALL\"));\n\n        callConfigPanel.add(createNormalizeNumberCheckBox());\n\n        return callConfigPanel;\n    }","commit_id":"500005002fc845f5bc079561ca0e7379c584b525","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes the auto start checkbox. Used only on windows.\n     * @return the created auto start check box\n     */\n    private Component createAutoStartCheckBox()\n    {\n        final JCheckBox autoStartCheckBox = new SIPCommCheckBox();\n\n        autoStartCheckBox.setAlignmentX(JCheckBox.LEFT_ALIGNMENT);\n\n        String label = Resources.getString(\n                \"plugin.generalconfig.AUTO_START\",\n                new String[]{getApplicationName()});\n        autoStartCheckBox.setText(label);\n        autoStartCheckBox.setToolTipText(label);\n        autoStartCheckBox.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n                try\n                {\n                    setAutostart(autoStartCheckBox.isSelected());\n                }\n                catch (Exception ex)\n                {\n                    logger.error(\"Cannot create/delete startup shortcut\", ex);\n                }\n            }\n        });\n\n        try\n        {\n            if(WindowsStartup.isStartupEnabled(getApplicationName()))\n                autoStartCheckBox.setSelected(true);\n            else\n                autoStartCheckBox.setSelected(false);\n        }\n        catch (Exception e)\n        {\n            logger.error(e);\n        }\n\n        return autoStartCheckBox;\n    }","id":96579,"modified_method":"/**\n     * Initializes the auto start checkbox. Used only on windows.\n     * @return the created auto start check box\n     */\n    private Component createAutoStartCheckBox()\n    {\n        final JCheckBox autoStartCheckBox = new SIPCommCheckBox();\n\n        String label = Resources.getString(\n                \"plugin.generalconfig.AUTO_START\",\n                new String[]{getApplicationName()});\n        autoStartCheckBox.setText(label);\n        autoStartCheckBox.setToolTipText(label);\n        autoStartCheckBox.addActionListener(new ActionListener()\n        {\n            public void actionPerformed(ActionEvent e)\n            {\n                try\n                {\n                    setAutostart(autoStartCheckBox.isSelected());\n                }\n                catch (Exception ex)\n                {\n                    logger.error(\"Cannot create/delete startup shortcut\", ex);\n                }\n            }\n        });\n\n        try\n        {\n            autoStartCheckBox.setSelected(\n                WindowsStartup.isStartupEnabled(getApplicationName()));\n        }\n        catch (Exception e)\n        {\n            logger.error(e);\n        }\n\n        return autoStartCheckBox;\n    }","commit_id":"500005002fc845f5bc079561ca0e7379c584b525","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes the update check panel.\n     * @return the created component\n     */\n    public Component createUpdateCheckBox()\n    {\n        JCheckBox updateCheckBox = new SIPCommCheckBox();\n\n        updateCheckBox.setText(\n            Resources.getString(\"plugin.generalconfig.CHECK_FOR_UPDATES\"));\n        updateCheckBox.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e)\n            {\n                GeneralConfigPluginActivator.getConfigurationService()\n                    .setProperty(\n                        \"net.java.sip.communicator.plugin.updatechecker.ENABLED\",\n                    Boolean.toString(\n                        ((JCheckBox)e.getSource()).isSelected()));\n            }\n        });\n\n        updateCheckBox.setAlignmentX(Component.LEFT_ALIGNMENT);\n        updateCheckBox.setSelected(\n            GeneralConfigPluginActivator.getConfigurationService().getBoolean((\n                \"net.java.sip.communicator.plugin.updatechecker.ENABLED\"), true));\n\n        return updateCheckBox;\n    }","id":96580,"modified_method":"/**\n     * Initializes the update check panel.\n     * @return the created component\n     */\n    public Component createUpdateCheckBox()\n    {\n        JCheckBox updateCheckBox = new SIPCommCheckBox();\n\n        updateCheckBox.setText(\n            Resources.getString(\"plugin.generalconfig.CHECK_FOR_UPDATES\"));\n        updateCheckBox.addActionListener(new ActionListener() {\n\n            public void actionPerformed(ActionEvent e)\n            {\n                GeneralConfigPluginActivator.getConfigurationService()\n                    .setProperty(\n                        \"net.java.sip.communicator.plugin.updatechecker.ENABLED\",\n                    Boolean.toString(\n                        ((JCheckBox)e.getSource()).isSelected()));\n            }\n        });\n\n        updateCheckBox.setSelected(\n            GeneralConfigPluginActivator.getConfigurationService().getBoolean((\n                \"net.java.sip.communicator.plugin.updatechecker.ENABLED\"), true));\n\n        return updateCheckBox;\n    }","commit_id":"500005002fc845f5bc079561ca0e7379c584b525","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Initializes the startup config panel.\n     * @return the created component\n     */\n    public Component createStartupConfigPanel()\n    {\n        Component updateCheckBox = null;\n        Component autoStartCheckBox = null;\n\n        if (OSUtils.IS_WINDOWS)\n        {\n            autoStartCheckBox = createAutoStartCheckBox();\n            updateCheckBox = createUpdateCheckBox();\n        }\n\n        JPanel updateConfigPanel = null;\n\n        if ((updateCheckBox != null) || (autoStartCheckBox != null))\n        {\n            updateConfigPanel = new TransparentPanel(new BorderLayout());\n            updateConfigPanel.add(\n                    GeneralConfigPluginActivator.createConfigSectionComponent(\n                            Resources.getString(\n                                    \"plugin.generalconfig.STARTUP_CONFIG\")\n                                + \":\"),\n                    BorderLayout.WEST);\n\n            if ((updateCheckBox != null) && (autoStartCheckBox != null))\n            {\n                JPanel checkBoxPanel\n                    = new TransparentPanel(new GridLayout(0, 1));\n\n                checkBoxPanel.add(autoStartCheckBox);\n                checkBoxPanel.add(updateCheckBox);\n                updateConfigPanel.add(checkBoxPanel);\n            }\n            else if (updateCheckBox != null)\n                updateConfigPanel.add(updateCheckBox);\n            else if (autoStartCheckBox != null)\n                updateConfigPanel.add(autoStartCheckBox);\n        }\n        return updateConfigPanel;\n    }","id":96581,"modified_method":"/**\n     * Initializes the startup config panel.\n     * @return the created component\n     */\n    public Component createStartupConfigPanel()\n    {\n        if (!OSUtils.IS_WINDOWS)\n            return null;\n\n        JPanel updateConfigPanel = GeneralConfigPluginActivator.\n            createConfigSectionComponent(\n                Resources.getString(\"plugin.generalconfig.STARTUP_CONFIG\"));\n\n        updateConfigPanel.add(createAutoStartCheckBox());\n        updateConfigPanel.add(createUpdateCheckBox());\n        return updateConfigPanel;\n    }","commit_id":"500005002fc845f5bc079561ca0e7379c584b525","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Test method for {@link org.drools.reteoo.AccumulateNode#assertTuple(org.drools.reteoo.ReteTuple, org.drools.spi.PropagationContext, org.drools.reteoo.ReteooWorkingMemory)}.\n     */\n    public void testAssertTupleWithObjects() {\n        final DefaultFactHandle f0 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"cheese\" );\n        final DefaultFactHandle f1 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"other cheese\" );\n\n        final ReteTuple tuple0 = new ReteTuple( f0 );\n\n        this.node.assertObject( f0,\n                                this.context,\n                                this.workingMemory );\n        this.node.assertObject( f1,\n                                this.context,\n                                this.workingMemory );\n\n        // assert tuple, should add one to left memory\n        this.node.assertTuple( tuple0,\n                               this.context,\n                               this.workingMemory );\n        // check memories \n        assertEquals( 1,\n                      this.memory.getLeftTupleMemory().size() );\n        assertEquals( 2,\n                      this.memory.getRightObjectMemory().size() );\n        Assert.assertEquals( \"Wrong number of elements in matching objects list \",\n                             2,\n                             this.accumulator.getMatchingObjects().size() );\n\n        // assert tuple, should add left memory \n        final ReteTuple tuple1 = new ReteTuple( f1 );\n        this.node.assertTuple( tuple1,\n                               this.context,\n                               this.workingMemory );\n        assertEquals( 2,\n                      this.memory.getLeftTupleMemory().size() );\n        Assert.assertEquals( \"Wrong number of elements in matching objects list \",\n                             2,\n                             this.accumulator.getMatchingObjects().size() );\n\n        final ReteTuple tuple = (ReteTuple) this.memory.getLeftTupleMemory().iterator( this.workingMemory,\n                                                                                       f0 ).next();\n        assertEquals( tuple0,\n                      tuple );\n        assertEquals( tuple1,\n                      tuple.getNext() );\n\n        Assert.assertEquals( \"Two tuples should have been propagated\",\n                             2,\n                             this.sink.getAsserted().size() );\n    }","id":96582,"modified_method":"/**\n     * Test method for {@link org.drools.reteoo.AccumulateNode#assertTuple(org.drools.reteoo.ReteTuple, org.drools.spi.PropagationContext, org.drools.reteoo.ReteooWorkingMemory)}.\n     */\n    public void testAssertTupleWithObjects() {\n        final DefaultFactHandle f0 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"cheese\" );\n        final DefaultFactHandle f1 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"other cheese\" );\n\n        final ReteTuple tuple0 = new ReteTuple( f0 );\n\n        this.node.assertObject( f0,\n                                this.context,\n                                this.workingMemory );\n        this.node.assertObject( f1,\n                                this.context,\n                                this.workingMemory );\n\n        // assert tuple, should add one to left memory\n        this.node.assertTuple( tuple0,\n                               this.context,\n                               this.workingMemory );\n        // check memories \n        assertEquals( 1,\n                      this.memory.getTupleMemory().size() );\n        assertEquals( 2,\n                      this.memory.getFactHandleMemory().size() );\n        Assert.assertEquals( \"Wrong number of elements in matching objects list \",\n                             2,\n                             this.accumulator.getMatchingObjects().size() );\n\n        // assert tuple, should add left memory \n        final ReteTuple tuple1 = new ReteTuple( f1 );\n        this.node.assertTuple( tuple1,\n                               this.context,\n                               this.workingMemory );\n        assertEquals( 2,\n                      this.memory.getTupleMemory().size() );\n        Assert.assertEquals( \"Wrong number of elements in matching objects list \",\n                             2,\n                             this.accumulator.getMatchingObjects().size() );\n\n        final TupleMemory memory = this.memory.getTupleMemory();\n        assertTrue( memory.contains( tuple0 ) );\n        assertTrue( memory.contains( tuple1 ) );\n\n        Assert.assertEquals( \"Two tuples should have been propagated\",\n                             2,\n                             this.sink.getAsserted().size() );\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * Test method for {@link org.drools.reteoo.AccumulateNode#assertTuple(org.drools.reteoo.ReteTuple, org.drools.spi.PropagationContext, org.drools.reteoo.ReteooWorkingMemory)}.\n     */\n    public void testAssertTuple() {\n        final DefaultFactHandle f0 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"cheese\" );\n        final ReteTuple tuple0 = new ReteTuple( f0 );\n\n        // assert tuple, should add one to left memory\n        this.node.assertTuple( tuple0,\n                               this.context,\n                               this.workingMemory );\n        // check memories \n        assertEquals( 1,\n                      this.memory.getLeftTupleMemory().size() );\n        assertEquals( 0,\n                      this.memory.getRightObjectMemory().size() );\n        Assert.assertTrue( \"An empty matching objects list should be propagated\",\n                           this.accumulator.getMatchingObjects().isEmpty() );\n\n        // assert tuple, should add left memory \n        final DefaultFactHandle f1 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"other cheese\" );\n\n        final ReteTuple tuple1 = new ReteTuple( f1 );\n        this.node.assertTuple( tuple1,\n                               this.context,\n                               this.workingMemory );\n        assertEquals( 2,\n                      this.memory.getLeftTupleMemory().size() );\n        Assert.assertTrue( \"An empty matching objects list should be propagated\",\n                           this.accumulator.getMatchingObjects().isEmpty() );\n\n        final ReteTuple tuple = (ReteTuple) this.memory.getLeftTupleMemory().iterator( this.workingMemory,\n                                                                                       f0 ).next();\n        assertEquals( tuple0,\n                      tuple );\n        assertEquals( tuple1,\n                      tuple.getNext() );\n\n        Assert.assertEquals( \"Two tuples should have been propagated\",\n                             2,\n                             this.sink.getAsserted().size() );\n    }","id":96583,"modified_method":"/**\n     * Test method for {@link org.drools.reteoo.AccumulateNode#assertTuple(org.drools.reteoo.ReteTuple, org.drools.spi.PropagationContext, org.drools.reteoo.ReteooWorkingMemory)}.\n     */\n    public void testAssertTuple() {\n        final DefaultFactHandle f0 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"cheese\" );\n        final ReteTuple tuple0 = new ReteTuple( f0 );\n\n        // assert tuple, should add one to left memory\n        this.node.assertTuple( tuple0,\n                               this.context,\n                               this.workingMemory );\n        // check memories \n        assertEquals( 1,\n                      this.memory.getTupleMemory().size() );\n        assertEquals( 0,\n                      this.memory.getFactHandleMemory().size() );\n        Assert.assertTrue( \"An empty matching objects list should be propagated\",\n                           this.accumulator.getMatchingObjects().isEmpty() );\n\n        // assert tuple, should add left memory \n        final DefaultFactHandle f1 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"other cheese\" );\n\n        final ReteTuple tuple1 = new ReteTuple( f1 );\n        this.node.assertTuple( tuple1,\n                               this.context,\n                               this.workingMemory );\n        assertEquals( 2,\n                      this.memory.getTupleMemory().size() );\n        Assert.assertTrue( \"An empty matching objects list should be propagated\",\n                           this.accumulator.getMatchingObjects().isEmpty() );\n\n        TupleMemory memory = this.memory.getTupleMemory();\n        assertTrue( memory.contains( tuple0 ) );\n        assertTrue( memory.contains( tuple1 ) );\n\n        Assert.assertEquals( \"Two tuples should have been propagated\",\n                             2,\n                             this.sink.getAsserted().size() );\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * Test method for {@link org.drools.reteoo.AccumulateNode#retractTuple(org.drools.reteoo.ReteTuple, org.drools.spi.PropagationContext, org.drools.reteoo.ReteooWorkingMemory)}.\n     */\n    public void testRetractTuple() {\n        final DefaultFactHandle f0 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"cheese\" );\n\n        final ReteTuple tuple0 = new ReteTuple( f0 );\n\n        // assert tuple, should add one to left memory\n        this.node.assertTuple( tuple0,\n                               this.context,\n                               this.workingMemory );\n        // check memories \n        assertEquals( 1,\n                      this.memory.getLeftTupleMemory().size() );\n        assertEquals( 0,\n                      this.memory.getRightObjectMemory().size() );\n        Assert.assertTrue( \"An empty matching objects list should be propagated\",\n                           this.accumulator.getMatchingObjects().isEmpty() );\n\n        this.node.retractTuple( tuple0,\n                                this.context,\n                                this.workingMemory );\n        assertEquals( 0,\n                      this.memory.getLeftTupleMemory().size() );\n        assertEquals( 1,\n                      this.sink.getRetracted().size() );\n        assertEquals( 1,\n                      this.sink.getAsserted().size() );\n    }","id":96584,"modified_method":"/**\n     * Test method for {@link org.drools.reteoo.AccumulateNode#retractTuple(org.drools.reteoo.ReteTuple, org.drools.spi.PropagationContext, org.drools.reteoo.ReteooWorkingMemory)}.\n     */\n    public void testRetractTuple() {\n        final DefaultFactHandle f0 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"cheese\" );\n\n        final ReteTuple tuple0 = new ReteTuple( f0 );\n\n        // assert tuple, should add one to left memory\n        this.node.assertTuple( tuple0,\n                               this.context,\n                               this.workingMemory );\n        // check memories \n        assertEquals( 1,\n                      this.memory.getTupleMemory().size() );\n        assertEquals( 0,\n                      this.memory.getFactHandleMemory().size() );\n        Assert.assertTrue( \"An empty matching objects list should be propagated\",\n                           this.accumulator.getMatchingObjects().isEmpty() );\n\n        this.node.retractTuple( tuple0,\n                                this.context,\n                                this.workingMemory );\n        assertEquals( 0,\n                      this.memory.getTupleMemory().size() );\n        assertEquals( 1,\n                      this.sink.getRetracted().size() );\n        assertEquals( 1,\n                      this.sink.getAsserted().size() );\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * Test method for {@link org.drools.reteoo.AccumulateNode#assertObject(InternalFactHandle, org.drools.spi.PropagationContext, InternalWorkingMemory)}.\n     */\n    public void testAssertObject() {\n        final DefaultFactHandle f0 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"cheese\" );\n        final DefaultFactHandle f1 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"other cheese\" );\n\n        final ReteTuple tuple0 = new ReteTuple( f0 );\n\n        // assert tuple, should add one to left memory\n        this.node.assertTuple( tuple0,\n                               this.context,\n                               this.workingMemory );\n\n        // check memory \n        assertEquals( 1,\n                      this.memory.getLeftTupleMemory().size() );\n        assertEquals( 1,\n                      this.sink.getAsserted().size() );\n        assertEquals( 0,\n                      this.accumulator.getMatchingObjects().size() );\n\n        this.node.assertObject( f0,\n                                this.context,\n                                this.workingMemory );\n        assertEquals( 1,\n                      this.memory.getRightObjectMemory().size() );\n        assertEquals( 2,\n                      this.sink.getAsserted().size() );\n        assertEquals( 1,\n                      this.accumulator.getMatchingObjects().size() );\n\n        this.node.assertObject( f1,\n                                this.context,\n                                this.workingMemory );\n\n        assertEquals( 2,\n                      this.memory.getRightObjectMemory().size() );\n        assertEquals( 3,\n                      this.sink.getAsserted().size() );\n        assertEquals( 2,\n                      this.accumulator.getMatchingObjects().size() );\n\n    }","id":96585,"modified_method":"/**\n     * Test method for {@link org.drools.reteoo.AccumulateNode#assertObject(InternalFactHandle, org.drools.spi.PropagationContext, InternalWorkingMemory)}.\n     */\n    public void testAssertObject() {\n        final DefaultFactHandle f0 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"cheese\" );\n        final DefaultFactHandle f1 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"other cheese\" );\n\n        final ReteTuple tuple0 = new ReteTuple( f0 );\n\n        // assert tuple, should add one to left memory\n        this.node.assertTuple( tuple0,\n                               this.context,\n                               this.workingMemory );\n\n        // check memory \n        assertEquals( 1,\n                      this.memory.getTupleMemory().size() );\n        assertEquals( 1,\n                      this.sink.getAsserted().size() );\n        assertEquals( 0,\n                      this.accumulator.getMatchingObjects().size() );\n\n        this.node.assertObject( f0,\n                                this.context,\n                                this.workingMemory );\n        assertEquals( 1,\n                      this.memory.getFactHandleMemory().size() );\n        assertEquals( 2,\n                      this.sink.getAsserted().size() );\n        assertEquals( 1,\n                      this.accumulator.getMatchingObjects().size() );\n\n        this.node.assertObject( f1,\n                                this.context,\n                                this.workingMemory );\n\n        assertEquals( 2,\n                      this.memory.getFactHandleMemory().size() );\n        assertEquals( 3,\n                      this.sink.getAsserted().size() );\n        assertEquals( 2,\n                      this.accumulator.getMatchingObjects().size() );\n\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\n     * Test method for {@link org.drools.reteoo.AccumulateNode#retractObject(InternalFactHandle, org.drools.spi.PropagationContext, InternalWorkingMemory)}.\n     */\n    public void testRetractObject() {\n        final DefaultFactHandle f0 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"cheese\" );\n        final DefaultFactHandle f1 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"other cheese\" );\n\n        final ReteTuple tuple0 = new ReteTuple( f0 );\n\n        this.node.assertObject( f0,\n                                this.context,\n                                this.workingMemory );\n        this.node.assertObject( f1,\n                                this.context,\n                                this.workingMemory );\n        assertEquals( 2,\n                      this.memory.getRightObjectMemory().size() );\n\n        // assert tuple, should add one to left memory\n        this.node.assertTuple( tuple0,\n                               this.context,\n                               this.workingMemory );\n\n        // check memory \n        assertEquals( 1,\n                      this.memory.getLeftTupleMemory().size() );\n        assertEquals( 0,\n                      this.sink.getRetracted().size() );\n        assertEquals( 1,\n                      this.sink.getAsserted().size() );\n        assertEquals( 2,\n                      this.accumulator.getMatchingObjects().size() );\n\n        this.node.retractObject( f1,\n                                 this.context,\n                                 this.workingMemory );\n        assertEquals( 1,\n                      this.memory.getRightObjectMemory().size() );\n        assertEquals( 1,\n                      this.sink.getRetracted().size() );\n        assertEquals( 2,\n                      this.sink.getAsserted().size() );\n        assertEquals( 1,\n                      this.accumulator.getMatchingObjects().size() );\n\n        this.node.retractObject( f0,\n                                 this.context,\n                                 this.workingMemory );\n        assertEquals( 0,\n                      this.memory.getRightObjectMemory().size() );\n        assertEquals( 2,\n                      this.sink.getRetracted().size() );\n        assertEquals( 3,\n                      this.sink.getAsserted().size() );\n        assertEquals( 0,\n                      this.accumulator.getMatchingObjects().size() );\n\n    }","id":96586,"modified_method":"/**\n     * Test method for {@link org.drools.reteoo.AccumulateNode#retractObject(InternalFactHandle, org.drools.spi.PropagationContext, InternalWorkingMemory)}.\n     */\n    public void testRetractObject() {\n        final DefaultFactHandle f0 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"cheese\" );\n        final DefaultFactHandle f1 = (DefaultFactHandle) this.workingMemory.getFactHandleFactory().newFactHandle( \"other cheese\" );\n\n        final ReteTuple tuple0 = new ReteTuple( f0 );\n\n        this.node.assertObject( f0,\n                                this.context,\n                                this.workingMemory );\n        this.node.assertObject( f1,\n                                this.context,\n                                this.workingMemory );\n        assertEquals( 2,\n                      this.memory.getFactHandleMemory().size() );\n\n        // assert tuple, should add one to left memory\n        this.node.assertTuple( tuple0,\n                               this.context,\n                               this.workingMemory );\n\n        // check memory \n        assertEquals( 1,\n                      this.memory.getTupleMemory().size() );\n        assertEquals( 0,\n                      this.sink.getRetracted().size() );\n        assertEquals( 1,\n                      this.sink.getAsserted().size() );\n        assertEquals( 2,\n                      this.accumulator.getMatchingObjects().size() );\n\n        this.node.retractObject( f1,\n                                 this.context,\n                                 this.workingMemory );\n        assertEquals( 1,\n                      this.memory.getFactHandleMemory().size() );\n        assertEquals( 1,\n                      this.sink.getRetracted().size() );\n        assertEquals( 2,\n                      this.sink.getAsserted().size() );\n        assertEquals( 1,\n                      this.accumulator.getMatchingObjects().size() );\n\n        this.node.retractObject( f0,\n                                 this.context,\n                                 this.workingMemory );\n        assertEquals( 0,\n                      this.memory.getFactHandleMemory().size() );\n        assertEquals( 2,\n                      this.sink.getRetracted().size() );\n        assertEquals( 3,\n                      this.sink.getAsserted().size() );\n        assertEquals( 0,\n                      this.accumulator.getMatchingObjects().size() );\n\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"protected void setUp() throws Exception {\n        super.setUp();\n        this.rule = new Rule( \"test-rule\" );\n        this.context = new PropagationContextImpl( 0,\n                                                   PropagationContext.ASSERTION,\n                                                   null,\n                                                   null );\n        this.workingMemory = new ReteooWorkingMemory( 1,\n                                                      (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\n\n        this.tupleSource = new MockTupleSource( 4 );\n        this.objectSource = new MockObjectSource( 4 );\n        this.sink = new MockTupleSink();\n\n        this.accumulator = new MockAccumulator();\n\n        final ObjectType srcObjType = new ClassObjectType( String.class );\n        final Column sourceColumn = new Column( 0,\n                                          srcObjType );\n        final ObjectType resultObjType = new ClassObjectType( String.class );\n        final Column resultColumn = new Column( 1,\n                                          resultObjType );\n        this.accumulate = new Accumulate( sourceColumn,\n                                          resultColumn,\n                                          new Declaration[0],\n                                          new Declaration[0],\n                                          this.accumulator );\n\n        this.node = new AccumulateNode( 15,\n                                        this.tupleSource,\n                                        this.objectSource,\n                                        this.accumulate );\n\n        this.node.addTupleSink( this.sink );\n\n        this.memory = (BetaMemory) this.workingMemory.getNodeMemory( this.node );\n\n        // check memories are empty\n        assertEquals( 0,\n                      this.memory.getLeftTupleMemory().size() );\n        assertEquals( 0,\n                      this.memory.getRightObjectMemory().size() );\n    }","id":96587,"modified_method":"protected void setUp() throws Exception {\n        super.setUp();\n        this.rule = new Rule( \"test-rule\" );\n        this.context = new PropagationContextImpl( 0,\n                                                   PropagationContext.ASSERTION,\n                                                   null,\n                                                   null );\n        this.workingMemory = new ReteooWorkingMemory( 1,\n                                                      (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\n\n        this.tupleSource = new MockTupleSource( 4 );\n        this.objectSource = new MockObjectSource( 4 );\n        this.sink = new MockTupleSink();\n\n        this.accumulator = new MockAccumulator();\n\n        final ObjectType srcObjType = new ClassObjectType( String.class );\n        final Column sourceColumn = new Column( 0,\n                                          srcObjType );\n        final ObjectType resultObjType = new ClassObjectType( String.class );\n        final Column resultColumn = new Column( 1,\n                                          resultObjType );\n        this.accumulate = new Accumulate( sourceColumn,\n                                          resultColumn,\n                                          new Declaration[0],\n                                          new Declaration[0],\n                                          this.accumulator );\n\n        this.node = new AccumulateNode( 15,\n                                        this.tupleSource,\n                                        this.objectSource,\n                                        this.accumulate );\n\n        this.node.addTupleSink( this.sink );\n\n        this.memory = (BetaMemory) this.workingMemory.getNodeMemory( this.node );\n\n        // check memories are empty\n        assertEquals( 0,\n                      this.memory.getTupleMemory().size() );\n        assertEquals( 0,\n                      this.memory.getFactHandleMemory().size() );\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testAdd() {\r\n        /*\r\n         * create a RuleBase with a single ObjectTypeNode we attach a\r\n         * MockObjectSink so we can detect assertions and retractions\r\n         */\r\n        final Rete rete = new Rete();\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 0,\r\n                                                                  new ClassObjectType( Object.class ),\r\n                                                                  rete );\r\n        objectTypeNode.attach();\r\n\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink );\r\n        final RuleBase ruleBase = RuleBaseFactory.newRuleBase();\r\n        final ReteooWorkingMemory workingMemory = (ReteooWorkingMemory) ruleBase.newWorkingMemory();\r\n\r\n        // objectTypeNode.\r\n    }","id":96588,"modified_method":"public void testAdd() {\r\n        /*\r\n         * create a RuleBase with a single ObjectTypeNode we attach a\r\n         * MockObjectSink so we can detect assertions and retractions\r\n         */\r\n        final Rete rete = new Rete();\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 0,\r\n                                                                  new ClassObjectType( Object.class ),\r\n                                                                  rete,\r\n                                                                  1 );\r\n        objectTypeNode.attach();\r\n\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink );\r\n        final RuleBase ruleBase = RuleBaseFactory.newRuleBase();\r\n        final ReteooWorkingMemory workingMemory = (ReteooWorkingMemory) ruleBase.newWorkingMemory();\r\n\r\n        // objectTypeNode.\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testRetractObjectWithMemory() throws Exception {\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n        final Rule rule = new Rule( \"test-rule\" );\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final MockObjectSource source = new MockObjectSource( 15 );\r\n\r\n        final FieldExtractor extractor = new ClassFieldExtractor( Cheese.class,\r\n                                                                  \"type\" );\r\n\r\n        final FieldValue field = new MockField( \"cheddar\" );\r\n\r\n        final Evaluator evaluator = ValueType.OBJECT_TYPE.getEvaluator( Operator.EQUAL );\r\n        final LiteralConstraint constraint = new LiteralConstraint( extractor,\r\n                                                                    evaluator,\r\n                                                                    field );\r\n\r\n        final AlphaNode alphaNode = new AlphaNode( 2,\r\n                                                   constraint,\r\n                                                   source,\r\n                                                   true ); // has memory\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        alphaNode.addObjectSink( sink );\r\n\r\n        final Cheese cheddar = new Cheese( \"cheddar\",\r\n                                           5 );\r\n\r\n        final DefaultFactHandle f0 = new DefaultFactHandle( 0,\r\n                                                            cheddar );\r\n\r\n        // check alpha memory is empty\r\n        final FactHashTable memory = (FactHashTable) workingMemory.getNodeMemory( alphaNode );\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n\r\n        // object should assert as it passes text\r\n        alphaNode.assertObject( f0,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertEquals( 1,\r\n                      memory.size() );\r\n\r\n        final DefaultFactHandle f1 = new DefaultFactHandle( 1,\r\n                                                            \"cheese\" );\r\n\r\n        // object should NOT retract as it doesn't exist\r\n        alphaNode.retractObject( f1,\r\n                                 context,\r\n                                 workingMemory );\r\n\r\n        assertLength( 0,\r\n                      sink.getRetracted() );\r\n        assertEquals( 1,\r\n                      memory.size() );\r\n        assertTrue( \"Should contain 'cheddar handle'\",\r\n                    memory.contains( f0 ) );\r\n\r\n        // object should retract as it does exist\r\n        alphaNode.retractObject( f0,\r\n                                 context,\r\n                                 workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink.getRetracted() );\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n        final Object[] list = (Object[]) sink.getRetracted().get( 0 );\r\n        assertSame( f0,\r\n                    list[0] );\r\n\r\n    }","id":96589,"modified_method":"public void testRetractObjectWithMemory() throws Exception {\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n        final Rule rule = new Rule( \"test-rule\" );\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final MockObjectSource source = new MockObjectSource( 15 );\r\n\r\n        final FieldExtractor extractor = new ClassFieldExtractor( Cheese.class,\r\n                                                                  \"type\" );\r\n\r\n        final FieldValue field = FieldFactory.getFieldValue( \"cheddar\" );\r\n\r\n        final Evaluator evaluator = ValueType.OBJECT_TYPE.getEvaluator( Operator.EQUAL );\r\n        final LiteralConstraint constraint = new LiteralConstraint( extractor,\r\n                                                                    evaluator,\r\n                                                                    field );\r\n\r\n        final AlphaNode alphaNode = new AlphaNode( 2,\r\n                                                   constraint,\r\n                                                   source,\r\n                                                   true,\r\n                                                   3); // has memory\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        alphaNode.addObjectSink( sink );\r\n\r\n        final Cheese cheddar = new Cheese( \"cheddar\",\r\n                                           5 );\r\n\r\n        final DefaultFactHandle f0 = new DefaultFactHandle( 0,\r\n                                                            cheddar );\r\n\r\n        // check alpha memory is empty\r\n        final FactHashTable memory = (FactHashTable) workingMemory.getNodeMemory( alphaNode );\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n\r\n        // object should assert as it passes text\r\n        alphaNode.assertObject( f0,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertEquals( 1,\r\n                      memory.size() );\r\n\r\n        final DefaultFactHandle f1 = new DefaultFactHandle( 1,\r\n                                                            \"cheese\" );\r\n\r\n        // object should NOT retract as it doesn't exist\r\n        alphaNode.retractObject( f1,\r\n                                 context,\r\n                                 workingMemory );\r\n\r\n        assertLength( 0,\r\n                      sink.getRetracted() );\r\n        assertEquals( 1,\r\n                      memory.size() );\r\n        assertTrue( \"Should contain 'cheddar handle'\",\r\n                    memory.contains( f0 ) );\r\n\r\n        // object should retract as it does exist\r\n        alphaNode.retractObject( f0,\r\n                                 context,\r\n                                 workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink.getRetracted() );\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n        final Object[] list = (Object[]) sink.getRetracted().get( 0 );\r\n        assertSame( f0,\r\n                    list[0] );\r\n\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testUpdateSinkWithMemory() throws FactException,\r\n                                          IntrospectionException {\r\n        // An AlphaNode with memory should not try and repropagate from its source\r\n        // Also it should only update the latest tuple sinky\r\n\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n        final Rule rule = new Rule( \"test-rule\" );\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final MockObjectSource source = new MockObjectSource( 1 );\r\n\r\n        final FieldExtractor extractor = new ClassFieldExtractor( Cheese.class,\r\n                                                                  \"type\" );\r\n\r\n        final FieldValue field = new MockField( \"cheddar\" );\r\n\r\n        final Evaluator evaluator = ValueType.OBJECT_TYPE.getEvaluator( Operator.EQUAL );\r\n        final LiteralConstraint constraint = new LiteralConstraint( extractor,\r\n                                                                    evaluator,\r\n                                                                    field );\r\n\r\n        final AlphaNode alphaNode = new AlphaNode( 2,\r\n                                                   constraint,\r\n                                                   source,\r\n                                                   true ); // has memory\r\n\r\n        alphaNode.attach();\r\n\r\n        final MockObjectSink sink1 = new MockObjectSink();\r\n        alphaNode.addObjectSink( sink1 );\r\n\r\n        // Assert a single fact which should be in the AlphaNode memory and also\r\n        // propagated to the\r\n        // the tuple sink\r\n        final Cheese cheese = new Cheese( \"cheddar\",\r\n                                          0 );\r\n        final DefaultFactHandle handle1 = new DefaultFactHandle( 1,\r\n                                                                 cheese );\r\n\r\n        alphaNode.assertObject( handle1,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink1.getAsserted() );\r\n\r\n        // Attach a new tuple sink\r\n        final MockObjectSink sink2 = new MockObjectSink();\r\n\r\n        // Tell the alphanode to update the new node. Make sure the first sink1\r\n        // is not updated\r\n        // likewise the source should not do anything\r\n        alphaNode.updateSink( sink2,\r\n                              context,\r\n                              workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink1.getAsserted() );\r\n        assertLength( 1,\r\n                      sink2.getAsserted() );\r\n        assertEquals( 0,\r\n                      source.getUdated() );\r\n    }","id":96590,"modified_method":"public void testUpdateSinkWithMemory() throws FactException,\r\n                                          IntrospectionException {\r\n        // An AlphaNode with memory should not try and repropagate from its source\r\n        // Also it should only update the latest tuple sinky\r\n\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n        final Rule rule = new Rule( \"test-rule\" );\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final MockObjectSource source = new MockObjectSource( 1 );\r\n\r\n        final FieldExtractor extractor = new ClassFieldExtractor( Cheese.class,\r\n                                                                  \"type\" );\r\n\r\n        final FieldValue field = FieldFactory.getFieldValue( \"cheddar\" );\r\n\r\n        final Evaluator evaluator = ValueType.OBJECT_TYPE.getEvaluator( Operator.EQUAL );\r\n        final LiteralConstraint constraint = new LiteralConstraint( extractor,\r\n                                                                    evaluator,\r\n                                                                    field );\r\n\r\n        final AlphaNode alphaNode = new AlphaNode( 2,\r\n                                                   constraint,\r\n                                                   source,\r\n                                                   true,\r\n                                                   3); // has memory\r\n\r\n        alphaNode.attach();\r\n\r\n        final MockObjectSink sink1 = new MockObjectSink();\r\n        alphaNode.addObjectSink( sink1 );\r\n\r\n        // Assert a single fact which should be in the AlphaNode memory and also\r\n        // propagated to the\r\n        // the tuple sink\r\n        final Cheese cheese = new Cheese( \"cheddar\",\r\n                                          0 );\r\n        final DefaultFactHandle handle1 = new DefaultFactHandle( 1,\r\n                                                                 cheese );\r\n\r\n        alphaNode.assertObject( handle1,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink1.getAsserted() );\r\n\r\n        // Attach a new tuple sink\r\n        final MockObjectSink sink2 = new MockObjectSink();\r\n\r\n        // Tell the alphanode to update the new node. Make sure the first sink1\r\n        // is not updated\r\n        // likewise the source should not do anything\r\n        alphaNode.updateSink( sink2,\r\n                              context,\r\n                              workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink1.getAsserted() );\r\n        assertLength( 1,\r\n                      sink2.getAsserted() );\r\n        assertEquals( 0,\r\n                      source.getUdated() );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testLiteralConstraintAssertObjectWithMemory() throws Exception {\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n        final Rule rule = new Rule( \"test-rule\" );\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final MockObjectSource source = new MockObjectSource( 15 );\r\n\r\n        final ClassFieldExtractor extractor = new ClassFieldExtractor( Cheese.class,\r\n                                                                       \"type\" );\r\n\r\n        final FieldValue field = new MockField( \"cheddar\" );\r\n\r\n        final Evaluator evaluator = ValueType.OBJECT_TYPE.getEvaluator( Operator.EQUAL );\r\n        final LiteralConstraint constraint = new LiteralConstraint( extractor,\r\n                                                                    evaluator,\r\n                                                                    field );\r\n\r\n        // With Memory\r\n        final AlphaNode alphaNode = new AlphaNode( 2,\r\n                                                   constraint,\r\n                                                   source,\r\n                                                   true ); // has memory\r\n\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        alphaNode.addObjectSink( sink );\r\n\r\n        final Cheese cheddar = new Cheese( \"cheddar\",\r\n                                           5 );\r\n        final DefaultFactHandle f0 = (DefaultFactHandle) workingMemory.assertObject( cheddar );\r\n\r\n        // check sink is empty\r\n        assertLength( 0,\r\n                      sink.getAsserted() );\r\n\r\n        // check alpha memory is empty \r\n        final FactHashTable memory = (FactHashTable) workingMemory.getNodeMemory( alphaNode );\r\n\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n\r\n        // object should assert as it passes text\r\n        alphaNode.assertObject( f0,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertEquals( 1,\r\n                      sink.getAsserted().size() );\r\n        assertEquals( 1,\r\n                      memory.size() );\r\n        Object[] list = (Object[]) sink.getAsserted().get( 0 );\r\n        assertSame( cheddar,\r\n                    workingMemory.getObject( (DefaultFactHandle) list[0] ) );\r\n        assertTrue( \"Should contain 'cheddar handle'\",\r\n                    memory.contains( f0 ) );\r\n\r\n        final Cheese stilton = new Cheese( \"stilton\",\r\n                                           6 );\r\n        final DefaultFactHandle f1 = new DefaultFactHandle( 1,\r\n                                                            stilton );\r\n\r\n        // object should NOT assert as it does not pass test\r\n        alphaNode.assertObject( f1,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink.getAsserted() );\r\n        assertEquals( 1,\r\n                      memory.size() );\r\n        list = (Object[]) sink.getAsserted().get( 0 );\r\n        assertSame( cheddar,\r\n                    workingMemory.getObject( (DefaultFactHandle) list[0] ) );\r\n        assertTrue( \"Should contain 'cheddar handle'\",\r\n                    memory.contains( f0 ) );\r\n    }","id":96591,"modified_method":"public void testLiteralConstraintAssertObjectWithMemory() throws Exception {\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n        final Rule rule = new Rule( \"test-rule\" );\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final MockObjectSource source = new MockObjectSource( 15 );\r\n\r\n        final ClassFieldExtractor extractor = new ClassFieldExtractor( Cheese.class,\r\n                                                                       \"type\" );\r\n\r\n        final FieldValue field = FieldFactory.getFieldValue( \"cheddar\" );\r\n\r\n        final Evaluator evaluator = ValueType.OBJECT_TYPE.getEvaluator( Operator.EQUAL );\r\n        final LiteralConstraint constraint = new LiteralConstraint( extractor,\r\n                                                                    evaluator,\r\n                                                                    field );\r\n\r\n        // With Memory\r\n        final AlphaNode alphaNode = new AlphaNode( 2,\r\n                                                   constraint,\r\n                                                   source,\r\n                                                   true,\r\n                                                   3); // has memory\r\n\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        alphaNode.addObjectSink( sink );\r\n\r\n        final Cheese cheddar = new Cheese( \"cheddar\",\r\n                                           5 );\r\n        final DefaultFactHandle f0 = (DefaultFactHandle) workingMemory.assertObject( cheddar );\r\n\r\n        // check sink is empty\r\n        assertLength( 0,\r\n                      sink.getAsserted() );\r\n\r\n        // check alpha memory is empty \r\n        final FactHashTable memory = (FactHashTable) workingMemory.getNodeMemory( alphaNode );\r\n\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n\r\n        // object should assert as it passes text\r\n        alphaNode.assertObject( f0,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertEquals( 1,\r\n                      sink.getAsserted().size() );\r\n        assertEquals( 1,\r\n                      memory.size() );\r\n        Object[] list = (Object[]) sink.getAsserted().get( 0 );\r\n        assertSame( cheddar,\r\n                    workingMemory.getObject( (DefaultFactHandle) list[0] ) );\r\n        assertTrue( \"Should contain 'cheddar handle'\",\r\n                    memory.contains( f0 ) );\r\n\r\n        final Cheese stilton = new Cheese( \"stilton\",\r\n                                           6 );\r\n        final DefaultFactHandle f1 = new DefaultFactHandle( 1,\r\n                                                            stilton );\r\n\r\n        // object should NOT assert as it does not pass test\r\n        alphaNode.assertObject( f1,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink.getAsserted() );\r\n        assertEquals( 1,\r\n                      memory.size() );\r\n        list = (Object[]) sink.getAsserted().get( 0 );\r\n        assertSame( cheddar,\r\n                    workingMemory.getObject( (DefaultFactHandle) list[0] ) );\r\n        assertTrue( \"Should contain 'cheddar handle'\",\r\n                    memory.contains( f0 ) );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testLiteralConstraintAssertObjectWithoutMemory() throws Exception {\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n        final Rule rule = new Rule( \"test-rule\" );\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final MockObjectSource source = new MockObjectSource( 15 );\r\n\r\n        final ClassFieldExtractor extractor = new ClassFieldExtractor( Cheese.class,\r\n                                                                       \"type\" );\r\n\r\n        final FieldValue field = new MockField( \"cheddar\" );\r\n\r\n        final Evaluator evaluator = ValueType.OBJECT_TYPE.getEvaluator( Operator.EQUAL );\r\n        final LiteralConstraint constraint = new LiteralConstraint( extractor,\r\n                                                                    evaluator,\r\n                                                                    field );\r\n\r\n        // With Memory\r\n        final AlphaNode alphaNode = new AlphaNode( 2,\r\n                                                   constraint,\r\n                                                   source,\r\n                                                   false ); // no memory\r\n\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        alphaNode.addObjectSink( sink );\r\n\r\n        final Cheese cheddar = new Cheese( \"cheddar\",\r\n                                           5 );\r\n        final DefaultFactHandle f0 = (DefaultFactHandle) workingMemory.assertObject( cheddar );\r\n\r\n        // check sink is empty\r\n        assertLength( 0,\r\n                      sink.getAsserted() );\r\n\r\n        // check alpha memory is empty \r\n        final FactHashTable memory = (FactHashTable) workingMemory.getNodeMemory( alphaNode );\r\n\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n\r\n        // object should assert as it passes text\r\n        alphaNode.assertObject( f0,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertEquals( 1,\r\n                      sink.getAsserted().size() );\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n        Object[] list = (Object[]) sink.getAsserted().get( 0 );\r\n        assertSame( cheddar,\r\n                    workingMemory.getObject( (DefaultFactHandle) list[0] ) );\r\n        assertFalse( \"Should not contain 'cheddar handle'\",\r\n                     memory.contains( f0 ) );\r\n\r\n        final Cheese stilton = new Cheese( \"stilton\",\r\n                                           6 );\r\n        final DefaultFactHandle f1 = new DefaultFactHandle( 1,\r\n                                                            stilton );\r\n\r\n        // object should NOT assert as it does not pass test\r\n        alphaNode.assertObject( f1,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink.getAsserted() );\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n        list = (Object[]) sink.getAsserted().get( 0 );\r\n        assertSame( cheddar,\r\n                    workingMemory.getObject( (DefaultFactHandle) list[0] ) );\r\n        assertFalse( \"Should not contain 'cheddar handle'\",\r\n                     memory.contains( f0 ) );\r\n    }","id":96592,"modified_method":"public void testLiteralConstraintAssertObjectWithoutMemory() throws Exception {\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n        final Rule rule = new Rule( \"test-rule\" );\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final MockObjectSource source = new MockObjectSource( 15 );\r\n\r\n        final ClassFieldExtractor extractor = new ClassFieldExtractor( Cheese.class,\r\n                                                                       \"type\" );\r\n\r\n        final FieldValue field = FieldFactory.getFieldValue( \"cheddar\" );\r\n\r\n        final Evaluator evaluator = ValueType.OBJECT_TYPE.getEvaluator( Operator.EQUAL );\r\n        final LiteralConstraint constraint = new LiteralConstraint( extractor,\r\n                                                                    evaluator,\r\n                                                                    field );\r\n\r\n        // With Memory\r\n        final AlphaNode alphaNode = new AlphaNode( 2,\r\n                                                   constraint,\r\n                                                   source,\r\n                                                   false,\r\n                                                   3); // no memory\r\n\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        alphaNode.addObjectSink( sink );\r\n\r\n        final Cheese cheddar = new Cheese( \"cheddar\",\r\n                                           5 );\r\n        final DefaultFactHandle f0 = (DefaultFactHandle) workingMemory.assertObject( cheddar );\r\n\r\n        // check sink is empty\r\n        assertLength( 0,\r\n                      sink.getAsserted() );\r\n\r\n        // check alpha memory is empty \r\n        final FactHashTable memory = (FactHashTable) workingMemory.getNodeMemory( alphaNode );\r\n\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n\r\n        // object should assert as it passes text\r\n        alphaNode.assertObject( f0,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertEquals( 1,\r\n                      sink.getAsserted().size() );\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n        Object[] list = (Object[]) sink.getAsserted().get( 0 );\r\n        assertSame( cheddar,\r\n                    workingMemory.getObject( (DefaultFactHandle) list[0] ) );\r\n        assertFalse( \"Should not contain 'cheddar handle'\",\r\n                     memory.contains( f0 ) );\r\n\r\n        final Cheese stilton = new Cheese( \"stilton\",\r\n                                           6 );\r\n        final DefaultFactHandle f1 = new DefaultFactHandle( 1,\r\n                                                            stilton );\r\n\r\n        // object should NOT assert as it does not pass test\r\n        alphaNode.assertObject( f1,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink.getAsserted() );\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n        list = (Object[]) sink.getAsserted().get( 0 );\r\n        assertSame( cheddar,\r\n                    workingMemory.getObject( (DefaultFactHandle) list[0] ) );\r\n        assertFalse( \"Should not contain 'cheddar handle'\",\r\n                     memory.contains( f0 ) );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testReturnValueConstraintAssertObject() throws Exception {\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n        final Rule rule = new Rule( \"test-rule\" );\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final MockObjectSource source = new MockObjectSource( 15 );\r\n\r\n        final FieldExtractor extractor = new ClassFieldExtractor( Cheese.class,\r\n                                                                  \"type\" );\r\n\r\n        final FieldValue field = new MockField( \"cheddar\" );\r\n\r\n        final Evaluator evaluator = ValueType.OBJECT_TYPE.getEvaluator( Operator.EQUAL );\r\n        final LiteralConstraint constraint = new LiteralConstraint( extractor,\r\n                                                                    evaluator,\r\n                                                                    field );\r\n\r\n        final AlphaNode alphaNode = new AlphaNode( 2,\r\n                                                   constraint,\r\n                                                   source );\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        alphaNode.addObjectSink( sink );\r\n\r\n        final Cheese cheddar = new Cheese( \"cheddar\",\r\n                                           5 );\r\n\r\n        final DefaultFactHandle f0 = (DefaultFactHandle) workingMemory.assertObject( cheddar );\r\n\r\n        assertLength( 0,\r\n                      sink.getAsserted() );\r\n\r\n        // object should assert as it passes text\r\n        alphaNode.assertObject( f0,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink.getAsserted() );\r\n        final Object[] list = (Object[]) sink.getAsserted().get( 0 );\r\n        assertSame( cheddar,\r\n                    workingMemory.getObject( (DefaultFactHandle) list[0] ) );\r\n\r\n        final Cheese stilton = new Cheese( \"stilton\",\r\n                                           6 );\r\n        f0.setObject( stilton );\r\n\r\n        sink.getAsserted().clear();\r\n\r\n        // object should not assert as it does not pass text\r\n        alphaNode.assertObject( f0,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertLength( 0,\r\n                      sink.getAsserted() );\r\n    }","id":96593,"modified_method":"public void testReturnValueConstraintAssertObject() throws Exception {\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n        final Rule rule = new Rule( \"test-rule\" );\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final MockObjectSource source = new MockObjectSource( 15 );\r\n\r\n        final FieldExtractor extractor = new ClassFieldExtractor( Cheese.class,\r\n                                                                  \"type\" );\r\n\r\n        final FieldValue field = FieldFactory.getFieldValue( \"cheddar\" );\r\n\r\n        final Evaluator evaluator = ValueType.OBJECT_TYPE.getEvaluator( Operator.EQUAL );\r\n        final LiteralConstraint constraint = new LiteralConstraint( extractor,\r\n                                                                    evaluator,\r\n                                                                    field );\r\n\r\n        final AlphaNode alphaNode = new AlphaNode( 2,\r\n                                                   constraint,\r\n                                                   source );\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        alphaNode.addObjectSink( sink );\r\n\r\n        final Cheese cheddar = new Cheese( \"cheddar\",\r\n                                           5 );\r\n\r\n        final DefaultFactHandle f0 = (DefaultFactHandle) workingMemory.assertObject( cheddar );\r\n\r\n        assertLength( 0,\r\n                      sink.getAsserted() );\r\n\r\n        // object should assert as it passes text\r\n        alphaNode.assertObject( f0,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink.getAsserted() );\r\n        final Object[] list = (Object[]) sink.getAsserted().get( 0 );\r\n        assertSame( cheddar,\r\n                    workingMemory.getObject( (DefaultFactHandle) list[0] ) );\r\n\r\n        final Cheese stilton = new Cheese( \"stilton\",\r\n                                           6 );\r\n        f0.setObject( stilton );\r\n\r\n        sink.getAsserted().clear();\r\n\r\n        // object should not assert as it does not pass text\r\n        alphaNode.assertObject( f0,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertLength( 0,\r\n                      sink.getAsserted() );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testRetractObjectWithoutMemory() throws Exception {\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n        final Rule rule = new Rule( \"test-rule\" );\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final MockObjectSource source = new MockObjectSource( 15 );\r\n\r\n        final FieldExtractor extractor = new ClassFieldExtractor( Cheese.class,\r\n                                                                  \"type\" );\r\n\r\n        final FieldValue field = new MockField( \"cheddar\" );\r\n\r\n        final Evaluator evaluator = ValueType.OBJECT_TYPE.getEvaluator( Operator.EQUAL );\r\n        final LiteralConstraint constraint = new LiteralConstraint( extractor,\r\n                                                                    evaluator,\r\n                                                                    field );\r\n\r\n        final AlphaNode alphaNode = new AlphaNode( 2,\r\n                                                   constraint,\r\n                                                   source,\r\n                                                   false ); // no memory\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        alphaNode.addObjectSink( sink );\r\n\r\n        final Cheese cheddar = new Cheese( \"cheddar\",\r\n                                           5 );\r\n\r\n        final DefaultFactHandle f0 = new DefaultFactHandle( 0,\r\n                                                            cheddar );\r\n\r\n        // check alpha memory is empty\r\n        final FactHashTable memory = (FactHashTable) workingMemory.getNodeMemory( alphaNode );\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n\r\n        // object should assert as it passes text\r\n        alphaNode.assertObject( f0,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n\r\n        final DefaultFactHandle f1 = new DefaultFactHandle( 1,\r\n                                                            \"cheese\" );\r\n\r\n        // object should NOT retract as it doesn't exist\r\n        alphaNode.retractObject( f1,\r\n                                 context,\r\n                                 workingMemory );\r\n\r\n        // without memory, it will always propagate a retract\r\n        assertLength( 1,\r\n                      sink.getRetracted() );\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n        assertFalse( \"Should not contain 'cheddar handle'\",\r\n                     memory.contains( f0 ) );\r\n\r\n        // object should retract as it does exist\r\n        alphaNode.retractObject( f0,\r\n                                 context,\r\n                                 workingMemory );\r\n\r\n        assertLength( 2,\r\n                      sink.getRetracted() );\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n        final Object[] list = (Object[]) sink.getRetracted().get( 1 );\r\n        assertSame( f0,\r\n                    list[0] );\r\n\r\n    }","id":96594,"modified_method":"public void testRetractObjectWithoutMemory() throws Exception {\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n        final Rule rule = new Rule( \"test-rule\" );\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final MockObjectSource source = new MockObjectSource( 15 );\r\n\r\n        final FieldExtractor extractor = new ClassFieldExtractor( Cheese.class,\r\n                                                                  \"type\" );\r\n\r\n        final FieldValue field = FieldFactory.getFieldValue( \"cheddar\" );\r\n\r\n        final Evaluator evaluator = ValueType.OBJECT_TYPE.getEvaluator( Operator.EQUAL );\r\n        final LiteralConstraint constraint = new LiteralConstraint( extractor,\r\n                                                                    evaluator,\r\n                                                                    field );\r\n\r\n        final AlphaNode alphaNode = new AlphaNode( 2,\r\n                                                   constraint,\r\n                                                   source,\r\n                                                   false,\r\n                                                   3 ); // no memory\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        alphaNode.addObjectSink( sink );\r\n\r\n        final Cheese cheddar = new Cheese( \"cheddar\",\r\n                                           5 );\r\n\r\n        final DefaultFactHandle f0 = new DefaultFactHandle( 0,\r\n                                                            cheddar );\r\n\r\n        // check alpha memory is empty\r\n        final FactHashTable memory = (FactHashTable) workingMemory.getNodeMemory( alphaNode );\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n\r\n        // object should assert as it passes text\r\n        alphaNode.assertObject( f0,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n\r\n        final DefaultFactHandle f1 = new DefaultFactHandle( 1,\r\n                                                            \"cheese\" );\r\n\r\n        // object should NOT retract as it doesn't exist\r\n        alphaNode.retractObject( f1,\r\n                                 context,\r\n                                 workingMemory );\r\n\r\n        // without memory, it will always propagate a retract\r\n        assertLength( 1,\r\n                      sink.getRetracted() );\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n        assertFalse( \"Should not contain 'cheddar handle'\",\r\n                     memory.contains( f0 ) );\r\n\r\n        // object should retract as it does exist\r\n        alphaNode.retractObject( f0,\r\n                                 context,\r\n                                 workingMemory );\r\n\r\n        assertLength( 2,\r\n                      sink.getRetracted() );\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n        final Object[] list = (Object[]) sink.getRetracted().get( 1 );\r\n        assertSame( f0,\r\n                    list[0] );\r\n\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testUpdateSinkWithoutMemory() throws FactException,\r\n                                             IntrospectionException {\r\n        // An AlphaNode without memory should try and repropagate from its source\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n        final Rule rule = new Rule( \"test-rule\" );\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final MockObjectSource source = new MockObjectSource( 1 );\r\n\r\n        final FieldExtractor extractor = new ClassFieldExtractor( Cheese.class,\r\n                                                                  \"type\" );\r\n\r\n        final FieldValue field = new MockField( \"cheddar\" );\r\n\r\n        final Evaluator evaluator = ValueType.OBJECT_TYPE.getEvaluator( Operator.EQUAL );\r\n        final LiteralConstraint constraint = new LiteralConstraint( extractor,\r\n                                                                    evaluator,\r\n                                                                    field );\r\n\r\n        final AlphaNode alphaNode = new AlphaNode( 2,\r\n                                                   constraint,\r\n                                                   source,\r\n                                                   false ); // no memory\r\n\r\n        alphaNode.attach();\r\n\r\n        final MockObjectSink sink1 = new MockObjectSink();\r\n        alphaNode.addObjectSink( sink1 );\r\n\r\n        // Assert a single fact which should be in the AlphaNode memory and also\r\n        // propagated to the\r\n        // the tuple sink\r\n        final Cheese cheese = new Cheese( \"cheddar\",\r\n                                          0 );\r\n        final DefaultFactHandle handle1 = new DefaultFactHandle( 1,\r\n                                                                 cheese );\r\n        // adding handle to the mock source\r\n        source.addFact( handle1 );\r\n\r\n        alphaNode.assertObject( handle1,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink1.getAsserted() );\r\n\r\n        // Attach a new tuple sink\r\n        final MockObjectSink sink2 = new MockObjectSink();\r\n\r\n        // Tell the alphanode to update the new node. Make sure the first sink1\r\n        // is not updated\r\n        // likewise the source should not do anything\r\n        alphaNode.updateSink( sink2,\r\n                              context,\r\n                              workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink1.getAsserted() );\r\n        assertLength( 1,\r\n                      sink2.getAsserted() );\r\n        assertEquals( 1,\r\n                      source.getUdated() );\r\n    }","id":96595,"modified_method":"public void testUpdateSinkWithoutMemory() throws FactException,\r\n                                             IntrospectionException {\r\n        // An AlphaNode without memory should try and repropagate from its source\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n        final Rule rule = new Rule( \"test-rule\" );\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final MockObjectSource source = new MockObjectSource( 1 );\r\n\r\n        final FieldExtractor extractor = new ClassFieldExtractor( Cheese.class,\r\n                                                                  \"type\" );\r\n\r\n        final FieldValue field = FieldFactory.getFieldValue( \"cheddar\" );\r\n\r\n        final Evaluator evaluator = ValueType.OBJECT_TYPE.getEvaluator( Operator.EQUAL );\r\n        final LiteralConstraint constraint = new LiteralConstraint( extractor,\r\n                                                                    evaluator,\r\n                                                                    field );\r\n\r\n        final AlphaNode alphaNode = new AlphaNode( 2,\r\n                                                   constraint,\r\n                                                   source,\r\n                                                   false,\r\n                                                   3 ); // no memory\r\n\r\n        alphaNode.attach();\r\n\r\n        final MockObjectSink sink1 = new MockObjectSink();\r\n        alphaNode.addObjectSink( sink1 );\r\n\r\n        // Assert a single fact which should be in the AlphaNode memory and also\r\n        // propagated to the\r\n        // the tuple sink\r\n        final Cheese cheese = new Cheese( \"cheddar\",\r\n                                          0 );\r\n        final DefaultFactHandle handle1 = new DefaultFactHandle( 1,\r\n                                                                 cheese );\r\n        // adding handle to the mock source\r\n        source.addFact( handle1 );\r\n\r\n        alphaNode.assertObject( handle1,\r\n                                context,\r\n                                workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink1.getAsserted() );\r\n\r\n        // Attach a new tuple sink\r\n        final MockObjectSink sink2 = new MockObjectSink();\r\n\r\n        // Tell the alphanode to update the new node. Make sure the first sink1\r\n        // is not updated\r\n        // likewise the source should not do anything\r\n        alphaNode.updateSink( sink2,\r\n                              context,\r\n                              workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink1.getAsserted() );\r\n        assertLength( 1,\r\n                      sink2.getAsserted() );\r\n        assertEquals( 1,\r\n                      source.getUdated() );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void updateSink(final TupleSink sink,\r\n                           final PropagationContext context,\r\n                           final InternalWorkingMemory workingMemory) {\r\n\r\n        final List memory = (List) workingMemory.getNodeMemory( this );\r\n\r\n        for ( Iterator tupleIter = memory.iterator(); tupleIter.hasNext(); ) {\r\n            ReteTuple tuple = (ReteTuple) tupleIter.next();\r\n            sink.assertTuple( tuple,\r\n                              context,\r\n                              workingMemory );\r\n        }\r\n    }","id":96596,"modified_method":"public void updateSink(final TupleSink sink,\r\n                           final PropagationContext context,\r\n                           final InternalWorkingMemory workingMemory) {\r\n\r\n        final TupleHashTable memory = (TupleHashTable) workingMemory.getNodeMemory( this );\r\n\r\n        final Iterator it = memory.iterator();\r\n        for ( ReteTuple tuple = (ReteTuple) it.next(); tuple != null; tuple = (ReteTuple) it.next() ) {\r\n            sink.assertTuple( tuple,\r\n                              context,\r\n                              workingMemory );\r\n        }\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public Object createMemory(final RuleBaseConfiguration config) {\r\n        return new LinkedList();\r\n    }","id":96597,"modified_method":"public Object createMemory(final RuleBaseConfiguration config) {\r\n        return new TupleHashTable();\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\r\n     * Assert a new <code>Tuple<\/code>.\r\n     * \r\n     * @param tuple\r\n     *            The <code>Tuple<\/code> being asserted.\r\n     * @param workingMemory\r\n     *            The working memory seesion.\r\n     * @throws AssertionException\r\n     *             If an error occurs while asserting.\r\n     */\r\n    public void assertTuple(final ReteTuple tuple,\r\n                            final PropagationContext context,\r\n                            final InternalWorkingMemory workingMemory) {\r\n\r\n        final boolean allowed = this.condition.isAllowed( tuple,\r\n                                                          workingMemory );\r\n\r\n        if ( allowed ) {\r\n            final List memory = (LinkedList) workingMemory.getNodeMemory( this );\r\n            memory.add( tuple );\r\n\r\n            this.sink.propagateAssertTuple( tuple,\r\n                                            context,\r\n                                            workingMemory );\r\n        }\r\n    }","id":96598,"modified_method":"/**\r\n     * Assert a new <code>Tuple<\/code>.\r\n     * \r\n     * @param tuple\r\n     *            The <code>Tuple<\/code> being asserted.\r\n     * @param workingMemory\r\n     *            The working memory seesion.\r\n     * @throws AssertionException\r\n     *             If an error occurs while asserting.\r\n     */\r\n    public void assertTuple(final ReteTuple tuple,\r\n                            final PropagationContext context,\r\n                            final InternalWorkingMemory workingMemory) {\r\n\r\n        final boolean allowed = this.condition.isAllowed( tuple,\r\n                                                          workingMemory );\r\n\r\n        if ( allowed ) {\r\n            final TupleHashTable memory = (TupleHashTable) workingMemory.getNodeMemory( this );\r\n            memory.add( tuple );\r\n\r\n            this.sink.propagateAssertTuple( tuple,\r\n                                            context,\r\n                                            workingMemory );\r\n        }\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void retractTuple(final ReteTuple tuple,\r\n                             final PropagationContext context,\r\n                             final InternalWorkingMemory workingMemory) {\r\n        final List memory = (LinkedList) workingMemory.getNodeMemory( this );\r\n\r\n        // can we improve that?\r\n        if ( memory.remove( tuple ) ) {\r\n            this.sink.propagateRetractTuple( tuple,\r\n                                             context,\r\n                                             workingMemory );\r\n        }\r\n    }","id":96599,"modified_method":"public void retractTuple(final ReteTuple tuple,\r\n                             final PropagationContext context,\r\n                             final InternalWorkingMemory workingMemory) {\r\n        final TupleHashTable memory = (TupleHashTable) workingMemory.getNodeMemory( this );\r\n\r\n        // can we improve that?\r\n        ReteTuple memTuple = memory.remove( tuple ); \r\n        if (  memTuple != null ) {\r\n            this.sink.propagateRetractTuple( memTuple,\r\n                                             context,\r\n                                             workingMemory );\r\n        }\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testAttach() throws Exception {\r\n        final MockTupleSource source = new MockTupleSource( 12 );\r\n\r\n        final EvalConditionNode node = new EvalConditionNode( 18,\r\n                                                              source,\r\n                                                              new MockEvalCondition( true ) );\r\n\r\n        assertEquals( 18,\r\n                      node.getId() );\r\n\r\n        assertLength( 0,\r\n                      source.getTupleSinks() );\r\n\r\n        node.attach();\r\n\r\n        assertLength( 1,\r\n                      source.getTupleSinks() );\r\n\r\n        assertSame( node,\r\n                    source.getTupleSinks().get( 0 ) );\r\n    }","id":96600,"modified_method":"public void testAttach() throws Exception {\r\n        final MockTupleSource source = new MockTupleSource( 12 );\r\n\r\n        final EvalConditionNode node = new EvalConditionNode( 18,\r\n                                                              source,\r\n                                                              new MockEvalCondition( true ) );\r\n\r\n        assertEquals( 18,\r\n                      node.getId() );\r\n\r\n        assertEquals( 0,\r\n                      source.getAttached() );\r\n\r\n        node.attach();\r\n\r\n        assertEquals( 1,\r\n                      source.getAttached() );\r\n\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testUpdateWithMemory() throws FactException {\r\n        // If no child nodes have children then we need to re-process the left\r\n        // and right memories\r\n        // as a joinnode does not store the resulting tuples\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n\r\n        // Creat the object source so we can detect the alphaNode telling it to\r\n        // propate its contents\r\n        final MockTupleSource source = new MockTupleSource( 1 );\r\n\r\n        /* Create a test node that always returns true */\r\n        final EvalConditionNode node = new EvalConditionNode( 1,\r\n                                                              new MockTupleSource( 15 ),\r\n                                                              new MockEvalCondition( true ) );\r\n\r\n        // Add the first tuple sink and assert a tuple and object\r\n        // The sink has no memory\r\n        final MockTupleSink sink1 = new MockTupleSink( 2 );\r\n        node.addTupleSink( sink1 );\r\n\r\n        final DefaultFactHandle f0 = new DefaultFactHandle( 0,\r\n                                                            \"string0\" );\r\n\r\n        final ReteTuple tuple1 = new ReteTuple( f0 );\r\n\r\n        node.assertTuple( tuple1,\r\n                          this.context,\r\n                          workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink1.getAsserted() );\r\n\r\n        // Add the new sink, this should be updated from the re-processed\r\n        // joinnode memory\r\n        final MockTupleSink sink2 = new MockTupleSink( 3 );\r\n        node.addTupleSink( sink2 );\r\n        assertLength( 0,\r\n                      sink2.getAsserted() );\r\n\r\n        node.updateNewNode( workingMemory,\r\n                            this.context );\r\n\r\n        assertLength( 1,\r\n                      sink2.getAsserted() );\r\n    }","id":96601,"modified_method":"public void testUpdateWithMemory() throws FactException {\r\n        // If no child nodes have children then we need to re-process the left\r\n        // and right memories\r\n        // as a joinnode does not store the resulting tuples\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n\r\n        // Creat the object source so we can detect the alphaNode telling it to\r\n        // propate its contents\r\n        //final MockTupleSource source = new MockTupleSource( 1 );\r\n\r\n        /* Create a test node that always returns true */\r\n        final EvalConditionNode node = new EvalConditionNode( 1,\r\n                                                              new MockTupleSource( 15 ),\r\n                                                              new MockEvalCondition( true ) );\r\n\r\n        // Add the first tuple sink and assert a tuple and object\r\n        // The sink has no memory\r\n        final MockTupleSink sink1 = new MockTupleSink( 2 );\r\n        node.addTupleSink( sink1 );\r\n\r\n        final DefaultFactHandle f0 = new DefaultFactHandle( 0,\r\n                                                            \"string0\" );\r\n\r\n        final ReteTuple tuple1 = new ReteTuple( f0 );\r\n\r\n        node.assertTuple( tuple1,\r\n                          this.context,\r\n                          workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink1.getAsserted() );\r\n\r\n        // Add the new sink, this should be updated from the re-processed\r\n        // joinnode memory\r\n        final MockTupleSink sink2 = new MockTupleSink( 3 );\r\n        node.addTupleSink( sink2 );\r\n        assertLength( 0,\r\n                      sink2.getAsserted() );\r\n\r\n        node.updateSink( sink2,\r\n                         this.context,\r\n                         workingMemory );\r\n\r\n        assertLength( 1,\r\n                      sink2.getAsserted() );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testAssertedAllowedThenRetract() throws FactException {\r\n        final MockEvalCondition eval = new MockEvalCondition( true );\r\n\r\n        // Create a test node that always returns false \r\n        final EvalConditionNode node = new EvalConditionNode( 1,\r\n                                                              new MockTupleSource( 15 ),\r\n                                                              eval );\r\n\r\n        final MockTupleSink sink = new MockTupleSink();\r\n        node.addTupleSink( sink );\r\n\r\n        // Create the Tuple\r\n        final DefaultFactHandle f0 = new DefaultFactHandle( 0,\r\n                                                            \"stilton\" );\r\n        final ReteTuple tuple0 = new ReteTuple( f0 );\r\n\r\n        // Tuple should pass and propagate \r\n        node.assertTuple( tuple0,\r\n                          this.context,\r\n                          this.workingMemory );\r\n\r\n        // we create and retract two tuples, checking the linkedtuples is null for JBRULES-246 \"NPE on retract()\"        \r\n        // Create the Tuple\r\n        final DefaultFactHandle f1 = new DefaultFactHandle( 1,\r\n                                                            \"cheddar\" );\r\n        final ReteTuple tuple1 = new ReteTuple( f1 );\r\n\r\n        // Tuple should pass and propagate \r\n        node.assertTuple( tuple1,\r\n                          this.context,\r\n                          this.workingMemory );\r\n\r\n        // Check memory was populated\r\n        final LinkedList memory = (LinkedList) this.workingMemory.getNodeMemory( node );\r\n\r\n        assertEquals( 2,\r\n                      memory.size() );\r\n        assertEquals( tuple0,\r\n                      memory.getFirst() );\r\n        assertEquals( tuple1,\r\n                      tuple0.getNext() );\r\n\r\n        // make sure assertions were propagated\r\n        assertEquals( 2,\r\n                      sink.getAsserted().size() );\r\n\r\n        // Now test that the fact is retracted correctly\r\n        node.retractTuple( tuple0,\r\n                           this.context,\r\n                           this.workingMemory );\r\n\r\n        // Now test that the fact is retracted correctly\r\n        assertEquals( 1,\r\n                      memory.size() );\r\n\r\n        assertEquals( tuple1,\r\n                      memory.getFirst() );\r\n\r\n        // make sure retractions were propagated\r\n        assertEquals( 1,\r\n                      sink.getRetracted().size() );\r\n\r\n        // Now test that the fact is retracted correctly\r\n        node.retractTuple( tuple1,\r\n                           this.context,\r\n                           this.workingMemory );\r\n\r\n        // Now test that the fact is retracted correctly\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n\r\n        // make sure retractions were propagated\r\n        assertEquals( 2,\r\n                      sink.getRetracted().size() );\r\n    }","id":96602,"modified_method":"public void testAssertedAllowedThenRetract() throws FactException {\r\n        final MockEvalCondition eval = new MockEvalCondition( true );\r\n\r\n        // Create a test node that always returns false \r\n        final EvalConditionNode node = new EvalConditionNode( 1,\r\n                                                              new MockTupleSource( 15 ),\r\n                                                              eval );\r\n\r\n        final MockTupleSink sink = new MockTupleSink();\r\n        node.addTupleSink( sink );\r\n\r\n        // Create the Tuple\r\n        final DefaultFactHandle f0 = new DefaultFactHandle( 0,\r\n                                                            \"stilton\" );\r\n        final ReteTuple tuple0 = new ReteTuple( f0 );\r\n\r\n        // Tuple should pass and propagate \r\n        node.assertTuple( tuple0,\r\n                          this.context,\r\n                          this.workingMemory );\r\n\r\n        // we create and retract two tuples, checking the linkedtuples is null for JBRULES-246 \"NPE on retract()\"        \r\n        // Create the Tuple\r\n        final DefaultFactHandle f1 = new DefaultFactHandle( 1,\r\n                                                            \"cheddar\" );\r\n        final ReteTuple tuple1 = new ReteTuple( f1 );\r\n\r\n        // Tuple should pass and propagate \r\n        node.assertTuple( tuple1,\r\n                          this.context,\r\n                          this.workingMemory );\r\n\r\n        // Check memory was populated\r\n        final TupleHashTable memory = (TupleHashTable) this.workingMemory.getNodeMemory( node );\r\n\r\n        assertEquals( 2,\r\n                      memory.size() );\r\n        assertTrue( memory.contains( tuple0 ) );\r\n        assertTrue( memory.contains( tuple1 ) );\r\n\r\n        // make sure assertions were propagated\r\n        assertEquals( 2,\r\n                      sink.getAsserted().size() );\r\n\r\n        // Now test that the fact is retracted correctly\r\n        node.retractTuple( tuple0,\r\n                           this.context,\r\n                           this.workingMemory );\r\n\r\n        // Now test that the fact is retracted correctly\r\n        assertEquals( 1,\r\n                      memory.size() );\r\n\r\n        assertTrue( memory.contains( tuple1 ) );\r\n\r\n        // make sure retractions were propagated\r\n        assertEquals( 1,\r\n                      sink.getRetracted().size() );\r\n\r\n        // Now test that the fact is retracted correctly\r\n        node.retractTuple( tuple1,\r\n                           this.context,\r\n                           this.workingMemory );\r\n\r\n        // Now test that the fact is retracted correctly\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n\r\n        // make sure retractions were propagated\r\n        assertEquals( 2,\r\n                      sink.getRetracted().size() );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\r\n     * If a eval allows an incoming Object, then the Object MUST be\r\n     * propagated. This tests that the memory is updated\r\n     * \r\n     * @throws FactException\r\n     */\r\n    public void testAssertedAllowed() throws FactException {\r\n        final MockEvalCondition eval = new MockEvalCondition( true );\r\n\r\n        // Create a test node that always returns false \r\n        final EvalConditionNode node = new EvalConditionNode( 1,\r\n                                                              new MockTupleSource( 15 ),\r\n                                                              eval );\r\n\r\n        final MockTupleSink sink = new MockTupleSink();\r\n        node.addTupleSink( sink );\r\n\r\n        // Create the Tuple\r\n        final DefaultFactHandle f0 = new DefaultFactHandle( 0,\r\n                                                            \"stilton\" );\r\n        final ReteTuple tuple0 = new ReteTuple( f0 );\r\n\r\n        // Tuple should pass and propagate \r\n        node.assertTuple( tuple0,\r\n                          this.context,\r\n                          this.workingMemory );\r\n\r\n        // Create the Tuple\r\n        final DefaultFactHandle f1 = new DefaultFactHandle( 1,\r\n                                                            \"cheddar\" );\r\n        final ReteTuple tuple1 = new ReteTuple( f1 );\r\n\r\n        // Tuple should pass and propagate \r\n        node.assertTuple( tuple1,\r\n                          this.context,\r\n                          this.workingMemory );\r\n\r\n        // Check memory was populated\r\n        final LinkedList memory = (LinkedList) this.workingMemory.getNodeMemory( node );\r\n\r\n        assertEquals( 2,\r\n                      memory.size() );\r\n\r\n        // Check list is in the correct order\r\n        assertEquals( tuple0,\r\n                      memory.getFirst() );\r\n        assertEquals( tuple1,\r\n                      tuple0.getNext() );\r\n\r\n        // make sure assertions were propagated\r\n        assertEquals( 2,\r\n                      sink.getAsserted().size() );\r\n    }","id":96603,"modified_method":"/**\r\n     * If a eval allows an incoming Object, then the Object MUST be\r\n     * propagated. This tests that the memory is updated\r\n     * \r\n     * @throws FactException\r\n     */\r\n    public void testAssertedAllowed() throws FactException {\r\n        final MockEvalCondition eval = new MockEvalCondition( true );\r\n\r\n        // Create a test node that always returns false \r\n        final EvalConditionNode node = new EvalConditionNode( 1,\r\n                                                              new MockTupleSource( 15 ),\r\n                                                              eval );\r\n\r\n        final MockTupleSink sink = new MockTupleSink();\r\n        node.addTupleSink( sink );\r\n\r\n        // Create the Tuple\r\n        final DefaultFactHandle f0 = new DefaultFactHandle( 0,\r\n                                                            \"stilton\" );\r\n        final ReteTuple tuple0 = new ReteTuple( f0 );\r\n\r\n        // Tuple should pass and propagate \r\n        node.assertTuple( tuple0,\r\n                          this.context,\r\n                          this.workingMemory );\r\n\r\n        // Create the Tuple\r\n        final DefaultFactHandle f1 = new DefaultFactHandle( 1,\r\n                                                            \"cheddar\" );\r\n        final ReteTuple tuple1 = new ReteTuple( f1 );\r\n\r\n        // Tuple should pass and propagate \r\n        node.assertTuple( tuple1,\r\n                          this.context,\r\n                          this.workingMemory );\r\n\r\n        // Check memory was populated\r\n        final TupleHashTable memory = (TupleHashTable) this.workingMemory.getNodeMemory( node );\r\n\r\n        assertEquals( 2,\r\n                      memory.size() );\r\n\r\n        assertTrue( memory.contains( tuple0 ) );\r\n        assertTrue( memory.contains( tuple1 ) );\r\n\r\n        // make sure assertions were propagated\r\n        assertEquals( 2,\r\n                      sink.getAsserted().size() );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testAssertedNotAllowed() throws FactException {\r\n        final MockEvalCondition eval = new MockEvalCondition( false );\r\n\r\n        // Create a test node that always returns false \r\n        final EvalConditionNode node = new EvalConditionNode( 1,\r\n                                                              new MockTupleSource( 15 ),\r\n                                                              eval );\r\n\r\n        final MockTupleSink sink = new MockTupleSink();\r\n        node.addTupleSink( sink );\r\n\r\n        // Create the Tuple\r\n        final DefaultFactHandle f0 = new DefaultFactHandle( 0,\r\n                                                            \"stilton\" );\r\n        final ReteTuple tuple0 = new ReteTuple( f0 );\r\n\r\n        // Tuple should fail and not propagate\r\n        node.assertTuple( tuple0,\r\n                          this.context,\r\n                          this.workingMemory );\r\n\r\n        // Create the Tuple\r\n        final DefaultFactHandle f1 = new DefaultFactHandle( 1,\r\n                                                            \"cheddar\" );\r\n        final ReteTuple tuple1 = new ReteTuple( f1 );\r\n\r\n        // Tuple should fail and not propagate \r\n        node.assertTuple( tuple1,\r\n                          this.context,\r\n                          this.workingMemory );\r\n\r\n        // Check memory was not populated\r\n        final LinkedList memory = (LinkedList) this.workingMemory.getNodeMemory( node );\r\n\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n\r\n        // test no propagations\r\n        assertEquals( 0,\r\n                      sink.getAsserted().size() );\r\n        assertEquals( 0,\r\n                      sink.getModified().size() );\r\n        assertEquals( 0,\r\n                      sink.getRetracted().size() );\r\n    }","id":96604,"modified_method":"public void testAssertedNotAllowed() throws FactException {\r\n        final MockEvalCondition eval = new MockEvalCondition( false );\r\n\r\n        // Create a test node that always returns false \r\n        final EvalConditionNode node = new EvalConditionNode( 1,\r\n                                                              new MockTupleSource( 15 ),\r\n                                                              eval );\r\n\r\n        final MockTupleSink sink = new MockTupleSink();\r\n        node.addTupleSink( sink );\r\n\r\n        // Create the Tuple\r\n        final DefaultFactHandle f0 = new DefaultFactHandle( 0,\r\n                                                            \"stilton\" );\r\n        final ReteTuple tuple0 = new ReteTuple( f0 );\r\n\r\n        // Tuple should fail and not propagate\r\n        node.assertTuple( tuple0,\r\n                          this.context,\r\n                          this.workingMemory );\r\n\r\n        // Create the Tuple\r\n        final DefaultFactHandle f1 = new DefaultFactHandle( 1,\r\n                                                            \"cheddar\" );\r\n        final ReteTuple tuple1 = new ReteTuple( f1 );\r\n\r\n        // Tuple should fail and not propagate \r\n        node.assertTuple( tuple1,\r\n                          this.context,\r\n                          this.workingMemory );\r\n\r\n        // Check memory was not populated\r\n        final TupleHashTable memory = (TupleHashTable) this.workingMemory.getNodeMemory( node );\r\n\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n\r\n        // test no propagations\r\n        assertEquals( 0,\r\n                      sink.getAsserted().size() );\r\n        assertEquals( 0,\r\n                      sink.getRetracted().size() );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testMemory() {\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n\r\n        final MockTupleSource source = new MockTupleSource( 12 );\r\n\r\n        final EvalConditionNode node = new EvalConditionNode( 18,\r\n                                                              source,\r\n                                                              new MockEvalCondition( true ) );\r\n\r\n        final LinkedList memory = (LinkedList) workingMemory.getNodeMemory( node );\r\n\r\n        assertNotNull( memory );\r\n    }","id":96605,"modified_method":"public void testMemory() {\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n\r\n        final MockTupleSource source = new MockTupleSource( 12 );\r\n\r\n        final EvalConditionNode node = new EvalConditionNode( 18,\r\n                                                              source,\r\n                                                              new MockEvalCondition( true ) );\r\n\r\n        final TupleHashTable memory = (TupleHashTable) workingMemory.getNodeMemory( node );\r\n\r\n        assertNotNull( memory );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\r\n     * Setup the BetaNode used in each of the tests\r\n     */\r\n    public void setUp() {\r\n        this.rule = new Rule( \"test-rule\" );\r\n        this.context = new PropagationContextImpl( 0,\r\n                                                   PropagationContext.ASSERTION,\r\n                                                   null,\r\n                                                   null );\r\n        this.workingMemory = new ReteooWorkingMemory( 1,\r\n                                                      (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n\r\n        this.tupleSource = new MockTupleSource( 4 );\r\n        this.objectSource = new MockObjectSource( 4 );\r\n        this.sink = new MockTupleSink();\r\n\r\n        this.node = new JoinNode( 15,\r\n                                  this.tupleSource,\r\n                                  this.objectSource,\r\n                                  new DefaultBetaConstraints( new BetaNodeFieldConstraint[]{this.constraint} ) );\r\n\r\n        this.node.addTupleSink( this.sink );\r\n\r\n        this.memory = (BetaMemory) this.workingMemory.getNodeMemory( this.node );\r\n\r\n        // check memories are empty\r\n        assertEquals( 0,\r\n                      this.memory.getTupleMemory().size() );\r\n        assertEquals( 0,\r\n                      this.memory.getFactHandleMemory().size() );\r\n\r\n    }","id":96606,"modified_method":"/**\r\n     * Setup the BetaNode used in each of the tests\r\n     */\r\n    public void setUp() {\r\n        this.rule = new Rule( \"test-rule\" );\r\n        this.context = new PropagationContextImpl( 0,\r\n                                                   PropagationContext.ASSERTION,\r\n                                                   null,\r\n                                                   null );\r\n        this.workingMemory = new ReteooWorkingMemory( 1,\r\n                                                      (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n\r\n        this.tupleSource = new MockTupleSource( 4 );\r\n        this.objectSource = new MockObjectSource( 4 );\r\n        this.sink = new MockTupleSink();\r\n        \r\n        RuleBaseConfiguration configuration = new RuleBaseConfiguration();\r\n\r\n        this.node = new JoinNode( 15,\r\n                                  this.tupleSource,\r\n                                  this.objectSource,\r\n                                  new DefaultBetaConstraints( new BetaNodeFieldConstraint[]{this.constraint}, configuration ) );\r\n\r\n        this.node.addTupleSink( this.sink );\r\n\r\n        this.memory = (BetaMemory) this.workingMemory.getNodeMemory( this.node );\r\n\r\n        // check memories are empty\r\n        assertEquals( 0,\r\n                      this.memory.getTupleMemory().size() );\r\n        assertEquals( 0,\r\n                      this.memory.getFactHandleMemory().size() );\r\n\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testAttach() throws Exception {\r\n        final Field objectFfield = ObjectSource.class.getDeclaredField( \"sink\" );\r\n        objectFfield.setAccessible( true );\r\n        ObjectSinkPropagator objectSink = (ObjectSinkPropagator) objectFfield.get( this.objectSource );\r\n\r\n        final Field tupleField = TupleSource.class.getDeclaredField( \"sink\" );\r\n        tupleField.setAccessible( true );\r\n        TupleSinkPropagator tupleSink = (TupleSinkPropagator) tupleField.get( this.tupleSource );\r\n\r\n        assertEquals( 15,\r\n                      this.node.getId() );\r\n\r\n        assertNull( objectSink );\r\n        assertNull( tupleSink );\r\n\r\n        this.node.attach();\r\n\r\n        objectSink = (ObjectSinkPropagator) objectFfield.get( this.objectSource );\r\n        tupleSink = (TupleSinkPropagator) tupleField.get( this.tupleSource );\r\n\r\n        assertEquals( 1,\r\n                      objectSink.getSinks().length );\r\n\r\n        assertEquals( 1,\r\n                      tupleSink.getSinks().length );\r\n\r\n        assertSame( this.node,\r\n                    objectSink.getSinks()[0] );\r\n\r\n        assertSame( this.node,\r\n                    tupleSink.getSinks()[0] );\r\n    }","id":96607,"modified_method":"public void testAttach() throws Exception {\r\n        final Field objectFfield = ObjectSource.class.getDeclaredField( \"sink\" );\r\n        objectFfield.setAccessible( true );\r\n        ObjectSinkPropagator objectSink = (ObjectSinkPropagator) objectFfield.get( this.objectSource );\r\n\r\n        final Field tupleField = TupleSource.class.getDeclaredField( \"sink\" );\r\n        tupleField.setAccessible( true );\r\n        TupleSinkPropagator tupleSink = (TupleSinkPropagator) tupleField.get( this.tupleSource );\r\n\r\n        assertEquals( 15,\r\n                      this.node.getId() );\r\n\r\n        assertNotNull( objectSink );\r\n        assertNotNull( tupleSink );\r\n\r\n        this.node.attach();\r\n\r\n        objectSink = (ObjectSinkPropagator) objectFfield.get( this.objectSource );\r\n        tupleSink = (TupleSinkPropagator) tupleField.get( this.tupleSource );\r\n\r\n        assertEquals( 1,\r\n                      objectSink.getSinks().length );\r\n\r\n        assertEquals( 1,\r\n                      tupleSink.getSinks().length );\r\n\r\n        assertSame( this.node,\r\n                    objectSink.getSinks()[0] );\r\n\r\n        assertSame( this.node,\r\n                    tupleSink.getSinks()[0] );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testConstraintPropagations() throws Exception {\r\n        this.constraint.isAllowed = false;\r\n        // assert first right object\r\n        final DefaultFactHandle f0 = (DefaultFactHandle) this.workingMemory.assertObject( \"test0\" );\r\n        this.node.assertObject( f0,\r\n                                this.context,\r\n                                this.workingMemory );\r\n\r\n        // assert tuple, should add left memory should be 2\r\n        final DefaultFactHandle f1 = new DefaultFactHandle( 1,\r\n                                                            \"cheese\" );\r\n        final ReteTuple tuple1 = new ReteTuple( f1 );\r\n        this.node.assertTuple( tuple1,\r\n                               this.context,\r\n                               this.workingMemory );\r\n\r\n        // Should be no assertions\r\n        assertLength( 0,\r\n                      this.sink.getAsserted() );\r\n\r\n        this.node.retractObject( f0,\r\n                                 this.context,\r\n                                 this.workingMemory );\r\n        // We still propagate all joins for a retract. Later we might apply tests first.\r\n        assertLength( 1,\r\n                      this.sink.getRetracted() );\r\n    }","id":96608,"modified_method":"public void testConstraintPropagations() throws Exception {\r\n        this.constraint.isAllowed = false;\r\n        // assert first right object\r\n        final DefaultFactHandle f0 = (DefaultFactHandle) this.workingMemory.assertObject( \"test0\" );\r\n        this.node.assertObject( f0,\r\n                                this.context,\r\n                                this.workingMemory );\r\n\r\n        // assert tuple, should add left memory should be 2\r\n        final DefaultFactHandle f1 = new DefaultFactHandle( 1,\r\n                                                            \"cheese\" );\r\n        final ReteTuple tuple1 = new ReteTuple( f1 );\r\n        this.node.assertTuple( tuple1,\r\n                               this.context,\r\n                               this.workingMemory );\r\n\r\n        // Should be no assertions\r\n        assertLength( 0,\r\n                      this.sink.getAsserted() );\r\n\r\n        this.node.retractObject( f0,\r\n                                 this.context,\r\n                                 this.workingMemory );\r\n        assertLength( 0,\r\n                      this.sink.getRetracted() );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public int getAttached() {\r\n        return this.attached;\r\n    }","id":96609,"modified_method":"public int getAttached() {\r\n        return this.sink.getSinks().length;\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\r\n     * Setup the BetaNode used in each of the tests\r\n     * @throws IntrospectionException \r\n     */\r\n    public void setUp() throws IntrospectionException {\r\n        this.rule = new Rule( \"test-rule\" );\r\n        this.context = new PropagationContextImpl( 0,\r\n                                                   PropagationContext.ASSERTION,\r\n                                                   null,\r\n                                                   null );\r\n        this.workingMemory = new ReteooWorkingMemory( 1,\r\n                                                      (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n\r\n        // string1Declaration is bound to column 3 \r\n        this.node = new NotNode( 15,\r\n                                 new MockTupleSource( 5 ),\r\n                                 new MockObjectSource( 8 ),\r\n                                 new DefaultBetaConstraints( this.constraint ) );\r\n\r\n        this.sink = new MockTupleSink();\r\n        this.node.addTupleSink( this.sink );\r\n\r\n        //        this.ria = new RightInputAdapterNode( 2,\r\n        //                                              0,\r\n        //                                              this.node );\r\n        //        this.ria.attach();\r\n        //\r\n        //        this.sink = new MockObjectSink();\r\n        //        this.ria.addObjectSink( this.sink );\r\n\r\n        this.memory = (BetaMemory) this.workingMemory.getNodeMemory( this.node );\r\n    }","id":96610,"modified_method":"/**\r\n     * Setup the BetaNode used in each of the tests\r\n     * @throws IntrospectionException \r\n     */\r\n    public void setUp() throws IntrospectionException {\r\n        this.rule = new Rule( \"test-rule\" );\r\n        this.context = new PropagationContextImpl( 0,\r\n                                                   PropagationContext.ASSERTION,\r\n                                                   null,\r\n                                                   null );\r\n        this.workingMemory = new ReteooWorkingMemory( 1,\r\n                                                      (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n\r\n        RuleBaseConfiguration configuration = new RuleBaseConfiguration();\r\n        \r\n        // string1Declaration is bound to column 3 \r\n        this.node = new NotNode( 15,\r\n                                 new MockTupleSource( 5 ),\r\n                                 new MockObjectSource( 8 ),\r\n                                 new DefaultBetaConstraints( new BetaNodeFieldConstraint[] { this.constraint }, configuration ) );\r\n\r\n        this.sink = new MockTupleSink();\r\n        this.node.addTupleSink( this.sink );\r\n\r\n        //        this.ria = new RightInputAdapterNode( 2,\r\n        //                                              0,\r\n        //                                              this.node );\r\n        //        this.ria.attach();\r\n        //\r\n        //        this.sink = new MockObjectSink();\r\n        //        this.ria.addObjectSink( this.sink );\r\n\r\n        this.memory = (BetaMemory) this.workingMemory.getNodeMemory( this.node );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testMatches() {\r\n\r\n        final Rete source = new Rete();\r\n\r\n        ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                            new ClassObjectType( String.class ),\r\n                                                            source );\r\n\r\n        assertFalse( objectTypeNode.matches( new Object() ) );\r\n        assertFalse( objectTypeNode.matches( new Integer( 5 ) ) );\r\n        assertTrue( objectTypeNode.matches( \"string\" ) );\r\n\r\n        objectTypeNode = new ObjectTypeNode( 1,\r\n                                             new ClassObjectType( Object.class ),\r\n                                             source );\r\n\r\n        assertTrue( objectTypeNode.matches( new Object() ) );\r\n        assertTrue( objectTypeNode.matches( new Integer( 5 ) ) );\r\n        assertTrue( objectTypeNode.matches( \"string\" ) );\r\n\r\n    }","id":96611,"modified_method":"public void testMatches() {\r\n\r\n        final Rete source = new Rete();\r\n\r\n        ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                            new ClassObjectType( String.class ),\r\n                                                            source,\r\n                                                            3);\r\n\r\n        assertFalse( objectTypeNode.matches( new Object() ) );\r\n        assertFalse( objectTypeNode.matches( new Integer( 5 ) ) );\r\n        assertTrue( objectTypeNode.matches( \"string\" ) );\r\n\r\n        objectTypeNode = new ObjectTypeNode( 1,\r\n                                             new ClassObjectType( Object.class ),\r\n                                             source,\r\n                                             3);\r\n\r\n        assertTrue( objectTypeNode.matches( new Object() ) );\r\n        assertTrue( objectTypeNode.matches( new Integer( 5 ) ) );\r\n        assertTrue( objectTypeNode.matches( \"string\" ) );\r\n\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testAttach() throws Exception {\r\n        final Rete source = new Rete();\r\n\r\n        final ObjectType objectType = new ClassObjectType( String.class );\r\n\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  objectType,\r\n                                                                  source );\r\n\r\n        assertEquals( 1,\r\n                      objectTypeNode.getId() );\r\n\r\n        final Field field = Rete.class.getDeclaredField( \"objectTypeNodes\" );\r\n        field.setAccessible( true );\r\n        final ObjectHashMap map = (ObjectHashMap) field.get( source );\r\n\r\n        assertEquals( 0,\r\n                      map.size() );\r\n\r\n        objectTypeNode.attach();\r\n\r\n        assertEquals( 1,\r\n                      map.size() );\r\n\r\n        assertSame( objectTypeNode,\r\n                    map.get( objectType ) );\r\n    }","id":96612,"modified_method":"public void testAttach() throws Exception {\r\n        final Rete source = new Rete();\r\n\r\n        final ObjectType objectType = new ClassObjectType( String.class );\r\n\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  objectType,\r\n                                                                  source,\r\n                                                                  3);\r\n\r\n        assertEquals( 1,\r\n                      objectTypeNode.getId() );\r\n\r\n        final Field field = Rete.class.getDeclaredField( \"objectTypeNodes\" );\r\n        field.setAccessible( true );\r\n        final ObjectHashMap map = (ObjectHashMap) field.get( source );\r\n\r\n        assertEquals( 0,\r\n                      map.size() );\r\n\r\n        objectTypeNode.attach();\r\n\r\n        assertEquals( 1,\r\n                      map.size() );\r\n\r\n        assertSame( objectTypeNode,\r\n                    map.get( objectType ) );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testUpdateSink() throws FactException {\r\n        // Tests that when new child is added only the last added child is\r\n        // updated\r\n        // When the attachingNewNode flag is set\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n\r\n        final Rete source = new Rete();\r\n\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( String.class ),\r\n                                                                  source );\r\n\r\n        final MockObjectSink sink1 = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink1 );\r\n\r\n        final Object string1 = \"cheese\";\r\n\r\n        final Object string2 = \"bread\";\r\n\r\n        final DefaultFactHandle handle1 = new DefaultFactHandle( 1,\r\n                                                                 string1 );\r\n        final DefaultFactHandle handle2 = new DefaultFactHandle( 2,\r\n                                                                 string2 );\r\n\r\n        objectTypeNode.assertObject( handle1,\r\n                                     context,\r\n                                     workingMemory );\r\n\r\n        objectTypeNode.assertObject( handle2,\r\n                                     context,\r\n                                     workingMemory );\r\n\r\n        assertEquals( 2,\r\n                      sink1.getAsserted().size() );\r\n\r\n        final MockObjectSink sink2 = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink2 );\r\n\r\n        assertEquals( 0,\r\n                      sink2.getAsserted().size() );\r\n\r\n        objectTypeNode.updateSink( sink2,\r\n                                   null,\r\n                                   workingMemory );\r\n\r\n        assertEquals( 2,\r\n                      sink2.getAsserted().size() );\r\n\r\n        final Object string3 = \"water\";\r\n\r\n        final DefaultFactHandle handle3 = new DefaultFactHandle( 3,\r\n                                                                 string3 );\r\n\r\n        objectTypeNode.assertObject( handle3,\r\n                                     context,\r\n                                     workingMemory );\r\n\r\n        assertEquals( 3,\r\n                      sink1.getAsserted().size() );\r\n\r\n        assertEquals( 3,\r\n                      sink2.getAsserted().size() );\r\n\r\n    }","id":96613,"modified_method":"public void testUpdateSink() throws FactException {\r\n        // Tests that when new child is added only the last added child is\r\n        // updated\r\n        // When the attachingNewNode flag is set\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n\r\n        final Rete source = new Rete();\r\n\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( String.class ),\r\n                                                                  source,\r\n                                                                  3);\r\n\r\n        final MockObjectSink sink1 = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink1 );\r\n\r\n        final Object string1 = \"cheese\";\r\n\r\n        final Object string2 = \"bread\";\r\n\r\n        final DefaultFactHandle handle1 = new DefaultFactHandle( 1,\r\n                                                                 string1 );\r\n        final DefaultFactHandle handle2 = new DefaultFactHandle( 2,\r\n                                                                 string2 );\r\n\r\n        objectTypeNode.assertObject( handle1,\r\n                                     context,\r\n                                     workingMemory );\r\n\r\n        objectTypeNode.assertObject( handle2,\r\n                                     context,\r\n                                     workingMemory );\r\n\r\n        assertEquals( 2,\r\n                      sink1.getAsserted().size() );\r\n\r\n        final MockObjectSink sink2 = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink2 );\r\n\r\n        assertEquals( 0,\r\n                      sink2.getAsserted().size() );\r\n\r\n        objectTypeNode.updateSink( sink2,\r\n                                   null,\r\n                                   workingMemory );\r\n\r\n        assertEquals( 2,\r\n                      sink2.getAsserted().size() );\r\n\r\n        final Object string3 = \"water\";\r\n\r\n        final DefaultFactHandle handle3 = new DefaultFactHandle( 3,\r\n                                                                 string3 );\r\n\r\n        objectTypeNode.assertObject( handle3,\r\n                                     context,\r\n                                     workingMemory );\r\n\r\n        assertEquals( 3,\r\n                      sink1.getAsserted().size() );\r\n\r\n        assertEquals( 3,\r\n                      sink2.getAsserted().size() );\r\n\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testMemory() {\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( String.class ),\r\n                                                                  new Rete() );\r\n\r\n        final FactHashTable memory = (FactHashTable) workingMemory.getNodeMemory( objectTypeNode );\r\n\r\n        assertNotNull( memory );\r\n    }","id":96614,"modified_method":"public void testMemory() {\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( String.class ),\r\n                                                                  new Rete(),\r\n                                                                  3);\r\n\r\n        final FactHashTable memory = (FactHashTable) workingMemory.getNodeMemory( objectTypeNode );\r\n\r\n        assertNotNull( memory );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testAssertObjectWithShadowEnabled() throws Exception {\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final ReteooRuleBase ruleBase = (ReteooRuleBase) RuleBaseFactory.newRuleBase();\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           ruleBase );\r\n\r\n        final Rete source = ruleBase.getRete();\r\n\r\n        final Class shadowClass = ShadowProxyFactory.getProxy( Cheese.class );\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( Cheese.class,\r\n                                                                                       shadowClass ),\r\n                                                                  source );\r\n\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink );\r\n\r\n        final Object cheese = new Cheese( \"muzzarela\",\r\n                                          5 );\r\n\r\n        final InternalFactHandle handle1 = (InternalFactHandle) workingMemory.assertObject( cheese );\r\n\r\n        // should assert as ObjectType matches\r\n        objectTypeNode.assertObject( handle1,\r\n                                     context,\r\n                                     workingMemory );\r\n\r\n        // make sure just string1 was asserted \r\n        final List asserted = sink.getAsserted();\r\n        assertLength( 1,\r\n                      asserted );\r\n        assertTrue( ((InternalFactHandle) ((Object[]) asserted.get( 0 ))[0]).getObject() instanceof ShadowProxy );\r\n        assertEquals( cheese,\r\n                      ((InternalFactHandle) ((Object[]) asserted.get( 0 ))[0]).getObject() );\r\n\r\n        // check asserted object was added to memory\r\n        final FactHashTable memory = (FactHashTable) workingMemory.getNodeMemory( objectTypeNode );\r\n        assertEquals( 1,\r\n                      memory.size() );\r\n        assertTrue( memory.contains( handle1 ) );\r\n    }","id":96615,"modified_method":"public void testAssertObjectWithShadowEnabled() throws Exception {\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final ReteooRuleBase ruleBase = (ReteooRuleBase) RuleBaseFactory.newRuleBase();\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           ruleBase );\r\n\r\n        final Rete source = ruleBase.getRete();\r\n\r\n        final Class shadowClass = ShadowProxyFactory.getProxy( Cheese.class );\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( Cheese.class,\r\n                                                                                       shadowClass ),\r\n                                                                  source,\r\n                                                                  3);\r\n\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink );\r\n\r\n        final Object cheese = new Cheese( \"muzzarela\",\r\n                                          5 );\r\n\r\n        final InternalFactHandle handle1 = (InternalFactHandle) workingMemory.assertObject( cheese );\r\n\r\n        // should assert as ObjectType matches\r\n        objectTypeNode.assertObject( handle1,\r\n                                     context,\r\n                                     workingMemory );\r\n\r\n        // make sure just string1 was asserted \r\n        final List asserted = sink.getAsserted();\r\n        assertLength( 1,\r\n                      asserted );\r\n        assertTrue( ((InternalFactHandle) ((Object[]) asserted.get( 0 ))[0]).getObject() instanceof ShadowProxy );\r\n        assertEquals( cheese,\r\n                      ((InternalFactHandle) ((Object[]) asserted.get( 0 ))[0]).getObject() );\r\n\r\n        // check asserted object was added to memory\r\n        final FactHashTable memory = (FactHashTable) workingMemory.getNodeMemory( objectTypeNode );\r\n        assertEquals( 1,\r\n                      memory.size() );\r\n        assertTrue( memory.contains( handle1 ) );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testAssertObject() throws Exception {\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final ReteooRuleBase ruleBase = (ReteooRuleBase) RuleBaseFactory.newRuleBase();\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           ruleBase );\r\n\r\n        final Rete source = ruleBase.getRete();\r\n\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( String.class ),\r\n                                                                  source );\r\n\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink );\r\n\r\n        final Object string1 = \"cheese\";\r\n\r\n        final InternalFactHandle handle1 = (InternalFactHandle) workingMemory.assertObject( string1 );\r\n\r\n        // should assert as ObjectType matches\r\n        objectTypeNode.assertObject( handle1,\r\n                                     context,\r\n                                     workingMemory );\r\n\r\n        // make sure just string1 was asserted \r\n        final List asserted = sink.getAsserted();\r\n        assertLength( 1,\r\n                      asserted );\r\n        assertSame( string1,\r\n                    workingMemory.getObject( (DefaultFactHandle) ((Object[]) asserted.get( 0 ))[0] ) );\r\n\r\n        // check asserted object was added to memory\r\n        final FactHashTable memory = (FactHashTable) workingMemory.getNodeMemory( objectTypeNode );\r\n        assertEquals( 1,\r\n                      memory.size() );\r\n        assertTrue( memory.contains( handle1 ) );\r\n    }","id":96616,"modified_method":"public void testAssertObject() throws Exception {\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final ReteooRuleBase ruleBase = (ReteooRuleBase) RuleBaseFactory.newRuleBase();\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           ruleBase );\r\n\r\n        final Rete source = ruleBase.getRete();\r\n\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( String.class ),\r\n                                                                  source,\r\n                                                                  3 );\r\n\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink );\r\n\r\n        final Object string1 = \"cheese\";\r\n\r\n        final InternalFactHandle handle1 = (InternalFactHandle) workingMemory.assertObject( string1 );\r\n\r\n        // should assert as ObjectType matches\r\n        objectTypeNode.assertObject( handle1,\r\n                                     context,\r\n                                     workingMemory );\r\n\r\n        // make sure just string1 was asserted \r\n        final List asserted = sink.getAsserted();\r\n        assertLength( 1,\r\n                      asserted );\r\n        assertSame( string1,\r\n                    workingMemory.getObject( (DefaultFactHandle) ((Object[]) asserted.get( 0 ))[0] ) );\r\n\r\n        // check asserted object was added to memory\r\n        final FactHashTable memory = (FactHashTable) workingMemory.getNodeMemory( objectTypeNode );\r\n        assertEquals( 1,\r\n                      memory.size() );\r\n        assertTrue( memory.contains( handle1 ) );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testRetractObject() throws Exception {\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n\r\n        final Rete source = new Rete();\r\n\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( String.class ),\r\n                                                                  source );\r\n\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink );\r\n\r\n        final Object string1 = \"cheese\";\r\n\r\n        final DefaultFactHandle handle1 = new DefaultFactHandle( 1,\r\n                                                                 string1 );\r\n\r\n        /* should assert as ObjectType matches */\r\n        objectTypeNode.assertObject( handle1,\r\n                                     context,\r\n                                     workingMemory );\r\n        /* check asserted object was added to memory */\r\n        final FactHashTable memory = (FactHashTable) workingMemory.getNodeMemory( objectTypeNode );\r\n        assertEquals( 1,\r\n                      memory.size() );\r\n\r\n        /* should retract as ObjectType matches */\r\n        objectTypeNode.retractObject( handle1,\r\n                                      context,\r\n                                      workingMemory );\r\n        /* check asserted object was removed from memory */\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n\r\n        /* make sure its just the handle1 for string1 that was propagated */\r\n        final List retracted = sink.getRetracted();\r\n        assertLength( 1,\r\n                      retracted );\r\n        assertSame( handle1,\r\n                    ((Object[]) retracted.get( 0 ))[0] );\r\n    }","id":96617,"modified_method":"public void testRetractObject() throws Exception {\r\n        final PropagationContext context = new PropagationContextImpl( 0,\r\n                                                                       PropagationContext.ASSERTION,\r\n                                                                       null,\r\n                                                                       null );\r\n\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           (ReteooRuleBase) RuleBaseFactory.newRuleBase() );\r\n\r\n        final Rete source = new Rete();\r\n\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( String.class ),\r\n                                                                  source,\r\n                                                                  3);\r\n\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink );\r\n\r\n        final Object string1 = \"cheese\";\r\n\r\n        final DefaultFactHandle handle1 = new DefaultFactHandle( 1,\r\n                                                                 string1 );\r\n\r\n        /* should assert as ObjectType matches */\r\n        objectTypeNode.assertObject( handle1,\r\n                                     context,\r\n                                     workingMemory );\r\n        /* check asserted object was added to memory */\r\n        final FactHashTable memory = (FactHashTable) workingMemory.getNodeMemory( objectTypeNode );\r\n        assertEquals( 1,\r\n                      memory.size() );\r\n\r\n        /* should retract as ObjectType matches */\r\n        objectTypeNode.retractObject( handle1,\r\n                                      context,\r\n                                      workingMemory );\r\n        /* check asserted object was removed from memory */\r\n        assertEquals( 0,\r\n                      memory.size() );\r\n\r\n        /* make sure its just the handle1 for string1 that was propagated */\r\n        final List retracted = sink.getRetracted();\r\n        assertLength( 1,\r\n                      retracted );\r\n        assertSame( handle1,\r\n                    ((Object[]) retracted.get( 0 ))[0] );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"private AlphaNodeFieldConstraint getLiteralConstraint(final Column column,\r\n                                                          final String fieldName,\r\n                                                          final Object fieldValue,\r\n                                                          final Evaluator evaluator) throws IntrospectionException {\r\n        final Class clazz = ((ClassObjectType) column.getObjectType()).getClassType();\r\n\r\n        final int index = getIndex( clazz,\r\n                                    fieldName );\r\n\r\n        final FieldValue field = new MockField( fieldValue );\r\n\r\n        final FieldExtractor extractor = new ClassFieldExtractor( clazz,\r\n                                                                  fieldName );\r\n\r\n        return new LiteralConstraint( extractor,\r\n                                      evaluator,\r\n                                      field );\r\n    }","id":96618,"modified_method":"private AlphaNodeFieldConstraint getLiteralConstraint(final Column column,\r\n                                                          final String fieldName,\r\n                                                          final Object fieldValue,\r\n                                                          final Evaluator evaluator) throws IntrospectionException {\r\n        final Class clazz = ((ClassObjectType) column.getObjectType()).getClassType();\r\n\r\n        final int index = getIndex( clazz,\r\n                                    fieldName );\r\n\r\n        final FieldValue field = FieldFactory.getFieldValue( fieldValue );\r\n\r\n        final FieldExtractor extractor = new ClassFieldExtractor( clazz,\r\n                                                                  fieldName );\r\n\r\n        return new LiteralConstraint( extractor,\r\n                                      evaluator,\r\n                                      field );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"private AlphaNodeFieldConstraint getBoundVariableConstraint(final Column column,\r\n                                                                final String fieldName,\r\n                                                                final Declaration declaration,\r\n                                                                final Evaluator evaluator) throws IntrospectionException {\r\n        final Class clazz = ((ClassObjectType) column.getObjectType()).getClassType();\r\n\r\n        final FieldExtractor extractor = new ClassFieldExtractor( clazz,\r\n                                                                  fieldName );\r\n\r\n        return new VariableConstraint( extractor,\r\n                                       declaration,\r\n                                       evaluator );\r\n    }","id":96619,"modified_method":"private BetaNodeFieldConstraint getBoundVariableConstraint(final Column column,\r\n                                                                final String fieldName,\r\n                                                                final Declaration declaration,\r\n                                                                final Evaluator evaluator) throws IntrospectionException {\r\n        final Class clazz = ((ClassObjectType) column.getObjectType()).getClassType();\r\n\r\n        final FieldExtractor extractor = new ClassFieldExtractor( clazz,\r\n                                                                  fieldName );\r\n\r\n        return new VariableConstraint( extractor,\r\n                                       declaration,\r\n                                       evaluator );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"protected void setUp() throws Exception {\r\n        super.setUp();\r\n        this.stageType = new ClassObjectType( Stage.class );\r\n        this.edgeType = new ClassObjectType( Edge.class );\r\n        this.integerEqualEvaluator = ValueType.INTEGER_TYPE.getEvaluator( Operator.EQUAL );\r\n        this.integerNotEqualEvaluator = ValueType.INTEGER_TYPE.getEvaluator( Operator.NOT_EQUAL );\r\n        this.pkg = new Package( \"or\" );\r\n    }","id":96620,"modified_method":"protected void setUp() throws Exception {\r\n        super.setUp();\r\n        this.stageType = new ClassObjectType( Stage.class );\r\n        this.edgeType = new ClassObjectType( Edge.class );\r\n        this.integerEqualEvaluator = ValueType.PINTEGER_TYPE.getEvaluator( Operator.EQUAL );\r\n        this.integerNotEqualEvaluator = ValueType.PINTEGER_TYPE.getEvaluator( Operator.NOT_EQUAL );\r\n        this.pkg = new Package( \"or\" );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void test1() {\r\n        final ReteooRuleBase ruleBase = (ReteooRuleBase) RuleBaseFactory.newRuleBase();\r\n\r\n        final ReteooWorkingMemory workingMemory = (ReteooWorkingMemory) ruleBase.newWorkingMemory();\r\n\r\n        final Rete rete = ruleBase.getRete();\r\n\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( State.class ),\r\n                                                                  rete );\r\n\r\n        objectTypeNode.attach();\r\n\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink );\r\n\r\n        final State a = new State( \"go\" );\r\n        workingMemory.assertObject( a,\r\n                                    true );\r\n\r\n        assertEquals( 1,\r\n                      sink.getAsserted().size() );\r\n        assertEquals( 0,\r\n                      sink.getModified().size() );\r\n\r\n        a.setState( \"stop\" );\r\n\r\n        assertEquals( 1,\r\n                      sink.getModified().size() );\r\n    }","id":96621,"modified_method":"public void test1() {\r\n        final ReteooRuleBase ruleBase = (ReteooRuleBase) RuleBaseFactory.newRuleBase();\r\n\r\n        final ReteooWorkingMemory workingMemory = (ReteooWorkingMemory) ruleBase.newWorkingMemory();\r\n\r\n        final Rete rete = ruleBase.getRete();\r\n\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( State.class ),\r\n                                                                  rete,\r\n                                                                  3);\r\n\r\n        objectTypeNode.attach();\r\n\r\n        final MockObjectSink sink = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink );\r\n\r\n        final State a = new State( \"go\" );\r\n        workingMemory.assertObject( a,\r\n                                    true );\r\n\r\n        assertEquals( 1,\r\n                      sink.getAsserted().size() );\r\n\r\n        a.setState( \"stop\" );\r\n\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void testQueryTerminalNode() {\r\n        final ReteooRuleBase ruleBase = (ReteooRuleBase) RuleBaseFactory.newRuleBase();\r\n        final Rete rete = ruleBase.getRete();\r\n\r\n        final ClassObjectType queryObjectType = new ClassObjectType( DroolsQuery.class );\r\n        final ObjectTypeNode queryObjectTypeNode = new ObjectTypeNode( 1,\r\n                                                                       queryObjectType,\r\n                                                                       rete );\r\n        queryObjectTypeNode.attach();\r\n\r\n        ClassFieldExtractor extractor = new ClassFieldExtractor( DroolsQuery.class,\r\n                                                                 \"name\" );\r\n\r\n        FieldValue field = new MockField( \"query-1\" );\r\n\r\n        final Evaluator evaluator = ValueType.STRING_TYPE.getEvaluator( Operator.EQUAL );\r\n        LiteralConstraint constraint = new LiteralConstraint( extractor,\r\n                                                              evaluator,\r\n                                                              field );\r\n\r\n        AlphaNode alphaNode = new AlphaNode( 2,\r\n                                             constraint,\r\n                                             queryObjectTypeNode );\r\n        alphaNode.attach();\r\n\r\n        final LeftInputAdapterNode liaNode = new LeftInputAdapterNode( 3,\r\n                                                                       alphaNode );\r\n        liaNode.attach();\r\n\r\n        final ClassObjectType cheeseObjectType = new ClassObjectType( Cheese.class );\r\n        final ObjectTypeNode cheeseObjectTypeNode = new ObjectTypeNode( 4,\r\n                                                                        cheeseObjectType,\r\n                                                                        rete );\r\n        cheeseObjectTypeNode.attach();\r\n\r\n        extractor = new ClassFieldExtractor( Cheese.class,\r\n                                             \"type\" );\r\n\r\n        field = new MockField( \"stilton\" );\r\n\r\n        constraint = new LiteralConstraint( extractor,\r\n                                            evaluator,\r\n                                            field );\r\n\r\n        alphaNode = new AlphaNode( 5,\r\n                                   constraint,\r\n                                   cheeseObjectTypeNode );\r\n        alphaNode.attach();\r\n\r\n        final JoinNode joinNode = new JoinNode( 6,\r\n                                                liaNode,\r\n                                                alphaNode );\r\n        joinNode.attach();\r\n\r\n        final Query query = new Query( \"query-1\" );\r\n\r\n        final QueryTerminalNode queryNode = new QueryTerminalNode( 7,\r\n                                                                   joinNode,\r\n                                                                   query );\r\n\r\n        queryNode.attach();\r\n\r\n        final WorkingMemory workingMemory = ruleBase.newWorkingMemory();\r\n        QueryResults results = workingMemory.getQueryResults( \"query-1\" );\r\n\r\n        assertNull( results );\r\n\r\n        final Cheese stilton1 = new Cheese( \"stilton\",\r\n                                            100 );\r\n        final FactHandle handle1 = workingMemory.assertObject( stilton1 );\r\n\r\n        results = workingMemory.getQueryResults( \"query-1\" );\r\n\r\n        assertEquals( 1,\r\n                      results.size() );\r\n\r\n        final Cheese cheddar = new Cheese( \"cheddar\",\r\n                                           55 );\r\n        workingMemory.assertObject( cheddar );\r\n\r\n        results = workingMemory.getQueryResults( \"query-1\" );\r\n\r\n        assertEquals( 1,\r\n                      results.size() );\r\n\r\n        final Cheese stilton2 = new Cheese( \"stilton\",\r\n                                            5 );\r\n\r\n        final FactHandle handle2 = workingMemory.assertObject( stilton2 );\r\n\r\n        results = workingMemory.getQueryResults( \"query-1\" );\r\n\r\n        assertEquals( 2,\r\n                      results.size() );\r\n\r\n        QueryResult result = results.get( 0 );\r\n        assertEquals( 1,\r\n                      result.size() );\r\n        assertSame( stilton1,\r\n                    result.get( 0 ) );\r\n\r\n        result = results.get( 1 );\r\n        assertEquals( 1,\r\n                      result.size() );\r\n        assertSame( stilton2,\r\n                    result.get( 0 ) );\r\n\r\n        int i = 0;\r\n        for ( final Iterator it = results.iterator(); it.hasNext(); ) {\r\n            result = (QueryResult) it.next();\r\n            assertEquals( 1,\r\n                          result.size() );\r\n            if ( i == 0 ) {\r\n                assertSame( stilton1,\r\n                            result.get( 0 ) );\r\n            } else {\r\n                assertSame( stilton2,\r\n                            result.get( 0 ) );\r\n            }\r\n            i++;\r\n        }\r\n\r\n        workingMemory.retractObject( handle1 );\r\n        results = workingMemory.getQueryResults( \"query-1\" );\r\n\r\n        assertEquals( 1,\r\n                      results.size() );\r\n\r\n        workingMemory.retractObject( handle2 );\r\n        results = workingMemory.getQueryResults( \"query-1\" );\r\n\r\n        assertNull( results );\r\n\r\n    }","id":96622,"modified_method":"public void testQueryTerminalNode() {\r\n        final ReteooRuleBase ruleBase = (ReteooRuleBase) RuleBaseFactory.newRuleBase();\r\n        final Rete rete = ruleBase.getRete();\r\n\r\n        final ClassObjectType queryObjectType = new ClassObjectType( DroolsQuery.class );\r\n        final ObjectTypeNode queryObjectTypeNode = new ObjectTypeNode( 1,\r\n                                                                       queryObjectType,\r\n                                                                       rete,\r\n                                                                       3);\r\n        queryObjectTypeNode.attach();\r\n\r\n        ClassFieldExtractor extractor = new ClassFieldExtractor( DroolsQuery.class,\r\n                                                                 \"name\" );\r\n\r\n        FieldValue field = FieldFactory.getFieldValue( \"query-1\" );\r\n\r\n        final Evaluator evaluator = ValueType.STRING_TYPE.getEvaluator( Operator.EQUAL );\r\n        LiteralConstraint constraint = new LiteralConstraint( extractor,\r\n                                                              evaluator,\r\n                                                              field );\r\n\r\n        AlphaNode alphaNode = new AlphaNode( 2,\r\n                                             constraint,\r\n                                             queryObjectTypeNode );\r\n        alphaNode.attach();\r\n\r\n        final LeftInputAdapterNode liaNode = new LeftInputAdapterNode( 3,\r\n                                                                       alphaNode );\r\n        liaNode.attach();\r\n\r\n        final ClassObjectType cheeseObjectType = new ClassObjectType( Cheese.class );\r\n        final ObjectTypeNode cheeseObjectTypeNode = new ObjectTypeNode( 4,\r\n                                                                        cheeseObjectType,\r\n                                                                        rete,\r\n                                                                        3);\r\n        cheeseObjectTypeNode.attach();\r\n\r\n        extractor = new ClassFieldExtractor( Cheese.class,\r\n                                             \"type\" );\r\n\r\n        field = FieldFactory.getFieldValue( \"stilton\" );\r\n\r\n        constraint = new LiteralConstraint( extractor,\r\n                                            evaluator,\r\n                                            field );\r\n\r\n        alphaNode = new AlphaNode( 5,\r\n                                   constraint,\r\n                                   cheeseObjectTypeNode );\r\n        alphaNode.attach();\r\n\r\n        final JoinNode joinNode = new JoinNode( 6,\r\n                                                liaNode,\r\n                                                alphaNode );\r\n        joinNode.attach();\r\n\r\n        final Query query = new Query( \"query-1\" );\r\n\r\n        final QueryTerminalNode queryNode = new QueryTerminalNode( 7,\r\n                                                                   joinNode,\r\n                                                                   query );\r\n\r\n        queryNode.attach();\r\n\r\n        final WorkingMemory workingMemory = ruleBase.newWorkingMemory();\r\n        QueryResults results = workingMemory.getQueryResults( \"query-1\" );\r\n\r\n        assertNull( results );\r\n\r\n        final Cheese stilton1 = new Cheese( \"stilton\",\r\n                                            100 );\r\n        final FactHandle handle1 = workingMemory.assertObject( stilton1 );\r\n\r\n        results = workingMemory.getQueryResults( \"query-1\" );\r\n\r\n        assertEquals( 1,\r\n                      results.size() );\r\n\r\n        final Cheese cheddar = new Cheese( \"cheddar\",\r\n                                           55 );\r\n        workingMemory.assertObject( cheddar );\r\n\r\n        results = workingMemory.getQueryResults( \"query-1\" );\r\n\r\n        assertEquals( 1,\r\n                      results.size() );\r\n\r\n        final Cheese stilton2 = new Cheese( \"stilton\",\r\n                                            5 );\r\n\r\n        final FactHandle handle2 = workingMemory.assertObject( stilton2 );\r\n\r\n        results = workingMemory.getQueryResults( \"query-1\" );\r\n\r\n        assertEquals( 2,\r\n                      results.size() );\r\n\r\n        QueryResult result = results.get( 0 );\r\n        assertEquals( 1,\r\n                      result.size() );\r\n        assertEquals( stilton2,\r\n                    result.get( 0 ) );\r\n\r\n        result = results.get( 1 );\r\n        assertEquals( 1,\r\n                      result.size() );\r\n        assertEquals( stilton1,\r\n                    result.get( 0 ) );\r\n\r\n        int i = 0;\r\n        for ( final Iterator it = results.iterator(); it.hasNext(); ) {\r\n            result = (QueryResult) it.next();\r\n            assertEquals( 1,\r\n                          result.size() );\r\n            if ( i == 1 ) {\r\n                assertSame( stilton1,\r\n                            result.get( 0 ) );\r\n            } else {\r\n                assertSame( stilton2,\r\n                            result.get( 0 ) );\r\n            }\r\n            i++;\r\n        }\r\n\r\n        workingMemory.retractObject( handle1 );\r\n        results = workingMemory.getQueryResults( \"query-1\" );\r\n\r\n        assertEquals( 1,\r\n                      results.size() );\r\n\r\n        workingMemory.retractObject( handle2 );\r\n        results = workingMemory.getQueryResults( \"query-1\" );\r\n\r\n        assertNull( results );\r\n\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\r\n     * Test asserts correctly propagate\r\n     * \r\n     * @throws Exception\r\n     */\r\n    public void testAssertObject() throws Exception {\r\n        final ReteooRuleBase ruleBase = (ReteooRuleBase) RuleBaseFactory.newRuleBase();\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           ruleBase );\r\n\r\n        // Create a Rete network with ObjectTypeNodes for List, Collection and ArrayList\r\n        final Rete rete = ruleBase.getRete();\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( List.class ),\r\n                                                                  rete );\r\n        objectTypeNode.attach();\r\n        final MockObjectSink sink1 = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink1 );\r\n\r\n        // There are no String ObjectTypeNodes, make sure its not propagated\r\n\r\n        final String string = \"String\";\r\n        final DefaultFactHandle h1 = new DefaultFactHandle( 1,\r\n                                                            string );\r\n\r\n        rete.assertObject( h1,\r\n                           null,\r\n                           workingMemory );\r\n\r\n        assertLength( 0,\r\n                      sink1.getAsserted() );\r\n\r\n        // There is a List ObjectTypeNode, make sure it was propagated\r\n        final List list = new ArrayList();\r\n        final DefaultFactHandle h2 = new DefaultFactHandle( 1,\r\n                                                            list );\r\n\r\n        rete.assertObject( h2,\r\n                           null,\r\n                           workingMemory );\r\n\r\n        final List asserted = sink1.getAsserted();\r\n        assertLength( 1,\r\n                      asserted );\r\n\r\n        final Object[] results = (Object[]) asserted.get( 0 );\r\n        assertSame( list,\r\n                    ((DefaultFactHandle) results[0]).getObject() );\r\n    }","id":96623,"modified_method":"/**\r\n     * Test asserts correctly propagate\r\n     * \r\n     * @throws Exception\r\n     */\r\n    public void testAssertObject() throws Exception {\r\n        final ReteooRuleBase ruleBase = (ReteooRuleBase) RuleBaseFactory.newRuleBase();\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           ruleBase );\r\n\r\n        // Create a Rete network with ObjectTypeNodes for List, Collection and ArrayList\r\n        final Rete rete = ruleBase.getRete();\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( List.class ),\r\n                                                                  rete,\r\n                                                                  3);\r\n        objectTypeNode.attach();\r\n        final MockObjectSink sink1 = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink1 );\r\n\r\n        // There are no String ObjectTypeNodes, make sure its not propagated\r\n\r\n        final String string = \"String\";\r\n        final DefaultFactHandle h1 = new DefaultFactHandle( 1,\r\n                                                            string );\r\n\r\n        rete.assertObject( h1,\r\n                           null,\r\n                           workingMemory );\r\n\r\n        assertLength( 0,\r\n                      sink1.getAsserted() );\r\n\r\n        // There is a List ObjectTypeNode, make sure it was propagated\r\n        final List list = new ArrayList();\r\n        final DefaultFactHandle h2 = new DefaultFactHandle( 1,\r\n                                                            list );\r\n\r\n        rete.assertObject( h2,\r\n                           null,\r\n                           workingMemory );\r\n\r\n        final List asserted = sink1.getAsserted();\r\n        assertLength( 1,\r\n                      asserted );\r\n\r\n        final Object[] results = (Object[]) asserted.get( 0 );\r\n        assertSame( list,\r\n                    ((DefaultFactHandle) results[0]).getObject() );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\r\n     * Tests ObjectTypeNodes are correctly added to the Rete object\r\n     * \r\n     * @throws Exception\r\n     */\r\n    public void testObjectTypeNodes() throws Exception {\r\n        final ReteooRuleBase ruleBase = (ReteooRuleBase) RuleBaseFactory.newRuleBase();\r\n\r\n        final Rete rete = ruleBase.getRete();\r\n\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( Object.class ),\r\n                                                                  rete );\r\n        objectTypeNode.attach();\r\n\r\n        final ObjectTypeNode stringTypeNode = new ObjectTypeNode( 2,\r\n                                                                  new ClassObjectType( String.class ),\r\n                                                                  rete );\r\n        stringTypeNode.attach();\r\n\r\n        final Field field = Rete.class.getDeclaredField( \"objectTypeNodes\" );\r\n        field.setAccessible( true );\r\n        final ObjectHashMap map = (ObjectHashMap) field.get( rete );\r\n\r\n        // Check the ObjectTypeNodes are correctly added to Rete\r\n        assertEquals( 2,\r\n                      map.size() );\r\n\r\n        assertNotNull( map.get( new ClassObjectType( Object.class ) ) );\r\n        assertNotNull( map.get( new ClassObjectType( String.class ) ) );\r\n    }","id":96624,"modified_method":"/**\r\n     * Tests ObjectTypeNodes are correctly added to the Rete object\r\n     * \r\n     * @throws Exception\r\n     */\r\n    public void testObjectTypeNodes() throws Exception {\r\n        final ReteooRuleBase ruleBase = (ReteooRuleBase) RuleBaseFactory.newRuleBase();\r\n\r\n        final Rete rete = ruleBase.getRete();\r\n\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( Object.class ),\r\n                                                                  rete,\r\n                                                                  3);\r\n        objectTypeNode.attach();\r\n\r\n        final ObjectTypeNode stringTypeNode = new ObjectTypeNode( 2,\r\n                                                                  new ClassObjectType( String.class ),\r\n                                                                  rete,\r\n                                                                  3);\r\n        stringTypeNode.attach();\r\n\r\n        final Field field = Rete.class.getDeclaredField( \"objectTypeNodes\" );\r\n        field.setAccessible( true );\r\n        final ObjectHashMap map = (ObjectHashMap) field.get( rete );\r\n\r\n        // Check the ObjectTypeNodes are correctly added to Rete\r\n        assertEquals( 2,\r\n                      map.size() );\r\n\r\n        assertNotNull( map.get( new ClassObjectType( Object.class ) ) );\r\n        assertNotNull( map.get( new ClassObjectType( String.class ) ) );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\r\n     * Tests that interfaces and parent classes for an asserted  class are  cached, for  quick future iterations\r\n     * \r\n     * @throws FactException\r\n     */\r\n    public void testCache() throws FactException {\r\n        final ReteooRuleBase ruleBase = (ReteooRuleBase) RuleBaseFactory.newRuleBase();\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           ruleBase );\r\n\r\n        // Create a Rete network with ObjectTypeNodes for List, Collection and ArrayList\r\n        final Rete rete = ruleBase.getRete();\r\n        ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                            new ClassObjectType( List.class ),\r\n                                                            rete );\r\n        objectTypeNode.attach();\r\n        MockObjectSink sink = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink );\r\n\r\n        objectTypeNode = new ObjectTypeNode( 1,\r\n                                             new ClassObjectType( Collection.class ),\r\n                                             rete );\r\n        objectTypeNode.attach();\r\n        sink = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink );\r\n\r\n        objectTypeNode = new ObjectTypeNode( 1,\r\n                                             new ClassObjectType( ArrayList.class ),\r\n                                             rete );\r\n        objectTypeNode.attach();\r\n        sink = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink );\r\n\r\n        // ArrayList matches all three ObjectTypeNodes\r\n        final DefaultFactHandle h1 = new DefaultFactHandle( 1,\r\n                                                            new ArrayList() );\r\n        rete.assertObject( h1,\r\n                           null,\r\n                           workingMemory );\r\n\r\n        // LinkedList matches two ObjectTypeNodes        \r\n        h1.setObject( new LinkedList() );\r\n        rete.assertObject( h1,\r\n                           null,\r\n                           workingMemory );\r\n\r\n        final ObjectHashMap map = (ObjectHashMap) workingMemory.getNodeMemory( rete );\r\n        assertLength( 3,\r\n                      (ObjectTypeNode[]) map.get( ArrayList.class ) );\r\n\r\n        assertLength( 2,\r\n                      (ObjectTypeNode[]) map.get( LinkedList.class ) );\r\n\r\n    }","id":96625,"modified_method":"/**\r\n     * Tests that interfaces and parent classes for an asserted  class are  cached, for  quick future iterations\r\n     * \r\n     * @throws FactException\r\n     */\r\n    public void testCache() throws FactException {\r\n        final ReteooRuleBase ruleBase = (ReteooRuleBase) RuleBaseFactory.newRuleBase();\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           ruleBase );\r\n\r\n        // Create a Rete network with ObjectTypeNodes for List, Collection and ArrayList\r\n        final Rete rete = ruleBase.getRete();\r\n        ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                            new ClassObjectType( List.class ),\r\n                                                            rete,\r\n                                                            3);\r\n        objectTypeNode.attach();\r\n        MockObjectSink sink = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink );\r\n\r\n        objectTypeNode = new ObjectTypeNode( 1,\r\n                                             new ClassObjectType( Collection.class ),\r\n                                             rete,\r\n                                             3);\r\n        objectTypeNode.attach();\r\n        sink = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink );\r\n\r\n        objectTypeNode = new ObjectTypeNode( 1,\r\n                                             new ClassObjectType( ArrayList.class ),\r\n                                             rete,\r\n                                             3);\r\n        objectTypeNode.attach();\r\n        sink = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink );\r\n\r\n        // ArrayList matches all three ObjectTypeNodes\r\n        final DefaultFactHandle h1 = new DefaultFactHandle( 1,\r\n                                                            new ArrayList() );\r\n        rete.assertObject( h1,\r\n                           null,\r\n                           workingMemory );\r\n\r\n        // LinkedList matches two ObjectTypeNodes        \r\n        h1.setObject( new LinkedList() );\r\n        rete.assertObject( h1,\r\n                           null,\r\n                           workingMemory );\r\n\r\n        final ObjectHashMap map = (ObjectHashMap) workingMemory.getNodeMemory( rete );\r\n        assertLength( 3,\r\n                      (ObjectTypeNode[]) map.get( ArrayList.class ) );\r\n\r\n        assertLength( 2,\r\n                      (ObjectTypeNode[]) map.get( LinkedList.class ) );\r\n\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\r\n     * All objects retracted from a RootNode must be propagated to all children\r\n     * ObjectTypeNodes.\r\n     */\r\n    public void testRetractObject() throws Exception {\r\n        final ReteooRuleBase ruleBase = (ReteooRuleBase) RuleBaseFactory.newRuleBase();\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           ruleBase );\r\n\r\n        // Create a Rete network with ObjectTypeNodes for List, Collection and ArrayList\r\n        final Rete rete = ruleBase.getRete();\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( List.class ),\r\n                                                                  rete );\r\n        objectTypeNode.attach();\r\n        final MockObjectSink sink1 = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink1 );\r\n\r\n        // There are no String ObjectTypeNodes, make sure its not propagated\r\n        final String string = \"String\";\r\n        final DefaultFactHandle h1 = new DefaultFactHandle( 1,\r\n                                                            string );\r\n\r\n        rete.assertObject( h1,\r\n                           null,\r\n                           workingMemory );\r\n        assertLength( 0,\r\n                      sink1.getRetracted() );\r\n\r\n        // There is a List ObjectTypeNode, make sure it was propagated\r\n        final List list = new ArrayList();\r\n        final DefaultFactHandle h2 = new DefaultFactHandle( 1,\r\n                                                            list );\r\n\r\n        // need  to assert first, to force it to build  up the cache\r\n        rete.assertObject( h2,\r\n                           null,\r\n                           workingMemory );\r\n\r\n        rete.retractObject( h2,\r\n                            null,\r\n                            workingMemory );\r\n\r\n        final List retracted = sink1.getRetracted();\r\n        assertLength( 1,\r\n                      retracted );\r\n\r\n        final Object[] results = (Object[]) retracted.get( 0 );\r\n        assertSame( list,\r\n                    ((DefaultFactHandle) results[0]).getObject() );\r\n    }","id":96626,"modified_method":"/**\r\n     * All objects retracted from a RootNode must be propagated to all children\r\n     * ObjectTypeNodes.\r\n     */\r\n    public void testRetractObject() throws Exception {\r\n        final ReteooRuleBase ruleBase = (ReteooRuleBase) RuleBaseFactory.newRuleBase();\r\n        final ReteooWorkingMemory workingMemory = new ReteooWorkingMemory( 1,\r\n                                                                           ruleBase );\r\n\r\n        // Create a Rete network with ObjectTypeNodes for List, Collection and ArrayList\r\n        final Rete rete = ruleBase.getRete();\r\n        final ObjectTypeNode objectTypeNode = new ObjectTypeNode( 1,\r\n                                                                  new ClassObjectType( List.class ),\r\n                                                                  rete,\r\n                                                                  3);\r\n        objectTypeNode.attach();\r\n        final MockObjectSink sink1 = new MockObjectSink();\r\n        objectTypeNode.addObjectSink( sink1 );\r\n\r\n        // There are no String ObjectTypeNodes, make sure its not propagated\r\n        final String string = \"String\";\r\n        final DefaultFactHandle h1 = new DefaultFactHandle( 1,\r\n                                                            string );\r\n\r\n        rete.assertObject( h1,\r\n                           null,\r\n                           workingMemory );\r\n        assertLength( 0,\r\n                      sink1.getRetracted() );\r\n\r\n        // There is a List ObjectTypeNode, make sure it was propagated\r\n        final List list = new ArrayList();\r\n        final DefaultFactHandle h2 = new DefaultFactHandle( 1,\r\n                                                            list );\r\n\r\n        // need  to assert first, to force it to build  up the cache\r\n        rete.assertObject( h2,\r\n                           null,\r\n                           workingMemory );\r\n\r\n        rete.retractObject( h2,\r\n                            null,\r\n                            workingMemory );\r\n\r\n        final List retracted = sink1.getRetracted();\r\n        assertLength( 1,\r\n                      retracted );\r\n\r\n        final Object[] results = (Object[]) retracted.get( 0 );\r\n        assertSame( list,\r\n                    ((DefaultFactHandle) results[0]).getObject() );\r\n    }","commit_id":"47fb4db33a78ddc4cbf4c3f1ffb0a0e7f1ca2109","url":"https://github.com/droolsjbpm/drools"},{"original_method":"public void choose (T item) {\n\t\tif (item == null) throw new IllegalArgumentException(\"item cannot be null.\");\n\t\tif (isDisabled) return;\n\t\tif (selected.size > 0 && rangeSelect && multiple\n\t\t\t&& (Gdx.input.isKeyPressed(Keys.SHIFT_LEFT) || Gdx.input.isKeyPressed(Keys.SHIFT_RIGHT))) {\n\t\t\tint low = items.indexOf(getLastSelected(), false);\n\t\t\tint high = items.indexOf(item, false);\n\t\t\tif (low > high) {\n\t\t\t\tint temp = low;\n\t\t\t\tlow = high;\n\t\t\t\thigh = temp;\n\t\t\t}\n\t\t\tsnapshot();\n\t\t\tif (!UIUtils.ctrl()) selected.clear();\n\t\t\tfor (; low <= high; low++)\n\t\t\t\tselected.add(items.get(low));\n\t\t\tif (fireChangeEvent()) revert();\n\t\t\tcleanup();\n\t\t\treturn;\n\t\t}\n\t\tsuper.choose(item);\n\t}","id":96627,"modified_method":"public void choose (T item) {\n\t\tif (item == null) throw new IllegalArgumentException(\"item cannot be null.\");\n\t\tif (isDisabled) return;\n\t\tif (selected.size > 0 && rangeSelect && multiple\n\t\t\t&& (Gdx.input.isKeyPressed(Keys.SHIFT_LEFT) || Gdx.input.isKeyPressed(Keys.SHIFT_RIGHT))) {\n\t\t\tint low = array.indexOf(getLastSelected(), false);\n\t\t\tint high = array.indexOf(item, false);\n\t\t\tif (low > high) {\n\t\t\t\tint temp = low;\n\t\t\t\tlow = high;\n\t\t\t\thigh = temp;\n\t\t\t}\n\t\t\tsnapshot();\n\t\t\tif (!UIUtils.ctrl()) selected.clear();\n\t\t\tfor (; low <= high; low++)\n\t\t\t\tselected.add(array.get(low));\n\t\t\tif (fireChangeEvent()) revert();\n\t\t\tcleanup();\n\t\t\treturn;\n\t\t}\n\t\tsuper.choose(item);\n\t}","commit_id":"a665c7e3f669952594e2b126decdf3c683a94f2b","url":"https://github.com/libgdx/libgdx"},{"original_method":"public ArraySelection (Array<T> items) {\n\t\tthis.items = items;\n\t}","id":96628,"modified_method":"public ArraySelection (Array<T> array) {\n\t\tthis.array = array;\n\t}","commit_id":"a665c7e3f669952594e2b126decdf3c683a94f2b","url":"https://github.com/libgdx/libgdx"},{"original_method":"/** Sets the current items, clearing the selection if it is no longer valid. If a selection is\r\n\t * {@link ArraySelection#getRequired()}, the first item is selected. */\r\n\tpublic void setItems (Array newItems) {\r\n\t\tif (newItems == null) throw new IllegalArgumentException(\"newItems cannot be null.\");\r\n\r\n\t\titems.clear();\r\n\t\titems.addAll(newItems);\r\n\r\n\t\tT selected = getSelected();\r\n\t\tif (!items.contains(selected, false)) {\r\n\t\t\tif (selection.getRequired() && items.size > 0)\r\n\t\t\t\tselection.set(items.first());\r\n\t\t\telse\r\n\t\t\t\tselection.clear();\r\n\t\t}\r\n\r\n\t\tinvalidateHierarchy();\r\n\t}","id":96629,"modified_method":"/** Sets the current items, clearing the selection if it is no longer valid. If a selection is\r\n\t * {@link ArraySelection#getRequired()}, the first item is selected. */\r\n\tpublic void setItems (Array newItems) {\r\n\t\tif (newItems == null) throw new IllegalArgumentException(\"newItems cannot be null.\");\r\n\t\tfloat oldPrefWidth = getPrefWidth(), oldPrefHeight = getPrefHeight();\r\n\r\n\t\titems.clear();\r\n\t\titems.addAll(newItems);\r\n\t\tselection.validate();\r\n\r\n\t\tinvalidate();\r\n\t\tif (oldPrefWidth != getPrefWidth() || oldPrefHeight != getPrefHeight()) invalidateHierarchy();\r\n\t}","commit_id":"a665c7e3f669952594e2b126decdf3c683a94f2b","url":"https://github.com/libgdx/libgdx"},{"original_method":"public void setItems (T... newItems) {\r\n\t\tif (newItems == null) throw new IllegalArgumentException(\"newItems cannot be null.\");\r\n\r\n\t\titems.clear();\r\n\t\titems.addAll(newItems);\r\n\r\n\t\tif (selection.getRequired() && items.size > 0)\r\n\t\t\tselection.set(items.first());\r\n\t\telse\r\n\t\t\tselection.clear();\r\n\r\n\t\tinvalidateHierarchy();\r\n\t}","id":96630,"modified_method":"public void setItems (T... newItems) {\r\n\t\tif (newItems == null) throw new IllegalArgumentException(\"newItems cannot be null.\");\r\n\t\tfloat oldPrefWidth = getPrefWidth(), oldPrefHeight = getPrefHeight();\r\n\r\n\t\titems.clear();\r\n\t\titems.addAll(newItems);\r\n\t\tselection.validate();\r\n\r\n\t\tinvalidate();\r\n\t\tif (oldPrefWidth != getPrefWidth() || oldPrefHeight != getPrefHeight()) invalidateHierarchy();\r\n\t}","commit_id":"a665c7e3f669952594e2b126decdf3c683a94f2b","url":"https://github.com/libgdx/libgdx"},{"original_method":"public List (ListStyle style) {\r\n\t\tselection = new ArraySelection(items);\r\n\t\tselection.setActor(this);\r\n\t\tselection.setRequired(true);\r\n\r\n\t\tsetStyle(style);\r\n\t\tsetSize(getPrefWidth(), getPrefHeight());\r\n\r\n\t\taddListener(new InputListener() {\r\n\t\t\tpublic boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {\r\n\t\t\t\tif (pointer == 0 && button != 0) return false;\r\n\t\t\t\tif (selection.isDisabled()) return false;\r\n\t\t\t\tList.this.touchDown(y);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});\r\n\t}","id":96631,"modified_method":"public List (ListStyle style) {\r\n\t\tselection.setActor(this);\r\n\t\tselection.setRequired(true);\r\n\r\n\t\tsetStyle(style);\r\n\t\tsetSize(getPrefWidth(), getPrefHeight());\r\n\r\n\t\taddListener(new InputListener() {\r\n\t\t\tpublic boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {\r\n\t\t\t\tif (pointer == 0 && button != 0) return false;\r\n\t\t\t\tif (selection.isDisabled()) return false;\r\n\t\t\t\tList.this.touchDown(y);\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});\r\n\t}","commit_id":"a665c7e3f669952594e2b126decdf3c683a94f2b","url":"https://github.com/libgdx/libgdx"},{"original_method":"public void showList () {\r\n\t\tselectBoxList.show(getStage());\r\n\t}","id":96632,"modified_method":"public void showList () {\r\n\t\tif (items.size == 0) return;\r\n\t\tselectBoxList.show(getStage());\r\n\t}","commit_id":"a665c7e3f669952594e2b126decdf3c683a94f2b","url":"https://github.com/libgdx/libgdx"},{"original_method":"public SelectBoxList (final SelectBox<T> selectBox) {\r\n\t\t\tsuper(null, selectBox.style.scrollStyle);\r\n\t\t\tthis.selectBox = selectBox;\r\n\r\n\t\t\tsetOverscroll(false, false);\r\n\t\t\tsetFadeScrollBars(false);\r\n\r\n\t\t\tlist = new List(selectBox.style.listStyle);\r\n\t\t\tlist.setTouchable(Touchable.disabled);\r\n\t\t\tsetWidget(list);\r\n\r\n\t\t\tlist.addListener(new ClickListener() {\r\n\t\t\t\tpublic void clicked (InputEvent event, float x, float y) {\r\n\t\t\t\t\tselectBox.setSelected(list.getSelected());\r\n\t\t\t\t\thide();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpublic boolean mouseMoved (InputEvent event, float x, float y) {\r\n\t\t\t\t\tlist.setSelectedIndex(Math.min(selectBox.items.size - 1, (int)((list.getHeight() - y) / list.getItemHeight())));\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpublic void exit (InputEvent event, float x, float y, int pointer, Actor toActor) {\r\n\t\t\t\t\tlist.selection.set(selectBox.getSelected());\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\thideListener = new InputListener() {\r\n\t\t\t\tpublic boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {\r\n\t\t\t\t\tActor target = event.getTarget();\r\n\t\t\t\t\tif (isAscendantOf(target)) return false;\r\n\t\t\t\t\tlist.selection.set(selectBox.getSelected());\r\n\t\t\t\t\thide();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpublic boolean keyDown (InputEvent event, int keycode) {\r\n\t\t\t\t\tif (keycode == Keys.ESCAPE) hide();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}","id":96633,"modified_method":"public SelectBoxList (final SelectBox<T> selectBox) {\r\n\t\t\tsuper(null, selectBox.style.scrollStyle);\r\n\t\t\tthis.selectBox = selectBox;\r\n\r\n\t\t\tsetOverscroll(false, false);\r\n\t\t\tsetFadeScrollBars(false);\r\n\r\n\t\t\tlist = new List(selectBox.style.listStyle);\r\n\t\t\tlist.setTouchable(Touchable.disabled);\r\n\t\t\tsetWidget(list);\r\n\r\n\t\t\tlist.addListener(new ClickListener() {\r\n\t\t\t\tpublic void clicked (InputEvent event, float x, float y) {\r\n\t\t\t\t\tselectBox.selection.choose(list.getSelected());\r\n\t\t\t\t\thide();\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpublic boolean mouseMoved (InputEvent event, float x, float y) {\r\n\t\t\t\t\tlist.setSelectedIndex(Math.min(selectBox.items.size - 1, (int)((list.getHeight() - y) / list.getItemHeight())));\r\n\t\t\t\t\treturn true;\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\taddListener(new InputListener() {\r\n\t\t\t\tpublic void exit (InputEvent event, float x, float y, int pointer, Actor toActor) {\r\n\t\t\t\t\tif (toActor == null || !isAscendantOf(toActor)) list.selection.set(selectBox.getSelected());\r\n\t\t\t\t}\r\n\t\t\t});\r\n\r\n\t\t\thideListener = new InputListener() {\r\n\t\t\t\tpublic boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {\r\n\t\t\t\t\tActor target = event.getTarget();\r\n\t\t\t\t\tif (isAscendantOf(target)) return false;\r\n\t\t\t\t\tlist.selection.set(selectBox.getSelected());\r\n\t\t\t\t\thide();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\r\n\t\t\t\tpublic boolean keyDown (InputEvent event, int keycode) {\r\n\t\t\t\t\tif (keycode == Keys.ESCAPE) hide();\r\n\t\t\t\t\treturn false;\r\n\t\t\t\t}\r\n\t\t\t};\r\n\t\t}","commit_id":"a665c7e3f669952594e2b126decdf3c683a94f2b","url":"https://github.com/libgdx/libgdx"},{"original_method":"public void show (Stage stage) {\r\n\t\t\tif (list.isTouchable()) return;\r\n\r\n\t\t\tstage.removeCaptureListener(hideListener);\r\n\t\t\tstage.addCaptureListener(hideListener);\r\n\t\t\tstage.addActor(this);\r\n\r\n\t\t\tselectBox.localToStageCoordinates(screenPosition.set(0, 0));\r\n\r\n\t\t\t// Show the list above or below the select box, limited to a number of items and the available height in the stage.\r\n\t\t\tfloat itemHeight = list.getItemHeight();\r\n\t\t\tfloat height = itemHeight * (maxListCount <= 0 ? selectBox.items.size : Math.min(maxListCount, selectBox.items.size));\r\n\t\t\tDrawable scrollPaneBackground = getStyle().background;\r\n\t\t\tif (scrollPaneBackground != null)\r\n\t\t\t\theight += scrollPaneBackground.getTopHeight() + scrollPaneBackground.getBottomHeight();\r\n\t\t\tDrawable listBackground = list.getStyle().background;\r\n\t\t\tif (listBackground != null) height += listBackground.getTopHeight() + listBackground.getBottomHeight();\r\n\r\n\t\t\tfloat heightBelow = screenPosition.y;\r\n\t\t\tfloat heightAbove = stage.getCamera().viewportHeight - screenPosition.y - selectBox.getHeight();\r\n\t\t\tboolean below = true;\r\n\t\t\tif (height > heightBelow) {\r\n\t\t\t\tif (heightAbove > heightBelow) {\r\n\t\t\t\t\tbelow = false;\r\n\t\t\t\t\theight = Math.min(height, heightAbove);\r\n\t\t\t\t} else\r\n\t\t\t\t\theight = heightBelow;\r\n\t\t\t}\r\n\r\n\t\t\tif (below)\r\n\t\t\t\tsetY(screenPosition.y - height);\r\n\t\t\telse\r\n\t\t\t\tsetY(screenPosition.y + selectBox.getHeight());\r\n\t\t\tsetX(screenPosition.x);\r\n\t\t\tsetWidth(selectBox.getWidth());\r\n\t\t\tsetHeight(height);\r\n\r\n\t\t\tvalidate();\r\n\t\t\tscrollToCenter(0, list.getHeight() - selectBox.getSelectedIndex() * itemHeight - itemHeight / 2, 0, 0);\r\n\t\t\tupdateVisualScroll();\r\n\r\n\t\t\tpreviousScrollFocus = null;\r\n\t\t\tActor actor = stage.getScrollFocus();\r\n\t\t\tif (actor != null && !actor.isDescendantOf(this)) previousScrollFocus = actor;\r\n\t\t\tstage.setScrollFocus(this);\r\n\r\n\t\t\tlist.setTouchable(Touchable.enabled);\r\n\t\t\tclearActions();\r\n\t\t\tselectBox.onShow(this, below);\r\n\t\t}","id":96634,"modified_method":"public void show (Stage stage) {\r\n\t\t\tif (list.isTouchable()) return;\r\n\r\n\t\t\tstage.removeCaptureListener(hideListener);\r\n\t\t\tstage.addCaptureListener(hideListener);\r\n\t\t\tstage.addActor(this);\r\n\r\n\t\t\tselectBox.localToStageCoordinates(screenPosition.set(0, 0));\r\n\r\n\t\t\t// Show the list above or below the select box, limited to a number of items and the available height in the stage.\r\n\t\t\tfloat itemHeight = list.getItemHeight();\r\n\t\t\tfloat height = itemHeight * (maxListCount <= 0 ? selectBox.items.size : Math.min(maxListCount, selectBox.items.size));\r\n\t\t\tDrawable scrollPaneBackground = getStyle().background;\r\n\t\t\tif (scrollPaneBackground != null)\r\n\t\t\t\theight += scrollPaneBackground.getTopHeight() + scrollPaneBackground.getBottomHeight();\r\n\t\t\tDrawable listBackground = list.getStyle().background;\r\n\t\t\tif (listBackground != null) height += listBackground.getTopHeight() + listBackground.getBottomHeight();\r\n\r\n\t\t\tfloat heightBelow = screenPosition.y;\r\n\t\t\tfloat heightAbove = stage.getCamera().viewportHeight - screenPosition.y - selectBox.getHeight();\r\n\t\t\tboolean below = true;\r\n\t\t\tif (height > heightBelow) {\r\n\t\t\t\tif (heightAbove > heightBelow) {\r\n\t\t\t\t\tbelow = false;\r\n\t\t\t\t\theight = Math.min(height, heightAbove);\r\n\t\t\t\t} else\r\n\t\t\t\t\theight = heightBelow;\r\n\t\t\t}\r\n\r\n\t\t\tif (below)\r\n\t\t\t\tsetY(screenPosition.y - height);\r\n\t\t\telse\r\n\t\t\t\tsetY(screenPosition.y + selectBox.getHeight());\r\n\t\t\tsetX(screenPosition.x);\r\n\t\t\tsetSize(Math.max(getPrefWidth(), selectBox.getWidth()), height);\r\n\r\n\t\t\tvalidate();\r\n\t\t\tscrollToCenter(0, list.getHeight() - selectBox.getSelectedIndex() * itemHeight - itemHeight / 2, 0, 0);\r\n\t\t\tupdateVisualScroll();\r\n\r\n\t\t\tpreviousScrollFocus = null;\r\n\t\t\tActor actor = stage.getScrollFocus();\r\n\t\t\tif (actor != null && !actor.isDescendantOf(this)) previousScrollFocus = actor;\r\n\t\t\tstage.setScrollFocus(this);\r\n\r\n\t\t\tlist.setTouchable(Touchable.enabled);\r\n\t\t\tclearActions();\r\n\t\t\tselectBox.onShow(this, below);\r\n\t\t}","commit_id":"a665c7e3f669952594e2b126decdf3c683a94f2b","url":"https://github.com/libgdx/libgdx"},{"original_method":"/** Set the backing Array that makes up the choices available in the SelectBox */\r\n\tpublic void setItems (Array<T> newItems) {\r\n\t\tif (newItems == null) throw new IllegalArgumentException(\"newItems cannot be null.\");\r\n\t\titems.clear();\r\n\t\titems.addAll(newItems);\r\n\t\tselectBoxList.list.setItems(items);\r\n\t\tselection.set(selectBoxList.list.getSelected());\r\n\t\tinvalidateHierarchy();\r\n\t}","id":96635,"modified_method":"/** Set the backing Array that makes up the choices available in the SelectBox */\r\n\tpublic void setItems (Array<T> newItems) {\r\n\t\tif (newItems == null) throw new IllegalArgumentException(\"newItems cannot be null.\");\r\n\t\tfloat oldPrefWidth = getPrefWidth();\r\n\r\n\t\titems.clear();\r\n\t\titems.addAll(newItems);\r\n\t\tselection.validate();\r\n\t\tselectBoxList.list.setItems(items);\r\n\r\n\t\tinvalidate();\r\n\t\tif (oldPrefWidth != getPrefWidth()) invalidateHierarchy();\r\n\t}","commit_id":"a665c7e3f669952594e2b126decdf3c683a94f2b","url":"https://github.com/libgdx/libgdx"},{"original_method":"public SelectBox (SelectBoxStyle style) {\r\n\t\tsetStyle(style);\r\n\t\tsetSize(getPrefWidth(), getPrefHeight());\r\n\r\n\t\tselection.setActor(this);\r\n\t\tselectBoxList = new SelectBoxList(this);\r\n\r\n\t\taddListener(clickListener = new ClickListener() {\r\n\t\t\tpublic boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {\r\n\t\t\t\tif (pointer == 0 && button != 0) return false;\r\n\t\t\t\tif (disabled) return false;\r\n\t\t\t\tif (selectBoxList.hasParent())\r\n\t\t\t\t\thideList();\r\n\t\t\t\telse\r\n\t\t\t\t\tshowList();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});\r\n\t}","id":96636,"modified_method":"public SelectBox (SelectBoxStyle style) {\r\n\t\tsetStyle(style);\r\n\t\tsetSize(getPrefWidth(), getPrefHeight());\r\n\r\n\t\tselection.setActor(this);\r\n\t\tselection.setRequired(true);\r\n\r\n\t\tselectBoxList = new SelectBoxList(this);\r\n\r\n\t\taddListener(clickListener = new ClickListener() {\r\n\t\t\tpublic boolean touchDown (InputEvent event, float x, float y, int pointer, int button) {\r\n\t\t\t\tif (pointer == 0 && button != 0) return false;\r\n\t\t\t\tif (disabled) return false;\r\n\t\t\t\tif (selectBoxList.hasParent())\r\n\t\t\t\t\thideList();\r\n\t\t\t\telse\r\n\t\t\t\t\tshowList();\r\n\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t});\r\n\t}","commit_id":"a665c7e3f669952594e2b126decdf3c683a94f2b","url":"https://github.com/libgdx/libgdx"},{"original_method":"/** Set the backing Array that makes up the choices available in the SelectBox */\r\n\tpublic void setItems (T... newItems) {\r\n\t\tif (newItems == null) throw new IllegalArgumentException(\"newItems cannot be null.\");\r\n\t\titems.clear();\r\n\t\titems.addAll(newItems);\r\n\t\tselectBoxList.list.setItems(items);\r\n\t\tselection.set(selectBoxList.list.getSelected());\r\n\t\tinvalidateHierarchy();\r\n\t}","id":96637,"modified_method":"/** Set the backing Array that makes up the choices available in the SelectBox */\r\n\tpublic void setItems (T... newItems) {\r\n\t\tif (newItems == null) throw new IllegalArgumentException(\"newItems cannot be null.\");\r\n\t\tfloat oldPrefWidth = getPrefWidth();\r\n\r\n\t\titems.clear();\r\n\t\titems.addAll(newItems);\r\n\t\tselection.validate();\r\n\t\tselectBoxList.list.setItems(items);\r\n\r\n\t\tinvalidate();\r\n\t\tif (oldPrefWidth != getPrefWidth()) invalidateHierarchy();\r\n\t}","commit_id":"a665c7e3f669952594e2b126decdf3c683a94f2b","url":"https://github.com/libgdx/libgdx"},{"original_method":"/** Called when the selection changes.\n\t * @return true if the change should be undone. */\n\tpublic boolean fireChangeEvent () {\n\t\tif (actor == null) return false;\n\t\tChangeEvent changeEvent = Pools.obtain(ChangeEvent.class);\n\t\ttry {\n\t\t\treturn actor.fire(changeEvent);\n\t\t} finally {\n\t\t\tPools.free(changeEvent);\n\t\t}\n\t}","id":96638,"modified_method":"/** Fires a change event on the selection's actor, if any. Called internally when the selection changes, depending on\n\t * {@link #setProgrammaticChangeEvents(boolean)}.\n\t * @return true if the change should be undone. */\n\tpublic boolean fireChangeEvent () {\n\t\tif (actor == null) return false;\n\t\tChangeEvent changeEvent = Pools.obtain(ChangeEvent.class);\n\t\ttry {\n\t\t\treturn actor.fire(changeEvent);\n\t\t} finally {\n\t\t\tPools.free(changeEvent);\n\t\t}\n\t}","commit_id":"a665c7e3f669952594e2b126decdf3c683a94f2b","url":"https://github.com/libgdx/libgdx"},{"original_method":"/** Selects or deselects the specified item based on how the selection is configured, whether ctrl is currently pressed, etc.\n\t * This is typically invoked by user interaction. */\n\tpublic void choose (T item) {\n\t\tif (item == null) throw new IllegalArgumentException(\"item cannot be null.\");\n\t\tif (isDisabled) return;\n\t\tsnapshot();\n\t\tif ((toggle || (!required && selected.size == 1) || UIUtils.ctrl()) && selected.contains(item)) {\n\t\t\tif (required && selected.size == 1) return;\n\t\t\tselected.remove(item);\n\t\t\tlastSelected = null;\n\t\t} else {\n\t\t\tboolean modified = false;\n\t\t\tif (!multiple || (!toggle && !UIUtils.ctrl())) {\n\t\t\t\tmodified = selected.size > 0;\n\t\t\t\tselected.clear();\n\t\t\t}\n\t\t\tif (!selected.add(item) && !modified) return;\n\t\t\tlastSelected = item;\n\t\t}\n\t\tif (fireChangeEvent()) revert();\n\t\tcleanup();\n\t}","id":96639,"modified_method":"/** Selects or deselects the specified item based on how the selection is configured, whether ctrl is currently pressed, etc.\n\t * This is typically invoked by user interaction. */\n\tpublic void choose (T item) {\n\t\tif (item == null) throw new IllegalArgumentException(\"item cannot be null.\");\n\t\tif (isDisabled) return;\n\t\tsnapshot();\n\t\ttry {\n\t\t\tif ((toggle || (!required && selected.size == 1) || UIUtils.ctrl()) && selected.contains(item)) {\n\t\t\t\tif (required && selected.size == 1) return;\n\t\t\t\tselected.remove(item);\n\t\t\t\tlastSelected = null;\n\t\t\t} else {\n\t\t\t\tboolean modified = false;\n\t\t\t\tif (!multiple || (!toggle && !UIUtils.ctrl())) {\n\t\t\t\t\tif (selected.size == 1 && selected.contains(item)) return;\n\t\t\t\t\tmodified = selected.size > 0;\n\t\t\t\t\tselected.clear();\n\t\t\t\t}\n\t\t\t\tif (!selected.add(item) && !modified) return;\n\t\t\t\tlastSelected = item;\n\t\t\t}\n\t\t\tif (fireChangeEvent()) revert();\n\t\t} finally {\n\t\t\tcleanup();\n\t\t}\n\t}","commit_id":"a665c7e3f669952594e2b126decdf3c683a94f2b","url":"https://github.com/libgdx/libgdx"},{"original_method":"@Override\n  @Nullable\n  protected PsiType getClosureParameterType(GrClosableBlock closure, int index) {\n    final PsiElement parent = closure.getParent();\n    if (!(parent instanceof GrMethodCallExpression)) {\n      return null;\n    }\n    PsiElementFactory factory = JavaPsiFacade.getInstance(closure.getProject()).getElementFactory();\n    String methodName = findMethodName((GrMethodCallExpression)parent);\n\n    GrExpression expression = ((GrMethodCallExpression)parent).getInvokedExpression();\n    if (!(expression instanceof GrReferenceExpression)) return null;\n    final PsiElement resolved = ((GrReferenceExpression)expression).resolve();\n    if (!(resolved instanceof GrGdkMethod)) return null;\n\n    GrExpression qualifier = ((GrReferenceExpression)expression).getQualifierExpression();\n    if (qualifier == null) return null;\n    PsiType type = qualifier.getType();\n\n    if (type == null) {\n      return null;\n    }\n\n    final PsiParameter[] params = closure.getAllParameters();\n\n    if (params.length == 1 && simpleTypes.containsKey(methodName)) {\n      return factory.createTypeFromText(simpleTypes.get(methodName), closure);\n    }\n\n    if (iterations.contains(methodName)) {\n      if (params.length == 1) {\n        return findTypeForIteration(qualifier, factory, closure);\n      }\n      if (params.length == 2 && InheritanceUtil.isInheritor(type, CommonClassNames.JAVA_UTIL_MAP)) {\n        if (index == 0) {\n          return PsiUtil.substituteTypeParameter(type, CommonClassNames.JAVA_UTIL_MAP, 0, true);\n        }\n        return PsiUtil.substituteTypeParameter(type, CommonClassNames.JAVA_UTIL_MAP, 1, true);\n      }\n    }\n    else if (\"with\".equals(methodName) && params.length == 1) {\n      return type;\n    }\n    else if (\"eachWithIndex\".equals(methodName)) {\n      PsiType res = findTypeForIteration(qualifier, factory, closure);\n      if (params.length == 2 && res != null) {\n        if (index == 0) {\n          return res;\n        }\n        return factory.createTypeFromText(CommonClassNames.JAVA_LANG_INTEGER, closure);\n      }\n      if (InheritanceUtil.isInheritor(type, CommonClassNames.JAVA_UTIL_MAP)) {\n        if (params.length == 2) {\n          if (index == 0) {\n            return getEntryForMap(type, factory, closure);\n          }\n          return factory.createTypeFromText(CommonClassNames.JAVA_LANG_INTEGER, closure);\n        }\n        if (params.length == 3) {\n          if (index == 0) {\n            return PsiUtil.substituteTypeParameter(type, CommonClassNames.JAVA_UTIL_MAP, 0, true);\n          }\n          if (index == 1) {\n            return PsiUtil.substituteTypeParameter(type, CommonClassNames.JAVA_UTIL_MAP, 1, true);\n          }\n          return factory.createTypeFromText(CommonClassNames.JAVA_LANG_INTEGER, closure);\n        }\n      }\n    }\n    else if (\"inject\".equals(methodName) && params.length == 2) {\n      if (index == 0) {\n        return factory.createTypeFromText(CommonClassNames.JAVA_LANG_OBJECT, closure);\n      }\n\n      PsiType res = findTypeForIteration(qualifier, factory, closure);\n      if (res != null) {\n        return res;\n      }\n      if (InheritanceUtil.isInheritor(type, CommonClassNames.JAVA_UTIL_MAP)) {\n        return getEntryForMap(type, factory, closure);\n      }\n    }\n    else if (\"eachPermutation\".equals(methodName) && params.length == 1) {\n      final PsiType itemType = findTypeForIteration(qualifier, factory, closure);\n      if (itemType != null) {\n        return factory.createTypeFromText(\"java.util.ArrayList<\" + itemType.getCanonicalText() + \">\", closure);\n      }\n      return factory.createTypeFromText(\"java.util.ArrayList\", closure);\n    }\n    else if (\"withDefault\".equals(methodName)) {\n      if (params.length == 1 && InheritanceUtil.isInheritor(type, CommonClassNames.JAVA_UTIL_MAP)) {\n        return PsiUtil.substituteTypeParameter(type, CommonClassNames.JAVA_UTIL_MAP, 0, true);\n      }\n    }\n    else if (\"sort\".equals(methodName)) {\n      if (params.length < 3) {\n        return findTypeForIteration(qualifier, factory, closure);\n      }\n    }\n    else if (\"withStream\".equals(methodName)) {\n      final PsiMethod method = ((GrMethodCallExpression)parent).resolveMethod();\n      if (method != null) {\n        final PsiParameter[] parameters = method.getParameterList().getParameters();\n        if (parameters.length > 0) {\n          return parameters[0].getType();\n        }\n      }\n    }\n    else if (\"withStreams\".equals(methodName)) {\n      if (index == 0) {\n        return factory.createTypeFromText(\"java.io.InputStream\", closure);\n      }\n      else if (index == 1) return factory.createTypeFromText(\"java.io.OutputStream\", closure);\n    }\n    else if (\"withObjectStreams\".equals(methodName)) {\n      if (index == 0) {\n        return factory.createTypeFromText(\"java.io.ObjectInputStream\", closure);\n      }\n      else if (index == 1) return factory.createTypeFromText(\"java.io.ObjectOutputStream\", closure);\n    }\n    return null;\n  }","id":96640,"modified_method":"@Override\n  @Nullable\n  protected PsiType getClosureParameterType(GrClosableBlock closure, int index) {\n    PsiElement parent = closure.getParent();\n    if (parent instanceof GrArgumentList) parent = parent.getParent();\n    if (!(parent instanceof GrMethodCall)) {\n      return null;\n    }\n    PsiElementFactory factory = JavaPsiFacade.getInstance(closure.getProject()).getElementFactory();\n    String methodName = findMethodName((GrMethodCall)parent);\n\n    GrExpression expression = ((GrMethodCall)parent).getInvokedExpression();\n    if (!(expression instanceof GrReferenceExpression)) return null;\n    final PsiElement resolved = ((GrReferenceExpression)expression).resolve();\n    if (!(resolved instanceof GrGdkMethod)) return null;\n\n    GrExpression qualifier = ((GrReferenceExpression)expression).getQualifierExpression();\n    if (qualifier == null) return null;\n    PsiType type = qualifier.getType();\n\n    if (type == null) {\n      return null;\n    }\n\n    final PsiParameter[] params = closure.getAllParameters();\n\n    if (params.length == 1 && simpleTypes.containsKey(methodName)) {\n      return factory.createTypeFromText(simpleTypes.get(methodName), closure);\n    }\n\n    if (iterations.contains(methodName)) {\n      if (params.length == 1) {\n        return findTypeForIteration(qualifier, factory, closure);\n      }\n      if (params.length == 2 && InheritanceUtil.isInheritor(type, CommonClassNames.JAVA_UTIL_MAP)) {\n        if (index == 0) {\n          return PsiUtil.substituteTypeParameter(type, CommonClassNames.JAVA_UTIL_MAP, 0, true);\n        }\n        return PsiUtil.substituteTypeParameter(type, CommonClassNames.JAVA_UTIL_MAP, 1, true);\n      }\n    }\n    else if (\"with\".equals(methodName) && params.length == 1) {\n      return type;\n    }\n    else if (\"eachWithIndex\".equals(methodName)) {\n      PsiType res = findTypeForIteration(qualifier, factory, closure);\n      if (params.length == 2 && res != null) {\n        if (index == 0) {\n          return res;\n        }\n        return factory.createTypeFromText(CommonClassNames.JAVA_LANG_INTEGER, closure);\n      }\n      if (InheritanceUtil.isInheritor(type, CommonClassNames.JAVA_UTIL_MAP)) {\n        if (params.length == 2) {\n          if (index == 0) {\n            return getEntryForMap(type, factory, closure);\n          }\n          return factory.createTypeFromText(CommonClassNames.JAVA_LANG_INTEGER, closure);\n        }\n        if (params.length == 3) {\n          if (index == 0) {\n            return PsiUtil.substituteTypeParameter(type, CommonClassNames.JAVA_UTIL_MAP, 0, true);\n          }\n          if (index == 1) {\n            return PsiUtil.substituteTypeParameter(type, CommonClassNames.JAVA_UTIL_MAP, 1, true);\n          }\n          return factory.createTypeFromText(CommonClassNames.JAVA_LANG_INTEGER, closure);\n        }\n      }\n    }\n    else if (\"inject\".equals(methodName) && params.length == 2) {\n      if (index == 0) {\n        return factory.createTypeFromText(CommonClassNames.JAVA_LANG_OBJECT, closure);\n      }\n\n      PsiType res = findTypeForIteration(qualifier, factory, closure);\n      if (res != null) {\n        return res;\n      }\n      if (InheritanceUtil.isInheritor(type, CommonClassNames.JAVA_UTIL_MAP)) {\n        return getEntryForMap(type, factory, closure);\n      }\n    }\n    else if (\"eachPermutation\".equals(methodName) && params.length == 1) {\n      final PsiType itemType = findTypeForIteration(qualifier, factory, closure);\n      if (itemType != null) {\n        return factory.createTypeFromText(\"java.util.ArrayList<\" + itemType.getCanonicalText() + \">\", closure);\n      }\n      return factory.createTypeFromText(\"java.util.ArrayList\", closure);\n    }\n    else if (\"withDefault\".equals(methodName)) {\n      if (params.length == 1 && InheritanceUtil.isInheritor(type, CommonClassNames.JAVA_UTIL_MAP)) {\n        return PsiUtil.substituteTypeParameter(type, CommonClassNames.JAVA_UTIL_MAP, 0, true);\n      }\n    }\n    else if (\"sort\".equals(methodName)) {\n      if (params.length < 3) {\n        return findTypeForIteration(qualifier, factory, closure);\n      }\n    }\n    else if (\"withStream\".equals(methodName)) {\n      final PsiMethod method = ((GrMethodCall)parent).resolveMethod();\n      if (method != null) {\n        final PsiParameter[] parameters = method.getParameterList().getParameters();\n        if (parameters.length > 0) {\n          return parameters[0].getType();\n        }\n      }\n    }\n    else if (\"withStreams\".equals(methodName)) {\n      if (index == 0) {\n        return factory.createTypeFromText(\"java.io.InputStream\", closure);\n      }\n      else if (index == 1) return factory.createTypeFromText(\"java.io.OutputStream\", closure);\n    }\n    else if (\"withObjectStreams\".equals(methodName)) {\n      if (index == 0) {\n        return factory.createTypeFromText(\"java.io.ObjectInputStream\", closure);\n      }\n      else if (index == 1) return factory.createTypeFromText(\"java.io.ObjectOutputStream\", closure);\n    }\n    return null;\n  }","commit_id":"88942c7e7477d1d873b7848351a71c3caf0b8cd3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static String findMethodName(@NotNull GrMethodCallExpression methodCall) {\n    GrExpression expression = methodCall.getInvokedExpression();\n    if (expression instanceof GrReferenceExpression) {\n      return ((GrReferenceExpression)expression).getReferenceName();\n    }\n    return null;\n  }","id":96641,"modified_method":"@Nullable\n  private static String findMethodName(@NotNull GrMethodCall methodCall) {\n    GrExpression expression = methodCall.getInvokedExpression();\n    if (expression instanceof GrReferenceExpression) {\n      return ((GrReferenceExpression)expression).getReferenceName();\n    }\n    return null;\n  }","commit_id":"88942c7e7477d1d873b7848351a71c3caf0b8cd3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  private static IElementType parseExpressionStatement(PsiBuilder builder, GroovyParser parser) {\n    final LighterASTNode firstDoneMarker = builder.getLatestDoneMarker();\n    PsiBuilder.Marker marker = builder.mark();\n    if (ConditionalExpression.parse(builder, parser) &&\n        !TokenSets.SEPARATORS.contains(builder.getTokenType()) &&\n        CommandArguments.parse(builder, parser)) {\n      marker.done(CALL_EXPRESSION);\n      return CALL_EXPRESSION;\n    }\n    marker.drop();\n    final LighterASTNode latestDoneMarker = builder.getLatestDoneMarker();\n    return latestDoneMarker != null && firstDoneMarker != latestDoneMarker ? latestDoneMarker.getTokenType() : WRONGWAY;\n  }","id":96642,"modified_method":"@Nullable\n  private static IElementType parseExpressionStatement(PsiBuilder builder, GroovyParser parser) {\n    if (checkForTypeCast(builder, parser)) return CAST_EXPRESSION;\n    PsiBuilder.Marker marker = builder.mark();\n    final PathExpression.Result result = PathExpression.parseForExprStatement(builder, parser);\n    if (result != PathExpression.Result.WRONG_WAY &&\n        !TokenSets.SEPARATORS.contains(builder.getTokenType()) &&\n        !TokenSets.BINARY_OP_SET.contains(builder.getTokenType()) &&\n        !TokenSets.UNARY_OP_SET.contains(builder.getTokenType())) {\n      if (result == PathExpression.Result.CALL_WITH_CLOSURE) {\n        marker.drop();\n        return PATH_METHOD_CALL;\n      }\n      else if (CommandArguments.parse(builder, parser)) {\n        marker.done(CALL_EXPRESSION);\n        return CALL_EXPRESSION;\n      }\n    }\n    marker.drop();\n    return WRONGWAY;\n  }","commit_id":"88942c7e7477d1d873b7848351a71c3caf0b8cd3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean parse(PsiBuilder builder, GroovyParser parser) {\n    PsiBuilder.Marker marker = builder.mark();\n\n    final IElementType result = parseExpressionStatement(builder, parser);\n    if (result != CALL_EXPRESSION) {\n      marker.drop();\n      return result != WRONGWAY;\n    }\n\n    while (true) {\n      if (PathExpression.namePartParse(builder, parser) != REFERENCE_EXPRESSION) {\n        marker.drop();\n        break;\n      }\n      final PsiBuilder.Marker exprStatement = marker.precede();\n      marker.done(REFERENCE_EXPRESSION);\n\n      if (builder.getTokenType() == mLPAREN) {\n        PrimaryExpression.methodCallArgsParse(builder, parser);\n        exprStatement.done(PATH_METHOD_CALL);\n      }\n      else if (CommandArguments.parse(builder, parser)) {\n        exprStatement.done(CALL_EXPRESSION);\n      }\n      else {\n        exprStatement.drop();\n        //builder.error(GroovyBundle.message(\"expression.expected\"));\n        break;\n      }\n\n      marker = exprStatement.precede();\n    }\n\n    return true;\n  }","id":96643,"modified_method":"public static boolean parse(PsiBuilder builder, GroovyParser parser) {\n    PsiBuilder.Marker marker = builder.mark();\n\n    final IElementType result = parseExpressionStatement(builder, parser);\n    if (result != CALL_EXPRESSION && result != PATH_METHOD_CALL) {\n      marker.drop();\n      return result != WRONGWAY;\n    }\n\n    while (true) {\n      if (PathExpression.namePartParse(builder, parser) != REFERENCE_EXPRESSION) {\n        marker.drop();\n        break;\n      }\n      PsiBuilder.Marker exprStatement = marker.precede();\n      marker.done(REFERENCE_EXPRESSION);\n\n      if (builder.getTokenType() == mLPAREN) {\n        PrimaryExpression.methodCallArgsParse(builder, parser);\n        exprStatement.done(PATH_METHOD_CALL);\n      }\n      else if (mLBRACK.equals(builder.getTokenType()) &&\n               !ParserUtils.lookAhead(builder, mLBRACK, mCOLON) &&\n               !ParserUtils.lookAhead(builder, mLBRACK, mNLS, mCOLON)) {\n        PathExpression.indexPropertyArgsParse(builder, parser);\n        exprStatement.done(PATH_INDEX_PROPERTY);\n        if (mLPAREN.equals(builder.getTokenType())) {\n          PrimaryExpression.methodCallArgsParse(builder, parser);\n        }\n        else if (mLCURLY.equals(builder.getTokenType())) {\n          PsiBuilder.Marker argsMarker = builder.mark();\n          argsMarker.done(ARGUMENTS);\n        }\n        while (mLCURLY.equals(builder.getTokenType())) {\n          OpenOrClosableBlock.parseClosableBlock(builder, parser);\n        }\n        exprStatement = exprStatement.precede();\n        exprStatement.done(PATH_METHOD_CALL);\n      }\n      else if (CommandArguments.parse(builder, parser)) {\n        exprStatement.done(CALL_EXPRESSION);\n      }\n      else {\n        exprStatement.drop();\n        break;\n      }\n\n      marker = exprStatement.precede();\n    }\n\n    return true;\n  }","commit_id":"88942c7e7477d1d873b7848351a71c3caf0b8cd3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static GroovyElementType pathElementParse(PsiBuilder builder, PsiBuilder.Marker marker, GroovyParser parser,\n                                                    GroovyElementType qualifierType) {\n\n    GroovyElementType res;\n\n    // Property reference\n    if (DOTS.contains(builder.getTokenType()) || ParserUtils.lookAhead(builder, mNLS, mDOT)) {\n      if (ParserUtils.lookAhead(builder, mNLS, mDOT)) {\n        ParserUtils.getToken(builder, mNLS);\n      }\n      ParserUtils.getToken(builder, DOTS);\n      ParserUtils.getToken(builder, mNLS);\n      TypeArguments.parse(builder);\n      if (kNEW.equals(builder.getTokenType())) {\n        res = PrimaryExpression.newExprParse(builder, parser, marker);\n      }\n      else if (kTHIS.equals(builder.getTokenType()) || kSUPER.equals(builder.getTokenType())) {\n        res = parseThisSuperExpression(builder, qualifierType);\n      }\n      else {\n        res = namePartParse(builder, parser);\n      }\n      if (!res.equals(WRONGWAY)) {\n        PsiBuilder.Marker newMarker = marker.precede();\n        marker.done(res);\n        if (mLCURLY.equals(builder.getTokenType())) {\n          PsiBuilder.Marker argsMarker = builder.mark();\n          argsMarker.done(ARGUMENTS);\n        }\n        pathElementParse(builder, newMarker, parser, res);\n      }\n      else {\n        builder.error(GroovyBundle.message(\"path.selector.expected\"));\n        marker.drop();\n      }\n    }\n    else if (mLPAREN.equals(builder.getTokenType())) {\n      PrimaryExpression.methodCallArgsParse(builder, parser);\n      if (mLCURLY.equals(builder.getTokenType()) || ParserUtils.lookAhead(builder, mNLS, mLCURLY)) {\n        ParserUtils.getToken(builder, mNLS);\n        pathElementParse(builder, marker, parser, qualifierType);\n      }\n      else {\n        PsiBuilder.Marker newMarker = marker.precede();\n        marker.done(PATH_METHOD_CALL);\n        pathElementParse(builder, newMarker, parser, qualifierType);\n      }\n    }\n    else if (mLCURLY.equals(builder.getTokenType())) {\n      appendedBlockParse(builder, parser);\n      if (mLCURLY.equals(builder.getTokenType())) {\n        pathElementParse(builder, marker, parser, qualifierType);\n      }\n      else {\n        PsiBuilder.Marker newMarker = marker.precede();\n        marker.done(PATH_METHOD_CALL);\n        pathElementParse(builder, newMarker, parser, PATH_METHOD_CALL);\n      }\n    }\n    else if (mLBRACK.equals(builder.getTokenType()) &&\n             !ParserUtils.lookAhead(builder, mLBRACK, mCOLON) &&\n             !ParserUtils.lookAhead(builder, mLBRACK, mNLS, mCOLON)) {\n      indexPropertyArgsParse(builder, parser);\n      PsiBuilder.Marker newMarker = marker.precede();\n      marker.done(PATH_INDEX_PROPERTY);\n      if (mLCURLY.equals(builder.getTokenType())) {\n        PsiBuilder.Marker argsMarker = builder.mark();\n        argsMarker.done(ARGUMENTS);\n      }\n      pathElementParse(builder, newMarker, parser, PATH_INDEX_PROPERTY);\n    }\n    else {\n      marker.drop();\n    }\n    return PATH_EXPRESSION;\n  }","id":96644,"modified_method":"private static Result pathElementParse(PsiBuilder builder,\n                                                    PsiBuilder.Marker marker,\n                                                    GroovyParser parser,\n                                                    GroovyElementType qualifierType,\n                                                    Result result) {\n\n    GroovyElementType res;\n\n    // Property reference\n    if (DOTS.contains(builder.getTokenType()) || ParserUtils.lookAhead(builder, mNLS, mDOT)) {\n      if (ParserUtils.lookAhead(builder, mNLS, mDOT)) {\n        ParserUtils.getToken(builder, mNLS);\n      }\n      ParserUtils.getToken(builder, DOTS);\n      ParserUtils.getToken(builder, mNLS);\n      TypeArguments.parse(builder);\n      if (kNEW.equals(builder.getTokenType())) {\n        res = PrimaryExpression.newExprParse(builder, parser, marker);\n      }\n      else if (kTHIS.equals(builder.getTokenType()) || kSUPER.equals(builder.getTokenType())) {\n        res = parseThisSuperExpression(builder, qualifierType);\n      }\n      else {\n        res = namePartParse(builder, parser);\n      }\n      if (!res.equals(WRONGWAY)) {\n        PsiBuilder.Marker newMarker = marker.precede();\n        marker.done(res);\n        if (mLCURLY.equals(builder.getTokenType())) {\n          PsiBuilder.Marker argsMarker = builder.mark();\n          argsMarker.done(ARGUMENTS);\n        }\n        result = pathElementParse(builder, newMarker, parser, res, OK);\n      }\n      else {\n        builder.error(GroovyBundle.message(\"path.selector.expected\"));\n        marker.drop();\n      }\n    }\n    else if (mLPAREN.equals(builder.getTokenType())) {\n      PrimaryExpression.methodCallArgsParse(builder, parser);\n      if (mLCURLY.equals(builder.getTokenType()) || ParserUtils.lookAhead(builder, mNLS, mLCURLY)) {\n        ParserUtils.getToken(builder, mNLS);\n        result = pathElementParse(builder, marker, parser, qualifierType, OK);\n      }\n      else {\n        PsiBuilder.Marker newMarker = marker.precede();\n        marker.done(PATH_METHOD_CALL);\n        result = pathElementParse(builder, newMarker, parser, qualifierType, OK);\n      }\n    }\n    else if (mLCURLY.equals(builder.getTokenType())) {\n      appendedBlockParse(builder, parser);\n      if (mLCURLY.equals(builder.getTokenType())) {\n        result = pathElementParse(builder, marker, parser, qualifierType, result);\n      }\n      else {\n        PsiBuilder.Marker newMarker = marker.precede();\n        marker.done(PATH_METHOD_CALL);\n        result = pathElementParse(builder, newMarker, parser, PATH_METHOD_CALL, result);\n      }\n    }\n    else if (checkForArrayAccess(builder)) {\n      indexPropertyArgsParse(builder, parser);\n      PsiBuilder.Marker newMarker = marker.precede();\n      marker.done(PATH_INDEX_PROPERTY);\n      final boolean lCurly = mLCURLY.equals(builder.getTokenType());\n      if (lCurly) {\n        PsiBuilder.Marker argsMarker = builder.mark();\n        argsMarker.done(ARGUMENTS);\n      }\n      result = pathElementParse(builder, newMarker, parser, PATH_INDEX_PROPERTY, lCurly?CALL_WITH_CLOSURE : OK);\n    }\n    else {\n      marker.drop();\n    }\n    return result;\n  }","commit_id":"88942c7e7477d1d873b7848351a71c3caf0b8cd3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean parse(PsiBuilder builder, GroovyParser parser) {\n\n    PsiBuilder.Marker marker = builder.mark();\n    final GroovyElementType qualifierType = PrimaryExpression.parse(builder, parser);\n    if (qualifierType != WRONGWAY) {\n      if (isPathElementStart(builder)) {\n        PsiBuilder.Marker newMarker = marker.precede();\n        marker.drop();\n        if (mLCURLY.equals(builder.getTokenType())) {\n          PsiBuilder.Marker argsMarker = builder.mark();\n          argsMarker.done(ARGUMENTS);\n        }\n        pathElementParse(builder, newMarker, parser, qualifierType);\n      }\n      else {\n        marker.drop();\n      }\n      return true;\n    }\n    else {\n      marker.drop();\n      return false;\n    }\n  }","id":96645,"modified_method":"public static boolean parse(PsiBuilder builder, GroovyParser parser) {\n    return parseForExprStatement(builder, parser) != PathExpression.Result.WRONG_WAY;\n  }","commit_id":"88942c7e7477d1d873b7848351a71c3caf0b8cd3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * Method call parsing\n   *\n   * @param builder\n   * @return\n   */\n  private static GroovyElementType indexPropertyArgsParse(PsiBuilder builder, GroovyParser parser) {\n    assert mLBRACK.equals(builder.getTokenType());\n\n    PsiBuilder.Marker marker = builder.mark();\n    ParserUtils.getToken(builder, mLBRACK);\n    ParserUtils.getToken(builder, mNLS);\n    ArgumentList.parseArgumentList(builder, mRBRACK, parser);\n    ParserUtils.getToken(builder, mNLS);\n    ParserUtils.getToken(builder, mRBRACK, GroovyBundle.message(\"rbrack.expected\"));\n    marker.done(ARGUMENTS);\n    return PATH_INDEX_PROPERTY;\n  }","id":96646,"modified_method":"/**\n   * Method call parsing\n   *\n   * @param builder\n   * @return\n   */\n  public static GroovyElementType indexPropertyArgsParse(PsiBuilder builder, GroovyParser parser) {\n    assert mLBRACK.equals(builder.getTokenType());\n\n    PsiBuilder.Marker marker = builder.mark();\n    ParserUtils.getToken(builder, mLBRACK);\n    ParserUtils.getToken(builder, mNLS);\n    ArgumentList.parseArgumentList(builder, mRBRACK, parser);\n    ParserUtils.getToken(builder, mNLS);\n    ParserUtils.getToken(builder, mRBRACK, GroovyBundle.message(\"rbrack.expected\"));\n    marker.done(ARGUMENTS);\n    return PATH_INDEX_PROPERTY;\n  }","commit_id":"88942c7e7477d1d873b7848351a71c3caf0b8cd3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static boolean parse(PsiBuilder builder, GroovyParser parser) {\n    PsiBuilder.Marker marker = builder.mark();\n    if (builder.getTokenType() == mLPAREN) {\n      final ReferenceElement.ReferenceElementResult result = parseTypeCast(builder);\n      if (result != fail) {\n        if (UnaryExpression.parse(builder, parser) || result == ReferenceElement.ReferenceElementResult.mustBeType) {\n          marker.done(CAST_EXPRESSION);\n          return true;\n        } else {\n          marker.rollbackTo();\n          return PostfixExpression.parse(builder, parser);\n        }\n      } else {\n        marker.drop();\n        return PostfixExpression.parse(builder, parser);\n      }\n    } else {\n      marker.drop();\n      return PostfixExpression.parse(builder, parser);\n    }\n  }","id":96647,"modified_method":"public static boolean parse(PsiBuilder builder, GroovyParser parser) {\n    return parse(builder, parser, true);\n  }","commit_id":"88942c7e7477d1d873b7848351a71c3caf0b8cd3","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public File copy(final VirtualFile file, final VirtualFile toDir, final String copyName) throws IOException {\n    SvnVcs vcs = getVCS(toDir);\n    if (vcs == null) {\n      vcs = getVCS(file);\n    }\n    if (vcs == null) {\n      return null;\n    }\n\n    File srcFile = new File(file.getPath());\n    File destFile = new File(new File(toDir.getPath()), copyName);\n    final boolean dstDirUnderControl = SVNWCUtil.isVersionedDirectory(destFile.getParentFile());\n    if (! dstDirUnderControl && !isPendingAdd(toDir)) {\n      return null;\n    }\n\n    if (!SVNWCUtil.isVersionedDirectory(srcFile.getParentFile())) {\n      myAddedFiles.add(new AddedFileInfo(vcs.getProject(), toDir, copyName, null, false));\n      return null;\n    }\n\n    final SVNStatus fileStatus = getFileStatus(vcs, srcFile);\n    if (fileStatus != null && fileStatus.getContentsStatus() == SVNStatusType.STATUS_ADDED) {\n      myAddedFiles.add(new AddedFileInfo(vcs.getProject(), toDir, copyName, null, false));\n      return null;\n    }\n\n    if (sameRoot(vcs, file.getParent(), toDir)) {\n      myAddedFiles.add(new AddedFileInfo(vcs.getProject(), toDir, copyName, srcFile, false));\n      return null;\n    }\n\n    myAddedFiles.add(new AddedFileInfo(vcs.getProject(), toDir, copyName, null, false));\n    return null;\n  }","id":96648,"modified_method":"@Nullable\n  public File copy(final VirtualFile file, final VirtualFile toDir, final String copyName) throws IOException {\n    SvnVcs vcs = getVCS(toDir);\n    if (vcs == null) {\n      vcs = getVCS(file);\n    }\n    if (vcs == null) {\n      return null;\n    }\n\n    File srcFile = new File(file.getPath());\n    File destFile = new File(new File(toDir.getPath()), copyName);\n    final boolean dstDirUnderControl = SVNWCUtil.isVersionedDirectory(destFile.getParentFile());\n    if (! dstDirUnderControl && !isPendingAdd(vcs.getProject(), toDir)) {\n      return null;\n    }\n\n    if (!SVNWCUtil.isVersionedDirectory(srcFile.getParentFile())) {\n      myAddedFiles.putValue(vcs.getProject(), new AddedFileInfo(toDir, copyName, null, false));\n      return null;\n    }\n\n    final SVNStatus fileStatus = getFileStatus(vcs, srcFile);\n    if (fileStatus != null && fileStatus.getContentsStatus() == SVNStatusType.STATUS_ADDED) {\n      myAddedFiles.putValue(vcs.getProject(), new AddedFileInfo(toDir, copyName, null, false));\n      return null;\n    }\n\n    if (sameRoot(vcs, file.getParent(), toDir)) {\n      myAddedFiles.putValue(vcs.getProject(), new AddedFileInfo(toDir, copyName, srcFile, false));\n      return null;\n    }\n\n    myAddedFiles.putValue(vcs.getProject(), new AddedFileInfo(toDir, copyName, null, false));\n    return null;\n  }","commit_id":"770acf28f735d17b0e6831093ad302735fb9e9d5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * add file or directory:\n   * <p/>\n   * parent directory is:\n   * unversioned: do nothing, return false\n   * versioned:\n   * entry is:\n   * null: create entry, schedule for addition\n   * missing: do nothing, return false\n   * deleted, 'do' mode: try to create entry and it schedule for addition if kind is the same, otherwise do nothing, return false.\n   * deleted: 'undo' mode: try to revert non-recursively, if kind is the same, otherwise do nothing, return false.\n   * anything else: return false.\n   */\n  private boolean createItem(VirtualFile dir, String name, boolean directory, final boolean recursive) {\n    SvnVcs vcs = getVCS(dir);\n    if (vcs == null) {\n      return false;\n    }\n    if (isUndo(vcs) && SvnUtil.isAdminDirectory(dir, name)) {\n      return false;      \n    }\n    File ioDir = getIOFile(dir);\n    boolean pendingAdd = isPendingAdd(dir);\n    if (!SVNWCUtil.isVersionedDirectory(ioDir) && !pendingAdd) {\n      return false;\n    }\n    SVNWCClient wcClient = vcs.createWCClient();\n    File targetFile = new File(ioDir, name);\n    SVNStatus status = getFileStatus(vcs, targetFile);\n\n    if (status == null || status.getContentsStatus() == SVNStatusType.STATUS_NONE) {\n      myAddedFiles.add(new AddedFileInfo(vcs.getProject(), dir, name, null, recursive));\n      return false;\n    }\n    else if (status.getContentsStatus() == SVNStatusType.STATUS_MISSING) {\n      return false;\n    }\n    else if (status.getContentsStatus() == SVNStatusType.STATUS_DELETED) {\n      SVNNodeKind kind = status.getKind();\n      // kind differs.\n      if (directory && kind != SVNNodeKind.DIR || !directory && kind != SVNNodeKind.FILE) {\n        return false;\n      }\n      try {\n        if (isUndo(vcs)) {\n          wcClient.doRevert(targetFile, false);\n          return true;\n        }\n        myAddedFiles.add(new AddedFileInfo(vcs.getProject(), dir, name, null, recursive));\n        return false;\n      }\n      catch (SVNException e) {\n        SVNFileUtil.deleteAll(targetFile, true);\n        return false;\n      }\n    }\n    return false;\n  }","id":96649,"modified_method":"/**\n   * add file or directory:\n   * <p/>\n   * parent directory is:\n   * unversioned: do nothing, return false\n   * versioned:\n   * entry is:\n   * null: create entry, schedule for addition\n   * missing: do nothing, return false\n   * deleted, 'do' mode: try to create entry and it schedule for addition if kind is the same, otherwise do nothing, return false.\n   * deleted: 'undo' mode: try to revert non-recursively, if kind is the same, otherwise do nothing, return false.\n   * anything else: return false.\n   */\n  private boolean createItem(VirtualFile dir, String name, boolean directory, final boolean recursive) {\n    SvnVcs vcs = getVCS(dir);\n    if (vcs == null) {\n      return false;\n    }\n    if (isUndo(vcs) && SvnUtil.isAdminDirectory(dir, name)) {\n      return false;      \n    }\n    File ioDir = getIOFile(dir);\n    boolean pendingAdd = isPendingAdd(vcs.getProject(), dir);\n    if (!SVNWCUtil.isVersionedDirectory(ioDir) && !pendingAdd) {\n      return false;\n    }\n    SVNWCClient wcClient = vcs.createWCClient();\n    File targetFile = new File(ioDir, name);\n    SVNStatus status = getFileStatus(vcs, targetFile);\n\n    if (status == null || status.getContentsStatus() == SVNStatusType.STATUS_NONE) {\n      myAddedFiles.putValue(vcs.getProject(), new AddedFileInfo(dir, name, null, recursive));\n      return false;\n    }\n    else if (status.getContentsStatus() == SVNStatusType.STATUS_MISSING) {\n      return false;\n    }\n    else if (status.getContentsStatus() == SVNStatusType.STATUS_DELETED) {\n      SVNNodeKind kind = status.getKind();\n      // kind differs.\n      if (directory && kind != SVNNodeKind.DIR || !directory && kind != SVNNodeKind.FILE) {\n        return false;\n      }\n      try {\n        if (isUndo(vcs)) {\n          wcClient.doRevert(targetFile, false);\n          return true;\n        }\n        myAddedFiles.putValue(vcs.getProject(), new AddedFileInfo(dir, name, null, recursive));\n        return false;\n      }\n      catch (SVNException e) {\n        SVNFileUtil.deleteAll(targetFile, true);\n        return false;\n      }\n    }\n    return false;\n  }","commit_id":"770acf28f735d17b0e6831093ad302735fb9e9d5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean move(VirtualFile file, VirtualFile toDir) throws IOException {\n    File srcFile = getIOFile(file);\n    File dstFile = new File(getIOFile(toDir), file.getName());\n\n    final SvnVcs vcs = getVCS(toDir);\n    final SvnVcs sourceVcs = getVCS(file);\n    if (vcs == null && sourceVcs == null) return false;\n\n    if (vcs == null) {\n      return false;\n    }\n    if (sourceVcs == null) {\n      return createItem(toDir, file.getName(), file.isDirectory(), true);\n    }\n\n    if (isPendingAdd(toDir)) {\n      myMovedFiles.add(new MovedFileInfo(sourceVcs.getProject(), srcFile, dstFile));\n      return true; \n    }\n    else {\n      final VirtualFile oldParent = file.getParent();\n      myFilesToRefresh.add(oldParent);\n      myFilesToRefresh.add(toDir);\n      return doMove(sourceVcs, srcFile, dstFile);\n    }\n  }","id":96650,"modified_method":"public boolean move(VirtualFile file, VirtualFile toDir) throws IOException {\n    File srcFile = getIOFile(file);\n    File dstFile = new File(getIOFile(toDir), file.getName());\n\n    final SvnVcs vcs = getVCS(toDir);\n    final SvnVcs sourceVcs = getVCS(file);\n    if (vcs == null && sourceVcs == null) return false;\n\n    if (vcs == null) {\n      return false;\n    }\n    if (sourceVcs == null) {\n      return createItem(toDir, file.getName(), file.isDirectory(), true);\n    }\n\n    if (isPendingAdd(vcs.getProject(), toDir)) {\n      myMovedFiles.add(new MovedFileInfo(sourceVcs.getProject(), srcFile, dstFile));\n      return true; \n    }\n    else {\n      final VirtualFile oldParent = file.getParent();\n      myFilesToRefresh.add(oldParent);\n      myFilesToRefresh.add(toDir);\n      return doMove(sourceVcs, srcFile, dstFile);\n    }\n  }","commit_id":"770acf28f735d17b0e6831093ad302735fb9e9d5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean isPendingAdd(final VirtualFile dir) {\n    for(AddedFileInfo i: myAddedFiles) {\n      if (i.myDir == dir.getParent() && i.myName.equals(dir.getName())) {\n        return true;\n      }\n    }\n    return false;\n  }","id":96651,"modified_method":"private boolean isPendingAdd(final Project project, final VirtualFile dir) {\n    final Collection<AddedFileInfo> addedFileInfos = myAddedFiles.get(project);\n    for(AddedFileInfo i: addedFileInfos) {\n      if (i.myDir == dir.getParent() && i.myName.equals(dir.getName())) {\n        return true;\n      }\n    }\n    return false;\n  }","commit_id":"770acf28f735d17b0e6831093ad302735fb9e9d5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n     * passed dir must be under VC control (it is assumed)\n     */\n    @Nullable\n    public String getRepositoryUUID(final VirtualFile dir) {\n      try {\n        final SVNInfo info1 = myWcClient.doInfo(new File(dir.getPath()), SVNRevision.WORKING);\n        if (info1 == null || info1.getRepositoryUUID() == null) {\n          // go deeper if current parent was added (if parent was added, it theoretically could NOT know its repo UUID)\n          final VirtualFile parent = dir.getParent();\n          if (parent == null) {\n            return null;\n          }\n          if (isPendingAdd(parent)) {\n            return getRepositoryUUID(parent);\n          }\n        } else {\n          return info1.getRepositoryUUID();\n        }\n      } catch (SVNException e) {\n        // go to return default\n      }\n      return null;\n    }","id":96652,"modified_method":"/**\n     * passed dir must be under VC control (it is assumed)\n     */\n    @Nullable\n    public String getRepositoryUUID(final Project project, final VirtualFile dir) {\n      try {\n        final SVNInfo info1 = myWcClient.doInfo(new File(dir.getPath()), SVNRevision.WORKING);\n        if (info1 == null || info1.getRepositoryUUID() == null) {\n          // go deeper if current parent was added (if parent was added, it theoretically could NOT know its repo UUID)\n          final VirtualFile parent = dir.getParent();\n          if (parent == null) {\n            return null;\n          }\n          if (isPendingAdd(project, parent)) {\n            return getRepositoryUUID(project, parent);\n          }\n        } else {\n          return info1.getRepositoryUUID();\n        }\n      } catch (SVNException e) {\n        // go to return default\n      }\n      return null;\n    }","commit_id":"770acf28f735d17b0e6831093ad302735fb9e9d5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private boolean sameRoot(final SvnVcs vcs, final VirtualFile srcDir, final VirtualFile dstDir) {\n    final UUIDHelper helper = new UUIDHelper(vcs);\n    final String srcUUID = helper.getRepositoryUUID(srcDir);\n    final String dstUUID = helper.getRepositoryUUID(dstDir);\n\n    return srcUUID != null && dstUUID != null && srcUUID.equals(dstUUID);\n  }","id":96653,"modified_method":"private boolean sameRoot(final SvnVcs vcs, final VirtualFile srcDir, final VirtualFile dstDir) {\n    final UUIDHelper helper = new UUIDHelper(vcs);\n    final String srcUUID = helper.getRepositoryUUID(vcs.getProject(), srcDir);\n    final String dstUUID = helper.getRepositoryUUID(vcs.getProject(), dstDir);\n\n    return srcUUID != null && dstUUID != null && srcUUID.equals(dstUUID);\n  }","commit_id":"770acf28f735d17b0e6831093ad302735fb9e9d5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void fillDeletedFiles(Project project, List<FilePath> deletedFiles) {\n    for (Iterator<DeletedFileInfo> it = myDeletedFiles.iterator(); it.hasNext();) {\n      DeletedFileInfo deletedFileInfo = it.next();\n      if (deletedFileInfo.myProject == project) {\n        it.remove();\n        final FilePath filePath = VcsContextFactory.SERVICE.getInstance().createFilePathOn(deletedFileInfo.myFile);\n        deletedFiles.add(filePath);\n      }\n    }\n  }","id":96654,"modified_method":"private void fillDeletedFiles(Project project, List<FilePath> deletedFiles) {\n    final Collection<File> files = myDeletedFiles.remove(project);\n    for (File file : files) {\n      final FilePath filePath = VcsContextFactory.SERVICE.getInstance().createFilePathOn(file);\n      deletedFiles.add(filePath);\n    }\n  }","commit_id":"770acf28f735d17b0e6831093ad302735fb9e9d5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void fillAddedFiles(Project project,\n                              SvnVcs vcs,\n                              List<VirtualFile> addedVFiles,\n                              Map<VirtualFile, File> copyFromMap,\n                              Set<VirtualFile> recursiveItems) {\n    for (Iterator<AddedFileInfo> it = myAddedFiles.iterator(); it.hasNext();) {\n      AddedFileInfo addedFileInfo = it.next();\n      if (addedFileInfo.myProject == project) {\n        it.remove();\n        final File ioFile = new File(getIOFile(addedFileInfo.myDir), addedFileInfo.myName);\n        VirtualFile addedFile = addedFileInfo.myDir.findChild(addedFileInfo.myName);\n        if (addedFile == null) {\n          addedFile = myLfs.refreshAndFindFileByIoFile(ioFile);\n        }\n        if (addedFile != null) {\n          final SVNStatus fileStatus = getFileStatus(vcs, ioFile);\n          if (fileStatus == null || fileStatus.getContentsStatus() != SVNStatusType.STATUS_IGNORED) {\n            boolean isIgnored = ChangeListManager.getInstance(addedFileInfo.myProject).isIgnoredFile(addedFile);\n            if (!isIgnored) {\n              addedVFiles.add(addedFile);\n              copyFromMap.put(addedFile, addedFileInfo.myCopyFrom);\n              if (addedFileInfo.myRecursive) {\n                recursiveItems.add(addedFile);\n              }\n            }\n          }\n        }\n      }\n    }\n  }","id":96655,"modified_method":"private void fillAddedFiles(Project project,\n                              SvnVcs vcs,\n                              List<VirtualFile> addedVFiles,\n                              Map<VirtualFile, File> copyFromMap,\n                              Set<VirtualFile> recursiveItems) {\n    final Collection<AddedFileInfo> addedFileInfos = myAddedFiles.remove(project);\n    final ChangeListManager changeListManager = ChangeListManager.getInstance(project);\n\n    for (AddedFileInfo addedFileInfo : addedFileInfos) {\n      final File ioFile = new File(getIOFile(addedFileInfo.myDir), addedFileInfo.myName);\n      VirtualFile addedFile = addedFileInfo.myDir.findChild(addedFileInfo.myName);\n      if (addedFile == null) {\n        addedFile = myLfs.refreshAndFindFileByIoFile(ioFile);\n      }\n      if (addedFile != null) {\n        final SVNStatus fileStatus = getFileStatus(vcs, ioFile);\n        if (fileStatus == null || fileStatus.getContentsStatus() != SVNStatusType.STATUS_IGNORED) {\n          boolean isIgnored = changeListManager.isIgnoredFile(addedFile);\n          if (!isIgnored) {\n            addedVFiles.add(addedFile);\n            copyFromMap.put(addedFile, addedFileInfo.myCopyFrom);\n            if (addedFileInfo.myRecursive) {\n              recursiveItems.add(addedFile);\n            }\n          }\n        }\n      }\n    }\n  }","commit_id":"770acf28f735d17b0e6831093ad302735fb9e9d5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public AddedFileInfo(final Project project, final VirtualFile dir, final String name, @Nullable final File copyFrom, boolean recursive) {\n      myProject = project;\n      myDir = dir;\n      myName = name;\n      myCopyFrom = copyFrom;\n      myRecursive = recursive;\n    }","id":96656,"modified_method":"public AddedFileInfo(final VirtualFile dir, final String name, @Nullable final File copyFrom, boolean recursive) {\n      myDir = dir;\n      myName = name;\n      myCopyFrom = copyFrom;\n      myRecursive = recursive;\n    }","commit_id":"770acf28f735d17b0e6831093ad302735fb9e9d5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"void commandFinished(final Project project) {\n    if (!myAddedFiles.isEmpty()) {\n      processAddedFiles(project);\n    }\n    processMovedFiles(project);\n    if (!myDeletedFiles.isEmpty()) {\n      processDeletedFiles(project);\n    }\n\n    final List<VcsException> exceptionList = myMoveExceptions.get(project);\n    if (exceptionList != null && ! exceptionList.isEmpty()) {\n      AbstractVcsHelper.getInstance(project).showErrors(exceptionList, SvnBundle.message(\"move.files.errors.title\"));\n    }\n\n    if (!myFilesToRefresh.isEmpty()) {\n      refreshFiles(project);\n    }\n  }","id":96657,"modified_method":"void commandFinished(final Project project) {\n    checkOverwrites(project);\n    if (myAddedFiles.containsKey(project)) {\n      processAddedFiles(project);\n    }\n    processMovedFiles(project);\n    if (myDeletedFiles.containsKey(project)) {\n      processDeletedFiles(project);\n    }\n\n    final List<VcsException> exceptionList = myMoveExceptions.get(project);\n    if (exceptionList != null && ! exceptionList.isEmpty()) {\n      AbstractVcsHelper.getInstance(project).showErrors(exceptionList, SvnBundle.message(\"move.files.errors.title\"));\n    }\n\n    if (!myFilesToRefresh.isEmpty()) {\n      refreshFiles(project);\n    }\n  }","commit_id":"770acf28f735d17b0e6831093ad302735fb9e9d5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"/**\n   * delete file or directory (both 'undo' and 'do' modes)\n   * unversioned: do nothing, return false\n   * obstructed: do nothing, return false\n   * external or wc root: do nothing, return false\n   * missing: do nothing, return false\n   * <p/>\n   * versioned: schedule for deletion, return true\n   * added: schedule for deletion (make unversioned), return true\n   * copied, but not scheduled: schedule for deletion, return true\n   * replaced: schedule for deletion, return true\n   * <p/>\n   * deleted: do nothing, return true (strange)\n   */\n  public boolean delete(VirtualFile file) throws IOException {\n    SvnVcs vcs = getVCS(file);\n    if (vcs != null && SvnUtil.isAdminDirectory(file)) {\n      return true;\n    }\n    File ioFile = getIOFile(file);\n    if (!SVNWCUtil.isVersionedDirectory(ioFile.getParentFile())) {\n      return false;\n    }\n    try {\n      if (SVNWCUtil.isWorkingCopyRoot(ioFile)) {\n        return false;\n      }\n    } catch (SVNException e) {\n        //\n    }\n\n    SVNStatus status = getFileStatus(ioFile);\n\n    if (status == null ||\n        status.getContentsStatus() == SVNStatusType.STATUS_UNVERSIONED ||\n        status.getContentsStatus() == SVNStatusType.STATUS_OBSTRUCTED ||\n        status.getContentsStatus() == SVNStatusType.STATUS_MISSING ||\n        status.getContentsStatus() == SVNStatusType.STATUS_EXTERNAL ||\n        status.getContentsStatus() == SVNStatusType.STATUS_IGNORED) {\n      return false;\n    } else if (status.getContentsStatus() == SVNStatusType.STATUS_DELETED) {\n      if (isUndo(vcs)) {\n        moveToUndoStorage(file);\n      }\n      return true;\n    }\n    else {\n      if (vcs != null) {\n        if (status.getContentsStatus() == SVNStatusType.STATUS_ADDED) {\n          try {\n            final SVNWCClient wcClient = vcs.createWCClient();\n            wcClient.doRevert(ioFile, false);\n          }\n          catch (SVNException e) {\n            // ignore\n          }\n        }\n        else {\n          myDeletedFiles.add(new DeletedFileInfo(vcs.getProject(), ioFile));\n          // packages deleted from disk should not be deleted from svn (IDEADEV-16066)\n          if (file.isDirectory() || isUndo(vcs)) return true;\n        }\n      }\n      return false;\n    }\n  }","id":96658,"modified_method":"/**\n   * delete file or directory (both 'undo' and 'do' modes)\n   * unversioned: do nothing, return false\n   * obstructed: do nothing, return false\n   * external or wc root: do nothing, return false\n   * missing: do nothing, return false\n   * <p/>\n   * versioned: schedule for deletion, return true\n   * added: schedule for deletion (make unversioned), return true\n   * copied, but not scheduled: schedule for deletion, return true\n   * replaced: schedule for deletion, return true\n   * <p/>\n   * deleted: do nothing, return true (strange)\n   */\n  public boolean delete(VirtualFile file) throws IOException {\n    SvnVcs vcs = getVCS(file);\n    if (vcs != null && SvnUtil.isAdminDirectory(file)) {\n      return true;\n    }\n    File ioFile = getIOFile(file);\n    if (!SVNWCUtil.isVersionedDirectory(ioFile.getParentFile())) {\n      return false;\n    }\n    try {\n      if (SVNWCUtil.isWorkingCopyRoot(ioFile)) {\n        return false;\n      }\n    } catch (SVNException e) {\n        //\n    }\n\n    SVNStatus status = getFileStatus(ioFile);\n\n    if (status == null ||\n        status.getContentsStatus() == SVNStatusType.STATUS_UNVERSIONED ||\n        status.getContentsStatus() == SVNStatusType.STATUS_OBSTRUCTED ||\n        status.getContentsStatus() == SVNStatusType.STATUS_MISSING ||\n        status.getContentsStatus() == SVNStatusType.STATUS_EXTERNAL ||\n        status.getContentsStatus() == SVNStatusType.STATUS_IGNORED) {\n      return false;\n    } else if (status.getContentsStatus() == SVNStatusType.STATUS_DELETED) {\n      if (isUndo(vcs)) {\n        moveToUndoStorage(file);\n      }\n      return true;\n    }\n    else {\n      if (vcs != null) {\n        if (status.getContentsStatus() == SVNStatusType.STATUS_ADDED) {\n          try {\n            final SVNWCClient wcClient = vcs.createWCClient();\n            wcClient.doRevert(ioFile, false);\n          }\n          catch (SVNException e) {\n            // ignore\n          }\n        }\n        else {\n          myDeletedFiles.putValue(vcs.getProject(), ioFile);\n          // packages deleted from disk should not be deleted from svn (IDEADEV-16066)\n          if (file.isDirectory() || isUndo(vcs)) return true;\n        }\n      }\n      return false;\n    }\n  }","commit_id":"770acf28f735d17b0e6831093ad302735fb9e9d5","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void main(String[] a)\n\t{\n\t    ArrayList args = new ArrayList();\n\t    for (int i=0;i<a.length;i++) \n\t    {\n\t        if (a[i].length()>0) args.add(a[i]);\n\t    }\n\n\t\tRepositoryMeta repinfo  = null;\n\t\tUserInfo       userinfo = null;\n\t\tJob            job      = null;\n\n\t\tif (args.size()==0 ) \n\t\t{\n\t\t    System.out.println(\"Options:\");\n\t\t    System.out.println(\"  -rep      : Repository name\");\n\t\t    System.out.println(\"  -user     : Repository username\");\n\t\t    System.out.println(\"  -pass     : Repository password\");\n\t\t    System.out.println(\"  -job      : The name of the job to launch\");\n\t\t    System.out.println(\"  -dir      : The directory (don't forget the leading / or \\\\)\");\n\t\t    System.out.println(\"  -file     : The filename (Job XML) to launch\");\n\t\t    System.out.println(\"  -level    : The logging level\t(Basic, Detailed, Debug, Rowlevel, Error, Nothing)\");\n\t\t    System.out.println(\"  -log      : The logging file to write to\");\n\t\t    System.out.println(\"  -listdir  : List the directories in the repository\");\n\t\t    System.out.println(\"  -listjobs : List the jobs in the specified directory\");\n\t\t    System.out.println(\"  -listrep  : List the defined repositories\");\n\t\t    System.out.println(\"\");\n\t\t    \n\t\t    return;\n\t\t}\n\n\t\tString repname   = Const.getCommandlineOption(args, \"-rep\");\n\t\tString username  = Const.getCommandlineOption(args, \"-user\");\n\t\tString password  = Const.getCommandlineOption(args, \"-pass\");\n\t\tString jobname   = Const.getCommandlineOption(args, \"-job\");\n\t\tString dirname   = Const.getCommandlineOption(args, \"-dir\");\n\t\tString filename  = Const.getCommandlineOption(args, \"-file\");\n\t\tString loglevel  = Const.getCommandlineOption(args, \"-level\");\n\t\tString logfile   = Const.getCommandlineOption(args, \"-log\");\n\t\tString listdir   = Const.getCommandlineOption(args, \"-listdir\");\n\t\tString listjobs  = Const.getCommandlineOption(args, \"-listjobs\");\n\t\tString listrep   = Const.getCommandlineOption(args, \"-listrep\");\n\n        repname  = Const.getEnvironmentVariable(\"KETTLE_REPOSITORY\", repname);\n        username = Const.getEnvironmentVariable(\"KETTLE_USER\",       username);\n        password = Const.getEnvironmentVariable(\"KETTLE_PASSWORD\",   password);\n        \n\t\t// System.out.println(\"Level=\"+loglevel);\n        LogWriter log;\n        if (logfile==null)\n        {\n            log=LogWriter.getInstance( LogWriter.LOG_LEVEL_BASIC );\n        }\n        else\n        {\n            log=LogWriter.getInstance( logfile, true, LogWriter.LOG_LEVEL_BASIC );\n        }\n        \n        if (loglevel!=null) \n        {\n            log.setLogLevel(loglevel);\n            log.logBasic(STRING_KITCHEN, \"Logging is at level : \"+log.getLogLevelDesc());\n        } \n\t\t\n        if (repname!=null && username!=null) log.logDetailed(STRING_KITCHEN, \"Repository and username supplied\");\n\n\t\tlog.logBasic(STRING_KITCHEN, \"Start of run.\");\n\t\t\n\t\t/* Load the plugins etc.*/\n\t\tStepLoader steploader = StepLoader.getInstance();\n\t\tif (!steploader.read())\n\t\t{\n\t\t\tlog.logError(\"Spoon\", \"Error loading steps... halting Kitchen!\");\n\t\t\treturn;\n\t\t}\n\n\t\tDate start, stop;\n\t\tCalendar cal;\n\t\tSimpleDateFormat df = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss.SSS\");\n\t\tcal=Calendar.getInstance();\n\t\tstart=cal.getTime();\n\t\t\t\t\n\t\tlog.logDebug(STRING_KITCHEN, \"Allocate new job.\");\n\t\tJobMeta jobinfo = new JobMeta(log);\n        \n        \n        // In case we use a repository...\n        Repository repository = null;\n\n\t\ttry\n\t\t{\n\t\t\t// Read kettle job specified on command-line?\n\t\t\tif (repname!=null || filename!=null)\n\t\t\t{\n\t\t\t\tlog.logDebug(STRING_KITCHEN, \"Parsing command line options.\");\n\t\t\t\tif (repname!=null)\n\t\t\t\t{\n\t\t\t\t\tlog.logDebug(STRING_KITCHEN, \"Loading available repositories.\");\n\t\t\t\t\tRepositoriesMeta repsinfo = new RepositoriesMeta(log);\n\t\t\t\t\tif (repsinfo.readData())\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.logDebug(STRING_KITCHEN, \"Finding repository [\"+repname+\"]\");\n\t\t\t\t\t\trepinfo = repsinfo.findRepository(repname);\n\t\t\t\t\t\tif (repinfo!=null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Define and connect to the repository...\n\t\t\t\t\t\t\tlog.logDebug(STRING_KITCHEN, \"Allocate & connect to repository.\");\n\t\t\t\t\t\t\trepository = new Repository(log, repinfo, userinfo);\n\t\t\t\t\t\t\tif (repository.connect(\"Kitchen commandline\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tRepositoryDirectory directory = repository.getDirectoryTree(); // Default = root\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// Find the directory name if one is specified...\n\t\t\t\t\t\t\t\tif (dirname!=null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdirectory = repository.getDirectoryTree().findDirectory(dirname);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (directory!=null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Check username, password\n\t\t\t\t\t\t\t\t\tlog.logDebug(STRING_KITCHEN, \"Check supplied username and password.\");\n\t\t\t\t\t\t\t\t\tuserinfo = new UserInfo(repository, username, password);\n\t\t\t\t\t\t\t\t\tif (userinfo.getID()>0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t    // Load a job\n\t\t\t\t\t\t\t\t\t\tif (jobname!=null && jobname.length()>0)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlog.logDebug(STRING_KITCHEN, \"Load the job info...\");\n\t\t\t\t\t\t\t\t\t\t\tjobinfo =  new JobMeta(log, repository, jobname, directory);\n\t\t\t\t\t\t\t\t\t\t\tlog.logDebug(STRING_KITCHEN, \"Allocate job...\");\n\t\t\t\t\t\t\t\t\t\t\tjob = new Job(log, steploader, repository, jobinfo);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t// List the jobs in the repository\n\t\t\t\t\t\t\t\t\t\tif (\"Y\".equalsIgnoreCase(listjobs))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t    log.logDebug(STRING_KITCHEN, \"Getting list of jobs in directory: \"+directory);\n\t\t\t\t\t\t\t\t\t\t\tString jobnames[] = repository.getJobNames(directory.getID());\n\t\t\t\t\t\t\t\t\t\t\tfor (int i=0;i<jobnames.length;i++)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(jobnames[i]);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t// List the directories in the repository\n\t\t\t\t\t\t\t\t\t\tif (\"Y\".equalsIgnoreCase(listdir))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tString dirnames[] = repository.getDirectoryNames(directory.getID());\n\t\t\t\t\t\t\t\t\t\t\tfor (int i=0;i<dirnames.length;i++)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(dirnames[i]);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"ERROR: Can't verify username and password.\");\n\t\t\t\t\t\t\t\t\t\tuserinfo=null;\n\t\t\t\t\t\t\t\t\t\trepinfo=null;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"ERROR: Can't find the supplied directory [\"+dirname+\"]\");\n\t\t\t\t\t\t\t\t\tuserinfo=null;\n\t\t\t\t\t\t\t\t\trepinfo=null;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSystem.out.println(\"ERROR: Can't connect to the repository.\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSystem.out.println(\"ERROR: No repository provided, can't load job.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"ERROR: No repositories defined on this system.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\tif (filename!=null)\n\t\t\t\t{\n\t\t\t\t\tjobinfo = new JobMeta(log, filename);\n\t\t\t\t\tjob = new Job(log, steploader, null, jobinfo);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\tif (\"Y\".equalsIgnoreCase(listrep))\n\t\t\t{\n\t\t\t\tRepositoriesMeta ri = new RepositoriesMeta(log);\n\t\t\t\tif (ri.readData())\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"List of repositories:\");\n\t\t\t\t\tfor (int i=0;i<ri.nrRepositories();i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tRepositoryMeta rinfo = ri.getRepository(i);\n\t\t\t\t\t\tSystem.out.println(\"#\"+(i+1)+\" : \"+rinfo.getName()+\" [\"+rinfo.getDescription()+\"] \");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"ERROR: Unable to read/parse the repositories XML file.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch(KettleException e)\n\t\t{\n\t\t\tjob=null;\n\t\t\tjobinfo=null;\n\t\t\tSystem.out.println(\"Processing stopped because of an error: \"+e.getMessage());\n\t\t}\n\n\t\tif (job==null)\n\t\t{\n\t\t\tif (!\"Y\".equalsIgnoreCase(listjobs) &&  !\"Y\".equalsIgnoreCase(listdir) && !\"Y\".equalsIgnoreCase(listrep) )\n\t\t\t{\n\t\t\t\tSystem.out.println(\"ERROR: Kitchen can't continue because the job couldn't be loaded.\");\t\t\t    \n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tResult result = null;\n\t\t\n\t\ttry\n\t\t{\n\t\t\tresult = job.execute(); // Execute the selected job.\n\t\t\tjob.endProcessing(\"end\");  // The bookkeeping...\n\t\t}\n\t\tcatch(KettleJobException je)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tjob.endProcessing(\"error\");\n\t\t\t}\n\t\t\tcatch(KettleJobException je2)\n\t\t\t{\n\t\t\t\tlog.logError(job.getName(), \"A serious error occured : \"+je2.getMessage());\n\t\t\t}\n\t\t}\n        finally\n        {\n            if (repository!=null) repository.disconnect();\n        }\n        \n\t\tlog.logBasic(STRING_KITCHEN, \"Finished!\");\n\t\t\n\t\tif (result!=null && result.getNrErrors()!=0)\n\t\t{\n\t\t\tlog.logError(STRING_KITCHEN, \"Finished with errors\");\n\t\t}\n\t\tcal=Calendar.getInstance();\n\t\tstop=cal.getTime();\n\t\tString begin=df.format(start).toString();\n\t\tString end  =df.format(stop).toString();\n\n\t\tlog.logBasic(STRING_KITCHEN, \"Start=\"+begin+\", Stop=\"+end);\n\t\tlong millis=stop.getTime()-start.getTime();\n\t\tlog.logBasic(STRING_KITCHEN, \"Processing ended after \"+(millis/1000)+\" seconds.\");\n\t}","id":96659,"modified_method":"public static void main(String[] a)\n\t{\n\t    ArrayList args = new ArrayList();\n\t    for (int i=0;i<a.length;i++) \n\t    {\n\t        if (a[i].length()>0) args.add(a[i]);\n\t    }\n\n\t\tRepositoryMeta repinfo  = null;\n\t\tUserInfo       userinfo = null;\n\t\tJob            job      = null;\n\n\t\tif (args.size()==0 ) \n\t\t{\n\t\t    System.out.println(\"Options:\");\n\t\t    System.out.println(\"  -rep      : Repository name\");\n\t\t    System.out.println(\"  -user     : Repository username\");\n\t\t    System.out.println(\"  -pass     : Repository password\");\n\t\t    System.out.println(\"  -job      : The name of the job to launch\");\n\t\t    System.out.println(\"  -dir      : The directory (don't forget the leading / or \\\\)\");\n\t\t    System.out.println(\"  -file     : The filename (Job XML) to launch\");\n\t\t    System.out.println(\"  -level    : The logging level\t(Basic, Detailed, Debug, Rowlevel, Error, Nothing)\");\n\t\t    System.out.println(\"  -log      : The logging file to write to\");\n\t\t    System.out.println(\"  -listdir  : List the directories in the repository\");\n\t\t    System.out.println(\"  -listjobs : List the jobs in the specified directory\");\n\t\t    System.out.println(\"  -listrep  : List the defined repositories\");\n            System.out.println(\"  -norep    : Don't log into the repository\");\n\t\t    System.out.println(\"\");\n\t\t    \n\t\t    return;\n\t\t}\n\n\t\tString repname   = Const.getCommandlineOption(args, \"rep\");\n\t\tString username  = Const.getCommandlineOption(args, \"user\");\n\t\tString password  = Const.getCommandlineOption(args, \"pass\");\n\t\tString jobname   = Const.getCommandlineOption(args, \"job\");\n\t\tString dirname   = Const.getCommandlineOption(args, \"dir\");\n\t\tString filename  = Const.getCommandlineOption(args, \"file\");\n\t\tString loglevel  = Const.getCommandlineOption(args, \"level\");\n\t\tString logfile   = Const.getCommandlineOption(args, \"log\");\n\t\tString listdir   = Const.getCommandlineOption(args, \"listdir\");\n\t\tString listjobs  = Const.getCommandlineOption(args, \"listjobs\");\n\t\tString listrep   = Const.getCommandlineOption(args, \"listrep\");\n        String norep     = Const.getCommandlineOption(args, \"norep\");\n\n        String kettleRepname  = Const.getEnvironmentVariable(\"KETTLE_REPOSITORY\", null);\n        String kettleUsername = Const.getEnvironmentVariable(\"KETTLE_USER\", null);\n        String kettlePassword = Const.getEnvironmentVariable(\"KETTLE_PASSWORD\", null);\n        \n        if (kettleRepname !=null && kettleRepname .length()>0) repname  = kettleRepname;\n        if (kettleUsername!=null && kettleUsername.length()>0) username = kettleUsername;\n        if (kettlePassword!=null && kettlePassword.length()>0) password = kettlePassword;\n        \n\t\t// System.out.println(\"Level=\"+loglevel);\n        LogWriter log;\n        if (logfile==null)\n        {\n            log=LogWriter.getInstance( LogWriter.LOG_LEVEL_BASIC );\n        }\n        else\n        {\n            log=LogWriter.getInstance( logfile, true, LogWriter.LOG_LEVEL_BASIC );\n        }\n        \n        if (loglevel!=null) \n        {\n            log.setLogLevel(loglevel);\n            log.logBasic(STRING_KITCHEN, \"Logging is at level : \"+log.getLogLevelDesc());\n        } \n\t\t\n        if (repname!=null && username!=null) log.logDetailed(STRING_KITCHEN, \"Repository and username supplied\");\n\n\t\tlog.logBasic(STRING_KITCHEN, \"Start of run.\");\n\t\t\n\t\t/* Load the plugins etc.*/\n\t\tStepLoader steploader = StepLoader.getInstance();\n\t\tif (!steploader.read())\n\t\t{\n\t\t\tlog.logError(\"Spoon\", \"Error loading steps... halting Kitchen!\");\n\t\t\treturn;\n\t\t}\n\n\t\tDate start, stop;\n\t\tCalendar cal;\n\t\tSimpleDateFormat df = new SimpleDateFormat(\"yyyy/MM/dd HH:mm:ss.SSS\");\n\t\tcal=Calendar.getInstance();\n\t\tstart=cal.getTime();\n\t\t\t\t\n\t\tlog.logDebug(STRING_KITCHEN, \"Allocate new job.\");\n\t\tJobMeta jobinfo = new JobMeta(log);\n        \n        \n        // In case we use a repository...\n        Repository repository = null;\n\n\t\ttry\n\t\t{\n\t\t\t// Read kettle job specified on command-line?\n\t\t\tif (repname!=null || filename!=null)\n\t\t\t{\n\t\t\t\tlog.logDebug(STRING_KITCHEN, \"Parsing command line options.\");\n\t\t\t\tif (repname!=null && !\"Y\".equalsIgnoreCase(norep))\n\t\t\t\t{\n\t\t\t\t\tlog.logDebug(STRING_KITCHEN, \"Loading available repositories.\");\n\t\t\t\t\tRepositoriesMeta repsinfo = new RepositoriesMeta(log);\n\t\t\t\t\tif (repsinfo.readData())\n\t\t\t\t\t{\n\t\t\t\t\t\tlog.logDebug(STRING_KITCHEN, \"Finding repository [\"+repname+\"]\");\n\t\t\t\t\t\trepinfo = repsinfo.findRepository(repname);\n\t\t\t\t\t\tif (repinfo!=null)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Define and connect to the repository...\n\t\t\t\t\t\t\tlog.logDebug(STRING_KITCHEN, \"Allocate & connect to repository.\");\n\t\t\t\t\t\t\trepository = new Repository(log, repinfo, userinfo);\n\t\t\t\t\t\t\tif (repository.connect(\"Kitchen commandline\"))\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tRepositoryDirectory directory = repository.getDirectoryTree(); // Default = root\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\t// Find the directory name if one is specified...\n\t\t\t\t\t\t\t\tif (dirname!=null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tdirectory = repository.getDirectoryTree().findDirectory(dirname);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t\tif (directory!=null)\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Check username, password\n\t\t\t\t\t\t\t\t\tlog.logDebug(STRING_KITCHEN, \"Check supplied username and password.\");\n\t\t\t\t\t\t\t\t\tuserinfo = new UserInfo(repository, username, password);\n\t\t\t\t\t\t\t\t\tif (userinfo.getID()>0)\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t    // Load a job\n\t\t\t\t\t\t\t\t\t\tif (jobname!=null && jobname.length()>0)\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlog.logDebug(STRING_KITCHEN, \"Load the job info...\");\n\t\t\t\t\t\t\t\t\t\t\tjobinfo =  new JobMeta(log, repository, jobname, directory);\n\t\t\t\t\t\t\t\t\t\t\tlog.logDebug(STRING_KITCHEN, \"Allocate job...\");\n\t\t\t\t\t\t\t\t\t\t\tjob = new Job(log, steploader, repository, jobinfo);\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t// List the jobs in the repository\n\t\t\t\t\t\t\t\t\t\tif (\"Y\".equalsIgnoreCase(listjobs))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t    log.logDebug(STRING_KITCHEN, \"Getting list of jobs in directory: \"+directory);\n\t\t\t\t\t\t\t\t\t\t\tString jobnames[] = repository.getJobNames(directory.getID());\n\t\t\t\t\t\t\t\t\t\t\tfor (int i=0;i<jobnames.length;i++)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(jobnames[i]);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t// List the directories in the repository\n\t\t\t\t\t\t\t\t\t\tif (\"Y\".equalsIgnoreCase(listdir))\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tString dirnames[] = repository.getDirectoryNames(directory.getID());\n\t\t\t\t\t\t\t\t\t\t\tfor (int i=0;i<dirnames.length;i++)\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tSystem.out.println(dirnames[i]);\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tSystem.out.println(\"ERROR: Can't verify username and password.\");\n\t\t\t\t\t\t\t\t\t\tuserinfo=null;\n\t\t\t\t\t\t\t\t\t\trepinfo=null;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tSystem.out.println(\"ERROR: Can't find the supplied directory [\"+dirname+\"]\");\n\t\t\t\t\t\t\t\t\tuserinfo=null;\n\t\t\t\t\t\t\t\t\trepinfo=null;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tSystem.out.println(\"ERROR: Can't connect to the repository.\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tSystem.out.println(\"ERROR: No repository provided, can't load job.\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tSystem.out.println(\"ERROR: No repositories defined on this system.\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t\n                // Try to load if from file anyway.\n\t\t\t\tif (filename!=null && job==null)\n\t\t\t\t{\n\t\t\t\t\tjobinfo = new JobMeta(log, filename);\n\t\t\t\t\tjob = new Job(log, steploader, null, jobinfo);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\tif (\"Y\".equalsIgnoreCase(listrep))\n\t\t\t{\n\t\t\t\tRepositoriesMeta ri = new RepositoriesMeta(log);\n\t\t\t\tif (ri.readData())\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"List of repositories:\");\n\t\t\t\t\tfor (int i=0;i<ri.nrRepositories();i++)\n\t\t\t\t\t{\n\t\t\t\t\t\tRepositoryMeta rinfo = ri.getRepository(i);\n\t\t\t\t\t\tSystem.out.println(\"#\"+(i+1)+\" : \"+rinfo.getName()+\" [\"+rinfo.getDescription()+\"] \");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tSystem.out.println(\"ERROR: Unable to read/parse the repositories XML file.\");\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tcatch(KettleException e)\n\t\t{\n\t\t\tjob=null;\n\t\t\tjobinfo=null;\n\t\t\tSystem.out.println(\"Processing stopped because of an error: \"+e.getMessage());\n\t\t}\n\n\t\tif (job==null)\n\t\t{\n\t\t\tif (!\"Y\".equalsIgnoreCase(listjobs) &&  !\"Y\".equalsIgnoreCase(listdir) && !\"Y\".equalsIgnoreCase(listrep) )\n\t\t\t{\n\t\t\t\tSystem.out.println(\"ERROR: Kitchen can't continue because the job couldn't be loaded.\");\t\t\t    \n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\t\t\n\t\tResult result = null;\n\t\t\n\t\ttry\n\t\t{\n\t\t\tresult = job.execute(); // Execute the selected job.\n\t\t\tjob.endProcessing(\"end\");  // The bookkeeping...\n\t\t}\n\t\tcatch(KettleJobException je)\n\t\t{\n\t\t\ttry\n\t\t\t{\n\t\t\t\tjob.endProcessing(\"error\");\n\t\t\t}\n\t\t\tcatch(KettleJobException je2)\n\t\t\t{\n\t\t\t\tlog.logError(job.getName(), \"A serious error occured : \"+je2.getMessage());\n\t\t\t}\n\t\t}\n        finally\n        {\n            if (repository!=null) repository.disconnect();\n        }\n        \n\t\tlog.logBasic(STRING_KITCHEN, \"Finished!\");\n\t\t\n\t\tif (result!=null && result.getNrErrors()!=0)\n\t\t{\n\t\t\tlog.logError(STRING_KITCHEN, \"Finished with errors\");\n\t\t}\n\t\tcal=Calendar.getInstance();\n\t\tstop=cal.getTime();\n\t\tString begin=df.format(start).toString();\n\t\tString end  =df.format(stop).toString();\n\n\t\tlog.logBasic(STRING_KITCHEN, \"Start=\"+begin+\", Stop=\"+end);\n\t\tlong millis=stop.getTime()-start.getTime();\n\t\tlog.logBasic(STRING_KITCHEN, \"Processing ended after \"+(millis/1000)+\" seconds.\");\n\t}","commit_id":"b31a8b5cf8f8511b6cea5326e1570c0dea69b2ac","url":"https://github.com/pentaho/pentaho-kettle"},{"original_method":"protected void doSite(HttpServletRequest req, HttpServletResponse res,\n                          Session session, String siteId, String pageId,\n                          String toolContextPath) throws ToolException, IOException {\n        // default site if not set\n        if (siteId == null) {\n            if (session.getUserId() == null) {\n                siteId = ServerConfigurationService.getGatewaySiteId();\n            } else {\n                siteId = SiteService.getUserSiteId(session.getUserId());\n            }\n        }\n\n        // if no page id, see if there was a last page visited for this site\n        if (pageId == null) {\n            pageId = (String) session.getAttribute(ATTR_SITE_PAGE + siteId);\n        }\n\n        // find the site, for visiting\n        Site site = null;\n        try {\n            site = portalService.getSiteVisit(siteId);\n        }\n        catch (IdUnusedException e) {\n            doError(req, res, session, ERROR_SITE);\n            return;\n        }\n        catch (PermissionException e) {\n            // if not logged in, give them a chance\n            if (session.getUserId() == null) {\n                doLogin(req, res, session, req.getPathInfo(), false);\n            } else {\n                doError(req, res, session, ERROR_SITE);\n            }\n            return;\n        }\n\n        // find the page, or use the first page if pageId not found\n        SitePage page = site.getPage(pageId);\n        if (page == null) {\n            List pages = site.getOrderedPages();\n            if (!pages.isEmpty()) {\n                page = (SitePage) pages.get(0);\n            }\n        }\n        if (page == null) {\n            doError(req, res, session, ERROR_SITE);\n            return;\n        }\n\n        // store the last page visited\n        session.setAttribute(ATTR_SITE_PAGE + siteId, page.getId());\n\n        // form a context sensitive title\n        String title = ServerConfigurationService.getString(\"ui.service\")\n            + \" : \" + site.getTitle() + \" : \" + page.getTitle();\n\n        // start the response\n        String siteType = calcSiteType(siteId);\n        PortalRenderContext rcontext = startPageContext(siteType, title, site\n            .getSkin(), req);\n\n        // the 'full' top area\n        includeSiteNav(rcontext, req, session, siteId);\n\n        includeWorksite(rcontext, res, req, session, site, page, toolContextPath,\n            \"site\");\n\n        includeBottom(rcontext);\n\n        // end the response\n        sendResponse(rcontext, res, \"site\");\n    }","id":96660,"modified_method":"protected void doSite(HttpServletRequest req, HttpServletResponse res,\n                          Session session, String siteId, String pageId,\n                          String toolContextPath) throws ToolException, IOException {\n        // default site if not set\n        if (siteId == null) {\n            if (session.getUserId() == null) {\n                siteId = ServerConfigurationService.getGatewaySiteId();\n            } else {\n                siteId = SiteService.getUserSiteId(session.getUserId());\n            }\n        }\n\n        // if no page id, see if there was a last page visited for this site\n        if (pageId == null) {\n            pageId = (String) session.getAttribute(ATTR_SITE_PAGE + siteId);\n        }\n\n        // find the site, for visiting\n        Site site = null;\n        try {\n            site = portalService.getSiteVisit(siteId);\n        }\n        catch (IdUnusedException e) {\n            doError(req, res, session, ERROR_SITE);\n            return;\n        }\n        catch (PermissionException e) {\n            // if not logged in, give them a chance\n            if (session.getUserId() == null) {\n                doLogin(req, res, session, req.getPathInfo(), false);\n            } else {\n                doError(req, res, session, ERROR_SITE);\n            }\n            return;\n        }\n\n        // find the page, or use the first page if pageId not found\n        SitePage page = site.getPage(pageId);\n        if (page == null) {\n            List pages = site.getOrderedPages();\n            if (!pages.isEmpty()) {\n                page = (SitePage) pages.get(0);\n            }\n        }\n        if (page == null) {\n            doError(req, res, session, ERROR_SITE);\n            return;\n        }\n\n        // store the last page visited\n        session.setAttribute(ATTR_SITE_PAGE + siteId, page.getId());\n\n        // form a context sensitive title\n        String title = ServerConfigurationService.getString(\"ui.service\")\n            + \" : \" + site.getTitle() + \" : \" + page.getTitle();\n\n        // start the response\n        String siteType = calcSiteType(siteId);\n        PortalRenderContext rcontext = startPageContext(siteType, title, site\n            .getSkin(), req);\n\n        // the 'full' top area\n        includeSiteNav(rcontext, req, session, siteId);\n\n        includeWorksite(rcontext, res, req, session, site, page, toolContextPath,\n            \"site\");\n\n        includeBottom(rcontext);\n\n        // end the response\n        sendResponse(rcontext, res, \"site\", null);\n    }","commit_id":"9f33cc3f542fed868c91b49b6d99642ece792c4e","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void doError(HttpServletRequest req, HttpServletResponse res,\n                           Session session, int mode) throws ToolException, IOException {\n        if (ThreadLocalManager.get(ATTR_ERROR) == null) {\n            ThreadLocalManager.set(ATTR_ERROR, ATTR_ERROR);\n\n            // send to the error site\n            switch (mode) {\n                case ERROR_SITE: {\n                    doSite(req, res, session, \"!error\", null, req\n                        .getContextPath()\n                        + req.getServletPath());\n                    break;\n                }\n                case ERROR_GALLERY: {\n                    doGallery(req, res, session, \"!error\", null, req\n                        .getContextPath()\n                        + req.getServletPath());\n                    break;\n                }\n                case ERROR_WORKSITE: {\n                    doWorksite(req, res, session, \"!error\", null, req\n                        .getContextPath()\n                        + req.getServletPath());\n                    break;\n                }\n            }\n            return;\n        }\n\n        // error and we cannot use the error site...\n\n        // form a context sensitive title\n        String title = ServerConfigurationService.getString(\"ui.service\")\n            + \" : Portal\";\n\n        // start the response\n        PortalRenderContext rcontext = startPageContext(\"\", title, null, req);\n\n        showSession(rcontext, true);\n\n        showSnoop(rcontext, true, getServletConfig(), req);\n\n        sendResponse(rcontext, res, \"error\");\n    }","id":96661,"modified_method":"protected void doError(HttpServletRequest req, HttpServletResponse res,\n                           Session session, int mode) throws ToolException, IOException {\n        if (ThreadLocalManager.get(ATTR_ERROR) == null) {\n            ThreadLocalManager.set(ATTR_ERROR, ATTR_ERROR);\n\n            // send to the error site\n            switch (mode) {\n                case ERROR_SITE: {\n                    doSite(req, res, session, \"!error\", null, req\n                        .getContextPath()\n                        + req.getServletPath());\n                    break;\n                }\n                case ERROR_GALLERY: {\n                    doGallery(req, res, session, \"!error\", null, req\n                        .getContextPath()\n                        + req.getServletPath());\n                    break;\n                }\n                case ERROR_WORKSITE: {\n                    doWorksite(req, res, session, \"!error\", null, req\n                        .getContextPath()\n                        + req.getServletPath());\n                    break;\n                }\n            }\n            return;\n        }\n\n        // error and we cannot use the error site...\n\n        // form a context sensitive title\n        String title = ServerConfigurationService.getString(\"ui.service\")\n            + \" : Portal\";\n\n        // start the response\n        PortalRenderContext rcontext = startPageContext(\"\", title, null, req);\n\n        showSession(rcontext, true);\n\n        showSnoop(rcontext, true, getServletConfig(), req);\n\n        sendResponse(rcontext, res, \"error\", null);\n    }","commit_id":"9f33cc3f542fed868c91b49b6d99642ece792c4e","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void doNavLogin(HttpServletRequest req, HttpServletResponse res,\n                              Session session, String siteId) throws IOException {\n        // start the response\n        PortalRenderContext rcontext = startPageContext(\"\", \"Login\", null, req);\n\n        includeLogo(rcontext, req, session, siteId);\n\n        sendResponse(rcontext, res, \"login\");\n    }","id":96662,"modified_method":"protected void doNavLogin(HttpServletRequest req, HttpServletResponse res,\n                              Session session, String siteId) throws IOException {\n        // start the response\n        PortalRenderContext rcontext = startPageContext(\"\", \"Login\", null, req);\n\n        includeLogo(rcontext, req, session, siteId);\n\n        sendResponse(rcontext, res, \"login\", null);\n    }","commit_id":"9f33cc3f542fed868c91b49b6d99642ece792c4e","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void doPage(HttpServletRequest req, HttpServletResponse res,\n                          Session session, String pageId, String toolContextPath)\n        throws ToolException, IOException {\n        // find the page from some site\n        SitePage page = SiteService.findPage(pageId);\n        if (page == null) {\n            doError(req, res, session, ERROR_WORKSITE);\n            return;\n        }\n\n        // permission check - visit the site\n        Site site = null;\n        try {\n            site = SiteService.getSiteVisit(page.getSiteId());\n        }\n        catch (IdUnusedException e) {\n            doError(req, res, session, ERROR_WORKSITE);\n            return;\n        }\n        catch (PermissionException e) {\n            // if not logged in, give them a chance\n            if (session.getUserId() == null) {\n                doLogin(req, res, session, req.getPathInfo(), false);\n            } else {\n                doError(req, res, session, ERROR_WORKSITE);\n            }\n            return;\n        }\n\n        // form a context sensitive title\n        String title = ServerConfigurationService.getString(\"ui.service\")\n            + \" : \" + site.getTitle() + \" : \" + page.getTitle();\n\n        String siteType = calcSiteType(site.getId());\n        // start the response\n        PortalRenderContext rcontext = startPageContext(siteType, title, page\n            .getSkin(), req);\n\n        includePage(rcontext, res, req, page, toolContextPath, \"contentFull\");\n\n        sendResponse(rcontext, res, \"page\");\n    }","id":96663,"modified_method":"protected void doPage(HttpServletRequest req, HttpServletResponse res,\n                          Session session, String pageId, String toolContextPath)\n        throws ToolException, IOException {\n        // find the page from some site\n        SitePage page = SiteService.findPage(pageId);\n        if (page == null) {\n            doError(req, res, session, ERROR_WORKSITE);\n            return;\n        }\n\n        // permission check - visit the site\n        Site site = null;\n        try {\n            site = SiteService.getSiteVisit(page.getSiteId());\n        }\n        catch (IdUnusedException e) {\n            doError(req, res, session, ERROR_WORKSITE);\n            return;\n        }\n        catch (PermissionException e) {\n            // if not logged in, give them a chance\n            if (session.getUserId() == null) {\n                doLogin(req, res, session, req.getPathInfo(), false);\n            } else {\n                doError(req, res, session, ERROR_WORKSITE);\n            }\n            return;\n        }\n\n        // form a context sensitive title\n        String title = ServerConfigurationService.getString(\"ui.service\")\n            + \" : \" + site.getTitle() + \" : \" + page.getTitle();\n\n        String siteType = calcSiteType(site.getId());\n        // start the response\n        PortalRenderContext rcontext = startPageContext(siteType, title, page\n            .getSkin(), req);\n\n        includePage(rcontext, res, req, page, toolContextPath, \"contentFull\");\n\n        sendResponse(rcontext, res, \"page\", null);\n    }","commit_id":"9f33cc3f542fed868c91b49b6d99642ece792c4e","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n     * Respond to navigation / access requests.\n     *\n     * @param req The servlet request.\n     * @param res The servlet response.\n     * @throws javax.servlet.ServletException.\n     *\n     * @throws java.io.IOException.\n     */\n    protected void doGet(HttpServletRequest req, HttpServletResponse res)\n        throws ServletException, IOException {\n\n        boolean resetDone = false;\n        try {\n            basicAuth.doLogin(req);\n            if (!ToolRenderService.preprocess(req, res, getServletContext())) {\n                return;\n            }\n\n            // get the Sakai session\n            Session session = SessionManager.getCurrentSession();\n\n            // recognize what to do from the path\n            String option = req.getPathInfo();\n\n            // if missing, set it to home or gateway\n            if ((option == null) || (\"/\".equals(option))) {\n                if (session.getUserId() == null) {\n                    option = \"/site/\"\n                        + ServerConfigurationService.getGatewaySiteId();\n                } else {\n                    option = \"/site/\"\n                        + SiteService.getUserSiteId(session.getUserId());\n                }\n            }\n\n            // get the parts (the first will be \"\")\n            String[] parts = option.split(\"/\");\n\n            // recognize and dispatch the 'tool' option: [1] = \"tool\", [2] =\n            // placement id (of a site's tool placement), rest for the tool\n            if ((parts.length > 2) && (parts[1].equals(\"tool\"))) {\n                // Resolve the placements of the form\n                // /portal/tool/sakai.resources?sakai.site=~csev\n                String toolPlacement = getPlacement(req, res, session,\n                    parts[2], false);\n                if (toolPlacement == null) {\n                    return;\n                }\n                parts[2] = toolPlacement;\n\n                doTool(req, res, session, parts[2], req.getContextPath()\n                    + req.getServletPath() + Web.makePath(parts, 1, 3), Web\n                    .makePath(parts, 3, parts.length));\n            } else if (enableDirect && (parts.length > 2)\n                && (parts[1].equals(\"directtool\"))) {\n                // Resolve the placements of the form\n                // /portal/tool/sakai.resources?sakai.site=~csev\n                String toolPlacement = getPlacement(req, res, session,\n                    parts[2], false);\n                if (toolPlacement == null) {\n                    return;\n                }\n                parts[2] = toolPlacement;\n\n                doDirectTool(req, res, session, parts[2], req.getContextPath()\n                    + req.getServletPath() + Web.makePath(parts, 1, 3), Web\n                    .makePath(parts, 3, parts.length));\n            }\n\n            // These reset urls simply set a session value to indicate to reset\n            // state and then redirect\n            // This is necessary os that the URL is clean and we do not see\n            // resets on refresh\n            else if ((parts.length > 2) && (parts[1].equals(\"tool-reset\"))) {\n                String toolUrl = req.getContextPath() + \"/tool\" + Web.makePath(parts, 2, parts.length);\n                // Make sure to add the parameters such as panel=Main\n                String queryString = req.getQueryString();\n                if (queryString != null) {\n                    toolUrl = toolUrl + \"?\" + queryString;\n                }\n                portalService.setResetState(\"true\");\n                resetDone = true;\n                res.sendRedirect(toolUrl);\n            }\n            // recognize a dispatch the 'page' option (tools on a page)\n            else if ((parts.length == 3) && (parts[1].equals(\"page\"))) {\n                // Resolve the placements of the form\n                // /portal/page/sakai.resources?sakai.site=~csev\n                String pagePlacement = getPlacement(req, res, session,\n                    parts[2], true);\n                if (pagePlacement == null) {\n                    return;\n                }\n                parts[2] = pagePlacement;\n\n                doPage(req, res, session, parts[2], req.getContextPath()\n                    + req.getServletPath());\n            }\n\n            // recognize a dispatch the 'worksite' option (pages navigation +\n            // tools on a page)\n            else if ((parts.length >= 3) && (parts[1].equals(\"worksite\"))) {\n                // recognize an optional page/pageid\n                String pageId = null;\n                if ((parts.length == 5) && (parts[3].equals(\"page\"))) {\n                    pageId = parts[4];\n                }\n\n                doWorksite(req, res, session, parts[2], pageId, req\n                    .getContextPath()\n                    + req.getServletPath());\n            }\n\n\t    // Implement the dense portlet-style portal\n            else if ((parts.length >= 2) && (parts[1].equals(\"portlet\"))) {\n\n                // /portal/portlet/site-id\n                String siteId = null;\n                if (parts.length >= 3) {\n                    siteId = parts[2];\n                }\n\n\t        // This is a pop-up page - it does exactly the same as /portal/page\n                // /portal/portlet/site-id/page/page-id\n\t        //           1       2      3     4\n                String pageId = null;\n                if ((parts.length == 5) && (parts[3].equals(\"page\"))) {\n                    doPage(req, res, session, parts[4], req.getContextPath()\n                        + req.getServletPath());\n\t\t    return;\n                }\n\n\t\t// Tool resetting URL - clear state and forward to the real tool URL\n\t\t// /portal/portlet/site-id/tool-reset/toolId\n\t\t//    0      1       2         3        4\n                String toolId = null;\n                if ( (siteId != null ) && (parts.length == 5) && (parts[3].equals(\"tool-reset\"))) {\n\t\t    toolId = parts[4];\n                    String toolUrl = req.getContextPath() + \"/portlet/\" + siteId + \"/tool\" + Web.makePath(parts, 4, parts.length);\n                    String queryString = req.getQueryString();\n                    if (queryString != null) {\n                        toolUrl = toolUrl + \"?\" + queryString;\n                    }\n                    portalService.setResetState(\"true\");\n                    resetDone = true;\n                    res.sendRedirect(toolUrl);\n                }\n\n\t\t// Tool after the reset\n\t\t// /portal/portlet/site-id/tool/toolId\n                if ((parts.length == 5) && (parts[3].equals(\"tool\"))) {\n\t\t    toolId = parts[4];\n                }\n\n        \tString forceLogout= req.getParameter(PARAM_FORCE_LOGOUT);\n        \tif (\"yes\".equalsIgnoreCase(forceLogout)\n                \t|| \"true\".equalsIgnoreCase(forceLogout)) {\n                \tdoLogout(req, res, session, \"/portlet\");\n\t\t\t\treturn;\n\t\t}\n\t\n        \tif (session.getUserId() == null) {\n            \t\tString forceLogin = req.getParameter(PARAM_FORCE_LOGIN);\n            \t\tif (\"yes\".equalsIgnoreCase(forceLogin)\n                \t\t|| \"true\".equalsIgnoreCase(forceLogin)) {\n                \t\tdoLogin(req, res, session, req.getPathInfo(), false);\n                \t\treturn;\n            \t\t}\n        \t}\n\n                PortalRenderContext rcontext = includePortal(req, res, session, siteId, toolId, req.getContextPath()\n                    + req.getServletPath(), \"portlet\", /* doPages */ false, /* resetTools */ true );\n\t\tsendResponse(rcontext, res, \"portlet\");\n            }\n\n            // recognize a dispatch the 'gallery' option (site tabs + pages\n            // navigation + tools on a page)\n            else if ((parts.length >= 2) && (parts[1].equals(\"gallery\"))) {\n                // recognize an optional page/pageid\n                String pageId = null;\n                if ((parts.length == 5) && (parts[3].equals(\"page\"))) {\n                    pageId = parts[4];\n                }\n\n                // site might be specified\n                String siteId = null;\n                if (parts.length >= 3) {\n                    siteId = parts[2];\n                }\n\n                doGallery(req, res, session, siteId, pageId, req\n                    .getContextPath()\n                    + req.getServletPath());\n            }\n\n            // recognize a dispatch the 'site' option (site logo and tabs +\n            // pages navigation + tools on a page)\n            else if ((parts.length >= 2) && (parts[1].equals(\"site\"))) {\n                // recognize an optional page/pageid\n                String pageId = null;\n                if ((parts.length == 5) && (parts[3].equals(\"page\"))) {\n                    pageId = parts[4];\n                }\n\n                // site might be specified\n                String siteId = null;\n                if (parts.length >= 3) {\n                    siteId = parts[2];\n                }\n\n                doSite(req, res, session, siteId, pageId, req.getContextPath()\n                    + req.getServletPath());\n            }\n\n            // recognize nav login\n            else if ((parts.length == 3) && (parts[1].equals(\"nav_login\"))) {\n                doNavLogin(req, res, session, parts[2]);\n            }\n\n            // recognize nav login for the gallery\n            else if ((parts.length == 3)\n                && (parts[1].equals(\"nav_login_gallery\"))) {\n                doNavLoginGallery(req, res, session, parts[2]);\n            }\n\n            // recognize presence\n            else if ((parts.length >= 3) && (parts[1].equals(\"presence\"))) {\n                doPresence(req, res, session, parts[2], req.getContextPath()\n                    + req.getServletPath() + Web.makePath(parts, 1, 3), Web\n                    .makePath(parts, 3, parts.length));\n            }\n\n            // recognize help\n            else if ((parts.length >= 2) && (parts[1].equals(\"help\"))) {\n                doHelp(req, res, session, req.getContextPath()\n                    + req.getServletPath() + Web.makePath(parts, 1, 2), Web\n                    .makePath(parts, 2, parts.length));\n            }\n\n            // recognize and dispatch the 'login' option\n            else if ((parts.length == 2) && (parts[1].equals(\"relogin\"))) {\n                // Note: here we send a null path, meaning we will NOT set it as\n                // a possible return path\n                // we expect we are in the middle of a login screen processing,\n                // and it's already set (user login button is \"ulogin\") -ggolden\n                doLogin(req, res, session, null, false);\n            }\n\n            // recognize and dispatch the 'login' option\n            else if ((parts.length == 2) && (parts[1].equals(\"login\"))) {\n                doLogin(req, res, session, \"\", false);\n            }\n\n            // recognize and dispatch the 'login' options\n            else if ((parts.length == 2) && ((parts[1].equals(\"xlogin\")))) {\n                doLogin(req, res, session, \"\", true);\n            }\n\n            // recognize and dispatch the 'login' option for gallery\n            else if ((parts.length == 2) && (parts[1].equals(\"login_gallery\"))) {\n                doLogin(req, res, session, \"/gallery\", false);\n            }\n\n            // recognize and dispatch the 'logout' option\n            else if ((parts.length == 2) && (parts[1].equals(\"logout\"))) {\n                doLogout(req, res, session, null);\n            }\n\n            // recognize and dispatch the 'logout' option for gallery\n            else if ((parts.length == 2) && (parts[1].equals(\"logout_gallery\"))) {\n                doLogout(req, res, session, \"/gallery\");\n            }\n\n            // recognize error done\n            else if ((parts.length >= 2) && (parts[1].equals(\"error-reported\"))) {\n                doErrorDone(req, res);\n            } else if ((parts.length >= 2) && (parts[1].equals(\"styles\"))) {\n                doStatic(req, res, parts);\n            } else if ((parts.length >= 2) && (parts[1].equals(\"scripts\"))) {\n                doStatic(req, res, parts);\n            }\n\n            // handle an unrecognized request\n            else {\n                doError(req, res, session, ERROR_SITE);\n            }\n        }\n        catch (Throwable t) {\n            doThrowableError(req, res, t);\n        }\n\n        // Make sure to clear any reset State at the end of the request unless\n        // we *just* set it\n        if (!resetDone) {\n            portalService.setResetState(null);\n        }\n\n    }","id":96664,"modified_method":"/**\n     * Respond to navigation / access requests.\n     *\n     * @param req The servlet request.\n     * @param res The servlet response.\n     * @throws javax.servlet.ServletException.\n     *\n     * @throws java.io.IOException.\n     */\n    protected void doGet(HttpServletRequest req, HttpServletResponse res)\n        throws ServletException, IOException {\n\n        boolean resetDone = false;\n        try {\n            basicAuth.doLogin(req);\n            if (!ToolRenderService.preprocess(req, res, getServletContext())) {\n                return;\n            }\n\n            // get the Sakai session\n            Session session = SessionManager.getCurrentSession();\n\n            // recognize what to do from the path\n            String option = req.getPathInfo();\n\n            // if missing, set it to home or gateway\n            if ((option == null) || (\"/\".equals(option))) {\n                if (session.getUserId() == null) {\n                    option = \"/site/\"\n                        + ServerConfigurationService.getGatewaySiteId();\n                } else {\n                    option = \"/site/\"\n                        + SiteService.getUserSiteId(session.getUserId());\n                }\n            }\n\n            // get the parts (the first will be \"\")\n            String[] parts = option.split(\"/\");\n\n            // recognize and dispatch the 'tool' option: [1] = \"tool\", [2] =\n            // placement id (of a site's tool placement), rest for the tool\n            if ((parts.length > 2) && (parts[1].equals(\"tool\"))) {\n                // Resolve the placements of the form\n                // /portal/tool/sakai.resources?sakai.site=~csev\n                String toolPlacement = getPlacement(req, res, session,\n                    parts[2], false);\n                if (toolPlacement == null) {\n                    return;\n                }\n                parts[2] = toolPlacement;\n\n                doTool(req, res, session, parts[2], req.getContextPath()\n                    + req.getServletPath() + Web.makePath(parts, 1, 3), Web\n                    .makePath(parts, 3, parts.length));\n            } else if (enableDirect && (parts.length > 2)\n                && (parts[1].equals(\"directtool\"))) {\n                // Resolve the placements of the form\n                // /portal/tool/sakai.resources?sakai.site=~csev\n                String toolPlacement = getPlacement(req, res, session,\n                    parts[2], false);\n                if (toolPlacement == null) {\n                    return;\n                }\n                parts[2] = toolPlacement;\n\n                doDirectTool(req, res, session, parts[2], req.getContextPath()\n                    + req.getServletPath() + Web.makePath(parts, 1, 3), Web\n                    .makePath(parts, 3, parts.length));\n            }\n\n            // These reset urls simply set a session value to indicate to reset\n            // state and then redirect\n            // This is necessary os that the URL is clean and we do not see\n            // resets on refresh\n            else if ((parts.length > 2) && (parts[1].equals(\"tool-reset\"))) {\n                String toolUrl = req.getContextPath() + \"/tool\" + Web.makePath(parts, 2, parts.length);\n                // Make sure to add the parameters such as panel=Main\n                String queryString = req.getQueryString();\n                if (queryString != null) {\n                    toolUrl = toolUrl + \"?\" + queryString;\n                }\n                portalService.setResetState(\"true\");\n                resetDone = true;\n                res.sendRedirect(toolUrl);\n            }\n            // recognize a dispatch the 'page' option (tools on a page)\n            else if ((parts.length == 3) && (parts[1].equals(\"page\"))) {\n                // Resolve the placements of the form\n                // /portal/page/sakai.resources?sakai.site=~csev\n                String pagePlacement = getPlacement(req, res, session,\n                    parts[2], true);\n                if (pagePlacement == null) {\n                    return;\n                }\n                parts[2] = pagePlacement;\n\n                doPage(req, res, session, parts[2], req.getContextPath()\n                    + req.getServletPath());\n            }\n\n            // recognize a dispatch the 'worksite' option (pages navigation +\n            // tools on a page)\n            else if ((parts.length >= 3) && (parts[1].equals(\"worksite\"))) {\n                // recognize an optional page/pageid\n                String pageId = null;\n                if ((parts.length == 5) && (parts[3].equals(\"page\"))) {\n                    pageId = parts[4];\n                }\n\n                doWorksite(req, res, session, parts[2], pageId, req\n                    .getContextPath()\n                    + req.getServletPath());\n            }\n\n\t    // Implement the dense portlet-style portal\n            else if ((parts.length >= 2) && (parts[1].equals(\"portlet\"))) {\n\n                // /portal/portlet/site-id\n                String siteId = null;\n                if (parts.length >= 3) {\n                    siteId = parts[2];\n                }\n\n\t        // This is a pop-up page - it does exactly the same as /portal/page\n                // /portal/portlet/site-id/page/page-id\n\t        //           1       2      3     4\n                String pageId = null;\n                if ((parts.length == 5) && (parts[3].equals(\"page\"))) {\n                    doPage(req, res, session, parts[4], req.getContextPath()\n                        + req.getServletPath());\n\t\t    return;\n                }\n\n\t\t// Tool resetting URL - clear state and forward to the real tool URL\n\t\t// /portal/portlet/site-id/tool-reset/toolId\n\t\t//    0      1       2         3        4\n                String toolId = null;\n                if ( (siteId != null ) && (parts.length == 5) && (parts[3].equals(\"tool-reset\"))) {\n\t\t    toolId = parts[4];\n                    String toolUrl = req.getContextPath() + \"/portlet/\" + siteId + \"/tool\" + Web.makePath(parts, 4, parts.length);\n                    String queryString = req.getQueryString();\n                    if (queryString != null) {\n                        toolUrl = toolUrl + \"?\" + queryString;\n                    }\n                    portalService.setResetState(\"true\");\n                    resetDone = true;\n                    res.sendRedirect(toolUrl);\n                }\n\n\t\t// Tool after the reset\n\t\t// /portal/portlet/site-id/tool/toolId\n                if ((parts.length == 5) && (parts[3].equals(\"tool\"))) {\n\t\t    toolId = parts[4];\n                }\n\n        \tString forceLogout= req.getParameter(PARAM_FORCE_LOGOUT);\n        \tif (\"yes\".equalsIgnoreCase(forceLogout)\n                \t|| \"true\".equalsIgnoreCase(forceLogout)) {\n                \tdoLogout(req, res, session, \"/portlet\");\n\t\t\t\treturn;\n\t\t}\n\t\n        \tif (session.getUserId() == null) {\n            \t\tString forceLogin = req.getParameter(PARAM_FORCE_LOGIN);\n            \t\tif (\"yes\".equalsIgnoreCase(forceLogin)\n                \t\t|| \"true\".equalsIgnoreCase(forceLogin)) {\n                \t\tdoLogin(req, res, session, req.getPathInfo(), false);\n                \t\treturn;\n            \t\t}\n        \t}\n\n                PortalRenderContext rcontext = includePortal(req, res, session, siteId, toolId, req.getContextPath()\n                    + req.getServletPath(), \"portlet\", /* doPages */ false, /* resetTools */ true );\n\t\tsendResponse(rcontext, res, \"portlet\", null);\n            }\n\n\t    // Implement the dense rss portal\n            else if ((parts.length >= 2) && (parts[1].equals(\"rss\"))) {\n\n                // /portal/portlet/site-id\n                String siteId = null;\n                if (parts.length >= 3) {\n                    siteId = parts[2];\n                }\n\n\t        // This is a pop-up page - it does exactly the same as /portal/page\n                // /portal/portlet/site-id/page/page-id\n\t        //           1       2      3     4\n                String pageId = null;\n                if ((parts.length == 5) && (parts[3].equals(\"page\"))) {\n                    doPage(req, res, session, parts[4], req.getContextPath()\n                        + req.getServletPath());\n\t\t    return;\n                }\n\n                PortalRenderContext rcontext = includePortal(req, res, session, siteId, \n\t\t    /* toolId */ null, req.getContextPath() + req.getServletPath(), \n\t\t    /* prefix */ \"rss\", /* doPages */ true, /* resetTools */ false );\n\t\tsendResponse(rcontext, res, \"rss\", \"text/xml\");\n            }\n\n            // recognize a dispatch the 'gallery' option (site tabs + pages\n            // navigation + tools on a page)\n            else if ((parts.length >= 2) && (parts[1].equals(\"gallery\"))) {\n                // recognize an optional page/pageid\n                String pageId = null;\n                if ((parts.length == 5) && (parts[3].equals(\"page\"))) {\n                    pageId = parts[4];\n                }\n\n                // site might be specified\n                String siteId = null;\n                if (parts.length >= 3) {\n                    siteId = parts[2];\n                }\n\n                doGallery(req, res, session, siteId, pageId, req\n                    .getContextPath()\n                    + req.getServletPath());\n            }\n\n            // recognize a dispatch the 'site' option (site logo and tabs +\n            // pages navigation + tools on a page)\n            else if ((parts.length >= 2) && (parts[1].equals(\"site\"))) {\n                // recognize an optional page/pageid\n                String pageId = null;\n                if ((parts.length == 5) && (parts[3].equals(\"page\"))) {\n                    pageId = parts[4];\n                }\n\n                // site might be specified\n                String siteId = null;\n                if (parts.length >= 3) {\n                    siteId = parts[2];\n                }\n\n                doSite(req, res, session, siteId, pageId, req.getContextPath()\n                    + req.getServletPath());\n            }\n\n            // recognize nav login\n            else if ((parts.length == 3) && (parts[1].equals(\"nav_login\"))) {\n                doNavLogin(req, res, session, parts[2]);\n            }\n\n            // recognize nav login for the gallery\n            else if ((parts.length == 3)\n                && (parts[1].equals(\"nav_login_gallery\"))) {\n                doNavLoginGallery(req, res, session, parts[2]);\n            }\n\n            // recognize presence\n            else if ((parts.length >= 3) && (parts[1].equals(\"presence\"))) {\n                doPresence(req, res, session, parts[2], req.getContextPath()\n                    + req.getServletPath() + Web.makePath(parts, 1, 3), Web\n                    .makePath(parts, 3, parts.length));\n            }\n\n            // recognize help\n            else if ((parts.length >= 2) && (parts[1].equals(\"help\"))) {\n                doHelp(req, res, session, req.getContextPath()\n                    + req.getServletPath() + Web.makePath(parts, 1, 2), Web\n                    .makePath(parts, 2, parts.length));\n            }\n\n            // recognize and dispatch the 'login' option\n            else if ((parts.length == 2) && (parts[1].equals(\"relogin\"))) {\n                // Note: here we send a null path, meaning we will NOT set it as\n                // a possible return path\n                // we expect we are in the middle of a login screen processing,\n                // and it's already set (user login button is \"ulogin\") -ggolden\n                doLogin(req, res, session, null, false);\n            }\n\n            // recognize and dispatch the 'login' option\n            else if ((parts.length == 2) && (parts[1].equals(\"login\"))) {\n                doLogin(req, res, session, \"\", false);\n            }\n\n            // recognize and dispatch the 'login' options\n            else if ((parts.length == 2) && ((parts[1].equals(\"xlogin\")))) {\n                doLogin(req, res, session, \"\", true);\n            }\n\n            // recognize and dispatch the 'login' option for gallery\n            else if ((parts.length == 2) && (parts[1].equals(\"login_gallery\"))) {\n                doLogin(req, res, session, \"/gallery\", false);\n            }\n\n            // recognize and dispatch the 'logout' option\n            else if ((parts.length == 2) && (parts[1].equals(\"logout\"))) {\n                doLogout(req, res, session, null);\n            }\n\n            // recognize and dispatch the 'logout' option for gallery\n            else if ((parts.length == 2) && (parts[1].equals(\"logout_gallery\"))) {\n                doLogout(req, res, session, \"/gallery\");\n            }\n\n            // recognize error done\n            else if ((parts.length >= 2) && (parts[1].equals(\"error-reported\"))) {\n                doErrorDone(req, res);\n            } else if ((parts.length >= 2) && (parts[1].equals(\"styles\"))) {\n                doStatic(req, res, parts);\n            } else if ((parts.length >= 2) && (parts[1].equals(\"scripts\"))) {\n                doStatic(req, res, parts);\n            }\n\n            // handle an unrecognized request\n            else {\n                doError(req, res, session, ERROR_SITE);\n            }\n        }\n        catch (Throwable t) {\n            doThrowableError(req, res, t);\n        }\n\n        // Make sure to clear any reset State at the end of the request unless\n        // we *just* set it\n        if (!resetDone) {\n            portalService.setResetState(null);\n        }\n\n    }","commit_id":"9f33cc3f542fed868c91b49b6d99642ece792c4e","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void doWorksite(HttpServletRequest req, HttpServletResponse res,\n                              Session session, String siteId, String pageId,\n                              String toolContextPath) throws ToolException, IOException {\n        // if no page id, see if there was a last page visited for this site\n        if (pageId == null) {\n            pageId = (String) session.getAttribute(ATTR_SITE_PAGE + siteId);\n        }\n\n        // find the site, for visiting\n        Site site = null;\n        try {\n            site = portalService.getSiteVisit(siteId);\n        }\n        catch (IdUnusedException e) {\n            doError(req, res, session, ERROR_WORKSITE);\n            return;\n        }\n        catch (PermissionException e) {\n            // if not logged in, give them a chance\n            if (session.getUserId() == null) {\n                doLogin(req, res, session, req.getPathInfo(), false);\n            } else {\n                doError(req, res, session, ERROR_WORKSITE);\n            }\n            return;\n        }\n\n        // find the page, or use the first page if pageId not found\n        SitePage page = site.getPage(pageId);\n        if (page == null) {\n            List pages = site.getOrderedPages();\n            if (!pages.isEmpty()) {\n                page = (SitePage) pages.get(0);\n            }\n        }\n        if (page == null) {\n            doError(req, res, session, ERROR_WORKSITE);\n            return;\n        }\n\n        // store the last page visited\n        session.setAttribute(ATTR_SITE_PAGE + siteId, page.getId());\n\n        // form a context sensitive title\n        String title = ServerConfigurationService.getString(\"ui.service\")\n            + \" : \" + site.getTitle() + \" : \" + page.getTitle();\n\n        // start the response\n        String siteType = calcSiteType(siteId);\n        PortalRenderContext rcontext = startPageContext(siteType, title, site\n            .getSkin(), req);\n\n        includeWorksite(rcontext, res, req, session, site, page, toolContextPath,\n            \"worksite\");\n\n        // end the response\n        sendResponse(rcontext, res, \"worksite\");\n    }","id":96665,"modified_method":"protected void doWorksite(HttpServletRequest req, HttpServletResponse res,\n                              Session session, String siteId, String pageId,\n                              String toolContextPath) throws ToolException, IOException {\n        // if no page id, see if there was a last page visited for this site\n        if (pageId == null) {\n            pageId = (String) session.getAttribute(ATTR_SITE_PAGE + siteId);\n        }\n\n        // find the site, for visiting\n        Site site = null;\n        try {\n            site = portalService.getSiteVisit(siteId);\n        }\n        catch (IdUnusedException e) {\n            doError(req, res, session, ERROR_WORKSITE);\n            return;\n        }\n        catch (PermissionException e) {\n            // if not logged in, give them a chance\n            if (session.getUserId() == null) {\n                doLogin(req, res, session, req.getPathInfo(), false);\n            } else {\n                doError(req, res, session, ERROR_WORKSITE);\n            }\n            return;\n        }\n\n        // find the page, or use the first page if pageId not found\n        SitePage page = site.getPage(pageId);\n        if (page == null) {\n            List pages = site.getOrderedPages();\n            if (!pages.isEmpty()) {\n                page = (SitePage) pages.get(0);\n            }\n        }\n        if (page == null) {\n            doError(req, res, session, ERROR_WORKSITE);\n            return;\n        }\n\n        // store the last page visited\n        session.setAttribute(ATTR_SITE_PAGE + siteId, page.getId());\n\n        // form a context sensitive title\n        String title = ServerConfigurationService.getString(\"ui.service\")\n            + \" : \" + site.getTitle() + \" : \" + page.getTitle();\n\n        // start the response\n        String siteType = calcSiteType(siteId);\n        PortalRenderContext rcontext = startPageContext(siteType, title, site\n            .getSkin(), req);\n\n        includeWorksite(rcontext, res, req, session, site, page, toolContextPath,\n            \"worksite\");\n\n        // end the response\n        sendResponse(rcontext, res, \"worksite\", null);\n    }","commit_id":"9f33cc3f542fed868c91b49b6d99642ece792c4e","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void sendResponse(PortalRenderContext rcontext,\n                                HttpServletResponse res, String template) throws IOException {\n        // headers\n        res.setContentType(\"text/html; charset=UTF-8\");\n        res.addDateHeader(\"Expires\", System.currentTimeMillis()\n            - (1000L * 60L * 60L * 24L * 365L));\n        res.addDateHeader(\"Last-Modified\", System.currentTimeMillis());\n        res\n            .addHeader(\"Cache-Control\",\n                \"no-store, no-cache, must-revalidate, max-age=0, post-check=0, pre-check=0\");\n        res.addHeader(\"Pragma\", \"no-cache\");\n\n        // get the writer\n        PrintWriter out = res.getWriter();\n\n        try {\n            rengine.render(template, rcontext, out);\n        }\n        catch (Exception e) {\n            throw new RuntimeException(\"Failed to render template \", e);\n        }\n\n    }","id":96666,"modified_method":"protected void sendResponse(PortalRenderContext rcontext,\n                                HttpServletResponse res, String template,\n\t\t\t\tString contentType) throws IOException {\n        // headers\n\tif ( contentType == null ) {\n            res.setContentType(\"text/html; charset=UTF-8\");\n\t} else {\n            res.setContentType(contentType);\n\t}\n        res.addDateHeader(\"Expires\", System.currentTimeMillis()\n            - (1000L * 60L * 60L * 24L * 365L));\n        res.addDateHeader(\"Last-Modified\", System.currentTimeMillis());\n        res\n            .addHeader(\"Cache-Control\",\n                \"no-store, no-cache, must-revalidate, max-age=0, post-check=0, pre-check=0\");\n        res.addHeader(\"Pragma\", \"no-cache\");\n\n        // get the writer\n        PrintWriter out = res.getWriter();\n\n        try {\n            rengine.render(template, rcontext, out);\n        }\n        catch (Exception e) {\n            throw new RuntimeException(\"Failed to render template \", e);\n        }\n\n    }","commit_id":"9f33cc3f542fed868c91b49b6d99642ece792c4e","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n     * Send a redirect so our Portal window ends up at the url, via javascript.\n     *\n     * @param url The redirect url\n     */\n    protected void sendPortalRedirect(HttpServletResponse res, String url)\n        throws IOException {\n        PortalRenderContext rcontext = startPageContext(\"\", null, null, null);\n        rcontext.put(\"redirectUrl\", url);\n        sendResponse(rcontext, res, \"portal-redirect\");\n    }","id":96667,"modified_method":"/**\n     * Send a redirect so our Portal window ends up at the url, via javascript.\n     *\n     * @param url The redirect url\n     */\n    protected void sendPortalRedirect(HttpServletResponse res, String url)\n        throws IOException {\n        PortalRenderContext rcontext = startPageContext(\"\", null, null, null);\n        rcontext.put(\"redirectUrl\", url);\n        sendResponse(rcontext, res, \"portal-redirect\", null);\n    }","commit_id":"9f33cc3f542fed868c91b49b6d99642ece792c4e","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void doGallery(HttpServletRequest req, HttpServletResponse res,\n                             Session session, String siteId, String pageId,\n                             String toolContextPath) throws ToolException, IOException {\n        // check to default site id\n        if (siteId == null) {\n            if (session.getUserId() == null) {\n                String forceLogin = req.getParameter(PARAM_FORCE_LOGIN);\n                if (forceLogin == null || \"yes\".equalsIgnoreCase(forceLogin)\n                    || \"true\".equalsIgnoreCase(forceLogin)) {\n                    doLogin(req, res, session, req.getPathInfo(), false);\n                    return;\n                }\n                siteId = ServerConfigurationService.getGatewaySiteId();\n            } else {\n                siteId = SiteService.getUserSiteId(session.getUserId());\n            }\n        }\n\n        // if no page id, see if there was a last page visited for this site\n        if (pageId == null) {\n            pageId = (String) session.getAttribute(ATTR_SITE_PAGE + siteId);\n        }\n\n        // find the site, for visiting\n        Site site = null;\n        try {\n            site = portalService.getSiteVisit(siteId);\n        }\n        catch (IdUnusedException e) {\n            doError(req, res, session, ERROR_GALLERY);\n            return;\n        }\n        catch (PermissionException e) {\n            // if not logged in, give them a chance\n            if (session.getUserId() == null) {\n                doLogin(req, res, session, req.getPathInfo(), false);\n            } else {\n                doError(req, res, session, ERROR_GALLERY);\n            }\n            return;\n        }\n\n        // find the page, or use the first page if pageId not found\n        SitePage page = site.getPage(pageId);\n        if (page == null) {\n            List pages = site.getOrderedPages();\n            if (!pages.isEmpty()) {\n                page = (SitePage) pages.get(0);\n            }\n        }\n        if (page == null) {\n            doError(req, res, session, ERROR_GALLERY);\n            return;\n        }\n\n        // store the last page visited\n        session.setAttribute(ATTR_SITE_PAGE + siteId, page.getId());\n\n        // form a context sensitive title\n        String title = ServerConfigurationService.getString(\"ui.service\")\n            + \" : \" + site.getTitle() + \" : \" + page.getTitle();\n\n        // start the response\n        String siteType = calcSiteType(siteId);\n        PortalRenderContext rcontext = startPageContext(siteType, title, site\n            .getSkin(), req);\n\n        // the 'little' top area\n        includeGalleryNav(rcontext, req, session, siteId, \"gallery\");\n\n        includeWorksite(rcontext, res, req, session, site, page, toolContextPath,\n            \"gallery\");\n\n        includeBottom(rcontext);\n\n        sendResponse(rcontext, res, \"gallery\");\n    }","id":96668,"modified_method":"protected void doGallery(HttpServletRequest req, HttpServletResponse res,\n                             Session session, String siteId, String pageId,\n                             String toolContextPath) throws ToolException, IOException {\n        // check to default site id\n        if (siteId == null) {\n            if (session.getUserId() == null) {\n                String forceLogin = req.getParameter(PARAM_FORCE_LOGIN);\n                if (forceLogin == null || \"yes\".equalsIgnoreCase(forceLogin)\n                    || \"true\".equalsIgnoreCase(forceLogin)) {\n                    doLogin(req, res, session, req.getPathInfo(), false);\n                    return;\n                }\n                siteId = ServerConfigurationService.getGatewaySiteId();\n            } else {\n                siteId = SiteService.getUserSiteId(session.getUserId());\n            }\n        }\n\n        // if no page id, see if there was a last page visited for this site\n        if (pageId == null) {\n            pageId = (String) session.getAttribute(ATTR_SITE_PAGE + siteId);\n        }\n\n        // find the site, for visiting\n        Site site = null;\n        try {\n            site = portalService.getSiteVisit(siteId);\n        }\n        catch (IdUnusedException e) {\n            doError(req, res, session, ERROR_GALLERY);\n            return;\n        }\n        catch (PermissionException e) {\n            // if not logged in, give them a chance\n            if (session.getUserId() == null) {\n                doLogin(req, res, session, req.getPathInfo(), false);\n            } else {\n                doError(req, res, session, ERROR_GALLERY);\n            }\n            return;\n        }\n\n        // find the page, or use the first page if pageId not found\n        SitePage page = site.getPage(pageId);\n        if (page == null) {\n            List pages = site.getOrderedPages();\n            if (!pages.isEmpty()) {\n                page = (SitePage) pages.get(0);\n            }\n        }\n        if (page == null) {\n            doError(req, res, session, ERROR_GALLERY);\n            return;\n        }\n\n        // store the last page visited\n        session.setAttribute(ATTR_SITE_PAGE + siteId, page.getId());\n\n        // form a context sensitive title\n        String title = ServerConfigurationService.getString(\"ui.service\")\n            + \" : \" + site.getTitle() + \" : \" + page.getTitle();\n\n        // start the response\n        String siteType = calcSiteType(siteId);\n        PortalRenderContext rcontext = startPageContext(siteType, title, site\n            .getSkin(), req);\n\n        // the 'little' top area\n        includeGalleryNav(rcontext, req, session, siteId, \"gallery\");\n\n        includeWorksite(rcontext, res, req, session, site, page, toolContextPath,\n            \"gallery\");\n\n        includeBottom(rcontext);\n\n        sendResponse(rcontext, res, \"gallery\", null);\n    }","commit_id":"9f33cc3f542fed868c91b49b6d99642ece792c4e","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void doNavLoginGallery(HttpServletRequest req,\n                                     HttpServletResponse res, Session session, String siteId)\n        throws IOException {\n        // start the response\n\n        PortalRenderContext rcontext = startPageContext(\"\", \"Login\", null, req);\n\n        includeGalleryLogin(rcontext, req, session, siteId);\n        // end the response\n        sendResponse(rcontext, res, \"gallery-login\");\n    }","id":96669,"modified_method":"protected void doNavLoginGallery(HttpServletRequest req,\n                                     HttpServletResponse res, Session session, String siteId)\n        throws IOException {\n        // start the response\n\n        PortalRenderContext rcontext = startPageContext(\"\", \"Login\", null, req);\n\n        includeGalleryLogin(rcontext, req, session, siteId);\n        // end the response\n        sendResponse(rcontext, res, \"gallery-login\", null);\n    }","commit_id":"9f33cc3f542fed868c91b49b6d99642ece792c4e","url":"https://github.com/sakaiproject/sakai"},{"original_method":"protected void includePageList(PortalRenderContext rcontext,\n                                  HttpServletRequest req, Session session, Site site, SitePage page,\n                                  String toolContextPath, String portalPrefix, boolean doPages, \n\t\t\t\t  boolean resetTools) throws IOException {\n        if (rcontext.uses(INCLUDE_PAGE_NAV)) {\n\n            boolean loggedIn = session.getUserId() != null;\n\n            String pageUrl = Web.returnUrl(req, \"/\" + portalPrefix + \"/\"\n                + Web.escapeUrl(portalService.getSiteEffectiveId(site)) + \"/page/\");\n\t    String toolUrl = Web.returnUrl(req, \"/\" + portalPrefix + \"/\"\n                + Web.escapeUrl(portalService.getSiteEffectiveId(site))) ;\n\t    if ( resetTools ) {\n\t\ttoolUrl = toolUrl + \"/tool-reset/\";\n\t    } else {\n\t\ttoolUrl = toolUrl + \"/tool/\";\n\t    }\n\t\t\n            String pagePopupUrl = Web.returnUrl(req, \"/page/\");\n            boolean showHelp = ServerConfigurationService.getBoolean(\n                \"display.help.menu\", true);\n            String iconUrl = site.getIconUrlFull();\n            boolean published = site.isPublished();\n            String type = site.getType();\n\n            rcontext.put(\"pageNavPublished\", Boolean.valueOf(published));\n            rcontext.put(\"pageNavType\", type);\n            rcontext.put(\"pageNavIconUrl\", iconUrl);\n            rcontext.put(\"pageNavSitToolsHead\", Web.escapeHtml(rb\n                .getString(\"sit.toolshead\")));\n\n            // order the pages based on their tools and the tool order for the\n            // site\n            // type\n            List pages = site.getOrderedPages();\n\n            // gsilver - counter for tool accesskey attributes of <a>\n            // int count = 0;\n\n            List l = new ArrayList();\n            for (Iterator i = pages.iterator(); i.hasNext();) {\n\n                SitePage p = (SitePage) i.next();\n                // check if current user has permission to see page\n                // we will draw page button if it have permission to see at least\n                List pTools = p.getTools();\n                Iterator iPt = pTools.iterator();\n\n                boolean allowPage = false;\n                while (iPt.hasNext()) {\n                    ToolConfiguration placement = (ToolConfiguration) iPt\n                        .next();\n\n                    boolean thisTool = portalService.allowTool(site, placement);\n                    if (thisTool) allowPage = true;\n                    // System.out.println(\" Allow Tool -\" + tool.getTitle() + \"\n                    // retval = \" + thisTool + \" page=\" + allowPage);\n                }\n\n                if (!allowPage) continue;\n\n               \tboolean current = (page!=null && p.getId().equals(page.getId()) && !p.isPopUp());\n                String pagerefUrl = pageUrl + Web.escapeUrl(p.getId());\n\n                if ( doPages || p.isPopUp() ) {\n                    Map m = new HashMap();\n\t\t    m.put(\"isPage\",Boolean.valueOf(true));\n               \t    m.put(\"current\", Boolean.valueOf(current));\n                    m.put(\"ispopup\", Boolean.valueOf(p.isPopUp()));\n                    m.put(\"pagePopupUrl\", pagePopupUrl);\n                    m.put(\"pageTitle\", Web.escapeHtml(p.getTitle()));\n                    m.put(\"jsPageTitle\", Web.escapeJavascript(p.getTitle()));\n                    m.put(\"pageId\", Web.escapeUrl(p.getId()));\n                    m.put(\"jsPageId\", Web.escapeJavascript(p.getId()));\n                    m.put(\"pagerefUrl\", pagerefUrl);\n                    l.add(m);\n\t\t    continue;\n\t\t}\n\n\t\t// Loop through the tools again and Unroll the tools\n                iPt = pTools.iterator();\n\n                while (iPt.hasNext()) {\n                    ToolConfiguration placement = (ToolConfiguration) iPt\n                        .next();\n\n                    String toolrefUrl = toolUrl + Web.escapeUrl(placement.getId());\n\n                    Map m = new HashMap();\n\t\t    m.put(\"isPage\",Boolean.valueOf(false));\n                    m.put(\"toolId\", Web.escapeUrl(placement.getId()));\n                    m.put(\"jsToolId\", Web.escapeJavascript(placement.getId()));\n                    m.put(\"toolTitle\", Web.escapeHtml(placement.getTitle()));\n                    m.put(\"jsToolTitle\", Web.escapeJavascript(placement.getTitle()));\n                    m.put(\"toolrefUrl\", toolrefUrl);\n                    l.add(m);\n                }\n\n            }\n            rcontext.put(\"pageNavTools\", l);\n\n            String helpUrl = ServerConfigurationService.getHelpUrl(null);\n            rcontext.put(\"pageNavShowHelp\", Boolean.valueOf(showHelp));\n            rcontext.put(\"pageNavHelpUrl\", helpUrl);\n\n            rcontext.put(\"pageNavSitContentshead\", Web.escapeHtml(rb\n                .getString(\"sit.contentshead\")));\n\n\t    // Handle Presense\n\t    boolean showPresence = ServerConfigurationService.getBoolean(\n                 \"display.users.present\", true);\n            String presenceUrl = Web.returnUrl(req, \"/presence/\"\n                + Web.escapeUrl(site.getId()));\n\n            rcontext.put(\"pageNavSitPresenceTitle\", Web.escapeHtml(rb\n                .getString(\"sit.presencetitle\")));\n            rcontext.put(\"pageNavSitPresenceFrameTitle\", Web.escapeHtml(rb\n                .getString(\"sit.presenceiframetit\")));\n            rcontext.put(\"pageNavShowPresenceLoggedIn\", Boolean\n                .valueOf(showPresence && loggedIn));\n            rcontext.put(\"pageNavPresenceUrl\", presenceUrl);\n        }\n\n    }","id":96670,"modified_method":"protected void includePageList(PortalRenderContext rcontext,\n                                  HttpServletRequest req, Session session, Site site, SitePage page,\n                                  String toolContextPath, String portalPrefix, boolean doPages, \n\t\t\t\t  boolean resetTools) throws IOException {\n        if (rcontext.uses(INCLUDE_PAGE_NAV)) {\n\n            boolean loggedIn = session.getUserId() != null;\n\n            String pageUrl = Web.returnUrl(req, \"/\" + portalPrefix + \"/\"\n                + Web.escapeUrl(portalService.getSiteEffectiveId(site)) + \"/page/\");\n\t    String toolUrl = Web.returnUrl(req, \"/\" + portalPrefix + \"/\"\n                + Web.escapeUrl(portalService.getSiteEffectiveId(site))) ;\n\t    if ( resetTools ) {\n\t\ttoolUrl = toolUrl + \"/tool-reset/\";\n\t    } else {\n\t\ttoolUrl = toolUrl + \"/tool/\";\n\t    }\n\t\t\n            String pagePopupUrl = Web.returnUrl(req, \"/page/\");\n            boolean showHelp = ServerConfigurationService.getBoolean(\n                \"display.help.menu\", true);\n            String iconUrl = site.getIconUrlFull();\n            boolean published = site.isPublished();\n            String type = site.getType();\n\n            rcontext.put(\"pageNavPublished\", Boolean.valueOf(published));\n            rcontext.put(\"pageNavType\", type);\n            rcontext.put(\"pageNavIconUrl\", iconUrl);\n            rcontext.put(\"pageNavSitToolsHead\", Web.escapeHtml(rb\n                .getString(\"sit.toolshead\")));\n\n            // order the pages based on their tools and the tool order for the\n            // site\n            // type\n            List pages = site.getOrderedPages();\n\n            // gsilver - counter for tool accesskey attributes of <a>\n            // int count = 0;\n\n            List l = new ArrayList();\n            for (Iterator i = pages.iterator(); i.hasNext();) {\n\n                SitePage p = (SitePage) i.next();\n                // check if current user has permission to see page\n                // we will draw page button if it have permission to see at least\n                List pTools = p.getTools();\n                Iterator iPt = pTools.iterator();\n\n                boolean allowPage = false;\n                while (iPt.hasNext()) {\n                    ToolConfiguration placement = (ToolConfiguration) iPt\n                        .next();\n\n                    boolean thisTool = portalService.allowTool(site, placement);\n                    if (thisTool) allowPage = true;\n                    // System.out.println(\" Allow Tool -\" + tool.getTitle() + \"\n                    // retval = \" + thisTool + \" page=\" + allowPage);\n                }\n\n                if (!allowPage) continue;\n\n               \tboolean current = (page!=null && p.getId().equals(page.getId()) && !p.isPopUp());\n                String pagerefUrl = pageUrl + Web.escapeUrl(p.getId());\n\n                if ( doPages || p.isPopUp() ) {\n                    Map m = new HashMap();\n\t\t    m.put(\"isPage\",Boolean.valueOf(true));\n               \t    m.put(\"current\", Boolean.valueOf(current));\n                    m.put(\"ispopup\", Boolean.valueOf(p.isPopUp()));\n                    m.put(\"pagePopupUrl\", pagePopupUrl);\n                    m.put(\"pageTitle\", Web.escapeHtml(p.getTitle()));\n                    m.put(\"jsPageTitle\", Web.escapeJavascript(p.getTitle()));\n                    m.put(\"pageId\", Web.escapeUrl(p.getId()));\n                    m.put(\"jsPageId\", Web.escapeJavascript(p.getId()));\n                    m.put(\"pageRefUrl\", pagerefUrl);\n                    l.add(m);\n\t\t    continue;\n\t\t}\n\n\t\t// Loop through the tools again and Unroll the tools\n                iPt = pTools.iterator();\n\n                while (iPt.hasNext()) {\n                    ToolConfiguration placement = (ToolConfiguration) iPt\n                        .next();\n\n                    String toolrefUrl = toolUrl + Web.escapeUrl(placement.getId());\n\n                    Map m = new HashMap();\n\t\t    m.put(\"isPage\",Boolean.valueOf(false));\n                    m.put(\"toolId\", Web.escapeUrl(placement.getId()));\n                    m.put(\"jsToolId\", Web.escapeJavascript(placement.getId()));\n                    m.put(\"toolTitle\", Web.escapeHtml(placement.getTitle()));\n                    m.put(\"jsToolTitle\", Web.escapeJavascript(placement.getTitle()));\n                    m.put(\"toolrefUrl\", toolrefUrl);\n                    l.add(m);\n                }\n\n            }\n            rcontext.put(\"pageNavTools\", l);\n\n            String helpUrl = ServerConfigurationService.getHelpUrl(null);\n            rcontext.put(\"pageNavShowHelp\", Boolean.valueOf(showHelp));\n            rcontext.put(\"pageNavHelpUrl\", helpUrl);\n\n            rcontext.put(\"pageNavSitContentshead\", Web.escapeHtml(rb\n                .getString(\"sit.contentshead\")));\n\n\t    // Handle Presense\n\t    boolean showPresence = ServerConfigurationService.getBoolean(\n                 \"display.users.present\", true);\n            String presenceUrl = Web.returnUrl(req, \"/presence/\"\n                + Web.escapeUrl(site.getId()));\n\n            rcontext.put(\"pageNavSitPresenceTitle\", Web.escapeHtml(rb\n                .getString(\"sit.presencetitle\")));\n            rcontext.put(\"pageNavSitPresenceFrameTitle\", Web.escapeHtml(rb\n                .getString(\"sit.presenceiframetit\")));\n            rcontext.put(\"pageNavShowPresenceLoggedIn\", Boolean\n                .valueOf(showPresence && loggedIn));\n            rcontext.put(\"pageNavPresenceUrl\", presenceUrl);\n        }\n\n    }","commit_id":"9f33cc3f542fed868c91b49b6d99642ece792c4e","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n    * Create a return that is appropriate for sending back an entity or a list of entities\n    * @param entityData an entity or List of entities\n    * @param continueProcessing true to continue normal processing\n    */\n   public ActionReturn(Object entityData, boolean continueProcessing) {\n      this.entityData = entityData;\n      this.continueProcessing = continueProcessing;\n   }","id":96671,"modified_method":"/**\n    * Create a return that is appropriate for sending back an entity\n    * @param entityData an entity\n    * @param format (optional) the format to return this data in (from {@link Formats}), e.g. Formats.XML\n    */\n   public ActionReturn(Object entityData, String format) {\n      this.entityData = entityData;\n      this.format = format;\n   }","commit_id":"c0330eeb2eb9e5f8f507697da1a4e5ef6a14b14b","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public ActionReturn(List<?> entitiesList, boolean continueProcessing) {\n      this.entitiesList = entitiesList;\n      this.continueProcessing = continueProcessing;\n   }","id":96672,"modified_method":"/**\n    * Create a return that is appropriate for sending back a list of entities\n    * @param entityData a List of entities (can be empty)\n    * @param format (optional) the format to return this data in (from {@link Formats}), e.g. Formats.XML\n    */\n   public ActionReturn(List<?> entitiesList, String format) {\n      this.entitiesList = entitiesList;\n      this.format = format;\n   }","commit_id":"c0330eeb2eb9e5f8f507697da1a4e5ef6a14b14b","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public Object doubleAction(EntityView view) {\n      MyEntity me = (MyEntity) getEntity(view.getEntityReference());\n      MyEntity togo = me.copy();\n      togo.setNumber( togo.getNumber() * 2 );\n      return new ActionReturn(togo, true);\n   }","id":96673,"modified_method":"public Object doubleAction(EntityView view) {\n      MyEntity me = (MyEntity) getEntity(view.getEntityReference());\n      MyEntity togo = me.copy();\n      togo.setNumber( togo.getNumber() * 2 );\n      return new ActionReturn(togo, null);\n   }","commit_id":"c0330eeb2eb9e5f8f507697da1a4e5ef6a14b14b","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n    * Set the custom actions for this prefix\n    * @param prefix an entity prefix\n    * @param actions a map of action -> {@link CustomAction}\n    */\n   public void setCustomActions(String prefix, Map<String,CustomAction> actions) {\n      Map<String,CustomAction> cas = new HashMap<String, CustomAction>();\n      StringBuilder sb = new StringBuilder();\n      for (Entry<String, CustomAction> ca : actions.entrySet()) {\n         CustomAction action = ca.getValue();\n         if (action == null || ca.getKey() == null) {\n            throw new IllegalArgumentException(\"custom action object and action key must not be null\");\n         }\n         if (reservedActions.contains(ca.getKey().toLowerCase())) {\n            throw new IllegalArgumentException(ca.getKey() + \" is a reserved word and cannot be used as a custom action key \"\n            \t\t+ \", reserved words include: describe, new, edit, delete\");\n         }\n         if (sb.length() > 0) {\n            sb.append(\", \");\n         }\n         sb.append(ca.getValue().toString());\n         cas.put(ca.getKey(), action.copy()); // make a copy to avoid holding objects from another ClassLoader\n      }\n      entityActions.put(prefix, actions);\n      log.info(\"Registered \"+actions.size()+\" custom actions for entity prefix (\"+prefix+\"): \" + sb.toString());\n   }","id":96674,"modified_method":"/**\n    * Set the custom actions for this prefix\n    * @param prefix an entity prefix\n    * @param actions a map of action -> {@link CustomAction}\n    */\n   public void setCustomActions(String prefix, Map<String,CustomAction> actions) {\n      Map<String,CustomAction> cas = new HashMap<String, CustomAction>();\n      StringBuilder sb = new StringBuilder();\n      for (Entry<String, CustomAction> ca : actions.entrySet()) {\n         CustomAction action = ca.getValue();\n         if (action == null || ca.getKey() == null || \"\".equals(ca.getKey())) {\n            throw new IllegalArgumentException(\"custom action object and action key must not be null\");\n         }\n         if (reservedActions.contains(ca.getKey().toLowerCase())) {\n            StringBuilder rsb = new StringBuilder();\n            for (String reserved : reservedActions) {\n               if (rsb.length() > 0) {\n                  rsb.append(\", \");\n               }\n               rsb.append(reserved);\n            }\n            throw new IllegalArgumentException(ca.getKey() + \" is a reserved word and cannot be used as a custom action key \"\n            \t\t+ \", reserved words include: \" + rsb);\n         }\n         if (sb.length() > 0) {\n            sb.append(\", \");\n         }\n         sb.append(ca.getValue().toString());\n         cas.put(ca.getKey(), action.copy()); // make a copy to avoid holding objects from another ClassLoader\n      }\n      entityActions.put(prefix, actions);\n      log.info(\"Registered \"+actions.size()+\" custom actions for entity prefix (\"+prefix+\"): \" + sb.toString());\n   }","commit_id":"c0330eeb2eb9e5f8f507697da1a4e5ef6a14b14b","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public ActionReturn handleCustomActionRequest(ActionsExecutable actionProvider, EntityView entityView, String action,\n         HttpServletRequest request, HttpServletResponse response) {\n      if (actionProvider == null || entityView == null || action == null || request == null || response == null) {\n         throw new IllegalArgumentException(\"actionProvider and view and action and request and response must not be null\");\n      }\n      // get the action params out of the request first\n      Map<String, Object> actionParams = RequestStorageImpl.getRequestValues(request);\n      EntityReference ref = entityView.getEntityReference();\n      OutputStream outputStream = null;\n      try {\n         outputStream = response.getOutputStream();\n      } catch (IOException e1) {\n         throw new RuntimeException(\"Failed getting response output stream\");\n      }\n      ActionReturn actionReturn = handleCustomActionExecution(actionProvider, ref, action, actionParams, outputStream);\n      // now process the return into the request or response as needed\n      if (actionReturn != null) {\n         if (actionReturn.output != null || actionReturn.outputString != null) {\n            if (actionReturn.output == null) {\n               // write the string into the outputstream\n               try {\n                  outputStream.write( actionReturn.outputString.getBytes() );\n               } catch (IOException e) {\n                  throw new RuntimeException(\"Failed encoding for outputstring: \" + actionReturn.outputString);\n               }\n            }\n            // now set the encoding, mimetype, and outputstream into the response\n            response.setCharacterEncoding(actionReturn.encoding);\n            response.setContentType(actionReturn.mimeType);\n            actionReturn.continueProcessing = false;\n         }\n         // other returns require no extra work here\n      }\n      return actionReturn;\n   }","id":96675,"modified_method":"public ActionReturn handleCustomActionRequest(ActionsExecutable actionProvider, EntityView entityView, String action,\n         HttpServletRequest request, HttpServletResponse response) {\n      if (actionProvider == null || entityView == null || action == null || request == null || response == null) {\n         throw new IllegalArgumentException(\"actionProvider and view and action and request and response must not be null\");\n      }\n      // get the action params out of the request first\n      Map<String, Object> actionParams = RequestStorageImpl.getRequestValues(request);\n      EntityReference ref = entityView.getEntityReference();\n      OutputStream outputStream = null;\n      try {\n         outputStream = response.getOutputStream();\n      } catch (IOException e1) {\n         throw new RuntimeException(\"Failed getting response output stream\");\n      }\n      ActionReturn actionReturn = handleCustomActionExecution(actionProvider, ref, action, actionParams, outputStream);\n      // now process the return into the request or response as needed\n      if (actionReturn != null) {\n         if (actionReturn.output != null || actionReturn.outputString != null) {\n            if (actionReturn.output == null) {\n               // write the string into the response outputstream\n               try {\n                  outputStream.write( actionReturn.outputString.getBytes() );\n               } catch (IOException e) {\n                  throw new RuntimeException(\"Failed encoding for outputstring: \" + actionReturn.outputString);\n               }\n               actionReturn.output = outputStream;\n            }\n            // now set the encoding, mimetype into the response\n            actionReturn.format = entityView.getExtension();\n            if (actionReturn.encoding == null || actionReturn.mimeType == null) {\n               // use default if not set\n               if (actionReturn.format == null) {\n                  actionReturn.format = Formats.XML;\n               }\n               RequestUtils.setResponseEncoding(actionReturn.format, response);\n            } else {\n               response.setCharacterEncoding(actionReturn.encoding);\n               response.setContentType(actionReturn.mimeType);\n            }\n         }\n         // other returns require no extra work here\n      }\n      return actionReturn;\n   }","commit_id":"c0330eeb2eb9e5f8f507697da1a4e5ef6a14b14b","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n    * Handles the execution of custom actions based on a request for execution\n    * @throws IllegalArgumentException if any args are invalid\n    * @throws UnsupportedOperationException if the action is not valid for this prefix\n    */\n   public ActionReturn handleCustomActionExecution(ActionsExecutable actionProvider, EntityReference ref, String action, \n         Map<String, Object> actionParams, OutputStream outputStream) {\n      if (actionProvider == null || ref == null || action == null || \"\".equals(action)) {\n         throw new IllegalArgumentException(\"actionProvider and ref and action must not be null\");\n      }\n      if (outputStream == null) {\n         // create an outputstream to hold the data\n         outputStream = new ByteArrayOutputStream();\n      }\n      String prefix = ref.getPrefix();\n      CustomAction customAction = getCustomAction(prefix, action);\n      if (customAction == null) {\n         throw new UnsupportedOperationException(\"Invalid action (\"+action+\"), this action is not a supported custom action for prefix (\"+prefix+\")\");\n      }\n      ActionReturn actionReturn = null;\n      // TODO handle action methods?\n      // execute the action\n      Object result = actionProvider.executeActions(new EntityView(ref, null, null), action, actionParams, outputStream);\n      if (result != null) {\n         // package up the result in the ActionResult\n         Class<?> resultClass = result.getClass();\n         if (ActionReturn.class.isAssignableFrom(resultClass)) {\n            actionReturn = (ActionReturn) result;\n         } else if (OutputStream.class.isAssignableFrom(resultClass)) {\n            actionReturn = new ActionReturn(outputStream);\n         } else if (String.class.isAssignableFrom(resultClass)) {\n            actionReturn = new ActionReturn((String) result);\n         } else if (List.class.isAssignableFrom(resultClass)) {\n            actionReturn = new ActionReturn((List<?>) result, false);\n         } else {\n            // assume this is an entity object\n            actionReturn = new ActionReturn(result, false);\n         }\n      }\n      return actionReturn;\n   }","id":96676,"modified_method":"/**\n    * Handles the execution of custom actions based on a request for execution\n    * @throws IllegalArgumentException if any args are invalid\n    * @throws UnsupportedOperationException if the action is not valid for this prefix\n    */\n   public ActionReturn handleCustomActionExecution(ActionsExecutable actionProvider, EntityReference ref, String action, \n         Map<String, Object> actionParams, OutputStream outputStream) {\n      if (actionProvider == null || ref == null || action == null || \"\".equals(action)) {\n         throw new IllegalArgumentException(\"actionProvider and ref and action must not be null\");\n      }\n      if (outputStream == null) {\n         // create an outputstream to hold the data\n         outputStream = new ByteArrayOutputStream();\n      }\n      String prefix = ref.getPrefix();\n      CustomAction customAction = getCustomAction(prefix, action);\n      if (customAction == null) {\n         throw new UnsupportedOperationException(\"Invalid action (\"+action+\"), this action is not a supported custom action for prefix (\"+prefix+\")\");\n      }\n      ActionReturn actionReturn = null;\n      // TODO handle action methods?\n      // execute the action\n      Object result = actionProvider.executeActions(new EntityView(ref, null, null), action, actionParams, outputStream);\n      if (result != null) {\n         // package up the result in the ActionResult\n         Class<?> resultClass = result.getClass();\n         if (ActionReturn.class.isAssignableFrom(resultClass)) {\n            actionReturn = (ActionReturn) result;\n         } else if (OutputStream.class.isAssignableFrom(resultClass)) {\n            actionReturn = new ActionReturn(outputStream);\n         } else if (String.class.isAssignableFrom(resultClass)) {\n            actionReturn = new ActionReturn((String) result);\n         } else if (List.class.isAssignableFrom(resultClass)) {\n            actionReturn = new ActionReturn((List<?>) result, null);\n         } else {\n            // assume this is an entity object\n            actionReturn = new ActionReturn(result, null);\n         }\n      }\n      return actionReturn;\n   }","commit_id":"c0330eeb2eb9e5f8f507697da1a4e5ef6a14b14b","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n    * Test method for {@link org.sakaiproject.entitybroker.impl.EntityActionsManager#handleCustomActionRequest(org.sakaiproject.entitybroker.entityprovider.capabilities.ActionsExecutable, org.sakaiproject.entitybroker.EntityView, java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)}.\n    */\n   public void testHandleCustomActionRequest() {\n      //TODO fail(\"Not yet implemented\");\n   }","id":96677,"modified_method":"/**\n    * Test method for {@link org.sakaiproject.entitybroker.impl.EntityActionsManager#handleCustomActionRequest(org.sakaiproject.entitybroker.entityprovider.capabilities.ActionsExecutable, org.sakaiproject.entitybroker.EntityView, java.lang.String, javax.servlet.http.HttpServletRequest, javax.servlet.http.HttpServletResponse)}.\n    */\n   public void testHandleCustomActionRequest() {\n      MockEBHttpServletRequest request = null;\n      MockHttpServletResponse res = null;\n      ActionsEntityProviderMock actionProvider = td.entityProviderA1;\n      String action = null;\n      String URL = null;\n      ActionReturn actionReturn = null;\n\n      // double\n      action = \"double\";\n      URL = TestData.REFA1 + \"/\" + action;\n      MyEntity me = (MyEntity) actionProvider.getEntity( new EntityReference(TestData.REFA1) );\n      int num = me.getNumber();\n      request = new MockEBHttpServletRequest(\"GET\", URL);\n      res = new MockHttpServletResponse();\n      actionReturn = entityActionsManager.handleCustomActionRequest(actionProvider, \n            new EntityView(new EntityReference(URL), EntityView.VIEW_SHOW, null), action, request, res);\n      assertEquals(HttpServletResponse.SC_OK, res.getStatus());\n      assertNotNull(actionReturn);\n      assertNotNull(actionReturn.entityData);\n      MyEntity doubleMe = (MyEntity) actionReturn.entityData;\n      assertEquals(doubleMe.getNumber(), num * 2);\n      assertEquals(me.getId(), doubleMe.getId());\n\n      // xxx\n      action = \"xxx\";\n      URL = TestData.REFA1 + \"/\" + action;\n      MyEntity me1 = (MyEntity) actionProvider.getEntity( new EntityReference(TestData.REFA1) );\n      assertFalse(\"xxx\".equals(me1.extra));\n      assertFalse(\"xxx\".equals(me1.getStuff()));\n      actionReturn = entityActionsManager.handleCustomActionRequest(actionProvider, \n            new EntityView(new EntityReference(URL), EntityView.VIEW_EDIT, null), action, request, res);\n      assertNull(actionReturn);\n      MyEntity xxxMe = (MyEntity) actionProvider.getEntity( new EntityReference(TestData.REFA1) );\n      assertEquals(me1.getId(), xxxMe.getId());\n      assertTrue(\"xxx\".equals(xxxMe.extra));\n      assertTrue(\"xxx\".equals(xxxMe.getStuff()));\n\n      // clear\n      action = \"clear\";\n      URL = TestData.SPACEA1 + \"/\" + action;\n      assertEquals(2, actionProvider.myEntities.size());\n      actionReturn = entityActionsManager.handleCustomActionRequest(actionProvider, \n            new EntityView(new EntityReference(URL), EntityView.VIEW_NEW, null), action, request, res);\n      assertEquals(0, actionProvider.myEntities.size());\n\n      // exceptions\n      try {\n         entityActionsManager.handleCustomActionRequest(actionProvider, null, action, request, res);\n         fail(\"should have thrown exeception\");\n      } catch (IllegalArgumentException e) {\n         assertNotNull(e.getMessage());\n      }\n   }","commit_id":"c0330eeb2eb9e5f8f507697da1a4e5ef6a14b14b","url":"https://github.com/sakaiproject/sakai"},{"original_method":"public String handleEntityAccess(HttpServletRequest req, HttpServletResponse res, String path) {\n      // get the path info if not set\n      if (path == null) {\n         path = req.getPathInfo();\n      }\n\n      String handledReference = null;\n\n      // special handling for empty path\n      if (path == null || \"\".equals(path) || \"/\".equals(path)) {\n         try {\n            res.sendRedirect( res.encodeRedirectURL(DIRECT + SLASH_DESCRIBE) );\n         } catch (IOException e) {\n            // this is not going to ever happen\n            throw new RuntimeException(\"Could not encode the redirect URL\");\n         }\n      } else {\n         // regular handling for direct URLs\n         if ( (SLASH_DESCRIBE).equals(path) \n               || path.startsWith(SLASH_DESCRIBE + EntityReference.PERIOD)) {\n            // handling for the describe all URL\n            String format = TemplateParseUtil.findExtension(path)[2];\n            if (format == null) {\n               format = Formats.HTML;\n            }\n            setResponseEncoding(format, res);\n            String output = entityDescriptionManager.makeDescribeAll(format);\n            try {\n               res.getWriter().write(output);\n            } catch (IOException e) {\n               throw new RuntimeException(\"Failed to put output into the response writer: \" + e.getMessage(), e);\n            }\n            res.setStatus(HttpServletResponse.SC_OK);\n            handledReference = EntityView.SEPARATOR+\"\";\n         } else {\n\n            EntityView view;\n            try {\n               view = entityBrokerManager.parseEntityURL(path);\n            } catch (IllegalArgumentException e) {\n               // indicates we could not parse the reference\n               throw new EntityException(\"Could not parse entity path (\"+path+\"): \" + e.getMessage(), path, HttpServletResponse.SC_BAD_REQUEST);\n            }\n\n            if (view == null) {\n               // no provider for this entity prefix\n               throw new EntityException( \"No entity provider could be found to handle the prefix in this path: \" + path, \n                     path, HttpServletResponse.SC_NOT_IMPLEMENTED );\n            } else if ( DESCRIBE.equals(view.getEntityReference().getId()) ) {\n               // Special handling for entity describe URLs\n               String format = TemplateParseUtil.findExtension(path)[2];\n               if (format == null) {\n                  format = Formats.HTML;\n               }\n               setResponseEncoding(format, res);\n               String entityId = req.getParameter(\"_id\");\n               if (entityId == null || \"\".equals(entityId)) {\n                  entityId = FAKE_ID;\n               }\n               String output = entityDescriptionManager.makeDescribeEntity(view.getEntityReference().getPrefix(), entityId, format);\n               try {\n                  res.getWriter().write(output);\n               } catch (IOException e) {\n                  throw new RuntimeException(\"Failed to put output into the response writer: \" + e.getMessage(), e);\n               }\n               res.setStatus(HttpServletResponse.SC_OK);\n               handledReference = view.getEntityReference().getSpaceReference() + SLASH_DESCRIBE;\n            } else {\n               // reference successfully parsed\n               String prefix = view.getEntityReference().getPrefix();\n\n               // check for custom action\n               CustomAction customAction = entityActionsManager.getCustomAction(prefix, view.getPathSegment(1));\n               if (customAction == null) {\n                  customAction = entityActionsManager.getCustomAction(prefix, view.getPathSegment(2));\n               }\n               if (customAction == null) {\n                  // check to see if the entity exists\n                  if (! entityBrokerManager.entityExists(view.getEntityReference()) ) {\n                     // invalid entity reference (entity does not exist)\n                     throw new EntityException( \"Attempted to access an entity URL path (\" + path + \") for an entity (\"\n                           + view.getEntityReference() + \") that does not exist\", \n                           view.getEntityReference()+\"\", HttpServletResponse.SC_NOT_FOUND );\n                  }\n               }\n               res.setStatus(HttpServletResponse.SC_OK); // other things can switch this later on\n\n               // check for extensions\n               if (view.getExtension() == null) {\n                  view.setExtension(Formats.HTML); // update the view\n               }\n               req.setAttribute(\"extension\", view.getExtension());\n\n               // store the current request and response\n               ((RequestGetterImpl) requestGetter).setRequest(req);\n               ((RequestGetterImpl) requestGetter).setResponse(res);\n               // set the request variables\n               requestStorage.setRequestValue(RequestStorage.ReservedKeys._requestEntityReference.name(), view.getEntityReference().toString());\n               requestStorage.setRequestValue(RequestStorage.ReservedKeys._requestOrigin.name(), RequestStorage.RequestOrigin.REST.name());\n               requestStorage.setRequestValue(RequestStorage.ReservedKeys._requestActive.name(), true);\n\n               // handle the before interceptor\n               RequestInterceptor interceptor = (RequestInterceptor) entityProviderManager.getProviderByPrefixAndCapability(prefix, RequestInterceptor.class);\n               if (interceptor != null) {\n                  interceptor.before(view, req, res);\n               }\n\n               // check for provider handling of this request\n               RequestHandler handler = (RequestHandler) entityProviderManager.getProviderByPrefixAndCapability(prefix, RequestHandler.class);\n               if (handler != null) {\n                  // provider is handling this request\n                  handleClassLoaderAccess(handler, req, res, view);\n               } else {\n                  // handle the request internally if possible\n\n                  if (customAction != null) {\n                     // handle the custom action\n                     // TODO\n                  }\n\n                  // identify the type of request (input or output) and the action (will be encoded in the viewKey)\n                  boolean output = false;\n                  String method = req.getMethod() == null ? \"GET\" : req.getMethod().toUpperCase().trim();\n                  // this fails because the original post gets lost therefore we are giving up on this for now\n//                // check to see if the original method value was set\n//                if (req.getAttribute(ORIGINAL_METHOD) != null) {\n//                method = (String) req.getAttribute(ORIGINAL_METHOD);\n//                }\n                  if (\"GET\".equals(method)) {\n                     output = true;\n                  } else {\n                     // identify the action based on the method type or \"_method\" attribute\n                     if (\"DELETE\".equals(method)) {\n                        view.setViewKey(EntityView.VIEW_DELETE);\n                     } else if (\"PUT\".equals(method)) {\n                        view.setViewKey(EntityView.VIEW_EDIT);\n                     } else if (\"POST\".equals(method)) {\n                        String _method = req.getParameter(POST_METHOD);\n                        if (_method == null) {\n                           // this better be a create request\n                           view.setViewKey(EntityView.VIEW_NEW);\n                        } else {\n                           _method = _method.toUpperCase().trim();\n                           if (\"DELETE\".equals(_method)) {\n                              view.setViewKey(EntityView.VIEW_DELETE);\n                           } else if (\"PUT\".equals(_method)) {\n                              view.setViewKey(EntityView.VIEW_EDIT);\n                           } else {\n                              throw new EntityException(\"Unable to handle POST request with _method, unknown method (only PUT/DELETE allowed): \" + _method, \n                                    view.getEntityReference()+\"\", HttpServletResponse.SC_BAD_REQUEST);                        \n                           }\n                        }\n                     } else {\n                        throw new EntityException(\"Unable to handle request method, unknown method (only GET/POST/PUT/DELETE allowed): \" + method, \n                              view.getEntityReference()+\"\", HttpServletResponse.SC_BAD_REQUEST);\n                     }\n\n                     // check that the request is valid (edit and delete require an entity id)\n                     if ( (EntityView.VIEW_EDIT.equals(view.getViewKey()) || EntityView.VIEW_DELETE.equals(view.getViewKey()) )\n                           && view.getEntityReference().getId() == null) {\n                        throw new EntityException(\"Unable to handle entity (\"+prefix+\") edit or delete request without entity id, url=\" \n                              + view.getOriginalEntityUrl(), \n                              view.getEntityReference()+\"\", HttpServletResponse.SC_BAD_REQUEST);\n                     }\n                  }\n\n                  boolean handled = false;\n                  try {\n                     if (output) {\n                        // output request\n                        Outputable outputable = (Outputable) entityProviderManager.getProviderByPrefixAndCapability(prefix, Outputable.class);\n                        if (outputable != null) {\n                           if ( ReflectUtil.contains(outputable.getHandledOutputFormats(), view.getExtension()) ) {\n                              // we are handling this type of format for this entity\n                              String format = view.getExtension();\n                              setResponseEncoding(format, res);\n\n                              // get the entities to output\n                              Search search = makeSearchFromRequest(req);\n                              List<?> entities = entityBrokerManager.fetchEntityList(view.getEntityReference(), search);\n                              OutputStream outputStream = null;\n                              try {\n                                 outputStream = res.getOutputStream();\n                              } catch (IOException e) {\n                                 throw new RuntimeException(\"Failed to get output stream from response: \" + view.getEntityReference(), e);\n                              }\n\n                              OutputFormattable formattable = (OutputFormattable) entityProviderManager.getProviderByPrefixAndCapability(prefix, OutputFormattable.class);\n                              if (formattable == null) {\n                                 // handle internally or fail\n                                 entityEncodingManager.internalOutputFormatter(view.getEntityReference(), view.getExtension(), entities, outputStream, view);\n                              } else {\n                                 // use provider's formatter\n                                 formattable.formatOutput(view.getEntityReference(), view.getExtension(), entities, outputStream);\n                              }\n                              res.setStatus(HttpServletResponse.SC_OK);\n                              handled = true;\n                           } else {\n                              // will not handle this format type\n                              throw new EntityException( \"Will not handle output request for format  \"+view.getExtension()+\" for this path (\" \n                                    + path + \") for prefix (\" + prefix + \") for entity (\" + view.getEntityReference() + \")\", \n                                    view.getEntityReference()+\"\", HttpServletResponse.SC_METHOD_NOT_ALLOWED );\n                           }\n                        }\n                     } else {\n                        // input request\n                        if (EntityView.VIEW_DELETE.equals(view.getViewKey())) {\n                           // delete request\n                           Deleteable deleteable = (Deleteable) entityProviderManager.getProviderByPrefixAndCapability(prefix, Deleteable.class);\n                           if (deleteable != null) {\n                              deleteable.deleteEntity(view.getEntityReference());\n                              res.setStatus(HttpServletResponse.SC_NO_CONTENT);\n                              handled = true;\n                           }\n                        } else {\n                           // save request\n                           Inputable inputable = (Inputable) entityProviderManager.getProviderByPrefixAndCapability(prefix, Inputable.class);\n                           if (inputable != null) {\n                              if ( ReflectUtil.contains(inputable.getHandledInputFormats(), view.getExtension()) ) {\n                                 // we are handling this type of format for this entity\n                                 Object entity = null;\n                                 InputStream inputStream = null;\n                                 try {\n                                    inputStream = req.getInputStream();\n                                 } catch (IOException e) {\n                                    throw new RuntimeException(\"Failed to get output stream from response: \" + view.getEntityReference(), e);\n                                 }\n\n                                 InputTranslatable translatable = (InputTranslatable) entityProviderManager.getProviderByPrefixAndCapability(prefix, InputTranslatable.class);\n                                 if (translatable == null) {\n                                    // use internal translators or fail\n                                    entity = entityEncodingManager.internalInputTranslator(view.getEntityReference(), \n                                          view.getExtension(), inputStream, req);\n                                 } else {\n                                    // use provider's translator\n                                    entity = translatable.translateFormattedData(view.getEntityReference(), \n                                          view.getExtension(), inputStream);\n                                 }\n\n                                 if (entity == null) {\n                                    throw new EntityException(\"Unable to save entity (\"+view.getEntityReference()+\"), entity object was null\", \n                                          view.toString(), HttpServletResponse.SC_BAD_REQUEST);\n                                 } else {\n                                    if (EntityView.VIEW_NEW.equals(view.getViewKey())) {\n                                       String createdId = inputable.createEntity(view.getEntityReference(), entity);\n                                       view.setEntityReference( new EntityReference(prefix, createdId) ); // update the entity view\n                                       res.setHeader(EntityRequestHandler.HEADER_ENTITY_ID, createdId);\n                                       res.setStatus(HttpServletResponse.SC_CREATED);\n                                    } else if (EntityView.VIEW_EDIT.equals(view.getViewKey())) {\n                                       inputable.updateEntity(view.getEntityReference(), entity);\n                                       res.setStatus(HttpServletResponse.SC_NO_CONTENT);\n                                    } else {\n                                       throw new EntityException(\"Unable to handle entity input (\"+view.getEntityReference()+\"), \" +\n                                             \"action was not understood: \" + view.getViewKey(), \n                                             view.getEntityReference()+\"\", HttpServletResponse.SC_BAD_REQUEST);\n                                    }\n                                    // return the location of this updated or created entity (without any extension)\n                                    res.setHeader(EntityRequestHandler.HEADER_ENTITY_URL, view.getEntityURL(EntityView.VIEW_SHOW, null));\n                                    res.setHeader(EntityRequestHandler.HEADER_ENTITY_REFERENCE, view.getEntityReference().toString());\n                                    handled = true;\n                                 }\n                              } else {\n                                 // will not handle this format type\n                                 throw new EntityException( \"Will not handle input request for format  \"+view.getExtension()+\" for this path (\" \n                                       + path + \") for prefix (\" + prefix + \") for entity (\" + view.getEntityReference().toString() + \")\", \n                                       view.getEntityReference()+\"\", HttpServletResponse.SC_METHOD_NOT_ALLOWED );\n                              }\n                           }\n                        }\n                     }\n                  } catch (IllegalArgumentException e) {\n                     // translate IAE into EE - bad request\n                     throw new EntityException(\"IllegalArgumentException: Unable to handle \" + (output ? \"output\" : \"input\") + \" request url (\"\n                           + view.getOriginalEntityUrl()+\"), \" + e.getMessage(),\n                           view.getEntityReference()+\"\", HttpServletResponse.SC_BAD_REQUEST);        \n                  } catch (IllegalStateException e) {\n                     // translate ISE into EE - internal server error\n                     throw new EntityException(\"IllegalStateException: Unable to handle \" + (output ? \"output\" : \"input\") + \" request url (\"\n                           + view.getOriginalEntityUrl()+\"), \" + e.getMessage(),\n                           view.getEntityReference()+\"\", HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n                  }\n\n                  if (! handled) {\n                     // default handling, send to the access provider if there is one\n                     handleAccessProvider(view, req, res);\n                  }\n               }\n               handledReference = view.getEntityReference().toString();\n               requestStorage.setRequestValue(RequestStorage.ReservedKeys._requestEntityReference.name(), handledReference);\n\n               // handle the after interceptor\n               if (interceptor != null) {\n                  interceptor.after(view, req, res);\n               }\n\n               // clear the request data\n               ((RequestGetterImpl) requestGetter).setRequest(null);\n               ((RequestGetterImpl) requestGetter).setResponse(null);\n               requestStorage.reset();\n            }\n         }\n      }\n      return handledReference;\n   }","id":96678,"modified_method":"public String handleEntityAccess(HttpServletRequest req, HttpServletResponse res, String path) {\n      // get the path info if not set\n      if (path == null) {\n         path = req.getPathInfo();\n      }\n\n      String handledReference = null;\n\n      // special handling for empty path\n      if (path == null || \"\".equals(path) || \"/\".equals(path)) {\n         try {\n            res.sendRedirect( res.encodeRedirectURL(DIRECT + SLASH_DESCRIBE) );\n         } catch (IOException e) {\n            // this is not going to ever happen\n            throw new RuntimeException(\"Could not encode the redirect URL\");\n         }\n      } else {\n         // regular handling for direct URLs\n         if ( (SLASH_DESCRIBE).equals(path) \n               || path.startsWith(SLASH_DESCRIBE + EntityReference.PERIOD)) {\n            // handling for the describe all URL\n            String format = TemplateParseUtil.findExtension(path)[2];\n            if (format == null) {\n               format = Formats.HTML;\n            }\n            RequestUtils.setResponseEncoding(format, res);\n            String output = entityDescriptionManager.makeDescribeAll(format);\n            try {\n               res.getWriter().write(output);\n            } catch (IOException e) {\n               throw new RuntimeException(\"Failed to put output into the response writer: \" + e.getMessage(), e);\n            }\n            res.setStatus(HttpServletResponse.SC_OK);\n            handledReference = EntityView.SEPARATOR+\"\";\n         } else {\n\n            EntityView view;\n            try {\n               view = entityBrokerManager.parseEntityURL(path);\n            } catch (IllegalArgumentException e) {\n               // indicates we could not parse the reference\n               throw new EntityException(\"Could not parse entity path (\"+path+\"): \" + e.getMessage(), path, HttpServletResponse.SC_BAD_REQUEST);\n            }\n\n            if (view == null) {\n               // no provider for this entity prefix\n               throw new EntityException( \"No entity provider could be found to handle the prefix in this path: \" + path, \n                     path, HttpServletResponse.SC_NOT_IMPLEMENTED );\n            } else if ( DESCRIBE.equals(view.getEntityReference().getId()) ) {\n               // Special handling for entity describe URLs\n               String format = TemplateParseUtil.findExtension(path)[2];\n               if (format == null) {\n                  format = Formats.HTML;\n               }\n               RequestUtils.setResponseEncoding(format, res);\n               String entityId = req.getParameter(\"_id\");\n               if (entityId == null || \"\".equals(entityId)) {\n                  entityId = FAKE_ID;\n               }\n               String output = entityDescriptionManager.makeDescribeEntity(view.getEntityReference().getPrefix(), entityId, format);\n               try {\n                  res.getWriter().write(output);\n               } catch (IOException e) {\n                  throw new RuntimeException(\"Failed to put output into the response writer: \" + e.getMessage(), e);\n               }\n               res.setStatus(HttpServletResponse.SC_OK);\n               handledReference = view.getEntityReference().getSpaceReference() + SLASH_DESCRIBE;\n            } else {\n               // reference successfully parsed\n               String prefix = view.getEntityReference().getPrefix();\n\n               // check for custom action\n               CustomAction customAction = entityActionsManager.getCustomAction(prefix, view.getPathSegment(1));\n               if (customAction == null) {\n                  customAction = entityActionsManager.getCustomAction(prefix, view.getPathSegment(2));\n               }\n               if (customAction == null) {\n                  // check to see if the entity exists\n                  if (! entityBrokerManager.entityExists(view.getEntityReference()) ) {\n                     // invalid entity reference (entity does not exist)\n                     throw new EntityException( \"Attempted to access an entity URL path (\" + path + \") for an entity (\"\n                           + view.getEntityReference() + \") that does not exist\", \n                           view.getEntityReference()+\"\", HttpServletResponse.SC_NOT_FOUND );\n                  }\n               }\n               res.setStatus(HttpServletResponse.SC_OK); // other things can switch this later on\n\n               // check for extensions\n               if (view.getExtension() == null) {\n                  view.setExtension(Formats.HTML); // update the view\n               }\n               req.setAttribute(\"extension\", view.getExtension());\n\n               // store the current request and response\n               ((RequestGetterImpl) requestGetter).setRequest(req);\n               ((RequestGetterImpl) requestGetter).setResponse(res);\n               // set the request variables\n               requestStorage.setRequestValue(RequestStorage.ReservedKeys._requestEntityReference.name(), view.getEntityReference().toString());\n               requestStorage.setRequestValue(RequestStorage.ReservedKeys._requestOrigin.name(), RequestStorage.RequestOrigin.REST.name());\n               requestStorage.setRequestValue(RequestStorage.ReservedKeys._requestActive.name(), true);\n\n               // handle the before interceptor\n               RequestInterceptor interceptor = (RequestInterceptor) entityProviderManager.getProviderByPrefixAndCapability(prefix, RequestInterceptor.class);\n               if (interceptor != null) {\n                  interceptor.before(view, req, res);\n               }\n\n               // check for provider handling of this request\n               RequestHandler handler = (RequestHandler) entityProviderManager.getProviderByPrefixAndCapability(prefix, RequestHandler.class);\n               if (handler != null) {\n                  // provider is handling this request\n                  handleClassLoaderAccess(handler, req, res, view);\n               } else {\n                  // handle the request internally if possible\n\n                  // identify the type of request (input or output) and the action (will be encoded in the viewKey)\n                  boolean output = false;\n                  String method = req.getMethod() == null ? \"GET\" : req.getMethod().toUpperCase().trim();\n                  // this fails because the original post gets lost therefore we are giving up on this for now\n//                // check to see if the original method value was set\n//                if (req.getAttribute(ORIGINAL_METHOD) != null) {\n//                method = (String) req.getAttribute(ORIGINAL_METHOD);\n//                }\n                  if (\"GET\".equals(method)) {\n                     output = true;\n                  } else {\n                     // identify the action based on the method type or \"_method\" attribute\n                     if (\"DELETE\".equals(method)) {\n                        view.setViewKey(EntityView.VIEW_DELETE);\n                     } else if (\"PUT\".equals(method)) {\n                        view.setViewKey(EntityView.VIEW_EDIT);\n                     } else if (\"POST\".equals(method)) {\n                        String _method = req.getParameter(EntityRequestHandler.COMPENSATE_METHOD);\n                        if (_method == null) {\n                           if (view.getEntityReference().getId() == null) {\n                              // this better be a create request or list post\n                              view.setViewKey(EntityView.VIEW_NEW);\n                           } else {\n                              // this could be an edit\n                              view.setViewKey(EntityView.VIEW_EDIT);\n                           }\n                        } else {\n                           _method = _method.toUpperCase().trim();\n                           if (\"DELETE\".equals(_method)) {\n                              view.setViewKey(EntityView.VIEW_DELETE);\n                           } else if (\"PUT\".equals(_method)) {\n                              if (view.getEntityReference().getId() == null) {\n                                 // this should be a modification of a list\n                                 view.setViewKey(EntityView.VIEW_NEW);\n                              } else {\n                                 // this better be an edit of an entity\n                                 view.setViewKey(EntityView.VIEW_EDIT);\n                              }\n                           } else {\n                              throw new EntityException(\"Unable to handle POST request with _method, unknown method (only PUT/DELETE allowed): \" + _method, \n                                    view.getEntityReference()+\"\", HttpServletResponse.SC_BAD_REQUEST);                        \n                           }\n                        }\n                     } else {\n                        throw new EntityException(\"Unable to handle request method, unknown method (only GET/POST/PUT/DELETE allowed): \" + method, \n                              view.getEntityReference()+\"\", HttpServletResponse.SC_BAD_REQUEST);\n                     }\n\n                     // check that the request is valid (delete requires an entity id)\n                     if ( EntityView.VIEW_DELETE.equals(view.getViewKey()) \n                           && view.getEntityReference().getId() == null) {\n                        throw new EntityException(\"Unable to handle entity (\"+prefix+\") delete request without entity id, url=\" \n                              + view.getOriginalEntityUrl(), \n                              view.getEntityReference()+\"\", HttpServletResponse.SC_BAD_REQUEST);\n                     }\n                  }\n\n                  boolean handled = false;\n                  // PROCESS CUSTOM ACTIONS\n                  ActionReturn actionReturn = null;\n                  if (customAction != null) {\n                     // handle the custom action\n                     ActionsExecutable actionProvider = entityProviderManager.getProviderByPrefixAndCapability(prefix, ActionsExecutable.class);\n                     if (actionProvider == null) {\n                        throw new IllegalStateException(\"The provider for prefix (\"+prefix+\") cannot handle custom actions\");\n                     }\n                     actionReturn = entityActionsManager.handleCustomActionRequest(actionProvider, view, customAction.action, req, res);\n                     if (actionReturn == null \n                           || actionReturn.output != null) {\n                        // custom action processing complete\n                        res.setStatus(HttpServletResponse.SC_OK);\n                        handled = true;\n                     } else {\n                        // if the custom action returned entity data then we will encode it for output\n                        if (actionReturn.entitiesList == null\n                              && actionReturn.entityData == null) {\n                           handled = true;\n                        } else {\n                           // there is entity data to return\n                           output = true;\n                           handled = false;\n                        }\n                     }\n                  }\n\n                  if (!handled) {\n                     // INTERNAL PROCESSING OF REQUEST\n                     try {\n                        if (output) {\n                           // output request\n                           Outputable outputable = (Outputable) entityProviderManager.getProviderByPrefixAndCapability(prefix, Outputable.class);\n                           if (outputable != null) {\n                              String format = view.getExtension();\n                              if (customAction != null) {\n                                 // override format from the custom action\n                                 if (actionReturn.format != null) {\n                                    format = actionReturn.format;\n                                 }\n                              }\n                              if ( ReflectUtil.contains(outputable.getHandledOutputFormats(), format) ) {\n                                 // we are handling this type of format for this entity\n                                 RequestUtils.setResponseEncoding(format, res);\n   \n                                 // get the entities to output\n                                 List<?> entities = null;\n                                 if (customAction != null) {\n                                    // get entities from a custom action\n                                    entities = actionReturn.entitiesList;\n                                    if (entities == null \n                                          && actionReturn.entityData != null) {\n                                       ArrayList<Object> eList = new ArrayList<Object>();\n                                       eList.add(actionReturn.entityData);\n                                       entities = eList;\n                                    }\n                                 } else {\n                                    // get from a search\n                                    Search search = RequestUtils.makeSearchFromRequest(req);\n                                    entities = entityBrokerManager.fetchEntityList(view.getEntityReference(), search);\n                                 }\n                                 OutputStream outputStream = null;\n                                 try {\n                                    outputStream = res.getOutputStream();\n                                 } catch (IOException e) {\n                                    throw new RuntimeException(\"Failed to get output stream from response: \" + view.getEntityReference(), e);\n                                 }\n   \n                                 OutputFormattable formattable = (OutputFormattable) entityProviderManager.getProviderByPrefixAndCapability(prefix, OutputFormattable.class);\n                                 if (formattable == null) {\n                                    // handle internally or fail\n                                    entityEncodingManager.internalOutputFormatter(view.getEntityReference(), view.getExtension(), entities, outputStream, view);\n                                 } else {\n                                    // use provider's formatter\n                                    formattable.formatOutput(view.getEntityReference(), view.getExtension(), entities, outputStream);\n                                 }\n                                 res.setStatus(HttpServletResponse.SC_OK);\n                                 handled = true;\n                              } else {\n                                 // will not handle this format type\n                                 throw new EntityException( \"Will not handle output request for format  \"+view.getExtension()+\" for this path (\" \n                                       + path + \") for prefix (\" + prefix + \") for entity (\" + view.getEntityReference() + \")\", \n                                       view.getEntityReference()+\"\", HttpServletResponse.SC_METHOD_NOT_ALLOWED );\n                              }\n                           }\n                        } else {\n                           // input request\n                           if (EntityView.VIEW_DELETE.equals(view.getViewKey())) {\n                              // delete request\n                              Deleteable deleteable = (Deleteable) entityProviderManager.getProviderByPrefixAndCapability(prefix, Deleteable.class);\n                              if (deleteable != null) {\n                                 deleteable.deleteEntity(view.getEntityReference());\n                                 res.setStatus(HttpServletResponse.SC_NO_CONTENT);\n                                 handled = true;\n                              }\n                           } else {\n                              // save request\n                              Inputable inputable = (Inputable) entityProviderManager.getProviderByPrefixAndCapability(prefix, Inputable.class);\n                              if (inputable != null) {\n                                 if ( ReflectUtil.contains(inputable.getHandledInputFormats(), view.getExtension()) ) {\n                                    // we are handling this type of format for this entity\n                                    Object entity = null;\n                                    InputStream inputStream = null;\n                                    try {\n                                       inputStream = req.getInputStream();\n                                    } catch (IOException e) {\n                                       throw new RuntimeException(\"Failed to get output stream from response: \" + view.getEntityReference(), e);\n                                    }\n   \n                                    InputTranslatable translatable = (InputTranslatable) entityProviderManager.getProviderByPrefixAndCapability(prefix, InputTranslatable.class);\n                                    if (translatable == null) {\n                                       // use internal translators or fail\n                                       entity = entityEncodingManager.internalInputTranslator(view.getEntityReference(), \n                                             view.getExtension(), inputStream, req);\n                                    } else {\n                                       // use provider's translator\n                                       entity = translatable.translateFormattedData(view.getEntityReference(), \n                                             view.getExtension(), inputStream);\n                                    }\n   \n                                    if (entity == null) {\n                                       throw new EntityException(\"Unable to save entity (\"+view.getEntityReference()+\"), entity object was null\", \n                                             view.toString(), HttpServletResponse.SC_BAD_REQUEST);\n                                    } else {\n                                       if (EntityView.VIEW_NEW.equals(view.getViewKey())) {\n                                          String createdId = inputable.createEntity(view.getEntityReference(), entity);\n                                          view.setEntityReference( new EntityReference(prefix, createdId) ); // update the entity view\n                                          res.setHeader(EntityRequestHandler.HEADER_ENTITY_ID, createdId);\n                                          res.setStatus(HttpServletResponse.SC_CREATED);\n                                       } else if (EntityView.VIEW_EDIT.equals(view.getViewKey())) {\n                                          inputable.updateEntity(view.getEntityReference(), entity);\n                                          res.setStatus(HttpServletResponse.SC_NO_CONTENT);\n                                       } else {\n                                          throw new EntityException(\"Unable to handle entity input (\"+view.getEntityReference()+\"), \" +\n                                                \"action was not understood: \" + view.getViewKey(), \n                                                view.getEntityReference()+\"\", HttpServletResponse.SC_BAD_REQUEST);\n                                       }\n                                       // return the location of this updated or created entity (without any extension)\n                                       res.setHeader(EntityRequestHandler.HEADER_ENTITY_URL, view.getEntityURL() );\n                                       res.setHeader(EntityRequestHandler.HEADER_ENTITY_REFERENCE, view.getEntityReference().toString() );\n                                       handled = true;\n                                    }\n                                 } else {\n                                    // will not handle this format type\n                                    throw new EntityException( \"Will not handle input request for format  \"+view.getExtension()+\" for this path (\" \n                                          + path + \") for prefix (\" + prefix + \") for entity (\" + view.getEntityReference().toString() + \")\", \n                                          view.getEntityReference()+\"\", HttpServletResponse.SC_METHOD_NOT_ALLOWED );\n                                 }\n                              }\n                           }\n                        }\n                     } catch (IllegalArgumentException e) {\n                        // translate IAE into EE - bad request\n                        throw new EntityException(\"IllegalArgumentException: Unable to handle \" + (output ? \"output\" : \"input\") + \" request url (\"\n                              + view.getOriginalEntityUrl()+\"), \" + e.getMessage(),\n                              view.getEntityReference()+\"\", HttpServletResponse.SC_BAD_REQUEST);        \n                     } catch (IllegalStateException e) {\n                        // translate ISE into EE - internal server error\n                        throw new EntityException(\"IllegalStateException: Unable to handle \" + (output ? \"output\" : \"input\") + \" request url (\"\n                              + view.getOriginalEntityUrl()+\"), \" + e.getMessage(),\n                              view.getEntityReference()+\"\", HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n                     }\n                  }\n\n                  if (! handled) {\n                     // default handling, send to the access provider if there is one\n                     handleAccessProvider(view, req, res);\n                  }\n               }\n               handledReference = view.getEntityReference().toString();\n               requestStorage.setRequestValue(RequestStorage.ReservedKeys._requestEntityReference.name(), handledReference);\n\n               // handle the after interceptor\n               if (interceptor != null) {\n                  interceptor.after(view, req, res);\n               }\n\n               // clear the request data\n               ((RequestGetterImpl) requestGetter).setRequest(null);\n               ((RequestGetterImpl) requestGetter).setResponse(null);\n               requestStorage.reset();\n            }\n         }\n      }\n      return handledReference;\n   }","commit_id":"c0330eeb2eb9e5f8f507697da1a4e5ef6a14b14b","url":"https://github.com/sakaiproject/sakai"},{"original_method":"/**\n    * @see EntityBroker#fireEntityRequest(String, String, String, Map, Object)\n    */\n   public EntityResponse fireEntityRequestInternal(String reference, String viewKey, String format, Map<String, String> params, Object entity) {\n      if (reference == null) {\n         throw new IllegalArgumentException(\"reference must not be null\");\n      }\n      // convert the reference/key/format into a URL\n      EntityReference ref = new EntityReference(reference);\n      EntityView ev = new EntityView();\n      ev.setEntityReference( ref );\n      if (viewKey != null \n            && ! \"\".equals(viewKey)) {\n         ev.setViewKey(viewKey);\n      }\n      if (format != null \n            && ! \"\".equals(format)) {\n         ev.setExtension(format);\n      }\n      String URL = ev.toString();\n      // get the right method to use\n      Method method = Method.GET;\n      if (EntityView.VIEW_DELETE.equals(ev.getViewKey())) {\n         method = Method.DELETE;\n      } else if (EntityView.VIEW_EDIT.equals(ev.getViewKey())) {\n         method = Method.PUT;\n      } else if (EntityView.VIEW_NEW.equals(ev.getViewKey())) {\n         method = Method.POST;\n      } else {\n         method = Method.GET;\n      }\n      // handle entity if one was included\n      Object data = null;\n      if (entity != null) {\n         String prefix = ref.getPrefix();\n         Inputable inputable = entityProviderManager.getProviderByPrefixAndCapability(prefix, Inputable.class);\n         if (inputable == null) {\n            throw new IllegalArgumentException(\"This entity (\"+ref+\") is not Inputable so there is no reason to provide \"\n                  + \"a non-null entity, you should leave the entity null when firing requests to this entity\");\n         }\n         Outputable outputable = entityProviderManager.getProviderByPrefixAndCapability(prefix, Outputable.class);\n         if (outputable == null) {\n            throw new IllegalArgumentException(\"This entity (\"+ref+\") is not Outputable so there is no reason to provide \"\n               + \"a non-null entity, you should leave the entity null when firing requests to this entity\");\n         } else {\n            String[] formats = outputable.getHandledOutputFormats();\n            if ( ReflectUtil.contains(formats, format) ) {\n               List<Object> entities = new ArrayList<Object>();\n               entities.add(entity);\n               // need to make sure the reference has an id set\n               ref = new EntityReference(ref.getPrefix(), ref.getId() == null ? \"new\" : ref.getId());\n               // setup the output stream\n               ByteArrayOutputStream output = new ByteArrayOutputStream();\n               OutputFormattable formattable = entityProviderManager.getProviderByPrefixAndCapability(prefix, OutputFormattable.class);\n               if (formattable == null) {\n                  // handle internally or fail\n                  entityEncodingManager.internalOutputFormatter(ref, format, entities, output, null);\n               } else {\n                  // use provider's formatter\n                  formattable.formatOutput(ref, format, entities, output);\n               }\n               data = new ByteArrayInputStream(output.toByteArray());\n            } else {\n               throw new IllegalArgumentException(\"This entity (\"+reference+\") is not outputable in this format (\"+format+\"),\" +\n                     \" only the following formats are supported: \" + ReflectUtil.arrayToString(formats));\n            }\n         }\n      }\n      HttpResponse httpResponse = HttpRESTUtils.fireRequest(URL, method, params, data, true);\n      // translate response to correct kind\n      EntityResponse response = new EntityResponse(httpResponse.getResponseCode(), \n            httpResponse.getResponseMessage(), httpResponse.getResponseBody(), httpResponse.getResponseHeaders());\n      return response;\n   }","id":96679,"modified_method":"/**\n    * @see EntityBroker#fireEntityRequest(String, String, String, Map, Object)\n    */\n   public EntityResponse fireEntityRequestInternal(String reference, String viewKey, String format, Map<String, String> params, Object entity) {\n      if (reference == null) {\n         throw new IllegalArgumentException(\"reference must not be null\");\n      }\n      // convert the reference/key/format into a URL\n      EntityReference ref = new EntityReference(reference);\n      EntityView ev = new EntityView();\n      ev.setEntityReference( ref );\n      if (viewKey != null \n            && ! \"\".equals(viewKey)) {\n         ev.setViewKey(viewKey);\n      }\n      if (format != null \n            && ! \"\".equals(format)) {\n         ev.setExtension(format);\n      }\n      String URL = ev.toString();\n      // get the right method to use\n      Method method = Method.GET;\n      if (EntityView.VIEW_DELETE.equals(ev.getViewKey())) {\n         method = Method.DELETE;\n      } else if (EntityView.VIEW_EDIT.equals(ev.getViewKey())) {\n         method = Method.PUT;\n      } else if (EntityView.VIEW_NEW.equals(ev.getViewKey())) {\n         method = Method.POST;\n      } else {\n         method = Method.GET;\n      }\n      // handle entity if one was included\n      Object data = null;\n      if (entity != null) {\n         String prefix = ref.getPrefix();\n         Inputable inputable = entityProviderManager.getProviderByPrefixAndCapability(prefix, Inputable.class);\n         if (inputable == null) {\n            throw new IllegalArgumentException(\"This entity (\"+ref+\") is not Inputable so there is no reason to provide \"\n                  + \"a non-null entity, you should leave the entity null when firing requests to this entity\");\n         }\n         Outputable outputable = entityProviderManager.getProviderByPrefixAndCapability(prefix, Outputable.class);\n         if (outputable == null) {\n            throw new IllegalArgumentException(\"This entity (\"+ref+\") is not Outputable so there is no reason to provide \"\n               + \"a non-null entity, you should leave the entity null when firing requests to this entity\");\n         } else {\n            // handle outputing the entity data\n            List<Object> entities = new ArrayList<Object>();\n            entities.add(entity);\n            ByteArrayOutputStream output = new ByteArrayOutputStream();\n            entityEncodingManager.formatAndOutputEntity(reference, format, entities, output);\n            data = new ByteArrayInputStream(output.toByteArray());\n         }\n      }\n      HttpResponse httpResponse = HttpRESTUtils.fireRequest(URL, method, params, data, true);\n      // translate response to correct kind\n      EntityResponse response = new EntityResponse(httpResponse.getResponseCode(), \n            httpResponse.getResponseMessage(), httpResponse.getResponseBody(), httpResponse.getResponseHeaders());\n      return response;\n   }","commit_id":"c0330eeb2eb9e5f8f507697da1a4e5ef6a14b14b","url":"https://github.com/sakaiproject/sakai"},{"original_method":"@Override\n    public void doFilter(ServletRequest request, \n                         ServletResponse response,\n                         FilterChain chain\n                         ) throws IOException, ServletException {\n      HttpServletRequestWrapper quoted = \n        new RequestQuoter((HttpServletRequest) request);\n      final HttpServletResponse httpResponse = (HttpServletResponse) response;\n      // set the default to UTF-8 so that we don't need to worry about IE7\n      // choosing to interpret the special characters as UTF-7\n      httpResponse.setContentType(\"text/html;charset=utf-8\");\n      chain.doFilter(quoted, response);\n    }","id":96680,"modified_method":"@Override\n    public void doFilter(ServletRequest request, \n                         ServletResponse response,\n                         FilterChain chain\n                         ) throws IOException, ServletException {\n      HttpServletRequestWrapper quoted = \n        new RequestQuoter((HttpServletRequest) request);\n      HttpServletResponse httpResponse = (HttpServletResponse) response;\n\n      String mime = inferMimeType(request);\n      if (mime == null || mime.equals(\"text/html\")) {\n        // no extension or HTML with unspecified encoding, we want to\n        // force HTML with utf-8 encoding\n        // This is to avoid the following security issue:\n        // http://openmya.hacker.jp/hasegawa/security/utf7cs.html\n        httpResponse.setContentType(\"text/html; charset=utf-8\");\n      }\n      chain.doFilter(quoted, httpResponse);\n    }","commit_id":"f7105a2773048be8229b80ca74a889c9b15348b6","url":"https://github.com/apache/hadoop"},{"original_method":"@Override\n    public void init(FilterConfig config) throws ServletException {\n    }","id":96681,"modified_method":"@Override\n    public void init(FilterConfig config) throws ServletException {\n      this.config = config;\n    }","commit_id":"f7105a2773048be8229b80ca74a889c9b15348b6","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Prepare the test webapp by creating the directory from the test properties\n   * fail if the directory cannot be created.\n   * @throws AssertionError if a condition was not met\n   */\n  protected static void prepareTestWebapp() {\n    String webapps = System.getProperty(TEST_BUILD_WEBAPPS, BUILD_WEBAPPS_DIR);\n    File testWebappDir = new File(webapps +\n        File.pathSeparator + TEST);\n    if (!testWebappDir.exists()) {\n      assertTrue(\"Unable to create the test dir \" + testWebappDir,\n          testWebappDir.mkdirs());\n    } else {\n      assertTrue(\"Not a directory \" + testWebappDir,\n          testWebappDir.isDirectory());\n    }\n  }","id":96682,"modified_method":"/**\n   * Prepare the test webapp by creating the directory from the test properties\n   * fail if the directory cannot be created.\n   * @throws AssertionError if a condition was not met\n   */\n  protected static void prepareTestWebapp() {\n    String webapps = System.getProperty(TEST_BUILD_WEBAPPS, BUILD_WEBAPPS_DIR);\n    File testWebappDir = new File(webapps +\n        File.separatorChar + TEST);\n    if (!testWebappDir.exists()) {\n      fail(\"Test webapp dir \" + testWebappDir + \" missing\");\n    }\n  }","commit_id":"f7105a2773048be8229b80ca74a889c9b15348b6","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Process a GET request for the specified resource.\n   * \n   * @param request\n   *          The servlet request we are processing\n   * @param response\n   *          The servlet response we are creating\n   */\n  @Override\n  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      if (!HttpServer.isInstrumentationAccessAllowed(getServletContext(),\n                                                     request, response)) {\n        return;\n      }\n      JsonGenerator jg = null;\n      try {\n        response.setContentType(\"application/json; charset=utf8\");\n\n        PrintWriter writer = response.getWriter();\n        jg = jsonFactory.createJsonGenerator(writer);\n        jg.useDefaultPrettyPrinter();\n        jg.writeStartObject();\n\n        // query per mbean attribute\n        String getmethod = request.getParameter(\"get\");\n        if (getmethod != null) {\n          String[] splitStrings = getmethod.split(\"\\\\:\\\\:\");\n          if (splitStrings.length != 2) {\n            jg.writeStringField(\"result\", \"ERROR\");\n            jg.writeStringField(\"message\", \"query format is not as expected.\");\n            jg.flush();\n            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n            return;\n          }\n          listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n              response);\n          return;\n        }\n\n        // query per mbean\n        String qry = request.getParameter(\"qry\");\n        if (qry == null) {\n          qry = \"*:*\";\n        }\n        listBeans(jg, new ObjectName(qry), null, response);\n      } finally {\n        if (jg != null) {\n          jg.close();\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch (MalformedObjectNameException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }","id":96683,"modified_method":"/**\n   * Process a GET request for the specified resource.\n   * \n   * @param request\n   *          The servlet request we are processing\n   * @param response\n   *          The servlet response we are creating\n   */\n  @Override\n  public void doGet(HttpServletRequest request, HttpServletResponse response) {\n    try {\n      if (!HttpServer.isInstrumentationAccessAllowed(getServletContext(),\n                                                     request, response)) {\n        return;\n      }\n      JsonGenerator jg = null;\n      String jsonpcb = null;\n      PrintWriter writer = null;\n      try {\n        writer = response.getWriter();\n \n        // \"callback\" parameter implies JSONP outpout\n        jsonpcb = request.getParameter(CALLBACK_PARAM);\n        if (jsonpcb != null) {\n          response.setContentType(\"application/javascript; charset=utf8\");\n          writer.write(jsonpcb + \"(\");\n        } else {\n          response.setContentType(\"application/json; charset=utf8\");\n        }\n\n        jg = jsonFactory.createJsonGenerator(writer);\n        jg.disable(JsonGenerator.Feature.AUTO_CLOSE_TARGET);\n        jg.useDefaultPrettyPrinter();\n        jg.writeStartObject();\n\n        // query per mbean attribute\n        String getmethod = request.getParameter(\"get\");\n        if (getmethod != null) {\n          String[] splitStrings = getmethod.split(\"\\\\:\\\\:\");\n          if (splitStrings.length != 2) {\n            jg.writeStringField(\"result\", \"ERROR\");\n            jg.writeStringField(\"message\", \"query format is not as expected.\");\n            jg.flush();\n            response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n            return;\n          }\n          listBeans(jg, new ObjectName(splitStrings[0]), splitStrings[1],\n              response);\n          return;\n        }\n\n        // query per mbean\n        String qry = request.getParameter(\"qry\");\n        if (qry == null) {\n          qry = \"*:*\";\n        }\n        listBeans(jg, new ObjectName(qry), null, response);\n      } finally {\n        if (jg != null) {\n          jg.close();\n        }\n        if (jsonpcb != null) {\n           writer.write(\");\");\n        }\n        if (writer != null) {\n          writer.close();\n        }\n      }\n    } catch (IOException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_INTERNAL_SERVER_ERROR);\n    } catch (MalformedObjectNameException e) {\n      LOG.error(\"Caught an exception while processing JMX request\", e);\n      response.setStatus(HttpServletResponse.SC_BAD_REQUEST);\n    }\n  }","commit_id":"6a059dc40e0020acc64d8049bf7fe6c7c0aad358","url":"https://github.com/apache/hadoop"},{"original_method":"@Test public void testQuery() throws Exception {\n    String result = readOutput(new URL(baseUrl, \"/jmx?qry=java.lang:type=Runtime\"));\n    LOG.info(\"/jmx?qry=java.lang:type=Runtime RESULT: \"+result);\n    assertReFind(\"\\\"name\\\"\\\\s*:\\\\s*\\\"java.lang:type=Runtime\\\"\", result);\n    assertReFind(\"\\\"modelerType\\\"\", result);\n    \n    result = readOutput(new URL(baseUrl, \"/jmx?qry=java.lang:type=Memory\"));\n    LOG.info(\"/jmx?qry=java.lang:type=Memory RESULT: \"+result);\n    assertReFind(\"\\\"name\\\"\\\\s*:\\\\s*\\\"java.lang:type=Memory\\\"\", result);\n    assertReFind(\"\\\"modelerType\\\"\", result);\n    \n    result = readOutput(new URL(baseUrl, \"/jmx\"));\n    LOG.info(\"/jmx RESULT: \"+result);\n    assertReFind(\"\\\"name\\\"\\\\s*:\\\\s*\\\"java.lang:type=Memory\\\"\", result);\n    \n    // test to get an attribute of a mbean\n    result = readOutput(new URL(baseUrl, \n        \"/jmx?get=java.lang:type=Memory::HeapMemoryUsage\"));\n    LOG.info(\"/jmx RESULT: \"+result);\n    assertReFind(\"\\\"name\\\"\\\\s*:\\\\s*\\\"java.lang:type=Memory\\\"\", result);\n    assertReFind(\"\\\"committed\\\"\\\\s*:\", result);\n    \n    // negative test to get an attribute of a mbean\n    result = readOutput(new URL(baseUrl, \n        \"/jmx?get=java.lang:type=Memory::\"));\n    LOG.info(\"/jmx RESULT: \"+result);\n    assertReFind(\"\\\"ERROR\\\"\", result);\n  }","id":96684,"modified_method":"@Test public void testQuery() throws Exception {\n    String result = readOutput(new URL(baseUrl, \"/jmx?qry=java.lang:type=Runtime\"));\n    LOG.info(\"/jmx?qry=java.lang:type=Runtime RESULT: \"+result);\n    assertReFind(\"\\\"name\\\"\\\\s*:\\\\s*\\\"java.lang:type=Runtime\\\"\", result);\n    assertReFind(\"\\\"modelerType\\\"\", result);\n    \n    result = readOutput(new URL(baseUrl, \"/jmx?qry=java.lang:type=Memory\"));\n    LOG.info(\"/jmx?qry=java.lang:type=Memory RESULT: \"+result);\n    assertReFind(\"\\\"name\\\"\\\\s*:\\\\s*\\\"java.lang:type=Memory\\\"\", result);\n    assertReFind(\"\\\"modelerType\\\"\", result);\n    \n    result = readOutput(new URL(baseUrl, \"/jmx\"));\n    LOG.info(\"/jmx RESULT: \"+result);\n    assertReFind(\"\\\"name\\\"\\\\s*:\\\\s*\\\"java.lang:type=Memory\\\"\", result);\n    \n    // test to get an attribute of a mbean\n    result = readOutput(new URL(baseUrl, \n        \"/jmx?get=java.lang:type=Memory::HeapMemoryUsage\"));\n    LOG.info(\"/jmx RESULT: \"+result);\n    assertReFind(\"\\\"name\\\"\\\\s*:\\\\s*\\\"java.lang:type=Memory\\\"\", result);\n    assertReFind(\"\\\"committed\\\"\\\\s*:\", result);\n    \n    // negative test to get an attribute of a mbean\n    result = readOutput(new URL(baseUrl, \n        \"/jmx?get=java.lang:type=Memory::\"));\n    LOG.info(\"/jmx RESULT: \"+result);\n    assertReFind(\"\\\"ERROR\\\"\", result);\n\n    // test to get JSONP result\n    result = readOutput(new URL(baseUrl, \"/jmx?qry=java.lang:type=Memory&callback=mycallback1\"));\n    LOG.info(\"/jmx?qry=java.lang:type=Memory&callback=mycallback RESULT: \"+result);\n    assertReFind(\"^mycallback1\\\\(\\\\{\", result);\n    assertReFind(\"\\\\}\\\\);$\", result);\n\n    // negative test to get an attribute of a mbean as JSONP\n    result = readOutput(new URL(baseUrl,\n        \"/jmx?get=java.lang:type=Memory::&callback=mycallback2\"));\n    LOG.info(\"/jmx RESULT: \"+result);\n    assertReFind(\"^mycallback2\\\\(\\\\{\", result);\n    assertReFind(\"\\\"ERROR\\\"\", result);\n    assertReFind(\"\\\\}\\\\);$\", result);\n\n    // test to get an attribute of a mbean as JSONP\n    result = readOutput(new URL(baseUrl,\n        \"/jmx?get=java.lang:type=Memory::HeapMemoryUsage&callback=mycallback3\"));\n    LOG.info(\"/jmx RESULT: \"+result);\n    assertReFind(\"^mycallback3\\\\(\\\\{\", result);\n    assertReFind(\"\\\"name\\\"\\\\s*:\\\\s*\\\"java.lang:type=Memory\\\"\", result);\n    assertReFind(\"\\\"committed\\\"\\\\s*:\", result);\n    assertReFind(\"\\\\}\\\\);$\", result);\n\n  }","commit_id":"6a059dc40e0020acc64d8049bf7fe6c7c0aad358","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n\t * Because only servlet 2.4 supports web.xml locale-encoding-mapping-list\n\t * deployment descriptors, this is a workaround for servlet 2.3\n\t */\n\tprotected void configureResponse()\n\t{\n\t\tfinal Locale originalLocale = getSession().getLocale();\n\t\tgetSession().setLocale(Locale.GERMANY);\n\t\tsuper.configureResponse();\n\n\t\tfinal String encoding = \"text/\" + getMarkupType() + \"; charset=\"\n\t\t\t\t+ CharSetUtil.getEncoding(getRequestCycle());\n\n\t\tgetResponse().setContentType(encoding);\n\t\tgetSession().setLocale(originalLocale);\n\t}","id":96685,"modified_method":"/**\n\t * Because only servlet 2.4 supports web.xml locale-encoding-mapping-list\n\t * deployment descriptors, this is a workaround for servlet 2.3\n\t */\n\tprotected void configureResponse()\n\t{\n\t\tfinal Locale originalLocale = getSession().getLocale();\n\t\tgetSession().setLocale(Locale.GERMANY);\n\n\t\tsuper.configureResponse();\n\n\t\t// This is no longer useful in many cases, since we now forward the \n\t\t// <?xml ..encoding=\"..\" ?> from the Page's markup and use it explicitly\n\t\t// set the responses encoding (see super class implementation).\n\t\t// It is however not completely useless, as many html (not xhtml) pages\n\t\t// might not have that xml declaration <?xml ..?> string.\n/*\t\t\n\t\tfinal String encoding = \"text/\" + getMarkupType() + \"; charset=\"\n\t\t\t\t+ CharSetUtil.getEncoding(getRequestCycle());\n\t\t\t\t\n\t\tgetResponse().setContentType(encoding);\n*/\n\t\tgetSession().setLocale(originalLocale);\n\t}","commit_id":"c631facac0f597d0e3dec9fd28d5e81ac8331f16","url":"https://github.com/apache/wicket"},{"original_method":"/**\n     * Constructor\n     * @param resource The resource where the markup was found\n     * @param markup The markup elements\n     */\n    Markup(final IResource resource, final List markup)\n    {\n        this.resource = resource;\n        this.markup = markup;\n    }","id":96686,"modified_method":"/**\n     * Constructor\n     * @param resource The resource where the markup was found\n     * @param markup The markup elements\n     * @param xmlDeclaration The <?xml ...?> string from markup, if avaiable\n     * @param encoding The encoding of the markup file read taken from <?xml ..encoding=\"..\" ?>\n     */\n    Markup(final IResource resource, final List markup, final String xmlDeclaration, final String encoding)\n    {\n        this.resource = resource;\n        this.markup = markup;\n        this.xmlDeclaration = xmlDeclaration;\n        this.encoding = encoding;\n    }","commit_id":"c631facac0f597d0e3dec9fd28d5e81ac8331f16","url":"https://github.com/apache/wicket"},{"original_method":"/**\n     * Parse the markup.\n     * @param string The markup\n     * @return The markup\n     * @throws ParseException\n     * @throws IOException\n     * @throws ResourceNotFoundException\n     */\n    Markup parse(final String string) throws ParseException, IOException,\n    \tResourceNotFoundException\n    {\n        xmlParser.parse(string);\n        return new Markup(null, parseMarkup());\n    }","id":96687,"modified_method":"/**\n     * Parse the markup.\n     * @param string The markup\n     * @return The markup\n     * @throws ParseException\n     * @throws IOException\n     * @throws ResourceNotFoundException\n     */\n    Markup parse(final String string) throws ParseException, IOException,\n    \tResourceNotFoundException\n    {\n        xmlParser.parse(string);\n        return new Markup(null, parseMarkup(), getXmlDeclaration(), getEncoding());\n    }","commit_id":"c631facac0f597d0e3dec9fd28d5e81ac8331f16","url":"https://github.com/apache/wicket"},{"original_method":"/**\n     * Reads and parses markup from a file.\n     * @param resource The file\n     * @return The markup\n     * @throws ParseException\n     * @throws IOException\n     * @throws ResourceNotFoundException\n     */\n    public Markup readAndParse(final IResource resource) throws ParseException, IOException,\n            ResourceNotFoundException\n    {\n        xmlParser.parse(resource);\n        return new Markup(resource, parseMarkup());\n    }","id":96688,"modified_method":"/**\n     * Reads and parses markup from a file.\n     * @param resource The file\n     * @return The markup\n     * @throws ParseException\n     * @throws IOException\n     * @throws ResourceNotFoundException\n     */\n    public Markup readAndParse(final IResource resource) throws ParseException, IOException,\n            ResourceNotFoundException\n    {\n        xmlParser.parse(resource);\n        return new Markup(resource, parseMarkup(), getXmlDeclaration(), getEncoding());\n    }","commit_id":"c631facac0f597d0e3dec9fd28d5e81ac8331f16","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Renders this container to the given response object.\n\t */\n\tprotected final void onRender()\n\t{\n\t\t// Check access to page\n\t\tif (checkAccess())\n\t\t{\n\t\t\t// Configure response object with locale and content type\n\t\t\tconfigureResponse();\n\n\t\t\t// Set page's associated markup stream\n\t\t\tfinal MarkupStream markupStream = getAssociatedMarkupStream();\n\t\t\tsetMarkupStream(markupStream);\n\n\t\t\t// Render all the page's markup\n\t\t\tsetFlag(FLAG_IS_RENDERING, true);\n\t\t\ttry\n\t\t\t{\n\t\t\t\trenderAll(markupStream);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tsetFlag(FLAG_IS_RENDERING, false);\n\t\t\t}\n\t\t}\n\t}","id":96689,"modified_method":"/**\n\t * Renders this container to the given response object.\n\t */\n\tprotected final void onRender()\n\t{\n\t\t// Check access to page\n\t\tif (checkAccess())\n\t\t{\n\t\t\t// Set page's associated markup stream\n\t\t\tfinal MarkupStream markupStream = getAssociatedMarkupStream();\n\t\t\tsetMarkupStream(markupStream);\n\t\t\t\n\t\t\t// Configure response object with locale and content type\n\t\t\tconfigureResponse();\n\n\t\t\t// Render all the page's markup\n\t\t\tsetFlag(FLAG_IS_RENDERING, true);\n\t\t\ttry\n\t\t\t{\n\t\t\t\trenderAll(markupStream);\n\t\t\t}\n\t\t\tfinally\n\t\t\t{\n\t\t\t\tsetFlag(FLAG_IS_RENDERING, false);\n\t\t\t}\n\t\t}\n\t}","commit_id":"c631facac0f597d0e3dec9fd28d5e81ac8331f16","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Set-up response with appropriate content type and locale.\n\t */\n\tprotected void configureResponse()\n\t{\n\t\t// Get response\n\t\tfinal Response response = getResponse();\n\n\t\t// Set content type based on markup type for page\n\t\tresponse.setContentType(\"text/\" + getMarkupType());\n\n\t\t// Set response locale from session locale\n\t\tresponse.setLocale(getSession().getLocale());\n\t}","id":96690,"modified_method":"/**\n\t * Set-up response with appropriate content type and locale.\n\t */\n\tprotected void configureResponse()\n\t{\n\t\t// Get response\n\t\tfinal Response response = getResponse();\n\n\t\t// In case the Page markup contained a <?xml ..?> to determine the\n\t\t// markup's encoding, than forward that very same declaration to \n\t\t// the browser. The xml declaration of all components on the page\n\t\t// are swallowed. Note: this is a potential issue in cases where\n\t\t// the page's encoding (e.g. ascii) does not allow for special \n\t\t// characters used in the contained components.  The user has to \n\t\t// make sure that the Page's encoding allow for all characters\n\t\t// required.\n\t\t\n\t\t// Note: \n\t\t\n\t\tfinal MarkupStream markupStream = findMarkupStream();\n\t\tif (markupStream != null)\n\t\t{\n\t\t    if (markupStream.getXmlDeclaration() != null)\n\t\t    {\n\t\t\t\t// Set content type based on markup type for page\n\t\t\t\tresponse.setContentType(\"text/\" + getMarkupType() + \"; charset=\" \n\t\t\t\t        + markupStream.getEncoding());\n\t\t\t\t\n\t\t        response.write(markupStream.getXmlDeclaration());\n\t\t    }\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// Set content type based on markup type for page\n\t\t\tresponse.setContentType(\"text/\" + getMarkupType());\n\t\t}\n\n\t\t// Set response locale from session locale\n\t\tresponse.setLocale(getSession().getLocale());\n\t}","commit_id":"c631facac0f597d0e3dec9fd28d5e81ac8331f16","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Reads a string using a character encoding.\n\t * \n\t * @param in\n\t *            The input\n\t * @param encoding\n\t *            The character encoding of the input data\n\t * @return The string\n\t * @throws IOException\n\t */\n\tpublic static String readString(final InputStream in, final String encoding) throws IOException\n\t{\n\t\treturn readString(new BufferedReader(new InputStreamReader(in, encoding)));\n\t}","id":96691,"modified_method":"/**\n\t * Reads a string using a character encoding.\n\t * \n\t * @param in\n\t *            The input\n\t * @param encoding\n\t *            The character encoding of the input data\n\t * @return The string\n\t * @throws IOException\n\t */\n\tpublic static String readString(final InputStream in, final CharSequence encoding) throws IOException\n\t{\n\t\treturn readString(new BufferedReader(new InputStreamReader(in, encoding.toString())));\n\t}","commit_id":"c631facac0f597d0e3dec9fd28d5e81ac8331f16","url":"https://github.com/apache/wicket"},{"original_method":"/**\n\t * Read-ahead the input stream (markup file). If it starts with &lt;?xml\n\t * encoding=\"..\" ?&gt;, than set this.encoding and return null. If not,\n\t * return all characters read so far. determineEncoding will read-ahead at\n\t * max. the very first line of the markup.\n\t *\n\t * @param in\n\t *            The markup file\n\t * @param readAheadSize\n\t *            The read ahead buffer available to read the xml encoding\n\t *            information\n\t * @return Null, if &lt;?xml ..?&gt; has been found; else all characters\n\t *         read ahead\n\t * @throws IOException\n\t */\n\tprivate final String determineEncoding(final InputStream in, final int readAheadSize)\n\t\t\tthrows IOException\n\t{\n\t\t// Max one line\n\t\tStringBuffer pushBack = new StringBuffer(readAheadSize);\n\n\t\tint value;\n\t\twhile ((value = in.read()) != -1)\n\t\t{\n\t\t\tpushBack.append((char)value);\n\n\t\t\t// Stop at end of the first tag or end of line. If it is HTML\n\t\t\t// without newlines, stop after X bytes (= characters)\n\t\t\tif ((value == '>') || (value == '\\n') || (value == '\\r')\n\t\t\t\t\t|| (pushBack.length() >= (readAheadSize - 1)))\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Does the string match the <?xml .. ?> pattern\n\t\tfinal Matcher matcher = encodingPattern.matcher(pushBack);\n\t\tif (!matcher.matches())\n\t\t{\n\t\t\t// No\n\t\t\treturn null;\n\t\t}\n\n\t\t// Extract the encoding\n\t\tString encoding = matcher.group(3);\n\t\tif ((encoding == null) || (encoding.length() == 0))\n\t\t{\n\t\t\tencoding = matcher.group(4);\n\t\t}\n\n\t\treturn encoding;\n\t}","id":96692,"modified_method":"/**\n\t * Read-ahead the input stream (markup file). If it starts with &lt;?xml\n\t * encoding=\"..\" ?&gt;, than set this.encoding and return null. If not,\n\t * return all characters read so far. determineEncoding will read-ahead at\n\t * max. the very first line of the markup.\n\t *\n\t * @param in\n\t *            The markup file\n\t * @param readAheadSize\n\t *            The read ahead buffer available to read the xml encoding\n\t *            information\n\t * @return Null, if &lt;?xml ..?&gt; has been found; else all characters\n\t *         read ahead\n\t * @throws IOException\n\t */\n\tprivate final String determineEncoding(final InputStream in, final int readAheadSize)\n\t\t\tthrows IOException\n\t{\n\t\t// Max one line\n\t\tStringBuffer pushBack = new StringBuffer(readAheadSize);\n\n\t\tint value;\n\t\twhile ((value = in.read()) != -1)\n\t\t{\n\t\t\tpushBack.append((char)value);\n\n\t\t\t// Stop at end of the first tag or end of line. If it is HTML\n\t\t\t// without newlines, stop after X bytes (= characters)\n\t\t\tif ((value == '>') || (value == '\\n') || (value == '\\r')\n\t\t\t\t\t|| (pushBack.length() >= (readAheadSize - 1)))\n\t\t\t{\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\t// Does the string match the <?xml .. ?> pattern\n\t\tfinal Matcher matcher = encodingPattern.matcher(pushBack);\n\t\tif (!matcher.matches())\n\t\t{\n\t\t\t// No\n\t\t\treturn null;\n\t\t}\n\n\t\t// Save the whole <?xml ..> string for later\n\t\tthis.xmlDeclarationString = pushBack.toString().trim();\n\t\t\n\t\t// Extract the encoding\n\t\tString encoding = matcher.group(3);\n\t\tif ((encoding == null) || (encoding.length() == 0))\n\t\t{\n\t\t\tencoding = matcher.group(4);\n\t\t}\n\n\t\treturn encoding;\n\t}","commit_id":"c631facac0f597d0e3dec9fd28d5e81ac8331f16","url":"https://github.com/apache/wicket"},{"original_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {\n            registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, BufferPoolMXBeanAttributeHandler.INSTANCE);\n        }\n        for (AttributeDefinition attribute : READ_ATTRIBUTES) {\n            registration.registerReadOnlyAttribute(attribute, BufferPoolMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, BufferPoolMXBeanAttributeHandler.INSTANCE);\n        }\n    }","id":96693,"modified_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, BufferPoolMXBeanAttributeHandler.INSTANCE);\n        for (AttributeDefinition attribute : READ_ATTRIBUTES) {\n            registration.registerReadOnlyAttribute(attribute, BufferPoolMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, BufferPoolMXBeanAttributeHandler.INSTANCE);\n        }\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.OBJECT_NAME.getName().equals(name)) {\n            context.getResult().set(ManagementFactory.CLASS_LOADING_MXBEAN_NAME);\n        } else if (PlatformMBeanConstants.TOTAL_LOADED_CLASS_COUNT.equals(name)) {\n            context.getResult().set(ManagementFactory.getClassLoadingMXBean().getTotalLoadedClassCount());\n        } else if (PlatformMBeanConstants.LOADED_CLASS_COUNT.equals(name)) {\n            context.getResult().set(ManagementFactory.getClassLoadingMXBean().getLoadedClassCount());\n        } else if (PlatformMBeanConstants.UNLOADED_CLASS_COUNT.equals(name)) {\n            context.getResult().set(ManagementFactory.getClassLoadingMXBean().getUnloadedClassCount());\n        } else if (PlatformMBeanConstants.VERBOSE.equals(name)) {\n            context.getResult().set(ManagementFactory.getClassLoadingMXBean().isVerbose());\n        } else if (CLASSLOADING_METRICS.contains(name)\n                || CLASSLOADING_READ_WRITE_ATTRIBUTES.contains(name)) {\n            // Bug\n            throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(name);\n        } else {\n            // Shouldn't happen; the global handler should reject\n            throw unknownAttribute(operation);\n        }\n\n    }","id":96694,"modified_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        if (PlatformMBeanConstants.OBJECT_NAME.getName().equals(name)) {\n            context.getResult().set(ManagementFactory.CLASS_LOADING_MXBEAN_NAME);\n        } else if (PlatformMBeanConstants.TOTAL_LOADED_CLASS_COUNT.equals(name)) {\n            context.getResult().set(ManagementFactory.getClassLoadingMXBean().getTotalLoadedClassCount());\n        } else if (PlatformMBeanConstants.LOADED_CLASS_COUNT.equals(name)) {\n            context.getResult().set(ManagementFactory.getClassLoadingMXBean().getLoadedClassCount());\n        } else if (PlatformMBeanConstants.UNLOADED_CLASS_COUNT.equals(name)) {\n            context.getResult().set(ManagementFactory.getClassLoadingMXBean().getUnloadedClassCount());\n        } else if (PlatformMBeanConstants.VERBOSE.equals(name)) {\n            context.getResult().set(ManagementFactory.getClassLoadingMXBean().isVerbose());\n        } else if (CLASSLOADING_METRICS.contains(name)\n                || CLASSLOADING_READ_WRITE_ATTRIBUTES.contains(name)) {\n            // Bug\n            throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(name);\n        } else {\n            // Shouldn't happen; the global handler should reject\n            throw unknownAttribute(operation);\n        }\n\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {\n            registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, ClassLoadingMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (SimpleAttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, ClassLoadingMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (SimpleAttributeDefinition attribute : READ_WRITE_ATTRIBUTES) {\n            registration.registerReadWriteAttribute(attribute, ClassLoadingMXBeanAttributeHandler.INSTANCE, ClassLoadingMXBeanAttributeHandler.INSTANCE);\n        }\n    }","id":96695,"modified_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, ClassLoadingMXBeanAttributeHandler.INSTANCE);\n        for (SimpleAttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, ClassLoadingMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (SimpleAttributeDefinition attribute : READ_WRITE_ATTRIBUTES) {\n            registration.registerReadWriteAttribute(attribute, ClassLoadingMXBeanAttributeHandler.INSTANCE, ClassLoadingMXBeanAttributeHandler.INSTANCE);\n        }\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        try {\n            if ((PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.OBJECT_NAME.getName().equals(name))\n                    || COMPILATION_READ_ATTRIBUTES.contains(name)\n                    || COMPILATION_METRICS.contains(name)) {\n                storeResult(name, context.getResult());\n            } else {\n                // Shouldn't happen; the global handler should reject\n                throw unknownAttribute(operation);\n            }\n        } catch (UnsupportedOperationException e) {\n            throw new OperationFailedException(new ModelNode().set(e.toString()));\n        }\n\n    }","id":96696,"modified_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        try {\n            if ((PlatformMBeanConstants.OBJECT_NAME.getName().equals(name))\n                    || COMPILATION_READ_ATTRIBUTES.contains(name)\n                    || COMPILATION_METRICS.contains(name)) {\n                storeResult(name, context.getResult());\n            } else {\n                // Shouldn't happen; the global handler should reject\n                throw unknownAttribute(operation);\n            }\n        } catch (UnsupportedOperationException e) {\n            throw new OperationFailedException(new ModelNode().set(e.toString()));\n        }\n\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"static void storeResult(final String attributeName, final ModelNode store) throws OperationFailedException {\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.OBJECT_NAME.getName().equals(attributeName)) {\n            store.set(ManagementFactory.COMPILATION_MXBEAN_NAME);\n        } else if (ModelDescriptionConstants.NAME.equals(attributeName)) {\n            store.set(ManagementFactory.getCompilationMXBean().getName());\n        } else if (PlatformMBeanConstants.COMPILATION_TIME_MONITORING_SUPPORTED.equals(attributeName)) {\n            store.set(ManagementFactory.getCompilationMXBean().isCompilationTimeMonitoringSupported());\n        } else if (PlatformMBeanConstants.TOTAL_COMPILATION_TIME.equals(attributeName)) {\n            store.set(ManagementFactory.getCompilationMXBean().getTotalCompilationTime());\n        } else {\n            if (COMPILATION_READ_ATTRIBUTES.contains(attributeName)|| COMPILATION_METRICS.contains(attributeName)) {\n                // Bug\n                throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(attributeName);\n            }\n        }\n    }","id":96697,"modified_method":"static void storeResult(final String attributeName, final ModelNode store) throws OperationFailedException {\n        if (PlatformMBeanConstants.OBJECT_NAME.getName().equals(attributeName)) {\n            store.set(ManagementFactory.COMPILATION_MXBEAN_NAME);\n        } else if (ModelDescriptionConstants.NAME.equals(attributeName)) {\n            store.set(ManagementFactory.getCompilationMXBean().getName());\n        } else if (PlatformMBeanConstants.COMPILATION_TIME_MONITORING_SUPPORTED.equals(attributeName)) {\n            store.set(ManagementFactory.getCompilationMXBean().isCompilationTimeMonitoringSupported());\n        } else if (PlatformMBeanConstants.TOTAL_COMPILATION_TIME.equals(attributeName)) {\n            store.set(ManagementFactory.getCompilationMXBean().getTotalCompilationTime());\n        } else {\n            if (COMPILATION_READ_ATTRIBUTES.contains(attributeName)|| COMPILATION_METRICS.contains(attributeName)) {\n                // Bug\n                throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(attributeName);\n            }\n        }\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final ModelNode result = context.getResult();\n\n        for (String attribute : CompilationResourceDefinition.COMPILATION_READ_ATTRIBUTES) {\n            final ModelNode store = result.get(attribute);\n            try {\n                CompilationMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        for (String attribute : CompilationResourceDefinition.COMPILATION_METRICS) {\n            final ModelNode store = result.get(attribute);\n            try {\n                CompilationMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {\n            final ModelNode store = result.get(PlatformMBeanConstants.OBJECT_NAME.getName());\n            CompilationMXBeanAttributeHandler.storeResult(PlatformMBeanConstants.OBJECT_NAME.getName(), store);\n        }\n\n        context.stepCompleted();\n    }","id":96698,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final ModelNode result = context.getResult();\n\n        for (String attribute : CompilationResourceDefinition.COMPILATION_READ_ATTRIBUTES) {\n            final ModelNode store = result.get(attribute);\n            try {\n                CompilationMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        for (String attribute : CompilationResourceDefinition.COMPILATION_METRICS) {\n            final ModelNode store = result.get(attribute);\n            try {\n                CompilationMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        final ModelNode store = result.get(PlatformMBeanConstants.OBJECT_NAME.getName());\n        CompilationMXBeanAttributeHandler.storeResult(PlatformMBeanConstants.OBJECT_NAME.getName(), store);\n\n        context.stepCompleted();\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {\n            registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, CompilationMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (SimpleAttributeDefinition attribute : READ_ATTRIBUTES) {\n            registration.registerReadOnlyAttribute(attribute, CompilationMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (SimpleAttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, CompilationMXBeanAttributeHandler.INSTANCE);\n        }\n    }","id":96699,"modified_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, CompilationMXBeanAttributeHandler.INSTANCE);\n\n        for (SimpleAttributeDefinition attribute : READ_ATTRIBUTES) {\n            registration.registerReadOnlyAttribute(attribute, CompilationMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (SimpleAttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, CompilationMXBeanAttributeHandler.INSTANCE);\n        }\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String gcName = PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement().getValue();\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        GarbageCollectorMXBean gcMBean = null;\n\n        for (GarbageCollectorMXBean mbean : ManagementFactory.getGarbageCollectorMXBeans()) {\n            if (gcName.equals(escapeMBeanName(mbean.getName()))) {\n                gcMBean = mbean;\n            }\n        }\n\n        if (gcMBean == null) {\n            throw PlatformMBeanLogger.ROOT_LOGGER.unknownGarbageCollector(gcName);\n        }\n\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.OBJECT_NAME.getName().equals(name)) {\n            final String objName = PlatformMBeanUtil.getObjectNameStringWithNameKey(ManagementFactory.GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE, gcName);\n            context.getResult().set(objName);\n        } else if (ModelDescriptionConstants.NAME.equals(name)) {\n            context.getResult().set(escapeMBeanName(gcMBean.getName()));\n        } else if (PlatformMBeanConstants.VALID.getName().equals(name)) {\n            context.getResult().set(gcMBean.isValid());\n        } else if (PlatformMBeanConstants.MEMORY_POOL_NAMES.equals(name)) {\n            final ModelNode result = context.getResult();\n            result.setEmptyList();\n            for (String pool : gcMBean.getMemoryPoolNames()) {\n                result.add(escapeMBeanName(pool));\n            }\n        } else if (PlatformMBeanConstants.COLLECTION_COUNT.equals(name)) {\n            context.getResult().set(gcMBean.getCollectionCount());\n        } else if (PlatformMBeanConstants.COLLECTION_TIME.equals(name)) {\n            context.getResult().set(gcMBean.getCollectionTime());\n        } else if (GarbageCollectorResourceDefinition.GARBAGE_COLLECTOR_READ_ATTRIBUTES.contains(name)\n                || GarbageCollectorResourceDefinition.GARBAGE_COLLECTOR_METRICS.contains(name)) {\n            // Bug\n            throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(name);\n        } else {\n            // Shouldn't happen; the global handler should reject\n            throw unknownAttribute(operation);\n        }\n\n    }","id":96700,"modified_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String gcName = PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement().getValue();\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        GarbageCollectorMXBean gcMBean = null;\n\n        for (GarbageCollectorMXBean mbean : ManagementFactory.getGarbageCollectorMXBeans()) {\n            if (gcName.equals(escapeMBeanName(mbean.getName()))) {\n                gcMBean = mbean;\n            }\n        }\n\n        if (gcMBean == null) {\n            throw PlatformMBeanLogger.ROOT_LOGGER.unknownGarbageCollector(gcName);\n        }\n\n        if (PlatformMBeanConstants.OBJECT_NAME.getName().equals(name)) {\n            final String objName = PlatformMBeanUtil.getObjectNameStringWithNameKey(ManagementFactory.GARBAGE_COLLECTOR_MXBEAN_DOMAIN_TYPE, gcName);\n            context.getResult().set(objName);\n        } else if (ModelDescriptionConstants.NAME.equals(name)) {\n            context.getResult().set(escapeMBeanName(gcMBean.getName()));\n        } else if (PlatformMBeanConstants.VALID.getName().equals(name)) {\n            context.getResult().set(gcMBean.isValid());\n        } else if (PlatformMBeanConstants.MEMORY_POOL_NAMES.equals(name)) {\n            final ModelNode result = context.getResult();\n            result.setEmptyList();\n            for (String pool : gcMBean.getMemoryPoolNames()) {\n                result.add(escapeMBeanName(pool));\n            }\n        } else if (PlatformMBeanConstants.COLLECTION_COUNT.equals(name)) {\n            context.getResult().set(gcMBean.getCollectionCount());\n        } else if (PlatformMBeanConstants.COLLECTION_TIME.equals(name)) {\n            context.getResult().set(gcMBean.getCollectionTime());\n        } else if (GarbageCollectorResourceDefinition.GARBAGE_COLLECTOR_READ_ATTRIBUTES.contains(name)\n                || GarbageCollectorResourceDefinition.GARBAGE_COLLECTOR_METRICS.contains(name)) {\n            // Bug\n            throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(name);\n        } else {\n            // Shouldn't happen; the global handler should reject\n            throw unknownAttribute(operation);\n        }\n\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {\n            registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, GarbageCollectorMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition attribute : READ_ATTRIBUTES) {\n            registration.registerReadOnlyAttribute(attribute, GarbageCollectorMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (SimpleAttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, GarbageCollectorMXBeanAttributeHandler.INSTANCE);\n        }\n    }","id":96701,"modified_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, GarbageCollectorMXBeanAttributeHandler.INSTANCE);\n\n        for (AttributeDefinition attribute : READ_ATTRIBUTES) {\n            registration.registerReadOnlyAttribute(attribute, GarbageCollectorMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (SimpleAttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, GarbageCollectorMXBeanAttributeHandler.INSTANCE);\n        }\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.OBJECT_NAME.getName().equals(name)) {\n            context.getResult().set(ManagementFactory.MEMORY_MXBEAN_NAME);\n        } else if (PlatformMBeanConstants.OBJECT_PENDING_FINALIZATION_COUNT.equals(name)) {\n            context.getResult().set(ManagementFactory.getMemoryMXBean().getObjectPendingFinalizationCount());\n        } else if (PlatformMBeanConstants.HEAP_MEMORY_USAGE.equals(name)) {\n            final ModelNode mu = PlatformMBeanUtil.getDetypedMemoryUsage(ManagementFactory.getMemoryMXBean().getHeapMemoryUsage());\n            context.getResult().set(mu);\n        } else if (PlatformMBeanConstants.NON_HEAP_MEMORY_USAGE.equals(name)) {\n            final ModelNode mu = PlatformMBeanUtil.getDetypedMemoryUsage(ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage());\n            context.getResult().set(mu);\n        } else if (PlatformMBeanConstants.VERBOSE.equals(name)) {\n            context.getResult().set(ManagementFactory.getMemoryMXBean().isVerbose());\n        } else if (MemoryResourceDefinition.MEMORY_METRICS.contains(name)\n                || MemoryResourceDefinition.MEMORY_READ_WRITE_ATTRIBUTES.contains(name)) {\n            // Bug\n            throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(name);\n        } else {\n            // Shouldn't happen; the global handler should reject\n            throw unknownAttribute(operation);\n        }\n\n    }","id":96702,"modified_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        if (PlatformMBeanConstants.OBJECT_NAME.getName().equals(name)) {\n            context.getResult().set(ManagementFactory.MEMORY_MXBEAN_NAME);\n        } else if (PlatformMBeanConstants.OBJECT_PENDING_FINALIZATION_COUNT.equals(name)) {\n            context.getResult().set(ManagementFactory.getMemoryMXBean().getObjectPendingFinalizationCount());\n        } else if (PlatformMBeanConstants.HEAP_MEMORY_USAGE.equals(name)) {\n            final ModelNode mu = PlatformMBeanUtil.getDetypedMemoryUsage(ManagementFactory.getMemoryMXBean().getHeapMemoryUsage());\n            context.getResult().set(mu);\n        } else if (PlatformMBeanConstants.NON_HEAP_MEMORY_USAGE.equals(name)) {\n            final ModelNode mu = PlatformMBeanUtil.getDetypedMemoryUsage(ManagementFactory.getMemoryMXBean().getNonHeapMemoryUsage());\n            context.getResult().set(mu);\n        } else if (PlatformMBeanConstants.VERBOSE.equals(name)) {\n            context.getResult().set(ManagementFactory.getMemoryMXBean().isVerbose());\n        } else if (MemoryResourceDefinition.MEMORY_METRICS.contains(name)\n                || MemoryResourceDefinition.MEMORY_READ_WRITE_ATTRIBUTES.contains(name)) {\n            // Bug\n            throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(name);\n        } else {\n            // Shouldn't happen; the global handler should reject\n            throw unknownAttribute(operation);\n        }\n\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String mmName = PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement().getValue();\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        MemoryManagerMXBean memoryManagerMXBean = null;\n\n        for (MemoryManagerMXBean mbean : ManagementFactory.getMemoryManagerMXBeans()) {\n            if (mmName.equals(escapeMBeanName(mbean.getName()))) {\n                memoryManagerMXBean = mbean;\n            }\n        }\n\n        if (memoryManagerMXBean == null) {\n            throw PlatformMBeanLogger.ROOT_LOGGER.unknownMemoryManager(mmName);\n        }\n\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.OBJECT_NAME.getName().equals(name)) {\n            final String objName = PlatformMBeanUtil.getObjectNameStringWithNameKey(ManagementFactory.MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE, mmName);\n            context.getResult().set(objName);\n        } else if (ModelDescriptionConstants.NAME.equals(name)) {\n            context.getResult().set(escapeMBeanName(memoryManagerMXBean.getName()));\n        } else if (PlatformMBeanConstants.VALID.getName().equals(name)) {\n            context.getResult().set(memoryManagerMXBean.isValid());\n        } else if (PlatformMBeanConstants.MEMORY_POOL_NAMES.equals(name)) {\n            final ModelNode result = context.getResult();\n            result.setEmptyList();\n            for (String pool : memoryManagerMXBean.getMemoryPoolNames()) {\n                result.add(escapeMBeanName(pool));\n            }\n        } else if (MemoryManagerResourceDefinition.MEMORY_MANAGER_READ_ATTRIBUTES.contains(name)) {\n            // Bug\n            throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(name);\n        } else {\n            // Shouldn't happen; the global handler should reject\n            throw unknownAttribute(operation);\n        }\n\n    }","id":96703,"modified_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String mmName = PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement().getValue();\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        MemoryManagerMXBean memoryManagerMXBean = null;\n\n        for (MemoryManagerMXBean mbean : ManagementFactory.getMemoryManagerMXBeans()) {\n            if (mmName.equals(escapeMBeanName(mbean.getName()))) {\n                memoryManagerMXBean = mbean;\n            }\n        }\n\n        if (memoryManagerMXBean == null) {\n            throw PlatformMBeanLogger.ROOT_LOGGER.unknownMemoryManager(mmName);\n        }\n\n        if (PlatformMBeanConstants.OBJECT_NAME.getName().equals(name)) {\n            final String objName = PlatformMBeanUtil.getObjectNameStringWithNameKey(ManagementFactory.MEMORY_MANAGER_MXBEAN_DOMAIN_TYPE, mmName);\n            context.getResult().set(objName);\n        } else if (ModelDescriptionConstants.NAME.equals(name)) {\n            context.getResult().set(escapeMBeanName(memoryManagerMXBean.getName()));\n        } else if (PlatformMBeanConstants.VALID.getName().equals(name)) {\n            context.getResult().set(memoryManagerMXBean.isValid());\n        } else if (PlatformMBeanConstants.MEMORY_POOL_NAMES.equals(name)) {\n            final ModelNode result = context.getResult();\n            result.setEmptyList();\n            for (String pool : memoryManagerMXBean.getMemoryPoolNames()) {\n                result.add(escapeMBeanName(pool));\n            }\n        } else if (MemoryManagerResourceDefinition.MEMORY_MANAGER_READ_ATTRIBUTES.contains(name)) {\n            // Bug\n            throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(name);\n        } else {\n            // Shouldn't happen; the global handler should reject\n            throw unknownAttribute(operation);\n        }\n\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {\n            registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, MemoryManagerMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, MemoryManagerMXBeanAttributeHandler.INSTANCE);\n        }\n    }","id":96704,"modified_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, MemoryManagerMXBeanAttributeHandler.INSTANCE);\n\n        for (AttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, MemoryManagerMXBeanAttributeHandler.INSTANCE);\n        }\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"static void storeResult(final String name, final ModelNode store, final MemoryPoolMXBean memoryPoolMXBean, final String memPoolName) {\n\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.OBJECT_NAME.getName().equals(name)) {\n            final String objName = PlatformMBeanUtil.getObjectNameStringWithNameKey(ManagementFactory.MEMORY_POOL_MXBEAN_DOMAIN_TYPE, memPoolName);\n            store.set(objName);\n        } else if (ModelDescriptionConstants.NAME.equals(name)) {\n            store.set(escapeMBeanName(memoryPoolMXBean.getName()));\n        } else if (PlatformMBeanConstants.TYPE.equals(name)) {\n            store.set(memoryPoolMXBean.getType().name());\n        } else if (PlatformMBeanConstants.USAGE.equals(name)) {\n            final ModelNode usage = PlatformMBeanUtil.getDetypedMemoryUsage(memoryPoolMXBean.getUsage());\n            store.set(usage);\n        } else if (PlatformMBeanConstants.PEAK_USAGE.equals(name)) {\n            final ModelNode usage = PlatformMBeanUtil.getDetypedMemoryUsage(memoryPoolMXBean.getPeakUsage());\n            store.set(usage);\n        } else if (PlatformMBeanConstants.VALID.getName().equals(name)) {\n            store.set(memoryPoolMXBean.isValid());\n        } else if (PlatformMBeanConstants.MEMORY_MANAGER_NAMES.equals(name)) {\n            store.setEmptyList();\n            for (String mgr : memoryPoolMXBean.getMemoryManagerNames()) {\n                store.add(escapeMBeanName(mgr));\n            }\n        } else if (PlatformMBeanConstants.USAGE_THRESHOLD.equals(name)) {\n            store.set(memoryPoolMXBean.getUsageThreshold());\n        } else if (PlatformMBeanConstants.USAGE_THRESHOLD_EXCEEDED.equals(name)) {\n            store.set(memoryPoolMXBean.isUsageThresholdExceeded());\n        } else if (PlatformMBeanConstants.USAGE_THRESHOLD_COUNT.equals(name)) {\n            store.set(memoryPoolMXBean.getUsageThresholdCount());\n        } else if (PlatformMBeanConstants.USAGE_THRESHOLD_SUPPORTED.equals(name)) {\n            store.set(memoryPoolMXBean.isUsageThresholdSupported());\n        } else if (PlatformMBeanConstants.COLLECTION_USAGE_THRESHOLD.equals(name)) {\n            store.set(memoryPoolMXBean.getCollectionUsageThreshold());\n        } else if (PlatformMBeanConstants.COLLECTION_USAGE_THRESHOLD_EXCEEDED.equals(name)) {\n            store.set(memoryPoolMXBean.isCollectionUsageThresholdExceeded());\n        } else if (PlatformMBeanConstants.COLLECTION_USAGE_THRESHOLD_COUNT.equals(name)) {\n            store.set(memoryPoolMXBean.getCollectionUsageThresholdCount());\n        } else if (PlatformMBeanConstants.COLLECTION_USAGE_THRESHOLD_SUPPORTED.equals(name)) {\n            store.set(memoryPoolMXBean.isCollectionUsageThresholdSupported());\n        } else if (PlatformMBeanConstants.COLLECTION_USAGE.equals(name)) {\n            final ModelNode usage = PlatformMBeanUtil.getDetypedMemoryUsage(memoryPoolMXBean.getCollectionUsage());\n            store.set(usage);\n        } else if (MemoryPoolResourceDefinition.MEMORY_POOL_READ_ATTRIBUTES.contains(name)\n                || MemoryPoolResourceDefinition.MEMORY_POOL_READ_WRITE_ATTRIBUTES.contains(name)\n                || MemoryPoolResourceDefinition.MEMORY_POOL_METRICS.contains(name)) {\n            // Bug\n            throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(name);\n        }\n\n    }","id":96705,"modified_method":"static void storeResult(final String name, final ModelNode store, final MemoryPoolMXBean memoryPoolMXBean, final String memPoolName) {\n\n        if (PlatformMBeanConstants.OBJECT_NAME.getName().equals(name)) {\n            final String objName = PlatformMBeanUtil.getObjectNameStringWithNameKey(ManagementFactory.MEMORY_POOL_MXBEAN_DOMAIN_TYPE, memPoolName);\n            store.set(objName);\n        } else if (ModelDescriptionConstants.NAME.equals(name)) {\n            store.set(escapeMBeanName(memoryPoolMXBean.getName()));\n        } else if (PlatformMBeanConstants.TYPE.equals(name)) {\n            store.set(memoryPoolMXBean.getType().name());\n        } else if (PlatformMBeanConstants.USAGE.equals(name)) {\n            final ModelNode usage = PlatformMBeanUtil.getDetypedMemoryUsage(memoryPoolMXBean.getUsage());\n            store.set(usage);\n        } else if (PlatformMBeanConstants.PEAK_USAGE.equals(name)) {\n            final ModelNode usage = PlatformMBeanUtil.getDetypedMemoryUsage(memoryPoolMXBean.getPeakUsage());\n            store.set(usage);\n        } else if (PlatformMBeanConstants.VALID.getName().equals(name)) {\n            store.set(memoryPoolMXBean.isValid());\n        } else if (PlatformMBeanConstants.MEMORY_MANAGER_NAMES.equals(name)) {\n            store.setEmptyList();\n            for (String mgr : memoryPoolMXBean.getMemoryManagerNames()) {\n                store.add(escapeMBeanName(mgr));\n            }\n        } else if (PlatformMBeanConstants.USAGE_THRESHOLD.equals(name)) {\n            store.set(memoryPoolMXBean.getUsageThreshold());\n        } else if (PlatformMBeanConstants.USAGE_THRESHOLD_EXCEEDED.equals(name)) {\n            store.set(memoryPoolMXBean.isUsageThresholdExceeded());\n        } else if (PlatformMBeanConstants.USAGE_THRESHOLD_COUNT.equals(name)) {\n            store.set(memoryPoolMXBean.getUsageThresholdCount());\n        } else if (PlatformMBeanConstants.USAGE_THRESHOLD_SUPPORTED.equals(name)) {\n            store.set(memoryPoolMXBean.isUsageThresholdSupported());\n        } else if (PlatformMBeanConstants.COLLECTION_USAGE_THRESHOLD.equals(name)) {\n            store.set(memoryPoolMXBean.getCollectionUsageThreshold());\n        } else if (PlatformMBeanConstants.COLLECTION_USAGE_THRESHOLD_EXCEEDED.equals(name)) {\n            store.set(memoryPoolMXBean.isCollectionUsageThresholdExceeded());\n        } else if (PlatformMBeanConstants.COLLECTION_USAGE_THRESHOLD_COUNT.equals(name)) {\n            store.set(memoryPoolMXBean.getCollectionUsageThresholdCount());\n        } else if (PlatformMBeanConstants.COLLECTION_USAGE_THRESHOLD_SUPPORTED.equals(name)) {\n            store.set(memoryPoolMXBean.isCollectionUsageThresholdSupported());\n        } else if (PlatformMBeanConstants.COLLECTION_USAGE.equals(name)) {\n            final ModelNode usage = PlatformMBeanUtil.getDetypedMemoryUsage(memoryPoolMXBean.getCollectionUsage());\n            store.set(usage);\n        } else if (MemoryPoolResourceDefinition.MEMORY_POOL_READ_ATTRIBUTES.contains(name)\n                || MemoryPoolResourceDefinition.MEMORY_POOL_READ_WRITE_ATTRIBUTES.contains(name)\n                || MemoryPoolResourceDefinition.MEMORY_POOL_METRICS.contains(name)) {\n            // Bug\n            throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(name);\n        }\n\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String memPoolName = PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement().getValue();\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        try {\n            if ((PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.OBJECT_NAME.getName().equals(name))\n                    || MemoryPoolResourceDefinition.MEMORY_POOL_READ_ATTRIBUTES.contains(name)\n                    || MemoryPoolResourceDefinition.MEMORY_POOL_READ_WRITE_ATTRIBUTES.contains(name)\n                    || MemoryPoolResourceDefinition.MEMORY_POOL_METRICS.contains(name)) {\n                MemoryPoolMXBean memoryPoolMXBean = getMemoryPoolMXBean(memPoolName);\n                storeResult(name, context.getResult(), memoryPoolMXBean, memPoolName);\n            } else {\n                // Shouldn't happen; the global handler should reject\n                throw unknownAttribute(operation);\n            }\n        } catch (UnsupportedOperationException e) {\n            throw new OperationFailedException(new ModelNode().set(e.toString()));\n        }\n\n    }","id":96706,"modified_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String memPoolName = PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement().getValue();\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        try {\n            if ((PlatformMBeanConstants.OBJECT_NAME.getName().equals(name))\n                    || MemoryPoolResourceDefinition.MEMORY_POOL_READ_ATTRIBUTES.contains(name)\n                    || MemoryPoolResourceDefinition.MEMORY_POOL_READ_WRITE_ATTRIBUTES.contains(name)\n                    || MemoryPoolResourceDefinition.MEMORY_POOL_METRICS.contains(name)) {\n                MemoryPoolMXBean memoryPoolMXBean = getMemoryPoolMXBean(memPoolName);\n                storeResult(name, context.getResult(), memoryPoolMXBean, memPoolName);\n            } else {\n                // Shouldn't happen; the global handler should reject\n                throw unknownAttribute(operation);\n            }\n        } catch (UnsupportedOperationException e) {\n            throw new OperationFailedException(new ModelNode().set(e.toString()));\n        }\n\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String memPoolName = PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement().getValue();\n\n        MemoryPoolMXBean memoryPoolMXBean = MemoryPoolMXBeanAttributeHandler.getMemoryPoolMXBean(memPoolName);\n\n        final ModelNode result = context.getResult();\n\n        for (String attribute : MemoryPoolResourceDefinition.MEMORY_POOL_READ_ATTRIBUTES) {\n            final ModelNode store = result.get(attribute);\n            try {\n                MemoryPoolMXBeanAttributeHandler.storeResult(attribute, store, memoryPoolMXBean, memPoolName);\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        for (String attribute : MemoryPoolResourceDefinition.MEMORY_POOL_READ_WRITE_ATTRIBUTES) {\n            final ModelNode store = result.get(attribute);\n            try {\n                MemoryPoolMXBeanAttributeHandler.storeResult(attribute, store, memoryPoolMXBean, memPoolName);\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        for (String attribute : MemoryPoolResourceDefinition.MEMORY_POOL_METRICS) {\n            final ModelNode store = result.get(attribute);\n            try {\n                MemoryPoolMXBeanAttributeHandler.storeResult(attribute, store, memoryPoolMXBean, memPoolName);\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {\n            final ModelNode store = result.get(PlatformMBeanConstants.OBJECT_NAME.getName());\n            MemoryPoolMXBeanAttributeHandler.storeResult(PlatformMBeanConstants.OBJECT_NAME.getName(), store, memoryPoolMXBean, memPoolName);\n        }\n\n        context.stepCompleted();\n    }","id":96707,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String memPoolName = PathAddress.pathAddress(operation.require(ModelDescriptionConstants.OP_ADDR)).getLastElement().getValue();\n\n        MemoryPoolMXBean memoryPoolMXBean = MemoryPoolMXBeanAttributeHandler.getMemoryPoolMXBean(memPoolName);\n\n        final ModelNode result = context.getResult();\n\n        for (String attribute : MemoryPoolResourceDefinition.MEMORY_POOL_READ_ATTRIBUTES) {\n            final ModelNode store = result.get(attribute);\n            try {\n                MemoryPoolMXBeanAttributeHandler.storeResult(attribute, store, memoryPoolMXBean, memPoolName);\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        for (String attribute : MemoryPoolResourceDefinition.MEMORY_POOL_READ_WRITE_ATTRIBUTES) {\n            final ModelNode store = result.get(attribute);\n            try {\n                MemoryPoolMXBeanAttributeHandler.storeResult(attribute, store, memoryPoolMXBean, memPoolName);\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        for (String attribute : MemoryPoolResourceDefinition.MEMORY_POOL_METRICS) {\n            final ModelNode store = result.get(attribute);\n            try {\n                MemoryPoolMXBeanAttributeHandler.storeResult(attribute, store, memoryPoolMXBean, memPoolName);\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n        final ModelNode store = result.get(PlatformMBeanConstants.OBJECT_NAME.getName());\n        MemoryPoolMXBeanAttributeHandler.storeResult(PlatformMBeanConstants.OBJECT_NAME.getName(), store, memoryPoolMXBean, memPoolName);\n\n\n        context.stepCompleted();\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {\n            registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, MemoryMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition attribute : READ_WRITE_ATTRIBUTES) {\n            registration.registerReadWriteAttribute(attribute, MemoryPoolMXBeanAttributeHandler.INSTANCE, MemoryPoolMXBeanAttributeHandler.INSTANCE);\n        }\n        for (AttributeDefinition attribute : READ_ATTRIBUTES) {\n            registration.registerReadOnlyAttribute(attribute, MemoryPoolMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, MemoryPoolMXBeanAttributeHandler.INSTANCE);\n        }\n    }","id":96708,"modified_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, MemoryMXBeanAttributeHandler.INSTANCE);\n\n        for (AttributeDefinition attribute : READ_WRITE_ATTRIBUTES) {\n            registration.registerReadWriteAttribute(attribute, MemoryPoolMXBeanAttributeHandler.INSTANCE, MemoryPoolMXBeanAttributeHandler.INSTANCE);\n        }\n        for (AttributeDefinition attribute : READ_ATTRIBUTES) {\n            registration.registerReadOnlyAttribute(attribute, MemoryPoolMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, MemoryPoolMXBeanAttributeHandler.INSTANCE);\n        }\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {\n            registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, MemoryMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition attribute : READ_WRITE_ATTRIBUTES) {\n            registration.registerReadWriteAttribute(attribute, MemoryMXBeanAttributeHandler.INSTANCE, MemoryMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (SimpleAttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, MemoryMXBeanAttributeHandler.INSTANCE);\n        }\n    }","id":96709,"modified_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, MemoryMXBeanAttributeHandler.INSTANCE);\n\n        for (AttributeDefinition attribute : READ_WRITE_ATTRIBUTES) {\n            registration.registerReadWriteAttribute(attribute, MemoryMXBeanAttributeHandler.INSTANCE, MemoryMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (SimpleAttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, MemoryMXBeanAttributeHandler.INSTANCE);\n        }\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"static void storeResult(final String name, final ModelNode store) {\n\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.OBJECT_NAME.getName().equals(name)) {\n            store.set(ManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME);\n        } else if (ModelDescriptionConstants.NAME.equals(name)) {\n            store.set(ManagementFactory.getOperatingSystemMXBean().getName());\n        } else if (PlatformMBeanConstants.ARCH.equals(name)) {\n            store.set(ManagementFactory.getOperatingSystemMXBean().getArch());\n        } else if (PlatformMBeanConstants.VERSION.equals(name)) {\n            store.set(ManagementFactory.getOperatingSystemMXBean().getVersion());\n        } else if (PlatformMBeanConstants.AVAILABLE_PROCESSORS.equals(name)) {\n            store.set(ManagementFactory.getOperatingSystemMXBean().getAvailableProcessors());\n        } else if (PlatformMBeanConstants.SYSTEM_LOAD_AVERAGE.equals(name)) {\n            store.set(ManagementFactory.getOperatingSystemMXBean().getSystemLoadAverage());\n        } else if (OperatingSystemResourceDefinition.OPERATING_SYSTEM_READ_ATTRIBUTES.contains(name)\n                || OperatingSystemResourceDefinition.OPERATING_SYSTEM_METRICS.contains(name)) {\n            // Bug\n            throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(name);\n        }\n    }","id":96710,"modified_method":"static void storeResult(final String name, final ModelNode store) {\n\n        if (PlatformMBeanConstants.OBJECT_NAME.getName().equals(name)) {\n            store.set(ManagementFactory.OPERATING_SYSTEM_MXBEAN_NAME);\n        } else if (ModelDescriptionConstants.NAME.equals(name)) {\n            store.set(ManagementFactory.getOperatingSystemMXBean().getName());\n        } else if (PlatformMBeanConstants.ARCH.equals(name)) {\n            store.set(ManagementFactory.getOperatingSystemMXBean().getArch());\n        } else if (PlatformMBeanConstants.VERSION.equals(name)) {\n            store.set(ManagementFactory.getOperatingSystemMXBean().getVersion());\n        } else if (PlatformMBeanConstants.AVAILABLE_PROCESSORS.equals(name)) {\n            store.set(ManagementFactory.getOperatingSystemMXBean().getAvailableProcessors());\n        } else if (PlatformMBeanConstants.SYSTEM_LOAD_AVERAGE.equals(name)) {\n            store.set(ManagementFactory.getOperatingSystemMXBean().getSystemLoadAverage());\n        } else if (OperatingSystemResourceDefinition.OPERATING_SYSTEM_READ_ATTRIBUTES.contains(name)\n                || OperatingSystemResourceDefinition.OPERATING_SYSTEM_METRICS.contains(name)) {\n            // Bug\n            throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(name);\n        }\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        try {\n            if ((PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.OBJECT_NAME.getName().equals(name))\n                    || OperatingSystemResourceDefinition.OPERATING_SYSTEM_READ_ATTRIBUTES.contains(name)\n                    || OperatingSystemResourceDefinition.OPERATING_SYSTEM_METRICS.contains(name)) {\n                storeResult(name, context.getResult());\n            } else {\n                // Shouldn't happen; the global handler should reject\n                throw unknownAttribute(operation);\n            }\n        } catch (SecurityException e) {\n            throw new OperationFailedException(new ModelNode().set(e.toString()));\n        }\n\n    }","id":96711,"modified_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        try {\n            if ((PlatformMBeanConstants.OBJECT_NAME.getName().equals(name))\n                    || OperatingSystemResourceDefinition.OPERATING_SYSTEM_READ_ATTRIBUTES.contains(name)\n                    || OperatingSystemResourceDefinition.OPERATING_SYSTEM_METRICS.contains(name)) {\n                storeResult(name, context.getResult());\n            } else {\n                // Shouldn't happen; the global handler should reject\n                throw unknownAttribute(operation);\n            }\n        } catch (SecurityException e) {\n            throw new OperationFailedException(new ModelNode().set(e.toString()));\n        }\n\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final ModelNode result = context.getResult();\n\n        for (String attribute : OperatingSystemResourceDefinition.OPERATING_SYSTEM_READ_ATTRIBUTES) {\n            final ModelNode store = result.get(attribute);\n            try {\n                OperatingSystemMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (SecurityException ignored) {\n                // just leave it undefined\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        for (String attribute : OperatingSystemResourceDefinition.OPERATING_SYSTEM_METRICS) {\n            final ModelNode store = result.get(attribute);\n            try {\n                OperatingSystemMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (SecurityException ignored) {\n                // just leave it undefined\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {\n            final ModelNode store = result.get(PlatformMBeanConstants.OBJECT_NAME.getName());\n            OperatingSystemMXBeanAttributeHandler.storeResult(PlatformMBeanConstants.OBJECT_NAME.getName(), store);\n        }\n\n        context.stepCompleted();\n    }","id":96712,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final ModelNode result = context.getResult();\n\n        for (String attribute : OperatingSystemResourceDefinition.OPERATING_SYSTEM_READ_ATTRIBUTES) {\n            final ModelNode store = result.get(attribute);\n            try {\n                OperatingSystemMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (SecurityException ignored) {\n                // just leave it undefined\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        for (String attribute : OperatingSystemResourceDefinition.OPERATING_SYSTEM_METRICS) {\n            final ModelNode store = result.get(attribute);\n            try {\n                OperatingSystemMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (SecurityException ignored) {\n                // just leave it undefined\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        final ModelNode store = result.get(PlatformMBeanConstants.OBJECT_NAME.getName());\n        OperatingSystemMXBeanAttributeHandler.storeResult(PlatformMBeanConstants.OBJECT_NAME.getName(), store);\n\n        context.stepCompleted();\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {\n            registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, OperatingSystemMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition attribute : READ_ATTRIBUTES) {\n            registration.registerReadOnlyAttribute(attribute, OperatingSystemMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (SimpleAttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, OperatingSystemMXBeanAttributeHandler.INSTANCE);\n        }\n    }","id":96713,"modified_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, OperatingSystemMXBeanAttributeHandler.INSTANCE);\n\n        for (AttributeDefinition attribute : READ_ATTRIBUTES) {\n            registration.registerReadOnlyAttribute(attribute, OperatingSystemMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (SimpleAttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, OperatingSystemMXBeanAttributeHandler.INSTANCE);\n        }\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerChildren(ManagementResourceRegistration resourceRegistration) {\n        super.registerChildren(resourceRegistration);\n        resourceRegistration.registerSubModel(ClassLoadingResourceDefinition.INSTANCE);\n        if (ManagementFactory.getCompilationMXBean() != null) {\n            resourceRegistration.registerSubModel(CompilationResourceDefinition.INSTANCE);\n        }\n        resourceRegistration.registerSubModel(GarbageCollectorRootResourceDefinition.INSTANCE);\n        resourceRegistration.registerSubModel(MemoryManagerRootResourceDefinition.INSTANCE);\n        resourceRegistration.registerSubModel(MemoryResourceDefinition.INSTANCE);\n        resourceRegistration.registerSubModel(MemoryPoolRootResourceDefinition.INSTANCE);\n        resourceRegistration.registerSubModel(OperatingSystemResourceDefinition.INSTANCE);\n        resourceRegistration.registerSubModel(RuntimeResourceDefinition.INSTANCE);\n        resourceRegistration.registerSubModel(ThreadResourceDefinition.INSTANCE);\n\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {\n            resourceRegistration.registerSubModel(BufferPoolRootResourceDefinition.INSTANCE);\n        }\n    }","id":96714,"modified_method":"@Override\n    public void registerChildren(ManagementResourceRegistration resourceRegistration) {\n        super.registerChildren(resourceRegistration);\n        resourceRegistration.registerSubModel(ClassLoadingResourceDefinition.INSTANCE);\n        if (ManagementFactory.getCompilationMXBean() != null) {\n            resourceRegistration.registerSubModel(CompilationResourceDefinition.INSTANCE);\n        }\n        resourceRegistration.registerSubModel(GarbageCollectorRootResourceDefinition.INSTANCE);\n        resourceRegistration.registerSubModel(MemoryManagerRootResourceDefinition.INSTANCE);\n        resourceRegistration.registerSubModel(MemoryResourceDefinition.INSTANCE);\n        resourceRegistration.registerSubModel(MemoryPoolRootResourceDefinition.INSTANCE);\n        resourceRegistration.registerSubModel(OperatingSystemResourceDefinition.INSTANCE);\n        resourceRegistration.registerSubModel(RuntimeResourceDefinition.INSTANCE);\n        resourceRegistration.registerSubModel(ThreadResourceDefinition.INSTANCE);\n\n        resourceRegistration.registerSubModel(BufferPoolRootResourceDefinition.INSTANCE);\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testRootResource() throws IOException {\n        ModelNode op = getOperation(READ_RESOURCE_DESCRIPTION_OPERATION, null, null);\n        op.get(RECURSIVE).set(true);\n        op.get(OPERATIONS).set(true);\n\n        ModelNode result = executeOp(op, false);\n        Assert.assertTrue(result.isDefined());\n\n        int baseTypeCount = PlatformMBeanConstants.JDK_NOCOMPILATION_TYPES.size();\n        if (ManagementFactory.getCompilationMXBean() != null) {\n            baseTypeCount++;\n        }\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {\n            baseTypeCount += 1;\n        }\n        final ModelNode childTypes = result.get(CHILDREN, TYPE, MODEL_DESCRIPTION);\n        Assert.assertEquals(baseTypeCount, childTypes.asPropertyList().size());\n\n        op = getOperation(READ_CHILDREN_NAMES_OPERATION, null, null);\n        op.get(CHILD_TYPE).set(PlatformMBeanConstants.TYPE);\n\n        result = executeOp(op, false);\n        Assert.assertTrue(result.isDefined());\n        Assert.assertEquals(baseTypeCount, result.asList().size());\n\n        op = getOperation(READ_CHILDREN_RESOURCES_OPERATION, null, null);\n        op.get(CHILD_TYPE).set(PlatformMBeanConstants.TYPE);\n\n        result = executeOp(op, false);\n        Assert.assertTrue(result.isDefined());\n        Assert.assertEquals(baseTypeCount, result.asPropertyList().size());\n\n        op = getOperation(READ_CHILDREN_TYPES_OPERATION, null, null);\n\n        result = executeOp(op, false);\n        Assert.assertTrue(result.isDefined());\n        Assert.assertEquals(1, result.asList().size());\n        Assert.assertEquals(TYPE, result.get(0).asString());\n\n        op = getOperation(READ_RESOURCE_OPERATION, null, null);\n        op.get(INCLUDE_RUNTIME).set(true);\n\n        result = executeOp(op, false);\n        Assert.assertTrue(result.isDefined());\n    }","id":96715,"modified_method":"@Test\n    public void testRootResource() throws IOException {\n        ModelNode op = getOperation(READ_RESOURCE_DESCRIPTION_OPERATION, null, null);\n        op.get(RECURSIVE).set(true);\n        op.get(OPERATIONS).set(true);\n\n        ModelNode result = executeOp(op, false);\n        Assert.assertTrue(result.isDefined());\n\n        int baseTypeCount = PlatformMBeanConstants.JDK_NOCOMPILATION_TYPES.size();\n        if (ManagementFactory.getCompilationMXBean() != null) {\n            baseTypeCount++;\n        }\n        baseTypeCount += 1;\n        final ModelNode childTypes = result.get(CHILDREN, TYPE, MODEL_DESCRIPTION);\n        Assert.assertEquals(baseTypeCount, childTypes.asPropertyList().size());\n\n        op = getOperation(READ_CHILDREN_NAMES_OPERATION, null, null);\n        op.get(CHILD_TYPE).set(PlatformMBeanConstants.TYPE);\n\n        result = executeOp(op, false);\n        Assert.assertTrue(result.isDefined());\n        Assert.assertEquals(baseTypeCount, result.asList().size());\n\n        op = getOperation(READ_CHILDREN_RESOURCES_OPERATION, null, null);\n        op.get(CHILD_TYPE).set(PlatformMBeanConstants.TYPE);\n\n        result = executeOp(op, false);\n        Assert.assertTrue(result.isDefined());\n        Assert.assertEquals(baseTypeCount, result.asPropertyList().size());\n\n        op = getOperation(READ_CHILDREN_TYPES_OPERATION, null, null);\n\n        result = executeOp(op, false);\n        Assert.assertTrue(result.isDefined());\n        Assert.assertEquals(1, result.asList().size());\n        Assert.assertEquals(TYPE, result.get(0).asString());\n\n        op = getOperation(READ_RESOURCE_OPERATION, null, null);\n        op.get(INCLUDE_RUNTIME).set(true);\n\n        result = executeOp(op, false);\n        Assert.assertTrue(result.isDefined());\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"ResourceEntry getChildEntry(String name) {\n\n        if (PlatformMBeanConstants.CLASS_LOADING.equals(name)) {\n            return new LeafPlatformMBeanResource(PlatformMBeanConstants.CLASS_LOADING_PATH);\n        } else if (PlatformMBeanConstants.COMPILATION.equals(name) && ManagementFactory.getCompilationMXBean() != null) {\n            return new LeafPlatformMBeanResource(PlatformMBeanConstants.COMPILATION_PATH);\n        } else if (PlatformMBeanConstants.GARBAGE_COLLECTOR.equals(name)) {\n            return new GarbageCollectorMXBeanResource();\n        } else if (PlatformMBeanConstants.MEMORY.equals(name)) {\n            return new LeafPlatformMBeanResource(PlatformMBeanConstants.MEMORY_PATH);\n        } else if (PlatformMBeanConstants.MEMORY_MANAGER.equals(name)) {\n            return new MemoryManagerMXBeanResource();\n        } else if (PlatformMBeanConstants.MEMORY_POOL.equals(name)) {\n            return new MemoryPoolMXBeanResource();\n        } else if (PlatformMBeanConstants.OPERATING_SYSTEM.equals(name)) {\n            return new LeafPlatformMBeanResource(PlatformMBeanConstants.OPERATING_SYSTEM_PATH);\n        } else if (PlatformMBeanConstants.RUNTIME.equals(name)) {\n            return new LeafPlatformMBeanResource(PlatformMBeanConstants.RUNTIME_PATH);\n        } else if (PlatformMBeanConstants.THREADING.equals(name)) {\n            return new LeafPlatformMBeanResource(PlatformMBeanConstants.THREADING_PATH);\n        } else if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.BUFFER_POOL.equals(name)) {\n            return new BufferPoolMXBeanResource();\n        } else if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.LOGGING.equals(name)) {\n            return new LeafPlatformMBeanResource(PlatformMBeanConstants.LOGGING_PATH);\n        } else {\n            return null;\n        }\n    }","id":96716,"modified_method":"ResourceEntry getChildEntry(String name) {\n\n        if (PlatformMBeanConstants.CLASS_LOADING.equals(name)) {\n            return new LeafPlatformMBeanResource(PlatformMBeanConstants.CLASS_LOADING_PATH);\n        } else if (PlatformMBeanConstants.COMPILATION.equals(name) && ManagementFactory.getCompilationMXBean() != null) {\n            return new LeafPlatformMBeanResource(PlatformMBeanConstants.COMPILATION_PATH);\n        } else if (PlatformMBeanConstants.GARBAGE_COLLECTOR.equals(name)) {\n            return new GarbageCollectorMXBeanResource();\n        } else if (PlatformMBeanConstants.MEMORY.equals(name)) {\n            return new LeafPlatformMBeanResource(PlatformMBeanConstants.MEMORY_PATH);\n        } else if (PlatformMBeanConstants.MEMORY_MANAGER.equals(name)) {\n            return new MemoryManagerMXBeanResource();\n        } else if (PlatformMBeanConstants.MEMORY_POOL.equals(name)) {\n            return new MemoryPoolMXBeanResource();\n        } else if (PlatformMBeanConstants.OPERATING_SYSTEM.equals(name)) {\n            return new LeafPlatformMBeanResource(PlatformMBeanConstants.OPERATING_SYSTEM_PATH);\n        } else if (PlatformMBeanConstants.RUNTIME.equals(name)) {\n            return new LeafPlatformMBeanResource(PlatformMBeanConstants.RUNTIME_PATH);\n        } else if (PlatformMBeanConstants.THREADING.equals(name)) {\n            return new LeafPlatformMBeanResource(PlatformMBeanConstants.THREADING_PATH);\n        } else if (PlatformMBeanConstants.BUFFER_POOL.equals(name)) {\n            return new BufferPoolMXBeanResource();\n        } else if (PlatformMBeanConstants.LOGGING.equals(name)) {\n            return new LeafPlatformMBeanResource(PlatformMBeanConstants.LOGGING_PATH);\n        } else {\n            return null;\n        }\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"static void storeResult(final String name, final ModelNode store) {\n\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.OBJECT_NAME.getName().equals(name)) {\n            store.set(ManagementFactory.RUNTIME_MXBEAN_NAME);\n        } else if (ModelDescriptionConstants.NAME.equals(name)) {\n           String runtimeName;\n           try {\n              runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n           } catch (ArrayIndexOutOfBoundsException e) {\n              // Workaround for OSX issue\n              String localAddr;\n              try {\n                 localAddr = InetAddress.getByName(null).toString();\n              } catch (UnknownHostException uhe) {\n                 localAddr = \"localhost\";\n              }\n              runtimeName = new Random().nextInt() + \"@\" + localAddr;\n           }\n           store.set(runtimeName);\n        } else if (PlatformMBeanConstants.VM_NAME.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getVmName());\n        } else if (PlatformMBeanConstants.VM_VENDOR.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getVmVendor());\n        } else if (PlatformMBeanConstants.VM_VERSION.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getVmVersion());\n        } else if (PlatformMBeanConstants.SPEC_NAME.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getSpecName());\n        } else if (PlatformMBeanConstants.SPEC_VENDOR.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getSpecVendor());\n        } else if (PlatformMBeanConstants.SPEC_VERSION.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getSpecVersion());\n        } else if (PlatformMBeanConstants.MANAGEMENT_SPEC_VERSION.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getManagementSpecVersion());\n        } else if (PlatformMBeanConstants.CLASS_PATH.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getClassPath());\n        } else if (PlatformMBeanConstants.LIBRARY_PATH.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getLibraryPath());\n        } else if (PlatformMBeanConstants.BOOT_CLASS_PATH_SUPPORTED.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().isBootClassPathSupported());\n        } else if (PlatformMBeanConstants.BOOT_CLASS_PATH.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getBootClassPath());\n        } else if (PlatformMBeanConstants.INPUT_ARGUMENTS.equals(name)) {\n            store.setEmptyList();\n            for (String arg : ManagementFactory.getRuntimeMXBean().getInputArguments()) {\n                store.add(arg);\n            }\n        } else if (PlatformMBeanConstants.UPTIME.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getUptime());\n        } else if (PlatformMBeanConstants.START_TIME.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getStartTime());\n        } else if (PlatformMBeanConstants.SYSTEM_PROPERTIES.equals(name)) {\n            store.setEmptyObject();\n            final TreeMap<String, String> sorted = new TreeMap<String, String>(ManagementFactory.getRuntimeMXBean().getSystemProperties());\n            for (Map.Entry<String, String> prop : sorted.entrySet()) {\n                final ModelNode propNode = store.get(prop.getKey());\n                if (prop.getValue() != null) {\n                    propNode.set(prop.getValue());\n                }\n            }\n        } else if (RuntimeResourceDefinition.RUNTIME_READ_ATTRIBUTES.contains(name)\n                || RuntimeResourceDefinition.RUNTIME_METRICS.contains(name)) {\n            // Bug\n            throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(name);\n        }\n\n    }","id":96717,"modified_method":"static void storeResult(final String name, final ModelNode store) {\n\n        if (PlatformMBeanConstants.OBJECT_NAME.getName().equals(name)) {\n            store.set(ManagementFactory.RUNTIME_MXBEAN_NAME);\n        } else if (ModelDescriptionConstants.NAME.equals(name)) {\n           String runtimeName;\n           try {\n              runtimeName = ManagementFactory.getRuntimeMXBean().getName();\n           } catch (ArrayIndexOutOfBoundsException e) {\n              // Workaround for OSX issue\n              String localAddr;\n              try {\n                 localAddr = InetAddress.getByName(null).toString();\n              } catch (UnknownHostException uhe) {\n                 localAddr = \"localhost\";\n              }\n              runtimeName = new Random().nextInt() + \"@\" + localAddr;\n           }\n           store.set(runtimeName);\n        } else if (PlatformMBeanConstants.VM_NAME.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getVmName());\n        } else if (PlatformMBeanConstants.VM_VENDOR.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getVmVendor());\n        } else if (PlatformMBeanConstants.VM_VERSION.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getVmVersion());\n        } else if (PlatformMBeanConstants.SPEC_NAME.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getSpecName());\n        } else if (PlatformMBeanConstants.SPEC_VENDOR.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getSpecVendor());\n        } else if (PlatformMBeanConstants.SPEC_VERSION.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getSpecVersion());\n        } else if (PlatformMBeanConstants.MANAGEMENT_SPEC_VERSION.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getManagementSpecVersion());\n        } else if (PlatformMBeanConstants.CLASS_PATH.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getClassPath());\n        } else if (PlatformMBeanConstants.LIBRARY_PATH.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getLibraryPath());\n        } else if (PlatformMBeanConstants.BOOT_CLASS_PATH_SUPPORTED.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().isBootClassPathSupported());\n        } else if (PlatformMBeanConstants.BOOT_CLASS_PATH.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getBootClassPath());\n        } else if (PlatformMBeanConstants.INPUT_ARGUMENTS.equals(name)) {\n            store.setEmptyList();\n            for (String arg : ManagementFactory.getRuntimeMXBean().getInputArguments()) {\n                store.add(arg);\n            }\n        } else if (PlatformMBeanConstants.UPTIME.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getUptime());\n        } else if (PlatformMBeanConstants.START_TIME.equals(name)) {\n            store.set(ManagementFactory.getRuntimeMXBean().getStartTime());\n        } else if (PlatformMBeanConstants.SYSTEM_PROPERTIES.equals(name)) {\n            store.setEmptyObject();\n            final TreeMap<String, String> sorted = new TreeMap<>(ManagementFactory.getRuntimeMXBean().getSystemProperties());\n            for (Map.Entry<String, String> prop : sorted.entrySet()) {\n                final ModelNode propNode = store.get(prop.getKey());\n                if (prop.getValue() != null) {\n                    propNode.set(prop.getValue());\n                }\n            }\n        } else if (RuntimeResourceDefinition.RUNTIME_READ_ATTRIBUTES.contains(name)\n                || RuntimeResourceDefinition.RUNTIME_METRICS.contains(name)) {\n            // Bug\n            throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(name);\n        }\n\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        try {\n            if ((PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.OBJECT_NAME.getName().equals(name))\n                    || RuntimeResourceDefinition.RUNTIME_READ_ATTRIBUTES.contains(name)\n                    || RuntimeResourceDefinition.RUNTIME_METRICS.contains(name)) {\n                storeResult(name, context.getResult());\n            } else {\n                // Shouldn't happen; the global handler should reject\n                throw unknownAttribute(operation);\n            }\n        } catch (SecurityException e) {\n            throw new OperationFailedException(new ModelNode().set(e.toString()));\n        } catch (UnsupportedOperationException e) {\n            throw new OperationFailedException(new ModelNode().set(e.toString()));\n        }\n\n    }","id":96718,"modified_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        try {\n            if ((PlatformMBeanConstants.OBJECT_NAME.getName().equals(name))\n                    || RuntimeResourceDefinition.RUNTIME_READ_ATTRIBUTES.contains(name)\n                    || RuntimeResourceDefinition.RUNTIME_METRICS.contains(name)) {\n                storeResult(name, context.getResult());\n            } else {\n                // Shouldn't happen; the global handler should reject\n                throw unknownAttribute(operation);\n            }\n        } catch (SecurityException | UnsupportedOperationException e) {\n            throw new OperationFailedException(new ModelNode().set(e.toString()));\n        }\n\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final ModelNode result = context.getResult();\n\n        for (String attribute : RuntimeResourceDefinition.RUNTIME_READ_ATTRIBUTES) {\n            final ModelNode store = result.get(attribute);\n            try {\n                RuntimeMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (SecurityException ignored) {\n                // just leave it undefined\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        for (String attribute : RuntimeResourceDefinition.RUNTIME_METRICS) {\n            final ModelNode store = result.get(attribute);\n            try {\n                RuntimeMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (SecurityException ignored) {\n                // just leave it undefined\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {\n            final ModelNode store = result.get(PlatformMBeanConstants.OBJECT_NAME.getName());\n            RuntimeMXBeanAttributeHandler.storeResult(PlatformMBeanConstants.OBJECT_NAME.getName(), store);\n        }\n\n        context.stepCompleted();\n    }","id":96719,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final ModelNode result = context.getResult();\n\n        for (String attribute : RuntimeResourceDefinition.RUNTIME_READ_ATTRIBUTES) {\n            final ModelNode store = result.get(attribute);\n            try {\n                RuntimeMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (SecurityException | UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        for (String attribute : RuntimeResourceDefinition.RUNTIME_METRICS) {\n            final ModelNode store = result.get(attribute);\n            try {\n                RuntimeMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (SecurityException | UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n        final ModelNode store = result.get(PlatformMBeanConstants.OBJECT_NAME.getName());\n        RuntimeMXBeanAttributeHandler.storeResult(PlatformMBeanConstants.OBJECT_NAME.getName(), store);\n\n        context.stepCompleted();\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        try {\n            if ((PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.OBJECT_NAME.getName().equals(name))\n                    || ThreadResourceDefinition.THREADING_READ_ATTRIBUTES.contains(name)\n                    || ThreadResourceDefinition.THREADING_READ_WRITE_ATTRIBUTES.contains(name)\n                    || ThreadResourceDefinition.THREADING_METRICS.contains(name)) {\n                storeResult(name, context.getResult());\n            } else {\n                // Shouldn't happen; the global handler should reject\n                throw unknownAttribute(operation);\n            }\n        } catch (SecurityException e) {\n            throw new OperationFailedException(new ModelNode().set(e.toString()));\n        } catch (UnsupportedOperationException e) {\n            throw new OperationFailedException(new ModelNode().set(e.toString()));\n        }\n\n    }","id":96720,"modified_method":"@Override\n    protected void executeReadAttribute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final String name = operation.require(ModelDescriptionConstants.NAME).asString();\n\n        try {\n            if ((PlatformMBeanConstants.OBJECT_NAME.getName().equals(name))\n                    || ThreadResourceDefinition.THREADING_READ_ATTRIBUTES.contains(name)\n                    || ThreadResourceDefinition.THREADING_READ_WRITE_ATTRIBUTES.contains(name)\n                    || ThreadResourceDefinition.THREADING_METRICS.contains(name)) {\n                storeResult(name, context.getResult());\n            } else {\n                // Shouldn't happen; the global handler should reject\n                throw unknownAttribute(operation);\n            }\n        } catch (SecurityException | UnsupportedOperationException e) {\n            throw new OperationFailedException(new ModelNode().set(e.toString()));\n        }\n\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"static void storeResult(final String name, final ModelNode store) {\n\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6 && PlatformMBeanConstants.OBJECT_NAME.getName().equals(name)) {\n            store.set(ManagementFactory.THREAD_MXBEAN_NAME);\n        } else if (PlatformMBeanConstants.THREAD_COUNT.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().getThreadCount());\n        } else if (PlatformMBeanConstants.PEAK_THREAD_COUNT.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().getPeakThreadCount());\n        } else if (PlatformMBeanConstants.TOTAL_STARTED_THREAD_COUNT.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().getTotalStartedThreadCount());\n        } else if (PlatformMBeanConstants.DAEMON_THREAD_COUNT.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().getDaemonThreadCount());\n        } else if (PlatformMBeanConstants.ALL_THREAD_IDS.equals(name)) {\n            store.setEmptyList();\n            for (Long id : ManagementFactory.getThreadMXBean().getAllThreadIds()) {\n                store.add(id);\n            }\n        } else if (PlatformMBeanConstants.THREAD_CONTENTION_MONITORING_SUPPORTED.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().isThreadContentionMonitoringSupported());\n        } else if (PlatformMBeanConstants.THREAD_CONTENTION_MONITORING_ENABLED.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().isThreadContentionMonitoringEnabled());\n        } else if (PlatformMBeanConstants.CURRENT_THREAD_CPU_TIME.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().getCurrentThreadCpuTime());\n        } else if (PlatformMBeanConstants.CURRENT_THREAD_USER_TIME.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().getCurrentThreadUserTime());\n        } else if (PlatformMBeanConstants.THREAD_CPU_TIME_SUPPORTED.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().isThreadCpuTimeSupported());\n        } else if (PlatformMBeanConstants.CURRENT_THREAD_CPU_TIME_SUPPORTED.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().isCurrentThreadCpuTimeSupported());\n        } else if (PlatformMBeanConstants.THREAD_CPU_TIME_ENABLED.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().isThreadCpuTimeEnabled());\n        } else if (PlatformMBeanConstants.OBJECT_MONITOR_USAGE_SUPPORTED.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().isObjectMonitorUsageSupported());\n        } else if (PlatformMBeanConstants.SYNCHRONIZER_USAGE_SUPPORTED.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().isSynchronizerUsageSupported());\n        } else if (ThreadResourceDefinition.THREADING_READ_ATTRIBUTES.contains(name)\n                || ThreadResourceDefinition.THREADING_READ_WRITE_ATTRIBUTES.contains(name)\n                || ThreadResourceDefinition.THREADING_METRICS.contains(name)) {\n            // Bug\n            throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(name);\n        }\n\n    }","id":96721,"modified_method":"static void storeResult(final String name, final ModelNode store) {\n\n        if (PlatformMBeanConstants.OBJECT_NAME.getName().equals(name)) {\n            store.set(ManagementFactory.THREAD_MXBEAN_NAME);\n        } else if (PlatformMBeanConstants.THREAD_COUNT.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().getThreadCount());\n        } else if (PlatformMBeanConstants.PEAK_THREAD_COUNT.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().getPeakThreadCount());\n        } else if (PlatformMBeanConstants.TOTAL_STARTED_THREAD_COUNT.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().getTotalStartedThreadCount());\n        } else if (PlatformMBeanConstants.DAEMON_THREAD_COUNT.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().getDaemonThreadCount());\n        } else if (PlatformMBeanConstants.ALL_THREAD_IDS.equals(name)) {\n            store.setEmptyList();\n            for (Long id : ManagementFactory.getThreadMXBean().getAllThreadIds()) {\n                store.add(id);\n            }\n        } else if (PlatformMBeanConstants.THREAD_CONTENTION_MONITORING_SUPPORTED.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().isThreadContentionMonitoringSupported());\n        } else if (PlatformMBeanConstants.THREAD_CONTENTION_MONITORING_ENABLED.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().isThreadContentionMonitoringEnabled());\n        } else if (PlatformMBeanConstants.CURRENT_THREAD_CPU_TIME.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().getCurrentThreadCpuTime());\n        } else if (PlatformMBeanConstants.CURRENT_THREAD_USER_TIME.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().getCurrentThreadUserTime());\n        } else if (PlatformMBeanConstants.THREAD_CPU_TIME_SUPPORTED.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().isThreadCpuTimeSupported());\n        } else if (PlatformMBeanConstants.CURRENT_THREAD_CPU_TIME_SUPPORTED.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().isCurrentThreadCpuTimeSupported());\n        } else if (PlatformMBeanConstants.THREAD_CPU_TIME_ENABLED.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().isThreadCpuTimeEnabled());\n        } else if (PlatformMBeanConstants.OBJECT_MONITOR_USAGE_SUPPORTED.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().isObjectMonitorUsageSupported());\n        } else if (PlatformMBeanConstants.SYNCHRONIZER_USAGE_SUPPORTED.equals(name)) {\n            store.set(ManagementFactory.getThreadMXBean().isSynchronizerUsageSupported());\n        } else if (ThreadResourceDefinition.THREADING_READ_ATTRIBUTES.contains(name)\n                || ThreadResourceDefinition.THREADING_READ_WRITE_ATTRIBUTES.contains(name)\n                || ThreadResourceDefinition.THREADING_METRICS.contains(name)) {\n            // Bug\n            throw PlatformMBeanLogger.ROOT_LOGGER.badReadAttributeImpl(name);\n        }\n\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final ModelNode result = context.getResult();\n\n        for (String attribute : ThreadResourceDefinition.THREADING_READ_ATTRIBUTES) {\n            final ModelNode store = result.get(attribute);\n            try {\n                ThreadMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (SecurityException ignored) {\n                // just leave it undefined\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        for (String attribute : ThreadResourceDefinition.THREADING_READ_WRITE_ATTRIBUTES) {\n            final ModelNode store = result.get(attribute);\n            try {\n                ThreadMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (SecurityException ignored) {\n                // just leave it undefined\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        for (String attribute : ThreadResourceDefinition.THREADING_METRICS) {\n            final ModelNode store = result.get(attribute);\n            try {\n                ThreadMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (SecurityException ignored) {\n                // just leave it undefined\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {\n            final ModelNode store = result.get(PlatformMBeanConstants.OBJECT_NAME.getName());\n            ThreadMXBeanAttributeHandler.storeResult(PlatformMBeanConstants.OBJECT_NAME.getName(), store);\n        }\n\n        context.stepCompleted();\n    }","id":96722,"modified_method":"@Override\n    public void execute(OperationContext context, ModelNode operation) throws OperationFailedException {\n\n        final ModelNode result = context.getResult();\n\n        for (String attribute : ThreadResourceDefinition.THREADING_READ_ATTRIBUTES) {\n            final ModelNode store = result.get(attribute);\n            try {\n                ThreadMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (SecurityException ignored) {\n                // just leave it undefined\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        for (String attribute : ThreadResourceDefinition.THREADING_READ_WRITE_ATTRIBUTES) {\n            final ModelNode store = result.get(attribute);\n            try {\n                ThreadMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (SecurityException ignored) {\n                // just leave it undefined\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        for (String attribute : ThreadResourceDefinition.THREADING_METRICS) {\n            final ModelNode store = result.get(attribute);\n            try {\n                ThreadMXBeanAttributeHandler.storeResult(attribute, store);\n            } catch (SecurityException ignored) {\n                // just leave it undefined\n            } catch (UnsupportedOperationException ignored) {\n                // just leave it undefined\n            }\n        }\n\n        final ModelNode store = result.get(PlatformMBeanConstants.OBJECT_NAME.getName());\n        ThreadMXBeanAttributeHandler.storeResult(PlatformMBeanConstants.OBJECT_NAME.getName(), store);\n\n        context.stepCompleted();\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        if (PlatformMBeanUtil.JVM_MAJOR_VERSION > 6) {\n            registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, ThreadMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition attribute : READ_WRITE_ATTRIBUTES) {\n            registration.registerReadWriteAttribute(attribute, ThreadMXBeanAttributeHandler.INSTANCE, ThreadMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition attribute : READ_ATTRIBUTES) {\n            registration.registerReadOnlyAttribute(attribute, ThreadMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, ThreadMXBeanAttributeHandler.INSTANCE);\n        }\n    }","id":96723,"modified_method":"@Override\n    public void registerAttributes(ManagementResourceRegistration registration) {\n        super.registerAttributes(registration);\n        registration.registerReadOnlyAttribute(PlatformMBeanConstants.OBJECT_NAME, ThreadMXBeanAttributeHandler.INSTANCE);\n\n        for (AttributeDefinition attribute : READ_WRITE_ATTRIBUTES) {\n            registration.registerReadWriteAttribute(attribute, ThreadMXBeanAttributeHandler.INSTANCE, ThreadMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition attribute : READ_ATTRIBUTES) {\n            registration.registerReadOnlyAttribute(attribute, ThreadMXBeanAttributeHandler.INSTANCE);\n        }\n\n        for (AttributeDefinition attribute : METRICS) {\n            registration.registerMetric(attribute, ThreadMXBeanAttributeHandler.INSTANCE);\n        }\n    }","commit_id":"b94baad0ad6ac3b8b6f1d5d27dd0dd233f2528f0","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n   * Default constructor.\n   * @param main reference to the main window\n   */\n  public DialogPackages(final GUI main) {\n    super(main, PACKAGES);\n    panel.setLayout(new BorderLayout(8, 0));\n\n    // create package chooser\n    packages = new BaseXList(new String[] {}, this, false);\n    packages.setSize(270, 160);\n\n    title = new BaseXLabel(\" \").large().border(0, 5, 5, 0);\n    name = new BaseXLabel(\" \");\n    version = new BaseXLabel(\" \");\n    type = new BaseXLabel(\" \");\n    directory = new BaseXLabel(\" \");\n\n    final BaseXBack table = new BaseXBack(new TableLayout(4, 2, 16, 0)).border(5);\n    table.add(new BaseXLabel(NAME + COL, false, true));\n    table.add(name);\n    table.add(new BaseXLabel(VERSINFO + COL, false, true));\n    table.add(version);\n    table.add(new BaseXLabel(TYPE + COL, false, true));\n    table.add(type);\n    table.add(new BaseXLabel(DIRECTORY + COL, false, true));\n    table.add(directory);\n\n    // database buttons\n    install = new BaseXButton(INSTALL + DOTS, this);\n    delete = new BaseXButton(DELETE + DOTS, this);\n\n    final BaseXBack p = new BaseXBack(new BorderLayout());\n    p.add(title, BorderLayout.NORTH);\n    p.add(table, BorderLayout.CENTER);\n    p.add(newButtons(install, delete), BorderLayout.SOUTH);\n    BaseXLayout.setWidth(p, 430);\n\n    //BaseXLayout.setWidth(details, 450);\n    set(packages, BorderLayout.CENTER);\n    set(p, BorderLayout.EAST);\n\n    refresh = true;\n    action(null);\n    finish(null);\n  }","id":96724,"modified_method":"/**\n   * Default constructor.\n   * @param main reference to the main window\n   */\n  public DialogPackages(final GUI main) {\n    super(main, PACKAGES);\n    panel.setLayout(new BorderLayout(8, 0));\n\n    // create package chooser\n    packages = new BaseXList(new String[] {}, this, false);\n    packages.setSize(270, 160);\n\n    title = new BaseXLabel(\" \").large().border(0, 5, 5, 0);\n    name = new BaseXLabel(\" \");\n    version = new BaseXLabel(\" \");\n    type = new BaseXLabel(\" \");\n    path = new BaseXLabel(\" \");\n\n    final BaseXBack table = new BaseXBack(new TableLayout(4, 2, 16, 0)).border(5);\n    table.add(new BaseXLabel(NAME + COL, false, true));\n    table.add(name);\n    table.add(new BaseXLabel(VERSINFO + COL, false, true));\n    table.add(version);\n    table.add(new BaseXLabel(TYPE + COL, false, true));\n    table.add(type);\n    table.add(new BaseXLabel(PATH + COL, false, true));\n    table.add(path);\n\n    // database buttons\n    install = new BaseXButton(INSTALL + DOTS, this);\n    delete = new BaseXButton(DELETE + DOTS, this);\n\n    final BaseXBack p = new BaseXBack(new BorderLayout());\n    p.add(title, BorderLayout.NORTH);\n    p.add(table, BorderLayout.CENTER);\n    p.add(newButtons(install, delete), BorderLayout.SOUTH);\n    BaseXLayout.setWidth(p, 430);\n\n    //BaseXLayout.setWidth(details, 450);\n    set(packages, BorderLayout.CENTER);\n    set(p, BorderLayout.EAST);\n\n    refresh = true;\n    action(null);\n    finish(null);\n  }","commit_id":"c085e8fc36ecfb0a2b0d3fe1e46189b408d2eaac","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\n  public void action(final Object cmp) {\n    final Context ctx = gui.context;\n    if(refresh) {\n      // rebuild databases and focus list chooser\n      packages.setData(new RepoManager(ctx).list().toArray());\n      packages.requestFocusInWindow();\n      refresh = false;\n    }\n\n    final StringList pkgs = packages.getValues();\n    final ArrayList<Command> cmds = new ArrayList<Command>();\n\n    if(cmp == install) {\n      final String path = gui.gprop.get(GUIProp.PKGPATH);\n      final BaseXFileChooser fc = new BaseXFileChooser(FILE_OR_DIR, path, gui);\n      fc.addFilter(XML_ARCHIVES, IO.XARSUFFIX);\n      fc.addFilter(JAVA_ARCHIVES, IO.JARSUFFIX);\n      fc.addFilter(XQUERY_FILES, IO.XQSUFFIXES);\n      final IOFile file = fc.select(Mode.FDOPEN);\n      if(file == null) return;\n      gui.gprop.set(GUIProp.PKGPATH, file.path());\n      refresh = true;\n      cmds.add(new RepoInstall(file.path(), null));\n\n    } else if(cmp == delete) {\n      if(!BaseXDialog.confirm(gui, Util.info(DELETE_PACKAGES_X, pkgs.size()))) return;\n      refresh = true;\n      for(final String p : pkgs) cmds.add(new RepoDelete(p, null));\n\n    } else {\n      final byte[] key = Token.token(packages.getValue());\n      final TokenMap pkg = ctx.repo.pkgDict();\n      if(pkg.get(key) != null) {\n        title.setText(key.length == 0 ? DOTS : Token.string(key));\n        name.setText(Token.string(Package.name(key)));\n        version.setText(Token.string(Package.version(key)));\n        type.setText(PkgText.EXPATH);\n        directory.setText(Token.string(pkg.get(key)));\n      } else {\n        final IOFile file = RepoManager.file(key, ctx.repo);\n        final String path = Token.string(key);\n        title.setText(key.length == 0 ? DOTS : path);\n        name.setText(file != null ? file.name() : \"-\");\n        version.setText(\"-\");\n        type.setText(PkgText.INTERNAL);\n        directory.setText(path.replace('.', '/'));\n      }\n      // enable or disable buttons\n      delete.setEnabled(pkgs.size() > 0);\n    }\n\n    // run all commands\n    if(!cmds.isEmpty()) {\n      DialogProgress.execute(this, cmds.toArray(new Command[cmds.size()]));\n    }\n  }","id":96725,"modified_method":"@Override\n  public void action(final Object cmp) {\n    final Context ctx = gui.context;\n    if(refresh) {\n      // rebuild databases and focus list chooser\n      packages.setData(new RepoManager(ctx).list().toArray());\n      packages.requestFocusInWindow();\n      refresh = false;\n    }\n\n    final StringList pkgs = packages.getValues();\n    final ArrayList<Command> cmds = new ArrayList<Command>();\n\n    if(cmp == install) {\n      final String pp = gui.gprop.get(GUIProp.PKGPATH);\n      final BaseXFileChooser fc = new BaseXFileChooser(FILE_OR_DIR, pp, gui);\n      fc.addFilter(XML_ARCHIVES, IO.XARSUFFIX);\n      fc.addFilter(JAVA_ARCHIVES, IO.JARSUFFIX);\n      fc.addFilter(XQUERY_FILES, IO.XQSUFFIXES);\n      final IOFile file = fc.select(Mode.FDOPEN);\n      if(file == null) return;\n      gui.gprop.set(GUIProp.PKGPATH, file.path());\n      refresh = true;\n      cmds.add(new RepoInstall(file.path(), null));\n\n    } else if(cmp == delete) {\n      if(!BaseXDialog.confirm(gui, Util.info(DELETE_PACKAGES_X, pkgs.size()))) return;\n      refresh = true;\n      for(final String p : pkgs) cmds.add(new RepoDelete(p, null));\n\n    } else {\n      final byte[] key = Token.token(packages.getValue());\n      final TokenMap pkg = ctx.repo.pkgDict();\n      if(pkg.get(key) != null) {\n        title.setText(key.length == 0 ? DOTS : Token.string(key));\n        name.setText(Token.string(Package.name(key)));\n        version.setText(Token.string(Package.version(key)));\n        type.setText(PkgText.EXPATH);\n        path.setText(Token.string(pkg.get(key)));\n      } else {\n        final IOFile file = RepoManager.file(key, ctx.repo);\n        final String pp = Token.string(key);\n        title.setText(key.length == 0 ? DOTS : pp);\n        name.setText(file != null ? file.name() : \"-\");\n        version.setText(\"-\");\n        type.setText(PkgText.INTERNAL);\n        path.setText(pp.replace('.', '/'));\n      }\n      // enable or disable buttons\n      delete.setEnabled(pkgs.size() > 0);\n    }\n\n    // run all commands\n    if(!cmds.isEmpty()) {\n      DialogProgress.execute(this, cmds.toArray(new Command[cmds.size()]));\n    }\n  }","commit_id":"c085e8fc36ecfb0a2b0d3fe1e46189b408d2eaac","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Lists all databases.\n   * @return success flag\n   * @throws IOException I/O exception\n   */\n  private boolean list() throws IOException {\n    final Table table = new Table();\n    table.description = DATABASES;\n\n    final boolean create = context.user.has(Perm.CREATE);\n    table.header.add(T_NAME);\n    table.header.add(RESOURCES);\n    table.header.add(SIZE);\n    if(create) table.header.add(INPUT_PATH);\n\n    for(final String name : context.databases().listDBs()) {\n      DataInput di = null;\n      String file = null;\n      long size = 0;\n      int docs = 0;\n      final MetaData meta = new MetaData(name, context);\n      try {\n        di = new DataInput(meta.dbfile(DATAINF));\n        meta.read(di);\n        size = meta.dbsize();\n        docs = meta.ndocs;\n        if(context.perm(Perm.READ, meta)) file = meta.original;\n      } catch(final IOException ex) {\n        file = ERROR;\n      } finally {\n        if(di != null) try { di.close(); } catch(final IOException ex) { }\n      }\n\n      // count number of raw files\n      final IOFile dir = new IOFile(mprop.dbpath(name), M_RAW);\n      final int bin = dir.descendants().size();\n\n      // create entry\n      if(file != null) {\n        final TokenList tl = new TokenList(4);\n        tl.add(name);\n        tl.add(docs + bin);\n        tl.add(size);\n        if(create) tl.add(file);\n        table.contents.add(tl);\n      }\n    }\n    table.sort();\n    out.println(table.finish());\n    return true;\n  }","id":96726,"modified_method":"/**\n   * Lists all databases.\n   * @return success flag\n   * @throws IOException I/O exception\n   */\n  private boolean list() throws IOException {\n    final Table table = new Table();\n    table.description = DATABASES;\n\n    final boolean create = context.user.has(Perm.CREATE);\n    table.header.add(T_NAME);\n    table.header.add(RESOURCES);\n    table.header.add(SIZE);\n    if(create) table.header.add(INPUT_PATH);\n\n    for(final String name : context.databases().listDBs()) {\n      DataInput di = null;\n      String file = null;\n      long size = 0;\n      int docs = 0;\n      final MetaData meta = new MetaData(name, context);\n      try {\n        di = new DataInput(meta.dbfile(DATAINF));\n        meta.read(di);\n        size = meta.dbsize();\n        docs = meta.ndocs;\n        if(context.perm(Perm.READ, meta)) file = meta.original;\n      } catch(final IOException ex) {\n        file = ERROR;\n      } finally {\n        if(di != null) try { di.close(); } catch(final IOException ex) { }\n      }\n\n      // count number of raw files\n      final IOFile dir = new IOFile(mprop.dbpath(name), M_RAW);\n      final int bin = dir.descendants().size();\n\n      // create entry\n      if(file != null) {\n        final TokenList tl = new TokenList(4);\n        tl.add(name);\n        tl.add(docs + bin);\n        tl.add(size);\n        if(create) tl.add(file);\n        table.contents.add(tl);\n      }\n    }\n    out.println(table.sort().finish());\n    return true;\n  }","commit_id":"c085e8fc36ecfb0a2b0d3fe1e46189b408d2eaac","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Lists resources of the specified database.\n   * @return success flag\n   * @throws IOException I/O exception\n   */\n  private boolean listDB() throws IOException {\n    final String db = args[0];\n    final String path = args[1] != null ? args[1] : \"\";\n    if(!MetaData.validName(db, false)) return error(NAME_INVALID_X, db);\n\n    final Table table = new Table();\n    table.description = RESOURCES;\n    table.header.add(INPUT_PATH);\n    table.header.add(TYPE);\n    table.header.add(MimeTypes.CONTENT_TYPE);\n    table.header.add(SIZE);\n\n    try {\n      // add xml documents\n      final Data data = Open.open(db, context);\n      final Resources res = data.resources;\n      final IntList il = res.docs(path);\n      for(int i = 0, ds = il.size(); i < ds; i++) {\n        final int pre = il.get(i);\n        final TokenList tl = new TokenList(3);\n        final byte[] file = data.text(pre, true);\n        tl.add(file);\n        tl.add(DataText.M_XML);\n        tl.add(MimeTypes.APP_XML);\n        tl.add(data.size(pre, Data.DOC));\n        table.contents.add(tl);\n      }\n      // add binary resources\n      for(final byte[] file : res.binaries(path)) {\n        final String f = string(file);\n        final TokenList tl = new TokenList(3);\n        tl.add(file);\n        tl.add(DataText.M_RAW);\n        tl.add(MimeTypes.get(f));\n        tl.add(data.meta.binary(f).length());\n        table.contents.add(tl);\n      }\n      Close.close(data, context);\n    } catch(final IOException ex) {\n      Util.debug(ex);\n      final String msg = ex.getMessage();\n      return msg.isEmpty() ? error(DB_NOT_OPENED_X, db) : error(msg);\n    }\n    table.sort();\n    out.println(table.finish());\n    return true;\n  }","id":96727,"modified_method":"/**\n   * Lists resources of the specified database.\n   * @return success flag\n   * @throws IOException I/O exception\n   */\n  private boolean listDB() throws IOException {\n    final String db = args[0];\n    final String path = args[1] != null ? args[1] : \"\";\n    if(!MetaData.validName(db, false)) return error(NAME_INVALID_X, db);\n\n    final Table table = new Table();\n    table.description = RESOURCES;\n    table.header.add(INPUT_PATH);\n    table.header.add(TYPE);\n    table.header.add(MimeTypes.CONTENT_TYPE);\n    table.header.add(SIZE);\n\n    try {\n      // add xml documents\n      final Data data = Open.open(db, context);\n      final Resources res = data.resources;\n      final IntList il = res.docs(path);\n      for(int i = 0, ds = il.size(); i < ds; i++) {\n        final int pre = il.get(i);\n        final TokenList tl = new TokenList(3);\n        final byte[] file = data.text(pre, true);\n        tl.add(file);\n        tl.add(DataText.M_XML);\n        tl.add(MimeTypes.APP_XML);\n        tl.add(data.size(pre, Data.DOC));\n        table.contents.add(tl);\n      }\n      // add binary resources\n      for(final byte[] file : res.binaries(path)) {\n        final String f = string(file);\n        final TokenList tl = new TokenList(3);\n        tl.add(file);\n        tl.add(DataText.M_RAW);\n        tl.add(MimeTypes.get(f));\n        tl.add(data.meta.binary(f).length());\n        table.contents.add(tl);\n      }\n      Close.close(data, context);\n    } catch(final IOException ex) {\n      Util.debug(ex);\n      final String msg = ex.getMessage();\n      return msg.isEmpty() ? error(DB_NOT_OPENED_X, db) : error(msg);\n    }\n    out.println(table.sort().finish());\n    return true;\n  }","commit_id":"c085e8fc36ecfb0a2b0d3fe1e46189b408d2eaac","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Returns all installed packages in a table.\n   * @return table\n   */\n  public Table table() {\n    final Table t = new Table();\n    t.description = PACKAGES_X;\n    t.header.add(NAME);\n    t.header.add(VERSINFO);\n    t.header.add(TYPE);\n    t.header.add(DIRECTORY);\n\n    final TokenMap pkg = repo.pkgDict();\n    // traverse EXPath packages\n    for(final byte[] p : pkg) {\n      if(p == null) continue;\n      final TokenList tl = new TokenList();\n      tl.add(Package.name(p));\n      tl.add(Package.version(p));\n      tl.add(EXPATH);\n      tl.add(pkg.get(p));\n      t.contents.add(tl);\n    }\n\n    // traverse all directories, ignore root entries with dashes\n    for(final IOFile dir : repo.path().children()) {\n      if(dir.name().indexOf('-') != -1) continue;\n      for(final String s : dir.descendants()) {\n        final TokenList tl = new TokenList();\n        tl.add(dir.name() + '.' + s.replaceAll(\"\\\\..*\", \"\").replace('/', '.'));\n        tl.add(\"-\");\n        tl.add(INTERNAL);\n        tl.add(dir.name() + '/' + s);\n        t.contents.add(tl);\n      }\n    }\n\n    t.sort();\n    return t;\n  }","id":96728,"modified_method":"/**\n   * Returns all installed packages in a table.\n   * @return table\n   */\n  public Table table() {\n    final Table t = new Table();\n    t.description = PACKAGES_X;\n    t.header.add(NAME);\n    t.header.add(VERSINFO);\n    t.header.add(TYPE);\n    t.header.add(PATH);\n\n    final TokenMap pkg = repo.pkgDict();\n    // traverse EXPath packages\n    for(final byte[] p : pkg) {\n      if(p != null) t.contents.add(entry(string(Package.name(p)),\n          string(Package.version(p)), EXPATH, string(pkg.get(p))));\n    }\n\n    // traverse all directories, ignore root entries with dashes\n    for(final IOFile ch : repo.path().children()) {\n      final String n = ch.name();\n      if(!ch.isDir()) {\n        t.contents.add(entry(n.replaceAll(\"\\\\..*\", \"\").\n            replace('/', '.'), \"-\", INTERNAL, n));\n      } else if(n.indexOf('-') == -1) {\n        for(final String s : ch.descendants()) {\n          t.contents.add(entry(n + '.' + s.replaceAll(\"\\\\..*\", \"\").replace('/', '.'),\n              \"-\", INTERNAL, n + '/' + s));\n        }\n      }\n    }\n    return t.sort();\n  }","commit_id":"c085e8fc36ecfb0a2b0d3fe1e46189b408d2eaac","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Returns a list of all packages.\n   * @return packages\n   */\n  public StringList list() {\n    final StringList sl = new StringList();\n    // traverse EXPath packages\n    for(final byte[] p : repo.pkgDict()) {\n      if(p != null) sl.add(Token.string(p));\n    }\n\n    // traverse all directories, ignore root entries with dashes\n    for(final IOFile dir : repo.path().children()) {\n      if(dir.name().indexOf('-') != -1) continue;\n      for(final String s : dir.descendants()) {\n        sl.add(dir.name() + '.' + s.replaceAll(\"\\\\..*\", \"\").replace('/', '.'));\n      }\n    }\n    return sl.sort(false, true);\n  }","id":96729,"modified_method":"/**\n   * Returns a list of all packages.\n   * @return packages\n   */\n  public StringList list() {\n    final StringList sl = new StringList();\n    // traverse EXPath packages\n    for(final byte[] p : repo.pkgDict()) {\n      if(p != null) sl.add(Token.string(p));\n    }\n\n    // traverse all directories, ignore root entries with dashes\n    for(final IOFile ch : repo.path().children()) {\n      final String n = ch.name();\n      if(!ch.isDir()) {\n        sl.add(n.replaceAll(\"\\\\..*\", \"\").replace('/', '.'));\n      } else if(n.indexOf('-') == -1) {\n        for(final String s : ch.descendants()) {\n          sl.add(n + '.' + s.replaceAll(\"\\\\..*\", \"\").replace('/', '.'));\n        }\n      }\n    }\n    return sl.sort(false, true);\n  }","commit_id":"c085e8fc36ecfb0a2b0d3fe1e46189b408d2eaac","url":"https://github.com/BaseXdb/basex"},{"original_method":"@Override\r\n  protected boolean run() throws IOException {\r\n    final Table table = new Table();\r\n    table.description = BACKUPS;\r\n    table.header.add(NAME);\r\n    table.header.add(SIZE);\r\n\r\n    for(final IOFile f : mprop.dbpath().children()) {\r\n      final String name = f.name();\r\n      if(!name.endsWith(IO.ZIPSUFFIX)) continue;\r\n      final TokenList tl = new TokenList();\r\n      tl.add(name);\r\n      tl.add(f.length());\r\n      table.contents.add(tl);\r\n    }\r\n    table.sort();\r\n    out.println(table.finish());\r\n    return true;\r\n  }","id":96730,"modified_method":"@Override\r\n  protected boolean run() throws IOException {\r\n    final Table table = new Table();\r\n    table.description = BACKUPS;\r\n    table.header.add(NAME);\r\n    table.header.add(SIZE);\r\n\r\n    for(final IOFile f : mprop.dbpath().children()) {\r\n      final String name = f.name();\r\n      if(!name.endsWith(IO.ZIPSUFFIX)) continue;\r\n      final TokenList tl = new TokenList();\r\n      tl.add(name);\r\n      tl.add(f.length());\r\n      table.contents.add(tl);\r\n    }\r\n    out.println(table.sort().finish());\r\n    return true;\r\n  }","commit_id":"c085e8fc36ecfb0a2b0d3fe1e46189b408d2eaac","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Sorts the table by the first column.\r\n   */\r\n  public void sort() {\r\n    Collections.sort(contents, new Comparator<TokenList>() {\r\n      @Override\r\n      public int compare(final TokenList tl1, final TokenList tl2) {\r\n        return diff(lc(tl1.get(0)), lc(tl2.get(0)));\r\n      }\r\n    });\r\n  }","id":96731,"modified_method":"/**\r\n   * Sorts the table by the first column.\r\n   * @return self reference\r\n   */\r\n  public Table sort() {\r\n    Collections.sort(contents, new Comparator<TokenList>() {\r\n      @Override\r\n      public int compare(final TokenList tl1, final TokenList tl2) {\r\n        return diff(lc(tl1.get(0)), lc(tl2.get(0)));\r\n      }\r\n    });\r\n    return this;\r\n  }","commit_id":"c085e8fc36ecfb0a2b0d3fe1e46189b408d2eaac","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Moves the specified string to top.\r\n   * @param top entry to be moved to the top\r\n   */\r\n  public void toTop(final byte[] top) {\r\n    for(int i = 0; i < contents.size(); ++i) {\r\n      if(eq(top, contents.get(i).get(0))) {\r\n        contents.add(0, contents.remove(i));\r\n        return;\r\n      }\r\n    }\r\n  }","id":96732,"modified_method":"/**\r\n   * Moves the specified string to top.\r\n   * @param top entry to be moved to the top\r\n   * @return self reference\r\n   */\r\n  public Table toTop(final byte[] top) {\r\n    for(int i = 0; i < contents.size(); ++i) {\r\n      if(eq(top, contents.get(i).get(0))) {\r\n        contents.add(0, contents.remove(i));\r\n        break;\r\n      }\r\n    }\r\n    return this;\r\n  }","commit_id":"c085e8fc36ecfb0a2b0d3fe1e46189b408d2eaac","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\r\n   * Returns information on all users.\r\n   * @param users optional second list\r\n   * @return user information\r\n   */\r\n  public synchronized byte[] info(final Users users) {\r\n    final Table table = new Table();\r\n    table.description = USERS;\r\n\r\n    final int sz = file == null ? 3 : 5;\r\n    for(int u = 0; u < sz; ++u) table.header.add(USERHEAD[u]);\r\n\r\n    for(final User user : list) {\r\n      if(users != null) if(users.get(user.name) == null) continue;\r\n\r\n      final TokenList tl = new TokenList();\r\n      tl.add(user.name);\r\n      tl.add(user.has(Perm.READ) ? \"X\" : \"\");\r\n      tl.add(user.has(Perm.WRITE) ? \"X\" : \"\");\r\n      if(sz == 5) {\r\n        tl.add(user.has(Perm.CREATE) ? \"X\" : \"\");\r\n        tl.add(user.has(Perm.ADMIN) ? \"X\" : \"\");\r\n      }\r\n      table.contents.add(tl);\r\n    }\r\n    table.sort();\r\n    table.toTop(token(ADMIN));\r\n    return table.finish();\r\n  }","id":96733,"modified_method":"/**\r\n   * Returns information on all users.\r\n   * @param users optional second list\r\n   * @return user information\r\n   */\r\n  public synchronized byte[] info(final Users users) {\r\n    final Table table = new Table();\r\n    table.description = USERS;\r\n\r\n    final int sz = file == null ? 3 : 5;\r\n    for(int u = 0; u < sz; ++u) table.header.add(USERHEAD[u]);\r\n\r\n    for(final User user : list) {\r\n      if(users != null) if(users.get(user.name) == null) continue;\r\n\r\n      final TokenList tl = new TokenList();\r\n      tl.add(user.name);\r\n      tl.add(user.has(Perm.READ) ? \"X\" : \"\");\r\n      tl.add(user.has(Perm.WRITE) ? \"X\" : \"\");\r\n      if(sz == 5) {\r\n        tl.add(user.has(Perm.CREATE) ? \"X\" : \"\");\r\n        tl.add(user.has(Perm.ADMIN) ? \"X\" : \"\");\r\n      }\r\n      table.contents.add(tl);\r\n    }\r\n    return table.sort().toTop(token(ADMIN)).finish();\r\n  }","commit_id":"c085e8fc36ecfb0a2b0d3fe1e46189b408d2eaac","url":"https://github.com/BaseXdb/basex"},{"original_method":"private static MetaClass getMetaClass(Object receiver) {\n            if (receiver == null) {\n                return NullObject.getNullObject().getMetaClass();\n            } else if (receiver instanceof GroovyObject) {\n                return ((GroovyObject) receiver).getMetaClass(); \n            } else {\n                return InvokerHelper.getMetaClass(receiver);\n            }\n        }","id":96734,"modified_method":"private static MetaClass getMetaClass(Object receiver) {\n            if (receiver == null) {\n                return NullObject.getNullObject().getMetaClass();\n            } else if (receiver instanceof GroovyObject) {\n                return ((GroovyObject) receiver).getMetaClass(); \n            } else {\n                return GroovySystem.getMetaClassRegistry().getMetaClass(getClass(receiver));\n            }\n        }","commit_id":"0a75bfe179bc22e36a5623e6b758785da5db6400","url":"https://github.com/apache/groovy"},{"original_method":"private static void setHandleForMetaMethod(CallInfo info) {\n            if (info.method instanceof CachedMethod) {\n                CachedMethod cm = (CachedMethod) info.method;\n                try {\n                    info.handle = LOOKUP.unreflect(cm.getCachedMethod());\n                } catch (IllegalAccessException e) {\n                    throw new GroovyBugError(e);\n                }\n            } else {\n                // receiver, args\n                try {\n                    info.handle = LOOKUP.findVirtual(info.method.getClass(), \"invoke\", GENERAL_INVOKER_SIGNATURE);\n                } catch (Exception e) {\n                    throw new GroovyBugError(e);\n                }\n                info.handle = info.handle.bindTo(info.method).\n                                asCollector(Object[].class, info.targetType.parameterCount()-2);\n            }\n        }","id":96735,"modified_method":"private static void setHandleForMetaMethod(CallInfo info) {\n            if (info.method instanceof CachedMethod) {\n                CachedMethod cm = (CachedMethod) info.method;\n                try {\n                    Method m = cm.getCachedMethod();\n                    info.handle = LOOKUP.unreflect(m);\n                    if (isStatic(m)) {\n                        info.handle = MethodHandles.dropArguments(info.handle, 0, Class.class);\n                    }\n                } catch (IllegalAccessException e) {\n                    throw new GroovyBugError(e);\n                }\n            } else if (info.method != null) {\n                // receiver, args\n                try {\n                    info.handle = LOOKUP.findVirtual(info.method.getClass(), \"invoke\", GENERAL_INVOKER_SIGNATURE);\n                } catch (Exception e) {\n                    throw new GroovyBugError(e);\n                }\n                info.handle = info.handle.bindTo(info.method).\n                                asCollector(Object[].class, info.targetType.parameterCount()-2);\n            }\n        }","commit_id":"0a75bfe179bc22e36a5623e6b758785da5db6400","url":"https://github.com/apache/groovy"},{"original_method":"private static void chooseMethod(MetaClass mc, CallInfo ci) {\n            if (mc instanceof MetaClassImpl) {\n                MetaClassImpl mci = (MetaClassImpl) mc;\n                Object receiver = ci.args[0];\n                if (receiver==null) receiver = NullObject.getNullObject();\n                ci.method = mci.getMethodWithCaching(receiver.getClass(), ci.methodName, removeRealReceiver(ci.args), false);\n            }\n        }","id":96736,"modified_method":"private static void chooseMethod(MetaClass mc, CallInfo ci) {\n            if (mc instanceof MetaClassImpl) {\n                MetaClassImpl mci = (MetaClassImpl) mc;\n                Object receiver = ci.args[0];\n                if (receiver==null) receiver = NullObject.getNullObject();\n                ci.method = mci.getMethodWithCaching(getClass(receiver), ci.methodName, removeRealReceiver(ci.args), false);\n            }\n        }","commit_id":"0a75bfe179bc22e36a5623e6b758785da5db6400","url":"https://github.com/apache/groovy"},{"original_method":"public static Object selectMethod(MutableCallSite callSite, Class sender, String methodName, Object dummyReceiver, Object[] arguments) throws Throwable {\n            //TODO: handle GroovyInterceptable \n            CallInfo callInfo = new CallInfo();\n            callInfo.targetType = callSite.type();\n            callInfo.methodName = methodName;\n            callInfo.args = arguments;\n            callInfo.callSite = callSite;\n            callInfo.sender = sender;\n            \n//            setInterceptableHandle(callInfo);\n            MetaClass mc = getMetaClass(callInfo.args[0]);\n            chooseMethod(mc, callInfo);\n            setHandleForMetaMethod(callInfo);\n            setMetaClassCallHandleIfNedded(mc, callInfo);\n            correctWrapping(callInfo);\n            correctCoerce(callInfo);\n            correctNullReceiver(callInfo);\n            dropDummyReceiver(callInfo);\n            \n            callInfo.handle = callInfo.handle.asType(callInfo.targetType);\n            \n            setGuards(callInfo, callInfo.args[0]);\n            \n            callSite.setTarget(callInfo.handle);\n            \n            return callInfo.handle.invokeWithArguments(repack(dummyReceiver,callInfo.args));\n        }","id":96737,"modified_method":"public static Object selectMethod(MutableCallSite callSite, Class sender, String methodName, Object dummyReceiver, Object[] arguments) throws Throwable {\n            //TODO: handle GroovyInterceptable \n            CallInfo callInfo = new CallInfo();\n            callInfo.targetType = callSite.type();\n            callInfo.methodName = methodName;\n            callInfo.args = arguments;\n            callInfo.callSite = callSite;\n            callInfo.sender = sender;\n            \n//            setInterceptableHandle(callInfo);\n            MetaClass mc = getMetaClass(callInfo.args[0]);\n            chooseMethod(mc, callInfo);\n            setHandleForMetaMethod(callInfo);\n            setMetaClassCallHandleIfNedded(mc, callInfo);\n            correctWrapping(callInfo);\n            correctCoerce(callInfo);\n            correctNullReceiver(callInfo);\n            dropDummyReceiver(callInfo);\n            try {\n                callInfo.handle = callInfo.handle.asType(callInfo.targetType);\n            } catch (Exception e) {\n                System.err.println(\"ERROR while processing \"+methodName);\n                throw e;\n            }\n            \n            setGuards(callInfo, callInfo.args[0]);\n            \n            callSite.setTarget(callInfo.handle);\n            \n            return callInfo.handle.invokeWithArguments(repack(dummyReceiver,callInfo.args));\n        }","commit_id":"0a75bfe179bc22e36a5623e6b758785da5db6400","url":"https://github.com/apache/groovy"},{"original_method":"private static void setMetaClassCallHandleIfNedded(MetaClass mc, CallInfo ci) {\n            if (ci.handle!=null) return;\n            try {\n                ci.useMetaClass = true;\n                ci.handle = LOOKUP.findVirtual(mc.getClass(), \"invokeMethod\", INVOKE_METHOD_SIGNATURE);\n            } catch (Exception e) {\n                throw new GroovyBugError(e);\n            }\n            ci.handle = ci.handle.bindTo(mc).\n                        asCollector(Object[].class, ci.targetType.parameterCount()-2);\n        }","id":96738,"modified_method":"private static void setMetaClassCallHandleIfNedded(MetaClass mc, CallInfo ci) {\n            if (ci.handle!=null) return;\n            try {\n                ci.useMetaClass = true;\n                ci.handle = LOOKUP.findVirtual(mc.getClass(), \"invokeMethod\", INVOKE_METHOD_SIGNATURE);\n            } catch (Exception e) {\n                throw new GroovyBugError(e);\n            }            \n            ci.handle = ci.handle.bindTo(mc).bindTo(ci.sender);\n            ci.handle = MethodHandles.insertArguments(ci.handle, ci.handle.type().parameterCount()-2, true, false);\n            ci.handle = MethodHandles.insertArguments(ci.handle, 1, ci.methodName);\n            ci.handle = ci.handle.asCollector(Object[].class, ci.targetType.parameterCount()-2);\n        }","commit_id":"0a75bfe179bc22e36a5623e6b758785da5db6400","url":"https://github.com/apache/groovy"},{"original_method":"private static void setHandleForMetaMethod(CallInfo info) {\n            MetaMethod metaMethod = info.method;\n            boolean isCategoryTypeMethod = metaMethod instanceof NewInstanceMetaMethod;\n            \n            if (metaMethod instanceof ReflectionMetaMethod) {\n                ReflectionMetaMethod rmm = (ReflectionMetaMethod) metaMethod;\n                metaMethod = rmm.getCachedMethod();\n            }\n            \n            if (metaMethod instanceof CachedMethod) {\n                CachedMethod cm = (CachedMethod) metaMethod;\n                info.isVargs = cm.isVargsMethod();\n                try {\n                    Method m = cm.getCachedMethod();\n                    info.handle = LOOKUP.unreflect(m);\n                    if (!isCategoryTypeMethod && isStatic(m)) {\n                        info.handle = MethodHandles.dropArguments(info.handle, 0, Class.class);\n                    }\n                } catch (IllegalAccessException e) {\n                    throw new GroovyBugError(e);\n                }\n            } else if (info.method != null) {\n                info.handle = META_METHOD_INVOKER;\n                info.handle = info.handle.bindTo(info.method).\n                                asCollector(Object[].class, info.targetType.parameterCount()-2);\n                //TODO: there might be a missing argument for which we have to place\n                // a null value here!\n            }\n        }","id":96739,"modified_method":"private static void setHandleForMetaMethod(CallInfo info) {\n            MetaMethod metaMethod = info.method;\n            boolean isCategoryTypeMethod = metaMethod instanceof NewInstanceMetaMethod;\n            \n            if (metaMethod instanceof ReflectionMetaMethod) {\n                ReflectionMetaMethod rmm = (ReflectionMetaMethod) metaMethod;\n                metaMethod = rmm.getCachedMethod();\n            }\n            \n            if (metaMethod instanceof CachedMethod) {\n                CachedMethod cm = (CachedMethod) metaMethod;\n                info.isVargs = cm.isVargsMethod();\n                try {\n                    Method m = cm.getCachedMethod();\n                    info.handle = LOOKUP.unreflect(m);\n                    if (!isCategoryTypeMethod && isStatic(m)) {\n                        info.handle = MethodHandles.dropArguments(info.handle, 0, Class.class);\n                    }\n                } catch (IllegalAccessException e) {\n                    throw new GroovyBugError(e);\n                }\n            } else if (info.method != null) {\n                info.handle = META_METHOD_INVOKER;\n                info.handle = info.handle.bindTo(info.method);\n                if (info.method.getNativeParameterTypes().length==1 && \n                    info.args.length==1) \n                {\n                    // the method expects a parameter but we don't provide an \n                    // argument for that. So we give in a Object[], containing \n                    // a null value\n                    // since MethodHandles.insertArguments is a vargs method giving\n                    // only the array would be like just giving a null value, so\n                    // we need to wrap the array that represents our argument in\n                    // another one for the vargs call\n                    info.handle = MethodHandles.insertArguments(info.handle, 1, new Object[]{new Object[]{null}});\n                } else {\n                    info.handle = info.handle.asCollector(Object[].class, info.targetType.parameterCount()-2);\n                }\n            }\n        }","commit_id":"ca085412bfb7b3998e384200850736e7a53c7bd6","url":"https://github.com/apache/groovy"},{"original_method":"private static void setGuards(CallInfo ci, Object receiver) {\n            if (ci.handle==null) return;\n            \n            MethodHandle fallback = makeFallBack(ci.callSite, ci.sender, ci.methodName, ci.targetType, ci.safeNavigation);\n            \n            // guards for receiver\n            MethodHandle test;\n            if (receiver==null) {\n                test = IS_NULL.asType(MethodType.methodType(boolean.class,ci.targetType.parameterType(1)));\n                test = MethodHandles.dropArguments(test, 0, ci.targetType.parameterType(0));\n            } else if (receiver instanceof GroovyObject) {\n                GroovyObject go = (GroovyObject) receiver;\n                MetaClassImpl mc = (MetaClassImpl) go.getMetaClass();\n                test = SAME_MC.bindTo(mc); \n                // drop dummy receiver\n                test = test.asType(MethodType.methodType(boolean.class,ci.targetType.parameterType(1)));\n                test = MethodHandles.dropArguments(test, 0, ci.targetType.parameterType(0));\n            } else {\n                // handle constant meta class\n                ConstantMetaClassVersioning mcv = DefaultMetaClassInfo.getCurrentConstantMetaClassVersioning();\n                test = VALID_MC_VERSION.bindTo(mcv);\n                ci.handle = MethodHandles.guardWithTest(test, ci.handle, fallback);\n                // check for not being null\n                test = IS_NOT_NULL.asType(MethodType.methodType(boolean.class,ci.targetType.parameterType(1)));\n                test = MethodHandles.dropArguments(test, 0, ci.targetType.parameterType(0));\n            }\n            ci.handle = MethodHandles.guardWithTest(test, ci.handle, fallback);\n            \n            // guards for parameter\n            Class[] pt = ci.handle.type().parameterArray();\n            for (int i=1; i<ci.args.length; i++) {\n                Object arg = ci.args[i];\n                if (arg==null) {\n                    test = IS_NULL.asType(MethodType.methodType(boolean.class, pt[i+1]));\n                } else {\n                    Class argClass = arg.getClass();\n                    test = SAME_CLASS.\n                                bindTo(argClass).\n                                asType(MethodType.methodType(boolean.class, pt[i+1]));\n                    Class[] drops = new Class[i+1];\n                    for (int j=0; j<drops.length; j++) drops[j] = pt[j];\n                    test = MethodHandles.dropArguments(test, 0, drops);\n                }\n                ci.handle = MethodHandles.guardWithTest(test, ci.handle, fallback);\n            }\n            \n        }","id":96740,"modified_method":"private static void setGuards(CallInfo ci, Object receiver) {\n            if (ci.handle==null) return;\n            \n            MethodHandle fallback = makeFallBack(ci.callSite, ci.sender, ci.methodName, ci.targetType, ci.safeNavigation);\n            \n            // guards for receiver\n            MethodHandle test;\n            if (receiver==null) {\n                test = IS_NULL.asType(MethodType.methodType(boolean.class,ci.targetType.parameterType(1)));\n                test = MethodHandles.dropArguments(test, 0, ci.targetType.parameterType(0));\n            } else if (receiver instanceof GroovyObject) {\n                GroovyObject go = (GroovyObject) receiver;\n                MetaClassImpl mc = (MetaClassImpl) go.getMetaClass();\n                test = SAME_MC.bindTo(mc); \n                // drop dummy receiver\n                test = test.asType(MethodType.methodType(boolean.class,ci.targetType.parameterType(1)));\n                test = MethodHandles.dropArguments(test, 0, ci.targetType.parameterType(0));\n            } else {\n                // handle constant meta class\n                ConstantMetaClassVersioning mcv = DefaultMetaClassInfo.getCurrentConstantMetaClassVersioning();\n                test = VALID_MC_VERSION.bindTo(mcv);\n                ci.handle = MethodHandles.guardWithTest(test, ci.handle, fallback);\n                // check for not being null\n                test = IS_NOT_NULL.asType(MethodType.methodType(boolean.class,ci.targetType.parameterType(1)));\n                test = MethodHandles.dropArguments(test, 0, ci.targetType.parameterType(0));\n            }\n            ci.handle = MethodHandles.guardWithTest(test, ci.handle, fallback);\n            \n            // guards for parameter\n            Class[] pt = ci.handle.type().parameterArray();\n            for (int i=1; i<ci.args.length; i++) {\n                Object arg = ci.args[i];\n                if (arg==null) {\n                    test = IS_NULL.asType(MethodType.methodType(boolean.class, pt[i+1]));\n                } else {\n                    Class argClass = arg.getClass();\n                    test = SAME_CLASS.\n                                bindTo(argClass).\n                                asType(MethodType.methodType(boolean.class, pt[i+1]));\n                }\n                Class[] drops = new Class[i+1];\n                for (int j=0; j<drops.length; j++) drops[j] = pt[j];\n                test = MethodHandles.dropArguments(test, 0, drops);\n                ci.handle = MethodHandles.guardWithTest(test, ci.handle, fallback);\n            }\n            \n        }","commit_id":"ca085412bfb7b3998e384200850736e7a53c7bd6","url":"https://github.com/apache/groovy"},{"original_method":"private static void setMetaClassCallHandleIfNedded(MetaClass mc, CallInfo ci) {\n            if (ci.handle!=null) return;\n            try {\n                ci.useMetaClass = true;\n                Object receiver = ci.args[0];\n                if (receiver instanceof Class) {\n                    ci.handle = LOOKUP.findVirtual(mc.getClass(), \"invokeStaticMethod\", MethodType.methodType(Object.class, Object.class, String.class, Object[].class));\n                    ci.handle = ci.handle.bindTo(mc);\n                } else {\n                    ci.handle = LOOKUP.findVirtual(MetaClass.class, \"invokeMethod\", INVOKE_METHOD_SIGNATURE);\n                    ci.handle = ci.handle.bindTo(mc).bindTo(receiver.getClass());\n                    ci.handle = MethodHandles.insertArguments(ci.handle, ci.handle.type().parameterCount()-2, false, true);\n                    if (receiver instanceof GroovyObject) {\n                        // if the meta class call fails we may still want to fall back to call\n                        // GroovyObject#invokeMethod if the receiver is a GroovyObject\n                        ci.handle = MethodHandles.catchException(ci.handle, MissingMethodException.class, GROOVY_OBJECT_INVOKER);\n                    }\n                }\n                ci.handle = MethodHandles.insertArguments(ci.handle, 1, ci.methodName);\n                ci.handle = ci.handle.asCollector(Object[].class, ci.targetType.parameterCount()-2);\n            } catch (Exception e) {\n                throw new GroovyBugError(e);\n            }\n            \n           \n        }","id":96741,"modified_method":"private static void setMetaClassCallHandleIfNedded(MetaClass mc, CallInfo ci) {\n            if (ci.handle!=null) return;\n            try {\n                ci.useMetaClass = true;\n                Object receiver = ci.args[0];\n                if (receiver instanceof Class) {\n                    ci.handle = LOOKUP.findVirtual(mc.getClass(), \"invokeStaticMethod\", MethodType.methodType(Object.class, Object.class, String.class, Object[].class));\n                    ci.handle = ci.handle.bindTo(mc);\n                } else {\n                    ci.handle = LOOKUP.findVirtual(MetaClass.class, \"invokeMethod\", INVOKE_METHOD_SIGNATURE);\n                    ci.handle = ci.handle.bindTo(mc);\n                    if (receiver==null) {\n                        ci.handle = ci.handle.bindTo(NullObject.class);\n                    } else {\n                        ci.handle = ci.handle.bindTo(receiver.getClass());\n                    }\n                    ci.handle = MethodHandles.insertArguments(ci.handle, ci.handle.type().parameterCount()-2, false, true);\n                    if (receiver instanceof GroovyObject) {\n                        // if the meta class call fails we may still want to fall back to call\n                        // GroovyObject#invokeMethod if the receiver is a GroovyObject\n                        ci.handle = MethodHandles.catchException(ci.handle, MissingMethodException.class, GROOVY_OBJECT_INVOKER);\n                    }\n                }\n                ci.handle = MethodHandles.insertArguments(ci.handle, 1, ci.methodName);\n                ci.handle = ci.handle.asCollector(Object[].class, ci.targetType.parameterCount()-2);\n            } catch (Exception e) {\n                throw new GroovyBugError(e);\n            }\n            \n           \n        }","commit_id":"7a29ee608b6a51d280b3d46f67ea9e23f98d2b05","url":"https://github.com/apache/groovy"},{"original_method":"private static void correctNullReceiver(CallInfo ci){\n            if (ci.args[0]!=null || ci.useMetaClass) return;\n            ci.handle = ci.handle.bindTo(NullObject.getNullObject());\n            ci.handle = MethodHandles.dropArguments(ci.handle, 0, ci.targetType.parameterType(1));\n        }","id":96742,"modified_method":"private static void correctNullReceiver(CallInfo ci){\n            if (ci.args[0]!=null) return;\n            ci.handle = ci.handle.bindTo(NullObject.getNullObject());\n            ci.handle = MethodHandles.dropArguments(ci.handle, 0, ci.targetType.parameterType(1));\n        }","commit_id":"7a29ee608b6a51d280b3d46f67ea9e23f98d2b05","url":"https://github.com/apache/groovy"},{"original_method":"private void focusCurrentExpression() {\n    if (isFinished()) {\n      return;\n    }\n\n    PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);\n\n    final int currentSegmentNumber = getCurrentSegmentNumber();\n\n    lockSegmentAtTheSameOffsetIfAny();\n\n    if (currentSegmentNumber < 0) return;\n    final int start = mySegments.getSegmentStart(currentSegmentNumber);\n    final int end = mySegments.getSegmentEnd(currentSegmentNumber);\n    myEditor.getCaretModel().moveToOffset(end);\n    myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);\n    myEditor.getSelectionModel().removeSelection();\n\n\n    myEditor.getSelectionModel().setSelection(start, end);\n    Expression expressionNode = myTemplate.getExpressionAt(myCurrentVariableNumber);\n\n    final ExpressionContext context = createExpressionContext(start);\n    final LookupElement[] lookupItems = expressionNode.calculateLookupItems(context);\n    final PsiFile psiFile = PsiDocumentManager.getInstance(myProject).getPsiFile(myDocument);\n    if (lookupItems != null && lookupItems.length > 0) {\n      if (((TemplateManagerImpl)TemplateManager.getInstance(myProject)).shouldSkipInTests()) {\n        final String s = lookupItems[0].getLookupString();\n        EditorModificationUtil.insertStringAtCaret(myEditor, s);\n        itemSelected(lookupItems[0], psiFile, currentSegmentNumber, ' ', lookupItems);\n      }\n      else {\n        for (LookupElement lookupItem : lookupItems) {\n          assert lookupItem != null : expressionNode;\n        }\n\n        runLookup(currentSegmentNumber, lookupItems, expressionNode.getAdvertisingText(), psiFile);\n      }\n    }\n    else {\n      Result result = expressionNode.calculateResult(context);\n      if (result != null) {\n        result.handleFocused(psiFile, myDocument, mySegments.getSegmentStart(currentSegmentNumber),\n                             mySegments.getSegmentEnd(currentSegmentNumber));\n      }\n    }\n    focusCurrentHighlighter(true);\n  }","id":96743,"modified_method":"private void focusCurrentExpression() {\n    if (isFinished()) {\n      return;\n    }\n\n    PsiDocumentManager.getInstance(myProject).commitDocument(myDocument);\n\n    final int currentSegmentNumber = getCurrentSegmentNumber();\n\n    lockSegmentAtTheSameOffsetIfAny();\n\n    if (currentSegmentNumber < 0) return;\n    final int start = mySegments.getSegmentStart(currentSegmentNumber);\n    final int end = mySegments.getSegmentEnd(currentSegmentNumber);\n    if (end >= 0) {\n      myEditor.getCaretModel().moveToOffset(end);\n      myEditor.getScrollingModel().scrollToCaret(ScrollType.RELATIVE);\n      myEditor.getSelectionModel().removeSelection();\n      myEditor.getSelectionModel().setSelection(start, end);\n    }\n    \n    Expression expressionNode = myTemplate.getExpressionAt(myCurrentVariableNumber);\n    final ExpressionContext context = createExpressionContext(start);\n    final LookupElement[] lookupItems = expressionNode.calculateLookupItems(context);\n    final PsiFile psiFile = PsiDocumentManager.getInstance(myProject).getPsiFile(myDocument);\n    if (lookupItems != null && lookupItems.length > 0) {\n      if (((TemplateManagerImpl)TemplateManager.getInstance(myProject)).shouldSkipInTests()) {\n        final String s = lookupItems[0].getLookupString();\n        EditorModificationUtil.insertStringAtCaret(myEditor, s);\n        itemSelected(lookupItems[0], psiFile, currentSegmentNumber, ' ', lookupItems);\n      }\n      else {\n        for (LookupElement lookupItem : lookupItems) {\n          assert lookupItem != null : expressionNode;\n        }\n\n        runLookup(currentSegmentNumber, lookupItems, expressionNode.getAdvertisingText(), psiFile);\n      }\n    }\n    else {\n      Result result = expressionNode.calculateResult(context);\n      if (result != null) {\n        result.handleFocused(psiFile, myDocument, mySegments.getSegmentStart(currentSegmentNumber),\n                             mySegments.getSegmentEnd(currentSegmentNumber));\n      }\n    }\n    focusCurrentHighlighter(true);\n  }","commit_id":"6ec3eab30dcad5eb53937997752b17d5a224f4f0","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private String[] getSuggestedNames() {\n    String initialName = UsageViewUtil.getShortName(myPsiElement);\n    mySuggestedNameInfo = suggestNamesForElement(myPsiElement);\n\n    String parameterName = null;\n    if (myNameSuggestionContext != null) {\n      final PsiElement nameSuggestionContextParent = myNameSuggestionContext.getParent();\n      if (nameSuggestionContextParent != null && nameSuggestionContextParent.getParent() instanceof PsiExpressionList) {\n        final PsiExpressionList expressionList = (PsiExpressionList)nameSuggestionContextParent.getParent();\n        final PsiElement parent = expressionList.getParent();\n        if (parent instanceof PsiCallExpression) {\n          final PsiMethod method = ((PsiCallExpression)parent).resolveMethod();\n          if (method != null) {\n            final PsiParameter[] parameters = method.getParameterList().getParameters();\n            final PsiExpression[] expressions = expressionList.getExpressions();\n            for (int i = 0; i < expressions.length; i++) {\n              PsiExpression expression = expressions[i];\n              if (expression == nameSuggestionContextParent) {\n                if (i < parameters.length) {\n                  parameterName = parameters[i].getName();\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n    final String[] strings = mySuggestedNameInfo != null ? mySuggestedNameInfo.names : ArrayUtil.EMPTY_STRING_ARRAY;\n    ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings));\n    final String properlyCased = suggestProperlyCasedName(myPsiElement);\n    if (!list.contains(initialName)) {\n      list.add(0, initialName);\n    }\n    else {\n      int i = list.indexOf(initialName);\n      list.remove(i);\n      list.add(0, initialName);\n    }\n    if (properlyCased != null && !properlyCased.equals(initialName)) {\n      list.add(1, properlyCased);\n    }\n    if (parameterName != null && !list.contains(parameterName)) {\n      list.add(parameterName);\n    }\n    ContainerUtil.removeDuplicates(list);\n    return list.toArray(new String[list.size()]);\n  }","id":96744,"modified_method":"private String[] getSuggestedNames() {\n    List<String> result = new ArrayList<String>();\n    for(NameSuggestionProvider provider: Extensions.getExtensions(NameSuggestionProvider.EP_NAME)) {\n      SuggestedNameInfo info = provider.getSuggestedNames(myPsiElement, myNameSuggestionContext, result);\n      if (info != null) mySuggestedNameInfo = info;\n    }\n    return result.toArray(new String[result.size()]);\n  }","commit_id":"b32f7902519d56ab35afe6b06a34648970601679","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void createNewNameComponent() {\n    String[] suggestedNames = getSuggestedNames();\n    myNameSuggestionsField = new NameSuggestionsField(suggestedNames, myProject, FileTypes.PLAIN_TEXT, myEditor);\n    myNameChangedListener = new NameSuggestionsField.DataChanged() {\n      public void dataChanged() {\n        validateButtons();\n      }\n    };\n    myNameSuggestionsField.addDataChangedListener(myNameChangedListener);\n\n    if (myPsiElement instanceof PsiVariable) {\n      myNameSuggestionsField.getComponent().registerKeyboardAction(new ActionListener() {\n        public void actionPerformed(ActionEvent e) {\n          completeVariable(myNameSuggestionsField.getEditor());\n        }\n      }, KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, InputEvent.CTRL_MASK), JComponent.WHEN_IN_FOCUSED_WINDOW);\n    }\n  }","id":96745,"modified_method":"private void createNewNameComponent() {\n    String[] suggestedNames = getSuggestedNames();\n    myNameSuggestionsField = new NameSuggestionsField(suggestedNames, myProject, FileTypes.PLAIN_TEXT, myEditor);\n    myNameChangedListener = new NameSuggestionsField.DataChanged() {\n      public void dataChanged() {\n        validateButtons();\n      }\n    };\n    myNameSuggestionsField.addDataChangedListener(myNameChangedListener);\n\n    myNameSuggestionsField.getComponent().registerKeyboardAction(new ActionListener() {\n      public void actionPerformed(ActionEvent e) {\n        completeVariable(myNameSuggestionsField.getEditor());\n      }\n    }, KeyStroke.getKeyStroke(KeyEvent.VK_SPACE, InputEvent.CTRL_MASK), JComponent.WHEN_IN_FOCUSED_WINDOW);\n  }","commit_id":"b32f7902519d56ab35afe6b06a34648970601679","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void completeVariable(Editor editor) {\n    String prefix = myNameSuggestionsField.getEnteredName();\n    PsiVariable var = (PsiVariable)myPsiElement;\n    VariableKind kind = JavaCodeStyleManager.getInstance(myProject).getVariableKind(var);\n    Set<LookupItem> set = new LinkedHashSet<LookupItem>();\n    CompletionUtil.completeVariableNameForRefactoring(myProject, set, prefix, var.getType(), kind);\n\n    if (prefix.length() == 0) {\n      String[] suggestedNames = getSuggestedNames();\n      for (String suggestedName : suggestedNames) {\n        LookupItemUtil.addLookupItem(set, suggestedName, \"\");\n      }\n    }\n\n    LookupItem[] lookupItems = set.toArray(new LookupItem[set.size()]);\n    editor.getCaretModel().moveToOffset(prefix.length());\n    editor.getSelectionModel().removeSelection();\n    LookupManager.getInstance(myProject).showLookup(editor, lookupItems, prefix, null, new CharFilter() {\n      public int accept(char c, final String prefix) {\n        if (Character.isJavaIdentifierPart(c)) return CharFilter.ADD_TO_PREFIX;\n        return CharFilter.SELECT_ITEM_AND_FINISH_LOOKUP;\n      }\n    });\n  }","id":96746,"modified_method":"private void completeVariable(Editor editor) {\n    String prefix = myNameSuggestionsField.getEnteredName();\n    Collection<LookupItem> items = null;\n    for(NameSuggestionProvider provider: Extensions.getExtensions(NameSuggestionProvider.EP_NAME)) {\n      items = provider.completeName(myPsiElement, myNameSuggestionContext, prefix);\n      if (items != null) break;\n    }\n\n    if (items != null) {\n      LookupItem[] lookupItems = items.toArray(new LookupItem[items.size()]);\n      editor.getCaretModel().moveToOffset(prefix.length());\n      editor.getSelectionModel().removeSelection();\n      LookupManager.getInstance(myProject).showLookup(editor, lookupItems, prefix, null, new CharFilter() {\n        public int accept(char c, final String prefix) {\n          if (Character.isJavaIdentifierPart(c)) return CharFilter.ADD_TO_PREFIX;\n          return CharFilter.SELECT_ITEM_AND_FINISH_LOOKUP;\n        }\n      });\n    }\n  }","commit_id":"b32f7902519d56ab35afe6b06a34648970601679","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public List getDiff(Object coll, XWikiContext context) {\r\n        ArrayList difflist = new ArrayList();\r\n        BaseCollection collection = (BaseCollection) coll;\r\n        Iterator itfields = getFields().keySet().iterator();\r\n        while (itfields.hasNext()) {\r\n            String name = (String) itfields.next();\r\n            BaseElement prop = (BaseElement)getFields().get(name);\r\n            BaseElement prop2 = (BaseElement)collection.getFields().get(name);\r\n\r\n            if (prop2==null) {\r\n                String dprop = ((PropertyClass)getxWikiClass(context).getField(name)).displayView(name, this,context);\r\n                difflist.add(new ObjectDiff(getClassName(), getNumber(), \"added\",\r\n                        name, dprop , \"\"));\r\n            } else if (!prop.equals(prop2)) {\r\n                BaseClass bclass = getxWikiClass(context);\r\n                PropertyClass pclass = (PropertyClass) ((bclass==null) ? null : bclass.getField(name));\r\n                if (pclass==null) {\r\n                    difflist.add(new ObjectDiff(getClassName(), getNumber(), \"changed\",\r\n                            name, prop.toString() , prop2.toString()));\r\n                } else {\r\n                    String dprop = pclass.displayView(name,this,context);\r\n                    String dprop2 = pclass.displayView(name,collection,context);\r\n                    difflist.add(new ObjectDiff(getClassName(), getNumber(), \"changed\",\r\n                            name, dprop , dprop2));\r\n                }\r\n            }\r\n        }\r\n\r\n        itfields = collection.getFields().keySet().iterator();\r\n        while (itfields.hasNext()) {\r\n            String name = (String) itfields.next();\r\n            BaseElement prop = (BaseElement)getFields().get(name);\r\n            BaseElement prop2 = (BaseElement)collection.getFields().get(name);\r\n\r\n            if (prop==null) {\r\n                BaseClass bclass = getxWikiClass(context);\r\n                PropertyClass pclass = (PropertyClass) ((bclass==null) ? null : bclass.getField(name));\r\n                if (pclass==null) {\r\n                    difflist.add(new ObjectDiff(getClassName(), getNumber(), \"changed\",\r\n                            name, \"\" , prop2.toString()));\r\n                } else {\r\n                    String dprop2 = ((PropertyClass)getxWikiClass(context).getField(name)).displayView(name,collection,context);\r\n                    difflist.add(new ObjectDiff(getClassName(), getNumber(), \"removed\",\r\n                            name, \"\" , dprop2));\r\n                }\r\n            }\r\n        }\r\n\r\n        return difflist;\r\n    }","id":96747,"modified_method":"public List getDiff(Object coll, XWikiContext context) {\r\n        ArrayList difflist = new ArrayList();\r\n        BaseCollection collection = (BaseCollection) coll;\r\n        Iterator itfields = getFields().keySet().iterator();\r\n        while (itfields.hasNext()) {\r\n            String name = (String) itfields.next();\r\n            BaseProperty prop = (BaseProperty) getFields().get(name);\r\n            BaseProperty prop2 = (BaseProperty) collection.getFields().get(name);\r\n\r\n            if (prop2==null) {\r\n                String dprop = (prop.getValue() instanceof String) ? prop.toText() : ((PropertyClass)getxWikiClass(context).getField(name)).displayView(name,this,context);\r\n                difflist.add(new ObjectDiff(getClassName(), getNumber(), \"added\",\r\n                        name, dprop , \"\"));\r\n            } else if (!prop.equals(prop2)) {\r\n                BaseClass bclass = getxWikiClass(context);\r\n                PropertyClass pclass = (PropertyClass) ((bclass==null) ? null : bclass.getField(name));\r\n                if (pclass==null) {\r\n                    difflist.add(new ObjectDiff(getClassName(), getNumber(), \"changed\",\r\n                            name, prop.toText() , prop2.toText()));\r\n                } else {\r\n                    String dprop = (prop.getValue() instanceof String) ? prop.toText() : pclass.displayView(name,this,context);\r\n                    String dprop2 = (prop2.getValue() instanceof String) ? prop2.toText() : pclass.displayView(name,collection,context);\r\n                    difflist.add(new ObjectDiff(getClassName(), getNumber(), \"changed\",\r\n                            name, dprop , dprop2));\r\n                }\r\n            }\r\n        }\r\n\r\n        itfields = collection.getFields().keySet().iterator();\r\n        while (itfields.hasNext()) {\r\n            String name = (String) itfields.next();\r\n            BaseProperty prop = (BaseProperty)getFields().get(name);\r\n            BaseProperty prop2 = (BaseProperty)collection.getFields().get(name);\r\n\r\n            if (prop==null) {\r\n                BaseClass bclass = getxWikiClass(context);\r\n                PropertyClass pclass = (PropertyClass) ((bclass==null) ? null : bclass.getField(name));\r\n                if (pclass==null) {\r\n                    difflist.add(new ObjectDiff(getClassName(), getNumber(), \"changed\",\r\n                            name, \"\" , prop2.toText()));\r\n                } else {\r\n                    String dprop2 = (prop2.getValue() instanceof String) ? prop2.toText() : ((PropertyClass)getxWikiClass(context).getField(name)).displayView(name,collection,context);\r\n                    difflist.add(new ObjectDiff(getClassName(), getNumber(), \"removed\",\r\n                            name, \"\" , dprop2));\r\n                }\r\n            }\r\n        }\r\n\r\n        return difflist;\r\n    }","commit_id":"ba5defbe205c2b4b4ce0e89dcc4c23eacaaf78f2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"public String toText() {\r\n        return getValue().toString();\r\n    }","id":96748,"modified_method":"public String toText() {\r\n        Object value = getValue();\r\n        return (value==null) ? \"\" : value.toString();\r\n    }","commit_id":"ba5defbe205c2b4b4ce0e89dcc4c23eacaaf78f2","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"@Override\n\tprotected void processResponse(String response) throws Exception {\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tSyncContext syncContext = objectMapper.readValue(\n\t\t\tresponse, new TypeReference<SyncContext>() {});\n\n\t\tSyncAccount syncAccount = SyncAccountService.fetchSyncAccount(\n\t\t\tgetSyncAccountId());\n\n\t\tMap<String, String> portletPreferencesMap =\n\t\t\tsyncContext.getPortletPreferencesMap();\n\n\t\tint maxConnections = Integer.parseInt(\n\t\t\tportletPreferencesMap.get(\n\t\t\t\tSyncContext.PREFERENCE_KEY_MAX_CONNECTIONS));\n\n\t\tsyncAccount.setMaxConnections(maxConnections);\n\n\t\tint pollInterval = Integer.parseInt(\n\t\t\tportletPreferencesMap.get(\n\t\t\t\tSyncContext.PREFERENCE_KEY_POLL_INTERVAL));\n\n\t\tsyncAccount.setPollInterval(pollInterval);\n\n\t\tsyncAccount.setSocialOfficeInstalled(\n\t\t\tsyncContext.isSocialOfficeInstalled());\n\n\t\tif ((Boolean)getParameterValue(\"checkState\")) {\n\t\t\tif (ReleaseInfo.isServerCompatible(syncContext)) {\n\t\t\t\tif (_logger.isDebugEnabled()) {\n\t\t\t\t\t_logger.debug(\"Connected to {}\", syncAccount.getUrl());\n\t\t\t\t}\n\n\t\t\t\tsyncAccount.setState(SyncAccount.STATE_CONNECTED);\n\n\t\t\t\tFileEventUtil.retryFileTransfers(getSyncAccountId());\n\n\t\t\t\tConnectionRetryUtil.resetRetryDelay(getSyncAccountId());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsyncAccount.setState(SyncAccount.STATE_DISCONNECTED);\n\t\t\t\tsyncAccount.setUiEvent(\n\t\t\t\t\tSyncAccount.UI_EVENT_SYNC_WEB_OUT_OF_DATE);\n\t\t\t}\n\t\t}\n\n\t\tSyncAccountService.update(syncAccount);\n\n\t\tSyncUser remoteSyncUser = syncContext.getSyncUser();\n\n\t\tSyncUser localSyncUser = SyncUserService.fetchSyncUser(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tremoteSyncUser.setSyncAccountId(localSyncUser.getSyncAccountId());\n\t\tremoteSyncUser.setSyncUserId(localSyncUser.getSyncUserId());\n\n\t\tSyncUserService.update(remoteSyncUser);\n\t}","id":96749,"modified_method":"@Override\n\tprotected void processResponse(String response) throws Exception {\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tSyncContext syncContext = objectMapper.readValue(\n\t\t\tresponse, new TypeReference<SyncContext>() {});\n\n\t\tSyncAccount syncAccount = SyncAccountService.fetchSyncAccount(\n\t\t\tgetSyncAccountId());\n\n\t\tSyncUser remoteSyncUser = syncContext.getSyncUser();\n\n\t\tif (remoteSyncUser == null) {\n\t\t\tthrow new HttpResponseException(\n\t\t\t\tHttpStatus.SC_UNAUTHORIZED, \"Authenticated access required\");\n\t\t}\n\n\t\tSyncUser localSyncUser = SyncUserService.fetchSyncUser(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tremoteSyncUser.setSyncAccountId(localSyncUser.getSyncAccountId());\n\t\tremoteSyncUser.setSyncUserId(localSyncUser.getSyncUserId());\n\n\t\tSyncUserService.update(remoteSyncUser);\n\n\t\tMap<String, String> portletPreferencesMap =\n\t\t\tsyncContext.getPortletPreferencesMap();\n\n\t\tint maxConnections = Integer.parseInt(\n\t\t\tportletPreferencesMap.get(\n\t\t\t\tSyncContext.PREFERENCE_KEY_MAX_CONNECTIONS));\n\n\t\tsyncAccount.setMaxConnections(maxConnections);\n\n\t\tint pollInterval = Integer.parseInt(\n\t\t\tportletPreferencesMap.get(\n\t\t\t\tSyncContext.PREFERENCE_KEY_POLL_INTERVAL));\n\n\t\tsyncAccount.setPollInterval(pollInterval);\n\n\t\tsyncAccount.setSocialOfficeInstalled(\n\t\t\tsyncContext.isSocialOfficeInstalled());\n\n\t\tif ((Boolean)getParameterValue(\"checkState\")) {\n\t\t\tif (ReleaseInfo.isServerCompatible(syncContext)) {\n\t\t\t\tif (_logger.isDebugEnabled()) {\n\t\t\t\t\t_logger.debug(\"Connected to {}\", syncAccount.getUrl());\n\t\t\t\t}\n\n\t\t\t\tsyncAccount.setState(SyncAccount.STATE_CONNECTED);\n\n\t\t\t\tFileEventUtil.retryFileTransfers(getSyncAccountId());\n\n\t\t\t\tConnectionRetryUtil.resetRetryDelay(getSyncAccountId());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tsyncAccount.setState(SyncAccount.STATE_DISCONNECTED);\n\t\t\t\tsyncAccount.setUiEvent(\n\t\t\t\t\tSyncAccount.UI_EVENT_SYNC_WEB_OUT_OF_DATE);\n\t\t\t}\n\t\t}\n\n\t\tSyncAccountService.update(syncAccount);\n\t}","commit_id":"21063899f8e2c4fb8fe0f86adef68186e5374853","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@After\n\tpublic void tearDown() throws Exception {\n\t\tPath filePath = Paths.get(filePathName);\n\n\t\tFileUtils.deleteDirectory(filePath.toFile());\n\n\t\tSyncAccountService.deleteSyncAccount(syncAccount.getSyncAccountId());\n\t}","id":96750,"modified_method":"@After\n\tpublic void tearDown() throws Exception {\n\t\tPath filePath = Paths.get(filePathName);\n\n\t\tFileUtils.deleteDirectory(filePath.toFile());\n\n\t\tsyncAccount = SyncAccountService.fetchSyncAccount(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tif (syncAccount != null) {\n\t\t\tSyncAccountService.deleteSyncAccount(\n\t\t\t\tsyncAccount.getSyncAccountId());\n\t\t}\n\n\t\tPath databaseFilePath = FileUtil.getFilePath(\n\t\t\tPropsValues.SYNC_CONFIGURATION_DIRECTORY,\n\t\t\tPropsValues.SYNC_DATABASE_NAME + \".h2.db\");\n\n\t\tFiles.deleteIfExists(databaseFilePath);\n\t}","commit_id":"7384a225a57c0577efdce88947af418b422eba70","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Before\n\tpublic void setUp() throws Exception {\n\t\tPropsUtil.set(PropsKeys.SYNC_DATABASE_NAME, \"sync-test\");\n\t\tPropsUtil.set(\n\t\t\tPropsKeys.SYNC_LOGGER_CONFIGURATION_FILE, \"sync-test-log4j.xml\");\n\n\t\tLoggerUtil.initLogger();\n\n\t\tUpgradeUtil.upgrade();\n\n\t\tfilePathName = FileUtil.getFilePathName(\n\t\t\tSystem.getProperty(\"user.home\"), \"liferay-sync-test\");\n\n\t\tsyncAccount = SyncAccountService.addSyncAccount(\n\t\t\tfilePathName, \"test@liferay.com\", 1, \"test\", \"test\", 5, null, false,\n\t\t\t\"http://localhost:8080\");\n\n\t\tsyncAccount.setActive(true);\n\t\tsyncAccount.setState(SyncAccount.STATE_CONNECTED);\n\n\t\tSyncAccountService.update(syncAccount);\n\n\t\tPowerMockito.mockStatic(SyncEngine.class);\n\n\t\tMockito.when(\n\t\t\tSyncEngine.isRunning()\n\t\t).thenReturn(\n\t\t\ttrue\n\t\t);\n\t}","id":96751,"modified_method":"@Before\n\tpublic void setUp() throws Exception {\n\t\tPropsUtil.set(PropsKeys.SYNC_DATABASE_NAME, \"sync-test\");\n\t\tPropsUtil.set(\n\t\t\tPropsKeys.SYNC_LOGGER_CONFIGURATION_FILE, \"sync-test-logback.xml\");\n\n\t\tLoggerUtil.initLogger();\n\n\t\tUpgradeUtil.upgrade();\n\n\t\tfilePathName = FileUtil.getFilePathName(\n\t\t\tSystem.getProperty(\"user.home\"), \"liferay-sync-test\");\n\n\t\tsyncAccount = SyncAccountService.addSyncAccount(\n\t\t\tfilePathName, \"test@liferay.com\", 1, \"test\", 5, null, null, false,\n\t\t\t\"http://localhost:8080\");\n\n\t\tsyncAccount.setActive(true);\n\t\tsyncAccount.setState(SyncAccount.STATE_CONNECTED);\n\n\t\tSyncAccountService.update(syncAccount);\n\n\t\tPowerMockito.mockStatic(SyncEngine.class);\n\n\t\tMockito.when(\n\t\t\tSyncEngine.isRunning()\n\t\t).thenReturn(\n\t\t\ttrue\n\t\t);\n\t}","commit_id":"7384a225a57c0577efdce88947af418b422eba70","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testUpdateFilePathNameSyncFile() throws Exception {\n\t\tSyncFileService.registerModelListener(new SyncFileModelListener());\n\n\t\tSyncFile syncFile = SyncFileTestUtil.addFileSyncFile(\n\t\t\tFileUtil.getFilePathName(filePathName, \"test\"), 0,\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertTrue(_onCreateCalled);\n\n\t\tsyncFile.setFilePathName(\n\t\t\tFileUtil.getFilePathName(filePathName, \"test2\"));\n\t\tsyncFile.setSize(256);\n\n\t\tSyncFileService.update(syncFile);\n\n\t\tAssert.assertEquals(\n\t\t\tFileUtil.getFilePathName(filePathName, \"test\"),\n\t\t\t_originalFieldValues.get(\"filePathName\"));\n\t\tAssert.assertEquals(3, _originalFieldValues.size());\n\n\t\tSyncFileService.deleteSyncFile(syncFile);\n\n\t\tAssert.assertTrue(_onRemoveCalled);\n\t}","id":96752,"modified_method":"@Test\n\tpublic void testUpdateFilePathNameSyncFile() throws Exception {\n\t\tSyncFileService.registerModelListener(new SyncFileModelListener());\n\n\t\tSyncFile syncFile = SyncFileTestUtil.addFileSyncFile(\n\t\t\tFileUtil.getFilePathName(filePathName, \"test\"), 0,\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertTrue(_onCreateCalled);\n\n\t\tsyncFile.setFilePathName(\n\t\t\tFileUtil.getFilePathName(filePathName, \"test2\"));\n\t\tsyncFile.setSize(256);\n\n\t\tSyncFileService.update(syncFile);\n\n\t\tAssert.assertEquals(\n\t\t\tFileUtil.getFilePathName(filePathName, \"test\"),\n\t\t\t_originalFieldValues.get(\"filePathName\"));\n\t\tAssert.assertEquals(2, _originalFieldValues.size());\n\n\t\tSyncFileService.deleteSyncFile(syncFile);\n\n\t\tAssert.assertTrue(_onRemoveCalled);\n\t}","commit_id":"7384a225a57c0577efdce88947af418b422eba70","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static void deleteSyncAccount(long syncAccountId) {\n\t\ttry {\n\n\t\t\t// Sync account\n\n\t\t\tSyncAccount syncAccount = fetchSyncAccount(syncAccountId);\n\n\t\t\t_syncAccountPersistence.deleteById(syncAccountId);\n\n\t\t\t// Sync files\n\n\t\t\ttry {\n\t\t\t\tdeleteSyncFiles(syncAccount);\n\t\t\t}\n\t\t\tcatch (IOException ioe) {\n\t\t\t\t_logger.error(ioe.getMessage(), ioe);\n\t\t\t}\n\n\t\t\t// Sync sites\n\n\t\t\tList<SyncSite> syncSites = SyncSiteService.findSyncSites(\n\t\t\t\tsyncAccountId);\n\n\t\t\tfor (SyncSite syncSite : syncSites) {\n\t\t\t\tSyncSiteService.deleteSyncSite(syncSite.getSyncSiteId());\n\t\t\t}\n\n\t\t\t// Sync user\n\n\t\t\tSyncUser syncUser = SyncUserService.fetchSyncUser(syncAccountId);\n\n\t\t\tSyncUserService.deleteSyncUser(syncUser.getSyncUserId());\n\n\t\t\t// Sync watch events\n\n\t\t\tSyncWatchEventService.deleteSyncWatchEvents(syncAccountId);\n\t\t}\n\t\tcatch (SQLException sqle) {\n\t\t\tif (_logger.isDebugEnabled()) {\n\t\t\t\t_logger.debug(sqle.getMessage(), sqle);\n\t\t\t}\n\t\t}\n\t}","id":96753,"modified_method":"public static void deleteSyncAccount(long syncAccountId) {\n\t\ttry {\n\n\t\t\t// Sync account\n\n\t\t\tSyncAccount syncAccount = fetchSyncAccount(syncAccountId);\n\n\t\t\t_syncAccountPersistence.deleteById(syncAccountId);\n\n\t\t\t// Sync files\n\n\t\t\ttry {\n\t\t\t\tdeleteSyncFiles(syncAccount);\n\t\t\t}\n\t\t\tcatch (IOException ioe) {\n\t\t\t\t_logger.error(ioe.getMessage(), ioe);\n\t\t\t}\n\n\t\t\t// Sync sites\n\n\t\t\tList<SyncSite> syncSites = SyncSiteService.findSyncSites(\n\t\t\t\tsyncAccountId);\n\n\t\t\tfor (SyncSite syncSite : syncSites) {\n\t\t\t\tSyncSiteService.deleteSyncSite(syncSite.getSyncSiteId());\n\t\t\t}\n\n\t\t\t// Sync user\n\n\t\t\tSyncUser syncUser = SyncUserService.fetchSyncUser(syncAccountId);\n\n\t\t\tif (syncUser != null) {\n\t\t\t\tSyncUserService.deleteSyncUser(syncUser.getSyncUserId());\n\t\t\t}\n\n\t\t\t// Sync watch events\n\n\t\t\tSyncWatchEventService.deleteSyncWatchEvents(syncAccountId);\n\t\t}\n\t\tcatch (SQLException sqle) {\n\t\t\tif (_logger.isDebugEnabled()) {\n\t\t\t\t_logger.debug(sqle.getMessage(), sqle);\n\t\t\t}\n\t\t}\n\t}","commit_id":"7384a225a57c0577efdce88947af418b422eba70","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static SyncAccount addSyncAccount(\n\t\t\tString filePathName, String login, int maxConnections,\n\t\t\tString password, int pollInterval, SyncSite[] syncSites,\n\t\t\tSyncUser syncUser, boolean trustSelfSigned, String url)\n\t\tthrows Exception {\n\n\t\t// Sync account\n\n\t\tSyncAccount syncAccount = new SyncAccount();\n\n\t\tsyncAccount.setFilePathName(filePathName);\n\t\tsyncAccount.setLogin(login);\n\t\tsyncAccount.setMaxConnections(maxConnections);\n\t\tsyncAccount.setPassword(Encryptor.encrypt(password));\n\t\tsyncAccount.setPollInterval(pollInterval);\n\t\tsyncAccount.setTrustSelfSigned(trustSelfSigned);\n\t\tsyncAccount.setUrl(url);\n\n\t\t_syncAccountPersistence.create(syncAccount);\n\n\t\t// Sync file\n\n\t\tPath filePath = Paths.get(filePathName);\n\n\t\tPath dataFilePath = Files.createDirectories(filePath.resolve(\".data\"));\n\n\t\tif (OSDetector.isWindows()) {\n\t\t\tFiles.setAttribute(dataFilePath, \"dos:hidden\", true);\n\t\t}\n\n\t\tSyncFileService.addSyncFile(\n\t\t\tnull, null, null, filePathName, null,\n\t\t\tString.valueOf(filePath.getFileName()), 0, 0, SyncFile.STATE_SYNCED,\n\t\t\tsyncAccount.getSyncAccountId(), SyncFile.TYPE_SYSTEM);\n\n\t\t// Sync sites\n\n\t\tif (syncSites != null) {\n\t\t\tfor (SyncSite syncSite : syncSites) {\n\t\t\t\tString syncSiteName = syncSite.getName();\n\n\t\t\t\tif (!FileUtil.isValidFileName(syncSiteName)) {\n\t\t\t\t\tsyncSiteName = String.valueOf(syncSite.getGroupId());\n\t\t\t\t}\n\n\t\t\t\tsyncSite.setFilePathName(\n\t\t\t\t\tFileUtil.getFilePathName(\n\t\t\t\t\t\tsyncAccount.getFilePathName(), syncSiteName));\n\n\t\t\t\tsyncSite.setSyncAccountId(syncAccount.getSyncAccountId());\n\n\t\t\t\tSyncSiteService.update(syncSite);\n\t\t\t}\n\t\t}\n\n\t\t// Sync user\n\n\t\tsyncUser.setSyncAccountId(syncAccount.getSyncAccountId());\n\n\t\tSyncUserService.update(syncUser);\n\n\t\treturn syncAccount;\n\t}","id":96754,"modified_method":"public static SyncAccount addSyncAccount(\n\t\t\tString filePathName, String login, int maxConnections,\n\t\t\tString password, int pollInterval, SyncSite[] syncSites,\n\t\t\tSyncUser syncUser, boolean trustSelfSigned, String url)\n\t\tthrows Exception {\n\n\t\t// Sync account\n\n\t\tSyncAccount syncAccount = new SyncAccount();\n\n\t\tsyncAccount.setFilePathName(filePathName);\n\t\tsyncAccount.setLogin(login);\n\t\tsyncAccount.setMaxConnections(maxConnections);\n\t\tsyncAccount.setPassword(Encryptor.encrypt(password));\n\t\tsyncAccount.setPollInterval(pollInterval);\n\t\tsyncAccount.setTrustSelfSigned(trustSelfSigned);\n\t\tsyncAccount.setUrl(url);\n\n\t\t_syncAccountPersistence.create(syncAccount);\n\n\t\t// Sync file\n\n\t\tPath filePath = Paths.get(filePathName);\n\n\t\tPath dataFilePath = Files.createDirectories(filePath.resolve(\".data\"));\n\n\t\tif (OSDetector.isWindows()) {\n\t\t\tFiles.setAttribute(dataFilePath, \"dos:hidden\", true);\n\t\t}\n\n\t\tSyncFileService.addSyncFile(\n\t\t\tnull, null, null, filePathName, null,\n\t\t\tString.valueOf(filePath.getFileName()), 0, 0, SyncFile.STATE_SYNCED,\n\t\t\tsyncAccount.getSyncAccountId(), SyncFile.TYPE_SYSTEM);\n\n\t\t// Sync sites\n\n\t\tif (syncSites != null) {\n\t\t\tfor (SyncSite syncSite : syncSites) {\n\t\t\t\tString syncSiteName = syncSite.getName();\n\n\t\t\t\tif (!FileUtil.isValidFileName(syncSiteName)) {\n\t\t\t\t\tsyncSiteName = String.valueOf(syncSite.getGroupId());\n\t\t\t\t}\n\n\t\t\t\tsyncSite.setFilePathName(\n\t\t\t\t\tFileUtil.getFilePathName(\n\t\t\t\t\t\tsyncAccount.getFilePathName(), syncSiteName));\n\n\t\t\t\tsyncSite.setSyncAccountId(syncAccount.getSyncAccountId());\n\n\t\t\t\tSyncSiteService.update(syncSite);\n\t\t\t}\n\t\t}\n\n\t\t// Sync user\n\n\t\tif (syncUser != null) {\n\t\t\tsyncUser.setSyncAccountId(syncAccount.getSyncAccountId());\n\n\t\t\tSyncUserService.update(syncUser);\n\t\t}\n\n\t\treturn syncAccount;\n\t}","commit_id":"7384a225a57c0577efdce88947af418b422eba70","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testSetFilePathName() throws Exception {\n\t\t_syncAccount = SyncAccountService.addSyncAccount(\n\t\t\tfilePathName, \"test@liferay.com\", 1, \"test\", \"test\", 5, null, false,\n\t\t\t\"http://localhost:8080\");\n\n\t\tSyncSite syncSite = SyncSiteTestUtil.addSyncSite(\n\t\t\t10158, FileUtil.getFilePathName(filePathName, \"test-site\"), 10185,\n\t\t\t_syncAccount.getSyncAccountId());\n\n\t\tSyncFile syncFile = SyncFileTestUtil.addFileSyncFile(\n\t\t\tFileUtil.getFilePathName(syncSite.getFilePathName(), \"test.txt\"), 0,\n\t\t\t_syncAccount.getSyncAccountId());\n\n\t\tString targetFilePathName = FileUtil.getFilePathName(\n\t\t\tSystem.getProperty(\"user.home\"), \"liferay-sync-test2\");\n\n\t\tSyncAccountService.setFilePathName(\n\t\t\t_syncAccount.getSyncAccountId(), targetFilePathName);\n\n\t\tsyncSite = SyncSiteService.fetchSyncSite(syncSite.getSyncSiteId());\n\n\t\tAssert.assertEquals(\n\t\t\tFileUtil.getFilePathName(targetFilePathName + \"test-site\"),\n\t\t\tsyncSite.getFilePathName());\n\n\t\tsyncFile = SyncFileService.fetchSyncFile(syncFile.getSyncFileId());\n\n\t\tAssert.assertEquals(\n\t\t\tFileUtil.getFilePathName(\n\t\t\t\ttargetFilePathName, \"test-site\", \"test.txt\"),\n\t\t\tsyncFile.getFilePathName());\n\t}","id":96755,"modified_method":"@Test\n\tpublic void testSetFilePathName() throws Exception {\n\t\tSyncSite syncSite = SyncSiteTestUtil.addSyncSite(\n\t\t\t10158, FileUtil.getFilePathName(filePathName, \"test-site\"), 10185,\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tSyncFile syncFile = SyncFileTestUtil.addFileSyncFile(\n\t\t\tFileUtil.getFilePathName(syncSite.getFilePathName(), \"test.txt\"), 0,\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tString targetFilePathName = FileUtil.getFilePathName(\n\t\t\tSystem.getProperty(\"user.home\"), \"liferay-sync-test2\");\n\n\t\tSyncAccountService.setFilePathName(\n\t\t\tsyncAccount.getSyncAccountId(), targetFilePathName);\n\n\t\tsyncSite = SyncSiteService.fetchSyncSite(syncSite.getSyncSiteId());\n\n\t\tAssert.assertEquals(\n\t\t\tFileUtil.getFilePathName(targetFilePathName, \"test-site\"),\n\t\t\tsyncSite.getFilePathName());\n\n\t\tsyncFile = SyncFileService.fetchSyncFile(syncFile.getSyncFileId());\n\n\t\tAssert.assertEquals(\n\t\t\tFileUtil.getFilePathName(\n\t\t\t\ttargetFilePathName, \"test-site\", \"test.txt\"),\n\t\t\tsyncFile.getFilePathName());\n\t}","commit_id":"7384a225a57c0577efdce88947af418b422eba70","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testAddAccount() throws Exception {\n\t\tSyncAccount syncAccount = SyncAccountService.addSyncAccount(\n\t\t\tfilePathName, \"test@liferay.com\", 1, \"test\", \"test\", 5, null, false,\n\t\t\t\"http://localhost:8080\");\n\n\t\t_syncAccount = SyncAccountService.fetchSyncAccount(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertNotNull(_syncAccount);\n\t}","id":96756,"modified_method":"@Test\n\tpublic void testAddAccount() throws Exception {\n\t\tsyncAccount = SyncAccountService.fetchSyncAccount(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertNotNull(syncAccount);\n\t}","commit_id":"7384a225a57c0577efdce88947af418b422eba70","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testStop() throws Exception {\n\t\tSyncEngineListener syncEngineListener = new SyncEngineListener() {\n\n\t\t\t@Override\n\t\t\tpublic void syncEngineStateChanged(int syncEngineState) {\n\t\t\t\tif (syncEngineState ==\n\t\t\t\t\t\tSyncEngineUtil.SYNC_ENGINE_STATE_STOPPED) {\n\n\t\t\t\t\t_stopped = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t\tSyncEngineUtil.registerSyncEngineListener(syncEngineListener);\n\n\t\tThread thread = new Thread(\n\t\t\tnew Runnable() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tSyncEngine.start();\n\t\t\t\t}\n\n\t\t\t});\n\n\t\tthread.start();\n\n\t\tThread.sleep(100);\n\n\t\tSyncEngine.stop();\n\n\t\tThread.sleep(100);\n\n\t\tif (!_stopped) {\n\t\t\tAssert.fail();\n\t\t}\n\t}","id":96757,"modified_method":"@Test\n\tpublic void testStop() throws Exception {\n\t\tSyncEngineListener syncEngineListener = new SyncEngineListener() {\n\n\t\t\t@Override\n\t\t\tpublic void syncEngineStateChanged(\n\t\t\t\tlong syncAccountId, int syncEngineState) {\n\n\t\t\t\tif (syncEngineState ==\n\t\t\t\t\t\tSyncEngineUtil.SYNC_ENGINE_STATE_STOPPED) {\n\n\t\t\t\t\t_stopped = true;\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t\tSyncEngineUtil.registerSyncEngineListener(syncEngineListener);\n\n\t\tThread thread = new Thread(\n\t\t\tnew Runnable() {\n\n\t\t\t\t@Override\n\t\t\t\tpublic void run() {\n\t\t\t\t\tSyncEngine.start();\n\t\t\t\t}\n\n\t\t\t});\n\n\t\tthread.start();\n\n\t\tThread.sleep(100);\n\n\t\tSyncEngine.stop();\n\n\t\tThread.sleep(100);\n\n\t\tif (!_stopped) {\n\t\t\tAssert.fail();\n\t\t}\n\t}","commit_id":"7384a225a57c0577efdce88947af418b422eba70","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Test\n\tpublic void testDeleteFolderSyncFile() throws Exception {\n\t\tList<SyncFile> syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(1, syncFiles.size());\n\n\t\tSyncFile folderSyncFileA = SyncFileTestUtil.addFolderSyncFile(\n\t\t\tFileUtil.getFilePathName(filePathName, \"a\"),\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tSyncFile folderSyncFileAA = SyncFileTestUtil.addFolderSyncFile(\n\t\t\tFileUtil.getFilePathName(filePathName, \"a\", \"a\"),\n\t\t\tfolderSyncFileA.getTypePK(), syncAccount.getSyncAccountId());\n\n\t\tSyncFileTestUtil.addFolderSyncFile(\n\t\t\tFileUtil.getFilePathName(filePathName, \"a\", \"b\"),\n\t\t\tfolderSyncFileA.getTypePK(), syncAccount.getSyncAccountId());\n\n\t\tSyncFileTestUtil.addFolderSyncFile(\n\t\t\tFileUtil.getFilePathName(filePathName, \"a\", \"a\", \"a\"),\n\t\t\tfolderSyncFileAA.getTypePK(), syncAccount.getSyncAccountId());\n\n\t\tSyncFileTestUtil.addFileSyncFile(\n\t\t\tFileUtil.getFilePathName(filePathName, \"a\", \"b\"),\n\t\t\tfolderSyncFileA.getTypePK(), syncAccount.getSyncAccountId());\n\n\t\tSyncFileTestUtil.addFileSyncFile(\n\t\t\tFileUtil.getFilePathName(filePathName, \"a\", \"c\"),\n\t\t\tfolderSyncFileA.getTypePK(), syncAccount.getSyncAccountId());\n\n\t\tSyncFileTestUtil.addFileSyncFile(\n\t\t\tFileUtil.getFilePathName(filePathName, \"a\", \"a\", \"a\"),\n\t\t\tfolderSyncFileAA.getTypePK(), syncAccount.getSyncAccountId());\n\n\t\tsyncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(8, syncFiles.size());\n\n\t\tSyncFileService.deleteSyncFile(folderSyncFileA);\n\n\t\tsyncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(1, syncFiles.size());\n\t}","id":96758,"modified_method":"@Test\n\tpublic void testDeleteFolderSyncFile() throws Exception {\n\t\tList<SyncFile> syncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(1, syncFiles.size());\n\n\t\tSyncFile folderSyncFileA = SyncFileTestUtil.addFolderSyncFile(\n\t\t\tFileUtil.getFilePathName(filePathName, \"a\"),\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tSyncFile folderSyncFileAA = SyncFileTestUtil.addFolderSyncFile(\n\t\t\tFileUtil.getFilePathName(filePathName, \"a\", \"a\"),\n\t\t\tfolderSyncFileA.getTypePK(), syncAccount.getSyncAccountId());\n\n\t\tSyncFileTestUtil.addFolderSyncFile(\n\t\t\tFileUtil.getFilePathName(filePathName, \"a\", \"b\"),\n\t\t\tfolderSyncFileA.getTypePK(), syncAccount.getSyncAccountId());\n\n\t\tSyncFileTestUtil.addFolderSyncFile(\n\t\t\tFileUtil.getFilePathName(filePathName, \"a\", \"a\", \"a\"),\n\t\t\tfolderSyncFileAA.getTypePK(), syncAccount.getSyncAccountId());\n\n\t\tSyncFileTestUtil.addFileSyncFile(\n\t\t\tFileUtil.getFilePathName(filePathName, \"a\", \"b.txt\"),\n\t\t\tfolderSyncFileA.getTypePK(), syncAccount.getSyncAccountId());\n\n\t\tSyncFileTestUtil.addFileSyncFile(\n\t\t\tFileUtil.getFilePathName(filePathName, \"a\", \"c.txt\"),\n\t\t\tfolderSyncFileA.getTypePK(), syncAccount.getSyncAccountId());\n\n\t\tSyncFileTestUtil.addFileSyncFile(\n\t\t\tFileUtil.getFilePathName(filePathName, \"a\", \"a\", \"a.txt\"),\n\t\t\tfolderSyncFileAA.getTypePK(), syncAccount.getSyncAccountId());\n\n\t\tsyncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(8, syncFiles.size());\n\n\t\tSyncFileService.deleteSyncFile(folderSyncFileA);\n\n\t\tsyncFiles = SyncFileService.findSyncFiles(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tAssert.assertEquals(1, syncFiles.size());\n\t}","commit_id":"7384a225a57c0577efdce88947af418b422eba70","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static SyncFile addFolderSyncFile(\n\t\t\tString filePathName, long parentFolderId, long repositoryId,\n\t\t\tlong syncAccountId, long typePK)\n\t\tthrows Exception {\n\n\t\tSyncFile syncFile = SyncFileService.addSyncFile(\n\t\t\tnull, null, null, filePathName, null, null, parentFolderId,\n\t\t\trepositoryId, SyncFile.STATE_SYNCED, syncAccountId,\n\t\t\tSyncFile.TYPE_FOLDER);\n\n\t\tif (typePK == 0) {\n\t\t\ttypePK = syncFile.getSyncFileId();\n\t\t}\n\n\t\tsyncFile.setTypePK(typePK);\n\n\t\tSyncFileService.update(syncFile);\n\n\t\treturn syncFile;\n\t}","id":96759,"modified_method":"public static SyncFile addFolderSyncFile(\n\t\t\tString filePathName, long parentFolderId, long repositoryId,\n\t\t\tlong syncAccountId, long typePK)\n\t\tthrows Exception {\n\n\t\tSyncFile syncFile = SyncFileService.addSyncFile(\n\t\t\tnull, null, null, filePathName, null, null, parentFolderId,\n\t\t\trepositoryId, SyncFile.STATE_SYNCED, syncAccountId,\n\t\t\tSyncFile.TYPE_FOLDER);\n\n\t\tif (typePK == 0) {\n\t\t\tsyncFile.setFileKey(String.valueOf(syncFile.getSyncFileId()));\n\t\t\tsyncFile.setTypePK(syncFile.getSyncFileId());\n\n\t\t\tSyncFileService.update(syncFile);\n\t\t}\n\n\t\treturn syncFile;\n\t}","commit_id":"7384a225a57c0577efdce88947af418b422eba70","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public static SyncFile addFileSyncFile(\n\t\t\tString filePathName, long parentFolderId, long repositoryId,\n\t\t\tlong syncAccountId, long typePK)\n\t\tthrows Exception {\n\n\t\tSyncFile syncFile = SyncFileService.addSyncFile(\n\t\t\tnull, null, null, filePathName, null, null, parentFolderId,\n\t\t\trepositoryId, SyncFile.STATE_SYNCED, syncAccountId,\n\t\t\tSyncFile.TYPE_FILE);\n\n\t\tif (typePK == 0) {\n\t\t\ttypePK = syncFile.getSyncFileId();\n\t\t}\n\n\t\tsyncFile.setTypePK(typePK);\n\n\t\tSyncFileService.update(syncFile);\n\n\t\treturn syncFile;\n\t}","id":96760,"modified_method":"public static SyncFile addFileSyncFile(\n\t\t\tString filePathName, long parentFolderId, long repositoryId,\n\t\t\tlong syncAccountId, long typePK)\n\t\tthrows Exception {\n\n\t\tSyncFile syncFile = SyncFileService.addSyncFile(\n\t\t\tnull, null, null, filePathName, null, null, parentFolderId,\n\t\t\trepositoryId, SyncFile.STATE_SYNCED, syncAccountId,\n\t\t\tSyncFile.TYPE_FILE);\n\n\t\tif (typePK == 0) {\n\t\t\tsyncFile.setFileKey(String.valueOf(syncFile.getSyncFileId()));\n\t\t\tsyncFile.setTypePK(syncFile.getSyncFileId());\n\n\t\t\tSyncFileService.update(syncFile);\n\t\t}\n\n\t\treturn syncFile;\n\t}","commit_id":"7384a225a57c0577efdce88947af418b422eba70","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@After\n\t@Override\n\tpublic void tearDown() throws Exception {\n\t\tSyncSiteService.unregisterModelListener(_syncSiteModelListener);\n\n\t\tSyncSiteService.deleteSyncSite(_syncSite.getSyncSiteId());\n\n\t\tsuper.tearDown();\n\t}","id":96761,"modified_method":"@After\n\t@Override\n\tpublic void tearDown() throws Exception {\n\t\tSyncSiteService.unregisterModelListener(_syncSiteModelListener);\n\n\t\t_syncSite = SyncSiteService.fetchSyncSite(_syncSite.getSyncSiteId());\n\n\t\tif (_syncSite != null) {\n\t\t\tSyncSiteService.deleteSyncSite(_syncSite.getSyncSiteId());\n\t\t}\n\n\t\tsuper.tearDown();\n\t}","commit_id":"7384a225a57c0577efdce88947af418b422eba70","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tprotected void processResponse(String response) throws Exception {\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tList<SyncSite> syncSites = objectMapper.readValue(\n\t\t\tresponse, new TypeReference<List<SyncSite>>() {});\n\n\t\tfor (SyncSite syncSite : syncSites) {\n\t\t\tsyncSite.setSyncAccountId(getSyncAccountId());\n\n\t\t\tSyncSiteService.update(syncSite);\n\t\t}\n\t}","id":96762,"modified_method":"@Override\n\tprotected void processResponse(String response) throws Exception {\n\t\tSet<Long> remoteSyncSiteIds = new HashSet<Long>();\n\n\t\tObjectMapper objectMapper = new ObjectMapper();\n\n\t\tList<SyncSite> remoteSyncSites = objectMapper.readValue(\n\t\t\tresponse, new TypeReference<List<SyncSite>>() {});\n\n\t\tfor (SyncSite remoteSyncSite : remoteSyncSites) {\n\t\t\tSyncSite localSyncSite = SyncSiteService.fetchSyncSite(\n\t\t\t\tremoteSyncSite.getGroupId(), getSyncAccountId());\n\n\t\t\tif (localSyncSite == null) {\n\t\t\t\tremoteSyncSite.setSyncAccountId(getSyncAccountId());\n\n\t\t\t\tSyncSiteService.update(remoteSyncSite);\n\n\t\t\t\tremoteSyncSiteIds.add(remoteSyncSite.getSyncSiteId());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tlocalSyncSite.setDescription(remoteSyncSite.getDescription());\n\t\t\t\tlocalSyncSite.setFriendlyURL(remoteSyncSite.getFriendlyURL());\n\t\t\t\tlocalSyncSite.setName(remoteSyncSite.getName());\n\t\t\t\tlocalSyncSite.setType(remoteSyncSite.getType());\n\t\t\t\tlocalSyncSite.setTypeSettings(remoteSyncSite.getTypeSettings());\n\t\t\t\tlocalSyncSite.setSite(remoteSyncSite.getSite());\n\n\t\t\t\tSyncSiteService.update(localSyncSite);\n\n\t\t\t\tremoteSyncSiteIds.add(localSyncSite.getSyncSiteId());\n\t\t\t}\n\t\t}\n\n\t\tfor (SyncSite localSyncSite :\n\t\t\t\tSyncSiteService.findSyncSites(getSyncAccountId())) {\n\n\t\t\tif (remoteSyncSiteIds.contains(localSyncSite.getSyncSiteId())) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tSyncSiteService.deleteSyncSite(localSyncSite.getSyncSiteId());\n\t\t}\n\t}","commit_id":"9e7c3ae2f6d0705f07b2efa335567bb97167265a","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"public static void scheduleSyncAccountTasks(long syncAccountId)\n\t\tthrows Exception {\n\n\t\tfinal SyncAccount syncAccount = SyncAccountService.fetchSyncAccount(\n\t\t\tsyncAccountId);\n\n\t\tRunnable runnable = new Runnable() {\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSet<Long> syncSiteIds = SyncSiteService.getActiveSyncSiteIds(\n\t\t\t\t\tsyncAccount.getSyncAccountId());\n\n\t\t\t\tfor (long syncSiteId : syncSiteIds) {\n\t\t\t\t\tSyncSite syncSite = SyncSiteService.fetchSyncSite(\n\t\t\t\t\t\tsyncSiteId);\n\n\t\t\t\t\tMap<String, Object> parameters =\n\t\t\t\t\t\tnew HashMap<String, Object>();\n\n\t\t\t\t\tparameters.put(\"companyId\", syncSite.getCompanyId());\n\t\t\t\t\tparameters.put(\"repositoryId\", syncSite.getGroupId());\n\t\t\t\t\tparameters.put(\"syncSite\", syncSite);\n\n\t\t\t\t\tGetSyncDLObjectUpdateEvent getSyncDLObjectUpdateEvent =\n\t\t\t\t\t\tnew GetSyncDLObjectUpdateEvent(\n\t\t\t\t\t\t\tsyncAccount.getSyncAccountId(), parameters);\n\n\t\t\t\t\tgetSyncDLObjectUpdateEvent.run();\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t\tScheduledFuture<?> scheduledFuture =\n\t\t\t_eventScheduledExecutorService.scheduleAtFixedRate(\n\t\t\t\trunnable, 0, syncAccount.getInterval(), TimeUnit.SECONDS);\n\n\t\tPath filePath = Paths.get(syncAccount.getFilePathName());\n\n\t\tWatchEventListener watchEventListener = new SyncSiteWatchEventListener(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tWatcher watcher = new Watcher(filePath, true, watchEventListener);\n\n\t\t_watcherExecutorService.execute(watcher);\n\n\t\t_syncAccountTasks.put(\n\t\t\tsyncAccountId, new Object[] {scheduledFuture, watcher});\n\t}","id":96763,"modified_method":"public static void scheduleSyncAccountTasks(long syncAccountId)\n\t\tthrows Exception {\n\n\t\tSyncSiteService.synchronizeSyncSites(syncAccountId);\n\n\t\tfinal SyncAccount syncAccount = SyncAccountService.fetchSyncAccount(\n\t\t\tsyncAccountId);\n\n\t\tRunnable runnable = new Runnable() {\n\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\tSet<Long> syncSiteIds = SyncSiteService.getActiveSyncSiteIds(\n\t\t\t\t\tsyncAccount.getSyncAccountId());\n\n\t\t\t\tfor (long syncSiteId : syncSiteIds) {\n\t\t\t\t\tSyncSite syncSite = SyncSiteService.fetchSyncSite(\n\t\t\t\t\t\tsyncSiteId);\n\n\t\t\t\t\tMap<String, Object> parameters =\n\t\t\t\t\t\tnew HashMap<String, Object>();\n\n\t\t\t\t\tparameters.put(\"companyId\", syncSite.getCompanyId());\n\t\t\t\t\tparameters.put(\"repositoryId\", syncSite.getGroupId());\n\t\t\t\t\tparameters.put(\"syncSite\", syncSite);\n\n\t\t\t\t\tGetSyncDLObjectUpdateEvent getSyncDLObjectUpdateEvent =\n\t\t\t\t\t\tnew GetSyncDLObjectUpdateEvent(\n\t\t\t\t\t\t\tsyncAccount.getSyncAccountId(), parameters);\n\n\t\t\t\t\tgetSyncDLObjectUpdateEvent.run();\n\t\t\t\t}\n\t\t\t}\n\n\t\t};\n\n\t\tScheduledFuture<?> scheduledFuture =\n\t\t\t_eventScheduledExecutorService.scheduleAtFixedRate(\n\t\t\t\trunnable, 0, syncAccount.getInterval(), TimeUnit.SECONDS);\n\n\t\tPath filePath = Paths.get(syncAccount.getFilePathName());\n\n\t\tWatchEventListener watchEventListener = new SyncSiteWatchEventListener(\n\t\t\tsyncAccount.getSyncAccountId());\n\n\t\tWatcher watcher = new Watcher(filePath, true, watchEventListener);\n\n\t\t_watcherExecutorService.execute(watcher);\n\n\t\t_syncAccountTasks.put(\n\t\t\tsyncAccountId, new Object[] {scheduledFuture, watcher});\n\t}","commit_id":"9e7c3ae2f6d0705f07b2efa335567bb97167265a","url":"https://github.com/liferay/liferay-plugins"},{"original_method":"@Override\n  public int apply(final int add) {\n    final DBNode n = (DBNode) node;\n    final Data d = n.data;\n    int pre = n.pre + add;\n    final int par = d.parent(pre, d.kind(pre));\n\n    if(n.type == NodeType.TXT && md.meta.size == 1 && md.kind(0) == Data.TEXT) {\n      // overwrite existing text node\n      d.replace(pre, Data.TEXT, md.text(0, true));\n    } else {\n      d.delete(pre);\n      if(n.type == NodeType.ATT) d.insertAttr(pre, par, md);\n      else d.insert(pre, par, md);\n      if(!mergeTexts(d, pre - 1, pre)) {\n        pre += md.meta.size;\n        mergeTexts(d, pre - 1, pre);\n      }\n    }\n    return 0;\n  }","id":96764,"modified_method":"@Override\n  public int apply(final int add) {\n    final DBNode n = (DBNode) node;\n    final Data d = n.data;\n    int pre = n.pre + add;\n    final int kind = d.kind(pre);\n    final int par = d.parent(pre, kind);\n\n    if(n.type == NodeType.TXT && md.meta.size == 1 && md.kind(0) == Data.TEXT) {\n      // overwrite existing text node\n      d.replace(pre, Data.TEXT, md.text(0, true));\n      // check if simple, fast replace is possible\n    } else if(md.meta.size > 0 && d instanceof DiskData && d.ns.size() == 0\n        && md.ns.size() == 0 && d.size(pre, kind) == md.meta.size) {\n      d.fastReplace(pre, md);\n    } else {\n      d.delete(pre);\n      if(n.type == NodeType.ATT) d.insertAttr(pre, par, md);\n      else d.insert(pre, par, md);\n      if(!mergeTexts(d, pre - 1, pre)) {\n        pre += md.meta.size;\n        mergeTexts(d, pre - 1, pre);\n      }\n    }\n    return 0;\n  }","commit_id":"ff719293b4afb311079214b57d0f443a4b56e560","url":"https://github.com/BaseXdb/basex"},{"original_method":"/**\n   * Inspects the database structures.\n   * @param data data\n   * @return info string\n   */\n  public static String inspect(final Data data) {\n    final MetaData md = data.meta;\n    final Check invKind = new Check();\n    final Check parRef = new Check();\n    final Check parChild = new Check();\n    final Check idPre = md.updindex ? new Check() : null;\n    // loop through all database nodes\n    for(int pre = 0; pre < md.size; pre++) {\n      // check node kind\n      final int kind = data.kind(pre);\n      if(kind > 6) invKind.add(pre);\n      // check parent reference\n      final int par = data.parent(pre, kind);\n      if(par >= pre || (kind == Data.DOC ? par != -1 : par < 0)) parRef.add(pre);\n      // check if node is a descendant of its parent node\n      if(par >= 0 && par + data.size(par, data.kind(par)) < pre) parChild.add(pre);\n      // check if id/pre mapping is correct\n      if(idPre != null && data.pre(data.id(pre)) != pre) idPre.add(pre);\n    }\n\n    final TokenBuilder info = new TokenBuilder();\n    info.addExt(\"Checking main table (% nodes):\", md.size).add(Prop.NL);\n    info.add(invKind.info(\"invalid node kinds\"));\n    info.add(parRef.info(\"invalid parent references\"));\n    info.add(parChild.info(\"wrong parent/child relationships\"));\n    if(idPre != null) info.add(idPre.info(\"wrong id/pre mappings\"));\n    if(invKind.invalid + parRef.invalid + parChild.invalid == 0) {\n      info.add(\"No inconsistencies found.\").add(Prop.NL);\n    } else {\n      info.add(\"Warning: Database is inconsistent.\").add(Prop.NL);\n    }\n    return info.toString();\n  }","id":96765,"modified_method":"/**\n   * Inspects the database structures.\n   * @param data data\n   * @return info string\n   */\n  public static String inspect(final Data data) {\n    final MetaData md = data.meta;\n    final Check invKind = new Check();\n    final Check parRef = new Check();\n    final Check parChild = new Check();\n    final Check idPre = md.updindex ? new Check() : null;\n    // loop through all database nodes\n    for(int pre = 0; pre < md.size; pre++) {\n      // check node kind\n      final int kind = data.kind(pre);\n      if(kind > 6) invKind.add(pre);\n      // check parent reference\n      final int par = data.parent(pre, kind);\n      if(par >= 0) {\n        final int parKind = data.kind(par);\n        if(par >= pre || (kind == Data.DOC ? par != -1 : par < 0)) parRef.add(pre);\n        // check if parent is no doc and no element, or if node is a descendant\n        // of its parent node\n        if(parKind != Data.DOC && parKind != Data.ELEM ||\n            par + data.size(par, parKind) < pre) parChild.add(pre);\n      }\n      // check if id/pre mapping is correct\n      if(idPre != null && data.pre(data.id(pre)) != pre) idPre.add(pre);\n    }\n\n    final TokenBuilder info = new TokenBuilder();\n    info.addExt(\"Checking main table (% nodes):\", md.size).add(Prop.NL);\n    info.add(invKind.info(\"invalid node kinds\"));\n    info.add(parRef.info(\"invalid parent references\"));\n    info.add(parChild.info(\"wrong parent/descendant relationships\"));\n    if(idPre != null) info.add(idPre.info(\"wrong id/pre mappings\"));\n    if(invKind.invalid + parRef.invalid + parChild.invalid == 0) {\n      info.add(\"No inconsistencies found.\").add(Prop.NL);\n    } else {\n      info.add(\"Warning: Database is inconsistent.\").add(Prop.NL);\n    }\n    return info.toString();\n  }","commit_id":"484f0347f1b993bed25a910eb3962dd196f55760","url":"https://github.com/BaseXdb/basex"},{"original_method":"public StatusSelectorBox() {\n        \n        super(  ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX),\n                ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX),\n                null);\n        \n        this.popup = new AntialiasedPopupMenu();\n        \n        this.popup.setInvoker(this);\n        \n        this.addActionListener(this);\n    }","id":96766,"modified_method":"public StatusSelectorBox() {\n        /*\n        super(  ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX),\n                ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX),\n                null);\n        */\n        super(new ImageIcon(ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX)));\n        \n        this.popup = new AntialiasedPopupMenu();\n        \n        this.popup.setInvoker(this);\n        \n        //this.addActionListener(this);\n    }","commit_id":"972713beedc26ad19e5789e1438f9c42306994b7","url":"https://github.com/jitsi/jitsi"},{"original_method":"public void actionPerformed (ActionEvent e) {\n        \n        if (e.getSource() instanceof SIPCommButton){\n    \n            if (!this.popup.isVisible()) {\n                this.popup.setLocation(this.calculatePopupLocation());\n                this.popup.setVisible(true);            \n            }       \n        }\n        else if (e.getSource() instanceof JMenuItem){\n            \n            JMenuItem menuItem = (JMenuItem) e.getSource();            \n                   \n            Iterator statusSet = this.presence.getSupportedStatusSet();\n            \n            while (statusSet.hasNext()){\n                \n                PresenceStatus status \n                    = ((PresenceStatus)statusSet.next());\n                \n                if(status.getStatusName().equals(menuItem.getText())){\n                    \n                    try {\n                        this.presence.publishPresenceStatus(status, \"\");\n                    } catch (IllegalArgumentException e1) {\n                        // TODO Auto-generated catch block\n                        e1.printStackTrace();\n                    } catch (IllegalStateException e1) {\n                        // TODO Auto-generated catch block\n                        e1.printStackTrace();\n                    } catch (OperationFailedException e1) {\n                        // TODO Auto-generated catch block\n                        e1.printStackTrace();\n                    }\n                    \n                    break;\n                }\n                \n            }\n            \n            this.setIconImage(((ImageIcon)menuItem.getIcon()).getImage());\n        }\n    }","id":96767,"modified_method":"public void actionPerformed (ActionEvent e) {\n        \n        if (e.getSource() instanceof SIPCommButton){\n    \n            if (!this.popup.isVisible()) {\n                this.popup.setLocation(this.calculatePopupLocation());\n                this.popup.setVisible(true);            \n            }       \n        }\n        else if (e.getSource() instanceof JMenuItem){\n            \n            JMenuItem menuItem = (JMenuItem) e.getSource();            \n                   \n            Iterator statusSet = this.presence.getSupportedStatusSet();\n            \n            while (statusSet.hasNext()){\n                \n                PresenceStatus status \n                    = ((PresenceStatus)statusSet.next());\n                \n                if(status.getStatusName().equals(menuItem.getText())\n                        && !this.presence.getPresenceStatus().equals(status)){\n                    \n                    try {\n                        if(!status.equals(IcqStatusEnum.OFFLINE))\n                            this.presence.publishPresenceStatus(status, \"\");\n                    \n                    } catch (IllegalArgumentException e1) {\n                        // TODO Auto-generated catch block\n                        e1.printStackTrace();\n                    } catch (IllegalStateException e1) {\n                        // TODO Auto-generated catch block\n                        e1.printStackTrace();\n                    } catch (OperationFailedException e1) {\n                        // TODO Auto-generated catch block\n                        e1.printStackTrace();\n                    }\n                    \n                    break;\n                }\n                \n            }\n            \n            this.setIconImage(((ImageIcon)menuItem.getIcon()).getImage());\n        }\n    }","commit_id":"972713beedc26ad19e5789e1438f9c42306994b7","url":"https://github.com/jitsi/jitsi"},{"original_method":"public StatusSelectorBox(Map itemsMap, Image selectedItem) {\n        \n        super(  ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX),\n                ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX),\n                selectedItem);\n        \n        this.itemsMap = itemsMap;\n        \n        this.popup = new AntialiasedPopupMenu();\n        \n        this.popup.setInvoker(this);\n        \n        this.addActionListener(this);\n        \n        this.init();\n    }","id":96768,"modified_method":"public StatusSelectorBox(Map itemsMap, Image selectedItem) {\n        /*\n        super(  ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX),\n                ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX),\n                selectedItem);\n        */\n        super(new ImageIcon(ImageLoader.getImage(\n                    ImageLoader.STATUS_SELECTOR_BOX)));\n        \n        this.itemsMap = itemsMap;\n        \n        this.popup = new AntialiasedPopupMenu();\n        \n        this.popup.setInvoker(this);\n        \n        //this.addActionListener(this);\n        \n        this.init();\n    }","commit_id":"972713beedc26ad19e5789e1438f9c42306994b7","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n         * Creates DTMF extended info.\n         * @param tone the tone.\n         * @param keyCode its key code.\n         * @param keyChar the char associated with the DTMF\n         * @param imageID the image if any.\n         * @param macImageID the Mac OS X-specific image if any.\n         * @param macImageRolloverID the Mac OS X-specific rollover image if any\n         * @param sound the sound if any.\n         */\n        public DTMFToneInfo(\n            DTMFTone tone,\n            int keyCode, char keyChar,\n            ImageID imageID, ImageID macImageID, ImageID macImageRolloverID,\n            String sound)\n        {\n            this.tone = tone;\n            this.keyCode = keyCode;\n            this.keyChar = keyChar;\n            this.imageID = imageID;\n            this.macImageID = macImageID;\n            this.macImageRolloverID = macImageRolloverID;\n            this.sound = sound;\n        }","id":96769,"modified_method":"/**\n         * Creates DTMF extended info.\n         * @param tone the tone.\n         * @param keyCode its key code.\n         * @param keyChar the char associated with the DTMF\n         * @param imageID the image if any.\n         * @param macImageID the Mac OS X-specific image if any.\n         * @param macImageRolloverID the Mac OS X-specific rollover image if any\n         * @param sound the sound if any.\n         */\n        public DTMFToneInfo(\n            DTMFTone tone,\n            int keyCode, char keyChar,\n            ImageID imageID, ImageID imageIDPressed,ImageID imageIDRollover,\n            ImageID macImageID, ImageID macImageRolloverID,\n            String sound)\n        {\n            this.tone = tone;\n            this.keyCode = keyCode;\n            this.keyChar = keyChar;\n            this.imageID = imageID;\n            this.imageIDPressed = imageIDPressed;\n            this.imageIDRollover = imageIDRollover;\n            this.macImageID = macImageID;\n            this.macImageRolloverID = macImageRolloverID;\n            this.sound = sound;\n        }","commit_id":"500f9ae8ad2960634068e267f8bbbccf6bb07cf9","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Creates DTMF button.\n     *\n     * @param bgImage\n     * @param iconImage\n     * @param name\n     * @return the created dial button\n     */\n    private JButton createDialButton(Image bgImage, ImageID iconImage,\n        String name)\n    {\n        JButton button\n            = new SIPCommButton(bgImage, ImageLoader.getImage(iconImage));\n\n        button.setAlignmentY(JButton.LEFT_ALIGNMENT);\n        button.setName(name);\n        button.setOpaque(false);\n        button.addMouseListener(this);\n        return button;\n    }","id":96770,"modified_method":"/**\n     * Initializes a new dial button which is to be used on Mac OS X.\n     *\n     * @param imageID\n     * @param rolloverImageID\n     * @param pressedImageImageID\n     * @param name\n     * @return the newly-initialized dial button\n     */\n    private JButton createDialButton( ImageID imageID,\n                                      ImageID rolloverImageID,\n                                      ImageID pressedImageImageID,\n                                      String name)\n    {\n        JButton button\n            = new SIPCommButton(\n                    ImageLoader.getImage(imageID),\n                    ImageLoader.getImage(rolloverImageID),\n                    ImageLoader.getImage(pressedImageImageID),\n                    null,\n                    null,\n                    null);\n\n        button.setAlignmentY(JButton.LEFT_ALIGNMENT);\n        button.setOpaque(false);\n        button.setName(name);\n        button.addMouseListener(this);\n        return button;\n    }","commit_id":"500f9ae8ad2960634068e267f8bbbccf6bb07cf9","url":"https://github.com/jitsi/jitsi"},{"original_method":"/**\n     * Reloads dial buttons.\n     */\n    @Override\n    public void loadSkin()\n    {\n        dialPadPanel.removeAll();\n\n        Image bgImage = ImageLoader.getImage(ImageLoader.DIAL_BUTTON_BG);\n\n        for (DTMFHandler.DTMFToneInfo info : DTMFHandler.AVAILABLE_TONES)\n        {\n            // We only add buttons with images.\n            if (info.imageID == null)\n                continue;\n\n            JComponent c\n                = OSUtils.IS_MAC\n                    ? createMacOSXDialButton(\n                            info.macImageID,\n                            info.macImageRolloverID,\n                            info.tone.getValue())\n                    : createDialButton(\n                            bgImage,\n                            info.imageID,\n                            info.tone.getValue());\n\n            dialPadPanel.add(c);\n        }\n    }","id":96771,"modified_method":"/**\n     * Reloads dial buttons.\n     */\n    @Override\n    public void loadSkin()\n    {\n        dialPadPanel.removeAll();\n\n        for (DTMFHandler.DTMFToneInfo info : DTMFHandler.AVAILABLE_TONES)\n        {\n            // We only add buttons with images.\n            if (info.imageID == null)\n                continue;\n\n            JComponent c\n                = OSUtils.IS_MAC\n                    ? createDialButton(\n                            info.macImageID,\n                            info.macImageRolloverID,\n                            info.macImageRolloverID,\n                            info.tone.getValue())\n                    : createDialButton(\n                            info.imageID,\n                            info.imageIDPressed,\n                            info.imageIDRollover,\n                            info.tone.getValue());\n\n            dialPadPanel.add(c);\n        }\n    }","commit_id":"500f9ae8ad2960634068e267f8bbbccf6bb07cf9","url":"https://github.com/jitsi/jitsi"},{"original_method":"public StatusSelectorBox() {\n        /*\n        super(  ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX),\n                ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX),\n                null);\n        */\n        super(new ImageIcon(ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX)));\n        \n        this.popup = new AntialiasedPopupMenu();\n        \n        this.popup.setInvoker(this);\n        \n        //this.addActionListener(this);\n    }","id":96772,"modified_method":"public StatusSelectorBox() {\n        \n        super(  ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX),\n                ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX),\n                null);\n        \n        this.popup = new AntialiasedPopupMenu();\n        \n        this.popup.setInvoker(this);\n        \n        //this.addActionListener(this);\n    }","commit_id":"162a87441ecc98751b82f9c22eee15b8c0938c98","url":"https://github.com/jitsi/jitsi"},{"original_method":"public StatusSelectorBox(Map itemsMap, Image selectedItem) {\n        /*\n        super(  ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX),\n                ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX),\n                selectedItem);\n        */\n        super(new ImageIcon(ImageLoader.getImage(\n                    ImageLoader.STATUS_SELECTOR_BOX)));\n        \n        this.itemsMap = itemsMap;\n        \n        this.popup = new AntialiasedPopupMenu();\n        \n        this.popup.setInvoker(this);\n        \n        //this.addActionListener(this);\n        \n        this.init();\n    }","id":96773,"modified_method":"public StatusSelectorBox(Map itemsMap, Image selectedItem) {\n       \n        super(  ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX),\n                ImageLoader.getImage(ImageLoader.STATUS_SELECTOR_BOX),\n                selectedItem);\n        \n        this.itemsMap = itemsMap;\n        \n        this.popup = new AntialiasedPopupMenu();\n        \n        this.popup.setInvoker(this);\n        \n        this.addActionListener(this);\n        \n        this.init();\n    }","commit_id":"162a87441ecc98751b82f9c22eee15b8c0938c98","url":"https://github.com/jitsi/jitsi"},{"original_method":"static ModelNode parseGlobalModules(XMLExtendedStreamReader reader) throws XMLStreamException {\n\n        ModelNode globalModules = new ModelNode();\n\n        requireNoAttributes(reader);\n\n        while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n            switch (Element.forName(reader.getLocalName())) {\n                case MODULE: {\n                    final int count = reader.getAttributeCount();\n                    String name = null;\n                    String slot = null;\n                    for (int i = 0; i < count; i++) {\n                        requireNoNamespaceAttribute(reader, i);\n                        final String value = reader.getAttributeValue(i);\n                        final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                        switch (attribute) {\n                            case NAME:\n                                if (name != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                name = value;\n                                break;\n                            case SLOT:\n                                if (slot != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                slot = value;\n                                break;\n                            default:\n                                throw unexpectedAttribute(reader, i);\n                        }\n                    }\n                    if (name == null) {\n                        throw missingRequired(reader, Collections.singleton(NAME));\n                    }\n                    if (slot == null) {\n                        slot = \"main\";\n                    }\n                    final ModelNode module = new ModelNode();\n                    module.get(GlobalModulesDefinition.NAME).set(name);\n                    module.get(GlobalModulesDefinition.SLOT).set(slot);\n                    globalModules.add(module);\n                    requireNoContent(reader);\n                    break;\n                }\n                default: {\n                    throw unexpectedElement(reader);\n                }\n            }\n        }\n        return globalModules;\n    }","id":96774,"modified_method":"static ModelNode parseGlobalModules(XMLExtendedStreamReader reader) throws XMLStreamException {\n\n        ModelNode globalModules = new ModelNode();\n\n        requireNoAttributes(reader);\n\n        while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n            switch (Element.forName(reader.getLocalName())) {\n                case MODULE: {\n                    final ModelNode module = new ModelNode();\n                    final int count = reader.getAttributeCount();\n                    String name = null;\n                    String slot = null;\n                    for (int i = 0; i < count; i++) {\n                        requireNoNamespaceAttribute(reader, i);\n                        final String value = reader.getAttributeValue(i);\n                        final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                        switch (attribute) {\n                            case NAME:\n                                if (name != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                name = value;\n                                GlobalModulesDefinition.NAME_AD.parseAndSetParameter(name, module, reader);\n                                break;\n                            case SLOT:\n                                if (slot != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                slot = value;\n                                GlobalModulesDefinition.SLOT_AD.parseAndSetParameter(slot, module, reader);\n                                break;\n                            default:\n                                throw unexpectedAttribute(reader, i);\n                        }\n                    }\n                    if (name == null) {\n                        throw missingRequired(reader, Collections.singleton(NAME));\n                    }\n\n                    globalModules.add(module);\n\n                    requireNoContent(reader);\n                    break;\n                }\n                default: {\n                    throw unexpectedElement(reader);\n                }\n            }\n        }\n        return globalModules;\n    }","commit_id":"f4e347b49344ee9fc225abeaea5ab36a95031c36","url":"https://github.com/wildfly/wildfly"},{"original_method":"static ModelNode parseGlobalModules(XMLExtendedStreamReader reader) throws XMLStreamException {\n\n        ModelNode globalModules = new ModelNode();\n\n        requireNoAttributes(reader);\n\n        while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n            switch (Element.forName(reader.getLocalName())) {\n                case MODULE: {\n                    final int count = reader.getAttributeCount();\n                    String name = null;\n                    String slot = null;\n                    for (int i = 0; i < count; i++) {\n                        requireNoNamespaceAttribute(reader, i);\n                        final String value = reader.getAttributeValue(i);\n                        final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                        switch (attribute) {\n                            case NAME:\n                                if (name != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                name = value;\n                                break;\n                            case SLOT:\n                                if (slot != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                slot = value;\n                                break;\n                            default:\n                                throw unexpectedAttribute(reader, i);\n                        }\n                    }\n                    if (name == null) {\n                        throw missingRequired(reader, Collections.singleton(NAME));\n                    }\n\n                    final ModelNode module = new ModelNode();\n                    module.get(GlobalModulesDefinition.NAME).set(name);\n                    if (slot != null) {\n                        module.get(GlobalModulesDefinition.SLOT).set(slot);\n                    }\n                    globalModules.add(module);\n                    requireNoContent(reader);\n                    break;\n                }\n                default: {\n                    throw unexpectedElement(reader);\n                }\n            }\n        }\n        return globalModules;\n    }","id":96775,"modified_method":"static ModelNode parseGlobalModules(XMLExtendedStreamReader reader) throws XMLStreamException {\n\n        ModelNode globalModules = new ModelNode();\n\n        requireNoAttributes(reader);\n\n        while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n            switch (Element.forName(reader.getLocalName())) {\n                case MODULE: {\n                    final ModelNode module = new ModelNode();\n                    final int count = reader.getAttributeCount();\n                    String name = null;\n                    String slot = null;\n                    for (int i = 0; i < count; i++) {\n                        requireNoNamespaceAttribute(reader, i);\n                        final String value = reader.getAttributeValue(i);\n                        final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                        switch (attribute) {\n                            case NAME:\n                                if (name != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                name = value;\n                                GlobalModulesDefinition.NAME_AD.parseAndSetParameter(name, module, reader);\n                                break;\n                            case SLOT:\n                                if (slot != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                slot = value;\n                                GlobalModulesDefinition.SLOT_AD.parseAndSetParameter(slot, module, reader);\n                                break;\n                            default:\n                                throw unexpectedAttribute(reader, i);\n                        }\n                    }\n                    if (name == null) {\n                        throw missingRequired(reader, Collections.singleton(NAME));\n                    }\n\n\n                    globalModules.add(module);\n\n                    requireNoContent(reader);\n                    break;\n                }\n                default: {\n                    throw unexpectedElement(reader);\n                }\n            }\n        }\n        return globalModules;\n    }","commit_id":"f4e347b49344ee9fc225abeaea5ab36a95031c36","url":"https://github.com/wildfly/wildfly"},{"original_method":"static ModelNode parseGlobalModules(XMLExtendedStreamReader reader) throws XMLStreamException {\n\n        ModelNode globalModules = new ModelNode();\n\n        requireNoAttributes(reader);\n\n        while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n            switch (Element.forName(reader.getLocalName())) {\n                case MODULE: {\n                    final int count = reader.getAttributeCount();\n                    String name = null;\n                    String slot = null;\n                    Boolean annotations = null;\n                    Boolean metaInf = null;\n                    Boolean services = null;\n                    for (int i = 0; i < count; i++) {\n                        requireNoNamespaceAttribute(reader, i);\n                        final String value = reader.getAttributeValue(i);\n                        final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                        switch (attribute) {\n                            case NAME:\n                                if (name != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                name = value;\n                                break;\n                            case SLOT:\n                                if (slot != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                slot = value;\n                                break;\n                            case ANNOTATIONS:\n                                if (annotations != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                annotations = Boolean.parseBoolean(value);\n                                break;\n\n                            case SERVICES:\n                                if (services != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                services = Boolean.parseBoolean(value);\n                                break;\n\n                            case META_INF:\n                                if (metaInf != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                metaInf = Boolean.parseBoolean(value);\n                                break;\n                            default:\n                                throw unexpectedAttribute(reader, i);\n                        }\n                    }\n                    if (name == null) {\n                        throw missingRequired(reader, Collections.singleton(NAME));\n                    }\n\n                    final ModelNode module = new ModelNode();\n                    module.get(GlobalModulesDefinition.NAME).set(name);\n                    if (slot != null) {\n                        module.get(GlobalModulesDefinition.SLOT).set(slot);\n                    }\n                    if (annotations != null) {\n                        module.get(GlobalModulesDefinition.ANNOTATIONS).set(annotations);\n                    }\n                    if (services != null) {\n                        module.get(GlobalModulesDefinition.SERVICES).set(services);\n                    }\n                    if (metaInf != null) {\n                        module.get(GlobalModulesDefinition.META_INF).set(metaInf);\n                    }\n                    globalModules.add(module);\n                    requireNoContent(reader);\n                    break;\n                }\n                default: {\n                    throw unexpectedElement(reader);\n                }\n            }\n        }\n        return globalModules;\n    }","id":96776,"modified_method":"static ModelNode parseGlobalModules(XMLExtendedStreamReader reader) throws XMLStreamException {\n\n        ModelNode globalModules = new ModelNode();\n\n        requireNoAttributes(reader);\n\n        while (reader.hasNext() && reader.nextTag() != END_ELEMENT) {\n            switch (Element.forName(reader.getLocalName())) {\n                case MODULE: {\n                    final ModelNode module = new ModelNode();\n                    final int count = reader.getAttributeCount();\n                    String name = null;\n                    String slot = null;\n                    String annotations = null;\n                    String metaInf = null;\n                    String services = null;\n                    for (int i = 0; i < count; i++) {\n                        requireNoNamespaceAttribute(reader, i);\n                        final String value = reader.getAttributeValue(i);\n                        final Attribute attribute = Attribute.forName(reader.getAttributeLocalName(i));\n                        switch (attribute) {\n                            case NAME:\n                                if (name != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                name = value;\n                                GlobalModulesDefinition.NAME_AD.parseAndSetParameter(name, module, reader);\n                                break;\n                            case SLOT:\n                                if (slot != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                slot = value;\n                                GlobalModulesDefinition.SLOT_AD.parseAndSetParameter(slot, module, reader);\n                                break;\n                            case ANNOTATIONS:\n                                if (annotations != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                annotations = value;\n                                GlobalModulesDefinition.ANNOTATIONS_AD.parseAndSetParameter(annotations, module, reader);\n                                break;\n\n                            case SERVICES:\n                                if (services != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                services = value;\n                                GlobalModulesDefinition.SERVICES_AD.parseAndSetParameter(services, module, reader);\n                                break;\n\n                            case META_INF:\n                                if (metaInf != null) {\n                                    throw unexpectedAttribute(reader, i);\n                                }\n                                metaInf = value;\n                                GlobalModulesDefinition.META_INF_AD.parseAndSetParameter(metaInf, module, reader);\n                                break;\n                            default:\n                                throw unexpectedAttribute(reader, i);\n                        }\n                    }\n                    if (name == null) {\n                        throw missingRequired(reader, Collections.singleton(NAME));\n                    }\n\n                    globalModules.add(module);\n\n                    requireNoContent(reader);\n                    break;\n                }\n                default: {\n                    throw unexpectedElement(reader);\n                }\n            }\n        }\n        return globalModules;\n    }","commit_id":"f4e347b49344ee9fc225abeaea5ab36a95031c36","url":"https://github.com/wildfly/wildfly"},{"original_method":"private void registerTransformers(SubsystemRegistration subsystem) {\n        ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n        //Due to https://issues.jboss.org/browse/AS7-4892 the jboss-descriptor-property-replacement attribute\n        //does not get set properly in the model on 7.1.2, it remains undefined and defaults to 'true'.\n        //So although the model version has not changed we register a transformer and reject it for 7.1.2 if it is set\n        //and has a different value from 'true'\n        builder.getAttributeBuilder().addRejectCheck(new RejectAttributeChecker.DefaultRejectAttributeChecker() {\n\n            @Override\n            public String getRejectionLogMessage(Map<String, ModelNode> attributes) {\n\n                return EeMessages.MESSAGES.onlyTrueAllowedForJBossDescriptorPropertyReplacement_AS7_4892();\n            }\n\n            @Override\n            protected boolean rejectAttribute(PathAddress address, String attributeName, ModelNode attributeValue, TransformationContext context) {\n                if (attributeValue.isDefined()) {\n                    ModelVersion version = context.getTarget().getVersion();\n                    if (version.getMajor() == 1 && version.getMinor() == 2) {\n                        //7.1.2 has model version 1.2.0 and should have this transformation\n                        //7.1.3 has model version 1.3.0 and should not have this transformation\n                        if (attributeValue.getType() == ModelType.BOOLEAN) {\n                            return !attributeValue.asBoolean();\n                        } else {\n                            if (!Boolean.parseBoolean(attributeValue.asString())) {\n                                return true;\n                            }\n                        }\n                    }\n                }\n                return false;\n            }\n        }, EeSubsystemRootResource.JBOSS_DESCRIPTOR_PROPERTY_REPLACEMENT);\n\n\n        builder.setCustomResourceTransformer(new ResourceTransformer() {\n            @Override\n            public void transformResource(final ResourceTransformationContext context, final PathAddress address, final Resource resource) throws OperationFailedException {\n                final ModelNode attributeValue = resource.getModel().get(GLOBAL_MODULES);\n                if (attributeValue.isDefined()) {\n                    for (ModelNode node : attributeValue.asList()) {\n                        if (node.hasDefined(ANNOTATIONS)) {\n                            if (node.get(ANNOTATIONS).asBoolean()) {\n                                throw new OperationFailedException(EeMessages.MESSAGES.propertiesNotAllowedOnGlobalModules());\n                            } else {\n                                node.remove(ANNOTATIONS);\n                            }\n                        }\n                        if (node.hasDefined(SERVICES)) {\n                            if (!node.get(SERVICES).asBoolean()) {\n                                throw new OperationFailedException(EeMessages.MESSAGES.propertiesNotAllowedOnGlobalModules());\n                            } else {\n                                node.remove(SERVICES);\n                            }\n                        }\n                        if (node.hasDefined(META_INF)) {\n                            if (node.get(META_INF).asBoolean()) {\n                                throw new OperationFailedException(EeMessages.MESSAGES.propertiesNotAllowedOnGlobalModules());\n                            } else {\n                                node.remove(META_INF);\n                            }\n                        }\n                    }\n                }\n                context.addTransformedResource(PathAddress.EMPTY_ADDRESS, resource);\n            }\n        });\n\n        TransformationDescription.Tools.register(builder.build(), subsystem, ModelVersion.create(1, 0, 0));\n\n\n    }","id":96777,"modified_method":"private void registerTransformers(SubsystemRegistration subsystem) {\n        ResourceTransformationDescriptionBuilder builder = TransformationDescriptionBuilder.Factory.createSubsystemInstance();\n\n        GlobalModulesRejecterConverter globalModulesRejecterConverter = new GlobalModulesRejecterConverter();\n\n        builder.getAttributeBuilder()\n                // Deal with https://issues.jboss.org/browse/AS7-4892 on 7.1.2\n                .addRejectCheck(new JBossDescriptorPropertyReplacementRejectChecker(),\n                        EeSubsystemRootResource.JBOSS_DESCRIPTOR_PROPERTY_REPLACEMENT)\n                // Deal with new attributes added to global-modules elements\n                .addRejectCheck(globalModulesRejecterConverter, GlobalModulesDefinition.INSTANCE)\n                .setValueConverter(globalModulesRejecterConverter, GlobalModulesDefinition.INSTANCE);\n\n        TransformationDescription.Tools.register(builder.build(), subsystem, ModelVersion.create(1, 0, 0));\n    }","commit_id":"f4e347b49344ee9fc225abeaea5ab36a95031c36","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testTransformersRejectGlobalModules() throws Exception {\n\n        String subsystemXml = readResource(\"subsystem.xml\");\n        ModelVersion modelVersion = ModelVersion.create(1, 0, 0);\n        //Use the non-runtime version of the extension which will happen on the HC\n        KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);\n\n        List<ModelNode> xmlOps = builder.parseXml(subsystemXml);\n\n        // Add legacy subsystems\n        builder.createLegacyKernelServicesBuilder(null, ModelTestControllerVersion.V7_1_3_FINAL, modelVersion)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-ee:7.1.3.Final\");\n\n        KernelServices mainServices = builder.build();\n        Assert.assertTrue(mainServices.isSuccessfulBoot());\n\n        ModelTestUtils.checkFailedTransformedBootOperations(mainServices, modelVersion, xmlOps, new FailedOperationTransformationConfig());\n\n    }","id":96778,"modified_method":"@Test\n    public void testTransformersRejectGlobalModules() throws Exception {\n\n        String subsystemXml = readResource(\"subsystem.xml\");\n        ModelVersion modelVersion = ModelVersion.create(1, 0, 0);\n        //Use the non-runtime version of the extension which will happen on the HC\n        KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);\n\n        List<ModelNode> xmlOps = builder.parseXml(subsystemXml);\n\n        // Add legacy subsystems\n        builder.createLegacyKernelServicesBuilder(null, ModelTestControllerVersion.V7_1_3_FINAL, modelVersion)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-ee:7.1.3.Final\");\n\n        KernelServices mainServices = builder.build();\n        Assert.assertTrue(mainServices.isSuccessfulBoot());\n\n        ModelTestUtils.checkFailedTransformedBootOperations(mainServices, modelVersion, xmlOps, new FailedOperationTransformationConfig()\n                .addFailedAttribute(PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME)),\n                                    new GlobalModulesConfig()));\n\n    }","commit_id":"f4e347b49344ee9fc225abeaea5ab36a95031c36","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testTransformers712() throws Exception {\n        //Due to https://issues.jboss.org/browse/AS7-4892 the jboss-descriptor-property-replacement\n        //does not get set properly on 7.1.2, so let's do a reject test.\n\n        ModelVersion modelVersion = ModelVersion.create(1, 0, 0);\n\n        try {\n            //Override the core model version to make sure that our custom transformer for model version 1.0.0 running on 7.1.2 kicks in\n            System.setProperty(\"jboss.test.core.model.version.override\", \"1.2.0\");\n\n            KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);\n\n            // Add legacy subsystems\n            builder.createLegacyKernelServicesBuilder(null, ModelTestControllerVersion.V7_1_2_FINAL, modelVersion)\n                    .addMavenResourceURL(\"org.jboss.as:jboss-as-ee:7.1.2.Final\");\n\n            KernelServices mainServices = builder.build();\n            KernelServices legacyServices = mainServices.getLegacyServices(modelVersion);\n            Assert.assertTrue(mainServices.isSuccessfulBoot());\n            Assert.assertTrue(legacyServices.isSuccessfulBoot());\n\n            List<ModelNode> bootOps = builder.parseXmlResource(\"subsystem-transformers.xml\");\n            ModelTestUtils.checkFailedTransformedBootOperations(\n                    mainServices,\n                    modelVersion,\n                    bootOps,\n                    new FailedOperationTransformationConfig()\n                            .addFailedAttribute(PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME)),\n                                    new Test712Config(EESubsystemModel.JBOSS_DESCRIPTOR_PROPERTY_REPLACEMENT)));\n\n\n            checkSubsystemModelTransformation(mainServices, modelVersion, new ModelFixer() {\n\n                @Override\n                public ModelNode fixModel(ModelNode modelNode) {\n                    Assert.assertTrue(modelNode.get(EESubsystemModel.JBOSS_DESCRIPTOR_PROPERTY_REPLACEMENT).asBoolean());\n                    //Replace the value used in the xml\n                    modelNode.get(EESubsystemModel.JBOSS_DESCRIPTOR_PROPERTY_REPLACEMENT).setExpression(\"${test-exp2:false}\");\n                    return modelNode;\n                }\n            });\n        } finally {\n            System.clearProperty(\"jboss.test.core.model.version.override\");\n        }\n    }","id":96779,"modified_method":"@Test\n    public void testTransformers712() throws Exception {\n        //Due to https://issues.jboss.org/browse/AS7-4892 the jboss-descriptor-property-replacement\n        //does not get set properly on 7.1.2, so let's do a reject test.\n\n        ModelVersion modelVersion = ModelVersion.create(1, 0, 0);\n\n        try {\n            //Override the core model version to make sure that our custom transformer for model version 1.0.0 running on 7.1.2 kicks in\n            System.setProperty(\"jboss.test.core.model.version.override\", \"1.2.0\");\n\n            KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT);\n\n            // Add legacy subsystems\n            builder.createLegacyKernelServicesBuilder(null, ModelTestControllerVersion.V7_1_2_FINAL, modelVersion)\n                    .addMavenResourceURL(\"org.jboss.as:jboss-as-ee:7.1.2.Final\");\n\n            KernelServices mainServices = builder.build();\n            KernelServices legacyServices = mainServices.getLegacyServices(modelVersion);\n            Assert.assertTrue(mainServices.isSuccessfulBoot());\n            Assert.assertTrue(legacyServices.isSuccessfulBoot());\n\n            List<ModelNode> bootOps = builder.parseXmlResource(\"subsystem-transformers.xml\");\n            ModelTestUtils.checkFailedTransformedBootOperations(\n                    mainServices,\n                    modelVersion,\n                    bootOps,\n                    new FailedOperationTransformationConfig()\n                            .addFailedAttribute(PathAddress.pathAddress(PathElement.pathElement(SUBSYSTEM, EeExtension.SUBSYSTEM_NAME)),\n                                    new JBossDescriptorPropertyReplacementConfig()));\n\n\n            checkSubsystemModelTransformation(mainServices, modelVersion, new ModelFixer() {\n\n                @Override\n                public ModelNode fixModel(ModelNode modelNode) {\n                    Assert.assertTrue(modelNode.get(EESubsystemModel.JBOSS_DESCRIPTOR_PROPERTY_REPLACEMENT).asBoolean());\n                    //Replace the value used in the xml\n                    modelNode.get(EESubsystemModel.JBOSS_DESCRIPTOR_PROPERTY_REPLACEMENT).setExpression(\"${test-exp2:false}\");\n                    return modelNode;\n                }\n            });\n        } finally {\n            System.clearProperty(\"jboss.test.core.model.version.override\");\n        }\n    }","commit_id":"f4e347b49344ee9fc225abeaea5ab36a95031c36","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testTransformersDiscardGlobalModules() throws Exception {\n\n        String subsystemXml = readResource(\"subsystem-transformers-discard.xml\");\n        ModelVersion modelVersion = ModelVersion.create(1, 0, 0);\n        //Use the non-runtime version of the extension which will happen on the HC\n        KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)\n                .setSubsystemXml(subsystemXml);\n\n        // Add legacy subsystems\n        builder.createLegacyKernelServicesBuilder(null, ModelTestControllerVersion.V7_1_3_FINAL, modelVersion)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-ee:7.1.3.Final\");\n\n        KernelServices mainServices = builder.build();\n        KernelServices legacyServices = mainServices.getLegacyServices(modelVersion);\n        Assert.assertTrue(mainServices.isSuccessfulBoot());\n        Assert.assertTrue(legacyServices.isSuccessfulBoot());\n\n        ModelNode globalModules = mainServices.readTransformedModel(modelVersion).get(ModelDescriptionConstants.SUBSYSTEM, \"ee\").get(GlobalModulesDefinition.GLOBAL_MODULES);\n        for(ModelNode node : globalModules.asList()) {\n            if(node.hasDefined(ANNOTATIONS) ||\n                    node.hasDefined(SERVICES) ||\n                    node.hasDefined(META_INF)) {\n                throw new RuntimeException(\"attributes not discarded\");\n            }\n        }\n    }","id":96780,"modified_method":"@Test\n    public void testTransformersDiscardGlobalModules() throws Exception {\n\n        String subsystemXml = readResource(\"subsystem-transformers-discard.xml\");\n        ModelVersion modelVersion = ModelVersion.create(1, 0, 0);\n        //Use the non-runtime version of the extension which will happen on the HC\n        KernelServicesBuilder builder = createKernelServicesBuilder(AdditionalInitialization.MANAGEMENT)\n                .setSubsystemXml(subsystemXml);\n\n        // Add legacy subsystems\n        builder.createLegacyKernelServicesBuilder(null, ModelTestControllerVersion.V7_1_3_FINAL, modelVersion)\n                .addMavenResourceURL(\"org.jboss.as:jboss-as-ee:7.1.3.Final\")\n                .configureReverseControllerCheck(AdditionalInitialization.MANAGEMENT, new ModelFixer() {\n                    // The regular model will have the new attributes because they are in the xml,\n                    // but the reverse controller model will not because transformation strips them\n                    @Override\n                    public ModelNode fixModel(ModelNode modelNode) {\n                        for(ModelNode node : modelNode.get(GLOBAL_MODULES).asList()) {\n                            if (\"org.apache.log4j\".equals(node.get(NAME).asString())) {\n                                if (!node.has(ANNOTATIONS)) {\n                                    node.get(ANNOTATIONS).set(false);\n                                }\n                                if (!node.has(META_INF)) {\n                                    node.get(META_INF).set(false);\n                                }\n                                if (!node.has(SERVICES)) {\n                                    node.get(SERVICES).set(true);\n                                }\n                            }\n                        }\n\n                        return modelNode;\n                    }\n                });\n\n        KernelServices mainServices = builder.build();\n        KernelServices legacyServices = mainServices.getLegacyServices(modelVersion);\n        Assert.assertTrue(mainServices.isSuccessfulBoot());\n        Assert.assertTrue(legacyServices.isSuccessfulBoot());\n\n        ModelNode globalModules = mainServices.readTransformedModel(modelVersion).get(ModelDescriptionConstants.SUBSYSTEM, \"ee\").get(GlobalModulesDefinition.GLOBAL_MODULES);\n        for(ModelNode node : globalModules.asList()) {\n            if(node.hasDefined(ANNOTATIONS) ||\n                    node.hasDefined(SERVICES) ||\n                    node.hasDefined(META_INF)) {\n                Assert.fail(node + \" -- attributes not discarded\");\n            }\n        }\n    }","commit_id":"f4e347b49344ee9fc225abeaea5ab36a95031c36","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n\n        final ModelNode globalMods = this.globalModules;\n\n        if (globalMods.isDefined()) {\n            for (final ModelNode module : globalMods.asList()) {\n                final String name = module.get(NAME).asString();\n                boolean annotations = module.get(ANNOTATIONS).isDefined() ? module.get(ANNOTATIONS).asBoolean() : false;\n                boolean services = module.get(SERVICES).isDefined() ? module.get(SERVICES).asBoolean() : true;\n                boolean metaInf = module.get(META_INF).isDefined() ? module.get(META_INF).asBoolean() : false;\n\n                String slot = module.hasDefined(SLOT) ? module.get(SLOT).asString() : GlobalModulesDefinition.DEFAULT_SLOT;\n                final ModuleIdentifier identifier = ModuleIdentifier.create(name, slot);\n                final ModuleDependency dependency = new ModuleDependency(Module.getBootModuleLoader(), identifier, false, false, services, false);\n\n                if (metaInf) {\n                    dependency.addImportFilter(PathFilters.getMetaInfSubdirectoriesFilter(), true);\n                    dependency.addImportFilter(PathFilters.getMetaInfFilter(), true);\n                }\n\n                if(annotations) {\n                    deploymentUnit.addToAttachmentList(Attachments.ADDITIONAL_ANNOTATION_INDEXES, identifier);\n                }\n\n                moduleSpecification.addSystemDependency(dependency);\n            }\n        }\n    }","id":96781,"modified_method":"@Override\n    public void deploy(final DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final ModuleSpecification moduleSpecification = deploymentUnit.getAttachment(Attachments.MODULE_SPECIFICATION);\n\n        final ModelNode globalMods = this.globalModules;\n\n        if (globalMods.isDefined()) {\n            for (final ModelNode module : globalMods.asList()) {\n                final String name = module.get(NAME).asString();\n                boolean annotations = module.get(ANNOTATIONS).asBoolean();\n                boolean services = module.get(SERVICES).asBoolean();\n                boolean metaInf = module.get(META_INF).asBoolean();\n\n                String slot = module.get(SLOT).asString();\n                final ModuleIdentifier identifier = ModuleIdentifier.create(name, slot);\n                final ModuleDependency dependency = new ModuleDependency(Module.getBootModuleLoader(), identifier, false, false, services, false);\n\n                if (metaInf) {\n                    dependency.addImportFilter(PathFilters.getMetaInfSubdirectoriesFilter(), true);\n                    dependency.addImportFilter(PathFilters.getMetaInfFilter(), true);\n                }\n\n                if(annotations) {\n                    deploymentUnit.addToAttachmentList(Attachments.ADDITIONAL_ANNOTATION_INDEXES, identifier);\n                }\n\n                moduleSpecification.addSystemDependency(dependency);\n            }\n        }\n    }","commit_id":"f4e347b49344ee9fc225abeaea5ab36a95031c36","url":"https://github.com/wildfly/wildfly"},{"original_method":"public void setGlobalModules(final ModelNode globalModules) {\n        this.globalModules = globalModules;\n    }","id":96782,"modified_method":"/**\n     * Set the global modules configuration for the container.\n     * @param globalModules a fully resolved (i.e. with expressions resolved and default values set) global modules configuration\n     */\n    public void setGlobalModules(final ModelNode globalModules) {\n        this.globalModules = globalModules;\n    }","commit_id":"f4e347b49344ee9fc225abeaea5ab36a95031c36","url":"https://github.com/wildfly/wildfly"},{"original_method":"private List<LocaleMapping> findLocales()\n   {\n      if (locales != null)\n         return locales;\n      if (getOpts().getPushTrans())\n      {\n         if (getOpts().getLocales() != null)\n         {\n            locales = PublicanUtil.findLocales(getOpts().getTransDir(), getOpts().getLocales());\n            if (locales.size() == 0)\n            {\n               log.warn(\"option 'pushTrans' is set, but none of the configured locale directories was found (check zanata.xml)\");\n            }\n         }\n         else\n         {\n            locales = PublicanUtil.findLocales(getOpts().getTransDir());\n            if (locales.size() == 0)\n            {\n               log.warn(\"option 'pushTrans' is set, but no locale directories were found\");\n            }\n            else\n            {\n               log.info(\"option 'pushTrans' is set, but no locales specified in configuration: importing \" + locales.size() + \" directories\");\n            }\n         }\n      }\n      return locales;\n   }","id":96783,"modified_method":"private List<LocaleMapping> findLocales()\n   {\n      if (locales != null)\n         return locales;\n      if (getOpts().getPushType() == PushType.Both || getOpts().getPushType() == PushType.Trans)\n      {\n         if (getOpts().getLocales() != null)\n         {\n            locales = PublicanUtil.findLocales(getOpts().getTransDir(), getOpts().getLocales());\n            if (locales.size() == 0)\n            {\n               log.warn(\"'pushType' is set to '\" + getOpts().getPushType() + \"', but none of the configured locale \" +\n                     \"directories was found (check zanata.xml)\");\n            }\n         }\n         else\n         {\n            locales = PublicanUtil.findLocales(getOpts().getTransDir());\n            if (locales.size() == 0)\n            {\n               log.warn(\"'pushType' is set to '\\\" + getOpts().getPushType() + \\\"', but no locale directories were found\");\n            }\n            else\n            {\n               log.info(\"'pushType' is set to '\\\" + getOpts().getPushType() + \\\"', but no locales specified in configuration: \" +\n                     \"importing \" + locales.size() + \" directories\");\n            }\n         }\n      }\n      return locales;\n   }","commit_id":"71bc1263fe3a46be9a406a6a4799498403cb6e8f","url":"https://github.com/zanata/zanata-server"},{"original_method":"private void logOptions()\n   {\n      if (!log.isInfoEnabled())\n      {\n         return;\n      }\n      log.info(\"Server: {}\", getOpts().getUrl());\n      log.info(\"Project: {}\", getOpts().getProj());\n      log.info(\"Version: {}\", getOpts().getProjectVersion());\n      log.info(\"Username: {}\", getOpts().getUsername());\n      log.info(\"Project type: {}\", getOpts().getProjectType());\n      log.info(\"Source language: {}\", getOpts().getSourceLang());\n      log.info(\"Copy previous translations: {}\", getOpts().getCopyTrans());\n      log.info(\"Merge type: {}\", getOpts().getMergeType());\n      log.info(\"Enable modules: {}\", getOpts().getEnableModules());\n      if (getOpts().getEnableModules())\n      {\n         log.info(\"Current module: {}\", getOpts().getCurrentModule());\n         if (getOpts().isRootModule())\n         {\n            log.info(\"Root module: YES\");\n            if (log.isDebugEnabled())\n            {\n               log.debug(\"Modules: {}\", StringUtils.join(getOpts().getAllModules(), \", \"));\n            }\n         }\n      }\n      log.info(\"Include patterns: {}\", StringUtils.join(getOpts().getIncludes(), \" \"));\n      log.info(\"Exclude patterns: {}\", StringUtils.join(getOpts().getExcludes(), \" \"));\n      log.info(\"Default excludes: {}\", getOpts().getDefaultExcludes());\n\n      if (getOpts().getPushTrans())\n      {\n         log.info(\"Pushing source and target documents\");\n         log.info(\"Locales to push: {}\", getOpts().getLocales());\n      }\n      else\n      {\n         log.info(\"Pushing source documents only\");\n      }\n      log.info(\"Source directory (originals): {}\", getOpts().getSrcDir());\n      if (getOpts().getPushTrans())\n      {\n         log.info(\"Target base directory (translations): {}\", getOpts().getTransDir());\n      }\n      if (getOpts().isDryRun())\n      {\n         log.info(\"DRY RUN: no permanent changes will be made\");\n      }\n   }","id":96784,"modified_method":"private void logOptions()\n   {\n      if (!log.isInfoEnabled())\n      {\n         return;\n      }\n      log.info(\"Server: {}\", getOpts().getUrl());\n      log.info(\"Project: {}\", getOpts().getProj());\n      log.info(\"Version: {}\", getOpts().getProjectVersion());\n      log.info(\"Username: {}\", getOpts().getUsername());\n      log.info(\"Project type: {}\", getOpts().getProjectType());\n      log.info(\"Source language: {}\", getOpts().getSourceLang());\n      log.info(\"Copy previous translations: {}\", getOpts().getCopyTrans());\n      log.info(\"Merge type: {}\", getOpts().getMergeType());\n      log.info(\"Enable modules: {}\", getOpts().getEnableModules());\n      if (getOpts().getEnableModules())\n      {\n         log.info(\"Current module: {}\", getOpts().getCurrentModule());\n         if (getOpts().isRootModule())\n         {\n            log.info(\"Root module: YES\");\n            if (log.isDebugEnabled())\n            {\n               log.debug(\"Modules: {}\", StringUtils.join(getOpts().getAllModules(), \", \"));\n            }\n         }\n      }\n      log.info(\"Include patterns: {}\", StringUtils.join(getOpts().getIncludes(), \" \"));\n      log.info(\"Exclude patterns: {}\", StringUtils.join(getOpts().getExcludes(), \" \"));\n      log.info(\"Default excludes: {}\", getOpts().getDefaultExcludes());\n\n      if (getOpts().getPushType() == PushType.Trans)\n      {\n         log.info(\"Pushing target documents only\");\n         log.info(\"Locales to push: {}\", getOpts().getLocales());\n      }\n      else if(getOpts().getPushType() == PushType.Source)\n      {\n         log.info(\"Pushing source documents only\");\n      }\n      else\n      {\n         log.info(\"Pushing source and target documents\");\n         log.info(\"Locales to push: {}\", getOpts().getLocales());\n      }\n      log.info(\"Source directory (originals): {}\", getOpts().getSrcDir());\n      if (getOpts().getPushType() == PushType.Both || getOpts().getPushType() == PushType.Trans)\n      {\n         log.info(\"Target base directory (translations): {}\", getOpts().getTransDir());\n      }\n      if (getOpts().isDryRun())\n      {\n         log.info(\"DRY RUN: no permanent changes will be made\");\n      }\n   }","commit_id":"71bc1263fe3a46be9a406a6a4799498403cb6e8f","url":"https://github.com/zanata/zanata-server"},{"original_method":"private void pushCurrentModule() throws IOException\n   {\n      File sourceDir = getOpts().getSrcDir();\n\n      if (!sourceDir.exists())\n      {\n         if (getOpts().getEnableModules())\n         {\n            log.info(\"source directory '\" + sourceDir + \"' not found; skipping docs push for module \" + getOpts().getCurrentModule());\n            return;\n         }\n         else\n         {\n            throw new RuntimeException(\"directory '\" + sourceDir + \"' does not exist - check srcDir option\");\n         }\n      }\n\n      AbstractPushStrategy strat = getStrategy(getOpts().getProjectType());\n      final StringSet extensions = strat.getExtensions();\n\n      // to save memory, we don't load all the docs into a HashMap\n      Set<String> localDocNames = strat.findDocNames(sourceDir, getOpts().getIncludes(), getOpts().getExcludes(), getOpts().getDefaultExcludes());\n      for (String docName : localDocNames)\n      {\n         log.info(\"Found source document: {}\", docName);\n      }\n      List<String> obsoleteDocs = getObsoleteDocsInModuleFromServer(localDocNames);\n      if (obsoleteDocs.isEmpty())\n      {\n         if (localDocNames.isEmpty())\n         {\n            log.info(\"no documents in module: {}; nothing to do\", getOpts().getCurrentModule());\n            return;\n         }\n         else\n         {\n            // nop\n         }\n      }\n      else\n      {\n         log.warn(\"Found {} obsolete docs on the server which will be DELETED\", obsoleteDocs.size());\n         log.info(\"Obsolete docs: {}\", obsoleteDocs);\n      }\n\n      if (getOpts().getPushTrans())\n      {\n         if (getOpts().getLocales() == null)\n            throw new ConfigException(\"pushTrans option set, but zanata.xml contains no <locales>\");\n         log.warn(\"pushTrans option is set: existing translations on server may be overwritten/deleted\");\n         confirmWithUser(\"This will overwrite existing documents AND TRANSLATIONS on the server, and delete obsolete documents.\\n\");\n      }\n      else\n      {\n         confirmWithUser(\"This will overwrite existing documents on the server, and delete obsolete documents.\\n\");\n      }\n\n      for (String localDocName : localDocNames)\n      {\n         final Resource srcDoc = strat.loadSrcDoc(sourceDir, localDocName);\n         String qualifiedDocName = qualifiedDocName(localDocName);\n         final String docUri = RestUtil.convertToDocumentURIId(qualifiedDocName);\n         srcDoc.setName(qualifiedDocName);\n         debug(srcDoc);\n\n         pushSrcDocToServer(docUri, srcDoc, extensions);\n\n         if (getOpts().getPushTrans())\n         {\n            strat.visitTranslationResources(localDocName, srcDoc, new TranslationResourcesVisitor()\n            {\n               @Override\n               public void visit(LocaleMapping locale, TranslationsResource targetDoc)\n               {\n                  debug(targetDoc);\n                  pushTargetDocToServer(docUri, locale, srcDoc, targetDoc, extensions);\n               }\n            });\n         }\n      }\n      deleteDocsFromServer(obsoleteDocs);\n   }","id":96785,"modified_method":"private void pushCurrentModule() throws IOException\n   {\n      File sourceDir = getOpts().getSrcDir();\n\n      if (!sourceDir.exists())\n      {\n         if (getOpts().getEnableModules())\n         {\n            log.info(\"source directory '\" + sourceDir + \"' not found; skipping docs push for module \" + getOpts().getCurrentModule());\n            return;\n         }\n         else\n         {\n            throw new RuntimeException(\"directory '\" + sourceDir + \"' does not exist - check srcDir option\");\n         }\n      }\n\n      AbstractPushStrategy strat = getStrategy(getOpts().getProjectType());\n      final StringSet extensions = strat.getExtensions();\n\n      // to save memory, we don't load all the docs into a HashMap\n      Set<String> localDocNames = strat.findDocNames(sourceDir, getOpts().getIncludes(), getOpts().getExcludes(), getOpts().getDefaultExcludes());\n      for (String docName : localDocNames)\n      {\n         log.info(\"Found source document: {}\", docName);\n      }\n      List<String> obsoleteDocs = getObsoleteDocsInModuleFromServer(localDocNames);\n      if (obsoleteDocs.isEmpty())\n      {\n         if (localDocNames.isEmpty())\n         {\n            log.info(\"no documents in module: {}; nothing to do\", getOpts().getCurrentModule());\n            return;\n         }\n         else\n         {\n            // nop\n         }\n      }\n      else\n      {\n         log.warn(\"Found {} obsolete docs on the server which will be DELETED\", obsoleteDocs.size());\n         log.info(\"Obsolete docs: {}\", obsoleteDocs);\n      }\n\n      if (getOpts().getPushType() == PushType.Trans || getOpts().getPushType() == PushType.Both )\n      {\n         if (getOpts().getLocales() == null)\n            throw new ConfigException(\"pushType set to '\" + getOpts().getPushType() + \"', but zanata.xml contains no <locales>\");\n         log.warn(\"pushType set to '\" + getOpts().getPushType() + \"': existing translations on server may be overwritten/deleted\");\n\n         if( getOpts().getPushType() == PushType.Both )\n         {\n            confirmWithUser(\"This will overwrite existing documents AND TRANSLATIONS on the server, and delete obsolete documents.\\n\");\n         }\n         else if( getOpts().getPushType() == PushType.Trans )\n         {\n            confirmWithUser(\"This will overwrite existing TRANSLATIONS on the server.\\n\");\n         }\n      }\n      else\n      {\n         confirmWithUser(\"This will overwrite existing documents on the server, and delete obsolete documents.\\n\");\n      }\n\n      for (String localDocName : localDocNames)\n      {\n         final Resource srcDoc = strat.loadSrcDoc(sourceDir, localDocName);\n         String qualifiedDocName = qualifiedDocName(localDocName);\n         final String docUri = RestUtil.convertToDocumentURIId(qualifiedDocName);\n         srcDoc.setName(qualifiedDocName);\n         debug(srcDoc);\n\n         if( getOpts().getPushType() == PushType.Source || getOpts().getPushType() == PushType.Both )\n         {\n            pushSrcDocToServer(docUri, srcDoc, extensions);\n         }\n         if (getOpts().getPushType() == PushType.Trans || getOpts().getPushType() == PushType.Both)\n         {\n            strat.visitTranslationResources(localDocName, srcDoc, new TranslationResourcesVisitor()\n            {\n               @Override\n               public void visit(LocaleMapping locale, TranslationsResource targetDoc)\n               {\n                  debug(targetDoc);\n                  pushTargetDocToServer(docUri, locale, srcDoc, targetDoc, extensions);\n               }\n            });\n         }\n      }\n      deleteDocsFromServer(obsoleteDocs);\n   }","commit_id":"71bc1263fe3a46be9a406a6a4799498403cb6e8f","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   public boolean getPushTrans()\n   {\n      return pushTrans;\n   }","id":96786,"modified_method":"@Override\n   public PushType getPushType()\n   {\n      // if the deprecated 'pushTrans' option has been used\n      if( pushTrans != null )\n      {\n         return Boolean.parseBoolean(pushTrans) ? PushType.Both : PushType.Source;\n      }\n      else\n      {\n         return PushType.fromString(pushType);\n      }\n   }","commit_id":"71bc1263fe3a46be9a406a6a4799498403cb6e8f","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n    * Test that the pom.xml settings are applied as expected\n    * \n    * @throws Exception\n    */\n   public void testPomConfig() throws Exception\n   {\n      applyPomParams(\"pom-config.xml\");\n      assertEquals(\"srcDir\", pushMojo.getSrcDir().toString());\n      assertEquals(\"transDir\", pushMojo.getTransDir().toString());\n      assertEquals(\"es\", pushMojo.getSourceLang());\n      assertEquals(true, pushMojo.getPushTrans());\n      assertEquals(false, pushMojo.getCopyTrans());\n      assertEquals(\"import\", pushMojo.getMergeType());\n      assertEquals(Arrays.asList(\"includes\"), pushMojo.getIncludes());\n      assertEquals(Arrays.asList(\"excludes\"), pushMojo.getExcludes());\n      assertEquals(false, pushMojo.getDefaultExcludes());\n   }","id":96787,"modified_method":"/**\n    * Test that the pom.xml settings are applied as expected\n    * \n    * @throws Exception\n    */\n   public void testPomConfig() throws Exception\n   {\n      applyPomParams(\"pom-config.xml\");\n      assertEquals(\"srcDir\", pushMojo.getSrcDir().toString());\n      assertEquals(\"transDir\", pushMojo.getTransDir().toString());\n      assertEquals(\"es\", pushMojo.getSourceLang());\n      assertEquals(PushType.Both, pushMojo.getPushType());\n      assertEquals(false, pushMojo.getCopyTrans());\n      assertEquals(\"import\", pushMojo.getMergeType());\n      assertEquals(Arrays.asList(\"includes\"), pushMojo.getIncludes());\n      assertEquals(Arrays.asList(\"excludes\"), pushMojo.getExcludes());\n      assertEquals(false, pushMojo.getDefaultExcludes());\n   }","commit_id":"71bc1263fe3a46be9a406a6a4799498403cb6e8f","url":"https://github.com/zanata/zanata-server"},{"original_method":"/**\n    * @param pushTrans the pushTrans to set\n    */\n   public void setPushTrans(boolean pushTrans)\n   {\n      this.pushTrans = pushTrans;\n   }","id":96788,"modified_method":"@Deprecated\n   public void setPushTrans(boolean pushTrans)\n   {\n      this.pushTrans = pushTrans;\n      this.pushType = pushTrans ? PushType.Both.toString() : PushType.Source.toString();\n   }","commit_id":"71bc1263fe3a46be9a406a6a4799498403cb6e8f","url":"https://github.com/zanata/zanata-server"},{"original_method":"@Override\n   public boolean getPushTrans()\n   {\n      return pushTrans;\n   }","id":96789,"modified_method":"@Override\n   public PushType getPushType()\n   {\n      return PushType.fromString( pushType );\n   }","commit_id":"71bc1263fe3a46be9a406a6a4799498403cb6e8f","url":"https://github.com/zanata/zanata-server"},{"original_method":"private String responseToErrorMessage(final HttpMethodBase method) {\n        assert method.isRequestSent() : \"no use getting an error message unless the request is sent\";\n\n        if (TEXT_HTML_CONTENT_TYPE.equals(method.getResponseHeader(CONTENT_TYPE).getValue())) {\n            // The error message is the response content\n            // Safety margin of 1024 characters, anything longer is probably\n            // useless and will clutter the logs\n            try {\n                return method.getResponseBodyAsString(BODY_RESP_MAX_LEN);\n            } catch (IOException e) {\n                s_logger.debug(\"Error while loading response body\", e);\n            }\n        }\n\n        // The default\n        return method.getStatusText();\n    }","id":96790,"modified_method":"private String responseToErrorMessage(final HttpMethodBase method) {\n        assert method.isRequestSent() : \"no use getting an error message unless the request is sent\";\n\n        final Header contentTypeHeader = method.getResponseHeader(CONTENT_TYPE);\n        if (contentTypeHeader != null && TEXT_HTML_CONTENT_TYPE.equals(contentTypeHeader.getValue())) {\n            // The error message is the response content\n            // Safety margin of 1024 characters, anything longer is probably\n            // useless and will clutter the logs\n            try {\n                return method.getResponseBodyAsString(BODY_RESP_MAX_LEN);\n            } catch (IOException e) {\n                s_logger.debug(\"Error while loading response body\", e);\n            }\n        }\n\n        // The default\n        return method.getStatusText();\n    }","commit_id":"07f73ec05408d8ad9727f763826d862a23a040dd","url":"https://github.com/apache/cloudstack"},{"original_method":"public UMOMessage doSend(UMOEvent event) throws Exception\n    {\n        HttpMethod httpMethod = execute(event, false);\n        try {\n            Properties h = new Properties();\n            Header[] headers = httpMethod.getRequestHeaders();\n            for (int i = 0; i < headers.length; i++) {\n                h.setProperty(headers[i].getName(), headers[i].getValue());\n            }\n            String status = String.valueOf(httpMethod.getStatusCode());\n\n            h.setProperty(HttpConnector.HTTP_STATUS_PROPERTY, status);\n            logger.debug(\"Http response is: \" + status);\n            ExceptionPayload ep = null;\n            if(httpMethod.getStatusCode() >= 400 ) {\n                logger.error(httpMethod.getResponseBodyAsString());\n                ep = new ExceptionPayload(new DispatchException(event.getMessage(), event.getEndpoint(),\n                        new Exception(\"Http call returned a status of: \" + httpMethod.getStatusCode() + \" \" + httpMethod.getStatusText())));\n            }\n            UMOMessage m = null;\n            // text or binary content?\n            if(httpMethod.getResponseHeader(HttpConstants.HEADER_CONTENT_TYPE).getValue().startsWith(\"text/\")) {\n                m = new MuleMessage(httpMethod.getResponseBodyAsString(), h);\n            } else {\n                m = new MuleMessage(httpMethod.getResponseBody(), h);\n            }\n            m.setExceptionPayload(ep);\n            return m;\n        } catch (Exception e) {\n            throw new DispatchException(event.getMessage(), event.getEndpoint(), e);\n        } finally {\n            if (httpMethod != null)\n                httpMethod.releaseConnection();\n        }\n    }","id":96791,"modified_method":"public UMOMessage doSend(UMOEvent event) throws Exception\n    {\n        HttpMethod httpMethod = execute(event, false);\n        try {\n            Properties h = new Properties();\n            Header[] headers = httpMethod.getRequestHeaders();\n            for (int i = 0; i < headers.length; i++) {\n                h.setProperty(headers[i].getName(), headers[i].getValue());\n            }\n            String status = String.valueOf(httpMethod.getStatusCode());\n\n            h.setProperty(HttpConnector.HTTP_STATUS_PROPERTY, status);\n            logger.debug(\"Http response is: \" + status);\n            ExceptionPayload ep = null;\n            if(httpMethod.getStatusCode() >= 400 ) {\n                logger.error(Utility.getInputStreamAsString(httpMethod.getResponseBodyAsStream()));\n                ep = new ExceptionPayload(new DispatchException(event.getMessage(), event.getEndpoint(),\n                        new Exception(\"Http call returned a status of: \" + httpMethod.getStatusCode() + \" \" + httpMethod.getStatusText())));\n            }\n            UMOMessage m = null;\n            // text or binary content?\n            Header header = httpMethod.getResponseHeader(HttpConstants.HEADER_CONTENT_TYPE);\n            if ((header != null) && header.getValue().startsWith(\"text/\")) {\n                m = new MuleMessage(httpMethod.getResponseBodyAsString(), h);\n            } else {\n                m = new MuleMessage(httpMethod.getResponseBody(), h);\n            }\n            m.setExceptionPayload(ep);\n            return m;\n        } catch (Exception e) {\n            throw new DispatchException(event.getMessage(), event.getEndpoint(), e);\n        } finally {\n            if (httpMethod != null)\n                httpMethod.releaseConnection();\n        }\n    }","commit_id":"149f47cd549b14d2c92a8cbc4b3876a6b8cfbb32","url":"https://github.com/mulesoft/mule"},{"original_method":"private static boolean checkInheritor(PsiClass aClass, PsiClass baseClass, boolean checkDeep, Set<PsiClass> checkedClasses) {\n    ProgressManager.getInstance().checkCanceled();\n    if (aClass != null) {\n      PsiManager manager = baseClass.getManager();\n      if (manager.areElementsEquivalent(baseClass, aClass)) {\n        return true;\n      }\n      if (checkedClasses != null && checkedClasses.contains(aClass)) { // to prevent infinite recursion\n        return false;\n      }\n      if (checkDeep) {\n        if (isInheritor(aClass, baseClass, checkDeep, checkedClasses)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }","id":96792,"modified_method":"private static boolean checkInheritor(PsiClass aClass, PsiClass baseClass, boolean checkDeep, Set<PsiClass> checkedClasses) {\n    ProgressManager.checkCanceled();\n    if (aClass != null) {\n      PsiManager manager = baseClass.getManager();\n      if (manager.areElementsEquivalent(baseClass, aClass)) {\n        return true;\n      }\n      if (checkedClasses != null && checkedClasses.contains(aClass)) { // to prevent infinite recursion\n        return false;\n      }\n      if (checkDeep) {\n        if (isInheritor(aClass, baseClass, checkDeep, checkedClasses)) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }","commit_id":"bcf5b7ba18a84e217a7dbdaefcd7c82314081ff8","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static Map<MethodSignature, HierarchicalMethodSignature> buildMethodHierarchy(PsiClass aClass,\n                                                                                        PsiSubstitutor substitutor,\n                                                                                        final boolean includePrivates,\n                                                                                        final Set<PsiClass> visited,\n                                                                                        boolean isInRawContext) {\n    Map<MethodSignature, HierarchicalMethodSignature> result = new LinkedHashMap<MethodSignature, HierarchicalMethodSignature>();\n    final Map<MethodSignature, List<PsiMethod>> sameParameterErasureMethods = new THashMap<MethodSignature, List<PsiMethod>>(MethodSignatureUtil.METHOD_PARAMETERS_ERASURE_EQUALITY);\n\n    Map<MethodSignature, HierarchicalMethodSignatureImpl> map = new THashMap<MethodSignature, HierarchicalMethodSignatureImpl>(new TObjectHashingStrategy<MethodSignature>() {\n      public int computeHashCode(MethodSignature signature) {\n        return MethodSignatureUtil.METHOD_PARAMETERS_ERASURE_EQUALITY.computeHashCode(signature);\n      }\n\n      public boolean equals(MethodSignature o1, MethodSignature o2) {\n        if (!MethodSignatureUtil.METHOD_PARAMETERS_ERASURE_EQUALITY.equals(o1, o2)) return false;\n        List<PsiMethod> list = sameParameterErasureMethods.get(o1);\n        boolean toCheckReturnType = list != null && list.size() > 1;\n        if (!toCheckReturnType) return true;\n        PsiType returnType1 = ((MethodSignatureBackedByPsiMethod)o1).getMethod().getReturnType();\n        PsiType returnType2 = ((MethodSignatureBackedByPsiMethod)o2).getMethod().getReturnType();\n        if (returnType1 == null && returnType2 == null) return true;\n        if (returnType1 == null || returnType2 == null) return false;\n\n        PsiType erasure1 = TypeConversionUtil.erasure(o1.getSubstitutor().substitute(returnType1));\n        PsiType erasure2 = TypeConversionUtil.erasure(o2.getSubstitutor().substitute(returnType2));\n        return erasure1.equals(erasure2);\n      }\n    });\n\n    for (PsiMethod method : aClass.getMethods()) {\n      if (!includePrivates && method.hasModifierProperty(PsiModifier.PRIVATE)) continue;\n      final MethodSignatureBackedByPsiMethod signature = MethodSignatureBackedByPsiMethod.create(method, substitutor, isInRawContext);\n      HierarchicalMethodSignatureImpl newH = new HierarchicalMethodSignatureImpl(signature);\n\n      List<PsiMethod> list = sameParameterErasureMethods.get(signature);\n      if (list == null) {\n        list = new SmartList<PsiMethod>();\n        sameParameterErasureMethods.put(signature, list);\n      }\n      list.add(method);\n\n      result.put(signature, newH);\n      map.put(signature, newH);\n    }\n\n    for (PsiClassType superType : aClass.getSuperTypes()) {\n      PsiClassType.ClassResolveResult superTypeResolveResult = superType.resolveGenerics();\n      PsiClass superClass = superTypeResolveResult.getElement();\n      if (superClass == null) continue;\n      if (!visited.add(superClass)) continue; // cyclic inheritance\n      final PsiSubstitutor superSubstitutor = superTypeResolveResult.getSubstitutor();\n      PsiSubstitutor finalSubstitutor = obtainFinalSubstitutor(superClass, superSubstitutor, substitutor);\n\n      final boolean isInRawContextSuper = (isInRawContext || PsiUtil.isRawSubstitutor(superClass, superSubstitutor)) && superClass.getTypeParameters().length != 0;\n      Map<MethodSignature, HierarchicalMethodSignature> superResult = buildMethodHierarchy(superClass, finalSubstitutor, false, visited, isInRawContextSuper);\n      visited.remove(superClass);\n\n      for (Map.Entry<MethodSignature, HierarchicalMethodSignature> entry : superResult.entrySet()) {\n        HierarchicalMethodSignature hierarchicalMethodSignature = entry.getValue();\n        if (!PsiUtil.isAccessible(hierarchicalMethodSignature.getMethod(), aClass, aClass)) continue;\n        MethodSignature superSignature = entry.getKey();\n        HierarchicalMethodSignatureImpl existing = map.get(superSignature);\n        if (existing == null) {\n          map.put(superSignature, copy(hierarchicalMethodSignature));\n        }\n        else if (isReturnTypeIsMoreSpecificThan(hierarchicalMethodSignature, existing) && isSuperMethod(aClass, hierarchicalMethodSignature, existing)) {\n          HierarchicalMethodSignatureImpl newSuper = copy(hierarchicalMethodSignature);\n          mergeSupers(newSuper, existing);\n          map.put(superSignature, newSuper);\n        }\n        else if (isSuperMethod(aClass, existing, hierarchicalMethodSignature)) {\n          mergeSupers(existing, hierarchicalMethodSignature);\n        }\n        // just drop an invalid method declaration there - to highlight accordingly\n        else if (!result.containsKey(superSignature)) {\n          result.put(superSignature, hierarchicalMethodSignature);\n        }\n      }\n    }\n\n\n    for (Map.Entry<MethodSignature, HierarchicalMethodSignatureImpl> entry : map.entrySet()) {\n      HierarchicalMethodSignatureImpl hierarchicalMethodSignature = entry.getValue();\n      MethodSignature methodSignature = entry.getKey();\n      if (result.get(methodSignature) == null && PsiUtil.isAccessible(hierarchicalMethodSignature.getMethod(), aClass, aClass)) {\n        result.put(methodSignature, hierarchicalMethodSignature);\n      }\n    }\n\n    return result;\n  }","id":96793,"modified_method":"private static Map<MethodSignature, HierarchicalMethodSignature> buildMethodHierarchy(PsiClass aClass,\n                                                                                        PsiSubstitutor substitutor,\n                                                                                        final boolean includePrivates,\n                                                                                        final Set<PsiClass> visited,\n                                                                                        boolean isInRawContext) {\n    Map<MethodSignature, HierarchicalMethodSignature> result = new LinkedHashMap<MethodSignature, HierarchicalMethodSignature>();\n    final Map<MethodSignature, List<PsiMethod>> sameParameterErasureMethods = new THashMap<MethodSignature, List<PsiMethod>>(MethodSignatureUtil.METHOD_PARAMETERS_ERASURE_EQUALITY);\n\n    Map<MethodSignature, HierarchicalMethodSignatureImpl> map = new THashMap<MethodSignature, HierarchicalMethodSignatureImpl>(new TObjectHashingStrategy<MethodSignature>() {\n      public int computeHashCode(MethodSignature signature) {\n        return MethodSignatureUtil.METHOD_PARAMETERS_ERASURE_EQUALITY.computeHashCode(signature);\n      }\n\n      public boolean equals(MethodSignature o1, MethodSignature o2) {\n        if (!MethodSignatureUtil.METHOD_PARAMETERS_ERASURE_EQUALITY.equals(o1, o2)) return false;\n        List<PsiMethod> list = sameParameterErasureMethods.get(o1);\n        boolean toCheckReturnType = list != null && list.size() > 1;\n        if (!toCheckReturnType) return true;\n        PsiType returnType1 = ((MethodSignatureBackedByPsiMethod)o1).getMethod().getReturnType();\n        PsiType returnType2 = ((MethodSignatureBackedByPsiMethod)o2).getMethod().getReturnType();\n        if (returnType1 == null && returnType2 == null) return true;\n        if (returnType1 == null || returnType2 == null) return false;\n\n        PsiType erasure1 = TypeConversionUtil.erasure(o1.getSubstitutor().substitute(returnType1));\n        PsiType erasure2 = TypeConversionUtil.erasure(o2.getSubstitutor().substitute(returnType2));\n        return erasure1.equals(erasure2);\n      }\n    });\n\n    for (PsiMethod method : aClass.getMethods()) {\n      if (!includePrivates && method.hasModifierProperty(PsiModifier.PRIVATE)) continue;\n      final MethodSignatureBackedByPsiMethod signature = MethodSignatureBackedByPsiMethod.create(method, substitutor, isInRawContext);\n      HierarchicalMethodSignatureImpl newH = new HierarchicalMethodSignatureImpl(signature);\n\n      List<PsiMethod> list = sameParameterErasureMethods.get(signature);\n      if (list == null) {\n        list = new SmartList<PsiMethod>();\n        sameParameterErasureMethods.put(signature, list);\n      }\n      list.add(method);\n\n      result.put(signature, newH);\n      map.put(signature, newH);\n    }\n\n    for (PsiClassType superType : aClass.getSuperTypes()) {\n      PsiClassType.ClassResolveResult superTypeResolveResult = superType.resolveGenerics();\n      PsiClass superClass = superTypeResolveResult.getElement();\n      if (superClass == null) continue;\n      if (!visited.add(superClass)) continue; // cyclic inheritance\n      final PsiSubstitutor superSubstitutor = superTypeResolveResult.getSubstitutor();\n      PsiSubstitutor finalSubstitutor = obtainFinalSubstitutor(superClass, superSubstitutor, substitutor);\n\n      final boolean isInRawContextSuper = (isInRawContext || PsiUtil.isRawSubstitutor(superClass, superSubstitutor)) && superClass.getTypeParameters().length != 0;\n      Map<MethodSignature, HierarchicalMethodSignature> superResult = buildMethodHierarchy(superClass, finalSubstitutor, false, visited, isInRawContextSuper);\n      visited.remove(superClass);\n\n      List<Pair<MethodSignature, HierarchicalMethodSignature>> flattened = new ArrayList<Pair<MethodSignature, HierarchicalMethodSignature>>();\n      for (Map.Entry<MethodSignature, HierarchicalMethodSignature> entry : superResult.entrySet()) {\n        HierarchicalMethodSignature hms = entry.getValue();\n        MethodSignature signature = entry.getKey();\n        PsiClass containingClass = hms.getMethod().getContainingClass();\n        List<HierarchicalMethodSignature> supers = new ArrayList<HierarchicalMethodSignature>(hms.getSuperSignatures());\n        for (HierarchicalMethodSignature aSuper : supers) {\n          PsiClass superContainingClass = aSuper.getMethod().getContainingClass();\n          if (containingClass != null && superContainingClass != null && !containingClass.isInheritor(superContainingClass, true)) {\n            // methods must be inherited from unrelated classes, so flatten hierarchy here\n            // class C implements SAM1, SAM2 { void methodimpl() {} }\n            //hms.getSuperSignatures().remove(aSuper);\n            flattened.add(new Pair<MethodSignature, HierarchicalMethodSignature>(signature, aSuper));\n          }\n        }\n        putInMap(aClass, result, map, hms, signature);\n      }\n      for (Pair<MethodSignature, HierarchicalMethodSignature> pair : flattened) {\n        putInMap(aClass, result, map, pair.second, pair.first);\n      }\n    }\n\n\n    for (Map.Entry<MethodSignature, HierarchicalMethodSignatureImpl> entry : map.entrySet()) {\n      HierarchicalMethodSignatureImpl hierarchicalMethodSignature = entry.getValue();\n      MethodSignature methodSignature = entry.getKey();\n      if (result.get(methodSignature) == null && PsiUtil.isAccessible(hierarchicalMethodSignature.getMethod(), aClass, aClass)) {\n        result.put(methodSignature, hierarchicalMethodSignature);\n      }\n    }\n\n    return result;\n  }","commit_id":"bcf5b7ba18a84e217a7dbdaefcd7c82314081ff8","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private  void addClass(Class<?> cls) {\n        if (Throwable.class.isAssignableFrom(cls)) {\n            if (!Throwable.class.equals(cls)\n                && !Exception.class.equals(cls)) {\n                walkReferences(cls);\n            }\n            addClass(String.class);\n        } else {\n            cls = JAXBUtils.getValidClass(cls);\n            if (null != cls) {\n                if (classes.contains(cls)) {\n                    return;\n                }\n\n                if (!cls.isInterface()) {\n                    classes.add(cls);\n                }\n\n                XmlSeeAlso xsa = cls.getAnnotation(XmlSeeAlso.class);\n                if (xsa != null) {\n                    for (Class<?> c : xsa.value()) {\n                        addClass(c);\n                    }\n                }\n                XmlJavaTypeAdapter xjta = cls.getAnnotation(XmlJavaTypeAdapter.class);\n                if (xjta != null) {\n                    //has an adapter.   We need to inspect the adapter and then\n                    //return as the adapter will handle the superclass\n                    //and interfaces and such\n                    Type t = getTypeFromXmlAdapter(xjta);\n                    if (t != null) {\n                        addType(t);\n                    }\n                    return;\n                }\n                \n                if (cls.getSuperclass() != null) {\n                    //JAXB should do this, but it doesn't always.\n                    //in particular, older versions of jaxb don't\n                    addClass(cls.getSuperclass());\n                }\n\n                if (!cls.isInterface()) {\n                    walkReferences(cls);\n                }\n            }\n        }\n    }","id":96794,"modified_method":"private  void addClass(Class<?> cls) {\n        if (Throwable.class.isAssignableFrom(cls)) {\n            if (!Throwable.class.equals(cls)\n                && !Exception.class.equals(cls)) {\n                walkReferences(cls);\n            }\n            addClass(String.class);\n        } else {\n            cls = JAXBUtils.getValidClass(cls);\n            if (null != cls) {\n                if (classes.contains(cls)) {\n                    return;\n                }\n\n                if (!cls.isInterface()) {\n                    classes.add(cls);\n                }\n\n                XmlSeeAlso xsa = cls.getAnnotation(XmlSeeAlso.class);\n                if (xsa != null) {\n                    for (Class<?> c : xsa.value()) {\n                        addClass(c);\n                    }\n                }\n                XmlJavaTypeAdapter xjta = cls.getAnnotation(XmlJavaTypeAdapter.class);\n                if (xjta != null) {\n                    //has an adapter.   We need to inspect the adapter and then\n                    //return as the adapter will handle the superclass\n                    //and interfaces and such\n                    Type t = Utils.getTypeFromXmlAdapter(xjta);\n                    if (t != null) {\n                        addType(t);\n                    }\n                    return;\n                }\n                \n                if (cls.getSuperclass() != null) {\n                    //JAXB should do this, but it doesn't always.\n                    //in particular, older versions of jaxb don't\n                    addClass(cls.getSuperclass());\n                }\n\n                if (!cls.isInterface()) {\n                    walkReferences(cls);\n                }\n            }\n        }\n    }","commit_id":"fb3ea2d8087d60430496cc97f9d1e67117497764","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * Checks if there are JAXB annotations among the annotations of the class member.\n     * @param annotations the array of annotations from the class member\n     * @return true if JAXB annotations are present, false otherwise\n     */\n    private static boolean checkJaxbAnnotation(Annotation[] annotations) {\n        // must check if there are any jaxb annotations\n        Package jaxbAnnotationsPackage = XmlElement.class.getPackage();\n        for (Annotation annotation : annotations) {\n            if (annotation.annotationType().getPackage() == jaxbAnnotationsPackage) {\n                return true;\n            }\n        }\n        return false;\n    }","id":96795,"modified_method":"/**\n     * Checks if there are JAXB annotations among the annotations of the class member.\n     * @param annotations the array of annotations from the class member\n     * @return true if JAXB annotations are present, false otherwise\n     */\n    static boolean checkJaxbAnnotation(Annotation[] annotations) {\n        // must check if there are any jaxb annotations\n        Package jaxbAnnotationsPackage = XmlElement.class.getPackage();\n        for (Annotation annotation : annotations) {\n            if (annotation.annotationType().getPackage() == jaxbAnnotationsPackage) {\n                return true;\n            }\n        }\n        return false;\n    }","commit_id":"fb3ea2d8087d60430496cc97f9d1e67117497764","url":"https://github.com/apache/cxf"},{"original_method":"private void checkForAdapter(Class<?> clazz, Annotation[] anns) {\n        if (anns != null) {\n            for (Annotation a : anns) {\n                if (XmlJavaTypeAdapter.class.isAssignableFrom(a.annotationType())) {\n                    Type t = getTypeFromXmlAdapter((XmlJavaTypeAdapter)a);\n                    if (t != null) {\n                        addType(t);\n                    }\n                }\n            }\n        }\n        XmlJavaTypeAdapter xjta = clazz.getAnnotation(XmlJavaTypeAdapter.class);\n        if (xjta != null) {\n            Type t = getTypeFromXmlAdapter(xjta);\n            if (t != null) {\n                addType(t);\n            }\n        }\n        if (clazz.getPackage() != null) {\n            XmlJavaTypeAdapters adapt = clazz.getPackage().getAnnotation(XmlJavaTypeAdapters.class);\n            if (adapt != null) {\n                for (XmlJavaTypeAdapter a: adapt.value()) {\n                    globalAdapters.add(a.type());\n                }\n                for (XmlJavaTypeAdapter a: adapt.value()) {\n                    Type t = getTypeFromXmlAdapter(a);\n                    if (t != null) {\n                        addType(t);\n                    }\n                }\n            }\n        }\n    }","id":96796,"modified_method":"private void checkForAdapter(Class<?> clazz, Annotation[] anns) {\n        if (anns != null) {\n            for (Annotation a : anns) {\n                if (XmlJavaTypeAdapter.class.isAssignableFrom(a.annotationType())) {\n                    Type t = Utils.getTypeFromXmlAdapter((XmlJavaTypeAdapter)a);\n                    if (t != null) {\n                        addType(t);\n                    }\n                }\n            }\n        }\n        XmlJavaTypeAdapter xjta = clazz.getAnnotation(XmlJavaTypeAdapter.class);\n        if (xjta != null) {\n            Type t = Utils.getTypeFromXmlAdapter(xjta);\n            if (t != null) {\n                addType(t);\n            }\n        }\n        if (clazz.getPackage() != null) {\n            XmlJavaTypeAdapters adapt = clazz.getPackage().getAnnotation(XmlJavaTypeAdapters.class);\n            if (adapt != null) {\n                for (XmlJavaTypeAdapter a: adapt.value()) {\n                    globalAdapters.add(a.type());\n                }\n                for (XmlJavaTypeAdapter a: adapt.value()) {\n                    Type t = Utils.getTypeFromXmlAdapter(a);\n                    if (t != null) {\n                        addType(t);\n                    }\n                }\n            }\n        }\n    }","commit_id":"fb3ea2d8087d60430496cc97f9d1e67117497764","url":"https://github.com/apache/cxf"},{"original_method":"private void walkReferences(Class<?> cls) {\n        if (cls == null) {\n            return;\n        }\n        if (cls.getName().startsWith(\"java.\")\n            || cls.getName().startsWith(\"javax.\")) {\n            return;\n        }\n        //walk the public fields/methods to try and find all the classes. JAXB will only load the\n        //EXACT classes in the fields/methods if they are in a different package. Thus,\n        //subclasses won't be found and the xsi:type stuff won't work at all.\n        //We'll grab the public field/method types and then add the ObjectFactory stuff\n        //as well as look for jaxb.index files in those packages.\n\n        XmlAccessorType accessorType = cls.getAnnotation(XmlAccessorType.class);\n        if (accessorType == null && cls.getPackage() != null) {\n            accessorType = cls.getPackage().getAnnotation(XmlAccessorType.class);\n        }\n        XmlAccessType accessType = accessorType != null ? accessorType.value() : XmlAccessType.PUBLIC_MEMBER;\n\n        if (accessType != XmlAccessType.PROPERTY) {   // only look for fields if we are instructed to\n            //fields are accessible even if not public, must look at the declared fields\n            //then walk to parents declared fields, etc...\n            Field fields[] = ReflectionUtil.getDeclaredFields(cls); \n            for (Field f : fields) {\n                if (isFieldAccepted(f, accessType)) {\n                    addType(f.getGenericType());\n                }\n            }\n            walkReferences(cls.getSuperclass());\n        }\n\n        if (accessType != XmlAccessType.FIELD) {   // only look for methods if we are instructed to\n            Method methods[] = ReflectionUtil.getDeclaredMethods(cls); \n            for (Method m : methods) {\n                if (isMethodAccepted(m, accessType)) {\n                    addType(m.getGenericReturnType());\n                    for (Type t : m.getGenericParameterTypes()) {\n                        addType(t);\n                    }\n                }\n            }\n        }\n    }","id":96797,"modified_method":"private void walkReferences(Class<?> cls) {\n        if (cls == null) {\n            return;\n        }\n        if (cls.getName().startsWith(\"java.\")\n            || cls.getName().startsWith(\"javax.\")) {\n            return;\n        }\n        //walk the public fields/methods to try and find all the classes. JAXB will only load the\n        //EXACT classes in the fields/methods if they are in a different package. Thus,\n        //subclasses won't be found and the xsi:type stuff won't work at all.\n        //We'll grab the public field/method types and then add the ObjectFactory stuff\n        //as well as look for jaxb.index files in those packages.\n\n        XmlAccessType accessType = Utils.getXmlAccessType(cls);\n\n        if (accessType != XmlAccessType.PROPERTY) {   // only look for fields if we are instructed to\n            //fields are accessible even if not public, must look at the declared fields\n            //then walk to parents declared fields, etc...\n            Field fields[] = ReflectionUtil.getDeclaredFields(cls); \n            for (Field f : fields) {\n                if (isFieldAccepted(f, accessType)) {\n                    addType(f.getGenericType());\n                }\n            }\n            walkReferences(cls.getSuperclass());\n        }\n\n        if (accessType != XmlAccessType.FIELD) {   // only look for methods if we are instructed to\n            Method methods[] = ReflectionUtil.getDeclaredMethods(cls); \n            for (Method m : methods) {\n                if (isMethodAccepted(m, accessType)) {\n                    addType(m.getGenericReturnType());\n                    for (Type t : m.getGenericParameterTypes()) {\n                        addType(t);\n                    }\n                }\n            }\n        }\n    }","commit_id":"fb3ea2d8087d60430496cc97f9d1e67117497764","url":"https://github.com/apache/cxf"},{"original_method":"public static void marshallException(Marshaller marshaller, Exception elValue,\n                                         MessagePartInfo part, Object source) {\n        XMLStreamWriter writer = getStreamWriter(source);\n        QName qn = part.getElementQName();\n        try {\n            writer.writeStartElement(\"ns1\", qn.getLocalPart(), qn.getNamespaceURI());\n            Class<?> cls = part.getTypeClass();\n            XmlAccessorType accessorType = cls.getAnnotation(XmlAccessorType.class);\n            if (accessorType == null && cls.getPackage() != null) {\n                accessorType = cls.getPackage().getAnnotation(XmlAccessorType.class);\n            }\n            XmlAccessType accessType = accessorType != null\n                ? accessorType.value() : XmlAccessType.PUBLIC_MEMBER;\n            String namespace = part.getElementQName().getNamespaceURI();\n            \n            SchemaInfo sch = part.getMessageInfo().getOperation().getInterface()\n                .getService().getSchema(namespace);\n            if (sch != null) {\n                if (!sch.isElementFormQualified()) {\n                    namespace = null;\n                }\n            } else {\n                LOG.warning(\"Schema associated with \" + namespace + \" is null\");\n            }\n            for (Field f : ReflectionUtil.getDeclaredFields(cls)) {\n                if (JAXBContextInitializer.isFieldAccepted(f, accessType)) {\n                    XmlAttribute at = f.getAnnotation(XmlAttribute.class);\n                    if (at == null) {\n                        QName fname = new QName(namespace, f.getName());\n                        ReflectionUtil.setAccessible(f);\n                        if (JAXBSchemaInitializer.isArray(f.getGenericType())) {\n                            writeArrayObject(marshaller, writer, fname, f.get(elValue));\n                        } else {\n                            Object o = getFieldValue(f, elValue); \n                            writeObject(marshaller, writer, newJAXBElement(fname, String.class, o));\n                        }\n                    }\n                }\n            }\n            for (Method m : cls.getMethods()) {\n                if (JAXBContextInitializer.isMethodAccepted(m, accessType)) {\n                    int idx = m.getName().startsWith(\"get\") ? 3 : 2;\n                    String name = m.getName().substring(idx);\n                    name = Character.toLowerCase(name.charAt(0)) + name.substring(1);\n                    QName mname = new QName(namespace, name);\n                    if (JAXBSchemaInitializer.isArray(m.getGenericReturnType())) {\n                        writeArrayObject(marshaller, writer, mname, m.invoke(elValue));\n                    } else {\n                        Object o = getMethodValue(m, elValue); \n                        writeObject(marshaller, writer, newJAXBElement(mname, String.class, o));\n                    }\n                }\n            }\n\n            writer.writeEndElement();\n            writer.flush();\n        } catch (Exception e) {\n            throw new Fault(new Message(\"MARSHAL_ERROR\", LOG, e.getMessage()), e);\n        } finally {\n            StaxUtils.close(writer);\n        }\n    }","id":96798,"modified_method":"public static void marshallException(Marshaller marshaller, Exception elValue,\n                                         MessagePartInfo part, Object source) {\n        XMLStreamWriter writer = getStreamWriter(source);\n        QName qn = part.getElementQName();\n        try {\n            writer.writeStartElement(\"ns1\", qn.getLocalPart(), qn.getNamespaceURI());\n            Class<?> cls = part.getTypeClass();\n            XmlAccessType accessType = Utils.getXmlAccessType(cls);\n            String namespace = part.getElementQName().getNamespaceURI();\n            \n            SchemaInfo sch = part.getMessageInfo().getOperation().getInterface()\n                .getService().getSchema(namespace);\n            if (sch != null) {\n                if (!sch.isElementFormQualified()) {\n                    namespace = null;\n                }\n            } else {\n                LOG.warning(\"Schema associated with \" + namespace + \" is null\");\n            }\n            for (Field f : Utils.getFields(cls, accessType)) {\n                XmlAttribute at = f.getAnnotation(XmlAttribute.class);\n                if (at == null) {\n                    QName fname = new QName(namespace, f.getName());\n                    ReflectionUtil.setAccessible(f);\n                    if (JAXBSchemaInitializer.isArray(f.getGenericType())) {\n                        writeArrayObject(marshaller, writer, fname, f.get(elValue));\n                    } else {\n                        Object o = Utils.getFieldValue(f, elValue); \n                        writeObject(marshaller, writer, newJAXBElement(fname, String.class, o));\n                    }\n                }\n            }\n            for (Method m : Utils.getGetters(cls, accessType)) {\n                int idx = m.getName().startsWith(\"get\") ? 3 : 2;\n                String name = m.getName().substring(idx);\n                name = Character.toLowerCase(name.charAt(0)) + name.substring(1);\n                QName mname = new QName(namespace, name);\n                if (JAXBSchemaInitializer.isArray(m.getGenericReturnType())) {\n                    writeArrayObject(marshaller, writer, mname, m.invoke(elValue));\n                } else {\n                    Object o = Utils.getMethodValue(m, elValue); \n                    writeObject(marshaller, writer, newJAXBElement(mname, String.class, o));\n                }\n            }\n\n            writer.writeEndElement();\n            writer.flush();\n        } catch (Exception e) {\n            throw new Fault(new Message(\"MARSHAL_ERROR\", LOG, e.getMessage()), e);\n        } finally {\n            StaxUtils.close(writer);\n        }\n    }","commit_id":"fb3ea2d8087d60430496cc97f9d1e67117497764","url":"https://github.com/apache/cxf"},{"original_method":"public static Exception unmarshallException(Unmarshaller u, \n                                                Object source,\n                                                MessagePartInfo part) {\n        XMLStreamReader reader;\n        if (source instanceof XMLStreamReader) {\n            reader = (XMLStreamReader)source;\n        } else if (source instanceof Element) {\n            reader = StaxUtils.createXMLStreamReader((Element)source);\n            try {\n                // advance into the node\n                reader.nextTag();\n            } catch (XMLStreamException e) {\n                // ignore\n            }\n        } else {\n            throw new Fault(new Message(\"UNKNOWN_SOURCE\", LOG, source.getClass().getName()));\n        }\n        try {\n            QName qn = part.getElementQName();\n            if (!qn.equals(reader.getName())) {\n                throw new Fault(new Message(\"ELEMENT_NAME_MISMATCH\", LOG, qn, reader.getName()));\n            }\n\n            Class<?> cls = part.getTypeClass();\n            Object obj = null;\n            try {\n                Constructor<?> cons = cls.getConstructor();\n                obj = cons.newInstance();\n            } catch (NoSuchMethodException nse) {\n                Constructor<?> cons = cls.getConstructor(new Class[] {String.class});\n                obj = cons.newInstance(new Object[1]);\n            }\n\n            XmlAccessorType accessorType = cls.getAnnotation(XmlAccessorType.class);\n            if (accessorType == null && cls.getPackage() != null) {\n                accessorType = cls.getPackage().getAnnotation(XmlAccessorType.class);\n            }\n            XmlAccessType accessType = accessorType != null\n                ? accessorType.value() : XmlAccessType.PUBLIC_MEMBER;\n            reader.nextTag();\n            while (reader.getEventType() == XMLStreamReader.START_ELEMENT) {\n                QName q = reader.getName();\n                try {\n                    Field f = ReflectionUtil.getDeclaredField(cls, q.getLocalPart());\n                    if (f == null) {\n                        f = cls.getField(q.getLocalPart());\n                    }\n                    Type type = f.getGenericType();\n                    if (JAXBContextInitializer.isFieldAccepted(f, accessType)) {\n                        ReflectionUtil.setAccessible(f);\n                        if (JAXBSchemaInitializer.isArray(type)) {\n                            Class<?> compType = JAXBSchemaInitializer\n                                .getArrayComponentType(type);\n                            List<Object> ret = unmarshallArray(u, reader,\n                                                               q,\n                                                               compType,\n                                                               createList(type));\n                            Object o = ret;\n                            if (!isList(type)) {\n                                if (compType.isPrimitive()) {\n                                    o = java.lang.reflect.Array.newInstance(compType, ret.size());\n                                    for (int x = 0; x < ret.size(); x++) {\n                                        Array.set(o, x, ret.get(x));\n                                    }\n                                } else {\n                                    o = ret.toArray((Object[])Array.newInstance(compType, ret.size()));\n                                }\n                            }\n\n                            f.set(obj, o);\n                        } else {\n                            Object o = getElementValue(u.unmarshal(reader, getFieldType(f)));\n                            setFieldValue(f, obj, o);\n                        }\n                    } else {\n                        throw new NoSuchFieldException(\"No accessible field \" + q.getLocalPart());\n                    }\n                } catch (NoSuchFieldException ex) {\n                    String s = Character.toUpperCase(q.getLocalPart().charAt(0))\n                               + q.getLocalPart().substring(1);\n                    Method m = null;\n                    try {\n                        m = cls.getMethod(\"get\" + s);\n                    } catch (NoSuchMethodException mex) {\n                        m = cls.getMethod(\"is\" + s);\n                    }\n                    Type type = m.getGenericReturnType();\n                    Method m2 = cls.getMethod(\"set\" + s, m.getReturnType());\n                    if (JAXBSchemaInitializer.isArray(type)) {\n                        Class<?> compType = JAXBSchemaInitializer\n                            .getArrayComponentType(type);\n                        List<Object> ret = unmarshallArray(u, reader,\n                                                           q,\n                                                           compType,\n                                                           createList(type));\n                        Object o = ret;\n                        if (!isList(type)) {\n                            if (compType.isPrimitive()) {\n                                o = java.lang.reflect.Array.newInstance(compType, ret.size());\n                                for (int x = 0; x < ret.size(); x++) {\n                                    Array.set(o, x, ret.get(x));\n                                }\n                            } else {\n                                o = ret.toArray((Object[])Array.newInstance(compType, ret.size()));\n                            }\n                        }\n\n                        m2.invoke(obj, o);\n                    } else {\n                        Object o = getElementValue(u.unmarshal(reader, getMethodReturnType(m)));\n                        setMethodValue(m, m2, obj, o);\n                    }\n                }\n            }\n            return (Exception)obj;\n        } catch (Exception e) {\n            throw new Fault(new Message(\"MARSHAL_ERROR\", LOG, e.getMessage()), e);\n        }\n    }","id":96799,"modified_method":"public static Exception unmarshallException(Unmarshaller u, \n                                                Object source,\n                                                MessagePartInfo part) {\n        XMLStreamReader reader;\n        if (source instanceof XMLStreamReader) {\n            reader = (XMLStreamReader)source;\n        } else if (source instanceof Element) {\n            reader = StaxUtils.createXMLStreamReader((Element)source);\n            try {\n                // advance into the node\n                reader.nextTag();\n            } catch (XMLStreamException e) {\n                // ignore\n            }\n        } else {\n            throw new Fault(new Message(\"UNKNOWN_SOURCE\", LOG, source.getClass().getName()));\n        }\n        try {\n            QName qn = part.getElementQName();\n            if (!qn.equals(reader.getName())) {\n                throw new Fault(new Message(\"ELEMENT_NAME_MISMATCH\", LOG, qn, reader.getName()));\n            }\n\n            Class<?> cls = part.getTypeClass();\n            Object obj = null;\n            try {\n                Constructor<?> cons = cls.getConstructor();\n                obj = cons.newInstance();\n            } catch (NoSuchMethodException nse) {\n                Constructor<?> cons = cls.getConstructor(new Class[] {String.class});\n                obj = cons.newInstance(new Object[1]);\n            }\n\n            XmlAccessType accessType = Utils.getXmlAccessType(cls);\n            reader.nextTag();\n            while (reader.getEventType() == XMLStreamReader.START_ELEMENT) {\n                QName q = reader.getName();\n                String fieldName = q.getLocalPart();\n                Field f = Utils.getField(cls, accessType, fieldName);\n                if (f != null) {\n                    Type type = f.getGenericType();\n                    f.setAccessible(true);\n                    if (JAXBSchemaInitializer.isArray(type)) {\n                        Class<?> compType = JAXBSchemaInitializer.getArrayComponentType(type);\n                        List<Object> ret = unmarshallArray(u, reader, q, compType, createList(type));\n                        Object o = ret;\n                        if (!isList(type)) {\n                            if (compType.isPrimitive()) {\n                                o = java.lang.reflect.Array.newInstance(compType, ret.size());\n                                for (int x = 0; x < ret.size(); x++) {\n                                    Array.set(o, x, ret.get(x));\n                                }\n                            } else {\n                                o = ret.toArray((Object[]) Array.newInstance(compType, ret.size()));\n                            }\n                        }\n\n                        f.set(obj, o);\n                    } else {\n                        Object o = getElementValue(u.unmarshal(reader, Utils.getFieldType(f)));\n                        Utils.setFieldValue(f, obj, o);\n                    }\n                } else {\n                    String s = Character.toUpperCase(q.getLocalPart().charAt(0))\n                               + q.getLocalPart().substring(1);\n                    Method m = Utils.getMethod(cls, accessType, \"get\" + s);\n                    if (m == null) {\n                        m = Utils.getMethod(cls, accessType, \"is\" + s);\n                    }\n                    Type type = m.getGenericReturnType();\n                    Method m2 = Utils.getMethod(cls, accessType, \"set\" + s, m.getReturnType());\n                    if (JAXBSchemaInitializer.isArray(type)) {\n                        Class<?> compType = JAXBSchemaInitializer\n                            .getArrayComponentType(type);\n                        List<Object> ret = unmarshallArray(u, reader,\n                                                           q,\n                                                           compType,\n                                                           createList(type));\n                        Object o = ret;\n                        if (!isList(type)) {\n                            if (compType.isPrimitive()) {\n                                o = java.lang.reflect.Array.newInstance(compType, ret.size());\n                                for (int x = 0; x < ret.size(); x++) {\n                                    Array.set(o, x, ret.get(x));\n                                }\n                            } else {\n                                o = ret.toArray((Object[])Array.newInstance(compType, ret.size()));\n                            }\n                        }\n\n                        m2.invoke(obj, o);\n                    } else {\n                        Object o = getElementValue(u.unmarshal(reader, Utils.getMethodReturnType(m)));\n                        Utils.setMethodValue(m, m2, obj, o);\n                    }\n                }\n            }\n            return (Exception)obj;\n        } catch (Exception e) {\n            throw new Fault(new Message(\"MARSHAL_ERROR\", LOG, e.getMessage()), e);\n        }\n    }","commit_id":"fb3ea2d8087d60430496cc97f9d1e67117497764","url":"https://github.com/apache/cxf"},{"original_method":"private void buildExceptionType(MessagePartInfo part, Class<?> cls) {\n        SchemaInfo schemaInfo = null;\n        for (SchemaInfo s : serviceInfo.getSchemas()) {\n            if (s.getNamespaceURI().equals(part.getElementQName().getNamespaceURI())) {\n                schemaInfo = s;\n                break;\n            }\n        }\n        XmlType xmlTypeAnno = cls.getAnnotation(XmlType.class);\n        boolean respectXmlTypeNS = false;\n        XmlSchema faultBeanSchema = null;\n        if (xmlTypeAnno != null && !StringUtils.isEmpty(xmlTypeAnno.namespace()) \n            && !xmlTypeAnno.namespace().equals(part.getElementQName().getNamespaceURI())) {\n            respectXmlTypeNS = true;\n            NamespaceMap nsMap = new NamespaceMap();\n            nsMap.add(WSDLConstants.CONVENTIONAL_TNS_PREFIX, xmlTypeAnno.namespace());\n            nsMap.add(WSDLConstants.NP_SCHEMA_XSD, WSDLConstants.NS_SCHEMA_XSD);\n            \n            SchemaInfo faultBeanSchemaInfo = createSchemaIfNeeded(xmlTypeAnno.namespace(), nsMap);\n            faultBeanSchema = faultBeanSchemaInfo.getSchema();            \n        }\n        \n        XmlSchema schema = null;\n        if (schemaInfo == null) {\n            NamespaceMap nsMap = new NamespaceMap();\n            nsMap.add(WSDLConstants.CONVENTIONAL_TNS_PREFIX, part.getElementQName().getNamespaceURI());\n            nsMap.add(WSDLConstants.NP_SCHEMA_XSD, WSDLConstants.NS_SCHEMA_XSD);\n            schemaInfo = createSchemaIfNeeded(part.getElementQName().getNamespaceURI(), nsMap);\n\n        } \n        schema = schemaInfo.getSchema();\n       \n\n        // Before updating everything, make sure we haven't added this\n        // type yet.  Multiple methods that throw the same exception\n        // types will cause duplicates.\n        String faultTypeName = xmlTypeAnno != null && !StringUtils.isEmpty(xmlTypeAnno.name()) \n               ? xmlTypeAnno.name()  :  part.getElementQName().getLocalPart();\n        XmlSchemaType existingType = schema.getTypeByName(faultTypeName);\n        if (existingType != null) {\n            return;\n        }\n\n        XmlSchemaElement el = new XmlSchemaElement(schema, true);\n        el.setName(part.getElementQName().getLocalPart());\n        part.setXmlSchema(el);\n        schemaInfo.setElement(null);\n        \n        if (respectXmlTypeNS) {\n            schema = faultBeanSchema; //create complexType in the new created schema for xmlType\n        }\n        \n        XmlSchemaComplexType ct = new XmlSchemaComplexType(schema, true);\n        ct.setName(faultTypeName);\n\n        el.setSchemaTypeName(ct.getQName());\n\n        XmlSchemaSequence seq = new XmlSchemaSequence();\n        ct.setParticle(seq);\n        String namespace = part.getElementQName().getNamespaceURI();\n\n        XmlAccessorType accessorType = cls.getAnnotation(XmlAccessorType.class);\n        if (accessorType == null && cls.getPackage() != null) {\n            accessorType = cls.getPackage().getAnnotation(XmlAccessorType.class);\n        }\n        XmlAccessType accessType = accessorType != null ? accessorType.value() : XmlAccessType.PUBLIC_MEMBER;\n\n\n        for (Field f : cls.getDeclaredFields()) {\n            if (JAXBContextInitializer.isFieldAccepted(f, accessType)) {\n                //map field\n                Type type = getFieldType(f);\n                JAXBBeanInfo beanInfo = getBeanInfo(type);\n                if (beanInfo != null) {\n                    addElement(schema, seq, beanInfo, new QName(namespace, f.getName()), isArray(type));\n                }\n            }\n        }\n        for (Method m : cls.getMethods()) {\n            if (JAXBContextInitializer.isMethodAccepted(m, accessType)) {\n                //map method\n                Type type = getMethodReturnType(m);\n                JAXBBeanInfo beanInfo = getBeanInfo(type);\n                if (beanInfo != null) {\n                    int idx = m.getName().startsWith(\"get\") ? 3 : 2;\n                    String name = m.getName().substring(idx);\n                    name = Character.toLowerCase(name.charAt(0)) + name.substring(1);\n                    addElement(schema, seq, beanInfo, new QName(namespace, name), isArray(type));\n                }\n            }\n        }\n        // Create element in xsd:sequence for Exception.class\n        if (cls.equals(Exception.class)) {\n            JAXBBeanInfo beanInfo = getBeanInfo(java.lang.String.class);\n            XmlSchemaElement exEle = new XmlSchemaElement(schema, false);\n            exEle.setName(\"message\");\n            exEle.setSchemaTypeName(getTypeName(beanInfo));\n            exEle.setMinOccurs(0);\n            seq.getItems().add(exEle);\n\n        }\n        schemas.addCrossImports();\n        part.setProperty(JAXBDataBinding.class.getName() + \".CUSTOM_EXCEPTION\", Boolean.TRUE);\n    }","id":96800,"modified_method":"private void buildExceptionType(MessagePartInfo part, Class<?> cls) {\n        SchemaInfo schemaInfo = null;\n        for (SchemaInfo s : serviceInfo.getSchemas()) {\n            if (s.getNamespaceURI().equals(part.getElementQName().getNamespaceURI())) {\n                schemaInfo = s;\n                break;\n            }\n        }\n        XmlType xmlTypeAnno = cls.getAnnotation(XmlType.class);\n        boolean respectXmlTypeNS = false;\n        XmlSchema faultBeanSchema = null;\n        if (xmlTypeAnno != null && !StringUtils.isEmpty(xmlTypeAnno.namespace()) \n            && !xmlTypeAnno.namespace().equals(part.getElementQName().getNamespaceURI())) {\n            respectXmlTypeNS = true;\n            NamespaceMap nsMap = new NamespaceMap();\n            nsMap.add(WSDLConstants.CONVENTIONAL_TNS_PREFIX, xmlTypeAnno.namespace());\n            nsMap.add(WSDLConstants.NP_SCHEMA_XSD, WSDLConstants.NS_SCHEMA_XSD);\n            \n            SchemaInfo faultBeanSchemaInfo = createSchemaIfNeeded(xmlTypeAnno.namespace(), nsMap);\n            faultBeanSchema = faultBeanSchemaInfo.getSchema();            \n        }\n        \n        XmlSchema schema = null;\n        if (schemaInfo == null) {\n            NamespaceMap nsMap = new NamespaceMap();\n            nsMap.add(WSDLConstants.CONVENTIONAL_TNS_PREFIX, part.getElementQName().getNamespaceURI());\n            nsMap.add(WSDLConstants.NP_SCHEMA_XSD, WSDLConstants.NS_SCHEMA_XSD);\n            schemaInfo = createSchemaIfNeeded(part.getElementQName().getNamespaceURI(), nsMap);\n\n        } \n        schema = schemaInfo.getSchema();\n       \n\n        // Before updating everything, make sure we haven't added this\n        // type yet.  Multiple methods that throw the same exception\n        // types will cause duplicates.\n        String faultTypeName = xmlTypeAnno != null && !StringUtils.isEmpty(xmlTypeAnno.name()) \n               ? xmlTypeAnno.name()  :  part.getElementQName().getLocalPart();\n        XmlSchemaType existingType = schema.getTypeByName(faultTypeName);\n        if (existingType != null) {\n            return;\n        }\n\n        XmlSchemaElement el = new XmlSchemaElement(schema, true);\n        el.setName(part.getElementQName().getLocalPart());\n        part.setXmlSchema(el);\n        schemaInfo.setElement(null);\n        \n        if (respectXmlTypeNS) {\n            schema = faultBeanSchema; //create complexType in the new created schema for xmlType\n        }\n        \n        XmlSchemaComplexType ct = new XmlSchemaComplexType(schema, true);\n        ct.setName(faultTypeName);\n\n        el.setSchemaTypeName(ct.getQName());\n\n        XmlSchemaSequence seq = new XmlSchemaSequence();\n        ct.setParticle(seq);\n        String namespace = part.getElementQName().getNamespaceURI();\n        XmlAccessType accessType = Utils.getXmlAccessType(cls);\n\n        for (Field f : Utils.getFields(cls, accessType)) {\n            //map field\n            Type type = Utils.getFieldType(f);\n            JAXBBeanInfo beanInfo = getBeanInfo(type);\n            if (beanInfo != null) {\n                addElement(schema, seq, beanInfo, new QName(namespace, f.getName()), isArray(type));\n            }\n        }\n        for (Method m : Utils.getGetters(cls, accessType)) {\n            //map method\n            Type type = Utils.getMethodReturnType(m);\n            JAXBBeanInfo beanInfo = getBeanInfo(type);\n            if (beanInfo != null) {\n                int idx = m.getName().startsWith(\"get\") ? 3 : 2;\n                String name = m.getName().substring(idx);\n                name = Character.toLowerCase(name.charAt(0)) + name.substring(1);\n                addElement(schema, seq, beanInfo, new QName(namespace, name), isArray(type));\n            }\n        }\n        // Create element in xsd:sequence for Exception.class\n        if (cls.equals(Exception.class)) {\n            JAXBBeanInfo beanInfo = getBeanInfo(java.lang.String.class);\n            XmlSchemaElement exEle = new XmlSchemaElement(schema, false);\n            exEle.setName(\"message\");\n            exEle.setSchemaTypeName(getTypeName(beanInfo));\n            exEle.setMinOccurs(0);\n            seq.getItems().add(exEle);\n\n        }\n        schemas.addCrossImports();\n        part.setProperty(JAXBDataBinding.class.getName() + \".CUSTOM_EXCEPTION\", Boolean.TRUE);\n    }","commit_id":"fb3ea2d8087d60430496cc97f9d1e67117497764","url":"https://github.com/apache/cxf"},{"original_method":"public void apply(final ProjectInternal project) {\n        project.getPlugins().apply(BasePlugin.class);\n\n        Instantiator instantiator = project.getServices().get(Instantiator.class);\n        project.getExtensions().add(\"compilers\", instantiator.newInstance(\n                DefaultCompilerRegistry.class,\n                instantiator\n        ));\n        DefaultCompilerRegistry registry = project.getExtensions().getByType(DefaultCompilerRegistry.class);\n\n        project.getExtensions().add(\"executables\", instantiator.newInstance(\n                FactoryNamedDomainObjectContainer.class,\n                Executable.class,\n                instantiator,\n                new ReflectiveNamedDomainObjectFactory<Executable>(DefaultExecutable.class, project, registry)\n        ));\n        project.getExtensions().add(\"libraries\", instantiator.newInstance(\n                FactoryNamedDomainObjectContainer.class,\n                Library.class,\n                instantiator,\n                new ReflectiveNamedDomainObjectFactory<Library>(DefaultLibrary.class, project, registry)\n        ));\n    }","id":96801,"modified_method":"public void apply(final ProjectInternal project) {\n        project.getPlugins().apply(BasePlugin.class);\n\n        Instantiator instantiator = project.getServices().get(Instantiator.class);\n        project.getExtensions().create(\"compilers\",\n                DefaultCompilerRegistry.class,\n                instantiator\n        );\n        DefaultCompilerRegistry registry = project.getExtensions().getByType(DefaultCompilerRegistry.class);\n\n        project.getExtensions().create(\"executables\",\n                FactoryNamedDomainObjectContainer.class,\n                Executable.class,\n                instantiator,\n                new ReflectiveNamedDomainObjectFactory<Executable>(DefaultExecutable.class, project, registry)\n        );\n        project.getExtensions().create(\"libraries\",\n                FactoryNamedDomainObjectContainer.class,\n                Library.class,\n                instantiator,\n                new ReflectiveNamedDomainObjectFactory<Library>(DefaultLibrary.class, project, registry)\n        );\n    }","commit_id":"ee1f34b7f431f6446216912cc2d1134ab3d1816b","url":"https://github.com/gradle/gradle"},{"original_method":"public void apply(ProjectInternal project) {\n        Convention convention = project.getConvention();\n        ReportingExtension extension = project.getServices().get(Instantiator.class).newInstance(ReportingExtension.class, project);\n        project.getExtensions().add(ReportingExtension.NAME, extension);\n\n        // This convention is deprecated\n        convention.getPlugins().put(\"reportingBase\", new ReportingBasePluginConvention(project, extension));\n    }","id":96802,"modified_method":"public void apply(ProjectInternal project) {\n        Convention convention = project.getConvention();\n        ReportingExtension extension = project.getExtensions().create(ReportingExtension.NAME, ReportingExtension.class, project);\n\n        // This convention is deprecated\n        convention.getPlugins().put(\"reportingBase\", new ReportingBasePluginConvention(project, extension));\n    }","commit_id":"ee1f34b7f431f6446216912cc2d1134ab3d1816b","url":"https://github.com/gradle/gradle"},{"original_method":"public void apply(Project project) {\n        ProjectSourceSet sourceSets = instantiator.newInstance(DefaultProjectSourceSet.class, instantiator);\n        project.getExtensions().add(\"sources\", sourceSets);\n    }","id":96803,"modified_method":"public void apply(Project project) {\n        project.getExtensions().create(\"sources\", DefaultProjectSourceSet.class, instantiator);\n    }","commit_id":"8aa2bdab277b6863743a6189e3d0916191ab2ef0","url":"https://github.com/gradle/gradle"},{"original_method":"/**\n     * Initialize execution context for the current thread.\n     * \n     * @return the new execution context\n     * @throws ExecutionContextException error when try to initialize execution context\n     */\n    protected ExecutionContext initExecutionContext() throws ExecutionContextException\n    {\n        ExecutionContextManager ecim = Utils.getComponent(ExecutionContextManager.class);\n        Execution execution = Utils.getComponent(Execution.class);\n\n        ExecutionContext ec = new ExecutionContext();\n\n        ecim.initialize(ec);\n\n        ec.setProperties(this.properties);\n\n        execution.setContext(ec);\n\n        return ec;\n    }","id":96804,"modified_method":"/**\n     * Initialize execution context for the current thread.\n     * \n     * @return the new execution context\n     * @throws ExecutionContextException error when try to initialize execution context\n     */\n    protected ExecutionContext initExecutionContext() throws ExecutionContextException\n    {\n        ExecutionContextManager ecim = Utils.getComponent(ExecutionContextManager.class);\n        Execution execution = Utils.getComponent(Execution.class);\n\n        // Set the EC in the Execution component so that any Execution Context Initializer can be injected the\n        // Execution component.\n        execution.setContext(new ExecutionContext());\n\n        ecim.initialize(execution.getContext());\n\n        execution.getContext().setProperties(this.properties);\n\n        return execution.getContext();\n    }","commit_id":"732378f8974422d189e7ef5b4ed766170624c477","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"protected XWikiContext createXWikiContext() throws MojoExecutionException\n    {\n        EmbeddableComponentManager ecm = new EmbeddableComponentManager();\n        ecm.initialize(this.getClass().getClassLoader());\n        Utils.setComponentManager(ecm);\n\n        // We need to initialize the Component Manager so that the components can be looked up\n        XWikiContext context = new XWikiContext();\n        context.put(ComponentManager.class.getName(), ecm);\n\n        // Initialize the Container fields (request, response, session).\n        ExecutionContextManager ecim = Utils.getComponent(ExecutionContextManager.class);\n        Execution execution = Utils.getComponent(Execution.class);\n        try {\n            ExecutionContext ec = new ExecutionContext();\n\n            // Bridge with old XWiki Context, required for old code.\n            ec.setProperty(\"xwikicontext\", context);\n\n            ecim.initialize(ec);\n            execution.setContext(ec);\n        } catch (ExecutionContextException e) {\n            throw new MojoExecutionException(\"Failed to initialize Execution Context.\", e);\n        }\n\n        return context;\n    }","id":96805,"modified_method":"protected XWikiContext createXWikiContext() throws MojoExecutionException\n    {\n        EmbeddableComponentManager ecm = new EmbeddableComponentManager();\n        ecm.initialize(this.getClass().getClassLoader());\n        Utils.setComponentManager(ecm);\n\n        // We need to initialize the Component Manager so that the components can be looked up\n        XWikiContext context = new XWikiContext();\n        context.put(ComponentManager.class.getName(), ecm);\n\n        // Initialize the Container fields (request, response, session).\n        ExecutionContextManager ecim = Utils.getComponent(ExecutionContextManager.class);\n        Execution execution = Utils.getComponent(Execution.class);\n        try {\n            // Set the EC in the Execution component so that any Execution Context Initializer can be injected the\n            // Execution component.\n            execution.setContext(new ExecutionContext());\n\n            // Bridge with old XWiki Context, required for old code.\n            execution.getContext().setProperty(\"xwikicontext\", context);\n\n            ecim.initialize(execution.getContext());\n        } catch (ExecutionContextException e) {\n            throw new MojoExecutionException(\"Failed to initialize Execution Context.\", e);\n        }\n\n        return context;\n    }","commit_id":"da09001c85fa089944085be1af367437e1c8541a","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * {@inheritDoc}\n     * \n     * @see org.quartz.Job#execute(org.quartz.JobExecutionContext)\n     */\n    public final void execute(JobExecutionContext jobContext) throws JobExecutionException\n    {\n        JobDataMap data = jobContext.getJobDetail().getJobDataMap();\n\n        // The XWiki context was saved in the Job execution data map. Get it as we'll retrieve\n        // the script to execute from it.\n        XWikiContext xwikiContext = (XWikiContext) data.get(\"context\");\n\n        // Init execution context\n        Execution execution;\n        try {\n            ExecutionContextManager ecim = Utils.getComponent(ExecutionContextManager.class);\n            execution = Utils.getComponent(Execution.class);\n\n            ExecutionContext ec = new ExecutionContext();\n            // Bridge with old XWiki Context, required for old code.\n            ec.setProperty(\"xwikicontext\", xwikiContext);\n\n            ecim.initialize(ec);\n            execution.setContext(ec);\n        } catch (ExecutionContextException e) {\n            throw new JobExecutionException(\"Fail to initialize execution context\", e);\n        }\n\n        try {\n            // Execute the job\n            executeJob(jobContext);\n        } finally {\n            // We must ensure we clean the ThreadLocal variables located in the Execution\n            // component as otherwise we will have a potential memory leak.\n            execution.removeContext();\n        }\n    }","id":96806,"modified_method":"@Override\n    public final void execute(JobExecutionContext jobContext) throws JobExecutionException\n    {\n        JobDataMap data = jobContext.getJobDetail().getJobDataMap();\n\n        // The XWiki context was saved in the Job execution data map. Get it as we'll retrieve\n        // the script to execute from it.\n        XWikiContext xwikiContext = (XWikiContext) data.get(\"context\");\n\n        // Init execution context\n        Execution execution;\n        try {\n            ExecutionContextManager ecim = Utils.getComponent(ExecutionContextManager.class);\n            execution = Utils.getComponent(Execution.class);\n\n            // Make sure we set Execution Context in the Execution component before we call the initialization\n            // so that we don't get any NPE if some initializer code asks to get the Execution Context. This\n            // happens for example with the Velocity Execution Context initializer which in turns calls the Velocity\n            // Context initializers and some of them look inside the Execution Context.\n            execution.setContext(new ExecutionContext());\n\n            // Bridge with old XWiki Context, required for old code.\n            execution.getContext().setProperty(\"xwikicontext\", xwikiContext);\n\n            ecim.initialize(execution.getContext());\n        } catch (ExecutionContextException e) {\n            throw new JobExecutionException(\"Fail to initialize execution context\", e);\n        }\n\n        try {\n            // Execute the job\n            executeJob(jobContext);\n        } finally {\n            // We must ensure we clean the ThreadLocal variables located in the Execution\n            // component as otherwise we will have a potential memory leak.\n            execution.removeContext();\n        }\n    }","commit_id":"310a634dbb40c387db9c9174f181434a27ef4f40","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * @param databaseName some database name (TODO: find out what this name is really)\n     * @param hibernateConfig the Hibernate config fill containing the database definition (JDBC driver, username and\n     *            password, etc)\n     * @return a valid XWikiContext using the passed Hibernate configuration and passed database name\n     * @throws Exception failed to initialize context.\n     * @todo Replace the Hibernate config file with a list of parameters required for the packaging operation\n     */\n    protected XWikiContext createXWikiContext(String databaseName, File hibernateConfig) throws Exception\n    {\n        EmbeddableComponentManager ecm = new EmbeddableComponentManager();\n        ecm.initialize(this.getClass().getClassLoader());\n        Utils.setComponentManager(ecm);\n\n        // We need to initialize the Component Manager so that the components can be looked up\n        XWikiContext context = new XWikiContext();\n        context.put(ComponentManager.class.getName(), ecm);\n\n        // Initialize the Container fields (request, response, session).\n        ExecutionContextManager ecim = Utils.getComponent(ExecutionContextManager.class);\n        Execution execution = Utils.getComponent(Execution.class);\n        try {\n            ExecutionContext ec = new ExecutionContext();\n\n            // Bridge with old XWiki Context, required for old code.\n            ec.setProperty(\"xwikicontext\", context);\n\n            ecim.initialize(ec);\n            execution.setContext(ec);\n        } catch (ExecutionContextException e) {\n            throw new Exception(\"Failed to initialize Execution Context.\", e);\n        }\n        \n        context.setUser(\"XWiki.superadmin\");\n        context.setDatabase(databaseName);\n        context.setMainXWiki(databaseName);\n\n        // Use a dummy Request even in daemon mode so that XWiki's initialization can create a Servlet URL Factory.\n        context.setRequest(new XWikiServletRequestStub());\n\n        // Use a dummy URL so that XWiki's initialization can create a Servlet URL Factory. We could also have\n        // registered a custom XWikiURLFactory against XWikiURLFactoryService but it's more work.\n        context.setURL(new URL(\"http://localhost/xwiki/bin/DummyAction/DumySpace/DummyPage\"));\n\n        // Set a dummy Document in the context to act as the current document since when a document containing\n        // objects is imported it'll generate Object diff events and the algorithm to compute an object diff\n        // currently requires rendering object properties, which requires a current document in the context.\n        context.setDoc(new XWikiDocument(new DocumentReference(databaseName, \"dummySpace\", \"dummyPage\")));\n\n        XWikiConfig config = new XWikiConfig();\n        config.put(\"xwiki.store.class\", \"com.xpn.xwiki.store.XWikiHibernateStore\");\n\n        // The XWikiConfig object requires path to be in unix format (i.e. with forward slashes)\n        String hibernateConfigInUnixFormat = hibernateConfig.getPath().replace('\\\\', '/');\n        config.put(\"xwiki.store.hibernate.path\", hibernateConfigInUnixFormat);\n\n        config.put(\"xwiki.store.hibernate.updateschema\", \"1\");\n        config.put(\"xwiki.virtual\", \"1\");\n\n        // Enable backlinks so that when documents are imported their backlinks will be saved too\n        config.put(\"xwiki.backlinks\", \"1\");\n\n        new XWiki(config, context, null, true);\n\n        try {\n            context.setURLFactory(new XWikiServletURLFactory(new URL(\"http://localhost:8080\"), \"xwiki/\", \"bin/\"));\n        } catch (MalformedURLException e) {\n            // TODO: Remove that way of creating exceptions in XWiki as it's a real plain and\n            // doesn't work with external code.\n            throw new XWikiException(XWikiException.MODULE_XWIKI_PLUGINS, XWikiException.ERROR_XWIKI_UNKNOWN,\n                \"Failed to set up URL Factory\", e);\n        }\n\n        return context;\n    }","id":96807,"modified_method":"/**\n     * @param databaseName some database name (TODO: find out what this name is really)\n     * @param hibernateConfig the Hibernate config fill containing the database definition (JDBC driver, username and\n     *            password, etc)\n     * @return a valid XWikiContext using the passed Hibernate configuration and passed database name\n     * @throws Exception failed to initialize context.\n     * @todo Replace the Hibernate config file with a list of parameters required for the packaging operation\n     */\n    protected XWikiContext createXWikiContext(String databaseName, File hibernateConfig) throws Exception\n    {\n        EmbeddableComponentManager ecm = new EmbeddableComponentManager();\n        ecm.initialize(this.getClass().getClassLoader());\n        Utils.setComponentManager(ecm);\n\n        // We need to initialize the Component Manager so that the components can be looked up\n        XWikiContext context = new XWikiContext();\n        context.put(ComponentManager.class.getName(), ecm);\n\n        // Initialize the Container fields (request, response, session).\n        ExecutionContextManager ecim = Utils.getComponent(ExecutionContextManager.class);\n        Execution execution = Utils.getComponent(Execution.class);\n        try {\n            // Make sure we set Execution Context in the Execution component before we call the initialization\n            // so that we don't get any NPE if some initializer code asks to get the Execution Context. This\n            // happens for example with the Velocity Execution Context initializer which in turns calls the Velocity\n            // Context initializers and some of them look inside the Execution Context.\n            execution.setContext(new ExecutionContext());\n\n            // Bridge with old XWiki Context, required for old code.\n            execution.getContext().setProperty(\"xwikicontext\", context);\n\n            ecim.initialize(execution.getContext());\n        } catch (ExecutionContextException e) {\n            throw new Exception(\"Failed to initialize Execution Context.\", e);\n        }\n        \n        context.setUser(\"XWiki.superadmin\");\n        context.setDatabase(databaseName);\n        context.setMainXWiki(databaseName);\n\n        // Use a dummy Request even in daemon mode so that XWiki's initialization can create a Servlet URL Factory.\n        context.setRequest(new XWikiServletRequestStub());\n\n        // Use a dummy URL so that XWiki's initialization can create a Servlet URL Factory. We could also have\n        // registered a custom XWikiURLFactory against XWikiURLFactoryService but it's more work.\n        context.setURL(new URL(\"http://localhost/xwiki/bin/DummyAction/DumySpace/DummyPage\"));\n\n        // Set a dummy Document in the context to act as the current document since when a document containing\n        // objects is imported it'll generate Object diff events and the algorithm to compute an object diff\n        // currently requires rendering object properties, which requires a current document in the context.\n        context.setDoc(new XWikiDocument(new DocumentReference(databaseName, \"dummySpace\", \"dummyPage\")));\n\n        XWikiConfig config = new XWikiConfig();\n        config.put(\"xwiki.store.class\", \"com.xpn.xwiki.store.XWikiHibernateStore\");\n\n        // The XWikiConfig object requires path to be in unix format (i.e. with forward slashes)\n        String hibernateConfigInUnixFormat = hibernateConfig.getPath().replace('\\\\', '/');\n        config.put(\"xwiki.store.hibernate.path\", hibernateConfigInUnixFormat);\n\n        config.put(\"xwiki.store.hibernate.updateschema\", \"1\");\n        config.put(\"xwiki.virtual\", \"1\");\n\n        // Enable backlinks so that when documents are imported their backlinks will be saved too\n        config.put(\"xwiki.backlinks\", \"1\");\n\n        new XWiki(config, context, null, true);\n\n        try {\n            context.setURLFactory(new XWikiServletURLFactory(new URL(\"http://localhost:8080\"), \"xwiki/\", \"bin/\"));\n        } catch (MalformedURLException e) {\n            // TODO: Remove that way of creating exceptions in XWiki as it's a real plain and\n            // doesn't work with external code.\n            throw new XWikiException(XWikiException.MODULE_XWIKI_PLUGINS, XWikiException.ERROR_XWIKI_UNKNOWN,\n                \"Failed to set up URL Factory\", e);\n        }\n\n        return context;\n    }","commit_id":"310a634dbb40c387db9c9174f181434a27ef4f40","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n     * Init provided {@link ExportURLFactory} and add rendered documents to ZIP stream.\n     * \n     * @param zos the ZIP output stream.\n     * @param tempdir the directory where to copy attached files.\n     * @param urlf the {@link com.xpn.xwiki.web.XWikiURLFactory} used to render the documents.\n     * @param context the XWiki context.\n     * @throws XWikiException error when render documents.\n     * @throws IOException error when render documents.\n     */\n    private void renderDocuments(ZipOutputStream zos, File tempdir, ExportURLFactory urlf, XWikiContext context)\n        throws XWikiException, IOException\n    {\n        ExecutionContextManager ecim = Utils.getComponent(ExecutionContextManager.class);\n        Execution execution = Utils.getComponent(Execution.class);\n\n        VelocityContext oldVelocityContext = (VelocityContext) context.get(\"vcontext\");\n\n        try {\n            XWikiContext renderContext = (XWikiContext) context.clone();\n            renderContext.put(\"action\", \"view\");\n\n            ExecutionContext ec = new ExecutionContext();\n\n            // Bridge with old XWiki Context, required for old code.\n            ec.setProperty(\"xwikicontext\", renderContext);\n\n            ecim.initialize(ec);\n\n            // Push a clean new Execution Context since we don't want the main Execution Context to be used for\n            // rendering the HTML pages to export. It's cleaner to isolate it as we do. Note that the new\n            // Execution Context automatically gets initialized with a new Velocity Context by\n            // the VelocityRequestInitializer class.\n            execution.pushContext(ec);\n\n            VelocityManager velocityManager = Utils.getComponent(VelocityManager.class);\n\n            // At this stage we have a clean Velocity Context\n            VelocityContext vcontext = velocityManager.getVelocityContext();\n\n            urlf.init(this.pages, tempdir, renderContext);\n            renderContext.setURLFactory(urlf);\n\n            for (String pageName : this.pages) {\n                renderDocument(pageName, zos, renderContext, vcontext);\n            }\n        } catch (ExecutionContextException e) {\n            throw new XWikiException(XWikiException.MODULE_XWIKI_EXPORT, XWikiException.ERROR_XWIKI_INIT_FAILED,\n                \"Failed to initialize Execution Context\", e);\n        } finally {\n            // We must ensure that the new request we've used is removed so that the current\n            // thread can continue to use its original Execution Context.\n            execution.popContext();\n\n            context.put(\"vcontext\", oldVelocityContext);\n        }\n    }","id":96808,"modified_method":"/**\n     * Init provided {@link ExportURLFactory} and add rendered documents to ZIP stream.\n     * \n     * @param zos the ZIP output stream.\n     * @param tempdir the directory where to copy attached files.\n     * @param urlf the {@link com.xpn.xwiki.web.XWikiURLFactory} used to render the documents.\n     * @param context the XWiki context.\n     * @throws XWikiException error when render documents.\n     * @throws IOException error when render documents.\n     */\n    private void renderDocuments(ZipOutputStream zos, File tempdir, ExportURLFactory urlf, XWikiContext context)\n        throws XWikiException, IOException\n    {\n        ExecutionContextManager ecim = Utils.getComponent(ExecutionContextManager.class);\n        Execution execution = Utils.getComponent(Execution.class);\n\n        VelocityContext oldVelocityContext = (VelocityContext) context.get(\"vcontext\");\n\n        try {\n            XWikiContext renderContext = (XWikiContext) context.clone();\n            renderContext.put(\"action\", \"view\");\n\n            // Push a clean new Execution Context since we don't want the main Execution Context to be used for\n            // rendering the HTML pages to export. It's cleaner to isolate it as we do. Note that the new\n            // Execution Context automatically gets initialized with a new Velocity Context by\n            // the VelocityRequestInitializer class.\n            execution.pushContext(new ExecutionContext());\n\n            // Bridge with old XWiki Context, required for old code.\n            execution.getContext().setProperty(\"xwikicontext\", renderContext);\n\n            ecim.initialize(execution.getContext());\n\n            VelocityManager velocityManager = Utils.getComponent(VelocityManager.class);\n\n            // At this stage we have a clean Velocity Context\n            VelocityContext vcontext = velocityManager.getVelocityContext();\n\n            urlf.init(this.pages, tempdir, renderContext);\n            renderContext.setURLFactory(urlf);\n\n            for (String pageName : this.pages) {\n                renderDocument(pageName, zos, renderContext, vcontext);\n            }\n        } catch (ExecutionContextException e) {\n            throw new XWikiException(XWikiException.MODULE_XWIKI_EXPORT, XWikiException.ERROR_XWIKI_INIT_FAILED,\n                \"Failed to initialize Execution Context\", e);\n        } finally {\n            // We must ensure that the new request we've used is removed so that the current\n            // thread can continue to use its original Execution Context.\n            execution.popContext();\n\n            context.put(\"vcontext\", oldVelocityContext);\n        }\n    }","commit_id":"310a634dbb40c387db9c9174f181434a27ef4f40","url":"https://github.com/xwiki/xwiki-platform"},{"original_method":"/**\n\t * Reads a serializable object from the systempropertys.\n\t * \n\t * @param name The name of the property.\n\t * \n\t * @return object The property-object.\n\t * \n\t * @exception CmsException Throws CmsException if something goes wrong.\n\t */\n\tpublic Serializable readProperty(String name)\n        throws CmsException {\n        \n        Serializable property=null;\n        byte[] value;\n        ResultSet res = null;\n        PreparedStatement statementPropertyRead = null;\n            \n        // create get the property data from the database\n    \ttry {\n          statementPropertyRead=m_pool.getPreparedStatement(C_SYSTEMPROPERTIES_READ_KEY);\n          statementPropertyRead.setString(1,name);\n          res = statementPropertyRead.executeQuery();\n          m_pool.putPreparedStatement(C_SYSTEMPROPERTIES_READ_KEY,statementPropertyRead);\n       \t\t\n          if(res.next()) {\n\t\t\t\tvalue = res.getBytes(C_SYSTEMPROPERTY_VALUE);\n                // now deserialize the object\n                ByteArrayInputStream bin= new ByteArrayInputStream(value);\n                ObjectInputStream oin = new ObjectInputStream(bin);\n                property=(Serializable)oin.readObject();                \n\t\t\t}\t\n\t\t}\n\t\tcatch (SQLException e){\n\t\t\t m_pool.putPreparedStatement(C_SYSTEMPROPERTIES_READ_KEY,statementPropertyRead);\n            throw new CmsException(\"[\"+this.getClass().getName()+\"]\"+e.getMessage(),CmsException.C_SQL_ERROR, e);\t\t\t\n\t\t}\t\n        catch (IOException e){\n\t\t\t m_pool.putPreparedStatement(C_SYSTEMPROPERTIES_READ_KEY,statementPropertyRead);\n            throw new CmsException(\"[\"+this.getClass().getName()+\"]\"+CmsException. C_SERIALIZATION, e);\t\t\t\n\t\t}\n\t    catch (ClassNotFoundException e){\n\t\t\t m_pool.putPreparedStatement(C_SYSTEMPROPERTIES_READ_KEY,statementPropertyRead);\n            throw new CmsException(\"[\"+this.getClass().getName()+\"]\"+CmsException. C_SERIALIZATION, e);\t\t\t\n\t\t}\t\n        return property;\n    }","id":96809,"modified_method":"/**\n\t * Reads a serializable object from the systempropertys.\n\t * \n\t * @param name The name of the property.\n\t * \n\t * @return object The property-object.\n\t * \n\t * @exception CmsException Throws CmsException if something goes wrong.\n\t */\n\tpublic Serializable readProperty(String name)\n        throws CmsException {\n        \n        Serializable property=null;\n        byte[] value;\n        ResultSet res = null;\n        PreparedStatement statement = null;\n            \n        // create get the property data from the database\n    \ttry {\n          statement=m_pool.getPreparedStatement(C_SYSTEMPROPERTIES_READ_KEY);\n          statement.setString(1,name);\n          res = statement.executeQuery();\n          m_pool.putPreparedStatement(C_SYSTEMPROPERTIES_READ_KEY,statement);\n       \t\t\n          if(res.next()) {\n\t\t\t\tvalue = res.getBytes(C_SYSTEMPROPERTY_VALUE);\n                // now deserialize the object\n                ByteArrayInputStream bin= new ByteArrayInputStream(value);\n                ObjectInputStream oin = new ObjectInputStream(bin);\n                property=(Serializable)oin.readObject();                \n\t\t\t}\t\n           res.close();\n\t\t}\n\t\tcatch (SQLException e){\n\t\t\t m_pool.putPreparedStatement(C_SYSTEMPROPERTIES_READ_KEY,statement);\n            throw new CmsException(\"[\"+this.getClass().getName()+\"]\"+e.getMessage(),CmsException.C_SQL_ERROR, e);\t\t\t\n\t\t}\t\n        catch (IOException e){\n\t\t\tthrow new CmsException(\"[\"+this.getClass().getName()+\"]\"+CmsException. C_SERIALIZATION, e);\t\t\t\n\t\t}\n\t    catch (ClassNotFoundException e){\n\t\t\t\n            throw new CmsException(\"[\"+this.getClass().getName()+\"]\"+CmsException. C_SERIALIZATION, e);\t\t\t\n\t\t}\t\n        return property;\n    }","commit_id":"e6d180a848d185b6b4e36605f4cbc2f7493b9ffb","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * Deletes a serializable object from the systempropertys.\n\t * \n\t * @param name The name of the property.\n\t * \n\t * @exception CmsException Throws CmsException if something goes wrong.\n\t */\n\tpublic void deleteProperty(String name)\n        throws CmsException {\n        \n        PreparedStatement statementPropertyDelete = null;\n\t\ttry\t{\n           statementPropertyDelete = m_pool.getPreparedStatement(C_SYSTEMPROPERTIES_DELETE_KEY);\n           statementPropertyDelete.setString(1,name);\n           statementPropertyDelete.executeUpdate();   \n           m_pool.putPreparedStatement(C_SYSTEMPROPERTIES_DELETE_KEY, statementPropertyDelete);   \n\t\t}catch (SQLException e){\n\t\t\tm_pool.putPreparedStatement(C_SYSTEMPROPERTIES_DELETE_KEY, statementPropertyDelete);   \n            throw new CmsException(\"[\"+this.getClass().getName()+\"]\"+e.getMessage(),CmsException.C_SQL_ERROR, e);\t\t\t\n\t\t}\n    }","id":96810,"modified_method":"/**\n\t * Deletes a serializable object from the systempropertys.\n\t * \n\t * @param name The name of the property.\n\t * \n\t * @exception CmsException Throws CmsException if something goes wrong.\n\t */\n\tpublic void deleteProperty(String name)\n        throws CmsException {\n        \n        PreparedStatement statement = null;\n\t\ttry\t{\n           statement = m_pool.getPreparedStatement(C_SYSTEMPROPERTIES_DELETE_KEY);\n           statement.setString(1,name);\n           statement.executeUpdate();   \n           m_pool.putPreparedStatement(C_SYSTEMPROPERTIES_DELETE_KEY, statement);   \n\t\t}catch (SQLException e){\n\t\t\tm_pool.putPreparedStatement(C_SYSTEMPROPERTIES_DELETE_KEY, statement);   \n            throw new CmsException(\"[\"+this.getClass().getName()+\"]\"+e.getMessage(),CmsException.C_SQL_ERROR, e);\t\t\t\n\t\t}\n    }","commit_id":"e6d180a848d185b6b4e36605f4cbc2f7493b9ffb","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * Creates a serializable object in the systempropertys.\n\t * \n\t * @param name The name of the property.\n\t * @param object The property-object.\n\t * \n\t * @return object The property-object.\n\t * \n\t * @exception CmsException Throws CmsException if something goes wrong.\n\t */\n\t public Serializable addProperty(String name, Serializable object)\n         throws CmsException {\n         \n        byte[] value;\n        PreparedStatement statementPropertyWrite=null;\n         try\t{\t\t\t\n            // serialize the object\n            ByteArrayOutputStream bout= new ByteArrayOutputStream();            \n            ObjectOutputStream oout=new ObjectOutputStream(bout);\n            oout.writeObject(object);\n            oout.close();\n            value=bout.toByteArray();\n            \n            // create the object\n                statementPropertyWrite=m_pool.getPreparedStatement(C_SYSTEMPROPERTIES_WRITE_KEY);\n                statementPropertyWrite.setString(1,name);\n                statementPropertyWrite.setBytes(2,value);\n                statementPropertyWrite.executeUpdate();\n                m_pool.putPreparedStatement(C_SYSTEMPROPERTIES_WRITE_KEY,statementPropertyWrite);\n        } catch (SQLException e){\n\t\t\tm_pool.putPreparedStatement(C_SYSTEMPROPERTIES_WRITE_KEY,statementPropertyWrite);\n            throw new CmsException(\"[\"+this.getClass().getName()+\"]\"+e.getMessage(),CmsException.C_SQL_ERROR, e);\t\t\t\n\t\t} catch (IOException e){\n\t\t\tm_pool.putPreparedStatement(C_SYSTEMPROPERTIES_WRITE_KEY,statementPropertyWrite);\n            throw new CmsException(\"[\"+this.getClass().getName()+\"]\"+CmsException. C_SERIALIZATION, e);\t\t\t\n\t\t}\n        return readProperty(name);\n     }","id":96811,"modified_method":"/**\n\t * Creates a serializable object in the systempropertys.\n\t * \n\t * @param name The name of the property.\n\t * @param object The property-object.\n\t * \n\t * @return object The property-object.\n\t * \n\t * @exception CmsException Throws CmsException if something goes wrong.\n\t */\n\t public Serializable addProperty(String name, Serializable object)\n         throws CmsException {\n         \n        byte[] value;\n        PreparedStatement statement=null;\n         try\t{\t\t\t\n            // serialize the object\n            ByteArrayOutputStream bout= new ByteArrayOutputStream();            \n            ObjectOutputStream oout=new ObjectOutputStream(bout);\n            oout.writeObject(object);\n            oout.close();\n            value=bout.toByteArray();\n            \n            // create the object\n                statement=m_pool.getPreparedStatement(C_SYSTEMPROPERTIES_WRITE_KEY);\n                statement.setString(1,name);\n                statement.setBytes(2,value);\n                statement.executeUpdate();\n                m_pool.putPreparedStatement(C_SYSTEMPROPERTIES_WRITE_KEY,statement);\n        } catch (SQLException e){\n\t\t\tm_pool.putPreparedStatement(C_SYSTEMPROPERTIES_WRITE_KEY,statement);\n            throw new CmsException(\"[\"+this.getClass().getName()+\"]\"+e.getMessage(),CmsException.C_SQL_ERROR, e);\t\t\t\n\t\t} catch (IOException e){\n            throw new CmsException(\"[\"+this.getClass().getName()+\"]\"+CmsException. C_SERIALIZATION, e);\t\t\t\n\t\t}\n        return readProperty(name);\n     }","commit_id":"e6d180a848d185b6b4e36605f4cbc2f7493b9ffb","url":"https://github.com/alkacon/opencms-core"},{"original_method":"/**\n\t * Writes a serializable object to the systemproperties.\n\t * \n\t * @param name The name of the property.\n\t * @param object The property-object.\n\t * \n\t * @return object The property-object.\n\t * \n\t * @exception CmsException Throws CmsException if something goes wrong.\n\t */\n\tpublic Serializable writeProperty(String name, Serializable object)\n        throws CmsException {\n        \n        byte[] value=null;\n        PreparedStatement statementPropertyUpdate = null;\n        \n        try\t{\t\t\t\n            // serialize the object\n            ByteArrayOutputStream bout= new ByteArrayOutputStream();            \n            ObjectOutputStream oout=new ObjectOutputStream(bout);\n            oout.writeObject(object);\n            oout.close();\n            value=bout.toByteArray();   \n            \n            statementPropertyUpdate=m_pool.getPreparedStatement(C_SYSTEMPROPERTIES_UPDATE_KEY);\n            statementPropertyUpdate.setBytes(1,value);\n            statementPropertyUpdate.setString(2,name);\n\t\t    statementPropertyUpdate.executeUpdate();\n\t\t    m_pool.putPreparedStatement(C_SYSTEMPROPERTIES_UPDATE_KEY,statementPropertyUpdate);\n        }\n        catch (SQLException e){\n\t\t\tm_pool.putPreparedStatement(C_SYSTEMPROPERTIES_UPDATE_KEY,statementPropertyUpdate);\n            throw new CmsException(\"[\"+this.getClass().getName()+\"]\"+e.getMessage(),CmsException.C_SQL_ERROR, e);\t\t\t\n\t\t}\n        catch (IOException e){\n\t\t\tm_pool.putPreparedStatement(C_SYSTEMPROPERTIES_UPDATE_KEY,statementPropertyUpdate);\n            throw new CmsException(\"[\"+this.getClass().getName()+\"]\"+CmsException. C_SERIALIZATION, e);\t\t\t\n\t\t}\n\n          return readProperty(name);\n    }","id":96812,"modified_method":"/**\n\t * Writes a serializable object to the systemproperties.\n\t * \n\t * @param name The name of the property.\n\t * @param object The property-object.\n\t * \n\t * @return object The property-object.\n\t * \n\t * @exception CmsException Throws CmsException if something goes wrong.\n\t */\n\tpublic Serializable writeProperty(String name, Serializable object)\n        throws CmsException {\n        \n        byte[] value=null;\n        PreparedStatement statement = null;\n        \n        try\t{\t\t\t\n            // serialize the object\n            ByteArrayOutputStream bout= new ByteArrayOutputStream();            \n            ObjectOutputStream oout=new ObjectOutputStream(bout);\n            oout.writeObject(object);\n            oout.close();\n            value=bout.toByteArray();   \n            \n            statement=m_pool.getPreparedStatement(C_SYSTEMPROPERTIES_UPDATE_KEY);\n            statement.setBytes(1,value);\n            statement.setString(2,name);\n\t\t    statement.executeUpdate();\n\t\t    m_pool.putPreparedStatement(C_SYSTEMPROPERTIES_UPDATE_KEY,statement);\n        }\n        catch (SQLException e){\n\t\t\tm_pool.putPreparedStatement(C_SYSTEMPROPERTIES_UPDATE_KEY,statement);\n            throw new CmsException(\"[\"+this.getClass().getName()+\"]\"+e.getMessage(),CmsException.C_SQL_ERROR, e);\t\t\t\n\t\t}\n        catch (IOException e){\n\t        throw new CmsException(\"[\"+this.getClass().getName()+\"]\"+CmsException. C_SERIALIZATION, e);\t\t\t\n\t\t}\n\n          return readProperty(name);\n    }","commit_id":"e6d180a848d185b6b4e36605f4cbc2f7493b9ffb","url":"https://github.com/alkacon/opencms-core"},{"original_method":"public void stop(BundleContext context) throws Exception\n    {\n        shellRegistration.unregister();\n        threadioRegistration.unregister();\n        threadio.stop();\n        converterTracker.close();\n        commandTracker.close();\n        felixTracker.close();\n    }","id":96813,"modified_method":"public void stop(BundleContext context) throws Exception\n    {\n        convertersRegistration.unregister();\n        processorRegistration.unregister();\n        threadioRegistration.unregister();\n        \n        commandTracker.close();\n        converterTracker.close();\n        felixTracker.close();\n\n        threadio.stop();\n    }","commit_id":"68e2d631f7edd0006be2e5c591b7456edecafc4b","url":"https://github.com/apache/felix"},{"original_method":"public void start(final BundleContext context) throws Exception\n    {\n        Hashtable props = new Hashtable();\n        props.put(\"osgi.command.scope\", \"log\");\n        props.put(\"osgi.command.function\", \"display\");\n\n        threadio = new ThreadIOImpl();\n        threadio.start();\n        shell = new OSGiShell();\n        shell.setBundle(context.getBundle());\n        shell.setThreadio(threadio);\n        shell.setConverter(new Support());\n        shell.start();\n        converterTracker = new ServiceTracker(context, Converter.class.getName(), null)\n        {\n            @Override\n            public Object addingService(ServiceReference reference)\n            {\n                Converter converter = (Converter) super.addingService(reference);\n                shell.setConverter(converter);\n                return converter;\n            }\n\n            @Override\n            public void removedService(ServiceReference reference, Object service)\n            {\n                shell.unsetConverter((Converter) service);\n                super.removedService(reference, service);\n            }\n        };\n        converterTracker.open();\n\n        commandTracker = new ServiceTracker(context,\n            context.createFilter(\"(&(osgi.command.scope=*)(osgi.command.function=*))\"),\n            null)\n        {\n            @Override\n            public Object addingService(ServiceReference reference)\n            {\n                Object scope = reference.getProperty(\"osgi.command.scope\");\n                Object function = reference.getProperty(\"osgi.command.function\");\n                List<Object> commands = new ArrayList<Object>();\n                if (scope != null && function != null)\n                {\n                    if (function.getClass().isArray())\n                    {\n                        for (Object f : ((Object[]) function))\n                        {\n                            Function target = new CommandProxy(context, reference,\n                                f.toString());\n                            shell.addCommand(scope.toString(), target, f.toString());\n                            commands.add(target);\n                        }\n                    }\n                    else\n                    {\n                        Function target = new CommandProxy(context, reference,\n                            function.toString());\n                        shell.addCommand(scope.toString(), target, function.toString());\n                        commands.add(target);\n                    }\n                    return commands;\n                }\n                return null;\n            }\n\n            @Override\n            public void removedService(ServiceReference reference, Object service)\n            {\n                List<Object> commands = (List<Object>) service;\n                for (Object cmd : commands)\n                {\n                    shell.removeCommand(cmd);\n                }\n                super.removedService(reference, service);\n            }\n        };\n        commandTracker.open();\n\n        felixTracker = new ServiceTracker(context, FelixCommandAdaptor.FELIX_COMMAND,\n            null)\n        {\n            @Override\n            public Object addingService(ServiceReference ref)\n            {\n                Object felixCommand = super.addingService(ref);\n                try\n                {\n                    FelixCommandAdaptor adaptor = new FelixCommandAdaptor(felixCommand);\n                    regs.put(ref, context.registerService(\n                        FelixCommandAdaptor.class.getName(), adaptor,\n                        adaptor.getAttributes()));\n                    return felixCommand;\n                }\n                catch (Exception e)\n                {\n                    System.err.println(\"felixcmd: \" + e);\n                    return null;\n                }\n            }\n\n            @Override\n            public void removedService(ServiceReference reference, Object service)\n            {\n                ServiceRegistration reg = regs.remove(reference);\n                if (reg != null)\n                    reg.unregister();\n                super.removedService(reference, service);\n            }\n        };\n        felixTracker.open();\n\n        threadioRegistration = context.registerService(ThreadIO.class.getName(),\n            threadio, new Hashtable());\n        shellRegistration = context.registerService(CommandProcessor.class.getName(),\n            shell, new Hashtable());\n    }","id":96814,"modified_method":"public void start(final BundleContext context) throws Exception\n    {\n        threadio = new ThreadIOImpl();\n        threadio.start();\n        threadioRegistration = context.registerService(ThreadIO.class.getName(),\n            threadio, null);\n\n        processor = new CommandProcessorImpl(threadio);\n        processorRegistration = context.registerService(CommandProcessor.class.getName(),\n            processor, null);\n        \n        commandTracker = trackOSGiCommands(context);\n        commandTracker.open();\n\n        felixRegistrations = new HashMap<ServiceReference, ServiceRegistration>();\n        felixTracker = trackFelixCommands(context);\n        felixTracker.open();\n\n        converterTracker = new ServiceTracker(context, Converter.class.getName(), null)\n        {\n            @Override\n            public Object addingService(ServiceReference reference)\n            {\n                Converter converter = (Converter) super.addingService(reference);\n                processor.addConverter(converter);\n                return converter;\n            }\n\n            @Override\n            public void removedService(ServiceReference reference, Object service)\n            {\n                processor.removeConverter((Converter) service);\n                super.removedService(reference, service);\n            }\n        };\n        converterTracker.open();\n\n        // FIXME: optional?\n        commands = new OSGiCommands(context);\n        commands.registerCommands(processor, context.getBundle());\n        converters = new OSGiConverters(context);\n        convertersRegistration = context.registerService(Converter.class.getCanonicalName(), converters, null);\n    }","commit_id":"68e2d631f7edd0006be2e5c591b7456edecafc4b","url":"https://github.com/apache/felix"},{"original_method":"public Object execute(CommandSession session, List<Object> arguments)\n        throws Exception\n    {\n        Object target = context.getService(reference);\n        try\n        {\n            if (target instanceof Function)\n            {\n                return ((Function) target).execute(session, arguments);\n            }\n            else\n            {\n                return method(session, target, function, arguments);\n            }\n        }\n        finally\n        {\n            context.ungetService(reference);\n        }\n    }","id":96815,"modified_method":"public Object execute(CommandSession session, List<Object> arguments)\n        throws Exception\n    {\n        Object tgt = (context != null ? context.getService(reference) : target);\n        \n        try\n        {\n            if (tgt instanceof Function)\n            {\n                return ((Function) tgt).execute(session, arguments);\n            }\n            else\n            {\n                return method(session, tgt, function, arguments);\n            }\n        }\n        finally\n        {\n            if (context != null)\n            {\n                context.ungetService(reference);\n            }\n        }\n    }","commit_id":"68e2d631f7edd0006be2e5c591b7456edecafc4b","url":"https://github.com/apache/felix"},{"original_method":"@SuppressWarnings(\"unchecked\")\n    public CharSequence format(Object target, int level, Converter escape)\n        throws Exception\n    {\n        if (target == null)\n        {\n            return \"null\";\n        }\n\n        if (target instanceof CharSequence)\n        {\n            return (CharSequence) target;\n        }\n\n        for (Converter c : service.converters)\n        {\n            CharSequence s = c.format(target, level, this);\n            if (s != null)\n            {\n                return s;\n            }\n        }\n\n        if (target.getClass().isArray())\n        {\n            if (target.getClass().getComponentType().isPrimitive())\n            {\n                if (target.getClass().getComponentType() == boolean.class)\n                {\n                    return Arrays.toString((boolean[]) target);\n                }\n                else\n                {\n                    if (target.getClass().getComponentType() == byte.class)\n                    {\n                        return Arrays.toString((byte[]) target);\n                    }\n                    else\n                    {\n                        if (target.getClass().getComponentType() == short.class)\n                        {\n                            return Arrays.toString((short[]) target);\n                        }\n                        else\n                        {\n                            if (target.getClass().getComponentType() == int.class)\n                            {\n                                return Arrays.toString((int[]) target);\n                            }\n                            else\n                            {\n                                if (target.getClass().getComponentType() == long.class)\n                                {\n                                    return Arrays.toString((long[]) target);\n                                }\n                                else\n                                {\n                                    if (target.getClass().getComponentType() == float.class)\n                                    {\n                                        return Arrays.toString((float[]) target);\n                                    }\n                                    else\n                                    {\n                                        if (target.getClass().getComponentType() == double.class)\n                                        {\n                                            return Arrays.toString((double[]) target);\n                                        }\n                                        else\n                                        {\n                                            if (target.getClass().getComponentType() == char.class)\n                                            {\n                                                return Arrays.toString((char[]) target);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            target = Arrays.asList((Object[]) target);\n        }\n        if (target instanceof Collection)\n        {\n            if (level == Converter.INSPECT)\n            {\n                StringBuilder sb = new StringBuilder();\n                Collection<?> c = (Collection<?>) target;\n                for (Object o : c)\n                {\n                    sb.append(format(o, level + 1, this));\n                    sb.append(\"\\n\");\n                }\n                return sb;\n            }\n            else\n            {\n                if (level == Converter.LINE)\n                {\n                    StringBuilder sb = new StringBuilder();\n                    Collection<?> c = (Collection<?>) target;\n                    sb.append(\"[\");\n                    for (Object o : c)\n                    {\n                        if (sb.length() > 1)\n                        {\n                            sb.append(\", \");\n                        }\n                        sb.append(format(o, level + 1, this));\n                    }\n                    sb.append(\"]\");\n                    return sb;\n                }\n            }\n        }\n        if (target instanceof Dictionary)\n        {\n            Map<Object, Object> result = new HashMap<Object, Object>();\n            for (Enumeration e = ((Dictionary) target).keys(); e.hasMoreElements();)\n            {\n                Object key = e.nextElement();\n                result.put(key, ((Dictionary) target).get(key));\n            }\n            target = result;\n        }\n        if (target instanceof Map)\n        {\n            if (level == Converter.INSPECT)\n            {\n                StringBuilder sb = new StringBuilder();\n                Map<?, ?> c = (Map<?, ?>) target;\n                for (Map.Entry<?, ?> entry : c.entrySet())\n                {\n                    CharSequence key = format(entry.getKey(), level + 1, this);\n                    sb.append(key);\n                    for (int i = key.length(); i < 20; i++)\n                    {\n                        sb.append(' ');\n                    }\n                    sb.append(format(entry.getValue(), level + 1, this));\n                    sb.append(\"\\n\");\n                }\n                return sb;\n            }\n            else\n            {\n                if (level == Converter.LINE)\n                {\n                    StringBuilder sb = new StringBuilder();\n                    Map<?, ?> c = (Map<?, ?>) target;\n                    sb.append(\"[\");\n                    for (Map.Entry<?, ?> entry : c.entrySet())\n                    {\n                        if (sb.length() > 1)\n                        {\n                            sb.append(\", \");\n                        }\n                        sb.append(format(entry, level + 1, this));\n                    }\n                    sb.append(\"]\");\n                    return sb;\n                }\n            }\n        }\n        if (level == Converter.INSPECT)\n        {\n            return inspect(target);\n        }\n        else\n        {\n            return target.toString();\n        }\n    }","id":96816,"modified_method":"@SuppressWarnings(\"unchecked\")\n    public CharSequence format(Object target, int level, Converter escape)\n        throws Exception\n    {\n        if (target == null)\n        {\n            return \"null\";\n        }\n\n        if (target instanceof CharSequence)\n        {\n            return (CharSequence) target;\n        }\n\n        for (Converter c : processor.converters)\n        {\n            CharSequence s = c.format(target, level, this);\n            if (s != null)\n            {\n                return s;\n            }\n        }\n\n        if (target.getClass().isArray())\n        {\n            if (target.getClass().getComponentType().isPrimitive())\n            {\n                if (target.getClass().getComponentType() == boolean.class)\n                {\n                    return Arrays.toString((boolean[]) target);\n                }\n                else\n                {\n                    if (target.getClass().getComponentType() == byte.class)\n                    {\n                        return Arrays.toString((byte[]) target);\n                    }\n                    else\n                    {\n                        if (target.getClass().getComponentType() == short.class)\n                        {\n                            return Arrays.toString((short[]) target);\n                        }\n                        else\n                        {\n                            if (target.getClass().getComponentType() == int.class)\n                            {\n                                return Arrays.toString((int[]) target);\n                            }\n                            else\n                            {\n                                if (target.getClass().getComponentType() == long.class)\n                                {\n                                    return Arrays.toString((long[]) target);\n                                }\n                                else\n                                {\n                                    if (target.getClass().getComponentType() == float.class)\n                                    {\n                                        return Arrays.toString((float[]) target);\n                                    }\n                                    else\n                                    {\n                                        if (target.getClass().getComponentType() == double.class)\n                                        {\n                                            return Arrays.toString((double[]) target);\n                                        }\n                                        else\n                                        {\n                                            if (target.getClass().getComponentType() == char.class)\n                                            {\n                                                return Arrays.toString((char[]) target);\n                                            }\n                                        }\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            target = Arrays.asList((Object[]) target);\n        }\n        if (target instanceof Collection)\n        {\n            if (level == Converter.INSPECT)\n            {\n                StringBuilder sb = new StringBuilder();\n                Collection<?> c = (Collection<?>) target;\n                for (Object o : c)\n                {\n                    sb.append(format(o, level + 1, this));\n                    sb.append(\"\\n\");\n                }\n                return sb;\n            }\n            else\n            {\n                if (level == Converter.LINE)\n                {\n                    StringBuilder sb = new StringBuilder();\n                    Collection<?> c = (Collection<?>) target;\n                    sb.append(\"[\");\n                    for (Object o : c)\n                    {\n                        if (sb.length() > 1)\n                        {\n                            sb.append(\", \");\n                        }\n                        sb.append(format(o, level + 1, this));\n                    }\n                    sb.append(\"]\");\n                    return sb;\n                }\n            }\n        }\n        if (target instanceof Dictionary)\n        {\n            Map<Object, Object> result = new HashMap<Object, Object>();\n            for (Enumeration e = ((Dictionary) target).keys(); e.hasMoreElements();)\n            {\n                Object key = e.nextElement();\n                result.put(key, ((Dictionary) target).get(key));\n            }\n            target = result;\n        }\n        if (target instanceof Map)\n        {\n            if (level == Converter.INSPECT)\n            {\n                StringBuilder sb = new StringBuilder();\n                Map<?, ?> c = (Map<?, ?>) target;\n                for (Map.Entry<?, ?> entry : c.entrySet())\n                {\n                    CharSequence key = format(entry.getKey(), level + 1, this);\n                    sb.append(key);\n                    for (int i = key.length(); i < 20; i++)\n                    {\n                        sb.append(' ');\n                    }\n                    sb.append(format(entry.getValue(), level + 1, this));\n                    sb.append(\"\\n\");\n                }\n                return sb;\n            }\n            else\n            {\n                if (level == Converter.LINE)\n                {\n                    StringBuilder sb = new StringBuilder();\n                    Map<?, ?> c = (Map<?, ?>) target;\n                    sb.append(\"[\");\n                    for (Map.Entry<?, ?> entry : c.entrySet())\n                    {\n                        if (sb.length() > 1)\n                        {\n                            sb.append(\", \");\n                        }\n                        sb.append(format(entry, level + 1, this));\n                    }\n                    sb.append(\"]\");\n                    return sb;\n                }\n            }\n        }\n        if (level == Converter.INSPECT)\n        {\n            return inspect(target);\n        }\n        else\n        {\n            return target.toString();\n        }\n    }","commit_id":"68e2d631f7edd0006be2e5c591b7456edecafc4b","url":"https://github.com/apache/felix"},{"original_method":"public Object get(String name)\n    {\n        // there is no API to list all variables, so overload name == null\n        if (name == null || VARIABLES.equals(name))\n        {\n            return variables.keySet();\n        }\n        if (COMMANDS.equals(name))\n        {\n            return service.get(null);\n        }\n\n        if (variables.containsKey(name))\n        {\n            return variables.get(name);\n        }\n\n        // add SCOPE support\n        if (name.startsWith(\"*:\"))\n        {\n            String path = variables.containsKey(\"SCOPE\") ? variables.get(\"SCOPE\").toString()\n                : \"osgi:*\";\n            String func = name.substring(2);\n            for (String scope : path.split(\":\"))\n            {\n                Object result = service.get(scope + \":\" + func);\n                if (result != null)\n                {\n                    return result;\n                }\n            }\n            return null;\n        }\n        return service.get(name);\n    }","id":96817,"modified_method":"public Object get(String name)\n    {\n        // there is no API to list all variables, so overload name == null\n        if (name == null || VARIABLES.equals(name))\n        {\n            return variables.keySet();\n        }\n        \n        if (COMMANDS.equals(name))\n        {\n            return processor.getCommands();\n        }\n\n        if (variables.containsKey(name))\n        {\n            return variables.get(name);\n        }\n\n        // add SCOPE support\n        if (name.startsWith(\"*:\"))\n        {\n            String func = name.substring(2);\n            String path = variables.containsKey(\"SCOPE\") ? variables.get(\"SCOPE\").toString()\n                : \"osgi:*\";\n            \n            for (String scope : path.split(\":\"))\n            {\n                Object result = processor.getCommand(scope + \":\" + func);\n                if (result != null)\n                {\n                    return result;\n                }\n            }\n            return null;\n        }\n\n        return processor.getCommand(name);\n    }","commit_id":"68e2d631f7edd0006be2e5c591b7456edecafc4b","url":"https://github.com/apache/felix"},{"original_method":"public Object convert(Class<?> desiredType, Object in)\n    {\n        return service.convert(desiredType, in);\n    }","id":96818,"modified_method":"public Object convert(Class<?> desiredType, Object in)\n    {\n        return processor.convert(desiredType, in);\n    }","commit_id":"68e2d631f7edd0006be2e5c591b7456edecafc4b","url":"https://github.com/apache/felix"},{"original_method":"protected CommandSessionImpl(CommandShellImpl service, InputStream in, PrintStream out, PrintStream err)\n    {\n        this.service = service;\n        this.in = in;\n        this.out = out;\n        this.err = err;\n    }","id":96819,"modified_method":"protected CommandSessionImpl(CommandProcessorImpl shell, InputStream in, PrintStream out, PrintStream err)\n    {\n        this.processor = shell;\n        this.in = in;\n        this.out = out;\n        this.err = err;\n    }","commit_id":"68e2d631f7edd0006be2e5c591b7456edecafc4b","url":"https://github.com/apache/felix"},{"original_method":"public Object execute(CharSequence commandline) throws Exception\n    {\n        assert service != null;\n        assert service.threadIO != null;\n\n        if (closed)\n        {\n            throw new IllegalStateException(\"session is closed\");\n        }\n\n        Closure impl = new Closure(this, null, commandline);\n        Object result = impl.execute(this, null);\n        return result;\n    }","id":96820,"modified_method":"public Object execute(CharSequence commandline) throws Exception\n    {\n        assert processor != null;\n        assert processor.threadIO != null;\n\n        if (closed)\n        {\n            throw new IllegalStateException(\"session is closed\");\n        }\n\n        Closure impl = new Closure(this, null, commandline);\n        Object result = impl.execute(this, null);\n        return result;\n    }","commit_id":"68e2d631f7edd0006be2e5c591b7456edecafc4b","url":"https://github.com/apache/felix"},{"original_method":"public Context()\n    {\n        setThreadio(threadio);\n    }","id":96821,"modified_method":"public Context()\n    {\n        super(threadio);\n        session = (CommandSessionImpl) createSession(System.in, System.out, System.err);\n    }","commit_id":"68e2d631f7edd0006be2e5c591b7456edecafc4b","url":"https://github.com/apache/felix"},{"original_method":"public void addCommand(String name, Object target)\n    {\n        put(\"test:\" + name, target);\n    }","id":96822,"modified_method":"public void addCommand(String function, Object target)\n    {\n        addCommand(\"test\", target, function);\n    }","commit_id":"68e2d631f7edd0006be2e5c591b7456edecafc4b","url":"https://github.com/apache/felix"},{"original_method":"public Context()\n    {\n        setThreadio(threadio);\n    }","id":96823,"modified_method":"public Context()\n    {\n        super(threadio);\n    }","commit_id":"68e2d631f7edd0006be2e5c591b7456edecafc4b","url":"https://github.com/apache/felix"},{"original_method":"public FelixCommandAdaptor(Object felixCommand) throws Exception\n    {\n        this.felixCommand = felixCommand;\n        Class<?> c = felixCommand.getClass();\n        Class<?>[] parms = { String.class, PrintStream.class, PrintStream.class };\n        execute = c.getMethod(\"execute\", parms);\n\n        Method name = c.getMethod(\"getName\", (Class[]) null);\n        this.name = (String) name.invoke(felixCommand, (Object[]) null);\n\n        Method help = c.getMethod(\"getShortDescription\", (Class[]) null);\n        this.help = (String) help.invoke(felixCommand, (Object[]) null);\n\n        Method usage = c.getMethod(\"getUsage\", (Class[]) null);\n        this.usage = (String) usage.invoke(felixCommand, (Object[]) null);\n    }","id":96824,"modified_method":"public FelixCommandAdaptor(Object felixCommand) throws Exception\n    {\n        this.felixCommand = felixCommand;\n        Class<?> c = felixCommand.getClass();\n        Class<?>[] parms = { String.class, PrintStream.class, PrintStream.class };\n        execute = c.getMethod(\"execute\", parms);\n\n        Method m;\n        m = c.getMethod(\"getName\", (Class[]) null);\n        name = (String) m.invoke(felixCommand, (Object[]) null);\n\n        m = c.getMethod(\"getShortDescription\", (Class[]) null);\n        help = (String) m.invoke(felixCommand, (Object[]) null);\n\n        m = c.getMethod(\"getUsage\", (Class[]) null);\n        usage = (String) m.invoke(felixCommand, (Object[]) null);\n    }","commit_id":"68e2d631f7edd0006be2e5c591b7456edecafc4b","url":"https://github.com/apache/felix"},{"original_method":"public static void main(String args[]) throws Exception\n    {\n        StringBuffer sb = new StringBuffer();\n        String fwkClassName = null;\n        PrintStream out = System.out;\n        InputStream in = System.in;\n        boolean console = false;\n\n        for (int i = 0; i < args.length; i++)\n        {\n            String arg = args[i];\n            if (arg.equals(\"-f\"))\n            {\n                fwkClassName = args[++i];\n            }\n            else\n            {\n                if (arg.equals(\"-cp\") || arg.equals(\"-classpath\"))\n                {\n                    classpath(args[++i]);\n                }\n                else\n                {\n                    if (arg.equals(\"-console\"))\n                    {\n                        console = true;\n                    }\n                    else\n                    {\n                        if (arg.equals(\"-i\"))\n                        {\n                            in = new FileInputStream(args[++i]);\n                        }\n                        else\n                        {\n                            if (arg.equals(\"-o\"))\n                            {\n                                out = new PrintStream(new FileOutputStream(args[++i]));\n                            }\n                            else\n                            {\n                                sb.append(' ');\n                                sb.append(arg);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        URL[] urls = classpath.toArray(new URL[classpath.size()]);\n        URLClassLoader cl = new URLClassLoader(urls, Launcher.class.getClassLoader());\n\n        Properties p = new Properties(System.getProperties());\n\n        Framework framework;\n        if (fwkClassName == null)\n        {\n            framework = getFrameworkFactory(cl).newFramework(p);\n        }\n        else\n        {\n            Class<?> fw = cl.loadClass(fwkClassName);\n            Constructor<?> c = fw.getConstructor(Map.class, List.class);\n            framework = (Framework) c.newInstance(p);\n        }\n\n        ThreadIOImpl threadio = new ThreadIOImpl();\n        threadio.start();\n\n        OSGiShell shell = new OSGiShell();\n        shell.setThreadio(threadio);\n        shell.setBundle(framework);\n        shell.start();\n\n        CommandSession session = shell.createSession(in, out, System.err);\n        session.put(\"shell\", shell);\n        session.put(\"threadio\", threadio);\n\n        session.execute(sb);\n        out.flush();\n\n        if (framework.getState() == Bundle.ACTIVE)\n        {\n        }\n        if (console)\n        {\n            Console cons = new Console();\n            cons.setSession(session);\n            cons.run();\n        }\n    }","id":96825,"modified_method":"public static void main(String args[]) throws Exception\n    {\n        StringBuffer sb = new StringBuffer();\n        String fwkClassName = null;\n        PrintStream out = System.out;\n        InputStream in = System.in;\n        boolean console = false;\n\n        for (int i = 0; i < args.length; i++)\n        {\n            String arg = args[i];\n            if (arg.equals(\"-f\"))\n            {\n                fwkClassName = args[++i];\n            }\n            else\n            {\n                if (arg.equals(\"-cp\") || arg.equals(\"-classpath\"))\n                {\n                    classpath(args[++i]);\n                }\n                else\n                {\n                    if (arg.equals(\"-console\"))\n                    {\n                        console = true;\n                    }\n                    else\n                    {\n                        if (arg.equals(\"-i\"))\n                        {\n                            in = new FileInputStream(args[++i]);\n                        }\n                        else\n                        {\n                            if (arg.equals(\"-o\"))\n                            {\n                                out = new PrintStream(new FileOutputStream(args[++i]));\n                            }\n                            else\n                            {\n                                sb.append(' ');\n                                sb.append(arg);\n                            }\n                        }\n                    }\n                }\n            }\n        }\n\n        URL[] urls = classpath.toArray(new URL[classpath.size()]);\n        URLClassLoader cl = new URLClassLoader(urls, Launcher.class.getClassLoader());\n\n        Properties p = new Properties(System.getProperties());\n\n        Framework framework;\n        if (fwkClassName == null)\n        {\n            framework = getFrameworkFactory(cl).newFramework(p);\n        }\n        else\n        {\n            Class<?> fw = cl.loadClass(fwkClassName);\n            Constructor<?> c = fw.getConstructor(Map.class, List.class);\n            framework = (Framework) c.newInstance(p);\n        }\n\n        ThreadIOImpl threadio = new ThreadIOImpl();\n        threadio.start();\n\n        CommandProcessorImpl shell = new CommandProcessorImpl(threadio);\n\n        CommandSession session = shell.createSession(in, out, System.err);\n        session.put(\"shell\", shell);\n        session.put(\"threadio\", threadio);\n\n        session.execute(sb);\n        out.flush();\n\n        if (framework.getState() == Bundle.ACTIVE)\n        {\n        }\n        if (console)\n        {\n            Console cons = new Console();\n            cons.setSession(session);\n            cons.run();\n        }\n    }","commit_id":"68e2d631f7edd0006be2e5c591b7456edecafc4b","url":"https://github.com/apache/felix"},{"original_method":"protected OSGiCommands(Bundle bundle)\n    {\n        this.bundle = bundle;\n    }","id":96826,"modified_method":"public OSGiCommands(BundleContext context)\n    {\n        this.context = context;\n    }","commit_id":"68e2d631f7edd0006be2e5c591b7456edecafc4b","url":"https://github.com/apache/felix"},{"original_method":"public Object service(String clazz, String filter) throws InvalidSyntaxException\n    {\n        ServiceReference ref[] = getContext().getServiceReferences(clazz, filter);\n        if (ref == null)\n        {\n            return null;\n        }\n\n        return getContext().getService(ref[0]);\n    }","id":96827,"modified_method":"private Object service(String clazz, String filter) throws InvalidSyntaxException\n    {\n        ServiceReference ref[] = context.getServiceReferences(clazz, filter);\n        if (ref != null)\n        {\n            return context.getService(ref[0]);\n        }\n\n        return null;\n    }","commit_id":"68e2d631f7edd0006be2e5c591b7456edecafc4b","url":"https://github.com/apache/felix"},{"original_method":"public void run()\n    {\n        tIn.set(in);\n        tOut.set(out);\n        tErr.set(err);\n        closure.session().service.threadIO.setStreams(in, out, err);\n        \n        try\n        {\n            result = closure.executeStatement(statement);\n            if (result != null && pout != null)\n            {\n                if (!Boolean.FALSE.equals(closure.session().get(\".FormatPipe\")))\n                {\n                    out.println(closure.session().format(result, Converter.INSPECT));\n                }\n            }\n        }\n        catch (Exception e)\n        {\n            exception = e;\n        }\n        finally\n        {\n            out.flush();\n            closure.session().service.threadIO.close();\n\n            try\n            {\n                if (in instanceof PipedInputStream)\n                {\n                    in.close();\n                }\n                if (pout != null)\n                {\n                    pout.close();\n                }\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n            }\n        }\n    }","id":96828,"modified_method":"public void run()\n    {\n        tIn.set(in);\n        tOut.set(out);\n        tErr.set(err);\n        closure.session().threadIO().setStreams(in, out, err);\n        \n        try\n        {\n            result = closure.executeStatement(statement);\n            if (result != null && pout != null)\n            {\n                if (!Boolean.FALSE.equals(closure.session().get(\".FormatPipe\")))\n                {\n                    out.println(closure.session().format(result, Converter.INSPECT));\n                }\n            }\n        }\n        catch (Exception e)\n        {\n            exception = e;\n        }\n        finally\n        {\n            out.flush();\n            closure.session().threadIO().close();\n\n            try\n            {\n                if (in instanceof PipedInputStream)\n                {\n                    in.close();\n                }\n                if (pout != null)\n                {\n                    pout.close();\n                }\n            }\n            catch (IOException e)\n            {\n                e.printStackTrace();\n            }\n        }\n    }","commit_id":"68e2d631f7edd0006be2e5c591b7456edecafc4b","url":"https://github.com/apache/felix"},{"original_method":"/**\n     * Establish a thrift connection to cassandra instance\n     *\n     * @param server - hostname or IP of the server\n     * @param port   - Thrift port number\n     */\n    public static void connect(String server, int port)\n    {\n        TSocket socket = new TSocket(server, port);\n\n        if (transport != null)\n            transport.close();\n\n        if (sessionState.framed)\n        {\n            transport = new TFramedTransport(socket);\n        }\n        else\n        {\n            transport = socket;\n        }\n\n        TBinaryProtocol binaryProtocol = new TBinaryProtocol(transport, true, true);\n        Cassandra.Client cassandraClient = new Cassandra.Client(binaryProtocol);\n\n        try\n        {\n            transport.open();\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace(sessionState.err);\n\n            String error = (e.getCause() == null) ? e.getMessage() : e.getCause().getMessage();\n            throw new RuntimeException(\"Exception connecting to \" + server + \"/\" + port + \". Reason: \" + error + \".\");\n        }\n\n        thriftClient = cassandraClient;\n        cliClient = new CliClient(sessionState, thriftClient);\n\n        if ((sessionState.username != null) && (sessionState.password != null))\n        {\n            // Authenticate\n            Map<String, String> credentials = new HashMap<String, String>();\n            credentials.put(IAuthenticator.USERNAME_KEY, sessionState.username);\n            credentials.put(IAuthenticator.PASSWORD_KEY, sessionState.password);\n            AuthenticationRequest authRequest = new AuthenticationRequest(credentials);\n            try\n            {\n                thriftClient.login(authRequest);\n                cliClient.setUsername(sessionState.username);\n            }\n            catch (AuthenticationException e)\n            {\n                thriftClient = null;\n                sessionState.err.println(\"Exception during authentication to the cassandra node, \" +\n                \t\t\"Verify the keyspace exists, and that you are using the correct credentials.\");\n                return;\n            }\n            catch (AuthorizationException e)\n            {\n                thriftClient = null;\n                sessionState.err.println(\"You are not authorized to use keyspace: \" + sessionState.keyspace);\n                return;\n            }\n            catch (TException e)\n            {\n                thriftClient = null;\n                sessionState.err.println(\"Login failure. Did you specify 'keyspace', 'username' and 'password'?\");\n                return;\n            }\n        }\n\n        if (sessionState.keyspace != null)\n        {\n            try\n            {\n                sessionState.keyspace = CliCompiler.getKeySpace(sessionState.keyspace, thriftClient.describe_keyspaces());;\n                thriftClient.set_keyspace(sessionState.keyspace);\n                cliClient.setKeySpace(sessionState.keyspace);\n                updateCompletor(CliUtils.getCfNamesByKeySpace(cliClient.getKSMetaData(sessionState.keyspace)));\n            }\n            catch (InvalidRequestException e)\n            {\n                sessionState.err.println(\"Keyspace \" + sessionState.keyspace + \" not found\");\n                return;\n            }\n            catch (TException e)\n            {\n                sessionState.err.println(\"Did you specify 'keyspace'?\");\n                return;\n            }\n            catch (NotFoundException e)\n            {\n                sessionState.err.println(\"Keyspace \" + sessionState.keyspace + \" not found\");\n                return;\n            }\n        }\n\n        // Lookup the cluster name, this is to make it clear which cluster the user is connected to\n        String clusterName;\n\n        try\n        {\n            clusterName = thriftClient.describe_cluster_name();\n        }\n        catch (Exception e)\n        {\n            sessionState.err.println(\"Exception retrieving information about the cassandra node, check you have connected to the thrift port.\");\n\n            e.printStackTrace(sessionState.err);\n\n            return;\n        }\n\n        sessionState.out.printf(\"Connected to: \\\"%s\\\" on %s/%d%n\", clusterName, server, port);\n    }","id":96829,"modified_method":"/**\n     * Establish a thrift connection to cassandra instance\n     *\n     * @param server - hostname or IP of the server\n     * @param port   - Thrift port number\n     */\n    public static void connect(String server, int port)\n    {\n        TSocket socket = new TSocket(server, port);\n\n        if (transport != null)\n            transport.close();\n\n        transport = sessionState.transportFactory.getTransport(socket);\n        TBinaryProtocol binaryProtocol = new TBinaryProtocol(transport, true, true);\n        Cassandra.Client cassandraClient = new Cassandra.Client(binaryProtocol);\n\n        try\n        {\n            if (!transport.isOpen())\n                transport.open();\n        }\n        catch (Exception e)\n        {\n            e.printStackTrace(sessionState.err);\n\n            String error = (e.getCause() == null) ? e.getMessage() : e.getCause().getMessage();\n            throw new RuntimeException(\"Exception connecting to \" + server + \"/\" + port + \". Reason: \" + error + \".\");\n        }\n\n        thriftClient = cassandraClient;\n        cliClient = new CliClient(sessionState, thriftClient);\n\n        if ((sessionState.username != null) && (sessionState.password != null))\n        {\n            // Authenticate\n            Map<String, String> credentials = new HashMap<String, String>();\n            credentials.put(IAuthenticator.USERNAME_KEY, sessionState.username);\n            credentials.put(IAuthenticator.PASSWORD_KEY, sessionState.password);\n            AuthenticationRequest authRequest = new AuthenticationRequest(credentials);\n            try\n            {\n                thriftClient.login(authRequest);\n                cliClient.setUsername(sessionState.username);\n            }\n            catch (AuthenticationException e)\n            {\n                thriftClient = null;\n                sessionState.err.println(\"Exception during authentication to the cassandra node, \" +\n                \t\t\"Verify the keyspace exists, and that you are using the correct credentials.\");\n                return;\n            }\n            catch (AuthorizationException e)\n            {\n                thriftClient = null;\n                sessionState.err.println(\"You are not authorized to use keyspace: \" + sessionState.keyspace);\n                return;\n            }\n            catch (TException e)\n            {\n                thriftClient = null;\n                sessionState.err.println(\"Login failure. Did you specify 'keyspace', 'username' and 'password'?\");\n                return;\n            }\n        }\n\n        if (sessionState.keyspace != null)\n        {\n            try\n            {\n                sessionState.keyspace = CliCompiler.getKeySpace(sessionState.keyspace, thriftClient.describe_keyspaces());;\n                thriftClient.set_keyspace(sessionState.keyspace);\n                cliClient.setKeySpace(sessionState.keyspace);\n                updateCompletor(CliUtils.getCfNamesByKeySpace(cliClient.getKSMetaData(sessionState.keyspace)));\n            }\n            catch (InvalidRequestException e)\n            {\n                sessionState.err.println(\"Keyspace \" + sessionState.keyspace + \" not found\");\n                return;\n            }\n            catch (TException e)\n            {\n                sessionState.err.println(\"Did you specify 'keyspace'?\");\n                return;\n            }\n            catch (NotFoundException e)\n            {\n                sessionState.err.println(\"Keyspace \" + sessionState.keyspace + \" not found\");\n                return;\n            }\n        }\n\n        // Lookup the cluster name, this is to make it clear which cluster the user is connected to\n        String clusterName;\n\n        try\n        {\n            clusterName = thriftClient.describe_cluster_name();\n        }\n        catch (Exception e)\n        {\n            sessionState.err.println(\"Exception retrieving information about the cassandra node, check you have connected to the thrift port.\");\n\n            e.printStackTrace(sessionState.err);\n\n            return;\n        }\n\n        sessionState.out.printf(\"Connected to: \\\"%s\\\" on %s/%d%n\", clusterName, server, port);\n    }","commit_id":"59a6a5d82dc088dac8f1d98bc48a6426d75dc1a2","url":"https://github.com/apache/cassandra"},{"original_method":"public void processArgs(CliSessionState css, String[] args)\n    {\n        CommandLineParser parser = new GnuParser();\n\n        try\n        {\n            CommandLine cmd = parser.parse(options, args, false);\n\n            if (cmd.hasOption(HOST_OPTION))\n            {\n                css.hostName = cmd.getOptionValue(HOST_OPTION);\n            }\n            else\n            {\n                css.hostName = DEFAULT_HOST;\n            }\n\n            // Look to see if frame has been specified\n            if (cmd.hasOption(UNFRAME_OPTION))\n            {\n                css.framed = false;\n            }\n\n            // Look to see if frame has been specified\n            if (cmd.hasOption(DEBUG_OPTION))\n            {\n                css.debug = true;\n            }\n\n            // Look for optional args.\n            if (cmd.hasOption(PORT_OPTION))\n            {\n                css.thriftPort = Integer.parseInt(cmd.getOptionValue(PORT_OPTION));\n            }\n            else\n            {\n                css.thriftPort = DEFAULT_THRIFT_PORT;\n            }\n\n            // Look for authentication credentials (username and password)\n            if (cmd.hasOption(USERNAME_OPTION))\n            {\n            \tcss.username = cmd.getOptionValue(USERNAME_OPTION);\n            }\n            else\n            {\n                css.username = \"default\";\n            }\n\n            if (cmd.hasOption(PASSWORD_OPTION))\n            {\n            \tcss.password = cmd.getOptionValue(PASSWORD_OPTION);\n            }\n            else\n            {\n                css.password = \"\";\n            }\n\n            // Look for keyspace\n            if (cmd.hasOption(KEYSPACE_OPTION))\n            {\n            \tcss.keyspace = cmd.getOptionValue(KEYSPACE_OPTION);\n            }\n\n            if (cmd.hasOption(BATCH_OPTION))\n            {\n                css.batch = true;\n            }\n\n            if (cmd.hasOption(FILE_OPTION))\n            {\n                css.filename = cmd.getOptionValue(FILE_OPTION);\n            }\n\n            if (cmd.hasOption(JMX_PORT_OPTION))\n            {\n                css.jmxPort = Integer.parseInt(cmd.getOptionValue(JMX_PORT_OPTION));\n            }\n\n            if (cmd.hasOption(HELP_OPTION))\n            {\n                printUsage();\n                System.exit(1);\n            }\n\n            if (cmd.hasOption(VERBOSE_OPTION))\n            {\n                css.verbose = true;\n            }\n\n            if (cmd.hasOption(SCHEMA_MIGRATION_WAIT_TIME))\n            {\n                css.schema_mwt = Integer.parseInt(cmd.getOptionValue(SCHEMA_MIGRATION_WAIT_TIME)) * 1000;\n            }\n\n            // Abort if there are any unrecognized arguments left\n            if (cmd.getArgs().length > 0)\n            {\n                System.err.printf(\"Unknown argument: %s\\n\", cmd.getArgs()[0]);\n                System.err.println();\n                printUsage();\n                System.exit(1);\n            }\n        }\n        catch (ParseException e)\n        {\n            System.err.println(e.getMessage());\n            System.err.println();\n            printUsage();\n            System.exit(1);\n        }\n    }","id":96830,"modified_method":"public void processArgs(CliSessionState css, String[] args)\n    {\n        CommandLineParser parser = new GnuParser();\n\n        try\n        {\n            CommandLine cmd = parser.parse(options, args, false);\n\n            if (cmd.hasOption(HOST_OPTION))\n            {\n                css.hostName = cmd.getOptionValue(HOST_OPTION);\n            }\n            else\n            {\n                css.hostName = DEFAULT_HOST;\n            }\n\n            // Look to see if frame has been specified\n            if (cmd.hasOption(UNFRAME_OPTION))\n            {\n                if (cmd.hasOption(TRANSPORT_FACTORY))\n                    throw new IllegalArgumentException(\"--unframed and --transport-factory options should not be fixed.\");\n\n                css.framed = false;\n                css.transportFactory = new SimpleTransportFactory();\n            }\n\n            if (cmd.hasOption(TRANSPORT_FACTORY))\n                css.transportFactory = validateAndSetTransportFactory(cmd.getOptionValue(TRANSPORT_FACTORY));\n\n            // Look to see if frame has been specified\n            if (cmd.hasOption(DEBUG_OPTION))\n            {\n                css.debug = true;\n            }\n\n            // Look for optional args.\n            if (cmd.hasOption(PORT_OPTION))\n            {\n                css.thriftPort = Integer.parseInt(cmd.getOptionValue(PORT_OPTION));\n            }\n            else\n            {\n                css.thriftPort = DEFAULT_THRIFT_PORT;\n            }\n\n            // Look for authentication credentials (username and password)\n            if (cmd.hasOption(USERNAME_OPTION))\n            {\n            \tcss.username = cmd.getOptionValue(USERNAME_OPTION);\n            }\n            else\n            {\n                css.username = \"default\";\n            }\n\n            if (cmd.hasOption(PASSWORD_OPTION))\n            {\n            \tcss.password = cmd.getOptionValue(PASSWORD_OPTION);\n            }\n            else\n            {\n                css.password = \"\";\n            }\n\n            // Look for keyspace\n            if (cmd.hasOption(KEYSPACE_OPTION))\n            {\n            \tcss.keyspace = cmd.getOptionValue(KEYSPACE_OPTION);\n            }\n\n            if (cmd.hasOption(BATCH_OPTION))\n            {\n                css.batch = true;\n            }\n\n            if (cmd.hasOption(FILE_OPTION))\n            {\n                css.filename = cmd.getOptionValue(FILE_OPTION);\n            }\n\n            if (cmd.hasOption(JMX_PORT_OPTION))\n            {\n                css.jmxPort = Integer.parseInt(cmd.getOptionValue(JMX_PORT_OPTION));\n            }\n\n            if (cmd.hasOption(HELP_OPTION))\n            {\n                printUsage();\n                System.exit(1);\n            }\n\n            if (cmd.hasOption(VERBOSE_OPTION))\n            {\n                css.verbose = true;\n            }\n\n            if (cmd.hasOption(SCHEMA_MIGRATION_WAIT_TIME))\n            {\n                css.schema_mwt = Integer.parseInt(cmd.getOptionValue(SCHEMA_MIGRATION_WAIT_TIME)) * 1000;\n            }\n\n            // Abort if there are any unrecognized arguments left\n            if (cmd.getArgs().length > 0)\n            {\n                System.err.printf(\"Unknown argument: %s\\n\", cmd.getArgs()[0]);\n                System.err.println();\n                printUsage();\n                System.exit(1);\n            }\n        }\n        catch (ParseException e)\n        {\n            System.err.println(e.getMessage());\n            System.err.println();\n            printUsage();\n            System.exit(1);\n        }\n    }","commit_id":"59a6a5d82dc088dac8f1d98bc48a6426d75dc1a2","url":"https://github.com/apache/cassandra"},{"original_method":"@RequestMapping(value=\"/session.json\", method = RequestMethod.GET)\n    public ModelAndView isAuthenticated(HttpServletRequest request, HttpServletResponse response) {\n        final ModelAndView mv = new ModelAndView();\n        \n        HttpSession session = request.getSession(false);\n        \n        if (session == null) {\n            response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        }\n        \n        else {\n            final IPerson person = personManager.getPerson(request);\n            final Map<String, String> attributes = new HashMap<String, String>();\n            attributes.put(\"userName\", person.getUserName());\n            attributes.put(\"displayName\", person.getFullName());\n            mv.addObject(\"person\", attributes);\n        }\n\n        mv.setViewName(\"json\");\n        return mv;\n\n    }","id":96831,"modified_method":"@RequestMapping(value=\"/session.json\", method = RequestMethod.GET)\n    public ModelAndView isAuthenticated(HttpServletRequest request, HttpServletResponse response) {\n        final ModelAndView mv = new ModelAndView();\n        \n        HttpSession session = request.getSession(false);\n        \n        if (session == null) {\n            response.setStatus(HttpServletResponse.SC_NOT_FOUND);\n        }\n        \n        else {\n            final IPerson person = personManager.getPerson(request);\n            final String key = portalEventFactory.getPortalEventSessionId(request, person);\n            final Map<String, String> attributes = new HashMap<String, String>();\n            attributes.put(\"userName\", person.getUserName());\n            attributes.put(\"displayName\", person.isGuest() ? \"Guest\" : person.getFullName());\n            attributes.put(\"sessionKey\", person.isGuest() ? null: key); //only provide keys to non guest users\n            attributes.put(\"version\", uPortalVersion);\n            try {\n                attributes.put(\"serverName\", InetAddress.getLocalHost().getHostName());\n            } catch (UnknownHostException e) {\n                logger.warn(\"Wasn't able to get server information\", e);\n                attributes.put(\"serverName\", \"unknown\");\n            }\n            mv.addObject(\"person\", attributes);\n        }\n\n        mv.setViewName(\"json\");\n        return mv;\n\n    }","commit_id":"a6e0068b8b4b162b89109e85c55abd6ab213a0a2","url":"https://github.com/Jasig/uPortal"},{"original_method":"protected void transformScm( MavenProject project, Element rootElement, Namespace namespace,\n                                 ReleaseConfiguration releaseConfiguration, String projectId,\n                                 ScmRepository scmRepository )\n        throws ReleaseExecutionException\n    {\n        // If SCM is null in original model, it is inherited, no mods needed\n        if ( project.getScm() != null )\n        {\n            Element scmRoot = rootElement.getChild( \"scm\", namespace );\n            if ( scmRoot != null )\n            {\n                Scm scm = (Scm) releaseConfiguration.getOriginalScmInfo().get( projectId );\n                if ( scm == null )\n                {\n                    throw new ReleaseExecutionException(\n                        \"Unable to find original SCM info for '\" + project.getName() + \"'\" );\n                }\n\n                scmRoot.getChild( \"connection\", namespace ).setText( scm.getConnection() );\n\n                Element devConnection = scmRoot.getChild( \"developerConnection\", namespace );\n                if ( devConnection != null )\n                {\n                    devConnection.setText( scm.getDeveloperConnection() );\n                }\n\n                Element url = scmRoot.getChild( \"url\", namespace );\n                if ( url != null )\n                {\n                    url.setText( scm.getUrl() );\n                }\n            }\n        }\n    }","id":96832,"modified_method":"protected void transformScm( MavenProject project, Element rootElement, Namespace namespace,\n                                 ReleaseConfiguration releaseConfiguration, String projectId,\n                                 ScmRepository scmRepository )\n        throws ReleaseExecutionException\n    {\n        // If SCM is null in original model, it is inherited, no mods needed\n        if ( project.getScm() != null )\n        {\n            Element scmRoot = rootElement.getChild( \"scm\", namespace );\n            if ( scmRoot != null )\n            {\n                Scm scm = (Scm) releaseConfiguration.getOriginalScmInfo().get( projectId );\n                if ( scm == null )\n                {\n                    throw new ReleaseExecutionException(\n                        \"Unable to find original SCM info for '\" + project.getName() + \"'\" );\n                }\n\n                scmRoot.getChild( \"connection\", namespace ).setText( scm.getConnection() );\n\n                Element devConnection = scmRoot.getChild( \"developerConnection\", namespace );\n                if ( devConnection != null )\n                {\n                    devConnection.setText( scm.getDeveloperConnection() );\n                }\n\n                Element url = scmRoot.getChild( \"url\", namespace );\n                if ( url != null )\n                {\n                    url.setText( scm.getUrl() );\n                }\n\n                ScmTranslator translator = (ScmTranslator) scmTranslators.get( scmRepository.getProvider() );\n                if ( translator != null )\n                {\n                    String resolvedTag = translator.resolveTag( null, scm.getTag() );\n\n                    Element tagElement = scmRoot.getChild( \"tag\", namespace );\n                    if ( tagElement != null )\n                    {\n                        if ( resolvedTag != null )\n                        {\n                            tagElement.setText( resolvedTag );\n                        }\n                        else\n                        {\n                            int index = scmRoot.indexOf( tagElement );\n                            scmRoot.removeContent( index );\n                            for ( int i = index - 1; i >= 0; i-- )\n                            {\n                                if ( scmRoot.getContent( i ) instanceof Text )\n                                {\n                                    scmRoot.removeContent( i );\n                                }\n                                else\n                                {\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    else\n                    {\n                        if ( resolvedTag != null )\n                        {\n                            Element element = new Element( \"tag\", namespace );\n                            element.setText( resolvedTag );\n                            scmRoot.addContent( \"  \" ).addContent( element ).addContent( \"\\n  \" );\n                        }\n                    }\n                }\n            }\n        }\n    }","commit_id":"4f214ce9080edc9af24957866f8ef2354ce30fac","url":"https://github.com/apache/maven-plugins"},{"original_method":"protected ReleaseConfiguration createConfigurationFromProjects( String path, boolean copyFiles )\n        throws Exception\n    {\n        ReleaseConfiguration releaseConfiguration =\n            createConfigurationFromProjects( \"rewrite-for-development/\", path, copyFiles );\n        releaseConfiguration.setUrl( \"scm:svn:file://localhost/tmp/scm-repo\" );\n        releaseConfiguration.setWorkingDirectory( getTestFile( \"target/test/checkout\" ) );\n\n        return releaseConfiguration;\n    }","id":96833,"modified_method":"protected ReleaseConfiguration createConfigurationFromProjects( String path, boolean copyFiles )\n        throws Exception\n    {\n        ReleaseConfiguration releaseConfiguration =\n            createConfigurationFromProjects( \"rewrite-for-development/\", path, copyFiles );\n\n        MavenProject rootProject = (MavenProject) releaseConfiguration.getReactorProjects().get( 0 );\n        if ( rootProject.getScm() == null )\n        {\n            releaseConfiguration.setUrl( \"scm:svn:file://localhost/tmp/scm-repo/trunk\" );\n        }\n        else\n        {\n            releaseConfiguration.setUrl( rootProject.getScm().getConnection() );\n        }\n\n        releaseConfiguration.setWorkingDirectory( getTestFile( \"target/test/checkout\" ) );\n\n        return releaseConfiguration;\n    }","commit_id":"4f214ce9080edc9af24957866f8ef2354ce30fac","url":"https://github.com/apache/maven-plugins"},{"original_method":"protected void transformScm( MavenProject project, Element rootElement, Namespace namespace,\n                                 ReleaseConfiguration releaseConfiguration, String projectId,\n                                 ScmRepository scmRepository )\n    {\n        // If SCM is null in original model, it is inherited, no mods needed\n        if ( project.getScm() != null )\n        {\n            Element scmRoot = rootElement.getChild( \"scm\", namespace );\n            if ( scmRoot != null )\n            {\n                releaseConfiguration.mapOriginalScmInfo( projectId, project.getScm() );\n\n                ScmTranslator translator = (ScmTranslator) scmTranslators.get( scmRepository.getProvider() );\n                if ( translator != null )\n                {\n                    Scm scm = project.getScm();\n                    String tag = releaseConfiguration.getReleaseLabel();\n                    scmRoot.getChild( \"connection\", namespace ).setText(\n                        translator.translateTagUrl( scm.getConnection(), tag ) );\n\n                    Element devConnection = scmRoot.getChild( \"developerConnection\", namespace );\n                    if ( devConnection != null )\n                    {\n                        devConnection.setText( translator.translateTagUrl( scm.getDeveloperConnection(), tag ) );\n                    }\n\n                    Element url = scmRoot.getChild( \"url\", namespace );\n                    if ( url != null )\n                    {\n                        url.setText( translator.translateTagUrl( scm.getUrl(), tag ) );\n                    }\n                }\n                else\n                {\n                    getLogger().debug( \"No SCM translator found - skipping rewrite\" );\n                }\n            }\n        }\n    }","id":96834,"modified_method":"protected void transformScm( MavenProject project, Element rootElement, Namespace namespace,\n                                 ReleaseConfiguration releaseConfiguration, String projectId,\n                                 ScmRepository scmRepository )\n    {\n        // If SCM is null in original model, it is inherited, no mods needed\n        if ( project.getScm() != null )\n        {\n            Element scmRoot = rootElement.getChild( \"scm\", namespace );\n            if ( scmRoot != null )\n            {\n                releaseConfiguration.mapOriginalScmInfo( projectId, project.getScm() );\n\n                ScmTranslator translator = (ScmTranslator) scmTranslators.get( scmRepository.getProvider() );\n                if ( translator != null )\n                {\n                    Scm scm = project.getOriginalModel().getScm();\n                    String tag = releaseConfiguration.getReleaseLabel();\n                    scmRoot.getChild( \"connection\", namespace ).setText(\n                        translator.translateTagUrl( scm.getConnection(), tag ) );\n\n                    Element devConnection = scmRoot.getChild( \"developerConnection\", namespace );\n                    if ( devConnection != null )\n                    {\n                        devConnection.setText( translator.translateTagUrl( scm.getDeveloperConnection(), tag ) );\n                    }\n\n                    Element url = scmRoot.getChild( \"url\", namespace );\n                    if ( url != null )\n                    {\n                        url.setText( translator.translateTagUrl( scm.getUrl(), tag ) );\n                    }\n\n                    String resolvedTag = translator.resolveTag( scm.getTag(), tag );\n                    Element tagElement = scmRoot.getChild( \"tag\", namespace );\n                    if ( tagElement != null )\n                    {\n                        if ( resolvedTag != null )\n                        {\n                            tagElement.setText( resolvedTag );\n                        }\n                        else\n                        {\n                            tagElement.getParentElement().removeChild( \"tag\", namespace );\n                        }\n                    }\n                    else\n                    {\n                        if ( resolvedTag != null )\n                        {\n                            Element element = new Element( \"tag\", namespace );\n                            element.setText( resolvedTag );\n                            scmRoot.addContent( \"  \" ).addContent( element ).addContent( \"\\n  \" );\n                        }\n                    }\n                }\n                else\n                {\n                    getLogger().debug( \"No SCM translator found - skipping rewrite\" );\n                }\n            }\n        }\n    }","commit_id":"4f214ce9080edc9af24957866f8ef2354ce30fac","url":"https://github.com/apache/maven-plugins"},{"original_method":"protected ReleaseConfiguration createConfigurationFromProjects( String path, boolean copyFiles )\n        throws Exception\n    {\n        ReleaseConfiguration releaseConfiguration =\n            createConfigurationFromProjects( \"rewrite-for-release/\", path, copyFiles );\n        releaseConfiguration.setUrl( \"scm:svn:file://localhost/tmp/scm-repo\" );\n        releaseConfiguration.setReleaseLabel( \"release-label\" );\n        releaseConfiguration.setWorkingDirectory( getTestFile( \"target/test/checkout\" ) );\n\n        return releaseConfiguration;\n    }","id":96835,"modified_method":"protected ReleaseConfiguration createConfigurationFromProjects( String path, boolean copyFiles )\n        throws Exception\n    {\n        ReleaseConfiguration releaseConfiguration =\n            createConfigurationFromProjects( \"rewrite-for-release/\", path, copyFiles );\n\n        MavenProject rootProject = (MavenProject) releaseConfiguration.getReactorProjects().get( 0 );\n        if ( rootProject.getScm() == null )\n        {\n            releaseConfiguration.setUrl( \"scm:svn:file://localhost/tmp/scm-repo/trunk\" );\n        }\n        else\n        {\n            releaseConfiguration.setUrl( rootProject.getScm().getConnection() );\n        }\n\n        releaseConfiguration.setReleaseLabel( \"release-label\" );\n        releaseConfiguration.setWorkingDirectory( getTestFile( \"target/test/checkout\" ) );\n\n        return releaseConfiguration;\n    }","commit_id":"4f214ce9080edc9af24957866f8ef2354ce30fac","url":"https://github.com/apache/maven-plugins"},{"original_method":"protected void doPost( HttpServletRequest request, HttpServletResponse response ) throws IOException\n    {\n        ScrService scrService = getScrService();\n        if ( scrService != null )\n        {\n\n            long componentId = getComponentId( request );\n            Component component = scrService.getComponent( componentId );\n\n            if ( component != null )\n            {\n                String op = request.getParameter( OPERATION );\n                if ( OPERATION_ENABLE.equals( op ) )\n                {\n                    component.enable();\n                }\n                else if ( OPERATION_DISABLE.equals( op ) )\n                {\n                    component.disable();\n                }\n\n                sendAjaxDetails( component, response );\n            }\n\n        }\n    }","id":96836,"modified_method":"protected void doPost( HttpServletRequest request, HttpServletResponse response ) throws IOException\n    {\n        final RequestInfo reqInfo = new RequestInfo(request);\n        if ( reqInfo.component == null && reqInfo.componentRequested ) {\n            response.setStatus(404);\n            return;\n        }\n        if ( !reqInfo.componentRequested ) {\n            response.setStatus(500);\n            return;\n        }\n        String op = request.getParameter( OPERATION );\n        if ( OPERATION_ENABLE.equals( op ) )\n        {\n            reqInfo.component.enable();\n        }\n        else if ( OPERATION_DISABLE.equals( op ) )\n        {\n            reqInfo.component.disable();\n        }\n\n        final PrintWriter pw = response.getWriter();\n        response.setContentType( \"application/json\" );\n        response.setCharacterEncoding( \"UTF-8\" );\n        renderResult( pw, null);\n    }","commit_id":"7ecffce0c3a13fb58424504960474d0dfadfa50b","url":"https://github.com/apache/felix"},{"original_method":"private void listServices( JSONWriter jw, Component component )\n    {\n        String[] services = component.getServices();\n        if ( services == null )\n        {\n            return;\n        }\n\n        keyVal( jw, \"Service Type\", component.isServiceFactory() ? \"service factory\" : \"service\" );\n\n        StringBuffer buf = new StringBuffer();\n        for ( int i = 0; i < services.length; i++ )\n        {\n            if ( i > 0 )\n            {\n                buf.append( \"<br />\" );\n            }\n            buf.append( services[i] );\n        }\n\n        keyVal( jw, \"Services\", buf.toString() );\n    }","id":96837,"modified_method":"private void listServices( JSONWriter jw, Component component )\n    {\n        String[] services = component.getServices();\n        if ( services == null )\n        {\n            return;\n        }\n\n        keyVal( jw, \"Service Type\", component.isServiceFactory() ? \"service factory\" : \"service\" );\n\n        JSONArray buf = new JSONArray();\n        for ( int i = 0; i < services.length; i++ )\n        {\n            buf.put( services[i] );\n        }\n\n        keyVal( jw, \"Services\", buf );\n    }","commit_id":"7ecffce0c3a13fb58424504960474d0dfadfa50b","url":"https://github.com/apache/felix"},{"original_method":"protected void renderContent( HttpServletRequest request, HttpServletResponse response ) throws IOException\n    {\n        PrintWriter pw = response.getWriter();\n\n        String appRoot = ( String ) request.getAttribute( OsgiManager.ATTR_APP_ROOT );\n        pw.println( \"<script src='\" + appRoot + \"/res/ui/datatable.js' language='JavaScript'><\/script>\" );\n\n        Util.startScript( pw );\n\n        pw.print( \"var components = \" );\n        renderResult( request, pw );\n        pw.println( \";\" );\n\n        pw.println( \"renderDataTable( components );\" );\n\n        Util.endScript( pw );\n    }","id":96838,"modified_method":"protected void renderContent( HttpServletRequest request, HttpServletResponse response ) throws IOException\n    {\n        // get request info from request attribute\n        final RequestInfo reqInfo = getRequestInfo(request);\n        final PrintWriter pw = response.getWriter();\n\n        final String appRoot = ( String ) request.getAttribute( OsgiManager.ATTR_APP_ROOT );\n        Util.script(pw, appRoot, \"jquery-1.3.1.min.js\");\n        Util.script(pw, appRoot, \"jquery.tablesorter-2.0.3.min.js\");\n\n        Util.startScript( pw );\n        pw.println( \"var imgRoot = '\" + appRoot + \"/res/imgs';\");\n        pw.println( \"var drawDetails = \" + reqInfo.componentRequested + \";\");\n        Util.endScript( pw );\n\n        Util.script(pw, appRoot, \"components.js\");\n\n        pw.println( \"<div id='plugin_content'/>\");\n        Util.startScript( pw );\n        pw.print( \"renderComponents(\");\n        renderResult( pw, reqInfo.component );\n        pw.println(\");\" );\n        Util.endScript( pw );\n    }","commit_id":"7ecffce0c3a13fb58424504960474d0dfadfa50b","url":"https://github.com/apache/felix"},{"original_method":"private void sendAjaxDetails( Component component, HttpServletResponse response ) throws IOException\n    {\n\n        // send the result\n        response.setContentType( \"text/javascript\" );\n\n        JSONWriter jw = new JSONWriter( response.getWriter() );\n        try\n        {\n            if ( component != null )\n            {\n                component( jw, component, true );\n            }\n        }\n        catch ( JSONException je )\n        {\n            throw new IOException( je.toString() );\n        }\n    }","id":96839,"modified_method":"protected void doGet( HttpServletRequest request, HttpServletResponse response ) throws ServletException,\n    IOException {\n        final RequestInfo reqInfo = new RequestInfo(request);\n        if ( reqInfo.component == null && reqInfo.componentRequested ) {\n            response.setStatus(404);\n            return;\n        }\n        if ( reqInfo.extension.equals(\"json\")  )\n        {\n            response.setContentType( \"application/json\" );\n            response.setCharacterEncoding( \"UTF-8\" );\n\n            this.renderResult(response.getWriter(), reqInfo.component);\n\n            // nothing more to do\n            return;\n        }\n        super.doGet( request, response );\n    }","commit_id":"7ecffce0c3a13fb58424504960474d0dfadfa50b","url":"https://github.com/apache/felix"},{"original_method":"private void component( JSONWriter jw, Component component, boolean details ) throws JSONException\n    {\n        String id = String.valueOf( component.getId() );\n        String name = component.getName();\n        int state = component.getState();\n\n        jw.object();\n\n        // component information\n        jw.key( \"id\" );\n        jw.value( id );\n        jw.key( \"name\" );\n        jw.value( name );\n        jw.key( \"state\" );\n        jw.value( toStateString( state ) );\n\n        // component actions\n        jw.key( \"actions\" );\n        jw.array();\n\n        jw.object();\n        jw.key( \"name\" );\n        jw.value( \"Enable\" );\n        jw.key( \"link\" );\n        jw.value( OPERATION_ENABLE );\n        jw.key( \"enabled\" );\n        jw.value( state == Component.STATE_DISABLED );\n        jw.endObject();\n\n        jw.object();\n        jw.key( \"name\" );\n        jw.value( \"Disable\" );\n        jw.key( \"link\" );\n        jw.value( OPERATION_DISABLE );\n        jw.key( \"enabled\" );\n        jw.value( state != Component.STATE_DISABLED && state != Component.STATE_DESTROYED );\n        jw.endObject();\n\n        jw.endArray();\n\n        // component details\n        if ( details )\n        {\n            gatherComponentDetails( jw, component );\n        }\n\n        jw.endObject();\n    }","id":96840,"modified_method":"private void component( JSONWriter jw, Component component, boolean details ) throws JSONException\n    {\n        String id = String.valueOf( component.getId() );\n        String name = component.getName();\n        int state = component.getState();\n\n        jw.object();\n\n        // component information\n        jw.key( \"id\" );\n        jw.value( id );\n        jw.key( \"name\" );\n        jw.value( name );\n        jw.key( \"state\" );\n        jw.value( toStateString( state ) );\n\n        final String pid = ( String ) component.getProperties().get( Constants.SERVICE_PID );\n        if ( pid != null )\n        {\n            jw.key(\"pid\");\n            jw.value(pid);\n        }\n        // component actions\n        jw.key( \"actions\" );\n        jw.array();\n\n        if ( state == Component.STATE_DISABLED )\n        {\n            action(jw, true, OPERATION_ENABLE, \"Enable\", \"enable\" );\n        }\n        if ( state != Component.STATE_DISABLED && state != Component.STATE_DESTROYED )\n        {\n            action(jw, true, OPERATION_DISABLE, \"Disable\", \"disable\" );\n        }\n        if ( pid != null )\n        {\n            action(jw, true, OPERATION_EDIT, \"Edit\", \"edit\" );\n        }\n\n        jw.endArray();\n\n        // component details\n        if ( details )\n        {\n            gatherComponentDetails( jw, component );\n        }\n\n        jw.endObject();\n    }","commit_id":"7ecffce0c3a13fb58424504960474d0dfadfa50b","url":"https://github.com/apache/felix"},{"original_method":"private void listReferences( JSONWriter jw, Component component )\n    {\n        Reference[] refs = component.getReferences();\n        if ( refs != null )\n        {\n            for ( int i = 0; i < refs.length; i++ )\n            {\n                StringBuffer buf = new StringBuffer();\n                buf.append( refs[i].isSatisfied() ? \"Satisfied\" : \"Unsatisfied\" ).append( \"<br />\" );\n                buf.append( \"Service Name: \" ).append( refs[i].getServiceName() ).append( \"<br />\" );\n                if ( refs[i].getTarget() != null )\n                {\n                    buf.append( \"Target Filter: \" ).append( refs[i].getTarget() ).append( \"<br />\" );\n                }\n                buf.append( \"Multiple: \" ).append( refs[i].isMultiple() ? \"multiple\" : \"single\" ).append( \"<br />\" );\n                buf.append( \"Optional: \" ).append( refs[i].isOptional() ? \"optional\" : \"mandatory\" ).append( \"<br />\" );\n                buf.append( \"Policy: \" ).append( refs[i].isStatic() ? \"static\" : \"dynamic\" ).append( \"<br />\" );\n\n                // list bound services\n                ServiceReference[] boundRefs = refs[i].getServiceReferences();\n                if ( boundRefs != null && boundRefs.length > 0 )\n                {\n                    for ( int j = 0; j < boundRefs.length; j++ )\n                    {\n                        if ( j > 0 )\n                        {\n                            buf.append( \"<br />\" );\n                        }\n\n                        buf.append( \"Bound Service ID \" );\n                        buf.append( boundRefs[j].getProperty( Constants.SERVICE_ID ) );\n\n                        String name = ( String ) boundRefs[j].getProperty( ComponentConstants.COMPONENT_NAME );\n                        if ( name == null )\n                        {\n                            name = ( String ) boundRefs[j].getProperty( Constants.SERVICE_PID );\n                            if ( name == null )\n                            {\n                                name = ( String ) boundRefs[j].getProperty( Constants.SERVICE_DESCRIPTION );\n                            }\n                        }\n                        if ( name != null )\n                        {\n                            buf.append( \" (\" );\n                            buf.append( name );\n                            buf.append( \")\" );\n                        }\n                    }\n                }\n                else\n                {\n                    buf.append( \"No Services bound\" );\n                }\n                buf.append( \"<br />\" );\n\n                keyVal( jw, \"Reference \" + refs[i].getName(), buf.toString() );\n            }\n        }\n    }","id":96841,"modified_method":"private void listReferences( JSONWriter jw, Component component )\n    {\n        Reference[] refs = component.getReferences();\n        if ( refs != null )\n        {\n            for ( int i = 0; i < refs.length; i++ )\n            {\n                JSONArray buf = new JSONArray();\n                buf.put( refs[i].isSatisfied() ? \"Satisfied\" : \"Unsatisfied\" );\n                buf.put( \"Service Name: \" + refs[i].getServiceName());\n                if ( refs[i].getTarget() != null )\n                {\n                    buf.put( \"Target Filter: \" + refs[i].getTarget() );\n                }\n                buf.put( \"Multiple: \" + (refs[i].isMultiple() ? \"multiple\" : \"single\" ));\n                buf.put( \"Optional: \" + (refs[i].isOptional() ? \"optional\" : \"mandatory\" ));\n                buf.put( \"Policy: \" + (refs[i].isStatic() ? \"static\" : \"dynamic\" ));\n\n                // list bound services\n                ServiceReference[] boundRefs = refs[i].getServiceReferences();\n                if ( boundRefs != null && boundRefs.length > 0 )\n                {\n                    for ( int j = 0; j < boundRefs.length; j++ )\n                    {\n                        final StringBuffer b = new StringBuffer();\n                        b.append( \"Bound Service ID \" );\n                        b.append( boundRefs[j].getProperty( Constants.SERVICE_ID ) );\n\n                        String name = ( String ) boundRefs[j].getProperty( ComponentConstants.COMPONENT_NAME );\n                        if ( name == null )\n                        {\n                            name = ( String ) boundRefs[j].getProperty( Constants.SERVICE_PID );\n                            if ( name == null )\n                            {\n                                name = ( String ) boundRefs[j].getProperty( Constants.SERVICE_DESCRIPTION );\n                            }\n                        }\n                        if ( name != null )\n                        {\n                            b.append( \" (\" );\n                            b.append( name );\n                            b.append( \")\" );\n                        }\n                        buf.put(b.toString());\n                    }\n                }\n                else\n                {\n                    buf.put( \"No Services bound\" );\n                }\n\n                keyVal( jw, \"Reference \" + refs[i].getName(), buf.toString() );\n            }\n        }\n    }","commit_id":"7ecffce0c3a13fb58424504960474d0dfadfa50b","url":"https://github.com/apache/felix"},{"original_method":"protected long getComponentId( HttpServletRequest request )\n    {\n        String componentIdPar = request.getParameter( ComponentsServlet.COMPONENT_ID );\n        if ( componentIdPar == null )\n        {\n            String info = request.getPathInfo();\n            componentIdPar = info.substring( info.lastIndexOf( '/' ) + 1 );\n        }\n\n        try\n        {\n            return Long.parseLong( componentIdPar );\n        }\n        catch ( NumberFormatException nfe )\n        {\n            // TODO: log\n        }\n\n        // no bundleId or wrong format\n        return -1;\n    }","id":96842,"modified_method":"public static RequestInfo getRequestInfo(final HttpServletRequest request)\n    {\n        return (RequestInfo)request.getAttribute(ComponentsServlet.class.getName());\n    }","commit_id":"7ecffce0c3a13fb58424504960474d0dfadfa50b","url":"https://github.com/apache/felix"},{"original_method":"private void listProperties( JSONWriter jw, Component component )\n    {\n        Dictionary props = component.getProperties();\n        if ( props != null )\n        {\n            StringBuffer buf = new StringBuffer();\n            TreeSet keys = new TreeSet( Collections.list( props.keys() ) );\n            for ( Iterator ki = keys.iterator(); ki.hasNext(); )\n            {\n                String key = ( String ) ki.next();\n                buf.append( key ).append( \" = \" );\n\n                Object prop = props.get( key );\n                if ( prop.getClass().isArray() )\n                {\n                    prop = Arrays.asList( ( Object[] ) prop );\n                }\n                buf.append( prop );\n                if ( ki.hasNext() )\n                {\n                    buf.append( \"<br />\" );\n                }\n            }\n\n            keyVal( jw, \"Properties\", buf.toString() );\n        }\n\n    }","id":96843,"modified_method":"private void listProperties( JSONWriter jw, Component component )\n    {\n        Dictionary props = component.getProperties();\n        if ( props != null )\n        {\n            JSONArray buf = new JSONArray();\n            TreeSet keys = new TreeSet( Collections.list( props.keys() ) );\n            for ( Iterator ki = keys.iterator(); ki.hasNext(); )\n            {\n                final String key = ( String ) ki.next();\n                final StringBuffer b = new StringBuffer();\n                b.append( key ).append( \" = \" );\n\n                Object prop = props.get( key );\n                if ( prop.getClass().isArray() )\n                {\n                    prop = Arrays.asList( ( Object[] ) prop );\n                }\n                b.append( prop );\n                buf.put(b.toString());\n            }\n\n            keyVal( jw, \"Properties\", buf );\n        }\n\n    }","commit_id":"7ecffce0c3a13fb58424504960474d0dfadfa50b","url":"https://github.com/apache/felix"},{"original_method":"public FactHandle assertObject(Object object,\r\n                                   boolean dynamic,\r\n                                   boolean logical,\r\n                                   Rule rule,\r\n                                   Activation activation) throws FactException {\r\n        this.lock.lock();\r\n        try {\r\n\r\n            // check if the object already exists in the WM\r\n            FactHandleImpl handle = (FactHandleImpl) this.identityMap.get( object );\r\n\r\n            // lets see if the object is already logical asserted\r\n            FactStatus logicalState = (FactStatus) this.equalsMap.get( object );\r\n            if ( logicalState == null ) {\r\n                logicalState = STATUS_NEW;\r\n            }\r\n\r\n            // This object is already STATED, we cannot make it justifieable\r\n            if ( (logical) && (logicalState.getStatus() == WorkingMemoryImpl.STATED) ) {\r\n                return null;\r\n            }\r\n\r\n            // return if there is already a logical handle\r\n            if ( (logical) && (logicalState.getStatus() == WorkingMemoryImpl.JUSTIFIED) ) {\r\n                addLogicalDependency( logicalState.getHandle(),\r\n                                      activation,\r\n                                      activation.getPropagationContext(),\r\n                                      rule );\r\n                return logicalState.getHandle();\r\n            }\r\n\r\n            // if we have a handle and this STATED fact was previously STATED\r\n            if ( (handle != null) && (!logical) && (logicalState.getStatus() == WorkingMemoryImpl.STATED) ) {\r\n                return handle;\r\n            }\r\n\r\n            if ( !logical ) {\r\n                // If this stated assertion already has justifications then we need\r\n                // to cancel them\r\n                if ( logicalState.getStatus() == WorkingMemoryImpl.JUSTIFIED ) {\r\n                    handle = logicalState.getHandle();\r\n                    removeLogicalDependencies( handle );\r\n                } else {\r\n                    handle = (FactHandleImpl) newFactHandle();\r\n                }\r\n\r\n                putObject( handle,\r\n                           object );\r\n\r\n                if ( logicalState != WorkingMemoryImpl.STATUS_NEW ) {\r\n                    // make sure status is stated\r\n                    logicalState.setStatus( WorkingMemoryImpl.STATED );\r\n                    logicalState.incCounter();\r\n                } else {\r\n                    this.equalsMap.put( object,\r\n                                        new FactStatus( WorkingMemoryImpl.STATED,\r\n                                                        1 ) );\r\n                }\r\n\r\n                if ( dynamic ) {\r\n                    addPropertyChangeListener( object );\r\n                }\r\n            } else {\r\n\r\n                handle = logicalState.getHandle();\r\n                // we create a lookup handle for the first asserted equals object\r\n                // all future equals objects will use that handle\r\n                if ( handle == null ) {\r\n                    handle = (FactHandleImpl) newFactHandle();\r\n\r\n                    putObject( handle,\r\n                               object );\r\n\r\n                    this.equalsMap.put( object,\r\n                                        new FactStatus( WorkingMemoryImpl.JUSTIFIED,\r\n                                                        handle ) );\r\n                }\r\n                addLogicalDependency( handle,\r\n                                      activation,\r\n                                      activation.getPropagationContext(),\r\n                                      rule );\r\n            }\r\n\r\n            handle.setObject( object );\r\n\r\n            PropagationContext propagationContext = new PropagationContextImpl( this.propagationIdCounter++,\r\n                                                                                PropagationContext.ASSERTION,\r\n                                                                                rule,\r\n                                                                                activation );\r\n\r\n            this.ruleBase.assertObject( handle,\r\n                                        object,\r\n                                        propagationContext,\r\n                                        this );\r\n\r\n            this.workingMemoryEventSupport.fireObjectAsserted( propagationContext,\r\n                                                               handle,\r\n                                                               object );\r\n            \r\n            propagateQueuedActions();\r\n            \r\n            return handle;\r\n        } finally {\r\n            this.lock.unlock();\r\n        }\r\n    }","id":96844,"modified_method":"public FactHandle assertObject(Object object,\r\n                                   boolean dynamic,\r\n                                   boolean logical,\r\n                                   Rule rule,\r\n                                   Activation activation) throws FactException {\r\n        this.lock.lock();\r\n        try {\r\n\r\n            // check if the object already exists in the WM\r\n            FactHandleImpl handle = (FactHandleImpl) this.identityMap.get( object );\r\n\r\n            // lets see if the object is already logical asserted\r\n            FactStatus logicalState = (FactStatus) this.equalsMap.get( object );\r\n            if ( logicalState == null ) {\r\n                logicalState = STATUS_NEW;\r\n            }\r\n\r\n            // This object is already STATED, we cannot make it justifieable\r\n            if ( (logical) && (logicalState.getStatus() == WorkingMemoryImpl.STATED) ) {\r\n                return null;\r\n            }\r\n\r\n            // return if there is already a logical handle\r\n            if ( (logical) && (logicalState.getStatus() == WorkingMemoryImpl.JUSTIFIED) ) {\r\n                addLogicalDependency( logicalState.getHandle(),\r\n                                      activation,\r\n                                      activation.getPropagationContext(),\r\n                                      rule );\r\n                return logicalState.getHandle();\r\n            }\r\n\r\n            // if we have a handle and this STATED fact was previously STATED\r\n            if ( (handle != null) && (!logical) && (logicalState.getStatus() == WorkingMemoryImpl.STATED) ) {\r\n                return handle;\r\n            }\r\n\r\n            if ( !logical ) {\r\n                // If this stated assertion already has justifications then we need\r\n                // to cancel them\r\n                if ( logicalState.getStatus() == WorkingMemoryImpl.JUSTIFIED ) {\r\n                    handle = logicalState.getHandle();\r\n                    removeLogicalDependencies( handle );\r\n                } else {\r\n                    handle = (FactHandleImpl) newFactHandle();\r\n                }\r\n\r\n                putObject( handle,\r\n                           object );\r\n\r\n                if ( logicalState != WorkingMemoryImpl.STATUS_NEW ) {\r\n                    // make sure status is stated\r\n                    logicalState.setStatus( WorkingMemoryImpl.STATED );\r\n                    logicalState.incCounter();\r\n                } else {\r\n                    this.equalsMap.put( object,\r\n                                        new FactStatus( WorkingMemoryImpl.STATED,\r\n                                                        1 ) );\r\n                }\r\n\r\n                if ( dynamic ) {\r\n                    addPropertyChangeListener( object );\r\n                }\r\n            } else {\r\n\r\n                handle = logicalState.getHandle();\r\n                // we create a lookup handle for the first asserted equals object\r\n                // all future equals objects will use that handle\r\n                if ( handle == null ) {\r\n                    handle = (FactHandleImpl) newFactHandle();\r\n\r\n                    putObject( handle,\r\n                               object );\r\n\r\n                    this.equalsMap.put( object,\r\n                                        new FactStatus( WorkingMemoryImpl.JUSTIFIED,\r\n                                                        handle ) );\r\n                }\r\n                addLogicalDependency( handle,\r\n                                      activation,\r\n                                      activation.getPropagationContext(),\r\n                                      rule );\r\n            }\r\n\r\n            handle.setObject( object );\r\n\r\n            PropagationContext propagationContext = new PropagationContextImpl( this.propagationIdCounter++,\r\n                                                                                PropagationContext.ASSERTION,\r\n                                                                                rule,\r\n                                                                                activation );\r\n\r\n            this.ruleBase.assertObject( handle,\r\n                                        object,\r\n                                        propagationContext,\r\n                                        this );\r\n\r\n            this.workingMemoryEventSupport.fireObjectAsserted( propagationContext,\r\n                                                               handle,\r\n                                                               object );\r\n            \r\n            if ( !this.factQueue.isEmpty() ) {\r\n                propagateQueuedActions();\r\n            }\r\n            \r\n            return handle;\r\n        } finally {\r\n            this.lock.unlock();\r\n        }\r\n    }","commit_id":"bec496d4604b06c74c5feb69c66956e8c242d4b1","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\r\n     * @see WorkingMemory\r\n     */\r\n    public void retractObject(FactHandle handle,\r\n                              boolean removeLogical,\r\n                              boolean updateEqualsMap,\r\n                              Rule rule,\r\n                              Activation activation) throws FactException {\r\n        this.lock.lock();\r\n        try {\r\n            removePropertyChangeListener( handle );\r\n\r\n            PropagationContext propagationContext = new PropagationContextImpl( this.propagationIdCounter++,\r\n                                                                                PropagationContext.RETRACTION,\r\n                                                                                rule,\r\n                                                                                activation );\r\n\r\n            this.ruleBase.retractObject( handle,\r\n                                         propagationContext,\r\n                                         this );\r\n\r\n            Object oldObject = removeObject( handle );\r\n\r\n            /* check to see if this was a logical asserted object */\r\n            if ( removeLogical ) {\r\n                removeLogicalDependencies( handle );\r\n                //this.equalsMap.remove( oldObject );\r\n            }\r\n\r\n            if ( removeLogical || updateEqualsMap ) {\r\n                FactStatus status = (FactStatus) this.equalsMap.get( oldObject );\r\n                if ( status != null ) {\r\n                    status.decCounter();\r\n                    if ( status.getCounter() <= 0 ) {\r\n                        this.equalsMap.remove( oldObject );\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.factHandlePool.push( ((FactHandleImpl) handle).getId() );\r\n\r\n            this.workingMemoryEventSupport.fireObjectRetracted( propagationContext,\r\n                                                                handle,\r\n                                                                oldObject );\r\n\r\n            ((FactHandleImpl) handle).invalidate();\r\n            \r\n            propagateQueuedActions();\r\n        } finally {\r\n            this.lock.unlock();\r\n        }\r\n    }","id":96845,"modified_method":"/**\r\n     * @see WorkingMemory\r\n     */\r\n    public void retractObject(FactHandle handle,\r\n                              boolean removeLogical,\r\n                              boolean updateEqualsMap,\r\n                              Rule rule,\r\n                              Activation activation) throws FactException {\r\n        this.lock.lock();\r\n        try {\r\n            removePropertyChangeListener( handle );\r\n\r\n            PropagationContext propagationContext = new PropagationContextImpl( this.propagationIdCounter++,\r\n                                                                                PropagationContext.RETRACTION,\r\n                                                                                rule,\r\n                                                                                activation );\r\n\r\n            this.ruleBase.retractObject( handle,\r\n                                         propagationContext,\r\n                                         this );\r\n\r\n            Object oldObject = removeObject( handle );\r\n\r\n            /* check to see if this was a logical asserted object */\r\n            if ( removeLogical ) {\r\n                removeLogicalDependencies( handle );\r\n                //this.equalsMap.remove( oldObject );\r\n            }\r\n\r\n            if ( removeLogical || updateEqualsMap ) {\r\n                FactStatus status = (FactStatus) this.equalsMap.get( oldObject );\r\n                if ( status != null ) {\r\n                    status.decCounter();\r\n                    if ( status.getCounter() <= 0 ) {\r\n                        this.equalsMap.remove( oldObject );\r\n                    }\r\n                }\r\n            }\r\n\r\n            this.factHandlePool.push( ((FactHandleImpl) handle).getId() );\r\n\r\n            this.workingMemoryEventSupport.fireObjectRetracted( propagationContext,\r\n                                                                handle,\r\n                                                                oldObject );\r\n\r\n            ((FactHandleImpl) handle).invalidate();\r\n            \r\n            if ( !this.factQueue.isEmpty() ) {\r\n                propagateQueuedActions();\r\n            }\r\n        } finally {\r\n            this.lock.unlock();\r\n        }\r\n    }","commit_id":"bec496d4604b06c74c5feb69c66956e8c242d4b1","url":"https://github.com/droolsjbpm/drools"},{"original_method":"/**\r\n     * @see WorkingMemory\r\n     */\r\n    public void modifyObject(FactHandle handle,\r\n                             Object object,\r\n                             Rule rule,\r\n                             Activation activation) throws FactException {\r\n        this.lock.lock();\r\n        try {\r\n            Object originalObject = removeObject( handle );\r\n\r\n            if ( originalObject == null ) {\r\n                throw new NoSuchFactObjectException( handle );\r\n            }\r\n\r\n            this.handleFactory.increaseFactHandleRecency( handle );\r\n\r\n            putObject( handle,\r\n                       object );\r\n\r\n            /* check to see if this is a logically asserted object */\r\n            FactHandleImpl handleImpl = (FactHandleImpl) handle;\r\n            if ( this.justified.get( handleImpl.getId() ) != null ) {\r\n                this.equalsMap.remove( originalObject );\r\n                this.equalsMap.put( object,\r\n                                    new FactStatus( WorkingMemoryImpl.JUSTIFIED,\r\n                                                    handleImpl ) );\r\n            }\r\n\r\n            PropagationContext propagationContext = new PropagationContextImpl( this.propagationIdCounter++,\r\n                                                                                PropagationContext.MODIFICATION,\r\n                                                                                rule,\r\n                                                                                activation );\r\n\r\n            this.ruleBase.modifyObject( handle,\r\n                                        propagationContext,\r\n                                        this );\r\n            // this.ruleBase.retractObject( handle,\r\n            // propagationContext,\r\n            // this );\r\n            //\r\n            // this.ruleBase.assertObject( handle,\r\n            // object,\r\n            // propagationContext,\r\n            // this );\r\n\r\n            /*\r\n             * this.ruleBase.modifyObject( handle, object, this );\r\n             */\r\n            this.workingMemoryEventSupport.fireObjectModified( propagationContext,\r\n                                                               handle,\r\n                                                               originalObject,\r\n                                                               object );\r\n            \r\n            propagateQueuedActions();\r\n        } finally {\r\n            this.lock.unlock();\r\n        }\r\n    }","id":96846,"modified_method":"/**\r\n     * @see WorkingMemory\r\n     */\r\n    public void modifyObject(FactHandle handle,\r\n                             Object object,\r\n                             Rule rule,\r\n                             Activation activation) throws FactException {\r\n        this.lock.lock();\r\n        try {\r\n            Object originalObject = removeObject( handle );\r\n\r\n            if ( originalObject == null ) {\r\n                throw new NoSuchFactObjectException( handle );\r\n            }\r\n\r\n            this.handleFactory.increaseFactHandleRecency( handle );\r\n\r\n            putObject( handle,\r\n                       object );\r\n\r\n            /* check to see if this is a logically asserted object */\r\n            FactHandleImpl handleImpl = (FactHandleImpl) handle;\r\n            if ( this.justified.get( handleImpl.getId() ) != null ) {\r\n                this.equalsMap.remove( originalObject );\r\n                this.equalsMap.put( object,\r\n                                    new FactStatus( WorkingMemoryImpl.JUSTIFIED,\r\n                                                    handleImpl ) );\r\n            }\r\n\r\n            PropagationContext propagationContext = new PropagationContextImpl( this.propagationIdCounter++,\r\n                                                                                PropagationContext.MODIFICATION,\r\n                                                                                rule,\r\n                                                                                activation );\r\n\r\n            this.ruleBase.modifyObject( handle,\r\n                                        propagationContext,\r\n                                        this );\r\n            // this.ruleBase.retractObject( handle,\r\n            // propagationContext,\r\n            // this );\r\n            //\r\n            // this.ruleBase.assertObject( handle,\r\n            // object,\r\n            // propagationContext,\r\n            // this );\r\n\r\n            /*\r\n             * this.ruleBase.modifyObject( handle, object, this );\r\n             */\r\n            this.workingMemoryEventSupport.fireObjectModified( propagationContext,\r\n                                                               handle,\r\n                                                               originalObject,\r\n                                                               object );\r\n            \r\n            if ( !this.factQueue.isEmpty() ) {\r\n                propagateQueuedActions();\r\n            }\r\n        } finally {\r\n            this.lock.unlock();\r\n        }\r\n    }","commit_id":"bec496d4604b06c74c5feb69c66956e8c242d4b1","url":"https://github.com/droolsjbpm/drools"},{"original_method":"@Nullable\n  public static AppEngineAuthData createAuthData(@NotNull Project project, @NotNull AppEngineServerConfiguration configuration) {\n    if (configuration.isOAuth2()) {\n      return AppEngineAuthData.oauth2();\n    }\n\n    String email = configuration.getEmail();\n    if (!StringUtil.isEmpty(email)) {\n      String password = getStoredPassword(project, email);\n      if (!StringUtil.isEmpty(password)) {\n        return AppEngineAuthData.login(email, password);\n      }\n    }\n\n    AppEngineCloudConfigurable configurable = new AppEngineCloudConfigurable(configuration, project);\n    boolean ok = ShowSettingsUtil.getInstance().editConfigurable(project, configurable);\n    if (!ok) {\n      return null;\n    }\n    if (configurable.isOAuth2()) {\n      return AppEngineAuthData.oauth2();\n    }\n    return AppEngineAuthData.login(configurable.getEmail(), configurable.getPassword());\n  }","id":96847,"modified_method":"@Nullable\n  public static AppEngineAuthData createAuthData(@NotNull Project project, @NotNull AppEngineServerConfiguration configuration) {\n    if (configuration.isOAuth2()) {\n      return AppEngineAuthData.oauth2();\n    }\n\n    String email = configuration.getEmail();\n    if (!StringUtil.isEmpty(email) && configuration.isPasswordStored()) {\n      String password = getStoredPassword(project, email);\n      if (!StringUtil.isEmpty(password)) {\n        return AppEngineAuthData.login(email, password);\n      }\n    }\n\n    AppEngineCloudConfigurable configurable = new AppEngineCloudConfigurable(configuration, project, false);\n    boolean ok = ShowSettingsUtil.getInstance().editConfigurable(project, configurable);\n    if (!ok) {\n      return null;\n    }\n    if (configurable.isOAuth2()) {\n      return AppEngineAuthData.oauth2();\n    }\n    return AppEngineAuthData.login(configurable.getEmail(), configurable.getPassword());\n  }","commit_id":"77071decfa96d7ecb8250b266dbd60bb75c40585","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private void updateControls() {\n    boolean passwordLogin = myPasswordLoginButton.isSelected();\n    myEmailField.setEnabled(passwordLogin);\n    myPasswordField.setEnabled(passwordLogin);\n    myRememberPasswordCheckBox.setEnabled(passwordLogin);\n  }","id":96848,"modified_method":"private void updateControls() {\n    boolean passwordLogin = myPasswordLoginButton.isSelected();\n    myEmailField.setEnabled(passwordLogin);\n    myPasswordField.setEnabled(passwordLogin);\n    myRememberPasswordCheckBox.setEnabled(passwordLogin);\n    if (passwordLogin && myAlwaysRememberPassword && !getPassword().isEmpty()) {\n      myRememberPasswordCheckBox.setSelected(true);\n      myRememberPasswordCheckBox.setEnabled(false);\n    }\n  }","commit_id":"77071decfa96d7ecb8250b266dbd60bb75c40585","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public AppEngineCloudConfigurable(@NotNull AppEngineServerConfiguration configuration, @Nullable Project project) {\n    myConfiguration = configuration;\n    myProject = project;\n    ActionListener actionListener = new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent event) {\n        updateControls();\n      }\n    };\n    myPasswordLoginButton.addActionListener(actionListener);\n    myOAuthLoginButton.addActionListener(actionListener);\n    myEmailField.getDocument().addDocumentListener(new DocumentAdapter() {\n      @Override\n      protected void textChanged(DocumentEvent e) {\n        updateControls();\n      }\n    });\n    updateControls();\n  }","id":96849,"modified_method":"public AppEngineCloudConfigurable(@NotNull AppEngineServerConfiguration configuration,\n                                    @Nullable Project project, boolean alwaysRememberPassword) {\n    myConfiguration = configuration;\n    myProject = project;\n    ActionListener actionListener = new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent event) {\n        updateControls();\n      }\n    };\n    myPasswordLoginButton.addActionListener(actionListener);\n    myOAuthLoginButton.addActionListener(actionListener);\n    DocumentListener documentListener = new DocumentAdapter() {\n      @Override\n      protected void textChanged(DocumentEvent e) {\n        updateControls();\n      }\n    };\n    myEmailField.getDocument().addDocumentListener(documentListener);\n    myPasswordField.getDocument().addDocumentListener(documentListener);\n    myAlwaysRememberPassword = alwaysRememberPassword;\n    updateControls();\n  }","commit_id":"77071decfa96d7ecb8250b266dbd60bb75c40585","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public RemoteServerConfigurable createServerConfigurable(@NotNull AppEngineServerConfiguration configuration) {\n    return new AppEngineCloudConfigurable(configuration, null);\n  }","id":96850,"modified_method":"@NotNull\n  @Override\n  public RemoteServerConfigurable createServerConfigurable(@NotNull AppEngineServerConfiguration configuration) {\n    return new AppEngineCloudConfigurable(configuration, null, true);\n  }","commit_id":"77071decfa96d7ecb8250b266dbd60bb75c40585","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public static void shareProjectOnGithub(@NotNull final Project project, @Nullable final VirtualFile file) {\n    BasicAction.saveAll();\n\n    // get gitRepository\n    final GitRepository gitRepository = GithubUtil.getGitRepository(project, file);\n    final boolean gitDetected = gitRepository != null;\n    final VirtualFile root = gitDetected ? gitRepository.getRoot() : project.getBaseDir();\n\n    final GithubAuthDataHolder authHolder = GithubAuthDataHolder.createFromSettings();\n\n    // check for existing git repo\n    boolean externalRemoteDetected = false;\n    if (gitDetected) {\n      final String githubRemote = GithubUtil.findGithubRemoteUrl(gitRepository);\n      if (githubRemote != null) {\n        if (!checkExistingRemote(project, authHolder, githubRemote)) return;\n      }\n      externalRemoteDetected = !gitRepository.getRemotes().isEmpty();\n    }\n\n    // get available GitHub repos with modal progress\n    final GithubInfo githubInfo = loadGithubInfoWithModal(authHolder, project);\n    if (githubInfo == null) {\n      return;\n    }\n\n    // Show dialog (window)\n    final GithubShareDialog shareDialog =\n      new GithubShareDialog(project, githubInfo.getRepositoryNames(), githubInfo.getUser().canCreatePrivateRepo());\n    DialogManager.show(shareDialog);\n    if (!shareDialog.isOK()) {\n      return;\n    }\n    final boolean isPrivate = shareDialog.isPrivate();\n    final String name = shareDialog.getRepositoryName();\n    final String description = shareDialog.getDescription();\n\n    // finish the job in background\n    final boolean finalExternalRemoteDetected = externalRemoteDetected;\n    new Task.Backgroundable(project, \"Sharing project on GitHub...\") {\n      @Override\n      public void run(@NotNull ProgressIndicator indicator) {\n        // create GitHub repo (network)\n        LOG.info(\"Creating GitHub repository\");\n        indicator.setText(\"Creating GitHub repository...\");\n        final String url = createGithubRepository(project, authHolder, indicator, name, description, isPrivate);\n        if (url == null) {\n          return;\n        }\n        LOG.info(\"Successfully created GitHub repository\");\n\n        // creating empty git repo if git is not initialized\n        LOG.info(\"Binding local project with GitHub\");\n        if (!gitDetected) {\n          LOG.info(\"No git detected, creating empty git repo\");\n          indicator.setText(\"Creating empty git repo...\");\n          if (!createEmptyGitRepository(project, root, indicator)) {\n            return;\n          }\n        }\n\n        GitRepositoryManager repositoryManager = GitUtil.getRepositoryManager(project);\n        final GitRepository repository = repositoryManager.getRepositoryForRoot(root);\n        LOG.assertTrue(repository != null, \"GitRepository is null for root \" + root);\n        if (repository == null) {\n          GithubNotifications.showError(project, \"Failed to create GitHub Repository\", \"Can't find Git repository\");\n          return;\n        }\n\n        final String remoteUrl = GithubUrlUtil.getCloneUrl(githubInfo.getUser().getLogin(), name);\n        final String remoteName = finalExternalRemoteDetected ? \"github\" : \"origin\";\n\n        //git remote add origin git@github.com:login/name.git\n        LOG.info(\"Adding GitHub as a remote host\");\n        indicator.setText(\"Adding GitHub as a remote host...\");\n        if (!GithubUtil.addGithubRemote(project, repository, remoteName, remoteUrl)) {\n          return;\n        }\n\n        // create sample commit for binding project\n        if (!performFirstCommitIfRequired(project, root, repository, indicator, name, url)) {\n          return;\n        }\n\n        //git push origin master\n        LOG.info(\"Pushing to github master\");\n        indicator.setText(\"Pushing to github master...\");\n        if (!pushCurrentBranch(project, repository, remoteName, remoteUrl, name, url)) {\n          return;\n        }\n\n        GithubNotifications.showInfoURL(project, \"Successfully shared project on GitHub\", name, url);\n      }\n    }.queue();\n  }","id":96851,"modified_method":"public static void shareProjectOnGithub(@NotNull final Project project, @Nullable final VirtualFile file) {\n    BasicAction.saveAll();\n\n    // get gitRepository\n    final GitRepository gitRepository = GithubUtil.getGitRepository(project, file);\n    final boolean gitDetected = gitRepository != null;\n    final VirtualFile root = gitDetected ? gitRepository.getRoot() : project.getBaseDir();\n\n    final GithubAuthDataHolder authHolder = GithubAuthDataHolder.createFromSettings();\n\n    // check for existing git repo\n    Set<String> existingRemotes = Collections.emptySet();\n    if (gitDetected) {\n      final String githubRemote = GithubUtil.findGithubRemoteUrl(gitRepository);\n      if (githubRemote != null) {\n        if (!checkExistingRemote(project, authHolder, githubRemote)) return;\n      }\n\n      existingRemotes = ContainerUtil.map2Set(gitRepository.getRemotes(), new Function<GitRemote, String>() {\n        @Override\n        public String fun(GitRemote remote) {\n          return remote.getName();\n        }\n      });\n    }\n\n    // get available GitHub repos with modal progress\n    final GithubInfo githubInfo = loadGithubInfoWithModal(authHolder, project);\n    if (githubInfo == null) {\n      return;\n    }\n\n    // Show dialog (window)\n    final GithubShareDialog shareDialog =\n      new GithubShareDialog(project, githubInfo.getRepositoryNames(), existingRemotes, githubInfo.getUser().canCreatePrivateRepo());\n    DialogManager.show(shareDialog);\n    if (!shareDialog.isOK()) {\n      return;\n    }\n    final boolean isPrivate = shareDialog.isPrivate();\n    final String name = shareDialog.getRepositoryName();\n    final String description = shareDialog.getDescription();\n    final String remoteName = shareDialog.getRemoteName();\n\n    new Task.Backgroundable(project, \"Sharing project on GitHub...\") {\n      @Override\n      public void run(@NotNull ProgressIndicator indicator) {\n        // create GitHub repo (network)\n        LOG.info(\"Creating GitHub repository\");\n        indicator.setText(\"Creating GitHub repository...\");\n        final String url = createGithubRepository(project, authHolder, indicator, name, description, isPrivate);\n        if (url == null) {\n          return;\n        }\n        LOG.info(\"Successfully created GitHub repository\");\n\n        // creating empty git repo if git is not initialized\n        LOG.info(\"Binding local project with GitHub\");\n        if (!gitDetected) {\n          LOG.info(\"No git detected, creating empty git repo\");\n          indicator.setText(\"Creating empty git repo...\");\n          if (!createEmptyGitRepository(project, root, indicator)) {\n            return;\n          }\n        }\n\n        GitRepositoryManager repositoryManager = GitUtil.getRepositoryManager(project);\n        final GitRepository repository = repositoryManager.getRepositoryForRoot(root);\n        LOG.assertTrue(repository != null, \"GitRepository is null for root \" + root);\n        if (repository == null) {\n          GithubNotifications.showError(project, \"Failed to create GitHub Repository\", \"Can't find Git repository\");\n          return;\n        }\n\n        final String remoteUrl = GithubUrlUtil.getCloneUrl(githubInfo.getUser().getLogin(), name);\n\n        //git remote add origin git@github.com:login/name.git\n        LOG.info(\"Adding GitHub as a remote host\");\n        indicator.setText(\"Adding GitHub as a remote host...\");\n        if (!GithubUtil.addGithubRemote(project, repository, remoteName, remoteUrl)) {\n          return;\n        }\n\n        // create sample commit for binding project\n        if (!performFirstCommitIfRequired(project, root, repository, indicator, name, url)) {\n          return;\n        }\n\n        //git push origin master\n        LOG.info(\"Pushing to github master\");\n        indicator.setText(\"Pushing to github master...\");\n        if (!pushCurrentBranch(project, repository, remoteName, remoteUrl, name, url)) {\n          return;\n        }\n\n        GithubNotifications.showInfoURL(project, \"Successfully shared project on GitHub\", name, url);\n      }\n    }.queue();\n  }","commit_id":"6cab685a5becd7e0b468fb61b6e421dcf507c493","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public GithubShareDialog(final Project project, final Set<String> availableNames, final boolean privateRepoAllowed) {\n    super(project);\n    myAvailableNames = availableNames;\n    myGithubSharePanel = new GithubSharePanel(this);\n    init();\n    setTitle(\"Share Project On GitHub\");\n    setOKButtonText(\"Share\");\n    myGithubSharePanel.setRepositoryName(project.getName());\n    myGithubSharePanel.setPrivateRepoAvailable(privateRepoAllowed);\n    init();\n    updateOkButton();\n  }","id":96852,"modified_method":"public GithubShareDialog(Project project, Set<String> availableNames, Set<String> availableRemotes, boolean privateRepoAllowed) {\n    super(project);\n    myAvailableNames = availableNames;\n    myAvailableRemotes = availableRemotes;\n    myGithubSharePanel = new GithubSharePanel(this);\n    init();\n    setTitle(\"Share Project On GitHub\");\n    setOKButtonText(\"Share\");\n    myGithubSharePanel.setRepositoryName(project.getName());\n    myGithubSharePanel.setRemoteName(availableRemotes.isEmpty() ? \"origin\" : \"github\");\n    myGithubSharePanel.setPrivateRepoAvailable(privateRepoAllowed);\n    init();\n    updateOkButton();\n  }","commit_id":"6cab685a5becd7e0b468fb61b6e421dcf507c493","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void updateOkButton() {\n    final String repositoryName = getRepositoryName();\n    if (StringUtil.isEmpty(repositoryName)){\n      setErrorText(\"No repository name selected\");\n      setOKActionEnabled(false);\n      return;\n    }\n    if (myAvailableNames.contains(repositoryName)){\n      setErrorText(\"Repository with selected name already exists\");\n      setOKActionEnabled(false);\n      return;\n    }\n    if (!GITHUB_REPO_PATTERN.matcher(repositoryName).matches()){\n      setErrorText(\"Invalid repository name. Name should consist of letters, numbers, dashes, dots and underscores\");\n      setOKActionEnabled(false);\n      return;\n    }\n    setErrorText(null);\n    setOKActionEnabled(true);\n  }","id":96853,"modified_method":"public void updateOkButton() {\n    String repositoryName = getRepositoryName();\n    String remoteName = getRemoteName();\n    if (StringUtil.isEmpty(repositoryName)){\n      setErrorText(\"No repository name selected\");\n      setOKActionEnabled(false);\n      return;\n    }\n    if (myAvailableNames.contains(repositoryName)){\n      setErrorText(\"Repository with selected name already exists\");\n      setOKActionEnabled(false);\n      return;\n    }\n    if (myAvailableRemotes.contains(remoteName)) {\n      setErrorText(\"Remote with selected name already exists\");\n      setOKActionEnabled(false);\n      return;\n    }\n    if (!GITHUB_REPO_PATTERN.matcher(repositoryName).matches()){\n      setErrorText(\"Invalid repository name. Name should consist of letters, numbers, dashes, dots and underscores\");\n      setOKActionEnabled(false);\n      return;\n    }\n    setErrorText(null);\n    setOKActionEnabled(true);\n  }","commit_id":"6cab685a5becd7e0b468fb61b6e421dcf507c493","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public GithubSharePanel(final GithubShareDialog githubShareDialog) {\n    myGithubShareDialog = githubShareDialog;\n    myRepositoryTextField.getDocument().addDocumentListener(new DocumentAdapter() {\n      @Override\n      protected void textChanged(DocumentEvent e) {\n        myGithubShareDialog.updateOkButton();\n      }\n    });\n    myPrivateCheckBox.setSelected(false);\n  }","id":96854,"modified_method":"public GithubSharePanel(final GithubShareDialog githubShareDialog) {\n    myGithubShareDialog = githubShareDialog;\n    myPrivateCheckBox.setSelected(false);\n\n    DocumentAdapter changeListener = new DocumentAdapter() {\n      @Override\n      protected void textChanged(DocumentEvent e) {\n        myGithubShareDialog.updateOkButton();\n      }\n    };\n    myRepositoryTextField.getDocument().addDocumentListener(changeListener);\n    myRemoteTextField.getDocument().addDocumentListener(changeListener);\n  }","commit_id":"6cab685a5becd7e0b468fb61b6e421dcf507c493","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  @Override\n  public List<Location> getLocation(@NotNull String protocolId, @NotNull String locationData, Project project) {\n\n    if (project == null) {\n      return NONE;\n    }\n\n    ///Users/x/projs/foo/test/foo_test.dart,main tests/calculate_fail\n\n    final String[] elements = locationData.split(\",\");\n    if (elements.length != 2) {\n      return NONE;\n    }\n\n    final VirtualFile file = LocalFileSystem.getInstance().findFileByPath(elements[0]);\n    if (file == null) {\n      return NONE;\n    }\n\n    final PsiFile psiFile = PsiManager.getInstance(project).findFile(file);\n    final String[] pathNodes = pathToNodes(elements[1]);\n    return getLocation(project, pathNodes, psiFile);\n  }","id":96855,"modified_method":"@NotNull\n  @Override\n  public List<Location> getLocation(@NotNull String protocolId, @NotNull String locationData, Project project) {\n\n    if (project == null) {\n      return NONE;\n    }\n\n    ///Users/x/projs/foo/test/foo_test.dart,main tests/calculate_fail\n\n    final List<String> elements = StringUtil.split(locationData, \",\");\n    if (elements.size() != 2) {\n      return NONE;\n    }\n\n    final VirtualFile file = LocalFileSystem.getInstance().findFileByPath(elements.get(0));\n    if (file == null) {\n      return NONE;\n    }\n\n    final PsiFile psiFile = PsiManager.getInstance(project).findFile(file);\n    return getLocation(project, pathToNodes(elements.get(1)), psiFile);\n  }","commit_id":"1004316218dafa97c310eb9ffe1920f4fa2b79ab","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static String[] pathToNodes(final String element) {\n    return element.split(\"/\");\n  }","id":96856,"modified_method":"private static List<String> pathToNodes(final String element) {\n    return StringUtil.split(element, \"/\");\n  }","commit_id":"1004316218dafa97c310eb9ffe1920f4fa2b79ab","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public static boolean testLabelMatches(final DartCallExpression testCallExpression, final String name) {\n    final DartArgumentList argumentList = testCallExpression.getArguments().getArgumentList();\n    final List<DartExpression> argExpressions = argumentList == null ? null : argumentList.getExpressionList();\n    return argExpressions != null &&\n           !argExpressions.isEmpty() &&\n           argExpressions.get(0) instanceof DartStringLiteralExpression &&\n           name.equals(StringUtil.unquoteString(argExpressions.get(0).getText()));\n  }","id":96857,"modified_method":"@Nullable\n  public static String getTestLabel(@NotNull final DartCallExpression testCallExpression) {\n    final DartArgumentList argumentList = testCallExpression.getArguments().getArgumentList();\n    final List<DartExpression> argExpressions = argumentList == null ? null : argumentList.getExpressionList();\n    return argExpressions != null && !argExpressions.isEmpty() && argExpressions.get(0) instanceof DartStringLiteralExpression\n           ? StringUtil.unquoteString(argExpressions.get(0).getText())\n           : null;\n  }","commit_id":"1004316218dafa97c310eb9ffe1920f4fa2b79ab","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"protected List<Location> getLocation(@NotNull final Project project, final String[] nodes, final PsiFile psiFile) {\n\n    final List<Location> locations = new ArrayList<Location>();\n\n    if (psiFile instanceof DartFile) {\n\n      PsiElementProcessor<PsiElement> collector = new PsiElementProcessor<PsiElement>() {\n\n        @Override\n        public boolean execute(@NotNull final PsiElement element) {\n\n          if (element instanceof DartCallExpression) {\n            DartCallExpression expression = (DartCallExpression)element;\n            if (DartUnitRunConfigurationProducer.isTest(expression) || DartUnitRunConfigurationProducer.isGroup(expression)) {\n              if (testLabelMatches(expression, nodes[nodes.length - 1])) {\n                boolean matches = true;\n                for (int i = nodes.length - 2; i >= 0 && matches; --i) {\n                  expression = getGroup(expression);\n                  if (expression == null || !testLabelMatches(expression, nodes[i])) {\n                    matches = false;\n                  }\n                }\n                if (matches) {\n                  locations.add(new PsiLocation<PsiElement>(project, element));\n                  return false;\n                }\n              }\n            }\n          }\n\n          return true;\n        }\n\n        @Nullable\n        private DartCallExpression getGroup(final DartCallExpression expression) {\n          return (DartCallExpression)PsiTreeUtil.findFirstParent(expression, true, new Condition<PsiElement>() {\n            @Override\n            public boolean value(final PsiElement element) {\n              return element instanceof DartCallExpression && DartUnitRunConfigurationProducer.isGroup((DartCallExpression)element);\n            }\n          });\n        }\n\n\n      };\n\n      PsiTreeUtil.processElements(psiFile, collector);\n    }\n\n    return locations;\n  }","id":96858,"modified_method":"protected List<Location> getLocation(@NotNull final Project project, final List<String> nodes, final PsiFile psiFile) {\n\n    final List<Location> locations = new ArrayList<Location>();\n\n    if (psiFile instanceof DartFile) {\n\n      PsiElementProcessor<PsiElement> collector = new PsiElementProcessor<PsiElement>() {\n\n        @Override\n        public boolean execute(@NotNull final PsiElement element) {\n          if (element instanceof DartCallExpression) {\n            DartCallExpression expression = (DartCallExpression)element;\n            if (DartUnitRunConfigurationProducer.isTest(expression) || DartUnitRunConfigurationProducer.isGroup(expression)) {\n              if (nodes.get(nodes.size() - 1).equals(getTestLabel(expression))) {\n                boolean matches = true;\n                for (int i = nodes.size() - 2; i >= 0 && matches; --i) {\n                  expression = getGroup(expression);\n                  if (expression == null || !nodes.get(i).equals(getTestLabel(expression))) {\n                    matches = false;\n                  }\n                }\n                if (matches) {\n                  locations.add(new PsiLocation<PsiElement>(project, element));\n                  return false;\n                }\n              }\n            }\n          }\n\n          return true;\n        }\n\n        @Nullable\n        private DartCallExpression getGroup(final DartCallExpression expression) {\n          return (DartCallExpression)PsiTreeUtil.findFirstParent(expression, true, new Condition<PsiElement>() {\n            @Override\n            public boolean value(final PsiElement element) {\n              return element instanceof DartCallExpression && DartUnitRunConfigurationProducer.isGroup((DartCallExpression)element);\n            }\n          });\n        }\n      };\n\n      PsiTreeUtil.processElements(psiFile, collector);\n    }\n\n    return locations;\n  }","commit_id":"1004316218dafa97c310eb9ffe1920f4fa2b79ab","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private void onScopeChanged() {\n    final Scope scope = (Scope)myScopeCombo.getSelectedItem();\n    myTestNameLabel.setVisible(scope == Scope.GROUP || scope == Scope.METHOD);\n    myTestNameField.setVisible(scope == Scope.GROUP || scope == Scope.METHOD);\n    myTestNameLabel.setText(scope == Scope.GROUP\n                            ? DartBundle.message(\"dart.unit.group.name\")\n                            : DartBundle.message(\"dart.unit.method.name\"));\n  }","id":96859,"modified_method":"private void onScopeChanged() {\n    final Scope scope = (Scope)myScopeCombo.getSelectedItem();\n    myTestNameLabel.setVisible(scope == Scope.GROUP || scope == Scope.METHOD);\n    myTestNameField.setVisible(scope == Scope.GROUP || scope == Scope.METHOD);\n    myTestNameLabel.setText(scope == Scope.GROUP\n                            ? DartBundle.message(\"dart.unit.group.name\")\n                            : DartBundle.message(\"dart.unit.test.name\"));\n  }","commit_id":"1004316218dafa97c310eb9ffe1920f4fa2b79ab","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"public DartUnitConfigurationEditorForm(Project project) {\n    DartCommandLineConfigurationEditorForm.initDartFileTextWithBrowse(project, myFileField);\n    myProject = project;\n\n    myWorkingDirectory.addBrowseFolderListener(ExecutionBundle.message(\"select.working.directory.message\"), null, project,\n                                               FileChooserDescriptorFactory.createSingleFolderDescriptor());\n\n    myScopeCombo.setModel(new EnumComboBoxModel<Scope>(Scope.class));\n    myScopeCombo.setRenderer(new ListCellRendererWrapper<Scope>() {\n      @Override\n      public void customize(final JList list, final Scope value, final int index, final boolean selected, final boolean hasFocus) {\n        setText(StringUtil.capitalize(value.toString().toLowerCase(Locale.US)));\n      }\n    });\n\n    myScopeCombo.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        onScopeChanged();\n        onTestNameChanged(); // Scope changes can invalidate test label\n      }\n    });\n\n    myTestNameField.getDocument().addDocumentListener(new DocumentAdapter() {\n      @Override\n      protected void textChanged(final DocumentEvent e) {\n        onTestNameChanged();\n      }\n    });\n\n    myVMOptions.setDialogCaption(DartBundle.message(\"config.vmoptions.caption\"));\n    myArguments.setDialogCaption(DartBundle.message(\"config.progargs.caption\"));\n\n    // 'Environment variables' is the widest label, anchored by myTestFileLabel\n    myTestFileLabel.setPreferredSize(myEnvironmentVariables.getLabel().getPreferredSize());\n    myEnvironmentVariables.setAnchor(myTestFileLabel);\n  }","id":96860,"modified_method":"public DartUnitConfigurationEditorForm(@NotNull final Project project) {\n    myProject = project;\n\n    DartCommandLineConfigurationEditorForm.initDartFileTextWithBrowse(project, myFileField);\n\n    myWorkingDirectory.addBrowseFolderListener(ExecutionBundle.message(\"select.working.directory.message\"), null, project,\n                                               FileChooserDescriptorFactory.createSingleFolderDescriptor());\n\n    myScopeCombo.setModel(new EnumComboBoxModel<Scope>(Scope.class));\n    myScopeCombo.setRenderer(new ListCellRendererWrapper<Scope>() {\n      @Override\n      public void customize(final JList list, final Scope value, final int index, final boolean selected, final boolean hasFocus) {\n        setText(value.getPresentableName());\n      }\n    });\n\n    myScopeCombo.addActionListener(new ActionListener() {\n      @Override\n      public void actionPerformed(ActionEvent e) {\n        onScopeChanged();\n        onTestNameChanged(); // Scope changes can invalidate test label\n      }\n    });\n\n    final DocumentAdapter documentListener = new DocumentAdapter() {\n      @Override\n      protected void textChanged(final DocumentEvent e) {\n        onTestNameChanged();\n      }\n    };\n\n    myFileField.getTextField().getDocument().addDocumentListener(documentListener);\n    myTestNameField.getDocument().addDocumentListener(documentListener);\n\n    myVMOptions.setDialogCaption(DartBundle.message(\"config.vmoptions.caption\"));\n    myArguments.setDialogCaption(DartBundle.message(\"config.progargs.caption\"));\n\n    // 'Environment variables' is the widest label, anchored by myTestFileLabel\n    myTestFileLabel.setPreferredSize(myEnvironmentVariables.getLabel().getPreferredSize());\n    myEnvironmentVariables.setAnchor(myTestFileLabel);\n  }","commit_id":"1004316218dafa97c310eb9ffe1920f4fa2b79ab","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private void onTestNameChanged() {\n\n    final String filePath = myFileField.getText();\n    if (filePath == null || filePath.isEmpty()) {\n      return;\n    }\n\n    final Scope scope = (Scope)myScopeCombo.getSelectedItem();\n    final String testLabel = myTestNameField.getText();\n\n    if (myCachedModel == null || !myCachedModel.appliesTo(filePath)) {\n      myCachedModel = new TestModel(filePath);\n    }\n\n    if (!myCachedModel.includes(scope, myTestNameField.getText())) {\n      myTestNameField.setForeground(JBColor.RED);\n      myTestNameField.setToolTipText(DartBundle.message(\"config.test.unfound.label.warning\", testLabel));\n    } else {\n      myTestNameField.setForeground(UIUtil.getFieldForegroundColor());\n      myTestNameField.setToolTipText(null);\n    }\n  }","id":96861,"modified_method":"private void onTestNameChanged() {\n    final String filePath = FileUtil.toSystemIndependentName(myFileField.getText().trim());\n    if (filePath.isEmpty()) {\n      return;\n    }\n\n    final VirtualFile file = LocalFileSystem.getInstance().findFileByPath(filePath);\n    if (file == null || file.isDirectory()) {\n      return;\n    }\n\n    final Scope scope = (Scope)myScopeCombo.getSelectedItem();\n    if (scope != Scope.METHOD && scope != Scope.GROUP) {\n      return;\n    }\n\n    final String testLabel = myTestNameField.getText().trim();\n\n    if (myCachedModel == null || !myCachedModel.appliesTo(file)) {\n      myCachedModel = new TestModel(myProject, file);\n    }\n\n    if (!myCachedModel.includes(scope, testLabel)) {\n      myTestNameField.setForeground(JBColor.RED);\n      final String message = scope == Scope.METHOD ? DartBundle.message(\"test.label.not.found\", testLabel)\n                                                   : DartBundle.message(\"test.group.not.found\", testLabel);\n      myTestNameField.setToolTipText(message);\n    }\n    else {\n      myTestNameField.setForeground(UIUtil.getFieldForegroundColor());\n      myTestNameField.setToolTipText(null);\n    }\n  }","commit_id":"1004316218dafa97c310eb9ffe1920f4fa2b79ab","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"boolean includes(Scope scope, final String testLabel) {\n\n      final Predicate<DartCallExpression> callExpressionPredicate = new Predicate<DartCallExpression>() {\n        @Override\n        public boolean apply(final DartCallExpression expression) {\n          return DartTestLocationProvider.testLabelMatches(expression, testLabel);\n        }\n      };\n\n      return scope == Scope.METHOD ?\n             !Collections2.filter(myTestCalls, callExpressionPredicate).isEmpty() :\n             !Collections2.filter(myGroupCalls, callExpressionPredicate).isEmpty();\n    }","id":96862,"modified_method":"boolean includes(@NotNull final Scope scope, @NotNull final String testLabel) {\n      return scope == Scope.METHOD ? myTests.contains(testLabel) : myGroups.contains(testLabel);\n    }","commit_id":"1004316218dafa97c310eb9ffe1920f4fa2b79ab","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Override\n  protected void applyEditorTo(DartUnitRunConfiguration configuration) throws ConfigurationException {\n    final DartUnitRunnerParameters parameters = configuration.getRunnerParameters();\n\n    final Scope scope = (Scope)myScopeCombo.getSelectedItem();\n    parameters.setScope(scope);\n    parameters.setFilePath(StringUtil.nullize(FileUtil.toSystemIndependentName(myFileField.getText().trim()), true));\n    parameters.setTestName(scope == Scope.ALL ? null : StringUtil.nullize(myTestNameField.getText()));\n    parameters.setArguments(StringUtil.nullize(myArguments.getText(), true));\n    parameters.setVMOptions(StringUtil.nullize(myVMOptions.getText(), true));\n    parameters.setCheckedMode(myCheckedModeCheckBox.isSelected());\n    parameters.setWorkingDirectory(StringUtil.nullize(FileUtil.toSystemIndependentName(myWorkingDirectory.getText().trim()), true));\n    parameters.setEnvs(myEnvironmentVariables.getEnvs());\n    parameters.setIncludeParentEnvs(myEnvironmentVariables.isPassParentEnvs());\n  }","id":96863,"modified_method":"@Override\n  protected void applyEditorTo(DartUnitRunConfiguration configuration) throws ConfigurationException {\n    final DartUnitRunnerParameters parameters = configuration.getRunnerParameters();\n\n    final Scope scope = (Scope)myScopeCombo.getSelectedItem();\n    parameters.setScope(scope);\n    parameters.setFilePath(StringUtil.nullize(FileUtil.toSystemIndependentName(myFileField.getText().trim()), true));\n    parameters.setTestName(scope == Scope.ALL ? null : StringUtil.nullize(myTestNameField.getText().trim()));\n    parameters.setArguments(StringUtil.nullize(myArguments.getText().trim(), true));\n    parameters.setVMOptions(StringUtil.nullize(myVMOptions.getText().trim(), true));\n    parameters.setCheckedMode(myCheckedModeCheckBox.isSelected());\n    parameters.setWorkingDirectory(StringUtil.nullize(FileUtil.toSystemIndependentName(myWorkingDirectory.getText().trim()), true));\n    parameters.setEnvs(myEnvironmentVariables.getEnvs());\n    parameters.setIncludeParentEnvs(myEnvironmentVariables.isPassParentEnvs());\n  }","commit_id":"1004316218dafa97c310eb9ffe1920f4fa2b79ab","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"boolean isValidRequest(final HttpServletRequest request) {\n        final String referrer = request.getHeader(\"referer\");\n        // check for missing/empty referrer\n        if ( referrer == null || referrer.trim().length() == 0 ) {\n            if ( !this.allowEmpty ) {\n                this.logger.info(\"Rejected empty referrer header for {} request to {}\", request.getMethod(), request.getRequestURI());\n            }\n            return this.allowEmpty;\n        }\n        // check for relative referrer - which is always allowed\n        if ( referrer.indexOf(\":/\") == - 1 ) {\n            return true;\n        }\n        // check for air referrer - which is always allowed\n        if ( referrer.startsWith(\"app:/\") ) {\n            return true;\n        }\n\n        final HostInfo info = getHost(referrer);\n        if ( info == null ) {\n            // if this is invalid we just return invalid\n            this.logger.info(\"Rejected illegal referrer header for {} request to {} : {}\",\n                    new Object[] {request.getMethod(), request.getRequestURI(), referrer});\n            return false;\n        }\n\n        // allow the request if the host name of the referrer is\n        // the same as the request's host name\n        if ( info.host.equals(request.getServerName()) ) {\n            return true;\n        }\n\n        boolean valid = false;\n        for(final URL ref : this.allowedReferrers) {\n            if ( info.host.equals(ref.getHost()) && info.scheme.equals(ref.getProtocol()) ) {\n                if ( ref.getPort() == 0 || info.port == ref.getPort() ) {\n                    valid = true;\n                    break;\n                }\n            }\n        }\n        if ( !valid) {\n            this.logger.info(\"Rejected referrer header for {} request to {} : {}\",\n                    new Object[] {request.getMethod(), request.getRequestURI(), referrer});\n        }\n        return valid;\n    }","id":96864,"modified_method":"boolean isValidRequest(final HttpServletRequest request) {\n        final String referrer = request.getHeader(\"referer\");\n        // check for missing/empty referrer\n        if ( referrer == null || referrer.trim().length() == 0 ) {\n            if ( !this.allowEmpty ) {\n                this.logger.info(\"Rejected empty referrer header for {} request to {}\", request.getMethod(), request.getRequestURI());\n            }\n            return this.allowEmpty;\n        }\n        // check for relative referrer - which is always allowed\n        if ( referrer.indexOf(\":/\") == - 1 ) {\n            return true;\n        }\n        // check for air referrer - which is always allowed\n        if ( referrer.startsWith(\"app:/\") ) {\n            return true;\n        }\n\n        final HostInfo info = getHost(referrer);\n        if ( info == null ) {\n            // if this is invalid we just return invalid\n            this.logger.info(\"Rejected illegal referrer header for {} request to {} : {}\",\n                    new Object[] {request.getMethod(), request.getRequestURI(), referrer});\n            return false;\n        }\n\n        // allow the request if the host name of the referrer is\n        // the same as the request's host name\n        if ( info.host.equals(request.getServerName()) ) {\n            return true;\n        }\n\n        // allow the request if the referrer matches any of the allowed referrers\n        boolean valid = isValidUriReferrer(info) || isValidRegexReferrer(info);\n\n        if ( !valid) {\n            this.logger.info(\"Rejected referrer header for {} request to {} : {}\",\n                    new Object[] {request.getMethod(), request.getRequestURI(), referrer});\n        }\n        return valid;\n    }","commit_id":"b23cc110cfa630651c6a47370ae3159622936d0b","url":"https://github.com/apache/sling"},{"original_method":"/**\n     * Activate\n     */\n    @Activate\n    protected void activate(final ComponentContext ctx) {\n        this.allowEmpty = PropertiesUtil.toBoolean(ctx.getProperties().get(PROP_ALLOW_EMPTY), DEFAULT_ALLOW_EMPTY);\n        String[] allowHosts = PropertiesUtil.toStringArray(ctx.getProperties().get(PROP_HOSTS));\n        if ( allowHosts != null ) {\n            if ( allowHosts.length == 0 ) {\n                allowHosts = null;\n            } else if ( allowHosts.length == 1 && allowHosts[0].trim().length() == 0 ) {\n                allowHosts = null;\n            }\n        }\n        final Set<String> allowedReferrers = this.getDefaultAllowedReferrers();\n        if ( allowHosts != null ) {\n            for(final String host : allowHosts) {\n                allowedReferrers.add(host);\n            }\n        }\n        this.allowedReferrers = this.createReferrerUrls(allowedReferrers);\n        this.filterMethods = PropertiesUtil.toStringArray(ctx.getProperties().get(PROP_METHODS));\n        if ( this.filterMethods != null && this.filterMethods.length == 1 && (this.filterMethods[0] == null || this.filterMethods[0].trim().length() == 0) ) {\n            this.filterMethods = null;\n        }\n        if ( this.filterMethods != null ) {\n            for(int i=0; i<filterMethods.length; i++) {\n                filterMethods[i] = filterMethods[i].toUpperCase();\n            }\n        }\n        this.configPrinterRegistration = registerConfigPrinter(ctx.getBundleContext());\n    }","id":96865,"modified_method":"/**\n     * Activate\n     */\n    @Activate\n    protected void activate(final ComponentContext ctx) {\n        final Dictionary props = ctx.getProperties();\n\n        this.allowEmpty = PropertiesUtil.toBoolean(props.get(PROP_ALLOW_EMPTY), DEFAULT_ALLOW_EMPTY);\n\n        final String[] allowRegexHosts = defaultIfEmpty(PropertiesUtil.toStringArray(props.get(PROP_HOSTS_REGEX),\n                DEFAULT_PROP_HOSTS), DEFAULT_PROP_HOSTS);\n        this.allowedRegexReferrers = createReferrerPatterns(allowRegexHosts);\n\n        final Set<String> allowUriReferrers = getDefaultAllowedReferrers();\n        final String[] allowHosts = defaultIfEmpty(PropertiesUtil.toStringArray(props.get(PROP_HOSTS),\n                DEFAULT_PROP_HOSTS), DEFAULT_PROP_HOSTS);\n        allowUriReferrers.addAll(Arrays.asList(allowHosts));\n        this.allowedUriReferrers = createReferrerUrls(allowUriReferrers);\n\n        this.filterMethods = PropertiesUtil.toStringArray(props.get(PROP_METHODS));\n        if ( this.filterMethods != null && this.filterMethods.length == 1 && (this.filterMethods[0] == null || this.filterMethods[0].trim().length() == 0) ) {\n            this.filterMethods = null;\n        }\n        if ( this.filterMethods != null ) {\n            for(int i=0; i<filterMethods.length; i++) {\n                filterMethods[i] = filterMethods[i].toUpperCase();\n            }\n        }\n        this.configPrinterRegistration = registerConfigPrinter(ctx.getBundleContext());\n    }","commit_id":"b23cc110cfa630651c6a47370ae3159622936d0b","url":"https://github.com/apache/sling"},{"original_method":"/**\n         * Print out the allowedReferrers\n         * @see org.apache.felix.webconsole.ConfigurationPrinter#printConfiguration(java.io.PrintWriter)\n         */\n        public void printConfiguration(final PrintWriter pw) {\n            pw.println(\"Current Apache Sling Referrer Filter Allowed Referrers:\");\n            pw.println();\n            for (final URL url : allowedReferrers) {\n                pw.println(url.toString());\n            }\n        }","id":96866,"modified_method":"/**\n         * Print out the allowedReferrers\n         * @see org.apache.felix.webconsole.ConfigurationPrinter#printConfiguration(java.io.PrintWriter)\n         */\n        public void printConfiguration(final PrintWriter pw) {\n            pw.println(\"Current Apache Sling Referrer Filter Allowed Referrers:\");\n            pw.println();\n            for (final URL url : allowedUriReferrers) {\n                pw.println(url.toString());\n            }\n            for (final Pattern pattern : allowedRegexReferrers) {\n                pw.println(pattern.toString());\n            }\n        }","commit_id":"b23cc110cfa630651c6a47370ae3159622936d0b","url":"https://github.com/apache/sling"},{"original_method":"@Test public void testValidRequest() {\n        Assert.assertEquals(true, filter.isValidRequest(getRequest(null)));\n        Assert.assertEquals(true, filter.isValidRequest(getRequest(\"relative\")));\n        Assert.assertEquals(true, filter.isValidRequest(getRequest(\"/relative/too\")));\n        Assert.assertEquals(true, filter.isValidRequest(getRequest(\"/relative/but/[illegal]\")));\n        Assert.assertEquals(false, filter.isValidRequest(getRequest(\"http://somehost\")));\n        Assert.assertEquals(true, filter.isValidRequest(getRequest(\"http://localhost\")));\n        Assert.assertEquals(true, filter.isValidRequest(getRequest(\"http://127.0.0.1\")));\n        Assert.assertEquals(false, filter.isValidRequest(getRequest(\"http://somehost/but/[illegal]\")));\n    }","id":96867,"modified_method":"@Test public void testValidRequest() {\n        Assert.assertEquals(true, filter.isValidRequest(getRequest(null)));\n        Assert.assertEquals(true, filter.isValidRequest(getRequest(\"relative\")));\n        Assert.assertEquals(true, filter.isValidRequest(getRequest(\"/relative/too\")));\n        Assert.assertEquals(true, filter.isValidRequest(getRequest(\"/relative/but/[illegal]\")));\n        Assert.assertEquals(false, filter.isValidRequest(getRequest(\"http://somehost\")));\n        Assert.assertEquals(true, filter.isValidRequest(getRequest(\"http://localhost\")));\n        Assert.assertEquals(true, filter.isValidRequest(getRequest(\"http://127.0.0.1\")));\n        Assert.assertEquals(false, filter.isValidRequest(getRequest(\"http://somehost/but/[illegal]\")));\n        Assert.assertEquals(true, filter.isValidRequest(getRequest(\"http://relhost\")));\n        Assert.assertEquals(true, filter.isValidRequest(getRequest(\"http://relhost:9001\")));\n        Assert.assertEquals(false, filter.isValidRequest(getRequest(\"http://abshost:9001\")));\n        Assert.assertEquals(false, filter.isValidRequest(getRequest(\"https://abshost:80\")));\n        Assert.assertEquals(true, filter.isValidRequest(getRequest(\"http://abshost:80\")));\n        Assert.assertEquals(false, filter.isValidRequest(getRequest(\"http://abshost:9001\")));\n        Assert.assertEquals(true, filter.isValidRequest(getRequest(\"http://another.abshost:80\")));\n        Assert.assertEquals(false, filter.isValidRequest(getRequest(\"http://yet.another.abshost:80\")));\n    }","commit_id":"b23cc110cfa630651c6a47370ae3159622936d0b","url":"https://github.com/apache/sling"},{"original_method":"@Before public void setup() {\n        filter = new ReferrerFilter();\n        final ComponentContext ctx = mock(ComponentContext.class);\n        final BundleContext bundleCtx = mock(BundleContext.class);\n        final ServiceRegistration reg = mock(ServiceRegistration.class);\n        final Dictionary<String, Object> props = new Hashtable<String, Object>();\n        doReturn(props).when(ctx).getProperties();\n        doReturn(bundleCtx).when(ctx).getBundleContext();\n        doReturn(reg).when(bundleCtx).registerService(any(String[].class), any(), any(Dictionary.class));\n        doNothing().when(reg).unregister();\n        filter.activate(ctx);\n    }","id":96868,"modified_method":"@Before public void setup() {\n        filter = new ReferrerFilter();\n        final ComponentContext ctx = mock(ComponentContext.class);\n        final BundleContext bundleCtx = mock(BundleContext.class);\n        final ServiceRegistration reg = mock(ServiceRegistration.class);\n        final Dictionary<String, Object> props = new Hashtable<String, Object>(){{\n            put(\"allow.hosts\", new String[]{\"relhost\"});\n            put(\"allow.hosts.regexp\", new String[]{\"http://([^.]*.)?abshost:80\"});\n        }};\n        doReturn(props).when(ctx).getProperties();\n        doReturn(bundleCtx).when(ctx).getBundleContext();\n        doReturn(reg).when(bundleCtx).registerService(any(String[].class), any(), any(Dictionary.class));\n        doNothing().when(reg).unregister();\n        filter.activate(ctx);\n    }","commit_id":"b23cc110cfa630651c6a47370ae3159622936d0b","url":"https://github.com/apache/sling"},{"original_method":"private static void match(SNode a, SNode b, Map<SNode, SNode> map) {\n    if (!(a.getConcept().getQualifiedName().equals(b.getConcept().getQualifiedName()))) {\n      return;\n    }\n    HashSet<String> roles = new HashSet<String>();\n    roles.addAll(SNodeOperations.getChildRoles(a));\n    roles.addAll(SNodeOperations.getChildRoles(b));\n    for (String role : roles) {\n      List<? extends SNode> children1 = IterableUtil.asList(a.getChildren(role));\n      List<? extends SNode> children2 = IterableUtil.asList(b.getChildren(role));\n      if (children1.size() != children2.size()) {\n        continue;\n      }\n      for (int i = 0; i < children1.size(); i++) {\n        NodesMatcher.match(children1.get(i), children2.get(i), map);\n      }\n    }\n    map.put(a, b);\n  }","id":96869,"modified_method":"private static void match(SNode a, SNode b, Map<SNode, SNode> map) {\n    if (!(a.getConcept().getQualifiedName().equals(b.getConcept().getQualifiedName()))) {\n      return;\n    }\n    HashSet<String> roles = new HashSet<String>();\n    roles.addAll(SNodeOperations.getChildRoles(a));\n    roles.addAll(SNodeOperations.getChildRoles(b));\n    for (String role : roles) {\n      Iterator<? extends SNode> iterator1 = a.getChildren(role).iterator();\n      Iterator<? extends SNode> iterator2 = b.getChildren(role).iterator();\n      while (iterator1.hasNext() && iterator2.hasNext()) {\n        NodesMatcher.match(iterator1.next(), iterator2.next(), map);\n      }\n    }\n    map.put(a, b);\n  }","commit_id":"7374e32d61589f1145acc1d2280f733e17a83b5b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static void matchChildren(SNode a, SNode b, Map<SNode, SNode> map, ArrayList<DifferanceItem> difference) {\n    HashSet<String> roles = new HashSet<String>();\n    roles.addAll(SNodeOperations.getChildRoles(a));\n    roles.addAll(SNodeOperations.getChildRoles(b));\n    for (String role : roles) {\n      List<? extends SNode> children1 = IterableUtil.asList(a.getChildren(role));\n      List<? extends SNode> children2 = IterableUtil.asList(b.getChildren(role));\n      if (children1.size() != children2.size()) {\n        difference.add(new ChildrenCountDifference(role, children1.size(), children2.size()));\n        continue;\n      }\n      for (int i = 0; i < children1.size(); i++) {\n        NodeDifference d = NodesMatcher.matchNodes(children1.get(i), children2.get(i), map);\n        if (d != null) {\n          difference.add(d);\n        }\n      }\n    }\n  }","id":96870,"modified_method":"private static void matchChildren(SNode a, SNode b, Map<SNode, SNode> map, ArrayList<DifferanceItem> difference) {\n    HashSet<String> roles = new HashSet<String>();\n    roles.addAll(SNodeOperations.getChildRoles(a));\n    roles.addAll(SNodeOperations.getChildRoles(b));\n    for (String role : roles) {\n      Iterable<? extends SNode> children1 = a.getChildren(role);\n      Iterable<? extends SNode> children2 = b.getChildren(role);\n      int size1 = countElements(children1.iterator());\n      int size2 = countElements(children2.iterator());\n      if (size1 != size2) {\n        difference.add(new ChildrenCountDifference(role, size1, size2));\n        continue;\n      }\n\n      Iterator<? extends SNode> iterator1 = children1.iterator();\n      Iterator<? extends SNode> iterator2 = children2.iterator();\n      while (iterator1.hasNext() && iterator2.hasNext()) {\n        NodeDifference d = NodesMatcher.matchNodes(iterator1.next(), iterator2.next(), map);\n        if (d != null) {\n          difference.add(d);\n        }\n      }\n    }\n  }","commit_id":"7374e32d61589f1145acc1d2280f733e17a83b5b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static void matchReferences(SNode a, SNode b, Map<SNode, SNode> map, ArrayList<DifferanceItem> difference) {\n    HashSet<String> roles = new HashSet<String>();\n    roles.addAll(SNodeOperations.getReferenceRoles(a));\n    roles.addAll(SNodeOperations.getReferenceRoles(b));\n    for (String role : roles) {\n      SNode reference1 = null;\n      if (a.getReference(role) != null) {\n        reference1 = a.getReference(role).getTargetNode();\n      }\n      SNode reference2 = null;\n      if (b.getReference(role) != null) {\n        reference2 = b.getReference(role).getTargetNode();\n      }\n      if (map.containsKey(reference1)) {\n        if (map.get(reference1) != reference2) {\n          difference.add(new ReferenceDifferense(role, true));\n        }\n      } else {\n        if (reference1 != reference2) {\n          difference.add(new ReferenceDifferense(role, false));\n        }\n      }\n    }\n  }","id":96871,"modified_method":"private static void matchReferences(SNode a, SNode b, Map<SNode, SNode> map, ArrayList<DifferanceItem> difference) {\n    Map<String, SReference> references1 = getReferencesMap(a);\n    Map<String, SReference> references2 = getReferencesMap(b);\n\n    HashSet<String> roles = new HashSet<String>();\n    roles.addAll(references1.keySet());\n    roles.addAll(references2.keySet());\n    for (String role : roles) {\n      SReference reference1 = references1.get(role);\n      SNode referenceTarget1 = null;\n      if (reference1 != null) {\n        referenceTarget1 = reference1.getTargetNode();\n      }\n\n      SReference reference2 = references2.get(role);\n      SNode referenceTarget2 = null;\n      if (reference2 != null) {\n        referenceTarget2 = reference2.getTargetNode();\n      }\n\n      if (map.containsKey(referenceTarget1)) {\n        if (map.get(referenceTarget1) != referenceTarget2) {\n          difference.add(new ReferenceDifferense(role, true));\n        }\n      } else {\n        if (referenceTarget1 != referenceTarget2) {\n          difference.add(new ReferenceDifferense(role, false));\n        }\n      }\n    }\n  }","commit_id":"7374e32d61589f1145acc1d2280f733e17a83b5b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private static void matchProperties(SNode a, SNode b, ArrayList<DifferanceItem> difference) {\n    HashSet<String> propertes = new HashSet<String>();\n    propertes.addAll(SNodeOperations.getProperties(a).keySet());\n    propertes.addAll(SNodeOperations.getProperties(b).keySet());\n    for (String key : propertes) {\n      String p1 = SNodeOperations.getProperties(a).get(key);\n      String p2 = SNodeOperations.getProperties(b).get(key);\n      if (p1 == null && \"false\".equals(p2)) {\n        continue;\n      }\n      if (p2 == null && \"false\".equals(p1)) {\n        continue;\n      }\n      if (p1 == null || p2 == null || !(p1.equals(p2))) {\n        difference.add(new PropertyDifferense(key));\n      }\n    }\n  }","id":96872,"modified_method":"private static void matchProperties(SNode a, SNode b, ArrayList<DifferanceItem> difference) {\n    HashSet<String> propertes = new HashSet<String>();\n    Map<String, String> properties1 = SNodeOperations.getProperties(a);\n    Map<String, String> properties2 = SNodeOperations.getProperties(b);\n    propertes.addAll(properties1.keySet());\n    propertes.addAll(properties2.keySet());\n    for (String key : propertes) {\n      String p1 = properties1.get(key);\n      String p2 = properties2.get(key);\n      if (p1 == null && \"false\".equals(p2)) {\n        continue;\n      }\n      if (p2 == null && \"false\".equals(p1)) {\n        continue;\n      }\n      if (p1 == null || p2 == null || !(p1.equals(p2))) {\n        difference.add(new PropertyDifferense(key));\n      }\n    }\n  }","commit_id":"7374e32d61589f1145acc1d2280f733e17a83b5b","url":"https://github.com/JetBrains/MPS"},{"original_method":"private ETLBatchConfig constructETLBatchConfig(String fileSetName) {\n    ETLStage source = new ETLStage(StreamBatchSource.class.getSimpleName(), ImmutableMap.<String, String>builder()\n      .put(Properties.Stream.NAME, \"myStream\")\n      .put(Properties.Stream.DURATION, \"10m\")\n      .put(Properties.Stream.FORMAT, Formats.CSV)\n      .put(Properties.Stream.SCHEMA, BODY_SCHEMA.toString())\n      .put(\"format.setting.delimiter\", \"|\")\n      .build());\n    ETLStage structuredRecordToGeneric = new ETLStage(StructuredRecordToGenericRecordTransform.class.getSimpleName(),\n      ImmutableMap.<String, String>of());\n    ETLStage sink = new ETLStage(TimePartitionedFileSetDatasetAvroSink.class.getSimpleName(),\n                                 ImmutableMap.of(\"schema\", EVENT_SCHEMA.toString(), \"name\", fileSetName));\n    List<ETLStage> transformList = Lists.newArrayList();\n    transformList.add(structuredRecordToGeneric);\n    return new ETLBatchConfig(\"0 0 1 1 *\", source, sink, transformList);\n  }","id":96873,"modified_method":"private ETLBatchConfig constructETLBatchConfig(String fileSetName) {\n    ETLStage source = new ETLStage(StreamBatchSource.class.getSimpleName(), ImmutableMap.<String, String>builder()\n      .put(Properties.Stream.NAME, \"myStream\")\n      .put(Properties.Stream.DURATION, \"10m\")\n      .put(Properties.Stream.FORMAT, Formats.CSV)\n      .put(Properties.Stream.SCHEMA, BODY_SCHEMA.toString())\n      .put(\"format.setting.delimiter\", \"|\")\n      .build());\n    ETLStage structuredRecordToGeneric = new ETLStage(StructuredRecordToGenericRecordTransform.class.getSimpleName(),\n                                                      ImmutableMap.<String, String>of());\n    ETLStage sink = new ETLStage(TimePartitionedFileSetDatasetAvroSink.class.getSimpleName(),\n                                 ImmutableMap.of(Properties.TimePartitionedFileSetDataset.SCHEMA,\n                                                 EVENT_SCHEMA.toString(),\n                                                 Properties.TimePartitionedFileSetDataset.TPFS_NAME, fileSetName));\n    List<ETLStage> transformList = Lists.newArrayList();\n    transformList.add(structuredRecordToGeneric);\n    return new ETLBatchConfig(\"0 0 1 1 *\", source, sink, transformList);\n  }","commit_id":"691884c7f373502a6e71f23c503349579ccd4690","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void prepareJob(BatchSinkContext context) {\n    Map<String, String> runtimeArguments = context.getPluginProperties().getProperties();\n    Map<String, String> sinkArgs = Maps.newHashMap();\n    TimePartitionedFileSetArguments.setOutputPartitionTime(sinkArgs, context.getLogicalStartTime());\n    TimePartitionedFileSet sink = context.getDataset(runtimeArguments.get(TPFS_NAME), sinkArgs);\n    context.setOutput(runtimeArguments.get(TPFS_NAME), sink);\n    Schema avroSchema = new Schema.Parser().parse(runtimeArguments.get(SCHEMA));\n    Job job = context.getHadoopJob();\n    AvroJob.setOutputKeySchema(job, avroSchema);\n  }","id":96874,"modified_method":"@Override\n  public void prepareJob(BatchSinkContext context) {\n    Map<String, String> runtimeArguments = context.getPluginProperties().getProperties();\n    Map<String, String> properties = context.getPluginProperties().getProperties();\n    Map<String, String> sinkArgs = Maps.newHashMap();\n    TimePartitionedFileSetArguments.setOutputPartitionTime(sinkArgs, context.getLogicalStartTime());\n    TimePartitionedFileSet sink = context.getDataset(runtimeArguments.get(properties.get(\n      Properties.TimePartitionedFileSetDataset.TPFS_NAME)), sinkArgs);\n    context.setOutput(runtimeArguments.get(properties.get(Properties.TimePartitionedFileSetDataset.TPFS_NAME)), sink);\n    Schema avroSchema = new Schema.Parser().parse(runtimeArguments.get(properties.get(\n      Properties.TimePartitionedFileSetDataset.SCHEMA)));\n    Job job = context.getHadoopJob();\n    AvroJob.setOutputKeySchema(job, avroSchema);\n  }","commit_id":"691884c7f373502a6e71f23c503349579ccd4690","url":"https://github.com/caskdata/cdap"},{"original_method":"@Override\n  public void configurePipeline(ETLStage stageConfig, PipelineConfigurer pipelineConfigurer) {\n    // if the base path is provided then we should try to create the fileset here\n    if (!Strings.isNullOrEmpty(stageConfig.getProperties().get(BASE_PATH))) {\n      String tpfsName = stageConfig.getProperties().get(TPFS_NAME);\n      Preconditions.checkArgument(!Strings.isNullOrEmpty(tpfsName), \"TimePartitionedFileSet name must be given.\");\n      pipelineConfigurer.createDataset(tpfsName, TimePartitionedFileSet.class.getName(), FileSetProperties.builder()\n        .setBasePath(stageConfig.getProperties().get(BASE_PATH))\n        .setInputFormat(AvroKeyInputFormat.class)\n        .setOutputFormat(AvroKeyOutputFormat.class)\n        .setEnableExploreOnCreate(true)\n        .setSerDe(\"org.apache.hadoop.hive.serde2.avro.AvroSerDe\")\n        .setExploreInputFormat(\"org.apache.hadoop.hive.ql.io.avro.AvroContainerInputFormat\")\n        .setExploreOutputFormat(\"org.apache.hadoop.hive.ql.io.avro.AvroContainerOutputFormat\")\n        .setTableProperty(\"avro.schema.literal\", (stageConfig.getProperties().get(SCHEMA)))\n        .build());\n    }\n  }","id":96875,"modified_method":"@Override\n  public void configurePipeline(ETLStage stageConfig, PipelineConfigurer pipelineConfigurer) {\n    // if the base path is provided then we should try to create the fileset here\n    Map<String, String> properties = stageConfig.getProperties();\n    if (!Strings.isNullOrEmpty(properties.get(Properties.TimePartitionedFileSetDataset.BASE_PATH))) {\n      String tpfsName = properties.get(Properties.TimePartitionedFileSetDataset.TPFS_NAME);\n      Preconditions.checkArgument(!Strings.isNullOrEmpty(tpfsName), \"TimePartitionedFileSet name must be given.\");\n      pipelineConfigurer.createDataset(tpfsName, TimePartitionedFileSet.class.getName(), FileSetProperties.builder()\n        .setBasePath(properties.get(Properties.TimePartitionedFileSetDataset.BASE_PATH))\n        .setInputFormat(AvroKeyInputFormat.class)\n        .setOutputFormat(AvroKeyOutputFormat.class)\n        .setEnableExploreOnCreate(true)\n        .setSerDe(\"org.apache.hadoop.hive.serde2.avro.AvroSerDe\")\n        .setExploreInputFormat(\"org.apache.hadoop.hive.ql.io.avro.AvroContainerInputFormat\")\n        .setExploreOutputFormat(\"org.apache.hadoop.hive.ql.io.avro.AvroContainerOutputFormat\")\n        .setTableProperty(\"avro.schema.literal\", (properties.get(Properties.TimePartitionedFileSetDataset.SCHEMA)))\n        .build());\n    }\n  }","commit_id":"691884c7f373502a6e71f23c503349579ccd4690","url":"https://github.com/caskdata/cdap"},{"original_method":"private void execMethodAndStoreForSubscriptOperator(String method, Expression expression, VariableSlotLoader usesSubscript) {\n        final OperandStack operandStack = controller.getOperandStack();\n        // at this point the receiver will be already on the stack.\n        // in a[1]++ the method will be \"++\" aka \"next\" and the receiver a[1]\n        \n        Expression callSiteReceiverSwap = new BytecodeExpression(getType(expression)) {\n            @Override\n            public void visit(MethodVisitor mv) {\n                // CallSite is normally not showing up on the \n                // operandStack, so we place a dummy here with same\n                // slot length.\n                operandStack.push(ClassHelper.OBJECT_TYPE);\n                // change (receiver,callsite) to (callsite,receiver)\n                operandStack.swap();\n                setType(operandStack.getTopOperand());\n                \n                // no need to keep any of those on the operand stack\n                // after this expression is processed, the operand stack\n                // will contain callSiteReceiverSwap.getType()\n                operandStack.remove(2);\n            }\n        };\n        // execute method\n        // this will load the callsite and the receiver normally in the wrong\n        // order since the receiver is already present, but before the callsite\n        // Therefore we use callSiteReceiverSwap to correct the order. \n        // After this call the JVM operand stack will contain the the result of\n        // the method call... usually simply Object in operandStack\n        controller.getCallSiteWriter().makeCallSite(\n                callSiteReceiverSwap,\n                method,\n                MethodCallExpression.NO_ARGUMENTS,\n                false, false, false, false);\n        // now rhs is completely done and we need only to store. In a[1]++ this \n        // would be a.getAt(1).next() for the rhs, \"lhs\" code is a.putAt(1, rhs)\n         \n        // we need special code for arrays to store the result (like for a[1]++)\n        if (usesSubscript!=null) {\n            CompileStack compileStack = controller.getCompileStack();\n            BinaryExpression be = (BinaryExpression) expression;\n            \n            ClassNode methodResultType = operandStack.getTopOperand();\n            final int resultIdx = compileStack.defineTemporaryVariable(\"postfix_\" + method, methodResultType, true);\n            BytecodeExpression methodResultLoader = new VariableSlotLoader(methodResultType, resultIdx, operandStack);\n            \n            // execute the assignment, this will leave the right side \n            // (here the method call result) on the stack\n            assignToArray(be, be.getLeftExpression(), usesSubscript, methodResultLoader);\n\n            compileStack.removeVar(resultIdx);\n        } \n        // here we handle a.b++ and a++\n        else if (expression instanceof VariableExpression ||\n            expression instanceof FieldExpression || \n            expression instanceof PropertyExpression)\n        {\n            operandStack.dup();\n            controller.getCompileStack().pushLHS(true);\n            expression.visit(controller.getAcg());\n            controller.getCompileStack().popLHS();\n        }\n        // other cases don't need storing, so nothing to be done for them\n    }","id":96876,"modified_method":"private void execMethodAndStoreForSubscriptOperator(String method, Expression expression, VariableSlotLoader usesSubscript) {\n        final OperandStack operandStack = controller.getOperandStack();\n        // at this point the receiver will be already on the stack.\n        // in a[1]++ the method will be \"++\" aka \"next\" and the receiver a[1]\n        \n        ClassNode BEType = BinaryIntExpressionHelper.getType(expression,controller.getClassNode());\n        Expression callSiteReceiverSwap = new BytecodeExpression(BEType) {\n            @Override\n            public void visit(MethodVisitor mv) {\n                // CallSite is normally not showing up on the \n                // operandStack, so we place a dummy here with same\n                // slot length.\n                operandStack.push(ClassHelper.OBJECT_TYPE);\n                // change (receiver,callsite) to (callsite,receiver)\n                operandStack.swap();\n                setType(operandStack.getTopOperand());\n                \n                // no need to keep any of those on the operand stack\n                // after this expression is processed, the operand stack\n                // will contain callSiteReceiverSwap.getType()\n                operandStack.remove(2);\n            }\n        };\n        // execute method\n        // this will load the callsite and the receiver normally in the wrong\n        // order since the receiver is already present, but before the callsite\n        // Therefore we use callSiteReceiverSwap to correct the order. \n        // After this call the JVM operand stack will contain the the result of\n        // the method call... usually simply Object in operandStack\n        controller.getCallSiteWriter().makeCallSite(\n                callSiteReceiverSwap,\n                method,\n                MethodCallExpression.NO_ARGUMENTS,\n                false, false, false, false);\n        // now rhs is completely done and we need only to store. In a[1]++ this \n        // would be a.getAt(1).next() for the rhs, \"lhs\" code is a.putAt(1, rhs)\n         \n        // we need special code for arrays to store the result (like for a[1]++)\n        if (usesSubscript!=null) {\n            CompileStack compileStack = controller.getCompileStack();\n            BinaryExpression be = (BinaryExpression) expression;\n            \n            ClassNode methodResultType = operandStack.getTopOperand();\n            final int resultIdx = compileStack.defineTemporaryVariable(\"postfix_\" + method, methodResultType, true);\n            BytecodeExpression methodResultLoader = new VariableSlotLoader(methodResultType, resultIdx, operandStack);\n            \n            // execute the assignment, this will leave the right side \n            // (here the method call result) on the stack\n            assignToArray(be, be.getLeftExpression(), usesSubscript, methodResultLoader);\n\n            compileStack.removeVar(resultIdx);\n        } \n        // here we handle a.b++ and a++\n        else if (expression instanceof VariableExpression ||\n            expression instanceof FieldExpression || \n            expression instanceof PropertyExpression)\n        {\n            operandStack.dup();\n            controller.getCompileStack().pushLHS(true);\n            expression.visit(controller.getAcg());\n            controller.getCompileStack().popLHS();\n        }\n        // other cases don't need storing, so nothing to be done for them\n    }","commit_id":"0af222246a2f8bb36d12a86367ea34c1370ee371","url":"https://github.com/apache/groovy"},{"original_method":"private void makeCall(\n            Expression origin, ClassExpression sender,\n            Expression receiver, Expression message, Expression arguments,\n            MethodCallerMultiAdapter adapter,\n            boolean safe, boolean spreadSafe, boolean implicitThis\n    ) { \n        \n        if (adapter==invokeMethodOnCurrent && controller.optimizeForInt && controller.isFastPath()) {\n            String methodName = getMethodName(message);\n            if (methodName != null) {\n                List<Parameter> plist = new ArrayList(16);\n                TupleExpression args;\n                if (arguments instanceof TupleExpression) {\n                    args = (TupleExpression) arguments;\n                    for (Expression arg : args.getExpressions()) {\n                        plist.add(new Parameter(arg.getType(),\"\"));\n                    }\n                    \n                } else {\n                    args = new TupleExpression(receiver);\n                    plist.add(new Parameter(arguments.getType(),\"\"));\n                }\n\n                StatementMeta meta = null;\n                if (origin!=null) meta = (StatementMeta) origin.getNodeMetaData(StatementMeta.class);\n                MethodNode mn = null;\n                if (meta!=null) mn = meta.target;\n                \n                if (mn !=null) {\n                    MethodVisitor mv = controller.getMethodVisitor();\n                    int opcode = INVOKEVIRTUAL;\n                    if (mn.isStatic()) {\n                        opcode = INVOKESTATIC;\n                    } else if (mn.isPrivate()) {\n                        opcode = INVOKESPECIAL;\n                    }\n                    \n                    if (opcode!=INVOKESTATIC) mv.visitIntInsn(ALOAD,0);\n                    for (Expression arg : args.getExpressions()) {\n                        arg.visit(controller.getAcg());\n                        ClassNode type = arg.getType();\n                        if (!ClassHelper.isPrimitiveType(type)) {\n                            BytecodeHelper.doCast(mv, type);\n                        }\n                    }\n                    \n                    String owner = BytecodeHelper.getClassInternalName(mn.getDeclaringClass());\n                    String desc = BytecodeHelper.getMethodDescriptor(mn.getReturnType(), mn.getParameters());\n                    mv.visitMethodInsn(opcode, owner, methodName, desc);\n                    ClassNode ret = mn.getReturnType().redirect();\n                    if (ret==ClassHelper.VOID_TYPE) {\n                        ret = ClassHelper.OBJECT_TYPE;\n                        mv.visitInsn(ACONST_NULL);\n                    }\n                    controller.getOperandStack().replace(ret,args.getExpressions().size());\n                    return;\n                }\n                \n            }\n        }\n        \n        \n        if ((adapter == invokeMethod || adapter == invokeMethodOnCurrent || adapter == invokeStaticMethod) && !spreadSafe) {\n            String methodName = getMethodName(message);\n\n            if (methodName != null) {\n                controller.getCallSiteWriter().makeCallSite(\n                        receiver, methodName, arguments, safe, implicitThis, \n                        adapter == invokeMethodOnCurrent, \n                        adapter == invokeStaticMethod);\n                return;\n            }\n        }\n\n        OperandStack operandStack = controller.getOperandStack();\n        CompileStack compileStack = controller.getCompileStack();\n        AsmClassGenerator acg = controller.getAcg();\n        \n        // ensure VariableArguments are read, not stored\n        compileStack.pushLHS(false);\n\n        // sender\n        if (adapter == AsmClassGenerator.setProperty) {\n            ConstantExpression.NULL.visit(acg);\n        } else {\n            sender.visit(acg);\n        }\n        \n        // receiver\n        compileStack.pushImplicitThis(implicitThis);\n        receiver.visit(acg);\n        operandStack.box();\n        compileStack.popImplicitThis();\n        \n        int operandsToRemove = 2;\n        // message\n        if (message != null) {\n            message.visit(acg);\n            operandStack.box();\n            operandsToRemove++;\n        }\n\n        // arguments\n        boolean containsSpreadExpression = AsmClassGenerator.containsSpreadExpression(arguments);\n        int numberOfArguments = containsSpreadExpression ? -1 : AsmClassGenerator.argumentSize(arguments);\n        if (numberOfArguments > MethodCallerMultiAdapter.MAX_ARGS || containsSpreadExpression) {\n            ArgumentListExpression ae;\n            if (arguments instanceof ArgumentListExpression) {\n                ae = (ArgumentListExpression) arguments;\n            } else if (arguments instanceof TupleExpression) {\n                TupleExpression te = (TupleExpression) arguments;\n                ae = new ArgumentListExpression(te.getExpressions());\n            } else {\n                ae = new ArgumentListExpression();\n                ae.addExpression(arguments);\n            }\n            if (containsSpreadExpression) {\n                acg.despreadList(ae.getExpressions(), true);\n            } else {\n                ae.visit(acg);\n            }\n        } else if (numberOfArguments > 0) {\n            operandsToRemove += numberOfArguments;\n            TupleExpression te = (TupleExpression) arguments;\n            for (int i = 0; i < numberOfArguments; i++) {\n                Expression argument = te.getExpression(i);\n                argument.visit(acg);\n                operandStack.box();\n                if (argument instanceof CastExpression) acg.loadWrapper(argument);\n            }\n        }\n\n        adapter.call(controller.getMethodVisitor(), numberOfArguments, safe, spreadSafe);\n\n        compileStack.popLHS();\n        operandStack.replace(ClassHelper.OBJECT_TYPE,operandsToRemove);\n    }","id":96877,"modified_method":"private void makeCall(\n            Expression origin, ClassExpression sender,\n            Expression receiver, Expression message, Expression arguments,\n            MethodCallerMultiAdapter adapter,\n            boolean safe, boolean spreadSafe, boolean implicitThis\n    ) { \n        boolean fittingAdapter =    adapter == invokeMethodOnCurrent ||\n                                    adapter == invokeStaticMethod;\n        if (fittingAdapter && controller.optimizeForInt && controller.isFastPath()) {\n            String methodName = getMethodName(message);\n            if (methodName != null) {\n                List<Parameter> plist = new ArrayList(16);\n                TupleExpression args;\n                if (arguments instanceof TupleExpression) {\n                    args = (TupleExpression) arguments;\n                    for (Expression arg : args.getExpressions()) {\n                        plist.add(new Parameter(arg.getType(),\"\"));\n                    }\n                    \n                } else {\n                    args = new TupleExpression(receiver);\n                    plist.add(new Parameter(arguments.getType(),\"\"));\n                }\n\n                StatementMeta meta = null;\n                if (origin!=null) meta = (StatementMeta) origin.getNodeMetaData(StatementMeta.class);\n                MethodNode mn = null;\n                if (meta!=null) mn = meta.target;\n                \n                if (mn !=null) {\n                    MethodVisitor mv = controller.getMethodVisitor();\n                    int opcode = INVOKEVIRTUAL;\n                    if (mn.isStatic()) {\n                        opcode = INVOKESTATIC;\n                    } else if (mn.isPrivate()) {\n                        opcode = INVOKESPECIAL;\n                    }\n                    \n                    if (opcode!=INVOKESTATIC) mv.visitIntInsn(ALOAD,0);\n                    Parameter[] para = mn.getParameters();\n                    List<Expression> argumentList = args.getExpressions();\n                    for (int i=0; i<argumentList.size(); i++) {\n                        argumentList.get(i).visit(controller.getAcg());\n                        controller.getOperandStack().doGroovyCast(para[i].getType());\n                    }\n                    \n                    String owner = BytecodeHelper.getClassInternalName(mn.getDeclaringClass());\n                    String desc = BytecodeHelper.getMethodDescriptor(mn.getReturnType(), mn.getParameters());\n                    mv.visitMethodInsn(opcode, owner, methodName, desc);\n                    ClassNode ret = mn.getReturnType().redirect();\n                    if (ret==ClassHelper.VOID_TYPE) {\n                        ret = ClassHelper.OBJECT_TYPE;\n                        mv.visitInsn(ACONST_NULL);\n                    }\n                    controller.getOperandStack().replace(ret,args.getExpressions().size());\n                    return;\n                }\n                \n            }\n        }\n        \n        \n        if ((adapter == invokeMethod || adapter == invokeMethodOnCurrent || adapter == invokeStaticMethod) && !spreadSafe) {\n            String methodName = getMethodName(message);\n\n            if (methodName != null) {\n                controller.getCallSiteWriter().makeCallSite(\n                        receiver, methodName, arguments, safe, implicitThis, \n                        adapter == invokeMethodOnCurrent, \n                        adapter == invokeStaticMethod);\n                return;\n            }\n        }\n\n        OperandStack operandStack = controller.getOperandStack();\n        CompileStack compileStack = controller.getCompileStack();\n        AsmClassGenerator acg = controller.getAcg();\n        \n        // ensure VariableArguments are read, not stored\n        compileStack.pushLHS(false);\n\n        // sender\n        if (adapter == AsmClassGenerator.setProperty) {\n            ConstantExpression.NULL.visit(acg);\n        } else {\n            sender.visit(acg);\n        }\n        \n        // receiver\n        compileStack.pushImplicitThis(implicitThis);\n        receiver.visit(acg);\n        operandStack.box();\n        compileStack.popImplicitThis();\n        \n        int operandsToRemove = 2;\n        // message\n        if (message != null) {\n            message.visit(acg);\n            operandStack.box();\n            operandsToRemove++;\n        }\n\n        // arguments\n        boolean containsSpreadExpression = AsmClassGenerator.containsSpreadExpression(arguments);\n        int numberOfArguments = containsSpreadExpression ? -1 : AsmClassGenerator.argumentSize(arguments);\n        if (numberOfArguments > MethodCallerMultiAdapter.MAX_ARGS || containsSpreadExpression) {\n            ArgumentListExpression ae;\n            if (arguments instanceof ArgumentListExpression) {\n                ae = (ArgumentListExpression) arguments;\n            } else if (arguments instanceof TupleExpression) {\n                TupleExpression te = (TupleExpression) arguments;\n                ae = new ArgumentListExpression(te.getExpressions());\n            } else {\n                ae = new ArgumentListExpression();\n                ae.addExpression(arguments);\n            }\n            if (containsSpreadExpression) {\n                acg.despreadList(ae.getExpressions(), true);\n            } else {\n                ae.visit(acg);\n            }\n        } else if (numberOfArguments > 0) {\n            operandsToRemove += numberOfArguments;\n            TupleExpression te = (TupleExpression) arguments;\n            for (int i = 0; i < numberOfArguments; i++) {\n                Expression argument = te.getExpression(i);\n                argument.visit(acg);\n                operandStack.box();\n                if (argument instanceof CastExpression) acg.loadWrapper(argument);\n            }\n        }\n\n        adapter.call(controller.getMethodVisitor(), numberOfArguments, safe, spreadSafe);\n\n        compileStack.popLHS();\n        operandStack.replace(ClassHelper.OBJECT_TYPE,operandsToRemove);\n    }","commit_id":"0af222246a2f8bb36d12a86367ea34c1370ee371","url":"https://github.com/apache/groovy"},{"original_method":"public void writeInvokeStaticMethod(StaticMethodCallExpression call) {\n        makeCall(null,\n                new ClassExpression(call.getOwnerType()),\n                new ConstantExpression(call.getMethod()),\n                call.getArguments(),\n                InvocationWriter.invokeStaticMethod,\n                false, false, false);\n    }","id":96878,"modified_method":"public void writeInvokeStaticMethod(StaticMethodCallExpression call) {\n        makeCall(call,\n                new ClassExpression(call.getOwnerType()),\n                new ConstantExpression(call.getMethod()),\n                call.getArguments(),\n                InvocationWriter.invokeStaticMethod,\n                false, false, false);\n    }","commit_id":"0af222246a2f8bb36d12a86367ea34c1370ee371","url":"https://github.com/apache/groovy"},{"original_method":"@Override\n        public void visitMethodCallExpression(MethodCallExpression expression) {\n            if (expression.getNodeMetaData(StatementMeta.class)!=null) return;\n            super.visitMethodCallExpression(expression);\n            if (!AsmClassGenerator.isThisExpression(expression.getObjectExpression())) return;\n            String name = expression.getMethodAsString();\n            if (name==null) return;\n            // find method call target\n            Expression callArgs = expression.getArguments();\n            Parameter[] paraTypes = null;\n            if (callArgs instanceof ArgumentListExpression) {\n                ArgumentListExpression args = (ArgumentListExpression) callArgs;\n                int size = args.getExpressions().size();\n                paraTypes = new Parameter[size];\n                int i=0;\n                for (Expression exp: args.getExpressions()) {\n                    ClassNode type = getType(exp);\n                    paraTypes[i] = new Parameter(type,\"\");\n                    i++;\n                }\n            } else {\n                ClassNode type = getType(callArgs);\n                paraTypes = new Parameter[]{new Parameter(type,\"\")};\n            }\n            \n            MethodNode target = node.getMethod(name, paraTypes);\n            StatementMeta meta = addMeta(expression);\n            meta.target = target;\n            if (target!=null) meta.type = target.getReturnType().redirect();\n            if (!optimizeInt) meta.optimizeInt =false;\n        }","id":96879,"modified_method":"@Override\n        public void visitMethodCallExpression(MethodCallExpression expression) {\n            if (expression.getNodeMetaData(StatementMeta.class)!=null) return;\n            super.visitMethodCallExpression(expression);\n            \n            Expression object = expression.getObjectExpression();\n            boolean setTarget = AsmClassGenerator.isThisExpression(object);\n            if (!setTarget) {\n                if (!(object instanceof ClassExpression)) return;\n                setTarget = object.equals(node);\n            }\n            \n            if (!setTarget) return;\n            setMethodTarget(expression, expression.getMethodAsString(), expression.getArguments());\n        }","commit_id":"0af222246a2f8bb36d12a86367ea34c1370ee371","url":"https://github.com/apache/groovy"},{"original_method":"/**\n     * Start the entity.\n     * <p>\n     * This installs, configures and launches the application process. However,\n     * users can also call the {@link #install()}, {@link #customize()} and\n     * {@link #launch()} steps independently. The {@link #postLaunch()} will\n     * be called after the {@link #launch()} metheod is executed, but the\n     * process may not be completely initialised at this stage, so care is\n     * required when implementing these stages.\n     *\n     * @see #stop()\n     */\n    @Override\n    public void start() {\n        Boolean started = Optional.fromNullable(entity.getConfig(BrooklynConfigKeys.ENTITY_STARTED)).or(false);\n        if (!started) {\n            DynamicTasks.queue(\"pre-install\", new Runnable() { public void run() {\n                preInstall();\n            }});\n\n            if (Strings.isNonBlank(entity.getConfig(BrooklynConfigKeys.PRE_INSTALL_COMMAND))) {\n                DynamicTasks.queue(\"pre-install-command\", new Runnable() { public void run() {\n                    runPreInstallCommand(entity.getConfig(BrooklynConfigKeys.PRE_INSTALL_COMMAND));\n                }});\n            };\n\n            Boolean skip = Optional.fromNullable(entity.getConfig(BrooklynConfigKeys.SKIP_INSTALLATION)).or(false);\n            if (!skip) {\n                DynamicTasks.queue(\"setup\", new Runnable() { public void run() {\n                    waitForConfigKey(BrooklynConfigKeys.SETUP_LATCH);\n                    setup();\n                }});\n\n                DynamicTasks.queue(\"copy-install-resources\", new Runnable() { public void run() {\n                    waitForConfigKey(BrooklynConfigKeys.INSTALL_RESOURCES_LATCH);\n                    copyInstallResources();\n                }});\n\n                DynamicTasks.queue(\"install\", new Runnable() { public void run() {\n                    waitForConfigKey(BrooklynConfigKeys.INSTALL_LATCH);\n                    install();\n                }});\n            }\n\n            if (Strings.isNonBlank(entity.getConfig(BrooklynConfigKeys.POST_INSTALL_COMMAND))) {\n                DynamicTasks.queue(\"post-install-command\", new Runnable() { public void run() {\n                    runPostInstallCommand(entity.getConfig(BrooklynConfigKeys.POST_INSTALL_COMMAND));\n                }});\n            };\n\n            DynamicTasks.queue(\"customize\", new Runnable() { public void run() {\n                waitForConfigKey(BrooklynConfigKeys.CUSTOMIZE_LATCH);\n                customize();\n            }});\n\n            DynamicTasks.queue(\"copy-runtime-resources\", new Runnable() { public void run() {\n                waitForConfigKey(BrooklynConfigKeys.RUNTIME_RESOURCES_LATCH);\n                copyRuntimeResources();\n            }});\n\n            if (Strings.isNonBlank(entity.getConfig(BrooklynConfigKeys.PRE_LAUNCH_COMMAND))) {\n                DynamicTasks.queue(\"pre-launch-command\", new Runnable() { public void run() {\n                    runPreLaunchCommand(entity.getConfig(BrooklynConfigKeys.PRE_LAUNCH_COMMAND));\n                }});\n            };\n\n            DynamicTasks.queue(\"launch\", new Runnable() { public void run() {\n                waitForConfigKey(BrooklynConfigKeys.LAUNCH_LATCH);\n                launch();\n            }});\n\n            if (Strings.isNonBlank(entity.getConfig(BrooklynConfigKeys.POST_LAUNCH_COMMAND))) {\n                DynamicTasks.queue(\"post-launch-command\", new Runnable() { public void run() {\n                    runPostLaunchCommand(entity.getConfig(BrooklynConfigKeys.POST_LAUNCH_COMMAND));\n                }});\n            };\n        }\n\n        DynamicTasks.queue(\"post-launch\", new Runnable() { public void run() {\n            postLaunch();\n        }});\n    }","id":96880,"modified_method":"/**\n     * Start the entity.\n     * <p>\n     * This installs, configures and launches the application process. However,\n     * users can also call the {@link #install()}, {@link #customize()} and\n     * {@link #launch()} steps independently. The {@link #postLaunch()} will\n     * be called after the {@link #launch()} metheod is executed, but the\n     * process may not be completely initialised at this stage, so care is\n     * required when implementing these stages.\n     * <p>\n     * The {@link BrooklynConfigKeys#ENTITY_RUNNING} key can be set on the location\n     * or the entity to skip the startup process if the entity is already running,\n     * according to the {@link #isRunning()} method. To force the startup to be\n     * skipped, {@link BrooklynConfigKeys#ENTITY_STARTED} can be set on the entity.\n     * The {@link BrooklynConfigKeys#SKIP_INSTALLATION} key can also be used to\n     * skip the {@link #setup()}, {@link #copyInstallResources()} and\n     * {@link #install()} methods if set on the entity or location. \n     *\n     * @see #stop()\n     */\n    @Override\n    public void start() {\n        boolean skipStart = false;\n        Optional<Boolean> locationRunning = Optional.fromNullable(getLocation().getConfig(BrooklynConfigKeys.ENTITY_RUNNING));\n        Optional<Boolean> entityRunning = Optional.fromNullable(entity.getConfig(BrooklynConfigKeys.ENTITY_RUNNING));\n        if (locationRunning.or(entityRunning).or(false)) {\n            skipStart = isRunning();\n        } else {\n            skipStart = Optional.fromNullable(entity.getConfig(BrooklynConfigKeys.ENTITY_STARTED)).or(false);\n        }\n        if (!skipStart) {\n            DynamicTasks.queue(\"pre-install\", new Runnable() { public void run() {\n                preInstall();\n            }});\n\n            if (Strings.isNonBlank(entity.getConfig(BrooklynConfigKeys.PRE_INSTALL_COMMAND))) {\n                DynamicTasks.queue(\"pre-install-command\", new Runnable() { public void run() {\n                    runPreInstallCommand(entity.getConfig(BrooklynConfigKeys.PRE_INSTALL_COMMAND));\n                }});\n            };\n\n            Optional<Boolean> locationInstalled = Optional.fromNullable(getLocation().getConfig(BrooklynConfigKeys.SKIP_INSTALLATION));\n            Optional<Boolean> entityInstalled = Optional.fromNullable(entity.getConfig(BrooklynConfigKeys.SKIP_INSTALLATION));\n            boolean skipInstall = locationInstalled.or(entityInstalled).or(false);\n            if (!skipInstall) {\n                DynamicTasks.queue(\"setup\", new Runnable() { public void run() {\n                    waitForConfigKey(BrooklynConfigKeys.SETUP_LATCH);\n                    setup();\n                }});\n\n                DynamicTasks.queue(\"copy-install-resources\", new Runnable() { public void run() {\n                    waitForConfigKey(BrooklynConfigKeys.INSTALL_RESOURCES_LATCH);\n                    copyInstallResources();\n                }});\n\n                DynamicTasks.queue(\"install\", new Runnable() { public void run() {\n                    waitForConfigKey(BrooklynConfigKeys.INSTALL_LATCH);\n                    install();\n                }});\n            }\n\n            if (Strings.isNonBlank(entity.getConfig(BrooklynConfigKeys.POST_INSTALL_COMMAND))) {\n                DynamicTasks.queue(\"post-install-command\", new Runnable() { public void run() {\n                    runPostInstallCommand(entity.getConfig(BrooklynConfigKeys.POST_INSTALL_COMMAND));\n                }});\n            };\n\n            DynamicTasks.queue(\"customize\", new Runnable() { public void run() {\n                waitForConfigKey(BrooklynConfigKeys.CUSTOMIZE_LATCH);\n                customize();\n            }});\n\n            DynamicTasks.queue(\"copy-runtime-resources\", new Runnable() { public void run() {\n                waitForConfigKey(BrooklynConfigKeys.RUNTIME_RESOURCES_LATCH);\n                copyRuntimeResources();\n            }});\n\n            if (Strings.isNonBlank(entity.getConfig(BrooklynConfigKeys.PRE_LAUNCH_COMMAND))) {\n                DynamicTasks.queue(\"pre-launch-command\", new Runnable() { public void run() {\n                    runPreLaunchCommand(entity.getConfig(BrooklynConfigKeys.PRE_LAUNCH_COMMAND));\n                }});\n            };\n\n            DynamicTasks.queue(\"launch\", new Runnable() { public void run() {\n                waitForConfigKey(BrooklynConfigKeys.LAUNCH_LATCH);\n                launch();\n            }});\n\n            if (Strings.isNonBlank(entity.getConfig(BrooklynConfigKeys.POST_LAUNCH_COMMAND))) {\n                DynamicTasks.queue(\"post-launch-command\", new Runnable() { public void run() {\n                    runPostLaunchCommand(entity.getConfig(BrooklynConfigKeys.POST_LAUNCH_COMMAND));\n                }});\n            };\n        }\n\n        DynamicTasks.queue(\"post-launch\", new Runnable() { public void run() {\n            postLaunch();\n        }});\n    }","commit_id":"d5b34e145ebf08fb834ef0eea48a8754f7e32db5","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"@Override\n    protected Integer convertConfigToSensor(PortRange value, Entity entity) {\n        if (value==null) return null;\n        Collection<? extends Location> locations = entity.getLocations();\n        if (!locations.isEmpty()) {\n            Maybe<? extends Location> lo = Locations.findUniqueMachineLocation(locations);\n            if (!lo.isPresent()) {\n                // Try a unique location which isn't a machine provisioner\n                Iterator<? extends Location> li = Iterables.filter(locations,\n                        Predicates.not(Predicates.instanceOf(MachineProvisioningLocation.class))).iterator();\n                if (li.hasNext()) lo = Maybe.of(li.next());\n                if (li.hasNext()) lo = Maybe.absent();\n            }\n            // Fall back to selecting the single location\n            if (!lo.isPresent() && locations.size() == 1) {\n                lo = Maybe.of(locations.iterator().next());\n            }\n            if (LOG.isTraceEnabled()) {\n                LOG.trace(\"Convert config to sensor for {} found locations: {}. Selected: {}\", new Object[] {entity, locations, lo});\n            }\n            if (lo.isPresent()) {\n                Location l = lo.get();\n                Boolean skip = Optional.fromNullable(entity.getConfig(BrooklynConfigKeys.SKIP_INSTALLATION)).or(false);\n                Boolean started = Optional.fromNullable(entity.getConfig(BrooklynConfigKeys.ENTITY_STARTED)).or(false);\n                if (l instanceof PortSupplier) {\n                    int p = ((PortSupplier) l).obtainPort(value);\n                    if (p != -1) {\n                        LOG.debug(\"{}: choosing port {} for {}\", new Object[] { entity, p, getName() });\n                        return p;\n                    }\n                    // If we are not skipping install or already started, fail now\n                    if (!(skip || started)) {\n                        int rangeSize = Iterables.size(value);\n                        if (rangeSize == 0) {\n                            LOG.warn(\"{}: no port available for {} (empty range {})\", new Object[] { entity, getName(), value });\n                        } else if (rangeSize == 1) {\n                            Integer pp = value.iterator().next();\n                            if (pp > 1024) {\n                                LOG.warn(\"{}: port {} not available for {}\", new Object[] { entity, pp, getName() });\n                            } else {\n                                LOG.warn(\"{}: port {} not available for {} (root may be required?)\", new Object[] { entity, pp, getName() });\n                            }\n                        } else {\n                            LOG.warn(\"{}: no port available for {} (tried range {})\", new Object[] { entity, getName(), value });\n                        }\n                        return null; // Definitively, no ports available\n                    }\n                }\n                // Ports may be available, we just can't tell from the location\n                Integer v = (value.isEmpty() ? null : value.iterator().next());\n                LOG.debug(\"{}: choosing port {} (unconfirmed) for {}\", new Object[] { entity, v, getName() });\n                return v;\n            } else {\n                LOG.warn(\"{}: ports not applicable, or not yet applicable, because has multiple locations {}; ignoring \", new Object[] { entity, locations, getName() });\n            }\n        } else {\n            LOG.warn(\"{}: ports not applicable, or not yet applicable, bacause has no locations; ignoring {}\", entity, getName());\n        }\n        return null;\n    }","id":96881,"modified_method":"@Override\n    protected Integer convertConfigToSensor(PortRange value, Entity entity) {\n        if (value==null) return null;\n        Collection<? extends Location> locations = entity.getLocations();\n        if (!locations.isEmpty()) {\n            Maybe<? extends Location> lo = Locations.findUniqueMachineLocation(locations);\n            if (!lo.isPresent()) {\n                // Try a unique location which isn't a machine provisioner\n                Iterator<? extends Location> li = Iterables.filter(locations,\n                        Predicates.not(Predicates.instanceOf(MachineProvisioningLocation.class))).iterator();\n                if (li.hasNext()) lo = Maybe.of(li.next());\n                if (li.hasNext()) lo = Maybe.absent();\n            }\n            // Fall back to selecting the single location\n            if (!lo.isPresent() && locations.size() == 1) {\n                lo = Maybe.of(locations.iterator().next());\n            }\n            if (LOG.isTraceEnabled()) {\n                LOG.trace(\"Convert config to sensor for {} found locations: {}. Selected: {}\", new Object[] {entity, locations, lo});\n            }\n            if (lo.isPresent()) {\n                Location l = lo.get();\n                Optional<Boolean> locationRunning = Optional.fromNullable(l.getConfig(BrooklynConfigKeys.ENTITY_RUNNING));\n                Optional<Boolean> entityRunning = Optional.fromNullable(entity.getConfig(BrooklynConfigKeys.ENTITY_RUNNING));\n                Optional<Boolean> locationInstalled = Optional.fromNullable(l.getConfig(BrooklynConfigKeys.SKIP_INSTALLATION));\n                Optional<Boolean> entityInstalled = Optional.fromNullable(entity.getConfig(BrooklynConfigKeys.SKIP_INSTALLATION));\n                Optional<Boolean> entityStarted = Optional.fromNullable(entity.getConfig(BrooklynConfigKeys.ENTITY_STARTED));\n                boolean skipCheck = locationRunning.or(entityRunning).or(locationInstalled).or(entityInstalled).or(entityStarted).or(false);\n                if (l instanceof PortSupplier) {\n                    int p = ((PortSupplier) l).obtainPort(value);\n                    if (p != -1) {\n                        LOG.debug(\"{}: choosing port {} for {}\", new Object[] { entity, p, getName() });\n                        return p;\n                    }\n                    // If we are not skipping install or already started, fail now\n                    if (!skipCheck) {\n                        int rangeSize = Iterables.size(value);\n                        if (rangeSize == 0) {\n                            LOG.warn(\"{}: no port available for {} (empty range {})\", new Object[] { entity, getName(), value });\n                        } else if (rangeSize == 1) {\n                            Integer pp = value.iterator().next();\n                            if (pp > 1024) {\n                                LOG.warn(\"{}: port {} not available for {}\", new Object[] { entity, pp, getName() });\n                            } else {\n                                LOG.warn(\"{}: port {} not available for {} (root may be required?)\", new Object[] { entity, pp, getName() });\n                            }\n                        } else {\n                            LOG.warn(\"{}: no port available for {} (tried range {})\", new Object[] { entity, getName(), value });\n                        }\n                        return null; // Definitively, no ports available\n                    }\n                }\n                // Ports may be available, we just can't tell from the location\n                Integer v = (value.isEmpty() ? null : value.iterator().next());\n                LOG.debug(\"{}: choosing port {} (unconfirmed) for {}\", new Object[] { entity, v, getName() });\n                return v;\n            } else {\n                LOG.warn(\"{}: ports not applicable, or not yet applicable, because has multiple locations {}; ignoring \", new Object[] { entity, locations, getName() });\n            }\n        } else {\n            LOG.warn(\"{}: ports not applicable, or not yet applicable, bacause has no locations; ignoring {}\", entity, getName());\n        }\n        return null;\n    }","commit_id":"d5b34e145ebf08fb834ef0eea48a8754f7e32db5","url":"https://github.com/apache/incubator-brooklyn"},{"original_method":"public void populateRestletRequestFromExchange(Request request, Exchange exchange) {\n        request.setReferrerRef(\"camel-restlet\");\n        String body = exchange.getIn().getBody(String.class);\n        Form form = new Form();\n        // add the body as the key in the form with null value\n        form.add(body, null);\n\n        MediaType mediaType = exchange.getIn().getHeader(Exchange.CONTENT_TYPE, MediaType.class);\n        if (mediaType == null) {\n            mediaType = MediaType.APPLICATION_WWW_FORM;\n        }\n\n        LOG.debug(\"Populate Restlet request from exchange body: {} using media type {}\", body, mediaType);\n\n        // login and password are filtered by header filter strategy\n        String login = exchange.getIn().getHeader(RestletConstants.RESTLET_LOGIN, String.class);\n        String password = exchange.getIn().getHeader(RestletConstants.RESTLET_PASSWORD, String.class);\n\n        if (login != null && password != null) {\n            ChallengeResponse authentication = new ChallengeResponse(ChallengeScheme.HTTP_BASIC, login, password);\n            request.setChallengeResponse(authentication);\n            LOG.debug(\"Basic HTTP Authentication has been applied\");\n        }\n\n        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {\n            String key = entry.getKey();\n            Object value = entry.getValue();\n            if (!headerFilterStrategy.applyFilterToCamelHeaders(key, value, exchange)) {\n                // Use forms only for GET and POST/x-www-form-urlencoded\n                if (request.getMethod() == Method.GET || (request.getMethod() == Method.POST && mediaType == MediaType.APPLICATION_WWW_FORM)) {\n                    if (key.startsWith(\"org.restlet.\")) {\n                        // put the org.restlet headers in attributes\n                        request.getAttributes().put(key, value);\n                    } else {\n                        // put the user stuff in the form\n                        if (value instanceof Collection) {\n                            for (Object v : (Collection<?>) value) {\n                                form.add(key, v.toString());\n                            }\n                        } else {\n                            form.add(key, value.toString());\n                        }\n                    }\n                } else {\n                    // For non-form post put all the headers in attributes\n                    request.getAttributes().put(key, value);\n                }\n                LOG.debug(\"Populate Restlet request from exchange header: {} value: {}\", key, value);\n            }\n        }\n\n        LOG.debug(\"Using Content Type: {} for POST data: {}\", mediaType, body);\n\n        // Only URL Encode for GET and form POST\n        if (request.getMethod() == Method.GET || (request.getMethod() == Method.POST && mediaType == MediaType.APPLICATION_WWW_FORM)) {\n            request.setEntity(form.getWebRepresentation());\n        } else {\n            if (body == null) {\n                request.setEntity(null);\n            } else {\n                request.setEntity(body, mediaType);\n            }\n        }\n\n        // accept\n        String accept = exchange.getIn().getHeader(\"Accept\", String.class);\n        if (accept != null) {\n            MediaType acceptedMediaType = exchange.getContext().getTypeConverter().tryConvertTo(MediaType.class, exchange, accept);\n            if (acceptedMediaType != null) {\n                request.getClientInfo().getAcceptedMediaTypes().add(new Preference<MediaType>(acceptedMediaType));\n            }\n        }\n        MediaType acceptedMediaType = exchange.getIn().getHeader(Exchange.ACCEPT_CONTENT_TYPE, MediaType.class);\n        if (acceptedMediaType != null) {\n            request.getClientInfo().getAcceptedMediaTypes().add(new Preference<MediaType>(acceptedMediaType));\n        }\n    }","id":96882,"modified_method":"public void populateRestletRequestFromExchange(Request request, Exchange exchange) {\n        request.setReferrerRef(\"camel-restlet\");\n\n        final Method method = request.getMethod();\n\n        MediaType mediaType = exchange.getIn().getHeader(Exchange.CONTENT_TYPE, MediaType.class);\n        if (mediaType == null) {\n            mediaType = MediaType.APPLICATION_WWW_FORM;\n        }\n\n        Form form = null;\n        // Use forms only for PUT, POST and x-www-form-urlencoded\n        if ((Method.PUT == method || Method.POST == method) && mediaType == MediaType.APPLICATION_WWW_FORM) {\n            form = new Form();\n            String body = exchange.getIn().getBody(String.class);\n            form.add(body, null);\n        }\n\n        // login and password are filtered by header filter strategy\n        String login = exchange.getIn().getHeader(RestletConstants.RESTLET_LOGIN, String.class);\n        String password = exchange.getIn().getHeader(RestletConstants.RESTLET_PASSWORD, String.class);\n\n        if (login != null && password != null) {\n            ChallengeResponse authentication = new ChallengeResponse(ChallengeScheme.HTTP_BASIC, login, password);\n            request.setChallengeResponse(authentication);\n            LOG.debug(\"Basic HTTP Authentication has been applied\");\n        }\n\n        for (Map.Entry<String, Object> entry : exchange.getIn().getHeaders().entrySet()) {\n            String key = entry.getKey();\n            Object value = entry.getValue();\n            if (!headerFilterStrategy.applyFilterToCamelHeaders(key, value, exchange)) {\n                // Use forms only for PUT, POST and x-www-form-urlencoded\n                if (form != null) {\n                    if (key.startsWith(\"org.restlet.\")) {\n                        // put the org.restlet headers in attributes\n                        request.getAttributes().put(key, value);\n                    } else {\n                        // put the user stuff in the form\n                        if (value instanceof Collection) {\n                            for (Object v : (Collection<?>) value) {\n                                form.add(key, v.toString());\n                            }\n                        } else {\n                            form.add(key, value.toString());\n                        }\n                    }\n                } else {\n                    // For non-form post put all the headers in attributes\n                    request.getAttributes().put(key, value);\n                }\n                LOG.debug(\"Populate Restlet request from exchange header: {} value: {}\", key, value);\n            }\n        }\n\n        if (form != null) {\n            request.setEntity(form.getWebRepresentation());\n            LOG.debug(\"Populate Restlet {} request from exchange body as form using media type {}\", method, mediaType);\n        } else {\n            // include body if PUT or POST\n            if (request.getMethod() == Method.PUT || request.getMethod() == Method.POST) {\n                String body = exchange.getIn().getBody(String.class);\n                request.setEntity(body, mediaType);\n                LOG.debug(\"Populate Restlet {} request from exchange body: {} using media type {}\", method, body, mediaType);\n            } else {\n                // no body\n                LOG.debug(\"Populate Restlet {} request from exchange using media type {}\", method, mediaType);\n                request.setEntity(null);\n            }\n        }\n\n        // accept\n        String accept = exchange.getIn().getHeader(\"Accept\", String.class);\n        if (accept != null) {\n            MediaType acceptedMediaType = exchange.getContext().getTypeConverter().tryConvertTo(MediaType.class, exchange, accept);\n            if (acceptedMediaType != null) {\n                request.getClientInfo().getAcceptedMediaTypes().add(new Preference<MediaType>(acceptedMediaType));\n            }\n        }\n        MediaType acceptedMediaType = exchange.getIn().getHeader(Exchange.ACCEPT_CONTENT_TYPE, MediaType.class);\n        if (acceptedMediaType != null) {\n            request.getClientInfo().getAcceptedMediaTypes().add(new Preference<MediaType>(acceptedMediaType));\n        }\n\n    }","commit_id":"8b3da67b8809fbbe3ba10a125df8eefba05e82ee","url":"https://github.com/apache/camel"},{"original_method":"public void populateRestletResponseFromExchange(Exchange exchange, Response response) {\n        Message out;\n        if (exchange.isFailed()) {\n            // 500 for internal server error which can be overridden by response code in header\n            response.setStatus(Status.valueOf(500));\n            if (exchange.hasOut() && exchange.getOut().isFault()) {\n                out = exchange.getOut();\n            } else {\n                // print exception as message and stacktrace\n                Exception t = exchange.getException();\n                StringWriter sw = new StringWriter();\n                PrintWriter pw = new PrintWriter(sw);\n                t.printStackTrace(pw);\n                response.setEntity(sw.toString(), MediaType.TEXT_PLAIN);\n                return;\n            }\n        } else {\n            out = exchange.getOut();\n        }\n\n        // get content type\n        MediaType mediaType = out.getHeader(Exchange.CONTENT_TYPE, MediaType.class);\n        if (mediaType == null) {\n            Object body = out.getBody();\n            mediaType = MediaType.TEXT_PLAIN;\n            if (body instanceof String) {\n                mediaType = MediaType.TEXT_PLAIN;\n            } else if (body instanceof StringSource || body instanceof DOMSource) {\n                mediaType = MediaType.TEXT_XML;\n            }\n        }\n\n        // get response code\n        Integer responseCode = out.getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class);\n        if (responseCode != null) {\n            response.setStatus(Status.valueOf(responseCode));\n        }\n\n        for (Map.Entry<String, Object> entry : out.getHeaders().entrySet()) {\n            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {\n                response.getAttributes().put(entry.getKey(), entry.getValue());\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"Populate Restlet response from exchange header: \"\n                            + entry.getKey() + \" value: \" + entry.getValue());\n                }\n            }\n        }\n\n        String text = out.getBody(String.class);\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Populate Restlet response from exchange body: \" + text);\n        }\n        response.setEntity(text, mediaType);\n\n        if (exchange.getProperty(Exchange.CHARSET_NAME) != null) {\n            CharacterSet cs = CharacterSet.valueOf(exchange.getProperty(Exchange.CHARSET_NAME, String.class));\n            response.getEntity().setCharacterSet(cs);\n        }\n    }","id":96883,"modified_method":"public void populateRestletResponseFromExchange(Exchange exchange, Response response) {\n        Message out;\n        if (exchange.isFailed()) {\n            // 500 for internal server error which can be overridden by response code in header\n            response.setStatus(Status.valueOf(500));\n            if (exchange.hasOut() && exchange.getOut().isFault()) {\n                out = exchange.getOut();\n            } else {\n                // print exception as message and stacktrace\n                Exception t = exchange.getException();\n                StringWriter sw = new StringWriter();\n                PrintWriter pw = new PrintWriter(sw);\n                t.printStackTrace(pw);\n                response.setEntity(sw.toString(), MediaType.TEXT_PLAIN);\n                return;\n            }\n        } else {\n            out = exchange.getOut();\n        }\n\n        // get content type\n        MediaType mediaType = out.getHeader(Exchange.CONTENT_TYPE, MediaType.class);\n        if (mediaType == null) {\n            Object body = out.getBody();\n            mediaType = MediaType.TEXT_PLAIN;\n            if (body instanceof String) {\n                mediaType = MediaType.TEXT_PLAIN;\n            } else if (body instanceof StringSource || body instanceof DOMSource) {\n                mediaType = MediaType.TEXT_XML;\n            }\n        }\n\n        // get response code\n        Integer responseCode = out.getHeader(Exchange.HTTP_RESPONSE_CODE, Integer.class);\n        if (responseCode != null) {\n            response.setStatus(Status.valueOf(responseCode));\n        }\n\n        for (Map.Entry<String, Object> entry : out.getHeaders().entrySet()) {\n            if (!headerFilterStrategy.applyFilterToCamelHeaders(entry.getKey(), entry.getValue(), exchange)) {\n                response.getAttributes().put(entry.getKey(), entry.getValue());\n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"Populate Restlet response from exchange header: \"\n                            + entry.getKey() + \" value: \" + entry.getValue());\n                }\n            }\n        }\n\n        // set response body according to the message body\n        Object body = out.getBody();\n        if (body instanceof GenericFile) {\n            // grab body from generic file holder\n            GenericFile gf = (GenericFile) body;\n            body = gf.getBody();\n        }\n\n        if (body == null) {\n            // empty response\n            response.setEntity(\"\", MediaType.TEXT_PLAIN);\n        } else if (body instanceof InputStream) {\n            response.setEntity(new InputRepresentation(out.getBody(InputStream.class), mediaType));\n        } else if (body instanceof File) {\n            response.setEntity(new FileRepresentation(out.getBody(File.class), mediaType));\n        } else if (body != null) {\n            // fallback and use string\n            String text = out.getBody(String.class);\n            response.setEntity(text, mediaType);\n        }\n        if (LOG.isDebugEnabled()) {\n            LOG.debug(\"Populate Restlet response from exchange body: \" + body);\n        }\n\n        if (exchange.getProperty(Exchange.CHARSET_NAME) != null) {\n            CharacterSet cs = CharacterSet.valueOf(exchange.getProperty(Exchange.CHARSET_NAME, String.class));\n            response.getEntity().setCharacterSet(cs);\n        }\n    }","commit_id":"4449aaa0f679ef6ebca290c21e8065f1da241fb3","url":"https://github.com/apache/camel"},{"original_method":"private void attachUriPatternToRestlet(String uriPattern, RestletEndpoint endpoint, Restlet target) {\n        MethodBasedRouter router = getMethodRouter(uriPattern);\n        \n        Map<String, String> realm = endpoint.getRestletRealm();\n        if (realm != null && realm.size() > 0) {\n            Guard guard = new Guard(component.getContext().createChildContext(), \n                    ChallengeScheme.HTTP_BASIC, \"Camel-Restlet Endpoint Realm\");\n            for (Map.Entry<String, String> entry : realm.entrySet()) {\n                guard.getSecrets().put(entry.getKey(), entry.getValue().toCharArray());\n            }\n            guard.setNext(target);\n            target = guard;\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Target has been set to guard: \" + guard);\n            }\n        }\n        \n        if (endpoint.getRestletMethods() != null) {\n            Method[] methods = endpoint.getRestletMethods();\n            for (Method method : methods) {\n                router.addRoute(method, target);   \n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"Attached restlet uriPattern: \" + uriPattern + \" method: \" + method);\n                }\n            }\n        } else {\n            router.addRoute(endpoint.getRestletMethod(), target);\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Attached restlet uriPattern: \" + uriPattern + \" method: \" + endpoint.getRestletMethod());\n            }\n        }\n        \n        if (!router.hasBeenAttached()) {\n            component.getDefaultHost().attach(uriPattern, router);\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Attached methodRouter uriPattern: \" + uriPattern);\n            }\n        }\n    }","id":96884,"modified_method":"private void attachUriPatternToRestlet(String uriPattern, RestletEndpoint endpoint, Restlet target) {\n        MethodBasedRouter router = getMethodRouter(uriPattern);\n        \n        Map<String, String> realm = endpoint.getRestletRealm();\n        if (realm != null && realm.size() > 0) {\n            ChallengeAuthenticator guard = new ChallengeAuthenticator(component.getContext().createChildContext(),\n                    ChallengeScheme.HTTP_BASIC, \"Camel-Restlet Endpoint Realm\");\n            MapVerifier verifier = new MapVerifier();\n            for (Map.Entry<String, String> entry : realm.entrySet()) {\n                verifier.getLocalSecrets().put(entry.getKey(), entry.getValue().toCharArray());\n            }\n            guard.setVerifier(verifier);\n            guard.setNext(target);\n            target = guard;\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Target has been set to guard: \" + guard);\n            }\n        }\n        \n        if (endpoint.getRestletMethods() != null) {\n            Method[] methods = endpoint.getRestletMethods();\n            for (Method method : methods) {\n                router.addRoute(method, target);   \n                if (LOG.isDebugEnabled()) {\n                    LOG.debug(\"Attached restlet uriPattern: \" + uriPattern + \" method: \" + method);\n                }\n            }\n        } else {\n            router.addRoute(endpoint.getRestletMethod(), target);\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Attached restlet uriPattern: \" + uriPattern + \" method: \" + endpoint.getRestletMethod());\n            }\n        }\n        \n        if (!router.hasBeenAttached()) {\n            component.getDefaultHost().attach(uriPattern, router);\n            if (LOG.isDebugEnabled()) {\n                LOG.debug(\"Attached methodRouter uriPattern: \" + uriPattern);\n            }\n        }\n    }","commit_id":"4449aaa0f679ef6ebca290c21e8065f1da241fb3","url":"https://github.com/apache/camel"},{"original_method":"public NSArray sortedBrowserList()\n{\n        NSArray result = null;\n        EORelationship relationship = entity().relationshipNamed(propertyKey());\n        EOEntity destinationEntity = relationship.destinationEntity();\n        if(destinationEntity.userInfo().valueForKey(\"isSortedJoinEntity\") != null &&\n           ((String)destinationEntity.userInfo().valueForKey(\"isSortedJoinEntity\")).equals(\"true\")){\n            D2WContext d2wContext = new D2WContext();\n            d2wContext.setEntity(destinationEntity);\n            String indexKey = (String)d2wContext.valueForKey(\"indexKey\");\n            result =   ERXArrayUtilities.sortedArraySortedWithKey(browserList(),\n                                                                  indexKey,\n                                                               null);\n        }else{\n            result = browserList();\n        }\n        return result;\n}","id":96885,"modified_method":"public NSArray sortedBrowserList() {\n        NSArray result = browserList();\n        String indexKey=null;\n        EORelationship relationship = entity().relationshipNamed(propertyKey());\n        if (relationship!=null) {\n            EOEntity destinationEntity = relationship.destinationEntity();\n            if(destinationEntity!=null &&\n               destinationEntity.userInfo().valueForKey(\"isSortedJoinEntity\") != null &&\n               ((String)destinationEntity.userInfo().valueForKey(\"isSortedJoinEntity\")).equals(\"true\")) {\n                synchronized (_context) {\n                    _context.setEntity(destinationEntity);\n                    indexKey = (String)_context.valueForKey(\"indexKey\");\n                }\n            } \n        }\n        if (indexKey!=null)\n            result =   ERXArrayUtilities.sortedArraySortedWithKey(result,\n                                                                  indexKey,\n                                                                  null);\n        \n        return result;\n}","commit_id":"1c15d0fe8a7547896ebb2a454f12b19d8e0b8684","url":"https://github.com/wocommunity/wonder"},{"original_method":"@Nullable\n  @Override\n  public String getCommentedBlockCommentPrefix() {\n    return getCommenter().getCommentedBlockCommentPrefix();\n  }","id":96886,"modified_method":"@Nullable\n  @Override\n  public String getCommentedBlockCommentPrefix() {\n    Commenter commenter = getCommenter();\n    return commenter != null ? commenter.getCommentedBlockCommentPrefix() : null;\n  }","commit_id":"c2239965765eb44b9eabc92b0db780fdf75111a2","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Nullable\n  @Override\n  public String getLineCommentPrefix() {\n    return getCommenter().getLineCommentPrefix();\n  }","id":96887,"modified_method":"@Nullable\n  @Override\n  public String getLineCommentPrefix() {\n    Commenter commenter = getCommenter();\n    return commenter != null ? commenter.getLineCommentPrefix() : null;\n  }","commit_id":"c2239965765eb44b9eabc92b0db780fdf75111a2","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Nullable\n  @Override\n  public String getBlockCommentPrefix() {\n    return getCommenter().getBlockCommentPrefix();\n  }","id":96888,"modified_method":"@Nullable\n  @Override\n  public String getBlockCommentPrefix() {\n    Commenter commenter = getCommenter();\n    return commenter != null ? commenter.getBlockCommentPrefix() : null;\n  }","commit_id":"c2239965765eb44b9eabc92b0db780fdf75111a2","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Nullable\n  @Override\n  public String getBlockCommentSuffix() {\n    return getCommenter().getBlockCommentSuffix();\n  }","id":96889,"modified_method":"@Nullable\n  @Override\n  public String getBlockCommentSuffix() {\n    Commenter commenter = getCommenter();\n    return commenter != null ? commenter.getBlockCommentSuffix() : null;\n  }","commit_id":"c2239965765eb44b9eabc92b0db780fdf75111a2","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"@Nullable\n  @Override\n  public String getCommentedBlockCommentSuffix() {\n    return getCommenter().getCommentedBlockCommentSuffix();\n  }","id":96890,"modified_method":"@Nullable\n  @Override\n  public String getCommentedBlockCommentSuffix() {\n    Commenter commenter = getCommenter();\n    return commenter != null ? commenter.getCommentedBlockCommentSuffix() : null;\n  }","commit_id":"c2239965765eb44b9eabc92b0db780fdf75111a2","url":"https://github.com/JetBrains/intellij-plugins"},{"original_method":"private static void startNode() {\n        assert NODE == null;\n        NODE = newNode();\n        // we must wait for the node to actually be up and running. otherwise the node might have started, elected itself master but might not yet have removed the\n        // SERVICE_UNAVAILABLE/1/state not recovered / initialized block\n        ClusterHealthResponse clusterHealthResponse = client().admin().cluster().prepareHealth().setWaitForGreenStatus().get();\n        assertFalse(clusterHealthResponse.isTimedOut());\n    }","id":96891,"modified_method":"private void startNode() {\n        assert NODE == null;\n        NODE = newNode();\n        // we must wait for the node to actually be up and running. otherwise the node might have started, elected itself master but might not yet have removed the\n        // SERVICE_UNAVAILABLE/1/state not recovered / initialized block\n        ClusterHealthResponse clusterHealthResponse = client().admin().cluster().prepareHealth().setWaitForGreenStatus().get();\n        assertFalse(clusterHealthResponse.isTimedOut());\n    }","commit_id":"af7d6b629c6aad02637c93c42ac03453181da1d9","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private static void reset() {\n        assert NODE != null;\n        stopNode();\n        startNode();\n    }","id":96892,"modified_method":"private void reset() {\n        assert NODE != null;\n        stopNode();\n        startNode();\n    }","commit_id":"af7d6b629c6aad02637c93c42ac03453181da1d9","url":"https://github.com/elastic/elasticsearch"},{"original_method":"private static Node newNode() {\n        Node build = new Node(Settings.builder()\n                .put(ClusterName.SETTING, InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n                .put(\"path.home\", createTempDir())\n                // TODO: use a consistent data path for custom paths\n                // This needs to tie into the ESIntegTestCase#indexSettings() method\n                .put(\"path.shared_data\", createTempDir().getParent())\n                .put(\"node.name\", nodeName())\n                .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)\n                .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)\n                .put(\"script.inline\", \"on\")\n                .put(\"script.indexed\", \"on\")\n                .put(EsExecutors.PROCESSORS, 1) // limit the number of threads created\n                .put(\"http.enabled\", false)\n                .put(\"node.local\", true)\n                .put(\"node.data\", true)\n                .put(InternalSettingsPreparer.IGNORE_SYSTEM_PROPERTIES_SETTING, true) // make sure we get what we set :)\n                .build()\n        );\n        build.start();\n        assertThat(DiscoveryNode.localNode(build.settings()), is(true));\n        return build;\n    }","id":96893,"modified_method":"private Node newNode() {\n        Settings settings = Settings.builder()\n            .put(ClusterName.SETTING, InternalTestCluster.clusterName(\"single-node-cluster\", randomLong()))\n            .put(\"path.home\", createTempDir())\n            // TODO: use a consistent data path for custom paths\n            // This needs to tie into the ESIntegTestCase#indexSettings() method\n            .put(\"path.shared_data\", createTempDir().getParent())\n            .put(\"node.name\", nodeName())\n            .put(IndexMetaData.SETTING_NUMBER_OF_SHARDS, 1)\n            .put(IndexMetaData.SETTING_NUMBER_OF_REPLICAS, 0)\n            .put(\"script.inline\", \"on\")\n            .put(\"script.indexed\", \"on\")\n            .put(EsExecutors.PROCESSORS, 1) // limit the number of threads created\n            .put(\"http.enabled\", false)\n            .put(\"node.local\", true)\n            .put(\"node.data\", true)\n            .put(InternalSettingsPreparer.IGNORE_SYSTEM_PROPERTIES_SETTING, true) // make sure we get what we set :)\n            .build();\n        Node build = new MockNode(settings, getVersion(), getPlugins());\n        build.start();\n        assertThat(DiscoveryNode.localNode(build.settings()), is(true));\n        return build;\n    }","commit_id":"af7d6b629c6aad02637c93c42ac03453181da1d9","url":"https://github.com/elastic/elasticsearch"},{"original_method":"static void cleanup(boolean resetNode) {\n        assertAcked(client().admin().indices().prepareDelete(\"*\").get());\n        if (resetNode) {\n            reset();\n        }\n        MetaData metaData = client().admin().cluster().prepareState().get().getState().getMetaData();\n        assertThat(\"test leaves persistent cluster metadata behind: \" + metaData.persistentSettings().getAsMap(),\n                metaData.persistentSettings().getAsMap().size(), equalTo(0));\n        assertThat(\"test leaves transient cluster metadata behind: \" + metaData.transientSettings().getAsMap(),\n                metaData.transientSettings().getAsMap().size(), equalTo(0));\n    }","id":96894,"modified_method":"private void cleanup(boolean resetNode) {\n        assertAcked(client().admin().indices().prepareDelete(\"*\").get());\n        if (resetNode) {\n            reset();\n        }\n        MetaData metaData = client().admin().cluster().prepareState().get().getState().getMetaData();\n        assertThat(\"test leaves persistent cluster metadata behind: \" + metaData.persistentSettings().getAsMap(),\n                metaData.persistentSettings().getAsMap().size(), equalTo(0));\n        assertThat(\"test leaves transient cluster metadata behind: \" + metaData.transientSettings().getAsMap(),\n                metaData.transientSettings().getAsMap().size(), equalTo(0));\n    }","commit_id":"af7d6b629c6aad02637c93c42ac03453181da1d9","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@BeforeClass\n    public static void setUpClass() throws Exception {\n        stopNode();\n        startNode();\n    }","id":96895,"modified_method":"@BeforeClass\n    public static void setUpClass() throws Exception {\n        stopNode();\n    }","commit_id":"af7d6b629c6aad02637c93c42ac03453181da1d9","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testWrongPath() {\n        Client client = client();\n\n        try {\n            PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository(\"test-repo\")\n                    .setType(\"hdfs\")\n                    .setSettings(Settings.settingsBuilder()\n                        .put(\"uri\", \"hdfs:///\")\n                        .put(\"conf.fs.AbstractFileSystem.hdfs.impl\", TestingFs.class.getName())\n                        .put(\"path\", \"a@b$c#11:22\")\n                        .put(\"chunk_size\", randomIntBetween(100, 1000) + \"k\")\n                        .put(\"compress\", randomBoolean()))\n                    .get();\n            assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));\n\n            createIndex(\"test-idx-1\", \"test-idx-2\", \"test-idx-3\");\n            ensureGreen();\n            fail(\"Path name is invalid\");\n        } catch (RepositoryException re) {\n            // expected\n        }\n    }","id":96896,"modified_method":"public void testWrongPath() {\n        Client client = client();\n\n        try {\n            PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository(\"test-repo\")\n                    .setType(\"hdfs\")\n                    .setSettings(Settings.settingsBuilder()\n                        .put(\"uri\", \"hdfs:///\")\n                        .put(\"conf.fs.AbstractFileSystem.hdfs.impl\", TestingFs.class.getName())\n                        .put(\"path\", \"a@b$c#11:22\")\n                        .put(\"chunk_size\", randomIntBetween(100, 1000) + \"k\")\n                        .put(\"compress\", randomBoolean()))\n                    .get();\n            assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));\n\n            createIndex(\"test-idx-1\");\n            createIndex(\"test-idx-2\");\n            createIndex(\"test-idx-3\");\n            ensureGreen();\n            fail(\"Path name is invalid\");\n        } catch (RepositoryException re) {\n            // expected\n        }\n    }","commit_id":"af7d6b629c6aad02637c93c42ac03453181da1d9","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Override\n    protected Collection<Class<? extends Plugin>> nodePlugins() {\n        return pluginList(HdfsPlugin.class);\n    }","id":96897,"modified_method":"@Override\n    protected Collection<Class<? extends Plugin>> getPlugins() {\n        return pluginList(HdfsPlugin.class);\n    }","commit_id":"af7d6b629c6aad02637c93c42ac03453181da1d9","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testNonHdfsUri() {\n        Client client = client();\n        try {\n            PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository(\"test-repo\")\n                    .setType(\"hdfs\")\n                    .setSettings(Settings.settingsBuilder()\n                        .put(\"uri\", \"file:///\")\n                        .put(\"conf.fs.AbstractFileSystem.hdfs.impl\", TestingFs.class.getName())\n                        .put(\"path\", \"should-fail\")\n                        .put(\"chunk_size\", randomIntBetween(100, 1000) + \"k\")\n                        .put(\"compress\", randomBoolean()))\n                    .get();\n            assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));\n\n            createIndex(\"test-idx-1\", \"test-idx-2\", \"test-idx-3\");\n            ensureGreen();\n            fail(\"Path name is invalid\");\n        } catch (RepositoryException re) {\n            // expected\n        }\n    }","id":96898,"modified_method":"public void testNonHdfsUri() {\n        Client client = client();\n        try {\n            PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository(\"test-repo\")\n                    .setType(\"hdfs\")\n                    .setSettings(Settings.settingsBuilder()\n                        .put(\"uri\", \"file:///\")\n                        .put(\"conf.fs.AbstractFileSystem.hdfs.impl\", TestingFs.class.getName())\n                        .put(\"path\", \"should-fail\")\n                        .put(\"chunk_size\", randomIntBetween(100, 1000) + \"k\")\n                        .put(\"compress\", randomBoolean()))\n                    .get();\n            assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));\n\n            createIndex(\"test-idx-1\");\n            createIndex(\"test-idx-2\");\n            createIndex(\"test-idx-3\");\n            ensureGreen();\n            fail(\"Path name is invalid\");\n        } catch (RepositoryException re) {\n            // expected\n        }\n    }","commit_id":"af7d6b629c6aad02637c93c42ac03453181da1d9","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testPathSpecifiedInHdfs() {\n        Client client = client();\n        try {\n            PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository(\"test-repo\")\n                    .setType(\"hdfs\")\n                    .setSettings(Settings.settingsBuilder()\n                        .put(\"uri\", \"hdfs:///some/path\")\n                        .put(\"conf.fs.AbstractFileSystem.hdfs.impl\", TestingFs.class.getName())\n                        .put(\"path\", \"should-fail\")\n                        .put(\"chunk_size\", randomIntBetween(100, 1000) + \"k\")\n                        .put(\"compress\", randomBoolean()))\n                    .get();\n            assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));\n\n            createIndex(\"test-idx-1\", \"test-idx-2\", \"test-idx-3\");\n            ensureGreen();\n            fail(\"Path name is invalid\");\n        } catch (RepositoryException re) {\n            // expected\n        }\n    }","id":96899,"modified_method":"public void testPathSpecifiedInHdfs() {\n        Client client = client();\n        try {\n            PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository(\"test-repo\")\n                    .setType(\"hdfs\")\n                    .setSettings(Settings.settingsBuilder()\n                        .put(\"uri\", \"hdfs:///some/path\")\n                        .put(\"conf.fs.AbstractFileSystem.hdfs.impl\", TestingFs.class.getName())\n                        .put(\"path\", \"should-fail\")\n                        .put(\"chunk_size\", randomIntBetween(100, 1000) + \"k\")\n                        .put(\"compress\", randomBoolean()))\n                    .get();\n            assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));\n\n            createIndex(\"test-idx-1\");\n            createIndex(\"test-idx-2\");\n            createIndex(\"test-idx-3\");\n            ensureGreen();\n            fail(\"Path name is invalid\");\n        } catch (RepositoryException re) {\n            // expected\n        }\n    }","commit_id":"af7d6b629c6aad02637c93c42ac03453181da1d9","url":"https://github.com/elastic/elasticsearch"},{"original_method":"public void testSimpleWorkflow() {\n        Client client = client();\n\n        PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository(\"test-repo\")\n                .setType(\"hdfs\")\n                .setSettings(Settings.settingsBuilder()\n                        .put(\"uri\", \"hdfs:///\")\n                        .put(\"conf.fs.AbstractFileSystem.hdfs.impl\", TestingFs.class.getName())\n                        .put(\"path\", \"foo\")\n                        .put(\"chunk_size\", randomIntBetween(100, 1000) + \"k\")\n                        .put(\"compress\", randomBoolean())\n                        ).get();\n        assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));\n\n        createIndex(\"test-idx-1\", \"test-idx-2\", \"test-idx-3\");\n        ensureGreen();\n\n        logger.info(\"--> indexing some data\");\n        for (int i = 0; i < 100; i++) {\n            index(\"test-idx-1\", \"doc\", Integer.toString(i), \"foo\", \"bar\" + i);\n            index(\"test-idx-2\", \"doc\", Integer.toString(i), \"foo\", \"baz\" + i);\n            index(\"test-idx-3\", \"doc\", Integer.toString(i), \"foo\", \"baz\" + i);\n        }\n        refresh();\n        assertThat(count(client, \"test-idx-1\"), equalTo(100L));\n        assertThat(count(client, \"test-idx-2\"), equalTo(100L));\n        assertThat(count(client, \"test-idx-3\"), equalTo(100L));\n\n        logger.info(\"--> snapshot\");\n        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot(\"test-repo\", \"test-snap\").setWaitForCompletion(true).setIndices(\"test-idx-*\", \"-test-idx-3\").get();\n        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0));\n        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));\n\n        assertThat(client.admin().cluster().prepareGetSnapshots(\"test-repo\").setSnapshots(\"test-snap\").get().getSnapshots().get(0).state(), equalTo(SnapshotState.SUCCESS));\n\n        logger.info(\"--> delete some data\");\n        for (int i = 0; i < 50; i++) {\n            client.prepareDelete(\"test-idx-1\", \"doc\", Integer.toString(i)).get();\n        }\n        for (int i = 50; i < 100; i++) {\n            client.prepareDelete(\"test-idx-2\", \"doc\", Integer.toString(i)).get();\n        }\n        for (int i = 0; i < 100; i += 2) {\n            client.prepareDelete(\"test-idx-3\", \"doc\", Integer.toString(i)).get();\n        }\n        refresh();\n        assertThat(count(client, \"test-idx-1\"), equalTo(50L));\n        assertThat(count(client, \"test-idx-2\"), equalTo(50L));\n        assertThat(count(client, \"test-idx-3\"), equalTo(50L));\n\n        logger.info(\"--> close indices\");\n        client.admin().indices().prepareClose(\"test-idx-1\", \"test-idx-2\").get();\n\n        logger.info(\"--> restore all indices from the snapshot\");\n        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot(\"test-repo\", \"test-snap\").setWaitForCompletion(true).execute().actionGet();\n        assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n\n        ensureGreen();\n        assertThat(count(client, \"test-idx-1\"), equalTo(100L));\n        assertThat(count(client, \"test-idx-2\"), equalTo(100L));\n        assertThat(count(client, \"test-idx-3\"), equalTo(50L));\n\n        // Test restore after index deletion\n        logger.info(\"--> delete indices\");\n        cluster().wipeIndices(\"test-idx-1\", \"test-idx-2\");\n        logger.info(\"--> restore one index after deletion\");\n        restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot(\"test-repo\", \"test-snap\").setWaitForCompletion(true).setIndices(\"test-idx-*\", \"-test-idx-2\").execute().actionGet();\n        assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n        ensureGreen();\n        assertThat(count(client, \"test-idx-1\"), equalTo(100L));\n        ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n        assertThat(clusterState.getMetaData().hasIndex(\"test-idx-1\"), equalTo(true));\n        assertThat(clusterState.getMetaData().hasIndex(\"test-idx-2\"), equalTo(false));\n    }","id":96900,"modified_method":"public void testSimpleWorkflow() {\n        Client client = client();\n\n        PutRepositoryResponse putRepositoryResponse = client.admin().cluster().preparePutRepository(\"test-repo\")\n                .setType(\"hdfs\")\n                .setSettings(Settings.settingsBuilder()\n                        .put(\"uri\", \"hdfs:///\")\n                        .put(\"conf.fs.AbstractFileSystem.hdfs.impl\", TestingFs.class.getName())\n                        .put(\"path\", \"foo\")\n                        .put(\"chunk_size\", randomIntBetween(100, 1000) + \"k\")\n                        .put(\"compress\", randomBoolean())\n                        ).get();\n        assertThat(putRepositoryResponse.isAcknowledged(), equalTo(true));\n\n        createIndex(\"test-idx-1\");\n        createIndex(\"test-idx-2\");\n        createIndex(\"test-idx-3\");\n        ensureGreen();\n\n        logger.info(\"--> indexing some data\");\n        for (int i = 0; i < 100; i++) {\n            client().prepareIndex(\"test-idx-1\", \"doc\", Integer.toString(i)).setSource(\"foo\", \"bar\" + i).get();\n            client().prepareIndex(\"test-idx-2\", \"doc\", Integer.toString(i)).setSource(\"foo\", \"bar\" + i).get();\n            client().prepareIndex(\"test-idx-3\", \"doc\", Integer.toString(i)).setSource(\"foo\", \"bar\" + i).get();\n        }\n        client().admin().indices().prepareRefresh().get();\n        assertThat(count(client, \"test-idx-1\"), equalTo(100L));\n        assertThat(count(client, \"test-idx-2\"), equalTo(100L));\n        assertThat(count(client, \"test-idx-3\"), equalTo(100L));\n\n        logger.info(\"--> snapshot\");\n        CreateSnapshotResponse createSnapshotResponse = client.admin().cluster().prepareCreateSnapshot(\"test-repo\", \"test-snap\").setWaitForCompletion(true).setIndices(\"test-idx-*\", \"-test-idx-3\").get();\n        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), greaterThan(0));\n        assertThat(createSnapshotResponse.getSnapshotInfo().successfulShards(), equalTo(createSnapshotResponse.getSnapshotInfo().totalShards()));\n\n        assertThat(client.admin().cluster().prepareGetSnapshots(\"test-repo\").setSnapshots(\"test-snap\").get().getSnapshots().get(0).state(), equalTo(SnapshotState.SUCCESS));\n\n        logger.info(\"--> delete some data\");\n        for (int i = 0; i < 50; i++) {\n            client.prepareDelete(\"test-idx-1\", \"doc\", Integer.toString(i)).get();\n        }\n        for (int i = 50; i < 100; i++) {\n            client.prepareDelete(\"test-idx-2\", \"doc\", Integer.toString(i)).get();\n        }\n        for (int i = 0; i < 100; i += 2) {\n            client.prepareDelete(\"test-idx-3\", \"doc\", Integer.toString(i)).get();\n        }\n        client().admin().indices().prepareRefresh().get();\n        assertThat(count(client, \"test-idx-1\"), equalTo(50L));\n        assertThat(count(client, \"test-idx-2\"), equalTo(50L));\n        assertThat(count(client, \"test-idx-3\"), equalTo(50L));\n\n        logger.info(\"--> close indices\");\n        client.admin().indices().prepareClose(\"test-idx-1\", \"test-idx-2\").get();\n\n        logger.info(\"--> restore all indices from the snapshot\");\n        RestoreSnapshotResponse restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot(\"test-repo\", \"test-snap\").setWaitForCompletion(true).execute().actionGet();\n        assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n\n        ensureGreen();\n        assertThat(count(client, \"test-idx-1\"), equalTo(100L));\n        assertThat(count(client, \"test-idx-2\"), equalTo(100L));\n        assertThat(count(client, \"test-idx-3\"), equalTo(50L));\n\n        // Test restore after index deletion\n        logger.info(\"--> delete indices\");\n        client().admin().indices().prepareDelete(\"test-idx-1\", \"test-idx-2\").get();\n        logger.info(\"--> restore one index after deletion\");\n        restoreSnapshotResponse = client.admin().cluster().prepareRestoreSnapshot(\"test-repo\", \"test-snap\").setWaitForCompletion(true).setIndices(\"test-idx-*\", \"-test-idx-2\").execute().actionGet();\n        assertThat(restoreSnapshotResponse.getRestoreInfo().totalShards(), greaterThan(0));\n        ensureGreen();\n        assertThat(count(client, \"test-idx-1\"), equalTo(100L));\n        ClusterState clusterState = client.admin().cluster().prepareState().get().getState();\n        assertThat(clusterState.getMetaData().hasIndex(\"test-idx-1\"), equalTo(true));\n        assertThat(clusterState.getMetaData().hasIndex(\"test-idx-2\"), equalTo(false));\n    }","commit_id":"af7d6b629c6aad02637c93c42ac03453181da1d9","url":"https://github.com/elastic/elasticsearch"},{"original_method":"@Nullable\n  protected static String getSuperClassName(final PsiJavaCodeReferenceElement element) {\n    String superClassName = null;\n    final PsiElement ggParent = element.getParent().getParent();\n    if (ggParent instanceof PsiMethod) {\n      PsiMethod method = (PsiMethod)ggParent;\n      if (method.getThrowsList() == element.getParent()) {\n        superClassName = \"java.lang.Exception\";\n      }\n    } else if (ggParent instanceof PsiClassObjectAccessExpression) {\n      final ExpectedTypeInfo[] expectedTypes = ExpectedTypesProvider.getExpectedTypes((PsiExpression)ggParent, false);\n      if (expectedTypes.length == 1) {\n        final PsiClassType.ClassResolveResult classResolveResult = PsiUtil.resolveGenericsClassInType(expectedTypes[0].getType());\n        final PsiClass psiClass = classResolveResult.getElement();\n        if (psiClass != null && CommonClassNames.JAVA_LANG_CLASS.equals(psiClass.getQualifiedName())) {\n          PsiType psiType = classResolveResult.getSubstitutor().substitute(psiClass.getTypeParameters()[0]);\n          if (psiType instanceof PsiWildcardType && ((PsiWildcardType)psiType).isExtends()) {\n            psiType = ((PsiWildcardType)psiType).getExtendsBound();\n          }\n          final PsiClass aClass = PsiUtil.resolveClassInType(psiType);\n          if (aClass != null) return aClass.getQualifiedName();\n        }\n      }\n    }\n\n    return superClassName;\n  }","id":96901,"modified_method":"@Nullable\n  protected String getSuperClassName(final PsiJavaCodeReferenceElement element) {\n    String superClassName = null;\n    PsiElement parent = element.getParent();\n    final PsiElement ggParent = parent.getParent();\n    if (ggParent instanceof PsiMethod) {\n      PsiMethod method = (PsiMethod)ggParent;\n      if (method.getThrowsList() == parent) {\n        superClassName = \"java.lang.Exception\";\n      }\n    } else if (ggParent instanceof PsiClassObjectAccessExpression) {\n      final ExpectedTypeInfo[] expectedTypes = ExpectedTypesProvider.getExpectedTypes((PsiExpression)ggParent, false);\n      if (expectedTypes.length == 1) {\n        final PsiClassType.ClassResolveResult classResolveResult = PsiUtil.resolveGenericsClassInType(expectedTypes[0].getType());\n        final PsiClass psiClass = classResolveResult.getElement();\n        if (psiClass != null && CommonClassNames.JAVA_LANG_CLASS.equals(psiClass.getQualifiedName())) {\n          PsiType psiType = classResolveResult.getSubstitutor().substitute(psiClass.getTypeParameters()[0]);\n          if (psiType instanceof PsiWildcardType && ((PsiWildcardType)psiType).isExtends()) {\n            psiType = ((PsiWildcardType)psiType).getExtendsBound();\n          }\n          final PsiClass aClass = PsiUtil.resolveClassInType(psiType);\n          if (aClass != null) return aClass.getQualifiedName();\n        }\n      }\n    } else if (ggParent instanceof PsiExpressionList && parent instanceof PsiExpression && myKind == CreateClassKind.ENUM) {\n      final ExpectedTypeInfo[] expectedTypes = ExpectedTypesProvider.getExpectedTypes((PsiExpression)parent, false);\n      if (expectedTypes.length == 1) {\n        final PsiClassType.ClassResolveResult classResolveResult = PsiUtil.resolveGenericsClassInType(expectedTypes[0].getType());\n        final PsiClass psiClass = classResolveResult.getElement();\n        if (psiClass != null && psiClass.isInterface()) {\n          return psiClass.getQualifiedName();\n        }\n      }\n      return null;\n    }\n\n    return superClassName;\n  }","commit_id":"a7fb7f9f547fe59e32d8a302e930ffb4e932083f","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean satisfiedBy(PsiElement element){\n        if(!(element instanceof PsiMethodCallExpression)){\n            return false;\n        }\n        if(ErrorUtil.containsError(element)){\n            return false;\n        }\n        final PsiMethodCallExpression call = (PsiMethodCallExpression) element;\n        if(!AppendUtil.isAppend(call)){\n            return false;\n        }\n        final PsiReferenceExpression methodExpression =\n                call.getMethodExpression();\n        final PsiExpression qualifier = methodExpression.getQualifierExpression();\n        if(!(qualifier instanceof PsiMethodCallExpression)){\n            return false;\n        }\n        final PsiMethodCallExpression qualifierCall = (PsiMethodCallExpression) element;\n        if(!AppendUtil.isAppend(qualifierCall)){\n            return false;\n        }\n        final PsiElement parent = element.getParent();\n        if(parent instanceof PsiExpressionStatement){\n            return true;\n        }\n        if(parent instanceof PsiLocalVariable &&\n                parent.getParent() instanceof PsiDeclarationStatement &&\n                ((PsiDeclarationStatement) parent.getParent())\n                        .getDeclaredElements().length == 1){\n            return true;\n        }\n        return parent instanceof PsiAssignmentExpression &&\n                parent.getParent() instanceof PsiExpressionStatement;\n    }","id":96902,"modified_method":"public boolean satisfiedBy(PsiElement element){\n        if(!AppendUtil.isAppendCall(element)){\n            return false;\n        }\n\t    final PsiMethodCallExpression call = (PsiMethodCallExpression) element;\n        final PsiReferenceExpression methodExpression = call.getMethodExpression();\n        final PsiExpression qualifier = methodExpression.getQualifierExpression();\n        if(!(qualifier instanceof PsiMethodCallExpression)){\n            return false;\n        }\n        final PsiMethodCallExpression qualifierCall = (PsiMethodCallExpression) element;\n        if(!AppendUtil.isAppendCall(qualifierCall)){\n            return false;\n        }\n        final PsiElement parent = element.getParent();\n        if(parent instanceof PsiExpressionStatement){\n            return true;\n        }\n\t    final PsiElement grandParent = parent.getParent();\n\t    if (parent instanceof PsiLocalVariable && grandParent instanceof PsiDeclarationStatement) {\n\t\t    final PsiDeclarationStatement declarationStatement =\n\t\t\t\t    (PsiDeclarationStatement)grandParent;\n\t\t    if (declarationStatement.getDeclaredElements().length == 1) {\n\t\t\t    return true;\n\t\t    }\n\t    }\n\t    return parent instanceof PsiAssignmentExpression &&\n                grandParent instanceof PsiExpressionStatement;\n    }","commit_id":"b597c632c15a8677b55c9281a1e71c52d587bc9c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void processIntention(PsiElement element)\n    throws IncorrectOperationException {\n\n    final PsiExpression call =\n      (PsiExpression)element;\n    final List<String> argsList = new ArrayList<String>();\n    PsiExpression currentCall = call;\n    while (currentCall instanceof PsiMethodCallExpression &&\n           AppendUtil.isAppend((PsiMethodCallExpression)currentCall)) {\n      final PsiExpressionList args =\n        ((PsiCall)currentCall).getArgumentList();\n      final String argText = args.getText();\n      argsList.add(argText);\n      final PsiReferenceExpression methodExpression =\n        ((PsiMethodCallExpression)currentCall).getMethodExpression();\n      currentCall = methodExpression.getQualifierExpression();\n    }\n    final PsiManager mgr = element.getManager();\n    final PsiElementFactory factory = mgr.getElementFactory();\n    final CodeStyleManager codeStyleManager = mgr.getCodeStyleManager();\n    final String targetText;\n    final PsiStatement statement;\n    @NonNls final String firstStatement;\n    if (call.getParent() instanceof PsiExpressionStatement) {\n      targetText = currentCall.getText();\n      statement = (PsiStatement)call.getParent();\n      firstStatement = null;\n    }\n    else if (call.getParent() instanceof PsiAssignmentExpression &&\n             call.getParent()\n               .getParent() instanceof PsiExpressionStatement) {\n      statement = (PsiStatement)call.getParent().getParent();\n      final PsiAssignmentExpression assignment =\n        (PsiAssignmentExpression)call.getParent();\n      targetText = assignment.getLExpression().getText();\n      firstStatement =\n        assignment.getLExpression().getText() +\n        assignment.getOperationSign().getText() +\n        currentCall.getText() +\n        ';';\n    }\n    else {\n      statement = (PsiStatement)call.getParent().getParent();\n      final PsiDeclarationStatement declaration =\n        (PsiDeclarationStatement)statement;\n      final PsiVariable variable =\n        (PsiVariable)declaration.getDeclaredElements()[0];\n      targetText = variable.getName();\n      if (variable.hasModifierProperty(PsiModifier.FINAL)) {\n        firstStatement = \"final \" +\n                         variable.getType().getPresentableText() +\n                         ' ' + variable.getName() + '=' + currentCall.getText() +\n                         ';';\n      }\n      else {\n        firstStatement =\n          variable.getType().getPresentableText() +\n          ' ' + variable.getName() + '=' + currentCall\n            .getText() +\n                       ';';\n      }\n    }\n\n    for (String arg : argsList) {\n      @NonNls final String append = targetText + \".append\" + arg + ';';\n      final PsiStatement newCall =\n        factory.createStatementFromText(append, null);\n      final PsiElement insertedElement = statement.getParent()\n        .addAfter(newCall, statement);\n      codeStyleManager.reformat(insertedElement);\n    }\n    if (firstStatement != null) {\n      final PsiStatement newCall =\n        factory.createStatementFromText(firstStatement, null);\n      final PsiElement insertedElement = statement.getParent()\n        .addAfter(newCall, statement);\n      codeStyleManager.reformat(insertedElement);\n    }\n    statement.delete();\n  }","id":96903,"modified_method":"public void processIntention(PsiElement element)\n\t\t\tthrows IncorrectOperationException {\n\t\tfinal PsiExpression call = (PsiExpression)element;\n\t\tfinal List<String> argumentsList = new ArrayList<String>();\n\t\tPsiExpression currentCall = call;\n\t\twhile (AppendUtil.isAppendCall(currentCall)) {\n\t\t\tfinal PsiMethodCallExpression methodCallExpression =\n\t\t\t\t\t(PsiMethodCallExpression)currentCall;\n\t\t\tfinal PsiExpressionList arguments = methodCallExpression.getArgumentList();\n\t\t\tfinal String argumentsText = arguments.getText();\n\t\t\targumentsList.add(argumentsText);\n\t\t\tfinal PsiReferenceExpression methodExpression =\n\t\t\t\t\tmethodCallExpression.getMethodExpression();\n\t\t\tcurrentCall = methodExpression.getQualifierExpression();\n\t\t\tif (currentCall == null) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tfinal String targetText;\n\t\tfinal PsiStatement appendStatement;\n\t\t@NonNls final String firstStatement;\n\t\tif (call.getParent() instanceof PsiExpressionStatement) {\n\t\t\ttargetText = currentCall.getText();\n\t\t\tappendStatement = (PsiStatement)call.getParent();\n\t\t\tfirstStatement = null;\n\t\t} else if (call.getParent() instanceof PsiAssignmentExpression &&\n\t\t         call.getParent().getParent() instanceof PsiExpressionStatement) {\n\t\t\tappendStatement = (PsiStatement)call.getParent().getParent();\n\t\t\tfinal PsiAssignmentExpression assignment =\n\t\t\t\t\t(PsiAssignmentExpression)call.getParent();\n\t\t\ttargetText = assignment.getLExpression().getText();\n\t\t\tfirstStatement =\n\t\t\t\t\tassignment.getLExpression().getText() +\n\t\t\t\t\tassignment.getOperationSign().getText() +\n\t\t\t\t\tcurrentCall.getText() + ';';\n\t\t} else {\n\t\t\tappendStatement = (PsiStatement)call.getParent().getParent();\n\t\t\tfinal PsiDeclarationStatement declaration = (PsiDeclarationStatement)appendStatement;\n\t\t\tfinal PsiVariable variable =\n\t\t\t\t\t(PsiVariable)declaration.getDeclaredElements()[0];\n\t\t\ttargetText = variable.getName();\n\t\t\tif (variable.hasModifierProperty(PsiModifier.FINAL)) {\n\t\t\t\tfirstStatement = \"final \" + variable.getType().getPresentableText() +\n\t\t\t\t                 ' ' + variable.getName() + '=' + currentCall.getText() + ';';\n\t\t\t} else {\n\t\t\t\tfirstStatement = variable.getType().getPresentableText() +\n\t\t\t\t\t\t' ' + variable.getName() + '=' + currentCall.getText() + ';';\n\t\t\t}\n\t\t}\n\t\tfinal StringBuilder builder = new StringBuilder(\"{\");\n\t\tif (firstStatement != null) {\n\t\t\tbuilder.append(firstStatement);\n\t\t}\n\t\tCollections.reverse(argumentsList);\n\t\tfor (String argument : argumentsList) {\n\t\t\tbuilder.append(targetText);\n\t\t\tbuilder.append(\".append\");\n\t\t\tbuilder.append(argument);\n\t\t\tbuilder.append(';');\n\t\t}\n\t\tbuilder.append('}');\n\t\tfinal PsiManager manager = element.getManager();\n\t\tfinal PsiElementFactory factory = manager.getElementFactory();\n\t\tfinal PsiElement parent = appendStatement.getParent();\n\t\tfinal CodeStyleManager codeStyleManager = manager.getCodeStyleManager();\n\t\tfinal PsiCodeBlock codeBlock =\n\t\t\t\tfactory.createCodeBlockFromText(builder.toString(), appendStatement);\n\t\tif (parent instanceof PsiLoopStatement || parent instanceof PsiIfStatement) {\n\t\t\tfinal PsiElement insertedStatement = appendStatement.replace(codeBlock);\n\t\t\tcodeStyleManager.reformat(insertedStatement);\n\t\t} else {\n\t\t\tfinal PsiStatement[] statements = codeBlock.getStatements();\n\t\t\tfor (PsiStatement statement : statements) {\n\t\t\t\tfinal PsiElement insertedStatement = parent.addBefore(statement, appendStatement);\n\t\t\t\tcodeStyleManager.reformat(insertedStatement);\n\t\t\t}\n\t\t\tappendStatement.delete();\n\t\t}\n\t}","commit_id":"b597c632c15a8677b55c9281a1e71c52d587bc9c","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public static PsiExpression restoreExpression(PsiFile containingFile,\n                                                PsiVariable psiVariable,\n                                                PsiElementFactory elementFactory,\n                                                RangeMarker marker, String exprText) {\n    if (exprText == null) return null;\n    if (psiVariable == null || !psiVariable.isValid()) return null;\n    final PsiElement refVariableElement = containingFile.findElementAt(marker.getStartOffset());\n    PsiExpression expression = PsiTreeUtil.getParentOfType(refVariableElement, PsiReferenceExpression.class);\n    if (expression instanceof PsiReferenceExpression && (((PsiReferenceExpression)expression).resolve() == psiVariable ||\n                                                         Comparing.strEqual(psiVariable.getName(),\n                                                                            ((PsiReferenceExpression)expression).getReferenceName()))) {\n      return (PsiExpression)expression.replace(elementFactory.createExpressionFromText(exprText, psiVariable));\n    }\n    if (expression == null) {\n      expression = PsiTreeUtil.getParentOfType(refVariableElement, PsiExpression.class);\n    }\n    if (expression instanceof PsiReferenceExpression && expression.getParent() instanceof PsiMethodCallExpression) {\n      expression = (PsiExpression)expression.getParent();\n    }\n    return expression != null && expression.isValid() && expression.getText().equals(exprText) ? expression : null;\n  }","id":96904,"modified_method":"@Nullable\n  public static PsiExpression restoreExpression(PsiFile containingFile,\n                                                PsiVariable psiVariable,\n                                                PsiElementFactory elementFactory,\n                                                RangeMarker marker, String exprText) {\n    if (exprText == null) return null;\n    if (psiVariable == null || !psiVariable.isValid()) return null;\n    final PsiElement refVariableElement = containingFile.findElementAt(marker.getStartOffset());\n    PsiExpression expression = PsiTreeUtil.getParentOfType(refVariableElement, PsiReferenceExpression.class);\n    if (expression instanceof PsiReferenceExpression && (((PsiReferenceExpression)expression).resolve() == psiVariable ||\n                                                         Comparing.strEqual(psiVariable.getName(),\n                                                                            ((PsiReferenceExpression)expression).getReferenceName()))) {\n      return (PsiExpression)expression.replace(elementFactory.createExpressionFromText(exprText, psiVariable));\n    }\n    if (expression == null) {\n      expression = PsiTreeUtil.getParentOfType(refVariableElement, PsiExpression.class);\n    }\n    while (expression instanceof PsiReferenceExpression) {\n      final PsiElement parent = expression.getParent();\n      if (parent instanceof PsiMethodCallExpression) {\n        if (parent.getText().equals(exprText)) return (PsiExpression)parent;\n      }\n      if (parent instanceof PsiExpression) {\n        expression = (PsiExpression)parent;\n      } else {\n        return null;\n      }\n    }\n    return expression != null && expression.isValid() && expression.getText().equals(exprText) ? expression : null;\n  }","commit_id":"a8dc6bc627d68380be352c9a8f90b40684a291e8","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private String getReferenceText() {\n    PsiElement result = myRef;\n    while (result.getParent() instanceof PsiJavaCodeReferenceElement) {\n      result = result.getParent();\n    }\n    return result.getText();\n  }","id":96905,"modified_method":"private String getReferenceText() {\n    PsiJavaCodeReferenceElement result = myRef;\n    while (true) {\n      PsiElement parent = result.getParent();\n      if (!(parent instanceof PsiJavaCodeReferenceElement)) {\n        break;\n      }\n\n      result = (PsiJavaCodeReferenceElement)parent;\n    }\n\n    return result.getQualifiedName();\n  }","commit_id":"52fbe2f10b741059a844dceead9295e410f7995a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, List<String> result) {\n    String initialName = UsageViewUtil.getShortName(element);\n    SuggestedNameInfo info = suggestNamesForElement(element);\n\n    String parameterName = null;\n    if (nameSuggestionContext != null) {\n      final PsiElement nameSuggestionContextParent = nameSuggestionContext.getParent();\n      if (nameSuggestionContextParent != null && nameSuggestionContextParent.getParent() instanceof PsiExpressionList) {\n        final PsiExpressionList expressionList = (PsiExpressionList)nameSuggestionContextParent.getParent();\n        final PsiElement parent = expressionList.getParent();\n        if (parent instanceof PsiCallExpression) {\n          final PsiMethod method = ((PsiCallExpression)parent).resolveMethod();\n          if (method != null) {\n            final PsiParameter[] parameters = method.getParameterList().getParameters();\n            final PsiExpression[] expressions = expressionList.getExpressions();\n            for (int i = 0; i < expressions.length; i++) {\n              PsiExpression expression = expressions[i];\n              if (expression == nameSuggestionContextParent) {\n                if (i < parameters.length) {\n                  parameterName = parameters[i].getName();\n                }\n                break;\n              }\n            }\n          }\n        }\n      }\n    }\n    final String[] strings = info != null ? info.names : ArrayUtil.EMPTY_STRING_ARRAY;\n    ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings));\n    final String properlyCased = suggestProperlyCasedName(element);\n    if (!list.contains(initialName)) {\n      list.add(0, initialName);\n    }\n    else {\n      int i = list.indexOf(initialName);\n      list.remove(i);\n      list.add(0, initialName);\n    }\n    if (properlyCased != null && !properlyCased.equals(initialName)) {\n      list.add(1, properlyCased);\n    }\n    if (parameterName != null && !list.contains(parameterName)) {\n      list.add(parameterName);\n    }\n    ContainerUtil.removeDuplicates(list);\n    result.addAll(list);\n    return info;\n  }","id":96906,"modified_method":"@Nullable\n  public SuggestedNameInfo getSuggestedNames(final PsiElement element, final PsiElement nameSuggestionContext, List<String> result) {\n    String initialName = UsageViewUtil.getShortName(element);\n    SuggestedNameInfo info = suggestNamesForElement(element);\n\n    String parameterName = null;\n    if (nameSuggestionContext != null) {\n      final PsiElement nameSuggestionContextParent = nameSuggestionContext.getParent();\n      if (nameSuggestionContextParent != null) {\n        final PsiElement parentOfParent = nameSuggestionContextParent.getParent();\n        if (parentOfParent instanceof PsiExpressionList) {\n          final PsiExpressionList expressionList = (PsiExpressionList)parentOfParent;\n          final PsiElement parent = expressionList.getParent();\n          if (parent instanceof PsiCallExpression) {\n            final PsiMethod method = ((PsiCallExpression)parent).resolveMethod();\n            if (method != null) {\n              final PsiParameter[] parameters = method.getParameterList().getParameters();\n              final PsiExpression[] expressions = expressionList.getExpressions();\n              for (int i = 0; i < expressions.length; i++) {\n                PsiExpression expression = expressions[i];\n                if (expression == nameSuggestionContextParent) {\n                  if (i < parameters.length) {\n                    parameterName = parameters[i].getName();\n                  }\n                  break;\n                }\n              }\n            }\n          }\n        }\n        else if (parentOfParent instanceof PsiParameterList) {\n          final PsiElement parent3 = parentOfParent.getParent();\n          if (parent3 instanceof PsiMethod) {\n            final String propName = PropertyUtil.getPropertyName((PsiMethod)parent3);\n            if (propName != null) {\n              parameterName = propName;\n            }\n          }\n        }\n      }\n    }\n    final String[] strings = info != null ? info.names : ArrayUtil.EMPTY_STRING_ARRAY;\n    ArrayList<String> list = new ArrayList<String>(Arrays.asList(strings));\n    final String properlyCased = suggestProperlyCasedName(element);\n    if (!list.contains(initialName)) {\n      list.add(0, initialName);\n    }\n    else {\n      int i = list.indexOf(initialName);\n      list.remove(i);\n      list.add(0, initialName);\n    }\n    if (properlyCased != null && !properlyCased.equals(initialName)) {\n      list.add(1, properlyCased);\n    }\n    if (parameterName != null && !list.contains(parameterName)) {\n      list.add(parameterName);\n    }\n    ContainerUtil.removeDuplicates(list);\n    result.addAll(list);\n    return info;\n  }","commit_id":"65ec4885d655b77a083e776d9808c095da6e9f90","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  protected void processIntention(@NotNull PsiElement element) throws IncorrectOperationException {\n    String text = FORMAT.format(Double.parseDouble(element.getText())).replace(',', '.');\n    while (text.contains(\"0E\") && !text.contains(\".0E\")) {\n      text = text.replace(\"0E\", \"E\");\n    }\n    replaceExpression(text, (PsiExpression)element);\n  }","id":96907,"modified_method":"@Override\n    protected void processIntention(@NotNull PsiElement element)\n            throws IncorrectOperationException {\n        final String elementText = element.getText();\n        if (elementText.length() == 0) {\n            return;\n        }\n        final int lastIndex = elementText.length() - 1;\n        final char lastChar = elementText.charAt(lastIndex);\n        String text = FORMAT.format(Double.parseDouble(elementText)).replace(',', '.');\n        while (text.contains(\"0E\") && !text.contains(\".0E\")) {\n            text = text.replace(\"0E\", \"E\");\n        }\n        if (lastChar == 'f' || lastChar == 'F') {\n            replaceExpression(text + lastChar, (PsiExpression)element);\n        } else {\n            replaceExpression(text, (PsiExpression)element);\n        }\n    }","commit_id":"4336c764668fbc71f41a71843fd5d57c8bf65bfe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  protected void processIntention(@NotNull PsiElement element) throws IncorrectOperationException {\n    try {\n      replaceExpression(Double.toString(Double.parseDouble(element.getText())), (PsiExpression)element);\n    }\n    catch (Exception e) {//\n    }\n  }","id":96908,"modified_method":"@Override\n    protected void processIntention(@NotNull PsiElement element)\n            throws IncorrectOperationException {\n        try {\n            final String elementText = element.getText();\n            if (elementText.length() == 0) {\n                return;\n            }\n            final int lastIndex = elementText.length() - 1;\n            final char lastChar = elementText.charAt(lastIndex);\n            if (lastChar == 'f' || lastChar == 'F') {\n                final BigDecimal bigDecimal =\n                        new BigDecimal(elementText.substring(0, lastIndex));\n                replaceExpression(bigDecimal.toPlainString() + lastChar,\n                        (PsiExpression) element);\n            } else {\n                final BigDecimal bigDecimal = new BigDecimal(elementText);\n                replaceExpression(bigDecimal.toPlainString(),\n                        (PsiExpression) element);\n            }\n        } catch (Exception e) {//\n        }\n    }","commit_id":"4336c764668fbc71f41a71843fd5d57c8bf65bfe","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public int returnIntVal()\n    {\n        return getIntVal();\n    }","id":96909,"modified_method":"public int returnIntVal()\n    {\n        final int val = getIntVal();\n        final CallToSimpleGetterInClassInspection foo = new CallToSimpleGetterInClassInspection();\n        final int val2 = foo.getIntVal();\n        return val;\n    }","commit_id":"09877c81840b65d68d750250d10e1ae8a1abc27d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public int getIntVal() {\n        return intVal;\n    }","id":96910,"modified_method":"public int getIntVal() {\n        return this.intVal;\n    }","commit_id":"09877c81840b65d68d750250d10e1ae8a1abc27d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void doFix(Project project, ProblemDescriptor descriptor)\n                                                                         throws IncorrectOperationException{\n            final PsiElement methodIdentifier = descriptor.getPsiElement();\n            final PsiReferenceExpression methodExpression =\n                    (PsiReferenceExpression) methodIdentifier.getParent();\n            assert methodExpression != null;\n            final PsiMethodCallExpression call =\n                    (PsiMethodCallExpression) methodExpression.getParent();\n            assert call != null;\n            final PsiMethod method = call.resolveMethod();\n            assert method != null;\n            final PsiCodeBlock body = method.getBody();\n            final PsiStatement[] statements = body.getStatements();\n            final PsiReturnStatement returnStatement = (PsiReturnStatement) statements[0];\n            final PsiExpression returnValue = returnStatement.getReturnValue();\n            final String returnValueText = returnValue.getText();\n            replaceExpression(call, returnValueText);\n        }","id":96911,"modified_method":"public void doFix(Project project, ProblemDescriptor descriptor)\n                throws IncorrectOperationException{\n            final PsiElement methodIdentifier = descriptor.getPsiElement();\n            final PsiReferenceExpression methodExpression =\n                    (PsiReferenceExpression) methodIdentifier.getParent();\n            assert methodExpression != null;\n            final PsiMethodCallExpression call =\n                    (PsiMethodCallExpression) methodExpression.getParent();\n            assert call != null;\n            final PsiMethod method = call.resolveMethod();\n            assert method != null;\n            final PsiCodeBlock body = method.getBody();\n            final PsiStatement[] statements = body.getStatements();\n            final PsiReturnStatement returnStatement = (PsiReturnStatement) statements[0];\n            final PsiExpression returnValue = returnStatement.getReturnValue();\n            final String returnValueText = returnValue.getText();\n            final PsiExpression qualifier = methodExpression\n                    .getQualifierExpression();\n            if(qualifier == null){\n                if(returnValueText.startsWith(\"this.\")){\n                    replaceExpression(call, returnValueText);\n                } else{\n                    replaceExpression(call, \"this.\" + returnValueText);\n                }\n            } else{\n                if(returnValueText.startsWith(\"this.\")){\n                    replaceExpression(call,\n                                      qualifier.getText() + '.' + returnValueText.substring(5));\n                }\n               else{\n                    replaceExpression(call,\n                                      qualifier.getText() + '.' + returnValueText);\n                }\n            }\n        }","commit_id":"09877c81840b65d68d750250d10e1ae8a1abc27d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void doFix(Project project, ProblemDescriptor descriptor)\n                                                                         throws IncorrectOperationException{\n            final PsiElement methodIdentifier = descriptor.getPsiElement();\n            final PsiReferenceExpression methodExpression =\n                    (PsiReferenceExpression) methodIdentifier.getParent();\n            assert methodExpression != null;\n            final PsiMethodCallExpression call =\n                    (PsiMethodCallExpression) methodExpression.getParent();\n            assert call != null;\n            final PsiExpressionList argList = call.getArgumentList();\n            assert argList != null;\n            final PsiExpression[] args = argList.getExpressions();\n            final PsiExpression arg = args[0];\n            final PsiMethod method = call.resolveMethod();\n            assert method != null;\n            final PsiCodeBlock body = method.getBody();\n            final PsiStatement[] statements = body.getStatements();\n            final PsiExpressionStatement assignmentStatemnt = (PsiExpressionStatement) statements[0];\n            final PsiAssignmentExpression assignment = (PsiAssignmentExpression) assignmentStatemnt.getExpression();\n            final String newExpression = assignment.getLExpression().getText() +\n                    \" = \" + arg.getText();\n            replaceExpression(call, newExpression);\n        }","id":96912,"modified_method":"public void doFix(Project project, ProblemDescriptor descriptor)\n                throws IncorrectOperationException{\n            final PsiElement methodIdentifier = descriptor.getPsiElement();\n            final PsiReferenceExpression methodExpression =\n                    (PsiReferenceExpression) methodIdentifier.getParent();\n            assert methodExpression != null;\n            final PsiMethodCallExpression call =\n                    (PsiMethodCallExpression) methodExpression.getParent();\n            assert call != null;\n            final PsiExpressionList argList = call.getArgumentList();\n            assert argList != null;\n            final PsiExpression[] args = argList.getExpressions();\n            final PsiExpression arg = args[0];\n            final PsiMethod method = call.resolveMethod();\n            assert method != null;\n            final PsiCodeBlock body = method.getBody();\n            final PsiStatement[] statements = body.getStatements();\n            final PsiExpressionStatement assignmentStatemnt = (PsiExpressionStatement) statements[0];\n            final PsiAssignmentExpression assignment = (PsiAssignmentExpression) assignmentStatemnt\n                    .getExpression();\n\n            final PsiExpression qualifier = methodExpression\n                    .getQualifierExpression();\n            final PsiExpression lhs = assignment.getLExpression();\n            final String lhsText = lhs.getText();\n            if(qualifier == null){\n                final String newExpression;\n                if(lhsText.startsWith(\"this.\")){\n                    newExpression = lhsText + \" = \" + arg.getText();\n                } else{\n                    newExpression = \"this.\" + lhsText + \" = \" + arg.getText();\n                }\n                replaceExpression(call, newExpression);\n            } else{\n                final String newExpression;\n                if(lhsText.startsWith(\"this.\")){\n                    newExpression = qualifier.getText() + '.' + lhsText.substring(5) +\n                            \" = \" + arg.getText();\n                } else{\n                     newExpression = qualifier.getText() + '.' + lhsText +\n                            \" = \" + arg.getText();\n                }\n                replaceExpression(call,\n                                  newExpression);\n            }\n        }","commit_id":"09877c81840b65d68d750250d10e1ae8a1abc27d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void doSetIntVal(int x)\n    {\n        setIntVal(x);\n    }","id":96913,"modified_method":"public void doSetIntVal(int x)\n    {\n        final CallToSimpleSetterInClassInspection foo = new CallToSimpleSetterInClassInspection();\n        setIntVal(x);\n        foo.setIntVal(x);\n    }","commit_id":"09877c81840b65d68d750250d10e1ae8a1abc27d","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void handleControl(String uri, String localname, String qName, Attributes attributes, String id, String effectiveId, XFormsSingleNodeControl xformsControl) throws SAXException {\n\n        final XFormsInputControl inputControl = (XFormsInputControl) xformsControl;\n        final ContentHandler contentHandler = handlerContext.getController().getOutput();\n        final boolean isConcreteControl = inputControl != null;\n\n        final AttributesImpl newAttributes;\n        final boolean isDate;\n        final boolean isBoolean;\n        {\n            final FastStringBuffer classes = getInitialClasses(localname, attributes, inputControl);\n            if (!handlerContext.isTemplate()) {\n                if (isConcreteControl) {\n                    final String controlType = inputControl.getType();\n                    isDate = XMLConstants.XS_DATE_EXPLODED_QNAME.equals(controlType) || XFormsConstants.XFORMS_DATE_EXPLODED_QNAME.equals(controlType);\n                    isBoolean = XMLConstants.XS_BOOLEAN_EXPLODED_QNAME.equals(controlType) || XFormsConstants.XFORMS_BOOLEAN_EXPLODED_QNAME.equals(controlType);\n                } else {\n                    isDate = false;\n                    isBoolean = false;\n                }\n            } else {\n                isDate = false;\n                isBoolean = false;\n            }\n            handleMIPClasses(classes, inputControl);\n            newAttributes = getAttributes(attributes, classes.toString(), effectiveId);\n        }\n\n        if (isBoolean) {\n            // Produce a boolean output\n\n            // We try to look like an xforms:select[@appearance = 'full']\n            final QName appearance = XFormsConstants.XFORMS_FULL_APPEARANCE_QNAME;\n            final boolean isMany = true;\n\n            final List items = new ArrayList(2);\n            items.add(new XFormsItemUtils.Item(false, Collections.EMPTY_LIST, \"\", \"true\", 1));\n\n            // NOTE: In the future, we may want to use other appearances provided by xforms:select\n//            items.add(new XFormsSelect1Control.Item(false, Collections.EMPTY_LIST, \"False\", \"false\", 1));\n\n            final XFormsSelect1Handler select1Handler = new XFormsSelect1Handler();\n            select1Handler.setContentHandler(getContentHandler());\n            select1Handler.setContext(getContext());\n//            select1Handler.setDocumentLocator(get);\n            select1Handler.outputContent(attributes, id, effectiveId, localname, inputControl, items, isMany, appearance);\n\n        } else {\n\n            // Create xhtml:span\n            final boolean isReadOnly = isConcreteControl && inputControl.isReadonly();\n            final String xhtmlPrefix = handlerContext.findXHTMLPrefix();\n            final String spanQName = XMLUtils.buildQName(xhtmlPrefix, \"span\");\n            final String inputQName = XMLUtils.buildQName(xhtmlPrefix, \"input\");\n            contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName, newAttributes);\n            {\n                // Create xhtml:span for date display\n                if (!isStaticReadonly(inputControl)) {\n                    final StringBuffer spanClasses = new StringBuffer(\"xforms-date-display\");\n                    if (isReadOnly)\n                        spanClasses.append(\" xforms-readonly\");\n                    reusableAttributes.clear();\n                    reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, spanClasses.toString());// TODO: check whether like in the XSTL version we need to copy other classes as well\n                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName, reusableAttributes);\n                    if (isConcreteControl && isDate) {\n                        final String displayValueOrValue = inputControl.getDisplayValueOrExternalValue(pipelineContext);\n                        if (displayValueOrValue != null && !displayValueOrValue.equals(\"\")) {\n                            contentHandler.characters(displayValueOrValue.toCharArray(), 0, displayValueOrValue.length());\n                        } else {\n                            // Add an nbsp to facilitate styling\n                            contentHandler.characters(NBSP.toCharArray(), 0, NBSP.length());\n                        }\n                    }\n                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName);\n                }\n\n                // Create xhtml:input\n                {\n                    reusableAttributes.clear();\n                    if (!isStaticReadonly(inputControl)) {\n                        // Regular mode\n\n                        final StringBuffer inputClasses = new StringBuffer(\"xforms-input-input\");\n\n                        reusableAttributes.addAttribute(\"\", \"id\", \"id\", ContentHandlerHelper.CDATA, \"input-\" + effectiveId);\n                        reusableAttributes.addAttribute(\"\", \"type\", \"type\", ContentHandlerHelper.CDATA, \"text\");\n                        reusableAttributes.addAttribute(\"\", \"name\", \"name\", ContentHandlerHelper.CDATA, effectiveId);\n\n\n                        if (isConcreteControl) {\n                            // Output value only for concrete control\n                            final String value = inputControl.getExternalValue(pipelineContext);\n                            reusableAttributes.addAttribute(\"\", \"value\", \"value\", ContentHandlerHelper.CDATA, (value == null) ? \"\" : value);\n                        } else {\n                            reusableAttributes.addAttribute(\"\", \"value\", \"value\", ContentHandlerHelper.CDATA, \"\");\n                        }\n\n                        reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA,\n                                (inputClasses.length() > 0) ? inputClasses.toString() : \"\");// TODO: check whether like in the XSTL version we need to copy other classes as well\n\n                        handleReadOnlyAttribute(reusableAttributes, containingDocument, inputControl);\n\n                        // Copy special attributes in xxforms namespace\n                        copyAttributes(attributes, XFormsConstants.XXFORMS_NAMESPACE_URI, XXFORMS_ATTRIBUTES_TO_COPY, reusableAttributes);\n\n                        // Handle accessibility attributes\n                        handleAccessibilityAttributes(attributes, reusableAttributes);\n\n                        contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"input\", inputQName, reusableAttributes);\n                        contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"input\", inputQName);\n                    } else {\n                        // Read-only mode\n                        if (isConcreteControl) {\n                            // Output value only for concrete control\n                            final String value = inputControl.getDisplayValueOrExternalValue(pipelineContext);\n                            if (value != null)\n                                contentHandler.characters(value.toCharArray(), 0, value.length());\n                        }\n                    }\n                }\n\n                // Create xhtml:span for date picker\n                if (!isStaticReadonly(inputControl)) {\n                    final StringBuffer spanClasses = new StringBuffer(\"xforms-showcalendar\");\n                    if (isReadOnly)\n                        spanClasses.append(\" xforms-showcalendar-readonly\");\n\n                    reusableAttributes.clear();\n                    reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, spanClasses.toString());\n                    reusableAttributes.addAttribute(\"\", \"id\", \"id\", ContentHandlerHelper.CDATA, \"showcalendar-\" + effectiveId);\n\n                    // HACK: Output XHTML image natively in order to help with the IE bug whereby IE reloads\n                    // background images way too often.\n                    reusableAttributes.addAttribute(\"\", \"src\", \"src\", ContentHandlerHelper.CDATA, XFormsConstants.CALENDAR_IMAGE_URI);\n\n                    final String imgQName = XMLUtils.buildQName(xhtmlPrefix, \"img\");\n                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"img\", imgQName, reusableAttributes);\n                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"img\", imgQName);\n                }\n            }\n            contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName);\n        }\n    }","id":96914,"modified_method":"protected void handleControl(String uri, String localname, String qName, Attributes attributes, String id, String effectiveId, XFormsSingleNodeControl xformsControl) throws SAXException {\n\n        final XFormsInputControl inputControl = (XFormsInputControl) xformsControl;\n        final ContentHandler contentHandler = handlerContext.getController().getOutput();\n        final boolean isConcreteControl = inputControl != null;\n\n        final AttributesImpl newAttributes;\n        final boolean isDate;\n        final boolean isBoolean;\n        {\n            final FastStringBuffer classes = getInitialClasses(localname, attributes, inputControl);\n            if (!handlerContext.isTemplate()) {\n                if (isConcreteControl) {\n                    final String controlType = inputControl.getType();\n                    isDate = XMLConstants.XS_DATE_EXPLODED_QNAME.equals(controlType) || XFormsConstants.XFORMS_DATE_EXPLODED_QNAME.equals(controlType);\n                    isBoolean = XMLConstants.XS_BOOLEAN_EXPLODED_QNAME.equals(controlType) || XFormsConstants.XFORMS_BOOLEAN_EXPLODED_QNAME.equals(controlType);\n                } else {\n                    isDate = false;\n                    isBoolean = false;\n                }\n            } else {\n                isDate = false;\n                isBoolean = false;\n            }\n            handleMIPClasses(classes, inputControl);\n            newAttributes = getAttributes(attributes, classes.toString(), effectiveId);\n        }\n\n        if (isBoolean) {\n            // Produce a boolean output\n\n            // We try to look like an xforms:select[@appearance = 'full']\n            final QName appearance = XFormsConstants.XFORMS_FULL_APPEARANCE_QNAME;\n            final boolean isMany = true;\n\n            final List items = new ArrayList(2);\n            items.add(new XFormsItemUtils.Item(true, Collections.EMPTY_LIST, \"\", \"true\", 1));\n\n            // NOTE: In the future, we may want to use other appearances provided by xforms:select\n//            items.add(new XFormsSelect1Control.Item(false, Collections.EMPTY_LIST, \"False\", \"false\", 1));\n\n            final XFormsSelect1Handler select1Handler = new XFormsSelect1Handler();\n            select1Handler.setContentHandler(getContentHandler());\n            select1Handler.setContext(getContext());\n//            select1Handler.setDocumentLocator(get);\n            select1Handler.outputContent(attributes, id, effectiveId, localname, inputControl, items, isMany, appearance);\n\n        } else {\n\n            // Create xhtml:span\n            final boolean isReadOnly = isConcreteControl && inputControl.isReadonly();\n            final String xhtmlPrefix = handlerContext.findXHTMLPrefix();\n            final String spanQName = XMLUtils.buildQName(xhtmlPrefix, \"span\");\n            final String inputQName = XMLUtils.buildQName(xhtmlPrefix, \"input\");\n            contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName, newAttributes);\n            {\n                // Create xhtml:span for date display\n                if (!isStaticReadonly(inputControl)) {\n                    final StringBuffer spanClasses = new StringBuffer(\"xforms-date-display\");\n                    if (isReadOnly)\n                        spanClasses.append(\" xforms-readonly\");\n                    reusableAttributes.clear();\n                    reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, spanClasses.toString());// TODO: check whether like in the XSTL version we need to copy other classes as well\n                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName, reusableAttributes);\n                    if (isConcreteControl && isDate) {\n                        final String displayValueOrValue = inputControl.getDisplayValueOrExternalValue(pipelineContext);\n                        if (displayValueOrValue != null && !displayValueOrValue.equals(\"\")) {\n                            contentHandler.characters(displayValueOrValue.toCharArray(), 0, displayValueOrValue.length());\n                        } else {\n                            // Add an nbsp to facilitate styling\n                            contentHandler.characters(NBSP.toCharArray(), 0, NBSP.length());\n                        }\n                    }\n                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName);\n                }\n\n                // Create xhtml:input\n                {\n                    reusableAttributes.clear();\n                    if (!isStaticReadonly(inputControl)) {\n                        // Regular mode\n\n                        final StringBuffer inputClasses = new StringBuffer(\"xforms-input-input\");\n\n                        reusableAttributes.addAttribute(\"\", \"id\", \"id\", ContentHandlerHelper.CDATA, \"input-\" + effectiveId);\n                        reusableAttributes.addAttribute(\"\", \"type\", \"type\", ContentHandlerHelper.CDATA, \"text\");\n                        reusableAttributes.addAttribute(\"\", \"name\", \"name\", ContentHandlerHelper.CDATA, effectiveId);\n\n\n                        if (isConcreteControl) {\n                            // Output value only for concrete control\n                            final String value = inputControl.getExternalValue(pipelineContext);\n                            reusableAttributes.addAttribute(\"\", \"value\", \"value\", ContentHandlerHelper.CDATA, (value == null) ? \"\" : value);\n                        } else {\n                            reusableAttributes.addAttribute(\"\", \"value\", \"value\", ContentHandlerHelper.CDATA, \"\");\n                        }\n\n                        reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA,\n                                (inputClasses.length() > 0) ? inputClasses.toString() : \"\");// TODO: check whether like in the XSTL version we need to copy other classes as well\n\n                        handleReadOnlyAttribute(reusableAttributes, containingDocument, inputControl);\n\n                        // Copy special attributes in xxforms namespace\n                        copyAttributes(attributes, XFormsConstants.XXFORMS_NAMESPACE_URI, XXFORMS_ATTRIBUTES_TO_COPY, reusableAttributes);\n\n                        // Handle accessibility attributes\n                        handleAccessibilityAttributes(attributes, reusableAttributes);\n\n                        contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"input\", inputQName, reusableAttributes);\n                        contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"input\", inputQName);\n                    } else {\n                        // Read-only mode\n                        if (isConcreteControl) {\n                            // Output value only for concrete control\n                            final String value = inputControl.getDisplayValueOrExternalValue(pipelineContext);\n                            if (value != null)\n                                contentHandler.characters(value.toCharArray(), 0, value.length());\n                        }\n                    }\n                }\n\n                // Create xhtml:span for date picker\n                if (!isStaticReadonly(inputControl)) {\n                    final StringBuffer spanClasses = new StringBuffer(\"xforms-showcalendar\");\n                    if (isReadOnly)\n                        spanClasses.append(\" xforms-showcalendar-readonly\");\n\n                    reusableAttributes.clear();\n                    reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, spanClasses.toString());\n                    reusableAttributes.addAttribute(\"\", \"id\", \"id\", ContentHandlerHelper.CDATA, \"showcalendar-\" + effectiveId);\n\n                    // HACK: Output XHTML image natively in order to help with the IE bug whereby IE reloads\n                    // background images way too often.\n                    reusableAttributes.addAttribute(\"\", \"src\", \"src\", ContentHandlerHelper.CDATA, XFormsConstants.CALENDAR_IMAGE_URI);\n\n                    final String imgQName = XMLUtils.buildQName(xhtmlPrefix, \"img\");\n                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"img\", imgQName, reusableAttributes);\n                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"img\", imgQName);\n                }\n            }\n            contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName);\n        }\n    }","commit_id":"14a7bfa3c9333472d623f9f27132c0cdad45a934","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"public Item(boolean isItemSet, List attributesList, String label, String value, int level) {\n            this.isItemSet = isItemSet;\n            this.attributesList = attributesList;\n            this.label = label;\n            this.value = value;\n            this.level = level;\n        }","id":96915,"modified_method":"public Item(boolean isEncryptValue, List attributesList, String label, String value, int level) {\n            this.isEncryptValue = isEncryptValue;\n            this.attributesList = attributesList;\n            this.label = label;\n            this.value = value;\n            this.level = level;\n        }","commit_id":"14a7bfa3c9333472d623f9f27132c0cdad45a934","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Return a list of items as a JSON tree.\n     *\n     * @param items         list of XFormsSelect1Control.Item\n     * @return              String representing a JSON tree\n     */\n    public static String getJSONTreeInfo(List items, LocationData locationData) {\n        return getJSONTreeInfo(items, null, false, locationData);\n    }","id":96916,"modified_method":"/**\n     * Return a list of items as a JSON tree.\n     *\n     * @param items         list of XFormsSelect1Control.Item\n     * @return              String representing a JSON tree\n     */\n    public static String getJSONTreeInfo(PipelineContext pipelineContext, List items, LocationData locationData) {\n        return getJSONTreeInfo(pipelineContext, items, null, false, locationData);\n    }","commit_id":"14a7bfa3c9333472d623f9f27132c0cdad45a934","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Return a list of items as a JSON tree.\n     *\n     * @param items         list of XFormsSelect1Control.Item\n     * @param controlValue  current value of the control (to determine selected item) or null\n     * @param many          whether multiple selection is allowed (to determine selected item)\n     * @return              String representing a JSON tree\n     */\n    public static String getJSONTreeInfo(List items, final String controlValue, final boolean many, LocationData locationData) {\n        // Produce a JSON fragment with hierachical information\n        if (items.size() > 0) {\n            final FastStringBuffer sb = new FastStringBuffer(100);\n            sb.append(\"[\");\n            visitItemsTree(null, items, locationData, new TreeListener() {\n                public void startLevel(ContentHandler contentHandler, int level) throws SAXException {\n                }\n\n                public void endLevel(ContentHandler contentHandler, int level) throws SAXException {\n                }\n\n                public void startItem(ContentHandler contentHandler, Item item, boolean first) throws SAXException {\n                    final String label = item.getLabel();\n                    final String value = item.getValue();\n\n                    if (!first)\n                        sb.append(',');\n                    sb.append(\"[\");\n\n                    sb.append('\"');\n                    sb.append(escapeJavaScriptQuotes(label));\n                    sb.append(\"\\\",\\\"\");\n                    if (value != null)\n                        sb.append(escapeJavaScriptQuotes(value));\n                    sb.append('\\\"');\n\n                    if (controlValue != null) {\n                        // We allow the value to be null when this method is used just to produce the structure of the tree without selection\n                        sb.append(',');\n                        sb.append(Boolean.toString((value != null) && isSelected(many, controlValue, value)));\n                    }\n                }\n\n                public void endItem(ContentHandler contentHandler) throws SAXException {\n                    sb.append(\"]\");\n                }\n            });\n            sb.append(\"]\");\n\n            return sb.toString();\n\n        } else {\n            // Safer to return an empty array rather than en empty string\n            return \"[]\";\n        }\n    }","id":96917,"modified_method":"/**\n     * Return a list of items as a JSON tree.\n     *\n     * @param items         list of XFormsSelect1Control.Item\n     * @param controlValue  current value of the control (to determine selected item) or null\n     * @param many          whether multiple selection is allowed (to determine selected item)\n     * @return              String representing a JSON tree\n     */\n    public static String getJSONTreeInfo(final PipelineContext pipelineContext, List items, final String controlValue, final boolean many, LocationData locationData) {\n        // Produce a JSON fragment with hierachical information\n        if (items.size() > 0) {\n            final FastStringBuffer sb = new FastStringBuffer(100);\n            sb.append(\"[\");\n            visitItemsTree(null, items, locationData, new TreeListener() {\n                public void startLevel(ContentHandler contentHandler, int level) throws SAXException {\n                }\n\n                public void endLevel(ContentHandler contentHandler, int level) throws SAXException {\n                }\n\n                public void startItem(ContentHandler contentHandler, Item item, boolean first) throws SAXException {\n                    final String value = item.getValue();\n\n                    if (!first)\n                        sb.append(',');\n                    sb.append(\"[\");\n\n                    sb.append('\"');\n                    sb.append(item.getExternalJSLabel());\n                    sb.append(\"\\\",\\\"\");\n                    sb.append(item.getExternalJSValue(pipelineContext));\n                    sb.append('\\\"');\n\n                    if (controlValue != null) {\n                        // We allow the value to be null when this method is used just to produce the structure of the tree without selection\n                        sb.append(',');\n                        sb.append(Boolean.toString((value != null) && isSelected(many, controlValue, value)));\n                    }\n                }\n\n                public void endItem(ContentHandler contentHandler) throws SAXException {\n                    sb.append(\"]\");\n                }\n            });\n            sb.append(\"]\");\n\n            return sb.toString();\n\n        } else {\n            // Safer to return an empty array rather than en empty string\n            return \"[]\";\n        }\n    }","commit_id":"14a7bfa3c9333472d623f9f27132c0cdad45a934","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Evaluate the itemset for a given xforms:select or xforms:select1 control.\n     *\n     * @param pipelineContext       current pipeline context\n     * @param containingDocument    current containing document\n     * @param select1Control        control to evaluate\n     * @param setBinding            whether this method must set the evaluation binding (false if it is already set)\n     * @return                      List of Item\n     */\n    public static List evaluateItemsets(final PipelineContext pipelineContext, final XFormsContainingDocument containingDocument, final XFormsSelect1Control select1Control, boolean setBinding) {\n\n        final List newItems = new ArrayList();\n        final XFormsContextStack contextStack = containingDocument.getXFormsControls().getContextStack();\n\n        // Set binding on this control if required\n        if (setBinding)\n            contextStack.setBinding(select1Control);\n\n        // TODO: Work on dependencies\n//        final List existingItems = containingDocument.getXFormsControls().getConstantItems(getOriginalId());\n//        final boolean[] mayReuse = new boolean[] { existingItems != null };\n\n        Dom4jUtils.visitSubtree(select1Control.getControlElement(), new Dom4jUtils.VisitorListener() {\n\n            private int hierarchyLevel = 0;\n\n            public void startElement(Element element) {\n                final String localname = element.getName();\n                if (\"item\".equals(localname)) {\n                    // xforms:item\n\n//                    mayReuse[0] = false;\n\n                    final Element labelElement = element.element(XFormsConstants.XFORMS_LABEL_QNAME);\n                    if (labelElement == null)\n                        throw new ValidationException(\"xforms:item must contain an xforms:label element.\", select1Control.getLocationData());\n                    final String label = XFormsUtils.getChildElementValue(pipelineContext, containingDocument, labelElement, false, null);\n\n                    final Element valueElement = element.element(XFormsConstants.XFORMS_VALUE_QNAME);\n                    if (valueElement == null)\n                        throw new ValidationException(\"xforms:item must contain an xforms:value element.\", select1Control.getLocationData());\n                    final String value = XFormsUtils.getChildElementValue(pipelineContext, containingDocument, valueElement, false, null);\n\n                    newItems.add(new Item(false, element.attributes(), label != null ? label : \"\", value != null ? value : \"\", hierarchyLevel + 1));// TODO: must filter attributes on element.attributes()\n\n                } else if (\"itemset\".equals(localname)) {\n                    // xforms:itemset\n\n                    final int itemsetLevel = hierarchyLevel;\n                    contextStack.pushBinding(pipelineContext, element);\n                    {\n                        final XFormsContextStack.BindingContext currentBindingContext = contextStack.getCurrentBindingContext();\n\n                        //if (model == null || model == currentBindingContext.getModel()) { // it is possible to filter on a particular model\n                        final List currentNodeSet = currentBindingContext.getNodeset();\n                        if (currentNodeSet != null) {\n                            final Stack nodeStack = new Stack();\n                            final int iterationCount = currentNodeSet.size();\n                            for (int currentPosition = 1; currentPosition <= iterationCount; currentPosition++) {\n\n                                // Push iteration\n                                contextStack.pushIteration(currentPosition);\n                                {\n                                    final NodeInfo currentNodeInfo = (NodeInfo) currentNodeSet.get(currentPosition - 1);\n\n                                    // NOTE: We support relevance of items as an extension to XForms.\n                                    final boolean isRelevant = InstanceData.getInheritedRelevant(currentNodeInfo);\n\n                                    // Handle children of xforms:itemset\n                                    final String label;\n                                    final Element valueCopyElement;\n                                    if (isRelevant) {\n                                        {\n                                            final Element labelElement = element.element(XFormsConstants.XFORMS_LABEL_QNAME);\n                                            if (labelElement == null)\n                                                throw new ValidationException(\"xforms:itemset element must contain one xforms:label element.\", select1Control.getLocationData());\n\n                                            label = XFormsUtils.getChildElementValue(pipelineContext, containingDocument, element.element(XFormsConstants.XFORMS_LABEL_QNAME), false, null);\n                                        }\n\n\n                                        {\n                                            final Element valueElement = element.element(XFormsConstants.XFORMS_VALUE_QNAME);\n                                            valueCopyElement = (element != null)\n                                                    ? valueElement : element.element(XFormsConstants.XFORMS_COPY_QNAME);\n                                        }\n                                        if (valueCopyElement == null)\n                                            throw new ValidationException(\"xforms:itemset element must contain one xforms:value or one xforms:copy element.\", select1Control.getLocationData());\n                                    } else {\n                                        label = null;\n                                        valueCopyElement = null;\n                                    }\n\n                                    // NOTE: For now, we calculate the position in the hierarchy even if the node is\n                                    // non-relevant. Is this the right thing to do?\n                                    final int newLevel = itemsetLevel + getNodeLevel(currentNodeInfo, nodeStack);\n                                    if (hierarchyLevel - newLevel >= 0) {\n                                        //  We are going down one or more levels\n                                        for (int i = newLevel; i <= hierarchyLevel; i++) {\n                                            nodeStack.pop();\n                                        }\n                                    }\n\n                                    // Handle new item if relevant\n                                    if (isRelevant) {\n                                        if (valueCopyElement.getName().equals(\"value\")) {\n                                            // Handle xforms:value\n                                            // TODO: This could be optimized for xforms:value/@ref|@value as we could get the expression from the cache only once\n                                            final String value = XFormsUtils.getChildElementValue(pipelineContext, containingDocument, element.element(XFormsConstants.XFORMS_VALUE_QNAME), false, null);\n                                            newItems.add(new Item(true, element.attributes(), label != null ? label : \"\", value, newLevel));// TODO: must filter attributes on element.attributes()\n                                        } else {\n                                            // TODO: handle xforms:copy\n                                            throw new ValidationException(\"xforms:copy is not yet supported.\", select1Control.getLocationData());\n                                        }\n                                    }\n\n                                    nodeStack.push(currentNodeInfo);\n                                    hierarchyLevel = newLevel;\n                                }\n                                contextStack.popBinding();\n                            }\n                        }\n                    }\n                    contextStack.popBinding();\n                    hierarchyLevel = itemsetLevel; // restore to level of xforms:itemset\n\n                } else if (\"choices\".equals(localname)) {\n                    // xforms:choices\n\n                    final Element labelElement = element.element(XFormsConstants.XFORMS_LABEL_QNAME);\n                    if (labelElement != null) {\n                        final String label = XFormsUtils.getChildElementValue(pipelineContext, containingDocument, element.element(XFormsConstants.XFORMS_LABEL_QNAME), false, null);\n                        hierarchyLevel++;\n                        newItems.add(new Item(false, element.attributes(), label, null, hierarchyLevel));// TODO: must filter attributes on element.attributes()\n                    }\n                }\n            }\n\n            public void endElement(Element element) {\n                final String localname = element.getName();\n                 if (\"choices\".equals(localname)) {\n                    // xforms:choices\n\n                    final Element labelElement = element.element(XFormsConstants.XFORMS_LABEL_QNAME);\n                    if (labelElement != null) {\n                        hierarchyLevel--;\n                    }\n                }\n            }\n\n            public void text(Text text) {\n            }\n\n            private int getNodeLevel(NodeInfo nodeInfo, Stack stack) {\n                Collections.reverse(stack);\n                int level = stack.size() + 1;\n                for (Iterator i = stack.iterator(); i.hasNext(); level--) {\n                    final NodeInfo currentNode = (NodeInfo) i.next();\n                    if (isAncestorNode(nodeInfo, currentNode)) {\n                        Collections.reverse(stack);\n                        return level;\n                    }\n                }\n                Collections.reverse(stack);\n                return level;\n            }\n\n            private boolean isAncestorNode(NodeInfo node, NodeInfo potentialAncestor) {\n                NodeInfo parent = node.getParent();\n                while (parent != null) {\n                    if (parent.isSameNodeInfo(potentialAncestor))\n                        return true;\n                    parent = parent.getParent();\n                }\n\n                return false;\n            }\n\n        });\n        return newItems;\n    }","id":96918,"modified_method":"/**\n     * Evaluate the itemset for a given xforms:select or xforms:select1 control.\n     *\n     * @param pipelineContext       current pipeline context\n     * @param containingDocument    current containing document\n     * @param select1Control        control to evaluate\n     * @param setBinding            whether this method must set the evaluation binding (false if it is already set)\n     * @return                      List of Item\n     */\n    public static List evaluateItemsets(final PipelineContext pipelineContext, final XFormsContainingDocument containingDocument, final XFormsSelect1Control select1Control, boolean setBinding) {\n\n        final List newItems = new ArrayList();\n        final XFormsContextStack contextStack = containingDocument.getXFormsControls().getContextStack();\n\n        // Set binding on this control if required\n        if (setBinding)\n            contextStack.setBinding(select1Control);\n\n        // TODO: Work on dependencies\n//        final List existingItems = containingDocument.getXFormsControls().getConstantItems(getOriginalId());\n//        final boolean[] mayReuse = new boolean[] { existingItems != null };\n\n        final boolean isOpenSelection = select1Control.isOpenSelection();\n\n        Dom4jUtils.visitSubtree(select1Control.getControlElement(), new Dom4jUtils.VisitorListener() {\n\n            private int hierarchyLevel = 0;\n\n            public void startElement(Element element) {\n                final String localname = element.getName();\n                if (\"item\".equals(localname)) {\n                    // xforms:item\n\n//                    mayReuse[0] = false;\n\n                    final Element labelElement = element.element(XFormsConstants.XFORMS_LABEL_QNAME);\n                    if (labelElement == null)\n                        throw new ValidationException(\"xforms:item must contain an xforms:label element.\", select1Control.getLocationData());\n                    final String label = XFormsUtils.getChildElementValue(pipelineContext, containingDocument, labelElement, false, null);\n\n                    final Element valueElement = element.element(XFormsConstants.XFORMS_VALUE_QNAME);\n                    if (valueElement == null)\n                        throw new ValidationException(\"xforms:item must contain an xforms:value element.\", select1Control.getLocationData());\n                    final String value = XFormsUtils.getChildElementValue(pipelineContext, containingDocument, valueElement, false, null);\n\n                    newItems.add(new Item(!isOpenSelection, element.attributes(), label != null ? label : \"\", value != null ? value : \"\", hierarchyLevel + 1));// TODO: must filter attributes on element.attributes()\n\n                } else if (\"itemset\".equals(localname)) {\n                    // xforms:itemset\n\n                    final int itemsetLevel = hierarchyLevel;\n                    contextStack.pushBinding(pipelineContext, element);\n                    {\n                        final XFormsContextStack.BindingContext currentBindingContext = contextStack.getCurrentBindingContext();\n\n                        //if (model == null || model == currentBindingContext.getModel()) { // it is possible to filter on a particular model\n                        final List currentNodeSet = currentBindingContext.getNodeset();\n                        if (currentNodeSet != null) {\n                            final Stack nodeStack = new Stack();\n                            final int iterationCount = currentNodeSet.size();\n                            for (int currentPosition = 1; currentPosition <= iterationCount; currentPosition++) {\n\n                                // Push iteration\n                                contextStack.pushIteration(currentPosition);\n                                {\n                                    final NodeInfo currentNodeInfo = (NodeInfo) currentNodeSet.get(currentPosition - 1);\n\n                                    // NOTE: We support relevance of items as an extension to XForms.\n                                    final boolean isRelevant = InstanceData.getInheritedRelevant(currentNodeInfo);\n\n                                    // Handle children of xforms:itemset\n                                    final String label;\n                                    final Element valueCopyElement;\n                                    if (isRelevant) {\n                                        {\n                                            final Element labelElement = element.element(XFormsConstants.XFORMS_LABEL_QNAME);\n                                            if (labelElement == null)\n                                                throw new ValidationException(\"xforms:itemset element must contain one xforms:label element.\", select1Control.getLocationData());\n\n                                            label = XFormsUtils.getChildElementValue(pipelineContext, containingDocument, element.element(XFormsConstants.XFORMS_LABEL_QNAME), false, null);\n                                        }\n\n\n                                        {\n                                            final Element valueElement = element.element(XFormsConstants.XFORMS_VALUE_QNAME);\n                                            valueCopyElement = (element != null)\n                                                    ? valueElement : element.element(XFormsConstants.XFORMS_COPY_QNAME);\n                                        }\n                                        if (valueCopyElement == null)\n                                            throw new ValidationException(\"xforms:itemset element must contain one xforms:value or one xforms:copy element.\", select1Control.getLocationData());\n                                    } else {\n                                        label = null;\n                                        valueCopyElement = null;\n                                    }\n\n                                    // NOTE: For now, we calculate the position in the hierarchy even if the node is\n                                    // non-relevant. Is this the right thing to do?\n                                    final int newLevel = itemsetLevel + getNodeLevel(currentNodeInfo, nodeStack);\n                                    if (hierarchyLevel - newLevel >= 0) {\n                                        //  We are going down one or more levels\n                                        for (int i = newLevel; i <= hierarchyLevel; i++) {\n                                            nodeStack.pop();\n                                        }\n                                    }\n\n                                    // Handle new item if relevant\n                                    if (isRelevant) {\n                                        if (valueCopyElement.getName().equals(\"value\")) {\n                                            // Handle xforms:value\n                                            // TODO: This could be optimized for xforms:value/@ref|@value as we could get the expression from the cache only once\n                                            final String value = XFormsUtils.getChildElementValue(pipelineContext, containingDocument, element.element(XFormsConstants.XFORMS_VALUE_QNAME), false, null);\n                                            newItems.add(new Item(!isOpenSelection, element.attributes(), label != null ? label : \"\", value, newLevel));// TODO: must filter attributes on element.attributes()\n                                        } else {\n                                            // TODO: handle xforms:copy\n                                            throw new ValidationException(\"xforms:copy is not yet supported.\", select1Control.getLocationData());\n                                        }\n                                    }\n\n                                    nodeStack.push(currentNodeInfo);\n                                    hierarchyLevel = newLevel;\n                                }\n                                contextStack.popBinding();\n                            }\n                        }\n                    }\n                    contextStack.popBinding();\n                    hierarchyLevel = itemsetLevel; // restore to level of xforms:itemset\n\n                } else if (\"choices\".equals(localname)) {\n                    // xforms:choices\n\n                    final Element labelElement = element.element(XFormsConstants.XFORMS_LABEL_QNAME);\n                    if (labelElement != null) {\n                        final String label = XFormsUtils.getChildElementValue(pipelineContext, containingDocument, element.element(XFormsConstants.XFORMS_LABEL_QNAME), false, null);\n                        hierarchyLevel++;\n                        newItems.add(new Item(!isOpenSelection, element.attributes(), label, null, hierarchyLevel));// TODO: must filter attributes on element.attributes()\n                    }\n                }\n            }\n\n            public void endElement(Element element) {\n                final String localname = element.getName();\n                 if (\"choices\".equals(localname)) {\n                    // xforms:choices\n\n                    final Element labelElement = element.element(XFormsConstants.XFORMS_LABEL_QNAME);\n                    if (labelElement != null) {\n                        hierarchyLevel--;\n                    }\n                }\n            }\n\n            public void text(Text text) {\n            }\n\n            private int getNodeLevel(NodeInfo nodeInfo, Stack stack) {\n                Collections.reverse(stack);\n                int level = stack.size() + 1;\n                for (Iterator i = stack.iterator(); i.hasNext(); level--) {\n                    final NodeInfo currentNode = (NodeInfo) i.next();\n                    if (isAncestorNode(nodeInfo, currentNode)) {\n                        Collections.reverse(stack);\n                        return level;\n                    }\n                }\n                Collections.reverse(stack);\n                return level;\n            }\n\n            private boolean isAncestorNode(NodeInfo node, NodeInfo potentialAncestor) {\n                NodeInfo parent = node.getParent();\n                while (parent != null) {\n                    if (parent.isSameNodeInfo(potentialAncestor))\n                        return true;\n                    parent = parent.getParent();\n                }\n\n                return false;\n            }\n\n        });\n        return newItems;\n    }","commit_id":"14a7bfa3c9333472d623f9f27132c0cdad45a934","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"public void storeExternalValue(PipelineContext pipelineContext, String value, String type) {\n        if (!(this instanceof XFormsSelectControl)) {\n            // Handle xforms:select1-specific logic\n\n            // Current control value\n            final String controlValue = getValue(pipelineContext);\n\n            // Iterate over all the items\n            final List items = getItemset(pipelineContext, true);\n            final List selectEvents = new ArrayList();\n            for (Iterator i = items.iterator(); i.hasNext();) {\n                final XFormsItemUtils.Item currentItem = (XFormsItemUtils.Item) i.next();\n                final String currentItemValue = currentItem.getValue();\n                final boolean itemWasSelected = controlValue.equals(currentItemValue);\n                final boolean itemIsSelected;\n                if (value.equals(currentItemValue)) {\n                    // Value is currently selected in the UI\n                    itemIsSelected = true;\n                } else {\n                    // Value is currently NOT selected in the UI\n                    itemIsSelected = false;\n                }\n\n                // Handle xforms-select / xforms-deselect\n                // TODO: Dispatch to itemset or item once we support doing that\n                if (!itemWasSelected && itemIsSelected)\n                    selectEvents.add(new XFormsSelectEvent(this, currentItemValue));\n                else if (itemWasSelected && !itemIsSelected)\n                    containingDocument.dispatchEvent(pipelineContext, new XFormsDeselectEvent(this, currentItemValue));\n            }\n            if (selectEvents.size() > 0) {\n                // Select events must be sent after all xforms-deselect events\n                for (Iterator i = selectEvents.iterator(); i.hasNext();) {\n                    containingDocument.dispatchEvent(pipelineContext, (XFormsEvent) i.next());\n                }\n            }\n        }\n\n        super.storeExternalValue(pipelineContext, value, type);\n    }","id":96919,"modified_method":"public void storeExternalValue(PipelineContext pipelineContext, String value, String type) {\n\n        if (!(this instanceof XFormsSelectControl)) {// kind of a HACK due to the way our class hierarchy is setup\n            // Handle xforms:select1-specific logic\n\n            // Decrypt incoming value. With open selection, values are sent to the client.\n            if (!isOpenSelection())\n                value = XFormsItemUtils.decryptValue(pipelineContext, value);\n\n            // Current control value\n            final String controlValue = getValue(pipelineContext);\n\n            // Iterate over all the items\n            final List items = getItemset(pipelineContext, true);\n            final List selectEvents = new ArrayList();\n            final List deselectEvents = new ArrayList();\n            for (Iterator i = items.iterator(); i.hasNext();) {\n                final XFormsItemUtils.Item currentItem = (XFormsItemUtils.Item) i.next();\n                final String currentItemValue = currentItem.getValue();\n                final boolean itemWasSelected = controlValue.equals(currentItemValue);\n                final boolean itemIsSelected;\n                if (value.equals(currentItemValue)) {\n                    // Value is currently selected in the UI\n                    itemIsSelected = true;\n                } else {\n                    // Value is currently NOT selected in the UI\n                    itemIsSelected = false;\n                }\n\n                // Handle xforms-select / xforms-deselect\n                // TODO: Dispatch to itemset or item once we support doing that\n                if (!itemWasSelected && itemIsSelected) {\n                    selectEvents.add(new XFormsSelectEvent(this, currentItemValue));\n                } else if (itemWasSelected && !itemIsSelected) {\n                    deselectEvents.add(new XFormsDeselectEvent(this, currentItemValue));\n                }\n            }\n\n            // Dispatch xforms-deselect events\n            if (deselectEvents.size() > 0) {\n                for (Iterator i = deselectEvents.iterator(); i.hasNext();) {\n                    containingDocument.dispatchEvent(pipelineContext, (XFormsEvent) i.next());\n                }\n            }\n            // Select events must be sent after all xforms-deselect events\n            final boolean hasSelectedItem = selectEvents.size() > 0;\n            if (hasSelectedItem) {\n                for (Iterator i = selectEvents.iterator(); i.hasNext();) {\n                    containingDocument.dispatchEvent(pipelineContext, (XFormsEvent) i.next());\n                }\n            }\n\n            if (hasSelectedItem || isOpenSelection()) {\n                // Only then do we store the external value. This ensures that if the value is NOT in the itemset AND\n                // we are a closed selection then we do NOT store the value in instance.\n                super.storeExternalValue(pipelineContext, value, type);\n            }\n        } else {\n            // Forward to superclass\n            super.storeExternalValue(pipelineContext, value, type);\n        }\n    }","commit_id":"14a7bfa3c9333472d623f9f27132c0cdad45a934","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"public void outputContent(Attributes attributes, String id, String effectiveId, String localname, final XFormsValueControl xformsValueControl, List items, final boolean isMany, QName appearance) throws SAXException {\n\n        final ContentHandler contentHandler = handlerContext.getController().getOutput();\n\n        boolean isOpenSelection = \"open\".equals(attributes.getValue(\"selection\"));\n        boolean isAutocomplete = isOpenSelection\n                && XFormsConstants.XXFORMS_AUTOCOMPLETE_APPEARANCE_QNAME.equals(appearance);\n\n        // NOTE: We don't support autocompletion with xforms:select for now, only with xforms:select1\n        if (isAutocomplete && isMany) {\n            appearance = XFormsConstants.XFORMS_COMPACT_APPEARANCE_QNAME;\n            isOpenSelection = false;\n            isAutocomplete = false;\n        }\n\n        final boolean isFull = XFormsConstants.XFORMS_FULL_APPEARANCE_QNAME.equals(appearance);\n        final boolean isCompact = XFormsConstants.XFORMS_COMPACT_APPEARANCE_QNAME.equals(appearance);\n        final boolean isTree = XFormsConstants.XXFORMS_TREE_APPEARANCE_QNAME.equals(appearance);\n        final boolean isMenu = XFormsConstants.XXFORMS_MENU_APPEARANCE_QNAME.equals(appearance);\n\n        final boolean isAutocompleteNoFilter = isAutocomplete && \"false\".equals(attributes.getValue(XFormsConstants.XXFORMS_NAMESPACE_URI, \"filter\"));\n\n        final AttributesImpl newAttributes;\n        {\n            final FastStringBuffer classes = getInitialClasses(localname, attributes, xformsValueControl, appearance, true); // incremental mode is the default\n\n            if (isOpenSelection)\n                classes.append(\" xforms-select1-open\");\n            if (isAutocompleteNoFilter)\n                classes.append(\" xforms-select1-open-autocomplete-nofilter\");\n\n            if (isTree)\n                classes.append(\" xforms-initially-hidden\");\n\n            handleMIPClasses(classes, xformsValueControl);\n            newAttributes = getAttributes(attributes, classes.toString(), effectiveId);\n        }\n\n        final String xhtmlPrefix = handlerContext.findXHTMLPrefix();\n        if (!isStaticReadonly(xformsValueControl)) {\n            if (isFull) {\n                final String fullItemType = isMany ? \"checkbox\" : \"radio\";\n                final String spanQName = XMLUtils.buildQName(xhtmlPrefix, \"span\");\n                {\n                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName, newAttributes);\n\n                    if (items != null) {\n                        int itemIndex = 0;\n                        for (Iterator i = items.iterator(); i.hasNext(); itemIndex++) {\n                            final XFormsItemUtils.Item item = (XFormsItemUtils.Item) i.next();\n                            handleItemFull(contentHandler, attributes, xhtmlPrefix, spanQName, xformsValueControl, id, effectiveId, isMany, fullItemType, item, Integer.toString(itemIndex), itemIndex == 0);\n                        }\n                    }\n\n                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName);\n                }\n\n                // Try to produce the template only when needed\n                final XFormsStaticState.ItemsInfo itemsInfo = containingDocument.getStaticState().getItemsInfo(id);\n                if (xformsValueControl == null || itemsInfo == null || (itemsInfo != null && itemsInfo.hasNonStaticItem())) {\n                    reusableAttributes.clear();\n                    reusableAttributes.addAttribute(\"\", \"id\", \"id\", ContentHandlerHelper.CDATA, \"xforms-select-template-\" + effectiveId);\n                    reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, \"xforms-select-template\");\n\n                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName, reusableAttributes);\n                    handleItemFull(contentHandler, attributes, xhtmlPrefix, spanQName, null, id, effectiveId, isMany, fullItemType,\n                            new XFormsItemUtils.Item(true, Collections.EMPTY_LIST,\n                                    \"$xforms-template-label$\", \"$xforms-template-value$\", 1),\n                            \"$xforms-item-index$\", true);\n                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName);\n                }\n            } else {\n\n                if (isOpenSelection) {\n\n                    if (isAutocomplete) {\n\n                        // Create xhtml:span\n                        final String spanQName = XMLUtils.buildQName(xhtmlPrefix, \"span\");\n                        contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName, newAttributes);\n\n                        {\n                            {\n                                // Create xhtml:input\n                                final String inputQName = XMLUtils.buildQName(xhtmlPrefix, \"input\");\n\n                                reusableAttributes.clear();\n                                reusableAttributes.addAttribute(\"\", \"type\", \"type\", ContentHandlerHelper.CDATA, \"text\");\n                                reusableAttributes.addAttribute(\"\", \"name\", \"name\", ContentHandlerHelper.CDATA, \"xforms-select1-open-input-\" + effectiveId);\n                                reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, \"xforms-select1-open-input\");\n                                reusableAttributes.addAttribute(\"\", \"autocomplete\", \"autocomplete\", ContentHandlerHelper.CDATA, \"off\");\n\n                                final String value = (xformsValueControl == null) ? null : xformsValueControl.getValue(pipelineContext);\n                                reusableAttributes.addAttribute(\"\", \"value\", \"value\", ContentHandlerHelper.CDATA, (value == null) ? \"\" : value);\n                                handleReadOnlyAttribute(reusableAttributes, containingDocument, xformsValueControl);\n                                contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"input\", inputQName, reusableAttributes);\n\n                                contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"input\", inputQName);\n                            }\n                            {\n                                // Create xhtml:select\n                                final String selectQName = XMLUtils.buildQName(xhtmlPrefix, \"select\");\n\n                                reusableAttributes.clear();\n                                reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, \"xforms-select1-open-select\");\n\n                                if (isCompact)\n                                    reusableAttributes.addAttribute(\"\", \"multiple\", \"multiple\", ContentHandlerHelper.CDATA, \"multiple\");\n\n                                // Handle accessibility attributes\n                                handleAccessibilityAttributes(attributes, reusableAttributes);\n\n                                contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"select\", selectQName, reusableAttributes);\n\n                                final String optionQName = XMLUtils.buildQName(xhtmlPrefix, \"option\");\n                                handleItemCompact(contentHandler, optionQName, xformsValueControl, isMany, new XFormsItemUtils.Item(false, Collections.EMPTY_LIST, \"\", \"\", 1));\n                                if (items != null) {\n                                    for (Iterator i = items.iterator(); i.hasNext();) {\n                                        final XFormsItemUtils.Item item = (XFormsItemUtils.Item) i.next();\n                                        if (item.getValue() != null)\n                                            handleItemCompact(contentHandler, optionQName, xformsValueControl, isMany, item);\n                                    }\n                                }\n\n                                contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"select\", selectQName);\n                            }\n                        }\n\n                        contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName);\n                    } else {\n                        // We do not support other appearances or regular open selection for now\n                        throw new ValidationException(\"Open selection currently only supports the xxforms:autocomplete appearance.\",\n                                new ExtendedLocationData(handlerContext.getLocationData(), \"producing markup for xforms:\" + localname + \" control\",\n                                        (xformsValueControl != null) ? xformsValueControl.getControlElement() : null));\n                    }\n\n                } else if (isTree) {\n                    // xxforms:tree appearance\n\n                    // Create xhtml:div with tree info\n                    final String divQName = XMLUtils.buildQName(xhtmlPrefix, \"div\");\n\n                    handleReadOnlyAttribute(newAttributes, containingDocument, xformsValueControl);\n                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName, newAttributes);\n                    outputJSONTreeInfo(xformsValueControl, items, isMany, contentHandler);\n                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName);\n\n                } else if (isMenu) {\n                    // xxforms:menu appearance\n\n                    // Create enclosing xhtml:div\n                    final String divQName = XMLUtils.buildQName(xhtmlPrefix, \"div\");\n                    final String ulQName = XMLUtils.buildQName(xhtmlPrefix, \"ul\");\n                    final String liQName = XMLUtils.buildQName(xhtmlPrefix, \"li\");\n                    final String aQName = XMLUtils.buildQName(xhtmlPrefix, \"a\");\n\n                    handleReadOnlyAttribute(newAttributes, containingDocument, xformsValueControl);\n                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName, newAttributes);\n\n                    // Create xhtml:div with initial menu entries\n                    {\n                        XFormsItemUtils.visitItemsTree(contentHandler, items, handlerContext.getLocationData(), new XFormsItemUtils.TreeListener() {\n\n                            private boolean groupJustStarted = false;\n\n                            public void startLevel(ContentHandler contentHandler, int level) throws SAXException {\n\n                                reusableAttributes.clear();\n                                final String className;\n                                {\n                                    if (level == 1)\n                                        className = \"yuimenubar\";\n                                    else\n                                        className = \"yuimenu\";\n                                }\n                                reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, className);\n                                contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName, reusableAttributes);\n\n                                reusableAttributes.clear();\n                                reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, \"bd\");\n                                contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName, reusableAttributes);\n\n                                reusableAttributes.clear();\n                                reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, \"first-of-type\");\n                                contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"ul\", ulQName, reusableAttributes);\n\n                                groupJustStarted = true;\n                            }\n\n                            public void endLevel(ContentHandler contentHandler, int level) throws SAXException {\n                                contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"ul\", ulQName);\n                                contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName);\n                                contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName);\n\n                                groupJustStarted = false;\n                            }\n\n                            public void startItem(ContentHandler contentHandler, XFormsItemUtils.Item item, boolean first) throws SAXException {\n\n                                final String className;\n                                {\n                                    if (item.getLevel() == 1)\n                                        className = \"yuimenubaritem\";\n                                    else\n                                        className = \"yuimenuitem\";\n                                }\n                                reusableAttributes.clear();\n                                reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, className + (groupJustStarted ? \" first-of-type\" : \"\"));\n                                contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"li\", liQName, reusableAttributes);\n\n                                reusableAttributes.clear();\n                                reusableAttributes.addAttribute(\"\", \"href\", \"href\", ContentHandlerHelper.CDATA, \"#\");\n                                contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"a\", aQName, reusableAttributes);\n\n                                final String text = item.getLabel();\n                                contentHandler.characters(text.toCharArray(), 0, text.length());\n\n                                contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"a\", aQName);\n\n                                groupJustStarted = false;\n                            }\n\n\n                            public void endItem(ContentHandler contentHandler) throws SAXException {\n                                contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"li\", liQName);\n\n                                groupJustStarted = false;\n                            }\n                        });\n\n                    }\n\n                    // Create xhtml:div with tree info\n                    reusableAttributes.clear();\n                    reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, \"xforms-initially-hidden\");\n\n                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName, reusableAttributes);\n                    outputJSONTreeInfo(xformsValueControl, items, isMany, contentHandler);\n                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName);\n\n                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName);\n\n                } else {\n                    // Create xhtml:select\n                    final String selectQName = XMLUtils.buildQName(xhtmlPrefix, \"select\");\n\n                    if (isCompact)\n                        newAttributes.addAttribute(\"\", \"multiple\", \"multiple\", ContentHandlerHelper.CDATA, \"multiple\");\n\n                    // Handle accessibility attributes\n                    handleAccessibilityAttributes(attributes, newAttributes);\n\n                    handleReadOnlyAttribute(newAttributes, containingDocument, xformsValueControl);\n                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"select\", selectQName, newAttributes);\n\n                    final String optionQName = XMLUtils.buildQName(xhtmlPrefix, \"option\");\n                    final String optGroupQName = XMLUtils.buildQName(xhtmlPrefix, \"optgroup\");\n\n                    if (items != null) {\n                        XFormsItemUtils.visitItemsTree(contentHandler, items, handlerContext.getLocationData(), new XFormsItemUtils.TreeListener() {\n\n                            private int optgroupCount = 0;\n\n                            public void startLevel(ContentHandler contentHandler, int level) throws SAXException {\n                                // NOP\n                            }\n\n                            public void endLevel(ContentHandler contentHandler, int level) throws SAXException {\n                                if (optgroupCount-- > 0) {\n                                    // End xhtml:optgroup\n                                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"optgroup\", optGroupQName);\n                                }\n                            }\n\n                            public void startItem(ContentHandler contentHandler, XFormsItemUtils.Item item, boolean first) throws SAXException {\n\n                                final String label = item.getLabel();\n                                final String value = item.getValue();\n\n                                if (value == null) {\n                                    final AttributesImpl optGroupAttributes = getAttributes(new AttributesImpl(), null, null);\n                                    if (label != null)\n                                        optGroupAttributes.addAttribute(\"\", \"label\", \"label\", ContentHandlerHelper.CDATA, label);\n\n                                    // Start xhtml:optgroup\n                                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"optgroup\", optGroupQName, optGroupAttributes);\n                                    optgroupCount++;\n                                } else {\n                                    handleItemCompact(contentHandler, optionQName, xformsValueControl, isMany, item);\n                                }\n                            }\n\n\n                            public void endItem(ContentHandler contentHandler) throws SAXException {\n                            }\n                        });\n                    }\n                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"select\", selectQName);\n                }\n            }\n        } else {\n            // Read-only mode\n\n            final String spanQName = XMLUtils.buildQName(xhtmlPrefix, \"span\");\n            contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName, newAttributes);\n            if (!handlerContext.isTemplate()) {\n                final String value = (xformsValueControl == null || xformsValueControl.getValue(pipelineContext) == null) ? \"\" : xformsValueControl.getValue(pipelineContext);\n                final StringBuffer sb = new StringBuffer();\n                if (items != null) {\n                    int selectedFound = 0;\n                    for (Iterator i = items.iterator(); i.hasNext();) {\n                        final XFormsItemUtils.Item currentItem = (XFormsItemUtils.Item) i.next();\n                        if (XFormsItemUtils.isSelected(isMany, value, currentItem.getValue())) {\n                            if (selectedFound > 0)\n                                sb.append(\" - \");\n                            sb.append(currentItem.getLabel());\n                            selectedFound++;\n                        }\n                    }\n                }\n\n                if (sb.length() > 0) {\n                    final String result = sb.toString();\n                    contentHandler.characters(result.toCharArray(), 0, result.length());\n                }\n            }\n            contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName);\n        }\n    }","id":96920,"modified_method":"public void outputContent(Attributes attributes, String id, String effectiveId, String localname, final XFormsValueControl xformsValueControl, List items, final boolean isMany, QName appearance) throws SAXException {\n\n        final ContentHandler contentHandler = handlerContext.getController().getOutput();\n\n        boolean isOpenSelection = \"open\".equals(attributes.getValue(\"selection\"));\n        boolean isAutocomplete = isOpenSelection\n                && XFormsConstants.XXFORMS_AUTOCOMPLETE_APPEARANCE_QNAME.equals(appearance);\n\n        // NOTE: We don't support autocompletion with xforms:select for now, only with xforms:select1\n        if (isAutocomplete && isMany) {\n            appearance = XFormsConstants.XFORMS_COMPACT_APPEARANCE_QNAME;\n            isOpenSelection = false;\n            isAutocomplete = false;\n        }\n\n        final boolean isFull = XFormsConstants.XFORMS_FULL_APPEARANCE_QNAME.equals(appearance);\n        final boolean isCompact = XFormsConstants.XFORMS_COMPACT_APPEARANCE_QNAME.equals(appearance);\n        final boolean isTree = XFormsConstants.XXFORMS_TREE_APPEARANCE_QNAME.equals(appearance);\n        final boolean isMenu = XFormsConstants.XXFORMS_MENU_APPEARANCE_QNAME.equals(appearance);\n\n        final boolean isAutocompleteNoFilter = isAutocomplete && \"false\".equals(attributes.getValue(XFormsConstants.XXFORMS_NAMESPACE_URI, \"filter\"));\n\n        final AttributesImpl newAttributes;\n        {\n            final FastStringBuffer classes = getInitialClasses(localname, attributes, xformsValueControl, appearance, true); // incremental mode is the default\n\n            if (isOpenSelection)\n                classes.append(\" xforms-select1-open\");\n            if (isAutocompleteNoFilter)\n                classes.append(\" xforms-select1-open-autocomplete-nofilter\");\n\n            if (isTree)\n                classes.append(\" xforms-initially-hidden\");\n\n            handleMIPClasses(classes, xformsValueControl);\n            newAttributes = getAttributes(attributes, classes.toString(), effectiveId);\n        }\n\n        final String xhtmlPrefix = handlerContext.findXHTMLPrefix();\n        if (!isStaticReadonly(xformsValueControl)) {\n            if (isFull) {\n                final String fullItemType = isMany ? \"checkbox\" : \"radio\";\n                final String spanQName = XMLUtils.buildQName(xhtmlPrefix, \"span\");\n                {\n                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName, newAttributes);\n\n                    if (items != null) {\n                        int itemIndex = 0;\n                        for (Iterator i = items.iterator(); i.hasNext(); itemIndex++) {\n                            final XFormsItemUtils.Item item = (XFormsItemUtils.Item) i.next();\n                            handleItemFull(contentHandler, attributes, xhtmlPrefix, spanQName, xformsValueControl, id, effectiveId, isMany, fullItemType, item, Integer.toString(itemIndex), itemIndex == 0);\n                        }\n                    }\n\n                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName);\n                }\n\n                // Try to produce the template only when needed\n                final XFormsStaticState.ItemsInfo itemsInfo = containingDocument.getStaticState().getItemsInfo(id);\n                if (xformsValueControl == null || itemsInfo == null || (itemsInfo != null && itemsInfo.hasNonStaticItem())) {\n                    reusableAttributes.clear();\n                    reusableAttributes.addAttribute(\"\", \"id\", \"id\", ContentHandlerHelper.CDATA, \"xforms-select-template-\" + effectiveId);\n                    reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, \"xforms-select-template\");\n\n                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName, reusableAttributes);\n                    handleItemFull(contentHandler, attributes, xhtmlPrefix, spanQName, null, id, effectiveId, isMany, fullItemType,\n                            new XFormsItemUtils.Item(false, Collections.EMPTY_LIST, // make sure the value \"$xforms-template-value$\" is not encrypted\n                                    \"$xforms-template-label$\", \"$xforms-template-value$\", 1),\n                                    \"$xforms-item-index$\", true);\n                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName);\n                }\n            } else {\n\n                if (isOpenSelection) {\n\n                    if (isAutocomplete) {\n\n                        // Create xhtml:span\n                        final String spanQName = XMLUtils.buildQName(xhtmlPrefix, \"span\");\n                        contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName, newAttributes);\n\n                        {\n                            {\n                                // Create xhtml:input\n                                final String inputQName = XMLUtils.buildQName(xhtmlPrefix, \"input\");\n\n                                reusableAttributes.clear();\n                                reusableAttributes.addAttribute(\"\", \"type\", \"type\", ContentHandlerHelper.CDATA, \"text\");\n                                reusableAttributes.addAttribute(\"\", \"name\", \"name\", ContentHandlerHelper.CDATA, \"xforms-select1-open-input-\" + effectiveId);\n                                reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, \"xforms-select1-open-input\");\n                                reusableAttributes.addAttribute(\"\", \"autocomplete\", \"autocomplete\", ContentHandlerHelper.CDATA, \"off\");\n\n                                final String value = (xformsValueControl == null) ? null : xformsValueControl.getValue(pipelineContext);\n                                // NOTE: With open selection, we send all values to the client but not encrypt them because the client matches on values\n                                reusableAttributes.addAttribute(\"\", \"value\", \"value\", ContentHandlerHelper.CDATA, (value == null) ? \"\" : value);\n                                handleReadOnlyAttribute(reusableAttributes, containingDocument, xformsValueControl);\n                                contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"input\", inputQName, reusableAttributes);\n\n                                contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"input\", inputQName);\n                            }\n                            {\n                                // Create xhtml:select\n                                final String selectQName = XMLUtils.buildQName(xhtmlPrefix, \"select\");\n\n                                reusableAttributes.clear();\n                                reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, \"xforms-select1-open-select\");\n\n                                if (isCompact)\n                                    reusableAttributes.addAttribute(\"\", \"multiple\", \"multiple\", ContentHandlerHelper.CDATA, \"multiple\");\n\n                                // Handle accessibility attributes\n                                handleAccessibilityAttributes(attributes, reusableAttributes);\n\n                                contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"select\", selectQName, reusableAttributes);\n\n                                final String optionQName = XMLUtils.buildQName(xhtmlPrefix, \"option\");\n                                handleItemCompact(contentHandler, optionQName, xformsValueControl, isMany, new XFormsItemUtils.Item(false, Collections.EMPTY_LIST, \"\", \"\", 1));\n                                if (items != null) {\n                                    for (Iterator i = items.iterator(); i.hasNext();) {\n                                        final XFormsItemUtils.Item item = (XFormsItemUtils.Item) i.next();\n                                        if (item.getValue() != null)\n                                            handleItemCompact(contentHandler, optionQName, xformsValueControl, isMany, item);\n                                    }\n                                }\n\n                                contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"select\", selectQName);\n                            }\n                        }\n\n                        contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName);\n                    } else {\n                        // We do not support other appearances or regular open selection for now\n                        throw new ValidationException(\"Open selection currently only supports the xxforms:autocomplete appearance.\",\n                                new ExtendedLocationData(handlerContext.getLocationData(), \"producing markup for xforms:\" + localname + \" control\",\n                                        (xformsValueControl != null) ? xformsValueControl.getControlElement() : null));\n                    }\n\n                } else if (isTree) {\n                    // xxforms:tree appearance\n\n                    // Create xhtml:div with tree info\n                    final String divQName = XMLUtils.buildQName(xhtmlPrefix, \"div\");\n\n                    handleReadOnlyAttribute(newAttributes, containingDocument, xformsValueControl);\n                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName, newAttributes);\n                    outputJSONTreeInfo(xformsValueControl, items, isMany, contentHandler);\n                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName);\n\n                } else if (isMenu) {\n                    // xxforms:menu appearance\n\n                    // Create enclosing xhtml:div\n                    final String divQName = XMLUtils.buildQName(xhtmlPrefix, \"div\");\n                    final String ulQName = XMLUtils.buildQName(xhtmlPrefix, \"ul\");\n                    final String liQName = XMLUtils.buildQName(xhtmlPrefix, \"li\");\n                    final String aQName = XMLUtils.buildQName(xhtmlPrefix, \"a\");\n\n                    handleReadOnlyAttribute(newAttributes, containingDocument, xformsValueControl);\n                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName, newAttributes);\n\n                    // Create xhtml:div with initial menu entries\n                    {\n                        XFormsItemUtils.visitItemsTree(contentHandler, items, handlerContext.getLocationData(), new XFormsItemUtils.TreeListener() {\n\n                            private boolean groupJustStarted = false;\n\n                            public void startLevel(ContentHandler contentHandler, int level) throws SAXException {\n\n                                reusableAttributes.clear();\n                                final String className;\n                                {\n                                    if (level == 1)\n                                        className = \"yuimenubar\";\n                                    else\n                                        className = \"yuimenu\";\n                                }\n                                reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, className);\n                                contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName, reusableAttributes);\n\n                                reusableAttributes.clear();\n                                reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, \"bd\");\n                                contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName, reusableAttributes);\n\n                                reusableAttributes.clear();\n                                reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, \"first-of-type\");\n                                contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"ul\", ulQName, reusableAttributes);\n\n                                groupJustStarted = true;\n                            }\n\n                            public void endLevel(ContentHandler contentHandler, int level) throws SAXException {\n                                contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"ul\", ulQName);\n                                contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName);\n                                contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName);\n\n                                groupJustStarted = false;\n                            }\n\n                            public void startItem(ContentHandler contentHandler, XFormsItemUtils.Item item, boolean first) throws SAXException {\n\n                                final String className;\n                                {\n                                    if (item.getLevel() == 1)\n                                        className = \"yuimenubaritem\";\n                                    else\n                                        className = \"yuimenuitem\";\n                                }\n                                reusableAttributes.clear();\n                                reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, className + (groupJustStarted ? \" first-of-type\" : \"\"));\n                                contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"li\", liQName, reusableAttributes);\n\n                                reusableAttributes.clear();\n                                reusableAttributes.addAttribute(\"\", \"href\", \"href\", ContentHandlerHelper.CDATA, \"#\");\n                                contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"a\", aQName, reusableAttributes);\n\n                                final String text = item.getLabel();\n                                contentHandler.characters(text.toCharArray(), 0, text.length());\n\n                                contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"a\", aQName);\n\n                                groupJustStarted = false;\n                            }\n\n\n                            public void endItem(ContentHandler contentHandler) throws SAXException {\n                                contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"li\", liQName);\n\n                                groupJustStarted = false;\n                            }\n                        });\n\n                    }\n\n                    // Create xhtml:div with tree info\n                    reusableAttributes.clear();\n                    reusableAttributes.addAttribute(\"\", \"class\", \"class\", ContentHandlerHelper.CDATA, \"xforms-initially-hidden\");\n\n                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName, reusableAttributes);\n                    outputJSONTreeInfo(xformsValueControl, items, isMany, contentHandler);\n                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName);\n\n                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"div\", divQName);\n\n                } else {\n                    // Create xhtml:select\n                    final String selectQName = XMLUtils.buildQName(xhtmlPrefix, \"select\");\n\n                    if (isCompact)\n                        newAttributes.addAttribute(\"\", \"multiple\", \"multiple\", ContentHandlerHelper.CDATA, \"multiple\");\n\n                    // Handle accessibility attributes\n                    handleAccessibilityAttributes(attributes, newAttributes);\n\n                    handleReadOnlyAttribute(newAttributes, containingDocument, xformsValueControl);\n                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"select\", selectQName, newAttributes);\n\n                    final String optionQName = XMLUtils.buildQName(xhtmlPrefix, \"option\");\n                    final String optGroupQName = XMLUtils.buildQName(xhtmlPrefix, \"optgroup\");\n\n                    if (items != null) {\n                        XFormsItemUtils.visitItemsTree(contentHandler, items, handlerContext.getLocationData(), new XFormsItemUtils.TreeListener() {\n\n                            private int optgroupCount = 0;\n\n                            public void startLevel(ContentHandler contentHandler, int level) throws SAXException {\n                                // NOP\n                            }\n\n                            public void endLevel(ContentHandler contentHandler, int level) throws SAXException {\n                                if (optgroupCount-- > 0) {\n                                    // End xhtml:optgroup\n                                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"optgroup\", optGroupQName);\n                                }\n                            }\n\n                            public void startItem(ContentHandler contentHandler, XFormsItemUtils.Item item, boolean first) throws SAXException {\n\n                                final String label = item.getLabel();\n                                final String value = item.getValue();\n\n                                if (value == null) {\n                                    final AttributesImpl optGroupAttributes = getAttributes(new AttributesImpl(), null, null);\n                                    if (label != null)\n                                        optGroupAttributes.addAttribute(\"\", \"label\", \"label\", ContentHandlerHelper.CDATA, label);\n\n                                    // Start xhtml:optgroup\n                                    contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"optgroup\", optGroupQName, optGroupAttributes);\n                                    optgroupCount++;\n                                } else {\n                                    handleItemCompact(contentHandler, optionQName, xformsValueControl, isMany, item);\n                                }\n                            }\n\n\n                            public void endItem(ContentHandler contentHandler) throws SAXException {\n                            }\n                        });\n                    }\n                    contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"select\", selectQName);\n                }\n            }\n        } else {\n            // Read-only mode\n\n            final String spanQName = XMLUtils.buildQName(xhtmlPrefix, \"span\");\n            contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName, newAttributes);\n            if (!handlerContext.isTemplate()) {\n                final String value = (xformsValueControl == null || xformsValueControl.getValue(pipelineContext) == null) ? \"\" : xformsValueControl.getValue(pipelineContext);\n                final StringBuffer sb = new StringBuffer();\n                if (items != null) {\n                    int selectedFound = 0;\n                    for (Iterator i = items.iterator(); i.hasNext();) {\n                        final XFormsItemUtils.Item currentItem = (XFormsItemUtils.Item) i.next();\n                        if (XFormsItemUtils.isSelected(isMany, value, currentItem.getValue())) {\n                            if (selectedFound > 0)\n                                sb.append(\" - \");\n                            sb.append(currentItem.getLabel());\n                            selectedFound++;\n                        }\n                    }\n                }\n\n                if (sb.length() > 0) {\n                    final String result = sb.toString();\n                    contentHandler.characters(result.toCharArray(), 0, result.length());\n                }\n            }\n            contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName);\n        }\n    }","commit_id":"14a7bfa3c9333472d623f9f27132c0cdad45a934","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private void handleItemFull(ContentHandler contentHandler, Attributes attributes, String xhtmlPrefix, String spanQName,\n                                XFormsValueControl xformsControl, String id, String effectiveId, boolean isMany, String type, XFormsItemUtils.Item item, String itemIndex, boolean isFirst) throws SAXException {\n\n        // Create an id for the item (trying to make this unique)\n        final String itemEffectiveId = id + \"-opsitem\" + itemIndex + handlerContext.getIdPostfix();\n\n        // xhtml:span\n        final Attributes spanAttributes = getAttributes(new AttributesImpl(), null, null);\n        contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName, spanAttributes);\n\n        // xhtml:input\n        {\n            final String inputQName = XMLUtils.buildQName(xhtmlPrefix, \"input\");\n\n            reusableAttributes.clear();\n            reusableAttributes.addAttribute(\"\", \"id\", \"id\", ContentHandlerHelper.CDATA, itemEffectiveId);\n            reusableAttributes.addAttribute(\"\", \"type\", \"type\", ContentHandlerHelper.CDATA, type);\n            reusableAttributes.addAttribute(\"\", \"name\", \"name\", ContentHandlerHelper.CDATA, effectiveId);// TODO: may have duplicate ids for itemsets\n            reusableAttributes.addAttribute(\"\", \"value\", \"value\", ContentHandlerHelper.CDATA, item.getValue() == null ? \"\" : item.getValue());\n\n            if (!handlerContext.isTemplate() && xformsControl != null) {\n                final String itemValue = ((item.getValue() == null) ? \"\" : item.getValue()).trim();\n                final String controlValue = ((xformsControl.getValue(pipelineContext) == null) ? \"\" : xformsControl.getValue(pipelineContext)).trim();\n\n\n                if (XFormsItemUtils.isSelected(isMany, controlValue, itemValue)) {\n                    reusableAttributes.addAttribute(\"\", \"checked\", \"checked\", ContentHandlerHelper.CDATA, \"checked\");\n                }\n\n                if (isFirst) {\n                    // Handle accessibility attributes\n                    handleAccessibilityAttributes(attributes, reusableAttributes);\n                }\n            }\n\n            handleReadOnlyAttribute(reusableAttributes, containingDocument, xformsControl);\n            contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"input\", inputQName, reusableAttributes);\n            contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"input\", inputQName);\n\n            // We don't output the label within <input><\/input>, because XHTML won't display it.\n\n            final String label = item.getLabel();\n            reusableAttributes.clear();\n            outputLabelFor(handlerContext, reusableAttributes, itemEffectiveId, label, false);// TODO: may be HTML for full appearance\n        }\n\n        contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName);\n    }","id":96921,"modified_method":"private void handleItemFull(ContentHandler contentHandler, Attributes attributes, String xhtmlPrefix, String spanQName,\n                                XFormsValueControl xformsControl, String id, String effectiveId, boolean isMany, String type, XFormsItemUtils.Item item, String itemIndex, boolean isFirst) throws SAXException {\n\n        // Create an id for the item (trying to make this unique)\n        final String itemEffectiveId = id + \"-opsitem\" + itemIndex + handlerContext.getIdPostfix();\n\n        // xhtml:span\n        final Attributes spanAttributes = getAttributes(new AttributesImpl(), null, null);\n        contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName, spanAttributes);\n\n        // xhtml:input\n        {\n            final String inputQName = XMLUtils.buildQName(xhtmlPrefix, \"input\");\n\n            reusableAttributes.clear();\n            reusableAttributes.addAttribute(\"\", \"id\", \"id\", ContentHandlerHelper.CDATA, itemEffectiveId);\n            reusableAttributes.addAttribute(\"\", \"type\", \"type\", ContentHandlerHelper.CDATA, type);\n            reusableAttributes.addAttribute(\"\", \"name\", \"name\", ContentHandlerHelper.CDATA, effectiveId);// TODO: may have duplicate ids for itemsets\n            reusableAttributes.addAttribute(\"\", \"value\", \"value\", ContentHandlerHelper.CDATA, item.getExternalValue(pipelineContext));\n\n            if (!handlerContext.isTemplate() && xformsControl != null) {\n                final String itemValue = ((item.getValue() == null) ? \"\" : item.getValue()).trim();\n                final String controlValue = ((xformsControl.getValue(pipelineContext) == null) ? \"\" : xformsControl.getValue(pipelineContext)).trim();\n\n\n                if (XFormsItemUtils.isSelected(isMany, controlValue, itemValue)) {\n                    reusableAttributes.addAttribute(\"\", \"checked\", \"checked\", ContentHandlerHelper.CDATA, \"checked\");\n                }\n\n                if (isFirst) {\n                    // Handle accessibility attributes\n                    handleAccessibilityAttributes(attributes, reusableAttributes);\n                }\n            }\n\n            handleReadOnlyAttribute(reusableAttributes, containingDocument, xformsControl);\n            contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"input\", inputQName, reusableAttributes);\n            contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"input\", inputQName);\n\n            // We don't output the label within <input><\/input>, because XHTML won't display it.\n\n            final String label = item.getLabel();\n            reusableAttributes.clear();\n            outputLabelFor(handlerContext, reusableAttributes, itemEffectiveId, label, false);// TODO: may be HTML for full appearance\n        }\n\n        contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"span\", spanQName);\n    }","commit_id":"14a7bfa3c9333472d623f9f27132c0cdad45a934","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private void handleItemCompact(ContentHandler contentHandler, String optionQName, XFormsValueControl xformsControl,\n                                   boolean isMany, XFormsItemUtils.Item item) throws SAXException {\n\n        final String optionValue = item.getValue();\n        final AttributesImpl optionAttributes = getAttributes(new AttributesImpl(), null, null);\n\n        optionAttributes.addAttribute(\"\", \"value\", \"value\", ContentHandlerHelper.CDATA, optionValue == null ? \"\" : optionValue);\n\n        // Figure out whether what items are selected\n        if (!handlerContext.isTemplate() && xformsControl != null) {\n            final String controlValue = xformsControl.getValue(pipelineContext);\n            final boolean selected = (controlValue != null) && XFormsItemUtils.isSelected(isMany, controlValue, optionValue);\n            if (selected)\n                optionAttributes.addAttribute(\"\", \"selected\", \"selected\", ContentHandlerHelper.CDATA, \"selected\");\n        }\n\n        // xhtml:option\n        contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"option\", optionQName, optionAttributes);\n        final String label = item.getLabel();\n        if (label != null)\n            contentHandler.characters(label.toCharArray(), 0, label.length());\n        contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"option\", optionQName);\n    }","id":96922,"modified_method":"private void handleItemCompact(ContentHandler contentHandler, String optionQName, XFormsValueControl xformsControl,\n                                   boolean isMany, XFormsItemUtils.Item item) throws SAXException {\n\n        final String optionValue = item.getValue();\n        final AttributesImpl optionAttributes = getAttributes(new AttributesImpl(), null, null);\n\n        optionAttributes.addAttribute(\"\", \"value\", \"value\", ContentHandlerHelper.CDATA, item.getExternalValue(pipelineContext));\n\n        // Figure out whether what items are selected\n        if (!handlerContext.isTemplate() && xformsControl != null) {\n            final String controlValue = xformsControl.getValue(pipelineContext);\n            final boolean selected = (controlValue != null) && XFormsItemUtils.isSelected(isMany, controlValue, optionValue);\n            if (selected)\n                optionAttributes.addAttribute(\"\", \"selected\", \"selected\", ContentHandlerHelper.CDATA, \"selected\");\n        }\n\n        // xhtml:option\n        contentHandler.startElement(XMLConstants.XHTML_NAMESPACE_URI, \"option\", optionQName, optionAttributes);\n        final String label = item.getLabel();\n        if (label != null)\n            contentHandler.characters(label.toCharArray(), 0, label.length());\n        contentHandler.endElement(XMLConstants.XHTML_NAMESPACE_URI, \"option\", optionQName);\n    }","commit_id":"14a7bfa3c9333472d623f9f27132c0cdad45a934","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private void outputJSONTreeInfo(XFormsValueControl xformsControl, List items, boolean many, ContentHandler contentHandler) throws SAXException {\n        if (xformsControl != null && !handlerContext.isTemplate()) {\n            // Produce a JSON fragment with hierachical information\n            final String result = XFormsItemUtils.getJSONTreeInfo(items, xformsControl.getValue(pipelineContext), many, handlerContext.getLocationData());\n            contentHandler.characters(result.toCharArray(), 0, result.length());\n        } else {\n            // Don't produce any content when generating a template\n        }\n    }","id":96923,"modified_method":"private void outputJSONTreeInfo(XFormsValueControl xformsControl, List items, boolean many, ContentHandler contentHandler) throws SAXException {\n        if (xformsControl != null && !handlerContext.isTemplate()) {\n            // Produce a JSON fragment with hierachical information\n            final String result = XFormsItemUtils.getJSONTreeInfo(pipelineContext, items, xformsControl.getValue(pipelineContext), many, handlerContext.getLocationData());\n            contentHandler.characters(result.toCharArray(), 0, result.length());\n        } else {\n            // Don't produce any content when generating a template\n        }\n    }","commit_id":"14a7bfa3c9333472d623f9f27132c0cdad45a934","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"protected void evaluateExternalValue(PipelineContext pipelineContext) {\n\n        final String internalValue = getValue(pipelineContext);\n        final String updatedValue;\n        if (internalValue == null) {\n            updatedValue = null;\n        } else {\n\n            // Current values in the instance\n            final Map instanceValues = tokenize(internalValue);\n\n            // Values in the itemset\n            final List items = getItemset(pipelineContext, true);\n\n            // Actual value to return is the intersection of values in the instance and values in the itemset\n            final FastStringBuffer sb = new FastStringBuffer(internalValue.length());\n            int index = 0;\n            for (Iterator i = items.iterator(); i.hasNext(); index++) {\n                final XFormsItemUtils.Item currentItem = (XFormsItemUtils.Item) i.next();\n                final String currentValue = currentItem.getValue();\n                if (instanceValues.get(currentValue) != null) {\n                    if (index > 0)\n                        sb.append(' ');\n                    sb.append(currentValue);\n                }\n            }\n            updatedValue = sb.toString();\n        }\n        setExternalValue(updatedValue);\n    }","id":96924,"modified_method":"protected void evaluateExternalValue(PipelineContext pipelineContext) {\n\n        final String internalValue = getValue(pipelineContext);\n        final String updatedValue;\n        if (internalValue == null) {\n            updatedValue = null;\n        } else {\n\n            // Current values in the instance\n            final Map instanceValues = tokenize(pipelineContext, internalValue, false);\n\n            // Values in the itemset\n            final List items = getItemset(pipelineContext, true);\n\n            // Actual value to return is the intersection of values in the instance and values in the itemset\n            final FastStringBuffer sb = new FastStringBuffer(internalValue.length());\n            int index = 0;\n            for (Iterator i = items.iterator(); i.hasNext(); index++) {\n                final XFormsItemUtils.Item currentItem = (XFormsItemUtils.Item) i.next();\n                final String currentValue = currentItem.getValue();\n                if (instanceValues.get(currentValue) != null) {\n                    if (index > 0)\n                        sb.append(' ');\n\n                    sb.append(currentItem.getExternalValue(pipelineContext));\n                }\n            }\n            updatedValue = sb.toString();\n        }\n        setExternalValue(updatedValue);\n    }","commit_id":"14a7bfa3c9333472d623f9f27132c0cdad45a934","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n     * Set an external value. This consists of a list of space-separated tokens.\n     *\n     * o Itemset values which are in the list of tokens are merged with the bound control's value.\n     * o Itemset values which are not in the list of tokens are removed from the bound control's value.\n     *\n     * @param pipelineContext   current pipeline context\n     * @param value             list of tokens from the UI\n     * @param type              should probably be null\n     */\n    public void storeExternalValue(PipelineContext pipelineContext, String value, String type) {\n\n        final String controlValue = getValue(pipelineContext);\n\n        // Actual new value to store\n        final String newValue;\n        {\n            // All items\n            final List items = getItemset(pipelineContext, true);\n\n            // Current values in the instance\n            final Map instanceValues = tokenize(controlValue);\n\n            // Values currently selected in the UI\n            final Map uiValues = tokenize(value);\n\n            // Iterate over all the items\n            final List selectEvents = new ArrayList();\n            for (Iterator i = items.iterator(); i.hasNext();) {\n                final XFormsItemUtils.Item currentItem = (XFormsItemUtils.Item) i.next();\n                final String currentItemValue = currentItem.getValue();\n                final boolean itemWasSelected = instanceValues.get(currentItemValue) != null;\n                final boolean itemIsSelected;\n                if (uiValues.get(currentItemValue) != null) {\n                    // Value is currently selected in the UI\n                    instanceValues.put(currentItemValue, \"\");\n                    itemIsSelected = true;\n                } else {\n                    // Value is currently NOT selected in the UI\n                    instanceValues.remove(currentItemValue);\n                    itemIsSelected = false;\n                }\n\n                // Handle xforms-select / xforms-deselect\n                // TODO: Dispatch to itemset or item once we support doing that\n                if (!itemWasSelected && itemIsSelected)\n                    selectEvents.add(new XFormsSelectEvent(this, currentItemValue));\n                else if (itemWasSelected && !itemIsSelected)\n                    containingDocument.dispatchEvent(pipelineContext, new XFormsDeselectEvent(this, currentItemValue));\n            }\n            if (selectEvents.size() > 0) {\n                // Select events must be sent after all xforms-deselect events\n                for (Iterator i = selectEvents.iterator(); i.hasNext();) {\n                    containingDocument.dispatchEvent(pipelineContext, (XFormsEvent) i.next());\n                }\n            }\n\n            // Create resulting string\n            final FastStringBuffer sb = new FastStringBuffer(controlValue.length() + value.length() * 2);\n            int index = 0;\n            for (Iterator i = instanceValues.keySet().iterator(); i.hasNext(); index++) {\n                final String currentKey = (String) i.next();\n                if (index > 0)\n                    sb.append(' ');\n                sb.append(currentKey);\n            }\n            newValue = sb.toString();\n        }\n\n        super.storeExternalValue(pipelineContext, newValue, type);\n    }","id":96925,"modified_method":"/**\n     * Set an external value. This consists of a list of space-separated tokens.\n     *\n     * o Itemset values which are in the list of tokens are merged with the bound control's value.\n     * o Itemset values which are not in the list of tokens are removed from the bound control's value.\n     *\n     * @param pipelineContext   current pipeline context\n     * @param value             list of tokens from the UI\n     * @param type              should probably be null\n     */\n    public void storeExternalValue(PipelineContext pipelineContext, String value, String type) {\n\n        final String controlValue = getValue(pipelineContext);\n\n        // Actual new value to store\n        final String newValue;\n        {\n            // All items\n            final List items = getItemset(pipelineContext, true);\n\n            // Current values in the instance\n            final Map instanceValues = tokenize(pipelineContext, controlValue, false);\n\n            // Values currently selected in the UI\n            final Map uiValues = tokenize(pipelineContext, value, true);\n\n            // Iterate over all the items\n            final List selectEvents = new ArrayList();\n            final List deselectEvents = new ArrayList();\n            for (Iterator i = items.iterator(); i.hasNext();) {\n                final XFormsItemUtils.Item currentItem = (XFormsItemUtils.Item) i.next();\n                final String currentItemValue = currentItem.getValue();\n                final boolean itemWasSelected = instanceValues.get(currentItemValue) != null;\n                final boolean itemIsSelected;\n                if (uiValues.get(currentItemValue) != null) {\n                    // Value is currently selected in the UI\n                    instanceValues.put(currentItemValue, \"\");\n                    itemIsSelected = true;\n                } else {\n                    // Value is currently NOT selected in the UI\n                    instanceValues.remove(currentItemValue);\n                    itemIsSelected = false;\n                }\n\n                // Handle xforms-select / xforms-deselect\n                // TODO: Dispatch to itemset or item once we support doing that\n                if (!itemWasSelected && itemIsSelected) {\n                    selectEvents.add(new XFormsSelectEvent(this, currentItemValue));\n                } else if (itemWasSelected && !itemIsSelected) {\n                    deselectEvents.add(new XFormsDeselectEvent(this, currentItemValue));\n                }\n\n            }\n            // Dispatch xforms-deselect events\n            if (deselectEvents.size() > 0) {\n                for (Iterator i = deselectEvents.iterator(); i.hasNext();) {\n                    containingDocument.dispatchEvent(pipelineContext, (XFormsEvent) i.next());\n                }\n            }\n            // Select events must be sent after all xforms-deselect events\n            final boolean hasSelectedItem = selectEvents.size() > 0;\n            if (hasSelectedItem) {\n                for (Iterator i = selectEvents.iterator(); i.hasNext();) {\n                    containingDocument.dispatchEvent(pipelineContext, (XFormsEvent) i.next());\n                }\n            }\n\n            // Create resulting string\n            final FastStringBuffer sb = new FastStringBuffer(controlValue.length() + value.length() * 2);\n            int index = 0;\n            for (Iterator i = instanceValues.keySet().iterator(); i.hasNext(); index++) {\n                final String currentKey = (String) i.next();\n                if (index > 0)\n                    sb.append(' ');\n                sb.append(currentKey);\n            }\n            newValue = sb.toString();\n        }\n\n        // \"newValue\" is created so as to ensure that if a value is NOT in the itemset AND we are a closed selection\n        // then we do NOT store the value in instance.\n        // NOTE: At the moment we don't support open selection here anyway\n        super.storeExternalValue(pipelineContext, newValue, type);\n    }","commit_id":"14a7bfa3c9333472d623f9f27132c0cdad45a934","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private static void outputItemsets(ContentHandlerHelper ch, Map itemsetIdToItemsetInfoMap) {\n        if (itemsetIdToItemsetInfoMap != null && itemsetIdToItemsetInfoMap.size() > 0) {\n            // There are some xforms:itemset controls\n\n            ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"itemsets\");\n            for (Iterator i = itemsetIdToItemsetInfoMap.entrySet().iterator(); i.hasNext();) {\n                final Map.Entry currentEntry = (Map.Entry) i.next();\n                final String itemsetId = (String) currentEntry.getKey();\n                final List items = (List) currentEntry.getValue();\n\n                ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"itemset\", new String[]{\"id\", itemsetId});\n                final String result = XFormsItemUtils.getJSONTreeInfo(items, null);// TODO: pass LocationData\n                if (result.length() > 0)\n                    ch.text(result);\n                ch.endElement();\n            }\n            ch.endElement();\n        }\n    }","id":96926,"modified_method":"private static void outputItemsets(PipelineContext pipelineContext, ContentHandlerHelper ch, Map itemsetIdToItemsetInfoMap) {\n        if (itemsetIdToItemsetInfoMap != null && itemsetIdToItemsetInfoMap.size() > 0) {\n            // There are some xforms:itemset controls\n\n            ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"itemsets\");\n            for (Iterator i = itemsetIdToItemsetInfoMap.entrySet().iterator(); i.hasNext();) {\n                final Map.Entry currentEntry = (Map.Entry) i.next();\n                final String itemsetId = (String) currentEntry.getKey();\n                final List items = (List) currentEntry.getValue();\n\n                ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"itemset\", new String[]{\"id\", itemsetId});\n                final String result = XFormsItemUtils.getJSONTreeInfo(pipelineContext, items, null);// TODO: pass LocationData\n                if (result.length() > 0)\n                    ch.text(result);\n                ch.endElement();\n            }\n            ch.endElement();\n        }\n    }","commit_id":"14a7bfa3c9333472d623f9f27132c0cdad45a934","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"public static void outputResponse(XFormsContainingDocument containingDocument, Map valueChangeControlIds,\n                                PipelineContext pipelineContext, ContentHandler contentHandler, XFormsStateManager.XFormsDecodedClientState xformsDecodedClientState,\n                                XFormsStateManager.XFormsDecodedClientState xformsDecodedInitialClientState,\n                                boolean allEvents, boolean isOfflineEvents, boolean testOutputStaticState, boolean testOutputAllActions) {\n\n        final ExternalContext externalContext = (ExternalContext) pipelineContext.getAttribute(PipelineContext.EXTERNAL_CONTEXT);\n        final XFormsControls xformsControls = containingDocument.getXFormsControls();\n\n        try {\n            final ContentHandlerHelper ch = new ContentHandlerHelper(contentHandler);\n            ch.startDocument();\n            contentHandler.startPrefixMapping(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI);\n            ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"event-response\");\n\n            // Compute automatic events\n            boolean requireClientSubmission = false;\n            String serverEvents = null;\n            {\n                final XFormsModelSubmission activeSubmission = containingDocument.getClientActiveSubmission();\n                final List loads = containingDocument.getLoadsToRun();\n                if (activeSubmission != null || (loads != null && loads.size() > 0)) {\n                    final Document eventsDocument = Dom4jUtils.createDocument();\n                    final Element eventsElement = eventsDocument.addElement(XFormsConstants.XXFORMS_EVENTS_QNAME);\n\n                    // Check for xxforms-submit event\n                    {\n                        if (activeSubmission != null) {\n                            final Element eventElement = eventsElement.addElement(XFormsConstants.XXFORMS_EVENT_QNAME);\n                            eventElement.addAttribute(\"source-control-id\", activeSubmission.getEffectiveId());\n                            eventElement.addAttribute(\"name\", XFormsEvents.XXFORMS_SUBMIT);\n                            requireClientSubmission = true;\n                        }\n                    }\n                    // Check for xxforms-load event\n                    {\n                        if (loads != null && loads.size() > 0) {\n                            for (Iterator i = loads.iterator(); i.hasNext();) {\n                                final XFormsContainingDocument.Load load = (XFormsContainingDocument.Load) i.next();\n\n                                if (load.isReplace() && load.isPortletLoad() && !NetUtils.urlHasProtocol(load.getResource()) && !\"resource\".equals(load.getUrlType())) {\n                                    // We need to submit the event so that the portlet can load the new path\n                                    final Element eventElement = eventsElement.addElement(XFormsConstants.XXFORMS_EVENT_QNAME);\n                                    eventElement.addAttribute(\"source-control-id\", XFormsContainingDocument.CONTAINING_DOCUMENT_PSEUDO_ID);\n                                    eventElement.addAttribute(\"resource\", load.getResource());\n                                    // NOTE: don't care about the target for portlets\n                                    eventElement.addAttribute(\"name\", XFormsEvents.XXFORMS_LOAD);\n                                    requireClientSubmission = true;\n\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    // Encode events so that the client cannot send back arbitrary events\n                    if (requireClientSubmission)\n                        serverEvents = XFormsUtils.encodeXML(pipelineContext, eventsDocument, false);\n                }\n            }\n\n            // Rebuild and evaluate controls if needed, before we compute the dynamic state\n            // NOTE: This is in case rebuilding controls modifies repeat indexes. We want the indexes to be included in the state further down.that\n            if (allEvents || xformsControls.isDirtySinceLastRequest() || testOutputAllActions) {// TODO: Why do we rebuild anyway in case of allEvents?\n                xformsControls.rebuildCurrentControlsStateIfNeeded(pipelineContext);\n                xformsControls.evaluateAllControlsIfNeeded(pipelineContext);\n            }\n\n            // Get encoded state to send to the client (unless computing the list of offline events)\n            if (!isOfflineEvents) {\n                // State ready to send to the client\n                final XFormsState encodedClientState;\n                // Whether the incoming state handling mode is different from the outgoing state handling mode\n                final boolean isMustChangeStateHandling;\n                if (containingDocument.goingOffline()) {\n                    // We force client state if we are going offline, and do not cache as it is likely that the result won't be used soon\n                    encodedClientState = XFormsStateManager.getEncryptedSerializedClientState(containingDocument, pipelineContext, xformsDecodedClientState);\n                    // Outgoing mode is always \"client\", so in effect we are changing when the regular mode is not client\n                    isMustChangeStateHandling = !xformsDecodedClientState.isClientStateHandling();\n                } else {\n                    // This will also cache the containing document if needed\n                    encodedClientState = XFormsStateManager.getEncodedClientStateDoCache(containingDocument, pipelineContext, xformsDecodedClientState, allEvents);\n                    isMustChangeStateHandling = xformsDecodedClientState.isClientStateHandling() != XFormsProperties.isClientStateHandling(containingDocument);\n                }\n\n                // Output static state when changing state handling mode, or when testing\n                if (isMustChangeStateHandling || testOutputStaticState) {\n                    ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"static-state\", new String[] { \"container-type\", externalContext.getRequest().getContainerType() });\n                    // NOTE: Should output static state the same way as XFormsToXHTML does, but it's just for tests for for now it's ok\n                    ch.text(encodedClientState.getStaticState());\n                    ch.endElement();\n                }\n\n                // Output dynamic state\n                {\n                    ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"dynamic-state\");\n                    ch.text(encodedClientState.getDynamicState());\n                    ch.endElement();\n                }\n            }\n\n            // Output action\n            {\n                final XFormsContainingDocument initialContainingDocument;\n                if (xformsDecodedInitialClientState == null) {\n                    initialContainingDocument = null;\n                } else {\n                    initialContainingDocument = new XFormsContainingDocument(pipelineContext, xformsDecodedInitialClientState.getXFormsState());\n                }\n\n                ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"action\");\n\n                // Output new controls values and associated information\n                final Map itemsetsFull1 = new HashMap();\n                final Map itemsetsFull2 = new HashMap();\n                {\n                    ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"control-values\");\n\n                    if (!allEvents) {\n                        // Common case\n\n                        // Only output changes if needed\n                        if (xformsControls.isDirtySinceLastRequest() || testOutputAllActions) {\n                            final XFormsControls.ControlsState currentControlsState = xformsControls.getCurrentControlsState();\n                            diffControls(pipelineContext, ch, containingDocument, testOutputAllActions ? null : xformsControls.getInitialControlsState().getChildren(), currentControlsState.getChildren(), itemsetsFull1, itemsetsFull2, valueChangeControlIds);\n                        }\n                    } else {\n                        // Reload / back case: diff between current state and initial state as obtained from initial dynamic state\n                        final XFormsControls.ControlsState currentControlsState = xformsControls.getCurrentControlsState();\n                        final XFormsControls.ControlsState initialControlsState = initialContainingDocument.getXFormsControls().getCurrentControlsState();\n                        diffControls(pipelineContext, ch, containingDocument, initialControlsState.getChildren(), currentControlsState.getChildren(), itemsetsFull1, itemsetsFull2, null);\n                    }\n\n                    ch.endElement();\n                }\n\n                // Output divs information\n                {\n                    if (!allEvents) {\n                        if (containingDocument.isDirtySinceLastRequest()) {\n                            // Only diff if we are dirty\n                            diffDivs(ch, xformsControls, testOutputAllActions ? null : xformsControls.getInitialSwitchState(), xformsControls.getCurrentSwitchState(), xformsControls.getInitialDialogState(), xformsControls.getCurrentDialogState());\n                        }\n                    } else {\n                        diffDivs(ch, xformsControls, initialContainingDocument.getXFormsControls().getCurrentSwitchState(), xformsControls.getCurrentSwitchState(),\n                                initialContainingDocument.getXFormsControls().getCurrentDialogState(), xformsControls.getCurrentDialogState());\n                    }\n                }\n\n                // Output repeat indexes information\n                {\n                    // Output index updates\n                    // TODO: move index state out of ControlsState + handle diffs\n                    if (!allEvents) {\n                        if (!testOutputAllActions) {\n                            if (xformsControls.isDirtySinceLastRequest()) {\n                                // Only diff if controls are dirty\n                                diffIndexState(ch, xformsControls.getInitialControlsState().getRepeatIdToIndex(), xformsControls.getCurrentControlsState().getRepeatIdToIndex());\n                            }\n                        } else {\n                            testOutputInitialRepeatInfo(ch, xformsControls.getCurrentControlsState());\n                        }\n                    } else {\n                        final XFormsControls.ControlsState currentControlsState = xformsControls.getCurrentControlsState();\n                        final XFormsControls.ControlsState initialControlsState = initialContainingDocument.getXFormsControls().getCurrentControlsState();\n                        diffIndexState(ch, initialControlsState.getRepeatIdToIndex(), currentControlsState.getRepeatIdToIndex());\n                    }\n                }\n\n                // Output itemset information\n                if (allEvents || xformsControls.isDirtySinceLastRequest()) {\n                    // Diff itemset information\n                    final Map itemsetUpdate = diffItemsets(itemsetsFull1, itemsetsFull2);\n                    // TODO: handle allEvents case\n                    outputItemsets(ch, itemsetUpdate);\n                }\n\n                // Output automatic events\n                if (serverEvents != null) {\n                    ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"server-events\");\n                    ch.text(serverEvents);\n                    ch.endElement();\n                }\n\n                // Check if we want to require the client to perform a form submission\n                if (requireClientSubmission) {\n                    outputSubmissionInfo(externalContext, ch, containingDocument.getClientActiveSubmission());\n                }\n\n                // TODO: the following should be correctly ordered in the order they were requested\n                // Output messages to display\n                {\n                    final List messages = containingDocument.getMessagesToRun();\n                    if (messages != null) {\n                        outputMessagesInfo(ch, messages);\n                    }\n                }\n\n                // Output loads\n                {\n                    final List loads = containingDocument.getLoadsToRun();\n                    if (loads != null) {\n                        outputLoadsInfo(ch, loads);\n                    }\n                }\n\n                // Output scripts\n                {\n                    final List scripts = containingDocument.getScriptsToRun();\n                    if (scripts != null) {\n                        outputScriptsInfo(ch, scripts);\n                    }\n                }\n\n                // Output focus instruction\n                {\n                    final String focusEffectiveControlId = containingDocument.getClientFocusEffectiveControlId();\n                    if (focusEffectiveControlId != null) {\n                        outputFocusInfo(ch, focusEffectiveControlId);\n                    }\n                }\n\n                // Output help instruction\n                {\n                    final String helpEffectiveControlId = containingDocument.getClientHelpEffectiveControlId();\n                    if (helpEffectiveControlId != null) {\n                        outputHelpInfo(ch, helpEffectiveControlId);\n                    }\n                }\n\n                // Output go offline instruction (unless computing the list of offline events)\n                {\n                    if (containingDocument.goingOffline() && !isOfflineEvents) {\n                        ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"offline\");\n\n                        // We send all the changes between the initial state and the time the form go offline, so when\n                        // reloading the page the client can apply those changes when the page is reloaded from the\n                        // client-side database.\n\n                        final StringWriter writer = new StringWriter();\n                        final TransformerHandler identity = TransformerUtils.getIdentityTransformerHandler();\n                        identity.getTransformer().setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");// no XML decl.\n                        identity.setResult(new StreamResult(writer));\n\n                        // Output response into writer. We ask for all events, and passing a flag telling that we are\n                        // processing offline events so as to avoid recursion\n                        outputResponse(containingDocument, valueChangeControlIds, pipelineContext, identity, xformsDecodedClientState, xformsDecodedInitialClientState, true, true, false, false);\n\n                        // List of events needed to update the page from the time the page was initially sent to the\n                        // client until right before sending the xxforms:offline event.\n                        ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"events\");\n                        ch.text(writer.toString());\n                        ch.endElement();\n\n                        // List of offline bind mappings. This allows the client to perform simple handling of\n                        // validation, relevance, readonly, and required for xforms:bind[@xxforms:offline = 'true'].\n                        ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"mappings\");\n                        final String offlineBindMappings = XFormsModelBinds.getOfflineBindMappings(containingDocument);\n                        ch.text(offlineBindMappings);\n                        ch.endElement();\n\n                        ch.endElement();\n                    }\n                }\n\n                ch.endElement();\n            }\n\n            ch.endElement();\n            contentHandler.endPrefixMapping(\"xxf\");\n            ch.endDocument();\n        } catch (SAXException e) {\n            throw new OXFException(e);\n        }\n    }","id":96927,"modified_method":"public static void outputResponse(XFormsContainingDocument containingDocument, Map valueChangeControlIds,\n                                PipelineContext pipelineContext, ContentHandler contentHandler, XFormsStateManager.XFormsDecodedClientState xformsDecodedClientState,\n                                XFormsStateManager.XFormsDecodedClientState xformsDecodedInitialClientState,\n                                boolean allEvents, boolean isOfflineEvents, boolean testOutputStaticState, boolean testOutputAllActions) {\n\n        final ExternalContext externalContext = (ExternalContext) pipelineContext.getAttribute(PipelineContext.EXTERNAL_CONTEXT);\n        final XFormsControls xformsControls = containingDocument.getXFormsControls();\n\n        try {\n            final ContentHandlerHelper ch = new ContentHandlerHelper(contentHandler);\n            ch.startDocument();\n            contentHandler.startPrefixMapping(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI);\n            ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"event-response\");\n\n            // Compute automatic events\n            boolean requireClientSubmission = false;\n            String serverEvents = null;\n            {\n                final XFormsModelSubmission activeSubmission = containingDocument.getClientActiveSubmission();\n                final List loads = containingDocument.getLoadsToRun();\n                if (activeSubmission != null || (loads != null && loads.size() > 0)) {\n                    final Document eventsDocument = Dom4jUtils.createDocument();\n                    final Element eventsElement = eventsDocument.addElement(XFormsConstants.XXFORMS_EVENTS_QNAME);\n\n                    // Check for xxforms-submit event\n                    {\n                        if (activeSubmission != null) {\n                            final Element eventElement = eventsElement.addElement(XFormsConstants.XXFORMS_EVENT_QNAME);\n                            eventElement.addAttribute(\"source-control-id\", activeSubmission.getEffectiveId());\n                            eventElement.addAttribute(\"name\", XFormsEvents.XXFORMS_SUBMIT);\n                            requireClientSubmission = true;\n                        }\n                    }\n                    // Check for xxforms-load event\n                    {\n                        if (loads != null && loads.size() > 0) {\n                            for (Iterator i = loads.iterator(); i.hasNext();) {\n                                final XFormsContainingDocument.Load load = (XFormsContainingDocument.Load) i.next();\n\n                                if (load.isReplace() && load.isPortletLoad() && !NetUtils.urlHasProtocol(load.getResource()) && !\"resource\".equals(load.getUrlType())) {\n                                    // We need to submit the event so that the portlet can load the new path\n                                    final Element eventElement = eventsElement.addElement(XFormsConstants.XXFORMS_EVENT_QNAME);\n                                    eventElement.addAttribute(\"source-control-id\", XFormsContainingDocument.CONTAINING_DOCUMENT_PSEUDO_ID);\n                                    eventElement.addAttribute(\"resource\", load.getResource());\n                                    // NOTE: don't care about the target for portlets\n                                    eventElement.addAttribute(\"name\", XFormsEvents.XXFORMS_LOAD);\n                                    requireClientSubmission = true;\n\n                                    break;\n                                }\n                            }\n                        }\n                    }\n                    // Encode events so that the client cannot send back arbitrary events\n                    if (requireClientSubmission)\n                        serverEvents = XFormsUtils.encodeXML(pipelineContext, eventsDocument, false);\n                }\n            }\n\n            // Rebuild and evaluate controls if needed, before we compute the dynamic state\n            // NOTE: This is in case rebuilding controls modifies repeat indexes. We want the indexes to be included in the state further down.that\n            if (allEvents || xformsControls.isDirtySinceLastRequest() || testOutputAllActions) {// TODO: Why do we rebuild anyway in case of allEvents?\n                xformsControls.rebuildCurrentControlsStateIfNeeded(pipelineContext);\n                xformsControls.evaluateAllControlsIfNeeded(pipelineContext);\n            }\n\n            // Get encoded state to send to the client (unless computing the list of offline events)\n            if (!isOfflineEvents) {\n                // State ready to send to the client\n                final XFormsState encodedClientState;\n                // Whether the incoming state handling mode is different from the outgoing state handling mode\n                final boolean isMustChangeStateHandling;\n                if (containingDocument.goingOffline()) {\n                    // We force client state if we are going offline, and do not cache as it is likely that the result won't be used soon\n                    encodedClientState = XFormsStateManager.getEncryptedSerializedClientState(containingDocument, pipelineContext, xformsDecodedClientState);\n                    // Outgoing mode is always \"client\", so in effect we are changing when the regular mode is not client\n                    isMustChangeStateHandling = !xformsDecodedClientState.isClientStateHandling();\n                } else {\n                    // This will also cache the containing document if needed\n                    encodedClientState = XFormsStateManager.getEncodedClientStateDoCache(containingDocument, pipelineContext, xformsDecodedClientState, allEvents);\n                    isMustChangeStateHandling = xformsDecodedClientState.isClientStateHandling() != XFormsProperties.isClientStateHandling(containingDocument);\n                }\n\n                // Output static state when changing state handling mode, or when testing\n                if (isMustChangeStateHandling || testOutputStaticState) {\n                    ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"static-state\", new String[] { \"container-type\", externalContext.getRequest().getContainerType() });\n                    // NOTE: Should output static state the same way as XFormsToXHTML does, but it's just for tests for for now it's ok\n                    ch.text(encodedClientState.getStaticState());\n                    ch.endElement();\n                }\n\n                // Output dynamic state\n                {\n                    ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"dynamic-state\");\n                    ch.text(encodedClientState.getDynamicState());\n                    ch.endElement();\n                }\n            }\n\n            // Output action\n            {\n                final XFormsContainingDocument initialContainingDocument;\n                if (xformsDecodedInitialClientState == null) {\n                    initialContainingDocument = null;\n                } else {\n                    initialContainingDocument = new XFormsContainingDocument(pipelineContext, xformsDecodedInitialClientState.getXFormsState());\n                }\n\n                ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"action\");\n\n                // Output new controls values and associated information\n                final Map itemsetsFull1 = new HashMap();\n                final Map itemsetsFull2 = new HashMap();\n                {\n                    ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"control-values\");\n\n                    if (!allEvents) {\n                        // Common case\n\n                        // Only output changes if needed\n                        if (xformsControls.isDirtySinceLastRequest() || testOutputAllActions) {\n                            final XFormsControls.ControlsState currentControlsState = xformsControls.getCurrentControlsState();\n                            diffControls(pipelineContext, ch, containingDocument, testOutputAllActions ? null : xformsControls.getInitialControlsState().getChildren(), currentControlsState.getChildren(), itemsetsFull1, itemsetsFull2, valueChangeControlIds);\n                        }\n                    } else {\n                        // Reload / back case: diff between current state and initial state as obtained from initial dynamic state\n                        final XFormsControls.ControlsState currentControlsState = xformsControls.getCurrentControlsState();\n                        final XFormsControls.ControlsState initialControlsState = initialContainingDocument.getXFormsControls().getCurrentControlsState();\n                        diffControls(pipelineContext, ch, containingDocument, initialControlsState.getChildren(), currentControlsState.getChildren(), itemsetsFull1, itemsetsFull2, null);\n                    }\n\n                    ch.endElement();\n                }\n\n                // Output divs information\n                {\n                    if (!allEvents) {\n                        if (containingDocument.isDirtySinceLastRequest()) {\n                            // Only diff if we are dirty\n                            diffDivs(ch, xformsControls, testOutputAllActions ? null : xformsControls.getInitialSwitchState(), xformsControls.getCurrentSwitchState(), xformsControls.getInitialDialogState(), xformsControls.getCurrentDialogState());\n                        }\n                    } else {\n                        diffDivs(ch, xformsControls, initialContainingDocument.getXFormsControls().getCurrentSwitchState(), xformsControls.getCurrentSwitchState(),\n                                initialContainingDocument.getXFormsControls().getCurrentDialogState(), xformsControls.getCurrentDialogState());\n                    }\n                }\n\n                // Output repeat indexes information\n                {\n                    // Output index updates\n                    // TODO: move index state out of ControlsState + handle diffs\n                    if (!allEvents) {\n                        if (!testOutputAllActions) {\n                            if (xformsControls.isDirtySinceLastRequest()) {\n                                // Only diff if controls are dirty\n                                diffIndexState(ch, xformsControls.getInitialControlsState().getRepeatIdToIndex(), xformsControls.getCurrentControlsState().getRepeatIdToIndex());\n                            }\n                        } else {\n                            testOutputInitialRepeatInfo(ch, xformsControls.getCurrentControlsState());\n                        }\n                    } else {\n                        final XFormsControls.ControlsState currentControlsState = xformsControls.getCurrentControlsState();\n                        final XFormsControls.ControlsState initialControlsState = initialContainingDocument.getXFormsControls().getCurrentControlsState();\n                        diffIndexState(ch, initialControlsState.getRepeatIdToIndex(), currentControlsState.getRepeatIdToIndex());\n                    }\n                }\n\n                // Output itemset information\n                if (allEvents || xformsControls.isDirtySinceLastRequest()) {\n                    // Diff itemset information\n                    final Map itemsetUpdate = diffItemsets(itemsetsFull1, itemsetsFull2);\n                    // TODO: handle allEvents case\n                    outputItemsets(pipelineContext, ch, itemsetUpdate);\n                }\n\n                // Output automatic events\n                if (serverEvents != null) {\n                    ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"server-events\");\n                    ch.text(serverEvents);\n                    ch.endElement();\n                }\n\n                // Check if we want to require the client to perform a form submission\n                if (requireClientSubmission) {\n                    outputSubmissionInfo(externalContext, ch, containingDocument.getClientActiveSubmission());\n                }\n\n                // TODO: the following should be correctly ordered in the order they were requested\n                // Output messages to display\n                {\n                    final List messages = containingDocument.getMessagesToRun();\n                    if (messages != null) {\n                        outputMessagesInfo(ch, messages);\n                    }\n                }\n\n                // Output loads\n                {\n                    final List loads = containingDocument.getLoadsToRun();\n                    if (loads != null) {\n                        outputLoadsInfo(ch, loads);\n                    }\n                }\n\n                // Output scripts\n                {\n                    final List scripts = containingDocument.getScriptsToRun();\n                    if (scripts != null) {\n                        outputScriptsInfo(ch, scripts);\n                    }\n                }\n\n                // Output focus instruction\n                {\n                    final String focusEffectiveControlId = containingDocument.getClientFocusEffectiveControlId();\n                    if (focusEffectiveControlId != null) {\n                        outputFocusInfo(ch, focusEffectiveControlId);\n                    }\n                }\n\n                // Output help instruction\n                {\n                    final String helpEffectiveControlId = containingDocument.getClientHelpEffectiveControlId();\n                    if (helpEffectiveControlId != null) {\n                        outputHelpInfo(ch, helpEffectiveControlId);\n                    }\n                }\n\n                // Output go offline instruction (unless computing the list of offline events)\n                {\n                    if (containingDocument.goingOffline() && !isOfflineEvents) {\n                        ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"offline\");\n\n                        // We send all the changes between the initial state and the time the form go offline, so when\n                        // reloading the page the client can apply those changes when the page is reloaded from the\n                        // client-side database.\n\n                        final StringWriter writer = new StringWriter();\n                        final TransformerHandler identity = TransformerUtils.getIdentityTransformerHandler();\n                        identity.getTransformer().setOutputProperty(OutputKeys.OMIT_XML_DECLARATION, \"yes\");// no XML decl.\n                        identity.setResult(new StreamResult(writer));\n\n                        // Output response into writer. We ask for all events, and passing a flag telling that we are\n                        // processing offline events so as to avoid recursion\n                        outputResponse(containingDocument, valueChangeControlIds, pipelineContext, identity, xformsDecodedClientState, xformsDecodedInitialClientState, true, true, false, false);\n\n                        // List of events needed to update the page from the time the page was initially sent to the\n                        // client until right before sending the xxforms:offline event.\n                        ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"events\");\n                        ch.text(writer.toString());\n                        ch.endElement();\n\n                        // List of offline bind mappings. This allows the client to perform simple handling of\n                        // validation, relevance, readonly, and required for xforms:bind[@xxforms:offline = 'true'].\n                        ch.startElement(\"xxf\", XFormsConstants.XXFORMS_NAMESPACE_URI, \"mappings\");\n                        final String offlineBindMappings = XFormsModelBinds.getOfflineBindMappings(containingDocument);\n                        ch.text(offlineBindMappings);\n                        ch.endElement();\n\n                        ch.endElement();\n                    }\n                }\n\n                ch.endElement();\n            }\n\n            ch.endElement();\n            contentHandler.endPrefixMapping(\"xxf\");\n            ch.endDocument();\n        } catch (SAXException e) {\n            throw new OXFException(e);\n        }\n    }","commit_id":"14a7bfa3c9333472d623f9f27132c0cdad45a934","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"public void doRevalidate() {\n\n        // Validate only if needed, including checking the flags, because if validation state is clean, validation\n        // being idempotent, revalidating is not needed.\n        if (deferredActionContext.revalidate) {\n            final boolean mustRevalidate = ! instances.isEmpty() && (mustBindValidate || hasSchema);\n            if (mustRevalidate) {\n                if (indentedLogger.isDebugEnabled())\n                    indentedLogger.startHandleOperation(\"validation\", \"performing revalidate\", \"model id\", getEffectiveId());\n\n                // Clear schema validation state\n                // NOTE: This could possibly be moved to rebuild(), but we must be careful about the presence of a schema\n                for (final XFormsInstance instance: instances) {\n                    // Only clear instances that are impacted by xf:bind/(@ref|@nodeset), assuming we were able to figure out the dependencies\n                    // The reason is that clearing this state can take quite some time\n                    final boolean instanceMightBeSchemaValidated = hasSchema && instance.isSchemaValidation();\n                    if (instanceMightBeSchemaValidated) {\n                        DataModel.visitElementJava(instance.instanceRoot(), new DataModel.NodeVisitor() {\n                            public void visit(NodeInfo nodeInfo) {\n                                InstanceData.clearSchemaState(nodeInfo);\n                            }\n                        });\n                    }\n                }\n\n                // Run validation\n                final Set<String> invalidInstances = new LinkedHashSet<String>();\n\n                // Validate using schemas if needed\n                if (hasSchema) {\n                    // Apply schemas to all instances\n                    for (final XFormsInstance instance : instances) {\n                        // Currently we don't support validating read-only instances\n                        if (instance.isSchemaValidation()) {\n                            if (!schemaValidator.validateInstance(instance)) {\n                                // Remember that instance is invalid\n                                invalidInstances.add(instance.getEffectiveId());\n                            }\n                        }\n                    }\n                }\n\n                // Validate using binds if needed\n                if (mustBindValidate)\n                    binds.applyValidationBinds(invalidInstances);\n\n                // NOTE: It is possible, with binds and the use of xxforms:instance(), that some instances in\n                // invalidInstances do not belong to this model. Those instances won't get events with the dispatching\n                // algorithm below.\n                // TODO: Must dispatch validity changes, not validity status\n                // TODO: Must dispatch after marking revalidate = false, right?\n                for (final XFormsInstance instance: instances) {\n                    if (invalidInstances.contains(instance.getEffectiveId())) {\n                        Dispatch.dispatchEvent(new XXFormsInvalidEvent(instance));\n                    } else {\n                        Dispatch.dispatchEvent(new XXFormsValidEvent(instance));\n                    }\n                }\n\n                if (indentedLogger.isDebugEnabled())\n                    indentedLogger.endHandleOperation();\n            }\n\n            // \"Actions that directly invoke rebuild, recalculate, revalidate, or refresh always\n            // have an immediate effect, and clear the corresponding flag.\"\n            deferredActionContext.revalidate = false;\n        }\n\n        // Notify dependencies\n        containingDocument.getXPathDependencies().revalidateDone(staticModel);\n    }","id":96928,"modified_method":"public void doRevalidate() {\n\n        Set<String> invalidInstances = null;\n\n        // Validate only if needed, including checking the flags, because if validation state is clean, validation\n        // being idempotent, revalidating is not needed.\n        if (deferredActionContext.revalidate) {\n            final boolean mustRevalidate = ! instances.isEmpty() && (mustBindValidate || hasSchema);\n            if (mustRevalidate) {\n                if (indentedLogger.isDebugEnabled())\n                    indentedLogger.startHandleOperation(\"validation\", \"performing revalidate\", \"model id\", getEffectiveId());\n\n                // Clear schema validation state\n                // NOTE: This could possibly be moved to rebuild(), but we must be careful about the presence of a schema\n                for (final XFormsInstance instance: instances) {\n                    // Only clear instances that are impacted by xf:bind/(@ref|@nodeset), assuming we were able to figure out the dependencies\n                    // The reason is that clearing this state can take quite some time\n                    final boolean instanceMightBeSchemaValidated = hasSchema && instance.isSchemaValidation();\n                    if (instanceMightBeSchemaValidated) {\n                        DataModel.visitElementJava(instance.instanceRoot(), new DataModel.NodeVisitor() {\n                            public void visit(NodeInfo nodeInfo) {\n                                InstanceData.clearSchemaState(nodeInfo);\n                            }\n                        });\n                    }\n                }\n\n                // Run validation\n                invalidInstances = new LinkedHashSet<String>();\n\n                // Validate using schemas if needed\n                if (hasSchema) {\n                    // Apply schemas to all instances\n                    for (final XFormsInstance instance : instances) {\n                        // Currently we don't support validating read-only instances\n                        if (instance.isSchemaValidation()) {\n                            if (!schemaValidator.validateInstance(instance)) {\n                                // Remember that instance is invalid\n                                invalidInstances.add(instance.getEffectiveId());\n                            }\n                        }\n                    }\n                }\n\n                // Validate using binds if needed\n                if (mustBindValidate)\n                    binds.applyValidationBinds(invalidInstances);\n\n                if (indentedLogger.isDebugEnabled())\n                    indentedLogger.endHandleOperation();\n            }\n\n            // \"Actions that directly invoke rebuild, recalculate, revalidate, or refresh always\n            // have an immediate effect, and clear the corresponding flag.\"\n            deferredActionContext.revalidate = false;\n        }\n\n        // Notify dependencies\n        containingDocument.getXPathDependencies().revalidateDone(staticModel);\n\n        if (invalidInstances != null) {\n            // Gather events to dispatch, at most one per instance, and only if validity has changed\n            // NOTE: It is possible, with binds and the use of xxforms:instance(), that some instances in\n            // invalidInstances do not belong to this model. Those instances won't get events with the dispatching\n            // algorithm below.\n            List<XFormsEvent> eventsToDispatch = new ArrayList<XFormsEvent>();\n            for (final XFormsInstance instance : instances) {\n\n                final boolean previouslyValid = instance.valid();\n                final boolean currentlyValid  = ! invalidInstances.contains(instance.getEffectiveId());\n\n                if (previouslyValid != currentlyValid) {\n                    instance.valid_$eq(currentlyValid);\n                    eventsToDispatch.add(currentlyValid ? new XXFormsValidEvent(instance) : new XXFormsInvalidEvent(instance));\n                }\n            }\n\n            // Dispatch all events\n            for (final XFormsEvent event : eventsToDispatch)\n                Dispatch.dispatchEvent(event);\n        }\n    }","commit_id":"2a83b4768ed8e0026d822d76339c60a4d7090e1b","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"private void loadInitialExternalInstanceFromCacheIfNeeded(Instance instance) {\n        final String instanceResource = instance.instanceSource().get();\n        try {\n            if (instance.cache() && ! ProcessorImpl.isProcessorInputScheme(instanceResource)) {\n                // Instance 1) has cache hint and 2) is not input:*, so it can be cached\n                // NOTE: We don't allow sharing for input:* URLs as the data will likely differ per request\n\n                // TODO: This doesn't handle optimized submissions.\n\n                // NOTE: No XInclude supported to read instances with @src for now\n                final InstanceCaching caching = InstanceCaching.fromInstance(instance, resolveInstanceURL(instance), null);\n                final DocumentInfo documentInfo =\n                    XFormsServerSharedInstancesCache.findContentOrLoad(\n                            indentedLogger,\n                            instance,\n                            caching,\n                            instance.readonly(),\n                            INSTANCE_LOADER);\n\n                indexInstance(\n                    new XFormsInstance(\n                        this,\n                        instance,\n                        Option.<InstanceCaching>apply(caching),\n                        documentInfo,\n                        instance.readonly(),\n                        false));\n            } else {\n                // Instance cannot be cached\n\n                // NOTE: Optimizing with include() for servlets has limitations, in particular\n                // the proper split between servlet path and path info is not done.\n\n                // TODO: Temporary. Use XFormsModelSubmission to load instances instead\n                if (!NetUtils.urlHasProtocol(instanceResource) && containingDocument.getContainerType().equals(\"portlet\"))\n                    throw new UnsupportedOperationException(\"<xforms:instance src=\\\"\\\"> with relative path within a portlet\");\n\n                // Use full resolved resource URL\n                // o absolute URL, e.g. http://example.org/instance.xml\n                // o absolute path relative to server root, e.g. /orbeon/foo/bar/instance.xml\n                loadNonCachedExternalInstance(instance);\n            }\n        } catch (Exception e) {\n            final ValidationException validationException\n                = ValidationException.wrapException(e, new ExtendedLocationData(instance.locationData(), \"reading external instance\", instance.element()));\n            Dispatch.dispatchEvent(new XFormsLinkExceptionEvent(XFormsModel.this, instanceResource, validationException));\n        }\n    }","id":96929,"modified_method":"private void loadInitialExternalInstanceFromCacheIfNeeded(Instance instance) {\n        final String instanceResource = instance.instanceSource().get();\n        try {\n            if (instance.cache() && ! ProcessorImpl.isProcessorInputScheme(instanceResource)) {\n                // Instance 1) has cache hint and 2) is not input:*, so it can be cached\n                // NOTE: We don't allow sharing for input:* URLs as the data will likely differ per request\n\n                // TODO: This doesn't handle optimized submissions.\n\n                // NOTE: No XInclude supported to read instances with @src for now\n                final InstanceCaching caching = InstanceCaching.fromInstance(instance, resolveInstanceURL(instance), null);\n                final DocumentInfo documentInfo =\n                    XFormsServerSharedInstancesCache.findContentOrLoad(\n                            indentedLogger,\n                            instance,\n                            caching,\n                            instance.readonly(),\n                            INSTANCE_LOADER);\n\n                indexInstance(\n                    new XFormsInstance(\n                        this,\n                        instance,\n                        Option.<InstanceCaching>apply(caching),\n                        documentInfo,\n                        instance.readonly(),\n                        false,\n                        true));\n            } else {\n                // Instance cannot be cached\n\n                // NOTE: Optimizing with include() for servlets has limitations, in particular\n                // the proper split between servlet path and path info is not done.\n\n                // TODO: Temporary. Use XFormsModelSubmission to load instances instead\n                if (!NetUtils.urlHasProtocol(instanceResource) && containingDocument.getContainerType().equals(\"portlet\"))\n                    throw new UnsupportedOperationException(\"<xforms:instance src=\\\"\\\"> with relative path within a portlet\");\n\n                // Use full resolved resource URL\n                // o absolute URL, e.g. http://example.org/instance.xml\n                // o absolute path relative to server root, e.g. /orbeon/foo/bar/instance.xml\n                loadNonCachedExternalInstance(instance);\n            }\n        } catch (Exception e) {\n            final ValidationException validationException\n                = ValidationException.wrapException(e, new ExtendedLocationData(instance.locationData(), \"reading external instance\", instance.element()));\n            Dispatch.dispatchEvent(new XFormsLinkExceptionEvent(XFormsModel.this, instanceResource, validationException));\n        }\n    }","commit_id":"2a83b4768ed8e0026d822d76339c60a4d7090e1b","url":"https://github.com/orbeon/orbeon-forms"},{"original_method":"/**\n   * Checks whether anyone is using the block lock for the given block id, returning the lock to\n   * the lock pool if it is unused.\n   *\n   * @param blockId the block id for which to potentially release the block lock\n   */\n  private void releaseBlockLockIfUnused(long blockId) {\n    synchronized (mSharedMapsLock) {\n      ClientRWLock lock = mLocks.get(blockId);\n      if (lock == null) {\n        throw new RuntimeException(\"The lock for block with id \" + blockId + \" does not exist\");\n      }\n      // We check that nobody is using the lock by trying to take a write lock. If we succeed, there\n      // can't be anyone else using the lock. If we fail, the lock is in use somewhere else and it\n      // is their responsibility to clean up the lock when they are done with it.\n      Lock writeLock = lock.writeLock();\n      if (writeLock.tryLock()) {\n        writeLock.unlock();\n        mLocks.remove(blockId);\n        mLockPool.release(lock);\n      }\n    }\n  }","id":96930,"modified_method":"/**\n   * Checks whether anyone is using the block lock for the given block id, returning the lock to\n   * the lock pool if it is unused.\n   *\n   * @param blockId the block id for which to potentially release the block lock\n   */\n  private void releaseBlockLockIfUnused(long blockId) {\n    synchronized (mSharedMapsLock) {\n      ClientRWLock lock = mLocks.get(blockId);\n      if (lock == null) {\n        // Someone else probably released the block lock already.\n        return;\n      }\n      // If we were the last worker with a reference to the lock, clean it up.\n      if (lock.dropReference() == 0) {\n        mLocks.remove(blockId);\n        mLockPool.release(lock);\n      }\n    }\n  }","commit_id":"460a625001c7eacffcc127f01954654260608345","url":"https://github.com/amplab/tachyon"},{"original_method":"/**\n   * Returns the block lock for the given block id, acquiring such a lock if it doesn't exist yet.\n   *\n   * If all locks have been allocated, this method will block until one can be acquired.\n   *\n   * @param blockId the block id to get the lock for\n   * @return the block lock\n   */\n  private ClientRWLock getBlockLock(long blockId) {\n    synchronized (mSharedMapsLock) {\n      if (!mLocks.containsKey(blockId)) {\n        mLocks.put(blockId, mLockPool.acquire());\n      }\n      return mLocks.get(blockId);\n    }\n  }","id":96931,"modified_method":"/**\n   * Returns the block lock for the given block id, acquiring such a lock if it doesn't exist yet.\n   *\n   * If all locks have been allocated, this method will block until one can be acquired.\n   *\n   * @param blockId the block id to get the lock for\n   * @return the block lock\n   */\n  private ClientRWLock getBlockLock(long blockId) {\n    ClientRWLock blockLock;\n    boolean acquireNewLock;\n    synchronized (mSharedMapsLock) {\n      blockLock = mLocks.get(blockId);\n      if (blockLock != null) {\n        blockLock.addReference();\n      }\n      acquireNewLock = blockLock == null;\n    }\n    if (acquireNewLock) {\n      // Acquire the lock outside the synchronized section because #acquire might need to block.\n      blockLock = mLockPool.acquire();\n      // Note that the acquire method will increment the reference count for the acquired lock.\n      synchronized (mSharedMapsLock) {\n        if (mLocks.containsKey(blockId)) {\n          // Someone else acquired a block lock for blockId while we were acquiring one. Use theirs.\n          blockLock.dropReference();\n          mLockPool.release(blockLock);\n          blockLock = mLocks.get(blockId);\n        } else {\n          mLocks.put(blockId, blockLock);\n        }\n      }\n    }\n    return blockLock;\n  }","commit_id":"460a625001c7eacffcc127f01954654260608345","url":"https://github.com/amplab/tachyon"},{"original_method":"/** \n     * Validates an XML document et prepares it for further storage. Launches prepare and postValidate triggers.\n     * Since the process is dependant from the collection configuration, the collection acquires a write lock during the process.\n     * \n     * @param transaction\n     * @param broker\n     * @param docUri\n     * @param doValidate\n     * \n     * @return An {@link IndexInfo} with a write lock on the document. \n     * \n     * @throws EXistException\n     * @throws PermissionDeniedException\n     * @throws TriggerException\n     * @throws SAXException\n     * @throws LockException\n     */\n    private IndexInfo validateXMLResourceInternal(Txn transaction, DBBroker broker, XmldbURI docUri, CollectionConfiguration config, ValidateBlock doValidate)\n            throws EXistException, PermissionDeniedException, TriggerException, \n            SAXException, LockException, IOException {\n        //Make the necessary operations if we process a collection configuration document\n        checkConfigurationDocument(transaction, broker, docUri);\n        if (broker.isReadOnly()) throw new PermissionDeniedException(\"Database is read-only\");\n        DocumentImpl oldDoc = null;\n        boolean oldDocLocked = false;\n        try {\n            broker.getBrokerPool().getProcessMonitor().startJob(ProcessMonitor.ACTION_VALIDATE_DOC, docUri); \n            getLock().acquire(Lock.WRITE_LOCK);   \n            DocumentImpl document = new DocumentImpl(broker.getBrokerPool(), this, docUri);\n            oldDoc = documents.get(docUri.getRawCollectionPath());\n            checkPermissions(transaction, broker, oldDoc);\n            manageDocumentInformation(broker, oldDoc, document );\n            Indexer indexer = new Indexer(broker, transaction);\n            IndexInfo info = new IndexInfo(indexer, config);\n            indexer.setDocument(document, config);\n            addObserversToIndexer(broker, indexer);\n            indexer.setValidating(true);\n            // if !triggersEnabled, setupTriggers will return null anyway, so no need to check\n            info.setTrigger(\n                setupTriggers(broker, docUri, oldDoc != null, config),\n                oldDoc == null);\n            info.prepareTrigger(broker, transaction, getURI().append(docUri), oldDoc);\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Scanning document \" + getURI().append(docUri));\n            doValidate.run(info);\n            // new document is valid: remove old document\n            if (oldDoc != null) {\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"removing old document \" + oldDoc.getFileURI());\n                oldDoc.getUpdateLock().acquire(Lock.WRITE_LOCK);\n                oldDocLocked = true;\n                if (oldDoc.getResourceType() == DocumentImpl.BINARY_FILE) {\n                    //TODO : use a more elaborated method ? No triggers...\n                    broker.removeBinaryResource(transaction, (BinaryDocument) oldDoc);\n                    documents.remove(oldDoc.getFileURI().getRawCollectionPath());\n                    //This lock is released in storeXMLInternal()\n                    //TODO : check that we go until there to ensure the lock is released\n                    document.getUpdateLock().acquire(Lock.WRITE_LOCK);\n                    document.setDocId(broker.getNextResourceId(transaction, this));\n                    addDocument(transaction, broker, document);\n                } else {\n                    //TODO : use a more elaborated method ? No triggers...\n                    broker.removeXMLResource(transaction, oldDoc, false);\n                    oldDoc.copyOf(document);\n                    indexer.setDocumentObject(oldDoc);\n                    //old has become new at this point\n                    document = oldDoc;\n                    oldDocLocked = false;\t\t\n                }\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"removed old document \" + oldDoc.getFileURI());\n            } else {\n                //This lock is released in storeXMLInternal()\n                //TODO : check that we go until there to ensure the lock is released\n                document.getUpdateLock().acquire(Lock.WRITE_LOCK);\n                document.setDocId(broker.getNextResourceId(transaction, this));\n                addDocument(transaction, broker, document);\n            }\n            indexer.setValidating(false);\n            info.postValidateTrigger();\n            return info;\n        } finally {\n            if (oldDoc != null && oldDocLocked) \n                oldDoc.getUpdateLock().release(Lock.WRITE_LOCK);\n            getLock().release(Lock.WRITE_LOCK);\n            broker.getBrokerPool().getProcessMonitor().endJob();\n        }\n    }","id":96932,"modified_method":"/** \n     * Validates an XML document et prepares it for further storage. Launches prepare and postValidate triggers.\n     * Since the process is dependant from the collection configuration, the collection acquires a write lock during the process.\n     * \n     * @param transaction\n     * @param broker\n     * @param docUri\n     * @param doValidate\n     * \n     * @return An {@link IndexInfo} with a write lock on the document. \n     * \n     * @throws EXistException\n     * @throws PermissionDeniedException\n     * @throws TriggerException\n     * @throws SAXException\n     * @throws LockException\n     */\n    private IndexInfo validateXMLResourceInternal(Txn transaction, DBBroker broker, XmldbURI docUri, CollectionConfiguration config, ValidateBlock doValidate)\n            throws EXistException, PermissionDeniedException, TriggerException, \n            SAXException, LockException, IOException {\n        //Make the necessary operations if we process a collection configuration document\n        checkConfigurationDocument(transaction, broker, docUri);\n        if (broker.isReadOnly()) throw new PermissionDeniedException(\"Database is read-only\");\n        DocumentImpl oldDoc = null;\n        boolean oldDocLocked = false;\n        try {\n            broker.getBrokerPool().getProcessMonitor().startJob(ProcessMonitor.ACTION_VALIDATE_DOC, docUri); \n            getLock().acquire(Lock.WRITE_LOCK);   \n            DocumentImpl document = new DocumentImpl(broker.getBrokerPool(), this, docUri);\n            oldDoc = documents.get(docUri.getRawCollectionPath());\n            checkPermissions(transaction, broker, oldDoc);\n            manageDocumentInformation(broker, oldDoc, document );\n            Indexer indexer = new Indexer(broker, transaction);\n            IndexInfo info = new IndexInfo(indexer, config);\n            indexer.setDocument(document, config);\n            addObserversToIndexer(broker, indexer);\n            indexer.setValidating(true);\n            // if !triggersEnabled, setupTriggers will return null anyway, so no need to check\n            info.setTrigger(\n                setupTriggers(broker, docUri, oldDoc != null, config),\n                oldDoc == null);\n            info.prepareTrigger(broker, transaction, getURI().append(docUri), oldDoc);\n            if (LOG.isDebugEnabled())\n                LOG.debug(\"Scanning document \" + getURI().append(docUri));\n            doValidate.run(info);\n            // new document is valid: remove old document\n            if (oldDoc != null) {\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"removing old document \" + oldDoc.getFileURI());\n                oldDoc.getUpdateLock().acquire(Lock.WRITE_LOCK);\n                oldDocLocked = true;\n                if (oldDoc.getResourceType() == DocumentImpl.BINARY_FILE) {\n                    //TODO : use a more elaborated method ? No triggers...\n                    broker.removeBinaryResource(transaction, (BinaryDocument) oldDoc);\n                    documents.remove(oldDoc.getFileURI().getRawCollectionPath());\n                    //This lock is released in storeXMLInternal()\n                    //TODO : check that we go until there to ensure the lock is released\n                    if (transaction != null)\n                    \ttransaction.acquireLock(document.getUpdateLock(), Lock.WRITE_LOCK);\n                \telse\n                \t\tdocument.getUpdateLock().acquire(Lock.WRITE_LOCK);\n                    \n                    document.setDocId(broker.getNextResourceId(transaction, this));\n                    addDocument(transaction, broker, document);\n                } else {\n                    //TODO : use a more elaborated method ? No triggers...\n                    broker.removeXMLResource(transaction, oldDoc, false);\n                    oldDoc.copyOf(document);\n                    indexer.setDocumentObject(oldDoc);\n                    //old has become new at this point\n                    document = oldDoc;\n                    oldDocLocked = false;\t\t\n                }\n                if (LOG.isDebugEnabled())\n                    LOG.debug(\"removed old document \" + oldDoc.getFileURI());\n            } else {\n                //This lock is released in storeXMLInternal()\n                //TODO : check that we go until there to ensure the lock is released\n            \tif (transaction != null)\n                \ttransaction.acquireLock(document.getUpdateLock(), Lock.WRITE_LOCK);\n            \telse\n            \t\tdocument.getUpdateLock().acquire(Lock.WRITE_LOCK);\n            \t\n                document.setDocId(broker.getNextResourceId(transaction, this));\n                addDocument(transaction, broker, document);\n            }\n            indexer.setValidating(false);\n            info.postValidateTrigger();\n            return info;\n        } finally {\n            if (oldDoc != null && oldDocLocked) \n                oldDoc.getUpdateLock().release(Lock.WRITE_LOCK);\n            getLock().release(Lock.WRITE_LOCK);\n            broker.getBrokerPool().getProcessMonitor().endJob();\n        }\n    }","commit_id":"5af077cd441039d9b8125a9149f399b9bd8ee95c","url":"https://github.com/eXist-db/exist"},{"original_method":"private static String createMessage( MojoExecution execution, MavenProject project, Throwable cause )\n    {\n        StringBuilder buffer = new StringBuilder( 256 );\n\n        buffer.append( \"Failed to execute goal\" );\n\n        if ( execution != null )\n        {\n            buffer.append( ' ' );\n            buffer.append( execution.getGroupId() );\n            buffer.append( ':' );\n            buffer.append( execution.getArtifactId() );\n            buffer.append( ':' );\n            buffer.append( execution.getVersion() );\n            buffer.append( ':' );\n            buffer.append( execution.getGoal() );\n            buffer.append( \" (\" );\n            buffer.append( execution.getExecutionId() );\n            buffer.append( ')' );\n        }\n\n        if ( project != null )\n        {\n            buffer.append( \" on project \" );\n            buffer.append( project.getArtifactId() );\n        }\n\n        if ( cause != null )\n        {\n            buffer.append( \": \" ).append( cause.getMessage() );\n        }\n\n        return buffer.toString();\n    }","id":96933,"modified_method":"private static String createMessage( MojoExecution execution, MavenProject project, Throwable cause )\n    {\n        Ansi buffer = ansi( /*256*/ );\n\n        buffer.a( \"Failed to execute goal\" ).reset();\n\n        if ( execution != null )\n        {\n            buffer.a( ' ' ).a( execution.getGroupId() ).a( ':' ).fgGreen().a( execution.getArtifactId() );\n            buffer.a( ':' ).a( execution.getVersion() ).a( ':' ).a( execution.getGoal() ).reset();\n            buffer.bold().a( \" (\" ).a( execution.getExecutionId() ).a( ')' ).reset();\n        }\n\n        if ( project != null )\n        {\n            buffer.a( \" on project \" );\n            buffer.fgCyan().a( project.getArtifactId() ).reset();\n        }\n\n        if ( cause != null )\n        {\n            buffer.a( \": \" ).bold().fgRed().a( cause.getMessage() ).reset();\n        }\n\n        return buffer.toString();\n    }","commit_id":"050936ce19298c3bca582c7e044abf7bde076f3b","url":"https://github.com/apache/maven"},{"original_method":"/**\n     * Register a servant.\n     * \n     * @param url the URL associated with the servant\n     * @param handler notified on incoming HTTP requests\n     */\n    public synchronized void addServant(URL url, JettyHTTPHandler handler) {\n        if (server == null) {\n            DefaultHandler defaultHandler = null;\n            // create a new jetty server instance if there is no server there            \n            server = new Server();\n            \n            Container.Listener mBeanContainer = factory.getMBeanContainer();\n            if (mBeanContainer != null) {\n                server.getContainer().addEventListener(mBeanContainer);\n            }\n            \n            if (connector == null) {\n                connector = connectorFactory.createConnector(getHost(), getPort());\n                if (LOG.isLoggable(Level.FINER)) {\n                    LOG.finer(\"connector.host: \" \n                              + connector.getHost() == null \n                                ? \"null\" \n                                : \"\\\"\" + connector.getHost() + \"\\\"\");\n                    LOG.finer(\"connector.port: \" + connector.getPort());\n                }\n            } \n\n            server.addConnector(connector);\n            /*\n             * The server may have no handler, it might have a collection handler,\n             * it might have a one-shot. We need to add one or more of ours.\n             *\n             */\n            int numberOfHandlers = 1;\n            if (handlers != null) {\n                numberOfHandlers += handlers.size();\n            }\n            Handler existingHandler = server.getHandler();\n\n            HandlerCollection handlerCollection = null;\n            boolean existingHandlerCollection = existingHandler instanceof HandlerCollection;\n            if (existingHandlerCollection) {\n                handlerCollection = (HandlerCollection) existingHandler;\n            }\n\n            if (!existingHandlerCollection \n                &&\n                (existingHandler != null || numberOfHandlers > 1)) {\n                handlerCollection = new HandlerCollection();\n                if (existingHandler != null) {\n                    handlerCollection.addHandler(existingHandler);\n                }\n                server.setHandler(handlerCollection);\n            }\n            \n            /*\n             * At this point, the server's handler is a collection. It was either\n             * one to start, or it is now one containing only the single handler\n             * that was there to begin with.\n             */\n\n            if (handlers != null && handlers.size() > 0) {\n                for (Handler h : handlers) {\n                    // Filtering out the jetty default handler \n                    // which should not be added at this point.\n                    if (h instanceof DefaultHandler) {\n                        defaultHandler = (DefaultHandler) h;\n                    } else {\n                        if ((h instanceof SecurityHandler) \n                            && ((SecurityHandler)h).getHandler() == null) {\n                            //if h is SecurityHandler(such as ConstraintSecurityHandler)\n                            //then it need be on top of JettyHTTPHandler\n                            //set JettyHTTPHandler as inner handler if \n                            //inner handler is null\n                            ((SecurityHandler)h).setHandler(handler);\n                        } \n                        handlerCollection.addHandler(h);\n                    }\n                }\n            }\n            contexts = new ContextHandlerCollection();\n            /*\n             * handlerCollection may be null here if is only one handler to deal with.\n             * Which in turn implies that there can't be a 'defaultHander' to deal with.\n             */\n            if (handlerCollection != null) {\n                handlerCollection.addHandler(contexts);\n                if (defaultHandler != null) {\n                    handlerCollection.addHandler(defaultHandler);\n                }\n            } else {\n                server.setHandler(contexts);\n            }\n\n            try {                \n                setReuseAddress(connector);\n                setupThreadPool();\n                server.start();\n            } catch (Exception e) {\n                LOG.log(Level.SEVERE, \"START_UP_SERVER_FAILED_MSG\", new Object[] {e.getMessage(), port});\n                //problem starting server\n                try {                    \n                    server.stop();\n                    server.destroy();\n                } catch (Exception ex) {\n                    //ignore - probably wasn't fully started anyway\n                }\n                server = null;\n                throw new Fault(new Message(\"START_UP_SERVER_FAILED_MSG\", LOG, e.getMessage(), port), e);\n            }\n        }        \n        \n        String contextName = HttpUriMapper.getContextName(url.getPath());            \n        ContextHandler context = new ContextHandler();\n        context.setContextPath(contextName);\n        // bind the jetty http handler with the context handler\n        if (isSessionSupport) {         \n            // If we have sessions, we need two handlers.\n            if (sessionManager == null) {\n                sessionManager = new HashSessionManager();\n                HashSessionIdManager idManager = new HashSessionIdManager();\n                sessionManager.setIdManager(idManager);\n            }\n            SessionHandler sessionHandler = new SessionHandler(sessionManager);\n            sessionHandler.setHandler(handler);\n            context.setHandler(sessionHandler);\n        } else {\n            // otherwise, just the one.\n            context.setHandler(handler);\n        }\n        contexts.addHandler(context);\n        \n        ServletContext sc = context.getServletContext();\n        handler.setServletContext(sc);\n       \n        final String smap = HttpUriMapper.getResourceBase(url.getPath());\n        handler.setName(smap);\n        \n        if (contexts.isStarted()) {           \n            try {                \n                context.start();\n            } catch (Exception ex) {\n                LOG.log(Level.WARNING, \"ADD_HANDLER_FAILED_MSG\", new Object[] {ex.getMessage()});\n            }\n        }\n        \n            \n        ++servantCount;\n    }","id":96934,"modified_method":"/**\n     * Register a servant.\n     * \n     * @param url the URL associated with the servant\n     * @param handler notified on incoming HTTP requests\n     */\n    public synchronized void addServant(URL url, JettyHTTPHandler handler) {\n        SecurityHandler securityHandler = null;\n        if (server == null) {\n            DefaultHandler defaultHandler = null;\n            // create a new jetty server instance if there is no server there            \n            server = new Server();\n            \n            Container.Listener mBeanContainer = factory.getMBeanContainer();\n            if (mBeanContainer != null) {\n                server.getContainer().addEventListener(mBeanContainer);\n            }\n            \n            if (connector == null) {\n                connector = connectorFactory.createConnector(getHost(), getPort());\n                if (LOG.isLoggable(Level.FINER)) {\n                    LOG.finer(\"connector.host: \" \n                              + connector.getHost() == null \n                                ? \"null\" \n                                : \"\\\"\" + connector.getHost() + \"\\\"\");\n                    LOG.finer(\"connector.port: \" + connector.getPort());\n                }\n            } \n\n            server.addConnector(connector);\n            /*\n             * The server may have no handler, it might have a collection handler,\n             * it might have a one-shot. We need to add one or more of ours.\n             *\n             */\n            int numberOfHandlers = 1;\n            if (handlers != null) {\n                numberOfHandlers += handlers.size();\n            }\n            Handler existingHandler = server.getHandler();\n\n            HandlerCollection handlerCollection = null;\n            boolean existingHandlerCollection = existingHandler instanceof HandlerCollection;\n            if (existingHandlerCollection) {\n                handlerCollection = (HandlerCollection) existingHandler;\n            }\n\n            if (!existingHandlerCollection \n                &&\n                (existingHandler != null || numberOfHandlers > 1)) {\n                handlerCollection = new HandlerCollection();\n                if (existingHandler != null) {\n                    handlerCollection.addHandler(existingHandler);\n                }\n                server.setHandler(handlerCollection);\n            }\n            \n            /*\n             * At this point, the server's handler is a collection. It was either\n             * one to start, or it is now one containing only the single handler\n             * that was there to begin with.\n             */\n            if (handlers != null && handlers.size() > 0) {\n                for (Handler h : handlers) {\n                    // Filtering out the jetty default handler \n                    // which should not be added at this point.\n                    if (h instanceof DefaultHandler) {\n                        defaultHandler = (DefaultHandler) h;\n                    } else {\n                        if ((h instanceof SecurityHandler) \n                            && ((SecurityHandler)h).getHandler() == null) {\n                            //if h is SecurityHandler(such as ConstraintSecurityHandler)\n                            //then it need be on top of JettyHTTPHandler\n                            //set JettyHTTPHandler as inner handler if \n                            //inner handler is null\n                            ((SecurityHandler)h).setHandler(handler);\n                            securityHandler = (SecurityHandler)h;\n                        } else {\n                            handlerCollection.addHandler(h);\n                        }\n                    }\n                }\n            }\n            contexts = new ContextHandlerCollection();\n            /*\n             * handlerCollection may be null here if is only one handler to deal with.\n             * Which in turn implies that there can't be a 'defaultHander' to deal with.\n             */\n            if (handlerCollection != null) {\n                handlerCollection.addHandler(contexts);\n                if (defaultHandler != null) {\n                    handlerCollection.addHandler(defaultHandler);\n                }\n            } else {\n                server.setHandler(contexts);\n            }\n\n            try {                \n                setReuseAddress(connector);\n                setupThreadPool();\n                server.start();\n            } catch (Exception e) {\n                LOG.log(Level.SEVERE, \"START_UP_SERVER_FAILED_MSG\", new Object[] {e.getMessage(), port});\n                //problem starting server\n                try {                    \n                    server.stop();\n                    server.destroy();\n                } catch (Exception ex) {\n                    //ignore - probably wasn't fully started anyway\n                }\n                server = null;\n                throw new Fault(new Message(\"START_UP_SERVER_FAILED_MSG\", LOG, e.getMessage(), port), e);\n            }\n        }        \n        \n        String contextName = HttpUriMapper.getContextName(url.getPath());            \n        ContextHandler context = new ContextHandler();\n        context.setContextPath(contextName);\n        // bind the jetty http handler with the context handler\n        if (isSessionSupport) {         \n            // If we have sessions, we need two handlers.\n            if (sessionManager == null) {\n                sessionManager = new HashSessionManager();\n                HashSessionIdManager idManager = new HashSessionIdManager();\n                sessionManager.setIdManager(idManager);\n            }\n            SessionHandler sessionHandler = new SessionHandler(sessionManager);\n            if (securityHandler != null) {\n                //use the securityHander which already wrap the jetty http handler\n                sessionHandler.setHandler(securityHandler);\n            } else {\n                sessionHandler.setHandler(handler);\n            }\n            context.setHandler(sessionHandler);\n        } else {\n            // otherwise, just the one.\n            if (securityHandler != null) {\n                //use the securityHander which already wrap the jetty http handler\n                context.setHandler(securityHandler);\n            } else {\n                context.setHandler(handler);\n            }\n        }\n        contexts.addHandler(context);\n        \n        ServletContext sc = context.getServletContext();\n        handler.setServletContext(sc);\n       \n        final String smap = HttpUriMapper.getResourceBase(url.getPath());\n        handler.setName(smap);\n        \n        if (contexts.isStarted()) {           \n            try {                \n                context.start();\n            } catch (Exception ex) {\n                LOG.log(Level.WARNING, \"ADD_HANDLER_FAILED_MSG\", new Object[] {ex.getMessage()});\n            }\n        }\n        \n            \n        ++servantCount;\n    }","commit_id":"722190b5d4be9292f750312049911e1631dba24d","url":"https://github.com/apache/cxf"},{"original_method":"/**\n     * @param port TCP Port to listen for http requests\n     */\n    public Jetty8HttpServerImpl(int port) {\n        Switchboard sb = Switchboard.getSwitchboard();\n        \n        server = new Server();\n        SelectChannelConnector connector = new SelectChannelConnector();\n        connector.setPort(port);\n        connector.setName(\"httpd:\"+Integer.toString(port));\n        server.addConnector(connector);\n        \n        // add ssl/https connector\n        boolean useSSL = sb.getConfigBool(\"server.https\", false);\n        if (useSSL) {\n            final SslContextFactory sslContextFactory = new SslContextFactory();\n            final SSLContext sslContext = initSslContext(sb);\n            if (sslContext != null) {\n                sslContextFactory.setSslContext(sslContext);\n\n                SslSelectChannelConnector sslconnector = new SslSelectChannelConnector(sslContextFactory);\n                sslconnector.setPort(sslport);\n                sslconnector.setName(\"ssld:\" + Integer.toString(sslport)); // name must start with ssl (for withSSL() to work correctly)\n\n                server.addConnector(sslconnector);\n                ConcurrentLog.info(\"SERVER\", \"SSL support initialized successfully on port \" + sslport);\n            }\n        }\n\n        YacyDomainHandler domainHandler = new YacyDomainHandler();\n        domainHandler.setAlternativeResolver(sb.peers);\n\n        // configure root context\n        ServletContextHandler htrootContext = new ServletContextHandler(ServletContextHandler.SESSIONS);\n        htrootContext.setContextPath(\"/\");  \n        ServletHolder sholder = new ServletHolder(YaCyDefaultServlet.class);\n        sholder.setInitParameter(\"resourceBase\", \"htroot\");\n        //sholder.setInitParameter(\"welcomeFile\", \"index.html\"); // default is index.html, welcome.html\n        htrootContext.addServlet(sholder,\"/*\");    \n        \n        //add SolrServlet\n        htrootContext.addServlet(SolrServlet.class,\"/solr/select\");        \n\n        // add proxy?url= servlet\n        htrootContext.addServlet(YaCyProxyServlet.class,\"/proxy.html\");\n        \n        // add GSA servlet\n        htrootContext.addServlet(GSAsearchServlet.class,\"/gsa/search\");\n\n        // define list of YaCy specific general handlers\n        HandlerList handlers = new HandlerList();\n        handlers.setHandlers(new Handler[] \n           {domainHandler, new ProxyCacheHandler(), new ProxyHandler()}); \n\n        // context handler for dispatcher and security (hint: dispatcher requires a context)\n        ContextHandler context = new ContextHandler();\n        context.setContextPath(\"/\");\n        context.setHandler(handlers);\n\n        // make YaCy handlers (in context) and servlet context handlers available (both contain root context \"/\")\n        // logic: 1. YaCy handlers are called if request not handled (e.g. proxy) then servlets handle it\n        ContextHandlerCollection allrequesthandlers = new ContextHandlerCollection();\n        allrequesthandlers.addHandler(context);\n        allrequesthandlers.addHandler(htrootContext);    \n        allrequesthandlers.addHandler(new DefaultHandler()); // if not handled by other handler \n        \n        // wrap all handlers by security handler\n        Jetty8YaCySecurityHandler securityHandler = new Jetty8YaCySecurityHandler();\n        LoginService loginService = new YaCyLoginService();\n        securityHandler.setLoginService(loginService);\n        securityHandler.setRealmName(loginService.getName());\n        securityHandler.setHandler(new CrashProtectionHandler(allrequesthandlers));\n        server.setHandler(securityHandler);\n    }","id":96935,"modified_method":"/**\n     * @param port TCP Port to listen for http requests\n     */\n    public Jetty8HttpServerImpl(int port) {\n        Switchboard sb = Switchboard.getSwitchboard();\n        \n        server = new Server();\n        SelectChannelConnector connector = new SelectChannelConnector();\n        connector.setPort(port);\n        connector.setName(\"httpd:\"+Integer.toString(port));\n        server.addConnector(connector);\n        \n        // add ssl/https connector\n        boolean useSSL = sb.getConfigBool(\"server.https\", false);\n        if (useSSL) {\n            final SslContextFactory sslContextFactory = new SslContextFactory();\n            final SSLContext sslContext = initSslContext(sb);\n            if (sslContext != null) {\n                sslContextFactory.setSslContext(sslContext);\n\n                SslSelectChannelConnector sslconnector = new SslSelectChannelConnector(sslContextFactory);\n                sslconnector.setPort(sslport);\n                sslconnector.setName(\"ssld:\" + Integer.toString(sslport)); // name must start with ssl (for withSSL() to work correctly)\n\n                server.addConnector(sslconnector);\n                ConcurrentLog.info(\"SERVER\", \"SSL support initialized successfully on port \" + sslport);\n            }\n        }\n\n        YacyDomainHandler domainHandler = new YacyDomainHandler();\n        domainHandler.setAlternativeResolver(sb.peers);\n\n        // configure root context\n        ServletContextHandler htrootContext = new ServletContextHandler(ServletContextHandler.SESSIONS);\n        htrootContext.setContextPath(\"/\");  \n        ServletHolder sholder = new ServletHolder(YaCyDefaultServlet.class);\n        sholder.setInitParameter(\"resourceBase\", \"htroot\");\n        //sholder.setInitParameter(\"welcomeFile\", \"index.html\"); // default is index.html, welcome.html\n        htrootContext.addServlet(sholder,\"/*\");    \n        \n        //add SolrServlet\n        htrootContext.addServlet(SolrServlet.class,\"/solr/select\");        \n\n        // add proxy?url= servlet\n        htrootContext.addServlet(YaCyProxyServlet.class,\"/proxy.html\");\n        \n        // add GSA servlet\n        htrootContext.addServlet(GSAsearchServlet.class,\"/gsa/search\");\n\n        // define list of YaCy specific general handlers\n        HandlerList handlers = new HandlerList();\n        handlers.setHandlers(new Handler[] \n           {domainHandler, new ProxyCacheHandler(), new ProxyHandler()}); \n\n        // context handler for dispatcher and security (hint: dispatcher requires a context)\n        ContextHandler context = new ContextHandler();\n        context.setContextPath(\"/\");\n        context.setHandler(handlers);\n\n        // make YaCy handlers (in context) and servlet context handlers available (both contain root context \"/\")\n        // logic: 1. YaCy handlers are called if request not handled (e.g. proxy) then servlets handle it\n        ContextHandlerCollection allrequesthandlers = new ContextHandlerCollection();\n        allrequesthandlers.addHandler(context);\n        allrequesthandlers.addHandler(htrootContext);    \n        allrequesthandlers.addHandler(new DefaultHandler()); // if not handled by other handler \n        \n        // wrap all handlers by security handler\n        Jetty8YaCySecurityHandler securityHandler = new Jetty8YaCySecurityHandler();\n        LoginService loginService = new YaCyLoginService();\n        securityHandler.setLoginService(loginService);\n        securityHandler.setRealmName(loginService.getName());\n        securityHandler.setHandler(new CrashProtectionHandler(allrequesthandlers));\n\n        // check server access restriction and add IPAccessHandler if restrictions are needed\n        // otherwise don't (to save performance)\n        String white = sb.getConfig(\"serverClient\", \"*\");\n        if (!white.equals(\"*\")) { // full ip (allowed ranges 0-255 or prefix  10.0-255,0,0-100  or 127.)\n            final StringTokenizer st = new StringTokenizer(white, \",\");\n            IPAccessHandler iphandler = new IPAccessHandler();\n            int i=0;\n            while (st.hasMoreTokens()) {\n                String ip = st.nextToken();\n                iphandler.addWhite(ip);\n                i++;\n            }          \n            if (i > 0) {\n                iphandler.addWhite(\"127.0.0.1\"); // allow localhost (loopback addr)\n                iphandler.setHandler(securityHandler); \n                server.setHandler(iphandler);\n                ConcurrentLog.info(\"SERVER\",\"activated IP access restriction to: [127.0.0.1,\" + white +\"] (this works only correct with start parameter -Djava.net.preferIPv4Stack=true)\");\n            } else {\n                server.setHandler(securityHandler); // iphandler not needed\n            }\n        } else {\n            server.setHandler(securityHandler); // iphandler not needed\n        }        \n    }","commit_id":"30d925a96e589d61bdaed8f818ee706f725a698f","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"/**\r\n    * Starts up the whole application. Sets up all datastructures and starts\r\n    * the main threads.\r\n    *\r\n    * @param homePath Root-path where all information is to be found.\r\n    * @param startupFree free memory at startup time, to be used later for statistics\r\n    */\r\n    private static void startup(final File dataHome, final File appHome, final long startupMemFree, final long startupMemTotal, final boolean gui) {\r\n        try {\r\n            // start up\r\n            System.out.println(copyright);\r\n            System.out.println(hline);\r\n\r\n            // check java version\r\n            try {\r\n                \"a\".isEmpty(); // needs at least Java 1.6\r\n            } catch (final NoSuchMethodError e) {\r\n                System.err.println(\"STARTUP: Java Version too low. You need at least Java 1.6 to run YaCy\");\r\n                System.exit(-1);\r\n            }\r\n\r\n            // ensure that there is a DATA directory, if not, create one and if that fails warn and die\r\n            mkdirsIfNeseccary(dataHome);\r\n            dataHome_g = dataHome;\r\n            mkdirsIfNeseccary(appHome);\r\n            File f = new File(dataHome, \"DATA/\");\r\n            mkdirsIfNeseccary(f);\r\n\t\t\tif (!(f.exists())) {\r\n\t\t\t\tSystem.err.println(\"Error creating DATA-directory in \" + dataHome.toString() + \" . Please check your write-permission for this folder. YaCy will now terminate.\");\r\n\t\t\t\tSystem.exit(-1);\r\n\t\t\t}\r\n\r\n\t\t\thomedir = appHome.toString();\r\n\r\n            // setting up logging\r\n\t\t\tf = new File(dataHome, \"DATA/LOG/\");\r\n            mkdirsIfNeseccary(f);\r\n\t\t\tf = new File(dataHome, \"DATA/LOG/yacy.logging\");\r\n\t\t\tfinal File f0 = new File(appHome, \"defaults/yacy.logging\");\r\n\t\t\tif (!f.exists() || f0.lastModified() > f.lastModified()) try {\r\n\t\t\t    Files.copy(f0, f);\r\n            } catch (final IOException e){\r\n                System.out.println(\"could not copy yacy.logging\");\r\n            }\r\n            try{\r\n                ConcurrentLog.configureLogging(dataHome, appHome, new File(dataHome, \"DATA/LOG/yacy.logging\"));\r\n            } catch (final IOException e) {\r\n                System.out.println(\"could not find logging properties in homePath=\" + dataHome);\r\n                ConcurrentLog.logException(e);\r\n            }\r\n            ConcurrentLog.config(\"STARTUP\", \"YaCy version: \" + yacyBuildProperties.getVersion() + \"/\" + yacyBuildProperties.getSVNRevision());\r\n            ConcurrentLog.config(\"STARTUP\", \"Java version: \" + System.getProperty(\"java.version\", \"no-java-version\"));\r\n            ConcurrentLog.config(\"STARTUP\", \"Operation system: \" + System.getProperty(\"os.name\",\"unknown\"));\r\n            ConcurrentLog.config(\"STARTUP\", \"Application root-path: \" + appHome);\r\n            ConcurrentLog.config(\"STARTUP\", \"Data root-path: \" + dataHome);\r\n            ConcurrentLog.config(\"STARTUP\", \"Time zone: UTC\" + GenericFormatter.UTCDiffString() + \"; UTC+0000 is \" + System.currentTimeMillis());\r\n            ConcurrentLog.config(\"STARTUP\", \"Maximum file system path length: \" + OS.maxPathLength);\r\n\r\n            f = new File(dataHome, \"DATA/yacy.running\");\r\n            final String conf = \"DATA/SETTINGS/yacy.conf\".replace(\"/\", File.separator);\r\n            if (f.exists()) {                // another instance running? VM crash? User will have to care about this\r\n                ConcurrentLog.severe(\"STARTUP\", \"WARNING: the file \" + f + \" exists, this usually means that a YaCy instance is still running. If you want to restart YaCy, try first ./stopYACY.sh, then ./startYACY.sh. If ./stopYACY.sh fails, try ./killYACY.sh\");\r\n                \r\n                // If YaCy is actually running, then we check if the server port is open.\r\n                // If yes, then we consider that a restart is a user mistake and then we just respond\r\n                // as the user expects and tell the browser to open the start page.\r\n                // That will especially happen if Windows Users double-Click the YaCy Icon on the desktop to simply\r\n                // open the web interface. (They don't think of 'servers' they just want to get to the search page).\r\n                // We need to parse the configuration file for that to get the host port\r\n                File dataFile = new File(dataHome, conf);\r\n                if (dataFile.exists()) {\r\n                    Properties p = new Properties();\r\n                    p.load(new FileInputStream(dataFile));\r\n                    int port = Integer.parseInt(p.getProperty(\"port\", \"8090\"));\r\n                    try {\r\n                        if (TimeoutRequest.ping(\"127.0.0.1\", port, 1000)) {\r\n                            Browser.openBrowser(\"http://localhost:\" + port + \"/\" + p.getProperty(SwitchboardConstants.BROWSER_POP_UP_PAGE, \"index.html\"));\r\n                            // Thats it; YaCy was running, the user is happy, we can stop now.\r\n                            ConcurrentLog.severe(\"STARTUP\", \"WARNING: YaCy instance was still running; just opening the browser and exit.\");\r\n                            System.exit(0);\r\n                        }\r\n                    } catch (final ExecutionException ex) {\r\n                        ConcurrentLog.info(\"STARTUP\", \"INFO: delete old yacy.running file; likely previous YaCy session was not orderly shutdown!\");\r\n                    }\r\n                }\r\n                \r\n                // YaCy is not running; thus delete the file an go on as nothing was wrong.\r\n                delete(f);\r\n            }\r\n            if (!f.createNewFile()) ConcurrentLog.severe(\"STARTUP\", \"WARNING: the file \" + f + \" can not be created!\");\r\n            try { new FileOutputStream(f).write(Integer.toString(OS.getPID()).getBytes()); } catch (final Exception e) { } // write PID\r\n            f.deleteOnExit();\r\n            FileChannel channel = null;\r\n            FileLock lock = null;\r\n            try {\r\n            \tchannel = new RandomAccessFile(f,\"rw\").getChannel();\r\n            \tlock = channel.tryLock(); // lock yacy.running\r\n            } catch (final Exception e) { }\r\n\r\n            try {\r\n                sb = new Switchboard(dataHome, appHome, \"defaults/yacy.init\".replace(\"/\", File.separator), conf);\r\n            } catch (final RuntimeException e) {\r\n                ConcurrentLog.severe(\"STARTUP\", \"YaCy cannot start: \" + e.getMessage(), e);\r\n                System.exit(-1);\r\n            }\r\n            //sbSync.V(); // signal that the sb reference was set\r\n\r\n            // switch the memory strategy\r\n            MemoryControl.setStandardStrategy(sb.getConfigBool(\"memory.standardStrategy\", true));\r\n\r\n            // save information about available memory at startup time\r\n            sb.setConfig(\"memoryFreeAfterStartup\", startupMemFree);\r\n            sb.setConfig(\"memoryTotalAfterStartup\", startupMemTotal);\r\n\r\n            // start gui if wanted\r\n            if (gui) YaCyApp.start(\"localhost\", (int) sb.getConfigLong(\"port\", 8090));\r\n\r\n            // hardcoded, forced, temporary value-migration\r\n            sb.setConfig(\"htTemplatePath\", \"htroot/env/templates\");\r\n\r\n            int oldRev;\r\n    \t    try {\r\n                oldRev = Integer.parseInt(sb.getConfig(\"svnRevision\", \"0\"));\r\n            } catch (final NumberFormatException e) {\r\n                oldRev = 0;\r\n    \t    }\r\n            final int newRev = Integer.parseInt(yacyBuildProperties.getSVNRevision());\r\n            sb.setConfig(\"svnRevision\", yacyBuildProperties.getSVNRevision());\r\n            sb.setConfig(\"applicationRoot\", appHome.toString());\r\n            sb.setConfig(\"dataRoot\", dataHome.toString());\r\n            yacyVersion.latestRelease = version;\r\n\r\n            // read environment\r\n            final int timeout = Math.max(5000, Integer.parseInt(sb.getConfig(\"httpdTimeout\", \"5000\")));\r\n\r\n            // create some directories\r\n            final File htRootPath = new File(appHome, sb.getConfig(\"htRootPath\", \"htroot\"));\r\n            final File htDocsPath = sb.getDataPath(SwitchboardConstants.HTDOCS_PATH, SwitchboardConstants.HTDOCS_PATH_DEFAULT);\r\n            mkdirIfNeseccary(htDocsPath);\r\n            //final File htTemplatePath = new File(homePath, sb.getConfig(\"htTemplatePath\",\"htdocs\"));\r\n\r\n            // copy the donate iframe (better to copy this once here instead of doing this in an actual iframe in the search result)\r\n            final File wwwEnvPath = new File(htDocsPath, \"env\");\r\n            mkdirIfNeseccary(wwwEnvPath);\r\n            final String iframesource = sb.getConfig(\"donation.iframesource\", \"\");\r\n            final String iframetarget = sb.getConfig(\"donation.iframetarget\", \"\");\r\n            final File iframefile = new File(htDocsPath, iframetarget);\r\n            if (!iframefile.exists()) new Thread() {\r\n                public void run() {\r\n                    final ClientIdentification.Agent agent = ClientIdentification.getAgent(ClientIdentification.yacyInternetCrawlerAgentName);\r\n                    Response response;\r\n                    try {\r\n                        response = sb.loader == null ? null : sb.loader.load(sb.loader.request(new DigestURL(iframesource), false, true), CacheStrategy.NOCACHE, Integer.MAX_VALUE, null, agent);\r\n                        if (response != null) FileUtils.copy(response.getContent(), iframefile);\r\n                    } catch (Throwable e) {}\r\n                }\r\n            }.start();\r\n            \r\n            // create default notifier picture\r\n            File notifierFile = new File(htDocsPath, \"notifier.gif\");\r\n            if (!notifierFile.exists()) try {Files.copy(new File(htRootPath, \"env/grafics/empty.gif\"), notifierFile);} catch (final IOException e) {}\r\n\r\n            final File htdocsReadme = new File(htDocsPath, \"readme.txt\");\r\n            if (!(htdocsReadme.exists())) try {FileUtils.copy((\r\n                    \"This is your root directory for individual Web Content\\r\\n\" +\r\n                    \"\\r\\n\" +\r\n                    \"Please place your html files into the www subdirectory.\\r\\n\" +\r\n                    \"The URL of that path is either\\r\\n\" +\r\n                    \"http://www.<your-peer-name>.yacy    or\\r\\n\" +\r\n                    \"http://<your-ip>:<your-port>/www\\r\\n\" +\r\n                    \"\\r\\n\" +\r\n                    \"Other subdirectories may be created; they map to corresponding sub-domains.\\r\\n\" +\r\n                    \"This directory shares it's content with the applications htroot path, so you\\r\\n\" +\r\n                    \"may access your yacy search page with\\r\\n\" +\r\n                    \"http://<your-peer-name>.yacy/\\r\\n\" +\r\n                    \"\\r\\n\").getBytes(), htdocsReadme);} catch (final IOException e) {\r\n                        System.out.println(\"Error creating htdocs readme: \" + e.getMessage());\r\n                    }\r\n\r\n            final File wwwDefaultPath = new File(htDocsPath, \"www\");\r\n            mkdirIfNeseccary(wwwDefaultPath);\r\n\r\n            final File shareDefaultPath = new File(htDocsPath, \"share\");\r\n            mkdirIfNeseccary(shareDefaultPath);\r\n\r\n            migration.migrate(sb, oldRev, newRev);\r\n\r\n            // delete old release files\r\n            final int deleteOldDownloadsAfterDays = (int) sb.getConfigLong(\"update.deleteOld\", 30);\r\n            yacyRelease.deleteOldDownloads(sb.releasePath, deleteOldDownloadsAfterDays );\r\n\r\n            // set user-agent\r\n            HTTPClient.setDefaultUserAgent(ClientIdentification.yacyInternetCrawlerAgent.userAgent);\r\n\r\n            // initial fill of the triplestore\r\n            File triplestore = new File(sb.getConfig(\"triplestore\", new File(dataHome, \"DATA/TRIPLESTORE\").getAbsolutePath()));\r\n            mkdirIfNeseccary(triplestore);\r\n            for (String s: triplestore.list()) {\r\n            \tif ((s.endsWith(\".rdf\") || s.endsWith(\".nt\")) && !s.equals(\"local.rdf\") && !s.endsWith(\"_triplestore.rdf\") && !s.startsWith(\"private_store_\")) {\r\n                    try {\r\n                        JenaTripleStore.load(new File(triplestore, s).getAbsolutePath());\r\n                    } catch (final IOException e) {\r\n                        ConcurrentLog.logException(e);\r\n                    }\r\n            \t}\r\n            }\r\n            if (sb.getConfigBool(\"triplestore.persistent\", false)) {\r\n                File local = new File(triplestore, \"local.rdf\");\r\n                if (local.exists()) {\r\n                    try {\r\n                        JenaTripleStore.load(local.getAbsolutePath());\r\n                    } catch (final IOException e) {\r\n                        ConcurrentLog.logException(e);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // start main threads\r\n            final int port = sb.getConfigInt(\"port\", 8090);\r\n            try {\r\n                // start http server\r\n            \tYaCyHttpServer httpServer;\r\n                httpServer = new Jetty8HttpServerImpl(port);\r\n                httpServer.startupServer();\r\n                sb.setHttpServer(httpServer);\r\n                ConcurrentLog.info(\"STARTUP\",httpServer.getVersion());\r\n                \r\n                // open the browser window\r\n                final boolean browserPopUpTrigger = sb.getConfig(SwitchboardConstants.BROWSER_POP_UP_TRIGGER, \"true\").equals(\"true\");\r\n                if (browserPopUpTrigger) try {\r\n                    final String  browserPopUpPage = sb.getConfig(SwitchboardConstants.BROWSER_POP_UP_PAGE, \"ConfigBasic.html\");\r\n                    //boolean properPW = (sb.getConfig(SwitchboardConstants.ADMIN_ACCOUNT, \"\").isEmpty()) && (sb.getConfig(httpd.ADMIN_ACCOUNT_B64MD5, \"\").length() > 0);\r\n                    //if (!properPW) browserPopUpPage = \"ConfigBasic.html\";\r\n                    Browser.openBrowser((\"http://localhost:\"+port) + \"/\" + browserPopUpPage);\r\n                   // Browser.openBrowser((server.withSSL()?\"https\":\"http\") + \"://localhost:\" + serverCore.getPortNr(port) + \"/\" + browserPopUpPage);\r\n                } catch (final Throwable e) {\r\n                    // cannot open browser. This may be normal in headless environments\r\n                    //Log.logException(e);\r\n                }\r\n\r\n                // enable browser popup, http server is ready now\r\n                sb.tray.setReady();\r\n\r\n                //regenerate Locales from Translationlist, if needed\r\n                final File locale_source = sb.getAppPath(\"locale.source\", \"locales\");\r\n                final String lang = sb.getConfig(\"locale.language\", \"\");\r\n                if (!lang.equals(\"\") && !lang.equals(\"default\")) { //locale is used\r\n                    String currentRev = \"\";\r\n                    try{\r\n                        final BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(sb.getDataPath(\"locale.translated_html\", \"DATA/LOCALE/htroot\"), lang+\"/version\" ))));\r\n                        currentRev = br.readLine();\r\n                        br.close();\r\n                    }catch(final IOException e){\r\n                        //Error\r\n                    }\r\n\r\n                    if (!currentRev.equals(sb.getConfig(\"svnRevision\", \"\"))) try { //is this another version?!\r\n                        final File sourceDir = new File(sb.getConfig(\"htRootPath\", \"htroot\"));\r\n                        final File destDir = new File(sb.getDataPath(\"locale.translated_html\", \"DATA/LOCALE/htroot\"), lang);\r\n                        if (Translator.translateFilesRecursive(sourceDir, destDir, new File(locale_source, lang + \".lng\"), \"html,template,inc\", \"locale\")){ //translate it\r\n                            //write the new Versionnumber\r\n                            final BufferedWriter bw = new BufferedWriter(new PrintWriter(new FileWriter(new File(destDir, \"version\"))));\r\n                            bw.write(sb.getConfig(\"svnRevision\", \"Error getting Version\"));\r\n                            bw.close();\r\n                        }\r\n                    } catch (final IOException e) {}\r\n                }\r\n                // initialize number formatter with this locale\r\n                Formatter.setLocale(lang);\r\n\r\n                // registering shutdown hook\r\n                ConcurrentLog.config(\"STARTUP\", \"Registering Shutdown Hook\");\r\n                final Runtime run = Runtime.getRuntime();\r\n                run.addShutdownHook(new shutdownHookThread(Thread.currentThread(), sb));\r\n\r\n                // save information about available memory after all initializations\r\n                //try {\r\n                    sb.setConfig(\"memoryFreeAfterInitBGC\", MemoryControl.free());\r\n                    sb.setConfig(\"memoryTotalAfterInitBGC\", MemoryControl.total());\r\n                    System.gc();\r\n                    sb.setConfig(\"memoryFreeAfterInitAGC\", MemoryControl.free());\r\n                    sb.setConfig(\"memoryTotalAfterInitAGC\", MemoryControl.total());\r\n                //} catch (final ConcurrentModificationException e) {}\r\n\r\n                // wait for server shutdown\r\n                try {\r\n                    sb.waitForShutdown();\r\n                } catch (final Exception e) {\r\n                    ConcurrentLog.severe(\"MAIN CONTROL LOOP\", \"PANIC: \" + e.getMessage(),e);\r\n                }\r\n                // shut down\r\n                Array.terminate();\r\n                ConcurrentLog.config(\"SHUTDOWN\", \"caught termination signal\");\r\n                httpServer.stop();\r\n\r\n                ConcurrentLog.config(\"SHUTDOWN\", \"server has terminated\");\r\n                sb.close();\r\n            } catch (final Exception e) {\r\n                ConcurrentLog.severe(\"STARTUP\", \"Unexpected Error: \" + e.getClass().getName(),e);\r\n                //System.exit(1);\r\n            }\r\n            if(lock != null) lock.release();\r\n            if(channel != null) channel.close();\r\n        } catch (final Exception ee) {\r\n            ConcurrentLog.severe(\"STARTUP\", \"FATAL ERROR: \" + ee.getMessage(),ee);\r\n        } finally {\r\n        }\r\n\r\n        // save the triple store\r\n        if (sb.getConfigBool(\"triplestore.persistent\", false)) {\r\n            JenaTripleStore.saveAll();\r\n        }\r\n\r\n        ConcurrentLog.config(\"SHUTDOWN\", \"goodbye. (this is the last line)\");\r\n        ConcurrentLog.shutdown();\r\n        shutdownSemaphore.release(1000);\r\n        try {\r\n            System.exit(0);\r\n        } catch (final Exception e) {} // was once stopped by de.anomic.net.ftpc$sm.checkExit(ftpc.java:1790)\r\n    }","id":96936,"modified_method":"/**\r\n    * Starts up the whole application. Sets up all datastructures and starts\r\n    * the main threads.\r\n    *\r\n    * @param homePath Root-path where all information is to be found.\r\n    * @param startupFree free memory at startup time, to be used later for statistics\r\n    */\r\n    private static void startup(final File dataHome, final File appHome, final long startupMemFree, final long startupMemTotal, final boolean gui) {\r\n        try {\r\n            // start up\r\n            System.out.println(copyright);\r\n            System.out.println(hline);\r\n\r\n            // check java version\r\n            try {\r\n                \"a\".isEmpty(); // needs at least Java 1.6\r\n            } catch (final NoSuchMethodError e) {\r\n                System.err.println(\"STARTUP: Java Version too low. You need at least Java 1.6 to run YaCy\");\r\n                System.exit(-1);\r\n            }\r\n\r\n            // ensure that there is a DATA directory, if not, create one and if that fails warn and die\r\n            mkdirsIfNeseccary(dataHome);\r\n            dataHome_g = dataHome;\r\n            mkdirsIfNeseccary(appHome);\r\n            File f = new File(dataHome, \"DATA/\");\r\n            mkdirsIfNeseccary(f);\r\n\t\t\tif (!(f.exists())) {\r\n\t\t\t\tSystem.err.println(\"Error creating DATA-directory in \" + dataHome.toString() + \" . Please check your write-permission for this folder. YaCy will now terminate.\");\r\n\t\t\t\tSystem.exit(-1);\r\n\t\t\t}\r\n\r\n\t\t\thomedir = appHome.toString();\r\n\r\n            // setting up logging\r\n\t\t\tf = new File(dataHome, \"DATA/LOG/\");\r\n            mkdirsIfNeseccary(f);\r\n\t\t\tf = new File(dataHome, \"DATA/LOG/yacy.logging\");\r\n\t\t\tfinal File f0 = new File(appHome, \"defaults/yacy.logging\");\r\n\t\t\tif (!f.exists() || f0.lastModified() > f.lastModified()) try {\r\n\t\t\t    Files.copy(f0, f);\r\n            } catch (final IOException e){\r\n                System.out.println(\"could not copy yacy.logging\");\r\n            }\r\n            try{\r\n                ConcurrentLog.configureLogging(dataHome, appHome, new File(dataHome, \"DATA/LOG/yacy.logging\"));\r\n            } catch (final IOException e) {\r\n                System.out.println(\"could not find logging properties in homePath=\" + dataHome);\r\n                ConcurrentLog.logException(e);\r\n            }\r\n            ConcurrentLog.config(\"STARTUP\", \"YaCy version: \" + yacyBuildProperties.getVersion() + \"/\" + yacyBuildProperties.getSVNRevision());\r\n            ConcurrentLog.config(\"STARTUP\", \"Java version: \" + System.getProperty(\"java.version\", \"no-java-version\"));\r\n            ConcurrentLog.config(\"STARTUP\", \"Operation system: \" + System.getProperty(\"os.name\",\"unknown\"));\r\n            ConcurrentLog.config(\"STARTUP\", \"Application root-path: \" + appHome);\r\n            ConcurrentLog.config(\"STARTUP\", \"Data root-path: \" + dataHome);\r\n            ConcurrentLog.config(\"STARTUP\", \"Time zone: UTC\" + GenericFormatter.UTCDiffString() + \"; UTC+0000 is \" + System.currentTimeMillis());\r\n            ConcurrentLog.config(\"STARTUP\", \"Maximum file system path length: \" + OS.maxPathLength);\r\n\r\n            f = new File(dataHome, \"DATA/yacy.running\");\r\n            final String conf = \"DATA/SETTINGS/yacy.conf\".replace(\"/\", File.separator);\r\n            if (!f.createNewFile()) ConcurrentLog.severe(\"STARTUP\", \"WARNING: the file \" + f + \" can not be created!\");\r\n            try { new FileOutputStream(f).write(Integer.toString(OS.getPID()).getBytes()); } catch (final Exception e) { } // write PID\r\n            f.deleteOnExit();\r\n            FileChannel channel = null;\r\n            FileLock lock = null;\r\n            try {\r\n            \tchannel = new RandomAccessFile(f,\"rw\").getChannel();\r\n            \tlock = channel.tryLock(); // lock yacy.running\r\n            } catch (final Exception e) { }\r\n\r\n            try {\r\n                sb = new Switchboard(dataHome, appHome, \"defaults/yacy.init\".replace(\"/\", File.separator), conf);\r\n            } catch (final RuntimeException e) {\r\n                ConcurrentLog.severe(\"STARTUP\", \"YaCy cannot start: \" + e.getMessage(), e);\r\n                System.exit(-1);\r\n            }\r\n            //sbSync.V(); // signal that the sb reference was set\r\n\r\n            // switch the memory strategy\r\n            MemoryControl.setStandardStrategy(sb.getConfigBool(\"memory.standardStrategy\", true));\r\n\r\n            // save information about available memory at startup time\r\n            sb.setConfig(\"memoryFreeAfterStartup\", startupMemFree);\r\n            sb.setConfig(\"memoryTotalAfterStartup\", startupMemTotal);\r\n\r\n            // start gui if wanted\r\n            if (gui) YaCyApp.start(\"localhost\", (int) sb.getConfigLong(\"port\", 8090));\r\n\r\n            // hardcoded, forced, temporary value-migration\r\n            sb.setConfig(\"htTemplatePath\", \"htroot/env/templates\");\r\n\r\n            int oldRev;\r\n    \t    try {\r\n                oldRev = Integer.parseInt(sb.getConfig(\"svnRevision\", \"0\"));\r\n            } catch (final NumberFormatException e) {\r\n                oldRev = 0;\r\n    \t    }\r\n            final int newRev = Integer.parseInt(yacyBuildProperties.getSVNRevision());\r\n            sb.setConfig(\"svnRevision\", yacyBuildProperties.getSVNRevision());\r\n            sb.setConfig(\"applicationRoot\", appHome.toString());\r\n            sb.setConfig(\"dataRoot\", dataHome.toString());\r\n            yacyVersion.latestRelease = version;\r\n\r\n            // read environment\r\n            final int timeout = Math.max(5000, Integer.parseInt(sb.getConfig(\"httpdTimeout\", \"5000\")));\r\n\r\n            // create some directories\r\n            final File htRootPath = new File(appHome, sb.getConfig(\"htRootPath\", \"htroot\"));\r\n            final File htDocsPath = sb.getDataPath(SwitchboardConstants.HTDOCS_PATH, SwitchboardConstants.HTDOCS_PATH_DEFAULT);\r\n            mkdirIfNeseccary(htDocsPath);\r\n            //final File htTemplatePath = new File(homePath, sb.getConfig(\"htTemplatePath\",\"htdocs\"));\r\n\r\n            // copy the donate iframe (better to copy this once here instead of doing this in an actual iframe in the search result)\r\n            final File wwwEnvPath = new File(htDocsPath, \"env\");\r\n            mkdirIfNeseccary(wwwEnvPath);\r\n            final String iframesource = sb.getConfig(\"donation.iframesource\", \"\");\r\n            final String iframetarget = sb.getConfig(\"donation.iframetarget\", \"\");\r\n            final File iframefile = new File(htDocsPath, iframetarget);\r\n            if (!iframefile.exists()) new Thread() {\r\n                public void run() {\r\n                    final ClientIdentification.Agent agent = ClientIdentification.getAgent(ClientIdentification.yacyInternetCrawlerAgentName);\r\n                    Response response;\r\n                    try {\r\n                        response = sb.loader == null ? null : sb.loader.load(sb.loader.request(new DigestURL(iframesource), false, true), CacheStrategy.NOCACHE, Integer.MAX_VALUE, null, agent);\r\n                        if (response != null) FileUtils.copy(response.getContent(), iframefile);\r\n                    } catch (Throwable e) {}\r\n                }\r\n            }.start();\r\n            \r\n            // create default notifier picture\r\n            File notifierFile = new File(htDocsPath, \"notifier.gif\");\r\n            if (!notifierFile.exists()) try {Files.copy(new File(htRootPath, \"env/grafics/empty.gif\"), notifierFile);} catch (final IOException e) {}\r\n\r\n            final File htdocsReadme = new File(htDocsPath, \"readme.txt\");\r\n            if (!(htdocsReadme.exists())) try {FileUtils.copy((\r\n                    \"This is your root directory for individual Web Content\\r\\n\" +\r\n                    \"\\r\\n\" +\r\n                    \"Please place your html files into the www subdirectory.\\r\\n\" +\r\n                    \"The URL of that path is either\\r\\n\" +\r\n                    \"http://www.<your-peer-name>.yacy    or\\r\\n\" +\r\n                    \"http://<your-ip>:<your-port>/www\\r\\n\" +\r\n                    \"\\r\\n\" +\r\n                    \"Other subdirectories may be created; they map to corresponding sub-domains.\\r\\n\" +\r\n                    \"This directory shares it's content with the applications htroot path, so you\\r\\n\" +\r\n                    \"may access your yacy search page with\\r\\n\" +\r\n                    \"http://<your-peer-name>.yacy/\\r\\n\" +\r\n                    \"\\r\\n\").getBytes(), htdocsReadme);} catch (final IOException e) {\r\n                        System.out.println(\"Error creating htdocs readme: \" + e.getMessage());\r\n                    }\r\n\r\n            final File wwwDefaultPath = new File(htDocsPath, \"www\");\r\n            mkdirIfNeseccary(wwwDefaultPath);\r\n\r\n            final File shareDefaultPath = new File(htDocsPath, \"share\");\r\n            mkdirIfNeseccary(shareDefaultPath);\r\n\r\n            migration.migrate(sb, oldRev, newRev);\r\n\r\n            // delete old release files\r\n            final int deleteOldDownloadsAfterDays = (int) sb.getConfigLong(\"update.deleteOld\", 30);\r\n            yacyRelease.deleteOldDownloads(sb.releasePath, deleteOldDownloadsAfterDays );\r\n\r\n            // set user-agent\r\n            HTTPClient.setDefaultUserAgent(ClientIdentification.yacyInternetCrawlerAgent.userAgent);\r\n\r\n            // initial fill of the triplestore\r\n            File triplestore = new File(sb.getConfig(\"triplestore\", new File(dataHome, \"DATA/TRIPLESTORE\").getAbsolutePath()));\r\n            mkdirIfNeseccary(triplestore);\r\n            for (String s: triplestore.list()) {\r\n            \tif ((s.endsWith(\".rdf\") || s.endsWith(\".nt\")) && !s.equals(\"local.rdf\") && !s.endsWith(\"_triplestore.rdf\") && !s.startsWith(\"private_store_\")) {\r\n                    try {\r\n                        JenaTripleStore.load(new File(triplestore, s).getAbsolutePath());\r\n                    } catch (final IOException e) {\r\n                        ConcurrentLog.logException(e);\r\n                    }\r\n            \t}\r\n            }\r\n            if (sb.getConfigBool(\"triplestore.persistent\", false)) {\r\n                File local = new File(triplestore, \"local.rdf\");\r\n                if (local.exists()) {\r\n                    try {\r\n                        JenaTripleStore.load(local.getAbsolutePath());\r\n                    } catch (final IOException e) {\r\n                        ConcurrentLog.logException(e);\r\n                    }\r\n                }\r\n            }\r\n\r\n            // start main threads\r\n            final int port = sb.getConfigInt(\"port\", 8090);\r\n            try {\r\n                // start http server\r\n            \tYaCyHttpServer httpServer;\r\n                httpServer = new Jetty8HttpServerImpl(port);\r\n                httpServer.startupServer();\r\n                sb.setHttpServer(httpServer);\r\n                ConcurrentLog.info(\"STARTUP\",httpServer.getVersion());\r\n                \r\n                // open the browser window\r\n                final boolean browserPopUpTrigger = sb.getConfig(SwitchboardConstants.BROWSER_POP_UP_TRIGGER, \"true\").equals(\"true\");\r\n                if (browserPopUpTrigger) try {\r\n                    final String  browserPopUpPage = sb.getConfig(SwitchboardConstants.BROWSER_POP_UP_PAGE, \"ConfigBasic.html\");\r\n                    //boolean properPW = (sb.getConfig(SwitchboardConstants.ADMIN_ACCOUNT, \"\").isEmpty()) && (sb.getConfig(httpd.ADMIN_ACCOUNT_B64MD5, \"\").length() > 0);\r\n                    //if (!properPW) browserPopUpPage = \"ConfigBasic.html\";\r\n                    Browser.openBrowser((\"http://localhost:\"+port) + \"/\" + browserPopUpPage);\r\n                   // Browser.openBrowser((server.withSSL()?\"https\":\"http\") + \"://localhost:\" + serverCore.getPortNr(port) + \"/\" + browserPopUpPage);\r\n                } catch (final Throwable e) {\r\n                    // cannot open browser. This may be normal in headless environments\r\n                    //Log.logException(e);\r\n                }\r\n\r\n                // enable browser popup, http server is ready now\r\n                sb.tray.setReady();\r\n\r\n                //regenerate Locales from Translationlist, if needed\r\n                final File locale_source = sb.getAppPath(\"locale.source\", \"locales\");\r\n                final String lang = sb.getConfig(\"locale.language\", \"\");\r\n                if (!lang.equals(\"\") && !lang.equals(\"default\")) { //locale is used\r\n                    String currentRev = \"\";\r\n                    try{\r\n                        final BufferedReader br = new BufferedReader(new InputStreamReader(new FileInputStream(new File(sb.getDataPath(\"locale.translated_html\", \"DATA/LOCALE/htroot\"), lang+\"/version\" ))));\r\n                        currentRev = br.readLine();\r\n                        br.close();\r\n                    }catch(final IOException e){\r\n                        //Error\r\n                    }\r\n\r\n                    if (!currentRev.equals(sb.getConfig(\"svnRevision\", \"\"))) try { //is this another version?!\r\n                        final File sourceDir = new File(sb.getConfig(\"htRootPath\", \"htroot\"));\r\n                        final File destDir = new File(sb.getDataPath(\"locale.translated_html\", \"DATA/LOCALE/htroot\"), lang);\r\n                        if (Translator.translateFilesRecursive(sourceDir, destDir, new File(locale_source, lang + \".lng\"), \"html,template,inc\", \"locale\")){ //translate it\r\n                            //write the new Versionnumber\r\n                            final BufferedWriter bw = new BufferedWriter(new PrintWriter(new FileWriter(new File(destDir, \"version\"))));\r\n                            bw.write(sb.getConfig(\"svnRevision\", \"Error getting Version\"));\r\n                            bw.close();\r\n                        }\r\n                    } catch (final IOException e) {}\r\n                }\r\n                // initialize number formatter with this locale\r\n                Formatter.setLocale(lang);\r\n\r\n                // registering shutdown hook\r\n                ConcurrentLog.config(\"STARTUP\", \"Registering Shutdown Hook\");\r\n                final Runtime run = Runtime.getRuntime();\r\n                run.addShutdownHook(new shutdownHookThread(Thread.currentThread(), sb));\r\n\r\n                // save information about available memory after all initializations\r\n                //try {\r\n                    sb.setConfig(\"memoryFreeAfterInitBGC\", MemoryControl.free());\r\n                    sb.setConfig(\"memoryTotalAfterInitBGC\", MemoryControl.total());\r\n                    System.gc();\r\n                    sb.setConfig(\"memoryFreeAfterInitAGC\", MemoryControl.free());\r\n                    sb.setConfig(\"memoryTotalAfterInitAGC\", MemoryControl.total());\r\n                //} catch (final ConcurrentModificationException e) {}\r\n\r\n                // wait for server shutdown\r\n                try {\r\n                    sb.waitForShutdown();\r\n                } catch (final Exception e) {\r\n                    ConcurrentLog.severe(\"MAIN CONTROL LOOP\", \"PANIC: \" + e.getMessage(),e);\r\n                }\r\n                // shut down\r\n                Array.terminate();\r\n                ConcurrentLog.config(\"SHUTDOWN\", \"caught termination signal\");\r\n                httpServer.stop();\r\n\r\n                ConcurrentLog.config(\"SHUTDOWN\", \"server has terminated\");\r\n                sb.close();\r\n            } catch (final Exception e) {\r\n                ConcurrentLog.severe(\"STARTUP\", \"Unexpected Error: \" + e.getClass().getName(),e);\r\n                //System.exit(1);\r\n            }\r\n            if(lock != null) lock.release();\r\n            if(channel != null) channel.close();\r\n        } catch (final Exception ee) {\r\n            ConcurrentLog.severe(\"STARTUP\", \"FATAL ERROR: \" + ee.getMessage(),ee);\r\n        } finally {\r\n        }\r\n\r\n        // save the triple store\r\n        if (sb.getConfigBool(\"triplestore.persistent\", false)) {\r\n            JenaTripleStore.saveAll();\r\n        }\r\n\r\n        ConcurrentLog.config(\"SHUTDOWN\", \"goodbye. (this is the last line)\");\r\n        ConcurrentLog.shutdown();\r\n        shutdownSemaphore.release(1000);\r\n        try {\r\n            System.exit(0);\r\n        } catch (final Exception e) {} // was once stopped by de.anomic.net.ftpc$sm.checkExit(ftpc.java:1790)\r\n    }","commit_id":"30d925a96e589d61bdaed8f818ee706f725a698f","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"/**\r\n     * Main-method which is started by java. Checks for special arguments or\r\n     * starts up the application.\r\n     *\r\n     * @param args\r\n     *            Given arguments from the command line.\r\n     */\r\n    public static void main(String args[]) {\r\n\r\n    \ttry {\r\n\r\n\t        // check assertion status\r\n\t        //ClassLoader.getSystemClassLoader().setDefaultAssertionStatus(true);\r\n\t        boolean assertionenabled = false;\r\n\t        assert (assertionenabled = true) == true; // compare to true to remove warning: \"Possible accidental assignement\"\r\n\t        if (assertionenabled) System.out.println(\"Asserts are enabled\");\r\n\r\n\t        // check memory amount\r\n\t        System.gc();\r\n\t        final long startupMemFree  = MemoryControl.free();\r\n\t        final long startupMemTotal = MemoryControl.total();\r\n\r\n\t        // maybe go into headless awt mode: we have three cases depending on OS and one exception:\r\n\t        // windows   : better do not go into headless mode\r\n\t        // mac       : go into headless mode because an application is shown in gui which may not be wanted\r\n\t        // linux     : go into headless mode because this does not need any head operation\r\n\t        // exception : if the -gui option is used then do not go into headless mode since that uses a gui\r\n\t        boolean headless = true;\r\n\t        if (OS.isWindows) headless = false;\r\n\t        if (args.length >= 1 && args[0].toLowerCase().equals(\"-gui\")) headless = false;\r\n\t        System.setProperty(\"java.awt.headless\", headless ? \"true\" : \"false\");\r\n            // System.setProperty(\"java.net.preferIPv4Stack\", \"true\"); // DO NOT PREFER IPv6, i.e. freifunk uses ipv6 only and host resolving does not work\r\n           \r\n\t        String s = \"\"; for (final String a: args) s += a + \" \";\r\n\t        yacyRelease.startParameter = s.trim();\r\n\r\n\t        File applicationRoot = new File(System.getProperty(\"user.dir\").replace('\\\\', '/'));\r\n\t        File dataRoot = applicationRoot;\r\n\t        //System.out.println(\"args.length=\" + args.length);\r\n\t        //System.out.print(\"args=[\"); for (int i = 0; i < args.length; i++) System.out.print(args[i] + \", \"); System.out.println(\"]\");\r\n\t        if ((args.length >= 1) && (args[0].toLowerCase().equals(\"-startup\") || args[0].equals(\"-start\"))) {\r\n\t            // normal start-up of yacy\r\n\t            if (args.length > 1) dataRoot = new File(System.getProperty(\"user.home\").replace('\\\\', '/'), args[1]);\r\n\t            startup(dataRoot, applicationRoot, startupMemFree, startupMemTotal, false);\r\n\t        } else if (args.length >= 1 && args[0].toLowerCase().equals(\"-gui\")) {\r\n\t            // start-up of yacy with gui\r\n\t            if (args.length > 1) dataRoot = new File(System.getProperty(\"user.home\").replace('\\\\', '/'), args[1]);\r\n\t            startup(dataRoot, applicationRoot, startupMemFree, startupMemTotal, true);\r\n\t        } else if ((args.length >= 1) && ((args[0].toLowerCase().equals(\"-shutdown\")) || (args[0].equals(\"-stop\")))) {\r\n\t            // normal shutdown of yacy\r\n\t            if (args.length == 2) applicationRoot= new File(args[1]);\r\n\t            shutdown(applicationRoot);\r\n\t        } else if ((args.length >= 1) && (args[0].toLowerCase().equals(\"-update\"))) {\r\n\t            // aut-update yacy\r\n\t            if (args.length == 2) applicationRoot= new File(args[1]);\r\n\t            update(applicationRoot);\r\n\t        } else if ((args.length >= 1) && (args[0].toLowerCase().equals(\"-version\"))) {\r\n\t            // show yacy version\r\n\t            System.out.println(copyright);\r\n\t        } else {\r\n\t            if (args.length == 1) applicationRoot= new File(args[0]);\r\n\t            startup(dataRoot, applicationRoot, startupMemFree, startupMemTotal, false);\r\n\t        }\r\n    \t} finally {\r\n    \t\tConcurrentLog.shutdown();\r\n    \t}\r\n    }","id":96937,"modified_method":"/**\r\n     * Main-method which is started by java. Checks for special arguments or\r\n     * starts up the application.\r\n     *\r\n     * @param args\r\n     *            Given arguments from the command line.\r\n     */\r\n    public static void main(String args[]) {\r\n\r\n    \ttry {\r\n\r\n\t        // check assertion status\r\n\t        //ClassLoader.getSystemClassLoader().setDefaultAssertionStatus(true);\r\n\t        boolean assertionenabled = false;\r\n\t        assert (assertionenabled = true) == true; // compare to true to remove warning: \"Possible accidental assignement\"\r\n\t        if (assertionenabled) System.out.println(\"Asserts are enabled\");\r\n\r\n\t        // check memory amount\r\n\t        System.gc();\r\n\t        final long startupMemFree  = MemoryControl.free();\r\n\t        final long startupMemTotal = MemoryControl.total();\r\n\r\n\t        // maybe go into headless awt mode: we have three cases depending on OS and one exception:\r\n\t        // windows   : better do not go into headless mode\r\n\t        // mac       : go into headless mode because an application is shown in gui which may not be wanted\r\n\t        // linux     : go into headless mode because this does not need any head operation\r\n\t        // exception : if the -gui option is used then do not go into headless mode since that uses a gui\r\n\t        boolean headless = true;\r\n\t        if (OS.isWindows) headless = false;\r\n\t        if (args.length >= 1 && args[0].toLowerCase().equals(\"-gui\")) headless = false;\r\n\t        System.setProperty(\"java.awt.headless\", headless ? \"true\" : \"false\");\r\n            // System.setProperty(\"java.net.preferIPv4Stack\", \"true\"); // DO NOT PREFER IPv6, i.e. freifunk uses ipv6 only and host resolving does not work\r\n           \r\n\t        String s = \"\"; for (final String a: args) s += a + \" \";\r\n\t        yacyRelease.startParameter = s.trim();\r\n\r\n\t        File applicationRoot = new File(System.getProperty(\"user.dir\").replace('\\\\', '/'));\r\n\t        File dataRoot = applicationRoot;\r\n\t        //System.out.println(\"args.length=\" + args.length);\r\n\t        //System.out.print(\"args=[\"); for (int i = 0; i < args.length; i++) System.out.print(args[i] + \", \"); System.out.println(\"]\");\r\n\t        if ((args.length >= 1) && (args[0].toLowerCase().equals(\"-startup\") || args[0].equals(\"-start\"))) {\r\n\t            // normal start-up of yacy\r\n\t            if (args.length > 1) dataRoot = new File(System.getProperty(\"user.home\").replace('\\\\', '/'), args[1]);\r\n                    preReadSavedConfigandInit(dataRoot);\r\n\t            startup(dataRoot, applicationRoot, startupMemFree, startupMemTotal, false);\r\n\t        } else if (args.length >= 1 && args[0].toLowerCase().equals(\"-gui\")) {\r\n\t            // start-up of yacy with gui\r\n\t            if (args.length > 1) dataRoot = new File(System.getProperty(\"user.home\").replace('\\\\', '/'), args[1]);\r\n                    preReadSavedConfigandInit(dataRoot);\r\n\t            startup(dataRoot, applicationRoot, startupMemFree, startupMemTotal, true);\r\n\t        } else if ((args.length >= 1) && ((args[0].toLowerCase().equals(\"-shutdown\")) || (args[0].equals(\"-stop\")))) {\r\n\t            // normal shutdown of yacy\r\n\t            if (args.length == 2) applicationRoot= new File(args[1]);\r\n\t            shutdown(applicationRoot);\r\n\t        } else if ((args.length >= 1) && (args[0].toLowerCase().equals(\"-update\"))) {\r\n\t            // aut-update yacy\r\n\t            if (args.length == 2) applicationRoot= new File(args[1]);\r\n\t            update(applicationRoot);\r\n\t        } else if ((args.length >= 1) && (args[0].toLowerCase().equals(\"-version\"))) {\r\n\t            // show yacy version\r\n\t            System.out.println(copyright);\r\n\t        } else {\r\n\t            if (args.length == 1) applicationRoot= new File(args[0]);\r\n                    preReadSavedConfigandInit(dataRoot);\r\n\t            startup(dataRoot, applicationRoot, startupMemFree, startupMemTotal, false);\r\n\t        }\r\n    \t} finally {\r\n    \t\tConcurrentLog.shutdown();\r\n    \t}\r\n    }","commit_id":"30d925a96e589d61bdaed8f818ee706f725a698f","url":"https://github.com/yacy/yacy_search_server"},{"original_method":"/**\n   * Create a status server on the given port.\n   * The jsp scripts are taken from src/webapps/<name>.\n   * @param name The name of the server\n   * @param bindAddress The address for this server\n   * @param port The port to use on the server\n   * @param findPort whether the server should start at the given port and \n   *        increment by 1 until it finds a free port.\n   * @param conf Configuration \n   * @param adminsAcl {@link AccessControlList} of the admins\n   * @param connector A jetty connection listener\n   * @param pathSpecs Path specifications that this httpserver will be serving. \n   *        These will be added to any filters.\n   */\n  public HttpServer(String name, String bindAddress, int port,\n      boolean findPort, Configuration conf, AccessControlList adminsAcl, \n      Connector connector, String[] pathSpecs) throws IOException {\n    webServer = new Server();\n    this.findPort = findPort;\n    this.adminsAcl = adminsAcl;\n    \n    if(connector == null) {\n      listenerStartedExternally = false;\n      if (HttpConfig.isSecure()) {\n        sslFactory = new SSLFactory(SSLFactory.Mode.SERVER, conf);\n        try {\n          sslFactory.init();\n        } catch (GeneralSecurityException ex) {\n          throw new IOException(ex);\n        }\n        SslSocketConnector sslListener = new SslSocketConnector() {\n          @Override\n          protected SSLServerSocketFactory createFactory() throws Exception {\n            return sslFactory.createSSLServerSocketFactory();\n          }\n        };\n        listener = sslListener;\n      } else {\n        listener = createBaseListener(conf);\n      }\n      listener.setHost(bindAddress);\n      listener.setPort(port);\n    } else {\n      listenerStartedExternally = true;\n      listener = connector;\n    }\n    \n    webServer.addConnector(listener);\n\n    int maxThreads = conf.getInt(HTTP_MAX_THREADS, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n    QueuedThreadPool threadPool = maxThreads == -1 ?\n        new QueuedThreadPool() : new QueuedThreadPool(maxThreads);\n    threadPool.setDaemon(true);\n    webServer.setThreadPool(threadPool);\n\n    final String appDir = getWebAppsPath(name);\n    ContextHandlerCollection contexts = new ContextHandlerCollection();\n    webServer.setHandler(contexts);\n\n    webAppContext = new WebAppContext();\n    webAppContext.setDisplayName(name);\n    webAppContext.setContextPath(\"/\");\n    webAppContext.setWar(appDir + \"/\" + name);\n    webAppContext.getServletContext().setAttribute(CONF_CONTEXT_ATTRIBUTE, conf);\n    webAppContext.getServletContext().setAttribute(ADMINS_ACL, adminsAcl);\n    addNoCacheFilter(webAppContext);\n    webServer.addHandler(webAppContext);\n\n    addDefaultApps(contexts, appDir, conf);\n        \n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), null);\n    final FilterInitializer[] initializers = getFilterInitializers(conf); \n    if (initializers != null) {\n      conf = new Configuration(conf);\n      conf.set(BIND_ADDRESS, bindAddress);\n      for(FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n\n    if (pathSpecs != null) {\n      for (String path : pathSpecs) {\n        LOG.info(\"adding path spec: \" + path);\n        addFilterPathMapping(path, webAppContext);\n      }\n    }\n  }","id":96938,"modified_method":"/**\n   * Create a status server on the given port.\n   * The jsp scripts are taken from src/webapps/<name>.\n   * @param name The name of the server\n   * @param bindAddress The address for this server\n   * @param port The port to use on the server\n   * @param findPort whether the server should start at the given port and \n   *        increment by 1 until it finds a free port.\n   * @param conf Configuration \n   * @param adminsAcl {@link AccessControlList} of the admins\n   * @param connector A jetty connection listener\n   * @param pathSpecs Path specifications that this httpserver will be serving. \n   *        These will be added to any filters.\n   */\n  public HttpServer(String name, String bindAddress, int port,\n      boolean findPort, Configuration conf, AccessControlList adminsAcl, \n      Connector connector, String[] pathSpecs) throws IOException {\n    webServer = new Server();\n    this.findPort = findPort;\n    this.adminsAcl = adminsAcl;\n    \n    if(connector == null) {\n      listenerStartedExternally = false;\n      if (HttpConfig.isSecure()) {\n        sslFactory = new SSLFactory(SSLFactory.Mode.SERVER, conf);\n        try {\n          sslFactory.init();\n        } catch (GeneralSecurityException ex) {\n          throw new IOException(ex);\n        }\n        SslSocketConnector sslListener = new SslSocketConnector() {\n          @Override\n          protected SSLServerSocketFactory createFactory() throws Exception {\n            return sslFactory.createSSLServerSocketFactory();\n          }\n        };\n        listener = sslListener;\n      } else {\n        listener = createBaseListener(conf);\n      }\n      listener.setHost(bindAddress);\n      listener.setPort(port);\n    } else {\n      listenerStartedExternally = true;\n      listener = connector;\n    }\n    \n    webServer.addConnector(listener);\n\n    int maxThreads = conf.getInt(HTTP_MAX_THREADS, -1);\n    // If HTTP_MAX_THREADS is not configured, QueueThreadPool() will use the\n    // default value (currently 250).\n    QueuedThreadPool threadPool = maxThreads == -1 ?\n        new QueuedThreadPool() : new QueuedThreadPool(maxThreads);\n    threadPool.setDaemon(true);\n    webServer.setThreadPool(threadPool);\n\n    final String appDir = getWebAppsPath(name);\n    ContextHandlerCollection contexts = new ContextHandlerCollection();\n    RequestLog requestLog = HttpRequestLog.getRequestLog(name);\n\n    if (requestLog != null) {\n      RequestLogHandler requestLogHandler = new RequestLogHandler();\n      requestLogHandler.setRequestLog(requestLog);\n      HandlerCollection handlers = new HandlerCollection();\n      handlers.setHandlers(new Handler[] {requestLogHandler, contexts});\n      webServer.setHandler(handlers);\n    }\n    else {\n      webServer.setHandler(contexts);\n    }\n\n    webAppContext = new WebAppContext();\n    webAppContext.setDisplayName(name);\n    webAppContext.setContextPath(\"/\");\n    webAppContext.setWar(appDir + \"/\" + name);\n    webAppContext.getServletContext().setAttribute(CONF_CONTEXT_ATTRIBUTE, conf);\n    webAppContext.getServletContext().setAttribute(ADMINS_ACL, adminsAcl);\n    addNoCacheFilter(webAppContext);\n    webServer.addHandler(webAppContext);\n\n    addDefaultApps(contexts, appDir, conf);\n        \n    addGlobalFilter(\"safety\", QuotingInputFilter.class.getName(), null);\n    final FilterInitializer[] initializers = getFilterInitializers(conf); \n    if (initializers != null) {\n      conf = new Configuration(conf);\n      conf.set(BIND_ADDRESS, bindAddress);\n      for(FilterInitializer c : initializers) {\n        c.initFilter(this, conf);\n      }\n    }\n\n    addDefaultServlets();\n\n    if (pathSpecs != null) {\n      for (String path : pathSpecs) {\n        LOG.info(\"adding path spec: \" + path);\n        addFilterPathMapping(path, webAppContext);\n      }\n    }\n  }","commit_id":"6cfcd391652ffe03fa95fdf2e29b1d10fcae4ea6","url":"https://github.com/apache/hadoop"},{"original_method":"/**\n   * Prepare the test webapp by creating the directory from the test properties\n   * fail if the directory cannot be created.\n   * @throws AssertionError if a condition was not met\n   */\n  protected static void prepareTestWebapp() {\n    String webapps = System.getProperty(TEST_BUILD_WEBAPPS, BUILD_WEBAPPS_DIR);\n    File testWebappDir = new File(webapps +\n        File.separatorChar + TEST);\n    if (!testWebappDir.exists()) {\n      fail(\"Test webapp dir \" + testWebappDir + \" missing\");\n    }\n  }","id":96939,"modified_method":"/**\n   * Prepare the test webapp by creating the directory from the test properties\n   * fail if the directory cannot be created.\n   * @throws AssertionError if a condition was not met\n   */\n  protected static void prepareTestWebapp() {\n    String webapps = System.getProperty(TEST_BUILD_WEBAPPS, BUILD_WEBAPPS_DIR);\n    File testWebappDir = new File(webapps +\n        File.separatorChar + TEST);\n    try {\n    if (!testWebappDir.exists()) {\n      fail(\"Test webapp dir \" + testWebappDir.getCanonicalPath() + \" missing\");\n    }\n    }\n    catch (IOException e) {\n    }\n  }","commit_id":"6cfcd391652ffe03fa95fdf2e29b1d10fcae4ea6","url":"https://github.com/apache/hadoop"},{"original_method":"public String getAssignedTheTaskMessageKey(WorkflowLog workflowLog)\n\t\tthrows PortalException {\n\n\t\tUser user = getUser(workflowLog.getUserId());\n\n\t\treturn user.isMale() ?\n\t\t\t\"x-assigned-the-task-to-himself\" : \"x-assigned-the-task-to-herself\";\n\t}","id":96940,"modified_method":"public String getAssignedTheTaskMessageKey(WorkflowLog workflowLog)\n\t\tthrows PortalException {\n\n\t\tUser user = getUser(workflowLog.getUserId());\n\n\t\tif (user.isMale()) {\n\t\t\treturn \"x-assigned-the-task-to-himself\";\n\t\t}\n\t\telse {\n\t\t\treturn \"x-assigned-the-task-to-herself\";\n\t\t}\n\t}","commit_id":"3664125596b0575702ff724adbf67d8dd98ed4c7","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected static int getValue(char c) {\n\t\tif ((c >= CharPool.UPPER_CASE_A) && (c <= CharPool.UPPER_CASE_Z)) {\n\t\t\treturn c - 65;\n\t\t}\n\n\t\tif ((c >= CharPool.LOWER_CASE_A) && (c <= CharPool.LOWER_CASE_Z)) {\n\t\t\treturn (c - 97) + 26;\n\t\t}\n\n\t\tif ((c >= CharPool.NUMBER_0) && (c <= CharPool.NUMBER_9)) {\n\t\t\treturn (c - 48) + 52;\n\t\t}\n\n\t\tif (c == CharPool.PLUS) {\n\t\t\treturn 62;\n\t\t}\n\n\t\tif (c == CharPool.SLASH) {\n\t\t\treturn 63;\n\t\t}\n\n\t\treturn c != CharPool.EQUAL ? -1 : 0;\n\t}","id":96941,"modified_method":"protected static int getValue(char c) {\n\t\tif ((c >= CharPool.UPPER_CASE_A) && (c <= CharPool.UPPER_CASE_Z)) {\n\t\t\treturn c - 65;\n\t\t}\n\n\t\tif ((c >= CharPool.LOWER_CASE_A) && (c <= CharPool.LOWER_CASE_Z)) {\n\t\t\treturn (c - 97) + 26;\n\t\t}\n\n\t\tif ((c >= CharPool.NUMBER_0) && (c <= CharPool.NUMBER_9)) {\n\t\t\treturn (c - 48) + 52;\n\t\t}\n\n\t\tif (c == CharPool.PLUS) {\n\t\t\treturn 62;\n\t\t}\n\n\t\tif (c == CharPool.SLASH) {\n\t\t\treturn 63;\n\t\t}\n\n\t\tif (c != CharPool.EQUAL) {\n\t\t\treturn -1;\n\t\t}\n\n\t\treturn 0;\n\t}","commit_id":"25315d5141622bdfa89eb74992a061b14b79f227","url":"https://github.com/liferay/liferay-portal"},{"original_method":"protected static char getChar(int sixbit) {\n\t\tif ((sixbit >= 0) && (sixbit <= 25)) {\n\t\t\treturn (char)(65 + sixbit);\n\t\t}\n\n\t\tif ((sixbit >= 26) && (sixbit <= 51)) {\n\t\t\treturn (char)(97 + (sixbit - 26));\n\t\t}\n\n\t\tif ((sixbit >= 52) && (sixbit <= 61)) {\n\t\t\treturn (char)(48 + (sixbit - 52));\n\t\t}\n\n\t\tif (sixbit == 62) {\n\t\t\treturn CharPool.PLUS;\n\t\t}\n\n\t\treturn sixbit != 63 ? CharPool.QUESTION : CharPool.SLASH;\n\t}","id":96942,"modified_method":"protected static char getChar(int sixbit) {\n\t\tif ((sixbit >= 0) && (sixbit <= 25)) {\n\t\t\treturn (char)(65 + sixbit);\n\t\t}\n\n\t\tif ((sixbit >= 26) && (sixbit <= 51)) {\n\t\t\treturn (char)(97 + (sixbit - 26));\n\t\t}\n\n\t\tif ((sixbit >= 52) && (sixbit <= 61)) {\n\t\t\treturn (char)(48 + (sixbit - 52));\n\t\t}\n\n\t\tif (sixbit == 62) {\n\t\t\treturn CharPool.PLUS;\n\t\t}\n\n\t\tif (sixbit != 63) {\n\t\t\treturn CharPool.QUESTION;\n\t\t}\n\n\t\treturn CharPool.SLASH;\n\t}","commit_id":"25315d5141622bdfa89eb74992a061b14b79f227","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public long getTrashEntryId() {\n\t\tTrashEntry trashEntry = getTrashEntry();\n\n\t\treturn (trashEntry != null) ? trashEntry.getEntryId() : 0;\n\t}","id":96943,"modified_method":"public long getTrashEntryId() {\n\t\tTrashEntry trashEntry = getTrashEntry();\n\n\t\tif (trashEntry != null) {\n\t\t\treturn trashEntry.getEntryId();\n\t\t}\n\n\t\treturn 0;\n\t}","commit_id":"25315d5141622bdfa89eb74992a061b14b79f227","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public String getValue(String name) throws PortalException {\n\t\tif (name == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (name.equals(LIFERAY_COMPANY_ID)) {\n\t\t\treturn String.valueOf(_user.getCompanyId());\n\t\t}\n\t\telse if (name.equals(LIFERAY_USER_ID)) {\n\t\t\treturn String.valueOf(_user.getUserId());\n\t\t}\n\t\telse if (name.equals(USER_NAME_FULL)) {\n\t\t\treturn _user.getFullName();\n\t\t}\n\t\telse if (name.equals(USER_BDATE)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\treturn birthday.toString();\n\t\t}\n\t\telse if (name.equals(USER_BDATE_DAY)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\tif (birthday != null) {\n\t\t\t\t_calendar.setTime(birthday);\n\n\t\t\t\treturn String.valueOf(_calendar.get(Calendar.DATE));\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\telse if (name.equals(USER_BDATE_FRACTIONSECOND)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\tif (birthday != null) {\n\t\t\t\t_calendar.setTime(birthday);\n\n\t\t\t\treturn String.valueOf(_calendar.get(Calendar.MILLISECOND));\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\telse if (name.equals(USER_BDATE_HOUR)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\tif (birthday != null) {\n\t\t\t\t_calendar.setTime(birthday);\n\n\t\t\t\treturn String.valueOf(_calendar.get(Calendar.HOUR));\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\telse if (name.equals(USER_BDATE_MINUTE)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\tif (birthday != null) {\n\t\t\t\t_calendar.setTime(birthday);\n\n\t\t\t\treturn String.valueOf(_calendar.get(Calendar.MINUTE));\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\telse if (name.equals(USER_BDATE_MONTH)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\tif (birthday != null) {\n\t\t\t\t_calendar.setTime(birthday);\n\n\t\t\t\treturn String.valueOf(_calendar.get(Calendar.MONTH) + 1);\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\telse if (name.equals(USER_BDATE_SECOND)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\tif (birthday != null) {\n\t\t\t\t_calendar.setTime(birthday);\n\n\t\t\t\treturn String.valueOf(_calendar.get(Calendar.SECOND));\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\telse if (name.equals(USER_BDATE_TIMEZONE)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\tif (birthday != null) {\n\t\t\t\t_calendar.setTime(birthday);\n\n\t\t\t\treturn String.valueOf(_calendar.get(Calendar.ZONE_OFFSET));\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\telse if (name.equals(USER_BDATE_YEAR)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\tif (birthday != null) {\n\t\t\t\t_calendar.setTime(birthday);\n\n\t\t\t\treturn String.valueOf(_calendar.get(Calendar.YEAR));\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\telse if (name.equals(USER_GENDER)) {\n\t\t\treturn _user.isMale() ? \"male\" : \"female\";\n\t\t}\n\t\telse if (name.equals(USER_EMPLOYER)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_DEPARTMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_JOBTITLE)) {\n\t\t\treturn _user.getJobTitle();\n\t\t}\n\t\telse if (name.equals(USER_NAME_PREFIX)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_NAME_GIVEN)) {\n\t\t\treturn _user.getFirstName();\n\t\t}\n\t\telse if (name.equals(USER_NAME_FAMILY)) {\n\t\t\treturn _user.getLastName();\n\t\t}\n\t\telse if (name.equals(USER_NAME_MIDDLE)) {\n\t\t\treturn _user.getMiddleName();\n\t\t}\n\t\telse if (name.equals(USER_NAME_SUFFIX)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_NAME_NICKNAME)) {\n\t\t\treturn _user.getScreenName();\n\t\t}\n\t\telse if (name.equals(USER_LOGIN_ID)) {\n\t\t\treturn _user.getScreenName();\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_POSTAL_NAME)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_POSTAL_STREET)) {\n\t\t\tif (_personalAddress != null) {\n\t\t\t\treturn _personalAddress.getStreet1();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_POSTAL_CITY)) {\n\t\t\tif (_personalAddress != null) {\n\t\t\t\treturn _personalAddress.getCity();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_POSTAL_STATEPROV)) {\n\t\t\tif (_personalAddress != null) {\n\t\t\t\tRegion region = _personalAddress.getRegion();\n\n\t\t\t\treturn region.getRegionCode();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_POSTAL_POSTALCODE)) {\n\t\t\tif (_personalAddress != null) {\n\t\t\t\treturn _personalAddress.getZip();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_POSTAL_COUNTRY)) {\n\t\t\tif (_personalAddress != null) {\n\t\t\t\tCountry country = _personalAddress.getCountry();\n\n\t\t\t\treturn country.getName(_user.getLocale());\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_POSTAL_ORGANIZATION)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_TELEPHONE_INTCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_TELEPHONE_LOCCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_TELEPHONE_NUMBER)) {\n\t\t\tif (_personalPhone != null) {\n\t\t\t\treturn _personalPhone.getNumber();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_TELEPHONE_EXT)) {\n\t\t\tif (_personalPhone != null) {\n\t\t\t\treturn _personalPhone.getExtension();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_TELEPHONE_COMMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_FAX_INTCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_FAX_LOCCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_FAX_NUMBER)) {\n\t\t\tif (_personalFaxPhone != null) {\n\t\t\t\treturn _personalFaxPhone.getNumber();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_FAX_EXT)) {\n\t\t\tif (_personalFaxPhone != null) {\n\t\t\t\treturn _personalFaxPhone.getExtension();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_FAX_COMMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_MOBILE_INTCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_MOBILE_LOCCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_MOBILE_NUMBER)) {\n\t\t\tif (_mobilePhone != null) {\n\t\t\t\treturn _mobilePhone.getNumber();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_MOBILE_EXT)) {\n\t\t\tif (_mobilePhone != null) {\n\t\t\t\treturn _mobilePhone.getExtension();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_MOBILE_COMMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_PAGER_INTCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_PAGER_LOCCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_PAGER_NUMBER)) {\n\t\t\tif (_pagerPhone != null) {\n\t\t\t\treturn _pagerPhone.getNumber();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_PAGER_EXT)) {\n\t\t\tif (_pagerPhone != null) {\n\t\t\t\treturn _pagerPhone.getExtension();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_PAGER_COMMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_ONLINE_EMAIL)) {\n\t\t\treturn _user.getEmailAddress();\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_ONLINE_URI)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_POSTAL_NAME)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_POSTAL_STREET)) {\n\t\t\tif (_businessAddress != null) {\n\t\t\t\treturn _businessAddress.getStreet1();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_POSTAL_CITY)) {\n\t\t\tif (_businessAddress != null) {\n\t\t\t\treturn _businessAddress.getCity();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_POSTAL_STATEPROV)) {\n\t\t\tif (_businessAddress != null) {\n\t\t\t\tRegion region = _businessAddress.getRegion();\n\n\t\t\t\treturn region.getRegionCode();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_POSTAL_POSTALCODE)) {\n\t\t\tif (_businessAddress != null) {\n\t\t\t\treturn _businessAddress.getZip();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_POSTAL_COUNTRY)) {\n\t\t\tif (_businessAddress != null) {\n\t\t\t\tCountry country = _businessAddress.getCountry();\n\n\t\t\t\treturn country.getName(_user.getLocale());\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_POSTAL_ORGANIZATION)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_TELEPHONE_INTCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_TELEPHONE_LOCCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_TELEPHONE_NUMBER)) {\n\t\t\tif (_businessPhone != null) {\n\t\t\t\treturn _businessPhone.getNumber();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_TELEPHONE_EXT)) {\n\t\t\tif (_businessPhone != null) {\n\t\t\t\treturn _businessPhone.getExtension();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_TELEPHONE_COMMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_FAX_INTCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_FAX_LOCCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_FAX_NUMBER)) {\n\t\t\tif (_businessFaxPhone != null) {\n\t\t\t\treturn _businessFaxPhone.getNumber();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_FAX_EXT)) {\n\t\t\tif (_businessFaxPhone != null) {\n\t\t\t\treturn _businessFaxPhone.getExtension();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_FAX_COMMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_MOBILE_INTCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_MOBILE_LOCCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_MOBILE_NUMBER)) {\n\t\t\tif (_mobilePhone != null) {\n\t\t\t\treturn _mobilePhone.getNumber();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_MOBILE_EXT)) {\n\t\t\tif (_mobilePhone != null) {\n\t\t\t\treturn _mobilePhone.getExtension();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_MOBILE_COMMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_PAGER_INTCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_PAGER_LOCCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_PAGER_NUMBER)) {\n\t\t\tif (_pagerPhone != null) {\n\t\t\t\treturn _pagerPhone.getNumber();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_PAGER_EXT)) {\n\t\t\tif (_pagerPhone != null) {\n\t\t\t\treturn _pagerPhone.getExtension();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_PAGER_COMMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_ONLINE_EMAIL)) {\n\t\t\treturn _user.getEmailAddress();\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_ONLINE_URI)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}","id":96944,"modified_method":"public String getValue(String name) throws PortalException {\n\t\tif (name == null) {\n\t\t\treturn null;\n\t\t}\n\n\t\tif (name.equals(LIFERAY_COMPANY_ID)) {\n\t\t\treturn String.valueOf(_user.getCompanyId());\n\t\t}\n\t\telse if (name.equals(LIFERAY_USER_ID)) {\n\t\t\treturn String.valueOf(_user.getUserId());\n\t\t}\n\t\telse if (name.equals(USER_NAME_FULL)) {\n\t\t\treturn _user.getFullName();\n\t\t}\n\t\telse if (name.equals(USER_BDATE)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\treturn birthday.toString();\n\t\t}\n\t\telse if (name.equals(USER_BDATE_DAY)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\tif (birthday != null) {\n\t\t\t\t_calendar.setTime(birthday);\n\n\t\t\t\treturn String.valueOf(_calendar.get(Calendar.DATE));\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\telse if (name.equals(USER_BDATE_FRACTIONSECOND)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\tif (birthday != null) {\n\t\t\t\t_calendar.setTime(birthday);\n\n\t\t\t\treturn String.valueOf(_calendar.get(Calendar.MILLISECOND));\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\telse if (name.equals(USER_BDATE_HOUR)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\tif (birthday != null) {\n\t\t\t\t_calendar.setTime(birthday);\n\n\t\t\t\treturn String.valueOf(_calendar.get(Calendar.HOUR));\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\telse if (name.equals(USER_BDATE_MINUTE)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\tif (birthday != null) {\n\t\t\t\t_calendar.setTime(birthday);\n\n\t\t\t\treturn String.valueOf(_calendar.get(Calendar.MINUTE));\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\telse if (name.equals(USER_BDATE_MONTH)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\tif (birthday != null) {\n\t\t\t\t_calendar.setTime(birthday);\n\n\t\t\t\treturn String.valueOf(_calendar.get(Calendar.MONTH) + 1);\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\telse if (name.equals(USER_BDATE_SECOND)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\tif (birthday != null) {\n\t\t\t\t_calendar.setTime(birthday);\n\n\t\t\t\treturn String.valueOf(_calendar.get(Calendar.SECOND));\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\telse if (name.equals(USER_BDATE_TIMEZONE)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\tif (birthday != null) {\n\t\t\t\t_calendar.setTime(birthday);\n\n\t\t\t\treturn String.valueOf(_calendar.get(Calendar.ZONE_OFFSET));\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\telse if (name.equals(USER_BDATE_YEAR)) {\n\t\t\tDate birthday = _user.getBirthday();\n\n\t\t\tif (birthday != null) {\n\t\t\t\t_calendar.setTime(birthday);\n\n\t\t\t\treturn String.valueOf(_calendar.get(Calendar.YEAR));\n\t\t\t}\n\n\t\t\treturn null;\n\t\t}\n\t\telse if (name.equals(USER_GENDER)) {\n\t\t\tif (_user.isMale()) {\n\t\t\t\treturn \"male\";\n\t\t\t}\n\n\t\t\treturn \"female\";\n\t\t}\n\t\telse if (name.equals(USER_EMPLOYER)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_DEPARTMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_JOBTITLE)) {\n\t\t\treturn _user.getJobTitle();\n\t\t}\n\t\telse if (name.equals(USER_NAME_PREFIX)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_NAME_GIVEN)) {\n\t\t\treturn _user.getFirstName();\n\t\t}\n\t\telse if (name.equals(USER_NAME_FAMILY)) {\n\t\t\treturn _user.getLastName();\n\t\t}\n\t\telse if (name.equals(USER_NAME_MIDDLE)) {\n\t\t\treturn _user.getMiddleName();\n\t\t}\n\t\telse if (name.equals(USER_NAME_SUFFIX)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_NAME_NICKNAME)) {\n\t\t\treturn _user.getScreenName();\n\t\t}\n\t\telse if (name.equals(USER_LOGIN_ID)) {\n\t\t\treturn _user.getScreenName();\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_POSTAL_NAME)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_POSTAL_STREET)) {\n\t\t\tif (_personalAddress != null) {\n\t\t\t\treturn _personalAddress.getStreet1();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_POSTAL_CITY)) {\n\t\t\tif (_personalAddress != null) {\n\t\t\t\treturn _personalAddress.getCity();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_POSTAL_STATEPROV)) {\n\t\t\tif (_personalAddress != null) {\n\t\t\t\tRegion region = _personalAddress.getRegion();\n\n\t\t\t\treturn region.getRegionCode();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_POSTAL_POSTALCODE)) {\n\t\t\tif (_personalAddress != null) {\n\t\t\t\treturn _personalAddress.getZip();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_POSTAL_COUNTRY)) {\n\t\t\tif (_personalAddress != null) {\n\t\t\t\tCountry country = _personalAddress.getCountry();\n\n\t\t\t\treturn country.getName(_user.getLocale());\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_POSTAL_ORGANIZATION)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_TELEPHONE_INTCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_TELEPHONE_LOCCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_TELEPHONE_NUMBER)) {\n\t\t\tif (_personalPhone != null) {\n\t\t\t\treturn _personalPhone.getNumber();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_TELEPHONE_EXT)) {\n\t\t\tif (_personalPhone != null) {\n\t\t\t\treturn _personalPhone.getExtension();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_TELEPHONE_COMMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_FAX_INTCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_FAX_LOCCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_FAX_NUMBER)) {\n\t\t\tif (_personalFaxPhone != null) {\n\t\t\t\treturn _personalFaxPhone.getNumber();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_FAX_EXT)) {\n\t\t\tif (_personalFaxPhone != null) {\n\t\t\t\treturn _personalFaxPhone.getExtension();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_FAX_COMMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_MOBILE_INTCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_MOBILE_LOCCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_MOBILE_NUMBER)) {\n\t\t\tif (_mobilePhone != null) {\n\t\t\t\treturn _mobilePhone.getNumber();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_MOBILE_EXT)) {\n\t\t\tif (_mobilePhone != null) {\n\t\t\t\treturn _mobilePhone.getExtension();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_MOBILE_COMMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_PAGER_INTCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_PAGER_LOCCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_PAGER_NUMBER)) {\n\t\t\tif (_pagerPhone != null) {\n\t\t\t\treturn _pagerPhone.getNumber();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_PAGER_EXT)) {\n\t\t\tif (_pagerPhone != null) {\n\t\t\t\treturn _pagerPhone.getExtension();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_TELECOM_PAGER_COMMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_ONLINE_EMAIL)) {\n\t\t\treturn _user.getEmailAddress();\n\t\t}\n\t\telse if (name.equals(USER_HOME_INFO_ONLINE_URI)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_POSTAL_NAME)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_POSTAL_STREET)) {\n\t\t\tif (_businessAddress != null) {\n\t\t\t\treturn _businessAddress.getStreet1();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_POSTAL_CITY)) {\n\t\t\tif (_businessAddress != null) {\n\t\t\t\treturn _businessAddress.getCity();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_POSTAL_STATEPROV)) {\n\t\t\tif (_businessAddress != null) {\n\t\t\t\tRegion region = _businessAddress.getRegion();\n\n\t\t\t\treturn region.getRegionCode();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_POSTAL_POSTALCODE)) {\n\t\t\tif (_businessAddress != null) {\n\t\t\t\treturn _businessAddress.getZip();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_POSTAL_COUNTRY)) {\n\t\t\tif (_businessAddress != null) {\n\t\t\t\tCountry country = _businessAddress.getCountry();\n\n\t\t\t\treturn country.getName(_user.getLocale());\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_POSTAL_ORGANIZATION)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_TELEPHONE_INTCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_TELEPHONE_LOCCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_TELEPHONE_NUMBER)) {\n\t\t\tif (_businessPhone != null) {\n\t\t\t\treturn _businessPhone.getNumber();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_TELEPHONE_EXT)) {\n\t\t\tif (_businessPhone != null) {\n\t\t\t\treturn _businessPhone.getExtension();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_TELEPHONE_COMMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_FAX_INTCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_FAX_LOCCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_FAX_NUMBER)) {\n\t\t\tif (_businessFaxPhone != null) {\n\t\t\t\treturn _businessFaxPhone.getNumber();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_FAX_EXT)) {\n\t\t\tif (_businessFaxPhone != null) {\n\t\t\t\treturn _businessFaxPhone.getExtension();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_FAX_COMMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_MOBILE_INTCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_MOBILE_LOCCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_MOBILE_NUMBER)) {\n\t\t\tif (_mobilePhone != null) {\n\t\t\t\treturn _mobilePhone.getNumber();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_MOBILE_EXT)) {\n\t\t\tif (_mobilePhone != null) {\n\t\t\t\treturn _mobilePhone.getExtension();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_MOBILE_COMMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_PAGER_INTCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_PAGER_LOCCODE)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_PAGER_NUMBER)) {\n\t\t\tif (_pagerPhone != null) {\n\t\t\t\treturn _pagerPhone.getNumber();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_PAGER_EXT)) {\n\t\t\tif (_pagerPhone != null) {\n\t\t\t\treturn _pagerPhone.getExtension();\n\t\t\t}\n\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_TELECOM_PAGER_COMMENT)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_ONLINE_EMAIL)) {\n\t\t\treturn _user.getEmailAddress();\n\t\t}\n\t\telse if (name.equals(USER_BUSINESS_INFO_ONLINE_URI)) {\n\t\t\treturn StringPool.BLANK;\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}","commit_id":"25315d5141622bdfa89eb74992a061b14b79f227","url":"https://github.com/liferay/liferay-portal"},{"original_method":"public int getSelectionEnd() {\n    validateContext(false);\n    if (!hasSelection()) return myEditor.getCaretModel().getOffset();\n    return mySelectionMarker.getEndOffset();\n  }","id":96945,"modified_method":"public int getSelectionEnd() {\n    validateContext(false);\n    if (hasSelection()) {\n      MyRangeMarker marker = mySelectionMarker.get();\n      if (marker != null) {\n        return marker.getEndOffset();\n      }\n    }\n    return myEditor.getCaretModel().getOffset();\n  }","commit_id":"bfe13eaebb6fca384bdc9d9db81ebdb9a9c1a3ce","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void documentChanged(DocumentEvent event) {\n    if (myIsInUpdate == event) {\n      myIsInUpdate = null;\n      if (mySelectionMarker != null && mySelectionMarker.isValid()) {\n        mySelectionMarker.documentChanged(event);\n      }\n    }\n  }","id":96946,"modified_method":"public void documentChanged(DocumentEvent event) {\n    if (myIsInUpdate == event) {\n      myIsInUpdate = null;\n      MyRangeMarker marker = mySelectionMarker.get();\n      if (marker != null && marker.isValid()) {\n        marker.documentChanged(event);\n      }\n    }\n  }","commit_id":"bfe13eaebb6fca384bdc9d9db81ebdb9a9c1a3ce","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void removeSelection() {\n    validateContext(true);\n    removeBlockSelection();\n    myLastSelectionStart = myEditor.getCaretModel().getOffset();\n    if (mySelectionMarker != null) {\n      int startOffset = mySelectionMarker.getStartOffset();\n      int endOffset = mySelectionMarker.getEndOffset();\n      mySelectionMarker.release();\n      mySelectionMarker = null;\n      fireSelectionChanged(startOffset, endOffset, myLastSelectionStart, myLastSelectionStart);\n    }\n  }","id":96947,"modified_method":"public void removeSelection() {\n    validateContext(true);\n    removeBlockSelection();\n    myLastSelectionStart = myEditor.getCaretModel().getOffset();\n    MyRangeMarker marker = mySelectionMarker.get();\n    if (marker != null) {\n      int startOffset = marker.getStartOffset();\n      int endOffset = marker.getEndOffset();\n      marker.release();\n      mySelectionMarker.set(null);\n      fireSelectionChanged(startOffset, endOffset, myLastSelectionStart, myLastSelectionStart);\n    }\n  }","commit_id":"bfe13eaebb6fca384bdc9d9db81ebdb9a9c1a3ce","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public boolean hasSelection() {\n    validateContext(false);\n    if (mySelectionMarker != null && !mySelectionMarker.isValid()) {\n      removeSelection();\n    }\n\n    return mySelectionMarker != null;\n  }","id":96948,"modified_method":"public boolean hasSelection() {\n    validateContext(false);\n    MyRangeMarker marker = mySelectionMarker.get();\n    if (marker != null && !marker.isValid()) {\n      removeSelection();\n    }\n\n    return marker != null;\n  }","commit_id":"bfe13eaebb6fca384bdc9d9db81ebdb9a9c1a3ce","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public int getSelectionStart() {\n    validateContext(false);\n    if (!hasSelection()) return myEditor.getCaretModel().getOffset();\n    return mySelectionMarker.getStartOffset();\n  }","id":96949,"modified_method":"public int getSelectionStart() {\n    validateContext(false);\n    if (hasSelection()) {\n      MyRangeMarker marker = mySelectionMarker.get();\n      if (marker != null) {\n        return marker.getStartOffset();\n      }\n    }\n    return myEditor.getCaretModel().getOffset();\n  }","commit_id":"bfe13eaebb6fca384bdc9d9db81ebdb9a9c1a3ce","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n    protected void changedUpdateImpl(DocumentEvent e) {\n      if (myIsReleased) return;\n      int startBefore = getStartOffset();\n      int endBefore = getEndOffset();\n      super.changedUpdateImpl(e);\n\n      if (!isValid()) {\n        myLastSelectionStart = myEditor.getCaretModel().getOffset();\n        release();\n        mySelectionMarker = null;\n        fireSelectionChanged(startBefore, endBefore, myLastSelectionStart, myLastSelectionStart);\n        return;\n      }\n\n      if (startBefore != getStartOffset() || endBefore != getStartOffset()) {\n        fireSelectionChanged(startBefore, endBefore, getStartOffset(), getEndOffset());\n      }\n    }","id":96950,"modified_method":"@Override\n    protected void changedUpdateImpl(DocumentEvent e) {\n      if (myIsReleased) return;\n      int startBefore = getStartOffset();\n      int endBefore = getEndOffset();\n      super.changedUpdateImpl(e);\n\n      if (!isValid()) {\n        myLastSelectionStart = myEditor.getCaretModel().getOffset();\n        release();\n        mySelectionMarker.set(null);\n        fireSelectionChanged(startBefore, endBefore, myLastSelectionStart, myLastSelectionStart);\n        return;\n      }\n\n      if (startBefore != getStartOffset() || endBefore != getStartOffset()) {\n        fireSelectionChanged(startBefore, endBefore, getStartOffset(), getEndOffset());\n      }\n    }","commit_id":"bfe13eaebb6fca384bdc9d9db81ebdb9a9c1a3ce","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public void setSelection(int startOffset, int endOffset) {\n    validateContext(true);\n\n    removeBlockSelection();\n    Document doc = myEditor.getDocument();\n\n    if (startOffset < 0 || startOffset > doc.getTextLength()) {\n      LOG.error(\"Wrong startOffset: \" + startOffset);\n    }\n    if (endOffset < 0 || endOffset > doc.getTextLength()) {\n      LOG.error(\"Wrong endOffset: \" + endOffset);\n    }\n\n    myLastSelectionStart = startOffset;\n    if (startOffset == endOffset) {\n      removeSelection();\n      return;\n    }\n\n    /* Normalize selection */\n    if (startOffset > endOffset) {\n      int tmp = startOffset;\n      startOffset = endOffset;\n      endOffset = tmp;\n    }\n\n    int oldSelectionStart;\n    int oldSelectionEnd;\n\n    if (hasSelection()) {\n      oldSelectionStart = mySelectionMarker.getStartOffset();\n      oldSelectionEnd = mySelectionMarker.getEndOffset();\n      if (oldSelectionStart == startOffset && oldSelectionEnd == endOffset) return;\n    }\n    else {\n      oldSelectionStart = oldSelectionEnd = myEditor.getCaretModel().getOffset();\n    }\n\n    if (mySelectionMarker != null) {\n      mySelectionMarker.release();\n    }\n\n    mySelectionMarker = new MyRangeMarker((DocumentEx)doc, startOffset, endOffset);\n\n    fireSelectionChanged(oldSelectionStart, oldSelectionEnd, startOffset, endOffset);\n\n    updateSystemSelection();\n  }","id":96951,"modified_method":"public void setSelection(int startOffset, int endOffset) {\n    validateContext(true);\n\n    removeBlockSelection();\n    Document doc = myEditor.getDocument();\n\n    if (startOffset < 0 || startOffset > doc.getTextLength()) {\n      LOG.error(\"Wrong startOffset: \" + startOffset);\n    }\n    if (endOffset < 0 || endOffset > doc.getTextLength()) {\n      LOG.error(\"Wrong endOffset: \" + endOffset);\n    }\n\n    myLastSelectionStart = startOffset;\n    if (startOffset == endOffset) {\n      removeSelection();\n      return;\n    }\n\n    /* Normalize selection */\n    if (startOffset > endOffset) {\n      int tmp = startOffset;\n      startOffset = endOffset;\n      endOffset = tmp;\n    }\n\n    int oldSelectionStart;\n    int oldSelectionEnd;\n\n    if (hasSelection()) {\n      oldSelectionStart = getSelectionStart();\n      oldSelectionEnd = getSelectionEnd();\n      if (oldSelectionStart == startOffset && oldSelectionEnd == endOffset) return;\n    }\n    else {\n      oldSelectionStart = oldSelectionEnd = myEditor.getCaretModel().getOffset();\n    }\n\n    MyRangeMarker marker = mySelectionMarker.get();\n    if (marker != null) {\n      marker.release();\n    }\n\n    mySelectionMarker.set(new MyRangeMarker((DocumentEx)doc, startOffset, endOffset));\n\n    fireSelectionChanged(oldSelectionStart, oldSelectionEnd, startOffset, endOffset);\n\n    updateSystemSelection();\n  }","commit_id":"bfe13eaebb6fca384bdc9d9db81ebdb9a9c1a3ce","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"public int getLeadSelectionOffset() {\n    validateContext(false);\n    int caretOffset = myEditor.getCaretModel().getOffset();\n    if (!hasSelection()) return caretOffset;\n    int startOffset = mySelectionMarker.getStartOffset();\n    int endOffset = mySelectionMarker.getEndOffset();\n    if (caretOffset == endOffset) return startOffset;\n    return endOffset;\n  }","id":96952,"modified_method":"public int getLeadSelectionOffset() {\n    validateContext(false);\n    int caretOffset = myEditor.getCaretModel().getOffset();\n    if (hasSelection()) {\n      MyRangeMarker marker = mySelectionMarker.get();\n      if (marker != null) {\n        int startOffset = marker.getStartOffset();\n        int endOffset = marker.getEndOffset();\n        if (caretOffset == endOffset) {\n          return startOffset;\n        }\n        else {\n          return endOffset;\n        }\n      }\n    }\n    return caretOffset;\n  }","commit_id":"bfe13eaebb6fca384bdc9d9db81ebdb9a9c1a3ce","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static void addPlaceholder(@NotNull CCState state) {\n    Editor editor = state.getEditor();\n    Project project = state.getProject();\n    PsiFile file = state.getFile();\n\n    final Document document = PsiDocumentManager.getInstance(project).getDocument(file);\n    if (document == null) {\n      return;\n    }\n\n    final SelectionModel model = editor.getSelectionModel();\n    final int offset = model.getSelectionStart();\n    final AnswerPlaceholder answerPlaceholder = new AnswerPlaceholder();\n\n    answerPlaceholder.setOffset(offset);\n    answerPlaceholder.setUseLength(false);\n\n    String selectedText = model.getSelectedText();\n    answerPlaceholder.setPossibleAnswer(selectedText);\n\n    CCCreateAnswerPlaceholderDialog dlg = new CCCreateAnswerPlaceholderDialog(project, answerPlaceholder);\n    dlg.show();\n    if (dlg.getExitCode() != DialogWrapper.OK_EXIT_CODE) {\n      return;\n    }\n\n    TaskFile taskFile = state.getTaskFile();\n    int index = taskFile.getAnswerPlaceholders().size() + 1;\n    answerPlaceholder.setIndex(index);\n    taskFile.addAnswerPlaceholder(answerPlaceholder);\n    answerPlaceholder.setTaskFile(taskFile);\n    taskFile.sortAnswerPlaceholders();\n\n\n    computeInitialState(project, file, taskFile, document);\n\n    EduAnswerPlaceholderPainter.drawAnswerPlaceholder(editor, answerPlaceholder, JBColor.BLUE);\n    EduAnswerPlaceholderPainter.createGuardedBlocks(editor, answerPlaceholder);\n  }","id":96953,"modified_method":"private static void addPlaceholder(@NotNull CCState state) {\n    Editor editor = state.getEditor();\n    Project project = state.getProject();\n    PsiFile file = state.getFile();\n\n    final Document document = PsiDocumentManager.getInstance(project).getDocument(file);\n    if (document == null) {\n      return;\n    }\n\n    final SelectionModel model = editor.getSelectionModel();\n    final int offset = model.hasSelection() ? model.getSelectionStart() : editor.getCaretModel().getOffset();\n    final AnswerPlaceholder answerPlaceholder = new AnswerPlaceholder();\n\n    answerPlaceholder.setOffset(offset);\n    answerPlaceholder.setUseLength(false);\n\n    answerPlaceholder.setPossibleAnswer(model.hasSelection() ? model.getSelectedText() : EduNames.PLACEHOLDER);\n\n    CCCreateAnswerPlaceholderDialog dlg = new CCCreateAnswerPlaceholderDialog(project, answerPlaceholder);\n    dlg.show();\n    if (dlg.getExitCode() != DialogWrapper.OK_EXIT_CODE) {\n      return;\n    }\n\n    if (!model.hasSelection()) {\n      DocumentUtil.writeInRunUndoTransparentAction(() -> document.insertString(offset, EduNames.PLACEHOLDER));\n    }\n\n    TaskFile taskFile = state.getTaskFile();\n    int index = taskFile.getAnswerPlaceholders().size() + 1;\n    answerPlaceholder.setIndex(index);\n    taskFile.addAnswerPlaceholder(answerPlaceholder);\n    answerPlaceholder.setTaskFile(taskFile);\n    taskFile.sortAnswerPlaceholders();\n\n\n    computeInitialState(project, file, taskFile, document);\n\n    EduAnswerPlaceholderPainter.drawAnswerPlaceholder(editor, answerPlaceholder, JBColor.BLUE);\n    EduAnswerPlaceholderPainter.createGuardedBlocks(editor, answerPlaceholder);\n  }","commit_id":"af2d69ff560716e5a44dc4e081b1d4369381e98a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public void update(@NotNull AnActionEvent event) {\n    final Presentation presentation = event.getPresentation();\n    presentation.setEnabledAndVisible(false);\n\n    CCState state = getState(event);\n    if (state == null) {\n      return;\n    }\n\n    presentation.setVisible(true);\n    if (canAddPlaceholder(state) || canDeletePlaceholder(state)) {\n      presentation.setEnabled(true);\n      presentation.setText((state.getAnswerPlaceholder() == null ? \"Add \" : \"Delete \") + EduNames.PLACEHOLDER);\n    }\n  }","id":96954,"modified_method":"@Override\n  public void update(@NotNull AnActionEvent event) {\n    final Presentation presentation = event.getPresentation();\n    presentation.setEnabledAndVisible(false);\n\n    CCState state = getState(event);\n    if (state == null) {\n      return;\n    }\n\n    presentation.setVisible(true);\n    if (canAddPlaceholder(state) || canDeletePlaceholder(state)) {\n      presentation.setEnabled(true);\n      presentation.setText((state.getAnswerPlaceholder() == null ? \"Add \" : \"Delete \") + EduNames.ANSWER_PLACEHOLDER);\n    }\n  }","commit_id":"af2d69ff560716e5a44dc4e081b1d4369381e98a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static boolean canAddPlaceholder(@NotNull CCState state) {\n    Editor editor = state.getEditor();\n    SelectionModel selectionModel = editor.getSelectionModel();\n    if (!selectionModel.hasSelection()) {\n      return false;\n    }\n    int start = selectionModel.getSelectionStart();\n    int end = selectionModel.getSelectionEnd();\n    return !arePlaceholdersIntersect(state.getTaskFile(), start, end);\n  }","id":96955,"modified_method":"private static boolean canAddPlaceholder(@NotNull CCState state) {\n    Editor editor = state.getEditor();\n    SelectionModel selectionModel = editor.getSelectionModel();\n    if (selectionModel.hasSelection()) {\n      int start = selectionModel.getSelectionStart();\n      int end = selectionModel.getSelectionEnd();\n      return !arePlaceholdersIntersect(state.getTaskFile(), start, end);\n    }\n    int offset = editor.getCaretModel().getOffset();\n    return state.getTaskFile().getAnswerPlaceholder(offset) == null;\n  }","commit_id":"af2d69ff560716e5a44dc4e081b1d4369381e98a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n\tpublic BackgroundTaskResult execute(BackgroundTask backgroundTask)\n\t\tthrows Exception {\n\n\t\tExportImportConfiguration exportImportConfiguration =\n\t\t\tgetExportImportConfiguration(backgroundTask);\n\n\t\tMap<String, Serializable> settingsMap =\n\t\t\texportImportConfiguration.getSettingsMap();\n\n\t\tlong userId = MapUtil.getLong(settingsMap, \"userId\");\n\t\tlong targetGroupId = MapUtil.getLong(settingsMap, \"targetGroupId\");\n\t\tboolean privateLayout = MapUtil.getBoolean(\n\t\t\tsettingsMap, \"privateLayout\");\n\t\tMap<String, String[]> parameterMap =\n\t\t\t(Map<String, String[]>)settingsMap.get(\"parameterMap\");\n\n\t\tList<FileEntry> attachmentsFileEntries =\n\t\t\tbackgroundTask.getAttachmentsFileEntries();\n\n\t\tfor (FileEntry attachmentsFileEntry : attachmentsFileEntries) {\n\t\t\tLayoutLocalServiceUtil.importLayouts(\n\t\t\t\tuserId, targetGroupId, privateLayout, parameterMap,\n\t\t\t\tattachmentsFileEntry.getContentStream());\n\t\t}\n\n\t\treturn BackgroundTaskResult.SUCCESS;\n\t}","id":96956,"modified_method":"@Override\n\tpublic BackgroundTaskResult execute(BackgroundTask backgroundTask)\n\t\tthrows Exception {\n\n\t\tExportImportConfiguration exportImportConfiguration =\n\t\t\tgetExportImportConfiguration(backgroundTask);\n\n\t\tMap<String, Serializable> settingsMap =\n\t\t\texportImportConfiguration.getSettingsMap();\n\n\t\tlong userId = MapUtil.getLong(settingsMap, \"userId\");\n\t\tlong targetGroupId = MapUtil.getLong(settingsMap, \"targetGroupId\");\n\t\tboolean privateLayout = MapUtil.getBoolean(\n\t\t\tsettingsMap, \"privateLayout\");\n\t\tMap<String, String[]> parameterMap =\n\t\t\t(Map<String, String[]>)settingsMap.get(\"parameterMap\");\n\n\t\tList<FileEntry> attachmentsFileEntries =\n\t\t\tbackgroundTask.getAttachmentsFileEntries();\n\n\t\tFile file = null;\n\n\t\tfor (FileEntry attachmentsFileEntry : attachmentsFileEntries) {\n\t\t\ttry {\n\t\t\t\tfile = FileUtil.createTempFile(\"lar\");\n\n\t\t\t\tFileUtil.write(file, attachmentsFileEntry.getContentStream());\n\n\t\t\t\tTransactionHandlerUtil.invoke(\n\t\t\t\t\ttransactionAttribute,\n\t\t\t\t\tnew LayoutImportCallable(\n\t\t\t\t\t\tfile, parameterMap, privateLayout, targetGroupId,\n\t\t\t\t\t\tuserId));\n\t\t\t}\n\t\t\tcatch (Throwable t) {\n\t\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t\t_log.debug(t, t);\n\t\t\t\t}\n\t\t\t\telse if (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(\"Unable to import layouts: \" + t.getMessage());\n\t\t\t\t}\n\n\t\t\t\tthrow new SystemException(t);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tFileUtil.delete(file);\n\t\t\t}\n\t\t}\n\n\t\treturn BackgroundTaskResult.SUCCESS;\n\t}","commit_id":"2d4d63a4dac82a5f1b97d2161ced7c6c42e9527e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic BackgroundTaskResult execute(BackgroundTask backgroundTask)\n\t\tthrows Exception {\n\n\t\tExportImportConfiguration exportImportConfiguration =\n\t\t\tgetExportImportConfiguration(backgroundTask);\n\n\t\tMap<String, Serializable> settingsMap =\n\t\t\texportImportConfiguration.getSettingsMap();\n\n\t\tlong userId = MapUtil.getLong(settingsMap, \"userId\");\n\t\tlong targetPlid = MapUtil.getLong(settingsMap, \"targetPlid\");\n\t\tlong targetGroupId = MapUtil.getLong(settingsMap, \"targetGroupId\");\n\t\tString portletId = MapUtil.getString(settingsMap, \"portletId\");\n\t\tMap<String, String[]> parameterMap =\n\t\t\t(Map<String, String[]>)settingsMap.get(\"parameterMap\");\n\n\t\tList<FileEntry> attachmentsFileEntries =\n\t\t\tbackgroundTask.getAttachmentsFileEntries();\n\n\t\tfor (FileEntry attachmentsFileEntry : attachmentsFileEntries) {\n\t\t\tLayoutLocalServiceUtil.importPortletInfo(\n\t\t\t\tuserId, targetPlid, targetGroupId, portletId, parameterMap,\n\t\t\t\tattachmentsFileEntry.getContentStream());\n\t\t}\n\n\t\treturn BackgroundTaskResult.SUCCESS;\n\t}","id":96957,"modified_method":"@Override\n\tpublic BackgroundTaskResult execute(BackgroundTask backgroundTask)\n\t\tthrows Exception {\n\n\t\tExportImportConfiguration exportImportConfiguration =\n\t\t\tgetExportImportConfiguration(backgroundTask);\n\n\t\tMap<String, Serializable> settingsMap =\n\t\t\texportImportConfiguration.getSettingsMap();\n\n\t\tlong userId = MapUtil.getLong(settingsMap, \"userId\");\n\t\tlong targetPlid = MapUtil.getLong(settingsMap, \"targetPlid\");\n\t\tlong targetGroupId = MapUtil.getLong(settingsMap, \"targetGroupId\");\n\t\tString portletId = MapUtil.getString(settingsMap, \"portletId\");\n\t\tMap<String, String[]> parameterMap =\n\t\t\t(Map<String, String[]>)settingsMap.get(\"parameterMap\");\n\n\t\tList<FileEntry> attachmentsFileEntries =\n\t\t\tbackgroundTask.getAttachmentsFileEntries();\n\n\t\tFile file = null;\n\n\t\tfor (FileEntry attachmentsFileEntry : attachmentsFileEntries) {\n\t\t\ttry {\n\t\t\t\tfile = FileUtil.createTempFile(\"lar\");\n\n\t\t\t\tFileUtil.write(file, attachmentsFileEntry.getContentStream());\n\n\t\t\t\tTransactionHandlerUtil.invoke(\n\t\t\t\t\ttransactionAttribute,\n\t\t\t\t\tnew PortletImportCallable(\n\t\t\t\t\t\tfile, parameterMap, portletId, targetGroupId,\n\t\t\t\t\t\ttargetPlid, userId));\n\t\t\t}\n\t\t\tcatch (Throwable t) {\n\t\t\t\tif (_log.isDebugEnabled()) {\n\t\t\t\t\t_log.debug(t, t);\n\t\t\t\t}\n\t\t\t\telse if (_log.isWarnEnabled()) {\n\t\t\t\t\t_log.warn(\"Unable to import portlet: \" + t.getMessage());\n\t\t\t\t}\n\n\t\t\t\tthrow new SystemException(t);\n\t\t\t}\n\t\t\tfinally {\n\t\t\t\tFileUtil.delete(file);\n\t\t\t}\n\t\t}\n\n\t\treturn BackgroundTaskResult.SUCCESS;\n\t}","commit_id":"2d4d63a4dac82a5f1b97d2161ced7c6c42e9527e","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic void publishStagingRequest(\n\t\t\tlong userId, long stagingRequestId, boolean privateLayout,\n\t\t\tMap<String, String[]> parameterMap)\n\t\tthrows PortalException {\n\n\t\ttry {\n\t\t\tExportImportThreadLocal.setLayoutImportInProcess(true);\n\n\t\t\tFolder folder = PortletFileRepositoryUtil.getPortletFolder(\n\t\t\t\tstagingRequestId);\n\n\t\t\tFileEntry stagingRequestFileEntry = getStagingRequestFileEntry(\n\t\t\t\tuserId, stagingRequestId, folder);\n\n\t\t\tlayoutLocalService.importLayouts(\n\t\t\t\tuserId, folder.getGroupId(), privateLayout, parameterMap,\n\t\t\t\tstagingRequestFileEntry.getContentStream());\n\t\t}\n\t\tfinally {\n\t\t\tExportImportThreadLocal.setLayoutImportInProcess(false);\n\t\t}\n\t}","id":96958,"modified_method":"@Override\n\tpublic MissingReferences publishStagingRequest(\n\t\t\tlong userId, long stagingRequestId, boolean privateLayout,\n\t\t\tMap<String, String[]> parameterMap)\n\t\tthrows PortalException {\n\n\t\tFile file = null;\n\t\tMissingReferences missingReferences = null;\n\n\t\ttry {\n\t\t\tExportImportThreadLocal.setLayoutImportInProcess(true);\n\n\t\t\tFolder folder = PortletFileRepositoryUtil.getPortletFolder(\n\t\t\t\tstagingRequestId);\n\n\t\t\tFileEntry stagingRequestFileEntry = getStagingRequestFileEntry(\n\t\t\t\tuserId, stagingRequestId, folder);\n\n\t\t\tfile = FileUtil.createTempFile(\"lar\");\n\n\t\t\tFileUtil.write(file, stagingRequestFileEntry.getContentStream());\n\n\t\t\tlayoutLocalService.importLayoutsDataDeletions(\n\t\t\t\tuserId, folder.getGroupId(), privateLayout, parameterMap, file);\n\n\t\t\tmissingReferences = layoutLocalService.validateImportLayoutsFile(\n\t\t\t\tuserId, folder.getGroupId(), privateLayout, parameterMap, file);\n\n\t\t\tlayoutLocalService.importLayouts(\n\t\t\t\tuserId, folder.getGroupId(), privateLayout, parameterMap, file);\n\t\t}\n\t\tcatch (IOException ioe) {\n\t\t\tthrow new SystemException(ioe);\n\t\t}\n\t\tfinally {\n\t\t\tExportImportThreadLocal.setLayoutImportInProcess(false);\n\t\t}\n\n\t\treturn missingReferences;\n\t}","commit_id":"8a6e4bb1f519a369b2571ec7ac87d8e82d6cb43c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"@Override\n\tpublic MissingReferences validateStagingRequest(\n\t\t\tlong userId, long stagingRequestId, boolean privateLayout,\n\t\t\tMap<String, String[]> parameterMap)\n\t\tthrows PortalException {\n\n\t\ttry {\n\t\t\tExportImportThreadLocal.setLayoutValidationInProcess(true);\n\n\t\t\tFolder folder = PortletFileRepositoryUtil.getPortletFolder(\n\t\t\t\tstagingRequestId);\n\n\t\t\tFileEntry fileEntry = getStagingRequestFileEntry(\n\t\t\t\tuserId, stagingRequestId, folder);\n\n\t\t\treturn layoutLocalService.validateImportLayoutsFile(\n\t\t\t\tuserId, folder.getGroupId(), privateLayout, parameterMap,\n\t\t\t\tfileEntry.getContentStream());\n\t\t}\n\t\tfinally {\n\t\t\tExportImportThreadLocal.setLayoutValidationInProcess(false);\n\t\t}\n\t}","id":96959,"modified_method":"/**\n\t * @deprecated As of 7.0.0, replaced by {@link #publishStagingRequest(long,\n\t *             long, boolean, java.util.Map)}\n\t */\n\t@Deprecated\n\t@Override\n\tpublic MissingReferences validateStagingRequest(\n\t\t\tlong userId, long stagingRequestId, boolean privateLayout,\n\t\t\tMap<String, String[]> parameterMap)\n\t\tthrows PortalException {\n\n\t\treturn new MissingReferences();\n\t}","commit_id":"8a6e4bb1f519a369b2571ec7ac87d8e82d6cb43c","url":"https://github.com/liferay/liferay-portal"},{"original_method":"static ServiceController<?> addService(final ServiceTarget target) {\n        AutoInstallIntegration service = new AutoInstallIntegration();\n        ServiceBuilder<?> builder = target.addService(IntegrationServices.AUTOINSTALL_HANDLER, service);\n        builder.addDependency(ServerEnvironmentService.SERVICE_NAME, ServerEnvironment.class, service.injectedServerEnvironment);\n        builder.addDependency(SubsystemState.SERVICE_NAME, SubsystemState.class, service.injectedSubsystemState);\n        builder.addDependency(RepositoryProvider.SERVICE_NAME, Repository.class, service.injectedRepository);\n        builder.addDependency(Services.BUNDLE_MANAGER, BundleManager.class, service.injectedBundleManager);\n        builder.addDependency(Services.PACKAGE_ADMIN, PackageAdmin.class, service.injectedPackageAdmin);\n        builder.addDependency(Services.STORAGE_STATE_PROVIDER, StorageStateProvider.class, service.injectedStorageProvider);\n        builder.addDependency(Services.SYSTEM_BUNDLE, Bundle.class, service.injectedSystemBundle);\n        builder.addDependency(Services.START_LEVEL, StartLevel.class, service.injectedStartLevel);\n        builder.addDependency(Services.ENVIRONMENT, XEnvironment.class, service.injectedEnvironment);\n        builder.addDependency(Services.FRAMEWORK_CREATE);\n        builder.setInitialMode(Mode.ON_DEMAND);\n        return builder.install();\n    }","id":96960,"modified_method":"static ServiceController<?> addService(final ServiceTarget target) {\n        AutoInstallIntegration service = new AutoInstallIntegration();\n        ServiceBuilder<?> builder = target.addService(IntegrationServices.AUTOINSTALL_HANDLER, service);\n        builder.addDependency(ServerEnvironmentService.SERVICE_NAME, ServerEnvironment.class, service.injectedServerEnvironment);\n        builder.addDependency(SubsystemState.SERVICE_NAME, SubsystemState.class, service.injectedSubsystemState);\n        builder.addDependency(Services.BUNDLE_MANAGER, BundleManager.class, service.injectedBundleManager);\n        builder.addDependency(Services.PACKAGE_ADMIN, PackageAdmin.class, service.injectedPackageAdmin);\n        builder.addDependency(Services.STORAGE_STATE_PROVIDER, StorageStateProvider.class, service.injectedStorageProvider);\n        builder.addDependency(Services.SYSTEM_CONTEXT, BundleContext.class, service.injectedSystemContext);\n        builder.addDependency(Services.START_LEVEL, StartLevel.class, service.injectedStartLevel);\n        builder.addDependency(Services.ENVIRONMENT, XEnvironment.class, service.injectedEnvironment);\n        builder.addDependency(Services.FRAMEWORK_CREATE);\n        builder.setInitialMode(Mode.ON_DEMAND);\n        return builder.install();\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"private boolean installInitialModuleCapability(OSGiCapability osgicap) throws Exception {\n        String identifier = osgicap.getIdentifier();\n        if (isValidModuleIdentifier(identifier)) {\n            ModuleIdentifier moduleId = ModuleIdentifier.fromString(identifier);\n\n            // Find the module in the bundles hierarchy\n            File bundleFile = ModuleIdentityArtifactProvider.getRepositoryEntry(bundlesDir, moduleId);\n            if (bundleFile == null) {\n                LOGGER.tracef(\"Installing initial module capability: %s\", identifier);\n\n                // Attempt to load the module from the modules hierarchy\n                Module module = null;\n                try {\n                    ModuleLoader moduleLoader = Module.getBootModuleLoader();\n                    module = moduleLoader.loadModule(moduleId);\n                } catch (ModuleLoadException ex) {\n                    throw MESSAGES.startFailedCannotResolveInitialCapability(ex, identifier);\n                }\n                if (module != null) {\n                    OSGiMetaData metadata = getModuleMetadata(module);\n                    XResourceBuilder builder = XResourceBuilderFactory.create();\n                    if (metadata != null) {\n                        builder.loadFrom(metadata);\n                    } else {\n                        builder.loadFrom(module);\n                    }\n                    XResource res = builder.getResource();\n                    res.addAttachment(Module.class, module);\n                    injectedEnvironment.getValue().installResources(res);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }","id":96961,"modified_method":"private boolean installInitialModuleCapability(OSGiCapability osgicap) throws Exception {\n        String identifier = osgicap.getIdentifier();\n        if (isValidModuleIdentifier(identifier)) {\n            ModuleIdentifier moduleId = ModuleIdentifier.fromString(identifier);\n\n            // Find the module in the bundles hierarchy\n            File bundleFile = ModuleIdentityRepository.getRepositoryEntry(bundlesDir, moduleId);\n            if (bundleFile == null) {\n                LOGGER.tracef(\"Installing initial module capability: %s\", identifier);\n\n                // Attempt to load the module from the modules hierarchy\n                Module module = null;\n                try {\n                    ModuleLoader moduleLoader = Module.getBootModuleLoader();\n                    module = moduleLoader.loadModule(moduleId);\n                } catch (ModuleLoadException ex) {\n                    throw MESSAGES.startFailedCannotResolveInitialCapability(ex, identifier);\n                }\n                if (module != null) {\n                    OSGiMetaData metadata = getModuleMetadata(module);\n                    XResourceBuilder builder = XResourceBuilderFactory.create();\n                    if (metadata != null) {\n                        builder.loadFrom(metadata);\n                    } else {\n                        builder.loadFrom(module);\n                    }\n                    XResource res = builder.getResource();\n                    res.addAttachment(Module.class, module);\n                    injectedEnvironment.getValue().installResources(res);\n                    return true;\n                }\n            }\n        }\n        return false;\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"private ServiceName installInitialCapability(OSGiCapability osgicap, ServiceListener<Bundle> listener) throws Exception {\n        String identifier = osgicap.getIdentifier();\n        Integer level = osgicap.getStartLevel();\n\n        ServiceName result = null;\n\n        // Try the identifier as ModuleIdentifier\n        if (isValidModuleIdentifier(identifier)) {\n            ModuleIdentifier moduleId = ModuleIdentifier.fromString(identifier);\n\n            // Attempt to install the bundle from the bundles hierarchy\n            File bundleFile = ModuleIdentityArtifactProvider.getRepositoryEntry(bundlesDir, moduleId);\n            if (bundleFile != null) {\n                LOGGER.tracef(\"Installing initial bundle capability: %s\", identifier);\n                URL bundleURL = bundleFile.toURI().toURL();\n                result = installBundleFromURL(bundleURL, identifier, level, listener);\n            }\n        }\n\n        // Try the identifier as MavenCoordinates\n        else if (isValidMavenIdentifier(identifier)) {\n            LOGGER.tracef(\"Installing initial maven capability: %s\", identifier);\n            Repository repository = injectedRepository.getValue();\n            MavenCoordinates mavenId = MavenCoordinates.parse(identifier);\n            Requirement req = XRequirementBuilder.createArtifactRequirement(mavenId);\n            Collection<Capability> caps = repository.findProviders(Collections.singleton(req)).get(req);\n            if (caps.isEmpty() == false) {\n                XIdentityCapability icap = (XIdentityCapability) caps.iterator().next();\n                URL bundleURL = (URL) icap.getAttribute(XResourceConstants.CONTENT_URL);\n                result =  installBundleFromURL(bundleURL, identifier, level, listener);\n            }\n        }\n\n        if (result == null)\n            throw MESSAGES.startFailedCannotResolveInitialCapability(null, identifier);\n\n        return result;\n    }","id":96962,"modified_method":"private ServiceName installInitialCapability(BundleContext context, OSGiCapability osgicap, ServiceListener<Bundle> listener) throws Exception {\n        String identifier = osgicap.getIdentifier();\n        Integer level = osgicap.getStartLevel();\n\n        ServiceName result = null;\n\n        // Try the identifier as ModuleIdentifier\n        if (isValidModuleIdentifier(identifier)) {\n            ModuleIdentifier moduleId = ModuleIdentifier.fromString(identifier);\n\n            // Attempt to install the bundle from the bundles hierarchy\n            File bundleFile = ModuleIdentityRepository.getRepositoryEntry(bundlesDir, moduleId);\n            if (bundleFile != null) {\n                LOGGER.tracef(\"Installing initial bundle capability: %s\", identifier);\n                URL bundleURL = bundleFile.toURI().toURL();\n                result = installBundleFromURL(bundleURL, identifier, level, listener);\n            }\n        }\n\n        // Try the identifier as MavenCoordinates\n        else if (isValidMavenIdentifier(identifier)) {\n            LOGGER.tracef(\"Installing initial maven capability: %s\", identifier);\n            ServiceReference sref = context.getServiceReference(XRepository.class.getName());\n            XRepository repository = (XRepository) context.getService(sref);\n            MavenCoordinates mavenId = MavenCoordinates.parse(identifier);\n            Requirement req = XRequirementBuilder.create(mavenId).getRequirement();\n            Collection<Capability> caps = repository.findProviders(req);\n            if (caps.isEmpty() == false) {\n                XResource resource = (XResource) caps.iterator().next().getResource();\n                XCapability ccap = (XCapability) resource.getCapabilities(ContentNamespace.CONTENT_NAMESPACE).get(0);\n                URL bundleURL = new URL((String) ccap.getAttribute(ContentNamespace.CAPABILITY_URL_ATTRIBUTE));\n                result = installBundleFromURL(bundleURL, identifier, level, listener);\n            }\n        }\n\n        if (result == null)\n            throw MESSAGES.startFailedCannotResolveInitialCapability(null, identifier);\n\n        return result;\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public synchronized void start(StartContext context) throws StartException {\n        ServiceController<?> serviceController = context.getController();\n        LOGGER.tracef(\"Starting: %s in mode %s\", serviceController.getName(), serviceController.getMode());\n\n        final BundleContext syscontext = injectedSystemBundle.getValue().getBundleContext();\n        final String startLevelProp = syscontext.getProperty(Constants.FRAMEWORK_BEGINNING_STARTLEVEL);\n        final int beginningStartLevel = startLevelProp != null ? Integer.parseInt(startLevelProp) : 1;\n\n        try {\n            ServerEnvironment serverEnvironment = injectedServerEnvironment.getValue();\n            bundlesDir = serverEnvironment.getBundlesDir();\n            if (bundlesDir.isDirectory() == false)\n                throw MESSAGES.illegalStateCannotFindBundleDir(bundlesDir);\n\n            final List<OSGiCapability> configcaps = new ArrayList<OSGiCapability>();\n            configcaps.add(new OSGiCapability(\"org.osgi.enterprise\", null));\n            configcaps.addAll(injectedSubsystemState.getValue().getCapabilities());\n            Iterator<OSGiCapability> iterator = configcaps.iterator();\n            while (iterator.hasNext()) {\n                OSGiCapability configcap = iterator.next();\n                if (installInitialModuleCapability(configcap))\n                    iterator.remove();\n            }\n\n            final Set<ServiceName> resolvableServices = new LinkedHashSet<ServiceName>();\n            AutoInstallComplete installComplete = new AutoInstallComplete() {\n\n                @Override\n                protected boolean allServicesAdded(Set<ServiceName> trackedServices) {\n                    return configcaps.size() == trackedServices.size();\n                }\n\n                @Override\n                public void start(StartContext context) throws StartException {\n                    // Resolve all bundles up until and including the Framework beginning start level\n                    Set<Bundle> resolvableBundles = new LinkedHashSet<Bundle>();\n                    ServiceContainer serviceContainer = context.getController().getServiceContainer();\n                    for (ServiceName serviceName : resolvableServices) {\n                        ServiceController<?> requiredService = serviceContainer.getRequiredService(serviceName);\n                        resolvableBundles.add((Bundle) requiredService.getValue());\n                    }\n                    Bundle[] bundleArr = resolvableBundles.toArray(new Bundle[resolvableBundles.size()]);\n                    PackageAdmin packageAdmin = injectedPackageAdmin.getValue();\n                    packageAdmin.resolveBundles(bundleArr);\n                    super.start(context);\n                }\n            };\n            installComplete.install(context.getChildTarget());\n            ServiceListener<Bundle> listener = installComplete.getListener();\n\n            for (OSGiCapability configcap : configcaps) {\n                ServiceName serviceName = installInitialCapability(configcap, listener);\n                int startLevel = configcap.getStartLevel() != null ? configcap.getStartLevel() : 1;\n                if (serviceName != null && startLevel <= beginningStartLevel) {\n                    resolvableServices.add(serviceName);\n                }\n            }\n        } catch (Exception ex) {\n            throw MESSAGES.startFailedToProcessInitialCapabilites(ex);\n        }\n    }","id":96963,"modified_method":"@Override\n    public synchronized void start(StartContext context) throws StartException {\n        ServiceController<?> serviceController = context.getController();\n        LOGGER.tracef(\"Starting: %s in mode %s\", serviceController.getName(), serviceController.getMode());\n\n        final BundleContext syscontext = injectedSystemContext.getValue();\n        final String startLevelProp = syscontext.getProperty(Constants.FRAMEWORK_BEGINNING_STARTLEVEL);\n        final int beginningStartLevel = startLevelProp != null ? Integer.parseInt(startLevelProp) : 1;\n\n        try {\n            ServerEnvironment serverEnvironment = injectedServerEnvironment.getValue();\n            bundlesDir = serverEnvironment.getBundlesDir();\n            if (bundlesDir.isDirectory() == false)\n                throw MESSAGES.illegalStateCannotFindBundleDir(bundlesDir);\n\n            final List<OSGiCapability> configcaps = new ArrayList<OSGiCapability>();\n            configcaps.add(new OSGiCapability(\"org.osgi.enterprise\", null));\n            configcaps.addAll(injectedSubsystemState.getValue().getCapabilities());\n            Iterator<OSGiCapability> iterator = configcaps.iterator();\n            while (iterator.hasNext()) {\n                OSGiCapability configcap = iterator.next();\n                if (installInitialModuleCapability(configcap))\n                    iterator.remove();\n            }\n\n            final Set<ServiceName> resolvableServices = new LinkedHashSet<ServiceName>();\n            AutoInstallComplete installComplete = new AutoInstallComplete() {\n\n                @Override\n                protected boolean allServicesAdded(Set<ServiceName> trackedServices) {\n                    return configcaps.size() == trackedServices.size();\n                }\n\n                @Override\n                public void start(StartContext context) throws StartException {\n                    // Resolve all bundles up until and including the Framework beginning start level\n                    Set<Bundle> resolvableBundles = new LinkedHashSet<Bundle>();\n                    ServiceContainer serviceContainer = context.getController().getServiceContainer();\n                    for (ServiceName serviceName : resolvableServices) {\n                        ServiceController<?> requiredService = serviceContainer.getRequiredService(serviceName);\n                        resolvableBundles.add((Bundle) requiredService.getValue());\n                    }\n                    Bundle[] bundleArr = resolvableBundles.toArray(new Bundle[resolvableBundles.size()]);\n                    PackageAdmin packageAdmin = injectedPackageAdmin.getValue();\n                    packageAdmin.resolveBundles(bundleArr);\n                    super.start(context);\n                }\n            };\n            installComplete.install(context.getChildTarget());\n            ServiceListener<Bundle> listener = installComplete.getListener();\n\n            for (OSGiCapability configcap : configcaps) {\n                ServiceName serviceName = installInitialCapability(syscontext, configcap, listener);\n                int startLevel = configcap.getStartLevel() != null ? configcap.getStartLevel() : 1;\n                if (serviceName != null && startLevel <= beginningStartLevel) {\n                    resolvableServices.add(serviceName);\n                }\n            }\n        } catch (Exception ex) {\n            throw MESSAGES.startFailedToProcessInitialCapabilites(ex);\n        }\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"private OSGiMetaData getModuleMetadata(Module module) throws IOException {\n\n        URL manifestURL = module.getClassLoader().getResource(JarFile.MANIFEST_NAME);\n        if (manifestURL != null) {\n            InputStream input = manifestURL.openStream();\n            try {\n                Manifest manifest = new Manifest(input);\n                if (BundleInfo.isValidBundleManifest(manifest)) {\n                    return OSGiMetaDataBuilder.load(manifest);\n                }\n            } finally {\n                input.close();\n            }\n        }\n        File homeDir = injectedServerEnvironment.getValue().getHomeDir();\n        final File modulesDir = new File(homeDir + File.separator + \"modules\");\n        final ModuleIdentifier identifier = module.getIdentifier();\n\n        String identifierPath = identifier.getName().replace('.', File.separatorChar) + File.separator + identifier.getSlot();\n        File entryFile = new File(modulesDir + File.separator + identifierPath + File.separator + \"jbosgi-xservice.properties\");\n        if (entryFile.exists()) {\n            FileInputStream input = new FileInputStream(entryFile);\n            try {\n                return OSGiMetaDataBuilder.load(input);\n            } finally {\n                input.close();\n            }\n        }\n        return null;\n    }","id":96964,"modified_method":"private OSGiMetaData getModuleMetadata(Module module) throws IOException {\n\n        URL manifestURL = module.getClassLoader().getResource(JarFile.MANIFEST_NAME);\n        if (manifestURL != null) {\n            InputStream input = manifestURL.openStream();\n            try {\n                Manifest manifest = new Manifest(input);\n                if (OSGiManifestBuilder.isValidBundleManifest(manifest)) {\n                    return OSGiMetaDataBuilder.load(manifest);\n                }\n            } finally {\n                input.close();\n            }\n        }\n        File homeDir = injectedServerEnvironment.getValue().getHomeDir();\n        final File modulesDir = new File(homeDir + File.separator + \"modules\");\n        final ModuleIdentifier identifier = module.getIdentifier();\n\n        String identifierPath = identifier.getName().replace('.', File.separatorChar) + File.separator + identifier.getSlot();\n        File entryFile = new File(modulesDir + File.separator + identifierPath + File.separator + \"jbosgi-xservice.properties\");\n        if (entryFile.exists()) {\n            FileInputStream input = new FileInputStream(entryFile);\n            try {\n                return OSGiMetaDataBuilder.load(input);\n            } finally {\n                input.close();\n            }\n        }\n        return null;\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"public static ServiceController<?> addService(final ServiceTarget target, OSGiRuntimeResource resource) {\n            SystemServicesIntegration service = new SystemServicesIntegration(resource);\n            ServiceBuilder<SystemServicesProvider> builder = target.addService(IntegrationServices.SYSTEM_SERVICES_PROVIDER, service);\n            builder.addDependency(JBOSS_SERVER_CONTROLLER, ModelController.class, service.injectedModelController);\n            builder.addDependency(MBeanServerService.SERVICE_NAME, MBeanServer.class, service.injectedMBeanServer);\n            builder.addDependency(Services.BUNDLE_MANAGER, BundleManager.class, service.injectedBundleManager);\n            builder.addDependency(Services.SYSTEM_CONTEXT, BundleContext.class, service.injectedBundleContext);\n            builder.addDependency(Services.FRAMEWORK_CREATE);\n            builder.setInitialMode(Mode.ON_DEMAND);\n            return builder.install();\n        }","id":96965,"modified_method":"public static ServiceController<?> addService(final ServiceTarget target, OSGiRuntimeResource resource) {\n            SystemServicesIntegration service = new SystemServicesIntegration(resource);\n            ServiceBuilder<SystemServicesProvider> builder = target.addService(IntegrationServices.SYSTEM_SERVICES_PROVIDER, service);\n            builder.addDependency(JBOSS_SERVER_CONTROLLER, ModelController.class, service.injectedModelController);\n            builder.addDependency(ServerEnvironmentService.SERVICE_NAME, ServerEnvironment.class, service.injectedServerEnvironment);\n            builder.addDependency(MBeanServerService.SERVICE_NAME, MBeanServer.class, service.injectedMBeanServer);\n            builder.addDependency(Services.BUNDLE_MANAGER, BundleManager.class, service.injectedBundleManager);\n            builder.addDependency(Services.SYSTEM_CONTEXT, BundleContext.class, service.injectedBundleContext);\n            builder.addDependency(Services.FRAMEWORK_CREATE);\n            builder.setInitialMode(Mode.ON_DEMAND);\n            return builder.install();\n        }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n        public void start(StartContext context) throws StartException {\n            ServiceController<?> controller = context.getController();\n            LOGGER.tracef(\"Starting: %s in mode %s\", controller.getName(), controller.getMode());\n            serviceContainer = context.getController().getServiceContainer();\n            final BundleContext syscontext = injectedBundleContext.getValue();\n\n            // Inject the system bundle context into the runtime resource\n            BundleManager bundleManager = injectedBundleManager.getValue();\n            resource.getInjectedBundleManager().inject(bundleManager);\n\n            // Register the JNDI service listener\n            jndiServiceListener = new JNDIServiceListener(syscontext);\n            try {\n                String filter = \"(\" + Constants.OBJECTCLASS + \"=\" + ObjectFactory.class.getName() + \")\";\n                syscontext.addServiceListener(jndiServiceListener, filter);\n            } catch (InvalidSyntaxException e) {\n                // ignore\n            }\n\n            // Register the socket-binding services\n            String bindingNames = syscontext.getProperty(MAPPED_OSGI_SOCKET_BINDINGS);\n            if (bindingNames != null) {\n                final Set<ServiceName> socketBindingNames = new HashSet<ServiceName>();\n                for (String suffix : bindingNames.split(\",\")) {\n                    socketBindingNames.add(JBOSS_BINDING_NAME.append(suffix));\n                }\n                ServiceTarget serviceTarget = context.getChildTarget();\n                ServiceName serviceName = IntegrationServices.SYSTEM_SERVICES_PROVIDER.append(\"BINDINGS\");\n                ServiceBuilder<Void> builder = serviceTarget.addService(serviceName, new AbstractService<Void>() {\n                    public void start(StartContext context) throws StartException {\n                        for (ServiceName serviceName : socketBindingNames) {\n                            SocketBinding binding = (SocketBinding) serviceContainer.getRequiredService(serviceName).getValue();\n                            Dictionary<String, String> props = new Hashtable<String, String>();\n                            props.put(\"socketBinding\", serviceName.getSimpleName());\n                            InetSocketAddress value = binding.getSocketAddress();\n                            syscontext.registerService(InetSocketAddress.class.getName(), value, props);\n                        }\n                    }\n                });\n                ServiceName[] serviceNameArray = socketBindingNames.toArray(new ServiceName[socketBindingNames.size()]);\n                builder.addDependencies(serviceNameArray);\n                builder.install();\n            }\n\n            ModelController modelController = injectedModelController.getValue();\n            ModelControllerClient client = modelController.createClient(Executors.newSingleThreadExecutor());\n            syscontext.registerService(ModelControllerClient.class.getName(), client, null);\n        }","id":96966,"modified_method":"@Override\n        public void start(StartContext context) throws StartException {\n            ServiceController<?> controller = context.getController();\n            LOGGER.tracef(\"Starting: %s in mode %s\", controller.getName(), controller.getMode());\n            serviceContainer = context.getController().getServiceContainer();\n            final BundleContext syscontext = injectedBundleContext.getValue();\n\n            // Inject the system bundle context into the runtime resource\n            BundleManager bundleManager = injectedBundleManager.getValue();\n            resource.getInjectedBundleManager().inject(bundleManager);\n\n            // Register the JNDI service listener\n            jndiServiceListener = new JNDIServiceListener(syscontext);\n            try {\n                String filter = \"(\" + Constants.OBJECTCLASS + \"=\" + ObjectFactory.class.getName() + \")\";\n                syscontext.addServiceListener(jndiServiceListener, filter);\n            } catch (InvalidSyntaxException e) {\n                // ignore\n            }\n\n            // Register the socket-binding services\n            String bindingNames = syscontext.getProperty(MAPPED_OSGI_SOCKET_BINDINGS);\n            if (bindingNames != null) {\n                final Set<ServiceName> socketBindingNames = new HashSet<ServiceName>();\n                for (String suffix : bindingNames.split(\",\")) {\n                    socketBindingNames.add(JBOSS_BINDING_NAME.append(suffix));\n                }\n                ServiceTarget serviceTarget = context.getChildTarget();\n                ServiceName serviceName = IntegrationServices.SYSTEM_SERVICES_PROVIDER.append(\"BINDINGS\");\n                ServiceBuilder<Void> builder = serviceTarget.addService(serviceName, new AbstractService<Void>() {\n                    public void start(StartContext context) throws StartException {\n                        for (ServiceName serviceName : socketBindingNames) {\n                            SocketBinding binding = (SocketBinding) serviceContainer.getRequiredService(serviceName).getValue();\n                            Dictionary<String, String> props = new Hashtable<String, String>();\n                            props.put(\"socketBinding\", serviceName.getSimpleName());\n                            InetSocketAddress value = binding.getSocketAddress();\n                            syscontext.registerService(InetSocketAddress.class.getName(), value, props);\n                        }\n                    }\n                });\n                ServiceName[] serviceNameArray = socketBindingNames.toArray(new ServiceName[socketBindingNames.size()]);\n                builder.addDependencies(serviceNameArray);\n                builder.install();\n            }\n\n            // Register the {@link ModelControllerClient} service\n            ModelController modelController = injectedModelController.getValue();\n            ModelControllerClient client = modelController.createClient(Executors.newSingleThreadExecutor());\n            syscontext.registerService(ModelControllerClient.class.getName(), client, null);\n\n            // Register the {@link XRepository} service\n            final ServerEnvironment serverenv = injectedServerEnvironment.getValue();\n            final File storageDir = new File(serverenv.getServerDataDir().getPath() + File.separator + \"repository\");\n            RepositoryStorageFactory factory = new RepositoryStorageFactory() {\n                @Override\n                public RepositoryStorage create(XRepository repository) {\n                    return new FileBasedRepositoryStorage(repository, storageDir) {\n                        @Override\n                        public XResource addResource(XResource res) throws RepositoryStorageException {\n                            // Do not add modules to repository storage\n                            if (res.getCapabilities(MODULE_IDENTITY_NAMESPACE).isEmpty()) {\n                                return super.addResource(res);\n                            } else {\n                                return res;\n                            }\n                        }\n                    };\n                }\n            };\n            XRepositoryBuilder builder = XRepositoryBuilder.create(syscontext);\n            builder.addRepository(new ModuleIdentityRepository(serverenv));\n            builder.addRepositoryStorage(factory);\n            builder.addDefaultRepositories();\n        }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"public synchronized void start(StartContext context) throws StartException {\n        ServiceController<?> controller = context.getController();\n        LOGGER.tracef(\"Starting: %s in mode %s\", controller.getName(), controller.getMode());\n        try {\n            ServiceContainer serviceContainer = context.getController().getServiceContainer();\n\n            // Setup the OSGi {@link Framework} properties\n            SubsystemState subsystemState = injectedSubsystemState.getValue();\n            Map<String, Object> props = new HashMap<String, Object>(subsystemState.getProperties());\n            setupIntegrationProperties(context, props);\n\n            // Register the URLStreamHandlerFactory\n            Module coreFrameworkModule = ((ModuleClassLoader) FrameworkBuilder.class.getClassLoader()).getModule();\n            Module.registerURLStreamHandlerFactoryModule(coreFrameworkModule);\n            Module.registerContentHandlerFactoryModule(coreFrameworkModule);\n\n            ServiceTarget serviceTarget = context.getChildTarget();\n            AutoInstallIntegration.addService(serviceTarget);\n            BundleInstallIntegration.addService(serviceTarget);\n            FrameworkModuleIntegration.addService(serviceTarget, props);\n            JAXPServiceProvider.addService(serviceTarget);\n            ModuleLoaderIntegration.addService(serviceTarget);\n            ModuleIdentityArtifactProvider.addService(serviceTarget);\n            RepositoryProvider.addService(serviceTarget);\n            ResolverService.addService(serviceTarget);\n            SystemServicesIntegration.addService(serviceTarget, resource);\n\n            // Configure the {@link Framework} builder\n            Activation activation = subsystemState.getActivationPolicy();\n            Mode initialMode = (activation == Activation.EAGER ? Mode.ACTIVE : Mode.ON_DEMAND);\n            FrameworkBuilder builder = new FrameworkBuilder(props, initialMode);\n            builder.setServiceContainer(serviceContainer);\n            builder.setServiceTarget(serviceTarget);\n\n            // Create the {@link Framework} services\n            builder.createFrameworkServices(true);\n\n        } catch (Throwable th) {\n            throw MESSAGES.startFailedToCreateFrameworkServices(th);\n        }\n    }","id":96967,"modified_method":"public synchronized void start(StartContext context) throws StartException {\n        ServiceController<?> controller = context.getController();\n        LOGGER.tracef(\"Starting: %s in mode %s\", controller.getName(), controller.getMode());\n        try {\n            ServiceContainer serviceContainer = context.getController().getServiceContainer();\n\n            // Setup the OSGi {@link Framework} properties\n            SubsystemState subsystemState = injectedSubsystemState.getValue();\n            Map<String, Object> props = new HashMap<String, Object>(subsystemState.getProperties());\n            setupIntegrationProperties(context, props);\n\n            // Register the URLStreamHandlerFactory\n            Module coreFrameworkModule = ((ModuleClassLoader) FrameworkBuilder.class.getClassLoader()).getModule();\n            Module.registerURLStreamHandlerFactoryModule(coreFrameworkModule);\n            Module.registerContentHandlerFactoryModule(coreFrameworkModule);\n\n            ServiceTarget serviceTarget = context.getChildTarget();\n            AutoInstallIntegration.addService(serviceTarget);\n            BundleInstallIntegration.addService(serviceTarget);\n            FrameworkModuleIntegration.addService(serviceTarget, props);\n            JAXPServiceProvider.addService(serviceTarget);\n            ModuleLoaderIntegration.addService(serviceTarget);\n            ResolverService.addService(serviceTarget);\n            SystemServicesIntegration.addService(serviceTarget, resource);\n\n            // Configure the {@link Framework} builder\n            Activation activation = subsystemState.getActivationPolicy();\n            Mode initialMode = (activation == Activation.EAGER ? Mode.ACTIVE : Mode.ON_DEMAND);\n            FrameworkBuilder builder = new FrameworkBuilder(props, initialMode);\n            builder.setServiceContainer(serviceContainer);\n            builder.setServiceTarget(serviceTarget);\n\n            // Create the {@link Framework} services\n            builder.createFrameworkServices(true);\n\n        } catch (Throwable th) {\n            throw MESSAGES.startFailedToCreateFrameworkServices(th);\n        }\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Override\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final ResourceRoot deploymentRoot = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT);\n        if (deploymentRoot == null)\n            return;\n\n        // Check if we already have an OSGiManifestAttachment\n        Manifest manifest = deploymentUnit.getAttachment(Attachments.OSGI_MANIFEST);\n        if (manifest != null)\n            return;\n\n        // Skip ignored deployments\n        Boolean ignore = deploymentUnit.getAttachment(Attachments.IGNORE_OSGI);\n        if (ignore != null && ignore.booleanValue())\n            return;\n\n        // Check whether this is an OSGi manifest\n        manifest = deploymentRoot.getAttachment(Attachments.MANIFEST);\n        if (BundleInfo.isValidBundleManifest(manifest)) {\n            deploymentUnit.putAttachment(Attachments.OSGI_MANIFEST, manifest);\n        }\n    }","id":96968,"modified_method":"@Override\n    public void deploy(DeploymentPhaseContext phaseContext) throws DeploymentUnitProcessingException {\n\n        final DeploymentUnit deploymentUnit = phaseContext.getDeploymentUnit();\n        final ResourceRoot deploymentRoot = deploymentUnit.getAttachment(Attachments.DEPLOYMENT_ROOT);\n        if (deploymentRoot == null)\n            return;\n\n        // Check if we already have an OSGiManifestAttachment\n        Manifest manifest = deploymentUnit.getAttachment(Attachments.OSGI_MANIFEST);\n        if (manifest != null)\n            return;\n\n        // Skip ignored deployments\n        Boolean ignore = deploymentUnit.getAttachment(Attachments.IGNORE_OSGI);\n        if (ignore != null && ignore.booleanValue())\n            return;\n\n        // Check whether this is an OSGi manifest\n        manifest = deploymentRoot.getAttachment(Attachments.MANIFEST);\n        if (OSGiManifestBuilder.isValidBundleManifest(manifest)) {\n            deploymentUnit.putAttachment(Attachments.OSGI_MANIFEST, manifest);\n        }\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testResolveModule() throws Exception {\n\n        // Build a resource with a package requirement\n        XResourceBuilder builder = XResourceBuilderFactory.create();\n        builder.addIdentityCapability(\"somename\", null, IdentityNamespace.TYPE_UNKNOWN, null, null);\n        builder.addPackageRequirement(SimpleService.class.getPackage().getName(), null, null);\n        Resource resource = builder.getResource();\n\n        // Setup the resolve context\n        XResolver resolver = getResolver();\n        XEnvironment env = getEnvironment();\n        ResolveContext context = resolver.createResolverContext(env, Collections.singleton(resource), null);\n\n        // Find the providers\n        Map<Resource, List<Wire>> wiremap = resolver.resolve(context);\n        assertEquals(2, wiremap.size());\n\n        // Verify the wires\n        List<Wire> wires = wiremap.get(resource);\n        assertEquals(1, wires.size());\n        Wire wire = wires.get(0);\n        assertEquals(resource, wire.getRequirer());\n        XResource provider = (XResource) wire.getProvider();\n        XIdentityCapability icap = provider.getIdentityCapability();\n        assertEquals(\"deployment.example-module-reg\", icap.getSymbolicName());\n    }","id":96969,"modified_method":"@Test\n    public void testResolveModule() throws Exception {\n\n        // Build a resource with a package requirement\n        XResourceBuilder builder = XResourceBuilderFactory.create();\n        builder.addIdentityCapability(\"somename\");\n        builder.addPackageRequirement(SimpleService.class.getPackage().getName());\n        Resource resource = builder.getResource();\n\n        // Setup the resolve context\n        XResolver resolver = getResolver();\n        XEnvironment env = getEnvironment();\n        ResolveContext context = resolver.createResolverContext(env, Collections.singleton(resource), null);\n\n        // Find the providers\n        Map<Resource, List<Wire>> wiremap = resolver.resolve(context);\n        assertEquals(2, wiremap.size());\n\n        // Verify the wires\n        List<Wire> wires = wiremap.get(resource);\n        assertEquals(1, wires.size());\n        Wire wire = wires.get(0);\n        assertEquals(resource, wire.getRequirer());\n        XResource provider = (XResource) wire.getProvider();\n        XIdentityCapability icap = provider.getIdentityCapability();\n        assertEquals(\"deployment.example-module-reg\", icap.getSymbolicName());\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testFindPackageCapability() throws Exception {\n\n        // Build a package requirement\n        XResourceBuilder builder = XResourceBuilderFactory.create();\n        builder.addIdentityCapability(\"somename\", null, IdentityNamespace.TYPE_UNKNOWN, null, null);\n        XPackageRequirement req = builder.addPackageRequirement(SimpleService.class.getPackage().getName(), null, null);\n\n        // Find the providers for the requirement\n        List<Capability> caps = getEnvironment().findProviders(req);\n        assertEquals(1, caps.size());\n\n        // Verify resource identity\n        XResource xres = (XResource) caps.get(0).getResource();\n        XIdentityCapability icap = xres.getIdentityCapability();\n        assertEquals(\"deployment.example-module-reg\", icap.getSymbolicName());\n        assertEquals(Version.emptyVersion, icap.getVersion());\n        assertEquals(\"unknown\", icap.getType());\n    }","id":96970,"modified_method":"@Test\n    public void testFindPackageCapability() throws Exception {\n\n        // Build a package requirement\n        XResourceBuilder builder = XResourceBuilderFactory.create();\n        builder.addIdentityCapability(\"somename\");\n        XPackageRequirement req = builder.addPackageRequirement(SimpleService.class.getPackage().getName());\n\n        // Find the providers for the requirement\n        List<Capability> caps = getEnvironment().findProviders(req);\n        assertEquals(1, caps.size());\n\n        // Verify resource identity\n        XResource xres = (XResource) caps.get(0).getResource();\n        XIdentityCapability icap = xres.getIdentityCapability();\n        assertEquals(\"deployment.example-module-reg\", icap.getSymbolicName());\n        assertEquals(Version.emptyVersion, icap.getVersion());\n        assertEquals(\"unknown\", icap.getType());\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Test\n    public void testRepositoryService() throws Exception {\n\n        Repository repo = getRepository();\n        MavenCoordinates coordinates = MavenCoordinates.parse(\"org.apache.felix:org.apache.felix.eventadmin:1.2.6\");\n        Requirement req = XRequirementBuilder.createArtifactRequirement(coordinates);\n        assertNotNull(\"Requirement not null\", req);\n\n        Collection<Capability> caps = repo.findProviders(Collections.singleton(req)).get(req);\n        assertEquals(\"Capability not null\", 1, caps.size());\n\n        XIdentityCapability xcap = (XIdentityCapability) caps.iterator().next();\n        assertEquals(\"org.apache.felix.eventadmin\", xcap.getSymbolicName());\n        InputStream content = ((RepositoryContent)xcap.getResource()).getContent();\n        try {\n            Bundle bundle = context.installBundle(xcap.getSymbolicName(), content);\n            try {\n                bundle.start();\n                Assert.assertEquals(Bundle.ACTIVE, bundle.getState());\n                ServiceReference sref = context.getServiceReference(\"org.osgi.service.event.EventAdmin\");\n                assertNotNull(\"EventAdmin service not null\", sref);\n            } finally {\n                bundle.uninstall();\n            }\n        } finally {\n            content.close();\n        }\n    }","id":96971,"modified_method":"@Test\n    public void testRepositoryService() throws Exception {\n\n        XRepository repo = getRepository();\n        MavenCoordinates coordinates = MavenCoordinates.parse(\"org.apache.felix:org.apache.felix.eventadmin:1.2.6\");\n        XRequirement req = XRequirementBuilder.create(coordinates).getRequirement();\n        assertNotNull(\"Requirement not null\", req);\n\n        Collection<Capability> caps = repo.findProviders(req);\n        assertEquals(\"Capability not null\", 1, caps.size());\n\n        Capability cap = caps.iterator().next();\n        XResource resource = (XResource) cap.getResource();\n        XIdentityCapability xcap = resource.getIdentityCapability();\n        assertEquals(\"org.apache.felix.eventadmin\", xcap.getSymbolicName());\n        InputStream content = ((RepositoryContent)xcap.getResource()).getContent();\n        try {\n            Bundle bundle = context.installBundle(xcap.getSymbolicName(), content);\n            try {\n                bundle.start();\n                Assert.assertEquals(Bundle.ACTIVE, bundle.getState());\n                ServiceReference sref = context.getServiceReference(\"org.osgi.service.event.EventAdmin\");\n                assertNotNull(\"EventAdmin service not null\", sref);\n            } finally {\n                bundle.uninstall();\n            }\n        } finally {\n            content.close();\n        }\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"private Repository getRepository() {\n        ServiceReference sref = context.getServiceReference(Repository.class.getName());\n        return (Repository) context.getService(sref);\n    }","id":96972,"modified_method":"private XRepository getRepository() {\n        ServiceReference sref = context.getServiceReference(XRepository.class.getName());\n        return (XRepository) context.getService(sref);\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Deployment\n    public static JavaArchive createdeployment() {\n        final JavaArchive archive = ShrinkWrap.create(JavaArchive.class, \"example-bundle\");\n        archive.setManifest(new Asset() {\n            @Override\n            public InputStream openStream() {\n                OSGiManifestBuilder builder = OSGiManifestBuilder.newInstance();\n                builder.addBundleSymbolicName(archive.getName());\n                builder.addBundleManifestVersion(2);\n                builder.addImportPackages(BundleActivator.class, Repository.class, Resource.class);\n                builder.addImportPackages(XRequirementBuilder.class);\n                return builder.openStream();\n            }\n        });\n        return archive;\n    }","id":96973,"modified_method":"@Deployment\n    public static JavaArchive createdeployment() {\n        final JavaArchive archive = ShrinkWrap.create(JavaArchive.class, \"example-bundle\");\n        archive.setManifest(new Asset() {\n            @Override\n            public InputStream openStream() {\n                OSGiManifestBuilder builder = OSGiManifestBuilder.newInstance();\n                builder.addBundleSymbolicName(archive.getName());\n                builder.addBundleManifestVersion(2);\n                builder.addImportPackages(BundleActivator.class, Repository.class, Resource.class);\n                builder.addImportPackages(XRequirementBuilder.class, XRequirement.class);\n                return builder.openStream();\n            }\n        });\n        return archive;\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Deployment(name = BAD_BUNDLE_VERSION, managed = false, testable = false)\n    public static JavaArchive getBadBundleArchive() {\n        final JavaArchive archive = ShrinkWrap.create(JavaArchive.class, BAD_BUNDLE_VERSION);\n        archive.setManifest(new Asset() {\n            public InputStream openStream() {\n                OSGiManifestBuilder builder = OSGiManifestBuilder.newInstance();\n                builder.addBundleManifestVersion(2);\n                builder.addBundleSymbolicName(archive.getName());\n                builder.addManifestHeader(BUNDLE_VERSION, \"bogus\");\n                return builder.openStream();\n            }\n        });\n        return archive;\n    }","id":96974,"modified_method":"@Deployment(name = BAD_BUNDLE_VERSION, managed = false, testable = false)\n    public static JavaArchive getBadBundleArchive() {\n        final JavaArchive archive = ShrinkWrap.create(JavaArchive.class, BAD_BUNDLE_VERSION);\n        archive.setManifest(new Asset() {\n            public InputStream openStream() {\n                ManifestBuilder builder = ManifestBuilder.newInstance();\n                builder.addManifestHeader(Constants.BUNDLE_MANIFESTVERSION, \"2\");\n                builder.addManifestHeader(Constants.BUNDLE_SYMBOLICNAME, archive.getName());\n                builder.addManifestHeader(BUNDLE_VERSION, \"bogus\");\n                return builder.openStream();\n            }\n        });\n        return archive;\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Deployment(name = STOMPLET_SERVER_PROVIDER, managed = false, testable = false)\n    public static Archive<?> getStompletServerProviderArchive() {\n        final JavaArchive archive = ShrinkWrap.create(JavaArchive.class, STOMPLET_SERVER_PROVIDER);\n        archive.addClasses(StompletServerActivator.class);\n        archive.setManifest(new Asset() {\n            public InputStream openStream() {\n                OSGiManifestBuilder builder = OSGiManifestBuilder.newInstance();\n                builder.addBundleSymbolicName(archive.getName());\n                builder.addBundleManifestVersion(2);\n                builder.addBundleActivator(StompletServerActivator.class);\n                builder.addImportPackages(XRequirementBuilder.class, Requirement.class, Repository.class);\n                builder.addImportPackages(BundleActivator.class, PackageAdmin.class, ModuleIdentifier.class);\n                return builder.openStream();\n            }\n        });\n        return archive;\n    }","id":96975,"modified_method":"@Deployment(name = STOMPLET_SERVER_PROVIDER, managed = false, testable = false)\n    public static Archive<?> getStompletServerProviderArchive() {\n        final JavaArchive archive = ShrinkWrap.create(JavaArchive.class, STOMPLET_SERVER_PROVIDER);\n        archive.addClasses(StompletServerActivator.class);\n        archive.setManifest(new Asset() {\n            public InputStream openStream() {\n                OSGiManifestBuilder builder = OSGiManifestBuilder.newInstance();\n                builder.addBundleSymbolicName(archive.getName());\n                builder.addBundleManifestVersion(2);\n                builder.addBundleActivator(StompletServerActivator.class);\n                builder.addImportPackages(XRequirementBuilder.class, XRequirement.class, Requirement.class, Repository.class);\n                builder.addImportPackages(BundleActivator.class, PackageAdmin.class, ModuleIdentifier.class);\n                return builder.openStream();\n            }\n        });\n        return archive;\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"@Deployment(name = EJB3_DEPLOYMENT_NAME, managed = false, testable = false)\n    public static JavaArchive getTestArchive() {\n        final JavaArchive archive = ShrinkWrap.create(JavaArchive.class, EJB3_DEPLOYMENT_NAME);\n        archive.addClass(SimpleStatelessSessionBean.class);\n        archive.setManifest(new Asset() {\n            public InputStream openStream() {\n                OSGiManifestBuilder builder = OSGiManifestBuilder.newInstance();\n                builder.addManifestHeader(\"Dependencies\", \"org.osgi.core,deployment.ejb3-osgi-target:0.0.0\");\n                return builder.openStream();\n            }\n        });\n        return archive;\n    }","id":96976,"modified_method":"@Deployment(name = EJB3_DEPLOYMENT_NAME, managed = false, testable = false)\n    public static JavaArchive getTestArchive() {\n        final JavaArchive archive = ShrinkWrap.create(JavaArchive.class, EJB3_DEPLOYMENT_NAME);\n        archive.addClass(SimpleStatelessSessionBean.class);\n        archive.setManifest(new Asset() {\n            public InputStream openStream() {\n                ManifestBuilder builder = ManifestBuilder.newInstance();\n                builder.addManifestHeader(\"Dependencies\", \"org.osgi.core,deployment.ejb3-osgi-target:0.0.0\");\n                return builder.openStream();\n            }\n        });\n        return archive;\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"private Bundle installSupportBundle(BundleContext context, ModuleIdentifier moduleid) throws BundleException {\n        Repository repository = getRepository(context);\n        Requirement req = XRequirementBuilder.createArtifactRequirement(moduleid);\n        Capability cap = repository.findProviders(Collections.singleton(req)).get(req).iterator().next();\n        URL location = (URL) cap.getAttributes().get(XResourceConstants.CONTENT_URL);\n        return context.installBundle(location.toExternalForm());\n    }","id":96977,"modified_method":"private Bundle installSupportBundle(BundleContext context, ModuleIdentifier moduleid) throws BundleException {\n        XRepository repository = getRepository(context);\n        XRequirement req = XRequirementBuilder.create(moduleid).getRequirement();\n        Capability cap = repository.findProviders(req).iterator().next();\n        InputStream input = ((RepositoryContent)cap.getResource()).getContent();\n        return context.installBundle(moduleid.toString(), input);\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"private Repository getRepository(BundleContext context) {\n        ServiceReference sref = context.getServiceReference(Repository.class.getName());\n        return (Repository) context.getService(sref);\n    }","id":96978,"modified_method":"private XRepository getRepository(BundleContext context) {\n        ServiceReference sref = context.getServiceReference(XRepository.class.getName());\n        return (XRepository) context.getService(sref);\n    }","commit_id":"e5611e37bc56bde4a5c610bc2574b4d7fee77aa2","url":"https://github.com/wildfly/wildfly"},{"original_method":"/**\n\t * Parse the SQL statement and locate any placeholders or named parameters. Named\n\t * parameters are substituted for a JDBC placeholder, and any select list is expanded\n\t * to the required number of placeholders. Select lists may contain an array of\n\t * objects, and in that case the placeholders will be grouped and enclosed with\n\t * parentheses. This allows for the use of \"expression lists\" in the SQL statement\n\t * like: <br /><br />\n\t * {@code select id, name, state from table where (name, age) in (('John', 35), ('Ann', 50))}\n\t * <p>The parameter values passed in are used to determine the number of placeholders to\n\t * be used for a select list. Select lists should be limited to 100 or fewer elements.\n\t * A larger number of elements is not guaranteed to be supported by the database and\n\t * is strictly vendor-dependent.\n\t * @param parsedSql the parsed representation of the SQL statement\n\t * @param paramSource the source for named parameters\n\t * @return the SQL statement with substituted parameters\n\t * @see #parseSqlStatement\n\t */\n\tpublic static String substituteNamedParameters(ParsedSql parsedSql, SqlParameterSource paramSource) {\n\t\tString originalSql = parsedSql.getOriginalSql();\n\t\tStringBuilder actualSql = new StringBuilder();\n\t\tList paramNames = parsedSql.getParameterNames();\n\t\tint lastIndex = 0;\n\t\tfor (int i = 0; i < paramNames.size(); i++) {\n\t\t\tString paramName = (String) paramNames.get(i);\n\t\t\tint[] indexes = parsedSql.getParameterIndexes(i);\n\t\t\tint startIndex = indexes[0];\n\t\t\tint endIndex = indexes[1];\n\t\t\tactualSql.append(originalSql.substring(lastIndex, startIndex));\n\t\t\tif (paramSource != null && paramSource.hasValue(paramName)) {\n\t\t\t\tObject value = paramSource.getValue(paramName);\n\t\t\t\tif (value instanceof SqlParameterValue) {\n\t\t\t\t\tvalue = ((SqlParameterValue) value).getValue();\n\t\t\t\t}\n\t\t\t\tif (value instanceof Collection) {\n\t\t\t\t\tIterator entryIter = ((Collection) value).iterator();\n\t\t\t\t\tint k = 0;\n\t\t\t\t\twhile (entryIter.hasNext()) {\n\t\t\t\t\t\tif (k > 0) {\n\t\t\t\t\t\t\tactualSql.append(\", \");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tk++;\n\t\t\t\t\t\tObject entryItem = entryIter.next();\n\t\t\t\t\t\tif (entryItem instanceof Object[]) {\n\t\t\t\t\t\t\tObject[] expressionList = (Object[]) entryItem;\n\t\t\t\t\t\t\tactualSql.append(\"(\");\n\t\t\t\t\t\t\tfor (int m = 0; m < expressionList.length; m++) {\n\t\t\t\t\t\t\t\tif (m > 0) {\n\t\t\t\t\t\t\t\t\tactualSql.append(\", \");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tactualSql.append(\"?\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tactualSql.append(\")\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tactualSql.append(\"?\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tactualSql.append(\"?\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tactualSql.append(\"?\");\n\t\t\t}\n\t\t\tlastIndex = endIndex;\n\t\t}\n\t\tactualSql.append(originalSql.substring(lastIndex, originalSql.length()));\n\t\treturn actualSql.toString();\n\t}","id":96979,"modified_method":"/**\n\t * Parse the SQL statement and locate any placeholders or named parameters. Named\n\t * parameters are substituted for a JDBC placeholder, and any select list is expanded\n\t * to the required number of placeholders. Select lists may contain an array of\n\t * objects, and in that case the placeholders will be grouped and enclosed with\n\t * parentheses. This allows for the use of \"expression lists\" in the SQL statement\n\t * like: <br /><br />\n\t * {@code select id, name, state from table where (name, age) in (('John', 35), ('Ann', 50))}\n\t * <p>The parameter values passed in are used to determine the number of placeholders to\n\t * be used for a select list. Select lists should be limited to 100 or fewer elements.\n\t * A larger number of elements is not guaranteed to be supported by the database and\n\t * is strictly vendor-dependent.\n\t * @param parsedSql the parsed representation of the SQL statement\n\t * @param paramSource the source for named parameters\n\t * @return the SQL statement with substituted parameters\n\t * @see #parseSqlStatement\n\t */\n\tpublic static String substituteNamedParameters(ParsedSql parsedSql, SqlParameterSource paramSource) {\n\t\tString originalSql = parsedSql.getOriginalSql();\n\t\tStringBuilder actualSql = new StringBuilder();\n\t\tList paramNames = parsedSql.getParameterNames();\n\t\tint lastIndex = 0;\n\t\tfor (int i = 0; i < paramNames.size(); i++) {\n\t\t\tString paramName = (String) paramNames.get(i);\n\t\t\tint[] indexes = parsedSql.getParameterIndexes(i);\n\t\t\tint startIndex = indexes[0];\n\t\t\tint endIndex = indexes[1];\n\t\t\tactualSql.append(originalSql, lastIndex, startIndex);\n\t\t\tif (paramSource != null && paramSource.hasValue(paramName)) {\n\t\t\t\tObject value = paramSource.getValue(paramName);\n\t\t\t\tif (value instanceof SqlParameterValue) {\n\t\t\t\t\tvalue = ((SqlParameterValue) value).getValue();\n\t\t\t\t}\n\t\t\t\tif (value instanceof Collection) {\n\t\t\t\t\tIterator entryIter = ((Collection) value).iterator();\n\t\t\t\t\tint k = 0;\n\t\t\t\t\twhile (entryIter.hasNext()) {\n\t\t\t\t\t\tif (k > 0) {\n\t\t\t\t\t\t\tactualSql.append(\", \");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tk++;\n\t\t\t\t\t\tObject entryItem = entryIter.next();\n\t\t\t\t\t\tif (entryItem instanceof Object[]) {\n\t\t\t\t\t\t\tObject[] expressionList = (Object[]) entryItem;\n\t\t\t\t\t\t\tactualSql.append(\"(\");\n\t\t\t\t\t\t\tfor (int m = 0; m < expressionList.length; m++) {\n\t\t\t\t\t\t\t\tif (m > 0) {\n\t\t\t\t\t\t\t\t\tactualSql.append(\", \");\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tactualSql.append(\"?\");\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tactualSql.append(\")\");\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tactualSql.append(\"?\");\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tactualSql.append(\"?\");\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tactualSql.append(\"?\");\n\t\t\t}\n\t\t\tlastIndex = endIndex;\n\t\t}\n\t\tactualSql.append(originalSql, lastIndex, originalSql.length());\n\t\treturn actualSql.toString();\n\t}","commit_id":"1dc7ff86045e051eb4059b25934f6b796287cb9f","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Convert parameter declarations from an SqlParameterSource to a corresponding List of SqlParameters.\n\t * This is necessary in order to reuse existing methods on JdbcTemplate.\n\t * The SqlParameter for a named parameter is placed in the correct position in the\n\t * resulting list based on the parsed SQL statement info.\n\t * @param parsedSql the parsed SQL statement\n\t * @param paramSource the source for named parameters\n\t */\n\tpublic static List<SqlParameter> buildSqlParameterList(ParsedSql parsedSql, SqlParameterSource paramSource) {\n\t\tList<String> paramNames = parsedSql.getParameterNames();\n\t\tList<SqlParameter> params = new LinkedList<SqlParameter>();\n\t\tfor (String paramName : paramNames) {\n\t\t\tSqlParameter param = new SqlParameter(\n\t\t\t\t\tparamName,\n\t\t\t\t\tparamSource.getSqlType(paramName),\n\t\t\t\t\tparamSource.getTypeName(paramName));\n\t\t\tparams.add(param);\n\t\t}\n\t\treturn params;\n\t}","id":96980,"modified_method":"/**\n\t * Convert parameter declarations from an SqlParameterSource to a corresponding List of SqlParameters.\n\t * This is necessary in order to reuse existing methods on JdbcTemplate.\n\t * The SqlParameter for a named parameter is placed in the correct position in the\n\t * resulting list based on the parsed SQL statement info.\n\t * @param parsedSql the parsed SQL statement\n\t * @param paramSource the source for named parameters\n\t */\n\tpublic static List<SqlParameter> buildSqlParameterList(ParsedSql parsedSql, SqlParameterSource paramSource) {\n\t\tList<String> paramNames = parsedSql.getParameterNames();\n\t\tList<SqlParameter> params = new LinkedList<SqlParameter>();\n\t\tfor (String paramName : paramNames) {\n\t\t\tparams.add(new SqlParameter(paramName, paramSource.getSqlType(paramName), paramSource.getTypeName(paramName)));\n\t\t}\n\t\treturn params;\n\t}","commit_id":"1dc7ff86045e051eb4059b25934f6b796287cb9f","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public String getParameterName() {\n\t\t\treturn parameterName;\n\t\t}","id":96981,"modified_method":"public String getParameterName() {\n\t\t\treturn this.parameterName;\n\t\t}","commit_id":"1dc7ff86045e051eb4059b25934f6b796287cb9f","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public int getEndIndex() {\n\t\t\treturn endIndex;\n\t\t}","id":96982,"modified_method":"public int getEndIndex() {\n\t\t\treturn this.endIndex;\n\t\t}","commit_id":"1dc7ff86045e051eb4059b25934f6b796287cb9f","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"public int getStartIndex() {\n\t\t\treturn startIndex;\n\t\t}","id":96983,"modified_method":"public int getStartIndex() {\n\t\t\treturn this.startIndex;\n\t\t}","commit_id":"1dc7ff86045e051eb4059b25934f6b796287cb9f","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"/**\n\t * Parse the SQL statement and locate any placeholders or named parameters.\n\t * Named parameters are substituted for a JDBC placeholder.\n\t * @param sql the SQL statement\n\t * @return the parsed statement, represented as ParsedSql instance\n\t */\n\tpublic static ParsedSql parseSqlStatement(final String sql) {\n\t\tAssert.notNull(sql, \"SQL must not be null\");\n\n\t\tSet<String> namedParameters = new HashSet<String>();\n\t\tString sqlToUse = sql;\n\t\tList<ParameterHolder> parameterList = new ArrayList<ParameterHolder>();\n\n\t\tchar[] statement = sql.toCharArray();\n\t\tint namedParameterCount = 0;\n\t\tint unnamedParameterCount = 0;\n\t\tint totalParameterCount = 0;\n\n\t\tint escapes = 0;\n\t\tint i = 0;\n\t\twhile (i < statement.length) {\n\t\t\tint skipToPosition = i;\n\t\t\twhile (i < statement.length) {\n\t\t\t\tskipToPosition = skipCommentsAndQuotes(statement, i);\n\t\t\t\tif (i == skipToPosition) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ti = skipToPosition;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (i >= statement.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tchar c = statement[i];\n\t\t\tif (c == ':' || c == '&') {\n\t\t\t\tint j = i + 1;\n\t\t\t\tif (j < statement.length && statement[j] == ':' && c == ':') {\n\t\t\t\t\t// Postgres-style \"::\" casting operator - to be skipped.\n\t\t\t\t\ti = i + 2;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tString parameter = null;\n\t\t\t\tif (j < statement.length && c == ':' && statement[j] == '{') {\n\t\t\t\t\t// :{x} style parameter\n\t\t\t\t\twhile (j < statement.length && !('}' == statement[j])) {\n\t\t\t\t\t\tj++;\n\t\t\t\t\t\tif (':' == statement[j] || '{' == statement[j]) {\n\t\t\t\t\t\t\tthrow new InvalidDataAccessApiUsageException(\"Parameter name contains invalid character '\" + statement[j] + \"' at position \" + i + \" in statement \" + sql);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (j >= statement.length) {\n\t\t\t\t\t\tthrow new InvalidDataAccessApiUsageException(\"Non-terminated named parameter declaration at position \" + i + \" in statement \" + sql);\n\t\t\t\t\t}\n\t\t\t\t\tif (j - i > 3) {\n\t\t\t\t\t\tparameter = sql.substring(i + 2, j);\n\t\t\t\t\t\tnamedParameterCount = addNewNamedParameter(namedParameters, namedParameterCount, parameter);\n\t\t\t\t\t\ttotalParameterCount = addNamedParameter(parameterList, totalParameterCount, escapes, i, j + 1, parameter);\n\t\t\t\t\t}\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\twhile (j < statement.length && !isParameterSeparator(statement[j])) {\n\t\t\t\t\t\tj++;\n\t\t\t\t\t}\n\t\t\t\t\tif (j - i > 1) {\n\t\t\t\t\t\tparameter = sql.substring(i + 1, j);\n\t\t\t\t\t\tnamedParameterCount = addNewNamedParameter(namedParameters, namedParameterCount, parameter);\n\t\t\t\t\t\ttotalParameterCount = addNamedParameter(parameterList, totalParameterCount, escapes, i, j, parameter);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti = j - 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (c == '\\\\') {\n\t\t\t\t\tint j = i + 1;\n\t\t\t\t\tif (j < statement.length && statement[j] == ':') {\n\t\t\t\t\t\t// this is an escaped : and should be skipped\n\t\t\t\t\t\tsqlToUse = sqlToUse.substring(0, i - escapes) + sqlToUse.substring(i - escapes + 1);\n\t\t\t\t\t\tescapes++;\n\t\t\t\t\t\ti = i + 2;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (c == '?') {\n\t\t\t\t\tunnamedParameterCount++;\n\t\t\t\t\ttotalParameterCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tParsedSql parsedSql = new ParsedSql(sqlToUse);\n\t\tfor (ParameterHolder ph : parameterList) {\n\t\t\tparsedSql.addNamedParameter(ph.getParameterName(), ph.getStartIndex(), ph.getEndIndex());\n\t\t}\n\t\tparsedSql.setNamedParameterCount(namedParameterCount);\n\t\tparsedSql.setUnnamedParameterCount(unnamedParameterCount);\n\t\tparsedSql.setTotalParameterCount(totalParameterCount);\n\t\treturn parsedSql;\n\t}","id":96984,"modified_method":"/**\n\t * Parse the SQL statement and locate any placeholders or named parameters.\n\t * Named parameters are substituted for a JDBC placeholder.\n\t * @param sql the SQL statement\n\t * @return the parsed statement, represented as ParsedSql instance\n\t */\n\tpublic static ParsedSql parseSqlStatement(final String sql) {\n\t\tAssert.notNull(sql, \"SQL must not be null\");\n\n\t\tSet<String> namedParameters = new HashSet<String>();\n\t\tString sqlToUse = sql;\n\t\tList<ParameterHolder> parameterList = new ArrayList<ParameterHolder>();\n\n\t\tchar[] statement = sql.toCharArray();\n\t\tint namedParameterCount = 0;\n\t\tint unnamedParameterCount = 0;\n\t\tint totalParameterCount = 0;\n\n\t\tint escapes = 0;\n\t\tint i = 0;\n\t\twhile (i < statement.length) {\n\t\t\tint skipToPosition = i;\n\t\t\twhile (i < statement.length) {\n\t\t\t\tskipToPosition = skipCommentsAndQuotes(statement, i);\n\t\t\t\tif (i == skipToPosition) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\ti = skipToPosition;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (i >= statement.length) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tchar c = statement[i];\n\t\t\tif (c == ':' || c == '&') {\n\t\t\t\tint j = i + 1;\n\t\t\t\tif (j < statement.length && statement[j] == ':' && c == ':') {\n\t\t\t\t\t// Postgres-style \"::\" casting operator - to be skipped.\n\t\t\t\t\ti = i + 2;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tString parameter = null;\n\t\t\t\tif (j < statement.length && c == ':' && statement[j] == '{') {\n\t\t\t\t\t// :{x} style parameter\n\t\t\t\t\twhile (j < statement.length && !('}' == statement[j])) {\n\t\t\t\t\t\tj++;\n\t\t\t\t\t\tif (':' == statement[j] || '{' == statement[j]) {\n\t\t\t\t\t\t\tthrow new InvalidDataAccessApiUsageException(\"Parameter name contains invalid character '\" +\n\t\t\t\t\t\t\t\t\tstatement[j] + \"' at position \" + i + \" in statement \" + sql);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (j >= statement.length) {\n\t\t\t\t\t\tthrow new InvalidDataAccessApiUsageException(\n\t\t\t\t\t\t\t\t\"Non-terminated named parameter declaration at position \" + i + \" in statement: \" + sql);\n\t\t\t\t\t}\n\t\t\t\t\tif (j - i > 3) {\n\t\t\t\t\t\tparameter = sql.substring(i + 2, j);\n\t\t\t\t\t\tnamedParameterCount = addNewNamedParameter(namedParameters, namedParameterCount, parameter);\n\t\t\t\t\t\ttotalParameterCount = addNamedParameter(parameterList, totalParameterCount, escapes, i, j + 1, parameter);\n\t\t\t\t\t}\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\twhile (j < statement.length && !isParameterSeparator(statement[j])) {\n\t\t\t\t\t\tj++;\n\t\t\t\t\t}\n\t\t\t\t\tif (j - i > 1) {\n\t\t\t\t\t\tparameter = sql.substring(i + 1, j);\n\t\t\t\t\t\tnamedParameterCount = addNewNamedParameter(namedParameters, namedParameterCount, parameter);\n\t\t\t\t\t\ttotalParameterCount = addNamedParameter(parameterList, totalParameterCount, escapes, i, j, parameter);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti = j - 1;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (c == '\\\\') {\n\t\t\t\t\tint j = i + 1;\n\t\t\t\t\tif (j < statement.length && statement[j] == ':') {\n\t\t\t\t\t\t// this is an escaped : and should be skipped\n\t\t\t\t\t\tsqlToUse = sqlToUse.substring(0, i - escapes) + sqlToUse.substring(i - escapes + 1);\n\t\t\t\t\t\tescapes++;\n\t\t\t\t\t\ti = i + 2;\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (c == '?') {\n\t\t\t\t\tunnamedParameterCount++;\n\t\t\t\t\ttotalParameterCount++;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti++;\n\t\t}\n\t\tParsedSql parsedSql = new ParsedSql(sqlToUse);\n\t\tfor (ParameterHolder ph : parameterList) {\n\t\t\tparsedSql.addNamedParameter(ph.getParameterName(), ph.getStartIndex(), ph.getEndIndex());\n\t\t}\n\t\tparsedSql.setNamedParameterCount(namedParameterCount);\n\t\tparsedSql.setUnnamedParameterCount(unnamedParameterCount);\n\t\tparsedSql.setTotalParameterCount(totalParameterCount);\n\t\treturn parsedSql;\n\t}","commit_id":"1dc7ff86045e051eb4059b25934f6b796287cb9f","url":"https://github.com/spring-projects/spring-framework"},{"original_method":"@Override\n  public boolean isExternalAnnotationWritable(@NotNull PsiModifierListOwner listOwner, @NotNull String annotationFQN) {\n    // note that this method doesn't cache it's result\n    Map<String, PsiAnnotation> map = doCollect(listOwner, true);\n    return map.containsKey(annotationFQN);\n  }","id":96985,"modified_method":"@Override\n  public boolean isExternalAnnotationWritable(@NotNull PsiModifierListOwner listOwner, @NotNull final String annotationFQN) {\n    // note that this method doesn't cache it's result\n    List<AnnotationData> map = doCollect(listOwner, true);\n    return findByFQN(map, annotationFQN) != null;\n  }","commit_id":"ead4e15edd493bc815795c0a10809a2db6fad49a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  protected static String getFQN(@NotNull String packageName, @NotNull PsiFile psiFile) {\n    VirtualFile virtualFile = psiFile.getVirtualFile();\n    if (virtualFile == null) return null;\n    return StringUtil.getQualifiedName(packageName, virtualFile.getNameWithoutExtension());\n  }","id":96986,"modified_method":"@Nullable\n  private static String getFQN(@NotNull String packageName, @NotNull PsiFile psiFile) {\n    VirtualFile virtualFile = psiFile.getVirtualFile();\n    if (virtualFile == null) return null;\n    return StringUtil.getQualifiedName(packageName, virtualFile.getNameWithoutExtension());\n  }","commit_id":"ead4e15edd493bc815795c0a10809a2db6fad49a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Nullable\n  protected static String getNormalizedExternalName(@NotNull PsiModifierListOwner owner) {\n    String externalName = getExternalName(owner, true);\n    if (externalName == null) {\n      return null;\n    }\n    if (owner instanceof PsiParameter && owner.getParent() instanceof PsiParameterList) {\n      final PsiMethod method = PsiTreeUtil.getParentOfType(owner, PsiMethod.class);\n      if (method != null) {\n        externalName =\n          externalName.substring(0, externalName.lastIndexOf(' ') + 1) + method.getParameterList().getParameterIndex((PsiParameter)owner);\n      }\n    }\n    final int idx = externalName.indexOf('(');\n    if (idx == -1) return externalName;\n    StringBuilder buf = new StringBuilder();\n    int rightIdx = externalName.indexOf(')');\n    String[] params = externalName.substring(idx + 1, rightIdx).split(\",\");\n    buf.append(externalName.substring(0, idx + 1));\n    for (String param : params) {\n      param = param.trim();\n      final int spaceIdx = param.indexOf(' ');\n      buf.append(spaceIdx > -1 ? param.substring(0, spaceIdx) : param).append(\", \");\n    }\n    return StringUtil.trimEnd(buf.toString(), \", \") + externalName.substring(rightIdx);\n  }","id":96987,"modified_method":"@Nullable\n  protected static String getNormalizedExternalName(@NotNull PsiModifierListOwner owner) {\n    String externalName = getExternalName(owner, true);\n    if (externalName == null) {\n      return null;\n    }\n    if (owner instanceof PsiParameter && owner.getParent() instanceof PsiParameterList) {\n      final PsiMethod method = PsiTreeUtil.getParentOfType(owner, PsiMethod.class);\n      if (method != null) {\n        externalName =\n          externalName.substring(0, externalName.lastIndexOf(' ') + 1) + method.getParameterList().getParameterIndex((PsiParameter)owner);\n      }\n    }\n    final int idx = externalName.indexOf('(');\n    if (idx == -1) return externalName;\n    StringBuilder buf = new StringBuilder(externalName.length());\n    int rightIdx = externalName.indexOf(')');\n    String[] params = externalName.substring(idx + 1, rightIdx).split(\",\");\n    buf.append(externalName, 0, idx + 1);\n    for (String param : params) {\n      param = param.trim();\n      int spaceIdx = param.indexOf(' ');\n      if (spaceIdx > -1) {\n        buf.append(param, 0, spaceIdx);\n      }\n      else {\n        buf.append(param);\n      }\n      buf.append(\", \");\n    }\n    if (StringUtil.endsWith(buf, \", \")) {\n      buf.delete(buf.length() - \", \".length(), buf.length());\n    }\n    buf.append(externalName, rightIdx, externalName.length());\n    return buf.toString();\n  }","commit_id":"ead4e15edd493bc815795c0a10809a2db6fad49a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  @Nullable\n  public List<PsiFile> findExternalAnnotationsFiles(@NotNull PsiModifierListOwner listOwner) {\n    final PsiFile containingFile = listOwner.getContainingFile();\n    if (!(containingFile instanceof PsiJavaFile)) {\n      return null;\n    }\n    final PsiJavaFile javaFile = (PsiJavaFile)containingFile;\n    final String packageName = javaFile.getPackageName();\n    final VirtualFile virtualFile = containingFile.getVirtualFile();\n    String fqn = getFQN(packageName, containingFile);\n    if (fqn == null) return null;\n    final List<PsiFile> files = myExternalAnnotations.get(fqn);\n    if (files == NULL) return null;\n    if (files != null) {\n      boolean allValid = true;\n      for (PsiFile file : files) {\n        allValid &= file.isValid();\n      }\n      if (allValid) {\n        return files;\n      }\n    }\n\n    if (virtualFile == null) {\n      return null;\n    }\n\n    ArrayList<PsiFile> possibleAnnotationsXmls = new ArrayList<PsiFile>();\n    for (VirtualFile root : getExternalAnnotationsRoots(virtualFile)) {\n      final VirtualFile ext = root.findFileByRelativePath(packageName.replace(\".\", \"/\") + \"/\" + ANNOTATIONS_XML);\n      if (ext == null) continue;\n      final PsiFile psiFile = myPsiManager.findFile(ext);\n      if (psiFile == null) continue;\n      possibleAnnotationsXmls.add(psiFile);\n    }\n    possibleAnnotationsXmls.trimToSize();\n    if (!possibleAnnotationsXmls.isEmpty()) {\n      // sorting by writability: writable go first\n      Collections.sort(possibleAnnotationsXmls, new Comparator<PsiFile>() {\n        @Override\n        public int compare(PsiFile f1, PsiFile f2) {\n          boolean w1 = f1.isWritable();\n          boolean w2 = f2.isWritable();\n          if (w1 == w2) {\n            return 0;\n          }\n          return w1 ? -1 : 1;\n        }\n      });\n\n      myExternalAnnotations.put(fqn, possibleAnnotationsXmls);\n      return possibleAnnotationsXmls;\n    }\n    myExternalAnnotations.put(fqn, NULL);\n    return null;\n  }","id":96988,"modified_method":"@Override\n  @Nullable\n  public List<PsiFile> findExternalAnnotationsFiles(@NotNull PsiModifierListOwner listOwner) {\n    final PsiFile containingFile = listOwner.getContainingFile();\n    if (!(containingFile instanceof PsiJavaFile)) {\n      return null;\n    }\n    final PsiJavaFile javaFile = (PsiJavaFile)containingFile;\n    final String packageName = javaFile.getPackageName();\n    final VirtualFile virtualFile = containingFile.getVirtualFile();\n    String fqn = getFQN(packageName, containingFile);\n    if (fqn == null) return null;\n    final List<PsiFile> files = myExternalAnnotations.get(fqn);\n    if (files == NULL_LIST) return null;\n    if (files != null) {\n      boolean allValid = true;\n      for (PsiFile file : files) {\n        allValid &= file.isValid();\n      }\n      if (allValid) {\n        return files;\n      }\n    }\n\n    if (virtualFile == null) {\n      return null;\n    }\n\n    Set<PsiFile> possibleAnnotationsXmls = new THashSet<PsiFile>();\n    for (VirtualFile root : getExternalAnnotationsRoots(virtualFile)) {\n      final VirtualFile ext = root.findFileByRelativePath(packageName.replace(\".\", \"/\") + \"/\" + ANNOTATIONS_XML);\n      if (ext == null) continue;\n      final PsiFile psiFile = myPsiManager.findFile(ext);\n      if (psiFile == null) continue;\n      possibleAnnotationsXmls.add(psiFile);\n    }\n    List<PsiFile> result;\n    if (possibleAnnotationsXmls.isEmpty()) {\n      myExternalAnnotations.put(fqn, NULL_LIST);\n      result = null;\n    }\n    else {\n      result = new SmartList<PsiFile>(possibleAnnotationsXmls);\n      // sorting by writability: writable go first\n      Collections.sort(result, new Comparator<PsiFile>() {\n        @Override\n        public int compare(PsiFile f1, PsiFile f2) {\n          boolean w1 = f1.isWritable();\n          boolean w2 = f2.isWritable();\n          if (w1 == w2) {\n            return 0;\n          }\n          return w1 ? -1 : 1;\n        }\n      });\n\n      myExternalAnnotations.put(fqn, result);\n    }\n    return result;\n  }","commit_id":"ead4e15edd493bc815795c0a10809a2db6fad49a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  private Map<String, PsiAnnotation> doCollect(@NotNull PsiModifierListOwner listOwner, boolean onlyWritable) {\n    final List<PsiFile> files = findExternalAnnotationsFiles(listOwner);\n    if (files == null) {\n      return Collections.emptyMap();\n    }\n    Map<String, PsiAnnotation> result = new THashMap<String, PsiAnnotation>();\n    String externalName = getExternalName(listOwner, false);\n    String oldExternalName = getNormalizedExternalName(listOwner);\n\n    final PsiElementFactory factory = JavaPsiFacade.getInstance(myPsiManager.getProject()).getElementFactory();\n    for (PsiFile file : files) {\n      if (!file.isValid()) continue;\n      if (onlyWritable && !file.isWritable()) continue;\n\n      final MultiMap<String, AnnotationData> fileData = getDataFromFile(file);\n\n      collectAnnotations(result, fileData.get(externalName), factory);\n      collectAnnotations(result, fileData.get(oldExternalName), factory);\n    }\n    return result;\n  }","id":96989,"modified_method":"@NotNull\n  private List<AnnotationData> doCollect(@NotNull PsiModifierListOwner listOwner, boolean onlyWritable) {\n    final List<PsiFile> files = findExternalAnnotationsFiles(listOwner);\n    if (files == null) {\n      return NO_DATA;\n    }\n    SmartList<AnnotationData> result = new SmartList<AnnotationData>();\n    String externalName = getExternalName(listOwner, false);\n    if (externalName == null) return NO_DATA;\n    String oldExternalName = getNormalizedExternalName(listOwner);\n\n    for (PsiFile file : files) {\n      if (!file.isValid()) continue;\n      if (onlyWritable && !file.isWritable()) continue;\n\n      MostlySingularMultiMap<String, AnnotationData> fileData = getDataFromFile(file);\n\n      Collection<AnnotationData> data = (Collection<AnnotationData>)fileData.get(externalName);\n      for (AnnotationData ad : data) {\n        if (result.contains(ad)) {\n          LOG.error(\"Duplicate signature:\\n\" + externalName + \"; in  \" + toVirtualFiles(files));\n        }\n        else {\n          result.add(ad);\n        }\n      }\n      if (oldExternalName != null && !externalName.equals(oldExternalName)) {\n        Collection<AnnotationData> oldCollection = (Collection<AnnotationData>)fileData.get(oldExternalName);\n        for (AnnotationData ad : oldCollection) {\n          if (result.contains(ad)) {\n            LOG.error(\"Duplicate signature o:\\n\" + oldExternalName + \"; in  \" + toVirtualFiles(files));\n          }\n          else {\n            result.add(ad);\n          }\n        }\n      }\n    }\n    if (result.isEmpty()) {\n      return NO_DATA;\n    }\n    result.trimToSize();\n    return result;\n  }","commit_id":"ead4e15edd493bc815795c0a10809a2db6fad49a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  @Nullable\n  public PsiAnnotation findExternalAnnotation(@NotNull final PsiModifierListOwner listOwner, @NotNull final String annotationFQN) {\n    return collectExternalAnnotations(listOwner).get(annotationFQN);\n  }","id":96990,"modified_method":"@Override\n  @Nullable\n  public PsiAnnotation findExternalAnnotation(@NotNull final PsiModifierListOwner listOwner, @NotNull final String annotationFQN) {\n    List<AnnotationData> list = collectExternalAnnotations(listOwner);\n    AnnotationData data = findByFQN(list, annotationFQN);\n    return data == null ? null : data.getAnnotation();\n  }","commit_id":"ead4e15edd493bc815795c0a10809a2db6fad49a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  private MultiMap<String, AnnotationData> getDataFromFile(@NotNull PsiFile file) {\n    Pair<MultiMap<String, AnnotationData>, Long> cached = annotationsFileToDataAndModificationStamp.get(file);\n    if (cached != null && cached.getSecond() == file.getModificationStamp()) {\n      return cached.getFirst();\n    }\n    MultiMap<String, AnnotationData> data = new MultiMap<String, AnnotationData>();\n    try {\n      VirtualFile virtualFile = file.getVirtualFile();\n      if (virtualFile != null) {\n        Document document = JDOMUtil.loadDocument(escapeAttributes(StreamUtil.readText(virtualFile.getInputStream())));\n        Element rootElement = document.getRootElement();\n        if (rootElement != null) {\n          //noinspection unchecked\n          for (Element element : (List<Element>) rootElement.getChildren()) {\n            String ownerName = element.getAttributeValue(\"name\");\n            if (ownerName == null) continue;\n            //noinspection unchecked\n            for (Element annotationElement : (List<Element>) element.getChildren()) {\n              String annotationFQN = annotationElement.getAttributeValue(\"name\");\n              if (StringUtil.isEmpty(annotationFQN)) continue;\n              StringBuilder buf = new StringBuilder();\n              //noinspection unchecked\n              for (Element annotationParameter : (List<Element>) annotationElement.getChildren()) {\n                buf.append(\",\");\n                String nameValue = annotationParameter.getAttributeValue(\"name\");\n                if (nameValue != null) {\n                  buf.append(nameValue).append(\"=\");\n                }\n                buf.append(annotationParameter.getAttributeValue(\"val\"));\n              }\n              String annotationText = \"@\" + annotationFQN + (buf.length() > 0 ? \"(\" + StringUtil.trimStart(buf.toString(), \",\") + \")\" : \"\");\n              data.putValue(ownerName, new AnnotationData(annotationFQN, annotationText));\n            }\n          }\n        }\n      }\n    }\n    catch (IOException e) {\n      LOG.error(e);\n    }\n    catch (JDOMException e) {\n      LOG.error(e);\n    }\n    if (data.isEmpty()) {\n      data = MultiMap.emptyInstance();\n    }\n    Pair<MultiMap<String, AnnotationData>, Long> pair = Pair.create(data, file.getModificationStamp());\n    pair = ConcurrencyUtil.cacheOrGet(annotationsFileToDataAndModificationStamp, file, pair);\n    data = pair.first;\n\n    return data;\n  }","id":96991,"modified_method":"@NotNull\n  private MostlySingularMultiMap<String, AnnotationData> getDataFromFile(@NotNull PsiFile file) {\n    Pair<MostlySingularMultiMap<String, AnnotationData>, Long> cached = annotationFileToDataAndModStamp.get(file);\n    if (cached != null && cached.getSecond() == file.getModificationStamp()) {\n      return cached.getFirst();\n    }\n    MostlySingularMultiMap<String, AnnotationData> data = new MostlySingularMultiMap<String, AnnotationData>();\n    try {\n      Document document = JDOMUtil.loadDocument(escapeAttributes(file.getText()));\n      Element rootElement = document.getRootElement();\n      if (rootElement != null) {\n        boolean sorted = true;\n        boolean modified = false;\n        String prevItemName = null;\n        //noinspection unchecked\n        for (Element element : (List<Element>) rootElement.getChildren(\"item\")) {\n          String externalName = element.getAttributeValue(\"name\");\n          if (externalName == null) {\n            element.detach();\n            modified = true;\n            continue;\n          }\n          if (prevItemName != null && prevItemName.compareTo(externalName) > 0) {\n            sorted = false;\n          }\n          prevItemName = externalName;\n\n          //noinspection unchecked\n          for (Element annotationElement : (List<Element>) element.getChildren(\"annotation\")) {\n            String annotationFQN = annotationElement.getAttributeValue(\"name\");\n            if (StringUtil.isEmpty(annotationFQN)) continue;\n            annotationFQN = intern(annotationFQN);\n            //noinspection unchecked\n            List<Element> children = (List<Element>)annotationElement.getChildren();\n            StringBuilder buf = new StringBuilder(children.size() * \"name=value,\".length()); // just guess\n            for (Element annotationParameter : children) {\n              if (buf.length() != 0) {\n                buf.append(\",\");\n              }\n              String nameValue = annotationParameter.getAttributeValue(\"name\");\n              if (nameValue != null) {\n                buf.append(nameValue);\n                buf.append(\"=\");\n              }\n              buf.append(annotationParameter.getAttributeValue(\"val\"));\n            }\n            String annotationParameters = buf.length() == 0 ? \"\" : intern(buf.toString());\n            for (AnnotationData existingData : data.get(externalName)) {\n              if (existingData.annotationClassFqName.equals(annotationFQN)) {\n                LOG.error(\"Duplicate annotation '\" + annotationFQN+\"' for signature: '\" + externalName + \"' in the file \" + file.getVirtualFile().getPresentableUrl());\n              }\n            }\n            AnnotationData annData = internAnnotationData(new AnnotationData(annotationFQN, annotationParameters));\n\n            data.add(externalName, annData);\n          }\n        }\n        if (!sorted) {\n          modified = true;\n          List<Element> items = new ArrayList<Element>(rootElement.getChildren(\"item\"));\n          rootElement.removeChildren(\"item\");\n          Collections.sort(items, new Comparator<Element>() {\n            @Override\n            public int compare(Element item1, Element item2) {\n              String externalName1 = item1.getAttributeValue(\"name\");\n              String externalName2 = item2.getAttributeValue(\"name\");\n              return externalName1.compareTo(externalName2);\n            }\n          });\n          for (Element item : items) {\n            rootElement.addContent(item);\n          }\n        }\n        VirtualFile virtualFile = file.getVirtualFile();\n        if (modified && virtualFile.isInLocalFileSystem() && virtualFile.isWritable()) {\n          String lineSeparator = FileDocumentManager.getInstance().getLineSeparator(virtualFile, file.getProject());\n          JDOMUtil.writeDocument(document, virtualFile.getPath(), lineSeparator);\n        }\n      }\n    }\n    catch (IOException e) {\n      LOG.error(e);\n    }\n    catch (JDOMException e) {\n      LOG.error(e);\n    }\n    if (data.isEmpty()) {\n      data = MostlySingularMultiMap.emptyMap();\n    }\n    data.compact();\n    Pair<MostlySingularMultiMap<String, AnnotationData>, Long> pair = Pair.create(data, file.getModificationStamp());\n    annotationFileToDataAndModStamp.put(file, pair);\n\n    return data;\n  }","commit_id":"ead4e15edd493bc815795c0a10809a2db6fad49a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  @Nullable\n  public PsiAnnotation[] findExternalAnnotations(@NotNull final PsiModifierListOwner listOwner) {\n    final Map<String, PsiAnnotation> result = collectExternalAnnotations(listOwner);\n    return result.isEmpty() ? null : result.values().toArray(new PsiAnnotation[result.size()]);\n  }","id":96992,"modified_method":"@Override\n  @Nullable\n  public PsiAnnotation[] findExternalAnnotations(@NotNull final PsiModifierListOwner listOwner) {\n    final List<AnnotationData> result = collectExternalAnnotations(listOwner);\n    return result.isEmpty() ? null : ContainerUtil.map2Array(result, PsiAnnotation.EMPTY_ARRAY, new Function<AnnotationData, PsiAnnotation>() {\n      @Override\n      public PsiAnnotation fun(AnnotationData data) {\n        return data.getAnnotation();\n      }\n    });\n  }","commit_id":"ead4e15edd493bc815795c0a10809a2db6fad49a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  private Map<String, PsiAnnotation> collectExternalAnnotations(@NotNull final PsiModifierListOwner listOwner) {\n    if (!hasAnyAnnotationsRoots()) return Collections.emptyMap();\n\n    Map<String, PsiAnnotation> map = cache.get(listOwner);\n    if (map == null) {\n      map = doCollect(listOwner, false);\n      map = ConcurrencyUtil.cacheOrGet(cache, listOwner, map);\n    }\n    return map;\n  }","id":96993,"modified_method":"@NotNull\n  private List<AnnotationData> collectExternalAnnotations(@NotNull PsiModifierListOwner listOwner) {\n    if (!hasAnyAnnotationsRoots()) return Collections.emptyList();\n\n    List<AnnotationData> cached;\n    while (true) {\n      cached = (List<AnnotationData>)cache.get(listOwner);\n      if (cached == NO_DATA || !cached.isEmpty()) return cached;\n      List<AnnotationData> computed = doCollect(listOwner, false);\n      if (cache.replace(listOwner, cached, computed)) {\n        cached = computed;\n        break;\n      }\n    }\n    return cached;\n  }","commit_id":"ead4e15edd493bc815795c0a10809a2db6fad49a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  private static String escapeAttributes(@NotNull String invalidXml) {\n    // We assume that XML has single- and double-quote characters only for attribute values, therefore we don't any complex parsing,\n    // just have binary inAttribute state\n    StringBuilder buf = new StringBuilder();\n    boolean inAttribute = false;\n    for (int i = 0; i < invalidXml.length(); i++) {\n      char c = invalidXml.charAt(i);\n      if (inAttribute && c == '<') {\n        buf.append(\"&lt;\");\n      }\n      else if (inAttribute && c == '>') {\n        buf.append(\"&gt;\");\n      }\n      else if (c == '\\\"' || c == '\\'') {\n        buf.append('\\\"');\n        inAttribute = !inAttribute;\n      }\n      else {\n        buf.append(c);\n      }\n    }\n    return buf.toString();\n  }","id":96994,"modified_method":"@NotNull\n  private static String escapeAttributes(@NotNull String invalidXml) {\n    // We assume that XML has single- and double-quote characters only for attribute values, therefore we don't any complex parsing,\n    // just have binary inAttribute state\n    StringBuilder buf = new StringBuilder(invalidXml.length());\n    boolean inAttribute = false;\n    for (int i = 0; i < invalidXml.length(); i++) {\n      char c = invalidXml.charAt(i);\n      if (inAttribute && c == '<') {\n        buf.append(\"&lt;\");\n      }\n      else if (inAttribute && c == '>') {\n        buf.append(\"&gt;\");\n      }\n      else if (c == '\\\"' || c == '\\'') {\n        buf.append('\\\"');\n        inAttribute = !inAttribute;\n      }\n      else {\n        buf.append(c);\n      }\n    }\n    return buf.toString();\n  }","commit_id":"ead4e15edd493bc815795c0a10809a2db6fad49a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private AnnotationData(@NotNull String annotationClassFqName, @NotNull String annotationText) {\n      this.annotationClassFqName = annotationClassFqName;\n      this.annotationText = annotationText;\n    }","id":96995,"modified_method":"private AnnotationData(@NotNull String annotationClassFqName, @NotNull String annotationParameters) {\n      this.annotationClassFqName = annotationClassFqName;\n      this.annotationParameters = annotationParameters;\n    }","commit_id":"ead4e15edd493bc815795c0a10809a2db6fad49a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"protected void dropCache() {\n    myExternalAnnotations.clear();\n    annotationsFileToDataAndModificationStamp.clear();\n    cache.clear();\n  }","id":96996,"modified_method":"protected void dropCache() {\n    myExternalAnnotations.clear();\n    annotationFileToDataAndModStamp.clear();\n    cache.clear();\n  }","commit_id":"ead4e15edd493bc815795c0a10809a2db6fad49a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@Override\n  public CharSequence intern(final CharSequence text) {\n    if (text.length() > INTERN_THRESHOLD) return createSequence(text);\n\n    int idx = STATIC_ENTRIES.index(text);\n    if (idx >= 0) {\n      return STATIC_ENTRIES.get(idx);\n    }\n\n    synchronized(entries) {\n      idx = entries.index(text);\n      if (idx >= 0) {\n        return entries.get(idx);\n      }\n\n      // We need to create separate string just to prevent referencing all character data when original is string or char sequence over string\n      final CharSequence entry = createSequence(text);\n      boolean added = entries.add(entry);\n      assert added;\n\n      return entry;\n    }\n  }","id":96997,"modified_method":"@NotNull\n  @Override\n  public CharSequence intern(@NotNull final CharSequence text) {\n    if (text.length() > INTERN_THRESHOLD) return createSequence(text);\n\n    return doIntern(text);\n  }","commit_id":"ead4e15edd493bc815795c0a10809a2db6fad49a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"private static CharSequence createSequence(final CharSequence text) {\n    final char[] buf = new char[text.length()];\n    CharArrayUtil.getChars(text, buf, 0);\n    return new CharArrayCharSequence(buf);\n  }","id":96998,"modified_method":"@NotNull\n  private static String createSequence(@NotNull CharSequence text) {\n    char[] buf = new char[text.length()];\n    CharArrayUtil.getChars(text, buf, 0);\n\n    return StringFactory.createShared(buf); // this way the .toString() doesn't create another instance (as opposed to new CharArrayCharSequence())\n  }","commit_id":"ead4e15edd493bc815795c0a10809a2db6fad49a","url":"https://github.com/JetBrains/intellij-community"},{"original_method":"@NotNull\n  private static VirtualFile[] filterByReadOnliness(@NotNull VirtualFile[] files) {\n    List<VirtualFile> result = new ArrayList<VirtualFile>();\n    for (VirtualFile file : files) {\n      if (file.isInLocalFileSystem()) {\n        result.add(file);\n      }\n    }\n    return VfsUtilCore.toVirtualFileArray(result);\n  }","id":96999,"modified_method":"@NotNull\n  private static VirtualFile[] filterByReadOnliness(@NotNull VirtualFile[] files) {\n    List<VirtualFile> result = ContainerUtil.filter(files, new Condition<VirtualFile>() {\n      @Override\n      public boolean value(VirtualFile file) {\n        return file.isInLocalFileSystem();\n      }\n    });\n    return VfsUtilCore.toVirtualFileArray(result);\n  }","commit_id":"ead4e15edd493bc815795c0a10809a2db6fad49a","url":"https://github.com/JetBrains/intellij-community"}]